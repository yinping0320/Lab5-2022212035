/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { switchMap, takeUntil } from 'rxjs/operators';
/*
* @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-12-18 18:44:13
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-29 08:41:39
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, Input, TemplateRef, Directive, ContentChildren, QueryList, HostListener, Output, EventEmitter, ElementRef, Injector, ViewChild, Optional, Self, NgZone, Renderer2, ViewEncapsulation, ChangeDetectionStrategy, ChangeDetectorRef, HostBinding } from '@angular/core';
import { FarrisTemplateDirective, CommonUtils, IdService, FarrisComponentInstanceService, DebugService } from '@farris/ui-common';
import { ResizeService } from '@farris/ui-common/events';
import { ColumnFormatService } from '@farris/ui-common/column';
import { InputGroupComponent } from '@farris/ui-input-group';
import { LocaleService } from '@farris/ui-locale';
import { PerfectScrollbarComponent } from '@farris/ui-perfect-scrollbar';
import { of, BehaviorSubject, Subject, timer } from 'rxjs';
import { map } from 'rxjs/operators';
import { extend, remove } from 'lodash-es';
import ResizeObserver from 'resize-observer-polyfill';
import { VirtualizedLoaderService } from './virtualized-loader.service';
import { TreetableService } from './treetable.service';
import { SearchHandle } from './search.handle';
import { TTHotkeys } from './hotkeys';
import { FarrisContextMenuDirective } from '@farris/ui-context-menu';
/**
 * 单元格点事件参数
 * @record
 */
export function CellClickParam() { }
if (false) {
    /** @type {?} */
    CellClickParam.prototype.event;
    /** @type {?} */
    CellClickParam.prototype.col;
    /** @type {?} */
    CellClickParam.prototype.node;
}
/**
 * 节点钩选事件
 * @record
 */
export function NodeCheckedParam() { }
if (false) {
    /** @type {?|undefined} */
    NodeCheckedParam.prototype.originalEvent;
    /** @type {?} */
    NodeCheckedParam.prototype.node;
    /** @type {?|undefined} */
    NodeCheckedParam.prototype.nodes;
    /** @type {?} */
    NodeCheckedParam.prototype.instance;
}
/**
 * @record
 */
export function NodeSelectedParam() { }
if (false) {
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.originalEvent;
    /** @type {?} */
    NodeSelectedParam.prototype.node;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.type;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.index;
    /** @type {?|undefined} */
    NodeSelectedParam.prototype.parents;
    /** @type {?} */
    NodeSelectedParam.prototype.instance;
}
/** @type {?} */
const NODES_PAGER_COLUMN_FIELD = '__nodespagerbar__';
export class TreeTableColumnDirective {
}
TreeTableColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: 'tt-column, [tt-column]'
            },] }
];
TreeTableColumnDirective.propDecorators = {
    field: [{ type: Input }],
    title: [{ type: Input }],
    width: [{ type: Input }],
    hAlign: [{ type: Input }],
    align: [{ type: Input }],
    formatter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TreeTableColumnDirective.prototype.field;
    /** @type {?} */
    TreeTableColumnDirective.prototype.title;
    /** @type {?} */
    TreeTableColumnDirective.prototype.width;
    /** @type {?} */
    TreeTableColumnDirective.prototype.hAlign;
    /** @type {?} */
    TreeTableColumnDirective.prototype.align;
    /** @type {?} */
    TreeTableColumnDirective.prototype.formatter;
}
export class TreeTableComponent {
    /**
     * @param {?} ttService
     * @param {?} el
     * @param {?} resizeSer
     * @param {?} renderer
     * @param {?} utils
     * @param {?} colFormatSer
     * @param {?} shortcuts
     * @param {?} cdRef
     * @param {?} ngZone
     * @param {?} injector
     */
    constructor(ttService, el, resizeSer, renderer, utils, colFormatSer, shortcuts, cdRef, ngZone, injector) {
        this.ttService = ttService;
        this.el = el;
        this.resizeSer = resizeSer;
        this.renderer = renderer;
        this.utils = utils;
        this.colFormatSer = colFormatSer;
        this.shortcuts = shortcuts;
        this.cdRef = cdRef;
        this.ngZone = ngZone;
        this.injector = injector;
        this.id = '';
        /**
         * 宽度
         */
        this.width = 500;
        /**
         * 高度
         */
        this.height = 400;
        this.showFilterBar = false;
        /**
         * 显示过滤行
         */
        this.enableFilterRow = false;
        /**
         * 显示查询字段
         */
        this.showSearchField = true;
        this.headerHeight = 35;
        /**
         * 表头折行
         */
        this.headerWrap = false;
        /**
         * 行高
         */
        this.rowHeight = 29;
        /**
         * 列信息
         */
        this.columns = [];
        this._groupColumns = [];
        /**
         * 启用多表头
         */
        this.useGroupHeader = false;
        this.fitColumns = true;
        this.autoFitColumns = false;
        this.allColumnsTitle = '所有列';
        this.searchAnyField = true;
        /**
         * 显示连接线，默认为 false
         */
        this.showLines = false;
        this.showLinesOnHover = false;
        /**
         * 是否启用多选。 默认为单选
         */
        this.multiSelect = false;
        this.singleSelect = true;
        /**
         * 启用多选后，是否显示checkbox
         */
        this.showCheckbox = false;
        /**
         * 显示边框线
         */
        this.showBorder = true;
        this.showCheckAll = true;
        this.showHeader = true;
        /**
         * 启用斑马线
         */
        this.striped = false;
        /**
         * 启用鼠标划过效果
         */
        this.hovered = true;
        /**
         * 禁用。 禁用时不允许选中行
         */
        this.disabled = false;
        /**
         * 数据加载方式; 默认值 为 all
         * - all: 全部加载
         * - async: 分层加载
         */
        this.loadDataType = 'all';
        /**
         * 固定表头
         */
        this.fixedHeader = false;
        /**
         * 当多选时，选中当前行并钩选
         */
        this.checkOnSelect = false;
        /**
         * 当多选时，钩选并选中当前行
         */
        this.selectOnCheck = false;
        /**
         * 启用多选时，此属性为true 时，仅当前行选中
         */
        this.onlySelectSelf = false;
        /**
         * 启用列宽调整
         */
        this.resizableColumns = true;
        /**
         * 设置为true时自适应父容的尺寸
         */
        this.fit = false;
        /**
         * 启用级联选中功能
         */
        this.cascadeCheck = true;
        /**
         * 向下级联选中
         */
        this.cascadeDown = true;
        /**
         * 向上级联选中
         */
        this.cascadeUp = true;
        /**
         * 空数据时，显示的提示文本
         */
        this.emptyMessage = '暂无数据';
        /**
         * 缩进间距，默认为 16px
         */
        this.indentSpacing = 16;
        /**
         * 单击行选中后，在次点击不会被取消选中状态;
         */
        this.keepSelect = true;
        /**
         * 虚拟加载
         */
        this.virtualized = false;
        /**
         * 仅允许选择叶子节点
         * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
         * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
         * - no: 允许选择所有节点；服务器端设置失效
         */
        this.onlySelectLeaf = 'default';
        /**
         * 显示图标
         */
        this.showIcon = false;
        /**
         * 叶子节点图标
         */
        this.leafIcon = 'file';
        /**
         * 节点展开图标
         */
        this.expandIcon = 'folder-open';
        /**
         * 节点折叠图标
         */
        this.collapseIcon = 'folder';
        this.foldIcon = 'treetable-toggler';
        this.unfoldIcon = 'extanded treetable-toggler';
        /**
         * 启用节点图标从数据中获取。 默认为 false
         */
        this.useIconFromData = false;
        /**
         * 当数据源中icon未设置时使用内置ICON. 默认为 true
         */
        this.whenDataIconEmptyUseDefault = true;
        /**
         * 从数据源字段中获取图标
         */
        this.iconField = '';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        /**
         * 启用前端文本查找
         */
        this.enableFindText = false;
        // 树列表默认展开层级。 -1： 不展开； 0： 全部展开； >0:  展开到指定级数；
        this.expandLevel = -1;
        this.selectValue = '';
        this.selectValueChange = new EventEmitter();
        /**
         * 启用双击展开节点
         */
        this.dblClickExpand = true;
        this.useDblClick = true;
        /**
         * 选中节点ID数组
         */
        this.selectValues = [];
        this.selectValuesChange = new EventEmitter();
        /**
         * 是否禁止折行，默认不折行
         */
        this.nowrap = true;
        this.checkValues = [];
        this.checkValuesChange = new EventEmitter();
        /**
         * 分页信息
         */
        this.pagination = false;
        /**
         * 分页加载子节点数据
         */
        this.paginationForChildren = false;
        /**
         * 分页条显示模式， default, simple
         */
        this.pagerViewMode = 'default';
        /**
         * 启用服务器端分页
         */
        this.pagerOnServer = true;
        /**
         * 每页记录数
         */
        this.pageList = [10, 20, 30, 50, 100];
        /**
         * 当前页码
         */
        this.pageIndex = 1;
        /**
         * 每页记录数
         */
        this.pageSize = 20;
        /**
         * 分页区高度
         */
        this.pagerHeight = 56;
        /**
         * 显示每页记录数
         */
        this.showPageList = false;
        /**
         * 显示分页信息
         */
        this.showPageInfo = true;
        /**
         * 显示页码
         */
        this.showPageNumber = true;
        /**
         * 显示页码最大数量
         */
        this.pagerLabelSize = 7;
        /**
         * 显示页码输入框
         */
        this.showGotoInput = false;
        /**
         * 子节点分页是否显示总记录数，默认 false
         */
        this.showTotalForChildren = false;
        /**
         * 总记录数
         */
        this.total = 0;
        this.enableContextMenu = false;
        this.contextMenuItems = [];
        this.pageSizeChanged = new EventEmitter();
        this.pageChanged = new EventEmitter();
        /**
         * 排序后
         */
        this.columnSorted = new EventEmitter();
        /**
         * 选中事件
         */
        this.nodeSelected = new EventEmitter();
        /**
         * 取消选中事件
         */
        this.nodeUnSelect = new EventEmitter();
        /**
         * 钩选
         */
        this.nodeChecked = new EventEmitter();
        /**
         * 取消钩选
         */
        this.nodeUnChecked = new EventEmitter();
        /**
         * 全选事件
         */
        this.checkAll = new EventEmitter();
        /**
         * 取消全选
         */
        this.unCheckAll = new EventEmitter();
        /**
         * 查询
         */
        this.search = new EventEmitter();
        this.dblClick = new EventEmitter();
        this.loadedData = new EventEmitter();
        this.expand = new EventEmitter();
        this.collapse = new EventEmitter();
        this.expandAllNodes = new EventEmitter();
        this.collapseAllNodes = new EventEmitter();
        this.appendNew = new EventEmitter();
        this.removed = new EventEmitter();
        this.updated = new EventEmitter();
        this.clearSearchValue = new EventEmitter();
        this.cellClick = new EventEmitter();
        this.childsPageChanged = new EventEmitter();
        this.searchValueChange = new EventEmitter();
        this.loadedTimer = 100;
        this._data = [];
        // loaddata 时 先设置为空数组，
        this.isLoadNewDataSetEmpty = false;
        /**
         * 根据内容自动宽度，默认 false;
         * 此属性开启后，自动列宽失效
         */
        this.autoWidth = false;
        /**
         * 选中项集合
         */
        this._selections = [];
        /**
         * 选中项索引
         */
        this.selectRowIndex = -1;
        /**
         * 选中当前行
         */
        this._selectedRow = null;
        /**
         * 钩选的记录集合
         */
        this._checkeds = [];
        this.searchData = { field: '*', value: '' };
        this.searchButtonText = '<i class="f-icon f-icon-search"></i>';
        /**
         * 显示查询工具条
         */
        this.showFindInput = false;
        this.isDataChanged = false;
        this.topHideHeight = 0;
        this.bottomHideHeight = 0;
        this.state = {
            searchRowNodes: null,
            searched: false,
            rowNodes: [],
            scrollY: 0,
            scrollX: 0
        };
        /**
         * 待查询的文本
         */
        this.findValue = '';
        /**
         * 结果总数
         */
        this.findCount = 0;
        /**
         * 当前索引
         */
        this.findCurrent = 0;
        /**
         * 存储文本查询结果
         */
        this.findResult = [];
        this.ro = null;
        this.findKeysHandler = null;
        this._hotKeys = null;
        this.styleSheetId = 'treetable-style-';
        // 调整模板，此属性仅为帮助中的树组件
        this.fast = false;
        this.paginationOptions = {
            id: 'Farris-TreeTable-Pagination_',
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
        this.selectNodeChangedSubject = new BehaviorSubject(null);
        this._UUID = '';
        // 是否有固定列
        this.fixedColumns = false;
        this.destroy$ = new Subject();
        this.farrisInstances = null;
        this.difference = (/**
         * @param {?} first
         * @param {?} second
         * @return {?}
         */
        (first, second) => first.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => !second.some((/**
         * @param {?} secondItem
         * @return {?}
         */
        secondItem => secondItem == item)))));
        this.debugSer = null;
        this.filterRowConditions = null;
        this.onBeforeShowContextMenu = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            // row_1_fixedleft  row_1  row_1_fixedright
            const { contextMenuDom, event } = e;
            /** @type {?} */
            let rowID = event.target.id;
            if (contextMenuDom) {
                rowID = this.trId2DataId(contextMenuDom);
                /** @type {?} */
                const rowNode = this.findRowNode(rowID);
                /** @type {?} */
                let go$ = of({ show: true });
                if (this.beforeShowContextMenu) {
                    go$ = this.beforeShowContextMenu({ data: rowNode, tree: this });
                }
                return go$.pipe(switchMap((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => {
                    if (r.show) {
                        if (r.menus) {
                            this.contextMenuItems = r.menus;
                            this.detectChanges();
                        }
                        /** @type {?} */
                        const viewportW = contextMenuDom.closest('.farris-treetable').offsetWidth;
                        /** @type {?} */
                        const targetW = contextMenuDom.offsetWidth;
                        /** @type {?} */
                        const focusTargetWidth = viewportW > targetW ? targetW : viewportW;
                        return of({ show: true, data: { data: rowNode, tree: this }, focusTargetWidth });
                    }
                    else {
                        return of({ show: false });
                    }
                })));
            }
            return of({ show: false });
        });
        this.searchHandle = new SearchHandle(this);
        this.scrollLoader = new VirtualizedLoaderService(this);
        if (this.injector) {
            this._hotKeys = this.injector.get(TTHotkeys, null);
            this.localeService = this.injector.get(LocaleService, null);
            this.idService = this.injector.get(IdService, null);
            this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);
        }
        if (this.idService) {
            this._UUID = this.idService.uuid();
            this.styleSheetId += this.idService.uuid();
        }
        else {
            this._UUID = ('' + Math.random()).slice(2);
            this.styleSheetId += ('' + Math.random()).slice(2);
        }
        this.ttService = new TreetableService();
        this.debugSer = this.injector.get(DebugService, null);
        if (this.debugSer) {
            this.debugSer.useDebugMode();
        }
    }
    /**
     * @param {?} cols
     * @return {?}
     */
    set groupColumns(cols) {
        this._groupColumns = cols || [];
        /** @type {?} */
        const _columns = this.ttService.checkColumnsForGroupHeader(cols.map((/**
         * @param {?} cs
         * @return {?}
         */
        cs => [...cs])), this).columns;
        this.columns = _columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
    }
    /**
     * @return {?}
     */
    get groupColumns() {
        return this._groupColumns;
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this._data = val;
        this.updateSerializedValue();
        if (!this.isLoadNewDataSetEmpty) {
            this.initNodeStatus();
        }
        // autowidth 时，表头宽度依据内容宽度作同步处理
        this.setNewColumnsWidth();
        this.loadDataSuccess();
    }
    /**
     * @param {?} content
     * @return {?}
     */
    set allCheckbox(content) {
        this.headerCheckboxCmp = content;
    }
    /**
     * @return {?}
     */
    get selections() {
        return this._selections;
    }
    /**
     * @param {?} vals
     * @return {?}
     */
    set selections(vals) {
        if (vals && vals.length) {
            // 过滤掉数据源中不存在节点
            this._selections = vals.filter((/**
             * @param {?} tn
             * @return {?}
             */
            tn => tn && this.findRowNode(tn.id)));
            /** @type {?} */
            const ids = this._selections.map((/**
             * @param {?} tn
             * @return {?}
             */
            tn => tn.id));
            if (ids.length !== this.selectValues.length ||
                (ids.length === this.selectValues.length && this.difference(ids, this.selectValues).length)) {
                this.selectValues = ids;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.selectValuesChange.emit(ids);
                }));
            }
        }
        else {
            this._selections = [];
            this.selectValues = [];
            this.selectValuesChange.emit([]);
        }
    }
    /**
     * @return {?}
     */
    get selectedRow() {
        return this._selectedRow;
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    set selectedRow(treeNode) {
        this._selectedRow = treeNode;
        if (treeNode) {
            if (this.selectValue !== treeNode.id) {
                this.selectValue = treeNode.id;
                this.selectValueChange.emit(treeNode.id);
            }
        }
        else {
            this.selectValue = null;
            this.selectValueChange.emit(null);
        }
    }
    /**
     * @return {?}
     */
    get checkeds() {
        return this._checkeds;
    }
    /**
     * @param {?} treeNodes
     * @return {?}
     */
    set checkeds(treeNodes) {
        if (treeNodes && treeNodes.length) {
            this._checkeds = treeNodes.filter((/**
             * @param {?} tn
             * @return {?}
             */
            tn => this.findRowNode(tn.id)));
            /** @type {?} */
            const ids = this._checkeds.map((/**
             * @param {?} tn
             * @return {?}
             */
            tn => tn.id));
            this.checkValues = this.checkValues || [];
            if (ids.length !== this.checkValues.length || (ids.length === this.checkValues.length && this.difference(ids, this.checkValues).length)) {
                this.checkValues = ids;
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.checkValuesChange.emit(ids);
                }));
            }
        }
        else {
            this._checkeds = [];
            this.checkValues = [];
            this.checkValuesChange.emit([]);
        }
    }
    /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    writeConsole(msg, type = 'warn') {
        if (this.debugSer) {
            this.debugSer[type](msg);
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkOptons() {
        // 启用数据折行后，虚拟渲染功能失效
        if (!this.nowrap) {
            this.virtualized = false;
        }
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.reSetSize();
            this.setScorllBodyHeight();
        }));
        if (this.multiSelect) {
            this.singleSelect = false;
        }
        if (this.singleSelect && this.showCheckbox) {
            this.checkOnSelect = true;
            this.selectOnCheck = true;
        }
        if (!this.beforeSortColumn) {
            this.beforeSortColumn = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (this.fit) {
            this.renderer.addClass(this.el.nativeElement, 'f-utils-fill-flex-column');
            /** @type {?} */
            const parentEl = this.el.nativeElement.parentElement || this.el.nativeElement.parentNode;
            if (parentEl) {
                // this.renderer.addClass(parentEl, 'f-utils-fill');
                this.renderer.setStyle(parentEl, 'overflow', 'hidden');
            }
        }
        if (!this.beforeClickNode) {
            this.beforeClickNode = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeCheckAll) {
            this.beforeCheckAll = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (!this.beforeUnCheckAll) {
            this.beforeUnCheckAll = (/**
             * @return {?}
             */
            () => of(true));
        }
        if (this.autoWidth) {
            this.fitColumns = false;
            this.resizableColumns = false;
        }
        if (!this.disabledRow) {
            this.disabledRow = (/**
             * @return {?}
             */
            () => false);
        }
        if (!this.searchAnyField && this.searchFields && this.searchFields.length) {
            this.searchData.field = this.searchFields[0].label;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.id = 'Treetable-' + this._UUID;
        // 创建 stylesheet
        this.styleElement = this.utils.createStyleSheet(this.styleSheetId);
        this.checkColumnOption();
        this.checkOptons();
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                if (this.el.nativeElement.parentElement) {
                    this.ro = new ResizeObserver((/**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */
                    (entries, observer) => {
                        if (entries && entries[0]) {
                            const { width, height } = entries[0].contentRect;
                            /** @type {?} */
                            const target = entries[0].target;
                            if (this.fit && target['offsetParent']) {
                                this.resize({ width, height: this.showBorder ? height - 2 : height });
                            }
                        }
                        // 表单切换后，如果有选中行，则更新滚动条位置
                        this.scrollToCurrentNode();
                    }));
                    this.ro.observe(this.el.nativeElement.parentElement);
                }
            }));
        }
        this.paginationOptions = this.initPaginationOptions();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            if (this.el.nativeElement.parentElement) {
                this.ro.unobserve(this.el.nativeElement.parentElement);
            }
            this.ro.disconnect();
            this.ro = null;
        }
        if (this.findKeysHandler) {
            this.findKeysHandler.unsubscribe();
        }
        this.utils.removeStyleSheet(this.styleSheetId);
        this.styleElement = null;
        if (this.farrisInstances) {
            this.farrisInstances.destroy(this.el.nativeElement);
        }
        this.ttService = null;
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.isDataChanged = changes.data.currentValue !== changes.data.previousValue;
        }
        if (changes.multiSelect && !changes.multiSelect.isFirstChange()) {
            this.singleSelect = !changes.multiSelect.currentValue;
            if (this.singleSelect && this.showCheckbox) {
                this.selectOnCheck = true;
                this.checkOnSelect = true;
            }
        }
        if (changes.disabled && !changes.disabled.isFirstChange()) {
            this.hovered = !changes.disabled.currentValue;
        }
        if (changes.enableFindText && !changes.enableFindText.isFirstChange()) {
            this.setFindText(changes.enableFindText.currentValue);
        }
        if (changes.selectValue && !changes.selectValue.isFirstChange()) {
            this.selectNode(changes.selectValue.currentValue);
        }
        if (changes.selectValues && !changes.selectValues.isFirstChange()) {
            this.selectNodes(changes.selectValues.currentValue);
        }
        if (changes.checkValues && !changes.checkValues.isFirstChange()) {
            this.checkedNodes(changes.checkValues.currentValue);
        }
        if (changes.pageIndex !== undefined && !changes.pageIndex.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                currentPage: this.pageIndex
            });
        }
        if (changes.pageSize !== undefined && !changes.pageSize.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                itemsPerPage: this.pageSize
            });
        }
        if (changes.pageList !== undefined && !changes.pageList.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                pageList: this.pageList
            });
        }
        if (changes.total !== undefined && !changes.total.isFirstChange()) {
            this.paginationOptions = Object.assign(this.paginationOptions, {
                totalItems: this.total
            });
        }
        if (changes.fitColumns && !changes.fitColumns.isFirstChange()) {
            this.setTableWidth(this.allColumnsWidth());
        }
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.checkColumnOption();
        }
        if (changes.showBorder && !changes.showBorder.isFirstChange()) {
            // this.reSetSize();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        // if (this.isDataChanged) {
        //     this.loadedData.emit();
        //     this.isDataChanged = false;
        // } else {
        //     this.ngZone.runOutsideAngular(() => {
        //         if (this.psRef) {
        //             this.psRef.directiveRef.update();
        //         }
        //     });
        // }
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.templates.forEach((/**
         * @param {?} item
         * @return {?}
         */
        (item) => {
            switch (item.getType()) {
                case 'header':
                    this.headerTemplate = item.template;
                    break;
                case 'body':
                    this.bodyTemplate = item.template;
                    break;
            }
        }));
        if (this.columnsRef.length) {
            this.columns = this.ttc2columns(this.columnsRef);
            this.columnsRef.changes.subscribe((/**
             * @param {?} d
             * @return {?}
             */
            (d) => {
                this.columns = this.ttc2columns(d);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.containerElement = this.el.nativeElement.querySelector('.farris-treetable');
        this.registerShortcuts();
        // autowidth 时，表头宽度依据内容宽度作同步处理
        this.setNewColumnsWidth();
        this.setRightFixedColumnShadow();
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
        if (this.bodyTemplate) {
            this.utils.appendCssRules([`#${this.id} .farris-treetable .farris-treetable-tbody td {padding: .25rem 0.75rem;}`], this.styleElement.sheet);
        }
        // 兼容旧版设计器        
        if (this.fit && this.el.nativeElement.parentElement.nodeName !== 'DIV') {
            if (this.el.nativeElement.parentElement.nodeName === 'APP-DG-TREE-GRID') {
                /** @type {?} */
                const div = this.el.nativeElement.parentElement.closest('div');
                if (div) {
                    div.style.overflow = 'hidden';
                }
            }
        }
        this.loadDataSuccess();
    }
    /**
     * @private
     * @return {?}
     */
    loadDataSuccess() {
        timer(this.loadedTimer).pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.psRef && this.psRef.directiveRef) {
                this.psRef.directiveRef.update();
            }
            this.loadedData.emit();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setNewColumnsWidth() {
        if (!this.autoWidth) {
            return;
        }
        /** @type {?} */
        const newColWidth = {};
        /** @type {?} */
        let headerCells = [];
        /** @type {?} */
        let firstRowCells = [];
        // let colgroups = [];
        if (this.showHeader && this.headerTable) {
            headerCells = Array.from(this.headerTable.nativeElement.querySelectorAll('th'));
        }
        if (this.serializedValue && this.serializedValue.length && this.bodyTable) {
            firstRowCells = Array.from(this.bodyTable.nativeElement.querySelector('tr').querySelectorAll('td'));
            // colgroups = this.bodyTable.nativeElement.querySelector('colgroup').querySelectorAll('col');
        }
        firstRowCells.forEach((/**
         * @param {?} td
         * @param {?} index
         * @return {?}
         */
        (td, index) => {
            /** @type {?} */
            const fieldName = td.getAttribute('field');
            /** @type {?} */
            let colWidth = td.getBoundingClientRect().width.toFixed(2);
            newColWidth[fieldName] = colWidth;
            /** @type {?} */
            const col = this.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === fieldName));
            if (col && col.width !== undefined) {
                colWidth = colWidth > col.width ? colWidth : col.width;
            }
            td.style.minWidth = colWidth + 'px';
            headerCells[index].style.width = colWidth + 'px';
        }));
        /** @type {?} */
        const colWidthTotal = this.allColumnsWidth();
        this.setTableWidth(colWidthTotal);
    }
    /**
     * @param {?} col
     * @return {?}
     */
    columnIsVisible(col) {
        return this.ttService.columnIsVisible(col, this);
    }
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    columnCssName(n) {
        return `#${this.id} .treetable-cell[field="${n.field}"], #${this.id} .treetable-header-cell[field="${n.field}"]:not(.group-header-cell)`;
    }
    /**
     * @private
     * @return {?}
     */
    checkGroupColumns() {
        /** @type {?} */
        var i = this.groupColumns.length - 1;
        while (i >= 0) {
            /** @type {?} */
            var ids = this.groupColumns[i].map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.parentId));
            ids = Array.from(new Set(ids));
            ids.map((/**
             * @param {?} id
             * @return {?}
             */
            id => {
                /** @type {?} */
                const childCols = this.groupColumns[i].filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.parentId == id)).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const dataField = this.columns.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.id === n.id));
                    return dataField || n;
                }));
                return {
                    id,
                    width: childCols.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @return {?}
                     */
                    (r, c) => { return r += c.width; }), 0),
                    left: childCols[0].left,
                    right: childCols[childCols.length - 1].right || 0
                };
            })).forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => {
                if (i - 1 >= 0) {
                    /** @type {?} */
                    let pCol = this.groupColumns[i - 1].find((/**
                     * @param {?} pc
                     * @return {?}
                     */
                    pc => pc.id == p.id));
                    /** @type {?} */
                    const dataField = this.columns.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => c.id === p.id));
                    pCol = dataField || pCol;
                    pCol.width = p.width;
                    if (pCol.fixed === 'left') {
                        pCol.left = p.left;
                    }
                    if (pCol.fixed === 'right') {
                        pCol.right = p.right;
                    }
                }
            }));
            i--;
        }
    }
    // 按固定列的顺序排序
    /**
     * @private
     * @param {?=} updateColumns
     * @return {?}
     */
    sortColumnsByFixed(updateColumns = true) {
        /** @type {?} */
        const fixedLeft = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'left'));
        /** @type {?} */
        const fixedCenter = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n.fixed || n.fixed === 'center'));
        /** @type {?} */
        const fixedRight = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'right'));
        if (fixedLeft && fixedLeft.length) {
            fixedLeft.forEach((/**
             * @param {?} n
             * @param {?} index
             * @return {?}
             */
            (n, index) => {
                if (index) {
                    n.left = fixedLeft.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @param {?} i
                     * @return {?}
                     */
                    (r, c, i) => {
                        if (i < index) {
                            return r += c.width;
                        }
                        return r;
                    }), 0);
                }
                else {
                    n.left = 0;
                }
            }));
        }
        if (fixedRight && fixedRight.length) {
            /** @type {?} */
            let rightWidthTotal = fixedRight.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            (r, c) => {
                return r + c.width;
            }), 0);
            fixedRight.forEach((/**
             * @param {?} n
             * @param {?} index
             * @return {?}
             */
            (n, index) => {
                rightWidthTotal -= n.width;
                n.right = rightWidthTotal;
            }));
        }
        if (updateColumns) {
            this.columns = fixedLeft.concat(fixedCenter).concat(fixedRight);
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkColumnOption() {
        /** @type {?} */
        const cssRules = [];
        // 启用分页加载子节点
        if (this.paginationForChildren) {
            /** @type {?} */
            const pagerBarCol = {
                field: NODES_PAGER_COLUMN_FIELD,
                width: 160,
                title: '',
                align: 'center',
                template: this.nodesPagerBar,
                rowspan: 1,
            };
            if (this.useGroupHeader) {
                if (this.groupColumns[0][this.groupColumns[0].length - 1].fixed === 'right') {
                    pagerBarCol.fixed = 'right';
                }
                pagerBarCol.rowspan = this.groupColumns.length;
                this.groupColumns[0].push(pagerBarCol);
            }
            this.columns.push(pagerBarCol);
        }
        if (!this.fitColumns) {
            this.sortColumnsByFixed();
        }
        this.columns.forEach((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n.visible === undefined) {
                n.visible = true;
            }
            if (n['halign']) {
                n.hAlign = n['halign'];
            }
            if (n.width === undefined) {
                n.width = 100;
            }
            if (!n.id) {
                n.id = 'treetable-header-' + (n.field || i);
            }
        }));
        /** @type {?} */
        const colWidthTotal = this.allColumnsWidth();
        /** @type {?} */
        let fixedCols = 0;
        /** @type {?} */
        const fixedRightColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'right'));
        if (fixedRightColumns && fixedRightColumns.length) {
            fixedRightColumns[0]['rightShadowCol'] = true;
            fixedRightColumns[fixedRightColumns.length - 1]['lastColumn'] = true;
        }
        else {
            if (this.columns && this.columns.length) {
                this.columns[this.columns.length - 1]['lastColumn'] = true;
            }
        }
        /** @type {?} */
        const fixedLeftColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'left'));
        if (fixedLeftColumns && fixedLeftColumns.length) {
            fixedLeftColumns[fixedLeftColumns.length - 1]['leftShadowCol'] = true;
        }
        fixedCols = this.setCellWidthCss(colWidthTotal, fixedCols, cssRules);
        this.setTableWidth(colWidthTotal);
        this.fixedColumns = !!fixedCols;
    }
    /**
     * @private
     * @param {?} colWidthTotal
     * @param {?} fixedCols
     * @param {?} cssRules
     * @return {?}
     */
    setCellWidthCss(colWidthTotal, fixedCols, cssRules) {
        this.columns.forEach((/**
         * @param {?} n
         * @param {?} index
         * @return {?}
         */
        (n, index) => {
            /** @type {?} */
            const isVisible = this.columnIsVisible(n);
            /** @type {?} */
            const ruleName = this.columnCssName(n);
            /** @type {?} */
            const cssRule = this.utils.getCssRule(ruleName, this.styleElement.sheet);
            if (!cssRule) {
                /** @type {?} */
                let stylecss = ruleName + ' { ';
                stylecss += isVisible ? '' : 'display: none;';
                if (this.fitColumns) {
                    stylecss += `width: ${(n.width / colWidthTotal * 100).toFixed(2)}%;`;
                }
                else {
                    stylecss += `width: ${n.width}px;`;
                    if (n.fixed) {
                        if (n.fixed === 'left') {
                            stylecss += `left: ${n.left}px`;
                            fixedCols++;
                        }
                        if (n.fixed === 'right') {
                            stylecss += `right: ${n.right}px`;
                            fixedCols++;
                        }
                    }
                }
                stylecss += '}';
                cssRules.push(stylecss);
            }
            else {
                cssRule.style.display = isVisible ? '' : 'none';
                if (this.fitColumns) {
                    cssRule.style.width = `${(n.width / colWidthTotal * 100).toFixed(2)}%`;
                }
                else {
                    cssRule.style.width = `${n.width}px`;
                    if (n.fixed) {
                        if (n.fixed === 'left') {
                            cssRule.style.left = `${n.left}px`;
                        }
                        if (n.fixed === 'right') {
                            cssRule.style.right = `${n.right}px`;
                        }
                    }
                }
            }
        }));
        if (this.useGroupHeader) {
            this.autoWidth = false; // 多表头启用后，自动列宽失效 TFS 496088
            this.checkGroupColumns();
            /** @type {?} */
            var i = this.groupColumns.length - 2;
            while (i >= 0) {
                /** @type {?} */
                const groupHeaderColCsses = this.groupColumns[i].filter((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => !col.field)).map((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => {
                    /** @type {?} */
                    let groupColCssName = `#${col.id}{ width: ${col.width}px`;
                    if (col.fixed) {
                        if (col.fixed === 'left') {
                            groupColCssName += ';left:' + col.left + 'px';
                        }
                        if (col.fixed === 'right') {
                            groupColCssName += ';right:' + col.right + 'px';
                        }
                    }
                    return groupColCssName += '}';
                }));
                this.utils.appendCssRules2(groupHeaderColCsses, this.styleElement.sheet);
                i--;
            }
        }
        if (cssRules.length) {
            this.utils.appendCssRules(cssRules, this.styleElement.sheet);
        }
        return fixedCols;
    }
    /**
     * @private
     * @param {?} colWidthTotal
     * @return {?}
     */
    setTableWidth(colWidthTotal) {
        if (this.headerTable && this.bodyTable) {
            if (!this.fitColumns && !this.autoFitColumns) {
                this.headerTable.nativeElement.style.width = `${colWidthTotal}px`;
                this.bodyTable.nativeElement.style.width = `${colWidthTotal}px`;
            }
            else {
                this.headerTable.nativeElement.style.width = '100%';
                this.bodyTable.nativeElement.style.width = '100%';
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    allColumnsWidth() {
        return this.columns.reduce((/**
         * @param {?} r
         * @param {?} c
         * @return {?}
         */
        (r, c) => {
            if (this.columnIsVisible(c)) {
                return r + c.width;
            }
            else {
                return r;
            }
        }), 0);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageChange($event) {
        this.pageChanged.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPageSizeChange($event) {
        this.pageSizeChanged.emit($event);
    }
    /**
     * @param {?} pageInfo
     * @return {?}
     */
    updatePageInfo(pageInfo) {
        if (pageInfo && Object.keys(pageInfo).length) {
            /** @type {?} */
            const obj = {};
            if (pageInfo.total !== undefined) {
                obj.totalItems = pageInfo.total;
            }
            if (pageInfo.pageIndex !== undefined) {
                obj.currentPage = pageInfo.pageIndex;
            }
            if (pageInfo.pageSize !== undefined) {
                obj.itemsPerPage = pageInfo.pageSize;
            }
            if (pageInfo.pageList !== undefined) {
                obj.pageList = pageInfo.pageList;
            }
            this.paginationOptions = Object.assign(this.paginationOptions, obj);
        }
    }
    /**
     * @private
     * @return {?}
     */
    initPaginationOptions() {
        return {
            id: 'Farris-TreeTable-Pagination_' + this._UUID,
            itemsPerPage: this.pageSize,
            currentPage: this.pageIndex,
            pageList: this.pageList,
            totalItems: this.total,
            remote: this.pagerOnServer
        };
    }
    /**
     * @param {?} col
     * @param {?} rowdata
     * @param {?=} fast
     * @return {?}
     */
    getNodeText(col, rowdata, fast = false) {
        if (col.isMultilingualField) {
            /** @type {?} */
            const val = this.utils.getValue(col.field, rowdata);
            if (this.localeService) {
                /** @type {?} */
                const localeId = this.localeService.localeId || 'zh-CHS';
                if (val && typeof val === 'object' && Object.keys(val).length > 0) {
                    return val[localeId];
                }
                else {
                    return val;
                }
            }
        }
        else {
            return this.utils.getValue(col.field, rowdata, !fast);
        }
    }
    /**
     * @private
     * @return {?}
     */
    initNodeStatus() {
        if (!this.singleSelect) {
            if (this.checkValues && this.checkValues.length) {
                this.checkedNodes(this.checkValues, false, false);
            }
            if (this.selectValues && this.selectValues.length && !this.onlySelectSelf) {
                this.selectNodes(this.selectValues, false, false);
            }
        }
        else {
            if (this.selectValue) {
                this.selectNode(this.selectValue, false);
            }
        }
    }
    /**
     * 注册快捷键
     * @private
     * @return {?}
     */
    registerShortcuts() {
        if (this.showFilterBar && this._hotKeys) {
            this._hotKeys.addShortcut({ keys: 'enter', element: this.inputGroup.textbox.nativeElement }).subscribe((/**
             * @return {?}
             */
            () => {
                this.onSearch();
            }));
        }
        this.setFindText(this.enableFindText);
    }
    /**
     * @private
     * @param {?=} enable
     * @return {?}
     */
    setFindText(enable = true) {
        this.enableFindText = enable;
        if (this.enableFindText && this._hotKeys) {
            // 查询工具条
            this.findKeysHandler = this._hotKeys.addShortcut({ keys: 'control.shift.f' }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (this.enableFindText) {
                    this.showFindInput = true;
                    this.detectChanges();
                }
            }));
        }
        else {
            if (this.showFindInput) {
                this.showFindInput = false;
                this.cdRef.detectChanges();
            }
            if (this.findKeysHandler) {
                this.findKeysHandler.unsubscribe();
                this.findKeysHandler = null;
            }
        }
    }
    /**
     * @private
     * @param {?} rowNode
     * @param {?=} field
     * @param {?=} clsType
     * @return {?}
     */
    getCustomCls(rowNode, field = '', clsType = 'row') {
        /** @type {?} */
        const cls = {};
        /** @type {?} */
        let fn = this.rowStyler;
        if (clsType === 'cell') {
            fn = this.cellStyler;
        }
        if (fn) {
            /** @type {?} */
            const rowCls = fn(rowNode.node, field);
            if (rowCls) {
                /** @type {?} */
                let arrcls = [];
                if (typeof rowCls === 'string') {
                    arrcls = [rowCls];
                }
                else {
                    if (Array.isArray(rowCls)) {
                        arrcls = rowCls;
                    }
                }
                if (arrcls.length) {
                    /** @type {?} */
                    const rowClsObj = {};
                    arrcls.forEach((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => {
                        rowClsObj['' + c] = true;
                    }));
                    /** @type {?} */
                    const _cls = Object.assign({}, rowClsObj, cls);
                    return _cls;
                }
                else {
                    return rowCls;
                }
            }
            else {
                return cls;
            }
        }
        else {
            return cls;
        }
    }
    /**
     * @param {?} rowNode
     * @param {?=} field
     * @return {?}
     */
    getRowCls(rowNode, field) {
        return this.getCustomCls(rowNode, 'row');
    }
    /**
     * @param {?} rowNode
     * @param {?} field
     * @return {?}
     */
    getCellCls(rowNode, field) {
        return this.getCustomCls(rowNode, field, 'cell');
    }
    /**
     * @param {?} currentCol
     * @return {?}
     */
    getRealColWidth(currentCol) {
        if (this.columns && this.columns.length && this.fitColumns) {
            /** @type {?} */
            const colWidthTotal = this.columns.reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            (r, c) => {
                return r + (this.columnIsVisible(c) && (r.field !== NODES_PAGER_COLUMN_FIELD || r.fixedWidth) ? c.width : 0);
            }), 0);
            if (this.columnIsVisible(currentCol)) {
                if (currentCol.field !== NODES_PAGER_COLUMN_FIELD && !currentCol.fixedWidth) {
                    return (currentCol.width / colWidthTotal * 100).toFixed(2) + '%';
                }
                else {
                    return (currentCol.width || 120) + 'px';
                }
            }
            else {
                return 0;
            }
        }
        return currentCol.width + 'px';
    }
    /**
     * @return {?}
     */
    onResized() {
        this.resizeSer.windowResized();
    }
    /**
     * @private
     * @return {?}
     */
    setRightFixedColumnShadow() {
        if (this.psRef && this.psRef.directiveRef) {
            /** @type {?} */
            const ps = ((/** @type {?} */ (this.psRef.directiveRef))).instance;
            if (!ps) {
                return;
            }
            const { containerWidth, scrollbarXLeft, contentWidth } = ps;
            if (containerWidth + scrollbarXLeft < contentWidth) {
                /** @type {?} */
                const fixedRightColumns = this.columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.fixed === 'right'));
                /** @type {?} */
                const ruleName = `#${this.id}.f-treetable--fixed-columns`;
                if (fixedRightColumns && fixedRightColumns.length) {
                    /** @type {?} */
                    const fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;
                    /** @type {?} */
                    const rightCSSRule = `${fixedRightCssRuleKey}{
                        box-shadow:#d9d9d9 -12px 0px 8px -12px inset;
                    }`;
                    this.utils.appendCssRules([rightCSSRule], this.styleElement.sheet);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} x
     * @param {?} e
     * @return {?}
     */
    setFixedColumnShadow(x, e) {
        /** @type {?} */
        const fixedLeftColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'left'));
        /** @type {?} */
        const fixedRightColumns = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'right'));
        /** @type {?} */
        const ruleName = `#${this.id}.f-treetable--fixed-columns`;
        /** @type {?} */
        let fixedLeftCssRuleKey = '';
        /** @type {?} */
        let fixedRightCssRuleKey = '';
        /** @type {?} */
        let leftCSSRule = '';
        /** @type {?} */
        let rightCSSRule = '';
        if (fixedLeftColumns && fixedLeftColumns.length) {
            /** @type {?} */
            const lastFixedLeftColumn = fixedLeftColumns[fixedLeftColumns.length - 1];
            fixedLeftCssRuleKey = `${ruleName} [field="${lastFixedLeftColumn.field}"]::after`;
            leftCSSRule = `${fixedLeftCssRuleKey}{
                box-shadow:#d9d9d9 12px 0px 8px -12px inset;
            }`;
        }
        if (fixedRightColumns && fixedRightColumns.length) {
            fixedRightCssRuleKey = `${ruleName} [r-tt-shadow-col]::before`;
            rightCSSRule = `${fixedRightCssRuleKey}{
                box-shadow:#d9d9d9 -12px 0px 8px -12px inset;
            }`;
        }
        if (x === 0) {
            // 移除左侧固定列阴影样式
            if (fixedLeftCssRuleKey) {
                this.utils.removeCssRule(fixedLeftCssRuleKey, this.styleElement.sheet);
            }
        }
        else if ((x + e.srcElement.offsetWidth).toFixed() == e.srcElement.scrollWidth) {
            // 移除右则固定列阴影样式
            if (fixedRightCssRuleKey) {
                this.utils.removeCssRule(fixedRightCssRuleKey, this.styleElement.sheet);
            }
        }
        else {
            // 添加左右固定列样式
            /** @type {?} */
            const arr = [];
            if (leftCSSRule) {
                arr.push(leftCSSRule);
            }
            if (rightCSSRule) {
                arr.push(rightCSSRule);
            }
            this.utils.appendCssRules(arr, this.styleElement.sheet);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onScrollX(e) {
        if (this.showHeader && this.headerBox) {
            /** @type {?} */
            const x = e.srcElement.scrollLeft;
            this.state.scrollX = x;
            // this.renderer.setStyle(this.headerBox.nativeElement.querySelector('table'), 'transform', `translate3d(-${x}px, 0px, 0px)`);
            this.headerBox.nativeElement.scrollLeft = x;
            this.setFixedColumnShadow(x, e);
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onScrollY(e) {
        if (this.virtualized) {
            /** @type {?} */
            const scrollTop = e.target.scrollTop;
            this.renderData(scrollTop);
        }
    }
    /**
     * @private
     * @param {?} scrolltop
     * @return {?}
     */
    renderData(scrolltop) {
        const { data, topHideHeight, bottomHideHeight } = this.scrollLoader.getRowNodes(scrolltop);
        this.state.scrollY = scrolltop;
        this.serializedValue = data;
        this.topHideHeight = topHideHeight;
        this.bottomHideHeight = bottomHideHeight;
        this.detectChanges();
        this.setNewColumnsWidth();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearchValueChange($event) {
        if (!$event) {
            this.onClearSearchValue();
        }
        this.searchValueChange.emit(this.searchData);
    }
    /**
     * @return {?}
     */
    onClearSearchValue() {
        this.searchData.value = '';
        this.state.searched = false;
        this.clearSearchValue.emit();
    }
    /**
     * @param {?} event
     * @param {?} col
     * @param {?} node
     * @return {?}
     */
    onCellClick(event, col, node) {
        this.cellClick.emit({ event, col, node });
    }
    /**
     * @param {?} index
     * @param {?} rowNode
     * @return {?}
     */
    trackByFn(index, rowNode) {
        return rowNode.id;
    }
    /**
     * 格式化数据
     * @param {?} col
     * @param {?} data
     * @param {?} formatter
     * @return {?}
     */
    formatData(col, data, formatter) {
        // const val = this.utils.getValue(field, data, true );
        /** @type {?} */
        const val = this.getNodeText(col, data);
        if (formatter && formatter.type === 'timeago') {
            if (!formatter.options) {
                formatter.options = { locale: this.localeService.localeId };
            }
            else {
                if (!formatter.options.locale) {
                    formatter.options.locale = this.localeService.localeId;
                }
            }
        }
        return this.colFormatSer.format(val, data, formatter, { locale: this.localeService.localeId });
    }
    /**
     * @return {?}
     */
    columnsChanged() {
        this.checkColumnOption();
        this.detectChanges();
    }
    /**
     * @private
     * @param {?} list
     * @return {?}
     */
    ttc2columns(list) {
        return list.map((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            return {
                field: n.field,
                title: n.title,
                align: n.align,
                hAlign: n.hAlign,
                width: n.width,
                formatter: n.formatter
            };
        }));
    }
    /**
     * @private
     * @return {?}
     */
    reSetSize() {
        if (this.fit) {
            /** @type {?} */
            const parentEl = this.el.nativeElement.parentNode;
            this.setWidth(parentEl.offsetWidth);
            this.height = parentEl.offsetHeight;
            // 如果在使用时，为组件设置的高度，则以此值为准，仅支持 固定值 ，不支持 百分比
            if (this.el.nativeElement.style.height) {
                /** @type {?} */
                let h = this.el.nativeElement.style.height;
                if (h.indexOf('px') > -1) {
                    h = parseInt(h.replace('px', ''), 10);
                    if (h > 0) {
                        this.height = h;
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?=} nodePosY
     * @return {?}
     */
    renderVirtualRowNodes(nodePosY = null) {
        if (this.virtualized) {
            /** @type {?} */
            const scrollY = nodePosY !== null && nodePosY !== undefined ? nodePosY : this.state.scrollY;
            /** @type {?} */
            const _rownodes = this.scrollLoader.getRowNodes(scrollY);
            this.serializedValue = _rownodes.data;
            this.topHideHeight = _rownodes.topHideHeight;
            this.bottomHideHeight = _rownodes.bottomHideHeight;
            this.detectChanges();
            if (nodePosY !== null && nodePosY !== undefined) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop = nodePosY;
                    }), 20);
                }));
            }
        }
    }
    /**
     * @param {?=} nodePosY
     * @return {?}
     */
    updateSerializedValue(nodePosY = null) {
        this.serializedValue = [];
        this.searchHandle.allNodes = [];
        this.state.rowNodes = [];
        this.serializeNodes(null, this.data, 0, true);
        if (this.virtualized && this.fixedHeader) {
            this.renderVirtualRowNodes(nodePosY);
        }
        else {
            this.serializedValue = this.state.rowNodes;
            this.detectChanges();
            // if (emitChanges) {
            // }
        }
    }
    /**
     * 将树节点数据序列化为RowNode
     * @param {?} parent 父级节点
     * @param {?} nodes 树节点集合
     * @param {?} level 级别
     * @param {?} visible 是否可见
     * @param {?=} parentIds
     * @return {?}
     */
    serializeNodes(parent, nodes, level, visible, parentIds) {
        if (nodes && nodes.length) {
            if (!nodes[0].data) {
                return;
            }
            nodes.forEach((/**
             * @param {?} node
             * @param {?} index
             * @return {?}
             */
            (node, index) => {
                node.parent = parent;
                if (!node.hasOwnProperty('selectable')) {
                    node.selectable = true;
                }
                if (!node.hasOwnProperty('showIcon')) {
                    node.showIcon = true;
                }
                if (this.onlySelectLeaf === 'yes' && node.selectable) {
                    node.selectable = !!node.leaf;
                }
                /** @type {?} */
                const keyid = node.data[this.idField];
                node.id = keyid;
                /** @type {?} */
                const isSelected = this.findIndexInSelection(node) > -1;
                /** @type {?} */
                const isChecked = this.findIndexInCheckeds(node) > -1;
                /** @type {?} */
                const isLast = index === nodes.length - 1;
                /** @type {?} */
                const isFirst = index === 0;
                /** @type {?} */
                let parents = [];
                /** @type {?} */
                let parentRn = null;
                if (parent) {
                    /** @type {?} */
                    const parentID = parent.data[this.idField];
                    /** @type {?} */
                    const _parents = parentIds || [];
                    parents = parents.concat(_parents.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n)));
                    parents.push(parentID);
                    parentRn = this.state.rowNodes.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === parent.id));
                }
                /** @type {?} */
                const rowNode = {
                    id: keyid,
                    node,
                    parent,
                    level,
                    visible: visible && (parent ? parent.expanded : true),
                    isSelected,
                    isChecked,
                    parents,
                    parentRowNode: parentRn,
                    index: this.state.rowNodes.length,
                    last: isLast,
                    first: isFirst
                };
                // this.serializedValue.push(rowNode);
                this.state.rowNodes.push(rowNode);
                this.serializeNodes(node, node.children, level + 1, rowNode.visible, parents);
            }));
        }
    }
    /**
     * 判断指定的节点是否被选中
     * @param {?} node 树节点
     * @return {?}
     */
    isSelected(node) {
        if (this.singleSelect) {
            if (node && this.selectedRow) {
                return node.data[this.idField] === this.selectedRow.data[this.idField];
            }
            return false;
        }
        else {
            if (this.selections && this.selections.length) {
                return this.selections.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data[this.idField] === node.data[this.idField])) > -1;
            }
            return false;
        }
    }
    /**
     * 判断当前节点的钩选状态
     * @param {?} node
     * @return {?}
     */
    isChecked(node) {
        if (node && this.checkeds) {
            if (this.checkeds instanceof Array) {
                return this.checkeds.findIndex((/**
                 * @param {?} v
                 * @return {?}
                 */
                (v) => {
                    return v.data[this.idField] === node.data[this.idField];
                })) > -1;
            }
            return false;
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    unSelectedCurrentRowEmit() {
        /** @type {?} */
        const currSelected = this.selectedRow;
        if (currSelected) {
            this.nodeUnSelect.emit({ node: currSelected, type: 'row', instance: this });
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    _singleSelectNode(e) {
        this.clearSelections();
        this.selectedRow = e.rowNode.node;
        this.selectRowIndex = e.rowIndex;
        this.selections = [e.rowNode.node];
        e.rowNode.isSelected = true;
        if (this.showCheckbox) {
            e.rowNode.isChecked = true;
            this.clearCheckeds();
            this.setCheckeds(e.rowNode);
        }
        /** @type {?} */
        const sp = {
            originalEvent: e.originalEvent,
            node: e.rowNode.node, type: 'row',
            index: e.rowIndex,
            parents: e.rowNode.parents,
            instance: this
        };
        this.nodeSelected.emit(sp);
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    _singleUnSelectNode(e) {
        this.selectedRow = null;
        this.selectRowIndex = -1;
        e.rowNode.isSelected = false;
        e.rowNode.isChecked = false;
        this.selections = [];
        this.nodeUnSelect.emit({
            originalEvent: e.originalEvent,
            node: e.rowNode.node, type: 'row', parents: e.rowNode.parents,
            instance: this
        });
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} selected
     * @return {?}
     */
    __singleSelectNode(event, selected = false) {
        if (!selected) {
            this.unSelectedCurrentRowEmit();
            this._singleSelectNode(event);
        }
        else {
            if (!this.keepSelect) {
                this._singleUnSelectNode(event);
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @param {?} selected
     * @return {?}
     */
    __multiSelectNode(event, selected) {
        /** @type {?} */
        const rowNode = event.rowNode;
        if (selected) {
            this.unSelectedCurrentRowEmit();
            this.singleSelectWhenMultiSelect(rowNode, true);
            this.nodeSelected.emit({
                originalEvent: event.originalEvent, node: rowNode.node,
                type: 'row', index: event.rowIndex, parents: rowNode.parents,
                instance: this
            });
        }
        else {
            if (!this.keepSelect) {
                this.singleSelectWhenMultiSelect(rowNode, false);
                this.nodeUnSelect.emit({
                    originalEvent: event.originalEvent, node: rowNode.node,
                    type: 'row', index: event.rowIndex, parents: rowNode.parents,
                    instance: this
                });
            }
        }
    }
    /**
     * 行单击事件
     * @param {?} event
     * @return {?}
     */
    handleRowClick(event) {
        /** @type {?} */
        const rowNode = event.rowNode;
        rowNode.node['elementRef'] = event.originalEvent.target;
        /** @type {?} */
        const selected = this.isSelected(rowNode.node);
        if (this.singleSelect) {
            this.__singleSelectNode(event, selected);
        }
        else {
            rowNode.indeterminate = false;
            if (this.onlySelectSelf) {
                this.__multiSelectNode(event, !selected);
            }
            else {
                rowNode.isSelected = !selected;
                this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === rowNode.id)).isSelected = !selected;
                this.setSelections(rowNode);
                /** @type {?} */
                const rowSelectChangeParams = {
                    originalEvent: event.originalEvent, node: rowNode.node,
                    type: 'row', index: event.rowIndex, parents: rowNode.parents,
                    instance: this
                };
                if (rowNode.isSelected) {
                    this.nodeSelected.emit(rowSelectChangeParams);
                }
                else {
                    this.nodeUnSelect.emit(rowSelectChangeParams);
                }
                if (this.checkOnSelect) {
                    rowNode.isChecked = !selected;
                    this.state.rowNodes.find((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.id === rowNode.id)).isChecked = !selected;
                    this.setCheckeds(rowNode);
                    /** @type {?} */
                    const nodes = this.cascadeNodes(rowNode, rowNode.isChecked);
                    this.ttService.onChangeCheckboxStatus(rowNode);
                    if (rowNode.isChecked) {
                        this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });
                    }
                    else {
                        this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes, instance: this });
                    }
                }
            }
            if (this.checkOnSelect) {
                /** @type {?} */
                const ids = this.checkeds.map((/**
                 * @param {?} tn
                 * @return {?}
                 */
                tn => tn.id));
                this.checkValues = ids;
                this.checkValuesChange.emit(ids);
            }
        }
        this.detectChanges();
    }
    /**
     * 带有checkbox 的单选
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} flag
     * @return {?}
     */
    singleSelectWhenMultiSelect(rowNode, flag) {
        if (this.checkOnSelect) {
            rowNode.isChecked = flag;
            this.cascadeNodes(rowNode, rowNode.isChecked);
            this.setCheckeds(rowNode);
            this.ttService.onChangeCheckboxStatus(rowNode);
            if (rowNode.isChecked) {
                this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });
            }
            else {
                this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, instance: this });
            }
        }
        this.clearSelections();
        if (this.onlySelectSelf) {
            this.selectedRow = rowNode.node;
        }
        rowNode.isSelected = flag;
        this.setSelections(rowNode);
    }
    /**
     * @private
     * @param {?} rowNode
     * @param {?} flag
     * @param {?} event
     * @return {?}
     */
    selectWhenChecked(rowNode, flag, event) {
        if (rowNode.node.selectable) {
            rowNode.isChecked = flag;
        }
        this.setCheckeds(rowNode, false);
        if (this.selectOnCheck) {
            if (this.onlySelectSelf) {
                if (flag || (this.selectedRow && this.selectedRow.id === rowNode.id)) {
                    this.clearSelections();
                }
            }
            if (this.singleSelect && this.showCheckbox) {
                this.clearCheckeds();
            }
            if (rowNode.node.selectable) {
                rowNode.isSelected = flag;
            }
            this.setSelections(rowNode);
            this.state.rowNodes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === rowNode.id)).isSelected = flag;
            if (rowNode.isSelected) {
                this.nodeSelected.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });
            }
            else {
                this.nodeUnSelect.emit({ originalEvent: event, node: rowNode.node, instance: this, type: 'checkbox' });
            }
        }
    }
    /**
     * @private
     * @param {?} rowNode
     * @param {?} items
     * @return {?}
     */
    isInArray(rowNode, items) {
        if (items && items.length === 0) {
            return false;
        }
        return items.findIndex((/**
         * @param {?} i
         * @return {?}
         */
        i => i.data[this.idField] === rowNode.id)) > -1;
    }
    /**
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    setSelections(rowNode) {
        if (rowNode.isSelected) {
            if (!this.selections) {
                this.selections = [];
            }
            if (!this.isInArray(rowNode, this.selections)) {
                // this.selections = [...this.selections, rowNode.node];
                this.selections.push(rowNode.node);
            }
        }
        else {
            if (this.selections) {
                /** @type {?} */
                const i = this.selections.findIndex((/**
                 * @param {?} tn
                 * @return {?}
                 */
                (tn) => tn.data[this.idField] === rowNode.node.data[this.idField]));
                if (i !== -1) {
                    this.selections.splice(i, 1);
                }
                // this.selections = this.selections.filter((tn: TreeNode) => tn.data[this.idField] !== rowNode.node.data[this.idField]);
            }
        }
    }
    /**
     * @private
     * @param {?} rowNode
     * @param {?=} updated
     * @return {?}
     */
    setCheckeds(rowNode, updated = true) {
        if (rowNode.isChecked) {
            if (!this.checkeds) {
                this.checkeds = [];
            }
            if (!this.isInArray(rowNode, this.checkeds)) {
                this.checkeds.push(rowNode.node);
            }
        }
        else {
            if (this.checkeds) {
                /** @type {?} */
                const i = this.checkeds.findIndex((/**
                 * @param {?} tn
                 * @return {?}
                 */
                (tn) => tn.data[this.idField] === rowNode.node.data[this.idField]));
                if (i !== -1) {
                    this.checkeds.splice(i, 1);
                }
            }
        }
        if (updated) {
            this.checkeds = [...this.checkeds];
        }
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    getDiffrentData(data) {
        if (data.length) {
            /** @type {?} */
            const _nodes = [];
            data.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (_nodes.findIndex((/**
                 * @param {?} t
                 * @return {?}
                 */
                t => t.data[this.idField] === n.data[this.idField])) === -1) {
                    _nodes.push(n);
                }
            }));
            return _nodes;
        }
        return data;
    }
    /**
     * @private
     * @param {?} rowNode
     * @param {?} checked
     * @param {?=} sync
     * @return {?}
     */
    cascadeCheckedNode(rowNode, checked, sync = false) {
        /** @type {?} */
        const nodes = [];
        if (rowNode.node.selectable) {
            rowNode.isChecked = checked;
        }
        this.setCheckeds(rowNode, false);
        if (this.selectOnCheck) {
            if (sync) {
                /** @type {?} */
                const status = this.isIndeterminate(rowNode) !== 2;
                checked = status ? checked : false;
            }
            if (rowNode.node.selectable) {
                rowNode.isSelected = checked;
                this.setSelections(rowNode);
            }
        }
        if (!this.isInArray(rowNode, nodes)) {
            nodes.push(rowNode.node);
        }
        return nodes;
    }
    /**
     * 向下级联选中
     * @param {?} rowNode
     * @param {?} checked 选中状态
     * 返回受影响的行
     * @return {?}
     */
    propagateSelectionDown(rowNode, checked) {
        /** @type {?} */
        let nodes = this.cascadeCheckedNode(rowNode, checked);
        if (this.cascadeCheck && this.cascadeDown && rowNode.node.children && rowNode.node.children.length) {
            rowNode.node.children.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            (v, i) => {
                /** @type {?} */
                const rn = this.state.rowNodes.find((/**
                 * @param {?} row
                 * @return {?}
                 */
                (row) => row.id === v.data[this.idField]));
                if (rn) {
                    rn.indeterminate = false;
                    if (rn.node.selectable) {
                        rn.isChecked = checked;
                    }
                    nodes = nodes.concat(this.propagateSelectionDown(rn, checked));
                    this.ttService.onChangeCheckboxStatus(rn);
                }
            }));
        }
        return nodes;
    }
    /**
     * 向上级联选中
     * @param {?} rowNode
     * @param {?} checked
     * @return {?}
     */
    propagateSelectionUp(rowNode, checked) {
        /** @type {?} */
        const nodes = this.cascadeCheckedNode(rowNode, checked);
        if (this.cascadeCheck && this.cascadeUp && rowNode.node.parent) {
            if (rowNode.parents && rowNode.parents.length) {
                /** @type {?} */
                const rns = [];
                rowNode.parents.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    /** @type {?} */
                    const rn = this.findRowNode(n);
                    if (rn && rn.node.selectable) {
                        // rn.isChecked = checked;
                        /** @type {?} */
                        const checkedNodes = this.cascadeCheckedNode(rn, checked, true);
                        if (checkedNodes.length) {
                            nodes.push(checkedNodes[0]);
                        }
                        rns.push(rn);
                    }
                }));
                rns.reverse().forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                rn => {
                    this.updateCheckboxStatus(rn);
                }));
            }
        }
        return nodes;
    }
    // 节点状态（选中，勾选）同步更新
    /**
     * @private
     * @return {?}
     */
    updateNodeStatus() {
        if (this.state.searched) {
            /** @type {?} */
            const rowNodes = this.state.searchRowNodes;
            if (!rowNodes) {
                return;
            }
            rowNodes.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                /** @type {?} */
                const checkedItem = this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === rn.id));
                /** @type {?} */
                const chked = checkedItem ? checkedItem.isChecked : false;
                rn.indeterminate = false;
                rn.isChecked = chked;
                if (this.selectOnCheck) {
                    if (checkedItem.isSelected != rn.isChecked) {
                        checkedItem.isSelected = checkedItem.isChecked;
                    }
                    rn.isSelected = checkedItem.isSelected;
                }
            }));
        }
        else {
            if (this.selectOnCheck) {
                this.state.rowNodes.forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                rn => {
                    if (this.onlySelectSelf) {
                        if (!this.selections || !this.selections.length) {
                            rn.isSelected = false;
                        }
                        else {
                            if (this.selections[0].id === rn.id) {
                                rn.isSelected = true;
                            }
                            else {
                                rn.isSelected = false;
                            }
                        }
                    }
                    else {
                        if (rn.isSelected != rn.isChecked) {
                            rn.isSelected = rn.isChecked;
                        }
                    }
                }));
            }
        }
    }
    /**
     * 级联选择节点
     * @private
     * @param {?} rowNode 当前节点
     * @param {?} checked 是否钩选
     * @return {?}
     */
    cascadeNodes(rowNode, checked) {
        /** @type {?} */
        let checkedNodes = this.propagateSelectionDown(rowNode, checked);
        checkedNodes = checkedNodes.concat(this.propagateSelectionUp(rowNode, checked));
        checkedNodes = this.getDiffrentData(checkedNodes);
        this.updateNodeStatus();
        this.updateAllCheckboxStatus();
        return checkedNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return n.selectable;
        }));
    }
    /**
     * 行Checkbox 选中变化事件
     * @param {?} event 鼠标点击事件对象
     * @param {?} rowNode 当前树节点
     * @param {?} checked
     * @return {?}
     */
    toggleNodeWithCheckbox(event, rowNode, checked) {
        this.state.rowNodes.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === rowNode.id)).isChecked = checked;
        rowNode.indeterminate = false;
        /** @type {?} */
        const data = this.cascadeNodes(rowNode, checked);
        this.ttService.onChangeCheckboxStatus(rowNode);
        if (checked) {
            this.nodeChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });
        }
        else {
            this.nodeUnChecked.emit({ originalEvent: event, node: rowNode.node, nodes: data, instance: this });
        }
        this.selectWhenChecked(rowNode, checked, event);
        if (this.onlySelectSelf && checked) {
            this.selectedRow = rowNode.node;
        }
        this.checkeds = [...this.checkeds];
        this.detectChanges();
        event.stopPropagation();
    }
    /**
     * 全选
     * @param {?} event 鼠标事件对象
     * @param {?} checked 是否选中
     * @return {?}
     */
    toggleNodesWithCheckbox(event, checked) {
        if (checked) {
            if (this.data && this.data.length) {
                this.checkAllNodes({ originalEvent: event, checked, instance: this });
            }
        }
        else {
            this.selections = null;
            this.unCheckAllNodes({ originalEvent: event, checked, instance: this });
        }
        this.detectChanges();
    }
    /**
     * 更新全选checkbox 的状态
     * @private
     * @return {?}
     */
    updateAllCheckboxStatus() {
        if (this['checkall_CLICKED']) {
            return;
        }
        /** @type {?} */
        const status = this.isIndeterminate();
        if (this.showCheckAll && !this.singleSelect && this.showCheckbox) {
            if (status !== undefined) {
                if (this.headerCheckboxCmp) {
                    this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = status === 2;
                    this.headerCheckboxCmp.checked = status === 1;
                }
            }
        }
    }
    /**
     * 更新父节点checkbox 选中状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    updateParentCheckboxStatus(rowNode) {
        /** @type {?} */
        const pNodes = [];
        rowNode.parents.forEach((/**
         * @param {?} rnid
         * @return {?}
         */
        rnid => {
            /** @type {?} */
            const rn = this.findRowNode(rnid);
            if (rn) {
                pNodes.push(rn);
            }
        }));
        pNodes.reverse().forEach((/**
         * @param {?} rn
         * @return {?}
         */
        rn => {
            this.updateCheckboxStatus(rn);
        }));
    }
    /**
     * 更新N个父节点复选框中的选中状态
     * @private
     * @param {?} parentIds
     * @return {?}
     */
    updateParentsCheckStatus(parentIds) {
        /** @type {?} */
        let pids = [];
        parentIds.forEach((/**
         * @param {?} ids
         * @return {?}
         */
        (ids) => {
            pids = [...pids, ...ids];
        }));
        pids = Array.from(new Set(pids));
        /** @type {?} */
        const pRowNodes = this.findRowNodes(pids);
        pRowNodes.sort((/**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        (r, n) => {
            return n.level - r.level;
        })).forEach((/**
         * @param {?} rn
         * @return {?}
         */
        rn => {
            this.updateCheckboxStatus(rn);
        }));
    }
    /**
     * 更新节点中checkbox的状态
     * @private
     * @param {?} rowNode
     * @return {?}
     */
    updateCheckboxStatus(rowNode) {
        /** @type {?} */
        const status = this.isIndeterminate(rowNode);
        if (status !== undefined && rowNode.node.selectable) {
            rowNode.indeterminate = status === 2;
            this.ttService.onChangeCheckboxStatus(rowNode);
        }
    }
    /**
     * 判断指定节点checkbox 的状态
     * 0：全不选， 1： 全部选中， 2：有选中的也有没选中的
     * @private
     * @param {?=} rowNode
     * @return {?}
     */
    isIndeterminate(rowNode) {
        /** @type {?} */
        const status = this.getCheckboxStatus(rowNode);
        if (status !== undefined) {
            /** @type {?} */
            let checked = false;
            if (status === 2) {
                checked = false;
            }
            else {
                checked = !!status;
            }
            if (rowNode && rowNode.node.selectable) {
                rowNode.isChecked = checked;
                this.setCheckeds(rowNode, false);
            }
        }
        return status;
    }
    /**
     * 返回父级节点checkbox 的状态。0：不选中， 1： 选中， 2：不确定
     * @private
     * @param {?=} rowNode 父级节点；为空时返回全选checkbox 的状态
     * @return {?}
     */
    getCheckboxStatus(rowNode) {
        /** @type {?} */
        let uncheckedLength = 0;
        /** @type {?} */
        let checkedLength = 0;
        /** @type {?} */
        let len = 0;
        /** @type {?} */
        let childNodes = [];
        if (rowNode) {
            childNodes = rowNode.node.children || [];
            if (!childNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.selectable)).length) {
                return rowNode.isChecked;
            }
        }
        else {
            childNodes = this.state.rowNodes;
        }
        len = childNodes.length;
        childNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            let rn = n;
            if (rowNode) {
                rn = this.findRowNode(n.data[this.idField]);
            }
            if (rn && !rn.indeterminate) {
                if (rn.isChecked) {
                    checkedLength++;
                }
                else {
                    uncheckedLength++;
                }
            }
        }));
        if (len === 0) {
            return undefined;
        }
        /** @type {?} */
        let flag = 0;
        if (uncheckedLength === len) {
            flag = 0;
        }
        else {
            if (checkedLength === len) {
                flag = 1;
            }
            else {
                flag = 2;
            }
        }
        return flag;
    }
    /**
     * @private
     * @param {?} node
     * @param {?} treeNodes
     * @return {?}
     */
    findIndexIn(node, treeNodes) {
        /** @type {?} */
        let index = -1;
        if (treeNodes && treeNodes.length) {
            index = treeNodes.findIndex((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            (v, i) => {
                return this.equals(v, node);
            }));
        }
        return index;
    }
    /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    findIndexInCheckeds(node) {
        return this.findIndexIn(node, this.checkeds);
    }
    /**
     * 在选中的集合中查找指定节点的索引
     * @param {?} node 树节点
     * @return {?}
     */
    findIndexInSelection(node) {
        return this.findIndexIn(node, this.selections);
    }
    /**
     * 对比两个节点是否同一个节点
     * @param {?} target
     * @param {?} source
     * @return {?}
     */
    equals(target, source) {
        return target.data[this.idField] === source.data[this.idField];
    }
    /**
     * 展开所有节点
     * @param {?=} treeNode
     * @param {?=} deep 设置为true 时，当前节点下的所有子节点全部展开, 默认 false
     * @param {?=} childrenEmptyEmitExpand  当没有子节点是否触发展开事件，默认为 true
     * @return {?}
     */
    toggleExpand(treeNode, deep = false, childrenEmptyEmitExpand = true) {
        if (treeNode) {
            treeNode.expanded = !treeNode.expanded;
            this.updateNodeProperty(treeNode.id, { expanded: treeNode.expanded });
            this.toggleVisible(treeNode);
            if (this.virtualized) {
                if (treeNode.children && treeNode.children.length) {
                    this.renderVirtualRowNodes();
                }
            }
            if (treeNode.expanded) {
                if (childrenEmptyEmitExpand || (treeNode.children && treeNode.children.length)) {
                    this.expand.emit(treeNode);
                }
                else {
                    treeNode.expanded = !treeNode.expanded;
                    return;
                }
            }
            else {
                this.collapse.emit(treeNode);
            }
            if (deep) {
                if (treeNode.children && treeNode.children.length) {
                    treeNode.children.forEach((/**
                     * @param {?} row
                     * @param {?} i
                     * @return {?}
                     */
                    (row, i) => {
                        this.toggleExpand(row, deep, childrenEmptyEmitExpand);
                    }));
                }
            }
        }
        else {
            if (this.data && this.data.length) {
                this.data.forEach((/**
                 * @param {?} row
                 * @return {?}
                 */
                (row) => {
                    this.toggleExpand(row);
                }));
            }
        }
        this.setNewColumnsWidth();
    }
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    toggleVisible(treeNode) {
        /** @type {?} */
        const rowNode = this.findRowNode(treeNode.id);
        if (rowNode) {
            /** @type {?} */
            const rid = rowNode.id;
            /** @type {?} */
            const setRowVisible = (/**
             * @param {?} rn
             * @param {?} visible
             * @return {?}
             */
            (rn, visible) => {
                /** @type {?} */
                const pid = rn.parent.data[this.idField];
                /** @type {?} */
                const rnParent = this.findRowNode(pid);
                if (rnParent) {
                    rn.visible = rnParent.visible && rnParent.node.expanded;
                }
                else {
                    rn.visible = visible;
                }
                /** @type {?} */
                const _r = this.serializedValue.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === rn.id));
                if (_r) {
                    _r.visible = rn.visible;
                }
            });
            this.state.rowNodes.filter((/**
             * @param {?} rn
             * @return {?}
             */
            rn => rn.parents.indexOf(rid) > -1)).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                setRowVisible(rn, treeNode.expanded);
            }));
            // #392512 
            /** @type {?} */
            const rowNodes = this.getCurrentAllRowNodes();
            if (rowNodes) {
                rowNodes.filter((/**
                 * @param {?} rn
                 * @return {?}
                 */
                rn => rn.parents.indexOf(rid) > -1)).forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                rn => {
                    setRowVisible(rn, treeNode.expanded);
                }));
            }
        }
    }
    /**
     * 展开指定节点
     * emit: 触发展开事件
     * render: 数据重新加载
     * @param {?} id
     * @param {?=} emit
     * @param {?=} render
     * @return {?}
     */
    expandNode(id, emit = true, render = true) {
        if (id) {
            /** @type {?} */
            const rowNode = this.findRowNode(id);
            if (rowNode) {
                rowNode.node.expanded = true;
                this.toggleVisible(rowNode.node);
                if (render) {
                    if (this.virtualized) {
                        if (rowNode.node.children && rowNode.node.children.length) {
                            this.renderVirtualRowNodes();
                        }
                    }
                    else {
                        this.detectChanges();
                    }
                }
                if (emit) {
                    this.expand.emit(rowNode.node);
                }
                this.setNewColumnsWidth();
            }
            else {
                this.writeConsole('Con\'t find tree node widh id:' + id, 'error');
            }
        }
    }
    /**
     * 展开所有节点
     * @return {?}
     */
    expandAll() {
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            row.node.expanded = true;
            row.visible = true;
            return row;
        }));
        if (this.virtualized) {
            this.renderVirtualRowNodes();
        }
        else {
            this.serializedValue = this.state.rowNodes;
        }
        this.setNewColumnsWidth();
        this.expandAllNodes.emit();
        this.detectChanges();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    expandNodes(id) {
        // const rowNode = this.findRowNode(id);
        // const rootNode = this.getRoot(id);
        // if (rowNode) {
        //     const treeNode = rowNode.node;
        //     treeNode.expanded = true;
        //     rowNode.visible = true;
        //     const parents = rowNode.parents;
        //     this.state.rowNodes.filter(n => n.parents.indexOf(rootNode.id) > -1).forEach(r => {
        //         if (parents.indexOf(r.id) > -1) {
        //             r.visible = true;
        //             r.node.expanded = true;
        //         }
        //     });
        //     this.detectChanges();
        // }
    }
    /**
     * 展开指定节点下的所有节点
     * @param {?} rowNode
     * @return {?}
     */
    expandAllNodesBy(rowNode) {
        if (rowNode) {
            /** @type {?} */
            const treeNode = rowNode.node;
            treeNode.expanded = true;
            rowNode.visible = true;
            this.state.rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.parents.indexOf(rowNode.id) > -1)).forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                r.visible = true;
                r.node.expanded = true;
            }));
            this.detectChanges();
            this.setNewColumnsWidth();
        }
    }
    /**
     * 折叠指定节点
     * @param {?} id
     * @return {?}
     */
    collapseNode(id) {
        if (id) {
            /** @type {?} */
            const rowNode = this.findRowNode(id);
            if (rowNode) {
                rowNode.node.expanded = false;
                this.toggleVisible(rowNode.node);
                this.detectChanges();
                this.setNewColumnsWidth();
                this.collapse.emit(rowNode.node);
            }
            else {
                this.writeConsole('Con\'t find tree node widh id:' + id, 'error');
            }
        }
    }
    /**
     * 折叠所有节点
     * @return {?}
     */
    collapseAll() {
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            row.node.expanded = false;
            row.visible = !row.parent;
            return row;
        }));
        if (this.virtualized) {
            this.renderVirtualRowNodes(0);
        }
        else {
            this.serializedValue = this.state.rowNodes;
        }
        this.collapseAllNodes.emit();
        this.detectChanges();
        this.setNewColumnsWidth();
    }
    /**
     * @return {?}
     */
    getContainerOffset() {
        /** @type {?} */
        const rect = this.containerElement.getBoundingClientRect();
        return {
            left: rect.left + document.body.scrollLeft,
            top: rect.top + document.body.scrollTop
        };
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onColumnResizeBegin(event) {
        /** @type {?} */
        const containerLeft = Math.round(this.getContainerOffset().left);
        this.lastResizerHelperX = (event.pageX - containerLeft + this.containerElement.scrollLeft);
        event.preventDefault();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onColumnResize(event) {
        if (this.resizableColumns) {
            /** @type {?} */
            const containerLeft = this.getContainerOffset().left;
            this.renderer.addClass(this.containerElement, 'ui-unselectable-text');
            this.resizerHelperVC.nativeElement.style.height = this.containerElement.offsetHeight + 'px';
            this.resizerHelperVC.nativeElement.style.top = 0 + 'px';
            this.resizerHelperVC.nativeElement.style.left = (event.pageX - containerLeft) + 'px';
            this.resizerHelperVC.nativeElement.style.display = 'block';
        }
    }
    /**
     * @param {?} event
     * @param {?} column
     * @return {?}
     */
    onColumnResizeEnd(event, column) {
        if (!this.resizerHelperVC.nativeElement.offsetLeft) {
            return;
        }
        // 偏移量
        /** @type {?} */
        const delta = this.resizerHelperVC.nativeElement.offsetLeft - this.lastResizerHelperX;
        // 列宽
        /** @type {?} */
        const columnWidth = column.offsetWidth;
        // 新宽度
        /** @type {?} */
        const newColumnWidth = columnWidth + delta;
        // 最小宽度
        /** @type {?} */
        const minWidth = column.style.minWidth || 15;
        /** @type {?} */
        let resizeColumnIndex = -1;
        if (column.id) {
            resizeColumnIndex = this.columns.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === column.id));
        }
        else {
            /** @type {?} */
            const colField = column.getAttribute('field');
            if (colField) {
                resizeColumnIndex = this.columns.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field === colField));
            }
        }
        if (!this.fitColumns) {
            this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);
            this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, 0);
            if (this.columns[resizeColumnIndex]) {
                this.columns[resizeColumnIndex].width = newColumnWidth;
            }
            this.sortColumnsByFixed(false);
            this.setCellWidthCss(this.allColumnsWidth(), 0, []);
            // this.setTableWidth(this.allColumnsWidth());
            // // update css.
            // const _colInfo = this.columns[resizeColumnIndex];
            // if (_colInfo) {
            //     const ruleName = this.columnCssName(_colInfo);
            //     const stylecss = ruleName + '{width:' + newColumnWidth + 'px}';
            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);
            // }
            // const nextColumn = this.columns[resizeColumnIndex + 1];
            // if (nextColumn && nextColumn.fixed) {
            //     const ruleName = this.columnCssName(nextColumn);
            //     const stylecss = ruleName + '{' + nextColumn.fixed + ':' + nextColumn[nextColumn.fixed] + 'px}';
            //     this.utils.appendCssRules([stylecss], this.styleElement.sheet);
            // }
        }
        else {
            if (newColumnWidth > minWidth) {
                /** @type {?} */
                let nextColumn = column.nextElementSibling;
                while (!nextColumn.offsetParent) {
                    nextColumn = nextColumn.nextElementSibling;
                }
                if (nextColumn) {
                    /** @type {?} */
                    const nextColumnWidth = nextColumn.offsetWidth - delta;
                    /** @type {?} */
                    const nextColumnMinWidth = nextColumn.style.minWidth || 15;
                    if (newColumnWidth > 15 && nextColumnWidth > nextColumnMinWidth) {
                        this.resizeColGroup(this.headerTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                        this.resizeColGroup(this.bodyTable.nativeElement, resizeColumnIndex, newColumnWidth, nextColumnWidth);
                    }
                }
            }
        }
        this.resizerHelperVC.nativeElement.style.display = 'none';
        this.renderer.removeClass(this.containerElement, 'ui-unselectable-text');
        this.psRef.directiveRef.update();
    }
    /**
     * @param {?} table
     * @param {?} resizeColumnIndex
     * @param {?} newColumnWidth
     * @param {?=} nextColumnWidth
     * @return {?}
     */
    resizeColGroup(table, resizeColumnIndex, newColumnWidth, nextColumnWidth) {
        if (table) {
            /** @type {?} */
            const colGroup = table.children[0].nodeName === 'COLGROUP' ? table.children[0] : null;
            if (colGroup) {
                /** @type {?} */
                const col = colGroup.children[resizeColumnIndex];
                /** @type {?} */
                const nextCol = col.nextElementSibling;
                col.style.width = newColumnWidth + 'px';
                if (nextCol) {
                    if (nextColumnWidth && this.fitColumns) {
                        nextCol.style.width = nextColumnWidth + 'px';
                    }
                }
            }
            else {
                throw new Error('Scrollable tables require a colgroup to support resizable columns');
            }
        }
    }
    /**
     * @return {?}
     */
    onSearch() {
        this.state.searchRowNodes = null;
        this.state.searched = !!this.searchData.value;
        if (this.searchData.value) {
            this.searchData.value = this.searchData.value.trim();
        }
        this.search.emit(this.searchData);
    }
    /**
     * @param {?} node
     * @param {?=} parent
     * @return {?}
     */
    insert(node, parent) {
        if (parent) {
            if (!parent.children) {
                parent.children = [];
            }
            parent.children.push(node);
            this.expandNode(parent.data[this.idField]);
            this.appendNew.emit({ parent });
        }
        else {
            this.data.push(node);
        }
        this.updateSerializedValue();
    }
    /**
     * @param {?} data
     * @param {?=} parent
     * @return {?}
     */
    append(data, parent) {
        if (data && data[this.idField]) {
            this.insert({ data, id: data[this.idField] }, parent);
        }
        else {
            this.writeConsole('Please set id value.', 'warn');
        }
    }
    /**
     * @private
     * @param {?} parent
     * @return {?}
     */
    emitAppendNew(parent) {
        if (this.virtualized) {
            /** @type {?} */
            const nodePosY = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;
            this.updateSerializedValue(nodePosY);
        }
        else {
            this.updateSerializedValue();
        }
    }
    /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    appendChildren(nodes, parent, emit = true) {
        if (nodes && nodes.length) {
            if (parent) {
                parent.children.push(...nodes);
                this.emitAppendNew(parent);
                if (emit) {
                    this.appendNew.emit({ parent });
                }
            }
            else {
                throw new Error('未找到父级节点');
            }
        }
        else {
            this.updateSerializedValue();
            this.writeConsole('添加子节点的数据为空', 'warn');
        }
    }
    /**
     * @param {?} nodes
     * @param {?} parent
     * @param {?=} emit
     * @return {?}
     */
    loadChildren(nodes, parent, emit = true) {
        if (parent) {
            parent.children = nodes || [];
            this.emitAppendNew(parent);
            if (emit) {
                this.appendNew.emit({ parent });
            }
        }
    }
    /**
     * @param {?} nodeId
     * @return {?}
     */
    remove(nodeId) {
        if (nodeId) {
            /** @type {?} */
            const rowNode = this.findRowNode(nodeId);
            if (rowNode) {
                // remove(this.state.rowNodes, (n) => {
                //     return n.id === nodeId;
                // });
                if (this.selectValue === nodeId) {
                    this.selectedRow = null;
                    this.selectValue = null;
                }
                if (rowNode.parent) {
                    remove(rowNode.parent.children, (/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => {
                        return n.data[this.idField] === nodeId;
                    }));
                }
                else {
                    remove(this.state.rowNodes, (/**
                     * @param {?} n
                     * @return {?}
                     */
                    (n) => {
                        return n.id === nodeId;
                    }));
                    this.data = this.data.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data[this.idField] !== nodeId));
                }
                this.updateSerializedValue();
                this.detectChanges();
                this.ttService.onRemove(rowNode);
                this.removed.emit(rowNode);
            }
        }
    }
    /**
     * @param {?} nodeId
     * @param {?} data
     * @return {?}
     */
    update(nodeId, data) {
        if (nodeId && data) {
            /** @type {?} */
            const rowNode = this.findRowNode(nodeId);
            if (rowNode) {
                rowNode.node.data = extend(rowNode.node.data, data);
                this.detectChanges();
                this.ttService.onUpdate(rowNode);
                this.updated.emit(rowNode);
            }
        }
    }
    /**
     * @param {?} nodeid
     * @param {?} property
     * @return {?}
     */
    updateNodeProperty(nodeid, property) {
        /** @type {?} */
        const rowNode = this.findRowNode(nodeid);
        if (rowNode && property) {
            Object.keys(property).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                rowNode.node[k] = property[k];
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setScorllBodyHeight() {
        this.scorllBodyHeight = this.height;
        if (this.showFilterBar) {
            this.scorllBodyHeight = this.scorllBodyHeight - 46;
        }
        if (this.enableFilterRow) {
            this.scorllBodyHeight = this.scorllBodyHeight - 36;
        }
        if (this.fixedHeader && this.showHeader) {
            if (this.headerBox && (this.headerWrap || this.useGroupHeader)) {
                /** @type {?} */
                const hh = this.headerBox.nativeElement.clientHeight;
                this.scorllBodyHeight = this.scorllBodyHeight - hh;
            }
            else {
                // 宽松版时，表头高度增高，需要按实际取得表头高度
                /** @type {?} */
                let _headerHeight = this.headerHeight;
                /** @type {?} */
                const themesKey = localStorage.getItem('gsp_rtf_themSKey');
                if (themesKey === 'loose' && this.headerBox) {
                    _headerHeight = this.headerBox.nativeElement.getBoundingClientRect().height;
                }
                this.scorllBodyHeight = this.scorllBodyHeight - _headerHeight;
            }
        }
        if (this.pagination) {
            this.scorllBodyHeight = this.scorllBodyHeight - this.pagerHeight;
        }
        this.detectChanges();
    }
    /**
     * @private
     * @param {?} w
     * @return {?}
     */
    setWidth(w) {
        this.width = w;
    }
    /**
     * @param {?=} size
     * @return {?}
     */
    resize(size) {
        if (size) {
            /** @type {?} */
            const w = parseInt('' + size.width, 10);
            /** @type {?} */
            const h = parseInt('' + size.height, 10);
            if (this.width === w && this.height === h) {
                if (this.state.scrollY) {
                    this.psRef.directiveRef.scrollToY(this.state.scrollY);
                }
                if (this.state.scrollX) {
                    this.psRef.directiveRef.scrollToX(this.state.scrollX);
                }
                return;
            }
            this.setWidth(w);
            this.height = h;
        }
        this.setScorllBodyHeight();
        if (this.data && this.data.length) {
            this.renderVirtualRowNodes();
        }
        // setTimeout(() => {
        //     if (this.psRef) {
        //         this.psRef.directiveRef.update();
        //     }
        // }, 100);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadData(data) {
        if (this.showLines) {
            this.isLoadNewDataSetEmpty = true;
            this.data = [];
            this.isLoadNewDataSetEmpty = false;
        }
        this.data = data;
    }
    /**
     * @return {?}
     */
    empty() {
        this.data = [];
    }
    /**
     * @return {?}
     */
    getCurrentAllRowNodes() {
        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {
            return this.state.searchRowNodes || this.state.rowNodes;
        }
        else {
            return this.state.rowNodes;
        }
    }
    /**
     * @param {?=} detectChanges
     * @return {?}
     */
    clearAll(detectChanges = true) {
        this.state.rowNodes.filter((/**
         * @param {?} rn
         * @return {?}
         */
        rn => rn.indeterminate)).forEach((/**
         * @param {?} rn
         * @return {?}
         */
        rn => {
            rn.indeterminate = false;
            this.ttService.onChangeCheckboxStatus(rn);
        }));
        this.state.rowNodes = this.state.rowNodes.map((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            row.isChecked = false;
            row.isSelected = false;
            row.indeterminate = false;
            return row;
        }));
        // if (this.searchData && this.searchData.value) {
        if (this.state.searched && this.state.searchRowNodes && this.state.searchRowNodes.length) {
            this.serializedValue = this.state.searchRowNodes.map((/**
             * @param {?} row
             * @return {?}
             */
            (row) => {
                row.isChecked = false;
                row.isSelected = false;
                row.indeterminate = false;
                return row;
            }));
        }
        this.checkeds = [];
        this.selections = [];
        this.selectedRow = undefined;
        if (this.showCheckAll && this.headerCheckboxCmp) {
            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;
            this.headerCheckboxCmp.checked = false;
        }
        if (detectChanges) {
            this.detectChanges();
        }
        return this;
    }
    /**
     * @return {?}
     */
    detectChanges() {
        this.cdRef.markForCheck();
        // tslint:disable-next-line:no-string-literal
        if (!this.cdRef['destroyed']) {
            this.cdRef.detectChanges();
        }
        return this;
    }
    /**
     * @return {?}
     */
    clearCheckeds() {
        if (this.checkeds && this.checkeds.length) {
            this.findRowNodes(this.checkeds.map((/**
             * @param {?} tn
             * @return {?}
             */
            tn => tn.data[this.idField]))).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                rn.isChecked = false;
            }));
        }
        this.checkeds = [];
        if (this.showCheckAll && this.headerCheckboxCmp) {
            this.headerCheckboxCmp.chkAll.nativeElement.indeterminate = false;
            this.headerCheckboxCmp.checked = false;
        }
        return this;
    }
    /**
     * @return {?}
     */
    clearSelections() {
        if (this.serializedValue && this.serializedValue.length) {
            this.serializedValue.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.isSelected = false;
            }));
        }
        this.state.rowNodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            n.isSelected = false;
        }));
        if (this.selections && this.selections.length) {
            /** @type {?} */
            const nodeIds = this.selections.map((/**
             * @param {?} tn
             * @return {?}
             */
            tn => tn.data[this.idField]));
            this.findRowNodes(nodeIds).forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                rn.isSelected = false;
                if (this.singleSelect) {
                    rn.isChecked = false;
                }
            }));
        }
        this.selections = undefined;
        this.selectedRow = undefined;
        return this;
    }
    /**
     * 选中第1个可以选中的节点
     * @return {?}
     */
    selectFirstNode() {
        if (this.state.rowNodes && this.state.rowNodes.length) {
            /** @type {?} */
            const firstCanSelectNode = this.state.rowNodes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.node.selectable));
            if (firstCanSelectNode) {
                this.selectNode(firstCanSelectNode.id);
            }
        }
    }
    /**
     * @private
     * @param {?} id
     * @return {?}
     */
    scrollToCurrentRow(id) {
        /** @type {?} */
        const trId = 'rownode-' + id;
        // const trEle =    document.getElementById(trId);
        /** @type {?} */
        const trEle = this.el.nativeElement.querySelector('#' + trId) || document.getElementById(trId);
        if (trEle && trEle.closest('.farris-treetable') && trEle.closest('.farris-treetable').id === this.id) {
            if (!this.isElementInViewport(trEle)) {
                if (trEle.scrollIntoViewIfNeeded) {
                    trEle.scrollIntoViewIfNeeded();
                    return true;
                }
                /** @type {?} */
                const browserInfo = this.utils.getBrowserType();
                if (browserInfo.ff && this.utils.getFFVer() < 58) {
                    trEle.scrollIntoView();
                }
                else {
                    trEle.scrollIntoView({ block: 'nearest', inline: 'nearest' });
                }
            }
            else {
                trEle.scrollIntoView({ block: 'nearest' });
            }
            return true;
        }
        return false;
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    isElementInViewport(el) {
        /** @type {?} */
        const containerEl = this.el.nativeElement.querySelector('.farris-treetable-body');
        if (!containerEl) {
            return false;
        }
        /** @type {?} */
        const container = containerEl.getBoundingClientRect();
        /** @type {?} */
        const viewPortHeight = container.height;
        /** @type {?} */
        const offsetTop = el.offsetTop + this.topHideHeight;
        /** @type {?} */
        const scrollTop = this.psRef.directiveRef.elementRef.nativeElement.scrollTop;
        /** @type {?} */
        const top = offsetTop - scrollTop;
        return top >= 0 && top <= viewPortHeight;
    }
    /**
     * @private
     * @param {?} nodeId
     * @return {?}
     */
    _scrollToNode(nodeId) {
        this.scrollToCurrentNode(nodeId);
    }
    /**
     * @param {?=} nodeid
     * @return {?}
     */
    scrollToCurrentNode(nodeid = '') {
        /** @type {?} */
        let id = nodeid;
        if (!nodeid && this.selectedRow) {
            id = this.selectedRow.id;
        }
        if (id == null || id == undefined || id == '') {
            return;
        }
        /** @type {?} */
        const result = this.scrollToCurrentRow(id);
        if (!result) {
            /** @type {?} */
            const rowNode = this.findRowNode(id);
            /** @type {?} */
            const showRowsOnePager = Math.ceil(this.scorllBodyHeight / this.rowHeight) + 1;
            if (rowNode.parents && rowNode.parents.length) {
                rowNode.parents.forEach((/**
                 * @param {?} pid
                 * @return {?}
                 */
                pid => {
                    this.expandNode(pid, false, false);
                }));
            }
            /** @type {?} */
            const rowIndex = this.state.rowNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.visible)).findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === id));
            if (rowIndex < showRowsOnePager) {
                if (this.virtualized) {
                    this.renderData(0);
                }
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.scrollToCurrentRow(id);
                }));
                return;
            }
            /** @type {?} */
            const top = rowIndex * this.rowHeight;
            if (this.virtualized) {
                this.renderData(top - this.rowHeight);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.scrollToCurrentRow(id);
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.elementRef.nativeElement.scrollTop += 1;
                    }
                }), 50);
            }
            else {
                this.scrollToY(top - this.rowHeight);
                this.scrollToCurrentRow(id);
            }
        }
    }
    /**
     * 选中指定ID 的节点,
     * detectChanges: 触发脏值检查，默认为 true
     * gotocurrent: 使用选中节点可见，默认为 true
     * @param {?} id
     * @param {?=} detectChanges
     * @param {?=} gotocurrent
     * @return {?}
     */
    selectNode(id, detectChanges = true, gotocurrent = true) {
        if (!id) {
            return this;
        }
        /** @type {?} */
        let node = this.findRowNode(id);
        /** @type {?} */
        const canSelect = node && node.node && node.node.selectable;
        /** @type {?} */
        const emit = canSelect && (!this.selectedRow || (this.selectedRow && id !== this.selectedRow.id));
        if (node && emit) {
            node.isSelected = true;
            if (this.singleSelect || this.onlySelectSelf) {
                this.clearSelections();
                node.isSelected = true;
                this.selections = [node.node];
                if (this.checkOnSelect && this.showCheckbox) {
                    node.isChecked = true;
                    if (this.multiSelect) {
                        this.setCheckeds(node);
                    }
                    else {
                        this.clearCheckeds();
                        this.checkeds = [node.node];
                    }
                    if (this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(node);
                    }
                }
            }
            else {
                this.setSelections(node);
            }
            this.selectedRow = node.node;
            this.selectNodeChangedSubject.next(id);
            this.nodeSelected.emit({ node: node.node, instance: this });
            if (this.serializedValue.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id == this.selectedRow.id))) {
                this.serializedValue.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id == this.selectedRow.id)).isSelected = true;
            }
            if (gotocurrent && this.fixedHeader) {
                this.scrollToCurrentNode();
            }
            if (detectChanges) {
                this.detectChanges();
            }
        }
        else {
            if (!node) {
                this.selectedRow = null;
                this.writeConsole(`未找到ID为 ${id} 的数据！！`);
            }
        }
        return this;
    }
    /**
     * 取消选中
     * @param {?} id
     * @param {?=} detectChanges
     * @return {?}
     */
    unSelectNode(id, detectChanges = true) {
        /** @type {?} */
        const rowNode = this.findRowNode(id);
        if (rowNode) {
            rowNode.isSelected = false;
            if (this.singleSelect) {
                this.clearSelections();
                this.selectedRow = null;
                rowNode.isChecked = false;
                this.selections = [];
            }
            else {
                if (this.onlySelectSelf) {
                    this.selections = [];
                }
                else {
                    this.setSelections(rowNode);
                }
            }
            if (detectChanges) {
                this.detectChanges();
            }
            this.nodeUnSelect.emit({ node: rowNode.node, instance: this });
        }
        else {
            this.writeConsole(`未找到ID为${id}的数据！！`);
        }
    }
    /**
     * 选中多行数据
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emitNodeSelected
     * @return {?}
     */
    selectNodes(ids, detectChanges = true, emitNodeSelected = false) {
        if (ids && ids.length) {
            /** @type {?} */
            const nodes = this.findRowNodes(ids).map((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                rn.isSelected = true;
                this.setSelections(rn);
                return rn.node;
            }));
            this.selections = [...this.selections];
            if (detectChanges) {
                this.detectChanges();
            }
            this.selectNodeChangedSubject.next(ids.join(','));
            if (emitNodeSelected) {
                this.nodeSelected.emit({ node: nodes, instance: this });
            }
        }
        return this;
    }
    /**
     * 取消选中
     * @param {?=} ids
     * @param {?=} emit
     * @return {?}
     */
    unSelectNodes(ids, emit = true) {
        if (ids && ids.length) {
            /** @type {?} */
            const rownodes = this.findRowNodes(ids);
            if (rownodes && rownodes.length) {
                rownodes.forEach((/**
                 * @param {?} rn
                 * @return {?}
                 */
                rn => {
                    rn.isSelected = false;
                    this.setSelections(rn);
                }));
                this.selections = [...this.selections];
                this.detectChanges();
                if (emit) {
                    this.nodeUnSelect.emit({ node: rownodes.map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        r => r.node)), instance: this });
                }
            }
        }
        else {
            this.clearSelections();
            this.detectChanges();
        }
    }
    /**
     * 钩选指定的节点
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @param {?=} detectChanges 触发变更检测。默认为 true
     * @return {?}
     */
    checkedNode(id, updateParentCheckboxStatus = true, detectChanges = true) {
        if (this.isEnableMultiSelect()) {
            /** @type {?} */
            const node = this.findRowNode(id);
            if (node) {
                node.isChecked = true;
                if (!this.isChecked(node.node)) {
                    this.setCheckeds(node, false);
                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(node);
                    }
                }
                if (detectChanges) {
                    this.detectChanges();
                }
                this.nodeChecked.emit({ originalEvent: null, node: node.node, instance: this });
            }
            else {
                this.writeConsole(`未找到ID为${id}的数据！！`);
            }
        }
    }
    /**
     * @param {?} id
     * @param {?=} updateParentCheckboxStatus
     * @return {?}
     */
    unCheckedNode(id, updateParentCheckboxStatus = true) {
        if (this.isEnableMultiSelect()) {
            /** @type {?} */
            const rownode = this.findRowNode(id);
            if (rownode) {
                rownode.isChecked = false;
                this.setCheckeds(rownode);
                if (this.selectOnCheck) {
                    rownode.isSelected = false;
                    this.setSelections(rownode);
                }
                if (this.selectedRow && this.selectedRow.id === id) {
                    this.selectedRow = null;
                }
                if (this.singleSelect || !this.cascadeCheck) {
                    this.updateNodeStatus();
                    if (updateParentCheckboxStatus && this.cascadeCheck && this.cascadeUp) {
                        this.updateParentCheckboxStatus(rownode);
                    }
                    if (this.checkValues) {
                        this.checkValues = this.checkValues.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n !== id));
                        this.checkValuesChange.emit(this.checkValues);
                    }
                    this.detectChanges();
                    this.nodeUnChecked.emit({ node: rownode, instance: this });
                }
                else {
                    /** @type {?} */
                    const unNodes = this.cascadeNodes(rownode, false);
                    this.checkeds = [...this.checkeds];
                    this.checkValuesChange.emit(this.checkValues);
                    this.detectChanges();
                    this.nodeUnChecked.emit({ node: rownode, nodes: unNodes, instance: this });
                }
            }
            else {
                this.writeConsole(`未找到ID为${id}的数据！！`);
            }
        }
    }
    /**
     * @private
     * @param {?} ids
     * @param {?} checked
     * @return {?}
     */
    _checkedNodes(ids, checked) {
        /** @type {?} */
        const parentIDS = [];
        /** @type {?} */
        const nodes = this.findRowNodes(ids).map((/**
         * @param {?} rn
         * @return {?}
         */
        rn => {
            parentIDS.push(rn.parents);
            if (rn.node.selectable) {
                rn.isChecked = checked;
                this.setCheckeds(rn, false);
            }
            return rn.node;
        }));
        this.checkeds = [...this.checkeds];
        if (this.cascadeCheck && this.cascadeUp) {
            // 更新父节点复框的选中状态
            this.updateParentsCheckStatus(parentIDS);
        }
        return nodes;
    }
    /**
     * 批量选中节点
     * @param {?} ids
     * @param {?=} detectChanges
     * @param {?=} emit
     * @param {?=} closeCascade
     * @return {?}
     */
    checkedNodes(ids, detectChanges = true, emit = true, closeCascade) {
        if (this.isEnableMultiSelect()) {
            if (ids && ids.length) {
                /** @type {?} */
                const _cascade = this.cascadeCheck;
                if (closeCascade && _cascade) {
                    this.cascadeCheck = false;
                }
                /** @type {?} */
                const nodes = this._checkedNodes(ids, true);
                if (closeCascade && _cascade) {
                    // 恢复级联
                    this.cascadeCheck = true;
                }
                this.updateAllCheckboxStatus();
                if (detectChanges) {
                    this.detectChanges();
                }
                if (emit) {
                    this.nodeChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });
                }
            }
        }
    }
    /**
     * 取消选中的节点.
     * ids: 标识Id 数组
     * closeCascade: 执行取消钩选时是否关闭级联功能。默认为 false
     *     设为true时，钩选将禁用级联的功能，仅处理当前节点的选中状态。执行完毕后，恢复原先的级联选项。
     * emit: 是否触发取消勾选事件。默认为 true
     * @param {?} ids
     * @param {?=} closeCascade
     * @param {?=} emit
     * @return {?}
     */
    unCheckedNodes(ids, closeCascade, emit = true) {
        if (ids && ids.length) {
            /** @type {?} */
            const _cascade = this.cascadeCheck;
            if (closeCascade && _cascade) {
                this.cascadeCheck = false;
            }
            /** @type {?} */
            const nodes = this._checkedNodes(ids, false);
            if (closeCascade && _cascade) {
                this.cascadeCheck = true;
            }
            this.detectChanges();
            if (emit) {
                this.nodeUnChecked.emit({ originalEvent: null, node: nodes, nodes, instance: this });
            }
        }
        else {
            this.clearCheckeds();
            this.detectChanges();
        }
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    unCheckedAndSelected(ids) {
        this.unCheckedNodes(ids, true, false);
        this.unSelectNodes(ids, false);
    }
    /**
     * @param {?} id
     * @return {?}
     */
    findRowNode(id) {
        if (id) {
            if (this.state.rowNodes) {
                return this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === id));
            }
        }
        return undefined;
    }
    /**
     * 将在 v0.2.x 废弃；请使用 findRowNode 方法
     * @param {?} id
     * @return {?}
     */
    findNode(id) {
        return this.findRowNode(id);
    }
    /**
     * 根据当前节点ID，获取顶级父节点
     * @param {?} id 当前节点ID
     * @return {?} 返回顶级节点
     */
    getRoot(id) {
        /** @type {?} */
        const rowNode = this.findRowNode(id);
        if (rowNode) {
            if (rowNode.parents && rowNode.parents.length) {
                return this.findRowNode(rowNode.parents[0]);
            }
            return rowNode;
        }
        return null;
    }
    /**
     * @param {?} ids
     * @return {?}
     */
    findRowNodes(ids) {
        return this.state.rowNodes.filter((/**
         * @param {?} rn
         * @return {?}
         */
        rn => ids.indexOf(rn.id) > -1));
    }
    /**
     * @param {?=} args
     * @return {?}
     */
    checkAllNodes(args) {
        /** @type {?} */
        let rowNodes = this.getCurrentAllRowNodes();
        rowNodes = rowNodes.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => (n.node.selectable || n.node.selectable === undefined)));
        this.checkeds = rowNodes.map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            n.indeterminate = false;
            this.ttService.onChangeCheckboxStatus(n);
            if (n.node.selectable || n.node.selectable === undefined) {
                n.isChecked = true;
            }
            return n.node;
        }));
        if (this.selectOnCheck && !this.onlySelectSelf) {
            this.selections = rowNodes.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n.node.selectable || n.node.selectable === undefined) {
                    n.isSelected = true;
                }
                return n.node;
            }));
        }
        if (this.state.searched) {
            rowNodes.forEach((/**
             * @param {?} rn
             * @return {?}
             */
            rn => {
                /** @type {?} */
                const row = this.state.rowNodes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === rn.id));
                if (row) {
                    row.isSelected = rn.isSelected;
                    row.isChecked = rn.isChecked;
                }
            }));
        }
        this.checkAll.emit(args);
        this.updateAllCheckboxStatus();
        this.detectChanges();
    }
    /**
     * @param {?=} args
     * @return {?}
     */
    unCheckAllNodes(args) {
        this.clearAll();
        this.unCheckAll.emit(args);
        this.detectChanges();
    }
    /**
     * @private
     * @return {?}
     */
    isEnableMultiSelect() {
        if (this.singleSelect) {
            if (!this.showCheckbox) {
                return false;
            }
            return true;
        }
        return true;
    }
    // 从数据中获取节点图标
    // iconField 为 object
    //      如果 展开图标为空，折叠图标不为空，或反之，则展开与折叠图标保持一至；
    //      如果 叶子图标为空，则使用组件默认的图标
    // iconField 为 字符串： 则叶子 展开 折叠 图标使用同一个。 如果为空， 则使用组件默认图标
    /**
     * @private
     * @param {?} tn
     * @return {?}
     */
    getNodeIconFromData(tn) {
        /** @type {?} */
        let leaf = null;
        /** @type {?} */
        let expand = null;
        /** @type {?} */
        let collapse = null;
        if (this.useIconFromData) {
            if (this.iconField) {
                /** @type {?} */
                let _iconField = '';
                if (typeof this.iconField === 'string') {
                    _iconField = this.iconField;
                    if (tn[_iconField]) {
                        leaf = tn[_iconField];
                    }
                    else {
                        leaf = this.utils.getValue(_iconField, tn.data);
                    }
                    expand = collapse = leaf;
                }
                else {
                    if (this.iconField.leaf) {
                        leaf = this.utils.getValue(this.iconField.leaf, tn.data);
                    }
                    if (this.iconField.expand) {
                        expand = this.utils.getValue(this.iconField.expand, tn.data);
                    }
                    if (this.iconField.collapse) {
                        collapse = this.utils.getValue(this.iconField.collapse, tn.data);
                    }
                    if (expand && !collapse) {
                        collapse = expand;
                    }
                    if (!expand && collapse) {
                        expand = collapse;
                    }
                }
            }
        }
        return {
            leaf, expand, collapse
        };
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    getTreeIcon(treeNode) {
        /** @type {?} */
        const tn = treeNode;
        /** @type {?} */
        let leafIcon = this.leafIcon || 'file';
        /** @type {?} */
        let expandIcon = this.expandIcon || 'folder-open';
        /** @type {?} */
        let collapseIcon = this.collapseIcon || 'folder';
        /** @type {?} */
        const loading = 'f-loading-round';
        if (tn['showLoading']) {
            return { [loading]: true };
        }
        if (tn.icon) {
            leafIcon = tn.icon;
        }
        if (tn.expandedIcon) {
            expandIcon = tn.expandedIcon;
        }
        if (tn.collapsedIcon) {
            collapseIcon = tn.collapsedIcon;
        }
        if (this.useIconFromData) {
            const { leaf, expand, collapse } = this.getNodeIconFromData(treeNode);
            if (this.whenDataIconEmptyUseDefault) {
                if (leaf) {
                    leafIcon = leaf;
                }
                if (expand) {
                    expandIcon = expand;
                }
                if (collapse) {
                    collapseIcon = collapse;
                }
            }
            else {
                leafIcon = leaf || '';
                expandIcon = expand || '';
                collapseIcon = collapse || '';
            }
        }
        /** @type {?} */
        const collapsedExpression = (!tn.leaf || !!(tn.children && tn.children.length)) && !tn.expanded;
        /** @type {?} */
        const expandedExpression = !!tn.expanded;
        /** @type {?} */
        const leafExpression = tn.leaf === undefined ? (!tn.children || !tn.children.length) : tn.leaf;
        /** @type {?} */
        const icons = {};
        if (leafExpression && leafIcon) {
            icons[leafIcon] = leafExpression;
        }
        else {
            if (tn.expanded && expandIcon) {
                icons[expandIcon] = expandedExpression;
            }
            else {
                if (collapseIcon) {
                    icons[collapseIcon] = collapsedExpression;
                }
            }
        }
        if (this.iconCls) {
            icons[this.iconCls] = true;
        }
        return icons;
    }
    /**
     * @private
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    compare(a, b) {
        if (typeof a === 'string') {
            return a.localeCompare(b);
        }
        else {
            return a === b ? 0 : (a > b ? 1 : -1);
        }
    }
    /**
     * @private
     * @param {?} r1
     * @param {?} r2
     * @return {?}
     */
    _sort(r1, r2) {
        /** @type {?} */
        let r = 0;
        /** @type {?} */
        const sortFields = this.sortName.split(',');
        /** @type {?} */
        const orders = this.sortOrder.split(',');
        if (!this.sortName) {
            return r;
        }
        for (let i = 0; i < sortFields.length; i++) {
            /** @type {?} */
            const sn = sortFields[i];
            /** @type {?} */
            const so = orders[i];
            /** @type {?} */
            const col = this.columns.find((/**
             * @param {?} c
             * @return {?}
             */
            c => c.field === sn));
            /** @type {?} */
            const orderby = col.sorter || this.compare;
            /** @type {?} */
            let v1 = this.utils.getValue(sn, r1.data);
            if (v1 === null || v1 === undefined) {
                v1 = '';
            }
            /** @type {?} */
            let v2 = this.utils.getValue(sn, r2.data);
            if (v2 === null || v2 === undefined) {
                v2 = '';
            }
            r = orderby(v1, v2);
            if (r !== 0) {
                return r * (so === 'asc' ? 1 : -1);
            }
        }
        return r;
    }
    /**
     * @return {?}
     */
    clientSort() {
        if (!this.data || !this.data.length) {
            return;
        }
        /** @type {?} */
        const sortedData = this.data.sort(this._sort.bind(this));
        /** @type {?} */
        const sortChildNodes = (/**
         * @param {?} childNodes
         * @return {?}
         */
        (childNodes) => {
            childNodes = childNodes.sort(this._sort.bind(this));
            childNodes.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n.children && n.children.length) {
                    n.children = n.children.sort(this._sort.bind(this));
                    sortChildNodes(n.children);
                }
            }));
            return childNodes;
        });
        sortedData.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            c.children = sortChildNodes(c.children);
        }));
        this.loadData(sortedData);
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onSortColumnClick($event, col) {
        if (!col.sortable) {
            return;
        }
        /** @type {?} */
        const sortName = this.sortName;
        /** @type {?} */
        const sortOrder = this.sortOrder;
        /** @type {?} */
        let sortFields = [];
        /** @type {?} */
        let sortOrders = [];
        if (sortName) {
            sortFields = sortName.split(',');
            sortOrders = sortOrder.split(',');
        }
        /** @type {?} */
        const colOrder = col.order || 'asc';
        /** @type {?} */
        let newOrder = colOrder;
        /** @type {?} */
        const i = sortFields.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === col.field));
        if (i >= 0) {
            /** @type {?} */
            const _order = sortOrders[i] === 'asc' ? 'desc' : 'asc';
            newOrder = _order;
            // if (this.multiSort && newOrder === 'asc') {
            if (newOrder === 'asc') {
                newOrder = undefined;
                sortFields.splice(i, 1);
                sortOrders.splice(i, 1);
            }
            else {
                sortOrders[i] = _order;
            }
        }
        else {
            if (this.multiSort) {
                sortFields.push(col.field);
                sortOrders.push(colOrder);
            }
            else {
                sortFields = [col.field];
                sortOrders = [colOrder];
            }
        }
        col.order = newOrder;
        this.sortName = sortFields.join(',');
        this.sortOrder = sortOrders.join(',');
        if (!this.multiSort) {
            /** @type {?} */
            const updateFieldOrder = (/**
             * @param {?} cols
             * @return {?}
             */
            (cols) => {
                if (!cols || !cols.length) {
                    return;
                }
                cols.forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    c.order = undefined;
                    /** @type {?} */
                    const k = sortFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f === c.field));
                    if (k >= 0) {
                        c.order = sortOrders[k];
                    }
                }));
            });
            updateFieldOrder(this.columns);
            this.cdRef.detectChanges();
        }
        this.beforeSortColumn(this.sortName, this.sortOrder).subscribe((/**
         * @return {?}
         */
        () => {
            if (this.remoteSort) {
                // this.reload();
            }
            else {
                this.clientSort();
            }
            this.columnSorted.emit({ sortName: this.sortName, sortOrder: this.sortOrder });
        }));
    }
    /**
     * 查询工具条前端字符查询
     * @param {?} $event
     * @return {?}
     */
    findKeyWords($event) {
        /** @type {?} */
        const searchValue = $event.value;
        /** @type {?} */
        const field = $event.field;
        this.findField = field;
        if (searchValue && searchValue.length >= 2) {
            this.findValue = searchValue;
            if (!field) {
                this.writeConsole('Please set a field for the FindField property.', 'warn');
                return;
            }
            /** @type {?} */
            const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);
            if (result && result.length) {
                this.findResult = result.sort((/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                (a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1)));
                this.findCount = result.length;
                this.findCurrent = 1;
                this._scrollToNode(result[0].id);
                this.highLightKeywords();
            }
            else {
                this.findResult = [];
                this.findCurrent = 0;
                this.findCount = 0;
            }
        }
        else {
            this.resetFindText();
            this.cdRef.detectChanges();
        }
    }
    /**
     * @param {?} step
     * @return {?}
     */
    nextFindValue(step) {
        if (!this.findResult || !this.findResult.length) {
            return;
        }
        /** @type {?} */
        const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));
        if (this.findCurrent === this.findResult.length) {
            this.findCurrent = 1;
        }
        else {
            if (step) {
                this.findCurrent = this.findCurrent + step;
                if (step === -1) {
                    if (this.findCurrent <= 0) {
                        this.findCurrent = 1;
                    }
                }
            }
            else {
                this.findCurrent++;
            }
        }
        /** @type {?} */
        const active = this.el.nativeElement.querySelector('.search-highlight.active');
        if (active) {
            this.renderer.removeClass(active, 'active');
        }
        /** @type {?} */
        const _index = this.findCurrent - 1;
        /** @type {?} */
        const nextRow = this.findResult[_index];
        if (nextRow) {
            this._scrollToNode(nextRow.id);
            if (this.virtualized) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    if (this['HIGH_LIGHT_TIMER']) {
                        clearTimeout(this['HIGH_LIGHT_TIMER']);
                    }
                    this['HIGH_LIGHT_TIMER'] = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        /** @type {?} */
                        const trId = 'rownode-' + nextRow.id;
                        /** @type {?} */
                        const tr = this.el.nativeElement.querySelector('#' + trId);
                        if (tr) {
                            /** @type {?} */
                            const highLightDom = tr.querySelector('.search-highlight');
                            if (highLightDom) {
                                this.renderer.addClass(highLightDom, 'active');
                            }
                        }
                    }), 100);
                }));
            }
            else {
                if (allHighLights[_index]) {
                    this.renderer.addClass(allHighLights[_index], 'active');
                }
            }
        }
    }
    /**
     * 查询工具条前端字符查询
     * @return {?}
     */
    /*
        findKeyWords($event) {
            const searchValue = $event.value;
            const field = $event.field;
            this.findField = field;
            if (searchValue && searchValue.length >= 2) {
                this.findValue = searchValue;
    
                if (!field) {
                    this.writeConsole('Please set a field for the FindField property.', 'warn');
                    return;
                }
    
                const result = this.searchHandle.searchOnClient(field, searchValue, this.state.rowNodes);
    
                if (result && result.length) {
                    this.findResult = result.sort((a, b) => a.index === b.index ? 0 : (a.index > b.index ? 1 : -1));
                    const firstRowIndex = result[0].index;
    
                    this.findCount = result.length;
    
                    const parents = this.searchHandle.findParents(result, this.state.rowNodes);
    
                    this.findCurrent = 1;
                    [...parents, ...result].forEach((r: RowNode) => {
                        this.expandNode(r.id);
                    });
    
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && firstRowIndex > index) {
                            y += this.rowHeight;
                        }
                    });
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30);
                    }
    
                    this.highLightKeywords();
                } else {
                    this.findResult = [];
                    this.findCurrent = 0;
                    this.findCount = 0;
                }
            } else {
                this.resetFindText();
                this.cdRef.detectChanges();
            }
        }
    
        nextFindValue(step) {
            if (!this.findResult || !this.findResult.length) {
                return;
            }
            const allHighLights = Array.from(this.el.nativeElement.querySelectorAll('.search-highlight'));
    
            if (this.findCurrent === this.findResult.length) {
                this.findCurrent = 1;
            } else {
                if (step) {
                    this.findCurrent = this.findCurrent + step;
                    if (step === -1) {
                        if (this.findCurrent <= 0) {
                            this.findCurrent = 1;
                        }
                    }
                } else {
                    this.findCurrent++;
                }
            }
    
            const active = this.el.nativeElement.querySelector('.search-highlight.active');
    
            let _index = allHighLights.indexOf(active);
    
            if (active) {
                this.renderer.removeClass(active, 'active');
            }
    
            if (this.virtualized) {
    
                _index += !step ? 1 : step;
    
                if (allHighLights[_index]) {
                    this.renderer.addClass(allHighLights[_index], 'active');
    
                } else {
                    // 先滚动指定位置
                    const nextRow = this.findResult[this.findCurrent - 1];
                    let y = 0;
                    this.state.rowNodes.forEach((row: RowNode, index: number) => {
                        if (row.visible && nextRow.index > index) {
                            y += this.rowHeight;
                        }
                    });
    
                    if (this.psRef && this.psRef.directiveRef) {
                        this.psRef.directiveRef.scrollToY(y - 30, 200);
                    }
                    this.ngZone.runOutsideAngular(() => {
                        setTimeout(() => {
                            const keyWords = this.el.nativeElement.querySelectorAll('.search-highlight');
                            this.renderer.addClass(keyWords[0], 'active');
                        }, 100);
                    });
                }
            } else {
                const currentEl: any = allHighLights[this.findCurrent - 1];
                if (currentEl) {
                    this.renderer.addClass(currentEl, 'active');
                    if (this.psRef && this.psRef.directiveRef) {
                        const sTop = currentEl.closest('td').offsetTop - 30;
                        this.psRef.directiveRef.scrollToY(sTop, 200);
                    }
                }
            }
    
    
            this.cdRef.detectChanges();
        }
    */
    closeFindPanel() {
        this.showFindInput = false;
        this.resetFindText();
        this.cdRef.detectChanges();
    }
    /**
     * @private
     * @return {?}
     */
    highLightKeywords() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.cdRef.detectChanges();
                /** @type {?} */
                const allHighLights = this.el.nativeElement.querySelectorAll('.search-highlight');
                if (!allHighLights.length) {
                    return;
                }
                this.renderer.addClass(allHighLights[0], 'active');
            }), 100);
        }));
    }
    /**
     * @private
     * @return {?}
     */
    resetFindText() {
        this.findValue = '';
        this.findCurrent = 0;
        this.findCount = 0;
        this.findResult = [];
    }
    /**
     * @param {?} y
     * @param {?=} animations
     * @return {?}
     */
    scrollToY(y, animations = 200) {
        this.state.scrollY = y || 0;
        this.psRef.directiveRef.scrollToY(y, animations);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} isHide
     * @return {?}
     */
    showOrHideColumn(field, isHide) {
        if (Array.isArray(field)) {
            this.columns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (field.indexOf(n.field) > -1) {
                    n.visible = !isHide;
                }
            }));
        }
        else {
            this.columns.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (field === n.field) {
                    n.visible = !isHide;
                }
            }));
        }
        this.columnsChanged();
    }
    /**
     * @param {?} field
     * @return {?}
     */
    showColumn(field) {
        this.showOrHideColumn(field, false);
    }
    /**
     * @param {?} field
     * @return {?}
     */
    hideColumn(field) {
        this.showOrHideColumn(field, true);
    }
    /**
     * @param {?} parentNode
     * @return {?}
     */
    showChildsLoading(parentNode) {
        /** @type {?} */
        const colspan = this.columns.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible !== false)).length;
        /** @type {?} */
        const data = { [this.idField]: '正在加载中....', __colspan__: colspan };
        this.loadChildren([{ data, __childs_loading__: true }], parentNode, false);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onChildsPageChanged($event) {
        this.childsPageChanged.emit($event);
    }
    /**
     * @private
     * @param {?} tr
     * @return {?}
     */
    trId2DataId(tr) {
        return tr.id.replace('rownode-', '');
    }
    // 快捷键
    /**
     * @param {?} $event
     * @return {?}
     */
    onKeydownEvent($event) {
        if (!$event || !this.singleSelect || !this.data || !this.data.length) {
            return;
        }
        /** @type {?} */
        const keys = ['ArrowUp', 'ArrowDown', 'ArrowLeft', 'ArrowRight'];
        if (!keys.includes($event.key) || $event.target.nodeName === 'INPUT') {
            return;
        }
        $event.stopPropagation();
        $event.preventDefault();
        this.inputGroup.textbox.nativeElement.blur();
        /** @type {?} */
        let newIdx;
        /** @type {?} */
        const trs = Array.from(this.bodyTable.nativeElement.querySelectorAll('tr'));
        /** @type {?} */
        const trCount = trs.length;
        /** @type {?} */
        let selectedTrIndex = -1;
        if (this.selectedRow) {
            selectedTrIndex = trs.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            (n) => this.trId2DataId(n) === this.selectedRow.id));
        }
        if ($event.code === 'ArrowDown') {
            newIdx = selectedTrIndex + 1;
        }
        else if ($event.code === 'ArrowUp') {
            if (selectedTrIndex !== -1) {
                newIdx = selectedTrIndex - 1;
            }
        }
        else {
            if (this.selectedRow && ($event.code === 'ArrowRight' || $event.code === 'ArrowLeft')) {
                this.toggleExpand(this.selectedRow);
            }
            return;
        }
        if (newIdx >= 0 && newIdx < trCount) {
            /** @type {?} */
            const _tr = (/** @type {?} */ (trs[newIdx]));
            if (_tr) {
                /** @type {?} */
                const id = this.trId2DataId(_tr);
                this.selectNode(id);
                _tr.scrollIntoView({ block: 'nearest' });
            }
        }
    }
    /**
     * 根据传入的父级ID，获取所有子级节点
     * @param {?} parentId
     * @return {?}
     */
    getChildNodes(parentId) {
        /** @type {?} */
        let nodes = [];
        if (parentId) {
            /** @type {?} */
            const rowNode = this.findRowNode(parentId);
            if (rowNode && rowNode.node.children && rowNode.node.children.length) {
                rowNode.node.children.forEach((/**
                 * @param {?} tn
                 * @return {?}
                 */
                (tn) => {
                    if (tn.selectable) {
                        nodes.push(tn);
                    }
                    nodes = nodes.concat(this.getChildNodes(tn.id));
                }));
            }
            return nodes;
        }
        return [];
    }
    /**
     * 根据传入的节点ID， 获取所有父级节点
     * @param {?} id
     * @return {?}
     */
    getParentNodes(id) {
        /** @type {?} */
        let nodes = [];
        if (id) {
            /** @type {?} */
            const rowNode = this.findRowNode(id);
            if (rowNode && rowNode.parents && rowNode.parents.length) {
                rowNode.parents.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => {
                    /** @type {?} */
                    const rn = this.findRowNode(n);
                    if (rn && rn.node.selectable) {
                        nodes.push(rn);
                    }
                }));
            }
            return nodes;
        }
        return [];
    }
    /**
     * @param {?} $event
     * @param {?} col
     * @return {?}
     */
    onFilterRowInput($event, col) {
        this.filterRowConditions = this.filterRowConditions || {};
        this.filterRowConditions[col.field] = $event.target.value;
        Object.keys(this.filterRowConditions).forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (this.filterRowConditions[n] === '' || this.filterRowConditions[n] == null) {
                delete this.filterRowConditions[n];
            }
        }));
        if (this['FILTERCONDITIONS_CHANGED_TIMER']) {
            clearTimeout(this['FILTERCONDITIONS_CHANGED_TIMER']);
        }
        this['FILTERCONDITIONS_CHANGED_TIMER'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.searchHandle.searchWithConditions(this.filterRowConditions);
            this.setNewColumnsWidth();
        }), 200);
    }
}
TreeTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-treetable',
                template: "\r\n<div class=\"filter-row\" style=\"width: 100%;\" *ngIf=\"showFilterBar\">\r\n    <form style=\"display: flex; width: 100%;\">\r\n        <div class=\"search-fields\" style=\"padding-left:0; max-width: 180px;min-width: 140px;\" [style.display]=\"showSearchField ? '': 'none'\">\r\n            <select class=\"custom-select\" [(ngModel)]=\"searchData.field\" name=\"field\"  single-select [panelRef]=\"selectpanel\" [items]=\"searchFields\">\r\n                <!-- <option value=\"*\">{{allColumnsTitle}}</option>\r\n                <option *ngFor=\"let col of searchFields\" value=\"{{col.value}}\">{{ col.label }}</option> -->\r\n            </select>\r\n\r\n            <div #selectpanel class=\"single-select-panel f-area-hide\">\r\n                <ul class=\"dropdown-menu show\">\r\n                    <li class=\"dropdown-item\" [attr.value]=\"'*'\" [class.active]=\"searchData.field === '*'\" *ngIf=\"searchAnyField\">{{allColumnsTitle}}</li>\r\n                    <li class=\"dropdown-item\" *ngFor=\"let col of searchFields\" [attr.value]=\"col.value\" [class.active]=\"searchData.field === col.value\">{{ col.label }}</li>\r\n                </ul>\r\n            </div>\r\n\r\n\r\n        </div>\r\n        <div class=\"search-text flex-fill\" style=\"padding-right: 0px;\">\r\n            <input-group #inputGroup [groupText]=\"searchButtonText\" name=\"searchValue\" [(ngModel)]=\"searchData.value\"\r\n                (clear)=\"onClearSearchValue()\" (valueChange)=\"onSearchValueChange($event)\" (clickHandle)=\"onSearch()\"\r\n                (keydownHandle)=\"onKeydownEvent($event)\"></input-group>\r\n        </div>\r\n    </form>\r\n</div>\r\n\r\n<ng-content select=\"tt-column\"></ng-content>\r\n\r\n<ng-template #tdcell let-col let-serializedNode=\"rowNode\" let-left=\"left\">\r\n\r\n    <ng-container *ngIf=\"enableFindText\">\r\n        <span *ngIf=\"!col.formatter\" style=\"width: 100%;\"\r\n            [innerHTML]=\"getNodeText(col, serializedNode.node.data) | highlight: findValue: col.field :findField\"></span>\r\n        <span *ngIf=\"col.formatter\" style=\"width: 100%;\" \r\n            [innerHTML]=\"formatData(col, serializedNode.node.data, col.formatter) | safe: 'html' \"></span>\r\n    </ng-container>\r\n\r\n    <ng-container *ngIf=\"!enableFindText\">\r\n        <span *ngIf=\"!col.formatter && !fast\" style=\"width: 100%;\"\r\n            [innerHTML]=\"getNodeText(col, serializedNode.node.data)\"></span>\r\n        <span *ngIf=\"!col.formatter && fast\" style=\"width: 100%;\"\r\n            [textContent]=\"getNodeText(col, serializedNode.node.data, true)\"></span>\r\n        <span *ngIf=\"col.formatter\" style=\"width: 100%;\" \r\n            [innerHTML]=\"formatData(col, serializedNode.node.data, col.formatter) | safe: 'html' \"></span>\r\n    </ng-container>\r\n</ng-template>\r\n\r\n<ng-template #tbodyrows>\r\n    <ng-template ngFor let-serializedNode let-rowIndex=\"index\" [ngForTrackBy]=\"trackByFn\" [ngForOf]=\"pagination ? (serializedValue | paginate: paginationOptions) : serializedValue\">\r\n        <tr *ngIf=\"serializedNode.visible\" #row=\"row\" \r\n            [attr.id]=\" 'rownode-' + serializedNode.id\" class=\"f-treetable-row\"\r\n            [selectRow]=\"serializedNode\" [rowIndex]=\"rowIndex\" [dblclick]=\"useDblClick\" [dblclickNode]=\"serializedNode\"\r\n            [selectRowDisabled]=\"serializedNode.node | disablenode: disabledRow\"\r\n            [customRowStyle]=\"serializedNode\"\r\n            [class.f-treetable-disable-row]=\"serializedNode.node | disablenode: disabledRow\"\r\n            [class.farris-table-selectedrow]=\"serializedNode.isSelected\">\r\n\r\n            <td *ngIf=\"serializedNode.node.data['__colspan__']\"  [attr.colspan]=\" serializedNode.node.data['__colspan__'] || 0\">\r\n                <childs-loading></childs-loading>\r\n            </td>\r\n\r\n            <ng-container *ngIf=\"!serializedNode.node.data['__colspan__']\">\r\n                <td *ngFor=\"let col of columns; let i = index;\"\r\n                    [customCellStyle]=\"col\" [rowNode]=\"serializedNode\" [rowIndex]=\"rowIndex\"\r\n                    [style.textAlign]=\"col!.align || 'left'\" \r\n                    (click)=\"onCellClick($event, col, serializedNode.node)\"\r\n                    class=\"treetable-cell\" [attr.field]=\"col.field\"\r\n                    [attr.colspan]=\" serializedNode.node.data['__cellspan__'] || 0\"\r\n                    [attr.title]=\"col | tipmsg: serializedNode.node\"\r\n                    [class.f-treetable--fixed-left]=\"fixedColumns && fixedHeader && col.fixed && col.fixed === 'left'\"\r\n                    [class.f-treetable--fixed-right]=\"fixedColumns && fixedHeader && col.fixed && col.fixed === 'right'\"\r\n                    [attr.r-tt-shadow-col]=\"col.rightShadowCol\"\r\n                    [attr.l-tt-shadow-col]=\"col.leftShadowCol\"\r\n                >\r\n\r\n                    <div class=\"treetable-cell-content d-flex align-items-center\">\r\n                        <farris-treeTableToggler style=\"float: left\"\r\n                            [showLines]=\"showLines\"\r\n                            [indentSpacing]=\"indentSpacing\"\r\n                            [disabled]=\"serializedNode.node | disablenode: disabledRow: disabled\"\r\n                            [rowNode]=\"serializedNode\" *ngIf=\"i == 0\"></farris-treeTableToggler>\r\n                        \r\n                        <div class=\"flex-grow-1 text\"  *ngIf=\"!col.componentType\">\r\n                            <ng-container *ngIf=\"!col.template && col.field\">\r\n                                <ng-container *ngTemplateOutlet=\"tdcell; context: {$implicit: col, node: serializedNode.node, rowNode: serializedNode, rowData: serializedNode.node.data  }\" ></ng-container>\r\n                            </ng-container>\r\n            \r\n                            <ng-container *ngIf=\"col.template\"\r\n                                [ngTemplateOutlet]=\"col.template\"\r\n                                [ngTemplateOutletContext]=\"{$implicit: { column: col, node: serializedNode.node, rowNode: serializedNode, rowData:  serializedNode.node.data  }}\">\r\n                            </ng-container>\r\n                        </div>\r\n                        <div class=\"flex-grow-1 text\"  *ngIf=\"col.componentType\" [component-template]=\"col\" [ctx]=\" { column: col, node: serializedNode.node, rowNode: serializedNode, rowData:  serializedNode.node.data  }\">\r\n                        </div>\r\n                    </div>\r\n                </td>\r\n            </ng-container>\r\n        </tr>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n<ng-template #tbody>\r\n    <tbody class=\"farris-treetable-tbody\"\r\n        [farris-context-menus]=\"contextMenuItems\" [disabled]=\"!enableContextMenu\" \r\n        [activeDomName]=\"'tr'\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n        [menuClass]=\"'f-treetable-context-menu'\">\r\n        <ng-container *ngTemplateOutlet=\"tbodyrows\"></ng-container>\r\n    </tbody>\r\n</ng-template>\r\n\r\n<!--\u5355\u884C\u8868\u5934\u6A21\u677F-->\r\n<ng-template #headerCells let-cols let-firstRow=\"firstRow\">\r\n    <ng-template ngFor let-col [ngForOf]=\"cols\" let-i=\"index\" let-first=\"first\" let-last=\"last\">\r\n        <th [resizable-column]=\"(!col.lastColumn || !last) && (!col.colspan || col.colspan == 1)\" [style.textAlign]=\"col!.hAlign || 'left'\" #th \r\n            class=\"treetable-header-cell\"\r\n            [class.f-treetable--fixed-left]=\"fixedColumns && col.fixed && col.fixed === 'left'\"\r\n            [class.f-treetable--fixed-right]=\"fixedColumns && col.fixed && col.fixed === 'right'\"\r\n            [attr.field]=\"col.field || ''\"\r\n            [attr.r-tt-shadow-col]=\"col.rightShadowCol\"\r\n            [attr.l-tt-shadow-col]=\"col.leftShadowCol\"\r\n            [attr.colspan]=\"col.colspan\" \r\n            [attr.rowspan]=\"col.rowspan\"\r\n            [class.group-header-cell]=\"col.colspan && col.colspan > 1\"\r\n            [attr.id]=\"col.id\"\r\n            >\r\n      \r\n            <div class=\"d-flex\" style=\"line-height: 1.25em;\" [style.padding-right.px]=\"col.sortable ? 10: 0\">\r\n                <ng-container *ngIf=\"!singleSelect && showCheckAll && first && showCheckbox && !last && firstRow\">\r\n                    <tt-header-checkbox #allCheckbox></tt-header-checkbox>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"col.headTemplate&& !col.headerComponentType\"\r\n                    [ngTemplateOutlet]=\"col.headTemplate\"\r\n                    [ngTemplateOutletContext]=\"{$implicit: { column: col}}\">\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!col.headTemplate && !col.headerComponentType\">\r\n                    <span style=\"overflow: hidden;width: 100%;\" *ngIf=\"!headerWrap\">{{ col.title }}</span>\r\n                    <span style=\"white-space: pre-wrap;width: 100%;\"  *ngIf=\"headerWrap\">{{ col.title }}</span>\r\n                </ng-container>\r\n\r\n                <div class=\"flex-grow-1 text\" *ngIf=\"col.headerComponentType\" [component-template]=\"col\" [templateType]=\"'head'\" [ctx]=\"{ column: col}\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\"></div>\r\n\r\n\r\n                <ng-container *ngIf=\"col.sortable\">\r\n                    <span class=\"f-treetable-sort\"\r\n                        [class.f-treetable-sort-asc]=\"col.order === 'asc'\"\r\n                        [class.f-treetable-sort-desc]=\"col.order === 'desc'\"\r\n                        (click)=\"onSortColumnClick($event, col)\" *ngIf=\"col.order\"></span>\r\n                    <span class=\"f-treetable-sort\" (click)=\"onSortColumnClick($event, col)\" *ngIf=\"!col.order\"></span>\r\n                </ng-container>\r\n\r\n            </div>\r\n        </th>\r\n    </ng-template>\r\n</ng-template>\r\n\r\n<!--\u591A\u884C\u8868\u5934\u6A21\u677F-->\r\n<ng-template #groupHeader>\r\n    <tr *ngFor=\"let cols of groupColumns; first as isFirst\">\r\n        <ng-container *ngTemplateOutlet=\"headerCells; context: {$implicit: cols, firstRow: isFirst}\"></ng-container>\r\n    </tr>\r\n</ng-template>\r\n\r\n\r\n<ng-template #scorllview>\r\n    <div class=\"farris-treetable fixed\" [attr.id]=\"id\" [class.f-treetable--fixed-columns]=\"fixedColumns\"\r\n        [class.farris-treetable-nowrap]=\"!nowrap\" [class.table-bordered]=\"showBorder\"\r\n        [ngClass]=\"{'farris-treetable-disabled': disabled}\"\r\n        [class.farris-treetable-showlines]=\"showLinesOnHover && showLines\" [style.width]=\"fit ? '100%': (width + 'px')\">\r\n        <div #headerBox class=\"farris-treetable-header\" *ngIf=\"showHeader && columns\" style=\"overflow: hidden; background-color: #f7f8fb\">\r\n            <table #headerTable class=\"table\" >\r\n                <colgroup *ngIf=\"!autoWidth\">\r\n                    <ng-container *ngFor=\"let col of columns\">\r\n                        <col *ngIf=\"columnIsVisible(col)\" [style.width]=\"getRealColWidth(col)\" />\r\n                    </ng-container>\r\n                </colgroup>\r\n                <thead class=\"farris-treetable-thead\" [class.header-wrap]=\"headerWrap\">\r\n                    <ng-container *ngIf=\"!headerTemplate\">\r\n                        <tr *ngIf=\"!useGroupHeader; else groupHeader\">\r\n                            <ng-container *ngTemplateOutlet=\"headerCells; context: {$implicit: columns, firstRow: true}\"></ng-container>\r\n                        </tr>\r\n                        <tr *ngIf=\"enableFilterRow\">\r\n                            <th *ngFor=\"let col of columns\">\r\n                                <input autocomplete=\"off\" type=\"text\" class=\"form-control\" name=\"{{ col.field }}\" (input)=\"onFilterRowInput($event, col)\" />\r\n                            </th>\r\n                        </tr>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"headerTemplate\">\r\n                        <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n                    </ng-container>\r\n                </thead>\r\n            </table>\r\n            <!-- \u5BA2\u6237\u7AEF\u67E5\u8BE2\u5B9A\u4F4D\u5DE5\u5177\u6761 -->\r\n            <find-input *ngIf=\"showFindInput\" [columns]=\"columns\" [current]=\"findCurrent\" [count]=\"findCount\"\r\n                (valueChanged)=\"findKeyWords($event)\" (close)=\"closeFindPanel()\" (enterHandler)=\"nextFindValue($event)\">\r\n            </find-input>\r\n\r\n        </div>\r\n\r\n        <div class=\"farris-treetable-body\">\r\n            <perfect-scrollbar #perfectScrollbar [config]=\"{minScrollbarLength: 15}\" (psScrollX)=\"onScrollX($event)\"\r\n                (psScrollY)=\"onScrollY($event)\" [style.height.px]=\"scorllBodyHeight\">\r\n                <div *ngIf=\"topHideHeight && virtualized\" [style.height.px]=\"topHideHeight\"> </div>\r\n                <table #bodyTable class=\"table\" [style.tableLayout]=\"autoWidth? 'auto': 'fixed'\"\r\n                    [ngClass]=\"{'table-striped': striped, 'table-hover': (hovered && serializedValue && serializedValue.length), 'f-table-norecords': (!serializedValue || !serializedValue.length),\r\n                    'h-100': (!serializedValue || !serializedValue.length) }\">\r\n                    <colgroup>\r\n                        <ng-container *ngFor=\"let col of columns\">\r\n                            <col *ngIf=\"columnIsVisible(col)\" [style.width]=\"getRealColWidth(col)\" />\r\n                        </ng-container>\r\n                    </colgroup>\r\n\r\n                    <ng-container *ngIf=\"!serializedValue || !serializedValue.length\">\r\n                        <tbody class=\"farris-treetable-tbody\">\r\n                            <tr class=\"f-table-norecords-row\">\r\n                                <td [attr.align]=\"'center'\" class=\"farris-treetable-emptydata\" [attr.colspan]=\"columns.length\">\r\n                                    <div class=\"f-table-norecords-content\" >\r\n                                        {{ 'treetable.emptyMessage' | locale }}\r\n                                    </div>\r\n                                </td>\r\n                            </tr>\r\n                        </tbody>\r\n                    </ng-container>\r\n\r\n                    <ng-container *ngIf=\"serializedValue && serializedValue.length\">\r\n                        <ng-container *ngIf=\"bodyTemplate\">\r\n                            <tbody class=\"farris-treetable-tbody\" treeTableBody [columns]=\"columns\" [template]=\"bodyTemplate\"></tbody>\r\n                        </ng-container>\r\n\r\n                        <ng-container #defaultBodyTemplate *ngIf=\"!bodyTemplate\">\r\n                            <ng-container *ngTemplateOutlet=\"tbody\"></ng-container>\r\n                        </ng-container>\r\n                    </ng-container>\r\n                </table>\r\n                <div *ngIf=\"bottomHideHeight && virtualized\" [style.height.px]=\"bottomHideHeight\"> </div>\r\n            </perfect-scrollbar>\r\n        </div>\r\n\r\n        <!-- \u5206\u9875\u6761 -->\r\n        <div *ngIf=\"pagination\" #tablePager class=\"farris-table-pager\" [ngStyle]=\" { 'opacity': (disabled ? 0.6 : 1), 'pointer-events': (disabled? 'none': '')  }\">\r\n            <pagination-controls #pager [id]=\"paginationOptions?.id\"\r\n                [maxSize]=\"pagerLabelSize\" [directionLinks]=\"true\"\r\n                [autoHide]=\"false\" [responsive]=\"true\"\r\n                [previousLabel]=\"' '\" [nextLabel]=\"' '\"\r\n                [showPageInfo]=\"showPageInfo\" [showPageNumber]=\"showPageNumber\" [showPageList]=\"showPageList\"\r\n                (pageChange)=\"onPageChange($event)\" [showGotoInput]=\"showGotoInput\"\r\n                (pageSizeChange)=\"onPageSizeChange($event)\"\r\n                >\r\n\r\n                \r\n            </pagination-controls>\r\n        </div>\r\n\r\n        <div #resizerHelper class=\"column-resizer-helper\" *ngIf=\"resizableColumns\"></div>\r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #nodespagerbar let-ctx>\r\n    <nodes-pager [context]=\"ctx\" [disabled]=\"disabled\" (pageChange)=\"onChildsPageChanged($event)\" [showTotal]=\"showTotalForChildren\"></nodes-pager>\r\n</ng-template>\r\n\r\n\r\n\r\n<div class=\"farris-treetable\" [class.table-bordered]=\"showBorder\" [attr.id]=\"id\"\r\n    [class.farris-treetable-showlines]=\"showLinesOnHover && showLines\" \r\n    [class.farris-treetable-nowrap]=\"!nowrap\"  *ngIf=\"!fixedHeader; else scorllview\">\r\n    <table class=\"table\" [style.tableLayout]=\"autoWidth? 'auto': 'fixed'\"\r\n        [ngClass]=\"{'table-striped': striped, 'table-hover': (hovered && serializedValue && serializedValue.length), 'f-table-norecords': (!serializedValue || !serializedValue.length),\r\n        'h-100': (!serializedValue || !serializedValue.length) }\">\r\n        <thead class=\"farris-treetable-thead\" *ngIf=\"showHeader\" [class.header-wrap]=\"headerWrap\">\r\n            <ng-container *ngIf=\"!headerTemplate && columns\">\r\n                <th *ngFor=\"let col of columns;let isFirst=first\" [style.textAlign]=\"col!.hAlign || 'left'\" class=\"treetable-header-cell\" [attr.field]=\"col.field\">\r\n                    <div class=\"d-flex\">\r\n                        <ng-container *ngIf=\"!singleSelect && showCheckAll && isFirst && showCheckbox\">\r\n                            <tt-header-checkbox #allCheckbox class=\"f-cmp-treetable-toggler\"></tt-header-checkbox>\r\n                        </ng-container>\r\n\r\n                        <ng-container *ngIf=\"!col.headTemplate && !col.headComponentType\">\r\n                            <div class=\"flex-grow-1 text\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\">{{col.title}}</div>\r\n                        </ng-container>\r\n        \r\n                        <ng-container *ngIf=\"col.headTemplate && !col.headComponentType\"\r\n                            [ngTemplateOutlet]=\"col.headTemplate\"\r\n                            [ngTemplateOutletContext]=\"{$implicit: { column: col}}\">\r\n                        </ng-container>\r\n                        <div class=\"flex-grow-1 text\" *ngIf=\"col.headerComponentType\" [component-template]=\"col\" [templateType]=\"'head'\" [ctx]=\" { column: col}\" [style.whiteSpace]=\"headerWrap ? 'pre-wrap': ''\"></div>\r\n                    </div>\r\n                </th>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"headerTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"headerTemplate; context: {$implicit: columns}\"></ng-container>\r\n            </ng-container>\r\n        </thead>\r\n        <ng-container *ngIf=\"serializedValue && serializedValue.length\">\r\n             <!-- \u5BA2\u6237\u7AEF\u67E5\u8BE2\u5B9A\u4F4D\u5DE5\u5177\u6761 -->\r\n             <find-input *ngIf=\"showFindInput\" [current]=\"findCurrent\" [count]=\"findCount\"\r\n             (valueChanged)=\"findKeyWords($event)\" (close)=\"closeFindPanel()\"  [columns]=\"columns\"\r\n             (enterHandler)=\"nextFindValue($event)\"></find-input>\r\n            <ng-container *ngIf=\"bodyTemplate\">\r\n                <tbody class=\"farris-treetable-tbody\" treeTableBody [columns]=\"columns\" [template]=\"bodyTemplate\">\r\n                </tbody>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"!bodyTemplate\">\r\n                <ng-container *ngTemplateOutlet=\"tbody\"></ng-container>\r\n            </ng-container>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"!serializedValue || !serializedValue.length\">\r\n            <tbody class=\"farris-treetable-tbody\">\r\n                <tr class=\"f-table-norecords-row\" style=\"height: 200px\">\r\n                    <td [attr.align]=\"'center'\" class=\"farris-treetable-emptydata\" [attr.colspan]=\"columns.length\">\r\n                        <div class=\"f-table-norecords-content\" >\r\n                            {{ 'treetable.emptyMessage' | locale }}\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </ng-container>\r\n    </table>\r\n</div>\r\n\r\n",
                exportAs: 'treeTable',
                encapsulation: ViewEncapsulation.None,
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [`
        .farris-treetable {
            position: relative;
        }
        .resizable-column {
            background-clip: padding-box;
            position: relative;
        }
        .column-resizer {
            display: block;
            position: absolute!important;
            top: 0;
            right: 0;
            margin: 0;
            width: .5em;
            height: 100%;
            padding: 0;
            cursor: col-resize;
            border: 1px solid transparent;
        }
        .column-resizer-helper {
            width: 1px;
            position: absolute;
            z-index: 10;
            display: none;
            border-right: 1px dashed #1890ff;
        }

        .farris-treetable-disabled .farris-treetable-body .table tr{
            opacity: 0.4;
            cursor: not-allowed;
        }
        .farris-treetable-disabled .table tr.farris-table-selectedrow{
            opacity: 1;
            cursor: default;
        }

        .custom-checkbox .custom-control-input:indeterminate~.custom-control-label::after {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 4'%3e%3cpath stroke='%23fff' d='M0 2h4'/%3e%3c/svg%3e");
            background-color: #1890ff;
        }
        .unselectable-text {
            -webkit-user-select: none;
            -moz-user-select: none;
            -o-user-select: none;
            -ms-user-select: none;
            user-select: none
        }
        .search-highlight {
            background-color: #FFFF1F;
        }
        .search-highlight.active{
            background-color: #FF901C;
        }

        .f-treetable--fixed-columns .ps__rail-x, .f-treetable--fixed-columns .ps__rail-y {
            z-index: 18;
        }
    `]
            }] }
];
/** @nocollapse */
TreeTableComponent.ctorParameters = () => [
    { type: TreetableService },
    { type: ElementRef },
    { type: ResizeService },
    { type: Renderer2 },
    { type: CommonUtils },
    { type: ColumnFormatService },
    { type: TTHotkeys },
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Injector }
];
TreeTableComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    showFilterBar: [{ type: Input }],
    enableFilterRow: [{ type: Input }],
    showSearchField: [{ type: Input }],
    headerHeight: [{ type: Input }],
    headerWrap: [{ type: Input }],
    rowHeight: [{ type: Input }],
    columns: [{ type: Input }],
    groupColumns: [{ type: Input }],
    useGroupHeader: [{ type: Input }],
    fitColumns: [{ type: Input }],
    autoFitColumns: [{ type: Input }],
    searchFields: [{ type: Input }],
    allColumnsTitle: [{ type: Input }],
    searchAnyField: [{ type: Input }],
    showLines: [{ type: Input }],
    showLinesOnHover: [{ type: Input }],
    multiSelect: [{ type: Input }],
    singleSelect: [{ type: Input }],
    showCheckbox: [{ type: Input }],
    idField: [{ type: Input }],
    showBorder: [{ type: Input }],
    showCheckAll: [{ type: Input }],
    showHeader: [{ type: Input }],
    striped: [{ type: Input }],
    hovered: [{ type: Input }],
    disabled: [{ type: Input }],
    disabledRow: [{ type: Input }],
    loadDataType: [{ type: Input }],
    fixedHeader: [{ type: Input }],
    checkOnSelect: [{ type: Input }],
    selectOnCheck: [{ type: Input }],
    onlySelectSelf: [{ type: Input }],
    resizableColumns: [{ type: Input }],
    fit: [{ type: Input }],
    cascadeCheck: [{ type: Input }],
    cascadeDown: [{ type: Input }],
    cascadeUp: [{ type: Input }],
    emptyMessage: [{ type: Input }],
    indentSpacing: [{ type: Input }],
    keepSelect: [{ type: Input }],
    virtualized: [{ type: Input }],
    onlySelectLeaf: [{ type: Input }],
    showIcon: [{ type: Input }],
    leafIcon: [{ type: Input }],
    expandIcon: [{ type: Input }],
    collapseIcon: [{ type: Input }],
    foldIcon: [{ type: Input }],
    unfoldIcon: [{ type: Input }],
    useIconFromData: [{ type: Input }],
    whenDataIconEmptyUseDefault: [{ type: Input }],
    iconField: [{ type: Input }],
    iconCls: [{ type: Input }],
    remoteSort: [{ type: Input }],
    sortName: [{ type: Input }],
    sortOrder: [{ type: Input }],
    multiSort: [{ type: Input }],
    beforeSortColumn: [{ type: Input }],
    rowStyler: [{ type: Input }],
    cellStyler: [{ type: Input }],
    enableFindText: [{ type: Input }],
    findField: [{ type: Input }],
    expandLevel: [{ type: Input }],
    selectValue: [{ type: Input }],
    selectValueChange: [{ type: Output }],
    dblClickExpand: [{ type: Input }],
    useDblClick: [{ type: Input }],
    selectValues: [{ type: Input }],
    selectValuesChange: [{ type: Output }],
    nowrap: [{ type: Input }],
    checkValues: [{ type: Input }],
    checkValuesChange: [{ type: Output }],
    beforeNodeSelected: [{ type: Input }],
    beforeNodeUnSelected: [{ type: Input }],
    beforeNodeChecked: [{ type: Input }],
    beforeNodeUnChecked: [{ type: Input }],
    beforeCheckAll: [{ type: Input }],
    beforeUnCheckAll: [{ type: Input }],
    beforeClickNode: [{ type: Input }],
    pagination: [{ type: Input }],
    paginationForChildren: [{ type: Input }],
    pagerViewMode: [{ type: Input }],
    pagerOnServer: [{ type: Input }],
    pageList: [{ type: Input }],
    pageIndex: [{ type: Input }],
    pageSize: [{ type: Input }],
    pagerHeight: [{ type: Input }],
    showPageList: [{ type: Input }],
    showPageInfo: [{ type: Input }],
    showPageNumber: [{ type: Input }],
    pagerLabelSize: [{ type: Input }],
    showGotoInput: [{ type: Input }],
    showTotalForChildren: [{ type: Input }],
    total: [{ type: Input }],
    enableContextMenu: [{ type: Input }],
    contextMenuItems: [{ type: Input }],
    beforeShowContextMenu: [{ type: Input }],
    pageSizeChanged: [{ type: Output }],
    pageChanged: [{ type: Output }],
    columnSorted: [{ type: Output }],
    nodeSelected: [{ type: Output }],
    nodeUnSelect: [{ type: Output }],
    nodeChecked: [{ type: Output }],
    nodeUnChecked: [{ type: Output }],
    checkAll: [{ type: Output }],
    unCheckAll: [{ type: Output }],
    search: [{ type: Output }],
    dblClick: [{ type: Output }],
    loadedData: [{ type: Output }],
    expand: [{ type: Output }],
    collapse: [{ type: Output }],
    expandAllNodes: [{ type: Output }],
    collapseAllNodes: [{ type: Output }],
    appendNew: [{ type: Output }],
    removed: [{ type: Output }],
    updated: [{ type: Output }],
    clearSearchValue: [{ type: Output }],
    cellClick: [{ type: Output }],
    childsPageChanged: [{ type: Output }],
    searchValueChange: [{ type: Output }],
    loadedTimer: [{ type: Input }],
    data: [{ type: Input }],
    autoWidth: [{ type: Input }],
    templates: [{ type: ContentChildren, args: [FarrisTemplateDirective,] }],
    columnsRef: [{ type: ContentChildren, args: [TreeTableColumnDirective,] }],
    headerBox: [{ type: ViewChild, args: ['headerBox',] }],
    resizerHelperVC: [{ type: ViewChild, args: ['resizerHelper',] }],
    headerTable: [{ type: ViewChild, args: ['headerTable',] }],
    bodyTable: [{ type: ViewChild, args: ['bodyTable',] }],
    inputGroup: [{ type: ViewChild, args: ['inputGroup',] }],
    psRef: [{ type: ViewChild, args: [PerfectScrollbarComponent,] }],
    allCheckbox: [{ type: ViewChild, args: ['allCheckbox',] }],
    nodesPagerBar: [{ type: ViewChild, args: ['nodespagerbar',] }],
    ctxMenu: [{ type: ViewChild, args: [FarrisContextMenuDirective,] }],
    onResized: [{ type: HostListener, args: ['window:resize',] }]
};
if (false) {
    /** @type {?} */
    TreeTableComponent.prototype.id;
    /**
     * 宽度
     * @type {?}
     */
    TreeTableComponent.prototype.width;
    /**
     * 高度
     * @type {?}
     */
    TreeTableComponent.prototype.height;
    /** @type {?} */
    TreeTableComponent.prototype.showFilterBar;
    /**
     * 显示过滤行
     * @type {?}
     */
    TreeTableComponent.prototype.enableFilterRow;
    /**
     * 显示查询字段
     * @type {?}
     */
    TreeTableComponent.prototype.showSearchField;
    /** @type {?} */
    TreeTableComponent.prototype.headerHeight;
    /**
     * 表头折行
     * @type {?}
     */
    TreeTableComponent.prototype.headerWrap;
    /**
     * 行高
     * @type {?}
     */
    TreeTableComponent.prototype.rowHeight;
    /**
     * 列信息
     * @type {?}
     */
    TreeTableComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._groupColumns;
    /**
     * 启用多表头
     * @type {?}
     */
    TreeTableComponent.prototype.useGroupHeader;
    /** @type {?} */
    TreeTableComponent.prototype.fitColumns;
    /** @type {?} */
    TreeTableComponent.prototype.autoFitColumns;
    /** @type {?} */
    TreeTableComponent.prototype.searchFields;
    /** @type {?} */
    TreeTableComponent.prototype.allColumnsTitle;
    /** @type {?} */
    TreeTableComponent.prototype.searchAnyField;
    /**
     * 显示连接线，默认为 false
     * @type {?}
     */
    TreeTableComponent.prototype.showLines;
    /** @type {?} */
    TreeTableComponent.prototype.showLinesOnHover;
    /**
     * 是否启用多选。 默认为单选
     * @type {?}
     */
    TreeTableComponent.prototype.multiSelect;
    /** @type {?} */
    TreeTableComponent.prototype.singleSelect;
    /**
     * 启用多选后，是否显示checkbox
     * @type {?}
     */
    TreeTableComponent.prototype.showCheckbox;
    /**
     * 主键字段
     * @type {?}
     */
    TreeTableComponent.prototype.idField;
    /**
     * 显示边框线
     * @type {?}
     */
    TreeTableComponent.prototype.showBorder;
    /** @type {?} */
    TreeTableComponent.prototype.showCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.showHeader;
    /**
     * 启用斑马线
     * @type {?}
     */
    TreeTableComponent.prototype.striped;
    /**
     * 启用鼠标划过效果
     * @type {?}
     */
    TreeTableComponent.prototype.hovered;
    /**
     * 禁用。 禁用时不允许选中行
     * @type {?}
     */
    TreeTableComponent.prototype.disabled;
    /**
     * 禁卡节点选中
     * @type {?}
     */
    TreeTableComponent.prototype.disabledRow;
    /**
     * 数据加载方式; 默认值 为 all
     * - all: 全部加载
     * - async: 分层加载
     * @type {?}
     */
    TreeTableComponent.prototype.loadDataType;
    /**
     * 固定表头
     * @type {?}
     */
    TreeTableComponent.prototype.fixedHeader;
    /**
     * 当多选时，选中当前行并钩选
     * @type {?}
     */
    TreeTableComponent.prototype.checkOnSelect;
    /**
     * 当多选时，钩选并选中当前行
     * @type {?}
     */
    TreeTableComponent.prototype.selectOnCheck;
    /**
     * 启用多选时，此属性为true 时，仅当前行选中
     * @type {?}
     */
    TreeTableComponent.prototype.onlySelectSelf;
    /**
     * 启用列宽调整
     * @type {?}
     */
    TreeTableComponent.prototype.resizableColumns;
    /**
     * 设置为true时自适应父容的尺寸
     * @type {?}
     */
    TreeTableComponent.prototype.fit;
    /**
     * 启用级联选中功能
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeCheck;
    /**
     * 向下级联选中
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeDown;
    /**
     * 向上级联选中
     * @type {?}
     */
    TreeTableComponent.prototype.cascadeUp;
    /**
     * 空数据时，显示的提示文本
     * @type {?}
     */
    TreeTableComponent.prototype.emptyMessage;
    /**
     * 缩进间距，默认为 16px
     * @type {?}
     */
    TreeTableComponent.prototype.indentSpacing;
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     * @type {?}
     */
    TreeTableComponent.prototype.keepSelect;
    /**
     * 虚拟加载
     * @type {?}
     */
    TreeTableComponent.prototype.virtualized;
    /**
     * 仅允许选择叶子节点
     * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
     * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
     * - no: 允许选择所有节点；服务器端设置失效
     * @type {?}
     */
    TreeTableComponent.prototype.onlySelectLeaf;
    /**
     * 显示图标
     * @type {?}
     */
    TreeTableComponent.prototype.showIcon;
    /**
     * 叶子节点图标
     * @type {?}
     */
    TreeTableComponent.prototype.leafIcon;
    /**
     * 节点展开图标
     * @type {?}
     */
    TreeTableComponent.prototype.expandIcon;
    /**
     * 节点折叠图标
     * @type {?}
     */
    TreeTableComponent.prototype.collapseIcon;
    /** @type {?} */
    TreeTableComponent.prototype.foldIcon;
    /** @type {?} */
    TreeTableComponent.prototype.unfoldIcon;
    /**
     * 启用节点图标从数据中获取。 默认为 false
     * @type {?}
     */
    TreeTableComponent.prototype.useIconFromData;
    /**
     * 当数据源中icon未设置时使用内置ICON. 默认为 true
     * @type {?}
     */
    TreeTableComponent.prototype.whenDataIconEmptyUseDefault;
    /**
     * 从数据源字段中获取图标
     * @type {?}
     */
    TreeTableComponent.prototype.iconField;
    /**
     * 图标自定义样式
     * @type {?}
     */
    TreeTableComponent.prototype.iconCls;
    /**
     * 启用远端排序
     * @type {?}
     */
    TreeTableComponent.prototype.remoteSort;
    /**
     * 排序字段
     * @type {?}
     */
    TreeTableComponent.prototype.sortName;
    /**
     * 排序方式 asc | desc
     * @type {?}
     */
    TreeTableComponent.prototype.sortOrder;
    /**
     * 允许多列排序
     * @type {?}
     */
    TreeTableComponent.prototype.multiSort;
    /** @type {?} */
    TreeTableComponent.prototype.beforeSortColumn;
    /** @type {?} */
    TreeTableComponent.prototype.rowStyler;
    /** @type {?} */
    TreeTableComponent.prototype.cellStyler;
    /**
     * 启用前端文本查找
     * @type {?}
     */
    TreeTableComponent.prototype.enableFindText;
    /**
     * 文本查询字段, 弃用
     * @type {?}
     */
    TreeTableComponent.prototype.findField;
    /** @type {?} */
    TreeTableComponent.prototype.expandLevel;
    /** @type {?} */
    TreeTableComponent.prototype.selectValue;
    /** @type {?} */
    TreeTableComponent.prototype.selectValueChange;
    /**
     * 启用双击展开节点
     * @type {?}
     */
    TreeTableComponent.prototype.dblClickExpand;
    /** @type {?} */
    TreeTableComponent.prototype.useDblClick;
    /**
     * 选中节点ID数组
     * @type {?}
     */
    TreeTableComponent.prototype.selectValues;
    /** @type {?} */
    TreeTableComponent.prototype.selectValuesChange;
    /**
     * 是否禁止折行，默认不折行
     * @type {?}
     */
    TreeTableComponent.prototype.nowrap;
    /** @type {?} */
    TreeTableComponent.prototype.checkValues;
    /** @type {?} */
    TreeTableComponent.prototype.checkValuesChange;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeSelected;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeUnSelected;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeChecked;
    /** @type {?} */
    TreeTableComponent.prototype.beforeNodeUnChecked;
    /** @type {?} */
    TreeTableComponent.prototype.beforeCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.beforeUnCheckAll;
    /** @type {?} */
    TreeTableComponent.prototype.beforeClickNode;
    /**
     * 分页信息
     * @type {?}
     */
    TreeTableComponent.prototype.pagination;
    /**
     * 分页加载子节点数据
     * @type {?}
     */
    TreeTableComponent.prototype.paginationForChildren;
    /**
     * 分页条显示模式， default, simple
     * @type {?}
     */
    TreeTableComponent.prototype.pagerViewMode;
    /**
     * 启用服务器端分页
     * @type {?}
     */
    TreeTableComponent.prototype.pagerOnServer;
    /**
     * 每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.pageList;
    /**
     * 当前页码
     * @type {?}
     */
    TreeTableComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.pageSize;
    /**
     * 分页区高度
     * @type {?}
     */
    TreeTableComponent.prototype.pagerHeight;
    /**
     * 显示每页记录数
     * @type {?}
     */
    TreeTableComponent.prototype.showPageList;
    /**
     * 显示分页信息
     * @type {?}
     */
    TreeTableComponent.prototype.showPageInfo;
    /**
     * 显示页码
     * @type {?}
     */
    TreeTableComponent.prototype.showPageNumber;
    /**
     * 显示页码最大数量
     * @type {?}
     */
    TreeTableComponent.prototype.pagerLabelSize;
    /**
     * 显示页码输入框
     * @type {?}
     */
    TreeTableComponent.prototype.showGotoInput;
    /**
     * 子节点分页是否显示总记录数，默认 false
     * @type {?}
     */
    TreeTableComponent.prototype.showTotalForChildren;
    /**
     * 总记录数
     * @type {?}
     */
    TreeTableComponent.prototype.total;
    /** @type {?} */
    TreeTableComponent.prototype.enableContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.contextMenuItems;
    /** @type {?} */
    TreeTableComponent.prototype.beforeShowContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.pageSizeChanged;
    /** @type {?} */
    TreeTableComponent.prototype.pageChanged;
    /**
     * 排序后
     * @type {?}
     */
    TreeTableComponent.prototype.columnSorted;
    /**
     * 选中事件
     * @type {?}
     */
    TreeTableComponent.prototype.nodeSelected;
    /**
     * 取消选中事件
     * @type {?}
     */
    TreeTableComponent.prototype.nodeUnSelect;
    /**
     * 钩选
     * @type {?}
     */
    TreeTableComponent.prototype.nodeChecked;
    /**
     * 取消钩选
     * @type {?}
     */
    TreeTableComponent.prototype.nodeUnChecked;
    /**
     * 全选事件
     * @type {?}
     */
    TreeTableComponent.prototype.checkAll;
    /**
     * 取消全选
     * @type {?}
     */
    TreeTableComponent.prototype.unCheckAll;
    /**
     * 查询
     * @type {?}
     */
    TreeTableComponent.prototype.search;
    /** @type {?} */
    TreeTableComponent.prototype.dblClick;
    /** @type {?} */
    TreeTableComponent.prototype.loadedData;
    /** @type {?} */
    TreeTableComponent.prototype.expand;
    /** @type {?} */
    TreeTableComponent.prototype.collapse;
    /** @type {?} */
    TreeTableComponent.prototype.expandAllNodes;
    /** @type {?} */
    TreeTableComponent.prototype.collapseAllNodes;
    /** @type {?} */
    TreeTableComponent.prototype.appendNew;
    /** @type {?} */
    TreeTableComponent.prototype.removed;
    /** @type {?} */
    TreeTableComponent.prototype.updated;
    /** @type {?} */
    TreeTableComponent.prototype.clearSearchValue;
    /** @type {?} */
    TreeTableComponent.prototype.cellClick;
    /** @type {?} */
    TreeTableComponent.prototype.childsPageChanged;
    /** @type {?} */
    TreeTableComponent.prototype.searchValueChange;
    /** @type {?} */
    TreeTableComponent.prototype.loadedTimer;
    /** @type {?} */
    TreeTableComponent.prototype.serializedValue;
    /** @type {?} */
    TreeTableComponent.prototype._data;
    /** @type {?} */
    TreeTableComponent.prototype.isLoadNewDataSetEmpty;
    /**
     * 根据内容自动宽度，默认 false;
     * 此属性开启后，自动列宽失效
     * @type {?}
     */
    TreeTableComponent.prototype.autoWidth;
    /** @type {?} */
    TreeTableComponent.prototype.templates;
    /** @type {?} */
    TreeTableComponent.prototype.columnsRef;
    /** @type {?} */
    TreeTableComponent.prototype.headerBox;
    /** @type {?} */
    TreeTableComponent.prototype.resizerHelperVC;
    /** @type {?} */
    TreeTableComponent.prototype.headerTable;
    /** @type {?} */
    TreeTableComponent.prototype.bodyTable;
    /** @type {?} */
    TreeTableComponent.prototype.inputGroup;
    /** @type {?} */
    TreeTableComponent.prototype.psRef;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.headerCheckboxCmp;
    /** @type {?} */
    TreeTableComponent.prototype.nodesPagerBar;
    /** @type {?} */
    TreeTableComponent.prototype.ctxMenu;
    /**
     * 表头模板
     * @type {?}
     */
    TreeTableComponent.prototype.headerTemplate;
    /**
     * 表体模板
     * @type {?}
     */
    TreeTableComponent.prototype.bodyTemplate;
    /**
     * 选中项集合
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._selections;
    /**
     * 选中项索引
     * @type {?}
     */
    TreeTableComponent.prototype.selectRowIndex;
    /**
     * 选中当前行
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._selectedRow;
    /**
     * 钩选的记录集合
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._checkeds;
    /** @type {?} */
    TreeTableComponent.prototype.containerElement;
    /** @type {?} */
    TreeTableComponent.prototype.lastResizerHelperX;
    /** @type {?} */
    TreeTableComponent.prototype.searchData;
    /** @type {?} */
    TreeTableComponent.prototype.scorllBodyHeight;
    /** @type {?} */
    TreeTableComponent.prototype.searchHandle;
    /** @type {?} */
    TreeTableComponent.prototype.searchButtonText;
    /**
     * 显示查询工具条
     * @type {?}
     */
    TreeTableComponent.prototype.showFindInput;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.isDataChanged;
    /** @type {?} */
    TreeTableComponent.prototype.scrollLoader;
    /** @type {?} */
    TreeTableComponent.prototype.topHideHeight;
    /** @type {?} */
    TreeTableComponent.prototype.bottomHideHeight;
    /** @type {?} */
    TreeTableComponent.prototype.state;
    /**
     * 待查询的文本
     * @type {?}
     */
    TreeTableComponent.prototype.findValue;
    /**
     * 结果总数
     * @type {?}
     */
    TreeTableComponent.prototype.findCount;
    /**
     * 当前索引
     * @type {?}
     */
    TreeTableComponent.prototype.findCurrent;
    /**
     * 存储文本查询结果
     * @type {?}
     */
    TreeTableComponent.prototype.findResult;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.findKeysHandler;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._hotKeys;
    /** @type {?} */
    TreeTableComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.idService;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.styleSheetId;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.styleElement;
    /** @type {?} */
    TreeTableComponent.prototype.fast;
    /** @type {?} */
    TreeTableComponent.prototype.paginationOptions;
    /** @type {?} */
    TreeTableComponent.prototype.selectNodeChangedSubject;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype._UUID;
    /** @type {?} */
    TreeTableComponent.prototype.fixedColumns;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.farrisInstances;
    /** @type {?} */
    TreeTableComponent.prototype.difference;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.debugSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.filterRowConditions;
    /** @type {?} */
    TreeTableComponent.prototype.onBeforeShowContextMenu;
    /** @type {?} */
    TreeTableComponent.prototype.ttService;
    /** @type {?} */
    TreeTableComponent.prototype.el;
    /** @type {?} */
    TreeTableComponent.prototype.resizeSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.renderer;
    /** @type {?} */
    TreeTableComponent.prototype.utils;
    /** @type {?} */
    TreeTableComponent.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.shortcuts;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    TreeTableComponent.prototype.injector;
}
export class TTBodyComponent {
    /**
     * @param {?} tt
     */
    constructor(tt) {
        this.tt = tt;
    }
}
TTBodyComponent.decorators = [
    { type: Component, args: [{
                selector: '[treeTableBody]',
                template: `
        <ng-template ngFor let-serializedNode let-rowIndex="index" [ngForOf]="tt.serializedValue">
            <ng-container *ngIf="serializedNode.visible">
                <ng-container
                    *ngTemplateOutlet="template;
                        context: {$implicit: serializedNode, node: serializedNode.node,
                        rowData: serializedNode.node.data, rowIndex: rowIndex, columns: columns}">
                </ng-container>
            </ng-container>
        </ng-template>
    `
            }] }
];
/** @nocollapse */
TTBodyComponent.ctorParameters = () => [
    { type: TreeTableComponent }
];
TTBodyComponent.propDecorators = {
    columns: [{ type: Input }],
    template: [{ type: Input }]
};
if (false) {
    /**
     * 列集合
     * @type {?}
     */
    TTBodyComponent.prototype.columns;
    /**
     * 表体模板
     * @type {?}
     */
    TTBodyComponent.prototype.template;
    /** @type {?} */
    TTBodyComponent.prototype.tt;
}
// [style.marginLeft]="rowNode.level * 16 + 'px'"
/**
 * 树节点展开折叠
 */
export class TreeTableTogglerComponent {
    /**
     * @param {?} tt
     * @param {?} ngzone
     * @param {?} render
     */
    constructor(tt, ngzone, render) {
        this.tt = tt;
        this.ngzone = ngzone;
        this.render = render;
        this.cls = true;
        this.showLines = false;
        this.indentSpacing = 16;
        this.treeNodeIcon = {};
        this.isShowTriangle = false;
        this.noChilds = false;
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    get offsetWidth() {
        return this.togglerEl.nativeElement.parentElement.offsetWidth;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.treeNodeIcon = this.tt.getTreeIcon(this.rowNode.node);
        this.isShowTriangle = this.showTriangle();
        this.noChilds = this.hasChildren();
        /** @type {?} */
        const expandSub = this.tt.expand.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (this.rowNode.id === node.data[this.tt.idField]) {
                this.updateIcon(this.rowNode.node);
                if (this.tt.psRef) {
                    this.tt.psRef.directiveRef.update();
                }
                this.tt.detectChanges();
            }
        }));
        /** @type {?} */
        const collapseSub = this.tt.collapse.subscribe((/**
         * @param {?} node
         * @return {?}
         */
        (node) => {
            if (this.rowNode.id === node.data[this.tt.idField]) {
                this.updateIcon(this.rowNode.node);
                if (this.tt.psRef) {
                    this.tt.psRef.directiveRef.update();
                }
                this.tt.detectChanges();
            }
        }));
        /** @type {?} */
        const addNewSub = this.tt.appendNew.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.parent) {
                if (this.rowNode.id === e.parent.data[this.tt.idField]) {
                    if (this.rowNode.node.leaf || this.rowNode.node.leaf === undefined) {
                        this.rowNode.node.leaf = false;
                    }
                }
                this.updateIcon(this.rowNode.node);
            }
        }));
        this.subscriptions = [expandSub, collapseSub, addNewSub];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.showLines && !changes.showLines.isFirstChange()) {
            if (this.showLines) {
                this.render.setStyle(this.togglerEl.nativeElement, 'display', this.isShowTriangle ? '' : 'none');
            }
            else {
                this.render.removeStyle(this.togglerEl.nativeElement, 'display');
            }
            this.reSetLines();
        }
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.updateIcon(this.rowNode.node);
            // if (changes.rowNode.currentValue.node.children) {
            //     if (!!changes.rowNode.currentValue.node.children.length !== !!changes.rowNode.previousValue.node.children.length) {
            //         this.reSetLines();
            //     }
            // }
            if (this.tt.showLines) {
                /** @type {?} */
                let currenChildrenLength = 0;
                /** @type {?} */
                let previousChildrenLength = 0;
                if (changes.rowNode.currentValue && changes.rowNode.currentValue.node.children) {
                    currenChildrenLength = changes.rowNode.currentValue.node.children.length;
                }
                if (changes.rowNode.previousValue && changes.rowNode.previousValue.node.children) {
                    previousChildrenLength = changes.rowNode.previousValue.node.children.length;
                }
                if (currenChildrenLength != previousChildrenLength || (!currenChildrenLength && !previousChildrenLength)) {
                    this.reSetLines();
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.tt.bodyTemplate && this.showLines) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.reSetLines();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // this.isShowTriangle = this.showTriangle();
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        // if (this.tt && this.tt.data) {
        //     this.reSetLines();
        // }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unAllSubscriptions();
    }
    /**
     * @private
     * @return {?}
     */
    unAllSubscriptions() {
        this.subscriptions.forEach((/**
         * @param {?} s
         * @return {?}
         */
        s => {
            s.unsubscribe();
        }));
        this.subscriptions = [];
    }
    /**
     * @return {?}
     */
    hasChildren() {
        /** @type {?} */
        const tn = this.rowNode.node;
        return tn.leaf === false || this.rowNode.level !== 0 || (tn.children && tn.children.length > 0);
    }
    /**
     * @return {?}
     */
    showTriangle() {
        /** @type {?} */
        const tn = this.rowNode.node;
        if (this.tt.loadDataType === 'all') {
            return tn.leaf === false || (tn.children && tn.children.length > 0);
        }
        else {
            return tn.leaf === false;
        }
    }
    /**
     * @return {?}
     */
    reSetLines() {
        if (this.togglerEl) {
            /** @type {?} */
            const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');
            if (parentEl) {
                /** @type {?} */
                const lineEls = parentEl.querySelectorAll('.treetable-lines');
                for (let k = 0; k < lineEls.length; k++) {
                    lineEls[k].remove();
                }
            }
        }
        this._renderLines();
    }
    /**
     * @private
     * @return {?}
     */
    _renderLines() {
        if (!this.tt.bodyTemplate) {
            if (this.showLines) {
                this.renderLines();
            }
            else {
                // this.noLineStyle();
            }
        }
        else {
            /*
            if (this.togglerEl) {
                if (this.togglerEl.nativeElement.closest('tr')) {
                    const tds = this.togglerEl.nativeElement.closest('tr').querySelectorAll('td');
                    Array.from(tds).forEach(n => {
                        this.render.setStyle(n, 'padding', '0.25rem 0.75rem');
                    });
                }
            } */
        }
    }
    /**
     * @private
     * @return {?}
     */
    noLineStyle() {
        // this.cls = false;
        if (this.togglerEl) {
            // this.render.setStyle(this.togglerEl.nativeElement, 'margin-left', `${this.rowNode.level * this.indentSpacing}px`);
            this.render.setStyle(this.togglerEl.nativeElement, 'visibility', this.isShowTriangle ? 'visible' : 'hidden');
            this.render.removeStyle(this.togglerEl.nativeElement, 'display');
        }
    }
    /**
     * @private
     * @return {?}
     */
    renderLines() {
        /** @type {?} */
        const len = this.rowNode.level;
        if (!this.togglerEl) {
            return;
        }
        /** @type {?} */
        const parentEl = this.togglerEl.nativeElement.closest('.treetable-cell-content');
        if (!parentEl) {
            return;
        }
        /** @type {?} */
        const referEl = this.togglerEl.nativeElement.parentElement;
        if (len === 0 && !this.showTriangle()) {
            this.createLeafNodeLines(referEl, parentEl, true);
        }
        for (let i = 0; i < len; i++) {
            parentEl.insertBefore(this.newLineElement(), referEl);
            /** @type {?} */
            const nearLine = this.newLineElement(false);
            parentEl.insertBefore(nearLine, referEl);
            /** @type {?} */
            const isLeaf = !this.showTriangle();
            if (isLeaf && i === len - 1) {
                this.createLeafNodeLines(referEl, parentEl);
            }
        }
    }
    /**
     * @private
     * @param {?=} border
     * @return {?}
     */
    newLineElement(border = true) {
        /** @type {?} */
        const newLineEl = this.render.createElement('div');
        this.render.addClass(newLineEl, 'treetable-lines');
        if (this.showLines) {
            if (border) {
                this.render.addClass(newLineEl, 'treetable-lines-border-color');
            }
        }
        return newLineEl;
    }
    /**
     * 构造 ∟ or ├
     * @private
     * @param {?} containerEl
     * @param {?} parentEl
     * @param {?=} isTopNode
     * @return {?}
     */
    createLeafNodeLines(containerEl, parentEl, isTopNode = false) {
        // ├
        // <div class="treetable-lines" style="border-color: rgb(204, 204, 204);"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div class="normal"></div>
        // </div>
        // ├
        // <div class="treetable-lines" style="border-color: rgb(204, 204, 204);"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div class="normal"></div>
        // </div>
        // ∟
        // <div class="treetable-lines" style="border-color: transparent"></div>
        // <div class="treetable-lines treetable-lines-leaf" style="border-color: transparent;">
        //     <div style="corner"></div>
        // </div>
        /** @type {?} */
        const l1 = this.newLineElement();
        /** @type {?} */
        const l2 = this.newLineElement(false);
        this.render.addClass(l2, 'treetable-lines-leaf');
        /** @type {?} */
        const dessert = this.render.createElement('div');
        if (this.showLines) {
            /** @type {?} */
            let cls = 'normal';
            if (this.rowNode.last) {
                cls = 'corner';
                this.render.removeClass(l1, 'treetable-lines-border-color');
            }
            l2.appendChild(dessert);
            this.render.addClass(dessert, cls);
            this.render.addClass(dessert, 'treetable-lines-border-color');
        }
        parentEl.insertBefore(l1, containerEl);
        parentEl.insertBefore(l2, containerEl);
        if (isTopNode) {
            this.render.setStyle(l2, 'marginRight', '3px');
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerClickEvent() {
        if (this.togglerEl) {
            this.render.listen(this.togglerEl.nativeElement, 'click', this.onClick.bind(this));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClick(event) {
        event.stopPropagation();
        event.preventDefault();
        if (this.rowNode.node['showLoading']) {
            return false;
        }
        if (!this.tt.disabled) {
            this.tt.toggleExpand(this.rowNode.node);
        }
        return false;
    }
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    updateIcon(treeNode) {
        this.isShowTriangle = this.showTriangle();
        this.noChilds = this.hasChildren();
        this.treeNodeIcon = this.tt.getTreeIcon(treeNode);
    }
}
TreeTableTogglerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-treeTableToggler',
                template: `
    <a #toggler style="cursor: pointer"
            class="treenode-fold" *ngIf="showLines"
            [ngClass]="rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon"
            [style.display]="isShowTriangle ? '' : 'none'"
            (click)="onClick($event)"></a>

    <a #toggler style="cursor: pointer"
            class="treenode-fold"  *ngIf="!showLines"
            [ngClass]="rowNode.node.expanded ? tt.unfoldIcon : tt.foldIcon"
            [style.marginLeft.px]="rowNode.level * indentSpacing"
            [style.visibility]="isShowTriangle ? 'visible' : 'hidden'"
            (click)="onClick($event)"></a>
    <span class="tree-icon-line" [style.display]="isShowTriangle && showLines? '' : 'none'"></span>
    <span [style.display]="(tt.showIcon && rowNode.node.showIcon) ? 'inline-block': 'none'" class="treenode-icon" [ngClass]="treeNodeIcon"></span>

    <tt-checkbox  [rowNode]="rowNode" *ngIf="tt.showCheckbox" [disabled]="disabled" [checked]="rowNode.isChecked" ></tt-checkbox>
    `,
                encapsulation: ViewEncapsulation.None,
                exportAs: 'ttToggler'
            }] }
];
/** @nocollapse */
TreeTableTogglerComponent.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: NgZone },
    { type: Renderer2 }
];
TreeTableTogglerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-cmp-treetable-toggler',] }],
    rowNode: [{ type: Input }],
    disabled: [{ type: Input }],
    showLines: [{ type: Input }],
    indentSpacing: [{ type: Input }],
    togglerEl: [{ type: ViewChild, args: ['toggler',] }]
};
if (false) {
    /** @type {?} */
    TreeTableTogglerComponent.prototype.cls;
    /**
     * 树节点
     * @type {?}
     */
    TreeTableTogglerComponent.prototype.rowNode;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.disabled;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.showLines;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.indentSpacing;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.treeNodeIcon;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.isShowTriangle;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.noChilds;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.subscriptions;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.togglerEl;
    /** @type {?} */
    TreeTableTogglerComponent.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreeTableTogglerComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    TreeTableTogglerComponent.prototype.render;
}
/**
 * 选中行组件
 */
export class TreeTableSelectRowDirective {
    /**
     * @param {?} tt
     * @param {?} el
     * @param {?} render
     * @param {?} ngZone
     */
    constructor(tt, el, render, ngZone) {
        this.tt = tt;
        this.el = el;
        this.render = render;
        this.ngZone = ngZone;
        this.prevent = false;
        this.delay = 0;
        this.subscription = this.tt.selectNodeChangedSubject.subscribe((/**
         * @param {?} ids
         * @return {?}
         */
        (ids) => {
            if (ids && this.rowNode) {
                /** @type {?} */
                const idArr = ids.split(',');
                if (idArr.indexOf(this.rowNode.id) > -1) {
                    this.toggleClass();
                    this.rowNode.node['elementRef'] = this.el;
                }
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.rowNode.node.selectable = !this.selectRowDisabled;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // if (changes.selectRowDisabled && !changes.selectRowDisabled.isFirstChange()) {
        //     this.rowNode.node.selectable = !changes.selectRowDisabled.currentValue;
        // }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
            this.subscription = null;
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.tt.bodyTemplate) {
            if (!this.tt.isSelected(this.rowNode.node)) {
                this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onclick(event) {
        if (this.isEnabled()) {
            // this.rowClick(event);
            if (this.delay !== 0) {
                if (!this.prevent) {
                    this.prevent = true;
                    this.timer = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.rowClick(event);
                        this.prevent = false;
                    }), this.delay);
                }
            }
            else {
                this.rowClick(event);
            }
        }
        // event.stopPropagation();
    }
    /**
     * @return {?}
     */
    isEnabled() {
        return !this.tt.disabled && this.selectRowDisabled !== true;
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    rowClick(event) {
        event.stopPropagation();
        this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'row' }).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!e) {
                return;
            }
            this.tt.handleRowClick({
                originalEvent: event,
                rowNode: this.rowNode,
                rowIndex: this.rowIndex
            });
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.toggleClass();
            }));
        }));
    }
    /**
     * @return {?}
     */
    toggleClass() {
        if (!this.tt.bodyTemplate) {
            if (this.tt.isSelected(this.rowNode.node)) {
                if (this.tt.singleSelect) {
                    this.tt.el.nativeElement.querySelectorAll('.farris-treetable-tbody>tr.farris-table-selectedrow').forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this.render.removeClass(n, 'farris-table-selectedrow');
                    }));
                }
                this.render.addClass(this.el.nativeElement, 'farris-table-selectedrow');
            }
            else {
                if (!this.tt.keepSelect) {
                    this.render.removeClass(this.el.nativeElement, 'farris-table-selectedrow');
                }
            }
        }
    }
}
TreeTableSelectRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[selectRow]',
                exportAs: 'row'
            },] }
];
/** @nocollapse */
TreeTableSelectRowDirective.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
TreeTableSelectRowDirective.propDecorators = {
    rowNode: [{ type: Input, args: ['selectRow',] }],
    rowIndex: [{ type: Input }],
    selectRowDisabled: [{ type: Input }],
    delay: [{ type: Input }],
    onclick: [{ type: HostListener, args: ['click', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.rowNode;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.rowIndex;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.selectRowDisabled;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.subscription;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.prevent;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.timer;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.delay;
    /** @type {?} */
    TreeTableSelectRowDirective.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TreeTableSelectRowDirective.prototype.ngZone;
}
/**
 * 表头全选组件
 */
export class TreeTableHeaderCheckboxComponent {
    /**
     * @param {?} tt
     * @param {?} ttService
     */
    constructor(tt, ttService) {
        this.tt = tt;
        this.ttService = ttService;
        this.checkedChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (!this.disabled && !this.tt.disabled) {
            /** @type {?} */
            const beforeEvent = !this.checked ? this.tt.beforeCheckAll : this.tt.beforeUnCheckAll;
            this.tt['checkall_CLICKED'] = true;
            beforeEvent({ instance: this.tt, checked: !this.checked }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                // 全选功能
                this.chkAll.nativeElement.indeterminate = false;
                this.checked = !this.checked;
                this.tt.toggleNodesWithCheckbox(event, this.checked);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.tt['checkall_CLICKED'] = false;
                }), 50);
            }));
        }
        event.stopPropagation();
        return false;
    }
}
TreeTableHeaderCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'tt-header-checkbox',
                template: `
    <div class="custom-control custom-checkbox  custom-control-inline tt-checkbox" style="top: -2px;">
        <input type="checkbox" #chkAll class="custom-control-input"  [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div>
    `,
                styles: [`
        :host {
            vertical-align: middle;
        }
        `]
            }] }
];
/** @nocollapse */
TreeTableHeaderCheckboxComponent.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: TreetableService }
];
TreeTableHeaderCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    checkedChange: [{ type: Output }],
    chkAll: [{ type: ViewChild, args: ['chkAll',] }]
};
if (false) {
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.checked;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.disabled;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.chkAll;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.tt;
    /** @type {?} */
    TreeTableHeaderCheckboxComponent.prototype.ttService;
}
/**
 * 表体checkbox 组件
 */
export class TreeTableCheckboxComponent {
    /**
     * @param {?} tt
     * @param {?} ttService
     */
    constructor(tt, ttService) {
        this.tt = tt;
        this.ttService = ttService;
        this.cls1 = true;
        this.checkedChange = new EventEmitter();
        this.destroy$ = new Subject();
        this.ttService = this.tt.ttService;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.chk.nativeElement.indeterminate = this.rowNode.indeterminate || false;
        this.ttService.changeCheckboxStatus$.pipe(takeUntil(this.destroy$)).pipe(map((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n.id === this.rowNode.id) {
                return n;
            }
            return null;
        }))).subscribe((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n) {
                this.chk.nativeElement.indeterminate = n.indeterminate;
                this.checked = n.isChecked;
                this.chk.nativeElement.checked = this.checked;
            }
        }));
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        event.stopPropagation();
        if (!this.disabled) {
            this.tt.beforeClickNode({ instance: this.tt, rowNode: this.rowNode, event, type: 'checkbox' }).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (!e) {
                    return;
                }
                this.checked = !this.checked;
                if (this.tt.singleSelect) {
                    this.tt.clearAll();
                    if (this.checked) {
                        this.tt.selectNode(this.rowNode.id, true);
                    }
                    else {
                        this.tt.unSelectNode(this.rowNode.id, true);
                    }
                }
                else {
                    this.tt.toggleNodeWithCheckbox(event, this.rowNode, this.checked);
                }
            }));
        }
        return false;
    }
}
TreeTableCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'tt-checkbox',
                template: `
    <div class="custom-control custom-checkbox  custom-control-inline tt-checkbox">
        <input type="checkbox" #chk class="custom-control-input" [disabled]="disabled" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div>
    `,
                styles: [`
        :host {
            vertical-align: middle;
        }
        :host .custom-checkbox {
            opacity: 1;
            float: none;
        }
        `]
            }] }
];
/** @nocollapse */
TreeTableCheckboxComponent.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: TreetableService }
];
TreeTableCheckboxComponent.propDecorators = {
    cls1: [{ type: HostBinding, args: ['class.tree-toggler-checkbox',] }],
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    rowNode: [{ type: Input }],
    checkedChange: [{ type: Output }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.cls1;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.checked;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.disabled;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.rowNode;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.checkedChange;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.chk;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.destroy$;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.tt;
    /** @type {?} */
    TreeTableCheckboxComponent.prototype.ttService;
}
export class DblClickRowDirective {
    /**
     * @param {?} tt
     * @param {?} el
     * @param {?} ttService
     * @param {?} selectRowDir
     */
    constructor(tt, el, ttService, selectRowDir) {
        this.tt = tt;
        this.el = el;
        this.ttService = ttService;
        this.selectRowDir = selectRowDir;
        this.enableDblClick = false;
        this.ttService = this.tt.ttService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.enableDblClick) {
            this.selectRowDir.delay = 0;
        }
        else {
            this.selectRowDir.delay = 200;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    ondblclick(event) {
        /** @type {?} */
        const prevEl = ((/** @type {?} */ (event.target))).previousSibling;
        if (prevEl && prevEl.type === 'checkbox') {
            return;
        }
        if (this.tt.disabled) {
            return false;
        }
        if (this.tt.multiSelect && this.dblclickNode) {
            if (this.dblclickNode.node.leaf) {
                return false;
            }
        }
        /** @type {?} */
        const clsName = event.target['className'];
        /** @type {?} */
        let togglerTag = null;
        if (clsName.indexOf('f-cmp-treetable-toggler') > -1) {
            togglerTag = event.target['querySelector']('.treenode-fold');
        }
        else {
            if (event.target['className'].indexOf('treenode-fold') > -1) {
                togglerTag = (/** @type {?} */ (event.target));
            }
        }
        if (togglerTag && togglerTag.style.visibility === 'visible') {
            return false;
        }
        if (this.selectRowDir) {
            this.selectRowDir.prevent = false;
            clearTimeout(this.selectRowDir.timer);
            if (this.selectRowDir.rowNode && this.enableDblClick) {
                /** @type {?} */
                const rn = this.selectRowDir.rowNode;
                if (rn.node.children && rn.node.children.length && !rn.node.leaf && this.tt.dblClickExpand) {
                    this.tt.toggleExpand(rn.node);
                }
                this.tt.dblClick.emit(rn.node);
            }
        }
        // event.stopPropagation();
    }
}
DblClickRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[dblclick]'
            },] }
];
/** @nocollapse */
DblClickRowDirective.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: ElementRef },
    { type: TreetableService },
    { type: TreeTableSelectRowDirective, decorators: [{ type: Optional }, { type: Self }] }
];
DblClickRowDirective.propDecorators = {
    enableDblClick: [{ type: Input, args: ['dblclick',] }],
    dblclickNode: [{ type: Input }],
    ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DblClickRowDirective.prototype.enableDblClick;
    /** @type {?} */
    DblClickRowDirective.prototype.dblclickNode;
    /** @type {?} */
    DblClickRowDirective.prototype.tt;
    /** @type {?} */
    DblClickRowDirective.prototype.el;
    /** @type {?} */
    DblClickRowDirective.prototype.ttService;
    /** @type {?} */
    DblClickRowDirective.prototype.selectRowDir;
}
export class CustomRowStyleDirective {
    /**
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} el
     * @param {?} tt
     * @param {?} utils
     * @param {?} render
     */
    constructor(injector, ngZone, el, tt, utils, render) {
        this.injector = injector;
        this.ngZone = ngZone;
        this.el = el;
        this.tt = tt;
        this.utils = utils;
        this.render = render;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.col && this.tt.fixedColumns && this.tt.fixedHeader && this.col.fixed) {
            if (this.col.fixed === 'left' || this.col.fixed === 'right') {
                this.setRowStyle();
            }
            return;
        }
        else {
            this.setRowStyle();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setRowStyle() {
        /** @type {?} */
        const fn = this.tt.rowStyler;
        if (fn) {
            /** @type {?} */
            const sty = fn(this.rowNode.node);
            if (sty) {
                if (typeof sty === 'object' && (sty.style || sty.cls)) {
                    if (sty.style) {
                        Object.keys(sty.style).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        s => {
                            this.render.setStyle(this.el.nativeElement, s, sty.style[s]);
                        }));
                    }
                    if (sty.cls) {
                        sty.cls.split(',').forEach((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => {
                            this.render.addClass(this.el.nativeElement, c);
                        }));
                    }
                }
                else {
                    if (Array.isArray(sty) || typeof sty === 'string') {
                        /** @type {?} */
                        const cls = this.tt.getRowCls(this.rowNode);
                        if (cls && Object.keys(cls).length) {
                            Object.keys(cls).forEach((/**
                             * @param {?} c
                             * @return {?}
                             */
                            c => {
                                if (cls[c]) {
                                    this.render.addClass(this.el.nativeElement, c);
                                }
                            }));
                        }
                    }
                    else {
                        Object.keys(sty).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        s => {
                            this.render.setStyle(this.el.nativeElement, s, sty[s]);
                        }));
                    }
                }
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.setRowStyle();
        }
    }
}
CustomRowStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[customRowStyle]'
            },] }
];
/** @nocollapse */
CustomRowStyleDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: ElementRef },
    { type: TreeTableComponent },
    { type: CommonUtils },
    { type: Renderer2 }
];
CustomRowStyleDirective.propDecorators = {
    rowNode: [{ type: Input, args: ['customRowStyle',] }],
    col: [{ type: Input, args: ['field',] }]
};
if (false) {
    /** @type {?} */
    CustomRowStyleDirective.prototype.rowNode;
    /** @type {?} */
    CustomRowStyleDirective.prototype.col;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.tt;
    /** @type {?} */
    CustomRowStyleDirective.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    CustomRowStyleDirective.prototype.render;
}
export class TTCustomCellStyleDirective {
    /**
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} el
     * @param {?} tt
     * @param {?} utils
     * @param {?} render
     */
    constructor(injector, ngZone, el, tt, utils, render) {
        this.injector = injector;
        this.ngZone = ngZone;
        this.el = el;
        this.tt = tt;
        this.utils = utils;
        this.render = render;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.tt && this.tt.getCellCls) {
            this.setCellStyle();
        }
        if (!this.tt.showBorder && this.tt.columns.length === 1) {
            this.render.setStyle(this.el.nativeElement, 'border-width', '0px');
        }
    }
    /**
     * @private
     * @return {?}
     */
    setCellStyle() {
        /** @type {?} */
        const cellCls = this.tt.getCellCls(this.rowNode, this.column.field);
        if (this.column && this.column.styler) {
            if (cellCls && Object.keys(cellCls).length) {
                Object.keys(cellCls).forEach((/**
                 * @param {?} c
                 * @return {?}
                 */
                c => {
                    if (cellCls[c]) {
                        this.render.addClass(this.el.nativeElement, c);
                    }
                }));
            }
            /** @type {?} */
            const rowData = this.rowNode.node.data;
            /** @type {?} */
            const ccs = this.column.styler(this.utils.getValue(this.column.field, rowData), rowData, this.rowIndex, this.rowNode);
            if (ccs) {
                if (ccs.style || ccs.cls) {
                    if (ccs.style) {
                        Object.keys(ccs.style).forEach((/**
                         * @param {?} s
                         * @return {?}
                         */
                        s => {
                            this.render.setStyle(this.el.nativeElement, s, ccs.style[s]);
                        }));
                    }
                    if (ccs.cls) {
                        ccs.cls.split(',').forEach((/**
                         * @param {?} c
                         * @return {?}
                         */
                        c => {
                            if (c[0] === '!') {
                                this.render.removeClass(this.el.nativeElement, c.substring(1));
                            }
                            else {
                                this.render.addClass(this.el.nativeElement, c);
                            }
                        }));
                    }
                }
            }
        }
        else {
            /** @type {?} */
            let _sty = cellCls || {};
            /** @type {?} */
            const rowStyle = this.tt.getRowCls(this.rowNode) || {};
            /** @type {?} */
            const hasBackground = Object.keys(cellCls).find((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return ['background', 'background-color', 'backgroundcolor'].indexOf(n.toLowerCase()) > -1;
            }));
            /** @type {?} */
            let _rowStyles = rowStyle;
            if (rowStyle.style) {
                _rowStyles = rowStyle.style;
            }
            /** @type {?} */
            let _cellStyles = _sty;
            if (_sty.style) {
                _cellStyles = _sty.style;
            }
            if (hasBackground) {
                _sty = Object.assign(_rowStyles, _cellStyles);
            }
            else {
                _sty = Object.assign(_cellStyles, _rowStyles);
            }
            Object.keys(_sty).forEach((/**
             * @param {?} s
             * @return {?}
             */
            s => {
                this.render.setStyle(this.el.nativeElement, s, _sty[s]);
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowNode && !changes.rowNode.isFirstChange()) {
            this.setCellStyle();
        }
    }
}
TTCustomCellStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[customCellStyle]'
            },] }
];
/** @nocollapse */
TTCustomCellStyleDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: ElementRef },
    { type: TreeTableComponent },
    { type: CommonUtils },
    { type: Renderer2 }
];
TTCustomCellStyleDirective.propDecorators = {
    column: [{ type: Input, args: ['customCellStyle',] }],
    rowNode: [{ type: Input }],
    rowIndex: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.column;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.rowNode;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.rowIndex;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.tt;
    /** @type {?} */
    TTCustomCellStyleDirective.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    TTCustomCellStyleDirective.prototype.render;
}
export class TTResizableColumnDirective {
    /**
     * @param {?} tt
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     */
    constructor(tt, ngzone, el, render) {
        this.tt = tt;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.enableResize = true;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'resizable-column');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resizer';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this.resizerMouseDownListener = this.onMouseDown.bind(this);
                this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
                this.el.nativeElement.addEventListener('mouseenter', this.onMouseEnter.bind(this));
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.enableResize && !changes.enableResize.isFirstChange()) {
            if (!this.isEnable() && this.resizer) {
                this.resizer.remove();
            }
        }
    }
    /**
     * @return {?}
     */
    isEnable() {
        return this.tt.resizableColumns && !this.tt.autoWidth && this.enableResize;
    }
    /**
     * @return {?}
     */
    bindDocumentEvents() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.documentMouseMoveListener = this.onMouseMove.bind(this);
            document.addEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseUpListener = this.onMouseUp.bind(this);
            document.addEventListener('mouseup', this.documentMouseUpListener);
        }));
    }
    /**
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        if (this.isEnable()) {
            this.tt.onColumnResizeBegin(event);
            this.bindDocumentEvents();
        }
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        this.tt.onColumnResize(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        this.tt.onColumnResizeEnd(event, this.el.nativeElement);
        this.unbindDocumentEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resizerMouseDownListener) {
            this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
        }
        this.unbindDocumentEvents();
    }
}
TTResizableColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resizable-column]'
            },] }
];
/** @nocollapse */
TTResizableColumnDirective.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
TTResizableColumnDirective.propDecorators = {
    enableResize: [{ type: Input, args: ['resizable-column',] }]
};
if (false) {
    /** @type {?} */
    TTResizableColumnDirective.prototype.enableResize;
    /** @type {?} */
    TTResizableColumnDirective.prototype.resizer;
    /** @type {?} */
    TTResizableColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    TTResizableColumnDirective.prototype.tt;
    /** @type {?} */
    TTResizableColumnDirective.prototype.ngzone;
    /** @type {?} */
    TTResizableColumnDirective.prototype.el;
    /** @type {?} */
    TTResizableColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZXRhYmxlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdHJlZXRhYmxlLyIsInNvdXJjZXMiOlsibGliL3RyZWV0YWJsZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7Ozs7OztBQVV0RCxPQUFPLEVBQ0gsU0FBUyxFQUFVLEtBQUssRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUNoRCxlQUFlLEVBQUUsU0FBUyxFQUMxQixZQUFZLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUN4RCxTQUFTLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxFQUFFLFNBQVMsRUFBRSxpQkFBaUIsRUFDbEMsdUJBQXVCLEVBQUUsaUJBQWlCLEVBQVcsV0FBVyxFQUMvRyxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSw4QkFBOEIsRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsSSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDekQsT0FBTyxFQUFFLG1CQUFtQixFQUFtQixNQUFNLDBCQUEwQixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNsRCxPQUFPLEVBQUUseUJBQXlCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUV6RSxPQUFPLEVBQTRCLEVBQUUsRUFBRSxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNyRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFhLE1B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WUFBWTtJQUNaLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQVk7UUFDcEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7SUFFRCxTQUFTLENBQUMsS0FBWTtRQUNsQixJQUFJLENBQUMsRUFBRSxDQUFDLGlCQUFpQixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsd0JBQXdCLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7U0FDaEY7UUFFRCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7WUE1RkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7YUFDakM7Ozs7WUFTa0Isa0JBQWtCO1lBaDFKUyxNQUFNO1lBRFosVUFBVTtZQUNJLFNBQVM7OzsyQkF5MEoxRCxLQUFLLFNBQUMsa0JBQWtCOzs7O0lBQXpCLGtEQUErQzs7SUFDL0MsNkNBQXlCOztJQUN6Qiw4REFBOEI7O0lBQzlCLCtEQUErQjs7SUFDL0IsNkRBQTZCOztJQUd6Qix3Q0FBNkI7O0lBQUUsNENBQXFCOztJQUNwRCx3Q0FBcUI7O0lBQUUsNENBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc3dpdGNoTWFwLCB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbi8qXHJcbiogQEF1dGhvcjog55av54uC56eA5omNKGx1Y2FzIGh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOC0xMi0xOCAxODo0NDoxM1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMS0yOSAwODo0MTozOVxyXG4gKiBAQ29tcGFueTogSW5zcHVyXHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcblxyXG5pbXBvcnQge1xyXG4gICAgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBUZW1wbGF0ZVJlZiwgRGlyZWN0aXZlLFxyXG4gICAgQ29udGVudENoaWxkcmVuLCBRdWVyeUxpc3QsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSxcclxuICAgIEhvc3RMaXN0ZW5lciwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIEluamVjdG9yLFxyXG4gICAgVmlld0NoaWxkLCBPcHRpb25hbCwgU2VsZiwgQWZ0ZXJWaWV3SW5pdCwgTmdab25lLCBSZW5kZXJlcjIsIFZpZXdFbmNhcHN1bGF0aW9uLFxyXG4gICAgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBBZnRlclZpZXdDaGVja2VkLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIERvQ2hlY2ssIEhvc3RCaW5kaW5nXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBGYXJyaXNUZW1wbGF0ZURpcmVjdGl2ZSwgQ29tbW9uVXRpbHMsIElkU2VydmljZSwgRmFycmlzQ29tcG9uZW50SW5zdGFuY2VTZXJ2aWNlLCBEZWJ1Z1NlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IFJlc2l6ZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9ldmVudHMnO1xyXG5pbXBvcnQgeyBDb2x1bW5Gb3JtYXRTZXJ2aWNlLCBDb2x1bW5Gb3JtYXR0ZXIgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5pbXBvcnQgeyBJbnB1dEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1pbnB1dC1ncm91cCc7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IFBlcmZlY3RTY3JvbGxiYXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXBlcmZlY3Qtc2Nyb2xsYmFyJztcclxuXHJcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiwgT2JzZXJ2YWJsZSwgb2YsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCwgdGltZXIgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAsIGV4dGVuZCwgcmVtb3ZlIH0gZnJvbSAnbG9kYXNoLWVzJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcblxyXG5pbXBvcnQgeyBUcmVlVGFibGVDb2x1bW4gfSBmcm9tICcuL3R5cGVzL3RyZWV0YWJsZS1jb2x1bW4nO1xyXG5pbXBvcnQgeyBWaXJ0dWFsaXplZExvYWRlclNlcnZpY2UgfSBmcm9tICcuL3ZpcnR1YWxpemVkLWxvYWRlci5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVHJlZU5vZGUsIFJvd05vZGUsIFNlbGVjdEV2ZW50QXJncyB9IGZyb20gJy4vdHlwZXMvdHJlZW5vZGUnO1xyXG5pbXBvcnQgeyBUcmVldGFibGVTZXJ2aWNlIH0gZnJvbSAnLi90cmVldGFibGUuc2VydmljZSc7XHJcbmltcG9ydCB7IFNlYXJjaEhhbmRsZSB9IGZyb20gJy4vc2VhcmNoLmhhbmRsZSc7XHJcbmltcG9ydCB7IFRUSG90a2V5cyB9IGZyb20gJy4vaG90a2V5cyc7XHJcbmltcG9ydCB7IFBhZ2luYXRpb25JbnN0YW5jZSB9IGZyb20gJ0BmYXJyaXMvdWktcGFnaW5hdGlvbic7XHJcbmltcG9ydCB7IEZhcnJpc0NvbnRleHRNZW51RGlyZWN0aXZlIH0gZnJvbSAnQGZhcnJpcy91aS1jb250ZXh0LW1lbnUnO1xyXG5cclxuXHJcbi8qKiDljZXlhYPmoLzngrnkuovku7blj4LmlbAgKi9cclxuZXhwb3J0IGludGVyZmFjZSBDZWxsQ2xpY2tQYXJhbSB7XHJcbiAgICBldmVudDogRXZlbnQ7XHJcbiAgICBjb2w6IFRyZWVUYWJsZUNvbHVtbjtcclxuICAgIG5vZGU6IFRyZWVOb2RlO1xyXG59XHJcbi8qKiDoioLngrnpkqnpgInkuovku7YgKi9cclxuZXhwb3J0IGludGVyZmFjZSBOb2RlQ2hlY2tlZFBhcmFtIHtcclxuICAgIG9yaWdpbmFsRXZlbnQ/OiBhbnk7XHJcbiAgICBub2RlOiBUcmVlTm9kZSB8IFRyZWVOb2RlW107XHJcbiAgICBub2Rlcz86IGFueVtdO1xyXG4gICAgaW5zdGFuY2U6IFRyZWVUYWJsZUNvbXBvbmVudDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBOb2RlU2VsZWN0ZWRQYXJhbSB7XHJcbiAgICBvcmlnaW5hbEV2ZW50PzogRXZlbnQ7XHJcbiAgICBub2RlOiBUcmVlTm9kZSB8IFRyZWVOb2RlW107XHJcbiAgICB0eXBlPzogJ3JvdycgfCAnY2hlY2tib3gnO1xyXG4gICAgaW5kZXg/OiBudW1iZXI7XHJcbiAgICBwYXJlbnRzPzogYW55W107XHJcbiAgICBpbnN0YW5jZTogVHJlZVRhYmxlQ29tcG9uZW50O1xyXG59XHJcblxyXG5leHBvcnQgdHlwZSBJY29uRmllbGRUeXBlID0ge1xyXG4gICAgbGVhZj86IHN0cmluZyxcclxuICAgIGV4cGFuZD86IHN0cmluZyxcclxuICAgIGNvbGxhcHNlPzogc3RyaW5nXHJcbn0gfCBzdHJpbmc7XHJcblxyXG5cclxuY29uc3QgTk9ERVNfUEFHRVJfQ09MVU1OX0ZJRUxEID0gJ19fbm9kZXNwYWdlcmJhcl9fJztcclxuXHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAndHQtY29sdW1uLCBbdHQtY29sdW1uXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyZWVUYWJsZUNvbHVtbkRpcmVjdGl2ZSB7XHJcbiAgICBASW5wdXQoKSBmaWVsZDogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHdpZHRoPzogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgaEFsaWduPzogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgYWxpZ24/OiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBmb3JtYXR0ZXI/OiAoKSA9PiBhbnkgfCBDb2x1bW5Gb3JtYXR0ZXI7XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtdHJlZXRhYmxlJyxcclxuICAgIHRlbXBsYXRlVXJsOiAndHJlZXRhYmxlLmNvbXBvbmVudC5odG1sJyxcclxuICAgIHN0eWxlczogW2BcclxuICAgICAgICAuZmFycmlzLXRyZWV0YWJsZSB7XHJcbiAgICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnJlc2l6YWJsZS1jb2x1bW4ge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNsaXA6IHBhZGRpbmctYm94O1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5jb2x1bW4tcmVzaXplciB7XHJcbiAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGUhaW1wb3J0YW50O1xyXG4gICAgICAgICAgICB0b3A6IDA7XHJcbiAgICAgICAgICAgIHJpZ2h0OiAwO1xyXG4gICAgICAgICAgICBtYXJnaW46IDA7XHJcbiAgICAgICAgICAgIHdpZHRoOiAuNWVtO1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDA7XHJcbiAgICAgICAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcclxuICAgICAgICAgICAgYm9yZGVyOiAxcHggc29saWQgdHJhbnNwYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5jb2x1bW4tcmVzaXplci1oZWxwZXIge1xyXG4gICAgICAgICAgICB3aWR0aDogMXB4O1xyXG4gICAgICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDEwO1xyXG4gICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICBib3JkZXItcmlnaHQ6IDFweCBkYXNoZWQgIzE4OTBmZjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5mYXJyaXMtdHJlZXRhYmxlLWRpc2FibGVkIC5mYXJyaXMtdHJlZXRhYmxlLWJvZHkgLnRhYmxlIHRye1xyXG4gICAgICAgICAgICBvcGFjaXR5OiAwLjQ7XHJcbiAgICAgICAgICAgIGN1cnNvcjogbm90LWFsbG93ZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC5mYXJyaXMtdHJlZXRhYmxlLWRpc2FibGVkIC50YWJsZSB0ci5mYXJyaXMtdGFibGUtc2VsZWN0ZWRyb3d7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIGN1cnNvcjogZGVmYXVsdDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5jdXN0b20tY2hlY2tib3ggLmN1c3RvbS1jb250cm9sLWlucHV0OmluZGV0ZXJtaW5hdGV+LmN1c3RvbS1jb250cm9sLWxhYmVsOjphZnRlciB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChcImRhdGE6aW1hZ2Uvc3ZnK3htbCwlM2NzdmcgeG1sbnM9J2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyB2aWV3Qm94PScwIDAgNCA0JyUzZSUzY3BhdGggc3Ryb2tlPSclMjNmZmYnIGQ9J00wIDJoNCcvJTNlJTNjL3N2ZyUzZVwiKTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogIzE4OTBmZjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLnVuc2VsZWN0YWJsZS10ZXh0IHtcclxuICAgICAgICAgICAgLXdlYmtpdC11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgICAgICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgICAgICAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XHJcbiAgICAgICAgICAgIC1tcy11c2VyLXNlbGVjdDogbm9uZTtcclxuICAgICAgICAgICAgdXNlci1zZWxlY3Q6IG5vbmVcclxuICAgICAgICB9XHJcbiAgICAgICAgLnNlYXJjaC1oaWdobGlnaHQge1xyXG4gICAgICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkZGRjFGO1xyXG4gICAgICAgIH1cclxuICAgICAgICAuc2VhcmNoLWhpZ2hsaWdodC5hY3RpdmV7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICNGRjkwMUM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZi10cmVldGFibGUtLWZpeGVkLWNvbHVtbnMgLnBzX19yYWlsLXgsIC5mLXRyZWV0YWJsZS0tZml4ZWQtY29sdW1ucyAucHNfX3JhaWwteSB7XHJcbiAgICAgICAgICAgIHotaW5kZXg6IDE4O1xyXG4gICAgICAgIH1cclxuICAgIGBdLFxyXG4gICAgZXhwb3J0QXM6ICd0cmVlVGFibGUnLFxyXG4gICAgZW5jYXBzdWxhdGlvbjogVmlld0VuY2Fwc3VsYXRpb24uTm9uZSxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmVlVGFibGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyQ29udGVudEluaXQsIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcclxuICAgIGlkID0gJyc7XHJcbiAgICAvKiog5a695bqmICovXHJcbiAgICBASW5wdXQoKSB3aWR0aCA9IDUwMDtcclxuICAgIC8qKiDpq5jluqYgKi9cclxuICAgIEBJbnB1dCgpIGhlaWdodCA9IDQwMDtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93RmlsdGVyQmFyID0gZmFsc2U7XHJcbiAgICAvKiog5pi+56S66L+H5ruk6KGMICovXHJcbiAgICBASW5wdXQoKSBlbmFibGVGaWx0ZXJSb3cgPSBmYWxzZTtcclxuICAgIC8qKiDmmL7npLrmn6Xor6LlrZfmrrUgKi9cclxuICAgIEBJbnB1dCgpIHNob3dTZWFyY2hGaWVsZCA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgaGVhZGVySGVpZ2h0ID0gMzU7XHJcbiAgICAvKiog6KGo5aS05oqY6KGMICovXHJcbiAgICBASW5wdXQoKSBoZWFkZXJXcmFwID0gZmFsc2U7XHJcbiAgICAvKiog6KGM6auYICovXHJcbiAgICBASW5wdXQoKSByb3dIZWlnaHQgPSAyOTtcclxuICAgIC8qKlxyXG4gICAgICog5YiX5L+h5oGvXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIHByaXZhdGUgX2dyb3VwQ29sdW1ucyA9IFtdO1xyXG4gICAgQElucHV0KCkgc2V0IGdyb3VwQ29sdW1ucyhjb2xzKSB7XHJcbiAgICAgICAgdGhpcy5fZ3JvdXBDb2x1bW5zID0gY29scyB8fCBbXTtcclxuICAgICAgICBjb25zdCBfY29sdW1ucyA9IHRoaXMudHRTZXJ2aWNlLmNoZWNrQ29sdW1uc0Zvckdyb3VwSGVhZGVyKGNvbHMubWFwKGNzID0+IFsuLi5jc10pLCB0aGlzKS5jb2x1bW5zO1xyXG4gICAgICAgIHRoaXMuY29sdW1ucyA9IF9jb2x1bW5zLmZpbHRlcihuID0+IG4uZmllbGQpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGdyb3VwQ29sdW1ucygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZ3JvdXBDb2x1bW5zO1xyXG4gICAgfVxyXG4gICAgLyoqIOWQr+eUqOWkmuihqOWktCAqL1xyXG4gICAgQElucHV0KCkgdXNlR3JvdXBIZWFkZXIgPSBmYWxzZTtcclxuXHJcbiAgICBASW5wdXQoKSBmaXRDb2x1bW5zID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIGF1dG9GaXRDb2x1bW5zID0gZmFsc2U7XHJcblxyXG4gICAgQElucHV0KCkgc2VhcmNoRmllbGRzOiB7IGxhYmVsOiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcgfVtdO1xyXG5cclxuICAgIEBJbnB1dCgpIGFsbENvbHVtbnNUaXRsZSA9ICfmiYDmnInliJcnO1xyXG4gICAgQElucHV0KCkgc2VhcmNoQW55RmllbGQgPSB0cnVlO1xyXG5cclxuICAgIC8qKiDmmL7npLrov57mjqXnur/vvIzpu5jorqTkuLogZmFsc2UgKi9cclxuICAgIEBJbnB1dCgpIHNob3dMaW5lcyA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgc2hvd0xpbmVzT25Ib3ZlciA9IGZhbHNlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmmK/lkKblkK/nlKjlpJrpgInjgIIg6buY6K6k5Li65Y2V6YCJXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIG11bHRpU2VsZWN0ID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBzaW5nbGVTZWxlY3QgPSB0cnVlO1xyXG4gICAgLyoqIOWQr+eUqOWkmumAieWQju+8jOaYr+WQpuaYvuekumNoZWNrYm94ICovXHJcbiAgICBASW5wdXQoKSBzaG93Q2hlY2tib3ggPSBmYWxzZTtcclxuICAgIC8qKlxyXG4gICAgICog5Li76ZSu5a2X5q61XHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIGlkRmllbGQ6IHN0cmluZztcclxuXHJcbiAgICAvKiog5pi+56S66L655qGG57q/ICovXHJcbiAgICBASW5wdXQoKSBzaG93Qm9yZGVyID0gdHJ1ZTtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93Q2hlY2tBbGwgPSB0cnVlO1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dIZWFkZXIgPSB0cnVlO1xyXG4gICAgLyoqIOWQr+eUqOaWkemprOe6vyAqL1xyXG4gICAgQElucHV0KCkgc3RyaXBlZCA9IGZhbHNlO1xyXG4gICAgLyoqIOWQr+eUqOm8oOagh+WIkui/h+aViOaenCAqL1xyXG4gICAgQElucHV0KCkgaG92ZXJlZCA9IHRydWU7XHJcbiAgICAvKiog56aB55So44CCIOemgeeUqOaXtuS4jeWFgeiuuOmAieS4reihjCAqL1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIC8qKiDnpoHljaHoioLngrnpgInkuK0gKi9cclxuICAgIEBJbnB1dCgpIGRpc2FibGVkUm93OiAocGFyYW06IHsgbm9kZTogVHJlZU5vZGUsIGluc3RhbmNlPzogVHJlZVRhYmxlQ29tcG9uZW50IH0pID0+IGJvb2xlYW47XHJcblxyXG4gICAgLyoqIOaVsOaNruWKoOi9veaWueW8jzsg6buY6K6k5YC8IOS4uiBhbGxcclxuICAgICAqIC0gYWxsOiDlhajpg6jliqDovb1cclxuICAgICAqIC0gYXN5bmM6IOWIhuWxguWKoOi9vVxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBsb2FkRGF0YVR5cGU6ICdhbGwnIHwgJ2FzeW5jJyA9ICdhbGwnO1xyXG4gICAgLyoqIOWbuuWumuihqOWktCAqL1xyXG4gICAgQElucHV0KCkgZml4ZWRIZWFkZXIgPSBmYWxzZTtcclxuXHJcbiAgICAvKiog5b2T5aSa6YCJ5pe277yM6YCJ5Lit5b2T5YmN6KGM5bm26ZKp6YCJICovXHJcbiAgICBASW5wdXQoKSBjaGVja09uU2VsZWN0ID0gZmFsc2U7XHJcbiAgICAvKiog5b2T5aSa6YCJ5pe277yM6ZKp6YCJ5bm26YCJ5Lit5b2T5YmN6KGMICovXHJcbiAgICBASW5wdXQoKSBzZWxlY3RPbkNoZWNrID0gZmFsc2U7XHJcbiAgICAvKipcclxuICAgICAqIOWQr+eUqOWkmumAieaXtu+8jOatpOWxnuaAp+S4unRydWUg5pe277yM5LuF5b2T5YmN6KGM6YCJ5LitXHJcbiAgICAgKi9cclxuICAgIEBJbnB1dCgpIG9ubHlTZWxlY3RTZWxmID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOWQr+eUqOWIl+Wuveiwg+aVtCAqL1xyXG4gICAgQElucHV0KCkgcmVzaXphYmxlQ29sdW1ucyA9IHRydWU7XHJcbiAgICAvKiog6K6+572u5Li6dHJ1ZeaXtuiHqumAguW6lOeItuWuueeahOWwuuWvuCAqL1xyXG4gICAgQElucHV0KCkgZml0ID0gZmFsc2U7XHJcblxyXG4gICAgLyoqIOWQr+eUqOe6p+iBlOmAieS4reWKn+iDvSAqL1xyXG4gICAgQElucHV0KCkgY2FzY2FkZUNoZWNrID0gdHJ1ZTtcclxuICAgIC8qKiDlkJHkuIvnuqfogZTpgInkuK0gKi9cclxuICAgIEBJbnB1dCgpIGNhc2NhZGVEb3duID0gdHJ1ZTtcclxuICAgIC8qKiDlkJHkuIrnuqfogZTpgInkuK0gKi9cclxuICAgIEBJbnB1dCgpIGNhc2NhZGVVcCA9IHRydWU7XHJcbiAgICAvKiog56m65pWw5o2u5pe277yM5pi+56S655qE5o+Q56S65paH5pysICovXHJcbiAgICBASW5wdXQoKSBlbXB0eU1lc3NhZ2UgPSAn5pqC5peg5pWw5o2uJztcclxuICAgIC8qKiDnvKnov5vpl7Tot53vvIzpu5jorqTkuLogMTZweCAqL1xyXG4gICAgQElucHV0KCkgaW5kZW50U3BhY2luZyA9IDE2O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y2V5Ye76KGM6YCJ5Lit5ZCO77yM5Zyo5qyh54K55Ye75LiN5Lya6KKr5Y+W5raI6YCJ5Lit54q25oCBO1xyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBrZWVwU2VsZWN0ID0gdHJ1ZTtcclxuICAgIC8qKiDomZrmi5/liqDovb0gKi9cclxuICAgIEBJbnB1dCgpIHZpcnR1YWxpemVkID0gZmFsc2U7XHJcbiAgICAvKipcclxuICAgICAqIOS7heWFgeiuuOmAieaLqeWPtuWtkOiKgueCuVxyXG4gICAgICogLSBkZWZhdWx0OiDlupTnlKjmnI3liqHlmajnq6/kvKDlm57nmoTorr7nva7vvIzlpoLmnpzmnI3liqHlmajnq6/msqHmnInorr7nva7vvIzliJnkuI4gbm8g5L+d5oyB5LiA6Iez77ybXHJcbiAgICAgKiAtIHllczog5aaC5p6c5a6i5oi356uv6K6+572u5Li6IGB5ZXNgLCDmnI3liqHlmajnq6/nmoTorr7nva7lpLHmlYjvvJtcclxuICAgICAqIC0gbm86IOWFgeiuuOmAieaLqeaJgOacieiKgueCue+8m+acjeWKoeWZqOerr+iuvue9ruWkseaViFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBvbmx5U2VsZWN0TGVhZjogYm9vbGVhbiB8ICdkZWZhdWx0JyB8ICd5ZXMnIHwgJ25vJyA9ICdkZWZhdWx0JztcclxuXHJcbiAgICAvKiog5pi+56S65Zu+5qCHICovXHJcbiAgICBASW5wdXQoKSBzaG93SWNvbiA9IGZhbHNlO1xyXG4gICAgLyoqIOWPtuWtkOiKgueCueWbvuaghyAqL1xyXG4gICAgQElucHV0KCkgbGVhZkljb24gPSAnZmlsZSc7XHJcbiAgICAvKiog6IqC54K55bGV5byA5Zu+5qCHICovXHJcbiAgICBASW5wdXQoKSBleHBhbmRJY29uID0gJ2ZvbGRlci1vcGVuJztcclxuICAgIC8qKiDoioLngrnmipjlj6Dlm77moIcgKi9cclxuICAgIEBJbnB1dCgpIGNvbGxhcHNlSWNvbiA9ICdmb2xkZXInO1xyXG5cclxuICAgIEBJbnB1dCgpIGZvbGRJY29uID0gJ3RyZWV0YWJsZS10b2dnbGVyJztcclxuICAgIEBJbnB1dCgpIHVuZm9sZEljb24gPSAnZXh0YW5kZWQgdHJlZXRhYmxlLXRvZ2dsZXInO1xyXG5cclxuICAgIC8qKiDlkK/nlKjoioLngrnlm77moIfku47mlbDmja7kuK3ojrflj5bjgIIg6buY6K6k5Li6IGZhbHNlICovXHJcbiAgICBASW5wdXQoKSB1c2VJY29uRnJvbURhdGEgPSBmYWxzZTtcclxuICAgIC8qKiDlvZPmlbDmja7mupDkuK1pY29u5pyq6K6+572u5pe25L2/55So5YaF572uSUNPTi4g6buY6K6k5Li6IHRydWUgKi9cclxuICAgIEBJbnB1dCgpIHdoZW5EYXRhSWNvbkVtcHR5VXNlRGVmYXVsdCA9IHRydWU7XHJcbiAgICAvKiog5LuO5pWw5o2u5rqQ5a2X5q615Lit6I635Y+W5Zu+5qCHICovXHJcbiAgICBASW5wdXQoKSBpY29uRmllbGQ6IEljb25GaWVsZFR5cGUgPSAnJztcclxuICAgIC8qKiDlm77moIfoh6rlrprkuYnmoLflvI8gKi9cclxuICAgIEBJbnB1dCgpIGljb25DbHM6IHN0cmluZztcclxuXHJcbiAgICAvKiog5ZCv55So6L+c56uv5o6S5bqPICovXHJcbiAgICBASW5wdXQoKSByZW1vdGVTb3J0ID0gdHJ1ZTtcclxuICAgIC8qKiDmjpLluo/lrZfmrrUgKi9cclxuICAgIEBJbnB1dCgpIHNvcnROYW1lOiBzdHJpbmc7XHJcbiAgICAvKiog5o6S5bqP5pa55byPIGFzYyB8IGRlc2MgKi9cclxuICAgIEBJbnB1dCgpIHNvcnRPcmRlcjogc3RyaW5nO1xyXG4gICAgLyoqIOWFgeiuuOWkmuWIl+aOkuW6jyAqL1xyXG4gICAgQElucHV0KCkgbXVsdGlTb3J0OiBib29sZWFuO1xyXG5cclxuICAgIEBJbnB1dCgpIGJlZm9yZVNvcnRDb2x1bW46IChmaWVsZDogc3RyaW5nLCBvcmRlcjogc3RyaW5nKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAgIEBJbnB1dCgpIHJvd1N0eWxlcjogKHRyZWVOb2RlOiBUcmVlTm9kZSwgZmllbGQ/OiBzdHJpbmcpID0+IGFueTtcclxuICAgIEBJbnB1dCgpIGNlbGxTdHlsZXI6ICh0cmVlTm9kZTogVHJlZU5vZGUsIGZpZWxkOiBzdHJpbmcpID0+IGFueTtcclxuXHJcbiAgICAvKiog5ZCv55So5YmN56uv5paH5pys5p+l5om+ICovXHJcbiAgICBASW5wdXQoKSBlbmFibGVGaW5kVGV4dCA9IGZhbHNlO1xyXG4gICAgLyoqIOaWh+acrOafpeivouWtl+autSwg5byD55SoICovXHJcbiAgICBASW5wdXQoKSBmaW5kRmllbGQ6IHN0cmluZztcclxuICAgIC8vIOagkeWIl+ihqOm7mOiupOWxleW8gOWxgue6p+OAgiAtMe+8miDkuI3lsZXlvIDvvJsgMO+8miDlhajpg6jlsZXlvIDvvJsgPjA6ICDlsZXlvIDliLDmjIflrprnuqfmlbDvvJtcclxuICAgIEBJbnB1dCgpIGV4cGFuZExldmVsID0gLTE7XHJcblxyXG4gICAgQElucHV0KCkgc2VsZWN0VmFsdWUgPSAnJztcclxuICAgIEBPdXRwdXQoKSBzZWxlY3RWYWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8qKiDlkK/nlKjlj4zlh7vlsZXlvIDoioLngrkgKi9cclxuICAgIEBJbnB1dCgpIGRibENsaWNrRXhwYW5kID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIHVzZURibENsaWNrID0gdHJ1ZTtcclxuXHJcbiAgICAvKiog6YCJ5Lit6IqC54K5SUTmlbDnu4QgKi9cclxuICAgIEBJbnB1dCgpIHNlbGVjdFZhbHVlcyA9IFtdO1xyXG4gICAgQE91dHB1dCgpIHNlbGVjdFZhbHVlc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8qKiDmmK/lkKbnpoHmraLmipjooYzvvIzpu5jorqTkuI3mipjooYwgKi9cclxuICAgIEBJbnB1dCgpIG5vd3JhcCA9IHRydWU7XHJcblxyXG4gICAgQElucHV0KCkgY2hlY2tWYWx1ZXMgPSBbXTtcclxuICAgIEBPdXRwdXQoKSBjaGVja1ZhbHVlc0NoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcblxyXG4gICAgQElucHV0KCkgYmVmb3JlTm9kZVNlbGVjdGVkOiAoZTogYW55KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gICAgQElucHV0KCkgYmVmb3JlTm9kZVVuU2VsZWN0ZWQ6ICgpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcblxyXG4gICAgQElucHV0KCkgYmVmb3JlTm9kZUNoZWNrZWQ6ICgpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcbiAgICBASW5wdXQoKSBiZWZvcmVOb2RlVW5DaGVja2VkOiAoKSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAgIEBJbnB1dCgpIGJlZm9yZUNoZWNrQWxsOiAoZT86IGFueSkgPT4gT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuICAgIEBJbnB1dCgpIGJlZm9yZVVuQ2hlY2tBbGw6IChlPzogYW55KSA9PiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG5cclxuICAgIEBJbnB1dCgpIGJlZm9yZUNsaWNrTm9kZTogKGU/OiBhbnkpID0+IE9ic2VydmFibGU8Ym9vbGVhbj47XHJcblxyXG4gICAgLyoqIOWIhumhteS/oeaBryAqL1xyXG4gICAgQElucHV0KCkgcGFnaW5hdGlvbiA9IGZhbHNlO1xyXG4gICAgLyoqIOWIhumhteWKoOi9veWtkOiKgueCueaVsOaNriAqL1xyXG4gICAgQElucHV0KCkgcGFnaW5hdGlvbkZvckNoaWxkcmVuID0gZmFsc2U7XHJcbiAgICAvKiog5YiG6aG15p2h5pi+56S65qih5byP77yMIGRlZmF1bHQsIHNpbXBsZSAqL1xyXG4gICAgQElucHV0KCkgcGFnZXJWaWV3TW9kZSA9ICdkZWZhdWx0JztcclxuICAgIC8qKiDlkK/nlKjmnI3liqHlmajnq6/liIbpobUgKi9cclxuICAgIEBJbnB1dCgpIHBhZ2VyT25TZXJ2ZXIgPSB0cnVlO1xyXG4gICAgLyoqIOavj+mhteiusOW9leaVsCAqL1xyXG4gICAgQElucHV0KCkgcGFnZUxpc3QgPSBbMTAsIDIwLCAzMCwgNTAsIDEwMF07XHJcbiAgICAvKiog5b2T5YmN6aG156CBICovXHJcbiAgICBASW5wdXQoKSBwYWdlSW5kZXggPSAxO1xyXG4gICAgLyoqIOavj+mhteiusOW9leaVsCAqL1xyXG4gICAgQElucHV0KCkgcGFnZVNpemUgPSAyMDtcclxuICAgIC8qKiDliIbpobXljLrpq5jluqYgKi9cclxuICAgIEBJbnB1dCgpIHBhZ2VySGVpZ2h0ID0gNTY7XHJcbiAgICAvKiog5pi+56S65q+P6aG16K6w5b2V5pWwICovXHJcbiAgICBASW5wdXQoKSBzaG93UGFnZUxpc3QgPSBmYWxzZTtcclxuICAgIC8qKiDmmL7npLrliIbpobXkv6Hmga8gKi9cclxuICAgIEBJbnB1dCgpIHNob3dQYWdlSW5mbyA9IHRydWU7XHJcbiAgICAvKiog5pi+56S66aG156CBICovXHJcbiAgICBASW5wdXQoKSBzaG93UGFnZU51bWJlciA9IHRydWU7XHJcbiAgICAvKiog5pi+56S66aG156CB5pyA5aSn5pWw6YePICovXHJcbiAgICBASW5wdXQoKSBwYWdlckxhYmVsU2l6ZSA9IDc7XHJcbiAgICAvKiog5pi+56S66aG156CB6L6T5YWl5qGGICovXHJcbiAgICBASW5wdXQoKSBzaG93R290b0lucHV0ID0gZmFsc2U7XHJcbiAgICAvKiog5a2Q6IqC54K55YiG6aG15piv5ZCm5pi+56S65oC76K6w5b2V5pWw77yM6buY6K6kIGZhbHNlICovXHJcbiAgICBASW5wdXQoKSBzaG93VG90YWxGb3JDaGlsZHJlbiA9IGZhbHNlO1xyXG4gICAgLyoqIOaAu+iusOW9leaVsCAqL1xyXG4gICAgQElucHV0KCkgdG90YWwgPSAwO1xyXG5cclxuXHJcbiAgICBASW5wdXQoKSBlbmFibGVDb250ZXh0TWVudSA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgY29udGV4dE1lbnVJdGVtcyA9IFtdO1xyXG4gICAgQElucHV0KCkgYmVmb3JlU2hvd0NvbnRleHRNZW51OiAoZTogeyBba2V5OiBzdHJpbmddOiBhbnkgfSkgPT4gT2JzZXJ2YWJsZTx7IHNob3c6IGJvb2xlYW4sIG1lbnVzOiBBcnJheTxhbnk+fT47XHJcblxyXG4gICAgQE91dHB1dCgpIHBhZ2VTaXplQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBwYWdlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICAvKiog5o6S5bqP5ZCOICovXHJcbiAgICBAT3V0cHV0KCkgY29sdW1uU29ydGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgLyoqIOmAieS4reS6i+S7tiAqL1xyXG4gICAgQE91dHB1dCgpIG5vZGVTZWxlY3RlZDogRXZlbnRFbWl0dGVyPE5vZGVTZWxlY3RlZFBhcmFtPiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIC8qKiDlj5bmtojpgInkuK3kuovku7YgKi9cclxuICAgIEBPdXRwdXQoKSBub2RlVW5TZWxlY3Q6IEV2ZW50RW1pdHRlcjxOb2RlU2VsZWN0ZWRQYXJhbT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgLyoqIOmSqemAiSAqL1xyXG4gICAgQE91dHB1dCgpIG5vZGVDaGVja2VkOiBFdmVudEVtaXR0ZXI8Tm9kZUNoZWNrZWRQYXJhbT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5Y+W5raI6ZKp6YCJICovXHJcbiAgICBAT3V0cHV0KCkgbm9kZVVuQ2hlY2tlZDogRXZlbnRFbWl0dGVyPE5vZGVDaGVja2VkUGFyYW0+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIC8qKiDlhajpgInkuovku7YgKi9cclxuICAgIEBPdXRwdXQoKSBjaGVja0FsbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5Y+W5raI5YWo6YCJICovXHJcbiAgICBAT3V0cHV0KCkgdW5DaGVja0FsbDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5p+l6K+iICovXHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgZGJsQ2xpY2s6IEV2ZW50RW1pdHRlcjxhbnk+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBsb2FkZWREYXRhOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgZXhwYW5kOiBFdmVudEVtaXR0ZXI8VHJlZU5vZGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNvbGxhcHNlOiBFdmVudEVtaXR0ZXI8VHJlZU5vZGU+ID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBleHBhbmRBbGxOb2RlczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgY29sbGFwc2VBbGxOb2RlczogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIGFwcGVuZE5ldzogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcmVtb3ZlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgdXBkYXRlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIGNsZWFyU2VhcmNoVmFsdWUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgY2VsbENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjxDZWxsQ2xpY2tQYXJhbT4oKTtcclxuICAgIEBPdXRwdXQoKSBjaGlsZHNQYWdlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgc2VhcmNoVmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgICBASW5wdXQoKSBsb2FkZWRUaW1lciA9IDEwMDtcclxuXHJcbiAgICBzZXJpYWxpemVkVmFsdWU6IFJvd05vZGVbXTtcclxuXHJcbiAgICBfZGF0YTogVHJlZU5vZGVbXSA9IFtdO1xyXG4gICAgLy8gbG9hZGRhdGEg5pe2IOWFiOiuvue9ruS4uuepuuaVsOe7hO+8jFxyXG4gICAgaXNMb2FkTmV3RGF0YVNldEVtcHR5ID0gZmFsc2U7XHJcbiAgICBnZXQgZGF0YSgpOiBhbnlbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XHJcbiAgICB9XHJcbiAgICBASW5wdXQoKSBzZXQgZGF0YSh2YWw6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IHZhbDtcclxuICAgICAgICB0aGlzLnVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZSgpO1xyXG4gICAgICAgIGlmICghdGhpcy5pc0xvYWROZXdEYXRhU2V0RW1wdHkpIHtcclxuICAgICAgICAgICAgdGhpcy5pbml0Tm9kZVN0YXR1cygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBhdXRvd2lkdGgg5pe277yM6KGo5aS05a695bqm5L6d5o2u5YaF5a655a695bqm5L2c5ZCM5q2l5aSE55CGXHJcbiAgICAgICAgdGhpcy5zZXROZXdDb2x1bW5zV2lkdGgoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkRGF0YVN1Y2Nlc3MoKTtcclxuICAgIH1cclxuICAgIC8qKiDmoLnmja7lhoXlrrnoh6rliqjlrr3luqbvvIzpu5jorqQgZmFsc2U7XHJcbiAgICAgKiDmraTlsZ7mgKflvIDlkK/lkI7vvIzoh6rliqjliJflrr3lpLHmlYhcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgYXV0b1dpZHRoID0gZmFsc2U7XHJcblxyXG4gICAgQENvbnRlbnRDaGlsZHJlbihGYXJyaXNUZW1wbGF0ZURpcmVjdGl2ZSkgdGVtcGxhdGVzOiBRdWVyeUxpc3Q8RmFycmlzVGVtcGxhdGVEaXJlY3RpdmU+O1xyXG4gICAgQENvbnRlbnRDaGlsZHJlbihUcmVlVGFibGVDb2x1bW5EaXJlY3RpdmUpIGNvbHVtbnNSZWY6IFF1ZXJ5TGlzdDxUcmVlVGFibGVDb2x1bW5EaXJlY3RpdmU+O1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2hlYWRlckJveCcpIGhlYWRlckJveDogRWxlbWVudFJlZjtcclxuICAgIEBWaWV3Q2hpbGQoJ3Jlc2l6ZXJIZWxwZXInKSByZXNpemVySGVscGVyVkM6IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdoZWFkZXJUYWJsZScpIGhlYWRlclRhYmxlOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnYm9keVRhYmxlJykgYm9keVRhYmxlOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2lucHV0R3JvdXAnKSBpbnB1dEdyb3VwOiBJbnB1dEdyb3VwQ29tcG9uZW50O1xyXG4gICAgQFZpZXdDaGlsZChQZXJmZWN0U2Nyb2xsYmFyQ29tcG9uZW50KSBwc1JlZj86IFBlcmZlY3RTY3JvbGxiYXJDb21wb25lbnQ7XHJcblxyXG4gICAgcHJpdmF0ZSBoZWFkZXJDaGVja2JveENtcDogVHJlZVRhYmxlSGVhZGVyQ2hlY2tib3hDb21wb25lbnQ7XHJcbiAgICBAVmlld0NoaWxkKCdhbGxDaGVja2JveCcpIHNldCBhbGxDaGVja2JveChjb250ZW50OiBUcmVlVGFibGVIZWFkZXJDaGVja2JveENvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuaGVhZGVyQ2hlY2tib3hDbXAgPSBjb250ZW50O1xyXG4gICAgfVxyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ25vZGVzcGFnZXJiYXInKSBub2Rlc1BhZ2VyQmFyOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgQFZpZXdDaGlsZChGYXJyaXNDb250ZXh0TWVudURpcmVjdGl2ZSkgY3R4TWVudTogRmFycmlzQ29udGV4dE1lbnVEaXJlY3RpdmU7XHJcbiAgICAvKipcclxuICAgICAqIOihqOWktOaooeadv1xyXG4gICAgICovXHJcbiAgICBoZWFkZXJUZW1wbGF0ZTogVGVtcGxhdGVSZWY8YW55PjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIOihqOS9k+aooeadv1xyXG4gICAgICovXHJcbiAgICBib2R5VGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG4gICAgLyoqIOmAieS4remhuembhuWQiCAqL1xyXG4gICAgcHJpdmF0ZSBfc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgZ2V0IHNlbGVjdGlvbnMoKTogVHJlZU5vZGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbnM7XHJcbiAgICB9XHJcbiAgICBzZXQgc2VsZWN0aW9ucyh2YWxzOiBUcmVlTm9kZVtdKSB7XHJcbiAgICAgICAgaWYgKHZhbHMgJiYgdmFscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8g6L+H5ruk5o6J5pWw5o2u5rqQ5Lit5LiN5a2Y5Zyo6IqC54K5XHJcbiAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbnMgPSB2YWxzLmZpbHRlcih0biA9PiB0biAmJiB0aGlzLmZpbmRSb3dOb2RlKHRuLmlkKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuX3NlbGVjdGlvbnMubWFwKHRuID0+IHRuLmlkKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpZHMubGVuZ3RoICE9PSB0aGlzLnNlbGVjdFZhbHVlcy5sZW5ndGggfHxcclxuICAgICAgICAgICAgICAgIChpZHMubGVuZ3RoID09PSB0aGlzLnNlbGVjdFZhbHVlcy5sZW5ndGggJiYgdGhpcy5kaWZmZXJlbmNlKGlkcywgdGhpcy5zZWxlY3RWYWx1ZXMpLmxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWVzID0gaWRzO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RWYWx1ZXNDaGFuZ2UuZW1pdChpZHMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWVzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWVzQ2hhbmdlLmVtaXQoW10pO1xyXG5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOmAieS4remhuee0ouW8lVxyXG4gICAgICovXHJcbiAgICBzZWxlY3RSb3dJbmRleCA9IC0xO1xyXG5cclxuICAgIC8qKiDpgInkuK3lvZPliY3ooYwgKi9cclxuICAgIHByaXZhdGUgX3NlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgIGdldCBzZWxlY3RlZFJvdygpOiBUcmVlTm9kZSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkUm93O1xyXG4gICAgfVxyXG5cclxuICAgIHNldCBzZWxlY3RlZFJvdyh0cmVlTm9kZTogVHJlZU5vZGUpIHtcclxuICAgICAgICB0aGlzLl9zZWxlY3RlZFJvdyA9IHRyZWVOb2RlO1xyXG4gICAgICAgIGlmICh0cmVlTm9kZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RWYWx1ZSAhPT0gdHJlZU5vZGUuaWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWUgPSB0cmVlTm9kZS5pZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWVDaGFuZ2UuZW1pdCh0cmVlTm9kZS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RWYWx1ZUNoYW5nZS5lbWl0KG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqIOmSqemAieeahOiusOW9lembhuWQiCAqL1xyXG4gICAgcHJpdmF0ZSBfY2hlY2tlZHMgPSBbXTtcclxuICAgIGdldCBjaGVja2VkcygpOiBUcmVlTm9kZVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tlZHM7XHJcbiAgICB9XHJcbiAgICBzZXQgY2hlY2tlZHModHJlZU5vZGVzOiBUcmVlTm9kZVtdKSB7XHJcbiAgICAgICAgaWYgKHRyZWVOb2RlcyAmJiB0cmVlTm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZWRzID0gdHJlZU5vZGVzLmZpbHRlcih0biA9PiB0aGlzLmZpbmRSb3dOb2RlKHRuLmlkKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGlkcyA9IHRoaXMuX2NoZWNrZWRzLm1hcCh0biA9PiB0bi5pZCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMgPSB0aGlzLmNoZWNrVmFsdWVzIHx8IFtdO1xyXG4gICAgICAgICAgICBpZiAoaWRzLmxlbmd0aCAhPT0gdGhpcy5jaGVja1ZhbHVlcy5sZW5ndGggfHwgIChpZHMubGVuZ3RoID09PSB0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCAmJiB0aGlzLmRpZmZlcmVuY2UoaWRzLCB0aGlzLmNoZWNrVmFsdWVzKS5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzID0gaWRzO1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KGlkcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoZWNrZWRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tWYWx1ZXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5pyA5aSW5bGCRElWXHJcbiAgICBjb250YWluZXJFbGVtZW50OiBIVE1MRGl2RWxlbWVudDtcclxuXHJcbiAgICAvLyDorrDlvZXliJfmi5bliqjliY3nmoTkvY3nva5cclxuICAgIGxhc3RSZXNpemVySGVscGVyWDogbnVtYmVyO1xyXG5cclxuICAgIHNlYXJjaERhdGEgPSB7IGZpZWxkOiAnKicsIHZhbHVlOiAnJyB9O1xyXG5cclxuICAgIHNjb3JsbEJvZHlIZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBzZWFyY2hIYW5kbGU6IFNlYXJjaEhhbmRsZTtcclxuICAgIHNlYXJjaEJ1dHRvblRleHQgPSAnPGkgY2xhc3M9XCJmLWljb24gZi1pY29uLXNlYXJjaFwiPjwvaT4nO1xyXG4gICAgLyoqIOaYvuekuuafpeivouW3peWFt+adoSAqL1xyXG4gICAgc2hvd0ZpbmRJbnB1dCA9IGZhbHNlO1xyXG5cclxuICAgIHByaXZhdGUgaXNEYXRhQ2hhbmdlZCA9IGZhbHNlO1xyXG5cclxuICAgIHNjcm9sbExvYWRlcjogVmlydHVhbGl6ZWRMb2FkZXJTZXJ2aWNlO1xyXG4gICAgdG9wSGlkZUhlaWdodCA9IDA7XHJcbiAgICBib3R0b21IaWRlSGVpZ2h0ID0gMDtcclxuICAgIHN0YXRlID0ge1xyXG4gICAgICAgIHNlYXJjaFJvd05vZGVzOiBudWxsLFxyXG4gICAgICAgIHNlYXJjaGVkOiBmYWxzZSxcclxuICAgICAgICByb3dOb2RlczogW10sXHJcbiAgICAgICAgc2Nyb2xsWTogMCxcclxuICAgICAgICBzY3JvbGxYOiAwXHJcbiAgICB9O1xyXG5cclxuICAgIC8qKiDlvoXmn6Xor6LnmoTmlofmnKwgKi9cclxuICAgIGZpbmRWYWx1ZSA9ICcnO1xyXG4gICAgLyoqIOe7k+aenOaAu+aVsCAqL1xyXG4gICAgZmluZENvdW50ID0gMDtcclxuICAgIC8qKiDlvZPliY3ntKLlvJUgKi9cclxuICAgIGZpbmRDdXJyZW50ID0gMDtcclxuICAgIC8qKiDlrZjlgqjmlofmnKzmn6Xor6Lnu5PmnpwgKi9cclxuICAgIGZpbmRSZXN1bHQgPSBbXTtcclxuICAgIHByaXZhdGUgcm86IFJlc2l6ZU9ic2VydmVyIHwgbnVsbCA9IG51bGw7XHJcbiAgICBwcml2YXRlIGZpbmRLZXlzSGFuZGxlciA9IG51bGw7XHJcbiAgICBwcml2YXRlIF9ob3RLZXlzOiBUVEhvdGtleXMgPSBudWxsO1xyXG4gICAgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZTtcclxuICAgIHByaXZhdGUgaWRTZXJ2aWNlOiBJZFNlcnZpY2U7XHJcbiAgICBwcml2YXRlIHN0eWxlU2hlZXRJZCA9ICd0cmVldGFibGUtc3R5bGUtJztcclxuICAgIHByaXZhdGUgc3R5bGVFbGVtZW50O1xyXG5cclxuICAgIC8vIOiwg+aVtOaooeadv++8jOatpOWxnuaAp+S7heS4uuW4ruWKqeS4reeahOagkee7hOS7tlxyXG4gICAgZmFzdCA9IGZhbHNlO1xyXG5cclxuICAgIHBhZ2luYXRpb25PcHRpb25zOiBQYWdpbmF0aW9uSW5zdGFuY2UgPSB7XHJcbiAgICAgICAgaWQ6ICdGYXJyaXMtVHJlZVRhYmxlLVBhZ2luYXRpb25fJyxcclxuICAgICAgICBpdGVtc1BlclBhZ2U6IHRoaXMucGFnZVNpemUsXHJcbiAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucGFnZUluZGV4LFxyXG4gICAgICAgIHBhZ2VMaXN0OiB0aGlzLnBhZ2VMaXN0LFxyXG4gICAgICAgIHRvdGFsSXRlbXM6IHRoaXMudG90YWwsXHJcbiAgICAgICAgcmVtb3RlOiB0aGlzLnBhZ2VyT25TZXJ2ZXJcclxuICAgIH07XHJcblxyXG4gICAgc2VsZWN0Tm9kZUNoYW5nZWRTdWJqZWN0ID0gbmV3IEJlaGF2aW9yU3ViamVjdChudWxsKTtcclxuICAgIHByaXZhdGUgX1VVSUQgPSAnJztcclxuICAgIC8vIOaYr+WQpuacieWbuuWumuWIl1xyXG4gICAgZml4ZWRDb2x1bW5zID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGRlc3Ryb3kkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHByaXZhdGUgZmFycmlzSW5zdGFuY2VzOiBGYXJyaXNDb21wb25lbnRJbnN0YW5jZVNlcnZpY2UgPSBudWxsO1xyXG4gICAgZGlmZmVyZW5jZSA9IChmaXJzdDogYW55W10sIHNlY29uZDogYW55W10pID0+IGZpcnN0LmZpbHRlcihpdGVtID0+ICFzZWNvbmQuc29tZShzZWNvbmRJdGVtID0+IHNlY29uZEl0ZW0gPT0gaXRlbSkpO1xyXG4gICAgcHJpdmF0ZSBkZWJ1Z1NlcjogRGVidWdTZXJ2aWNlID0gbnVsbDtcclxuXHJcbiAgICBwcml2YXRlIGZpbHRlclJvd0NvbmRpdGlvbnMgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHVibGljIHR0U2VydmljZTogVHJlZXRhYmxlU2VydmljZSwgcHVibGljIGVsOiBFbGVtZW50UmVmLFxyXG4gICAgICAgIHB1YmxpYyByZXNpemVTZXI6IFJlc2l6ZVNlcnZpY2UsIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBwdWJsaWMgdXRpbHM6IENvbW1vblV0aWxzLCBwdWJsaWMgY29sRm9ybWF0U2VyOiBDb2x1bW5Gb3JtYXRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgc2hvcnRjdXRzOiBUVEhvdGtleXMsIHByaXZhdGUgY2RSZWY6IENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUgPSBuZXcgU2VhcmNoSGFuZGxlKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsTG9hZGVyID0gbmV3IFZpcnR1YWxpemVkTG9hZGVyU2VydmljZSh0aGlzKTtcclxuICAgICAgICBpZiAodGhpcy5pbmplY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLl9ob3RLZXlzID0gdGhpcy5pbmplY3Rvci5nZXQoVFRIb3RrZXlzLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5sb2NhbGVTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoTG9jYWxlU2VydmljZSwgbnVsbCk7XHJcbiAgICAgICAgICAgIHRoaXMuaWRTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoSWRTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5mYXJyaXNJbnN0YW5jZXMgPSB0aGlzLmluamVjdG9yLmdldChGYXJyaXNDb21wb25lbnRJbnN0YW5jZVNlcnZpY2UsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5pZFNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5fVVVJRCA9IHRoaXMuaWRTZXJ2aWNlLnV1aWQoKTtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZVNoZWV0SWQgKz0gdGhpcy5pZFNlcnZpY2UudXVpZCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX1VVSUQgPSAoJycgKyBNYXRoLnJhbmRvbSgpKS5zbGljZSgyKTtcclxuICAgICAgICAgICAgdGhpcy5zdHlsZVNoZWV0SWQgKz0gKCcnICsgTWF0aC5yYW5kb20oKSkuc2xpY2UoMik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnR0U2VydmljZSA9IG5ldyBUcmVldGFibGVTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGVidWdTZXIgPSB0aGlzLmluamVjdG9yLmdldChEZWJ1Z1NlcnZpY2UsIG51bGwpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnU2VyLnVzZURlYnVnTW9kZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB3cml0ZUNvbnNvbGUobXNnLCB0eXBlOiAnaW5mbyd8J2xvZyd8J3dhcm4nfCdlcnJvcicgPSAnd2FybicpIHtcclxuICAgICAgICBpZiAodGhpcy5kZWJ1Z1Nlcikge1xyXG4gICAgICAgICAgICB0aGlzLmRlYnVnU2VyW3R5cGVdKG1zZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tPcHRvbnMoKSB7XHJcbiAgICAgICAgLy8g5ZCv55So5pWw5o2u5oqY6KGM5ZCO77yM6Jma5ouf5riy5p+T5Yqf6IO95aSx5pWIXHJcbiAgICAgICAgaWYgKCF0aGlzLm5vd3JhcCkge1xyXG4gICAgICAgICAgICB0aGlzLnZpcnR1YWxpemVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5yZVNldFNpemUoKTtcclxuICAgICAgICAgICAgdGhpcy5zZXRTY29ybGxCb2R5SGVpZ2h0KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2luZ2xlU2VsZWN0ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QgJiYgdGhpcy5zaG93Q2hlY2tib3gpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja09uU2VsZWN0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RPbkNoZWNrID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5iZWZvcmVTb3J0Q29sdW1uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlU29ydENvbHVtbiA9ICgpID0+IG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZml0KSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnZi11dGlscy1maWxsLWZsZXgtY29sdW1uJyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudEVsID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgfHwgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnRFbCkge1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhwYXJlbnRFbCwgJ2YtdXRpbHMtZmlsbCcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZShwYXJlbnRFbCwgJ292ZXJmbG93JywgJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlQ2xpY2tOb2RlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYmVmb3JlQ2xpY2tOb2RlID0gKCkgPT4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuYmVmb3JlQ2hlY2tBbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVDaGVja0FsbCA9ICgpID0+IG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmJlZm9yZVVuQ2hlY2tBbGwpIHtcclxuICAgICAgICAgICAgdGhpcy5iZWZvcmVVbkNoZWNrQWxsID0gKCkgPT4gb2YodHJ1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5hdXRvV2lkdGgpIHtcclxuICAgICAgICAgICAgdGhpcy5maXRDb2x1bW5zID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXphYmxlQ29sdW1ucyA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmRpc2FibGVkUm93KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGlzYWJsZWRSb3cgPSAoKSA9PiBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zZWFyY2hBbnlGaWVsZCAmJiB0aGlzLnNlYXJjaEZpZWxkcyAmJiB0aGlzLnNlYXJjaEZpZWxkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hEYXRhLmZpZWxkID0gdGhpcy5zZWFyY2hGaWVsZHNbMF0ubGFiZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuaWQgPSAnVHJlZXRhYmxlLScgKyB0aGlzLl9VVUlEO1xyXG4gICAgICAgIC8vIOWIm+W7uiBzdHlsZXNoZWV0XHJcbiAgICAgICAgdGhpcy5zdHlsZUVsZW1lbnQgPSB0aGlzLnV0aWxzLmNyZWF0ZVN0eWxlU2hlZXQodGhpcy5zdHlsZVNoZWV0SWQpO1xyXG4gICAgICAgIHRoaXMuY2hlY2tDb2x1bW5PcHRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja09wdG9ucygpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5uZ1pvbmUpIHtcclxuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ybyA9IG5ldyBSZXNpemVPYnNlcnZlcigoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJpZXMgJiYgZW50cmllc1swXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB3aWR0aCwgaGVpZ2h0IH0gPSBlbnRyaWVzWzBdLmNvbnRlbnRSZWN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gIGVudHJpZXNbMF0udGFyZ2V0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpdCAmJiB0YXJnZXRbJ29mZnNldFBhcmVudCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemUoeyB3aWR0aCwgaGVpZ2h0OiB0aGlzLnNob3dCb3JkZXI/IGhlaWdodCAtIDIgOiBoZWlnaHQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8g6KGo5Y2V5YiH5o2i5ZCO77yM5aaC5p6c5pyJ6YCJ5Lit6KGM77yM5YiZ5pu05paw5rua5Yqo5p2h5L2N572uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50Tm9kZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucm8ub2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucyA9IHRoaXMuaW5pdFBhZ2luYXRpb25PcHRpb25zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucm8pIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvLnVub2JzZXJ2ZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucGFyZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yby5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucm8gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmluZEtleXNIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZEtleXNIYW5kbGVyLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnV0aWxzLnJlbW92ZVN0eWxlU2hlZXQodGhpcy5zdHlsZVNoZWV0SWQpO1xyXG4gICAgICAgIHRoaXMuc3R5bGVFbGVtZW50ID0gbnVsbDtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZmFycmlzSW5zdGFuY2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmFycmlzSW5zdGFuY2VzLmRlc3Ryb3kodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudHRTZXJ2aWNlID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5kZXN0cm95JC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5kYXRhICYmICFjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNEYXRhQ2hhbmdlZCA9IGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuZGF0YS5wcmV2aW91c1ZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMubXVsdGlTZWxlY3QgJiYgIWNoYW5nZXMubXVsdGlTZWxlY3QuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2luZ2xlU2VsZWN0ID0gIWNoYW5nZXMubXVsdGlTZWxlY3QuY3VycmVudFZhbHVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QgJiYgdGhpcy5zaG93Q2hlY2tib3gpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0T25DaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrT25TZWxlY3QgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5kaXNhYmxlZCAmJiAhY2hhbmdlcy5kaXNhYmxlZC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5ob3ZlcmVkID0gIWNoYW5nZXMuZGlzYWJsZWQuY3VycmVudFZhbHVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZW5hYmxlRmluZFRleHQgJiYgIWNoYW5nZXMuZW5hYmxlRmluZFRleHQuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0RmluZFRleHQoY2hhbmdlcy5lbmFibGVGaW5kVGV4dC5jdXJyZW50VmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2VsZWN0VmFsdWUgJiYgIWNoYW5nZXMuc2VsZWN0VmFsdWUuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Tm9kZShjaGFuZ2VzLnNlbGVjdFZhbHVlLmN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNlbGVjdFZhbHVlcyAmJiAhY2hhbmdlcy5zZWxlY3RWYWx1ZXMuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Tm9kZXMoY2hhbmdlcy5zZWxlY3RWYWx1ZXMuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuY2hlY2tWYWx1ZXMgJiYgIWNoYW5nZXMuY2hlY2tWYWx1ZXMuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZE5vZGVzKGNoYW5nZXMuY2hlY2tWYWx1ZXMuY3VycmVudFZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnBhZ2VJbmRleCAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLnBhZ2VJbmRleC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5wYWdpbmF0aW9uT3B0aW9ucywge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFBhZ2U6IHRoaXMucGFnZUluZGV4XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMucGFnZVNpemUgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5wYWdlU2l6ZS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5wYWdpbmF0aW9uT3B0aW9ucywge1xyXG4gICAgICAgICAgICAgICAgaXRlbXNQZXJQYWdlOiB0aGlzLnBhZ2VTaXplXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMucGFnZUxpc3QgIT09IHVuZGVmaW5lZCAmJiAhY2hhbmdlcy5wYWdlTGlzdC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5wYWdpbmF0aW9uT3B0aW9ucywge1xyXG4gICAgICAgICAgICAgICAgcGFnZUxpc3Q6IHRoaXMucGFnZUxpc3RcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy50b3RhbCAhPT0gdW5kZWZpbmVkICYmICFjaGFuZ2VzLnRvdGFsLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnBhZ2luYXRpb25PcHRpb25zID0gT2JqZWN0LmFzc2lnbih0aGlzLnBhZ2luYXRpb25PcHRpb25zLCB7XHJcbiAgICAgICAgICAgICAgICB0b3RhbEl0ZW1zOiB0aGlzLnRvdGFsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZml0Q29sdW1ucyAmJiAhY2hhbmdlcy5maXRDb2x1bW5zLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFRhYmxlV2lkdGgodGhpcy5hbGxDb2x1bW5zV2lkdGgoKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5jb2x1bW5zICYmICFjaGFuZ2VzLmNvbHVtbnMuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tDb2x1bW5PcHRpb24oKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnNob3dCb3JkZXIgJiYgIWNoYW5nZXMuc2hvd0JvcmRlci5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5yZVNldFNpemUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xyXG4gICAgICAgIC8vIGlmICh0aGlzLmlzRGF0YUNoYW5nZWQpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5sb2FkZWREYXRhLmVtaXQoKTtcclxuICAgICAgICAvLyAgICAgdGhpcy5pc0RhdGFDaGFuZ2VkID0gZmFsc2U7XHJcbiAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKHRoaXMucHNSZWYpIHtcclxuICAgICAgICAvLyAgICAgICAgICAgICB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZi51cGRhdGUoKTtcclxuICAgICAgICAvLyAgICAgICAgIH1cclxuICAgICAgICAvLyAgICAgfSk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcclxuICAgICAgICB0aGlzLnRlbXBsYXRlcy5mb3JFYWNoKChpdGVtKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaXRlbS5nZXRUeXBlKCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hlYWRlcic6XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdib2R5JzpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvZHlUZW1wbGF0ZSA9IGl0ZW0udGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uc1JlZi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gdGhpcy50dGMyY29sdW1ucyh0aGlzLmNvbHVtbnNSZWYpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zUmVmLmNoYW5nZXMuc3Vic2NyaWJlKChkOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHRoaXMudHRjMmNvbHVtbnMoZCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb250YWluZXJFbGVtZW50ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mYXJyaXMtdHJlZXRhYmxlJyk7XHJcbiAgICAgXHJcbiAgICAgICAgdGhpcy5yZWdpc3RlclNob3J0Y3V0cygpO1xyXG5cclxuICAgICAgICAvLyBhdXRvd2lkdGgg5pe277yM6KGo5aS05a695bqm5L6d5o2u5YaF5a655a695bqm5L2c5ZCM5q2l5aSE55CGXHJcbiAgICAgICAgdGhpcy5zZXROZXdDb2x1bW5zV2lkdGgoKTtcclxuICAgICAgICB0aGlzLnNldFJpZ2h0Rml4ZWRDb2x1bW5TaGFkb3coKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZWwgJiYgdGhpcy5mYXJyaXNJbnN0YW5jZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5mYXJyaXNJbnN0YW5jZXMuYWRkKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5ib2R5VGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgdGhpcy51dGlscy5hcHBlbmRDc3NSdWxlcyhbYCMke3RoaXMuaWR9IC5mYXJyaXMtdHJlZXRhYmxlIC5mYXJyaXMtdHJlZXRhYmxlLXRib2R5IHRkIHtwYWRkaW5nOiAuMjVyZW0gMC43NXJlbTt9YF0sIHRoaXMuc3R5bGVFbGVtZW50LnNoZWV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOWFvOWuueaXp+eJiOiuvuiuoeWZqCAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMuZml0ICYmIHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnRFbGVtZW50Lm5vZGVOYW1lICE9PSAnRElWJykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQubm9kZU5hbWUgPT09ICdBUFAtREctVFJFRS1HUklEJykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZGl2ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQuY2xvc2VzdCgnZGl2Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGl2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGl2LnN0eWxlLm92ZXJmbG93ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMubG9hZERhdGFTdWNjZXNzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkRGF0YVN1Y2Nlc3MoKSB7XHJcbiAgICAgICAgdGltZXIodGhpcy5sb2FkZWRUaW1lcikucGlwZShcclxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpXHJcbiAgICAgICAgKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5wc1JlZiAmJiB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYudXBkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5sb2FkZWREYXRhLmVtaXQoKTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHNldE5ld0NvbHVtbnNXaWR0aCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYXV0b1dpZHRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV3Q29sV2lkdGg6IGFueSA9IHt9O1xyXG4gICAgICAgIGxldCBoZWFkZXJDZWxscyA9IFtdO1xyXG4gICAgICAgIGxldCBmaXJzdFJvd0NlbGxzID0gW107XHJcbiAgICAgICAgLy8gbGV0IGNvbGdyb3VwcyA9IFtdO1xyXG4gICAgICAgIGlmICh0aGlzLnNob3dIZWFkZXIgJiYgdGhpcy5oZWFkZXJUYWJsZSkge1xyXG4gICAgICAgICAgICBoZWFkZXJDZWxscyA9IEFycmF5LmZyb208SFRNTEVsZW1lbnQ+KHRoaXMuaGVhZGVyVGFibGUubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCd0aCcpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuc2VyaWFsaXplZFZhbHVlICYmIHRoaXMuc2VyaWFsaXplZFZhbHVlLmxlbmd0aCAmJiB0aGlzLmJvZHlUYWJsZSkge1xyXG4gICAgICAgICAgICBmaXJzdFJvd0NlbGxzID0gQXJyYXkuZnJvbTxIVE1MRWxlbWVudD4odGhpcy5ib2R5VGFibGUubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCd0cicpLnF1ZXJ5U2VsZWN0b3JBbGwoJ3RkJykpO1xyXG4gICAgICAgICAgICAvLyBjb2xncm91cHMgPSB0aGlzLmJvZHlUYWJsZS5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2NvbGdyb3VwJykucXVlcnlTZWxlY3RvckFsbCgnY29sJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaXJzdFJvd0NlbGxzLmZvckVhY2goKHRkOiBhbnksIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IHRkLmdldEF0dHJpYnV0ZSgnZmllbGQnKTtcclxuICAgICAgICAgICAgbGV0IGNvbFdpZHRoID0gdGQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGgudG9GaXhlZCgyKTtcclxuICAgICAgICAgICAgbmV3Q29sV2lkdGhbZmllbGROYW1lXSA9IGNvbFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29sID0gdGhpcy5jb2x1bW5zLmZpbmQoYyA9PiBjLmZpZWxkID09PSBmaWVsZE5hbWUpO1xyXG4gICAgICAgICAgICBpZiAoY29sICYmIGNvbC53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBjb2xXaWR0aCA9IGNvbFdpZHRoID4gY29sLndpZHRoID8gY29sV2lkdGggOiBjb2wud2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRkLnN0eWxlLm1pbldpZHRoID0gY29sV2lkdGggKyAncHgnO1xyXG4gICAgICAgICAgICBoZWFkZXJDZWxsc1tpbmRleF0uc3R5bGUud2lkdGggPSBjb2xXaWR0aCArICdweCc7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgY29sV2lkdGhUb3RhbCA9IHRoaXMuYWxsQ29sdW1uc1dpZHRoKCk7XHJcbiAgICAgICAgdGhpcy5zZXRUYWJsZVdpZHRoKGNvbFdpZHRoVG90YWwpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbHVtbklzVmlzaWJsZShjb2wpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy50dFNlcnZpY2UuY29sdW1uSXNWaXNpYmxlKGNvbCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgY29sdW1uQ3NzTmFtZShuOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gYCMke3RoaXMuaWR9IC50cmVldGFibGUtY2VsbFtmaWVsZD1cIiR7bi5maWVsZH1cIl0sICMke3RoaXMuaWR9IC50cmVldGFibGUtaGVhZGVyLWNlbGxbZmllbGQ9XCIke24uZmllbGR9XCJdOm5vdCguZ3JvdXAtaGVhZGVyLWNlbGwpYDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja0dyb3VwQ29sdW1ucygpIHtcclxuICAgICAgICB2YXIgaSA9IHRoaXMuZ3JvdXBDb2x1bW5zLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgd2hpbGUoaSA+PSAwKSB7XHJcbiAgICAgICAgICAgIHZhciBpZHMgPSB0aGlzLmdyb3VwQ29sdW1uc1tpXS5tYXAobiA9PiBuLnBhcmVudElkKTtcclxuICAgICAgICAgICAgaWRzID0gQXJyYXkuZnJvbShuZXcgU2V0KGlkcykpO1xyXG4gICAgICAgICAgICBpZHMubWFwKGlkID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkQ29scyA9IHRoaXMuZ3JvdXBDb2x1bW5zW2ldLmZpbHRlcihuID0+IG4ucGFyZW50SWQgPT0gaWQpLm1hcChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhRmllbGQgPSB0aGlzLmNvbHVtbnMuZmluZChjID0+IGMuaWQgPT09IG4uaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRhRmllbGQgfHwgbjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgXHJcbiAgICAgICAgICAgICAgICAgICAgaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGNoaWxkQ29scy5yZWR1Y2UoKHIsYykgPT4geyByZXR1cm4gcis9Yy53aWR0aCB9LCAwKSxcclxuICAgICAgICAgICAgICAgICAgICBsZWZ0OiBjaGlsZENvbHNbMF0ubGVmdCxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogY2hpbGRDb2xzW2NoaWxkQ29scy5sZW5ndGggLSAxXS5yaWdodCB8fCAwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9KS5mb3JFYWNoKHAgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgLSAxID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcENvbCA9IHRoaXMuZ3JvdXBDb2x1bW5zW2ktMV0uZmluZChwYyA9PiBwYy5pZCA9PSBwLmlkKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhRmllbGQgPSB0aGlzLmNvbHVtbnMuZmluZChjID0+IGMuaWQgPT09IHAuaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBDb2wgPSBkYXRhRmllbGQgfHwgcENvbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcENvbC53aWR0aCA9IHAud2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBDb2wuZml4ZWQgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwQ29sLmxlZnQgPSBwLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwQ29sLmZpeGVkID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBDb2wucmlnaHQgPSBwLnJpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGktLTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5oyJ5Zu65a6a5YiX55qE6aG65bqP5o6S5bqPXHJcbiAgICBwcml2YXRlIHNvcnRDb2x1bW5zQnlGaXhlZCh1cGRhdGVDb2x1bW5zID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IGZpeGVkTGVmdCA9IHRoaXMuY29sdW1ucy5maWx0ZXIobiA9PiBuLmZpeGVkID09PSAnbGVmdCcpO1xyXG4gICAgICAgIGNvbnN0IGZpeGVkQ2VudGVyID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+ICFuLmZpeGVkIHx8IG4uZml4ZWQgPT09ICdjZW50ZXInKTtcclxuICAgICAgICBjb25zdCBmaXhlZFJpZ2h0ID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+IG4uZml4ZWQgPT09ICdyaWdodCcpO1xyXG5cclxuICAgICAgICBpZiAoZml4ZWRMZWZ0ICYmIGZpeGVkTGVmdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZml4ZWRMZWZ0LmZvckVhY2goKG4sIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLmxlZnQgPSBmaXhlZExlZnQucmVkdWNlKChyLCBjLCBpKT0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIgKz0gYy53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5sZWZ0ID0gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZml4ZWRSaWdodCAmJiBmaXhlZFJpZ2h0Lmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IHJpZ2h0V2lkdGhUb3RhbCA9IGZpeGVkUmlnaHQucmVkdWNlKChyLCBjKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gciArIGMud2lkdGg7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG5cclxuICAgICAgICAgICAgZml4ZWRSaWdodC5mb3JFYWNoKChuLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmlnaHRXaWR0aFRvdGFsIC09IG4ud2lkdGg7XHJcbiAgICAgICAgICAgICAgICBuLnJpZ2h0ID0gcmlnaHRXaWR0aFRvdGFsO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG5cclxuXHJcbiAgICAgICAgaWYgKHVwZGF0ZUNvbHVtbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gZml4ZWRMZWZ0LmNvbmNhdChmaXhlZENlbnRlcikuY29uY2F0KGZpeGVkUmlnaHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNoZWNrQ29sdW1uT3B0aW9uKCkge1xyXG4gICAgICAgIGNvbnN0IGNzc1J1bGVzID0gW107XHJcblxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vIOWQr+eUqOWIhumhteWKoOi9veWtkOiKgueCuVxyXG4gICAgICAgIGlmICh0aGlzLnBhZ2luYXRpb25Gb3JDaGlsZHJlbikge1xyXG4gICAgICAgICAgICBjb25zdCBwYWdlckJhckNvbDogYW55ID0ge1xyXG4gICAgICAgICAgICAgICAgZmllbGQ6IE5PREVTX1BBR0VSX0NPTFVNTl9GSUVMRCxcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxNjAsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJycsXHJcbiAgICAgICAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcy5ub2Rlc1BhZ2VyQmFyLFxyXG4gICAgICAgICAgICAgICAgcm93c3BhbjogMSxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudXNlR3JvdXBIZWFkZXIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwQ29sdW1uc1swXVt0aGlzLmdyb3VwQ29sdW1uc1swXS5sZW5ndGggLSAxXS5maXhlZCA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIHBhZ2VyQmFyQ29sLmZpeGVkID0gJ3JpZ2h0JztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHBhZ2VyQmFyQ29sLnJvd3NwYW4gPSB0aGlzLmdyb3VwQ29sdW1ucy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwQ29sdW1uc1swXS5wdXNoKHBhZ2VyQmFyQ29sKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmNvbHVtbnMucHVzaChwYWdlckJhckNvbCk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmZpdENvbHVtbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5zb3J0Q29sdW1uc0J5Rml4ZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuLnZpc2libGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgbi52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKG5bJ2hhbGlnbiddKSB7XHJcbiAgICAgICAgICAgICAgICBuLmhBbGlnbiA9IG5bJ2hhbGlnbiddO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAobi53aWR0aCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBuLndpZHRoID0gMTAwO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIW4uaWQpIHtcclxuICAgICAgICAgICAgICAgIG4uaWQgPSAndHJlZXRhYmxlLWhlYWRlci0nICsgKG4uZmllbGQgfHwgaSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY29sV2lkdGhUb3RhbCA9IHRoaXMuYWxsQ29sdW1uc1dpZHRoKCk7XHJcbiAgICAgICAgbGV0IGZpeGVkQ29scyA9IDA7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpeGVkUmlnaHRDb2x1bW5zID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+IG4uZml4ZWQgPT09ICdyaWdodCcpO1xyXG4gICAgICAgIGlmIChmaXhlZFJpZ2h0Q29sdW1ucyAmJiBmaXhlZFJpZ2h0Q29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZml4ZWRSaWdodENvbHVtbnNbMF1bJ3JpZ2h0U2hhZG93Q29sJ10gPSB0cnVlO1xyXG4gICAgICAgICAgICBmaXhlZFJpZ2h0Q29sdW1uc1tmaXhlZFJpZ2h0Q29sdW1ucy5sZW5ndGggLSAxXVsnbGFzdENvbHVtbiddID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5zICYmIHRoaXMuY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1uc1t0aGlzLmNvbHVtbnMubGVuZ3RoIC0gMV1bJ2xhc3RDb2x1bW4nXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZpeGVkTGVmdENvbHVtbnMgPSB0aGlzLmNvbHVtbnMuZmlsdGVyKG4gPT4gbi5maXhlZCA9PT0gJ2xlZnQnKTtcclxuICAgICAgICBpZiAoZml4ZWRMZWZ0Q29sdW1ucyAmJiBmaXhlZExlZnRDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBmaXhlZExlZnRDb2x1bW5zW2ZpeGVkTGVmdENvbHVtbnMubGVuZ3RoIC0gMV1bJ2xlZnRTaGFkb3dDb2wnXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmaXhlZENvbHMgPSB0aGlzLnNldENlbGxXaWR0aENzcyhjb2xXaWR0aFRvdGFsLCBmaXhlZENvbHMsIGNzc1J1bGVzKTtcclxuICAgICAgICB0aGlzLnNldFRhYmxlV2lkdGgoY29sV2lkdGhUb3RhbCk7XHJcblxyXG4gICAgICAgIHRoaXMuZml4ZWRDb2x1bW5zID0gISFmaXhlZENvbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRDZWxsV2lkdGhDc3MoY29sV2lkdGhUb3RhbDogYW55LCBmaXhlZENvbHM6IG51bWJlciwgY3NzUnVsZXM6IGFueVtdKSB7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmNvbHVtbnMuZm9yRWFjaCgobiwgaW5kZXgpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaXNWaXNpYmxlID0gdGhpcy5jb2x1bW5Jc1Zpc2libGUobik7XHJcbiAgICAgICAgICAgIGNvbnN0IHJ1bGVOYW1lID0gdGhpcy5jb2x1bW5Dc3NOYW1lKG4pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY3NzUnVsZSA9IHRoaXMudXRpbHMuZ2V0Q3NzUnVsZShydWxlTmFtZSwgdGhpcy5zdHlsZUVsZW1lbnQuc2hlZXQpO1xyXG4gICAgICAgICAgICBpZiAoIWNzc1J1bGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzdHlsZWNzcyA9IHJ1bGVOYW1lICsgJyB7ICc7XHJcbiAgICAgICAgICAgICAgICBzdHlsZWNzcyArPSBpc1Zpc2libGUgPyAnJyA6ICdkaXNwbGF5OiBub25lOyc7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZml0Q29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlY3NzICs9IGB3aWR0aDogJHsobi53aWR0aCAvIGNvbFdpZHRoVG90YWwgKiAxMDApLnRvRml4ZWQoMil9JTtgO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzdHlsZWNzcyArPSBgd2lkdGg6ICR7bi53aWR0aH1weDtgO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5maXhlZCA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZWNzcyArPSBgbGVmdDogJHtuLmxlZnR9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZml4ZWRDb2xzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmZpeGVkID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZWNzcyArPSBgcmlnaHQ6ICR7bi5yaWdodH1weGA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXhlZENvbHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBzdHlsZWNzcyArPSAnfSc7XHJcbiAgICAgICAgICAgICAgICBjc3NSdWxlcy5wdXNoKHN0eWxlY3NzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNzc1J1bGUuc3R5bGUuZGlzcGxheSA9IGlzVmlzaWJsZSA/ICcnIDogJ25vbmUnO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZml0Q29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1J1bGUuc3R5bGUud2lkdGggPSBgJHsobi53aWR0aCAvIGNvbFdpZHRoVG90YWwgKiAxMDApLnRvRml4ZWQoMil9JWA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNzc1J1bGUuc3R5bGUud2lkdGggPSBgJHtuLndpZHRofXB4YDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5maXhlZCA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjc3NSdWxlLnN0eWxlLmxlZnQgPSBgJHtuLmxlZnR9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5maXhlZCA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3NzUnVsZS5zdHlsZS5yaWdodCA9IGAke24ucmlnaHR9cHhgO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICBpZiAodGhpcy51c2VHcm91cEhlYWRlcikge1xyXG4gICAgICAgICAgICB0aGlzLmF1dG9XaWR0aCA9IGZhbHNlOyAgLy8g5aSa6KGo5aS05ZCv55So5ZCO77yM6Ieq5Yqo5YiX5a695aSx5pWIIFRGUyA0OTYwODhcclxuICAgICAgICAgICAgdGhpcy5jaGVja0dyb3VwQ29sdW1ucygpO1xyXG4gICAgICAgICAgICB2YXIgaSA9IHRoaXMuZ3JvdXBDb2x1bW5zLmxlbmd0aCAtIDI7XHJcbiAgICAgICAgICAgIHdoaWxlIChpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGdyb3VwSGVhZGVyQ29sQ3NzZXMgPSB0aGlzLmdyb3VwQ29sdW1uc1tpXS5maWx0ZXIoY29sID0+ICFjb2wuZmllbGQpLm1hcChjb2wgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBncm91cENvbENzc05hbWUgPSBgIyR7Y29sLmlkfXsgd2lkdGg6ICR7Y29sLndpZHRofXB4YDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5maXhlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29sLmZpeGVkID09PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwQ29sQ3NzTmFtZSArPSAnO2xlZnQ6JyArIGNvbC5sZWZ0ICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbC5maXhlZCA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBDb2xDc3NOYW1lICs9ICc7cmlnaHQ6JyArIGNvbC5yaWdodCArICdweCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBncm91cENvbENzc05hbWUgKz0gJ30nO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy51dGlscy5hcHBlbmRDc3NSdWxlczIoZ3JvdXBIZWFkZXJDb2xDc3NlcywgdGhpcy5zdHlsZUVsZW1lbnQuc2hlZXQpO1xyXG4gICAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKGNzc1J1bGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnV0aWxzLmFwcGVuZENzc1J1bGVzKGNzc1J1bGVzLCB0aGlzLnN0eWxlRWxlbWVudC5zaGVldCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmaXhlZENvbHM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRUYWJsZVdpZHRoKGNvbFdpZHRoVG90YWw6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmhlYWRlclRhYmxlICYmIHRoaXMuYm9keVRhYmxlKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5maXRDb2x1bW5zICYmICF0aGlzLmF1dG9GaXRDb2x1bW5zKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlYWRlclRhYmxlLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtjb2xXaWR0aFRvdGFsfXB4YDtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9keVRhYmxlLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSBgJHtjb2xXaWR0aFRvdGFsfXB4YDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyVGFibGUubmF0aXZlRWxlbWVudC5zdHlsZS53aWR0aCA9ICcxMDAlJztcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9keVRhYmxlLm5hdGl2ZUVsZW1lbnQuc3R5bGUud2lkdGggPSAnMTAwJSc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBhbGxDb2x1bW5zV2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29sdW1ucy5yZWR1Y2UoKHIsIGMpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uSXNWaXNpYmxlKGMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gciArIGMud2lkdGg7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9LCAwKTtcclxuICAgIH1cclxuXHJcbiAgICBvblBhZ2VDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5wYWdlQ2hhbmdlZC5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25QYWdlU2l6ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnBhZ2VTaXplQ2hhbmdlZC5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlUGFnZUluZm8ocGFnZUluZm86IHsgcGFnZUluZGV4PzogbnVtYmVyLCBwYWdlU2l6ZT86IG51bWJlciwgdG90YWw/OiBudW1iZXIsIHBhZ2VMaXN0PzogbnVtYmVyW10gfSkge1xyXG4gICAgICAgIGlmIChwYWdlSW5mbyAmJiBPYmplY3Qua2V5cyhwYWdlSW5mbykubGVuZ3RoKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvYmo6IGFueSA9IHt9O1xyXG4gICAgICAgICAgICBpZiAocGFnZUluZm8udG90YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgb2JqLnRvdGFsSXRlbXMgPSBwYWdlSW5mby50b3RhbDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHBhZ2VJbmZvLnBhZ2VJbmRleCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouY3VycmVudFBhZ2UgPSBwYWdlSW5mby5wYWdlSW5kZXg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlSW5mby5wYWdlU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvYmouaXRlbXNQZXJQYWdlID0gcGFnZUluZm8ucGFnZVNpemU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChwYWdlSW5mby5wYWdlTGlzdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBvYmoucGFnZUxpc3QgPSBwYWdlSW5mby5wYWdlTGlzdDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5wYWdpbmF0aW9uT3B0aW9ucyA9IE9iamVjdC5hc3NpZ24odGhpcy5wYWdpbmF0aW9uT3B0aW9ucywgb2JqKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaW5pdFBhZ2luYXRpb25PcHRpb25zKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlkOiAnRmFycmlzLVRyZWVUYWJsZS1QYWdpbmF0aW9uXycgKyB0aGlzLl9VVUlELFxyXG4gICAgICAgICAgICBpdGVtc1BlclBhZ2U6IHRoaXMucGFnZVNpemUsXHJcbiAgICAgICAgICAgIGN1cnJlbnRQYWdlOiB0aGlzLnBhZ2VJbmRleCxcclxuICAgICAgICAgICAgcGFnZUxpc3Q6IHRoaXMucGFnZUxpc3QsXHJcbiAgICAgICAgICAgIHRvdGFsSXRlbXM6IHRoaXMudG90YWwsXHJcbiAgICAgICAgICAgIHJlbW90ZTogdGhpcy5wYWdlck9uU2VydmVyXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBnZXROb2RlVGV4dChjb2w6IFRyZWVUYWJsZUNvbHVtbiwgcm93ZGF0YSwgZmFzdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKGNvbC5pc011bHRpbGluZ3VhbEZpZWxkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHRoaXMudXRpbHMuZ2V0VmFsdWUoY29sLmZpZWxkLCByb3dkYXRhKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxlU2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbG9jYWxlSWQgPSB0aGlzLmxvY2FsZVNlcnZpY2UubG9jYWxlSWQgfHwgJ3poLUNIUyc7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsICYmIHR5cGVvZiB2YWwgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWxbbG9jYWxlSWRdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXRpbHMuZ2V0VmFsdWUoY29sLmZpZWxkLCByb3dkYXRhLCAhZmFzdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdE5vZGVTdGF0dXMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnNpbmdsZVNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja1ZhbHVlcyAmJiB0aGlzLmNoZWNrVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkTm9kZXModGhpcy5jaGVja1ZhbHVlcywgZmFsc2UsIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3RWYWx1ZXMgJiYgdGhpcy5zZWxlY3RWYWx1ZXMubGVuZ3RoICYmICF0aGlzLm9ubHlTZWxlY3RTZWxmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdE5vZGVzKHRoaXMuc2VsZWN0VmFsdWVzLCBmYWxzZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0Tm9kZSh0aGlzLnNlbGVjdFZhbHVlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOazqOWGjOW/q+aNt+mUriAqL1xyXG4gICAgcHJpdmF0ZSByZWdpc3RlclNob3J0Y3V0cygpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG93RmlsdGVyQmFyICYmIHRoaXMuX2hvdEtleXMpIHtcclxuICAgICAgICAgICAgdGhpcy5faG90S2V5cy5hZGRTaG9ydGN1dCh7IGtleXM6ICdlbnRlcicsIGVsZW1lbnQ6IHRoaXMuaW5wdXRHcm91cC50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQgfSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25TZWFyY2goKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNldEZpbmRUZXh0KHRoaXMuZW5hYmxlRmluZFRleHQpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0RmluZFRleHQoZW5hYmxlID0gdHJ1ZSkge1xyXG4gICAgICAgIHRoaXMuZW5hYmxlRmluZFRleHQgPSBlbmFibGU7XHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlRmluZFRleHQgJiYgdGhpcy5faG90S2V5cykge1xyXG4gICAgICAgICAgICAvLyDmn6Xor6Llt6XlhbfmnaFcclxuICAgICAgICAgICAgdGhpcy5maW5kS2V5c0hhbmRsZXIgPSB0aGlzLl9ob3RLZXlzLmFkZFNob3J0Y3V0KHsga2V5czogJ2NvbnRyb2wuc2hpZnQuZicgfSkuc3Vic2NyaWJlKChlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmFibGVGaW5kVGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2hvd0ZpbmRJbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dGaW5kSW5wdXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0ZpbmRJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmluZEtleXNIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRLZXlzSGFuZGxlci51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kS2V5c0hhbmRsZXIgPSBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0Q3VzdG9tQ2xzKHJvd05vZGU6IFJvd05vZGUsIGZpZWxkOiBzdHJpbmcgPSAnJywgY2xzVHlwZTogJ3JvdycgfCAnY2VsbCcgPSAncm93Jykge1xyXG4gICAgICAgIGNvbnN0IGNscyA9IHt9O1xyXG4gICAgICAgIGxldCBmbiA9IHRoaXMucm93U3R5bGVyO1xyXG4gICAgICAgIGlmIChjbHNUeXBlID09PSAnY2VsbCcpIHtcclxuICAgICAgICAgICAgZm4gPSB0aGlzLmNlbGxTdHlsZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZm4pIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93Q2xzID0gZm4ocm93Tm9kZS5ub2RlLCBmaWVsZCk7XHJcbiAgICAgICAgICAgIGlmIChyb3dDbHMpIHtcclxuICAgICAgICAgICAgICAgIGxldCBhcnJjbHMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygcm93Q2xzID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFycmNscyA9IFtyb3dDbHNdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyb3dDbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFycmNscyA9IHJvd0NscztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGFycmNscy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dDbHNPYmogPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBhcnJjbHMuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93Q2xzT2JqWycnICsgY10gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IF9jbHMgPSB7IC4uLnJvd0Nsc09iaiwgLi4uY2xzIH07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF9jbHM7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByb3dDbHM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGNscztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Um93Q2xzKHJvd05vZGU6IFJvd05vZGUsIGZpZWxkPzogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VzdG9tQ2xzKHJvd05vZGUsICdyb3cnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRDZWxsQ2xzKHJvd05vZGU6IFJvd05vZGUsIGZpZWxkOiBzdHJpbmcpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRDdXN0b21DbHMocm93Tm9kZSwgZmllbGQsICdjZWxsJyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UmVhbENvbFdpZHRoKGN1cnJlbnRDb2w6IFRyZWVUYWJsZUNvbHVtbikge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbnMgJiYgdGhpcy5jb2x1bW5zLmxlbmd0aCAmJiB0aGlzLmZpdENvbHVtbnMpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sV2lkdGhUb3RhbCA9IHRoaXMuY29sdW1ucy5yZWR1Y2UoKHIsIGMpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByICsgKHRoaXMuY29sdW1uSXNWaXNpYmxlKGMpICYmIChyLmZpZWxkICE9PSBOT0RFU19QQUdFUl9DT0xVTU5fRklFTEQgIHx8IHIuZml4ZWRXaWR0aCk/IGMud2lkdGggOiAwKTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2x1bW5Jc1Zpc2libGUoY3VycmVudENvbCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICggY3VycmVudENvbC5maWVsZCAhPT0gTk9ERVNfUEFHRVJfQ09MVU1OX0ZJRUxEICYmICAhY3VycmVudENvbC5maXhlZFdpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjdXJyZW50Q29sLndpZHRoIC8gY29sV2lkdGhUb3RhbCAqIDEwMCkudG9GaXhlZCgyKSArICclJztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChjdXJyZW50Q29sLndpZHRoIHx8IDEyMCkgKyAncHgnO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGN1cnJlbnRDb2wud2lkdGggKyAncHgnO1xyXG4gICAgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnKVxyXG4gICAgb25SZXNpemVkKCkge1xyXG4gICAgICAgIHRoaXMucmVzaXplU2VyLndpbmRvd1Jlc2l6ZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFJpZ2h0Rml4ZWRDb2x1bW5TaGFkb3coKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHNSZWYgJiYgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYpIHtcclxuICAgICAgICAgICAgY29uc3QgcHMgPSAodGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYgYXMgYW55KS5pbnN0YW5jZTtcclxuICAgICAgICAgICAgaWYgKCFwcykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHsgY29udGFpbmVyV2lkdGgsIHNjcm9sbGJhclhMZWZ0LCBjb250ZW50V2lkdGggfSA9IHBzO1xyXG4gICAgICAgICAgICBpZiAoY29udGFpbmVyV2lkdGggKyBzY3JvbGxiYXJYTGVmdCA8IGNvbnRlbnRXaWR0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGZpeGVkUmlnaHRDb2x1bW5zID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+IG4uZml4ZWQgPT09ICdyaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBgIyR7dGhpcy5pZH0uZi10cmVldGFibGUtLWZpeGVkLWNvbHVtbnNgO1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpeGVkUmlnaHRDb2x1bW5zICYmIGZpeGVkUmlnaHRDb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpeGVkUmlnaHRDc3NSdWxlS2V5ID0gYCR7cnVsZU5hbWV9IFtyLXR0LXNoYWRvdy1jb2xdOjpiZWZvcmVgO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJpZ2h0Q1NTUnVsZSA9IGAke2ZpeGVkUmlnaHRDc3NSdWxlS2V5fXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYm94LXNoYWRvdzojZDlkOWQ5IC0xMnB4IDBweCA4cHggLTEycHggaW5zZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfWA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXRpbHMuYXBwZW5kQ3NzUnVsZXMoW3JpZ2h0Q1NTUnVsZV0sIHRoaXMuc3R5bGVFbGVtZW50LnNoZWV0KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldEZpeGVkQ29sdW1uU2hhZG93KHgsIGUpIHtcclxuICAgICAgICBjb25zdCBmaXhlZExlZnRDb2x1bW5zID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+IG4uZml4ZWQgPT09ICdsZWZ0Jyk7XHJcbiAgICAgICAgY29uc3QgZml4ZWRSaWdodENvbHVtbnMgPSB0aGlzLmNvbHVtbnMuZmlsdGVyKG4gPT4gbi5maXhlZCA9PT0gJ3JpZ2h0Jyk7XHJcbiAgICAgICAgY29uc3QgcnVsZU5hbWUgPSBgIyR7dGhpcy5pZH0uZi10cmVldGFibGUtLWZpeGVkLWNvbHVtbnNgO1xyXG4gICAgICAgIGxldCBmaXhlZExlZnRDc3NSdWxlS2V5ID0gJyc7XHJcbiAgICAgICAgbGV0IGZpeGVkUmlnaHRDc3NSdWxlS2V5ID0gJyc7XHJcbiAgICAgICAgbGV0IGxlZnRDU1NSdWxlID0gJyc7XHJcbiAgICAgICAgbGV0IHJpZ2h0Q1NTUnVsZSA9ICcnO1xyXG4gICAgICAgIGlmIChmaXhlZExlZnRDb2x1bW5zICYmIGZpeGVkTGVmdENvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhc3RGaXhlZExlZnRDb2x1bW4gPSBmaXhlZExlZnRDb2x1bW5zW2ZpeGVkTGVmdENvbHVtbnMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgIGZpeGVkTGVmdENzc1J1bGVLZXkgPSBgJHtydWxlTmFtZX0gW2ZpZWxkPVwiJHtsYXN0Rml4ZWRMZWZ0Q29sdW1uLmZpZWxkfVwiXTo6YWZ0ZXJgO1xyXG4gICAgICAgICAgICBsZWZ0Q1NTUnVsZSA9IGAke2ZpeGVkTGVmdENzc1J1bGVLZXl9e1xyXG4gICAgICAgICAgICAgICAgYm94LXNoYWRvdzojZDlkOWQ5IDEycHggMHB4IDhweCAtMTJweCBpbnNldDtcclxuICAgICAgICAgICAgfWA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZml4ZWRSaWdodENvbHVtbnMgJiYgZml4ZWRSaWdodENvbHVtbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGZpeGVkUmlnaHRDc3NSdWxlS2V5ID0gYCR7cnVsZU5hbWV9IFtyLXR0LXNoYWRvdy1jb2xdOjpiZWZvcmVgO1xyXG4gICAgICAgICAgICByaWdodENTU1J1bGUgPSBgJHtmaXhlZFJpZ2h0Q3NzUnVsZUtleX17XHJcbiAgICAgICAgICAgICAgICBib3gtc2hhZG93OiNkOWQ5ZDkgLTEycHggMHB4IDhweCAtMTJweCBpbnNldDtcclxuICAgICAgICAgICAgfWA7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHggPT09IDApIHtcclxuICAgICAgICAgICAgLy8g56e76Zmk5bem5L6n5Zu65a6a5YiX6Zi05b2x5qC35byPXHJcbiAgICAgICAgICAgIGlmIChmaXhlZExlZnRDc3NSdWxlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLnJlbW92ZUNzc1J1bGUoZml4ZWRMZWZ0Q3NzUnVsZUtleSwgdGhpcy5zdHlsZUVsZW1lbnQuc2hlZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICgoeCArIGUuc3JjRWxlbWVudC5vZmZzZXRXaWR0aCkudG9GaXhlZCgpID09IGUuc3JjRWxlbWVudC5zY3JvbGxXaWR0aCkge1xyXG4gICAgICAgICAgICAvLyDnp7vpmaTlj7PliJnlm7rlrprliJfpmLTlvbHmoLflvI9cclxuICAgICAgICAgICAgaWYgKGZpeGVkUmlnaHRDc3NSdWxlS2V5KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnV0aWxzLnJlbW92ZUNzc1J1bGUoZml4ZWRSaWdodENzc1J1bGVLZXksIHRoaXMuc3R5bGVFbGVtZW50LnNoZWV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vIOa3u+WKoOW3puWPs+WbuuWumuWIl+agt+W8j1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSBbXTtcclxuICAgICAgICAgICAgaWYgKGxlZnRDU1NSdWxlKSB7XHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChsZWZ0Q1NTUnVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChyaWdodENTU1J1bGUpIHtcclxuICAgICAgICAgICAgICAgIGFyci5wdXNoKHJpZ2h0Q1NTUnVsZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMudXRpbHMuYXBwZW5kQ3NzUnVsZXMoYXJyLCB0aGlzLnN0eWxlRWxlbWVudC5zaGVldCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uU2Nyb2xsWChlOiBhbnkpIHtcclxuICAgICAgICBpZiAodGhpcy5zaG93SGVhZGVyICYmIHRoaXMuaGVhZGVyQm94KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBlLnNyY0VsZW1lbnQuc2Nyb2xsTGVmdDtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5zY3JvbGxYID0geDtcclxuICAgICAgICAgICAgLy8gdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmhlYWRlckJveC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ3RhYmxlJyksICd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlM2QoLSR7eH1weCwgMHB4LCAwcHgpYCk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyQm94Lm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHg7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNldEZpeGVkQ29sdW1uU2hhZG93KHgsIGUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblNjcm9sbFkoZTogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc2Nyb2xsVG9wID0gZS50YXJnZXQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlckRhdGEoc2Nyb2xsVG9wKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZW5kZXJEYXRhKHNjcm9sbHRvcDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCB0b3BIaWRlSGVpZ2h0LCBib3R0b21IaWRlSGVpZ2h0IH0gPSB0aGlzLnNjcm9sbExvYWRlci5nZXRSb3dOb2RlcyhzY3JvbGx0b3ApO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2Nyb2xsWSA9IHNjcm9sbHRvcDtcclxuICAgICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy50b3BIaWRlSGVpZ2h0ID0gdG9wSGlkZUhlaWdodDtcclxuICAgICAgICB0aGlzLmJvdHRvbUhpZGVIZWlnaHQgPSBib3R0b21IaWRlSGVpZ2h0O1xyXG5cclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLnNldE5ld0NvbHVtbnNXaWR0aCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU2VhcmNoVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKCEkZXZlbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5vbkNsZWFyU2VhcmNoVmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuc2VhcmNoVmFsdWVDaGFuZ2UuZW1pdCh0aGlzLnNlYXJjaERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXJTZWFyY2hWYWx1ZSgpIHtcclxuICAgICAgICB0aGlzLnNlYXJjaERhdGEudmFsdWUgPSAnJztcclxuICAgICAgICB0aGlzLnN0YXRlLnNlYXJjaGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jbGVhclNlYXJjaFZhbHVlLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNlbGxDbGljayhldmVudDogRXZlbnQsIGNvbDogYW55LCBub2RlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmNlbGxDbGljay5lbWl0KHsgZXZlbnQsIGNvbCwgbm9kZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0cmFja0J5Rm4oaW5kZXgsIHJvd05vZGUpIHtcclxuICAgICAgICByZXR1cm4gcm93Tm9kZS5pZDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog5qC85byP5YyW5pWw5o2uXHJcbiAgICAgKi9cclxuICAgIGZvcm1hdERhdGEoY29sOiBhbnksIGRhdGE6IGFueSwgZm9ybWF0dGVyOiBhbnkpIHtcclxuICAgICAgICAvLyBjb25zdCB2YWwgPSB0aGlzLnV0aWxzLmdldFZhbHVlKGZpZWxkLCBkYXRhLCB0cnVlICk7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5nZXROb2RlVGV4dChjb2wsIGRhdGEpO1xyXG4gICAgICAgIGlmIChmb3JtYXR0ZXIgJiYgZm9ybWF0dGVyLnR5cGUgPT09ICd0aW1lYWdvJykge1xyXG4gICAgICAgICAgICBpZiAoIWZvcm1hdHRlci5vcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICBmb3JtYXR0ZXIub3B0aW9ucyA9IHsgbG9jYWxlOiB0aGlzLmxvY2FsZVNlcnZpY2UubG9jYWxlSWR9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZvcm1hdHRlci5vcHRpb25zLmxvY2FsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlci5vcHRpb25zLmxvY2FsZSA9IHRoaXMubG9jYWxlU2VydmljZS5sb2NhbGVJZDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xGb3JtYXRTZXIuZm9ybWF0KHZhbCwgZGF0YSwgZm9ybWF0dGVyLCB7bG9jYWxlOiB0aGlzLmxvY2FsZVNlcnZpY2UubG9jYWxlSWQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29sdW1uc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0NvbHVtbk9wdGlvbigpO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdHRjMmNvbHVtbnMobGlzdDogUXVlcnlMaXN0PFRyZWVUYWJsZUNvbHVtbkRpcmVjdGl2ZT4pIHtcclxuICAgICAgICByZXR1cm4gbGlzdC5tYXAoKG46IFRyZWVUYWJsZUNvbHVtbkRpcmVjdGl2ZSkgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgZmllbGQ6IG4uZmllbGQsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogbi50aXRsZSxcclxuICAgICAgICAgICAgICAgIGFsaWduOiBuLmFsaWduLFxyXG4gICAgICAgICAgICAgICAgaEFsaWduOiBuLmhBbGlnbixcclxuICAgICAgICAgICAgICAgIHdpZHRoOiBuLndpZHRoLFxyXG4gICAgICAgICAgICAgICAgZm9ybWF0dGVyOiBuLmZvcm1hdHRlclxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVTZXRTaXplKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmZpdCkge1xyXG4gICAgICAgICAgICBjb25zdCBwYXJlbnRFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgICAgICB0aGlzLnNldFdpZHRoKHBhcmVudEVsLm9mZnNldFdpZHRoKVxyXG4gICAgICAgICAgICB0aGlzLmhlaWdodCA9IHBhcmVudEVsLm9mZnNldEhlaWdodDtcclxuXHJcbiAgICAgICAgICAgIC8vIOWmguaenOWcqOS9v+eUqOaXtu+8jOS4uue7hOS7tuiuvue9rueahOmrmOW6pu+8jOWImeS7peatpOWAvOS4uuWHhu+8jOS7heaUr+aMgSDlm7rlrprlgLwg77yM5LiN5pSv5oyBIOeZvuWIhuavlFxyXG4gICAgICAgICAgICBpZiAodGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLmhlaWdodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGggPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgaWYgKGguaW5kZXhPZigncHgnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaCA9IHBhcnNlSW50KGgucmVwbGFjZSgncHgnLCAnJyksIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSBoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlclZpcnR1YWxSb3dOb2Rlcyhub2RlUG9zWSA9IG51bGwpIHtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzY3JvbGxZID0gbm9kZVBvc1kgIT09IG51bGwgJiYgbm9kZVBvc1kgIT09IHVuZGVmaW5lZCA/IG5vZGVQb3NZOiB0aGlzLnN0YXRlLnNjcm9sbFk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9yb3dub2RlcyA9IHRoaXMuc2Nyb2xsTG9hZGVyLmdldFJvd05vZGVzKHNjcm9sbFkpO1xyXG4gICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZSA9IF9yb3dub2Rlcy5kYXRhO1xyXG4gICAgICAgICAgICB0aGlzLnRvcEhpZGVIZWlnaHQgPSBfcm93bm9kZXMudG9wSGlkZUhlaWdodDtcclxuICAgICAgICAgICAgdGhpcy5ib3R0b21IaWRlSGVpZ2h0ID0gX3Jvd25vZGVzLmJvdHRvbUhpZGVIZWlnaHQ7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG5cclxuICAgICAgICAgICAgaWYgKG5vZGVQb3NZICE9PSBudWxsICYmIG5vZGVQb3NZICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCA9IG5vZGVQb3NZO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDIwKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZShub2RlUG9zWTogYW55ID0gbnVsbCkge1xyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplZFZhbHVlID0gW107XHJcbiAgICAgICAgdGhpcy5zZWFyY2hIYW5kbGUuYWxsTm9kZXMgPSBbXTtcclxuICAgICAgICB0aGlzLnN0YXRlLnJvd05vZGVzID0gW107XHJcblxyXG4gICAgICAgIHRoaXMuc2VyaWFsaXplTm9kZXMobnVsbCwgdGhpcy5kYXRhLCAwLCB0cnVlKTtcclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCAmJiB0aGlzLmZpeGVkSGVhZGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmlydHVhbFJvd05vZGVzKG5vZGVQb3NZKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZSA9IHRoaXMuc3RhdGUucm93Tm9kZXM7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAvLyBpZiAoZW1pdENoYW5nZXMpIHtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWwhuagkeiKgueCueaVsOaNruW6j+WIl+WMluS4ulJvd05vZGVcclxuICAgICAqIEBwYXJhbSBwYXJlbnQg54i257qn6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gbm9kZXMg5qCR6IqC54K56ZuG5ZCIXHJcbiAgICAgKiBAcGFyYW0gbGV2ZWwg57qn5YirXHJcbiAgICAgKiBAcGFyYW0gdmlzaWJsZSDmmK/lkKblj6/op4FcclxuICAgICAqL1xyXG4gICAgc2VyaWFsaXplTm9kZXMocGFyZW50OiBUcmVlTm9kZSwgbm9kZXM6IFRyZWVOb2RlW10sIGxldmVsOiBudW1iZXIsIHZpc2libGU6IGJvb2xlYW4sIHBhcmVudElkcz86IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFub2Rlc1swXS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG5vZGVzLmZvckVhY2goKG5vZGUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBub2RlLnBhcmVudCA9IHBhcmVudDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW5vZGUuaGFzT3duUHJvcGVydHkoJ3NlbGVjdGFibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2VsZWN0YWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFub2RlLmhhc093blByb3BlcnR5KCdzaG93SWNvbicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5zaG93SWNvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub25seVNlbGVjdExlYWYgPT09ICd5ZXMnICYmIG5vZGUuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUuc2VsZWN0YWJsZSA9ICEhbm9kZS5sZWFmO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3Qga2V5aWQgPSBub2RlLmRhdGFbdGhpcy5pZEZpZWxkXTtcclxuICAgICAgICAgICAgICAgIG5vZGUuaWQgPSBrZXlpZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzU2VsZWN0ZWQgPSB0aGlzLmZpbmRJbmRleEluU2VsZWN0aW9uKG5vZGUpID4gLTE7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaXNDaGVja2VkID0gdGhpcy5maW5kSW5kZXhJbkNoZWNrZWRzKG5vZGUpID4gLTE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA9PT0gbm9kZXMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlzRmlyc3QgPSBpbmRleCA9PT0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBwYXJlbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFyZW50Um4gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudElEID0gcGFyZW50LmRhdGFbdGhpcy5pZEZpZWxkXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBfcGFyZW50cyA9IHBhcmVudElkcyB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICBwYXJlbnRzID0gcGFyZW50cy5jb25jYXQoX3BhcmVudHMubWFwKG4gPT4gbikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMucHVzaChwYXJlbnRJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Um4gPSB0aGlzLnN0YXRlLnJvd05vZGVzLmZpbmQobiA9PiBuLmlkID09PSBwYXJlbnQuaWQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHJvd05vZGU6IFJvd05vZGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWQ6IGtleWlkLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGxldmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHZpc2libGUgJiYgKHBhcmVudCA/IHBhcmVudC5leHBhbmRlZCA6IHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgIGlzU2VsZWN0ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaXNDaGVja2VkLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50Um93Tm9kZTogcGFyZW50Um4sXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXg6IHRoaXMuc3RhdGUucm93Tm9kZXMubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3Q6IGlzTGFzdCxcclxuICAgICAgICAgICAgICAgICAgICBmaXJzdDogaXNGaXJzdFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMuc2VyaWFsaXplZFZhbHVlLnB1c2gocm93Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJvd05vZGVzLnB1c2gocm93Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZU5vZGVzKG5vZGUsIG5vZGUuY2hpbGRyZW4sIGxldmVsICsgMSwgcm93Tm9kZS52aXNpYmxlLCBwYXJlbnRzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Yik5pat5oyH5a6a55qE6IqC54K55piv5ZCm6KKr6YCJ5LitXHJcbiAgICAgKiBAcGFyYW0gbm9kZSDmoJHoioLngrlcclxuICAgICAqL1xyXG4gICAgaXNTZWxlY3RlZChub2RlOiBUcmVlTm9kZSk6IGJvb2xlYW4ge1xyXG4gICAgICAgIGlmICh0aGlzLnNpbmdsZVNlbGVjdCkge1xyXG4gICAgICAgICAgICBpZiAobm9kZSAmJiB0aGlzLnNlbGVjdGVkUm93KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbm9kZS5kYXRhW3RoaXMuaWRGaWVsZF0gPT09IHRoaXMuc2VsZWN0ZWRSb3cuZGF0YVt0aGlzLmlkRmllbGRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25zICYmIHRoaXMuc2VsZWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGlvbnMuZmluZEluZGV4KG4gPT4gbi5kYXRhW3RoaXMuaWRGaWVsZF0gPT09IG5vZGUuZGF0YVt0aGlzLmlkRmllbGRdKSA+IC0xO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvKiog5Yik5pat5b2T5YmN6IqC54K555qE6ZKp6YCJ54q25oCBICovXHJcbiAgICBpc0NoZWNrZWQobm9kZTogVHJlZU5vZGUpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAobm9kZSAmJiB0aGlzLmNoZWNrZWRzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrZWRzIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoZWNrZWRzLmZpbmRJbmRleCgodikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2LmRhdGFbdGhpcy5pZEZpZWxkXSA9PT0gbm9kZS5kYXRhW3RoaXMuaWRGaWVsZF07XHJcbiAgICAgICAgICAgICAgICB9KSA+IC0xO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSB1blNlbGVjdGVkQ3VycmVudFJvd0VtaXQoKSB7XHJcbiAgICAgICAgY29uc3QgY3VyclNlbGVjdGVkID0gdGhpcy5zZWxlY3RlZFJvdztcclxuICAgICAgICBpZiAoY3VyclNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZVVuU2VsZWN0LmVtaXQoeyBub2RlOiBjdXJyU2VsZWN0ZWQsIHR5cGU6ICdyb3cnLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfc2luZ2xlU2VsZWN0Tm9kZShlOiBTZWxlY3RFdmVudEFyZ3MpIHtcclxuXHJcbiAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbnMoKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gZS5yb3dOb2RlLm5vZGU7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RSb3dJbmRleCA9IGUucm93SW5kZXg7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW2Uucm93Tm9kZS5ub2RlXTtcclxuICAgICAgICBlLnJvd05vZGUuaXNTZWxlY3RlZCA9IHRydWU7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNob3dDaGVja2JveCkge1xyXG4gICAgICAgICAgICBlLnJvd05vZGUuaXNDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckNoZWNrZWRzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMoZS5yb3dOb2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNwOiBOb2RlU2VsZWN0ZWRQYXJhbSA9IHtcclxuICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZS5vcmlnaW5hbEV2ZW50LFxyXG4gICAgICAgICAgICBub2RlOiBlLnJvd05vZGUubm9kZSwgdHlwZTogJ3JvdycsXHJcbiAgICAgICAgICAgIGluZGV4OiBlLnJvd0luZGV4LFxyXG4gICAgICAgICAgICBwYXJlbnRzOiBlLnJvd05vZGUucGFyZW50cyxcclxuICAgICAgICAgICAgaW5zdGFuY2U6IHRoaXNcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMubm9kZVNlbGVjdGVkLmVtaXQoc3ApO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3NpbmdsZVVuU2VsZWN0Tm9kZShlOiBTZWxlY3RFdmVudEFyZ3MpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbGVjdFJvd0luZGV4ID0gLTE7XHJcbiAgICAgICAgZS5yb3dOb2RlLmlzU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICBlLnJvd05vZGUuaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcblxyXG4gICAgICAgIHRoaXMubm9kZVVuU2VsZWN0LmVtaXQoe1xyXG4gICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBlLm9yaWdpbmFsRXZlbnQsXHJcbiAgICAgICAgICAgIG5vZGU6IGUucm93Tm9kZS5ub2RlLCB0eXBlOiAncm93JywgcGFyZW50czogZS5yb3dOb2RlLnBhcmVudHMsXHJcbiAgICAgICAgICAgIGluc3RhbmNlOiB0aGlzXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfX3NpbmdsZVNlbGVjdE5vZGUoZXZlbnQ6IFNlbGVjdEV2ZW50QXJncywgc2VsZWN0ZWQgPSBmYWxzZSkge1xyXG4gICAgICAgIGlmICghc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51blNlbGVjdGVkQ3VycmVudFJvd0VtaXQoKTtcclxuICAgICAgICAgICAgdGhpcy5fc2luZ2xlU2VsZWN0Tm9kZShldmVudCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmtlZXBTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZVVuU2VsZWN0Tm9kZShldmVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfX211bHRpU2VsZWN0Tm9kZShldmVudDogU2VsZWN0RXZlbnRBcmdzLCBzZWxlY3RlZCkge1xyXG4gICAgICAgIGNvbnN0IHJvd05vZGUgPSBldmVudC5yb3dOb2RlO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnVuU2VsZWN0ZWRDdXJyZW50Um93RW1pdCgpO1xyXG4gICAgICAgICAgICB0aGlzLnNpbmdsZVNlbGVjdFdoZW5NdWx0aVNlbGVjdChyb3dOb2RlLCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlU2VsZWN0ZWQuZW1pdCh7XHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEV2ZW50OiBldmVudC5vcmlnaW5hbEV2ZW50LCBub2RlOiByb3dOb2RlLm5vZGUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAncm93JywgaW5kZXg6IGV2ZW50LnJvd0luZGV4LCBwYXJlbnRzOiByb3dOb2RlLnBhcmVudHMsXHJcbiAgICAgICAgICAgICAgICBpbnN0YW5jZTogdGhpc1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMua2VlcFNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaW5nbGVTZWxlY3RXaGVuTXVsdGlTZWxlY3Qocm93Tm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ub2RlVW5TZWxlY3QuZW1pdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQub3JpZ2luYWxFdmVudCwgbm9kZTogcm93Tm9kZS5ub2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdyb3cnLCBpbmRleDogZXZlbnQucm93SW5kZXgsIHBhcmVudHM6IHJvd05vZGUucGFyZW50cyxcclxuICAgICAgICAgICAgICAgICAgICBpbnN0YW5jZTogdGhpc1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDooYzljZXlh7vkuovku7ZcclxuICAgICAqL1xyXG4gICAgaGFuZGxlUm93Q2xpY2soZXZlbnQ6IFNlbGVjdEV2ZW50QXJncykge1xyXG4gICAgICAgIGNvbnN0IHJvd05vZGUgPSBldmVudC5yb3dOb2RlO1xyXG4gICAgICAgIHJvd05vZGUubm9kZVsnZWxlbWVudFJlZiddID0gZXZlbnQub3JpZ2luYWxFdmVudC50YXJnZXQ7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWQgPSB0aGlzLmlzU2VsZWN0ZWQocm93Tm9kZS5ub2RlKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19zaW5nbGVTZWxlY3ROb2RlKGV2ZW50LCBzZWxlY3RlZCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcm93Tm9kZS5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm9ubHlTZWxlY3RTZWxmKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9fbXVsdGlTZWxlY3ROb2RlKGV2ZW50LCAhc2VsZWN0ZWQpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcm93Tm9kZS5pc1NlbGVjdGVkID0gIXNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gcm93Tm9kZS5pZCkuaXNTZWxlY3RlZCA9ICFzZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhyb3dOb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3dTZWxlY3RDaGFuZ2VQYXJhbXM6IE5vZGVTZWxlY3RlZFBhcmFtID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsRXZlbnQ6IGV2ZW50Lm9yaWdpbmFsRXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAncm93JywgaW5kZXg6IGV2ZW50LnJvd0luZGV4LCBwYXJlbnRzOiByb3dOb2RlLnBhcmVudHMsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5zdGFuY2U6IHRoaXNcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJvd05vZGUuaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZVNlbGVjdGVkLmVtaXQocm93U2VsZWN0Q2hhbmdlUGFyYW1zKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlVW5TZWxlY3QuZW1pdChyb3dTZWxlY3RDaGFuZ2VQYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja09uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93Tm9kZS5pc0NoZWNrZWQgPSAhc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gcm93Tm9kZS5pZCkuaXNDaGVja2VkID0gIXNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm93Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmNhc2NhZGVOb2Rlcyhyb3dOb2RlLCByb3dOb2RlLmlzQ2hlY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50dFNlcnZpY2Uub25DaGFuZ2VDaGVja2JveFN0YXR1cyhyb3dOb2RlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJvd05vZGUuaXNDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubm9kZUNoZWNrZWQuZW1pdCh7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50LCBub2RlOiByb3dOb2RlLm5vZGUsIG5vZGVzLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVVbkNoZWNrZWQuZW1pdCh7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50LCBub2RlOiByb3dOb2RlLm5vZGUsIG5vZGVzLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja09uU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZHMgPSB0aGlzLmNoZWNrZWRzLm1hcCh0biA9PiB0bi5pZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzID0gaWRzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KGlkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5bim5pyJY2hlY2tib3gg55qE5Y2V6YCJXHJcbiAgICAgKiBAcGFyYW0gcm93Tm9kZSDlvZPliY3oioLngrlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBzaW5nbGVTZWxlY3RXaGVuTXVsdGlTZWxlY3Qocm93Tm9kZTogUm93Tm9kZSwgZmxhZzogYm9vbGVhbikge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrT25TZWxlY3QpIHtcclxuICAgICAgICAgICAgcm93Tm9kZS5pc0NoZWNrZWQgPSBmbGFnO1xyXG4gICAgICAgICAgICB0aGlzLmNhc2NhZGVOb2Rlcyhyb3dOb2RlLCByb3dOb2RlLmlzQ2hlY2tlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm93Tm9kZSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnR0U2VydmljZS5vbkNoYW5nZUNoZWNrYm94U3RhdHVzKHJvd05vZGUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJvd05vZGUuaXNDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVDaGVja2VkLmVtaXQoeyBvcmlnaW5hbEV2ZW50OiBldmVudCwgbm9kZTogcm93Tm9kZS5ub2RlLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVVuQ2hlY2tlZC5lbWl0KHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSwgaW5zdGFuY2U6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2xlYXJTZWxlY3Rpb25zKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9ubHlTZWxlY3RTZWxmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSByb3dOb2RlLm5vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJvd05vZGUuaXNTZWxlY3RlZCA9IGZsYWc7XHJcbiAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKHJvd05vZGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2VsZWN0V2hlbkNoZWNrZWQocm93Tm9kZTogUm93Tm9kZSwgZmxhZzogYm9vbGVhbiwgZXZlbnQ6IGFueSkge1xyXG4gICAgICAgIGlmIChyb3dOb2RlLm5vZGUuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgICByb3dOb2RlLmlzQ2hlY2tlZCA9IGZsYWc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm93Tm9kZSwgZmFsc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdE9uQ2hlY2spIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMub25seVNlbGVjdFNlbGYpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmbGFnIHx8ICh0aGlzLnNlbGVjdGVkUm93ICYmIHRoaXMuc2VsZWN0ZWRSb3cuaWQgPT09IHJvd05vZGUuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0ICYmIHRoaXMuc2hvd0NoZWNrYm94KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2hlY2tlZHMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocm93Tm9kZS5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUuaXNTZWxlY3RlZCA9IGZsYWc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKHJvd05vZGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gcm93Tm9kZS5pZCkuaXNTZWxlY3RlZCA9IGZsYWc7XHJcblxyXG4gICAgICAgICAgICBpZiAocm93Tm9kZS5pc1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVTZWxlY3RlZC5lbWl0KHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSwgaW5zdGFuY2U6IHRoaXMsIHR5cGU6ICdjaGVja2JveCcgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVVblNlbGVjdC5lbWl0KHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSwgaW5zdGFuY2U6IHRoaXMsIHR5cGU6ICdjaGVja2JveCcgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0luQXJyYXkocm93Tm9kZTogUm93Tm9kZSwgaXRlbXM6IFRyZWVOb2RlW10pIHtcclxuICAgICAgICBpZiAoaXRlbXMgJiYgaXRlbXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGl0ZW1zLmZpbmRJbmRleChpID0+IGkuZGF0YVt0aGlzLmlkRmllbGRdID09PSByb3dOb2RlLmlkKSA+IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0U2VsZWN0aW9ucyhyb3dOb2RlOiBSb3dOb2RlKSB7XHJcbiAgICAgICAgaWYgKHJvd05vZGUuaXNTZWxlY3RlZCkge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5BcnJheShyb3dOb2RlLCB0aGlzLnNlbGVjdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLnNlbGVjdGlvbnMgPSBbLi4udGhpcy5zZWxlY3Rpb25zLCByb3dOb2RlLm5vZGVdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zLnB1c2gocm93Tm9kZS5ub2RlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnNlbGVjdGlvbnMuZmluZEluZGV4KCh0bjogVHJlZU5vZGUpID0+IHRuLmRhdGFbdGhpcy5pZEZpZWxkXSA9PT0gcm93Tm9kZS5ub2RlLmRhdGFbdGhpcy5pZEZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5zZWxlY3Rpb25zID0gdGhpcy5zZWxlY3Rpb25zLmZpbHRlcigodG46IFRyZWVOb2RlKSA9PiB0bi5kYXRhW3RoaXMuaWRGaWVsZF0gIT09IHJvd05vZGUubm9kZS5kYXRhW3RoaXMuaWRGaWVsZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q2hlY2tlZHMocm93Tm9kZTogUm93Tm9kZSwgdXBkYXRlZCA9IHRydWUpIHtcclxuICAgICAgICBpZiAocm93Tm9kZS5pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWRzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRzID0gW107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzSW5BcnJheShyb3dOb2RlLCB0aGlzLmNoZWNrZWRzKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2Vkcy5wdXNoKHJvd05vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5jaGVja2Vkcykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuY2hlY2tlZHMuZmluZEluZGV4KCh0bjogVHJlZU5vZGUpID0+IHRuLmRhdGFbdGhpcy5pZEZpZWxkXSA9PT0gcm93Tm9kZS5ub2RlLmRhdGFbdGhpcy5pZEZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHVwZGF0ZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkcyA9IFsgLi4udGhpcy5jaGVja2Vkc107XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0RGlmZnJlbnREYXRhKGRhdGE6IFRyZWVOb2RlW10pIHtcclxuICAgICAgICBpZiAoZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgX25vZGVzID0gW107XHJcbiAgICAgICAgICAgIGRhdGEuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChfbm9kZXMuZmluZEluZGV4KHQgPT4gdC5kYXRhW3RoaXMuaWRGaWVsZF0gPT09IG4uZGF0YVt0aGlzLmlkRmllbGRdKSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBfbm9kZXMucHVzaChuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBfbm9kZXM7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZGF0YTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNhc2NhZGVDaGVja2VkTm9kZShyb3dOb2RlOiBSb3dOb2RlLCBjaGVja2VkOiBib29sZWFuLCBzeW5jID0gZmFsc2UpOiBUcmVlTm9kZVtdIHtcclxuICAgICAgICBjb25zdCBub2RlczogVHJlZU5vZGVbXSA9IFtdO1xyXG4gICAgICAgIGlmIChyb3dOb2RlLm5vZGUuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgICByb3dOb2RlLmlzQ2hlY2tlZCA9IGNoZWNrZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm93Tm9kZSwgZmFsc2UpO1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdE9uQ2hlY2spIHtcclxuICAgICAgICAgICAgaWYgKHN5bmMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IHRoaXMuaXNJbmRldGVybWluYXRlKHJvd05vZGUpICE9PSAyO1xyXG4gICAgICAgICAgICAgICAgY2hlY2tlZCA9IHN0YXR1cyA/IGNoZWNrZWQ6IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAocm93Tm9kZS5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUuaXNTZWxlY3RlZCA9IGNoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMocm93Tm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5BcnJheShyb3dOb2RlLCBub2RlcykpIHtcclxuICAgICAgICAgICAgbm9kZXMucHVzaChyb3dOb2RlLm5vZGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbm9kZXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlkJHkuIvnuqfogZTpgInkuK1cclxuICAgICAqIEBwYXJhbSBub2RlIOW9k+WJjeiKgueCuVxyXG4gICAgICogQHBhcmFtIGNoZWNrZWQg6YCJ5Lit54q25oCBXHJcbiAgICAgKiDov5Tlm57lj5flvbHlk43nmoTooYxcclxuICAgICAqL1xyXG4gICAgcHJvcGFnYXRlU2VsZWN0aW9uRG93bihyb3dOb2RlOiBSb3dOb2RlLCBjaGVja2VkOiBib29sZWFuKSB7XHJcbiAgICAgICAgbGV0IG5vZGVzID0gdGhpcy5jYXNjYWRlQ2hlY2tlZE5vZGUocm93Tm9kZSwgY2hlY2tlZCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FzY2FkZUNoZWNrICYmIHRoaXMuY2FzY2FkZURvd24gJiYgcm93Tm9kZS5ub2RlLmNoaWxkcmVuICYmIHJvd05vZGUubm9kZS5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcm93Tm9kZS5ub2RlLmNoaWxkcmVuLmZvckVhY2goKHYsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJuID0gdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKChyb3c6IFJvd05vZGUpID0+IHJvdy5pZCA9PT0gdi5kYXRhW3RoaXMuaWRGaWVsZF0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm4uaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChybi5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm4uaXNDaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMgPSBub2Rlcy5jb25jYXQodGhpcy5wcm9wYWdhdGVTZWxlY3Rpb25Eb3duKHJuLCBjaGVja2VkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50dFNlcnZpY2Uub25DaGFuZ2VDaGVja2JveFN0YXR1cyhybik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5ZCR5LiK57qn6IGU6YCJ5LitXHJcbiAgICAgKi9cclxuICAgIHByb3BhZ2F0ZVNlbGVjdGlvblVwKHJvd05vZGU6IFJvd05vZGUsIGNoZWNrZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuY2FzY2FkZUNoZWNrZWROb2RlKHJvd05vZGUsIGNoZWNrZWQpO1xyXG4gICAgICAgIGlmICh0aGlzLmNhc2NhZGVDaGVjayAmJiB0aGlzLmNhc2NhZGVVcCAmJiByb3dOb2RlLm5vZGUucGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2RlLnBhcmVudHMgJiYgcm93Tm9kZS5wYXJlbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm5zOiBSb3dOb2RlW10gPSBbXTtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUucGFyZW50cy5mb3JFYWNoKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm4gPSB0aGlzLmZpbmRSb3dOb2RlKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChybiAmJiBybi5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcm4uaXNDaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgY2hlY2tlZE5vZGVzID0gdGhpcy5jYXNjYWRlQ2hlY2tlZE5vZGUocm4sIGNoZWNrZWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZE5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChjaGVja2VkTm9kZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJucy5wdXNoKHJuKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBybnMucmV2ZXJzZSgpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3hTdGF0dXMocm4pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBub2RlcztcclxuICAgIH1cclxuXHJcbiAgICAvLyDoioLngrnnirbmgIHvvIjpgInkuK3vvIzli77pgInvvInlkIzmraXmm7TmlrBcclxuICAgIHByaXZhdGUgdXBkYXRlTm9kZVN0YXR1cygpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWFyY2hlZCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlcyA9IHRoaXMuc3RhdGUuc2VhcmNoUm93Tm9kZXM7XHJcbiAgICAgICAgICAgIGlmICghcm93Tm9kZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByb3dOb2Rlcy5mb3JFYWNoKHJuID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoZWNrZWRJdGVtOiBSb3dOb2RlID0gdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gcm4uaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoa2VkID0gY2hlY2tlZEl0ZW0gPyBjaGVja2VkSXRlbS5pc0NoZWNrZWQgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJuLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJuLmlzQ2hlY2tlZCA9IGNoa2VkO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdE9uQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY2hlY2tlZEl0ZW0uaXNTZWxlY3RlZCAhPSBybi5pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2tlZEl0ZW0uaXNTZWxlY3RlZCA9IGNoZWNrZWRJdGVtLmlzQ2hlY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcm4uaXNTZWxlY3RlZCA9IGNoZWNrZWRJdGVtLmlzU2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdE9uQ2hlY2spIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUucm93Tm9kZXMuZm9yRWFjaChybiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub25seVNlbGVjdFNlbGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNlbGVjdGlvbnMgfHwgIXRoaXMuc2VsZWN0aW9ucy5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBybi5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25zWzBdLmlkID09PSBybi5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBybi5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocm4uaXNTZWxlY3RlZCAhPSBybi5pc0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJuLmlzU2VsZWN0ZWQgPSBybi5pc0NoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOe6p+iBlOmAieaLqeiKgueCuVxyXG4gICAgICogQHBhcmFtIHJvd05vZGUg5b2T5YmN6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gY2hlY2tlZCDmmK/lkKbpkqnpgIlcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjYXNjYWRlTm9kZXMocm93Tm9kZTogUm93Tm9kZSwgY2hlY2tlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGxldCBjaGVja2VkTm9kZXMgPSB0aGlzLnByb3BhZ2F0ZVNlbGVjdGlvbkRvd24ocm93Tm9kZSwgY2hlY2tlZCk7XHJcbiAgICAgICAgY2hlY2tlZE5vZGVzID0gY2hlY2tlZE5vZGVzLmNvbmNhdCh0aGlzLnByb3BhZ2F0ZVNlbGVjdGlvblVwKHJvd05vZGUsIGNoZWNrZWQpKTtcclxuICAgICAgICBjaGVja2VkTm9kZXMgPSB0aGlzLmdldERpZmZyZW50RGF0YShjaGVja2VkTm9kZXMpO1xyXG5cclxuICAgICAgICB0aGlzLnVwZGF0ZU5vZGVTdGF0dXMoKTtcclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVBbGxDaGVja2JveFN0YXR1cygpO1xyXG5cclxuICAgICAgICByZXR1cm4gY2hlY2tlZE5vZGVzLmZpbHRlcihuID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIG4uc2VsZWN0YWJsZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOihjENoZWNrYm94IOmAieS4reWPmOWMluS6i+S7tlxyXG4gICAgICogQHBhcmFtIGV2ZW50IOm8oOagh+eCueWHu+S6i+S7tuWvueixoVxyXG4gICAgICogQHBhcmFtIHJvd05vZGUg5b2T5YmN5qCR6IqC54K5XHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZU5vZGVXaXRoQ2hlY2tib3goZXZlbnQ6IEV2ZW50LCByb3dOb2RlOiBSb3dOb2RlLCBjaGVja2VkOiBib29sZWFuKTogYW55IHtcclxuICAgICAgICB0aGlzLnN0YXRlLnJvd05vZGVzLmZpbmQobiA9PiBuLmlkID09PSByb3dOb2RlLmlkKS5pc0NoZWNrZWQgPSBjaGVja2VkO1xyXG4gICAgICAgIHJvd05vZGUuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhID0gdGhpcy5jYXNjYWRlTm9kZXMocm93Tm9kZSwgY2hlY2tlZCk7XHJcblxyXG4gICAgICAgIHRoaXMudHRTZXJ2aWNlLm9uQ2hhbmdlQ2hlY2tib3hTdGF0dXMocm93Tm9kZSk7XHJcbiAgICAgICAgaWYgKGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlQ2hlY2tlZC5lbWl0KHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSwgbm9kZXM6IGRhdGEsIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZVVuQ2hlY2tlZC5lbWl0KHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIG5vZGU6IHJvd05vZGUubm9kZSwgbm9kZXM6IGRhdGEsIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3RXaGVuQ2hlY2tlZChyb3dOb2RlLCBjaGVja2VkLCBldmVudCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9ubHlTZWxlY3RTZWxmICYmIGNoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvdyA9IHJvd05vZGUubm9kZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tlZHMgPSBbLi4udGhpcy5jaGVja2Vkc107XHJcbiAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhajpgIlcclxuICAgICAqIEBwYXJhbSBldmVudCDpvKDmoIfkuovku7blr7nosaFcclxuICAgICAqIEBwYXJhbSBjaGVja2VkIOaYr+WQpumAieS4rVxyXG4gICAgICovXHJcbiAgICB0b2dnbGVOb2Rlc1dpdGhDaGVja2JveChldmVudDogRXZlbnQsIGNoZWNrZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kYXRhICYmIHRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tBbGxOb2Rlcyh7IG9yaWdpbmFsRXZlbnQ6IGV2ZW50LCBjaGVja2VkLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IG51bGw7XHJcbiAgICAgICAgICAgIHRoaXMudW5DaGVja0FsbE5vZGVzKHsgb3JpZ2luYWxFdmVudDogZXZlbnQsIGNoZWNrZWQsIGluc3RhbmNlOiB0aGlzfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pu05paw5YWo6YCJY2hlY2tib3gg55qE54q25oCBICovXHJcbiAgICBwcml2YXRlIHVwZGF0ZUFsbENoZWNrYm94U3RhdHVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzWydjaGVja2FsbF9DTElDS0VEJ10pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5pc0luZGV0ZXJtaW5hdGUoKTtcclxuICAgICAgICBpZiAodGhpcy5zaG93Q2hlY2tBbGwgJiYgIXRoaXMuc2luZ2xlU2VsZWN0ICYmIHRoaXMuc2hvd0NoZWNrYm94KSB7XHJcbiAgICAgICAgICAgIGlmIChzdGF0dXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVyQ2hlY2tib3hDbXApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmhlYWRlckNoZWNrYm94Q21wLmNoa0FsbC5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBzdGF0dXMgPT09IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveENtcC5jaGVja2VkID0gc3RhdHVzID09PSAxO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmm7TmlrDniLboioLngrljaGVja2JveCDpgInkuK3nirbmgIEgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlUGFyZW50Q2hlY2tib3hTdGF0dXMocm93Tm9kZTogUm93Tm9kZSkge1xyXG4gICAgICAgIGNvbnN0IHBOb2RlcyA9IFtdO1xyXG4gICAgICAgIHJvd05vZGUucGFyZW50cy5mb3JFYWNoKHJuaWQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBybiA9IHRoaXMuZmluZFJvd05vZGUocm5pZCk7XHJcbiAgICAgICAgICAgIGlmIChybikge1xyXG4gICAgICAgICAgICAgICAgcE5vZGVzLnB1c2gocm4pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHBOb2Rlcy5yZXZlcnNlKCkuZm9yRWFjaChybiA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlQ2hlY2tib3hTdGF0dXMocm4pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLyoqIOabtOaWsE7kuKrniLboioLngrnlpI3pgInmoYbkuK3nmoTpgInkuK3nirbmgIEgKi9cclxuICAgIHByaXZhdGUgdXBkYXRlUGFyZW50c0NoZWNrU3RhdHVzKHBhcmVudElkczogYW55KSB7XHJcbiAgICAgICAgbGV0IHBpZHMgPSBbXTtcclxuICAgICAgICBwYXJlbnRJZHMuZm9yRWFjaCgoaWRzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgcGlkcyA9IFsuLi5waWRzLCAuLi5pZHNdO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBwaWRzID0gQXJyYXkuZnJvbShuZXcgU2V0KHBpZHMpKTtcclxuXHJcbiAgICAgICAgY29uc3QgcFJvd05vZGVzID0gdGhpcy5maW5kUm93Tm9kZXMocGlkcyk7XHJcblxyXG4gICAgICAgIHBSb3dOb2Rlcy5zb3J0KChyLCBuKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBuLmxldmVsIC0gci5sZXZlbDtcclxuICAgICAgICB9KS5mb3JFYWNoKHJuID0+IHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDaGVja2JveFN0YXR1cyhybik7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmm7TmlrDoioLngrnkuK1jaGVja2JveOeahOeKtuaAgSAqL1xyXG4gICAgcHJpdmF0ZSB1cGRhdGVDaGVja2JveFN0YXR1cyhyb3dOb2RlOiBSb3dOb2RlKSB7XHJcbiAgICAgICAgY29uc3Qgc3RhdHVzID0gdGhpcy5pc0luZGV0ZXJtaW5hdGUocm93Tm9kZSk7XHJcbiAgICAgICAgaWYgKHN0YXR1cyAhPT0gdW5kZWZpbmVkICYmIHJvd05vZGUubm9kZS5zZWxlY3RhYmxlKSB7XHJcbiAgICAgICAgICAgIHJvd05vZGUuaW5kZXRlcm1pbmF0ZSA9IHN0YXR1cyA9PT0gMjtcclxuICAgICAgICAgICAgdGhpcy50dFNlcnZpY2Uub25DaGFuZ2VDaGVja2JveFN0YXR1cyhyb3dOb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWIpOaWreaMh+WumuiKgueCuWNoZWNrYm94IOeahOeKtuaAgVxyXG4gICAgICogMO+8muWFqOS4jemAie+8jCAx77yaIOWFqOmDqOmAieS4re+8jCAy77ya5pyJ6YCJ5Lit55qE5Lmf5pyJ5rKh6YCJ5Lit55qEXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgaXNJbmRldGVybWluYXRlKHJvd05vZGU/OiBSb3dOb2RlKTogYW55IHtcclxuICAgICAgICBjb25zdCBzdGF0dXMgPSB0aGlzLmdldENoZWNrYm94U3RhdHVzKHJvd05vZGUpO1xyXG4gICAgICAgIGlmIChzdGF0dXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICBsZXQgY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSAyKSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjaGVja2VkID0gISFzdGF0dXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJvd05vZGUgJiYgcm93Tm9kZS5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUuaXNDaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm93Tm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdGF0dXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDov5Tlm57niLbnuqfoioLngrljaGVja2JveCDnmoTnirbmgIHjgIIw77ya5LiN6YCJ5Lit77yMIDHvvJog6YCJ5Lit77yMIDLvvJrkuI3noa7lrppcclxuICAgICAqIEBwYXJhbSByb3dOb2RlIOeItue6p+iKgueCue+8m+S4uuepuuaXtui/lOWbnuWFqOmAiWNoZWNrYm94IOeahOeKtuaAgVxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGdldENoZWNrYm94U3RhdHVzKHJvd05vZGU/OiBSb3dOb2RlKSB7XHJcbiAgICAgICAgbGV0IHVuY2hlY2tlZExlbmd0aCA9IDA7XHJcbiAgICAgICAgbGV0IGNoZWNrZWRMZW5ndGggPSAwO1xyXG4gICAgICAgIGxldCBsZW4gPSAwO1xyXG4gICAgICAgIGxldCBjaGlsZE5vZGVzID0gW107XHJcbiAgICAgICAgaWYgKHJvd05vZGUpIHtcclxuICAgICAgICAgICAgY2hpbGROb2RlcyA9IHJvd05vZGUubm9kZS5jaGlsZHJlbnx8IFtdO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGVzLmZpbHRlcihuID0+IG4uc2VsZWN0YWJsZSkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm93Tm9kZS5pc0NoZWNrZWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY2hpbGROb2RlcyA9IHRoaXMuc3RhdGUucm93Tm9kZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxlbiA9IGNoaWxkTm9kZXMubGVuZ3RoO1xyXG5cclxuICAgICAgICBjaGlsZE5vZGVzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBybiA9IG47XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICBybiA9IHRoaXMuZmluZFJvd05vZGUobi5kYXRhW3RoaXMuaWRGaWVsZF0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChybiAmJiAhcm4uaW5kZXRlcm1pbmF0ZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHJuLmlzQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoZWNrZWRMZW5ndGgrKztcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdW5jaGVja2VkTGVuZ3RoKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGxlbiA9PT0gMCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZmxhZyA9IDA7XHJcbiAgICAgICAgaWYgKHVuY2hlY2tlZExlbmd0aCA9PT0gbGVuKSB7XHJcbiAgICAgICAgICAgIGZsYWcgPSAwO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChjaGVja2VkTGVuZ3RoID09PSBsZW4pIHtcclxuICAgICAgICAgICAgICAgIGZsYWcgPSAxO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmxhZyA9IDI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmbGFnO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZmluZEluZGV4SW4obm9kZTogVHJlZU5vZGUsIHRyZWVOb2RlczogVHJlZU5vZGVbXSkge1xyXG4gICAgICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgICAgIGlmICh0cmVlTm9kZXMgJiYgdHJlZU5vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBpbmRleCA9IHRyZWVOb2Rlcy5maW5kSW5kZXgoKHYsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVxdWFscyh2LCBub2RlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlnKjpgInkuK3nmoTpm4blkIjkuK3mn6Xmib7mjIflrproioLngrnnmoTntKLlvJVcclxuICAgICAqIEBwYXJhbSBub2RlIOagkeiKgueCuVxyXG4gICAgICovXHJcbiAgICBmaW5kSW5kZXhJbkNoZWNrZWRzKG5vZGU6IFRyZWVOb2RlKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kSW5kZXhJbihub2RlLCB0aGlzLmNoZWNrZWRzKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWcqOmAieS4reeahOmbhuWQiOS4reafpeaJvuaMh+WumuiKgueCueeahOe0ouW8lVxyXG4gICAgICogQHBhcmFtIG5vZGUg5qCR6IqC54K5XHJcbiAgICAgKi9cclxuICAgIGZpbmRJbmRleEluU2VsZWN0aW9uKG5vZGU6IFRyZWVOb2RlKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kSW5kZXhJbihub2RlLCB0aGlzLnNlbGVjdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlr7nmr5TkuKTkuKroioLngrnmmK/lkKblkIzkuIDkuKroioLngrkgKi9cclxuICAgIGVxdWFscyh0YXJnZXQ6IFRyZWVOb2RlLCBzb3VyY2U6IFRyZWVOb2RlKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5kYXRhW3RoaXMuaWRGaWVsZF0gPT09IHNvdXJjZS5kYXRhW3RoaXMuaWRGaWVsZF07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlsZXlvIDmiYDmnInoioLngrlcclxuICAgICAqIEBwYXJhbSByb3dOb2RlIOWxleW8gOatpOiKgueCueS4i+eahOaJgOacieiKgueCue+8m+WmguaenOS4uuepuu+8jOWImeWxleW8gOaJgOacieiKgueCuVxyXG4gICAgICogQHBhcmFtIGRlZXAg6K6+572u5Li6dHJ1ZSDml7bvvIzlvZPliY3oioLngrnkuIvnmoTmiYDmnInlrZDoioLngrnlhajpg6jlsZXlvIAsIOm7mOiupCBmYWxzZVxyXG4gICAgICogQHBhcmFtIGNoaWxkcmVuRW1wdHlFbWl0RXhwYW5kICDlvZPmsqHmnInlrZDoioLngrnmmK/lkKbop6blj5HlsZXlvIDkuovku7bvvIzpu5jorqTkuLogdHJ1ZVxyXG4gICAgICovXHJcbiAgICB0b2dnbGVFeHBhbmQodHJlZU5vZGU/OiBUcmVlTm9kZSwgZGVlcCA9IGZhbHNlLCBjaGlsZHJlbkVtcHR5RW1pdEV4cGFuZCA9IHRydWUpIHtcclxuICAgICAgICBpZiAodHJlZU5vZGUpIHtcclxuICAgICAgICAgICAgdHJlZU5vZGUuZXhwYW5kZWQgPSAhdHJlZU5vZGUuZXhwYW5kZWQ7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTm9kZVByb3BlcnR5KHRyZWVOb2RlLmlkLCB7ZXhwYW5kZWQ6IHRyZWVOb2RlLmV4cGFuZGVkfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9nZ2xlVmlzaWJsZSh0cmVlTm9kZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRyZWVOb2RlLmNoaWxkcmVuICYmIHRyZWVOb2RlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyVmlydHVhbFJvd05vZGVzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0cmVlTm9kZS5leHBhbmRlZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNoaWxkcmVuRW1wdHlFbWl0RXhwYW5kIHx8ICh0cmVlTm9kZS5jaGlsZHJlbiAmJiB0cmVlTm9kZS5jaGlsZHJlbi5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBhbmQuZW1pdCh0cmVlTm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyZWVOb2RlLmV4cGFuZGVkID0gIXRyZWVOb2RlLmV4cGFuZGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sbGFwc2UuZW1pdCh0cmVlTm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZWVwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJlZU5vZGUuY2hpbGRyZW4gJiYgdHJlZU5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJlZU5vZGUuY2hpbGRyZW4uZm9yRWFjaCgocm93LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRXhwYW5kKHJvdywgZGVlcCwgY2hpbGRyZW5FbXB0eUVtaXRFeHBhbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRhdGEgJiYgdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLmZvckVhY2goKHJvdzogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50b2dnbGVFeHBhbmQocm93KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZXROZXdDb2x1bW5zV2lkdGgoKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0b2dnbGVWaXNpYmxlKHRyZWVOb2RlOiBUcmVlTm9kZSkge1xyXG4gICAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmZpbmRSb3dOb2RlKHRyZWVOb2RlLmlkKTtcclxuICAgICAgICBpZiAocm93Tm9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCByaWQgPSByb3dOb2RlLmlkO1xyXG4gICAgICAgICAgICBjb25zdCBzZXRSb3dWaXNpYmxlID0gKHJuLCB2aXNpYmxlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBwaWQgPSBybi5wYXJlbnQuZGF0YVt0aGlzLmlkRmllbGRdO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm5QYXJlbnQgPSB0aGlzLmZpbmRSb3dOb2RlKHBpZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocm5QYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBybi52aXNpYmxlID0gcm5QYXJlbnQudmlzaWJsZSAmJiByblBhcmVudC5ub2RlLmV4cGFuZGVkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBybi52aXNpYmxlID0gdmlzaWJsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBfciA9IHRoaXMuc2VyaWFsaXplZFZhbHVlLmZpbmQobiA9PiBuLmlkID09PSBybi5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3IpIHtcclxuICAgICAgICAgICAgICAgICAgICBfci52aXNpYmxlID0gcm4udmlzaWJsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUucm93Tm9kZXMuZmlsdGVyKHJuID0+IHJuLnBhcmVudHMuaW5kZXhPZihyaWQpID4gLTEpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0Um93VmlzaWJsZShybiwgdHJlZU5vZGUuZXhwYW5kZWQpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyAjMzkyNTEyIFxyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlcyA9IHRoaXMuZ2V0Q3VycmVudEFsbFJvd05vZGVzKCk7XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgcm93Tm9kZXMuZmlsdGVyKHJuID0+IHJuLnBhcmVudHMuaW5kZXhPZihyaWQpID4gLTEpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFJvd1Zpc2libGUocm4sIHRyZWVOb2RlLmV4cGFuZGVkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlsZXlvIDmjIflrproioLngrlcclxuICAgICAqIGVtaXQ6IOinpuWPkeWxleW8gOS6i+S7tlxyXG4gICAgICogcmVuZGVyOiDmlbDmja7ph43mlrDliqDovb1cclxuICAgICAqL1xyXG4gICAgZXhwYW5kTm9kZShpZDogc3RyaW5nLCBlbWl0ID0gdHJ1ZSwgcmVuZGVyID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShpZCk7XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2RlKSB7XHJcbiAgICAgICAgICAgICAgICByb3dOb2RlLm5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlKHJvd05vZGUubm9kZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHJlbmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnZpcnR1YWxpemVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyb3dOb2RlLm5vZGUuY2hpbGRyZW4gJiYgcm93Tm9kZS5ub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJWaXJ0dWFsUm93Tm9kZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kLmVtaXQocm93Tm9kZS5ub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldE5ld0NvbHVtbnNXaWR0aCgpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKCdDb25cXCd0IGZpbmQgdHJlZSBub2RlIHdpZGggaWQ6JyArIGlkLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5bGV5byA5omA5pyJ6IqC54K5ICovXHJcbiAgICBleHBhbmRBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2RlcyA9IHRoaXMuc3RhdGUucm93Tm9kZXMubWFwKChyb3c6IFJvd05vZGUpID0+IHtcclxuICAgICAgICAgICAgcm93Lm5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByb3cudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHJldHVybiByb3c7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWxpemVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmlydHVhbFJvd05vZGVzKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVkVmFsdWUgPSB0aGlzLnN0YXRlLnJvd05vZGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNldE5ld0NvbHVtbnNXaWR0aCgpO1xyXG4gICAgICAgIHRoaXMuZXhwYW5kQWxsTm9kZXMuZW1pdCgpO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGV4cGFuZE5vZGVzKGlkOiBzdHJpbmcpIHtcclxuICAgICAgICAvLyBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShpZCk7XHJcbiAgICAgICAgLy8gY29uc3Qgcm9vdE5vZGUgPSB0aGlzLmdldFJvb3QoaWQpO1xyXG4gICAgICAgIC8vIGlmIChyb3dOb2RlKSB7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IHRyZWVOb2RlID0gcm93Tm9kZS5ub2RlO1xyXG4gICAgICAgIC8vICAgICB0cmVlTm9kZS5leHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgIHJvd05vZGUudmlzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgLy8gICAgIGNvbnN0IHBhcmVudHMgPSByb3dOb2RlLnBhcmVudHM7XHJcblxyXG4gICAgICAgIC8vICAgICB0aGlzLnN0YXRlLnJvd05vZGVzLmZpbHRlcihuID0+IG4ucGFyZW50cy5pbmRleE9mKHJvb3ROb2RlLmlkKSA+IC0xKS5mb3JFYWNoKHIgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgaWYgKHBhcmVudHMuaW5kZXhPZihyLmlkKSA+IC0xKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgci52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAvLyAgICAgICAgICAgICByLm5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgIC8vICAgICAgICAgfVxyXG4gICAgICAgIC8vICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgIC8vICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAvLyB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWxleW8gOaMh+WumuiKgueCueS4i+eahOaJgOacieiKgueCuSAqL1xyXG4gICAgZXhwYW5kQWxsTm9kZXNCeShyb3dOb2RlOiBhbnkpIHtcclxuICAgICAgICBpZiAocm93Tm9kZSkge1xyXG4gICAgICAgICAgICBjb25zdCB0cmVlTm9kZSA9IHJvd05vZGUubm9kZTtcclxuICAgICAgICAgICAgdHJlZU5vZGUuZXhwYW5kZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICByb3dOb2RlLnZpc2libGUgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maWx0ZXIobiA9PiBuLnBhcmVudHMuaW5kZXhPZihyb3dOb2RlLmlkKSA+IC0xKS5mb3JFYWNoKHIgPT4ge1xyXG4gICAgICAgICAgICAgICAgci52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHIubm9kZS5leHBhbmRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TmV3Q29sdW1uc1dpZHRoKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmipjlj6DmjIflrproioLngrkgKi9cclxuICAgIGNvbGxhcHNlTm9kZShpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmZpbmRSb3dOb2RlKGlkKTtcclxuICAgICAgICAgICAgaWYgKHJvd05vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUubm9kZS5leHBhbmRlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b2dnbGVWaXNpYmxlKHJvd05vZGUubm9kZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0TmV3Q29sdW1uc1dpZHRoKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbGxhcHNlLmVtaXQocm93Tm9kZS5ub2RlKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKCdDb25cXCd0IGZpbmQgdHJlZSBub2RlIHdpZGggaWQ6JyArIGlkLCAnZXJyb3InKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKiDmipjlj6DmiYDmnInoioLngrkgKi9cclxuICAgIGNvbGxhcHNlQWxsKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUucm93Tm9kZXMgPSB0aGlzLnN0YXRlLnJvd05vZGVzLm1hcCgocm93OiBSb3dOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgIHJvdy5ub2RlLmV4cGFuZGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJvdy52aXNpYmxlID0gIXJvdy5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHJldHVybiByb3c7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnZpcnR1YWxpemVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmlydHVhbFJvd05vZGVzKDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VyaWFsaXplZFZhbHVlID0gdGhpcy5zdGF0ZS5yb3dOb2RlcztcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0aGlzLmNvbGxhcHNlQWxsTm9kZXMuZW1pdCgpO1xyXG4gICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMuc2V0TmV3Q29sdW1uc1dpZHRoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29udGFpbmVyT2Zmc2V0KCkge1xyXG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmNvbnRhaW5lckVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGVmdDogcmVjdC5sZWZ0ICsgZG9jdW1lbnQuYm9keS5zY3JvbGxMZWZ0LFxyXG4gICAgICAgICAgICB0b3A6IHJlY3QudG9wICsgZG9jdW1lbnQuYm9keS5zY3JvbGxUb3BcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ29sdW1uUmVzaXplQmVnaW4oZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBjb250YWluZXJMZWZ0ID0gTWF0aC5yb3VuZCh0aGlzLmdldENvbnRhaW5lck9mZnNldCgpLmxlZnQpO1xyXG4gICAgICAgIHRoaXMubGFzdFJlc2l6ZXJIZWxwZXJYID0gKGV2ZW50LnBhZ2VYIC0gY29udGFpbmVyTGVmdCArIHRoaXMuY29udGFpbmVyRWxlbWVudC5zY3JvbGxMZWZ0KTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ29sdW1uUmVzaXplKGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXphYmxlQ29sdW1ucykge1xyXG4gICAgICAgICAgICBjb25zdCBjb250YWluZXJMZWZ0ID0gdGhpcy5nZXRDb250YWluZXJPZmZzZXQoKS5sZWZ0O1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMuY29udGFpbmVyRWxlbWVudCwgJ3VpLXVuc2VsZWN0YWJsZS10ZXh0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplckhlbHBlclZDLm5hdGl2ZUVsZW1lbnQuc3R5bGUuaGVpZ2h0ID0gdGhpcy5jb250YWluZXJFbGVtZW50Lm9mZnNldEhlaWdodCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplckhlbHBlclZDLm5hdGl2ZUVsZW1lbnQuc3R5bGUudG9wID0gMCArICdweCc7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplckhlbHBlclZDLm5hdGl2ZUVsZW1lbnQuc3R5bGUubGVmdCA9IChldmVudC5wYWdlWCAtIGNvbnRhaW5lckxlZnQpICsgJ3B4JztcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplckhlbHBlclZDLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uQ29sdW1uUmVzaXplRW5kKGV2ZW50OiBhbnksIGNvbHVtbjogYW55KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJlc2l6ZXJIZWxwZXJWQy5uYXRpdmVFbGVtZW50Lm9mZnNldExlZnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5YGP56e76YePXHJcbiAgICAgICAgY29uc3QgZGVsdGEgPSB0aGlzLnJlc2l6ZXJIZWxwZXJWQy5uYXRpdmVFbGVtZW50Lm9mZnNldExlZnQgLSB0aGlzLmxhc3RSZXNpemVySGVscGVyWDtcclxuICAgICAgICAvLyDliJflrr1cclxuICAgICAgICBjb25zdCBjb2x1bW5XaWR0aCA9IGNvbHVtbi5vZmZzZXRXaWR0aDtcclxuICAgICAgICAvLyDmlrDlrr3luqZcclxuICAgICAgICBjb25zdCBuZXdDb2x1bW5XaWR0aCA9IGNvbHVtbldpZHRoICsgZGVsdGE7XHJcbiAgICAgICAgLy8g5pyA5bCP5a695bqmXHJcbiAgICAgICAgY29uc3QgbWluV2lkdGggPSBjb2x1bW4uc3R5bGUubWluV2lkdGggfHwgMTU7XHJcblxyXG4gICAgICAgIGxldCByZXNpemVDb2x1bW5JbmRleCA9IC0xO1xyXG4gICAgICAgIGlmIChjb2x1bW4uaWQpIHtcclxuICAgICAgICAgICAgcmVzaXplQ29sdW1uSW5kZXggPSB0aGlzLmNvbHVtbnMuZmluZEluZGV4KG4gPT4gbi5pZCA9PT0gY29sdW1uLmlkKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjb2xGaWVsZCA9IGNvbHVtbi5nZXRBdHRyaWJ1dGUoJ2ZpZWxkJyk7XHJcbiAgICAgICAgICAgIGlmIChjb2xGaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgcmVzaXplQ29sdW1uSW5kZXggPSB0aGlzLmNvbHVtbnMuZmluZEluZGV4KG4gPT4gbi5maWVsZCA9PT0gY29sRmllbGQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmZpdENvbHVtbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVDb2xHcm91cCh0aGlzLmhlYWRlclRhYmxlLm5hdGl2ZUVsZW1lbnQsIHJlc2l6ZUNvbHVtbkluZGV4LCBuZXdDb2x1bW5XaWR0aCwgMCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplQ29sR3JvdXAodGhpcy5ib2R5VGFibGUubmF0aXZlRWxlbWVudCwgcmVzaXplQ29sdW1uSW5kZXgsIG5ld0NvbHVtbldpZHRoLCAwKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbHVtbnNbcmVzaXplQ29sdW1uSW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbnNbcmVzaXplQ29sdW1uSW5kZXhdLndpZHRoID0gbmV3Q29sdW1uV2lkdGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuc29ydENvbHVtbnNCeUZpeGVkKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuc2V0Q2VsbFdpZHRoQ3NzKHRoaXMuYWxsQ29sdW1uc1dpZHRoKCksIDAsIFtdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMuc2V0VGFibGVXaWR0aCh0aGlzLmFsbENvbHVtbnNXaWR0aCgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIC8vIHVwZGF0ZSBjc3MuXHJcbiAgICAgICAgICAgIC8vIGNvbnN0IF9jb2xJbmZvID0gdGhpcy5jb2x1bW5zW3Jlc2l6ZUNvbHVtbkluZGV4XTtcclxuICAgICAgICAgICAgLy8gaWYgKF9jb2xJbmZvKSB7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBydWxlTmFtZSA9IHRoaXMuY29sdW1uQ3NzTmFtZShfY29sSW5mbyk7XHJcbiAgICAgICAgICAgIC8vICAgICBjb25zdCBzdHlsZWNzcyA9IHJ1bGVOYW1lICsgJ3t3aWR0aDonICsgbmV3Q29sdW1uV2lkdGggKyAncHh9JztcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMudXRpbHMuYXBwZW5kQ3NzUnVsZXMoW3N0eWxlY3NzXSwgdGhpcy5zdHlsZUVsZW1lbnQuc2hlZXQpO1xyXG4gICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAvLyBjb25zdCBuZXh0Q29sdW1uID0gdGhpcy5jb2x1bW5zW3Jlc2l6ZUNvbHVtbkluZGV4ICsgMV07XHJcbiAgICAgICAgICAgIC8vIGlmIChuZXh0Q29sdW1uICYmIG5leHRDb2x1bW4uZml4ZWQpIHtcclxuICAgICAgICAgICAgLy8gICAgIGNvbnN0IHJ1bGVOYW1lID0gdGhpcy5jb2x1bW5Dc3NOYW1lKG5leHRDb2x1bW4pO1xyXG4gICAgICAgICAgICAvLyAgICAgY29uc3Qgc3R5bGVjc3MgPSBydWxlTmFtZSArICd7JyArIG5leHRDb2x1bW4uZml4ZWQgKyAnOicgKyBuZXh0Q29sdW1uW25leHRDb2x1bW4uZml4ZWRdICsgJ3B4fSc7XHJcbiAgICAgICAgICAgIC8vICAgICB0aGlzLnV0aWxzLmFwcGVuZENzc1J1bGVzKFtzdHlsZWNzc10sIHRoaXMuc3R5bGVFbGVtZW50LnNoZWV0KTtcclxuICAgICAgICAgICAgLy8gfVxyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobmV3Q29sdW1uV2lkdGggPiBtaW5XaWR0aCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG5leHRDb2x1bW4gPSBjb2x1bW4ubmV4dEVsZW1lbnRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKCFuZXh0Q29sdW1uLm9mZnNldFBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHRDb2x1bW4gPSBuZXh0Q29sdW1uLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobmV4dENvbHVtbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG5leHRDb2x1bW5XaWR0aCA9IG5leHRDb2x1bW4ub2Zmc2V0V2lkdGggLSBkZWx0YTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q29sdW1uTWluV2lkdGggPSBuZXh0Q29sdW1uLnN0eWxlLm1pbldpZHRoIHx8IDE1O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3Q29sdW1uV2lkdGggPiAxNSAmJiBuZXh0Q29sdW1uV2lkdGggPiBuZXh0Q29sdW1uTWluV2lkdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVDb2xHcm91cCh0aGlzLmhlYWRlclRhYmxlLm5hdGl2ZUVsZW1lbnQsIHJlc2l6ZUNvbHVtbkluZGV4LCBuZXdDb2x1bW5XaWR0aCwgbmV4dENvbHVtbldpZHRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemVDb2xHcm91cCh0aGlzLmJvZHlUYWJsZS5uYXRpdmVFbGVtZW50LCByZXNpemVDb2x1bW5JbmRleCwgbmV3Q29sdW1uV2lkdGgsIG5leHRDb2x1bW5XaWR0aCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnJlc2l6ZXJIZWxwZXJWQy5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVDbGFzcyh0aGlzLmNvbnRhaW5lckVsZW1lbnQsICd1aS11bnNlbGVjdGFibGUtdGV4dCcpO1xyXG4gICAgICAgIHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2l6ZUNvbEdyb3VwKHRhYmxlLCByZXNpemVDb2x1bW5JbmRleCwgbmV3Q29sdW1uV2lkdGgsIG5leHRDb2x1bW5XaWR0aD86IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0YWJsZSkge1xyXG4gICAgICAgICAgICBjb25zdCBjb2xHcm91cCA9IHRhYmxlLmNoaWxkcmVuWzBdLm5vZGVOYW1lID09PSAnQ09MR1JPVVAnID8gdGFibGUuY2hpbGRyZW5bMF0gOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgaWYgKGNvbEdyb3VwKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjb2wgPSBjb2xHcm91cC5jaGlsZHJlbltyZXNpemVDb2x1bW5JbmRleF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXh0Q29sID0gY29sLm5leHRFbGVtZW50U2libGluZztcclxuICAgICAgICAgICAgICAgIGNvbC5zdHlsZS53aWR0aCA9IG5ld0NvbHVtbldpZHRoICsgJ3B4JztcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5leHRDb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV4dENvbHVtbldpZHRoICYmIHRoaXMuZml0Q29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXh0Q29sLnN0eWxlLndpZHRoID0gbmV4dENvbHVtbldpZHRoICsgJ3B4JztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Njcm9sbGFibGUgdGFibGVzIHJlcXVpcmUgYSBjb2xncm91cCB0byBzdXBwb3J0IHJlc2l6YWJsZSBjb2x1bW5zJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWFyY2goKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWFyY2hSb3dOb2RlcyA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWFyY2hlZCA9ICEhdGhpcy5zZWFyY2hEYXRhLnZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnNlYXJjaERhdGEudmFsdWUpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWFyY2hEYXRhLnZhbHVlID0gdGhpcy5zZWFyY2hEYXRhLnZhbHVlLnRyaW0oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWFyY2guZW1pdCh0aGlzLnNlYXJjaERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIGluc2VydChub2RlOiBUcmVlTm9kZSwgcGFyZW50PzogVHJlZU5vZGUpIHtcclxuICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgIGlmICghcGFyZW50LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChub2RlKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuZXhwYW5kTm9kZShwYXJlbnQuZGF0YVt0aGlzLmlkRmllbGRdKTtcclxuICAgICAgICAgICAgdGhpcy5hcHBlbmROZXcuZW1pdCh7IHBhcmVudCB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmRhdGEucHVzaChub2RlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlU2VyaWFsaXplZFZhbHVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgYXBwZW5kKGRhdGE6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIHBhcmVudD86IFRyZWVOb2RlKSB7XHJcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YVt0aGlzLmlkRmllbGRdKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHsgZGF0YSwgaWQ6IGRhdGFbdGhpcy5pZEZpZWxkXSB9LCBwYXJlbnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKCdQbGVhc2Ugc2V0IGlkIHZhbHVlLicsICd3YXJuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZW1pdEFwcGVuZE5ldyhwYXJlbnQ6IFRyZWVOb2RlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZVBvc1kgPSB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZi5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZShub2RlUG9zWSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZXJpYWxpemVkVmFsdWUoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGFwcGVuZENoaWxkcmVuKG5vZGVzOiBUcmVlTm9kZVtdLCBwYXJlbnQ6IFRyZWVOb2RlLCBlbWl0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChub2RlcyAmJiBub2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaWYgKHBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcGFyZW50LmNoaWxkcmVuLnB1c2goLi4ubm9kZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0QXBwZW5kTmV3KHBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTmV3LmVtaXQoeyBwYXJlbnQgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ+acquaJvuWIsOeItue6p+iKgueCuScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVTZXJpYWxpemVkVmFsdWUoKTtcclxuICAgICAgICAgICAgdGhpcy53cml0ZUNvbnNvbGUoJ+a3u+WKoOWtkOiKgueCueeahOaVsOaNruS4uuepuicsICd3YXJuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGxvYWRDaGlsZHJlbihub2RlczogVHJlZU5vZGVbXSwgcGFyZW50OiBUcmVlTm9kZSwgZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAocGFyZW50KSB7XHJcbiAgICAgICAgICAgIHBhcmVudC5jaGlsZHJlbiA9IG5vZGVzIHx8IFtdO1xyXG4gICAgICAgICAgICB0aGlzLmVtaXRBcHBlbmROZXcocGFyZW50KTtcclxuICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXBwZW5kTmV3LmVtaXQoeyBwYXJlbnQgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVtb3ZlKG5vZGVJZDogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKG5vZGVJZCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShub2RlSWQpO1xyXG4gICAgICAgICAgICBpZiAocm93Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gcmVtb3ZlKHRoaXMuc3RhdGUucm93Tm9kZXMsIChuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIG4uaWQgPT09IG5vZGVJZDtcclxuICAgICAgICAgICAgICAgIC8vIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0VmFsdWUgPT09IG5vZGVJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0VmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChyb3dOb2RlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZShyb3dOb2RlLnBhcmVudC5jaGlsZHJlbiwgKG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uZGF0YVt0aGlzLmlkRmllbGRdID09PSBub2RlSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZSh0aGlzLnN0YXRlLnJvd05vZGVzLCAobikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5pZCA9PT0gbm9kZUlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0aGlzLmRhdGEuZmlsdGVyKG4gPT4gbi5kYXRhW3RoaXMuaWRGaWVsZF0gIT09IG5vZGVJZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVNlcmlhbGl6ZWRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR0U2VydmljZS5vblJlbW92ZShyb3dOb2RlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlZC5lbWl0KHJvd05vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZShub2RlSWQ6IHN0cmluZywgZGF0YTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSkge1xyXG4gICAgICAgIGlmIChub2RlSWQgJiYgZGF0YSkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShub2RlSWQpO1xyXG4gICAgICAgICAgICBpZiAocm93Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgcm93Tm9kZS5ub2RlLmRhdGEgPSBleHRlbmQocm93Tm9kZS5ub2RlLmRhdGEsIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR0U2VydmljZS5vblVwZGF0ZShyb3dOb2RlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlZC5lbWl0KHJvd05vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZU5vZGVQcm9wZXJ0eShub2RlaWQ6IHN0cmluZywgcHJvcGVydHk6IHsgW2tleTogc3RyaW5nXTogYW55IH0gKSB7XHJcbiAgICAgICAgY29uc3Qgcm93Tm9kZSA9IHRoaXMuZmluZFJvd05vZGUobm9kZWlkKTtcclxuICAgICAgICBpZiAocm93Tm9kZSAmJiBwcm9wZXJ0eSkge1xyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhwcm9wZXJ0eSkuZm9yRWFjaChrID0+IHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUubm9kZVtrXSA9IHByb3BlcnR5W2tdO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRTY29ybGxCb2R5SGVpZ2h0KCkge1xyXG4gICAgICAgIHRoaXMuc2NvcmxsQm9keUhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaG93RmlsdGVyQmFyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NvcmxsQm9keUhlaWdodCA9IHRoaXMuc2NvcmxsQm9keUhlaWdodCAtIDQ2O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYodGhpcy5lbmFibGVGaWx0ZXJSb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5zY29ybGxCb2R5SGVpZ2h0ID0gdGhpcy5zY29ybGxCb2R5SGVpZ2h0IC0gMzY7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5maXhlZEhlYWRlciAmJiB0aGlzLnNob3dIZWFkZXIpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaGVhZGVyQm94ICYmICh0aGlzLmhlYWRlcldyYXAgfHwgdGhpcy51c2VHcm91cEhlYWRlcikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGhoID0gdGhpcy5oZWFkZXJCb3gubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjb3JsbEJvZHlIZWlnaHQgPSB0aGlzLnNjb3JsbEJvZHlIZWlnaHQgLSBoaDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOWuveadvueJiOaXtu+8jOihqOWktOmrmOW6puWinumrmO+8jOmcgOimgeaMieWunumZheWPluW+l+ihqOWktOmrmOW6plxyXG4gICAgICAgICAgICAgICAgbGV0IF9oZWFkZXJIZWlnaHQgPSB0aGlzLmhlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRoZW1lc0tleSA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdnc3BfcnRmX3RoZW1TS2V5Jyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhlbWVzS2V5ID09PSAnbG9vc2UnICYmIHRoaXMuaGVhZGVyQm94KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2hlYWRlckhlaWdodCA9IHRoaXMuaGVhZGVyQm94Lm5hdGl2ZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zY29ybGxCb2R5SGVpZ2h0ID0gdGhpcy5zY29ybGxCb2R5SGVpZ2h0IC0gX2hlYWRlckhlaWdodDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucGFnaW5hdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnNjb3JsbEJvZHlIZWlnaHQgPSB0aGlzLnNjb3JsbEJvZHlIZWlnaHQgLSB0aGlzLnBhZ2VySGVpZ2h0O1xyXG4gICAgICAgIH1cclxuXHJcblxyXG5cclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNldFdpZHRoKHcpIHtcclxuICAgICAgICB0aGlzLndpZHRoID0gdztcclxuICAgIH1cclxuXHJcbiAgICByZXNpemUoc2l6ZT86IHsgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgfSkge1xyXG4gICAgICAgIGlmIChzaXplKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSBwYXJzZUludCgnJyArIHNpemUud2lkdGgsIDEwKTtcclxuICAgICAgICAgICAgY29uc3QgaCA9IHBhcnNlSW50KCcnICsgc2l6ZS5oZWlnaHQsIDEwKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLndpZHRoID09PSB3ICYmIHRoaXMuaGVpZ2h0ID09PSBoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zY3JvbGxZKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYuc2Nyb2xsVG9ZKHRoaXMuc3RhdGUuc2Nyb2xsWSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2Nyb2xsWCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLnNjcm9sbFRvWCh0aGlzLnN0YXRlLnNjcm9sbFgpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuc2V0V2lkdGgodyk7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZXRTY29ybGxCb2R5SGVpZ2h0KCk7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YSAmJiB0aGlzLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyVmlydHVhbFJvd05vZGVzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAvLyAgICAgaWYgKHRoaXMucHNSZWYpIHtcclxuICAgICAgICAvLyAgICAgICAgIHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLnVwZGF0ZSgpO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSwgMTAwKTtcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRGF0YShkYXRhOiBUcmVlTm9kZVtdKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0xpbmVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkTmV3RGF0YVNldEVtcHR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5kYXRhID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuaXNMb2FkTmV3RGF0YVNldEVtcHR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGF0YSA9IGRhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgZW1wdHkoKSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q3VycmVudEFsbFJvd05vZGVzKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlYXJjaGVkICYmIHRoaXMuc3RhdGUuc2VhcmNoUm93Tm9kZXMgJiYgdGhpcy5zdGF0ZS5zZWFyY2hSb3dOb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUuc2VhcmNoUm93Tm9kZXMgfHwgdGhpcy5zdGF0ZS5yb3dOb2RlcztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yb3dOb2RlcztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJBbGwoZGV0ZWN0Q2hhbmdlcyA9IHRydWUpOiBUcmVlVGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIHRoaXMuc3RhdGUucm93Tm9kZXMuZmlsdGVyKHJuID0+IHJuLmluZGV0ZXJtaW5hdGUpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICBybi5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMudHRTZXJ2aWNlLm9uQ2hhbmdlQ2hlY2tib3hTdGF0dXMocm4pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnN0YXRlLnJvd05vZGVzID0gdGhpcy5zdGF0ZS5yb3dOb2Rlcy5tYXAoKHJvdzogUm93Tm9kZSkgPT4ge1xyXG4gICAgICAgICAgICByb3cuaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJvdy5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJvdy5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiByb3c7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvLyBpZiAodGhpcy5zZWFyY2hEYXRhICYmIHRoaXMuc2VhcmNoRGF0YS52YWx1ZSkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnNlYXJjaGVkICYmIHRoaXMuc3RhdGUuc2VhcmNoUm93Tm9kZXMgJiYgdGhpcy5zdGF0ZS5zZWFyY2hSb3dOb2Rlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXJpYWxpemVkVmFsdWUgPSB0aGlzLnN0YXRlLnNlYXJjaFJvd05vZGVzLm1hcCgocm93OiBSb3dOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByb3cuaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICByb3cuaXNTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgcm93LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByb3c7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGVja2VkcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNob3dDaGVja0FsbCAmJiB0aGlzLmhlYWRlckNoZWNrYm94Q21wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaGVhZGVyQ2hlY2tib3hDbXAuY2hrQWxsLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlckNoZWNrYm94Q21wLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXRlY3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZGV0ZWN0Q2hhbmdlcygpOiBUcmVlVGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIHRoaXMuY2RSZWYubWFya0ZvckNoZWNrKCk7XHJcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLXN0cmluZy1saXRlcmFsXHJcbiAgICAgICAgaWYgKCF0aGlzLmNkUmVmWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDaGVja2VkcygpOiBUcmVlVGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrZWRzICYmIHRoaXMuY2hlY2tlZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZFJvd05vZGVzKHRoaXMuY2hlY2tlZHMubWFwKHRuID0+IHRuLmRhdGFbdGhpcy5pZEZpZWxkXSkpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcm4uaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGVja2VkcyA9IFtdO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaG93Q2hlY2tBbGwgJiYgdGhpcy5oZWFkZXJDaGVja2JveENtcCkge1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlckNoZWNrYm94Q21wLmNoa0FsbC5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJDaGVja2JveENtcC5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjbGVhclNlbGVjdGlvbnMoKTogVHJlZVRhYmxlQ29tcG9uZW50IHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VyaWFsaXplZFZhbHVlICYmIHRoaXMuc2VyaWFsaXplZFZhbHVlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgbi5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBuLmlzU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9ucyAmJiB0aGlzLnNlbGVjdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG5vZGVJZHMgPSB0aGlzLnNlbGVjdGlvbnMubWFwKHRuID0+IHRuLmRhdGFbdGhpcy5pZEZpZWxkXSk7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZFJvd05vZGVzKG5vZGVJZHMpLmZvckVhY2gocm4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcm4uaXNTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm4uaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKiog6YCJ5Lit56ysMeS4quWPr+S7pemAieS4reeahOiKgueCuSAqL1xyXG4gICAgc2VsZWN0Rmlyc3ROb2RlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLnJvd05vZGVzICYmIHRoaXMuc3RhdGUucm93Tm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZpcnN0Q2FuU2VsZWN0Tm9kZSA9IHRoaXMuc3RhdGUucm93Tm9kZXMuZmluZChuID0+IG4ubm9kZS5zZWxlY3RhYmxlKTtcclxuICAgICAgICAgICAgaWYgKGZpcnN0Q2FuU2VsZWN0Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKGZpcnN0Q2FuU2VsZWN0Tm9kZS5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzY3JvbGxUb0N1cnJlbnRSb3coaWQ6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IHRySWQgPSAncm93bm9kZS0nICsgaWQ7XHJcbiAgICAgICAgLy8gY29uc3QgdHJFbGUgPSAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0cklkKTtcclxuICAgICAgICBjb25zdCB0ckVsZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRySWQpIHx8IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRySWQpO1xyXG4gICAgICAgIGlmICh0ckVsZSAmJiB0ckVsZS5jbG9zZXN0KCcuZmFycmlzLXRyZWV0YWJsZScpICYmIHRyRWxlLmNsb3Nlc3QoJy5mYXJyaXMtdHJlZXRhYmxlJykuaWQgPT09IHRoaXMuaWQpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRWxlbWVudEluVmlld3BvcnQodHJFbGUpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHJFbGUuc2Nyb2xsSW50b1ZpZXdJZk5lZWRlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyRWxlLnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGJyb3dzZXJJbmZvID0gdGhpcy51dGlscy5nZXRCcm93c2VyVHlwZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGJyb3dzZXJJbmZvLmZmICYmIHRoaXMudXRpbHMuZ2V0RkZWZXIoKSA8IDU4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJFbGUuc2Nyb2xsSW50b1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJFbGUuc2Nyb2xsSW50b1ZpZXcoeyBibG9jazogJ25lYXJlc3QnLCBpbmxpbmU6ICduZWFyZXN0JyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRyRWxlLnNjcm9sbEludG9WaWV3KHsgYmxvY2s6ICduZWFyZXN0J30pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0VsZW1lbnRJblZpZXdwb3J0KGVsKSB7XHJcbiAgICAgICAgY29uc3QgY29udGFpbmVyRWwgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmZhcnJpcy10cmVldGFibGUtYm9keScpO1xyXG4gICAgICAgIGlmICghY29udGFpbmVyRWwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBjb250YWluZXIgPSBjb250YWluZXJFbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICBjb25zdCB2aWV3UG9ydEhlaWdodCA9IGNvbnRhaW5lci5oZWlnaHQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0VG9wID0gZWwub2Zmc2V0VG9wICsgdGhpcy50b3BIaWRlSGVpZ2h0O1xyXG4gICAgICAgIGNvbnN0IHNjcm9sbFRvcCA9IHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLmVsZW1lbnRSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgICAgICAgY29uc3QgdG9wID0gb2Zmc2V0VG9wIC0gc2Nyb2xsVG9wO1xyXG4gICAgICAgIHJldHVybiAgdG9wID49IDAgJiYgdG9wIDw9IHZpZXdQb3J0SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX3Njcm9sbFRvTm9kZShub2RlSWQ6IHN0cmluZykge1xyXG4gICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50Tm9kZShub2RlSWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNjcm9sbFRvQ3VycmVudE5vZGUobm9kZWlkID0gJycpIHtcclxuICAgICAgICBsZXQgaWQgPSBub2RlaWQ7XHJcbiAgICAgICAgaWYgKCFub2RlaWQgJiYgdGhpcy5zZWxlY3RlZFJvdykge1xyXG4gICAgICAgICAgICBpZCA9IHRoaXMuc2VsZWN0ZWRSb3cuaWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoaWQgPT0gbnVsbCB8fCBpZCA9PSB1bmRlZmluZWQgfHwgaWQgPT0gJycpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5zY3JvbGxUb0N1cnJlbnRSb3coaWQpO1xyXG4gICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmZpbmRSb3dOb2RlKGlkKTtcclxuICAgICAgICAgICAgY29uc3Qgc2hvd1Jvd3NPbmVQYWdlciA9IE1hdGguY2VpbCh0aGlzLnNjb3JsbEJvZHlIZWlnaHQgLyB0aGlzLnJvd0hlaWdodCApICsgMTtcclxuICAgICAgICAgICAgaWYgKHJvd05vZGUucGFyZW50cyAmJiByb3dOb2RlLnBhcmVudHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByb3dOb2RlLnBhcmVudHMuZm9yRWFjaChwaWQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kTm9kZShwaWQsIGZhbHNlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBcclxuICAgICAgICAgICAgY29uc3Qgcm93SW5kZXggPSB0aGlzLnN0YXRlLnJvd05vZGVzLmZpbHRlcihuID0+IG4udmlzaWJsZSkuZmluZEluZGV4KG4gPT4gbi5pZCA9PT0gaWQpO1xyXG4gICAgICAgICAgICBpZiAocm93SW5kZXggPCBzaG93Um93c09uZVBhZ2VyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyRGF0YSgwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50Um93KGlkKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHJvd0luZGV4ICogdGhpcy5yb3dIZWlnaHQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJEYXRhKHRvcCAtIHRoaXMucm93SGVpZ2h0KTtcclxuXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvQ3VycmVudFJvdyhpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucHNSZWYgJiYgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDUwKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9ZKHRvcCAtIHRoaXMucm93SGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2Nyb2xsVG9DdXJyZW50Um93KGlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6YCJ5Lit5oyH5a6aSUQg55qE6IqC54K5LFxyXG4gICAgICogZGV0ZWN0Q2hhbmdlczog6Kem5Y+R6ISP5YC85qOA5p+l77yM6buY6K6k5Li6IHRydWVcclxuICAgICAqIGdvdG9jdXJyZW50OiDkvb/nlKjpgInkuK3oioLngrnlj6/op4HvvIzpu5jorqTkuLogdHJ1ZVxyXG4gICAgICovXHJcbiAgICBzZWxlY3ROb2RlKGlkOiBzdHJpbmcsIGRldGVjdENoYW5nZXMgPSB0cnVlLCBnb3RvY3VycmVudCA9IHRydWUpOiBUcmVlVGFibGVDb21wb25lbnQge1xyXG4gICAgICAgIGlmICghaWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBub2RlID0gdGhpcy5maW5kUm93Tm9kZShpZCk7XHJcbiAgICAgICAgY29uc3QgY2FuU2VsZWN0ID0gbm9kZSAmJiBub2RlLm5vZGUgJiYgbm9kZS5ub2RlLnNlbGVjdGFibGU7XHJcbiAgICAgICAgY29uc3QgZW1pdCA9IGNhblNlbGVjdCAmJiAoIXRoaXMuc2VsZWN0ZWRSb3cgfHwgKHRoaXMuc2VsZWN0ZWRSb3cgJiYgaWQgIT09IHRoaXMuc2VsZWN0ZWRSb3cuaWQpKTtcclxuXHJcbiAgICAgICAgaWYgKG5vZGUgJiYgZW1pdCkge1xyXG4gICAgICAgICAgICBub2RlLmlzU2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QgfHwgdGhpcy5vbmx5U2VsZWN0U2VsZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbnMoKTtcclxuICAgICAgICAgICAgICAgIG5vZGUuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbbm9kZS5ub2RlXTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrT25TZWxlY3QgJiYgdGhpcy5zaG93Q2hlY2tib3gpIHtcclxuICAgICAgICAgICAgICAgICAgICBub2RlLmlzQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDaGVja2Vkcyhub2RlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNsZWFyQ2hlY2tlZHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkcyA9IFtub2RlLm5vZGVdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FzY2FkZUNoZWNrICYmIHRoaXMuY2FzY2FkZVVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGFyZW50Q2hlY2tib3hTdGF0dXMobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKG5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbm9kZS5ub2RlO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdE5vZGVDaGFuZ2VkU3ViamVjdC5uZXh0KGlkKTtcclxuICAgICAgICAgICAgdGhpcy5ub2RlU2VsZWN0ZWQuZW1pdCh7IG5vZGU6IG5vZGUubm9kZSwgaW5zdGFuY2U6IHRoaXMgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zZXJpYWxpemVkVmFsdWUuZmluZChuPT5uLmlkID09IHRoaXMuc2VsZWN0ZWRSb3cuaWQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlcmlhbGl6ZWRWYWx1ZS5maW5kKG49Pm4uaWQgPT0gdGhpcy5zZWxlY3RlZFJvdy5pZCkuaXNTZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChnb3RvY3VycmVudCAmJiB0aGlzLmZpeGVkSGVhZGVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbFRvQ3VycmVudE5vZGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGRldGVjdENoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFub2RlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVDb25zb2xlKGDmnKrmib7liLBJROS4uiAke2lkfSDnmoTmlbDmja7vvIHvvIFgKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlj5bmtojpgInkuK0gKi9cclxuICAgIHVuU2VsZWN0Tm9kZShpZDogc3RyaW5nLCBkZXRlY3RDaGFuZ2VzID0gdHJ1ZSkge1xyXG4gICAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmZpbmRSb3dOb2RlKGlkKTtcclxuICAgICAgICBpZiAocm93Tm9kZSkge1xyXG4gICAgICAgICAgICByb3dOb2RlLmlzU2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsZWFyU2VsZWN0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFJvdyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByb3dOb2RlLmlzQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gW107XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbmx5U2VsZWN0U2VsZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbnMocm93Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChkZXRlY3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLm5vZGVVblNlbGVjdC5lbWl0KHsgbm9kZTogcm93Tm9kZS5ub2RlLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZShg5pyq5om+5YiwSUTkuLoke2lkfeeahOaVsOaNru+8ge+8gWApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6YCJ5Lit5aSa6KGM5pWw5o2uICovXHJcbiAgICBzZWxlY3ROb2RlcyhpZHM6IHN0cmluZ1tdLCBkZXRlY3RDaGFuZ2VzID0gdHJ1ZSwgZW1pdE5vZGVTZWxlY3RlZCA9IGZhbHNlKTogVHJlZVRhYmxlQ29tcG9uZW50IHtcclxuICAgICAgICBpZiAoaWRzICYmIGlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLmZpbmRSb3dOb2RlcyhpZHMpLm1hcChybiA9PiB7XHJcbiAgICAgICAgICAgICAgICBybi5pc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhybik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcm4ubm9kZTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbLi4udGhpcy5zZWxlY3Rpb25zXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChkZXRlY3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlQ2hhbmdlZFN1YmplY3QubmV4dChpZHMuam9pbignLCcpKTtcclxuICAgICAgICAgICAgaWYgKGVtaXROb2RlU2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZVNlbGVjdGVkLmVtaXQoeyBub2RlOiBub2RlcywgaW5zdGFuY2U6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWPlua2iOmAieS4rSAqL1xyXG4gICAgdW5TZWxlY3ROb2RlcyhpZHM/OiBzdHJpbmdbXSwgZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAoaWRzICYmIGlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93bm9kZXMgPSB0aGlzLmZpbmRSb3dOb2RlcyhpZHMpO1xyXG4gICAgICAgICAgICBpZiAocm93bm9kZXMgJiYgcm93bm9kZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByb3dub2Rlcy5mb3JFYWNoKHJuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBybi5pc1NlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3Rpb25zKHJuKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zID0gWy4uLnRoaXMuc2VsZWN0aW9uc107XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlVW5TZWxlY3QuZW1pdCh7IG5vZGU6IHJvd25vZGVzLm1hcChyID0+IHIubm9kZSksIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhclNlbGVjdGlvbnMoKTtcclxuICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6ZKp6YCJ5oyH5a6a55qE6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gdXBkYXRlUGFyZW50Q2hlY2tib3hTdGF0dXM6IOaYr+WQpuabtOaWsOeItue6p+iKgueCuWNoZWNrYm94IOeKtuaAgSwg6buY6K6k5Li6IHRydWVcclxuICAgICAqIEBwYXJhbSBkZXRlY3RDaGFuZ2VzIOinpuWPkeWPmOabtOajgOa1i+OAgum7mOiupOS4uiB0cnVlXHJcbiAgICAgKi9cclxuICAgIGNoZWNrZWROb2RlKGlkOiBzdHJpbmcsIHVwZGF0ZVBhcmVudENoZWNrYm94U3RhdHVzID0gdHJ1ZSwgZGV0ZWN0Q2hhbmdlcyA9IHRydWUpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZU11bHRpU2VsZWN0KCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgbm9kZSA9IHRoaXMuZmluZFJvd05vZGUoaWQpO1xyXG4gICAgICAgICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgICAgICAgICAgbm9kZS5pc0NoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ2hlY2tlZChub2RlLm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRDaGVja2Vkcyhub2RlLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHVwZGF0ZVBhcmVudENoZWNrYm94U3RhdHVzICYmIHRoaXMuY2FzY2FkZUNoZWNrICYmIHRoaXMuY2FzY2FkZVVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlUGFyZW50Q2hlY2tib3hTdGF0dXMobm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRldGVjdENoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZUNoZWNrZWQuZW1pdCh7IG9yaWdpbmFsRXZlbnQ6IG51bGwsIG5vZGU6IG5vZGUubm9kZSwgaW5zdGFuY2U6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZShg5pyq5om+5YiwSUTkuLoke2lkfeeahOaVsOaNru+8ge+8gWApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuQ2hlY2tlZE5vZGUoaWQ6IHN0cmluZywgdXBkYXRlUGFyZW50Q2hlY2tib3hTdGF0dXMgPSB0cnVlLCApIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZU11bHRpU2VsZWN0KCkpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93bm9kZSA9IHRoaXMuZmluZFJvd05vZGUoaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJvd25vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJvd25vZGUuaXNDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldENoZWNrZWRzKHJvd25vZGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0T25DaGVjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJvd25vZGUuaXNTZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0aW9ucyhyb3dub2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRSb3cgJiYgdGhpcy5zZWxlY3RlZFJvdy5pZCA9PT0gaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkUm93ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaW5nbGVTZWxlY3QgfHwgIXRoaXMuY2FzY2FkZUNoZWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVOb2RlU3RhdHVzKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cGRhdGVQYXJlbnRDaGVja2JveFN0YXR1cyAmJiB0aGlzLmNhc2NhZGVDaGVjayAmJiB0aGlzLmNhc2NhZGVVcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBhcmVudENoZWNrYm94U3RhdHVzKHJvd25vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tWYWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlcyA9IHRoaXMuY2hlY2tWYWx1ZXMuZmlsdGVyKG4gPT4gbiAhPT0gaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNoZWNrVmFsdWVzQ2hhbmdlLmVtaXQodGhpcy5jaGVja1ZhbHVlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVVbkNoZWNrZWQuZW1pdCh7IG5vZGU6IHJvd25vZGUsIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB1bk5vZGVzID0gdGhpcy5jYXNjYWRlTm9kZXMocm93bm9kZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZHMgPSBbLi4udGhpcy5jaGVja2Vkc107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja1ZhbHVlc0NoYW5nZS5lbWl0KHRoaXMuY2hlY2tWYWx1ZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVVbkNoZWNrZWQuZW1pdCh7IG5vZGU6IHJvd25vZGUsIG5vZGVzOiB1bk5vZGVzLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUNvbnNvbGUoYOacquaJvuWIsElE5Li6JHtpZH3nmoTmlbDmja7vvIHvvIFgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9jaGVja2VkTm9kZXMoaWRzOiBzdHJpbmdbXSwgY2hlY2tlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGNvbnN0IHBhcmVudElEUyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IG5vZGVzID0gdGhpcy5maW5kUm93Tm9kZXMoaWRzKS5tYXAocm4gPT4ge1xyXG4gICAgICAgICAgICBwYXJlbnRJRFMucHVzaChybi5wYXJlbnRzKTtcclxuICAgICAgICAgICAgaWYgKHJuLm5vZGUuc2VsZWN0YWJsZSkge1xyXG4gICAgICAgICAgICAgICAgcm4uaXNDaGVja2VkID0gY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tlZHMocm4sIGZhbHNlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcm4ubm9kZTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmNoZWNrZWRzID0gWy4uLnRoaXMuY2hlY2tlZHNdO1xyXG4gICAgICAgIGlmICh0aGlzLmNhc2NhZGVDaGVjayAmJiB0aGlzLmNhc2NhZGVVcCkge1xyXG4gICAgICAgICAgICAvLyDmm7TmlrDniLboioLngrnlpI3moYbnmoTpgInkuK3nirbmgIFcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVQYXJlbnRzQ2hlY2tTdGF0dXMocGFyZW50SURTKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBub2RlcztcclxuICAgIH1cclxuXHJcbiAgICAvKiog5om56YeP6YCJ5Lit6IqC54K5XHJcbiAgICAgKiBAcGFyYW0gaWRzOiBpZCDpm4blkIhcclxuICAgICAqIEBwYXJhbSBkZXRlY3RDaGFuZ2VzOiBib29sZWFuICDpu5jorqTkuLogdHJ1ZSAs5piv5ZCm6Kem5Y+R5Y+Y5pu05qOA5rWLXHJcbiAgICAgKiBjbG9zZUNhc2NhZGU6ICDmiafooYzlj5bmtojpkqnpgInml7bmmK/lkKblhbPpl63nuqfogZTlip/og73jgILpu5jorqTkuLogZmFsc2VcclxuICAgICAqICAgICAg6K6+5Li6dHJ1ZeaXtu+8jOmSqemAieWwhuemgeeUqOe6p+iBlOeahOWKn+iDve+8jOS7heWkhOeQhuW9k+WJjeiKgueCueeahOmAieS4reeKtuaAgeOAguaJp+ihjOWujOavleWQju+8jOaBouWkjeWOn+WFiOeahOe6p+iBlOmAiemhueOAglxyXG4gICAgICovXHJcbiAgICBjaGVja2VkTm9kZXMoaWRzOiBhbnlbXSwgZGV0ZWN0Q2hhbmdlcyA9IHRydWUsIGVtaXQgPSB0cnVlLCBjbG9zZUNhc2NhZGU/OiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVNdWx0aVNlbGVjdCgpKSB7XHJcbiAgICAgICAgICAgIGlmIChpZHMgJiYgaWRzLmxlbmd0aCkge1xyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IF9jYXNjYWRlID0gdGhpcy5jYXNjYWRlQ2hlY2s7XHJcbiAgICAgICAgICAgICAgICBpZiAoY2xvc2VDYXNjYWRlICYmIF9jYXNjYWRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYXNjYWRlQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IHRoaXMuX2NoZWNrZWROb2RlcyhpZHMsIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChjbG9zZUNhc2NhZGUgJiYgX2Nhc2NhZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyDmgaLlpI3nuqfogZRcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNhc2NhZGVDaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVBbGxDaGVja2JveFN0YXR1cygpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkZXRlY3RDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVDaGVja2VkLmVtaXQoeyBvcmlnaW5hbEV2ZW50OiBudWxsLCBub2RlOiBub2Rlcywgbm9kZXMsIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI6YCJ5Lit55qE6IqC54K5LlxyXG4gICAgICogaWRzOiDmoIfor4ZJZCDmlbDnu4RcclxuICAgICAqIGNsb3NlQ2FzY2FkZTog5omn6KGM5Y+W5raI6ZKp6YCJ5pe25piv5ZCm5YWz6Zet57qn6IGU5Yqf6IO944CC6buY6K6k5Li6IGZhbHNlXHJcbiAgICAgKiAgICAg6K6+5Li6dHJ1ZeaXtu+8jOmSqemAieWwhuemgeeUqOe6p+iBlOeahOWKn+iDve+8jOS7heWkhOeQhuW9k+WJjeiKgueCueeahOmAieS4reeKtuaAgeOAguaJp+ihjOWujOavleWQju+8jOaBouWkjeWOn+WFiOeahOe6p+iBlOmAiemhueOAglxyXG4gICAgICogZW1pdDog5piv5ZCm6Kem5Y+R5Y+W5raI5Yu+6YCJ5LqL5Lu244CC6buY6K6k5Li6IHRydWVcclxuICAgICAqL1xyXG4gICAgdW5DaGVja2VkTm9kZXMoaWRzOiBzdHJpbmdbXSwgY2xvc2VDYXNjYWRlPzogYm9vbGVhbiwgZW1pdCA9IHRydWUpIHtcclxuICAgICAgICBpZiAoaWRzICYmIGlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgX2Nhc2NhZGUgPSB0aGlzLmNhc2NhZGVDaGVjaztcclxuICAgICAgICAgICAgaWYgKGNsb3NlQ2FzY2FkZSAmJiBfY2FzY2FkZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYXNjYWRlQ2hlY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB0aGlzLl9jaGVja2VkTm9kZXMoaWRzLCBmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoY2xvc2VDYXNjYWRlICYmIF9jYXNjYWRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhc2NhZGVDaGVjayA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVVbkNoZWNrZWQuZW1pdCh7IG9yaWdpbmFsRXZlbnQ6IG51bGwsIG5vZGU6IG5vZGVzLCBub2RlcywgaW5zdGFuY2U6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2hlY2tlZHMoKTtcclxuICAgICAgICAgICAgdGhpcy5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVuQ2hlY2tlZEFuZFNlbGVjdGVkKGlkczogc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLnVuQ2hlY2tlZE5vZGVzKGlkcywgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudW5TZWxlY3ROb2RlcyhpZHMsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBmaW5kUm93Tm9kZShpZDogc3RyaW5nKTogUm93Tm9kZSB7XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLnJvd05vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maW5kKG4gPT4gbi5pZCA9PT0gaWQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlsIblnKggdjAuMi54IOW6n+W8g++8m+ivt+S9v+eUqCBmaW5kUm93Tm9kZSDmlrnms5UgKi9cclxuICAgIGZpbmROb2RlKGlkOiBzdHJpbmcpOiBSb3dOb2RlIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5maW5kUm93Tm9kZShpZCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmoLnmja7lvZPliY3oioLngrlJRO+8jOiOt+WPlumhtue6p+eItuiKgueCuVxyXG4gICAgICogQHBhcmFtIGlkIOW9k+WJjeiKgueCuUlEXHJcbiAgICAgKiBAcmV0dXJucyDov5Tlm57pobbnuqfoioLngrlcclxuICAgICAqL1xyXG4gICAgZ2V0Um9vdChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3Qgcm93Tm9kZSA9IHRoaXMuZmluZFJvd05vZGUoaWQpO1xyXG4gICAgICAgIGlmIChyb3dOb2RlKSB7XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2RlLnBhcmVudHMgJiYgcm93Tm9kZS5wYXJlbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmluZFJvd05vZGUocm93Tm9kZS5wYXJlbnRzWzBdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcm93Tm9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGZpbmRSb3dOb2RlcyhpZHM6IHN0cmluZ1tdKTogUm93Tm9kZVtdIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS5yb3dOb2Rlcy5maWx0ZXIocm4gPT4gaWRzLmluZGV4T2Yocm4uaWQpID4gLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrQWxsTm9kZXMoYXJncz86IGFueSkge1xyXG4gICAgICAgIGxldCByb3dOb2RlcyA9IHRoaXMuZ2V0Q3VycmVudEFsbFJvd05vZGVzKCk7XHJcbiAgICAgICAgcm93Tm9kZXMgPSByb3dOb2Rlcy5maWx0ZXIobiA9PiAobi5ub2RlLnNlbGVjdGFibGUgfHwgbi5ub2RlLnNlbGVjdGFibGUgPT09IHVuZGVmaW5lZCkpO1xyXG5cclxuICAgICAgICB0aGlzLmNoZWNrZWRzID0gcm93Tm9kZXMubWFwKG4gPT4ge1xyXG4gICAgICAgICAgICBuLmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy50dFNlcnZpY2Uub25DaGFuZ2VDaGVja2JveFN0YXR1cyhuKTtcclxuICAgICAgICAgICAgaWYgKG4ubm9kZS5zZWxlY3RhYmxlIHx8IG4ubm9kZS5zZWxlY3RhYmxlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIG4uaXNDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbi5ub2RlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RPbkNoZWNrICYmICF0aGlzLm9ubHlTZWxlY3RTZWxmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IHJvd05vZGVzLm1hcChuID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChuLm5vZGUuc2VsZWN0YWJsZSB8fCBuLm5vZGUuc2VsZWN0YWJsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5pc1NlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuLm5vZGU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUuc2VhcmNoZWQpIHtcclxuICAgICAgICAgICAgcm93Tm9kZXMuZm9yRWFjaChybiA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByb3cgPSB0aGlzLnN0YXRlLnJvd05vZGVzLmZpbmQobiA9PiBuLmlkID09PSBybi5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocm93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcm93LmlzU2VsZWN0ZWQgPSBybi5pc1NlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJvdy5pc0NoZWNrZWQgPSBybi5pc0NoZWNrZWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5jaGVja0FsbC5lbWl0KGFyZ3MpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQWxsQ2hlY2tib3hTdGF0dXMoKTtcclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICB1bkNoZWNrQWxsTm9kZXMoYXJncz86IGFueSkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJBbGwoKTtcclxuICAgICAgICB0aGlzLnVuQ2hlY2tBbGwuZW1pdChhcmdzKTtcclxuICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGlzRW5hYmxlTXVsdGlTZWxlY3QoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5zaG93Q2hlY2tib3gpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5LuO5pWw5o2u5Lit6I635Y+W6IqC54K55Zu+5qCHXHJcbiAgICAvLyBpY29uRmllbGQg5Li6IG9iamVjdFxyXG4gICAgLy8gICAgICDlpoLmnpwg5bGV5byA5Zu+5qCH5Li656m677yM5oqY5Y+g5Zu+5qCH5LiN5Li656m677yM5oiW5Y+N5LmL77yM5YiZ5bGV5byA5LiO5oqY5Y+g5Zu+5qCH5L+d5oyB5LiA6Iez77ybXHJcbiAgICAvLyAgICAgIOWmguaenCDlj7blrZDlm77moIfkuLrnqbrvvIzliJnkvb/nlKjnu4Tku7bpu5jorqTnmoTlm77moIdcclxuICAgIC8vIGljb25GaWVsZCDkuLog5a2X56ym5Liy77yaIOWImeWPtuWtkCDlsZXlvIAg5oqY5Y+gIOWbvuagh+S9v+eUqOWQjOS4gOS4quOAgiDlpoLmnpzkuLrnqbrvvIwg5YiZ5L2/55So57uE5Lu26buY6K6k5Zu+5qCHXHJcbiAgICBwcml2YXRlIGdldE5vZGVJY29uRnJvbURhdGEodG46IFRyZWVOb2RlKSB7XHJcbiAgICAgICAgbGV0IGxlYWYgPSBudWxsO1xyXG4gICAgICAgIGxldCBleHBhbmQgPSBudWxsO1xyXG4gICAgICAgIGxldCBjb2xsYXBzZSA9IG51bGw7XHJcbiAgICAgICAgaWYgKHRoaXMudXNlSWNvbkZyb21EYXRhKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmljb25GaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IF9pY29uRmllbGQgPSAnJztcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5pY29uRmllbGQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2ljb25GaWVsZCA9IHRoaXMuaWNvbkZpZWxkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0bltfaWNvbkZpZWxkXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWFmID0gdG5bX2ljb25GaWVsZF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGVhZiA9IHRoaXMudXRpbHMuZ2V0VmFsdWUoX2ljb25GaWVsZCwgdG4uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBleHBhbmQgPSBjb2xsYXBzZSA9IGxlYWY7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmljb25GaWVsZC5sZWFmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlYWYgPSB0aGlzLnV0aWxzLmdldFZhbHVlKHRoaXMuaWNvbkZpZWxkLmxlYWYsIHRuLmRhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pY29uRmllbGQuZXhwYW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZCA9IHRoaXMudXRpbHMuZ2V0VmFsdWUodGhpcy5pY29uRmllbGQuZXhwYW5kLCB0bi5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWNvbkZpZWxkLmNvbGxhcHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlID0gdGhpcy51dGlscy5nZXRWYWx1ZSh0aGlzLmljb25GaWVsZC5jb2xsYXBzZSwgdG4uZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXhwYW5kICYmICFjb2xsYXBzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xsYXBzZSA9IGV4cGFuZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZXhwYW5kICYmIGNvbGxhcHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cGFuZCA9IGNvbGxhcHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxlYWYsIGV4cGFuZCwgY29sbGFwc2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFRyZWVJY29uKHRyZWVOb2RlOiBUcmVlTm9kZSkge1xyXG4gICAgICAgIGNvbnN0IHRuID0gdHJlZU5vZGU7XHJcbiAgICAgICAgbGV0IGxlYWZJY29uID0gdGhpcy5sZWFmSWNvbiB8fCAnZmlsZSc7XHJcbiAgICAgICAgbGV0IGV4cGFuZEljb24gPSB0aGlzLmV4cGFuZEljb24gfHwgJ2ZvbGRlci1vcGVuJztcclxuICAgICAgICBsZXQgY29sbGFwc2VJY29uID0gdGhpcy5jb2xsYXBzZUljb24gfHwgJ2ZvbGRlcic7XHJcbiAgICAgICAgY29uc3QgbG9hZGluZyA9ICdmLWxvYWRpbmctcm91bmQnO1xyXG5cclxuICAgICAgICBpZiAodG5bJ3Nob3dMb2FkaW5nJ10pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgW2xvYWRpbmddOiB0cnVlIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG4uaWNvbikge1xyXG4gICAgICAgICAgICBsZWFmSWNvbiA9IHRuLmljb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG4uZXhwYW5kZWRJY29uKSB7XHJcbiAgICAgICAgICAgIGV4cGFuZEljb24gPSB0bi5leHBhbmRlZEljb247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodG4uY29sbGFwc2VkSWNvbikge1xyXG4gICAgICAgICAgICBjb2xsYXBzZUljb24gPSB0bi5jb2xsYXBzZWRJY29uO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudXNlSWNvbkZyb21EYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgbGVhZiwgZXhwYW5kLCBjb2xsYXBzZSB9ID0gdGhpcy5nZXROb2RlSWNvbkZyb21EYXRhKHRyZWVOb2RlKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMud2hlbkRhdGFJY29uRW1wdHlVc2VEZWZhdWx0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVhZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxlYWZJY29uID0gbGVhZjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChleHBhbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBleHBhbmRJY29uID0gZXhwYW5kO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGNvbGxhcHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sbGFwc2VJY29uID0gY29sbGFwc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZWFmSWNvbiA9IGxlYWYgfHwgJyc7XHJcbiAgICAgICAgICAgICAgICBleHBhbmRJY29uID0gZXhwYW5kIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgY29sbGFwc2VJY29uID0gY29sbGFwc2UgfHwgJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICBjb25zdCBjb2xsYXBzZWRFeHByZXNzaW9uID0gKCF0bi5sZWFmIHx8ICEhKHRuLmNoaWxkcmVuICYmIHRuLmNoaWxkcmVuLmxlbmd0aCkpICYmICF0bi5leHBhbmRlZDtcclxuICAgICAgICBjb25zdCBleHBhbmRlZEV4cHJlc3Npb24gPSAhIXRuLmV4cGFuZGVkO1xyXG4gICAgICAgIGNvbnN0IGxlYWZFeHByZXNzaW9uID0gdG4ubGVhZiA9PT0gdW5kZWZpbmVkID8gKCF0bi5jaGlsZHJlbiB8fCAhdG4uY2hpbGRyZW4ubGVuZ3RoKSA6IHRuLmxlYWY7XHJcblxyXG4gICAgICAgIGNvbnN0IGljb25zID0ge307XHJcblxyXG4gICAgICAgIGlmIChsZWFmRXhwcmVzc2lvbiAmJiBsZWFmSWNvbikge1xyXG4gICAgICAgICAgICBpY29uc1tsZWFmSWNvbl0gPSBsZWFmRXhwcmVzc2lvbjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodG4uZXhwYW5kZWQgJiYgZXhwYW5kSWNvbikge1xyXG4gICAgICAgICAgICAgICAgaWNvbnNbZXhwYW5kSWNvbl0gPSBleHBhbmRlZEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29sbGFwc2VJY29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnNbY29sbGFwc2VJY29uXSA9IGNvbGxhcHNlZEV4cHJlc3Npb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmljb25DbHMpIHtcclxuICAgICAgICAgICAgaWNvbnNbdGhpcy5pY29uQ2xzXSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaWNvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb21wYXJlKGEsIGIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhLmxvY2FsZUNvbXBhcmUoYik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPT09IGIgPyAwIDogKGEgPiBiID8gMSA6IC0xKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBwcml2YXRlIF9zb3J0KHIxLCByMikge1xyXG4gICAgICAgIGxldCByID0gMDtcclxuICAgICAgICBjb25zdCBzb3J0RmllbGRzID0gdGhpcy5zb3J0TmFtZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgIGNvbnN0IG9yZGVycyA9IHRoaXMuc29ydE9yZGVyLnNwbGl0KCcsJyk7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5zb3J0TmFtZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc29ydEZpZWxkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBzbiA9IHNvcnRGaWVsZHNbaV07XHJcbiAgICAgICAgICAgIGNvbnN0IHNvID0gb3JkZXJzW2ldO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgY29sID0gdGhpcy5jb2x1bW5zLmZpbmQoYyA9PiBjLmZpZWxkID09PSBzbik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvcmRlcmJ5ID0gY29sLnNvcnRlciB8fCB0aGlzLmNvbXBhcmU7XHJcbiAgICAgICAgICAgIGxldCB2MSA9IHRoaXMudXRpbHMuZ2V0VmFsdWUoc24sIHIxLmRhdGEpO1xyXG4gICAgICAgICAgICBpZiAodjEgPT09IG51bGwgfHwgdjEgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdjEgPSAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgdjIgPSB0aGlzLnV0aWxzLmdldFZhbHVlKHNuLCByMi5kYXRhKTtcclxuICAgICAgICAgICAgaWYgKHYyID09PSBudWxsIHx8IHYyID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHYyID0gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgciA9IG9yZGVyYnkodjEsIHYyKTtcclxuICAgICAgICAgICAgaWYgKHIgIT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByICogKHNvID09PSAnYXNjJyA/IDEgOiAtMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHI7XHJcbiAgICB9XHJcblxyXG4gICAgY2xpZW50U29ydCgpIHtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmRhdGEgfHwgIXRoaXMuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc29ydGVkRGF0YSA9IHRoaXMuZGF0YS5zb3J0KHRoaXMuX3NvcnQuYmluZCh0aGlzKSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHNvcnRDaGlsZE5vZGVzID0gKGNoaWxkTm9kZXMpID0+IHtcclxuICAgICAgICAgICAgY2hpbGROb2RlcyA9IGNoaWxkTm9kZXMuc29ydCh0aGlzLl9zb3J0LmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICBjaGlsZE5vZGVzLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobi5jaGlsZHJlbiAmJiBuLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uY2hpbGRyZW4gPSBuLmNoaWxkcmVuLnNvcnQodGhpcy5fc29ydC5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0Q2hpbGROb2RlcyhuLmNoaWxkcmVuKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBjaGlsZE5vZGVzO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHNvcnRlZERhdGEuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgYy5jaGlsZHJlbiA9IHNvcnRDaGlsZE5vZGVzKGMuY2hpbGRyZW4pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWREYXRhKHNvcnRlZERhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uU29ydENvbHVtbkNsaWNrKCRldmVudCwgY29sKSB7XHJcbiAgICAgICAgaWYgKCFjb2wuc29ydGFibGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBzb3J0TmFtZSA9IHRoaXMuc29ydE5hbWU7XHJcbiAgICAgICAgY29uc3Qgc29ydE9yZGVyID0gdGhpcy5zb3J0T3JkZXI7XHJcbiAgICAgICAgbGV0IHNvcnRGaWVsZHMgPSBbXTtcclxuICAgICAgICBsZXQgc29ydE9yZGVycyA9IFtdO1xyXG4gICAgICAgIGlmIChzb3J0TmFtZSkge1xyXG4gICAgICAgICAgICBzb3J0RmllbGRzID0gc29ydE5hbWUuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgc29ydE9yZGVycyA9IHNvcnRPcmRlci5zcGxpdCgnLCcpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY29sT3JkZXIgPSBjb2wub3JkZXIgfHwgJ2FzYyc7XHJcbiAgICAgICAgbGV0IG5ld09yZGVyID0gY29sT3JkZXI7XHJcbiAgICAgICAgY29uc3QgaSA9IHNvcnRGaWVsZHMuZmluZEluZGV4KG4gPT4gbiA9PT0gY29sLmZpZWxkKTtcclxuICAgICAgICBpZiAoaSA+PSAwKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9vcmRlciA9IHNvcnRPcmRlcnNbaV0gPT09ICdhc2MnID8gJ2Rlc2MnIDogJ2FzYyc7XHJcbiAgICAgICAgICAgIG5ld09yZGVyID0gX29yZGVyO1xyXG4gICAgICAgICAgICAvLyBpZiAodGhpcy5tdWx0aVNvcnQgJiYgbmV3T3JkZXIgPT09ICdhc2MnKSB7XHJcbiAgICAgICAgICAgIGlmIChuZXdPcmRlciA9PT0gJ2FzYycpIHtcclxuICAgICAgICAgICAgICAgIG5ld09yZGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgc29ydEZpZWxkcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcnNbaV0gPSBfb3JkZXI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMubXVsdGlTb3J0KSB7XHJcbiAgICAgICAgICAgICAgICBzb3J0RmllbGRzLnB1c2goY29sLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgIHNvcnRPcmRlcnMucHVzaChjb2xPcmRlcik7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzb3J0RmllbGRzID0gW2NvbC5maWVsZF07XHJcbiAgICAgICAgICAgICAgICBzb3J0T3JkZXJzID0gW2NvbE9yZGVyXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29sLm9yZGVyID0gbmV3T3JkZXI7XHJcblxyXG4gICAgICAgIHRoaXMuc29ydE5hbWUgPSBzb3J0RmllbGRzLmpvaW4oJywnKTtcclxuICAgICAgICB0aGlzLnNvcnRPcmRlciA9IHNvcnRPcmRlcnMuam9pbignLCcpO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMubXVsdGlTb3J0KSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVGaWVsZE9yZGVyID0gKGNvbHM6IFRyZWVUYWJsZUNvbHVtbltdKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWNvbHMgfHwgIWNvbHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29scy5mb3JFYWNoKGMgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGMub3JkZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgayA9IHNvcnRGaWVsZHMuZmluZEluZGV4KGYgPT4gZiA9PT0gYy5maWVsZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGsgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLm9yZGVyID0gc29ydE9yZGVyc1trXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZUZpZWxkT3JkZXIodGhpcy5jb2x1bW5zKTtcclxuICAgICAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmJlZm9yZVNvcnRDb2x1bW4odGhpcy5zb3J0TmFtZSwgdGhpcy5zb3J0T3JkZXIpLnN1YnNjcmliZSgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJlbW90ZVNvcnQpIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMucmVsb2FkKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsaWVudFNvcnQoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5jb2x1bW5Tb3J0ZWQuZW1pdCh7IHNvcnROYW1lOiB0aGlzLnNvcnROYW1lLCBzb3J0T3JkZXI6IHRoaXMuc29ydE9yZGVyIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmn6Xor6Llt6XlhbfmnaHliY3nq6/lrZfnrKbmn6Xor6IgKi9cclxuICAgIGZpbmRLZXlXb3JkcygkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBzZWFyY2hWYWx1ZSA9ICRldmVudC52YWx1ZTtcclxuICAgICAgICBjb25zdCBmaWVsZCA9ICRldmVudC5maWVsZDtcclxuICAgICAgICB0aGlzLmZpbmRGaWVsZCA9IGZpZWxkO1xyXG4gICAgICAgIGlmIChzZWFyY2hWYWx1ZSAmJiBzZWFyY2hWYWx1ZS5sZW5ndGggPj0gMikge1xyXG4gICAgICAgICAgICB0aGlzLmZpbmRWYWx1ZSA9IHNlYXJjaFZhbHVlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCFmaWVsZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cml0ZUNvbnNvbGUoJ1BsZWFzZSBzZXQgYSBmaWVsZCBmb3IgdGhlIEZpbmRGaWVsZCBwcm9wZXJ0eS4nLCAnd2FybicpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnNlYXJjaEhhbmRsZS5zZWFyY2hPbkNsaWVudChmaWVsZCwgc2VhcmNoVmFsdWUsIHRoaXMuc3RhdGUucm93Tm9kZXMpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRSZXN1bHQgPSByZXN1bHQuc29ydCgoYSwgYikgPT4gYS5pbmRleCA9PT0gYi5pbmRleCA/IDAgOiAoYS5pbmRleCA+IGIuaW5kZXggPyAxIDogLTEpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZENvdW50ID0gcmVzdWx0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZEN1cnJlbnQgPSAxO1xyXG4gICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zY3JvbGxUb05vZGUocmVzdWx0WzBdLmlkKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZ2hMaWdodEtleXdvcmRzKCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRSZXN1bHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZEN1cnJlbnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kQ291bnQgPSAwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXNldEZpbmRUZXh0KCk7XHJcbiAgICAgICAgICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgbmV4dEZpbmRWYWx1ZShzdGVwKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmZpbmRSZXN1bHQgfHwgIXRoaXMuZmluZFJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBhbGxIaWdoTGlnaHRzID0gQXJyYXkuZnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnNlYXJjaC1oaWdobGlnaHQnKSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZpbmRDdXJyZW50ID09PSB0aGlzLmZpbmRSZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZEN1cnJlbnQgPSAxO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChzdGVwKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRDdXJyZW50ID0gdGhpcy5maW5kQ3VycmVudCArIHN0ZXA7XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RlcCA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5maW5kQ3VycmVudCA8PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmluZEN1cnJlbnQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZEN1cnJlbnQrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYWN0aXZlID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaGlnaGxpZ2h0LmFjdGl2ZScpO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoYWN0aXZlLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBfaW5kZXggPSB0aGlzLmZpbmRDdXJyZW50IC0gMTtcclxuICAgICAgICBjb25zdCBuZXh0Um93ID0gdGhpcy5maW5kUmVzdWx0W19pbmRleF07XHJcbiAgICAgICAgaWYgKG5leHRSb3cpIHtcclxuICAgICAgICAgICAgdGhpcy5fc2Nyb2xsVG9Ob2RlKG5leHRSb3cuaWQpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMudmlydHVhbGl6ZWQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1snSElHSF9MSUdIVF9USU1FUiddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzWydISUdIX0xJR0hUX1RJTUVSJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzWydISUdIX0xJR0hUX1RJTUVSJ10gPSBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJJZCA9ICdyb3dub2RlLScgKyBuZXh0Um93LmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJyArIHRySWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZ2hMaWdodERvbSA9IHRyLnF1ZXJ5U2VsZWN0b3IoJy5zZWFyY2gtaGlnaGxpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGlnaExpZ2h0RG9tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyhoaWdoTGlnaHREb20sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbGxIaWdoTGlnaHRzW19pbmRleF0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGFsbEhpZ2hMaWdodHNbX2luZGV4XSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5p+l6K+i5bel5YW35p2h5YmN56uv5a2X56ym5p+l6K+iICovXHJcbiAgICAvKlxyXG4gICAgZmluZEtleVdvcmRzKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gJGV2ZW50LnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IGZpZWxkID0gJGV2ZW50LmZpZWxkO1xyXG4gICAgICAgIHRoaXMuZmluZEZpZWxkID0gZmllbGQ7XHJcbiAgICAgICAgaWYgKHNlYXJjaFZhbHVlICYmIHNlYXJjaFZhbHVlLmxlbmd0aCA+PSAyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZmluZFZhbHVlID0gc2VhcmNoVmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlQ29uc29sZSgnUGxlYXNlIHNldCBhIGZpZWxkIGZvciB0aGUgRmluZEZpZWxkIHByb3BlcnR5LicsICd3YXJuJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuc2VhcmNoSGFuZGxlLnNlYXJjaE9uQ2xpZW50KGZpZWxkLCBzZWFyY2hWYWx1ZSwgdGhpcy5zdGF0ZS5yb3dOb2Rlcyk7XHJcblxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZFJlc3VsdCA9IHJlc3VsdC5zb3J0KChhLCBiKSA9PiBhLmluZGV4ID09PSBiLmluZGV4ID8gMCA6IChhLmluZGV4ID4gYi5pbmRleCA/IDEgOiAtMSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZmlyc3RSb3dJbmRleCA9IHJlc3VsdFswXS5pbmRleDtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRDb3VudCA9IHJlc3VsdC5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50cyA9IHRoaXMuc2VhcmNoSGFuZGxlLmZpbmRQYXJlbnRzKHJlc3VsdCwgdGhpcy5zdGF0ZS5yb3dOb2Rlcyk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kQ3VycmVudCA9IDE7XHJcbiAgICAgICAgICAgICAgICBbLi4ucGFyZW50cywgLi4ucmVzdWx0XS5mb3JFYWNoKChyOiBSb3dOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5leHBhbmROb2RlKHIuaWQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IHkgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5yb3dOb2Rlcy5mb3JFYWNoKChyb3c6IFJvd05vZGUsIGluZGV4OiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocm93LnZpc2libGUgJiYgZmlyc3RSb3dJbmRleCA+IGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHkgKz0gdGhpcy5yb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wc1JlZiAmJiB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLnNjcm9sbFRvWSh5IC0gMzApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuaGlnaExpZ2h0S2V5d29yZHMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmluZFJlc3VsdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kQ3VycmVudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRDb3VudCA9IDA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0RmluZFRleHQoKTtcclxuICAgICAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5leHRGaW5kVmFsdWUoc3RlcCkge1xyXG4gICAgICAgIGlmICghdGhpcy5maW5kUmVzdWx0IHx8ICF0aGlzLmZpbmRSZXN1bHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYWxsSGlnaExpZ2h0cyA9IEFycmF5LmZyb20odGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWFyY2gtaGlnaGxpZ2h0JykpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5maW5kQ3VycmVudCA9PT0gdGhpcy5maW5kUmVzdWx0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmZpbmRDdXJyZW50ID0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoc3RlcCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maW5kQ3VycmVudCA9IHRoaXMuZmluZEN1cnJlbnQgKyBzdGVwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0ZXAgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZmluZEN1cnJlbnQgPD0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbmRDdXJyZW50ID0gMTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbmRDdXJyZW50Kys7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFjdGl2ZSA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuc2VhcmNoLWhpZ2hsaWdodC5hY3RpdmUnKTtcclxuXHJcbiAgICAgICAgbGV0IF9pbmRleCA9IGFsbEhpZ2hMaWdodHMuaW5kZXhPZihhY3RpdmUpO1xyXG5cclxuICAgICAgICBpZiAoYWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucmVtb3ZlQ2xhc3MoYWN0aXZlLCAnYWN0aXZlJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy52aXJ0dWFsaXplZCkge1xyXG5cclxuICAgICAgICAgICAgX2luZGV4ICs9ICFzdGVwID8gMSA6IHN0ZXA7XHJcblxyXG4gICAgICAgICAgICBpZiAoYWxsSGlnaExpZ2h0c1tfaW5kZXhdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGFsbEhpZ2hMaWdodHNbX2luZGV4XSwgJ2FjdGl2ZScpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIOWFiOa7muWKqOaMh+WumuS9jee9rlxyXG4gICAgICAgICAgICAgICAgY29uc3QgbmV4dFJvdyA9IHRoaXMuZmluZFJlc3VsdFt0aGlzLmZpbmRDdXJyZW50IC0gMV07XHJcbiAgICAgICAgICAgICAgICBsZXQgeSA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnJvd05vZGVzLmZvckVhY2goKHJvdzogUm93Tm9kZSwgaW5kZXg6IG51bWJlcikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyb3cudmlzaWJsZSAmJiBuZXh0Um93LmluZGV4ID4gaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeSArPSB0aGlzLnJvd0hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wc1JlZiAmJiB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHNSZWYuZGlyZWN0aXZlUmVmLnNjcm9sbFRvWSh5IC0gMzAsIDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleVdvcmRzID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zZWFyY2gtaGlnaGxpZ2h0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3Moa2V5V29yZHNbMF0sICdhY3RpdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50RWw6IGFueSA9IGFsbEhpZ2hMaWdodHNbdGhpcy5maW5kQ3VycmVudCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAoY3VycmVudEVsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKGN1cnJlbnRFbCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucHNSZWYgJiYgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzVG9wID0gY3VycmVudEVsLmNsb3Nlc3QoJ3RkJykub2Zmc2V0VG9wIC0gMzA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wc1JlZi5kaXJlY3RpdmVSZWYuc2Nyb2xsVG9ZKHNUb3AsIDIwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuKi9cclxuICAgIGNsb3NlRmluZFBhbmVsKCkge1xyXG4gICAgICAgIHRoaXMuc2hvd0ZpbmRJbnB1dCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucmVzZXRGaW5kVGV4dCgpO1xyXG4gICAgICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaGlnaExpZ2h0S2V5d29yZHMoKSB7XHJcbiAgICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxsSGlnaExpZ2h0cyA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuc2VhcmNoLWhpZ2hsaWdodCcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhbGxIaWdoTGlnaHRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuYWRkQ2xhc3MoYWxsSGlnaExpZ2h0c1swXSwgJ2FjdGl2ZScpO1xyXG4gICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcmVzZXRGaW5kVGV4dCgpIHtcclxuICAgICAgICB0aGlzLmZpbmRWYWx1ZSA9ICcnO1xyXG4gICAgICAgIHRoaXMuZmluZEN1cnJlbnQgPSAwO1xyXG4gICAgICAgIHRoaXMuZmluZENvdW50ID0gMDtcclxuICAgICAgICB0aGlzLmZpbmRSZXN1bHQgPSBbXTtcclxuICAgIH1cclxuXHJcbiAgXHJcblxyXG4gICAgc2Nyb2xsVG9ZKHk6IG51bWJlciwgYW5pbWF0aW9ucyA9IDIwMCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2Nyb2xsWSA9IHkgfHwgMDtcclxuICAgICAgICB0aGlzLnBzUmVmLmRpcmVjdGl2ZVJlZi5zY3JvbGxUb1koeSwgYW5pbWF0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzaG93T3JIaWRlQ29sdW1uKGZpZWxkOiBzdHJpbmcgfCBzdHJpbmdbXSwgaXNIaWRlOiBib29sZWFuKSB7XHJcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZmllbGQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkLmluZGV4T2Yobi5maWVsZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4udmlzaWJsZSA9ICFpc0hpZGU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29sdW1ucy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGZpZWxkID09PSBuLmZpZWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi52aXNpYmxlID0gIWlzSGlkZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbHVtbnNDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0NvbHVtbihmaWVsZDogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgICAgICB0aGlzLnNob3dPckhpZGVDb2x1bW4oZmllbGQsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBoaWRlQ29sdW1uKGZpZWxkOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xyXG4gICAgICAgIHRoaXMuc2hvd09ySGlkZUNvbHVtbihmaWVsZCwgdHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2hvd0NoaWxkc0xvYWRpbmcocGFyZW50Tm9kZTogVHJlZU5vZGUpIHtcclxuICAgICAgICBjb25zdCBjb2xzcGFuID0gdGhpcy5jb2x1bW5zLmZpbHRlcihuID0+IG4udmlzaWJsZSAhPT0gZmFsc2UpLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBkYXRhID0geyBbdGhpcy5pZEZpZWxkXTogJ+ato+WcqOWKoOi9veS4rS4uLi4nLCBfX2NvbHNwYW5fXzogY29sc3BhbiB9O1xyXG4gICAgICAgIHRoaXMubG9hZENoaWxkcmVuKFt7IGRhdGEsIF9fY2hpbGRzX2xvYWRpbmdfXzogdHJ1ZSB9XSwgcGFyZW50Tm9kZSwgZmFsc2UpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2hpbGRzUGFnZUNoYW5nZWQoJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5jaGlsZHNQYWdlQ2hhbmdlZC5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB0cklkMkRhdGFJZCh0cikge1xyXG4gICAgICAgIHJldHVybiB0ci5pZC5yZXBsYWNlKCdyb3dub2RlLScsICcnKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g5b+r5o236ZSuXHJcbiAgICBvbktleWRvd25FdmVudCgkZXZlbnQpIHtcclxuICAgICAgICBpZiAoISRldmVudCB8fCAhdGhpcy5zaW5nbGVTZWxlY3QgfHwgIXRoaXMuZGF0YSB8fCAhdGhpcy5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBrZXlzID0gWydBcnJvd1VwJywgJ0Fycm93RG93bicsICdBcnJvd0xlZnQnLCAnQXJyb3dSaWdodCddO1xyXG5cclxuICAgICAgICBpZiAoIWtleXMuaW5jbHVkZXMoJGV2ZW50LmtleSkgfHwgJGV2ZW50LnRhcmdldC5ub2RlTmFtZSA9PT0gJ0lOUFVUJykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5pbnB1dEdyb3VwLnRleHRib3gubmF0aXZlRWxlbWVudC5ibHVyKCk7XHJcbiAgICAgICAgbGV0IG5ld0lkeDtcclxuICAgICAgICBjb25zdCB0cnMgPSBBcnJheS5mcm9tKHRoaXMuYm9keVRhYmxlLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgndHInKSk7XHJcbiAgICAgICAgY29uc3QgdHJDb3VudCA9IHRycy5sZW5ndGg7XHJcbiAgICAgICAgbGV0IHNlbGVjdGVkVHJJbmRleCA9IC0xO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZFJvdykge1xyXG4gICAgICAgICAgICBzZWxlY3RlZFRySW5kZXggPSB0cnMuZmluZEluZGV4KChuOiBhbnkpID0+IHRoaXMudHJJZDJEYXRhSWQobikgPT09IHRoaXMuc2VsZWN0ZWRSb3cuaWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCRldmVudC5jb2RlID09PSAnQXJyb3dEb3duJykge1xyXG4gICAgICAgICAgICBuZXdJZHggPSBzZWxlY3RlZFRySW5kZXggKyAxO1xyXG4gICAgICAgIH0gZWxzZSBpZiAoJGV2ZW50LmNvZGUgPT09ICdBcnJvd1VwJykge1xyXG4gICAgICAgICAgICBpZiAoc2VsZWN0ZWRUckluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgbmV3SWR4ID0gc2VsZWN0ZWRUckluZGV4IC0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGVkUm93ICYmICgkZXZlbnQuY29kZSA9PT0gJ0Fycm93UmlnaHQnIHx8ICRldmVudC5jb2RlID09PSAnQXJyb3dMZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlRXhwYW5kKHRoaXMuc2VsZWN0ZWRSb3cpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobmV3SWR4ID49IDAgJiYgbmV3SWR4IDwgdHJDb3VudCkge1xyXG4gICAgICAgICAgICBjb25zdCBfdHIgPSB0cnNbbmV3SWR4XSBhcyBhbnk7XHJcbiAgICAgICAgICAgIGlmIChfdHIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gdGhpcy50cklkMkRhdGFJZChfdHIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3ROb2RlKGlkKTtcclxuICAgICAgICAgICAgICAgIF90ci5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiAnbmVhcmVzdCcgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25CZWZvcmVTaG93Q29udGV4dE1lbnUgPSAoZTogYW55KSA9PiB7XHJcbiAgICAgICAgLy8gcm93XzFfZml4ZWRsZWZ0ICByb3dfMSAgcm93XzFfZml4ZWRyaWdodFxyXG4gICAgICAgIGNvbnN0IHsgY29udGV4dE1lbnVEb20sIGV2ZW50IH0gPSBlO1xyXG5cclxuICAgICAgICBsZXQgcm93SUQgPSBldmVudC50YXJnZXQuaWQ7XHJcblxyXG4gICAgICAgIGlmIChjb250ZXh0TWVudURvbSkge1xyXG4gICAgICAgICAgICByb3dJRCA9IHRoaXMudHJJZDJEYXRhSWQoY29udGV4dE1lbnVEb20pO1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShyb3dJRCk7XHJcblxyXG4gICAgICAgICAgICBsZXQgZ28kID0gb2Yoe3Nob3c6IHRydWV9KTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuYmVmb3JlU2hvd0NvbnRleHRNZW51KSB7XHJcbiAgICAgICAgICAgICAgICBnbyQgPSB0aGlzLmJlZm9yZVNob3dDb250ZXh0TWVudSh7IGRhdGE6IHJvd05vZGUsIHRyZWU6IHRoaXMgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBnbyQucGlwZShcclxuICAgICAgICAgICAgICAgIHN3aXRjaE1hcCgocjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIuc2hvdykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIubWVudXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGV4dE1lbnVJdGVtcyA9IHIubWVudXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgdmlld3BvcnRXID0gY29udGV4dE1lbnVEb20uY2xvc2VzdCgnLmZhcnJpcy10cmVldGFibGUnKS5vZmZzZXRXaWR0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0VyA9IGNvbnRleHRNZW51RG9tLm9mZnNldFdpZHRoO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9jdXNUYXJnZXRXaWR0aCA9IHZpZXdwb3J0VyA+IHRhcmdldFcgPyB0YXJnZXRXIDogdmlld3BvcnRXO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoeyBzaG93OiB0cnVlLCBkYXRhOiB7IGRhdGE6IHJvd05vZGUsIHRyZWU6IHRoaXMgfSwgZm9jdXNUYXJnZXRXaWR0aCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoeyBzaG93OiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2YoeyBzaG93OiBmYWxzZSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5qC55o2u5Lyg5YWl55qE54i257qnSUTvvIzojrflj5bmiYDmnInlrZDnuqfoioLngrkgKi9cclxuICAgIGdldENoaWxkTm9kZXMocGFyZW50SWQ6IHN0cmluZyk6IFRyZWVOb2RlW10ge1xyXG4gICAgICAgIGxldCBub2RlcyA9IFtdO1xyXG4gICAgICAgIGlmIChwYXJlbnRJZCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dOb2RlID0gdGhpcy5maW5kUm93Tm9kZShwYXJlbnRJZCk7XHJcbiAgICAgICAgICAgIGlmIChyb3dOb2RlICYmIHJvd05vZGUubm9kZS5jaGlsZHJlbiAmJiByb3dOb2RlLm5vZGUuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByb3dOb2RlLm5vZGUuY2hpbGRyZW4uZm9yRWFjaCgodG46IFRyZWVOb2RlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRuLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaCh0bik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG5vZGVzID0gbm9kZXMuY29uY2F0KHRoaXMuZ2V0Q2hpbGROb2Rlcyh0bi5pZCkpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiBub2RlcztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdXHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOagueaNruS8oOWFpeeahOiKgueCuUlE77yMIOiOt+WPluaJgOacieeItue6p+iKgueCuSAqL1xyXG4gICAgZ2V0UGFyZW50Tm9kZXMoaWQ6IHN0cmluZyk6IFJvd05vZGVbXSB7XHJcbiAgICAgICAgbGV0IG5vZGVzID0gW107XHJcbiAgICAgICAgaWYgKGlkKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd05vZGUgPSB0aGlzLmZpbmRSb3dOb2RlKGlkKTtcclxuICAgICAgICAgICAgaWYgKHJvd05vZGUgJiYgcm93Tm9kZS5wYXJlbnRzICYmIHJvd05vZGUucGFyZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJvd05vZGUucGFyZW50cy5mb3JFYWNoKChuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm4gPSB0aGlzLmZpbmRSb3dOb2RlKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChybiAmJiBybi5ub2RlLnNlbGVjdGFibGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChybik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG5vZGVzO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW11cclxuICAgIH1cclxuXHJcbiAgICBvbkZpbHRlclJvd0lucHV0KCRldmVudCwgY29sKSB7XHJcbiAgICAgICAgdGhpcy5maWx0ZXJSb3dDb25kaXRpb25zID0gdGhpcy5maWx0ZXJSb3dDb25kaXRpb25zIHx8IHt9O1xyXG4gICAgICAgIHRoaXMuZmlsdGVyUm93Q29uZGl0aW9uc1tjb2wuZmllbGRdID0gJGV2ZW50LnRhcmdldC52YWx1ZTtcclxuXHJcbiAgICAgICAgT2JqZWN0LmtleXModGhpcy5maWx0ZXJSb3dDb25kaXRpb25zKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWx0ZXJSb3dDb25kaXRpb25zW25dID09PSAnJyB8fCB0aGlzLmZpbHRlclJvd0NvbmRpdGlvbnNbbl0gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuZmlsdGVyUm93Q29uZGl0aW9uc1tuXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpc1snRklMVEVSQ09ORElUSU9OU19DSEFOR0VEX1RJTUVSJ10pIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXNbJ0ZJTFRFUkNPTkRJVElPTlNfQ0hBTkdFRF9USU1FUiddKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXNbJ0ZJTFRFUkNPTkRJVElPTlNfQ0hBTkdFRF9USU1FUiddID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoSGFuZGxlLnNlYXJjaFdpdGhDb25kaXRpb25zKHRoaXMuZmlsdGVyUm93Q29uZGl0aW9ucyk7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0TmV3Q29sdW1uc1dpZHRoKCk7XHJcbiAgICAgICAgfSwgMjAwKTtcclxuICAgIH1cclxufVxyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdbdHJlZVRhYmxlQm9keV0nLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8bmctdGVtcGxhdGUgbmdGb3IgbGV0LXNlcmlhbGl6ZWROb2RlIGxldC1yb3dJbmRleD1cImluZGV4XCIgW25nRm9yT2ZdPVwidHQuc2VyaWFsaXplZFZhbHVlXCI+XHJcbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJzZXJpYWxpemVkTm9kZS52aXNpYmxlXCI+XHJcbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXHJcbiAgICAgICAgICAgICAgICAgICAgKm5nVGVtcGxhdGVPdXRsZXQ9XCJ0ZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGV4dDogeyRpbXBsaWNpdDogc2VyaWFsaXplZE5vZGUsIG5vZGU6IHNlcmlhbGl6ZWROb2RlLm5vZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvd0RhdGE6IHNlcmlhbGl6ZWROb2RlLm5vZGUuZGF0YSwgcm93SW5kZXg6IHJvd0luZGV4LCBjb2x1bW5zOiBjb2x1bW5zfVwiPlxyXG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDwvbmctdGVtcGxhdGU+XHJcbiAgICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUVEJvZHlDb21wb25lbnQge1xyXG4gICAgLyoqXHJcbiAgICAgKiDliJfpm4blkIhcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgY29sdW1uczogYW55W107XHJcblxyXG4gICAgLyoqIOihqOS9k+aooeadvyAqL1xyXG4gICAgQElucHV0KCkgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT47XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0dDogVHJlZVRhYmxlQ29tcG9uZW50KSB7IH1cclxufVxyXG5cclxuLy8gW3N0eWxlLm1hcmdpbkxlZnRdPVwicm93Tm9kZS5sZXZlbCAqIDE2ICsgJ3B4J1wiXHJcblxyXG4vKipcclxuICog5qCR6IqC54K55bGV5byA5oqY5Y+gXHJcbiAqL1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmFycmlzLXRyZWVUYWJsZVRvZ2dsZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxhICN0b2dnbGVyIHN0eWxlPVwiY3Vyc29yOiBwb2ludGVyXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJ0cmVlbm9kZS1mb2xkXCIgKm5nSWY9XCJzaG93TGluZXNcIlxyXG4gICAgICAgICAgICBbbmdDbGFzc109XCJyb3dOb2RlLm5vZGUuZXhwYW5kZWQgPyB0dC51bmZvbGRJY29uIDogdHQuZm9sZEljb25cIlxyXG4gICAgICAgICAgICBbc3R5bGUuZGlzcGxheV09XCJpc1Nob3dUcmlhbmdsZSA/ICcnIDogJ25vbmUnXCJcclxuICAgICAgICAgICAgKGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiPjwvYT5cclxuXHJcbiAgICA8YSAjdG9nZ2xlciBzdHlsZT1cImN1cnNvcjogcG9pbnRlclwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwidHJlZW5vZGUtZm9sZFwiICAqbmdJZj1cIiFzaG93TGluZXNcIlxyXG4gICAgICAgICAgICBbbmdDbGFzc109XCJyb3dOb2RlLm5vZGUuZXhwYW5kZWQgPyB0dC51bmZvbGRJY29uIDogdHQuZm9sZEljb25cIlxyXG4gICAgICAgICAgICBbc3R5bGUubWFyZ2luTGVmdC5weF09XCJyb3dOb2RlLmxldmVsICogaW5kZW50U3BhY2luZ1wiXHJcbiAgICAgICAgICAgIFtzdHlsZS52aXNpYmlsaXR5XT1cImlzU2hvd1RyaWFuZ2xlID8gJ3Zpc2libGUnIDogJ2hpZGRlbidcIlxyXG4gICAgICAgICAgICAoY2xpY2spPVwib25DbGljaygkZXZlbnQpXCI+PC9hPlxyXG4gICAgPHNwYW4gY2xhc3M9XCJ0cmVlLWljb24tbGluZVwiIFtzdHlsZS5kaXNwbGF5XT1cImlzU2hvd1RyaWFuZ2xlICYmIHNob3dMaW5lcz8gJycgOiAnbm9uZSdcIj48L3NwYW4+XHJcbiAgICA8c3BhbiBbc3R5bGUuZGlzcGxheV09XCIodHQuc2hvd0ljb24gJiYgcm93Tm9kZS5ub2RlLnNob3dJY29uKSA/ICdpbmxpbmUtYmxvY2snOiAnbm9uZSdcIiBjbGFzcz1cInRyZWVub2RlLWljb25cIiBbbmdDbGFzc109XCJ0cmVlTm9kZUljb25cIj48L3NwYW4+XHJcblxyXG4gICAgPHR0LWNoZWNrYm94ICBbcm93Tm9kZV09XCJyb3dOb2RlXCIgKm5nSWY9XCJ0dC5zaG93Q2hlY2tib3hcIiBbZGlzYWJsZWRdPVwiZGlzYWJsZWRcIiBbY2hlY2tlZF09XCJyb3dOb2RlLmlzQ2hlY2tlZFwiID48L3R0LWNoZWNrYm94PlxyXG4gICAgYCxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBleHBvcnRBczogJ3R0VG9nZ2xlcidcclxufSlcclxuZXhwb3J0IGNsYXNzIFRyZWVUYWJsZVRvZ2dsZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSwgRG9DaGVjaywgT25DaGFuZ2VzLCBBZnRlclZpZXdDaGVja2VkIHtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1jbXAtdHJlZXRhYmxlLXRvZ2dsZXInKSBjbHMgPSB0cnVlO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmoJHoioLngrlcclxuICAgICAqL1xyXG4gICAgQElucHV0KCkgcm93Tm9kZTogUm93Tm9kZTtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dMaW5lcyA9IGZhbHNlO1xyXG5cclxuICAgIEBJbnB1dCgpIGluZGVudFNwYWNpbmcgPSAxNjtcclxuXHJcbiAgICB0cmVlTm9kZUljb24gPSB7fTtcclxuICAgIGlzU2hvd1RyaWFuZ2xlID0gZmFsc2U7XHJcbiAgICBub0NoaWxkcyA9IGZhbHNlO1xyXG5cclxuICAgIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XHJcblxyXG4gICAgZ2V0IG9mZnNldFdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQub2Zmc2V0V2lkdGg7XHJcbiAgICB9XHJcblxyXG4gICAgQFZpZXdDaGlsZCgndG9nZ2xlcicpIHRvZ2dsZXJFbDogRWxlbWVudFJlZjtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0dDogVHJlZVRhYmxlQ29tcG9uZW50LCBwcml2YXRlIG5nem9uZTogTmdab25lLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnRyZWVOb2RlSWNvbiA9IHRoaXMudHQuZ2V0VHJlZUljb24odGhpcy5yb3dOb2RlLm5vZGUpO1xyXG5cclxuICAgICAgICB0aGlzLmlzU2hvd1RyaWFuZ2xlID0gdGhpcy5zaG93VHJpYW5nbGUoKTtcclxuICAgICAgICB0aGlzLm5vQ2hpbGRzID0gdGhpcy5oYXNDaGlsZHJlbigpO1xyXG4gICAgICAgIGNvbnN0IGV4cGFuZFN1YiA9IHRoaXMudHQuZXhwYW5kLnN1YnNjcmliZSgobm9kZTogVHJlZU5vZGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucm93Tm9kZS5pZCA9PT0gbm9kZS5kYXRhW3RoaXMudHQuaWRGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSWNvbih0aGlzLnJvd05vZGUubm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50dC5wc1JlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHQucHNSZWYuZGlyZWN0aXZlUmVmLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy50dC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgY29sbGFwc2VTdWIgPSB0aGlzLnR0LmNvbGxhcHNlLnN1YnNjcmliZSgobm9kZTogVHJlZU5vZGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHRoaXMucm93Tm9kZS5pZCA9PT0gbm9kZS5kYXRhW3RoaXMudHQuaWRGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSWNvbih0aGlzLnJvd05vZGUubm9kZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50dC5wc1JlZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHQucHNSZWYuZGlyZWN0aXZlUmVmLnVwZGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy50dC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgYWRkTmV3U3ViID0gdGhpcy50dC5hcHBlbmROZXcuc3Vic2NyaWJlKChlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYgKGUucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3dOb2RlLmlkID09PSBlLnBhcmVudC5kYXRhW3RoaXMudHQuaWRGaWVsZF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5yb3dOb2RlLm5vZGUubGVhZiB8fCB0aGlzLnJvd05vZGUubm9kZS5sZWFmID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb3dOb2RlLm5vZGUubGVhZiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUljb24odGhpcy5yb3dOb2RlLm5vZGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucyA9IFtleHBhbmRTdWIsIGNvbGxhcHNlU3ViLCBhZGROZXdTdWJdO1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuc2hvd0xpbmVzICYmICFjaGFuZ2VzLnNob3dMaW5lcy5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2hvd0xpbmVzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScsIHRoaXMuaXNTaG93VHJpYW5nbGUgPyAnJyA6ICdub25lJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVTdHlsZSh0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVTZXRMaW5lcygpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMucm93Tm9kZSAmJiAhY2hhbmdlcy5yb3dOb2RlLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUljb24odGhpcy5yb3dOb2RlLm5vZGUpO1xyXG5cclxuICAgICAgICAgICAgLy8gaWYgKGNoYW5nZXMucm93Tm9kZS5jdXJyZW50VmFsdWUubm9kZS5jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAvLyAgICAgaWYgKCEhY2hhbmdlcy5yb3dOb2RlLmN1cnJlbnRWYWx1ZS5ub2RlLmNoaWxkcmVuLmxlbmd0aCAhPT0gISFjaGFuZ2VzLnJvd05vZGUucHJldmlvdXNWYWx1ZS5ub2RlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyAgICAgICAgIHRoaXMucmVTZXRMaW5lcygpO1xyXG4gICAgICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnR0LnNob3dMaW5lcykge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbkNoaWxkcmVuTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBwcmV2aW91c0NoaWxkcmVuTGVuZ3RoID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VzLnJvd05vZGUuY3VycmVudFZhbHVlICYmIGNoYW5nZXMucm93Tm9kZS5jdXJyZW50VmFsdWUubm9kZS5jaGlsZHJlbiApIHtcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW5DaGlsZHJlbkxlbmd0aCA9IGNoYW5nZXMucm93Tm9kZS5jdXJyZW50VmFsdWUubm9kZS5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNoYW5nZXMucm93Tm9kZS5wcmV2aW91c1ZhbHVlICYmIGNoYW5nZXMucm93Tm9kZS5wcmV2aW91c1ZhbHVlLm5vZGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBwcmV2aW91c0NoaWxkcmVuTGVuZ3RoID0gY2hhbmdlcy5yb3dOb2RlLnByZXZpb3VzVmFsdWUubm9kZS5jaGlsZHJlbi5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN1cnJlbkNoaWxkcmVuTGVuZ3RoICE9IHByZXZpb3VzQ2hpbGRyZW5MZW5ndGggfHwgKCFjdXJyZW5DaGlsZHJlbkxlbmd0aCAmJiAhcHJldmlvdXNDaGlsZHJlbkxlbmd0aCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlU2V0TGluZXMoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnR0LmJvZHlUZW1wbGF0ZSAmJiB0aGlzLnNob3dMaW5lcykge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVTZXRMaW5lcygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdEb0NoZWNrKCkge1xyXG4gICAgICAgIC8vIHRoaXMuaXNTaG93VHJpYW5nbGUgPSB0aGlzLnNob3dUcmlhbmdsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3Q2hlY2tlZCgpIHtcclxuICAgICAgICAvLyBpZiAodGhpcy50dCAmJiB0aGlzLnR0LmRhdGEpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy5yZVNldExpbmVzKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMudW5BbGxTdWJzY3JpcHRpb25zKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgdW5BbGxTdWJzY3JpcHRpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4ge1xyXG4gICAgICAgICAgICBzLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgaGFzQ2hpbGRyZW4oKSB7XHJcbiAgICAgICAgY29uc3QgdG4gPSB0aGlzLnJvd05vZGUubm9kZTtcclxuICAgICAgICByZXR1cm4gdG4ubGVhZiA9PT0gZmFsc2UgfHwgdGhpcy5yb3dOb2RlLmxldmVsICE9PSAwIHx8ICh0bi5jaGlsZHJlbiAmJiB0bi5jaGlsZHJlbi5sZW5ndGggPiAwKTtcclxuICAgIH1cclxuXHJcbiAgICBzaG93VHJpYW5nbGUoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgY29uc3QgdG4gPSB0aGlzLnJvd05vZGUubm9kZTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHQubG9hZERhdGFUeXBlID09PSAnYWxsJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdG4ubGVhZiA9PT0gZmFsc2UgfHwgKHRuLmNoaWxkcmVuICYmIHRuLmNoaWxkcmVuLmxlbmd0aCA+IDApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0bi5sZWFmID09PSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVTZXRMaW5lcygpIHtcclxuICAgICAgICBpZiAodGhpcy50b2dnbGVyRWwpIHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50RWwgPSB0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LmNsb3Nlc3QoJy50cmVldGFibGUtY2VsbC1jb250ZW50Jyk7XHJcbiAgICAgICAgICAgIGlmIChwYXJlbnRFbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGluZUVscyA9IHBhcmVudEVsLnF1ZXJ5U2VsZWN0b3JBbGwoJy50cmVldGFibGUtbGluZXMnKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbGluZUVscy5sZW5ndGg7IGsrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxpbmVFbHNba10ucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX3JlbmRlckxpbmVzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBfcmVuZGVyTGluZXMoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnR0LmJvZHlUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaG93TGluZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyTGluZXMoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMubm9MaW5lU3R5bGUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8qXHJcbiAgICAgICAgICAgIGlmICh0aGlzLnRvZ2dsZXJFbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudG9nZ2xlckVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgndHInKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRkcyA9IHRoaXMudG9nZ2xlckVsLm5hdGl2ZUVsZW1lbnQuY2xvc2VzdCgndHInKS5xdWVyeVNlbGVjdG9yQWxsKCd0ZCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIEFycmF5LmZyb20odGRzKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZShuLCAncGFkZGluZycsICcwLjI1cmVtIDAuNzVyZW0nKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSAqL1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBub0xpbmVTdHlsZSgpIHtcclxuICAgICAgICAvLyB0aGlzLmNscyA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLnRvZ2dsZXJFbCkge1xyXG4gICAgICAgICAgICAvLyB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LCAnbWFyZ2luLWxlZnQnLCBgJHt0aGlzLnJvd05vZGUubGV2ZWwgKiB0aGlzLmluZGVudFNwYWNpbmd9cHhgKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy50b2dnbGVyRWwubmF0aXZlRWxlbWVudCwgJ3Zpc2liaWxpdHknLCB0aGlzLmlzU2hvd1RyaWFuZ2xlID8gJ3Zpc2libGUnIDogJ2hpZGRlbicpO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVTdHlsZSh0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LCAnZGlzcGxheScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlbmRlckxpbmVzKCkge1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IHRoaXMucm93Tm9kZS5sZXZlbDtcclxuICAgICAgICBpZiAoICF0aGlzLnRvZ2dsZXJFbCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmVudEVsID0gdGhpcy50b2dnbGVyRWwubmF0aXZlRWxlbWVudC5jbG9zZXN0KCcudHJlZXRhYmxlLWNlbGwtY29udGVudCcpO1xyXG5cclxuICAgICAgICBpZiAoIXBhcmVudEVsKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJlZmVyRWwgPSB0aGlzLnRvZ2dsZXJFbC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQ7XHJcblxyXG4gICAgICAgIGlmIChsZW4gPT09IDAgJiYgIXRoaXMuc2hvd1RyaWFuZ2xlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5jcmVhdGVMZWFmTm9kZUxpbmVzKHJlZmVyRWwsIHBhcmVudEVsLCB0cnVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcclxuICAgICAgICAgICAgcGFyZW50RWwuaW5zZXJ0QmVmb3JlKHRoaXMubmV3TGluZUVsZW1lbnQoKSwgcmVmZXJFbCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBuZWFyTGluZSA9IHRoaXMubmV3TGluZUVsZW1lbnQoZmFsc2UpO1xyXG4gICAgICAgICAgICBwYXJlbnRFbC5pbnNlcnRCZWZvcmUobmVhckxpbmUsIHJlZmVyRWwpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgaXNMZWFmID0gIXRoaXMuc2hvd1RyaWFuZ2xlKCk7XHJcbiAgICAgICAgICAgIGlmIChpc0xlYWYgJiYgaSA9PT0gbGVuIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jcmVhdGVMZWFmTm9kZUxpbmVzKHJlZmVyRWwsIHBhcmVudEVsKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG5ld0xpbmVFbGVtZW50KGJvcmRlciA9IHRydWUpIHtcclxuICAgICAgICBjb25zdCBuZXdMaW5lRWwgPSB0aGlzLnJlbmRlci5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhuZXdMaW5lRWwsICd0cmVldGFibGUtbGluZXMnKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hvd0xpbmVzKSB7XHJcbiAgICAgICAgICAgIGlmIChib3JkZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKG5ld0xpbmVFbCwgJ3RyZWV0YWJsZS1saW5lcy1ib3JkZXItY29sb3InKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3TGluZUVsO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5p6E6YCgIOKInyBvciDilJxcclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBjcmVhdGVMZWFmTm9kZUxpbmVzKGNvbnRhaW5lckVsOiBIVE1MRWxlbWVudCwgcGFyZW50RWw6IEVsZW1lbnQsIGlzVG9wTm9kZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgLy8g4pScXHJcbiAgICAgICAgLy8gPGRpdiBjbGFzcz1cInRyZWV0YWJsZS1saW5lc1wiIHN0eWxlPVwiYm9yZGVyLWNvbG9yOiByZ2IoMjA0LCAyMDQsIDIwNCk7XCI+PC9kaXY+XHJcbiAgICAgICAgLy8gPGRpdiBjbGFzcz1cInRyZWV0YWJsZS1saW5lcyB0cmVldGFibGUtbGluZXMtbGVhZlwiIHN0eWxlPVwiYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcIj5cclxuICAgICAgICAvLyAgICAgPGRpdiBjbGFzcz1cIm5vcm1hbFwiPjwvZGl2PlxyXG4gICAgICAgIC8vIDwvZGl2PlxyXG5cclxuICAgICAgICAvLyDiiJ9cclxuICAgICAgICAvLyA8ZGl2IGNsYXNzPVwidHJlZXRhYmxlLWxpbmVzXCIgc3R5bGU9XCJib3JkZXItY29sb3I6IHRyYW5zcGFyZW50XCI+PC9kaXY+XHJcbiAgICAgICAgLy8gPGRpdiBjbGFzcz1cInRyZWV0YWJsZS1saW5lcyB0cmVldGFibGUtbGluZXMtbGVhZlwiIHN0eWxlPVwiYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDtcIj5cclxuICAgICAgICAvLyAgICAgPGRpdiBzdHlsZT1cImNvcm5lclwiPjwvZGl2PlxyXG4gICAgICAgIC8vIDwvZGl2PlxyXG5cclxuICAgICAgICBjb25zdCBsMSA9IHRoaXMubmV3TGluZUVsZW1lbnQoKTtcclxuICAgICAgICBjb25zdCBsMiA9IHRoaXMubmV3TGluZUVsZW1lbnQoZmFsc2UpO1xyXG5cclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyhsMiwgJ3RyZWV0YWJsZS1saW5lcy1sZWFmJyk7XHJcbiAgICAgICAgY29uc3QgZGVzc2VydCA9IHRoaXMucmVuZGVyLmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zaG93TGluZXMpIHtcclxuICAgICAgICAgICAgbGV0IGNscyA9ICdub3JtYWwnO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5yb3dOb2RlLmxhc3QpIHtcclxuICAgICAgICAgICAgICAgIGNscyA9ICdjb3JuZXInO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3MobDEsICd0cmVldGFibGUtbGluZXMtYm9yZGVyLWNvbG9yJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbDIuYXBwZW5kQ2hpbGQoZGVzc2VydCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKGRlc3NlcnQsIGNscyk7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKGRlc3NlcnQsICd0cmVldGFibGUtbGluZXMtYm9yZGVyLWNvbG9yJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwYXJlbnRFbC5pbnNlcnRCZWZvcmUobDEsIGNvbnRhaW5lckVsKTtcclxuICAgICAgICBwYXJlbnRFbC5pbnNlcnRCZWZvcmUobDIsIGNvbnRhaW5lckVsKTtcclxuXHJcbiAgICAgICAgaWYgKGlzVG9wTm9kZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZShsMiwgJ21hcmdpblJpZ2h0JywgJzNweCcpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHJlZ2lzdGVyQ2xpY2tFdmVudCgpIHtcclxuICAgICAgICBpZiAodGhpcy50b2dnbGVyRWwpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIubGlzdGVuKHRoaXMudG9nZ2xlckVsLm5hdGl2ZUVsZW1lbnQsICdjbGljaycsIHRoaXMub25DbGljay5iaW5kKHRoaXMpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGljayhldmVudDogRXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5yb3dOb2RlLm5vZGVbJ3Nob3dMb2FkaW5nJ10pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnR0LmRpc2FibGVkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHQudG9nZ2xlRXhwYW5kKHRoaXMucm93Tm9kZS5ub2RlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlSWNvbih0cmVlTm9kZTogVHJlZU5vZGUpIHtcclxuICAgICAgICB0aGlzLmlzU2hvd1RyaWFuZ2xlID0gdGhpcy5zaG93VHJpYW5nbGUoKTtcclxuICAgICAgICB0aGlzLm5vQ2hpbGRzID0gdGhpcy5oYXNDaGlsZHJlbigpO1xyXG4gICAgICAgIHRoaXMudHJlZU5vZGVJY29uID0gdGhpcy50dC5nZXRUcmVlSWNvbih0cmVlTm9kZSk7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG4vKipcclxuICog6YCJ5Lit6KGM57uE5Lu2XHJcbiAqL1xyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3NlbGVjdFJvd10nLFxyXG4gICAgZXhwb3J0QXM6ICdyb3cnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmVlVGFibGVTZWxlY3RSb3dEaXJlY3RpdmUgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoJ3NlbGVjdFJvdycpIHJvd05vZGU6IFJvd05vZGU7XHJcbiAgICBASW5wdXQoKSByb3dJbmRleDogbnVtYmVyO1xyXG5cclxuICAgIEBJbnB1dCgpIHNlbGVjdFJvd0Rpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAgIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG5cclxuICAgIHB1YmxpYyBwcmV2ZW50ID0gZmFsc2U7XHJcbiAgICBwdWJsaWMgdGltZXI6IGFueTtcclxuICAgIEBJbnB1dCgpIGRlbGF5ID0gMDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdHQ6IFRyZWVUYWJsZUNvbXBvbmVudCwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xyXG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy50dC5zZWxlY3ROb2RlQ2hhbmdlZFN1YmplY3Quc3Vic2NyaWJlKChpZHM6IHN0cmluZykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaWRzICYmIHRoaXMucm93Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaWRBcnIgPSBpZHMuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgIGlmIChpZEFyci5pbmRleE9mKHRoaXMucm93Tm9kZS5pZCkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2xhc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd05vZGUubm9kZVsnZWxlbWVudFJlZiddID0gdGhpcy5lbDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIC8vIHRoaXMucm93Tm9kZS5ub2RlLnNlbGVjdGFibGUgPSAhdGhpcy5zZWxlY3RSb3dEaXNhYmxlZDtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgLy8gaWYgKGNoYW5nZXMuc2VsZWN0Um93RGlzYWJsZWQgJiYgIWNoYW5nZXMuc2VsZWN0Um93RGlzYWJsZWQuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMucm93Tm9kZS5ub2RlLnNlbGVjdGFibGUgPSAhY2hhbmdlcy5zZWxlY3RSb3dEaXNhYmxlZC5jdXJyZW50VmFsdWU7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbiA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nRG9DaGVjaygpIHtcclxuICAgICAgICBpZiAodGhpcy50dC5ib2R5VGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLnR0LmlzU2VsZWN0ZWQodGhpcy5yb3dOb2RlLm5vZGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdmYXJyaXMtdGFibGUtc2VsZWN0ZWRyb3cnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgICBvbmNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKCkpIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5yb3dDbGljayhldmVudCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRlbGF5ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucHJldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucHJldmVudCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJvd0NsaWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcmV2ZW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5kZWxheSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvd0NsaWNrKGV2ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbmFibGVkKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy50dC5kaXNhYmxlZCAmJiB0aGlzLnNlbGVjdFJvd0Rpc2FibGVkICE9PSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgcm93Q2xpY2soZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgIHRoaXMudHQuYmVmb3JlQ2xpY2tOb2RlKHsgaW5zdGFuY2U6IHRoaXMudHQsIHJvd05vZGU6IHRoaXMucm93Tm9kZSwgZXZlbnQsIHR5cGU6ICdyb3cnIH0pLnN1YnNjcmliZSgoZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIWUpIHsgcmV0dXJuOyB9XHJcbiAgICAgICAgICAgIHRoaXMudHQuaGFuZGxlUm93Q2xpY2soe1xyXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxFdmVudDogZXZlbnQsXHJcbiAgICAgICAgICAgICAgICByb3dOb2RlOiB0aGlzLnJvd05vZGUsXHJcbiAgICAgICAgICAgICAgICByb3dJbmRleDogdGhpcy5yb3dJbmRleFxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlQ2xhc3MoKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlQ2xhc3MoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnR0LmJvZHlUZW1wbGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy50dC5pc1NlbGVjdGVkKHRoaXMucm93Tm9kZS5ub2RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudHQuc2luZ2xlU2VsZWN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50dC5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5mYXJyaXMtdHJlZXRhYmxlLXRib2R5PnRyLmZhcnJpcy10YWJsZS1zZWxlY3RlZHJvdycpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnJlbW92ZUNsYXNzKG4sICdmYXJyaXMtdGFibGUtc2VsZWN0ZWRyb3cnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ2ZhcnJpcy10YWJsZS1zZWxlY3RlZHJvdycpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnR0LmtlZXBTZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5yZW1vdmVDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdmYXJyaXMtdGFibGUtc2VsZWN0ZWRyb3cnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuLyoqXHJcbiAqIOihqOWktOWFqOmAiee7hOS7tlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3R0LWhlYWRlci1jaGVja2JveCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCAgY3VzdG9tLWNvbnRyb2wtaW5saW5lIHR0LWNoZWNrYm94XCIgc3R5bGU9XCJ0b3A6IC0ycHg7XCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiICNjaGtBbGwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiICBbY2hlY2tlZF09XCJjaGVja2VkXCI+XHJcbiAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiAoY2xpY2spPVwiaGFuZGxlQ2xpY2soJGV2ZW50KVwiPjwvbGFiZWw+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbiAgICBzdHlsZXM6IFtcclxuICAgICAgICBgXHJcbiAgICAgICAgOmhvc3Qge1xyXG4gICAgICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmVlVGFibGVIZWFkZXJDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSBjaGVja2VkOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgQE91dHB1dCgpIGNoZWNrZWRDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnY2hrQWxsJykgY2hrQWxsOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyB0dDogVHJlZVRhYmxlQ29tcG9uZW50LCBwdWJsaWMgdHRTZXJ2aWNlOiBUcmVldGFibGVTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgICBoYW5kbGVDbGljayhldmVudCkge1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCAmJiAhdGhpcy50dC5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBiZWZvcmVFdmVudCA9ICF0aGlzLmNoZWNrZWQgPyB0aGlzLnR0LmJlZm9yZUNoZWNrQWxsIDogdGhpcy50dC5iZWZvcmVVbkNoZWNrQWxsO1xyXG4gICAgICAgICAgICB0aGlzLnR0WydjaGVja2FsbF9DTElDS0VEJ10gPSB0cnVlO1xyXG4gICAgICAgICAgICBiZWZvcmVFdmVudCh7IGluc3RhbmNlOiB0aGlzLnR0LCBjaGVja2VkOiAhdGhpcy5jaGVja2VkIH0pLnN1YnNjcmliZShlID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIOWFqOmAieWKn+iDvVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGtBbGwubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50dC50b2dnbGVOb2Rlc1dpdGhDaGVja2JveChldmVudCwgdGhpcy5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHRbJ2NoZWNrYWxsX0NMSUNLRUQnXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSwgNTApO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuLyoqXHJcbiAqIOihqOS9k2NoZWNrYm94IOe7hOS7tlxyXG4gKi9cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3R0LWNoZWNrYm94JyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94ICBjdXN0b20tY29udHJvbC1pbmxpbmUgdHQtY2hlY2tib3hcIj5cclxuICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgI2NoayBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgW2Rpc2FibGVkXT1cImRpc2FibGVkXCIgW2NoZWNrZWRdPVwiY2hlY2tlZFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIj48L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgLFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgYFxyXG4gICAgICAgIDpob3N0IHtcclxuICAgICAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgOmhvc3QgLmN1c3RvbS1jaGVja2JveCB7XHJcbiAgICAgICAgICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgICAgICAgIGZsb2F0OiBub25lO1xyXG4gICAgICAgIH1cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUcmVlVGFibGVDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MudHJlZS10b2dnbGVyLWNoZWNrYm94JykgY2xzMSA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBjaGVja2VkOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcblxyXG4gICAgQElucHV0KCkgcm93Tm9kZTogUm93Tm9kZTtcclxuXHJcbiAgICBAT3V0cHV0KCkgY2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdjaGsnKSBjaGs6IEVsZW1lbnRSZWY7XHJcbiAgICBkZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgdHQ6IFRyZWVUYWJsZUNvbXBvbmVudCwgcHVibGljIHR0U2VydmljZTogVHJlZXRhYmxlU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMudHRTZXJ2aWNlID0gdGhpcy50dC50dFNlcnZpY2U7XHJcbiAgICB9XHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kkLm5leHQoKTtcclxuICAgICAgICB0aGlzLmRlc3Ryb3kkLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0aGlzLnJvd05vZGUuaW5kZXRlcm1pbmF0ZSB8fCBmYWxzZTtcclxuXHJcbiAgICAgICAgdGhpcy50dFNlcnZpY2UuY2hhbmdlQ2hlY2tib3hTdGF0dXMkLnBpcGUoXHJcbiAgICAgICAgICAgIHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKVxyXG4gICAgICAgICkucGlwZShcclxuICAgICAgICAgICAgbWFwKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4uaWQgPT09IHRoaXMucm93Tm9kZS5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKS5zdWJzY3JpYmUobiA9PiB7XHJcbiAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBuLmluZGV0ZXJtaW5hdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBuLmlzQ2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuY2hlY2tlZCA9IHRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBoYW5kbGVDbGljayhldmVudCkge1xyXG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIGlmICghdGhpcy5kaXNhYmxlZCkge1xyXG4gICAgICAgICAgICB0aGlzLnR0LmJlZm9yZUNsaWNrTm9kZSh7IGluc3RhbmNlOiB0aGlzLnR0LCByb3dOb2RlOiB0aGlzLnJvd05vZGUsIGV2ZW50LCB0eXBlOiAnY2hlY2tib3gnIH0pLnN1YnNjcmliZSgoZTogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7IHJldHVybjsgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnR0LnNpbmdsZVNlbGVjdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHQuY2xlYXJBbGwoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHQuc2VsZWN0Tm9kZSh0aGlzLnJvd05vZGUuaWQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudHQudW5TZWxlY3ROb2RlKHRoaXMucm93Tm9kZS5pZCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR0LnRvZ2dsZU5vZGVXaXRoQ2hlY2tib3goZXZlbnQsIHRoaXMucm93Tm9kZSwgdGhpcy5jaGVja2VkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tkYmxjbGlja10nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYmxDbGlja1Jvd0RpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoJ2RibGNsaWNrJykgZW5hYmxlRGJsQ2xpY2sgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGRibGNsaWNrTm9kZTogUm93Tm9kZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgdHQ6IFRyZWVUYWJsZUNvbXBvbmVudCwgcHVibGljIGVsOiBFbGVtZW50UmVmLCBwdWJsaWMgdHRTZXJ2aWNlOiBUcmVldGFibGVTZXJ2aWNlLFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHVibGljIHNlbGVjdFJvd0RpcjogVHJlZVRhYmxlU2VsZWN0Um93RGlyZWN0aXZlKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHRTZXJ2aWNlID0gdGhpcy50dC50dFNlcnZpY2U7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZURibENsaWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Um93RGlyLmRlbGF5ID0gMDtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdFJvd0Rpci5kZWxheSA9IDIwMDsgICBcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2RibGNsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIG9uZGJsY2xpY2soZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcHJldkVsID0gKCBldmVudC50YXJnZXQgYXMgYW55KS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgaWYgKHByZXZFbCAmJiBwcmV2RWwudHlwZSA9PT0gJ2NoZWNrYm94Jykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHQuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudHQubXVsdGlTZWxlY3QgJiYgdGhpcy5kYmxjbGlja05vZGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGJsY2xpY2tOb2RlLm5vZGUubGVhZikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICAgY29uc3QgY2xzTmFtZSA9IGV2ZW50LnRhcmdldFsnY2xhc3NOYW1lJ107XHJcblxyXG4gICAgICAgIGxldCB0b2dnbGVyVGFnID0gbnVsbDtcclxuICAgICAgICBpZiAoY2xzTmFtZS5pbmRleE9mKCdmLWNtcC10cmVldGFibGUtdG9nZ2xlcicpID4gLTEpIHtcclxuICAgICAgICAgICAgdG9nZ2xlclRhZyA9IGV2ZW50LnRhcmdldFsncXVlcnlTZWxlY3RvciddKCcudHJlZW5vZGUtZm9sZCcpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC50YXJnZXRbJ2NsYXNzTmFtZSddLmluZGV4T2YoJ3RyZWVub2RlLWZvbGQnKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVyVGFnID0gZXZlbnQudGFyZ2V0IGFzIGFueTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRvZ2dsZXJUYWcgJiYgdG9nZ2xlclRhZy5zdHlsZS52aXNpYmlsaXR5ID09PSAndmlzaWJsZScpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0Um93RGlyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0Um93RGlyLnByZXZlbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuc2VsZWN0Um93RGlyLnRpbWVyKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0Um93RGlyLnJvd05vZGUgJiYgdGhpcy5lbmFibGVEYmxDbGljaykge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgcm4gPSB0aGlzLnNlbGVjdFJvd0Rpci5yb3dOb2RlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJuLm5vZGUuY2hpbGRyZW4gJiYgcm4ubm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIXJuLm5vZGUubGVhZiAmJiB0aGlzLnR0LmRibENsaWNrRXhwYW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50dC50b2dnbGVFeHBhbmQocm4ubm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnR0LmRibENsaWNrLmVtaXQocm4ubm9kZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2N1c3RvbVJvd1N0eWxlXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIEN1c3RvbVJvd1N0eWxlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCdjdXN0b21Sb3dTdHlsZScpIHJvd05vZGU6IFJvd05vZGU7XHJcbiAgICBASW5wdXQoJ2ZpZWxkJykgY29sOiBUcmVlVGFibGVDb2x1bW47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXHJcbiAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSB0dDogVHJlZVRhYmxlQ29tcG9uZW50LFxyXG4gICAgICAgIHB1YmxpYyB1dGlsczogQ29tbW9uVXRpbHMsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIpIHtcclxuICAgIH1cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbCAmJiB0aGlzLnR0LmZpeGVkQ29sdW1ucyAmJiB0aGlzLnR0LmZpeGVkSGVhZGVyICYmIHRoaXMuY29sLmZpeGVkKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmNvbC5maXhlZCA9PT0gJ2xlZnQnIHx8IHRoaXMuY29sLmZpeGVkID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFJvd1N0eWxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0Um93U3R5bGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBzZXRSb3dTdHlsZSgpIHtcclxuICAgICAgICBjb25zdCBmbiA9IHRoaXMudHQucm93U3R5bGVyO1xyXG4gICAgICAgIGlmIChmbikge1xyXG4gICAgICAgICAgICBjb25zdCBzdHkgPSBmbih0aGlzLnJvd05vZGUubm9kZSk7XHJcbiAgICAgICAgICAgIGlmIChzdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygc3R5ID09PSAnb2JqZWN0JyAmJiAoc3R5LnN0eWxlIHx8IHN0eS5jbHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eS5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzdHkuc3R5bGUpLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHMsIHN0eS5zdHlsZVtzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN0eS5jbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5LmNscy5zcGxpdCgnLCcpLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzdHkpIHx8IHR5cGVvZiBzdHkgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGNscyA9IHRoaXMudHQuZ2V0Um93Q2xzKHRoaXMucm93Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbHMgJiYgT2JqZWN0LmtleXMoY2xzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNscykuZm9yRWFjaChjID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xzW2NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhzdHkpLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHMsIHN0eVtzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMucm93Tm9kZSAmJiAhY2hhbmdlcy5yb3dOb2RlLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldFJvd1N0eWxlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2N1c3RvbUNlbGxTdHlsZV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUVEN1c3RvbUNlbGxTdHlsZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgnY3VzdG9tQ2VsbFN0eWxlJykgY29sdW1uOiBUcmVlVGFibGVDb2x1bW47XHJcbiAgICBASW5wdXQoKSByb3dOb2RlOiBSb3dOb2RlO1xyXG4gICAgQElucHV0KCkgcm93SW5kZXg6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcclxuICAgICAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHR0OiBUcmVlVGFibGVDb21wb25lbnQsXHJcbiAgICAgICAgcHVibGljIHV0aWxzOiBDb21tb25VdGlscywgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMikge1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnR0ICYmIHRoaXMudHQuZ2V0Q2VsbENscykge1xyXG4gICAgICAgICAgICB0aGlzLnNldENlbGxTdHlsZSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnR0LnNob3dCb3JkZXIgJiYgdGhpcy50dC5jb2x1bW5zLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdib3JkZXItd2lkdGgnLCAnMHB4Jyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0Q2VsbFN0eWxlKCkge1xyXG4gICAgICAgIGNvbnN0IGNlbGxDbHMgPSB0aGlzLnR0LmdldENlbGxDbHModGhpcy5yb3dOb2RlLCB0aGlzLmNvbHVtbi5maWVsZCk7XHJcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uICYmIHRoaXMuY29sdW1uLnN0eWxlcikge1xyXG4gICAgICAgICAgICBpZiAoY2VsbENscyAmJiBPYmplY3Qua2V5cyhjZWxsQ2xzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGNlbGxDbHMpLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNlbGxDbHNbY10pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBjKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3Qgcm93RGF0YSA9IHRoaXMucm93Tm9kZS5ub2RlLmRhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IGNjcyA9IHRoaXMuY29sdW1uLnN0eWxlcih0aGlzLnV0aWxzLmdldFZhbHVlKHRoaXMuY29sdW1uLmZpZWxkLCByb3dEYXRhKSwgcm93RGF0YSwgdGhpcy5yb3dJbmRleCwgdGhpcy5yb3dOb2RlKTtcclxuICAgICAgICAgICAgaWYgKGNjcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNjcy5zdHlsZSB8fCBjY3MuY2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNjcy5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjY3Muc3R5bGUpLmZvckVhY2gocyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHMsIGNjcy5zdHlsZVtzXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNjcy5jbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2NzLmNscy5zcGxpdCgnLCcpLmZvckVhY2goYyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY1swXSA9PT0gJyEnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3ModGhpcy5lbC5uYXRpdmVFbGVtZW50LCBjLnN1YnN0cmluZygxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsZXQgX3N0eSA9IGNlbGxDbHMgfHwge307XHJcbiAgICAgICAgICAgIGNvbnN0IHJvd1N0eWxlID0gdGhpcy50dC5nZXRSb3dDbHModGhpcy5yb3dOb2RlKSB8fCB7fTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGhhc0JhY2tncm91bmQgPSBPYmplY3Qua2V5cyhjZWxsQ2xzKS5maW5kKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFsnYmFja2dyb3VuZCcsICdiYWNrZ3JvdW5kLWNvbG9yJywgJ2JhY2tncm91bmRjb2xvciddLmluZGV4T2Yobi50b0xvd2VyQ2FzZSgpKSA+IC0xO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBfcm93U3R5bGVzID0gcm93U3R5bGU7XHJcbiAgICAgICAgICAgIGlmIChyb3dTdHlsZS5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgX3Jvd1N0eWxlcyA9IHJvd1N0eWxlLnN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBsZXQgX2NlbGxTdHlsZXMgPSBfc3R5O1xyXG4gICAgICAgICAgICBpZiAoX3N0eS5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgX2NlbGxTdHlsZXMgPSBfc3R5LnN0eWxlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICAgICAgaWYgKGhhc0JhY2tncm91bmQpIHtcclxuICAgICAgICAgICAgICAgIF9zdHkgPSBPYmplY3QuYXNzaWduKF9yb3dTdHlsZXMsIF9jZWxsU3R5bGVzKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIF9zdHkgPSBPYmplY3QuYXNzaWduKF9jZWxsU3R5bGVzLCBfcm93U3R5bGVzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgT2JqZWN0LmtleXMoX3N0eSkuZm9yRWFjaChzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgcywgX3N0eVtzXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMucm93Tm9kZSAmJiAhY2hhbmdlcy5yb3dOb2RlLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldENlbGxTdHlsZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tyZXNpemFibGUtY29sdW1uXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRUUmVzaXphYmxlQ29sdW1uRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gICAgQElucHV0KCdyZXNpemFibGUtY29sdW1uJykgZW5hYmxlUmVzaXplID0gdHJ1ZTtcclxuICAgIHJlc2l6ZXI6IEhUTUxTcGFuRWxlbWVudDtcclxuICAgIHJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lcjogYW55O1xyXG4gICAgZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcjogYW55O1xyXG4gICAgZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXI6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgdHQ6IFRyZWVUYWJsZUNvbXBvbmVudCwgcHVibGljIG5nem9uZTogTmdab25lLFxyXG4gICAgICAgIHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHVibGljIHJlbmRlcjogUmVuZGVyZXIyKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3Jlc2l6YWJsZS1jb2x1bW4nKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcclxuICAgICAgICAgICAgdGhpcy5yZXNpemVyLmNsYXNzTmFtZSA9ICdjb2x1bW4tcmVzaXplcic7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hcHBlbmRDaGlsZCh0aGlzLnJlc2l6ZXIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIgPSB0aGlzLm9uTW91c2VEb3duLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZXIuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5yZXNpemVyTW91c2VEb3duTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgdGhpcy5vbk1vdXNlRW50ZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZW5hYmxlUmVzaXplICYmICFjaGFuZ2VzLmVuYWJsZVJlc2l6ZS5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlKCkgJiYgdGhpcy5yZXNpemVyKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2l6ZXIucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbmFibGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHQucmVzaXphYmxlQ29sdW1ucyAmJiAhdGhpcy50dC5hdXRvV2lkdGggJiYgdGhpcy5lbmFibGVSZXNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgYmluZERvY3VtZW50RXZlbnRzKCkge1xyXG4gICAgICAgIHRoaXMubmd6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyID0gdGhpcy5vbk1vdXNlTW92ZS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCB0aGlzLmRvY3VtZW50TW91c2VNb3ZlTGlzdGVuZXIpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lciA9IHRoaXMub25Nb3VzZVVwLmJpbmQodGhpcyk7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLmRvY3VtZW50TW91c2VVcExpc3RlbmVyKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICB1bmJpbmREb2N1bWVudEV2ZW50cygpIHtcclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudE1vdXNlTW92ZUxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZU1vdmVMaXN0ZW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcikge1xyXG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgdGhpcy5kb2N1bWVudE1vdXNlVXBMaXN0ZW5lcik7XHJcbiAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRNb3VzZVVwTGlzdGVuZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRG93bihldmVudDogRXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0VuYWJsZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHQub25Db2x1bW5SZXNpemVCZWdpbihldmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VFbnRlcigpIHtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlTW92ZShldmVudDogRXZlbnQpIHtcclxuICAgICAgICB0aGlzLnR0Lm9uQ29sdW1uUmVzaXplKGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlVXAoZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy50dC5vbkNvbHVtblJlc2l6ZUVuZChldmVudCwgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVzaXplck1vdXNlRG93bkxpc3RlbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzaXplci5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCB0aGlzLnJlc2l6ZXJNb3VzZURvd25MaXN0ZW5lcik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnVuYmluZERvY3VtZW50RXZlbnRzKCk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==