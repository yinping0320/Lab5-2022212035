/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { EventManager } from '@angular/platform-browser';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
/**
 * @record
 */
function HotkeyOptions() { }
if (false) {
    /** @type {?} */
    HotkeyOptions.prototype.element;
    /** @type {?} */
    HotkeyOptions.prototype.description;
    /** @type {?} */
    HotkeyOptions.prototype.keys;
}
export class TTHotkeys {
    /**
     * @param {?} eventManager
     */
    constructor(eventManager) {
        this.eventManager = eventManager;
        this.hotkeys = new Map();
        this.defaults = {
            element: document
        };
    }
    /**
     * @param {?} options
     * @return {?}
     */
    addShortcut(options) {
        /** @type {?} */
        const merged = Object.assign({}, this.defaults, options);
        if (merged.keys.indexOf('ctrl') > -1) {
            merged.keys = merged.keys.replace('ctrl', 'control');
        }
        /** @type {?} */
        const event = `keydown.${merged.keys}`;
        if (merged.description) {
            this.hotkeys.set(merged.keys, merged.description);
        }
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const handler = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.preventDefault();
                observer.next(e);
            });
            /** @type {?} */
            const dispose = this.eventManager.addEventListener(merged.element, event, handler);
            return (/**
             * @return {?}
             */
            () => {
                dispose();
                this.hotkeys.delete(merged.keys);
            });
        }));
    }
}
TTHotkeys.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TTHotkeys.ctorParameters = () => [
    { type: EventManager }
];
/** @nocollapse */ TTHotkeys.ngInjectableDef = i0.defineInjectable({ factory: function TTHotkeys_Factory() { return new TTHotkeys(i0.inject(i1.EventManager)); }, token: TTHotkeys, providedIn: "root" });
if (false) {
    /** @type {?} */
    TTHotkeys.prototype.hotkeys;
    /** @type {?} */
    TTHotkeys.prototype.defaults;
    /**
     * @type {?}
     * @private
     */
    TTHotkeys.prototype.eventManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG90a2V5cy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktdHJlZXRhYmxlLyIsInNvdXJjZXMiOlsibGliL2hvdGtleXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQVUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxNQUFNLENBQUM7Ozs7OztBQUVsQyw0QkFJQzs7O0lBSEcsZ0NBQWE7O0lBQ2Isb0NBQWdDOztJQUNoQyw2QkFBYTs7QUFNakIsTUFBTSxPQUFPLFNBQVM7Ozs7SUFNbEIsWUFBb0IsWUFBMEI7UUFBMUIsaUJBQVksR0FBWixZQUFZLENBQWM7UUFMOUMsWUFBTyxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDcEIsYUFBUSxHQUEyQjtZQUMvQixPQUFPLEVBQUUsUUFBUTtTQUNwQixDQUFDO0lBR0YsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBK0I7O2NBQ2pDLE1BQU0scUJBQVEsSUFBSSxDQUFDLFFBQVEsRUFBSyxPQUFPLENBQUU7UUFDL0MsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQyxNQUFNLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxTQUFTLENBQUMsQ0FBQztTQUN4RDs7Y0FDSyxLQUFLLEdBQUcsV0FBVyxNQUFNLENBQUMsSUFBSSxFQUFFO1FBRXRDLElBQUksTUFBTSxDQUFDLFdBQVcsRUFBRTtZQUNwQixJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNyRDtRQUVELE9BQU8sSUFBSSxVQUFVOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUU7O2tCQUN2QixPQUFPOzs7O1lBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRTtnQkFDbEIsQ0FBQyxDQUFDLGNBQWMsRUFBRSxDQUFDO2dCQUNuQixRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3JCLENBQUMsQ0FBQTs7a0JBRUssT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDO1lBRWxGOzs7WUFBTyxHQUFHLEVBQUU7Z0JBQ1IsT0FBTyxFQUFFLENBQUM7Z0JBQ1YsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3JDLENBQUMsRUFBQztRQUNOLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7O1lBcENKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7OztZQVhRLFlBQVk7Ozs7O0lBYWpCLDRCQUFvQjs7SUFDcEIsNkJBRUU7Ozs7O0lBRVUsaUNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbnRlcmZhY2UgSG90a2V5T3B0aW9ucyB7XHJcbiAgICBlbGVtZW50OiBhbnk7XHJcbiAgICBkZXNjcmlwdGlvbjogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gICAga2V5czogc3RyaW5nO1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFRUSG90a2V5cyB7XHJcbiAgICBob3RrZXlzID0gbmV3IE1hcCgpO1xyXG4gICAgZGVmYXVsdHM6IFBhcnRpYWw8SG90a2V5T3B0aW9ucz4gPSB7XHJcbiAgICAgICAgZWxlbWVudDogZG9jdW1lbnRcclxuICAgIH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikge1xyXG4gICAgfVxyXG5cclxuICAgIGFkZFNob3J0Y3V0KG9wdGlvbnM6IFBhcnRpYWw8SG90a2V5T3B0aW9ucz4pIHtcclxuICAgICAgICBjb25zdCBtZXJnZWQgPSB7IC4uLnRoaXMuZGVmYXVsdHMsIC4uLm9wdGlvbnMgfTtcclxuICAgICAgICBpZiAobWVyZ2VkLmtleXMuaW5kZXhPZignY3RybCcpID4gLTEpIHtcclxuICAgICAgICAgICAgbWVyZ2VkLmtleXMgPSBtZXJnZWQua2V5cy5yZXBsYWNlKCdjdHJsJywgJ2NvbnRyb2wnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXZlbnQgPSBga2V5ZG93bi4ke21lcmdlZC5rZXlzfWA7XHJcblxyXG4gICAgICAgIGlmIChtZXJnZWQuZGVzY3JpcHRpb24pIHtcclxuICAgICAgICAgICAgdGhpcy5ob3RrZXlzLnNldChtZXJnZWQua2V5cywgbWVyZ2VkLmRlc2NyaXB0aW9uKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGhhbmRsZXIgPSAoZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3Bvc2UgPSB0aGlzLmV2ZW50TWFuYWdlci5hZGRFdmVudExpc3RlbmVyKG1lcmdlZC5lbGVtZW50LCBldmVudCwgaGFuZGxlcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgZGlzcG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3RrZXlzLmRlbGV0ZShtZXJnZWQua2V5cyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==