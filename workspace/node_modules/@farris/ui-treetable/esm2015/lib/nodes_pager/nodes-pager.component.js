/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TreeTableComponent } from './../treetable.component';
import { Component, Input, Injector, ChangeDetectorRef, EventEmitter, Output, ViewChild, ElementRef } from '@angular/core';
import { filter } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
export class TreetableNodesPagerComponent {
    /**
     * @param {?} tt
     * @param {?} cd
     * @param {?} injector
     */
    constructor(tt, cd, injector) {
        this.tt = tt;
        this.cd = cd;
        this.injector = injector;
        this.disabled = false;
        this.pageChange = new EventEmitter();
        this.showTotal = false;
        this.showPager = new BehaviorSubject(false);
        this.pagerInfo = null;
        if (this.tt) {
            this.tt.expand.pipe(filter((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                return node.id === this.context.node.id && node.pagination && node.children.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => !n.__childs_loading__)).length;
            }))).subscribe((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                this.pagerInfo = Object.assign({}, node.pagination);
                this.showPager.next(true);
            }));
            this.tt.appendNew.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const node = e.parent;
                if (node.id === this.context.node.id && node.pagination) {
                    this.pagerInfo = Object.assign({}, node.pagination);
                    this.showPager.next(true);
                }
            }));
            this.tt.collapse.subscribe((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                if (node.id === this.context.node.id) {
                    this.showPager.next(false);
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    get pagers() {
        /** @type {?} */
        const c = this.getPagerCount();
        if (c) {
            return new Array(c);
        }
        return [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setPagerInfo();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.context && !changes.context.isFirstChange()) {
            this.setPagerInfo();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setPagerInfo() {
        if (this.context) {
            const { node } = this.context;
            if (node && node.pagination) {
                this.pagerInfo = Object.assign({}, node.pagination);
                this.showPager.next(node.expanded && node.pagination);
            }
        }
    }
    /**
     * @return {?}
     */
    getPagerCount() {
        const { pageSize, total } = this.pagerInfo;
        if (!total) {
            return 0;
        }
        else {
            return Math.ceil(total / pageSize);
        }
    }
    /**
     * @return {?}
     */
    isFirstPager() {
        return this.pagerInfo.pageIndex === 1;
    }
    /**
     * @return {?}
     */
    isLastPager() {
        return this.pagerInfo.pageIndex === this.getPagerCount();
    }
    /**
     * Go to the previous page
     * @param {?} $event
     * @return {?}
     */
    previous($event) {
        $event.stopPropagation();
        this.setCurrent(this.pagerInfo.pageIndex - 1, this.pagerInfo.pageSize);
    }
    /**
     * Go to the next page
     * @param {?} $event
     * @return {?}
     */
    next($event) {
        $event.stopPropagation();
        this.setCurrent(this.pagerInfo.pageIndex + 1, this.pagerInfo.pageSize);
    }
    /**
     * @param {?} page
     * @param {?=} pageSize
     * @param {?=} $event
     * @return {?}
     */
    setCurrent(page, pageSize, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        this.pageChange.emit({ pageIndex: page, pageSize, node: this.context.node, context: this.context });
    }
    /**
     * @param {?} newPageIndex
     * @return {?}
     */
    pagerChanged(newPageIndex) {
        this.setCurrent(newPageIndex, this.pagerInfo.pageSize);
    }
}
TreetableNodesPagerComponent.decorators = [
    { type: Component, args: [{
                selector: 'nodes-pager',
                template: "\r\n<div style=\"justify-content: center;align-items: center;height: 100%;left: -6px;position: relative;\" class=\"d-flex f-utils-fill\" *ngIf=\"showPager | async\"  [ngStyle]=\" { 'opacity': (disabled ? 0.6 : 1), 'pointer-events': (disabled? 'none': '')  }\">\r\n    <ul class=\"treetable-nodes-pagerbar d-flex\"  (click)=\"$event.stopPropagation()\" >\r\n        <li class=\"pageinfo d-flex flex-row\" >\r\n            <div class=\"page-number-list\">\r\n                <div style=\"display: inline-block;\">\r\n                    {{pagerInfo.pageIndex}}\r\n                </div>\r\n                <select #pagerList class=\"page-index\" hidefocus=\"true\" [ngModel]=\"pagerInfo.pageIndex\" (ngModelChange)=\"pagerChanged($event)\">\r\n                    <option *ngFor=\"let t of pagers;let i=index\" [ngValue]=\"i + 1\">{{i + 1}}</option>\r\n                </select>\r\n            </div>\r\n           / {{ getPagerCount() }}</li>\r\n        <li class=\"pager-btn prev\" [class.disabled]=\"isFirstPager()\" (click)=\"previous($event)\" title=\"{{ 'pagination.previous'|locale: '\u4E0A\u4E00\u9875' }}\">\r\n            <span class=\"f-icon f-icon-arrow-chevron-left\"></span>\r\n        </li>\r\n        <li class=\"pager-btn next\"  [class.disabled]=\"isLastPager()\" (click)=\"next($event)\" title=\"{{ 'pagination.next'|locale: '\u4E0B\u4E00\u9875' }}\">\r\n            <span class=\"f-icon f-icon-arrow-chevron-right\"></span>\r\n        </li>\r\n        <li class=\"ml-2\" *ngIf=\"showTotal\">\r\n            {{pagerInfo?.total}}\r\n        </li>\r\n    </ul>\r\n\r\n</div>",
                styles: [`
        .treetable-nodes-pagerbar { height: 22px; line-height: 22px; list-style: none}
        .treetable-nodes-pagerbar li { float: left; box-sizing: border-box; }
        .treetable-nodes-pagerbar .pager-btn {
            width: 22px;
            height: 22px;
            text-align: center;
            border: 1px solid #ccc;
            background: rgb(248 249 250);
            cursor: pointer;
        }
        .treetable-nodes-pagerbar .pager-btn:hover {
            background: white;
        }
        .treetable-nodes-pagerbar .prev {}
        .treetable-nodes-pagerbar .next {
            border-left: 0;
        }

        .pager-btn.disabled{
            color: rgb(204 204 204);
            pointer-events: none;
        }
        .treetable-nodes-pagerbar .pageinfo {
            margin-right: 5px;
            padding-left: 0;
            font-weight: 400;
            padding-right: 5px;
        }

        .treetable-nodes-pagerbar .page-index {
            border: 0;
            background: transparent;
            outline: none;
            appearance: none;
            padding-left: 5px;
            min-width: 50px;
            position: absolute;
            height: 20px;
            text-align: left;
            opacity: 0;
            left: 0;
        }

        .treetable-nodes-pagerbar .page-number-list {
            height: 20px;
            min-width: 30px;
            max-width: 50px;
            overflow: hidden;
            text-align: center;
            position: relative;
            border-bottom: 1px solid #ced4da;
        }
        `]
            }] }
];
/** @nocollapse */
TreetableNodesPagerComponent.ctorParameters = () => [
    { type: TreeTableComponent },
    { type: ChangeDetectorRef },
    { type: Injector }
];
TreetableNodesPagerComponent.propDecorators = {
    disabled: [{ type: Input }],
    context: [{ type: Input }],
    pagerListEl: [{ type: ViewChild, args: ['pagerList',] }],
    pageChange: [{ type: Output }],
    showTotal: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.disabled;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.context;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.pagerListEl;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.pageChange;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.showTotal;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.showPager;
    /** @type {?} */
    TreetableNodesPagerComponent.prototype.pagerInfo;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.tt;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    TreetableNodesPagerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,