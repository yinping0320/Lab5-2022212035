/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input } from '@angular/core';
import { HostListener } from '@angular/core';
export class NumberOnlyDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        /** @type {?} */
        const val = ((/** @type {?} */ (e.target))).value;
        /** @type {?} */
        const key = e.key;
        /** @type {?} */
        const checkKeys = ['.', '-', '%'];
        /** @type {?} */
        const selectionVal = this.getSelectionValue(e.target);
        if (val && checkKeys.indexOf(key) > -1 && val.indexOf(key) > -1 && !(selectionVal && selectionVal.indexOf(key) > -1)) {
            e.preventDefault();
        }
        if ([46, 8, 9, 27, 13, 110, 190, 173].indexOf(e.keyCode) !== -1 ||
            // 允许全选: Ctrl+A
            (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||
            // 允许复制: Ctrl+C
            (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||
            // 允许粘贴: Ctrl+V
            (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||
            // 允许剪切: Ctrl+X
            (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||
            // 允许: home（头）, end（尾）, left（左移）, right（右移）
            (e.keyCode >= 35 && e.keyCode <= 39) ||
            e.keyCode === 189 || e.keyCode === 109) {
            // let it happen, don't do anything
            return;
        }
        // 确保数字以外的案件被拒绝执行默认动作
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
        // 判断当前小数精度
        if (val.indexOf('.') > -1 && this.precision) {
            /** @type {?} */
            const curPos = ((/** @type {?} */ (e.target))).selectionStart;
            /** @type {?} */
            const selectionEnd = ((/** @type {?} */ (e.target))).selectionEnd;
            /** @type {?} */
            const _precision = val.split('.')[1].length;
            /** @type {?} */
            const dotPos = val.indexOf('.');
            if (curPos > dotPos) {
                /** @type {?} */
                const selectionText = val.substring(curPos, selectionEnd);
                if (_precision - selectionText.length >= Number(this.precision)) {
                    e.preventDefault();
                    return false;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getSelectionValue(target) {
        /** @type {?} */
        const start = ((/** @type {?} */ (target))).selectionStart;
        /** @type {?} */
        const end = ((/** @type {?} */ (target))).selectionEnd;
        return target.value.substring(start, end);
    }
}
NumberOnlyDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line: directive-selector
                selector: '[number-only]'
            },] }
];
/** @nocollapse */
NumberOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
NumberOnlyDirective.propDecorators = {
    precision: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    NumberOnlyDirective.prototype.precision;
    /**
     * @type {?}
     * @private
     */
    NumberOnlyDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLW9ubHktZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1udW1iZXItc3Bpbm5lci8iLCJzb3VyY2VzIjpbImxpYi9udW1iZXItb25seS1kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTTdDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFJNUIsWUFBb0IsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtJQUFHLENBQUM7Ozs7O0lBRzNDLFNBQVMsQ0FBQyxDQUFnQjs7Y0FDaEIsR0FBRyxHQUFHLENBQUMsbUJBQUEsQ0FBQyxDQUFDLE1BQU0sRUFBTyxDQUFDLENBQUMsS0FBSzs7Y0FDN0IsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHOztjQUNYLFNBQVMsR0FBRyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDOztjQUMzQixZQUFZLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUM7UUFDckQsSUFBSSxHQUFHLElBQUksU0FBUyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFLLENBQUMsQ0FBQyxZQUFZLElBQUksWUFBWSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFHO1lBQ3BILENBQUMsQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN0QjtRQUVELElBQ0ksQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxD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ZixzQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEhvc3RMaXN0ZW5lciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IGRpcmVjdGl2ZS1zZWxlY3RvclxyXG4gICAgc2VsZWN0b3I6ICdbbnVtYmVyLW9ubHldJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgTnVtYmVyT25seURpcmVjdGl2ZSB7XHJcblxyXG4gICAgQElucHV0KCkgcHJlY2lzaW9uOiBudW1iZXI7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbGVtZW50OiBFbGVtZW50UmVmKSB7fVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24nLCBbJyRldmVudCddKVxyXG4gICAgb25LZXlEb3duKGU6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICBjb25zdCB2YWwgPSAoZS50YXJnZXQgYXMgYW55KS52YWx1ZTtcclxuICAgICAgICBjb25zdCBrZXkgPSBlLmtleTtcclxuICAgICAgICBjb25zdCBjaGVja0tleXMgPSBbJy4nLCAnLScsICclJ107XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0aW9uVmFsID0gdGhpcy5nZXRTZWxlY3Rpb25WYWx1ZShlLnRhcmdldCk7XHJcbiAgICAgICAgaWYgKHZhbCAmJiBjaGVja0tleXMuaW5kZXhPZihrZXkpID4gLTEgJiYgdmFsLmluZGV4T2Yoa2V5KSA+IC0xICAmJiAhKHNlbGVjdGlvblZhbCAmJiBzZWxlY3Rpb25WYWwuaW5kZXhPZihrZXkpID4gLTEpICkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIFs0NiwgOCwgOSwgMjcsIDEzLCAxMTAsIDE5MCwgMTczXS5pbmRleE9mKGUua2V5Q29kZSkgIT09IC0xIHx8XHJcbiAgICAgICAgICAgIC8vIOWFgeiuuOWFqOmAiTogQ3RybCtBXHJcbiAgICAgICAgICAgIChlLmtleUNvZGUgPT09IDY1ICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkgfHxcclxuICAgICAgICAgICAgLy8g5YWB6K645aSN5Yi2OiBDdHJsK0NcclxuICAgICAgICAgICAgKGUua2V5Q29kZSA9PT0gNjcgJiYgKGUuY3RybEtleSB8fCBlLm1ldGFLZXkpKSB8fFxyXG4gICAgICAgICAgICAvLyDlhYHorrjnspjotLQ6IEN0cmwrVlxyXG4gICAgICAgICAgICAoZS5rZXlDb2RlID09PSA4NiAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkpIHx8XHJcbiAgICAgICAgICAgIC8vIOWFgeiuuOWJquWIhzogQ3RybCtYXHJcbiAgICAgICAgICAgIChlLmtleUNvZGUgPT09IDg4ICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5KSkgfHxcclxuICAgICAgICAgICAgLy8g5YWB6K64OiBob21l77yI5aS077yJLCBlbmTvvIjlsL7vvIksIGxlZnTvvIjlt6bnp7vvvIksIHJpZ2h077yI5Y+z56e777yJXHJcbiAgICAgICAgICAgIChlLmtleUNvZGUgPj0gMzUgJiYgZS5rZXlDb2RlIDw9IDM5KSB8fFxyXG4gICAgICAgICAgICBlLmtleUNvZGUgPT09IDE4OSB8fCBlLmtleUNvZGUgPT09IDEwOVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICAvLyBsZXQgaXQgaGFwcGVuLCBkb24ndCBkbyBhbnl0aGluZ1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOehruS/neaVsOWtl+S7peWklueahOahiOS7tuiiq+aLkue7neaJp+ihjOm7mOiupOWKqOS9nFxyXG4gICAgICAgIGlmICgoZS5zaGlmdEtleSB8fCAoZS5rZXlDb2RlIDwgNDggfHwgZS5rZXlDb2RlID4gNTcpKSAmJiAoZS5rZXlDb2RlIDwgOTYgfHwgZS5rZXlDb2RlID4gMTA1KSkge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDliKTmlq3lvZPliY3lsI/mlbDnsr7luqZcclxuICAgICAgICBpZiAodmFsLmluZGV4T2YoJy4nKSA+IC0xICYmIHRoaXMucHJlY2lzaW9uKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1clBvcyA9IChlLnRhcmdldCBhcyBhbnkpLnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25FbmQgPSAoZS50YXJnZXQgYXMgYW55KS5zZWxlY3Rpb25FbmQ7XHJcbiAgICAgICAgICAgIGNvbnN0IF9wcmVjaXNpb24gPSB2YWwuc3BsaXQoJy4nKVsxXS5sZW5ndGg7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBkb3RQb3MgPSB2YWwuaW5kZXhPZignLicpO1xyXG4gICAgICAgICAgICBpZiAoY3VyUG9zID4gZG90UG9zKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb25UZXh0ID0gdmFsLnN1YnN0cmluZyhjdXJQb3MsIHNlbGVjdGlvbkVuZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX3ByZWNpc2lvbiAtIHNlbGVjdGlvblRleHQubGVuZ3RoID49IE51bWJlcih0aGlzLnByZWNpc2lvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIGdldFNlbGVjdGlvblZhbHVlKHRhcmdldCkge1xyXG4gICAgICAgIGNvbnN0IHN0YXJ0ID0gKHRhcmdldCBhcyBhbnkpLnNlbGVjdGlvblN0YXJ0O1xyXG4gICAgICAgIGNvbnN0IGVuZCA9ICh0YXJnZXQgYXMgYW55KS5zZWxlY3Rpb25FbmQ7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC52YWx1ZS5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7XHJcbiAgICB9XHJcblxyXG5cclxufVxyXG4iXX0=