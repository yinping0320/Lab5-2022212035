/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-05 10:26:50
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2020-11-16 11:43:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, forwardRef, ViewChild, ElementRef, Injector, Renderer2, HostBinding, ChangeDetectorRef } from '@angular/core';
import { NgControl, NG_VALUE_ACCESSOR } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
/**
 * @record
 */
export function NumberFormatter() { }
if (false) {
    /**
     * 前置符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.prefix;
    /**
     * 后缀
     * @type {?|undefined}
     */
    NumberFormatter.prototype.suffix;
    /**
     * 小数点
     * @type {?|undefined}
     */
    NumberFormatter.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSeparator;
    /**
     * 千分位分组
     * @type {?|undefined}
     */
    NumberFormatter.prototype.groupSize;
}
export class NumberSpinnerComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} injector
     */
    constructor(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.hostClass = true;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        // 空白提示文本
        this.placeholder = '';
        // up or down 步长
        this.step = 1;
        /**
         * 启用大数支持
         */
        this.bigNumber = false;
        // 是否显示加减按钮
        this.showButton = true;
        // 是否使用千分值
        this.useThousands = true;
        // 文本方向
        this.textAlign = 'left';
        // 自动补全小数
        this.autoDecimal = true;
        // 允许为空
        this.canNull = false;
        // 精度
        this.precision = 0;
        // 前缀
        this.prefix = '';
        // 后缀
        this.suffix = '';
        /**
         * 小数点符号
         */
        this.decimalSeparator = '.';
        /**
         * 千分位符号
         */
        this.groupSeparator = ',';
        /**
         * 使用千分位时，每组显示的字符数
         */
        this.groupSize = 3;
        this._value = '';
        /**
         * 显示0值
         */
        this.showZero = true;
        this.valueChange = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.isFocus = false;
        this.popValue = '';
        this.isActiveTip = false;
        this.formatOptions = {};
        this._realValue = null;
        this.showtipTimer = null;
        this._updateOn = 'change';
        this.localeService = null;
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        this.onChangeCallback = (/**
         * @return {?}
         */
        () => { });
        this.cdRef = this.injector.get(ChangeDetectorRef, null);
        this.localeService = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formatOptions = this.buildFormatOptions();
        this._ngControl = this.injector.get(NgControl, null);
        if (this.localeService) {
            /** @type {?} */
            const defaultPlaceHolder = this.localeService.getValue('numberSpinner.placeholder') || '请输入数字';
            if (!this.placeholder) {
                this.placeholder = defaultPlaceHolder;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this.listenInputPasteEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.isFirstChange()) {
            this._realValue = this.getRealValue(changes.value.currentValue);
            this.value = this.format(this._realValue);
        }
        if (changes.showZero && !changes.showZero.isFirstChange()) {
            this.value = this.format(this._realValue);
        }
        if (changes.precision && !changes.precision.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.useThousands && !changes.useThousands.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.prefix && !changes.prefix.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.suffix && !changes.suffix.isFirstChange()) {
            this.onOptionsChanged();
        }
    }
    /**
     * @private
     * @return {?}
     */
    onOptionsChanged() {
        this.formatOptions = this.buildFormatOptions();
        this.value = this.format(this._realValue);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    // 支持粘贴带格式的数据
    /**
     * @return {?}
     */
    listenInputPasteEvent() {
        this.input.nativeElement.addEventListener('paste', (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            event.preventDefault();
            /** @type {?} */
            const clipboardData = event.clipboardData || window['clipboardData'];
            /** @type {?} */
            const pasteValue = clipboardData.getData('text');
            /** @type {?} */
            const val = this.cleanNumString(pasteValue);
            if (this.isEmpty(val)) {
                return;
            }
            /** @type {?} */
            const target = event.target;
            /** @type {?} */
            const start = ((/** @type {?} */ (target))).selectionStart;
            /** @type {?} */
            const end = ((/** @type {?} */ (target))).selectionEnd;
            if (this.isEmpty(val)) {
                target.value = '';
            }
            else {
                target.value = target.value.slice(0, start) + val + target.value.slice(end);
            }
            if (this._updateOn === 'change') {
                this._realValue = this.getRealValue(target.value);
                this.value = this._realValue;
                this._modelChanged(this._realValue);
            }
        }));
    }
    /**
     * @param {?} $event
     * @param {?=} type
     * @return {?}
     */
    onBlur($event, type = '') {
        if (this.readonly || this.disabled) {
            return;
        }
        if (this._updateOn === 'blur') {
            /** @type {?} */
            const val = this.cleanNumString($event.value);
            this._realValue = this.getRealValue(val);
        }
        this.value = this.format(this._realValue);
        this.input.nativeElement.value = this.value;
        this.isFocus = false;
        this.onModelChange(this._realValue, 'blur');
        this.blur.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.readonly || this.disabled) {
            this.isFocus = false;
            return;
        }
        this.value = this.isEmpty(this._realValue) ? '' : ((!this.showZero && this._realValue == '0') ? '' : this._realValue);
        this.isFocus = true;
        this.focus.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (this.value) {
            this.popValue = this.value;
            this.isActiveTip = this.isShowPopover();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.down(e);
            e.stopPropagation();
        }
        if (e.key === 'ArrowUp') {
            e.preventDefault();
            this.up(e);
            e.stopPropagation();
        }
    }
    /**
     * @private
     * @param {?} realVal
     * @return {?}
     */
    _modelChanged(realVal) {
        this._realValue = realVal;
        this.onChangeCallback(realVal);
        this.onTouchedCallback();
        this.valueChange.emit(realVal);
    }
    /**
     * @param {?} realVal
     * @param {?=} updateOn
     * @return {?}
     */
    onModelChange(realVal, updateOn = 'change') {
        // this._realValue = this.getRealValue(val);
        /** @type {?} */
        let _realValue = realVal;
        if (updateOn === 'change') {
            /** @type {?} */
            const num = this.cleanNumString('' + realVal);
            _realValue = this.getRealValue(num);
        }
        this.isActiveTip = false;
        this.popValue = this.format(_realValue);
        if (this._updateOn === updateOn) {
            this._modelChanged(_realValue);
        }
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    up(e, type = null) {
        this.compute('up');
        e.stopPropagation();
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    down(e, type = null) {
        this.compute('down');
        e.stopPropagation();
    }
    /**
     * @param {?=} tye
     * @return {?}
     */
    compute(tye = 'up') {
        if (this.isDisableOfBtn(tye)) {
            /** @type {?} */
            let _resultValue;
            /** @type {?} */
            const realBigNum = new BigNumber(this._realValue || 0);
            if (tye === 'up') {
                _resultValue = realBigNum.plus(Number(this.step));
            }
            else {
                _resultValue = realBigNum.minus(Number(this.step));
            }
            /** @type {?} */
            const s = _resultValue.toFixed();
            if (!this.isFocus) {
                this.value = this.format(s);
            }
            else {
                this.value = s;
            }
            this.input.nativeElement.value = this.value;
            this._modelChanged(this.getRealValue(_resultValue));
        }
    }
    /**
     * @param {?} type
     * @param {?=} value
     * @return {?}
     */
    isDisableOfBtn(type, value) {
        if (value === undefined) {
            value = this._realValue;
        }
        value = new BigNumber(value);
        if (type === 'up' && !(new BigNumber(this.max)).isNaN() && value.gte(this.max)) {
            return false;
        }
        if (type === 'down' && !(new BigNumber(this.min)).isNaN() && value.lte(this.min)) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    isShowPopover() {
        /** @type {?} */
        const width = this.input.nativeElement.clientWidth;
        const { paddingLeft, paddingRight } = window.getComputedStyle(this.input.nativeElement);
        /** @type {?} */
        const _width = width - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);
        /** @type {?} */
        const txtWidth = this.commonUtils.getTextWidth(this.value, window.getComputedStyle(this.input.nativeElement).font);
        if (_width && _width < txtWidth) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    _getPrecision() {
        return Number(this.precision || 0);
    }
    /**
     * @param {?} n
     * @return {?}
     */
    toFixed(n) {
        /** @type {?} */
        let _n = n;
        if (!BigNumber.isBigNumber(n)) {
            _n = new BigNumber(n);
        }
        if (this.precision !== null && this.precision !== undefined) {
            return n.toFixed(this._getPrecision());
        }
        return n.toFixed();
    }
    /**
     * @param {?} _n
     * @return {?}
     */
    _getRealValue(_n) {
        /** @type {?} */
        const n = this.toFixed(_n);
        return this.bigNumber ? n : Number(n);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getRealValue(val) {
        if (this.parser) {
            if (!isNaN(Number(val))) {
                return val;
            }
            else {
                return this.parser(val);
            }
        }
        /** @type {?} */
        let _n = this.validInterval(new BigNumber(val));
        if (_n.isNaN()) {
            if (this.canNull) {
                return null;
            }
            else {
                /** @type {?} */
                const minBigNum = new BigNumber('' + this.min);
                /** @type {?} */
                const maxBigNum = new BigNumber('' + this.max);
                if (!minBigNum.isNaN()) {
                    _n = minBigNum;
                }
                else if (!maxBigNum.isNaN()) {
                    _n = maxBigNum;
                }
                else {
                    return 0;
                }
            }
            // if (this.canNull || minBigNum.isNaN()) {
            //     return null;
            // } else {
            //     _n = minBigNum;
            // }
        }
        return this._getRealValue(_n);
    }
    /**
     * @private
     * @return {?}
     */
    buildFormatOptions() {
        return {
            prefix: this.prefix,
            suffix: this.suffix,
            decimalSeparator: this.decimalSeparator,
            groupSeparator: this.useThousands ? this.groupSeparator : '',
            groupSize: this.groupSize
        };
    }
    /**
     * @param {?} val
     * @return {?}
     */
    isEmpty(val) {
        return isNaN(val) || val === null || val === undefined || val === '';
    }
    /**
     * @param {?} bn
     * @param {?=} emit
     * @return {?}
     */
    validInterval(bn, emit = true) {
        /** @type {?} */
        let _bnVal = bn;
        if (!this.isEmpty(this.max)) {
            /** @type {?} */
            const _maxBigNum = new BigNumber('' + this.max);
            if (bn.gt(_maxBigNum)) {
                _bnVal = _maxBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_maxBigNum);
                if (emit) {
                    this._modelChanged(_realValue);
                }
            }
        }
        if (!this.isEmpty(this.min)) {
            /** @type {?} */
            const _minBigNum = new BigNumber('' + this.min);
            if (bn.lt(_minBigNum)) {
                _bnVal = _minBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_minBigNum);
                if (emit) {
                    this._modelChanged(_realValue);
                }
            }
        }
        return _bnVal;
    }
    /**
     * @param {?} val
     * @param {?=} emit
     * @return {?}
     */
    format(val, emit = true) {
        val = this.cleanNumString(val);
        /** @type {?} */
        const bigVal = new BigNumber(val);
        /** @type {?} */
        let _bgNum = bigVal;
        if (emit) {
            _bgNum = this.validInterval(bigVal);
        }
        if (_bgNum.valueOf() == '0' && !this.showZero) {
            return '';
        }
        if (this.canNull && bigVal.isNaN()) {
            return '';
        }
        else {
            if (_bgNum.isNaN()) {
                return '';
            }
        }
        if (this.formatter) {
            return this.formatter(_bgNum.toNumber());
        }
        else {
            if (!Object.keys(this.formatOptions).length) {
                this.formatOptions = this.buildFormatOptions();
            }
            return this._toFormat(_bgNum, this.formatOptions);
        }
    }
    /**
     * @param {?} _bgNum
     * @param {?} fmt
     * @return {?}
     */
    _toFormat(_bgNum, fmt) {
        if (this.precision !== null && this.precision !== undefined) {
            return _bgNum.toFormat(this._getPrecision(), fmt);
        }
        else {
            return _bgNum.toFormat(fmt);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    cleanNumString(val) {
        val = (val === null || val === undefined || val === '') ? '' : String(val);
        val = val.replace(new RegExp(this.prefix, 'g'), '')
            .replace(new RegExp(this.suffix, 'g'), '').replace(/\,/g, '');
        if (this.groupSeparator && this.groupSeparator !== ',') {
            val = val.replace(new RegExp(`\\${this.groupSeparator}`, 'g'), '');
        }
        if (this.decimalSeparator && this.decimalSeparator !== '.') {
            val = val.replace(new RegExp(`\\${this.decimalSeparator}`, 'g'), '.');
        }
        return val;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    updateValue(val) {
        val = this.cleanNumString(val);
        this._realValue = this.getRealValue(val);
        this.value = this.format(this._realValue);
        this.el.nativeElement.value = this.value;
    }
    /**
     * @private
     * @return {?}
     */
    updateControlValue() {
        /** @type {?} */
        let _val = this.cleanNumString(this.value);
        if (this.parser) {
            _val = this.parser(this.value);
        }
        if (this.isEmpty(this._realValue) && this.isEmpty(_val)) {
            return;
        }
        /** @type {?} */
        const rv = new BigNumber(this._realValue);
        /** @type {?} */
        const cv = new BigNumber(_val);
        if (rv.isNaN() && cv.isNaN()) {
            return;
        }
        // if (!rv.eq(cv)) {
        // }
        if (this._ngControl) {
            /** @type {?} */
            const formgroup = this._ngControl['formDirective'];
            if (formgroup) {
                /** @type {?} */
                let ctrl = formgroup.control.get(this._ngControl.name);
                if (!ctrl && formgroup.control.controls) {
                    ctrl = formgroup.control.controls[this._ngControl.name];
                }
                if (ctrl) {
                    if (ctrl.value !== this._realValue) {
                        ctrl.setValue(this._realValue);
                    }
                }
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this._realValue = val;
        this.value = this.format(this._realValue, false);
        this.updateControlValue();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
NumberSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-number-spinner',
                template: `
        <div class="input-group  f-state-hover flex-row"
            [ngClass]="{'f-state-disabled': disabled,'f-state-readonly': readonly,'f-state-focus': isFocus }"
            (mouseenter)="onMouseEnter($event)"
            #popover="bs-popover"
            farrisPopover
            [popover]="popValue" [triggers]="'hover'" [popActive]="isActiveTip"
            [showAction]="'show2'"  [container]="'body'">
            <input #input
                type="text"
                number-only
                [precision]="precision"
                autocomplete="off"
                class="form-control f-utils-fill"
                [ngModel]="value"
                [placeholder]="disabled||readonly || !editable?'':placeholder"
                [readonly]="readonly || !editable"
                [disabled]="disabled"
                [style.padding-right]="'4px'"
                [style.text-align]="textAlign"
                (ngModelChange)="onModelChange($event)"
                (blur)="onBlur(input)"
                (focus)="onFocus($event)"
                (keydown)="onKeyDown($event)"
                (click)="onClick($event)"
            />
            <div class="input-group-append btn-group btn-group-number m-0" *ngIf="!disabled && !readonly && showButton">
                <span class="icon k-i-arrow-chevron-up number-arrow-chevron" [style.cursor]="isDisableOfBtn('up') ? 'pointer' : 'not-allowed'"
                        (click)="up($event)"></span>
                <span class="icon k-i-arrow-chevron-down number-arrow-chevron" [style.cursor]="isDisableOfBtn('down') ? 'pointer' : 'not-allowed'"
                        (click)="down($event)"></span>
                
            </div>
        </div>
    `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NumberSpinnerComponent)),
                        multi: true
                    }
                ],
                styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff;border-left:1px solid #d9d9d9;width:1.50003rem}.input-group .btn-group-number .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1;height:50%;text-align:center}.input-group .btn-group-number .number-arrow-chevron:active{background-color:#e6e9f0}.input-group .btn-group-number .number-arrow-chevron:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
            }] }
];
/** @nocollapse */
NumberSpinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
NumberSpinnerComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class.f-cmp-number-spinner',] }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    formatter: [{ type: Input }],
    parser: [{ type: Input }],
    placeholder: [{ type: Input }],
    step: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    bigNumber: [{ type: Input }],
    showButton: [{ type: Input }],
    useThousands: [{ type: Input }],
    textAlign: [{ type: Input }],
    autoDecimal: [{ type: Input }],
    canNull: [{ type: Input }],
    precision: [{ type: Input }],
    prefix: [{ type: Input }],
    suffix: [{ type: Input }],
    decimalSeparator: [{ type: Input }],
    groupSeparator: [{ type: Input }],
    groupSize: [{ type: Input }],
    value: [{ type: Input }],
    showZero: [{ type: Input }],
    valueChange: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};
if (false) {
    /** @type {?} */
    NumberSpinnerComponent.prototype.hostClass;
    /** @type {?} */
    NumberSpinnerComponent.prototype.disabled;
    /** @type {?} */
    NumberSpinnerComponent.prototype.readonly;
    /** @type {?} */
    NumberSpinnerComponent.prototype.editable;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatter;
    /** @type {?} */
    NumberSpinnerComponent.prototype.parser;
    /** @type {?} */
    NumberSpinnerComponent.prototype.placeholder;
    /** @type {?} */
    NumberSpinnerComponent.prototype.step;
    /** @type {?} */
    NumberSpinnerComponent.prototype.max;
    /** @type {?} */
    NumberSpinnerComponent.prototype.min;
    /**
     * 启用大数支持
     * @type {?}
     */
    NumberSpinnerComponent.prototype.bigNumber;
    /** @type {?} */
    NumberSpinnerComponent.prototype.showButton;
    /** @type {?} */
    NumberSpinnerComponent.prototype.useThousands;
    /** @type {?} */
    NumberSpinnerComponent.prototype.textAlign;
    /** @type {?} */
    NumberSpinnerComponent.prototype.autoDecimal;
    /** @type {?} */
    NumberSpinnerComponent.prototype.canNull;
    /** @type {?} */
    NumberSpinnerComponent.prototype.precision;
    /** @type {?} */
    NumberSpinnerComponent.prototype.prefix;
    /** @type {?} */
    NumberSpinnerComponent.prototype.suffix;
    /**
     * 小数点符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.decimalSeparator;
    /**
     * 千分位符号
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSeparator;
    /**
     * 使用千分位时，每组显示的字符数
     * @type {?}
     */
    NumberSpinnerComponent.prototype.groupSize;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._value;
    /**
     * 显示0值
     * @type {?}
     */
    NumberSpinnerComponent.prototype.showZero;
    /** @type {?} */
    NumberSpinnerComponent.prototype.valueChange;
    /** @type {?} */
    NumberSpinnerComponent.prototype.blur;
    /** @type {?} */
    NumberSpinnerComponent.prototype.focus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.input;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isFocus;
    /** @type {?} */
    NumberSpinnerComponent.prototype.popValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.isActiveTip;
    /** @type {?} */
    NumberSpinnerComponent.prototype.formatOptions;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._realValue;
    /** @type {?} */
    NumberSpinnerComponent.prototype.cdRef;
    /** @type {?} */
    NumberSpinnerComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype._ngControl;
    /**
     * @type {?}
     * @private
     */
    NumberSpinnerComponent.prototype.showtipTimer;
    /** @type {?} */
    NumberSpinnerComponent.prototype._updateOn;
    /** @type {?} */
    NumberSpinnerComponent.prototype.localeService;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onTouchedCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.onChangeCallback;
    /** @type {?} */
    NumberSpinnerComponent.prototype.el;
    /** @type {?} */
    NumberSpinnerComponent.prototype.render;
    /** @type {?} */
    NumberSpinnerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyLXNwaW5uZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1udW1iZXItc3Bpbm5lci8iLCJzb3VyY2VzIjpbImxpYi9udW1iZXItc3Bpbm5lci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUNILFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQzNGLFNBQVMsRUFBdUMsV0FBVyxFQUFFLGlCQUFpQixFQUNqRixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQXFDLFNBQVMsRUFBVyxpQkFBaUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzFHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDekMsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUdoRCxxQ0FXQzs7Ozs7O0lBVEcsaUNBQWdCOzs7OztJQUVoQixpQ0FBZ0I7Ozs7O0lBRWhCLDJDQUEwQjs7Ozs7SUFFMUIseUNBQXdCOzs7OztJQUV4QixvQ0FBbUI7O0FBaUR2QixNQUFNLE9BQU8sc0JBQXNCOzs7Ozs7SUE2RS9CLFlBQW1CLEVBQWMsRUFBUyxNQUFpQixFQUFTLFFBQWtCO1FBQW5FLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBUyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQTVFM0MsY0FBUyxHQUFHLElBQUksQ0FBQztRQUNuRCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBQ2pCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFDakIsYUFBUSxHQUFHLElBQUksQ0FBQzs7UUFNaEIsZ0JBQVcsR0FBRyxFQUFFLENBQUM7O1FBRWpCLFNBQUksR0FB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Q0FBb0M7O0lBQ3BDLG1EQUEwQzs7SUFDMUMsa0RBQStDOztJQUVuQyxvQ0FBcUI7O0lBQUUsd0NBQXdCOztJQUFFLDBDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDgtMDUgMTA6MjY6NTBcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMjAtMTEtMTYgMTE6NDM6MzRcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7XHJcbiAgICBDb21wb25lbnQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgZm9yd2FyZFJlZiwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBBZnRlclZpZXdJbml0LFxyXG4gICAgUmVuZGVyZXIyLCBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgU2ltcGxlQ2hhbmdlcywgSG9zdEJpbmRpbmcsIENoYW5nZURldGVjdG9yUmVmLCBIb3N0TGlzdGVuZXJcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IsIEZvcm1Db250cm9sLCBOZ0NvbnRyb2wsIE5nTW9kZWwsIE5HX1ZBTFVFX0FDQ0VTU09SIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBCaWdOdW1iZXIgfSBmcm9tICdiaWdudW1iZXIuanMnO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE51bWJlckZvcm1hdHRlciB7XHJcbiAgICAvKiog5YmN572u56ym5Y+3ICovXHJcbiAgICBwcmVmaXg/OiBzdHJpbmc7XHJcbiAgICAvKiog5ZCO57yAICovXHJcbiAgICBzdWZmaXg/OiBzdHJpbmc7XHJcbiAgICAvKiog5bCP5pWw54K5ICovXHJcbiAgICBkZWNpbWFsU2VwYXJhdG9yPzogc3RyaW5nO1xyXG4gICAgLyoqIOWNg+WIhuS9jeespuWPtyAqL1xyXG4gICAgZ3JvdXBTZXBhcmF0b3I/OiBzdHJpbmc7XHJcbiAgICAvKiog5Y2D5YiG5L2N5YiG57uEICovXHJcbiAgICBncm91cFNpemU/OiBudW1iZXI7XHJcbn1cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtbnVtYmVyLXNwaW5uZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiaW5wdXQtZ3JvdXAgIGYtc3RhdGUtaG92ZXIgZmxleC1yb3dcIlxyXG4gICAgICAgICAgICBbbmdDbGFzc109XCJ7J2Ytc3RhdGUtZGlzYWJsZWQnOiBkaXNhYmxlZCwnZi1zdGF0ZS1yZWFkb25seSc6IHJlYWRvbmx5LCdmLXN0YXRlLWZvY3VzJzogaXNGb2N1cyB9XCJcclxuICAgICAgICAgICAgKG1vdXNlZW50ZXIpPVwib25Nb3VzZUVudGVyKCRldmVudClcIlxyXG4gICAgICAgICAgICAjcG9wb3Zlcj1cImJzLXBvcG92ZXJcIlxyXG4gICAgICAgICAgICBmYXJyaXNQb3BvdmVyXHJcbiAgICAgICAgICAgIFtwb3BvdmVyXT1cInBvcFZhbHVlXCIgW3RyaWdnZXJzXT1cIidob3ZlcidcIiBbcG9wQWN0aXZlXT1cImlzQWN0aXZlVGlwXCJcclxuICAgICAgICAgICAgW3Nob3dBY3Rpb25dPVwiJ3Nob3cyJ1wiICBbY29udGFpbmVyXT1cIidib2R5J1wiPlxyXG4gICAgICAgICAgICA8aW5wdXQgI2lucHV0XHJcbiAgICAgICAgICAgICAgICB0eXBlPVwidGV4dFwiXHJcbiAgICAgICAgICAgICAgICBudW1iZXItb25seVxyXG4gICAgICAgICAgICAgICAgW3ByZWNpc2lvbl09XCJwcmVjaXNpb25cIlxyXG4gICAgICAgICAgICAgICAgYXV0b2NvbXBsZXRlPVwib2ZmXCJcclxuICAgICAgICAgICAgICAgIGNsYXNzPVwiZm9ybS1jb250cm9sIGYtdXRpbHMtZmlsbFwiXHJcbiAgICAgICAgICAgICAgICBbbmdNb2RlbF09XCJ2YWx1ZVwiXHJcbiAgICAgICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwiZGlzYWJsZWR8fHJlYWRvbmx5IHx8ICFlZGl0YWJsZT8nJzpwbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgICAgICBbcmVhZG9ubHldPVwicmVhZG9ubHkgfHwgIWVkaXRhYmxlXCJcclxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUucGFkZGluZy1yaWdodF09XCInNHB4J1wiXHJcbiAgICAgICAgICAgICAgICBbc3R5bGUudGV4dC1hbGlnbl09XCJ0ZXh0QWxpZ25cIlxyXG4gICAgICAgICAgICAgICAgKG5nTW9kZWxDaGFuZ2UpPVwib25Nb2RlbENoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgICAgIChibHVyKT1cIm9uQmx1cihpbnB1dClcIlxyXG4gICAgICAgICAgICAgICAgKGZvY3VzKT1cIm9uRm9jdXMoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAoa2V5ZG93bik9XCJvbktleURvd24oJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwib25DbGljaygkZXZlbnQpXCJcclxuICAgICAgICAgICAgLz5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cImlucHV0LWdyb3VwLWFwcGVuZCBidG4tZ3JvdXAgYnRuLWdyb3VwLW51bWJlciBtLTBcIiAqbmdJZj1cIiFkaXNhYmxlZCAmJiAhcmVhZG9ubHkgJiYgc2hvd0J1dHRvblwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJpY29uIGstaS1hcnJvdy1jaGV2cm9uLXVwIG51bWJlci1hcnJvdy1jaGV2cm9uXCIgW3N0eWxlLmN1cnNvcl09XCJpc0Rpc2FibGVPZkJ0bigndXAnKSA/ICdwb2ludGVyJyA6ICdub3QtYWxsb3dlZCdcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoY2xpY2spPVwidXAoJGV2ZW50KVwiPjwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiaWNvbiBrLWktYXJyb3ctY2hldnJvbi1kb3duIG51bWJlci1hcnJvdy1jaGV2cm9uXCIgW3N0eWxlLmN1cnNvcl09XCJpc0Rpc2FibGVPZkJ0bignZG93bicpID8gJ3BvaW50ZXInIDogJ25vdC1hbGxvd2VkJ1wiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9XCJkb3duKCRldmVudClcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICBgLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vbnVtYmVyLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBOdW1iZXJTcGlubmVyQ29tcG9uZW50KSxcclxuICAgICAgICAgICAgbXVsdGk6IHRydWVcclxuICAgICAgICB9XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBOdW1iZXJTcGlubmVyQ29tcG9uZW50IGltcGxlbWVudHMgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5mLWNtcC1udW1iZXItc3Bpbm5lcicpIGhvc3RDbGFzcyA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBkaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgQElucHV0KCkgcmVhZG9ubHkgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGVkaXRhYmxlID0gdHJ1ZTtcclxuICAgIC8vIGZvcm1hdHRlciDlkowgcGFyc2VyIOW/hemhu+WQjOaXtuWtmOWcqFxyXG4gICAgQElucHV0KCkgZm9ybWF0dGVyOiAodmFsOiBudW1iZXIpID0+IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBwYXJzZXI6ICh2YWw6IHN0cmluZyB8IG51bWJlcikgPT4gbnVtYmVyO1xyXG4gICAgLy8g56m655m95o+Q56S65paH5pysXHJcbiAgICBASW5wdXQoKSBwbGFjZWhvbGRlciA9ICcnO1xyXG4gICAgLy8gdXAgb3IgZG93biDmraXplb9cclxuICAgIEBJbnB1dCgpIHN0ZXAgPSAxO1xyXG4gICAgLy8g5pyA5aSn5YC8XHJcbiAgICBASW5wdXQoKSBtYXg6IGFueTtcclxuICAgIC8vIOacgOWwj+WAvFxyXG4gICAgQElucHV0KCkgbWluOiBhbnk7XHJcblxyXG4gICAgLyoqIOWQr+eUqOWkp+aVsOaUr+aMgSAqL1xyXG4gICAgQElucHV0KCkgYmlnTnVtYmVyID0gZmFsc2U7XHJcblxyXG4gICAgLy8g5piv5ZCm5pi+56S65Yqg5YeP5oyJ6ZKuXHJcbiAgICBASW5wdXQoKSBzaG93QnV0dG9uID0gdHJ1ZTtcclxuICAgIC8vIOaYr+WQpuS9v+eUqOWNg+WIhuWAvFxyXG4gICAgQElucHV0KCkgdXNlVGhvdXNhbmRzID0gdHJ1ZTtcclxuICAgIC8vIOaWh+acrOaWueWQkVxyXG4gICAgQElucHV0KCkgdGV4dEFsaWduID0gJ2xlZnQnO1xyXG4gICAgLy8g6Ieq5Yqo6KGl5YWo5bCP5pWwXHJcbiAgICBASW5wdXQoKSBhdXRvRGVjaW1hbCA9IHRydWU7XHJcbiAgICAvLyDlhYHorrjkuLrnqbpcclxuICAgIEBJbnB1dCgpIGNhbk51bGwgPSBmYWxzZTtcclxuICAgIC8vIOeyvuW6plxyXG4gICAgQElucHV0KCkgcHJlY2lzaW9uID0gMDtcclxuICAgIC8vIOWJjee8gFxyXG4gICAgQElucHV0KCkgcHJlZml4ID0gJyc7XHJcbiAgICAvLyDlkI7nvIBcclxuICAgIEBJbnB1dCgpIHN1ZmZpeCA9ICcnO1xyXG4gICAgLyoqIOWwj+aVsOeCueespuWPtyAqL1xyXG4gICAgQElucHV0KCkgZGVjaW1hbFNlcGFyYXRvciA9ICcuJztcclxuICAgIC8qKiDljYPliIbkvY3nrKblj7cgKi9cclxuICAgIEBJbnB1dCgpIGdyb3VwU2VwYXJhdG9yID0gJywnO1xyXG4gICAgLyoqIOS9v+eUqOWNg+WIhuS9jeaXtu+8jOavj+e7hOaYvuekuueahOWtl+espuaVsCAqL1xyXG4gICAgQElucHV0KCkgZ3JvdXBTaXplID0gMztcclxuXHJcbiAgICBwcml2YXRlIF92YWx1ZSA9ICcnO1xyXG4gICAgQElucHV0KClcclxuICAgIGdldCB2YWx1ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsdWU7XHJcbiAgICB9XHJcbiAgICBzZXQgdmFsdWUodmFsOiBhbnkpIHtcclxuICAgICAgICB0aGlzLl92YWx1ZSA9IHZhbDtcclxuICAgIH1cclxuXHJcbiAgICAvKiog5pi+56S6MOWAvCAqL1xyXG4gICAgQElucHV0KCkgc2hvd1plcm8gPSB0cnVlO1xyXG5cclxuICAgIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgQE91dHB1dCgpIGJsdXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgZm9jdXMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnB1dDogRWxlbWVudFJlZjtcclxuXHJcbiAgICBpc0ZvY3VzID0gZmFsc2U7XHJcbiAgICBwb3BWYWx1ZSA9ICcnO1xyXG4gICAgaXNBY3RpdmVUaXAgPSBmYWxzZTtcclxuICAgIGZvcm1hdE9wdGlvbnM6IE51bWJlckZvcm1hdHRlciA9IHt9O1xyXG4gICAgcHJpdmF0ZSBfcmVhbFZhbHVlID0gbnVsbDtcclxuICAgIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIGNvbW1vblV0aWxzOiBDb21tb25VdGlscztcclxuICAgIHByaXZhdGUgX25nQ29udHJvbDogTmdDb250cm9sO1xyXG4gICAgcHJpdmF0ZSBzaG93dGlwVGltZXIgPSBudWxsO1xyXG5cclxuICAgIF91cGRhdGVPbiA9ICdjaGFuZ2UnO1xyXG4gICAgbG9jYWxlU2VydmljZTogTG9jYWxlU2VydmljZSA9IG51bGw7XHJcbiAgICBvblRvdWNoZWRDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHsgfTtcclxuICAgIG9uQ2hhbmdlQ2FsbGJhY2s6IChfOiBhbnkpID0+IHZvaWQgPSAoKSA9PiB7IH07XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmLCBwdWJsaWMgcmVuZGVyOiBSZW5kZXJlcjIsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmNkUmVmID0gdGhpcy5pbmplY3Rvci5nZXQoQ2hhbmdlRGV0ZWN0b3JSZWYsIG51bGwpO1xyXG5cclxuICAgICAgICB0aGlzLmxvY2FsZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlLCBudWxsKTtcclxuXHJcbiAgICAgICAgdGhpcy5jb21tb25VdGlscyA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbW1vblV0aWxzLCBuZXcgQ29tbW9uVXRpbHMoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mb3JtYXRPcHRpb25zID0gdGhpcy5idWlsZEZvcm1hdE9wdGlvbnMoKTtcclxuICAgICAgICB0aGlzLl9uZ0NvbnRyb2wgPSB0aGlzLmluamVjdG9yLmdldChOZ0NvbnRyb2wsIG51bGwpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5sb2NhbGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGRlZmF1bHRQbGFjZUhvbGRlciA9IHRoaXMubG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnbnVtYmVyU3Bpbm5lci5wbGFjZWhvbGRlcicpIHx8ICfor7fovpPlhaXmlbDlrZcnO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMucGxhY2Vob2xkZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGxhY2Vob2xkZXIgPSBkZWZhdWx0UGxhY2VIb2xkZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9uZ0NvbnRyb2wgJiYgdGhpcy5fbmdDb250cm9sLmNvbnRyb2wpIHtcclxuICAgICAgICAgICAgdGhpcy5fdXBkYXRlT24gPSAgdGhpcy5fbmdDb250cm9sLmNvbnRyb2wudXBkYXRlT247XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmxpc3RlbklucHV0UGFzdGVFdmVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMudmFsdWUgJiYgIWNoYW5nZXMudmFsdWUuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3JlYWxWYWx1ZSA9IHRoaXMuZ2V0UmVhbFZhbHVlKGNoYW5nZXMudmFsdWUuY3VycmVudFZhbHVlKTtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuX3JlYWxWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5zaG93WmVybyAmJiAhY2hhbmdlcy5zaG93WmVyby5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuX3JlYWxWYWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5wcmVjaXNpb24gJiYgIWNoYW5nZXMucHJlY2lzaW9uLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICB0aGlzLm9uT3B0aW9uc0NoYW5nZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnVzZVRob3VzYW5kcyAmJiAhY2hhbmdlcy51c2VUaG91c2FuZHMuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25PcHRpb25zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMucHJlZml4ICYmICFjaGFuZ2VzLnByZWZpeC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5vbk9wdGlvbnNDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChjaGFuZ2VzLnN1ZmZpeCAmJiAhY2hhbmdlcy5zdWZmaXguaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMub25PcHRpb25zQ2hhbmdlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uT3B0aW9uc0NoYW5nZWQoKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtYXRPcHRpb25zID0gdGhpcy5idWlsZEZvcm1hdE9wdGlvbnMoKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5mb3JtYXQodGhpcy5fcmVhbFZhbHVlKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHt9XHJcblxyXG4gICAgLy8g5pSv5oyB57KY6LS05bim5qC85byP55qE5pWw5o2uXHJcbiAgICBsaXN0ZW5JbnB1dFBhc3RlRXZlbnQoKSB7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Bhc3RlJywgZXZlbnQgPT4ge1xyXG4gICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICBjb25zdCBjbGlwYm9hcmREYXRhID0gZXZlbnQuY2xpcGJvYXJkRGF0YSB8fCB3aW5kb3dbJ2NsaXBib2FyZERhdGEnXTtcclxuICAgICAgICAgICAgY29uc3QgcGFzdGVWYWx1ZSA9IGNsaXBib2FyZERhdGEuZ2V0RGF0YSgndGV4dCcpO1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmNsZWFuTnVtU3RyaW5nKHBhc3RlVmFsdWUpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSh2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50LnRhcmdldDtcclxuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSAodGFyZ2V0IGFzIGFueSkuc2VsZWN0aW9uU3RhcnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGVuZCA9ICh0YXJnZXQgYXMgYW55KS5zZWxlY3Rpb25FbmQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KHZhbCkpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC52YWx1ZSA9ICcnO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0LnZhbHVlID0gdGFyZ2V0LnZhbHVlLnNsaWNlKDAsIHN0YXJ0KSArIHZhbCArICB0YXJnZXQudmFsdWUuc2xpY2UoZW5kKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZU9uID09PSAnY2hhbmdlJykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVhbFZhbHVlID0gdGhpcy5nZXRSZWFsVmFsdWUodGFyZ2V0LnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLl9yZWFsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbENoYW5nZWQodGhpcy5fcmVhbFZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkJsdXIoJGV2ZW50LCB0eXBlOiBzdHJpbmcgPSAnJykge1xyXG4gICAgICAgIGlmICh0aGlzLnJlYWRvbmx5IHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZU9uID09PSAnYmx1cicpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5jbGVhbk51bVN0cmluZygkZXZlbnQudmFsdWUpO1xyXG4gICAgICAgICAgICB0aGlzLl9yZWFsVmFsdWUgPSB0aGlzLmdldFJlYWxWYWx1ZSh2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0KHRoaXMuX3JlYWxWYWx1ZSk7XHJcbiAgICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICB0aGlzLmlzRm9jdXMgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UodGhpcy5fcmVhbFZhbHVlLCAnYmx1cicpO1xyXG4gICAgICAgIHRoaXMuYmx1ci5lbWl0KHsgZXZlbnQ6ICRldmVudCwgZm9ybWF0dGVkOiB0aGlzLnZhbHVlLCB2YWx1ZTogdGhpcy5fcmVhbFZhbHVlLCBpbnN0YW5jZTogdGhpcyB9KTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKCRldmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkZvY3VzKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLnJlYWRvbmx5IHx8IHRoaXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5pc0ZvY3VzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmlzRW1wdHkodGhpcy5fcmVhbFZhbHVlKSA/ICcnIDogICgoIXRoaXMuc2hvd1plcm8gJiYgdGhpcy5fcmVhbFZhbHVlID09ICcwJykgPyAgJycgOiB0aGlzLl9yZWFsVmFsdWUgKTtcclxuICAgICAgICB0aGlzLmlzRm9jdXMgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuZm9jdXMuZW1pdCh7IGV2ZW50OiAkZXZlbnQsIGZvcm1hdHRlZDogdGhpcy52YWx1ZSwgdmFsdWU6IHRoaXMuX3JlYWxWYWx1ZSwgaW5zdGFuY2U6IHRoaXMgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VFbnRlcigkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICB0aGlzLnBvcFZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5pc0FjdGl2ZVRpcCA9IHRoaXMuaXNTaG93UG9wb3ZlcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbktleURvd24oZTogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgIGlmIChlLmtleSA9PT0gJ0Fycm93RG93bicpIHtcclxuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICB0aGlzLmRvd24oZSk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZS5rZXkgPT09ICdBcnJvd1VwJykge1xyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgIHRoaXMudXAoZSk7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgX21vZGVsQ2hhbmdlZChyZWFsVmFsKSB7XHJcbiAgICAgICAgdGhpcy5fcmVhbFZhbHVlID0gcmVhbFZhbDtcclxuICAgICAgICB0aGlzLm9uQ2hhbmdlQ2FsbGJhY2socmVhbFZhbCk7XHJcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjaygpO1xyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdChyZWFsVmFsKTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vZGVsQ2hhbmdlKHJlYWxWYWw6IGFueSwgdXBkYXRlT24gPSAnY2hhbmdlJykge1xyXG4gICAgICAgIC8vIHRoaXMuX3JlYWxWYWx1ZSA9IHRoaXMuZ2V0UmVhbFZhbHVlKHZhbCk7XHJcbiAgICAgICAgbGV0IF9yZWFsVmFsdWUgPSByZWFsVmFsO1xyXG4gICAgICAgIGlmICh1cGRhdGVPbiA9PT0gJ2NoYW5nZScpIHtcclxuICAgICAgICAgICAgY29uc3QgbnVtID0gdGhpcy5jbGVhbk51bVN0cmluZygnJyArIHJlYWxWYWwpO1xyXG4gICAgICAgICAgICBfcmVhbFZhbHVlID0gdGhpcy5nZXRSZWFsVmFsdWUobnVtKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5pc0FjdGl2ZVRpcCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMucG9wVmFsdWUgPSB0aGlzLmZvcm1hdChfcmVhbFZhbHVlKTtcclxuICAgICAgICBpZiAodGhpcy5fdXBkYXRlT24gPT09IHVwZGF0ZU9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX21vZGVsQ2hhbmdlZChfcmVhbFZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdXAoZTogRXZlbnQsIHR5cGUgPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5jb21wdXRlKCd1cCcpO1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZG93bihlOiBFdmVudCwgdHlwZSA9IG51bGwpIHtcclxuICAgICAgICB0aGlzLmNvbXB1dGUoJ2Rvd24nKTtcclxuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbXB1dGUodHllID0gJ3VwJykge1xyXG4gICAgICAgIGlmICh0aGlzLmlzRGlzYWJsZU9mQnRuKHR5ZSkpIHtcclxuICAgICAgICAgICAgbGV0IF9yZXN1bHRWYWx1ZTtcclxuICAgICAgICAgICAgY29uc3QgcmVhbEJpZ051bSA9IG5ldyBCaWdOdW1iZXIodGhpcy5fcmVhbFZhbHVlIHx8IDApO1xyXG4gICAgICAgICAgICBpZiAodHllID09PSAndXAnKSB7XHJcbiAgICAgICAgICAgICAgICBfcmVzdWx0VmFsdWUgPSByZWFsQmlnTnVtLnBsdXMoTnVtYmVyKHRoaXMuc3RlcCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgX3Jlc3VsdFZhbHVlID0gcmVhbEJpZ051bS5taW51cyhOdW1iZXIodGhpcy5zdGVwKSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBfcmVzdWx0VmFsdWUudG9GaXhlZCgpO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuZm9ybWF0KHMpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pbnB1dC5uYXRpdmVFbGVtZW50LnZhbHVlID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgdGhpcy5fbW9kZWxDaGFuZ2VkKHRoaXMuZ2V0UmVhbFZhbHVlKF9yZXN1bHRWYWx1ZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc0Rpc2FibGVPZkJ0bih0eXBlOiBzdHJpbmcsIHZhbHVlPzogYW55KSB7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9yZWFsVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhbHVlID0gbmV3IEJpZ051bWJlcih2YWx1ZSk7XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAndXAnICYmICEobmV3IEJpZ051bWJlcih0aGlzLm1heCkpLmlzTmFOKCkgJiYgdmFsdWUuZ3RlKHRoaXMubWF4KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlID09PSAnZG93bicgJiYgIShuZXcgQmlnTnVtYmVyKHRoaXMubWluKSkuaXNOYU4oKSAmJiB2YWx1ZS5sdGUodGhpcy5taW4pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcblxyXG4gICAgaXNTaG93UG9wb3ZlcigpIHtcclxuICAgICAgICBjb25zdCAgd2lkdGggPSB0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY29uc3QgeyBwYWRkaW5nTGVmdCwgcGFkZGluZ1JpZ2h0IH0gPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmlucHV0Lm5hdGl2ZUVsZW1lbnQpO1xyXG5cclxuICAgICAgICBjb25zdCBfd2lkdGggPSB3aWR0aCAtIChOdW1iZXIocGFkZGluZ0xlZnQucmVwbGFjZSgncHgnLCAnJykpIHx8IDApIC0gKE51bWJlcihwYWRkaW5nUmlnaHQucmVwbGFjZSgncHgnLCAnJykpIHx8IDApO1xyXG5cclxuICAgICAgICBjb25zdCB0eHRXaWR0aCA9IHRoaXMuY29tbW9uVXRpbHMuZ2V0VGV4dFdpZHRoKHRoaXMudmFsdWUsIHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHRoaXMuaW5wdXQubmF0aXZlRWxlbWVudCkuZm9udCk7XHJcbiAgICAgICAgaWYgKF93aWR0aCAmJiBfd2lkdGggPCB0eHRXaWR0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIF9nZXRQcmVjaXNpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIE51bWJlcih0aGlzLnByZWNpc2lvbiB8fCAwKTtcclxuICAgIH1cclxuXHJcbiAgICB0b0ZpeGVkKG46IEJpZ051bWJlciB8IG51bWJlcikge1xyXG4gICAgICAgIGxldCBfbiA9IG47XHJcbiAgICAgICAgaWYgKCFCaWdOdW1iZXIuaXNCaWdOdW1iZXIobikpIHtcclxuICAgICAgICAgICAgX24gPSBuZXcgQmlnTnVtYmVyKG4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucHJlY2lzaW9uICE9PSBudWxsICYmIHRoaXMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG4udG9GaXhlZCh0aGlzLl9nZXRQcmVjaXNpb24oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBuLnRvRml4ZWQoKTtcclxuICAgIH1cclxuXHJcbiAgICBfZ2V0UmVhbFZhbHVlKF9uOiBCaWdOdW1iZXIpIHtcclxuICAgICAgICBjb25zdCBuID0gdGhpcy50b0ZpeGVkKF9uKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5iaWdOdW1iZXIgPyBuIDogTnVtYmVyKG4pO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJlYWxWYWx1ZSh2YWw6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLnBhcnNlcikge1xyXG4gICAgICAgICAgICBpZiAoIWlzTmFOKE51bWJlcih2YWwpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBhcnNlcih2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgX24gPSB0aGlzLnZhbGlkSW50ZXJ2YWwobmV3IEJpZ051bWJlcih2YWwpKTtcclxuICAgICAgICBpZiAoX24uaXNOYU4oKSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuY2FuTnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtaW5CaWdOdW0gPSBuZXcgQmlnTnVtYmVyKCcnICsgdGhpcy5taW4pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbWF4QmlnTnVtID0gbmV3IEJpZ051bWJlcignJyArIHRoaXMubWF4KTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIW1pbkJpZ051bS5pc05hTigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX24gPSBtaW5CaWdOdW07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFtYXhCaWdOdW0uaXNOYU4oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9uID0gbWF4QmlnTnVtO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gaWYgKHRoaXMuY2FuTnVsbCB8fCBtaW5CaWdOdW0uaXNOYU4oKSkge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIC8vICAgICBfbiA9IG1pbkJpZ051bTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2dldFJlYWxWYWx1ZShfbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZEZvcm1hdE9wdGlvbnMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcHJlZml4OiB0aGlzLnByZWZpeCxcclxuICAgICAgICAgICAgc3VmZml4OiB0aGlzLnN1ZmZpeCxcclxuICAgICAgICAgICAgZGVjaW1hbFNlcGFyYXRvcjogdGhpcy5kZWNpbWFsU2VwYXJhdG9yLFxyXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogdGhpcy51c2VUaG91c2FuZHMgPyB0aGlzLmdyb3VwU2VwYXJhdG9yIDogJycsXHJcbiAgICAgICAgICAgIGdyb3VwU2l6ZTogdGhpcy5ncm91cFNpemVcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGlzRW1wdHkodmFsOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gaXNOYU4odmFsKSB8fCB2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSAnJztcclxuICAgIH1cclxuXHJcbiAgICB2YWxpZEludGVydmFsKGJuOiBCaWdOdW1iZXIsIGVtaXQgPSB0cnVlKSB7XHJcbiAgICAgICAgbGV0IF9iblZhbCA9IGJuO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNFbXB0eSh0aGlzLm1heCkpIHtcclxuICAgICAgICAgICAgY29uc3QgX21heEJpZ051bSA9IG5ldyBCaWdOdW1iZXIoJycgKyB0aGlzLm1heCk7XHJcbiAgICAgICAgICAgIGlmIChibi5ndChfbWF4QmlnTnVtKSApIHtcclxuICAgICAgICAgICAgICAgIF9iblZhbCA9IF9tYXhCaWdOdW07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfcmVhbFZhbHVlID0gdGhpcy5fZ2V0UmVhbFZhbHVlKF9tYXhCaWdOdW0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbENoYW5nZWQoX3JlYWxWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5pc0VtcHR5KHRoaXMubWluKSkge1xyXG4gICAgICAgICAgICBjb25zdCBfbWluQmlnTnVtID0gbmV3IEJpZ051bWJlcignJyArIHRoaXMubWluKTtcclxuICAgICAgICAgICAgaWYgKGJuLmx0KF9taW5CaWdOdW0pKSB7XHJcbiAgICAgICAgICAgICAgICBfYm5WYWwgPSBfbWluQmlnTnVtO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX3JlYWxWYWx1ZSA9IHRoaXMuX2dldFJlYWxWYWx1ZShfbWluQmlnTnVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxDaGFuZ2VkKF9yZWFsVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gX2JuVmFsO1xyXG4gICAgfVxyXG5cclxuICAgIGZvcm1hdCh2YWw6IGFueSwgZW1pdCA9IHRydWUpIHtcclxuICAgICAgICB2YWwgPSB0aGlzLmNsZWFuTnVtU3RyaW5nKHZhbCk7XHJcbiAgICAgICAgY29uc3QgYmlnVmFsID0gbmV3IEJpZ051bWJlcih2YWwpO1xyXG4gICAgICAgIGxldCBfYmdOdW0gPSBiaWdWYWw7XHJcbiAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgX2JnTnVtID0gdGhpcy52YWxpZEludGVydmFsKGJpZ1ZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoX2JnTnVtLnZhbHVlT2YoKSA9PSAnMCcgJiYgIXRoaXMuc2hvd1plcm8pIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY2FuTnVsbCAmJiBiaWdWYWwuaXNOYU4oKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKF9iZ051bS5pc05hTigpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmZvcm1hdHRlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXR0ZXIoX2JnTnVtLnRvTnVtYmVyKCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICBpZiAoIU9iamVjdC5rZXlzKHRoaXMuZm9ybWF0T3B0aW9ucykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1hdE9wdGlvbnMgPSB0aGlzLmJ1aWxkRm9ybWF0T3B0aW9ucygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fdG9Gb3JtYXQoX2JnTnVtLCB0aGlzLmZvcm1hdE9wdGlvbnMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBfdG9Gb3JtYXQoX2JnTnVtOiBCaWdOdW1iZXIsIGZtdDogTnVtYmVyRm9ybWF0dGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucHJlY2lzaW9uICE9PSBudWxsICYmIHRoaXMucHJlY2lzaW9uICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9iZ051bS50b0Zvcm1hdCh0aGlzLl9nZXRQcmVjaXNpb24oKSwgZm10KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gX2JnTnVtLnRvRm9ybWF0KGZtdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFuTnVtU3RyaW5nKHZhbDogYW55KSB7XHJcbiAgICAgICAgdmFsID0gKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09ICcnKSA/ICcnIDogU3RyaW5nKHZhbCk7XHJcbiAgICAgICAgdmFsID0gdmFsLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLnByZWZpeCwgJ2cnKSwgJycpXHJcbiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UobmV3IFJlZ0V4cCh0aGlzLnN1ZmZpeCwgJ2cnKSwgJycpLnJlcGxhY2UoL1xcLC9nLCAnJyk7XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBTZXBhcmF0b3IgJiYgdGhpcy5ncm91cFNlcGFyYXRvciAhPT0gJywnKSB7XHJcbiAgICAgICAgICAgIHZhbCA9IHZhbC5yZXBsYWNlKG5ldyBSZWdFeHAoYFxcXFwke3RoaXMuZ3JvdXBTZXBhcmF0b3J9YCwgJ2cnKSwgJycpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGVjaW1hbFNlcGFyYXRvciAmJiB0aGlzLmRlY2ltYWxTZXBhcmF0b3IgIT09ICcuJykge1xyXG4gICAgICAgICAgICB2YWwgPSB2YWwucmVwbGFjZShuZXcgUmVnRXhwKGBcXFxcJHt0aGlzLmRlY2ltYWxTZXBhcmF0b3J9YCwgJ2cnKSwgJy4nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVWYWx1ZSh2YWwpIHtcclxuICAgICAgICB2YWwgPSB0aGlzLmNsZWFuTnVtU3RyaW5nKHZhbCk7XHJcbiAgICAgICAgdGhpcy5fcmVhbFZhbHVlID0gdGhpcy5nZXRSZWFsVmFsdWUodmFsKTtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5mb3JtYXQodGhpcy5fcmVhbFZhbHVlKTtcclxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQudmFsdWUgPSB0aGlzLnZhbHVlO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwcml2YXRlIHVwZGF0ZUNvbnRyb2xWYWx1ZSgpIHtcclxuICAgICAgICBsZXQgX3ZhbCA9IHRoaXMuY2xlYW5OdW1TdHJpbmcodGhpcy52YWx1ZSk7XHJcbiAgICAgICAgaWYgKHRoaXMucGFyc2VyKSB7XHJcbiAgICAgICAgICAgIF92YWwgPSB0aGlzLnBhcnNlcih0aGlzLnZhbHVlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRW1wdHkodGhpcy5fcmVhbFZhbHVlKSAmJiB0aGlzLmlzRW1wdHkoX3ZhbCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcnYgPSBuZXcgQmlnTnVtYmVyKHRoaXMuX3JlYWxWYWx1ZSk7XHJcbiAgICAgICAgY29uc3QgY3YgPSBuZXcgQmlnTnVtYmVyKF92YWwpOyAvLyBkaXNwbGF5IHZhbHVlXHJcblxyXG4gICAgICAgIGlmIChydi5pc05hTigpICYmIGN2LmlzTmFOKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gaWYgKCFydi5lcShjdikpIHtcclxuICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9uZ0NvbnRyb2wgKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZvcm1ncm91cCA9ICB0aGlzLl9uZ0NvbnRyb2xbJ2Zvcm1EaXJlY3RpdmUnXTtcclxuICAgICAgICAgICAgaWYgKGZvcm1ncm91cCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGN0cmwgPSBmb3JtZ3JvdXAuY29udHJvbC5nZXQodGhpcy5fbmdDb250cm9sLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghY3RybCAmJiBmb3JtZ3JvdXAuY29udHJvbC5jb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgICAgIGN0cmwgPSBmb3JtZ3JvdXAuY29udHJvbC5jb250cm9sc1t0aGlzLl9uZ0NvbnRyb2wubmFtZV07XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGN0cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3RybC52YWx1ZSAhPT0gdGhpcy5fcmVhbFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuc2V0VmFsdWUodGhpcy5fcmVhbFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWw6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuX3JlYWxWYWx1ZSA9IHZhbDtcclxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5mb3JtYXQodGhpcy5fcmVhbFZhbHVlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIHRoaXMudXBkYXRlQ29udHJvbFZhbHVlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXREaXNhYmxlZFN0YXRlPyhpc0Rpc2FibGVkOiBib29sZWFuKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XHJcbiAgICB9XHJcbn1cclxuIl19