/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BigNumber } from 'bignumber.js';
import { Component, forwardRef, Input, Output, ViewChild, ElementRef, EventEmitter } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NumberSpinnerComponent } from './number-spinner.component';
import { PopoverDirective } from '@farris/ui-popover';
export class NumberRangeComponent extends NumberSpinnerComponent {
    constructor() {
        super(...arguments);
        this.beginPlaceHolder = '';
        this.endPlaceHolder = '';
        this.separator = '~';
        this.__value = '';
        this.beginValueChange = new EventEmitter();
        this.endValueChange = new EventEmitter();
        /* 开始数字展示值 */
        this.prevValue = '';
        /* 结束数字展示值 */
        this.nextValue = '';
        this._beginValue = '';
        this._endValue = '';
        this.focusState = {
            isFocus: false,
            target: '' // begin | end
        };
        //#endregion
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set beginValue(value) {
        this.prevValue = this.format(value);
        // 开始真实数值
        this._beginValue = this.isEmpty(value) ? '' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endValue(value) {
        this.nextValue = this.format(value);
        // 结束真实数值
        this._endValue = this.isEmpty(value) ? '' : value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.__value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.__value) {
            this.__value = v === '~' ? '' : v;
        }
    }
    /**
     * @return {?}
     */
    get preNumValue() {
        /** @type {?} */
        const v = this.getRealValue(this.parser ? this.prevValue : this._beginValue);
        if (this.canNull && this.isEmpty(v)) {
            return '';
        }
        else {
            return v || 0;
        }
    }
    /**
     * @return {?}
     */
    get nextNumValue() {
        /** @type {?} */
        const v = this.getRealValue(this.parser ? this.nextValue : this._endValue);
        if (this.canNull && this.isEmpty(v)) {
            return '';
        }
        else {
            return v || 0;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.showButton = false;
        this.initPlaceHolderInfo();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.documentClick = this.render.listen(document, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.render.setStyle(this.prevWrapper.nativeElement, 'flex', 1);
            this.render.setStyle(this.nextWrapper.nativeElement, 'flex', 1);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.value && !changes.value.isFirstChange()) {
            this.setValue(changes.value.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.documentClick) {
            this.documentClick();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initPlaceHolderInfo() {
        if (!this.beginPlaceHolder) {
            this.beginPlaceHolder = this.localeService.getValue('numberSpinner.range.begin') || this.placeholder;
        }
        if (!this.endPlaceHolder) {
            this.endPlaceHolder = this.localeService.getValue('numberSpinner.range.end') || this.placeholder;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getRangeValue() {
        return this.preNumValue + this.separator + this.nextNumValue;
    }
    /**
     * @private
     * @return {?}
     */
    getEndValue() {
        return this.getRealValue(this.nextValue);
    }
    /**
     * @private
     * @return {?}
     */
    getBeginValue() {
        return this.getRealValue(this.prevValue);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getRealValue(val) {
        if (this.parser) {
            return this.parser(val);
        }
        /** @type {?} */
        let _n = this.validInterval(new BigNumber(val), false);
        if (_n.isNaN()) {
            /** @type {?} */
            const minBigNum = new BigNumber('' + this.min);
            if (this.canNull || minBigNum.isNaN()) {
                return null;
            }
            else {
                _n = minBigNum;
            }
        }
        return (/** @type {?} */ (this._getRealValue(_n)));
    }
    /**
     * @param {?} val
     * @param {?=} type
     * @return {?}
     */
    onModelChange(val, type) {
        if (type === 'begin') {
            this._beginValue = val;
        }
        else if (type === 'end') {
            this._endValue = val;
        }
        this.value = this.getRangeValue();
        this.onChangeCallback(this.value);
        this.onTouchedCallback();
        this.valueChange.emit(this.value);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    onBlur(e, type) {
        if (!this.readonly && !this.disabled) {
            /** @type {?} */
            const tmpValue = e.value;
            this.focusState = { isFocus: false, target: type };
            if (type === 'begin') {
                /** @type {?} */
                const nextVal = this.getEndValue();
                /** @type {?} */
                const minValue = this.isEmpty(tmpValue)
                    ? ''
                    : this.isEmpty(nextVal)
                        ? tmpValue
                        : BigNumber.min(tmpValue, nextVal).toFixed();
                // this.prevValue = this.format(minValue);
                this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();
                // this.beginValue = this.getRealValue(this.prevValue);
                this.inputPrev.nativeElement.value = this.prevValue;
                this.onModelChange(this._beginValue, type);
            }
            else {
                /** @type {?} */
                const beginVal = this.getBeginValue();
                /** @type {?} */
                const maxValue = this.isEmpty(tmpValue)
                    ? ''
                    : this.isEmpty(beginVal)
                        ? tmpValue
                        : BigNumber.max(tmpValue, beginVal).toFixed();
                // this.nextValue = this.format(maxValue);
                // this.endValue = this.getRealValue(this.nextValue);
                this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();
                this.inputNext.nativeElement.value = this.nextValue;
                this.onModelChange(this._endValue, type);
            }
        }
        this.valueChange.emit(this.value);
        if (type === 'begin') {
            this.beginValueChange.emit(this.preNumValue);
        }
        else {
            this.endValueChange.emit(this.nextNumValue);
        }
        this.blur.emit();
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    onFocus(type) {
        if (!this.readonly && !this.disabled) {
            this.focusState = { isFocus: true, target: type };
            if (type === 'begin') {
                this.inputPrev.nativeElement.value = this._beginValue;
                this.inputPrev.nativeElement.setSelectionRange(0, this._beginValue.length);
                this.expendWidth('begin', 3);
            }
            else {
                this.inputNext.nativeElement.value = this._endValue;
                this.inputNext.nativeElement.setSelectionRange(0, this._endValue.length);
                this.expendWidth('end', 3);
            }
        }
        this.focus.emit(type);
    }
    /**
     * @param {?} which
     * @param {?} num
     * @return {?}
     */
    expendWidth(which, num) {
        /** @type {?} */
        let target;
        /** @type {?} */
        let other;
        if (which === 'begin') {
            target = this.prevWrapper.nativeElement;
            other = this.nextWrapper.nativeElement;
        }
        else {
            target = this.nextWrapper.nativeElement;
            other = this.prevWrapper.nativeElement;
        }
        const { width } = target.getBoundingClientRect();
        if (width < 150) {
            this.render.setStyle(target, 'flex', num);
            this.render.setStyle(other, 'flex', 1);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.isActiveTip = this.isShowPopover();
        if (this.nextValue && this.prevValue) {
            this.popValue = this.prevValue + '~' + this.nextValue;
        }
        else {
            this.popValue = '';
        }
    }
    /**
     * @return {?}
     */
    isShowPopover() {
        const { width } = this.el.nativeElement.getBoundingClientRect();
        if (width && width < 200) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    onKeyDownRange($event, typ) {
        if ($event.key === 'ArrowDown') {
            $event.preventDefault();
            this.down($event, typ);
        }
        if ($event.key === 'ArrowUp') {
            $event.preventDefault();
            this.up($event, typ);
        }
        $event.stopPropagation();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this.setValue(val);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        if (typeof val === 'string') {
            /** @type {?} */
            const valArr = val.split(this.separator);
            this._beginValue = valArr[0] ? valArr[0] : '';
            this._endValue = valArr[1] ? valArr[1] : '';
        }
        else {
            this._beginValue = '';
            this._beginValue = '';
        }
        this.prevValue = this.format(this._beginValue);
        this.nextValue = this.format(this._endValue);
    }
    //#region 上下操作按钮 或 上下方向键
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    up(e, type) {
        e.stopPropagation();
        this._compute(type, 'up', ((/** @type {?} */ (e.target))).value);
    }
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    down(e, type) {
        e.stopPropagation();
        this._compute(type, 'down', ((/** @type {?} */ (e.target))).value);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} dir
     * @param {?} tagVal
     * @return {?}
     */
    _compute(type, dir, tagVal) {
        /** @type {?} */
        const m = dir === 'up' ? 'plus' : 'minus';
        // if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {
        //     const bv = tagVal || 0;
        //     const ev = this.getRealValue(this.nextValue);
        //     const r = new BigNumber(bv)[m](Number(this.step));
        //     let v = r.toFixed();
        //     const minValue = BigNumber.min(v, ev);
        //     if (!minValue.eq(v) && !this.isEmpty(ev)) {
        //         v = ev;
        //     }
        //     this._beginValue = v;
        //     // this.prevValue = this.format(v);
        //     this.inputPrev.nativeElement.value = v;
        //     this.onModelChange(v, type);
        //     this.beginValueChange.emit(v);
        // } else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {
        //     const bv = this.getRealValue(this.prevValue);
        //     const ev = tagVal || 0;
        //     const r = new BigNumber(ev)[m](Number(this.step));
        //     let v = r.toFixed();
        //     const maxValue = BigNumber.max(bv, v);
        //     if (!maxValue.eq(v) && !this.isEmpty(bv)) {
        //         v = bv;
        //     }
        //     this._endValue = v;
        //     // this.nextValue = this.format(v);
        //     this.inputNext.nativeElement.value = v;
        //     this.onModelChange(v, type);
        //     this.endValueChange.emit(v);
        // }
        if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {
            /** @type {?} */
            const tmpValue = this.inputPrev.nativeElement.value;
            /** @type {?} */
            const nextVal = this.getEndValue();
            /** @type {?} */
            const bv = this.cleanNumString(tmpValue) || 0;
            /** @type {?} */
            const r = new BigNumber(bv)[m](Number(this.step));
            /** @type {?} */
            let v = r.toFixed();
            /** @type {?} */
            const minValue = this.isEmpty(v)
                ? ''
                : this.isEmpty(nextVal)
                    ? v
                    : BigNumber.min(v, nextVal).toFixed();
            this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();
            this.inputPrev.nativeElement.value = this.prevValue;
            this.onModelChange(this._beginValue, type);
            this.beginValueChange.emit(this._beginValue);
        }
        else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {
            /** @type {?} */
            const tmpValue = this.inputNext.nativeElement.value;
            /** @type {?} */
            const beginVal = this.getBeginValue();
            /** @type {?} */
            const bv = this.cleanNumString(tmpValue) || 0;
            /** @type {?} */
            const r = new BigNumber(bv)[m](Number(this.step));
            /** @type {?} */
            let v = r.toFixed();
            /** @type {?} */
            const maxValue = this.isEmpty(v)
                ? ''
                : this.isEmpty(beginVal)
                    ? v
                    : BigNumber.max(v, beginVal).toFixed();
            this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();
            this.inputNext.nativeElement.value = this.nextValue;
            this.onModelChange(this._endValue, type);
            this.endValueChange.emit(this._endValue);
        }
        this.valueChange.emit(this.value);
        this.expendWidth(type, 3);
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-number-range',
                template: "<div\r\n    class=\"input-group number-range f-cmp-number-spinner\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly\r\n    }\"\r\n    (click)=\"$event.stopPropagation()\" (mouseenter)=\"onMouseEnter($event)\"\r\n>\r\n    <div class=\"form-control input-container\"\r\n        #popover=\"bs-popover\"\r\n        farrisPopover\r\n        [popover]=\"popValue\"\r\n        [triggers]=\"'hover'\"\r\n        [popActive]=\"isActiveTip\"\r\n        [showAction]=\"'show2'\"\r\n        [container]=\"'body'\"\r\n    >\r\n        <div class=\"sub-input-group\" #prevWrapper>\r\n            <input\r\n                type=\"text\"\r\n                number-only\r\n                [precision]=\"precision\"\r\n                autocomplete=\"off\"\r\n                class=\"sub-input form-control f-state-focus f-state-hover\"\r\n                [(ngModel)]=\"prevValue\"\r\n                #inputPrev\r\n                (blur)=\"onBlur(inputPrev, 'begin')\"\r\n                (focus)=\"onFocus('begin')\"\r\n                (ngModelChange)=\"onModelChange($event, 'begin')\"\r\n                [placeholder]=\"disabled || readonly ?'':beginPlaceHolder\"\r\n                [readOnly]=\"disabled || readonly ? 'readonly' : ''\"\r\n                [style.text-align]=\"textAlign\"\r\n                (keydown)=\"onKeyDownRange($event, 'begin')\"\r\n                (click)=\"onClick($event)\"\r\n            />\r\n            <div class=\"input-group-append btn-group btn-group-number sub-btn-group\" *ngIf=\"!readonly && !disabled && showButton\">\r\n                <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('up', prevValue) ? 'pointer' : 'not-allowed'\"\r\n                    (click)=\"up($event, 'begin')\"></span>\r\n                <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('down', prevValue) ? 'pointer' : 'not-allowed'\"\r\n                    (click)=\"down($event, 'begin')\"></span>\r\n            </div>\r\n        </div>\r\n        <span class=\"spliter\">~</span>\r\n        <div class=\"sub-input-group\" #nextWrapper>\r\n            <input\r\n                type=\"text\"\r\n                number-only\r\n                [precision]=\"precision\"\r\n                autocomplete=\"off\"\r\n                class=\"sub-input form-control f-state-focus f-state-hover\"\r\n                [(ngModel)]=\"nextValue\"\r\n                #inputNext\r\n                (blur)=\"onBlur(inputNext, 'end')\"\r\n                (focus)=\"onFocus('end')\"\r\n                (ngModelChange)=\"onModelChange($event, 'end')\"\r\n                [placeholder]=\"disabled || readonly ?'':endPlaceHolder\"\r\n                [readOnly]=\"disabled || readonly ? 'readonly' : ''\"\r\n                [style.text-align]=\"textAlign\"\r\n                (keydown)=\"onKeyDownRange($event, 'end')\"\r\n                (click)=\"onClick($event)\"\r\n            />\r\n            <div class=\"input-group-append btn-group btn-group-number sub-btn-group\" *ngIf=\"!readonly && !disabled  && showButton\"[style.text-align]=\"textAlign\" style=\"border-right:0\">\r\n                    <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\"  [style.cursor]=\"isDisableOfBtn('up', nextValue) ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"up($event, 'end')\"></span>\r\n                    <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\"\r\n                        [style.cursor]=\"isDisableOfBtn('down', nextValue) ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"down($event, 'end')\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NumberRangeComponent)),
                        multi: true
                    }
                ],
                styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff;border-left:1px solid #d9d9d9;width:1.50003rem}.input-group .btn-group-number .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1;height:50%;text-align:center}.input-group .btn-group-number .number-arrow-chevron:active{background-color:#e6e9f0}.input-group .btn-group-number .number-arrow-chevron:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
            }] }
];
NumberRangeComponent.propDecorators = {
    beginPlaceHolder: [{ type: Input }],
    endPlaceHolder: [{ type: Input }],
    inputPrev: [{ type: ViewChild, args: ['inputPrev',] }],
    inputNext: [{ type: ViewChild, args: ['inputNext',] }],
    prevWrapper: [{ type: ViewChild, args: ['prevWrapper',] }],
    nextWrapper: [{ type: ViewChild, args: ['nextWrapper',] }],
    popover: [{ type: ViewChild, args: ['popover',] }],
    separator: [{ type: Input }],
    beginValue: [{ type: Input }],
    endValue: [{ type: Input }],
    value: [{ type: Input }],
    beginValueChange: [{ type: Output }],
    endValueChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    NumberRangeComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    NumberRangeComponent.prototype.endPlaceHolder;
    /** @type {?} */
    NumberRangeComponent.prototype.inputPrev;
    /** @type {?} */
    NumberRangeComponent.prototype.inputNext;
    /** @type {?} */
    NumberRangeComponent.prototype.prevWrapper;
    /** @type {?} */
    NumberRangeComponent.prototype.nextWrapper;
    /** @type {?} */
    NumberRangeComponent.prototype.popover;
    /** @type {?} */
    NumberRangeComponent.prototype.separator;
    /**
     * @type {?}
     * @private
     */
    NumberRangeComponent.prototype.__value;
    /** @type {?} */
    NumberRangeComponent.prototype.beginValueChange;
    /** @type {?} */
    NumberRangeComponent.prototype.endValueChange;
    /** @type {?} */
    NumberRangeComponent.prototype.prevValue;
    /** @type {?} */
    NumberRangeComponent.prototype.nextValue;
    /**
     * @type {?}
     * @private
     */
    NumberRangeComponent.prototype._beginValue;
    /**
     * @type {?}
     * @private
     */
    NumberRangeComponent.prototype._endValue;
    /**
     * @type {?}
     * @private
     */
    NumberRangeComponent.prototype.documentClick;
    /**
     * @type {?}
     * @private
     */
    NumberRangeComponent.prototype.focusState;
}
//# sourceMappingURL=data:application/json;base64,