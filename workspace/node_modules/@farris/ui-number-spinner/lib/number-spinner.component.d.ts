import { EventEmitter, OnInit, ElementRef, Injector, AfterViewInit, Renderer2, OnDestroy, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { BigNumber } from 'bignumber.js';
import { LocaleService } from '@farris/ui-locale';
import { CommonUtils } from '@farris/ui-common';
export interface NumberFormatter {
    /** 前置符号 */
    prefix?: string;
    /** 后缀 */
    suffix?: string;
    /** 小数点 */
    decimalSeparator?: string;
    /** 千分位符号 */
    groupSeparator?: string;
    /** 千分位分组 */
    groupSize?: number;
}
export declare class NumberSpinnerComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges, OnDestroy {
    el: ElementRef;
    render: Renderer2;
    injector: Injector;
    hostClass: boolean;
    disabled: boolean;
    readonly: boolean;
    editable: boolean;
    formatter: (val: number) => string;
    parser: (val: string | number) => number;
    placeholder: string;
    step: number;
    max: any;
    min: any;
    /** 启用大数支持 */
    bigNumber: boolean;
    showButton: boolean;
    useThousands: boolean;
    textAlign: string;
    autoDecimal: boolean;
    canNull: boolean;
    precision: number;
    prefix: string;
    suffix: string;
    /** 小数点符号 */
    decimalSeparator: string;
    /** 千分位符号 */
    groupSeparator: string;
    /** 使用千分位时，每组显示的字符数 */
    groupSize: number;
    private _value;
    value: any;
    /** 显示0值 */
    showZero: boolean;
    valueChange: EventEmitter<any>;
    blur: EventEmitter<{}>;
    focus: EventEmitter<{}>;
    input: ElementRef;
    isFocus: boolean;
    popValue: string;
    isActiveTip: boolean;
    formatOptions: NumberFormatter;
    private _realValue;
    cdRef: ChangeDetectorRef;
    commonUtils: CommonUtils;
    private _ngControl;
    private showtipTimer;
    _updateOn: string;
    localeService: LocaleService;
    onTouchedCallback: () => void;
    onChangeCallback: (_: any) => void;
    constructor(el: ElementRef, render: Renderer2, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private onOptionsChanged;
    ngOnDestroy(): void;
    listenInputPasteEvent(): void;
    onBlur($event: any, type?: string): void;
    onClick($event: any): void;
    onFocus($event: any): void;
    onMouseEnter($event: any): void;
    onKeyDown(e: KeyboardEvent): void;
    private _modelChanged;
    onModelChange(realVal: any, updateOn?: string): void;
    up(e: Event, type?: any): void;
    down(e: Event, type?: any): void;
    compute(tye?: string): void;
    isDisableOfBtn(type: string, value?: any): boolean;
    isShowPopover(): boolean;
    _getPrecision(): number;
    toFixed(n: BigNumber | number): string;
    _getRealValue(_n: BigNumber): string | number;
    getRealValue(val: any): any;
    private buildFormatOptions;
    isEmpty(val: any): boolean;
    validInterval(bn: BigNumber, emit?: boolean): BigNumber;
    format(val: any, emit?: boolean): string;
    _toFormat(_bgNum: BigNumber, fmt: NumberFormatter): string;
    cleanNumString(val: any): any;
    updateValue(val: any): void;
    private updateControlValue;
    writeValue(val: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
}
