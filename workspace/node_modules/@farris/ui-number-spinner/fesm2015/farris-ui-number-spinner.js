import { CommonUtils } from '@farris/ui-common';
import { CommonModule } from '@angular/common';
import { BigNumber } from 'bignumber.js';
import { Injectable, NgModule, Component, Input, Output, EventEmitter, forwardRef, ViewChild, ElementRef, Injector, Renderer2, HostBinding, ChangeDetectorRef, Directive, HostListener, defineInjectable } from '@angular/core';
import { NgControl, NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { PopoverModule } from '@farris/ui-popover';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberSpinnerService {
    constructor() { }
}
NumberSpinnerService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
NumberSpinnerService.ctorParameters = () => [];
/** @nocollapse */ NumberSpinnerService.ngInjectableDef = defineInjectable({ factory: function NumberSpinnerService_Factory() { return new NumberSpinnerService(); }, token: NumberSpinnerService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberSpinnerComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} injector
     */
    constructor(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.hostClass = true;
        this.disabled = false;
        this.readonly = false;
        this.editable = true;
        // 空白提示文本
        this.placeholder = '';
        // up or down 步长
        this.step = 1;
        /**
         * 启用大数支持
         */
        this.bigNumber = false;
        // 是否显示加减按钮
        this.showButton = true;
        // 是否使用千分值
        this.useThousands = true;
        // 文本方向
        this.textAlign = 'left';
        // 自动补全小数
        this.autoDecimal = true;
        // 允许为空
        this.canNull = false;
        // 精度
        this.precision = 0;
        // 前缀
        this.prefix = '';
        // 后缀
        this.suffix = '';
        /**
         * 小数点符号
         */
        this.decimalSeparator = '.';
        /**
         * 千分位符号
         */
        this.groupSeparator = ',';
        /**
         * 使用千分位时，每组显示的字符数
         */
        this.groupSize = 3;
        this._value = '';
        /**
         * 显示0值
         */
        this.showZero = true;
        this.valueChange = new EventEmitter();
        this.blur = new EventEmitter();
        this.focus = new EventEmitter();
        this.isFocus = false;
        this.popValue = '';
        this.isActiveTip = false;
        this.formatOptions = {};
        this._realValue = null;
        this.showtipTimer = null;
        this._updateOn = 'change';
        this.localeService = null;
        this.onTouchedCallback = (/**
         * @return {?}
         */
        () => { });
        this.onChangeCallback = (/**
         * @return {?}
         */
        () => { });
        this.cdRef = this.injector.get(ChangeDetectorRef, null);
        this.localeService = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.formatOptions = this.buildFormatOptions();
        this._ngControl = this.injector.get(NgControl, null);
        if (this.localeService) {
            /** @type {?} */
            const defaultPlaceHolder = this.localeService.getValue('numberSpinner.placeholder') || '请输入数字';
            if (!this.placeholder) {
                this.placeholder = defaultPlaceHolder;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this.listenInputPasteEvent();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.value && !changes.value.isFirstChange()) {
            this._realValue = this.getRealValue(changes.value.currentValue);
            this.value = this.format(this._realValue);
        }
        if (changes.showZero && !changes.showZero.isFirstChange()) {
            this.value = this.format(this._realValue);
        }
        if (changes.precision && !changes.precision.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.useThousands && !changes.useThousands.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.prefix && !changes.prefix.isFirstChange()) {
            this.onOptionsChanged();
        }
        if (changes.suffix && !changes.suffix.isFirstChange()) {
            this.onOptionsChanged();
        }
    }
    /**
     * @private
     * @return {?}
     */
    onOptionsChanged() {
        this.formatOptions = this.buildFormatOptions();
        this.value = this.format(this._realValue);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() { }
    // 支持粘贴带格式的数据
    /**
     * @return {?}
     */
    listenInputPasteEvent() {
        this.input.nativeElement.addEventListener('paste', (/**
         * @param {?} event
         * @return {?}
         */
        event => {
            event.preventDefault();
            /** @type {?} */
            const clipboardData = event.clipboardData || window['clipboardData'];
            /** @type {?} */
            const pasteValue = clipboardData.getData('text');
            /** @type {?} */
            const val = this.cleanNumString(pasteValue);
            if (this.isEmpty(val)) {
                return;
            }
            /** @type {?} */
            const target = event.target;
            /** @type {?} */
            const start = ((/** @type {?} */ (target))).selectionStart;
            /** @type {?} */
            const end = ((/** @type {?} */ (target))).selectionEnd;
            if (this.isEmpty(val)) {
                target.value = '';
            }
            else {
                target.value = target.value.slice(0, start) + val + target.value.slice(end);
            }
            if (this._updateOn === 'change') {
                this._realValue = this.getRealValue(target.value);
                this.value = this._realValue;
                this._modelChanged(this._realValue);
            }
        }));
    }
    /**
     * @param {?} $event
     * @param {?=} type
     * @return {?}
     */
    onBlur($event, type = '') {
        if (this.readonly || this.disabled) {
            return;
        }
        if (this._updateOn === 'blur') {
            /** @type {?} */
            const val = this.cleanNumString($event.value);
            this._realValue = this.getRealValue(val);
        }
        this.value = this.format(this._realValue);
        this.input.nativeElement.value = this.value;
        this.isFocus = false;
        this.onModelChange(this._realValue, 'blur');
        this.blur.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFocus($event) {
        if (this.readonly || this.disabled) {
            this.isFocus = false;
            return;
        }
        this.value = this.isEmpty(this._realValue) ? '' : ((!this.showZero && this._realValue == '0') ? '' : this._realValue);
        this.isFocus = true;
        this.focus.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        if (this.value) {
            this.popValue = this.value;
            this.isActiveTip = this.isShowPopover();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        if (e.key === 'ArrowDown') {
            e.preventDefault();
            this.down(e);
            e.stopPropagation();
        }
        if (e.key === 'ArrowUp') {
            e.preventDefault();
            this.up(e);
            e.stopPropagation();
        }
    }
    /**
     * @private
     * @param {?} realVal
     * @return {?}
     */
    _modelChanged(realVal) {
        this._realValue = realVal;
        this.onChangeCallback(realVal);
        this.onTouchedCallback();
        this.valueChange.emit(realVal);
    }
    /**
     * @param {?} realVal
     * @param {?=} updateOn
     * @return {?}
     */
    onModelChange(realVal, updateOn = 'change') {
        // this._realValue = this.getRealValue(val);
        /** @type {?} */
        let _realValue = realVal;
        if (updateOn === 'change') {
            /** @type {?} */
            const num = this.cleanNumString('' + realVal);
            _realValue = this.getRealValue(num);
        }
        this.isActiveTip = false;
        this.popValue = this.format(_realValue);
        if (this._updateOn === updateOn) {
            this._modelChanged(_realValue);
        }
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    up(e, type = null) {
        this.compute('up');
        e.stopPropagation();
    }
    /**
     * @param {?} e
     * @param {?=} type
     * @return {?}
     */
    down(e, type = null) {
        this.compute('down');
        e.stopPropagation();
    }
    /**
     * @param {?=} tye
     * @return {?}
     */
    compute(tye = 'up') {
        if (this.isDisableOfBtn(tye)) {
            /** @type {?} */
            let _resultValue;
            /** @type {?} */
            const realBigNum = new BigNumber(this._realValue || 0);
            if (tye === 'up') {
                _resultValue = realBigNum.plus(Number(this.step));
            }
            else {
                _resultValue = realBigNum.minus(Number(this.step));
            }
            /** @type {?} */
            const s = _resultValue.toFixed();
            if (!this.isFocus) {
                this.value = this.format(s);
            }
            else {
                this.value = s;
            }
            this.input.nativeElement.value = this.value;
            this._modelChanged(this.getRealValue(_resultValue));
        }
    }
    /**
     * @param {?} type
     * @param {?=} value
     * @return {?}
     */
    isDisableOfBtn(type, value) {
        if (value === undefined) {
            value = this._realValue;
        }
        value = new BigNumber(value);
        if (type === 'up' && !(new BigNumber(this.max)).isNaN() && value.gte(this.max)) {
            return false;
        }
        if (type === 'down' && !(new BigNumber(this.min)).isNaN() && value.lte(this.min)) {
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    isShowPopover() {
        /** @type {?} */
        const width = this.input.nativeElement.clientWidth;
        const { paddingLeft, paddingRight } = window.getComputedStyle(this.input.nativeElement);
        /** @type {?} */
        const _width = width - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);
        /** @type {?} */
        const txtWidth = this.commonUtils.getTextWidth(this.value, window.getComputedStyle(this.input.nativeElement).font);
        if (_width && _width < txtWidth) {
            return true;
        }
        return false;
    }
    /**
     * @return {?}
     */
    _getPrecision() {
        return Number(this.precision || 0);
    }
    /**
     * @param {?} n
     * @return {?}
     */
    toFixed(n) {
        /** @type {?} */
        let _n = n;
        if (!BigNumber.isBigNumber(n)) {
            _n = new BigNumber(n);
        }
        if (this.precision !== null && this.precision !== undefined) {
            return n.toFixed(this._getPrecision());
        }
        return n.toFixed();
    }
    /**
     * @param {?} _n
     * @return {?}
     */
    _getRealValue(_n) {
        /** @type {?} */
        const n = this.toFixed(_n);
        return this.bigNumber ? n : Number(n);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getRealValue(val) {
        if (this.parser) {
            if (!isNaN(Number(val))) {
                return val;
            }
            else {
                return this.parser(val);
            }
        }
        /** @type {?} */
        let _n = this.validInterval(new BigNumber(val));
        if (_n.isNaN()) {
            if (this.canNull) {
                return null;
            }
            else {
                /** @type {?} */
                const minBigNum = new BigNumber('' + this.min);
                /** @type {?} */
                const maxBigNum = new BigNumber('' + this.max);
                if (!minBigNum.isNaN()) {
                    _n = minBigNum;
                }
                else if (!maxBigNum.isNaN()) {
                    _n = maxBigNum;
                }
                else {
                    return 0;
                }
            }
            // if (this.canNull || minBigNum.isNaN()) {
            //     return null;
            // } else {
            //     _n = minBigNum;
            // }
        }
        return this._getRealValue(_n);
    }
    /**
     * @private
     * @return {?}
     */
    buildFormatOptions() {
        return {
            prefix: this.prefix,
            suffix: this.suffix,
            decimalSeparator: this.decimalSeparator,
            groupSeparator: this.useThousands ? this.groupSeparator : '',
            groupSize: this.groupSize
        };
    }
    /**
     * @param {?} val
     * @return {?}
     */
    isEmpty(val) {
        return isNaN(val) || val === null || val === undefined || val === '';
    }
    /**
     * @param {?} bn
     * @param {?=} emit
     * @return {?}
     */
    validInterval(bn, emit = true) {
        /** @type {?} */
        let _bnVal = bn;
        if (!this.isEmpty(this.max)) {
            /** @type {?} */
            const _maxBigNum = new BigNumber('' + this.max);
            if (bn.gt(_maxBigNum)) {
                _bnVal = _maxBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_maxBigNum);
                if (emit) {
                    this._modelChanged(_realValue);
                }
            }
        }
        if (!this.isEmpty(this.min)) {
            /** @type {?} */
            const _minBigNum = new BigNumber('' + this.min);
            if (bn.lt(_minBigNum)) {
                _bnVal = _minBigNum;
                /** @type {?} */
                const _realValue = this._getRealValue(_minBigNum);
                if (emit) {
                    this._modelChanged(_realValue);
                }
            }
        }
        return _bnVal;
    }
    /**
     * @param {?} val
     * @param {?=} emit
     * @return {?}
     */
    format(val, emit = true) {
        val = this.cleanNumString(val);
        /** @type {?} */
        const bigVal = new BigNumber(val);
        /** @type {?} */
        let _bgNum = bigVal;
        if (emit) {
            _bgNum = this.validInterval(bigVal);
        }
        if (_bgNum.valueOf() == '0' && !this.showZero) {
            return '';
        }
        if (this.canNull && bigVal.isNaN()) {
            return '';
        }
        else {
            if (_bgNum.isNaN()) {
                return '';
            }
        }
        if (this.formatter) {
            return this.formatter(_bgNum.toNumber());
        }
        else {
            if (!Object.keys(this.formatOptions).length) {
                this.formatOptions = this.buildFormatOptions();
            }
            return this._toFormat(_bgNum, this.formatOptions);
        }
    }
    /**
     * @param {?} _bgNum
     * @param {?} fmt
     * @return {?}
     */
    _toFormat(_bgNum, fmt) {
        if (this.precision !== null && this.precision !== undefined) {
            return _bgNum.toFormat(this._getPrecision(), fmt);
        }
        else {
            return _bgNum.toFormat(fmt);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    cleanNumString(val) {
        val = (val === null || val === undefined || val === '') ? '' : String(val);
        val = val.replace(new RegExp(this.prefix, 'g'), '')
            .replace(new RegExp(this.suffix, 'g'), '').replace(/\,/g, '');
        if (this.groupSeparator && this.groupSeparator !== ',') {
            val = val.replace(new RegExp(`\\${this.groupSeparator}`, 'g'), '');
        }
        if (this.decimalSeparator && this.decimalSeparator !== '.') {
            val = val.replace(new RegExp(`\\${this.decimalSeparator}`, 'g'), '.');
        }
        return val;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    updateValue(val) {
        val = this.cleanNumString(val);
        this._realValue = this.getRealValue(val);
        this.value = this.format(this._realValue);
        this.el.nativeElement.value = this.value;
    }
    /**
     * @private
     * @return {?}
     */
    updateControlValue() {
        /** @type {?} */
        let _val = this.cleanNumString(this.value);
        if (this.parser) {
            _val = this.parser(this.value);
        }
        if (this.isEmpty(this._realValue) && this.isEmpty(_val)) {
            return;
        }
        /** @type {?} */
        const rv = new BigNumber(this._realValue);
        /** @type {?} */
        const cv = new BigNumber(_val);
        if (rv.isNaN() && cv.isNaN()) {
            return;
        }
        // if (!rv.eq(cv)) {
        // }
        if (this._ngControl) {
            /** @type {?} */
            const formgroup = this._ngControl['formDirective'];
            if (formgroup) {
                /** @type {?} */
                let ctrl = formgroup.control.get(this._ngControl.name);
                if (!ctrl && formgroup.control.controls) {
                    ctrl = formgroup.control.controls[this._ngControl.name];
                }
                if (ctrl) {
                    if (ctrl.value !== this._realValue) {
                        ctrl.setValue(this._realValue);
                    }
                }
            }
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this._realValue = val;
        this.value = this.format(this._realValue, false);
        this.updateControlValue();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
NumberSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-number-spinner',
                template: `
        <div class="input-group  f-state-hover flex-row"
            [ngClass]="{'f-state-disabled': disabled,'f-state-readonly': readonly,'f-state-focus': isFocus }"
            (mouseenter)="onMouseEnter($event)"
            #popover="bs-popover"
            farrisPopover
            [popover]="popValue" [triggers]="'hover'" [popActive]="isActiveTip"
            [showAction]="'show2'"  [container]="'body'">
            <input #input
                type="text"
                number-only
                [precision]="precision"
                autocomplete="off"
                class="form-control f-utils-fill"
                [ngModel]="value"
                [placeholder]="disabled||readonly || !editable?'':placeholder"
                [readonly]="readonly || !editable"
                [disabled]="disabled"
                [style.padding-right]="'4px'"
                [style.text-align]="textAlign"
                (ngModelChange)="onModelChange($event)"
                (blur)="onBlur(input)"
                (focus)="onFocus($event)"
                (keydown)="onKeyDown($event)"
                (click)="onClick($event)"
            />
            <div class="input-group-append btn-group btn-group-number m-0" *ngIf="!disabled && !readonly && showButton">
                <span class="icon k-i-arrow-chevron-up number-arrow-chevron" [style.cursor]="isDisableOfBtn('up') ? 'pointer' : 'not-allowed'"
                        (click)="up($event)"></span>
                <span class="icon k-i-arrow-chevron-down number-arrow-chevron" [style.cursor]="isDisableOfBtn('down') ? 'pointer' : 'not-allowed'"
                        (click)="down($event)"></span>
                
            </div>
        </div>
    `,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NumberSpinnerComponent)),
                        multi: true
                    }
                ],
                styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff;border-left:1px solid #d9d9d9;width:1.50003rem}.input-group .btn-group-number .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1;height:50%;text-align:center}.input-group .btn-group-number .number-arrow-chevron:active{background-color:#e6e9f0}.input-group .btn-group-number .number-arrow-chevron:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
            }] }
];
/** @nocollapse */
NumberSpinnerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
NumberSpinnerComponent.propDecorators = {
    hostClass: [{ type: HostBinding, args: ['class.f-cmp-number-spinner',] }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    formatter: [{ type: Input }],
    parser: [{ type: Input }],
    placeholder: [{ type: Input }],
    step: [{ type: Input }],
    max: [{ type: Input }],
    min: [{ type: Input }],
    bigNumber: [{ type: Input }],
    showButton: [{ type: Input }],
    useThousands: [{ type: Input }],
    textAlign: [{ type: Input }],
    autoDecimal: [{ type: Input }],
    canNull: [{ type: Input }],
    precision: [{ type: Input }],
    prefix: [{ type: Input }],
    suffix: [{ type: Input }],
    decimalSeparator: [{ type: Input }],
    groupSeparator: [{ type: Input }],
    groupSize: [{ type: Input }],
    value: [{ type: Input }],
    showZero: [{ type: Input }],
    valueChange: [{ type: Output }],
    blur: [{ type: Output }],
    focus: [{ type: Output }],
    input: [{ type: ViewChild, args: ['input',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberOnlyDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDown(e) {
        /** @type {?} */
        const val = ((/** @type {?} */ (e.target))).value;
        /** @type {?} */
        const key = e.key;
        /** @type {?} */
        const checkKeys = ['.', '-', '%'];
        /** @type {?} */
        const selectionVal = this.getSelectionValue(e.target);
        if (val && checkKeys.indexOf(key) > -1 && val.indexOf(key) > -1 && !(selectionVal && selectionVal.indexOf(key) > -1)) {
            e.preventDefault();
        }
        if ([46, 8, 9, 27, 13, 110, 190, 173].indexOf(e.keyCode) !== -1 ||
            // 允许全选: Ctrl+A
            (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||
            // 允许复制: Ctrl+C
            (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||
            // 允许粘贴: Ctrl+V
            (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||
            // 允许剪切: Ctrl+X
            (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||
            // 允许: home（头）, end（尾）, left（左移）, right（右移）
            (e.keyCode >= 35 && e.keyCode <= 39) ||
            e.keyCode === 189 || e.keyCode === 109) {
            // let it happen, don't do anything
            return;
        }
        // 确保数字以外的案件被拒绝执行默认动作
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
        // 判断当前小数精度
        if (val.indexOf('.') > -1 && this.precision) {
            /** @type {?} */
            const curPos = ((/** @type {?} */ (e.target))).selectionStart;
            /** @type {?} */
            const selectionEnd = ((/** @type {?} */ (e.target))).selectionEnd;
            /** @type {?} */
            const _precision = val.split('.')[1].length;
            /** @type {?} */
            const dotPos = val.indexOf('.');
            if (curPos > dotPos) {
                /** @type {?} */
                const selectionText = val.substring(curPos, selectionEnd);
                if (_precision - selectionText.length >= Number(this.precision)) {
                    e.preventDefault();
                    return false;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getSelectionValue(target) {
        /** @type {?} */
        const start = ((/** @type {?} */ (target))).selectionStart;
        /** @type {?} */
        const end = ((/** @type {?} */ (target))).selectionEnd;
        return target.value.substring(start, end);
    }
}
NumberOnlyDirective.decorators = [
    { type: Directive, args: [{
                // tslint:disable-next-line: directive-selector
                selector: '[number-only]'
            },] }
];
/** @nocollapse */
NumberOnlyDirective.ctorParameters = () => [
    { type: ElementRef }
];
NumberOnlyDirective.propDecorators = {
    precision: [{ type: Input }],
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberRangeComponent extends NumberSpinnerComponent {
    constructor() {
        super(...arguments);
        this.beginPlaceHolder = '';
        this.endPlaceHolder = '';
        this.separator = '~';
        this.__value = '';
        this.beginValueChange = new EventEmitter();
        this.endValueChange = new EventEmitter();
        /* 开始数字展示值 */
        this.prevValue = '';
        /* 结束数字展示值 */
        this.nextValue = '';
        this._beginValue = '';
        this._endValue = '';
        this.focusState = {
            isFocus: false,
            target: '' // begin | end
        };
        //#endregion
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set beginValue(value) {
        this.prevValue = this.format(value);
        // 开始真实数值
        this._beginValue = this.isEmpty(value) ? '' : value;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set endValue(value) {
        this.nextValue = this.format(value);
        // 结束真实数值
        this._endValue = this.isEmpty(value) ? '' : value;
    }
    /**
     * @return {?}
     */
    get value() {
        return this.__value;
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        if (v !== this.__value) {
            this.__value = v === '~' ? '' : v;
        }
    }
    /**
     * @return {?}
     */
    get preNumValue() {
        /** @type {?} */
        const v = this.getRealValue(this.parser ? this.prevValue : this._beginValue);
        if (this.canNull && this.isEmpty(v)) {
            return '';
        }
        else {
            return v || 0;
        }
    }
    /**
     * @return {?}
     */
    get nextNumValue() {
        /** @type {?} */
        const v = this.getRealValue(this.parser ? this.nextValue : this._endValue);
        if (this.canNull && this.isEmpty(v)) {
            return '';
        }
        else {
            return v || 0;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.showButton = false;
        this.initPlaceHolderInfo();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.documentClick = this.render.listen(document, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.render.setStyle(this.prevWrapper.nativeElement, 'flex', 1);
            this.render.setStyle(this.nextWrapper.nativeElement, 'flex', 1);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        if (changes.value && !changes.value.isFirstChange()) {
            this.setValue(changes.value.currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.documentClick) {
            this.documentClick();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initPlaceHolderInfo() {
        if (!this.beginPlaceHolder) {
            this.beginPlaceHolder = this.localeService.getValue('numberSpinner.range.begin') || this.placeholder;
        }
        if (!this.endPlaceHolder) {
            this.endPlaceHolder = this.localeService.getValue('numberSpinner.range.end') || this.placeholder;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getRangeValue() {
        return this.preNumValue + this.separator + this.nextNumValue;
    }
    /**
     * @private
     * @return {?}
     */
    getEndValue() {
        return this.getRealValue(this.nextValue);
    }
    /**
     * @private
     * @return {?}
     */
    getBeginValue() {
        return this.getRealValue(this.prevValue);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getRealValue(val) {
        if (this.parser) {
            return this.parser(val);
        }
        /** @type {?} */
        let _n = this.validInterval(new BigNumber(val), false);
        if (_n.isNaN()) {
            /** @type {?} */
            const minBigNum = new BigNumber('' + this.min);
            if (this.canNull || minBigNum.isNaN()) {
                return null;
            }
            else {
                _n = minBigNum;
            }
        }
        return (/** @type {?} */ (this._getRealValue(_n)));
    }
    /**
     * @param {?} val
     * @param {?=} type
     * @return {?}
     */
    onModelChange(val, type) {
        if (type === 'begin') {
            this._beginValue = val;
        }
        else if (type === 'end') {
            this._endValue = val;
        }
        this.value = this.getRangeValue();
        this.onChangeCallback(this.value);
        this.onTouchedCallback();
        this.valueChange.emit(this.value);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    onBlur(e, type) {
        if (!this.readonly && !this.disabled) {
            /** @type {?} */
            const tmpValue = e.value;
            this.focusState = { isFocus: false, target: type };
            if (type === 'begin') {
                /** @type {?} */
                const nextVal = this.getEndValue();
                /** @type {?} */
                const minValue = this.isEmpty(tmpValue)
                    ? ''
                    : this.isEmpty(nextVal)
                        ? tmpValue
                        : BigNumber.min(tmpValue, nextVal).toFixed();
                // this.prevValue = this.format(minValue);
                this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();
                // this.beginValue = this.getRealValue(this.prevValue);
                this.inputPrev.nativeElement.value = this.prevValue;
                this.onModelChange(this._beginValue, type);
            }
            else {
                /** @type {?} */
                const beginVal = this.getBeginValue();
                /** @type {?} */
                const maxValue = this.isEmpty(tmpValue)
                    ? ''
                    : this.isEmpty(beginVal)
                        ? tmpValue
                        : BigNumber.max(tmpValue, beginVal).toFixed();
                // this.nextValue = this.format(maxValue);
                // this.endValue = this.getRealValue(this.nextValue);
                this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();
                this.inputNext.nativeElement.value = this.nextValue;
                this.onModelChange(this._endValue, type);
            }
        }
        this.valueChange.emit(this.value);
        if (type === 'begin') {
            this.beginValueChange.emit(this.preNumValue);
        }
        else {
            this.endValueChange.emit(this.nextNumValue);
        }
        this.blur.emit();
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    onFocus(type) {
        if (!this.readonly && !this.disabled) {
            this.focusState = { isFocus: true, target: type };
            if (type === 'begin') {
                this.inputPrev.nativeElement.value = this._beginValue;
                this.inputPrev.nativeElement.setSelectionRange(0, this._beginValue.length);
                this.expendWidth('begin', 3);
            }
            else {
                this.inputNext.nativeElement.value = this._endValue;
                this.inputNext.nativeElement.setSelectionRange(0, this._endValue.length);
                this.expendWidth('end', 3);
            }
        }
        this.focus.emit(type);
    }
    /**
     * @param {?} which
     * @param {?} num
     * @return {?}
     */
    expendWidth(which, num) {
        /** @type {?} */
        let target;
        /** @type {?} */
        let other;
        if (which === 'begin') {
            target = this.prevWrapper.nativeElement;
            other = this.nextWrapper.nativeElement;
        }
        else {
            target = this.nextWrapper.nativeElement;
            other = this.prevWrapper.nativeElement;
        }
        const { width } = target.getBoundingClientRect();
        if (width < 150) {
            this.render.setStyle(target, 'flex', num);
            this.render.setStyle(other, 'flex', 1);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        this.isActiveTip = this.isShowPopover();
        if (this.nextValue && this.prevValue) {
            this.popValue = this.prevValue + '~' + this.nextValue;
        }
        else {
            this.popValue = '';
        }
    }
    /**
     * @return {?}
     */
    isShowPopover() {
        const { width } = this.el.nativeElement.getBoundingClientRect();
        if (width && width < 200) {
            return true;
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    onKeyDownRange($event, typ) {
        if ($event.key === 'ArrowDown') {
            $event.preventDefault();
            this.down($event, typ);
        }
        if ($event.key === 'ArrowUp') {
            $event.preventDefault();
            this.up($event, typ);
        }
        $event.stopPropagation();
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        this.setValue(val);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        if (typeof val === 'string') {
            /** @type {?} */
            const valArr = val.split(this.separator);
            this._beginValue = valArr[0] ? valArr[0] : '';
            this._endValue = valArr[1] ? valArr[1] : '';
        }
        else {
            this._beginValue = '';
            this._beginValue = '';
        }
        this.prevValue = this.format(this._beginValue);
        this.nextValue = this.format(this._endValue);
    }
    //#region 上下操作按钮 或 上下方向键
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    up(e, type) {
        e.stopPropagation();
        this._compute(type, 'up', ((/** @type {?} */ (e.target))).value);
    }
    /**
     * @param {?} e
     * @param {?} type
     * @return {?}
     */
    down(e, type) {
        e.stopPropagation();
        this._compute(type, 'down', ((/** @type {?} */ (e.target))).value);
    }
    /**
     * @private
     * @param {?} type
     * @param {?} dir
     * @param {?} tagVal
     * @return {?}
     */
    _compute(type, dir, tagVal) {
        /** @type {?} */
        const m = dir === 'up' ? 'plus' : 'minus';
        // if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {
        //     const bv = tagVal || 0;
        //     const ev = this.getRealValue(this.nextValue);
        //     const r = new BigNumber(bv)[m](Number(this.step));
        //     let v = r.toFixed();
        //     const minValue = BigNumber.min(v, ev);
        //     if (!minValue.eq(v) && !this.isEmpty(ev)) {
        //         v = ev;
        //     }
        //     this._beginValue = v;
        //     // this.prevValue = this.format(v);
        //     this.inputPrev.nativeElement.value = v;
        //     this.onModelChange(v, type);
        //     this.beginValueChange.emit(v);
        // } else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {
        //     const bv = this.getRealValue(this.prevValue);
        //     const ev = tagVal || 0;
        //     const r = new BigNumber(ev)[m](Number(this.step));
        //     let v = r.toFixed();
        //     const maxValue = BigNumber.max(bv, v);
        //     if (!maxValue.eq(v) && !this.isEmpty(bv)) {
        //         v = bv;
        //     }
        //     this._endValue = v;
        //     // this.nextValue = this.format(v);
        //     this.inputNext.nativeElement.value = v;
        //     this.onModelChange(v, type);
        //     this.endValueChange.emit(v);
        // }
        if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {
            /** @type {?} */
            const tmpValue = this.inputPrev.nativeElement.value;
            /** @type {?} */
            const nextVal = this.getEndValue();
            /** @type {?} */
            const bv = this.cleanNumString(tmpValue) || 0;
            /** @type {?} */
            const r = new BigNumber(bv)[m](Number(this.step));
            /** @type {?} */
            let v = r.toFixed();
            /** @type {?} */
            const minValue = this.isEmpty(v)
                ? ''
                : this.isEmpty(nextVal)
                    ? v
                    : BigNumber.min(v, nextVal).toFixed();
            this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();
            this.inputPrev.nativeElement.value = this.prevValue;
            this.onModelChange(this._beginValue, type);
            this.beginValueChange.emit(this._beginValue);
        }
        else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {
            /** @type {?} */
            const tmpValue = this.inputNext.nativeElement.value;
            /** @type {?} */
            const beginVal = this.getBeginValue();
            /** @type {?} */
            const bv = this.cleanNumString(tmpValue) || 0;
            /** @type {?} */
            const r = new BigNumber(bv)[m](Number(this.step));
            /** @type {?} */
            let v = r.toFixed();
            /** @type {?} */
            const maxValue = this.isEmpty(v)
                ? ''
                : this.isEmpty(beginVal)
                    ? v
                    : BigNumber.max(v, beginVal).toFixed();
            this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();
            this.inputNext.nativeElement.value = this.nextValue;
            this.onModelChange(this._endValue, type);
            this.endValueChange.emit(this._endValue);
        }
        this.valueChange.emit(this.value);
        this.expendWidth(type, 3);
    }
}
NumberRangeComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-number-range',
                template: "<div\r\n    class=\"input-group number-range f-cmp-number-spinner\"\r\n    [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly\r\n    }\"\r\n    (click)=\"$event.stopPropagation()\" (mouseenter)=\"onMouseEnter($event)\"\r\n>\r\n    <div class=\"form-control input-container\"\r\n        #popover=\"bs-popover\"\r\n        farrisPopover\r\n        [popover]=\"popValue\"\r\n        [triggers]=\"'hover'\"\r\n        [popActive]=\"isActiveTip\"\r\n        [showAction]=\"'show2'\"\r\n        [container]=\"'body'\"\r\n    >\r\n        <div class=\"sub-input-group\" #prevWrapper>\r\n            <input\r\n                type=\"text\"\r\n                number-only\r\n                [precision]=\"precision\"\r\n                autocomplete=\"off\"\r\n                class=\"sub-input form-control f-state-focus f-state-hover\"\r\n                [(ngModel)]=\"prevValue\"\r\n                #inputPrev\r\n                (blur)=\"onBlur(inputPrev, 'begin')\"\r\n                (focus)=\"onFocus('begin')\"\r\n                (ngModelChange)=\"onModelChange($event, 'begin')\"\r\n                [placeholder]=\"disabled || readonly ?'':beginPlaceHolder\"\r\n                [readOnly]=\"disabled || readonly ? 'readonly' : ''\"\r\n                [style.text-align]=\"textAlign\"\r\n                (keydown)=\"onKeyDownRange($event, 'begin')\"\r\n                (click)=\"onClick($event)\"\r\n            />\r\n            <div class=\"input-group-append btn-group btn-group-number sub-btn-group\" *ngIf=\"!readonly && !disabled && showButton\">\r\n                <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('up', prevValue) ? 'pointer' : 'not-allowed'\"\r\n                    (click)=\"up($event, 'begin')\"></span>\r\n                <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('down', prevValue) ? 'pointer' : 'not-allowed'\"\r\n                    (click)=\"down($event, 'begin')\"></span>\r\n            </div>\r\n        </div>\r\n        <span class=\"spliter\">~</span>\r\n        <div class=\"sub-input-group\" #nextWrapper>\r\n            <input\r\n                type=\"text\"\r\n                number-only\r\n                [precision]=\"precision\"\r\n                autocomplete=\"off\"\r\n                class=\"sub-input form-control f-state-focus f-state-hover\"\r\n                [(ngModel)]=\"nextValue\"\r\n                #inputNext\r\n                (blur)=\"onBlur(inputNext, 'end')\"\r\n                (focus)=\"onFocus('end')\"\r\n                (ngModelChange)=\"onModelChange($event, 'end')\"\r\n                [placeholder]=\"disabled || readonly ?'':endPlaceHolder\"\r\n                [readOnly]=\"disabled || readonly ? 'readonly' : ''\"\r\n                [style.text-align]=\"textAlign\"\r\n                (keydown)=\"onKeyDownRange($event, 'end')\"\r\n                (click)=\"onClick($event)\"\r\n            />\r\n            <div class=\"input-group-append btn-group btn-group-number sub-btn-group\" *ngIf=\"!readonly && !disabled  && showButton\"[style.text-align]=\"textAlign\" style=\"border-right:0\">\r\n                    <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\"  [style.cursor]=\"isDisableOfBtn('up', nextValue) ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"up($event, 'end')\"></span>\r\n                    <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\"\r\n                        [style.cursor]=\"isDisableOfBtn('down', nextValue) ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"down($event, 'end')\"></span>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => NumberRangeComponent)),
                        multi: true
                    }
                ],
                styles: [".input-group .btn-group-number{height:1.50003rem;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background-color:#fff;border-left:1px solid #d9d9d9;width:1.50003rem}.input-group .btn-group-number .number-arrow-chevron{-webkit-box-flex:1;flex:1;line-height:1;height:50%;text-align:center}.input-group .btn-group-number .number-arrow-chevron:active{background-color:#e6e9f0}.input-group .btn-group-number .number-arrow-chevron:nth-child(2){border-top:1px solid #d9d9d9}input::-webkit-inner-spin-button,input::-webkit-outer-spin-button{-webkit-appearance:none!important;margin:0}.number-range{position:relative}.number-range .input-container{display:-webkit-box;display:flex;padding:0}.number-range .input-container .sub-input-group{-webkit-box-flex:1;flex:1;position:relative;display:-webkit-box;display:flex;-webkit-transition:.3s ease-out;transition:.3s ease-out}.number-range .input-container .sub-input-group .sub-input{width:100%;border:none;outline:0;background-color:rgba(0,0,0,0);min-width:2px;padding:.125rem 4px .125rem .5rem}.number-range .input-container .spliter{width:15px;text-align:center}"]
            }] }
];
NumberRangeComponent.propDecorators = {
    beginPlaceHolder: [{ type: Input }],
    endPlaceHolder: [{ type: Input }],
    inputPrev: [{ type: ViewChild, args: ['inputPrev',] }],
    inputNext: [{ type: ViewChild, args: ['inputNext',] }],
    prevWrapper: [{ type: ViewChild, args: ['prevWrapper',] }],
    nextWrapper: [{ type: ViewChild, args: ['nextWrapper',] }],
    popover: [{ type: ViewChild, args: ['popover',] }],
    separator: [{ type: Input }],
    beginValue: [{ type: Input }],
    endValue: [{ type: Input }],
    value: [{ type: Input }],
    beginValueChange: [{ type: Output }],
    endValueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NumberSpinnerModule {
}
NumberSpinnerModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    NumberSpinnerComponent, NumberOnlyDirective,
                    NumberRangeComponent
                ],
                imports: [
                    CommonModule, FormsModule,
                    PopoverModule.forRoot(),
                    LocaleModule.forRoot()
                ],
                exports: [NumberSpinnerComponent, NumberOnlyDirective,
                    NumberRangeComponent]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NumberSpinnerService, NumberSpinnerComponent, NumberSpinnerModule, NumberOnlyDirective, NumberRangeComponent };

//# sourceMappingURL=farris-ui-number-spinner.js.map