{"version":3,"sources":["ng://@farris/ui-number-spinner/lib/number-spinner.service.ts","ng://@farris/ui-number-spinner/lib/number-spinner.component.ts","ng://@farris/ui-number-spinner/lib/number-only-directive.ts","node_modules/tslib/tslib.es6.js","ng://@farris/ui-number-spinner/lib/number-range.component.ts","ng://@farris/ui-number-spinner/lib/number-spinner.module.ts"],"names":["NumberSpinnerService","Injectable","args","providedIn","Object","defineProperty","NumberSpinnerComponent","prototype","this","_value","val","ngOnInit","formatOptions","buildFormatOptions","_ngControl","injector","get","NgControl","localeService","defaultPlaceHolder","getValue","placeholder","ngAfterViewInit","control","_updateOn","updateOn","listenInputPasteEvent","ngOnChanges","changes","value","isFirstChange","_realValue","getRealValue","currentValue","format","showZero","precision","onOptionsChanged","useThousands","prefix","suffix","ngOnDestroy","_this","input","nativeElement","addEventListener","event","preventDefault","pasteValue","clipboardData","window","getData","cleanNumString","isEmpty","target","start","selectionStart","end","selectionEnd","slice","_modelChanged","onBlur","$event","type","readonly","disabled","isFocus","onModelChange","blur","emit","formatted","instance","onClick","stopPropagation","onFocus","focus","onMouseEnter","popValue","isActiveTip","isShowPopover","onKeyDown","e","key","down","up","realVal","onChangeCallback","onTouchedCallback","valueChange","num","compute","tye","isDisableOfBtn","_resultValue","realBigNum","BigNumber","s","plus","Number","step","minus","toFixed","undefined","max","isNaN","gte","min","lte","width","clientWidth","_a","getComputedStyle","paddingLeft","paddingRight","_width","replace","txtWidth","commonUtils","getTextWidth","font","_getPrecision","n","isBigNumber","_getRealValue","_n","bigNumber","parser","validInterval","canNull","minBigNum","maxBigNum","decimalSeparator","groupSeparator","groupSize","bn","_bnVal","_maxBigNum","gt","_minBigNum","lt","bigVal","_bgNum","valueOf","formatter","toNumber","keys","length","_toFormat","fmt","toFormat","String","RegExp","updateValue","el","updateControlValue","_val","rv","cv","formgroup","ctrl","name","controls","setValue","writeValue","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","ElementRef","Renderer2","Injector","HostBinding","Input","Output","ViewChild","render","hostClass","editable","showButton","textAlign","autoDecimal","EventEmitter","showtipTimer","cdRef","ChangeDetectorRef","LocaleService","CommonUtils","NumberOnlyDirective","selectionVal","getSelectionValue","indexOf","keyCode","ctrlKey","metaKey","shiftKey","curPos","_precision","split","substring","Directive","HostListener","element","extendStatics","d","b","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","create","tslib_1.__extends","NumberRangeComponent","prevValue","_beginValue","nextValue","_endValue","__value","v","_super","call","initPlaceHolderInfo","documentClick","listen","document","setStyle","prevWrapper","nextWrapper","beginPlaceHolder","endPlaceHolder","getRangeValue","preNumValue","separator","nextNumValue","getEndValue","getBeginValue","tmpValue","focusState","nextVal","minValue","beginValue","inputPrev","beginVal","maxValue","endValue","inputNext","beginValueChange","endValueChange","setSelectionRange","expendWidth","which","other","getBoundingClientRect","onKeyDownRange","typ","valArr","_compute","dir","tagVal","m","bv","apply","arguments","NumberSpinnerModule","NgModule","declarations","imports","CommonModule","FormsModule","PopoverModule","forRoot","LocaleModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NumberSpinnerService {\r\n\r\n  constructor() { }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-05 10:26:50\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2020-11-16 11:43:34\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport {\r\n    Component, Input, Output, EventEmitter, forwardRef, OnInit, ViewChild, ElementRef, Injector, AfterViewInit,\r\n    Renderer2, OnDestroy, OnChanges, SimpleChanges, HostBinding, ChangeDetectorRef, HostListener\r\n} from '@angular/core';\r\nimport { ControlValueAccessor, FormControl, NgControl, NgModel, NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { BigNumber } from 'bignumber.js';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n\r\n\r\nexport interface NumberFormatter {\r\n    /** åç½®ç¬¦å· */\r\n    prefix?: string;\r\n    /** åç¼ */\r\n    suffix?: string;\r\n    /** å°æ°ç¹ */\r\n    decimalSeparator?: string;\r\n    /** ååä½ç¬¦å· */\r\n    groupSeparator?: string;\r\n    /** ååä½åç» */\r\n    groupSize?: number;\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-number-spinner',\r\n    template: `\r\n        <div class=\"input-group  f-state-hover flex-row\"\r\n            [ngClass]=\"{'f-state-disabled': disabled,'f-state-readonly': readonly,'f-state-focus': isFocus }\"\r\n            (mouseenter)=\"onMouseEnter($event)\"\r\n            #popover=\"bs-popover\"\r\n            farrisPopover\r\n            [popover]=\"popValue\" [triggers]=\"'hover'\" [popActive]=\"isActiveTip\"\r\n            [showAction]=\"'show2'\"  [container]=\"'body'\">\r\n            <input #input\r\n                type=\"text\"\r\n                number-only\r\n                [precision]=\"precision\"\r\n                autocomplete=\"off\"\r\n                class=\"form-control f-utils-fill\"\r\n                [ngModel]=\"value\"\r\n                [placeholder]=\"disabled||readonly || !editable?'':placeholder\"\r\n                [readonly]=\"readonly || !editable\"\r\n                [disabled]=\"disabled\"\r\n                [style.padding-right]=\"'4px'\"\r\n                [style.text-align]=\"textAlign\"\r\n                (ngModelChange)=\"onModelChange($event)\"\r\n                (blur)=\"onBlur(input)\"\r\n                (focus)=\"onFocus($event)\"\r\n                (keydown)=\"onKeyDown($event)\"\r\n                (click)=\"onClick($event)\"\r\n            />\r\n            <div class=\"input-group-append btn-group btn-group-number m-0\" *ngIf=\"!disabled && !readonly && showButton\">\r\n                <span class=\"icon k-i-arrow-chevron-up number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('up') ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"up($event)\"></span>\r\n                <span class=\"icon k-i-arrow-chevron-down number-arrow-chevron\" [style.cursor]=\"isDisableOfBtn('down') ? 'pointer' : 'not-allowed'\"\r\n                        (click)=\"down($event)\"></span>\r\n                \r\n            </div>\r\n        </div>\r\n    `,\r\n    styleUrls: ['./number.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NumberSpinnerComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NumberSpinnerComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnChanges, OnDestroy {\r\n    @HostBinding('class.f-cmp-number-spinner') hostClass = true;\r\n    @Input() disabled = false;\r\n    @Input() readonly = false;\r\n    @Input() editable = true;\r\n    // formatter å parser å¿é¡»åæ¶å­å¨\r\n    @Input() formatter: (val: number) => string;\r\n\r\n    @Input() parser: (val: string | number) => number;\r\n    // ç©ºç½æç¤ºææ¬\r\n    @Input() placeholder = '';\r\n    // up or down æ­¥é¿\r\n    @Input() step = 1;\r\n    // æå¤§å¼\r\n    @Input() max: any;\r\n    // æå°å¼\r\n    @Input() min: any;\r\n\r\n    /** å¯ç¨å¤§æ°æ¯æ */\r\n    @Input() bigNumber = false;\r\n\r\n    // æ¯å¦æ¾ç¤ºå åæé®\r\n    @Input() showButton = true;\r\n    // æ¯å¦ä½¿ç¨ååå¼\r\n    @Input() useThousands = true;\r\n    // ææ¬æ¹å\r\n    @Input() textAlign = 'left';\r\n    // èªå¨è¡¥å¨å°æ°\r\n    @Input() autoDecimal = true;\r\n    // åè®¸ä¸ºç©º\r\n    @Input() canNull = false;\r\n    // ç²¾åº¦\r\n    @Input() precision = 0;\r\n    // åç¼\r\n    @Input() prefix = '';\r\n    // åç¼\r\n    @Input() suffix = '';\r\n    /** å°æ°ç¹ç¬¦å· */\r\n    @Input() decimalSeparator = '.';\r\n    /** ååä½ç¬¦å· */\r\n    @Input() groupSeparator = ',';\r\n    /** ä½¿ç¨ååä½æ¶ï¼æ¯ç»æ¾ç¤ºçå­ç¬¦æ° */\r\n    @Input() groupSize = 3;\r\n\r\n    private _value = '';\r\n    @Input()\r\n    get value() {\r\n        return this._value;\r\n    }\r\n    set value(val: any) {\r\n        this._value = val;\r\n    }\r\n\r\n    /** æ¾ç¤º0å¼ */\r\n    @Input() showZero = true;\r\n\r\n    @Output() valueChange = new EventEmitter<any>();\r\n    @Output() blur = new EventEmitter();\r\n    @Output() focus = new EventEmitter();\r\n\r\n    @ViewChild('input') input: ElementRef;\r\n\r\n    isFocus = false;\r\n    popValue = '';\r\n    isActiveTip = false;\r\n    formatOptions: NumberFormatter = {};\r\n    private _realValue = null;\r\n    cdRef: ChangeDetectorRef;\r\n    commonUtils: CommonUtils;\r\n    private _ngControl: NgControl;\r\n    private showtipTimer = null;\r\n\r\n    _updateOn = 'change';\r\n    localeService: LocaleService = null;\r\n    onTouchedCallback: () => void = () => { };\r\n    onChangeCallback: (_: any) => void = () => { };\r\n\r\n    constructor(public el: ElementRef, public render: Renderer2, public injector: Injector) {\r\n        this.cdRef = this.injector.get(ChangeDetectorRef, null);\r\n\r\n        this.localeService = this.injector.get(LocaleService, null);\r\n\r\n        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.formatOptions = this.buildFormatOptions();\r\n        this._ngControl = this.injector.get(NgControl, null);\r\n\r\n        if (this.localeService) {\r\n            const defaultPlaceHolder = this.localeService.getValue('numberSpinner.placeholder') || 'è¯·è¾å¥æ°å­';\r\n            if (!this.placeholder) {\r\n                this.placeholder = defaultPlaceHolder;\r\n            }\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this._ngControl && this._ngControl.control) {\r\n            this._updateOn =  this._ngControl.control.updateOn;\r\n        }\r\n\r\n        this.listenInputPasteEvent();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n\r\n        if (changes.value && !changes.value.isFirstChange()) {\r\n            this._realValue = this.getRealValue(changes.value.currentValue);\r\n            this.value = this.format(this._realValue);\r\n        }\r\n\r\n        if (changes.showZero && !changes.showZero.isFirstChange()) {\r\n            this.value = this.format(this._realValue);\r\n        }\r\n\r\n        if (changes.precision && !changes.precision.isFirstChange()) {\r\n            this.onOptionsChanged();\r\n        }\r\n\r\n        if (changes.useThousands && !changes.useThousands.isFirstChange()) {\r\n            this.onOptionsChanged();\r\n        }\r\n\r\n        if (changes.prefix && !changes.prefix.isFirstChange()) {\r\n            this.onOptionsChanged();\r\n        }\r\n        if (changes.suffix && !changes.suffix.isFirstChange()) {\r\n            this.onOptionsChanged();\r\n        }\r\n    }\r\n\r\n    private onOptionsChanged() {\r\n        this.formatOptions = this.buildFormatOptions();\r\n        this.value = this.format(this._realValue);\r\n    }\r\n\r\n    ngOnDestroy() {}\r\n\r\n    // æ¯æç²è´´å¸¦æ ¼å¼çæ°æ®\r\n    listenInputPasteEvent() {\r\n        this.input.nativeElement.addEventListener('paste', event => {\r\n            event.preventDefault();\r\n            const clipboardData = event.clipboardData || window['clipboardData'];\r\n            const pasteValue = clipboardData.getData('text');\r\n            const val = this.cleanNumString(pasteValue);\r\n\r\n            if (this.isEmpty(val)) {\r\n                return;\r\n            }\r\n\r\n            const target = event.target;\r\n            const start = (target as any).selectionStart;\r\n            const end = (target as any).selectionEnd;\r\n\r\n            if (this.isEmpty(val)) {\r\n                target.value = '';\r\n            } else {\r\n                target.value = target.value.slice(0, start) + val +  target.value.slice(end);\r\n            }\r\n\r\n            if (this._updateOn === 'change') {\r\n                this._realValue = this.getRealValue(target.value);\r\n                this.value = this._realValue;\r\n                this._modelChanged(this._realValue);\r\n            }\r\n\r\n        });\r\n    }\r\n\r\n    onBlur($event, type: string = '') {\r\n        if (this.readonly || this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (this._updateOn === 'blur') {\r\n            const val = this.cleanNumString($event.value);\r\n            this._realValue = this.getRealValue(val);\r\n        }\r\n\r\n        this.value = this.format(this._realValue);\r\n        this.input.nativeElement.value = this.value;\r\n        this.isFocus = false;\r\n        this.onModelChange(this._realValue, 'blur');\r\n        this.blur.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this });\r\n    }\r\n\r\n    onClick($event) {\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    onFocus($event) {\r\n        if (this.readonly || this.disabled) {\r\n            this.isFocus = false;\r\n            return;\r\n        }\r\n\r\n        this.value = this.isEmpty(this._realValue) ? '' :  ((!this.showZero && this._realValue == '0') ?  '' : this._realValue );\r\n        this.isFocus = true;\r\n        this.focus.emit({ event: $event, formatted: this.value, value: this._realValue, instance: this  });\r\n    }\r\n\r\n    onMouseEnter($event) {\r\n        if (this.value) {\r\n            this.popValue = this.value;\r\n            this.isActiveTip = this.isShowPopover();\r\n        }\r\n    }\r\n\r\n    onKeyDown(e: KeyboardEvent) {\r\n        if (e.key === 'ArrowDown') {\r\n            e.preventDefault();\r\n            this.down(e);\r\n            e.stopPropagation();\r\n        }\r\n\r\n        if (e.key === 'ArrowUp') {\r\n            e.preventDefault();\r\n            this.up(e);\r\n            e.stopPropagation();\r\n        }\r\n    }\r\n\r\n    private _modelChanged(realVal) {\r\n        this._realValue = realVal;\r\n        this.onChangeCallback(realVal);\r\n        this.onTouchedCallback();\r\n        this.valueChange.emit(realVal);\r\n    }\r\n\r\n    onModelChange(realVal: any, updateOn = 'change') {\r\n        // this._realValue = this.getRealValue(val);\r\n        let _realValue = realVal;\r\n        if (updateOn === 'change') {\r\n            const num = this.cleanNumString('' + realVal);\r\n            _realValue = this.getRealValue(num);\r\n        }\r\n        this.isActiveTip = false;\r\n        this.popValue = this.format(_realValue);\r\n        if (this._updateOn === updateOn) {\r\n            this._modelChanged(_realValue);\r\n        }\r\n    }\r\n\r\n    up(e: Event, type = null) {\r\n        this.compute('up');\r\n        e.stopPropagation();\r\n    }\r\n\r\n    down(e: Event, type = null) {\r\n        this.compute('down');\r\n        e.stopPropagation();\r\n    }\r\n\r\n    compute(tye = 'up') {\r\n        if (this.isDisableOfBtn(tye)) {\r\n            let _resultValue;\r\n            const realBigNum = new BigNumber(this._realValue || 0);\r\n            if (tye === 'up') {\r\n                _resultValue = realBigNum.plus(Number(this.step));\r\n            } else {\r\n                _resultValue = realBigNum.minus(Number(this.step));\r\n            }\r\n\r\n            const s = _resultValue.toFixed();\r\n            if (!this.isFocus) {\r\n                this.value = this.format(s);\r\n            } else {\r\n                this.value = s;\r\n            }\r\n            this.input.nativeElement.value = this.value;\r\n            this._modelChanged(this.getRealValue(_resultValue));\r\n        }\r\n    }\r\n\r\n    isDisableOfBtn(type: string, value?: any) {\r\n        if (value === undefined) {\r\n            value = this._realValue;\r\n        }\r\n        value = new BigNumber(value);\r\n\r\n        if (type === 'up' && !(new BigNumber(this.max)).isNaN() && value.gte(this.max)) {\r\n            return false;\r\n        }\r\n        if (type === 'down' && !(new BigNumber(this.min)).isNaN() && value.lte(this.min)) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    isShowPopover() {\r\n        const  width = this.input.nativeElement.clientWidth;\r\n        const { paddingLeft, paddingRight } = window.getComputedStyle(this.input.nativeElement);\r\n\r\n        const _width = width - (Number(paddingLeft.replace('px', '')) || 0) - (Number(paddingRight.replace('px', '')) || 0);\r\n\r\n        const txtWidth = this.commonUtils.getTextWidth(this.value, window.getComputedStyle(this.input.nativeElement).font);\r\n        if (_width && _width < txtWidth) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    _getPrecision() {\r\n        return Number(this.precision || 0);\r\n    }\r\n\r\n    toFixed(n: BigNumber | number) {\r\n        let _n = n;\r\n        if (!BigNumber.isBigNumber(n)) {\r\n            _n = new BigNumber(n);\r\n        }\r\n\r\n        if (this.precision !== null && this.precision !== undefined) {\r\n            return n.toFixed(this._getPrecision());\r\n        }\r\n        return n.toFixed();\r\n    }\r\n\r\n    _getRealValue(_n: BigNumber) {\r\n        const n = this.toFixed(_n);\r\n        return this.bigNumber ? n : Number(n);\r\n    }\r\n\r\n    getRealValue(val: any) {\r\n        if (this.parser) {\r\n            if (!isNaN(Number(val))) {\r\n                return val;\r\n            } else {\r\n                return this.parser(val);\r\n            }\r\n        }\r\n\r\n        let _n = this.validInterval(new BigNumber(val));\r\n        if (_n.isNaN()) {\r\n\r\n            if (this.canNull) {\r\n                return null;\r\n            } else {\r\n                const minBigNum = new BigNumber('' + this.min);\r\n                const maxBigNum = new BigNumber('' + this.max);\r\n\r\n                if (!minBigNum.isNaN()) {\r\n                    _n = minBigNum;\r\n                } else if (!maxBigNum.isNaN()) {\r\n                    _n = maxBigNum;\r\n                } else {\r\n                    return 0;\r\n                }\r\n            }\r\n\r\n            // if (this.canNull || minBigNum.isNaN()) {\r\n            //     return null;\r\n            // } else {\r\n            //     _n = minBigNum;\r\n            // }\r\n        }\r\n\r\n        return this._getRealValue(_n);\r\n    }\r\n\r\n    private buildFormatOptions() {\r\n        return {\r\n            prefix: this.prefix,\r\n            suffix: this.suffix,\r\n            decimalSeparator: this.decimalSeparator,\r\n            groupSeparator: this.useThousands ? this.groupSeparator : '',\r\n            groupSize: this.groupSize\r\n        };\r\n    }\r\n\r\n    isEmpty(val: any) {\r\n        return isNaN(val) || val === null || val === undefined || val === '';\r\n    }\r\n\r\n    validInterval(bn: BigNumber, emit = true) {\r\n        let _bnVal = bn;\r\n\r\n        if (!this.isEmpty(this.max)) {\r\n            const _maxBigNum = new BigNumber('' + this.max);\r\n            if (bn.gt(_maxBigNum) ) {\r\n                _bnVal = _maxBigNum;\r\n                const _realValue = this._getRealValue(_maxBigNum);\r\n                if (emit) {\r\n                    this._modelChanged(_realValue);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!this.isEmpty(this.min)) {\r\n            const _minBigNum = new BigNumber('' + this.min);\r\n            if (bn.lt(_minBigNum)) {\r\n                _bnVal = _minBigNum;\r\n                const _realValue = this._getRealValue(_minBigNum);\r\n                if (emit) {\r\n                    this._modelChanged(_realValue);\r\n                }\r\n            }\r\n        }\r\n\r\n        return _bnVal;\r\n    }\r\n\r\n    format(val: any, emit = true) {\r\n        val = this.cleanNumString(val);\r\n        const bigVal = new BigNumber(val);\r\n        let _bgNum = bigVal;\r\n        if (emit) {\r\n            _bgNum = this.validInterval(bigVal);\r\n        }\r\n\r\n        if (_bgNum.valueOf() == '0' && !this.showZero) {\r\n            return '';\r\n        }\r\n\r\n        if (this.canNull && bigVal.isNaN()) {\r\n            return '';\r\n        } else {\r\n            if (_bgNum.isNaN()) {\r\n                return '';\r\n            }\r\n        }\r\n\r\n        if (this.formatter) {\r\n            return this.formatter(_bgNum.toNumber());\r\n        } else {\r\n\r\n            if (!Object.keys(this.formatOptions).length) {\r\n                this.formatOptions = this.buildFormatOptions();\r\n            }\r\n\r\n            return this._toFormat(_bgNum, this.formatOptions);\r\n        }\r\n    }\r\n\r\n    _toFormat(_bgNum: BigNumber, fmt: NumberFormatter) {\r\n        if (this.precision !== null && this.precision !== undefined) {\r\n            return _bgNum.toFormat(this._getPrecision(), fmt);\r\n        } else {\r\n            return _bgNum.toFormat(fmt);\r\n        }\r\n    }\r\n\r\n    cleanNumString(val: any) {\r\n        val = (val === null || val === undefined || val === '') ? '' : String(val);\r\n        val = val.replace(new RegExp(this.prefix, 'g'), '')\r\n                    .replace(new RegExp(this.suffix, 'g'), '').replace(/\\,/g, '');\r\n        if (this.groupSeparator && this.groupSeparator !== ',') {\r\n            val = val.replace(new RegExp(`\\\\${this.groupSeparator}`, 'g'), '');\r\n        }\r\n\r\n        if (this.decimalSeparator && this.decimalSeparator !== '.') {\r\n            val = val.replace(new RegExp(`\\\\${this.decimalSeparator}`, 'g'), '.');\r\n        }\r\n        return val;\r\n    }\r\n\r\n    updateValue(val) {\r\n        val = this.cleanNumString(val);\r\n        this._realValue = this.getRealValue(val);\r\n        this.value = this.format(this._realValue);\r\n        this.el.nativeElement.value = this.value;\r\n    }\r\n\r\n\r\n    private updateControlValue() {\r\n        let _val = this.cleanNumString(this.value);\r\n        if (this.parser) {\r\n            _val = this.parser(this.value);\r\n        }\r\n\r\n        if (this.isEmpty(this._realValue) && this.isEmpty(_val)) {\r\n            return;\r\n        }\r\n\r\n        const rv = new BigNumber(this._realValue);\r\n        const cv = new BigNumber(_val); // display value\r\n\r\n        if (rv.isNaN() && cv.isNaN()) {\r\n            return;\r\n        }\r\n\r\n        // if (!rv.eq(cv)) {\r\n        // }\r\n\r\n        if (this._ngControl ) {\r\n            const formgroup =  this._ngControl['formDirective'];\r\n            if (formgroup) {\r\n                let ctrl = formgroup.control.get(this._ngControl.name);\r\n\r\n                if (!ctrl && formgroup.control.controls) {\r\n                    ctrl = formgroup.control.controls[this._ngControl.name];\r\n                }\r\n\r\n                if (ctrl) {\r\n                    if (ctrl.value !== this._realValue) {\r\n                        ctrl.setValue(this._realValue);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    writeValue(val: any): void {\r\n        this._realValue = val;\r\n        this.value = this.format(this._realValue, false);\r\n\r\n        this.updateControlValue();\r\n    }\r\n\r\n    registerOnChange(fn: any): void {\r\n        this.onChangeCallback = fn;\r\n    }\r\n\r\n    registerOnTouched(fn: any): void {\r\n        this.onTouchedCallback = fn;\r\n    }\r\n\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","import { Directive, ElementRef, Input } from '@angular/core';\r\nimport { HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n    // tslint:disable-next-line: directive-selector\r\n    selector: '[number-only]'\r\n})\r\nexport class NumberOnlyDirective {\r\n\r\n    @Input() precision: number;\r\n\r\n    constructor(private element: ElementRef) {}\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(e: KeyboardEvent) {\r\n        const val = (e.target as any).value;\r\n        const key = e.key;\r\n        const checkKeys = ['.', '-', '%'];\r\n        const selectionVal = this.getSelectionValue(e.target);\r\n        if (val && checkKeys.indexOf(key) > -1 && val.indexOf(key) > -1  && !(selectionVal && selectionVal.indexOf(key) > -1) ) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        if (\r\n            [46, 8, 9, 27, 13, 110, 190, 173].indexOf(e.keyCode) !== -1 ||\r\n            // åè®¸å¨é: Ctrl+A\r\n            (e.keyCode === 65 && (e.ctrlKey || e.metaKey)) ||\r\n            // åè®¸å¤å¶: Ctrl+C\r\n            (e.keyCode === 67 && (e.ctrlKey || e.metaKey)) ||\r\n            // åè®¸ç²è´´: Ctrl+V\r\n            (e.keyCode === 86 && (e.ctrlKey || e.metaKey)) ||\r\n            // åè®¸åªå: Ctrl+X\r\n            (e.keyCode === 88 && (e.ctrlKey || e.metaKey)) ||\r\n            // åè®¸: homeï¼å¤´ï¼, endï¼å°¾ï¼, leftï¼å·¦ç§»ï¼, rightï¼å³ç§»ï¼\r\n            (e.keyCode >= 35 && e.keyCode <= 39) ||\r\n            e.keyCode === 189 || e.keyCode === 109\r\n        ) {\r\n            // let it happen, don't do anything\r\n            return;\r\n        }\r\n        // ç¡®ä¿æ°å­ä»¥å¤çæ¡ä»¶è¢«æç»æ§è¡é»è®¤å¨ä½\r\n        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) && (e.keyCode < 96 || e.keyCode > 105)) {\r\n            e.preventDefault();\r\n        }\r\n\r\n        // å¤æ­å½åå°æ°ç²¾åº¦\r\n        if (val.indexOf('.') > -1 && this.precision) {\r\n            const curPos = (e.target as any).selectionStart;\r\n            const selectionEnd = (e.target as any).selectionEnd;\r\n            const _precision = val.split('.')[1].length;\r\n\r\n            const dotPos = val.indexOf('.');\r\n            if (curPos > dotPos) {\r\n                const selectionText = val.substring(curPos, selectionEnd);\r\n                if (_precision - selectionText.length >= Number(this.precision)) {\r\n                    e.preventDefault();\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getSelectionValue(target) {\r\n        const start = (target as any).selectionStart;\r\n        const end = (target as any).selectionEnd;\r\n        return target.value.substring(start, end);\r\n    }\r\n\r\n\r\n}\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { BigNumber } from 'bignumber.js';\r\n\r\nimport {\r\n    Component, forwardRef, Input, Output,\r\n    AfterViewInit, ViewChild, ElementRef, OnDestroy, SimpleChanges,\r\n    EventEmitter,\r\n    OnInit,\r\n    OnChanges\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { NumberSpinnerComponent } from './number-spinner.component';\r\nimport { PopoverDirective } from '@farris/ui-popover';\r\n\r\n@Component({\r\n    selector: 'farris-number-range',\r\n    templateUrl: './number-range.component.html',\r\n    styleUrls: ['./number.component.scss'],\r\n    providers: [\r\n        {\r\n            provide: NG_VALUE_ACCESSOR,\r\n            useExisting: forwardRef(() => NumberRangeComponent),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class NumberRangeComponent extends NumberSpinnerComponent implements AfterViewInit, OnDestroy, OnInit, OnChanges {\r\n\r\n    @Input() beginPlaceHolder = '';\r\n    @Input() endPlaceHolder = '';\r\n\r\n    @ViewChild('inputPrev') inputPrev: ElementRef;\r\n    @ViewChild('inputNext') inputNext: ElementRef;\r\n    @ViewChild('prevWrapper') prevWrapper: ElementRef;\r\n    @ViewChild('nextWrapper') nextWrapper: ElementRef;\r\n    @ViewChild('popover') popover: PopoverDirective;\r\n\r\n    @Input() separator = '~';\r\n\r\n    @Input()\r\n    set beginValue(value) {\r\n        this.prevValue = this.format(value);\r\n        // å¼å§çå®æ°å¼\r\n        this._beginValue = this.isEmpty(value) ? '' : value;\r\n    }\r\n\r\n    @Input()\r\n    set endValue(value) {\r\n        this.nextValue = this.format(value);\r\n        // ç»æçå®æ°å¼\r\n        this._endValue = this.isEmpty(value) ? '' : value;\r\n    }\r\n\r\n    private __value = '';\r\n    @Input()\r\n    get value(): any {\r\n        return this.__value;\r\n    }\r\n\r\n    set value(v: any) {\r\n        if (v !== this.__value) {\r\n            this.__value = v === '~' ? '' : v;\r\n        }\r\n    }\r\n\r\n    @Output() beginValueChange = new EventEmitter();\r\n    @Output() endValueChange = new EventEmitter();\r\n\r\n    /* å¼å§æ°å­å±ç¤ºå¼ */\r\n    prevValue: any = '';\r\n    /* ç»ææ°å­å±ç¤ºå¼ */\r\n    nextValue: any = '';\r\n\r\n    private _beginValue = '';\r\n    private _endValue = '';\r\n    get preNumValue() {\r\n        const v = this.getRealValue(this.parser ? this.prevValue : this._beginValue);\r\n        if (this.canNull && this.isEmpty(v)) {\r\n            return '';\r\n        } else {\r\n            return v || 0;\r\n        }\r\n    }\r\n\r\n    get nextNumValue() {\r\n        const v = this.getRealValue(this.parser ? this.nextValue : this._endValue);\r\n        if (this.canNull && this.isEmpty(v)) {\r\n            return '';\r\n        } else {\r\n            return v || 0;\r\n        }\r\n    }\r\n\r\n    private documentClick;\r\n    private focusState = {\r\n        isFocus: false,\r\n        target: ''    // begin | end\r\n    };\r\n\r\n    ngOnInit(): void {\r\n        super.ngOnInit();\r\n        this.showButton = false;\r\n\r\n        this.initPlaceHolderInfo();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.documentClick = this.render.listen(document, 'click', e => {\r\n            this.render.setStyle(this.prevWrapper.nativeElement, 'flex', 1);\r\n            this.render.setStyle(this.nextWrapper.nativeElement, 'flex', 1);\r\n        });\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        super.ngOnChanges(changes);\r\n        if (changes.value && !changes.value.isFirstChange()) {\r\n            this.setValue(changes.value.currentValue);\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.documentClick) {\r\n            this.documentClick();\r\n        }\r\n    }\r\n\r\n    private initPlaceHolderInfo() {\r\n        if (!this.beginPlaceHolder) {\r\n            this.beginPlaceHolder = this.localeService.getValue('numberSpinner.range.begin') || this.placeholder;\r\n        }\r\n        if (!this.endPlaceHolder) {\r\n            this.endPlaceHolder =  this.localeService.getValue('numberSpinner.range.end') || this.placeholder;\r\n        }\r\n    }\r\n\r\n    private getRangeValue() {\r\n        return this.preNumValue + this.separator + this.nextNumValue;\r\n    }\r\n\r\n    private getEndValue() {\r\n        return this.getRealValue(this.nextValue);\r\n    }\r\n    private getBeginValue() {\r\n        return this.getRealValue(this.prevValue);\r\n    }\r\n\r\n    getRealValue(val: any) {\r\n        if (this.parser) {\r\n            return this.parser(val);\r\n        }\r\n        let _n = this.validInterval(new BigNumber(val), false);\r\n        if (_n.isNaN()) {\r\n            const minBigNum = new BigNumber('' + this.min);\r\n            if (this.canNull || minBigNum.isNaN()) {\r\n                return null;\r\n            } else {\r\n                _n = minBigNum;\r\n            }\r\n        }\r\n\r\n        return this._getRealValue(_n) as any;\r\n    }\r\n\r\n    onModelChange(val, type?: string) {\r\n        if (type === 'begin') {\r\n            this._beginValue = val;\r\n        } else if (type === 'end') {\r\n            this._endValue = val;\r\n        }\r\n        this.value = this.getRangeValue();\r\n        this.onChangeCallback(this.value);\r\n        this.onTouchedCallback();\r\n\r\n        this.valueChange.emit(this.value);\r\n    }\r\n\r\n    onClick($event) {\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    onBlur(e: any, type: string) {\r\n        if (!this.readonly && !this.disabled) {\r\n            const tmpValue = e.value;\r\n            this.focusState = { isFocus: false, target: type };\r\n            if (type === 'begin') {\r\n                const nextVal = this.getEndValue();\r\n                const minValue = this.isEmpty(tmpValue)\r\n                    ? ''\r\n                    : this.isEmpty(nextVal)\r\n                        ? tmpValue\r\n                        : BigNumber.min(tmpValue, nextVal).toFixed();\r\n                // this.prevValue = this.format(minValue);\r\n                this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();\r\n                // this.beginValue = this.getRealValue(this.prevValue);\r\n                this.inputPrev.nativeElement.value = this.prevValue;\r\n                this.onModelChange(this._beginValue, type);\r\n            } else {\r\n                const beginVal = this.getBeginValue();\r\n                const maxValue = this.isEmpty(tmpValue)\r\n                    ? ''\r\n                    : this.isEmpty(beginVal)\r\n                        ? tmpValue\r\n                        : BigNumber.max(tmpValue, beginVal).toFixed();\r\n                // this.nextValue = this.format(maxValue);\r\n                // this.endValue = this.getRealValue(this.nextValue);\r\n                this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();\r\n                this.inputNext.nativeElement.value = this.nextValue;\r\n                this.onModelChange(this._endValue, type);\r\n            }\r\n        }\r\n\r\n        this.valueChange.emit(this.value);\r\n        if (type === 'begin') {\r\n            this.beginValueChange.emit(this.preNumValue);\r\n        } else {\r\n            this.endValueChange.emit(this.nextNumValue);\r\n        }\r\n\r\n        this.blur.emit();\r\n    }\r\n\r\n    onFocus(type?: string) {\r\n        if (!this.readonly && !this.disabled) {\r\n            this.focusState = { isFocus: true, target: type };\r\n            if (type === 'begin') {\r\n                this.inputPrev.nativeElement.value = this._beginValue;\r\n                this.inputPrev.nativeElement.setSelectionRange(0, this._beginValue.length);\r\n                this.expendWidth('begin', 3);\r\n            } else {\r\n                this.inputNext.nativeElement.value = this._endValue;\r\n                this.inputNext.nativeElement.setSelectionRange(0, this._endValue.length);\r\n                this.expendWidth('end', 3);\r\n            }\r\n        }\r\n\r\n        this.focus.emit(type);\r\n    }\r\n\r\n    expendWidth(which: string, num: number) {\r\n        let target: Element;\r\n        let other: Element;\r\n        if (which === 'begin') {\r\n            target = this.prevWrapper.nativeElement;\r\n            other = this.nextWrapper.nativeElement;\r\n        } else {\r\n            target = this.nextWrapper.nativeElement;\r\n            other = this.prevWrapper.nativeElement;\r\n        }\r\n        const { width } = target.getBoundingClientRect();\r\n        if (width < 150) {\r\n            this.render.setStyle(target, 'flex', num);\r\n            this.render.setStyle(other, 'flex', 1);\r\n        }\r\n    }\r\n\r\n    onMouseEnter(event) {\r\n        this.isActiveTip = this.isShowPopover();\r\n        if (this.nextValue && this.prevValue) {\r\n            this.popValue = this.prevValue + '~' + this.nextValue;\r\n        } else {\r\n            this.popValue = '';\r\n        }\r\n    }\r\n\r\n    isShowPopover() {\r\n        const { width } = this.el.nativeElement.getBoundingClientRect();\r\n        if (width && width < 200) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    onKeyDownRange($event: KeyboardEvent, typ: 'begin'|'end') {\r\n        if ($event.key === 'ArrowDown') {\r\n            $event.preventDefault();\r\n            this.down($event, typ);\r\n        }\r\n\r\n        if ($event.key === 'ArrowUp') {\r\n            $event.preventDefault();\r\n            this.up($event, typ);\r\n        }\r\n\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    writeValue(val: any): void {\r\n        this.setValue(val);\r\n    }\r\n\r\n    setValue(val: any) {\r\n        if (typeof val === 'string') {\r\n            const valArr = val.split(this.separator);\r\n            this._beginValue = valArr[0] ? valArr[0] : '';\r\n            this._endValue = valArr[1] ? valArr[1] : '';\r\n        } else {\r\n            this._beginValue = '';\r\n            this._beginValue = '';\r\n        }\r\n        this.prevValue = this.format(this._beginValue);\r\n        this.nextValue = this.format(this._endValue);\r\n    }\r\n\r\n\r\n    //#region ä¸ä¸æä½æé® æ ä¸ä¸æ¹åé®\r\n    up(e: Event, type: string) {\r\n        e.stopPropagation();\r\n        this._compute(type, 'up', (e.target as any).value);\r\n    }\r\n\r\n    down(e: Event, type: string) {\r\n        e.stopPropagation();\r\n        this._compute(type, 'down', (e.target as any).value);\r\n    }\r\n\r\n    private _compute(type: string, dir: 'up' | 'down', tagVal) {\r\n        const m = dir === 'up' ? 'plus' : 'minus';\r\n        // if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {\r\n        //     const bv = tagVal || 0;\r\n        //     const ev = this.getRealValue(this.nextValue);\r\n        //     const r = new BigNumber(bv)[m](Number(this.step));\r\n        //     let v = r.toFixed();\r\n        //     const minValue = BigNumber.min(v, ev);\r\n        //     if (!minValue.eq(v) && !this.isEmpty(ev)) {\r\n        //         v = ev;\r\n        //     }\r\n        //     this._beginValue = v;\r\n        //     // this.prevValue = this.format(v);\r\n        //     this.inputPrev.nativeElement.value = v;\r\n        //     this.onModelChange(v, type);\r\n        //     this.beginValueChange.emit(v);\r\n        // } else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {\r\n        //     const bv = this.getRealValue(this.prevValue);\r\n        //     const ev = tagVal || 0;\r\n        //     const r = new BigNumber(ev)[m](Number(this.step));\r\n        //     let v = r.toFixed();\r\n        //     const maxValue = BigNumber.max(bv, v);\r\n        //     if (!maxValue.eq(v) && !this.isEmpty(bv)) {\r\n        //         v = bv;\r\n        //     }\r\n        //     this._endValue = v;\r\n        //     // this.nextValue = this.format(v);\r\n        //     this.inputNext.nativeElement.value = v;\r\n        //     this.onModelChange(v, type);\r\n        //     this.endValueChange.emit(v);\r\n        // }\r\n\r\n        if (type === 'begin' && this.isDisableOfBtn(dir, this.prevValue)) {\r\n            const tmpValue = this.inputPrev.nativeElement.value;\r\n            const nextVal = this.getEndValue();\r\n            const bv = this.cleanNumString(tmpValue) || 0;\r\n            const r = new BigNumber(bv)[m](Number(this.step));\r\n            let v = r.toFixed();\r\n           \r\n            const minValue = this.isEmpty(v)\r\n                ? ''\r\n                : this.isEmpty(nextVal)\r\n                    ? v\r\n                    : BigNumber.min(v, nextVal).toFixed();\r\n            this.beginValue = this.validInterval(new BigNumber(minValue), false).toFixed();\r\n            this.inputPrev.nativeElement.value = this.prevValue;\r\n            this.onModelChange(this._beginValue, type);\r\n            this.beginValueChange.emit(this._beginValue);\r\n        } else if (type === 'end' && this.isDisableOfBtn(dir, this.nextValue)) {\r\n            const tmpValue = this.inputNext.nativeElement.value;\r\n            const beginVal = this.getBeginValue();\r\n            const bv = this.cleanNumString(tmpValue) || 0;\r\n            const r = new BigNumber(bv)[m](Number(this.step));\r\n            let v = r.toFixed();\r\n\r\n            const maxValue = this.isEmpty(v)\r\n                ? ''\r\n                : this.isEmpty(beginVal)\r\n                    ? v\r\n                    : BigNumber.max(v, beginVal).toFixed();\r\n            this.endValue = this.validInterval(new BigNumber(maxValue), false).toFixed();\r\n            this.inputNext.nativeElement.value = this.nextValue;\r\n            this.onModelChange(this._endValue, type);\r\n            this.endValueChange.emit(this._endValue);\r\n        }\r\n\r\n        this.valueChange.emit(this.value);\r\n        this.expendWidth(type, 3);\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NumberSpinnerComponent } from './number-spinner.component';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NumberOnlyDirective } from './number-only-directive';\r\nimport { PopoverModule } from '@farris/ui-popover';\r\nimport { NumberRangeComponent } from './number-range.component';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n@NgModule({\r\n    declarations: [\r\n        NumberSpinnerComponent, NumberOnlyDirective,\r\n        NumberRangeComponent\r\n    ],\r\n    imports: [\r\n        CommonModule, FormsModule,\r\n        PopoverModule.forRoot(),\r\n        LocaleModule.forRoot()\r\n    ],\r\n    exports: [NumberSpinnerComponent, NumberOnlyDirective,\r\n        NumberRangeComponent]\r\n})\r\nexport class NumberSpinnerModule {}\r\n"]}