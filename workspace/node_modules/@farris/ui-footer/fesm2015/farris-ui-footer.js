import { Injectable, Component, ContentChild, HostBinding, Input, NgModule, Directive, TemplateRef, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterService {
    constructor() { }
}
FooterService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FooterService.ctorParameters = () => [];
/** @nocollapse */ FooterService.ngInjectableDef = defineInjectable({ factory: function FooterService_Factory() { return new FooterService(); }, token: FooterService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterHeaderDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
        // 扩展样式
        this.extendCls = "";
    }
}
FooterHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFooterHeader]'
            },] }
];
/** @nocollapse */
FooterHeaderDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FooterHeaderDirective.propDecorators = {
    extendCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterHeaderToolbarExtendDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FooterHeaderToolbarExtendDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFooterHeaderToolbarExtend]'
            },] }
];
/** @nocollapse */
FooterHeaderToolbarExtendDirective.ctorParameters = () => [
    { type: TemplateRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterHeaderContentDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
        // 扩展样式
        this.extendCls = "";
    }
}
FooterHeaderContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFooterHeaderContent]'
            },] }
];
/** @nocollapse */
FooterHeaderContentDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FooterHeaderContentDirective.propDecorators = {
    extendCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterHeaderToolbarDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
        // 扩展样式
        this.extendCls = "";
    }
}
FooterHeaderToolbarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFooterHeaderToolbar]'
            },] }
];
/** @nocollapse */
FooterHeaderToolbarDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FooterHeaderToolbarDirective.propDecorators = {
    extendCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FooterComponent {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.cls = true;
        this.textCollapse = this.localeService.getValue('footer.collapseText');
        this.textExpand = this.localeService.getValue('footer.expandText');
        // 显示头部区域
        this.showHeader = true;
        // 没有用模板单独定义class
        this.headerCls = "";
        // 单独定义主内容区的class
        this.contentCls = "";
        // 展开状态
        this.collapseStatus = true;
        // 是否启用展开收起
        this.enableAccordion = true;
    }
    // 展开
    /**
     * @return {?}
     */
    get getCollapseCls() {
        if (this.enableAccordion) {
            return this.collapseStatus;
        }
        else {
            return false;
        }
    }
    // 启用展开收起
    /**
     * @return {?}
     */
    get enableAccordionCls() {
        return this.enableAccordion;
    }
    // 收起文字
    /**
     * @param {?} value
     * @return {?}
     */
    set collapseText(value) {
        if (value) {
            this.textCollapse = value;
        }
    }
    /**
     * @return {?}
     */
    get collapseText() {
        return this.textCollapse;
    }
    // 展开文字
    /**
     * @param {?} value
     * @return {?}
     */
    set expandText(value) {
        if (value) {
            this.textExpand = value;
        }
    }
    /**
     * @return {?}
     */
    get expandText() {
        return this.textExpand;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 收起还是展开
    /**
     * @param {?} ev
     * @return {?}
     */
    expadnOrCollapse(ev) {
        ev && ev.stopImmediatePropagation();
        this.collapseStatus = !this.collapseStatus;
    }
}
FooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-footer',
                template: `
   <footer class="f-cmp-footer-container">
      <ng-container *ngIf="showHeader&&headerDirective">
          <header class="f-cmp-footer-header" [ngClass]="headerDirective.extendCls">
              <ng-template  [ngTemplateOutlet]="headerDirective.templateRef"></ng-template> 
          </header>
      </ng-container>
      <ng-container *ngIf="showHeader&&!headerDirective">
        <header class="f-cmp-footer-header" [ngClass]="headerCls">
          <div class="f-content" *ngIf="headerContentDirective" [ngClass]="headerContentDirective.extendCls">
            <ng-template [ngTemplateOutlet]="headerContentDirective.templateRef"></ng-template> 
          </div>
          <ng-container *ngIf="headerToolbarDirective">
              <div class="f-toolbar" [ngClass]="headerToolbarDirective.extendCls">
                  <ng-template  [ngTemplateOutlet]="headerToolbarDirective.templateRef"></ng-template> 
              </div>
          </ng-container>
          <div class="f-toolbar" *ngIf="!headerToolbarDirective">
            <ng-template *ngIf="headerToolbarExtendDirective" [ngTemplateOutlet]="headerToolbarExtendDirective.templateRef"></ng-template> 
            <div class="toolbar--collapse" *ngIf="enableAccordion" (click)="expadnOrCollapse($event)">
                <span class="toobar--collapse-text">
                   <ng-container  *ngIf="collapseStatus">{{textCollapse}}</ng-container>
                   <ng-container  *ngIf="!collapseStatus">{{textExpand}}</ng-container>
                </span>              
                <i class="f-icon toolbar--collapse-icon"></i>
            </div>
          </div>
        </header>
      </ng-container> 
      <div class="f-cmp-footer-content" [ngClass]="contentCls">
        <ng-content></ng-content>
      </div>
   </footer>
  `
            }] }
];
/** @nocollapse */
FooterComponent.ctorParameters = () => [
    { type: LocaleService }
];
FooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-cmp-footer',] }],
    getCollapseCls: [{ type: HostBinding, args: ['class.f-state-collapse',] }],
    enableAccordionCls: [{ type: HostBinding, args: ['class.f-cmp-footer-accordion',] }],
    collapseText: [{ type: Input }],
    expandText: [{ type: Input }],
    showHeader: [{ type: Input }],
    headerCls: [{ type: Input }],
    contentCls: [{ type: Input }],
    collapseStatus: [{ type: Input }],
    enableAccordion: [{ type: Input }],
    headerDirective: [{ type: ContentChild, args: [FooterHeaderDirective,] }],
    headerContentDirective: [{ type: ContentChild, args: [FooterHeaderContentDirective,] }],
    headerToolbarExtendDirective: [{ type: ContentChild, args: [FooterHeaderToolbarExtendDirective,] }],
    headerToolbarDirective: [{ type: ContentChild, args: [FooterHeaderToolbarDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisFooterModule {
}
FarrisFooterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FooterComponent, FooterHeaderDirective, FooterHeaderContentDirective, FooterHeaderToolbarDirective, FooterHeaderToolbarExtendDirective],
                imports: [
                    CommonModule,
                    LocaleModule
                ],
                exports: [FooterComponent, FooterHeaderDirective, FooterHeaderContentDirective, FooterHeaderToolbarDirective, FooterHeaderToolbarExtendDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FooterService, FooterComponent, FarrisFooterModule, FooterHeaderDirective, FooterHeaderToolbarExtendDirective, FooterHeaderContentDirective, FooterHeaderToolbarDirective };

//# sourceMappingURL=farris-ui-footer.js.map