/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, Renderer2, ViewChild, Output, EventEmitter, NgZone } from '@angular/core';
import { AngularResizableDirective } from '@farris/ui-draggable';
import { LayoutComponent } from './../layout.component';
export class LayoutPanelComponent {
    /**
     * @param {?} el
     * @param {?} render2
     * @param {?} layout
     * @param {?} ngZone
     */
    constructor(el, render2, layout, ngZone) {
        this.el = el;
        this.render2 = render2;
        this.layout = layout;
        this.ngZone = ngZone;
        this.minHeight = 100;
        this.minWidth = 100;
        this.title = '';
        this.iconCls = '';
        this.overflow = 'auto';
        this._resizable = true;
        this.bsColClass = '';
        this.showBorder = true;
        this.resizing = new EventEmitter();
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get split() {
        return this._resizable;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set split(val) {
        this._resizable = val;
    }
    /**
     * @private
     * @return {?}
     */
    setStyles() {
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let width;
            /** @type {?} */
            let height;
            /** @type {?} */
            const rect = this.el.nativeElement.getBoundingClientRect();
            if (this.height) {
                height = this.height;
                this.render2.setStyle(this.el.nativeElement, 'height', height + 'px');
                this.render2.setStyle(this.panel.nativeElement, 'height', height + 'px');
            }
            if (this.width) {
                width = this.width;
                if (rect.width > this.width) {
                    width = rect.width;
                    this.width = width;
                }
                this.render2.setStyle(this.el.nativeElement, 'width', width + 'px');
                this.render2.setStyle(this.panel.nativeElement, 'width', width + 'px');
                this.resetFlex();
            }
        }));
        // });
    }
    /**
     * @private
     * @return {?}
     */
    getrzHandler() {
        if (this.region) {
            /** @type {?} */
            let rzdir = '';
            switch (this.region) {
                case 'west':
                    rzdir = 'e';
                    break;
                case 'east':
                    rzdir = 'w';
                    break;
                case 'north':
                    rzdir = 's';
                    break;
                case 'south':
                    rzdir = 'n';
                    break;
            }
            this.rzHandler = rzdir;
        }
        else {
            this.rzHandler = '';
        }
    }
    /**
     * @return {?}
     */
    isCenterPanel() {
        return this.region === 'center';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.width && !changes.width.isFirstChange()) {
            this.setStyles();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBsClass() {
        return Array.from(this.el.nativeElement.classList).find((/**
         * @param {?} c
         * @return {?}
         */
        (c) => c.indexOf('col-') > -1));
    }
    /**
     * @private
     * @return {?}
     */
    hasBsClass() {
        return this.getBsClass() !== undefined;
    }
    /**
     * @private
     * @return {?}
     */
    initSize() {
        this.setStyles();
        if (this.region) {
            if (this.region === 'west' || this.region === 'east') {
                this.render2.setStyle(this.panel.nativeElement, 'height', '100%');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initClass() {
        if (this.isCenterPanel()) {
            this.render2.addClass(this.panel.nativeElement, this.overflow == 'auto' ? 'flex-fill' : 'f-utils-fill');
            if (this.el.nativeElement.parentElement.attributes['layout-panel']) {
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            this.render2.addClass(this.el.nativeElement, 'd-flex');
            this.render2.addClass(this.el.nativeElement, 'f-utils-fill');
        }
        if (this.showBorder) {
            this.render2.addClass(this.panel.nativeElement, 'layout-border');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initSize();
        this.initClass();
        this.getrzHandler();
        this.bsColClass = this.getBsClass();
        this.layout.panels.push(this);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResizeStart($event) {
        this.resetFlex();
    }
    /**
     * @private
     * @return {?}
     */
    resetFlex() {
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'flex', 'none');
            this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');
        }
    }
    /**
     * @param {?} size
     * @return {?}
     */
    resize(size) {
        this.setStyles();
        this.onResized({ size });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onReizing($event) {
        this.updatePanelSize($event);
        // console.log($event);
        this.resizing.emit({ target: this, size: $event.size });
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    updatePanelSize($event) {
        if (this.region === 'south') {
            this.render2.setStyle(this.panel.nativeElement, 'top', 0);
        }
        if (this.region === 'east') {
            this.render2.setStyle(this.panel.nativeElement, 'left', 0);
        }
        if (this.region === 'south' || this.region === 'north') {
            this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');
        }
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.region === 'south' || this.region === 'north') {
            this.height = $event.size.height;
        }
        if (this.region === 'west' || this.region === 'east') {
            this.width = $event.size.width;
        }
        this.updatePanelSize($event);
        this.layout.setPanelMaxSize();
        this.resized.emit($event.size);
        this.layout.getPanel('center').resized.emit($event.size);
    }
}
LayoutPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'layout-panel',
                template: `
        <div #panel #ngResizable class="layout-panel"
            [ngResizable]="split" [attr.region]="region"
            [rzHandles]="rzHandler"
            [rzMinWidth]="minWidth"
            [rzMaxWidth]="maxWidth"
            [rzMinHeight]="minHeight"
            [rzMaxHeight]="maxHeight"
            (rzResizing)="onReizing($event)"
            (rzStop) = "onResized($event)"
            (rzStart) ="onResizeStart($event)" >

            <layout-panel-title *ngIf="title" [title]="title"></layout-panel-title>

            <ng-content></ng-content>
        <div>
    `,
                styles: [".layout-border{border:1px solid #f2f2f2}.layout-panel{background:#fff}.ng-resizeable-bar{position:relative}.ng-resizable-w>.ng-resizeable-bar{right:1px;height:100%;width:5px}.ng-resizable-e>.ng-resizeable-bar{left:3px;height:100%;width:5px}.ng-resizable-s>.ng-resizeable-bar{top:3px;width:100%;height:5px}.ng-resizable-n>.ng-resizeable-bar{bottom:0;width:100%;height:5px}.ng-resizable-handle:hover>.ng-resizeable-bar{background-color:#bababa}.ng-resizable-handle:active>.ng-resizeable-bar{background-color:#5b5b5b}:host{padding:0}"]
            }] }
];
/** @nocollapse */
LayoutPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LayoutComponent },
    { type: NgZone }
];
LayoutPanelComponent.propDecorators = {
    region: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    minHeight: [{ type: Input }],
    minWidth: [{ type: Input }],
    maxHeight: [{ type: Input }],
    maxWidth: [{ type: Input }],
    title: [{ type: Input }],
    iconCls: [{ type: Input }],
    overflow: [{ type: Input }],
    split: [{ type: Input }],
    showBorder: [{ type: Input }],
    resizing: [{ type: Output }],
    resized: [{ type: Output }],
    panel: [{ type: ViewChild, args: ['panel',] }],
    ngResizable: [{ type: ViewChild, args: [AngularResizableDirective,] }]
};
if (false) {
    /** @type {?} */
    LayoutPanelComponent.prototype.region;
    /** @type {?} */
    LayoutPanelComponent.prototype.height;
    /** @type {?} */
    LayoutPanelComponent.prototype.width;
    /** @type {?} */
    LayoutPanelComponent.prototype.minHeight;
    /** @type {?} */
    LayoutPanelComponent.prototype.minWidth;
    /** @type {?} */
    LayoutPanelComponent.prototype.maxHeight;
    /** @type {?} */
    LayoutPanelComponent.prototype.maxWidth;
    /** @type {?} */
    LayoutPanelComponent.prototype.title;
    /** @type {?} */
    LayoutPanelComponent.prototype.iconCls;
    /** @type {?} */
    LayoutPanelComponent.prototype.overflow;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype._resizable;
    /** @type {?} */
    LayoutPanelComponent.prototype.rzHandler;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.bsColClass;
    /** @type {?} */
    LayoutPanelComponent.prototype.showBorder;
    /** @type {?} */
    LayoutPanelComponent.prototype.resizing;
    /** @type {?} */
    LayoutPanelComponent.prototype.resized;
    /** @type {?} */
    LayoutPanelComponent.prototype.panel;
    /** @type {?} */
    LayoutPanelComponent.prototype.ngResizable;
    /** @type {?} */
    LayoutPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.layout;
    /**
     * @type {?}
     * @private
     */
    LayoutPanelComponent.prototype.ngZone;
}
export class LayoutPanelTitleComponent {
    constructor() {
        this.title = '';
        this.iconCls = '';
    }
}
LayoutPanelTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'layout-panel-title',
                template: `
        <div class="d-flex flex-row" style="height: 28px; line-height: 28px">
            <div class="layout-panel-title">
                <span *ngIf="iconCls" [class]="iconCls"></span>
                {{ title }}
            </div>
            <div class="layout-panel-title-tools flex-fill">

            </div>
        </div>
    `
            }] }
];
LayoutPanelTitleComponent.propDecorators = {
    title: [{ type: Input }],
    iconCls: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LayoutPanelTitleComponent.prototype.title;
    /** @type {?} */
    LayoutPanelTitleComponent.prototype.iconCls;
}
//# sourceMappingURL=data:application/json;base64,