/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, ViewEncapsulation, NgZone } from '@angular/core';
/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-24 15:58:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-04-08 19:02:25
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { Component, Input, HostBinding, ElementRef, Renderer2 } from '@angular/core';
export class LayoutComponent {
    /**
     * @param {?} el
     * @param {?} render2
     * @param {?} injector
     */
    constructor(el, render2, injector) {
        this.el = el;
        this.render2 = render2;
        this.injector = injector;
        this.showBorder = true;
        // h: 水平排列; v: 垂直排列
        this.direction = 'h';
        this.fill = false;
        this.myclass = 'd-flex';
        this.panels = [];
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.checkPanels();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.split) {
                /** @type {?} */
                let margin = '';
                switch (p.region) {
                    case 'north':
                        margin = 'marginTop';
                        break;
                    case 'south':
                        margin = 'marginBottom';
                        break;
                    case 'west':
                        margin = 'marginLeft';
                        break;
                    case 'east':
                        margin = 'marginRight';
                        break;
                }
                this.render2.setStyle(this.getPanel('center').el.nativeElement, margin, '5px');
            }
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => this.setPanelMaxSize()));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.direction === 'h') {
            this.myclass += ' flex-row';
        }
        else {
            this.myclass += ' flex-column';
        }
        if (this.fill) {
            if (this.isInLayoutPanel()) {
                this.myclass += ' flex-fill';
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            else {
                this.myclass += ' layout-fill';
            }
        }
        else {
            if (this.width) {
                this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');
            }
            if (this.height) {
                this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getLayoutSize() {
        /** @type {?} */
        const size = {
            width: this.el.nativeElement.clientWidth,
            height: this.el.nativeElement.clientHeight
        };
        return size;
    }
    /**
     * @return {?}
     */
    setPanelMaxSize() {
        /** @type {?} */
        const layoutSize = this.getLayoutSize();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.region !== 'center') {
                /** @type {?} */
                const minWidth = p.minWidth || 100;
                /** @type {?} */
                const minHeight = p.minHeight || 100;
                if (p.region === 'west' && layoutSize.width) {
                    /** @type {?} */
                    const east = this.getPanel('east');
                    if (!east) {
                        p.maxWidth = layoutSize.width - minWidth;
                    }
                    else {
                        p.maxWidth = layoutSize.width - east.width - minWidth;
                    }
                }
                if (p.region === 'east' && layoutSize.width) {
                    /** @type {?} */
                    const west = this.getPanel('west');
                    if (!west) {
                        p.maxWidth = layoutSize.width - minWidth;
                    }
                    else {
                        p.maxWidth = layoutSize.width - west.width - minWidth;
                    }
                }
                if (p.region === 'north' && layoutSize.height) {
                    /** @type {?} */
                    const south = this.getPanel('south');
                    if (!south) {
                        p.maxHeight = layoutSize.height - minHeight;
                    }
                    else {
                        p.maxHeight = layoutSize.height - south.height - minHeight;
                    }
                }
                if (p.region === 'south' && layoutSize.height) {
                    /** @type {?} */
                    const north = this.getPanel('north');
                    if (!north) {
                        p.maxHeight = layoutSize.height - minHeight;
                    }
                    else {
                        p.maxHeight = layoutSize.height - north.height - minHeight;
                    }
                }
            }
        }));
    }
    /**
     * @param {?} region
     * @return {?}
     */
    getPanel(region) {
        return this.panels.find((/**
         * @param {?} p
         * @return {?}
         */
        p => p.region === region));
    }
    /**
     * @private
     * @return {?}
     */
    checkPanels() {
        if (this.panels && this.panels.length) {
            /** @type {?} */
            const regions = this.panels.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.region));
            if (this.unique(regions).length === regions.length) {
                if (this.direction === 'h') {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'north' || r === 'south'))) {
                        throw new Error('水平方向排列时，只能包含 east 或者 west');
                    }
                }
                else {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'west' || r === 'east'))) {
                        throw new Error('水平方向排列时，只能包含 north 或者 south');
                    }
                }
                return true;
            }
            else {
                throw new Error('layout 布局容器中具有重复的panel。');
            }
        }
        return true;
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    unique(arr) {
        /** @type {?} */
        const tmp = new Set(arr);
        return Array.from(tmp);
    }
    /**
     * @private
     * @return {?}
     */
    isInLayoutPanel() {
        return !!this.el.nativeElement.parentElement.attributes['layout-panel'];
    }
}
LayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'farrisui-layout,farris-layout,layout',
                template: "<ng-container *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='north']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='west']\"></ng-content>\r\n</ng-container>\r\n\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-container  *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='south']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='east']\"></ng-content>\r\n</ng-container>",
                encapsulation: ViewEncapsulation.Emulated,
                styles: [`
        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}
        `]
            }] }
];
/** @nocollapse */
LayoutComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
LayoutComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    showBorder: [{ type: Input }],
    direction: [{ type: Input }],
    fill: [{ type: Input }],
    myclass: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    LayoutComponent.prototype.width;
    /** @type {?} */
    LayoutComponent.prototype.height;
    /** @type {?} */
    LayoutComponent.prototype.showBorder;
    /** @type {?} */
    LayoutComponent.prototype.direction;
    /** @type {?} */
    LayoutComponent.prototype.fill;
    /** @type {?} */
    LayoutComponent.prototype.myclass;
    /** @type {?} */
    LayoutComponent.prototype.panels;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    LayoutComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,