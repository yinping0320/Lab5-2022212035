(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@farris/ui-draggable')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-layout', ['exports', '@angular/core', '@angular/common', '@farris/ui-draggable'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-layout'] = {}),global.ng.core,global.ng.common,global.uiDraggable));
}(this, (function (exports,core,common,uiDraggable) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LayoutComponent = /** @class */ (function () {
        function LayoutComponent(el, render2, injector) {
            this.el = el;
            this.render2 = render2;
            this.injector = injector;
            this.showBorder = true;
            // h: 水平排列; v: 垂直排列
            this.direction = 'h';
            this.fill = false;
            this.myclass = 'd-flex';
            this.panels = [];
            this.ngZone = this.injector.get(core.NgZone);
        }
        /**
         * @return {?}
         */
        LayoutComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init();
            };
        /**
         * @return {?}
         */
        LayoutComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.checkPanels();
                this.panels.forEach(( /**
                 * @param {?} p
                 * @return {?}
                 */function (p) {
                    if (p.split) {
                        /** @type {?} */
                        var margin = '';
                        switch (p.region) {
                            case 'north':
                                margin = 'marginTop';
                                break;
                            case 'south':
                                margin = 'marginBottom';
                                break;
                            case 'west':
                                margin = 'marginLeft';
                                break;
                            case 'east':
                                margin = 'marginRight';
                                break;
                        }
                        _this.render2.setStyle(_this.getPanel('center').el.nativeElement, margin, '5px');
                    }
                }));
                this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    setTimeout(( /**
                     * @return {?}
                     */function () { return _this.setPanelMaxSize(); }));
                }));
            };
        /**
         * @private
         * @return {?}
         */
        LayoutComponent.prototype.init = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.direction === 'h') {
                    this.myclass += ' flex-row';
                }
                else {
                    this.myclass += ' flex-column';
                }
                if (this.fill) {
                    if (this.isInLayoutPanel()) {
                        this.myclass += ' flex-fill';
                        this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
                    }
                    else {
                        this.myclass += ' layout-fill';
                    }
                }
                else {
                    if (this.width) {
                        this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');
                    }
                    if (this.height) {
                        this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        LayoutComponent.prototype.getLayoutSize = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var size = {
                    width: this.el.nativeElement.clientWidth,
                    height: this.el.nativeElement.clientHeight
                };
                return size;
            };
        /**
         * @return {?}
         */
        LayoutComponent.prototype.setPanelMaxSize = /**
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var layoutSize = this.getLayoutSize();
                this.panels.forEach(( /**
                 * @param {?} p
                 * @return {?}
                 */function (p) {
                    if (p.region !== 'center') {
                        /** @type {?} */
                        var minWidth = p.minWidth || 100;
                        /** @type {?} */
                        var minHeight = p.minHeight || 100;
                        if (p.region === 'west' && layoutSize.width) {
                            /** @type {?} */
                            var east = _this.getPanel('east');
                            if (!east) {
                                p.maxWidth = layoutSize.width - minWidth;
                            }
                            else {
                                p.maxWidth = layoutSize.width - east.width - minWidth;
                            }
                        }
                        if (p.region === 'east' && layoutSize.width) {
                            /** @type {?} */
                            var west = _this.getPanel('west');
                            if (!west) {
                                p.maxWidth = layoutSize.width - minWidth;
                            }
                            else {
                                p.maxWidth = layoutSize.width - west.width - minWidth;
                            }
                        }
                        if (p.region === 'north' && layoutSize.height) {
                            /** @type {?} */
                            var south = _this.getPanel('south');
                            if (!south) {
                                p.maxHeight = layoutSize.height - minHeight;
                            }
                            else {
                                p.maxHeight = layoutSize.height - south.height - minHeight;
                            }
                        }
                        if (p.region === 'south' && layoutSize.height) {
                            /** @type {?} */
                            var north = _this.getPanel('north');
                            if (!north) {
                                p.maxHeight = layoutSize.height - minHeight;
                            }
                            else {
                                p.maxHeight = layoutSize.height - north.height - minHeight;
                            }
                        }
                    }
                }));
            };
        /**
         * @param {?} region
         * @return {?}
         */
        LayoutComponent.prototype.getPanel = /**
         * @param {?} region
         * @return {?}
         */
            function (region) {
                return this.panels.find(( /**
                 * @param {?} p
                 * @return {?}
                 */function (p) { return p.region === region; }));
            };
        /**
         * @private
         * @return {?}
         */
        LayoutComponent.prototype.checkPanels = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.panels && this.panels.length) {
                    /** @type {?} */
                    var regions = this.panels.map(( /**
                     * @param {?} p
                     * @return {?}
                     */function (p) { return p.region; }));
                    if (this.unique(regions).length === regions.length) {
                        if (this.direction === 'h') {
                            if (regions.find(( /**
                             * @param {?} r
                             * @return {?}
                             */function (r) { return r === 'north' || r === 'south'; }))) {
                                throw new Error('水平方向排列时，只能包含 east 或者 west');
                            }
                        }
                        else {
                            if (regions.find(( /**
                             * @param {?} r
                             * @return {?}
                             */function (r) { return r === 'west' || r === 'east'; }))) {
                                throw new Error('水平方向排列时，只能包含 north 或者 south');
                            }
                        }
                        return true;
                    }
                    else {
                        throw new Error('layout 布局容器中具有重复的panel。');
                    }
                }
                return true;
            };
        /**
         * @private
         * @param {?} arr
         * @return {?}
         */
        LayoutComponent.prototype.unique = /**
         * @private
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                /** @type {?} */
                var tmp = new Set(arr);
                return Array.from(tmp);
            };
        /**
         * @private
         * @return {?}
         */
        LayoutComponent.prototype.isInLayoutPanel = /**
         * @private
         * @return {?}
         */
            function () {
                return !!this.el.nativeElement.parentElement.attributes['layout-panel'];
            };
        LayoutComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farrisui-layout,farris-layout,layout',
                        template: "<ng-container *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='north']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='west']\"></ng-content>\r\n</ng-container>\r\n\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-container  *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='south']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='east']\"></ng-content>\r\n</ng-container>",
                        encapsulation: core.ViewEncapsulation.Emulated,
                        styles: ["\n        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}\n        "]
                    }] }
        ];
        /** @nocollapse */
        LayoutComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.Injector }
            ];
        };
        LayoutComponent.propDecorators = {
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            showBorder: [{ type: core.Input }],
            direction: [{ type: core.Input }],
            fill: [{ type: core.Input }],
            myclass: [{ type: core.HostBinding, args: ['class',] }]
        };
        return LayoutComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LayoutPanelComponent = /** @class */ (function () {
        function LayoutPanelComponent(el, render2, layout, ngZone) {
            this.el = el;
            this.render2 = render2;
            this.layout = layout;
            this.ngZone = ngZone;
            this.minHeight = 100;
            this.minWidth = 100;
            this.title = '';
            this.iconCls = '';
            this.overflow = 'auto';
            this._resizable = true;
            this.bsColClass = '';
            this.showBorder = true;
            this.resizing = new core.EventEmitter();
            this.resized = new core.EventEmitter();
        }
        Object.defineProperty(LayoutPanelComponent.prototype, "split", {
            get: /**
             * @return {?}
             */ function () {
                return this._resizable;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._resizable = val;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.setStyles = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                // this.ngZone.runOutsideAngular(() => {
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var width;
                    /** @type {?} */
                    var height;
                    /** @type {?} */
                    var rect = _this.el.nativeElement.getBoundingClientRect();
                    if (_this.height) {
                        height = _this.height;
                        _this.render2.setStyle(_this.el.nativeElement, 'height', height + 'px');
                        _this.render2.setStyle(_this.panel.nativeElement, 'height', height + 'px');
                    }
                    if (_this.width) {
                        width = _this.width;
                        if (rect.width > _this.width) {
                            width = rect.width;
                            _this.width = width;
                        }
                        _this.render2.setStyle(_this.el.nativeElement, 'width', width + 'px');
                        _this.render2.setStyle(_this.panel.nativeElement, 'width', width + 'px');
                        _this.resetFlex();
                    }
                }));
                // });
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.getrzHandler = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.region) {
                    /** @type {?} */
                    var rzdir = '';
                    switch (this.region) {
                        case 'west':
                            rzdir = 'e';
                            break;
                        case 'east':
                            rzdir = 'w';
                            break;
                        case 'north':
                            rzdir = 's';
                            break;
                        case 'south':
                            rzdir = 'n';
                            break;
                    }
                    this.rzHandler = rzdir;
                }
                else {
                    this.rzHandler = '';
                }
            };
        /**
         * @return {?}
         */
        LayoutPanelComponent.prototype.isCenterPanel = /**
         * @return {?}
         */
            function () {
                return this.region === 'center';
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        LayoutPanelComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.width && !changes.width.isFirstChange()) {
                    this.setStyles();
                }
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.getBsClass = /**
         * @private
         * @return {?}
         */
            function () {
                return Array.from(this.el.nativeElement.classList).find(( /**
                 * @param {?} c
                 * @return {?}
                 */function (c) { return c.indexOf('col-') > -1; }));
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.hasBsClass = /**
         * @private
         * @return {?}
         */
            function () {
                return this.getBsClass() !== undefined;
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.initSize = /**
         * @private
         * @return {?}
         */
            function () {
                this.setStyles();
                if (this.region) {
                    if (this.region === 'west' || this.region === 'east') {
                        this.render2.setStyle(this.panel.nativeElement, 'height', '100%');
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.initClass = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.isCenterPanel()) {
                    this.render2.addClass(this.panel.nativeElement, this.overflow == 'auto' ? 'flex-fill' : 'f-utils-fill');
                    if (this.el.nativeElement.parentElement.attributes['layout-panel']) {
                        this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
                    }
                    this.render2.addClass(this.el.nativeElement, 'd-flex');
                    this.render2.addClass(this.el.nativeElement, 'f-utils-fill');
                }
                if (this.showBorder) {
                    this.render2.addClass(this.panel.nativeElement, 'layout-border');
                }
            };
        /**
         * @return {?}
         */
        LayoutPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initSize();
                this.initClass();
                this.getrzHandler();
                this.bsColClass = this.getBsClass();
                this.layout.panels.push(this);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        LayoutPanelComponent.prototype.onResizeStart = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.resetFlex();
            };
        /**
         * @private
         * @return {?}
         */
        LayoutPanelComponent.prototype.resetFlex = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.region === 'west' || this.region === 'east') {
                    this.render2.setStyle(this.el.nativeElement, 'flex', 'none');
                    this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');
                }
            };
        /**
         * @param {?} size
         * @return {?}
         */
        LayoutPanelComponent.prototype.resize = /**
         * @param {?} size
         * @return {?}
         */
            function (size) {
                this.setStyles();
                this.onResized({ size: size });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        LayoutPanelComponent.prototype.onReizing = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.updatePanelSize($event);
                // console.log($event);
                this.resizing.emit({ target: this, size: $event.size });
            };
        /**
         * @private
         * @param {?} $event
         * @return {?}
         */
        LayoutPanelComponent.prototype.updatePanelSize = /**
         * @private
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.region === 'south') {
                    this.render2.setStyle(this.panel.nativeElement, 'top', 0);
                }
                if (this.region === 'east') {
                    this.render2.setStyle(this.panel.nativeElement, 'left', 0);
                }
                if (this.region === 'south' || this.region === 'north') {
                    this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');
                }
                if (this.region === 'west' || this.region === 'east') {
                    this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        LayoutPanelComponent.prototype.onResized = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.region === 'south' || this.region === 'north') {
                    this.height = $event.size.height;
                }
                if (this.region === 'west' || this.region === 'east') {
                    this.width = $event.size.width;
                }
                this.updatePanelSize($event);
                this.layout.setPanelMaxSize();
                this.resized.emit($event.size);
                this.layout.getPanel('center').resized.emit($event.size);
            };
        LayoutPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'layout-panel',
                        template: "\n        <div #panel #ngResizable class=\"layout-panel\"\n            [ngResizable]=\"split\" [attr.region]=\"region\"\n            [rzHandles]=\"rzHandler\"\n            [rzMinWidth]=\"minWidth\"\n            [rzMaxWidth]=\"maxWidth\"\n            [rzMinHeight]=\"minHeight\"\n            [rzMaxHeight]=\"maxHeight\"\n            (rzResizing)=\"onReizing($event)\"\n            (rzStop) = \"onResized($event)\"\n            (rzStart) =\"onResizeStart($event)\" >\n\n            <layout-panel-title *ngIf=\"title\" [title]=\"title\"></layout-panel-title>\n\n            <ng-content></ng-content>\n        <div>\n    ",
                        styles: [".layout-border{border:1px solid #f2f2f2}.layout-panel{background:#fff}.ng-resizeable-bar{position:relative}.ng-resizable-w>.ng-resizeable-bar{right:1px;height:100%;width:5px}.ng-resizable-e>.ng-resizeable-bar{left:3px;height:100%;width:5px}.ng-resizable-s>.ng-resizeable-bar{top:3px;width:100%;height:5px}.ng-resizable-n>.ng-resizeable-bar{bottom:0;width:100%;height:5px}.ng-resizable-handle:hover>.ng-resizeable-bar{background-color:#bababa}.ng-resizable-handle:active>.ng-resizeable-bar{background-color:#5b5b5b}:host{padding:0}"]
                    }] }
        ];
        /** @nocollapse */
        LayoutPanelComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: LayoutComponent },
                { type: core.NgZone }
            ];
        };
        LayoutPanelComponent.propDecorators = {
            region: [{ type: core.Input }],
            height: [{ type: core.Input }],
            width: [{ type: core.Input }],
            minHeight: [{ type: core.Input }],
            minWidth: [{ type: core.Input }],
            maxHeight: [{ type: core.Input }],
            maxWidth: [{ type: core.Input }],
            title: [{ type: core.Input }],
            iconCls: [{ type: core.Input }],
            overflow: [{ type: core.Input }],
            split: [{ type: core.Input }],
            showBorder: [{ type: core.Input }],
            resizing: [{ type: core.Output }],
            resized: [{ type: core.Output }],
            panel: [{ type: core.ViewChild, args: ['panel',] }],
            ngResizable: [{ type: core.ViewChild, args: [uiDraggable.AngularResizableDirective,] }]
        };
        return LayoutPanelComponent;
    }());
    var LayoutPanelTitleComponent = /** @class */ (function () {
        function LayoutPanelTitleComponent() {
            this.title = '';
            this.iconCls = '';
        }
        LayoutPanelTitleComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'layout-panel-title',
                        template: "\n        <div class=\"d-flex flex-row\" style=\"height: 28px; line-height: 28px\">\n            <div class=\"layout-panel-title\">\n                <span *ngIf=\"iconCls\" [class]=\"iconCls\"></span>\n                {{ title }}\n            </div>\n            <div class=\"layout-panel-title-tools flex-fill\">\n\n            </div>\n        </div>\n    "
                    }] }
        ];
        LayoutPanelTitleComponent.propDecorators = {
            title: [{ type: core.Input }],
            iconCls: [{ type: core.Input }]
        };
        return LayoutPanelTitleComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LayoutModule = /** @class */ (function () {
        function LayoutModule() {
        }
        LayoutModule.decorators = [
            { type: core.NgModule, args: [{
                        imports: [
                            common.CommonModule,
                            uiDraggable.AngularDraggableModule
                        ],
                        declarations: [LayoutComponent, LayoutPanelComponent, LayoutPanelTitleComponent],
                        exports: [LayoutComponent, uiDraggable.AngularDraggableModule, LayoutPanelComponent],
                        providers: [],
                    },] }
        ];
        return LayoutModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FarrisLayoutModule = LayoutModule;
    exports.LayoutComponent = LayoutComponent;
    exports.LayoutPanelComponent = LayoutPanelComponent;
    exports.LayoutPanelTitleComponent = LayoutPanelTitleComponent;
    exports.LayoutModule = LayoutModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-layout.umd.js.map