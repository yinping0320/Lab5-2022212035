import { Injector, ViewEncapsulation, NgZone, Component, Input, HostBinding, ElementRef, Renderer2, ViewChild, Output, EventEmitter, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AngularResizableDirective, AngularDraggableModule } from '@farris/ui-draggable';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LayoutComponent {
    /**
     * @param {?} el
     * @param {?} render2
     * @param {?} injector
     */
    constructor(el, render2, injector) {
        this.el = el;
        this.render2 = render2;
        this.injector = injector;
        this.showBorder = true;
        // h: 水平排列; v: 垂直排列
        this.direction = 'h';
        this.fill = false;
        this.myclass = 'd-flex';
        this.panels = [];
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.checkPanels();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.split) {
                /** @type {?} */
                let margin = '';
                switch (p.region) {
                    case 'north':
                        margin = 'marginTop';
                        break;
                    case 'south':
                        margin = 'marginBottom';
                        break;
                    case 'west':
                        margin = 'marginLeft';
                        break;
                    case 'east':
                        margin = 'marginRight';
                        break;
                }
                this.render2.setStyle(this.getPanel('center').el.nativeElement, margin, '5px');
            }
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => this.setPanelMaxSize()));
        }));
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.direction === 'h') {
            this.myclass += ' flex-row';
        }
        else {
            this.myclass += ' flex-column';
        }
        if (this.fill) {
            if (this.isInLayoutPanel()) {
                this.myclass += ' flex-fill';
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            else {
                this.myclass += ' layout-fill';
            }
        }
        else {
            if (this.width) {
                this.render2.setStyle(this.el.nativeElement, 'width', this.width + 'px');
            }
            if (this.height) {
                this.render2.setStyle(this.el.nativeElement, 'height', this.height + 'px');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getLayoutSize() {
        /** @type {?} */
        const size = {
            width: this.el.nativeElement.clientWidth,
            height: this.el.nativeElement.clientHeight
        };
        return size;
    }
    /**
     * @return {?}
     */
    setPanelMaxSize() {
        /** @type {?} */
        const layoutSize = this.getLayoutSize();
        this.panels.forEach((/**
         * @param {?} p
         * @return {?}
         */
        p => {
            if (p.region !== 'center') {
                /** @type {?} */
                const minWidth = p.minWidth || 100;
                /** @type {?} */
                const minHeight = p.minHeight || 100;
                if (p.region === 'west' && layoutSize.width) {
                    /** @type {?} */
                    const east = this.getPanel('east');
                    if (!east) {
                        p.maxWidth = layoutSize.width - minWidth;
                    }
                    else {
                        p.maxWidth = layoutSize.width - east.width - minWidth;
                    }
                }
                if (p.region === 'east' && layoutSize.width) {
                    /** @type {?} */
                    const west = this.getPanel('west');
                    if (!west) {
                        p.maxWidth = layoutSize.width - minWidth;
                    }
                    else {
                        p.maxWidth = layoutSize.width - west.width - minWidth;
                    }
                }
                if (p.region === 'north' && layoutSize.height) {
                    /** @type {?} */
                    const south = this.getPanel('south');
                    if (!south) {
                        p.maxHeight = layoutSize.height - minHeight;
                    }
                    else {
                        p.maxHeight = layoutSize.height - south.height - minHeight;
                    }
                }
                if (p.region === 'south' && layoutSize.height) {
                    /** @type {?} */
                    const north = this.getPanel('north');
                    if (!north) {
                        p.maxHeight = layoutSize.height - minHeight;
                    }
                    else {
                        p.maxHeight = layoutSize.height - north.height - minHeight;
                    }
                }
            }
        }));
    }
    /**
     * @param {?} region
     * @return {?}
     */
    getPanel(region) {
        return this.panels.find((/**
         * @param {?} p
         * @return {?}
         */
        p => p.region === region));
    }
    /**
     * @private
     * @return {?}
     */
    checkPanels() {
        if (this.panels && this.panels.length) {
            /** @type {?} */
            const regions = this.panels.map((/**
             * @param {?} p
             * @return {?}
             */
            p => p.region));
            if (this.unique(regions).length === regions.length) {
                if (this.direction === 'h') {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'north' || r === 'south'))) {
                        throw new Error('水平方向排列时，只能包含 east 或者 west');
                    }
                }
                else {
                    if (regions.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r === 'west' || r === 'east'))) {
                        throw new Error('水平方向排列时，只能包含 north 或者 south');
                    }
                }
                return true;
            }
            else {
                throw new Error('layout 布局容器中具有重复的panel。');
            }
        }
        return true;
    }
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    unique(arr) {
        /** @type {?} */
        const tmp = new Set(arr);
        return Array.from(tmp);
    }
    /**
     * @private
     * @return {?}
     */
    isInLayoutPanel() {
        return !!this.el.nativeElement.parentElement.attributes['layout-panel'];
    }
}
LayoutComponent.decorators = [
    { type: Component, args: [{
                selector: 'farrisui-layout,farris-layout,layout',
                template: "<ng-container *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='north']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='west']\"></ng-content>\r\n</ng-container>\r\n\r\n\r\n<ng-content></ng-content>\r\n\r\n<ng-container  *ngIf=\"direction==='v'\">\r\n    <ng-content select=\"[region='south']\"></ng-content>\r\n</ng-container>\r\n<ng-container *ngIf=\"direction==='h'\">\r\n    <ng-content select=\"[region='east']\"></ng-content>\r\n</ng-container>",
                encapsulation: ViewEncapsulation.Emulated,
                styles: [`
        :host.layout-fill {position: absolute; top: 0; right: 0;bottom: 0;left: 0;}
        `]
            }] }
];
/** @nocollapse */
LayoutComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
LayoutComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    showBorder: [{ type: Input }],
    direction: [{ type: Input }],
    fill: [{ type: Input }],
    myclass: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LayoutPanelComponent {
    /**
     * @param {?} el
     * @param {?} render2
     * @param {?} layout
     * @param {?} ngZone
     */
    constructor(el, render2, layout, ngZone) {
        this.el = el;
        this.render2 = render2;
        this.layout = layout;
        this.ngZone = ngZone;
        this.minHeight = 100;
        this.minWidth = 100;
        this.title = '';
        this.iconCls = '';
        this.overflow = 'auto';
        this._resizable = true;
        this.bsColClass = '';
        this.showBorder = true;
        this.resizing = new EventEmitter();
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get split() {
        return this._resizable;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set split(val) {
        this._resizable = val;
    }
    /**
     * @private
     * @return {?}
     */
    setStyles() {
        // this.ngZone.runOutsideAngular(() => {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            let width;
            /** @type {?} */
            let height;
            /** @type {?} */
            const rect = this.el.nativeElement.getBoundingClientRect();
            if (this.height) {
                height = this.height;
                this.render2.setStyle(this.el.nativeElement, 'height', height + 'px');
                this.render2.setStyle(this.panel.nativeElement, 'height', height + 'px');
            }
            if (this.width) {
                width = this.width;
                if (rect.width > this.width) {
                    width = rect.width;
                    this.width = width;
                }
                this.render2.setStyle(this.el.nativeElement, 'width', width + 'px');
                this.render2.setStyle(this.panel.nativeElement, 'width', width + 'px');
                this.resetFlex();
            }
        }));
        // });
    }
    /**
     * @private
     * @return {?}
     */
    getrzHandler() {
        if (this.region) {
            /** @type {?} */
            let rzdir = '';
            switch (this.region) {
                case 'west':
                    rzdir = 'e';
                    break;
                case 'east':
                    rzdir = 'w';
                    break;
                case 'north':
                    rzdir = 's';
                    break;
                case 'south':
                    rzdir = 'n';
                    break;
            }
            this.rzHandler = rzdir;
        }
        else {
            this.rzHandler = '';
        }
    }
    /**
     * @return {?}
     */
    isCenterPanel() {
        return this.region === 'center';
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.width && !changes.width.isFirstChange()) {
            this.setStyles();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBsClass() {
        return Array.from(this.el.nativeElement.classList).find((/**
         * @param {?} c
         * @return {?}
         */
        (c) => c.indexOf('col-') > -1));
    }
    /**
     * @private
     * @return {?}
     */
    hasBsClass() {
        return this.getBsClass() !== undefined;
    }
    /**
     * @private
     * @return {?}
     */
    initSize() {
        this.setStyles();
        if (this.region) {
            if (this.region === 'west' || this.region === 'east') {
                this.render2.setStyle(this.panel.nativeElement, 'height', '100%');
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initClass() {
        if (this.isCenterPanel()) {
            this.render2.addClass(this.panel.nativeElement, this.overflow == 'auto' ? 'flex-fill' : 'f-utils-fill');
            if (this.el.nativeElement.parentElement.attributes['layout-panel']) {
                this.render2.addClass(this.el.nativeElement.parentElement, 'd-flex');
            }
            this.render2.addClass(this.el.nativeElement, 'd-flex');
            this.render2.addClass(this.el.nativeElement, 'f-utils-fill');
        }
        if (this.showBorder) {
            this.render2.addClass(this.panel.nativeElement, 'layout-border');
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initSize();
        this.initClass();
        this.getrzHandler();
        this.bsColClass = this.getBsClass();
        this.layout.panels.push(this);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResizeStart($event) {
        this.resetFlex();
    }
    /**
     * @private
     * @return {?}
     */
    resetFlex() {
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'flex', 'none');
            this.render2.setStyle(this.el.nativeElement, 'max-width', 'none');
        }
    }
    /**
     * @param {?} size
     * @return {?}
     */
    resize(size) {
        this.setStyles();
        this.onResized({ size });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onReizing($event) {
        this.updatePanelSize($event);
        // console.log($event);
        this.resizing.emit({ target: this, size: $event.size });
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    updatePanelSize($event) {
        if (this.region === 'south') {
            this.render2.setStyle(this.panel.nativeElement, 'top', 0);
        }
        if (this.region === 'east') {
            this.render2.setStyle(this.panel.nativeElement, 'left', 0);
        }
        if (this.region === 'south' || this.region === 'north') {
            this.render2.setStyle(this.el.nativeElement, 'height', $event.size.height + 'px');
        }
        if (this.region === 'west' || this.region === 'east') {
            this.render2.setStyle(this.el.nativeElement, 'width', $event.size.width + 'px');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.region === 'south' || this.region === 'north') {
            this.height = $event.size.height;
        }
        if (this.region === 'west' || this.region === 'east') {
            this.width = $event.size.width;
        }
        this.updatePanelSize($event);
        this.layout.setPanelMaxSize();
        this.resized.emit($event.size);
        this.layout.getPanel('center').resized.emit($event.size);
    }
}
LayoutPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'layout-panel',
                template: `
        <div #panel #ngResizable class="layout-panel"
            [ngResizable]="split" [attr.region]="region"
            [rzHandles]="rzHandler"
            [rzMinWidth]="minWidth"
            [rzMaxWidth]="maxWidth"
            [rzMinHeight]="minHeight"
            [rzMaxHeight]="maxHeight"
            (rzResizing)="onReizing($event)"
            (rzStop) = "onResized($event)"
            (rzStart) ="onResizeStart($event)" >

            <layout-panel-title *ngIf="title" [title]="title"></layout-panel-title>

            <ng-content></ng-content>
        <div>
    `,
                styles: [".layout-border{border:1px solid #f2f2f2}.layout-panel{background:#fff}.ng-resizeable-bar{position:relative}.ng-resizable-w>.ng-resizeable-bar{right:1px;height:100%;width:5px}.ng-resizable-e>.ng-resizeable-bar{left:3px;height:100%;width:5px}.ng-resizable-s>.ng-resizeable-bar{top:3px;width:100%;height:5px}.ng-resizable-n>.ng-resizeable-bar{bottom:0;width:100%;height:5px}.ng-resizable-handle:hover>.ng-resizeable-bar{background-color:#bababa}.ng-resizable-handle:active>.ng-resizeable-bar{background-color:#5b5b5b}:host{padding:0}"]
            }] }
];
/** @nocollapse */
LayoutPanelComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: LayoutComponent },
    { type: NgZone }
];
LayoutPanelComponent.propDecorators = {
    region: [{ type: Input }],
    height: [{ type: Input }],
    width: [{ type: Input }],
    minHeight: [{ type: Input }],
    minWidth: [{ type: Input }],
    maxHeight: [{ type: Input }],
    maxWidth: [{ type: Input }],
    title: [{ type: Input }],
    iconCls: [{ type: Input }],
    overflow: [{ type: Input }],
    split: [{ type: Input }],
    showBorder: [{ type: Input }],
    resizing: [{ type: Output }],
    resized: [{ type: Output }],
    panel: [{ type: ViewChild, args: ['panel',] }],
    ngResizable: [{ type: ViewChild, args: [AngularResizableDirective,] }]
};
class LayoutPanelTitleComponent {
    constructor() {
        this.title = '';
        this.iconCls = '';
    }
}
LayoutPanelTitleComponent.decorators = [
    { type: Component, args: [{
                selector: 'layout-panel-title',
                template: `
        <div class="d-flex flex-row" style="height: 28px; line-height: 28px">
            <div class="layout-panel-title">
                <span *ngIf="iconCls" [class]="iconCls"></span>
                {{ title }}
            </div>
            <div class="layout-panel-title-tools flex-fill">

            </div>
        </div>
    `
            }] }
];
LayoutPanelTitleComponent.propDecorators = {
    title: [{ type: Input }],
    iconCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LayoutModule {
}
LayoutModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    AngularDraggableModule
                ],
                declarations: [LayoutComponent, LayoutPanelComponent, LayoutPanelTitleComponent],
                exports: [LayoutComponent, AngularDraggableModule, LayoutPanelComponent],
                providers: [],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LayoutModule as FarrisLayoutModule, LayoutComponent, LayoutPanelComponent, LayoutPanelTitleComponent, LayoutModule };

//# sourceMappingURL=farris-ui-layout.js.map