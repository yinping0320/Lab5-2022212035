/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/cloud-plus-take-photo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsBridgeService } from '@farris/mobile-command-services';
import { uuid } from '../utils';
var CloudPlusTakePhoto = /** @class */ (function () {
    function CloudPlusTakePhoto(collectFile) {
        this.collectFile = collectFile;
        this.jsBrigdeService = new JsBridgeService();
    }
    /**
     * @param {?} param
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.takeShortVideo = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.jsBrigdeService.takeVideo(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var data = _this.processVideo(result);
            _this.collectFile.next(data);
        }));
    };
    /**
     * @param {?} param
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.takePhotoAttachment = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.jsBrigdeService.takePhoto(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var data = _this.processPic(result);
            _this.collectFile.next(data);
        }));
    };
    /**
     * @param {?} param
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.selectAttachments = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.jsBrigdeService.selectPictureFromAlbum(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var data = _this.processPic(result);
            _this.collectFile.next(data);
        }));
    };
    /**
     * @param {?} param
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.selectFile = /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        var _this = this;
        this.jsBrigdeService.selectFile(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var data = _this.processFile(res);
            _this.collectFile.next(data);
        }));
    };
    /**
     * @param {?} options
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.downloadAttachment = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        return this.jsBrigdeService.downloadFile(options);
    };
    /**
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.getSysInfo = /**
     * @return {?}
     */
    function () {
        return this.jsBrigdeService.getSysInfo();
    };
    /**
     * 调起当前设备 播放短视频
     * @param path 视频路径
     */
    /**
     * 调起当前设备 播放短视频
     * @param {?} path 视频路径
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.playShortVideo = /**
     * 调起当前设备 播放短视频
     * @param {?} path 视频路径
     * @return {?}
     */
    function (path) {
        var _this = this;
        window['iCityBridge'].ccworkPlayShortVideo({ path: path }, (/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var result = res.result;
            /** @type {?} */
            var data = _this.processVideo(result);
            _this.collectFile.next(data);
        }));
    };
    /**
     * 预处理图片
     */
    /**
     * 预处理图片
     * @param {?} result
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.processPic = /**
     * 预处理图片
     * @param {?} result
     * @return {?}
     */
    function (result) {
        /** @type {?} */
        var imgHeader = 'data:image/jpeg;base64,';
        /** @type {?} */
        var imgType = 'image/png';
        if (typeof result === 'string') {
            // ios takephoto
            return {
                file: new File([], "image_" + uuid().substring(0, 6) + ".png", { type: imgType }),
                content: "" + imgHeader + result
            };
        }
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        function (dataItem) {
            // andriod selectPic
            if (typeof dataItem === 'string') {
                return {
                    file: new File([], "image_" + uuid().substring(0, 6) + ".png", { type: imgType }),
                    content: "" + imgHeader + dataItem
                };
            }
            // ios selectPic
            return {
                file: new File([], "image_" + uuid().substring(0, 6) + ".png", { type: imgType }),
                content: "" + imgHeader + dataItem.content
            };
        }));
    };
    /**
     * @param {?} result
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.processFile = /**
     * @param {?} result
     * @return {?}
     */
    function (result) {
        /** @type {?} */
        var fileHeaders = {
            'jpg': 'data:image/jpeg;base64,',
            'png': 'data:image/jpeg;base64,',
            'doc': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'docx': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'xls': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'xlsx': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'ppt': 'data:application/vnd.ms-powerpoint;base64,',
            'pptx': 'data:application/vnd.ms-powerpoint;base64,',
            'txt': 'data:text/plain;base64,',
            'pdf': 'data:application/pdf;base64,',
            'mp4': 'data:video/mp4;base64,',
            'mov': 'data:video/mp4;base64,'
        };
        /** @type {?} */
        var fileTypes = {
            'jpg': 'image/png',
            'png': 'image/png',
            'doc': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.ms-powerpoint',
            'txt': 'text/plain',
            'pdf': 'application/pdf',
            'mp4': 'video/mp4',
            'mov': 'video/mp4'
        };
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        function (dataItem) {
            /** @type {?} */
            var suffix = dataItem.name.substring(dataItem.name.lastIndexOf('.') + 1);
            return {
                file: new File([], dataItem.name, { type: fileTypes[suffix.toLowerCase()] }),
                content: "" + fileHeaders[suffix.toLowerCase()] + dataItem.base64
            };
        }));
    };
    /**
     * 预处理视频
     * @param result
     */
    /**
     * 预处理视频
     * @param {?} result
     * @return {?}
     */
    CloudPlusTakePhoto.prototype.processVideo = /**
     * 预处理视频
     * @param {?} result
     * @return {?}
     */
    function (result) {
        /** @type {?} */
        var url = result.value;
        /** @type {?} */
        var base64value = result.base64value;
        /** @type {?} */
        var videoHeader = 'data:video/mp4;base64,';
        /** @type {?} */
        var videoType = 'video/mp4';
        /** @type {?} */
        var videoName = url.substring(url.lastIndexOf('/') + 1) + '.mp4';
        return {
            file: new File([], videoName, { type: videoType }),
            content: "" + videoHeader + base64value,
            type: videoType,
            url: url,
            name: url.substring(url.lastIndexOf('/') + 1) + '.mp4'
        };
    };
    return CloudPlusTakePhoto;
}());
export { CloudPlusTakePhoto };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.jsBrigdeService;
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.collectFile;
}
//# sourceMappingURL=data:application/json;base64,