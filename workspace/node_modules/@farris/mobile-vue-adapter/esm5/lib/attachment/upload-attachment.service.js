/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/upload-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpMethods } from '@farris/mobile-devkit';
import { forkJoin } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { getToken, mergeString } from '../utils';
var UploadAttachmentService = /** @class */ (function () {
    function UploadAttachmentService(befRepository) {
        this.befRepository = befRepository;
    }
    /**
     * 缓存附件
     * @param originFiles
     * @param uploadInfo
     */
    /**
     * 缓存附件
     * @param {?} originFiles
     * @param {?} uploadInfo
     * @return {?}
     */
    UploadAttachmentService.prototype.upload = /**
     * 缓存附件
     * @param {?} originFiles
     * @param {?} uploadInfo
     * @return {?}
     */
    function (originFiles, uploadInfo) {
        /** @type {?} */
        var apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        var uploadUrl = "/api/runtime/dfs/v1.0/formdoc";
        /** @type {?} */
        var parametersArr = originFiles.map((/**
         * @param {?} ele
         * @return {?}
         */
        function (ele) {
            return {
                docInfo: {
                    fileContent: ele.content.substring(ele.content.indexOf(',') + 1),
                    fileName: ele.file.name,
                    index: 0,
                    total: 1,
                    metadataId: ele.id
                },
                formId: uploadInfo.parentDirName,
                mode: 1,
                rootId: uploadInfo.rootId || 'default-root'
            };
        }));
        /** @type {?} */
        var requestList = parametersArr.map((/**
         * @param {?} ele
         * @return {?}
         */
        function (ele) {
            /** @type {?} */
            var params = { body: ele };
            return apiProxy.request(HttpMethods.POST, uploadUrl, params, true);
        }));
        return forkJoin(requestList);
    };
    /**
     * 预览附件pdf
     * @param fileType
     * @param rootId
     * @param metadataIdList
     */
    /**
     * 预览附件pdf
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    UploadAttachmentService.prototype.previewPdf = /**
     * 预览附件pdf
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    function (rootId, metadataIdList) {
        /** @type {?} */
        var baseUrl = '/platform/runtime/dfs/web/pdfjs/viewer.html?file=';
        /** @type {?} */
        var apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        var fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        var params = {
            storageType: 2, filePath: JSON.stringify({
                rootId: rootId,
                metadataIdList: metadataIdList
            })
        };
        /** @type {?} */
        var body = { body: params };
        // 预览
        return apiProxy.request(HttpMethods.POST, fileListUrl, body).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return baseUrl + encodeURIComponent(res[0].filePath); })));
    };
    /**
     * 预览office txt文档
     * @param rootId
     * @param metadataIdList
     */
    /**
     * 预览office txt文档
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    UploadAttachmentService.prototype.previewDoc = /**
     * 预览office txt文档
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    function (rootId, metadataIdList) {
        /** @type {?} */
        var apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        var fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        var loadDocUrl = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
        /** @type {?} */
        var params = {
            storageType: 2, filePath: JSON.stringify({
                rootId: rootId,
                metadataIdList: metadataIdList
            })
        };
        /** @type {?} */
        var body = { body: params };
        // 根据文件类型 调用不同的预览接口
        return apiProxy.request(HttpMethods.POST, fileListUrl, body)
            .pipe(mergeMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return apiProxy.request(HttpMethods.POST, loadDocUrl, { body: { filePath: res[0].filePath } }); })), map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res.pages; })));
    };
    /**
     * 获取图片url
     * @param attachmentId  附件id
     * @param rootId 根目录id
     * @returns
     */
    /**
     * 获取图片url
     * @param {?} attachmentId  附件id
     * @param {?} rootId 根目录id
     * @return {?}
     */
    UploadAttachmentService.prototype.getAttachmentPath = /**
     * 获取图片url
     * @param {?} attachmentId  附件id
     * @param {?} rootId 根目录id
     * @return {?}
     */
    function (attachmentId, rootId) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + attachmentId + "&rootid=" + rootId + "&token=" + getToken(mergeString(attachmentId, rootId));
    };
    return UploadAttachmentService;
}());
export { UploadAttachmentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadAttachmentService.prototype.befRepository;
}
//# sourceMappingURL=data:application/json;base64,