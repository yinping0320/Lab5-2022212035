/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/attachment-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getDataByPath, getAttachmentUrl } from '../utils';
/** @type {?} */
export var filterData = (/**
 * @param {?} rawData
 * @param {?} field
 * @param {?} rootId
 * @param {?=} isComponentAdapter
 * @return {?}
 */
function (rawData, field, rootId, isComponentAdapter) {
    if (isComponentAdapter === void 0) { isComponentAdapter = true; }
    /** @type {?} */
    var splitFiled = field.split('/');
    /** @type {?} */
    var fields = splitFiled.filter((/**
     * @param {?} ele
     * @return {?}
     */
    function (ele) { return ele; }));
    if (!isComponentAdapter) {
        // 单条数据
        /** @type {?} */
        var data = getDataByPath(rawData, fields);
        /** @type {?} */
        var url = '/platform/common/web/assets/imgs/no-pic.png';
        // 附件不存在
        if (!data || !data.attachmentId) {
            return url;
        }
        // 附件存在
        /** @type {?} */
        var extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return url;
    }
    /** @type {?} */
    var transformData = rawData.map((/**
     * @param {?} everyData
     * @return {?}
     */
    function (everyData) {
        /** @type {?} */
        var data = getDataByPath(everyData, fields);
        /** @type {?} */
        var url = '/platform/common/web/assets/imgs/no-pic.png';
        if (!data || !data.attachmentId) {
            return {
                url: url,
                id: everyData.id,
                attachmentId: data.attachmentId,
                name: '',
                size: 0,
                createTime: ''
            };
        }
        /** @type {?} */
        var extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return {
            url: url,
            id: everyData.id,
            attachmentId: data.attachmentId,
            name: data.fileName,
            size: data.fileSize,
            createTime: data.fileCreateTime
        };
    }));
    return transformData;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC1maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS12dWUtYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9hdHRhY2htZW50L2F0dGFjaG1lbnQtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFDM0QsTUFBTSxLQUFPLFVBQVU7Ozs7Ozs7QUFBRyxVQUFDLE9BQVksRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLGtCQUF5QjtJQUF6QixtQ0FBQSxFQUFBLHlCQUF5Qjs7UUFDdkYsVUFBVSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOztRQUM3QixNQUFNLEdBQUcsVUFBVSxDQUFDLE1BQU07Ozs7SUFBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsRUFBSCxDQUFHLEVBQUM7SUFFNUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFOzs7WUFFZixJQUFJLEdBQUcsYUFBYSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUM7O1lBQ3ZDLEdBQUcsR0FBRyw2Q0FBNkM7UUFDdkQsUUFBUTtRQUNSLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzdCLE9BQU8sR0FBRyxDQUFDO1NBQ2Q7OztZQUVLLGFBQWEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakYsR0FBRyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sR0FBRyxDQUFDO0tBQ2Q7O1FBQ0ssYUFBYSxHQUFHLE9BQU8sQ0FBQyxHQUFHOzs7O0lBQUMsVUFBQSxTQUFTOztZQUNqQyxJQUFJLEdBQUcsYUFBYSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUM7O1lBQ3pDLEdBQUcsR0FBRyw2Q0FBNkM7UUFDdkQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDN0IsT0FBTztnQkFDSCxHQUFHLEtBQUE7Z0JBQ0gsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFO2dCQUNoQixZQUFZLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQy9CLElBQUksRUFBRSxFQUFFO2dCQUNSLElBQUksRUFBRSxDQUFDO2dCQUNQLFVBQVUsRUFBRSxFQUFFO2FBQ2pCLENBQUM7U0FDTDs7WUFDSyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pGLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRSxPQUFPO1lBQ0gsR0FBRyxLQUFBO1lBQ0gsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFO1lBQ2hCLFlBQVksRUFBRSxJQUFJLENBQUMsWUFBWTtZQUMvQixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDbkIsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsY0FBYztTQUNsQyxDQUFDO0lBQ04sQ0FBQyxFQUFDO0lBQ0YsT0FBTyxhQUFhLENBQUM7QUFDekIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiXHJcblxyXG5pbXBvcnQgeyBnZXREYXRhQnlQYXRoLCBnZXRBdHRhY2htZW50VXJsIH0gZnJvbSAnLi4vdXRpbHMnO1xyXG5leHBvcnQgY29uc3QgZmlsdGVyRGF0YSA9IChyYXdEYXRhOiBhbnksIGZpZWxkOiBzdHJpbmcsIHJvb3RJZDogc3RyaW5nLCBpc0NvbXBvbmVudEFkYXB0ZXIgPSB0cnVlKSA9PiB7XHJcbiAgICBjb25zdCBzcGxpdEZpbGVkID0gZmllbGQuc3BsaXQoJy8nKTtcclxuICAgIGNvbnN0IGZpZWxkcyA9IHNwbGl0RmlsZWQuZmlsdGVyKGVsZSA9PiBlbGUpO1xyXG5cclxuICAgIGlmICghaXNDb21wb25lbnRBZGFwdGVyKSB7XHJcbiAgICAgICAgLy8g5Y2V5p2h5pWw5o2uXHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldERhdGFCeVBhdGgocmF3RGF0YSwgZmllbGRzKTtcclxuICAgICAgICBsZXQgdXJsID0gJy9wbGF0Zm9ybS9jb21tb24vd2ViL2Fzc2V0cy9pbWdzL25vLXBpYy5wbmcnO1xyXG4gICAgICAgIC8vIOmZhOS7tuS4jeWtmOWcqFxyXG4gICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5hdHRhY2htZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHVybDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8g6ZmE5Lu25a2Y5ZyoXHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uTmFtZSA9IGRhdGEuZmlsZU5hbWUuc3Vic3RyaW5nKGRhdGEuZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpO1xyXG4gICAgICAgIHVybCA9IGdldEF0dGFjaG1lbnRVcmwoZGF0YS5hdHRhY2htZW50SWQsIHJvb3RJZCwgZXh0ZW5zaW9uTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHVybDtcclxuICAgIH1cclxuICAgIGNvbnN0IHRyYW5zZm9ybURhdGEgPSByYXdEYXRhLm1hcChldmVyeURhdGEgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSBnZXREYXRhQnlQYXRoKGV2ZXJ5RGF0YSwgZmllbGRzKTtcclxuICAgICAgICBsZXQgdXJsID0gJy9wbGF0Zm9ybS9jb21tb24vd2ViL2Fzc2V0cy9pbWdzL25vLXBpYy5wbmcnO1xyXG4gICAgICAgIGlmICghZGF0YSB8fCAhZGF0YS5hdHRhY2htZW50SWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHVybCxcclxuICAgICAgICAgICAgICAgIGlkOiBldmVyeURhdGEuaWQsXHJcbiAgICAgICAgICAgICAgICBhdHRhY2htZW50SWQ6IGRhdGEuYXR0YWNobWVudElkLFxyXG4gICAgICAgICAgICAgICAgbmFtZTogJycsXHJcbiAgICAgICAgICAgICAgICBzaXplOiAwLFxyXG4gICAgICAgICAgICAgICAgY3JlYXRlVGltZTogJydcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9uTmFtZSA9IGRhdGEuZmlsZU5hbWUuc3Vic3RyaW5nKGRhdGEuZmlsZU5hbWUubGFzdEluZGV4T2YoJy4nKSArIDEpO1xyXG4gICAgICAgIHVybCA9IGdldEF0dGFjaG1lbnRVcmwoZGF0YS5hdHRhY2htZW50SWQsIHJvb3RJZCwgZXh0ZW5zaW9uTmFtZSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICBpZDogZXZlcnlEYXRhLmlkLFxyXG4gICAgICAgICAgICBhdHRhY2htZW50SWQ6IGRhdGEuYXR0YWNobWVudElkLFxyXG4gICAgICAgICAgICBuYW1lOiBkYXRhLmZpbGVOYW1lLFxyXG4gICAgICAgICAgICBzaXplOiBkYXRhLmZpbGVTaXplLFxyXG4gICAgICAgICAgICBjcmVhdGVUaW1lOiBkYXRhLmZpbGVDcmVhdGVUaW1lXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRyYW5zZm9ybURhdGE7XHJcbn07XHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcbiJdfQ==