/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender-manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentExtenderFactory } from './component-extender-factory';
/**
 * 扩展管理器
 */
var /**
 * 扩展管理器
 */
ComponentExtenderManager = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ComponentExtenderManager(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.extenderMap = new Map();
        this.extenderFactory = new ComponentExtenderFactory(viewModelContext);
    }
    /**
     * 获取扩展
     */
    /**
     * 获取扩展
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    ComponentExtenderManager.prototype.getExtender = /**
     * 获取扩展
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    function (componentInstance, componentType) {
        if (this.extenderMap.has(componentInstance)) {
            return this.extenderMap.get(componentInstance);
        }
        /** @type {?} */
        var extender = this.extenderFactory.create(componentInstance, componentType);
        this.extenderMap.set(componentInstance, extender);
        return extender;
    };
    return ComponentExtenderManager;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.viewModelContext;
    /**
     * 组件扩展器集合
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.extenderMap;
    /**
     * 扩展器工厂
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.extenderFactory;
}
export { ComponentExtenderManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWV4dGVuZGVyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS12dWUtYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnQtZXh0ZW5kZXJzL2NvbXBvbmVudC1leHRlbmRlci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7QUFLeEU7Ozs7SUFjRTs7T0FFRztJQUNILGtDQUFZLGdCQUFrQztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7UUFDekMsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLEdBQUcsRUFBMEIsQ0FBQztRQUNyRCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksd0JBQXdCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7SUFDSSw4Q0FBVzs7Ozs7O0lBQWxCLFVBQW1CLGlCQUFzQixFQUFFLGFBQXFCO1FBQzlELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsRUFBRTtZQUMzQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDaEQ7O1lBRUssUUFBUSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLGlCQUFpQixFQUFFLGFBQWEsQ0FBQztRQUM5RSxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUVsRCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDO0lBQ0gsK0JBQUM7QUFBRCxDQUFDLEFBcENELElBb0NDOzs7Ozs7SUFsQ0Msb0RBQTJDOzs7Ozs7SUFLM0MsK0NBQWlEOzs7Ozs7SUFLakQsbURBQWtEOztBQXlCcEQsT0FBTyxFQUFFLHdCQUF3QixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWwsIFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRFeHRlbmRlciB9IGZyb20gJy4vY29tcG9uZW50LWV4dGVuZGVyJztcclxuaW1wb3J0IHsgQ29tcG9uZW50RXh0ZW5kZXJGYWN0b3J5IH0gZnJvbSAnLi9jb21wb25lbnQtZXh0ZW5kZXItZmFjdG9yeSc7XHJcblxyXG4vKipcclxuICog5omp5bGV566h55CG5ZmoXHJcbiAqL1xyXG5jbGFzcyBDb21wb25lbnRFeHRlbmRlck1hbmFnZXIge1xyXG5cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOe7hOS7tuaJqeWxleWZqOmbhuWQiFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZXh0ZW5kZXJNYXA6IE1hcDxhbnksIENvbXBvbmVudEV4dGVuZGVyPjtcclxuXHJcbiAgLyoqXHJcbiAgICog5omp5bGV5Zmo5bel5Y6CXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBleHRlbmRlckZhY3Rvcnk6IENvbXBvbmVudEV4dGVuZGVyRmFjdG9yeTtcclxuXHJcbiAgLyoqXHJcbiAgICog5p6E6YCg5Ye95pWwXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Iodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICAgIHRoaXMuZXh0ZW5kZXJNYXAgPSBuZXcgTWFwPGFueSwgQ29tcG9uZW50RXh0ZW5kZXI+KCk7XHJcbiAgICB0aGlzLmV4dGVuZGVyRmFjdG9yeSA9IG5ldyBDb21wb25lbnRFeHRlbmRlckZhY3Rvcnkodmlld01vZGVsQ29udGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bmianlsZVcclxuICAgKi9cclxuICBwdWJsaWMgZ2V0RXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2U6IGFueSwgY29tcG9uZW50VHlwZTogc3RyaW5nKSB7XHJcbiAgICBpZiAodGhpcy5leHRlbmRlck1hcC5oYXMoY29tcG9uZW50SW5zdGFuY2UpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmV4dGVuZGVyTWFwLmdldChjb21wb25lbnRJbnN0YW5jZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgZXh0ZW5kZXIgPSB0aGlzLmV4dGVuZGVyRmFjdG9yeS5jcmVhdGUoY29tcG9uZW50SW5zdGFuY2UsIGNvbXBvbmVudFR5cGUpO1xyXG4gICAgdGhpcy5leHRlbmRlck1hcC5zZXQoY29tcG9uZW50SW5zdGFuY2UsIGV4dGVuZGVyKTtcclxuXHJcbiAgICByZXR1cm4gZXh0ZW5kZXI7XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IENvbXBvbmVudEV4dGVuZGVyTWFuYWdlciB9O1xyXG4iXX0=