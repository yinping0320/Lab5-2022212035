/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ListviewExtender } from './listview-extender';
import { LookupExtender } from './lookup-extender';
import { FilterExtender } from './filter-extender';
import { TabExtender } from './tab-extender';
import { SearchExtender } from './search-extender';
import { CheckboxExtender } from './checkbox-extender';
import { AttachmentExtender } from './attachment-extender';
import { MapExtender } from './map-extender';
/**
 * 组件适配器工厂
 */
var /**
 * 组件适配器工厂
 */
ComponentExtenderFactory = /** @class */ (function () {
    function ComponentExtenderFactory(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 创建适配器
     */
    /**
     * 创建适配器
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    ComponentExtenderFactory.prototype.create = /**
     * 创建适配器
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    function (componentInstance, componentType) {
        /** @type {?} */
        var componentExtenderInstance;
        switch (componentType) {
            case 'fm-listview':
                componentExtenderInstance = new ListviewExtender(componentInstance, this.viewModelContext);
                break;
            case 'Lookup':
                componentExtenderInstance = new LookupExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-filter':
                componentExtenderInstance = new FilterExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-tabs':
                componentExtenderInstance = new TabExtender(componentInstance, this.viewModelContext);
                break;
            case 'van-search':
                componentExtenderInstance = new SearchExtender(componentInstance, this.viewModelContext);
                break;
            case 'Checkbox':
                componentExtenderInstance = new CheckboxExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-attachment':
                componentExtenderInstance = new AttachmentExtender(componentInstance, this.viewModelContext);
                break;
            case 'Map':
                componentExtenderInstance = new MapExtender(componentInstance, this.viewModelContext);
                break;
            default:
                componentExtenderInstance = null;
        }
        return componentExtenderInstance;
    };
    return ComponentExtenderFactory;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentExtenderFactory.prototype.viewModelContext;
}
export { ComponentExtenderFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWV4dGVuZGVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS12dWUtYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnQtZXh0ZW5kZXJzL2NvbXBvbmVudC1leHRlbmRlci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUs3Qzs7OztJQUlFLGtDQUFZLGdCQUFrQztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0kseUNBQU07Ozs7OztJQUFiLFVBQWMsaUJBQXNCLEVBQUUsYUFBcUI7O1lBQ3JELHlCQUE0QztRQUNoRCxRQUFRLGFBQWEsRUFBRTtZQUNyQixLQUFLLGFBQWE7Z0JBQ2hCLHlCQUF5QixHQUFHLElBQUksZ0JBQWdCLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQzNGLE1BQU07WUFDUixLQUFLLFFBQVE7Z0JBQ1gseUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3pGLE1BQU07WUFDUixLQUFLLFdBQVc7Z0JBQ2QseUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3pGLE1BQU07WUFDUixLQUFLLFNBQVM7Z0JBQ1oseUJBQXlCLEdBQUcsSUFBSSxXQUFXLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RGLE1BQU07WUFDUixLQUFLLFlBQVk7Z0JBQ2YseUJBQXlCLEdBQUcsSUFBSSxjQUFjLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3pGLE1BQU07WUFDUixLQUFLLFVBQVU7Z0JBQ2IseUJBQXlCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtZQUNSLEtBQUssZUFBZTtnQkFDbEIseUJBQXlCLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDN0YsTUFBTTtZQUNSLEtBQUssS0FBSztnQkFDUix5QkFBeUIsR0FBRyxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEYsTUFBTTtZQUNSO2dCQUNFLHlCQUF5QixHQUFHLElBQUksQ0FBQztTQUNwQztRQUVELE9BQU8seUJBQXlCLENBQUM7SUFDbkMsQ0FBQztJQUVILCtCQUFDO0FBQUQsQ0FBQyxBQTdDRCxJQTZDQzs7Ozs7O0lBM0NDLG9EQUEyQzs7QUE2QzdDLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcbmltcG9ydCB7IENvbXBvbmVudEV4dGVuZGVyIH0gZnJvbSAnLi9jb21wb25lbnQtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBMaXN0dmlld0V4dGVuZGVyIH0gZnJvbSAnLi9saXN0dmlldy1leHRlbmRlcic7XHJcbmltcG9ydCB7IExvb2t1cEV4dGVuZGVyIH0gZnJvbSAnLi9sb29rdXAtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBGaWx0ZXJFeHRlbmRlciB9IGZyb20gJy4vZmlsdGVyLWV4dGVuZGVyJztcclxuaW1wb3J0IHsgVGFiRXh0ZW5kZXIgfSBmcm9tICcuL3RhYi1leHRlbmRlcic7XHJcbmltcG9ydCB7IFJlZmxlc2hFeHRlbmRlciB9IGZyb20gJy4vcmVmbGVzaC1leHRlbmRlcic7XHJcbmltcG9ydCB7IFNlYXJjaEV4dGVuZGVyIH0gZnJvbSAnLi9zZWFyY2gtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBDaGVja2JveEV4dGVuZGVyIH0gZnJvbSAnLi9jaGVja2JveC1leHRlbmRlcic7XHJcbmltcG9ydCB7IEF0dGFjaG1lbnRFeHRlbmRlciB9IGZyb20gJy4vYXR0YWNobWVudC1leHRlbmRlcic7XHJcbmltcG9ydCB7IE1hcEV4dGVuZGVyIH0gZnJvbSAnLi9tYXAtZXh0ZW5kZXInO1xyXG5cclxuLyoqXHJcbiAqIOe7hOS7tumAgumFjeWZqOW3peWOglxyXG4gKi9cclxuY2xhc3MgQ29tcG9uZW50RXh0ZW5kZXJGYWN0b3J5IHtcclxuXHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yib5bu66YCC6YWN5ZmoXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZShjb21wb25lbnRJbnN0YW5jZTogYW55LCBjb21wb25lbnRUeXBlOiBzdHJpbmcpOiBDb21wb25lbnRFeHRlbmRlciB7XHJcbiAgICBsZXQgY29tcG9uZW50RXh0ZW5kZXJJbnN0YW5jZTogQ29tcG9uZW50RXh0ZW5kZXI7XHJcbiAgICBzd2l0Y2ggKGNvbXBvbmVudFR5cGUpIHtcclxuICAgICAgY2FzZSAnZm0tbGlzdHZpZXcnOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgTGlzdHZpZXdFeHRlbmRlcihjb21wb25lbnRJbnN0YW5jZSwgdGhpcy52aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnTG9va3VwJzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IExvb2t1cEV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmbS1maWx0ZXInOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgRmlsdGVyRXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2ZtLXRhYnMnOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgVGFiRXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ3Zhbi1zZWFyY2gnOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgU2VhcmNoRXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ0NoZWNrYm94JzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IENoZWNrYm94RXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ2ZtLWF0dGFjaG1lbnQnOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgQXR0YWNobWVudEV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdNYXAnOlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBuZXcgTWFwRXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgY29tcG9uZW50RXh0ZW5kZXJJbnN0YW5jZSA9IG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2U7XHJcbiAgfVxyXG5cclxufVxyXG5cclxuZXhwb3J0IHsgQ29tcG9uZW50RXh0ZW5kZXJGYWN0b3J5IH07Il19