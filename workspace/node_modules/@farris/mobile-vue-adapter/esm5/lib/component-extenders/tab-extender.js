/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/tab-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
var /**
 * 列表组件扩展
 */
TabExtender = /** @class */ (function () {
    function TabExtender(tabInstance, viewModelContext) {
        this.tabInstance = tabInstance;
        this.viewModelContext = viewModelContext;
        this.viewModelContext.uiState.setPropertyValue('tabState', { currentTab: tabInstance.currentName });
    }
    /**
     * 扩展组件
     */
    /**
     * 扩展组件
     * @return {?}
     */
    TabExtender.prototype.extend = /**
     * 扩展组件
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        // 给uistate的赋值当前tab页
        this.tabInstance.$on('change', (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
            if (data.name !== self.viewModelContext.uiState['tabState']['currentTab']) {
                self.viewModelContext.uiState.setPropertyValue('tabState', { currentTab: data.name });
                self.viewModelContext.repository.setPaginationInfo({ pageIndex: 1 });
                self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
            }
        }));
    };
    /**
     * 清理状态
     */
    /**
     * 清理状态
     * @return {?}
     */
    TabExtender.prototype.dispose = /**
     * 清理状态
     * @return {?}
     */
    function () {
        this.tabInstance.$off('change');
    };
    return TabExtender;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    TabExtender.prototype.tabInstance;
    /**
     * @type {?}
     * @private
     */
    TabExtender.prototype.viewModelContext;
}
export { TabExtender };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLWV4dGVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtdnVlLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50LWV4dGVuZGVycy90YWItZXh0ZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQTs7OztJQU1FLHFCQUFZLFdBQWdCLEVBQUUsZ0JBQXFCO1FBQ2pELElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsNEJBQU07Ozs7SUFBTjs7WUFDUSxJQUFJLEdBQUcsSUFBSTtRQUNqQixvQkFBb0I7UUFDcEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsUUFBUTs7OztRQUFFLFVBQUMsSUFBSTtZQUNsQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxDQUFDO1lBQ25GLElBQUcsSUFBSSxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLFlBQVksQ0FBQyxFQUFDO2dCQUN2RSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQztnQkFDdEYsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFBO2dCQUNwRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLENBQUMsQ0FBQTthQUM3RTtRQUNILENBQUMsRUFBQyxDQUFBO0lBQ0osQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDZCQUFPOzs7O0lBQVA7UUFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUgsa0JBQUM7QUFBRCxDQUFDLEFBbkNELElBbUNDOzs7Ozs7SUFqQ0Msa0NBQXlCOzs7OztJQUV6Qix1Q0FBMkM7O0FBaUM3QyxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQ29tcG9uZW50RXh0ZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudC1leHRlbmRlcic7XHJcblxyXG4vKipcclxuICog5YiX6KGo57uE5Lu25omp5bGVXHJcbiAqL1xyXG5jbGFzcyBUYWJFeHRlbmRlciBpbXBsZW1lbnRzIENvbXBvbmVudEV4dGVuZGVyIHtcclxuXHJcbiAgcHJpdmF0ZSB0YWJJbnN0YW5jZTogYW55O1xyXG5cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHRhYkluc3RhbmNlOiBhbnksIHZpZXdNb2RlbENvbnRleHQ6IGFueSkge1xyXG4gICAgdGhpcy50YWJJbnN0YW5jZSA9IHRhYkluc3RhbmNlO1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICAgIHRoaXMudmlld01vZGVsQ29udGV4dC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJ3RhYlN0YXRlJywgeyBjdXJyZW50VGFiOiB0YWJJbnN0YW5jZS5jdXJyZW50TmFtZSB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxlee7hOS7tlxyXG4gICAqL1xyXG4gIGV4dGVuZCgpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8g57uZdWlzdGF0ZeeahOi1i+WAvOW9k+WJjXRhYumhtVxyXG4gICAgdGhpcy50YWJJbnN0YW5jZS4kb24oJ2NoYW5nZScsIChkYXRhKSA9PiB7XHJcbiAgICAgIHdpbmRvd1snTU9CSUxFX09SSUdJTl9CQUNLJ10gJiYgd2luZG93WydNT0JJTEVfT1JJR0lOX0JBQ0snXS5yZWZsdXNoT3JpZ2luR29iYWNrKCk7XHJcbiAgICAgIGlmKGRhdGEubmFtZSAhPT0gc2VsZi52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGVbJ3RhYlN0YXRlJ11bJ2N1cnJlbnRUYWInXSl7XHJcbiAgICAgICAgc2VsZi52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSgndGFiU3RhdGUnLCB7IGN1cnJlbnRUYWI6IGRhdGEubmFtZSB9KTtcclxuICAgICAgICBzZWxmLnZpZXdNb2RlbENvbnRleHQucmVwb3NpdG9yeS5zZXRQYWdpbmF0aW9uSW5mbyh7IHBhZ2VJbmRleDogMSB9KVxyXG4gICAgICAgIHNlbGYudmlld01vZGVsQ29udGV4dC5hcHBDb250ZXh0LmV2ZW50QnVzLnRyaWdnZXJFdmVudCh7IHR5cGU6ICdMb2FkRGF0YScgfSlcclxuICAgICAgfVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa4heeQhueKtuaAgVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnRhYkluc3RhbmNlLiRvZmYoJ2NoYW5nZScpO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFRhYkV4dGVuZGVyIH0iXX0=