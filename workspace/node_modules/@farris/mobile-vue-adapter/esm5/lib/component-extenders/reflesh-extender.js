/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/reflesh-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * 列表组件扩展
 */
var /**
 * 列表组件扩展
 */
RefleshExtender = /** @class */ (function () {
    function RefleshExtender(refleshInstance, viewModelContext) {
        this.refleshInstance = refleshInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     */
    /**
     * 扩展组件
     * @return {?}
     */
    RefleshExtender.prototype.extend = /**
     * 扩展组件
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this;
        // 监听下拉刷新组件
        this.refleshInstance.$on('input', (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                self.viewModelContext.repository.setPaginationInfo({
                    pageIndex: 1
                });
                self.viewModelContext.uiState.setPropertyValue('listaviewState', tslib_1.__assign({}, self.viewModelContext.uiState['listaviewState'], { loadMoreLoading: true }));
                self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
            }
            self.viewModelContext.appContext.eventBus.subscribe(_this.viewModelContext.id + "-reflesh-extend", (/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.type === 'loadDataFinished') {
                    self.viewModelContext.uiState.setPropertyValue('listaviewState', tslib_1.__assign({}, self.viewModelContext.uiState['listaviewState'], { refreshLoading: false, loadMoreLoading: false }));
                }
            }));
        }));
    };
    /**
     * 清理状态
     */
    /**
     * 清理状态
     * @return {?}
     */
    RefleshExtender.prototype.dispose = /**
     * 清理状态
     * @return {?}
     */
    function () {
        this.refleshInstance.$off('input');
        this.viewModelContext.appContext.eventBus.unsubscribe(this.viewModelContext.id + "-reflesh-extend");
    };
    return RefleshExtender;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    RefleshExtender.prototype.refleshInstance;
    /**
     * @type {?}
     * @private
     */
    RefleshExtender.prototype.viewModelContext;
}
export { RefleshExtender };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVmbGVzaC1leHRlbmRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLXZ1ZS1hZGFwdGVyLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudC1leHRlbmRlcnMvcmVmbGVzaC1leHRlbmRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFNQTs7OztJQU1FLHlCQUFZLGVBQW9CLEVBQUUsZ0JBQXFCO1FBQ3JELElBQUksQ0FBQyxlQUFlLEdBQUcsZUFBZSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUMzQyxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsZ0NBQU07Ozs7SUFBTjtRQUFBLGlCQWlCQzs7WUFoQk8sSUFBSSxHQUFHLElBQUk7UUFDakIsV0FBVztRQUNYLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLE9BQU87Ozs7UUFBRSxVQUFDLElBQUk7WUFDckMsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQztvQkFDakQsU0FBUyxFQUFFLENBQUM7aUJBQ2IsQ0FBQyxDQUFBO2dCQUNGLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLHVCQUFPLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBRSxlQUFlLEVBQUUsSUFBSSxJQUFHLENBQUE7Z0JBQy9JLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUUsQ0FBQyxDQUFBO2FBQzdFO1lBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFJLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLG9CQUFpQjs7OztZQUFDLFVBQUMsS0FBSztnQkFDckcsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLGtCQUFrQixFQUFFO29CQUNyQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGdCQUFnQix1QkFBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLElBQUUsY0FBYyxFQUFFLEtBQUssRUFBRSxlQUFlLEVBQUUsS0FBSyxJQUFHLENBQUM7aUJBQ3pLO1lBQ0gsQ0FBQyxFQUFDLENBQUE7UUFDSixDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSCxpQ0FBTzs7OztJQUFQO1FBQ0UsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLG9CQUFpQixDQUFDLENBQUM7SUFDdEcsQ0FBQztJQUVILHNCQUFDO0FBQUQsQ0FBQyxBQXpDRCxJQXlDQzs7Ozs7O0lBdkNDLDBDQUE2Qjs7Ozs7SUFFN0IsMkNBQTJDOztBQXVDN0MsT0FBTyxFQUFFLGVBQWUsRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcbmltcG9ydCB7IENvbXBvbmVudEV4dGVuZGVyIH0gZnJvbSAnLi9jb21wb25lbnQtZXh0ZW5kZXInO1xyXG5cclxuLyoqXHJcbiAqIOWIl+ihqOe7hOS7tuaJqeWxlVxyXG4gKi9cclxuY2xhc3MgUmVmbGVzaEV4dGVuZGVyIGltcGxlbWVudHMgQ29tcG9uZW50RXh0ZW5kZXIge1xyXG5cclxuICBwcml2YXRlIHJlZmxlc2hJbnN0YW5jZTogYW55O1xyXG5cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHJlZmxlc2hJbnN0YW5jZTogYW55LCB2aWV3TW9kZWxDb250ZXh0OiBhbnkpIHtcclxuICAgIHRoaXMucmVmbGVzaEluc3RhbmNlID0gcmVmbGVzaEluc3RhbmNlO1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJqeWxlee7hOS7tlxyXG4gICAqL1xyXG4gIGV4dGVuZCgpIHtcclxuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgLy8g55uR5ZCs5LiL5ouJ5Yi35paw57uE5Lu2XHJcbiAgICB0aGlzLnJlZmxlc2hJbnN0YW5jZS4kb24oJ2lucHV0JywgKGRhdGEpID0+IHtcclxuICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICBzZWxmLnZpZXdNb2RlbENvbnRleHQucmVwb3NpdG9yeS5zZXRQYWdpbmF0aW9uSW5mbyh7XHJcbiAgICAgICAgICBwYWdlSW5kZXg6IDFcclxuICAgICAgICB9KVxyXG4gICAgICAgIHNlbGYudmlld01vZGVsQ29udGV4dC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJ2xpc3Rhdmlld1N0YXRlJywgeyAuLi5zZWxmLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZVsnbGlzdGF2aWV3U3RhdGUnXSwgbG9hZE1vcmVMb2FkaW5nOiB0cnVlIH0pXHJcbiAgICAgICAgc2VsZi52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQuZXZlbnRCdXMudHJpZ2dlckV2ZW50KHsgdHlwZTogJ0xvYWREYXRhJyB9KVxyXG4gICAgICB9XHJcbiAgICAgIHNlbGYudmlld01vZGVsQ29udGV4dC5hcHBDb250ZXh0LmV2ZW50QnVzLnN1YnNjcmliZShgJHt0aGlzLnZpZXdNb2RlbENvbnRleHQuaWR9LXJlZmxlc2gtZXh0ZW5kYCwodmFsdWUpID0+IHtcclxuICAgICAgICBpZiAodmFsdWUudHlwZSA9PT0gJ2xvYWREYXRhRmluaXNoZWQnKSB7XHJcbiAgICAgICAgICBzZWxmLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCdsaXN0YXZpZXdTdGF0ZScsIHsgLi4uc2VsZi52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGVbJ2xpc3Rhdmlld1N0YXRlJ10sIHJlZnJlc2hMb2FkaW5nOiBmYWxzZSwgbG9hZE1vcmVMb2FkaW5nOiBmYWxzZSB9KTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOa4heeQhueKtuaAgVxyXG4gICAqL1xyXG4gIGRpc3Bvc2UoKSB7XHJcbiAgICB0aGlzLnJlZmxlc2hJbnN0YW5jZS4kb2ZmKCdpbnB1dCcpO1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQuZXZlbnRCdXMudW5zdWJzY3JpYmUoYCR7dGhpcy52aWV3TW9kZWxDb250ZXh0LmlkfS1yZWZsZXNoLWV4dGVuZGApO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IFJlZmxlc2hFeHRlbmRlciB9Il19