/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/map-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
var /**
 * 列表组件扩展
 */
MapExtender = /** @class */ (function () {
    function MapExtender(mapInstance, viewModelContext) {
        this.mapInstance = mapInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     */
    /**
     * 扩展组件
     * @return {?}
     */
    MapExtender.prototype.extend = /**
     * 扩展组件
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this;
        // 当前行
        this.mapInstance.$on('markMap', (/**
         * @param {?} selectedData
         * @return {?}
         */
        function (selectedData) {
            // 获取经纬度
            /** @type {?} */
            var lnglat = selectedData.lnglat;
            /** @type {?} */
            var lng = lnglat.lng;
            /** @type {?} */
            var lat = lnglat.lat;
            // 获取经纬度路径
            /** @type {?} */
            var lngPath = _this.mapInstance.lngPath;
            /** @type {?} */
            var latPath = _this.mapInstance.latPath;
            // this.mapInstance.center = [lng, lat];
            // 赋值经纬度
            _this.viewModelContext.bindingData.setValue(_this.getBindingPathArray().concat(lngPath.split('/')), lng, true, true);
            _this.viewModelContext.bindingData.setValue(_this.getBindingPathArray().concat(latPath.split('/')), lat, true, true);
        }));
    };
    /**
     * 清理状态
     */
    /**
     * 清理状态
     * @return {?}
     */
    MapExtender.prototype.dispose = /**
     * 清理状态
     * @return {?}
     */
    function () {
        this.mapInstance.$off('markMap');
    };
    /**
     * @private
     * @return {?}
     */
    MapExtender.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ''; }));
        }
        return [];
    };
    return MapExtender;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.mapInstance;
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.viewModelContext;
}
export { MapExtender };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWV4dGVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtdnVlLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50LWV4dGVuZGVycy9tYXAtZXh0ZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQTs7OztJQU1JLHFCQUFZLFdBQWdCLEVBQUUsZ0JBQXFCO1FBQy9DLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDO1FBQy9CLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUM3QyxDQUFDO0lBRUQ7O09BRUc7Ozs7O0lBQ0gsNEJBQU07Ozs7SUFBTjtRQUFBLGlCQXlCQzs7WUF4QlMsSUFBSSxHQUFHLElBQUk7UUFDakIsTUFBTTtRQUNOLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLFNBQVM7Ozs7UUFBRSxVQUFDLFlBQVk7OztnQkFFbkMsTUFBTSxHQUFHLFlBQVksQ0FBQyxNQUFNOztnQkFDNUIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHOztnQkFDaEIsR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHOzs7Z0JBRWhCLE9BQU8sR0FBRyxLQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87O2dCQUNsQyxPQUFPLEdBQUcsS0FBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPO1lBQ3hDLHdDQUF3QztZQUN4QyxRQUFRO1lBQ1IsS0FBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQ3RDLEtBQUksQ0FBQyxtQkFBbUIsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQ3JELEdBQUcsRUFDSCxJQUFJLEVBQ0osSUFBSSxDQUFDLENBQUM7WUFDVixLQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDdEMsS0FBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDckQsR0FBRyxFQUNILElBQUksRUFDSixJQUFJLENBQ1AsQ0FBQztRQUNOLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQztJQUVEOztPQUVHOzs7OztJQUNILDZCQUFPOzs7O0lBQVA7UUFDSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVPLHlDQUFtQjs7OztJQUEzQjs7WUFDVSxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXO1FBQzFELElBQUksSUFBSSxFQUFFO1lBQ04sT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsS0FBSyxFQUFFLEVBQVIsQ0FBUSxFQUFDLENBQUM7U0FDbEQ7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7SUFDTCxrQkFBQztBQUFELENBQUMsQUF2REQsSUF1REM7Ozs7OztJQXJERyxrQ0FBeUI7Ozs7O0lBRXpCLHVDQUEyQzs7QUFxRC9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRFeHRlbmRlciB9IGZyb20gJy4vY29tcG9uZW50LWV4dGVuZGVyJztcclxuXHJcbi8qKlxyXG4gKiDliJfooajnu4Tku7bmianlsZVcclxuICovXHJcbmNsYXNzIE1hcEV4dGVuZGVyIGltcGxlbWVudHMgQ29tcG9uZW50RXh0ZW5kZXIge1xyXG5cclxuICAgIHByaXZhdGUgbWFwSW5zdGFuY2U6IGFueTtcclxuXHJcbiAgICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IobWFwSW5zdGFuY2U6IGFueSwgdmlld01vZGVsQ29udGV4dDogYW55KSB7XHJcbiAgICAgICAgdGhpcy5tYXBJbnN0YW5jZSA9IG1hcEluc3RhbmNlO1xyXG4gICAgICAgIHRoaXMudmlld01vZGVsQ29udGV4dCA9IHZpZXdNb2RlbENvbnRleHQ7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmianlsZXnu4Tku7ZcclxuICAgICAqL1xyXG4gICAgZXh0ZW5kKCkge1xyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIC8vIOW9k+WJjeihjFxyXG4gICAgICAgIHRoaXMubWFwSW5zdGFuY2UuJG9uKCdtYXJrTWFwJywgKHNlbGVjdGVkRGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAvLyDojrflj5bnu4/nuqzluqZcclxuICAgICAgICAgICAgY29uc3QgbG5nbGF0ID0gc2VsZWN0ZWREYXRhLmxuZ2xhdDtcclxuICAgICAgICAgICAgY29uc3QgbG5nID0gbG5nbGF0LmxuZztcclxuICAgICAgICAgICAgY29uc3QgbGF0ID0gbG5nbGF0LmxhdDtcclxuICAgICAgICAgICAgLy8g6I635Y+W57uP57qs5bqm6Lev5b6EXHJcbiAgICAgICAgICAgIGNvbnN0IGxuZ1BhdGggPSB0aGlzLm1hcEluc3RhbmNlLmxuZ1BhdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhdFBhdGggPSB0aGlzLm1hcEluc3RhbmNlLmxhdFBhdGg7XHJcbiAgICAgICAgICAgIC8vIHRoaXMubWFwSW5zdGFuY2UuY2VudGVyID0gW2xuZywgbGF0XTtcclxuICAgICAgICAgICAgLy8g6LWL5YC857uP57qs5bqmXHJcbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5zZXRWYWx1ZShcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0QmluZGluZ1BhdGhBcnJheSgpLmNvbmNhdChsbmdQYXRoLnNwbGl0KCcvJykpLFxyXG4gICAgICAgICAgICAgICAgbG5nLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEuc2V0VmFsdWUoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEJpbmRpbmdQYXRoQXJyYXkoKS5jb25jYXQobGF0UGF0aC5zcGxpdCgnLycpKSxcclxuICAgICAgICAgICAgICAgIGxhdCxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICB0cnVlXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnkIbnirbmgIFcclxuICAgICAqL1xyXG4gICAgZGlzcG9zZSgpIHtcclxuICAgICAgICB0aGlzLm1hcEluc3RhbmNlLiRvZmYoJ21hcmtNYXAnKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEJpbmRpbmdQYXRoQXJyYXkoKTogYW55W10ge1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEuYmluZGluZ1BhdGg7XHJcbiAgICAgICAgaWYgKHBhdGgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKG4pID0+IG4gIT09ICcnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBNYXBFeHRlbmRlciB9O1xyXG4iXX0=