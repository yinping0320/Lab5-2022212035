/**
 * @fileoverview added by tsickle
 * Generated from: lib/providers-mapper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BefLookupDataService } from '@farris/mobile-bef';
import { CloudPlusAttachment } from './attachment/attachment-children.service';
import { UploadAttachmentService } from './attachment/upload-attachment.service';
import { LookupMappingService } from './lookup-mapping.service';
import { CloudPlusMapService } from './map/cloud-plus-map.service';
/**
 * 映射Providers
 * @return {?}
 */
function mapProviders() {
    return (/**
     * @return {?}
     */
    function provide() {
        /** @type {?} */
        var viewModel = this.$getViewModel();
        /** @type {?} */
        var lookupDataService = new BefLookupDataService(viewModel.context);
        /** @type {?} */
        var lookupMappingService = new LookupMappingService(viewModel.context);
        // 云上协同附件服务
        /** @type {?} */
        var attachmentService = new CloudPlusAttachment();
        // caf提供附件上传和预览接口调用
        /** @type {?} */
        var uploadAttachmentService = new UploadAttachmentService((/** @type {?} */ (viewModel.context.repository)));
        // 云上协同地图服务
        /** @type {?} */
        var mapService = new CloudPlusMapService();
        /** @type {?} */
        var providers = {
            LookupHttpService: lookupDataService,
            LookupMappingFn: lookupMappingService,
            uploadAttachmentService: uploadAttachmentService,
            attachmentService: attachmentService,
            mapService: mapService
        };
        return providers;
    });
}
export { mapProviders };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdmlkZXJzLW1hcHBlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLXZ1ZS1hZGFwdGVyLyIsInNvdXJjZXMiOlsibGliL3Byb3ZpZGVycy1tYXBwZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsb0JBQW9CLEVBQWlCLE1BQU0sb0JBQW9CLENBQUM7QUFDekUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFFL0UsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDakYsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sOEJBQThCLENBQUM7Ozs7O0FBTW5FLFNBQVMsWUFBWTtJQUNuQjs7O0lBQU8sU0FBUyxPQUFPOztZQUNmLFNBQVMsR0FBRyxJQUFJLENBQUMsYUFBYSxFQUFFOztZQUNoQyxpQkFBaUIsR0FBRyxJQUFJLG9CQUFvQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7O1lBQy9ELG9CQUFvQixHQUFHLElBQUksb0JBQW9CLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQzs7O1lBRWxFLGlCQUFpQixHQUFzQixJQUFJLG1CQUFtQixFQUFFOzs7WUFFaEUsdUJBQXVCLEdBQzNCLElBQUksdUJBQXVCLENBQUMsbUJBQUEsU0FBUyxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQXNCLENBQUM7OztZQUUzRSxVQUFVLEdBQWUsSUFBSSxtQkFBbUIsRUFBRTs7WUFDbEQsU0FBUyxHQUFHO1lBQ2hCLGlCQUFpQixFQUFFLGlCQUFpQjtZQUNwQyxlQUFlLEVBQUUsb0JBQW9CO1lBQ3JDLHVCQUF1Qix5QkFBQTtZQUN2QixpQkFBaUIsbUJBQUE7WUFDakIsVUFBVSxZQUFBO1NBQ1g7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDLEVBQUM7QUFDSixDQUFDO0FBRUQsT0FBTyxFQUFFLFlBQVksRUFBRSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQmVmTG9va3VwRGF0YVNlcnZpY2UsIEJlZlJlcG9zaXRvcnkgfSBmcm9tICdAZmFycmlzL21vYmlsZS1iZWYnO1xyXG5pbXBvcnQgeyBDbG91ZFBsdXNBdHRhY2htZW50IH0gZnJvbSAnLi9hdHRhY2htZW50L2F0dGFjaG1lbnQtY2hpbGRyZW4uc2VydmljZSc7XHJcbmltcG9ydCB7IEF0dGFjaG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9hdHRhY2htZW50L2F0dGFjaG1lbnQuc2VydmljZSc7XHJcbmltcG9ydCB7IFVwbG9hZEF0dGFjaG1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9hdHRhY2htZW50L3VwbG9hZC1hdHRhY2htZW50LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBMb29rdXBNYXBwaW5nU2VydmljZSB9IGZyb20gJy4vbG9va3VwLW1hcHBpbmcuc2VydmljZSc7XHJcbmltcG9ydCB7IENsb3VkUGx1c01hcFNlcnZpY2UgfSBmcm9tICcuL21hcC9jbG91ZC1wbHVzLW1hcC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTWFwU2VydmljZSB9IGZyb20gJy4vbWFwL21hcC5zZXJ2aWNlJztcclxuXHJcbi8qKlxyXG4gKiDmmKDlsIRQcm92aWRlcnNcclxuICovXHJcbmZ1bmN0aW9uIG1hcFByb3ZpZGVycygpIHtcclxuICByZXR1cm4gZnVuY3Rpb24gcHJvdmlkZSgpIHtcclxuICAgIGNvbnN0IHZpZXdNb2RlbCA9IHRoaXMuJGdldFZpZXdNb2RlbCgpO1xyXG4gICAgY29uc3QgbG9va3VwRGF0YVNlcnZpY2UgPSBuZXcgQmVmTG9va3VwRGF0YVNlcnZpY2Uodmlld01vZGVsLmNvbnRleHQpO1xyXG4gICAgY29uc3QgbG9va3VwTWFwcGluZ1NlcnZpY2UgPSBuZXcgTG9va3VwTWFwcGluZ1NlcnZpY2Uodmlld01vZGVsLmNvbnRleHQpO1xyXG4gICAgLy8g5LqR5LiK5Y2P5ZCM6ZmE5Lu25pyN5YqhXHJcbiAgICBjb25zdCBhdHRhY2htZW50U2VydmljZTogQXR0YWNobWVudFNlcnZpY2UgPSBuZXcgQ2xvdWRQbHVzQXR0YWNobWVudCgpO1xyXG4gICAgLy8gY2Fm5o+Q5L6b6ZmE5Lu25LiK5Lyg5ZKM6aKE6KeI5o6l5Y+j6LCD55SoXHJcbiAgICBjb25zdCB1cGxvYWRBdHRhY2htZW50U2VydmljZTogVXBsb2FkQXR0YWNobWVudFNlcnZpY2UgPVxyXG4gICAgICBuZXcgVXBsb2FkQXR0YWNobWVudFNlcnZpY2Uodmlld01vZGVsLmNvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT4pO1xyXG4gICAgLy8g5LqR5LiK5Y2P5ZCM5Zyw5Zu+5pyN5YqhXHJcbiAgICBjb25zdCBtYXBTZXJ2aWNlOiBNYXBTZXJ2aWNlID0gbmV3IENsb3VkUGx1c01hcFNlcnZpY2UoKTtcclxuICAgIGNvbnN0IHByb3ZpZGVycyA9IHtcclxuICAgICAgTG9va3VwSHR0cFNlcnZpY2U6IGxvb2t1cERhdGFTZXJ2aWNlLFxyXG4gICAgICBMb29rdXBNYXBwaW5nRm46IGxvb2t1cE1hcHBpbmdTZXJ2aWNlLFxyXG4gICAgICB1cGxvYWRBdHRhY2htZW50U2VydmljZSxcclxuICAgICAgYXR0YWNobWVudFNlcnZpY2UsXHJcbiAgICAgIG1hcFNlcnZpY2VcclxuICAgIH07XHJcbiAgICByZXR1cm4gcHJvdmlkZXJzO1xyXG4gIH07XHJcbn1cclxuXHJcbmV4cG9ydCB7IG1hcFByb3ZpZGVycyB9Il19