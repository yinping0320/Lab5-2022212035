/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-states-mapper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { recomputable } from './recompute';
/**
 * @return {?}
 */
function mapEntityListData() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getEntityListData();
    }), 'entityListData');
}
/**
 * @return {?}
 */
function mapCurrentEntityData() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getCurrentEntityData();
    }), 'currentEntityData');
}
/**
 * @return {?}
 */
function mapUIState() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getUIState();
    }), 'uiState');
}
/**
 * @return {?}
 */
function mapForm() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getForm();
    }), 'form');
}
/**
 * @return {?}
 */
function mapStateMachine() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getStateMachine();
    }), 'stateMachine');
}
/**
 * @param {?=} extraStates
 * @return {?}
 */
function mapBindingStates(extraStates) {
    /** @type {?} */
    var mappedBindingStates = {
        entityListData: mapEntityListData(),
        currentEntityData: mapCurrentEntityData(),
        uiState: mapUIState(),
        form: mapForm(),
        stateMachine: mapStateMachine()
    };
    /** @type {?} */
    var allMappedStates = Object.assign({}, mappedBindingStates, extraStates);
    return allMappedStates;
}
export { mapBindingStates, mapEntityListData, mapCurrentEntityData, mapUIState, mapForm };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZy1zdGF0ZXMtbWFwcGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtdnVlLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1zdGF0ZXMtbWFwcGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGFBQWEsQ0FBQzs7OztBQUUzQyxTQUFTLGlCQUFpQjtJQUN4QixPQUFPLFlBQVk7OztJQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0lBQ2pELENBQUMsR0FBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3ZCLENBQUM7Ozs7QUFFRCxTQUFTLG9CQUFvQjtJQUMzQixPQUFPLFlBQVk7OztJQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsRUFBRSxDQUFDO0lBQ3BELENBQUMsR0FBRSxtQkFBbUIsQ0FBQyxDQUFDO0FBQzFCLENBQUM7Ozs7QUFFRCxTQUFTLFVBQVU7SUFDakIsT0FBTyxZQUFZOzs7SUFBQztRQUNsQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDMUMsQ0FBQyxHQUFFLFNBQVMsQ0FBQyxDQUFDO0FBQ2hCLENBQUM7Ozs7QUFFRCxTQUFTLE9BQU87SUFDZCxPQUFPLFlBQVk7OztJQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUN2QyxDQUFDLEdBQUUsTUFBTSxDQUFDLENBQUM7QUFDYixDQUFDOzs7O0FBRUQsU0FBUyxlQUFlO0lBQ3RCLE9BQU8sWUFBWTs7O0lBQUM7UUFDbEIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQy9DLENBQUMsR0FBRSxjQUFjLENBQUMsQ0FBQztBQUNyQixDQUFDOzs7OztBQUVELFNBQVMsZ0JBQWdCLENBQUMsV0FBaUI7O1FBQ25DLG1CQUFtQixHQUFHO1FBQzFCLGNBQWMsRUFBRSxpQkFBaUIsRUFBRTtRQUNuQyxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRTtRQUN6QyxPQUFPLEVBQUUsVUFBVSxFQUFFO1FBQ3JCLElBQUksRUFBRSxPQUFPLEVBQUU7UUFDZixZQUFZLEVBQUUsZUFBZSxFQUFFO0tBQ2hDOztRQUVLLGVBQWUsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxXQUFXLENBQUM7SUFDM0UsT0FBTyxlQUFlLENBQUM7QUFDekIsQ0FBQztBQUVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxvQkFBb0IsRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWNvbXB1dGFibGUgfSBmcm9tICcuL3JlY29tcHV0ZSc7XHJcblxyXG5mdW5jdGlvbiBtYXBFbnRpdHlMaXN0RGF0YSgpIHtcclxuICByZXR1cm4gcmVjb21wdXRhYmxlKGZ1bmN0aW9uKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuJGJpbmRpbmdTdGF0ZXMuZ2V0RW50aXR5TGlzdERhdGEoKTtcclxuICB9LCAnZW50aXR5TGlzdERhdGEnKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwQ3VycmVudEVudGl0eURhdGEoKSB7XHJcbiAgcmV0dXJuIHJlY29tcHV0YWJsZShmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLiRiaW5kaW5nU3RhdGVzLmdldEN1cnJlbnRFbnRpdHlEYXRhKCk7XHJcbiAgfSwgJ2N1cnJlbnRFbnRpdHlEYXRhJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hcFVJU3RhdGUoKSB7XHJcbiAgcmV0dXJuIHJlY29tcHV0YWJsZShmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiB0aGlzLiRiaW5kaW5nU3RhdGVzLmdldFVJU3RhdGUoKTtcclxuICB9LCAndWlTdGF0ZScpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtYXBGb3JtKCkge1xyXG4gIHJldHVybiByZWNvbXB1dGFibGUoZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kYmluZGluZ1N0YXRlcy5nZXRGb3JtKCk7XHJcbiAgfSwgJ2Zvcm0nKTtcclxufVxyXG5cclxuZnVuY3Rpb24gbWFwU3RhdGVNYWNoaW5lKCkge1xyXG4gIHJldHVybiByZWNvbXB1dGFibGUoZnVuY3Rpb24oKSB7XHJcbiAgICByZXR1cm4gdGhpcy4kYmluZGluZ1N0YXRlcy5nZXRTdGF0ZU1hY2hpbmUoKTtcclxuICB9LCAnc3RhdGVNYWNoaW5lJyk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIG1hcEJpbmRpbmdTdGF0ZXMoZXh0cmFTdGF0ZXM/OiBhbnkpIHtcclxuICBjb25zdCBtYXBwZWRCaW5kaW5nU3RhdGVzID0ge1xyXG4gICAgZW50aXR5TGlzdERhdGE6IG1hcEVudGl0eUxpc3REYXRhKCksXHJcbiAgICBjdXJyZW50RW50aXR5RGF0YTogbWFwQ3VycmVudEVudGl0eURhdGEoKSxcclxuICAgIHVpU3RhdGU6IG1hcFVJU3RhdGUoKSxcclxuICAgIGZvcm06IG1hcEZvcm0oKSxcclxuICAgIHN0YXRlTWFjaGluZTogbWFwU3RhdGVNYWNoaW5lKClcclxuICB9O1xyXG5cclxuICBjb25zdCBhbGxNYXBwZWRTdGF0ZXMgPSBPYmplY3QuYXNzaWduKHt9LCBtYXBwZWRCaW5kaW5nU3RhdGVzLCBleHRyYVN0YXRlcyk7XHJcbiAgcmV0dXJuIGFsbE1hcHBlZFN0YXRlcztcclxufVxyXG5cclxuZXhwb3J0IHsgbWFwQmluZGluZ1N0YXRlcywgbWFwRW50aXR5TGlzdERhdGEsIG1hcEN1cnJlbnRFbnRpdHlEYXRhLCBtYXBVSVN0YXRlLCBtYXBGb3JtIH07XHJcbiJdfQ==