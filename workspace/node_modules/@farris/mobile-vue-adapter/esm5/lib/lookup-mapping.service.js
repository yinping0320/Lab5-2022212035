/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-mapping.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * 帮助映射服务
 */
var /**
 * 帮助映射服务
 */
LookupMappingService = /** @class */ (function () {
    function LookupMappingService(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 映射字段
     * @summary
     * mapFields格式形如：
     * {
     *    id: "assoField.assoField",
     *    code: "assoField.assoField_Code",
     *    name: "assoField.assoField_Name"
     * }
     */
    /**
     * 映射字段
     * \@summary
     * mapFields格式形如：
     * {
     *    id: "assoField.assoField",
     *    code: "assoField.assoField_Code",
     *    name: "assoField.assoField_Name"
     * }
     * @param {?} helpData
     * @param {?} mappingFields
     * @return {?}
     */
    LookupMappingService.prototype.mapFields = /**
     * 映射字段
     * \@summary
     * mapFields格式形如：
     * {
     *    id: "assoField.assoField",
     *    code: "assoField.assoField_Code",
     *    name: "assoField.assoField_Name"
     * }
     * @param {?} helpData
     * @param {?} mappingFields
     * @return {?}
     */
    function (helpData, mappingFields) {
        var _this = this;
        console.log(helpData);
        if (!mappingFields) {
            return;
        }
        /** @type {?} */
        var helpFields = Object.keys(mappingFields);
        /** @type {?} */
        var idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === 'id'; }));
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = tslib_1.__spread(['id'], helpFields);
        }
        /** @type {?} */
        var that = this;
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            var val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData
                        .map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) {
                        return _this.getValue(f, h);
                    }))
                        .join(',');
                }
                else {
                    val = that.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            var pathArr = that.getBindingPathArray();
            mappingFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            function (ff) {
                if (!helpData) {
                }
                else {
                    that.viewModelContext.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
    };
    /**
     * 获取字段值
     */
    /**
     * 获取字段值
     * @param {?} fieldPath
     * @return {?}
     */
    LookupMappingService.prototype.getFieldValue = /**
     * 获取字段值
     * @param {?} fieldPath
     * @return {?}
     */
    function (fieldPath) {
        /** @type {?} */
        var bindingPathArray = this.getBindingPathArray();
        /** @type {?} */
        var fieldPathArray = bindingPathArray.concat(fieldPath.split('.'));
        return this.viewModelContext.bindingData.getValue(fieldPathArray);
    };
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    LookupMappingService.prototype.getValue = /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    function (f, data) {
        /** @type {?} */
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a[b];
            }), data);
        }
        return val;
    };
    /**
     * @private
     * @return {?}
     */
    LookupMappingService.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ''; }));
        }
        return [];
    };
    return LookupMappingService;
}());
/**
 * 帮助映射服务
 */
export { LookupMappingService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupMappingService.prototype.viewModelContext;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLW1hcHBpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLXZ1ZS1hZGFwdGVyLyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC1tYXBwaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBS0E7Ozs7SUFHRSw4QkFBWSxnQkFBa0M7UUFDNUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO0lBQzNDLENBQUM7SUFFRDs7Ozs7Ozs7O09BU0c7Ozs7Ozs7Ozs7Ozs7O0lBQ0gsd0NBQVM7Ozs7Ozs7Ozs7Ozs7SUFBVCxVQUFVLFFBQWEsRUFBRSxhQUFrQjtRQUEzQyxpQkFnREM7UUEvQ0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU87U0FDUjs7WUFFRyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7O1lBQ3JDLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsSUFBSSxJQUFLLE9BQUEsSUFBSSxLQUFLLElBQUksRUFBYixDQUFhLEVBQUM7UUFDN0QsSUFBSSxVQUFVLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLE9BQU8sS0FBSyxDQUFDLEVBQUU7WUFDOUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDOUIsVUFBVSxxQkFBSSxJQUFJLEdBQUssVUFBVSxDQUFDLENBQUM7U0FDcEM7O1lBQ0ssSUFBSSxHQUFHLElBQUk7UUFDakIsVUFBVSxDQUFDLE9BQU87Ozs7UUFBQyxVQUFDLENBQU07Ozs7O2dCQUtwQixHQUFHLEdBQVEsRUFBRTtZQUNqQixJQUFJLFFBQVEsRUFBRTtnQkFDWixJQUFJLFFBQVEsWUFBWSxLQUFLLEVBQUU7b0JBQzdCLEdBQUcsR0FBRyxRQUFRO3lCQUNYLEdBQUc7Ozs7b0JBQUMsVUFBQyxDQUFNO3dCQUNWLE9BQU8sS0FBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLENBQUMsRUFBQzt5QkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUNsQzthQUNGOzs7OztnQkFLSyxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUMsRUFBTztnQkFDMUMsSUFBSSxDQUFDLFFBQVEsRUFBRTtpQkFDZDtxQkFBTTtvQkFDTCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDeEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQzdCLEdBQUcsRUFDSCxJQUFJLEVBQ0osSUFBSSxDQUNMLENBQUM7aUJBQ0g7WUFDSCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDO0lBRUwsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSSw0Q0FBYTs7Ozs7SUFBcEIsVUFBcUIsU0FBaUI7O1lBQzlCLGdCQUFnQixHQUFHLElBQUksQ0FBQyxtQkFBbUIsRUFBRTs7WUFDN0MsY0FBYyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BFLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7Ozs7OztJQUVPLHVDQUFROzs7Ozs7SUFBaEIsVUFBaUIsQ0FBUyxFQUFFLElBQVM7O1lBQy9CLEdBQUcsR0FBRyxFQUFFO1FBQ1osSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ3pCLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDZjthQUFNO1lBQ0wsR0FBRyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTTs7Ozs7WUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM3QixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNkLENBQUMsR0FBRSxJQUFJLENBQUMsQ0FBQztTQUNWO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDYixDQUFDOzs7OztJQUVPLGtEQUFtQjs7OztJQUEzQjs7WUFDUSxJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXO1FBQzFELElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFDLENBQUMsSUFBSyxPQUFBLENBQUMsS0FBSyxFQUFFLEVBQVIsQ0FBUSxFQUFDLENBQUM7U0FDaEQ7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUEvRkQsSUErRkM7Ozs7Ozs7Ozs7SUE5RkMsZ0RBQTJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcblxyXG4vKipcclxuICog5biu5Yqp5pig5bCE5pyN5YqhXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgTG9va3VwTWFwcGluZ1NlcnZpY2Uge1xyXG4gIHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dDtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaYoOWwhOWtl+autVxyXG4gICAqIEBzdW1tYXJ5XHJcbiAgICogbWFwRmllbGRz5qC85byP5b2i5aaC77yaXHJcbiAgICoge1xyXG4gICAqICAgIGlkOiBcImFzc29GaWVsZC5hc3NvRmllbGRcIixcclxuICAgKiAgICBjb2RlOiBcImFzc29GaWVsZC5hc3NvRmllbGRfQ29kZVwiLFxyXG4gICAqICAgIG5hbWU6IFwiYXNzb0ZpZWxkLmFzc29GaWVsZF9OYW1lXCJcclxuICAgKiB9XHJcbiAgICovXHJcbiAgbWFwRmllbGRzKGhlbHBEYXRhOiBhbnksIG1hcHBpbmdGaWVsZHM6IGFueSkge1xyXG4gICAgY29uc29sZS5sb2coaGVscERhdGEpO1xyXG4gICAgaWYgKCFtYXBwaW5nRmllbGRzKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBsZXQgaGVscEZpZWxkcyA9IE9iamVjdC5rZXlzKG1hcHBpbmdGaWVsZHMpO1xyXG4gICAgY29uc3QgaWRJbmRleCA9IGhlbHBGaWVsZHMuZmluZEluZGV4KChpdGVtKSA9PiBpdGVtID09PSAnaWQnKTtcclxuICAgIGlmIChoZWxwRmllbGRzLmluY2x1ZGVzKCdpZCcpICYmIGlkSW5kZXggIT09IDApIHtcclxuICAgICAgaGVscEZpZWxkcy5zcGxpY2UoaWRJbmRleCwgMSk7XHJcbiAgICAgIGhlbHBGaWVsZHMgPSBbJ2lkJywgLi4uaGVscEZpZWxkc107XHJcbiAgICB9XHJcbiAgICBjb25zdCB0aGF0ID0gdGhpcztcclxuICAgIGhlbHBGaWVsZHMuZm9yRWFjaCgoZjogYW55KSA9PiB7XHJcblxyXG4gICAgICAvLyAx44CB6I635Y+W5a2X5q615YC8XHJcbiAgICAgIC8vIOWmguaenGhlbHBEYXRh5pyJ6YCJ5Lit5YC877yM5YiZ6I635Y+W5biu5Yqp5pWw5o2u5rqQ6YeM5a+55bqU5L2g5a2X5q6155qE5YC877ybXHJcbiAgICAgIC8vIOWmguaenGhlbHBEYXRh5rKh5pyJ5YC877yI5riF56m65Zy65pmv77yJ77yM5YiZ6L+U5Zue5LiA5Liq56m65a2X56ym5LiyXHJcbiAgICAgIGxldCB2YWw6IGFueSA9ICcnO1xyXG4gICAgICBpZiAoaGVscERhdGEpIHtcclxuICAgICAgICBpZiAoaGVscERhdGEgaW5zdGFuY2VvZiBBcnJheSkge1xyXG4gICAgICAgICAgdmFsID0gaGVscERhdGFcclxuICAgICAgICAgICAgLm1hcCgoaDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoZiwgaCk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5qb2luKCcsJyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHZhbCA9IHRoYXQuZ2V0VmFsdWUoZiwgaGVscERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gMuOAgeiuvue9ruWtl+auteWAvFxyXG4gICAgICAvLyDlpoLmnpxoZWxwRGF0YeS4jeWtmOWcqO+8iOa4heepuuWcuuaZr++8ie+8jOiOt+WPlkJpbmRpbmdEYXRh6YeM5a+55bqU5a2X5q6155qE5YC877yM5aaC5p6c5piv5pWw5YC877yM5YiZ6K6+572uMO+8jOWFtuS7luiuvue9ruS4iuS4gOatpeS4reeahOepuuWtl+espuS4su+8m1xyXG4gICAgICAvLyDlpoLmnpxoZWxwRGF0YeWtmOWcqO+8muebtOaOpeiuvue9ruS4iuS4gOatpeS4reiOt+WPlueahOWAvOOAglxyXG4gICAgICBjb25zdCBwYXRoQXJyID0gdGhhdC5nZXRCaW5kaW5nUGF0aEFycmF5KCk7XHJcbiAgICAgIG1hcHBpbmdGaWVsZHNbZl0uc3BsaXQoJywnKS5mb3JFYWNoKChmZjogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKCFoZWxwRGF0YSkge1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICB0aGF0LnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEuc2V0VmFsdWUoXHJcbiAgICAgICAgICAgIHBhdGhBcnIuY29uY2F0KGZmLnNwbGl0KCcuJykpLFxyXG4gICAgICAgICAgICB2YWwsXHJcbiAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgIHRydWVcclxuICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWtl+auteWAvFxyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRGaWVsZFZhbHVlKGZpZWxkUGF0aDogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBiaW5kaW5nUGF0aEFycmF5ID0gdGhpcy5nZXRCaW5kaW5nUGF0aEFycmF5KCk7XHJcbiAgICBjb25zdCBmaWVsZFBhdGhBcnJheSA9IGJpbmRpbmdQYXRoQXJyYXkuY29uY2F0KGZpZWxkUGF0aC5zcGxpdCgnLicpKTtcclxuICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEuZ2V0VmFsdWUoZmllbGRQYXRoQXJyYXkpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSBnZXRWYWx1ZShmOiBzdHJpbmcsIGRhdGE6IGFueSkge1xyXG4gICAgbGV0IHZhbCA9ICcnO1xyXG4gICAgaWYgKGYuaW5kZXhPZignLicpID09PSAtMSkge1xyXG4gICAgICB2YWwgPSBkYXRhW2ZdO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmFsID0gZi5zcGxpdCgnLicpLnJlZHVjZSgoYSwgYikgPT4ge1xyXG4gICAgICAgIHJldHVybiBhW2JdO1xyXG4gICAgICB9LCBkYXRhKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2YWw7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldEJpbmRpbmdQYXRoQXJyYXkoKTogYW55W10ge1xyXG4gICAgY29uc3QgcGF0aCA9IHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5iaW5kaW5nUGF0aDtcclxuICAgIGlmIChwYXRoKSB7XHJcbiAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChuKSA9PiBuICE9PSAnJyk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG59XHJcbiJdfQ==