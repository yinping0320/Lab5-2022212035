/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-states.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { recompute } from './recompute';
/**
 * 绑定状态
 */
var /**
 * 绑定状态
 */
BindingStates = /** @class */ (function () {
    /**
     * 构造函数
     * @param viewModelContext ViewModel上下文
     */
    function BindingStates(vueInstance) {
        this.vueInstance = vueInstance;
        /** @type {?} */
        var viewModel = (/** @type {?} */ (this.vueInstance.$getViewModel()));
        this.viewModelContext = viewModel.context;
        this.subscriptionsMap = new Map();
    }
    /**
     * 映射实体列表数据
     */
    /**
     * 映射实体列表数据
     * @return {?}
     */
    BindingStates.prototype.getEntityListData = /**
     * 映射实体列表数据
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stateName = 'entityListData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            var subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                recompute(_this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getList().toJSON();
    };
    /**
     * 映射当前实体数据
     */
    /**
     * 映射当前实体数据
     * @return {?}
     */
    BindingStates.prototype.getCurrentEntityData = /**
     * 映射当前实体数据
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stateName = 'currentEntityData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            var subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                recompute(_this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getObject().toJSON();
    };
    /**
     * 映射UIState数据
     */
    /**
     * 映射UIState数据
     * @return {?}
     */
    BindingStates.prototype.getUIState = /**
     * 映射UIState数据
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stateName = 'uiState';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            var subscription = this.viewModelContext.uiState.changes.subscribe((/**
             * @return {?}
             */
            function () {
                recompute(_this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.uiState;
    };
    /**
     * 映射表单
     */
    /**
     * 映射表单
     * @return {?}
     */
    BindingStates.prototype.getForm = /**
     * 映射表单
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stateName = 'form';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            var subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                if (change && change.type === "ValueChanged") {
                    _this.viewModelContext.form.getFieldErrorByPath(change.path);
                }
                recompute(_this.vueInstance, stateName);
            }));
            /** @type {?} */
            var subscriptionV = this.viewModelContext.form.changes.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data && data.type === 'validateFieldsFinished') {
                    recompute(_this.vueInstance, stateName);
                }
                else if (data && data.type === 'singleHanded') {
                    /** @type {?} */
                    var index = _this.vueInstance.$children.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.$attrs.id === "form_" + data.value; }));
                    _this.vueInstance.$children[index].$forceUpdate();
                }
            }));
            this.subscriptionsMap.set(stateName, subscription);
            this.subscriptionsMap.set(stateName + 'V', subscriptionV);
        }
        return this.vueInstance.$getViewModel().form;
    };
    /**
     * 映射状态机
     */
    /**
     * 映射状态机
     * @return {?}
     */
    BindingStates.prototype.getStateMachine = /**
     * 映射状态机
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var stateName = 'stateMachine';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            var subscription = this.viewModelContext.stateMachine.stateChange.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            function (change) {
                recompute(_this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.stateMachine.renderStates;
    };
    return BindingStates;
}());
if (false) {
    /**
     * Vue实例
     * @type {?}
     * @private
     */
    BindingStates.prototype.vueInstance;
    /**
     * Vue实例的ViewModelContext
     * @type {?}
     * @private
     */
    BindingStates.prototype.viewModelContext;
    /**
     * 订阅集合
     * @type {?}
     * @private
     */
    BindingStates.prototype.subscriptionsMap;
}
export { BindingStates };
//# sourceMappingURL=data:application/json;base64,