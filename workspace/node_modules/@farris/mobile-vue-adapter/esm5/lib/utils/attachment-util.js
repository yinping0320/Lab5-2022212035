/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/attachment-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var mergeString = (/**
 * @param {?} str
 * @param {?} str1
 * @return {?}
 */
function (str, str1) {
    /** @type {?} */
    var min = str.length < str1.length ? str.length : str1.length;
    /** @type {?} */
    var res = "";
    /** @type {?} */
    var i = 0;
    for (i = 0; i < min; i++) {
        res += str.substring(i, i + 1);
        res += str1.substring(i, i + 1);
    }
    res += str.length < str1.length ? str1.substring(i) : str.substring(i);
    return res;
});
var ɵ0 = mergeString;
/** @type {?} */
var getToken = (/**
 * @param {?} str
 * @return {?}
 */
function (str) {
    /** @type {?} */
    var array = [1, 2, 3];
    if (str.length > 24) {
        str = str.substring(0, 24);
    }
    /** @type {?} */
    var length = Math.floor(str.length / 3);
    /** @type {?} */
    var str1 = str.substring(0, length);
    /** @type {?} */
    var str2 = str.substring(length, 2 * length);
    /** @type {?} */
    var str3 = str.substring(2 * length, 3 * length);
    /** @type {?} */
    var randomArray = [];
    /** @type {?} */
    var random = Math.ceil(Math.random() * 3);
    randomArray.push(array[random - 1]);
    array.splice(random - 1, 1);
    random = Math.ceil(Math.random() * 2);
    randomArray.push(array[random - 1]);
    array.splice(random - 1, 1);
    randomArray.push(array[0]);
    /** @type {?} */
    var timeStamp = Math.round(new Date().getTime() / 1000) + "";
    return timeStamp.substring(0, 5) + "times" + randomArray[0] + ""
        + randomArray[1] + "" + randomArray[2] + switchStr(str1, str2, str3, randomArray[0])
        + switchStr(str1, str2, str3, randomArray[1]) +
        switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
});
var ɵ1 = getToken;
/** @type {?} */
var switchStr = (/**
 * @param {?} str1
 * @param {?} str2
 * @param {?} str3
 * @param {?} i
 * @return {?}
 */
function (str1, str2, str3, i) {
    switch (i) {
        case 1: return str1;
        case 2: return str2;
        case 3: return str3;
    }
});
var ɵ2 = switchStr;
/** @type {?} */
var officeUrl = {
    doc: '/platform/common/web/assets/fm-attachment/word.png',
    docx: '/platform/common/web/assets/fm-attachment/word.png',
    xls: '/platform/common/web/assets/fm-attachment/excel.png',
    xlsx: '/platform/common/web/assets/fm-attachment/excel.png',
    ppt: '/platform/common/web/assets/fm-attachment/ppt.png',
    pptx: '/platform/common/web/assets/fm-attachment/ppt.png',
    pdf: '/platform/common/web/assets/fm-attachment/pdf.png',
    txt: '/platform/common/web/assets/fm-attachment/txt.png',
    jpg: '/platform/common/web/assets/fm-attachment/img.png',
    jpeg: '/platform/common/web/assets/fm-attachment/img.png',
    png: '/platform/common/web/assets/fm-attachment/img.png'
};
/** @type {?} */
var getAttachmentUrl = (/**
 * @param {?} attachmentId
 * @param {?} rootId
 * @param {?} extensionName
 * @return {?}
 */
function (attachmentId, rootId, extensionName) {
    /** @type {?} */
    var officeUrlKey = Object.keys(officeUrl).find((/**
     * @param {?} url
     * @return {?}
     */
    function (url) { return url === extensionName.toLowerCase(); }));
    if (!officeUrlKey) {
        return "/api/runtime/dfs/v1.0/doc/filecontent?metadataid=" + attachmentId + "&rootid=" + rootId + "&token=" + getToken(mergeString(attachmentId, rootId));
    }
    return officeUrl[extensionName.toLowerCase()];
});
var ɵ3 = getAttachmentUrl;
export { getAttachmentUrl, getToken, mergeString };
export { ɵ0, ɵ1, ɵ2, ɵ3 };
//# sourceMappingURL=data:application/json;base64,