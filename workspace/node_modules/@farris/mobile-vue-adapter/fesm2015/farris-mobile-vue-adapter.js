import { EnumUtil, DateUtil, NumberUtil, StringUtil, BoolUtil, App, HttpMethods } from '@farris/mobile-devkit';
import { reactive, createApp } from 'vue';
import { HistoryBackService, RouterService, JsBridgeService } from '@farris/mobile-command-services';
import { BefLookupDataService } from '@farris/mobile-bef';
import { Subject, forkJoin } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/recompute.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 包装计算数据getter方法
 * @param {?} fn
 * @param {?} propName
 * @return {?}
 */
function recomputable(fn, propName) {
    /** @type {?} */
    const reactiveObj = reactive({
        stateVersion: 0
    });
    return (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        const self = this;
        if (!self.$__recomputables) {
            self.$__recomputables = {};
        }
        if (!self.$__recomputables[propName]) {
            self.$__recomputables[propName] = reactiveObj;
        }
        /** @type {?} */
        const stateVersion = reactiveObj.stateVersion;
        return fn.call(self);
    });
}
/**
 * 触发计算属性重新计算
 * @param {?} vm
 * @param {?} propName
 * @return {?}
 */
function recompute(vm, propName) {
    if (!vm.$__recomputables || !vm.$__recomputables[propName]) {
        return;
    }
    vm.$__recomputables[propName].stateVersion++;
    try {
        vm.$forceUpdate();
    }
    catch (error) {
        console.log('$forceUpdate', error);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-states.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 绑定状态
 */
class BindingStates {
    /**
     * 构造函数
     * @param {?} vueInstance
     */
    constructor(vueInstance) {
        this.vueInstance = vueInstance;
        /** @type {?} */
        const viewModel = (/** @type {?} */ (this.vueInstance.$getViewModel()));
        this.viewModelContext = viewModel.context;
        this.subscriptionsMap = new Map();
    }
    /**
     * 映射实体列表数据
     * @return {?}
     */
    getEntityListData() {
        /** @type {?} */
        const stateName = 'entityListData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getList().toJSON();
    }
    /**
     * 映射当前实体数据
     * @return {?}
     */
    getCurrentEntityData() {
        /** @type {?} */
        const stateName = 'currentEntityData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getObject().toJSON();
    }
    /**
     * 映射UIState数据
     * @return {?}
     */
    getUIState() {
        /** @type {?} */
        const stateName = 'uiState';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.uiState.changes.subscribe((/**
             * @return {?}
             */
            () => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.uiState;
    }
    /**
     * 映射表单
     * @return {?}
     */
    getForm() {
        /** @type {?} */
        const stateName = 'form';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                if (change && change.type === "ValueChanged") {
                    this.viewModelContext.form.getFieldErrorByPath(change.path);
                }
                recompute(this.vueInstance, stateName);
            }));
            /** @type {?} */
            const subscriptionV = this.viewModelContext.form.changes.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data && data.type === 'validateFieldsFinished') {
                    recompute(this.vueInstance, stateName);
                }
                else if (data && data.type === 'singleHanded') {
                    /** @type {?} */
                    const index = this.vueInstance.$children.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => { return item.$attrs.id === `form_${data.value}`; }));
                    this.vueInstance.$children[index].$forceUpdate();
                }
            }));
            this.subscriptionsMap.set(stateName, subscription);
            this.subscriptionsMap.set(stateName + 'V', subscriptionV);
        }
        return this.vueInstance.$getViewModel().form;
    }
    /**
     * 映射状态机
     * @return {?}
     */
    getStateMachine() {
        /** @type {?} */
        const stateName = 'stateMachine';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.stateMachine.stateChange.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.stateMachine.renderStates;
    }
}
if (false) {
    /**
     * Vue实例
     * @type {?}
     * @private
     */
    BindingStates.prototype.vueInstance;
    /**
     * Vue实例的ViewModelContext
     * @type {?}
     * @private
     */
    BindingStates.prototype.viewModelContext;
    /**
     * 订阅集合
     * @type {?}
     * @private
     */
    BindingStates.prototype.subscriptionsMap;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 组件扩展器
 * @record
 */
function ComponentExtender() { }
if (false) {
    /**
     * 扩展组件
     * @return {?}
     */
    ComponentExtender.prototype.extend = function () { };
    /**
     * 清空绑定状态
     * @return {?}
     */
    ComponentExtender.prototype.dispose = function () { };
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/listview-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class ListviewExtender {
    /**
     * @param {?} listviewInstance
     * @param {?} viewModelContext
     */
    constructor(listviewInstance, viewModelContext) {
        this.listviewInstance = listviewInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        this.viewModelContext.appContext.eventBus.subscribe(`${this.viewModelContext.id}-listview-extend`, (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value.type === 'listviewFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { loadMoreFinished: true }));
            }
            if (value.type === 'listviewUnFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { loadMoreFinished: false }));
            }
            if (value.type === 'loadDataFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { refreshLoading: false, loadMoreLoading: false }));
            }
        }));
        // 当前行
        this.listviewInstance.$on('selectChange', (/**
         * @param {?} selectedData
         * @return {?}
         */
        (selectedData) => {
            /** @type {?} */
            const selectedId = selectedData.data.id;
            self.viewModelContext.bindingData.getList().setCurrentId(selectedId, true, true);
        }));
        // 批量选择
        this.listviewInstance.$on('itemClick', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const selectedItems = self.listviewInstance.getSelectDataList();
            /** @type {?} */
            let selectedIds = [];
            if (selectedItems && selectedItems.length > 0) {
                selectedIds = selectedItems.map((/**
                 * @param {?} selectedItem
                 * @return {?}
                 */
                (selectedItem) => {
                    return selectedItem.id;
                }));
            }
            self.viewModelContext.uiState.setPropertyValue('selectedIds', selectedIds);
        }));
        // 监听下拉刷新组件
        this.listviewInstance.$on('refresh', (/**
         * @return {?}
         */
        () => {
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, self.viewModelContext.uiState['listaviewState'], { refreshLoading: true, loadMoreLoading: true }));
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
        // 监听是否走查询
        this.listviewInstance.$on('load', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const loading = self.viewModelContext.uiState['listaviewState']['loadMoreLoading'];
            if (!loading) {
                self.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, self.viewModelContext.uiState['listaviewState'], { loadMoreLoading: true }));
                /** @type {?} */
                let pageIndex = self.viewModelContext.repository.paginationInfo && self.viewModelContext.repository.paginationInfo.pageIndex;
                if (!pageIndex) {
                    pageIndex = 0;
                }
                self.viewModelContext.repository.setPaginationInfo({
                    pageIndex: pageIndex += 1
                });
                self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
            }
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.listviewInstance.$off('selectChange');
        this.listviewInstance.$off('itemClick');
        this.listviewInstance.$off('load');
        this.viewModelContext.appContext.eventBus.unsubscribe(`${this.viewModelContext.id}-listview-extend`);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ListviewExtender.prototype.listviewInstance;
    /**
     * @type {?}
     * @private
     */
    ListviewExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/lookup-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助控件扩展
 */
class LookupExtender {
    /**
     * @param {?} listviewInstance
     * @param {?} viewModelContext
     */
    constructor(listviewInstance, viewModelContext) {
        this.lookupInstance = listviewInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * @return {?}
     */
    extend() {
    }
    /**
     * @return {?}
     */
    dispose() {
        console.log('Lookup disposed...');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupExtender.prototype.lookupInstance;
    /**
     * @type {?}
     * @private
     */
    LookupExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/attachment-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class AttachmentExtender {
    /**
     * @param {?} attachmentInstance
     * @param {?} viewModelContext
     */
    constructor(attachmentInstance, viewModelContext) {
        this.attachmentInstance = attachmentInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 当前行
        this.attachmentInstance.$on('beforeSelect', (/**
         * @param {?} selectedData
         * @return {?}
         */
        (selectedData) => {
            /** @type {?} */
            const selectedId = selectedData.id;
            self.viewModelContext.bindingData.getList().setCurrentId(selectedId, true, false);
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.attachmentInstance.$off('beforeSelect');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    AttachmentExtender.prototype.attachmentInstance;
    /**
     * @type {?}
     * @private
     */
    AttachmentExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/filter-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class FilterExtender {
    /**
     * @param {?} filterInstance
     * @param {?} viewModelContext
     */
    constructor(filterInstance, viewModelContext) {
        this.filterInstance = filterInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 清空uistate的筛选条件
        this.filterInstance.$on('clear', (/**
         * @return {?}
         */
        () => {
            self.viewModelContext.uiState.setPropertyValue('filterState', { filters: null });
        }));
        // 给uistate的赋值筛选条件
        // this.filterInstance.$on('change', (data) => {
        //   //self.viewModelContext.uiState.setPropertyValue('filterState', { filters: data.FilterConditions });
        // });
        // 给uistate的赋值筛选条件
        this.filterInstance.$on('search', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.uiState.setPropertyValue('filterState', { filters: data.FilterConditions });
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
        // 监听确定时间出发查询
        this.filterInstance.$on('confirm', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.uiState.setPropertyValue('filterState', { filters: data.FilterConditions });
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.filterInstance.$off('clear');
        this.filterInstance.$off('change');
        this.filterInstance.$off('confirm');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FilterExtender.prototype.filterInstance;
    /**
     * @type {?}
     * @private
     */
    FilterExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/tab-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class TabExtender {
    /**
     * @param {?} tabInstance
     * @param {?} viewModelContext
     */
    constructor(tabInstance, viewModelContext) {
        this.tabInstance = tabInstance;
        this.viewModelContext = viewModelContext;
        this.viewModelContext.uiState.setPropertyValue('tabState', { currentTab: tabInstance.currentName });
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 给uistate的赋值当前tab页
        this.tabInstance.$on('change', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
            if (data.name !== self.viewModelContext.uiState['tabState']['currentTab']) {
                self.viewModelContext.uiState.setPropertyValue('tabState', { currentTab: data.name });
                self.viewModelContext.repository.setPaginationInfo({ pageIndex: 1 });
                self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
            }
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.tabInstance.$off('change');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    TabExtender.prototype.tabInstance;
    /**
     * @type {?}
     * @private
     */
    TabExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/search-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class SearchExtender {
    /**
     * @param {?} searchInstance
     * @param {?} viewModelContext
     */
    constructor(searchInstance, viewModelContext) {
        this.searchInstance = searchInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 监听搜索组件
        this.searchInstance.$on('cancel', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            //  清空走查询
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
        this.searchInstance.$on('search', (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            // 如果是确定类型，即走查询
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.searchInstance.$off('cancel');
        this.searchInstance.$off('search');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchExtender.prototype.searchInstance;
    /**
     * @type {?}
     * @private
     */
    SearchExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/checkbox-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class CheckboxExtender {
    /**
     * @param {?} checkboxInstance
     * @param {?} viewModelContext
     */
    constructor(checkboxInstance, viewModelContext) {
        this.checkboxInstance = checkboxInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 当按钮被加载调用父组件让其出现多选框
        this.checkboxInstance.$parent.listCheckStart();
        this.checkboxInstance.$on('click', (/**
         * @return {?}
         */
        () => {
            console.log("click");
            // 监听全选
            if (self.checkboxInstance.$parent.checkboxFlag) {
                self.checkboxInstance.$parent.listCheckAllCancel();
            }
            else {
                self.checkboxInstance.$parent.listCheckAll();
            }
            self.checkboxInstance.$parent.checkboxFlag = !self.checkboxInstance.$parent.checkboxFlag;
            /** @type {?} */
            const selectedItems = self.checkboxInstance.$parent.getSelectDataList();
            /** @type {?} */
            let selectedIds = [];
            if (selectedItems && selectedItems.length > 0) {
                selectedIds = selectedItems.map((/**
                 * @param {?} selectedItem
                 * @return {?}
                 */
                (selectedItem) => {
                    return selectedItem.id;
                }));
            }
            self.viewModelContext.uiState.setPropertyValue('selectedIds', selectedIds);
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.checkboxInstance.$off('click');
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CheckboxExtender.prototype.checkboxInstance;
    /**
     * @type {?}
     * @private
     */
    CheckboxExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/map-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class MapExtender {
    /**
     * @param {?} mapInstance
     * @param {?} viewModelContext
     */
    constructor(mapInstance, viewModelContext) {
        this.mapInstance = mapInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 当前行
        this.mapInstance.$on('markMap', (/**
         * @param {?} selectedData
         * @return {?}
         */
        (selectedData) => {
            // 获取经纬度
            /** @type {?} */
            const lnglat = selectedData.lnglat;
            /** @type {?} */
            const lng = lnglat.lng;
            /** @type {?} */
            const lat = lnglat.lat;
            // 获取经纬度路径
            /** @type {?} */
            const lngPath = this.mapInstance.lngPath;
            /** @type {?} */
            const latPath = this.mapInstance.latPath;
            // this.mapInstance.center = [lng, lat];
            // 赋值经纬度
            this.viewModelContext.bindingData.setValue(this.getBindingPathArray().concat(lngPath.split('/')), lng, true, true);
            this.viewModelContext.bindingData.setValue(this.getBindingPathArray().concat(latPath.split('/')), lat, true, true);
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.mapInstance.$off('markMap');
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n !== ''));
        }
        return [];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.mapInstance;
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 组件适配器工厂
 */
class ComponentExtenderFactory {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 创建适配器
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    create(componentInstance, componentType) {
        /** @type {?} */
        let componentExtenderInstance;
        switch (componentType) {
            case 'fm-listview':
                componentExtenderInstance = new ListviewExtender(componentInstance, this.viewModelContext);
                break;
            case 'Lookup':
                componentExtenderInstance = new LookupExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-filter':
                componentExtenderInstance = new FilterExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-tabs':
                componentExtenderInstance = new TabExtender(componentInstance, this.viewModelContext);
                break;
            case 'van-search':
                componentExtenderInstance = new SearchExtender(componentInstance, this.viewModelContext);
                break;
            case 'Checkbox':
                componentExtenderInstance = new CheckboxExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-attachment':
                componentExtenderInstance = new AttachmentExtender(componentInstance, this.viewModelContext);
                break;
            case 'Map':
                componentExtenderInstance = new MapExtender(componentInstance, this.viewModelContext);
                break;
            default:
                componentExtenderInstance = null;
        }
        return componentExtenderInstance;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentExtenderFactory.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender-manager.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 扩展管理器
 */
class ComponentExtenderManager {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.extenderMap = new Map();
        this.extenderFactory = new ComponentExtenderFactory(viewModelContext);
    }
    /**
     * 获取扩展
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    getExtender(componentInstance, componentType) {
        if (this.extenderMap.has(componentInstance)) {
            return this.extenderMap.get(componentInstance);
        }
        /** @type {?} */
        const extender = this.extenderFactory.create(componentInstance, componentType);
        this.extenderMap.set(componentInstance, extender);
        return extender;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.viewModelContext;
    /**
     * 组件扩展器集合
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.extenderMap;
    /**
     * 扩展器工厂
     * @type {?}
     * @private
     */
    ComponentExtenderManager.prototype.extenderFactory;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/get-data-by-path.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const getDataByPath = (/**
 * @param {?} data
 * @param {?} fields
 * @return {?}
 */
(data, fields) => {
    if (!data[fields[0]]) {
        return;
    }
    return fields.reduce((/**
     * @param {?} total
     * @param {?} next
     * @return {?}
     */
    (total, next) => {
        return total[next];
    }), data);
});
const ɵ0 = getDataByPath;

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/attachment-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const mergeString = (/**
 * @param {?} str
 * @param {?} str1
 * @return {?}
 */
(str, str1) => {
    /** @type {?} */
    let min = str.length < str1.length ? str.length : str1.length;
    /** @type {?} */
    let res = "";
    /** @type {?} */
    let i = 0;
    for (i = 0; i < min; i++) {
        res += str.substring(i, i + 1);
        res += str1.substring(i, i + 1);
    }
    res += str.length < str1.length ? str1.substring(i) : str.substring(i);
    return res;
});
const ɵ0$1 = mergeString;
/** @type {?} */
const getToken = (/**
 * @param {?} str
 * @return {?}
 */
(str) => {
    /** @type {?} */
    let array = [1, 2, 3];
    if (str.length > 24) {
        str = str.substring(0, 24);
    }
    /** @type {?} */
    let length = Math.floor(str.length / 3);
    /** @type {?} */
    let str1 = str.substring(0, length);
    /** @type {?} */
    let str2 = str.substring(length, 2 * length);
    /** @type {?} */
    let str3 = str.substring(2 * length, 3 * length);
    /** @type {?} */
    let randomArray = [];
    /** @type {?} */
    var random = Math.ceil(Math.random() * 3);
    randomArray.push(array[random - 1]);
    array.splice(random - 1, 1);
    random = Math.ceil(Math.random() * 2);
    randomArray.push(array[random - 1]);
    array.splice(random - 1, 1);
    randomArray.push(array[0]);
    /** @type {?} */
    let timeStamp = Math.round(new Date().getTime() / 1000) + "";
    return timeStamp.substring(0, 5) + "times" + randomArray[0] + ""
        + randomArray[1] + "" + randomArray[2] + switchStr(str1, str2, str3, randomArray[0])
        + switchStr(str1, str2, str3, randomArray[1]) +
        switchStr(str1, str2, str3, randomArray[2]) + "times" + timeStamp.substring(5);
});
const ɵ1 = getToken;
/** @type {?} */
const switchStr = (/**
 * @param {?} str1
 * @param {?} str2
 * @param {?} str3
 * @param {?} i
 * @return {?}
 */
(str1, str2, str3, i) => {
    switch (i) {
        case 1: return str1;
        case 2: return str2;
        case 3: return str3;
    }
});
const ɵ2 = switchStr;
/** @type {?} */
const officeUrl = {
    doc: '/platform/common/web/assets/fm-attachment/word.png',
    docx: '/platform/common/web/assets/fm-attachment/word.png',
    xls: '/platform/common/web/assets/fm-attachment/excel.png',
    xlsx: '/platform/common/web/assets/fm-attachment/excel.png',
    ppt: '/platform/common/web/assets/fm-attachment/ppt.png',
    pptx: '/platform/common/web/assets/fm-attachment/ppt.png',
    pdf: '/platform/common/web/assets/fm-attachment/pdf.png',
    txt: '/platform/common/web/assets/fm-attachment/txt.png',
    jpg: '/platform/common/web/assets/fm-attachment/img.png',
    jpeg: '/platform/common/web/assets/fm-attachment/img.png',
    png: '/platform/common/web/assets/fm-attachment/img.png'
};
/** @type {?} */
const getAttachmentUrl = (/**
 * @param {?} attachmentId
 * @param {?} rootId
 * @param {?} extensionName
 * @return {?}
 */
(attachmentId, rootId, extensionName) => {
    /** @type {?} */
    const officeUrlKey = Object.keys(officeUrl).find((/**
     * @param {?} url
     * @return {?}
     */
    url => url === extensionName.toLowerCase()));
    if (!officeUrlKey) {
        return `/api/runtime/dfs/v1.0/doc/filecontent?metadataid=${attachmentId}&rootid=${rootId}&token=${getToken(mergeString(attachmentId, rootId))}`;
    }
    return officeUrl[extensionName.toLowerCase()];
});
const ɵ3 = getAttachmentUrl;

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/event-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EventUtil {
    /**
     * @param {?} str
     * @return {?}
     */
    static toHandlerKey(str) {
        if (str) {
            return `on${this.capitalize(str)}`;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static camelize(str) {
        /** @type {?} */
        const camelizeRE = /-(\w)/g;
        return str.replace(camelizeRE, (/**
         * @param {?} _
         * @param {?} c
         * @return {?}
         */
        (_, c) => (c ? c.toUpperCase() : '')));
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/uuid.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const uuid = (/**
 * @return {?}
 */
() => {
    /** @type {?} */
    let d = new Date().getTime();
    /** @type {?} */
    const uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (/**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        /** @type {?} */
        const r = (d + Math.random() * 16) % 16 | 0;
        d = Math.floor(d / 16);
        return (c === 'x' ? r : (r & 0x3 | 0x8)).toString(16);
    }));
    return uuid;
});

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/format-uitl.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var formatUtils = {
    /**
     * 枚举格式化
     */
    enum: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return EnumUtil.format(value, options);
    }),
    /**
     * 日期格式化
     */
    date: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return DateUtil.format(value, options);
    }),
    /**
     * 日期操作
     */
    dateOperation: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return DateUtil.dateOperation(value, options);
    }),
    /**
     * 数字格式化
     */
    number: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return NumberUtil.format(value, options);
    }),
    /**
     * 字符串格式化
     *
     */
    string: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return StringUtil.format(value, options);
    }),
    /**
     * 布尔值格式化
     */
    bool: (/**
     * @param {?} value
     * @param {?} options
     * @return {?}
     */
    function (value, options) {
        return BoolUtil.format(value, options);
    }),
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/devkit.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$2 = /**
 * @param {?} app
 * @param {?} options
 * @return {?}
 */
function (app, options) {
    /**
     * 注册事件
     * @todo：暂时强制绑定，暂时无法根据特性灵活区分
     */
    app.config.globalProperties.$on = (/**
     * @param {?} eventName
     * @param {?} eventHandler
     * @return {?}
     */
    function (eventName, eventHandler) {
        /** @type {?} */
        const vnodeProps = this._.vnode.props;
        /** @type {?} */
        const eventHandlerKey = EventUtil.toHandlerKey(eventName);
        /** @type {?} */
        const oldEventHandler = vnodeProps[eventHandlerKey];
        if (oldEventHandler) {
            vnodeProps[eventHandlerKey] = (/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                eventHandler($event);
                oldEventHandler($event);
            });
        }
        else {
            vnodeProps[eventHandlerKey] = eventHandler;
        }
    });
    /**
     * 清空事件注册
     * @todo：暂时强制清空
     */
    app.config.globalProperties.$off = (/**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        /** @type {?} */
        const vnodeProps = this._.vnode.props;
        /** @type {?} */
        const eventHandlerKey = EventUtil.toHandlerKey(eventName);
        vnodeProps[eventHandlerKey] = null;
    });
    /**
     * 组件的App实例
     */
    app.config.globalProperties.$app = null;
    /**
     * 组件的ViewModel实例
     */
    app.config.globalProperties.$viewModel = null;
    /**
     * 绑定状态
     */
    app.config.globalProperties.$bindingStates = null;
    /**
     * 绑定状态
     */
    app.config.globalProperties.$componentExtenderManager = null;
    /**
     * 组件App工厂方法
     */
    app.config.globalProperties.$createApp = (/**
     * @param {?} appOptions
     * @return {?}
     */
    function (appOptions) {
        if (this.$app) {
            throw new Error('App已经存在');
        }
        /** @type {?} */
        const historyBackService = new HistoryBackService();
        historyBackService.init();
        historyBackService.proxyBack();
        this.$app = new App(appOptions);
        /**
         * @param {?} event
         * @return {?}
         */
        function receiveMessage(event) {
            /** @type {?} */
            const commandOptions = this.$app.context.injector.get('DECLARATIONS_TOKEN');
            /** @type {?} */
            var messageData = JSON.parse(event.data);
            /** @type {?} */
            const commandName = messageData.data.command;
            /** @type {?} */
            const command = commandOptions.commands[commandName];
            /** @type {?} */
            var origin = event.origin;
            /** @type {?} */
            var source = event.source;
            /** @type {?} */
            const viewModelContext = this.$app.context.viewModelContextManager.getContextById(command.viewModelId);
            if (!!viewModelContext) {
                /** @type {?} */
                const methodResult$ = viewModelContext.viewModel[command.command]();
                methodResult$.pipe((/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @return {?}
                 */
                () => {
                    window.parent && window.parent.postMessage('success', event.origin);
                }));
            }
        }
        if (!window['IsDddedMessageEventListener']) {
            window.addEventListener("message", receiveMessage.bind(this), false);
            window['IsDddedMessageEventListener'] = true;
        }
    });
    /**
     * 获取AppContext
     */
    app.config.globalProperties.$getApp = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let app = this.$app;
        /** @type {?} */
        let currentCmp = this;
        while (!app && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            app = currentCmp.$app;
        }
        return app;
    });
    /**
     * 组件ViewModel工厂方法
     */
    app.config.globalProperties.$createViewModel = (/**
     * @param {?} viewModelOptions
     * @return {?}
     */
    function (viewModelOptions) {
        this.$app = this.$getApp();
        if (!this.$app) {
            throw new Error('请先创建App');
        }
        // 如果viewModel已经存在，则使用已有的
        /** @type {?} */
        const viewModelId = viewModelOptions.id;
        if (viewModelId) {
            /** @type {?} */
            const existedViewModelContext = this.$app.context.viewModelContextManager.getContextById(viewModelId);
            if (existedViewModelContext) {
                this.$viewModel = existedViewModelContext.viewModel;
            }
        }
        // 如果viewModel不存在，则创建新的viewModel，并建立父子关系
        if (!this.$viewModel) {
            /** @type {?} */
            const parentViewModel = this.$getViewModel();
            if (!viewModelOptions.parent) {
                viewModelOptions.parent = parentViewModel;
            }
            this.$viewModel = this.$app.createViewModel(viewModelOptions);
        }
        // 设置绑定状态
        this.$bindingStates = new BindingStates(this);
        // 映射路由状态
        /** @type {?} */
        const routerService = this.$viewModel.injector.get(RouterService);
        routerService.mappingToUIState();
        // 根据路由参数清理卡片缓存数据
        if (this.$viewModel && this.$viewModel.uiState && this.$viewModel.uiState.routerState && this.$viewModel.uiState.routerState.queryParams && this.$viewModel.uiState.routerState.queryParams.clearCachedDataForCard) {
            //清一下bingdingdate上的东西
            this.$viewModel.context.bindingData.getList().currentId = null;
        }
        // 根据路由参数清理列表缓存数据
        if (this.$viewModel && this.$viewModel.uiState && this.$viewModel.uiState.routerState && this.$viewModel.uiState.routerState.queryParams && this.$viewModel.uiState.routerState.queryParams.clearCachedDataForList) {
            //清一下bingdingdate上的东西
            this.$viewModel.repository.entityCollection.clear();
        }
    });
    /**
     * 获取ViewModel
     */
    app.config.globalProperties.$getViewModel = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let currentCmp = this;
        /** @type {?} */
        let viewModel = currentCmp.$viewModel;
        while (!viewModel && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            viewModel = currentCmp.$viewModel;
        }
        return viewModel;
    });
    /**
     * 初始化组件扩展管理
     */
    app.config.globalProperties.$initComponentExtenderManager = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        const viewModel = this.$getViewModel();
        this.$componentExtenderManager = new ComponentExtenderManager(viewModel.context);
    });
    /**
     * 获取组件扩展管理器
     */
    app.config.globalProperties.$getComponentExtenderManager = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let currentCmp = this;
        /** @type {?} */
        let extenderManager = currentCmp.$componentExtenderManager;
        while (!extenderManager && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            extenderManager = currentCmp.$componentExtenderManager;
        }
        return extenderManager;
    });
    app.config.globalProperties.$bindComponentExtenders = (/**
     * @param {?} refs
     * @return {?}
     */
    function (refs) {
        if (!this.$refs) {
            return;
        }
        /** @type {?} */
        const componentInstances = Object.values(this.$refs);
        componentInstances.forEach((/**
         * @param {?} componentInstance
         * @return {?}
         */
        (componentInstance) => {
            /** @type {?} */
            const componentType = componentInstance._.type.name;
            this.$bindComponentExtender(componentInstance, componentType);
        }));
    });
    /**
     * 绑定组件扩展器
     */
    app.config.globalProperties.$bindComponentExtender = (/**
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    function (componentInstance, componentType) {
        if (componentInstance.$__component_extended === true) {
            return;
        }
        /** @type {?} */
        const extenderManager = this.$getComponentExtenderManager();
        /** @type {?} */
        const extender = extenderManager.getExtender(componentInstance, componentType);
        if (extender) {
            extender.extend();
            componentInstance.$__component_extended === true;
        }
    });
    /**
     * 清理所有组件扩展器
     * @param refs
     */
    app.config.globalProperties.$unbindComponentExtenders = (/**
     * @param {?} refs
     * @return {?}
     */
    function (refs) {
        if (!this.$refs) {
            return;
        }
        /** @type {?} */
        const componentInstances = Object.values(this.$refs);
        componentInstances.forEach((/**
         * @param {?} componentInstance
         * @return {?}
         */
        (componentInstance) => {
            this.$unbindComponentExtender(componentInstance);
        }));
    });
    /**
     * 清理组件扩展器状态
     */
    app.config.globalProperties.$unbindComponentExtender = (/**
     * @param {?} componentInstance
     * @return {?}
     */
    function (componentInstance) {
        /** @type {?} */
        const extenderManager = this.$getComponentExtenderManager();
        /** @type {?} */
        const extender = extenderManager.getExtender(componentInstance);
        if (extender) {
            extender.dispose();
        }
    });
    app.config.globalProperties.$initPage = (/**
     * @param {?} viewModelOptions
     * @return {?}
     */
    function (viewModelOptions) {
        this.$createViewModel(viewModelOptions);
        this.$initComponentExtenderManager();
        this.$viewModel.uiState.pageTitle && this.$changeDocumentTitle(this.$viewModel.uiState.pageTitle);
        this.$initUistate();
    });
    app.config.globalProperties.$changeDocumentTitle = (/**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        document.title = title || document.title;
    });
    /**
     * VUE上格式化工具类
     */
    app.config.globalProperties.$formatUtils = formatUtils;
    /**
     * 初始化uistate上记录的状态
     */
    app.config.globalProperties.$initUistate = (/**
     * @return {?}
     */
    function () {
        this.$viewModel.uiState.listaviewState = { refreshLoading: false, loadMoreLoading: false, loadMoreFinished: false };
        this.$viewModel.uiState.searchState = { keyword: '' };
        this.$viewModel.uiState.filterState = { filters: '', filterData: '' };
        this.$viewModel.uiState.tabState = { currentTab: '' };
    });
};
/** @type {?} */
const DevkitPlugin = {
    install: (ɵ0$2)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-states-mapper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function mapEntityListData() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getEntityListData();
    }), 'entityListData');
}
/**
 * @return {?}
 */
function mapCurrentEntityData() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getCurrentEntityData();
    }), 'currentEntityData');
}
/**
 * @return {?}
 */
function mapUIState() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getUIState();
    }), 'uiState');
}
/**
 * @return {?}
 */
function mapForm() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getForm();
    }), 'form');
}
/**
 * @return {?}
 */
function mapStateMachine() {
    return recomputable((/**
     * @return {?}
     */
    function () {
        return this.$bindingStates.getStateMachine();
    }), 'stateMachine');
}
/**
 * @param {?=} extraStates
 * @return {?}
 */
function mapBindingStates(extraStates) {
    /** @type {?} */
    const mappedBindingStates = {
        entityListData: mapEntityListData(),
        currentEntityData: mapCurrentEntityData(),
        uiState: mapUIState(),
        form: mapForm(),
        stateMachine: mapStateMachine()
    };
    /** @type {?} */
    const allMappedStates = Object.assign({}, mappedBindingStates, extraStates);
    return allMappedStates;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-commands-mapper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 映射命令方法
 * @param {?} methodNames
 * @return {?}
 */
function mapCommandMethods(methodNames) {
    /** @type {?} */
    const mappedCommandMethods = {};
    methodNames.forEach((/**
     * @param {?} methodName
     * @return {?}
     */
    (methodName) => {
        mappedCommandMethods[methodName] = (/**
         * @param {?} eventParams
         * @return {?}
         */
        function (eventParams) {
            return this.$viewModel[methodName](eventParams);
        });
    }));
    return mappedCommandMethods;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/wechat-take-photo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WeChatTakePhoto {
    // public selectAttachments() { }
    /**
     * @return {?}
     */
    takePhotoAttachment() {
        // 微信拍照
    }
    /**
     * @return {?}
     */
    takeShortVideo() {
    }
    /**
     * @return {?}
     */
    selectFile() {
    }
    /**
     * @return {?}
     */
    downloadAttachment() {
    }
}
if (false) {
    /** @type {?} */
    WeChatTakePhoto.prototype.getSysInfo;
    /** @type {?} */
    WeChatTakePhoto.prototype.playShortVideo;
    /** @type {?} */
    WeChatTakePhoto.prototype.selectAttachments;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class AttachmentService {
    constructor() {
        this.collectFile = new Subject();
    }
    /**
     * 拍照
     * @param {?=} param 拍照参数
     * @return {?}
     */
    takePhoto(param) {
        this.takePhotoIns.takePhotoAttachment(param);
    }
    /**
     * 选择文件
     * @param {?} param 选择文件参数
     * @return {?}
     */
    selectAttachment(param) {
        this.takePhotoIns.selectAttachments(param);
    }
    /**
     * 拍摄短视频
     * @param {?} param 拍摄短视频参数
     * @return {?}
     */
    takeShortVideo(param) {
        this.takePhotoIns.takeShortVideo(param);
    }
    /**
     * 播放短视频
     * @param {?} param 播放短视频参数
     * @return {?}
     */
    playShortVideo(param) {
        this.takePhotoIns.playShortVideo(param);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    selectFile(param) {
        this.takePhotoIns.selectFile(param);
    }
    /**
     * @param {?} param
     * @return {?}
     */
    downloadAttachment(param) {
        this.takePhotoIns.downloadAttachment(param);
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        return this.takePhotoIns.getSysInfo();
    }
}
if (false) {
    /** @type {?} */
    AttachmentService.prototype.takePhotoIns;
    /** @type {?} */
    AttachmentService.prototype.collectFile;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/cloud-plus-take-photo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CloudPlusTakePhoto {
    /**
     * @param {?} collectFile
     */
    constructor(collectFile) {
        this.collectFile = collectFile;
        this.jsBrigdeService = new JsBridgeService();
    }
    /**
     * @param {?} param
     * @return {?}
     */
    takeShortVideo(param) {
        this.jsBrigdeService.takeVideo(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processVideo(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    takePhotoAttachment(param) {
        this.jsBrigdeService.takePhoto(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processPic(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    selectAttachments(param) {
        this.jsBrigdeService.selectPictureFromAlbum(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processPic(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    selectFile(param) {
        this.jsBrigdeService.selectFile(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            const data = this.processFile(res);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadAttachment(options) {
        return this.jsBrigdeService.downloadFile(options);
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        return this.jsBrigdeService.getSysInfo();
    }
    /**
     * 调起当前设备 播放短视频
     * @param {?} path 视频路径
     * @return {?}
     */
    playShortVideo(path) {
        window['iCityBridge'].ccworkPlayShortVideo({ path }, (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = res.result;
            /** @type {?} */
            const data = this.processVideo(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * 预处理图片
     * @param {?} result
     * @return {?}
     */
    processPic(result) {
        /** @type {?} */
        const imgHeader = 'data:image/jpeg;base64,';
        /** @type {?} */
        const imgType = 'image/png';
        if (typeof result === 'string') {
            // ios takephoto
            return {
                file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                content: `${imgHeader}${result}`
            };
        }
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        (dataItem) => {
            // andriod selectPic
            if (typeof dataItem === 'string') {
                return {
                    file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                    content: `${imgHeader}${dataItem}`
                };
            }
            // ios selectPic
            return {
                file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                content: `${imgHeader}${dataItem.content}`
            };
        }));
    }
    /**
     * @param {?} result
     * @return {?}
     */
    processFile(result) {
        /** @type {?} */
        const fileHeaders = {
            'jpg': 'data:image/jpeg;base64,',
            'png': 'data:image/jpeg;base64,',
            'doc': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'docx': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'xls': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'xlsx': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'ppt': 'data:application/vnd.ms-powerpoint;base64,',
            'pptx': 'data:application/vnd.ms-powerpoint;base64,',
            'txt': 'data:text/plain;base64,',
            'pdf': 'data:application/pdf;base64,',
            'mp4': 'data:video/mp4;base64,',
            'mov': 'data:video/mp4;base64,'
        };
        /** @type {?} */
        const fileTypes = {
            'jpg': 'image/png',
            'png': 'image/png',
            'doc': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.ms-powerpoint',
            'txt': 'text/plain',
            'pdf': 'application/pdf',
            'mp4': 'video/mp4',
            'mov': 'video/mp4'
        };
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        (dataItem) => {
            /** @type {?} */
            const suffix = dataItem.name.substring(dataItem.name.lastIndexOf('.') + 1);
            return {
                file: new File([], dataItem.name, { type: fileTypes[suffix.toLowerCase()] }),
                content: `${fileHeaders[suffix.toLowerCase()]}${dataItem.base64}`
            };
        }));
    }
    /**
     * 预处理视频
     * @param {?} result
     * @return {?}
     */
    processVideo(result) {
        /** @type {?} */
        const url = result.value;
        /** @type {?} */
        const base64value = result.base64value;
        /** @type {?} */
        const videoHeader = 'data:video/mp4;base64,';
        /** @type {?} */
        const videoType = 'video/mp4';
        /** @type {?} */
        const videoName = url.substring(url.lastIndexOf('/') + 1) + '.mp4';
        return {
            file: new File([], videoName, { type: videoType }),
            content: `${videoHeader}${base64value}`,
            type: videoType,
            url,
            name: url.substring(url.lastIndexOf('/') + 1) + '.mp4'
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.jsBrigdeService;
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.collectFile;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/attachment-children.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WeChatAttachment extends AttachmentService {
    constructor() {
        super();
        this.takePhotoIns = new WeChatTakePhoto();
    }
}
class CloudPlusAttachment extends AttachmentService {
    constructor() {
        super();
        this.takePhotoIns = new CloudPlusTakePhoto(this.collectFile);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/upload-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UploadAttachmentService {
    /**
     * @param {?} befRepository
     */
    constructor(befRepository) {
        this.befRepository = befRepository;
    }
    /**
     * 缓存附件
     * @param {?} originFiles
     * @param {?} uploadInfo
     * @return {?}
     */
    upload(originFiles, uploadInfo) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const uploadUrl = `/api/runtime/dfs/v1.0/formdoc`;
        /** @type {?} */
        const parametersArr = originFiles.map((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            return {
                docInfo: {
                    fileContent: ele.content.substring(ele.content.indexOf(',') + 1),
                    fileName: ele.file.name,
                    index: 0,
                    total: 1,
                    metadataId: ele.id
                },
                formId: uploadInfo.parentDirName,
                mode: 1,
                rootId: uploadInfo.rootId || 'default-root'
            };
        }));
        /** @type {?} */
        const requestList = parametersArr.map((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            /** @type {?} */
            const params = { body: ele };
            return apiProxy.request(HttpMethods.POST, uploadUrl, params, true);
        }));
        return forkJoin(requestList);
    }
    /**
     * 预览附件pdf
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    previewPdf(rootId, metadataIdList) {
        /** @type {?} */
        const baseUrl = '/platform/runtime/dfs/web/pdfjs/viewer.html?file=';
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        const params = {
            storageType: 2, filePath: JSON.stringify({
                rootId,
                metadataIdList
            })
        };
        /** @type {?} */
        const body = { body: params };
        // 预览
        return apiProxy.request(HttpMethods.POST, fileListUrl, body).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => baseUrl + encodeURIComponent(res[0].filePath))));
    }
    /**
     * 预览office txt文档
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    previewDoc(rootId, metadataIdList) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        const loadDocUrl = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
        /** @type {?} */
        const params = {
            storageType: 2, filePath: JSON.stringify({
                rootId,
                metadataIdList
            })
        };
        /** @type {?} */
        const body = { body: params };
        // 根据文件类型 调用不同的预览接口
        return apiProxy.request(HttpMethods.POST, fileListUrl, body)
            .pipe(mergeMap((/**
         * @param {?} res
         * @return {?}
         */
        res => apiProxy.request(HttpMethods.POST, loadDocUrl, { body: { filePath: res[0].filePath } }))), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.pages)));
    }
    /**
     * 获取图片url
     * @param {?} attachmentId  附件id
     * @param {?} rootId 根目录id
     * @return {?}
     */
    getAttachmentPath(attachmentId, rootId) {
        return `/api/runtime/dfs/v1.0/doc/filecontent?metadataid=${attachmentId}&rootid=${rootId}&token=${getToken(mergeString(attachmentId, rootId))}`;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadAttachmentService.prototype.befRepository;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-mapping.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助映射服务
 */
class LookupMappingService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 映射字段
     * \@summary
     * mapFields格式形如：
     * {
     *    id: "assoField.assoField",
     *    code: "assoField.assoField_Code",
     *    name: "assoField.assoField_Name"
     * }
     * @param {?} helpData
     * @param {?} mappingFields
     * @return {?}
     */
    mapFields(helpData, mappingFields) {
        console.log(helpData);
        if (!mappingFields) {
            return;
        }
        /** @type {?} */
        let helpFields = Object.keys(mappingFields);
        /** @type {?} */
        const idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item === 'id'));
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        /** @type {?} */
        const that = this;
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            let val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData
                        .map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    (h) => {
                        return this.getValue(f, h);
                    }))
                        .join(',');
                }
                else {
                    val = that.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            const pathArr = that.getBindingPathArray();
            mappingFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            (ff) => {
                if (!helpData) {
                }
                else {
                    that.viewModelContext.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
    }
    /**
     * 获取字段值
     * @param {?} fieldPath
     * @return {?}
     */
    getFieldValue(fieldPath) {
        /** @type {?} */
        const bindingPathArray = this.getBindingPathArray();
        /** @type {?} */
        const fieldPathArray = bindingPathArray.concat(fieldPath.split('.'));
        return this.viewModelContext.bindingData.getValue(fieldPathArray);
    }
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    getValue(f, data) {
        /** @type {?} */
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a[b];
            }), data);
        }
        return val;
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n !== ''));
        }
        return [];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupMappingService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/cloud-plus-map-operation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CloudPlusMapOperation {
    /**
     * @param {?} location$
     */
    constructor(location$) {
        this.location$ = location$;
    }
    /**
     * 云上协同  调用获取当前位置接口
     * @return {?}
     */
    getCurrentLoc() {
        // 具体实现
        if (window['iCityBridge']) {
            /** @type {?} */
            const iCityBridge = window['iCityBridge'];
            iCityBridge.ccworkGetLocation((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                alert(JSON.stringify(result));
                // 结果预处理
                // 发布位置结果
                this.location$.next(this.assembleMarkers(result));
            }));
        }
    }
    // 获取定位回调
    /**
     * @private
     * @param {?=} result
     * @return {?}
     */
    locationCallback(result) {
        alert(JSON.stringify(result));
        // 结果预处理
        // 发布位置结果
        this.location$.next(this.assembleMarkers(result));
    }
    /**
     * 组装坐标结果
     * @private
     * @param {?} res 结果
     * @return {?}
     */
    assembleMarkers(res) {
        /** @type {?} */
        const loc = res.result;
        return [{ position: [Number(loc.lng), Number(loc.lat)], visible: true, draggable: true }];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudPlusMapOperation.prototype.location$;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/map.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class MapService {
    constructor() {
        this.location$ = new Subject();
    }
    /**
     * 获取当前位置
     * @return {?}
     */
    getCurrentLocation() {
        this.locationInstance.getCurrentLoc();
    }
    /**
     * 获取坐标集合
     * @return {?}
     */
    getMapMarkers() {
        return this.location$;
    }
    /**
     * @return {?}
     */
    setMapMarkers() {
        // this.locationInstance.location$.subscribe((res) => {
        //     this.markers.next(res);
        // });
    }
}
if (false) {
    /** @type {?} */
    MapService.prototype.locationInstance;
    /** @type {?} */
    MapService.prototype.location$;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/cloud-plus-map.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CloudPlusMapService extends MapService {
    constructor() {
        super();
        this.locationInstance = new CloudPlusMapOperation(this.location$);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/providers-mapper.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 映射Providers
 * @return {?}
 */
function mapProviders() {
    return (/**
     * @return {?}
     */
    function provide() {
        /** @type {?} */
        const viewModel = this.$getViewModel();
        /** @type {?} */
        const lookupDataService = new BefLookupDataService(viewModel.context);
        /** @type {?} */
        const lookupMappingService = new LookupMappingService(viewModel.context);
        // 云上协同附件服务
        /** @type {?} */
        const attachmentService = new CloudPlusAttachment();
        // caf提供附件上传和预览接口调用
        /** @type {?} */
        const uploadAttachmentService = new UploadAttachmentService((/** @type {?} */ (viewModel.context.repository)));
        // 云上协同地图服务
        /** @type {?} */
        const mapService = new CloudPlusMapService();
        /** @type {?} */
        const providers = {
            LookupHttpService: lookupDataService,
            LookupMappingFn: lookupMappingService,
            uploadAttachmentService,
            attachmentService,
            mapService
        };
        return providers;
    });
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-listview-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$3 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    console.log(componentInstance);
    componentInstance.$bindComponentExtender(componentInstance, 'Listview');
}, ɵ1$1 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindListviewExtenderDir = {
    mounted: (ɵ0$3),
    unmounted: (ɵ1$1)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-lookup-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$4 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Lookup');
}, ɵ1$2 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindLookupExtenderDir = {
    mounted: (ɵ0$4),
    unmounted: (ɵ1$2)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-filter-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$5 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Filter');
}, ɵ1$3 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindFilterExtenderDir = {
    mounted: (ɵ0$5),
    unmounted: (ɵ1$3)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-tab-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$6 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Tab');
}, ɵ1$4 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindTabExtenderDir = {
    mounted: (ɵ0$6),
    unmounted: (ɵ1$4)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-search-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$7 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.children[0].children[0].componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Search');
}, ɵ1$5 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.children[0].children[0].componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindSearchExtenderDir = {
    mounted: (ɵ0$7),
    unmounted: (ɵ1$5)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-reflesh-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$8 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Reflesh');
}, ɵ1$6 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindRefleshExtenderDir = {
    mounted: (ɵ0$8),
    unmounted: (ɵ1$6)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-checkbox-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$9 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Checkbox');
}, ɵ1$7 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindCheckboxExtenderDir = {
    mounted: (ɵ0$9),
    unmounted: (ɵ1$7)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/bind-attachment-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$a = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$bindComponentExtender(componentInstance, 'Attachment');
}, ɵ1$8 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindAttachmentExtenderDir = {
    mounted: (ɵ0$a),
    unmounted: (ɵ1$8)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/map-directives/bind-map-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$b = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    /** @type {?} */
    const value = binding.value;
    componentInstance.lngPath = value.lngPath;
    componentInstance.latPath = value.latPath;
    componentInstance.$bindComponentExtender(componentInstance, 'Map');
}, ɵ1$9 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindMapExtenderDir = {
    mounted: (ɵ0$b),
    // update: function (el, binding, vnode, oldVnode) {
    //     const newValue = binding.value;
    //     const componentInstance = vnode.componentInstance as any;
    //     // 监听响应式变化
    //     componentInstance.resizeEnable = newValue.resizeEnable;
    //     // 是否可以拖动
    //     componentInstance.dragEnable = newValue.dragEnable;
    //     // 初始化缩放大小
    //     componentInstance.zoom = newValue.zoom;
    //     componentInstance.zoomEnable = newValue.zoomEnable;
    //     // 地图中心点经纬度
    //     componentInstance.center = newValue.center;
    //     console.log(el);
    //     console.log(binding);
    //     console.log(vnode);
    //     console.log(oldVnode);
    // },
    unmounted: (ɵ1$9)
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-value-converters/date-converter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 日期转换器
 */
class DateConverter {
    /**
     * 构造函数
     * @param {?} format 日期格式
     */
    constructor(format) {
        this.format = format;
    }
    /**
     * 控件值（Date对象）=>数据源（字符串）
     * @param {?} value
     * @return {?}
     */
    convertFrom(value) {
        if (!value) {
            return '0001-01-01T00:00:00';
        }
        /** @type {?} */
        const format = this.format ? this.format : 'yyyy-MM-dd HH:mm:ss';
        return DateUtil.format(value, format);
    }
    /**
     * 数据源（字符串）=> 控件值（Date对象）
     * @param {?} value
     * @return {?}
     */
    convertTo(value) {
        if (DateUtil.isEmptyDateString(value) === true) {
            return null;
        }
        return DateUtil.parse(value);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DateConverter.prototype.format;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-value-converters/array-converter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 字符串数组转换器
 */
class StringArrayConverter {
    /**
     * @param {?=} separator
     */
    constructor(separator = ',') {
        this.separator = separator;
    }
    /**
     * 控件值（字符串数组）=>数据源（字符串）
     * @param {?} value
     * @return {?}
     */
    convertFrom(value) {
        return value.join(this.separator);
    }
    /**
     * 数据源（字符串）=> 控件值（字符串数组）
     * @param {?} value
     * @return {?}
     */
    convertTo(value) {
        return value.split(this.separator);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    StringArrayConverter.prototype.separator;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-value-converters/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/attachment-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const filterData = (/**
 * @param {?} rawData
 * @param {?} field
 * @param {?} rootId
 * @param {?=} isComponentAdapter
 * @return {?}
 */
(rawData, field, rootId, isComponentAdapter = true) => {
    /** @type {?} */
    const splitFiled = field.split('/');
    /** @type {?} */
    const fields = splitFiled.filter((/**
     * @param {?} ele
     * @return {?}
     */
    ele => ele));
    if (!isComponentAdapter) {
        // 单条数据
        /** @type {?} */
        const data = getDataByPath(rawData, fields);
        /** @type {?} */
        let url = '/platform/common/web/assets/imgs/no-pic.png';
        // 附件不存在
        if (!data || !data.attachmentId) {
            return url;
        }
        // 附件存在
        /** @type {?} */
        const extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return url;
    }
    /** @type {?} */
    const transformData = rawData.map((/**
     * @param {?} everyData
     * @return {?}
     */
    everyData => {
        /** @type {?} */
        const data = getDataByPath(everyData, fields);
        /** @type {?} */
        let url = '/platform/common/web/assets/imgs/no-pic.png';
        if (!data || !data.attachmentId) {
            return {
                url,
                id: everyData.id,
                attachmentId: data.attachmentId,
                name: '',
                size: 0,
                createTime: ''
            };
        }
        /** @type {?} */
        const extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return {
            url,
            id: everyData.id,
            attachmentId: data.attachmentId,
            name: data.fileName,
            size: data.fileSize,
            createTime: data.fileCreateTime
        };
    }));
    return transformData;
});

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/map-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const filterMapData = (/**
 * @param {?} currentEntityData
 * @param {?} lng
 * @param {?} lat
 * @return {?}
 */
(currentEntityData, lng, lat) => {
    // 经度
    /** @type {?} */
    const lngData = getDataByPath(currentEntityData, lng.split('/'));
    // 纬度
    /** @type {?} */
    const latData = getDataByPath(currentEntityData, lat.split('/'));
    return [{ position: [lngData || 117.12212, latData || 35.3243] }];
});

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/app-creator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AppCreator {
    /**
     * 创建Vue应用
     * @param {?} rootComponent
     * @return {?}
     */
    static createApp(rootComponent) {
        this.app = createApp(rootComponent);
        // 注册内置插件
        this.app.use(DevkitPlugin);
        // 注册指令
        // this.createDirective('bind-listview-extender', bindListviewExtenderDir);
        // this.createDirective('bind-lookup-extender', bindLookupExtenderDir);
        // this.createDirective('bind-filter-extender', bindFilterExtenderDir);
        // this.createDirective('bind-serach-extender', bindSearchExtenderDir);
        // this.createDirective('bind-refresh-extender', bindRefleshExtenderDir);
        // this.createDirective('bind-tab-extender', bindTabExtenderDir);
        // this.createDirective('bind-checkbox-extender', bindCheckboxExtenderDir);
        // this.createDirective('bind-attachment-extender', bindAttachmentExtenderDir);
        // this.createDirective('bind-map-extender', bindMapExtenderDir);
        return this.app;
    }
    /**
     *
     * @param {?} directiveName
     * @param {?} directiveOptions
     * @return {?}
     */
    static createDirective(directiveName, directiveOptions) {
        this.app.directive(directiveName, directiveOptions);
    }
}
/**
 * Vue应用
 */
AppCreator.app = null;
if (false) {
    /**
     * Vue应用
     * @type {?}
     */
    AppCreator.app;
}

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-mobile-vue-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { AppCreator, BindingStates, DateConverter, DevkitPlugin, LookupMappingService, StringArrayConverter, bindAttachmentExtenderDir, bindCheckboxExtenderDir, bindFilterExtenderDir, bindListviewExtenderDir, bindLookupExtenderDir, bindMapExtenderDir, bindRefleshExtenderDir, bindSearchExtenderDir, bindTabExtenderDir, filterData, filterMapData, mapBindingStates, mapCommandMethods, mapCurrentEntityData, mapEntityListData, mapForm, mapProviders, mapUIState, recomputable, recompute };
//# sourceMappingURL=farris-mobile-vue-adapter.js.map
