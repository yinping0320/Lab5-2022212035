/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/map-directives/bind-map-extender.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    /** @type {?} */
    const value = binding.value;
    componentInstance.lngPath = value.lngPath;
    componentInstance.latPath = value.latPath;
    componentInstance.$bindComponentExtender(componentInstance, 'Map');
}, ɵ1 = /**
 * @param {?} el
 * @param {?} binding
 * @param {?} vnode
 * @param {?} oldVnode
 * @return {?}
 */
function (el, binding, vnode, oldVnode) {
    /** @type {?} */
    const componentInstance = (/** @type {?} */ (vnode.componentInstance));
    componentInstance.$unbindComponentExtender(componentInstance);
};
/** @type {?} */
const bindMapExtenderDir = {
    mounted: (ɵ0),
    // update: function (el, binding, vnode, oldVnode) {
    //     const newValue = binding.value;
    //     const componentInstance = vnode.componentInstance as any;
    //     // 监听响应式变化
    //     componentInstance.resizeEnable = newValue.resizeEnable;
    //     // 是否可以拖动
    //     componentInstance.dragEnable = newValue.dragEnable;
    //     // 初始化缩放大小
    //     componentInstance.zoom = newValue.zoom;
    //     componentInstance.zoomEnable = newValue.zoomEnable;
    //     // 地图中心点经纬度
    //     componentInstance.center = newValue.center;
    //     console.log(el);
    //     console.log(binding);
    //     console.log(vnode);
    //     console.log(oldVnode);
    // },
    unmounted: (ɵ1)
};
export { bindMapExtenderDir };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC1tYXAtZXh0ZW5kZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtdnVlLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tYXAtZGlyZWN0aXZlcy9iaW5kLW1hcC1leHRlbmRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBRVcsVUFBVSxFQUFFLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxRQUFROztVQUN2QyxpQkFBaUIsR0FBRyxtQkFBQSxLQUFLLENBQUMsaUJBQWlCLEVBQU87O1VBQ2xELEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSztJQUMzQixpQkFBaUIsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUMxQyxpQkFBaUIsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUMxQyxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUNyRSxDQUFDOzs7Ozs7O0FBb0JVLFVBQVUsRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsUUFBUTs7VUFDekMsaUJBQWlCLEdBQUcsbUJBQUEsS0FBSyxDQUFDLGlCQUFpQixFQUFPO0lBQ3hELGlCQUFpQixDQUFDLHdCQUF3QixDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDaEUsQ0FBQzs7TUEvQkcsa0JBQWtCLEdBQUc7SUFFekIsT0FBTyxNQU1OOzs7Ozs7Ozs7Ozs7Ozs7Ozs7SUFvQkQsU0FBUyxNQUdSO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGJpbmRNYXBFeHRlbmRlckRpciA9IHtcclxuXHJcbiAgbW91bnRlZDogZnVuY3Rpb24gKGVsLCBiaW5kaW5nLCB2bm9kZSwgb2xkVm5vZGUpIHtcclxuICAgIGNvbnN0IGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgYXMgYW55O1xyXG4gICAgY29uc3QgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xyXG4gICAgY29tcG9uZW50SW5zdGFuY2UubG5nUGF0aCA9IHZhbHVlLmxuZ1BhdGg7XHJcbiAgICBjb21wb25lbnRJbnN0YW5jZS5sYXRQYXRoID0gdmFsdWUubGF0UGF0aDtcclxuICAgIGNvbXBvbmVudEluc3RhbmNlLiRiaW5kQ29tcG9uZW50RXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsICdNYXAnKTtcclxuICB9LFxyXG5cclxuICAvLyB1cGRhdGU6IGZ1bmN0aW9uIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XHJcbiAgICAvLyAgICAgY29uc3QgbmV3VmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xyXG4gICAgLy8gICAgIGNvbnN0IGNvbXBvbmVudEluc3RhbmNlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgYXMgYW55O1xyXG4gICAgLy8gICAgIC8vIOebkeWQrOWTjeW6lOW8j+WPmOWMllxyXG4gICAgLy8gICAgIGNvbXBvbmVudEluc3RhbmNlLnJlc2l6ZUVuYWJsZSA9IG5ld1ZhbHVlLnJlc2l6ZUVuYWJsZTtcclxuICAgIC8vICAgICAvLyDmmK/lkKblj6/ku6Xmi5bliqhcclxuICAgIC8vICAgICBjb21wb25lbnRJbnN0YW5jZS5kcmFnRW5hYmxlID0gbmV3VmFsdWUuZHJhZ0VuYWJsZTtcclxuICAgIC8vICAgICAvLyDliJ3lp4vljJbnvKnmlL7lpKflsI9cclxuICAgIC8vICAgICBjb21wb25lbnRJbnN0YW5jZS56b29tID0gbmV3VmFsdWUuem9vbTtcclxuICAgIC8vICAgICBjb21wb25lbnRJbnN0YW5jZS56b29tRW5hYmxlID0gbmV3VmFsdWUuem9vbUVuYWJsZTtcclxuICAgIC8vICAgICAvLyDlnLDlm77kuK3lv4Pngrnnu4/nuqzluqZcclxuICAgIC8vICAgICBjb21wb25lbnRJbnN0YW5jZS5jZW50ZXIgPSBuZXdWYWx1ZS5jZW50ZXI7XHJcbiAgICAvLyAgICAgY29uc29sZS5sb2coZWwpO1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKGJpbmRpbmcpO1xyXG4gICAgLy8gICAgIGNvbnNvbGUubG9nKHZub2RlKTtcclxuICAgIC8vICAgICBjb25zb2xlLmxvZyhvbGRWbm9kZSk7XHJcbiAgICAvLyB9LFxyXG5cclxuICB1bm1vdW50ZWQ6IGZ1bmN0aW9uIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XHJcbiAgICBjb25zdCBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlIGFzIGFueTtcclxuICAgIGNvbXBvbmVudEluc3RhbmNlLiR1bmJpbmRDb21wb25lbnRFeHRlbmRlcihjb21wb25lbnRJbnN0YW5jZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IHsgYmluZE1hcEV4dGVuZGVyRGlyIH07XHJcblxyXG4iXX0=