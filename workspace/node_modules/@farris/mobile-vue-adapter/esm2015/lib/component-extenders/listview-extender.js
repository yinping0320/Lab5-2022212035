/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/listview-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class ListviewExtender {
    /**
     * @param {?} listviewInstance
     * @param {?} viewModelContext
     */
    constructor(listviewInstance, viewModelContext) {
        this.listviewInstance = listviewInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        this.viewModelContext.appContext.eventBus.subscribe(`${this.viewModelContext.id}-listview-extend`, (/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            if (value.type === 'listviewFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { loadMoreFinished: true }));
            }
            if (value.type === 'listviewUnFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { loadMoreFinished: false }));
            }
            if (value.type === 'loadDataFinished') {
                this.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, this.viewModelContext.uiState['listaviewState'], { refreshLoading: false, loadMoreLoading: false }));
            }
        }));
        // 当前行
        this.listviewInstance.$on('selectChange', (/**
         * @param {?} selectedData
         * @return {?}
         */
        (selectedData) => {
            /** @type {?} */
            const selectedId = selectedData.data.id;
            self.viewModelContext.bindingData.getList().setCurrentId(selectedId, true, true);
        }));
        // 批量选择
        this.listviewInstance.$on('itemClick', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const selectedItems = self.listviewInstance.getSelectDataList();
            /** @type {?} */
            let selectedIds = [];
            if (selectedItems && selectedItems.length > 0) {
                selectedIds = selectedItems.map((/**
                 * @param {?} selectedItem
                 * @return {?}
                 */
                (selectedItem) => {
                    return selectedItem.id;
                }));
            }
            self.viewModelContext.uiState.setPropertyValue('selectedIds', selectedIds);
        }));
        // 监听下拉刷新组件
        this.listviewInstance.$on('refresh', (/**
         * @return {?}
         */
        () => {
            self.viewModelContext.repository.setPaginationInfo({
                pageIndex: 1
            });
            self.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, self.viewModelContext.uiState['listaviewState'], { refreshLoading: true, loadMoreLoading: true }));
            self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
        }));
        // 监听是否走查询
        this.listviewInstance.$on('load', (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const loading = self.viewModelContext.uiState['listaviewState']['loadMoreLoading'];
            if (!loading) {
                self.viewModelContext.uiState.setPropertyValue('listaviewState', Object.assign({}, self.viewModelContext.uiState['listaviewState'], { loadMoreLoading: true }));
                /** @type {?} */
                let pageIndex = self.viewModelContext.repository.paginationInfo && self.viewModelContext.repository.paginationInfo.pageIndex;
                if (!pageIndex) {
                    pageIndex = 0;
                }
                self.viewModelContext.repository.setPaginationInfo({
                    pageIndex: pageIndex += 1
                });
                self.viewModelContext.appContext.eventBus.triggerEvent({ type: 'LoadData' });
            }
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.listviewInstance.$off('selectChange');
        this.listviewInstance.$off('itemClick');
        this.listviewInstance.$off('load');
        this.viewModelContext.appContext.eventBus.unsubscribe(`${this.viewModelContext.id}-listview-extend`);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ListviewExtender.prototype.listviewInstance;
    /**
     * @type {?}
     * @private
     */
    ListviewExtender.prototype.viewModelContext;
}
export { ListviewExtender };
//# sourceMappingURL=data:application/json;base64,