/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/component-extender-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ListviewExtender } from './listview-extender';
import { LookupExtender } from './lookup-extender';
import { FilterExtender } from './filter-extender';
import { TabExtender } from './tab-extender';
import { SearchExtender } from './search-extender';
import { CheckboxExtender } from './checkbox-extender';
import { AttachmentExtender } from './attachment-extender';
import { MapExtender } from './map-extender';
/**
 * 组件适配器工厂
 */
class ComponentExtenderFactory {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 创建适配器
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    create(componentInstance, componentType) {
        /** @type {?} */
        let componentExtenderInstance;
        switch (componentType) {
            case 'fm-listview':
                componentExtenderInstance = new ListviewExtender(componentInstance, this.viewModelContext);
                break;
            case 'Lookup':
                componentExtenderInstance = new LookupExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-filter':
                componentExtenderInstance = new FilterExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-tabs':
                componentExtenderInstance = new TabExtender(componentInstance, this.viewModelContext);
                break;
            case 'van-search':
                componentExtenderInstance = new SearchExtender(componentInstance, this.viewModelContext);
                break;
            case 'Checkbox':
                componentExtenderInstance = new CheckboxExtender(componentInstance, this.viewModelContext);
                break;
            case 'fm-attachment':
                componentExtenderInstance = new AttachmentExtender(componentInstance, this.viewModelContext);
                break;
            case 'Map':
                componentExtenderInstance = new MapExtender(componentInstance, this.viewModelContext);
                break;
            default:
                componentExtenderInstance = null;
        }
        return componentExtenderInstance;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ComponentExtenderFactory.prototype.viewModelContext;
}
export { ComponentExtenderFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tcG9uZW50LWV4dGVuZGVyLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS12dWUtYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnQtZXh0ZW5kZXJzL2NvbXBvbmVudC1leHRlbmRlci1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQUs3QyxNQUFNLHdCQUF3Qjs7OztJQUk1QixZQUFZLGdCQUFrQztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDM0MsQ0FBQzs7Ozs7OztJQUtNLE1BQU0sQ0FBQyxpQkFBc0IsRUFBRSxhQUFxQjs7WUFDckQseUJBQTRDO1FBQ2hELFFBQVEsYUFBYSxFQUFFO1lBQ3JCLEtBQUssYUFBYTtnQkFDaEIseUJBQXlCLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDM0YsTUFBTTtZQUNSLEtBQUssUUFBUTtnQkFDWCx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDekYsTUFBTTtZQUNSLEtBQUssV0FBVztnQkFDZCx5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDekYsTUFBTTtZQUNSLEtBQUssU0FBUztnQkFDWix5QkFBeUIsR0FBRyxJQUFJLFdBQVcsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEYsTUFBTTtZQUNSLEtBQUssWUFBWTtnQkFDZix5QkFBeUIsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDekYsTUFBTTtZQUNSLEtBQUssVUFBVTtnQkFDYix5QkFBeUIsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUMzRixNQUFNO1lBQ1IsS0FBSyxlQUFlO2dCQUNsQix5QkFBeUIsR0FBRyxJQUFJLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUM3RixNQUFNO1lBQ1IsS0FBSyxLQUFLO2dCQUNSLHlCQUF5QixHQUFHLElBQUksV0FBVyxDQUFDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RixNQUFNO1lBQ1I7Z0JBQ0UseUJBQXlCLEdBQUcsSUFBSSxDQUFDO1NBQ3BDO1FBRUQsT0FBTyx5QkFBeUIsQ0FBQztJQUNuQyxDQUFDO0NBRUY7Ozs7OztJQTNDQyxvREFBMkM7O0FBNkM3QyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBDb21wb25lbnRFeHRlbmRlciB9IGZyb20gJy4vY29tcG9uZW50LWV4dGVuZGVyJztcclxuaW1wb3J0IHsgTGlzdHZpZXdFeHRlbmRlciB9IGZyb20gJy4vbGlzdHZpZXctZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBMb29rdXBFeHRlbmRlciB9IGZyb20gJy4vbG9va3VwLWV4dGVuZGVyJztcclxuaW1wb3J0IHsgRmlsdGVyRXh0ZW5kZXIgfSBmcm9tICcuL2ZpbHRlci1leHRlbmRlcic7XHJcbmltcG9ydCB7IFRhYkV4dGVuZGVyIH0gZnJvbSAnLi90YWItZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBSZWZsZXNoRXh0ZW5kZXIgfSBmcm9tICcuL3JlZmxlc2gtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBTZWFyY2hFeHRlbmRlciB9IGZyb20gJy4vc2VhcmNoLWV4dGVuZGVyJztcclxuaW1wb3J0IHsgQ2hlY2tib3hFeHRlbmRlciB9IGZyb20gJy4vY2hlY2tib3gtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBBdHRhY2htZW50RXh0ZW5kZXIgfSBmcm9tICcuL2F0dGFjaG1lbnQtZXh0ZW5kZXInO1xyXG5pbXBvcnQgeyBNYXBFeHRlbmRlciB9IGZyb20gJy4vbWFwLWV4dGVuZGVyJztcclxuXHJcbi8qKlxyXG4gKiDnu4Tku7bpgILphY3lmajlt6XljoJcclxuICovXHJcbmNsYXNzIENvbXBvbmVudEV4dGVuZGVyRmFjdG9yeSB7XHJcblxyXG4gIHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dDtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWIm+W7uumAgumFjeWZqFxyXG4gICAqL1xyXG4gIHB1YmxpYyBjcmVhdGUoY29tcG9uZW50SW5zdGFuY2U6IGFueSwgY29tcG9uZW50VHlwZTogc3RyaW5nKTogQ29tcG9uZW50RXh0ZW5kZXIge1xyXG4gICAgbGV0IGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2U6IENvbXBvbmVudEV4dGVuZGVyO1xyXG4gICAgc3dpdGNoIChjb21wb25lbnRUeXBlKSB7XHJcbiAgICAgIGNhc2UgJ2ZtLWxpc3R2aWV3JzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IExpc3R2aWV3RXh0ZW5kZXIoY29tcG9uZW50SW5zdGFuY2UsIHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgJ0xvb2t1cCc6XHJcbiAgICAgICAgY29tcG9uZW50RXh0ZW5kZXJJbnN0YW5jZSA9IG5ldyBMb29rdXBFeHRlbmRlcihjb21wb25lbnRJbnN0YW5jZSwgdGhpcy52aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnZm0tZmlsdGVyJzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IEZpbHRlckV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmbS10YWJzJzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IFRhYkV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICd2YW4tc2VhcmNoJzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IFNlYXJjaEV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdDaGVja2JveCc6XHJcbiAgICAgICAgY29tcG9uZW50RXh0ZW5kZXJJbnN0YW5jZSA9IG5ldyBDaGVja2JveEV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdmbS1hdHRhY2htZW50JzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IEF0dGFjaG1lbnRFeHRlbmRlcihjb21wb25lbnRJbnN0YW5jZSwgdGhpcy52aWV3TW9kZWxDb250ZXh0KTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAnTWFwJzpcclxuICAgICAgICBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlID0gbmV3IE1hcEV4dGVuZGVyKGNvbXBvbmVudEluc3RhbmNlLCB0aGlzLnZpZXdNb2RlbENvbnRleHQpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIGNvbXBvbmVudEV4dGVuZGVySW5zdGFuY2UgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBjb21wb25lbnRFeHRlbmRlckluc3RhbmNlO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IENvbXBvbmVudEV4dGVuZGVyRmFjdG9yeSB9OyJdfQ==