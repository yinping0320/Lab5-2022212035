/**
 * @fileoverview added by tsickle
 * Generated from: lib/component-extenders/map-extender.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列表组件扩展
 */
class MapExtender {
    /**
     * @param {?} mapInstance
     * @param {?} viewModelContext
     */
    constructor(mapInstance, viewModelContext) {
        this.mapInstance = mapInstance;
        this.viewModelContext = viewModelContext;
    }
    /**
     * 扩展组件
     * @return {?}
     */
    extend() {
        /** @type {?} */
        const self = this;
        // 当前行
        this.mapInstance.$on('markMap', (/**
         * @param {?} selectedData
         * @return {?}
         */
        (selectedData) => {
            // 获取经纬度
            /** @type {?} */
            const lnglat = selectedData.lnglat;
            /** @type {?} */
            const lng = lnglat.lng;
            /** @type {?} */
            const lat = lnglat.lat;
            // 获取经纬度路径
            /** @type {?} */
            const lngPath = this.mapInstance.lngPath;
            /** @type {?} */
            const latPath = this.mapInstance.latPath;
            // this.mapInstance.center = [lng, lat];
            // 赋值经纬度
            this.viewModelContext.bindingData.setValue(this.getBindingPathArray().concat(lngPath.split('/')), lng, true, true);
            this.viewModelContext.bindingData.setValue(this.getBindingPathArray().concat(latPath.split('/')), lat, true, true);
        }));
    }
    /**
     * 清理状态
     * @return {?}
     */
    dispose() {
        this.mapInstance.$off('markMap');
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n !== ''));
        }
        return [];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.mapInstance;
    /**
     * @type {?}
     * @private
     */
    MapExtender.prototype.viewModelContext;
}
export { MapExtender };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFwLWV4dGVuZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtdnVlLWFkYXB0ZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50LWV4dGVuZGVycy9tYXAtZXh0ZW5kZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFNQSxNQUFNLFdBQVc7Ozs7O0lBTWIsWUFBWSxXQUFnQixFQUFFLGdCQUFxQjtRQUMvQyxJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFDN0MsQ0FBQzs7Ozs7SUFLRCxNQUFNOztjQUNJLElBQUksR0FBRyxJQUFJO1FBQ2pCLE1BQU07UUFDTixJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxTQUFTOzs7O1FBQUUsQ0FBQyxZQUFZLEVBQUUsRUFBRTs7O2tCQUV2QyxNQUFNLEdBQUcsWUFBWSxDQUFDLE1BQU07O2tCQUM1QixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUc7O2tCQUNoQixHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUc7OztrQkFFaEIsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTzs7a0JBQ2xDLE9BQU8sR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU87WUFDeEMsd0NBQXdDO1lBQ3hDLFFBQVE7WUFDUixJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FDdEMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsRUFDckQsR0FBRyxFQUNILElBQUksRUFDSixJQUFJLENBQUMsQ0FBQztZQUNWLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUN0QyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUNyRCxHQUFHLEVBQ0gsSUFBSSxFQUNKLElBQUksQ0FDUCxDQUFDO1FBQ04sQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7OztJQUtELE9BQU87UUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVPLG1CQUFtQjs7Y0FDakIsSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUMsV0FBVztRQUMxRCxJQUFJLElBQUksRUFBRTtZQUNOLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUMsQ0FBQztTQUNsRDtRQUNELE9BQU8sRUFBRSxDQUFDO0lBQ2QsQ0FBQztDQUNKOzs7Ozs7SUFyREcsa0NBQXlCOzs7OztJQUV6Qix1Q0FBMkM7O0FBcUQvQyxPQUFPLEVBQUUsV0FBVyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQ29tcG9uZW50RXh0ZW5kZXIgfSBmcm9tICcuL2NvbXBvbmVudC1leHRlbmRlcic7XHJcblxyXG4vKipcclxuICog5YiX6KGo57uE5Lu25omp5bGVXHJcbiAqL1xyXG5jbGFzcyBNYXBFeHRlbmRlciBpbXBsZW1lbnRzIENvbXBvbmVudEV4dGVuZGVyIHtcclxuXHJcbiAgICBwcml2YXRlIG1hcEluc3RhbmNlOiBhbnk7XHJcblxyXG4gICAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKG1hcEluc3RhbmNlOiBhbnksIHZpZXdNb2RlbENvbnRleHQ6IGFueSkge1xyXG4gICAgICAgIHRoaXMubWFwSW5zdGFuY2UgPSBtYXBJbnN0YW5jZTtcclxuICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5omp5bGV57uE5Lu2XHJcbiAgICAgKi9cclxuICAgIGV4dGVuZCgpIHtcclxuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcclxuICAgICAgICAvLyDlvZPliY3ooYxcclxuICAgICAgICB0aGlzLm1hcEluc3RhbmNlLiRvbignbWFya01hcCcsIChzZWxlY3RlZERhdGEpID0+IHtcclxuICAgICAgICAgICAgLy8g6I635Y+W57uP57qs5bqmXHJcbiAgICAgICAgICAgIGNvbnN0IGxuZ2xhdCA9IHNlbGVjdGVkRGF0YS5sbmdsYXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGxuZyA9IGxuZ2xhdC5sbmc7XHJcbiAgICAgICAgICAgIGNvbnN0IGxhdCA9IGxuZ2xhdC5sYXQ7XHJcbiAgICAgICAgICAgIC8vIOiOt+WPlue7j+e6rOW6pui3r+W+hFxyXG4gICAgICAgICAgICBjb25zdCBsbmdQYXRoID0gdGhpcy5tYXBJbnN0YW5jZS5sbmdQYXRoO1xyXG4gICAgICAgICAgICBjb25zdCBsYXRQYXRoID0gdGhpcy5tYXBJbnN0YW5jZS5sYXRQYXRoO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm1hcEluc3RhbmNlLmNlbnRlciA9IFtsbmcsIGxhdF07XHJcbiAgICAgICAgICAgIC8vIOi1i+WAvOe7j+e6rOW6plxyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEuc2V0VmFsdWUoXHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEJpbmRpbmdQYXRoQXJyYXkoKS5jb25jYXQobG5nUGF0aC5zcGxpdCgnLycpKSxcclxuICAgICAgICAgICAgICAgIGxuZyxcclxuICAgICAgICAgICAgICAgIHRydWUsXHJcbiAgICAgICAgICAgICAgICB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LmJpbmRpbmdEYXRhLnNldFZhbHVlKFxyXG4gICAgICAgICAgICAgICAgdGhpcy5nZXRCaW5kaW5nUGF0aEFycmF5KCkuY29uY2F0KGxhdFBhdGguc3BsaXQoJy8nKSksXHJcbiAgICAgICAgICAgICAgICBsYXQsXHJcbiAgICAgICAgICAgICAgICB0cnVlLFxyXG4gICAgICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5riF55CG54q25oCBXHJcbiAgICAgKi9cclxuICAgIGRpc3Bvc2UoKSB7XHJcbiAgICAgICAgdGhpcy5tYXBJbnN0YW5jZS4kb2ZmKCdtYXJrTWFwJyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRCaW5kaW5nUGF0aEFycmF5KCk6IGFueVtdIHtcclxuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmJpbmRpbmdEYXRhLmJpbmRpbmdQYXRoO1xyXG4gICAgICAgIGlmIChwYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChuKSA9PiBuICE9PSAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBbXTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHsgTWFwRXh0ZW5kZXIgfTtcclxuIl19