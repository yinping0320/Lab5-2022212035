/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/attachment-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { getDataByPath, getAttachmentUrl } from '../utils';
/** @type {?} */
export const filterData = (/**
 * @param {?} rawData
 * @param {?} field
 * @param {?} rootId
 * @param {?=} isComponentAdapter
 * @return {?}
 */
(rawData, field, rootId, isComponentAdapter = true) => {
    /** @type {?} */
    const splitFiled = field.split('/');
    /** @type {?} */
    const fields = splitFiled.filter((/**
     * @param {?} ele
     * @return {?}
     */
    ele => ele));
    if (!isComponentAdapter) {
        // 单条数据
        /** @type {?} */
        const data = getDataByPath(rawData, fields);
        /** @type {?} */
        let url = '/platform/common/web/assets/imgs/no-pic.png';
        // 附件不存在
        if (!data || !data.attachmentId) {
            return url;
        }
        // 附件存在
        /** @type {?} */
        const extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return url;
    }
    /** @type {?} */
    const transformData = rawData.map((/**
     * @param {?} everyData
     * @return {?}
     */
    everyData => {
        /** @type {?} */
        const data = getDataByPath(everyData, fields);
        /** @type {?} */
        let url = '/platform/common/web/assets/imgs/no-pic.png';
        if (!data || !data.attachmentId) {
            return {
                url,
                id: everyData.id,
                attachmentId: data.attachmentId,
                name: '',
                size: 0,
                createTime: ''
            };
        }
        /** @type {?} */
        const extensionName = data.fileName.substring(data.fileName.lastIndexOf('.') + 1);
        url = getAttachmentUrl(data.attachmentId, rootId, extensionName);
        return {
            url,
            id: everyData.id,
            attachmentId: data.attachmentId,
            name: data.fileName,
            size: data.fileSize,
            createTime: data.fileCreateTime
        };
    }));
    return transformData;
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC1maWx0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS12dWUtYWRhcHRlci8iLCJzb3VyY2VzIjpbImxpYi9hdHRhY2htZW50L2F0dGFjaG1lbnQtZmlsdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7QUFDM0QsTUFBTSxPQUFPLFVBQVU7Ozs7Ozs7QUFBRyxDQUFDLE9BQVksRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLGtCQUFrQixHQUFHLElBQUksRUFBRSxFQUFFOztVQUMzRixVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1VBQzdCLE1BQU0sR0FBRyxVQUFVLENBQUMsTUFBTTs7OztJQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxFQUFDO0lBRTVDLElBQUksQ0FBQyxrQkFBa0IsRUFBRTs7O2NBRWYsSUFBSSxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUUsTUFBTSxDQUFDOztZQUN2QyxHQUFHLEdBQUcsNkNBQTZDO1FBQ3ZELFFBQVE7UUFDUixJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUM3QixPQUFPLEdBQUcsQ0FBQztTQUNkOzs7Y0FFSyxhQUFhLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2pGLEdBQUcsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztRQUNqRSxPQUFPLEdBQUcsQ0FBQztLQUNkOztVQUNLLGFBQWEsR0FBRyxPQUFPLENBQUMsR0FBRzs7OztJQUFDLFNBQVMsQ0FBQyxFQUFFOztjQUNwQyxJQUFJLEdBQUcsYUFBYSxDQUFDLFNBQVMsRUFBRSxNQUFNLENBQUM7O1lBQ3pDLEdBQUcsR0FBRyw2Q0FBNkM7UUFDdkQsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDN0IsT0FBTztnQkFDSCxHQUFHO2dCQUNILEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRTtnQkFDaEIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO2dCQUMvQixJQUFJLEVBQUUsRUFBRTtnQkFDUixJQUFJLEVBQUUsQ0FBQztnQkFDUCxVQUFVLEVBQUUsRUFBRTthQUNqQixDQUFDO1NBQ0w7O2NBQ0ssYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqRixHQUFHLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDakUsT0FBTztZQUNILEdBQUc7WUFDSCxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUU7WUFDaEIsWUFBWSxFQUFFLElBQUksQ0FBQyxZQUFZO1lBQy9CLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUTtZQUNuQixJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVE7WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxjQUFjO1NBQ2xDLENBQUM7SUFDTixDQUFDLEVBQUM7SUFDRixPQUFPLGFBQWEsQ0FBQztBQUN6QixDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuXHJcbmltcG9ydCB7IGdldERhdGFCeVBhdGgsIGdldEF0dGFjaG1lbnRVcmwgfSBmcm9tICcuLi91dGlscyc7XHJcbmV4cG9ydCBjb25zdCBmaWx0ZXJEYXRhID0gKHJhd0RhdGE6IGFueSwgZmllbGQ6IHN0cmluZywgcm9vdElkOiBzdHJpbmcsIGlzQ29tcG9uZW50QWRhcHRlciA9IHRydWUpID0+IHtcclxuICAgIGNvbnN0IHNwbGl0RmlsZWQgPSBmaWVsZC5zcGxpdCgnLycpO1xyXG4gICAgY29uc3QgZmllbGRzID0gc3BsaXRGaWxlZC5maWx0ZXIoZWxlID0+IGVsZSk7XHJcblxyXG4gICAgaWYgKCFpc0NvbXBvbmVudEFkYXB0ZXIpIHtcclxuICAgICAgICAvLyDljZXmnaHmlbDmja5cclxuICAgICAgICBjb25zdCBkYXRhID0gZ2V0RGF0YUJ5UGF0aChyYXdEYXRhLCBmaWVsZHMpO1xyXG4gICAgICAgIGxldCB1cmwgPSAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvYXNzZXRzL2ltZ3Mvbm8tcGljLnBuZyc7XHJcbiAgICAgICAgLy8g6ZmE5Lu25LiN5a2Y5ZyoXHJcbiAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmF0dGFjaG1lbnRJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDpmYTku7blrZjlnKhcclxuICAgICAgICBjb25zdCBleHRlbnNpb25OYW1lID0gZGF0YS5maWxlTmFtZS5zdWJzdHJpbmcoZGF0YS5maWxlTmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XHJcbiAgICAgICAgdXJsID0gZ2V0QXR0YWNobWVudFVybChkYXRhLmF0dGFjaG1lbnRJZCwgcm9vdElkLCBleHRlbnNpb25OYW1lKTtcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdHJhbnNmb3JtRGF0YSA9IHJhd0RhdGEubWFwKGV2ZXJ5RGF0YSA9PiB7XHJcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldERhdGFCeVBhdGgoZXZlcnlEYXRhLCBmaWVsZHMpO1xyXG4gICAgICAgIGxldCB1cmwgPSAnL3BsYXRmb3JtL2NvbW1vbi93ZWIvYXNzZXRzL2ltZ3Mvbm8tcGljLnBuZyc7XHJcbiAgICAgICAgaWYgKCFkYXRhIHx8ICFkYXRhLmF0dGFjaG1lbnRJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdXJsLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGV2ZXJ5RGF0YS5pZCxcclxuICAgICAgICAgICAgICAgIGF0dGFjaG1lbnRJZDogZGF0YS5hdHRhY2htZW50SWQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiAnJyxcclxuICAgICAgICAgICAgICAgIHNpemU6IDAsXHJcbiAgICAgICAgICAgICAgICBjcmVhdGVUaW1lOiAnJ1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBleHRlbnNpb25OYW1lID0gZGF0YS5maWxlTmFtZS5zdWJzdHJpbmcoZGF0YS5maWxlTmFtZS5sYXN0SW5kZXhPZignLicpICsgMSk7XHJcbiAgICAgICAgdXJsID0gZ2V0QXR0YWNobWVudFVybChkYXRhLmF0dGFjaG1lbnRJZCwgcm9vdElkLCBleHRlbnNpb25OYW1lKTtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgIGlkOiBldmVyeURhdGEuaWQsXHJcbiAgICAgICAgICAgIGF0dGFjaG1lbnRJZDogZGF0YS5hdHRhY2htZW50SWQsXHJcbiAgICAgICAgICAgIG5hbWU6IGRhdGEuZmlsZU5hbWUsXHJcbiAgICAgICAgICAgIHNpemU6IGRhdGEuZmlsZVNpemUsXHJcbiAgICAgICAgICAgIGNyZWF0ZVRpbWU6IGRhdGEuZmlsZUNyZWF0ZVRpbWVcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gdHJhbnNmb3JtRGF0YTtcclxufTtcclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuXHJcblxyXG5cclxuIl19