/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/cloud-plus-take-photo.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { JsBridgeService } from '@farris/mobile-command-services';
import { uuid } from '../utils';
export class CloudPlusTakePhoto {
    /**
     * @param {?} collectFile
     */
    constructor(collectFile) {
        this.collectFile = collectFile;
        this.jsBrigdeService = new JsBridgeService();
    }
    /**
     * @param {?} param
     * @return {?}
     */
    takeShortVideo(param) {
        this.jsBrigdeService.takeVideo(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processVideo(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    takePhotoAttachment(param) {
        this.jsBrigdeService.takePhoto(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processPic(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    selectAttachments(param) {
        this.jsBrigdeService.selectPictureFromAlbum(param).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            /** @type {?} */
            const data = this.processPic(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} param
     * @return {?}
     */
    selectFile(param) {
        this.jsBrigdeService.selectFile(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            const data = this.processFile(res);
            this.collectFile.next(data);
        }));
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadAttachment(options) {
        return this.jsBrigdeService.downloadFile(options);
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        return this.jsBrigdeService.getSysInfo();
    }
    /**
     * 调起当前设备 播放短视频
     * @param {?} path 视频路径
     * @return {?}
     */
    playShortVideo(path) {
        window['iCityBridge'].ccworkPlayShortVideo({ path }, (/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            /** @type {?} */
            const result = res.result;
            /** @type {?} */
            const data = this.processVideo(result);
            this.collectFile.next(data);
        }));
    }
    /**
     * 预处理图片
     * @param {?} result
     * @return {?}
     */
    processPic(result) {
        /** @type {?} */
        const imgHeader = 'data:image/jpeg;base64,';
        /** @type {?} */
        const imgType = 'image/png';
        if (typeof result === 'string') {
            // ios takephoto
            return {
                file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                content: `${imgHeader}${result}`
            };
        }
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        (dataItem) => {
            // andriod selectPic
            if (typeof dataItem === 'string') {
                return {
                    file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                    content: `${imgHeader}${dataItem}`
                };
            }
            // ios selectPic
            return {
                file: new File([], `image_${uuid().substring(0, 6)}.png`, { type: imgType }),
                content: `${imgHeader}${dataItem.content}`
            };
        }));
    }
    /**
     * @param {?} result
     * @return {?}
     */
    processFile(result) {
        /** @type {?} */
        const fileHeaders = {
            'jpg': 'data:image/jpeg;base64,',
            'png': 'data:image/jpeg;base64,',
            'doc': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'docx': 'data:application/vnd.openxmlformats-officedocument.wordprocessingml.document;base64,',
            'xls': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'xlsx': 'data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,',
            'ppt': 'data:application/vnd.ms-powerpoint;base64,',
            'pptx': 'data:application/vnd.ms-powerpoint;base64,',
            'txt': 'data:text/plain;base64,',
            'pdf': 'data:application/pdf;base64,',
            'mp4': 'data:video/mp4;base64,',
            'mov': 'data:video/mp4;base64,'
        };
        /** @type {?} */
        const fileTypes = {
            'jpg': 'image/png',
            'png': 'image/png',
            'doc': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'docx': 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'xls': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'xlsx': 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'ppt': 'application/vnd.ms-powerpoint',
            'pptx': 'application/vnd.ms-powerpoint',
            'txt': 'text/plain',
            'pdf': 'application/pdf',
            'mp4': 'video/mp4',
            'mov': 'video/mp4'
        };
        return result.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        (dataItem) => {
            /** @type {?} */
            const suffix = dataItem.name.substring(dataItem.name.lastIndexOf('.') + 1);
            return {
                file: new File([], dataItem.name, { type: fileTypes[suffix.toLowerCase()] }),
                content: `${fileHeaders[suffix.toLowerCase()]}${dataItem.base64}`
            };
        }));
    }
    /**
     * 预处理视频
     * @param {?} result
     * @return {?}
     */
    processVideo(result) {
        /** @type {?} */
        const url = result.value;
        /** @type {?} */
        const base64value = result.base64value;
        /** @type {?} */
        const videoHeader = 'data:video/mp4;base64,';
        /** @type {?} */
        const videoType = 'video/mp4';
        /** @type {?} */
        const videoName = url.substring(url.lastIndexOf('/') + 1) + '.mp4';
        return {
            file: new File([], videoName, { type: videoType }),
            content: `${videoHeader}${base64value}`,
            type: videoType,
            url,
            name: url.substring(url.lastIndexOf('/') + 1) + '.mp4'
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.jsBrigdeService;
    /**
     * @type {?}
     * @private
     */
    CloudPlusTakePhoto.prototype.collectFile;
}
//# sourceMappingURL=data:application/json;base64,