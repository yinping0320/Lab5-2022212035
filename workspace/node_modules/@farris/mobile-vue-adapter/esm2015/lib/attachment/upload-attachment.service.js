/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment/upload-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpMethods } from '@farris/mobile-devkit';
import { forkJoin } from 'rxjs';
import { map, mergeMap } from 'rxjs/operators';
import { getToken, mergeString } from '../utils';
export class UploadAttachmentService {
    /**
     * @param {?} befRepository
     */
    constructor(befRepository) {
        this.befRepository = befRepository;
    }
    /**
     * 缓存附件
     * @param {?} originFiles
     * @param {?} uploadInfo
     * @return {?}
     */
    upload(originFiles, uploadInfo) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const uploadUrl = `/api/runtime/dfs/v1.0/formdoc`;
        /** @type {?} */
        const parametersArr = originFiles.map((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            return {
                docInfo: {
                    fileContent: ele.content.substring(ele.content.indexOf(',') + 1),
                    fileName: ele.file.name,
                    index: 0,
                    total: 1,
                    metadataId: ele.id
                },
                formId: uploadInfo.parentDirName,
                mode: 1,
                rootId: uploadInfo.rootId || 'default-root'
            };
        }));
        /** @type {?} */
        const requestList = parametersArr.map((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            /** @type {?} */
            const params = { body: ele };
            return apiProxy.request(HttpMethods.POST, uploadUrl, params, true);
        }));
        return forkJoin(requestList);
    }
    /**
     * 预览附件pdf
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    previewPdf(rootId, metadataIdList) {
        /** @type {?} */
        const baseUrl = '/platform/runtime/dfs/web/pdfjs/viewer.html?file=';
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        const params = {
            storageType: 2, filePath: JSON.stringify({
                rootId,
                metadataIdList
            })
        };
        /** @type {?} */
        const body = { body: params };
        // 预览
        return apiProxy.request(HttpMethods.POST, fileListUrl, body).pipe(map((/**
         * @param {?} res
         * @return {?}
         */
        res => baseUrl + encodeURIComponent(res[0].filePath))));
    }
    /**
     * 预览office txt文档
     * @param {?} rootId
     * @param {?} metadataIdList
     * @return {?}
     */
    previewDoc(rootId, metadataIdList) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const fileListUrl = '/api/runtime/dfs/v1.0/fileviewer/filelist';
        /** @type {?} */
        const loadDocUrl = '/api/runtime/dfs/v1.0/docviewer/loaddocument';
        /** @type {?} */
        const params = {
            storageType: 2, filePath: JSON.stringify({
                rootId,
                metadataIdList
            })
        };
        /** @type {?} */
        const body = { body: params };
        // 根据文件类型 调用不同的预览接口
        return apiProxy.request(HttpMethods.POST, fileListUrl, body)
            .pipe(mergeMap((/**
         * @param {?} res
         * @return {?}
         */
        res => apiProxy.request(HttpMethods.POST, loadDocUrl, { body: { filePath: res[0].filePath } }))), map((/**
         * @param {?} res
         * @return {?}
         */
        res => res.pages)));
    }
    /**
     * 获取图片url
     * @param {?} attachmentId  附件id
     * @param {?} rootId 根目录id
     * @return {?}
     */
    getAttachmentPath(attachmentId, rootId) {
        return `/api/runtime/dfs/v1.0/doc/filecontent?metadataid=${attachmentId}&rootid=${rootId}&token=${getToken(mergeString(attachmentId, rootId))}`;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    UploadAttachmentService.prototype.befRepository;
}
//# sourceMappingURL=data:application/json;base64,