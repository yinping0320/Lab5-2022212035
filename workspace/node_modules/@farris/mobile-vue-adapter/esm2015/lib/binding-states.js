/**
 * @fileoverview added by tsickle
 * Generated from: lib/binding-states.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { recompute } from './recompute';
/**
 * 绑定状态
 */
class BindingStates {
    /**
     * 构造函数
     * @param {?} vueInstance
     */
    constructor(vueInstance) {
        this.vueInstance = vueInstance;
        /** @type {?} */
        const viewModel = (/** @type {?} */ (this.vueInstance.$getViewModel()));
        this.viewModelContext = viewModel.context;
        this.subscriptionsMap = new Map();
    }
    /**
     * 映射实体列表数据
     * @return {?}
     */
    getEntityListData() {
        /** @type {?} */
        const stateName = 'entityListData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getList().toJSON();
    }
    /**
     * 映射当前实体数据
     * @return {?}
     */
    getCurrentEntityData() {
        /** @type {?} */
        const stateName = 'currentEntityData';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.bindingData.getObject().toJSON();
    }
    /**
     * 映射UIState数据
     * @return {?}
     */
    getUIState() {
        /** @type {?} */
        const stateName = 'uiState';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.uiState.changes.subscribe((/**
             * @return {?}
             */
            () => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.uiState;
    }
    /**
     * 映射表单
     * @return {?}
     */
    getForm() {
        /** @type {?} */
        const stateName = 'form';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.bindingData.changes.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                if (change && change.type === "ValueChanged") {
                    this.viewModelContext.form.getFieldErrorByPath(change.path);
                }
                recompute(this.vueInstance, stateName);
            }));
            /** @type {?} */
            const subscriptionV = this.viewModelContext.form.changes.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                if (data && data.type === 'validateFieldsFinished') {
                    recompute(this.vueInstance, stateName);
                }
                else if (data && data.type === 'singleHanded') {
                    /** @type {?} */
                    const index = this.vueInstance.$children.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    (item) => { return item.$attrs.id === `form_${data.value}`; }));
                    this.vueInstance.$children[index].$forceUpdate();
                }
            }));
            this.subscriptionsMap.set(stateName, subscription);
            this.subscriptionsMap.set(stateName + 'V', subscriptionV);
        }
        return this.vueInstance.$getViewModel().form;
    }
    /**
     * 映射状态机
     * @return {?}
     */
    getStateMachine() {
        /** @type {?} */
        const stateName = 'stateMachine';
        if (this.subscriptionsMap.has(stateName) === false) {
            /** @type {?} */
            const subscription = this.viewModelContext.stateMachine.stateChange.subscribe((/**
             * @param {?} change
             * @return {?}
             */
            (change) => {
                recompute(this.vueInstance, stateName);
            }));
            this.subscriptionsMap.set(stateName, subscription);
        }
        return this.viewModelContext.stateMachine.renderStates;
    }
}
if (false) {
    /**
     * Vue实例
     * @type {?}
     * @private
     */
    BindingStates.prototype.vueInstance;
    /**
     * Vue实例的ViewModelContext
     * @type {?}
     * @private
     */
    BindingStates.prototype.viewModelContext;
    /**
     * 订阅集合
     * @type {?}
     * @private
     */
    BindingStates.prototype.subscriptionsMap;
}
export { BindingStates };
//# sourceMappingURL=data:application/json;base64,