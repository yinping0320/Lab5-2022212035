/**
 * @fileoverview added by tsickle
 * Generated from: lib/lookup-mapping.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助映射服务
 */
export class LookupMappingService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 映射字段
     * \@summary
     * mapFields格式形如：
     * {
     *    id: "assoField.assoField",
     *    code: "assoField.assoField_Code",
     *    name: "assoField.assoField_Name"
     * }
     * @param {?} helpData
     * @param {?} mappingFields
     * @return {?}
     */
    mapFields(helpData, mappingFields) {
        console.log(helpData);
        if (!mappingFields) {
            return;
        }
        /** @type {?} */
        let helpFields = Object.keys(mappingFields);
        /** @type {?} */
        const idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        (item) => item === 'id'));
        if (helpFields.includes('id') && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = ['id', ...helpFields];
        }
        /** @type {?} */
        const that = this;
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        (f) => {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            let val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData
                        .map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    (h) => {
                        return this.getValue(f, h);
                    }))
                        .join(',');
                }
                else {
                    val = that.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            const pathArr = that.getBindingPathArray();
            mappingFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            (ff) => {
                if (!helpData) {
                }
                else {
                    that.viewModelContext.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
    }
    /**
     * 获取字段值
     * @param {?} fieldPath
     * @return {?}
     */
    getFieldValue(fieldPath) {
        /** @type {?} */
        const bindingPathArray = this.getBindingPathArray();
        /** @type {?} */
        const fieldPathArray = bindingPathArray.concat(fieldPath.split('.'));
        return this.viewModelContext.bindingData.getValue(fieldPathArray);
    }
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    getValue(f, data) {
        /** @type {?} */
        let val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => {
                return a[b];
            }), data);
        }
        return val;
    }
    /**
     * @private
     * @return {?}
     */
    getBindingPathArray() {
        /** @type {?} */
        const path = this.viewModelContext.bindingData.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n !== ''));
        }
        return [];
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupMappingService.prototype.viewModelContext;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLW1hcHBpbmcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLXZ1ZS1hZGFwdGVyLyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC1tYXBwaW5nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFLQSxNQUFNLE9BQU8sb0JBQW9COzs7O0lBRy9CLFlBQVksZ0JBQWtDO1FBQzVDLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztJQUMzQyxDQUFDOzs7Ozs7Ozs7Ozs7OztJQVlELFNBQVMsQ0FBQyxRQUFhLEVBQUUsYUFBa0I7UUFDekMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLE9BQU87U0FDUjs7WUFFRyxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUM7O2NBQ3JDLE9BQU8sR0FBRyxVQUFVLENBQUMsU0FBUzs7OztRQUFDLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFDO1FBQzdELElBQUksVUFBVSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEtBQUssQ0FBQyxFQUFFO1lBQzlDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDO1lBQzlCLFVBQVUsR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLFVBQVUsQ0FBQyxDQUFDO1NBQ3BDOztjQUNLLElBQUksR0FBRyxJQUFJO1FBQ2pCLFVBQVUsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTs7Ozs7Z0JBS3hCLEdBQUcsR0FBUSxFQUFFO1lBQ2pCLElBQUksUUFBUSxFQUFFO2dCQUNaLElBQUksUUFBUSxZQUFZLEtBQUssRUFBRTtvQkFDN0IsR0FBRyxHQUFHLFFBQVE7eUJBQ1gsR0FBRzs7OztvQkFBQyxDQUFDLENBQU0sRUFBRSxFQUFFO3dCQUNkLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQzdCLENBQUMsRUFBQzt5QkFDRCxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0wsR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDO2lCQUNsQzthQUNGOzs7OztrQkFLSyxPQUFPLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBTzs7OztZQUFDLENBQUMsRUFBTyxFQUFFLEVBQUU7Z0JBQzlDLElBQUksQ0FBQyxRQUFRLEVBQUU7aUJBQ2Q7cUJBQU07b0JBQ0wsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQ3hDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUM3QixHQUFHLEVBQ0gsSUFBSSxFQUNKLElBQUksQ0FDTCxDQUFDO2lCQUNIO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUVMLENBQUM7Ozs7OztJQUtNLGFBQWEsQ0FBQyxTQUFpQjs7Y0FDOUIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixFQUFFOztjQUM3QyxjQUFjLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDcEUsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNwRSxDQUFDOzs7Ozs7O0lBRU8sUUFBUSxDQUFDLENBQVMsRUFBRSxJQUFTOztZQUMvQixHQUFHLEdBQUcsRUFBRTtRQUNaLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUN6QixHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2Y7YUFBTTtZQUNMLEdBQUcsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2QsQ0FBQyxHQUFFLElBQUksQ0FBQyxDQUFDO1NBQ1Y7UUFDRCxPQUFPLEdBQUcsQ0FBQztJQUNiLENBQUM7Ozs7O0lBRU8sbUJBQW1COztjQUNuQixJQUFJLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxXQUFXO1FBQzFELElBQUksSUFBSSxFQUFFO1lBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLEVBQUUsRUFBQyxDQUFDO1NBQ2hEO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0NBQ0Y7Ozs7OztJQTlGQyxnREFBMkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuXHJcbi8qKlxyXG4gKiDluK7liqnmmKDlsITmnI3liqFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBNYXBwaW5nU2VydmljZSB7XHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pig5bCE5a2X5q61XHJcbiAgICogQHN1bW1hcnlcclxuICAgKiBtYXBGaWVsZHPmoLzlvI/lvaLlpoLvvJpcclxuICAgKiB7XHJcbiAgICogICAgaWQ6IFwiYXNzb0ZpZWxkLmFzc29GaWVsZFwiLFxyXG4gICAqICAgIGNvZGU6IFwiYXNzb0ZpZWxkLmFzc29GaWVsZF9Db2RlXCIsXHJcbiAgICogICAgbmFtZTogXCJhc3NvRmllbGQuYXNzb0ZpZWxkX05hbWVcIlxyXG4gICAqIH1cclxuICAgKi9cclxuICBtYXBGaWVsZHMoaGVscERhdGE6IGFueSwgbWFwcGluZ0ZpZWxkczogYW55KSB7XHJcbiAgICBjb25zb2xlLmxvZyhoZWxwRGF0YSk7XHJcbiAgICBpZiAoIW1hcHBpbmdGaWVsZHMpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBoZWxwRmllbGRzID0gT2JqZWN0LmtleXMobWFwcGluZ0ZpZWxkcyk7XHJcbiAgICBjb25zdCBpZEluZGV4ID0gaGVscEZpZWxkcy5maW5kSW5kZXgoKGl0ZW0pID0+IGl0ZW0gPT09ICdpZCcpO1xyXG4gICAgaWYgKGhlbHBGaWVsZHMuaW5jbHVkZXMoJ2lkJykgJiYgaWRJbmRleCAhPT0gMCkge1xyXG4gICAgICBoZWxwRmllbGRzLnNwbGljZShpZEluZGV4LCAxKTtcclxuICAgICAgaGVscEZpZWxkcyA9IFsnaWQnLCAuLi5oZWxwRmllbGRzXTtcclxuICAgIH1cclxuICAgIGNvbnN0IHRoYXQgPSB0aGlzO1xyXG4gICAgaGVscEZpZWxkcy5mb3JFYWNoKChmOiBhbnkpID0+IHtcclxuXHJcbiAgICAgIC8vIDHjgIHojrflj5blrZfmrrXlgLxcclxuICAgICAgLy8g5aaC5p6caGVscERhdGHmnInpgInkuK3lgLzvvIzliJnojrflj5bluK7liqnmlbDmja7mupDph4zlr7nlupTkvaDlrZfmrrXnmoTlgLzvvJtcclxuICAgICAgLy8g5aaC5p6caGVscERhdGHmsqHmnInlgLzvvIjmuIXnqbrlnLrmma/vvInvvIzliJnov5Tlm57kuIDkuKrnqbrlrZfnrKbkuLJcclxuICAgICAgbGV0IHZhbDogYW55ID0gJyc7XHJcbiAgICAgIGlmIChoZWxwRGF0YSkge1xyXG4gICAgICAgIGlmIChoZWxwRGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICB2YWwgPSBoZWxwRGF0YVxyXG4gICAgICAgICAgICAubWFwKChoOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShmLCBoKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLmpvaW4oJywnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdmFsID0gdGhhdC5nZXRWYWx1ZShmLCBoZWxwRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyAy44CB6K6+572u5a2X5q615YC8XHJcbiAgICAgIC8vIOWmguaenGhlbHBEYXRh5LiN5a2Y5Zyo77yI5riF56m65Zy65pmv77yJ77yM6I635Y+WQmluZGluZ0RhdGHph4zlr7nlupTlrZfmrrXnmoTlgLzvvIzlpoLmnpzmmK/mlbDlgLzvvIzliJnorr7nva4w77yM5YW25LuW6K6+572u5LiK5LiA5q2l5Lit55qE56m65a2X56ym5Liy77ybXHJcbiAgICAgIC8vIOWmguaenGhlbHBEYXRh5a2Y5Zyo77ya55u05o6l6K6+572u5LiK5LiA5q2l5Lit6I635Y+W55qE5YC844CCXHJcbiAgICAgIGNvbnN0IHBhdGhBcnIgPSB0aGF0LmdldEJpbmRpbmdQYXRoQXJyYXkoKTtcclxuICAgICAgbWFwcGluZ0ZpZWxkc1tmXS5zcGxpdCgnLCcpLmZvckVhY2goKGZmOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoIWhlbHBEYXRhKSB7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoYXQudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5zZXRWYWx1ZShcclxuICAgICAgICAgICAgcGF0aEFyci5jb25jYXQoZmYuc3BsaXQoJy4nKSksXHJcbiAgICAgICAgICAgIHZhbCxcclxuICAgICAgICAgICAgdHJ1ZSxcclxuICAgICAgICAgICAgdHJ1ZVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+W5a2X5q615YC8XHJcbiAgICovXHJcbiAgcHVibGljIGdldEZpZWxkVmFsdWUoZmllbGRQYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGJpbmRpbmdQYXRoQXJyYXkgPSB0aGlzLmdldEJpbmRpbmdQYXRoQXJyYXkoKTtcclxuICAgIGNvbnN0IGZpZWxkUGF0aEFycmF5ID0gYmluZGluZ1BhdGhBcnJheS5jb25jYXQoZmllbGRQYXRoLnNwbGl0KCcuJykpO1xyXG4gICAgcmV0dXJuIHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5nZXRWYWx1ZShmaWVsZFBhdGhBcnJheSk7XHJcbiAgfVxyXG5cclxuICBwcml2YXRlIGdldFZhbHVlKGY6IHN0cmluZywgZGF0YTogYW55KSB7XHJcbiAgICBsZXQgdmFsID0gJyc7XHJcbiAgICBpZiAoZi5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgIHZhbCA9IGRhdGFbZl07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2YWwgPSBmLnNwbGl0KCcuJykucmVkdWNlKChhLCBiKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGFbYl07XHJcbiAgICAgIH0sIGRhdGEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZhbDtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0QmluZGluZ1BhdGhBcnJheSgpOiBhbnlbXSB7XHJcbiAgICBjb25zdCBwYXRoID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmJpbmRpbmdEYXRhLmJpbmRpbmdQYXRoO1xyXG4gICAgaWYgKHBhdGgpIHtcclxuICAgICAgcmV0dXJuIHBhdGguc3BsaXQoJy8nKS5maWx0ZXIoKG4pID0+IG4gIT09ICcnKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbn1cclxuIl19