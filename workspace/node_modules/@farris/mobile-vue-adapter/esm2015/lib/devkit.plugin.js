/**
 * @fileoverview added by tsickle
 * Generated from: lib/devkit.plugin.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { App } from '@farris/mobile-devkit';
import { BindingStates } from './binding-states';
import { ComponentExtenderManager } from './component-extenders/index';
import { EventUtil } from './utils/index';
import formatUtils from './utils/format-uitl';
import { RouterService, HistoryBackService } from '@farris/mobile-command-services';
const ɵ0 = /**
 * @param {?} app
 * @param {?} options
 * @return {?}
 */
function (app, options) {
    /**
     * 注册事件
     * @todo：暂时强制绑定，暂时无法根据特性灵活区分
     */
    app.config.globalProperties.$on = (/**
     * @param {?} eventName
     * @param {?} eventHandler
     * @return {?}
     */
    function (eventName, eventHandler) {
        /** @type {?} */
        const vnodeProps = this._.vnode.props;
        /** @type {?} */
        const eventHandlerKey = EventUtil.toHandlerKey(eventName);
        /** @type {?} */
        const oldEventHandler = vnodeProps[eventHandlerKey];
        if (oldEventHandler) {
            vnodeProps[eventHandlerKey] = (/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                eventHandler($event);
                oldEventHandler($event);
            });
        }
        else {
            vnodeProps[eventHandlerKey] = eventHandler;
        }
    });
    /**
     * 清空事件注册
     * @todo：暂时强制清空
     */
    app.config.globalProperties.$off = (/**
     * @param {?} eventName
     * @return {?}
     */
    function (eventName) {
        /** @type {?} */
        const vnodeProps = this._.vnode.props;
        /** @type {?} */
        const eventHandlerKey = EventUtil.toHandlerKey(eventName);
        vnodeProps[eventHandlerKey] = null;
    });
    /**
     * 组件的App实例
     */
    app.config.globalProperties.$app = null;
    /**
     * 组件的ViewModel实例
     */
    app.config.globalProperties.$viewModel = null;
    /**
     * 绑定状态
     */
    app.config.globalProperties.$bindingStates = null;
    /**
     * 绑定状态
     */
    app.config.globalProperties.$componentExtenderManager = null;
    /**
     * 组件App工厂方法
     */
    app.config.globalProperties.$createApp = (/**
     * @param {?} appOptions
     * @return {?}
     */
    function (appOptions) {
        if (this.$app) {
            throw new Error('App已经存在');
        }
        /** @type {?} */
        const historyBackService = new HistoryBackService();
        historyBackService.init();
        historyBackService.proxyBack();
        this.$app = new App(appOptions);
        /**
         * @param {?} event
         * @return {?}
         */
        function receiveMessage(event) {
            /** @type {?} */
            const commandOptions = this.$app.context.injector.get('DECLARATIONS_TOKEN');
            /** @type {?} */
            var messageData = JSON.parse(event.data);
            /** @type {?} */
            const commandName = messageData.data.command;
            /** @type {?} */
            const command = commandOptions.commands[commandName];
            /** @type {?} */
            var origin = event.origin;
            /** @type {?} */
            var source = event.source;
            /** @type {?} */
            const viewModelContext = this.$app.context.viewModelContextManager.getContextById(command.viewModelId);
            if (!!viewModelContext) {
                /** @type {?} */
                const methodResult$ = viewModelContext.viewModel[command.command]();
                methodResult$.pipe((/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @return {?}
                 */
                () => {
                    window.parent && window.parent.postMessage('success', event.origin);
                }));
            }
        }
        if (!window['IsDddedMessageEventListener']) {
            window.addEventListener("message", receiveMessage.bind(this), false);
            window['IsDddedMessageEventListener'] = true;
        }
    });
    /**
     * 获取AppContext
     */
    app.config.globalProperties.$getApp = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let app = this.$app;
        /** @type {?} */
        let currentCmp = this;
        while (!app && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            app = currentCmp.$app;
        }
        return app;
    });
    /**
     * 组件ViewModel工厂方法
     */
    app.config.globalProperties.$createViewModel = (/**
     * @param {?} viewModelOptions
     * @return {?}
     */
    function (viewModelOptions) {
        this.$app = this.$getApp();
        if (!this.$app) {
            throw new Error('请先创建App');
        }
        // 如果viewModel已经存在，则使用已有的
        /** @type {?} */
        const viewModelId = viewModelOptions.id;
        if (viewModelId) {
            /** @type {?} */
            const existedViewModelContext = this.$app.context.viewModelContextManager.getContextById(viewModelId);
            if (existedViewModelContext) {
                this.$viewModel = existedViewModelContext.viewModel;
            }
        }
        // 如果viewModel不存在，则创建新的viewModel，并建立父子关系
        if (!this.$viewModel) {
            /** @type {?} */
            const parentViewModel = this.$getViewModel();
            if (!viewModelOptions.parent) {
                viewModelOptions.parent = parentViewModel;
            }
            this.$viewModel = this.$app.createViewModel(viewModelOptions);
        }
        // 设置绑定状态
        this.$bindingStates = new BindingStates(this);
        // 映射路由状态
        /** @type {?} */
        const routerService = this.$viewModel.injector.get(RouterService);
        routerService.mappingToUIState();
        // 根据路由参数清理卡片缓存数据
        if (this.$viewModel && this.$viewModel.uiState && this.$viewModel.uiState.routerState && this.$viewModel.uiState.routerState.queryParams && this.$viewModel.uiState.routerState.queryParams.clearCachedDataForCard) {
            //清一下bingdingdate上的东西
            this.$viewModel.context.bindingData.getList().currentId = null;
        }
        // 根据路由参数清理列表缓存数据
        if (this.$viewModel && this.$viewModel.uiState && this.$viewModel.uiState.routerState && this.$viewModel.uiState.routerState.queryParams && this.$viewModel.uiState.routerState.queryParams.clearCachedDataForList) {
            //清一下bingdingdate上的东西
            this.$viewModel.repository.entityCollection.clear();
        }
    });
    /**
     * 获取ViewModel
     */
    app.config.globalProperties.$getViewModel = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let currentCmp = this;
        /** @type {?} */
        let viewModel = currentCmp.$viewModel;
        while (!viewModel && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            viewModel = currentCmp.$viewModel;
        }
        return viewModel;
    });
    /**
     * 初始化组件扩展管理
     */
    app.config.globalProperties.$initComponentExtenderManager = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        const viewModel = this.$getViewModel();
        this.$componentExtenderManager = new ComponentExtenderManager(viewModel.context);
    });
    /**
     * 获取组件扩展管理器
     */
    app.config.globalProperties.$getComponentExtenderManager = (/**
     * @return {?}
     */
    function () {
        /** @type {?} */
        let currentCmp = this;
        /** @type {?} */
        let extenderManager = currentCmp.$componentExtenderManager;
        while (!extenderManager && currentCmp.$parent) {
            currentCmp = currentCmp.$parent;
            extenderManager = currentCmp.$componentExtenderManager;
        }
        return extenderManager;
    });
    app.config.globalProperties.$bindComponentExtenders = (/**
     * @param {?} refs
     * @return {?}
     */
    function (refs) {
        if (!this.$refs) {
            return;
        }
        /** @type {?} */
        const componentInstances = Object.values(this.$refs);
        componentInstances.forEach((/**
         * @param {?} componentInstance
         * @return {?}
         */
        (componentInstance) => {
            /** @type {?} */
            const componentType = componentInstance._.type.name;
            this.$bindComponentExtender(componentInstance, componentType);
        }));
    });
    /**
     * 绑定组件扩展器
     */
    app.config.globalProperties.$bindComponentExtender = (/**
     * @param {?} componentInstance
     * @param {?} componentType
     * @return {?}
     */
    function (componentInstance, componentType) {
        if (componentInstance.$__component_extended === true) {
            return;
        }
        /** @type {?} */
        const extenderManager = this.$getComponentExtenderManager();
        /** @type {?} */
        const extender = extenderManager.getExtender(componentInstance, componentType);
        if (extender) {
            extender.extend();
            componentInstance.$__component_extended === true;
        }
    });
    /**
     * 清理所有组件扩展器
     * @param refs
     */
    app.config.globalProperties.$unbindComponentExtenders = (/**
     * @param {?} refs
     * @return {?}
     */
    function (refs) {
        if (!this.$refs) {
            return;
        }
        /** @type {?} */
        const componentInstances = Object.values(this.$refs);
        componentInstances.forEach((/**
         * @param {?} componentInstance
         * @return {?}
         */
        (componentInstance) => {
            this.$unbindComponentExtender(componentInstance);
        }));
    });
    /**
     * 清理组件扩展器状态
     */
    app.config.globalProperties.$unbindComponentExtender = (/**
     * @param {?} componentInstance
     * @return {?}
     */
    function (componentInstance) {
        /** @type {?} */
        const extenderManager = this.$getComponentExtenderManager();
        /** @type {?} */
        const extender = extenderManager.getExtender(componentInstance);
        if (extender) {
            extender.dispose();
        }
    });
    app.config.globalProperties.$initPage = (/**
     * @param {?} viewModelOptions
     * @return {?}
     */
    function (viewModelOptions) {
        this.$createViewModel(viewModelOptions);
        this.$initComponentExtenderManager();
        this.$viewModel.uiState.pageTitle && this.$changeDocumentTitle(this.$viewModel.uiState.pageTitle);
        this.$initUistate();
    });
    app.config.globalProperties.$changeDocumentTitle = (/**
     * @param {?} title
     * @return {?}
     */
    function (title) {
        document.title = title || document.title;
    });
    /**
     * VUE上格式化工具类
     */
    app.config.globalProperties.$formatUtils = formatUtils;
    /**
     * 初始化uistate上记录的状态
     */
    app.config.globalProperties.$initUistate = (/**
     * @return {?}
     */
    function () {
        this.$viewModel.uiState.listaviewState = { refreshLoading: false, loadMoreLoading: false, loadMoreFinished: false };
        this.$viewModel.uiState.searchState = { keyword: '' };
        this.$viewModel.uiState.filterState = { filters: '', filterData: '' };
        this.$viewModel.uiState.tabState = { currentTab: '' };
    });
};
/** @type {?} */
const DevkitPlugin = {
    install: (ɵ0)
};
export { DevkitPlugin };
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,