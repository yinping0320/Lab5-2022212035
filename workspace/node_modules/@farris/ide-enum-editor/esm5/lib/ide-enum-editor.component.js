/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Output, EventEmitter, Input, ViewChild, TemplateRef, Injector, Renderer2, ElementRef, ChangeDetectorRef } from '@angular/core';
import { DatagridComponent } from '@farris/ui-datagrid';
import { NotifyService } from '@farris/ui-notify';
/**
 * @record
 */
export function EnumData() { }
if (false) {
    /** @type {?} */
    EnumData.prototype.id;
    /** @type {?} */
    EnumData.prototype.value;
    /** @type {?} */
    EnumData.prototype.name;
}
var IdeEnumEditorComponent = /** @class */ (function () {
    function IdeEnumEditorComponent(notifyService, injector, render, el, cd) {
        this.notifyService = notifyService;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.cd = cd;
        this.closeModal = new EventEmitter();
        // 模态框确定后关闭，并传递参数
        this.submitModal = new EventEmitter();
        // 枚举数组
        this.editorParams = {};
        this.valueChange = new EventEmitter();
        this.modalConfig = {
            title: '枚举编辑器',
            width: 900,
            height: 500,
            showButtons: true
        };
        this.columns = [];
    }
    /**
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.columns = [
            { field: 'name', title: '名称', width: 100, template: this.nameTemp },
            { field: 'value', title: '值', width: 100, template: this.valueTemp },
            { title: '操作', width: 100, template: this.activeTemp, halign: 'center', align: 'center' }
        ];
        if (!this.value || this.value.length === 0) {
            this.value = [];
        }
        else {
            this.value = this.value.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                return tslib_1.__assign({ id: i + 1 }, n);
            }));
        }
        this.render.addClass(this.el.nativeElement, 'f-utils-absolute-all');
        this.render.addClass(this.el.nativeElement, 'f-utils-flex-column');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @private
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.map2EnumData = /**
     * @private
     * @return {?}
     */
    function () {
        return this.value.map((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return {
                name: v.name,
                value: v.value
            };
        }));
    };
    /**
     * @private
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.changeEmit = /**
     * @private
     * @return {?}
     */
    function () {
        this.cd.detectChanges();
        this.valueChange.emit(this.value);
    };
    /**
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.clickCancel = /**
     * @return {?}
     */
    function () {
        this.closeModal.emit();
    };
    /**
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.clickConfirm = /**
     * @return {?}
     */
    function () {
        if (!this.checkBeforeSave()) {
            return;
        }
        /** @type {?} */
        var enumData = this.map2EnumData();
        this.submitModal.emit({ value: enumData });
    };
    /**
     * 保存前检查
     */
    /**
     * 保存前检查
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.checkBeforeSave = /**
     * 保存前检查
     * @return {?}
     */
    function () {
        var e_1, _a;
        /** @type {?} */
        var msg = {
            type: 'warning',
            title: '系统提示',
            msg: '请添加枚举值。',
            timeout: 3000
        };
        // ① 空
        if (!this.value || this.value.length === 0) {
            this.notifyService.warning(msg);
            return false;
        }
        try {
            // ② 非空，则校验每个的键值是否为空；
            for (var _b = tslib_1.__values(this.value), _c = _b.next(); !_c.done; _c = _b.next()) {
                var item = _c.value;
                if (!item.name || !item.value) {
                    msg.msg = '枚举值和枚举名称均不允许为空。';
                    this.notifyService.warning(msg);
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        // ③ 键不允许重复；
        /** @type {?} */
        var enumKeys = this.value.map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.value; }));
        /** @type {?} */
        var keySet = new Set(enumKeys);
        /** @type {?} */
        var exclusiveKeys = Array.from(keySet);
        if (enumKeys.length !== exclusiveKeys.length) {
            msg.msg = '枚举值不允许重复。';
            return false;
        }
        // ③ 值不允许重复；
        /** @type {?} */
        var enumNames = this.value.map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.name; }));
        /** @type {?} */
        var nameSet = new Set(enumNames);
        /** @type {?} */
        var exclusiveNames = Array.from(nameSet);
        if (enumNames.length !== exclusiveNames.length) {
            msg.msg = '枚举名称不允许重复。';
            this.notifyService.warning(msg);
            return false;
        }
        return true;
    };
    /**
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.add = /**
     * @return {?}
     */
    function () {
        this.value = tslib_1.__spread(this.value, [{ id: (this.value.length + 1), name: '', value: '' }]);
        this.changeEmit();
    };
    /**
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.remove = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rows = this.dg.checkeds;
        if (rows && rows.length) {
            this.value = this.value.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                return rows.findIndex((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) { return r.id === v.id; })) === -1;
            }));
            this.changeEmit();
        }
        else {
            this.notifyService.warning('请钩选要删除的数据！');
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.deleteItem = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return v.id !== id;
        }));
        this.changeEmit();
    };
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.moveTop = /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function ($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        var i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === id; }));
        // const i = index;
        this.value.unshift(this.value[i]);
        this.value.splice(i + 1, 1);
        this.value = tslib_1.__spread(this.value);
        this.changeEmit();
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.moveBottom = /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function ($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        var i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === id; }));
        // const i = index;
        this.value.push(this.value[i]);
        this.value.splice(i, 1);
        this.value = tslib_1.__spread(this.value);
        this.changeEmit();
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.moveUp = /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function ($event, id, index) {
        var _a;
        $event.stopPropagation();
        /** @type {?} */
        var i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === id; }));
        // const i = index;
        if (i !== 0) {
            /** @type {?} */
            var tempArr = this.value.splice(i, 1);
            (_a = this.value).splice.apply(_a, tslib_1.__spread([i - 1, 0], tempArr));
            this.value = tslib_1.__spread(this.value);
            this.changeEmit();
        }
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    IdeEnumEditorComponent.prototype.moveDown = /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    function ($event, id, index) {
        var _a;
        $event.stopPropagation();
        /** @type {?} */
        var len = this.value.length;
        /** @type {?} */
        var i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === id; }));
        // const i = index;
        if (i !== len - 1) {
            /** @type {?} */
            var tempArr = this.value.splice(i, 1);
            (_a = this.value).splice.apply(_a, tslib_1.__spread([i + 1, 0], tempArr));
            this.value = tslib_1.__spread(this.value);
            this.changeEmit();
        }
        return false;
    };
    IdeEnumEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ide-enum-editor',
                    template: "\n    <div class=\"border-bottom mb-1 py-1\">\n        <button class=\"btn btn-primary mr-1 ml-2\" (click)=\"add()\"> \u65B0\u589E</button>\n        <button class=\"btn btn-default mr-1\" (click)=\"remove()\">\u5220\u9664</button>\n    </div>\n    <div class=\"d-flex flex-column flex-fill\">\n        <farris-datagrid #dg [idField]=\"'id'\"\n            [columns]=\"columns\" [sizeType]=\"'md'\" [showAllCheckbox]=\"true\"\n            [striped]=\"false\" [showCheckbox]=\"true\" [multiSelect]=\"true\"\n            [data]=\"value\" [fit]=\"true\" [fitColumns]=\"true\"\n            [showBorder]=\"true\" [pagination]=\"false\"\n            [selectOnCheck]=\"false\" [checkOnSelect]=\"false\"\n        ></farris-datagrid>\n\n        <ng-template #nameTemp let-ctx>\n            <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\n                <input type=\"text\" class=\"form-control\" name=\"name\" [(ngModel)]=\"ctx.rowData['name']\">\n            </div>\n        </ng-template>\n        <ng-template #valueTemp let-ctx>\n            <div class=\"f-datagrid-cell-formgroup farris-group-auto\">\n                <input type=\"text\" class=\"form-control\" [(ngModel)]=\"ctx.rowData['value']\" name=\"value\">\n            </div>\n        </ng-template>\n\n        <ng-template #activeTemp let-ctx>\n            <button type=\"button\" class=\"btn btn-warning  mr-1\" (click)=\"deleteItem(ctx.rowData.id)\">\u5220\u9664</button>\n            <button class=\"btn btn-info mr-1\" style=\"padding: 2px 5px\" (click)=\"moveTop($event, ctx.rowData.id, ctx.rowIndex)\" title=\"\u7F6E\u9876\">\n                <span class=\"f-icon f-icon-roofing\"></span>\n            </button>\n            <button class=\"btn btn-info mr-1\" style=\"padding: 2px 5px\" (click)=\"moveUp($event, ctx.rowData.id, ctx.rowIndex)\" title=\"\u4E0A\u79FB\">\n                <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\n            </button>\n            <button class=\"btn btn-info mr-1\"  style=\"padding: 2px 5px\" (click)=\"moveDown($event, ctx.rowData.id, ctx.rowIndex)\" title=\"\u4E0B\u79FB\">\n                <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\n            </button>\n            <button class=\"btn btn-info mr-1\" style=\"padding: 2px 5px\" (click)=\"moveBottom($event, ctx.rowData.id, ctx.rowIndex)\" title=\"\u7F6E\u5E95\">\n                <span class=\"f-icon f-icon-bottomsetting\"></span>\n            </button>\n        </ng-template>\n\n    </div>\n    <ng-template #enumFooter>\n        <div class=\"btns\">\n            <button type=\"button\" class=\"btn btn-outline-secondary btn-sm px-3\" (click)=\"clickCancel()\" > \u53D6\u6D88 </button>\n            &nbsp;&nbsp;\n            <button  type=\"button\"  class=\"btn btn-outline-primary btn-sm px-3\" (click)=\"clickConfirm()\" > \u786E\u5B9A </button>\n        </div>\n    </ng-template>\n    "
                }] }
    ];
    /** @nocollapse */
    IdeEnumEditorComponent.ctorParameters = function () { return [
        { type: NotifyService },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    IdeEnumEditorComponent.propDecorators = {
        closeModal: [{ type: Output }],
        submitModal: [{ type: Output }],
        value: [{ type: Input }],
        editorParams: [{ type: Input }],
        modalFooter: [{ type: ViewChild, args: ['enumFooter',] }],
        dg: [{ type: ViewChild, args: ['dg',] }],
        nameTemp: [{ type: ViewChild, args: ['nameTemp',] }],
        valueTemp: [{ type: ViewChild, args: ['valueTemp',] }],
        activeTemp: [{ type: ViewChild, args: ['activeTemp',] }],
        valueChange: [{ type: Output }]
    };
    return IdeEnumEditorComponent;
}());
export { IdeEnumEditorComponent };
if (false) {
    /** @type {?} */
    IdeEnumEditorComponent.prototype.closeModal;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.submitModal;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.value;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.editorParams;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.modalFooter;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.dg;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.nameTemp;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.valueTemp;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.activeTemp;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.valueChange;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.modalConfig;
    /** @type {?} */
    IdeEnumEditorComponent.prototype.columns;
    /**
     * @type {?}
     * @private
     */
    IdeEnumEditorComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    IdeEnumEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    IdeEnumEditorComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    IdeEnumEditorComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    IdeEnumEditorComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,