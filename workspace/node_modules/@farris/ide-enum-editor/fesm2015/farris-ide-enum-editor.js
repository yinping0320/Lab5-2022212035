import { EventEmitter, Component, Injector, Renderer2, ElementRef, ChangeDetectorRef, Output, Input, ViewChild, NgModule } from '@angular/core';
import { DatagridModule } from '@farris/ui-datagrid';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IdeEnumEditorComponent {
    /**
     * @param {?} notifyService
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} cd
     */
    constructor(notifyService, injector, render, el, cd) {
        this.notifyService = notifyService;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.cd = cd;
        this.closeModal = new EventEmitter();
        // 模态框确定后关闭，并传递参数
        this.submitModal = new EventEmitter();
        // 枚举数组
        this.editorParams = {};
        this.valueChange = new EventEmitter();
        this.modalConfig = {
            title: '枚举编辑器',
            width: 900,
            height: 500,
            showButtons: true
        };
        this.columns = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.columns = [
            { field: 'name', title: '名称', width: 100, template: this.nameTemp },
            { field: 'value', title: '值', width: 100, template: this.valueTemp },
            { title: '操作', width: 100, template: this.activeTemp, halign: 'center', align: 'center' }
        ];
        if (!this.value || this.value.length === 0) {
            this.value = [];
        }
        else {
            this.value = this.value.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                return Object.assign({ id: i + 1 }, n);
            }));
        }
        this.render.addClass(this.el.nativeElement, 'f-utils-absolute-all');
        this.render.addClass(this.el.nativeElement, 'f-utils-flex-column');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @private
     * @return {?}
     */
    map2EnumData() {
        return this.value.map((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            return {
                name: v.name,
                value: v.value
            };
        }));
    }
    /**
     * @private
     * @return {?}
     */
    changeEmit() {
        this.cd.detectChanges();
        this.valueChange.emit(this.value);
    }
    /**
     * @return {?}
     */
    clickCancel() {
        this.closeModal.emit();
    }
    /**
     * @return {?}
     */
    clickConfirm() {
        if (!this.checkBeforeSave()) {
            return;
        }
        /** @type {?} */
        const enumData = this.map2EnumData();
        this.submitModal.emit({ value: enumData });
    }
    /**
     * 保存前检查
     * @return {?}
     */
    checkBeforeSave() {
        /** @type {?} */
        const msg = {
            type: 'warning',
            title: '系统提示',
            msg: '请添加枚举值。',
            timeout: 3000
        };
        // ① 空
        if (!this.value || this.value.length === 0) {
            this.notifyService.warning(msg);
            return false;
        }
        // ② 非空，则校验每个的键值是否为空；
        for (const item of this.value) {
            if (!item.name || !item.value) {
                msg.msg = '枚举值和枚举名称均不允许为空。';
                this.notifyService.warning(msg);
                return false;
            }
        }
        // ③ 键不允许重复；
        /** @type {?} */
        const enumKeys = this.value.map((/**
         * @param {?} e
         * @return {?}
         */
        e => e.value));
        /** @type {?} */
        const keySet = new Set(enumKeys);
        /** @type {?} */
        const exclusiveKeys = Array.from(keySet);
        if (enumKeys.length !== exclusiveKeys.length) {
            msg.msg = '枚举值不允许重复。';
            return false;
        }
        // ③ 值不允许重复；
        /** @type {?} */
        const enumNames = this.value.map((/**
         * @param {?} e
         * @return {?}
         */
        e => e.name));
        /** @type {?} */
        const nameSet = new Set(enumNames);
        /** @type {?} */
        const exclusiveNames = Array.from(nameSet);
        if (enumNames.length !== exclusiveNames.length) {
            msg.msg = '枚举名称不允许重复。';
            this.notifyService.warning(msg);
            return false;
        }
        return true;
    }
    /**
     * @return {?}
     */
    add() {
        this.value = [...this.value, { id: (this.value.length + 1), name: '', value: '' }];
        this.changeEmit();
    }
    /**
     * @return {?}
     */
    remove() {
        /** @type {?} */
        const rows = this.dg.checkeds;
        if (rows && rows.length) {
            this.value = this.value.filter((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                return rows.findIndex((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => r.id === v.id)) === -1;
            }));
            this.changeEmit();
        }
        else {
            this.notifyService.warning('请钩选要删除的数据！');
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    deleteItem(id) {
        this.value = this.value.filter((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            return v.id !== id;
        }));
        this.changeEmit();
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    moveTop($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        const i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === id));
        // const i = index;
        this.value.unshift(this.value[i]);
        this.value.splice(i + 1, 1);
        this.value = [...this.value];
        this.changeEmit();
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    moveBottom($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        const i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === id));
        // const i = index;
        this.value.push(this.value[i]);
        this.value.splice(i, 1);
        this.value = [...this.value];
        this.changeEmit();
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    moveUp($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        const i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === id));
        // const i = index;
        if (i !== 0) {
            /** @type {?} */
            const tempArr = this.value.splice(i, 1);
            this.value.splice(i - 1, 0, ...tempArr);
            this.value = [...this.value];
            this.changeEmit();
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} id
     * @param {?} index
     * @return {?}
     */
    moveDown($event, id, index) {
        $event.stopPropagation();
        /** @type {?} */
        const len = this.value.length;
        /** @type {?} */
        const i = this.value.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === id));
        // const i = index;
        if (i !== len - 1) {
            /** @type {?} */
            const tempArr = this.value.splice(i, 1);
            this.value.splice(i + 1, 0, ...tempArr);
            this.value = [...this.value];
            this.changeEmit();
        }
        return false;
    }
}
IdeEnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ide-enum-editor',
                template: `
    <div class="border-bottom mb-1 py-1">
        <button class="btn btn-primary mr-1 ml-2" (click)="add()"> 新增</button>
        <button class="btn btn-default mr-1" (click)="remove()">删除</button>
    </div>
    <div class="d-flex flex-column flex-fill">
        <farris-datagrid #dg [idField]="'id'"
            [columns]="columns" [sizeType]="'md'" [showAllCheckbox]="true"
            [striped]="false" [showCheckbox]="true" [multiSelect]="true"
            [data]="value" [fit]="true" [fitColumns]="true"
            [showBorder]="true" [pagination]="false"
            [selectOnCheck]="false" [checkOnSelect]="false"
        ></farris-datagrid>

        <ng-template #nameTemp let-ctx>
            <div class="f-datagrid-cell-formgroup farris-group-auto">
                <input type="text" class="form-control" name="name" [(ngModel)]="ctx.rowData['name']">
            </div>
        </ng-template>
        <ng-template #valueTemp let-ctx>
            <div class="f-datagrid-cell-formgroup farris-group-auto">
                <input type="text" class="form-control" [(ngModel)]="ctx.rowData['value']" name="value">
            </div>
        </ng-template>

        <ng-template #activeTemp let-ctx>
            <button type="button" class="btn btn-warning  mr-1" (click)="deleteItem(ctx.rowData.id)">删除</button>
            <button class="btn btn-info mr-1" style="padding: 2px 5px" (click)="moveTop($event, ctx.rowData.id, ctx.rowIndex)" title="置顶">
                <span class="f-icon f-icon-roofing"></span>
            </button>
            <button class="btn btn-info mr-1" style="padding: 2px 5px" (click)="moveUp($event, ctx.rowData.id, ctx.rowIndex)" title="上移">
                <span class="f-icon f-icon-arrow-chevron-up"></span>
            </button>
            <button class="btn btn-info mr-1"  style="padding: 2px 5px" (click)="moveDown($event, ctx.rowData.id, ctx.rowIndex)" title="下移">
                <span class="f-icon f-icon-arrow-chevron-down"></span>
            </button>
            <button class="btn btn-info mr-1" style="padding: 2px 5px" (click)="moveBottom($event, ctx.rowData.id, ctx.rowIndex)" title="置底">
                <span class="f-icon f-icon-bottomsetting"></span>
            </button>
        </ng-template>

    </div>
    <ng-template #enumFooter>
        <div class="btns">
            <button type="button" class="btn btn-outline-secondary btn-sm px-3" (click)="clickCancel()" > 取消 </button>
            &nbsp;&nbsp;
            <button  type="button"  class="btn btn-outline-primary btn-sm px-3" (click)="clickConfirm()" > 确定 </button>
        </div>
    </ng-template>
    `
            }] }
];
/** @nocollapse */
IdeEnumEditorComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
IdeEnumEditorComponent.propDecorators = {
    closeModal: [{ type: Output }],
    submitModal: [{ type: Output }],
    value: [{ type: Input }],
    editorParams: [{ type: Input }],
    modalFooter: [{ type: ViewChild, args: ['enumFooter',] }],
    dg: [{ type: ViewChild, args: ['dg',] }],
    nameTemp: [{ type: ViewChild, args: ['nameTemp',] }],
    valueTemp: [{ type: ViewChild, args: ['valueTemp',] }],
    activeTemp: [{ type: ViewChild, args: ['activeTemp',] }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class IdeEnumEditorModule {
}
IdeEnumEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [IdeEnumEditorComponent],
                imports: [
                    CommonModule,
                    FormsModule,
                    DatagridModule,
                    NotifyModule.forRoot()
                ],
                exports: [IdeEnumEditorComponent]
            },] }
];

export { IdeEnumEditorComponent, IdeEnumEditorModule };
//# sourceMappingURL=farris-ide-enum-editor.js.map
