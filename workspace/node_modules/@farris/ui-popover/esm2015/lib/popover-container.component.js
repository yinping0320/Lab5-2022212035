/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectionStrategy, Input, Component, Optional, ViewChild, ElementRef } from '@angular/core';
import { PopoverConfig } from './popover.config';
import { isBs3 } from '@farris/ui-modal/utils';
import { Subject } from 'rxjs';
export class PopoverContainerComponent {
    /**
     * @param {?} config
     * @param {?} el
     */
    constructor(config, el) {
        this.el = el;
        this.mounseState = new Subject();
        Object.assign(this, config);
    }
    /**
     * @return {?}
     */
    get isBs3() {
        return isBs3();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.el) {
            this.mouseenterEvent = this.changeMouseState.bind(this, true);
            this.mouseleaveEvent = this.changeMouseState.bind(this, false);
            this.el.nativeElement.addEventListener('mouseenter', this.mouseenterEvent);
            this.el.nativeElement.addEventListener('mouseleave', this.mouseleaveEvent);
        }
    }
    /**
     * 获取鼠标变化状态
     * @return {?}
     */
    getMouseState() {
        return this.mounseState;
    }
    /**
     * 绑定的事件
     * @private
     * @param {?} state
     * @return {?}
     */
    changeMouseState(state) {
        this.mounseState.next(state);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.mouseenterEvent) {
            this.el.nativeElement.removeEventListener('mouseenter', this.mouseenterEvent);
        }
        if (this.mouseleaveEvent) {
            this.el.nativeElement.removeEventListener('mouseleave', this.mouseleaveEvent);
        }
        this.mounseState.unsubscribe();
    }
}
PopoverContainerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-popover',
                changeDetection: ChangeDetectionStrategy.OnPush,
                // tslint:disable-next-line
                host: {
                    '[class]': '"popover in popover-" + placement + " " + "bs-popover-" + placement + " " + placement + " " + containerClass',
                    '[class.show]': '!isBs3',
                    '[class.bs3]': 'isBs3',
                    role: 'tooltip',
                    style: 'display:block;'
                },
                template: "<div class=\"popover-arrow arrow\"></div>\r\n<h3 class=\"popover-title popover-header\" *ngIf=\"title\">{{ title }}</h3>\r\n<div #innerEle class=\"popover-content popover-body\" [ngClass]=\"containerClass\">\r\n  <ng-content></ng-content>\r\n</div>\r\n",
                styles: [`
    :host.bs3.popover-top {
      margin-bottom: 10px;
    }
    :host.bs3.popover.top>.arrow {
      margin-left: -2px;
    }
    :host.bs3.popover.top {
      margin-bottom: 10px;
    }
    :host.popover.bottom>.arrow {
      margin-left: -4px;
    }
    :host.bs3.bs-popover-left {
      margin-right: .5rem;
    }
    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{
      margin: .3rem 0;
    }
    :host.arrow-left .arrow {
        left: calc(50% - 10px);
    }
    `]
            }] }
];
/** @nocollapse */
PopoverContainerComponent.ctorParameters = () => [
    { type: PopoverConfig },
    { type: ElementRef, decorators: [{ type: Optional }] }
];
PopoverContainerComponent.propDecorators = {
    innerNode: [{ type: ViewChild, args: ['innerEle', { read: ElementRef },] }],
    placement: [{ type: Input }],
    title: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    PopoverContainerComponent.prototype.innerNode;
    /** @type {?} */
    PopoverContainerComponent.prototype.placement;
    /** @type {?} */
    PopoverContainerComponent.prototype.title;
    /** @type {?} */
    PopoverContainerComponent.prototype.containerClass;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseenterEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mouseleaveEvent;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.mounseState;
    /**
     * @type {?}
     * @private
     */
    PopoverContainerComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9wb3Zlci1jb250YWluZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1wb3BvdmVyLyIsInNvdXJjZXMiOlsibGliL3BvcG92ZXItY29udGFpbmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLHVCQUF1QixFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQThDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZKLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQXlDM0MsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7SUFhbEMsWUFBWSxNQUFxQixFQUFzQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQU43RCxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFPekMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQU5ELElBQUksS0FBSztRQUNMLE9BQU8sS0FBSyxFQUFFLENBQUM7SUFDbkIsQ0FBQzs7OztJQU1ELGVBQWU7UUFDWCxJQUFJLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDVCxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzlELElBQUksQ0FBQyxlQUFlLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0QsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUMzRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDO1NBQzlFO0lBQ0wsQ0FBQzs7Ozs7SUFJRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzVCLENBQUM7Ozs7Ozs7SUFLTyxnQkFBZ0IsQ0FBQyxLQUFLO1FBQzFCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUM7U0FDakY7UUFDRCxJQUFJLElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDdEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQztTQUNqRjtRQUNELElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDbkMsQ0FBQzs7O1lBdEZKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO2dCQUMxQixlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTs7Z0JBRS9DLElBQUksRUFBRTtvQkFDRixTQUFTLEVBQ0wsOEdBQThHO29CQUNsSCxjQUFjLEVBQUUsUUFBUTtvQkFDeEIsYUFBYSxFQUFFLE9BQU87b0JBQ3RCLElBQUksRUFBRSxTQUFTO29CQUNmLEtBQUssRUFBRSxnQkFBZ0I7aUJBQzFCO2dCQTBCRCx3UUFBaUQ7eUJBeEI3Qzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQXNCSDthQUdKOzs7O1lBMUNRLGFBQWE7WUFEbUQsVUFBVSx1QkF5RDNDLFFBQVE7Ozt3QkFaM0MsU0FBUyxTQUFDLFVBQVUsRUFBRSxFQUFFLElBQUksRUFBRSxVQUFVLEVBQUU7d0JBQzFDLEtBQUs7b0JBQ0wsS0FBSzs7OztJQUZOLDhDQUFtRTs7SUFDbkUsOENBQTJCOztJQUMzQiwwQ0FBdUI7O0lBQ3ZCLG1EQUF1Qjs7Ozs7SUFDdkIsb0RBQTZCOzs7OztJQUM3QixvREFBNkI7Ozs7O0lBQzdCLGdEQUE2Qzs7Ozs7SUFNVix1Q0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgSW5wdXQsIENvbXBvbmVudCwgT3B0aW9uYWwsIFZpZXdDaGlsZCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFBvcG92ZXJDb25maWcgfSBmcm9tICcuL3BvcG92ZXIuY29uZmlnJztcclxuaW1wb3J0IHsgaXNCczMgfSBmcm9tICdAZmFycmlzL3VpLW1vZGFsL3V0aWxzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1wb3BvdmVyJyxcclxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXHJcbiAgICBob3N0OiB7XHJcbiAgICAgICAgJ1tjbGFzc10nOlxyXG4gICAgICAgICAgICAnXCJwb3BvdmVyIGluIHBvcG92ZXItXCIgKyBwbGFjZW1lbnQgKyBcIiBcIiArIFwiYnMtcG9wb3Zlci1cIiArIHBsYWNlbWVudCArIFwiIFwiICsgcGxhY2VtZW50ICsgXCIgXCIgKyBjb250YWluZXJDbGFzcycsXHJcbiAgICAgICAgJ1tjbGFzcy5zaG93XSc6ICchaXNCczMnLFxyXG4gICAgICAgICdbY2xhc3MuYnMzXSc6ICdpc0JzMycsXHJcbiAgICAgICAgcm9sZTogJ3Rvb2x0aXAnLFxyXG4gICAgICAgIHN0eWxlOiAnZGlzcGxheTpibG9jazsnXHJcbiAgICB9LFxyXG4gICAgc3R5bGVzOiBbXHJcbiAgICAgICAgYFxyXG4gICAgOmhvc3QuYnMzLnBvcG92ZXItdG9wIHtcclxuICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcclxuICAgIH1cclxuICAgIDpob3N0LmJzMy5wb3BvdmVyLnRvcD4uYXJyb3cge1xyXG4gICAgICBtYXJnaW4tbGVmdDogLTJweDtcclxuICAgIH1cclxuICAgIDpob3N0LmJzMy5wb3BvdmVyLnRvcCB7XHJcbiAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbiAgICB9XHJcbiAgICA6aG9zdC5wb3BvdmVyLmJvdHRvbT4uYXJyb3cge1xyXG4gICAgICBtYXJnaW4tbGVmdDogLTRweDtcclxuICAgIH1cclxuICAgIDpob3N0LmJzMy5icy1wb3BvdmVyLWxlZnQge1xyXG4gICAgICBtYXJnaW4tcmlnaHQ6IC41cmVtO1xyXG4gICAgfVxyXG4gICAgOmhvc3QuYnMzLmJzLXBvcG92ZXItcmlnaHQgLmFycm93LCA6aG9zdC5iczMuYnMtcG9wb3Zlci1sZWZ0IC5hcnJvd3tcclxuICAgICAgbWFyZ2luOiAuM3JlbSAwO1xyXG4gICAgfVxyXG4gICAgOmhvc3QuYXJyb3ctbGVmdCAuYXJyb3cge1xyXG4gICAgICAgIGxlZnQ6IGNhbGMoNTAlIC0gMTBweCk7XHJcbiAgICB9XHJcbiAgICBgXHJcbiAgICBdLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3BvcG92ZXItY29udGFpbmVyLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgUG9wb3ZlckNvbnRhaW5lckNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBAVmlld0NoaWxkKCdpbm5lckVsZScsIHsgcmVhZDogRWxlbWVudFJlZiB9KSBpbm5lck5vZGU6IEVsZW1lbnRSZWY7XHJcbiAgICBASW5wdXQoKSBwbGFjZW1lbnQ6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHRpdGxlOiBzdHJpbmc7XHJcbiAgICBjb250YWluZXJDbGFzczogc3RyaW5nO1xyXG4gICAgcHJpdmF0ZSBtb3VzZWVudGVyRXZlbnQ6IGFueTtcclxuICAgIHByaXZhdGUgbW91c2VsZWF2ZUV2ZW50OiBhbnk7XHJcbiAgICBwcml2YXRlIG1vdW5zZVN0YXRlID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcclxuXHJcbiAgICBnZXQgaXNCczMoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgcmV0dXJuIGlzQnMzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IoY29uZmlnOiBQb3BvdmVyQ29uZmlnLCBAT3B0aW9uYWwoKSBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5lbCkge1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlZW50ZXJFdmVudCA9IHRoaXMuY2hhbmdlTW91c2VTdGF0ZS5iaW5kKHRoaXMsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLm1vdXNlbGVhdmVFdmVudCA9IHRoaXMuY2hhbmdlTW91c2VTdGF0ZS5iaW5kKHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCB0aGlzLm1vdXNlZW50ZXJFdmVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5tb3VzZWxlYXZlRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W6byg5qCH5Y+Y5YyW54q25oCBXHJcbiAgICAgKi9cclxuICAgIGdldE1vdXNlU3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubW91bnNlU3RhdGU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIOe7keWumueahOS6i+S7tlxyXG4gICAgICogQHBhcmFtIHN0YXRlIFxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGNoYW5nZU1vdXNlU3RhdGUoc3RhdGUpIHtcclxuICAgICAgICB0aGlzLm1vdW5zZVN0YXRlLm5leHQoc3RhdGUpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1vdXNlZW50ZXJFdmVudCkge1xyXG4gICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsIHRoaXMubW91c2VlbnRlckV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMubW91c2VsZWF2ZUV2ZW50KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgdGhpcy5tb3VzZWxlYXZlRXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1vdW5zZVN0YXRlLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcbn1cclxuIl19