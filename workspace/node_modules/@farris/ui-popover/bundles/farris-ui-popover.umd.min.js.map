{"version":3,"sources":["ng://@farris/ui-popover/lib/popover.config.ts","ng://@farris/ui-popover/lib/popover-container.component.ts","ng://@farris/ui-popover/lib/popover.directive.ts","ng://@farris/ui-popover/lib/popover.module.ts"],"names":["PopoverConfig","Injectable","args","providedIn","this","placement","triggers","outsideClick","PopoverContainerComponent","Object","defineProperty","prototype","isBs3","ngAfterViewInit","el","mouseenterEvent","changeMouseState","bind","mouseleaveEvent","nativeElement","addEventListener","getMouseState","mounseState","state","next","ngOnDestroy","removeEventListener","unsubscribe","Component","selector","changeDetection","ChangeDetectionStrategy","OnPush","host","[class]","[class.show]","[class.bs3]","role","style","template","ElementRef","decorators","type","Optional","ViewChild","read","Input","config","Subject","assign","PopoverDirective","_popover","isShown","value","showAction","hide","hasScrollbarY","_bodyOverflow","getComputedStyle","document","body","overflow","scrollHeight","window","innerHeight","show","_this","popActive","popover","attach","to","container","position","attachment","showType","content","context","popoverContext","title","popoverTitle","containerClass","zIndex","commonUtils","getFloatingLayerIndex","instance","overlaySer","registerMouseEvent","_elementRef","e","target","contains","closest","subscribe","containerInOutState","show2","targetRef","targetTop","targetLeft","_a","getBoundingClientRect","hostWidth","height","width","top","left","_b","location","targetHeight","targetWidth","_renderer","addClass","postion","setStyles","element","paramsArr","keys","forEach","param","setStyle","_hide","destory","ngZone","isOpen","runOutsideAngular","setTimeout","toggle","ngOnInit","_isInited","isFixed","_positionService","setOptions","modifiers","preventOverflow","enabled","listen","dispose","Directive","exportAs","Renderer2","ViewContainerRef","ComponentLoaderFactory","PositioningService","Injector","Output","_config","_viewContainerRef","cis","inject","get","NgZone","OverLayHiddenService","CommonUtils","createLoader","provide","useValue","onShown","onHidden","focus","err","PopoverModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","FarrisCommonModule","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n/**\r\n * Configuration service for the Popover directive.\r\n * You can inject this service, typically in your root component, and customize\r\n * the values of its properties in order to provide default values for all the\r\n * popovers used in the application.\r\n */\r\n@Injectable(\r\n  {\r\n    providedIn: 'root'\r\n  }\r\n)\r\nexport class PopoverConfig {\r\n  /**\r\n   * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\", \"auto\"\r\n   */\r\n  placement = 'top';\r\n  /**\r\n   * Specifies events that should trigger. Supports a space separated list of\r\n   * event names.\r\n   */\r\n  triggers = 'click';\r\n\r\n  outsideClick = true;\r\n  /**\r\n   * A selector specifying the element the popover should be appended to.\r\n   */\r\n  container: string;\r\n}\r\n","import { ChangeDetectionStrategy, Input, Component, Optional, ViewChild, ElementRef, AfterViewChecked, AfterViewInit, OnDestroy } from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { isBs3 } from '@farris/ui-modal/utils';\r\nimport { Observable, Subject } from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'farris-popover',\r\n    changeDetection: ChangeDetectionStrategy.OnPush,\r\n    // tslint:disable-next-line\r\n    host: {\r\n        '[class]':\r\n            '\"popover in popover-\" + placement + \" \" + \"bs-popover-\" + placement + \" \" + placement + \" \" + containerClass',\r\n        '[class.show]': '!isBs3',\r\n        '[class.bs3]': 'isBs3',\r\n        role: 'tooltip',\r\n        style: 'display:block;'\r\n    },\r\n    styles: [\r\n        `\r\n    :host.bs3.popover-top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.bs3.popover.top>.arrow {\r\n      margin-left: -2px;\r\n    }\r\n    :host.bs3.popover.top {\r\n      margin-bottom: 10px;\r\n    }\r\n    :host.popover.bottom>.arrow {\r\n      margin-left: -4px;\r\n    }\r\n    :host.bs3.bs-popover-left {\r\n      margin-right: .5rem;\r\n    }\r\n    :host.bs3.bs-popover-right .arrow, :host.bs3.bs-popover-left .arrow{\r\n      margin: .3rem 0;\r\n    }\r\n    :host.arrow-left .arrow {\r\n        left: calc(50% - 10px);\r\n    }\r\n    `\r\n    ],\r\n    templateUrl: './popover-container.component.html'\r\n})\r\nexport class PopoverContainerComponent implements AfterViewInit, OnDestroy {\r\n    @ViewChild('innerEle', { read: ElementRef }) innerNode: ElementRef;\r\n    @Input() placement: string;\r\n    @Input() title: string;\r\n    containerClass: string;\r\n    private mouseenterEvent: any;\r\n    private mouseleaveEvent: any;\r\n    private mounseState = new Subject<boolean>();\r\n\r\n    get isBs3(): boolean {\r\n        return isBs3();\r\n    }\r\n\r\n    constructor(config: PopoverConfig, @Optional() private el: ElementRef) {\r\n        Object.assign(this, config);\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (this.el) {\r\n            this.mouseenterEvent = this.changeMouseState.bind(this, true);\r\n            this.mouseleaveEvent = this.changeMouseState.bind(this, false);\r\n            this.el.nativeElement.addEventListener('mouseenter', this.mouseenterEvent);\r\n            this.el.nativeElement.addEventListener('mouseleave', this.mouseleaveEvent);\r\n        }\r\n    }\r\n    /**\r\n     * è·åé¼ æ ååç¶æ\r\n     */\r\n    getMouseState() {\r\n        return this.mounseState;\r\n    }\r\n    /**\r\n     * ç»å®çäºä»¶\r\n     * @param state \r\n     */\r\n    private changeMouseState(state) {\r\n        this.mounseState.next(state);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.mouseenterEvent) {\r\n            this.el.nativeElement.removeEventListener('mouseenter', this.mouseenterEvent);\r\n        }\r\n        if (this.mouseleaveEvent) {\r\n            this.el.nativeElement.removeEventListener('mouseleave', this.mouseleaveEvent);\r\n        }\r\n        this.mounseState.unsubscribe();\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    ElementRef,\r\n    EventEmitter,\r\n    Input,\r\n    OnDestroy,\r\n    OnInit,\r\n    Output,\r\n    Renderer2,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n    Optional,\r\n    Injector,\r\n    NgZone\r\n} from '@angular/core';\r\nimport { PopoverConfig } from './popover.config';\r\nimport { ComponentLoader, ComponentLoaderFactory } from '@farris/ui-modal/component-loader';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { PositioningService } from '@farris/ui-modal/positioning';\r\nimport { CommonUtils, OverLayHiddenService } from '@farris/ui-common';\r\n\r\n/**\r\n * A lightweight, extensible directive for fancy popover creation.\r\n */\r\n@Directive({ selector: '[farrisPopover]', exportAs: 'bs-popover' })\r\nexport class PopoverDirective implements OnInit, OnDestroy {\r\n    /**\r\n     * Content to be displayed as popover.\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Input() popover: string | TemplateRef<any>;\r\n    /**\r\n     * Context to be used if popover is a template.\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Input() popoverContext: any;\r\n    /**\r\n     * Title of a popover.\r\n     */\r\n    @Input() popoverTitle: string;\r\n    /**\r\n     * Placement of a popover. Accepts: \"top\", \"bottom\", \"left\", \"right\"\r\n     */\r\n    @Input() placement: 'top' | 'bottom' | 'left' | 'right' | 'auto';\r\n    /**\r\n     * Close popover on outside click\r\n     */\r\n    @Input() outsideClick = true;\r\n    /**\r\n     * Specifies events that should trigger. Supports a space separated list of\r\n     * event names.\r\n     */\r\n    @Input() triggers: string;\r\n    /**\r\n     * A selector specifying the element the popover should be appended to.\r\n     */\r\n    @Input() container = 'body';\r\n\r\n    /**\r\n     * Css class for popover container\r\n     */\r\n    @Input() containerClass = '';\r\n    // ææ¡ä»¶æ¿æ´»\r\n    @Input() popActive = true;\r\n\r\n    // æ¾ç¤ºå¨ä½\r\n    @Input() showAction = 'show';\r\n    /**\r\n     * Returns whether or not the popover is currently being shown\r\n     */\r\n    @Input()\r\n    get isOpen(): boolean {\r\n        return this._popover.isShown;\r\n    }\r\n\r\n    set isOpen(value: boolean) {\r\n        if (value) {\r\n            this[this.showAction]();\r\n        } else {\r\n            this.hide();\r\n        }\r\n    }\r\n    @Input() isFixed=false;\r\n\r\n    /**\r\n     * Emits an event when the popover is shown\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Output() onShown: EventEmitter<any>;\r\n    /**\r\n     * Emits an event when the popover is hidden\r\n     */\r\n    /* tslint:disable-next-line: no-any */\r\n    @Output() onHidden: EventEmitter<any>;\r\n\r\n    private _popover: ComponentLoader<PopoverContainerComponent>;\r\n    private _isInited = false;\r\n    private ngZone;\r\n    // æ è®°æ¯å¦è¿å¥æç¤ºæ¡å\r\n    private containerInOutState = false;\r\n    // æ è®°\r\n    private setTimeoutFlag;\r\n    \r\n    private commonUtils: CommonUtils;\r\n\r\n    private overlaySer: OverLayHiddenService;\r\n    private _bodyOverflow = '';\r\n    constructor(\r\n        _config: PopoverConfig,\r\n        private _elementRef: ElementRef,\r\n        private _renderer: Renderer2,\r\n        _viewContainerRef: ViewContainerRef,\r\n        cis: ComponentLoaderFactory,\r\n        private _positionService: PositioningService,\r\n        @Optional() private inject: Injector\r\n    ) {\r\n        if (this.inject) {\r\n            this.ngZone = this.inject.get(NgZone, null);\r\n            this.overlaySer = this.inject.get(OverLayHiddenService, null);\r\n            this.commonUtils = this.inject.get(CommonUtils, new CommonUtils());\r\n        }\r\n        this._popover = cis\r\n            .createLoader<PopoverContainerComponent>(_elementRef, _viewContainerRef, _renderer)\r\n            .provide({ provide: PopoverConfig, useValue: _config });\r\n        Object.assign(this, _config);\r\n        this.onShown = this._popover.onShown;\r\n        this.onHidden = this._popover.onHidden;\r\n\r\n        // fix: no focus on button on Mac OS #1795\r\n        if (typeof window !== 'undefined') {\r\n            _elementRef.nativeElement.addEventListener('click', function () {\r\n                try {\r\n                    _elementRef.nativeElement.focus();\r\n                } catch (err) {\r\n                    return;\r\n                }\r\n            });\r\n        }\r\n\r\n        if (!this.overlaySer) {\r\n            this.overlaySer = new OverLayHiddenService();\r\n        }\r\n    }\r\n\r\n\r\n    private hasScrollbarY() {\r\n        if (!this._bodyOverflow) {\r\n            this._bodyOverflow = getComputedStyle(document.body).overflow;\r\n        }\r\n        return document.body.scrollHeight > window.innerHeight && this._bodyOverflow !== 'hidden';\r\n    }\r\n\r\n    /**\r\n     * Opens an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    show(): void {\r\n        if (!this.popActive || this._popover.isShown || !this.popover) {\r\n            return;\r\n        }\r\n\r\n        this._popover\r\n            .attach(PopoverContainerComponent)\r\n            .to(this.container)\r\n            .position({ attachment: this.placement })\r\n            .show({\r\n                showType: \"popover\",\r\n                content: this.popover,\r\n                context: this.popoverContext,\r\n                placement: this.placement,\r\n                title: this.popoverTitle,\r\n                containerClass: this.containerClass,\r\n            });\r\n\r\n            // if (!this.hasScrollbarY()) {\r\n            //     this._renderer.addClass(document.body, 'f-loading-dot-wrapper');\r\n            // }\r\n            /*è§£å³æå¥å°bodyéçå±çº§é®é¢*/\r\n            const zIndex = this.commonUtils.getFloatingLayerIndex();\r\n            this._popover.instance['el'].nativeElement.style.position = 'fixed';\r\n            this._popover.instance['el'].nativeElement.style.zIndex = zIndex;\r\n\r\n            this.overlaySer.registerMouseEvent(this._elementRef.nativeElement, (e: MouseEvent) => {\r\n                const target = e.target as any;\r\n                if (this._popover.instance['el'].nativeElement.contains(target) ||\r\n                    target.closest('.overlay-pane')) {\r\n                    return;\r\n                }\r\n                this.hide();\r\n            });\r\n        \r\n        // this.isOpen = true;\r\n        if (this.triggers == 'hover' && this._popover.instance && this._popover.instance.getMouseState) {\r\n            this._popover.instance.getMouseState().subscribe((state) => {\r\n                this.containerInOutState = state;\r\n                if (!state) {\r\n                    this.hide();\r\n                }\r\n            });\r\n        }\r\n\r\n        \r\n    }\r\n\r\n    show2(): void {\r\n        if (!this.popActive || this._popover.isShown || !this.popover) {\r\n            return;\r\n        }\r\n\r\n        const targetRef = this._popover\r\n            .attach(PopoverContainerComponent)\r\n            .to(this.container)\r\n            .show({\r\n                content: this.popover,\r\n                context: this.popoverContext,\r\n                placement: this.placement,\r\n                title: this.popoverTitle,\r\n                containerClass: this.containerClass\r\n            });\r\n            this.overlaySer.registerMouseEvent(this._elementRef.nativeElement, () => {\r\n                this.hide();\r\n            });\r\n        //this.isOpen = true;\r\n        const {\r\n            height: hostHeight,\r\n            width: hostWidth,\r\n            top,\r\n            left\r\n        } = this._elementRef.nativeElement.getBoundingClientRect();\r\n        const { height: targetHeight, width: targetWidth } = targetRef.location.nativeElement.getBoundingClientRect();\r\n        let targetTop: string, targetLeft: string;\r\n        switch (this.placement) {\r\n            case 'bottom':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            case 'left':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            case 'right':\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n            default:\r\n                targetTop = `${top - targetHeight - 8}px`;\r\n                targetLeft = `${left + hostWidth / 2 - targetWidth / 2}px`;\r\n                this._renderer.addClass(targetRef.location.nativeElement, `arrow-${'left'}`)\r\n                break;\r\n        }\r\n        const zIndex = this.commonUtils.getFloatingLayerIndex();\r\n        const postion = { top: targetTop, left: targetLeft, zIndex };\r\n        this.setStyles(targetRef.location.nativeElement, postion);\r\n    }\r\n\r\n    setStyles(element, postion) {\r\n        const paramsArr = Object.keys(postion);\r\n        paramsArr &&\r\n            paramsArr.forEach(param => {\r\n                this._renderer.setStyle(element, param, postion[param]);\r\n            });\r\n    }\r\n\r\n\r\n    private _hide() {\r\n        this._popover.hide();\r\n        this.overlaySer.destory(this._elementRef.nativeElement);\r\n    }\r\n    /**\r\n     * Closes an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    hide(): void {\r\n        if (this.triggers == 'hover' && this.ngZone) {\r\n            if (this.isOpen) {\r\n                this.ngZone.runOutsideAngular(() => {\r\n                    setTimeout(() => {\r\n                        if (!this.containerInOutState) {\r\n                            this._hide();\r\n                        }\r\n                    }, 300);\r\n                });\r\n            }\r\n            return;\r\n        }\r\n\r\n        if (this.isOpen) {\r\n            this._hide();\r\n        }\r\n    }\r\n    /**\r\n     * Toggles an elementâs popover. This is considered a âmanualâ triggering of\r\n     * the popover.\r\n     */\r\n    toggle(): void {\r\n        if (this.isOpen) {\r\n            return this.hide();\r\n        }\r\n\r\n        this.show();\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        // fix: seems there are an issue with `routerLinkActive`\r\n        // which result in duplicated call ngOnInit without call to ngOnDestroy\r\n        // read more: https://github.com/valor-software/ngx-bootstrap/issues/1885\r\n        if (this._isInited) {\r\n            return;\r\n        }\r\n        this._isInited = true;\r\n        if(this.isFixed){\r\n            this._positionService.setOptions({\r\n                modifiers: {\r\n                    preventOverflow: {\r\n                        enabled: false\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        if (this.triggers == 'hover') {\r\n            this._popover.listen({\r\n                triggers: this.triggers,\r\n                outsideClick: this.outsideClick,\r\n                show: () => this[this.showAction](),\r\n                hide: () => this.hide()\r\n            });\r\n        } else {\r\n            this._popover.listen({\r\n                triggers: this.triggers,\r\n                outsideClick: this.outsideClick,\r\n                show: () => this[this.showAction]()\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._popover.dispose();\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n\r\nimport { PopoverConfig } from './popover.config';\r\nimport { PopoverDirective } from './popover.directive';\r\nimport { PopoverContainerComponent } from './popover-container.component';\r\nimport { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';\r\nimport { PositioningService } from '@farris/ui-modal/positioning';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FarrisCommonModule\r\n  ],\r\n  declarations: [PopoverDirective, PopoverContainerComponent],\r\n  exports: [PopoverDirective],\r\n  entryComponents: [PopoverContainerComponent]\r\n})\r\nexport class PopoverModule {\r\n  static forRoot(): ModuleWithProviders {\r\n    return {\r\n      ngModule: PopoverModule,\r\n      providers: [PopoverConfig, ComponentLoaderFactory, PositioningService]\r\n    };\r\n  }\r\n}\r\n"]}