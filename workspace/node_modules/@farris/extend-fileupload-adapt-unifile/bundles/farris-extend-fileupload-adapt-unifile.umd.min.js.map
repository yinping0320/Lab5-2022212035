{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@farris/extend-fileupload-adapt-unifile/lib/locale.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.config.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile.service.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile-simple.directive.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.service.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffilepreview-adapt-unifile.directive.ts","ng://@farris/extend-fileupload-adapt-unifile/lib/ffileupload-adapt-unifile.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","FARRIS_UPLOADSERVICE_LOCALEDATA","en","uploadAdapt","needFile","recompile","uploadError","previewAdapt","notSupport","zh-CHS","zh-CHT","FFileUploadAdaptUnifileConfigToken","InjectionToken","FFileUploadAdaptUnifileConfigService","exConfig","config","rootId","formId","mode","basePerfixStr","getConfig","setConfig","key","setBasePath","getBasePath","setLocalState","localSer","localSerStorage","setLocaleData","getLocalStr","lanKey","result","defaultLocalId","getValue","localStorage","getItem","split","reduce","obj","Injectable","args","providedIn","Optional","type","Inject","FfilepreviewAdaptUnifileService","fileviewSer","configSer","downloadSer","inject","previewExtendServerConfig","notifySer","perfixStr","extendData","get","NotifyService","localeService","WEBAPI_PREFIX_TOKEN","getFinallyConfig","extendValue","previewFile","info","extendService","previewFileList","infos","metadataIdList","forEach","item","extend","options","viewerFileList","downloadFile","id","failMsg","warning","Error","window","open","getImgSrc","multiDownloadFiles","metadataIdList_1","url","getMultipleDownloadUrl","JSON","stringify","multiDownloadFilesWidthName","name","metadataIdList_2","getMultipleDownloadUrlWithName","attachId","getDownloadUrl","console","warn","setPreviwExtendServerConfig","getPreviewExtendServerConfig","FileViewerService","DownloadService","decorators","Injector","FFileAdaptPreviewFileDirective","previewSer","viewDisabled","extendServerConfig","filePreviewEventHandler","fileInfo","Directive","selector","Input","HostListener","FFileAdaptDownloadFileDirective","zipName","downloadDisabled","enableMulti","FfilepreviewAdaptSeeimgComponent","adpSer","elementRef","cls","enableThumbnail","clsPrefix","supportImgSuffix","iconWidth","maxThumbnailWidth","maxThumbnailHeight","ngOnInit","imgSrc","isImage","fileName","lastDotIndex","lastIndexOf","fileSuffix","substring","toLocaleLowerCase","findIndex","getFileTypeClassName","clsName","Component","template","ElementRef","HostBinding","FfileuploadAdaptUnifileService","_super","uploadSer","_this","bufferSize","uploadedChunk","fileTotalChunk","serverConfig","hasLocalSer","LocaleService","__","constructor","create","tslib_1.__extends","getPrefixStr","uuid","S4","Math","random","toString","remove","files","event","innerRemoveList","Observable","observer","removeFileInfo","GspFormRemoveListEntity","fileItem","concat","removeList","subscribe","complete","upload","up$_1","allowedMultiUpload","sameNameAllowed","uploadBigFile2","getUploadedFileInfoList","pipe","switchMap","res","uploadedFileInfoList","oldUploadedFileList","parse","of","uploadBigFile","getServerConfig","maxFileSize","parseInt","validateConfiguration","innerUploadList","uploadInfo","GspFormUploadListEntity","docInfoList","readerObserable","sub","obser","reader","FileReader","readAsBinaryString","nativeFile","onload","fileContent","btoa","forkJoin","datas","uploadList","errorInfoFormat","findFileIndexByFileName","UploadStatus","Done","multipartUpload","file","chunkTotal","ceil","size","chunkIndex","GspFormUploadEntity","OperatingModes","Temp","docInfo","GspFormDocInfo","metadataId","total","nextSize","min","fileData","slice","innerIndex","index","uploadFile","progress","status","data","percentage","response","Number","toFixed","Uploading","formatFileSize","getMultipartDisplayName","errorFiles","map","errorMsg","message","uploadChunks$","Subject","uploadchunks$","chunks","_getBigFileChunks","f","uploadChunks","__spread","asObservable","uploadFileChunk","post","catchError","upChunk$","expand","delay","uploadChunk","EMPTY","last","completeUpload","realChunkSize","chunkSize","fileChunks","formData","FormData","append","getUploadInfo","unorderedUploadBigFile","partList","initMultiUpload","multiUpload","completeMultiUploadRequest","uploadId","completeMultiUpload","cmur","_getBigFileChunks2","initRequest","path","tap","request","formdata","mr","set","di","uploadChunks2","_bifferSize","max","multiRequest","previous","UploadService","UploadServerService","FFilePreviewAdaptUnifileDirective","_extendServeConfig","previewOpts","showDownload","showComments","modeless","undefined","showHeader","showFileList","extendName","substr","toLowerCase","includes","msg","alert","fileDownloadEventHandler","downloadEv","defineProperty","providers","FfileuploadAdaptUnifileModule","forRoot","ngModule","provide","useValue","NgModule","declarations","imports","CommonModule","UploadDialogMoudle","FileListModule","FFileUploadModule","FarrisCommonModule","LocaleModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","export const FARRIS_UPLOADSERVICE_LOCALEDATA = {\r\n    'en': {\r\n        'uploadAdapt':{\r\n            'needFile':'Please set the attachment to be downloaded',\r\n            'recompile':'Due to security issues, the attachment download provides a security verification mechanism, and the attachment download function needs to be recompiled',\r\n            'uploadError':'Upload failed'\r\n        },\r\n        'previewAdapt':{\r\n            'notSupport':'This file does not support preview'\r\n        }\r\n    },\r\n    'zh-CHS': {\r\n        'uploadAdapt':{\r\n            'needFile':'请设置要下载的附件',\r\n            'recompile':'因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译',\r\n            'uploadError':'上传失败'\r\n        },\r\n        'previewAdapt':{\r\n            'notSupport':'此文件不支持预览'\r\n        }\r\n    },\r\n    'zh-CHT': {\r\n        'uploadAdapt':{\r\n            'needFile':'請設定要下載的附件',\r\n            'recompile':'因為安全問題，附件下載提供安全校驗機制，附件下載功能需要重新編譯',            \r\n            'uploadError':'上傳失敗'\r\n        },\r\n        'previewAdapt':{\r\n            'notSupport':'此檔案不支持預覽'\r\n        }\r\n    }\r\n};","import { Injectable, Optional, InjectionToken, Inject, } from '@angular/core';\r\nimport { LocaleService } from '@farris/ui-locale';\r\nimport { FARRIS_UPLOADSERVICE_LOCALEDATA } from './locale';\r\nexport interface FFileUploadAdaptUnifileConfig {\r\n    rootId?: string;\r\n    formId?: string;\r\n    mode?: number;//0 代表正式，1代表临时\r\n    options?:any;\r\n}\r\nexport const FFileUploadAdaptUnifileConfigToken = new InjectionToken<FFileUploadAdaptUnifileConfig>('MFFileUploadAdaptUnifileConfig');\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FFileUploadAdaptUnifileConfigService {\r\n    private config = {\r\n        rootId: '',\r\n        formId: '',\r\n        mode: 0\r\n    } as FFileUploadAdaptUnifileConfig;\r\n    private basePerfixStr='';    \r\n    private localSerStorage:LocaleService;\r\n    constructor(@Optional() @Inject(FFileUploadAdaptUnifileConfigToken) exConfig: FFileUploadAdaptUnifileConfig) {\r\n        if (exConfig) {\r\n            Object.assign(this.config, exConfig);\r\n        }\r\n    }\r\n    /**\r\n     * 获取config属性的值\r\n     */\r\n    getConfig() {\r\n        return this.config;\r\n    }\r\n    /**\r\n     * 设置config的属性值\r\n     * @param key \r\n     * @param value \r\n     */\r\n    setConfig(key, value) {\r\n        this.config[key] = value;\r\n    }\r\n    /**\r\n     * 设置基础路径\r\n     * @param value \r\n     */\r\n    setBasePath(value:string){\r\n        this.basePerfixStr=value;\r\n    }\r\n    /**\r\n     * 获取基础路径\r\n     * @returns \r\n     */\r\n    getBasePath(){\r\n        return this.basePerfixStr;\r\n    }\r\n    setLocalState(localSer:LocaleService){\r\n        if(this.localSerStorage){\r\n            return true;\r\n        }\r\n        if(localSer&&!this.localSerStorage){\r\n                localSer.setLocaleData(FARRIS_UPLOADSERVICE_LOCALEDATA);\r\n                this.localSerStorage=localSer;\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * 获取多语言数据\r\n     * 某些组件没有重新生成，要支持多语言\r\n     * @param key \r\n     */\r\n    getLocalStr(lanKey:string){\r\n        let result=\"\";\r\n        let defaultLocalId='en';\r\n        if(this.localSerStorage){\r\n            result=this.localSerStorage.getValue(lanKey);\r\n        }else{\r\n            defaultLocalId= localStorage.getItem('languageCode')||'zh-CHS';\r\n        }\r\n        if(!result){\r\n            result = lanKey.split('.').reduce((obj, key) => {\r\n                if (obj) {\r\n                    return obj[key];\r\n                } else {\r\n                    return null;\r\n                }\r\n            }, FARRIS_UPLOADSERVICE_LOCALEDATA[defaultLocalId]);\r\n        }\r\n        return result;\r\n    }\r\n};","import { Injectable, Injector, Optional } from '@angular/core';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { NotifyService } from '@farris/ui-notify';\r\nimport { FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { DownloadService } from '@gsp-svc/formdoc-upload';\r\nimport { FFileUploadAdaptUnifileConfigService, FFileUploadAdaptUnifileConfig } from './ffileupload-adapt-unifile.config';\r\nimport { WEBAPI_PREFIX_TOKEN } from '@farris/ui-common';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class FfilepreviewAdaptUnifileService {\r\n    extendData;// 暂时用于简单合并\r\n    private previewExtendServerConfig: FFileUploadAdaptUnifileConfig = null;\r\n    notifySer: NotifyService = null;\r\n    private perfixStr='';\r\n    constructor(private fileviewSer: FileViewerService, private configSer: FFileUploadAdaptUnifileConfigService, @Optional() private downloadSer: DownloadService,@Optional() private inject:Injector) {\r\n        this.extendData = this.configSer.getConfig();\r\n        this.notifySer = this.fileviewSer['injector'].get(NotifyService, null);\r\n        if(this.notifySer){\r\n            this.configSer.setLocalState(this.notifySer.localeService);\r\n        }\r\n        // 此处inject的时机和upload服务里的一样，此处不用再判断多语言\r\n        if( this.inject){\r\n            if(WEBAPI_PREFIX_TOKEN){\r\n                this.perfixStr = this.inject.get(WEBAPI_PREFIX_TOKEN, '');\r\n                this.configSer.setBasePath(this.perfixStr);\r\n            }\r\n         }\r\n    }\r\n    /**\r\n     * 返回最终属性值\r\n     * @param key \r\n     * @param configValue \r\n     * @param extendValue \r\n     */\r\n    private getFinallyConfig(key, extendValue) {\r\n        if (extendValue && extendValue.hasOwnProperty(key)) {\r\n            return extendValue[key];\r\n        }\r\n        // 避免下载等其他指令再传入扩展配置\r\n        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {\r\n            return this.previewExtendServerConfig[key];\r\n        }\r\n        // 来自module中forRoot的配置\r\n        if (this.extendData.hasOwnProperty(key)) {\r\n            return this.extendData[key];\r\n        }\r\n           return null;\r\n        \r\n    }\r\n    /**\r\n     * 预览单个文件\r\n     * @param info \r\n     */\r\n    previewFile(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        return this.previewFileList([info], extendService);\r\n    }\r\n    /**\r\n     * 预览整个列表\r\n     * @param infos \r\n     */\r\n    previewFileList(infos: FUploadFileExtend[], extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        let rootId = this.getFinallyConfig('rootId', extendService);\r\n        let metadataIdList = [];\r\n        infos.forEach(item => {\r\n            metadataIdList.push(item.extend['metadataId']);\r\n        });\r\n        let options = this.getFinallyConfig('options', extendService);\r\n        if(options){\r\n            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);\r\n        }else{\r\n            return this.fileviewSer.viewerFileList(metadataIdList, rootId);\r\n        }\r\n    }\r\n    /**\r\n     * 下载附件\r\n     * @param info \r\n     */\r\n    downloadFile(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        if (!info.id) {\r\n            let failMsg=this.getLocalStr('uploadAdapt.needFile');\r\n            if(this.notifySer){\r\n                this.notifySer.warning(failMsg);\r\n                return;\r\n            }else{\r\n                throw new Error(failMsg);\r\n            }            \r\n        }\r\n        window.open(this.getImgSrc(info, extendService));\r\n    }\r\n    /**\r\n   * 下载附件\r\n   * @param info \r\n   */\r\n    multiDownloadFiles(infos: FUploadFileExtend[], extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        if (infos.length == 1) {\r\n            this.downloadFile(infos[0], extendService);\r\n        } else {\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            let metadataIdList = [];\r\n            infos.forEach(item => {\r\n                metadataIdList.push(item.extend['metadataId']);\r\n            });\r\n            let url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList), rootId);\r\n            window.open(url);\r\n        }\r\n    }\r\n    multiDownloadFilesWidthName(infos: FUploadFileExtend[], name = \"\", extendService: FFileUploadAdaptUnifileConfig) {\r\n        //metadataIdList: string[]\r\n        if (infos.length == 1) {\r\n            this.downloadFile(infos[0], extendService);\r\n        } else {\r\n            let rootId = this.getFinallyConfig('rootId', extendService);\r\n            let metadataIdList = [];\r\n            infos.forEach(item => {\r\n                metadataIdList.push(item.extend['metadataId']);\r\n            });\r\n            let url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList), rootId, name);\r\n            window.open(url);\r\n        }\r\n    }\r\n    /**\r\n     * 获取下载链接\r\n    */\r\n    getImgSrc(info: FUploadFileExtend, extendService: FFileUploadAdaptUnifileConfig) {\r\n        if (!info.id) {            \r\n            let failMsg=this.getLocalStr('uploadAdapt.needFile');\r\n            if(this.notifySer){\r\n                this.notifySer.warning(failMsg);\r\n                return;\r\n            }else{\r\n                throw new Error(failMsg);\r\n            }   \r\n        }\r\n        let url = '';\r\n        let attachId = info.extend['metadataId'];\r\n        let rootId = this.getFinallyConfig('rootId', extendService);\r\n        // 文档服务服务单元名进行规范性调整，由document修改为dfs\r\n        if (this.downloadSer) {\r\n            if (rootId) {\r\n                url = this.downloadSer.getDownloadUrl(attachId, rootId);\r\n            }\r\n        } else if (rootId) {\r\n            console.warn(this.getLocalStr('uploadAdapt.recompile'));\r\n            url = `${this.perfixStr}/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;\r\n        }\r\n        return url;\r\n    }\r\n    /**\r\n     * 根据预览指令的扩展配置获取\r\n     * @param value \r\n     */\r\n    setPreviwExtendServerConfig(value) {\r\n        this.previewExtendServerConfig = value;\r\n    }\r\n    getPreviewExtendServerConfig() {\r\n        return this.previewExtendServerConfig;\r\n    }\r\n    getLocalStr(lanKey:string){\r\n        return this.configSer.getLocalStr(lanKey);\r\n    }\r\n}","import { Directive, HostListener, Input } from '@angular/core';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\n\r\n@Directive({\r\n    selector: '[fFileAdaptPreviewFile]'\r\n})\r\nexport class FFileAdaptPreviewFileDirective {\r\n    // 附件信息\r\n    @Input('fFileAdaptPreviewFile') fileInfo;\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('click', ['$event'])\r\n    filePreviewEventHandler() {\r\n        if (!this.fileInfo || this.viewDisabled) {\r\n            return;\r\n        }\r\n        this.previewSer.previewFile(this.fileInfo, this.extendServerConfig);\r\n    }\r\n    // 是否禁用预览\r\n    @Input() viewDisabled = false;\r\n    // 处理扩展的服务器端配置\r\n    @Input() extendServerConfig = null;\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService) {\r\n\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[fFileAdaptDownloadFile]'\r\n})\r\nexport class FFileAdaptDownloadFileDirective {\r\n    //  附件信息\r\n    @Input('fFileAdaptDownloadFile') fileInfo;\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('click', ['$event'])\r\n    filePreviewEventHandler() {\r\n        if (!this.fileInfo || this.downloadDisabled) {\r\n            return;\r\n        }\r\n        if (this.enableMulti && this.fileInfo instanceof Array) {\r\n            this.previewSer.multiDownloadFilesWidthName(this.fileInfo,this.zipName,this.extendServerConfig);\r\n        } else {\r\n            this.previewSer.downloadFile(this.fileInfo, this.extendServerConfig);\r\n        }\r\n    }\r\n    //重命名\r\n    @Input() zipName='';\r\n    // 是否禁用下载\r\n    @Input() downloadDisabled = false;\r\n    // 处理扩展的服务器端配置\r\n    @Input() extendServerConfig = null;\r\n    // 是否启用批量下载\r\n    @Input() enableMulti = false;\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService) {\r\n\r\n    }\r\n}\r\n\r\n","import { Component, OnInit, ElementRef, Input, HostBinding } from '@angular/core';\r\nimport { FUploadFileExtend } from '@farris/extend-file-upload';\r\nimport { FfilepreviewAdaptUnifileService } from './../ffilepreview-adapt-unifile.service';\r\n\r\n@Component({\r\n  selector: 'ffilepreview-adapt-seeimg',\r\n  templateUrl: './ffilepreview-adapt-seeimg.component.html',\r\n  styleUrls: ['./ffilepreview-adapt-seeimg.component.css']\r\n})\r\nexport class FfilepreviewAdaptSeeimgComponent implements OnInit {\r\n  @HostBinding('class.ffilepreview-adapt-seeimg') cls = true;\r\n  // 是否启用图片的缩略图，默认为false；如果启用，图片类型会出现缩略图；不启用，根据类型显示图标\r\n  @Input() enableThumbnail = false;\r\n  // 图标的样式前缀\r\n  @Input() clsPrefix = 'ffilepreview--filetype';\r\n  // 显示缩略图中时，定义哪些后缀属于图片;\r\n  @Input() supportImgSuffix = 'jpeg,jpg,gif,png,bmp';\r\n  // 附件信息\r\n  @Input() fileInfo: FUploadFileExtend;\r\n  @Input() iconWidth=38;\r\n  // 缩略图的最大宽度\r\n  @Input() maxThumbnailWidth = '100%';\r\n  // 缩略图的最小宽度\r\n  @Input() maxThumbnailHeight = '100%';\r\n  // 处理扩展的服务器端配置，这样可以支持每个指令预览不同的目录，比如{'rootId':'default-root','formId':'formId'}\r\n  @Input() extendServerConfig =null;\r\n  constructor(private adpSer: FfilepreviewAdaptUnifileService, private elementRef: ElementRef) { }\r\n\r\n  ngOnInit() {\r\n  }\r\n  /**\r\n   * 获取图片的链接\r\n   */\r\n  imgSrc() {\r\n    return this.adpSer.getImgSrc(this.fileInfo, this.extendServerConfig);\r\n  }\r\n  /**\r\n   * 判断是否是图片\r\n   */\r\n  isImage() {\r\n    // 没有数据\r\n    if (!this.fileInfo) {\r\n      return false;\r\n    }\r\n    // 没有名称\r\n    let fileName = this.fileInfo.name;\r\n    if (!fileName) {\r\n      return false;\r\n    }\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = '';\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    if (!fileSuffix) {\r\n      return false;\r\n    }\r\n    let tImgSuffixArray = this.supportImgSuffix.split(',');\r\n    let tIndex = tImgSuffixArray.findIndex(item => {\r\n      return item == fileSuffix;\r\n    });\r\n    if (tIndex > -1) {\r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n  /**\r\n   * 获取文件类型样式\r\n   */\r\n  getFileTypeClassName() {\r\n\r\n    let clsName = this.clsPrefix;\r\n    // 如果名称为空\r\n    if (!this.fileInfo || !this.fileInfo['name']) {\r\n      return clsName + '-any';\r\n    }\r\n    let fileName = this.fileInfo['name'];\r\n    let lastDotIndex = fileName.lastIndexOf(\".\");\r\n    let fileSuffix = '';\r\n    if (lastDotIndex > -1) {\r\n      fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();\r\n    }\r\n    switch (fileSuffix) {\r\n      case 'pdf':\r\n        clsName += '-pdf';\r\n        break;\r\n      case 'jpeg':\r\n      case 'jpg':\r\n      case 'gif':\r\n      case 'png':\r\n      case 'bmp':\r\n        clsName += '-img';\r\n        break;\r\n      case 'ppt':\r\n        clsName += '-ppt';\r\n        break;\r\n      case 'doc':\r\n      case 'docx':\r\n        clsName += '-doc';\r\n        break;\r\n      case 'xls':\r\n      case 'xlsx':\r\n        clsName += '-xls';\r\n        break;\r\n      case 'txt':\r\n        clsName += '-txt';\r\n        break;\r\n      case 'zip':\r\n        clsName += '-zip';\r\n        break;\r\n      default:\r\n        clsName += '-any';\r\n    }\r\n    return clsName;\r\n  }\r\n}\r\n","import { Injectable,Injector, Optional } from \"@angular/core\";\r\nimport {\r\n    UploadServerService,\r\n    UploadFile,\r\n    UploadInput,\r\n    UploadStatus,\r\n} from \"@farris/extend-file-upload\";\r\nimport { Observable, forkJoin, of, EMPTY, concat, Subject } from \"rxjs\";\r\nimport {\r\n    UploadService,\r\n    GspFormUploadListEntity,\r\n    GspFormRemoveListEntity,\r\n    GspFormDocInfo,\r\n    GspFormUploadEntity,\r\n    FileInfo,\r\n    OperatingModes,\r\n    GspDocMetaProperty,\r\n} from \"@gsp-svc/formdoc-upload\";\r\nimport {\r\n    FFileUploadAdaptUnifileConfigService,\r\n    FFileUploadAdaptUnifileConfig,\r\n} from \"./ffileupload-adapt-unifile.config\";\r\nimport {\r\n    catchError,\r\n    delay,\r\n    expand,\r\n    last,\r\n    map,\r\n    switchMap,\r\n    tap,\r\n} from \"rxjs/operators\";\r\nimport { HttpErrorResponse } from \"@angular/common/http\";\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\n\r\n\r\nexport interface UploadServerConfig {\r\n    sameNameAllowed: boolean;\r\n    maxFileSize: number;\r\n    allowedMultiUpload: boolean;\r\n    uploadedFileInfoList?: any;\r\n    oldUploadedFileList?: any;\r\n}\r\n\r\n\r\n@Injectable({\r\n    providedIn: \"root\",\r\n})\r\nexport class FfileuploadAdaptUnifileService extends UploadServerService {\r\n    extendData; // 暂时用于简单合并\r\n    bufferSize = 1024 * 1024;\r\n    private static previous = 0;\r\n    private uploadedChunk = {};\r\n    private fileTotalChunk = {};\r\n    private formId: string;\r\n    private rootId: string;\r\n    private serverConfig : UploadServerConfig = null;\r\n\r\n    constructor(\r\n        private uploadSer: UploadService,\r\n        private configSer: FFileUploadAdaptUnifileConfigService,\r\n        @Optional() private inject:Injector\r\n    ) {\r\n        super();        \r\n        this.extendData = this.configSer.getConfig();\r\n        // 开始创建多语言服务\r\n        let hasLocalSer=this.configSer.setLocalState(null);\r\n        if( this.inject && !hasLocalSer){\r\n            // 如果存在inject，再次创建，inject是在某个版不能之后才出现的\r\n            this.configSer.setLocalState(this.inject.get(LocaleService,null));\r\n         }\r\n    }\r\n    /**\r\n     * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值\r\n     * @returns \r\n     */\r\n    private getPrefixStr(){\r\n        return this.configSer.getBasePath();\r\n    }\r\n    private uuid() {\r\n        let S4 = function () {\r\n            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        };\r\n        let nGuid = S4() + S4()+ '-' + S4()+ '-' + S4()+ '-' + S4()+ '-' + S4() + S4() + S4();\r\n        return nGuid;\r\n    }\r\n    /**\r\n     * 删除文件\r\n     * @param file\r\n     * @param event\r\n     */\r\n    remove(\r\n        files: UploadFile[],\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ): Observable<any> {\r\n        return this.innerRemoveList(files, event, extendService);\r\n    }\r\n\r\n    private innerRemoveList(\r\n        files: UploadFile[],\r\n        event: UploadInput,\r\n        extendService = null\r\n    ): Observable<any> {\r\n        return new Observable((observer) => {\r\n            let removeFileInfo = new GspFormRemoveListEntity();\r\n            let metadataIdList = [];\r\n            files.forEach((fileItem) => {\r\n                if (fileItem[\"response\"]) {\r\n                    metadataIdList.push(fileItem[\"response\"][\"metadataId\"]);\r\n                }\r\n            });\r\n\r\n            removeFileInfo.mode = this.getFinallyConfig(\"mode\", extendService);\r\n            let rootId = this.getFinallyConfig(\"rootId\", extendService);\r\n            removeFileInfo.metadataIdList = [].concat(metadataIdList);\r\n\r\n            this.uploadSer.removeList(metadataIdList, rootId).subscribe(\r\n                (result) => {\r\n                    // 没有需要整合的服务器端返回数据\r\n                    observer.next({ type: \"removed\", files: files });\r\n                },\r\n                (error) => {\r\n                    observer.error(error);\r\n                    observer.complete();\r\n                },\r\n                () => {\r\n                    observer.complete();\r\n                }\r\n            );\r\n        });\r\n    }\r\n    /**\r\n     * 上传文件\r\n     * @param file\r\n     * @param event\r\n     */\r\n    upload(\r\n        files: UploadFile[],\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ): Observable<any> {\r\n        this.formId = this.getFinallyConfig(\"formId\", extendService);\r\n        this.rootId = this.getFinallyConfig(\"rootId\", extendService);\r\n        if (event.type == \"sliceUpload\") {\r\n\r\n            const up$ = () => {\r\n                if (this.serverConfig && this.serverConfig.allowedMultiUpload) {\r\n                    if (!this.serverConfig.sameNameAllowed) {\r\n                        return this.uploadSer.getUploadedFileInfoList(this.formId, this.rootId).pipe(\r\n                            switchMap((res: any) => {\r\n                                if (res != null && res.error == null) {\r\n                                    this.serverConfig.uploadedFileInfoList = res;\r\n                                    this.serverConfig.oldUploadedFileList = JSON.parse(JSON.stringify(res));\r\n\r\n                                    return this.uploadBigFile2(files, event, extendService);            \r\n                                }\r\n                                return of(res);\r\n                            })\r\n                        );\r\n                    } else {\r\n                        return this.uploadBigFile2(files, event, extendService);\r\n                    }\r\n                } else {\r\n                    return this.uploadBigFile(files, event, extendService);\r\n                }\r\n            }\r\n\r\n\r\n            if (!this.serverConfig) {\r\n                return this.getServerConfig(this.rootId).pipe(\r\n                    switchMap((res: any) => {\r\n                        if (res != null && res.error == null) {\r\n                            this.serverConfig = {\r\n                                sameNameAllowed: res.sameNameAllowed,\r\n                                allowedMultiUpload: res.allowedMultiUpload,\r\n                                maxFileSize: parseInt(\r\n                                    JSON.parse(res.validateConfiguration).maxFileSize\r\n                                )\r\n                            }\r\n                        }\r\n                        return up$();\r\n                    })\r\n                );\r\n            }\r\n            return up$();\r\n        }\r\n        return this.innerUploadList(files, event, extendService);\r\n    }\r\n    /**\r\n     * 内部上传方式\r\n     * @param files\r\n     * @param event\r\n     * @param extendService\r\n     */\r\n    private innerUploadList(\r\n        files: UploadFile[],\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ): Observable<any> {\r\n        return new Observable((observer) => {\r\n            let uploadInfo = new GspFormUploadListEntity();\r\n            uploadInfo.formId = this.getFinallyConfig(\"formId\", extendService);\r\n            uploadInfo.mode = this.getFinallyConfig(\"mode\", extendService);\r\n\r\n            let rootId = this.getFinallyConfig(\"rootId\", extendService);\r\n            uploadInfo.docInfoList = [];\r\n            let readerObserable: Observable<any>[] = [];\r\n            files.forEach((fileItem: UploadFile) => {\r\n                let sub = new Observable((obser) => {\r\n                    let reader = new FileReader();\r\n                    // 暂不处理异常\r\n                    reader.readAsBinaryString(fileItem.nativeFile);\r\n                    reader.onload = (e) => {\r\n                        let info = { fileName: \"\", fileContent: \"\" } as any;\r\n                        info[\"fileName\"] = fileItem.name;\r\n                        info[\"fileContent\"] = btoa(reader.result.toString());\r\n                        // 如果data里有数据，并且属性是配置的扩展属性\r\n                        if (\r\n                            event.hasOwnProperty(\"data\") &&\r\n                            event[\"data\"] &&\r\n                            event[\"data\"].hasOwnProperty(\"extProperty\")\r\n                        ) {\r\n                            //\r\n                            info[\"extProperty\"] = event[\"data\"][\"extProperty\"];\r\n                        }\r\n                        uploadInfo.docInfoList.push(info);\r\n                        obser.next();\r\n                        obser.complete();\r\n                    };\r\n                });\r\n                readerObserable.push(sub);\r\n            });\r\n\r\n            forkJoin(readerObserable).subscribe((datas) => {\r\n                //     metadataId: string;\r\n                //  fileName: string;\r\n                this.uploadSer.uploadList(uploadInfo, rootId).subscribe(\r\n                    (result) => {\r\n                        if (result.error) {\r\n                            // 此接口一旦出现问题，所有附件都上传不通过\r\n                            observer.error(this.errorInfoFormat(result.error, files));\r\n                            observer.complete();\r\n                            return;\r\n                        }\r\n                        // 合并返回结果到此处\r\n                        result.forEach((item) => {\r\n                            var findIndex = this.findFileIndexByFileName(\r\n                                files,\r\n                                item.fileName\r\n                            );\r\n                            if (findIndex > -1) {\r\n                                files[findIndex][\"response\"] = item;\r\n                                files[findIndex][\"progress\"][\"status\"] = UploadStatus.Done;\r\n                            }\r\n                        });\r\n\r\n                        observer.next({ type: \"done\", files: files });\r\n                    },\r\n                    (error) => {\r\n                        observer.error(this.errorInfoFormat(error, files));\r\n                        observer.complete();\r\n                    },\r\n                    () => {\r\n                        observer.complete();\r\n                    }\r\n                );\r\n            });\r\n        });\r\n    }\r\n    /**\r\n     * 分片加载\r\n     * @param file\r\n     * @param event\r\n     * @param extendService\r\n     */\r\n    multipartUpload(\r\n        file: UploadFile,\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ): Observable<any> {\r\n        return new Observable((observer) => {\r\n            // let fileInfo: FileInfo;\r\n            let uuid = this.uuid();\r\n            // let uuid = UUID.UUID();\r\n            //reader.readAsBinaryString(selectedFile);\r\n            //reader.onload = (e) => {\r\n            let fileName = file.name;\r\n            // fileInfo = {\r\n            //   id: uuid,\r\n            //   name: fileName,\r\n            //   type: file.type,\r\n            //   source: \"\",\r\n            //   size: this.formatFileSize(file.size),\r\n            //   fileSize: file.size,\r\n            //   picListDisplayName: this.getMultipartDisplayName(fileName),\r\n            //   queueListDisplayName: fileName,\r\n            //   //content: reader.result.toString(),\r\n            //   hasUploaded: false,\r\n            //   mouseOn: false,\r\n            //   selectd: false,\r\n            //   isUploading: true,\r\n            //   uploadResult: false,\r\n            //   uploadProcess: 0,\r\n            //   errorMessage: \"\",\r\n            //   extensionDropListId: 0,\r\n            //   extensionName: \"\"\r\n            // }\r\n\r\n            let chunkTotal: number = Math.ceil(file.size / this.bufferSize);\r\n            // 标记当前附件总的分片数\r\n            this.fileTotalChunk[uuid] = chunkTotal;\r\n            let chunkIndex: number = 0;\r\n            // 标记当前附件成功的分片数\r\n            this.uploadedChunk[uuid] = 0;\r\n            while (chunkIndex < chunkTotal) {\r\n                let uploadInfo = new GspFormUploadEntity();\r\n                uploadInfo.mode = OperatingModes.Temp;\r\n                uploadInfo.formId = this.getFinallyConfig(\"formId\", extendService);\r\n                uploadInfo.rootId = this.getFinallyConfig(\"rootId\", extendService);\r\n\r\n                let docInfo: GspFormDocInfo = new GspFormDocInfo();\r\n                docInfo.fileName = fileName;\r\n                docInfo.metadataId = uuid;\r\n                docInfo.total = chunkTotal;\r\n                // 如果data里有数据，并且属性是配置的扩展属性\r\n                if (\r\n                    event.hasOwnProperty(\"data\") &&\r\n                    event[\"data\"] &&\r\n                    event[\"data\"].hasOwnProperty(\"extProperty\")\r\n                ) {\r\n                    docInfo[\"extProperty\"] = event[\"data\"][\r\n                        \"extProperty\"\r\n                    ] as GspDocMetaProperty;\r\n                }\r\n                // 下一个文件大小\r\n                let nextSize = Math.min((chunkIndex + 1) * this.bufferSize, file.size);\r\n                // File类型\r\n                let fileData = file[\"nativeFile\"].slice(\r\n                    chunkIndex * this.bufferSize,\r\n                    nextSize\r\n                );\r\n                // 读取文件\r\n                let reader = new FileReader();\r\n                reader.readAsBinaryString(fileData);\r\n                let innerIndex = chunkIndex;\r\n                reader.onload = () => {\r\n                    // 附件上传\r\n                    docInfo.fileContent = btoa(reader.result.toString());\r\n                    docInfo.index = innerIndex;\r\n\r\n                    uploadInfo.docInfo = docInfo;\r\n                    let info = uploadInfo;\r\n\r\n                    this.uploadSer.uploadFile(info).subscribe(\r\n                        (result) => {\r\n                            if (result && result.error) {\r\n                                // 分片上传有返回结果就是报错了\r\n                                observer.error(this.errorInfoFormat(result.error, [file]));\r\n                                observer.complete();\r\n                                return;\r\n                            } else {\r\n                                this.uploadedChunk[uuid]++;\r\n                                if (\r\n                                    this.uploadedChunk[docInfo.metadataId] ==\r\n                                    this.fileTotalChunk[docInfo.metadataId]\r\n                                ) {\r\n                                    // 判断是所有分片都上传完成\r\n                                    file.progress = {\r\n                                        status: UploadStatus.Done,\r\n                                        data: {\r\n                                            percentage: 100,\r\n                                        },\r\n                                    };\r\n                                    file.response = docInfo;\r\n                                    delete this.uploadedChunk[uuid];\r\n                                    delete this.fileTotalChunk[uuid];\r\n                                    observer.next({ type: \"done\", files: [file] });\r\n                                    observer.complete();\r\n                                } else {\r\n                                    // 分片上传正常\r\n                                    const percentage = Number.parseInt(\r\n                                        (\r\n                                            (this.uploadedChunk[uuid] / this.fileTotalChunk[uuid]) *\r\n                                            100\r\n                                        ).toFixed(0)\r\n                                    );\r\n                                    // 判断未上传完成\r\n                                    file.progress = {\r\n                                        status: UploadStatus.Uploading,\r\n                                        data: {\r\n                                            percentage: percentage,\r\n                                        },\r\n                                    };\r\n                                    observer.next({ type: \"uploading\", files: [file] });\r\n                                }\r\n                            }\r\n                        },\r\n                        (error) => {\r\n                            delete this.uploadedChunk[uuid];\r\n                            delete this.fileTotalChunk[uuid];\r\n                            observer.error(this.errorInfoFormat(error, [file]));\r\n                            observer.complete();\r\n                        }\r\n                    );\r\n                };\r\n                chunkIndex = chunkIndex + 1;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * 获取分片的附件大小\r\n     * @param size\r\n     */\r\n    private formatFileSize(size: number) {\r\n        if (size < 102400) return (size / 1024).toFixed(1) + \"K\";\r\n        else if (size < 1024 * 1024) return (size / 1024).toFixed(0) + \"K\";\r\n        else if (size < 100 * 1024 * 1024)\r\n            return (size / 1024 / 1024).toFixed(1) + \"M\";\r\n        else if (size < 1024 * 1024 * 1024)\r\n            return (size / 1024 / 1024).toFixed(0) + \"M\";\r\n        else return (size / 1024 / 1024 / 1024).toFixed(1) + \"G\";\r\n    }\r\n    /**\r\n     * 获取分片的 附件名称\r\n     * @param fileName\r\n     */\r\n    private getMultipartDisplayName(fileName: string) {\r\n        if (fileName.length <= 10) return fileName;\r\n        else {\r\n            let headContent = fileName.substring(0, 2);\r\n            let tailContent = fileName.substring(fileName.lastIndexOf(\".\") - 2);\r\n            return headContent + \"…\" + tailContent;\r\n        }\r\n    }\r\n    private errorInfoFormat(error, files) {\r\n        //\r\n        let errorFiles = files.map((item) => {\r\n            return { id: item.id, name: item.name };\r\n        });\r\n        let errorMsg=this.configSer.getLocalStr('uploadAdapt.uploadError');\r\n        if (error) {\r\n            return Object.assign(\r\n                error,\r\n                { files: errorFiles },\r\n                {\r\n                    message: error[\"Message\"] || error[\"extensionMessage\"] || errorMsg,\r\n                    type: \"error\",\r\n                }\r\n            );\r\n        } else {\r\n            return Object.assign(\r\n                { files: errorFiles },\r\n                { message: errorMsg, type: \"error\" }\r\n            );\r\n        }\r\n    }\r\n    /**\r\n     * 返回最终属性值\r\n     * @param key\r\n     * @param configValue\r\n     * @param extendValue\r\n     */\r\n    private getFinallyConfig(key, extendValue) {\r\n        if (extendValue && extendValue.hasOwnProperty(key)) {\r\n            return extendValue[key];\r\n        }\r\n        return this.extendData[key];\r\n    }\r\n\r\n    private findFileIndexByFileName(files: UploadFile[], fileName) {\r\n        // 按照肯定能找到文件来处理\r\n        let findIndex = files.findIndex((file) => file.name == fileName);\r\n        return findIndex;\r\n    }\r\n\r\n    //#region 大文件分片上传\r\n\r\n    uploadBigFile(\r\n        files: UploadFile[],\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ) {\r\n        const uploadChunks$ = new Subject();\r\n\r\n        const _files = files.map((n) => {\r\n            const chunks = this._getBigFileChunks(n, event, extendService);\r\n            return { ...n, ...chunks };\r\n        });\r\n\r\n        const uploadchunks$: Observable<any>[] = _files.map((f) =>\r\n            this.uploadChunks(f, uploadChunks$)\r\n        );\r\n        concat(...uploadchunks$).subscribe(\r\n            (f: any) => {\r\n                f.progress = {\r\n                    status: UploadStatus.Done,\r\n                    data: {\r\n                        percentage: 100,\r\n                    },\r\n                };\r\n                f.response = JSON.parse(f.chunks[0].get(\"docInfo\"));\r\n                uploadChunks$.next({ type: \"done\", files: [f] });\r\n            },\r\n            (error) => {\r\n                uploadChunks$.error(this.errorInfoFormat(error, files));\r\n                uploadChunks$.complete();\r\n            },\r\n            () => {\r\n                uploadChunks$.complete();\r\n            }\r\n        );\r\n\r\n        return uploadChunks$.asObservable();\r\n    }\r\n\r\n    private uploadFileChunk(file: any) {\r\n        const url = `${this.getPrefixStr()}/api/runtime/dfs/v1.0/formdoc/slice`;\r\n\r\n        return this.uploadSer[\"http\"][\"http\"]\r\n            .post(url, file.chunks[file.total])\r\n            .pipe(\r\n                switchMap(() => {\r\n                    return of(file);\r\n                }),\r\n                catchError((error: HttpErrorResponse) => {\r\n                    return of(error);\r\n                })\r\n            );\r\n    }\r\n\r\n    private uploadChunks(file, upChunk$: Subject<any>) {\r\n        const doChunksRemain = (i) => i > -1;\r\n        const completeUpload = (f) => of(f);\r\n        const uploadChunk = (f) => {\r\n            return this.uploadFileChunk(f).pipe(\r\n                delay(100),\r\n                map((f: any) => {\r\n                    // 块数为0 时，即为此文件的所有块均上传成功\r\n                    f.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data: {\r\n                            percentage: ((f.total / f.chunks.length) * 100).toFixed(0),\r\n                        },\r\n                    };\r\n                    upChunk$.next({ type: \"uploading\", files: [f] });\r\n\r\n                    return f;\r\n                })\r\n            );\r\n        };\r\n        const createMultipartUpload = (f) => of(f);\r\n\r\n        return createMultipartUpload(file).pipe(\r\n            // tap((f) => console.log(\"upload file\", f.name)),\r\n            expand((f) => {\r\n                if (doChunksRemain(--file.total)) {\r\n                    return uploadChunk(file);\r\n                }\r\n                return EMPTY;\r\n            }),\r\n            // tap((f: any) => {\r\n            //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);\r\n            // }),\r\n            last(),\r\n            switchMap((res: any) => {\r\n                return completeUpload(file);\r\n            })\r\n        );\r\n    }\r\n\r\n    private _getBigFileChunks(\r\n        file: UploadFile,\r\n        event: UploadInput,\r\n        extendService: FFileUploadAdaptUnifileConfig\r\n    ) {\r\n        let uuid = this.uuid();\r\n\r\n        const formId = this.getFinallyConfig(\"formId\", extendService);\r\n        const rootId = this.getFinallyConfig(\"rootId\", extendService);\r\n        let realChunkSize=(event.chunkSize || 1)*this.bufferSize;\r\n        let chunkTotal: number = Math.ceil(file.size / realChunkSize);\r\n        let chunkIndex: number = 0;\r\n        const fileChunks = { chunks: [], total: chunkTotal };\r\n\r\n        while (chunkIndex < chunkTotal) {\r\n            let uploadInfo = new GspFormUploadEntity();\r\n            uploadInfo.mode = OperatingModes.Temp;\r\n            uploadInfo.formId = formId;\r\n            uploadInfo.rootId = rootId;\r\n\r\n            let docInfo: GspFormDocInfo = new GspFormDocInfo();\r\n\r\n            docInfo.fileName = file.name;\r\n            docInfo.metadataId = uuid;\r\n            docInfo.total = chunkTotal;\r\n\r\n            let nextSize = Math.min((chunkIndex + 1) * realChunkSize, file.size);\r\n            // File类型\r\n            let fileData = file[\"nativeFile\"].slice(\r\n                chunkIndex * realChunkSize,\r\n                nextSize\r\n            );\r\n\r\n            docInfo.size = file.size;\r\n            docInfo.index = chunkIndex;\r\n            docInfo.fileContent = \"\";\r\n\r\n            // 如果data里有数据，并且属性是配置的扩展属性\r\n            if (\r\n                event.hasOwnProperty(\"data\") &&\r\n                event[\"data\"] &&\r\n                event[\"data\"].hasOwnProperty(\"extProperty\")\r\n            ) {\r\n                docInfo[\"extProperty\"] = event[\"data\"][\r\n                    \"extProperty\"\r\n                ] as GspDocMetaProperty;\r\n            }\r\n\r\n            uploadInfo.docInfo = docInfo;\r\n\r\n            //封装请求formdata\r\n            let formData = new FormData();\r\n            formData.append(\"uploadInfo\", JSON.stringify(uploadInfo));\r\n            formData.append(\"docInfo\", JSON.stringify(docInfo));\r\n            formData.append(\"file\", fileData);\r\n\r\n            fileChunks.chunks.push(formData);\r\n            chunkIndex = chunkIndex + 1;\r\n        }\r\n\r\n        return fileChunks;\r\n    }\r\n    /**\r\n     * 获取跟目录的配置\r\n     * @param rootId \r\n     * @returns \r\n     */\r\n    private getServerConfig(rootId: string) {\r\n        return this.uploadSer.getUploadInfo(rootId);\r\n    }\r\n\r\n    //#endregion\r\n\r\n\r\n\r\n\r\n    //#region 读取相关配置分片上传至云服务器\r\n\r\n    private unorderedUploadBigFile(file: any, uploadChunks$) {\r\n\r\n        if ( !file.partList) {\r\n            file.partList = [];\r\n        }\r\n\r\n        this.initMultiUpload(file).subscribe((r: any) => {\r\n\r\n            if (r && r.error) {\r\n                uploadChunks$.error(this.errorInfoFormat(r.error, [file]));\r\n                uploadChunks$.complete();\r\n                return;\r\n            }\r\n\r\n            file.chunks.forEach(n => {\r\n                this.multiUpload(n, r).subscribe((res: any) => {\r\n\r\n                    if (res && res.error) {\r\n                        uploadChunks$.error(this.errorInfoFormat(res.error, [file]));\r\n                        uploadChunks$.complete();\r\n                        return;\r\n                    }\r\n\r\n\r\n                    file.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data:  {\r\n                            percentage: (res.index / file.chunks.length * 100).toFixed(0)\r\n                        }\r\n                    };\r\n                    uploadChunks$.next({ type: 'uploading', files: [file] });\r\n                    if (res && res.result) {\r\n                        file.partList.push(res.result);\r\n                    }\r\n                    if (file.partList.length === file.chunks.length) {\r\n                        let completeMultiUploadRequest: any = {};\r\n                        completeMultiUploadRequest.metadataId = file.metadataId;\r\n                        completeMultiUploadRequest.partList = file.partList;\r\n                        completeMultiUploadRequest.rootId = this.rootId;\r\n                        completeMultiUploadRequest.uploadId = file.uploadId;\r\n                        completeMultiUploadRequest.size = file.size;\r\n                        \r\n                        this.completeMultiUpload(completeMultiUploadRequest).subscribe( (cmur: any) => {\r\n\r\n                            if (cmur && cmur.status != 200) {\r\n                                uploadChunks$.error(this.errorInfoFormat(cmur.error, [file]));\r\n                                uploadChunks$.complete();\r\n                                return;\r\n                            }\r\n\r\n                            file.progress = {\r\n                                status: UploadStatus.Done,\r\n                                data:  {\r\n                                    percentage: 100\r\n                                }\r\n                            };\r\n            \r\n                            file.response = JSON.parse(file.chunks[0].get(\"docInfo\"));\r\n                            uploadChunks$.next({type: 'done', files:[file]});\r\n                        },\r\n                        error => {\r\n                            uploadChunks$.error(this.errorInfoFormat(error, [file]));\r\n                            uploadChunks$.complete();\r\n                        })\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    uploadBigFile2(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig) {\r\n\r\n        const uploadChunks$ = new Subject();\r\n\r\n        const formId = this.getFinallyConfig('formId', extendService);\r\n        const rootId = this.getFinallyConfig('rootId', extendService);\r\n\r\n        const _files = files.map(n => {\r\n            const chunks = this._getBigFileChunks2(n, event, extendService);\r\n            return { ...n, ...chunks, formId, rootId};\r\n        });\r\n\r\n        // 无序上传\r\n        _files.forEach(n => {\r\n            this.unorderedUploadBigFile(n, uploadChunks$);\r\n        });\r\n        \r\n\r\n        // 有序上传\r\n        // const uploadchunks$: Observable<any>[] =  _files.map((f) => this.uploadChunks2(f, uploadChunks$));\r\n        // concat(...uploadchunks$).pipe(\r\n        //     switchMap((f: any) => {\r\n        //         let completeMultiUploadRequest: any = {};\r\n        //         completeMultiUploadRequest.metadataId = f.metadataId;\r\n        //         completeMultiUploadRequest.partList = f.partList;\r\n        //         completeMultiUploadRequest.rootId = this.rootId;\r\n        //         completeMultiUploadRequest.uploadId = f.uploadId;\r\n        //         completeMultiUploadRequest.size = f.size;\r\n\r\n        //         return this.completeMultiUpload(completeMultiUploadRequest).pipe(\r\n        //             map(() => f)\r\n        //         );\r\n        //     })\r\n        // ).subscribe(\r\n        //     (f: any) => {\r\n        //         f.progress = {\r\n        //             status: UploadStatus.Done,\r\n        //             data:  {\r\n        //                 percentage: 100\r\n        //             }\r\n        //         };\r\n\r\n        //         f.response = JSON.parse(f.chunks[0].get(\"docInfo\"));\r\n        //         uploadChunks$.next({type: 'done', files:[f]});\r\n        //     },\r\n        //     error => {\r\n        //         uploadChunks$.error(this.errorInfoFormat(error, files));\r\n        //         uploadChunks$.complete();\r\n        //     },\r\n        //     () => {\r\n        //         uploadChunks$.complete();\r\n        //         // console.log(\"all files uploaded\")\r\n        //     }\r\n        // );\r\n\r\n        return uploadChunks$.asObservable();\r\n    }\r\n\r\n\r\n    private initMultiUpload(file: any) {\r\n        let initRequest: any = {};\r\n        initRequest.path = file.formId;\r\n        initRequest.metadataId = this.uuid();\r\n        initRequest.rootId = file.rootId;\r\n        initRequest.size = file.size;\r\n        initRequest.fileName = file.name;\r\n\r\n        let url = `${this.getPrefixStr()}/api/runtime/dfs/v1.0/formdoc/multi/init`;\r\n        \r\n        return this.uploadSer['http']['http'].post(url, initRequest).pipe(\r\n            tap((res: any) => {\r\n                file.metadataId = initRequest.metadataId;\r\n                file.uploadId = res.uploadId;\r\n            }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                return of(error);\r\n            }),\r\n            map( (res: any) => {\r\n                res.metadataId = initRequest.metadataId;\r\n                return res;\r\n            })\r\n        );\r\n\r\n    }\r\n\r\n    private completeMultiUpload(request: any): Observable<any> {\r\n\r\n        let url = `${this.getPrefixStr()}/api/runtime/dfs/v1.0/formdoc/multi/complete`;\r\n    \r\n        return this.uploadSer['http']['http'].post(url, request).pipe(\r\n            tap((res) => {}),\r\n            catchError((error: HttpErrorResponse) => {\r\n                return of(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private multiUpload(formdata: FormData, r: any): Observable<any> {\r\n        let url =`${this.getPrefixStr()}/api/runtime/dfs/v1.0/formdoc/multi/upload`;\r\n        const mr = JSON.parse(formdata.get('multiRequest') as any);\r\n        mr.uploadId = r.uploadId;\r\n        mr.metadataId = r.metadataId;\r\n        formdata.set('multiRequest', JSON.stringify(mr));\r\n\r\n        const di = JSON.parse(formdata.get('docInfo') as any);\r\n        di.metadataId = r.metadataId;\r\n        formdata.set('docInfo', JSON.stringify(di));\r\n\r\n        return  this.uploadSer['http']['http'].post(url, formdata).pipe(\r\n            tap(res => { }),\r\n            catchError((error: HttpErrorResponse) => {\r\n                return of(error);\r\n            })\r\n        );\r\n    }\r\n\r\n    private uploadChunks2(file, upChunk$: Subject<any>) {\r\n\r\n        const total = file.total;\r\n\r\n        let t = -1;\r\n\r\n\r\n        const doChunksRemain = (i) => i < total;\r\n        const completeUpload = (f) => of(f);\r\n        const uploadChunk = (f, uploadId: any) => {\r\n            return this.multiUpload(f, uploadId).pipe(\r\n                delay(100),\r\n                map((res: any) => {\r\n                    // 块数为0 时，即为此文件的所有块均上传成功\r\n                    file.progress = {\r\n                        status: UploadStatus.Uploading,\r\n                        data:  {\r\n                            percentage: (res.index / file.chunks.length * 100).toFixed(0)\r\n                        }\r\n                    };\r\n                    upChunk$.next({ type: 'uploading', files: [file] });\r\n                    if (res && res.result) {\r\n                        if ( !file.partList) {\r\n                            file.partList = [];\r\n                        }\r\n                        file.partList.push(res.result);\r\n                    }\r\n                    return file;\r\n                })\r\n            )\r\n        };\r\n        const createMultipartUpload = (f) => {\r\n            return this.initMultiUpload(f);\r\n            // return of(f)\r\n        };\r\n\r\n\r\n        return createMultipartUpload(file).pipe(\r\n            // tap((f) => console.log(\"upload file\", f.name)),\r\n            expand((r: any) => {\r\n                if (doChunksRemain(++t)) {\r\n                    return uploadChunk(file.chunks[t], r);\r\n                }\r\n                return EMPTY;\r\n            }),\r\n            // tap((f: any) => {\r\n            //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);\r\n            // }),\r\n            last(),\r\n            switchMap((res: any) => {\r\n                return completeUpload(file);\r\n\r\n            })\r\n        );\r\n    }\r\n\r\n    private _getBigFileChunks2(file: UploadFile, event: UploadInput, extendService: FFileUploadAdaptUnifileConfig) {\r\n        let uuid = this.uuid();\r\n        \r\n        const _bifferSize = Math.max(event.chunkSize,5)*this.bufferSize;\r\n\r\n        let chunkTotal: number = Math.ceil(file.size / _bifferSize);\r\n        let chunkIndex: number = 0;\r\n        const fileChunks = {chunks: [], total: chunkTotal};\r\n\r\n        const rootId = this.getFinallyConfig('rootId', extendService);\r\n\r\n\r\n        while (chunkIndex < chunkTotal) {\r\n\r\n            let nextSize = Math.min((chunkIndex + 1) * _bifferSize, file.size);\r\n            // File类型\r\n            let fileData = file['nativeFile'].slice(chunkIndex * _bifferSize, nextSize);\r\n\r\n            let multiRequest: any = {};\r\n            multiRequest.metadataId = uuid;\r\n            multiRequest.rootId = rootId;\r\n            // multiRequest.uploadId = uploadId;\r\n            multiRequest.index = chunkIndex;\r\n            multiRequest.total = chunkTotal;\r\n            multiRequest.size = fileData.size;\r\n      \r\n            //封装请求formdata\r\n            let formData = new FormData();\r\n            formData.append('multiRequest', JSON.stringify(multiRequest));\r\n            formData.append('file', fileData);\r\n\r\n\r\n            let docInfo: GspFormDocInfo = new GspFormDocInfo();\r\n\r\n            docInfo.fileName = file.name;\r\n            docInfo.metadataId = uuid;\r\n            docInfo.total = chunkTotal;\r\n            docInfo.size = file.size;\r\n            docInfo.index = chunkIndex;\r\n            docInfo.fileContent = \"\";\r\n\r\n            formData.append(\"docInfo\", JSON.stringify(docInfo));\r\n\r\n            // 如果data里有数据，并且属性是配置的扩展属性\r\n            if (\r\n                event.hasOwnProperty(\"data\") &&\r\n                event[\"data\"] &&\r\n                event[\"data\"].hasOwnProperty(\"extProperty\")\r\n            ) {\r\n                docInfo[\"extProperty\"] = event[\"data\"][\r\n                    \"extProperty\"\r\n                ] as GspDocMetaProperty;\r\n            }\r\n\r\n\r\n\r\n            fileChunks.chunks.push(formData);\r\n            chunkIndex = chunkIndex + 1;\r\n        }\r\n\r\n        return fileChunks;\r\n    \r\n    }\r\n\r\n\r\n\r\n    //#endregion\r\n\r\n}\r\n","import { Directive, HostListener, Input, Optional } from '@angular/core';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\n\r\n@Directive({\r\n    selector: '[fFilePreviewAdaptUnifile]',\r\n    providers:[FfilepreviewAdaptUnifileService]\r\n})\r\nexport class FFilePreviewAdaptUnifileDirective {\r\n    /**\r\n     * 捕获预览事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('filePreviewEvent', ['$event'])\r\n    filePreviewEventHandler(fileInfo) {\r\n        // 可以通过属性 extendServerConfig设置，也可以通过一体化组件的Input属性配置\r\n        const previewOpts = Object.assign(this.extendServerConfig || {});\r\n        previewOpts.options = Object.assign(previewOpts.options || {}, {showDownload: !!fileInfo.showDownload},{showComments:!!fileInfo.showComments},{modeless:!!fileInfo.modeless});\r\n        \r\n        if (previewOpts.options.showHeader === undefined) {\r\n            previewOpts.options.showHeader = true;\r\n        }\r\n\r\n        if (previewOpts.options.showFileList === undefined) {\r\n            previewOpts.options.showFileList = true;\r\n        }\r\n        if (previewOpts.options.showComments === undefined) {\r\n            previewOpts.options.showComments = false;\r\n        }\r\n        if (previewOpts.options.modeless === undefined) {\r\n            previewOpts.options.modeless = false;\r\n        }\r\n        // 支持修订模式\r\n\r\n        // 文件扩展名\r\n        const extendName = fileInfo.name.substr(fileInfo.name.lastIndexOf('.') + 1).toLowerCase();\r\n        const enablePreviews = [ 'doc','docx','xls','xlsx','ppt','pptx','jpg','jpeg','png', 'gif', 'bmp', 'pdf', 'txt', 'wps', 'wpt', 'et','dps'];\r\n\r\n        if (enablePreviews.includes(extendName)) {\r\n            this.previewSer.previewFile(fileInfo, previewOpts);\r\n        } else {\r\n            const msg = this.previewSer.getLocalStr(\"previewAdapt.notSupport\");\r\n            if (this.previewSer.notifySer) {\r\n                this.previewSer.notifySer.warning(msg);\r\n            } else {\r\n                alert(msg);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * 捕获下载事件\r\n     * @param fileInfo \r\n     */\r\n    @HostListener('fileDownloadEvent', ['$event'])\r\n    fileDownloadEventHandler(downloadEv) {\r\n        // 如果是批量下载, downloadEv={fileInfos:[],name:}\r\n        if (downloadEv&&downloadEv['fileInfos'].length > 0) {\r\n            if (downloadEv['fileInfos'].length > 1) {\r\n                this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'],downloadEv['name'], this.extendServerConfig);\r\n            }else{\r\n                this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);\r\n            }\r\n        }        \r\n    }\r\n\r\n    /**\r\n     * 处理扩展的服务器端配置\r\n     */\r\n    private _extendServeConfig=null;\r\n    @Input() \r\n    set extendServerConfig(value){\r\n        this._extendServeConfig=value;\r\n        this.previewSer.setPreviwExtendServerConfig(value);\r\n    } \r\n    get extendServerConfig(){\r\n        return this._extendServeConfig;\r\n    }\r\n    constructor(private previewSer: FfilepreviewAdaptUnifileService ) {\r\n        \r\n    }\r\n\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FFileUploadModule } from '@farris/extend-file-upload';\r\nimport { UploadDialogMoudle } from '@gsp-svc/formdoc-upload';\r\nimport { FfileuploadAdaptUnifileService } from './ffileupload-adapt-unifile.service';\r\nimport { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';\r\nimport { FFilePreviewAdaptUnifileDirective } from './ffilepreview-adapt-unifile.directive';\r\nimport { FileListModule, FileViewerService } from '@gsp-svc/file-viewer';\r\nimport { FFileUploadAdaptUnifileConfig, FFileUploadAdaptUnifileConfigToken, FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';\r\nimport { FfilepreviewAdaptSeeimgComponent } from './ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component';\r\nimport { FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective } from './ffilepreview-adapt-unifile-simple.directive';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\n\r\n\r\n@NgModule({\r\n  declarations: [FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent,FFileAdaptDownloadFileDirective,FFileAdaptPreviewFileDirective],\r\n  imports: [\r\n    CommonModule,\r\n    UploadDialogMoudle,\r\n    FileListModule,\r\n    FFileUploadModule.forRoot(null, FfileuploadAdaptUnifileService),\r\n    FarrisCommonModule,\r\n    LocaleModule.forRoot()\r\n  ],\r\n  exports: [\r\n    FFileUploadModule,\r\n    FFilePreviewAdaptUnifileDirective, \r\n    FfilepreviewAdaptSeeimgComponent,\r\n    FFileAdaptDownloadFileDirective,\r\n    FFileAdaptPreviewFileDirective],\r\n  providers: [\r\n    FFileUploadAdaptUnifileConfigService,\r\n    FfilepreviewAdaptUnifileService,\r\n    FileViewerService\r\n  ]\r\n})\r\nexport class FfileuploadAdaptUnifileModule {\r\n\r\n  static forRoot(config?: FFileUploadAdaptUnifileConfig): ModuleWithProviders {\r\n    return {\r\n      ngModule: FfileuploadAdaptUnifileModule,\r\n      providers: [\r\n        { provide: FFileUploadAdaptUnifileConfigToken, useValue: config },\r\n        FFileUploadAdaptUnifileConfigService,\r\n        FfilepreviewAdaptUnifileService,\r\n        FileViewerService\r\n      ]\r\n    };\r\n  }\r\n}\r\n"]}