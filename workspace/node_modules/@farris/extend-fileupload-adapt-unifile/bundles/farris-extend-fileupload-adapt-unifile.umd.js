(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@farris/ui-notify'), require('@gsp-svc/file-viewer'), require('@gsp-svc/formdoc-upload'), require('@farris/ui-common'), require('@farris/extend-file-upload'), require('rxjs'), require('rxjs/operators'), require('@farris/ui-locale'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@farris/extend-fileupload-adapt-unifile', ['exports', '@angular/core', '@farris/ui-notify', '@gsp-svc/file-viewer', '@gsp-svc/formdoc-upload', '@farris/ui-common', '@farris/extend-file-upload', 'rxjs', 'rxjs/operators', '@farris/ui-locale', '@angular/common'], factory) :
    (global = global || self, factory((global.farris = global.farris || {}, global.farris['extend-fileupload-adapt-unifile'] = {}), global.ng.core, global.uiNotify, global.fileViewer, global.formdocUpload, global.uiCommon, global.extendFileUpload, global.rxjs, global.rxjs.operators, global.uiLocale, global.ng.common));
}(this, (function (exports, core, uiNotify, fileViewer, formdocUpload, uiCommon, extendFileUpload, rxjs, operators, uiLocale, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/locale.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FARRIS_UPLOADSERVICE_LOCALEDATA = {
        'en': {
            'uploadAdapt': {
                'needFile': 'Please set the attachment to be downloaded',
                'recompile': 'Due to security issues, the attachment download provides a security verification mechanism, and the attachment download function needs to be recompiled',
                'uploadError': 'Upload failed'
            },
            'previewAdapt': {
                'notSupport': 'This file does not support preview'
            }
        },
        'zh-CHS': {
            'uploadAdapt': {
                'needFile': '请设置要下载的附件',
                'recompile': '因为安全问题，附件下载提供安全校验机制，附件下载功能需要重新编译',
                'uploadError': '上传失败'
            },
            'previewAdapt': {
                'notSupport': '此文件不支持预览'
            }
        },
        'zh-CHT': {
            'uploadAdapt': {
                'needFile': '請設定要下載的附件',
                'recompile': '因為安全問題，附件下載提供安全校驗機制，附件下載功能需要重新編譯',
                'uploadError': '上傳失敗'
            },
            'previewAdapt': {
                'notSupport': '此檔案不支持預覽'
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffileupload-adapt-unifile.config.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function FFileUploadAdaptUnifileConfig() { }
    if (false) {
        /** @type {?|undefined} */
        FFileUploadAdaptUnifileConfig.prototype.rootId;
        /** @type {?|undefined} */
        FFileUploadAdaptUnifileConfig.prototype.formId;
        /** @type {?|undefined} */
        FFileUploadAdaptUnifileConfig.prototype.mode;
        /** @type {?|undefined} */
        FFileUploadAdaptUnifileConfig.prototype.options;
    }
    /** @type {?} */
    var FFileUploadAdaptUnifileConfigToken = new core.InjectionToken('MFFileUploadAdaptUnifileConfig');
    var FFileUploadAdaptUnifileConfigService = /** @class */ (function () {
        function FFileUploadAdaptUnifileConfigService(exConfig) {
            this.config = (/** @type {?} */ ({
                rootId: '',
                formId: '',
                mode: 0
            }));
            this.basePerfixStr = '';
            if (exConfig) {
                Object.assign(this.config, exConfig);
            }
        }
        /**
         * 获取config属性的值
         */
        /**
         * 获取config属性的值
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.getConfig = /**
         * 获取config属性的值
         * @return {?}
         */
        function () {
            return this.config;
        };
        /**
         * 设置config的属性值
         * @param key
         * @param value
         */
        /**
         * 设置config的属性值
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.setConfig = /**
         * 设置config的属性值
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        function (key, value) {
            this.config[key] = value;
        };
        /**
         * 设置基础路径
         * @param value
         */
        /**
         * 设置基础路径
         * @param {?} value
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.setBasePath = /**
         * 设置基础路径
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.basePerfixStr = value;
        };
        /**
         * 获取基础路径
         * @returns
         */
        /**
         * 获取基础路径
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.getBasePath = /**
         * 获取基础路径
         * @return {?}
         */
        function () {
            return this.basePerfixStr;
        };
        /**
         * @param {?} localSer
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.setLocalState = /**
         * @param {?} localSer
         * @return {?}
         */
        function (localSer) {
            if (this.localSerStorage) {
                return true;
            }
            if (localSer && !this.localSerStorage) {
                localSer.setLocaleData(FARRIS_UPLOADSERVICE_LOCALEDATA);
                this.localSerStorage = localSer;
                return true;
            }
            return false;
        };
        /**
         * 获取多语言数据
         * 某些组件没有重新生成，要支持多语言
         * @param key
         */
        /**
         * 获取多语言数据
         * 某些组件没有重新生成，要支持多语言
         * @param {?} lanKey
         * @return {?}
         */
        FFileUploadAdaptUnifileConfigService.prototype.getLocalStr = /**
         * 获取多语言数据
         * 某些组件没有重新生成，要支持多语言
         * @param {?} lanKey
         * @return {?}
         */
        function (lanKey) {
            /** @type {?} */
            var result = "";
            /** @type {?} */
            var defaultLocalId = 'en';
            if (this.localSerStorage) {
                result = this.localSerStorage.getValue(lanKey);
            }
            else {
                defaultLocalId = localStorage.getItem('languageCode') || 'zh-CHS';
            }
            if (!result) {
                result = lanKey.split('.').reduce((/**
                 * @param {?} obj
                 * @param {?} key
                 * @return {?}
                 */
                function (obj, key) {
                    if (obj) {
                        return obj[key];
                    }
                    else {
                        return null;
                    }
                }), FARRIS_UPLOADSERVICE_LOCALEDATA[defaultLocalId]);
            }
            return result;
        };
        FFileUploadAdaptUnifileConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FFileUploadAdaptUnifileConfigService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Optional }, { type: core.Inject, args: [FFileUploadAdaptUnifileConfigToken,] }] }
        ]; };
        /** @nocollapse */ FFileUploadAdaptUnifileConfigService.ngInjectableDef = core.defineInjectable({ factory: function FFileUploadAdaptUnifileConfigService_Factory() { return new FFileUploadAdaptUnifileConfigService(core.inject(FFileUploadAdaptUnifileConfigToken, 8)); }, token: FFileUploadAdaptUnifileConfigService, providedIn: "root" });
        return FFileUploadAdaptUnifileConfigService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        FFileUploadAdaptUnifileConfigService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        FFileUploadAdaptUnifileConfigService.prototype.basePerfixStr;
        /**
         * @type {?}
         * @private
         */
        FFileUploadAdaptUnifileConfigService.prototype.localSerStorage;
    }
    ;

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffilepreview-adapt-unifile.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FfilepreviewAdaptUnifileService = /** @class */ (function () {
        function FfilepreviewAdaptUnifileService(fileviewSer, configSer, downloadSer, inject) {
            this.fileviewSer = fileviewSer;
            this.configSer = configSer;
            this.downloadSer = downloadSer;
            this.inject = inject;
            // 暂时用于简单合并
            this.previewExtendServerConfig = null;
            this.notifySer = null;
            this.perfixStr = '';
            this.extendData = this.configSer.getConfig();
            this.notifySer = this.fileviewSer['injector'].get(uiNotify.NotifyService, null);
            if (this.notifySer) {
                this.configSer.setLocalState(this.notifySer.localeService);
            }
            // 此处inject的时机和upload服务里的一样，此处不用再判断多语言
            if (this.inject) {
                if (uiCommon.WEBAPI_PREFIX_TOKEN) {
                    this.perfixStr = this.inject.get(uiCommon.WEBAPI_PREFIX_TOKEN, '');
                    this.configSer.setBasePath(this.perfixStr);
                }
            }
        }
        /**
         * 返回最终属性值
         * @param key
         * @param configValue
         * @param extendValue
         */
        /**
         * 返回最终属性值
         * @private
         * @param {?} key
         * @param {?} extendValue
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.getFinallyConfig = /**
         * 返回最终属性值
         * @private
         * @param {?} key
         * @param {?} extendValue
         * @return {?}
         */
        function (key, extendValue) {
            if (extendValue && extendValue.hasOwnProperty(key)) {
                return extendValue[key];
            }
            // 避免下载等其他指令再传入扩展配置
            if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {
                return this.previewExtendServerConfig[key];
            }
            // 来自module中forRoot的配置
            if (this.extendData.hasOwnProperty(key)) {
                return this.extendData[key];
            }
            return null;
        };
        /**
         * 预览单个文件
         * @param info
         */
        /**
         * 预览单个文件
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.previewFile = /**
         * 预览单个文件
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        function (info, extendService) {
            return this.previewFileList([info], extendService);
        };
        /**
         * 预览整个列表
         * @param infos
         */
        /**
         * 预览整个列表
         * @param {?} infos
         * @param {?} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.previewFileList = /**
         * 预览整个列表
         * @param {?} infos
         * @param {?} extendService
         * @return {?}
         */
        function (infos, extendService) {
            //metadataIdList: string[]
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var metadataIdList = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                metadataIdList.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            var options = this.getFinallyConfig('options', extendService);
            if (options) {
                return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);
            }
            else {
                return this.fileviewSer.viewerFileList(metadataIdList, rootId);
            }
        };
        /**
         * 下载附件
         * @param info
         */
        /**
         * 下载附件
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.downloadFile = /**
         * 下载附件
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        function (info, extendService) {
            if (!info.id) {
                /** @type {?} */
                var failMsg = this.getLocalStr('uploadAdapt.needFile');
                if (this.notifySer) {
                    this.notifySer.warning(failMsg);
                    return;
                }
                else {
                    throw new Error(failMsg);
                }
            }
            window.open(this.getImgSrc(info, extendService));
        };
        /**
       * 下载附件
       * @param info
       */
        /**
         * 下载附件
         * @param {?} infos
         * @param {?} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.multiDownloadFiles = /**
         * 下载附件
         * @param {?} infos
         * @param {?} extendService
         * @return {?}
         */
        function (infos, extendService) {
            //metadataIdList: string[]
            if (infos.length == 1) {
                this.downloadFile(infos[0], extendService);
            }
            else {
                /** @type {?} */
                var rootId = this.getFinallyConfig('rootId', extendService);
                /** @type {?} */
                var metadataIdList_1 = [];
                infos.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    metadataIdList_1.push(item.extend['metadataId']);
                }));
                /** @type {?} */
                var url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList_1), rootId);
                window.open(url);
            }
        };
        /**
         * @param {?} infos
         * @param {?=} name
         * @param {?=} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.multiDownloadFilesWidthName = /**
         * @param {?} infos
         * @param {?=} name
         * @param {?=} extendService
         * @return {?}
         */
        function (infos, name, extendService) {
            if (name === void 0) { name = ""; }
            //metadataIdList: string[]
            if (infos.length == 1) {
                this.downloadFile(infos[0], extendService);
            }
            else {
                /** @type {?} */
                var rootId = this.getFinallyConfig('rootId', extendService);
                /** @type {?} */
                var metadataIdList_2 = [];
                infos.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    metadataIdList_2.push(item.extend['metadataId']);
                }));
                /** @type {?} */
                var url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList_2), rootId, name);
                window.open(url);
            }
        };
        /**
         * 获取下载链接
        */
        /**
         * 获取下载链接
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.getImgSrc = /**
         * 获取下载链接
         * @param {?} info
         * @param {?} extendService
         * @return {?}
         */
        function (info, extendService) {
            if (!info.id) {
                /** @type {?} */
                var failMsg = this.getLocalStr('uploadAdapt.needFile');
                if (this.notifySer) {
                    this.notifySer.warning(failMsg);
                    return;
                }
                else {
                    throw new Error(failMsg);
                }
            }
            /** @type {?} */
            var url = '';
            /** @type {?} */
            var attachId = info.extend['metadataId'];
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            // 文档服务服务单元名进行规范性调整，由document修改为dfs
            if (this.downloadSer) {
                if (rootId) {
                    url = this.downloadSer.getDownloadUrl(attachId, rootId);
                }
            }
            else if (rootId) {
                console.warn(this.getLocalStr('uploadAdapt.recompile'));
                url = this.perfixStr + "/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=" + attachId + "&rootid=" + rootId;
            }
            return url;
        };
        /**
         * 根据预览指令的扩展配置获取
         * @param value
         */
        /**
         * 根据预览指令的扩展配置获取
         * @param {?} value
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.setPreviwExtendServerConfig = /**
         * 根据预览指令的扩展配置获取
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.previewExtendServerConfig = value;
        };
        /**
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.getPreviewExtendServerConfig = /**
         * @return {?}
         */
        function () {
            return this.previewExtendServerConfig;
        };
        /**
         * @param {?} lanKey
         * @return {?}
         */
        FfilepreviewAdaptUnifileService.prototype.getLocalStr = /**
         * @param {?} lanKey
         * @return {?}
         */
        function (lanKey) {
            return this.configSer.getLocalStr(lanKey);
        };
        FfilepreviewAdaptUnifileService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FfilepreviewAdaptUnifileService.ctorParameters = function () { return [
            { type: fileViewer.FileViewerService },
            { type: FFileUploadAdaptUnifileConfigService },
            { type: formdocUpload.DownloadService, decorators: [{ type: core.Optional }] },
            { type: core.Injector, decorators: [{ type: core.Optional }] }
        ]; };
        /** @nocollapse */ FfilepreviewAdaptUnifileService.ngInjectableDef = core.defineInjectable({ factory: function FfilepreviewAdaptUnifileService_Factory() { return new FfilepreviewAdaptUnifileService(core.inject(fileViewer.FileViewerService), core.inject(FFileUploadAdaptUnifileConfigService), core.inject(formdocUpload.DownloadService, 8), core.inject(core.INJECTOR, 8)); }, token: FfilepreviewAdaptUnifileService, providedIn: "root" });
        return FfilepreviewAdaptUnifileService;
    }());
    if (false) {
        /** @type {?} */
        FfilepreviewAdaptUnifileService.prototype.extendData;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.previewExtendServerConfig;
        /** @type {?} */
        FfilepreviewAdaptUnifileService.prototype.notifySer;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.perfixStr;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.fileviewSer;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.configSer;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.downloadSer;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptUnifileService.prototype.inject;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffilepreview-adapt-unifile-simple.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFileAdaptPreviewFileDirective = /** @class */ (function () {
        function FFileAdaptPreviewFileDirective(previewSer) {
            this.previewSer = previewSer;
            // 是否禁用预览
            this.viewDisabled = false;
            // 处理扩展的服务器端配置
            this.extendServerConfig = null;
        }
        /**
         * 捕获预览事件
         * @param fileInfo
         */
        /**
         * 捕获预览事件
         * @return {?}
         */
        FFileAdaptPreviewFileDirective.prototype.filePreviewEventHandler = /**
         * 捕获预览事件
         * @return {?}
         */
        function () {
            if (!this.fileInfo || this.viewDisabled) {
                return;
            }
            this.previewSer.previewFile(this.fileInfo, this.extendServerConfig);
        };
        FFileAdaptPreviewFileDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[fFileAdaptPreviewFile]'
                    },] }
        ];
        /** @nocollapse */
        FFileAdaptPreviewFileDirective.ctorParameters = function () { return [
            { type: FfilepreviewAdaptUnifileService }
        ]; };
        FFileAdaptPreviewFileDirective.propDecorators = {
            fileInfo: [{ type: core.Input, args: ['fFileAdaptPreviewFile',] }],
            filePreviewEventHandler: [{ type: core.HostListener, args: ['click', ['$event'],] }],
            viewDisabled: [{ type: core.Input }],
            extendServerConfig: [{ type: core.Input }]
        };
        return FFileAdaptPreviewFileDirective;
    }());
    if (false) {
        /** @type {?} */
        FFileAdaptPreviewFileDirective.prototype.fileInfo;
        /** @type {?} */
        FFileAdaptPreviewFileDirective.prototype.viewDisabled;
        /** @type {?} */
        FFileAdaptPreviewFileDirective.prototype.extendServerConfig;
        /**
         * @type {?}
         * @private
         */
        FFileAdaptPreviewFileDirective.prototype.previewSer;
    }
    var FFileAdaptDownloadFileDirective = /** @class */ (function () {
        function FFileAdaptDownloadFileDirective(previewSer) {
            this.previewSer = previewSer;
            //重命名
            this.zipName = '';
            // 是否禁用下载
            this.downloadDisabled = false;
            // 处理扩展的服务器端配置
            this.extendServerConfig = null;
            // 是否启用批量下载
            this.enableMulti = false;
        }
        /**
         * 捕获预览事件
         * @param fileInfo
         */
        /**
         * 捕获预览事件
         * @return {?}
         */
        FFileAdaptDownloadFileDirective.prototype.filePreviewEventHandler = /**
         * 捕获预览事件
         * @return {?}
         */
        function () {
            if (!this.fileInfo || this.downloadDisabled) {
                return;
            }
            if (this.enableMulti && this.fileInfo instanceof Array) {
                this.previewSer.multiDownloadFilesWidthName(this.fileInfo, this.zipName, this.extendServerConfig);
            }
            else {
                this.previewSer.downloadFile(this.fileInfo, this.extendServerConfig);
            }
        };
        FFileAdaptDownloadFileDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[fFileAdaptDownloadFile]'
                    },] }
        ];
        /** @nocollapse */
        FFileAdaptDownloadFileDirective.ctorParameters = function () { return [
            { type: FfilepreviewAdaptUnifileService }
        ]; };
        FFileAdaptDownloadFileDirective.propDecorators = {
            fileInfo: [{ type: core.Input, args: ['fFileAdaptDownloadFile',] }],
            filePreviewEventHandler: [{ type: core.HostListener, args: ['click', ['$event'],] }],
            zipName: [{ type: core.Input }],
            downloadDisabled: [{ type: core.Input }],
            extendServerConfig: [{ type: core.Input }],
            enableMulti: [{ type: core.Input }]
        };
        return FFileAdaptDownloadFileDirective;
    }());
    if (false) {
        /** @type {?} */
        FFileAdaptDownloadFileDirective.prototype.fileInfo;
        /** @type {?} */
        FFileAdaptDownloadFileDirective.prototype.zipName;
        /** @type {?} */
        FFileAdaptDownloadFileDirective.prototype.downloadDisabled;
        /** @type {?} */
        FFileAdaptDownloadFileDirective.prototype.extendServerConfig;
        /** @type {?} */
        FFileAdaptDownloadFileDirective.prototype.enableMulti;
        /**
         * @type {?}
         * @private
         */
        FFileAdaptDownloadFileDirective.prototype.previewSer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffilepreview-adapt-seeimg/ffilepreview-adapt-seeimg.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FfilepreviewAdaptSeeimgComponent = /** @class */ (function () {
        function FfilepreviewAdaptSeeimgComponent(adpSer, elementRef) {
            this.adpSer = adpSer;
            this.elementRef = elementRef;
            this.cls = true;
            // 是否启用图片的缩略图，默认为false；如果启用，图片类型会出现缩略图；不启用，根据类型显示图标
            this.enableThumbnail = false;
            // 图标的样式前缀
            this.clsPrefix = 'ffilepreview--filetype';
            // 显示缩略图中时，定义哪些后缀属于图片;
            this.supportImgSuffix = 'jpeg,jpg,gif,png,bmp';
            this.iconWidth = 38;
            // 缩略图的最大宽度
            this.maxThumbnailWidth = '100%';
            // 缩略图的最小宽度
            this.maxThumbnailHeight = '100%';
            // 处理扩展的服务器端配置，这样可以支持每个指令预览不同的目录，比如{'rootId':'default-root','formId':'formId'}
            this.extendServerConfig = null;
        }
        /**
         * @return {?}
         */
        FfilepreviewAdaptSeeimgComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * 获取图片的链接
         */
        /**
         * 获取图片的链接
         * @return {?}
         */
        FfilepreviewAdaptSeeimgComponent.prototype.imgSrc = /**
         * 获取图片的链接
         * @return {?}
         */
        function () {
            return this.adpSer.getImgSrc(this.fileInfo, this.extendServerConfig);
        };
        /**
         * 判断是否是图片
         */
        /**
         * 判断是否是图片
         * @return {?}
         */
        FfilepreviewAdaptSeeimgComponent.prototype.isImage = /**
         * 判断是否是图片
         * @return {?}
         */
        function () {
            // 没有数据
            if (!this.fileInfo) {
                return false;
            }
            // 没有名称
            /** @type {?} */
            var fileName = this.fileInfo.name;
            if (!fileName) {
                return false;
            }
            /** @type {?} */
            var lastDotIndex = fileName.lastIndexOf(".");
            /** @type {?} */
            var fileSuffix = '';
            if (lastDotIndex > -1) {
                fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();
            }
            if (!fileSuffix) {
                return false;
            }
            /** @type {?} */
            var tImgSuffixArray = this.supportImgSuffix.split(',');
            /** @type {?} */
            var tIndex = tImgSuffixArray.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item == fileSuffix;
            }));
            if (tIndex > -1) {
                return true;
            }
            return false;
        };
        /**
         * 获取文件类型样式
         */
        /**
         * 获取文件类型样式
         * @return {?}
         */
        FfilepreviewAdaptSeeimgComponent.prototype.getFileTypeClassName = /**
         * 获取文件类型样式
         * @return {?}
         */
        function () {
            /** @type {?} */
            var clsName = this.clsPrefix;
            // 如果名称为空
            if (!this.fileInfo || !this.fileInfo['name']) {
                return clsName + '-any';
            }
            /** @type {?} */
            var fileName = this.fileInfo['name'];
            /** @type {?} */
            var lastDotIndex = fileName.lastIndexOf(".");
            /** @type {?} */
            var fileSuffix = '';
            if (lastDotIndex > -1) {
                fileSuffix = fileName.substring(lastDotIndex + 1).toLocaleLowerCase();
            }
            switch (fileSuffix) {
                case 'pdf':
                    clsName += '-pdf';
                    break;
                case 'jpeg':
                case 'jpg':
                case 'gif':
                case 'png':
                case 'bmp':
                    clsName += '-img';
                    break;
                case 'ppt':
                    clsName += '-ppt';
                    break;
                case 'doc':
                case 'docx':
                    clsName += '-doc';
                    break;
                case 'xls':
                case 'xlsx':
                    clsName += '-xls';
                    break;
                case 'txt':
                    clsName += '-txt';
                    break;
                case 'zip':
                    clsName += '-zip';
                    break;
                default:
                    clsName += '-any';
            }
            return clsName;
        };
        FfilepreviewAdaptSeeimgComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ffilepreview-adapt-seeimg',
                        template: "<div class=\"ffilepreview-seeimg--wrapper\" [ngClass]=\"{'ffilepreview-seeimg--thumbnail':enableThumbnail}\">\r\n  <ng-container *ngIf=\"enableThumbnail&&isImage();else notImage\">\r\n    <img class=\"ffilepreview-seeimg--img\" [src]=\"imgSrc()\" [ngStyle]=\"{'maxWidth':maxThumbnailWidth,'maxHeight':maxThumbnailHeight}\"/>\r\n  </ng-container>\r\n</div>\r\n<ng-template #notImage>\r\n  <span class=\"ffilepreview--filetype-icon\" [ngClass]=\"getFileTypeClassName()\" [ngStyle]=\"{'width':iconWidth+'px','height':iconWidth+'px'}\"></span>\r\n</ng-template>",
                        styles: [":host{height:100%;width:100%;position:relative}.ffilepreview-seeimg--thumbnail{top:0;bottom:0;position:absolute;right:0;left:0;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center}.ffilepreview-seeimg--wrapper:hover{opacity:.8}.ffilepreview-seeimg--img{max-width:100%;max-height:100%;border-radius:4px}"]
                    }] }
        ];
        /** @nocollapse */
        FfilepreviewAdaptSeeimgComponent.ctorParameters = function () { return [
            { type: FfilepreviewAdaptUnifileService },
            { type: core.ElementRef }
        ]; };
        FfilepreviewAdaptSeeimgComponent.propDecorators = {
            cls: [{ type: core.HostBinding, args: ['class.ffilepreview-adapt-seeimg',] }],
            enableThumbnail: [{ type: core.Input }],
            clsPrefix: [{ type: core.Input }],
            supportImgSuffix: [{ type: core.Input }],
            fileInfo: [{ type: core.Input }],
            iconWidth: [{ type: core.Input }],
            maxThumbnailWidth: [{ type: core.Input }],
            maxThumbnailHeight: [{ type: core.Input }],
            extendServerConfig: [{ type: core.Input }]
        };
        return FfilepreviewAdaptSeeimgComponent;
    }());
    if (false) {
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.cls;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.enableThumbnail;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.clsPrefix;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.supportImgSuffix;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.fileInfo;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.iconWidth;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.maxThumbnailWidth;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.maxThumbnailHeight;
        /** @type {?} */
        FfilepreviewAdaptSeeimgComponent.prototype.extendServerConfig;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptSeeimgComponent.prototype.adpSer;
        /**
         * @type {?}
         * @private
         */
        FfilepreviewAdaptSeeimgComponent.prototype.elementRef;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffileupload-adapt-unifile.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function UploadServerConfig() { }
    if (false) {
        /** @type {?} */
        UploadServerConfig.prototype.sameNameAllowed;
        /** @type {?} */
        UploadServerConfig.prototype.maxFileSize;
        /** @type {?} */
        UploadServerConfig.prototype.allowedMultiUpload;
        /** @type {?|undefined} */
        UploadServerConfig.prototype.uploadedFileInfoList;
        /** @type {?|undefined} */
        UploadServerConfig.prototype.oldUploadedFileList;
    }
    var FfileuploadAdaptUnifileService = /** @class */ (function (_super) {
        __extends(FfileuploadAdaptUnifileService, _super);
        function FfileuploadAdaptUnifileService(uploadSer, configSer, inject) {
            var _this = _super.call(this) || this;
            _this.uploadSer = uploadSer;
            _this.configSer = configSer;
            _this.inject = inject;
            // 暂时用于简单合并
            _this.bufferSize = 1024 * 1024;
            _this.uploadedChunk = {};
            _this.fileTotalChunk = {};
            _this.serverConfig = null;
            _this.extendData = _this.configSer.getConfig();
            // 开始创建多语言服务
            /** @type {?} */
            var hasLocalSer = _this.configSer.setLocalState(null);
            if (_this.inject && !hasLocalSer) {
                // 如果存在inject，再次创建，inject是在某个版不能之后才出现的
                _this.configSer.setLocalState(_this.inject.get(uiLocale.LocaleService, null));
            }
            return _this;
        }
        /**
         * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
         * @returns
         */
        /**
         * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
         * @private
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.getPrefixStr = /**
         * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
         * @private
         * @return {?}
         */
        function () {
            return this.configSer.getBasePath();
        };
        /**
         * @private
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uuid = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var S4 = (/**
             * @return {?}
             */
            function () {
                return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
            });
            /** @type {?} */
            var nGuid = S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
            return nGuid;
        };
        /**
         * 删除文件
         * @param file
         * @param event
         */
        /**
         * 删除文件
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.remove = /**
         * 删除文件
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            return this.innerRemoveList(files, event, extendService);
        };
        /**
         * @private
         * @param {?} files
         * @param {?} event
         * @param {?=} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.innerRemoveList = /**
         * @private
         * @param {?} files
         * @param {?} event
         * @param {?=} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            var _this = this;
            if (extendService === void 0) { extendService = null; }
            return new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                /** @type {?} */
                var removeFileInfo = new formdocUpload.GspFormRemoveListEntity();
                /** @type {?} */
                var metadataIdList = [];
                files.forEach((/**
                 * @param {?} fileItem
                 * @return {?}
                 */
                function (fileItem) {
                    if (fileItem["response"]) {
                        metadataIdList.push(fileItem["response"]["metadataId"]);
                    }
                }));
                removeFileInfo.mode = _this.getFinallyConfig("mode", extendService);
                /** @type {?} */
                var rootId = _this.getFinallyConfig("rootId", extendService);
                removeFileInfo.metadataIdList = [].concat(metadataIdList);
                _this.uploadSer.removeList(metadataIdList, rootId).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    // 没有需要整合的服务器端返回数据
                    observer.next({ type: "removed", files: files });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.error(error);
                    observer.complete();
                }), (/**
                 * @return {?}
                 */
                function () {
                    observer.complete();
                }));
            }));
        };
        /**
         * 上传文件
         * @param file
         * @param event
         */
        /**
         * 上传文件
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.upload = /**
         * 上传文件
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            var _this = this;
            this.formId = this.getFinallyConfig("formId", extendService);
            this.rootId = this.getFinallyConfig("rootId", extendService);
            if (event.type == "sliceUpload") {
                /** @type {?} */
                var up$_1 = (/**
                 * @return {?}
                 */
                function () {
                    if (_this.serverConfig && _this.serverConfig.allowedMultiUpload) {
                        if (!_this.serverConfig.sameNameAllowed) {
                            return _this.uploadSer.getUploadedFileInfoList(_this.formId, _this.rootId).pipe(operators.switchMap((/**
                             * @param {?} res
                             * @return {?}
                             */
                            function (res) {
                                if (res != null && res.error == null) {
                                    _this.serverConfig.uploadedFileInfoList = res;
                                    _this.serverConfig.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                                    return _this.uploadBigFile2(files, event, extendService);
                                }
                                return rxjs.of(res);
                            })));
                        }
                        else {
                            return _this.uploadBigFile2(files, event, extendService);
                        }
                    }
                    else {
                        return _this.uploadBigFile(files, event, extendService);
                    }
                });
                if (!this.serverConfig) {
                    return this.getServerConfig(this.rootId).pipe(operators.switchMap((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (res != null && res.error == null) {
                            _this.serverConfig = {
                                sameNameAllowed: res.sameNameAllowed,
                                allowedMultiUpload: res.allowedMultiUpload,
                                maxFileSize: parseInt(JSON.parse(res.validateConfiguration).maxFileSize)
                            };
                        }
                        return up$_1();
                    })));
                }
                return up$_1();
            }
            return this.innerUploadList(files, event, extendService);
        };
        /**
         * 内部上传方式
         * @param files
         * @param event
         * @param extendService
         */
        /**
         * 内部上传方式
         * @private
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.innerUploadList = /**
         * 内部上传方式
         * @private
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            var _this = this;
            return new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                /** @type {?} */
                var uploadInfo = new formdocUpload.GspFormUploadListEntity();
                uploadInfo.formId = _this.getFinallyConfig("formId", extendService);
                uploadInfo.mode = _this.getFinallyConfig("mode", extendService);
                /** @type {?} */
                var rootId = _this.getFinallyConfig("rootId", extendService);
                uploadInfo.docInfoList = [];
                /** @type {?} */
                var readerObserable = [];
                files.forEach((/**
                 * @param {?} fileItem
                 * @return {?}
                 */
                function (fileItem) {
                    /** @type {?} */
                    var sub = new rxjs.Observable((/**
                     * @param {?} obser
                     * @return {?}
                     */
                    function (obser) {
                        /** @type {?} */
                        var reader = new FileReader();
                        // 暂不处理异常
                        reader.readAsBinaryString(fileItem.nativeFile);
                        reader.onload = (/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            /** @type {?} */
                            var info = (/** @type {?} */ ({ fileName: "", fileContent: "" }));
                            info["fileName"] = fileItem.name;
                            info["fileContent"] = btoa(reader.result.toString());
                            // 如果data里有数据，并且属性是配置的扩展属性
                            if (event.hasOwnProperty("data") &&
                                event["data"] &&
                                event["data"].hasOwnProperty("extProperty")) {
                                //
                                info["extProperty"] = event["data"]["extProperty"];
                            }
                            uploadInfo.docInfoList.push(info);
                            obser.next();
                            obser.complete();
                        });
                    }));
                    readerObserable.push(sub);
                }));
                rxjs.forkJoin(readerObserable).subscribe((/**
                 * @param {?} datas
                 * @return {?}
                 */
                function (datas) {
                    //     metadataId: string;
                    //  fileName: string;
                    _this.uploadSer.uploadList(uploadInfo, rootId).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result.error) {
                            // 此接口一旦出现问题，所有附件都上传不通过
                            observer.error(_this.errorInfoFormat(result.error, files));
                            observer.complete();
                            return;
                        }
                        // 合并返回结果到此处
                        result.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            /** @type {?} */
                            var findIndex = _this.findFileIndexByFileName(files, item.fileName);
                            if (findIndex > -1) {
                                files[findIndex]["response"] = item;
                                files[findIndex]["progress"]["status"] = extendFileUpload.UploadStatus.Done;
                            }
                        }));
                        observer.next({ type: "done", files: files });
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        observer.error(_this.errorInfoFormat(error, files));
                        observer.complete();
                    }), (/**
                     * @return {?}
                     */
                    function () {
                        observer.complete();
                    }));
                }));
            }));
        };
        /**
         * 分片加载
         * @param file
         * @param event
         * @param extendService
         */
        /**
         * 分片加载
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.multipartUpload = /**
         * 分片加载
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (file, event, extendService) {
            var _this = this;
            return new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                // let fileInfo: FileInfo;
                /** @type {?} */
                var uuid = _this.uuid();
                // let uuid = UUID.UUID();
                //reader.readAsBinaryString(selectedFile);
                //reader.onload = (e) => {
                /** @type {?} */
                var fileName = file.name;
                // fileInfo = {
                //   id: uuid,
                //   name: fileName,
                //   type: file.type,
                //   source: "",
                //   size: this.formatFileSize(file.size),
                //   fileSize: file.size,
                //   picListDisplayName: this.getMultipartDisplayName(fileName),
                //   queueListDisplayName: fileName,
                //   //content: reader.result.toString(),
                //   hasUploaded: false,
                //   mouseOn: false,
                //   selectd: false,
                //   isUploading: true,
                //   uploadResult: false,
                //   uploadProcess: 0,
                //   errorMessage: "",
                //   extensionDropListId: 0,
                //   extensionName: ""
                // }
                /** @type {?} */
                var chunkTotal = Math.ceil(file.size / _this.bufferSize);
                // 标记当前附件总的分片数
                _this.fileTotalChunk[uuid] = chunkTotal;
                /** @type {?} */
                var chunkIndex = 0;
                // 标记当前附件成功的分片数
                _this.uploadedChunk[uuid] = 0;
                var _loop_1 = function () {
                    /** @type {?} */
                    var uploadInfo = new formdocUpload.GspFormUploadEntity();
                    uploadInfo.mode = formdocUpload.OperatingModes.Temp;
                    uploadInfo.formId = _this.getFinallyConfig("formId", extendService);
                    uploadInfo.rootId = _this.getFinallyConfig("rootId", extendService);
                    /** @type {?} */
                    var docInfo = new formdocUpload.GspFormDocInfo();
                    docInfo.fileName = fileName;
                    docInfo.metadataId = uuid;
                    docInfo.total = chunkTotal;
                    // 如果data里有数据，并且属性是配置的扩展属性
                    if (event.hasOwnProperty("data") &&
                        event["data"] &&
                        event["data"].hasOwnProperty("extProperty")) {
                        docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
                    }
                    // 下一个文件大小
                    /** @type {?} */
                    var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, file.size);
                    // File类型
                    /** @type {?} */
                    var fileData = file["nativeFile"].slice(chunkIndex * _this.bufferSize, nextSize);
                    // 读取文件
                    /** @type {?} */
                    var reader = new FileReader();
                    reader.readAsBinaryString(fileData);
                    /** @type {?} */
                    var innerIndex = chunkIndex;
                    reader.onload = (/**
                     * @return {?}
                     */
                    function () {
                        // 附件上传
                        docInfo.fileContent = btoa(reader.result.toString());
                        docInfo.index = innerIndex;
                        uploadInfo.docInfo = docInfo;
                        /** @type {?} */
                        var info = uploadInfo;
                        _this.uploadSer.uploadFile(info).subscribe((/**
                         * @param {?} result
                         * @return {?}
                         */
                        function (result) {
                            if (result && result.error) {
                                // 分片上传有返回结果就是报错了
                                observer.error(_this.errorInfoFormat(result.error, [file]));
                                observer.complete();
                                return;
                            }
                            else {
                                _this.uploadedChunk[uuid]++;
                                if (_this.uploadedChunk[docInfo.metadataId] ==
                                    _this.fileTotalChunk[docInfo.metadataId]) {
                                    // 判断是所有分片都上传完成
                                    file.progress = {
                                        status: extendFileUpload.UploadStatus.Done,
                                        data: {
                                            percentage: 100,
                                        },
                                    };
                                    file.response = docInfo;
                                    delete _this.uploadedChunk[uuid];
                                    delete _this.fileTotalChunk[uuid];
                                    observer.next({ type: "done", files: [file] });
                                    observer.complete();
                                }
                                else {
                                    // 分片上传正常
                                    /** @type {?} */
                                    var percentage = Number.parseInt(((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid]) *
                                        100).toFixed(0));
                                    // 判断未上传完成
                                    file.progress = {
                                        status: extendFileUpload.UploadStatus.Uploading,
                                        data: {
                                            percentage: percentage,
                                        },
                                    };
                                    observer.next({ type: "uploading", files: [file] });
                                }
                            }
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            delete _this.uploadedChunk[uuid];
                            delete _this.fileTotalChunk[uuid];
                            observer.error(_this.errorInfoFormat(error, [file]));
                            observer.complete();
                        }));
                    });
                    chunkIndex = chunkIndex + 1;
                };
                while (chunkIndex < chunkTotal) {
                    _loop_1();
                }
            }));
        };
        /**
         * 获取分片的附件大小
         * @param size
         */
        /**
         * 获取分片的附件大小
         * @private
         * @param {?} size
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.formatFileSize = /**
         * 获取分片的附件大小
         * @private
         * @param {?} size
         * @return {?}
         */
        function (size) {
            if (size < 102400)
                return (size / 1024).toFixed(1) + "K";
            else if (size < 1024 * 1024)
                return (size / 1024).toFixed(0) + "K";
            else if (size < 100 * 1024 * 1024)
                return (size / 1024 / 1024).toFixed(1) + "M";
            else if (size < 1024 * 1024 * 1024)
                return (size / 1024 / 1024).toFixed(0) + "M";
            else
                return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
        };
        /**
         * 获取分片的 附件名称
         * @param fileName
         */
        /**
         * 获取分片的 附件名称
         * @private
         * @param {?} fileName
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.getMultipartDisplayName = /**
         * 获取分片的 附件名称
         * @private
         * @param {?} fileName
         * @return {?}
         */
        function (fileName) {
            if (fileName.length <= 10)
                return fileName;
            else {
                /** @type {?} */
                var headContent = fileName.substring(0, 2);
                /** @type {?} */
                var tailContent = fileName.substring(fileName.lastIndexOf(".") - 2);
                return headContent + "…" + tailContent;
            }
        };
        /**
         * @private
         * @param {?} error
         * @param {?} files
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.errorInfoFormat = /**
         * @private
         * @param {?} error
         * @param {?} files
         * @return {?}
         */
        function (error, files) {
            //
            /** @type {?} */
            var errorFiles = files.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return { id: item.id, name: item.name };
            }));
            /** @type {?} */
            var errorMsg = this.configSer.getLocalStr('uploadAdapt.uploadError');
            if (error) {
                return Object.assign(error, { files: errorFiles }, {
                    message: error["Message"] || error["extensionMessage"] || errorMsg,
                    type: "error",
                });
            }
            else {
                return Object.assign({ files: errorFiles }, { message: errorMsg, type: "error" });
            }
        };
        /**
         * 返回最终属性值
         * @param key
         * @param configValue
         * @param extendValue
         */
        /**
         * 返回最终属性值
         * @private
         * @param {?} key
         * @param {?} extendValue
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.getFinallyConfig = /**
         * 返回最终属性值
         * @private
         * @param {?} key
         * @param {?} extendValue
         * @return {?}
         */
        function (key, extendValue) {
            if (extendValue && extendValue.hasOwnProperty(key)) {
                return extendValue[key];
            }
            return this.extendData[key];
        };
        /**
         * @private
         * @param {?} files
         * @param {?} fileName
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.findFileIndexByFileName = /**
         * @private
         * @param {?} files
         * @param {?} fileName
         * @return {?}
         */
        function (files, fileName) {
            // 按照肯定能找到文件来处理
            /** @type {?} */
            var findIndex = files.findIndex((/**
             * @param {?} file
             * @return {?}
             */
            function (file) { return file.name == fileName; }));
            return findIndex;
        };
        //#region 大文件分片上传
        //#region 大文件分片上传
        /**
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uploadBigFile = 
        //#region 大文件分片上传
        /**
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            var _this = this;
            /** @type {?} */
            var uploadChunks$ = new rxjs.Subject();
            /** @type {?} */
            var _files = files.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var chunks = _this._getBigFileChunks(n, event, extendService);
                return __assign({}, n, chunks);
            }));
            /** @type {?} */
            var uploadchunks$ = _files.map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                return _this.uploadChunks(f, uploadChunks$);
            }));
            rxjs.concat.apply(void 0, __spread(uploadchunks$)).subscribe((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                f.progress = {
                    status: extendFileUpload.UploadStatus.Done,
                    data: {
                        percentage: 100,
                    },
                };
                f.response = JSON.parse(f.chunks[0].get("docInfo"));
                uploadChunks$.next({ type: "done", files: [f] });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                uploadChunks$.error(_this.errorInfoFormat(error, files));
                uploadChunks$.complete();
            }), (/**
             * @return {?}
             */
            function () {
                uploadChunks$.complete();
            }));
            return uploadChunks$.asObservable();
        };
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uploadFileChunk = /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            /** @type {?} */
            var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/slice";
            return this.uploadSer["http"]["http"]
                .post(url, file.chunks[file.total])
                .pipe(operators.switchMap((/**
             * @return {?}
             */
            function () {
                return rxjs.of(file);
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.of(error);
            })));
        };
        /**
         * @private
         * @param {?} file
         * @param {?} upChunk$
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uploadChunks = /**
         * @private
         * @param {?} file
         * @param {?} upChunk$
         * @return {?}
         */
        function (file, upChunk$) {
            var _this = this;
            /** @type {?} */
            var doChunksRemain = (/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i > -1; });
            /** @type {?} */
            var completeUpload = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return rxjs.of(f); });
            /** @type {?} */
            var uploadChunk = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                return _this.uploadFileChunk(f).pipe(operators.delay(100), operators.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    // 块数为0 时，即为此文件的所有块均上传成功
                    f.progress = {
                        status: extendFileUpload.UploadStatus.Uploading,
                        data: {
                            percentage: ((f.total / f.chunks.length) * 100).toFixed(0),
                        },
                    };
                    upChunk$.next({ type: "uploading", files: [f] });
                    return f;
                })));
            });
            /** @type {?} */
            var createMultipartUpload = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return rxjs.of(f); });
            return createMultipartUpload(file).pipe(
            // tap((f) => console.log("upload file", f.name)),
            operators.expand((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (doChunksRemain(--file.total)) {
                    return uploadChunk(file);
                }
                return rxjs.EMPTY;
            })), 
            // tap((f: any) => {
            //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);
            // }),
            operators.last(), operators.switchMap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return completeUpload(file);
            })));
        };
        /**
         * @private
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype._getBigFileChunks = /**
         * @private
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (file, event, extendService) {
            /** @type {?} */
            var uuid = this.uuid();
            /** @type {?} */
            var formId = this.getFinallyConfig("formId", extendService);
            /** @type {?} */
            var rootId = this.getFinallyConfig("rootId", extendService);
            /** @type {?} */
            var realChunkSize = (event.chunkSize || 1) * this.bufferSize;
            /** @type {?} */
            var chunkTotal = Math.ceil(file.size / realChunkSize);
            /** @type {?} */
            var chunkIndex = 0;
            /** @type {?} */
            var fileChunks = { chunks: [], total: chunkTotal };
            while (chunkIndex < chunkTotal) {
                /** @type {?} */
                var uploadInfo = new formdocUpload.GspFormUploadEntity();
                uploadInfo.mode = formdocUpload.OperatingModes.Temp;
                uploadInfo.formId = formId;
                uploadInfo.rootId = rootId;
                /** @type {?} */
                var docInfo = new formdocUpload.GspFormDocInfo();
                docInfo.fileName = file.name;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                /** @type {?} */
                var nextSize = Math.min((chunkIndex + 1) * realChunkSize, file.size);
                // File类型
                /** @type {?} */
                var fileData = file["nativeFile"].slice(chunkIndex * realChunkSize, nextSize);
                docInfo.size = file.size;
                docInfo.index = chunkIndex;
                docInfo.fileContent = "";
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty("data") &&
                    event["data"] &&
                    event["data"].hasOwnProperty("extProperty")) {
                    docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
                }
                uploadInfo.docInfo = docInfo;
                //封装请求formdata
                /** @type {?} */
                var formData = new FormData();
                formData.append("uploadInfo", JSON.stringify(uploadInfo));
                formData.append("docInfo", JSON.stringify(docInfo));
                formData.append("file", fileData);
                fileChunks.chunks.push(formData);
                chunkIndex = chunkIndex + 1;
            }
            return fileChunks;
        };
        /**
         * 获取跟目录的配置
         * @param rootId
         * @returns
         */
        /**
         * 获取跟目录的配置
         * @private
         * @param {?} rootId
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.getServerConfig = /**
         * 获取跟目录的配置
         * @private
         * @param {?} rootId
         * @return {?}
         */
        function (rootId) {
            return this.uploadSer.getUploadInfo(rootId);
        };
        //#endregion
        //#region 读取相关配置分片上传至云服务器
        //#endregion
        //#region 读取相关配置分片上传至云服务器
        /**
         * @private
         * @param {?} file
         * @param {?} uploadChunks$
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.unorderedUploadBigFile = 
        //#endregion
        //#region 读取相关配置分片上传至云服务器
        /**
         * @private
         * @param {?} file
         * @param {?} uploadChunks$
         * @return {?}
         */
        function (file, uploadChunks$) {
            var _this = this;
            if (!file.partList) {
                file.partList = [];
            }
            this.initMultiUpload(file).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r && r.error) {
                    uploadChunks$.error(_this.errorInfoFormat(r.error, [file]));
                    uploadChunks$.complete();
                    return;
                }
                file.chunks.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    _this.multiUpload(n, r).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    function (res) {
                        if (res && res.error) {
                            uploadChunks$.error(_this.errorInfoFormat(res.error, [file]));
                            uploadChunks$.complete();
                            return;
                        }
                        file.progress = {
                            status: extendFileUpload.UploadStatus.Uploading,
                            data: {
                                percentage: (res.index / file.chunks.length * 100).toFixed(0)
                            }
                        };
                        uploadChunks$.next({ type: 'uploading', files: [file] });
                        if (res && res.result) {
                            file.partList.push(res.result);
                        }
                        if (file.partList.length === file.chunks.length) {
                            /** @type {?} */
                            var completeMultiUploadRequest = {};
                            completeMultiUploadRequest.metadataId = file.metadataId;
                            completeMultiUploadRequest.partList = file.partList;
                            completeMultiUploadRequest.rootId = _this.rootId;
                            completeMultiUploadRequest.uploadId = file.uploadId;
                            completeMultiUploadRequest.size = file.size;
                            _this.completeMultiUpload(completeMultiUploadRequest).subscribe((/**
                             * @param {?} cmur
                             * @return {?}
                             */
                            function (cmur) {
                                if (cmur && cmur.status != 200) {
                                    uploadChunks$.error(_this.errorInfoFormat(cmur.error, [file]));
                                    uploadChunks$.complete();
                                    return;
                                }
                                file.progress = {
                                    status: extendFileUpload.UploadStatus.Done,
                                    data: {
                                        percentage: 100
                                    }
                                };
                                file.response = JSON.parse(file.chunks[0].get("docInfo"));
                                uploadChunks$.next({ type: 'done', files: [file] });
                            }), (/**
                             * @param {?} error
                             * @return {?}
                             */
                            function (error) {
                                uploadChunks$.error(_this.errorInfoFormat(error, [file]));
                                uploadChunks$.complete();
                            }));
                        }
                    }));
                }));
            }));
        };
        /**
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uploadBigFile2 = /**
         * @param {?} files
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (files, event, extendService) {
            var _this = this;
            /** @type {?} */
            var uploadChunks$ = new rxjs.Subject();
            /** @type {?} */
            var formId = this.getFinallyConfig('formId', extendService);
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            var _files = files.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var chunks = _this._getBigFileChunks2(n, event, extendService);
                return __assign({}, n, chunks, { formId: formId, rootId: rootId });
            }));
            // 无序上传
            _files.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.unorderedUploadBigFile(n, uploadChunks$);
            }));
            // 有序上传
            // const uploadchunks$: Observable<any>[] =  _files.map((f) => this.uploadChunks2(f, uploadChunks$));
            // concat(...uploadchunks$).pipe(
            //     switchMap((f: any) => {
            //         let completeMultiUploadRequest: any = {};
            //         completeMultiUploadRequest.metadataId = f.metadataId;
            //         completeMultiUploadRequest.partList = f.partList;
            //         completeMultiUploadRequest.rootId = this.rootId;
            //         completeMultiUploadRequest.uploadId = f.uploadId;
            //         completeMultiUploadRequest.size = f.size;
            //         return this.completeMultiUpload(completeMultiUploadRequest).pipe(
            //             map(() => f)
            //         );
            //     })
            // ).subscribe(
            //     (f: any) => {
            //         f.progress = {
            //             status: UploadStatus.Done,
            //             data:  {
            //                 percentage: 100
            //             }
            //         };
            //         f.response = JSON.parse(f.chunks[0].get("docInfo"));
            //         uploadChunks$.next({type: 'done', files:[f]});
            //     },
            //     error => {
            //         uploadChunks$.error(this.errorInfoFormat(error, files));
            //         uploadChunks$.complete();
            //     },
            //     () => {
            //         uploadChunks$.complete();
            //         // console.log("all files uploaded")
            //     }
            // );
            return uploadChunks$.asObservable();
        };
        /**
         * @private
         * @param {?} file
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.initMultiUpload = /**
         * @private
         * @param {?} file
         * @return {?}
         */
        function (file) {
            /** @type {?} */
            var initRequest = {};
            initRequest.path = file.formId;
            initRequest.metadataId = this.uuid();
            initRequest.rootId = file.rootId;
            initRequest.size = file.size;
            initRequest.fileName = file.name;
            /** @type {?} */
            var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/init";
            return this.uploadSer['http']['http'].post(url, initRequest).pipe(operators.tap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                file.metadataId = initRequest.metadataId;
                file.uploadId = res.uploadId;
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.of(error);
            })), operators.map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                res.metadataId = initRequest.metadataId;
                return res;
            })));
        };
        /**
         * @private
         * @param {?} request
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.completeMultiUpload = /**
         * @private
         * @param {?} request
         * @return {?}
         */
        function (request) {
            /** @type {?} */
            var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/complete";
            return this.uploadSer['http']['http'].post(url, request).pipe(operators.tap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.of(error);
            })));
        };
        /**
         * @private
         * @param {?} formdata
         * @param {?} r
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.multiUpload = /**
         * @private
         * @param {?} formdata
         * @param {?} r
         * @return {?}
         */
        function (formdata, r) {
            /** @type {?} */
            var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/upload";
            /** @type {?} */
            var mr = JSON.parse((/** @type {?} */ (formdata.get('multiRequest'))));
            mr.uploadId = r.uploadId;
            mr.metadataId = r.metadataId;
            formdata.set('multiRequest', JSON.stringify(mr));
            /** @type {?} */
            var di = JSON.parse((/** @type {?} */ (formdata.get('docInfo'))));
            di.metadataId = r.metadataId;
            formdata.set('docInfo', JSON.stringify(di));
            return this.uploadSer['http']['http'].post(url, formdata).pipe(operators.tap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) { })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                return rxjs.of(error);
            })));
        };
        /**
         * @private
         * @param {?} file
         * @param {?} upChunk$
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype.uploadChunks2 = /**
         * @private
         * @param {?} file
         * @param {?} upChunk$
         * @return {?}
         */
        function (file, upChunk$) {
            var _this = this;
            /** @type {?} */
            var total = file.total;
            /** @type {?} */
            var t = -1;
            /** @type {?} */
            var doChunksRemain = (/**
             * @param {?} i
             * @return {?}
             */
            function (i) { return i < total; });
            /** @type {?} */
            var completeUpload = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return rxjs.of(f); });
            /** @type {?} */
            var uploadChunk = (/**
             * @param {?} f
             * @param {?} uploadId
             * @return {?}
             */
            function (f, uploadId) {
                return _this.multiUpload(f, uploadId).pipe(operators.delay(100), operators.map((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    // 块数为0 时，即为此文件的所有块均上传成功
                    file.progress = {
                        status: extendFileUpload.UploadStatus.Uploading,
                        data: {
                            percentage: (res.index / file.chunks.length * 100).toFixed(0)
                        }
                    };
                    upChunk$.next({ type: 'uploading', files: [file] });
                    if (res && res.result) {
                        if (!file.partList) {
                            file.partList = [];
                        }
                        file.partList.push(res.result);
                    }
                    return file;
                })));
            });
            /** @type {?} */
            var createMultipartUpload = (/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                return _this.initMultiUpload(f);
                // return of(f)
            });
            return createMultipartUpload(file).pipe(
            // tap((f) => console.log("upload file", f.name)),
            operators.expand((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (doChunksRemain(++t)) {
                    return uploadChunk(file.chunks[t], r);
                }
                return rxjs.EMPTY;
            })), 
            // tap((f: any) => {
            //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);
            // }),
            operators.last(), operators.switchMap((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                return completeUpload(file);
            })));
        };
        /**
         * @private
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        FfileuploadAdaptUnifileService.prototype._getBigFileChunks2 = /**
         * @private
         * @param {?} file
         * @param {?} event
         * @param {?} extendService
         * @return {?}
         */
        function (file, event, extendService) {
            /** @type {?} */
            var uuid = this.uuid();
            /** @type {?} */
            var _bifferSize = Math.max(event.chunkSize, 5) * this.bufferSize;
            /** @type {?} */
            var chunkTotal = Math.ceil(file.size / _bifferSize);
            /** @type {?} */
            var chunkIndex = 0;
            /** @type {?} */
            var fileChunks = { chunks: [], total: chunkTotal };
            /** @type {?} */
            var rootId = this.getFinallyConfig('rootId', extendService);
            while (chunkIndex < chunkTotal) {
                /** @type {?} */
                var nextSize = Math.min((chunkIndex + 1) * _bifferSize, file.size);
                // File类型
                /** @type {?} */
                var fileData = file['nativeFile'].slice(chunkIndex * _bifferSize, nextSize);
                /** @type {?} */
                var multiRequest = {};
                multiRequest.metadataId = uuid;
                multiRequest.rootId = rootId;
                // multiRequest.uploadId = uploadId;
                multiRequest.index = chunkIndex;
                multiRequest.total = chunkTotal;
                multiRequest.size = fileData.size;
                //封装请求formdata
                /** @type {?} */
                var formData = new FormData();
                formData.append('multiRequest', JSON.stringify(multiRequest));
                formData.append('file', fileData);
                /** @type {?} */
                var docInfo = new formdocUpload.GspFormDocInfo();
                docInfo.fileName = file.name;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                docInfo.size = file.size;
                docInfo.index = chunkIndex;
                docInfo.fileContent = "";
                formData.append("docInfo", JSON.stringify(docInfo));
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty("data") &&
                    event["data"] &&
                    event["data"].hasOwnProperty("extProperty")) {
                    docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
                }
                fileChunks.chunks.push(formData);
                chunkIndex = chunkIndex + 1;
            }
            return fileChunks;
        };
        FfileuploadAdaptUnifileService.previous = 0;
        FfileuploadAdaptUnifileService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: "root",
                    },] }
        ];
        /** @nocollapse */
        FfileuploadAdaptUnifileService.ctorParameters = function () { return [
            { type: formdocUpload.UploadService },
            { type: FFileUploadAdaptUnifileConfigService },
            { type: core.Injector, decorators: [{ type: core.Optional }] }
        ]; };
        /** @nocollapse */ FfileuploadAdaptUnifileService.ngInjectableDef = core.defineInjectable({ factory: function FfileuploadAdaptUnifileService_Factory() { return new FfileuploadAdaptUnifileService(core.inject(formdocUpload.UploadService), core.inject(FFileUploadAdaptUnifileConfigService), core.inject(core.INJECTOR, 8)); }, token: FfileuploadAdaptUnifileService, providedIn: "root" });
        return FfileuploadAdaptUnifileService;
    }(extendFileUpload.UploadServerService));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.previous;
        /** @type {?} */
        FfileuploadAdaptUnifileService.prototype.extendData;
        /** @type {?} */
        FfileuploadAdaptUnifileService.prototype.bufferSize;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.uploadedChunk;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.fileTotalChunk;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.formId;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.rootId;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.serverConfig;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.uploadSer;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.configSer;
        /**
         * @type {?}
         * @private
         */
        FfileuploadAdaptUnifileService.prototype.inject;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffilepreview-adapt-unifile.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FFilePreviewAdaptUnifileDirective = /** @class */ (function () {
        function FFilePreviewAdaptUnifileDirective(previewSer) {
            this.previewSer = previewSer;
            /**
             * 处理扩展的服务器端配置
             */
            this._extendServeConfig = null;
        }
        /**
         * 捕获预览事件
         * @param fileInfo
         */
        /**
         * 捕获预览事件
         * @param {?} fileInfo
         * @return {?}
         */
        FFilePreviewAdaptUnifileDirective.prototype.filePreviewEventHandler = /**
         * 捕获预览事件
         * @param {?} fileInfo
         * @return {?}
         */
        function (fileInfo) {
            // 可以通过属性 extendServerConfig设置，也可以通过一体化组件的Input属性配置
            /** @type {?} */
            var previewOpts = Object.assign(this.extendServerConfig || {});
            previewOpts.options = Object.assign(previewOpts.options || {}, { showDownload: !!fileInfo.showDownload }, { showComments: !!fileInfo.showComments }, { modeless: !!fileInfo.modeless });
            if (previewOpts.options.showHeader === undefined) {
                previewOpts.options.showHeader = true;
            }
            if (previewOpts.options.showFileList === undefined) {
                previewOpts.options.showFileList = true;
            }
            if (previewOpts.options.showComments === undefined) {
                previewOpts.options.showComments = false;
            }
            if (previewOpts.options.modeless === undefined) {
                previewOpts.options.modeless = false;
            }
            // 支持修订模式
            // 文件扩展名
            /** @type {?} */
            var extendName = fileInfo.name.substr(fileInfo.name.lastIndexOf('.') + 1).toLowerCase();
            /** @type {?} */
            var enablePreviews = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx', 'jpg', 'jpeg', 'png', 'gif', 'bmp', 'pdf', 'txt', 'wps', 'wpt', 'et', 'dps'];
            if (enablePreviews.includes(extendName)) {
                this.previewSer.previewFile(fileInfo, previewOpts);
            }
            else {
                /** @type {?} */
                var msg = this.previewSer.getLocalStr("previewAdapt.notSupport");
                if (this.previewSer.notifySer) {
                    this.previewSer.notifySer.warning(msg);
                }
                else {
                    alert(msg);
                }
            }
        };
        /**
         * 捕获下载事件
         * @param fileInfo
         */
        /**
         * 捕获下载事件
         * @param {?} downloadEv
         * @return {?}
         */
        FFilePreviewAdaptUnifileDirective.prototype.fileDownloadEventHandler = /**
         * 捕获下载事件
         * @param {?} downloadEv
         * @return {?}
         */
        function (downloadEv) {
            // 如果是批量下载, downloadEv={fileInfos:[],name:}
            if (downloadEv && downloadEv['fileInfos'].length > 0) {
                if (downloadEv['fileInfos'].length > 1) {
                    this.previewSer.multiDownloadFilesWidthName(downloadEv['fileInfos'], downloadEv['name'], this.extendServerConfig);
                }
                else {
                    this.previewSer.downloadFile(downloadEv['fileInfos'][0], this.extendServerConfig);
                }
            }
        };
        Object.defineProperty(FFilePreviewAdaptUnifileDirective.prototype, "extendServerConfig", {
            get: /**
             * @return {?}
             */
            function () {
                return this._extendServeConfig;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._extendServeConfig = value;
                this.previewSer.setPreviwExtendServerConfig(value);
            },
            enumerable: true,
            configurable: true
        });
        FFilePreviewAdaptUnifileDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[fFilePreviewAdaptUnifile]',
                        providers: [FfilepreviewAdaptUnifileService]
                    },] }
        ];
        /** @nocollapse */
        FFilePreviewAdaptUnifileDirective.ctorParameters = function () { return [
            { type: FfilepreviewAdaptUnifileService }
        ]; };
        FFilePreviewAdaptUnifileDirective.propDecorators = {
            filePreviewEventHandler: [{ type: core.HostListener, args: ['filePreviewEvent', ['$event'],] }],
            fileDownloadEventHandler: [{ type: core.HostListener, args: ['fileDownloadEvent', ['$event'],] }],
            extendServerConfig: [{ type: core.Input }]
        };
        return FFilePreviewAdaptUnifileDirective;
    }());
    if (false) {
        /**
         * 处理扩展的服务器端配置
         * @type {?}
         * @private
         */
        FFilePreviewAdaptUnifileDirective.prototype._extendServeConfig;
        /**
         * @type {?}
         * @private
         */
        FFilePreviewAdaptUnifileDirective.prototype.previewSer;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: lib/ffileupload-adapt-unifile.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FfileuploadAdaptUnifileModule = /** @class */ (function () {
        function FfileuploadAdaptUnifileModule() {
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        FfileuploadAdaptUnifileModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
        function (config) {
            return {
                ngModule: FfileuploadAdaptUnifileModule,
                providers: [
                    { provide: FFileUploadAdaptUnifileConfigToken, useValue: config },
                    FFileUploadAdaptUnifileConfigService,
                    FfilepreviewAdaptUnifileService,
                    fileViewer.FileViewerService
                ]
            };
        };
        FfileuploadAdaptUnifileModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [FFilePreviewAdaptUnifileDirective, FfilepreviewAdaptSeeimgComponent, FFileAdaptDownloadFileDirective, FFileAdaptPreviewFileDirective],
                        imports: [
                            common.CommonModule,
                            formdocUpload.UploadDialogMoudle,
                            fileViewer.FileListModule,
                            extendFileUpload.FFileUploadModule.forRoot(null, FfileuploadAdaptUnifileService),
                            uiCommon.FarrisCommonModule,
                            uiLocale.LocaleModule.forRoot()
                        ],
                        exports: [
                            extendFileUpload.FFileUploadModule,
                            FFilePreviewAdaptUnifileDirective,
                            FfilepreviewAdaptSeeimgComponent,
                            FFileAdaptDownloadFileDirective,
                            FFileAdaptPreviewFileDirective
                        ],
                        providers: [
                            FFileUploadAdaptUnifileConfigService,
                            FfilepreviewAdaptUnifileService,
                            fileViewer.FileViewerService
                        ]
                    },] }
        ];
        return FfileuploadAdaptUnifileModule;
    }());

    exports.FFileAdaptDownloadFileDirective = FFileAdaptDownloadFileDirective;
    exports.FFileAdaptPreviewFileDirective = FFileAdaptPreviewFileDirective;
    exports.FFilePreviewAdaptUnifileDirective = FFilePreviewAdaptUnifileDirective;
    exports.FFileUploadAdaptUnifileConfigService = FFileUploadAdaptUnifileConfigService;
    exports.FFileUploadAdaptUnifileConfigToken = FFileUploadAdaptUnifileConfigToken;
    exports.FfilepreviewAdaptSeeimgComponent = FfilepreviewAdaptSeeimgComponent;
    exports.FfilepreviewAdaptUnifileService = FfilepreviewAdaptUnifileService;
    exports.FfileuploadAdaptUnifileModule = FfileuploadAdaptUnifileModule;
    exports.FfileuploadAdaptUnifileService = FfileuploadAdaptUnifileService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=farris-extend-fileupload-adapt-unifile.umd.js.map
