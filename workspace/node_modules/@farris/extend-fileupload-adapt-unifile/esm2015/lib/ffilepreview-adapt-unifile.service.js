/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Injector, Optional } from '@angular/core';
import { NotifyService } from '@farris/ui-notify';
import { FileViewerService } from '@gsp-svc/file-viewer';
import { DownloadService } from '@gsp-svc/formdoc-upload';
import { FFileUploadAdaptUnifileConfigService } from './ffileupload-adapt-unifile.config';
import { WEBAPI_PREFIX_TOKEN } from '@farris/ui-common';
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/file-viewer";
import * as i2 from "./ffileupload-adapt-unifile.config";
import * as i3 from "@gsp-svc/formdoc-upload";
export class FfilepreviewAdaptUnifileService {
    /**
     * @param {?} fileviewSer
     * @param {?} configSer
     * @param {?} downloadSer
     * @param {?} inject
     */
    constructor(fileviewSer, configSer, downloadSer, inject) {
        this.fileviewSer = fileviewSer;
        this.configSer = configSer;
        this.downloadSer = downloadSer;
        this.inject = inject;
        // 暂时用于简单合并
        this.previewExtendServerConfig = null;
        this.notifySer = null;
        this.perfixStr = '';
        this.extendData = this.configSer.getConfig();
        this.notifySer = this.fileviewSer['injector'].get(NotifyService, null);
        if (this.notifySer) {
            this.configSer.setLocalState(this.notifySer.localeService);
        }
        // 此处inject的时机和upload服务里的一样，此处不用再判断多语言
        if (this.inject) {
            if (WEBAPI_PREFIX_TOKEN) {
                this.perfixStr = this.inject.get(WEBAPI_PREFIX_TOKEN, '');
                this.configSer.setBasePath(this.perfixStr);
            }
        }
    }
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    getFinallyConfig(key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        // 避免下载等其他指令再传入扩展配置
        if (this.previewExtendServerConfig && this.previewExtendServerConfig.hasOwnProperty(key)) {
            return this.previewExtendServerConfig[key];
        }
        // 来自module中forRoot的配置
        if (this.extendData.hasOwnProperty(key)) {
            return this.extendData[key];
        }
        return null;
    }
    /**
     * 预览单个文件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    previewFile(info, extendService) {
        return this.previewFileList([info], extendService);
    }
    /**
     * 预览整个列表
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    previewFileList(infos, extendService) {
        //metadataIdList: string[]
        /** @type {?} */
        let rootId = this.getFinallyConfig('rootId', extendService);
        /** @type {?} */
        let metadataIdList = [];
        infos.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            metadataIdList.push(item.extend['metadataId']);
        }));
        /** @type {?} */
        let options = this.getFinallyConfig('options', extendService);
        if (options) {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId, options);
        }
        else {
            return this.fileviewSer.viewerFileList(metadataIdList, rootId);
        }
    }
    /**
     * 下载附件
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    downloadFile(info, extendService) {
        if (!info.id) {
            /** @type {?} */
            let failMsg = this.getLocalStr('uploadAdapt.needFile');
            if (this.notifySer) {
                this.notifySer.warning(failMsg);
                return;
            }
            else {
                throw new Error(failMsg);
            }
        }
        window.open(this.getImgSrc(info, extendService));
    }
    /**
     * 下载附件
     * @param {?} infos
     * @param {?} extendService
     * @return {?}
     */
    multiDownloadFiles(infos, extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            let metadataIdList = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                metadataIdList.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            let url = this.downloadSer.getMultipleDownloadUrl(JSON.stringify(metadataIdList), rootId);
            window.open(url);
        }
    }
    /**
     * @param {?} infos
     * @param {?=} name
     * @param {?=} extendService
     * @return {?}
     */
    multiDownloadFilesWidthName(infos, name = "", extendService) {
        //metadataIdList: string[]
        if (infos.length == 1) {
            this.downloadFile(infos[0], extendService);
        }
        else {
            /** @type {?} */
            let rootId = this.getFinallyConfig('rootId', extendService);
            /** @type {?} */
            let metadataIdList = [];
            infos.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                metadataIdList.push(item.extend['metadataId']);
            }));
            /** @type {?} */
            let url = this.downloadSer.getMultipleDownloadUrlWithName(JSON.stringify(metadataIdList), rootId, name);
            window.open(url);
        }
    }
    /**
     * 获取下载链接
     * @param {?} info
     * @param {?} extendService
     * @return {?}
     */
    getImgSrc(info, extendService) {
        if (!info.id) {
            /** @type {?} */
            let failMsg = this.getLocalStr('uploadAdapt.needFile');
            if (this.notifySer) {
                this.notifySer.warning(failMsg);
                return;
            }
            else {
                throw new Error(failMsg);
            }
        }
        /** @type {?} */
        let url = '';
        /** @type {?} */
        let attachId = info.extend['metadataId'];
        /** @type {?} */
        let rootId = this.getFinallyConfig('rootId', extendService);
        // 文档服务服务单元名进行规范性调整，由document修改为dfs
        if (this.downloadSer) {
            if (rootId) {
                url = this.downloadSer.getDownloadUrl(attachId, rootId);
            }
        }
        else if (rootId) {
            console.warn(this.getLocalStr('uploadAdapt.recompile'));
            url = `${this.perfixStr}/api/runtime/dfs/v1.0/formdoc/filecontent?metadataid=${attachId}&rootid=${rootId}`;
        }
        return url;
    }
    /**
     * 根据预览指令的扩展配置获取
     * @param {?} value
     * @return {?}
     */
    setPreviwExtendServerConfig(value) {
        this.previewExtendServerConfig = value;
    }
    /**
     * @return {?}
     */
    getPreviewExtendServerConfig() {
        return this.previewExtendServerConfig;
    }
    /**
     * @param {?} lanKey
     * @return {?}
     */
    getLocalStr(lanKey) {
        return this.configSer.getLocalStr(lanKey);
    }
}
FfilepreviewAdaptUnifileService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FfilepreviewAdaptUnifileService.ctorParameters = () => [
    { type: FileViewerService },
    { type: FFileUploadAdaptUnifileConfigService },
    { type: DownloadService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
/** @nocollapse */ FfilepreviewAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfilepreviewAdaptUnifileService_Factory() { return new FfilepreviewAdaptUnifileService(i0.inject(i1.FileViewerService), i0.inject(i2.FFileUploadAdaptUnifileConfigService), i0.inject(i3.DownloadService, 8), i0.inject(i0.INJECTOR, 8)); }, token: FfilepreviewAdaptUnifileService, providedIn: "root" });
if (false) {
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.extendData;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.previewExtendServerConfig;
    /** @type {?} */
    FfilepreviewAdaptUnifileService.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.perfixStr;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.fileviewSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.configSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.downloadSer;
    /**
     * @type {?}
     * @private
     */
    FfilepreviewAdaptUnifileService.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,