/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional, InjectionToken, Inject, } from '@angular/core';
import { FARRIS_UPLOADSERVICE_LOCALEDATA } from './locale';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function FFileUploadAdaptUnifileConfig() { }
if (false) {
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.rootId;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.formId;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.mode;
    /** @type {?|undefined} */
    FFileUploadAdaptUnifileConfig.prototype.options;
}
/** @type {?} */
export const FFileUploadAdaptUnifileConfigToken = new InjectionToken('MFFileUploadAdaptUnifileConfig');
export class FFileUploadAdaptUnifileConfigService {
    /**
     * @param {?} exConfig
     */
    constructor(exConfig) {
        this.config = (/** @type {?} */ ({
            rootId: '',
            formId: '',
            mode: 0
        }));
        this.basePerfixStr = '';
        if (exConfig) {
            Object.assign(this.config, exConfig);
        }
    }
    /**
     * 获取config属性的值
     * @return {?}
     */
    getConfig() {
        return this.config;
    }
    /**
     * 设置config的属性值
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setConfig(key, value) {
        this.config[key] = value;
    }
    /**
     * 设置基础路径
     * @param {?} value
     * @return {?}
     */
    setBasePath(value) {
        this.basePerfixStr = value;
    }
    /**
     * 获取基础路径
     * @return {?}
     */
    getBasePath() {
        return this.basePerfixStr;
    }
    /**
     * @param {?} localSer
     * @return {?}
     */
    setLocalState(localSer) {
        if (this.localSerStorage) {
            return true;
        }
        if (localSer && !this.localSerStorage) {
            localSer.setLocaleData(FARRIS_UPLOADSERVICE_LOCALEDATA);
            this.localSerStorage = localSer;
            return true;
        }
        return false;
    }
    /**
     * 获取多语言数据
     * 某些组件没有重新生成，要支持多语言
     * @param {?} lanKey
     * @return {?}
     */
    getLocalStr(lanKey) {
        /** @type {?} */
        let result = "";
        /** @type {?} */
        let defaultLocalId = 'en';
        if (this.localSerStorage) {
            result = this.localSerStorage.getValue(lanKey);
        }
        else {
            defaultLocalId = localStorage.getItem('languageCode') || 'zh-CHS';
        }
        if (!result) {
            result = lanKey.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), FARRIS_UPLOADSERVICE_LOCALEDATA[defaultLocalId]);
        }
        return result;
    }
}
FFileUploadAdaptUnifileConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FFileUploadAdaptUnifileConfigService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [FFileUploadAdaptUnifileConfigToken,] }] }
];
/** @nocollapse */ FFileUploadAdaptUnifileConfigService.ngInjectableDef = i0.defineInjectable({ factory: function FFileUploadAdaptUnifileConfigService_Factory() { return new FFileUploadAdaptUnifileConfigService(i0.inject(FFileUploadAdaptUnifileConfigToken, 8)); }, token: FFileUploadAdaptUnifileConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    FFileUploadAdaptUnifileConfigService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FFileUploadAdaptUnifileConfigService.prototype.basePerfixStr;
    /**
     * @type {?}
     * @private
     */
    FFileUploadAdaptUnifileConfigService.prototype.localSerStorage;
}
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS5jb25maWcuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2V4dGVuZC1maWxldXBsb2FkLWFkYXB0LXVuaWZpbGUvIiwic291cmNlcyI6WyJsaWIvZmZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS5jb25maWcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxHQUFHLE1BQU0sZUFBZSxDQUFDO0FBRTlFLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLFVBQVUsQ0FBQzs7Ozs7QUFDM0QsbURBS0M7OztJQUpHLCtDQUFnQjs7SUFDaEIsK0NBQWdCOztJQUNoQiw2Q0FBYzs7SUFDZCxnREFBYTs7O0FBRWpCLE1BQU0sT0FBTyxrQ0FBa0MsR0FBRyxJQUFJLGNBQWMsQ0FBZ0MsZ0NBQWdDLENBQUM7QUFJckksTUFBTSxPQUFPLG9DQUFvQzs7OztJQVE3QyxZQUFvRSxRQUF1QztRQVBuRyxXQUFNLEdBQUcsbUJBQUE7WUFDYixNQUFNLEVBQUUsRUFBRTtZQUNWLE1BQU0sRUFBRSxFQUFFO1lBQ1YsSUFBSSxFQUFFLENBQUM7U0FDVixFQUFpQyxDQUFDO1FBQzNCLGtCQUFhLEdBQUMsRUFBRSxDQUFDO1FBR3JCLElBQUksUUFBUSxFQUFFO1lBQ1YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1NBQ3hDO0lBQ0wsQ0FBQzs7Ozs7SUFJRCxTQUFTO1FBQ0wsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3ZCLENBQUM7Ozs7Ozs7SUFNRCxTQUFTLENBQUMsR0FBRyxFQUFFLEtBQUs7UUFDaEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFLLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBS0QsV0FBVyxDQUFDLEtBQVk7UUFDcEIsSUFBSSxDQUFDLGFBQWEsR0FBQyxLQUFLLENBQUM7SUFDN0IsQ0FBQzs7Ozs7SUFLRCxXQUFXO1FBQ1AsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzlCLENBQUM7Ozs7O0lBQ0QsYUFBYSxDQUFDLFFBQXNCO1FBQ2hDLElBQUcsSUFBSSxDQUFDLGVBQWUsRUFBQztZQUNwQixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsSUFBRyxRQUFRLElBQUUsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFDO1lBQzNCLFFBQVEsQ0FBQyxhQUFhLENBQUMsK0JBQStCLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsZUFBZSxHQUFDLFFBQVEsQ0FBQztZQUM5QixPQUFPLElBQUksQ0FBQztTQUNuQjtRQUNELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7Ozs7SUFNRCxXQUFXLENBQUMsTUFBYTs7WUFDakIsTUFBTSxHQUFDLEVBQUU7O1lBQ1QsY0FBYyxHQUFDLElBQUk7UUFDdkIsSUFBRyxJQUFJLENBQUMsZUFBZSxFQUFDO1lBQ3BCLE1BQU0sR0FBQyxJQUFJLENBQUMsZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNoRDthQUFJO1lBQ0QsY0FBYyxHQUFFLFlBQVksQ0FBQyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUUsUUFBUSxDQUFDO1NBQ2xFO1FBQ0QsSUFBRyxDQUFDLE1BQU0sRUFBQztZQUNQLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O1lBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7Z0JBQzNDLElBQUksR0FBRyxFQUFFO29CQUNMLE9BQU8sR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNuQjtxQkFBTTtvQkFDSCxPQUFPLElBQUksQ0FBQztpQkFDZjtZQUNMLENBQUMsR0FBRSwrQkFBK0IsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsT0FBTyxNQUFNLENBQUM7SUFDbEIsQ0FBQzs7O1lBOUVKLFVBQVUsU0FBQztnQkFDUixVQUFVLEVBQUUsTUFBTTthQUNyQjs7Ozs0Q0FTZ0IsUUFBUSxZQUFJLE1BQU0sU0FBQyxrQ0FBa0M7Ozs7Ozs7O0lBUGxFLHNEQUltQzs7Ozs7SUFDbkMsNkRBQXlCOzs7OztJQUN6QiwrREFBc0M7O0FBcUV6QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwsIEluamVjdGlvblRva2VuLCBJbmplY3QsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IEZBUlJJU19VUExPQURTRVJWSUNFX0xPQ0FMRURBVEEgfSBmcm9tICcuL2xvY2FsZSc7XHJcbmV4cG9ydCBpbnRlcmZhY2UgRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWcge1xyXG4gICAgcm9vdElkPzogc3RyaW5nO1xyXG4gICAgZm9ybUlkPzogc3RyaW5nO1xyXG4gICAgbW9kZT86IG51bWJlcjsvLzAg5Luj6KGo5q2j5byP77yMMeS7o+ihqOS4tOaXtlxyXG4gICAgb3B0aW9ucz86YW55O1xyXG59XHJcbmV4cG9ydCBjb25zdCBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZ1Rva2VuID0gbmV3IEluamVjdGlvblRva2VuPEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnPignTUZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnJyk7XHJcbkBJbmplY3RhYmxlKHtcclxuICAgIHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRkZpbGVVcGxvYWRBZGFwdFVuaWZpbGVDb25maWdTZXJ2aWNlIHtcclxuICAgIHByaXZhdGUgY29uZmlnID0ge1xyXG4gICAgICAgIHJvb3RJZDogJycsXHJcbiAgICAgICAgZm9ybUlkOiAnJyxcclxuICAgICAgICBtb2RlOiAwXHJcbiAgICB9IGFzIEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnO1xyXG4gICAgcHJpdmF0ZSBiYXNlUGVyZml4U3RyPScnOyAgICBcclxuICAgIHByaXZhdGUgbG9jYWxTZXJTdG9yYWdlOkxvY2FsZVNlcnZpY2U7XHJcbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KEZGaWxlVXBsb2FkQWRhcHRVbmlmaWxlQ29uZmlnVG9rZW4pIGV4Q29uZmlnOiBGRmlsZVVwbG9hZEFkYXB0VW5pZmlsZUNvbmZpZykge1xyXG4gICAgICAgIGlmIChleENvbmZpZykge1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuY29uZmlnLCBleENvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5Zjb25maWflsZ7mgKfnmoTlgLxcclxuICAgICAqL1xyXG4gICAgZ2V0Q29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbmZpZztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6K6+572uY29uZmln55qE5bGe5oCn5YC8XHJcbiAgICAgKiBAcGFyYW0ga2V5IFxyXG4gICAgICogQHBhcmFtIHZhbHVlIFxyXG4gICAgICovXHJcbiAgICBzZXRDb25maWcoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuY29uZmlnW2tleV0gPSB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6K6+572u5Z+656GA6Lev5b6EXHJcbiAgICAgKiBAcGFyYW0gdmFsdWUgXHJcbiAgICAgKi9cclxuICAgIHNldEJhc2VQYXRoKHZhbHVlOnN0cmluZyl7XHJcbiAgICAgICAgdGhpcy5iYXNlUGVyZml4U3RyPXZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bln7rnoYDot6/lvoRcclxuICAgICAqIEByZXR1cm5zIFxyXG4gICAgICovXHJcbiAgICBnZXRCYXNlUGF0aCgpe1xyXG4gICAgICAgIHJldHVybiB0aGlzLmJhc2VQZXJmaXhTdHI7XHJcbiAgICB9XHJcbiAgICBzZXRMb2NhbFN0YXRlKGxvY2FsU2VyOkxvY2FsZVNlcnZpY2Upe1xyXG4gICAgICAgIGlmKHRoaXMubG9jYWxTZXJTdG9yYWdlKXtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmKGxvY2FsU2VyJiYhdGhpcy5sb2NhbFNlclN0b3JhZ2Upe1xyXG4gICAgICAgICAgICAgICAgbG9jYWxTZXIuc2V0TG9jYWxlRGF0YShGQVJSSVNfVVBMT0FEU0VSVklDRV9MT0NBTEVEQVRBKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9jYWxTZXJTdG9yYWdlPWxvY2FsU2VyO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5aSa6K+t6KiA5pWw5o2uXHJcbiAgICAgKiDmn5Dkupvnu4Tku7bmsqHmnInph43mlrDnlJ/miJDvvIzopoHmlK/mjIHlpJror63oqIBcclxuICAgICAqIEBwYXJhbSBrZXkgXHJcbiAgICAgKi9cclxuICAgIGdldExvY2FsU3RyKGxhbktleTpzdHJpbmcpe1xyXG4gICAgICAgIGxldCByZXN1bHQ9XCJcIjtcclxuICAgICAgICBsZXQgZGVmYXVsdExvY2FsSWQ9J2VuJztcclxuICAgICAgICBpZih0aGlzLmxvY2FsU2VyU3RvcmFnZSl7XHJcbiAgICAgICAgICAgIHJlc3VsdD10aGlzLmxvY2FsU2VyU3RvcmFnZS5nZXRWYWx1ZShsYW5LZXkpO1xyXG4gICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICBkZWZhdWx0TG9jYWxJZD0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2xhbmd1YWdlQ29kZScpfHwnemgtQ0hTJztcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYoIXJlc3VsdCl7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IGxhbktleS5zcGxpdCgnLicpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBGQVJSSVNfVVBMT0FEU0VSVklDRV9MT0NBTEVEQVRBW2RlZmF1bHRMb2NhbElkXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbn07Il19