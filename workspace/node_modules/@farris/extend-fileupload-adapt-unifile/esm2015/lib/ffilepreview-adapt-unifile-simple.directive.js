/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffilepreview-adapt-unifile-simple.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, Input } from '@angular/core';
import { FfilepreviewAdaptUnifileService } from './ffilepreview-adapt-unifile.service';
export class FFileAdaptPreviewFileDirective {
    /**
     * @param {?} previewSer
     */
    constructor(previewSer) {
        this.previewSer = previewSer;
        // 是否禁用预览
        this.viewDisabled = false;
        // 处理扩展的服务器端配置
        this.extendServerConfig = null;
    }
    /**
     * 捕获预览事件
     * @return {?}
     */
    filePreviewEventHandler() {
        if (!this.fileInfo || this.viewDisabled) {
            return;
        }
        this.previewSer.previewFile(this.fileInfo, this.extendServerConfig);
    }
}
FFileAdaptPreviewFileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFileAdaptPreviewFile]'
            },] }
];
/** @nocollapse */
FFileAdaptPreviewFileDirective.ctorParameters = () => [
    { type: FfilepreviewAdaptUnifileService }
];
FFileAdaptPreviewFileDirective.propDecorators = {
    fileInfo: [{ type: Input, args: ['fFileAdaptPreviewFile',] }],
    filePreviewEventHandler: [{ type: HostListener, args: ['click', ['$event'],] }],
    viewDisabled: [{ type: Input }],
    extendServerConfig: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.fileInfo;
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.viewDisabled;
    /** @type {?} */
    FFileAdaptPreviewFileDirective.prototype.extendServerConfig;
    /**
     * @type {?}
     * @private
     */
    FFileAdaptPreviewFileDirective.prototype.previewSer;
}
export class FFileAdaptDownloadFileDirective {
    /**
     * @param {?} previewSer
     */
    constructor(previewSer) {
        this.previewSer = previewSer;
        //重命名
        this.zipName = '';
        // 是否禁用下载
        this.downloadDisabled = false;
        // 处理扩展的服务器端配置
        this.extendServerConfig = null;
        // 是否启用批量下载
        this.enableMulti = false;
    }
    /**
     * 捕获预览事件
     * @return {?}
     */
    filePreviewEventHandler() {
        if (!this.fileInfo || this.downloadDisabled) {
            return;
        }
        if (this.enableMulti && this.fileInfo instanceof Array) {
            this.previewSer.multiDownloadFilesWidthName(this.fileInfo, this.zipName, this.extendServerConfig);
        }
        else {
            this.previewSer.downloadFile(this.fileInfo, this.extendServerConfig);
        }
    }
}
FFileAdaptDownloadFileDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fFileAdaptDownloadFile]'
            },] }
];
/** @nocollapse */
FFileAdaptDownloadFileDirective.ctorParameters = () => [
    { type: FfilepreviewAdaptUnifileService }
];
FFileAdaptDownloadFileDirective.propDecorators = {
    fileInfo: [{ type: Input, args: ['fFileAdaptDownloadFile',] }],
    filePreviewEventHandler: [{ type: HostListener, args: ['click', ['$event'],] }],
    zipName: [{ type: Input }],
    downloadDisabled: [{ type: Input }],
    extendServerConfig: [{ type: Input }],
    enableMulti: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.fileInfo;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.zipName;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.downloadDisabled;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.extendServerConfig;
    /** @type {?} */
    FFileAdaptDownloadFileDirective.prototype.enableMulti;
    /**
     * @type {?}
     * @private
     */
    FFileAdaptDownloadFileDirective.prototype.previewSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmZpbGVwcmV2aWV3LWFkYXB0LXVuaWZpbGUtc2ltcGxlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZW5kLWZpbGV1cGxvYWQtYWRhcHQtdW5pZmlsZS8iLCJzb3VyY2VzIjpbImxpYi9mZmlsZXByZXZpZXctYWRhcHQtdW5pZmlsZS1zaW1wbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBS3ZGLE1BQU0sT0FBTyw4QkFBOEI7Ozs7SUFrQnZDLFlBQW9CLFVBQTJDO1FBQTNDLGVBQVUsR0FBVixVQUFVLENBQWlDOztRQUh0RCxpQkFBWSxHQUFHLEtBQUssQ0FBQzs7UUFFckIsdUJBQWtCLEdBQUcsSUFBSSxDQUFDO0lBR25DLENBQUM7Ozs7O0lBWkQsdUJBQXVCO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckMsT0FBTztTQUNWO1FBQ0QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztJQUN4RSxDQUFDOzs7WUFoQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx5QkFBeUI7YUFDdEM7Ozs7WUFKUSwrQkFBK0I7Ozt1QkFPbkMsS0FBSyxTQUFDLHVCQUF1QjtzQ0FLN0IsWUFBWSxTQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQzsyQkFRaEMsS0FBSztpQ0FFTCxLQUFLOzs7O0lBZk4sa0RBQXlDOztJQWF6QyxzREFBOEI7O0lBRTlCLDREQUFtQzs7Ozs7SUFDdkIsb0RBQW1EOztBQVFuRSxNQUFNLE9BQU8sK0JBQStCOzs7O0lBMEJ4QyxZQUFvQixVQUEyQztRQUEzQyxlQUFVLEdBQVYsVUFBVSxDQUFpQzs7UUFQdEQsWUFBTyxHQUFDLEVBQUUsQ0FBQzs7UUFFWCxxQkFBZ0IsR0FBRyxLQUFLLENBQUM7O1FBRXpCLHVCQUFrQixHQUFHLElBQUksQ0FBQzs7UUFFMUIsZ0JBQVcsR0FBRyxLQUFLLENBQUM7SUFHN0IsQ0FBQzs7Ozs7SUFwQkQsdUJBQXVCO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QyxPQUFPO1NBQ1Y7UUFDRCxJQUFJLElBQUksQ0FBQyxXQUFXLElBQUksSUFBSSxDQUFDLFFBQVEsWUFBWSxLQUFLLEVBQUU7WUFDcEQsSUFBSSxDQUFDLFVBQVUsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFDLElBQUksQ0FBQyxPQUFPLEVBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDbkc7YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUM7U0FDeEU7SUFDTCxDQUFDOzs7WUFwQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7YUFDdkM7Ozs7WUE5QlEsK0JBQStCOzs7dUJBaUNuQyxLQUFLLFNBQUMsd0JBQXdCO3NDQUs5QixZQUFZLFNBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO3NCQVloQyxLQUFLOytCQUVMLEtBQUs7aUNBRUwsS0FBSzswQkFFTCxLQUFLOzs7O0lBdkJOLG1EQUEwQzs7SUFpQjFDLGtEQUFvQjs7SUFFcEIsMkRBQWtDOztJQUVsQyw2REFBbUM7O0lBRW5DLHNEQUE2Qjs7Ozs7SUFDakIscURBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZmaWxlcHJldmlld0FkYXB0VW5pZmlsZVNlcnZpY2UgfSBmcm9tICcuL2ZmaWxlcHJldmlldy1hZGFwdC11bmlmaWxlLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmRmlsZUFkYXB0UHJldmlld0ZpbGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRkZpbGVBZGFwdFByZXZpZXdGaWxlRGlyZWN0aXZlIHtcclxuICAgIC8vIOmZhOS7tuS/oeaBr1xyXG4gICAgQElucHV0KCdmRmlsZUFkYXB0UHJldmlld0ZpbGUnKSBmaWxlSW5mbztcclxuICAgIC8qKlxyXG4gICAgICog5o2V6I636aKE6KeI5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZmlsZUluZm8gXHJcbiAgICAgKi9cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIGZpbGVQcmV2aWV3RXZlbnRIYW5kbGVyKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5maWxlSW5mbyB8fCB0aGlzLnZpZXdEaXNhYmxlZCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMucHJldmlld1Nlci5wcmV2aWV3RmlsZSh0aGlzLmZpbGVJbmZvLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICB9XHJcbiAgICAvLyDmmK/lkKbnpoHnlKjpooTop4hcclxuICAgIEBJbnB1dCgpIHZpZXdEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgLy8g5aSE55CG5omp5bGV55qE5pyN5Yqh5Zmo56uv6YWN572uXHJcbiAgICBASW5wdXQoKSBleHRlbmRTZXJ2ZXJDb25maWcgPSBudWxsO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwcmV2aWV3U2VyOiBGZmlsZXByZXZpZXdBZGFwdFVuaWZpbGVTZXJ2aWNlKSB7XHJcblxyXG4gICAgfVxyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2ZGaWxlQWRhcHREb3dubG9hZEZpbGVdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRkZpbGVBZGFwdERvd25sb2FkRmlsZURpcmVjdGl2ZSB7XHJcbiAgICAvLyAg6ZmE5Lu25L+h5oGvXHJcbiAgICBASW5wdXQoJ2ZGaWxlQWRhcHREb3dubG9hZEZpbGUnKSBmaWxlSW5mbztcclxuICAgIC8qKlxyXG4gICAgICog5o2V6I636aKE6KeI5LqL5Lu2XHJcbiAgICAgKiBAcGFyYW0gZmlsZUluZm8gXHJcbiAgICAgKi9cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIGZpbGVQcmV2aWV3RXZlbnRIYW5kbGVyKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5maWxlSW5mbyB8fCB0aGlzLmRvd25sb2FkRGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5lbmFibGVNdWx0aSAmJiB0aGlzLmZpbGVJbmZvIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLm11bHRpRG93bmxvYWRGaWxlc1dpZHRoTmFtZSh0aGlzLmZpbGVJbmZvLHRoaXMuemlwTmFtZSx0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5wcmV2aWV3U2VyLmRvd25sb2FkRmlsZSh0aGlzLmZpbGVJbmZvLCB0aGlzLmV4dGVuZFNlcnZlckNvbmZpZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy/ph43lkb3lkI1cclxuICAgIEBJbnB1dCgpIHppcE5hbWU9Jyc7XHJcbiAgICAvLyDmmK/lkKbnpoHnlKjkuIvovb1cclxuICAgIEBJbnB1dCgpIGRvd25sb2FkRGlzYWJsZWQgPSBmYWxzZTtcclxuICAgIC8vIOWkhOeQhuaJqeWxleeahOacjeWKoeWZqOerr+mFjee9rlxyXG4gICAgQElucHV0KCkgZXh0ZW5kU2VydmVyQ29uZmlnID0gbnVsbDtcclxuICAgIC8vIOaYr+WQpuWQr+eUqOaJuemHj+S4i+i9vVxyXG4gICAgQElucHV0KCkgZW5hYmxlTXVsdGkgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcHJldmlld1NlcjogRmZpbGVwcmV2aWV3QWRhcHRVbmlmaWxlU2VydmljZSkge1xyXG5cclxuICAgIH1cclxufVxyXG5cclxuIl19