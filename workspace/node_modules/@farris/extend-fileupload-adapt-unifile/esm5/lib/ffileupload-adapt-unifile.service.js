/**
 * @fileoverview added by tsickle
 * Generated from: lib/ffileupload-adapt-unifile.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Injector, Optional } from "@angular/core";
import { UploadServerService, UploadStatus, } from "@farris/extend-file-upload";
import { Observable, forkJoin, of, EMPTY, concat, Subject } from "rxjs";
import { UploadService, GspFormUploadListEntity, GspFormRemoveListEntity, GspFormDocInfo, GspFormUploadEntity, OperatingModes, } from "@gsp-svc/formdoc-upload";
import { FFileUploadAdaptUnifileConfigService, } from "./ffileupload-adapt-unifile.config";
import { catchError, delay, expand, last, map, switchMap, tap, } from "rxjs/operators";
import { LocaleService } from "@farris/ui-locale";
import * as i0 from "@angular/core";
import * as i1 from "@gsp-svc/formdoc-upload";
import * as i2 from "./ffileupload-adapt-unifile.config";
/**
 * @record
 */
export function UploadServerConfig() { }
if (false) {
    /** @type {?} */
    UploadServerConfig.prototype.sameNameAllowed;
    /** @type {?} */
    UploadServerConfig.prototype.maxFileSize;
    /** @type {?} */
    UploadServerConfig.prototype.allowedMultiUpload;
    /** @type {?|undefined} */
    UploadServerConfig.prototype.uploadedFileInfoList;
    /** @type {?|undefined} */
    UploadServerConfig.prototype.oldUploadedFileList;
}
var FfileuploadAdaptUnifileService = /** @class */ (function (_super) {
    tslib_1.__extends(FfileuploadAdaptUnifileService, _super);
    function FfileuploadAdaptUnifileService(uploadSer, configSer, inject) {
        var _this = _super.call(this) || this;
        _this.uploadSer = uploadSer;
        _this.configSer = configSer;
        _this.inject = inject;
        // 暂时用于简单合并
        _this.bufferSize = 1024 * 1024;
        _this.uploadedChunk = {};
        _this.fileTotalChunk = {};
        _this.serverConfig = null;
        _this.extendData = _this.configSer.getConfig();
        // 开始创建多语言服务
        /** @type {?} */
        var hasLocalSer = _this.configSer.setLocalState(null);
        if (_this.inject && !hasLocalSer) {
            // 如果存在inject，再次创建，inject是在某个版不能之后才出现的
            _this.configSer.setLocalState(_this.inject.get(LocaleService, null));
        }
        return _this;
    }
    /**
     * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
     * @returns
     */
    /**
     * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
     * @private
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getPrefixStr = /**
     * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
     * @private
     * @return {?}
     */
    function () {
        return this.configSer.getBasePath();
    };
    /**
     * @private
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uuid = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var S4 = (/**
         * @return {?}
         */
        function () {
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        });
        /** @type {?} */
        var nGuid = S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4();
        return nGuid;
    };
    /**
     * 删除文件
     * @param file
     * @param event
     */
    /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.remove = /**
     * 删除文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        return this.innerRemoveList(files, event, extendService);
    };
    /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerRemoveList = /**
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?=} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        if (extendService === void 0) { extendService = null; }
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var removeFileInfo = new GspFormRemoveListEntity();
            /** @type {?} */
            var metadataIdList = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                if (fileItem["response"]) {
                    metadataIdList.push(fileItem["response"]["metadataId"]);
                }
            }));
            removeFileInfo.mode = _this.getFinallyConfig("mode", extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig("rootId", extendService);
            removeFileInfo.metadataIdList = [].concat(metadataIdList);
            _this.uploadSer.removeList(metadataIdList, rootId).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                // 没有需要整合的服务器端返回数据
                observer.next({ type: "removed", files: files });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                observer.error(error);
                observer.complete();
            }), (/**
             * @return {?}
             */
            function () {
                observer.complete();
            }));
        }));
    };
    /**
     * 上传文件
     * @param file
     * @param event
     */
    /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.upload = /**
     * 上传文件
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        this.formId = this.getFinallyConfig("formId", extendService);
        this.rootId = this.getFinallyConfig("rootId", extendService);
        if (event.type == "sliceUpload") {
            /** @type {?} */
            var up$_1 = (/**
             * @return {?}
             */
            function () {
                if (_this.serverConfig && _this.serverConfig.allowedMultiUpload) {
                    if (!_this.serverConfig.sameNameAllowed) {
                        return _this.uploadSer.getUploadedFileInfoList(_this.formId, _this.rootId).pipe(switchMap((/**
                         * @param {?} res
                         * @return {?}
                         */
                        function (res) {
                            if (res != null && res.error == null) {
                                _this.serverConfig.uploadedFileInfoList = res;
                                _this.serverConfig.oldUploadedFileList = JSON.parse(JSON.stringify(res));
                                return _this.uploadBigFile2(files, event, extendService);
                            }
                            return of(res);
                        })));
                    }
                    else {
                        return _this.uploadBigFile2(files, event, extendService);
                    }
                }
                else {
                    return _this.uploadBigFile(files, event, extendService);
                }
            });
            if (!this.serverConfig) {
                return this.getServerConfig(this.rootId).pipe(switchMap((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    if (res != null && res.error == null) {
                        _this.serverConfig = {
                            sameNameAllowed: res.sameNameAllowed,
                            allowedMultiUpload: res.allowedMultiUpload,
                            maxFileSize: parseInt(JSON.parse(res.validateConfiguration).maxFileSize)
                        };
                    }
                    return up$_1();
                })));
            }
            return up$_1();
        }
        return this.innerUploadList(files, event, extendService);
    };
    /**
     * 内部上传方式
     * @param files
     * @param event
     * @param extendService
     */
    /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.innerUploadList = /**
     * 内部上传方式
     * @private
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var uploadInfo = new GspFormUploadListEntity();
            uploadInfo.formId = _this.getFinallyConfig("formId", extendService);
            uploadInfo.mode = _this.getFinallyConfig("mode", extendService);
            /** @type {?} */
            var rootId = _this.getFinallyConfig("rootId", extendService);
            uploadInfo.docInfoList = [];
            /** @type {?} */
            var readerObserable = [];
            files.forEach((/**
             * @param {?} fileItem
             * @return {?}
             */
            function (fileItem) {
                /** @type {?} */
                var sub = new Observable((/**
                 * @param {?} obser
                 * @return {?}
                 */
                function (obser) {
                    /** @type {?} */
                    var reader = new FileReader();
                    // 暂不处理异常
                    reader.readAsBinaryString(fileItem.nativeFile);
                    reader.onload = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var info = (/** @type {?} */ ({ fileName: "", fileContent: "" }));
                        info["fileName"] = fileItem.name;
                        info["fileContent"] = btoa(reader.result.toString());
                        // 如果data里有数据，并且属性是配置的扩展属性
                        if (event.hasOwnProperty("data") &&
                            event["data"] &&
                            event["data"].hasOwnProperty("extProperty")) {
                            //
                            info["extProperty"] = event["data"]["extProperty"];
                        }
                        uploadInfo.docInfoList.push(info);
                        obser.next();
                        obser.complete();
                    });
                }));
                readerObserable.push(sub);
            }));
            forkJoin(readerObserable).subscribe((/**
             * @param {?} datas
             * @return {?}
             */
            function (datas) {
                //     metadataId: string;
                //  fileName: string;
                _this.uploadSer.uploadList(uploadInfo, rootId).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result.error) {
                        // 此接口一旦出现问题，所有附件都上传不通过
                        observer.error(_this.errorInfoFormat(result.error, files));
                        observer.complete();
                        return;
                    }
                    // 合并返回结果到此处
                    result.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        /** @type {?} */
                        var findIndex = _this.findFileIndexByFileName(files, item.fileName);
                        if (findIndex > -1) {
                            files[findIndex]["response"] = item;
                            files[findIndex]["progress"]["status"] = UploadStatus.Done;
                        }
                    }));
                    observer.next({ type: "done", files: files });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    observer.error(_this.errorInfoFormat(error, files));
                    observer.complete();
                }), (/**
                 * @return {?}
                 */
                function () {
                    observer.complete();
                }));
            }));
        }));
    };
    /**
     * 分片加载
     * @param file
     * @param event
     * @param extendService
     */
    /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.multipartUpload = /**
     * 分片加载
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            // let fileInfo: FileInfo;
            /** @type {?} */
            var uuid = _this.uuid();
            // let uuid = UUID.UUID();
            //reader.readAsBinaryString(selectedFile);
            //reader.onload = (e) => {
            /** @type {?} */
            var fileName = file.name;
            // fileInfo = {
            //   id: uuid,
            //   name: fileName,
            //   type: file.type,
            //   source: "",
            //   size: this.formatFileSize(file.size),
            //   fileSize: file.size,
            //   picListDisplayName: this.getMultipartDisplayName(fileName),
            //   queueListDisplayName: fileName,
            //   //content: reader.result.toString(),
            //   hasUploaded: false,
            //   mouseOn: false,
            //   selectd: false,
            //   isUploading: true,
            //   uploadResult: false,
            //   uploadProcess: 0,
            //   errorMessage: "",
            //   extensionDropListId: 0,
            //   extensionName: ""
            // }
            /** @type {?} */
            var chunkTotal = Math.ceil(file.size / _this.bufferSize);
            // 标记当前附件总的分片数
            _this.fileTotalChunk[uuid] = chunkTotal;
            /** @type {?} */
            var chunkIndex = 0;
            // 标记当前附件成功的分片数
            _this.uploadedChunk[uuid] = 0;
            var _loop_1 = function () {
                /** @type {?} */
                var uploadInfo = new GspFormUploadEntity();
                uploadInfo.mode = OperatingModes.Temp;
                uploadInfo.formId = _this.getFinallyConfig("formId", extendService);
                uploadInfo.rootId = _this.getFinallyConfig("rootId", extendService);
                /** @type {?} */
                var docInfo = new GspFormDocInfo();
                docInfo.fileName = fileName;
                docInfo.metadataId = uuid;
                docInfo.total = chunkTotal;
                // 如果data里有数据，并且属性是配置的扩展属性
                if (event.hasOwnProperty("data") &&
                    event["data"] &&
                    event["data"].hasOwnProperty("extProperty")) {
                    docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
                }
                // 下一个文件大小
                /** @type {?} */
                var nextSize = Math.min((chunkIndex + 1) * _this.bufferSize, file.size);
                // File类型
                /** @type {?} */
                var fileData = file["nativeFile"].slice(chunkIndex * _this.bufferSize, nextSize);
                // 读取文件
                /** @type {?} */
                var reader = new FileReader();
                reader.readAsBinaryString(fileData);
                /** @type {?} */
                var innerIndex = chunkIndex;
                reader.onload = (/**
                 * @return {?}
                 */
                function () {
                    // 附件上传
                    docInfo.fileContent = btoa(reader.result.toString());
                    docInfo.index = innerIndex;
                    uploadInfo.docInfo = docInfo;
                    /** @type {?} */
                    var info = uploadInfo;
                    _this.uploadSer.uploadFile(info).subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        if (result && result.error) {
                            // 分片上传有返回结果就是报错了
                            observer.error(_this.errorInfoFormat(result.error, [file]));
                            observer.complete();
                            return;
                        }
                        else {
                            _this.uploadedChunk[uuid]++;
                            if (_this.uploadedChunk[docInfo.metadataId] ==
                                _this.fileTotalChunk[docInfo.metadataId]) {
                                // 判断是所有分片都上传完成
                                file.progress = {
                                    status: UploadStatus.Done,
                                    data: {
                                        percentage: 100,
                                    },
                                };
                                file.response = docInfo;
                                delete _this.uploadedChunk[uuid];
                                delete _this.fileTotalChunk[uuid];
                                observer.next({ type: "done", files: [file] });
                                observer.complete();
                            }
                            else {
                                // 分片上传正常
                                /** @type {?} */
                                var percentage = Number.parseInt(((_this.uploadedChunk[uuid] / _this.fileTotalChunk[uuid]) *
                                    100).toFixed(0));
                                // 判断未上传完成
                                file.progress = {
                                    status: UploadStatus.Uploading,
                                    data: {
                                        percentage: percentage,
                                    },
                                };
                                observer.next({ type: "uploading", files: [file] });
                            }
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        delete _this.uploadedChunk[uuid];
                        delete _this.fileTotalChunk[uuid];
                        observer.error(_this.errorInfoFormat(error, [file]));
                        observer.complete();
                    }));
                });
                chunkIndex = chunkIndex + 1;
            };
            while (chunkIndex < chunkTotal) {
                _loop_1();
            }
        }));
    };
    /**
     * 获取分片的附件大小
     * @param size
     */
    /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.formatFileSize = /**
     * 获取分片的附件大小
     * @private
     * @param {?} size
     * @return {?}
     */
    function (size) {
        if (size < 102400)
            return (size / 1024).toFixed(1) + "K";
        else if (size < 1024 * 1024)
            return (size / 1024).toFixed(0) + "K";
        else if (size < 100 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(1) + "M";
        else if (size < 1024 * 1024 * 1024)
            return (size / 1024 / 1024).toFixed(0) + "M";
        else
            return (size / 1024 / 1024 / 1024).toFixed(1) + "G";
    };
    /**
     * 获取分片的 附件名称
     * @param fileName
     */
    /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getMultipartDisplayName = /**
     * 获取分片的 附件名称
     * @private
     * @param {?} fileName
     * @return {?}
     */
    function (fileName) {
        if (fileName.length <= 10)
            return fileName;
        else {
            /** @type {?} */
            var headContent = fileName.substring(0, 2);
            /** @type {?} */
            var tailContent = fileName.substring(fileName.lastIndexOf(".") - 2);
            return headContent + "…" + tailContent;
        }
    };
    /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.errorInfoFormat = /**
     * @private
     * @param {?} error
     * @param {?} files
     * @return {?}
     */
    function (error, files) {
        //
        /** @type {?} */
        var errorFiles = files.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            return { id: item.id, name: item.name };
        }));
        /** @type {?} */
        var errorMsg = this.configSer.getLocalStr('uploadAdapt.uploadError');
        if (error) {
            return Object.assign(error, { files: errorFiles }, {
                message: error["Message"] || error["extensionMessage"] || errorMsg,
                type: "error",
            });
        }
        else {
            return Object.assign({ files: errorFiles }, { message: errorMsg, type: "error" });
        }
    };
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getFinallyConfig = /**
     * 返回最终属性值
     * @private
     * @param {?} key
     * @param {?} extendValue
     * @return {?}
     */
    function (key, extendValue) {
        if (extendValue && extendValue.hasOwnProperty(key)) {
            return extendValue[key];
        }
        return this.extendData[key];
    };
    /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.findFileIndexByFileName = /**
     * @private
     * @param {?} files
     * @param {?} fileName
     * @return {?}
     */
    function (files, fileName) {
        // 按照肯定能找到文件来处理
        /** @type {?} */
        var findIndex = files.findIndex((/**
         * @param {?} file
         * @return {?}
         */
        function (file) { return file.name == fileName; }));
        return findIndex;
    };
    //#region 大文件分片上传
    //#region 大文件分片上传
    /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadBigFile = 
    //#region 大文件分片上传
    /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        /** @type {?} */
        var uploadChunks$ = new Subject();
        /** @type {?} */
        var _files = files.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var chunks = _this._getBigFileChunks(n, event, extendService);
            return tslib_1.__assign({}, n, chunks);
        }));
        /** @type {?} */
        var uploadchunks$ = _files.map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return _this.uploadChunks(f, uploadChunks$);
        }));
        concat.apply(void 0, tslib_1.__spread(uploadchunks$)).subscribe((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            f.progress = {
                status: UploadStatus.Done,
                data: {
                    percentage: 100,
                },
            };
            f.response = JSON.parse(f.chunks[0].get("docInfo"));
            uploadChunks$.next({ type: "done", files: [f] });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            uploadChunks$.error(_this.errorInfoFormat(error, files));
            uploadChunks$.complete();
        }), (/**
         * @return {?}
         */
        function () {
            uploadChunks$.complete();
        }));
        return uploadChunks$.asObservable();
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadFileChunk = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/slice";
        return this.uploadSer["http"]["http"]
            .post(url, file.chunks[file.total])
            .pipe(switchMap((/**
         * @return {?}
         */
        function () {
            return of(file);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadChunks = /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    function (file, upChunk$) {
        var _this = this;
        /** @type {?} */
        var doChunksRemain = (/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i > -1; });
        /** @type {?} */
        var completeUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return of(f); });
        /** @type {?} */
        var uploadChunk = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return _this.uploadFileChunk(f).pipe(delay(100), map((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                // 块数为0 时，即为此文件的所有块均上传成功
                f.progress = {
                    status: UploadStatus.Uploading,
                    data: {
                        percentage: ((f.total / f.chunks.length) * 100).toFixed(0),
                    },
                };
                upChunk$.next({ type: "uploading", files: [f] });
                return f;
            })));
        });
        /** @type {?} */
        var createMultipartUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return of(f); });
        return createMultipartUpload(file).pipe(
        // tap((f) => console.log("upload file", f.name)),
        expand((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            if (doChunksRemain(--file.total)) {
                return uploadChunk(file);
            }
            return EMPTY;
        })), 
        // tap((f: any) => {
        //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);
        // }),
        last(), switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return completeUpload(file);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype._getBigFileChunks = /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        /** @type {?} */
        var uuid = this.uuid();
        /** @type {?} */
        var formId = this.getFinallyConfig("formId", extendService);
        /** @type {?} */
        var rootId = this.getFinallyConfig("rootId", extendService);
        /** @type {?} */
        var realChunkSize = (event.chunkSize || 1) * this.bufferSize;
        /** @type {?} */
        var chunkTotal = Math.ceil(file.size / realChunkSize);
        /** @type {?} */
        var chunkIndex = 0;
        /** @type {?} */
        var fileChunks = { chunks: [], total: chunkTotal };
        while (chunkIndex < chunkTotal) {
            /** @type {?} */
            var uploadInfo = new GspFormUploadEntity();
            uploadInfo.mode = OperatingModes.Temp;
            uploadInfo.formId = formId;
            uploadInfo.rootId = rootId;
            /** @type {?} */
            var docInfo = new GspFormDocInfo();
            docInfo.fileName = file.name;
            docInfo.metadataId = uuid;
            docInfo.total = chunkTotal;
            /** @type {?} */
            var nextSize = Math.min((chunkIndex + 1) * realChunkSize, file.size);
            // File类型
            /** @type {?} */
            var fileData = file["nativeFile"].slice(chunkIndex * realChunkSize, nextSize);
            docInfo.size = file.size;
            docInfo.index = chunkIndex;
            docInfo.fileContent = "";
            // 如果data里有数据，并且属性是配置的扩展属性
            if (event.hasOwnProperty("data") &&
                event["data"] &&
                event["data"].hasOwnProperty("extProperty")) {
                docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
            }
            uploadInfo.docInfo = docInfo;
            //封装请求formdata
            /** @type {?} */
            var formData = new FormData();
            formData.append("uploadInfo", JSON.stringify(uploadInfo));
            formData.append("docInfo", JSON.stringify(docInfo));
            formData.append("file", fileData);
            fileChunks.chunks.push(formData);
            chunkIndex = chunkIndex + 1;
        }
        return fileChunks;
    };
    /**
     * 获取跟目录的配置
     * @param rootId
     * @returns
     */
    /**
     * 获取跟目录的配置
     * @private
     * @param {?} rootId
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.getServerConfig = /**
     * 获取跟目录的配置
     * @private
     * @param {?} rootId
     * @return {?}
     */
    function (rootId) {
        return this.uploadSer.getUploadInfo(rootId);
    };
    //#endregion
    //#region 读取相关配置分片上传至云服务器
    //#endregion
    //#region 读取相关配置分片上传至云服务器
    /**
     * @private
     * @param {?} file
     * @param {?} uploadChunks$
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.unorderedUploadBigFile = 
    //#endregion
    //#region 读取相关配置分片上传至云服务器
    /**
     * @private
     * @param {?} file
     * @param {?} uploadChunks$
     * @return {?}
     */
    function (file, uploadChunks$) {
        var _this = this;
        if (!file.partList) {
            file.partList = [];
        }
        this.initMultiUpload(file).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (r && r.error) {
                uploadChunks$.error(_this.errorInfoFormat(r.error, [file]));
                uploadChunks$.complete();
                return;
            }
            file.chunks.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.multiUpload(n, r).subscribe((/**
                 * @param {?} res
                 * @return {?}
                 */
                function (res) {
                    if (res && res.error) {
                        uploadChunks$.error(_this.errorInfoFormat(res.error, [file]));
                        uploadChunks$.complete();
                        return;
                    }
                    file.progress = {
                        status: UploadStatus.Uploading,
                        data: {
                            percentage: (res.index / file.chunks.length * 100).toFixed(0)
                        }
                    };
                    uploadChunks$.next({ type: 'uploading', files: [file] });
                    if (res && res.result) {
                        file.partList.push(res.result);
                    }
                    if (file.partList.length === file.chunks.length) {
                        /** @type {?} */
                        var completeMultiUploadRequest = {};
                        completeMultiUploadRequest.metadataId = file.metadataId;
                        completeMultiUploadRequest.partList = file.partList;
                        completeMultiUploadRequest.rootId = _this.rootId;
                        completeMultiUploadRequest.uploadId = file.uploadId;
                        completeMultiUploadRequest.size = file.size;
                        _this.completeMultiUpload(completeMultiUploadRequest).subscribe((/**
                         * @param {?} cmur
                         * @return {?}
                         */
                        function (cmur) {
                            if (cmur && cmur.status != 200) {
                                uploadChunks$.error(_this.errorInfoFormat(cmur.error, [file]));
                                uploadChunks$.complete();
                                return;
                            }
                            file.progress = {
                                status: UploadStatus.Done,
                                data: {
                                    percentage: 100
                                }
                            };
                            file.response = JSON.parse(file.chunks[0].get("docInfo"));
                            uploadChunks$.next({ type: 'done', files: [file] });
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            uploadChunks$.error(_this.errorInfoFormat(error, [file]));
                            uploadChunks$.complete();
                        }));
                    }
                }));
            }));
        }));
    };
    /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadBigFile2 = /**
     * @param {?} files
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (files, event, extendService) {
        var _this = this;
        /** @type {?} */
        var uploadChunks$ = new Subject();
        /** @type {?} */
        var formId = this.getFinallyConfig('formId', extendService);
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        /** @type {?} */
        var _files = files.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var chunks = _this._getBigFileChunks2(n, event, extendService);
            return tslib_1.__assign({}, n, chunks, { formId: formId, rootId: rootId });
        }));
        // 无序上传
        _files.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            _this.unorderedUploadBigFile(n, uploadChunks$);
        }));
        // 有序上传
        // const uploadchunks$: Observable<any>[] =  _files.map((f) => this.uploadChunks2(f, uploadChunks$));
        // concat(...uploadchunks$).pipe(
        //     switchMap((f: any) => {
        //         let completeMultiUploadRequest: any = {};
        //         completeMultiUploadRequest.metadataId = f.metadataId;
        //         completeMultiUploadRequest.partList = f.partList;
        //         completeMultiUploadRequest.rootId = this.rootId;
        //         completeMultiUploadRequest.uploadId = f.uploadId;
        //         completeMultiUploadRequest.size = f.size;
        //         return this.completeMultiUpload(completeMultiUploadRequest).pipe(
        //             map(() => f)
        //         );
        //     })
        // ).subscribe(
        //     (f: any) => {
        //         f.progress = {
        //             status: UploadStatus.Done,
        //             data:  {
        //                 percentage: 100
        //             }
        //         };
        //         f.response = JSON.parse(f.chunks[0].get("docInfo"));
        //         uploadChunks$.next({type: 'done', files:[f]});
        //     },
        //     error => {
        //         uploadChunks$.error(this.errorInfoFormat(error, files));
        //         uploadChunks$.complete();
        //     },
        //     () => {
        //         uploadChunks$.complete();
        //         // console.log("all files uploaded")
        //     }
        // );
        return uploadChunks$.asObservable();
    };
    /**
     * @private
     * @param {?} file
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.initMultiUpload = /**
     * @private
     * @param {?} file
     * @return {?}
     */
    function (file) {
        /** @type {?} */
        var initRequest = {};
        initRequest.path = file.formId;
        initRequest.metadataId = this.uuid();
        initRequest.rootId = file.rootId;
        initRequest.size = file.size;
        initRequest.fileName = file.name;
        /** @type {?} */
        var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/init";
        return this.uploadSer['http']['http'].post(url, initRequest).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            file.metadataId = initRequest.metadataId;
            file.uploadId = res.uploadId;
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })), map((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            res.metadataId = initRequest.metadataId;
            return res;
        })));
    };
    /**
     * @private
     * @param {?} request
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.completeMultiUpload = /**
     * @private
     * @param {?} request
     * @return {?}
     */
    function (request) {
        /** @type {?} */
        var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/complete";
        return this.uploadSer['http']['http'].post(url, request).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @private
     * @param {?} formdata
     * @param {?} r
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.multiUpload = /**
     * @private
     * @param {?} formdata
     * @param {?} r
     * @return {?}
     */
    function (formdata, r) {
        /** @type {?} */
        var url = this.getPrefixStr() + "/api/runtime/dfs/v1.0/formdoc/multi/upload";
        /** @type {?} */
        var mr = JSON.parse((/** @type {?} */ (formdata.get('multiRequest'))));
        mr.uploadId = r.uploadId;
        mr.metadataId = r.metadataId;
        formdata.set('multiRequest', JSON.stringify(mr));
        /** @type {?} */
        var di = JSON.parse((/** @type {?} */ (formdata.get('docInfo'))));
        di.metadataId = r.metadataId;
        formdata.set('docInfo', JSON.stringify(di));
        return this.uploadSer['http']['http'].post(url, formdata).pipe(tap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            return of(error);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype.uploadChunks2 = /**
     * @private
     * @param {?} file
     * @param {?} upChunk$
     * @return {?}
     */
    function (file, upChunk$) {
        var _this = this;
        /** @type {?} */
        var total = file.total;
        /** @type {?} */
        var t = -1;
        /** @type {?} */
        var doChunksRemain = (/**
         * @param {?} i
         * @return {?}
         */
        function (i) { return i < total; });
        /** @type {?} */
        var completeUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return of(f); });
        /** @type {?} */
        var uploadChunk = (/**
         * @param {?} f
         * @param {?} uploadId
         * @return {?}
         */
        function (f, uploadId) {
            return _this.multiUpload(f, uploadId).pipe(delay(100), map((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                // 块数为0 时，即为此文件的所有块均上传成功
                file.progress = {
                    status: UploadStatus.Uploading,
                    data: {
                        percentage: (res.index / file.chunks.length * 100).toFixed(0)
                    }
                };
                upChunk$.next({ type: 'uploading', files: [file] });
                if (res && res.result) {
                    if (!file.partList) {
                        file.partList = [];
                    }
                    file.partList.push(res.result);
                }
                return file;
            })));
        });
        /** @type {?} */
        var createMultipartUpload = (/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return _this.initMultiUpload(f);
            // return of(f)
        });
        return createMultipartUpload(file).pipe(
        // tap((f) => console.log("upload file", f.name)),
        expand((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            if (doChunksRemain(++t)) {
                return uploadChunk(file.chunks[t], r);
            }
            return EMPTY;
        })), 
        // tap((f: any) => {
        //     console.log(`file: ${f.name} - remaining chunks: ${f.total}`);
        // }),
        last(), switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return completeUpload(file);
        })));
    };
    /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    FfileuploadAdaptUnifileService.prototype._getBigFileChunks2 = /**
     * @private
     * @param {?} file
     * @param {?} event
     * @param {?} extendService
     * @return {?}
     */
    function (file, event, extendService) {
        /** @type {?} */
        var uuid = this.uuid();
        /** @type {?} */
        var _bifferSize = Math.max(event.chunkSize, 5) * this.bufferSize;
        /** @type {?} */
        var chunkTotal = Math.ceil(file.size / _bifferSize);
        /** @type {?} */
        var chunkIndex = 0;
        /** @type {?} */
        var fileChunks = { chunks: [], total: chunkTotal };
        /** @type {?} */
        var rootId = this.getFinallyConfig('rootId', extendService);
        while (chunkIndex < chunkTotal) {
            /** @type {?} */
            var nextSize = Math.min((chunkIndex + 1) * _bifferSize, file.size);
            // File类型
            /** @type {?} */
            var fileData = file['nativeFile'].slice(chunkIndex * _bifferSize, nextSize);
            /** @type {?} */
            var multiRequest = {};
            multiRequest.metadataId = uuid;
            multiRequest.rootId = rootId;
            // multiRequest.uploadId = uploadId;
            multiRequest.index = chunkIndex;
            multiRequest.total = chunkTotal;
            multiRequest.size = fileData.size;
            //封装请求formdata
            /** @type {?} */
            var formData = new FormData();
            formData.append('multiRequest', JSON.stringify(multiRequest));
            formData.append('file', fileData);
            /** @type {?} */
            var docInfo = new GspFormDocInfo();
            docInfo.fileName = file.name;
            docInfo.metadataId = uuid;
            docInfo.total = chunkTotal;
            docInfo.size = file.size;
            docInfo.index = chunkIndex;
            docInfo.fileContent = "";
            formData.append("docInfo", JSON.stringify(docInfo));
            // 如果data里有数据，并且属性是配置的扩展属性
            if (event.hasOwnProperty("data") &&
                event["data"] &&
                event["data"].hasOwnProperty("extProperty")) {
                docInfo["extProperty"] = (/** @type {?} */ (event["data"]["extProperty"]));
            }
            fileChunks.chunks.push(formData);
            chunkIndex = chunkIndex + 1;
        }
        return fileChunks;
    };
    FfileuploadAdaptUnifileService.previous = 0;
    FfileuploadAdaptUnifileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: "root",
                },] }
    ];
    /** @nocollapse */
    FfileuploadAdaptUnifileService.ctorParameters = function () { return [
        { type: UploadService },
        { type: FFileUploadAdaptUnifileConfigService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    /** @nocollapse */ FfileuploadAdaptUnifileService.ngInjectableDef = i0.defineInjectable({ factory: function FfileuploadAdaptUnifileService_Factory() { return new FfileuploadAdaptUnifileService(i0.inject(i1.UploadService), i0.inject(i2.FFileUploadAdaptUnifileConfigService), i0.inject(i0.INJECTOR, 8)); }, token: FfileuploadAdaptUnifileService, providedIn: "root" });
    return FfileuploadAdaptUnifileService;
}(UploadServerService));
export { FfileuploadAdaptUnifileService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.previous;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.extendData;
    /** @type {?} */
    FfileuploadAdaptUnifileService.prototype.bufferSize;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadedChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.fileTotalChunk;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.formId;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.rootId;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.serverConfig;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.uploadSer;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.configSer;
    /**
     * @type {?}
     * @private
     */
    FfileuploadAdaptUnifileService.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,