import { Injector } from "@angular/core";
import { UploadServerService, UploadFile, UploadInput } from "@farris/extend-file-upload";
import { Observable } from "rxjs";
import { UploadService } from "@gsp-svc/formdoc-upload";
import { FFileUploadAdaptUnifileConfigService, FFileUploadAdaptUnifileConfig } from "./ffileupload-adapt-unifile.config";
export interface UploadServerConfig {
    sameNameAllowed: boolean;
    maxFileSize: number;
    allowedMultiUpload: boolean;
    uploadedFileInfoList?: any;
    oldUploadedFileList?: any;
}
export declare class FfileuploadAdaptUnifileService extends UploadServerService {
    private uploadSer;
    private configSer;
    private inject;
    extendData: any;
    bufferSize: number;
    private static previous;
    private uploadedChunk;
    private fileTotalChunk;
    private formId;
    private rootId;
    private serverConfig;
    constructor(uploadSer: UploadService, configSer: FFileUploadAdaptUnifileConfigService, inject: Injector);
    /**
     * 因为被附件组件作为依赖类，导致此处获取不到最新的基路径值
     * @returns
     */
    private getPrefixStr;
    private uuid;
    /**
     * 删除文件
     * @param file
     * @param event
     */
    remove(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any>;
    private innerRemoveList;
    /**
     * 上传文件
     * @param file
     * @param event
     */
    upload(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any>;
    /**
     * 内部上传方式
     * @param files
     * @param event
     * @param extendService
     */
    private innerUploadList;
    /**
     * 分片加载
     * @param file
     * @param event
     * @param extendService
     */
    multipartUpload(file: UploadFile, event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<any>;
    /**
     * 获取分片的附件大小
     * @param size
     */
    private formatFileSize;
    /**
     * 获取分片的 附件名称
     * @param fileName
     */
    private getMultipartDisplayName;
    private errorInfoFormat;
    /**
     * 返回最终属性值
     * @param key
     * @param configValue
     * @param extendValue
     */
    private getFinallyConfig;
    private findFileIndexByFileName;
    uploadBigFile(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<{}>;
    private uploadFileChunk;
    private uploadChunks;
    private _getBigFileChunks;
    /**
     * 获取跟目录的配置
     * @param rootId
     * @returns
     */
    private getServerConfig;
    private unorderedUploadBigFile;
    uploadBigFile2(files: UploadFile[], event: UploadInput, extendService: FFileUploadAdaptUnifileConfig): Observable<{}>;
    private initMultiUpload;
    private completeMultiUpload;
    private multiUpload;
    private uploadChunks2;
    private _getBigFileChunks2;
}
