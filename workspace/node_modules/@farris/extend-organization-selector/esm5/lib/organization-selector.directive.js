/**
 * @fileoverview added by tsickle
 * Generated from: lib/organization-selector.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * 使用方法：
 * [mapFields]="{ id: 'user.userId', name: 'user.userName' }"
 * key 为帮助上的字段， value 为 表单中的字段名
 * 帮助上的同一个字段可以映射到表单中的多个字段中，{ ... id: 'user.userid, user.addusid'}
 * 多字段以逗号隔开
 *
 */
import { Directive, Optional, Self, Input, Injector } from '@angular/core';
import { ViewModel } from '@farris/devkit';
import { OrganizationSelectorComponent } from '@farris/ui-organization-selector';
var OrganizationSelectorDataMappingDirective = /** @class */ (function () {
    function OrganizationSelectorDataMappingDirective(vm, targetComponent, injector) {
        this.vm = vm;
        this.targetComponent = targetComponent;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.targetComponent.selectionsChange.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var mapfields = _this.mapFields;
            if (data.selections && data.selections.length) {
                _this.mappingData(data.selections, mapfields);
            }
            else {
                _this.mappingData(null, mapfields);
            }
        }));
        this.targetComponent.inputClear.subscribe((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mapfields = _this.mapFields;
            _this.mappingData(null, mapfields);
        }));
        this.targetComponent.tagRemoved.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var mapfields = _this.mapFields;
            _this.tagRemovedMappingData(data.deleteIndex, mapfields);
            // if (this.targetComponent.selections && this.targetComponent.selections.length) {
            //     this.mappingData(this.targetComponent.selections, mapfields);
            // } else {
            //     this.mappingData(null, mapfields);
            // }
        }));
        if (!this.targetComponent.mapFields) {
            this.targetComponent.mapFields = this.mapFields;
        }
    };
    /**
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.getFieldBinding = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ngControl = this.targetComponent && this.targetComponent.ngControl && this.targetComponent.ngControl;
        /** @type {?} */
        var ngFormControls = ngControl && ngControl.formDirective && ngControl.formDirective.form
            && ngControl.formDirective.form && ngControl.formDirective.form.ngFormControls;
        /** @type {?} */
        var name = ngControl && ngControl.name;
        return ngFormControls && ngFormControls[name] && ngFormControls[name].binding;
    };
    /**
     * @param {?} index
     * @param {?} mapFields
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.tagRemovedMappingData = /**
     * @param {?} index
     * @param {?} mapFields
     * @return {?}
     */
    function (index, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        if (this.targetComponent.ngControl &&
            this.targetComponent.ngControl.formDirective &&
            this.targetComponent.ngControl.formDirective.form &&
            this.targetComponent.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_1 = this.targetComponent.ngControl.formDirective.form.bindingData;
            if (bindingData_1.setValue) {
                // 关闭变更检测
                /** @type {?} */
                var appContext = this.vm.frameContext.appContext;
                appContext.changeDetectionController.detach();
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                /** @type {?} */
                var idIndex = helpFields.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item === _this.targetComponent.primaryField; }));
                if (helpFields.includes(this.targetComponent.primaryField) && idIndex !== 0) {
                    helpFields.splice(idIndex, 1);
                    helpFields = tslib_1.__spread([this.targetComponent.primaryField], helpFields);
                }
                /** @type {?} */
                var pathArr_1 = this.getBindingPathArray();
                /** @type {?} */
                var anyFieldArr = this.mapFields[helpFields[0]].split(',');
                /** @type {?} */
                var formAnyData = bindingData_1.getValue(pathArr_1.concat(anyFieldArr[0]));
                if (!formAnyData || formAnyData.split(',').length < 2) {
                    helpFields.reverse();
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField].split(',').forEach((/**
                     * @param {?} fieldPath
                     * @return {?}
                     */
                    function (fieldPath) {
                        /** @type {?} */
                        var path = pathArr_1.concat(fieldPath.split('.'));
                        // todo udt关联问题
                        if (_this.getFieldBinding() === fieldPath) {
                            return;
                        }
                        /** @type {?} */
                        var resStr = bindingData_1.getValue(path);
                        if (!resStr) {
                            bindingData_1.clearValue(path, true, true);
                        }
                        else {
                            /** @type {?} */
                            var resArr = resStr.split(',');
                            resArr.splice(index, 1);
                            /** @type {?} */
                            var result = resArr.join();
                            if (!result) {
                                bindingData_1.clearValue(path, true, true);
                            }
                            else {
                                bindingData_1.setValue(path, result, true, true);
                            }
                        }
                    }));
                }));
                // 重新打开变更检测
                appContext.changeDetectionController.reattach();
            }
        }
    };
    /**
     *
     * @param helpData 清空时，值为null
     * @param mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     */
    /**
     *
     * @param {?} helpData 清空时，值为null
     * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.mappingData = /**
     *
     * @param {?} helpData 清空时，值为null
     * @param {?} mapFields 格式形如：{id: "assoField.assoField", code: "assoField.assoField_Code", name: "assoField.assoField_Name"}
     * @return {?}
     */
    function (helpData, mapFields) {
        var _this = this;
        if (!mapFields) {
            return;
        }
        // 关闭变更检测
        /** @type {?} */
        var appContext = this.vm.frameContext.appContext;
        appContext.changeDetectionController.detach();
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var idIndex = helpFields.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item === _this.targetComponent.primaryField; }));
        if (helpFields.includes(this.targetComponent.primaryField) && idIndex !== 0) {
            helpFields.splice(idIndex, 1);
            helpFields = tslib_1.__spread([this.targetComponent.primaryField], helpFields);
        }
        if (!helpData) {
            helpFields.reverse();
        }
        helpFields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            // 1、获取字段值
            // 如果helpData有选中值，则获取帮助数据源里对应你字段的值；
            // 如果helpData没有值（清空场景），则返回一个空字符串
            /** @type {?} */
            var val = '';
            if (helpData) {
                if (helpData instanceof Array) {
                    val = helpData.map((/**
                     * @param {?} h
                     * @return {?}
                     */
                    function (h) {
                        return _this.getValue(f, h);
                    })).join(',');
                }
                else {
                    val = _this.getValue(f, helpData);
                }
            }
            // 2、设置字段值
            // 如果helpData不存在（清空场景），获取BindingData里对应字段的值，如果是数值，则设置0，其他设置上一步中的空字符串；
            // 如果helpData存在：直接设置上一步中获取的值。
            /** @type {?} */
            var pathArr = _this.getBindingPathArray();
            mapFields[f].split(',').forEach((/**
             * @param {?} ff
             * @return {?}
             */
            function (ff) {
                if (_this.getFieldBinding() === ff) {
                    return;
                }
                if (!helpData) {
                    _this.vm.bindingData.clearValue(pathArr.concat(ff.split('.')), true, true);
                }
                else {
                    _this.vm.bindingData.setValue(pathArr.concat(ff.split('.')), val, true, true);
                }
            }));
        }));
        // 重新打开变更检测
        appContext.changeDetectionController.reattach();
    };
    /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.getValue = /**
     * @private
     * @param {?} f
     * @param {?} data
     * @return {?}
     */
    function (f, data) {
        /** @type {?} */
        var val = '';
        if (f.indexOf('.') === -1) {
            val = data[f];
        }
        else {
            val = f.split('.').reduce((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return a[b];
            }), data);
        }
        return val;
    };
    /**
     * @private
     * @return {?}
     */
    OrganizationSelectorDataMappingDirective.prototype.getBindingPathArray = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var path = this.vm.bindingPath;
        if (path) {
            return path.split('/').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== ''; }));
        }
        return [];
    };
    OrganizationSelectorDataMappingDirective.decorators = [
        { type: Directive, args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[organization-selector-data-mapping]'
                },] }
    ];
    /** @nocollapse */
    OrganizationSelectorDataMappingDirective.ctorParameters = function () { return [
        { type: ViewModel, decorators: [{ type: Optional }] },
        { type: OrganizationSelectorComponent, decorators: [{ type: Optional }, { type: Self }] },
        { type: Injector }
    ]; };
    OrganizationSelectorDataMappingDirective.propDecorators = {
        mapFields: [{ type: Input }]
    };
    return OrganizationSelectorDataMappingDirective;
}());
export { OrganizationSelectorDataMappingDirective };
if (false) {
    /** @type {?} */
    OrganizationSelectorDataMappingDirective.prototype.mapFields;
    /**
     * @type {?}
     * @private
     */
    OrganizationSelectorDataMappingDirective.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    OrganizationSelectorDataMappingDirective.prototype.targetComponent;
    /**
     * @type {?}
     * @private
     */
    OrganizationSelectorDataMappingDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnYW5pemF0aW9uLXNlbGVjdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZXh0ZW5kLW9yZ2FuaXphdGlvbi1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbImxpYi9vcmdhbml6YXRpb24tc2VsZWN0b3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBU0EsT0FBTyxFQUFFLFNBQVMsRUFBVSxRQUFRLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBNEIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsNkJBQTZCLEVBQUUsTUFBTyxrQ0FBa0MsQ0FBQztBQUNsRjtJQVFJLGtEQUN3QixFQUFhLEVBQ0wsZUFBOEMsRUFDbEUsUUFBa0I7UUFGTixPQUFFLEdBQUYsRUFBRSxDQUFXO1FBQ0wsb0JBQWUsR0FBZixlQUFlLENBQStCO1FBQ2xFLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDMUIsQ0FBQzs7OztJQUVMLDJEQUFROzs7SUFBUjtRQUFBLGlCQTJCQztRQTFCRyxJQUFJLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDLFNBQVM7Ozs7UUFBQyxVQUFDLElBQVM7O2dCQUNoRCxTQUFTLEdBQUcsS0FBSSxDQUFDLFNBQVM7WUFDaEMsSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxFQUFFO2dCQUMzQyxLQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDaEQ7aUJBQU07Z0JBQ0gsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7YUFDckM7UUFDTCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxlQUFlLENBQUMsVUFBVSxDQUFDLFNBQVM7OztRQUFDOztnQkFD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bUVBQTBFOzs7OztJQUMxRSw0REFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICog5L2/55So5pa55rOV77yaXHJcbiAqIFttYXBGaWVsZHNdPVwieyBpZDogJ3VzZXIudXNlcklkJywgbmFtZTogJ3VzZXIudXNlck5hbWUnIH1cIlxyXG4gKiBrZXkg5Li65biu5Yqp5LiK55qE5a2X5q6177yMIHZhbHVlIOS4uiDooajljZXkuK3nmoTlrZfmrrXlkI1cclxuICog5biu5Yqp5LiK55qE5ZCM5LiA5Liq5a2X5q615Y+v5Lul5pig5bCE5Yiw6KGo5Y2V5Lit55qE5aSa5Liq5a2X5q615Lit77yMeyAuLi4gaWQ6ICd1c2VyLnVzZXJpZCwgdXNlci5hZGR1c2lkJ31cclxuICog5aSa5a2X5q615Lul6YCX5Y+36ZqU5byAXHJcbiAqXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBPbkluaXQsIE9wdGlvbmFsLCBTZWxmLCBJbnB1dCwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWwgfSBmcm9tICdAZmFycmlzL2RldmtpdCc7XHJcbmltcG9ydCB7IE9yZ2FuaXphdGlvblNlbGVjdG9yQ29tcG9uZW50IH0gIGZyb20gJ0BmYXJyaXMvdWktb3JnYW5pemF0aW9uLXNlbGVjdG9yJztcclxuQERpcmVjdGl2ZSh7XHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZGlyZWN0aXZlLXNlbGVjdG9yXHJcbiAgICBzZWxlY3RvcjogJ1tvcmdhbml6YXRpb24tc2VsZWN0b3ItZGF0YS1tYXBwaW5nXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIE9yZ2FuaXphdGlvblNlbGVjdG9yRGF0YU1hcHBpbmdEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcblxyXG4gICAgQElucHV0KCkgbWFwRmllbGRzOiBhbnk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB2bTogVmlld01vZGVsLFxyXG4gICAgICAgIEBPcHRpb25hbCgpIEBTZWxmKCkgcHJpdmF0ZSB0YXJnZXRDb21wb25lbnQ6IE9yZ2FuaXphdGlvblNlbGVjdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0Q29tcG9uZW50LnNlbGVjdGlvbnNDaGFuZ2Uuc3Vic2NyaWJlKChkYXRhOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbWFwZmllbGRzID0gdGhpcy5tYXBGaWVsZHM7XHJcbiAgICAgICAgICAgIGlmIChkYXRhLnNlbGVjdGlvbnMgJiYgZGF0YS5zZWxlY3Rpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBwaW5nRGF0YShkYXRhLnNlbGVjdGlvbnMsIG1hcGZpZWxkcyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcHBpbmdEYXRhKG51bGwsIG1hcGZpZWxkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy50YXJnZXRDb21wb25lbnQuaW5wdXRDbGVhci5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBmaWVsZHMgPSB0aGlzLm1hcEZpZWxkcztcclxuICAgICAgICAgICAgdGhpcy5tYXBwaW5nRGF0YShudWxsLCBtYXBmaWVsZHMpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLnRhcmdldENvbXBvbmVudC50YWdSZW1vdmVkLnN1YnNjcmliZSgoZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBmaWVsZHMgPSB0aGlzLm1hcEZpZWxkcztcclxuICAgICAgICAgICAgdGhpcy50YWdSZW1vdmVkTWFwcGluZ0RhdGEoZGF0YS5kZWxldGVJbmRleCwgbWFwZmllbGRzKTtcclxuICAgICAgICAgICAgLy8gaWYgKHRoaXMudGFyZ2V0Q29tcG9uZW50LnNlbGVjdGlvbnMgJiYgdGhpcy50YXJnZXRDb21wb25lbnQuc2VsZWN0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMubWFwcGluZ0RhdGEodGhpcy50YXJnZXRDb21wb25lbnQuc2VsZWN0aW9ucywgbWFwZmllbGRzKTtcclxuICAgICAgICAgICAgLy8gfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gICAgIHRoaXMubWFwcGluZ0RhdGEobnVsbCwgbWFwZmllbGRzKTtcclxuICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGlmICghdGhpcy50YXJnZXRDb21wb25lbnQubWFwRmllbGRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Q29tcG9uZW50Lm1hcEZpZWxkcyA9IHRoaXMubWFwRmllbGRzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEZpZWxkQmluZGluZygpIHtcclxuICAgICAgICBjb25zdCBuZ0NvbnRyb2wgPSB0aGlzLnRhcmdldENvbXBvbmVudCAmJiB0aGlzLnRhcmdldENvbXBvbmVudC5uZ0NvbnRyb2wgJiYgdGhpcy50YXJnZXRDb21wb25lbnQubmdDb250cm9sO1xyXG4gICAgICAgIGNvbnN0IG5nRm9ybUNvbnRyb2xzID0gbmdDb250cm9sICYmIG5nQ29udHJvbC5mb3JtRGlyZWN0aXZlICYmIG5nQ29udHJvbC5mb3JtRGlyZWN0aXZlLmZvcm1cclxuICAgICAgICAgICAgJiYgbmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybSAmJiBuZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtLm5nRm9ybUNvbnRyb2xzO1xyXG4gICAgICAgIGNvbnN0IG5hbWUgPSBuZ0NvbnRyb2wgJiYgbmdDb250cm9sLm5hbWU7XHJcbiAgICAgICAgcmV0dXJuIG5nRm9ybUNvbnRyb2xzICYmIG5nRm9ybUNvbnRyb2xzW25hbWVdICYmIG5nRm9ybUNvbnRyb2xzW25hbWVdLmJpbmRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgdGFnUmVtb3ZlZE1hcHBpbmdEYXRhKGluZGV4LCBtYXBGaWVsZHMpIHtcclxuICAgICAgICBpZiAoIW1hcEZpZWxkcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRDb21wb25lbnQubmdDb250cm9sICYmXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Q29tcG9uZW50Lm5nQ29udHJvbC5mb3JtRGlyZWN0aXZlICYmXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0Q29tcG9uZW50Lm5nQ29udHJvbC5mb3JtRGlyZWN0aXZlLmZvcm0gJiZcclxuICAgICAgICAgICAgdGhpcy50YXJnZXRDb21wb25lbnQubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybS5iaW5kaW5nRGF0YVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBjb25zdCBiaW5kaW5nRGF0YSA9IHRoaXMudGFyZ2V0Q29tcG9uZW50Lm5nQ29udHJvbC5mb3JtRGlyZWN0aXZlLmZvcm0uYmluZGluZ0RhdGE7XHJcbiAgICAgICAgICAgIGlmIChiaW5kaW5nRGF0YS5zZXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgLy8g5YWz6Zet5Y+Y5pu05qOA5rWLXHJcbiAgICAgICAgICAgICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy52bS5mcmFtZUNvbnRleHQuYXBwQ29udGV4dDtcclxuICAgICAgICAgICAgICAgIGFwcENvbnRleHQuY2hhbmdlRGV0ZWN0aW9uQ29udHJvbGxlci5kZXRhY2goKTtcclxuXHJcbiAgICAgICAgICAgICAgICBsZXQgaGVscEZpZWxkcyA9IE9iamVjdC5rZXlzKG1hcEZpZWxkcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpZEluZGV4ID0gaGVscEZpZWxkcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSB0aGlzLnRhcmdldENvbXBvbmVudC5wcmltYXJ5RmllbGQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlbHBGaWVsZHMuaW5jbHVkZXModGhpcy50YXJnZXRDb21wb25lbnQucHJpbWFyeUZpZWxkKSAmJiBpZEluZGV4ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscEZpZWxkcy5zcGxpY2UoaWRJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscEZpZWxkcyA9IFt0aGlzLnRhcmdldENvbXBvbmVudC5wcmltYXJ5RmllbGQsIC4uLmhlbHBGaWVsZHNdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcGF0aEFyciA9IHRoaXMuZ2V0QmluZGluZ1BhdGhBcnJheSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYW55RmllbGRBcnIgPSB0aGlzLm1hcEZpZWxkc1toZWxwRmllbGRzWzBdXS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZm9ybUFueURhdGEgPSBiaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRoQXJyLmNvbmNhdChhbnlGaWVsZEFyclswXSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghZm9ybUFueURhdGEgfHwgZm9ybUFueURhdGEuc3BsaXQoJywnKS5sZW5ndGggPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVscEZpZWxkcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaGVscEZpZWxkcy5mb3JFYWNoKChoZWxwRmllbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFwRmllbGRzW2hlbHBGaWVsZF0uc3BsaXQoJywnKS5mb3JFYWNoKGZpZWxkUGF0aCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBwYXRoQXJyLmNvbmNhdChmaWVsZFBhdGguc3BsaXQoJy4nKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRvZG8gdWR05YWz6IGU6Zeu6aKYXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEZpZWxkQmluZGluZygpID09PSBmaWVsZFBhdGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNTdHIgPSBiaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXRoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNTdHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRpbmdEYXRhLmNsZWFyVmFsdWUocGF0aCwgdHJ1ZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByZXNBcnIgPSByZXNTdHIuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc0Fyci5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gcmVzQXJyLmpvaW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ0RhdGEuY2xlYXJWYWx1ZShwYXRoLCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZGluZ0RhdGEuc2V0VmFsdWUocGF0aCwgcmVzdWx0LCB0cnVlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyDph43mlrDmiZPlvIDlj5jmm7Tmo4DmtYtcclxuICAgICAgICAgICAgICAgIGFwcENvbnRleHQuY2hhbmdlRGV0ZWN0aW9uQ29udHJvbGxlci5yZWF0dGFjaCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGhlbHBEYXRhIOa4heepuuaXtu+8jOWAvOS4um51bGxcclxuICAgICAqIEBwYXJhbSBtYXBGaWVsZHMg5qC85byP5b2i5aaC77yae2lkOiBcImFzc29GaWVsZC5hc3NvRmllbGRcIiwgY29kZTogXCJhc3NvRmllbGQuYXNzb0ZpZWxkX0NvZGVcIiwgbmFtZTogXCJhc3NvRmllbGQuYXNzb0ZpZWxkX05hbWVcIn1cclxuICAgICAqL1xyXG4gICAgbWFwcGluZ0RhdGEoaGVscERhdGE6IGFueSwgbWFwRmllbGRzOiBhbnkpIHtcclxuICAgICAgICBpZiAoIW1hcEZpZWxkcykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDlhbPpl63lj5jmm7Tmo4DmtYtcclxuICAgICAgICBjb25zdCBhcHBDb250ZXh0ID0gdGhpcy52bS5mcmFtZUNvbnRleHQuYXBwQ29udGV4dDtcclxuICAgICAgICBhcHBDb250ZXh0LmNoYW5nZURldGVjdGlvbkNvbnRyb2xsZXIuZGV0YWNoKCk7XHJcblxyXG4gICAgICAgIGxldCBoZWxwRmllbGRzID0gT2JqZWN0LmtleXMobWFwRmllbGRzKTtcclxuICAgICAgICBjb25zdCBpZEluZGV4ID0gaGVscEZpZWxkcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtID09PSB0aGlzLnRhcmdldENvbXBvbmVudC5wcmltYXJ5RmllbGQpO1xyXG4gICAgICAgIGlmIChoZWxwRmllbGRzLmluY2x1ZGVzKHRoaXMudGFyZ2V0Q29tcG9uZW50LnByaW1hcnlGaWVsZCkgJiYgaWRJbmRleCAhPT0gMCkge1xyXG4gICAgICAgICAgICBoZWxwRmllbGRzLnNwbGljZShpZEluZGV4LCAxKTtcclxuICAgICAgICAgICAgaGVscEZpZWxkcyA9IFt0aGlzLnRhcmdldENvbXBvbmVudC5wcmltYXJ5RmllbGQsIC4uLmhlbHBGaWVsZHNdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIWhlbHBEYXRhKSB7XHJcbiAgICAgICAgICAgIGhlbHBGaWVsZHMucmV2ZXJzZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBoZWxwRmllbGRzLmZvckVhY2goKGY6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAvLyAx44CB6I635Y+W5a2X5q615YC8XHJcbiAgICAgICAgICAgIC8vIOWmguaenGhlbHBEYXRh5pyJ6YCJ5Lit5YC877yM5YiZ6I635Y+W5biu5Yqp5pWw5o2u5rqQ6YeM5a+55bqU5L2g5a2X5q6155qE5YC877ybXHJcbiAgICAgICAgICAgIC8vIOWmguaenGhlbHBEYXRh5rKh5pyJ5YC877yI5riF56m65Zy65pmv77yJ77yM5YiZ6L+U5Zue5LiA5Liq56m65a2X56ym5LiyXHJcbiAgICAgICAgICAgIGxldCB2YWw6IGFueSA9ICcnO1xyXG4gICAgICAgICAgICBpZiAoaGVscERhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChoZWxwRGF0YSBpbnN0YW5jZW9mIEFycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsID0gaGVscERhdGEubWFwKChoOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoZiwgaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB0aGlzLmdldFZhbHVlKGYsIGhlbHBEYXRhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gMuOAgeiuvue9ruWtl+auteWAvFxyXG4gICAgICAgICAgICAvLyDlpoLmnpxoZWxwRGF0YeS4jeWtmOWcqO+8iOa4heepuuWcuuaZr++8ie+8jOiOt+WPlkJpbmRpbmdEYXRh6YeM5a+55bqU5a2X5q6155qE5YC877yM5aaC5p6c5piv5pWw5YC877yM5YiZ6K6+572uMO+8jOWFtuS7luiuvue9ruS4iuS4gOatpeS4reeahOepuuWtl+espuS4su+8m1xyXG4gICAgICAgICAgICAvLyDlpoLmnpxoZWxwRGF0YeWtmOWcqO+8muebtOaOpeiuvue9ruS4iuS4gOatpeS4reiOt+WPlueahOWAvOOAglxyXG4gICAgICAgICAgICBjb25zdCBwYXRoQXJyID0gdGhpcy5nZXRCaW5kaW5nUGF0aEFycmF5KCk7XHJcbiAgICAgICAgICAgIG1hcEZpZWxkc1tmXS5zcGxpdCgnLCcpLmZvckVhY2goKGZmOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEZpZWxkQmluZGluZygpID09PSBmZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghaGVscERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZtLmJpbmRpbmdEYXRhLmNsZWFyVmFsdWUocGF0aEFyci5jb25jYXQoZmYuc3BsaXQoJy4nKSksIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZtLmJpbmRpbmdEYXRhLnNldFZhbHVlKHBhdGhBcnIuY29uY2F0KGZmLnNwbGl0KCcuJykpLCB2YWwsIHRydWUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgLy8g6YeN5paw5omT5byA5Y+Y5pu05qOA5rWLXHJcbiAgICAgICAgYXBwQ29udGV4dC5jaGFuZ2VEZXRlY3Rpb25Db250cm9sbGVyLnJlYXR0YWNoKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRWYWx1ZShmOiBzdHJpbmcsIGRhdGE6IGFueSkge1xyXG4gICAgICAgIGxldCB2YWwgPSAnJztcclxuICAgICAgICBpZiAoZi5pbmRleE9mKCcuJykgPT09IC0xKSB7XHJcbiAgICAgICAgICAgIHZhbCA9IGRhdGFbZl07XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdmFsID0gZi5zcGxpdCgnLicpLnJlZHVjZSgoYSwgYikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFbYl07XHJcbiAgICAgICAgICAgIH0sIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldEJpbmRpbmdQYXRoQXJyYXkoKTogYW55W10ge1xyXG4gICAgICAgIGNvbnN0IHBhdGggPSB0aGlzLnZtLmJpbmRpbmdQYXRoO1xyXG4gICAgICAgIGlmIChwYXRoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKG4gPT4gbiAhPT0gJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gW107XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==