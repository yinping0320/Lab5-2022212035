/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
/**
 * 在表单dom中展示错误信息
 * 需要将formControl中的errors对象传入
 *
 * eg: 在姓名输入框下方展示验证信息
 *  将viewModel.form.name.errors对象传入
 *  <label class="k-form-field">
 * <span>姓名</span>
 * <input class="k-textbox" formControlName="name" />
 * <validationMessage [errors]="viewModel.form.name.errors"></validationMessage>
 * </label>
 */
var ValidationMessageComponent = /** @class */ (function () {
    function ValidationMessageComponent(ele) {
        this.ele = ele;
        // 默认显示错误消息
        this.showErrorMessage = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ValidationMessageComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.errorMessage = this.getErrorMessage(this.errors);
        this.ele.nativeElement.style.display = !this.errorMessage ? 'none' : 'block';
    };
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationMessageComponent.prototype.getErrorMessage = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        if (!errors) {
            return null;
        }
        else {
            /** @type {?} */
            var errorMessage_1 = '';
            Object.keys(errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (errors[key].name) {
                    errorMessage_1 = errorMessage_1 + ' ' + errors[key].name;
                }
            }));
            return errorMessage_1;
        }
    };
    ValidationMessageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'validationMessage',
                    template: "\n      <div class=\"farris-feedback f-state-invalid\">\n          <span class=\"f-icon f-icon-message_warning f-feedback-icon\" (click)=\"showErrorMessage=true\" *ngIf=\"!showErrorMessage\"></span>\n          <span class=\"f-feedback-message\" *ngIf=\"showErrorMessage\" (click)=\"showErrorMessage=false\">{{this.errorMessage}}</span>\n      </div>\n    "
                }] }
    ];
    /** @nocollapse */
    ValidationMessageComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ValidationMessageComponent.propDecorators = {
        errors: [{ type: Input }],
        type: [{ type: Input }]
    };
    return ValidationMessageComponent;
}());
if (false) {
    /** @type {?} */
    ValidationMessageComponent.prototype.errors;
    /** @type {?} */
    ValidationMessageComponent.prototype.type;
    /** @type {?} */
    ValidationMessageComponent.prototype.errorMessage;
    /** @type {?} */
    ValidationMessageComponent.prototype.showErrorMessage;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageComponent.prototype.ele;
}
export { ValidationMessageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtbXNnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZm9ybXMvdmFsaWRhdGlvbi1tZXNzYWdlLyIsInNvdXJjZXMiOlsidmFsaWRhdGUtbXNnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWV2RjtJQWdCRSxvQ0FDVSxHQUFlO1FBQWYsUUFBRyxHQUFILEdBQUcsQ0FBWTs7UUFGbEIscUJBQWdCLEdBQUcsSUFBSSxDQUFDO0lBSy9CLENBQUM7Ozs7O0lBRUQsZ0RBQVc7Ozs7SUFBWCxVQUFZLE9BQXNCO1FBQ2hDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO0lBQy9FLENBQUM7Ozs7OztJQUNPLG9EQUFlOzs7OztJQUF2QixVQUF3QixNQUFNO1FBQzVCLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07O2dCQUNELGNBQVksR0FBRyxFQUFFO1lBQ3JCLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsR0FBRztnQkFDN0IsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFO29CQUNwQixjQUFZLEdBQUcsY0FBWSxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDO2lCQUN0RDtZQUNILENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTyxjQUFZLENBQUM7U0FDckI7SUFDSCxDQUFDOztnQkF0Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSxxV0FLUDtpQkFFSjs7OztnQkF4Qm1CLFVBQVU7Ozt5QkEwQjNCLEtBQUs7dUJBQ0wsS0FBSzs7SUEyQlIsaUNBQUM7Q0FBQSxBQXZDRCxJQXVDQzs7O0lBNUJDLDRDQUFnQjs7SUFDaEIsMENBQXNCOztJQUN0QixrREFBcUI7O0lBRXJCLHNEQUErQjs7Ozs7SUFFN0IseUNBQXVCOztBQXVCM0IsT0FBTyxFQUFFLDBCQUEwQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIEVsZW1lbnRSZWYsIElucHV0LCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbi8qKlxyXG4gKiDlnKjooajljZVkb23kuK3lsZXnpLrplJnor6/kv6Hmga9cclxuICog6ZyA6KaB5bCGZm9ybUNvbnRyb2zkuK3nmoRlcnJvcnPlr7nosaHkvKDlhaVcclxuICpcclxuICogZWc6IOWcqOWnk+WQjei+k+WFpeahhuS4i+aWueWxleekuumqjOivgeS/oeaBr1xyXG4gKiAg5bCGdmlld01vZGVsLmZvcm0ubmFtZS5lcnJvcnPlr7nosaHkvKDlhaVcclxuICogIDxsYWJlbCBjbGFzcz1cImstZm9ybS1maWVsZFwiPlxyXG4gICAgICAgIDxzcGFuPuWnk+WQjTwvc3Bhbj5cclxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJrLXRleHRib3hcIiBmb3JtQ29udHJvbE5hbWU9XCJuYW1lXCIgLz5cclxuICAgICAgICA8dmFsaWRhdGlvbk1lc3NhZ2UgW2Vycm9yc109XCJ2aWV3TW9kZWwuZm9ybS5uYW1lLmVycm9yc1wiPjwvdmFsaWRhdGlvbk1lc3NhZ2U+XHJcbiAgICA8L2xhYmVsPlxyXG4gKi9cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAndmFsaWRhdGlvbk1lc3NhZ2UnLFxyXG4gIHRlbXBsYXRlOiBgXHJcbiAgICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtZmVlZGJhY2sgZi1zdGF0ZS1pbnZhbGlkXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tbWVzc2FnZV93YXJuaW5nIGYtZmVlZGJhY2staWNvblwiIChjbGljayk9XCJzaG93RXJyb3JNZXNzYWdlPXRydWVcIiAqbmdJZj1cIiFzaG93RXJyb3JNZXNzYWdlXCI+PC9zcGFuPlxyXG4gICAgICAgICAgPHNwYW4gY2xhc3M9XCJmLWZlZWRiYWNrLW1lc3NhZ2VcIiAqbmdJZj1cInNob3dFcnJvck1lc3NhZ2VcIiAoY2xpY2spPVwic2hvd0Vycm9yTWVzc2FnZT1mYWxzZVwiPnt7dGhpcy5lcnJvck1lc3NhZ2V9fTwvc3Bhbj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgLFxyXG4gIHN0eWxlczogW11cclxufSlcclxuY2xhc3MgVmFsaWRhdGlvbk1lc3NhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMge1xyXG4gIEBJbnB1dCgpIGVycm9ycztcclxuICBASW5wdXQoKSB0eXBlOiBzdHJpbmc7XHJcbiAgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XHJcbiAgLy8g6buY6K6k5pi+56S66ZSZ6K+v5raI5oGvXHJcbiAgcHVibGljIHNob3dFcnJvck1lc3NhZ2UgPSB0cnVlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBlbGU6IEVsZW1lbnRSZWYsXHJcbiAgKSB7XHJcblxyXG4gIH1cclxuXHJcbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQge1xyXG4gICAgdGhpcy5lcnJvck1lc3NhZ2UgPSB0aGlzLmdldEVycm9yTWVzc2FnZSh0aGlzLmVycm9ycyk7XHJcbiAgICB0aGlzLmVsZS5uYXRpdmVFbGVtZW50LnN0eWxlLmRpc3BsYXkgPSAhdGhpcy5lcnJvck1lc3NhZ2UgPyAnbm9uZScgOiAnYmxvY2snO1xyXG4gIH1cclxuICBwcml2YXRlIGdldEVycm9yTWVzc2FnZShlcnJvcnMpIHtcclxuICAgIGlmICghZXJyb3JzKSB7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9ICcnO1xyXG4gICAgICBPYmplY3Qua2V5cyhlcnJvcnMpLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICBpZiAoZXJyb3JzW2tleV0ubmFtZSkge1xyXG4gICAgICAgICAgZXJyb3JNZXNzYWdlID0gZXJyb3JNZXNzYWdlICsgJyAnICsgZXJyb3JzW2tleV0ubmFtZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gZXJyb3JNZXNzYWdlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5leHBvcnQgeyBWYWxpZGF0aW9uTWVzc2FnZUNvbXBvbmVudCB9O1xyXG4iXX0=