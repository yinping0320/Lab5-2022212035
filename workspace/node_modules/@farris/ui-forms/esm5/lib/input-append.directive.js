/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input, Output, ViewContainerRef, NgZone } from '@angular/core';
import { EventEmitter } from '@angular/core';
var InputAppendDirective = /** @class */ (function () {
    // private ngControl: NgControl;
    function InputAppendDirective(viewRef, el, render, injector) {
        this.viewRef = viewRef;
        this.el = el;
        this.render = render;
        this.injector = injector;
        this._enableAppend = true;
        // 应用场景，默认这个功能是在简单表格 Table
        // 追加一个场景在普通表单上 Form
        this._appendScene = 'Table';
        // 追加到哪个类型下 TextBox、MultiTextBox、 StaticText
        this.inputAppendControlType = 'InputGroup';
        // 根据类型不一样，在控件处于禁用、只读时，决定颜色是否可用
        // 有两种：按钮 button 文本 text
        this._appendType = 'button';
        // 追加的文本
        this._inputAppendText = '';
        // 模板
        // @Input() inputAppendTmpl: TemplateRef<any>;
        this._disabled = false;
        // 当_appendCls为空时，
        this._appendCls = 'input-group-text';
        /*
            * 文本点击事件
            */
        this.inputAppendClickEvent = new EventEmitter();
        // 标记native的外层
        this.elWrapElement = null;
        // 标记元素
        this.appendWrapElement = null;
        // 暂时不用
        this.appendTextElement = null;
        this.clickHandler = null;
        this.disabledCls = 'f-state-disabled';
        this.ngZone = null;
        this.ngZone = this.injector.get(NgZone);
    }
    Object.defineProperty(InputAppendDirective.prototype, "enableAppend", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableAppend;
        },
        // 相当于启用禁用此功能
        set: 
        // 相当于启用禁用此功能
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value === '' || value) {
                this._enableAppend = true;
                // 需要
                if (!this.appendWrapElement) {
                    this.createStruct();
                }
            }
            else {
                this._enableAppend = false;
                if (this.appendWrapElement) {
                    this.resetStruct();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendScene", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appendScene;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            // 支持这两个场景
            val = val == 'Form' ? 'Form' : 'Table';
            if (val != this._appendScene) {
                switch (this.inputAppendControlType) {
                    case 'StaticText':
                        this.render.removeClass(this.el.nativeElement, 'f-cmp-input-append-' + this._appendScene.toLowerCase());
                        this.render.addClass(this.el.nativeElement, 'f-cmp-input-append-' + val.toLowerCase());
                        break;
                    case 'TextBox':
                    case 'MultiTextBox':
                        if (this.elWrapElement) {
                            this.elWrapElement.className = this.elWrapElement.className.replace('f-cmp-input-append-' + this._appendScene.toLowerCase(), 'f-cmp-input-append-' + val.toLowerCase());
                        }
                        break;
                }
                this._appendScene = val;
                this.modifyPaddingRight();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appendType;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            var _this = this;
            if (value) {
                if (['button', 'text'].findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item == value; })) < 0) {
                    // 类型在支持范围内
                    value = 'button';
                }
                if (value != this._appendType) {
                    if (this.appendWrapElement) {
                        // 移除原来，追加新的
                        this.render.removeClass(this.appendWrapElement, 'input-append-' + this._appendType);
                        this.render.addClass(this.appendWrapElement, 'input-append-' + value);
                        if (this._appendType == 'button') {
                            // 原来是按钮
                            if (this.clickHandler) {
                                this.clickHandler();
                                this.clickHandler = null;
                            }
                        }
                        else {
                            this.clickHandler = this.render.listen(this.appendWrapElement, 'click', (/**
                             * @param {?} ev
                             * @return {?}
                             */
                            function (ev) {
                                _this.inputAppendClickEvent.emit(ev);
                            }));
                        }
                    }
                    this._appendType = value;
                    this.modifyPaddingRight();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendText", {
        get: /**
         * @return {?}
         */
        function () {
            return this._inputAppendText;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._inputAppendText) {
                this._inputAppendText = value;
                if (this.appendWrapElement && this._enableAppend) {
                    this.render.removeChild(this.appendWrapElement, this.appendTextElement);
                    this.appendTextElement.innerHTML = value;
                    this.render.appendChild(this.appendWrapElement, this.appendTextElement);
                    this.modifyPaddingRight();
                }
                else {
                    this.createStruct();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendDisabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value != this._disabled) {
                this._disabled = value;
                if (this.appendWrapElement) {
                    value && this.render.addClass(this.appendWrapElement, this.disabledCls);
                    !value && this.render.removeClass(this.appendWrapElement, this.disabledCls);
                }
                this.modifyPaddingRight();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputAppendDirective.prototype, "inputAppendCls", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appendCls;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val != this._appendCls) {
                val = val ? val : 'input-group-text';
                if (this.appendTextElement) {
                    this.appendTextElement.className = val;
                }
                this._appendCls = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.createStruct();
    };
    /**
     * @return {?}
     */
    InputAppendDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        //this.resetStruct();
        if (this.clickHandler) {
            this.clickHandler();
            this.clickHandler = null;
        }
        if (this.appendWrapElement) {
            this.appendWrapElement.remove();
            this.appendWrapElement = null;
        }
        if (this.elWrapElement) {
            this.elWrapElement.remove();
            this.elWrapElement = null;
        }
    };
    /**
     * 重置
     */
    /**
     * 重置
     * @private
     * @return {?}
     */
    InputAppendDirective.prototype.resetStruct = /**
     * 重置
     * @private
     * @return {?}
     */
    function () {
        if (this.clickHandler) {
            this.clickHandler();
            this.clickHandler = null;
        }
        // 分类型移除不同新增加的结构或样式
        switch (this.inputAppendControlType) {
            case 'StaticText':
                this.render.removeClass(this.el.nativeElement, 'f-cmp-static-text-input-append');
                this.render.removeClass(this.el.nativeElement, 'f-cmp-input-append-' + this.inputAppendScene.toLowerCase());
                break;
            case 'TextBox':
            case 'MultiTextBox':
                if (this.elWrapElement) {
                    /** @type {?} */
                    var wrapParent = this.render.parentNode(this.elWrapElement);
                    this.render.appendChild(wrapParent, this.el.nativeElement);
                    this.elWrapElement.remove();
                    this.elWrapElement = null;
                }
                break;
        }
        if (this.appendWrapElement) {
            this.appendWrapElement.remove();
            this.appendWrapElement = null;
        }
        this.modifyPaddingRight();
    };
    /**
     * 创建插入结构
     */
    /**
     * 创建插入结构
     * @private
     * @return {?}
     */
    InputAppendDirective.prototype.createStruct = /**
     * 创建插入结构
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.inputAppendText || !this.enableAppend || this.appendWrapElement) {
            return;
        }
        /** @type {?} */
        var buttonWrap = this.render.createElement('div');
        buttonWrap.className = 'input-group-append input-append-wrapper';
        buttonWrap.className += ' input-append-' + this.inputAppendType;
        if (this._disabled) {
            buttonWrap.className += ' ' + this.disabledCls;
        }
        /** @type {?} */
        var buttonTextWrap = this.render.createElement('div');
        buttonTextWrap.className = this.inputAppendCls;
        buttonTextWrap.innerHTML = this.inputAppendText;
        this.appendTextElement = buttonTextWrap;
        this.appendWrapElement = buttonWrap;
        this.render.appendChild(buttonWrap, buttonTextWrap);
        switch (this.inputAppendControlType) {
            case 'StaticText':
                // 此时还没有生成内部的样式
                // let textareaEl = this.el.nativeElement.querySelector('.f-form-control-textarea');
                /** @type {?} */
                var clsNames = 'f-cmp-static-text-input-append' + (' f-cmp-input-append-' + this.inputAppendScene.toLowerCase()) + (this._disabled ? ' ' + this.disabledCls : '');
                clsNames.split(' ').map((/**
                 * @param {?} tclsName
                 * @return {?}
                 */
                function (tclsName) {
                    _this.render.addClass(_this.el.nativeElement, tclsName);
                }));
                this.render.appendChild(this.el.nativeElement, buttonWrap);
                break;
            case 'TextBox':
            case 'MultiTextBox':
                /** @type {?} */
                var textParent = this.render.parentNode(this.el.nativeElement);
                /** @type {?} */
                var inputWrap = this.render.createElement('div');
                inputWrap.className = 'f-cmp-text-input-append f-cmp-input-append-' + this.inputAppendScene.toLowerCase() + (this._disabled ? ' ' + this.disabledCls : '');
                if (this.el.nativeElement.outerHTML.indexOf('textarea') > -1) {
                    inputWrap.className = 'f-cmp-textarea-input-append f-cmp-input-append-' + this.inputAppendScene.toLowerCase() + (this._disabled ? ' ' + this.disabledCls : '');
                }
                this.elWrapElement = inputWrap;
                this.render.appendChild(inputWrap, this.el.nativeElement);
                this.render.appendChild(inputWrap, buttonWrap);
                this.render.appendChild(textParent, inputWrap);
                break;
            default:
                // 存在类似下拉这样的控件，内部调用input-group结构还没有初始化
                /** @type {?} */
                var inputGroupEl = this.el.nativeElement.querySelector('.input-group');
                if (inputGroupEl) {
                    this.render.appendChild(inputGroupEl, buttonWrap);
                }
                else {
                    if (this.ngZone) {
                        this.ngZone.runOutsideAngular((/**
                         * @return {?}
                         */
                        function () {
                            setTimeout((/**
                             * @return {?}
                             */
                            function () {
                                /** @type {?} */
                                var inputGroupEl2 = _this.el.nativeElement.querySelector('.input-group');
                                _this.render.appendChild(inputGroupEl2, buttonWrap);
                            }));
                        }));
                    }
                }
        }
        if (this.inputAppendType == 'button') {
            this.clickHandler = this.render.listen(this.appendWrapElement, 'click', (/**
             * @param {?} ev
             * @return {?}
             */
            function (ev) {
                if (!_this.inputAppendDisabled) {
                    _this.inputAppendClickEvent.emit(ev);
                }
            }));
        }
        this.modifyPaddingRight();
    };
    /**
     * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
     * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
     */
    /**
     * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
     * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
     * @private
     * @return {?}
     */
    InputAppendDirective.prototype.modifyPaddingRight = /**
     * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
     * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var findType = ['StaticText', 'TextBox', 'MultiTextBox'].find((/**
         * @param {?} typeItem
         * @return {?}
         */
        function (typeItem) { return typeItem == _this.inputAppendControlType; }));
        if (this.inputAppendScene == 'Form' && findType) {
            /** @type {?} */
            var changeEl = findType == 'StaticText' ? this.el.nativeElement.querySelector('span') : this.el.nativeElement;
            if (this.enableAppend && !this._disabled && this.appendWrapElement) {
                //window.getComputhis.appendWrapElement
                /** @type {?} */
                var tRectObj = this.appendWrapElement.getBoundingClientRect();
                this.render.setStyle(changeEl, 'paddingRight', tRectObj.width + 'px');
            }
            else {
                this.render.removeStyle(changeEl, 'paddingRight');
            }
        }
    };
    InputAppendDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[input-append]',
                },] }
    ];
    /** @nocollapse */
    InputAppendDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    InputAppendDirective.propDecorators = {
        enableAppend: [{ type: Input, args: ['input-append',] }],
        inputAppendScene: [{ type: Input }],
        inputAppendControlType: [{ type: Input }],
        inputAppendType: [{ type: Input }],
        inputAppendText: [{ type: Input }],
        inputAppendDisabled: [{ type: Input }],
        inputAppendCls: [{ type: Input }],
        inputAppendClickEvent: [{ type: Output }]
    };
    return InputAppendDirective;
}());
export { InputAppendDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._enableAppend;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._appendScene;
    /** @type {?} */
    InputAppendDirective.prototype.inputAppendControlType;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._appendType;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._inputAppendText;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype._appendCls;
    /** @type {?} */
    InputAppendDirective.prototype.inputAppendClickEvent;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.elWrapElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.appendWrapElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.appendTextElement;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.clickHandler;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.disabledCls;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    InputAppendDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,