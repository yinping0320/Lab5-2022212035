/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { LocaleService } from '@farris/ui-locale';
import { EventManager } from '@angular/platform-browser';
import ResizeObserver from 'resize-observer-polyfill';
var TextareaWordcountDirective = /** @class */ (function () {
    function TextareaWordcountDirective(el, render, injector) {
        this.el = el;
        this.render = render;
        this.injector = injector;
        this.useWordCount = true;
        /**
         * 统计字数的方式； surplus 剩余可输入字数; length: 当前已输入字数；
         *
         * 默认为 surplus
         */
        this.countType = 'surplus';
        this.onlyShowInDialog = false;
        this.wordCountElement = null;
        // 当前字数
        this.currentLengthElement = null;
        this.onInput = null;
        this.ro = null;
        this.eventManager = this.injector.get(EventManager);
        this.localeSer = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    TextareaWordcountDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    TextareaWordcountDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initWordCount();
        if (this.ngControl && this.useWordCount) {
            this.ngControl.control.valueChanges.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.updateWordsCount();
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TextareaWordcountDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.useWordCount && !changes.useWordCount.isFirstChange()) {
            if (this.useWordCount) {
                this.initWordCount();
            }
            else {
                this.destroy();
            }
        }
    };
    /**
     * @return {?}
     */
    TextareaWordcountDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
        if (this.ro) {
            this.ro.disconnect();
            this.ro.unobserve(this.el.nativeElement.parentElement);
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaWordcountDirective.prototype.destroy = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.onInput) {
            this.onInput();
        }
        if (this.wordCountElement) {
            this.wordCountElement.remove();
        }
    };
    /**
     * @return {?}
     */
    TextareaWordcountDirective.prototype.initWordCount = /**
     * @return {?}
     */
    function () {
        if (this.useWordCount && !this.onlyShowInDialog) {
            this.createWordCountElement();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaWordcountDirective.prototype.createWordCountID = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            var ctrlName = this.ngControl.name;
            return tagName + "_WORDCOUNT_" + ctrlName;
        }
        else {
            if (this.el.nativeElement.id) {
                return tagName + "_WORDCOUNT_" + this.el.nativeElement.id;
            }
        }
        return '';
    };
    /**
     * @private
     * @return {?}
     */
    TextareaWordcountDirective.prototype.createWordCountElement = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var max = this.el.nativeElement.maxLength;
        if (!max || max < 0) {
            // console.info('未设置最大字符数，计数功能失效。');
            return;
        }
        /** @type {?} */
        var wordCountSPAN = this.render.createElement('span');
        wordCountSPAN.className = 'textarea-wordcount';
        /** @type {?} */
        var id = this.createWordCountID();
        if (id) {
            wordCountSPAN.id = id;
        }
        this.render.setStyle(wordCountSPAN, 'position', 'absolute');
        this.render.setStyle(wordCountSPAN, 'bottom', '0px');
        var _a = this.el.nativeElement.getBoundingClientRect(), width = _a.width, right = _a.right;
        var parentWidth = this.el.nativeElement.parentElement.getBoundingClientRect().width;
        if (parentWidth !== width) {
            this.render.setStyle(wordCountSPAN, 'right', parentWidth - width + 10 + "px");
            this.ro = new ResizeObserver((/**
             * @param {?} entries
             * @param {?} observer
             * @return {?}
             */
            function (entries, observer) {
                if (entries && entries[0]) {
                    /** @type {?} */
                    var _pw = entries[0].contentRect.width;
                    _this.render.setStyle(wordCountSPAN, 'right', _pw - width + 10 + "px");
                }
            }));
            this.ro.observe(this.el.nativeElement.parentElement);
        }
        else {
            this.render.setStyle(wordCountSPAN, 'right', '10px');
        }
        this.render.setStyle(wordCountSPAN, 'cursor', 'pointer');
        this.el.nativeElement.after(wordCountSPAN);
        this.wordCountElement = wordCountSPAN;
        /** @type {?} */
        var currentLengthSPAN = this.render.createElement('span');
        wordCountSPAN.appendChild(currentLengthSPAN);
        this.currentLengthElement = currentLengthSPAN;
        currentLengthSPAN.after(" / " + max);
        this.updateWordsCount();
        this.onInput = this.render.listen(this.el.nativeElement, 'input', (/**
         * @return {?}
         */
        function () {
            // value.replace(/\n|\r/gi, '') // 移除换行符
            _this.updateWordsCount();
        }));
    };
    /**
     * @return {?}
     */
    TextareaWordcountDirective.prototype.updateWordsCount = /**
     * @return {?}
     */
    function () {
        if (!this.useWordCount || !this.currentLengthElement) {
            return;
        }
        /** @type {?} */
        var max = this.el.nativeElement.maxLength;
        /** @type {?} */
        var val = this.countType === 'surplus' ? max - this.el.nativeElement.value.length : this.el.nativeElement.value.length;
        /** @type {?} */
        var tip = 'messager.prompt.tips.' + this.countType;
        this.currentLengthElement.innerText = val;
        this.wordCountElement.title = this.localeSer.getValue(tip).replace('{0}', val);
    };
    TextareaWordcountDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[word-count]',
                    exportAs: 'WordCountRef'
                },] }
    ];
    /** @nocollapse */
    TextareaWordcountDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    TextareaWordcountDirective.propDecorators = {
        useWordCount: [{ type: Input, args: ['word-count',] }],
        countType: [{ type: Input }],
        onlyShowInDialog: [{ type: Input }]
    };
    return TextareaWordcountDirective;
}());
export { TextareaWordcountDirective };
if (false) {
    /** @type {?} */
    TextareaWordcountDirective.prototype.useWordCount;
    /**
     * 统计字数的方式； surplus 剩余可输入字数; length: 当前已输入字数；
     *
     * 默认为 surplus
     * @type {?}
     */
    TextareaWordcountDirective.prototype.countType;
    /** @type {?} */
    TextareaWordcountDirective.prototype.onlyShowInDialog;
    /** @type {?} */
    TextareaWordcountDirective.prototype.wordCountElement;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.currentLengthElement;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.onInput;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaWordcountDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,