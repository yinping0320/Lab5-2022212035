/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IdService } from '@farris/ui-common';
var RadioGroupComponent = /** @class */ (function () {
    function RadioGroupComponent(idSer) {
        this.idSer = idSer;
        this.modelChange = new EventEmitter();
        // tslint:disable-next-line:ban-types
        this.subscriber = [];
        this.controlChange = (/**
         * @return {?}
         */
        function () { });
        this.controlTouch = (/**
         * @return {?}
         */
        function () { });
    }
    /**
     * @return {?}
     */
    RadioGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.idSer.generate().replace(/-/g, '_');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioGroupComponent.prototype.changeModel = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
        this.modelChange.emit(this.model);
        this.controlChange(value);
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioGroupComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
        this.changeModel(this.model);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioGroupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioGroupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlTouch = fn;
    };
    RadioGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-radio-group',
                    template: "\n    <div class=\"farris-radio-group btn-group\"\n    [class.farris-input-wrap]=\"type!=='button'\"\n    [class.btn-group-toggle]=\"type==='button'\"\n    [class.farris-checkradio-hor]=\"horizontal\">\n      <ng-content></ng-content>\n    </div>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return RadioGroupComponent; })),
                            multi: true,
                        }],
                    styles: ["\n    "]
                }] }
    ];
    /** @nocollapse */
    RadioGroupComponent.ctorParameters = function () { return [
        { type: IdService }
    ]; };
    RadioGroupComponent.propDecorators = {
        type: [{ type: Input }],
        model: [{ type: Input }],
        name: [{ type: Input }],
        horizontal: [{ type: Input }],
        modelChange: [{ type: Output }]
    };
    return RadioGroupComponent;
}());
export { RadioGroupComponent };
if (false) {
    /** @type {?} */
    RadioGroupComponent.prototype.type;
    /** @type {?} */
    RadioGroupComponent.prototype.model;
    /** @type {?} */
    RadioGroupComponent.prototype.name;
    /** @type {?} */
    RadioGroupComponent.prototype.horizontal;
    /** @type {?} */
    RadioGroupComponent.prototype.modelChange;
    /** @type {?} */
    RadioGroupComponent.prototype.subscriber;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.idSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9yYWRpby9yYWRpby1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDOUM7SUFrQ0ksNkJBQW9CLEtBQWdCO1FBQWhCLFVBQUssR0FBTCxLQUFLLENBQVc7UUFMMUIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDOztRQUdoRCxlQUFVLEdBQWUsRUFBRSxDQUFDO1FBNEJwQixrQkFBYTs7O1FBQWEsY0FBUSxDQUFDLEVBQUE7UUFDbkMsaUJBQVk7OztRQUFhLGNBQVEsQ0FBQyxFQUFBO0lBMUIxQyxDQUFDOzs7O0lBRUQsc0NBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7SUFFRCx5Q0FBVzs7OztJQUFYLFVBQVksS0FBVTtRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELHdDQUFVOzs7O0lBQVYsVUFBVyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsOENBQWdCOzs7O0lBQWhCLFVBQWlCLEVBQVk7UUFDekIsSUFBSSxDQUFDLGFBQWEsR0FBRyxFQUFFLENBQUE7SUFDM0IsQ0FBQzs7Ozs7SUFFRCwrQ0FBaUI7Ozs7SUFBakIsVUFBa0IsRUFBWTtRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQTtJQUMxQixDQUFDOztnQkExREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFFBQVEsRUFBRSw0UEFPWDtvQkFDQyxTQUFTLEVBQUUsQ0FBQzs0QkFDUixPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixXQUFXLEVBQUUsVUFBVTs7OzRCQUFDLGNBQU0sT0FBQSxtQkFBbUIsRUFBbkIsQ0FBbUIsRUFBQzs0QkFDbEQsS0FBSyxFQUFFLElBQUk7eUJBQ2QsQ0FBQzs2QkFDTyxRQUNSO2lCQUNKOzs7O2dCQWxCUSxTQUFTOzs7dUJBcUJiLEtBQUs7d0JBR0wsS0FBSzt1QkFFTCxLQUFLOzZCQUVMLEtBQUs7OEJBRUwsTUFBTTs7SUFrQ1gsMEJBQUM7Q0FBQSxBQS9ERCxJQStEQztTQTdDWSxtQkFBbUI7OztJQUU1QixtQ0FBc0I7O0lBR3RCLG9DQUFvQjs7SUFFcEIsbUNBQXNCOztJQUV0Qix5Q0FBNkI7O0lBRTdCLDBDQUFnRDs7SUFHaEQseUNBQTRCOzs7OztJQTRCNUIsNENBQTJDOzs7OztJQUMzQywyQ0FBMEM7Ozs7O0lBM0I5QixvQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmLCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IElkU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1yYWRpby1ncm91cCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImZhcnJpcy1yYWRpby1ncm91cCBidG4tZ3JvdXBcIlxyXG4gICAgW2NsYXNzLmZhcnJpcy1pbnB1dC13cmFwXT1cInR5cGUhPT0nYnV0dG9uJ1wiXHJcbiAgICBbY2xhc3MuYnRuLWdyb3VwLXRvZ2dsZV09XCJ0eXBlPT09J2J1dHRvbidcIlxyXG4gICAgW2NsYXNzLmZhcnJpcy1jaGVja3JhZGlvLWhvcl09XCJob3Jpem9udGFsXCI+XHJcbiAgICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cclxuICAgIDwvZGl2PlxyXG4gIGAsXHJcbiAgICBwcm92aWRlcnM6IFt7XHJcbiAgICAgICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gUmFkaW9Hcm91cENvbXBvbmVudCksXHJcbiAgICAgICAgbXVsdGk6IHRydWUsXHJcbiAgICB9XSxcclxuICAgIHN0eWxlczogW2BcclxuICAgIGBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgUmFkaW9Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG4gICAgLyogcmFkaW8g57G75Z6LICovXHJcbiAgICBASW5wdXQoKSB0eXBlOiBzdHJpbmc7XHJcblxyXG4gICAgLyog5Yid5aeL5YyWIHJhZGlvIOeahOWAvCAqL1xyXG4gICAgQElucHV0KCkgbW9kZWw6IGFueTtcclxuXHJcbiAgICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgaG9yaXpvbnRhbDogYm9vbGVhbjtcclxuXHJcbiAgICBAT3V0cHV0KCkgbW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6YmFuLXR5cGVzXHJcbiAgICBzdWJzY3JpYmVyOiBGdW5jdGlvbltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpZFNlcjogSWRTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5pZFNlci5nZW5lcmF0ZSgpLnJlcGxhY2UoLy0vZywgJ18nKTtcclxuICAgIH1cclxuXHJcbiAgICBjaGFuZ2VNb2RlbCh2YWx1ZTogYW55KSB7XHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMubW9kZWxDaGFuZ2UuZW1pdCh0aGlzLm1vZGVsKTtcclxuICAgICAgICB0aGlzLmNvbnRyb2xDaGFuZ2UodmFsdWUpO1xyXG4gICAgfVxyXG5cclxuICAgIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMubW9kZWwgPSB2YWx1ZTtcclxuICAgICAgICB0aGlzLmNoYW5nZU1vZGVsKHRoaXMubW9kZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25DaGFuZ2UoZm46IEZ1bmN0aW9uKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sQ2hhbmdlID0gZm5cclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xUb3VjaCA9IGZuXHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb250cm9sQ2hhbmdlOiBGdW5jdGlvbiA9ICgpID0+IHsgfVxyXG4gICAgcHJpdmF0ZSBjb250cm9sVG91Y2g6IEZ1bmN0aW9uID0gKCkgPT4geyB9XHJcblxyXG59XHJcbiJdfQ==