/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef, Optional, ElementRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { RadioGroupComponent } from './radio-group.component';
import { HostBinding } from '@angular/core';
var RadioButtonComponent = /** @class */ (function () {
    function RadioButtonComponent(radioGroup, el) {
        this.radioGroup = radioGroup;
        this.el = el;
        /* radio 原生name 用于多个radio单选使用 */
        // get name() {
        // }
        this.name = '';
        /* 按钮类型 */
        this.type = 'secondary';
        /* radio 值 */
        this.label = '';
        this.modelChange = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        function () { });
        this.controlTouch = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(RadioButtonComponent.prototype, "model", {
        /* radio 值 */
        get: /* radio 值 */
        /**
         * @return {?}
         */
        function () {
            if (this.hasParent(this.el.nativeElement)) {
                return this.radioGroup.model;
            }
            return this.nyModel;
        },
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            this.nyModel = model;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RadioButtonComponent.prototype, "farrisRadioButtonClass", {
        get: /**
         * @return {?}
         */
        function () { return true; },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.name = this.hasParent(this.el.nativeElement) ? this.radioGroup.name : '';
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.isGroupModel = /**
     * @return {?}
     */
    function () {
        return this.label === this.radioGroup.model;
    };
    /**
     * @return {?}
     */
    RadioButtonComponent.prototype.changeModelHandler = /**
     * @return {?}
     */
    function () {
        // 父元素获取label  子元素再从父元素获取model
        if (this.hasParent(this.el.nativeElement)) {
            return this.radioGroup.changeModel(this.label);
        }
        this.model = this.label;
        this.modelChange.emit(this.model);
        this.controlChange(this.label);
    };
    /* 是否存在父元素  存在即单选组*/
    /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    RadioButtonComponent.prototype.hasParent = /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.parentElement.classList.contains('farris-input-wrap') || element.parentElement.classList.contains('btn-group');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    RadioButtonComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioButtonComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    RadioButtonComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlTouch = fn;
    };
    RadioButtonComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-radio-button',
                    template: "\n    <label [class]=\"'btn btn-'+type\" [class.active]=\"isGroupModel()\" [class.disabled]=\"disabled\">\n        <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\"\n        [ngModel]=\"model\" (ngModelChange)=\"changeModelHandler()\" type=\"radio\" [disabled]=\"disabled\">\n          <ng-content>\n          </ng-content>\n    </label>\n  ",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return RadioButtonComponent; })),
                            multi: true,
                        }],
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n        .farris-radio-button>.btn{\n            margin-left:-1px\n          }\n          .farris-radio-button>.btn.active, .farris-radio-button>.btn:hover{\n            position: relative;\n          }\n      "]
                }] }
    ];
    /** @nocollapse */
    RadioButtonComponent.ctorParameters = function () { return [
        { type: RadioGroupComponent, decorators: [{ type: Optional }] },
        { type: ElementRef }
    ]; };
    RadioButtonComponent.propDecorators = {
        type: [{ type: Input }],
        model: [{ type: Input }],
        id: [{ type: Input }],
        label: [{ type: Input }],
        disabled: [{ type: Input }],
        modelChange: [{ type: Output }],
        farrisRadioButtonClass: [{ type: HostBinding, args: ['class.farris-radio-button',] }]
    };
    return RadioButtonComponent;
}());
export { RadioButtonComponent };
if (false) {
    /** @type {?} */
    RadioButtonComponent.prototype.name;
    /** @type {?} */
    RadioButtonComponent.prototype.type;
    /** @type {?} */
    RadioButtonComponent.prototype.id;
    /** @type {?} */
    RadioButtonComponent.prototype.label;
    /** @type {?} */
    RadioButtonComponent.prototype.disabled;
    /** @type {?} */
    RadioButtonComponent.prototype.nyModel;
    /** @type {?} */
    RadioButtonComponent.prototype.modelChange;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.controlTouch;
    /** @type {?} */
    RadioButtonComponent.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,