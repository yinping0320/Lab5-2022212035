/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { OverLayHiddenService } from '@farris/ui-common';
import { of } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
var SingleSelectDirective = /** @class */ (function () {
    function SingleSelectDirective(injector, elRef, render) {
        var _this = this;
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.items = [];
        this.position = 'below';
        this.container = null;
        this.selectEl = null;
        this.overlayHandler = null;
        this.displayTextEl = null;
        this.ngZone = null;
        this.beforeShow = null;
        this.overlaySer = this.injector.get(OverLayHiddenService, new OverLayHiddenService());
        this.ngZone = this.injector.get(NgZone, null);
        if (this.overlaySer) {
            if (this.ngZone) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () {
                    _this.registerMouseEvent();
                }));
            }
            else {
                this.registerMouseEvent();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    SingleSelectDirective.prototype.registerMouseEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.overlayHandler = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.panelRef.classList.contains('f-area-show')) {
                return;
            }
            if (_this.panelRef.contains(e.target)) {
                return;
            }
            if (_this.selectEl.contains(e.target)) {
                return;
            }
            _this.panelRef.classList.remove('f-area-show');
        }));
    };
    /**
     * @return {?}
     */
    SingleSelectDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngCtrl = this.injector.get(NgControl);
        if (this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.updateDisplayText();
            }));
        }
    };
    /**
     * @return {?}
     */
    SingleSelectDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var container = this.createMySelect().container;
        this.selectEl = container;
        this.elRef.nativeElement.style.display = 'none';
    };
    /**
     * @return {?}
     */
    SingleSelectDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overlayHandler) {
            this.overlayHandler();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SingleSelectDirective.prototype.createMySelect = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectContainerEl = document.createElement('div');
        selectContainerEl.className = 'input-group f-cmp-inputgroup';
        if (this.width) {
            selectContainerEl.style.width = this.width + "px";
        }
        selectContainerEl.style.userSelect = 'none';
        selectContainerEl.style.overflow = 'hidden';
        /** @type {?} */
        var selectTextEl = document.createElement('div');
        selectTextEl.className = 'form-control f-utils-fill text-left px-1 d-flex';
        selectTextEl.style.alignItems = 'center';
        selectTextEl.style.whiteSpace = 'nowrap';
        this.displayTextEl = selectTextEl;
        /** @type {?} */
        var selectArrowEl = document.createElement('div');
        selectArrowEl.className = 'input-group-append';
        selectArrowEl.innerHTML = "<span class=\"input-group-text\"><i class=\"f-icon f-icon-arrow-s\"></i></span>";
        selectContainerEl.appendChild(selectTextEl);
        selectContainerEl.appendChild(selectArrowEl);
        this.elRef.nativeElement.after(selectContainerEl);
        this.render.listen(selectContainerEl, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.panelRef.classList.contains('f-area-show')) {
                _this.panelRef.classList.remove('f-area-show');
                return;
            }
            if (!_this.beforeShow) {
                _this.beforeShow = (/**
                 * @return {?}
                 */
                function () {
                    return of(true);
                });
            }
            _this.updatePosition();
            _this.beforeShow({ instance: _this }).pipe(debounceTime(10)).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r) {
                    _this.panelRef.classList.add('f-area-show');
                }
            }));
        }));
        this.render.listen(this.panelRef, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.target.nodeName === 'LI') {
                /** @type {?} */
                var val = e.target.getAttribute('value');
                _this.ngCtrl.control.setValue(val);
                _this.panelRef.classList.remove('f-area-show');
                selectTextEl.innerHTML = e.target.innerHTML;
            }
        }));
        this.panelRef.style.cssText = "\n        position:fixed;z-index: 100;\n        box-shadow: 0 2px 8px 0 rgba(0,0,0,.15);\n        border-radius: 3px;max-height:300px;overflow:auto;\n        transition: all 0.08s linear;";
        this.panelRef.querySelector('ul').style.cssText = "position:relative;min-width: 100%;border:none; box-shadow: none;";
        this.updateDisplayText();
        return { container: selectContainerEl };
    };
    /**
     * @private
     * @return {?}
     */
    SingleSelectDirective.prototype.updateDisplayText = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var li = _this.panelRef.querySelector("[value=\"" + _this.ngCtrl.value + "\"]");
            _this.displayTextEl.innerHTML = li ? li.innerHTML : '';
            if (_this.items && !_this.items.length) {
                /** @type {?} */
                var item = _this.items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.value == _this.ngCtrl.value; }));
                if (item) {
                    _this.displayTextEl.innerHTML = item.label;
                }
            }
            _this.displayTextEl.title = _this.displayTextEl.innerText;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    SingleSelectDirective.prototype.updatePosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ul = this.panelRef.querySelector('ul');
        if (this.position === 'above') {
            ul.style.position = 'relative';
            /** @type {?} */
            var t = this.selectEl.offsetTop - ul.offsetHeight - 6;
            /** @type {?} */
            var top_1 = t + "px";
            this.panelRef.style.top = top_1;
            this.panelRef.style.transformOrigin = 'bottom';
        }
        else {
            this.panelRef.style.top = 'auto';
            if (this.container) {
                this.panelRef.style.top = (this.panelRef.offsetTop - this.container.scrollTop) + 'px';
            }
        }
        // if ( this.selectEl.offsetLeft) {
        //     this.panelRef.style.left = this.selectEl.offsetLeft + 'px';
        // }
        if (!this.width) {
            this.panelRef.style.width = this.selectEl.offsetWidth + 'px';
            ul.style.width = '100%';
        }
        else {
            this.panelRef.style.width = this.width + 'px';
        }
    };
    SingleSelectDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[single-select]',
                    exportAs: 'singleSelect'
                },] }
    ];
    /** @nocollapse */
    SingleSelectDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SingleSelectDirective.propDecorators = {
        items: [{ type: Input }],
        panelRef: [{ type: Input }],
        width: [{ type: Input }],
        position: [{ type: Input }],
        container: [{ type: Input }]
    };
    return SingleSelectDirective;
}());
export { SingleSelectDirective };
if (false) {
    /** @type {?} */
    SingleSelectDirective.prototype.items;
    /** @type {?} */
    SingleSelectDirective.prototype.panelRef;
    /** @type {?} */
    SingleSelectDirective.prototype.width;
    /** @type {?} */
    SingleSelectDirective.prototype.position;
    /** @type {?} */
    SingleSelectDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.overlaySer;
    /** @type {?} */
    SingleSelectDirective.prototype.selectEl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.overlayHandler;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.displayTextEl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.ngZone;
    /** @type {?} */
    SingleSelectDirective.prototype.beforeShow;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,