/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { IdService, FarrisCommonModule } from '@farris/ui-common';
import { RadioComponent } from './radio/radio.component';
import { RadioButtonComponent } from './radio/radio-button.component';
import { RadioGroupComponent } from './radio/radio-group.component';
import { FarrisRadioGroupComponent } from './radio/radiogroup.component';
import { CheckboxComponent } from './checkbox/checkbox.component';
import { CheckboxGroupComponent } from './checkbox/checkbox-group.component';
import { FarrisCheckboxGroupComponent } from './checkbox/checkboxgroup.component';
import { TextareaAutoSizeDirective } from './textarea-autosize.directive';
import { TextareaZoomDirective } from './textarea-zoom.directive';
import { InputAppendDirective } from './input-append.directive';
import { MessagerModule } from '@farris/ui-messager';
import { ShortCutTabKeyDirective } from './shortcut-tab.directive';
import { TextareaWordcountDirective } from './textarea-wordcount.directive';
import { LocaleModule } from '@farris/ui-locale';
import { TextareaCommentsDirective } from './textarea-comments.directive';
import { SingleListComponent } from './comments/single-list.component';
import { SingleSelectDirective } from './single-select.directive';
var FarrisFormsModule = /** @class */ (function () {
    function FarrisFormsModule() {
    }
    FarrisFormsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        RadioComponent,
                        RadioGroupComponent,
                        CheckboxComponent,
                        CheckboxGroupComponent,
                        RadioButtonComponent,
                        FarrisRadioGroupComponent,
                        FarrisCheckboxGroupComponent,
                        TextareaAutoSizeDirective,
                        TextareaZoomDirective,
                        ShortCutTabKeyDirective,
                        TextareaWordcountDirective,
                        InputAppendDirective,
                        TextareaCommentsDirective,
                        SingleListComponent,
                        SingleSelectDirective
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MessagerModule.forRoot(),
                        FarrisCommonModule.forRoot(),
                        LocaleModule,
                    ],
                    exports: [
                        RadioComponent,
                        RadioGroupComponent,
                        CheckboxComponent,
                        CheckboxGroupComponent,
                        RadioButtonComponent,
                        FarrisRadioGroupComponent,
                        FarrisCheckboxGroupComponent,
                        TextareaAutoSizeDirective,
                        TextareaZoomDirective,
                        ShortCutTabKeyDirective,
                        TextareaWordcountDirective,
                        InputAppendDirective,
                        TextareaCommentsDirective,
                        SingleSelectDirective
                    ],
                    entryComponents: [
                        SingleListComponent
                    ],
                    providers: [IdService],
                },] }
    ];
    return FarrisFormsModule;
}());
export { FarrisFormsModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybXMubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9mb3Jtcy5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsU0FBUyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFbEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3pELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xFLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNyRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUM1RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDMUUsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDdkUsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEU7SUFBQTtJQThDaUMsQ0FBQzs7Z0JBOUNqQyxRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLGNBQWM7d0JBQ2QsbUJBQW1CO3dCQUNuQixpQkFBaUI7d0JBQ2pCLHNCQUFzQjt3QkFDdEIsb0JBQW9CO3dCQUNwQix5QkFBeUI7d0JBQ3pCLDRCQUE0Qjt3QkFDNUIseUJBQXlCO3dCQUN6QixxQkFBcUI7d0JBQ3JCLHVCQUF1Qjt3QkFDdkIsMEJBQTBCO3dCQUMxQixvQkFBb0I7d0JBQ3BCLHlCQUF5Qjt3QkFDekIsbUJBQW1CO3dCQUNuQixxQkFBcUI7cUJBQ3hCO29CQUNELE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsY0FBYyxDQUFDLE9BQU8sRUFBRTt3QkFDeEIsa0JBQWtCLENBQUMsT0FBTyxFQUFFO3dCQUM1QixZQUFZO3FCQUNmO29CQUNELE9BQU8sRUFBRTt3QkFDTCxjQUFjO3dCQUNkLG1CQUFtQjt3QkFDbkIsaUJBQWlCO3dCQUNqQixzQkFBc0I7d0JBQ3RCLG9CQUFvQjt3QkFDcEIseUJBQXlCO3dCQUN6Qiw0QkFBNEI7d0JBQzVCLHlCQUF5Qjt3QkFDekIscUJBQXFCO3dCQUNyQix1QkFBdUI7d0JBQ3ZCLDBCQUEwQjt3QkFDMUIsb0JBQW9CO3dCQUNwQix5QkFBeUI7d0JBQ3pCLHFCQUFxQjtxQkFDeEI7b0JBQ0QsZUFBZSxFQUFFO3dCQUNiLG1CQUFtQjtxQkFDdEI7b0JBQ0QsU0FBUyxFQUFFLENBQUMsU0FBUyxDQUFDO2lCQUN6Qjs7SUFDZ0Msd0JBQUM7Q0FBQSxBQTlDbEMsSUE4Q2tDO1NBQXJCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIlxyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IElkU2VydmljZSwgRmFycmlzQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgUmFkaW9Db21wb25lbnQgfSBmcm9tICcuL3JhZGlvL3JhZGlvLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFJhZGlvQnV0dG9uQ29tcG9uZW50IH0gZnJvbSAnLi9yYWRpby9yYWRpby1idXR0b24uY29tcG9uZW50JztcclxuaW1wb3J0IHsgUmFkaW9Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vcmFkaW8vcmFkaW8tZ3JvdXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmFycmlzUmFkaW9Hcm91cENvbXBvbmVudCB9IGZyb20gJy4vcmFkaW8vcmFkaW9ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3guY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2hlY2tib3hHcm91cENvbXBvbmVudCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmFycmlzQ2hlY2tib3hHcm91cENvbXBvbmVudCB9IGZyb20gJy4vY2hlY2tib3gvY2hlY2tib3hncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBUZXh0YXJlYUF1dG9TaXplRGlyZWN0aXZlIH0gZnJvbSAnLi90ZXh0YXJlYS1hdXRvc2l6ZS5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUZXh0YXJlYVpvb21EaXJlY3RpdmUgfSBmcm9tICcuL3RleHRhcmVhLXpvb20uZGlyZWN0aXZlJztcclxuaW1wb3J0IHtJbnB1dEFwcGVuZERpcmVjdGl2ZX0gZnJvbSAnLi9pbnB1dC1hcHBlbmQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgU2hvcnRDdXRUYWJLZXlEaXJlY3RpdmUgfSBmcm9tICcuL3Nob3J0Y3V0LXRhYi5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUZXh0YXJlYVdvcmRjb3VudERpcmVjdGl2ZSB9IGZyb20gJy4vdGV4dGFyZWEtd29yZGNvdW50LmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IExvY2FsZU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgVGV4dGFyZWFDb21tZW50c0RpcmVjdGl2ZSB9IGZyb20gJy4vdGV4dGFyZWEtY29tbWVudHMuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgU2luZ2xlTGlzdENvbXBvbmVudCB9IGZyb20gJy4vY29tbWVudHMvc2luZ2xlLWxpc3QuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2luZ2xlU2VsZWN0RGlyZWN0aXZlIH0gZnJvbSAnLi9zaW5nbGUtc2VsZWN0LmRpcmVjdGl2ZSc7XHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBSYWRpb0NvbXBvbmVudCxcclxuICAgICAgICBSYWRpb0dyb3VwQ29tcG9uZW50LFxyXG4gICAgICAgIENoZWNrYm94Q29tcG9uZW50LFxyXG4gICAgICAgIENoZWNrYm94R3JvdXBDb21wb25lbnQsXHJcbiAgICAgICAgUmFkaW9CdXR0b25Db21wb25lbnQsXHJcbiAgICAgICAgRmFycmlzUmFkaW9Hcm91cENvbXBvbmVudCxcclxuICAgICAgICBGYXJyaXNDaGVja2JveEdyb3VwQ29tcG9uZW50LFxyXG4gICAgICAgIFRleHRhcmVhQXV0b1NpemVEaXJlY3RpdmUsXHJcbiAgICAgICAgVGV4dGFyZWFab29tRGlyZWN0aXZlLFxyXG4gICAgICAgIFNob3J0Q3V0VGFiS2V5RGlyZWN0aXZlLFxyXG4gICAgICAgIFRleHRhcmVhV29yZGNvdW50RGlyZWN0aXZlLFxyXG4gICAgICAgIElucHV0QXBwZW5kRGlyZWN0aXZlLFxyXG4gICAgICAgIFRleHRhcmVhQ29tbWVudHNEaXJlY3RpdmUsXHJcbiAgICAgICAgU2luZ2xlTGlzdENvbXBvbmVudCxcclxuICAgICAgICBTaW5nbGVTZWxlY3REaXJlY3RpdmVcclxuICAgIF0sXHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgICAgIE1lc3NhZ2VyTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZSxcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgUmFkaW9Db21wb25lbnQsXHJcbiAgICAgICAgUmFkaW9Hcm91cENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveENvbXBvbmVudCxcclxuICAgICAgICBDaGVja2JveEdyb3VwQ29tcG9uZW50LFxyXG4gICAgICAgIFJhZGlvQnV0dG9uQ29tcG9uZW50LFxyXG4gICAgICAgIEZhcnJpc1JhZGlvR3JvdXBDb21wb25lbnQsXHJcbiAgICAgICAgRmFycmlzQ2hlY2tib3hHcm91cENvbXBvbmVudCxcclxuICAgICAgICBUZXh0YXJlYUF1dG9TaXplRGlyZWN0aXZlLFxyXG4gICAgICAgIFRleHRhcmVhWm9vbURpcmVjdGl2ZSxcclxuICAgICAgICBTaG9ydEN1dFRhYktleURpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYVdvcmRjb3VudERpcmVjdGl2ZSxcclxuICAgICAgICBJbnB1dEFwcGVuZERpcmVjdGl2ZSxcclxuICAgICAgICBUZXh0YXJlYUNvbW1lbnRzRGlyZWN0aXZlLFxyXG4gICAgICAgIFNpbmdsZVNlbGVjdERpcmVjdGl2ZVxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIFNpbmdsZUxpc3RDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBwcm92aWRlcnM6IFtJZFNlcnZpY2VdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmFycmlzRm9ybXNNb2R1bGUgeyB9XHJcbiJdfQ==