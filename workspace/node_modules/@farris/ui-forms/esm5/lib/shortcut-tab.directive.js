/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventManager } from '@angular/platform-browser';
import { Directive, ElementRef, Injector } from '@angular/core';
var ShortCutTabKeyDirective = /** @class */ (function () {
    function ShortCutTabKeyDirective(el, injector, eventManager) {
        this.el = el;
        this.injector = injector;
        this.eventManager = eventManager;
    }
    /**
     * @return {?}
     */
    ShortCutTabKeyDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ShortCutTabKeyDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.eventManager.addEventListener(this.el.nativeElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            if (e.key === 'Tab') {
                _this.onTabKeydownHandler(e.target);
            }
        }));
    };
    /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    ShortCutTabKeyDirective.prototype.onTabKeydownHandler = /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    function (currentTarget) {
        /** @type {?} */
        var allInputs = this.el.nativeElement.querySelectorAll('input,textarea');
        allInputs = Array.from(allInputs);
        /** @type {?} */
        var currentInputIndex = allInputs.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n === currentTarget; }));
        /** @type {?} */
        var nextInputIndex = currentInputIndex + 1;
        if (nextInputIndex >= allInputs.length) {
            nextInputIndex = 0;
        }
        /** @type {?} */
        var nextInputTarget = allInputs[nextInputIndex];
        if (nextInputTarget) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                nextInputTarget.focus();
            }));
        }
    };
    ShortCutTabKeyDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'shortcut-tab',
                },] }
    ];
    /** @nocollapse */
    ShortCutTabKeyDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: EventManager }
    ]; };
    return ShortCutTabKeyDirective;
}());
export { ShortCutTabKeyDirective };
if (false) {
    /** @type {?} */
    ShortCutTabKeyDirective.prototype.el;
    /** @type {?} */
    ShortCutTabKeyDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ShortCutTabKeyDirective.prototype.eventManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRjdXQtdGFiLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZm9ybXMvIiwic291cmNlcyI6WyJsaWIvc2hvcnRjdXQtdGFiLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBeUIsTUFBTSxlQUFlLENBQUM7QUFFdkY7SUFLSSxpQ0FBbUIsRUFBYyxFQUFTLFFBQWtCLEVBQVUsWUFBMEI7UUFBN0UsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBYztJQUFHLENBQUM7Ozs7SUFFcEcsMENBQVE7OztJQUFSO0lBQ0EsQ0FBQzs7OztJQUVELGlEQUFlOzs7SUFBZjtRQUFBLGlCQU9DO1FBTkcsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxTQUFTOzs7O1FBQUcsVUFBQyxDQUFnQjtZQUNuRixDQUFDLENBQUMsZUFBZSxFQUFFLENBQUM7WUFDcEIsSUFBSSxDQUFDLENBQUMsR0FBRyxLQUFLLEtBQUssRUFBRTtnQkFDakIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQzthQUN0QztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Ozs7O0lBRU8scURBQW1COzs7OztJQUEzQixVQUE0QixhQUFhOztZQUNqQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDeEUsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O1lBQzVCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxTQUFTOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEtBQUssYUFBYSxFQUFuQixDQUFtQixFQUFDOztZQUNuRSxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsQ0FBQztRQUMxQyxJQUFJLGNBQWMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3BDLGNBQWMsR0FBRyxDQUFDLENBQUM7U0FDdEI7O1lBQ0ssZUFBZSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFDakQsSUFBSSxlQUFlLEVBQUU7WUFDakIsVUFBVTs7O1lBQUM7Z0JBQ1AsZUFBZSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBQzVCLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOztnQkFqQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxjQUFjO2lCQUMzQjs7OztnQkFKbUIsVUFBVTtnQkFBRSxRQUFRO2dCQUQvQixZQUFZOztJQXFDckIsOEJBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQS9CWSx1QkFBdUI7OztJQUVwQixxQ0FBcUI7O0lBQUUsMkNBQXlCOzs7OztJQUFFLCtDQUFrQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50TWFuYWdlciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBPbkluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdzaG9ydGN1dC10YWInLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2hvcnRDdXRUYWJLZXlEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBlbDogRWxlbWVudFJlZiwgcHVibGljIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcikge31cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudE1hbmFnZXIuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICdrZXlkb3duJywgIChlOiBLZXlib2FyZEV2ZW50KSA9PiB7XHJcbiAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ1RhYicpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25UYWJLZXlkb3duSGFuZGxlcihlLnRhcmdldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uVGFiS2V5ZG93bkhhbmRsZXIoY3VycmVudFRhcmdldCkge1xyXG4gICAgICAgIGxldCBhbGxJbnB1dHMgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQsdGV4dGFyZWEnKTtcclxuICAgICAgICBhbGxJbnB1dHMgPSBBcnJheS5mcm9tKGFsbElucHV0cyk7XHJcbiAgICAgICAgY29uc3QgY3VycmVudElucHV0SW5kZXggPSBhbGxJbnB1dHMuZmluZEluZGV4KG4gPT4gbiA9PT0gY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgbGV0IG5leHRJbnB1dEluZGV4ID0gY3VycmVudElucHV0SW5kZXggKyAxO1xyXG4gICAgICAgIGlmIChuZXh0SW5wdXRJbmRleCA+PSBhbGxJbnB1dHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIG5leHRJbnB1dEluZGV4ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbmV4dElucHV0VGFyZ2V0ID0gYWxsSW5wdXRzW25leHRJbnB1dEluZGV4XTtcclxuICAgICAgICBpZiAobmV4dElucHV0VGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV4dElucHV0VGFyZ2V0LmZvY3VzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=