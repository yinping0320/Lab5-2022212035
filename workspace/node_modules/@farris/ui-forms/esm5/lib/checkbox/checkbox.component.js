/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, forwardRef, Output, EventEmitter } from '@angular/core';
import { CheckboxGroupComponent } from './checkbox-group.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
var CheckboxComponent = /** @class */ (function () {
    function CheckboxComponent(checkbox, el) {
        this.checkbox = checkbox;
        this.el = el;
        this.modelChange = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        function () { });
        this.controlTouch = (/**
         * @return {?}
         */
        function () { });
    }
    Object.defineProperty(CheckboxComponent.prototype, "name", {
        /* radio 原生name 用于多个radio单选使用 */
        get: /* radio 原生name 用于多个radio单选使用 */
        /**
         * @return {?}
         */
        function () {
            if (this.hasParent(this.el.nativeElement)) {
                return this.checkbox.name;
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CheckboxComponent.prototype, "model", {
        /* model */
        get: /* model */
        /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.hasParent(this.el.nativeElement)) {
                return this.checkbox.model.find((/**
                 * @param {?} ele
                 * @return {?}
                 */
                function (ele) {
                    return ele === _this.label;
                }));
            }
            return this.nyModel;
        },
        set: /**
         * @param {?} model
         * @return {?}
         */
        function (model) {
            this.nyModel = model;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /* 值传递 */
    /* 值传递 */
    /**
     * @return {?}
     */
    CheckboxComponent.prototype.changeModelHandler = /* 值传递 */
    /**
     * @return {?}
     */
    function () {
        // 父元素获取label  子元素再从父元素获取model
        if (this.hasParent(this.el.nativeElement)) {
            return this.checkbox.changeModel(this.label);
        }
        this.model = this.label;
        this.modelChange.emit(this.model);
        this.controlChange(this.label);
    };
    /* 是否存在父元素  存在即单选组*/
    /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    CheckboxComponent.prototype.hasParent = /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        return element.parentElement.classList.contains('farris-input-wrap');
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CheckboxComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.model = value;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    CheckboxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.controlTouch = fn;
    };
    CheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-checkbox',
                    template: "<label class=\"custom-control custom-checkbox\">\r\n  <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\" [ngModel]=\"model\"\r\n    (ngModelChange)=\"changeModelHandler()\" type=\"checkbox\" [disabled]=\"disabled\">\r\n  <span class=\"custom-control-label\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </span>\r\n</label>",
                    providers: [{
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef((/**
                             * @return {?}
                             */
                            function () { return CheckboxComponent; })),
                            multi: true,
                        }],
                    styles: ['./checkbox.component.css']
                }] }
    ];
    /** @nocollapse */
    CheckboxComponent.ctorParameters = function () { return [
        { type: CheckboxGroupComponent },
        { type: ElementRef }
    ]; };
    CheckboxComponent.propDecorators = {
        model: [{ type: Input }],
        label: [{ type: Input }],
        disabled: [{ type: Input }],
        modelChange: [{ type: Output }]
    };
    return CheckboxComponent;
}());
export { CheckboxComponent };
if (false) {
    /** @type {?} */
    CheckboxComponent.prototype.label;
    /** @type {?} */
    CheckboxComponent.prototype.disabled;
    /** @type {?} */
    CheckboxComponent.prototype.modelChange;
    /** @type {?} */
    CheckboxComponent.prototype.nyModel;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.checkbox;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFDekU7SUE4Q0UsMkJBQ1UsUUFBZ0MsRUFDaEMsRUFBYztRQURkLGFBQVEsR0FBUixRQUFRLENBQXdCO1FBQ2hDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFKeEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBcUM5QixrQkFBYTs7O1FBQWEsY0FBUSxDQUFDLEVBQUE7UUFDbkMsaUJBQVk7OztRQUFhLGNBQVEsQ0FBQyxFQUFBO0lBbENkLENBQUM7SUFuQzVCLHNCQUFJLG1DQUFJO1FBRFIsZ0NBQWdDOzs7OztRQUNoQztZQUNDLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUN6QyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDO2FBQzNCO1lBQ0QsT0FBTyxFQUFFLENBQUM7UUFDWixDQUFDOzs7T0FBQTtJQUdELHNCQUNJLG9DQUFLO1FBRlQsV0FBVzs7Ozs7UUFDWDtZQUFBLGlCQVFDO1lBTkMsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUU7Z0JBQ3pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztnQkFBQyxVQUFBLEdBQUc7b0JBQ2pDLE9BQU8sR0FBRyxLQUFLLEtBQUksQ0FBQyxLQUFLLENBQUM7Z0JBQzVCLENBQUMsRUFBQyxDQUFDO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7Ozs7UUFFRCxVQUFVLEtBQVU7WUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDdkIsQ0FBQzs7O09BSkE7Ozs7SUFxQkQsb0NBQVE7OztJQUFSO0lBQ0EsQ0FBQztJQUVELFNBQVM7Ozs7O0lBQ1QsOENBQWtCOzs7O0lBQWxCO1FBQ0UsOEJBQThCO1FBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBR0Qsb0JBQW9COzs7Ozs7SUFDcEIscUNBQVM7Ozs7O0lBQVQsVUFBVSxPQUFZO1FBQ3BCLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDdkUsQ0FBQzs7Ozs7SUFFRCxzQ0FBVTs7OztJQUFWLFVBQVcsS0FBVTtRQUNuQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDOzs7OztJQUVELDRDQUFnQjs7OztJQUFoQixVQUFpQixFQUFPO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsNkNBQWlCOzs7O0lBQWpCLFVBQWtCLEVBQU87UUFDdkIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7SUFDekIsQ0FBQzs7Z0JBaEZGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQixxV0FBd0M7b0JBQ3hDLFNBQVMsRUFBRSxDQUFDOzRCQUNWLE9BQU8sRUFBRSxpQkFBaUI7NEJBQzFCLFdBQVcsRUFBRSxVQUFVOzs7NEJBQUMsY0FBTSxPQUFBLGlCQUFpQixFQUFqQixDQUFpQixFQUFDOzRCQUNoRCxLQUFLLEVBQUUsSUFBSTt5QkFDWixDQUFDOzZCQUNPLDBCQUEwQjtpQkFDcEM7Ozs7Z0JBWFEsc0JBQXNCO2dCQURJLFVBQVU7Ozt3QkF3QjFDLEtBQUs7d0JBZUwsS0FBSzsyQkFJTCxLQUFLOzhCQUdMLE1BQU07O0lBeUNULHdCQUFDO0NBQUEsQUFwRkQsSUFvRkM7U0ExRVksaUJBQWlCOzs7SUEwQjVCLGtDQUNXOztJQUdYLHFDQUNrQjs7SUFFbEIsd0NBQ3NDOztJQUN0QyxvQ0FBYTs7Ozs7SUFvQ2IsMENBQTJDOzs7OztJQUMzQyx5Q0FBMEM7Ozs7O0lBbkN4QyxxQ0FBd0M7Ozs7O0lBQ3hDLCtCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgRWxlbWVudFJlZiwgZm9yd2FyZFJlZiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ2hlY2tib3hHcm91cENvbXBvbmVudCB9IGZyb20gJy4vY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTkdfVkFMVUVfQUNDRVNTT1IsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2ZhcnJpcy1jaGVja2JveCcsXHJcbiAgdGVtcGxhdGVVcmw6ICcuL2NoZWNrYm94LmNvbXBvbmVudC5odG1sJyxcclxuICBwcm92aWRlcnM6IFt7XHJcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgIHVzZUV4aXN0aW5nOiBmb3J3YXJkUmVmKCgpID0+IENoZWNrYm94Q29tcG9uZW50KSxcclxuICAgIG11bHRpOiB0cnVlLFxyXG4gIH1dLFxyXG4gIHN0eWxlczogWycuL2NoZWNrYm94LmNvbXBvbmVudC5jc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2hlY2tib3hDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgIC8qIHJhZGlvIOWOn+eUn25hbWUg55So5LqO5aSa5LiqcmFkaW/ljZXpgInkvb/nlKggKi9cclxuICAgZ2V0IG5hbWUoKSB7XHJcbiAgICBpZiAodGhpcy5oYXNQYXJlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50KSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jaGVja2JveC5uYW1lO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICcnO1xyXG4gIH1cclxuXHJcbiAgLyogbW9kZWwgKi9cclxuICBASW5wdXQoKVxyXG4gIGdldCBtb2RlbCgpIHtcclxuICAgIGlmICh0aGlzLmhhc1BhcmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrYm94Lm1vZGVsLmZpbmQoZWxlID0+IHtcclxuICAgICAgICByZXR1cm4gZWxlID09PSB0aGlzLmxhYmVsO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzLm55TW9kZWw7XHJcbiAgfVxyXG5cclxuICBzZXQgbW9kZWwobW9kZWw6IGFueSkge1xyXG4gICAgdGhpcy5ueU1vZGVsID0gbW9kZWw7XHJcbiAgfVxyXG5cclxuICAvKiBjaGVja2JveOWAvCAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgbGFiZWw6IGFueTtcclxuXHJcbiAgLyog56aB55SoICovXHJcbiAgQElucHV0KClcclxuICBkaXNhYmxlZDogYm9vbGVhbjtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgbW9kZWxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICBueU1vZGVsOiBhbnk7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGNoZWNrYm94OiBDaGVja2JveEdyb3VwQ29tcG9uZW50LFxyXG4gICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gIH1cclxuXHJcbiAgLyog5YC85Lyg6YCSICovXHJcbiAgY2hhbmdlTW9kZWxIYW5kbGVyKCkge1xyXG4gICAgLy8g54i25YWD57Sg6I635Y+WbGFiZWwgIOWtkOWFg+e0oOWGjeS7jueItuWFg+e0oOiOt+WPlm1vZGVsXHJcbiAgICBpZiAodGhpcy5oYXNQYXJlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50KSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5jaGVja2JveC5jaGFuZ2VNb2RlbCh0aGlzLmxhYmVsKTtcclxuICAgIH1cclxuICAgIHRoaXMubW9kZWwgPSB0aGlzLmxhYmVsO1xyXG4gICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xyXG4gICAgdGhpcy5jb250cm9sQ2hhbmdlKHRoaXMubGFiZWwpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qIOaYr+WQpuWtmOWcqOeItuWFg+e0oCAg5a2Y5Zyo5Y2z5Y2V6YCJ57uEKi9cclxuICBoYXNQYXJlbnQoZWxlbWVudDogYW55KSB7XHJcbiAgICByZXR1cm4gZWxlbWVudC5wYXJlbnRFbGVtZW50LmNsYXNzTGlzdC5jb250YWlucygnZmFycmlzLWlucHV0LXdyYXAnKTtcclxuICB9XHJcblxyXG4gIHdyaXRlVmFsdWUodmFsdWU6IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbnRyb2xDaGFuZ2UgPSBmbjtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuY29udHJvbFRvdWNoID0gZm47XHJcbiAgfVxyXG4gIHByaXZhdGUgY29udHJvbENoYW5nZTogRnVuY3Rpb24gPSAoKSA9PiB7IH1cclxuICBwcml2YXRlIGNvbnRyb2xUb3VjaDogRnVuY3Rpb24gPSAoKSA9PiB7IH1cclxuXHJcbn1cclxuIl19