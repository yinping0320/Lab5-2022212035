/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, ElementRef, Injector, Input, Renderer2 } from "@angular/core";
import { NgControl } from "@angular/forms";
import { CommonUtils, OverLayHiddenService } from "@farris/ui-common";
import { LocaleService } from "@farris/ui-locale";
import { CommentsHttpToken } from "./comments/get-data.interface";
import { SingleListComponent } from "./comments/single-list.component";
var TextareaCommentsDirective = /** @class */ (function () {
    function TextareaCommentsDirective(injector, el, render, localeSer, cfr) {
        this.injector = injector;
        this.el = el;
        this.render = render;
        this.localeSer = localeSer;
        this.cfr = cfr;
        this.useComments = true;
        this.maxHeight = 300;
        this.title = '';
        this.mgrText = '';
        this.commentsBtnElement = null;
        this.singListRef = null;
        this.listPanelElRef = null;
        this.commentSer = this.injector.get(CommentsHttpToken, null);
        this.overlaySer = this.injector.get(OverLayHiddenService, null);
        this.commonUtil = this.injector.get(CommonUtils, null);
        if (!this.overlaySer) {
            this.overlaySer = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.init();
        this.listenAttributesChanged();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TextareaCommentsDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.useComments && !changes.useComments.isFirstChange()) {
            this.init();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaCommentsDirective.prototype.init = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var readonly = this.el.nativeElement.readOnly;
        /** @type {?} */
        var disabled = this.el.nativeElement.disabled;
        if (this.useComments && (!readonly && !disabled)) {
            this.createCommentsButton();
        }
        else {
            this.destroy();
        }
    };
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy();
        this.hideListPanel();
        // 停止观察属性变化
        this.observer.disconnect();
        this.observer = null;
    };
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.listenAttributesChanged = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 选择需要观察变动的节点
        /** @type {?} */
        var targetNode = this.el.nativeElement;
        // 观察器的配置（需要观察什么变动）
        /** @type {?} */
        var config = { attributes: true };
        // 当观察到变动时执行的回调函数
        /** @type {?} */
        var callback = (/**
         * @param {?} mutationsList
         * @param {?} observer
         * @return {?}
         */
        function (mutationsList, observer) {
            var e_1, _a;
            try {
                // Use traditional 'for loops' for IE 11
                for (var mutationsList_1 = tslib_1.__values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                    var mutation = mutationsList_1_1.value;
                    if (mutation.type === 'attributes' && (mutation.attributeName === 'readonly' || mutation.attributeName === 'disabled')) {
                        _this.init();
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return)) _a.call(mutationsList_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
        // 创建一个观察器实例并传入回调函数
        this.observer = new MutationObserver(callback);
        // 以上述配置开始观察目标节点
        this.observer.observe(targetNode, config);
    };
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.destroy = /**
     * @return {?}
     */
    function () {
        if (this.commentsBtnElement) {
            this.commentsBtnElement.remove();
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaCommentsDirective.prototype.createID = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            var ctrlName = this.ngControl.name;
            return tagName + "_COMMENTS_" + ctrlName;
        }
        else {
            if (this.el.nativeElement.id) {
                return tagName + "_COMMENTS_" + this.el.nativeElement.id;
            }
        }
        return '';
    };
    /**
     * @private
     * @return {?}
     */
    TextareaCommentsDirective.prototype.createCommentsButton = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var commentsBtn = this.render.createElement('span');
        commentsBtn.className = 'dropdown-toggle';
        commentsBtn.title = this.title ? this.title : (this.localeSer.getValue('text.comments.title') || '常用意见');
        /** @type {?} */
        var id = this.createID();
        if (id) {
            commentsBtn.id = id;
        }
        this.render.setStyle(commentsBtn, 'position', 'absolute');
        this.render.setStyle(commentsBtn, 'left', '3px');
        this.render.setStyle(commentsBtn, 'bottom', '0px');
        this.render.setStyle(commentsBtn, 'cursor', 'pointer');
        /** @type {?} */
        var icon = this.render.createElement('span');
        this.render.appendChild(commentsBtn, icon);
        icon.className = 'f-icon f-icon-message';
        this.render.setStyle(icon, 'position', 'relative');
        // this.render.setStyle(icon, 'margin-right', '3px');
        this.render.setStyle(icon, 'top', '1px');
        this.render.setStyle(icon, 'font-size', '13px');
        this.el.nativeElement.after(commentsBtn);
        this.commentsBtnElement = commentsBtn;
        this.render.listen(commentsBtn, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            if (!_this.listPanelElRef) {
                _this.showListPanel();
            }
            else {
                _this.hideListPanel();
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    TextareaCommentsDirective.prototype.showListPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var listPanelEl = this.render.createElement('div');
        /** @type {?} */
        var zindex = this.commonUtil.getFloatingLayerIndex();
        var _a = this.commentsBtnElement.getBoundingClientRect(), left = _a.left, bottom = _a.bottom;
        this.render.setStyle(listPanelEl, 'width', '200px');
        this.render.setStyle(listPanelEl, 'max-height', this.maxHeight + "px");
        this.render.setStyle(listPanelEl, 'position', 'absolute');
        this.render.setStyle(listPanelEl, 'left', left + "px");
        this.render.setStyle(listPanelEl, 'top', '0px');
        this.render.setStyle(listPanelEl, 'z-index', zindex);
        this.render.setStyle(listPanelEl, 'box-shadow', '0 2px 8px 0 #dedede');
        this.render.setStyle(listPanelEl, 'border-radius', '6px');
        this.render.setStyle(listPanelEl, 'background', 'white');
        this.render.setStyle(listPanelEl, 'visibility', 'hidden');
        document.body.append(listPanelEl);
        this.listPanelElRef = listPanelEl;
        /** @type {?} */
        var singListCmf = this.cfr.resolveComponentFactory(SingleListComponent);
        this.singListRef = singListCmf.create(this.injector);
        this.singListRef.instance.showButtons = true;
        this.singListRef.instance.emptyDataMsg = this.localeSer.getValue('text.comments.empty');
        this.singListRef.instance.buttons = [
            {
                text: this.mgrText ? this.mgrText : this.localeSer.getValue('text.comments.manager'),
                iconCls: 'f-icon f-icon-home-setup', handler: (/**
                 * @return {?}
                 */
                function () {
                    if (_this.commentSer) {
                        _this.hideListPanel();
                        _this.commentSer.showCommentManageDialog({ type: 'forms' }).subscribe((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log(e);
                        }));
                    }
                })
            }
        ];
        this.singListRef.instance.textField = 'message';
        this.singListRef.instance.maxItems = 999999;
        this.singListRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var val = e.data['message'];
            /** @type {?} */
            var _text = _this.el.nativeElement.value || '';
            _text += val;
            if (_this.ngControl) {
                _this.ngControl.control.patchValue(_text);
            }
            else {
                _this.el.nativeElement.value = _text;
            }
            _this.hideListPanel();
        }));
        listPanelEl.appendChild(this.singListRef.location.nativeElement);
        this.singListRef.changeDetectorRef.detectChanges();
        this.loadData(this.singListRef);
        this.overlaySer.registerMouseEvent(listPanelEl, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.listPanelElRef.contains(e.target) || _this.commentsBtnElement === e.target || _this.commentsBtnElement.contains(e.target)) {
                return;
            }
            _this.hideListPanel();
        }));
    };
    /**
     * @return {?}
     */
    TextareaCommentsDirective.prototype.hideListPanel = /**
     * @return {?}
     */
    function () {
        if (this.singListRef) {
            this.singListRef.destroy();
            this.singListRef = null;
        }
        if (this.listPanelElRef) {
            this.listPanelElRef.remove();
            this.overlaySer.destory(this.listPanelElRef);
            this.listPanelElRef = null;
        }
    };
    /**
     * @private
     * @param {?} singListRef
     * @return {?}
     */
    TextareaCommentsDirective.prototype.loadData = /**
     * @private
     * @param {?} singListRef
     * @return {?}
     */
    function (singListRef) {
        var _this = this;
        if (this.commentSer) {
            this.commentSer.getCommonComments({ type: 'forms' }).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                singListRef.instance.loadData(data);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.resetPosition();
                }));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    TextareaCommentsDirective.prototype.resetPosition = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.commentsBtnElement.getBoundingClientRect(), top = _a.top, bottom = _a.bottom, left = _a.left;
        /** @type {?} */
        var panelHeight = this.listPanelElRef.offsetHeight;
        if (window.innerHeight - bottom > this.maxHeight || window.innerHeight - bottom > panelHeight) {
            this.render.setStyle(this.listPanelElRef, 'top', bottom + "px");
            this.render.removeStyle(this.listPanelElRef, 'visibility');
            return;
        }
        else {
            if (top > this.maxHeight || top > panelHeight) {
                this.render.setStyle(this.listPanelElRef, 'top', top - panelHeight + "px");
            }
            else {
                this.render.setStyle(this.listPanelElRef, 'top', '0px');
                if (left > 200) {
                    this.render.setStyle(this.listPanelElRef, 'left', left - 200 + "px");
                }
            }
            this.render.removeStyle(this.listPanelElRef, 'visibility');
        }
    };
    TextareaCommentsDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[common-comments]',
                },] }
    ];
    /** @nocollapse */
    TextareaCommentsDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 },
        { type: LocaleService },
        { type: ComponentFactoryResolver }
    ]; };
    TextareaCommentsDirective.propDecorators = {
        useComments: [{ type: Input, args: ['common-comments',] }],
        maxHeight: [{ type: Input }],
        title: [{ type: Input }],
        mgrText: [{ type: Input }]
    };
    return TextareaCommentsDirective;
}());
export { TextareaCommentsDirective };
if (false) {
    /** @type {?} */
    TextareaCommentsDirective.prototype.useComments;
    /** @type {?} */
    TextareaCommentsDirective.prototype.maxHeight;
    /** @type {?} */
    TextareaCommentsDirective.prototype.title;
    /** @type {?} */
    TextareaCommentsDirective.prototype.mgrText;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.commentSer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.ngControl;
    /** @type {?} */
    TextareaCommentsDirective.prototype.commentsBtnElement;
    /** @type {?} */
    TextareaCommentsDirective.prototype.singListRef;
    /** @type {?} */
    TextareaCommentsDirective.prototype.listPanelElRef;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.commonUtil;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,