import { CommonModule } from '@angular/common';
import { Component, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 在表单dom中展示错误信息
 * 需要将formControl中的errors对象传入
 *
 * eg: 在姓名输入框下方展示验证信息
 *  将viewModel.form.name.errors对象传入
 *  <label class="k-form-field">
 * <span>姓名</span>
 * <input class="k-textbox" formControlName="name" />
 * <validationMessage [errors]="viewModel.form.name.errors"></validationMessage>
 * </label>
 */
var ValidationMessageComponent = /** @class */ (function () {
    function ValidationMessageComponent(ele) {
        this.ele = ele;
        // 默认显示错误消息
        this.showErrorMessage = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ValidationMessageComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.errorMessage = this.getErrorMessage(this.errors);
        this.ele.nativeElement.style.display = !this.errorMessage ? 'none' : 'block';
    };
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    ValidationMessageComponent.prototype.getErrorMessage = /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    function (errors) {
        if (!errors) {
            return null;
        }
        else {
            /** @type {?} */
            var errorMessage_1 = '';
            Object.keys(errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                if (errors[key].name) {
                    errorMessage_1 = errorMessage_1 + ' ' + errors[key].name;
                }
            }));
            return errorMessage_1;
        }
    };
    ValidationMessageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'validationMessage',
                    template: "\n      <div class=\"farris-feedback f-state-invalid\">\n          <span class=\"f-icon f-icon-message_warning f-feedback-icon\" (click)=\"showErrorMessage=true\" *ngIf=\"!showErrorMessage\"></span>\n          <span class=\"f-feedback-message\" *ngIf=\"showErrorMessage\" (click)=\"showErrorMessage=false\">{{this.errorMessage}}</span>\n      </div>\n    "
                }] }
    ];
    /** @nocollapse */
    ValidationMessageComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ValidationMessageComponent.propDecorators = {
        errors: [{ type: Input }],
        type: [{ type: Input }]
    };
    return ValidationMessageComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormMessageModule = /** @class */ (function () {
    function FormMessageModule() {
    }
    FormMessageModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        ValidationMessageComponent
                    ],
                    exports: [
                        ValidationMessageComponent
                    ]
                },] }
    ];
    return FormMessageModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormMessageModule, ValidationMessageComponent };

//# sourceMappingURL=farris-ui-forms-validation-message.js.map