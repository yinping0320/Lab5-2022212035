import { CommonModule } from '@angular/common';
import { Component, ElementRef, Input, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 在表单dom中展示错误信息
 * 需要将formControl中的errors对象传入
 *
 * eg: 在姓名输入框下方展示验证信息
 *  将viewModel.form.name.errors对象传入
 *  <label class="k-form-field">
 * <span>姓名</span>
 * <input class="k-textbox" formControlName="name" />
 * <validationMessage [errors]="viewModel.form.name.errors"></validationMessage>
 * </label>
 */
class ValidationMessageComponent {
    /**
     * @param {?} ele
     */
    constructor(ele) {
        this.ele = ele;
        // 默认显示错误消息
        this.showErrorMessage = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.errorMessage = this.getErrorMessage(this.errors);
        this.ele.nativeElement.style.display = !this.errorMessage ? 'none' : 'block';
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    getErrorMessage(errors) {
        if (!errors) {
            return null;
        }
        else {
            /** @type {?} */
            let errorMessage = '';
            Object.keys(errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                if (errors[key].name) {
                    errorMessage = errorMessage + ' ' + errors[key].name;
                }
            }));
            return errorMessage;
        }
    }
}
ValidationMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'validationMessage',
                template: `
      <div class="farris-feedback f-state-invalid">
          <span class="f-icon f-icon-message_warning f-feedback-icon" (click)="showErrorMessage=true" *ngIf="!showErrorMessage"></span>
          <span class="f-feedback-message" *ngIf="showErrorMessage" (click)="showErrorMessage=false">{{this.errorMessage}}</span>
      </div>
    `
            }] }
];
/** @nocollapse */
ValidationMessageComponent.ctorParameters = () => [
    { type: ElementRef }
];
ValidationMessageComponent.propDecorators = {
    errors: [{ type: Input }],
    type: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormMessageModule {
}
FormMessageModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule
                ],
                declarations: [
                    ValidationMessageComponent
                ],
                exports: [
                    ValidationMessageComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FormMessageModule, ValidationMessageComponent };

//# sourceMappingURL=farris-ui-forms-validation-message.js.map