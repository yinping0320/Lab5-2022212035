(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('resize-observer-polyfill'), require('@farris/ui-messager'), require('@angular/platform-browser'), require('@farris/ui-locale'), require('@angular/core'), require('@angular/forms'), require('@farris/ui-common'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-forms', ['exports', '@angular/common', 'resize-observer-polyfill', '@farris/ui-messager', '@angular/platform-browser', '@farris/ui-locale', '@angular/core', '@angular/forms', '@farris/ui-common', 'rxjs', 'rxjs/operators'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-forms'] = {}),global.ng.common,global.ResizeObserver,global.uiMessager,global.ng.platformBrowser,global.uiLocale,global.ng.core,global.ng.forms,global.uiCommon,global.rxjs,global.rxjs.operators));
}(this, (function (exports,common,ResizeObserver,uiMessager,platformBrowser,uiLocale,core,forms,uiCommon,rxjs,operators) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioGroupComponent = /** @class */ (function () {
        function RadioGroupComponent(idSer) {
            this.idSer = idSer;
            this.modelChange = new core.EventEmitter();
            // tslint:disable-next-line:ban-types
            this.subscriber = [];
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
        }
        /**
         * @return {?}
         */
        RadioGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.name = this.idSer.generate().replace(/-/g, '_');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.changeModel = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
                this.modelChange.emit(this.model);
                this.controlChange(value);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
                this.changeModel(this.model);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        RadioGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-radio-group',
                        template: "\n    <div class=\"farris-radio-group btn-group\"\n    [class.farris-input-wrap]=\"type!=='button'\"\n    [class.btn-group-toggle]=\"type==='button'\"\n    [class.farris-checkradio-hor]=\"horizontal\">\n      <ng-content></ng-content>\n    </div>\n  ",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return RadioGroupComponent; })),
                                multi: true,
                            }],
                        styles: ["\n    "]
                    }] }
        ];
        /** @nocollapse */
        RadioGroupComponent.ctorParameters = function () {
            return [
                { type: uiCommon.IdService }
            ];
        };
        RadioGroupComponent.propDecorators = {
            type: [{ type: core.Input }],
            model: [{ type: core.Input }],
            name: [{ type: core.Input }],
            horizontal: [{ type: core.Input }],
            modelChange: [{ type: core.Output }]
        };
        return RadioGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioComponent = /** @class */ (function () {
        function RadioComponent(radioGroup, el) {
            this.radioGroup = radioGroup;
            this.el = el;
            /* radio 值 */
            this.label = '';
            this.name = '';
            this.modelChange = new core.EventEmitter();
            this.blockClass = true;
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
        }
        Object.defineProperty(RadioComponent.prototype, "model", {
            /* radio 原生name 用于多个radio单选使用 */
            // get name() {
            //   if (this.hasParent(this.el.nativeElement)) {
            //     return this.radioGroup.name;
            //   }
            // }
            /* radio 值 */
            get: /* radio 原生name 用于多个radio单选使用 */ 
            // get name() {
            //   if (this.hasParent(this.el.nativeElement)) {
            //     return this.radioGroup.name;
            //   }
            // }
            /* radio 值 */
            /**
             * @return {?}
             */
            function () {
                if (this.hasParent(this.el.nativeElement)) {
                    return this.radioGroup.model;
                }
                return this.nyModel;
            },
            set: /**
             * @param {?} model
             * @return {?}
             */ function (model) {
                this.nyModel = model;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RadioComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.name = this.radioGroup.name;
            };
        /**
         * @return {?}
         */
        RadioComponent.prototype.changeModelHandler = /**
         * @return {?}
         */
            function () {
                // 父元素获取label  子元素再从父元素获取model
                if (this.hasParent(this.el.nativeElement)) {
                    return this.radioGroup.changeModel(this.label);
                }
                this.model = this.label;
                this.modelChange.emit(this.model);
                this.controlChange(this.label);
            };
        /* 是否存在父元素  存在即单选组*/
        /* 是否存在父元素  存在即单选组*/
        /**
         * @param {?} element
         * @return {?}
         */
        RadioComponent.prototype.hasParent = /* 是否存在父元素  存在即单选组*/
            /**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                return element.parentElement.classList.contains('farris-radio-group');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        RadioComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-radio',
                        template: "<label class=\"custom-control custom-radio\">\r\n    <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\" \r\n    [ngModel]=\"model\" (ngModelChange)=\"changeModelHandler()\" type=\"radio\" [disabled]=\"disabled\">\r\n    <span class=\"custom-control-label\">\r\n      <ng-content>\r\n      </ng-content>\r\n    </span>\r\n</label>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return RadioComponent; })),
                                multi: true,
                            }]
                        // changeDetection: ChangeDetectionStrategy.OnPush,
                        ,
                        styles: [".btn-group .btn{margin-left:-1px}"]
                    }] }
        ];
        /** @nocollapse */
        RadioComponent.ctorParameters = function () {
            return [
                { type: RadioGroupComponent, decorators: [{ type: core.Optional }] },
                { type: core.ElementRef }
            ];
        };
        RadioComponent.propDecorators = {
            model: [{ type: core.Input }],
            id: [{ type: core.Input }],
            label: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            modelChange: [{ type: core.Output }],
            blockClass: [{ type: core.HostBinding, args: ['class.d-block',] }]
        };
        return RadioComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RadioButtonComponent = /** @class */ (function () {
        function RadioButtonComponent(radioGroup, el) {
            this.radioGroup = radioGroup;
            this.el = el;
            /* radio 原生name 用于多个radio单选使用 */
            // get name() {
            // }
            this.name = '';
            /* 按钮类型 */
            this.type = 'secondary';
            /* radio 值 */
            this.label = '';
            this.modelChange = new core.EventEmitter();
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
        }
        Object.defineProperty(RadioButtonComponent.prototype, "model", {
            /* radio 值 */
            get: /* radio 值 */ 
            /**
             * @return {?}
             */
            function () {
                if (this.hasParent(this.el.nativeElement)) {
                    return this.radioGroup.model;
                }
                return this.nyModel;
            },
            set: /**
             * @param {?} model
             * @return {?}
             */ function (model) {
                this.nyModel = model;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(RadioButtonComponent.prototype, "farrisRadioButtonClass", {
            get: /**
             * @return {?}
             */ function () { return true; },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        RadioButtonComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.name = this.hasParent(this.el.nativeElement) ? this.radioGroup.name : '';
            };
        /**
         * @return {?}
         */
        RadioButtonComponent.prototype.isGroupModel = /**
         * @return {?}
         */
            function () {
                return this.label === this.radioGroup.model;
            };
        /**
         * @return {?}
         */
        RadioButtonComponent.prototype.changeModelHandler = /**
         * @return {?}
         */
            function () {
                // 父元素获取label  子元素再从父元素获取model
                if (this.hasParent(this.el.nativeElement)) {
                    return this.radioGroup.changeModel(this.label);
                }
                this.model = this.label;
                this.modelChange.emit(this.model);
                this.controlChange(this.label);
            };
        /* 是否存在父元素  存在即单选组*/
        /* 是否存在父元素  存在即单选组*/
        /**
         * @param {?} element
         * @return {?}
         */
        RadioButtonComponent.prototype.hasParent = /* 是否存在父元素  存在即单选组*/
            /**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                return element.parentElement.classList.contains('farris-input-wrap') || element.parentElement.classList.contains('btn-group');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        RadioButtonComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioButtonComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        RadioButtonComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        RadioButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-radio-button',
                        template: "\n    <label [class]=\"'btn btn-'+type\" [class.active]=\"isGroupModel()\" [class.disabled]=\"disabled\">\n        <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\"\n        [ngModel]=\"model\" (ngModelChange)=\"changeModelHandler()\" type=\"radio\" [disabled]=\"disabled\">\n          <ng-content>\n          </ng-content>\n    </label>\n  ",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return RadioButtonComponent; })),
                                multi: true,
                            }],
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n        .farris-radio-button>.btn{\n            margin-left:-1px\n          }\n          .farris-radio-button>.btn.active, .farris-radio-button>.btn:hover{\n            position: relative;\n          }\n      "]
                    }] }
        ];
        /** @nocollapse */
        RadioButtonComponent.ctorParameters = function () {
            return [
                { type: RadioGroupComponent, decorators: [{ type: core.Optional }] },
                { type: core.ElementRef }
            ];
        };
        RadioButtonComponent.propDecorators = {
            type: [{ type: core.Input }],
            model: [{ type: core.Input }],
            id: [{ type: core.Input }],
            label: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            modelChange: [{ type: core.Output }],
            farrisRadioButtonClass: [{ type: core.HostBinding, args: ['class.farris-radio-button',] }]
        };
        return RadioButtonComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisRadioGroupComponent = /** @class */ (function () {
        function FarrisRadioGroupComponent(idSer, inject) {
            this.idSer = idSer;
            this.inject = inject;
            /* radio 数组 */
            this.data = [];
            this.textField = 'name';
            this.valueField = 'value';
            /**
             * 数据中标识禁用的字段名称，默认为 disabled
             */
            this.disabledField = 'disabled';
            /**
             * 列表中是否显示已禁用的项，默认 true
             */
            this.showDisabledItem = true;
            /* 点击事件 */
            this.changeValue = new core.EventEmitter();
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
            if (this.inject) {
                this.commonUtils = this.inject.get(uiCommon.CommonUtils);
            }
        }
        /**
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.name = this.idSer.generate().replace(/-/g, '_');
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype.clickHandler = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                /** @type {?} */
                var val = this._getValue(item);
                if (this.value == val)
                    return;
                // 更改control的值
                this.value = val;
                this.controlChange(this.value);
                this.controlTouch(this.value);
                this.changeValue.emit(this.value);
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype._getText = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item) {
                    if (this.commonUtils && this.commonUtils.getValue) {
                        return this.commonUtils.getValue(this.textField, item);
                    }
                    else {
                        return item[this.textField];
                    }
                }
                else {
                    return '';
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype._getValue = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item) {
                    if (this.commonUtils && this.commonUtils.getValue) {
                        return this.commonUtils.getValue(this.valueField, item);
                    }
                    else {
                        return item[this.valueField];
                    }
                }
                else {
                    return '';
                }
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        FarrisRadioGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        FarrisRadioGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-radiogroup',
                        template: "<div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\r\n    <div class=\"custom-control custom-radio\" *ngFor=\"let item of data; let i=index\"  [style.display]=\"item[disabledField] && !showDisabledItem ? 'none': ''\">\r\n        <input #input class=\"custom-control-input\" [name]=\"name\" id=\"{{'radio_'+name+i}}\" type=\"radio\"\r\n        [value]=\"_getValue(item)\" (click)=\"clickHandler(item)\" [checked]=\"_getValue(item) == value\" \r\n        [disabled]=\"disabled || item[disabledField]\" tabindex=\"{{tabIndex}}\">\r\n        <label class=\"custom-control-label\" for=\"{{'radio_'+name+i}}\">{{_getText(item)}}</label>\r\n    </div>\r\n</div>\r\n\r\n\r\n",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return FarrisRadioGroupComponent; })),
                                multi: true,
                            }],
                        exportAs: 'FarrisRadioGroupComponent'
                    }] }
        ];
        /** @nocollapse */
        FarrisRadioGroupComponent.ctorParameters = function () {
            return [
                { type: uiCommon.IdService },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisRadioGroupComponent.propDecorators = {
            tabIndex: [{ type: core.Input, args: ['tab-index',] }],
            data: [{ type: core.Input }],
            type: [{ type: core.Input }],
            name: [{ type: core.Input }],
            horizontal: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            value: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            valueField: [{ type: core.Input }],
            disabledField: [{ type: core.Input }],
            showDisabledItem: [{ type: core.Input }],
            changeValue: [{ type: core.Output }]
        };
        return FarrisRadioGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxGroupComponent = /** @class */ (function () {
        function CheckboxGroupComponent(idSer) {
            this.idSer = idSer;
            /* 初始化 checkbox 的值 */
            this.model = [];
            /*  */
            this.modelChange = new core.EventEmitter();
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
        }
        /**
         * @return {?}
         */
        CheckboxGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.name = this.idSer.generate();
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxGroupComponent.prototype.changeModel = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                /** @type {?} */
                var index = this.model.findIndex(( /**
                 * @param {?} ele
                 * @return {?}
                 */function (ele) {
                    return ele === value;
                }));
                // 如果已经选中  则设置为不选中
                if (index > -1) {
                    this.model.splice(index, 1);
                    return this.modelChange.emit(this.model);
                }
                // 如果没有选中  设置为选中
                this.model.push(value);
                // control的值设置为逗号分隔的字符串  便于存储和传递
                this.controlChange(this.model.join());
                this.modelChange.emit(this.model);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
                this.changeModel(this.model);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        CheckboxGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-checkbox-group',
                        template: "\n    <div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\n      <ng-content></ng-content>\n    </div>\n  ",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return CheckboxGroupComponent; })),
                                multi: true,
                            }]
                    }] }
        ];
        /** @nocollapse */
        CheckboxGroupComponent.ctorParameters = function () {
            return [
                { type: uiCommon.IdService }
            ];
        };
        CheckboxGroupComponent.propDecorators = {
            model: [{ type: core.Input }],
            name: [{ type: core.Input }],
            horizontal: [{ type: core.Input }],
            modelChange: [{ type: core.Output }]
        };
        return CheckboxGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CheckboxComponent = /** @class */ (function () {
        function CheckboxComponent(checkbox, el) {
            this.checkbox = checkbox;
            this.el = el;
            this.modelChange = new core.EventEmitter();
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
        }
        Object.defineProperty(CheckboxComponent.prototype, "name", {
            /* radio 原生name 用于多个radio单选使用 */
            get: /* radio 原生name 用于多个radio单选使用 */ 
            /**
             * @return {?}
             */
            function () {
                if (this.hasParent(this.el.nativeElement)) {
                    return this.checkbox.name;
                }
                return '';
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(CheckboxComponent.prototype, "model", {
            /* model */
            get: /* model */ 
            /**
             * @return {?}
             */
            function () {
                var _this = this;
                if (this.hasParent(this.el.nativeElement)) {
                    return this.checkbox.model.find(( /**
                     * @param {?} ele
                     * @return {?}
                     */function (ele) {
                        return ele === _this.label;
                    }));
                }
                return this.nyModel;
            },
            set: /**
             * @param {?} model
             * @return {?}
             */ function (model) {
                this.nyModel = model;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /* 值传递 */
        /* 值传递 */
        /**
         * @return {?}
         */
        CheckboxComponent.prototype.changeModelHandler = /* 值传递 */
            /**
             * @return {?}
             */
            function () {
                // 父元素获取label  子元素再从父元素获取model
                if (this.hasParent(this.el.nativeElement)) {
                    return this.checkbox.changeModel(this.label);
                }
                this.model = this.label;
                this.modelChange.emit(this.model);
                this.controlChange(this.label);
            };
        /* 是否存在父元素  存在即单选组*/
        /* 是否存在父元素  存在即单选组*/
        /**
         * @param {?} element
         * @return {?}
         */
        CheckboxComponent.prototype.hasParent = /* 是否存在父元素  存在即单选组*/
            /**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                return element.parentElement.classList.contains('farris-input-wrap');
            };
        /**
         * @param {?} value
         * @return {?}
         */
        CheckboxComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.model = value;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        CheckboxComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.controlTouch = fn;
            };
        CheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-checkbox',
                        template: "<label class=\"custom-control custom-checkbox\">\r\n  <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\" [ngModel]=\"model\"\r\n    (ngModelChange)=\"changeModelHandler()\" type=\"checkbox\" [disabled]=\"disabled\">\r\n  <span class=\"custom-control-label\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </span>\r\n</label>",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return CheckboxComponent; })),
                                multi: true,
                            }],
                        styles: ['./checkbox.component.css']
                    }] }
        ];
        /** @nocollapse */
        CheckboxComponent.ctorParameters = function () {
            return [
                { type: CheckboxGroupComponent },
                { type: core.ElementRef }
            ];
        };
        CheckboxComponent.propDecorators = {
            model: [{ type: core.Input }],
            label: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            modelChange: [{ type: core.Output }]
        };
        return CheckboxComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisCheckboxGroupComponent = /** @class */ (function () {
        function FarrisCheckboxGroupComponent(idSer, inject) {
            this.idSer = idSer;
            this.inject = inject;
            this.tabIndex = 0;
            /* radio 数组 */
            this.data = [];
            /* 分隔符 默认逗号*/
            this.separator = ',';
            /* 值类型是否是string */
            this.isStringValue = true;
            this.textField = 'name';
            this.valueField = 'value';
            this.changeValue = new core.EventEmitter();
            /* checkbox赋值事件 */
            this.setCheckboxData = new core.EventEmitter();
            this.controlChange = ( /**
             * @return {?}
             */function () { });
            this.controlTouch = ( /**
             * @return {?}
             */function () { });
            if (this.inject) {
                this.commonUtils = this.inject.get(uiCommon.CommonUtils);
            }
        }
        /**
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 初始化name
                this.name = this.idSer.generate().replace(/-/g, '_');
                this.setCheckboxData.emit(this);
                // todo 取值可以实现promise
                if (this.loadData) {
                    this.loadDataSubscription = this.loadData().subscribe(( /**
                     * @param {?} res
                     * @return {?}
                     */function (res) { return _this.data = res.data; }));
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.loadDataSubscription) {
                    this.loadDataSubscription.unsubscribe();
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype._getText = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item) {
                    if (this.commonUtils && this.commonUtils.getValue) {
                        return this.commonUtils.getValue(this.textField, item);
                    }
                    else {
                        return item[this.textField];
                    }
                }
                else {
                    return '';
                }
            };
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype._getValue = /**
         * @param {?} item
         * @return {?}
         */
            function (item) {
                if (item) {
                    if (this.commonUtils && this.commonUtils.getValue) {
                        return this.commonUtils.getValue(this.valueField, item);
                    }
                    else {
                        return item[this.valueField];
                    }
                }
                else {
                    return '';
                }
            };
        /* 选中input值 */
        /* 选中input值 */
        /**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.clickHandler = /* 选中input值 */
            /**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                /** @type {?} */
                var arrValue = this.transformToArr(this.value) || [];
                /** @type {?} */
                var val = String(this._getValue(item));
                if (!arrValue || !arrValue.length) {
                    arrValue.push(val);
                }
                else {
                    if (arrValue.some(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item == val; }))) {
                        arrValue = arrValue.filter(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n !== val; }));
                    }
                    else {
                        arrValue.push(val);
                    }
                }
                // 更新value值
                this.value = this.transformToStr(arrValue);
                // 传值formcontrol
                this.controlChange(this.value);
                this.controlTouch(this.value);
                this.changeValue.emit(this.value);
            };
        /* 被选中 */
        /* 被选中 */
        /**
         * @param {?} item
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.checked = /* 被选中 */
            /**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var val = String(this._getValue(item));
                /** @type {?} */
                var checkedValue = this.transformToArr(this.value);
                // 多值
                return checkedValue.some(( /**
                 * @param {?} item
                 * @return {?}
                 */function (item) { return item == val; }));
            };
        /* 值到数组值的转换 */
        /* 值到数组值的转换 */
        /**
         * @param {?} value
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.transformToArr = /* 值到数组值的转换 */
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (!value) {
                    return [];
                }
                if (!this.isStringValue) {
                    return value;
                }
                return value.split(this.separator);
            };
        /* 值到字符串值的转换 */
        /* 值到字符串值的转换 */
        /**
         * @param {?} value
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.transformToStr = /* 值到字符串值的转换 */
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                var _this = this;
                /** @type {?} */
                var allVals = this.data.map(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return _this._getValue(n); }));
                /** @type {?} */
                var r = [];
                allVals.forEach(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) {
                    if (value.some(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item == n; }))) {
                        r.push(n);
                    }
                }));
                if (!this.isStringValue) {
                    return r;
                }
                return r.join(this.separator);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.value = value;
            };
        /* change操作值变化  方法重写*/
        /* change操作值变化  方法重写*/
        /**
         * @param {?} fn
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.registerOnChange = /* change操作值变化  方法重写*/
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.controlChange = fn;
            };
        /* blur值变化  方法重写*/
        /* blur值变化  方法重写*/
        /**
         * @param {?} fn
         * @return {?}
         */
        FarrisCheckboxGroupComponent.prototype.registerOnTouched = /* blur值变化  方法重写*/
            /**
             * @param {?} fn
             * @return {?}
             */
            function (fn) {
                this.controlTouch = fn;
            };
        FarrisCheckboxGroupComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-checkboxgroup',
                        template: "<div class=\"farris-input-wrap\" [class.farris-checkradio-hor]=\"horizontal\">\r\n    <div class=\"custom-control custom-checkbox\" *ngFor=\"let item of data; let i = index\">\r\n        <input #input class=\"custom-control-input\" [name]=\"name\" id=\"{{ 'checkbox_' + name + i }}\"\r\n            type=\"checkbox\" [value]=\"_getValue(item)\" [checked]=\"checked(item)\" [disabled]=\"disable\" (click)=\"clickHandler(item, i)\" \r\n            tabindex=\"{{ tabIndex + i }}\" />\r\n        <label class=\"custom-control-label\" for=\"{{ 'checkbox_' + name + i }}\" title=\"{{_getText(item)}}\">{{ _getText(item) }}</label>\r\n    </div>\r\n</div>\r\n",
                        providers: [{
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: core.forwardRef(( /**
                                 * @return {?}
                                 */function () { return FarrisCheckboxGroupComponent; })),
                                multi: true,
                            }],
                        exportAs: 'FarrisCheckboxGroupComponent'
                    }] }
        ];
        /** @nocollapse */
        FarrisCheckboxGroupComponent.ctorParameters = function () {
            return [
                { type: uiCommon.IdService },
                { type: core.Injector, decorators: [{ type: core.Optional }] }
            ];
        };
        FarrisCheckboxGroupComponent.propDecorators = {
            tabIndex: [{ type: core.Input, args: ['tab-index',] }],
            data: [{ type: core.Input }],
            type: [{ type: core.Input }],
            name: [{ type: core.Input }],
            horizontal: [{ type: core.Input }],
            separator: [{ type: core.Input }],
            disable: [{ type: core.Input }],
            value: [{ type: core.Input }],
            isStringValue: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            valueField: [{ type: core.Input }],
            loadData: [{ type: core.Input }],
            changeValue: [{ type: core.Output }],
            setCheckboxData: [{ type: core.Output }]
        };
        return FarrisCheckboxGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextareaAutoSizeDirective = /** @class */ (function () {
        function TextareaAutoSizeDirective(el, ngControl, injector) {
            this.el = el;
            this.ngControl = ngControl;
            this.injector = injector;
            this.enable = true;
            this.previousValue = null;
            this.isUserResized = false;
            this.textarea = this.el.nativeElement;
        }
        /**
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.init();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.enable && !changes.enable.isFirstChange()) {
                    this.sizeToFit();
                }
            };
        /**
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (!this.enable) {
                    return;
                }
                if (this.maxHeight) {
                    this.textarea.style.maxHeight = this.maxHeight + "px";
                }
                this.minHeight = this.textarea.getBoundingClientRect().height;
                if (this.minHeight) {
                    this.textarea.style.minHeight = this.minHeight + "px";
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.init = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.enable) {
                    this.document = this.textarea.ownerDocument;
                    this.documentElement = this.document.documentElement;
                    if (this.textarea) {
                        if (this.textarea.value) {
                            this.sizeToFit();
                        }
                    }
                    if (this.ngControl) {
                        this.ngControl.valueChanges.subscribe(( /**
                         * @param {?} v
                         * @return {?}
                         */function (v) {
                            if (v !== _this.previousValue) {
                                _this.sizeToFit();
                            }
                        }));
                    }
                }
            };
        /**
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.onInput = /**
         * @return {?}
         */
            function () {
                this.sizeToFit();
            };
        /**
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.onValueChange = /**
         * @return {?}
         */
            function () {
                this.sizeToFit();
            };
        /**
         * @private
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.overflowOffset = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var offsetTop = 0;
                /** @type {?} */
                var el = this.textarea;
                while (el !== document.body && el !== null) {
                    offsetTop += el.offsetTop || 0;
                    el = el.offsetParent;
                }
                /** @type {?} */
                var top = offsetTop - document.defaultView.pageYOffset;
                /** @type {?} */
                var bottom = this.documentElement.clientHeight - (top + this.textarea.offsetHeight);
                return { top: top, bottom: bottom };
            };
        /**
         * @private
         * @return {?}
         */
        TextareaAutoSizeDirective.prototype.sizeToFit = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.enable) {
                    return;
                }
                /** @type {?} */
                var textarea = this.textarea;
                if (this.isUserResized) {
                    return;
                }
                if (this.textarea.value === this.previousValue) {
                    return;
                }
                if (this.textarea.offsetWidth <= 0 && this.textarea.offsetHeight <= 0) {
                    return;
                }
                // const { top, bottom } = this.overflowOffset();
                // if (top < 0 || bottom < 0) {
                //     return;
                // }
                /** @type {?} */
                var textareaStyle = getComputedStyle(textarea);
                /** @type {?} */
                var topBorderWidth = Number(textareaStyle.borderTopWidth.replace(/px/, ''));
                /** @type {?} */
                var bottomBorderWidth = Number(textareaStyle.borderBottomWidth.replace(/px/, ''));
                /** @type {?} */
                var isBorderBox = textareaStyle.boxSizing === 'border-box';
                /** @type {?} */
                var borderAddOn = isBorderBox ? topBorderWidth + bottomBorderWidth : 0;
                // const maxHeight = Number(textareaStyle.height.replace(/px/, '')) + bottom;
                // const adjustedViewportMarginBottom = bottom < viewportMarginBottom ? bottom : viewportMarginBottom;
                // textarea.style.maxHeight = `${maxHeight - adjustedViewportMarginBottom}px`;
                /** @type {?} */
                var container = textarea.parentElement;
                if (container instanceof HTMLElement) {
                    /** @type {?} */
                    var containerHeight = container.style.height;
                    container.style.height = getComputedStyle(container).height;
                    textarea.style.height = 'auto';
                    /** @type {?} */
                    var h = textarea.scrollHeight + borderAddOn;
                    if (this.minHeight > h) {
                        h = this.minHeight;
                    }
                    textarea.style.height = h + "px";
                    container.style.height = containerHeight;
                }
                this.previousValue = textarea.value;
            };
        TextareaAutoSizeDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[auto-size]',
                    },] }
        ];
        /** @nocollapse */
        TextareaAutoSizeDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: forms.NgControl },
                { type: core.Injector }
            ];
        };
        TextareaAutoSizeDirective.propDecorators = {
            enable: [{ type: core.Input, args: ['auto-size',] }],
            maxHeight: [{ type: core.Input }],
            onInput: [{ type: core.HostListener, args: ['input',] }],
            onValueChange: [{ type: core.HostListener, args: ['change',] }]
        };
        return TextareaAutoSizeDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextareaWordcountDirective = /** @class */ (function () {
        function TextareaWordcountDirective(el, render, injector) {
            this.el = el;
            this.render = render;
            this.injector = injector;
            this.useWordCount = true;
            /**
             * 统计字数的方式； surplus 剩余可输入字数; length: 当前已输入字数；
             *
             * 默认为 surplus
             */
            this.countType = 'surplus';
            this.onlyShowInDialog = false;
            this.wordCountElement = null;
            // 当前字数
            this.currentLengthElement = null;
            this.onInput = null;
            this.ro = null;
            this.eventManager = this.injector.get(platformBrowser.EventManager);
            this.localeSer = this.injector.get(uiLocale.LocaleService);
        }
        /**
         * @return {?}
         */
        TextareaWordcountDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ngControl = this.injector.get(forms.NgControl, null);
            };
        /**
         * @return {?}
         */
        TextareaWordcountDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initWordCount();
                if (this.ngControl && this.useWordCount) {
                    this.ngControl.control.valueChanges.subscribe(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        _this.updateWordsCount();
                    }));
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TextareaWordcountDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.useWordCount && !changes.useWordCount.isFirstChange()) {
                    if (this.useWordCount) {
                        this.initWordCount();
                    }
                    else {
                        this.destroy();
                    }
                }
            };
        /**
         * @return {?}
         */
        TextareaWordcountDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy();
                if (this.ro) {
                    this.ro.disconnect();
                    this.ro.unobserve(this.el.nativeElement.parentElement);
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaWordcountDirective.prototype.destroy = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.onInput) {
                    this.onInput();
                }
                if (this.wordCountElement) {
                    this.wordCountElement.remove();
                }
            };
        /**
         * @return {?}
         */
        TextareaWordcountDirective.prototype.initWordCount = /**
         * @return {?}
         */
            function () {
                if (this.useWordCount && !this.onlyShowInDialog) {
                    this.createWordCountElement();
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaWordcountDirective.prototype.createWordCountID = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tagName = this.el.nativeElement.tagName;
                if (this.ngControl) {
                    /** @type {?} */
                    var ctrlName = this.ngControl.name;
                    return tagName + "_WORDCOUNT_" + ctrlName;
                }
                else {
                    if (this.el.nativeElement.id) {
                        return tagName + "_WORDCOUNT_" + this.el.nativeElement.id;
                    }
                }
                return '';
            };
        /**
         * @private
         * @return {?}
         */
        TextareaWordcountDirective.prototype.createWordCountElement = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var max = this.el.nativeElement.maxLength;
                if (!max || max < 0) {
                    // console.info('未设置最大字符数，计数功能失效。');
                    return;
                }
                /** @type {?} */
                var wordCountSPAN = this.render.createElement('span');
                wordCountSPAN.className = 'textarea-wordcount';
                /** @type {?} */
                var id = this.createWordCountID();
                if (id) {
                    wordCountSPAN.id = id;
                }
                this.render.setStyle(wordCountSPAN, 'position', 'absolute');
                this.render.setStyle(wordCountSPAN, 'bottom', '0px');
                var _a = this.el.nativeElement.getBoundingClientRect(), width = _a.width, right = _a.right;
                var parentWidth = this.el.nativeElement.parentElement.getBoundingClientRect().width;
                if (parentWidth !== width) {
                    this.render.setStyle(wordCountSPAN, 'right', parentWidth - width + 10 + "px");
                    this.ro = new ResizeObserver(( /**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */function (entries, observer) {
                        if (entries && entries[0]) {
                            /** @type {?} */
                            var _pw = entries[0].contentRect.width;
                            _this.render.setStyle(wordCountSPAN, 'right', _pw - width + 10 + "px");
                        }
                    }));
                    this.ro.observe(this.el.nativeElement.parentElement);
                }
                else {
                    this.render.setStyle(wordCountSPAN, 'right', '10px');
                }
                this.render.setStyle(wordCountSPAN, 'cursor', 'pointer');
                this.el.nativeElement.after(wordCountSPAN);
                this.wordCountElement = wordCountSPAN;
                /** @type {?} */
                var currentLengthSPAN = this.render.createElement('span');
                wordCountSPAN.appendChild(currentLengthSPAN);
                this.currentLengthElement = currentLengthSPAN;
                currentLengthSPAN.after(" / " + max);
                this.updateWordsCount();
                this.onInput = this.render.listen(this.el.nativeElement, 'input', ( /**
                 * @return {?}
                 */function () {
                    // value.replace(/\n|\r/gi, '') // 移除换行符
                    _this.updateWordsCount();
                }));
            };
        /**
         * @return {?}
         */
        TextareaWordcountDirective.prototype.updateWordsCount = /**
         * @return {?}
         */
            function () {
                if (!this.useWordCount || !this.currentLengthElement) {
                    return;
                }
                /** @type {?} */
                var max = this.el.nativeElement.maxLength;
                /** @type {?} */
                var val = this.countType === 'surplus' ? max - this.el.nativeElement.value.length : this.el.nativeElement.value.length;
                /** @type {?} */
                var tip = 'messager.prompt.tips.' + this.countType;
                this.currentLengthElement.innerText = val;
                this.wordCountElement.title = this.localeSer.getValue(tip).replace('{0}', val);
            };
        TextareaWordcountDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[word-count]',
                        exportAs: 'WordCountRef'
                    },] }
        ];
        /** @nocollapse */
        TextareaWordcountDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.Injector }
            ];
        };
        TextareaWordcountDirective.propDecorators = {
            useWordCount: [{ type: core.Input, args: ['word-count',] }],
            countType: [{ type: core.Input }],
            onlyShowInDialog: [{ type: core.Input }]
        };
        return TextareaWordcountDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextareaZoomDirective = /** @class */ (function () {
        function TextareaZoomDirective(el, render, injector, wordCountRef) {
            this.el = el;
            this.render = render;
            this.injector = injector;
            this.wordCountRef = wordCountRef;
            this.useZoom = true;
            this.dialogWidth = 500;
            this.dialogHeight = 400;
            this.fullscreen = false;
            this.title = '';
            this.value = '';
            this.onMouseEnter = null;
            this.onMouseLeave = null;
            this.onClick = null;
            this.altEnterHandler = null;
            this.zoomButtonElement = null;
            this.messagerService = this.injector.get(uiMessager.MessagerService);
            this.eventManager = this.injector.get(platformBrowser.EventManager);
            this.localeSer = this.injector.get(uiLocale.LocaleService, null);
        }
        /**
         * @return {?}
         */
        TextareaZoomDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ngControl = this.injector.get(forms.NgControl, null);
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TextareaZoomDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.useZoom && !changes.useZoom.isFirstChange()) {
                    if (this.useZoom) {
                        this.createZoomButton();
                    }
                    else {
                        this.destroy();
                    }
                }
            };
        /**
         * @return {?}
         */
        TextareaZoomDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (this.useZoom) {
                    this.createZoomButton();
                }
            };
        /**
         * @return {?}
         */
        TextareaZoomDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy();
            };
        /**
         * @private
         * @return {?}
         */
        TextareaZoomDirective.prototype.destroy = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.onMouseEnter) {
                    this.onMouseEnter();
                }
                if (this.onMouseLeave) {
                    this.onMouseLeave();
                }
                if (this.onClick) {
                    this.onClick();
                }
                if (this.altEnterHandler) {
                    this.altEnterHandler();
                }
                if (this.zoomButtonElement) {
                    this.zoomButtonElement.remove();
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaZoomDirective.prototype.bindEventHandler = /**
         * @private
         * @return {?}
         */
            function () {
                this.altEnterHandler = this.eventManager.addEventListener(this.el.nativeElement, 'keydown.alt.enter', ( /**
                 * @param {?} event
                 * @return {?}
                 */function (event) {
                    /** @type {?} */
                    var target = (( /** @type {?} */(event.target)));
                    /** @type {?} */
                    var val = target.value + '\n';
                    target.value = val;
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TextareaZoomDirective.prototype.createZoombarID = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tagName = this.el.nativeElement.tagName;
                if (this.ngControl) {
                    /** @type {?} */
                    var ctrlName = this.ngControl.name;
                    return tagName + "_ZOOMBAR_" + ctrlName;
                }
                else {
                    if (this.el.nativeElement.id) {
                        return tagName + "_ZOOMBAR_" + this.el.nativeElement.id;
                    }
                }
                return '';
            };
        /**
         * @private
         * @return {?}
         */
        TextareaZoomDirective.prototype.createZoomButton = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var zoomSPAN = this.render.createElement('span');
                zoomSPAN.className = 'f-icon modal_maximize textarea-zoom';
                zoomSPAN.title = this.localeSer.getValue('text.zoom') || '点击后弹出进行编辑';
                /** @type {?} */
                var id = this.createZoombarID();
                if (id) {
                    zoomSPAN.id = id;
                }
                this.render.setStyle(zoomSPAN, 'position', 'absolute');
                this.render.setStyle(zoomSPAN, 'top', '2px');
                var width = this.el.nativeElement.getBoundingClientRect().width;
                var parentWidth = this.el.nativeElement.parentElement.getBoundingClientRect().width;
                if (parentWidth !== width) {
                    this.render.setStyle(zoomSPAN, 'left', width - 18 + "px");
                }
                else {
                    this.render.setStyle(zoomSPAN, 'right', '2px');
                }
                this.render.setStyle(zoomSPAN, 'cursor', 'pointer');
                this.el.nativeElement.after(zoomSPAN);
                this.zoomButtonElement = zoomSPAN;
                this.onMouseEnter = this.render.listen(zoomSPAN, 'mouseenter', ( /**
                 * @return {?}
                 */function () {
                    _this.render.setStyle(zoomSPAN, 'fontSize', '22px');
                }));
                this.onMouseLeave = this.render.listen(zoomSPAN, 'mouseleave', ( /**
                 * @return {?}
                 */function () {
                    _this.render.setStyle(zoomSPAN, 'fontSize', '1rem');
                }));
                this.onClick = this.render.listen(zoomSPAN, 'click', ( /**
                 * @return {?}
                 */function () {
                    _this.zoomTextarea();
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TextareaZoomDirective.prototype.zoomTextarea = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var opts = {
                    width: this.dialogWidth || 500,
                    height: this.dialogHeight || 400,
                    showFontSize: true,
                    inputType: 'textarea',
                    saveSize: true // 启用个性化存储，localStorage
                };
                if (window.localStorage) {
                    /** @type {?} */
                    var key = this.messagerService.getKeyString();
                    /** @type {?} */
                    var val = localStorage.getItem(key);
                    if (val) {
                        /** @type {?} */
                        var lastSetting = JSON.parse(val);
                        opts.fontSize = lastSetting.fontSize || 18;
                        opts.width = lastSetting.width || opts.width;
                        opts.height = lastSetting.height || opts.height;
                    }
                }
                /** @type {?} */
                var tagName = this.el.nativeElement.tagName;
                /** @type {?} */
                var showText = this.el.nativeElement.value;
                if (this.ngControl) {
                    showText = this.ngControl.value;
                }
                else {
                    showText = this.el.nativeElement.value;
                }
                showText = this.value || showText;
                if (tagName === 'FARRIS-TEXT' || this.el.nativeElement.readOnly || this.el.nativeElement.disabled) {
                    opts.readonly = true;
                    opts.showOkButton = false;
                    this.messagerService.prompt2(this.title, showText, opts).subscribe();
                }
                else {
                    opts.maxLength = this.el.nativeElement.maxLength;
                    opts.enableWordCount = this.wordCountRef ? this.wordCountRef.useWordCount : false;
                    opts.countType = this.wordCountRef ? this.wordCountRef.countType : 'length';
                    this.messagerService.prompt2(this.title, showText, opts).subscribe(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        if (typeof v === 'boolean' && !v) {
                            return;
                        }
                        else {
                            _this.ngControl.control.setValue(v);
                            if (_this.wordCountRef) {
                                _this.wordCountRef.updateWordsCount();
                            }
                        }
                    }));
                }
            };
        TextareaZoomDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[textarea-zoom]',
                    },] }
        ];
        /** @nocollapse */
        TextareaZoomDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.Injector },
                { type: TextareaWordcountDirective, decorators: [{ type: core.Optional }] }
            ];
        };
        TextareaZoomDirective.propDecorators = {
            useZoom: [{ type: core.Input, args: ['textarea-zoom',] }],
            dialogWidth: [{ type: core.Input }],
            dialogHeight: [{ type: core.Input }],
            fullscreen: [{ type: core.Input }],
            title: [{ type: core.Input }],
            value: [{ type: core.Input }]
        };
        return TextareaZoomDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputAppendDirective = /** @class */ (function () {
        // private ngControl: NgControl;
        function InputAppendDirective(viewRef, el, render, injector) {
            this.viewRef = viewRef;
            this.el = el;
            this.render = render;
            this.injector = injector;
            this._enableAppend = true;
            // 应用场景，默认这个功能是在简单表格 Table
            // 追加一个场景在普通表单上 Form
            this._appendScene = 'Table';
            // 追加到哪个类型下 TextBox、MultiTextBox、 StaticText
            this.inputAppendControlType = 'InputGroup';
            // 根据类型不一样，在控件处于禁用、只读时，决定颜色是否可用
            // 有两种：按钮 button 文本 text
            this._appendType = 'button';
            // 追加的文本
            this._inputAppendText = '';
            // 模板
            // @Input() inputAppendTmpl: TemplateRef<any>;
            this._disabled = false;
            // 当_appendCls为空时，
            this._appendCls = 'input-group-text';
            /*
                * 文本点击事件
                */
            this.inputAppendClickEvent = new core.EventEmitter();
            // 标记native的外层
            this.elWrapElement = null;
            // 标记元素
            this.appendWrapElement = null;
            // 暂时不用
            this.appendTextElement = null;
            this.clickHandler = null;
            this.disabledCls = 'f-state-disabled';
            this.ngZone = null;
            this.ngZone = this.injector.get(core.NgZone);
        }
        Object.defineProperty(InputAppendDirective.prototype, "enableAppend", {
            get: /**
             * @return {?}
             */ function () {
                return this._enableAppend;
            },
            // 相当于启用禁用此功能
            set: 
            // 相当于启用禁用此功能
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value === '' || value) {
                    this._enableAppend = true;
                    // 需要
                    if (!this.appendWrapElement) {
                        this.createStruct();
                    }
                }
                else {
                    this._enableAppend = false;
                    if (this.appendWrapElement) {
                        this.resetStruct();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputAppendDirective.prototype, "inputAppendScene", {
            get: /**
             * @return {?}
             */ function () {
                return this._appendScene;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                // 支持这两个场景
                val = val == 'Form' ? 'Form' : 'Table';
                if (val != this._appendScene) {
                    switch (this.inputAppendControlType) {
                        case 'StaticText':
                            this.render.removeClass(this.el.nativeElement, 'f-cmp-input-append-' + this._appendScene.toLowerCase());
                            this.render.addClass(this.el.nativeElement, 'f-cmp-input-append-' + val.toLowerCase());
                            break;
                        case 'TextBox':
                        case 'MultiTextBox':
                            if (this.elWrapElement) {
                                this.elWrapElement.className = this.elWrapElement.className.replace('f-cmp-input-append-' + this._appendScene.toLowerCase(), 'f-cmp-input-append-' + val.toLowerCase());
                            }
                            break;
                    }
                    this._appendScene = val;
                    this.modifyPaddingRight();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputAppendDirective.prototype, "inputAppendType", {
            get: /**
             * @return {?}
             */ function () {
                return this._appendType;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                var _this = this;
                if (value) {
                    if (['button', 'text'].findIndex(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) { return item == value; })) < 0) {
                        // 类型在支持范围内
                        value = 'button';
                    }
                    if (value != this._appendType) {
                        if (this.appendWrapElement) {
                            // 移除原来，追加新的
                            this.render.removeClass(this.appendWrapElement, 'input-append-' + this._appendType);
                            this.render.addClass(this.appendWrapElement, 'input-append-' + value);
                            if (this._appendType == 'button') {
                                // 原来是按钮
                                if (this.clickHandler) {
                                    this.clickHandler();
                                    this.clickHandler = null;
                                }
                            }
                            else {
                                this.clickHandler = this.render.listen(this.appendWrapElement, 'click', ( /**
                                 * @param {?} ev
                                 * @return {?}
                                 */function (ev) {
                                    _this.inputAppendClickEvent.emit(ev);
                                }));
                            }
                        }
                        this._appendType = value;
                        this.modifyPaddingRight();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputAppendDirective.prototype, "inputAppendText", {
            get: /**
             * @return {?}
             */ function () {
                return this._inputAppendText;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value != this._inputAppendText) {
                    this._inputAppendText = value;
                    if (this.appendWrapElement && this._enableAppend) {
                        this.render.removeChild(this.appendWrapElement, this.appendTextElement);
                        this.appendTextElement.innerHTML = value;
                        this.render.appendChild(this.appendWrapElement, this.appendTextElement);
                        this.modifyPaddingRight();
                    }
                    else {
                        this.createStruct();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputAppendDirective.prototype, "inputAppendDisabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                if (value != this._disabled) {
                    this._disabled = value;
                    if (this.appendWrapElement) {
                        value && this.render.addClass(this.appendWrapElement, this.disabledCls);
                        !value && this.render.removeClass(this.appendWrapElement, this.disabledCls);
                    }
                    this.modifyPaddingRight();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(InputAppendDirective.prototype, "inputAppendCls", {
            get: /**
             * @return {?}
             */ function () {
                return this._appendCls;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                if (val != this._appendCls) {
                    val = val ? val : 'input-group-text';
                    if (this.appendTextElement) {
                        this.appendTextElement.className = val;
                    }
                    this._appendCls = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        InputAppendDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //this.ngControl = this.injector.get(NgControl, null);
            };
        /**
         * @return {?}
         */
        InputAppendDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.createStruct();
            };
        /**
         * @return {?}
         */
        InputAppendDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                //this.resetStruct();
                if (this.clickHandler) {
                    this.clickHandler();
                    this.clickHandler = null;
                }
                if (this.appendWrapElement) {
                    this.appendWrapElement.remove();
                    this.appendWrapElement = null;
                }
                if (this.elWrapElement) {
                    this.elWrapElement.remove();
                    this.elWrapElement = null;
                }
            };
        /**
         * 重置
         */
        /**
         * 重置
         * @private
         * @return {?}
         */
        InputAppendDirective.prototype.resetStruct = /**
         * 重置
         * @private
         * @return {?}
         */
            function () {
                if (this.clickHandler) {
                    this.clickHandler();
                    this.clickHandler = null;
                }
                // 分类型移除不同新增加的结构或样式
                switch (this.inputAppendControlType) {
                    case 'StaticText':
                        this.render.removeClass(this.el.nativeElement, 'f-cmp-static-text-input-append');
                        this.render.removeClass(this.el.nativeElement, 'f-cmp-input-append-' + this.inputAppendScene.toLowerCase());
                        break;
                    case 'TextBox':
                    case 'MultiTextBox':
                        if (this.elWrapElement) {
                            /** @type {?} */
                            var wrapParent = this.render.parentNode(this.elWrapElement);
                            this.render.appendChild(wrapParent, this.el.nativeElement);
                            this.elWrapElement.remove();
                            this.elWrapElement = null;
                        }
                        break;
                }
                if (this.appendWrapElement) {
                    this.appendWrapElement.remove();
                    this.appendWrapElement = null;
                }
                this.modifyPaddingRight();
            };
        /**
         * 创建插入结构
         */
        /**
         * 创建插入结构
         * @private
         * @return {?}
         */
        InputAppendDirective.prototype.createStruct = /**
         * 创建插入结构
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.inputAppendText || !this.enableAppend || this.appendWrapElement) {
                    return;
                }
                /** @type {?} */
                var buttonWrap = this.render.createElement('div');
                buttonWrap.className = 'input-group-append input-append-wrapper';
                buttonWrap.className += ' input-append-' + this.inputAppendType;
                if (this._disabled) {
                    buttonWrap.className += ' ' + this.disabledCls;
                }
                /** @type {?} */
                var buttonTextWrap = this.render.createElement('div');
                buttonTextWrap.className = this.inputAppendCls;
                buttonTextWrap.innerHTML = this.inputAppendText;
                this.appendTextElement = buttonTextWrap;
                this.appendWrapElement = buttonWrap;
                this.render.appendChild(buttonWrap, buttonTextWrap);
                switch (this.inputAppendControlType) {
                    case 'StaticText':
                        // 此时还没有生成内部的样式
                        // let textareaEl = this.el.nativeElement.querySelector('.f-form-control-textarea');
                        /** @type {?} */
                        var clsNames = 'f-cmp-static-text-input-append' + (' f-cmp-input-append-' + this.inputAppendScene.toLowerCase()) + (this._disabled ? ' ' + this.disabledCls : '');
                        clsNames.split(' ').map(( /**
                         * @param {?} tclsName
                         * @return {?}
                         */function (tclsName) {
                            _this.render.addClass(_this.el.nativeElement, tclsName);
                        }));
                        this.render.appendChild(this.el.nativeElement, buttonWrap);
                        break;
                    case 'TextBox':
                    case 'MultiTextBox':
                        /** @type {?} */
                        var textParent = this.render.parentNode(this.el.nativeElement);
                        /** @type {?} */
                        var inputWrap = this.render.createElement('div');
                        inputWrap.className = 'f-cmp-text-input-append f-cmp-input-append-' + this.inputAppendScene.toLowerCase() + (this._disabled ? ' ' + this.disabledCls : '');
                        if (this.el.nativeElement.outerHTML.indexOf('textarea') > -1) {
                            inputWrap.className = 'f-cmp-textarea-input-append f-cmp-input-append-' + this.inputAppendScene.toLowerCase() + (this._disabled ? ' ' + this.disabledCls : '');
                        }
                        this.elWrapElement = inputWrap;
                        this.render.appendChild(inputWrap, this.el.nativeElement);
                        this.render.appendChild(inputWrap, buttonWrap);
                        this.render.appendChild(textParent, inputWrap);
                        break;
                    default:
                        // 存在类似下拉这样的控件，内部调用input-group结构还没有初始化
                        /** @type {?} */
                        var inputGroupEl = this.el.nativeElement.querySelector('.input-group');
                        if (inputGroupEl) {
                            this.render.appendChild(inputGroupEl, buttonWrap);
                        }
                        else {
                            if (this.ngZone) {
                                this.ngZone.runOutsideAngular(( /**
                                 * @return {?}
                                 */function () {
                                    setTimeout(( /**
                                     * @return {?}
                                     */function () {
                                        /** @type {?} */
                                        var inputGroupEl2 = _this.el.nativeElement.querySelector('.input-group');
                                        _this.render.appendChild(inputGroupEl2, buttonWrap);
                                    }));
                                }));
                            }
                        }
                }
                if (this.inputAppendType == 'button') {
                    this.clickHandler = this.render.listen(this.appendWrapElement, 'click', ( /**
                     * @param {?} ev
                     * @return {?}
                     */function (ev) {
                        if (!_this.inputAppendDisabled) {
                            _this.inputAppendClickEvent.emit(ev);
                        }
                    }));
                }
                this.modifyPaddingRight();
            };
        /**
         * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
         * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
         */
        /**
         * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
         * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
         * @private
         * @return {?}
         */
        InputAppendDirective.prototype.modifyPaddingRight = /**
         * 因为在普通输入框、静态文本、多行文本框展示时，界面样式问题。
         * 所以需要单独处理，通过absolute定位，设置间距，保持界面一致
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var findType = ['StaticText', 'TextBox', 'MultiTextBox'].find(( /**
                 * @param {?} typeItem
                 * @return {?}
                 */function (typeItem) { return typeItem == _this.inputAppendControlType; }));
                if (this.inputAppendScene == 'Form' && findType) {
                    /** @type {?} */
                    var changeEl = findType == 'StaticText' ? this.el.nativeElement.querySelector('span') : this.el.nativeElement;
                    if (this.enableAppend && !this._disabled && this.appendWrapElement) {
                        //window.getComputhis.appendWrapElement
                        /** @type {?} */
                        var tRectObj = this.appendWrapElement.getBoundingClientRect();
                        this.render.setStyle(changeEl, 'paddingRight', tRectObj.width + 'px');
                    }
                    else {
                        this.render.removeStyle(changeEl, 'paddingRight');
                    }
                }
            };
        InputAppendDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[input-append]',
                    },] }
        ];
        /** @nocollapse */
        InputAppendDirective.ctorParameters = function () {
            return [
                { type: core.ViewContainerRef },
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: core.Injector }
            ];
        };
        InputAppendDirective.propDecorators = {
            enableAppend: [{ type: core.Input, args: ['input-append',] }],
            inputAppendScene: [{ type: core.Input }],
            inputAppendControlType: [{ type: core.Input }],
            inputAppendType: [{ type: core.Input }],
            inputAppendText: [{ type: core.Input }],
            inputAppendDisabled: [{ type: core.Input }],
            inputAppendCls: [{ type: core.Input }],
            inputAppendClickEvent: [{ type: core.Output }]
        };
        return InputAppendDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShortCutTabKeyDirective = /** @class */ (function () {
        function ShortCutTabKeyDirective(el, injector, eventManager) {
            this.el = el;
            this.injector = injector;
            this.eventManager = eventManager;
        }
        /**
         * @return {?}
         */
        ShortCutTabKeyDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        ShortCutTabKeyDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.eventManager.addEventListener(this.el.nativeElement, 'keydown', ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    e.stopPropagation();
                    if (e.key === 'Tab') {
                        _this.onTabKeydownHandler(e.target);
                    }
                }));
            };
        /**
         * @private
         * @param {?} currentTarget
         * @return {?}
         */
        ShortCutTabKeyDirective.prototype.onTabKeydownHandler = /**
         * @private
         * @param {?} currentTarget
         * @return {?}
         */
            function (currentTarget) {
                /** @type {?} */
                var allInputs = this.el.nativeElement.querySelectorAll('input,textarea');
                allInputs = Array.from(allInputs);
                /** @type {?} */
                var currentInputIndex = allInputs.findIndex(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n === currentTarget; }));
                /** @type {?} */
                var nextInputIndex = currentInputIndex + 1;
                if (nextInputIndex >= allInputs.length) {
                    nextInputIndex = 0;
                }
                /** @type {?} */
                var nextInputTarget = allInputs[nextInputIndex];
                if (nextInputTarget) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        nextInputTarget.focus();
                    }));
                }
            };
        ShortCutTabKeyDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'shortcut-tab',
                    },] }
        ];
        /** @nocollapse */
        ShortCutTabKeyDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Injector },
                { type: platformBrowser.EventManager }
            ];
        };
        return ShortCutTabKeyDirective;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m)
            return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length)
                    o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CommentsHttpToken = new core.InjectionToken('Common comments HTTP service');

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SingleListComponent = /** @class */ (function () {
        function SingleListComponent(injector, cdr) {
            this.injector = injector;
            this.cdr = cdr;
            this.showButtons = true;
            this.buttons = [];
            this.data = [];
            this.textField = '';
            this.maxItems = 10;
            this.emptyDataMsg = '暂无数据';
            this.itemClick = new core.EventEmitter();
            this.activeIndex = -1;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        SingleListComponent.prototype.onClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
            };
        /**
         * @return {?}
         */
        SingleListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} items
         * @return {?}
         */
        SingleListComponent.prototype.loadData = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                this.data = items;
                if (!this.cdr['destroyed']) {
                    this.cdr.detectChanges();
                }
            };
        /**
         * @param {?} rowObj
         * @return {?}
         */
        SingleListComponent.prototype.formatData = /**
         * @param {?} rowObj
         * @return {?}
         */
            function (rowObj) {
                return this.formatter(rowObj);
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        SingleListComponent.prototype.onItemClick = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                this.itemClick.emit({ data: item, evnet: $event });
            };
        /**
         * @param {?} index
         * @return {?}
         */
        SingleListComponent.prototype.setActiveItem = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.activeIndex = index;
                if (!this.cdr['destroyed']) {
                    this.cdr.detectChanges();
                }
            };
        SingleListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'single-list',
                        template: "<div class=\"d-flex flex-column\" style=\"width: 100%;height:100%;padding-top: 5px; \" #itemsContainer>\r\n    <!-- <div class=\"header\"></div> -->\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;flex:1;  max-height: 250px;\">\r\n        <ul class=\"list-group list-group-flush p-0\"  [class.h-100]=\"!data || !data.length\">\r\n            <li class=\"list-group-item list-group-item-action\" style=\"cursor: pointer;\" [class.active]=\"activeIndex === i\" *ngFor=\"let item of data; index as i\" (click)=\"onItemClick($event, item)\">\r\n                <span style=\"overflow: hidden;text-overflow: ellipsis;\" title=\" {{item[textField]}}\" *ngIf=\"!formatter\">{{ item[textField] }}</span> \r\n                <span style=\"overflow: hidden;text-overflow: ellipsis;\" *ngIf=\"formatter\" [innerHTML]=\"formatData(item) | safe:'html'\"></span>\r\n            </li>\r\n\r\n            <li class=\"norecord p-2\" *ngIf=\"!data || !data.length\" style=\"color: #848c9a;\">\r\n                {{ emptyDataMsg }}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"more d-flex\" *ngIf=\"showButtons\" style=\"height: 36px;border-top: 1px solid #dedede;justify-content: center;align-items: center;\">\r\n        <button class=\"btn btn-link\" *ngFor=\"let btn of buttons\" (click)=\"btn.handler($event)\"> \r\n            <span style=\"font-size: 13px;\" class=\"{{btn.iconCls}}\" *ngIf=\"btn.iconCls\"></span>\r\n            {{ btn.text }}\r\n        </button>\r\n    </div>\r\n     <!-- <div class=\"footer\"></div> -->\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SingleListComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SingleListComponent.propDecorators = {
            showButtons: [{ type: core.Input }],
            buttons: [{ type: core.Input }],
            data: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            formatter: [{ type: core.Input }],
            maxItems: [{ type: core.Input }],
            emptyDataMsg: [{ type: core.Input }],
            itemClick: [{ type: core.Output }],
            itemsContainer: [{ type: core.ViewChild, args: ['itemsContainer',] }],
            onClick: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }]
        };
        return SingleListComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TextareaCommentsDirective = /** @class */ (function () {
        function TextareaCommentsDirective(injector, el, render, localeSer, cfr) {
            this.injector = injector;
            this.el = el;
            this.render = render;
            this.localeSer = localeSer;
            this.cfr = cfr;
            this.useComments = true;
            this.maxHeight = 300;
            this.title = '';
            this.mgrText = '';
            this.commentsBtnElement = null;
            this.singListRef = null;
            this.listPanelElRef = null;
            this.commentSer = this.injector.get(CommentsHttpToken, null);
            this.overlaySer = this.injector.get(uiCommon.OverLayHiddenService, null);
            this.commonUtil = this.injector.get(uiCommon.CommonUtils, null);
            if (!this.overlaySer) {
                this.overlaySer = new uiCommon.OverLayHiddenService();
            }
        }
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.ngControl = this.injector.get(forms.NgControl, null);
            };
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.init();
                this.listenAttributesChanged();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        TextareaCommentsDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.useComments && !changes.useComments.isFirstChange()) {
                    this.init();
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaCommentsDirective.prototype.init = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var readonly = this.el.nativeElement.readOnly;
                /** @type {?} */
                var disabled = this.el.nativeElement.disabled;
                if (this.useComments && (!readonly && !disabled)) {
                    this.createCommentsButton();
                }
                else {
                    this.destroy();
                }
            };
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.destroy();
                this.hideListPanel();
                // 停止观察属性变化
                this.observer.disconnect();
                this.observer = null;
            };
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.listenAttributesChanged = /**
         * @return {?}
         */
            function () {
                var _this = this;
                // 选择需要观察变动的节点
                /** @type {?} */
                var targetNode = this.el.nativeElement;
                // 观察器的配置（需要观察什么变动）
                /** @type {?} */
                var config = { attributes: true };
                // 当观察到变动时执行的回调函数
                /** @type {?} */
                var callback = ( /**
                 * @param {?} mutationsList
                 * @param {?} observer
                 * @return {?}
                 */function (mutationsList, observer) {
                    var e_1, _a;
                    try {
                        // Use traditional 'for loops' for IE 11
                        for (var mutationsList_1 = __values(mutationsList), mutationsList_1_1 = mutationsList_1.next(); !mutationsList_1_1.done; mutationsList_1_1 = mutationsList_1.next()) {
                            var mutation = mutationsList_1_1.value;
                            if (mutation.type === 'attributes' && (mutation.attributeName === 'readonly' || mutation.attributeName === 'disabled')) {
                                _this.init();
                            }
                        }
                    }
                    catch (e_1_1) {
                        e_1 = { error: e_1_1 };
                    }
                    finally {
                        try {
                            if (mutationsList_1_1 && !mutationsList_1_1.done && (_a = mutationsList_1.return))
                                _a.call(mutationsList_1);
                        }
                        finally {
                            if (e_1)
                                throw e_1.error;
                        }
                    }
                });
                // 创建一个观察器实例并传入回调函数
                this.observer = new MutationObserver(callback);
                // 以上述配置开始观察目标节点
                this.observer.observe(targetNode, config);
            };
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.destroy = /**
         * @return {?}
         */
            function () {
                if (this.commentsBtnElement) {
                    this.commentsBtnElement.remove();
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaCommentsDirective.prototype.createID = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tagName = this.el.nativeElement.tagName;
                if (this.ngControl) {
                    /** @type {?} */
                    var ctrlName = this.ngControl.name;
                    return tagName + "_COMMENTS_" + ctrlName;
                }
                else {
                    if (this.el.nativeElement.id) {
                        return tagName + "_COMMENTS_" + this.el.nativeElement.id;
                    }
                }
                return '';
            };
        /**
         * @private
         * @return {?}
         */
        TextareaCommentsDirective.prototype.createCommentsButton = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var commentsBtn = this.render.createElement('span');
                commentsBtn.className = 'dropdown-toggle';
                commentsBtn.title = this.title ? this.title : (this.localeSer.getValue('text.comments.title') || '常用意见');
                /** @type {?} */
                var id = this.createID();
                if (id) {
                    commentsBtn.id = id;
                }
                this.render.setStyle(commentsBtn, 'position', 'absolute');
                this.render.setStyle(commentsBtn, 'left', '3px');
                this.render.setStyle(commentsBtn, 'bottom', '0px');
                this.render.setStyle(commentsBtn, 'cursor', 'pointer');
                /** @type {?} */
                var icon = this.render.createElement('span');
                this.render.appendChild(commentsBtn, icon);
                icon.className = 'f-icon f-icon-message';
                this.render.setStyle(icon, 'position', 'relative');
                // this.render.setStyle(icon, 'margin-right', '3px');
                this.render.setStyle(icon, 'top', '1px');
                this.render.setStyle(icon, 'font-size', '13px');
                this.el.nativeElement.after(commentsBtn);
                this.commentsBtnElement = commentsBtn;
                this.render.listen(commentsBtn, 'click', ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    e.stopPropagation();
                    if (!_this.listPanelElRef) {
                        _this.showListPanel();
                    }
                    else {
                        _this.hideListPanel();
                    }
                }));
            };
        /**
         * @private
         * @return {?}
         */
        TextareaCommentsDirective.prototype.showListPanel = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var listPanelEl = this.render.createElement('div');
                /** @type {?} */
                var zindex = this.commonUtil.getFloatingLayerIndex();
                var _a = this.commentsBtnElement.getBoundingClientRect(), left = _a.left, bottom = _a.bottom;
                this.render.setStyle(listPanelEl, 'width', '200px');
                this.render.setStyle(listPanelEl, 'max-height', this.maxHeight + "px");
                this.render.setStyle(listPanelEl, 'position', 'absolute');
                this.render.setStyle(listPanelEl, 'left', left + "px");
                this.render.setStyle(listPanelEl, 'top', '0px');
                this.render.setStyle(listPanelEl, 'z-index', zindex);
                this.render.setStyle(listPanelEl, 'box-shadow', '0 2px 8px 0 #dedede');
                this.render.setStyle(listPanelEl, 'border-radius', '6px');
                this.render.setStyle(listPanelEl, 'background', 'white');
                this.render.setStyle(listPanelEl, 'visibility', 'hidden');
                document.body.append(listPanelEl);
                this.listPanelElRef = listPanelEl;
                /** @type {?} */
                var singListCmf = this.cfr.resolveComponentFactory(SingleListComponent);
                this.singListRef = singListCmf.create(this.injector);
                this.singListRef.instance.showButtons = true;
                this.singListRef.instance.emptyDataMsg = this.localeSer.getValue('text.comments.empty');
                this.singListRef.instance.buttons = [
                    {
                        text: this.mgrText ? this.mgrText : this.localeSer.getValue('text.comments.manager'),
                        iconCls: 'f-icon f-icon-home-setup', handler: ( /**
                         * @return {?}
                         */function () {
                            if (_this.commentSer) {
                                _this.hideListPanel();
                                _this.commentSer.showCommentManageDialog({ type: 'forms' }).subscribe(( /**
                                 * @param {?} e
                                 * @return {?}
                                 */function (e) {
                                    console.log(e);
                                }));
                            }
                        })
                    }
                ];
                this.singListRef.instance.textField = 'message';
                this.singListRef.instance.maxItems = 999999;
                this.singListRef.instance.itemClick.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    /** @type {?} */
                    var val = e.data['message'];
                    /** @type {?} */
                    var _text = _this.el.nativeElement.value || '';
                    _text += val;
                    if (_this.ngControl) {
                        _this.ngControl.control.patchValue(_text);
                    }
                    else {
                        _this.el.nativeElement.value = _text;
                    }
                    _this.hideListPanel();
                }));
                listPanelEl.appendChild(this.singListRef.location.nativeElement);
                this.singListRef.changeDetectorRef.detectChanges();
                this.loadData(this.singListRef);
                this.overlaySer.registerMouseEvent(listPanelEl, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (_this.listPanelElRef.contains(e.target) || _this.commentsBtnElement === e.target || _this.commentsBtnElement.contains(e.target)) {
                        return;
                    }
                    _this.hideListPanel();
                }));
            };
        /**
         * @return {?}
         */
        TextareaCommentsDirective.prototype.hideListPanel = /**
         * @return {?}
         */
            function () {
                if (this.singListRef) {
                    this.singListRef.destroy();
                    this.singListRef = null;
                }
                if (this.listPanelElRef) {
                    this.listPanelElRef.remove();
                    this.overlaySer.destory(this.listPanelElRef);
                    this.listPanelElRef = null;
                }
            };
        /**
         * @private
         * @param {?} singListRef
         * @return {?}
         */
        TextareaCommentsDirective.prototype.loadData = /**
         * @private
         * @param {?} singListRef
         * @return {?}
         */
            function (singListRef) {
                var _this = this;
                if (this.commentSer) {
                    this.commentSer.getCommonComments({ type: 'forms' }).subscribe(( /**
                     * @param {?} data
                     * @return {?}
                     */function (data) {
                        singListRef.instance.loadData(data);
                        setTimeout(( /**
                         * @return {?}
                         */function () {
                            _this.resetPosition();
                        }));
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        TextareaCommentsDirective.prototype.resetPosition = /**
         * @private
         * @return {?}
         */
            function () {
                var _a = this.commentsBtnElement.getBoundingClientRect(), top = _a.top, bottom = _a.bottom, left = _a.left;
                /** @type {?} */
                var panelHeight = this.listPanelElRef.offsetHeight;
                if (window.innerHeight - bottom > this.maxHeight || window.innerHeight - bottom > panelHeight) {
                    this.render.setStyle(this.listPanelElRef, 'top', bottom + "px");
                    this.render.removeStyle(this.listPanelElRef, 'visibility');
                    return;
                }
                else {
                    if (top > this.maxHeight || top > panelHeight) {
                        this.render.setStyle(this.listPanelElRef, 'top', top - panelHeight + "px");
                    }
                    else {
                        this.render.setStyle(this.listPanelElRef, 'top', '0px');
                        if (left > 200) {
                            this.render.setStyle(this.listPanelElRef, 'left', left - 200 + "px");
                        }
                    }
                    this.render.removeStyle(this.listPanelElRef, 'visibility');
                }
            };
        TextareaCommentsDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[common-comments]',
                    },] }
        ];
        /** @nocollapse */
        TextareaCommentsDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ElementRef },
                { type: core.Renderer2 },
                { type: uiLocale.LocaleService },
                { type: core.ComponentFactoryResolver }
            ];
        };
        TextareaCommentsDirective.propDecorators = {
            useComments: [{ type: core.Input, args: ['common-comments',] }],
            maxHeight: [{ type: core.Input }],
            title: [{ type: core.Input }],
            mgrText: [{ type: core.Input }]
        };
        return TextareaCommentsDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SingleSelectDirective = /** @class */ (function () {
        function SingleSelectDirective(injector, elRef, render) {
            var _this = this;
            this.injector = injector;
            this.elRef = elRef;
            this.render = render;
            this.items = [];
            this.position = 'below';
            this.container = null;
            this.selectEl = null;
            this.overlayHandler = null;
            this.displayTextEl = null;
            this.ngZone = null;
            this.beforeShow = null;
            this.overlaySer = this.injector.get(uiCommon.OverLayHiddenService, new uiCommon.OverLayHiddenService());
            this.ngZone = this.injector.get(core.NgZone, null);
            if (this.overlaySer) {
                if (this.ngZone) {
                    this.ngZone.runOutsideAngular(( /**
                     * @return {?}
                     */function () {
                        _this.registerMouseEvent();
                    }));
                }
                else {
                    this.registerMouseEvent();
                }
            }
        }
        /**
         * @private
         * @return {?}
         */
        SingleSelectDirective.prototype.registerMouseEvent = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.overlayHandler = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (!_this.panelRef.classList.contains('f-area-show')) {
                        return;
                    }
                    if (_this.panelRef.contains(e.target)) {
                        return;
                    }
                    if (_this.selectEl.contains(e.target)) {
                        return;
                    }
                    _this.panelRef.classList.remove('f-area-show');
                }));
            };
        /**
         * @return {?}
         */
        SingleSelectDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngCtrl = this.injector.get(forms.NgControl);
                if (this.ngCtrl) {
                    this.ngCtrl.valueChanges.subscribe(( /**
                     * @param {?} v
                     * @return {?}
                     */function (v) {
                        _this.updateDisplayText();
                    }));
                }
            };
        /**
         * @return {?}
         */
        SingleSelectDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var container = this.createMySelect().container;
                this.selectEl = container;
                this.elRef.nativeElement.style.display = 'none';
            };
        /**
         * @return {?}
         */
        SingleSelectDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.overlayHandler) {
                    this.overlayHandler();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SingleSelectDirective.prototype.createMySelect = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var selectContainerEl = document.createElement('div');
                selectContainerEl.className = 'input-group f-cmp-inputgroup';
                if (this.width) {
                    selectContainerEl.style.width = this.width + "px";
                }
                selectContainerEl.style.userSelect = 'none';
                selectContainerEl.style.overflow = 'hidden';
                /** @type {?} */
                var selectTextEl = document.createElement('div');
                selectTextEl.className = 'form-control f-utils-fill text-left px-1 d-flex';
                selectTextEl.style.alignItems = 'center';
                selectTextEl.style.whiteSpace = 'nowrap';
                this.displayTextEl = selectTextEl;
                /** @type {?} */
                var selectArrowEl = document.createElement('div');
                selectArrowEl.className = 'input-group-append';
                selectArrowEl.innerHTML = "<span class=\"input-group-text\"><i class=\"f-icon f-icon-arrow-s\"></i></span>";
                selectContainerEl.appendChild(selectTextEl);
                selectContainerEl.appendChild(selectArrowEl);
                this.elRef.nativeElement.after(selectContainerEl);
                this.render.listen(selectContainerEl, 'click', ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (_this.panelRef.classList.contains('f-area-show')) {
                        _this.panelRef.classList.remove('f-area-show');
                        return;
                    }
                    if (!_this.beforeShow) {
                        _this.beforeShow = ( /**
                         * @return {?}
                         */function () {
                            return rxjs.of(true);
                        });
                    }
                    _this.updatePosition();
                    _this.beforeShow({ instance: _this }).pipe(operators.debounceTime(10)).subscribe(( /**
                     * @param {?} r
                     * @return {?}
                     */function (r) {
                        if (r) {
                            _this.panelRef.classList.add('f-area-show');
                        }
                    }));
                }));
                this.render.listen(this.panelRef, 'click', ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (e.target.nodeName === 'LI') {
                        /** @type {?} */
                        var val = e.target.getAttribute('value');
                        _this.ngCtrl.control.setValue(val);
                        _this.panelRef.classList.remove('f-area-show');
                        selectTextEl.innerHTML = e.target.innerHTML;
                    }
                }));
                this.panelRef.style.cssText = "\n        position:fixed;z-index: 100;\n        box-shadow: 0 2px 8px 0 rgba(0,0,0,.15);\n        border-radius: 3px;max-height:300px;overflow:auto;\n        transition: all 0.08s linear;";
                this.panelRef.querySelector('ul').style.cssText = "position:relative;min-width: 100%;border:none; box-shadow: none;";
                this.updateDisplayText();
                return { container: selectContainerEl };
            };
        /**
         * @private
         * @return {?}
         */
        SingleSelectDirective.prototype.updateDisplayText = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var li = _this.panelRef.querySelector("[value=\"" + _this.ngCtrl.value + "\"]");
                    _this.displayTextEl.innerHTML = li ? li.innerHTML : '';
                    if (_this.items && !_this.items.length) {
                        /** @type {?} */
                        var item = _this.items.find(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n.value == _this.ngCtrl.value; }));
                        if (item) {
                            _this.displayTextEl.innerHTML = item.label;
                        }
                    }
                    _this.displayTextEl.title = _this.displayTextEl.innerText;
                }));
            };
        /**
         * @private
         * @return {?}
         */
        SingleSelectDirective.prototype.updatePosition = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var ul = this.panelRef.querySelector('ul');
                if (this.position === 'above') {
                    ul.style.position = 'relative';
                    /** @type {?} */
                    var t = this.selectEl.offsetTop - ul.offsetHeight - 6;
                    /** @type {?} */
                    var top_1 = t + "px";
                    this.panelRef.style.top = top_1;
                    this.panelRef.style.transformOrigin = 'bottom';
                }
                else {
                    this.panelRef.style.top = 'auto';
                    if (this.container) {
                        this.panelRef.style.top = (this.panelRef.offsetTop - this.container.scrollTop) + 'px';
                    }
                }
                // if ( this.selectEl.offsetLeft) {
                //     this.panelRef.style.left = this.selectEl.offsetLeft + 'px';
                // }
                if (!this.width) {
                    this.panelRef.style.width = this.selectEl.offsetWidth + 'px';
                    ul.style.width = '100%';
                }
                else {
                    this.panelRef.style.width = this.width + 'px';
                }
            };
        SingleSelectDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[single-select]',
                        exportAs: 'singleSelect'
                    },] }
        ];
        /** @nocollapse */
        SingleSelectDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ElementRef },
                { type: core.Renderer2 }
            ];
        };
        SingleSelectDirective.propDecorators = {
            items: [{ type: core.Input }],
            panelRef: [{ type: core.Input }],
            width: [{ type: core.Input }],
            position: [{ type: core.Input }],
            container: [{ type: core.Input }]
        };
        return SingleSelectDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisFormsModule = /** @class */ (function () {
        function FarrisFormsModule() {
        }
        FarrisFormsModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RadioComponent,
                            RadioGroupComponent,
                            CheckboxComponent,
                            CheckboxGroupComponent,
                            RadioButtonComponent,
                            FarrisRadioGroupComponent,
                            FarrisCheckboxGroupComponent,
                            TextareaAutoSizeDirective,
                            TextareaZoomDirective,
                            ShortCutTabKeyDirective,
                            TextareaWordcountDirective,
                            InputAppendDirective,
                            TextareaCommentsDirective,
                            SingleListComponent,
                            SingleSelectDirective
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiCommon.FarrisCommonModule.forRoot(),
                            uiLocale.LocaleModule,
                        ],
                        exports: [
                            RadioComponent,
                            RadioGroupComponent,
                            CheckboxComponent,
                            CheckboxGroupComponent,
                            RadioButtonComponent,
                            FarrisRadioGroupComponent,
                            FarrisCheckboxGroupComponent,
                            TextareaAutoSizeDirective,
                            TextareaZoomDirective,
                            ShortCutTabKeyDirective,
                            TextareaWordcountDirective,
                            InputAppendDirective,
                            TextareaCommentsDirective,
                            SingleSelectDirective
                        ],
                        entryComponents: [
                            SingleListComponent
                        ],
                        providers: [uiCommon.IdService],
                    },] }
        ];
        return FarrisFormsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.TextareaAutoSizeDirective = TextareaAutoSizeDirective;
    exports.TextareaZoomDirective = TextareaZoomDirective;
    exports.ShortCutTabKeyDirective = ShortCutTabKeyDirective;
    exports.TextareaWordcountDirective = TextareaWordcountDirective;
    exports.InputAppendDirective = InputAppendDirective;
    exports.TextareaCommentsDirective = TextareaCommentsDirective;
    exports.SingleListComponent = SingleListComponent;
    exports.SingleSelectDirective = SingleSelectDirective;
    exports.FarrisFormsModule = FarrisFormsModule;
    exports.RadioComponent = RadioComponent;
    exports.RadioGroupComponent = RadioGroupComponent;
    exports.FarrisRadioGroupComponent = FarrisRadioGroupComponent;
    exports.RadioButtonComponent = RadioButtonComponent;
    exports.CheckboxGroupComponent = CheckboxGroupComponent;
    exports.CheckboxComponent = CheckboxComponent;
    exports.FarrisCheckboxGroupComponent = FarrisCheckboxGroupComponent;
    exports.CommentsHttpToken = CommentsHttpToken;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-forms.umd.js.map