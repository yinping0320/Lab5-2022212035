/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, forwardRef, Output, EventEmitter } from '@angular/core';
import { CheckboxGroupComponent } from './checkbox-group.component';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
export class CheckboxComponent {
    /**
     * @param {?} checkbox
     * @param {?} el
     */
    constructor(checkbox, el) {
        this.checkbox = checkbox;
        this.el = el;
        this.modelChange = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        () => { });
        this.controlTouch = (/**
         * @return {?}
         */
        () => { });
    }
    /* radio 原生name 用于多个radio单选使用 */
    /**
     * @return {?}
     */
    get name() {
        if (this.hasParent(this.el.nativeElement)) {
            return this.checkbox.name;
        }
        return '';
    }
    /* model */
    /**
     * @return {?}
     */
    get model() {
        if (this.hasParent(this.el.nativeElement)) {
            return this.checkbox.model.find((/**
             * @param {?} ele
             * @return {?}
             */
            ele => {
                return ele === this.label;
            }));
        }
        return this.nyModel;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this.nyModel = model;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /* 值传递 */
    /**
     * @return {?}
     */
    changeModelHandler() {
        // 父元素获取label  子元素再从父元素获取model
        if (this.hasParent(this.el.nativeElement)) {
            return this.checkbox.changeModel(this.label);
        }
        this.model = this.label;
        this.modelChange.emit(this.model);
        this.controlChange(this.label);
    }
    /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    hasParent(element) {
        return element.parentElement.classList.contains('farris-input-wrap');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.model = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
CheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-checkbox',
                template: "<label class=\"custom-control custom-checkbox\">\r\n  <input class=\"custom-control-input\" [name]=\"name\" [value]=\"label\" [ngModel]=\"model\"\r\n    (ngModelChange)=\"changeModelHandler()\" type=\"checkbox\" [disabled]=\"disabled\">\r\n  <span class=\"custom-control-label\">\r\n    <ng-content>\r\n    </ng-content>\r\n  </span>\r\n</label>",
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CheckboxComponent)),
                        multi: true,
                    }],
                styles: ['./checkbox.component.css']
            }] }
];
/** @nocollapse */
CheckboxComponent.ctorParameters = () => [
    { type: CheckboxGroupComponent },
    { type: ElementRef }
];
CheckboxComponent.propDecorators = {
    model: [{ type: Input }],
    label: [{ type: Input }],
    disabled: [{ type: Input }],
    modelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CheckboxComponent.prototype.label;
    /** @type {?} */
    CheckboxComponent.prototype.disabled;
    /** @type {?} */
    CheckboxComponent.prototype.modelChange;
    /** @type {?} */
    CheckboxComponent.prototype.nyModel;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.checkbox;
    /**
     * @type {?}
     * @private
     */
    CheckboxComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jaGVja2JveC9jaGVja2JveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNwRSxPQUFPLEVBQUUsaUJBQWlCLEVBQXdCLE1BQU0sZ0JBQWdCLENBQUM7QUFXekUsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFvQzVCLFlBQ1UsUUFBZ0MsRUFDaEMsRUFBYztRQURkLGFBQVEsR0FBUixRQUFRLENBQXdCO1FBQ2hDLE9BQUUsR0FBRixFQUFFLENBQVk7UUFKeEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBcUM5QixrQkFBYTs7O1FBQWEsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFBO1FBQ25DLGlCQUFZOzs7UUFBYSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUE7SUFsQ2QsQ0FBQzs7Ozs7SUFuQzVCLElBQUksSUFBSTtRQUNQLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7U0FDM0I7UUFDRCxPQUFPLEVBQUUsQ0FBQztJQUNaLENBQUM7Ozs7O0lBR0QsSUFDSSxLQUFLO1FBQ1AsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDekMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDNUIsQ0FBQyxFQUFDLENBQUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN0QixDQUFDOzs7OztJQUVELElBQUksS0FBSyxDQUFDLEtBQVU7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7SUFDdkIsQ0FBQzs7OztJQWlCRCxRQUFRO0lBQ1IsQ0FBQzs7Ozs7SUFHRCxrQkFBa0I7UUFDaEIsOEJBQThCO1FBQzlCLElBQUksSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ3pDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzlDO1FBQ0QsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDOzs7Ozs7SUFJRCxTQUFTLENBQUMsT0FBWTtRQUNwQixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ3ZFLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLEtBQVU7UUFDbkIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7SUFDckIsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFPO1FBQ3RCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBTztRQUN2QixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7WUFoRkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxpQkFBaUI7Z0JBQzNCLHFXQUF3QztnQkFDeEMsU0FBUyxFQUFFLENBQUM7d0JBQ1YsT0FBTyxFQUFFLGlCQUFpQjt3QkFDMUIsV0FBVyxFQUFFLFVBQVU7Ozt3QkFBQyxHQUFHLEVBQUUsQ0FBQyxpQkFBaUIsRUFBQzt3QkFDaEQsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQzt5QkFDTywwQkFBMEI7YUFDcEM7Ozs7WUFYUSxzQkFBc0I7WUFESSxVQUFVOzs7b0JBd0IxQyxLQUFLO29CQWVMLEtBQUs7dUJBSUwsS0FBSzswQkFHTCxNQUFNOzs7O0lBUFAsa0NBQ1c7O0lBR1gscUNBQ2tCOztJQUVsQix3Q0FDc0M7O0lBQ3RDLG9DQUFhOzs7OztJQW9DYiwwQ0FBMkM7Ozs7O0lBQzNDLHlDQUEwQzs7Ozs7SUFuQ3hDLHFDQUF3Qzs7Ozs7SUFDeEMsK0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBFbGVtZW50UmVmLCBmb3J3YXJkUmVmLCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDaGVja2JveEdyb3VwQ29tcG9uZW50IH0gZnJvbSAnLi9jaGVja2JveC1ncm91cC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZmFycmlzLWNoZWNrYm94JyxcclxuICB0ZW1wbGF0ZVVybDogJy4vY2hlY2tib3guY29tcG9uZW50Lmh0bWwnLFxyXG4gIHByb3ZpZGVyczogW3tcclxuICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxyXG4gICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gQ2hlY2tib3hDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWUsXHJcbiAgfV0sXHJcbiAgc3R5bGVzOiBbJy4vY2hlY2tib3guY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDaGVja2JveENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xyXG5cclxuICAgLyogcmFkaW8g5Y6f55SfbmFtZSDnlKjkuo7lpJrkuKpyYWRpb+WNlemAieS9v+eUqCAqL1xyXG4gICBnZXQgbmFtZSgpIHtcclxuICAgIGlmICh0aGlzLmhhc1BhcmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrYm94Lm5hbWU7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG5cclxuICAvKiBtb2RlbCAqL1xyXG4gIEBJbnB1dCgpXHJcbiAgZ2V0IG1vZGVsKCkge1xyXG4gICAgaWYgKHRoaXMuaGFzUGFyZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuY2hlY2tib3gubW9kZWwuZmluZChlbGUgPT4ge1xyXG4gICAgICAgIHJldHVybiBlbGUgPT09IHRoaXMubGFiZWw7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMubnlNb2RlbDtcclxuICB9XHJcblxyXG4gIHNldCBtb2RlbChtb2RlbDogYW55KSB7XHJcbiAgICB0aGlzLm55TW9kZWwgPSBtb2RlbDtcclxuICB9XHJcblxyXG4gIC8qIGNoZWNrYm945YC8ICovXHJcbiAgQElucHV0KClcclxuICBsYWJlbDogYW55O1xyXG5cclxuICAvKiDnpoHnlKggKi9cclxuICBASW5wdXQoKVxyXG4gIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICBAT3V0cHV0KClcclxuICBtb2RlbENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIG55TW9kZWw6IGFueTtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgY2hlY2tib3g6IENoZWNrYm94R3JvdXBDb21wb25lbnQsXHJcbiAgICBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgbmdPbkluaXQoKSB7XHJcbiAgfVxyXG5cclxuICAvKiDlgLzkvKDpgJIgKi9cclxuICBjaGFuZ2VNb2RlbEhhbmRsZXIoKSB7XHJcbiAgICAvLyDniLblhYPntKDojrflj5ZsYWJlbCAg5a2Q5YWD57Sg5YaN5LuO54i25YWD57Sg6I635Y+WbW9kZWxcclxuICAgIGlmICh0aGlzLmhhc1BhcmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNoZWNrYm94LmNoYW5nZU1vZGVsKHRoaXMubGFiZWwpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tb2RlbCA9IHRoaXMubGFiZWw7XHJcbiAgICB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5tb2RlbCk7XHJcbiAgICB0aGlzLmNvbnRyb2xDaGFuZ2UodGhpcy5sYWJlbCk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyog5piv5ZCm5a2Y5Zyo54i25YWD57SgICDlrZjlnKjljbPljZXpgInnu4QqL1xyXG4gIGhhc1BhcmVudChlbGVtZW50OiBhbnkpIHtcclxuICAgIHJldHVybiBlbGVtZW50LnBhcmVudEVsZW1lbnQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYXJyaXMtaW5wdXQtd3JhcCcpO1xyXG4gIH1cclxuXHJcbiAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLm1vZGVsID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgIHRoaXMuY29udHJvbENoYW5nZSA9IGZuO1xyXG4gIH1cclxuXHJcbiAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSk6IHZvaWQge1xyXG4gICAgdGhpcy5jb250cm9sVG91Y2ggPSBmbjtcclxuICB9XHJcbiAgcHJpdmF0ZSBjb250cm9sQ2hhbmdlOiBGdW5jdGlvbiA9ICgpID0+IHsgfVxyXG4gIHByaXZhdGUgY29udHJvbFRvdWNoOiBGdW5jdGlvbiA9ICgpID0+IHsgfVxyXG5cclxufVxyXG4iXX0=