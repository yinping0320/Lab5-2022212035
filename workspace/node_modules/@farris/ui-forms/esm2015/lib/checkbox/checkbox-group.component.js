/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IdService } from '@farris/ui-common';
export class CheckboxGroupComponent {
    /**
     * @param {?} idSer
     */
    constructor(idSer) {
        this.idSer = idSer;
        /* 初始化 checkbox 的值 */
        this.model = [];
        /*  */
        this.modelChange = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        () => { });
        this.controlTouch = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.idSer.generate();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    changeModel(value) {
        /** @type {?} */
        const index = this.model.findIndex((/**
         * @param {?} ele
         * @return {?}
         */
        ele => {
            return ele === value;
        }));
        // 如果已经选中  则设置为不选中
        if (index > -1) {
            this.model.splice(index, 1);
            return this.modelChange.emit(this.model);
        }
        // 如果没有选中  设置为选中
        this.model.push(value);
        // control的值设置为逗号分隔的字符串  便于存储和传递
        this.controlChange(this.model.join());
        this.modelChange.emit(this.model);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.model = value;
        this.changeModel(this.model);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
CheckboxGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-checkbox-group',
                template: `
    <div class="farris-input-wrap" [class.farris-checkradio-hor]="horizontal">
      <ng-content></ng-content>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => CheckboxGroupComponent)),
                        multi: true,
                    }]
            }] }
];
/** @nocollapse */
CheckboxGroupComponent.ctorParameters = () => [
    { type: IdService }
];
CheckboxGroupComponent.propDecorators = {
    model: [{ type: Input }],
    name: [{ type: Input }],
    horizontal: [{ type: Input }],
    modelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CheckboxGroupComponent.prototype.model;
    /** @type {?} */
    CheckboxGroupComponent.prototype.name;
    /** @type {?} */
    CheckboxGroupComponent.prototype.horizontal;
    /** @type {?} */
    CheckboxGroupComponent.prototype.modelChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxGroupComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    CheckboxGroupComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    CheckboxGroupComponent.prototype.idSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tib3gtZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jaGVja2JveC9jaGVja2JveC1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNGLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFlOUMsTUFBTSxPQUFPLHNCQUFzQjs7OztJQWtCL0IsWUFBb0IsS0FBZ0I7UUFBaEIsVUFBSyxHQUFMLEtBQUssQ0FBVzs7UUFkcEMsVUFBSyxHQUFHLEVBQUUsQ0FBQzs7UUFZWCxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFxQzlCLGtCQUFhOzs7UUFBYSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUE7UUFDbkMsaUJBQVk7OztRQUFhLEdBQUcsRUFBRSxHQUFHLENBQUMsRUFBQTtJQW5DMUMsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBVTs7Y0FDWixLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTOzs7O1FBQUMsR0FBRyxDQUFDLEVBQUU7WUFDckMsT0FBTyxHQUFHLEtBQUssS0FBSyxDQUFDO1FBQ3pCLENBQUMsRUFBQztRQUNGLGtCQUFrQjtRQUNsQixJQUFJLEtBQUssR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztZQUM1QixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QztRQUNELGdCQUFnQjtRQUNoQixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixnQ0FBZ0M7UUFDaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7Ozs7O0lBQ0QsVUFBVSxDQUFDLEtBQVU7UUFDakIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUE7UUFDbEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxnQkFBZ0IsQ0FBQyxFQUFZO1FBQ3pCLElBQUksQ0FBQyxhQUFhLEdBQUcsRUFBRSxDQUFBO0lBQzNCLENBQUM7Ozs7O0lBRUQsaUJBQWlCLENBQUMsRUFBWTtRQUMxQixJQUFJLENBQUMsWUFBWSxHQUFHLEVBQUUsQ0FBQTtJQUMxQixDQUFDOzs7WUFqRUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSx1QkFBdUI7Z0JBQ2pDLFFBQVEsRUFBRTs7OztHQUlYO2dCQUNDLFNBQVMsRUFBRSxDQUFDO3dCQUNSLE9BQU8sRUFBRSxpQkFBaUI7d0JBQzFCLFdBQVcsRUFBRSxVQUFVOzs7d0JBQUMsR0FBRyxFQUFFLENBQUMsc0JBQXNCLEVBQUM7d0JBQ3JELEtBQUssRUFBRSxJQUFJO3FCQUNkLENBQUM7YUFFTDs7OztZQWRRLFNBQVM7OztvQkFrQmIsS0FBSzttQkFJTCxLQUFLO3lCQUlMLEtBQUs7MEJBSUwsTUFBTTs7OztJQVpQLHVDQUNXOztJQUdYLHNDQUNhOztJQUdiLDRDQUNvQjs7SUFHcEIsNkNBQ3NDOzs7OztJQXFDdEMsK0NBQTJDOzs7OztJQUMzQyw4Q0FBMEM7Ozs7O0lBcEM5Qix1Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIE91dHB1dCwgRXZlbnRFbWl0dGVyLCBmb3J3YXJkUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmFycmlzLWNoZWNrYm94LWdyb3VwJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiZmFycmlzLWlucHV0LXdyYXBcIiBbY2xhc3MuZmFycmlzLWNoZWNrcmFkaW8taG9yXT1cImhvcml6b250YWxcIj5cclxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICAgIHByb3ZpZGVyczogW3tcclxuICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBDaGVja2JveEdyb3VwQ29tcG9uZW50KSxcclxuICAgICAgICBtdWx0aTogdHJ1ZSxcclxuICAgIH1dLFxyXG4gICAgc3R5bGVzOiBbXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIENoZWNrYm94R3JvdXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIENvbnRyb2xWYWx1ZUFjY2Vzc29yIHtcclxuXHJcbiAgICAvKiDliJ3lp4vljJYgY2hlY2tib3gg55qE5YC8ICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgbW9kZWwgPSBbXTtcclxuXHJcbiAgICAvKiDorr7nva7pu5jorqRuYW1l5YC8ICovXHJcbiAgICBASW5wdXQoKVxyXG4gICAgbmFtZTogc3RyaW5nO1xyXG5cclxuICAgIC8qIOaOp+S7tuawtOW5s+aOkuWIlyAqL1xyXG4gICAgQElucHV0KClcclxuICAgIGhvcml6b250YWw6IGJvb2xlYW47XHJcblxyXG4gICAgLyogICovXHJcbiAgICBAT3V0cHV0KClcclxuICAgIG1vZGVsQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpZFNlcjogSWRTZXJ2aWNlKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5pZFNlci5nZW5lcmF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZU1vZGVsKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMubW9kZWwuZmluZEluZGV4KGVsZSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGUgPT09IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIOWmguaenOW3sue7j+mAieS4rSAg5YiZ6K6+572u5Li65LiN6YCJ5LitXHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyDlpoLmnpzmsqHmnInpgInkuK0gIOiuvue9ruS4uumAieS4rVxyXG4gICAgICAgIHRoaXMubW9kZWwucHVzaCh2YWx1ZSk7XHJcbiAgICAgICAgLy8gY29udHJvbOeahOWAvOiuvue9ruS4uumAl+WPt+WIhumalOeahOWtl+espuS4siAg5L6/5LqO5a2Y5YKo5ZKM5Lyg6YCSXHJcbiAgICAgICAgdGhpcy5jb250cm9sQ2hhbmdlKHRoaXMubW9kZWwuam9pbigpKTtcclxuICAgICAgICB0aGlzLm1vZGVsQ2hhbmdlLmVtaXQodGhpcy5tb2RlbCk7XHJcbiAgICB9XHJcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm1vZGVsID0gdmFsdWVcclxuICAgICAgICB0aGlzLmNoYW5nZU1vZGVsKHRoaXMubW9kZWwpXHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xDaGFuZ2UgPSBmblxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29udHJvbFRvdWNoID0gZm5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnRyb2xDaGFuZ2U6IEZ1bmN0aW9uID0gKCkgPT4geyB9XHJcbiAgICBwcml2YXRlIGNvbnRyb2xUb3VjaDogRnVuY3Rpb24gPSAoKSA9PiB7IH1cclxuXHJcbn1cclxuIl19