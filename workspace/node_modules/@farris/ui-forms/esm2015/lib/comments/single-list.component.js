/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Injector, Input, Output, ViewChild } from '@angular/core';
export class SingleListComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.showButtons = true;
        this.buttons = [];
        this.data = [];
        this.textField = '';
        this.maxItems = 10;
        this.emptyDataMsg = '暂无数据';
        this.itemClick = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} items
     * @return {?}
     */
    loadData(items) {
        this.data = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} rowObj
     * @return {?}
     */
    formatData(rowObj) {
        return this.formatter(rowObj);
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onItemClick($event, item) {
        this.itemClick.emit({ data: item, evnet: $event });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveItem(index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
}
SingleListComponent.decorators = [
    { type: Component, args: [{
                selector: 'single-list',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%;height:100%;padding-top: 5px; \" #itemsContainer>\r\n    <!-- <div class=\"header\"></div> -->\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;flex:1;  max-height: 250px;\">\r\n        <ul class=\"list-group list-group-flush p-0\"  [class.h-100]=\"!data || !data.length\">\r\n            <li class=\"list-group-item list-group-item-action\" style=\"cursor: pointer;\" [class.active]=\"activeIndex === i\" *ngFor=\"let item of data; index as i\" (click)=\"onItemClick($event, item)\">\r\n                <span style=\"overflow: hidden;text-overflow: ellipsis;\" title=\" {{item[textField]}}\" *ngIf=\"!formatter\">{{ item[textField] }}</span> \r\n                <span style=\"overflow: hidden;text-overflow: ellipsis;\" *ngIf=\"formatter\" [innerHTML]=\"formatData(item) | safe:'html'\"></span>\r\n            </li>\r\n\r\n            <li class=\"norecord p-2\" *ngIf=\"!data || !data.length\" style=\"color: #848c9a;\">\r\n                {{ emptyDataMsg }}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"more d-flex\" *ngIf=\"showButtons\" style=\"height: 36px;border-top: 1px solid #dedede;justify-content: center;align-items: center;\">\r\n        <button class=\"btn btn-link\" *ngFor=\"let btn of buttons\" (click)=\"btn.handler($event)\"> \r\n            <span style=\"font-size: 13px;\" class=\"{{btn.iconCls}}\" *ngIf=\"btn.iconCls\"></span>\r\n            {{ btn.text }}\r\n        </button>\r\n    </div>\r\n     <!-- <div class=\"footer\"></div> -->\r\n</div>"
            }] }
];
/** @nocollapse */
SingleListComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SingleListComponent.propDecorators = {
    showButtons: [{ type: Input }],
    buttons: [{ type: Input }],
    data: [{ type: Input }],
    textField: [{ type: Input }],
    formatter: [{ type: Input }],
    maxItems: [{ type: Input }],
    emptyDataMsg: [{ type: Input }],
    itemClick: [{ type: Output }],
    itemsContainer: [{ type: ViewChild, args: ['itemsContainer',] }],
    onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SingleListComponent.prototype.showButtons;
    /** @type {?} */
    SingleListComponent.prototype.buttons;
    /** @type {?} */
    SingleListComponent.prototype.data;
    /** @type {?} */
    SingleListComponent.prototype.textField;
    /** @type {?} */
    SingleListComponent.prototype.formatter;
    /** @type {?} */
    SingleListComponent.prototype.maxItems;
    /** @type {?} */
    SingleListComponent.prototype.emptyDataMsg;
    /** @type {?} */
    SingleListComponent.prototype.itemClick;
    /** @type {?} */
    SingleListComponent.prototype.itemsContainer;
    /** @type {?} */
    SingleListComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    SingleListComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SingleListComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2luZ2xlLWxpc3QuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9jb21tZW50cy9zaW5nbGUtbGlzdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBZSxZQUFZLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBTzlKLE1BQU0sT0FBTyxtQkFBbUI7Ozs7O0lBZ0I1QixZQUFvQixRQUFrQixFQUFVLEdBQXNCO1FBQWxELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQWQ3RCxnQkFBVyxHQUFHLElBQUksQ0FBQztRQUNuQixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsU0FBSSxHQUFlLEVBQUUsQ0FBQztRQUN0QixjQUFTLEdBQVcsRUFBRSxDQUFDO1FBRXZCLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxpQkFBWSxHQUFHLE1BQU0sQ0FBQztRQUVyQixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUl6QyxnQkFBVyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBRXlELENBQUM7Ozs7O0lBRzNFLE9BQU8sQ0FBQyxNQUFrQjtRQUN0QixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7OztJQUVELFFBQVEsS0FBSyxDQUFDOzs7OztJQUVkLFFBQVEsQ0FBQyxLQUFVO1FBQ2YsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUM7UUFFbEIsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUM1QjtJQUNMLENBQUM7Ozs7O0lBRUQsVUFBVSxDQUFDLE1BQVc7UUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxNQUFNLEVBQUUsSUFBSTtRQUNwQixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7SUFDckQsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsS0FBYTtRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQzs7O1lBbkRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsb2pEQUEyQzthQUM5Qzs7OztZQUwyRixRQUFRO1lBQTNGLGlCQUFpQjs7OzBCQVNyQixLQUFLO3NCQUNMLEtBQUs7bUJBQ0wsS0FBSzt3QkFDTCxLQUFLO3dCQUNMLEtBQUs7dUJBQ0wsS0FBSzsyQkFDTCxLQUFLO3dCQUVMLE1BQU07NkJBRU4sU0FBUyxTQUFDLGdCQUFnQjtzQkFNMUIsWUFBWSxTQUFDLFdBQVcsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7OztJQWhCckMsMENBQTRCOztJQUM1QixzQ0FBc0I7O0lBQ3RCLG1DQUErQjs7SUFDL0Isd0NBQWdDOztJQUNoQyx3Q0FBNEM7O0lBQzVDLHVDQUF1Qjs7SUFDdkIsMkNBQStCOztJQUUvQix3Q0FBeUM7O0lBRXpDLDZDQUE2RDs7SUFFN0QsMENBQWlCOzs7OztJQUVMLHVDQUEwQjs7Ozs7SUFBRSxrQ0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NpbmdsZS1saXN0JyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi9zaW5nbGUtbGlzdC5jb21wb25lbnQuaHRtbCdcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTaW5nbGVMaXN0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBzaG93QnV0dG9ucyA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBidXR0b25zID0gW107XHJcbiAgICBASW5wdXQoKSBkYXRhOiBBcnJheTxhbnk+ID0gW107XHJcbiAgICBASW5wdXQoKSB0ZXh0RmllbGQ6IHN0cmluZyA9ICcnO1xyXG4gICAgQElucHV0KCkgZm9ybWF0dGVyOiAocm93T2JqOiBhbnkpID0+IHN0cmluZztcclxuICAgIEBJbnB1dCgpIG1heEl0ZW1zID0gMTA7XHJcbiAgICBASW5wdXQoKSBlbXB0eURhdGFNc2cgPSAn5pqC5peg5pWw5o2uJztcclxuXHJcbiAgICBAT3V0cHV0KCkgaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2l0ZW1zQ29udGFpbmVyJykgaXRlbXNDb250YWluZXI6IEVsZW1lbnRSZWY8YW55PjtcclxuXHJcbiAgICBhY3RpdmVJbmRleCA9IC0xO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICBvbkNsaWNrKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICAgIGxvYWREYXRhKGl0ZW1zOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBpdGVtcztcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmNkclsnZGVzdHJveWVkJ10pIHtcclxuICAgICAgICAgICAgdGhpcy5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXREYXRhKHJvd09iajogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyKHJvd09iaik7XHJcbiAgICB9XHJcblxyXG4gICAgb25JdGVtQ2xpY2soJGV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2suZW1pdCh7ZGF0YTogaXRlbSwgZXZuZXQ6ICRldmVudH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZUl0ZW0oaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleDtcclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19