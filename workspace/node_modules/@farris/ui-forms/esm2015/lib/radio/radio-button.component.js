/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef, Optional, ElementRef, ViewEncapsulation } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { RadioGroupComponent } from './radio-group.component';
import { HostBinding } from '@angular/core';
export class RadioButtonComponent {
    /**
     * @param {?} radioGroup
     * @param {?} el
     */
    constructor(radioGroup, el) {
        this.radioGroup = radioGroup;
        this.el = el;
        /* radio 原生name 用于多个radio单选使用 */
        // get name() {
        // }
        this.name = '';
        /* 按钮类型 */
        this.type = 'secondary';
        /* radio 值 */
        this.label = '';
        this.modelChange = new EventEmitter();
        this.controlChange = (/**
         * @return {?}
         */
        () => { });
        this.controlTouch = (/**
         * @return {?}
         */
        () => { });
    }
    /* radio 值 */
    /**
     * @return {?}
     */
    get model() {
        if (this.hasParent(this.el.nativeElement)) {
            return this.radioGroup.model;
        }
        return this.nyModel;
    }
    /**
     * @param {?} model
     * @return {?}
     */
    set model(model) {
        this.nyModel = model;
    }
    /**
     * @return {?}
     */
    get farrisRadioButtonClass() { return true; }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.hasParent(this.el.nativeElement) ? this.radioGroup.name : '';
    }
    /**
     * @return {?}
     */
    isGroupModel() {
        return this.label === this.radioGroup.model;
    }
    /**
     * @return {?}
     */
    changeModelHandler() {
        // 父元素获取label  子元素再从父元素获取model
        if (this.hasParent(this.el.nativeElement)) {
            return this.radioGroup.changeModel(this.label);
        }
        this.model = this.label;
        this.modelChange.emit(this.model);
        this.controlChange(this.label);
    }
    /* 是否存在父元素  存在即单选组*/
    /**
     * @param {?} element
     * @return {?}
     */
    hasParent(element) {
        return element.parentElement.classList.contains('farris-input-wrap') || element.parentElement.classList.contains('btn-group');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.model = value;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
RadioButtonComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-radio-button',
                template: `
    <label [class]="'btn btn-'+type" [class.active]="isGroupModel()" [class.disabled]="disabled">
        <input class="custom-control-input" [name]="name" [value]="label"
        [ngModel]="model" (ngModelChange)="changeModelHandler()" type="radio" [disabled]="disabled">
          <ng-content>
          </ng-content>
    </label>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RadioButtonComponent)),
                        multi: true,
                    }],
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .farris-radio-button>.btn{
            margin-left:-1px
          }
          .farris-radio-button>.btn.active, .farris-radio-button>.btn:hover{
            position: relative;
          }
      `]
            }] }
];
/** @nocollapse */
RadioButtonComponent.ctorParameters = () => [
    { type: RadioGroupComponent, decorators: [{ type: Optional }] },
    { type: ElementRef }
];
RadioButtonComponent.propDecorators = {
    type: [{ type: Input }],
    model: [{ type: Input }],
    id: [{ type: Input }],
    label: [{ type: Input }],
    disabled: [{ type: Input }],
    modelChange: [{ type: Output }],
    farrisRadioButtonClass: [{ type: HostBinding, args: ['class.farris-radio-button',] }]
};
if (false) {
    /** @type {?} */
    RadioButtonComponent.prototype.name;
    /** @type {?} */
    RadioButtonComponent.prototype.type;
    /** @type {?} */
    RadioButtonComponent.prototype.id;
    /** @type {?} */
    RadioButtonComponent.prototype.label;
    /** @type {?} */
    RadioButtonComponent.prototype.disabled;
    /** @type {?} */
    RadioButtonComponent.prototype.nyModel;
    /** @type {?} */
    RadioButtonComponent.prototype.modelChange;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.controlTouch;
    /** @type {?} */
    RadioButtonComponent.prototype.radioGroup;
    /**
     * @type {?}
     * @private
     */
    RadioButtonComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,