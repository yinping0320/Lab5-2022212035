/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, forwardRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IdService } from '@farris/ui-common';
export class RadioGroupComponent {
    /**
     * @param {?} idSer
     */
    constructor(idSer) {
        this.idSer = idSer;
        this.modelChange = new EventEmitter();
        // tslint:disable-next-line:ban-types
        this.subscriber = [];
        this.controlChange = (/**
         * @return {?}
         */
        () => { });
        this.controlTouch = (/**
         * @return {?}
         */
        () => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.name = this.idSer.generate().replace(/-/g, '_');
    }
    /**
     * @param {?} value
     * @return {?}
     */
    changeModel(value) {
        this.model = value;
        this.modelChange.emit(this.model);
        this.controlChange(value);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.model = value;
        this.changeModel(this.model);
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.controlChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.controlTouch = fn;
    }
}
RadioGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-radio-group',
                template: `
    <div class="farris-radio-group btn-group"
    [class.farris-input-wrap]="type!=='button'"
    [class.btn-group-toggle]="type==='button'"
    [class.farris-checkradio-hor]="horizontal">
      <ng-content></ng-content>
    </div>
  `,
                providers: [{
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => RadioGroupComponent)),
                        multi: true,
                    }],
                styles: [`
    `]
            }] }
];
/** @nocollapse */
RadioGroupComponent.ctorParameters = () => [
    { type: IdService }
];
RadioGroupComponent.propDecorators = {
    type: [{ type: Input }],
    model: [{ type: Input }],
    name: [{ type: Input }],
    horizontal: [{ type: Input }],
    modelChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RadioGroupComponent.prototype.type;
    /** @type {?} */
    RadioGroupComponent.prototype.model;
    /** @type {?} */
    RadioGroupComponent.prototype.name;
    /** @type {?} */
    RadioGroupComponent.prototype.horizontal;
    /** @type {?} */
    RadioGroupComponent.prototype.modelChange;
    /** @type {?} */
    RadioGroupComponent.prototype.subscriber;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.controlChange;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.controlTouch;
    /**
     * @type {?}
     * @private
     */
    RadioGroupComponent.prototype.idSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1mb3Jtcy8iLCJzb3VyY2VzIjpbImxpYi9yYWRpby9yYWRpby1ncm91cC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsVUFBVSxFQUFlLE1BQU0sZUFBZSxDQUFDO0FBQ3hHLE9BQU8sRUFBRSxpQkFBaUIsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFtQjlDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFnQjVCLFlBQW9CLEtBQWdCO1FBQWhCLFVBQUssR0FBTCxLQUFLLENBQVc7UUFMMUIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDOztRQUdoRCxlQUFVLEdBQWUsRUFBRSxDQUFDO1FBNEJwQixrQkFBYTs7O1FBQWEsR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFBO1FBQ25DLGlCQUFZOzs7UUFBYSxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUE7SUExQjFDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDekQsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBVTtRQUNsQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM5QixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ2pCLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBQ25CLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsRUFBWTtRQUN6QixJQUFJLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQTtJQUMzQixDQUFDOzs7OztJQUVELGlCQUFpQixDQUFDLEVBQVk7UUFDMUIsSUFBSSxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUE7SUFDMUIsQ0FBQzs7O1lBMURKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsb0JBQW9CO2dCQUM5QixRQUFRLEVBQUU7Ozs7Ozs7R0FPWDtnQkFDQyxTQUFTLEVBQUUsQ0FBQzt3QkFDUixPQUFPLEVBQUUsaUJBQWlCO3dCQUMxQixXQUFXLEVBQUUsVUFBVTs7O3dCQUFDLEdBQUcsRUFBRSxDQUFDLG1CQUFtQixFQUFDO3dCQUNsRCxLQUFLLEVBQUUsSUFBSTtxQkFDZCxDQUFDO3lCQUNPO0tBQ1I7YUFDSjs7OztZQWxCUSxTQUFTOzs7bUJBcUJiLEtBQUs7b0JBR0wsS0FBSzttQkFFTCxLQUFLO3lCQUVMLEtBQUs7MEJBRUwsTUFBTTs7OztJQVRQLG1DQUFzQjs7SUFHdEIsb0NBQW9COztJQUVwQixtQ0FBc0I7O0lBRXRCLHlDQUE2Qjs7SUFFN0IsMENBQWdEOztJQUdoRCx5Q0FBNEI7Ozs7O0lBNEI1Qiw0Q0FBMkM7Ozs7O0lBQzNDLDJDQUEwQzs7Ozs7SUEzQjlCLG9DQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTFVFX0FDQ0VTU09SLCBDb250cm9sVmFsdWVBY2Nlc3NvciB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgSWRTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmFycmlzLXJhZGlvLWdyb3VwJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IGNsYXNzPVwiZmFycmlzLXJhZGlvLWdyb3VwIGJ0bi1ncm91cFwiXHJcbiAgICBbY2xhc3MuZmFycmlzLWlucHV0LXdyYXBdPVwidHlwZSE9PSdidXR0b24nXCJcclxuICAgIFtjbGFzcy5idG4tZ3JvdXAtdG9nZ2xlXT1cInR5cGU9PT0nYnV0dG9uJ1wiXHJcbiAgICBbY2xhc3MuZmFycmlzLWNoZWNrcmFkaW8taG9yXT1cImhvcml6b250YWxcIj5cclxuICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxyXG4gICAgPC9kaXY+XHJcbiAgYCxcclxuICAgIHByb3ZpZGVyczogW3tcclxuICAgICAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBSYWRpb0dyb3VwQ29tcG9uZW50KSxcclxuICAgICAgICBtdWx0aTogdHJ1ZSxcclxuICAgIH1dLFxyXG4gICAgc3R5bGVzOiBbYFxyXG4gICAgYF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSYWRpb0dyb3VwQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBDb250cm9sVmFsdWVBY2Nlc3NvciB7XHJcbiAgICAvKiByYWRpbyDnsbvlnosgKi9cclxuICAgIEBJbnB1dCgpIHR5cGU6IHN0cmluZztcclxuXHJcbiAgICAvKiDliJ3lp4vljJYgcmFkaW8g55qE5YC8ICovXHJcbiAgICBASW5wdXQoKSBtb2RlbDogYW55O1xyXG5cclxuICAgIEBJbnB1dCgpIG5hbWU6IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBob3Jpem9udGFsOiBib29sZWFuO1xyXG5cclxuICAgIEBPdXRwdXQoKSBtb2RlbENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpiYW4tdHlwZXNcclxuICAgIHN1YnNjcmliZXI6IEZ1bmN0aW9uW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGlkU2VyOiBJZFNlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLm5hbWUgPSB0aGlzLmlkU2VyLmdlbmVyYXRlKCkucmVwbGFjZSgvLS9nLCAnXycpO1xyXG4gICAgfVxyXG5cclxuICAgIGNoYW5nZU1vZGVsKHZhbHVlOiBhbnkpIHtcclxuICAgICAgICB0aGlzLm1vZGVsID0gdmFsdWU7XHJcbiAgICAgICAgdGhpcy5tb2RlbENoYW5nZS5lbWl0KHRoaXMubW9kZWwpO1xyXG4gICAgICAgIHRoaXMuY29udHJvbENoYW5nZSh2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5tb2RlbCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuY2hhbmdlTW9kZWwodGhpcy5tb2RlbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmNvbnRyb2xDaGFuZ2UgPSBmblxyXG4gICAgfVxyXG5cclxuICAgIHJlZ2lzdGVyT25Ub3VjaGVkKGZuOiBGdW5jdGlvbik6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuY29udHJvbFRvdWNoID0gZm5cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbnRyb2xDaGFuZ2U6IEZ1bmN0aW9uID0gKCkgPT4geyB9XHJcbiAgICBwcml2YXRlIGNvbnRyb2xUb3VjaDogRnVuY3Rpb24gPSAoKSA9PiB7IH1cclxuXHJcbn1cclxuIl19