/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { NgControl } from '@angular/forms';
import { OverLayHiddenService } from '@farris/ui-common';
import { of } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
export class SingleSelectDirective {
    /**
     * @param {?} injector
     * @param {?} elRef
     * @param {?} render
     */
    constructor(injector, elRef, render) {
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.items = [];
        this.position = 'below';
        this.container = null;
        this.selectEl = null;
        this.overlayHandler = null;
        this.displayTextEl = null;
        this.ngZone = null;
        this.beforeShow = null;
        this.overlaySer = this.injector.get(OverLayHiddenService, new OverLayHiddenService());
        this.ngZone = this.injector.get(NgZone, null);
        if (this.overlaySer) {
            if (this.ngZone) {
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    this.registerMouseEvent();
                }));
            }
            else {
                this.registerMouseEvent();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerMouseEvent() {
        this.overlayHandler = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.panelRef.classList.contains('f-area-show')) {
                return;
            }
            if (this.panelRef.contains(e.target)) {
                return;
            }
            if (this.selectEl.contains(e.target)) {
                return;
            }
            this.panelRef.classList.remove('f-area-show');
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngCtrl = this.injector.get(NgControl);
        if (this.ngCtrl) {
            this.ngCtrl.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            (v) => {
                this.updateDisplayText();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        const { container } = this.createMySelect();
        this.selectEl = container;
        this.elRef.nativeElement.style.display = 'none';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlayHandler) {
            this.overlayHandler();
        }
    }
    /**
     * @private
     * @return {?}
     */
    createMySelect() {
        /** @type {?} */
        const selectContainerEl = document.createElement('div');
        selectContainerEl.className = 'input-group f-cmp-inputgroup';
        if (this.width) {
            selectContainerEl.style.width = `${this.width}px`;
        }
        selectContainerEl.style.userSelect = 'none';
        selectContainerEl.style.overflow = 'hidden';
        /** @type {?} */
        const selectTextEl = document.createElement('div');
        selectTextEl.className = 'form-control f-utils-fill text-left px-1 d-flex';
        selectTextEl.style.alignItems = 'center';
        selectTextEl.style.whiteSpace = 'nowrap';
        this.displayTextEl = selectTextEl;
        /** @type {?} */
        const selectArrowEl = document.createElement('div');
        selectArrowEl.className = 'input-group-append';
        selectArrowEl.innerHTML = `<span class="input-group-text"><i class="f-icon f-icon-arrow-s"></i></span>`;
        selectContainerEl.appendChild(selectTextEl);
        selectContainerEl.appendChild(selectArrowEl);
        this.elRef.nativeElement.after(selectContainerEl);
        this.render.listen(selectContainerEl, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.panelRef.classList.contains('f-area-show')) {
                this.panelRef.classList.remove('f-area-show');
                return;
            }
            if (!this.beforeShow) {
                this.beforeShow = (/**
                 * @return {?}
                 */
                () => {
                    return of(true);
                });
            }
            this.updatePosition();
            this.beforeShow({ instance: this }).pipe(debounceTime(10)).subscribe((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                if (r) {
                    this.panelRef.classList.add('f-area-show');
                }
            }));
        }));
        this.render.listen(this.panelRef, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target.nodeName === 'LI') {
                /** @type {?} */
                const val = e.target.getAttribute('value');
                this.ngCtrl.control.setValue(val);
                this.panelRef.classList.remove('f-area-show');
                selectTextEl.innerHTML = e.target.innerHTML;
            }
        }));
        this.panelRef.style.cssText = `
        position:fixed;z-index: 100;
        box-shadow: 0 2px 8px 0 rgba(0,0,0,.15);
        border-radius: 3px;max-height:300px;overflow:auto;
        transition: all 0.08s linear;`;
        this.panelRef.querySelector('ul').style.cssText = `position:relative;min-width: 100%;border:none; box-shadow: none;`;
        this.updateDisplayText();
        return { container: selectContainerEl };
    }
    /**
     * @private
     * @return {?}
     */
    updateDisplayText() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const li = this.panelRef.querySelector(`[value="${this.ngCtrl.value}"]`);
            this.displayTextEl.innerHTML = li ? li.innerHTML : '';
            if (this.items && !this.items.length) {
                /** @type {?} */
                const item = this.items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.value == this.ngCtrl.value));
                if (item) {
                    this.displayTextEl.innerHTML = item.label;
                }
            }
            this.displayTextEl.title = this.displayTextEl.innerText;
        }));
    }
    /**
     * @private
     * @return {?}
     */
    updatePosition() {
        /** @type {?} */
        const ul = this.panelRef.querySelector('ul');
        if (this.position === 'above') {
            ul.style.position = 'relative';
            /** @type {?} */
            const t = this.selectEl.offsetTop - ul.offsetHeight - 6;
            /** @type {?} */
            const top = `${t}px`;
            this.panelRef.style.top = top;
            this.panelRef.style.transformOrigin = 'bottom';
        }
        else {
            this.panelRef.style.top = 'auto';
            if (this.container) {
                this.panelRef.style.top = (this.panelRef.offsetTop - this.container.scrollTop) + 'px';
            }
        }
        // if ( this.selectEl.offsetLeft) {
        //     this.panelRef.style.left = this.selectEl.offsetLeft + 'px';
        // }
        if (!this.width) {
            this.panelRef.style.width = this.selectEl.offsetWidth + 'px';
            ul.style.width = '100%';
        }
        else {
            this.panelRef.style.width = this.width + 'px';
        }
    }
}
SingleSelectDirective.decorators = [
    { type: Directive, args: [{
                selector: '[single-select]',
                exportAs: 'singleSelect'
            },] }
];
/** @nocollapse */
SingleSelectDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 }
];
SingleSelectDirective.propDecorators = {
    items: [{ type: Input }],
    panelRef: [{ type: Input }],
    width: [{ type: Input }],
    position: [{ type: Input }],
    container: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SingleSelectDirective.prototype.items;
    /** @type {?} */
    SingleSelectDirective.prototype.panelRef;
    /** @type {?} */
    SingleSelectDirective.prototype.width;
    /** @type {?} */
    SingleSelectDirective.prototype.position;
    /** @type {?} */
    SingleSelectDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.ngCtrl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.overlaySer;
    /** @type {?} */
    SingleSelectDirective.prototype.selectEl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.overlayHandler;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.displayTextEl;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.ngZone;
    /** @type {?} */
    SingleSelectDirective.prototype.beforeShow;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SingleSelectDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,