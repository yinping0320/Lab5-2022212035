/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, ElementRef, Injector, Input, Renderer2 } from "@angular/core";
import { NgControl } from "@angular/forms";
import { CommonUtils, OverLayHiddenService } from "@farris/ui-common";
import { LocaleService } from "@farris/ui-locale";
import { CommentsHttpToken } from "./comments/get-data.interface";
import { SingleListComponent } from "./comments/single-list.component";
export class TextareaCommentsDirective {
    /**
     * @param {?} injector
     * @param {?} el
     * @param {?} render
     * @param {?} localeSer
     * @param {?} cfr
     */
    constructor(injector, el, render, localeSer, cfr) {
        this.injector = injector;
        this.el = el;
        this.render = render;
        this.localeSer = localeSer;
        this.cfr = cfr;
        this.useComments = true;
        this.maxHeight = 300;
        this.title = '';
        this.mgrText = '';
        this.commentsBtnElement = null;
        this.singListRef = null;
        this.listPanelElRef = null;
        this.commentSer = this.injector.get(CommentsHttpToken, null);
        this.overlaySer = this.injector.get(OverLayHiddenService, null);
        this.commonUtil = this.injector.get(CommonUtils, null);
        if (!this.overlaySer) {
            this.overlaySer = new OverLayHiddenService();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngControl = this.injector.get(NgControl, null);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.init();
        this.listenAttributesChanged();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.useComments && !changes.useComments.isFirstChange()) {
            this.init();
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        /** @type {?} */
        const readonly = this.el.nativeElement.readOnly;
        /** @type {?} */
        const disabled = this.el.nativeElement.disabled;
        if (this.useComments && (!readonly && !disabled)) {
            this.createCommentsButton();
        }
        else {
            this.destroy();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy();
        this.hideListPanel();
        // 停止观察属性变化
        this.observer.disconnect();
        this.observer = null;
    }
    /**
     * @return {?}
     */
    listenAttributesChanged() {
        // 选择需要观察变动的节点
        /** @type {?} */
        const targetNode = this.el.nativeElement;
        // 观察器的配置（需要观察什么变动）
        /** @type {?} */
        const config = { attributes: true };
        // 当观察到变动时执行的回调函数
        /** @type {?} */
        const callback = (/**
         * @param {?} mutationsList
         * @param {?} observer
         * @return {?}
         */
        (mutationsList, observer) => {
            // Use traditional 'for loops' for IE 11
            for (let mutation of mutationsList) {
                if (mutation.type === 'attributes' && (mutation.attributeName === 'readonly' || mutation.attributeName === 'disabled')) {
                    this.init();
                }
            }
        });
        // 创建一个观察器实例并传入回调函数
        this.observer = new MutationObserver(callback);
        // 以上述配置开始观察目标节点
        this.observer.observe(targetNode, config);
    }
    /**
     * @return {?}
     */
    destroy() {
        if (this.commentsBtnElement) {
            this.commentsBtnElement.remove();
        }
    }
    /**
     * @private
     * @return {?}
     */
    createID() {
        /** @type {?} */
        const tagName = this.el.nativeElement.tagName;
        if (this.ngControl) {
            /** @type {?} */
            const ctrlName = this.ngControl.name;
            return `${tagName}_COMMENTS_${ctrlName}`;
        }
        else {
            if (this.el.nativeElement.id) {
                return `${tagName}_COMMENTS_${this.el.nativeElement.id}`;
            }
        }
        return '';
    }
    /**
     * @private
     * @return {?}
     */
    createCommentsButton() {
        /** @type {?} */
        const commentsBtn = this.render.createElement('span');
        commentsBtn.className = 'dropdown-toggle';
        commentsBtn.title = this.title ? this.title : (this.localeSer.getValue('text.comments.title') || '常用意见');
        /** @type {?} */
        const id = this.createID();
        if (id) {
            commentsBtn.id = id;
        }
        this.render.setStyle(commentsBtn, 'position', 'absolute');
        this.render.setStyle(commentsBtn, 'left', '3px');
        this.render.setStyle(commentsBtn, 'bottom', '0px');
        this.render.setStyle(commentsBtn, 'cursor', 'pointer');
        /** @type {?} */
        const icon = this.render.createElement('span');
        this.render.appendChild(commentsBtn, icon);
        icon.className = 'f-icon f-icon-message';
        this.render.setStyle(icon, 'position', 'relative');
        // this.render.setStyle(icon, 'margin-right', '3px');
        this.render.setStyle(icon, 'top', '1px');
        this.render.setStyle(icon, 'font-size', '13px');
        this.el.nativeElement.after(commentsBtn);
        this.commentsBtnElement = commentsBtn;
        this.render.listen(commentsBtn, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            if (!this.listPanelElRef) {
                this.showListPanel();
            }
            else {
                this.hideListPanel();
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    showListPanel() {
        /** @type {?} */
        const listPanelEl = this.render.createElement('div');
        /** @type {?} */
        const zindex = this.commonUtil.getFloatingLayerIndex();
        const { left, bottom } = this.commentsBtnElement.getBoundingClientRect();
        this.render.setStyle(listPanelEl, 'width', '200px');
        this.render.setStyle(listPanelEl, 'max-height', `${this.maxHeight}px`);
        this.render.setStyle(listPanelEl, 'position', 'absolute');
        this.render.setStyle(listPanelEl, 'left', `${left}px`);
        this.render.setStyle(listPanelEl, 'top', '0px');
        this.render.setStyle(listPanelEl, 'z-index', zindex);
        this.render.setStyle(listPanelEl, 'box-shadow', '0 2px 8px 0 #dedede');
        this.render.setStyle(listPanelEl, 'border-radius', '6px');
        this.render.setStyle(listPanelEl, 'background', 'white');
        this.render.setStyle(listPanelEl, 'visibility', 'hidden');
        document.body.append(listPanelEl);
        this.listPanelElRef = listPanelEl;
        /** @type {?} */
        const singListCmf = this.cfr.resolveComponentFactory(SingleListComponent);
        this.singListRef = singListCmf.create(this.injector);
        this.singListRef.instance.showButtons = true;
        this.singListRef.instance.emptyDataMsg = this.localeSer.getValue('text.comments.empty');
        this.singListRef.instance.buttons = [
            {
                text: this.mgrText ? this.mgrText : this.localeSer.getValue('text.comments.manager'),
                iconCls: 'f-icon f-icon-home-setup', handler: (/**
                 * @return {?}
                 */
                () => {
                    if (this.commentSer) {
                        this.hideListPanel();
                        this.commentSer.showCommentManageDialog({ type: 'forms' }).subscribe((/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => {
                            console.log(e);
                        }));
                    }
                })
            }
        ];
        this.singListRef.instance.textField = 'message';
        this.singListRef.instance.maxItems = 999999;
        this.singListRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const val = e.data['message'];
            /** @type {?} */
            let _text = this.el.nativeElement.value || '';
            _text += val;
            if (this.ngControl) {
                this.ngControl.control.patchValue(_text);
            }
            else {
                this.el.nativeElement.value = _text;
            }
            this.hideListPanel();
        }));
        listPanelEl.appendChild(this.singListRef.location.nativeElement);
        this.singListRef.changeDetectorRef.detectChanges();
        this.loadData(this.singListRef);
        this.overlaySer.registerMouseEvent(listPanelEl, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.listPanelElRef.contains(e.target) || this.commentsBtnElement === e.target || this.commentsBtnElement.contains(e.target)) {
                return;
            }
            this.hideListPanel();
        }));
    }
    /**
     * @return {?}
     */
    hideListPanel() {
        if (this.singListRef) {
            this.singListRef.destroy();
            this.singListRef = null;
        }
        if (this.listPanelElRef) {
            this.listPanelElRef.remove();
            this.overlaySer.destory(this.listPanelElRef);
            this.listPanelElRef = null;
        }
    }
    /**
     * @private
     * @param {?} singListRef
     * @return {?}
     */
    loadData(singListRef) {
        if (this.commentSer) {
            this.commentSer.getCommonComments({ type: 'forms' }).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            (data) => {
                singListRef.instance.loadData(data);
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.resetPosition();
                }));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetPosition() {
        const { top, bottom, left } = this.commentsBtnElement.getBoundingClientRect();
        /** @type {?} */
        const panelHeight = this.listPanelElRef.offsetHeight;
        if (window.innerHeight - bottom > this.maxHeight || window.innerHeight - bottom > panelHeight) {
            this.render.setStyle(this.listPanelElRef, 'top', `${bottom}px`);
            this.render.removeStyle(this.listPanelElRef, 'visibility');
            return;
        }
        else {
            if (top > this.maxHeight || top > panelHeight) {
                this.render.setStyle(this.listPanelElRef, 'top', `${top - panelHeight}px`);
            }
            else {
                this.render.setStyle(this.listPanelElRef, 'top', '0px');
                if (left > 200) {
                    this.render.setStyle(this.listPanelElRef, 'left', `${left - 200}px`);
                }
            }
            this.render.removeStyle(this.listPanelElRef, 'visibility');
        }
    }
}
TextareaCommentsDirective.decorators = [
    { type: Directive, args: [{
                selector: '[common-comments]',
            },] }
];
/** @nocollapse */
TextareaCommentsDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 },
    { type: LocaleService },
    { type: ComponentFactoryResolver }
];
TextareaCommentsDirective.propDecorators = {
    useComments: [{ type: Input, args: ['common-comments',] }],
    maxHeight: [{ type: Input }],
    title: [{ type: Input }],
    mgrText: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    TextareaCommentsDirective.prototype.useComments;
    /** @type {?} */
    TextareaCommentsDirective.prototype.maxHeight;
    /** @type {?} */
    TextareaCommentsDirective.prototype.title;
    /** @type {?} */
    TextareaCommentsDirective.prototype.mgrText;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.commentSer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.eventManager;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.ngControl;
    /** @type {?} */
    TextareaCommentsDirective.prototype.commentsBtnElement;
    /** @type {?} */
    TextareaCommentsDirective.prototype.singListRef;
    /** @type {?} */
    TextareaCommentsDirective.prototype.listPanelElRef;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.observer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.commonUtil;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    TextareaCommentsDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,