/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventManager } from '@angular/platform-browser';
import { Directive, ElementRef, Injector } from '@angular/core';
export class ShortCutTabKeyDirective {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} eventManager
     */
    constructor(el, injector, eventManager) {
        this.el = el;
        this.injector = injector;
        this.eventManager = eventManager;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.eventManager.addEventListener(this.el.nativeElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            if (e.key === 'Tab') {
                this.onTabKeydownHandler(e.target);
            }
        }));
    }
    /**
     * @private
     * @param {?} currentTarget
     * @return {?}
     */
    onTabKeydownHandler(currentTarget) {
        /** @type {?} */
        let allInputs = this.el.nativeElement.querySelectorAll('input,textarea');
        allInputs = Array.from(allInputs);
        /** @type {?} */
        const currentInputIndex = allInputs.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n === currentTarget));
        /** @type {?} */
        let nextInputIndex = currentInputIndex + 1;
        if (nextInputIndex >= allInputs.length) {
            nextInputIndex = 0;
        }
        /** @type {?} */
        const nextInputTarget = allInputs[nextInputIndex];
        if (nextInputTarget) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                nextInputTarget.focus();
            }));
        }
    }
}
ShortCutTabKeyDirective.decorators = [
    { type: Directive, args: [{
                selector: 'shortcut-tab',
            },] }
];
/** @nocollapse */
ShortCutTabKeyDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: EventManager }
];
if (false) {
    /** @type {?} */
    ShortCutTabKeyDirective.prototype.el;
    /** @type {?} */
    ShortCutTabKeyDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    ShortCutTabKeyDirective.prototype.eventManager;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRjdXQtdGFiLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZm9ybXMvIiwic291cmNlcyI6WyJsaWIvc2hvcnRjdXQtdGFiLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBeUIsTUFBTSxlQUFlLENBQUM7QUFLdkYsTUFBTSxPQUFPLHVCQUF1Qjs7Ozs7O0lBRWhDLFlBQW1CLEVBQWMsRUFBUyxRQUFrQixFQUFVLFlBQTBCO1FBQTdFLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsaUJBQVksR0FBWixZQUFZLENBQWM7SUFBRyxDQUFDOzs7O0lBRXBHLFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsU0FBUzs7OztRQUFHLENBQUMsQ0FBZ0IsRUFBRSxFQUFFO1lBQ3ZGLENBQUMsQ0FBQyxlQUFlLEVBQUUsQ0FBQztZQUNwQixJQUFJLENBQUMsQ0FBQyxHQUFHLEtBQUssS0FBSyxFQUFFO2dCQUNqQixJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7Ozs7SUFFTyxtQkFBbUIsQ0FBQyxhQUFhOztZQUNqQyxTQUFTLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsZ0JBQWdCLENBQUM7UUFDeEUsU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7O2NBQzVCLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxTQUFTOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEtBQUssYUFBYSxFQUFDOztZQUNuRSxjQUFjLEdBQUcsaUJBQWlCLEdBQUcsQ0FBQztRQUMxQyxJQUFJLGNBQWMsSUFBSSxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ3BDLGNBQWMsR0FBRyxDQUFDLENBQUM7U0FDdEI7O2NBQ0ssZUFBZSxHQUFHLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFDakQsSUFBSSxlQUFlLEVBQUU7WUFDakIsVUFBVTs7O1lBQUMsR0FBRyxFQUFFO2dCQUNaLGVBQWUsQ0FBQyxLQUFLLEVBQUUsQ0FBQztZQUM1QixDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7O1lBakNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsY0FBYzthQUMzQjs7OztZQUptQixVQUFVO1lBQUUsUUFBUTtZQUQvQixZQUFZOzs7O0lBUUwscUNBQXFCOztJQUFFLDJDQUF5Qjs7Ozs7SUFBRSwrQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT25Jbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnc2hvcnRjdXQtdGFiJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNob3J0Q3V0VGFiS2V5RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgZXZlbnRNYW5hZ2VyOiBFdmVudE1hbmFnZXIpIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAna2V5ZG93bicsICAoZTogS2V5Ym9hcmRFdmVudCkgPT4ge1xyXG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICBpZiAoZS5rZXkgPT09ICdUYWInKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uVGFiS2V5ZG93bkhhbmRsZXIoZS50YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvblRhYktleWRvd25IYW5kbGVyKGN1cnJlbnRUYXJnZXQpIHtcclxuICAgICAgICBsZXQgYWxsSW5wdXRzID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0LHRleHRhcmVhJyk7XHJcbiAgICAgICAgYWxsSW5wdXRzID0gQXJyYXkuZnJvbShhbGxJbnB1dHMpO1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRJbnB1dEluZGV4ID0gYWxsSW5wdXRzLmZpbmRJbmRleChuID0+IG4gPT09IGN1cnJlbnRUYXJnZXQpO1xyXG4gICAgICAgIGxldCBuZXh0SW5wdXRJbmRleCA9IGN1cnJlbnRJbnB1dEluZGV4ICsgMTtcclxuICAgICAgICBpZiAobmV4dElucHV0SW5kZXggPj0gYWxsSW5wdXRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBuZXh0SW5wdXRJbmRleCA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IG5leHRJbnB1dFRhcmdldCA9IGFsbElucHV0c1tuZXh0SW5wdXRJbmRleF07XHJcbiAgICAgICAgaWYgKG5leHRJbnB1dFRhcmdldCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIG5leHRJbnB1dFRhcmdldC5mb2N1cygpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19