/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, ElementRef, HostListener } from '@angular/core';
import { NgControl } from '@angular/forms';
export class TextareaAutoSizeDirective {
    /**
     * @param {?} el
     * @param {?} ngControl
     * @param {?} injector
     */
    constructor(el, ngControl, injector) {
        this.el = el;
        this.ngControl = ngControl;
        this.injector = injector;
        this.enable = true;
        this.previousValue = null;
        this.isUserResized = false;
        this.textarea = this.el.nativeElement;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.init();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.enable && !changes.enable.isFirstChange()) {
            this.sizeToFit();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (!this.enable) {
            return;
        }
        if (this.maxHeight) {
            this.textarea.style.maxHeight = `${this.maxHeight}px`;
        }
        this.minHeight = this.textarea.getBoundingClientRect().height;
        if (this.minHeight) {
            this.textarea.style.minHeight = `${this.minHeight}px`;
        }
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        if (this.enable) {
            this.document = this.textarea.ownerDocument;
            this.documentElement = this.document.documentElement;
            if (this.textarea) {
                if (this.textarea.value) {
                    this.sizeToFit();
                }
            }
            if (this.ngControl) {
                this.ngControl.valueChanges.subscribe((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => {
                    if (v !== this.previousValue) {
                        this.sizeToFit();
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    onInput() {
        this.sizeToFit();
    }
    /**
     * @return {?}
     */
    onValueChange() {
        this.sizeToFit();
    }
    /**
     * @private
     * @return {?}
     */
    overflowOffset() {
        /** @type {?} */
        let offsetTop = 0;
        /** @type {?} */
        let el = this.textarea;
        while (el !== document.body && el !== null) {
            offsetTop += el.offsetTop || 0;
            el = el.offsetParent;
        }
        /** @type {?} */
        const top = offsetTop - document.defaultView.pageYOffset;
        /** @type {?} */
        const bottom = this.documentElement.clientHeight - (top + this.textarea.offsetHeight);
        return { top, bottom };
    }
    /**
     * @private
     * @return {?}
     */
    sizeToFit() {
        if (!this.enable) {
            return;
        }
        /** @type {?} */
        const textarea = this.textarea;
        /** @type {?} */
        const viewportMarginBottom = 100;
        if (this.isUserResized) {
            return;
        }
        if (this.textarea.value === this.previousValue) {
            return;
        }
        if (this.textarea.offsetWidth <= 0 && this.textarea.offsetHeight <= 0) {
            return;
        }
        // const { top, bottom } = this.overflowOffset();
        // if (top < 0 || bottom < 0) {
        //     return;
        // }
        /** @type {?} */
        const textareaStyle = getComputedStyle(textarea);
        /** @type {?} */
        const topBorderWidth = Number(textareaStyle.borderTopWidth.replace(/px/, ''));
        /** @type {?} */
        const bottomBorderWidth = Number(textareaStyle.borderBottomWidth.replace(/px/, ''));
        /** @type {?} */
        const isBorderBox = textareaStyle.boxSizing === 'border-box';
        /** @type {?} */
        const borderAddOn = isBorderBox ? topBorderWidth + bottomBorderWidth : 0;
        // const maxHeight = Number(textareaStyle.height.replace(/px/, '')) + bottom;
        // const adjustedViewportMarginBottom = bottom < viewportMarginBottom ? bottom : viewportMarginBottom;
        // textarea.style.maxHeight = `${maxHeight - adjustedViewportMarginBottom}px`;
        /** @type {?} */
        const container = textarea.parentElement;
        if (container instanceof HTMLElement) {
            /** @type {?} */
            const containerHeight = container.style.height;
            container.style.height = getComputedStyle(container).height;
            textarea.style.height = 'auto';
            /** @type {?} */
            let h = textarea.scrollHeight + borderAddOn;
            if (this.minHeight > h) {
                h = this.minHeight;
            }
            textarea.style.height = `${h}px`;
            container.style.height = containerHeight;
        }
        this.previousValue = textarea.value;
    }
}
TextareaAutoSizeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[auto-size]',
            },] }
];
/** @nocollapse */
TextareaAutoSizeDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: NgControl },
    { type: Injector }
];
TextareaAutoSizeDirective.propDecorators = {
    enable: [{ type: Input, args: ['auto-size',] }],
    maxHeight: [{ type: Input }],
    onInput: [{ type: HostListener, args: ['input',] }],
    onValueChange: [{ type: HostListener, args: ['change',] }]
};
if (false) {
    /** @type {?} */
    TextareaAutoSizeDirective.prototype.enable;
    /** @type {?} */
    TextareaAutoSizeDirective.prototype.maxHeight;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.previousValue;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.isUserResized;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.textarea;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.document;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.documentElement;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.minHeight;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.ngControl;
    /**
     * @type {?}
     * @private
     */
    TextareaAutoSizeDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,