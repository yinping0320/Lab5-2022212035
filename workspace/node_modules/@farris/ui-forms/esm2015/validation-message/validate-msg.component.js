/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, Input } from '@angular/core';
/**
 * 在表单dom中展示错误信息
 * 需要将formControl中的errors对象传入
 *
 * eg: 在姓名输入框下方展示验证信息
 *  将viewModel.form.name.errors对象传入
 *  <label class="k-form-field">
 * <span>姓名</span>
 * <input class="k-textbox" formControlName="name" />
 * <validationMessage [errors]="viewModel.form.name.errors"></validationMessage>
 * </label>
 */
class ValidationMessageComponent {
    /**
     * @param {?} ele
     */
    constructor(ele) {
        this.ele = ele;
        // 默认显示错误消息
        this.showErrorMessage = true;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        this.errorMessage = this.getErrorMessage(this.errors);
        this.ele.nativeElement.style.display = !this.errorMessage ? 'none' : 'block';
    }
    /**
     * @private
     * @param {?} errors
     * @return {?}
     */
    getErrorMessage(errors) {
        if (!errors) {
            return null;
        }
        else {
            /** @type {?} */
            let errorMessage = '';
            Object.keys(errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => {
                if (errors[key].name) {
                    errorMessage = errorMessage + ' ' + errors[key].name;
                }
            }));
            return errorMessage;
        }
    }
}
ValidationMessageComponent.decorators = [
    { type: Component, args: [{
                selector: 'validationMessage',
                template: `
      <div class="farris-feedback f-state-invalid">
          <span class="f-icon f-icon-message_warning f-feedback-icon" (click)="showErrorMessage=true" *ngIf="!showErrorMessage"></span>
          <span class="f-feedback-message" *ngIf="showErrorMessage" (click)="showErrorMessage=false">{{this.errorMessage}}</span>
      </div>
    `
            }] }
];
/** @nocollapse */
ValidationMessageComponent.ctorParameters = () => [
    { type: ElementRef }
];
ValidationMessageComponent.propDecorators = {
    errors: [{ type: Input }],
    type: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ValidationMessageComponent.prototype.errors;
    /** @type {?} */
    ValidationMessageComponent.prototype.type;
    /** @type {?} */
    ValidationMessageComponent.prototype.errorMessage;
    /** @type {?} */
    ValidationMessageComponent.prototype.showErrorMessage;
    /**
     * @type {?}
     * @private
     */
    ValidationMessageComponent.prototype.ele;
}
export { ValidationMessageComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGUtbXNnLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZm9ybXMvdmFsaWRhdGlvbi1tZXNzYWdlLyIsInNvdXJjZXMiOlsidmFsaWRhdGUtbXNnLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQzs7Ozs7Ozs7Ozs7OztBQWV2RixNQVVNLDBCQUEwQjs7OztJQU05QixZQUNVLEdBQWU7UUFBZixRQUFHLEdBQUgsR0FBRyxDQUFZOztRQUZsQixxQkFBZ0IsR0FBRyxJQUFJLENBQUM7SUFLL0IsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsT0FBc0I7UUFDaEMsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFDL0UsQ0FBQzs7Ozs7O0lBQ08sZUFBZSxDQUFDLE1BQU07UUFDNUIsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTs7Z0JBQ0QsWUFBWSxHQUFHLEVBQUU7WUFDckIsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRTtvQkFDcEIsWUFBWSxHQUFHLFlBQVksR0FBRyxHQUFHLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQztpQkFDdEQ7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sWUFBWSxDQUFDO1NBQ3JCO0lBQ0gsQ0FBQzs7O1lBdENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixRQUFRLEVBQUU7Ozs7O0tBS1A7YUFFSjs7OztZQXhCbUIsVUFBVTs7O3FCQTBCM0IsS0FBSzttQkFDTCxLQUFLOzs7O0lBRE4sNENBQWdCOztJQUNoQiwwQ0FBc0I7O0lBQ3RCLGtEQUFxQjs7SUFFckIsc0RBQStCOzs7OztJQUU3Qix5Q0FBdUI7O0FBdUIzQixPQUFPLEVBQUUsMEJBQTBCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5wdXQsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuLyoqXHJcbiAqIOWcqOihqOWNlWRvbeS4reWxleekuumUmeivr+S/oeaBr1xyXG4gKiDpnIDopoHlsIZmb3JtQ29udHJvbOS4reeahGVycm9yc+WvueixoeS8oOWFpVxyXG4gKlxyXG4gKiBlZzog5Zyo5aeT5ZCN6L6T5YWl5qGG5LiL5pa55bGV56S66aqM6K+B5L+h5oGvXHJcbiAqICDlsIZ2aWV3TW9kZWwuZm9ybS5uYW1lLmVycm9yc+WvueixoeS8oOWFpVxyXG4gKiAgPGxhYmVsIGNsYXNzPVwiay1mb3JtLWZpZWxkXCI+XHJcbiAgICAgICAgPHNwYW4+5aeT5ZCNPC9zcGFuPlxyXG4gICAgICAgIDxpbnB1dCBjbGFzcz1cImstdGV4dGJveFwiIGZvcm1Db250cm9sTmFtZT1cIm5hbWVcIiAvPlxyXG4gICAgICAgIDx2YWxpZGF0aW9uTWVzc2FnZSBbZXJyb3JzXT1cInZpZXdNb2RlbC5mb3JtLm5hbWUuZXJyb3JzXCI+PC92YWxpZGF0aW9uTWVzc2FnZT5cclxuICAgIDwvbGFiZWw+XHJcbiAqL1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICd2YWxpZGF0aW9uTWVzc2FnZScsXHJcbiAgdGVtcGxhdGU6IGBcclxuICAgICAgPGRpdiBjbGFzcz1cImZhcnJpcy1mZWVkYmFjayBmLXN0YXRlLWludmFsaWRcIj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1tZXNzYWdlX3dhcm5pbmcgZi1mZWVkYmFjay1pY29uXCIgKGNsaWNrKT1cInNob3dFcnJvck1lc3NhZ2U9dHJ1ZVwiICpuZ0lmPVwiIXNob3dFcnJvck1lc3NhZ2VcIj48L3NwYW4+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtZmVlZGJhY2stbWVzc2FnZVwiICpuZ0lmPVwic2hvd0Vycm9yTWVzc2FnZVwiIChjbGljayk9XCJzaG93RXJyb3JNZXNzYWdlPWZhbHNlXCI+e3t0aGlzLmVycm9yTWVzc2FnZX19PC9zcGFuPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGAsXHJcbiAgc3R5bGVzOiBbXVxyXG59KVxyXG5jbGFzcyBWYWxpZGF0aW9uTWVzc2FnZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XHJcbiAgQElucHV0KCkgZXJyb3JzO1xyXG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZztcclxuICBlcnJvck1lc3NhZ2U6IHN0cmluZztcclxuICAvLyDpu5jorqTmmL7npLrplJnor6/mtojmga9cclxuICBwdWJsaWMgc2hvd0Vycm9yTWVzc2FnZSA9IHRydWU7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGVsZTogRWxlbWVudFJlZixcclxuICApIHtcclxuXHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICB0aGlzLmVycm9yTWVzc2FnZSA9IHRoaXMuZ2V0RXJyb3JNZXNzYWdlKHRoaXMuZXJyb3JzKTtcclxuICAgIHRoaXMuZWxlLm5hdGl2ZUVsZW1lbnQuc3R5bGUuZGlzcGxheSA9ICF0aGlzLmVycm9yTWVzc2FnZSA/ICdub25lJyA6ICdibG9jayc7XHJcbiAgfVxyXG4gIHByaXZhdGUgZ2V0RXJyb3JNZXNzYWdlKGVycm9ycykge1xyXG4gICAgaWYgKCFlcnJvcnMpIHtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBsZXQgZXJyb3JNZXNzYWdlID0gJyc7XHJcbiAgICAgIE9iamVjdC5rZXlzKGVycm9ycykuZm9yRWFjaChrZXkgPT4ge1xyXG4gICAgICAgIGlmIChlcnJvcnNba2V5XS5uYW1lKSB7XHJcbiAgICAgICAgICBlcnJvck1lc3NhZ2UgPSBlcnJvck1lc3NhZ2UgKyAnICcgKyBlcnJvcnNba2V5XS5uYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBlcnJvck1lc3NhZ2U7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbmV4cG9ydCB7IFZhbGlkYXRpb25NZXNzYWdlQ29tcG9uZW50IH07XHJcbiJdfQ==