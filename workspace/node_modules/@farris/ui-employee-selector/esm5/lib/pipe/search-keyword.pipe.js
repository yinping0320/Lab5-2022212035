/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipe/search-keyword.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
var SearchKeywordPipe = /** @class */ (function () {
    function SearchKeywordPipe(sanitizer) {
        this.sanitizer = sanitizer;
    }
    /**
     * @param {?} value
     * @param {?} keyword
     * @return {?}
     */
    SearchKeywordPipe.prototype.transform = /**
     * @param {?} value
     * @param {?} keyword
     * @return {?}
     */
    function (value, keyword) {
        if (!value || !keyword) {
            return value;
        }
        /** @type {?} */
        var Reg = new RegExp(keyword, 'i');
        /** @type {?} */
        var res = value.replace(Reg, "<a style=\"color: #2A87FF;\">" + keyword + "</a>");
        //console.log(res);
        return this.sanitizer.bypassSecurityTrustHtml(res);
    };
    SearchKeywordPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'keyword'
                },] }
    ];
    /** @nocollapse */
    SearchKeywordPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return SearchKeywordPipe;
}());
export { SearchKeywordPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchKeywordPipe.prototype.sanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWtleXdvcmQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZW1wbG95ZWUtc2VsZWN0b3IvIiwic291cmNlcyI6WyJsaWIvcGlwZS9zZWFyY2gta2V5d29yZC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXpEO0lBS0UsMkJBQW9CLFNBQXVCO1FBQXZCLGNBQVMsR0FBVCxTQUFTLENBQWM7SUFFM0MsQ0FBQzs7Ozs7O0lBRUQscUNBQVM7Ozs7O0lBQVQsVUFBVSxLQUFVLEVBQUUsT0FBZTtRQUNwQyxJQUFHLENBQUMsS0FBSyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3RCLE9BQU8sS0FBSyxDQUFDO1NBQ2I7O1lBQ0ssR0FBRyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUM7O1lBQzlCLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsRUFBRSxrQ0FBOEIsT0FBTyxTQUFNLENBQUM7UUFDM0UsbUJBQW1CO1FBQ25CLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNwRCxDQUFDOztnQkFqQkYsSUFBSSxTQUFDO29CQUNKLElBQUksRUFBRSxTQUFTO2lCQUNoQjs7OztnQkFKUSxZQUFZOztJQXFCckIsd0JBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWhCWSxpQkFBaUI7Ozs7OztJQUVoQixzQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciB9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xyXG5cclxuQFBpcGUoe1xyXG4gIG5hbWU6ICdrZXl3b3JkJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoS2V5d29yZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcikge1xyXG5cclxuICB9XHJcblxyXG4gIHRyYW5zZm9ybSh2YWx1ZTogYW55LCBrZXl3b3JkOiBzdHJpbmcpOiBhbnkge1xyXG5cdCAgaWYoIXZhbHVlIHx8ICFrZXl3b3JkKSB7XHJcblx0XHQgIHJldHVybiB2YWx1ZTtcclxuXHQgIH1cclxuXHQgIGNvbnN0IFJlZyA9IG5ldyBSZWdFeHAoa2V5d29yZCwgJ2knKTtcclxuXHQgIGNvbnN0IHJlcyA9IHZhbHVlLnJlcGxhY2UoUmVnLCBgPGEgc3R5bGU9XCJjb2xvcjogIzJBODdGRjtcIj4ke2tleXdvcmR9PC9hPmApO1xyXG5cdCAgLy9jb25zb2xlLmxvZyhyZXMpO1xyXG5cdCAgcmV0dXJuIHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHJlcyk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=