/**
 * @fileoverview added by tsickle
 * Generated from: lib/quick-select-page/qsp.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Optional } from '@angular/core';
import { noDataImg } from '../../assets/resource';
import { NotifyService } from '@farris/ui-notify';
import { FavoritesTool } from '../../utils/favorites.tool';
import { ApiLocalService } from '../../utils/api-service';
import { debounceTime } from 'rxjs/operators';
import { BehaviorSubject } from 'rxjs';
import { trim } from 'lodash-es';
var QuickSelectComponent = /** @class */ (function () {
    function QuickSelectComponent(apiService, notifyService, favoritesTool, cdRef) {
        this.apiService = apiService;
        this.notifyService = notifyService;
        this.favoritesTool = favoritesTool;
        this.cdRef = cdRef;
        this.selectionsChange = new EventEmitter();
        this.togglePanelModelChange = new EventEmitter();
        this.allChecked = false;
        this.allIndexId = 'allIndexId';
        this.noDataImg = noDataImg;
        this.items = [];
        this.recentContactsList = [];
        this.favoritesList = [];
        this.searchText = '';
        this.searchTextStream = new BehaviorSubject('');
        this.selections = [];
        this.firstLoad = true;
        this.checkeds = [];
        // 是否显示用户编号
        this.showUserCode = true;
        this.allIndexId = Math.random().toString(16).substring(3, 12);
    }
    Object.defineProperty(QuickSelectComponent.prototype, "quickInput", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (!this.firstLoad) {
                this.searchText = trim(value);
                this.searchTextStream.next(value);
            }
            this.firstLoad = false;
            this.checkeds = [];
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(QuickSelectComponent.prototype, "originalSelections", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.selections = value.slice();
        },
        enumerable: true,
        configurable: true
    });
    ;
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // 兼容老表单
        if (this.favoritesTool) {
            this.favoritesTool.getFavoritesList(this.withPermission).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.favoritesList = result ? ((/** @type {?} */ (result))).data : [];
                _this.favoritesTool.favoritesList = _this.favoritesList.slice();
                _this.getRecentContactsList();
            }));
            this.favoritesTool.favoritesSubject.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.favoritesList = data;
                _this.assembleItemsFavorites();
            }));
        }
        this.searchTextStream.pipe(debounceTime(500)).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (!!data) {
                _this.getItemsBySearch(data);
            }
            else {
                _this.items = _this.recentContactsList.slice();
                _this.assembleItemsChecked();
                _this.assembleItemsFavorites();
            }
        }));
    };
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @param {?} searchText
     * @return {?}
     */
    QuickSelectComponent.prototype.getItemsBySearch = /**
     * @private
     * @param {?} searchText
     * @return {?}
     */
    function (searchText) {
        /** @type {?} */
        var searchItems = this.recentContactsList.slice();
        if (!searchText) {
            return;
        }
        this.items = searchItems.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return (item.code && item.code.indexOf(searchText) !== -1) || (item.name && item.name.indexOf(searchText) !== -1) || (item.initials && item.initials.indexOf(searchText) !== -1) || (item.pinyin && item.pinyin.indexOf(searchText) !== -1); }));
        this.assembleItemsChecked();
    };
    /**
     * @private
     * @return {?}
     */
    QuickSelectComponent.prototype.getRecentContactsList = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'RecentContacts'
        };
        this.favoritesTool.curdRecentContactsOrFavorites('query', param).subscribe((/**
         * @param {?} rcRes
         * @return {?}
         */
        function (rcRes) {
            /** @type {?} */
            var rcResData = rcRes ? rcRes.data : [];
            rcResData.forEach((/**
             * @param {?} res
             * @return {?}
             */
            function (res) {
                res.displayName = !!_this.showUserCode ? ('[' + res.code + ']' + res.name) : res.name;
            }));
            _this.recentContactsList = rcResData.slice();
            if (!_this.searchText) {
                _this.items = rcResData.slice();
                _this.assembleItemsChecked();
                if (_this.enableFavorites) {
                    _this.assembleItemsFavorites();
                }
            }
        }));
    };
    /**
     * @param {?} showQuickMode
     * @param {?} showAdvancedMode
     * @return {?}
     */
    QuickSelectComponent.prototype.togglePanelMode = /**
     * @param {?} showQuickMode
     * @param {?} showAdvancedMode
     * @return {?}
     */
    function (showQuickMode, showAdvancedMode) {
        this.togglePanelModelChange.emit({
            showQuickMode: showQuickMode,
            showAdvancedMode: showAdvancedMode
        });
    };
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.toggleAll = /**
     * @return {?}
     */
    function () {
        if (!this.allChecked) {
            this.checkAll();
        }
        else {
            this.unCheckAll();
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    QuickSelectComponent.prototype.toggleOne = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (data.checked) {
            this.unSelectLine(data);
        }
        else {
            this.selectLine(data);
        }
    };
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.assembleItemsChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.checked = false;
            item.indexId = Math.random().toString(16).substring(2);
            if (_this._isInArray(item[_this.idField], _this.idField, _this.selections) !== -1) {
                item.checked = true;
                if (_this._isInArray(item[_this.idField], _this.idField, _this.checkeds) === -1) {
                    _this.checkeds.push(item);
                }
            }
        }));
        this.items = this.items.slice();
        this.checkeds = this.checkeds.slice();
        this.toggleAllChecked();
    };
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.assembleItemsFavorites = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item.inFavorites = false;
            if (_this._isInArray(item[_this.idField], _this.idField, _this.favoritesList) !== -1) {
                item.inFavorites = true;
            }
        }));
        this.items = this.items.slice();
    };
    /**
     * 全选后处理
     * @param dataArr 全选的值
     */
    /**
     * 全选后处理
     * @return {?}
     */
    QuickSelectComponent.prototype.checkAll = /**
     * 全选后处理
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this._insertOneIntoSelections(item);
            item.checked = true;
        }));
    };
    /**
     * 全部取消
     * @param dataArr 取消的数据
     * @returns void
     */
    /**
     * 全部取消
     * @return {?} void
     */
    QuickSelectComponent.prototype.unCheckAll = /**
     * 全部取消
     * @return {?} void
     */
    function () {
        var _this = this;
        /** @type {?} */
        var uncheckedIds = [];
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            _this.selections.forEach((/**
             * @param {?} selection
             * @param {?} index
             * @return {?}
             */
            function (selection, index) {
                if (item[_this.idField] === selection[_this.idField]) {
                    uncheckedIds.push(item[_this.idField]);
                }
            }));
            item.checked = false;
        }));
        this.selections = this.selections.filter((/**
         * @param {?} selection
         * @return {?}
         */
        function (selection) { return !uncheckedIds.includes(selection[_this.idField]); }));
        this.checkeds = this.checkeds.filter((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return !uncheckedIds.includes(item[_this.idField]); }));
    };
    /**
     * 当前行选中
     * @param data 当前行的数据（）
     */
    /**
     * 当前行选中
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    QuickSelectComponent.prototype.selectLine = /**
     * 当前行选中
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    function (data) {
        if (this.multiSelect) {
            this._insertOneIntoSelections(data);
        }
        else {
            this.selections = [];
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.checked) {
                    item.checked = false;
                }
            }));
            this._insertOneIntoSelections(data);
        }
        this.toggleAllChecked();
    };
    /**
     * 单选取消选中
     * @param data 取消选中行
     */
    /**
     * 单选取消选中
     * @param {?} data 取消选中行
     * @return {?}
     */
    QuickSelectComponent.prototype.unSelectLine = /**
     * 单选取消选中
     * @param {?} data 取消选中行
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var index = this._isInArray(data[this.idField], this.idField, this.selections);
        if (index > -1) {
            this.selections.splice(index, 1);
        }
        /** @type {?} */
        var indexc = this._isInArray(data[this.idField], this.idField, this.checkeds);
        if (indexc > -1) {
            this.checkeds.splice(indexc, 1);
        }
        if (this.allChecked) {
            this.allChecked = false;
        }
    };
    // 处理逻辑是看上去像是追加，实际上是替换，多选的时候要把之前的数据合进选中数据中
    // 处理逻辑是看上去像是追加，实际上是替换，多选的时候要把之前的数据合进选中数据中
    /**
     * @return {?}
     */
    QuickSelectComponent.prototype.confirmSelections = 
    // 处理逻辑是看上去像是追加，实际上是替换，多选的时候要把之前的数据合进选中数据中
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var recentContactsList = [];
        this.recentContactsList.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            recentContactsList.push(item[_this.idField]);
        }));
        /** @type {?} */
        var emitObj = {
            selections: this.selections,
            token: 'quick',
            recentContactsList: recentContactsList
        };
        this.selectionsChange.emit(emitObj);
    };
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    QuickSelectComponent.prototype.toggleFavorites = /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    function (e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    };
    /**
     * 选中并插入当前行数据到右侧
     * @param data 当前行的数据
     * @param collection 暂存当前数据的集合
     */
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    QuickSelectComponent.prototype._insertOneIntoSelections = /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    function (data) {
        // 如果当前数据已经移入右侧数据，则返回。
        if (this._isInArray(data[this.idField], this.idField, this.selections) > -1) {
            return;
        }
        this.selections.push(data);
        this.checkeds.push(data);
        this.selections = this.selections.slice();
        this.checkeds = this.checkeds.slice();
    };
    /**
     * 判断是否在内
     * @param value value
     * @param field field
     * @param array array
     * @returns 位置索引
     */
    /**
     * 判断是否在内
     * @param {?} value value
     * @param {?} field field
     * @param {?} array array
     * @return {?} 位置索引
     */
    QuickSelectComponent.prototype._isInArray = /**
     * 判断是否在内
     * @param {?} value value
     * @param {?} field field
     * @param {?} array array
     * @return {?} 位置索引
     */
    function (value, field, array) {
        if (!field || !value) {
            throw new Error(this.validElementsInfo);
        }
        return array.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return value === item[field]; }));
    };
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     */
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    QuickSelectComponent.prototype.toggleAllChecked = /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    function () {
        if (this.items.length === this.checkeds.length && this.checkeds.length > 0) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    };
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    QuickSelectComponent.prototype.trackByFn = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return index;
    };
    QuickSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lib-quick-select',
                    template: "<div #fastDiv class=\"quick-select-panel\">\r\n    <div class=\"quick-select-panel-title\">\r\n        <span *ngIf=\"searchText.length<1\">{{'personnelSelector.quickSelect.recent' | locale}}</span>\r\n        <span *ngIf=\"searchText.length>0\">{{'personnelSelector.quickSelect.result' | locale}}</span>\r\n    </div>\r\n    <div class=\"qsp-list-container\">\r\n        <div class=\"qsp-list-title\" *ngIf=\"items.length > 0\">\r\n            <div class=\"custom-control custom-checkbox\" *ngIf=\"multiSelect\">\r\n                <input class=\"custom-control-input\" [id]=\"allIndexId\" type=\"checkbox\" [(ngModel)]=\"allChecked\">\r\n                <label class=\"custom-control-label\" [for]=\"allIndexId\" (click)=\"toggleAll()\">{{'personnelSelector.tabCommon.checkAll' | locale}}</label>\r\n            </div>\r\n            <div class=\"title-selected-num\">\r\n                {{'personnelSelector.quickSelect.firstTotalText' | locale}} <b>{{selections.length}}</b> {{'personnelSelector.quickSelect.lastTotalText' | locale}}\r\n            </div>\r\n        </div>\r\n        <perfect-scrollbar *ngIf=\"items.length!==0\" style=\"max-height: 265px;\">\r\n            <div class=\"qsp-list-content\">\r\n                <div *ngFor=\"let data of items; let i = index;trackBy: trackByFn\" class=\"s-selectedPerson\">\r\n                    <div class=\"custom-control custom-checkbox\">\r\n                        <input class=\"custom-control-input\" [(ngModel)]=\"data.checked\" [id]=\"data.indexId\"\r\n                            type=\"checkbox\">\r\n                        <label class=\"custom-control-label\" [for]=\"data.indexId\" (click)=\"toggleOne(data)\">\r\n                            <div style=\"display: flex; height: 32px; margin: -21px 0 0 24px;\">\r\n                                <farris-avatar [avatarWidth]=\"32\" [avatarHeight]=\"32\" [cover]=\"data.ext1\"\r\n                                    [readonly]=\"true\">\r\n                                </farris-avatar>\r\n                                <div\r\n                                    style=\"margin-left: 11px; margin-top: -5px; padding-right: 10px; overflow: hidden;\">\r\n                                    <p class=\"qsp-list-content-title\" title=\"{{data.displayName}}\">\r\n                                        {{data.displayName}}</p>\r\n                                    <p class=\"qsp-list-content-orgpath\" title=\"{{data.orgAllPath}}\">\r\n                                        {{data.orgAllPath}}</p>\r\n                                </div>\r\n                            </div>\r\n                        </label>\r\n                    </div>\r\n                    <span class=\"f-icon f-icon-star\" *ngIf=\"enableFavorites\"\r\n                        [class.default-light-color]=\"data.inFavorites\" [class.default-dark-color]=\"!data.inFavorites\"\r\n                        (click)=\"toggleFavorites($event, data)\"></span>\r\n                </div>\r\n\r\n            </div>\r\n        </perfect-scrollbar>\r\n        <div *ngIf=\"items.length===0\" [ngStyle]=\"{'background-image': noDataImg}\" class=\"qsp-list-nodata\">\r\n            {{'personnelSelector.tabCommon.noUserData' | locale}}</div>\r\n    </div>\r\n    <div class=\"quick-select-foooter\">\r\n        <p (click)=\"togglePanelMode(false, true)\">{{'personnelSelector.quickSelect.advancedMode' | locale}}</p>\r\n        <div class=\"footer-button-container\" *ngIf=\"items.length > 0\">\r\n            <input type=\"button\" class=\"btn btn-secondary\" value=\"{{'personnelSelector.selection.cancel' | locale}}\" (click)=\"togglePanelMode(false, false)\" />\r\n            <input type=\"button\" class=\"btn btn-primary\" value=\"{{'personnelSelector.selection.confirm' | locale}}\" (click)=\"confirmSelections()\" />\r\n        </div>\r\n    </div>\r\n</div>",
                    styles: [".quick-select-panel{position:absolute;max-height:375px;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.12);z-index:999;width:300px}.quick-select-panel-title{height:30px;line-height:30px;font-size:16px;padding-left:13px}.qsp-list-container{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;width:100%;height:100%}.qsp-list-container .qsp-list-nodata{width:100px;height:100px;text-align:center;background-repeat:no-repeat;background-size:contain;margin:20px auto;color:#b4bccc;padding-top:100px}.qsp-list-container .group_blank_15{width:100%;height:15px}.qsp-list-container .qsp-list-content{clear:both}.qsp-list-container .s-selectedPerson:first-child{margin-top:0}.qsp-list-container .s-selectedPerson{min-width:240px;float:left;width:calc(100% - 6px);position:relative;height:40px;padding:5px 12px;margin:0 3px 1px}.qsp-list-container .s-selectedPerson:hover{background:#eef5ff;border-radius:5px}.qsp-list-container .f-icon{font-size:14px}.qsp-list-container .s-selectedPerson .f-icon-star{position:absolute;top:13px;right:12px;font-size:14px}.qsp-list-container .s-selectedPerson .default-light-color{color:#f7b500}.qsp-list-container .s-selectedPerson .default-dark-color{color:#d8dce6}.qsp-list-container .qsp-list-content-title{margin:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:13px}.qsp-list-container .qsp-list-content-orgpath{margin:0;font-size:12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#c7ccd7}.qsp-list-container .qsp-list-title{-webkit-box-pack:justify;justify-content:space-between;height:35px;margin-bottom:4px;display:-webkit-box;display:flex}.qsp-list-container .qsp-list-title .custom-control{margin-left:15px;line-height:35px;-webkit-box-flex:1;flex:1}.qsp-list-container .s-selectedPerson .custom-control-label::before{top:7px}.qsp-list-container .qsp-list-title .title-selected-num{margin-right:15px;color:rgba(0,0,0,.85);line-height:35px;-webkit-box-flex:1;flex:1;text-align:right}.quick-select-foooter{display:-webkit-box;display:flex;height:45px}.quick-select-foooter p{cursor:pointer;width:80px;height:45px;line-height:45px;margin-left:13px;font-size:14px;color:#2a87ff;z-index:2}.quick-select-foooter .footer-button-container{display:-webkit-box;display:flex;-webkit-box-flex:1;flex:1;-webkit-box-pack:end;justify-content:flex-end;margin-right:15px}.quick-select-foooter .footer-button-container input:first-child{height:28px;font-size:12px;margin:8px 8px 0 0}.quick-select-foooter .footer-button-container input:last-child{height:28px;font-size:12px;margin:8px 0 0}"]
                }] }
    ];
    /** @nocollapse */
    QuickSelectComponent.ctorParameters = function () { return [
        { type: ApiLocalService, decorators: [{ type: Optional }] },
        { type: NotifyService, decorators: [{ type: Optional }] },
        { type: FavoritesTool, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef, decorators: [{ type: Optional }] }
    ]; };
    QuickSelectComponent.propDecorators = {
        idField: [{ type: Input }],
        multiSelect: [{ type: Input }],
        enableChildHierarchy: [{ type: Input }],
        includeStopUser: [{ type: Input }],
        personnelOrderField: [{ type: Input }],
        includeCurrentUser: [{ type: Input }],
        userTypeMode: [{ type: Input }],
        filterId: [{ type: Input }],
        absUserOrgUrl: [{ type: Input }],
        quickInput: [{ type: Input }],
        enableFavorites: [{ type: Input }],
        absOrgType: [{ type: Input }],
        busNum: [{ type: Input }],
        originalSelections: [{ type: Input }],
        validElementsInfo: [{ type: Input }],
        withPermission: [{ type: Input }],
        selectionsChange: [{ type: Output }],
        togglePanelModelChange: [{ type: Output }]
    };
    return QuickSelectComponent;
}());
export { QuickSelectComponent };
if (false) {
    /** @type {?} */
    QuickSelectComponent.prototype.idField;
    /** @type {?} */
    QuickSelectComponent.prototype.multiSelect;
    /** @type {?} */
    QuickSelectComponent.prototype.enableChildHierarchy;
    /** @type {?} */
    QuickSelectComponent.prototype.includeStopUser;
    /** @type {?} */
    QuickSelectComponent.prototype.personnelOrderField;
    /** @type {?} */
    QuickSelectComponent.prototype.includeCurrentUser;
    /** @type {?} */
    QuickSelectComponent.prototype.userTypeMode;
    /** @type {?} */
    QuickSelectComponent.prototype.filterId;
    /** @type {?} */
    QuickSelectComponent.prototype.absUserOrgUrl;
    /** @type {?} */
    QuickSelectComponent.prototype.enableFavorites;
    /** @type {?} */
    QuickSelectComponent.prototype.absOrgType;
    /** @type {?} */
    QuickSelectComponent.prototype.busNum;
    /** @type {?} */
    QuickSelectComponent.prototype.validElementsInfo;
    /** @type {?} */
    QuickSelectComponent.prototype.withPermission;
    /** @type {?} */
    QuickSelectComponent.prototype.selectionsChange;
    /** @type {?} */
    QuickSelectComponent.prototype.togglePanelModelChange;
    /** @type {?} */
    QuickSelectComponent.prototype.allChecked;
    /** @type {?} */
    QuickSelectComponent.prototype.allIndexId;
    /** @type {?} */
    QuickSelectComponent.prototype.noDataImg;
    /** @type {?} */
    QuickSelectComponent.prototype.items;
    /** @type {?} */
    QuickSelectComponent.prototype.recentContactsList;
    /** @type {?} */
    QuickSelectComponent.prototype.favoritesList;
    /** @type {?} */
    QuickSelectComponent.prototype.searchText;
    /**
     * @type {?}
     * @private
     */
    QuickSelectComponent.prototype.searchTextStream;
    /** @type {?} */
    QuickSelectComponent.prototype.selections;
    /** @type {?} */
    QuickSelectComponent.prototype.firstLoad;
    /** @type {?} */
    QuickSelectComponent.prototype.checkeds;
    /** @type {?} */
    QuickSelectComponent.prototype.showUserCode;
    /**
     * @type {?}
     * @private
     */
    QuickSelectComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    QuickSelectComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    QuickSelectComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    QuickSelectComponent.prototype.cdRef;
    /* Skipping unhandled member: ;*/
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,