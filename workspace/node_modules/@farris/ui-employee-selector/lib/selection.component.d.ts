import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { HttpClient } from '@angular/common/http';
import { AfterViewInit, ChangeDetectorRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges, TemplateRef, ViewContainerRef, ApplicationRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { EventManager } from '@angular/platform-browser';
import { DialogComponent } from '@farris/ui-dialog';
import { FarrisTabsComponent } from '@farris/ui-tabs';
import { TreeTableComponent } from '@farris/ui-treetable';
import { Subscription } from 'rxjs';
import { ApiLocalService } from '../utils/api-service';
import { FavoritesTool } from '../utils/favorites.tool';
import { GroupTool } from '../utils/group.tool';
import { PanelMode, UserInfo } from '../utils/user.type';
import { SearchResultComponent } from './search-result-page/srp.component';
import { CandidateComponent } from './tab-candidate/candidate.component';
import { FavoritesComponent } from './tab-favorites/favorites.component';
import { GroupComponent } from './tab-group/group.component';
import { UnSelectDatagridComponent } from './tab-org-mid/unselectdatagrid.component';
import { UserGroupUnSelectComponent } from './tab-usergroup-mid/usergroupunselect.component';
import { RecentContactsComponent } from './tab-recent-contacts/trc.component';
import { DataLoadingService } from '../utils/loading-service';
import { ComboListComponent } from '@farris/ui-combo-list';
import { LocaleService } from '@farris/ui-locale';
export declare class EmployeeSelectorComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy, ControlValueAccessor {
    private apiService;
    private injector;
    private favoritesTool;
    private eventManager;
    private groupTool;
    private cd;
    baseCls: boolean;
    readonly tableTemplClass: boolean;
    width: string;
    farrisDialog: DialogComponent;
    dialogFilter: DialogComponent;
    unSelectDatagridRoom: ViewContainerRef;
    orgTreeCell: TemplateRef<any>;
    opCellOrg: TemplateRef<any>;
    opCellQuick: TemplateRef<any>;
    selectgroup: TemplateRef<any>;
    selectTabs: FarrisTabsComponent;
    farrisTree: TreeTableComponent;
    unSelectDatagrid: UnSelectDatagridComponent;
    sysUserGroupTree: TreeTableComponent;
    sysUserGroupUnselect: UserGroupUnSelectComponent;
    candidateDatagrid: CandidateComponent;
    recentContactsComponent: RecentContactsComponent;
    favoritesComponent: FavoritesComponent;
    groupComponent: GroupComponent;
    searchResultComponent: SearchResultComponent;
    positionFilterComboList: ComboListComponent;
    orgFilterComboList: ComboListComponent;
    isTableTemplate: boolean;
    isOnTop: boolean;
    placeholder: string;
    viewType: string;
    busNum: string;
    includeJobLeavers: boolean;
    includeStopOrg: boolean;
    includeStopUser: boolean;
    multiSelect: boolean;
    showInput: boolean;
    orgIdField: string;
    idField: string;
    displayField: string;
    type: string;
    readonly: boolean;
    draggable: boolean;
    orgId: string;
    orgPath: string;
    userGroupId: string;
    userIds: string;
    unSelectedUserIds: string;
    includeCurrentUser: boolean;
    pIncludeCurrentUser: boolean;
    enableMyGroup: boolean;
    enableQuick: boolean;
    absUserOrgUrl: string;
    enableHierarchicalLoading: boolean;
    enableChildHierarchy: boolean;
    _enableChildSysUserTree: boolean;
    onlyCurrentOrg: boolean;
    filterId: string;
    showGroupLeader: boolean;
    includeGroupLeader: boolean;
    pIncludeGroupLeader: boolean;
    readonly parentEle: HTMLElement;
    /**
     * 数据源类型
     * 默认为： System_organization  系统数据源   获取系统人员、系统组织
     * Administrative_organization  已扩展数据源  获取行政组织、行政人员
     * absOrgType {string}
     * PersonnelSelectorComponent
     */
    absOrgType: string;
    groupExtendUrl: string;
    myGroupUrl: string;
    myGroupPersonnelUrl: string;
    enableRecentContacts: boolean;
    _enableRecentContacts: boolean;
    /**
     * 展示哪些tab标签页，展示多个时使用英文逗号隔开
     * recent启用最近联系人，organization启用组织架构，candidate启用候选人，favorites启用收藏功能，group启用群组功能，sysUserGroup启用用户分组
     */
    showTabIds: string;
    activeTabId: string;
    /** 字段映射, 仅在farris form中使用{ 帮助数据字段：表单字段 } */
    mapFields: {
        [sourceField: string]: string;
    };
    /** 多选分隔符 */
    multipleChoiceSeparator: string;
    formatFn: (obj: UserInfo) => string;
    expression: string;
    recentContactsLimit: number;
    personnelOrderField: string;
    userTypeMode: string;
    orgPageSize: number;
    showPageList: boolean;
    withPermission: boolean;
    filterPosition: boolean;
    showOrgFilterIcon: boolean;
    orgNameType: string;
    quickSelect: boolean;
    showUserDetailInfo: boolean;
    onlyDisplayCompany: boolean;
    selectionsChange: EventEmitter<any>;
    selectionsChangeUn: EventEmitter<any>;
    lineDataChange: EventEmitter<any>;
    inputClear: EventEmitter<any>;
    tagRemoved: EventEmitter<any>;
    allTabIds: string;
    indexId: string;
    treeListData: any[];
    unSelectedLists: object;
    unSelectedOrgLists: object;
    unSelectedRoleLists: object;
    sysUserGroupTreeListData: any[];
    quickInput: string;
    noSelectToRight: string;
    pageSize: number;
    pageIndex: number;
    path: string;
    pageTotal: number;
    pageTotalAll: number;
    pageSizeOrg: number;
    pageIndexOrg: number;
    isContainOrg: number;
    orgIdOrg: string;
    pathOrg: string;
    pageTotalOrg: number;
    pageTotalAllOrg: number;
    pageSizeRole: number;
    pageIndexRole: number;
    isContainRole: number;
    orgIdRole: string;
    pathRole: string;
    pageTotalRole: number;
    pageTotalAllRole: number;
    quickPanelVisible: boolean;
    treeSelectedNodeInfo: any;
    unSelectedList: UserInfo[];
    unSelectedListOrg: any[];
    unSelectedListRole: any[];
    clearButid: string;
    quickContainerId: string;
    quickContainerWidth: number;
    tagContainerId: string;
    selectLatelyPersonnel: boolean;
    selectLatelyPersonnelIndexId: string;
    selectAllPersonnel: boolean;
    selectAllPersonnelIndexId: string;
    selectAllOrganization: boolean;
    selectAllOrganizationIndexId: string;
    selections: any[];
    unSelectedQuickList: any[];
    finalText: any;
    searchText: string;
    groupIcon: string;
    groupIcon2: string;
    organizationList: any[];
    searchPage: boolean;
    selectionList: any;
    columns: any[];
    items: any[];
    columnsOrg: any[];
    itemsOrg: any[];
    columnsRole: any[];
    itemsRole: any[];
    clearBut: boolean;
    selectedIds: string;
    enablePagination: boolean;
    private confirmToken;
    private msgService;
    private notifyService;
    recentTabId: string;
    organizationTabId: string;
    sysUserGroupTabId: string;
    candidateTabId: string;
    groupTabId: string;
    favoritesTabId: string;
    treeTableCols: any[];
    private customTreeData;
    private customSysUserGroupTreeData;
    private filterSysUserGroupTreeData;
    originalTreeData: any;
    originalSysUserGroupTreeData: any;
    ngControl: any;
    inputElementId: string;
    private hostElement;
    itemElementWidth: any;
    initLoadTreeData: boolean;
    private cloneSelections;
    recentContactsList: string[];
    enableFavorites: boolean;
    componentMap: Map<string, any>;
    locationOrgText: string;
    searchOrgElementVisible: boolean;
    locationOrgList: any[];
    locationSysUserGroupText: string;
    searchSysUserGroupElementVisible: boolean;
    locationSysUserGroupList: any[];
    http: HttpClient;
    inputGroupElementWith: string;
    publicGroup: string;
    showGroupDialog: boolean;
    groupTitle: string;
    groupNote: string;
    groupAsPublic: boolean;
    private currentUserId;
    private editingGroupId;
    searchPlaceholder: string;
    globalSearch: boolean;
    private stopNodeSelected;
    private cdRef;
    hideSearchPanel: boolean;
    searchResult: any[];
    dialogId: string;
    private render;
    dialogHeight: number;
    private ngZone;
    private ro;
    validGroupTitle: boolean;
    private groupTitleStream;
    groupDialogTitle: string;
    candidateItems: any[];
    dtcSub: Subscription;
    showUserCode: boolean;
    showRecentTab: boolean;
    showCandidateTab: boolean;
    showOrganizationTab: boolean;
    showSysUserGroupTab: boolean;
    showGroupTab: boolean;
    showFavoritesTab: boolean;
    appRef: ApplicationRef;
    private shownOrgId;
    private shownOrgPath;
    showUnSelectableInfo: boolean;
    unSelectableInfo: string;
    nodataInfo: string;
    private documentClick_Org;
    private documentClick_SysUerGroup;
    private pageSizeArr;
    private maxPageSizeIndex;
    private hasSetGlobalConfigParam;
    dataLoadingService: DataLoadingService;
    private loadingService;
    localeService: LocaleService;
    filterPositionData: Array<any>;
    isFilterPositionDataEmpty: boolean;
    filterPositionPlaceHolder: string;
    filterOrgData: Array<any>;
    isFilterOrgDataEmpty: boolean;
    filterOrgPlaceHolder: string;
    validElementsInfo: string;
    groupExtendInfo: string;
    filterPositionErrorInfo: string;
    presetFilterOrgInfo: string;
    filterOrgInfo: string;
    filterOrgErrorInfo: string;
    private xmlhttp;
    _onlyCurrentOrg: boolean;
    private orgTreeTimer;
    private empTreeTimer;
    allAdminOrgData: any[];
    onlyCurrentAdminOrg: boolean;
    currentAdminOrgPath: string;
    orgTypeId: string;
    deptTypeId: string;
    private initUserDetailInfo;
    constructor(apiService: ApiLocalService, injector: Injector, favoritesTool: FavoritesTool, eventManager: EventManager, groupTool: GroupTool, cd: ChangeDetectorRef);
    onModelChange: any;
    onModelTouched: any;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
    composedPath: (e: Record<string, any>) => any;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private setQuickContainerWidth;
    checkGroupInfo(): boolean;
    toggleGroupDialog(e: boolean): void;
    listentCandidateItemsChange(e: any): void;
    listenGroupTitle(e: any): void;
    saveGroup(): void;
    private setInputGroupElementWith;
    hideSearchOrgElement(e: any): void;
    hideSearchSysUserGroupElement(e: any): void;
    searchLocationOrg(e: any): void;
    searchLocationSysUserGroup(e: any): void;
    locationOrg(orgNode: any): void;
    locationSysUserGroup(node: any): void;
    private expandTreeNode;
    private expandSysUserGroupTreeNode;
    private getCurrentPath;
    private assembleLocationOrgList;
    private hlAssembleLocationOrgList;
    private assembleLocationSysUserGroupList;
    private hlAssembleLocationSysUserGroupList;
    private sortArray;
    private assembleOrgFullPath;
    private initDisplayTab;
    private initRegisterEvent;
    private initComponentMap;
    getOrganizationByParentNode(parentNode: any): void;
    getSysUserGroupByParentNode(parentNode: any): void;
    hlAssembleTreeData(): void;
    assembleTreeData(): void;
    hlAssembleSysUserGroupTreeData(): void;
    assembleSysUserGroupTreeData(): void;
    initGroupLeaderStatus(): void;
    /**
     * 根据组织id构建自定义组织树, 后端提供了接口后就废弃
     * 加载组织树的数据时，若orgId为特定组织的id值，则只加载该组织及其直接上级
     * @param array 原始数据
     * @param orgId 组织id
     */
    private assembleCustomTreeData;
    /**
    * 根据用户分组id构建自定义用户分组树, 后端提供了接口后就废弃
    * 加载用户分组树的数据时，若userGroupId为特定用户分组的id值，则只加载该用户分组及其直接上级
    * @param array 原始数据
    * @param groupId 用户分组id
    */
    private assembleCustomSysUserGroupTreeData;
    /**
     * 根据组织id获取当前组织节点信息
     * 被调用之处：assembleCustomTreeData()
     * @param array 原始数据
     * @param id 组织id
     * @returns obj
     */
    private getCurOrgInfoById;
    /**
     * 根据用户分组id获取当前用户分组节点信息
     * 被调用之处：assembleCustomSysUserGroupTreeData()
     * @param array 原始数据
     * @param id 用户分组id
     * @returns obj
     */
    private getCurUserGroupInfoById;
    /**
     * 根据节点信息获取到集团下单位的父级元素
     * 被调用之处：assembleLocationOrgList() 返回搜索后的组织列表
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getUnitParentsById;
    /**
     * 根据节点信息获取特定组织的所有父级元素
     * 被调用之处：assembleCustomTreeData()
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getParentsById;
    /**
     * 根据节点信息获取特定组织的所有子级元素
     * 被调用之处：assembleCustomTreeData()
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getChildrenById;
    /**
     * 根据节点信息获取特定用户分组的所有父级元素
     * 被调用之处：assembleCustomSysUserGroupTreeData()
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getSysUserGroupParentsById;
    /**
     * 根据节点信息获取特定用户分组的所有子级元素
     * 被调用之处：assembleCustomSysUserGroupTreeData()
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getSysUserGroupChildrenById;
    listenTreeExpand(obj: any): void;
    listenSysUserTreeExpand(obj: any): void;
    /**
     * 修改群组
     */
    listenGroupChange(item: any): void;
    listenPageIndexChange(e: any): void;
    listenClosePanelChange(e: boolean): void;
    listenSelectionsChange(obj: any): void;
    listenSearchResultChange(changed: boolean): void;
    /**
     * 监听最近联系人变化
     * @param obj 最近联系人数据
     */
    listenRecentContactsChange(obj: any): void;
    /**
     * 该方法大概率为已废弃方法，应该是兼容保留 2022.4.6
     * 根据ids(多个id，英文逗号隔开)获取人员信息
     * @ param ids
     */
    getSelectedInfo(ids: string): void;
    /**
     * 目前此方法不存在被调用之处，应该是兼容保留 2022.4.6
     * 人员展示区datagrid用于数据加载(搜索、点击组织树、是否含子集)
     */
    unSelectedListLoad(): void;
    private nodeExpanded;
    private hlDataToTree;
    private hlDealData;
    private hlSysUserGroupDataToTree;
    private hlSysUserGroupDealData;
    /**
     * 组织数据转换
     * @param plainSource 接口原始数据
     * @param layer 层级
     * @returns 返回树形接口的数据
     */
    private dataToTree;
    /**
     * 系统用户分组数据转换
     * @param plainSource 接口原始数据
     * @param layer 层级
     * @returns 返回树形接口的数据
     */
    private sysUserGroupDataToTree;
    private dealDataWhenExpandTreeNode;
    /**
     * 预处理组织数据
     */
    private dealData;
    private dealSysUserGroupDataWhenExpandTreeNode;
    private dealSysUserGroupData;
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    treeData(parents: any, treeSource: any, layer: number): void;
    private assembleFinalText;
    private addRecentContacts;
    private initFavorites;
    /**
     * 选择完人后，点击确认、取消按钮的逻辑
     * @param numberType 0：取消；1：确定
     */
    returnResult(numberType: number): void;
    /**
     * 切换人员/下级组织/我的群组，暂时无用，后续完善功能 2022.4.6
     * todo: 展示区面包导航
     * @param type 切换类型
     */
    toggleType(type: string): void;
    toggleIncludeCurrentUser(e: any): void;
    toggleChildHierarchy(e: any): void;
    changeisExclude(): void;
    loadDataSelected(res: any): void;
    loadSysUserGroupDataSelected(res: any): void;
    /**
     * datagrid数据加载，候选区域重新请求数据。
     */
    datagridLoad(): void;
    /**
     * 判断某个对象是否在数组内
     * @param value 对象属性值
     * @param field 对象key
     * @param array 数组
     * @returns boolean
     */
    _isInArray(value: string, field: string, array: any[]): boolean;
    /**
     * 在已选人员展示区内，点击清空已选按钮时触发
     * @returns null
     */
    deleteAll(): void;
    /**
     * 删除右侧已选人员列表中的一条数据
     */
    moveToLeft(data: any): void;
    /**
     * 从一个数组中删除一条数据
     * @param originArray 数据源
     */
    private _removeOneFromArray;
    listenSearchText(e: KeyboardEvent): void;
    searchClear(): void;
    onSearch(): void;
    private unifiedSearch;
    private assembeDataBySearch;
    /**
     * 用于外部触发显示弹窗，目前仅在src/app的demo中被调用
     * @param e   true|false
     */
    dialogIsShow(e: any): void;
    clearVal(): void;
    changeTabs(e: any): void;
    /**
     * input框标签删除逻辑 todo 强依赖用户编号唯一
     * @param id 该条数据
     */
    onRemoveSelectItem(item: string, event: any): void;
    mouseoverBut(): void;
    mouseoutBut(): void;
    farrisDialogshow(): void;
    farrisDialogShowInWf(): void;
    private showPersonnelSelectorDialog;
    private showPersonnelSelectorDialogInWf;
    farrisDialogbeforeClose: () => boolean;
    private synchronizeSelections;
    private assembleDataByUserId;
    private mapFields2Component;
    farrisDialogclose(): void;
    dialogFiltershow(): void;
    dialogFilterclose(token: boolean): void;
    setShowLeaderStatus(checkStatus: boolean): void;
    drop(event: CdkDragDrop<string[]>): void;
    togglePanelMode(e: PanelMode): void;
    private checkDisplayTab;
    private updateStatusAfterClosePanel;
    private getFilterSysUserGroupData;
    private adjustModalDialogSize;
    private confirmSearchOrg;
    private hlConfirmSearchOrg;
    private setGlobalConfigParam;
    private setParamInChildComponent;
    private checkSelectionsIncludeCode;
    clearFilterSelectionsHandle(): void;
    hideFilterDataPanelHandle(e: any): void;
    clearAllFilterSelections(): void;
    private initLocaleItems;
    private checkGroupExtend;
    loadedOrgTree(e: any): void;
    loadedUserGrouptree(e: any): void;
    private selectOrgTreeNode;
    private selectUserGroupTreeNode;
    quickShowDialog(e: any): void;
    getPopoverContext(index: number): any;
    private getOrgALLPath;
}
