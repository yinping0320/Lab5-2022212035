import { EventEmitter, OnInit, AfterViewInit, TemplateRef, SimpleChanges, OnChanges, ChangeDetectorRef } from '@angular/core';
import { ApiLocalService } from '../../utils/api-service';
import { FavoritesTool } from '../../utils/favorites.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { GroupTool } from '../../utils/group.tool';
export declare class OrgPersonnelComponent implements OnInit, AfterViewInit, OnChanges {
    private apiService;
    private favoritesTool;
    private groupTool;
    private cd;
    farrisTree: TreeTableComponent;
    orgTreeCell: TemplateRef<any>;
    idField: string;
    absUserOrgUrl: any;
    absOrgType: any;
    pageIndex: number;
    pageSize: any;
    pageTotalAll: number;
    multiSelect: any;
    pageTotal: number;
    favoritesList: any[];
    enableChildHierarchy: boolean;
    includeStopUser: boolean;
    includeCurrentUser: boolean;
    enablePagination: boolean;
    enableFavorites: boolean;
    orderField: string;
    userTypeMode: string;
    orgIdField: string;
    orgId: string;
    treeListData: any[];
    enableHierarchicalLoading: boolean;
    includeStopOrg: boolean;
    originalTreeData: any;
    personnelOrderField: string;
    filterId: string;
    showUserCode: boolean;
    onlyCurrentOrg: boolean;
    withPermission: boolean;
    selectionsChange: EventEmitter<any>;
    items: any[];
    selections: any[];
    private pEnableChildHierarchy;
    private pIncludeCurrentUser;
    _onlyCurrentOrg: boolean;
    locationOrgText: string;
    searchOrgElementVisible: boolean;
    locationOrgList: any[];
    treeTableCols: any[];
    allChecked: boolean;
    showGroupPersonnelDialog: boolean;
    selectedGroupId: string;
    searchPlaceholder: string;
    groupIcon: string;
    searchText: string;
    stopNodeSelected: boolean;
    onSearching: boolean;
    constructor(apiService: ApiLocalService, favoritesTool: FavoritesTool, groupTool: GroupTool, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    /**
         * 全局搜索框
         */
    onSearch(size: any): void;
    listenSearchText(e: KeyboardEvent): void;
    searchClear(): void;
    toggleIncludeCurrentUser(e: any): void;
    /**
     * 切换包含子部门
     */
    toggleChildHierarchy(e: any): void;
    listenTreeExpand(obj: any): void;
    getOrganizationByParentNode(parentNode: any): void;
    /**
         * 预处理组织数据
         */
    private dealData;
    loadDataSelected(res: any): void;
    hideSearchOrgElement(e: any): void;
    private hlAssembleLocationOrgList;
    searchLocationOrg(e: any): void;
    locationOrg(orgNode: any): void;
    /**
     * 数据转换
     * @param parents 父级节点信息
     * @param treeSource 原始数据信息
     * @param layer 层级
     */
    treeData(parents: any, treeSource: any, layer: number): void;
    private hlDataToTree;
    private nodeExpanded;
    private hlDealData;
    private expandTreeNode;
    private getCurrentPath;
    private assembleLocationOrgList;
    /**
     * 根据节点信息获取到集团下单位的父级元素
     * @param array 原始数据
     * @param curNode 节点信息
     * @returns null
     */
    private getUnitParentsById;
    private sortArray;
    private assembleOrgFullPath;
    groupPersonnelDialogChange(e: any): void;
    beforePageIndexChange(inputEl: KeyboardEvent, maxNumber: any): void;
    toggleAll(): void;
    toggleOne(item: any): void;
    turnOverPage(dir: string, num: number): void;
    switchPage(size: any): void;
    toggleFavorites(e: any, item: any): void;
    assembleDataByOrgId(): void;
    /**
     * datagrid用于数据展示
     */
    unSelectedListLoad(): void;
    /**
     * 选中并插入当前行数据到右侧
     * @param data 当前行的数据
     * @param collection 暂存当前数据的集合
     */
    _insertOneIntoSelections(data: any): void;
    /**
     * 判断是否在内
     * @param value value
     * @param field field
     * @param array array
     * @returns 位置索引
     */
    _isInArray(value: string, field: string, array: any[]): number;
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     */
    pageChangeCheck(): void;
}
