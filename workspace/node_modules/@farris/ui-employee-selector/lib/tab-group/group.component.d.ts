import { AfterViewInit, EventEmitter, OnInit } from '@angular/core';
import { FavoritesTool } from '../../utils/favorites.tool';
import { Group, GroupItem } from '../../utils/group.tool';
import { OrgPersonnelComponent } from '../tab-org-personnel/op.component';
import { DataLoadingService } from '../../utils/loading-service';
export declare class GroupComponent implements OnInit, AfterViewInit {
    private groupService;
    private favoritesTool;
    groupPersonnelComponent: OrgPersonnelComponent;
    idField: string;
    multiSelect: any;
    absOrgType: string;
    searchText: any;
    orgId: string;
    userIds: string;
    includeStopUser: boolean;
    searchPage: boolean;
    includeCurrentUser: boolean;
    busNum: string;
    enableFavorites: boolean;
    pageSize: number;
    userTypeMode: string;
    orderField: string;
    enablePagination: boolean;
    absUserOrgUrl: string;
    treeListData: any[];
    orgIdField: string;
    enableHierarchicalLoading: boolean;
    includeStopOrg: boolean;
    originalTreeData: any;
    personnelOrderField: string;
    filterId: string;
    dataLoadingService: DataLoadingService;
    validElementsInfo: string;
    groupExtendInfo: string;
    onlyCurrentOrg: boolean;
    withPermission: boolean;
    selectionsChange: EventEmitter<any>;
    groupChange: EventEmitter<any>;
    groupIdField: string;
    userIdField: string;
    selections: any[];
    cloneUserIds: string;
    cloneSelections: any[];
    noDataImg: string;
    allChecked: boolean;
    items: any[];
    favoritesList: any[];
    groupData: Group;
    personnelList: any[];
    groupPersonnels: any[];
    publicVisible: boolean;
    personalVisible: boolean;
    publicToken: string;
    personalToken: string;
    selectedGroupId: string;
    allIndexId: string;
    showGroupPersonnelDialog: boolean;
    currentGroupType: string;
    showUserCode: boolean;
    loadingServiceMessage: string;
    constructor(groupService: any, favoritesTool: FavoritesTool);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    editGroup(e: MouseEvent, item: GroupItem): void;
    deleteGroup(e: MouseEvent, item: GroupItem): void;
    /**
     * 添加群组成员
     */
    appendGroupPersonnel(): void;
    toggleGroupPersonnelDialog(show: boolean, groupType?: string): void;
    assembleData(): void;
    getPersonnelsByGroup(item: any, groupType?: string): void;
    getGroupList(): void;
    searchByCodeOrName(): void;
    toggleFavorites(e: any, item: any): void;
    toggleVisible(e: any, type: string): void;
    restoreSelections(): void;
    toggleAll(): void;
    toggleOne(data: any): void;
    /**
     * datagrid用于数据展示
     */
    loadGroupList(): void;
    /**
     * 全选后处理
     * @param dataArr 全选的值
     */
    checkAll(): void;
    /**
     * 全部取消
     * @param dataArr 取消的数据
     * @returns void
     */
    unCheckAll(): void;
    /**
     * 当前行选中
     * @param data 当前行的数据（）
     */
    selectLine(data: any): void;
    /**
     * 单选取消选中
     * @param data 取消选中行
     */
    unSelectLine(data: any): void;
    private emitSelections;
    /**
     *  取消选中
     * @param $event 取消勾选的数据
     */
    cancelSelections($event: any): void;
    /**
     * 全部取消勾选
     */
    clearCheckeds(): void;
    clearUserIds(): void;
    /**
     * 选中并插入当前行数据到右侧
     * @param data 当前行的数据
     * @param collection 暂存当前数据的集合
     */
    _insertOneIntoSelections(data: any): void;
    /**
     * 判断是否在内
     * @param value value
     * @param field field
     * @param array array
     * @returns 位置索引
     */
    _isInArray(value: string, field: string, array: any[]): number;
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     */
    toggleChecked(): void;
    private isAllChecked;
    trackByFn(index: any, item: any): any;
}
