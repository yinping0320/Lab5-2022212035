/**
 * @fileoverview added by tsickle
 * Generated from: lib/tab-recent-contacts/trc.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ChangeDetectorRef, Injector } from '@angular/core';
import * as _ from 'lodash-es';
import { noDataImg } from '../../assets/resource';
import { NotifyService } from '@farris/ui-notify';
import { FavoritesTool } from '../../utils/favorites.tool';
export class RecentContactsComponent {
    /**
     * @param {?} notifyService
     * @param {?} favoritesTool
     * @param {?} injector
     */
    constructor(notifyService, favoritesTool, injector) {
        this.notifyService = notifyService;
        this.favoritesTool = favoritesTool;
        this.injector = injector;
        this.orgId = '';
        this.userIds = '';
        this.selectionsChange = new EventEmitter();
        this.recentContactsChange = new EventEmitter();
        this.allChecked = false;
        this.selections = [];
        // 是否显示用户编号
        this.showUserCode = true;
        this.cloneUserIds = '';
        this.cloneSelections = [];
        this.allIndexId = 'allIndexId';
        this.noDataImg = noDataImg;
        this.items = [];
        this.recentContactsList = [];
        this.favoritesList = [];
        this.allIndexId = Math.random().toString(16).substring(3, 12);
        this.cdRef = this.injector.get(ChangeDetectorRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.favoritesTool.favoritesSubject.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.favoritesList = data;
            if (this.enableFavorites) {
                this.loadRecentContactsList();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    assembleData() {
        if (this.searchPage) {
            this.searchByCodeOrName();
        }
        else {
            this.getRecentContactsList();
        }
    }
    /**
     * @return {?}
     */
    searchByCodeOrName() {
        this.items = this.items.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            return item.code.indexOf(this.searchText) !== -1 || item.name.indexOf(this.searchText) !== -1;
        }));
    }
    /**
     * @return {?}
     */
    restoreSelections() {
        this.selections = _.cloneDeep(this.cloneSelections);
        this.toggleChecked();
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    }
    /**
     * @return {?}
     */
    toggleAll() {
        if (!this.allChecked) {
            this.checkAll();
        }
        else {
            this.unCheckAll();
        }
        this.cdRef.detectChanges();
        this.emitSelections();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    toggleOne(data) {
        if (data.checked) {
            this.unSelectLine(data);
        }
        else {
            this.selectLine(data);
        }
        this.emitSelections();
    }
    /**
     * 用于数据展示
     * @return {?}
     */
    loadRecentContactsList() {
        this.items = [];
        this.recentContactsList.forEach((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            // const indexId = Math.random().toString(16).substring(3, 10);
            // const item = {
            //     abbreviation: res.abbreviation,
            //     code: res.code,
            //     defaultOrgId: res.defaultOrgId,
            //     defaultOrgPath: res.defaultOrgPath,
            //     ext1: res.ext1,
            //     ext2: res.ext2,
            //     fullPathName: res.fullPathName,
            //     name: res.name,
            //     orgTypeId: res.orgTypeId,
            //     secLevel: res.secLevel,
            //     sortOrder: res.sortOrder,
            //     state: res.state,
            //     su: res.su,
            //     userId: res.userId,
            //     orgAllPath: res.orgAllPath,
            //     type: 'people',
            //     checked: false,
            //     inFavorites: false,
            //     indexId
            // };
            /** @type {?} */
            const item = _.cloneDeep(res);
            item.checked = false;
            item.inFavorites = false;
            item.indexId = Math.random().toString(16).substring(2);
            if (this._isInArray(res['id'], 'id', this.selections) !== -1) {
                item.checked = true;
            }
            if (this._isInArray(res['id'], 'id', this.favoritesList) !== -1) {
                item.inFavorites = true;
            }
            item.displayName = !!this.showUserCode ? ('[' + item.code + ']' + item.name) : item.name;
            this.items.push(item);
        }));
        this.toggleChecked();
        this.cdRef.detectChanges();
    }
    /**
     * 全选后处理
     * @return {?}
     */
    checkAll() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this._insertOneIntoSelections(item);
            item.checked = true;
        }));
    }
    /**
     * 全部取消
     * @return {?} void
     */
    unCheckAll() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.selections.forEach((/**
             * @param {?} selection
             * @param {?} index
             * @return {?}
             */
            (selection, index) => {
                if (item['id'] === selection['id']) {
                    this.selections.splice(index, 1);
                }
            }));
            item.checked = false;
        }));
    }
    /**
     * 当前行选中
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    selectLine(data) {
        if (this.multiSelect) {
            this._insertOneIntoSelections(data);
        }
        else {
            this.userIds = '';
            this.selections = [];
            this.items.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item.checked) {
                    item.checked = false;
                }
            }));
            this._insertOneIntoSelections(data);
        }
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
    }
    /**
     * 单选取消选中
     * @param {?} data 取消选中行
     * @return {?}
     */
    unSelectLine(data) {
        /** @type {?} */
        const index = this._isInArray(data['id'], 'id', this.selections);
        if (index > -1) {
            this.selections.splice(index, 1);
        }
        if (this.allChecked) {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitSelections() {
        /** @type {?} */
        const emitObj = {
            selections: this.selections,
            token: 'recent'
        };
        this.selectionsChange.emit(emitObj);
    }
    /**
     * 获取最近联系人列表
     * @return {?}
     */
    getRecentContactsList() {
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'RecentContacts'
        };
        if (this.withPermission) {
            param.withPermission = true;
            param.authOp = 'UserManage';
        }
        this.favoritesTool.curdRecentContactsOrFavorites('query', param).subscribe((/**
         * @param {?} rcRes
         * @return {?}
         */
        (rcRes) => {
            /** @type {?} */
            const rcResData = rcRes ? rcRes.data : [];
            this.recentContactsList = rcResData;
            this.loadRecentContactsList();
            /** @type {?} */
            const ids = [];
            this.recentContactsList.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                ids.push(item[this.idField]);
            }));
            this.recentContactsChange.emit({
                recentContactsList: ids
            });
        }));
    }
    /**
     * @param {?} e
     * @param {?} item
     * @return {?}
     */
    toggleFavorites(e, item) {
        this.favoritesTool.toggleFavorites(e, item);
    }
    /**
     * 清空最近联系人
     * @return {?}
     */
    clearRecentContactsList() {
        if (!this.items.length) {
            return;
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            bizId: this.busNum,
            objectValue: 'RecentContacts',
            addList: []
        };
        this.favoritesTool.curdRecentContactsOrFavorites('modify', param).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            this.items = [];
            this.cdRef.detectChanges();
            this.recentContactsChange.emit({
                recentContactsList: []
            });
            // this.notifyService.info('已清空最近联系人！');
        }));
    }
    /**
     *  取消选中
     * @param {?} $event 取消勾选的数据
     * @return {?}
     */
    cancelSelections($event) {
        if (this.items.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item['id'] === $event.id)) === -1) {
            return;
        }
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (item['id'] === $event.id) {
                item.checked = false;
            }
        }));
        this.selections.forEach((/**
         * @param {?} selection
         * @param {?} index
         * @return {?}
         */
        (selection, index) => {
            if ($event.id === selection['id']) {
                this.selections.splice(index, 1);
            }
        }));
        this.allChecked = false;
    }
    /**
     * 全部取消勾选
     * @return {?}
     */
    clearCheckeds() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            item.checked = false;
        }));
        this.allChecked = false;
        this.selections = [];
    }
    /**
     * @return {?}
     */
    clearUserIds() {
        this.userIds = '';
    }
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    _insertOneIntoSelections(data) {
        // 如果当前数据已经移入右侧数据，则返回。
        if (this._isInArray(data['id'], 'id', this.selections) > -1) {
            return;
        }
        this.selections.push(data);
        this.selections = this.selections.slice();
    }
    /**
     * 判断是否在内
     * @param {?} value value
     * @param {?} field field
     * @param {?} array array
     * @return {?} 位置索引
     */
    _isInArray(value, field, array) {
        if (!field || !value) {
            throw new Error(this.validElementsInfo);
        }
        return array.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => value === item[field]));
    }
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    toggleChecked() {
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            if (this._isInArray(item['id'], 'id', this.selections) > -1) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
        if (this.isAllChecked()) {
            this.allChecked = true;
        }
        else {
            this.allChecked = false;
        }
    }
    /**
     * @private
     * @return {?}
     */
    isAllChecked() {
        /** @type {?} */
        let count = 0;
        /** @type {?} */
        let allChecked = false;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.selections.forEach((/**
             * @param {?} selection
             * @return {?}
             */
            selection => {
                if (item['id'] === selection['id']) {
                    count += 1;
                }
            }));
        }));
        if (this.items.length === count && count > 0) {
            allChecked = true;
        }
        return allChecked;
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByFn(index, item) {
        return index;
    }
}
RecentContactsComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-recent-contacts',
                template: "<div class=\"candidate\">\r\n    <div class=\"candidate-title\">\r\n        <span *ngIf=\"!multiSelect\"></span>\r\n        <div class=\"custom-control custom-checkbox mb-2\" *ngIf=\"multiSelect && items.length > 0\">\r\n            <input class=\"custom-control-input\" [id]=\"allIndexId\" type=\"checkbox\" [(ngModel)]=\"allChecked\">\r\n            <label class=\"custom-control-label\" [for]=\"allIndexId\" (click)=\"toggleAll()\">{{'personnelSelector.tabCommon.checkAll' | locale}}</label>\r\n        </div>\r\n        <a *ngIf=\"items.length > 0\" (click)=\"clearRecentContactsList()\" class=\"title-clearall\">{{'personnelSelector.tabCommon.clearAll' | locale}}</a>\r\n    </div>\r\n    <div class=\"candidate-content\">\r\n        <div *ngFor=\"let data of items; let i = index;trackBy: trackByFn\" class=\"s-selectedPerson\">\r\n            <div class=\"custom-control custom-checkbox mb-2\">\r\n                <input class=\"custom-control-input\" [id]=\"data.indexId\" type=\"checkbox\" [(ngModel)]=\"data.checked\">\r\n                <label class=\"custom-control-label\" [for]=\"data.indexId\" (click)=\"toggleOne(data)\">\r\n                    <div style=\"display: flex; height: 32px; margin: -21px 0 0 24px;\">\r\n                        <farris-avatar [avatarWidth]=\"32\" [avatarHeight]=\"32\" [cover]=\"data.ext1\" [readonly]=\"true\">\r\n                        </farris-avatar>\r\n                        <div style=\"margin-left: 11px;  margin-top: -2px;  padding-right: 10px; overflow: hidden;\">\r\n                            <p class=\"candidate-content-title\" title=\"{{data.displayName}}\">\r\n                                {{data.displayName}}</p>\r\n                            <p class=\"candidate-content-orgpath\" title=\"{{data.orgAllPath}}\">\r\n                                {{data.orgAllPath}}</p>\r\n                        </div>\r\n                    </div>\r\n                </label>\r\n            </div>\r\n            <!-- <input type=\"checkbox\" class=\"k-checkbox\" [(ngModel)]=\"data.checked\" [id]=\"data.indexId\" />\r\n            <label class=\"k-checkbox-label s-checkbox-lab\" [for]=\"data.indexId\" (click)=\"toggleOne(data)\">\r\n                <div style=\"display: flex; height: 35px;\">\r\n                    <farris-avatar [avatarWidth]=\"35\" [avatarHeight]=\"35\" [cover]=\"data.ext1\" [readonly]=\"true\"\r\n                        style=\"margin-left: 6px;\"></farris-avatar>\r\n                    <div style=\"margin-left: 11px;\">\r\n                        <p class=\"candidate-content-title\" [ngStyle]=\"{'width': enableFavorites ? '162px' : '192px'}\"\r\n                            title=\"{{data.displayName}}\">\r\n                            {{data.displayName}}</p>\r\n                        <p class=\"candidate-content-orgpath\" title=\"{{data.orgAllPath}}\"\r\n                            [ngStyle]=\"{'width': enableFavorites ? '162px' : '192px'}\">\r\n                            {{data.orgAllPath}}</p>\r\n                    </div>\r\n                </div>\r\n            </label> -->\r\n            <span class=\"f-icon f-icon-star\" *ngIf=\"enableFavorites\" [class.default-light-color]=\"data.inFavorites\"\r\n                [class.default-dark-color]=\"!data.inFavorites\" (click)=\"toggleFavorites($event, data)\"></span>\r\n        </div>\r\n        <div *ngIf=\"items.length===0\" [ngStyle]=\"{'background-image': noDataImg}\" class=\"fp-candidate-nodata\">\r\n            {{'personnelSelector.tabCommon.noUserData' | locale}}</div>\r\n    </div>\r\n</div>",
                styles: [":host{display:-webkit-box;display:flex;height:100%;-webkit-box-flex:1;flex:1;overflow:hidden;position:static;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.candidate{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex:1}.candidate .s-selectedPerson:hover{background:#eef5ff;border-radius:5px}.candidate .candidate-content{margin-top:3px;clear:both}.candidate .s-selectedPerson{min-width:240px;float:left;width:calc(50% - 6px);position:relative;height:40px;padding:5px 12px;margin:0 3px 1px}.candidate .s-selectedPerson .f-icon-star{position:absolute;top:13px;right:15px;font-size:14px}.candidate .s-selectedPerson .default-light-color{color:#f7b500}.candidate .s-selectedPerson .default-dark-color{color:#d8dce6}.candidate .k-checkbox-label::after,.candidate .k-checkbox-label::before{top:10px;font-size:16px;width:14px;height:14px}.candidate .fp-candidate-nodata{width:100px;height:100px;text-align:center;background-repeat:no-repeat;background-size:contain;margin:80px auto 0;color:#b4bccc;padding-top:110px}.candidate .candidate-content-title{margin:0;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;font-size:13px}.candidate .candidate-content-orgpath{margin:0;font-size:12px;overflow:hidden;white-space:nowrap;text-overflow:ellipsis;color:#c7ccd7}.candidate .candidate-title{display:-webkit-box;display:flex;-webkit-box-pack:justify;justify-content:space-between}.candidate .candidate-title .custom-control{margin:10px 0 0 15px;line-height:35px}.candidate .candidate-title .title-clearall{margin:10px 15px 0 0;color:#2a87ff;cursor:pointer;line-height:35px}.candidate .s-selectedPerson .custom-control-label::before{top:8px}"]
            }] }
];
/** @nocollapse */
RecentContactsComponent.ctorParameters = () => [
    { type: NotifyService },
    { type: FavoritesTool },
    { type: Injector }
];
RecentContactsComponent.propDecorators = {
    idField: [{ type: Input }],
    absOrgType: [{ type: Input }],
    absUserOrgUrl: [{ type: Input }],
    busNum: [{ type: Input }],
    searchText: [{ type: Input }],
    searchPage: [{ type: Input }],
    includeStopUser: [{ type: Input }],
    includeCurrentUser: [{ type: Input }],
    enableFavorites: [{ type: Input }],
    validElementsInfo: [{ type: Input }],
    multiSelect: [{ type: Input }],
    orgId: [{ type: Input }],
    userIds: [{ type: Input }],
    withPermission: [{ type: Input }],
    selectionsChange: [{ type: Output }],
    recentContactsChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RecentContactsComponent.prototype.idField;
    /**
     * 数据源类型，默认为'System_organization'，即设置为系统数据源，可获取系统组织、系统人员
     * 设置为'Administrative_organization'就是扩展数据源 ，可获取行政组织、行政人员
     * @type {?}
     */
    RecentContactsComponent.prototype.absOrgType;
    /** @type {?} */
    RecentContactsComponent.prototype.absUserOrgUrl;
    /** @type {?} */
    RecentContactsComponent.prototype.busNum;
    /** @type {?} */
    RecentContactsComponent.prototype.searchText;
    /** @type {?} */
    RecentContactsComponent.prototype.searchPage;
    /** @type {?} */
    RecentContactsComponent.prototype.includeStopUser;
    /** @type {?} */
    RecentContactsComponent.prototype.includeCurrentUser;
    /** @type {?} */
    RecentContactsComponent.prototype.enableFavorites;
    /** @type {?} */
    RecentContactsComponent.prototype.validElementsInfo;
    /** @type {?} */
    RecentContactsComponent.prototype.multiSelect;
    /** @type {?} */
    RecentContactsComponent.prototype.orgId;
    /** @type {?} */
    RecentContactsComponent.prototype.userIds;
    /** @type {?} */
    RecentContactsComponent.prototype.withPermission;
    /** @type {?} */
    RecentContactsComponent.prototype.selectionsChange;
    /** @type {?} */
    RecentContactsComponent.prototype.recentContactsChange;
    /**
     * @type {?}
     * @private
     */
    RecentContactsComponent.prototype.cdRef;
    /** @type {?} */
    RecentContactsComponent.prototype.allChecked;
    /** @type {?} */
    RecentContactsComponent.prototype.columns;
    /** @type {?} */
    RecentContactsComponent.prototype.selections;
    /** @type {?} */
    RecentContactsComponent.prototype.showUserCode;
    /** @type {?} */
    RecentContactsComponent.prototype.cloneUserIds;
    /** @type {?} */
    RecentContactsComponent.prototype.cloneSelections;
    /** @type {?} */
    RecentContactsComponent.prototype.allIndexId;
    /** @type {?} */
    RecentContactsComponent.prototype.noDataImg;
    /** @type {?} */
    RecentContactsComponent.prototype.items;
    /** @type {?} */
    RecentContactsComponent.prototype.recentContactsList;
    /** @type {?} */
    RecentContactsComponent.prototype.favoritesList;
    /**
     * @type {?}
     * @private
     */
    RecentContactsComponent.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    RecentContactsComponent.prototype.favoritesTool;
    /**
     * @type {?}
     * @private
     */
    RecentContactsComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJjLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZW1wbG95ZWUtc2VsZWN0b3IvIiwic291cmNlcyI6WyJsaWIvdGFiLXJlY2VudC1jb250YWN0cy90cmMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUNILFNBQVMsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBeUIsaUJBQWlCLEVBQUUsUUFBUSxFQUM3RixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEtBQUssQ0FBQyxNQUFNLFdBQVcsQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQVEzRCxNQUFNLE9BQU8sdUJBQXVCOzs7Ozs7SUFnRGhDLFlBQ1ksYUFBNEIsRUFDNUIsYUFBNEIsRUFDNUIsUUFBa0I7UUFGbEIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFDNUIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQXhCckIsVUFBSyxHQUFHLEVBQUUsQ0FBQztRQUNYLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFHWixxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzNDLHlCQUFvQixHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7UUFHekQsZUFBVSxHQUFHLEtBQUssQ0FBQztRQUVuQixlQUFVLEdBQVUsRUFBRSxDQUFDOztRQUV2QixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixvQkFBZSxHQUFHLEVBQUUsQ0FBQztRQUNyQixlQUFVLEdBQUcsWUFBWSxDQUFDO1FBQzFCLGNBQVMsR0FBRyxTQUFTLENBQUM7UUFDdEIs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QiwwQ0FBc0I7O0lBQ3RCLGlEQUFpQzs7SUFFakMsbURBQXFEOztJQUNyRCx1REFBeUQ7Ozs7O0lBRXpELHdDQUFpQzs7SUFDakMsNkNBQW1COztJQUNuQiwwQ0FBYTs7SUFDYiw2Q0FBdUI7O0lBRXZCLCtDQUFvQjs7SUFDcEIsK0NBQWtCOztJQUNsQixrREFBcUI7O0lBQ3JCLDZDQUEwQjs7SUFDMUIsNENBQXNCOztJQUN0Qix3Q0FBVzs7SUFDWCxxREFBd0I7O0lBQ3hCLGdEQUFtQjs7Ozs7SUFHZixnREFBb0M7Ozs7O0lBQ3BDLGdEQUFvQzs7Ozs7SUFDcEMsMkNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENvbXBvbmVudCwgSW5wdXQsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIENoYW5nZURldGVjdG9yUmVmLCBJbmplY3RvclxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgKiBhcyBfIGZyb20gJ2xvZGFzaC1lcyc7XHJcbmltcG9ydCB7IG5vRGF0YUltZyB9IGZyb20gJy4uLy4uL2Fzc2V0cy9yZXNvdXJjZSc7XHJcbmltcG9ydCB7IE5vdGlmeVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IEZhdm9yaXRlc1Rvb2wgfSBmcm9tICcuLi8uLi91dGlscy9mYXZvcml0ZXMudG9vbCc7XHJcbmltcG9ydCB7IFJmUmVxdWVzdFBhcmFtIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXNlci50eXBlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdsaWItcmVjZW50LWNvbnRhY3RzJyxcclxuICAgIHRlbXBsYXRlVXJsOiAnLi90cmMuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgc3R5bGVVcmxzOiBbJy4vdHJjLmNvbXBvbmVudC5jc3MnXSxcclxufSlcclxuZXhwb3J0IGNsYXNzIFJlY2VudENvbnRhY3RzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICAvLyDmk43kvZzliJfooajmiJbogIXliIbnu4TmiYDpnIDopoHnmoTkuLvplK7lrZfmrrXvvIzpu5jorqTkuLondXNlcklkJ1xyXG4gICAgQElucHV0KCkgaWRGaWVsZDogc3RyaW5nO1xyXG4gICAgLyoqXHJcbiAgICAgKiDmlbDmja7mupDnsbvlnovvvIzpu5jorqTkuLonU3lzdGVtX29yZ2FuaXphdGlvbifvvIzljbPorr7nva7kuLrns7vnu5/mlbDmja7mupDvvIzlj6/ojrflj5bns7vnu5/nu4Tnu4fjgIHns7vnu5/kurrlkZhcclxuICAgICAqIOiuvue9ruS4uidBZG1pbmlzdHJhdGl2ZV9vcmdhbml6YXRpb24n5bCx5piv5omp5bGV5pWw5o2u5rqQIO+8jOWPr+iOt+WPluihjOaUv+e7hOe7h+OAgeihjOaUv+S6uuWRmFxyXG4gICAgICovXHJcbiAgICBASW5wdXQoKSBhYnNPcmdUeXBlOiBzdHJpbmc7XHJcbiAgICAvLyDkvKDlhaXnmoR1cmzvvIzlvZPliY3kuLrpu5jorqTlgLwnL2FwaS9ydW50aW1lL3N5cy92MS4wL2Fic1VzZXJPcmcnXHJcbiAgICBASW5wdXQoKSBhYnNVc2VyT3JnVXJsOiBzdHJpbmc7XHJcbiAgICAvLyDkuJrliqHmoIfor4bvvIzpu5jorqTkuLonY29tbW9uJ1xyXG4gICAgQElucHV0KCkgYnVzTnVtOiBzdHJpbmc7XHJcbiAgICAvLyDmkJzntKLmoYbnmoTovpPlhaXlgLxcclxuICAgIEBJbnB1dCgpIHNlYXJjaFRleHQ6IGFueTtcclxuICAgIC8vIOaQnOe0ouaXtue/u+mhte+8jOaaguS4jea4healmueUqOmAlFxyXG4gICAgQElucHV0KCkgc2VhcmNoUGFnZTogYm9vbGVhbjtcclxuICAgIC8vIOaYr+WQpuWMheWQq+WBnOeUqOeUqOaIt++8jOm7mOiupOS4umZhbHNlXHJcbiAgICBASW5wdXQoKSBpbmNsdWRlU3RvcFVzZXI6IGJvb2xlYW47XHJcbiAgICAvLyDmmK/lkKbljIXlkKvmnKzkurrvvIzpu5jorqTkuLp0cnVlXHJcbiAgICBASW5wdXQoKSBpbmNsdWRlQ3VycmVudFVzZXI6IGJvb2xlYW47XHJcbiAgICAvLyDmmK/lkKblhYHorrjmlLbol4/kurrlkZjvvIzpu5jorqTkuLp0cnVl77yM5b2T5LiN5bGV56S64oCc5oiR55qE5pS26JeP4oCddGFi6aG15pe25Li6ZmFsc2VcclxuICAgIEBJbnB1dCgpIGVuYWJsZUZhdm9yaXRlczogYm9vbGVhbjtcclxuICAgIC8vIOWkmuivreebuOWFs1xyXG4gICAgQElucHV0KCkgdmFsaWRFbGVtZW50c0luZm86IHN0cmluZztcclxuXHJcbiAgICBASW5wdXQoKSBtdWx0aVNlbGVjdDogYW55O1xyXG4gICAgQElucHV0KCkgb3JnSWQgPSAnJztcclxuICAgIEBJbnB1dCgpIHVzZXJJZHMgPSAnJztcclxuICAgIEBJbnB1dCgpIHdpdGhQZXJtaXNzaW9uOiBib29sZWFuO1xyXG5cclxuICAgIEBPdXRwdXQoKSBzZWxlY3Rpb25zQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcbiAgICBAT3V0cHV0KCkgcmVjZW50Q29udGFjdHNDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgICBwcml2YXRlIGNkUmVmOiBDaGFuZ2VEZXRlY3RvclJlZjtcclxuICAgIGFsbENoZWNrZWQgPSBmYWxzZTtcclxuICAgIGNvbHVtbnM6IGFueTtcclxuICAgIHNlbGVjdGlvbnM6IGFueVtdID0gW107XHJcbiAgICAvLyDmmK/lkKbmmL7npLrnlKjmiLfnvJblj7dcclxuICAgIHNob3dVc2VyQ29kZSA9IHRydWU7XHJcbiAgICBjbG9uZVVzZXJJZHMgPSAnJztcclxuICAgIGNsb25lU2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgYWxsSW5kZXhJZCA9ICdhbGxJbmRleElkJztcclxuICAgIG5vRGF0YUltZyA9IG5vRGF0YUltZztcclxuICAgIGl0ZW1zID0gW107XHJcbiAgICByZWNlbnRDb250YWN0c0xpc3QgPSBbXTtcclxuICAgIGZhdm9yaXRlc0xpc3QgPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmeVNlcnZpY2UsXHJcbiAgICAgICAgcHJpdmF0ZSBmYXZvcml0ZXNUb29sOiBGYXZvcml0ZXNUb29sLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLmFsbEluZGV4SWQgPSBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMywgMTIpO1xyXG4gICAgICAgIHRoaXMuY2RSZWYgPSB0aGlzLmluamVjdG9yLmdldChDaGFuZ2VEZXRlY3RvclJlZik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNUb29sLmZhdm9yaXRlc1N1YmplY3Quc3Vic2NyaWJlKGRhdGEgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmZhdm9yaXRlc0xpc3QgPSBkYXRhO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVGYXZvcml0ZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZFJlY2VudENvbnRhY3RzTGlzdCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgfVxyXG5cclxuICAgIGFzc2VtYmxlRGF0YSgpIHtcclxuICAgICAgICBpZiAodGhpcy5zZWFyY2hQYWdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VhcmNoQnlDb2RlT3JOYW1lKCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5nZXRSZWNlbnRDb250YWN0c0xpc3QoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2VhcmNoQnlDb2RlT3JOYW1lKCkge1xyXG4gICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLml0ZW1zLmZpbHRlcihpdGVtID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIGl0ZW0uY29kZS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dCkgIT09IC0xIHx8IGl0ZW0ubmFtZS5pbmRleE9mKHRoaXMuc2VhcmNoVGV4dCkgIT09IC0xO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc3RvcmVTZWxlY3Rpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IF8uY2xvbmVEZWVwKHRoaXMuY2xvbmVTZWxlY3Rpb25zKTtcclxuICAgICAgICB0aGlzLnRvZ2dsZUNoZWNrZWQoKTtcclxuICAgICAgICBpZiAodGhpcy5pc0FsbENoZWNrZWQoKSkge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0b2dnbGVBbGwoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmFsbENoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja0FsbCgpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5DaGVja0FsbCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkUmVmLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB0aGlzLmVtaXRTZWxlY3Rpb25zKCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlT25lKGRhdGEpIHtcclxuICAgICAgICBpZiAoZGF0YS5jaGVja2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMudW5TZWxlY3RMaW5lKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0TGluZShkYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5lbWl0U2VsZWN0aW9ucygpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDnlKjkuo7mlbDmja7lsZXnpLpcclxuICAgICAqL1xyXG4gICAgbG9hZFJlY2VudENvbnRhY3RzTGlzdCgpIHtcclxuICAgICAgICB0aGlzLml0ZW1zID0gW107XHJcbiAgICAgICAgdGhpcy5yZWNlbnRDb250YWN0c0xpc3QuZm9yRWFjaChyZXMgPT4ge1xyXG4gICAgICAgICAgICAvLyBjb25zdCBpbmRleElkID0gTWF0aC5yYW5kb20oKS50b1N0cmluZygxNikuc3Vic3RyaW5nKDMsIDEwKTtcclxuICAgICAgICAgICAgLy8gY29uc3QgaXRlbSA9IHtcclxuICAgICAgICAgICAgLy8gICAgIGFiYnJldmlhdGlvbjogcmVzLmFiYnJldmlhdGlvbixcclxuICAgICAgICAgICAgLy8gICAgIGNvZGU6IHJlcy5jb2RlLFxyXG4gICAgICAgICAgICAvLyAgICAgZGVmYXVsdE9yZ0lkOiByZXMuZGVmYXVsdE9yZ0lkLFxyXG4gICAgICAgICAgICAvLyAgICAgZGVmYXVsdE9yZ1BhdGg6IHJlcy5kZWZhdWx0T3JnUGF0aCxcclxuICAgICAgICAgICAgLy8gICAgIGV4dDE6IHJlcy5leHQxLFxyXG4gICAgICAgICAgICAvLyAgICAgZXh0MjogcmVzLmV4dDIsXHJcbiAgICAgICAgICAgIC8vICAgICBmdWxsUGF0aE5hbWU6IHJlcy5mdWxsUGF0aE5hbWUsXHJcbiAgICAgICAgICAgIC8vICAgICBuYW1lOiByZXMubmFtZSxcclxuICAgICAgICAgICAgLy8gICAgIG9yZ1R5cGVJZDogcmVzLm9yZ1R5cGVJZCxcclxuICAgICAgICAgICAgLy8gICAgIHNlY0xldmVsOiByZXMuc2VjTGV2ZWwsXHJcbiAgICAgICAgICAgIC8vICAgICBzb3J0T3JkZXI6IHJlcy5zb3J0T3JkZXIsXHJcbiAgICAgICAgICAgIC8vICAgICBzdGF0ZTogcmVzLnN0YXRlLFxyXG4gICAgICAgICAgICAvLyAgICAgc3U6IHJlcy5zdSxcclxuICAgICAgICAgICAgLy8gICAgIHVzZXJJZDogcmVzLnVzZXJJZCxcclxuICAgICAgICAgICAgLy8gICAgIG9yZ0FsbFBhdGg6IHJlcy5vcmdBbGxQYXRoLFxyXG4gICAgICAgICAgICAvLyAgICAgdHlwZTogJ3Blb3BsZScsXHJcbiAgICAgICAgICAgIC8vICAgICBjaGVja2VkOiBmYWxzZSxcclxuICAgICAgICAgICAgLy8gICAgIGluRmF2b3JpdGVzOiBmYWxzZSxcclxuICAgICAgICAgICAgLy8gICAgIGluZGV4SWRcclxuICAgICAgICAgICAgLy8gfTtcclxuICAgICAgICAgICAgY29uc3QgaXRlbSA9IF8uY2xvbmVEZWVwKHJlcyk7XHJcbiAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBpdGVtLmluRmF2b3JpdGVzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGl0ZW0uaW5kZXhJZCA9IE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygyKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2lzSW5BcnJheShyZXNbJ2lkJ10sICdpZCcsIHRoaXMuc2VsZWN0aW9ucykgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBpdGVtLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9pc0luQXJyYXkocmVzWydpZCddLCAnaWQnLCB0aGlzLmZhdm9yaXRlc0xpc3QpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5pbkZhdm9yaXRlcyA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaXRlbS5kaXNwbGF5TmFtZSA9ICEhdGhpcy5zaG93VXNlckNvZGUgPyAoJ1snICsgaXRlbS5jb2RlICsgJ10nICsgaXRlbS5uYW1lKSA6IGl0ZW0ubmFtZTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5wdXNoKGl0ZW0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudG9nZ2xlQ2hlY2tlZCgpO1xyXG4gICAgICAgIHRoaXMuY2RSZWYuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5YWo6YCJ5ZCO5aSE55CGXHJcbiAgICAgKiBAcGFyYW0gZGF0YUFyciDlhajpgInnmoTlgLxcclxuICAgICAqL1xyXG4gICAgY2hlY2tBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9pbnNlcnRPbmVJbnRvU2VsZWN0aW9ucyhpdGVtKTtcclxuICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWFqOmDqOWPlua2iFxyXG4gICAgICogQHBhcmFtIGRhdGFBcnIg5Y+W5raI55qE5pWw5o2uXHJcbiAgICAgKiBAcmV0dXJucyB2b2lkXHJcbiAgICAgKi9cclxuICAgIHVuQ2hlY2tBbGwoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMuZm9yRWFjaCgoc2VsZWN0aW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW1bJ2lkJ10gPT09IHNlbGVjdGlvblsnaWQnXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlvZPliY3ooYzpgInkuK1cclxuICAgICAqIEBwYXJhbSBkYXRhIOW9k+WJjeihjOeahOaVsOaNru+8iO+8iVxyXG4gICAgICovXHJcbiAgICBzZWxlY3RMaW5lKGRhdGE6IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLm11bHRpU2VsZWN0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2luc2VydE9uZUludG9TZWxlY3Rpb25zKGRhdGEpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudXNlcklkcyA9ICcnO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGl0ZW0uY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5faW5zZXJ0T25lSW50b1NlbGVjdGlvbnMoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzQWxsQ2hlY2tlZCgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y2V6YCJ5Y+W5raI6YCJ5LitXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDlj5bmtojpgInkuK3ooYxcclxuICAgICAqL1xyXG4gICAgdW5TZWxlY3RMaW5lKGRhdGE6IGFueSkge1xyXG4gICAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5faXNJbkFycmF5KGRhdGFbJ2lkJ10sICdpZCcsIHRoaXMuc2VsZWN0aW9ucyk7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25zLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmFsbENoZWNrZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZW1pdFNlbGVjdGlvbnMoKSB7XHJcbiAgICAgICAgY29uc3QgZW1pdE9iaiA9IHtcclxuICAgICAgICAgICAgc2VsZWN0aW9uczogdGhpcy5zZWxlY3Rpb25zLFxyXG4gICAgICAgICAgICB0b2tlbjogJ3JlY2VudCdcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uc0NoYW5nZS5lbWl0KGVtaXRPYmopO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5pyA6L+R6IGU57O75Lq65YiX6KGoXHJcbiAgICAgKi9cclxuICAgIGdldFJlY2VudENvbnRhY3RzTGlzdCgpIHtcclxuICAgICAgICBjb25zdCBwYXJhbTogUmZSZXF1ZXN0UGFyYW0gPSB7XHJcbiAgICAgICAgICAgIGFic09yZ1R5cGU6IHRoaXMuYWJzT3JnVHlwZSxcclxuICAgICAgICAgICAgYml6SWQ6IHRoaXMuYnVzTnVtLFxyXG4gICAgICAgICAgICBvYmplY3RWYWx1ZTogJ1JlY2VudENvbnRhY3RzJ1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYodGhpcy53aXRoUGVybWlzc2lvbikge1xyXG4gICAgICAgICAgICBwYXJhbS53aXRoUGVybWlzc2lvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHBhcmFtLmF1dGhPcCA9ICdVc2VyTWFuYWdlJztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5mYXZvcml0ZXNUb29sLmN1cmRSZWNlbnRDb250YWN0c09yRmF2b3JpdGVzKCdxdWVyeScsIHBhcmFtKS5zdWJzY3JpYmUoKHJjUmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcmNSZXNEYXRhID0gcmNSZXMgPyByY1Jlcy5kYXRhIDogW107XHJcbiAgICAgICAgICAgIHRoaXMucmVjZW50Q29udGFjdHNMaXN0ID0gcmNSZXNEYXRhO1xyXG4gICAgICAgICAgICB0aGlzLmxvYWRSZWNlbnRDb250YWN0c0xpc3QoKTtcclxuICAgICAgICAgICAgY29uc3QgaWRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMucmVjZW50Q29udGFjdHNMaXN0LmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZHMucHVzaChpdGVtW3RoaXMuaWRGaWVsZF0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5yZWNlbnRDb250YWN0c0NoYW5nZS5lbWl0KHtcclxuICAgICAgICAgICAgICAgIHJlY2VudENvbnRhY3RzTGlzdDogaWRzXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHRvZ2dsZUZhdm9yaXRlcyhlOiBhbnksIGl0ZW06IGFueSkge1xyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzVG9vbC50b2dnbGVGYXZvcml0ZXMoZSwgaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDmuIXnqbrmnIDov5HogZTns7vkurpcclxuICAgICAqL1xyXG4gICAgY2xlYXJSZWNlbnRDb250YWN0c0xpc3QoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhcmFtOiBSZlJlcXVlc3RQYXJhbSA9IHtcclxuICAgICAgICAgICAgYWJzT3JnVHlwZTogdGhpcy5hYnNPcmdUeXBlLFxyXG4gICAgICAgICAgICBiaXpJZDogdGhpcy5idXNOdW0sXHJcbiAgICAgICAgICAgIG9iamVjdFZhbHVlOiAnUmVjZW50Q29udGFjdHMnLFxyXG4gICAgICAgICAgICBhZGRMaXN0OiBbXVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVzVG9vbC5jdXJkUmVjZW50Q29udGFjdHNPckZhdm9yaXRlcygnbW9kaWZ5JywgcGFyYW0pLnN1YnNjcmliZSgodmFsKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaXRlbXMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5jZFJlZi5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZW50Q29udGFjdHNDaGFuZ2UuZW1pdCh7XHJcbiAgICAgICAgICAgICAgICByZWNlbnRDb250YWN0c0xpc3Q6IFtdXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvLyB0aGlzLm5vdGlmeVNlcnZpY2UuaW5mbygn5bey5riF56m65pyA6L+R6IGU57O75Lq677yBJyk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogIOWPlua2iOmAieS4rVxyXG4gICAgICogQHBhcmFtICRldmVudCDlj5bmtojli77pgInnmoTmlbDmja5cclxuICAgICAqL1xyXG4gICAgY2FuY2VsU2VsZWN0aW9ucygkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5pdGVtcy5maW5kSW5kZXgoaXRlbSA9PiBpdGVtWydpZCddID09PSAkZXZlbnQuaWQpID09PSAtMSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaXRlbXMuZm9yRWFjaChpdGVtID0+IHtcclxuICAgICAgICAgICAgaWYgKGl0ZW1bJ2lkJ10gPT09ICRldmVudC5pZCkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMuZm9yRWFjaCgoc2VsZWN0aW9uLCBpbmRleCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoJGV2ZW50LmlkID09PSBzZWxlY3Rpb25bJ2lkJ10pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlhajpg6jlj5bmtojli77pgIlcclxuICAgICAqL1xyXG4gICAgY2xlYXJDaGVja2VkcygpIHtcclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9ucyA9IFtdO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVXNlcklkcygpIHtcclxuICAgICAgICB0aGlzLnVzZXJJZHMgPSAnJztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICog6YCJ5Lit5bm25o+S5YWl5b2T5YmN6KGM5pWw5o2u5Yiw5Y+z5L6nXHJcbiAgICAgKiBAcGFyYW0gZGF0YSDlvZPliY3ooYznmoTmlbDmja5cclxuICAgICAqIEBwYXJhbSBjb2xsZWN0aW9uIOaaguWtmOW9k+WJjeaVsOaNrueahOmbhuWQiFxyXG4gICAgICovXHJcbiAgICBfaW5zZXJ0T25lSW50b1NlbGVjdGlvbnMoZGF0YTogYW55KSB7XHJcbiAgICAgICAgLy8g5aaC5p6c5b2T5YmN5pWw5o2u5bey57uP56e75YWl5Y+z5L6n5pWw5o2u77yM5YiZ6L+U5Zue44CCXHJcbiAgICAgICAgaWYgKHRoaXMuX2lzSW5BcnJheShkYXRhWydpZCddLCAnaWQnLCB0aGlzLnNlbGVjdGlvbnMpID4gLTEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMucHVzaChkYXRhKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGlvbnMgPSB0aGlzLnNlbGVjdGlvbnMuc2xpY2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWIpOaWreaYr+WQpuWcqOWGhVxyXG4gICAgICogQHBhcmFtIHZhbHVlIHZhbHVlXHJcbiAgICAgKiBAcGFyYW0gZmllbGQgZmllbGRcclxuICAgICAqIEBwYXJhbSBhcnJheSBhcnJheVxyXG4gICAgICogQHJldHVybnMg5L2N572u57Si5byVXHJcbiAgICAgKi9cclxuICAgIF9pc0luQXJyYXkodmFsdWU6IHN0cmluZywgZmllbGQ6IHN0cmluZywgYXJyYXk6IGFueVtdKTogbnVtYmVyIHtcclxuICAgICAgICBpZiAoIWZpZWxkIHx8ICF2YWx1ZSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodGhpcy52YWxpZEVsZW1lbnRzSW5mbyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhcnJheS5maW5kSW5kZXgoaXRlbSA9PiB2YWx1ZSA9PT0gaXRlbVtmaWVsZF0pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog57+76aG15qOA5p+l77ya5Lq65ZGY5bGV56S65Yy655qE5Yu+6YCJ54q25oCB5LiO5bey6YCJ5Lq65ZGY5Yy65piv5ZCm5a+55bqUXHJcbiAgICAgKi9cclxuICAgIHRvZ2dsZUNoZWNrZWQoKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtcy5mb3JFYWNoKGl0ZW0gPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5faXNJbkFycmF5KGl0ZW1bJ2lkJ10sICdpZCcsIHRoaXMuc2VsZWN0aW9ucykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbS5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBbGxDaGVja2VkKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5hbGxDaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmFsbENoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpc0FsbENoZWNrZWQoKTogYm9vbGVhbiB7XHJcbiAgICAgICAgbGV0IGNvdW50ID0gMDtcclxuICAgICAgICBsZXQgYWxsQ2hlY2tlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICB0aGlzLml0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9ucy5mb3JFYWNoKHNlbGVjdGlvbiA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXRlbVsnaWQnXSA9PT0gc2VsZWN0aW9uWydpZCddKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY291bnQgKz0gMTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuaXRlbXMubGVuZ3RoID09PSBjb3VudCAmJiBjb3VudCA+IDApIHtcclxuICAgICAgICAgICAgYWxsQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhbGxDaGVja2VkO1xyXG4gICAgfVxyXG5cclxuICAgIHRyYWNrQnlGbihpbmRleCwgaXRlbSkge1xyXG4gICAgICAgIHJldHVybiBpbmRleDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19