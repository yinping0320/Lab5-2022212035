/**
 * @fileoverview added by tsickle
 * Generated from: lib/unSelectDatagridRoleComponent.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, EventEmitter, Output, ViewChild } from "@angular/core";
import { ApiLocalService } from "../utils/api-service";
import { DatagridComponent } from "@farris/ui-datagrid";
import { of } from 'rxjs';
// 兼容保留，该组件无用
export class unSelectDatagridRoleComponent {
    /**
     * @param {?} ApiLocalService
     */
    constructor(ApiLocalService) {
        this.ApiLocalService = ApiLocalService;
        this.isAllSelect = new EventEmitter();
        /**
         * 人员展示区的复选框取消勾选时触发逻辑
         * @param $event
         * @return
         */
        this.onBeforeUncheck = (/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            this.selections.forEach((/**
             * @param {?} selection
             * @param {?} index
             * @return {?}
             */
            (selection, index) => {
                if ($event.rowData["id"] === selection["id"]) {
                    this.selections.splice(index, 1);
                }
            }));
            /** @type {?} */
            let emitojb = {
                itemsRole: this.itemsRole,
                pageIndexRole: this.pageIndexRole,
                pageSizeRole: this.pageSizeRole,
                pageTotalRole: this.pageTotalRole,
                pageTotalAllRole: this.pageTotalAllRole,
                unSelectedListRole: this.unSelectedListRole
            };
            this.isAllSelect.emit(emitojb);
            return of(true);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.unSelectDatagridRole.loadData(this.itemsRole);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.pageChangeCheck();
    }
    /**
     * 下级组织展示区datagrid用于数据加载
     * @return {?}
     */
    unSelectedListRoleLoad() {
        this.itemsRole = [];
        this.unSelectedListRole.forEach((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            /** @type {?} */
            let name = res.nameChs;
            this.itemsRole.push({ "displayname": name, "id": res.id, "organizationName": res.remark, "userTotal": res.userTotal, "userInFo": res.userInfo, "userList": res.userList });
        }));
        this.unSelectDatagridRole.loadData(this.itemsRole);
        this.pageChangeCheck();
        /** @type {?} */
        let emitojb = {
            itemsRole: this.itemsRole,
            pageIndexRole: this.pageIndexRole,
            pageSizeRole: this.pageSizeRole,
            pageTotalRole: this.pageTotalRole,
            pageTotalAllRole: this.pageTotalAllRole,
            unSelectedListRole: this.unSelectedListRole
        };
        this.isAllSelect.emit(emitojb);
    }
    /**
     * 当前行选中
     * @param {?} data 当前行的数据（）
     * @return {?}
     */
    selectLine(data) {
        if (this.isSingleCheck) {
            if (this.selections.length == 0) {
                this._insertOneIntoSelections(data.data);
            }
            else if (this.selections.length >= 1) {
                alert(this.noSelectToRight);
            }
        }
        else {
            this._insertOneIntoSelections(data.data);
        }
        /** @type {?} */
        let emitojb = {
            itemsRole: this.itemsRole,
            pageIndexRole: this.pageIndexRole,
            pageSizeRole: this.pageSizeRole,
            pageTotalRole: this.pageTotalRole,
            pageTotalAllRole: this.pageTotalAllRole,
            unSelectedListRole: this.unSelectedListRole
        };
        this.isAllSelect.emit(emitojb);
    }
    //人员展示翻页触发查询（！）
    /**
     * @param {?} size
     * @return {?}
     */
    switchPage(size) {
        this.pageIndexRole = size.pageIndex;
        // if (this.searchPage) {
        //     let isChinese: number;
        //     if (/^[\u4e00-\u9fa5]+$/i.test(this.searchText)) {
        //         isChinese = 0;
        //     } else if (!(/^[\u4e00-\u9fa5]+$/i.test(this.searchText)) && !(escape(this.searchText).indexOf("%u") < 0)) {
        //         alert("输入框禁止同时输入汉字和拼音！")
        //     } else {
        //         isChinese = 1;
        //     }
        //     this.ApiLocalService.getPersonnelForUserName(this.pageSize, this.pageIndex, this.searchText, isChinese, this.isContain, this.path, this.isenabled).subscribe((res: any) => {
        //       this.unSelectedLists = res;
        //       var linshi: any = this.unSelectedLists;
        //       this.unSelectedList = linshi.data;
        //       this.pageTotalAll = linshi.total;
        //       this.pageTotal = Math.ceil(this.pageTotalAll / this.pageSize);
        //       if (this.pageTotal == 0) {
        //         this.pageTotal = 1;
        //       }
        //       this.unSelectedListLoad();
        //     });
        // } else {
        if (this.isLoadOutData) {
            //console.log("暂未开启")
        }
        else {
        }
        // }
    }
    /**
     * 选中并插入当前行数据到右侧
     * @param {?} data 当前行的数据
     * @return {?}
     */
    _insertOneIntoSelections(data) {
        /** @type {?} */
        let collection = [];
        // 如果当前数据已经移入右侧数据，则返回。
        if (this._isInArray(data["id"], "id", this.selections)) {
            return;
        }
        collection.push(data);
        this._insertSomeIntoSelections(collection);
    }
    /**
     * 判断是否在内
     * @param {?} value
     * @param {?} field
     * @param {?} array
     * @return {?}
     */
    _isInArray(value, field, array) {
        if (!field || !value) {
            throw new Error('前2个参数必填');
        }
        return array.find((/**
         * @param {?} item
         * @return {?}
         */
        item => value === item[field])) ? true : false;
    }
    /**
     * @param {?} userArray
     * @return {?}
     */
    _insertSomeIntoSelections(userArray) {
        userArray.forEach((/**
         * @param {?} user
         * @return {?}
         */
        user => {
            if (!this._isInArray(user["id"], "id", this.selections)) {
                this.selections.push(user);
            }
        }));
    }
    /**
     * 翻页检查：人员展示区的勾选状态与已选人员区是否对应
     * @return {?}
     */
    pageChangeCheck() {
        if (this.unSelectedListRole) {
            this.unSelectedListRole.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (this._isInArray(item.id, "id", this.selections)) {
                    this.unSelectDatagridRole.checkRow(item.id);
                }
                else {
                    this.unSelectDatagridRole.unCheckRow(item.id);
                }
            }));
        }
    }
}
unSelectDatagridRoleComponent.decorators = [
    { type: Component, args: [{
                template: `<farris-datagrid #unSelectDatagridRole class="s-unSelectDatagrid" [pagerViewMode]="'simple'" [showCheckbox]="true" [checkOnSelect]="true"
[selectOnCheck]="true" [multiSelect]="true" [columns]="columnsRole" [data]="itemsRole"
[enableSelectRow]="true" [showHeader]="false" [fitColumns]="true" [height]="370"
[showBorder]="false" [striped]="false" [fit]="true" [showPageNumber]="false"
[pageIndex]="pageIndexRole" [pageSize]="pageSizeRole" [total]="pageTotalAllRole"
(checked)="selectLine($event)" (pageChanged)="switchPage($event)"
[beforeUncheck]="onBeforeUncheck">
</farris-datagrid>`
            }] }
];
/** @nocollapse */
unSelectDatagridRoleComponent.ctorParameters = () => [
    { type: ApiLocalService }
];
unSelectDatagridRoleComponent.propDecorators = {
    unSelectDatagridRole: [{ type: ViewChild, args: ['unSelectDatagridRole',] }],
    columnsRole: [{ type: Input }],
    itemsRole: [{ type: Input }],
    pageIndexRole: [{ type: Input }],
    pageSizeRole: [{ type: Input }],
    pageTotalAllRole: [{ type: Input }],
    pathRole: [{ type: Input }],
    orgIdRole: [{ type: Input }],
    isContainRole: [{ type: Input }],
    pageTotalRole: [{ type: Input }],
    isSingleCheck: [{ type: Input }],
    selections: [{ type: Input }],
    noSelectToRight: [{ type: Input }],
    searchText: [{ type: Input }],
    isLoadOutData: [{ type: Input }],
    unSelectedRoleLists: [{ type: Input }],
    unSelectedListRole: [{ type: Input }],
    organizationList: [{ type: Input }],
    type: [{ type: Input }],
    listIdField: [{ type: Input }],
    searchPage: [{ type: Input }],
    isenabled: [{ type: Input }],
    isExcludeMe: [{ type: Input }],
    isAllSelect: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.unSelectDatagridRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.columnsRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.itemsRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.pageIndexRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.pageSizeRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.pageTotalAllRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.pathRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.orgIdRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isContainRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.pageTotalRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isSingleCheck;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.selections;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.noSelectToRight;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.searchText;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isLoadOutData;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.unSelectedRoleLists;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.unSelectedListRole;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.organizationList;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.type;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.listIdField;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.searchPage;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isenabled;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isExcludeMe;
    /** @type {?} */
    unSelectDatagridRoleComponent.prototype.isAllSelect;
    /**
     * 人员展示区的复选框取消勾选时触发逻辑
     * \@param $event
     * \@return
     * @type {?}
     */
    unSelectDatagridRoleComponent.prototype.onBeforeUncheck;
    /**
     * @type {?}
     * @private
     */
    unSelectDatagridRoleComponent.prototype.ApiLocalService;
}
//# sourceMappingURL=data:application/json;base64,