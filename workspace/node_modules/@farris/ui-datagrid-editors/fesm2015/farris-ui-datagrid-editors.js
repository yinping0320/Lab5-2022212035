import { NgZone, Directive, Renderer2, ElementRef, Injector, Input, HostBinding, Component, ViewChild, EventEmitter, Output, ViewEncapsulation, HostListener, NgModule } from '@angular/core';
import { ValidatorMessagerService, DatagridComponent, DatagridFacadeService, GRID_EDITORS, DomHandler } from '@farris/ui-datagrid';
import { ShowType, FarrisDatePickerModule } from '@farris/ui-datepicker';
import { MessagerService } from '@farris/ui-messager';
import { EventManager } from '@angular/platform-browser';
import { BsModalService } from '@farris/ui-modal';
import { FarrisFormsModule } from '@farris/ui-forms';
import { EnumEditorModule } from '@farris/ui-enum-editor';
import { FilterModule } from '@farris/ui-filter-editor';
import { SorterModule } from '@farris/ui-sort-editor';
import { InputGroupModule } from '@farris/ui-input-group';
import { debounceTime } from 'rxjs/operators';
import { LookupModule } from '@farris/ui-lookup';
import { RuntimeStateService } from '@farris/ui-common';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { TimePickerModule } from '@farris/ui-time-picker';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        this.render = render;
        this.el = el;
        this.injector = injector;
        this.placeholder = '';
        // 组件高度
        this.height = '';
        this.options = {};
        /**
         * 是否正在向server 发送请求
         */
        this.pending = false;
        /**
         * 禁止事件冒泡
         */
        this.stopPropagation = true;
        /**
         * 默认焦点
         */
        this.focus = true;
        this.validators = [];
        this._inputKeydown = null;
        this._editorClickEvent = null;
        this.cls = 'datagrid-editor';
        this.width = '100%';
        this.focusTimer = null;
        this.eventParams = (/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            /** @type {?} */
            let rowData = null;
            /** @type {?} */
            let rowId = null;
            if (this.dr) {
                rowData = this.dr.rowData;
                rowId = this.dr.rowId;
            }
            return {
                rowData,
                rowId,
                value: $event,
                form: this.group,
                formControl: this.formControl
            };
        });
        this.vms = this.injector.get(ValidatorMessagerService);
        this.dg = this.injector.get(DatagridComponent);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @return {?}
     */
    get dr() {
        return this.dg.selectedRow.dr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column && this.column.editor) {
            this.options = this.column.editor.options;
            this.validators = this.column.editor.validators || [];
            // 启用任意输入后，字符最大长度属性值验证
            // 当maxLength <= 0 时认为此属性无效
            if (this.options && this.options.nosearch !== undefined && this.options.nosearch) {
                if (this.options.maxLength !== undefined && this.options.maxLength <= 0) {
                    this.options.maxLength = undefined;
                }
            }
        }
        this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            this.dg['focusElement'] = this.inputElement;
        }));
        this.mouseDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this._editorClickEvent = e;
        }));
        this.mouseUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this._editorClickEvent = null;
        }));
        if (this.group) {
            this.formControl = (/** @type {?} */ (this.group.controls[this.column.field]));
        }
        // this.dblClickEvent = this.render.listen(this.el.nativeElement, 'dblclick', (e: MouseEvent) => {
        //     e.stopPropagation();
        //     e.preventDefault();
        // });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setFocus();
        if (this['instance']) {
            this['instance'].inDatagrid = true;
        }
        this.setErrorMessage();
        this._inputKeydown = this.render.listen(this.inputElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.ctrlKey || e.shiftKey) {
                e.stopPropagation();
            }
        }));
        if (this.formControl) {
            this.formControl.valueChanges.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                // 记录变更集
                if (!this.formControl.pristine) {
                    /** @type {?} */
                    const rowId = this.dg.selectedRow ? this.dg.selectedRow.id : '';
                    if (rowId) {
                        /** @type {?} */
                        const keyField = this.dg.idField;
                        /** @type {?} */
                        const changeData = { [keyField]: rowId, [this.column.field]: val };
                        this.dfs.appendChanges(changeData);
                    }
                }
                this.setErrorMessage();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.dblClickEvent) {
            this.dblClickEvent();
        }
        if (this.mouseDownEvent) {
            this.mouseDownEvent();
        }
        if (this.mouseUpEvent) {
            this.mouseUpEvent();
        }
        if (this.dg) {
            this.dg['focusElement'] = null;
        }
        if (this._inputKeydown) {
            this._inputKeydown();
            this._inputKeydown = null;
            this.inputElement = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setErrorMessage() {
        if (this.formControl && this.formControl.invalid) {
            Object.keys(this.formControl.errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                this.errorMessage = this.vms.getValidatorErrorMessage(key, this.validators);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFocus() {
        if (!this.focus) {
            return;
        }
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                if (this.focusTimer) {
                    clearTimeout(this.focusTimer);
                }
                this.focusTimer = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.inputElement && this.dg.editMode === 'cell') {
                        if (this.dg && this.dg.selectOnEditing) {
                            if (this.inputElement.select) {
                                this.inputElement.select();
                            }
                        }
                        else {
                            this.inputElement.focus();
                        }
                        this.dg['focusElement'] = this.inputElement;
                    }
                }), 10);
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventParams($event));
        }
    }
    /**
     * @return {?}
     */
    startPending() {
        this.pending = true;
        this.dg.pending = true;
    }
    /**
     * @return {?}
     */
    endPending() {
        this.pending = false;
        this.dg.pending = false;
    }
}
DatagridBaseEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'datagrid-editor',
            },] }
];
/** @nocollapse */
DatagridBaseEditorDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridBaseEditorDirective.propDecorators = {
    placeholder: [{ type: Input }],
    height: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    width: [{ type: HostBinding, args: ['style.width',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const InputDefaultOptions = {
    placeholder: '',
    isPassword: false,
    minLength: undefined,
    maxLength: undefined
};
/** @type {?} */
const LookupDefaultOptions = {
    dialogWidth: 500,
    textAlign: 'left',
    dialogHeight: 600,
    showMaxButton: true,
    showCloseButton: true,
    resizable: true,
    buttonAlign: 'center',
    searchOnServer: true,
    nosearch: false,
    editable: false,
    expandLevel: -1,
    readonly: false,
    useTip: false,
    useFavorite: false,
    isRecordSize: false,
    loadTreeDataType: 'default',
    enableFullTree: false,
    enableCascade: false,
    cascadeStatus: 'enable',
    enableClear: true,
    useExtendInfo: false,
    extInfoFields: '',
    extInfoFormatter: null,
    customFormatter: null,
    customNavFormatter: null,
    selectFirstInNav: false,
    loadDataWhenOpen: true,
    treeInfo: null,
    treeTableOptions: null,
    showCheckAll: false,
    quickSelect: {
        enable: false,
        showMore: true,
        showItemsCount: 10,
        footerHeight: 0
    },
    viewType: 'text',
    showCascadeControl: true,
    showNavigation: true,
    showSelected: false,
    beforeLoadData: null,
    beforeSelectData: null,
    allowQueryFields: null,
    useNewLayout: false,
    enableMultiFieldSearch: false,
    labels: null,
    searchBarMode: 'both',
    multipleChoiceSeparator: ','
};
/** @type {?} */
const InputGroupDefaultOptions = {
    showClear: true,
    groupText: '',
    disabled: false,
    readonly: false,
    editable: true,
    isPassword: false,
    enableViewPassword: true,
    textAlign: 'left',
    minLength: undefined,
    maxLength: undefined
};
/** @type {?} */
const DatePickerDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    locale: 'zh-cn',
    dateRange: false,
    dateRangeDatesDelimiter: '~',
    showTime: false,
    showType: ShowType.all,
    dateFormat: '',
    placeholder: '',
    maxDate: {
        year: 2030,
        month: 12,
        day: 31
    },
    minDate: {
        year: 1840,
        month: 1,
        day: 1
    },
    useDefault: false,
    returnType: 'String',
    returnFormat: '',
    showWeekNumbers: false,
    viewType: 'switch',
    showPresent: false,
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    firstDayOfWeek: 'mo'
};
/** @type {?} */
const ComboListDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    placeholder: '请选择',
    panelWidth: 300,
    panelHeight: 'auto',
    autoWidth: true,
    data: [],
    idField: 'id',
    multiSelect: false,
    uri: '',
    textField: '',
    valueField: '',
    enableCancelSelected: true,
    enableClear: true,
    itemTemplate: null,
    nosearch: false,
    showDisabledItem: true,
    disabledField: 'disabled'
};
/** @type {?} */
const NumberSpinnerDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    bigNumber: false,
    placeholder: '',
    precision: 0,
    step: 1,
    canNull: true,
    groupSeparator: ',',
    showButton: true,
    showZero: true,
    textAlign: ''
};
/** @type {?} */
const SwitchDefaultOptions = {
    readonly: false,
    disabled: false,
    square: false,
};
/** @type {?} */
const TimePickerDefaultOptions = {
    readonly: false,
    disabled: false,
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    format: 'HH:mm:ss',
    placeholder: '',
    use12Hours: false,
    showHeader: false
};
/** @type {?} */
const ComboLookupDefaultOptions = {
    autoWidth: false,
    readonly: false,
    disabled: false,
    editable: false,
    panelHeight: 300,
    panelWidth: 400,
    enableClear: true,
    enableCancelSelected: true,
    nosearch: false,
    showHeader: true,
    treeToList: false,
    navTreeToList: false,
    separator: ','
};
/** @type {?} */
const LanguageTextboxDefaultOptions = {
    languages: [],
    readonly: false,
    disabled: false,
    enableClear: true
};
/** @type {?} */
const EnumEditorDefaultOptions = {
    outType: 0,
    readonly: false,
    editable: false,
    disabled: false,
    enableClear: true,
    textField: 'name',
    valueField: 'value'
};
/** @type {?} */
const FilterEditorDefaultOptions = {
    columns: [],
    showCode: false,
    showSql: false,
    disabled: false,
    readonly: false,
    editable: false,
    enableClear: false,
    fieldEditor: { type: 'select' },
    enableExpress: false,
    returnType: 'string'
};
/** @type {?} */
const SortEditorDefaultOptions = {
    columns: [],
    enableClear: false,
    disabled: false,
    readonly: false,
    editable: false,
    fieldEditor: { type: 'select' },
    returnType: 'string'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridTextboxComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
        this.inputType = 'text';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, InputDefaultOptions, this.options);
        this.inputElement = this.instance.nativeElement;
        if (this.options.isPassword) {
            this.inputType = 'password';
        }
        else {
            this.inputType = 'text';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.instance = null;
        this.inputElement = null;
    }
}
DatagridTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-textbox',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <input #input [attr.type]="inputType" class="form-control "
            [attr.placeholder]="options?.placeholder" [formControlName]="column.field"  maxlength="{{options?.maxLength}}">
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridTextboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridTextboxComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['input',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridTextareaComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
        this.altEnterHandler = null;
        this.modalService = this.injector.get(BsModalService);
        this.messagerService = this.injector.get(MessagerService);
        this.eventManager = this.injector.get(EventManager);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (!this.dg.nowrap) {
            this.render.setStyle(this.instance.nativeElement, 'height', `${this.height}px`);
        }
        this.inputElement = this.instance.nativeElement;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.inputClickHandler = this.render.listen(this.instance.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                return false;
            }));
        }));
        this.bindEventHandler();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.instance) {
            this.inputClickHandler();
            if (this.altEnterHandler) {
                this.altEnterHandler();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindEventHandler() {
        this.altEnterHandler = this.eventManager.addEventListener(this.inputElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            /** @type {?} */
            const target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            const val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    }
    /**
     * @return {?}
     */
    showDialog() {
        const { dialogWidth, dialogHeight } = this.options;
        /** @type {?} */
        const opts = {
            width: dialogWidth || 500,
            height: dialogHeight || 400,
            showFontSize: true,
            enableWordCount: this.options.enableWordCount,
            countType: this.options.countType,
            maxLength: this.options.maxLength
        };
        this.messagerService.prompt2(this.column.title, this.formControl.value, opts).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            // 在弹窗中清空内容，关闭窗口无法清空行内编辑的内容
            if (v == null || v === undefined) {
                v = '';
            }
            if (v !== false) {
                this.formControl.setValue(v);
            }
            this.inputElement.focus();
            if (!this.options.onlyShowInDialog && this.wordcountref) {
                this.wordcountref.updateWordsCount();
            }
        }));
    }
}
DatagridTextareaComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-textarea',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="position:relative">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <textarea #input class="form-control"
                style="height:100%;resize:none;min-height:auto;"
                [formControlName]="column.field"
                [word-count]="options?.enableWordCount"
                [countType]="options?.countType"
                #wordcount="WordCountRef"
                [onlyShowInDialog]="options?.onlyShowInDialog"
                maxlength="{{options?.maxLength}}"
                [common-comments]="options?.comments"></textarea>
        </datagrid-tooltip>
        <span class="f-icon modal_maximize" title="弹出窗口进行编辑" *ngIf="options?.editType && options?.editType !== 'default'"
             style="position: absolute;top: 2px;right: 2px; cursor:pointer" (click)="showDialog()"></span>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridTextareaComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridTextareaComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['input',] }],
    wordcountref: [{ type: ViewChild, args: ['wordcount',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridEnumEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, EnumEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.inputGroupRef.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridEnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-enum-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
    <enum-editor-input #eei
        style="width: 100%"
        [formControlName]="column.field"
        [readonly]="options.readonly"
        [editable]="options.editable"
        [disabled]="options.disabled"
        [enableClear]="options.enableClear"
        [outType]="options.outType"
        [textField]="options.textField"
        [valueField]="options.valueField">
    </enum-editor-input>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridEnumEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridEnumEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['eei',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridFilterEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, FilterEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridFilterEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-filter-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <filter #filterEditor
            style="width: 100%"
            [formControlName]="column.field"
            [columns]="options.columns"
            [showCode]="options.showCode"
            [showSql]="options.showSql"
            [disabled]="options.disabled"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [enableClear]="options.enableClear"
            [fieldEditor]="options.fieldEditor"
            [enableExpress]="options.enableExpress"
            [returnType]="options.returnType"
            (showExpress)="options?.onshowExpress($event)"></filter>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridFilterEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridFilterEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['filterEditor',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSortEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, SortEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridSortEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-sort-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <sorter #sorter
            style="width: 100%"
            [formControlName]="column.field"
            [columns]="options.columns"
            [fieldEditor]="options.fieldEditor"
            [enableClear]="options.enableClear"
            [disabled]="options.disabled"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [returnType]="options.returnType"
        ></sorter>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSortEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridSortEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['sorter',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridCheckboxComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.nativeElement;
        this.checked = this.formControl.value;
        /** @type {?} */
        const align = this.column.align || 'left';
        this.render.setStyle(this.chkboxEl.nativeElement, 'justify-content', align);
        this.render.listen(this.inputElement, 'keydow.Sapce', this.onSpaceHandle);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSpaceHandle($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.checkedChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        event.stopPropagation();
        this.checkedChanges();
    }
    /**
     * @private
     * @return {?}
     */
    checkedChanges() {
        this.checked = !this.checked;
        this.formControl.setValue(this.checked);
        this.formControl.markAsDirty();
        if (this.options && this.options.valueChange) {
            /** @type {?} */
            const p = this.eventParams(event);
            p.value = this.checked;
            p['instance'] = this.instance;
            p['editor'] = this;
            this.options.valueChange(p);
        }
    }
}
DatagridCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-checkbox',
                template: `<div [formGroup]="group" class="f-datagrid-cell-formgroup" #chkbox>
    <div class="custom-control custom-checkbox f-checkradio-single">
        <input type="checkbox" #chk class="custom-control-input" [formControlName]="column.field" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div></div>
    `
            }] }
];
/** @nocollapse */
DatagridCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridCheckboxComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['chk',] }],
    chkboxEl: [{ type: ViewChild, args: ['chkbox',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:40:36
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:58:14
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
class DatagridDatepickerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, DatePickerDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.dateInput ? this.instance.dateInput.nativeElement : this.el.nativeElement.querySelector('input');
        super.ngAfterViewInit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
        if (this.inputElement) {
            this.inputElement.focus();
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-datepicker',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <farris-datepicker
            #datepicker
            style="width: 100%"
            [formControlName]="column.field"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [locale]="options.locale"
            [dateRange]="options.dateRange"
            [showTime]="options.showTime"
            [showType]="options.showType"
            [dateFormat]="options.dateFormat"
            [returnFormat]="options.returnFormat"
            [returnType]="options.returnType"
            [useDefault]="options.useDefault"
            [placeholder]="options.placeholder"
            [maxDate]="options.maxDate"
            [minDate]="options.minDate"
            [dateRangeDatesDelimiter]="options.dateRangeDatesDelimiter"
            [showWeekNumbers]="options?.showWeekNumbers"
            [shortcuts]="[]"
            (clear)="onClear($event)"
            (valueChange)="onValueChange($event)"
            [viewType]="options.viewType"
            [showPresent]="options.showPresent"
            [hourStep]="options.hourStep"
            [minuteStep]="options.minuteStep"
            [secondStep]="options.secondStep"
            [firstDayOfWeek]="options.firstDayOfWeek"
        ></farris-datepicker>
    </div>


    `
            }] }
];
/** @nocollapse */
DatagridDatepickerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridDatepickerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['datepicker',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridInputGroupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
        this.injector = injector;
        this.clear = new EventEmitter();
        this.clickHandle = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.textbox.nativeElement;
        this.options = Object.assign({}, InputGroupDefaultOptions, this.options);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear.call(this, this.eParams($event));
        }
        else {
            this.clear.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        if (this.options.clickHandle) {
            this.options.clickHandle.call(this, this.eParams($event));
        }
        else {
            this.clickHandle.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange.call(this, this.eParams($event));
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eParams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['$event'] = $event;
        p['instance'] = this.instance;
        p['editor'] = this;
        p.value = $event ? $event.value : '';
        return p;
    }
}
DatagridInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-inputgroup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <input-group #ig style="width: 100%"
            (clear)="onClear($event)"
            (clickHandle)="onClick($event)"
            (valueChange)="onValueChange($event)"
            [readonly] = "options.readonly"
            [editable] = "options.editable"
            [enableClear] = "options.showClear"
            [groupText] = "options.groupText"
            [isPassword] = "options.isPassword"
            [textAlign]="options.textAlign"
            [enableViewPassword]="options.enableViewPassword"
            [formControlName]="column.field"
            [maxLength]="options.maxLength"
            ></input-group>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridInputGroupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridInputGroupComponent.propDecorators = {
    clear: [{ type: Output }],
    clickHandle: [{ type: Output }],
    instance: [{ type: ViewChild, args: ['ig',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSelectComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
        this.enumData = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.nativeElement;
        if (this.options) {
            this.enumData = this.options.data;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        return false;
    }
}
DatagridSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-select',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup">
        <select #sel class="custom-select" [formControlName]="column.field" (click)="onClick($event)" >
            <option *ngFor="let col of enumData" value="{{col[options.valueField]}}">{{ col[options.textField] }}</option>
        </select>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSelectComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridSelectComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['sel',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 
class DatagridLookupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} rts
     * @param {?} injector
     */
    constructor(render, el, rts, injector) {
        super(render, el, injector);
        this.rts = rts;
        this.stopPropagation = false;
        this.extInfoFormatter = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.options.extInfoFormatter) {
                return this.options.extInfoFormatter({ bindingData: this.dr.rowData, instance: e.instance });
            }
            return '';
        });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    set controlId(id) {
        this.instance.controlId = id;
        if (this.instance.uri) {
            this.instance.controlId += '_' + this.instance.uri;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        if (!this.options.valueField) {
            this.options.valueField = this.options.idField;
        }
        if (this.options.showNavigation === undefined || this.options.showNavigation === null) {
            this.options.showNavigation = true;
        }
        this.options = Object.assign({}, LookupDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.instance.changeDetector.detectChanges();
        if (this.options.viewType === 'tag') {
            this.inputElement = this.instance.tagbox.nativeElement;
        }
        else {
            this.inputElement = this.instance.inputGroup.textbox.nativeElement;
        }
        super.ngAfterViewInit();
        if (this.options.loader) {
            if (this.instance['http']) {
                /** @type {?} */
                const getDataFn = this.instance['http'];
                this.instance['http'] = Object.assign({}, getDataFn, { getData: this.options.loader });
            }
            else {
                this.instance['http'] = { getData: this.options.loader };
            }
        }
        this.instance['host'] = this.dg;
        this.rts.state$.pipe(debounceTime(10)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (state && state.form && state.form.lookup && this.dg) {
                this.pending = state.form.lookup.pending;
                this.dg.pending = this.pending;
            }
        }));
    }
    /**
     * @return {?}
     */
    onDialogClosed() {
        // this.lookup.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    onDialogOpen() {
        this.instance.changeDetector.detectChanges();
    }
    /**
     * @return {?}
     */
    onLoadSuccess() {
        this.instance.changeDetector.detectChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClear(event) {
        // const rowData = this.instance.selectionMgr.getBindingData();
        // this.instance['defaultMapping'].lookupFieldMap(null, this.instance.mapFields, rowData);
        this.instance.changeDetector.detectChanges();
        if (this.options.clear) {
            this.options.clear();
        }
    }
    /**
     * @param {?} $evnet
     * @return {?}
     */
    onTagRemoved($evnet) {
        if (this.options.tagRemoved) {
            this.options.tagRemoved($evnet);
        }
    }
}
DatagridLookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-lookup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-lookup-grid #lookup style="width: 100%"
                id="{{ controlId }}"
                [formControlName]="column.field"
                [uri]="options.uri"
                [helpId]="options.helpId"
                [displayType]="options.displayType"
                [singleSelect]="options.singleSelect"
                [idField]="options.idField"
                [pageSize]="options.pageSize || 20"
                [pageIndex]="options.pageSize || 1"
                [pagination]="options.pageination"
                [textField]="options.textField"
                [valueField]="options.valueField"
                [title]="options.title"
                [useFavorite]="options.useFavorite"
                [isRecordSize]="options.isRecordSize"
                [useTip]="options.useTip"
                [editable]="options.editable"
                [readonly]="options.readonly"
                [dialogWidth]="options.dialogWidth"
                [dialogHeight]="options.dialogHeight"
                [showMaxButton]="options.showMaxButton"
                [showCloseButton]="options.showCloseButton"
                [resizable]="options.resizable"
                [buttonAlign]="options.buttonAlign"
                [enableClear]="options.enableClear"
                [searchOnServer]="options.searchOnServer"
                [nosearch]="options.nosearch"
                [maxLength]="options.maxLength"
                [mappingFn]="options.mappingFn"
                [mapFields]="options.mapFields"
                [context]="options.context"
                [expandLevel]="options.expandLevel"
                [dictPicking]="options.dictPicking"
                [dictPicked]="options.dictPicked"
                [enableFullTree]="options.enableFullTree"
                [loadTreeDataType]="options.loadTreeDataType"
                [enableCascade]="options.enableCascade"
                [cascadeStatus]="options.cascadeStatus"
                [useExtendInfo]="options.useExtendInfo"
                [extInfoFields]="options.extInfoFields"
                [extInfoFormatter]="options.extInfoFormatter"
                [textAlign]="options.textAlign"
                [loadDataWhenOpen]="options.loadDataWhenOpen"
                [selectFirstInNav]="options.selectFirstInNav"
                [customNavFormatter]="options.customNavFormatter"
                [customFormatter]="options.customFormatter"
                [treeInfo]="options?.treeInfo"
                [treeTableOptions]="options?.treeTableOptions"
                [showCheckAll]="options?.showCheckAll"
                [viewType]="options?.viewType"
                [quickSelect]="options?.quickSelect"
                [treeToList]="options?.treeToList"
                [navTreeToList]="options?.navTreeToList"
                [showCascadeControl]="options.showCascadeControl"
                [showNavigation]="options.showNavigation"
                [showSelected]="options.showSelected"
                [beforeLoadData]="options.beforeLoadData"
                [beforeSelectData]="options.beforeSelectData"
                [searchBarMode]="options.searchBarMode"
                [enableMultiFieldSearch]="options.enableMultiFieldSearch"
                [useNewLayout]="options.useNewLayout"
                (dialogClosed)="onDialogClosed()"
                (dialogOpened)="onDialogOpen()"
                (clear)="onClear($event)"
                (loadSuccess)="onLoadSuccess()"
                (tagRemoved)="onTagRemoved($event)"
                [multipleChoiceSeparator]="options.multipleChoiceSeparator"
                [labels]="options.labels"
                [allowQueryFields]="options.allowQueryFields"
            ></farris-lookup-grid>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridLookupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: RuntimeStateService },
    { type: Injector }
];
DatagridLookupComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['lookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridNumberSpinnerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, NumberSpinnerDefaultOptions, this.options);
        if (!this.options.textAlign) {
            this.options.textAlign = this.column.align || 'left';
        }
        this.inputElement = this.instance.input.nativeElement;
        // this.stopPropagation = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridNumberSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-numberspinner',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-number-spinner #num [step]="options.step"
                [max]="options.max"
                [min]="options.min"
                [canNull]="options.canNull"
                [precision]="options.precision"
                [editable]="options.editable"
                [bigNumber]="options.bigNumber"
                [showButton]="options.showButton"
                [showZero]="options.showZero"
                [groupSeparator]="options.groupSeparator"
                (valueChange)="onValueChange($event)"
                [textAlign]="options.textAlign"
                [formControlName]="column.field" style="width: 100%"></farris-number-spinner>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridNumberSpinnerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridNumberSpinnerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['num',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridComboListComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
        this.stopPropagation = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, ComboListDefaultOptions, this.options);
        if (this.options.showClear !== undefined) {
            this.options.enableClear = this.options.showClear;
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.input.textbox.nativeElement;
        super.ngAfterViewInit();
        // setTimeout(() => {
        //     this.instance.show();
        // });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        super.ngOnDestroy();
        this.inputElement = null;
    }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowPanel($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
        else if (this.options.onShown) {
            this.options.onShown(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onHidePanel($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
        else if (this.options.onHidden) {
            this.options.onHidden(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectChange($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.instance.hide();
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridComboListComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-combolist',
                template: `
        <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
            <farris-combo-list #cmblist style="width: 100%"
                [formControlName]="column.field"
                [readonly]= "options.readonly"
                [editable]= "options.editable"
                [(selectedValues)]="options.selectedValues"
                [idField]="options.idField"
                [textField]="options.textField"
                [multiSelect]="options.multiSelect"
                [valueField]="options.valueField"
                [uri]="options.uri"
                [data]="options.data"
                [nosearch]="options.nosearch"
                [maxLength]="options?.maxLength"
                [context]="options?.context"
                [itemTemplate]="options?.itemTemplate"
                [enableClear]="options.enableClear"
                [autoWidth]="options.autoWidth"
                [panelHeight]="options.panelHeight"
                [panelWidth]="options.panelWidth"
                [enableCancelSelected]="options.enableCancelSelected"
                [beforeShow]="options?.beforeShow"
                [beforeHide]="options?.beforeHide"
                (showPanel)="onShowPanel($event)"
                (hidePanel)="onHidePanel($event)"
                (clear)="onClear($event)"
                (valueChange)="onValueChange($event)"
                (selectChange)="onSelectChange($event)"
                [showPanelType]="options?.showPanelEvent || 'click'"
                [mappingField]="options?.mappingField"
                [disabledField]="options?.disabledField"
                [showDisabledItem]="options?.showDisabledItem"
            ></farris-combo-list>
        </div>
    `
            }] }
];
/** @nocollapse */
DatagridComboListComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridComboListComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['cmblist',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridSwitchComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, SwitchDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
        /** @type {?} */
        const align = this.column.align || 'left';
        if (align === 'left') {
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'justify-content', align);
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'padding-left', '0.75rem');
        }
        this.inputElement = this.instance.switchElRef.nativeElement;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['checked'] = this.instance.checked;
        p.value = this.instance['getValue'](this.instance.checked);
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    }
}
DatagridSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-switch',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="line-height:100%" #ctrlbox hidefocus="true">
        <farris-switch #switch [formControlName]="column.field"
        [square]="options.square"
        [readonly]="options.readonly"
        [disabled]="options.disabled"
        [checkedLabel]="options.checkedLabel"
        [uncheckedLabel]="options.uncheckedLabel"
        [trueValue]="options?.trueValue"
        [falseValue]="options?.falseValue"
        (valueChange)="onValueChange($event)"></farris-switch>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSwitchComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridSwitchComponent.propDecorators = {
    ctrlBoxEl: [{ type: ViewChild, args: ['ctrlbox',] }],
    instance: [{ type: ViewChild, args: ['switch',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridTimerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.timeInput.nativeElement;
        this.options = Object.assign({}, TimePickerDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p.value = this.instance.value;
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    }
}
DatagridTimerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-timer',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" >
        <farris-time-picker #timepicker
            style="width: 100%"
            [formControlName]="column.field"
            [readonly]= "options.readonly"
            [editable]= "options.editable"
            [hourStep] = "options.hourStep"
            [minuteStep] = "options.minuteStep"
            [secondStep] = "options.secondStep"
            [format]="options.format"
            [placeholder]="options.placeholder"
            [use12Hours]="options.use12Hours"
            (valueChange)="onValueChange($event)"
            [showHeader]="options.showHeader">
        </farris-time-picker>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridTimerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridTimerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['timepicker',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridCombolookupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, ComboLookupDefaultOptions, this.options);
        if (this.options.panelWidth === 'auto') {
            this.options.autoWidth = true;
        }
        if (this.options.multiSelect === undefined) {
            if (this.options.singleSelect !== undefined && this.options.singleSelect !== null) {
                this.options.multiSelect = !this.options.singleSelect;
            }
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.input.textbox.nativeElement;
        super.ngAfterViewInit();
    }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowPanel($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onHidePanel($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectChange($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.instance.hide();
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridCombolookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-combolookup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-combo-lookup style="width: 100%"
                #cmblookup
                [formControlName]="column.field"
                [idField]="options.idField"
                [textField]="options.textField"
                [displayType]="options.displayType"
                [multiSelect]="options.multiSelect"
                [mapFields]="options.mapFields"
                [uri]="options.uri"
                [nosearch]="options.nosearch"
                [maxLength]="options?.maxLength"
                [readonly]= "options.readonly"
                [editable]= "options.editable"
                [autoWidth]="options.autoWidth"
                [panelWidth]="options.panelWidth"
                [panelHeight]="options.panelHeight"
                [enableCancelSelected]="options.enableCancelSelected"
                [beforeShow]="options?.beforeShow"
                [beforeHide]="options?.beforeHide"
                [context]="options?.context"
                [enableClear]="options.enableClear"
                [showHeader]="options.showHeader"
                (showPanel)="onShowPanel($event)"
                (hidePanel)="onHidePanel($event)"
                (clear)="onClear($event)"
                (valueChange)="onValueChange($event)"
                (selectChange)="onSelectChange($event)"
                [data]="options?.data"
                [useTreeView]="options?.useTreeView"
                [columns]="options?.columns"
                [enableFullTree]="options?.enableFullTree"
                [treeToList]="options?.treeToList"
                [navTreeToList]="options?.navTreeToList"
                [separator]="options.separator"
            ></farris-combo-lookup>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridCombolookupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridCombolookupComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['cmblookup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridLanguageTextboxComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.input.textbox.nativeElement;
        this.options = Object.assign({}, LanguageTextboxDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
    }
}
DatagridLanguageTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-language-textbox',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="line-height:100%">
        <language-textbox #ins style="width: 100%"
            [languages]="options.languages" [formControlName]="column.field"
            [enableClear]="options.enableClear"
            [readonly]="options.readonly"
            [currentLanguage]="options.currentLanguage"
            ></language-textbox>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridLanguageTextboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridLanguageTextboxComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['ins',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const EditorTypes = {
    TEXTAREA: 'textarea',
    TEXTBOX: 'textbox',
    CHECKBOX: 'checkbox',
    DATEPICKER: 'datepicker',
    INPUTGROUP: 'input-group',
    SELECT: 'select',
    LOOKUP: 'lookup',
    NUMBERBOX: 'numberbox',
    COMBOLIST: 'combolist',
    SWITCH: 'switch',
    TIMEPICKER: 'timepicker',
    COMBOLOOKUP: 'combo-lookup',
    LANGUAGETEXTBOX: 'language-textbox',
    ENUMEDITOR: 'enum-editor',
    FILTEREDITOR: 'filter-editor',
    SORTEDITOR: 'sort-editor'
};
/** @type {?} */
const EditorProviders = [
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTAREA, value: DatagridTextareaComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTBOX, value: DatagridTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.CHECKBOX, value: DatagridCheckboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.DATEPICKER, value: DatagridDatepickerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.INPUTGROUP, value: DatagridInputGroupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SELECT, value: DatagridSelectComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LOOKUP, value: DatagridLookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.NUMBERBOX, value: DatagridNumberSpinnerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLIST, value: DatagridComboListComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SWITCH, value: DatagridSwitchComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TIMEPICKER, value: DatagridTimerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLOOKUP, value: DatagridCombolookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LANGUAGETEXTBOX, value: DatagridLanguageTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.ENUMEDITOR, value: DatagridEnumEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.FILTEREDITOR, value: DatagridFilterEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SORTEDITOR, value: DatagridSortEditorComponent }, multi: true }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridTooltipComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.tooltipPosition = 'right';
        this.cls = '';
        this.type = 'danger';
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onFocusIn() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onKeyup() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    showErrMsg() {
        // this.errorMessage = this.getErrorMsg();
        if (this.message !== null && this.message !== undefined) {
            this.show();
        }
    }
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    hide() {
        this.ngOnDestroy();
    }
    /**
     * @return {?}
     */
    show() {
        /** 如果存在则不新建，只需要修改里面的内容 */
        if (!this.container) {
            this.create();
        }
        else {
            DomHandler.findSingle(this.container, '.f-tooltip-text').innerText = this.message;
        }
        /** @type {?} */
        const boxEl = this.el.nativeElement.parentElement;
        /** @type {?} */
        const offset = DomHandler.getOffset(boxEl);
        /** @type {?} */
        const targetTop = offset.top;
        /** @type {?} */
        const targetLeft = offset.left;
        /** @type {?} */
        let left;
        /** @type {?} */
        let top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + DomHandler.getOuterWidth(boxEl);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - DomHandler.getOuterWidth(this.container);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + DomHandler.getOuterHeight(boxEl);
                break;
            case 'top-left':
                left = targetLeft;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    }
    /**
     * @return {?}
     */
    create() {
        /** @type {?} */
        let styleClass = 'f-tooltip ' + this.getThemeCls() + ' f-tooltip-' + this.tooltipPosition + ' ' + this.cls;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        const tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'f-tooltip-arrow ';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        const tooltipText = document.createElement('div');
        tooltipText.className = 'f-tooltip-text ';
        tooltipText.innerHTML = this.message;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    }
    /**
     * @private
     * @return {?}
     */
    getThemeCls() {
        if (this.type) {
            return 'f-tooltip-' + this.type;
        }
        return '';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    }
}
DatagridTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-tooltip',
                template: `
    <ng-content></ng-content>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatagridTooltipComponent.ctorParameters = () => [
    { type: ElementRef }
];
DatagridTooltipComponent.propDecorators = {
    tooltipPosition: [{ type: Input }],
    control: [{ type: Input }],
    positionStyle: [{ type: Input }],
    tooltipStyleClass: [{ type: Input }],
    message: [{ type: Input }],
    cls: [{ type: Input }],
    type: [{ type: Input }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onFocusIn: [{ type: HostListener, args: ['focusin',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }],
    onKeyup: [{ type: HostListener, args: ['keyup',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const editorComponents = [
    DatagridTooltipComponent,
    DatagridTextboxComponent,
    DatagridTextareaComponent,
    DatagridCheckboxComponent,
    DatagridDatepickerComponent,
    DatagridInputGroupComponent,
    DatagridSelectComponent,
    DatagridLookupComponent,
    DatagridNumberSpinnerComponent,
    DatagridComboListComponent,
    DatagridSwitchComponent,
    DatagridTimerComponent,
    DatagridCombolookupComponent,
    DatagridLanguageTextboxComponent,
    DatagridEnumEditorComponent,
    DatagridSortEditorComponent,
    DatagridFilterEditorComponent
];
class DatagridEditorsModule {
}
DatagridEditorsModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    DatagridBaseEditorDirective,
                    ...editorComponents,
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisDatePickerModule,
                    InputGroupModule,
                    LookupModule,
                    ComboListModule,
                    ComboLookupModule,
                    NumberSpinnerModule,
                    SwitchModule,
                    TimePickerModule,
                    LanguageTextboxModule,
                    ReactiveFormsModule,
                    EnumEditorModule,
                    FarrisFormsModule,
                    FilterModule,
                    SorterModule
                ],
                exports: [
                    DatagridBaseEditorDirective,
                    ...editorComponents
                ],
                entryComponents: [
                    ...editorComponents
                ],
                providers: []
            },] }
];

export { DatagridBaseEditorDirective, DatagridEditorsModule, DatagridEnumEditorComponent, DatagridFilterEditorComponent, DatagridSortEditorComponent, DatagridTextareaComponent, DatagridTextboxComponent, EditorProviders, EditorTypes, DatagridCheckboxComponent as ɵa, DatagridDatepickerComponent as ɵb, DatagridInputGroupComponent as ɵc, DatagridSelectComponent as ɵd, DatagridLookupComponent as ɵe, DatagridNumberSpinnerComponent as ɵf, DatagridComboListComponent as ɵg, DatagridSwitchComponent as ɵh, DatagridTimerComponent as ɵi, DatagridCombolookupComponent as ɵj, DatagridLanguageTextboxComponent as ɵk, DatagridTooltipComponent as ɵl };
//# sourceMappingURL=farris-ui-datagrid-editors.js.map
