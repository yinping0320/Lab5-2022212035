import { Directive, Renderer2, ElementRef, Injector, Input, HostBinding, NgZone, Component, ViewChild, EventEmitter, Output, ViewEncapsulation, HostListener, NgModule } from '@angular/core';
import { ValidatorMessagerService, DatagridComponent, DatagridFacadeService, GRID_EDITORS, DomHandler } from '@farris/ui-datagrid';
import { __extends, __assign, __spread } from 'tslib';
import { ShowType, FarrisDatePickerModule } from '@farris/ui-datepicker';
import { MessagerService } from '@farris/ui-messager';
import { EventManager } from '@angular/platform-browser';
import { BsModalService } from '@farris/ui-modal';
import { FarrisFormsModule } from '@farris/ui-forms';
import { EnumEditorModule } from '@farris/ui-enum-editor';
import { FilterModule } from '@farris/ui-filter-editor';
import { SorterModule } from '@farris/ui-sort-editor';
import { InputGroupModule } from '@farris/ui-input-group';
import { debounceTime } from 'rxjs/operators';
import { LookupModule } from '@farris/ui-lookup';
import { RuntimeStateService } from '@farris/ui-common';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { ComboListModule } from '@farris/ui-combo-list';
import { SwitchModule } from '@farris/ui-switch';
import { TimePickerModule } from '@farris/ui-time-picker';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { LanguageTextboxModule } from '@farris/ui-language-textbox';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridBaseEditorDirective = /** @class */ (function () {
    function DatagridBaseEditorDirective(render, el, injector) {
        var _this = this;
        this.render = render;
        this.el = el;
        this.injector = injector;
        this.placeholder = '';
        // 组件高度
        this.height = '';
        this.options = {};
        /**
         * 是否正在向server 发送请求
         */
        this.pending = false;
        /**
         * 禁止事件冒泡
         */
        this.stopPropagation = true;
        /**
         * 默认焦点
         */
        this.focus = true;
        this.validators = [];
        this._inputKeydown = null;
        this._editorClickEvent = null;
        this.cls = 'datagrid-editor';
        this.width = '100%';
        this.focusTimer = null;
        this.eventParams = (/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var rowData = null;
            /** @type {?} */
            var rowId = null;
            if (_this.dr) {
                rowData = _this.dr.rowData;
                rowId = _this.dr.rowId;
            }
            return {
                rowData: rowData,
                rowId: rowId,
                value: $event,
                form: _this.group,
                formControl: _this.formControl
            };
        });
        this.vms = this.injector.get(ValidatorMessagerService);
        this.dg = this.injector.get(DatagridComponent);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
    }
    Object.defineProperty(DatagridBaseEditorDirective.prototype, "dr", {
        get: /**
         * @return {?}
         */
        function () {
            return this.dg.selectedRow.dr;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column && this.column.editor) {
            this.options = this.column.editor.options;
            this.validators = this.column.editor.validators || [];
            // 启用任意输入后，字符最大长度属性值验证
            // 当maxLength <= 0 时认为此属性无效
            if (this.options && this.options.nosearch !== undefined && this.options.nosearch) {
                if (this.options.maxLength !== undefined && this.options.maxLength <= 0) {
                    this.options.maxLength = undefined;
                }
            }
        }
        this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
            _this.dg['focusElement'] = _this.inputElement;
        }));
        this.mouseDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this._editorClickEvent = e;
        }));
        this.mouseUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this._editorClickEvent = null;
        }));
        if (this.group) {
            this.formControl = (/** @type {?} */ (this.group.controls[this.column.field]));
        }
        // this.dblClickEvent = this.render.listen(this.el.nativeElement, 'dblclick', (e: MouseEvent) => {
        //     e.stopPropagation();
        //     e.preventDefault();
        // });
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.setFocus();
        if (this['instance']) {
            this['instance'].inDatagrid = true;
        }
        this.setErrorMessage();
        this._inputKeydown = this.render.listen(this.inputElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.ctrlKey || e.shiftKey) {
                e.stopPropagation();
            }
        }));
        if (this.formControl) {
            this.formControl.valueChanges.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                var _a;
                // 记录变更集
                if (!_this.formControl.pristine) {
                    /** @type {?} */
                    var rowId = _this.dg.selectedRow ? _this.dg.selectedRow.id : '';
                    if (rowId) {
                        /** @type {?} */
                        var keyField = _this.dg.idField;
                        /** @type {?} */
                        var changeData = (_a = {}, _a[keyField] = rowId, _a[_this.column.field] = val, _a);
                        _this.dfs.appendChanges(changeData);
                    }
                }
                _this.setErrorMessage();
            }));
        }
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.dblClickEvent) {
            this.dblClickEvent();
        }
        if (this.mouseDownEvent) {
            this.mouseDownEvent();
        }
        if (this.mouseUpEvent) {
            this.mouseUpEvent();
        }
        if (this.dg) {
            this.dg['focusElement'] = null;
        }
        if (this._inputKeydown) {
            this._inputKeydown();
            this._inputKeydown = null;
            this.inputElement = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.setErrorMessage = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.formControl && this.formControl.invalid) {
            Object.keys(this.formControl.errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.errorMessage = _this.vms.getValidatorErrorMessage(key, _this.validators);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.setFocus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.focus) {
            return;
        }
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (_this.focusTimer) {
                    clearTimeout(_this.focusTimer);
                }
                _this.focusTimer = setTimeout((/**
                 * @return {?}
                 */
                function () {
                    if (_this.inputElement && _this.dg.editMode === 'cell') {
                        if (_this.dg && _this.dg.selectOnEditing) {
                            if (_this.inputElement.select) {
                                _this.inputElement.select();
                            }
                        }
                        else {
                            _this.inputElement.focus();
                        }
                        _this.dg['focusElement'] = _this.inputElement;
                    }
                }), 10);
            }));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventParams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.startPending = /**
     * @return {?}
     */
    function () {
        this.pending = true;
        this.dg.pending = true;
    };
    /**
     * @return {?}
     */
    DatagridBaseEditorDirective.prototype.endPending = /**
     * @return {?}
     */
    function () {
        this.pending = false;
        this.dg.pending = false;
    };
    DatagridBaseEditorDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'datagrid-editor',
                },] }
    ];
    /** @nocollapse */
    DatagridBaseEditorDirective.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridBaseEditorDirective.propDecorators = {
        placeholder: [{ type: Input }],
        height: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class',] }],
        width: [{ type: HostBinding, args: ['style.width',] }]
    };
    return DatagridBaseEditorDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var InputDefaultOptions = {
    placeholder: '',
    isPassword: false,
    minLength: undefined,
    maxLength: undefined
};
/** @type {?} */
var LookupDefaultOptions = {
    dialogWidth: 500,
    textAlign: 'left',
    dialogHeight: 600,
    showMaxButton: true,
    showCloseButton: true,
    resizable: true,
    buttonAlign: 'center',
    searchOnServer: true,
    nosearch: false,
    editable: false,
    expandLevel: -1,
    readonly: false,
    useTip: false,
    useFavorite: false,
    isRecordSize: false,
    loadTreeDataType: 'default',
    enableFullTree: false,
    enableCascade: false,
    cascadeStatus: 'enable',
    enableClear: true,
    useExtendInfo: false,
    extInfoFields: '',
    extInfoFormatter: null,
    customFormatter: null,
    customNavFormatter: null,
    selectFirstInNav: false,
    loadDataWhenOpen: true,
    treeInfo: null,
    treeTableOptions: null,
    showCheckAll: false,
    quickSelect: {
        enable: false,
        showMore: true,
        showItemsCount: 10,
        footerHeight: 0
    },
    viewType: 'text',
    showCascadeControl: true,
    showNavigation: true,
    showSelected: false,
    beforeLoadData: null,
    beforeSelectData: null,
    allowQueryFields: null,
    useNewLayout: false,
    enableMultiFieldSearch: false,
    labels: null,
    searchBarMode: 'both',
    multipleChoiceSeparator: ','
};
/** @type {?} */
var InputGroupDefaultOptions = {
    showClear: true,
    groupText: '',
    disabled: false,
    readonly: false,
    editable: true,
    isPassword: false,
    enableViewPassword: true,
    textAlign: 'left',
    minLength: undefined,
    maxLength: undefined
};
/** @type {?} */
var DatePickerDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    locale: 'zh-cn',
    dateRange: false,
    dateRangeDatesDelimiter: '~',
    showTime: false,
    showType: ShowType.all,
    dateFormat: '',
    placeholder: '',
    maxDate: {
        year: 2030,
        month: 12,
        day: 31
    },
    minDate: {
        year: 1840,
        month: 1,
        day: 1
    },
    useDefault: false,
    returnType: 'String',
    returnFormat: '',
    showWeekNumbers: false,
    viewType: 'switch',
    showPresent: false,
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    firstDayOfWeek: 'mo'
};
/** @type {?} */
var ComboListDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    placeholder: '请选择',
    panelWidth: 300,
    panelHeight: 'auto',
    autoWidth: true,
    data: [],
    idField: 'id',
    multiSelect: false,
    uri: '',
    textField: '',
    valueField: '',
    enableCancelSelected: true,
    enableClear: true,
    itemTemplate: null,
    nosearch: false,
    showDisabledItem: true,
    disabledField: 'disabled'
};
/** @type {?} */
var NumberSpinnerDefaultOptions = {
    disabled: false,
    readonly: false,
    editable: true,
    bigNumber: false,
    placeholder: '',
    precision: 0,
    step: 1,
    canNull: true,
    groupSeparator: ',',
    showButton: true,
    showZero: true,
    textAlign: ''
};
/** @type {?} */
var SwitchDefaultOptions = {
    readonly: false,
    disabled: false,
    square: false,
};
/** @type {?} */
var TimePickerDefaultOptions = {
    readonly: false,
    disabled: false,
    hourStep: 1,
    minuteStep: 1,
    secondStep: 1,
    format: 'HH:mm:ss',
    placeholder: '',
    use12Hours: false,
    showHeader: false
};
/** @type {?} */
var ComboLookupDefaultOptions = {
    autoWidth: false,
    readonly: false,
    disabled: false,
    editable: false,
    panelHeight: 300,
    panelWidth: 400,
    enableClear: true,
    enableCancelSelected: true,
    nosearch: false,
    showHeader: true,
    treeToList: false,
    navTreeToList: false,
    separator: ','
};
/** @type {?} */
var LanguageTextboxDefaultOptions = {
    languages: [],
    readonly: false,
    disabled: false,
    enableClear: true
};
/** @type {?} */
var EnumEditorDefaultOptions = {
    outType: 0,
    readonly: false,
    editable: false,
    disabled: false,
    enableClear: true,
    textField: 'name',
    valueField: 'value'
};
/** @type {?} */
var FilterEditorDefaultOptions = {
    columns: [],
    showCode: false,
    showSql: false,
    disabled: false,
    readonly: false,
    editable: false,
    enableClear: false,
    fieldEditor: { type: 'select' },
    enableExpress: false,
    returnType: 'string'
};
/** @type {?} */
var SortEditorDefaultOptions = {
    columns: [],
    enableClear: false,
    disabled: false,
    readonly: false,
    editable: false,
    fieldEditor: { type: 'select' },
    returnType: 'string'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridTextboxComponent = /** @class */ (function (_super) {
    __extends(DatagridTextboxComponent, _super);
    function DatagridTextboxComponent(render, el, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.inputType = 'text';
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, InputDefaultOptions, this.options);
        this.inputElement = this.instance.nativeElement;
        if (this.options.isPassword) {
            this.inputType = 'password';
        }
        else {
            this.inputType = 'text';
        }
    };
    /**
     * @return {?}
     */
    DatagridTextboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.instance = null;
        this.inputElement = null;
    };
    DatagridTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-textbox',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <input #input [attr.type]=\"inputType\" class=\"form-control \"\n            [attr.placeholder]=\"options?.placeholder\" [formControlName]=\"column.field\"  maxlength=\"{{options?.maxLength}}\">\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTextboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridTextboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['input',] }]
    };
    return DatagridTextboxComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridTextareaComponent = /** @class */ (function (_super) {
    __extends(DatagridTextareaComponent, _super);
    function DatagridTextareaComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        _this.altEnterHandler = null;
        _this.modalService = _this.injector.get(BsModalService);
        _this.messagerService = _this.injector.get(MessagerService);
        _this.eventManager = _this.injector.get(EventManager);
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngOnInit.call(this);
        if (!this.dg.nowrap) {
            this.render.setStyle(this.instance.nativeElement, 'height', this.height + "px");
        }
        this.inputElement = this.instance.nativeElement;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.inputClickHandler = _this.render.listen(_this.instance.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                return false;
            }));
        }));
        this.bindEventHandler();
    };
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.instance) {
            this.inputClickHandler();
            if (this.altEnterHandler) {
                this.altEnterHandler();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridTextareaComponent.prototype.bindEventHandler = /**
     * @private
     * @return {?}
     */
    function () {
        this.altEnterHandler = this.eventManager.addEventListener(this.inputElement, 'keydown.alt.enter', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            /** @type {?} */
            var target = ((/** @type {?} */ (event.target)));
            /** @type {?} */
            var val = target.value + '\n';
            target.value = val;
            event.preventDefault();
            event.stopPropagation();
            return false;
        }));
    };
    /**
     * @return {?}
     */
    DatagridTextareaComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var _a = this.options, dialogWidth = _a.dialogWidth, dialogHeight = _a.dialogHeight;
        /** @type {?} */
        var opts = {
            width: dialogWidth || 500,
            height: dialogHeight || 400,
            showFontSize: true,
            enableWordCount: this.options.enableWordCount,
            countType: this.options.countType,
            maxLength: this.options.maxLength
        };
        this.messagerService.prompt2(this.column.title, this.formControl.value, opts).subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            // 在弹窗中清空内容，关闭窗口无法清空行内编辑的内容
            if (v == null || v === undefined) {
                v = '';
            }
            if (v !== false) {
                _this.formControl.setValue(v);
            }
            _this.inputElement.focus();
            if (!_this.options.onlyShowInDialog && _this.wordcountref) {
                _this.wordcountref.updateWordsCount();
            }
        }));
    };
    DatagridTextareaComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-textarea',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"position:relative\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <textarea #input class=\"form-control\"\n                style=\"height:100%;resize:none;min-height:auto;\"\n                [formControlName]=\"column.field\"\n                [word-count]=\"options?.enableWordCount\"\n                [countType]=\"options?.countType\"\n                #wordcount=\"WordCountRef\"\n                [onlyShowInDialog]=\"options?.onlyShowInDialog\"\n                maxlength=\"{{options?.maxLength}}\"\n                [common-comments]=\"options?.comments\"></textarea>\n        </datagrid-tooltip>\n        <span class=\"f-icon modal_maximize\" title=\"\u5F39\u51FA\u7A97\u53E3\u8FDB\u884C\u7F16\u8F91\" *ngIf=\"options?.editType && options?.editType !== 'default'\"\n             style=\"position: absolute;top: 2px;right: 2px; cursor:pointer\" (click)=\"showDialog()\"></span>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTextareaComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridTextareaComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['input',] }],
        wordcountref: [{ type: ViewChild, args: ['wordcount',] }]
    };
    return DatagridTextareaComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridEnumEditorComponent = /** @class */ (function (_super) {
    __extends(DatagridEnumEditorComponent, _super);
    function DatagridEnumEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridEnumEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, EnumEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridEnumEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.inputGroupRef.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridEnumEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-enum-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n    <enum-editor-input #eei\n        style=\"width: 100%\"\n        [formControlName]=\"column.field\"\n        [readonly]=\"options.readonly\"\n        [editable]=\"options.editable\"\n        [disabled]=\"options.disabled\"\n        [enableClear]=\"options.enableClear\"\n        [outType]=\"options.outType\"\n        [textField]=\"options.textField\"\n        [valueField]=\"options.valueField\">\n    </enum-editor-input>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridEnumEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridEnumEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['eei',] }]
    };
    return DatagridEnumEditorComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridFilterEditorComponent = /** @class */ (function (_super) {
    __extends(DatagridFilterEditorComponent, _super);
    function DatagridFilterEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridFilterEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, FilterEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridFilterEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridFilterEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-filter-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <filter #filterEditor\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [columns]=\"options.columns\"\n            [showCode]=\"options.showCode\"\n            [showSql]=\"options.showSql\"\n            [disabled]=\"options.disabled\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [enableClear]=\"options.enableClear\"\n            [fieldEditor]=\"options.fieldEditor\"\n            [enableExpress]=\"options.enableExpress\"\n            [returnType]=\"options.returnType\"\n            (showExpress)=\"options?.onshowExpress($event)\"></filter>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridFilterEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridFilterEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['filterEditor',] }]
    };
    return DatagridFilterEditorComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSortEditorComponent = /** @class */ (function (_super) {
    __extends(DatagridSortEditorComponent, _super);
    function DatagridSortEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridSortEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, SortEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridSortEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridSortEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-sort-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <sorter #sorter\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [columns]=\"options.columns\"\n            [fieldEditor]=\"options.fieldEditor\"\n            [enableClear]=\"options.enableClear\"\n            [disabled]=\"options.disabled\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [returnType]=\"options.returnType\"\n        ></sorter>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridSortEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridSortEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['sorter',] }]
    };
    return DatagridSortEditorComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridCheckboxComponent = /** @class */ (function (_super) {
    __extends(DatagridCheckboxComponent, _super);
    function DatagridCheckboxComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.nativeElement;
        this.checked = this.formControl.value;
        /** @type {?} */
        var align = this.column.align || 'left';
        this.render.setStyle(this.chkboxEl.nativeElement, 'justify-content', align);
        this.render.listen(this.inputElement, 'keydow.Sapce', this.onSpaceHandle);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.onSpaceHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.checkedChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.checkedChanges();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.checkedChanges = /**
     * @private
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
        this.formControl.setValue(this.checked);
        this.formControl.markAsDirty();
        if (this.options && this.options.valueChange) {
            /** @type {?} */
            var p = this.eventParams(event);
            p.value = this.checked;
            p['instance'] = this.instance;
            p['editor'] = this;
            this.options.valueChange(p);
        }
    };
    DatagridCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-checkbox',
                    template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup\" #chkbox>\n    <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [formControlName]=\"column.field\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div></div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridCheckboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridCheckboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['chk',] }],
        chkboxEl: [{ type: ViewChild, args: ['chkbox',] }]
    };
    return DatagridCheckboxComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:40:36
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:58:14
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
var DatagridDatepickerComponent = /** @class */ (function (_super) {
    __extends(DatagridDatepickerComponent, _super);
    function DatagridDatepickerComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, DatePickerDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.dateInput ? this.instance.dateInput.nativeElement : this.el.nativeElement.querySelector('input');
        _super.prototype.ngAfterViewInit.call(this);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
        if (this.inputElement) {
            this.inputElement.focus();
        }
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-datepicker',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <farris-datepicker\n            #datepicker\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [locale]=\"options.locale\"\n            [dateRange]=\"options.dateRange\"\n            [showTime]=\"options.showTime\"\n            [showType]=\"options.showType\"\n            [dateFormat]=\"options.dateFormat\"\n            [returnFormat]=\"options.returnFormat\"\n            [returnType]=\"options.returnType\"\n            [useDefault]=\"options.useDefault\"\n            [placeholder]=\"options.placeholder\"\n            [maxDate]=\"options.maxDate\"\n            [minDate]=\"options.minDate\"\n            [dateRangeDatesDelimiter]=\"options.dateRangeDatesDelimiter\"\n            [showWeekNumbers]=\"options?.showWeekNumbers\"\n            [shortcuts]=\"[]\"\n            (clear)=\"onClear($event)\"\n            (valueChange)=\"onValueChange($event)\"\n            [viewType]=\"options.viewType\"\n            [showPresent]=\"options.showPresent\"\n            [hourStep]=\"options.hourStep\"\n            [minuteStep]=\"options.minuteStep\"\n            [secondStep]=\"options.secondStep\"\n            [firstDayOfWeek]=\"options.firstDayOfWeek\"\n        ></farris-datepicker>\n    </div>\n\n\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridDatepickerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridDatepickerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['datepicker',] }]
    };
    return DatagridDatepickerComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridInputGroupComponent = /** @class */ (function (_super) {
    __extends(DatagridInputGroupComponent, _super);
    function DatagridInputGroupComponent(render, el, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.injector = injector;
        _this.clear = new EventEmitter();
        _this.clickHandle = new EventEmitter();
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridInputGroupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.textbox.nativeElement;
        this.options = Object.assign({}, InputGroupDefaultOptions, this.options);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridInputGroupComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear.call(this, this.eParams($event));
        }
        else {
            this.clear.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridInputGroupComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clickHandle) {
            this.options.clickHandle.call(this, this.eParams($event));
        }
        else {
            this.clickHandle.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridInputGroupComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange.call(this, this.eParams($event));
        }
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridInputGroupComponent.prototype.eParams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['$event'] = $event;
        p['instance'] = this.instance;
        p['editor'] = this;
        p.value = $event ? $event.value : '';
        return p;
    };
    DatagridInputGroupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-inputgroup',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <input-group #ig style=\"width: 100%\"\n            (clear)=\"onClear($event)\"\n            (clickHandle)=\"onClick($event)\"\n            (valueChange)=\"onValueChange($event)\"\n            [readonly] = \"options.readonly\"\n            [editable] = \"options.editable\"\n            [enableClear] = \"options.showClear\"\n            [groupText] = \"options.groupText\"\n            [isPassword] = \"options.isPassword\"\n            [textAlign]=\"options.textAlign\"\n            [enableViewPassword]=\"options.enableViewPassword\"\n            [formControlName]=\"column.field\"\n            [maxLength]=\"options.maxLength\"\n            ></input-group>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridInputGroupComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridInputGroupComponent.propDecorators = {
        clear: [{ type: Output }],
        clickHandle: [{ type: Output }],
        instance: [{ type: ViewChild, args: ['ig',] }]
    };
    return DatagridInputGroupComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSelectComponent = /** @class */ (function (_super) {
    __extends(DatagridSelectComponent, _super);
    function DatagridSelectComponent(render, el, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.enumData = [];
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.nativeElement;
        if (this.options) {
            this.enumData = this.options.data;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSelectComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        return false;
    };
    DatagridSelectComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-select',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup\">\n        <select #sel class=\"custom-select\" [formControlName]=\"column.field\" (click)=\"onClick($event)\" >\n            <option *ngFor=\"let col of enumData\" value=\"{{col[options.valueField]}}\">{{ col[options.textField] }}</option>\n        </select>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridSelectComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridSelectComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['sel',] }]
    };
    return DatagridSelectComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 
var DatagridLookupComponent = /** @class */ (function (_super) {
    __extends(DatagridLookupComponent, _super);
    function DatagridLookupComponent(render, el, rts, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.stopPropagation = false;
        _this.extInfoFormatter = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.options.extInfoFormatter) {
                return _this.options.extInfoFormatter({ bindingData: _this.dr.rowData, instance: e.instance });
            }
            return '';
        });
        return _this;
    }
    Object.defineProperty(DatagridLookupComponent.prototype, "controlId", {
        set: /**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            this.instance.controlId = id;
            if (this.instance.uri) {
                this.instance.controlId += '_' + this.instance.uri;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        if (!this.options.valueField) {
            this.options.valueField = this.options.idField;
        }
        if (this.options.showNavigation === undefined || this.options.showNavigation === null) {
            this.options.showNavigation = true;
        }
        this.options = Object.assign({}, LookupDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.instance.changeDetector.detectChanges();
        if (this.options.viewType === 'tag') {
            this.inputElement = this.instance.tagbox.nativeElement;
        }
        else {
            this.inputElement = this.instance.inputGroup.textbox.nativeElement;
        }
        _super.prototype.ngAfterViewInit.call(this);
        if (this.options.loader) {
            if (this.instance['http']) {
                /** @type {?} */
                var getDataFn = this.instance['http'];
                this.instance['http'] = __assign({}, getDataFn, { getData: this.options.loader });
            }
            else {
                this.instance['http'] = { getData: this.options.loader };
            }
        }
        this.instance['host'] = this.dg;
        this.rts.state$.pipe(debounceTime(10)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            if (state && state.form && state.form.lookup && _this.dg) {
                _this.pending = state.form.lookup.pending;
                _this.dg.pending = _this.pending;
            }
        }));
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onDialogClosed = /**
     * @return {?}
     */
    function () {
        // this.lookup.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onDialogOpen = /**
     * @return {?}
     */
    function () {
        this.instance.changeDetector.detectChanges();
    };
    /**
     * @return {?}
     */
    DatagridLookupComponent.prototype.onLoadSuccess = /**
     * @return {?}
     */
    function () {
        this.instance.changeDetector.detectChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridLookupComponent.prototype.onClear = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // const rowData = this.instance.selectionMgr.getBindingData();
        // this.instance['defaultMapping'].lookupFieldMap(null, this.instance.mapFields, rowData);
        this.instance.changeDetector.detectChanges();
        if (this.options.clear) {
            this.options.clear();
        }
    };
    /**
     * @param {?} $evnet
     * @return {?}
     */
    DatagridLookupComponent.prototype.onTagRemoved = /**
     * @param {?} $evnet
     * @return {?}
     */
    function ($evnet) {
        if (this.options.tagRemoved) {
            this.options.tagRemoved($evnet);
        }
    };
    DatagridLookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-lookup',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-lookup-grid #lookup style=\"width: 100%\"\n                id=\"{{ controlId }}\"\n                [formControlName]=\"column.field\"\n                [uri]=\"options.uri\"\n                [helpId]=\"options.helpId\"\n                [displayType]=\"options.displayType\"\n                [singleSelect]=\"options.singleSelect\"\n                [idField]=\"options.idField\"\n                [pageSize]=\"options.pageSize || 20\"\n                [pageIndex]=\"options.pageSize || 1\"\n                [pagination]=\"options.pageination\"\n                [textField]=\"options.textField\"\n                [valueField]=\"options.valueField\"\n                [title]=\"options.title\"\n                [useFavorite]=\"options.useFavorite\"\n                [isRecordSize]=\"options.isRecordSize\"\n                [useTip]=\"options.useTip\"\n                [editable]=\"options.editable\"\n                [readonly]=\"options.readonly\"\n                [dialogWidth]=\"options.dialogWidth\"\n                [dialogHeight]=\"options.dialogHeight\"\n                [showMaxButton]=\"options.showMaxButton\"\n                [showCloseButton]=\"options.showCloseButton\"\n                [resizable]=\"options.resizable\"\n                [buttonAlign]=\"options.buttonAlign\"\n                [enableClear]=\"options.enableClear\"\n                [searchOnServer]=\"options.searchOnServer\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options.maxLength\"\n                [mappingFn]=\"options.mappingFn\"\n                [mapFields]=\"options.mapFields\"\n                [context]=\"options.context\"\n                [expandLevel]=\"options.expandLevel\"\n                [dictPicking]=\"options.dictPicking\"\n                [dictPicked]=\"options.dictPicked\"\n                [enableFullTree]=\"options.enableFullTree\"\n                [loadTreeDataType]=\"options.loadTreeDataType\"\n                [enableCascade]=\"options.enableCascade\"\n                [cascadeStatus]=\"options.cascadeStatus\"\n                [useExtendInfo]=\"options.useExtendInfo\"\n                [extInfoFields]=\"options.extInfoFields\"\n                [extInfoFormatter]=\"options.extInfoFormatter\"\n                [textAlign]=\"options.textAlign\"\n                [loadDataWhenOpen]=\"options.loadDataWhenOpen\"\n                [selectFirstInNav]=\"options.selectFirstInNav\"\n                [customNavFormatter]=\"options.customNavFormatter\"\n                [customFormatter]=\"options.customFormatter\"\n                [treeInfo]=\"options?.treeInfo\"\n                [treeTableOptions]=\"options?.treeTableOptions\"\n                [showCheckAll]=\"options?.showCheckAll\"\n                [viewType]=\"options?.viewType\"\n                [quickSelect]=\"options?.quickSelect\"\n                [treeToList]=\"options?.treeToList\"\n                [navTreeToList]=\"options?.navTreeToList\"\n                [showCascadeControl]=\"options.showCascadeControl\"\n                [showNavigation]=\"options.showNavigation\"\n                [showSelected]=\"options.showSelected\"\n                [beforeLoadData]=\"options.beforeLoadData\"\n                [beforeSelectData]=\"options.beforeSelectData\"\n                [searchBarMode]=\"options.searchBarMode\"\n                [enableMultiFieldSearch]=\"options.enableMultiFieldSearch\"\n                [useNewLayout]=\"options.useNewLayout\"\n                (dialogClosed)=\"onDialogClosed()\"\n                (dialogOpened)=\"onDialogOpen()\"\n                (clear)=\"onClear($event)\"\n                (loadSuccess)=\"onLoadSuccess()\"\n                (tagRemoved)=\"onTagRemoved($event)\"\n                [multipleChoiceSeparator]=\"options.multipleChoiceSeparator\"\n                [labels]=\"options.labels\"\n                [allowQueryFields]=\"options.allowQueryFields\"\n            ></farris-lookup-grid>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridLookupComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: Injector }
    ]; };
    DatagridLookupComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['lookup',] }]
    };
    return DatagridLookupComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridNumberSpinnerComponent = /** @class */ (function (_super) {
    __extends(DatagridNumberSpinnerComponent, _super);
    function DatagridNumberSpinnerComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, NumberSpinnerDefaultOptions, this.options);
        if (!this.options.textAlign) {
            this.options.textAlign = this.column.align || 'left';
        }
        this.inputElement = this.instance.input.nativeElement;
        // this.stopPropagation = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridNumberSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-numberspinner',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-number-spinner #num [step]=\"options.step\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [canNull]=\"options.canNull\"\n                [precision]=\"options.precision\"\n                [editable]=\"options.editable\"\n                [bigNumber]=\"options.bigNumber\"\n                [showButton]=\"options.showButton\"\n                [showZero]=\"options.showZero\"\n                [groupSeparator]=\"options.groupSeparator\"\n                (valueChange)=\"onValueChange($event)\"\n                [textAlign]=\"options.textAlign\"\n                [formControlName]=\"column.field\" style=\"width: 100%\"></farris-number-spinner>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridNumberSpinnerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridNumberSpinnerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['num',] }]
    };
    return DatagridNumberSpinnerComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridComboListComponent = /** @class */ (function (_super) {
    __extends(DatagridComboListComponent, _super);
    function DatagridComboListComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        _this.stopPropagation = false;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, ComboListDefaultOptions, this.options);
        if (this.options.showClear !== undefined) {
            this.options.enableClear = this.options.showClear;
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.input.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        // setTimeout(() => {
        //     this.instance.show();
        // });
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.inputElement = null;
    };
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onShowPanel = 
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
        else if (this.options.onShown) {
            this.options.onShown(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onHidePanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
        else if (this.options.onHidden) {
            this.options.onHidden(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.onSelectChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridComboListComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.instance.hide();
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridComboListComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridComboListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-combolist',
                    template: "\n        <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n            <farris-combo-list #cmblist style=\"width: 100%\"\n                [formControlName]=\"column.field\"\n                [readonly]= \"options.readonly\"\n                [editable]= \"options.editable\"\n                [(selectedValues)]=\"options.selectedValues\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [multiSelect]=\"options.multiSelect\"\n                [valueField]=\"options.valueField\"\n                [uri]=\"options.uri\"\n                [data]=\"options.data\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options?.maxLength\"\n                [context]=\"options?.context\"\n                [itemTemplate]=\"options?.itemTemplate\"\n                [enableClear]=\"options.enableClear\"\n                [autoWidth]=\"options.autoWidth\"\n                [panelHeight]=\"options.panelHeight\"\n                [panelWidth]=\"options.panelWidth\"\n                [enableCancelSelected]=\"options.enableCancelSelected\"\n                [beforeShow]=\"options?.beforeShow\"\n                [beforeHide]=\"options?.beforeHide\"\n                (showPanel)=\"onShowPanel($event)\"\n                (hidePanel)=\"onHidePanel($event)\"\n                (clear)=\"onClear($event)\"\n                (valueChange)=\"onValueChange($event)\"\n                (selectChange)=\"onSelectChange($event)\"\n                [showPanelType]=\"options?.showPanelEvent || 'click'\"\n                [mappingField]=\"options?.mappingField\"\n                [disabledField]=\"options?.disabledField\"\n                [showDisabledItem]=\"options?.showDisabledItem\"\n            ></farris-combo-list>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridComboListComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridComboListComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['cmblist',] }]
    };
    return DatagridComboListComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridSwitchComponent = /** @class */ (function (_super) {
    __extends(DatagridSwitchComponent, _super);
    function DatagridSwitchComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridSwitchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, SwitchDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { });
        }
        /** @type {?} */
        var align = this.column.align || 'left';
        if (align === 'left') {
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'justify-content', align);
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'padding-left', '0.75rem');
        }
        this.inputElement = this.instance.switchElRef.nativeElement;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSwitchComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['checked'] = this.instance.checked;
        p.value = this.instance['getValue'](this.instance.checked);
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    };
    DatagridSwitchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-switch',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\n        <farris-switch #switch [formControlName]=\"column.field\"\n        [square]=\"options.square\"\n        [readonly]=\"options.readonly\"\n        [disabled]=\"options.disabled\"\n        [checkedLabel]=\"options.checkedLabel\"\n        [uncheckedLabel]=\"options.uncheckedLabel\"\n        [trueValue]=\"options?.trueValue\"\n        [falseValue]=\"options?.falseValue\"\n        (valueChange)=\"onValueChange($event)\"></farris-switch>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridSwitchComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridSwitchComponent.propDecorators = {
        ctrlBoxEl: [{ type: ViewChild, args: ['ctrlbox',] }],
        instance: [{ type: ViewChild, args: ['switch',] }]
    };
    return DatagridSwitchComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridTimerComponent = /** @class */ (function (_super) {
    __extends(DatagridTimerComponent, _super);
    function DatagridTimerComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridTimerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.timeInput.nativeElement;
        this.options = Object.assign({}, TimePickerDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { });
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridTimerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p.value = this.instance.value;
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    };
    DatagridTimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-timer',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" >\n        <farris-time-picker #timepicker\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [readonly]= \"options.readonly\"\n            [editable]= \"options.editable\"\n            [hourStep] = \"options.hourStep\"\n            [minuteStep] = \"options.minuteStep\"\n            [secondStep] = \"options.secondStep\"\n            [format]=\"options.format\"\n            [placeholder]=\"options.placeholder\"\n            [use12Hours]=\"options.use12Hours\"\n            (valueChange)=\"onValueChange($event)\"\n            [showHeader]=\"options.showHeader\">\n        </farris-time-picker>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTimerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridTimerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['timepicker',] }]
    };
    return DatagridTimerComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridCombolookupComponent = /** @class */ (function (_super) {
    __extends(DatagridCombolookupComponent, _super);
    function DatagridCombolookupComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, ComboLookupDefaultOptions, this.options);
        if (this.options.panelWidth === 'auto') {
            this.options.autoWidth = true;
        }
        if (this.options.multiSelect === undefined) {
            if (this.options.singleSelect !== undefined && this.options.singleSelect !== null) {
                this.options.multiSelect = !this.options.singleSelect;
            }
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    };
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.input.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onShowPanel = 
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onHidePanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.onSelectChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    };
    /**
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.hide = /**
     * @return {?}
     */
    function () {
        this.instance.hide();
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridCombolookupComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridCombolookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-combolookup',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-combo-lookup style=\"width: 100%\"\n                #cmblookup\n                [formControlName]=\"column.field\"\n                [idField]=\"options.idField\"\n                [textField]=\"options.textField\"\n                [displayType]=\"options.displayType\"\n                [multiSelect]=\"options.multiSelect\"\n                [mapFields]=\"options.mapFields\"\n                [uri]=\"options.uri\"\n                [nosearch]=\"options.nosearch\"\n                [maxLength]=\"options?.maxLength\"\n                [readonly]= \"options.readonly\"\n                [editable]= \"options.editable\"\n                [autoWidth]=\"options.autoWidth\"\n                [panelWidth]=\"options.panelWidth\"\n                [panelHeight]=\"options.panelHeight\"\n                [enableCancelSelected]=\"options.enableCancelSelected\"\n                [beforeShow]=\"options?.beforeShow\"\n                [beforeHide]=\"options?.beforeHide\"\n                [context]=\"options?.context\"\n                [enableClear]=\"options.enableClear\"\n                [showHeader]=\"options.showHeader\"\n                (showPanel)=\"onShowPanel($event)\"\n                (hidePanel)=\"onHidePanel($event)\"\n                (clear)=\"onClear($event)\"\n                (valueChange)=\"onValueChange($event)\"\n                (selectChange)=\"onSelectChange($event)\"\n                [data]=\"options?.data\"\n                [useTreeView]=\"options?.useTreeView\"\n                [columns]=\"options?.columns\"\n                [enableFullTree]=\"options?.enableFullTree\"\n                [treeToList]=\"options?.treeToList\"\n                [navTreeToList]=\"options?.navTreeToList\"\n                [separator]=\"options.separator\"\n            ></farris-combo-lookup>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridCombolookupComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridCombolookupComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['cmblookup',] }]
    };
    return DatagridCombolookupComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridLanguageTextboxComponent = /** @class */ (function (_super) {
    __extends(DatagridLanguageTextboxComponent, _super);
    function DatagridLanguageTextboxComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridLanguageTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.input.textbox.nativeElement;
        this.options = Object.assign({}, LanguageTextboxDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { });
        }
    };
    DatagridLanguageTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-language-textbox',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"line-height:100%\">\n        <language-textbox #ins style=\"width: 100%\"\n            [languages]=\"options.languages\" [formControlName]=\"column.field\"\n            [enableClear]=\"options.enableClear\"\n            [readonly]=\"options.readonly\"\n            [currentLanguage]=\"options.currentLanguage\"\n            ></language-textbox>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridLanguageTextboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridLanguageTextboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['ins',] }]
    };
    return DatagridLanguageTextboxComponent;
}(DatagridBaseEditorDirective));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var EditorTypes = {
    TEXTAREA: 'textarea',
    TEXTBOX: 'textbox',
    CHECKBOX: 'checkbox',
    DATEPICKER: 'datepicker',
    INPUTGROUP: 'input-group',
    SELECT: 'select',
    LOOKUP: 'lookup',
    NUMBERBOX: 'numberbox',
    COMBOLIST: 'combolist',
    SWITCH: 'switch',
    TIMEPICKER: 'timepicker',
    COMBOLOOKUP: 'combo-lookup',
    LANGUAGETEXTBOX: 'language-textbox',
    ENUMEDITOR: 'enum-editor',
    FILTEREDITOR: 'filter-editor',
    SORTEDITOR: 'sort-editor'
};
/** @type {?} */
var EditorProviders = [
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTAREA, value: DatagridTextareaComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTBOX, value: DatagridTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.CHECKBOX, value: DatagridCheckboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.DATEPICKER, value: DatagridDatepickerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.INPUTGROUP, value: DatagridInputGroupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SELECT, value: DatagridSelectComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LOOKUP, value: DatagridLookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.NUMBERBOX, value: DatagridNumberSpinnerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLIST, value: DatagridComboListComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SWITCH, value: DatagridSwitchComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TIMEPICKER, value: DatagridTimerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLOOKUP, value: DatagridCombolookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LANGUAGETEXTBOX, value: DatagridLanguageTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.ENUMEDITOR, value: DatagridEnumEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.FILTEREDITOR, value: DatagridFilterEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SORTEDITOR, value: DatagridSortEditorComponent }, multi: true }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DatagridTooltipComponent = /** @class */ (function () {
    function DatagridTooltipComponent(el) {
        this.el = el;
        this.tooltipPosition = 'right';
        this.cls = '';
        this.type = 'danger';
    }
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onKeyup = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.showErrMsg = /**
     * @return {?}
     */
    function () {
        // this.errorMessage = this.getErrorMsg();
        if (this.message !== null && this.message !== undefined) {
            this.show();
        }
    };
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.hide = 
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        /** 如果存在则不新建，只需要修改里面的内容 */
        if (!this.container) {
            this.create();
        }
        else {
            DomHandler.findSingle(this.container, '.f-tooltip-text').innerText = this.message;
        }
        /** @type {?} */
        var boxEl = this.el.nativeElement.parentElement;
        /** @type {?} */
        var offset = DomHandler.getOffset(boxEl);
        /** @type {?} */
        var targetTop = offset.top;
        /** @type {?} */
        var targetLeft = offset.left;
        /** @type {?} */
        var left;
        /** @type {?} */
        var top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + DomHandler.getOuterWidth(boxEl);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - DomHandler.getOuterWidth(this.container);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + DomHandler.getOuterHeight(boxEl);
                break;
            case 'top-left':
                left = targetLeft;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.create = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleClass = 'f-tooltip ' + this.getThemeCls() + ' f-tooltip-' + this.tooltipPosition + ' ' + this.cls;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        var tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'f-tooltip-arrow ';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        var tooltipText = document.createElement('div');
        tooltipText.className = 'f-tooltip-text ';
        tooltipText.innerHTML = this.message;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    };
    /**
     * @private
     * @return {?}
     */
    DatagridTooltipComponent.prototype.getThemeCls = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.type) {
            return 'f-tooltip-' + this.type;
        }
        return '';
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    };
    DatagridTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-tooltip',
                    template: "\n    <ng-content></ng-content>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatagridTooltipComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DatagridTooltipComponent.propDecorators = {
        tooltipPosition: [{ type: Input }],
        control: [{ type: Input }],
        positionStyle: [{ type: Input }],
        tooltipStyleClass: [{ type: Input }],
        message: [{ type: Input }],
        cls: [{ type: Input }],
        type: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }],
        onKeyup: [{ type: HostListener, args: ['keyup',] }]
    };
    return DatagridTooltipComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var editorComponents = [
    DatagridTooltipComponent,
    DatagridTextboxComponent,
    DatagridTextareaComponent,
    DatagridCheckboxComponent,
    DatagridDatepickerComponent,
    DatagridInputGroupComponent,
    DatagridSelectComponent,
    DatagridLookupComponent,
    DatagridNumberSpinnerComponent,
    DatagridComboListComponent,
    DatagridSwitchComponent,
    DatagridTimerComponent,
    DatagridCombolookupComponent,
    DatagridLanguageTextboxComponent,
    DatagridEnumEditorComponent,
    DatagridSortEditorComponent,
    DatagridFilterEditorComponent
];
var DatagridEditorsModule = /** @class */ (function () {
    function DatagridEditorsModule() {
    }
    DatagridEditorsModule.decorators = [
        { type: NgModule, args: [{
                    declarations: __spread([
                        DatagridBaseEditorDirective
                    ], editorComponents),
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisDatePickerModule,
                        InputGroupModule,
                        LookupModule,
                        ComboListModule,
                        ComboLookupModule,
                        NumberSpinnerModule,
                        SwitchModule,
                        TimePickerModule,
                        LanguageTextboxModule,
                        ReactiveFormsModule,
                        EnumEditorModule,
                        FarrisFormsModule,
                        FilterModule,
                        SorterModule
                    ],
                    exports: __spread([
                        DatagridBaseEditorDirective
                    ], editorComponents),
                    entryComponents: __spread(editorComponents),
                    providers: []
                },] }
    ];
    return DatagridEditorsModule;
}());

export { DatagridBaseEditorDirective, DatagridEditorsModule, DatagridEnumEditorComponent, DatagridFilterEditorComponent, DatagridSortEditorComponent, DatagridTextareaComponent, DatagridTextboxComponent, EditorProviders, EditorTypes, DatagridCheckboxComponent as ɵa, DatagridDatepickerComponent as ɵb, DatagridInputGroupComponent as ɵc, DatagridSelectComponent as ɵd, DatagridLookupComponent as ɵe, DatagridNumberSpinnerComponent as ɵf, DatagridComboListComponent as ɵg, DatagridSwitchComponent as ɵh, DatagridTimerComponent as ɵi, DatagridCombolookupComponent as ɵj, DatagridLanguageTextboxComponent as ɵk, DatagridTooltipComponent as ɵl };
//# sourceMappingURL=farris-ui-datagrid-editors.js.map
