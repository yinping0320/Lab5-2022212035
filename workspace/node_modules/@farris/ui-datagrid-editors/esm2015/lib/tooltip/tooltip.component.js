/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-21 14:38:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-26 16:50:32
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ViewEncapsulation, Input, HostListener, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { DomHandler } from '@farris/ui-datagrid';
export class DatagridTooltipComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.tooltipPosition = 'right';
        this.cls = '';
        this.type = 'danger';
    }
    /**
     * @return {?}
     */
    onMouseEnter() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onMouseLeave() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onFocusIn() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    }
    /**
     * @return {?}
     */
    onFocusOut() {
        this.hide();
    }
    /**
     * @return {?}
     */
    onKeyup() {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    }
    /**
     * @return {?}
     */
    showErrMsg() {
        // this.errorMessage = this.getErrorMsg();
        if (this.message !== null && this.message !== undefined) {
            this.show();
        }
    }
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    hide() {
        this.ngOnDestroy();
    }
    /**
     * @return {?}
     */
    show() {
        /** 如果存在则不新建，只需要修改里面的内容 */
        if (!this.container) {
            this.create();
        }
        else {
            DomHandler.findSingle(this.container, '.f-tooltip-text').innerText = this.message;
        }
        /** @type {?} */
        const boxEl = this.el.nativeElement.parentElement;
        /** @type {?} */
        const offset = DomHandler.getOffset(boxEl);
        /** @type {?} */
        const targetTop = offset.top;
        /** @type {?} */
        const targetLeft = offset.left;
        /** @type {?} */
        let left;
        /** @type {?} */
        let top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + DomHandler.getOuterWidth(boxEl);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - DomHandler.getOuterWidth(this.container);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + DomHandler.getOuterHeight(boxEl);
                break;
            case 'top-left':
                left = targetLeft;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    }
    /**
     * @return {?}
     */
    create() {
        /** @type {?} */
        let styleClass = 'f-tooltip ' + this.getThemeCls() + ' f-tooltip-' + this.tooltipPosition + ' ' + this.cls;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        const tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'f-tooltip-arrow ';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        const tooltipText = document.createElement('div');
        tooltipText.className = 'f-tooltip-text ';
        tooltipText.innerHTML = this.message;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    }
    /**
     * @private
     * @return {?}
     */
    getThemeCls() {
        if (this.type) {
            return 'f-tooltip-' + this.type;
        }
        return '';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    }
}
DatagridTooltipComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-tooltip',
                template: `
    <ng-content></ng-content>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DatagridTooltipComponent.ctorParameters = () => [
    { type: ElementRef }
];
DatagridTooltipComponent.propDecorators = {
    tooltipPosition: [{ type: Input }],
    control: [{ type: Input }],
    positionStyle: [{ type: Input }],
    tooltipStyleClass: [{ type: Input }],
    message: [{ type: Input }],
    cls: [{ type: Input }],
    type: [{ type: Input }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
    onFocusIn: [{ type: HostListener, args: ['focusin',] }],
    onFocusOut: [{ type: HostListener, args: ['focusout',] }],
    onKeyup: [{ type: HostListener, args: ['keyup',] }]
};
if (false) {
    /** @type {?} */
    DatagridTooltipComponent.prototype.tooltipPosition;
    /** @type {?} */
    DatagridTooltipComponent.prototype.control;
    /** @type {?} */
    DatagridTooltipComponent.prototype.positionStyle;
    /** @type {?} */
    DatagridTooltipComponent.prototype.tooltipStyleClass;
    /** @type {?} */
    DatagridTooltipComponent.prototype.message;
    /** @type {?} */
    DatagridTooltipComponent.prototype.cls;
    /** @type {?} */
    DatagridTooltipComponent.prototype.type;
    /** @type {?} */
    DatagridTooltipComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DatagridTooltipComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,