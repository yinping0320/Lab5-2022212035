/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 11:07:01
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-02 15:23:45
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Renderer2, ElementRef, Input, Injector, NgZone, HostBinding } from '@angular/core';
import { DatagridComponent, ValidatorMessagerService, DatagridFacadeService } from '@farris/ui-datagrid';
export class DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        this.render = render;
        this.el = el;
        this.injector = injector;
        this.placeholder = '';
        // 组件高度
        this.height = '';
        this.options = {};
        /**
         * 是否正在向server 发送请求
         */
        this.pending = false;
        /**
         * 禁止事件冒泡
         */
        this.stopPropagation = true;
        /**
         * 默认焦点
         */
        this.focus = true;
        this.validators = [];
        this._inputKeydown = null;
        this._editorClickEvent = null;
        this.cls = 'datagrid-editor';
        this.width = '100%';
        this.focusTimer = null;
        this.eventParams = (/**
         * @param {?} $event
         * @return {?}
         */
        ($event) => {
            /** @type {?} */
            let rowData = null;
            /** @type {?} */
            let rowId = null;
            if (this.dr) {
                rowData = this.dr.rowData;
                rowId = this.dr.rowId;
            }
            return {
                rowData,
                rowId,
                value: $event,
                form: this.group,
                formControl: this.formControl
            };
        });
        this.vms = this.injector.get(ValidatorMessagerService);
        this.dg = this.injector.get(DatagridComponent);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
    }
    /**
     * @return {?}
     */
    get dr() {
        return this.dg.selectedRow.dr;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.column && this.column.editor) {
            this.options = this.column.editor.options;
            this.validators = this.column.editor.validators || [];
            // 启用任意输入后，字符最大长度属性值验证
            // 当maxLength <= 0 时认为此属性无效
            if (this.options && this.options.nosearch !== undefined && this.options.nosearch) {
                if (this.options.maxLength !== undefined && this.options.maxLength <= 0) {
                    this.options.maxLength = undefined;
                }
            }
        }
        this.clickEvent = this.render.listen(this.el.nativeElement, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
            this.dg['focusElement'] = this.inputElement;
        }));
        this.mouseDownEvent = this.render.listen(this.el.nativeElement, 'mousedown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this._editorClickEvent = e;
        }));
        this.mouseUpEvent = this.render.listen(this.el.nativeElement, 'mouseup', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this._editorClickEvent = null;
        }));
        if (this.group) {
            this.formControl = (/** @type {?} */ (this.group.controls[this.column.field]));
        }
        // this.dblClickEvent = this.render.listen(this.el.nativeElement, 'dblclick', (e: MouseEvent) => {
        //     e.stopPropagation();
        //     e.preventDefault();
        // });
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.setFocus();
        if (this['instance']) {
            this['instance'].inDatagrid = true;
        }
        this.setErrorMessage();
        this._inputKeydown = this.render.listen(this.inputElement, 'keydown', (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.ctrlKey || e.shiftKey) {
                e.stopPropagation();
            }
        }));
        if (this.formControl) {
            this.formControl.valueChanges.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                // 记录变更集
                if (!this.formControl.pristine) {
                    /** @type {?} */
                    const rowId = this.dg.selectedRow ? this.dg.selectedRow.id : '';
                    if (rowId) {
                        /** @type {?} */
                        const keyField = this.dg.idField;
                        /** @type {?} */
                        const changeData = { [keyField]: rowId, [this.column.field]: val };
                        this.dfs.appendChanges(changeData);
                    }
                }
                this.setErrorMessage();
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.clickEvent) {
            this.clickEvent();
        }
        if (this.dblClickEvent) {
            this.dblClickEvent();
        }
        if (this.mouseDownEvent) {
            this.mouseDownEvent();
        }
        if (this.mouseUpEvent) {
            this.mouseUpEvent();
        }
        if (this.dg) {
            this.dg['focusElement'] = null;
        }
        if (this._inputKeydown) {
            this._inputKeydown();
            this._inputKeydown = null;
            this.inputElement = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    setErrorMessage() {
        if (this.formControl && this.formControl.invalid) {
            Object.keys(this.formControl.errors).forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                this.errorMessage = this.vms.getValidatorErrorMessage(key, this.validators);
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFocus() {
        if (!this.focus) {
            return;
        }
        if (this.ngZone) {
            this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                if (this.focusTimer) {
                    clearTimeout(this.focusTimer);
                }
                this.focusTimer = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (this.inputElement && this.dg.editMode === 'cell') {
                        if (this.dg && this.dg.selectOnEditing) {
                            if (this.inputElement.select) {
                                this.inputElement.select();
                            }
                        }
                        else {
                            this.inputElement.focus();
                        }
                        this.dg['focusElement'] = this.inputElement;
                    }
                }), 10);
            }));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventParams($event));
        }
    }
    /**
     * @return {?}
     */
    startPending() {
        this.pending = true;
        this.dg.pending = true;
    }
    /**
     * @return {?}
     */
    endPending() {
        this.pending = false;
        this.dg.pending = false;
    }
}
DatagridBaseEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: 'datagrid-editor',
            },] }
];
/** @nocollapse */
DatagridBaseEditorDirective.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridBaseEditorDirective.propDecorators = {
    placeholder: [{ type: Input }],
    height: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    width: [{ type: HostBinding, args: ['style.width',] }]
};
if (false) {
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.placeholder;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.height;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.controlId;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.type;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.options;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.group;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.column;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.formControl;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.inputElement;
    /**
     * 是否正在向server 发送请求
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.pending;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.errorMessage;
    /**
     * 禁止事件冒泡
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.stopPropagation;
    /**
     * 默认焦点
     * @type {?}
     */
    DatagridBaseEditorDirective.prototype.focus;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.clickEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.mouseDownEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.mouseUpEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.dblClickEvent;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.vms;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.dg;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.dfs;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.validators;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype._inputKeydown;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype._editorClickEvent;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.cls;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.width;
    /**
     * @type {?}
     * @private
     */
    DatagridBaseEditorDirective.prototype.focusTimer;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.eventParams;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.render;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.el;
    /** @type {?} */
    DatagridBaseEditorDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,