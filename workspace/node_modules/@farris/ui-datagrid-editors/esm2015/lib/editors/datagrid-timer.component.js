/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-24 15:33:24
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { TimePickerComponent } from '@farris/ui-time-picker';
import { TimePickerDefaultOptions } from '../editor-default-options';
export class DatagridTimerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.timeInput.nativeElement;
        this.options = Object.assign({}, TimePickerDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p.value = this.instance.value;
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    }
}
DatagridTimerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-timer',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" >
        <farris-time-picker #timepicker
            style="width: 100%"
            [formControlName]="column.field"
            [readonly]= "options.readonly"
            [editable]= "options.editable"
            [hourStep] = "options.hourStep"
            [minuteStep] = "options.minuteStep"
            [secondStep] = "options.secondStep"
            [format]="options.format"
            [placeholder]="options.placeholder"
            [use12Hours]="options.use12Hours"
            (valueChange)="onValueChange($event)"
            [showHeader]="options.showHeader">
        </farris-time-picker>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridTimerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridTimerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['timepicker',] }]
};
if (false) {
    /** @type {?} */
    DatagridTimerComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdGltZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzLyIsInNvdXJjZXMiOlsibGliL2VkaXRvcnMvZGF0YWdyaWQtdGltZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzdELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBd0JyRSxNQUFNLE9BQU8sc0JBQXVCLFNBQVEsMkJBQTJCOzs7Ozs7SUFHbkUsWUFBWSxNQUFpQixFQUFFLEVBQWMsRUFBRSxRQUFrQjtRQUM3RCxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHdCQUF3QixFQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Ozs7WUFBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUM7U0FDMUM7SUFDTCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxNQUFNOztjQUNWLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDO1FBQzlCLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7O1lBM0NKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUJBQW1CO2dCQUM3QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJUO2FBQ0o7Ozs7WUExQjJCLFNBQVM7WUFBRSxVQUFVO1lBQUUsUUFBUTs7O3VCQTZCdEQsU0FBUyxTQUFDLFlBQVk7Ozs7SUFBdkIsMENBQXVEIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MTowMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOC0yNCAxNTozMzoyNFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBUaW1lUGlja2VyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10aW1lLXBpY2tlcic7XHJcbmltcG9ydCB7IFRpbWVQaWNrZXJEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2VkaXRvci1kZWZhdWx0LW9wdGlvbnMnO1xyXG5cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdncmlkLWVkaXRvci10aW1lcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCIgPlxyXG4gICAgICAgIDxmYXJyaXMtdGltZS1waWNrZXIgI3RpbWVwaWNrZXJcclxuICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT0gXCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgW2VkaXRhYmxlXT0gXCJvcHRpb25zLmVkaXRhYmxlXCJcclxuICAgICAgICAgICAgW2hvdXJTdGVwXSA9IFwib3B0aW9ucy5ob3VyU3RlcFwiXHJcbiAgICAgICAgICAgIFttaW51dGVTdGVwXSA9IFwib3B0aW9ucy5taW51dGVTdGVwXCJcclxuICAgICAgICAgICAgW3NlY29uZFN0ZXBdID0gXCJvcHRpb25zLnNlY29uZFN0ZXBcIlxyXG4gICAgICAgICAgICBbZm9ybWF0XT1cIm9wdGlvbnMuZm9ybWF0XCJcclxuICAgICAgICAgICAgW3BsYWNlaG9sZGVyXT1cIm9wdGlvbnMucGxhY2Vob2xkZXJcIlxyXG4gICAgICAgICAgICBbdXNlMTJIb3Vyc109XCJvcHRpb25zLnVzZTEySG91cnNcIlxyXG4gICAgICAgICAgICAodmFsdWVDaGFuZ2UpPVwib25WYWx1ZUNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgW3Nob3dIZWFkZXJdPVwib3B0aW9ucy5zaG93SGVhZGVyXCI+XHJcbiAgICAgICAgPC9mYXJyaXMtdGltZS1waWNrZXI+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFRpbWVyQ29tcG9uZW50IGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBAVmlld0NoaWxkKCd0aW1lcGlja2VyJykgaW5zdGFuY2U6IFRpbWVQaWNrZXJDb21wb25lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS50aW1lSW5wdXQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBUaW1lUGlja2VyRGVmYXVsdE9wdGlvbnMgLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgIXRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UgPSAodmFsKSA9PiB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5ldmVudFBhcmFtcygkZXZlbnQpO1xyXG4gICAgICAgIHAudmFsdWUgPSB0aGlzLmluc3RhbmNlLnZhbHVlO1xyXG4gICAgICAgIHBbJ2luc3RhbmNlJ10gPSB0aGlzLmluc3RhbmNlO1xyXG4gICAgICAgIHBbJ2VkaXRvciddID0gdGhpcztcclxuICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UocCk7XHJcbiAgICB9XHJcbn1cclxuIl19