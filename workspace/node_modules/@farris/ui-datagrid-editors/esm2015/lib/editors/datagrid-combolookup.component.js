/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, Renderer2, ElementRef, NgZone, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { ComboLookupComponent } from '@farris/ui-combo-lookup';
import { ComboLookupDefaultOptions } from '../editor-default-options';
export class DatagridCombolookupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, ComboLookupDefaultOptions, this.options);
        if (this.options.panelWidth === 'auto') {
            this.options.autoWidth = true;
        }
        if (this.options.multiSelect === undefined) {
            if (this.options.singleSelect !== undefined && this.options.singleSelect !== null) {
                this.options.multiSelect = !this.options.singleSelect;
            }
        }
        if (this.formControl && this.formControl.value) {
            this.options.selectedValues = this.formControl.value;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.input.textbox.nativeElement;
        super.ngAfterViewInit();
    }
    // onBeforeShow = () => {
    //     if (this.options.beforeShow) {
    //         return this.options.beforeShow(this);
    //     }
    //     return of(true);
    // }
    // onBeforeHide = () => {
    //     if (this.options.beforeHide) {
    //         return this.options.beforeHide(this);
    //     }
    //     return of(true);
    // }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowPanel($event) {
        if (this.options.showPanel) {
            this.options.showPanel(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onHidePanel($event) {
        if (this.options.hidePanel) {
            this.options.hidePanel(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectChange($event) {
        if (this.options.selectChange) {
            this.options.selectChange(this.eventPrams($event));
        }
    }
    /**
     * @return {?}
     */
    hide() {
        this.instance.hide();
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridCombolookupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-combolookup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-combo-lookup style="width: 100%"
                #cmblookup
                [formControlName]="column.field"
                [idField]="options.idField"
                [textField]="options.textField"
                [displayType]="options.displayType"
                [multiSelect]="options.multiSelect"
                [mapFields]="options.mapFields"
                [uri]="options.uri"
                [nosearch]="options.nosearch"
                [maxLength]="options?.maxLength"
                [readonly]= "options.readonly"
                [editable]= "options.editable"
                [autoWidth]="options.autoWidth"
                [panelWidth]="options.panelWidth"
                [panelHeight]="options.panelHeight"
                [enableCancelSelected]="options.enableCancelSelected"
                [beforeShow]="options?.beforeShow"
                [beforeHide]="options?.beforeHide"
                [context]="options?.context"
                [enableClear]="options.enableClear"
                [showHeader]="options.showHeader"
                (showPanel)="onShowPanel($event)"
                (hidePanel)="onHidePanel($event)"
                (clear)="onClear($event)"
                (valueChange)="onValueChange($event)"
                (selectChange)="onSelectChange($event)"
                [data]="options?.data"
                [useTreeView]="options?.useTreeView"
                [columns]="options?.columns"
                [enableFullTree]="options?.enableFullTree"
                [treeToList]="options?.treeToList"
                [navTreeToList]="options?.navTreeToList"
                [separator]="options.separator"
            ></farris-combo-lookup>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridCombolookupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridCombolookupComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['cmblookup',] }]
};
if (false) {
    /** @type {?} */
    DatagridCombolookupComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridCombolookupComponent.prototype.ngzone;
    /** @type {?} */
    DatagridCombolookupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,