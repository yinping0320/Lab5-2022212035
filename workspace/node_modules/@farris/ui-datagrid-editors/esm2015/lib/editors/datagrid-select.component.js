/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-02 17:07:03
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
export class DatagridSelectComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
        this.enumData = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.nativeElement;
        if (this.options) {
            this.enumData = this.options.data;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        return false;
    }
}
DatagridSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-select',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup">
        <select #sel class="custom-select" [formControlName]="column.field" (click)="onClick($event)" >
            <option *ngFor="let col of enumData" value="{{col[options.valueField]}}">{{ col[options.textField] }}</option>
        </select>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSelectComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridSelectComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['sel',] }]
};
if (false) {
    /** @type {?} */
    DatagridSelectComponent.prototype.enumData;
    /** @type {?} */
    DatagridSelectComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLXNlbGVjdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFZaEYsTUFBTSxPQUFPLHVCQUF3QixTQUFRLDJCQUEyQjs7Ozs7O0lBR3BFLFlBQVksTUFBaUIsRUFBRSxFQUFjLEVBQUUsUUFBa0I7UUFDN0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFIaEMsYUFBUSxHQUFHLEVBQUUsQ0FBQztJQUlkLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUM7UUFDaEQsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2QsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztTQUNyQztJQUNMLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQWtCO1FBQ3RCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7WUE1QkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFBRTs7Ozs7O0tBTVQ7YUFDSjs7OztZQVoyQixTQUFTO1lBQUUsVUFBVTtZQUFhLFFBQVE7Ozt1QkFlakUsU0FBUyxTQUFDLEtBQUs7Ozs7SUFEaEIsMkNBQWM7O0lBQ2QsMkNBQXVDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MTowMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0wMiAxNzowNzowM1xyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2dyaWQtZWRpdG9yLXNlbGVjdCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwXCI+XHJcbiAgICAgICAgPHNlbGVjdCAjc2VsIGNsYXNzPVwiY3VzdG9tLXNlbGVjdFwiIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCIgKGNsaWNrKT1cIm9uQ2xpY2soJGV2ZW50KVwiID5cclxuICAgICAgICAgICAgPG9wdGlvbiAqbmdGb3I9XCJsZXQgY29sIG9mIGVudW1EYXRhXCIgdmFsdWU9XCJ7e2NvbFtvcHRpb25zLnZhbHVlRmllbGRdfX1cIj57eyBjb2xbb3B0aW9ucy50ZXh0RmllbGRdIH19PC9vcHRpb24+XHJcbiAgICAgICAgPC9zZWxlY3Q+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFNlbGVjdENvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBlbnVtRGF0YSA9IFtdO1xyXG4gICAgQFZpZXdDaGlsZCgnc2VsJykgaW5zdGFuY2U6IEVsZW1lbnRSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgdGhpcy5lbnVtRGF0YSA9IHRoaXMub3B0aW9ucy5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuIl19