/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { SorterComponent } from '@farris/ui-sort-editor';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { SortEditorDefaultOptions } from '../editor-default-options';
export class DatagridSortEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, SortEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridSortEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-sort-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <sorter #sorter
            style="width: 100%"
            [formControlName]="column.field"
            [columns]="options.columns"
            [fieldEditor]="options.fieldEditor"
            [enableClear]="options.enableClear"
            [disabled]="options.disabled"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [returnType]="options.returnType"
        ></sorter>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSortEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridSortEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['sorter',] }]
};
if (false) {
    /** @type {?} */
    DatagridSortEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridSortEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridSortEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc29ydGVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1zb3J0ZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUVySCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFekQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFvQnJFLE1BQU0sT0FBTywyQkFBNkIsU0FBUSwyQkFBMkI7Ozs7Ozs7SUFJekUsWUFDSSxNQUFpQixFQUFFLEVBQWMsRUFBVSxNQUFjLEVBQVMsUUFBa0I7UUFFcEYsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFGZSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUd4RixDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFHLHdCQUF3QixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvRSxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3hELEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7WUFwQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7S0FjVDthQUNKOzs7O1lBeEIyQixTQUFTO1lBQUUsVUFBVTtZQUFFLE1BQU07WUFBRSxRQUFROzs7dUJBMkI5RCxTQUFTLFNBQUMsUUFBUTs7OztJQUFuQiwrQ0FBK0M7Ozs7O0lBR1IsNkNBQXNCOztJQUFFLCtDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE5nWm9uZSwgSW5qZWN0b3IsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgU29ydGVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1zb3J0LWVkaXRvcic7XHJcblxyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBTb3J0RWRpdG9yRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1zb3J0LWVkaXRvcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCI+XHJcbiAgICAgICAgPHNvcnRlciAjc29ydGVyXHJcbiAgICAgICAgICAgIHN0eWxlPVwid2lkdGg6IDEwMCVcIlxyXG4gICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiXHJcbiAgICAgICAgICAgIFtjb2x1bW5zXT1cIm9wdGlvbnMuY29sdW1uc1wiXHJcbiAgICAgICAgICAgIFtmaWVsZEVkaXRvcl09XCJvcHRpb25zLmZpZWxkRWRpdG9yXCJcclxuICAgICAgICAgICAgW2VuYWJsZUNsZWFyXT1cIm9wdGlvbnMuZW5hYmxlQ2xlYXJcIlxyXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwib3B0aW9ucy5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgW2VkaXRhYmxlXT1cIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgICAgICBbcmV0dXJuVHlwZV09XCJvcHRpb25zLnJldHVyblR5cGVcIlxyXG4gICAgICAgID48L3NvcnRlcj5cclxuICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRTb3J0RWRpdG9yQ29tcG9uZW50ICBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnc29ydGVyJykgaW5zdGFuY2U6IFNvcnRlckNvbXBvbmVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9ICwgU29ydEVkaXRvckRlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UudGV4dGJveC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==