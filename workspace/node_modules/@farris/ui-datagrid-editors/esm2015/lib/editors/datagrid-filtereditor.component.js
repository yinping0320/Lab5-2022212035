/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { FilterComponent } from '@farris/ui-filter-editor';
import { FilterEditorDefaultOptions } from '../editor-default-options';
export class DatagridFilterEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, FilterEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridFilterEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-filter-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <filter #filterEditor
            style="width: 100%"
            [formControlName]="column.field"
            [columns]="options.columns"
            [showCode]="options.showCode"
            [showSql]="options.showSql"
            [disabled]="options.disabled"
            [readonly]="options.readonly"
            [editable]="options.editable"
            [enableClear]="options.enableClear"
            [fieldEditor]="options.fieldEditor"
            [enableExpress]="options.enableExpress"
            [returnType]="options.returnType"
            (showExpress)="options?.onshowExpress($event)"></filter>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridFilterEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridFilterEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['filterEditor',] }]
};
if (false) {
    /** @type {?} */
    DatagridFilterEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridFilterEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLWZpbHRlcmVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNELE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBc0J2RSxNQUFNLE9BQU8sNkJBQStCLFNBQVEsMkJBQTJCOzs7Ozs7O0lBSTNFLFlBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVUsTUFBYyxFQUFTLFFBQWtCO1FBRXBGLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRmUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7SUFHeEYsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRywwQkFBMEIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUN4RCxLQUFLLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7O1lBdkNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsd0JBQXdCO2dCQUNsQyxRQUFRLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBaUJUO2FBQ0o7Ozs7WUF4QjJCLFNBQVM7WUFBRSxVQUFVO1lBQUUsTUFBTTtZQUFFLFFBQVE7Ozt1QkEyQjlELFNBQVMsU0FBQyxjQUFjOzs7O0lBQXpCLGlEQUFxRDs7Ozs7SUFHZCwrQ0FBc0I7O0lBQUUsaURBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBJbmplY3RvciwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZmlsdGVyLWVkaXRvcic7XHJcbmltcG9ydCB7IEZpbHRlckVkaXRvckRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1maWx0ZXItZWRpdG9yJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgICA8ZmlsdGVyICNmaWx0ZXJFZGl0b3JcclxuICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW2NvbHVtbnNdPVwib3B0aW9ucy5jb2x1bW5zXCJcclxuICAgICAgICAgICAgW3Nob3dDb2RlXT1cIm9wdGlvbnMuc2hvd0NvZGVcIlxyXG4gICAgICAgICAgICBbc2hvd1NxbF09XCJvcHRpb25zLnNob3dTcWxcIlxyXG4gICAgICAgICAgICBbZGlzYWJsZWRdPVwib3B0aW9ucy5kaXNhYmxlZFwiXHJcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJvcHRpb25zLnJlYWRvbmx5XCJcclxuICAgICAgICAgICAgW2VkaXRhYmxlXT1cIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgICAgICBbZW5hYmxlQ2xlYXJdPVwib3B0aW9ucy5lbmFibGVDbGVhclwiXHJcbiAgICAgICAgICAgIFtmaWVsZEVkaXRvcl09XCJvcHRpb25zLmZpZWxkRWRpdG9yXCJcclxuICAgICAgICAgICAgW2VuYWJsZUV4cHJlc3NdPVwib3B0aW9ucy5lbmFibGVFeHByZXNzXCJcclxuICAgICAgICAgICAgW3JldHVyblR5cGVdPVwib3B0aW9ucy5yZXR1cm5UeXBlXCJcclxuICAgICAgICAgICAgKHNob3dFeHByZXNzKT1cIm9wdGlvbnM/Lm9uc2hvd0V4cHJlc3MoJGV2ZW50KVwiPjwvZmlsdGVyPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEZpbHRlckVkaXRvckNvbXBvbmVudCAgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2ZpbHRlckVkaXRvcicpIGluc3RhbmNlOiBGaWx0ZXJDb21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcmVuZGVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIG5nem9uZTogTmdab25lLCBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihyZW5kZXIsIGVsLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSAsIEZpbHRlckVkaXRvckRlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UudGV4dGJveC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==