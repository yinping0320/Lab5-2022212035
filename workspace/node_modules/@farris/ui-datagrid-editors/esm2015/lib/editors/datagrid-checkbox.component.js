/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:44:10
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:46:12
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, NgZone, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
export class DatagridCheckboxComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.nativeElement;
        this.checked = this.formControl.value;
        /** @type {?} */
        const align = this.column.align || 'left';
        this.render.setStyle(this.chkboxEl.nativeElement, 'justify-content', align);
        this.render.listen(this.inputElement, 'keydow.Sapce', this.onSpaceHandle);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSpaceHandle($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.checkedChanges();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        event.stopPropagation();
        this.checkedChanges();
    }
    /**
     * @private
     * @return {?}
     */
    checkedChanges() {
        this.checked = !this.checked;
        this.formControl.setValue(this.checked);
        this.formControl.markAsDirty();
        if (this.options && this.options.valueChange) {
            /** @type {?} */
            const p = this.eventParams(event);
            p.value = this.checked;
            p['instance'] = this.instance;
            p['editor'] = this;
            this.options.valueChange(p);
        }
    }
}
DatagridCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-checkbox',
                template: `<div [formGroup]="group" class="f-datagrid-cell-formgroup" #chkbox>
    <div class="custom-control custom-checkbox f-checkradio-single">
        <input type="checkbox" #chk class="custom-control-input" [formControlName]="column.field" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div></div>
    `
            }] }
];
/** @nocollapse */
DatagridCheckboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridCheckboxComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['chk',] }],
    chkboxEl: [{ type: ViewChild, args: ['chkbox',] }]
};
if (false) {
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.instance;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.chkboxEl;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.ngzone;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzLyIsInNvdXJjZXMiOlsibGliL2VkaXRvcnMvZGF0YWdyaWQtY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN0RyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQVdoRixNQUFNLE9BQU8seUJBQTBCLFNBQVEsMkJBQTJCOzs7Ozs7O0lBTXRFLFlBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVUsTUFBYyxFQUFTLFFBQWtCO1FBRXBGLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRmUsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUFTLGFBQVEsR0FBUixRQUFRLENBQVU7SUFHeEYsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDOztjQUVoQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTTtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUUsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsTUFBcUI7UUFDL0IsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFRCxXQUFXLENBQUMsS0FBaUI7UUFDekIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVPLGNBQWM7UUFDbEIsSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFOztrQkFDcEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2QixDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQzs7O1lBdkRKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyxRQUFRLEVBQUU7Ozs7O0tBS1Q7YUFDSjs7OztZQVgyQixTQUFTO1lBQUUsVUFBVTtZQUFFLE1BQU07WUFBYSxRQUFROzs7dUJBZXpFLFNBQVMsU0FBQyxLQUFLO3VCQUNmLFNBQVMsU0FBQyxRQUFROzs7O0lBRm5CLDRDQUFpQjs7SUFDakIsNkNBQXVDOztJQUN2Qyw2Q0FBMEM7Ozs7O0lBR0gsMkNBQXNCOztJQUFFLDZDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQERhdGU6IDIwMTktMDgtMTQgMTE6NDQ6MTBcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMTAtMTQgMTI6NDY6MTJcclxuICogQFFROiAxMDU1ODE4MjM5XHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE5nWm9uZSwgVmlld0NoaWxkLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2dyaWQtZWRpdG9yLWNoZWNrYm94JyxcclxuICAgIHRlbXBsYXRlOiBgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwXCIgI2Noa2JveD5cclxuICAgIDxkaXYgY2xhc3M9XCJjdXN0b20tY29udHJvbCBjdXN0b20tY2hlY2tib3ggZi1jaGVja3JhZGlvLXNpbmdsZVwiPlxyXG4gICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiAjY2hrIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIiBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiIFtjaGVja2VkXT1cImNoZWNrZWRcIj5cclxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiIChjbGljayk9XCJoYW5kbGVDbGljaygkZXZlbnQpXCI+PC9sYWJlbD5cclxuICAgIDwvZGl2PjwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRDaGVja2JveENvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgY2hlY2tlZDogYm9vbGVhbjtcclxuICAgIEBWaWV3Q2hpbGQoJ2NoaycpIGluc3RhbmNlOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnY2hrYm94JykgY2hrYm94RWw6IEVsZW1lbnRSZWY7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcmVuZGVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIG5nem9uZTogTmdab25lLCBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihyZW5kZXIsIGVsLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UubmF0aXZlRWxlbWVudDtcclxuICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmZvcm1Db250cm9sLnZhbHVlO1xyXG5cclxuICAgICAgICBjb25zdCBhbGlnbiA9IHRoaXMuY29sdW1uLmFsaWduIHx8ICdsZWZ0JztcclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmNoa2JveEVsLm5hdGl2ZUVsZW1lbnQsICdqdXN0aWZ5LWNvbnRlbnQnLCBhbGlnbik7XHJcblxyXG4gICAgICAgIHRoaXMucmVuZGVyLmxpc3Rlbih0aGlzLmlucHV0RWxlbWVudCwgJ2tleWRvdy5TYXBjZScsIHRoaXMub25TcGFjZUhhbmRsZSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TcGFjZUhhbmRsZSgkZXZlbnQ6IEtleWJvYXJkRXZlbnQpIHtcclxuICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkQ2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGhhbmRsZUNsaWNrKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkQ2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2hlY2tlZENoYW5nZXMoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0gIXRoaXMuY2hlY2tlZDtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLnNldFZhbHVlKHRoaXMuY2hlY2tlZCk7XHJcbiAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5tYXJrQXNEaXJ0eSgpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zICYmIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICBjb25zdCBwID0gdGhpcy5ldmVudFBhcmFtcyhldmVudCk7XHJcbiAgICAgICAgICAgIHAudmFsdWUgPSB0aGlzLmNoZWNrZWQ7XHJcbiAgICAgICAgICAgIHBbJ2luc3RhbmNlJ10gPSB0aGlzLmluc3RhbmNlO1xyXG4gICAgICAgICAgICBwWydlZGl0b3InXSA9IHRoaXM7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZShwKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19