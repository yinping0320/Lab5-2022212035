/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { EnumEditorInputComponent } from '@farris/ui-enum-editor';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { EnumEditorDefaultOptions } from '../editor-default-options';
export class DatagridEnumEditorComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} ngzone
     * @param {?} injector
     */
    constructor(render, el, ngzone, injector) {
        super(render, el, injector);
        this.ngzone = ngzone;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, EnumEditorDefaultOptions, this.options);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.inputElement = this.instance.inputGroupRef.textbox.nativeElement;
        super.ngAfterViewInit();
    }
}
DatagridEnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-enum-editor',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
    <enum-editor-input #eei
        style="width: 100%"
        [formControlName]="column.field"
        [readonly]="options.readonly"
        [editable]="options.editable"
        [disabled]="options.disabled"
        [enableClear]="options.enableClear"
        [outType]="options.outType"
        [textField]="options.textField"
        [valueField]="options.valueField">
    </enum-editor-input>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridEnumEditorComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: NgZone },
    { type: Injector }
];
DatagridEnumEditorComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['eei',] }]
};
if (false) {
    /** @type {?} */
    DatagridEnumEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridEnumEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridEnumEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZW51bWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1lbnVtZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUNySCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUNsRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQW9CckUsTUFBTSxPQUFPLDJCQUE2QixTQUFRLDJCQUEyQjs7Ozs7OztJQUV6RSxZQUNJLE1BQWlCLEVBQUUsRUFBYyxFQUFVLE1BQWMsRUFBUyxRQUFrQjtRQUVwRixLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztRQUZlLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBR3hGLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUcsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3RFLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7WUFsQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7S0FjVDthQUNKOzs7O1lBdEIyQixTQUFTO1lBQUUsVUFBVTtZQUFFLE1BQU07WUFBRSxRQUFROzs7dUJBd0I5RCxTQUFTLFNBQUMsS0FBSzs7OztJQUFoQiwrQ0FBcUQ7Ozs7O0lBRWQsNkNBQXNCOztJQUFFLCtDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIE5nWm9uZSwgSW5qZWN0b3IsIFZpZXdDaGlsZCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWVudW0tZWRpdG9yJztcclxuaW1wb3J0IHsgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGF0YWdyaWQtYmFzZS1lZGl0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRW51bUVkaXRvckRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZGF0YWdyaWQtZW51bS1lZGl0b3InLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XCJncm91cFwiIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWZvcm1ncm91cCBmYXJyaXMtZ3JvdXAtYXV0b1wiPlxyXG4gICAgPGVudW0tZWRpdG9yLWlucHV0ICNlZWlcclxuICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiXHJcbiAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgIFtlZGl0YWJsZV09XCJvcHRpb25zLmVkaXRhYmxlXCJcclxuICAgICAgICBbZGlzYWJsZWRdPVwib3B0aW9ucy5kaXNhYmxlZFwiXHJcbiAgICAgICAgW2VuYWJsZUNsZWFyXT1cIm9wdGlvbnMuZW5hYmxlQ2xlYXJcIlxyXG4gICAgICAgIFtvdXRUeXBlXT1cIm9wdGlvbnMub3V0VHlwZVwiXHJcbiAgICAgICAgW3RleHRGaWVsZF09XCJvcHRpb25zLnRleHRGaWVsZFwiXHJcbiAgICAgICAgW3ZhbHVlRmllbGRdPVwib3B0aW9ucy52YWx1ZUZpZWxkXCI+XHJcbiAgICA8L2VudW0tZWRpdG9yLWlucHV0PlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEVudW1FZGl0b3JDb21wb25lbnQgIGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIEBWaWV3Q2hpbGQoJ2VlaScpIGluc3RhbmNlOiBFbnVtRWRpdG9ySW5wdXRDb21wb25lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9ICwgRW51bUVkaXRvckRlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UuaW5wdXRHcm91cFJlZi50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19