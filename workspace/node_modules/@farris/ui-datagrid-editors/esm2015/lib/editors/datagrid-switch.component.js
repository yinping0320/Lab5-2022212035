/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-24 15:33:24
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { SwitchComponent } from '@farris/ui-switch';
import { SwitchDefaultOptions } from '../editor-default-options';
export class DatagridSwitchComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, SwitchDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
        /** @type {?} */
        const align = this.column.align || 'left';
        if (align === 'left') {
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'justify-content', align);
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'padding-left', '0.75rem');
        }
        this.inputElement = this.instance.switchElRef.nativeElement;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['checked'] = this.instance.checked;
        p.value = this.instance['getValue'](this.instance.checked);
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    }
}
DatagridSwitchComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-switch',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="line-height:100%" #ctrlbox hidefocus="true">
        <farris-switch #switch [formControlName]="column.field"
        [square]="options.square"
        [readonly]="options.readonly"
        [disabled]="options.disabled"
        [checkedLabel]="options.checkedLabel"
        [uncheckedLabel]="options.uncheckedLabel"
        [trueValue]="options?.trueValue"
        [falseValue]="options?.falseValue"
        (valueChange)="onValueChange($event)"></farris-switch>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridSwitchComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridSwitchComponent.propDecorators = {
    ctrlBoxEl: [{ type: ViewChild, args: ['ctrlbox',] }],
    instance: [{ type: ViewChild, args: ['switch',] }]
};
if (false) {
    /** @type {?} */
    DatagridSwitchComponent.prototype.ctrlBoxEl;
    /** @type {?} */
    DatagridSwitchComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLXN3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBbUJqRSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsMkJBQTJCOzs7Ozs7SUFHcEUsWUFBWSxNQUFpQixFQUFFLEVBQWMsRUFBRSxRQUFrQjtRQUM3RCxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Ozs7WUFBRyxDQUFDLEdBQXNCLEVBQUUsRUFBRSxHQUFFLENBQUMsQ0FBQSxDQUFDO1NBQzdEOztjQUVLLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssSUFBSSxNQUFNO1FBQ3pDLElBQUksS0FBSyxLQUFLLE1BQU0sRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztZQUM3RSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsU0FBUyxDQUFDLENBQUM7U0FDakY7UUFFRCxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztJQUNoRSxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxNQUFNOztjQUNWLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUM7UUFDckMsQ0FBQyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxDQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDNUQsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDOzs7WUEvQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxvQkFBb0I7Z0JBQzlCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7O0tBWVQ7YUFDSjs7OztZQXJCMkIsU0FBUztZQUFFLFVBQVU7WUFBRSxRQUFROzs7d0JBdUJ0RCxTQUFTLFNBQUMsU0FBUzt1QkFDbkIsU0FBUyxTQUFDLFFBQVE7Ozs7SUFEbkIsNENBQTRDOztJQUM1QywyQ0FBK0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTE0IDExOjQxOjAwXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA4LTI0IDE1OjMzOjI0XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBJbmplY3RvciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFN3aXRjaENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktc3dpdGNoJztcclxuaW1wb3J0IHsgU3dpdGNoRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuaW1wb3J0IHsgVmFsdWVDaGFuZ2VQYXJhbXMgfSBmcm9tICcuLi9lZGl0b3JzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdncmlkLWVkaXRvci1zd2l0Y2gnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XCJncm91cFwiIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWZvcm1ncm91cCBmYXJyaXMtZ3JvdXAtYXV0b1wiIHN0eWxlPVwibGluZS1oZWlnaHQ6MTAwJVwiICNjdHJsYm94IGhpZGVmb2N1cz1cInRydWVcIj5cclxuICAgICAgICA8ZmFycmlzLXN3aXRjaCAjc3dpdGNoIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICBbc3F1YXJlXT1cIm9wdGlvbnMuc3F1YXJlXCJcclxuICAgICAgICBbcmVhZG9ubHldPVwib3B0aW9ucy5yZWFkb25seVwiXHJcbiAgICAgICAgW2Rpc2FibGVkXT1cIm9wdGlvbnMuZGlzYWJsZWRcIlxyXG4gICAgICAgIFtjaGVja2VkTGFiZWxdPVwib3B0aW9ucy5jaGVja2VkTGFiZWxcIlxyXG4gICAgICAgIFt1bmNoZWNrZWRMYWJlbF09XCJvcHRpb25zLnVuY2hlY2tlZExhYmVsXCJcclxuICAgICAgICBbdHJ1ZVZhbHVlXT1cIm9wdGlvbnM/LnRydWVWYWx1ZVwiXHJcbiAgICAgICAgW2ZhbHNlVmFsdWVdPVwib3B0aW9ucz8uZmFsc2VWYWx1ZVwiXHJcbiAgICAgICAgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2UoJGV2ZW50KVwiPjwvZmFycmlzLXN3aXRjaD5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkU3dpdGNoQ29tcG9uZW50IGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBWaWV3Q2hpbGQoJ2N0cmxib3gnKSBjdHJsQm94RWw6IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdzd2l0Y2gnKSBpbnN0YW5jZTogU3dpdGNoQ29tcG9uZW50O1xyXG4gICAgY29uc3RydWN0b3IocmVuZGVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihyZW5kZXIsIGVsLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgU3dpdGNoRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiAhdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSA9ICh2YWw6IFZhbHVlQ2hhbmdlUGFyYW1zKSA9PiB7fTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFsaWduID0gdGhpcy5jb2x1bW4uYWxpZ24gfHwgJ2xlZnQnO1xyXG4gICAgICAgIGlmIChhbGlnbiA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuY3RybEJveEVsLm5hdGl2ZUVsZW1lbnQsICdqdXN0aWZ5LWNvbnRlbnQnLCBhbGlnbik7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuY3RybEJveEVsLm5hdGl2ZUVsZW1lbnQsICdwYWRkaW5nLWxlZnQnLCAnMC43NXJlbScpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmluc3RhbmNlLnN3aXRjaEVsUmVmLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5ldmVudFBhcmFtcygkZXZlbnQpO1xyXG4gICAgICAgIHBbJ2NoZWNrZWQnXSA9IHRoaXMuaW5zdGFuY2UuY2hlY2tlZDtcclxuICAgICAgICBwLnZhbHVlID0gdGhpcy5pbnN0YW5jZVsnZ2V0VmFsdWUnXSggdGhpcy5pbnN0YW5jZS5jaGVja2VkKTtcclxuICAgICAgICBwWydpbnN0YW5jZSddID0gdGhpcy5pbnN0YW5jZTtcclxuICAgICAgICBwWydlZGl0b3InXSA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKHApO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==