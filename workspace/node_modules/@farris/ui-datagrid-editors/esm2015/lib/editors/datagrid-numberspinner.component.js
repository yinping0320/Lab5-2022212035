/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-22 14:25:39
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { NumberSpinnerComponent } from '@farris/ui-number-spinner';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { NumberSpinnerDefaultOptions } from '../editor-default-options';
export class DatagridNumberSpinnerComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.options = Object.assign({}, NumberSpinnerDefaultOptions, this.options);
        if (!this.options.textAlign) {
            this.options.textAlign = this.column.align || 'left';
        }
        this.inputElement = this.instance.input.nativeElement;
        // this.stopPropagation = false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eventPrams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    }
}
DatagridNumberSpinnerComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-numberspinner',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <datagrid-tooltip [control]="formControl" [tooltipPosition]="'top-left'" [message]="errorMessage">
            <farris-number-spinner #num [step]="options.step"
                [max]="options.max"
                [min]="options.min"
                [canNull]="options.canNull"
                [precision]="options.precision"
                [editable]="options.editable"
                [bigNumber]="options.bigNumber"
                [showButton]="options.showButton"
                [showZero]="options.showZero"
                [groupSeparator]="options.groupSeparator"
                (valueChange)="onValueChange($event)"
                [textAlign]="options.textAlign"
                [formControlName]="column.field" style="width: 100%"></farris-number-spinner>
        </datagrid-tooltip>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridNumberSpinnerComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridNumberSpinnerComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['num',] }]
};
if (false) {
    /** @type {?} */
    DatagridNumberSpinnerComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtbnVtYmVyc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1udW1iZXJzcGlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQXdCeEUsTUFBTSxPQUFPLDhCQUErQixTQUFRLDJCQUEyQjs7Ozs7O0lBSTNFLFlBQVksTUFBaUIsRUFBRSxFQUFjLEVBQUUsUUFBa0I7UUFDN0QsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRywyQkFBMkIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztTQUN6RDtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3RELGdDQUFnQztJQUNwQyxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxNQUFNO1FBQ2hCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sVUFBVSxDQUFDLE1BQU07O2NBQ2YsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbkIsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDOzs7WUFuREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7O0tBa0JUO2FBQ0o7Ozs7WUExQjJCLFNBQVM7WUFBRSxVQUFVO1lBQUUsUUFBUTs7O3VCQTZCdEQsU0FBUyxTQUFDLEtBQUs7Ozs7SUFBaEIsa0RBQW1EIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MTowMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0yMiAxNDoyNTozOVxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOdW1iZXJTcGlubmVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1udW1iZXItc3Bpbm5lcic7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IE51bWJlclNwaW5uZXJEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2VkaXRvci1kZWZhdWx0LW9wdGlvbnMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2dyaWQtZWRpdG9yLW51bWJlcnNwaW5uZXInLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XCJncm91cFwiIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWZvcm1ncm91cCBmYXJyaXMtZ3JvdXAtYXV0b1wiPlxyXG4gICAgICAgIDxkYXRhZ3JpZC10b29sdGlwIFtjb250cm9sXT1cImZvcm1Db250cm9sXCIgW3Rvb2x0aXBQb3NpdGlvbl09XCIndG9wLWxlZnQnXCIgW21lc3NhZ2VdPVwiZXJyb3JNZXNzYWdlXCI+XHJcbiAgICAgICAgICAgIDxmYXJyaXMtbnVtYmVyLXNwaW5uZXIgI251bSBbc3RlcF09XCJvcHRpb25zLnN0ZXBcIlxyXG4gICAgICAgICAgICAgICAgW21heF09XCJvcHRpb25zLm1heFwiXHJcbiAgICAgICAgICAgICAgICBbbWluXT1cIm9wdGlvbnMubWluXCJcclxuICAgICAgICAgICAgICAgIFtjYW5OdWxsXT1cIm9wdGlvbnMuY2FuTnVsbFwiXHJcbiAgICAgICAgICAgICAgICBbcHJlY2lzaW9uXT1cIm9wdGlvbnMucHJlY2lzaW9uXCJcclxuICAgICAgICAgICAgICAgIFtlZGl0YWJsZV09XCJvcHRpb25zLmVkaXRhYmxlXCJcclxuICAgICAgICAgICAgICAgIFtiaWdOdW1iZXJdPVwib3B0aW9ucy5iaWdOdW1iZXJcIlxyXG4gICAgICAgICAgICAgICAgW3Nob3dCdXR0b25dPVwib3B0aW9ucy5zaG93QnV0dG9uXCJcclxuICAgICAgICAgICAgICAgIFtzaG93WmVyb109XCJvcHRpb25zLnNob3daZXJvXCJcclxuICAgICAgICAgICAgICAgIFtncm91cFNlcGFyYXRvcl09XCJvcHRpb25zLmdyb3VwU2VwYXJhdG9yXCJcclxuICAgICAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICAgICAgW3RleHRBbGlnbl09XCJvcHRpb25zLnRleHRBbGlnblwiXHJcbiAgICAgICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiIHN0eWxlPVwid2lkdGg6IDEwMCVcIj48L2ZhcnJpcy1udW1iZXItc3Bpbm5lcj5cclxuICAgICAgICA8L2RhdGFncmlkLXRvb2x0aXA+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZE51bWJlclNwaW5uZXJDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ251bScpIGluc3RhbmNlOiBOdW1iZXJTcGlubmVyQ29tcG9uZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbigge30gLCBOdW1iZXJTcGlubmVyRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKCF0aGlzLm9wdGlvbnMudGV4dEFsaWduKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy50ZXh0QWxpZ24gPSAgdGhpcy5jb2x1bW4uYWxpZ24gfHwgJ2xlZnQnO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UuaW5wdXQubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAvLyB0aGlzLnN0b3BQcm9wYWdhdGlvbiA9IGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIG9uVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UodGhpcy5ldmVudFByYW1zKCRldmVudCkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGV2ZW50UHJhbXMoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcCA9IHRoaXMuZXZlbnRQYXJhbXMoJGV2ZW50KTtcclxuICAgICAgICBwWydpbnN0YW5jZSddID0gdGhpcy5pbnN0YW5jZTtcclxuICAgICAgICBwWydlZGl0b3InXSA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcbn1cclxuIl19