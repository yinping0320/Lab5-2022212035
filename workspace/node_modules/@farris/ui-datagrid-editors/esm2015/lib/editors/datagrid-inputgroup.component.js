/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Injector } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:04:50
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild, Output } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { InputGroupComponent } from '@farris/ui-input-group';
import { InputGroupDefaultOptions } from '../editor-default-options';
export class DatagridInputGroupComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
        this.injector = injector;
        this.clear = new EventEmitter();
        this.clickHandle = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.textbox.nativeElement;
        this.options = Object.assign({}, InputGroupDefaultOptions, this.options);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        if (this.options.clear) {
            this.options.clear.call(this, this.eParams($event));
        }
        else {
            this.clear.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        if (this.options.clickHandle) {
            this.options.clickHandle.call(this, this.eParams($event));
        }
        else {
            this.clickHandle.emit();
        }
        this.instance.cd.detectChanges();
        return false;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        if (this.options.valueChange) {
            this.options.valueChange.call(this, this.eParams($event));
        }
    }
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    eParams($event) {
        /** @type {?} */
        const p = this.eventParams($event);
        p['$event'] = $event;
        p['instance'] = this.instance;
        p['editor'] = this;
        p.value = $event ? $event.value : '';
        return p;
    }
}
DatagridInputGroupComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-inputgroup',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto">
        <input-group #ig style="width: 100%"
            (clear)="onClear($event)"
            (clickHandle)="onClick($event)"
            (valueChange)="onValueChange($event)"
            [readonly] = "options.readonly"
            [editable] = "options.editable"
            [enableClear] = "options.showClear"
            [groupText] = "options.groupText"
            [isPassword] = "options.isPassword"
            [textAlign]="options.textAlign"
            [enableViewPassword]="options.enableViewPassword"
            [formControlName]="column.field"
            [maxLength]="options.maxLength"
            ></input-group>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridInputGroupComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridInputGroupComponent.propDecorators = {
    clear: [{ type: Output }],
    clickHandle: [{ type: Output }],
    instance: [{ type: ViewChild, args: ['ig',] }]
};
if (false) {
    /** @type {?} */
    DatagridInputGroupComponent.prototype.clear;
    /** @type {?} */
    DatagridInputGroupComponent.prototype.clickHandle;
    /** @type {?} */
    DatagridInputGroupComponent.prototype.instance;
    /** @type {?} */
    DatagridInputGroupComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtaW5wdXRncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1pbnB1dGdyb3VwLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7OztBQVN2RCxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFTLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRyxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQXVCckUsTUFBTSxPQUFPLDJCQUE0QixTQUFRLDJCQUEyQjs7Ozs7O0lBTXhFLFlBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVMsUUFBa0I7UUFFaEUsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFGa0IsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUx0RCxVQUFLLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMzQixnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFPL0MsQ0FBQzs7OztJQUVHLFFBQVE7UUFDSixLQUFLLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDeEQsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsTUFBTTtRQUNWLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7WUFDcEIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDdkQ7YUFBTTtZQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDckI7UUFDRCxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUNqQyxPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxNQUFNO1FBQ1YsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM3RDthQUFNO1lBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMzQjtRQUNELElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ2pDLE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQU07UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUM3RDtJQUNMLENBQUM7Ozs7OztJQUVPLE9BQU8sQ0FBQyxNQUFNOztjQUNaLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsTUFBTSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbkIsQ0FBQyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztRQUNyQyxPQUFPLENBQUMsQ0FBQztJQUNiLENBQUM7OztZQXhFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsUUFBUSxFQUFFOzs7Ozs7Ozs7Ozs7Ozs7OztLQWlCVDthQUNKOzs7O1lBekIyQixTQUFTO1lBQUUsVUFBVTtZQVQxQixRQUFROzs7b0JBcUMxQixNQUFNOzBCQUNOLE1BQU07dUJBRU4sU0FBUyxTQUFDLElBQUk7Ozs7SUFIZiw0Q0FBcUM7O0lBQ3JDLGtEQUEyQzs7SUFFM0MsK0NBQStDOztJQUVSLCtDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MTowMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0xNCAxMzowNDo1MFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgVmlld0NoaWxkLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IElucHV0R3JvdXBDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgSW5wdXRHcm91cERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3ItaW5wdXRncm91cCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCI+XHJcbiAgICAgICAgPGlucHV0LWdyb3VwICNpZyBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICAgICAgKGNsZWFyKT1cIm9uQ2xlYXIoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgIChjbGlja0hhbmRsZSk9XCJvbkNsaWNrKCRldmVudClcIlxyXG4gICAgICAgICAgICAodmFsdWVDaGFuZ2UpPVwib25WYWx1ZUNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XSA9IFwib3B0aW9ucy5yZWFkb25seVwiXHJcbiAgICAgICAgICAgIFtlZGl0YWJsZV0gPSBcIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgICAgICBbZW5hYmxlQ2xlYXJdID0gXCJvcHRpb25zLnNob3dDbGVhclwiXHJcbiAgICAgICAgICAgIFtncm91cFRleHRdID0gXCJvcHRpb25zLmdyb3VwVGV4dFwiXHJcbiAgICAgICAgICAgIFtpc1Bhc3N3b3JkXSA9IFwib3B0aW9ucy5pc1Bhc3N3b3JkXCJcclxuICAgICAgICAgICAgW3RleHRBbGlnbl09XCJvcHRpb25zLnRleHRBbGlnblwiXHJcbiAgICAgICAgICAgIFtlbmFibGVWaWV3UGFzc3dvcmRdPVwib3B0aW9ucy5lbmFibGVWaWV3UGFzc3dvcmRcIlxyXG4gICAgICAgICAgICBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiXHJcbiAgICAgICAgICAgIFttYXhMZW5ndGhdPVwib3B0aW9ucy5tYXhMZW5ndGhcIlxyXG4gICAgICAgICAgICA+PC9pbnB1dC1ncm91cD5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkSW5wdXRHcm91cENvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQE91dHB1dCgpIGNsZWFyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsaWNrSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2lnJykgaW5zdGFuY2U6IElucHV0R3JvdXBDb21wb25lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICAgICkge1xyXG4gICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG59XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UudGV4dGJveC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9ICwgSW5wdXRHcm91cERlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uQ2xlYXIoJGV2ZW50KSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5jbGVhcikge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuY2xlYXIuY2FsbCh0aGlzLCB0aGlzLmVQYXJhbXMoJGV2ZW50KSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhci5lbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsaWNrKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xpY2tIYW5kbGUpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNsaWNrSGFuZGxlLmNhbGwodGhpcywgdGhpcy5lUGFyYW1zKCRldmVudCkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tIYW5kbGUuZW1pdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmluc3RhbmNlLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZS5jYWxsKHRoaXMsIHRoaXMuZVBhcmFtcygkZXZlbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBlUGFyYW1zKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmV2ZW50UGFyYW1zKCRldmVudCk7XHJcbiAgICAgICAgcFsnJGV2ZW50J10gPSAkZXZlbnQ7XHJcbiAgICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgcFsnZWRpdG9yJ10gPSB0aGlzO1xyXG4gICAgICAgIHAudmFsdWUgPSAkZXZlbnQgPyAkZXZlbnQudmFsdWUgOiAnJztcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxufVxyXG4iXX0=