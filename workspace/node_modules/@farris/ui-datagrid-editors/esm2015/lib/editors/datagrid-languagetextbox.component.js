/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { LanguageTextboxComponent } from '@farris/ui-language-textbox';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { LanguageTextboxDefaultOptions } from '../editor-default-options';
export class DatagridLanguageTextboxComponent extends DatagridBaseEditorDirective {
    /**
     * @param {?} render
     * @param {?} el
     * @param {?} injector
     */
    constructor(render, el, injector) {
        super(render, el, injector);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.inputElement = this.instance.input.textbox.nativeElement;
        this.options = Object.assign({}, LanguageTextboxDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            (val) => { });
        }
    }
}
DatagridLanguageTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'grid-editor-language-textbox',
                template: `
    <div [formGroup]="group" class="f-datagrid-cell-formgroup farris-group-auto" style="line-height:100%">
        <language-textbox #ins style="width: 100%"
            [languages]="options.languages" [formControlName]="column.field"
            [enableClear]="options.enableClear"
            [readonly]="options.readonly"
            [currentLanguage]="options.currentLanguage"
            ></language-textbox>
    </div>
    `
            }] }
];
/** @nocollapse */
DatagridLanguageTextboxComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ElementRef },
    { type: Injector }
];
DatagridLanguageTextboxComponent.propDecorators = {
    instance: [{ type: ViewChild, args: ['ins',] }]
};
if (false) {
    /** @type {?} */
    DatagridLanguageTextboxComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtbGFuZ3VhZ2V0ZXh0Ym94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLWxhbmd1YWdldGV4dGJveC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDZCQUE2QixDQUFDO0FBQ3ZFLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBZTFFLE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSwyQkFBMkI7Ozs7OztJQUc3RSxZQUFZLE1BQWlCLEVBQUUsRUFBYyxFQUFFLFFBQWtCO1FBQzdELEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ0osS0FBSyxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUM5RCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLDZCQUE2QixFQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvRSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Ozs7WUFBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLEdBQUUsQ0FBQyxDQUFBLENBQUM7U0FDMUM7SUFDTCxDQUFDOzs7WUEzQkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSw4QkFBOEI7Z0JBQ3hDLFFBQVEsRUFBRTs7Ozs7Ozs7O0tBU1Q7YUFDSjs7OztZQWpCMkIsU0FBUztZQUFFLFVBQVU7WUFBRSxRQUFROzs7dUJBb0J0RCxTQUFTLFNBQUMsS0FBSzs7OztJQUFoQixvREFBcUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBJbmplY3RvciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlVGV4dGJveENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktbGFuZ3VhZ2UtdGV4dGJveCc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IExhbmd1YWdlVGV4dGJveERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3ItbGFuZ3VhZ2UtdGV4dGJveCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCIgc3R5bGU9XCJsaW5lLWhlaWdodDoxMDAlXCI+XHJcbiAgICAgICAgPGxhbmd1YWdlLXRleHRib3ggI2lucyBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICAgICAgW2xhbmd1YWdlc109XCJvcHRpb25zLmxhbmd1YWdlc1wiIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW2VuYWJsZUNsZWFyXT1cIm9wdGlvbnMuZW5hYmxlQ2xlYXJcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPVwib3B0aW9ucy5yZWFkb25seVwiXHJcbiAgICAgICAgICAgIFtjdXJyZW50TGFuZ3VhZ2VdPVwib3B0aW9ucy5jdXJyZW50TGFuZ3VhZ2VcIlxyXG4gICAgICAgICAgICA+PC9sYW5ndWFnZS10ZXh0Ym94PlxyXG4gICAgPC9kaXY+XHJcbiAgICBgLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRMYW5ndWFnZVRleHRib3hDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2lucycpIGluc3RhbmNlOiBMYW5ndWFnZVRleHRib3hDb21wb25lbnQ7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5pbnB1dC50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgTGFuZ3VhZ2VUZXh0Ym94RGVmYXVsdE9wdGlvbnMgLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgIXRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UgPSAodmFsKSA9PiB7fTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19