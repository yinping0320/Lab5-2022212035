/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 16:22:23
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 11:19:46
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridTextareaComponent } from './editors/datagrid-textarea.component';
import { DatagridTextboxComponent } from './editors/datagrid-textbox.component';
import { DatagridCheckboxComponent } from './editors/datagrid-checkbox.component';
import { DatagridDatepickerComponent } from './editors/datagrid-datepicker.component';
import { DatagridInputGroupComponent } from './editors/datagrid-inputgroup.component';
import { DatagridSelectComponent } from './editors/datagrid-select.component';
import { DatagridLookupComponent } from './editors/datagrid-lookup.component';
import { DatagridNumberSpinnerComponent } from './editors/datagrid-numberspinner.component';
import { DatagridComboListComponent } from './editors/datagrid-combolist.component';
import { DatagridSwitchComponent } from './editors/datagrid-switch.component';
import { DatagridTimerComponent } from './editors/datagrid-timer.component';
import { DatagridCombolookupComponent } from './editors/datagrid-combolookup.component';
import { DatagridLanguageTextboxComponent } from './editors/datagrid-languagetextbox.component';
import { DatagridEnumEditorComponent } from './editors/datagrid-enumeditor.component';
import { DatagridSortEditorComponent } from './editors/datagrid-sorteditor.component';
import { DatagridFilterEditorComponent } from './editors/datagrid-filtereditor.component';
/** @type {?} */
export const EditorTypes = {
    TEXTAREA: 'textarea',
    TEXTBOX: 'textbox',
    CHECKBOX: 'checkbox',
    DATEPICKER: 'datepicker',
    INPUTGROUP: 'input-group',
    SELECT: 'select',
    LOOKUP: 'lookup',
    NUMBERBOX: 'numberbox',
    COMBOLIST: 'combolist',
    SWITCH: 'switch',
    TIMEPICKER: 'timepicker',
    COMBOLOOKUP: 'combo-lookup',
    LANGUAGETEXTBOX: 'language-textbox',
    ENUMEDITOR: 'enum-editor',
    FILTEREDITOR: 'filter-editor',
    SORTEDITOR: 'sort-editor'
};
/** @type {?} */
export const EditorProviders = [
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTAREA, value: DatagridTextareaComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TEXTBOX, value: DatagridTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.CHECKBOX, value: DatagridCheckboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.DATEPICKER, value: DatagridDatepickerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.INPUTGROUP, value: DatagridInputGroupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SELECT, value: DatagridSelectComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LOOKUP, value: DatagridLookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.NUMBERBOX, value: DatagridNumberSpinnerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLIST, value: DatagridComboListComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SWITCH, value: DatagridSwitchComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.TIMEPICKER, value: DatagridTimerComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.COMBOLOOKUP, value: DatagridCombolookupComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.LANGUAGETEXTBOX, value: DatagridLanguageTextboxComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.ENUMEDITOR, value: DatagridEnumEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.FILTEREDITOR, value: DatagridFilterEditorComponent }, multi: true },
    { provide: GRID_EDITORS, useValue: { name: EditorTypes.SORTEDITOR, value: DatagridSortEditorComponent }, multi: true }
];
/**
 * 值变化参数
 * @record
 */
export function ValueChangeParams() { }
if (false) {
    /**
     * 编辑器实例
     * @type {?|undefined}
     */
    ValueChangeParams.prototype.editor;
    /**
     * 编辑器组件实例
     * @type {?|undefined}
     */
    ValueChangeParams.prototype.instance;
    /**
     * 当前行数据
     * @type {?|undefined}
     */
    ValueChangeParams.prototype.rowData;
    /**
     * 当前行ID
     * @type {?|undefined}
     */
    ValueChangeParams.prototype.rowId;
    /**
     * 当前编辑字段值
     * @type {?}
     */
    ValueChangeParams.prototype.value;
    /* Skipping unhandled member: [key: string]: any;*/
}
//# sourceMappingURL=data:application/json;base64,