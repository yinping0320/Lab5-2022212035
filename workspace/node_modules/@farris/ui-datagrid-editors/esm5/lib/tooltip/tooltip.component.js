/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-21 14:38:04
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-26 16:50:32
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, ViewEncapsulation, Input, HostListener, ElementRef } from '@angular/core';
import { FormControl } from '@angular/forms';
import { DomHandler } from '@farris/ui-datagrid';
var DatagridTooltipComponent = /** @class */ (function () {
    function DatagridTooltipComponent(el) {
        this.el = el;
        this.tooltipPosition = 'right';
        this.cls = '';
        this.type = 'danger';
    }
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onMouseEnter = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onMouseLeave = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onFocusIn = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onFocusOut = /**
     * @return {?}
     */
    function () {
        this.hide();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.onKeyup = /**
     * @return {?}
     */
    function () {
        if (this.control.invalid) {
            this.showErrMsg();
        }
        else {
            this.hide();
        }
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.showErrMsg = /**
     * @return {?}
     */
    function () {
        // this.errorMessage = this.getErrorMsg();
        if (this.message !== null && this.message !== undefined) {
            this.show();
        }
    };
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.hide = 
    // getErrorMsg(): string {
    //     let errMsg = '';
    //     Object.keys(this.control.errors).map(key => {
    //         errMsg = this.vms.getValidatorErrorMessage(key, this.dg.validators );
    //     });
    //     return errMsg;
    // }
    /**
     * @return {?}
     */
    function () {
        this.ngOnDestroy();
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.show = /**
     * @return {?}
     */
    function () {
        /** 如果存在则不新建，只需要修改里面的内容 */
        if (!this.container) {
            this.create();
        }
        else {
            DomHandler.findSingle(this.container, '.f-tooltip-text').innerText = this.message;
        }
        /** @type {?} */
        var boxEl = this.el.nativeElement.parentElement;
        /** @type {?} */
        var offset = DomHandler.getOffset(boxEl);
        /** @type {?} */
        var targetTop = offset.top;
        /** @type {?} */
        var targetLeft = offset.left;
        /** @type {?} */
        var left;
        /** @type {?} */
        var top;
        this.container.style.display = 'block';
        switch (this.tooltipPosition) {
            case 'right':
                left = targetLeft + DomHandler.getOuterWidth(boxEl);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'left':
                left = targetLeft - DomHandler.getOuterWidth(this.container);
                top = targetTop + (DomHandler.getOuterHeight(boxEl) - DomHandler.getOuterHeight(this.container)) / 2;
                break;
            case 'top':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
            case 'bottom':
                left = targetLeft + (DomHandler.getOuterWidth(boxEl) - DomHandler.getOuterWidth(this.container)) / 2;
                top = targetTop + DomHandler.getOuterHeight(boxEl);
                break;
            case 'top-left':
                left = targetLeft;
                top = targetTop - DomHandler.getOuterHeight(this.container);
                break;
        }
        this.container.style.left = left + 'px';
        this.container.style.top = top + 'px';
        this.container.style.zIndex = 999999; // different from PrimeNg
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.create = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var styleClass = 'f-tooltip ' + this.getThemeCls() + ' f-tooltip-' + this.tooltipPosition + ' ' + this.cls;
        this.container = document.createElement('div');
        if (this.tooltipStyleClass) {
            styleClass += ' ' + this.tooltipStyleClass;
        }
        this.container.className = styleClass;
        /** @type {?} */
        var tooltipArrow = document.createElement('div');
        tooltipArrow.className = 'f-tooltip-arrow ';
        this.container.appendChild(tooltipArrow);
        /** @type {?} */
        var tooltipText = document.createElement('div');
        tooltipText.className = 'f-tooltip-text ';
        tooltipText.innerHTML = this.message;
        if (this.positionStyle) {
            this.container.style.position = this.positionStyle;
        }
        this.container.appendChild(tooltipText);
        document.body.appendChild(this.container);
    };
    /**
     * @private
     * @return {?}
     */
    DatagridTooltipComponent.prototype.getThemeCls = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.type) {
            return 'f-tooltip-' + this.type;
        }
        return '';
    };
    /**
     * @return {?}
     */
    DatagridTooltipComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.container && this.container.parentElement) {
            document.body.removeChild(this.container);
        }
        this.container = null;
    };
    DatagridTooltipComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-tooltip',
                    template: "\n    <ng-content></ng-content>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    DatagridTooltipComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DatagridTooltipComponent.propDecorators = {
        tooltipPosition: [{ type: Input }],
        control: [{ type: Input }],
        positionStyle: [{ type: Input }],
        tooltipStyleClass: [{ type: Input }],
        message: [{ type: Input }],
        cls: [{ type: Input }],
        type: [{ type: Input }],
        onMouseEnter: [{ type: HostListener, args: ['mouseenter',] }],
        onMouseLeave: [{ type: HostListener, args: ['mouseleave',] }],
        onFocusIn: [{ type: HostListener, args: ['focusin',] }],
        onFocusOut: [{ type: HostListener, args: ['focusout',] }],
        onKeyup: [{ type: HostListener, args: ['keyup',] }]
    };
    return DatagridTooltipComponent;
}());
export { DatagridTooltipComponent };
if (false) {
    /** @type {?} */
    DatagridTooltipComponent.prototype.tooltipPosition;
    /** @type {?} */
    DatagridTooltipComponent.prototype.control;
    /** @type {?} */
    DatagridTooltipComponent.prototype.positionStyle;
    /** @type {?} */
    DatagridTooltipComponent.prototype.tooltipStyleClass;
    /** @type {?} */
    DatagridTooltipComponent.prototype.message;
    /** @type {?} */
    DatagridTooltipComponent.prototype.cls;
    /** @type {?} */
    DatagridTooltipComponent.prototype.type;
    /** @type {?} */
    DatagridTooltipComponent.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DatagridTooltipComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,