/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, NgZone, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from './../datagrid-base-editor.directive';
import { FarrisDatepickerComponent } from '@farris/ui-datepicker';
import { DatePickerDefaultOptions } from '../editor-default-options';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:40:36
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:58:14
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
var DatagridDatepickerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridDatepickerComponent, _super);
    function DatagridDatepickerComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, DatePickerDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.dateInput ? this.instance.dateInput.nativeElement : this.el.nativeElement.querySelector('input');
        _super.prototype.ngAfterViewInit.call(this);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.onClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.clear) {
            this.options.clear(this.eventPrams($event));
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
        if (this.inputElement) {
            this.inputElement.focus();
        }
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridDatepickerComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridDatepickerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-datepicker',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <farris-datepicker\n            #datepicker\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [locale]=\"options.locale\"\n            [dateRange]=\"options.dateRange\"\n            [showTime]=\"options.showTime\"\n            [showType]=\"options.showType\"\n            [dateFormat]=\"options.dateFormat\"\n            [returnFormat]=\"options.returnFormat\"\n            [returnType]=\"options.returnType\"\n            [useDefault]=\"options.useDefault\"\n            [placeholder]=\"options.placeholder\"\n            [maxDate]=\"options.maxDate\"\n            [minDate]=\"options.minDate\"\n            [dateRangeDatesDelimiter]=\"options.dateRangeDatesDelimiter\"\n            [showWeekNumbers]=\"options?.showWeekNumbers\"\n            [shortcuts]=\"[]\"\n            (clear)=\"onClear($event)\"\n            (valueChange)=\"onValueChange($event)\"\n            [viewType]=\"options.viewType\"\n            [showPresent]=\"options.showPresent\"\n            [hourStep]=\"options.hourStep\"\n            [minuteStep]=\"options.minuteStep\"\n            [secondStep]=\"options.secondStep\"\n            [firstDayOfWeek]=\"options.firstDayOfWeek\"\n        ></farris-datepicker>\n    </div>\n\n\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridDatepickerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridDatepickerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['datepicker',] }]
    };
    return DatagridDatepickerComponent;
}(DatagridBaseEditorDirective));
export { DatagridDatepickerComponent };
if (false) {
    /** @type {?} */
    DatagridDatepickerComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridDatepickerComponent.prototype.ngzone;
    /** @type {?} */
    DatagridDatepickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZGF0ZXBpY2tlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1kYXRlcGlja2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQVMsU0FBUyxFQUFFLFFBQVEsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDNUgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDbEYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbEUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7OztBQVVyRTtJQXNDaUQsdURBQTJCO0lBSXhFLHFDQUNJLE1BQWlCLEVBQUUsRUFBYyxFQUFVLE1BQWMsRUFBUyxRQUFrQjtRQUR4RixZQUdBLGtCQUFNLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQzlCO1FBSGtELFlBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxjQUFRLEdBQVIsUUFBUSxDQUFVOztJQUc1RixDQUFDOzs7O0lBRUcsOENBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0UsQ0FBQzs7OztJQUVELHFEQUFlOzs7SUFBZjtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFFO1FBQ3BJLGlCQUFNLGVBQWUsV0FBRSxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsNkNBQU87Ozs7SUFBUCxVQUFRLE1BQU07UUFDVixJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO1lBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Ozs7O0lBRUQsbURBQWE7Ozs7SUFBYixVQUFjLE1BQU07UUFDaEIsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMxQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDckQ7UUFFRCxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUM3QjtJQUNMLENBQUM7Ozs7OztJQUVPLGdEQUFVOzs7OztJQUFsQixVQUFtQixNQUFNOztZQUNmLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxDQUFDO0lBQ2IsQ0FBQzs7Z0JBL0VKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxRQUFRLEVBQUUsZzZDQWtDVDtpQkFDSjs7OztnQkFsRDJCLFNBQVM7Z0JBQUUsVUFBVTtnQkFBRSxNQUFNO2dCQUFvQixRQUFROzs7MkJBcURoRixTQUFTLFNBQUMsWUFBWTs7SUF3QzNCLGtDQUFDO0NBQUEsQUFoRkQsQ0FzQ2lELDJCQUEyQixHQTBDM0U7U0ExQ1ksMkJBQTJCOzs7SUFFcEMsK0NBQTZEOzs7OztJQUd0Qiw2Q0FBc0I7O0lBQUUsK0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBJbnB1dCwgVmlld0NoaWxkLCBJbmplY3RvciwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVwaWNrZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgeyBEYXRlUGlja2VyRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MDozNlxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0xNCAxMjo1ODoxNFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdncmlkLWVkaXRvci1kYXRlcGlja2VyJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgICA8ZmFycmlzLWRhdGVwaWNrZXJcclxuICAgICAgICAgICAgI2RhdGVwaWNrZXJcclxuICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICBbZWRpdGFibGVdPVwib3B0aW9ucy5lZGl0YWJsZVwiXHJcbiAgICAgICAgICAgIFtsb2NhbGVdPVwib3B0aW9ucy5sb2NhbGVcIlxyXG4gICAgICAgICAgICBbZGF0ZVJhbmdlXT1cIm9wdGlvbnMuZGF0ZVJhbmdlXCJcclxuICAgICAgICAgICAgW3Nob3dUaW1lXT1cIm9wdGlvbnMuc2hvd1RpbWVcIlxyXG4gICAgICAgICAgICBbc2hvd1R5cGVdPVwib3B0aW9ucy5zaG93VHlwZVwiXHJcbiAgICAgICAgICAgIFtkYXRlRm9ybWF0XT1cIm9wdGlvbnMuZGF0ZUZvcm1hdFwiXHJcbiAgICAgICAgICAgIFtyZXR1cm5Gb3JtYXRdPVwib3B0aW9ucy5yZXR1cm5Gb3JtYXRcIlxyXG4gICAgICAgICAgICBbcmV0dXJuVHlwZV09XCJvcHRpb25zLnJldHVyblR5cGVcIlxyXG4gICAgICAgICAgICBbdXNlRGVmYXVsdF09XCJvcHRpb25zLnVzZURlZmF1bHRcIlxyXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwib3B0aW9ucy5wbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgIFttYXhEYXRlXT1cIm9wdGlvbnMubWF4RGF0ZVwiXHJcbiAgICAgICAgICAgIFttaW5EYXRlXT1cIm9wdGlvbnMubWluRGF0ZVwiXHJcbiAgICAgICAgICAgIFtkYXRlUmFuZ2VEYXRlc0RlbGltaXRlcl09XCJvcHRpb25zLmRhdGVSYW5nZURhdGVzRGVsaW1pdGVyXCJcclxuICAgICAgICAgICAgW3Nob3dXZWVrTnVtYmVyc109XCJvcHRpb25zPy5zaG93V2Vla051bWJlcnNcIlxyXG4gICAgICAgICAgICBbc2hvcnRjdXRzXT1cIltdXCJcclxuICAgICAgICAgICAgKGNsZWFyKT1cIm9uQ2xlYXIoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICBbdmlld1R5cGVdPVwib3B0aW9ucy52aWV3VHlwZVwiXHJcbiAgICAgICAgICAgIFtzaG93UHJlc2VudF09XCJvcHRpb25zLnNob3dQcmVzZW50XCJcclxuICAgICAgICAgICAgW2hvdXJTdGVwXT1cIm9wdGlvbnMuaG91clN0ZXBcIlxyXG4gICAgICAgICAgICBbbWludXRlU3RlcF09XCJvcHRpb25zLm1pbnV0ZVN0ZXBcIlxyXG4gICAgICAgICAgICBbc2Vjb25kU3RlcF09XCJvcHRpb25zLnNlY29uZFN0ZXBcIlxyXG4gICAgICAgICAgICBbZmlyc3REYXlPZldlZWtdPVwib3B0aW9ucy5maXJzdERheU9mV2Vla1wiXHJcbiAgICAgICAgPjwvZmFycmlzLWRhdGVwaWNrZXI+XHJcbiAgICA8L2Rpdj5cclxuXHJcblxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkRGF0ZXBpY2tlckNvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnZGF0ZXBpY2tlcicpIGluc3RhbmNlOiBGYXJyaXNEYXRlcGlja2VyQ29tcG9uZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHVibGljIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgICAgKSB7XHJcbiAgICBzdXBlcihyZW5kZXIsIGVsLCBpbmplY3Rvcik7XHJcbn1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9ICwgRGF0ZVBpY2tlckRlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IHRoaXMuaW5zdGFuY2UuZGF0ZUlucHV0ID8gdGhpcy5pbnN0YW5jZS5kYXRlSW5wdXQubmF0aXZlRWxlbWVudCA6IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpIDtcclxuICAgICAgICBzdXBlci5uZ0FmdGVyVmlld0luaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbkNsZWFyKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuY2xlYXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLmNsZWFyKHRoaXMuZXZlbnRQcmFtcygkZXZlbnQpKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSh0aGlzLmV2ZW50UHJhbXMoJGV2ZW50KSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnB1dEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQuZm9jdXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBldmVudFByYW1zKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmV2ZW50UGFyYW1zKCRldmVudCk7XHJcbiAgICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgcFsnZWRpdG9yJ10gPSB0aGlzO1xyXG4gICAgICAgIHJldHVybiBwO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==