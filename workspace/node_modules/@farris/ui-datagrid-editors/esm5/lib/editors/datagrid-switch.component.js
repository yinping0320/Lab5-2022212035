/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-24 15:33:24
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { SwitchComponent } from '@farris/ui-switch';
import { SwitchDefaultOptions } from '../editor-default-options';
var DatagridSwitchComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridSwitchComponent, _super);
    function DatagridSwitchComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridSwitchComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, SwitchDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { });
        }
        /** @type {?} */
        var align = this.column.align || 'left';
        if (align === 'left') {
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'justify-content', align);
            this.render.setStyle(this.ctrlBoxEl.nativeElement, 'padding-left', '0.75rem');
        }
        this.inputElement = this.instance.switchElRef.nativeElement;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridSwitchComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['checked'] = this.instance.checked;
        p.value = this.instance['getValue'](this.instance.checked);
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    };
    DatagridSwitchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-switch',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" style=\"line-height:100%\" #ctrlbox hidefocus=\"true\">\n        <farris-switch #switch [formControlName]=\"column.field\"\n        [square]=\"options.square\"\n        [readonly]=\"options.readonly\"\n        [disabled]=\"options.disabled\"\n        [checkedLabel]=\"options.checkedLabel\"\n        [uncheckedLabel]=\"options.uncheckedLabel\"\n        [trueValue]=\"options?.trueValue\"\n        [falseValue]=\"options?.falseValue\"\n        (valueChange)=\"onValueChange($event)\"></farris-switch>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridSwitchComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridSwitchComponent.propDecorators = {
        ctrlBoxEl: [{ type: ViewChild, args: ['ctrlbox',] }],
        instance: [{ type: ViewChild, args: ['switch',] }]
    };
    return DatagridSwitchComponent;
}(DatagridBaseEditorDirective));
export { DatagridSwitchComponent };
if (false) {
    /** @type {?} */
    DatagridSwitchComponent.prototype.ctrlBoxEl;
    /** @type {?} */
    DatagridSwitchComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLXN3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7OztBQVFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzlGLE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUdqRTtJQWdCNkMsbURBQTJCO0lBR3BFLGlDQUFZLE1BQWlCLEVBQUUsRUFBYyxFQUFFLFFBQWtCO2VBQzdELGtCQUFNLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDO0lBQy9CLENBQUM7Ozs7SUFFRCwwQ0FBUTs7O0lBQVI7UUFDSSxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUVqQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLG9CQUFvQixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNyRSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Ozs7WUFBRyxVQUFDLEdBQXNCLElBQU0sQ0FBQyxDQUFBLENBQUM7U0FDN0Q7O1lBRUssS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU07UUFDekMsSUFBSSxLQUFLLEtBQUssTUFBTSxFQUFFO1lBQ2xCLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLGlCQUFpQixFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzdFLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsYUFBYSxFQUFFLGNBQWMsRUFBRSxTQUFTLENBQUMsQ0FBQztTQUNqRjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO0lBQ2hFLENBQUM7Ozs7O0lBRUQsK0NBQWE7Ozs7SUFBYixVQUFjLE1BQU07O1lBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQztRQUNyQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM1RCxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7O2dCQS9DSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsUUFBUSxFQUFFLDhsQkFZVDtpQkFDSjs7OztnQkFyQjJCLFNBQVM7Z0JBQUUsVUFBVTtnQkFBRSxRQUFROzs7NEJBdUJ0RCxTQUFTLFNBQUMsU0FBUzsyQkFDbkIsU0FBUyxTQUFDLFFBQVE7O0lBOEJ2Qiw4QkFBQztDQUFBLEFBaERELENBZ0I2QywyQkFBMkIsR0FnQ3ZFO1NBaENZLHVCQUF1Qjs7O0lBQ2hDLDRDQUE0Qzs7SUFDNUMsMkNBQStDIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0MTowMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOC0yNCAxNTozMzoyNFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBTd2l0Y2hDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXN3aXRjaCc7XHJcbmltcG9ydCB7IFN3aXRjaERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcbmltcG9ydCB7IFZhbHVlQ2hhbmdlUGFyYW1zIH0gZnJvbSAnLi4vZWRpdG9ycyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3Itc3dpdGNoJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIiBzdHlsZT1cImxpbmUtaGVpZ2h0OjEwMCVcIiAjY3RybGJveCBoaWRlZm9jdXM9XCJ0cnVlXCI+XHJcbiAgICAgICAgPGZhcnJpcy1zd2l0Y2ggI3N3aXRjaCBbZm9ybUNvbnRyb2xOYW1lXT1cImNvbHVtbi5maWVsZFwiXHJcbiAgICAgICAgW3NxdWFyZV09XCJvcHRpb25zLnNxdWFyZVwiXHJcbiAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgIFtkaXNhYmxlZF09XCJvcHRpb25zLmRpc2FibGVkXCJcclxuICAgICAgICBbY2hlY2tlZExhYmVsXT1cIm9wdGlvbnMuY2hlY2tlZExhYmVsXCJcclxuICAgICAgICBbdW5jaGVja2VkTGFiZWxdPVwib3B0aW9ucy51bmNoZWNrZWRMYWJlbFwiXHJcbiAgICAgICAgW3RydWVWYWx1ZV09XCJvcHRpb25zPy50cnVlVmFsdWVcIlxyXG4gICAgICAgIFtmYWxzZVZhbHVlXT1cIm9wdGlvbnM/LmZhbHNlVmFsdWVcIlxyXG4gICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIj48L2ZhcnJpcy1zd2l0Y2g+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFN3aXRjaENvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBAVmlld0NoaWxkKCdjdHJsYm94JykgY3RybEJveEVsOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnc3dpdGNoJykgaW5zdGFuY2U6IFN3aXRjaENvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcblxyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIFN3aXRjaERlZmF1bHRPcHRpb25zLCB0aGlzLm9wdGlvbnMpO1xyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgIXRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMudmFsdWVDaGFuZ2UgPSAodmFsOiBWYWx1ZUNoYW5nZVBhcmFtcykgPT4ge307XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBhbGlnbiA9IHRoaXMuY29sdW1uLmFsaWduIHx8ICdsZWZ0JztcclxuICAgICAgICBpZiAoYWxpZ24gPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmN0cmxCb3hFbC5uYXRpdmVFbGVtZW50LCAnanVzdGlmeS1jb250ZW50JywgYWxpZ24pO1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLmN0cmxCb3hFbC5uYXRpdmVFbGVtZW50LCAncGFkZGluZy1sZWZ0JywgJzAuNzVyZW0nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5zd2l0Y2hFbFJlZi5uYXRpdmVFbGVtZW50O1xyXG4gICAgfVxyXG5cclxuICAgIG9uVmFsdWVDaGFuZ2UoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgcCA9IHRoaXMuZXZlbnRQYXJhbXMoJGV2ZW50KTtcclxuICAgICAgICBwWydjaGVja2VkJ10gPSB0aGlzLmluc3RhbmNlLmNoZWNrZWQ7XHJcbiAgICAgICAgcC52YWx1ZSA9IHRoaXMuaW5zdGFuY2VbJ2dldFZhbHVlJ10oIHRoaXMuaW5zdGFuY2UuY2hlY2tlZCk7XHJcbiAgICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgcFsnZWRpdG9yJ10gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZShwKTtcclxuICAgIH1cclxufVxyXG4iXX0=