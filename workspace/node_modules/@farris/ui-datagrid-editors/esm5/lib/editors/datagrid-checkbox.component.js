/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:44:10
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 12:46:12
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, NgZone, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
var DatagridCheckboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridCheckboxComponent, _super);
    function DatagridCheckboxComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.nativeElement;
        this.checked = this.formControl.value;
        /** @type {?} */
        var align = this.column.align || 'left';
        this.render.setStyle(this.chkboxEl.nativeElement, 'justify-content', align);
        this.render.listen(this.inputElement, 'keydow.Sapce', this.onSpaceHandle);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.onSpaceHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.checkedChanges();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.handleClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.checkedChanges();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCheckboxComponent.prototype.checkedChanges = /**
     * @private
     * @return {?}
     */
    function () {
        this.checked = !this.checked;
        this.formControl.setValue(this.checked);
        this.formControl.markAsDirty();
        if (this.options && this.options.valueChange) {
            /** @type {?} */
            var p = this.eventParams(event);
            p.value = this.checked;
            p['instance'] = this.instance;
            p['editor'] = this;
            this.options.valueChange(p);
        }
    };
    DatagridCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-checkbox',
                    template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup\" #chkbox>\n    <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input type=\"checkbox\" #chk class=\"custom-control-input\" [formControlName]=\"column.field\" [checked]=\"checked\">\n        <label class=\"custom-control-label\" (click)=\"handleClick($event)\"></label>\n    </div></div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridCheckboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridCheckboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['chk',] }],
        chkboxEl: [{ type: ViewChild, args: ['chkbox',] }]
    };
    return DatagridCheckboxComponent;
}(DatagridBaseEditorDirective));
export { DatagridCheckboxComponent };
if (false) {
    /** @type {?} */
    DatagridCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.instance;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.chkboxEl;
    /**
     * @type {?}
     * @private
     */
    DatagridCheckboxComponent.prototype.ngzone;
    /** @type {?} */
    DatagridCheckboxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY2hlY2tib3guY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzLyIsInNvdXJjZXMiOlsibGliL2VkaXRvcnMvZGF0YWdyaWQtY2hlY2tib3guY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDdEcsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFaEY7SUFTK0MscURBQTJCO0lBTXRFLG1DQUNJLE1BQWlCLEVBQUUsRUFBYyxFQUFVLE1BQWMsRUFBUyxRQUFrQjtRQUR4RixZQUdJLGtCQUFNLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQzlCO1FBSDhDLFlBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxjQUFRLEdBQVIsUUFBUSxDQUFVOztJQUd4RixDQUFDOzs7O0lBRUQsNENBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDOztZQUVoQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTTtRQUN6QyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUU1RSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLGNBQWMsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDOUUsQ0FBQzs7Ozs7SUFFRCxpREFBYTs7OztJQUFiLFVBQWMsTUFBcUI7UUFDL0IsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDMUIsQ0FBQzs7Ozs7SUFFRCwrQ0FBVzs7OztJQUFYLFVBQVksS0FBaUI7UUFDekIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7OztJQUVPLGtEQUFjOzs7O0lBQXRCO1FBQ0ksSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUM7UUFFL0IsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFOztnQkFDcEMsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDO1lBQ2pDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUN2QixDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQy9CO0lBQ0wsQ0FBQzs7Z0JBdkRKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUUsaVlBS1Q7aUJBQ0o7Ozs7Z0JBWDJCLFNBQVM7Z0JBQUUsVUFBVTtnQkFBRSxNQUFNO2dCQUFhLFFBQVE7OzsyQkFlekUsU0FBUyxTQUFDLEtBQUs7MkJBQ2YsU0FBUyxTQUFDLFFBQVE7O0lBMkN2QixnQ0FBQztDQUFBLEFBeERELENBUytDLDJCQUEyQixHQStDekU7U0EvQ1kseUJBQXlCOzs7SUFFbEMsNENBQWlCOztJQUNqQiw2Q0FBdUM7O0lBQ3ZDLDZDQUEwQzs7Ozs7SUFHSCwyQ0FBc0I7O0lBQUUsNkNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xNCAxMTo0NDoxMFxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0xNCAxMjo0NjoxMlxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBWaWV3Q2hpbGQsIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3ItY2hlY2tib3gnLFxyXG4gICAgdGVtcGxhdGU6IGA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXBcIiAjY2hrYm94PlxyXG4gICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCBmLWNoZWNrcmFkaW8tc2luZ2xlXCI+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJjaGVja2JveFwiICNjaGsgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCIgW2NoZWNrZWRdPVwiY2hlY2tlZFwiPlxyXG4gICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgKGNsaWNrKT1cImhhbmRsZUNsaWNrKCRldmVudClcIj48L2xhYmVsPlxyXG4gICAgPC9kaXY+PC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZENoZWNrYm94Q29tcG9uZW50IGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuXHJcbiAgICBjaGVja2VkOiBib29sZWFuO1xyXG4gICAgQFZpZXdDaGlsZCgnY2hrJykgaW5zdGFuY2U6IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdjaGtib3gnKSBjaGtib3hFbDogRWxlbWVudFJlZjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuZm9ybUNvbnRyb2wudmFsdWU7XHJcblxyXG4gICAgICAgIGNvbnN0IGFsaWduID0gdGhpcy5jb2x1bW4uYWxpZ24gfHwgJ2xlZnQnO1xyXG4gICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuY2hrYm94RWwubmF0aXZlRWxlbWVudCwgJ2p1c3RpZnktY29udGVudCcsIGFsaWduKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXIubGlzdGVuKHRoaXMuaW5wdXRFbGVtZW50LCAna2V5ZG93LlNhcGNlJywgdGhpcy5vblNwYWNlSGFuZGxlKTtcclxuICAgIH1cclxuXHJcbiAgICBvblNwYWNlSGFuZGxlKCRldmVudDogS2V5Ym9hcmRFdmVudCkge1xyXG4gICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmNoZWNrZWRDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaGFuZGxlQ2xpY2soZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICBldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmNoZWNrZWRDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjaGVja2VkQ2hhbmdlcygpIHtcclxuICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xyXG4gICAgICAgIHRoaXMuZm9ybUNvbnRyb2wuc2V0VmFsdWUodGhpcy5jaGVja2VkKTtcclxuICAgICAgICB0aGlzLmZvcm1Db250cm9sLm1hcmtBc0RpcnR5KCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMgJiYgdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHAgPSB0aGlzLmV2ZW50UGFyYW1zKGV2ZW50KTtcclxuICAgICAgICAgICAgcC52YWx1ZSA9IHRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHBbJ2VkaXRvciddID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKHApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=