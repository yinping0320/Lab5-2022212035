/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { FilterComponent } from '@farris/ui-filter-editor';
import { FilterEditorDefaultOptions } from '../editor-default-options';
var DatagridFilterEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridFilterEditorComponent, _super);
    function DatagridFilterEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridFilterEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, FilterEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridFilterEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridFilterEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-filter-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <filter #filterEditor\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [columns]=\"options.columns\"\n            [showCode]=\"options.showCode\"\n            [showSql]=\"options.showSql\"\n            [disabled]=\"options.disabled\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [enableClear]=\"options.enableClear\"\n            [fieldEditor]=\"options.fieldEditor\"\n            [enableExpress]=\"options.enableExpress\"\n            [returnType]=\"options.returnType\"\n            (showExpress)=\"options?.onshowExpress($event)\"></filter>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridFilterEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridFilterEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['filterEditor',] }]
    };
    return DatagridFilterEditorComponent;
}(DatagridBaseEditorDirective));
export { DatagridFilterEditorComponent };
if (false) {
    /** @type {?} */
    DatagridFilterEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridFilterEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyZWRpdG9yLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZWRpdG9ycy8iLCJzb3VyY2VzIjpbImxpYi9lZGl0b3JzL2RhdGFncmlkLWZpbHRlcmVkaXRvci5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBQ3JILE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN2RTtJQXFCb0QseURBQTJCO0lBSTNFLHVDQUNJLE1BQWlCLEVBQUUsRUFBYyxFQUFVLE1BQWMsRUFBUyxRQUFrQjtRQUR4RixZQUdJLGtCQUFNLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDLFNBQzlCO1FBSDhDLFlBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxjQUFRLEdBQVIsUUFBUSxDQUFVOztJQUd4RixDQUFDOzs7O0lBRUQsZ0RBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRywwQkFBMEIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDakYsQ0FBQzs7OztJQUVELHVEQUFlOzs7SUFBZjtRQUNJLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDO1FBQ3hELGlCQUFNLGVBQWUsV0FBRSxDQUFDO0lBQzVCLENBQUM7O2dCQXZDSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsUUFBUSxFQUFFLDZ2QkFpQlQ7aUJBQ0o7Ozs7Z0JBeEIyQixTQUFTO2dCQUFFLFVBQVU7Z0JBQUUsTUFBTTtnQkFBRSxRQUFROzs7MkJBMkI5RCxTQUFTLFNBQUMsY0FBYzs7SUFpQjdCLG9DQUFDO0NBQUEsQUF4Q0QsQ0FxQm9ELDJCQUEyQixHQW1COUU7U0FuQlksNkJBQTZCOzs7SUFFdEMsaURBQXFEOzs7OztJQUdkLCtDQUFzQjs7SUFBRSxpREFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBOZ1pvbmUsIEluamVjdG9yLCBWaWV3Q2hpbGQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGF0YWdyaWQtYmFzZS1lZGl0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmlsdGVyQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS1maWx0ZXItZWRpdG9yJztcclxuaW1wb3J0IHsgRmlsdGVyRWRpdG9yRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2RhdGFncmlkLWZpbHRlci1lZGl0b3InLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgW2Zvcm1Hcm91cF09XCJncm91cFwiIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWZvcm1ncm91cCBmYXJyaXMtZ3JvdXAtYXV0b1wiPlxyXG4gICAgICAgIDxmaWx0ZXIgI2ZpbHRlckVkaXRvclxyXG4gICAgICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIlxyXG4gICAgICAgICAgICBbY29sdW1uc109XCJvcHRpb25zLmNvbHVtbnNcIlxyXG4gICAgICAgICAgICBbc2hvd0NvZGVdPVwib3B0aW9ucy5zaG93Q29kZVwiXHJcbiAgICAgICAgICAgIFtzaG93U3FsXT1cIm9wdGlvbnMuc2hvd1NxbFwiXHJcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XCJvcHRpb25zLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICBbZWRpdGFibGVdPVwib3B0aW9ucy5lZGl0YWJsZVwiXHJcbiAgICAgICAgICAgIFtlbmFibGVDbGVhcl09XCJvcHRpb25zLmVuYWJsZUNsZWFyXCJcclxuICAgICAgICAgICAgW2ZpZWxkRWRpdG9yXT1cIm9wdGlvbnMuZmllbGRFZGl0b3JcIlxyXG4gICAgICAgICAgICBbZW5hYmxlRXhwcmVzc109XCJvcHRpb25zLmVuYWJsZUV4cHJlc3NcIlxyXG4gICAgICAgICAgICBbcmV0dXJuVHlwZV09XCJvcHRpb25zLnJldHVyblR5cGVcIlxyXG4gICAgICAgICAgICAoc2hvd0V4cHJlc3MpPVwib3B0aW9ucz8ub25zaG93RXhwcmVzcygkZXZlbnQpXCI+PC9maWx0ZXI+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkRmlsdGVyRWRpdG9yQ29tcG9uZW50ICBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnZmlsdGVyRWRpdG9yJykgaW5zdGFuY2U6IEZpbHRlckNvbXBvbmVudDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBpbmplY3RvcjogSW5qZWN0b3JcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oIHt9ICwgRmlsdGVyRWRpdG9yRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19