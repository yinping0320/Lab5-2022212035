/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 11:10:33
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-14 13:19:18
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, ViewChild, Injector } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { InputDefaultOptions } from '../editor-default-options';
var DatagridTextboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridTextboxComponent, _super);
    function DatagridTextboxComponent(render, el, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.inputType = 'text';
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridTextboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, InputDefaultOptions, this.options);
        this.inputElement = this.instance.nativeElement;
        if (this.options.isPassword) {
            this.inputType = 'password';
        }
        else {
            this.inputType = 'text';
        }
    };
    /**
     * @return {?}
     */
    DatagridTextboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.instance = null;
        this.inputElement = null;
    };
    DatagridTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-textbox',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <input #input [attr.type]=\"inputType\" class=\"form-control \"\n            [attr.placeholder]=\"options?.placeholder\" [formControlName]=\"column.field\"  maxlength=\"{{options?.maxLength}}\">\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTextboxComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridTextboxComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['input',] }]
    };
    return DatagridTextboxComponent;
}(DatagridBaseEditorDirective));
export { DatagridTextboxComponent };
if (false) {
    /** @type {?} */
    DatagridTextboxComponent.prototype.instance;
    /** @type {?} */
    DatagridTextboxComponent.prototype.inputType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdGV4dGJveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC10ZXh0Ym94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFhLFNBQVMsRUFBUyxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDaEgsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFaEU7SUFTOEMsb0RBQTJCO0lBSXJFLGtDQUFZLE1BQWlCLEVBQUUsRUFBYyxFQUFFLFFBQWtCO1FBQWpFLFlBQ0ksa0JBQU0sTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FDOUI7UUFIRCxlQUFTLEdBQUcsTUFBTSxDQUFDOztJQUduQixDQUFDOzs7O0lBRUQsMkNBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUNoRCxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxFQUFFO1lBQ3pCLElBQUksQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO1NBQy9CO2FBQU07WUFDSCxJQUFJLENBQUMsU0FBUyxHQUFHLE1BQU0sQ0FBQztTQUMzQjtJQUNMLENBQUM7Ozs7SUFFRCw4Q0FBVzs7O0lBQVg7UUFDSSxpQkFBTSxXQUFXLFdBQUUsQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQztRQUNyQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQztJQUM3QixDQUFDOztnQkFoQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxxQkFBcUI7b0JBQy9CLFFBQVEsRUFBRSx1VEFLVDtpQkFDSjs7OztnQkFaMkIsU0FBUztnQkFBRSxVQUFVO2dCQUErQixRQUFROzs7MkJBY25GLFNBQVMsU0FBQyxPQUFPOztJQXVCdEIsK0JBQUM7Q0FBQSxBQWpDRCxDQVM4QywyQkFBMkIsR0F3QnhFO1NBeEJZLHdCQUF3Qjs7O0lBQ2pDLDRDQUF5Qzs7SUFFekMsNkNBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0xMiAxMToxMDozM1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0xNCAxMzoxOToxOFxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25EZXN0cm95LCBWaWV3Q2hpbGQsIElucHV0LCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBJbnB1dERlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3ItdGV4dGJveCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCI+XHJcbiAgICAgICAgPGlucHV0ICNpbnB1dCBbYXR0ci50eXBlXT1cImlucHV0VHlwZVwiIGNsYXNzPVwiZm9ybS1jb250cm9sIFwiXHJcbiAgICAgICAgICAgIFthdHRyLnBsYWNlaG9sZGVyXT1cIm9wdGlvbnM/LnBsYWNlaG9sZGVyXCIgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIiAgbWF4bGVuZ3RoPVwie3tvcHRpb25zPy5tYXhMZW5ndGh9fVwiPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRUZXh0Ym94Q29tcG9uZW50IGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQFZpZXdDaGlsZCgnaW5wdXQnKSBpbnN0YW5jZTogRWxlbWVudFJlZjtcclxuXHJcbiAgICBpbnB1dFR5cGUgPSAndGV4dCc7XHJcbiAgICBjb25zdHJ1Y3RvcihyZW5kZXI6IFJlbmRlcmVyMiwgZWw6IEVsZW1lbnRSZWYsIGluamVjdG9yOiBJbmplY3Rvcikge1xyXG4gICAgICAgIHN1cGVyKHJlbmRlciwgZWwsIGluamVjdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBzdXBlci5uZ09uSW5pdCgpO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIElucHV0RGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmluc3RhbmNlLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5pc1Bhc3N3b3JkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5wdXRUeXBlID0gJ3Bhc3N3b3JkJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmlucHV0VHlwZSA9ICd0ZXh0JztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgc3VwZXIubmdPbkRlc3Ryb3koKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICB0aGlzLmlucHV0RWxlbWVudCA9IG51bGw7XHJcbiAgICB9XHJcbn1cclxuIl19