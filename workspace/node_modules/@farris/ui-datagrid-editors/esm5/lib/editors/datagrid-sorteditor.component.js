/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { SorterComponent } from '@farris/ui-sort-editor';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { SortEditorDefaultOptions } from '../editor-default-options';
var DatagridSortEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridSortEditorComponent, _super);
    function DatagridSortEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridSortEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, SortEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridSortEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridSortEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-sort-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <sorter #sorter\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [columns]=\"options.columns\"\n            [fieldEditor]=\"options.fieldEditor\"\n            [enableClear]=\"options.enableClear\"\n            [disabled]=\"options.disabled\"\n            [readonly]=\"options.readonly\"\n            [editable]=\"options.editable\"\n            [returnType]=\"options.returnType\"\n        ></sorter>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridSortEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridSortEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['sorter',] }]
    };
    return DatagridSortEditorComponent;
}(DatagridBaseEditorDirective));
export { DatagridSortEditorComponent };
if (false) {
    /** @type {?} */
    DatagridSortEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridSortEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridSortEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtc29ydGVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1zb3J0ZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFckgsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBRXpELE9BQU8sRUFBRSwyQkFBMkIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRXJFO0lBa0JrRCx1REFBMkI7SUFJekUscUNBQ0ksTUFBaUIsRUFBRSxFQUFjLEVBQVUsTUFBYyxFQUFTLFFBQWtCO1FBRHhGLFlBR0ksa0JBQU0sTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FDOUI7UUFIOEMsWUFBTSxHQUFOLE1BQU0sQ0FBUTtRQUFTLGNBQVEsR0FBUixRQUFRLENBQVU7O0lBR3hGLENBQUM7Ozs7SUFFRCw4Q0FBUTs7O0lBQVI7UUFDSSxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUUsRUFBRSxFQUFHLHdCQUF3QixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUMvRSxDQUFDOzs7O0lBRUQscURBQWU7OztJQUFmO1FBQ0ksSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDeEQsaUJBQU0sZUFBZSxXQUFFLENBQUM7SUFDNUIsQ0FBQzs7Z0JBcENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUUsb2pCQWNUO2lCQUNKOzs7O2dCQXhCMkIsU0FBUztnQkFBRSxVQUFVO2dCQUFFLE1BQU07Z0JBQUUsUUFBUTs7OzJCQTJCOUQsU0FBUyxTQUFDLFFBQVE7O0lBaUJ2QixrQ0FBQztDQUFBLEFBckNELENBa0JrRCwyQkFBMkIsR0FtQjVFO1NBbkJZLDJCQUEyQjs7O0lBRXBDLCtDQUErQzs7Ozs7SUFHUiw2Q0FBc0I7O0lBQUUsK0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBJbmplY3RvciwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBTb3J0ZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXNvcnQtZWRpdG9yJztcclxuXHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFNvcnRFZGl0b3JEZWZhdWx0T3B0aW9ucyB9IGZyb20gJy4uL2VkaXRvci1kZWZhdWx0LW9wdGlvbnMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2RhdGFncmlkLXNvcnQtZWRpdG9yJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIj5cclxuICAgICAgICA8c29ydGVyICNzb3J0ZXJcclxuICAgICAgICAgICAgc3R5bGU9XCJ3aWR0aDogMTAwJVwiXHJcbiAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICAgICAgW2NvbHVtbnNdPVwib3B0aW9ucy5jb2x1bW5zXCJcclxuICAgICAgICAgICAgW2ZpZWxkRWRpdG9yXT1cIm9wdGlvbnMuZmllbGRFZGl0b3JcIlxyXG4gICAgICAgICAgICBbZW5hYmxlQ2xlYXJdPVwib3B0aW9ucy5lbmFibGVDbGVhclwiXHJcbiAgICAgICAgICAgIFtkaXNhYmxlZF09XCJvcHRpb25zLmRpc2FibGVkXCJcclxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICBbZWRpdGFibGVdPVwib3B0aW9ucy5lZGl0YWJsZVwiXHJcbiAgICAgICAgICAgIFtyZXR1cm5UeXBlXT1cIm9wdGlvbnMucmV0dXJuVHlwZVwiXHJcbiAgICAgICAgPjwvc29ydGVyPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZFNvcnRFZGl0b3JDb21wb25lbnQgIGV4dGVuZHMgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdzb3J0ZXInKSBpbnN0YW5jZTogU29ydGVyQ29tcG9uZW50O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHVibGljIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbigge30gLCBTb3J0RWRpdG9yRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS50ZXh0Ym94Lm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19