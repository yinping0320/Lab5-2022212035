/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-22 14:25:39
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { NumberSpinnerComponent } from '@farris/ui-number-spinner';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { NumberSpinnerDefaultOptions } from '../editor-default-options';
var DatagridNumberSpinnerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridNumberSpinnerComponent, _super);
    function DatagridNumberSpinnerComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, NumberSpinnerDefaultOptions, this.options);
        if (!this.options.textAlign) {
            this.options.textAlign = this.column.align || 'left';
        }
        this.inputElement = this.instance.input.nativeElement;
        // this.stopPropagation = false;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.options.valueChange) {
            this.options.valueChange(this.eventPrams($event));
        }
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    DatagridNumberSpinnerComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    DatagridNumberSpinnerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-numberspinner',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n        <datagrid-tooltip [control]=\"formControl\" [tooltipPosition]=\"'top-left'\" [message]=\"errorMessage\">\n            <farris-number-spinner #num [step]=\"options.step\"\n                [max]=\"options.max\"\n                [min]=\"options.min\"\n                [canNull]=\"options.canNull\"\n                [precision]=\"options.precision\"\n                [editable]=\"options.editable\"\n                [bigNumber]=\"options.bigNumber\"\n                [showButton]=\"options.showButton\"\n                [showZero]=\"options.showZero\"\n                [groupSeparator]=\"options.groupSeparator\"\n                (valueChange)=\"onValueChange($event)\"\n                [textAlign]=\"options.textAlign\"\n                [formControlName]=\"column.field\" style=\"width: 100%\"></farris-number-spinner>\n        </datagrid-tooltip>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridNumberSpinnerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridNumberSpinnerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['num',] }]
    };
    return DatagridNumberSpinnerComponent;
}(DatagridBaseEditorDirective));
export { DatagridNumberSpinnerComponent };
if (false) {
    /** @type {?} */
    DatagridNumberSpinnerComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtbnVtYmVyc3Bpbm5lci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1udW1iZXJzcGlubmVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxTQUFTLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbkUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFeEU7SUFzQm9ELDBEQUEyQjtJQUkzRSx3Q0FBWSxNQUFpQixFQUFFLEVBQWMsRUFBRSxRQUFrQjtlQUM3RCxrQkFBTSxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQztJQUMvQixDQUFDOzs7O0lBRUQsaURBQVE7OztJQUFSO1FBQ0ksaUJBQU0sUUFBUSxXQUFFLENBQUM7UUFDakIsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFFLEVBQUUsRUFBRywyQkFBMkIsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDOUUsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO1lBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxHQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sQ0FBQztTQUN6RDtRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO1FBQ3RELGdDQUFnQztJQUNwQyxDQUFDOzs7OztJQUVELHNEQUFhOzs7O0lBQWIsVUFBYyxNQUFNO1FBQ2hCLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0wsQ0FBQzs7Ozs7O0lBRU8sbURBQVU7Ozs7O0lBQWxCLFVBQW1CLE1BQU07O1lBQ2YsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxVQUFVLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQzlCLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxJQUFJLENBQUM7UUFDbkIsT0FBTyxDQUFDLENBQUM7SUFDYixDQUFDOztnQkFuREosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSwyQkFBMkI7b0JBQ3JDLFFBQVEsRUFBRSxpOEJBa0JUO2lCQUNKOzs7O2dCQTFCMkIsU0FBUztnQkFBRSxVQUFVO2dCQUFFLFFBQVE7OzsyQkE2QnRELFNBQVMsU0FBQyxLQUFLOztJQTRCcEIscUNBQUM7Q0FBQSxBQXBERCxDQXNCb0QsMkJBQTJCLEdBOEI5RTtTQTlCWSw4QkFBOEI7OztJQUV2QyxrREFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTE0IDExOjQxOjAwXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTEwLTIyIDE0OjI1OjM5XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBJbmplY3RvciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE51bWJlclNwaW5uZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLW51bWJlci1zcGlubmVyJztcclxuaW1wb3J0IHsgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi4vZGF0YWdyaWQtYmFzZS1lZGl0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTnVtYmVyU3Bpbm5lckRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1lZGl0b3ItbnVtYmVyc3Bpbm5lcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCI+XHJcbiAgICAgICAgPGRhdGFncmlkLXRvb2x0aXAgW2NvbnRyb2xdPVwiZm9ybUNvbnRyb2xcIiBbdG9vbHRpcFBvc2l0aW9uXT1cIid0b3AtbGVmdCdcIiBbbWVzc2FnZV09XCJlcnJvck1lc3NhZ2VcIj5cclxuICAgICAgICAgICAgPGZhcnJpcy1udW1iZXItc3Bpbm5lciAjbnVtIFtzdGVwXT1cIm9wdGlvbnMuc3RlcFwiXHJcbiAgICAgICAgICAgICAgICBbbWF4XT1cIm9wdGlvbnMubWF4XCJcclxuICAgICAgICAgICAgICAgIFttaW5dPVwib3B0aW9ucy5taW5cIlxyXG4gICAgICAgICAgICAgICAgW2Nhbk51bGxdPVwib3B0aW9ucy5jYW5OdWxsXCJcclxuICAgICAgICAgICAgICAgIFtwcmVjaXNpb25dPVwib3B0aW9ucy5wcmVjaXNpb25cIlxyXG4gICAgICAgICAgICAgICAgW2VkaXRhYmxlXT1cIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgICAgICAgICAgW2JpZ051bWJlcl09XCJvcHRpb25zLmJpZ051bWJlclwiXHJcbiAgICAgICAgICAgICAgICBbc2hvd0J1dHRvbl09XCJvcHRpb25zLnNob3dCdXR0b25cIlxyXG4gICAgICAgICAgICAgICAgW3Nob3daZXJvXT1cIm9wdGlvbnMuc2hvd1plcm9cIlxyXG4gICAgICAgICAgICAgICAgW2dyb3VwU2VwYXJhdG9yXT1cIm9wdGlvbnMuZ3JvdXBTZXBhcmF0b3JcIlxyXG4gICAgICAgICAgICAgICAgKHZhbHVlQ2hhbmdlKT1cIm9uVmFsdWVDaGFuZ2UoJGV2ZW50KVwiXHJcbiAgICAgICAgICAgICAgICBbdGV4dEFsaWduXT1cIm9wdGlvbnMudGV4dEFsaWduXCJcclxuICAgICAgICAgICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCIgc3R5bGU9XCJ3aWR0aDogMTAwJVwiPjwvZmFycmlzLW51bWJlci1zcGlubmVyPlxyXG4gICAgICAgIDwvZGF0YWdyaWQtdG9vbHRpcD5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkTnVtYmVyU3Bpbm5lckNvbXBvbmVudCBleHRlbmRzIERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQFZpZXdDaGlsZCgnbnVtJykgaW5zdGFuY2U6IE51bWJlclNwaW5uZXJDb21wb25lbnQ7XHJcblxyXG4gICAgY29uc3RydWN0b3IocmVuZGVyOiBSZW5kZXJlcjIsIGVsOiBFbGVtZW50UmVmLCBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICBzdXBlcihyZW5kZXIsIGVsLCBpbmplY3Rvcik7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLm9wdGlvbnMgPSBPYmplY3QuYXNzaWduKCB7fSAsIE51bWJlclNwaW5uZXJEZWZhdWx0T3B0aW9ucywgdGhpcy5vcHRpb25zKTtcclxuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy50ZXh0QWxpZ24pIHtcclxuICAgICAgICAgICAgdGhpcy5vcHRpb25zLnRleHRBbGlnbiA9ICB0aGlzLmNvbHVtbi5hbGlnbiB8fCAnbGVmdCc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5pbnB1dC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIC8vIHRoaXMuc3RvcFByb3BhZ2F0aW9uID0gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZSgkZXZlbnQpIHtcclxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSh0aGlzLmV2ZW50UHJhbXMoJGV2ZW50KSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZXZlbnRQcmFtcygkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCBwID0gdGhpcy5ldmVudFBhcmFtcygkZXZlbnQpO1xyXG4gICAgICAgIHBbJ2luc3RhbmNlJ10gPSB0aGlzLmluc3RhbmNlO1xyXG4gICAgICAgIHBbJ2VkaXRvciddID0gdGhpcztcclxuICAgICAgICByZXR1cm4gcDtcclxuICAgIH1cclxufVxyXG4iXX0=