/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Renderer2, ElementRef, NgZone, Injector, ViewChild } from '@angular/core';
import { EnumEditorInputComponent } from '@farris/ui-enum-editor';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { EnumEditorDefaultOptions } from '../editor-default-options';
var DatagridEnumEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridEnumEditorComponent, _super);
    function DatagridEnumEditorComponent(render, el, ngzone, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.ngzone = ngzone;
        _this.injector = injector;
        return _this;
    }
    /**
     * @return {?}
     */
    DatagridEnumEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, EnumEditorDefaultOptions, this.options);
    };
    /**
     * @return {?}
     */
    DatagridEnumEditorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.inputElement = this.instance.inputGroupRef.textbox.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
    };
    DatagridEnumEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'datagrid-enum-editor',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\n    <enum-editor-input #eei\n        style=\"width: 100%\"\n        [formControlName]=\"column.field\"\n        [readonly]=\"options.readonly\"\n        [editable]=\"options.editable\"\n        [disabled]=\"options.disabled\"\n        [enableClear]=\"options.enableClear\"\n        [outType]=\"options.outType\"\n        [textField]=\"options.textField\"\n        [valueField]=\"options.valueField\">\n    </enum-editor-input>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridEnumEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: Injector }
    ]; };
    DatagridEnumEditorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['eei',] }]
    };
    return DatagridEnumEditorComponent;
}(DatagridBaseEditorDirective));
export { DatagridEnumEditorComponent };
if (false) {
    /** @type {?} */
    DatagridEnumEditorComponent.prototype.instance;
    /**
     * @type {?}
     * @private
     */
    DatagridEnumEditorComponent.prototype.ngzone;
    /** @type {?} */
    DatagridEnumEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZW51bWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWVkaXRvcnMvIiwic291cmNlcyI6WyJsaWIvZWRpdG9ycy9kYXRhZ3JpZC1lbnVtZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDckgsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDaEYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFFckU7SUFrQmtELHVEQUEyQjtJQUV6RSxxQ0FDSSxNQUFpQixFQUFFLEVBQWMsRUFBVSxNQUFjLEVBQVMsUUFBa0I7UUFEeEYsWUFHSSxrQkFBTSxNQUFNLEVBQUUsRUFBRSxFQUFFLFFBQVEsQ0FBQyxTQUM5QjtRQUg4QyxZQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVMsY0FBUSxHQUFSLFFBQVEsQ0FBVTs7SUFHeEYsQ0FBQzs7OztJQUVELDhDQUFROzs7SUFBUjtRQUNJLGlCQUFNLFFBQVEsV0FBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBRSxFQUFFLEVBQUcsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQy9FLENBQUM7Ozs7SUFFRCxxREFBZTs7O0lBQWY7UUFDSSxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDdEUsaUJBQU0sZUFBZSxXQUFFLENBQUM7SUFDNUIsQ0FBQzs7Z0JBbENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxRQUFRLEVBQUUsdWhCQWNUO2lCQUNKOzs7O2dCQXRCMkIsU0FBUztnQkFBRSxVQUFVO2dCQUFFLE1BQU07Z0JBQUUsUUFBUTs7OzJCQXdCOUQsU0FBUyxTQUFDLEtBQUs7O0lBZ0JwQixrQ0FBQztDQUFBLEFBbkNELENBa0JrRCwyQkFBMkIsR0FpQjVFO1NBakJZLDJCQUEyQjs7O0lBQ3BDLCtDQUFxRDs7Ozs7SUFFZCw2Q0FBc0I7O0lBQUUsK0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgTmdab25lLCBJbmplY3RvciwgVmlld0NoaWxkLCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVudW1FZGl0b3JJbnB1dENvbXBvbmVudCB9IGZyb20gJ0BmYXJyaXMvdWktZW51bS1lZGl0b3InO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9kYXRhZ3JpZC1iYXNlLWVkaXRvci5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBFbnVtRWRpdG9yRGVmYXVsdE9wdGlvbnMgfSBmcm9tICcuLi9lZGl0b3ItZGVmYXVsdC1vcHRpb25zJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdkYXRhZ3JpZC1lbnVtLWVkaXRvcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBbZm9ybUdyb3VwXT1cImdyb3VwXCIgY2xhc3M9XCJmLWRhdGFncmlkLWNlbGwtZm9ybWdyb3VwIGZhcnJpcy1ncm91cC1hdXRvXCI+XHJcbiAgICA8ZW51bS1lZGl0b3ItaW5wdXQgI2VlaVxyXG4gICAgICAgIHN0eWxlPVwid2lkdGg6IDEwMCVcIlxyXG4gICAgICAgIFtmb3JtQ29udHJvbE5hbWVdPVwiY29sdW1uLmZpZWxkXCJcclxuICAgICAgICBbcmVhZG9ubHldPVwib3B0aW9ucy5yZWFkb25seVwiXHJcbiAgICAgICAgW2VkaXRhYmxlXT1cIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgIFtkaXNhYmxlZF09XCJvcHRpb25zLmRpc2FibGVkXCJcclxuICAgICAgICBbZW5hYmxlQ2xlYXJdPVwib3B0aW9ucy5lbmFibGVDbGVhclwiXHJcbiAgICAgICAgW291dFR5cGVdPVwib3B0aW9ucy5vdXRUeXBlXCJcclxuICAgICAgICBbdGV4dEZpZWxkXT1cIm9wdGlvbnMudGV4dEZpZWxkXCJcclxuICAgICAgICBbdmFsdWVGaWVsZF09XCJvcHRpb25zLnZhbHVlRmllbGRcIj5cclxuICAgIDwvZW51bS1lZGl0b3ItaW5wdXQ+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkRW51bUVkaXRvckNvbXBvbmVudCAgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gICAgQFZpZXdDaGlsZCgnZWVpJykgaW5zdGFuY2U6IEVudW1FZGl0b3JJbnB1dENvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHVibGljIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbigge30gLCBFbnVtRWRpdG9yRGVmYXVsdE9wdGlvbnMsIHRoaXMub3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5wdXRFbGVtZW50ID0gdGhpcy5pbnN0YW5jZS5pbnB1dEdyb3VwUmVmLnRleHRib3gubmF0aXZlRWxlbWVudDtcclxuICAgICAgICBzdXBlci5uZ0FmdGVyVmlld0luaXQoKTtcclxuICAgIH1cclxufVxyXG4iXX0=