/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-14 11:41:00
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-08-24 15:33:24
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Renderer2, ElementRef, Injector, ViewChild } from '@angular/core';
import { DatagridBaseEditorDirective } from '../datagrid-base-editor.directive';
import { TimePickerComponent } from '@farris/ui-time-picker';
import { TimePickerDefaultOptions } from '../editor-default-options';
var DatagridTimerComponent = /** @class */ (function (_super) {
    tslib_1.__extends(DatagridTimerComponent, _super);
    function DatagridTimerComponent(render, el, injector) {
        return _super.call(this, render, el, injector) || this;
    }
    /**
     * @return {?}
     */
    DatagridTimerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.inputElement = this.instance.timeInput.nativeElement;
        this.options = Object.assign({}, TimePickerDefaultOptions, this.options);
        if (this.options && !this.options.valueChange) {
            this.options.valueChange = (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { });
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    DatagridTimerComponent.prototype.onValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p.value = this.instance.value;
        p['instance'] = this.instance;
        p['editor'] = this;
        this.options.valueChange(p);
    };
    DatagridTimerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-editor-timer',
                    template: "\n    <div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\" >\n        <farris-time-picker #timepicker\n            style=\"width: 100%\"\n            [formControlName]=\"column.field\"\n            [readonly]= \"options.readonly\"\n            [editable]= \"options.editable\"\n            [hourStep] = \"options.hourStep\"\n            [minuteStep] = \"options.minuteStep\"\n            [secondStep] = \"options.secondStep\"\n            [format]=\"options.format\"\n            [placeholder]=\"options.placeholder\"\n            [use12Hours]=\"options.use12Hours\"\n            (valueChange)=\"onValueChange($event)\"\n            [showHeader]=\"options.showHeader\">\n        </farris-time-picker>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    DatagridTimerComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: Injector }
    ]; };
    DatagridTimerComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['timepicker',] }]
    };
    return DatagridTimerComponent;
}(DatagridBaseEditorDirective));
export { DatagridTimerComponent };
if (false) {
    /** @type {?} */
    DatagridTimerComponent.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtdGltZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzLyIsInNvdXJjZXMiOlsibGliL2VkaXRvcnMvZGF0YWdyaWQtdGltZXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFRQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RixPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUNoRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM3RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUdyRTtJQXFCNEMsa0RBQTJCO0lBR25FLGdDQUFZLE1BQWlCLEVBQUUsRUFBYyxFQUFFLFFBQWtCO2VBQzdELGtCQUFNLE1BQU0sRUFBRSxFQUFFLEVBQUUsUUFBUSxDQUFDO0lBQy9CLENBQUM7Ozs7SUFFRCx5Q0FBUTs7O0lBQVI7UUFDSSxpQkFBTSxRQUFRLFdBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQztRQUMxRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLHdCQUF3QixFQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMxRSxJQUFJLElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRTtZQUMzQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVc7Ozs7WUFBRyxVQUFDLEdBQUcsSUFBTSxDQUFDLENBQUEsQ0FBQztTQUMxQztJQUNMLENBQUM7Ozs7O0lBRUQsOENBQWE7Ozs7SUFBYixVQUFjLE1BQU07O1lBQ1YsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7UUFDOUIsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLElBQUksQ0FBQztRQUNuQixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoQyxDQUFDOztnQkEzQ0osU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFFBQVEsRUFBRSw0dUJBaUJUO2lCQUNKOzs7O2dCQTFCMkIsU0FBUztnQkFBRSxVQUFVO2dCQUFFLFFBQVE7OzsyQkE2QnRELFNBQVMsU0FBQyxZQUFZOztJQXFCM0IsNkJBQUM7Q0FBQSxBQTVDRCxDQXFCNEMsMkJBQTJCLEdBdUJ0RTtTQXZCWSxzQkFBc0I7OztJQUUvQiwwQ0FBdUQiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTE0IDExOjQxOjAwXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA4LTI0IDE1OjMzOjI0XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBJbmplY3RvciwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQmFzZUVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4uL2RhdGFncmlkLWJhc2UtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IFRpbWVQaWNrZXJDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLXRpbWUtcGlja2VyJztcclxuaW1wb3J0IHsgVGltZVBpY2tlckRlZmF1bHRPcHRpb25zIH0gZnJvbSAnLi4vZWRpdG9yLWRlZmF1bHQtb3B0aW9ucyc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2dyaWQtZWRpdG9yLXRpbWVyJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICA8ZGl2IFtmb3JtR3JvdXBdPVwiZ3JvdXBcIiBjbGFzcz1cImYtZGF0YWdyaWQtY2VsbC1mb3JtZ3JvdXAgZmFycmlzLWdyb3VwLWF1dG9cIiA+XHJcbiAgICAgICAgPGZhcnJpcy10aW1lLXBpY2tlciAjdGltZXBpY2tlclxyXG4gICAgICAgICAgICBzdHlsZT1cIndpZHRoOiAxMDAlXCJcclxuICAgICAgICAgICAgW2Zvcm1Db250cm9sTmFtZV09XCJjb2x1bW4uZmllbGRcIlxyXG4gICAgICAgICAgICBbcmVhZG9ubHldPSBcIm9wdGlvbnMucmVhZG9ubHlcIlxyXG4gICAgICAgICAgICBbZWRpdGFibGVdPSBcIm9wdGlvbnMuZWRpdGFibGVcIlxyXG4gICAgICAgICAgICBbaG91clN0ZXBdID0gXCJvcHRpb25zLmhvdXJTdGVwXCJcclxuICAgICAgICAgICAgW21pbnV0ZVN0ZXBdID0gXCJvcHRpb25zLm1pbnV0ZVN0ZXBcIlxyXG4gICAgICAgICAgICBbc2Vjb25kU3RlcF0gPSBcIm9wdGlvbnMuc2Vjb25kU3RlcFwiXHJcbiAgICAgICAgICAgIFtmb3JtYXRdPVwib3B0aW9ucy5mb3JtYXRcIlxyXG4gICAgICAgICAgICBbcGxhY2Vob2xkZXJdPVwib3B0aW9ucy5wbGFjZWhvbGRlclwiXHJcbiAgICAgICAgICAgIFt1c2UxMkhvdXJzXT1cIm9wdGlvbnMudXNlMTJIb3Vyc1wiXHJcbiAgICAgICAgICAgICh2YWx1ZUNoYW5nZSk9XCJvblZhbHVlQ2hhbmdlKCRldmVudClcIlxyXG4gICAgICAgICAgICBbc2hvd0hlYWRlcl09XCJvcHRpb25zLnNob3dIZWFkZXJcIj5cclxuICAgICAgICA8L2ZhcnJpcy10aW1lLXBpY2tlcj5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkVGltZXJDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ3RpbWVwaWNrZXInKSBpbnN0YW5jZTogVGltZVBpY2tlckNvbXBvbmVudDtcclxuICAgIGNvbnN0cnVjdG9yKHJlbmRlcjogUmVuZGVyZXIyLCBlbDogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmluc3RhbmNlLnRpbWVJbnB1dC5uYXRpdmVFbGVtZW50O1xyXG4gICAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIFRpbWVQaWNrZXJEZWZhdWx0T3B0aW9ucyAsIHRoaXMub3B0aW9ucyk7XHJcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucyAmJiAhdGhpcy5vcHRpb25zLnZhbHVlQ2hhbmdlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZSA9ICh2YWwpID0+IHt9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblZhbHVlQ2hhbmdlKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHAgPSB0aGlzLmV2ZW50UGFyYW1zKCRldmVudCk7XHJcbiAgICAgICAgcC52YWx1ZSA9IHRoaXMuaW5zdGFuY2UudmFsdWU7XHJcbiAgICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgICAgcFsnZWRpdG9yJ10gPSB0aGlzO1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy52YWx1ZUNoYW5nZShwKTtcclxuICAgIH1cclxufVxyXG4iXX0=