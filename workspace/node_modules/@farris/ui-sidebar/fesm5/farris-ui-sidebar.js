import { Subject } from 'rxjs';
import { Injectable, NgModule, Component, Input, ContentChild, EventEmitter, Output, Renderer2, ElementRef, ViewChild, Directive, TemplateRef, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarService = /** @class */ (function () {
    function FarrisSidebarService() {
        this.isOpenSubject = new Subject();
    }
    /**
     * @param {?} message
     * @return {?}
     */
    FarrisSidebarService.prototype.sendIsOpen = /**
     * @param {?} message
     * @return {?}
     */
    function (message) {
        this.isOpenSubject.next(message);
    };
    /**
     * @return {?}
     */
    FarrisSidebarService.prototype.getIsOpen = /**
     * @return {?}
     */
    function () {
        return this.isOpenSubject.asObservable();
    };
    FarrisSidebarService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarService.ctorParameters = function () { return []; };
    /** @nocollapse */ FarrisSidebarService.ngInjectableDef = defineInjectable({ factory: function FarrisSidebarService_Factory() { return new FarrisSidebarService(); }, token: FarrisSidebarService, providedIn: "root" });
    return FarrisSidebarService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarIconDirective = /** @class */ (function () {
    function FarrisSidebarIconDirective(templateRef) {
        this.templateRef = templateRef;
        this.iconCls = 'f-sidebar-entry';
    }
    FarrisSidebarIconDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarIcon]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarIconDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarIconDirective.propDecorators = {
        iconCls: [{ type: Input }]
    };
    return FarrisSidebarIconDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarTitleDirective = /** @class */ (function () {
    function FarrisSidebarTitleDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarTitleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarTitle]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarTitleDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarTitleDirective.propDecorators = {
        titleCls: [{ type: Input }]
    };
    return FarrisSidebarTitleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarHeaderDirective = /** @class */ (function () {
    function FarrisSidebarHeaderDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarHeaderDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarHeader]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarHeaderDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarHeaderDirective.propDecorators = {
        headerCls: [{ type: Input }]
    };
    return FarrisSidebarHeaderDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarHcontentDirective = /** @class */ (function () {
    function FarrisSidebarHcontentDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarHcontentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarHcontent]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarHcontentDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarHcontentDirective.propDecorators = {
        hcontentCls: [{ type: Input }]
    };
    return FarrisSidebarHcontentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarToolbarDirective = /** @class */ (function () {
    function FarrisSidebarToolbarDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarToolbarDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarToolbar]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarToolbarDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarToolbarDirective.propDecorators = {
        toolbarCls: [{ type: Input }]
    };
    return FarrisSidebarToolbarDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarContentDirective = /** @class */ (function () {
    function FarrisSidebarContentDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarContentDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarContent]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarContentDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarContentDirective.propDecorators = {
        contentCls: [{ type: Input }]
    };
    return FarrisSidebarContentDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarFooterDirective = /** @class */ (function () {
    function FarrisSidebarFooterDirective(templateRef) {
        this.templateRef = templateRef;
    }
    FarrisSidebarFooterDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farrisSidebarFooter]',
                },] }
    ];
    /** @nocollapse */
    FarrisSidebarFooterDirective.ctorParameters = function () { return [
        { type: TemplateRef }
    ]; };
    FarrisSidebarFooterDirective.propDecorators = {
        footerCls: [{ type: Input }]
    };
    return FarrisSidebarFooterDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarComponent = /** @class */ (function () {
    function FarrisSidebarComponent(sidebarService, renderer, elementRef) {
        var _this = this;
        this.sidebarService = sidebarService;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.showClose = false;
        this.showHeader = true;
        this.showEntry = true;
        this.title = "";
        this.showFooter = false;
        this._width = '350px';
        this._height = '30%';
        /* 侧边栏显示 */
        this.isOpen = false;
        /* 侧边栏显示位置 */
        this.showPos = 'right';
        this.enableScroll = true;
        /* 点击遮罩是否关闭侧边栏 */
        this.maskClosable = true;
        /* 是否显示遮罩 */
        this.maskable = true;
        //展开效果
        // @Input() openWay = 'float'
        //是否可拖拽，有点问题（然后没这个特性）
        this.resizeable = false;
        this.changeState = new EventEmitter();
        this.canRemoveInitNoAnimateCls = true;
        this.sidebarService.getIsOpen().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data === false) {
                _this.closeSideBar();
            }
            else {
                _this.openSideBar();
            }
        }));
        this.el = this.elementRef.nativeElement;
    }
    Object.defineProperty(FarrisSidebarComponent.prototype, "width", {
        /* 侧边栏大小 */
        get: /* 侧边栏大小 */
        /**
         * @return {?}
         */
        function () {
            return this._width;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._width = this._resolveSize(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FarrisSidebarComponent.prototype, "height", {
        get: /**
         * @return {?}
         */
        function () {
            return this._height;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._height = this._resolveSize(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // const mainEl = this.el.querySelector('.f-sidebar-main');
        // this.renderer.setStyle(mainEl, 'width', this._width);
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.entryTemplate = this.entryDirective && this.entryDirective.templateRef;
        this.parentEl = this.el.parentElement;
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
        if (this.parentCls) {
            this.renderer.addClass(this.parentEl, this.parentCls);
        }
    };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    FarrisSidebarComponent.prototype._resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.toggle = /**
     * @return {?}
     */
    function () {
        this.isOpen = !this.isOpen;
        this.changeState.emit(this.isOpen);
        if (this.isOpen === true) {
            this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
            this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
        }
        if (this.isOpen === false) {
            this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
            this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
        }
        // const prevEl = this.el.previousElementSibling;
        // if(this.isOpen === true && this.openWay !== 'float'){
        //   this.renderer.setStyle(prevEl, `${this.showPos}`, this.width + 'px');
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-show');
        //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
        //   this.maskable = false;
        // }
        // if(this.isOpen === false && this.openWay !== 'float'){
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
        //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-show');
        //   this.renderer.setStyle(prevEl, `${this.showPos}`, 0);
        // }   
        // if(this.isOpen === true && this.openWay !== 'fold'){
        //   this.maskable = true;
        // }
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.closeSideBar = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.removeNoneAnimateCls();
        if (this.beforeClose) {
            this.beforeClose().subscribe((/**
             * @param {?} isOpen
             * @return {?}
             */
            function (isOpen) {
                _this.isOpen = !isOpen;
            }));
        }
        else {
            this.isOpen = false;
        }
        this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.closeSideBarByMask = /**
     * @return {?}
     */
    function () {
        if (!this.maskClosable) {
            return;
        }
        this.closeSideBar();
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.openSideBar = /**
     * @return {?}
     */
    function () {
        this.removeNoneAnimateCls();
        this.isOpen = true;
        this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
    };
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    FarrisSidebarComponent.prototype.removeNoneAnimateCls = /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.canRemoveInitNoAnimateCls) {
            return;
        }
        if (this.sidebarMainEl) {
            this.renderer.removeClass(this.sidebarMainEl.nativeElement, 'f-sidebar-slideinit');
            this.canRemoveInitNoAnimateCls = false;
        }
    };
    /**
     * @return {?}
     */
    FarrisSidebarComponent.prototype.getStyleData = /**
     * @return {?}
     */
    function () {
    };
    FarrisSidebarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-sidebar',
                    template: "\n  <div class=\"f-cmp-sidebar f-sidebar-slide\" [class]=\"'f-sidebar-pos-'+showPos\"\n  [ngClass]=\"{'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\">\n    <div class=\"f-sidebar-main f-sidebar-slideinit\" [ngClass]=\"mainCls\" #sidebarMain [ngStyle]=\"{width:'leftright'.indexOf(showPos)>-1?width:'auto',height:'topbottom'.indexOf(showPos)>-1?height:'auto'}\" >\n      <div class=\"f-sidebar-header\" *ngIf=\"showHeader\" [ngClass]=\"headerDirective && headerDirective.headerCls\">\n        <ng-template [ngTemplateOutlet]=\"headerDirective.templateRef\" *ngIf=\"headerDirective && headerDirective.templateRef\"></ng-template>\n        <ng-template [ngIf]=\"!headerDirective\">\n          <div class=\"f-title f-tmpl-for-title-withline\" [ngClass]=\"headerTitleDirective && headerTitleDirective.titleCls\">\n            <ng-template [ngTemplateOutlet]=\"headerTitleDirective.templateRef\" *ngIf=\"headerTitleDirective && headerTitleDirective.templateRef\"></ng-template>\n            <ng-template [ngIf]=\"!headerTitleDirective\">\n              <h5 class=\"f-title-text\">{{title ?title: ('sidebar.sidebar'|locale)}}</h5>\n            </ng-template>\n          </div>\n          <div class=\"f-content\" *ngIf=\"headerContentDirective && headerContentDirective.templateRef\" [ngClass]=\"headerContentDirective && headerContentDirective.hcontentCls\">\n            <ng-template [ngTemplateOutlet]=\"headerContentDirective.templateRef\"></ng-template>\n          </div>\n          <div class=\"f-toolbar\" [ngClass]=\"headerToolbarDirective && headerToolbarDirective.toolbarCls\">\n            <ng-template [ngTemplateOutlet]=\"headerToolbarDirective.templateRef\" *ngIf=\"headerToolbarDirective && headerToolbarDirective.templateRef\"></ng-template>\n            <ng-template [ngIf]=\"!headerToolbarDirective||showClose\">\n              <span class=\"f-icon f-sidebar-close\" (click)=\"closeSideBar()\"></span>\n            </ng-template>\n          </div>\n        </ng-template>\n      </div>\n      <div class=\"f-sidebar-content\" [ngClass]=\"contentDirective && contentDirective.contentCls\" *ngIf=\"contentDirective && contentDirective.templateRef\">\n        <ng-template [ngTemplateOutlet]=\"contentDirective.templateRef\"></ng-template>\n      </div>\n      <div class=\"f-sidebar-footer\"  *ngIf=\"showFooter\" [ngClass]=\"footerDirective && footerDirective.footerCls\">\n        <ng-template [ngTemplateOutlet]=\"footerDirective.templateRef\" *ngIf=\"footerDirective && footerDirective.templateRef\"></ng-template>\n      </div>\n    </div>\n    <div class=\"f-sidebar-entry-ctr\" [ngClass]=\"entryDirective && entryDirective.iconCls\" (click)=\"openSideBar()\" *ngIf=\"showEntry\">\n      <ng-template [ngTemplateOutlet]=\"entryTemplate\" *ngIf=\"entryTemplate\"></ng-template>\n      <div class=\"f-sidebar-entry-icon\" *ngIf=\"!entryTemplate\">\n        <span class=\"f-icon f-sidebar-entry\"></span>\n      </div>\n    </div>\n  </div>\n  <div class=\"f-sidebar-overlay f-sidebar-collapse\" [class.d-none]=\"!maskable\" [ngClass]=\"{ 'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\" (click)=\"closeSideBarByMask()\">\n  </div>\n  ",
                    providers: [],
                    styles: [":host .f-sidebar-slideinit{-webkit-transition:none!important;transition:none!important}"]
                }] }
    ];
    /** @nocollapse */
    FarrisSidebarComponent.ctorParameters = function () { return [
        { type: FarrisSidebarService },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    FarrisSidebarComponent.propDecorators = {
        showClose: [{ type: Input }],
        showHeader: [{ type: Input }],
        showEntry: [{ type: Input }],
        title: [{ type: Input }],
        showFooter: [{ type: Input }],
        mainCls: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        isOpen: [{ type: Input }],
        showPos: [{ type: Input }],
        enableScroll: [{ type: Input }],
        maskClosable: [{ type: Input }],
        maskable: [{ type: Input }],
        beforeClose: [{ type: Input }],
        parentCls: [{ type: Input }],
        resizeable: [{ type: Input }],
        entryDirective: [{ type: ContentChild, args: [FarrisSidebarIconDirective,] }],
        headerDirective: [{ type: ContentChild, args: [FarrisSidebarHeaderDirective,] }],
        headerTitleDirective: [{ type: ContentChild, args: [FarrisSidebarTitleDirective,] }],
        headerContentDirective: [{ type: ContentChild, args: [FarrisSidebarHcontentDirective,] }],
        headerToolbarDirective: [{ type: ContentChild, args: [FarrisSidebarToolbarDirective,] }],
        contentDirective: [{ type: ContentChild, args: [FarrisSidebarContentDirective,] }],
        footerDirective: [{ type: ContentChild, args: [FarrisSidebarFooterDirective,] }],
        sidebarMainEl: [{ type: ViewChild, args: ['sidebarMain',] }],
        changeState: [{ type: Output }]
    };
    return FarrisSidebarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisSidebarModule = /** @class */ (function () {
    function FarrisSidebarModule() {
    }
    FarrisSidebarModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FarrisSidebarComponent,
                        FarrisSidebarIconDirective,
                        // FarrisSidebarDragableDirective,
                        FarrisSidebarHcontentDirective,
                        FarrisSidebarHeaderDirective,
                        FarrisSidebarToolbarDirective,
                        FarrisSidebarTitleDirective,
                        FarrisSidebarContentDirective,
                        FarrisSidebarFooterDirective
                    ],
                    imports: [
                        CommonModule,
                        LocaleModule
                    ],
                    exports: [
                        FarrisSidebarComponent,
                        FarrisSidebarIconDirective,
                        // FarrisSidebarDragableDirective,
                        FarrisSidebarHcontentDirective,
                        FarrisSidebarHeaderDirective,
                        FarrisSidebarToolbarDirective,
                        FarrisSidebarTitleDirective,
                        FarrisSidebarContentDirective,
                        FarrisSidebarFooterDirective
                    ]
                },] }
    ];
    return FarrisSidebarModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisSidebarService, FarrisSidebarComponent, FarrisSidebarModule, FarrisSidebarContentDirective, FarrisSidebarFooterDirective, FarrisSidebarHcontentDirective, FarrisSidebarHeaderDirective, FarrisSidebarIconDirective, FarrisSidebarTitleDirective, FarrisSidebarToolbarDirective };

//# sourceMappingURL=farris-ui-sidebar.js.map