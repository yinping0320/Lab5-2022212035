(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/core'), require('@angular/common'), require('@farris/ui-locale')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-sidebar', ['exports', 'rxjs', '@angular/core', '@angular/common', '@farris/ui-locale'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-sidebar'] = {}),global.rxjs,global.ng.core,global.ng.common,global.uiLocale));
}(this, (function (exports,rxjs,i0,common,uiLocale) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarService = /** @class */ (function () {
        function FarrisSidebarService() {
            this.isOpenSubject = new rxjs.Subject();
        }
        /**
         * @param {?} message
         * @return {?}
         */
        FarrisSidebarService.prototype.sendIsOpen = /**
         * @param {?} message
         * @return {?}
         */
            function (message) {
                this.isOpenSubject.next(message);
            };
        /**
         * @return {?}
         */
        FarrisSidebarService.prototype.getIsOpen = /**
         * @return {?}
         */
            function () {
                return this.isOpenSubject.asObservable();
            };
        FarrisSidebarService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarService.ctorParameters = function () { return []; };
        /** @nocollapse */ FarrisSidebarService.ngInjectableDef = i0.defineInjectable({ factory: function FarrisSidebarService_Factory() { return new FarrisSidebarService(); }, token: FarrisSidebarService, providedIn: "root" });
        return FarrisSidebarService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarIconDirective = /** @class */ (function () {
        function FarrisSidebarIconDirective(templateRef) {
            this.templateRef = templateRef;
            this.iconCls = 'f-sidebar-entry';
        }
        FarrisSidebarIconDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarIcon]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarIconDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarIconDirective.propDecorators = {
            iconCls: [{ type: i0.Input }]
        };
        return FarrisSidebarIconDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarTitleDirective = /** @class */ (function () {
        function FarrisSidebarTitleDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarTitleDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarTitle]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarTitleDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarTitleDirective.propDecorators = {
            titleCls: [{ type: i0.Input }]
        };
        return FarrisSidebarTitleDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarHeaderDirective = /** @class */ (function () {
        function FarrisSidebarHeaderDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarHeaderDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarHeader]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarHeaderDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarHeaderDirective.propDecorators = {
            headerCls: [{ type: i0.Input }]
        };
        return FarrisSidebarHeaderDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarHcontentDirective = /** @class */ (function () {
        function FarrisSidebarHcontentDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarHcontentDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarHcontent]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarHcontentDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarHcontentDirective.propDecorators = {
            hcontentCls: [{ type: i0.Input }]
        };
        return FarrisSidebarHcontentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarToolbarDirective = /** @class */ (function () {
        function FarrisSidebarToolbarDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarToolbarDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarToolbar]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarToolbarDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarToolbarDirective.propDecorators = {
            toolbarCls: [{ type: i0.Input }]
        };
        return FarrisSidebarToolbarDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarContentDirective = /** @class */ (function () {
        function FarrisSidebarContentDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarContentDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarContent]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarContentDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarContentDirective.propDecorators = {
            contentCls: [{ type: i0.Input }]
        };
        return FarrisSidebarContentDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarFooterDirective = /** @class */ (function () {
        function FarrisSidebarFooterDirective(templateRef) {
            this.templateRef = templateRef;
        }
        FarrisSidebarFooterDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[farrisSidebarFooter]',
                    },] }
        ];
        /** @nocollapse */
        FarrisSidebarFooterDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        FarrisSidebarFooterDirective.propDecorators = {
            footerCls: [{ type: i0.Input }]
        };
        return FarrisSidebarFooterDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarComponent = /** @class */ (function () {
        function FarrisSidebarComponent(sidebarService, renderer, elementRef) {
            var _this = this;
            this.sidebarService = sidebarService;
            this.renderer = renderer;
            this.elementRef = elementRef;
            this.showClose = false;
            this.showHeader = true;
            this.showEntry = true;
            this.title = "";
            this.showFooter = false;
            this._width = '350px';
            this._height = '30%';
            /* 侧边栏显示 */
            this.isOpen = false;
            /* 侧边栏显示位置 */
            this.showPos = 'right';
            this.enableScroll = true;
            /* 点击遮罩是否关闭侧边栏 */
            this.maskClosable = true;
            /* 是否显示遮罩 */
            this.maskable = true;
            //展开效果
            // @Input() openWay = 'float'
            //是否可拖拽，有点问题（然后没这个特性）
            this.resizeable = false;
            this.changeState = new i0.EventEmitter();
            this.canRemoveInitNoAnimateCls = true;
            this.sidebarService.getIsOpen().subscribe(( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                if (data === false) {
                    _this.closeSideBar();
                }
                else {
                    _this.openSideBar();
                }
            }));
            this.el = this.elementRef.nativeElement;
        }
        Object.defineProperty(FarrisSidebarComponent.prototype, "width", {
            /* 侧边栏大小 */
            get: /* 侧边栏大小 */ 
            /**
             * @return {?}
             */
            function () {
                return this._width;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._width = this._resolveSize(value);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisSidebarComponent.prototype, "height", {
            get: /**
             * @return {?}
             */ function () {
                return this._height;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._height = this._resolveSize(value);
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                // const mainEl = this.el.querySelector('.f-sidebar-main');
                // this.renderer.setStyle(mainEl, 'width', this._width);
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.entryTemplate = this.entryDirective && this.entryDirective.templateRef;
                this.parentEl = this.el.parentElement;
                this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
                if (this.parentCls) {
                    this.renderer.addClass(this.parentEl, this.parentCls);
                }
            };
        /*宽高类型是 string或者number 解析宽高  尺寸 */
        /*宽高类型是 string或者number 解析宽高  尺寸 */
        /**
         * @param {?} size
         * @return {?}
         */
        FarrisSidebarComponent.prototype._resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
            /**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                /** @type {?} */
                var regex = /px|em|rem|pt|%/;
                // 说明是字符串
                return regex.test(size) ? "" + parseInt(size, 10) + size.match(regex)[0] : size + "px";
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.toggle = /**
         * @return {?}
         */
            function () {
                this.isOpen = !this.isOpen;
                this.changeState.emit(this.isOpen);
                if (this.isOpen === true) {
                    this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
                    this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
                }
                if (this.isOpen === false) {
                    this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
                    this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
                }
                // const prevEl = this.el.previousElementSibling;
                // if(this.isOpen === true && this.openWay !== 'float'){
                //   this.renderer.setStyle(prevEl, `${this.showPos}`, this.width + 'px');
                //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-show');
                //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
                //   this.maskable = false;
                // }
                // if(this.isOpen === false && this.openWay !== 'float'){
                //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
                //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
                //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-show');
                //   this.renderer.setStyle(prevEl, `${this.showPos}`, 0);
                // }   
                // if(this.isOpen === true && this.openWay !== 'fold'){
                //   this.maskable = true;
                // }
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.closeSideBar = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.removeNoneAnimateCls();
                if (this.beforeClose) {
                    this.beforeClose().subscribe(( /**
                     * @param {?} isOpen
                     * @return {?}
                     */function (isOpen) {
                        _this.isOpen = !isOpen;
                    }));
                }
                else {
                    this.isOpen = false;
                }
                this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
                this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.closeSideBarByMask = /**
         * @return {?}
         */
            function () {
                if (!this.maskClosable) {
                    return;
                }
                this.closeSideBar();
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.openSideBar = /**
         * @return {?}
         */
            function () {
                this.removeNoneAnimateCls();
                this.isOpen = true;
                this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
                this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
            };
        /*侧边栏初始因为动画收起时，会被看到, 移除 */
        /*侧边栏初始因为动画收起时，会被看到, 移除 */
        /**
         * @private
         * @return {?}
         */
        FarrisSidebarComponent.prototype.removeNoneAnimateCls = /*侧边栏初始因为动画收起时，会被看到, 移除 */
            /**
             * @private
             * @return {?}
             */
            function () {
                if (!this.canRemoveInitNoAnimateCls) {
                    return;
                }
                if (this.sidebarMainEl) {
                    this.renderer.removeClass(this.sidebarMainEl.nativeElement, 'f-sidebar-slideinit');
                    this.canRemoveInitNoAnimateCls = false;
                }
            };
        /**
         * @return {?}
         */
        FarrisSidebarComponent.prototype.getStyleData = /**
         * @return {?}
         */
            function () {
            };
        FarrisSidebarComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-sidebar',
                        template: "\n  <div class=\"f-cmp-sidebar f-sidebar-slide\" [class]=\"'f-sidebar-pos-'+showPos\"\n  [ngClass]=\"{'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\">\n    <div class=\"f-sidebar-main f-sidebar-slideinit\" [ngClass]=\"mainCls\" #sidebarMain [ngStyle]=\"{width:'leftright'.indexOf(showPos)>-1?width:'auto',height:'topbottom'.indexOf(showPos)>-1?height:'auto'}\" >\n      <div class=\"f-sidebar-header\" *ngIf=\"showHeader\" [ngClass]=\"headerDirective && headerDirective.headerCls\">\n        <ng-template [ngTemplateOutlet]=\"headerDirective.templateRef\" *ngIf=\"headerDirective && headerDirective.templateRef\"></ng-template>\n        <ng-template [ngIf]=\"!headerDirective\">\n          <div class=\"f-title f-tmpl-for-title-withline\" [ngClass]=\"headerTitleDirective && headerTitleDirective.titleCls\">\n            <ng-template [ngTemplateOutlet]=\"headerTitleDirective.templateRef\" *ngIf=\"headerTitleDirective && headerTitleDirective.templateRef\"></ng-template>\n            <ng-template [ngIf]=\"!headerTitleDirective\">\n              <h5 class=\"f-title-text\">{{title ?title: ('sidebar.sidebar'|locale)}}</h5>\n            </ng-template>\n          </div>\n          <div class=\"f-content\" *ngIf=\"headerContentDirective && headerContentDirective.templateRef\" [ngClass]=\"headerContentDirective && headerContentDirective.hcontentCls\">\n            <ng-template [ngTemplateOutlet]=\"headerContentDirective.templateRef\"></ng-template>\n          </div>\n          <div class=\"f-toolbar\" [ngClass]=\"headerToolbarDirective && headerToolbarDirective.toolbarCls\">\n            <ng-template [ngTemplateOutlet]=\"headerToolbarDirective.templateRef\" *ngIf=\"headerToolbarDirective && headerToolbarDirective.templateRef\"></ng-template>\n            <ng-template [ngIf]=\"!headerToolbarDirective||showClose\">\n              <span class=\"f-icon f-sidebar-close\" (click)=\"closeSideBar()\"></span>\n            </ng-template>\n          </div>\n        </ng-template>\n      </div>\n      <div class=\"f-sidebar-content\" [ngClass]=\"contentDirective && contentDirective.contentCls\" *ngIf=\"contentDirective && contentDirective.templateRef\">\n        <ng-template [ngTemplateOutlet]=\"contentDirective.templateRef\"></ng-template>\n      </div>\n      <div class=\"f-sidebar-footer\"  *ngIf=\"showFooter\" [ngClass]=\"footerDirective && footerDirective.footerCls\">\n        <ng-template [ngTemplateOutlet]=\"footerDirective.templateRef\" *ngIf=\"footerDirective && footerDirective.templateRef\"></ng-template>\n      </div>\n    </div>\n    <div class=\"f-sidebar-entry-ctr\" [ngClass]=\"entryDirective && entryDirective.iconCls\" (click)=\"openSideBar()\" *ngIf=\"showEntry\">\n      <ng-template [ngTemplateOutlet]=\"entryTemplate\" *ngIf=\"entryTemplate\"></ng-template>\n      <div class=\"f-sidebar-entry-icon\" *ngIf=\"!entryTemplate\">\n        <span class=\"f-icon f-sidebar-entry\"></span>\n      </div>\n    </div>\n  </div>\n  <div class=\"f-sidebar-overlay f-sidebar-collapse\" [class.d-none]=\"!maskable\" [ngClass]=\"{ 'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\" (click)=\"closeSideBarByMask()\">\n  </div>\n  ",
                        providers: [],
                        styles: [":host .f-sidebar-slideinit{-webkit-transition:none!important;transition:none!important}"]
                    }] }
        ];
        /** @nocollapse */
        FarrisSidebarComponent.ctorParameters = function () {
            return [
                { type: FarrisSidebarService },
                { type: i0.Renderer2 },
                { type: i0.ElementRef }
            ];
        };
        FarrisSidebarComponent.propDecorators = {
            showClose: [{ type: i0.Input }],
            showHeader: [{ type: i0.Input }],
            showEntry: [{ type: i0.Input }],
            title: [{ type: i0.Input }],
            showFooter: [{ type: i0.Input }],
            mainCls: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            isOpen: [{ type: i0.Input }],
            showPos: [{ type: i0.Input }],
            enableScroll: [{ type: i0.Input }],
            maskClosable: [{ type: i0.Input }],
            maskable: [{ type: i0.Input }],
            beforeClose: [{ type: i0.Input }],
            parentCls: [{ type: i0.Input }],
            resizeable: [{ type: i0.Input }],
            entryDirective: [{ type: i0.ContentChild, args: [FarrisSidebarIconDirective,] }],
            headerDirective: [{ type: i0.ContentChild, args: [FarrisSidebarHeaderDirective,] }],
            headerTitleDirective: [{ type: i0.ContentChild, args: [FarrisSidebarTitleDirective,] }],
            headerContentDirective: [{ type: i0.ContentChild, args: [FarrisSidebarHcontentDirective,] }],
            headerToolbarDirective: [{ type: i0.ContentChild, args: [FarrisSidebarToolbarDirective,] }],
            contentDirective: [{ type: i0.ContentChild, args: [FarrisSidebarContentDirective,] }],
            footerDirective: [{ type: i0.ContentChild, args: [FarrisSidebarFooterDirective,] }],
            sidebarMainEl: [{ type: i0.ViewChild, args: ['sidebarMain',] }],
            changeState: [{ type: i0.Output }]
        };
        return FarrisSidebarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisSidebarModule = /** @class */ (function () {
        function FarrisSidebarModule() {
        }
        FarrisSidebarModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            FarrisSidebarComponent,
                            FarrisSidebarIconDirective,
                            // FarrisSidebarDragableDirective,
                            FarrisSidebarHcontentDirective,
                            FarrisSidebarHeaderDirective,
                            FarrisSidebarToolbarDirective,
                            FarrisSidebarTitleDirective,
                            FarrisSidebarContentDirective,
                            FarrisSidebarFooterDirective
                        ],
                        imports: [
                            common.CommonModule,
                            uiLocale.LocaleModule
                        ],
                        exports: [
                            FarrisSidebarComponent,
                            FarrisSidebarIconDirective,
                            // FarrisSidebarDragableDirective,
                            FarrisSidebarHcontentDirective,
                            FarrisSidebarHeaderDirective,
                            FarrisSidebarToolbarDirective,
                            FarrisSidebarTitleDirective,
                            FarrisSidebarContentDirective,
                            FarrisSidebarFooterDirective
                        ]
                    },] }
        ];
        return FarrisSidebarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.FarrisSidebarService = FarrisSidebarService;
    exports.FarrisSidebarComponent = FarrisSidebarComponent;
    exports.FarrisSidebarModule = FarrisSidebarModule;
    exports.FarrisSidebarContentDirective = FarrisSidebarContentDirective;
    exports.FarrisSidebarFooterDirective = FarrisSidebarFooterDirective;
    exports.FarrisSidebarHcontentDirective = FarrisSidebarHcontentDirective;
    exports.FarrisSidebarHeaderDirective = FarrisSidebarHeaderDirective;
    exports.FarrisSidebarIconDirective = FarrisSidebarIconDirective;
    exports.FarrisSidebarTitleDirective = FarrisSidebarTitleDirective;
    exports.FarrisSidebarToolbarDirective = FarrisSidebarToolbarDirective;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-sidebar.umd.js.map