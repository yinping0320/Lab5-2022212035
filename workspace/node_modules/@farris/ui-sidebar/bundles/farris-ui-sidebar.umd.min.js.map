{"version":3,"sources":["ng://@farris/ui-sidebar/lib/sidebar.service.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-icon.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-title.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-header.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-hcontent.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-toolbar.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-content.directive.ts","ng://@farris/ui-sidebar/lib/directive/sidebar-footer.directive.ts","ng://@farris/ui-sidebar/lib/sidebar.component.ts","ng://@farris/ui-sidebar/lib/sidebar.module.ts"],"names":["FarrisSidebarService","prototype","sendIsOpen","message","this","isOpenSubject","next","getIsOpen","asObservable","Injectable","args","providedIn","Subject","FarrisSidebarIconDirective","Directive","selector","TemplateRef","Input","templateRef","iconCls","FarrisSidebarTitleDirective","FarrisSidebarHeaderDirective","FarrisSidebarHcontentDirective","FarrisSidebarToolbarDirective","FarrisSidebarContentDirective","FarrisSidebarFooterDirective","FarrisSidebarComponent","Object","defineProperty","_width","value","_resolveSize","_height","ngOnInit","ngAfterContentInit","entryTemplate","entryDirective","parentEl","el","parentElement","renderer","addClass","parentCls","size","regex","test","parseInt","match","toggle","isOpen","changeState","emit","removeClass","closeSideBar","_this","removeNoneAnimateCls","beforeClose","subscribe","closeSideBarByMask","maskClosable","openSideBar","canRemoveInitNoAnimateCls","sidebarMainEl","nativeElement","getStyleData","Component","template","providers","Renderer2","ElementRef","ContentChild","ViewChild","Output","sidebarService","elementRef","showClose","showHeader","showEntry","title","showFooter","showPos","enableScroll","maskable","resizeable","EventEmitter","data","FarrisSidebarModule","NgModule","declarations","imports","CommonModule","LocaleModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Subject, Observable } from 'rxjs';\r\n\r\n@Injectable(\r\n  {\r\n    providedIn: 'root'\r\n  }\r\n)\r\nexport class FarrisSidebarService {\r\n\r\n  private isOpenSubject = new Subject<any>();\r\n\r\n  constructor() {\r\n  }\r\n\r\n  sendIsOpen(message: any) {\r\n    this.isOpenSubject.next(message);\r\n  }\r\n\r\n  getIsOpen(): Observable<any> {\r\n    return this.isOpenSubject.asObservable();\r\n  }\r\n\r\n}","import { Directive, Input, TemplateRef } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarIcon]',\r\n})\r\nexport class FarrisSidebarIconDirective {\r\n  @Input() iconCls: string = 'f-sidebar-entry';\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarTitle]',\r\n})\r\nexport class FarrisSidebarTitleDirective {\r\n\r\n  @Input() titleCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarHeader]',\r\n})\r\nexport class FarrisSidebarHeaderDirective {\r\n\r\n  @Input() headerCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarHcontent]',\r\n})\r\nexport class FarrisSidebarHcontentDirective {\r\n  \r\n  @Input() hcontentCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarToolbar]',\r\n})\r\nexport class FarrisSidebarToolbarDirective {\r\n\r\n  @Input() toolbarCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarContent]',\r\n})\r\nexport class FarrisSidebarContentDirective {\r\n\r\n  @Input() contentCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) { \r\n  }\r\n}","import { Directive, TemplateRef, Input } from '@angular/core';\r\n\r\n@Directive({\r\n  selector: '[farrisSidebarFooter]',\r\n})\r\nexport class FarrisSidebarFooterDirective{\r\n\r\n  @Input() footerCls: string;\r\n  constructor(\r\n    public templateRef: TemplateRef<any>\r\n  ) {\r\n    \r\n  }\r\n\r\n}","import { Component, OnInit, Input, ContentChild, EventEmitter, Output, Renderer2, ElementRef, AfterContentInit, AfterViewInit, ViewChild, SimpleChanges, OnChanges } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { FarrisSidebarIconDirective } from './directive/sidebar-icon.directive'\r\nimport { FarrisSidebarService } from './sidebar.service';\r\nimport { FarrisSidebarTitleDirective } from './directive/sidebar-title.directive';\r\nimport { FarrisSidebarHeaderDirective } from './directive/sidebar-header.directive';\r\nimport { FarrisSidebarHcontentDirective } from './directive/sidebar-hcontent.directive';\r\nimport { FarrisSidebarToolbarDirective } from './directive/sidebar-toolbar.directive';\r\nimport { FarrisSidebarContentDirective } from './directive/sidebar-content.directive';\r\nimport { FarrisSidebarFooterDirective } from './directive/sidebar-footer.directive';\r\n\r\n@Component({\r\n  selector: 'farris-sidebar',\r\n  template: `\r\n  <div class=\"f-cmp-sidebar f-sidebar-slide\" [class]=\"'f-sidebar-pos-'+showPos\"\r\n  [ngClass]=\"{'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\">\r\n    <div class=\"f-sidebar-main f-sidebar-slideinit\" [ngClass]=\"mainCls\" #sidebarMain [ngStyle]=\"{width:'leftright'.indexOf(showPos)>-1?width:'auto',height:'topbottom'.indexOf(showPos)>-1?height:'auto'}\" >\r\n      <div class=\"f-sidebar-header\" *ngIf=\"showHeader\" [ngClass]=\"headerDirective && headerDirective.headerCls\">\r\n        <ng-template [ngTemplateOutlet]=\"headerDirective.templateRef\" *ngIf=\"headerDirective && headerDirective.templateRef\"></ng-template>\r\n        <ng-template [ngIf]=\"!headerDirective\">\r\n          <div class=\"f-title f-tmpl-for-title-withline\" [ngClass]=\"headerTitleDirective && headerTitleDirective.titleCls\">\r\n            <ng-template [ngTemplateOutlet]=\"headerTitleDirective.templateRef\" *ngIf=\"headerTitleDirective && headerTitleDirective.templateRef\"></ng-template>\r\n            <ng-template [ngIf]=\"!headerTitleDirective\">\r\n              <h5 class=\"f-title-text\">{{title ?title: ('sidebar.sidebar'|locale)}}</h5>\r\n            </ng-template>\r\n          </div>\r\n          <div class=\"f-content\" *ngIf=\"headerContentDirective && headerContentDirective.templateRef\" [ngClass]=\"headerContentDirective && headerContentDirective.hcontentCls\">\r\n            <ng-template [ngTemplateOutlet]=\"headerContentDirective.templateRef\"></ng-template>\r\n          </div>\r\n          <div class=\"f-toolbar\" [ngClass]=\"headerToolbarDirective && headerToolbarDirective.toolbarCls\">\r\n            <ng-template [ngTemplateOutlet]=\"headerToolbarDirective.templateRef\" *ngIf=\"headerToolbarDirective && headerToolbarDirective.templateRef\"></ng-template>\r\n            <ng-template [ngIf]=\"!headerToolbarDirective||showClose\">\r\n              <span class=\"f-icon f-sidebar-close\" (click)=\"closeSideBar()\"></span>\r\n            </ng-template>\r\n          </div>\r\n        </ng-template>\r\n      </div>\r\n      <div class=\"f-sidebar-content\" [ngClass]=\"contentDirective && contentDirective.contentCls\" *ngIf=\"contentDirective && contentDirective.templateRef\">\r\n        <ng-template [ngTemplateOutlet]=\"contentDirective.templateRef\"></ng-template>\r\n      </div>\r\n      <div class=\"f-sidebar-footer\"  *ngIf=\"showFooter\" [ngClass]=\"footerDirective && footerDirective.footerCls\">\r\n        <ng-template [ngTemplateOutlet]=\"footerDirective.templateRef\" *ngIf=\"footerDirective && footerDirective.templateRef\"></ng-template>\r\n      </div>\r\n    </div>\r\n    <div class=\"f-sidebar-entry-ctr\" [ngClass]=\"entryDirective && entryDirective.iconCls\" (click)=\"openSideBar()\" *ngIf=\"showEntry\">\r\n      <ng-template [ngTemplateOutlet]=\"entryTemplate\" *ngIf=\"entryTemplate\"></ng-template>\r\n      <div class=\"f-sidebar-entry-icon\" *ngIf=\"!entryTemplate\">\r\n        <span class=\"f-icon f-sidebar-entry\"></span>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"f-sidebar-overlay f-sidebar-collapse\" [class.d-none]=\"!maskable\" [ngClass]=\"{ 'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }\" (click)=\"closeSideBarByMask()\">\r\n  </div>\r\n  `,\r\n  styleUrls: ['./sidebar.component.css'],\r\n  providers: []\r\n})\r\nexport class FarrisSidebarComponent implements OnInit, AfterContentInit {\r\n\r\n  private el: HTMLElement;\r\n  private parentEl: HTMLElement;\r\n  @Input() showClose: boolean = false;\r\n  @Input() showHeader: boolean = true;\r\n  @Input() showEntry = true;\r\n  @Input() title = \"\";\r\n  @Input() showFooter: boolean = false;\r\n  //ä¾§è¾¹æ æ¯æclassæ ·å¼æ©å±\r\n  @Input() mainCls: string;\r\n  private _width = '350px';\r\n  /* ä¾§è¾¹æ å¤§å° */\r\n  @Input()\r\n  get width() {\r\n    return this._width;\r\n  }\r\n  set width(value) {\r\n    this._width = this._resolveSize(value);\r\n  };\r\n \r\n  private _height='30%';\r\n\r\n  @Input()\r\n  set height(value){\r\n    this._height= this._resolveSize(value);\r\n  }\r\n  get height(){\r\n    return this._height;\r\n  }\r\n\r\n  /* ä¾§è¾¹æ æ¾ç¤º */\r\n  @Input() isOpen = false;\r\n\r\n  /* ä¾§è¾¹æ æ¾ç¤ºä½ç½® */\r\n  @Input() showPos = 'right'\r\n  @Input() enableScroll = true;\r\n\r\n  /* ç¹å»é®ç½©æ¯å¦å³é­ä¾§è¾¹æ  */\r\n  @Input() maskClosable = true;\r\n\r\n  /* æ¯å¦æ¾ç¤ºé®ç½© */\r\n  @Input() maskable = true;\r\n\r\n  @Input() beforeClose: () => Observable<boolean>;\r\n\r\n  @Input() parentCls: string;\r\n\r\n  //å±å¼ææ\r\n  // @Input() openWay = 'float'\r\n  //æ¯å¦å¯ææ½ï¼æç¹é®é¢ï¼ç¶åæ²¡è¿ä¸ªç¹æ§ï¼\r\n  @Input() resizeable: boolean = false;\r\n\r\n  entryTemplate: any;\r\n  //ä¾§è¾¹æ å¥å£åºåæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarIconDirective) entryDirective: any;\r\n  //ä¾§è¾¹æ headeråºåæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarHeaderDirective) headerDirective: any;\r\n  //ä¾§è¾¹æ headeræ é¢åºåæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarTitleDirective) headerTitleDirective: any;\r\n  //ä¾§è¾¹æ headerä¸­é´åºåæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarHcontentDirective) headerContentDirective: any;\r\n  //ä¾§è¾¹æ headerå·¥å·æ åºåæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarToolbarDirective) headerToolbarDirective: any;\r\n  // ä¾§è¾¹æ contentæ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarContentDirective) contentDirective: any;\r\n  // ä¾§è¾¹æ footeræ¯æèªå®ä¹\r\n  @ContentChild(FarrisSidebarFooterDirective) footerDirective: any;\r\n  @ViewChild('sidebarMain') private sidebarMainEl: ElementRef;\r\n\r\n  @Output() changeState: EventEmitter<any> = new EventEmitter<any>();\r\n  private canRemoveInitNoAnimateCls = true;\r\n\r\n\r\n  constructor(\r\n    private sidebarService: FarrisSidebarService,\r\n    private renderer: Renderer2,\r\n    private elementRef: ElementRef\r\n  ) {\r\n    this.sidebarService.getIsOpen().subscribe(data => {\r\n      if (data === false) {\r\n        this.closeSideBar();\r\n      } else {\r\n        this.openSideBar();\r\n      }\r\n    })\r\n    this.el = this.elementRef.nativeElement;\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    // const mainEl = this.el.querySelector('.f-sidebar-main');\r\n    // this.renderer.setStyle(mainEl, 'width', this._width);\r\n  }\r\n  ngAfterContentInit() {\r\n    this.entryTemplate = this.entryDirective && this.entryDirective.templateRef;\r\n    this.parentEl = this.el.parentElement;\r\n    this.renderer.addClass(this.parentEl, 'f-sidebar-parent');\r\n    if (this.parentCls) {\r\n      this.renderer.addClass(this.parentEl, this.parentCls);\r\n    }\r\n  }\r\n\r\n  /*å®½é«ç±»åæ¯ stringæènumber è§£æå®½é«  å°ºå¯¸ */\r\n  _resolveSize(size) {\r\n    const regex = /px|em|rem|pt|%/;\r\n    // è¯´ææ¯å­ç¬¦ä¸²\r\n    return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;\r\n  }\r\n\r\n  toggle() {\r\n    this.isOpen = !this.isOpen;\r\n    this.changeState.emit(this.isOpen);\r\n    if (this.isOpen === true) {\r\n      this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n      this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');\r\n    }\r\n    if (this.isOpen === false) {\r\n      this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');\r\n      this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n    }\r\n    // const prevEl = this.el.previousElementSibling;\r\n\r\n    // if(this.isOpen === true && this.openWay !== 'float'){\r\n    //   this.renderer.setStyle(prevEl, `${this.showPos}`, this.width + 'px');\r\n    //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-show');\r\n    //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n    //   this.maskable = false;\r\n    // }\r\n    // if(this.isOpen === false && this.openWay !== 'float'){\r\n    //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent');\r\n    //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n    //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-show');\r\n    //   this.renderer.setStyle(prevEl, `${this.showPos}`, 0);\r\n    // }   \r\n    // if(this.isOpen === true && this.openWay !== 'fold'){\r\n    //   this.maskable = true;\r\n    // }\r\n  }\r\n\r\n  closeSideBar() {\r\n    this.removeNoneAnimateCls();\r\n    if (this.beforeClose) {\r\n      this.beforeClose().subscribe((isOpen: boolean) => {\r\n        this.isOpen = !isOpen;\r\n      })\r\n    } else {\r\n      this.isOpen = false;\r\n    }\r\n    this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');\r\n    this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n  }\r\n\r\n  closeSideBarByMask() {\r\n    if (!this.maskClosable) {\r\n      return;\r\n    }\r\n    this.closeSideBar();\r\n  }\r\n\r\n  openSideBar() {\r\n    this.removeNoneAnimateCls();\r\n    this.isOpen = true;\r\n    this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');\r\n    this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');\r\n  }\r\n  /*ä¾§è¾¹æ åå§å ä¸ºå¨ç»æ¶èµ·æ¶ï¼ä¼è¢«çå°, ç§»é¤ */\r\n  private removeNoneAnimateCls() {\r\n    if (!this.canRemoveInitNoAnimateCls) {\r\n      return;\r\n    }\r\n    if (this.sidebarMainEl) {\r\n      this.renderer.removeClass(this.sidebarMainEl.nativeElement, 'f-sidebar-slideinit');\r\n      this.canRemoveInitNoAnimateCls = false;\r\n    }\r\n  }\r\n getStyleData(){\r\n\r\n }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { FarrisSidebarComponent } from './sidebar.component';\r\nimport { FarrisSidebarIconDirective } from './directive/sidebar-icon.directive';\r\n// import { FarrisSidebarDragableDirective } from './directive/sidebar-dragable.directive';\r\nimport { FarrisSidebarHcontentDirective } from './directive/sidebar-hcontent.directive';\r\nimport { FarrisSidebarHeaderDirective } from './directive/sidebar-header.directive';\r\nimport { FarrisSidebarToolbarDirective } from './directive/sidebar-toolbar.directive';\r\nimport { FarrisSidebarTitleDirective } from './directive/sidebar-title.directive';\r\nimport { FarrisSidebarContentDirective } from './directive/sidebar-content.directive';\r\nimport { FarrisSidebarFooterDirective } from './directive/sidebar-footer.directive';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    FarrisSidebarComponent,\r\n    FarrisSidebarIconDirective,\r\n    // FarrisSidebarDragableDirective,\r\n    FarrisSidebarHcontentDirective,\r\n    FarrisSidebarHeaderDirective,\r\n    FarrisSidebarToolbarDirective,\r\n    FarrisSidebarTitleDirective,\r\n    FarrisSidebarContentDirective,\r\n    FarrisSidebarFooterDirective\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule\r\n  ],\r\n  exports: [\r\n    FarrisSidebarComponent,\r\n    FarrisSidebarIconDirective,\r\n    // FarrisSidebarDragableDirective,\r\n    FarrisSidebarHcontentDirective,\r\n    FarrisSidebarHeaderDirective,\r\n    FarrisSidebarToolbarDirective,\r\n    FarrisSidebarTitleDirective,\r\n    FarrisSidebarContentDirective,\r\n    FarrisSidebarFooterDirective\r\n  ]\r\n})\r\nexport class FarrisSidebarModule { }\r\n"]}