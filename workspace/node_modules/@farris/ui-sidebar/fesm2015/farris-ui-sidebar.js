import { Subject } from 'rxjs';
import { Injectable, Component, Input, ContentChild, EventEmitter, Output, Renderer2, ElementRef, ViewChild, NgModule, Directive, TemplateRef, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';
import { LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarService {
    constructor() {
        this.isOpenSubject = new Subject();
    }
    /**
     * @param {?} message
     * @return {?}
     */
    sendIsOpen(message) {
        this.isOpenSubject.next(message);
    }
    /**
     * @return {?}
     */
    getIsOpen() {
        return this.isOpenSubject.asObservable();
    }
}
FarrisSidebarService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
FarrisSidebarService.ctorParameters = () => [];
/** @nocollapse */ FarrisSidebarService.ngInjectableDef = defineInjectable({ factory: function FarrisSidebarService_Factory() { return new FarrisSidebarService(); }, token: FarrisSidebarService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarIconDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
        this.iconCls = 'f-sidebar-entry';
    }
}
FarrisSidebarIconDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarIcon]',
            },] }
];
/** @nocollapse */
FarrisSidebarIconDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarIconDirective.propDecorators = {
    iconCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarTitleDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarTitleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarTitle]',
            },] }
];
/** @nocollapse */
FarrisSidebarTitleDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarTitleDirective.propDecorators = {
    titleCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarHeaderDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarHeaderDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarHeader]',
            },] }
];
/** @nocollapse */
FarrisSidebarHeaderDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarHeaderDirective.propDecorators = {
    headerCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarHcontentDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarHcontentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarHcontent]',
            },] }
];
/** @nocollapse */
FarrisSidebarHcontentDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarHcontentDirective.propDecorators = {
    hcontentCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarToolbarDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarToolbarDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarToolbar]',
            },] }
];
/** @nocollapse */
FarrisSidebarToolbarDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarToolbarDirective.propDecorators = {
    toolbarCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarContentDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarContent]',
            },] }
];
/** @nocollapse */
FarrisSidebarContentDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarContentDirective.propDecorators = {
    contentCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarFooterDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FarrisSidebarFooterDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farrisSidebarFooter]',
            },] }
];
/** @nocollapse */
FarrisSidebarFooterDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FarrisSidebarFooterDirective.propDecorators = {
    footerCls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarComponent {
    /**
     * @param {?} sidebarService
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(sidebarService, renderer, elementRef) {
        this.sidebarService = sidebarService;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.showClose = false;
        this.showHeader = true;
        this.showEntry = true;
        this.title = "";
        this.showFooter = false;
        this._width = '350px';
        this._height = '30%';
        /* 侧边栏显示 */
        this.isOpen = false;
        /* 侧边栏显示位置 */
        this.showPos = 'right';
        this.enableScroll = true;
        /* 点击遮罩是否关闭侧边栏 */
        this.maskClosable = true;
        /* 是否显示遮罩 */
        this.maskable = true;
        //展开效果
        // @Input() openWay = 'float'
        //是否可拖拽，有点问题（然后没这个特性）
        this.resizeable = false;
        this.changeState = new EventEmitter();
        this.canRemoveInitNoAnimateCls = true;
        this.sidebarService.getIsOpen().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            if (data === false) {
                this.closeSideBar();
            }
            else {
                this.openSideBar();
            }
        }));
        this.el = this.elementRef.nativeElement;
    }
    /* 侧边栏大小 */
    /**
     * @return {?}
     */
    get width() {
        return this._width;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set width(value) {
        this._width = this._resolveSize(value);
    }
    ;
    /**
     * @param {?} value
     * @return {?}
     */
    set height(value) {
        this._height = this._resolveSize(value);
    }
    /**
     * @return {?}
     */
    get height() {
        return this._height;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // const mainEl = this.el.querySelector('.f-sidebar-main');
        // this.renderer.setStyle(mainEl, 'width', this._width);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.entryTemplate = this.entryDirective && this.entryDirective.templateRef;
        this.parentEl = this.el.parentElement;
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
        if (this.parentCls) {
            this.renderer.addClass(this.parentEl, this.parentCls);
        }
    }
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    _resolveSize(size) {
        /** @type {?} */
        const regex = /px|em|rem|pt|%/;
        // 说明是字符串
        return regex.test(size) ? `${parseInt(size, 10)}${size.match(regex)[0]}` : `${size}px`;
    }
    /**
     * @return {?}
     */
    toggle() {
        this.isOpen = !this.isOpen;
        this.changeState.emit(this.isOpen);
        if (this.isOpen === true) {
            this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
            this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
        }
        if (this.isOpen === false) {
            this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
            this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
        }
        // const prevEl = this.el.previousElementSibling;
        // if(this.isOpen === true && this.openWay !== 'float'){
        //   this.renderer.setStyle(prevEl, `${this.showPos}`, this.width + 'px');
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-show');
        //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
        //   this.maskable = false;
        // }
        // if(this.isOpen === false && this.openWay !== 'float'){
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent');
        //   this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
        //   this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-show');
        //   this.renderer.setStyle(prevEl, `${this.showPos}`, 0);
        // }   
        // if(this.isOpen === true && this.openWay !== 'fold'){
        //   this.maskable = true;
        // }
    }
    /**
     * @return {?}
     */
    closeSideBar() {
        this.removeNoneAnimateCls();
        if (this.beforeClose) {
            this.beforeClose().subscribe((/**
             * @param {?} isOpen
             * @return {?}
             */
            (isOpen) => {
                this.isOpen = !isOpen;
            }));
        }
        else {
            this.isOpen = false;
        }
        this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-expand');
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent-collapse');
    }
    /**
     * @return {?}
     */
    closeSideBarByMask() {
        if (!this.maskClosable) {
            return;
        }
        this.closeSideBar();
    }
    /**
     * @return {?}
     */
    openSideBar() {
        this.removeNoneAnimateCls();
        this.isOpen = true;
        this.renderer.removeClass(this.parentEl, 'f-sidebar-parent-collapse');
        this.renderer.addClass(this.parentEl, 'f-sidebar-parent-expand');
    }
    /*侧边栏初始因为动画收起时，会被看到, 移除 */
    /**
     * @private
     * @return {?}
     */
    removeNoneAnimateCls() {
        if (!this.canRemoveInitNoAnimateCls) {
            return;
        }
        if (this.sidebarMainEl) {
            this.renderer.removeClass(this.sidebarMainEl.nativeElement, 'f-sidebar-slideinit');
            this.canRemoveInitNoAnimateCls = false;
        }
    }
    /**
     * @return {?}
     */
    getStyleData() {
    }
}
FarrisSidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-sidebar',
                template: `
  <div class="f-cmp-sidebar f-sidebar-slide" [class]="'f-sidebar-pos-'+showPos"
  [ngClass]="{'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }">
    <div class="f-sidebar-main f-sidebar-slideinit" [ngClass]="mainCls" #sidebarMain [ngStyle]="{width:'leftright'.indexOf(showPos)>-1?width:'auto',height:'topbottom'.indexOf(showPos)>-1?height:'auto'}" >
      <div class="f-sidebar-header" *ngIf="showHeader" [ngClass]="headerDirective && headerDirective.headerCls">
        <ng-template [ngTemplateOutlet]="headerDirective.templateRef" *ngIf="headerDirective && headerDirective.templateRef"></ng-template>
        <ng-template [ngIf]="!headerDirective">
          <div class="f-title f-tmpl-for-title-withline" [ngClass]="headerTitleDirective && headerTitleDirective.titleCls">
            <ng-template [ngTemplateOutlet]="headerTitleDirective.templateRef" *ngIf="headerTitleDirective && headerTitleDirective.templateRef"></ng-template>
            <ng-template [ngIf]="!headerTitleDirective">
              <h5 class="f-title-text">{{title ?title: ('sidebar.sidebar'|locale)}}</h5>
            </ng-template>
          </div>
          <div class="f-content" *ngIf="headerContentDirective && headerContentDirective.templateRef" [ngClass]="headerContentDirective && headerContentDirective.hcontentCls">
            <ng-template [ngTemplateOutlet]="headerContentDirective.templateRef"></ng-template>
          </div>
          <div class="f-toolbar" [ngClass]="headerToolbarDirective && headerToolbarDirective.toolbarCls">
            <ng-template [ngTemplateOutlet]="headerToolbarDirective.templateRef" *ngIf="headerToolbarDirective && headerToolbarDirective.templateRef"></ng-template>
            <ng-template [ngIf]="!headerToolbarDirective||showClose">
              <span class="f-icon f-sidebar-close" (click)="closeSideBar()"></span>
            </ng-template>
          </div>
        </ng-template>
      </div>
      <div class="f-sidebar-content" [ngClass]="contentDirective && contentDirective.contentCls" *ngIf="contentDirective && contentDirective.templateRef">
        <ng-template [ngTemplateOutlet]="contentDirective.templateRef"></ng-template>
      </div>
      <div class="f-sidebar-footer"  *ngIf="showFooter" [ngClass]="footerDirective && footerDirective.footerCls">
        <ng-template [ngTemplateOutlet]="footerDirective.templateRef" *ngIf="footerDirective && footerDirective.templateRef"></ng-template>
      </div>
    </div>
    <div class="f-sidebar-entry-ctr" [ngClass]="entryDirective && entryDirective.iconCls" (click)="openSideBar()" *ngIf="showEntry">
      <ng-template [ngTemplateOutlet]="entryTemplate" *ngIf="entryTemplate"></ng-template>
      <div class="f-sidebar-entry-icon" *ngIf="!entryTemplate">
        <span class="f-icon f-sidebar-entry"></span>
      </div>
    </div>
  </div>
  <div class="f-sidebar-overlay f-sidebar-collapse" [class.d-none]="!maskable" [ngClass]="{ 'f-sidebar-show': isOpen, 'f-sidebar-collapse': !isOpen }" (click)="closeSideBarByMask()">
  </div>
  `,
                providers: [],
                styles: [":host .f-sidebar-slideinit{-webkit-transition:none!important;transition:none!important}"]
            }] }
];
/** @nocollapse */
FarrisSidebarComponent.ctorParameters = () => [
    { type: FarrisSidebarService },
    { type: Renderer2 },
    { type: ElementRef }
];
FarrisSidebarComponent.propDecorators = {
    showClose: [{ type: Input }],
    showHeader: [{ type: Input }],
    showEntry: [{ type: Input }],
    title: [{ type: Input }],
    showFooter: [{ type: Input }],
    mainCls: [{ type: Input }],
    width: [{ type: Input }],
    height: [{ type: Input }],
    isOpen: [{ type: Input }],
    showPos: [{ type: Input }],
    enableScroll: [{ type: Input }],
    maskClosable: [{ type: Input }],
    maskable: [{ type: Input }],
    beforeClose: [{ type: Input }],
    parentCls: [{ type: Input }],
    resizeable: [{ type: Input }],
    entryDirective: [{ type: ContentChild, args: [FarrisSidebarIconDirective,] }],
    headerDirective: [{ type: ContentChild, args: [FarrisSidebarHeaderDirective,] }],
    headerTitleDirective: [{ type: ContentChild, args: [FarrisSidebarTitleDirective,] }],
    headerContentDirective: [{ type: ContentChild, args: [FarrisSidebarHcontentDirective,] }],
    headerToolbarDirective: [{ type: ContentChild, args: [FarrisSidebarToolbarDirective,] }],
    contentDirective: [{ type: ContentChild, args: [FarrisSidebarContentDirective,] }],
    footerDirective: [{ type: ContentChild, args: [FarrisSidebarFooterDirective,] }],
    sidebarMainEl: [{ type: ViewChild, args: ['sidebarMain',] }],
    changeState: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisSidebarModule {
}
FarrisSidebarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FarrisSidebarComponent,
                    FarrisSidebarIconDirective,
                    // FarrisSidebarDragableDirective,
                    FarrisSidebarHcontentDirective,
                    FarrisSidebarHeaderDirective,
                    FarrisSidebarToolbarDirective,
                    FarrisSidebarTitleDirective,
                    FarrisSidebarContentDirective,
                    FarrisSidebarFooterDirective
                ],
                imports: [
                    CommonModule,
                    LocaleModule
                ],
                exports: [
                    FarrisSidebarComponent,
                    FarrisSidebarIconDirective,
                    // FarrisSidebarDragableDirective,
                    FarrisSidebarHcontentDirective,
                    FarrisSidebarHeaderDirective,
                    FarrisSidebarToolbarDirective,
                    FarrisSidebarTitleDirective,
                    FarrisSidebarContentDirective,
                    FarrisSidebarFooterDirective
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisSidebarService, FarrisSidebarComponent, FarrisSidebarModule, FarrisSidebarContentDirective, FarrisSidebarFooterDirective, FarrisSidebarHcontentDirective, FarrisSidebarHeaderDirective, FarrisSidebarIconDirective, FarrisSidebarTitleDirective, FarrisSidebarToolbarDirective };

//# sourceMappingURL=farris-ui-sidebar.js.map