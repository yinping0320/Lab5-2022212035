/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { handleLinearGradient, handleCircleGradient } from './progress-utils';
/** @type {?} */
var defaultFormatter = (/**
 * @param {?} p
 * @return {?}
 */
function (p) { return p + "%"; });
var ɵ0 = defaultFormatter;
/** @type {?} */
var gradientIdSeed = 0;
/** @type {?} */
var statusColorMap = new Map([
    ['normal', '#388fff'],
    ['exception', '#f24645'],
    ['success', '#51bd78']
]);
var ProgressComponent = /** @class */ (function () {
    function ProgressComponent() {
        //进度条类型
        this.type = 'line';
        //进度条尺寸 'default' | 'small'
        this.size = 'default';
        //是否显示进度条信息
        this.showInfo = true;
        //仪表盘缺口位置
        this.gapPosition = 'top';
        //仪表盘上角度 0-360度
        //进度条短点形状 默认圆角 可选直角square
        this.strokeLinecap = 'round';
        //进度条百分比
        this._percent = 0;
        //存储的状态
        this.cachedStatus = 'normal';
        //计算的状态
        this.inferredStatus = 'normal';
        //圆环路径
        this.progressCirclePath = [];
        //是否渐变
        this.isGradient = false;
        this.gradientId = gradientIdSeed++;
        this.lineGradient = null;
        this.trackByFn = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) { return "" + index; });
    }
    Object.defineProperty(ProgressComponent.prototype, "percent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._percent;
        },
        set: /**
         * @param {?} percent
         * @return {?}
         */
        function (percent) {
            this._percent = percent;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "progressStatus", {
        //获得进度条状态
        get: 
        //获得进度条状态
        /**
         * @return {?}
         */
        function () {
            return this.status || this.inferredStatus;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "progressFormatter", {
        //进度条信息格式化
        get: 
        //进度条信息格式化
        /**
         * @return {?}
         */
        function () {
            return this.format || defaultFormatter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "strokeW", {
        //计算进度条宽度 默认8px small为6px
        get: 
        //计算进度条宽度 默认8px small为6px
        /**
         * @return {?}
         */
        function () {
            return this.strokeWidth || (this.type === 'line' && this.size !== 'small' ? 8 : 6);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressComponent.prototype, "isCircleStyle", {
        //判断是否为环形进度条
        get: 
        //判断是否为环形进度条
        /**
         * @return {?}
         */
        function () {
            return this.type === 'circle' || this.type === 'dashboard';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ProgressComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        //圆环宽度判断
        if (this.type === 'circle' || this.type === 'dashboard') {
            this.width = this.width || (this.size !== 'small' ? 80 : 50);
        }
        this.setStrokeColor();
        this.getCirclePaths();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ProgressComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var gapPosition = changes.gapPosition, strokeLinecap = changes.strokeLinecap, strokeColor = changes.strokeColor, gapDegree = changes.gapDegree, type = changes.type, status = changes.status, percent = changes.percent, successPercent = changes.successPercent;
        //状态变化
        if (status) {
            this.cachedStatus = this.status || this.cachedStatus;
        }
        //进度 已完成的分段百分比 变化
        if (percent || successPercent) {
            /** @type {?} */
            var fillAll = parseInt(this.percent.toString(), 10) >= 100;
            if (fillAll) {
                if ((this.isNotNil(this.successPercent) && (/** @type {?} */ (this.successPercent)) >= 100) || this.successPercent === undefined) {
                    this.inferredStatus = 'success';
                    // this.status = this.inferredStatus;
                }
            }
            else {
                this.inferredStatus = this.cachedStatus;
            }
            this.status = this.inferredStatus;
        }
        //边线颜色变化
        if (strokeColor) {
            this.setStrokeColor();
        }
        //圆环一些属性变化
        if (gapPosition || strokeLinecap || gapDegree || type || percent || strokeColor) {
            this.getCirclePaths();
        }
    };
    /**
     * @private
     * @return {?}
     */
    ProgressComponent.prototype.getCirclePaths = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.isCircleStyle) {
            return;
        }
        /** @type {?} */
        var values = this.isNotNil(this.successPercent) ? [(/** @type {?} */ (this.successPercent)), this.percent] : [this.percent];
        /** @type {?} */
        var radius = 50 - this.strokeW / 2;
        /** @type {?} */
        var gapPosition = this.gapPosition || (this.type === 'circle' ? 'top' : 'bottom');
        /** @type {?} */
        var len = Math.PI * 2 * radius;
        /** @type {?} */
        var gapDegree = this.gapDegree || (this.type === 'circle' ? 0 : 75);
        /** @type {?} */
        var beginPositionX = 0;
        /** @type {?} */
        var beginPositionY = -radius;
        /** @type {?} */
        var endPositionX = 0;
        /** @type {?} */
        var endPositionY = radius * -2;
        switch (gapPosition) {
            case 'left':
                beginPositionX = -radius;
                beginPositionY = 0;
                endPositionX = radius * 2;
                endPositionY = 0;
                break;
            case 'right':
                beginPositionX = radius;
                beginPositionY = 0;
                endPositionX = radius * -2;
                endPositionY = 0;
                break;
            case 'bottom':
                beginPositionY = radius;
                endPositionY = radius * 2;
                break;
            default:
        }
        this.pathString = "M 50,50 m " + beginPositionX + "," + beginPositionY + "\n       a " + radius + "," + radius + " 0 1 1 " + endPositionX + "," + -endPositionY + "\n       a " + radius + "," + radius + " 0 1 1 " + -endPositionX + "," + endPositionY;
        this.trailPathStyle = {
            strokeDasharray: len - gapDegree + "px " + len + "px",
            strokeDashoffset: "-" + gapDegree / 2 + "px",
            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
        };
        // Calculate styles for each path.
        this.progressCirclePath = values
            .map((/**
         * @param {?} value
         * @param {?} index
         * @return {?}
         */
        function (value, index) {
            /** @type {?} */
            var isSuccessPercent = values.length === 2 && index === 0;
            return {
                stroke: _this.isGradient && !isSuccessPercent ? "url(#gradient-" + _this.gradientId + ")" : null,
                strokePathStyle: {
                    stroke: !_this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : ((/** @type {?} */ (_this.strokeColor)))) : null,
                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',
                    strokeDasharray: ((value || 0) / 100) * (len - gapDegree) + "px " + len + "px",
                    strokeDashoffset: "-" + gapDegree / 2 + "px"
                }
            };
        }))
            .reverse();
    };
    /**
     * @private
     * @return {?}
     */
    ProgressComponent.prototype.setStrokeColor = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var color = this.strokeColor;
        //判断是否为渐变
        /** @type {?} */
        var isGradient = (this.isGradient = !!color && typeof color !== 'string');
        //线性渐变
        if (isGradient && !this.isCircleStyle) {
            this.lineGradient = handleLinearGradient((/** @type {?} */ (color)));
        }
        //圆环渐变
        else if (isGradient && this.isCircleStyle) {
            this.circleGradient = handleCircleGradient((/** @type {?} */ (this.strokeColor)));
        }
        //不是渐变
        else {
            this.lineGradient = null;
            this.circleGradient = [];
        }
    };
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    ProgressComponent.prototype.isNotNil = /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return typeof value !== 'undefined' && value !== null;
    };
    ProgressComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-progress',
                    template: "<div\r\n[ngClass]=\"'f-progress f-progress-status-' + progressStatus\"\r\n[class.f-progress-line]=\"type == 'line'\"\r\n[class.ant-progress-small]=\"size == 'small'\"\r\n[class.f-progress-show-info]=\"showInfo\"\r\n[class.f-progress-circle]=\"isCircleStyle\"\r\n>\r\n  <div *ngIf=\"type === 'line'\">\r\n      <div class=\"f-progress-outer\">\r\n          <div class=\"f-progress-inner\">\r\n              <div class = \"f-progress-bg\"\r\n              [style.width.%] = \"percent\"\r\n              [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n              [style.background]=\"!isGradient ? strokeColor : null\"\r\n              [style.background-image]=\"isGradient ? lineGradient : null\"\r\n              [style.height.px]=\"strokeW\"\r\n              >\r\n              </div>\r\n              <div\r\n                *ngIf=\"successPercent || successPercent === 0\"\r\n                class=\"f-progress-success-bg\"\r\n                [style.width.%]=\"successPercent\"\r\n                [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n                [style.height.px]=\"strokeW\"\r\n              ></div>\r\n          </div>\r\n      </div>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n  <div \r\n  class=\"f-progress-inner\"\r\n  [style.width.px]=\"this.width\"\r\n  [style.height.px]=\"this.width\"\r\n  [style.fontSize.px]=\"this.width * 0.15 + 6\"\r\n  [class.f-progress-circle-gradient]=\"isGradient\"\r\n  *ngIf=\"isCircleStyle\">\r\n      <svg class=\"f-progress-circle\" viewBox=\"0 0 100 100\">\r\n        <defs *ngIf=\"isGradient\">\r\n          <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\r\n            <stop\r\n              *ngFor=\"let i of circleGradient\"\r\n              [attr.offset]=\"i.offset\"\r\n              [attr.stop-color]=\"i.color\"\r\n            ></stop>\r\n          </linearGradient>\r\n        </defs>\r\n        <path\r\n          class=\"f-progress-circle-trail\"\r\n          stroke=\"#efefef\"\r\n          fill-opacity=\"0\"\r\n          [attr.stroke-width]=\"strokeW\"\r\n          [attr.d]=\"pathString\"\r\n          [ngStyle]=\"trailPathStyle\"\r\n        ></path>\r\n        <path\r\n          *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\r\n          class=\"f-progress-circle-path\"\r\n          fill-opacity=\"0\"\r\n          [attr.d]=\"pathString\"\r\n          [attr.stroke-linecap]=\"strokeLinecap\"\r\n          [attr.stroke]=\"p.stroke\"\r\n          [attr.stroke-width]=\"percent ? strokeW : 0\"\r\n          [ngStyle]=\"p.strokePathStyle\"\r\n        ></path>\r\n      </svg>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #progressInfoTemplate>\r\n  <span class=\"f-progress-text\" *ngIf=\"showInfo\">\r\n    <ng-container *ngIf=\"status === 'error' || (status === 'success' && !format); else formatTemplate\">\r\n        <ng-container\r\n        *ngIf=\"!isCircleStyle\"\r\n      >\r\n        <span [ngClass]=\"'f-progress-text-icon f-icon f-icon-'+ status\"></span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"isCircleStyle\">\r\n        <ng-container *ngIf=\"status === 'success'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-checkmark\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"status === 'error'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-x\"></span>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #formatTemplate>\r\n      {{ progressFormatter(percent) }}\r\n    </ng-template>\r\n  </span>\r\n</ng-template>",
                    styles: [".f-progress{display:inline-block;font-size:.875rem;color:rgba(0,0,0,.65)}.f-progress.f-progress-line{position:relative;width:100%}.f-progress.f-progress-line .f-progress-text .f-progress-text-icon{font-size:1.25rem}.f-progress .f-progress-outer{display:inline-block;width:100%}.f-progress .f-progress-inner{position:relative;display:inline-block;width:100%;overflow:hidden;vertical-align:middle;background-color:#efefef;border-radius:100px}.f-progress .f-progress-bg,.f-progress .f-progress-success-bg{position:relative;border-radius:100px;-webkit-transition:.4s cubic-bezier(.08,.82,.17,1);transition:.4s cubic-bezier(.08,.82,.17,1)}.f-progress .f-progress-success-bg{position:absolute;top:0;left:0}.f-progress .f-progress-text{display:inline-block;width:1.75rem;margin-left:.5rem;color:rgba(0,0,0,.65);font-size:1em;line-height:1;white-space:nowrap;text-align:left;vertical-align:middle;word-break:normal}.f-progress-status-active .f-progress-bg::before{position:absolute;top:0;right:0;bottom:0;left:0;background:#fff;border-radius:.625rem;opacity:0;-webkit-animation:2.4s ease-in-out infinite f-progress-active;animation:2.4s ease-in-out infinite f-progress-active;content:''}.f-progress-show-info .f-progress-outer{padding-right:48px;margin-right:-48px}.f-progress.f-progress-circle .f-progress-inner{position:relative;line-height:1;background-color:transparent}.f-progress.f-progress-circle .f-progress-text{position:absolute;top:50%;left:50%;width:100%;margin:0;padding:0;color:rgba(0,0,0,.65);line-height:1;white-space:normal;text-align:center;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.f-progress.f-progress-circle .f-progress-text .f-progress-text-icon{font-size:1.3em}@-webkit-keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}@keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}"]
                }] }
    ];
    /** @nocollapse */
    ProgressComponent.ctorParameters = function () { return []; };
    ProgressComponent.propDecorators = {
        type: [{ type: Input }],
        strokeWidth: [{ type: Input }],
        size: [{ type: Input }],
        showInfo: [{ type: Input }],
        status: [{ type: Input }],
        format: [{ type: Input }],
        successPercent: [{ type: Input }],
        strokeColor: [{ type: Input }],
        width: [{ type: Input }],
        gapPosition: [{ type: Input }],
        gapDegree: [{ type: Input }],
        strokeLinecap: [{ type: Input }],
        percent: [{ type: Input }]
    };
    return ProgressComponent;
}());
export { ProgressComponent };
if (false) {
    /** @type {?} */
    ProgressComponent.prototype.type;
    /** @type {?} */
    ProgressComponent.prototype.strokeWidth;
    /** @type {?} */
    ProgressComponent.prototype.size;
    /** @type {?} */
    ProgressComponent.prototype.showInfo;
    /** @type {?} */
    ProgressComponent.prototype.status;
    /** @type {?} */
    ProgressComponent.prototype.format;
    /** @type {?} */
    ProgressComponent.prototype.successPercent;
    /** @type {?} */
    ProgressComponent.prototype.strokeColor;
    /** @type {?} */
    ProgressComponent.prototype.width;
    /** @type {?} */
    ProgressComponent.prototype.gapPosition;
    /** @type {?} */
    ProgressComponent.prototype.gapDegree;
    /** @type {?} */
    ProgressComponent.prototype.strokeLinecap;
    /** @type {?} */
    ProgressComponent.prototype._percent;
    /**
     * @type {?}
     * @private
     */
    ProgressComponent.prototype.cachedStatus;
    /**
     * @type {?}
     * @private
     */
    ProgressComponent.prototype.inferredStatus;
    /** @type {?} */
    ProgressComponent.prototype.pathString;
    /** @type {?} */
    ProgressComponent.prototype.trailPathStyle;
    /** @type {?} */
    ProgressComponent.prototype.progressCirclePath;
    /** @type {?} */
    ProgressComponent.prototype.isGradient;
    /** @type {?} */
    ProgressComponent.prototype.gradientId;
    /** @type {?} */
    ProgressComponent.prototype.lineGradient;
    /** @type {?} */
    ProgressComponent.prototype.circleGradient;
    /** @type {?} */
    ProgressComponent.prototype.trackByFn;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1wcm9ncmVzcy8iLCJzb3VyY2VzIjpbImxpYi9wcm9ncmVzcy5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQVUsS0FBSyxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUVuRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQzs7SUFFeEUsZ0JBQWdCOzs7O0FBQXVCLFVBQUMsQ0FBUyxJQUFhLE9BQUcsQ0FBQyxNQUFHLEVBQVAsQ0FBTyxDQUFBOzs7SUFDdkUsY0FBYyxHQUFHLENBQUM7O0lBQ2hCLGNBQWMsR0FBRyxJQUFJLEdBQUcsQ0FBQztJQUM3QixDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7SUFDckIsQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDO0lBQ3hCLENBQUMsU0FBUyxFQUFFLFNBQVMsQ0FBQztDQUN2QixDQUFDO0FBRUY7SUEwRUU7O1FBakVTLFNBQUksR0FBaUIsTUFBTSxDQUFDOztRQUk1QixTQUFJLEdBQUcsU0FBUyxDQUFDOztRQUVqQixhQUFRLEdBQVcsSUFBSSxDQUFDOztRQVl4QixnQkFBVyxHQUE0QixLQUFLLENBQUM7OztRQUk3QyxrQkFBYSxHQUE4QixPQUFPLENBQUM7O1FBRTVELGFBQVEsR0FBVSxDQUFDLENBQUM7O1FBU1osaUJBQVksR0FBd0IsUUFBUSxDQUFDOztRQUU3QyxtQkFBYyxHQUF3QixRQUFRLENBQUM7O1FBS3ZELHVCQUFrQixHQUF5QixFQUFFLENBQUM7O1FBRTlDLGVBQVUsR0FBRyxLQUFLLENBQUM7UUFDbkIsZUFBVSxHQUFHLGNBQWMsRUFBRSxDQUFDO1FBQzlCLGlCQUFZLEdBQWtCLElBQUksQ0FBQztRQW9CbkMsY0FBUzs7OztRQUFHLFVBQUMsS0FBYSxJQUFLLE9BQUEsS0FBRyxLQUFPLEVBQVYsQ0FBVSxF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b0NBQVE7Ozs7O0lBQVIsVUFBWSxLQUFRO1FBQ2xCLE9BQU8sT0FBTyxLQUFLLEtBQUssV0FBVyxJQUFJLEtBQUssS0FBSyxJQUFJLENBQUM7SUFDeEQsQ0FBQzs7Z0JBdE1GLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsaUJBQWlCO29CQUMzQix3ckhBQXVDOztpQkFJeEM7Ozs7O3VCQUdFLEtBQUs7OEJBRUwsS0FBSzt1QkFFTCxLQUFLOzJCQUVMLEtBQUs7eUJBRUwsS0FBSzt5QkFFTCxLQUFLO2lDQUVMLEtBQUs7OEJBRUwsS0FBSzt3QkFFTCxLQUFLOzhCQUVMLEtBQUs7NEJBRUwsS0FBSztnQ0FFTCxLQUFLOzBCQUdMLEtBQUs7O0lBc0tSLHdCQUFDO0NBQUEsQUF4TUQsSUF3TUM7U0FqTVksaUJBQWlCOzs7SUFFNUIsaUNBQXFDOztJQUVyQyx3Q0FBNEI7O0lBRTVCLGlDQUEwQjs7SUFFMUIscUNBQWlDOztJQUVqQyxtQ0FBb0M7O0lBRXBDLG1DQUFxQzs7SUFFckMsMkNBQWdDOztJQUVoQyx3Q0FBOEM7O0lBRTlDLGtDQUFzQjs7SUFFdEIsd0NBQXNEOztJQUV0RCxzQ0FBMEI7O0lBRTFCLDBDQUE0RDs7SUFFNUQscUNBQW9COzs7OztJQVNwQix5Q0FBcUQ7Ozs7O0lBRXJELDJDQUF1RDs7SUFFdkQsdUNBQWtCOztJQUNsQiwyQ0FBb0I7O0lBRXBCLCtDQUE4Qzs7SUFFOUMsdUNBQW1COztJQUNuQix1Q0FBOEI7O0lBQzlCLHlDQUFtQzs7SUFDbkMsMkNBQXlEOztJQW1CekQsc0NBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRlByb2dyZXNzVHlwZSwgRlByb2dyZXNzU3RhdHVzVHlwZSwgRlByb2dyZXNzRm9ybWF0dGVyLCBGUHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUsIEZQcm9ncmVzc0NpcmNsZVBhdGgsIEZQcm9ncmVzc1N0cm9rZUNvbG9yVHlwZSwgRlByb2dyZXNzQ29sb3JHcmFkaWVudCwgRlByb2dyZXNzR3JhZGllbnRQcm9ncmVzcywgRlByb2dyZXNzU3Ryb2tlTGluZWNhcFR5cGUgfSBmcm9tICcuL3Byb2dyZXNzLW9wdGlvbnMnO1xyXG5pbXBvcnQgeyBoYW5kbGVMaW5lYXJHcmFkaWVudCwgaGFuZGxlQ2lyY2xlR3JhZGllbnQgfSBmcm9tICcuL3Byb2dyZXNzLXV0aWxzJztcclxuXHJcbmNvbnN0IGRlZmF1bHRGb3JtYXR0ZXI6IEZQcm9ncmVzc0Zvcm1hdHRlciA9IChwOiBudW1iZXIpOiBzdHJpbmcgPT4gYCR7cH0lYDtcclxubGV0IGdyYWRpZW50SWRTZWVkID0gMDtcclxuY29uc3Qgc3RhdHVzQ29sb3JNYXAgPSBuZXcgTWFwKFtcclxuICBbJ25vcm1hbCcsICcjMzg4ZmZmJ10sXHJcbiAgWydleGNlcHRpb24nLCAnI2YyNDY0NSddLFxyXG4gIFsnc3VjY2VzcycsICcjNTFiZDc4J11cclxuXSk7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2ZhcnJpcy1wcm9ncmVzcycsXHJcbiAgdGVtcGxhdGVVcmw6Jy4vcHJvZ3Jlc3MuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczpbXHJcbiAgICAnLi9wcm9ncmVzcy5jb21wb25lbnQuc2NzcydcclxuICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBQcm9ncmVzc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2Vze1xyXG4gIC8v6L+b5bqm5p2h57G75Z6LXHJcbiAgQElucHV0KCkgdHlwZTpGUHJvZ3Jlc3NUeXBlID0gJ2xpbmUnO1xyXG4gIC8v6L+b5bqm5p2h5a695bqmXHJcbiAgQElucHV0KCkgc3Ryb2tlV2lkdGg6bnVtYmVyO1xyXG4gIC8v6L+b5bqm5p2h5bC65a+4ICdkZWZhdWx0JyB8ICdzbWFsbCdcclxuICBASW5wdXQoKSBzaXplID0gJ2RlZmF1bHQnO1xyXG4gIC8v5piv5ZCm5pi+56S66L+b5bqm5p2h5L+h5oGvXHJcbiAgQElucHV0KCkgc2hvd0luZm86Ym9vbGVhbiA9IHRydWU7XHJcbiAgLy/ov5vluqbmnaHnirbmgIEg6buY6K6kJ25vcm1hbCdcclxuICBASW5wdXQoKSBzdGF0dXM6RlByb2dyZXNzU3RhdHVzVHlwZTtcclxuICAvL+i/m+W6puadoeS/oeaBr+agvOW8j+WMllxyXG4gIEBJbnB1dCgpIGZvcm1hdD86IEZQcm9ncmVzc0Zvcm1hdHRlcjtcclxuICAvL+W3suWujOaIkOeahOWIhuauteeZvuWIhuavlFxyXG4gIEBJbnB1dCgpIHN1Y2Nlc3NQZXJjZW50OiBudW1iZXI7XHJcbiAgLy/ov5vluqbmnaHpopzoibJcclxuICBASW5wdXQoKSBzdHJva2VDb2xvcjpGUHJvZ3Jlc3NTdHJva2VDb2xvclR5cGU7XHJcbiAgLy/lnIblvaLov5vluqbmnaHlrr3luqZcclxuICBASW5wdXQoKSB3aWR0aDpudW1iZXI7XHJcbiAgLy/ku6rooajnm5jnvLrlj6PkvY3nva5cclxuICBASW5wdXQoKSBnYXBQb3NpdGlvbjpGUHJvZ3Jlc3NHYXBQb3NpdGlvblR5cGUgPSAndG9wJztcclxuICAvL+S7quihqOebmOe8uuWPo+inkuW6piDpu5jorqTmmK83NVxyXG4gIEBJbnB1dCgpIGdhcERlZ3JlZTpudW1iZXI7Ly/ku6rooajnm5jkuIrop5LluqYgMC0zNjDluqZcclxuICAvL+i/m+W6puadoeefreeCueW9oueKtiDpu5jorqTlnIbop5Ig5Y+v6YCJ55u06KeSc3F1YXJlXHJcbiAgQElucHV0KCkgc3Ryb2tlTGluZWNhcDpGUHJvZ3Jlc3NTdHJva2VMaW5lY2FwVHlwZSA9ICdyb3VuZCc7XHJcbiAgLy/ov5vluqbmnaHnmb7liIbmr5RcclxuICBfcGVyY2VudDpudW1iZXIgPSAwO1xyXG4gIEBJbnB1dCgpIFxyXG4gIGdldCBwZXJjZW50KCl7XHJcbiAgICByZXR1cm4gdGhpcy5fcGVyY2VudDtcclxuICB9XHJcbiAgc2V0IHBlcmNlbnQocGVyY2VudCl7XHJcbiAgICB0aGlzLl9wZXJjZW50ID0gcGVyY2VudDtcclxuICB9XHJcbiAgLy/lrZjlgqjnmoTnirbmgIFcclxuICBwcml2YXRlIGNhY2hlZFN0YXR1czogRlByb2dyZXNzU3RhdHVzVHlwZSA9ICdub3JtYWwnO1xyXG4gIC8v6K6h566X55qE54q25oCBXHJcbiAgcHJpdmF0ZSBpbmZlcnJlZFN0YXR1czogRlByb2dyZXNzU3RhdHVzVHlwZSA9ICdub3JtYWwnO1xyXG5cclxuICBwYXRoU3RyaW5nOnN0cmluZztcclxuICB0cmFpbFBhdGhTdHlsZTogYW55O1xyXG4gIC8v5ZyG546v6Lev5b6EXHJcbiAgcHJvZ3Jlc3NDaXJjbGVQYXRoOkZQcm9ncmVzc0NpcmNsZVBhdGhbXSA9IFtdO1xyXG4gIC8v5piv5ZCm5riQ5Y+YXHJcbiAgaXNHcmFkaWVudCA9IGZhbHNlO1xyXG4gIGdyYWRpZW50SWQgPSBncmFkaWVudElkU2VlZCsrO1xyXG4gIGxpbmVHcmFkaWVudDogc3RyaW5nIHwgbnVsbCA9IG51bGw7XHJcbiAgY2lyY2xlR3JhZGllbnQ6IEFycmF5PHsgb2Zmc2V0OiBzdHJpbmc7IGNvbG9yOiBzdHJpbmcgfT47XHJcbiAgLy/ojrflvpfov5vluqbmnaHnirbmgIFcclxuICBnZXQgcHJvZ3Jlc3NTdGF0dXMoKTpGUHJvZ3Jlc3NTdGF0dXNUeXBle1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzIHx8IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgfVxyXG4gIC8v6L+b5bqm5p2h5L+h5oGv5qC85byP5YyWXHJcbiAgZ2V0IHByb2dyZXNzRm9ybWF0dGVyKCk6IEZQcm9ncmVzc0Zvcm1hdHRlciB7XHJcbiAgICByZXR1cm4gdGhpcy5mb3JtYXQgfHwgZGVmYXVsdEZvcm1hdHRlcjtcclxuICB9XHJcblxyXG4gIC8v6K6h566X6L+b5bqm5p2h5a695bqmIOm7mOiupDhweCBzbWFsbOS4ujZweFxyXG4gIGdldCBzdHJva2VXKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zdHJva2VXaWR0aCB8fCAodGhpcy50eXBlID09PSAnbGluZScgJiYgdGhpcy5zaXplICE9PSAnc21hbGwnID8gOCA6IDYpO1xyXG4gIH1cclxuICAvL+WIpOaWreaYr+WQpuS4uueOr+W9oui/m+W6puadoVxyXG4gIGdldCBpc0NpcmNsZVN0eWxlKCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gJ2NpcmNsZScgfHwgdGhpcy50eXBlID09PSAnZGFzaGJvYXJkJztcclxuICB9XHJcblxyXG4gIHRyYWNrQnlGbiA9IChpbmRleDogbnVtYmVyKSA9PiBgJHtpbmRleH1gO1xyXG4gIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gIG5nT25Jbml0KCkge1xyXG4gICAgLy/lnIbnjq/lrr3luqbliKTmlq1cclxuICAgIGlmKHRoaXMudHlwZSA9PT0gJ2NpcmNsZScgfHwgdGhpcy50eXBlID09PSAnZGFzaGJvYXJkJyl7XHJcbiAgICAgIHRoaXMud2lkdGggPSB0aGlzLndpZHRoIHx8ICh0aGlzLnNpemUgIT09ICdzbWFsbCcgPyA4MCA6IDUwKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNldFN0cm9rZUNvbG9yKCk7XHJcbiAgICB0aGlzLmdldENpcmNsZVBhdGhzKCk7XHJcbiAgfVxyXG5cclxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICBjb25zdCB7IGdhcFBvc2l0aW9uLCBzdHJva2VMaW5lY2FwLCBzdHJva2VDb2xvciwgZ2FwRGVncmVlLCB0eXBlLCBzdGF0dXMsIHBlcmNlbnQsIHN1Y2Nlc3NQZXJjZW50IH0gPSBjaGFuZ2VzO1xyXG4gICAgLy/nirbmgIHlj5jljJZcclxuICAgIGlmIChzdGF0dXMpIHtcclxuICAgICAgdGhpcy5jYWNoZWRTdGF0dXMgPSB0aGlzLnN0YXR1cyB8fCB0aGlzLmNhY2hlZFN0YXR1cztcclxuICAgIH1cclxuICAgIC8v6L+b5bqmIOW3suWujOaIkOeahOWIhuauteeZvuWIhuavlCDlj5jljJZcclxuICAgIGlmIChwZXJjZW50IHx8IHN1Y2Nlc3NQZXJjZW50KSB7XHJcbiAgICAgIGNvbnN0IGZpbGxBbGwgPSBwYXJzZUludCh0aGlzLnBlcmNlbnQudG9TdHJpbmcoKSwgMTApID49IDEwMDtcclxuICAgICAgaWYgKGZpbGxBbGwpIHtcclxuICAgICAgICBpZiAoKHRoaXMuaXNOb3ROaWwodGhpcy5zdWNjZXNzUGVyY2VudCkgJiYgdGhpcy5zdWNjZXNzUGVyY2VudCEgPj0gMTAwKSB8fCB0aGlzLnN1Y2Nlc3NQZXJjZW50ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgIHRoaXMuaW5mZXJyZWRTdGF0dXMgPSAnc3VjY2Vzcyc7XHJcbiAgICAgICAgICAvLyB0aGlzLnN0YXR1cyA9IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuaW5mZXJyZWRTdGF0dXMgPSB0aGlzLmNhY2hlZFN0YXR1cztcclxuICAgICAgfVxyXG4gICAgICB0aGlzLnN0YXR1cyA9IHRoaXMuaW5mZXJyZWRTdGF0dXM7XHJcbiAgICB9XHJcbiAgICAvL+i+uee6v+minOiJsuWPmOWMllxyXG4gICAgaWYgKHN0cm9rZUNvbG9yKSB7XHJcbiAgICAgIHRoaXMuc2V0U3Ryb2tlQ29sb3IoKTtcclxuICAgIH1cclxuICAgIC8v5ZyG546v5LiA5Lqb5bGe5oCn5Y+Y5YyWXHJcbiAgICBpZiAoZ2FwUG9zaXRpb24gfHwgc3Ryb2tlTGluZWNhcCB8fCBnYXBEZWdyZWUgfHwgdHlwZSB8fCBwZXJjZW50IHx8IHN0cm9rZUNvbG9yKSB7XHJcbiAgICAgIHRoaXMuZ2V0Q2lyY2xlUGF0aHMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHByaXZhdGUgZ2V0Q2lyY2xlUGF0aHMoKTogdm9pZCB7XHJcbiAgICBpZiAoIXRoaXMuaXNDaXJjbGVTdHlsZSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCB2YWx1ZXMgPSB0aGlzLmlzTm90TmlsKHRoaXMuc3VjY2Vzc1BlcmNlbnQpID8gW3RoaXMuc3VjY2Vzc1BlcmNlbnQhLCB0aGlzLnBlcmNlbnRdIDogW3RoaXMucGVyY2VudF07XHJcbiAgICBjb25zdCByYWRpdXMgPSA1MCAtIHRoaXMuc3Ryb2tlVyAvIDI7XHJcbiAgICBjb25zdCBnYXBQb3NpdGlvbiA9IHRoaXMuZ2FwUG9zaXRpb24gfHwgKHRoaXMudHlwZSA9PT0gJ2NpcmNsZScgPyAndG9wJyA6ICdib3R0b20nKTtcclxuICAgIGNvbnN0IGxlbiA9IE1hdGguUEkgKiAyICogcmFkaXVzO1xyXG4gICAgY29uc3QgZ2FwRGVncmVlID0gdGhpcy5nYXBEZWdyZWUgfHwgKHRoaXMudHlwZSA9PT0gJ2NpcmNsZScgPyAwIDogNzUpO1xyXG5cclxuICAgIGxldCBiZWdpblBvc2l0aW9uWCA9IDA7XHJcbiAgICBsZXQgYmVnaW5Qb3NpdGlvblkgPSAtcmFkaXVzO1xyXG4gICAgbGV0IGVuZFBvc2l0aW9uWCA9IDA7XHJcbiAgICBsZXQgZW5kUG9zaXRpb25ZID0gcmFkaXVzICogLTI7XHJcblxyXG4gICAgc3dpdGNoIChnYXBQb3NpdGlvbikge1xyXG4gICAgICBjYXNlICdsZWZ0JzpcclxuICAgICAgICBiZWdpblBvc2l0aW9uWCA9IC1yYWRpdXM7XHJcbiAgICAgICAgYmVnaW5Qb3NpdGlvblkgPSAwO1xyXG4gICAgICAgIGVuZFBvc2l0aW9uWCA9IHJhZGl1cyAqIDI7XHJcbiAgICAgICAgZW5kUG9zaXRpb25ZID0gMDtcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSAncmlnaHQnOlxyXG4gICAgICAgIGJlZ2luUG9zaXRpb25YID0gcmFkaXVzO1xyXG4gICAgICAgIGJlZ2luUG9zaXRpb25ZID0gMDtcclxuICAgICAgICBlbmRQb3NpdGlvblggPSByYWRpdXMgKiAtMjtcclxuICAgICAgICBlbmRQb3NpdGlvblkgPSAwO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlICdib3R0b20nOlxyXG4gICAgICAgIGJlZ2luUG9zaXRpb25ZID0gcmFkaXVzO1xyXG4gICAgICAgIGVuZFBvc2l0aW9uWSA9IHJhZGl1cyAqIDI7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGRlZmF1bHQ6XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5wYXRoU3RyaW5nID0gYE0gNTAsNTAgbSAke2JlZ2luUG9zaXRpb25YfSwke2JlZ2luUG9zaXRpb25ZfVxyXG4gICAgICAgYSAke3JhZGl1c30sJHtyYWRpdXN9IDAgMSAxICR7ZW5kUG9zaXRpb25YfSwkey1lbmRQb3NpdGlvbll9XHJcbiAgICAgICBhICR7cmFkaXVzfSwke3JhZGl1c30gMCAxIDEgJHstZW5kUG9zaXRpb25YfSwke2VuZFBvc2l0aW9uWX1gO1xyXG5cclxuICAgIHRoaXMudHJhaWxQYXRoU3R5bGUgPSB7XHJcbiAgICAgIHN0cm9rZURhc2hhcnJheTogYCR7bGVuIC0gZ2FwRGVncmVlfXB4ICR7bGVufXB4YCxcclxuICAgICAgc3Ryb2tlRGFzaG9mZnNldDogYC0ke2dhcERlZ3JlZSAvIDJ9cHhgLFxyXG4gICAgICB0cmFuc2l0aW9uOiAnc3Ryb2tlLWRhc2hvZmZzZXQgLjNzIGVhc2UgMHMsIHN0cm9rZS1kYXNoYXJyYXkgLjNzIGVhc2UgMHMsIHN0cm9rZSAuM3MnXHJcbiAgICB9O1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSBzdHlsZXMgZm9yIGVhY2ggcGF0aC5cclxuICAgIHRoaXMucHJvZ3Jlc3NDaXJjbGVQYXRoID0gdmFsdWVzXHJcbiAgICAgIC5tYXAoKHZhbHVlLCBpbmRleCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzU3VjY2Vzc1BlcmNlbnQgPSB2YWx1ZXMubGVuZ3RoID09PSAyICYmIGluZGV4ID09PSAwO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICBzdHJva2U6IHRoaXMuaXNHcmFkaWVudCAmJiAhaXNTdWNjZXNzUGVyY2VudCA/IGB1cmwoI2dyYWRpZW50LSR7dGhpcy5ncmFkaWVudElkfSlgIDogbnVsbCxcclxuICAgICAgICAgIHN0cm9rZVBhdGhTdHlsZToge1xyXG4gICAgICAgICAgICBzdHJva2U6ICF0aGlzLmlzR3JhZGllbnQgPyAoaXNTdWNjZXNzUGVyY2VudCA/IHN0YXR1c0NvbG9yTWFwLmdldCgnc3VjY2VzcycpIDogKHRoaXMuc3Ryb2tlQ29sb3IgYXMgc3RyaW5nKSkgOiBudWxsLFxyXG4gICAgICAgICAgICB0cmFuc2l0aW9uOiAnc3Ryb2tlLWRhc2hvZmZzZXQgLjNzIGVhc2UgMHMsIHN0cm9rZS1kYXNoYXJyYXkgLjNzIGVhc2UgMHMsIHN0cm9rZSAuM3MsIHN0cm9rZS13aWR0aCAuMDZzIGVhc2UgLjNzJyxcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaGFycmF5OiBgJHsoKHZhbHVlIHx8IDApIC8gMTAwKSAqIChsZW4gLSBnYXBEZWdyZWUpfXB4ICR7bGVufXB4YCxcclxuICAgICAgICAgICAgc3Ryb2tlRGFzaG9mZnNldDogYC0ke2dhcERlZ3JlZSAvIDJ9cHhgXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgfSlcclxuICAgICAgLnJldmVyc2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0U3Ryb2tlQ29sb3IoKTogdm9pZCB7XHJcbiAgICBjb25zdCBjb2xvciA9IHRoaXMuc3Ryb2tlQ29sb3I7XHJcbiAgICAvL+WIpOaWreaYr+WQpuS4uua4kOWPmFxyXG4gICAgY29uc3QgaXNHcmFkaWVudCA9ICh0aGlzLmlzR3JhZGllbnQgPSAhIWNvbG9yICYmIHR5cGVvZiBjb2xvciAhPT0gJ3N0cmluZycpO1xyXG4gICAgLy/nur/mgKfmuJDlj5hcclxuICAgIGlmIChpc0dyYWRpZW50ICYmICF0aGlzLmlzQ2lyY2xlU3R5bGUpIHtcclxuICAgICAgdGhpcy5saW5lR3JhZGllbnQgPSBoYW5kbGVMaW5lYXJHcmFkaWVudChjb2xvciBhcyBGUHJvZ3Jlc3NDb2xvckdyYWRpZW50KTtcclxuICAgIH1cclxuICAgIC8v5ZyG546v5riQ5Y+YXHJcbiAgICBlbHNlIGlmIChpc0dyYWRpZW50ICYmIHRoaXMuaXNDaXJjbGVTdHlsZSkge1xyXG4gICAgICB0aGlzLmNpcmNsZUdyYWRpZW50ID0gaGFuZGxlQ2lyY2xlR3JhZGllbnQodGhpcy5zdHJva2VDb2xvciBhcyBGUHJvZ3Jlc3NHcmFkaWVudFByb2dyZXNzKTtcclxuICAgIH1cclxuICAgIC8v5LiN5piv5riQ5Y+YXHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5saW5lR3JhZGllbnQgPSBudWxsO1xyXG4gICAgICB0aGlzLmNpcmNsZUdyYWRpZW50ID0gW107XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc05vdE5pbDxUPih2YWx1ZTogVCk6IHZhbHVlIGlzIE5vbk51bGxhYmxlPFQ+IHtcclxuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgIT09ICd1bmRlZmluZWQnICYmIHZhbHVlICE9PSBudWxsO1xyXG4gIH1cclxuXHJcbn1cclxuIl19