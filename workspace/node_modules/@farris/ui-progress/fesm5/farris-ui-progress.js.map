{"version":3,"file":"farris-ui-progress.js.map","sources":["ng://@farris/ui-progress/lib/progress.service.ts","ng://@farris/ui-progress/lib/progress-utils.ts","ng://@farris/ui-progress/lib/progress.component.ts","ng://@farris/ui-progress/lib/progress.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressService {\r\n\r\n  constructor() { }\r\n}\r\n","import { FProgressGradientProgress, FProgressColorGradient } from './progress-options';\r\n\r\nfunction stripPercentToNumber(percent: string): number {\r\n    return +percent.replace('%', '');\r\n}\r\n\r\nexport const sortGradient = (gradients: FProgressGradientProgress) => {\r\n    let tempArr: Array<{ key: number; value: string }> = [];\r\n    Object.keys(gradients).forEach(key => {\r\n      const value = gradients[key];\r\n      const formatKey = stripPercentToNumber(key);\r\n      if (!isNaN(formatKey)) {\r\n        tempArr.push({\r\n          key: formatKey,\r\n          value\r\n        });\r\n      }\r\n    });\r\n  \r\n    tempArr = tempArr.sort((a, b) => a.key - b.key);\r\n    return tempArr;\r\n};\r\n\r\nexport const handleCircleGradient = (strokeColor: FProgressGradientProgress): Array<{ offset: string; color: string }> => {\r\n    return sortGradient(strokeColor).map(({ key, value }) => ({ offset: `${key}%`, color: value }));\r\n};\r\n\r\nexport const handleLinearGradient = (strokeColor: FProgressColorGradient) => {\r\n    const { from = '#59a1ff', to = '#59a1ff', direction = 'to right', ...rest } = strokeColor;\r\n    if (Object.keys(rest).length !== 0) {\r\n      const sortedGradients = sortGradient(rest as FProgressGradientProgress)\r\n        .map(({ key, value }) => `${value} ${key}%`)\r\n        .join(', ');\r\n      return `linear-gradient(${direction}, ${sortedGradients})`;\r\n    }\r\n    return `linear-gradient(${direction}, ${from}, ${to})`;\r\n};","import { Component, OnInit, Input, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { FProgressType, FProgressStatusType, FProgressFormatter, FProgressGapPositionType, FProgressCirclePath, FProgressStrokeColorType, FProgressColorGradient, FProgressGradientProgress, FProgressStrokeLinecapType } from './progress-options';\r\nimport { handleLinearGradient, handleCircleGradient } from './progress-utils';\r\n\r\nconst defaultFormatter: FProgressFormatter = (p: number): string => `${p}%`;\r\nlet gradientIdSeed = 0;\r\nconst statusColorMap = new Map([\r\n  ['normal', '#388fff'],\r\n  ['exception', '#f24645'],\r\n  ['success', '#51bd78']\r\n]);\r\n\r\n@Component({\r\n  selector: 'farris-progress',\r\n  templateUrl:'./progress.component.html',\r\n  styleUrls:[\r\n    './progress.component.scss'\r\n  ]\r\n})\r\nexport class ProgressComponent implements OnInit, OnChanges{\r\n  //è¿åº¦æ¡ç±»å\r\n  @Input() type:FProgressType = 'line';\r\n  //è¿åº¦æ¡å®½åº¦\r\n  @Input() strokeWidth:number;\r\n  //è¿åº¦æ¡å°ºå¯¸ 'default' | 'small'\r\n  @Input() size = 'default';\r\n  //æ¯å¦æ¾ç¤ºè¿åº¦æ¡ä¿¡æ¯\r\n  @Input() showInfo:boolean = true;\r\n  //è¿åº¦æ¡ç¶æ é»è®¤'normal'\r\n  @Input() status:FProgressStatusType;\r\n  //è¿åº¦æ¡ä¿¡æ¯æ ¼å¼å\r\n  @Input() format?: FProgressFormatter;\r\n  //å·²å®æçåæ®µç¾åæ¯\r\n  @Input() successPercent: number;\r\n  //è¿åº¦æ¡é¢è²\r\n  @Input() strokeColor:FProgressStrokeColorType;\r\n  //åå½¢è¿åº¦æ¡å®½åº¦\r\n  @Input() width:number;\r\n  //ä»ªè¡¨çç¼ºå£ä½ç½®\r\n  @Input() gapPosition:FProgressGapPositionType = 'top';\r\n  //ä»ªè¡¨çç¼ºå£è§åº¦ é»è®¤æ¯75\r\n  @Input() gapDegree:number;//ä»ªè¡¨çä¸è§åº¦ 0-360åº¦\r\n  //è¿åº¦æ¡ç­ç¹å½¢ç¶ é»è®¤åè§ å¯éç´è§square\r\n  @Input() strokeLinecap:FProgressStrokeLinecapType = 'round';\r\n  //è¿åº¦æ¡ç¾åæ¯\r\n  _percent:number = 0;\r\n  @Input() \r\n  get percent(){\r\n    return this._percent;\r\n  }\r\n  set percent(percent){\r\n    this._percent = percent;\r\n  }\r\n  //å­å¨çç¶æ\r\n  private cachedStatus: FProgressStatusType = 'normal';\r\n  //è®¡ç®çç¶æ\r\n  private inferredStatus: FProgressStatusType = 'normal';\r\n\r\n  pathString:string;\r\n  trailPathStyle: any;\r\n  //åç¯è·¯å¾\r\n  progressCirclePath:FProgressCirclePath[] = [];\r\n  //æ¯å¦æ¸å\r\n  isGradient = false;\r\n  gradientId = gradientIdSeed++;\r\n  lineGradient: string | null = null;\r\n  circleGradient: Array<{ offset: string; color: string }>;\r\n  //è·å¾è¿åº¦æ¡ç¶æ\r\n  get progressStatus():FProgressStatusType{\r\n    return this.status || this.inferredStatus;\r\n  }\r\n  //è¿åº¦æ¡ä¿¡æ¯æ ¼å¼å\r\n  get progressFormatter(): FProgressFormatter {\r\n    return this.format || defaultFormatter;\r\n  }\r\n\r\n  //è®¡ç®è¿åº¦æ¡å®½åº¦ é»è®¤8px smallä¸º6px\r\n  get strokeW(): number {\r\n    return this.strokeWidth || (this.type === 'line' && this.size !== 'small' ? 8 : 6);\r\n  }\r\n  //å¤æ­æ¯å¦ä¸ºç¯å½¢è¿åº¦æ¡\r\n  get isCircleStyle(): boolean {\r\n    return this.type === 'circle' || this.type === 'dashboard';\r\n  }\r\n\r\n  trackByFn = (index: number) => `${index}`;\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    //åç¯å®½åº¦å¤æ­\r\n    if(this.type === 'circle' || this.type === 'dashboard'){\r\n      this.width = this.width || (this.size !== 'small' ? 80 : 50);\r\n    }\r\n\r\n    this.setStrokeColor();\r\n    this.getCirclePaths();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges): void {\r\n    const { gapPosition, strokeLinecap, strokeColor, gapDegree, type, status, percent, successPercent } = changes;\r\n    //ç¶æåå\r\n    if (status) {\r\n      this.cachedStatus = this.status || this.cachedStatus;\r\n    }\r\n    //è¿åº¦ å·²å®æçåæ®µç¾åæ¯ åå\r\n    if (percent || successPercent) {\r\n      const fillAll = parseInt(this.percent.toString(), 10) >= 100;\r\n      if (fillAll) {\r\n        if ((this.isNotNil(this.successPercent) && this.successPercent! >= 100) || this.successPercent === undefined) {\r\n          this.inferredStatus = 'success';\r\n          // this.status = this.inferredStatus;\r\n        }\r\n      } else {\r\n        this.inferredStatus = this.cachedStatus;\r\n      }\r\n      this.status = this.inferredStatus;\r\n    }\r\n    //è¾¹çº¿é¢è²åå\r\n    if (strokeColor) {\r\n      this.setStrokeColor();\r\n    }\r\n    //åç¯ä¸äºå±æ§åå\r\n    if (gapPosition || strokeLinecap || gapDegree || type || percent || strokeColor) {\r\n      this.getCirclePaths();\r\n    }\r\n  }\r\n\r\n  private getCirclePaths(): void {\r\n    if (!this.isCircleStyle) {\r\n      return;\r\n    }\r\n    const values = this.isNotNil(this.successPercent) ? [this.successPercent!, this.percent] : [this.percent];\r\n    const radius = 50 - this.strokeW / 2;\r\n    const gapPosition = this.gapPosition || (this.type === 'circle' ? 'top' : 'bottom');\r\n    const len = Math.PI * 2 * radius;\r\n    const gapDegree = this.gapDegree || (this.type === 'circle' ? 0 : 75);\r\n\r\n    let beginPositionX = 0;\r\n    let beginPositionY = -radius;\r\n    let endPositionX = 0;\r\n    let endPositionY = radius * -2;\r\n\r\n    switch (gapPosition) {\r\n      case 'left':\r\n        beginPositionX = -radius;\r\n        beginPositionY = 0;\r\n        endPositionX = radius * 2;\r\n        endPositionY = 0;\r\n        break;\r\n      case 'right':\r\n        beginPositionX = radius;\r\n        beginPositionY = 0;\r\n        endPositionX = radius * -2;\r\n        endPositionY = 0;\r\n        break;\r\n      case 'bottom':\r\n        beginPositionY = radius;\r\n        endPositionY = radius * 2;\r\n        break;\r\n      default:\r\n    }\r\n\r\n    this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}\r\n       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}\r\n       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;\r\n\r\n    this.trailPathStyle = {\r\n      strokeDasharray: `${len - gapDegree}px ${len}px`,\r\n      strokeDashoffset: `-${gapDegree / 2}px`,\r\n      transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'\r\n    };\r\n\r\n    // Calculate styles for each path.\r\n    this.progressCirclePath = values\r\n      .map((value, index) => {\r\n        const isSuccessPercent = values.length === 2 && index === 0;\r\n        return {\r\n          stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,\r\n          strokePathStyle: {\r\n            stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (this.strokeColor as string)) : null,\r\n            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',\r\n            strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,\r\n            strokeDashoffset: `-${gapDegree / 2}px`\r\n          }\r\n        };\r\n      })\r\n      .reverse();\r\n  }\r\n\r\n  private setStrokeColor(): void {\r\n    const color = this.strokeColor;\r\n    //å¤æ­æ¯å¦ä¸ºæ¸å\r\n    const isGradient = (this.isGradient = !!color && typeof color !== 'string');\r\n    //çº¿æ§æ¸å\r\n    if (isGradient && !this.isCircleStyle) {\r\n      this.lineGradient = handleLinearGradient(color as FProgressColorGradient);\r\n    }\r\n    //åç¯æ¸å\r\n    else if (isGradient && this.isCircleStyle) {\r\n      this.circleGradient = handleCircleGradient(this.strokeColor as FProgressGradientProgress);\r\n    }\r\n    //ä¸æ¯æ¸å\r\n    else {\r\n      this.lineGradient = null;\r\n      this.circleGradient = [];\r\n    }\r\n  }\r\n\r\n  isNotNil<T>(value: T): value is NonNullable<T> {\r\n    return typeof value !== 'undefined' && value !== null;\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { ProgressComponent } from './progress.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [ProgressComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [ProgressComponent]\r\n})\r\nexport class ProgressModule { }\r\n"],"names":[],"mappings":"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"}
