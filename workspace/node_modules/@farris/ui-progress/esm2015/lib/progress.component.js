/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { handleLinearGradient, handleCircleGradient } from './progress-utils';
/** @type {?} */
const defaultFormatter = (/**
 * @param {?} p
 * @return {?}
 */
(p) => `${p}%`);
const ɵ0 = defaultFormatter;
/** @type {?} */
let gradientIdSeed = 0;
/** @type {?} */
const statusColorMap = new Map([
    ['normal', '#388fff'],
    ['exception', '#f24645'],
    ['success', '#51bd78']
]);
export class ProgressComponent {
    constructor() {
        //进度条类型
        this.type = 'line';
        //进度条尺寸 'default' | 'small'
        this.size = 'default';
        //是否显示进度条信息
        this.showInfo = true;
        //仪表盘缺口位置
        this.gapPosition = 'top';
        //仪表盘上角度 0-360度
        //进度条短点形状 默认圆角 可选直角square
        this.strokeLinecap = 'round';
        //进度条百分比
        this._percent = 0;
        //存储的状态
        this.cachedStatus = 'normal';
        //计算的状态
        this.inferredStatus = 'normal';
        //圆环路径
        this.progressCirclePath = [];
        //是否渐变
        this.isGradient = false;
        this.gradientId = gradientIdSeed++;
        this.lineGradient = null;
        this.trackByFn = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => `${index}`);
    }
    /**
     * @return {?}
     */
    get percent() {
        return this._percent;
    }
    /**
     * @param {?} percent
     * @return {?}
     */
    set percent(percent) {
        this._percent = percent;
    }
    //获得进度条状态
    /**
     * @return {?}
     */
    get progressStatus() {
        return this.status || this.inferredStatus;
    }
    //进度条信息格式化
    /**
     * @return {?}
     */
    get progressFormatter() {
        return this.format || defaultFormatter;
    }
    //计算进度条宽度 默认8px small为6px
    /**
     * @return {?}
     */
    get strokeW() {
        return this.strokeWidth || (this.type === 'line' && this.size !== 'small' ? 8 : 6);
    }
    //判断是否为环形进度条
    /**
     * @return {?}
     */
    get isCircleStyle() {
        return this.type === 'circle' || this.type === 'dashboard';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //圆环宽度判断
        if (this.type === 'circle' || this.type === 'dashboard') {
            this.width = this.width || (this.size !== 'small' ? 80 : 50);
        }
        this.setStrokeColor();
        this.getCirclePaths();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        const { gapPosition, strokeLinecap, strokeColor, gapDegree, type, status, percent, successPercent } = changes;
        //状态变化
        if (status) {
            this.cachedStatus = this.status || this.cachedStatus;
        }
        //进度 已完成的分段百分比 变化
        if (percent || successPercent) {
            /** @type {?} */
            const fillAll = parseInt(this.percent.toString(), 10) >= 100;
            if (fillAll) {
                if ((this.isNotNil(this.successPercent) && (/** @type {?} */ (this.successPercent)) >= 100) || this.successPercent === undefined) {
                    this.inferredStatus = 'success';
                    // this.status = this.inferredStatus;
                }
            }
            else {
                this.inferredStatus = this.cachedStatus;
            }
            this.status = this.inferredStatus;
        }
        //边线颜色变化
        if (strokeColor) {
            this.setStrokeColor();
        }
        //圆环一些属性变化
        if (gapPosition || strokeLinecap || gapDegree || type || percent || strokeColor) {
            this.getCirclePaths();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getCirclePaths() {
        if (!this.isCircleStyle) {
            return;
        }
        /** @type {?} */
        const values = this.isNotNil(this.successPercent) ? [(/** @type {?} */ (this.successPercent)), this.percent] : [this.percent];
        /** @type {?} */
        const radius = 50 - this.strokeW / 2;
        /** @type {?} */
        const gapPosition = this.gapPosition || (this.type === 'circle' ? 'top' : 'bottom');
        /** @type {?} */
        const len = Math.PI * 2 * radius;
        /** @type {?} */
        const gapDegree = this.gapDegree || (this.type === 'circle' ? 0 : 75);
        /** @type {?} */
        let beginPositionX = 0;
        /** @type {?} */
        let beginPositionY = -radius;
        /** @type {?} */
        let endPositionX = 0;
        /** @type {?} */
        let endPositionY = radius * -2;
        switch (gapPosition) {
            case 'left':
                beginPositionX = -radius;
                beginPositionY = 0;
                endPositionX = radius * 2;
                endPositionY = 0;
                break;
            case 'right':
                beginPositionX = radius;
                beginPositionY = 0;
                endPositionX = radius * -2;
                endPositionY = 0;
                break;
            case 'bottom':
                beginPositionY = radius;
                endPositionY = radius * 2;
                break;
            default:
        }
        this.pathString = `M 50,50 m ${beginPositionX},${beginPositionY}
       a ${radius},${radius} 0 1 1 ${endPositionX},${-endPositionY}
       a ${radius},${radius} 0 1 1 ${-endPositionX},${endPositionY}`;
        this.trailPathStyle = {
            strokeDasharray: `${len - gapDegree}px ${len}px`,
            strokeDashoffset: `-${gapDegree / 2}px`,
            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
        };
        // Calculate styles for each path.
        this.progressCirclePath = values
            .map((/**
         * @param {?} value
         * @param {?} index
         * @return {?}
         */
        (value, index) => {
            /** @type {?} */
            const isSuccessPercent = values.length === 2 && index === 0;
            return {
                stroke: this.isGradient && !isSuccessPercent ? `url(#gradient-${this.gradientId})` : null,
                strokePathStyle: {
                    stroke: !this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : ((/** @type {?} */ (this.strokeColor)))) : null,
                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',
                    strokeDasharray: `${((value || 0) / 100) * (len - gapDegree)}px ${len}px`,
                    strokeDashoffset: `-${gapDegree / 2}px`
                }
            };
        }))
            .reverse();
    }
    /**
     * @private
     * @return {?}
     */
    setStrokeColor() {
        /** @type {?} */
        const color = this.strokeColor;
        //判断是否为渐变
        /** @type {?} */
        const isGradient = (this.isGradient = !!color && typeof color !== 'string');
        //线性渐变
        if (isGradient && !this.isCircleStyle) {
            this.lineGradient = handleLinearGradient((/** @type {?} */ (color)));
        }
        //圆环渐变
        else if (isGradient && this.isCircleStyle) {
            this.circleGradient = handleCircleGradient((/** @type {?} */ (this.strokeColor)));
        }
        //不是渐变
        else {
            this.lineGradient = null;
            this.circleGradient = [];
        }
    }
    /**
     * @template T
     * @param {?} value
     * @return {?}
     */
    isNotNil(value) {
        return typeof value !== 'undefined' && value !== null;
    }
}
ProgressComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-progress',
                template: "<div\r\n[ngClass]=\"'f-progress f-progress-status-' + progressStatus\"\r\n[class.f-progress-line]=\"type == 'line'\"\r\n[class.ant-progress-small]=\"size == 'small'\"\r\n[class.f-progress-show-info]=\"showInfo\"\r\n[class.f-progress-circle]=\"isCircleStyle\"\r\n>\r\n  <div *ngIf=\"type === 'line'\">\r\n      <div class=\"f-progress-outer\">\r\n          <div class=\"f-progress-inner\">\r\n              <div class = \"f-progress-bg\"\r\n              [style.width.%] = \"percent\"\r\n              [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n              [style.background]=\"!isGradient ? strokeColor : null\"\r\n              [style.background-image]=\"isGradient ? lineGradient : null\"\r\n              [style.height.px]=\"strokeW\"\r\n              >\r\n              </div>\r\n              <div\r\n                *ngIf=\"successPercent || successPercent === 0\"\r\n                class=\"f-progress-success-bg\"\r\n                [style.width.%]=\"successPercent\"\r\n                [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n                [style.height.px]=\"strokeW\"\r\n              ></div>\r\n          </div>\r\n      </div>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n  <div \r\n  class=\"f-progress-inner\"\r\n  [style.width.px]=\"this.width\"\r\n  [style.height.px]=\"this.width\"\r\n  [style.fontSize.px]=\"this.width * 0.15 + 6\"\r\n  [class.f-progress-circle-gradient]=\"isGradient\"\r\n  *ngIf=\"isCircleStyle\">\r\n      <svg class=\"f-progress-circle\" viewBox=\"0 0 100 100\">\r\n        <defs *ngIf=\"isGradient\">\r\n          <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\r\n            <stop\r\n              *ngFor=\"let i of circleGradient\"\r\n              [attr.offset]=\"i.offset\"\r\n              [attr.stop-color]=\"i.color\"\r\n            ></stop>\r\n          </linearGradient>\r\n        </defs>\r\n        <path\r\n          class=\"f-progress-circle-trail\"\r\n          stroke=\"#efefef\"\r\n          fill-opacity=\"0\"\r\n          [attr.stroke-width]=\"strokeW\"\r\n          [attr.d]=\"pathString\"\r\n          [ngStyle]=\"trailPathStyle\"\r\n        ></path>\r\n        <path\r\n          *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\r\n          class=\"f-progress-circle-path\"\r\n          fill-opacity=\"0\"\r\n          [attr.d]=\"pathString\"\r\n          [attr.stroke-linecap]=\"strokeLinecap\"\r\n          [attr.stroke]=\"p.stroke\"\r\n          [attr.stroke-width]=\"percent ? strokeW : 0\"\r\n          [ngStyle]=\"p.strokePathStyle\"\r\n        ></path>\r\n      </svg>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #progressInfoTemplate>\r\n  <span class=\"f-progress-text\" *ngIf=\"showInfo\">\r\n    <ng-container *ngIf=\"status === 'error' || (status === 'success' && !format); else formatTemplate\">\r\n        <ng-container\r\n        *ngIf=\"!isCircleStyle\"\r\n      >\r\n        <span [ngClass]=\"'f-progress-text-icon f-icon f-icon-'+ status\"></span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"isCircleStyle\">\r\n        <ng-container *ngIf=\"status === 'success'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-checkmark\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"status === 'error'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-x\"></span>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #formatTemplate>\r\n      {{ progressFormatter(percent) }}\r\n    </ng-template>\r\n  </span>\r\n</ng-template>",
                styles: [".f-progress{display:inline-block;font-size:.875rem;color:rgba(0,0,0,.65)}.f-progress.f-progress-line{position:relative;width:100%}.f-progress.f-progress-line .f-progress-text .f-progress-text-icon{font-size:1.25rem}.f-progress .f-progress-outer{display:inline-block;width:100%}.f-progress .f-progress-inner{position:relative;display:inline-block;width:100%;overflow:hidden;vertical-align:middle;background-color:#efefef;border-radius:100px}.f-progress .f-progress-bg,.f-progress .f-progress-success-bg{position:relative;border-radius:100px;-webkit-transition:.4s cubic-bezier(.08,.82,.17,1);transition:.4s cubic-bezier(.08,.82,.17,1)}.f-progress .f-progress-success-bg{position:absolute;top:0;left:0}.f-progress .f-progress-text{display:inline-block;width:1.75rem;margin-left:.5rem;color:rgba(0,0,0,.65);font-size:1em;line-height:1;white-space:nowrap;text-align:left;vertical-align:middle;word-break:normal}.f-progress-status-active .f-progress-bg::before{position:absolute;top:0;right:0;bottom:0;left:0;background:#fff;border-radius:.625rem;opacity:0;-webkit-animation:2.4s ease-in-out infinite f-progress-active;animation:2.4s ease-in-out infinite f-progress-active;content:''}.f-progress-show-info .f-progress-outer{padding-right:48px;margin-right:-48px}.f-progress.f-progress-circle .f-progress-inner{position:relative;line-height:1;background-color:transparent}.f-progress.f-progress-circle .f-progress-text{position:absolute;top:50%;left:50%;width:100%;margin:0;padding:0;color:rgba(0,0,0,.65);line-height:1;white-space:normal;text-align:center;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.f-progress.f-progress-circle .f-progress-text .f-progress-text-icon{font-size:1.3em}@-webkit-keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}@keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}"]
            }] }
];
/** @nocollapse */
ProgressComponent.ctorParameters = () => [];
ProgressComponent.propDecorators = {
    type: [{ type: Input }],
    strokeWidth: [{ type: Input }],
    size: [{ type: Input }],
    showInfo: [{ type: Input }],
    status: [{ type: Input }],
    format: [{ type: Input }],
    successPercent: [{ type: Input }],
    strokeColor: [{ type: Input }],
    width: [{ type: Input }],
    gapPosition: [{ type: Input }],
    gapDegree: [{ type: Input }],
    strokeLinecap: [{ type: Input }],
    percent: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    ProgressComponent.prototype.type;
    /** @type {?} */
    ProgressComponent.prototype.strokeWidth;
    /** @type {?} */
    ProgressComponent.prototype.size;
    /** @type {?} */
    ProgressComponent.prototype.showInfo;
    /** @type {?} */
    ProgressComponent.prototype.status;
    /** @type {?} */
    ProgressComponent.prototype.format;
    /** @type {?} */
    ProgressComponent.prototype.successPercent;
    /** @type {?} */
    ProgressComponent.prototype.strokeColor;
    /** @type {?} */
    ProgressComponent.prototype.width;
    /** @type {?} */
    ProgressComponent.prototype.gapPosition;
    /** @type {?} */
    ProgressComponent.prototype.gapDegree;
    /** @type {?} */
    ProgressComponent.prototype.strokeLinecap;
    /** @type {?} */
    ProgressComponent.prototype._percent;
    /**
     * @type {?}
     * @private
     */
    ProgressComponent.prototype.cachedStatus;
    /**
     * @type {?}
     * @private
     */
    ProgressComponent.prototype.inferredStatus;
    /** @type {?} */
    ProgressComponent.prototype.pathString;
    /** @type {?} */
    ProgressComponent.prototype.trailPathStyle;
    /** @type {?} */
    ProgressComponent.prototype.progressCirclePath;
    /** @type {?} */
    ProgressComponent.prototype.isGradient;
    /** @type {?} */
    ProgressComponent.prototype.gradientId;
    /** @type {?} */
    ProgressComponent.prototype.lineGradient;
    /** @type {?} */
    ProgressComponent.prototype.circleGradient;
    /** @type {?} */
    ProgressComponent.prototype.trackByFn;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,