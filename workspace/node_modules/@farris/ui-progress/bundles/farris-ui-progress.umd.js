(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-progress', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-progress'] = {}),global.ng.core,global.ng.common));
}(this, (function (exports,i0,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressService = /** @class */ (function () {
        function ProgressService() {
        }
        ProgressService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ProgressService.ctorParameters = function () { return []; };
        /** @nocollapse */ ProgressService.ngInjectableDef = i0.defineInjectable({ factory: function ProgressService_Factory() { return new ProgressService(); }, token: ProgressService, providedIn: "root" });
        return ProgressService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?} percent
     * @return {?}
     */
    function stripPercentToNumber(percent) {
        return +percent.replace('%', '');
    }
    /** @type {?} */
    var sortGradient = ( /**
     * @param {?} gradients
     * @return {?}
     */function (gradients) {
        /** @type {?} */
        var tempArr = [];
        Object.keys(gradients).forEach(( /**
         * @param {?} key
         * @return {?}
         */function (key) {
            /** @type {?} */
            var value = gradients[key];
            /** @type {?} */
            var formatKey = stripPercentToNumber(key);
            if (!isNaN(formatKey)) {
                tempArr.push({
                    key: formatKey,
                    value: value
                });
            }
        }));
        tempArr = tempArr.sort(( /**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */function (a, b) { return a.key - b.key; }));
        return tempArr;
    });
    /** @type {?} */
    var handleCircleGradient = ( /**
     * @param {?} strokeColor
     * @return {?}
     */function (strokeColor) {
        return sortGradient(strokeColor).map(( /**
         * @param {?} __0
         * @return {?}
         */function (_a) {
            var key = _a.key, value = _a.value;
            return ({ offset: key + "%", color: value });
        }));
    });
    /** @type {?} */
    var handleLinearGradient = ( /**
     * @param {?} strokeColor
     * @return {?}
     */function (strokeColor) {
        var _a = strokeColor.from, from = _a === void 0 ? '#59a1ff' : _a, _b = strokeColor.to, to = _b === void 0 ? '#59a1ff' : _b, _c = strokeColor.direction, direction = _c === void 0 ? 'to right' : _c, rest = __rest(strokeColor, ["from", "to", "direction"]);
        if (Object.keys(rest).length !== 0) {
            /** @type {?} */
            var sortedGradients = sortGradient(( /** @type {?} */(rest)))
                .map(( /**
         * @param {?} __0
         * @return {?}
         */function (_a) {
                var key = _a.key, value = _a.value;
                return value + " " + key + "%";
            }))
                .join(', ');
            return "linear-gradient(" + direction + ", " + sortedGradients + ")";
        }
        return "linear-gradient(" + direction + ", " + from + ", " + to + ")";
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultFormatter = ( /**
     * @param {?} p
     * @return {?}
     */function (p) { return p + "%"; });
    /** @type {?} */
    var gradientIdSeed = 0;
    /** @type {?} */
    var statusColorMap = new Map([
        ['normal', '#388fff'],
        ['exception', '#f24645'],
        ['success', '#51bd78']
    ]);
    var ProgressComponent = /** @class */ (function () {
        function ProgressComponent() {
            //进度条类型
            this.type = 'line';
            //进度条尺寸 'default' | 'small'
            this.size = 'default';
            //是否显示进度条信息
            this.showInfo = true;
            //仪表盘缺口位置
            this.gapPosition = 'top';
            //仪表盘上角度 0-360度
            //进度条短点形状 默认圆角 可选直角square
            this.strokeLinecap = 'round';
            //进度条百分比
            this._percent = 0;
            //存储的状态
            this.cachedStatus = 'normal';
            //计算的状态
            this.inferredStatus = 'normal';
            //圆环路径
            this.progressCirclePath = [];
            //是否渐变
            this.isGradient = false;
            this.gradientId = gradientIdSeed++;
            this.lineGradient = null;
            this.trackByFn = ( /**
             * @param {?} index
             * @return {?}
             */function (index) { return "" + index; });
        }
        Object.defineProperty(ProgressComponent.prototype, "percent", {
            get: /**
             * @return {?}
             */ function () {
                return this._percent;
            },
            set: /**
             * @param {?} percent
             * @return {?}
             */ function (percent) {
                this._percent = percent;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressComponent.prototype, "progressStatus", {
            //获得进度条状态
            get: 
            //获得进度条状态
            /**
             * @return {?}
             */
            function () {
                return this.status || this.inferredStatus;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressComponent.prototype, "progressFormatter", {
            //进度条信息格式化
            get: 
            //进度条信息格式化
            /**
             * @return {?}
             */
            function () {
                return this.format || defaultFormatter;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressComponent.prototype, "strokeW", {
            //计算进度条宽度 默认8px small为6px
            get: 
            //计算进度条宽度 默认8px small为6px
            /**
             * @return {?}
             */
            function () {
                return this.strokeWidth || (this.type === 'line' && this.size !== 'small' ? 8 : 6);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(ProgressComponent.prototype, "isCircleStyle", {
            //判断是否为环形进度条
            get: 
            //判断是否为环形进度条
            /**
             * @return {?}
             */
            function () {
                return this.type === 'circle' || this.type === 'dashboard';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        ProgressComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //圆环宽度判断
                if (this.type === 'circle' || this.type === 'dashboard') {
                    this.width = this.width || (this.size !== 'small' ? 80 : 50);
                }
                this.setStrokeColor();
                this.getCirclePaths();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ProgressComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var gapPosition = changes.gapPosition, strokeLinecap = changes.strokeLinecap, strokeColor = changes.strokeColor, gapDegree = changes.gapDegree, type = changes.type, status = changes.status, percent = changes.percent, successPercent = changes.successPercent;
                //状态变化
                if (status) {
                    this.cachedStatus = this.status || this.cachedStatus;
                }
                //进度 已完成的分段百分比 变化
                if (percent || successPercent) {
                    /** @type {?} */
                    var fillAll = parseInt(this.percent.toString(), 10) >= 100;
                    if (fillAll) {
                        if ((this.isNotNil(this.successPercent) && ( /** @type {?} */(this.successPercent)) >= 100) || this.successPercent === undefined) {
                            this.inferredStatus = 'success';
                            // this.status = this.inferredStatus;
                        }
                    }
                    else {
                        this.inferredStatus = this.cachedStatus;
                    }
                    this.status = this.inferredStatus;
                }
                //边线颜色变化
                if (strokeColor) {
                    this.setStrokeColor();
                }
                //圆环一些属性变化
                if (gapPosition || strokeLinecap || gapDegree || type || percent || strokeColor) {
                    this.getCirclePaths();
                }
            };
        /**
         * @private
         * @return {?}
         */
        ProgressComponent.prototype.getCirclePaths = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.isCircleStyle) {
                    return;
                }
                /** @type {?} */
                var values = this.isNotNil(this.successPercent) ? [( /** @type {?} */(this.successPercent)), this.percent] : [this.percent];
                /** @type {?} */
                var radius = 50 - this.strokeW / 2;
                /** @type {?} */
                var gapPosition = this.gapPosition || (this.type === 'circle' ? 'top' : 'bottom');
                /** @type {?} */
                var len = Math.PI * 2 * radius;
                /** @type {?} */
                var gapDegree = this.gapDegree || (this.type === 'circle' ? 0 : 75);
                /** @type {?} */
                var beginPositionX = 0;
                /** @type {?} */
                var beginPositionY = -radius;
                /** @type {?} */
                var endPositionX = 0;
                /** @type {?} */
                var endPositionY = radius * -2;
                switch (gapPosition) {
                    case 'left':
                        beginPositionX = -radius;
                        beginPositionY = 0;
                        endPositionX = radius * 2;
                        endPositionY = 0;
                        break;
                    case 'right':
                        beginPositionX = radius;
                        beginPositionY = 0;
                        endPositionX = radius * -2;
                        endPositionY = 0;
                        break;
                    case 'bottom':
                        beginPositionY = radius;
                        endPositionY = radius * 2;
                        break;
                    default:
                }
                this.pathString = "M 50,50 m " + beginPositionX + "," + beginPositionY + "\n       a " + radius + "," + radius + " 0 1 1 " + endPositionX + "," + -endPositionY + "\n       a " + radius + "," + radius + " 0 1 1 " + -endPositionX + "," + endPositionY;
                this.trailPathStyle = {
                    strokeDasharray: len - gapDegree + "px " + len + "px",
                    strokeDashoffset: "-" + gapDegree / 2 + "px",
                    transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s'
                };
                // Calculate styles for each path.
                this.progressCirclePath = values
                    .map(( /**
             * @param {?} value
             * @param {?} index
             * @return {?}
             */function (value, index) {
                    /** @type {?} */
                    var isSuccessPercent = values.length === 2 && index === 0;
                    return {
                        stroke: _this.isGradient && !isSuccessPercent ? "url(#gradient-" + _this.gradientId + ")" : null,
                        strokePathStyle: {
                            stroke: !_this.isGradient ? (isSuccessPercent ? statusColorMap.get('success') : (( /** @type {?} */(_this.strokeColor)))) : null,
                            transition: 'stroke-dashoffset .3s ease 0s, stroke-dasharray .3s ease 0s, stroke .3s, stroke-width .06s ease .3s',
                            strokeDasharray: ((value || 0) / 100) * (len - gapDegree) + "px " + len + "px",
                            strokeDashoffset: "-" + gapDegree / 2 + "px"
                        }
                    };
                }))
                    .reverse();
            };
        /**
         * @private
         * @return {?}
         */
        ProgressComponent.prototype.setStrokeColor = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var color = this.strokeColor;
                //判断是否为渐变
                /** @type {?} */
                var isGradient = (this.isGradient = !!color && typeof color !== 'string');
                //线性渐变
                if (isGradient && !this.isCircleStyle) {
                    this.lineGradient = handleLinearGradient(( /** @type {?} */(color)));
                }
                //圆环渐变
                else if (isGradient && this.isCircleStyle) {
                    this.circleGradient = handleCircleGradient(( /** @type {?} */(this.strokeColor)));
                }
                //不是渐变
                else {
                    this.lineGradient = null;
                    this.circleGradient = [];
                }
            };
        /**
         * @template T
         * @param {?} value
         * @return {?}
         */
        ProgressComponent.prototype.isNotNil = /**
         * @template T
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return typeof value !== 'undefined' && value !== null;
            };
        ProgressComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-progress',
                        template: "<div\r\n[ngClass]=\"'f-progress f-progress-status-' + progressStatus\"\r\n[class.f-progress-line]=\"type == 'line'\"\r\n[class.ant-progress-small]=\"size == 'small'\"\r\n[class.f-progress-show-info]=\"showInfo\"\r\n[class.f-progress-circle]=\"isCircleStyle\"\r\n>\r\n  <div *ngIf=\"type === 'line'\">\r\n      <div class=\"f-progress-outer\">\r\n          <div class=\"f-progress-inner\">\r\n              <div class = \"f-progress-bg\"\r\n              [style.width.%] = \"percent\"\r\n              [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n              [style.background]=\"!isGradient ? strokeColor : null\"\r\n              [style.background-image]=\"isGradient ? lineGradient : null\"\r\n              [style.height.px]=\"strokeW\"\r\n              >\r\n              </div>\r\n              <div\r\n                *ngIf=\"successPercent || successPercent === 0\"\r\n                class=\"f-progress-success-bg\"\r\n                [style.width.%]=\"successPercent\"\r\n                [style.border-radius]=\"strokeLinecap === 'round' ? '100px' : '0'\"\r\n                [style.height.px]=\"strokeW\"\r\n              ></div>\r\n          </div>\r\n      </div>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n  <div \r\n  class=\"f-progress-inner\"\r\n  [style.width.px]=\"this.width\"\r\n  [style.height.px]=\"this.width\"\r\n  [style.fontSize.px]=\"this.width * 0.15 + 6\"\r\n  [class.f-progress-circle-gradient]=\"isGradient\"\r\n  *ngIf=\"isCircleStyle\">\r\n      <svg class=\"f-progress-circle\" viewBox=\"0 0 100 100\">\r\n        <defs *ngIf=\"isGradient\">\r\n          <linearGradient [id]=\"'gradient-' + gradientId\" x1=\"100%\" y1=\"0%\" x2=\"0%\" y2=\"0%\">\r\n            <stop\r\n              *ngFor=\"let i of circleGradient\"\r\n              [attr.offset]=\"i.offset\"\r\n              [attr.stop-color]=\"i.color\"\r\n            ></stop>\r\n          </linearGradient>\r\n        </defs>\r\n        <path\r\n          class=\"f-progress-circle-trail\"\r\n          stroke=\"#efefef\"\r\n          fill-opacity=\"0\"\r\n          [attr.stroke-width]=\"strokeW\"\r\n          [attr.d]=\"pathString\"\r\n          [ngStyle]=\"trailPathStyle\"\r\n        ></path>\r\n        <path\r\n          *ngFor=\"let p of progressCirclePath; trackBy: trackByFn\"\r\n          class=\"f-progress-circle-path\"\r\n          fill-opacity=\"0\"\r\n          [attr.d]=\"pathString\"\r\n          [attr.stroke-linecap]=\"strokeLinecap\"\r\n          [attr.stroke]=\"p.stroke\"\r\n          [attr.stroke-width]=\"percent ? strokeW : 0\"\r\n          [ngStyle]=\"p.strokePathStyle\"\r\n        ></path>\r\n      </svg>\r\n      <ng-template [ngTemplateOutlet]=\"progressInfoTemplate\"></ng-template>\r\n  </div>\r\n</div>\r\n\r\n\r\n<ng-template #progressInfoTemplate>\r\n  <span class=\"f-progress-text\" *ngIf=\"showInfo\">\r\n    <ng-container *ngIf=\"status === 'error' || (status === 'success' && !format); else formatTemplate\">\r\n        <ng-container\r\n        *ngIf=\"!isCircleStyle\"\r\n      >\r\n        <span [ngClass]=\"'f-progress-text-icon f-icon f-icon-'+ status\"></span>\r\n      </ng-container>\r\n      <ng-container *ngIf=\"isCircleStyle\">\r\n        <ng-container *ngIf=\"status === 'success'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-checkmark\"></span>\r\n        </ng-container>\r\n        <ng-container *ngIf=\"status === 'error'\">\r\n          <span class=\"f-progress-text-icon f-icon f-icon-x\"></span>\r\n        </ng-container>\r\n      </ng-container>\r\n    </ng-container>\r\n    <ng-template #formatTemplate>\r\n      {{ progressFormatter(percent) }}\r\n    </ng-template>\r\n  </span>\r\n</ng-template>",
                        styles: [".f-progress{display:inline-block;font-size:.875rem;color:rgba(0,0,0,.65)}.f-progress.f-progress-line{position:relative;width:100%}.f-progress.f-progress-line .f-progress-text .f-progress-text-icon{font-size:1.25rem}.f-progress .f-progress-outer{display:inline-block;width:100%}.f-progress .f-progress-inner{position:relative;display:inline-block;width:100%;overflow:hidden;vertical-align:middle;background-color:#efefef;border-radius:100px}.f-progress .f-progress-bg,.f-progress .f-progress-success-bg{position:relative;border-radius:100px;-webkit-transition:.4s cubic-bezier(.08,.82,.17,1);transition:.4s cubic-bezier(.08,.82,.17,1)}.f-progress .f-progress-success-bg{position:absolute;top:0;left:0}.f-progress .f-progress-text{display:inline-block;width:1.75rem;margin-left:.5rem;color:rgba(0,0,0,.65);font-size:1em;line-height:1;white-space:nowrap;text-align:left;vertical-align:middle;word-break:normal}.f-progress-status-active .f-progress-bg::before{position:absolute;top:0;right:0;bottom:0;left:0;background:#fff;border-radius:.625rem;opacity:0;-webkit-animation:2.4s ease-in-out infinite f-progress-active;animation:2.4s ease-in-out infinite f-progress-active;content:''}.f-progress-show-info .f-progress-outer{padding-right:48px;margin-right:-48px}.f-progress.f-progress-circle .f-progress-inner{position:relative;line-height:1;background-color:transparent}.f-progress.f-progress-circle .f-progress-text{position:absolute;top:50%;left:50%;width:100%;margin:0;padding:0;color:rgba(0,0,0,.65);line-height:1;white-space:normal;text-align:center;-webkit-transform:translate(-50%,-50%);transform:translate(-50%,-50%)}.f-progress.f-progress-circle .f-progress-text .f-progress-text-icon{font-size:1.3em}@-webkit-keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}@keyframes f-progress-active{0%{width:0;opacity:.1}20%{width:0;opacity:.5}100%{width:100%;opacity:0}}"]
                    }] }
        ];
        /** @nocollapse */
        ProgressComponent.ctorParameters = function () { return []; };
        ProgressComponent.propDecorators = {
            type: [{ type: i0.Input }],
            strokeWidth: [{ type: i0.Input }],
            size: [{ type: i0.Input }],
            showInfo: [{ type: i0.Input }],
            status: [{ type: i0.Input }],
            format: [{ type: i0.Input }],
            successPercent: [{ type: i0.Input }],
            strokeColor: [{ type: i0.Input }],
            width: [{ type: i0.Input }],
            gapPosition: [{ type: i0.Input }],
            gapDegree: [{ type: i0.Input }],
            strokeLinecap: [{ type: i0.Input }],
            percent: [{ type: i0.Input }]
        };
        return ProgressComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ProgressModule = /** @class */ (function () {
        function ProgressModule() {
        }
        ProgressModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [ProgressComponent],
                        imports: [
                            common.CommonModule
                        ],
                        exports: [ProgressComponent]
                    },] }
        ];
        return ProgressModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ProgressService = ProgressService;
    exports.ProgressComponent = ProgressComponent;
    exports.ProgressModule = ProgressModule;
    exports.sortGradient = sortGradient;
    exports.handleCircleGradient = handleCircleGradient;
    exports.handleLinearGradient = handleLinearGradient;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-progress.umd.js.map