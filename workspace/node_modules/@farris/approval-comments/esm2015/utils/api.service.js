/**
 * @fileoverview added by tsickle
 * Generated from: utils/api.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Injectable } from '@angular/core';
export class ApiService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} param
     * @return {?}
     */
    demoapi(param) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.baseURL + '/path', param, options);
    }
    // 获取审批意见接口
    /**
     * @param {?} param
     * @return {?}
     */
    getApprovalCommentApi(param) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        // this.baseURL = '/api/dev/nocode/v1.0/micro-apps/getworkitemlogs';
        this.baseURL = '/api/no/code/runtime/v1.0/getworkitemlogs';
        return this.http.post(this.baseURL, param, options);
    }
    // 获取审批节点接口
    /**
     * @param {?} microAppId
     * @return {?}
     */
    getAuditorsByMicroAppId(microAppId) {
        /** @type {?} */
        const options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        this.baseURL = '/api/dev/nocode/v1.0/micro-apps/getauditorsbyappid/' + microAppId;
        return this.http.get(this.baseURL, options);
    }
}
ApiService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ApiService.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    ApiService.prototype.baseURL;
    /**
     * @type {?}
     * @private
     */
    ApiService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2FwcHJvdmFsLWNvbW1lbnRzLyIsInNvdXJjZXMiOlsidXRpbHMvYXBpLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJM0MsTUFBTSxPQUFPLFVBQVU7Ozs7SUFHckIsWUFDVSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3RCLENBQUM7Ozs7O0lBRUgsT0FBTyxDQUFDLEtBQUs7O2NBQ0gsT0FBTyxHQUFHO1lBQ1osT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDO2dCQUNyQixjQUFjLEVBQUUsa0JBQWtCO2FBQ3JDLENBQUM7U0FDTDtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xFLENBQUM7Ozs7OztJQUdELHFCQUFxQixDQUFDLEtBQUs7O2NBQ2pCLE9BQU8sR0FBRztZQUNaLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQztnQkFDckIsY0FBYyxFQUFFLGtCQUFrQjthQUNyQyxDQUFDO1NBQ0w7UUFDRCxvRUFBb0U7UUFDcEUsSUFBSSxDQUFDLE9BQU8sR0FBRywyQ0FBMkMsQ0FBQztRQUMzRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ3hELENBQUM7Ozs7OztJQUdELHVCQUF1QixDQUFDLFVBQWtCOztjQUNoQyxPQUFPLEdBQUc7WUFDWixPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3JCLGNBQWMsRUFBRSxrQkFBa0I7YUFDckMsQ0FBQztTQUNMO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxxREFBcUQsR0FBRyxVQUFVLENBQUM7UUFDbEYsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7OztZQXRDSixVQUFVOzs7O1lBSkYsVUFBVTs7OztJQU9qQiw2QkFBZ0I7Ozs7O0lBRWQsMEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSHR0cENsaWVudCwgSHR0cEhlYWRlcnMgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XHJcblxyXG4gIGJhc2VVUkw6IHN0cmluZztcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudFxyXG4gICkgeyB9XHJcblxyXG4gICAgZGVtb2FwaShwYXJhbSkge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmJhc2VVUkwgKyAnL3BhdGgnLCBwYXJhbSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6I635Y+W5a6h5om55oSP6KeB5o6l5Y+jXHJcbiAgICBnZXRBcHByb3ZhbENvbW1lbnRBcGkocGFyYW0pOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIHRoaXMuYmFzZVVSTCA9ICcvYXBpL2Rldi9ub2NvZGUvdjEuMC9taWNyby1hcHBzL2dldHdvcmtpdGVtbG9ncyc7XHJcbiAgICAgICAgdGhpcy5iYXNlVVJMID0gJy9hcGkvbm8vY29kZS9ydW50aW1lL3YxLjAvZ2V0d29ya2l0ZW1sb2dzJztcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodGhpcy5iYXNlVVJMLCBwYXJhbSwgb3B0aW9ucyk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g6I635Y+W5a6h5om56IqC54K55o6l5Y+jXHJcbiAgICBnZXRBdWRpdG9yc0J5TWljcm9BcHBJZChtaWNyb0FwcElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuYmFzZVVSTCA9ICcvYXBpL2Rldi9ub2NvZGUvdjEuMC9taWNyby1hcHBzL2dldGF1ZGl0b3JzYnlhcHBpZC8nICsgbWljcm9BcHBJZDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldCh0aGlzLmJhc2VVUkwsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=