(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/router'), require('@angular/core'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-locale'), require('@farris/ui-notify'), require('@farris/ui-common')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-editor', ['exports', '@angular/router', '@angular/core', '@angular/common', '@angular/forms', '@farris/ui-locale', '@farris/ui-notify', '@farris/ui-common'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-editor'] = {}),global.ng.router,global.ng.core,global.ng.common,global.ng.forms,global.uiLocale,global.uiNotify,global.uiCommon));
}(this, (function (exports,router,i0,common,forms,uiLocale,uiNotify,uiCommon) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var EditorService = /** @class */ (function () {
        function EditorService() {
        }
        EditorService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        EditorService.ctorParameters = function () { return []; };
        /** @nocollapse */ EditorService.ngInjectableDef = i0.defineInjectable({ factory: function EditorService_Factory() { return new EditorService(); }, token: EditorService, providedIn: "root" });
        return EditorService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var getTinymce = ( /**
     * @return {?}
     */function () {
        /** @type {?} */
        var w = typeof window !== 'undefined' ? (( /** @type {?} */(window))) : undefined;
        return w && w.tinymce ? w.tinymce : null;
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Events = /** @class */ (function () {
        function Events() {
            this.onBeforePaste = new i0.EventEmitter();
            this.onBlur = new i0.EventEmitter();
            this.onClick = new i0.EventEmitter();
            this.onContextMenu = new i0.EventEmitter();
            this.onCopy = new i0.EventEmitter();
            this.onCut = new i0.EventEmitter();
            this.onDblclick = new i0.EventEmitter();
            this.onDrag = new i0.EventEmitter();
            this.onDragDrop = new i0.EventEmitter();
            this.onDragEnd = new i0.EventEmitter();
            this.onDragGesture = new i0.EventEmitter();
            this.onDragOver = new i0.EventEmitter();
            this.onDrop = new i0.EventEmitter();
            this.onFocus = new i0.EventEmitter();
            this.onFocusIn = new i0.EventEmitter();
            this.onFocusOut = new i0.EventEmitter();
            this.onKeyDown = new i0.EventEmitter();
            this.onKeyPress = new i0.EventEmitter();
            this.onKeyUp = new i0.EventEmitter();
            this.onMouseDown = new i0.EventEmitter();
            this.onMouseEnter = new i0.EventEmitter();
            this.onMouseLeave = new i0.EventEmitter();
            this.onMouseMove = new i0.EventEmitter();
            this.onMouseOut = new i0.EventEmitter();
            this.onMouseOver = new i0.EventEmitter();
            this.onMouseUp = new i0.EventEmitter();
            this.onPaste = new i0.EventEmitter();
            this.onSelectionChange = new i0.EventEmitter();
            this.onActivate = new i0.EventEmitter();
            this.onAddUndo = new i0.EventEmitter();
            this.onBeforeAddUndo = new i0.EventEmitter();
            this.onBeforeExecCommand = new i0.EventEmitter();
            this.onBeforeGetContent = new i0.EventEmitter();
            this.onBeforeRenderUI = new i0.EventEmitter();
            this.onBeforeSetContent = new i0.EventEmitter();
            this.onChange = new i0.EventEmitter();
            this.onClearUndos = new i0.EventEmitter();
            this.onDeactivate = new i0.EventEmitter();
            this.onDirty = new i0.EventEmitter();
            this.onExecCommand = new i0.EventEmitter();
            this.onGetContent = new i0.EventEmitter();
            this.onHide = new i0.EventEmitter();
            this.onInit = new i0.EventEmitter();
            this.onLoadContent = new i0.EventEmitter();
            this.onNodeChange = new i0.EventEmitter();
            this.onPostProcess = new i0.EventEmitter();
            this.onPostRender = new i0.EventEmitter();
            this.onPreInit = new i0.EventEmitter();
            this.onPreProcess = new i0.EventEmitter();
            this.onProgressState = new i0.EventEmitter();
            this.onRedo = new i0.EventEmitter();
            this.onRemove = new i0.EventEmitter();
            this.onReset = new i0.EventEmitter();
            this.onSaveContent = new i0.EventEmitter();
            this.onSetAttrib = new i0.EventEmitter();
            this.onObjectResizeStart = new i0.EventEmitter();
            this.onObjectResized = new i0.EventEmitter();
            this.onObjectSelected = new i0.EventEmitter();
            this.onSetContent = new i0.EventEmitter();
            this.onShow = new i0.EventEmitter();
            this.onSubmit = new i0.EventEmitter();
            this.onUndo = new i0.EventEmitter();
            this.onVisualAid = new i0.EventEmitter();
        }
        Events.propDecorators = {
            onBeforePaste: [{ type: i0.Output }],
            onBlur: [{ type: i0.Output }],
            onClick: [{ type: i0.Output }],
            onContextMenu: [{ type: i0.Output }],
            onCopy: [{ type: i0.Output }],
            onCut: [{ type: i0.Output }],
            onDblclick: [{ type: i0.Output }],
            onDrag: [{ type: i0.Output }],
            onDragDrop: [{ type: i0.Output }],
            onDragEnd: [{ type: i0.Output }],
            onDragGesture: [{ type: i0.Output }],
            onDragOver: [{ type: i0.Output }],
            onDrop: [{ type: i0.Output }],
            onFocus: [{ type: i0.Output }],
            onFocusIn: [{ type: i0.Output }],
            onFocusOut: [{ type: i0.Output }],
            onKeyDown: [{ type: i0.Output }],
            onKeyPress: [{ type: i0.Output }],
            onKeyUp: [{ type: i0.Output }],
            onMouseDown: [{ type: i0.Output }],
            onMouseEnter: [{ type: i0.Output }],
            onMouseLeave: [{ type: i0.Output }],
            onMouseMove: [{ type: i0.Output }],
            onMouseOut: [{ type: i0.Output }],
            onMouseOver: [{ type: i0.Output }],
            onMouseUp: [{ type: i0.Output }],
            onPaste: [{ type: i0.Output }],
            onSelectionChange: [{ type: i0.Output }],
            onActivate: [{ type: i0.Output }],
            onAddUndo: [{ type: i0.Output }],
            onBeforeAddUndo: [{ type: i0.Output }],
            onBeforeExecCommand: [{ type: i0.Output }],
            onBeforeGetContent: [{ type: i0.Output }],
            onBeforeRenderUI: [{ type: i0.Output }],
            onBeforeSetContent: [{ type: i0.Output }],
            onChange: [{ type: i0.Output }],
            onClearUndos: [{ type: i0.Output }],
            onDeactivate: [{ type: i0.Output }],
            onDirty: [{ type: i0.Output }],
            onExecCommand: [{ type: i0.Output }],
            onGetContent: [{ type: i0.Output }],
            onHide: [{ type: i0.Output }],
            onInit: [{ type: i0.Output }],
            onLoadContent: [{ type: i0.Output }],
            onNodeChange: [{ type: i0.Output }],
            onPostProcess: [{ type: i0.Output }],
            onPostRender: [{ type: i0.Output }],
            onPreInit: [{ type: i0.Output }],
            onPreProcess: [{ type: i0.Output }],
            onProgressState: [{ type: i0.Output }],
            onRedo: [{ type: i0.Output }],
            onRemove: [{ type: i0.Output }],
            onReset: [{ type: i0.Output }],
            onSaveContent: [{ type: i0.Output }],
            onSetAttrib: [{ type: i0.Output }],
            onObjectResizeStart: [{ type: i0.Output }],
            onObjectResized: [{ type: i0.Output }],
            onObjectSelected: [{ type: i0.Output }],
            onSetContent: [{ type: i0.Output }],
            onShow: [{ type: i0.Output }],
            onSubmit: [{ type: i0.Output }],
            onUndo: [{ type: i0.Output }],
            onVisualAid: [{ type: i0.Output }]
        };
        return Events;
    }());
    /** @type {?} */
    var validEvents = [
        'onActivate',
        'onAddUndo',
        'onBeforeAddUndo',
        'onBeforeExecCommand',
        'onBeforeGetContent',
        'onBeforeRenderUI',
        'onBeforeSetContent',
        'onBeforePaste',
        'onBlur',
        'onChange',
        'onClearUndos',
        'onClick',
        'onContextMenu',
        'onCopy',
        'onCut',
        'onDblclick',
        'onDeactivate',
        'onDirty',
        'onDrag',
        'onDragDrop',
        'onDragEnd',
        'onDragGesture',
        'onDragOver',
        'onDrop',
        'onExecCommand',
        'onFocus',
        'onFocusIn',
        'onFocusOut',
        'onGetContent',
        'onHide',
        'onInit',
        'onKeyDown',
        'onKeyPress',
        'onKeyUp',
        'onLoadContent',
        'onMouseDown',
        'onMouseEnter',
        'onMouseLeave',
        'onMouseMove',
        'onMouseOut',
        'onMouseOver',
        'onMouseUp',
        'onNodeChange',
        'onObjectResizeStart',
        'onObjectResized',
        'onObjectSelected',
        'onPaste',
        'onPostProcess',
        'onPostRender',
        'onPreProcess',
        'onProgressState',
        'onRedo',
        'onRemove',
        'onReset',
        'onSaveContent',
        'onSelectionChange',
        'onSetAttrib',
        'onSetContent',
        'onShow',
        'onSubmit',
        'onUndo',
        'onVisualAid'
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var bindHandlers = ( /**
     * @param {?} ctx
     * @param {?} editor
     * @return {?}
     */function (ctx, editor) {
        validEvents.forEach(( /**
         * @param {?} eventName
         * @return {?}
         */function (eventName) {
            /** @type {?} */
            var eventEmitter = ctx[eventName];
            editor.on(eventName.substring(2), ( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                return ctx.ngZone.run(( /**
                 * @return {?}
                 */function () { return eventEmitter.emit({ event: event, editor: editor }); }));
            }));
        }));
    });
    /** @type {?} */
    var unique = 0;
    /** @type {?} */
    var uuid = ( /**
     * @param {?} prefix
     * @return {?}
     */function (prefix) {
        /** @type {?} */
        var date = new Date();
        /** @type {?} */
        var time = date.getTime();
        /** @type {?} */
        var random = Math.floor(Math.random() * 1000000000);
        unique++;
        return prefix + '_' + random + unique + String(time);
    });
    /** @type {?} */
    var isTextarea = ( /**
     * @param {?=} element
     * @return {?}
     */function (element) {
        return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';
    });
    /** @type {?} */
    var normalizePluginArray = ( /**
     * @param {?=} plugins
     * @return {?}
     */function (plugins) {
        if (typeof plugins === 'undefined' || plugins === '') {
            return [];
        }
        return Array.isArray(plugins) ? plugins : plugins.split(' ');
    });
    /** @type {?} */
    var mergePlugins = ( /**
     * @param {?} initPlugins
     * @param {?=} inputPlugins
     * @return {?}
     */function (initPlugins, inputPlugins) {
        return normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins));
    });
    // tslint:disable-next-line:no-empty
    /** @type {?} */
    var noop = ( /**
     * @return {?}
     */function () { });
    /** @type {?} */
    var isNullOrUndefined = ( /**
     * @param {?} value
     * @return {?}
     */function (value) { return value === null || value === undefined; });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var createState = ( /**
     * @return {?}
     */function () {
        return {
            listeners: [],
            scriptId: uuid('tiny-script'),
            scriptLoaded: false
        };
    });
    // WARNING: interface has both a type and a value, skipping emit
    /** @type {?} */
    var CreateScriptLoader = ( /**
     * @return {?}
     */function () {
        /** @type {?} */
        var state = createState();
        /** @type {?} */
        var injectScriptTag = ( /**
         * @param {?} scriptId
         * @param {?} doc
         * @param {?} url
         * @param {?} callback
         * @return {?}
         */function (scriptId, doc, url, callback) {
            /** @type {?} */
            var scriptTag = doc.createElement('script');
            scriptTag.referrerPolicy = 'origin';
            scriptTag.type = 'application/javascript';
            scriptTag.id = scriptId;
            scriptTag.src = url;
            /** @type {?} */
            var handler = ( /**
             * @return {?}
             */function () {
                scriptTag.removeEventListener('load', handler);
                callback();
            });
            scriptTag.addEventListener('load', handler);
            if (doc.head) {
                doc.head.appendChild(scriptTag);
            }
        });
        /** @type {?} */
        var load = ( /**
         * @param {?} doc
         * @param {?} url
         * @param {?} callback
         * @return {?}
         */function (doc, url, callback) {
            if (state.scriptLoaded) {
                callback();
            }
            else {
                state.listeners.push(callback);
                if (!doc.getElementById(state.scriptId)) {
                    injectScriptTag(state.scriptId, doc, url, ( /**
                     * @return {?}
                     */function () {
                        state.listeners.forEach(( /**
                         * @param {?} fn
                         * @return {?}
                         */function (fn) { return fn(); }));
                        state.scriptLoaded = true;
                    }));
                }
            }
        });
        // Only to be used by tests.
        /** @type {?} */
        var reinitialize = ( /**
         * @return {?}
         */function () {
            state = createState();
        });
        return {
            load: load,
            reinitialize: reinitialize
        };
    });
    /** @type {?} */
    var ScriptLoader = CreateScriptLoader();

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var EDITOR_LOCALES = {
        "en": {
            "farris-editor": {
                "maximgsize": "The uploaded image should not exceed {0}",
                "dropimg": "{0} has exceeded the upload limit! Maximum allowed upload {1}"
            }
        },
        "zh-CHS": {
            "farris-editor": {
                "maximgsize": "图片超出上传限制！最大允许 {0}",
                "dropimg": "{0} 超出上传限制！最大允许 {1}"
            }
        },
        "zh-CHT": {
            "farris-editor": {
                "maximgsize": "圖片超出上傳限制！最大允許 {0}",
                "dropimg": "{0} 超出上傳限制！最大允許 {1}"
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TINYMCE_SCRIPT_SRC = new i0.InjectionToken('TINYMCE_SCRIPT_SRC');
    /** @type {?} */
    var EDITOR_COMPONENT_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(( /**
         * @return {?}
         */function () { return EditorComponent; })),
        multi: true
    };
    var EditorComponent = /** @class */ (function (_super) {
        __extends(EditorComponent, _super);
        function EditorComponent(elementRef, ngZone, platformId, injector, tinymceScriptSrc) {
            var _this_1 = _super.call(this) || this;
            _this_1.platformId = platformId;
            _this_1.injector = injector;
            _this_1.tinymceScriptSrc = tinymceScriptSrc;
            _this_1.rootClass = 'farris-editor';
            _this_1.customToolbar = false;
            /**
             * 限制上传图片大小, 默认为 false不限制上传图片的大小
             */
            _this_1.limitImageSize = false;
            /**
             * 允许上传图片最大字节数，单位 kb
             */
            _this_1.maxImgSize = 500;
            _this_1.localeIds = {
                'en': 'es',
                'zh-CHS': 'zh_CN',
                'zh-CHT': 'zh_CHT'
            };
            _this_1.currentLocale = 'zh-CHS';
            _this_1.cloudChannel = '5';
            _this_1.apiKey = 'no-api-key';
            // @Input() public init: Record<string, any> | undefined;
            _this_1.editorId = '';
            _this_1.modelEvents = 'change keyup undo redo';
            _this_1.height = 100;
            /**
             * \@Deprecated 请使用 maxHeight
             */
            _this_1.autoresizeMaxHeight = 800;
            /**
             * 只读时的最大高度，默认为 800px
             */
            _this_1.maxHeight = 800;
            _this_1.minHeight = 100;
            _this_1.autoHeight = true;
            _this_1.showBorder = true;
            _this_1._fontFamilyList = ['Microsoft YaHei', 'Helvetica Neue', 'PingFang SC',
                'sans-serif', 'simsun', 'serif', 'SimHei', 'arial',
                'helvetica', 'arial black', 'avant garde', 'book antiqua', 'palatino', 'FangSong'];
            _this_1._defaultFontFamily = 'Microsoft YaHei';
            _this_1.onTouchedCallback = noop;
            _this_1.onChangeCallback = noop;
            _this_1.__WEBPAGEURL__ = '';
            _this_1.editorBodyCls = 'mce-content-body';
            _this_1.overLayService = null;
            _this_1.basePath = '';
            _this_1._elementRef = elementRef;
            _this_1.ngZone = ngZone;
            _this_1._render = _this_1.injector.get(i0.Renderer2);
            _this_1.basePath = _this_1.injector.get(uiCommon.WEBAPI_PREFIX_TOKEN, '');
            _this_1.initialise = _this_1.initialise.bind(_this_1);
            if (_this_1.injector) {
                _this_1.currentLocale = _this_1.injector.get(i0.LOCALE_ID);
                _this_1.editorService = _this_1.injector.get(EditorService);
                _this_1.localeSer = _this_1.injector.get(uiLocale.LocaleService, null);
                _this_1.notifySer = _this_1.injector.get(uiNotify.NotifyService, null);
                if (_this_1.localeSer) {
                    _this_1.localeSer.setLocaleData(EDITOR_LOCALES);
                }
                _this_1.router = _this_1.injector.get(router.Router, null);
                if (_this_1.router) {
                    _this_1.router.events.subscribe(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        if (e instanceof router.NavigationStart) {
                            if (!_this_1.__WEBPAGEURL__) {
                                _this_1.__WEBPAGEURL__ = e.url;
                            }
                        }
                        else if (e instanceof router.NavigationEnd) {
                            if (_this_1.__WEBPAGEURL__ === e.url && _this_1.editor) {
                                // console.log(this.editor);
                                _this_1.editor.destroy();
                                _this_1.initialise(!1);
                            }
                        }
                    }));
                }
            }
            _this_1.overLayService = new uiCommon.OverLayHiddenService();
            return _this_1;
        }
        Object.defineProperty(EditorComponent.prototype, "disabledClass", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "readonlyClass", {
            get: /**
             * @return {?}
             */ function () {
                return this._readOnly;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "disabled", {
            get: /**
             * @return {?}
             */ function () {
                return this._disabled;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._disabled = val;
                if (this._editor && this._editor.initialized) {
                    this._editor.setMode(val ? 'readonly' : 'design');
                    this.setDivElement(val);
                    this.editorBlured();
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "readOnly", {
            get: /**
             * @return {?}
             */ function () {
                return this._readOnly;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                this._readOnly = val;
                if (this._editor && this._editor.initialized) {
                    this._editor.setMode(val ? 'readonly' : 'design');
                    this.setDivElement(val);
                    this.editorBlured();
                    if (!val) {
                        this._editor.undoManager.clear();
                    }
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "editor", {
            get: /**
             * @return {?}
             */ function () {
                return this._editor;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "fontFamilyList", {
            get: /**
             * @return {?}
             */ function () {
                return this._fontFamilyList;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                if (val) {
                    this._fontFamilyList = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(EditorComponent.prototype, "defaultFontFamily", {
            get: /**
             * @return {?}
             */ function () {
                return this._defaultFontFamily;
            },
            set: /**
             * @param {?} val
             * @return {?}
             */ function (val) {
                if (val) {
                    this._defaultFontFamily = val;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var _this = this;
                this.init = {
                    selector: 'textarea',
                    menubar: false,
                    inline: false,
                    // statusbar: false,
                    plugins: [
                        'advlist autolink lists link image charmap print preview anchor textcolor powerpaste',
                        'searchreplace visualblocks code fullscreen',
                        'insertdatetime media table image imagetools code help nonbreaking'
                    ],
                    language: this.localeIds[this.currentLocale],
                    // toolbar定义快捷栏的操作, | 用来分隔显示
                    toolbar: 'undo redo | formatselect fontsizeselect fontselect | \
                        bold italic underline strikethrough forecolor backcolor link | \
                        alignleft aligncenter alignright alignjustify | \
                        bullist numlist outdent indent table image | removeformat',
                    min_height: 100,
                    // max_height: 400,
                    block_formats: 'Paragraph=p;Heading 1=h1;Heading 2=h2;Heading 3=h3;Heading 4=h4;Heading 5=h5;Heading 6=h6',
                    fontsize_formats: '12px 14px 16px 18px 24px 36px 48px 56px 72px',
                    font_formats: '微软雅黑=Microsoft YaHei,Helvetica Neue,PingFang SC,sans-serif;苹果苹方=PingFang SC,Microsoft YaHei,sans-serif;\
                            宋体=simsun,serif;仿宋体=FangSong,serif;黑体=SimHei,sans-serif;Arial=arial,helvetica,sans-serif;\
                            Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;',
                    images_upload_url: 'postAcceptor.php',
                    images_upload_handler: ( /**
                     * @param {?} blobInfo
                     * @param {?} success
                     * @param {?} failure
                     * @param {?} AA
                     * @return {?}
                     */function (blobInfo, success, failure, AA) {
                        if (_this.beforeUpload) {
                            _this.beforeUpload(blobInfo).subscribe(( /**
                             * @param {?} res
                             * @return {?}
                             */function (res) {
                                success(res);
                            }), ( /**
                             * @param {?} error
                             * @return {?}
                             */function (error) {
                                failure(error);
                                return;
                            }));
                        }
                        else {
                            /** @type {?} */
                            var blob = blobInfo.blob();
                            /** @type {?} */
                            var canUpload = _this.limitImageSize ? blob.size <= (_this.maxImgSize || 500) * 1024 : true;
                            if (canUpload) {
                                /** @type {?} */
                                var reader = new FileReader();
                                reader.readAsDataURL(blob);
                                reader.onload = ( /**
                                 * @return {?}
                                 */function () {
                                    // tfs 553121
                                    if (_this.trim(AA.toString()) === 'function(){}') {
                                        success(this.result);
                                    }
                                });
                            }
                            else {
                                /** @type {?} */
                                var imgIdx = _this.editor.undoManager.data.findIndex(( /**
                                 * @param {?} n
                                 * @return {?}
                                 */function (n) { return n.content.indexOf(blobInfo.blobUri()) > -1; }));
                                if (imgIdx > -1) {
                                    _this.editor.undoManager.undo();
                                    _this.editor.undoManager.data.splice(imgIdx, 1);
                                    // const delImgs = _this.editor.dom.select('img[src="'+blobInfo.blobUri()+'"]');
                                    // if (delImgs && delImgs.length) {
                                    //     delImgs.forEach(n => {
                                    //         n.remove();
                                    //     });
                                    // }
                                }
                                /** @type {?} */
                                var errMsg = "\u4E0A\u4F20\u7684\u56FE\u7247\u4E0D\u5F97\u5927\u4E8E" + _this.maxImgSize + "kb";
                                if (_this.localeSer) {
                                    /** @type {?} */
                                    var _errMsg = _this.localeSer.getValue('farris-editor.maximgsize');
                                    if (_errMsg) {
                                        _errMsg = _errMsg.replace('{0}', _this.maxImgSize + "kb");
                                        errMsg = _errMsg;
                                    }
                                }
                                if (_this.notifySer) {
                                    if (_this.trim(AA.toString()) === 'function(){}') {
                                        _this.notifySer.warning({ msg: errMsg, timeout: 2000 });
                                    }
                                    /** @type {?} */
                                    var mce_loading = document.querySelector('.mce-throbber');
                                    if (mce_loading) {
                                        mce_loading.remove();
                                    }
                                }
                                else {
                                    failure(errMsg);
                                }
                                // 不加此句，在内容为空时粘贴图片尺寸过大时，编辑器会得不到焦点
                                if (!_this.editor.getContent()) {
                                    _this.editor.setContent(' ');
                                }
                                return;
                            }
                        }
                    }),
                    branding: false,
                    readonly: false,
                    setup: null,
                    end_container_on_empty_block: true,
                    powerpaste_word_import: 'propmt',
                    powerpaste_html_import: 'propmt',
                    powerpaste_allow_local_images: true,
                    paste_data_images: true,
                    autoresize_min_height: 100,
                    autoresize_max_height: this.maxHeight,
                    autoresize_on_init: true,
                    autoresize_overflow_padding: 0,
                    nonbreaking_force_tab: true,
                    default_link_target: '_blank'
                };
            };
        /**
         * @private
         * @return {?}
         */
        EditorComponent.prototype.editorBlured = /**
         * @private
         * @return {?}
         */
            function () {
                var _this_1 = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var tinyBody = _this_1._editor.iframeElement.contentWindow.document.getElementsByClassName(_this_1.editorBodyCls);
                    if (tinyBody && tinyBody.length) {
                        tinyBody[0].blur();
                    }
                }), 100);
            };
        /**
         * @param {?} value
         * @return {?}
         */
        EditorComponent.prototype.writeValue = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this._editor && this._editor.initialized) {
                    this._editor.setContent(isNullOrUndefined(value) ? '' : value);
                    this._divElement.innerHTML = (isNullOrUndefined(value) ? '' : value);
                }
                else {
                    this.initialValue = value === null ? undefined : value;
                }
                if (!this.__WEBPAGEURL__ && this.router) {
                    this.__WEBPAGEURL__ = this.router.url;
                }
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        EditorComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onChangeCallback = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        EditorComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onTouchedCallback = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        EditorComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                if (this._editor) {
                    this._editor.setMode(isDisabled ? 'readonly' : 'design');
                }
                else if (isDisabled) {
                    this.init = __assign({}, this.init, { readonly: true });
                }
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                if (common.isPlatformBrowser(this.platformId)) {
                    this.editorId = this.editorId || uuid('tiny-angular');
                    this.inline = typeof this.inline !== 'undefined' ?
                        (typeof this.inline === 'boolean' ? this.inline : true) : this.init && this.init.inline;
                    this.createElement();
                    this.init.selector = '#' + this.editorId;
                    if (getTinymce()) {
                        this.initialise();
                    }
                    else if (this._element && this._element.ownerDocument) {
                        ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise);
                    }
                }
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.__WEBPAGEURL__ = '';
                if (this._editor) {
                    this._editor.remove();
                    this._editor = null;
                    this._divElement = null;
                }
                if (this.overLayService) {
                    this.overLayService.destory(this._elementRef.nativeElement);
                    this.overLayService = null;
                }
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.createElement = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var tagName = typeof this.tagName === 'string' ? this.tagName : 'div';
                this._element = document.createElement(this.inline ? tagName : 'textarea');
                this._element.setAttribute('class', 'd-none');
                this._divElement = document.createElement('div');
                if (this.showBorder) {
                    this._divElement.className = 'farris-editor-placeholder';
                }
                else {
                    this._divElement.className = 'farris-editor-placeholder farris-editor-placeholder-border';
                }
                if (this.maxHeight) {
                    this._render.setStyle(this._divElement, 'max-height', this.maxHeight + 'px');
                }
                if (this._element) {
                    this._element.id = this.editorId;
                    if (isTextarea(this._element)) {
                        this._element.style.visibility = 'hidden';
                    }
                    this._elementRef.nativeElement.appendChild(this._element);
                    this._elementRef.nativeElement.appendChild(this._divElement);
                }
            };
        /**
         * @param {?=} isfirstInit
         * @return {?}
         */
        EditorComponent.prototype.initialise = /**
         * @param {?=} isfirstInit
         * @return {?}
         */
            function (isfirstInit) {
                var _this_1 = this;
                if (isfirstInit === void 0) {
                    isfirstInit = true;
                }
                /** @type {?} */
                var autoResizePlugin = '';
                this.minHeight = this.minHeight || 100;
                if (this.autoHeight) {
                    autoResizePlugin = 'autoresize';
                    this.maxHeight = this.maxHeight || 800;
                }
                else {
                    this.height = this.height || this.minHeight;
                }
                /** @type {?} */
                var finalInit = __assign({}, this.init, { target: this._element, inline: this.inline, plugins: mergePlugins(this.init && this.init.plugins, [this.plugins, autoResizePlugin]), toolbar: this.init && this.init.toolbar, height: this.height, autoresize_max_height: this.maxHeight, max_height: this.maxHeight, setup: ( /**
                         * @param {?} editor
                         * @return {?}
                         */function (editor) {
                        _this_1._editor = editor;
                        editor.on('init', ( /**
                         * @param {?} e
                         * @return {?}
                         */function (e) {
                            _this_1.initEditor(editor, isfirstInit);
                            if (_this_1._readOnly || _this_1._disabled) {
                                _this_1._editor.setMode('readonly');
                            }
                            else {
                                _this_1._editor.setMode('design');
                            }
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this_1.setDivElement(_this_1._readOnly || _this_1._disabled);
                                e.target.editorCommands.execCommand("fontName", false, _this_1.defaultFontFamily);
                                // tfs Bug 506916: 高级富文本：插入表格，打开其他菜单表格工具栏仍显示
                                // tfs Bug 532085: 高级富文本：编辑数据选择图片之后，滚动鼠标，点击其他区域，图片上的工具栏不消失
                                /** @type {?} */
                                var hiddenToolbar = ( /**
                                 * @return {?}
                                 */function () {
                                    /** @type {?} */
                                    var _toolbar = document.querySelectorAll('[aria-label="Inline toolbar"]');
                                    if (_toolbar && _toolbar.length) {
                                        _toolbar.forEach(( /**
                                         * @param {?} t
                                         * @return {?}
                                         */function (t) {
                                            t.style.display = 'none';
                                        }));
                                    }
                                });
                                _this_1._elementRef.nativeElement.querySelector('.mce-container-body').addEventListener('click', hiddenToolbar);
                                _this_1.overLayService.registerMouseEvent(_this_1._elementRef.nativeElement, hiddenToolbar, { mouseDown: false, scroll: true });
                            }), 0);
                            _this_1.editor.limitImageSize = _this_1.limitImageSize;
                            _this_1.editor.maxImgSize = _this_1.maxImgSize;
                            _this_1.editor.images_drop_handler = ( /**
                             * @param {?} e
                             * @return {?}
                             */function (e) {
                                // console.log('image drop', e);
                                if (e && e.length && !document.querySelector('farris-notify-container')) {
                                    /** @type {?} */
                                    var imgNames = e.map(( /**
                                     * @param {?} n
                                     * @return {?}
                                     */function (n) { return n.name; })).join(', ');
                                    /** @type {?} */
                                    var errmsg = _this_1.localeSer.getValue('farris-editor.dropimg').replace('{0}', imgNames).replace('{1}', _this_1.maxImgSize + "kb");
                                    if (_this_1.notifySer) {
                                        _this_1.notifySer.warning(errmsg);
                                    }
                                    else {
                                        _this_1.editor.notificationManager.open({ text: errmsg, type: 'error' });
                                    }
                                }
                            });
                        }));
                        editor.on('PastePostProcess', ( /**
                         * @param {?} data
                         * @return {?}
                         */function (data) {
                            _this_1.replaceFontFamily(data.node);
                        }));
                        bindHandlers(_this_1, editor);
                        if (_this_1.init && typeof _this_1.init.setup === 'function') {
                            _this_1.init.setup(editor);
                        }
                    }) });
                if (this.customToolbar) {
                    finalInit.toolbar = uiCommon.Convert2HtmlEditorToolbars('advanced', this.toolbar);
                }
                if (isTextarea(this._element)) {
                    this._element.style.visibility = '';
                }
                this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        getTinymce().init(finalInit);
                    }), 100);
                }));
            };
        /**
         * @return {?}
         */
        EditorComponent.prototype.refresh = /**
         * @return {?}
         */
            function () {
                if (this.editor) {
                    this.editor.destroy();
                }
                this.initialise(false);
            };
        /**
         * @param {?} toolbar
         * @return {?}
         */
        EditorComponent.prototype.setToolbar = /**
         * @param {?} toolbar
         * @return {?}
         */
            function (toolbar) {
                this.toolbar = toolbar;
                this.refresh();
            };
        /**
         * @private
         * @param {?} readonly
         * @return {?}
         */
        EditorComponent.prototype.setDivElement = /**
         * @private
         * @param {?} readonly
         * @return {?}
         */
            function (readonly) {
                if (readonly) {
                    this._divElement.classList.remove('d-none');
                    this._render.removeStyle(this._divElement, 'height');
                    if (this._editor && this._editor.initialized) {
                        this._divElement.innerHTML = this._editor.getContent({ format: this.outputFormat });
                    }
                }
                else {
                    this._divElement.classList.add('d-none');
                    this._render.setStyle(this._divElement, 'height', this.height + 'px');
                    if (this._editor && this._editor.initialized) {
                        this._divElement.innerHTML = '';
                    }
                }
            };
        /**
         * @private
         * @return {?}
         */
        EditorComponent.prototype.getScriptSrc = /**
         * @private
         * @return {?}
         */
            function () {
                return isNullOrUndefined(this.tinymceScriptSrc) ?
                    "https://cdn.tiny.cloud/1/" + this.apiKey + "/tinymce/" + this.cloudChannel + "/tinymce.min.js" :
                    uiCommon.appendPerfixForUri ? uiCommon.appendPerfixForUri(this.tinymceScriptSrc, this.basePath) : this.tinymceScriptSrc;
            };
        /**
         * @private
         * @param {?} editor
         * @param {?} isfirstInit
         * @return {?}
         */
        EditorComponent.prototype.initEditor = /**
         * @private
         * @param {?} editor
         * @param {?} isfirstInit
         * @return {?}
         */
            function (editor, isfirstInit) {
                var _this_1 = this;
                editor.on('blur', ( /**
                 * @return {?}
                 */function () {
                    return _this_1.ngZone.run(( /**
                     * @return {?}
                     */function () { return _this_1.onTouchedCallback(); }));
                }));
                editor.on(this.modelEvents, ( /**
                 * @return {?}
                 */function () {
                    _this_1.ngZone.run(( /**
                     * @return {?}
                     */function () {
                        _this_1.onChangeCallback(editor.getContent({ format: _this_1.outputFormat }));
                        _this_1._divElement.innerHTML = editor.getContent({ format: _this_1.outputFormat });
                    }));
                    // console.log(editor.getContent({ format: this.outputFormat }));
                }));
                if (typeof this.initialValue === 'string' && isfirstInit) {
                    this.ngZone.run(( /**
                     * @return {?}
                     */function () {
                        editor.setContent(_this_1.initialValue);
                        _this_1._divElement.innerHTML = _this_1.initialValue;
                        _this_1.onChangeCallback(editor.getContent({ format: _this_1.outputFormat }));
                    }));
                }
            };
        /**
         * @private
         * @param {?} el
         * @return {?}
         */
        EditorComponent.prototype.replaceFontFamily = /**
         * @private
         * @param {?} el
         * @return {?}
         */
            function (el) {
                if (el.nodeName === 'IMG') {
                    return;
                }
                if (el.children && el.children.length) {
                    for (var k = 0; k < el.children.length; k++) {
                        this.replaceFontFamily(el.children[k]);
                    }
                }
                /** @type {?} */
                var ff = el.style.fontFamily;
                /** @type {?} */
                var face = el.getAttribute('face');
                if (ff) {
                    /** @type {?} */
                    var fonts = ff.split(',');
                    /** @type {?} */
                    var r = this.getFontFamilyArray(fonts);
                    el.style.fontFamily = r;
                }
                if (face) {
                    /** @type {?} */
                    var faces = face.split(',');
                    /** @type {?} */
                    var r = this.getFontFamilyArray(faces);
                    el.setAttribute('face', r);
                }
            };
        /**
         * @private
         * @param {?} fonts
         * @param {?=} zcFontArr
         * @return {?}
         */
        EditorComponent.prototype.getFontFamilyArray = /**
         * @private
         * @param {?} fonts
         * @param {?=} zcFontArr
         * @return {?}
         */
            function (fonts, zcFontArr) {
                var _this_1 = this;
                if (zcFontArr === void 0) {
                    zcFontArr = this._fontFamilyList;
                }
                /** @type {?} */
                var ss = [];
                fonts.forEach(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) {
                    if (zcFontArr.find(( /**
                     * @param {?} f
                     * @return {?}
                     */function (f) { return f === _this_1.trim(n); }))) {
                        ss.push(_this_1.trim(n));
                    }
                }));
                /** @type {?} */
                var r = ss.join(',');
                if (!r) {
                    r = this._defaultFontFamily;
                }
                return r;
            };
        /**
         * @private
         * @param {?} str
         * @return {?}
         */
        EditorComponent.prototype.trim = /**
         * @private
         * @param {?} str
         * @return {?}
         */
            function (str) {
                return str.replace(/^\s*|\s*$/g, '');
            };
        EditorComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-editor',
                        template: '<ng-template></ng-template>',
                        providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [":host{display:block}.farris-editor .mce-tinymce .mce-toolbar .mce-btn-group>div{white-space:pre-wrap}.farris-editor .mce-tinymce{box-sizing:border-box;box-shadow:none}.farris-editor .mce-panel,.farris-editor .mce-tinymce{border-color:#d8dce6}.farris-editor.farris-editor-disabled .mce-statusbar,.farris-editor.farris-editor-disabled .mce-top-part,.farris-editor.farris-editor-readonly .mce-statusbar,.farris-editor.farris-editor-readonly .mce-top-part{display:none}.farris-editor.farris-editor-disabled .mce-edit-area,.farris-editor.farris-editor-readonly .mce-edit-area{border-top:none}.farris-editor.farris-editor-disabled.farris-editor-border .mce-tinymce,.farris-editor.farris-editor-readonly.farris-editor-border .mce-tinymce{border-width:0 0 1px!important}"]
                    }] }
        ];
        /** @nocollapse */
        EditorComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.NgZone },
                { type: Object, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
                { type: i0.Injector, decorators: [{ type: i0.Optional }] },
                { type: String, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [TINYMCE_SCRIPT_SRC,] }] }
            ];
        };
        EditorComponent.propDecorators = {
            rootClass: [{ type: i0.HostBinding, args: ['class',] }],
            disabledClass: [{ type: i0.HostBinding, args: ['class.farris-editor-disabled',] }],
            readonlyClass: [{ type: i0.HostBinding, args: ['class.farris-editor-readonly',] }],
            disabled: [{ type: i0.Input }],
            customToolbar: [{ type: i0.Input }],
            limitImageSize: [{ type: i0.Input }],
            maxImgSize: [{ type: i0.Input }],
            readOnly: [{ type: i0.Input }],
            cloudChannel: [{ type: i0.Input }],
            apiKey: [{ type: i0.Input }],
            editorId: [{ type: i0.Input }],
            initialValue: [{ type: i0.Input }],
            outputFormat: [{ type: i0.Input }],
            inline: [{ type: i0.Input }],
            tagName: [{ type: i0.Input }],
            plugins: [{ type: i0.Input }],
            toolbar: [{ type: i0.Input }],
            modelEvents: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            autoresizeMaxHeight: [{ type: i0.Input }],
            maxHeight: [{ type: i0.Input }],
            minHeight: [{ type: i0.Input }],
            autoHeight: [{ type: i0.Input }],
            showBorder: [{ type: i0.Input }, { type: i0.HostBinding, args: ['class.farris-editor-border',] }],
            fontFamilyList: [{ type: i0.Input }],
            defaultFontFamily: [{ type: i0.Input }],
            beforeUpload: [{ type: i0.Input }]
        };
        return EditorComponent;
    }(Events));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    //  EditorModule.forRoot('/platform/common/web/assets/tinymce/tinymce.min.js'),
    var EditorModule = /** @class */ (function () {
        function EditorModule() {
        }
        /**
         * @param {?} path
         * @return {?}
         */
        EditorModule.forRoot = /**
         * @param {?} path
         * @return {?}
         */
            function (path) {
                return {
                    ngModule: EditorModule,
                    providers: [
                        { provide: TINYMCE_SCRIPT_SRC, useValue: path }
                    ]
                };
            };
        EditorModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [EditorComponent],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiLocale.LocaleModule.forRoot(),
                            uiNotify.NotifyModule.forRoot(),
                            uiCommon.FarrisCommonModule
                        ],
                        exports: [EditorComponent],
                        providers: [
                            EditorService
                        ]
                    },] }
        ];
        return EditorModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.EditorService = EditorService;
    exports.TINYMCE_SCRIPT_SRC = TINYMCE_SCRIPT_SRC;
    exports.EditorComponent = EditorComponent;
    exports.EditorModule = EditorModule;
    exports.Events = Events;
    exports.validEvents = validEvents;
    exports.getTinymce = getTinymce;
    exports.ScriptLoader = ScriptLoader;
    exports.bindHandlers = bindHandlers;
    exports.uuid = uuid;
    exports.isTextarea = isTextarea;
    exports.normalizePluginArray = normalizePluginArray;
    exports.mergePlugins = mergePlugins;
    exports.noop = noop;
    exports.isNullOrUndefined = isNullOrUndefined;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-editor.umd.js.map