/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { isPlatformBrowser } from '@angular/common';
import { Component, ElementRef, forwardRef, Inject, Input, NgZone, PLATFORM_ID, InjectionToken, Optional, Injector, LOCALE_ID, HostBinding, ViewEncapsulation, Renderer2 } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { getTinymce } from './TinyMCE';
import { bindHandlers, isTextarea, mergePlugins, uuid, noop, isNullOrUndefined } from './utils/Utils';
import { Events } from './Events';
import { ScriptLoader } from './utils/ScriptLoader';
import { EditorService } from './editor.service';
import { NavigationEnd, NavigationStart, Router } from '@angular/router';
import { appendPerfixForUri, Convert2HtmlEditorToolbars, OverLayHiddenService, WEBAPI_PREFIX_TOKEN } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
import { NotifyService } from '@farris/ui-notify';
import { EDITOR_LOCALES } from './utils/editor.locale';
/** @type {?} */
export const TINYMCE_SCRIPT_SRC = new InjectionToken('TINYMCE_SCRIPT_SRC');
/** @type {?} */
const EDITOR_COMPONENT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => EditorComponent)),
    multi: true
};
export class EditorComponent extends Events {
    /**
     * @param {?} elementRef
     * @param {?} ngZone
     * @param {?} platformId
     * @param {?} injector
     * @param {?=} tinymceScriptSrc
     */
    constructor(elementRef, ngZone, platformId, injector, tinymceScriptSrc) {
        super();
        this.platformId = platformId;
        this.injector = injector;
        this.tinymceScriptSrc = tinymceScriptSrc;
        this.rootClass = 'farris-editor';
        this.customToolbar = false;
        /**
         * 限制上传图片大小, 默认为 false不限制上传图片的大小
         */
        this.limitImageSize = false;
        /**
         * 允许上传图片最大字节数，单位 kb
         */
        this.maxImgSize = 500;
        this.localeIds = {
            'en': 'es',
            'zh-CHS': 'zh_CN',
            'zh-CHT': 'zh_CHT'
        };
        this.currentLocale = 'zh-CHS';
        this.cloudChannel = '5';
        this.apiKey = 'no-api-key';
        // @Input() public init: Record<string, any> | undefined;
        this.editorId = '';
        this.modelEvents = 'change keyup undo redo';
        this.height = 100;
        /**
         * \@Deprecated 请使用 maxHeight
         */
        this.autoresizeMaxHeight = 800;
        /**
         * 只读时的最大高度，默认为 800px
         */
        this.maxHeight = 800;
        this.minHeight = 100;
        this.autoHeight = true;
        this.showBorder = true;
        this._fontFamilyList = ['Microsoft YaHei', 'Helvetica Neue', 'PingFang SC',
            'sans-serif', 'simsun', 'serif', 'SimHei', 'arial',
            'helvetica', 'arial black', 'avant garde', 'book antiqua', 'palatino', 'FangSong'];
        this._defaultFontFamily = 'Microsoft YaHei';
        this.onTouchedCallback = noop;
        this.onChangeCallback = noop;
        this.__WEBPAGEURL__ = '';
        this.editorBodyCls = 'mce-content-body';
        this.overLayService = null;
        this.basePath = '';
        this._elementRef = elementRef;
        this.ngZone = ngZone;
        this._render = this.injector.get(Renderer2);
        this.basePath = this.injector.get(WEBAPI_PREFIX_TOKEN, '');
        this.initialise = this.initialise.bind(this);
        if (this.injector) {
            this.currentLocale = this.injector.get(LOCALE_ID);
            this.editorService = this.injector.get(EditorService);
            this.localeSer = this.injector.get(LocaleService, null);
            this.notifySer = this.injector.get(NotifyService, null);
            if (this.localeSer) {
                this.localeSer.setLocaleData(EDITOR_LOCALES);
            }
            this.router = this.injector.get(Router, null);
            if (this.router) {
                this.router.events.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e instanceof NavigationStart) {
                        if (!this.__WEBPAGEURL__) {
                            this.__WEBPAGEURL__ = e.url;
                        }
                    }
                    else if (e instanceof NavigationEnd) {
                        if (this.__WEBPAGEURL__ === e.url && this.editor) {
                            // console.log(this.editor);
                            this.editor.destroy();
                            this.initialise(!1);
                        }
                    }
                }));
            }
        }
        this.overLayService = new OverLayHiddenService();
    }
    /**
     * @return {?}
     */
    get disabledClass() {
        return this._disabled;
    }
    /**
     * @return {?}
     */
    get readonlyClass() {
        return this._readOnly;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set disabled(val) {
        this._disabled = val;
        if (this._editor && this._editor.initialized) {
            this._editor.setMode(val ? 'readonly' : 'design');
            this.setDivElement(val);
            this.editorBlured();
        }
    }
    /**
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set readOnly(val) {
        this._readOnly = val;
        if (this._editor && this._editor.initialized) {
            this._editor.setMode(val ? 'readonly' : 'design');
            this.setDivElement(val);
            this.editorBlured();
            if (!val) {
                this._editor.undoManager.clear();
            }
        }
    }
    /**
     * @return {?}
     */
    get readOnly() {
        return this._readOnly;
    }
    /**
     * @return {?}
     */
    get editor() {
        return this._editor;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fontFamilyList(val) {
        if (val) {
            this._fontFamilyList = val;
        }
    }
    /**
     * @return {?}
     */
    get fontFamilyList() {
        return this._fontFamilyList;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set defaultFontFamily(val) {
        if (val) {
            this._defaultFontFamily = val;
        }
    }
    /**
     * @return {?}
     */
    get defaultFontFamily() {
        return this._defaultFontFamily;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const _this = this;
        this.init = {
            selector: 'textarea',
            menubar: false,
            inline: false,
            // statusbar: false,
            plugins: [
                'advlist autolink lists link image charmap print preview anchor textcolor powerpaste',
                'searchreplace visualblocks code fullscreen',
                'insertdatetime media table image imagetools code help nonbreaking'
            ],
            language: this.localeIds[this.currentLocale],
            // toolbar定义快捷栏的操作, | 用来分隔显示
            toolbar: 'undo redo | formatselect fontsizeselect fontselect | \
                        bold italic underline strikethrough forecolor backcolor link | \
                        alignleft aligncenter alignright alignjustify | \
                        bullist numlist outdent indent table image | removeformat',
            min_height: 100,
            // max_height: 400,
            block_formats: 'Paragraph=p;Heading 1=h1;Heading 2=h2;Heading 3=h3;Heading 4=h4;Heading 5=h5;Heading 6=h6',
            fontsize_formats: '12px 14px 16px 18px 24px 36px 48px 56px 72px',
            font_formats: '微软雅黑=Microsoft YaHei,Helvetica Neue,PingFang SC,sans-serif;苹果苹方=PingFang SC,Microsoft YaHei,sans-serif;\
                            宋体=simsun,serif;仿宋体=FangSong,serif;黑体=SimHei,sans-serif;Arial=arial,helvetica,sans-serif;\
                            Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;',
            images_upload_url: 'postAcceptor.php',
            images_upload_handler: (/**
             * @param {?} blobInfo
             * @param {?} success
             * @param {?} failure
             * @param {?} AA
             * @return {?}
             */
            function (blobInfo, success, failure, AA) {
                if (_this.beforeUpload) {
                    _this.beforeUpload(blobInfo).subscribe((/**
                     * @param {?} res
                     * @return {?}
                     */
                    res => {
                        success(res);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    error => {
                        failure(error);
                        return;
                    }));
                }
                else {
                    /** @type {?} */
                    const blob = blobInfo.blob();
                    /** @type {?} */
                    const canUpload = _this.limitImageSize ? blob.size <= (_this.maxImgSize || 500) * 1024 : true;
                    if (canUpload) {
                        /** @type {?} */
                        const reader = new FileReader();
                        reader.readAsDataURL(blob);
                        reader.onload = (/**
                         * @return {?}
                         */
                        function () {
                            // tfs 553121
                            if (_this.trim(AA.toString()) === 'function(){}') {
                                success(this.result);
                            }
                        });
                    }
                    else {
                        /** @type {?} */
                        const imgIdx = _this.editor.undoManager.data.findIndex((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.content.indexOf(blobInfo.blobUri()) > -1));
                        if (imgIdx > -1) {
                            _this.editor.undoManager.undo();
                            _this.editor.undoManager.data.splice(imgIdx, 1);
                            // const delImgs = _this.editor.dom.select('img[src="'+blobInfo.blobUri()+'"]');
                            // if (delImgs && delImgs.length) {
                            //     delImgs.forEach(n => {
                            //         n.remove();
                            //     });
                            // }
                        }
                        /** @type {?} */
                        let errMsg = `上传的图片不得大于${_this.maxImgSize}kb`;
                        if (_this.localeSer) {
                            /** @type {?} */
                            let _errMsg = _this.localeSer.getValue('farris-editor.maximgsize');
                            if (_errMsg) {
                                _errMsg = _errMsg.replace('{0}', `${_this.maxImgSize}kb`);
                                errMsg = _errMsg;
                            }
                        }
                        if (_this.notifySer) {
                            if (_this.trim(AA.toString()) === 'function(){}') {
                                _this.notifySer.warning({ msg: errMsg, timeout: 2000 });
                            }
                            /** @type {?} */
                            const mce_loading = document.querySelector('.mce-throbber');
                            if (mce_loading) {
                                mce_loading.remove();
                            }
                        }
                        else {
                            failure(errMsg);
                        }
                        // 不加此句，在内容为空时粘贴图片尺寸过大时，编辑器会得不到焦点
                        if (!_this.editor.getContent()) {
                            _this.editor.setContent(' ');
                        }
                        return;
                    }
                }
            }),
            branding: false,
            readonly: false,
            setup: null,
            end_container_on_empty_block: true,
            powerpaste_word_import: 'propmt',
            powerpaste_html_import: 'propmt',
            powerpaste_allow_local_images: true,
            paste_data_images: true,
            autoresize_min_height: 100,
            autoresize_max_height: this.maxHeight,
            autoresize_on_init: true,
            autoresize_overflow_padding: 0,
            nonbreaking_force_tab: true,
            default_link_target: '_blank'
        };
    }
    /**
     * @private
     * @return {?}
     */
    editorBlured() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const tinyBody = this._editor.iframeElement.contentWindow.document.getElementsByClassName(this.editorBodyCls);
            if (tinyBody && tinyBody.length) {
                tinyBody[0].blur();
            }
        }), 100);
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this._editor && this._editor.initialized) {
            this._editor.setContent(isNullOrUndefined(value) ? '' : value);
            this._divElement.innerHTML = (isNullOrUndefined(value) ? '' : value);
        }
        else {
            this.initialValue = value === null ? undefined : value;
        }
        if (!this.__WEBPAGEURL__ && this.router) {
            this.__WEBPAGEURL__ = this.router.url;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        if (this._editor) {
            this._editor.setMode(isDisabled ? 'readonly' : 'design');
        }
        else if (isDisabled) {
            this.init = Object.assign({}, this.init, { readonly: true });
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.editorId = this.editorId || uuid('tiny-angular');
            this.inline = typeof this.inline !== 'undefined' ?
                (typeof this.inline === 'boolean' ? this.inline : true) : this.init && this.init.inline;
            this.createElement();
            this.init.selector = '#' + this.editorId;
            if (getTinymce()) {
                this.initialise();
            }
            else if (this._element && this._element.ownerDocument) {
                ScriptLoader.load(this._element.ownerDocument, this.getScriptSrc(), this.initialise);
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.__WEBPAGEURL__ = '';
        if (this._editor) {
            this._editor.remove();
            this._editor = null;
            this._divElement = null;
        }
        if (this.overLayService) {
            this.overLayService.destory(this._elementRef.nativeElement);
            this.overLayService = null;
        }
    }
    /**
     * @return {?}
     */
    createElement() {
        /** @type {?} */
        const tagName = typeof this.tagName === 'string' ? this.tagName : 'div';
        this._element = document.createElement(this.inline ? tagName : 'textarea');
        this._element.setAttribute('class', 'd-none');
        this._divElement = document.createElement('div');
        if (this.showBorder) {
            this._divElement.className = 'farris-editor-placeholder';
        }
        else {
            this._divElement.className = 'farris-editor-placeholder farris-editor-placeholder-border';
        }
        if (this.maxHeight) {
            this._render.setStyle(this._divElement, 'max-height', this.maxHeight + 'px');
        }
        if (this._element) {
            this._element.id = this.editorId;
            if (isTextarea(this._element)) {
                this._element.style.visibility = 'hidden';
            }
            this._elementRef.nativeElement.appendChild(this._element);
            this._elementRef.nativeElement.appendChild(this._divElement);
        }
    }
    /**
     * @param {?=} isfirstInit
     * @return {?}
     */
    initialise(isfirstInit = true) {
        /** @type {?} */
        let autoResizePlugin = '';
        this.minHeight = this.minHeight || 100;
        if (this.autoHeight) {
            autoResizePlugin = 'autoresize';
            this.maxHeight = this.maxHeight || 800;
        }
        else {
            this.height = this.height || this.minHeight;
        }
        /** @type {?} */
        const finalInit = Object.assign({}, this.init, { target: this._element, inline: this.inline, plugins: mergePlugins(this.init && this.init.plugins, [this.plugins, autoResizePlugin]), toolbar: this.init && this.init.toolbar, height: this.height, autoresize_max_height: this.maxHeight, max_height: this.maxHeight, setup: (/**
             * @param {?} editor
             * @return {?}
             */
            (editor) => {
                this._editor = editor;
                editor.on('init', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.initEditor(editor, isfirstInit);
                    if (this._readOnly || this._disabled) {
                        this._editor.setMode('readonly');
                    }
                    else {
                        this._editor.setMode('design');
                    }
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.setDivElement(this._readOnly || this._disabled);
                        e.target.editorCommands.execCommand("fontName", false, this.defaultFontFamily);
                        // tfs Bug 506916: 高级富文本：插入表格，打开其他菜单表格工具栏仍显示
                        // tfs Bug 532085: 高级富文本：编辑数据选择图片之后，滚动鼠标，点击其他区域，图片上的工具栏不消失
                        /** @type {?} */
                        const hiddenToolbar = (/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const _toolbar = document.querySelectorAll('[aria-label="Inline toolbar"]');
                            if (_toolbar && _toolbar.length) {
                                _toolbar.forEach((/**
                                 * @param {?} t
                                 * @return {?}
                                 */
                                (t) => {
                                    t.style.display = 'none';
                                }));
                            }
                        });
                        this._elementRef.nativeElement.querySelector('.mce-container-body').addEventListener('click', hiddenToolbar);
                        this.overLayService.registerMouseEvent(this._elementRef.nativeElement, hiddenToolbar, { mouseDown: false, scroll: true });
                    }), 0);
                    this.editor.limitImageSize = this.limitImageSize;
                    this.editor.maxImgSize = this.maxImgSize;
                    this.editor.images_drop_handler = (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        // console.log('image drop', e);
                        if (e && e.length && !document.querySelector('farris-notify-container')) {
                            /** @type {?} */
                            const imgNames = e.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.name)).join(', ');
                            /** @type {?} */
                            const errmsg = this.localeSer.getValue('farris-editor.dropimg').replace('{0}', imgNames).replace('{1}', `${this.maxImgSize}kb`);
                            if (this.notifySer) {
                                this.notifySer.warning(errmsg);
                            }
                            else {
                                this.editor.notificationManager.open({ text: errmsg, type: 'error' });
                            }
                        }
                    });
                }));
                editor.on('PastePostProcess', (/**
                 * @param {?} data
                 * @return {?}
                 */
                (data) => {
                    this.replaceFontFamily(data.node);
                }));
                bindHandlers(this, editor);
                if (this.init && typeof this.init.setup === 'function') {
                    this.init.setup(editor);
                }
            }) });
        if (this.customToolbar) {
            finalInit.toolbar = Convert2HtmlEditorToolbars('advanced', this.toolbar);
        }
        if (isTextarea(this._element)) {
            this._element.style.visibility = '';
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                getTinymce().init(finalInit);
            }), 100);
        }));
    }
    /**
     * @return {?}
     */
    refresh() {
        if (this.editor) {
            this.editor.destroy();
        }
        this.initialise(false);
    }
    /**
     * @param {?} toolbar
     * @return {?}
     */
    setToolbar(toolbar) {
        this.toolbar = toolbar;
        this.refresh();
    }
    /**
     * @private
     * @param {?} readonly
     * @return {?}
     */
    setDivElement(readonly) {
        if (readonly) {
            this._divElement.classList.remove('d-none');
            this._render.removeStyle(this._divElement, 'height');
            if (this._editor && this._editor.initialized) {
                this._divElement.innerHTML = this._editor.getContent({ format: this.outputFormat });
            }
        }
        else {
            this._divElement.classList.add('d-none');
            this._render.setStyle(this._divElement, 'height', this.height + 'px');
            if (this._editor && this._editor.initialized) {
                this._divElement.innerHTML = '';
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getScriptSrc() {
        return isNullOrUndefined(this.tinymceScriptSrc) ?
            `https://cdn.tiny.cloud/1/${this.apiKey}/tinymce/${this.cloudChannel}/tinymce.min.js` :
            appendPerfixForUri ? appendPerfixForUri(this.tinymceScriptSrc, this.basePath) : this.tinymceScriptSrc;
    }
    /**
     * @private
     * @param {?} editor
     * @param {?} isfirstInit
     * @return {?}
     */
    initEditor(editor, isfirstInit) {
        editor.on('blur', (/**
         * @return {?}
         */
        () => this.ngZone.run((/**
         * @return {?}
         */
        () => this.onTouchedCallback()))));
        editor.on(this.modelEvents, (/**
         * @return {?}
         */
        () => {
            this.ngZone.run((/**
             * @return {?}
             */
            () => {
                this.onChangeCallback(editor.getContent({ format: this.outputFormat }));
                this._divElement.innerHTML = editor.getContent({ format: this.outputFormat });
            }));
            // console.log(editor.getContent({ format: this.outputFormat }));
        }));
        if (typeof this.initialValue === 'string' && isfirstInit) {
            this.ngZone.run((/**
             * @return {?}
             */
            () => {
                editor.setContent(this.initialValue);
                this._divElement.innerHTML = this.initialValue;
                this.onChangeCallback(editor.getContent({ format: this.outputFormat }));
            }));
        }
    }
    /**
     * @private
     * @param {?} el
     * @return {?}
     */
    replaceFontFamily(el) {
        if (el.nodeName === 'IMG') {
            return;
        }
        if (el.children && el.children.length) {
            for (let k = 0; k < el.children.length; k++) {
                this.replaceFontFamily(el.children[k]);
            }
        }
        /** @type {?} */
        let ff = el.style.fontFamily;
        /** @type {?} */
        let face = el.getAttribute('face');
        if (ff) {
            /** @type {?} */
            let fonts = ff.split(',');
            /** @type {?} */
            let r = this.getFontFamilyArray(fonts);
            el.style.fontFamily = r;
        }
        if (face) {
            /** @type {?} */
            let faces = face.split(',');
            /** @type {?} */
            let r = this.getFontFamilyArray(faces);
            el.setAttribute('face', r);
        }
    }
    /**
     * @private
     * @param {?} fonts
     * @param {?=} zcFontArr
     * @return {?}
     */
    getFontFamilyArray(fonts, zcFontArr = this._fontFamilyList) {
        /** @type {?} */
        let ss = [];
        fonts.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (zcFontArr.find((/**
             * @param {?} f
             * @return {?}
             */
            f => f === this.trim(n)))) {
                ss.push(this.trim(n));
            }
        }));
        /** @type {?} */
        let r = ss.join(',');
        if (!r) {
            r = this._defaultFontFamily;
        }
        return r;
    }
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    trim(str) {
        return str.replace(/^\s*|\s*$/g, '');
    }
}
EditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-editor',
                template: '<ng-template></ng-template>',
                providers: [EDITOR_COMPONENT_VALUE_ACCESSOR],
                encapsulation: ViewEncapsulation.None,
                styles: [":host{display:block}.farris-editor .mce-tinymce .mce-toolbar .mce-btn-group>div{white-space:pre-wrap}.farris-editor .mce-tinymce{box-sizing:border-box;box-shadow:none}.farris-editor .mce-panel,.farris-editor .mce-tinymce{border-color:#d8dce6}.farris-editor.farris-editor-disabled .mce-statusbar,.farris-editor.farris-editor-disabled .mce-top-part,.farris-editor.farris-editor-readonly .mce-statusbar,.farris-editor.farris-editor-readonly .mce-top-part{display:none}.farris-editor.farris-editor-disabled .mce-edit-area,.farris-editor.farris-editor-readonly .mce-edit-area{border-top:none}.farris-editor.farris-editor-disabled.farris-editor-border .mce-tinymce,.farris-editor.farris-editor-readonly.farris-editor-border .mce-tinymce{border-width:0 0 1px!important}"]
            }] }
];
/** @nocollapse */
EditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Injector, decorators: [{ type: Optional }] },
    { type: String, decorators: [{ type: Optional }, { type: Inject, args: [TINYMCE_SCRIPT_SRC,] }] }
];
EditorComponent.propDecorators = {
    rootClass: [{ type: HostBinding, args: ['class',] }],
    disabledClass: [{ type: HostBinding, args: ['class.farris-editor-disabled',] }],
    readonlyClass: [{ type: HostBinding, args: ['class.farris-editor-readonly',] }],
    disabled: [{ type: Input }],
    customToolbar: [{ type: Input }],
    limitImageSize: [{ type: Input }],
    maxImgSize: [{ type: Input }],
    readOnly: [{ type: Input }],
    cloudChannel: [{ type: Input }],
    apiKey: [{ type: Input }],
    editorId: [{ type: Input }],
    initialValue: [{ type: Input }],
    outputFormat: [{ type: Input }],
    inline: [{ type: Input }],
    tagName: [{ type: Input }],
    plugins: [{ type: Input }],
    toolbar: [{ type: Input }],
    modelEvents: [{ type: Input }],
    height: [{ type: Input }],
    autoresizeMaxHeight: [{ type: Input }],
    maxHeight: [{ type: Input }],
    minHeight: [{ type: Input }],
    autoHeight: [{ type: Input }],
    showBorder: [{ type: Input }, { type: HostBinding, args: ['class.farris-editor-border',] }],
    fontFamilyList: [{ type: Input }],
    defaultFontFamily: [{ type: Input }],
    beforeUpload: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    EditorComponent.prototype.rootClass;
    /** @type {?} */
    EditorComponent.prototype.customToolbar;
    /**
     * 限制上传图片大小, 默认为 false不限制上传图片的大小
     * @type {?}
     */
    EditorComponent.prototype.limitImageSize;
    /**
     * 允许上传图片最大字节数，单位 kb
     * @type {?}
     */
    EditorComponent.prototype.maxImgSize;
    /** @type {?} */
    EditorComponent.prototype.ngZone;
    /** @type {?} */
    EditorComponent.prototype.localeIds;
    /** @type {?} */
    EditorComponent.prototype.currentLocale;
    /** @type {?} */
    EditorComponent.prototype.cloudChannel;
    /** @type {?} */
    EditorComponent.prototype.apiKey;
    /** @type {?} */
    EditorComponent.prototype.editorId;
    /** @type {?} */
    EditorComponent.prototype.initialValue;
    /** @type {?} */
    EditorComponent.prototype.outputFormat;
    /** @type {?} */
    EditorComponent.prototype.inline;
    /** @type {?} */
    EditorComponent.prototype.tagName;
    /** @type {?} */
    EditorComponent.prototype.plugins;
    /** @type {?} */
    EditorComponent.prototype.toolbar;
    /** @type {?} */
    EditorComponent.prototype.modelEvents;
    /** @type {?} */
    EditorComponent.prototype.height;
    /**
     * \@Deprecated 请使用 maxHeight
     * @type {?}
     */
    EditorComponent.prototype.autoresizeMaxHeight;
    /**
     * 只读时的最大高度，默认为 800px
     * @type {?}
     */
    EditorComponent.prototype.maxHeight;
    /** @type {?} */
    EditorComponent.prototype.minHeight;
    /** @type {?} */
    EditorComponent.prototype.autoHeight;
    /** @type {?} */
    EditorComponent.prototype.showBorder;
    /** @type {?} */
    EditorComponent.prototype._fontFamilyList;
    /** @type {?} */
    EditorComponent.prototype._defaultFontFamily;
    /** @type {?} */
    EditorComponent.prototype.beforeUpload;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.init;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._element;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._readOnly;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._editor;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype._divElement;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.onChangeCallback;
    /** @type {?} */
    EditorComponent.prototype.editorService;
    /** @type {?} */
    EditorComponent.prototype._render;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.__WEBPAGEURL__;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.editorBodyCls;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.basePath;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.platformId;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    EditorComponent.prototype.tinymceScriptSrc;
}
//# sourceMappingURL=data:application/json;base64,