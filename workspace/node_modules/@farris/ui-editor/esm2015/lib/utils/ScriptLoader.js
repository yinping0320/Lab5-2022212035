/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { uuid } from './Utils';
/**
 * @record
 */
export function IStateObj() { }
if (false) {
    /** @type {?} */
    IStateObj.prototype.listeners;
    /** @type {?} */
    IStateObj.prototype.scriptId;
    /** @type {?} */
    IStateObj.prototype.scriptLoaded;
}
/** @type {?} */
const createState = (/**
 * @return {?}
 */
() => {
    return {
        listeners: [],
        scriptId: uuid('tiny-script'),
        scriptLoaded: false
    };
});
const ɵ0 = createState;
// WARNING: interface has both a type and a value, skipping emit
/** @type {?} */
const CreateScriptLoader = (/**
 * @return {?}
 */
() => {
    /** @type {?} */
    let state = createState();
    /** @type {?} */
    const injectScriptTag = (/**
     * @param {?} scriptId
     * @param {?} doc
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    (scriptId, doc, url, callback) => {
        /** @type {?} */
        const scriptTag = doc.createElement('script');
        scriptTag.referrerPolicy = 'origin';
        scriptTag.type = 'application/javascript';
        scriptTag.id = scriptId;
        scriptTag.src = url;
        /** @type {?} */
        const handler = (/**
         * @return {?}
         */
        () => {
            scriptTag.removeEventListener('load', handler);
            callback();
        });
        scriptTag.addEventListener('load', handler);
        if (doc.head) {
            doc.head.appendChild(scriptTag);
        }
    });
    /** @type {?} */
    const load = (/**
     * @param {?} doc
     * @param {?} url
     * @param {?} callback
     * @return {?}
     */
    (doc, url, callback) => {
        if (state.scriptLoaded) {
            callback();
        }
        else {
            state.listeners.push(callback);
            if (!doc.getElementById(state.scriptId)) {
                injectScriptTag(state.scriptId, doc, url, (/**
                 * @return {?}
                 */
                () => {
                    state.listeners.forEach((/**
                     * @param {?} fn
                     * @return {?}
                     */
                    (fn) => fn()));
                    state.scriptLoaded = true;
                }));
            }
        }
    });
    // Only to be used by tests.
    /** @type {?} */
    const reinitialize = (/**
     * @return {?}
     */
    () => {
        state = createState();
    });
    return {
        load,
        reinitialize
    };
});
const ɵ1 = CreateScriptLoader;
/** @type {?} */
const ScriptLoader = CreateScriptLoader();
export { ScriptLoader };
export { ɵ0, ɵ1 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU2NyaXB0TG9hZGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvU2NyaXB0TG9hZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7O0FBRy9CLCtCQUlDOzs7SUFIQyw4QkFBd0I7O0lBQ3hCLDZCQUFpQjs7SUFDakIsaUNBQXNCOzs7TUFHbEIsV0FBVzs7O0FBQUcsR0FBYyxFQUFFO0lBQ2xDLE9BQU87UUFDTCxTQUFTLEVBQUUsRUFBRTtRQUNiLFFBQVEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDO1FBQzdCLFlBQVksRUFBRSxLQUFLO0tBQ3BCLENBQUM7QUFDSixDQUFDLENBQUE7Ozs7TUFPSyxrQkFBa0I7OztBQUFHLEdBQWlCLEVBQUU7O1FBQ3hDLEtBQUssR0FBYyxXQUFXLEVBQUU7O1VBRTlCLGVBQWU7Ozs7Ozs7SUFBRyxDQUFDLFFBQWdCLEVBQUUsR0FBYSxFQUFFLEdBQVcsRUFBRSxRQUFvQixFQUFFLEVBQUU7O2NBQ3ZGLFNBQVMsR0FBRyxHQUFHLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUM3QyxTQUFTLENBQUMsY0FBYyxHQUFHLFFBQVEsQ0FBQztRQUNwQyxTQUFTLENBQUMsSUFBSSxHQUFHLHdCQUF3QixDQUFDO1FBQzFDLFNBQVMsQ0FBQyxFQUFFLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLFNBQVMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDOztjQUVkLE9BQU87OztRQUFHLEdBQUcsRUFBRTtZQUNuQixTQUFTLENBQUMsbUJBQW1CLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1lBQy9DLFFBQVEsRUFBRSxDQUFDO1FBQ2IsQ0FBQyxDQUFBO1FBQ0QsU0FBUyxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztRQUM1QyxJQUFJLEdBQUcsQ0FBQyxJQUFJLEVBQUU7WUFDWixHQUFHLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNqQztJQUNILENBQUMsQ0FBQTs7VUFFSyxJQUFJOzs7Ozs7SUFBRyxDQUFDLEdBQWEsRUFBRSxHQUFXLEVBQUUsUUFBb0IsRUFBRSxFQUFFO1FBQ2hFLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRTtZQUN0QixRQUFRLEVBQUUsQ0FBQztTQUNaO2FBQU07WUFDTCxLQUFLLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMvQixJQUFJLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ3ZDLGVBQWUsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRSxHQUFHOzs7Z0JBQUUsR0FBRyxFQUFFO29CQUM3QyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7b0JBQUMsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFDLENBQUM7b0JBQ3RDLEtBQUssQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO2dCQUM1QixDQUFDLEVBQUMsQ0FBQzthQUNKO1NBQ0Y7SUFDSCxDQUFDLENBQUE7OztVQUdLLFlBQVk7OztJQUFHLEdBQUcsRUFBRTtRQUN4QixLQUFLLEdBQUcsV0FBVyxFQUFFLENBQUM7SUFDeEIsQ0FBQyxDQUFBO0lBRUQsT0FBTztRQUNMLElBQUk7UUFDSixZQUFZO0tBQ2IsQ0FBQztBQUNKLENBQUMsQ0FBQTs7O01BRUssWUFBWSxHQUFHLGtCQUFrQixFQUFFO0FBRXpDLE9BQU8sRUFDTCxZQUFZLEVBQ2IsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHV1aWQgfSBmcm9tICcuL1V0aWxzJztcclxuXHJcbmV4cG9ydCB0eXBlIGNhbGxiYWNrRm4gPSAoKSA9PiB2b2lkO1xyXG5leHBvcnQgaW50ZXJmYWNlIElTdGF0ZU9iaiB7XHJcbiAgbGlzdGVuZXJzOiBjYWxsYmFja0ZuW107XHJcbiAgc2NyaXB0SWQ6IHN0cmluZztcclxuICBzY3JpcHRMb2FkZWQ6IGJvb2xlYW47XHJcbn1cclxuXHJcbmNvbnN0IGNyZWF0ZVN0YXRlID0gKCk6IElTdGF0ZU9iaiA9PiB7XHJcbiAgcmV0dXJuIHtcclxuICAgIGxpc3RlbmVyczogW10sXHJcbiAgICBzY3JpcHRJZDogdXVpZCgndGlueS1zY3JpcHQnKSxcclxuICAgIHNjcmlwdExvYWRlZDogZmFsc2VcclxuICB9O1xyXG59O1xyXG5cclxuaW50ZXJmYWNlIFNjcmlwdExvYWRlciB7XHJcbiAgbG9hZDogKGRvYzogRG9jdW1lbnQsIHVybDogc3RyaW5nLCBjYWxsYmFjazogY2FsbGJhY2tGbikgPT4gdm9pZDtcclxuICByZWluaXRpYWxpemU6ICgpID0+IHZvaWQ7XHJcbn1cclxuXHJcbmNvbnN0IENyZWF0ZVNjcmlwdExvYWRlciA9ICgpOiBTY3JpcHRMb2FkZXIgPT4ge1xyXG4gIGxldCBzdGF0ZTogSVN0YXRlT2JqID0gY3JlYXRlU3RhdGUoKTtcclxuXHJcbiAgY29uc3QgaW5qZWN0U2NyaXB0VGFnID0gKHNjcmlwdElkOiBzdHJpbmcsIGRvYzogRG9jdW1lbnQsIHVybDogc3RyaW5nLCBjYWxsYmFjazogY2FsbGJhY2tGbikgPT4ge1xyXG4gICAgY29uc3Qgc2NyaXB0VGFnID0gZG9jLmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xyXG4gICAgc2NyaXB0VGFnLnJlZmVycmVyUG9saWN5ID0gJ29yaWdpbic7XHJcbiAgICBzY3JpcHRUYWcudHlwZSA9ICdhcHBsaWNhdGlvbi9qYXZhc2NyaXB0JztcclxuICAgIHNjcmlwdFRhZy5pZCA9IHNjcmlwdElkO1xyXG4gICAgc2NyaXB0VGFnLnNyYyA9IHVybDtcclxuXHJcbiAgICBjb25zdCBoYW5kbGVyID0gKCkgPT4ge1xyXG4gICAgICBzY3JpcHRUYWcucmVtb3ZlRXZlbnRMaXN0ZW5lcignbG9hZCcsIGhhbmRsZXIpO1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfTtcclxuICAgIHNjcmlwdFRhZy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgaGFuZGxlcik7XHJcbiAgICBpZiAoZG9jLmhlYWQpIHtcclxuICAgICAgZG9jLmhlYWQuYXBwZW5kQ2hpbGQoc2NyaXB0VGFnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBjb25zdCBsb2FkID0gKGRvYzogRG9jdW1lbnQsIHVybDogc3RyaW5nLCBjYWxsYmFjazogY2FsbGJhY2tGbikgPT4ge1xyXG4gICAgaWYgKHN0YXRlLnNjcmlwdExvYWRlZCkge1xyXG4gICAgICBjYWxsYmFjaygpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3RhdGUubGlzdGVuZXJzLnB1c2goY2FsbGJhY2spO1xyXG4gICAgICBpZiAoIWRvYy5nZXRFbGVtZW50QnlJZChzdGF0ZS5zY3JpcHRJZCkpIHtcclxuICAgICAgICBpbmplY3RTY3JpcHRUYWcoc3RhdGUuc2NyaXB0SWQsIGRvYywgdXJsLCAoKSA9PiB7XHJcbiAgICAgICAgICBzdGF0ZS5saXN0ZW5lcnMuZm9yRWFjaCgoZm4pID0+IGZuKCkpO1xyXG4gICAgICAgICAgc3RhdGUuc2NyaXB0TG9hZGVkID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIE9ubHkgdG8gYmUgdXNlZCBieSB0ZXN0cy5cclxuICBjb25zdCByZWluaXRpYWxpemUgPSAoKSA9PiB7XHJcbiAgICBzdGF0ZSA9IGNyZWF0ZVN0YXRlKCk7XHJcbiAgfTtcclxuXHJcbiAgcmV0dXJuIHtcclxuICAgIGxvYWQsXHJcbiAgICByZWluaXRpYWxpemVcclxuICB9O1xyXG59O1xyXG5cclxuY29uc3QgU2NyaXB0TG9hZGVyID0gQ3JlYXRlU2NyaXB0TG9hZGVyKCk7XHJcblxyXG5leHBvcnQge1xyXG4gIFNjcmlwdExvYWRlclxyXG59OyJdfQ==