/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { validEvents } from '../Events';
/** @type {?} */
const bindHandlers = (/**
 * @param {?} ctx
 * @param {?} editor
 * @return {?}
 */
(ctx, editor) => {
    validEvents.forEach((/**
     * @param {?} eventName
     * @return {?}
     */
    (eventName) => {
        /** @type {?} */
        const eventEmitter = ctx[eventName];
        editor.on(eventName.substring(2), (/**
         * @param {?} event
         * @return {?}
         */
        (event) => ctx.ngZone.run((/**
         * @return {?}
         */
        () => eventEmitter.emit({ event, editor })))));
    }));
});
const ɵ0 = bindHandlers;
/** @type {?} */
let unique = 0;
/** @type {?} */
const uuid = (/**
 * @param {?} prefix
 * @return {?}
 */
(prefix) => {
    /** @type {?} */
    const date = new Date();
    /** @type {?} */
    const time = date.getTime();
    /** @type {?} */
    const random = Math.floor(Math.random() * 1000000000);
    unique++;
    return prefix + '_' + random + unique + String(time);
});
const ɵ1 = uuid;
/** @type {?} */
const isTextarea = (/**
 * @param {?=} element
 * @return {?}
 */
(element) => {
    return typeof element !== 'undefined' && element.tagName.toLowerCase() === 'textarea';
});
const ɵ2 = isTextarea;
/** @type {?} */
const normalizePluginArray = (/**
 * @param {?=} plugins
 * @return {?}
 */
(plugins) => {
    if (typeof plugins === 'undefined' || plugins === '') {
        return [];
    }
    return Array.isArray(plugins) ? plugins : plugins.split(' ');
});
const ɵ3 = normalizePluginArray;
/** @type {?} */
const mergePlugins = (/**
 * @param {?} initPlugins
 * @param {?=} inputPlugins
 * @return {?}
 */
(initPlugins, inputPlugins) => normalizePluginArray(initPlugins).concat(normalizePluginArray(inputPlugins)));
const ɵ4 = mergePlugins;
// tslint:disable-next-line:no-empty
/** @type {?} */
const noop = (/**
 * @return {?}
 */
() => { });
const ɵ5 = noop;
/** @type {?} */
const isNullOrUndefined = (/**
 * @param {?} value
 * @return {?}
 */
(value) => value === null || value === undefined);
const ɵ6 = isNullOrUndefined;
export { bindHandlers, uuid, isTextarea, normalizePluginArray, mergePlugins, noop, isNullOrUndefined };
export { ɵ0, ɵ1, ɵ2, ɵ3, ɵ4, ɵ5, ɵ6 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9VdGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBRUEsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLFdBQVcsQ0FBQzs7TUFFbEMsWUFBWTs7Ozs7QUFBRyxDQUFDLEdBQW9CLEVBQUUsTUFBVyxFQUFRLEVBQUU7SUFDL0QsV0FBVyxDQUFDLE9BQU87Ozs7SUFBQyxDQUFDLFNBQVMsRUFBRSxFQUFFOztjQUMxQixZQUFZLEdBQXNCLEdBQUcsQ0FBQyxTQUFTLENBQUM7UUFDdEQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzs7OztRQUFFLENBQUMsS0FBVSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEdBQUc7OztRQUFDLEdBQUcsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBQyxFQUFDLENBQUM7SUFDaEgsQ0FBQyxFQUFDLENBQUM7QUFDTCxDQUFDLENBQUE7OztJQUVHLE1BQU0sR0FBRyxDQUFDOztNQUVSLElBQUk7Ozs7QUFBRyxDQUFDLE1BQWMsRUFBVSxFQUFFOztVQUNoQyxJQUFJLEdBQUcsSUFBSSxJQUFJLEVBQUU7O1VBQ2pCLElBQUksR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFOztVQUNyQixNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsVUFBVSxDQUFDO0lBRXJELE1BQU0sRUFBRSxDQUFDO0lBRVQsT0FBTyxNQUFNLEdBQUcsR0FBRyxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3ZELENBQUMsQ0FBQTs7O01BRUssVUFBVTs7OztBQUFHLENBQUMsT0FBaUIsRUFBa0MsRUFBRTtJQUN2RSxPQUFPLE9BQU8sT0FBTyxLQUFLLFdBQVcsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxLQUFLLFVBQVUsQ0FBQztBQUN4RixDQUFDLENBQUE7OztNQUVLLG9CQUFvQjs7OztBQUFHLENBQUMsT0FBMkIsRUFBWSxFQUFFO0lBQ3JFLElBQUksT0FBTyxPQUFPLEtBQUssV0FBVyxJQUFJLE9BQU8sS0FBSyxFQUFFLEVBQUU7UUFDcEQsT0FBTyxFQUFFLENBQUM7S0FDWDtJQUVELE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQy9ELENBQUMsQ0FBQTs7O01BRUssWUFBWTs7Ozs7QUFBRyxDQUFDLFdBQThCLEVBQUUsWUFBZ0MsRUFBRSxFQUFFLENBQ3hGLG9CQUFvQixDQUFDLFdBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBOzs7O01BR3hFLElBQUk7OztBQUE2QixHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUE7OztNQUUxQyxpQkFBaUI7Ozs7QUFBRyxDQUFDLEtBQVUsRUFBNkIsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FBQTs7QUFFMUcsT0FBTyxFQUNMLFlBQVksRUFDWixJQUFJLEVBQ0osVUFBVSxFQUNWLG9CQUFvQixFQUNwQixZQUFZLEVBQ1osSUFBSSxFQUNKLGlCQUFpQixFQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4uL2VkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyB2YWxpZEV2ZW50cyB9IGZyb20gJy4uL0V2ZW50cyc7XHJcblxyXG5jb25zdCBiaW5kSGFuZGxlcnMgPSAoY3R4OiBFZGl0b3JDb21wb25lbnQsIGVkaXRvcjogYW55KTogdm9pZCA9PiB7XHJcbiAgdmFsaWRFdmVudHMuZm9yRWFjaCgoZXZlbnROYW1lKSA9PiB7XHJcbiAgICBjb25zdCBldmVudEVtaXR0ZXI6IEV2ZW50RW1pdHRlcjxhbnk+ID0gY3R4W2V2ZW50TmFtZV07XHJcbiAgICBlZGl0b3Iub24oZXZlbnROYW1lLnN1YnN0cmluZygyKSwgKGV2ZW50OiBhbnkpID0+IGN0eC5uZ1pvbmUucnVuKCgpID0+IGV2ZW50RW1pdHRlci5lbWl0KHsgZXZlbnQsIGVkaXRvciB9KSkpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxubGV0IHVuaXF1ZSA9IDA7XHJcblxyXG5jb25zdCB1dWlkID0gKHByZWZpeDogc3RyaW5nKTogc3RyaW5nID0+IHtcclxuICBjb25zdCBkYXRlID0gbmV3IERhdGUoKTtcclxuICBjb25zdCB0aW1lID0gZGF0ZS5nZXRUaW1lKCk7XHJcbiAgY29uc3QgcmFuZG9tID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMTAwMDAwMDAwMCk7XHJcblxyXG4gIHVuaXF1ZSsrO1xyXG5cclxuICByZXR1cm4gcHJlZml4ICsgJ18nICsgcmFuZG9tICsgdW5pcXVlICsgU3RyaW5nKHRpbWUpO1xyXG59O1xyXG5cclxuY29uc3QgaXNUZXh0YXJlYSA9IChlbGVtZW50PzogRWxlbWVudCk6IGVsZW1lbnQgaXMgSFRNTFRleHRBcmVhRWxlbWVudCA9PiB7XHJcbiAgcmV0dXJuIHR5cGVvZiBlbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiBlbGVtZW50LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3RleHRhcmVhJztcclxufTtcclxuXHJcbmNvbnN0IG5vcm1hbGl6ZVBsdWdpbkFycmF5ID0gKHBsdWdpbnM/OiBzdHJpbmcgfCBzdHJpbmdbXSk6IHN0cmluZ1tdID0+IHtcclxuICBpZiAodHlwZW9mIHBsdWdpbnMgPT09ICd1bmRlZmluZWQnIHx8IHBsdWdpbnMgPT09ICcnKSB7XHJcbiAgICByZXR1cm4gW107XHJcbiAgfVxyXG5cclxuICByZXR1cm4gQXJyYXkuaXNBcnJheShwbHVnaW5zKSA/IHBsdWdpbnMgOiBwbHVnaW5zLnNwbGl0KCcgJyk7XHJcbn07XHJcblxyXG5jb25zdCBtZXJnZVBsdWdpbnMgPSAoaW5pdFBsdWdpbnM6IHN0cmluZyB8IHN0cmluZ1tdLCBpbnB1dFBsdWdpbnM/OiBzdHJpbmcgfCBzdHJpbmdbXSkgPT5cclxuICBub3JtYWxpemVQbHVnaW5BcnJheShpbml0UGx1Z2lucykuY29uY2F0KG5vcm1hbGl6ZVBsdWdpbkFycmF5KGlucHV0UGx1Z2lucykpO1xyXG5cclxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWVtcHR5XHJcbmNvbnN0IG5vb3A6ICguLi5hcmdzOiBhbnlbXSkgPT4gdm9pZCA9ICgpID0+IHsgfTtcclxuXHJcbmNvbnN0IGlzTnVsbE9yVW5kZWZpbmVkID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBudWxsIHwgdW5kZWZpbmVkID0+IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQ7XHJcblxyXG5leHBvcnQge1xyXG4gIGJpbmRIYW5kbGVycyxcclxuICB1dWlkLFxyXG4gIGlzVGV4dGFyZWEsXHJcbiAgbm9ybWFsaXplUGx1Z2luQXJyYXksXHJcbiAgbWVyZ2VQbHVnaW5zLFxyXG4gIG5vb3AsXHJcbiAgaXNOdWxsT3JVbmRlZmluZWRcclxufTtcclxuIl19