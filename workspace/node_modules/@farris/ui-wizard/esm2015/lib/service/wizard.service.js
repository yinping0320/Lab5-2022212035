/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { WizardEvent, WizardEventType } from '../model/wizard.model';
import * as i0 from "@angular/core";
export class WizardService {
    constructor() {
        this.wizardData = new Subject();
        // 保存数据
        this.wizardPagesData = {};
        //是否平铺
        this.pageFill = true;
        /**
         * 对象结构
         *  {
         *      "activeIndex":-1,
         * "stepMessages":[
         * {
         * "id":"deliverytime",
         * "title":"设置发货时间",
         * "icon":""
         * },....]
         * }
         */
        this.onlyProgressData = null;
        // 步骤条数据保持
        this.progressData = new Subject();
        // 当前向导状态
        this.wizardState = new Subject();
        // 修改向导步骤
        this.changeActiveIndex = new Subject();
        this.progressData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.onlyProgressData = data;
        }));
    }
    //存储页面是否平铺
    /**
     * @param {?} fill
     * @return {?}
     */
    updatePageFill(fill) {
        this.pageFill = fill;
    }
    /**
     * @return {?}
     */
    getPageFill() {
        return this.pageFill;
    }
    /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     * @param {?} state
     * @param {?} curPageId
     * @param {?=} stepToPageId
     * @return {?}
     */
    updateWizardState(state, curPageId, stepToPageId) {
        /** @type {?} */
        let toPageId = '';
        switch (state) {
            case WizardEventType.Prev:
                toPageId = this.getPrePageId(curPageId);
                break;
            case WizardEventType.Next:
                toPageId = this.getNextPageId(curPageId);
                break;
            case WizardEventType.StepChange:
                toPageId = stepToPageId ? stepToPageId : curPageId;
                break;
            case WizardEventType.ChangeIndex:
                toPageId = stepToPageId !== '' ? stepToPageId : curPageId;
                break;
            default:
                toPageId = curPageId;
        }
        // 只有页面变化时候，才改变
        if (!toPageId) {
            return;
        }
        this.currentPageId = toPageId;
        this.wizardState.next(new WizardEvent(state, curPageId, toPageId));
    }
    /**
     * 获取向导状态变化
     * @return {?}
     */
    getWizardState() {
        return this.wizardState;
    }
    /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @return {?}
     */
    getWizardData() {
        return this.wizardData;
    }
    /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @param {?} data
     * @return {?}
     */
    setWizardData(data) {
        this.wizardData.next(data);
    }
    /**
     * 设置某页面数据
     * @param {?} data
     * @param {?=} pageid
     * @return {?}
     */
    setPageData(data, pageid) {
        /** @type {?} */
        let id = pageid ? pageid : this.currentPageId;
        this.wizardPagesData[id] = data;
    }
    /**
     * 获取某页面数据
     * @param {?} pageid
     * @return {?}
     */
    getPageData(pageid) {
        if (this.wizardPagesData.hasOwnProperty(pageid)) {
            return this.wizardPagesData[pageid];
        }
        return {};
    }
    // /**
    //  * 场景：Wizard组件初始化步骤条数据
    //  * @param data
    //  */
    // initProgressData(data) {
    //     this.progressData.next(data);
    // }
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     * @param {?} data
     * @return {?}
     */
    updateProgressData(data) {
        this.progressData.next(data);
    }
    /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     * @return {?}
     */
    getProgressData() {
        return this.progressData;
    }
    /**
     * 存储currentpageid
     * @param {?} id
     * @return {?}
     */
    updateCurrentPageId(id) {
        this.currentPageId = id;
    }
    /**
     * @return {?}
     */
    getCurrentPageId() {
        return this.currentPageId;
    }
    /**
     * 获取上一页pageid
     * @param {?=} pageid
     * @return {?}
     */
    getPrePageId(pageid) {
        /** @type {?} */
        let id;
        id = pageid ? pageid : this.currentPageId;
        /** @type {?} */
        const pageIdIndex = this.getIndexByPageId(id);
        if (pageIdIndex <= 0) {
            return '';
        }
        /** @type {?} */
        let prePage = this.onlyProgressData.stepMessages[pageIdIndex - 1];
        return prePage['id'];
    }
    /**
     * 获取下一页
     * @param {?} pageid
     * @return {?}
     */
    getNextPageId(pageid) {
        /** @type {?} */
        const pagelen = this.onlyProgressData.stepMessages.length;
        /** @type {?} */
        const pageIdIndex = this.getIndexByPageId(pageid);
        if (pageIdIndex == pagelen - 1) {
            return '';
        }
        /** @type {?} */
        let nextPage = this.onlyProgressData.stepMessages[pageIdIndex + 1];
        return nextPage['id'];
    }
    /**
     * 是否是最后一页
     * @param {?} pageid
     * @return {?}
     */
    isLastPage(pageid) {
        /** @type {?} */
        const pagelen = this.onlyProgressData.length;
        /** @type {?} */
        let lastPage = this.onlyProgressData.stepMessages[pagelen - 1];
        return lastPage['id'] == pageid;
    }
    /**
     * 是否是当前页
     * @param {?} pageid
     * @return {?}
     */
    isCurrentPage(pageid) {
        /** @type {?} */
        const activeIndex = this.onlyProgressData.activeIndex;
        if (activeIndex < 0) {
            return false;
        }
        /** @type {?} */
        let curPage = this.onlyProgressData.stepMessages[activeIndex];
        return curPage['id'] == pageid;
    }
    /**
     * 是否是初始页
     * @param {?} pageid
     * @return {?}
     */
    isFirstPage(pageid) {
        if (this.onlyProgressData.activeIndex < 0) {
            return false;
        }
        return this.onlyProgressData.stepMessages[0]['id'] == pageid;
    }
    /**
     * 根据ID获取index
     * @param {?} pageid
     * @return {?}
     */
    getIndexByPageId(pageid) {
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            let pageIdIndex = this.onlyProgressData.stepMessages.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item['id'] == pageid) {
                    return true;
                }
                return false;
            }));
            return pageIdIndex;
        }
    }
    //20190211 服务内新增事件
    /**
     * 下一步
     * @return {?}
     */
    nextStep() {
        this.updateWizardState(WizardEventType.Next, this.currentPageId);
    }
    /**
     * 上一步
     * @return {?}
     */
    prevStep() {
        this.updateWizardState(WizardEventType.Prev, this.currentPageId);
    }
    /**
     * 结束向导
     * @return {?}
     */
    finishWizard() {
        this.updateWizardState(WizardEventType.Finish, this.currentPageId);
    }
    /**
     * 取消向导
     * @return {?}
     */
    cancelWizard() {
        this.updateWizardState(WizardEventType.Cancel, this.currentPageId);
    }
    /**
     * 修改向导显示步骤
     * @param {?} num 索引 0开始
     * @return {?}
     */
    setActiveIndex(num) {
        /** @type {?} */
        let toPageId;
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            let activeNum = (num >= 0 && num < this.onlyProgressData.stepMessages.length) ? num : 0;
            toPageId = this.onlyProgressData.stepMessages[activeNum]['id'];
        }
        this.updateWizardState(WizardEventType.ChangeIndex, this.currentPageId, toPageId);
        this.changeActiveIndex.next(num);
    }
}
WizardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WizardService.ctorParameters = () => [];
/** @nocollapse */ WizardService.ngInjectableDef = i0.defineInjectable({ factory: function WizardService_Factory() { return new WizardService(); }, token: WizardService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardData;
    /** @type {?} */
    WizardService.prototype.currentPageId;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardPagesData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.pageFill;
    /**
     * 对象结构
     *  {
     *      "activeIndex":-1,
     * "stepMessages":[
     * {
     * "id":"deliverytime",
     * "title":"设置发货时间",
     * "icon":""
     * },....]
     * }
     * @type {?}
     * @private
     */
    WizardService.prototype.onlyProgressData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.progressData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardState;
    /** @type {?} */
    WizardService.prototype.changeActiveIndex;
}
//# sourceMappingURL=data:application/json;base64,