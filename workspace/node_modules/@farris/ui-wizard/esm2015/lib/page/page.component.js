/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Output, EventEmitter } from '@angular/core';
import { WizardComponent } from '../wizard/wizard.component';
import { PageService } from '../service/page.service';
export class FarrisWizardPageComponent {
    /**
     * @param {?} wizardSet
     * @param {?} pageSer
     */
    constructor(wizardSet, pageSer) {
        this.pageSer = pageSer;
        // 唯一标记
        this.pageId = '';
        // 默认class
        this.addClass = true;
        this._active = false;
        this.pageSelected = new EventEmitter();
        this.wizardSet = wizardSet;
        this.wizardSet.addPage(this);
    }
    /**
     * @return {?}
     */
    get activeCls() {
        return this._active;
    }
    // 当前选中
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = value;
        if (this.pageId) {
            this.doAfterActive();
        }
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //console.log('FarrisWizardPageComponent——' + this.pageId);
        this.pageSer.setPageId(this.pageId);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.doAfterActive();
    }
    /**
     * @return {?}
     */
    getPageId() {
        return this.pageId;
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    setPageActive(value) {
        if (this.active !== value) {
            this.active = value;
        }
    }
    /**
     * 处理Active
     * @return {?}
     */
    doAfterActive() {
        this.pageSelected.emit({
            pageId: this.pageId,
            state: this.active
        });
        //console.log('FarrisWizardPageComponent——' + this.pageid + this.active);
        this.pageSer.activeState.next({
            pageId: this.pageId,
            state: this.active
        });
    }
}
FarrisWizardPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'wizard-page',
                template: '<ng-content></ng-content>',
                providers: [PageService],
                styles: [":host.f-component-wizard-page{display:none;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;position:relative}:host.f-component-wizard-page.active{display:-webkit-box;display:flex}"]
            }] }
];
/** @nocollapse */
FarrisWizardPageComponent.ctorParameters = () => [
    { type: WizardComponent },
    { type: PageService }
];
FarrisWizardPageComponent.propDecorators = {
    pageId: [{ type: Input }],
    addClass: [{ type: HostBinding, args: ['class.f-component-wizard-page',] }],
    activeCls: [{ type: HostBinding, args: ['class.active',] }],
    active: [{ type: Input }],
    pageSelected: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FarrisWizardPageComponent.prototype.pageId;
    /** @type {?} */
    FarrisWizardPageComponent.prototype.addClass;
    /**
     * @type {?}
     * @private
     */
    FarrisWizardPageComponent.prototype._active;
    /** @type {?} */
    FarrisWizardPageComponent.prototype.pageSelected;
    /** @type {?} */
    FarrisWizardPageComponent.prototype.wizardSet;
    /**
     * @type {?}
     * @private
     */
    FarrisWizardPageComponent.prototype.pageSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXdpemFyZC8iLCJzb3VyY2VzIjpbImxpYi9wYWdlL3BhZ2UuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBRUgsU0FBUyxFQUNULEtBQUssRUFDTCxXQUFXLEVBQ1gsTUFBTSxFQUNOLFlBQVksRUFFZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDN0QsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBT3RELE1BQU0sT0FBTyx5QkFBeUI7Ozs7O0lBd0JsQyxZQUFZLFNBQTBCLEVBQVUsT0FBb0I7UUFBcEIsWUFBTyxHQUFQLE9BQU8sQ0FBYTs7UUF0QjNELFdBQU0sR0FBRyxFQUFFLENBQUM7O1FBRXlCLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFJdEQsWUFBTyxHQUFHLEtBQUssQ0FBQztRQWFkLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFFLENBQUM7UUFJM0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakMsQ0FBQzs7OztJQXRCRCxJQUFpQyxTQUFTO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUN4QixDQUFDOzs7Ozs7SUFHRCxJQUNJLE1BQU0sQ0FBQyxLQUFjO1FBQ3JCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNiLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztTQUN4QjtJQUNMLENBQUM7Ozs7SUFDRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQzs7OztJQVNELFFBQVE7UUFDSiwyREFBMkQ7UUFDM0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Ozs7SUFDRCxrQkFBa0I7UUFDZixJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUNELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQzs7Ozs7O0lBS0QsYUFBYSxDQUFDLEtBQWM7UUFDeEIsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLEtBQUssRUFBRTtZQUN2QixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztTQUN2QjtJQUNMLENBQUM7Ozs7O0lBSUQsYUFBYTtRQUNULElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDO1lBQ25CLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDckIsQ0FBQyxDQUFDO1FBQ0gseUVBQXlFO1FBQ3pFLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQztZQUMxQixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO1NBQ3JCLENBQUMsQ0FBQztJQUNQLENBQUM7OztZQWxFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGFBQWE7Z0JBQ3ZCLFFBQVEsRUFBRSwyQkFBMkI7Z0JBRXJDLFNBQVMsRUFBRSxDQUFDLFdBQVcsQ0FBQzs7YUFDM0I7Ozs7WUFQUSxlQUFlO1lBQ2YsV0FBVzs7O3FCQVNmLEtBQUs7dUJBRUwsV0FBVyxTQUFDLCtCQUErQjt3QkFDM0MsV0FBVyxTQUFDLGNBQWM7cUJBSzFCLEtBQUs7MkJBV0wsTUFBTTs7OztJQW5CUCwyQ0FBcUI7O0lBRXJCLDZDQUE4RDs7Ozs7SUFJOUQsNENBQXdCOztJQWF4QixpREFBK0Q7O0lBRS9ELDhDQUEyQjs7Ozs7SUFDYSw0Q0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgT25Jbml0LFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBIb3N0QmluZGluZyxcclxuICAgIE91dHB1dCxcclxuICAgIEV2ZW50RW1pdHRlcixcclxuICAgIEFmdGVyQ29udGVudEluaXRcclxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2l6YXJkQ29tcG9uZW50IH0gZnJvbSAnLi4vd2l6YXJkL3dpemFyZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBQYWdlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2UvcGFnZS5zZXJ2aWNlJztcclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3dpemFyZC1wYWdlJyxcclxuICAgIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXHJcbiAgICBzdHlsZVVybHM6IFsnLi9wYWdlLmNvbXBvbmVudC5zY3NzJ10sXHJcbiAgICBwcm92aWRlcnM6IFtQYWdlU2VydmljZV1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc1dpemFyZFBhZ2VDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsQWZ0ZXJDb250ZW50SW5pdCB7XHJcbiAgICAvLyDllK/kuIDmoIforrBcclxuICAgIEBJbnB1dCgpIHBhZ2VJZCA9ICcnO1xyXG4gICAgLy8g6buY6K6kY2xhc3NcclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuZi1jb21wb25lbnQtd2l6YXJkLXBhZ2UnKSBhZGRDbGFzcyA9IHRydWU7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmFjdGl2ZScpIGdldCBhY3RpdmVDbHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FjdGl2ZTtcclxuICAgIH1cclxuICAgIHByaXZhdGUgX2FjdGl2ZSA9IGZhbHNlO1xyXG4gICAgLy8g5b2T5YmN6YCJ5LitXHJcbiAgICBASW5wdXQoKVxyXG4gICAgc2V0IGFjdGl2ZSh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgICAgIHRoaXMuX2FjdGl2ZSA9IHZhbHVlO1xyXG4gICAgICAgIGlmICh0aGlzLnBhZ2VJZCkge1xyXG4gICAgICAgICAgICB0aGlzLmRvQWZ0ZXJBY3RpdmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgYWN0aXZlKCk6IGJvb2xlYW4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9hY3RpdmU7XHJcbiAgICB9XHJcblxyXG4gICAgQE91dHB1dCgpIHBhZ2VTZWxlY3RlZDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgd2l6YXJkU2V0OiBXaXphcmRDb21wb25lbnQ7XHJcbiAgICBjb25zdHJ1Y3Rvcih3aXphcmRTZXQ6IFdpemFyZENvbXBvbmVudCwgcHJpdmF0ZSBwYWdlU2VyOiBQYWdlU2VydmljZSkge1xyXG4gICAgICAgIHRoaXMud2l6YXJkU2V0ID0gd2l6YXJkU2V0O1xyXG4gICAgICAgIHRoaXMud2l6YXJkU2V0LmFkZFBhZ2UodGhpcyk7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICAvL2NvbnNvbGUubG9nKCdGYXJyaXNXaXphcmRQYWdlQ29tcG9uZW504oCU4oCUJyArIHRoaXMucGFnZUlkKTtcclxuICAgICAgICB0aGlzLnBhZ2VTZXIuc2V0UGFnZUlkKHRoaXMucGFnZUlkKTtcclxuICAgIH1cclxuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpe1xyXG4gICAgICAgdGhpcy5kb0FmdGVyQWN0aXZlKCk7XHJcbiAgICB9XHJcbiAgICBnZXRQYWdlSWQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGFnZUlkO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIHNldFBhZ2VBY3RpdmUodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy5hY3RpdmUgIT09IHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlID0gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIZBY3RpdmVcclxuICAgICAqL1xyXG4gICAgZG9BZnRlckFjdGl2ZSgpIHtcclxuICAgICAgICB0aGlzLnBhZ2VTZWxlY3RlZC5lbWl0KHtcclxuICAgICAgICAgICAgcGFnZUlkOiB0aGlzLnBhZ2VJZCxcclxuICAgICAgICAgICAgc3RhdGU6IHRoaXMuYWN0aXZlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy9jb25zb2xlLmxvZygnRmFycmlzV2l6YXJkUGFnZUNvbXBvbmVudOKAlOKAlCcgKyB0aGlzLnBhZ2VpZCArIHRoaXMuYWN0aXZlKTtcclxuICAgICAgICB0aGlzLnBhZ2VTZXIuYWN0aXZlU3RhdGUubmV4dCh7XHJcbiAgICAgICAgICAgIHBhZ2VJZDogdGhpcy5wYWdlSWQsXHJcbiAgICAgICAgICAgIHN0YXRlOiB0aGlzLmFjdGl2ZVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==