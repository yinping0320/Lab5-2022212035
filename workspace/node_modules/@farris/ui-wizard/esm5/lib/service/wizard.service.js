/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { WizardEvent, WizardEventType } from '../model/wizard.model';
import * as i0 from "@angular/core";
var WizardService = /** @class */ (function () {
    function WizardService() {
        var _this = this;
        this.wizardData = new Subject();
        // 保存数据
        this.wizardPagesData = {};
        //是否平铺
        this.pageFill = true;
        /**
         * 对象结构
         *  {
         *      "activeIndex":-1,
         * "stepMessages":[
         * {
         * "id":"deliverytime",
         * "title":"设置发货时间",
         * "icon":""
         * },....]
         * }
         */
        this.onlyProgressData = null;
        // 步骤条数据保持
        this.progressData = new Subject();
        // 当前向导状态
        this.wizardState = new Subject();
        // 修改向导步骤
        this.changeActiveIndex = new Subject();
        this.progressData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.onlyProgressData = data;
        }));
    }
    //存储页面是否平铺
    //存储页面是否平铺
    /**
     * @param {?} fill
     * @return {?}
     */
    WizardService.prototype.updatePageFill = 
    //存储页面是否平铺
    /**
     * @param {?} fill
     * @return {?}
     */
    function (fill) {
        this.pageFill = fill;
    };
    /**
     * @return {?}
     */
    WizardService.prototype.getPageFill = /**
     * @return {?}
     */
    function () {
        return this.pageFill;
    };
    /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     */
    /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     * @param {?} state
     * @param {?} curPageId
     * @param {?=} stepToPageId
     * @return {?}
     */
    WizardService.prototype.updateWizardState = /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     * @param {?} state
     * @param {?} curPageId
     * @param {?=} stepToPageId
     * @return {?}
     */
    function (state, curPageId, stepToPageId) {
        /** @type {?} */
        var toPageId = '';
        switch (state) {
            case WizardEventType.Prev:
                toPageId = this.getPrePageId(curPageId);
                break;
            case WizardEventType.Next:
                toPageId = this.getNextPageId(curPageId);
                break;
            case WizardEventType.StepChange:
                toPageId = stepToPageId ? stepToPageId : curPageId;
                break;
            case WizardEventType.ChangeIndex:
                toPageId = stepToPageId !== '' ? stepToPageId : curPageId;
                break;
            default:
                toPageId = curPageId;
        }
        // 只有页面变化时候，才改变
        if (!toPageId) {
            return;
        }
        this.currentPageId = toPageId;
        this.wizardState.next(new WizardEvent(state, curPageId, toPageId));
    };
    /**
     * 获取向导状态变化
     */
    /**
     * 获取向导状态变化
     * @return {?}
     */
    WizardService.prototype.getWizardState = /**
     * 获取向导状态变化
     * @return {?}
     */
    function () {
        return this.wizardState;
    };
    /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     */
    /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @return {?}
     */
    WizardService.prototype.getWizardData = /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @return {?}
     */
    function () {
        return this.wizardData;
    };
    /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     */
    /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @param {?} data
     * @return {?}
     */
    WizardService.prototype.setWizardData = /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.wizardData.next(data);
    };
    /**
     * 设置某页面数据
     * @param pageid
     * @param data
     */
    /**
     * 设置某页面数据
     * @param {?} data
     * @param {?=} pageid
     * @return {?}
     */
    WizardService.prototype.setPageData = /**
     * 设置某页面数据
     * @param {?} data
     * @param {?=} pageid
     * @return {?}
     */
    function (data, pageid) {
        /** @type {?} */
        var id = pageid ? pageid : this.currentPageId;
        this.wizardPagesData[id] = data;
    };
    /**
     * 获取某页面数据
     * @param pageid
     */
    /**
     * 获取某页面数据
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.getPageData = /**
     * 获取某页面数据
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        if (this.wizardPagesData.hasOwnProperty(pageid)) {
            return this.wizardPagesData[pageid];
        }
        return {};
    };
    // /**
    //  * 场景：Wizard组件初始化步骤条数据
    //  * @param data
    //  */
    // initProgressData(data) {
    //     this.progressData.next(data);
    // }
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     */
    // /**
    //  * 场景：Wizard组件初始化步骤条数据
    //  * @param data
    //  */
    // initProgressData(data) {
    //     this.progressData.next(data);
    // }
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     * @param {?} data
     * @return {?}
     */
    WizardService.prototype.updateProgressData = 
    // /**
    //  * 场景：Wizard组件初始化步骤条数据
    //  * @param data
    //  */
    // initProgressData(data) {
    //     this.progressData.next(data);
    // }
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.progressData.next(data);
    };
    /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     */
    /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     * @return {?}
     */
    WizardService.prototype.getProgressData = /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     * @return {?}
     */
    function () {
        return this.progressData;
    };
    /**存储currentpageid */
    /**
     * 存储currentpageid
     * @param {?} id
     * @return {?}
     */
    WizardService.prototype.updateCurrentPageId = /**
     * 存储currentpageid
     * @param {?} id
     * @return {?}
     */
    function (id) {
        this.currentPageId = id;
    };
    /**
     * @return {?}
     */
    WizardService.prototype.getCurrentPageId = /**
     * @return {?}
     */
    function () {
        return this.currentPageId;
    };
    /**
     * 获取上一页pageid
     * @param pageid
     */
    /**
     * 获取上一页pageid
     * @param {?=} pageid
     * @return {?}
     */
    WizardService.prototype.getPrePageId = /**
     * 获取上一页pageid
     * @param {?=} pageid
     * @return {?}
     */
    function (pageid) {
        /** @type {?} */
        var id;
        id = pageid ? pageid : this.currentPageId;
        /** @type {?} */
        var pageIdIndex = this.getIndexByPageId(id);
        if (pageIdIndex <= 0) {
            return '';
        }
        /** @type {?} */
        var prePage = this.onlyProgressData.stepMessages[pageIdIndex - 1];
        return prePage['id'];
    };
    /**
     * 获取下一页
     * @param pageid
     */
    /**
     * 获取下一页
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.getNextPageId = /**
     * 获取下一页
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        /** @type {?} */
        var pagelen = this.onlyProgressData.stepMessages.length;
        /** @type {?} */
        var pageIdIndex = this.getIndexByPageId(pageid);
        if (pageIdIndex == pagelen - 1) {
            return '';
        }
        /** @type {?} */
        var nextPage = this.onlyProgressData.stepMessages[pageIdIndex + 1];
        return nextPage['id'];
    };
    /**
     * 是否是最后一页
     * @param pageid
     */
    /**
     * 是否是最后一页
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.isLastPage = /**
     * 是否是最后一页
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        /** @type {?} */
        var pagelen = this.onlyProgressData.length;
        /** @type {?} */
        var lastPage = this.onlyProgressData.stepMessages[pagelen - 1];
        return lastPage['id'] == pageid;
    };
    /**
     * 是否是当前页
     * @param pageid
     */
    /**
     * 是否是当前页
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.isCurrentPage = /**
     * 是否是当前页
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        /** @type {?} */
        var activeIndex = this.onlyProgressData.activeIndex;
        if (activeIndex < 0) {
            return false;
        }
        /** @type {?} */
        var curPage = this.onlyProgressData.stepMessages[activeIndex];
        return curPage['id'] == pageid;
    };
    /**
     * 是否是初始页
     * @param pageid
     */
    /**
     * 是否是初始页
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.isFirstPage = /**
     * 是否是初始页
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        if (this.onlyProgressData.activeIndex < 0) {
            return false;
        }
        return this.onlyProgressData.stepMessages[0]['id'] == pageid;
    };
    /**
     * 根据ID获取index
     * @param pageid
     */
    /**
     * 根据ID获取index
     * @param {?} pageid
     * @return {?}
     */
    WizardService.prototype.getIndexByPageId = /**
     * 根据ID获取index
     * @param {?} pageid
     * @return {?}
     */
    function (pageid) {
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            var pageIdIndex = this.onlyProgressData.stepMessages.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item['id'] == pageid) {
                    return true;
                }
                return false;
            }));
            return pageIdIndex;
        }
    };
    //20190211 服务内新增事件
    /**
     * 下一步
     */
    //20190211 服务内新增事件
    /**
     * 下一步
     * @return {?}
     */
    WizardService.prototype.nextStep = 
    //20190211 服务内新增事件
    /**
     * 下一步
     * @return {?}
     */
    function () {
        this.updateWizardState(WizardEventType.Next, this.currentPageId);
    };
    /**
     * 上一步
     */
    /**
     * 上一步
     * @return {?}
     */
    WizardService.prototype.prevStep = /**
     * 上一步
     * @return {?}
     */
    function () {
        this.updateWizardState(WizardEventType.Prev, this.currentPageId);
    };
    /**
     * 结束向导
     */
    /**
     * 结束向导
     * @return {?}
     */
    WizardService.prototype.finishWizard = /**
     * 结束向导
     * @return {?}
     */
    function () {
        this.updateWizardState(WizardEventType.Finish, this.currentPageId);
    };
    /**
     * 取消向导
     */
    /**
     * 取消向导
     * @return {?}
     */
    WizardService.prototype.cancelWizard = /**
     * 取消向导
     * @return {?}
     */
    function () {
        this.updateWizardState(WizardEventType.Cancel, this.currentPageId);
    };
    /**
     * 修改向导显示步骤
     * @param num 索引 0开始
     */
    /**
     * 修改向导显示步骤
     * @param {?} num 索引 0开始
     * @return {?}
     */
    WizardService.prototype.setActiveIndex = /**
     * 修改向导显示步骤
     * @param {?} num 索引 0开始
     * @return {?}
     */
    function (num) {
        /** @type {?} */
        var toPageId;
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            var activeNum = (num >= 0 && num < this.onlyProgressData.stepMessages.length) ? num : 0;
            toPageId = this.onlyProgressData.stepMessages[activeNum]['id'];
        }
        this.updateWizardState(WizardEventType.ChangeIndex, this.currentPageId, toPageId);
        this.changeActiveIndex.next(num);
    };
    WizardService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WizardService.ctorParameters = function () { return []; };
    /** @nocollapse */ WizardService.ngInjectableDef = i0.defineInjectable({ factory: function WizardService_Factory() { return new WizardService(); }, token: WizardService, providedIn: "root" });
    return WizardService;
}());
export { WizardService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardData;
    /** @type {?} */
    WizardService.prototype.currentPageId;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardPagesData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.pageFill;
    /**
     * 对象结构
     *  {
     *      "activeIndex":-1,
     * "stepMessages":[
     * {
     * "id":"deliverytime",
     * "title":"设置发货时间",
     * "icon":""
     * },....]
     * }
     * @type {?}
     * @private
     */
    WizardService.prototype.onlyProgressData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.progressData;
    /**
     * @type {?}
     * @private
     */
    WizardService.prototype.wizardState;
    /** @type {?} */
    WizardService.prototype.changeActiveIndex;
}
//# sourceMappingURL=data:application/json;base64,