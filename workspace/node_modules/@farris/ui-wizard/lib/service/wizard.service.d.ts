import { Subject } from 'rxjs';
import { WizardEventType } from '../model/wizard.model';
export declare class WizardService {
    private wizardData;
    currentPageId: string;
    private wizardPagesData;
    private pageFill;
    /**
     * 对象结构
     *  {
     *      "activeIndex":-1,
             "stepMessages":[
                {
                    "id":"deliverytime",
                    "title":"设置发货时间",
                    "icon":""
                },....]
        }
     */
    private onlyProgressData;
    private progressData;
    private wizardState;
    changeActiveIndex: Subject<number>;
    constructor();
    updatePageFill(fill: boolean): void;
    getPageFill(): boolean;
    /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     */
    updateWizardState(state: WizardEventType, curPageId: string, stepToPageId?: string): void;
    /**
     * 获取向导状态变化
     */
    getWizardState(): Subject<any>;
    /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     */
    getWizardData(): Subject<any>;
    /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     */
    setWizardData(data: any): void;
    /**
     * 设置某页面数据
     * @param pageid
     * @param data
     */
    setPageData(data: any, pageid?: string): void;
    /**
     * 获取某页面数据
     * @param pageid
     */
    getPageData(pageid: any): any;
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     */
    updateProgressData(data: any): void;
    /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     */
    getProgressData(): Subject<any>;
    /**存储currentpageid */
    updateCurrentPageId(id: string): void;
    getCurrentPageId(): string;
    /**
     * 获取上一页pageid
     * @param pageid
     */
    getPrePageId(pageid?: string): string;
    /**
     * 获取下一页
     * @param pageid
     */
    getNextPageId(pageid: any): string;
    /**
     * 是否是最后一页
     * @param pageid
     */
    isLastPage(pageid: any): boolean;
    /**
     * 是否是当前页
     * @param pageid
     */
    isCurrentPage(pageid: any): boolean;
    /**
     * 是否是初始页
     * @param pageid
     */
    isFirstPage(pageid: any): boolean;
    /**
     * 根据ID获取index
     * @param pageid
     */
    getIndexByPageId(pageid: any): number;
    /**
     * 下一步
     */
    nextStep(): void;
    /**
     * 上一步
     */
    prevStep(): void;
    /**
     * 结束向导
     */
    finishWizard(): void;
    /**
     * 取消向导
     */
    cancelWizard(): void;
    /**
     * 修改向导显示步骤
     * @param num 索引 0开始
     */
    setActiveIndex(num: number): void;
}
