(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/common'), require('@farris/ui-progress-step'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-wizard', ['exports', 'rxjs', '@angular/common', '@farris/ui-progress-step', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-wizard'] = {}),global.rxjs,global.ng.common,global.uiProgressStep,global.ng.core));
}(this, (function (exports,rxjs,common,uiProgressStep,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {number} */
    var WizardEventType = {
        Finish: 0,
        Cancel: 1,
        Prev: 2,
        Next: 3,
        StepChange: 4,
        ChangeIndex: 5,
    };
    WizardEventType[WizardEventType.Finish] = 'Finish';
    WizardEventType[WizardEventType.Cancel] = 'Cancel';
    WizardEventType[WizardEventType.Prev] = 'Prev';
    WizardEventType[WizardEventType.Next] = 'Next';
    WizardEventType[WizardEventType.StepChange] = 'StepChange';
    WizardEventType[WizardEventType.ChangeIndex] = 'ChangeIndex';
    var WizardEvent = /** @class */ (function () {
        function WizardEvent(state, fromPageId, toPageId) {
            this.state = state;
            this.fromPageId = fromPageId;
            this.toPageId = toPageId;
        }
        return WizardEvent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WizardService = /** @class */ (function () {
        function WizardService() {
            var _this = this;
            this.wizardData = new rxjs.Subject();
            // 保存数据
            this.wizardPagesData = {};
            //是否平铺
            this.pageFill = true;
            /**
             * 对象结构
             *  {
             *      "activeIndex":-1,
             * "stepMessages":[
             * {
             * "id":"deliverytime",
             * "title":"设置发货时间",
             * "icon":""
             * },....]
             * }
             */
            this.onlyProgressData = null;
            // 步骤条数据保持
            this.progressData = new rxjs.Subject();
            // 当前向导状态
            this.wizardState = new rxjs.Subject();
            // 修改向导步骤
            this.changeActiveIndex = new rxjs.Subject();
            this.progressData.subscribe(( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                _this.onlyProgressData = data;
            }));
        }
        //存储页面是否平铺
        //存储页面是否平铺
        /**
         * @param {?} fill
         * @return {?}
         */
        WizardService.prototype.updatePageFill =
            //存储页面是否平铺
            /**
             * @param {?} fill
             * @return {?}
             */
            function (fill) {
                this.pageFill = fill;
            };
        /**
         * @return {?}
         */
        WizardService.prototype.getPageFill = /**
         * @return {?}
         */
            function () {
                return this.pageFill;
            };
        /**
         * 更新向导状态
         * state: Finish,Cancel,Prev,Next
         */
        /**
         * 更新向导状态
         * state: Finish,Cancel,Prev,Next
         * @param {?} state
         * @param {?} curPageId
         * @param {?=} stepToPageId
         * @return {?}
         */
        WizardService.prototype.updateWizardState = /**
         * 更新向导状态
         * state: Finish,Cancel,Prev,Next
         * @param {?} state
         * @param {?} curPageId
         * @param {?=} stepToPageId
         * @return {?}
         */
            function (state, curPageId, stepToPageId) {
                /** @type {?} */
                var toPageId = '';
                switch (state) {
                    case WizardEventType.Prev:
                        toPageId = this.getPrePageId(curPageId);
                        break;
                    case WizardEventType.Next:
                        toPageId = this.getNextPageId(curPageId);
                        break;
                    case WizardEventType.StepChange:
                        toPageId = stepToPageId ? stepToPageId : curPageId;
                        break;
                    case WizardEventType.ChangeIndex:
                        toPageId = stepToPageId !== '' ? stepToPageId : curPageId;
                        break;
                    default:
                        toPageId = curPageId;
                }
                // 只有页面变化时候，才改变
                if (!toPageId) {
                    return;
                }
                this.currentPageId = toPageId;
                this.wizardState.next(new WizardEvent(state, curPageId, toPageId));
            };
        /**
         * 获取向导状态变化
         */
        /**
         * 获取向导状态变化
         * @return {?}
         */
        WizardService.prototype.getWizardState = /**
         * 获取向导状态变化
         * @return {?}
         */
            function () {
                return this.wizardState;
            };
        /**
         * 获取整个向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         */
        /**
         * 获取整个向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         * @return {?}
         */
        WizardService.prototype.getWizardData = /**
         * 获取整个向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         * @return {?}
         */
            function () {
                return this.wizardData;
            };
        /**
         * 设置向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         */
        /**
         * 设置向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         * @param {?} data
         * @return {?}
         */
        WizardService.prototype.setWizardData = /**
         * 设置向导用的数据
         * 场景：向导整体数据，在不同页之间通用
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.wizardData.next(data);
            };
        /**
         * 设置某页面数据
         * @param pageid
         * @param data
         */
        /**
         * 设置某页面数据
         * @param {?} data
         * @param {?=} pageid
         * @return {?}
         */
        WizardService.prototype.setPageData = /**
         * 设置某页面数据
         * @param {?} data
         * @param {?=} pageid
         * @return {?}
         */
            function (data, pageid) {
                /** @type {?} */
                var id = pageid ? pageid : this.currentPageId;
                this.wizardPagesData[id] = data;
            };
        /**
         * 获取某页面数据
         * @param pageid
         */
        /**
         * 获取某页面数据
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.getPageData = /**
         * 获取某页面数据
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                if (this.wizardPagesData.hasOwnProperty(pageid)) {
                    return this.wizardPagesData[pageid];
                }
                return {};
            };
        // /**
        //  * 场景：Wizard组件初始化步骤条数据
        //  * @param data
        //  */
        // initProgressData(data) {
        //     this.progressData.next(data);
        // }
        /**
         * 目的：更新步骤条数据
         * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
         */
        // /**
        //  * 场景：Wizard组件初始化步骤条数据
        //  * @param data
        //  */
        // initProgressData(data) {
        //     this.progressData.next(data);
        // }
        /**
         * 目的：更新步骤条数据
         * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
         * @param {?} data
         * @return {?}
         */
        WizardService.prototype.updateProgressData =
            // /**
            //  * 场景：Wizard组件初始化步骤条数据
            //  * @param data
            //  */
            // initProgressData(data) {
            //     this.progressData.next(data);
            // }
            /**
             * 目的：更新步骤条数据
             * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
             * @param {?} data
             * @return {?}
             */
            function (data) {
                this.progressData.next(data);
            };
        /**
         * 目的：获取步骤条数据
         * 场景：PageDetail组件,查看步骤条数据
         */
        /**
         * 目的：获取步骤条数据
         * 场景：PageDetail组件,查看步骤条数据
         * @return {?}
         */
        WizardService.prototype.getProgressData = /**
         * 目的：获取步骤条数据
         * 场景：PageDetail组件,查看步骤条数据
         * @return {?}
         */
            function () {
                return this.progressData;
            };
        /**存储currentpageid */
        /**
         * 存储currentpageid
         * @param {?} id
         * @return {?}
         */
        WizardService.prototype.updateCurrentPageId = /**
         * 存储currentpageid
         * @param {?} id
         * @return {?}
         */
            function (id) {
                this.currentPageId = id;
            };
        /**
         * @return {?}
         */
        WizardService.prototype.getCurrentPageId = /**
         * @return {?}
         */
            function () {
                return this.currentPageId;
            };
        /**
         * 获取上一页pageid
         * @param pageid
         */
        /**
         * 获取上一页pageid
         * @param {?=} pageid
         * @return {?}
         */
        WizardService.prototype.getPrePageId = /**
         * 获取上一页pageid
         * @param {?=} pageid
         * @return {?}
         */
            function (pageid) {
                /** @type {?} */
                var id;
                id = pageid ? pageid : this.currentPageId;
                /** @type {?} */
                var pageIdIndex = this.getIndexByPageId(id);
                if (pageIdIndex <= 0) {
                    return '';
                }
                /** @type {?} */
                var prePage = this.onlyProgressData.stepMessages[pageIdIndex - 1];
                return prePage['id'];
            };
        /**
         * 获取下一页
         * @param pageid
         */
        /**
         * 获取下一页
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.getNextPageId = /**
         * 获取下一页
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                /** @type {?} */
                var pagelen = this.onlyProgressData.stepMessages.length;
                /** @type {?} */
                var pageIdIndex = this.getIndexByPageId(pageid);
                if (pageIdIndex == pagelen - 1) {
                    return '';
                }
                /** @type {?} */
                var nextPage = this.onlyProgressData.stepMessages[pageIdIndex + 1];
                return nextPage['id'];
            };
        /**
         * 是否是最后一页
         * @param pageid
         */
        /**
         * 是否是最后一页
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.isLastPage = /**
         * 是否是最后一页
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                /** @type {?} */
                var pagelen = this.onlyProgressData.length;
                /** @type {?} */
                var lastPage = this.onlyProgressData.stepMessages[pagelen - 1];
                return lastPage['id'] == pageid;
            };
        /**
         * 是否是当前页
         * @param pageid
         */
        /**
         * 是否是当前页
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.isCurrentPage = /**
         * 是否是当前页
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                /** @type {?} */
                var activeIndex = this.onlyProgressData.activeIndex;
                if (activeIndex < 0) {
                    return false;
                }
                /** @type {?} */
                var curPage = this.onlyProgressData.stepMessages[activeIndex];
                return curPage['id'] == pageid;
            };
        /**
         * 是否是初始页
         * @param pageid
         */
        /**
         * 是否是初始页
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.isFirstPage = /**
         * 是否是初始页
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                if (this.onlyProgressData.activeIndex < 0) {
                    return false;
                }
                return this.onlyProgressData.stepMessages[0]['id'] == pageid;
            };
        /**
         * 根据ID获取index
         * @param pageid
         */
        /**
         * 根据ID获取index
         * @param {?} pageid
         * @return {?}
         */
        WizardService.prototype.getIndexByPageId = /**
         * 根据ID获取index
         * @param {?} pageid
         * @return {?}
         */
            function (pageid) {
                if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
                    /** @type {?} */
                    var pageIdIndex = this.onlyProgressData.stepMessages.findIndex(( /**
                     * @param {?} item
                     * @return {?}
                     */function (item) {
                        if (item['id'] == pageid) {
                            return true;
                        }
                        return false;
                    }));
                    return pageIdIndex;
                }
            };
        //20190211 服务内新增事件
        /**
         * 下一步
         */
        //20190211 服务内新增事件
        /**
         * 下一步
         * @return {?}
         */
        WizardService.prototype.nextStep =
            //20190211 服务内新增事件
            /**
             * 下一步
             * @return {?}
             */
            function () {
                this.updateWizardState(WizardEventType.Next, this.currentPageId);
            };
        /**
         * 上一步
         */
        /**
         * 上一步
         * @return {?}
         */
        WizardService.prototype.prevStep = /**
         * 上一步
         * @return {?}
         */
            function () {
                this.updateWizardState(WizardEventType.Prev, this.currentPageId);
            };
        /**
         * 结束向导
         */
        /**
         * 结束向导
         * @return {?}
         */
        WizardService.prototype.finishWizard = /**
         * 结束向导
         * @return {?}
         */
            function () {
                this.updateWizardState(WizardEventType.Finish, this.currentPageId);
            };
        /**
         * 取消向导
         */
        /**
         * 取消向导
         * @return {?}
         */
        WizardService.prototype.cancelWizard = /**
         * 取消向导
         * @return {?}
         */
            function () {
                this.updateWizardState(WizardEventType.Cancel, this.currentPageId);
            };
        /**
         * 修改向导显示步骤
         * @param num 索引 0开始
         */
        /**
         * 修改向导显示步骤
         * @param {?} num 索引 0开始
         * @return {?}
         */
        WizardService.prototype.setActiveIndex = /**
         * 修改向导显示步骤
         * @param {?} num 索引 0开始
         * @return {?}
         */
            function (num) {
                /** @type {?} */
                var toPageId;
                if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
                    /** @type {?} */
                    var activeNum = (num >= 0 && num < this.onlyProgressData.stepMessages.length) ? num : 0;
                    toPageId = this.onlyProgressData.stepMessages[activeNum]['id'];
                }
                this.updateWizardState(WizardEventType.ChangeIndex, this.currentPageId, toPageId);
                this.changeActiveIndex.next(num);
            };
        WizardService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        WizardService.ctorParameters = function () { return []; };
        /** @nocollapse */ WizardService.ngInjectableDef = i0.defineInjectable({ factory: function WizardService_Factory() { return new WizardService(); }, token: WizardService, providedIn: "root" });
        return WizardService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PageService = /** @class */ (function () {
        function PageService() {
            this.activeState = new rxjs.Subject();
            this.tPageId = '';
        }
        /**
         * @param {?} value
         * @return {?}
         */
        PageService.prototype.setPageId = /**
         * @param {?} value
         * @return {?}
         */
            function (value) {
                this.tPageId = value;
            };
        /**
         * @return {?}
         */
        PageService.prototype.getPageId = /**
         * @return {?}
         */
            function () {
                return this.tPageId;
            };
        PageService.decorators = [
            { type: i0.Injectable }
        ];
        /** @nocollapse */
        PageService.ctorParameters = function () { return []; };
        return PageService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WizardHeaderTemplateDirective = /** @class */ (function () {
        function WizardHeaderTemplateDirective(template) {
            this.template = template;
        }
        WizardHeaderTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[wizardHeader]'
                    },] }
        ];
        /** @nocollapse */
        WizardHeaderTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return WizardHeaderTemplateDirective;
    }());
    var WizardStepTemplateDirective = /** @class */ (function () {
        function WizardStepTemplateDirective(template) {
            this.template = template;
        }
        WizardStepTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[wizardStep]'
                    },] }
        ];
        /** @nocollapse */
        WizardStepTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return WizardStepTemplateDirective;
    }());
    var WizardComponent = /** @class */ (function () {
        function WizardComponent(wizardSer) {
            this.wizardSer = wizardSer;
            /**
             * 步骤条是否可以点击
             */
            this.stepClickable = false;
            // 向导容器自定义样式
            this.stepCls = '';
            /**
             * 步骤条排列方向
             */
            this.direction = 'vertical';
            /**
             * 步骤条摆放位置
             * Top 最顶部
             * HeaderRight 标题右侧
             * PageLeft 页面左侧
             *
             */
            this.stepPosition = 'None';
            this.basicClass = true;
            // @ViewChild('wizardContent') wizardContent: ElementRef;
            // @ViewChild('wizardHeader') wizardHeader: ElementRef;
            //@ViewChild('wizardStep') wizardStep:ElementRef;
            /**
             * 是否撑开
             */
            this.fill = true;
            this.storedIndex = false;
            this.storedIndexState = false;
            this._currentPageId = '';
            // 页面存储列表
            this.pages = [];
            //当前步骤条active状态的索引
            this.currentProgressIndex = 0;
            //默认步骤条
            this.defaultProgressData = {
                activeIndex: 0,
                stepMessages: []
            };
            // 结束向导；传递pageid
            this.stateChange = new i0.EventEmitter();
            //------------------------------------------------问题：未有引用；不能这样写
            // Object.assign(this, { type: 'pages' });
            this.wizardState = this.wizardSer.getWizardState();
        }
        Object.defineProperty(WizardComponent.prototype, "wizardFill", {
            // /**步骤条宽度 */
            // @Input('step-width') stepWidth:number;
            get: 
            // /**步骤条宽度 */
            // @Input('step-width') stepWidth:number;
            /**
             * @return {?}
             */
            function () {
                return this.fill;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WizardComponent.prototype, "currentPageId", {
            /**
             * 当前展示page的pageid名
             *  ---------------------------------问题： 可能出现问题currentProgressIndex与currentPageId不是一个
             * */
            get: /**
             * 当前展示page的pageid名
             *  ---------------------------------问题： 可能出现问题currentProgressIndex与currentPageId不是一个
             *
             * @return {?}
             */ function () {
                return this._currentPageId;
            },
            set: /**
             * @param {?} pageid
             * @return {?}
             */ function (pageid) {
                //console.log('当前页面ActiveID' + pageid);
                // 如果当前页与设置页是同一个页一样
                if (pageid && this._currentPageId == pageid) {
                    return;
                }
                this.setActivePage(pageid);
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WizardComponent.prototype, "progressData", {
            get: /**
             * @return {?}
             */ function () {
                return this.tProgressData;
            },
            set: /**
             * @param {?} progressData
             * @return {?}
             */ function (progressData) {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    if (!progressData) {
                        return;
                    }
                    if (progressData && progressData.stepMessages && progressData.stepMessages.length) {
                        if (progressData.activeIndex && progressData.activeIndex >= 0) {
                            if (progressData.activeIndex > progressData.stepMessages.length) {
                                progressData.activeIndex = 0;
                            }
                            /** @type {?} */
                            var cachedStep = progressData.stepMessages[progressData.activeIndex];
                            if (cachedStep) {
                                _this.cachedPageId = cachedStep['id'];
                            }
                        }
                        else {
                            _this.cachedPageId = progressData.stepMessages[0]['id'];
                        }
                    }
                    // console.log(this.cachedPageId);
                    _this.tProgressData = progressData;
                    _this.doAfterProgressData();
                }));
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(WizardComponent.prototype, "subStepData", {
            get: /**
             * @return {?}
             */ function () {
                return this._subStepData;
            },
            set: /**
             * @param {?} value
             * @return {?}
             */ function (value) {
                this._subStepData = value;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        WizardComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.wizardState.subscribe(( /**
                 * @param {?} data
                 * @return {?}
                 */function (data) {
                    _this.changeWizardState(data);
                }));
                this.wizardSer.updatePageFill(this.fill);
                //改变向导显示步骤
                this.wizardSer.changeActiveIndex.subscribe(( /**
                 * @param {?} num
                 * @return {?}
                 */function (num) {
                    /** @type {?} */
                    var activeNum = (num >= 0 && num < _this.progressData.stepMessages.length) ? num : 0;
                    _this.progressData = Object.assign({}, _this.progressData, {
                        activeIndex: activeNum
                    });
                }));
            };
        /**
         * 子元素已经被加载
         */
        /**
         * 子元素已经被加载
         * @return {?}
         */
        WizardComponent.prototype.ngAfterContentInit = /**
         * 子元素已经被加载
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    if (_this.stepPosition === 'None') {
                        if (_this.pages.length) {
                            _this.pages.forEach(( /**
                             * @param {?} page
                             * @return {?}
                             */function (page) {
                                if (_this.defaultProgressData.stepMessages.find(( /**
                                 * @param {?} item
                                 * @return {?}
                                 */function (item) {
                                    return item.id === page.pageId;
                                }))) {
                                    return false;
                                }
                                /** @type {?} */
                                var step = {
                                    id: page.pageId
                                };
                                _this.defaultProgressData.stepMessages.push(step);
                            }));
                            if (_this.currentPageId) {
                                /** @type {?} */
                                var stepIndex = _this.defaultProgressData.stepMessages.findIndex(( /**
                                 * @param {?} item
                                 * @return {?}
                                 */function (item) {
                                    return item.id === _this.currentPageId;
                                }));
                                if (stepIndex >= 0) {
                                    _this.defaultProgressData.activeIndex = stepIndex;
                                }
                            }
                        }
                        _this.tProgressData = _this.defaultProgressData;
                        _this.doAfterProgressData();
                    }
                    else {
                        // 执行初始化
                        _this.setActivePage(_this.currentPageId);
                        _this.setProgressDataDisable(_this.currentProgressIndex);
                    }
                }));
            };
        /**
         *
         * @param state  WizardEvent Finish,Cancel,Prev,Next
         * @param fromPageId
         * @param toPageId
         */
        /**
         *
         * @param {?} data
         * @return {?}
         */
        WizardComponent.prototype.changeWizardState = /**
         *
         * @param {?} data
         * @return {?}
         */
            function (data) {
                switch (data.state) {
                    case WizardEventType.Prev:
                        // 向导向前
                        this.progressStep.prevStep();
                        this.currentPageId = data.toPageId;
                        break;
                    case WizardEventType.Next:
                        // 向导向后
                        this.progressStep.nextStep();
                        this.currentPageId = data.toPageId;
                        this.cachedPageId = data.toPageId;
                        break;
                    case WizardEventType.StepChange:
                        this.progressStep.goStep(this.wizardSer.getIndexByPageId(data.toPageId));
                        this.currentPageId = data.toPageId;
                        break;
                    //default:
                    //this.wizardStateChange.emit(data);
                }
                this.currentProgressIndex = this.progressStep.getCurrentStepIndex();
                this.setProgressDataDisable(this.currentProgressIndex);
                this.stateChange.emit(data);
            };
        /**
         * 添加Page组件
         * @param page
         */
        /**
         * 添加Page组件
         * @param {?} page
         * @return {?}
         */
        WizardComponent.prototype.addPage = /**
         * 添加Page组件
         * @param {?} page
         * @return {?}
         */
            function (page) {
                this.pages.push(page);
                //----------------------------------------问题：此时pageid还没有值，设置当前active，统一在ngAfterViewInit
                // if (this.currentPageId) {
                //     page.active = this.currentPageId === page.pageid;
                // } else {
                //     page.active = this.pages.length === 1;
                // }
            };
        /**
         * 点击step步骤条事件
         */
        /**
         * 点击step步骤条事件
         * @param {?} event
         * @return {?}
         */
        WizardComponent.prototype.stepClick = /**
         * 点击step步骤条事件
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (event.step.clickDisable || this._currentPageId == event.step['id']) {
                    return;
                }
                this.wizardSer.updateWizardState(WizardEventType.StepChange, this._currentPageId, event.step['id']);
                //this.currentProgressIndex = event.index;
                //this.progressStep.goStep(event.index);
            };
        /**设置步骤条不可点击状态 */
        /**
         * 设置步骤条不可点击状态
         * @param {?} currentPageIndex
         * @return {?}
         */
        WizardComponent.prototype.setProgressDataDisable = /**
         * 设置步骤条不可点击状态
         * @param {?} currentPageIndex
         * @return {?}
         */
            function (currentPageIndex) {
                var _this = this;
                if (this.tProgressData && this.tProgressData.stepMessages && this.tProgressData.stepMessages.length) {
                    if (this.cachedPageId) {
                        this.cachedCurrentPageIndex = this.tProgressData.stepMessages.findIndex(( /**
                         * @param {?} step
                         * @return {?}
                         */function (step) {
                            return step.id === _this.cachedPageId;
                        }));
                    }
                    if (this.storedIndex && this.cachedCurrentPageIndex >= 0) {
                        this.tProgressData.stepMessages.forEach(( /**
                         * @param {?} step
                         * @param {?} i
                         * @return {?}
                         */function (step, i) {
                            if (i <= _this.cachedCurrentPageIndex) {
                                step.clickDisable = false;
                            }
                            else {
                                step.clickDisable = true;
                            }
                        }));
                    }
                    else {
                        this.tProgressData.stepMessages.forEach(( /**
                         * @param {?} step
                         * @param {?} i
                         * @return {?}
                         */function (step, i) {
                            if (i <= currentPageIndex) {
                                step.clickDisable = false;
                            }
                            else {
                                step.clickDisable = true;
                            }
                        }));
                    }
                    this.wizardSer.updateProgressData(this.tProgressData);
                }
            };
        /**
         * 设置当前显示page
         */
        /**
         * 设置当前显示page
         * @private
         * @param {?=} pageid
         * @return {?}
         */
        WizardComponent.prototype.setActivePage = /**
         * 设置当前显示page
         * @private
         * @param {?=} pageid
         * @return {?}
         */
            function (pageid) {
                if (this.pages[0] && !this.pages[0].getPageId()) {
                    this._currentPageId = pageid;
                    // if(!this.cachedPageId){
                    //     this.cachedPageId = this.pages[0].getPageId();
                    // }
                    return;
                }
                if (this.pages && this.pages.length) {
                    if (!pageid) {
                        this.pages.forEach(( /**
                         * @param {?} page
                         * @return {?}
                         */function (page) {
                            page.setPageActive(false);
                        }));
                        this.pages[0].setPageActive(true);
                        this._currentPageId = this.pages[0].getPageId();
                    }
                    else {
                        this.pages.forEach(( /**
                         * @param {?} page
                         * @return {?}
                         */function (page) {
                            if (page.getPageId() === pageid) {
                                page.setPageActive(true);
                            }
                            else {
                                page.setPageActive(false);
                            }
                        }));
                        this._currentPageId = pageid;
                    }
                }
                this.wizardSer.updateCurrentPageId(this._currentPageId);
            };
        /**
         * 返回class
         */
        /**
         * 返回class
         * @return {?}
         */
        WizardComponent.prototype.getWizardPositionClass = /**
         * 返回class
         * @return {?}
         */
            function () {
                /** @type {?} */
                var className = '';
                switch (this.stepPosition) {
                    case 'Top':
                        className = 'f-component-wizard-step-top';
                        break;
                    case 'HeaderRight':
                        className = 'f-component-wizard-step-headerright';
                        break;
                    case 'PageLeft':
                        className = 'f-component-wizard-step-pageleft';
                        break;
                    case "None":
                        className = 'f-component-wizard-step-none';
                        break;
                    default:
                        className = '';
                }
                return className;
            };
        /**
         * 判断位置
         * @param value
         */
        /**
         * 判断位置
         * @param {?} value
         * @return {?}
         */
        WizardComponent.prototype.isWizardPosition = /**
         * 判断位置
         * @param {?} value
         * @return {?}
         */
            function (value) {
                return this.stepPosition == value;
            };
        /** 步骤条信息修改后，调整页面显示信息*/
        /**
         * 步骤条信息修改后，调整页面显示信息
         * @return {?}
         */
        WizardComponent.prototype.doAfterProgressData = /**
         * 步骤条信息修改后，调整页面显示信息
         * @return {?}
         */
            function () {
                this.wizardSer.updateProgressData(this.tProgressData);
                if (this.tProgressData) {
                    /** @type {?} */
                    var activeIndex = this.tProgressData.activeIndex ? this.tProgressData.activeIndex : 0;
                    this.currentProgressIndex = (activeIndex >= 0 && activeIndex < this.tProgressData.stepMessages.length) ? activeIndex : 0;
                    if (this.tProgressData.stepMessages && this.tProgressData.stepMessages.length) {
                        this.setActivePage(this.tProgressData.stepMessages[this.currentProgressIndex].id);
                    }
                    this.setProgressDataDisable(this.currentProgressIndex);
                }
            };
        /**
         * @param {?} data
         * @return {?}
         */
        WizardComponent.prototype.setWizardData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.wizardSer.setWizardData(data);
            };
        WizardComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farris-wizard',
                        template: "<div class=\"f-wizard\" [ngClass]=\"getWizardPositionClass()\">\r\n    <ng-container *ngIf=\"isWizardPosition('Top')\">\r\n        <ng-container [ngTemplateOutlet]=\"wizardStepTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"isWizardPosition('None')\">\r\n        <div class=\"d-none\">\r\n            <ng-container [ngTemplateOutlet]=\"wizardStepTemplate\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <div class=\"f-wizard-header\" #wizardHeader *ngIf=\"HeaderTemplate || isWizardPosition('HeaderRight')\">\r\n        <ng-container [ngTemplateOutlet]=\"HeaderTemplate\"></ng-container>\r\n        <ng-container *ngIf=\"isWizardPosition('HeaderRight')\">\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"wizardStepTemplate\"\r\n            ></ng-container>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"f-wizard-content\" #wizardContent>\r\n        <ng-container *ngIf=\"isWizardPosition('PageLeft')\">\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"wizardStepTemplate\"\r\n            ></ng-container>\r\n        </ng-container>\r\n        <div class=\"f-wizard-pages\">\r\n            <ng-content select=\"wizard-page\"></ng-content>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #wizardStepTemplate>\r\n    <div class=\"f-wizard-step\" [ngClass]=\"stepCls\">\r\n        <farris-progress-step\r\n            #progressStep\r\n            [stepData]=\"tProgressData\"\r\n            [direction]=\"direction\"\r\n            [subStepData]=\"subStepData\"\r\n            [storedIndexState]=\"storedIndexState\"\r\n            (stepClick)=\"stepClick($event)\"\r\n            [clickable]=\"stepClickable\"\r\n        >\r\n            <ng-container *ngIf=\"StepTemplate\">\r\n                <ng-template\r\n                    progressStepItem\r\n                    let-step=\"step\"\r\n                    let-i=\"index\"\r\n                    let-length=\"length\"\r\n                    let-activeIndex=\"activeIndex\"\r\n                    let-direction=\"direction\"\r\n                >\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"StepTemplate\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            step: step,\r\n                            index: i,\r\n                            length: length,\r\n                            activeIndex: activeIndex,\r\n                            direction: direction\r\n                        }\"\r\n                    ></ng-container>\r\n                </ng-template>\r\n            </ng-container>\r\n        </farris-progress-step>\r\n    </div>\r\n</ng-template>\r\n",
                        styles: [":host.f-component-wizard{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-height:100px}:host.f-component-wizard.f-component-wizard-fill{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;height:100%}:host.f-component-wizard.f-component-wizard-fill .f-wizard{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow-y:hidden}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-header{flex-shrink:0}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-content{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow:hidden}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-content .f-wizard-pages{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow:hidden}:host.f-component-wizard .f-wizard{position:relative}:host.f-component-wizard .f-wizard.f-component-wizard-step-pageleft .f-wizard-content{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}:host.f-component-wizard .f-wizard.f-component-wizard-step-pageleft .f-wizard-step{min-width:165px;padding:18px 24px;box-shadow:0 2px 4px 0 rgba(0,0,0,.1);overflow:auto}:host.f-component-wizard .f-wizard.f-component-wizard-step-headerright .f-wizard-header{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center}:host.f-component-wizard .f-wizard.f-component-wizard-step-headerright .f-wizard-header .f-wizard-step{-webkit-box-flex:1;flex:1 1 auto;text-align:right}"]
                    }] }
        ];
        /** @nocollapse */
        WizardComponent.ctorParameters = function () {
            return [
                { type: WizardService }
            ];
        };
        WizardComponent.propDecorators = {
            stepClickable: [{ type: i0.Input }],
            stepCls: [{ type: i0.Input }],
            direction: [{ type: i0.Input, args: ['stepDirection',] }],
            stepPosition: [{ type: i0.Input, args: ['stepPosition',] }],
            wizardFill: [{ type: i0.HostBinding, args: ['class.f-component-wizard-fill',] }],
            basicClass: [{ type: i0.HostBinding, args: ['class.f-component-wizard',] }],
            HeaderTemplate: [{ type: i0.ContentChild, args: [WizardHeaderTemplateDirective, { read: i0.TemplateRef },] }],
            StepTemplate: [{ type: i0.ContentChild, args: [WizardStepTemplateDirective, { read: i0.TemplateRef },] }],
            progressStep: [{ type: i0.ViewChild, args: ['progressStep',] }],
            fill: [{ type: i0.Input }],
            storedIndex: [{ type: i0.Input }],
            storedIndexState: [{ type: i0.Input }],
            currentPageId: [{ type: i0.Input }],
            progressData: [{ type: i0.Input }],
            subStepData: [{ type: i0.Input }],
            stateChange: [{ type: i0.Output }]
        };
        return WizardComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FarrisWizardPageComponent = /** @class */ (function () {
        function FarrisWizardPageComponent(wizardSet, pageSer) {
            this.pageSer = pageSer;
            // 唯一标记
            this.pageId = '';
            // 默认class
            this.addClass = true;
            this._active = false;
            this.pageSelected = new i0.EventEmitter();
            this.wizardSet = wizardSet;
            this.wizardSet.addPage(this);
        }
        Object.defineProperty(FarrisWizardPageComponent.prototype, "activeCls", {
            get: /**
             * @return {?}
             */ function () {
                return this._active;
            },
            enumerable: true,
            configurable: true
        });
        Object.defineProperty(FarrisWizardPageComponent.prototype, "active", {
            get: /**
             * @return {?}
             */ function () {
                return this._active;
            },
            // 当前选中
            set: 
            // 当前选中
            /**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                this._active = value;
                if (this.pageId) {
                    this.doAfterActive();
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FarrisWizardPageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                //console.log('FarrisWizardPageComponent——' + this.pageId);
                this.pageSer.setPageId(this.pageId);
            };
        /**
         * @return {?}
         */
        FarrisWizardPageComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
            function () {
                this.doAfterActive();
            };
        /**
         * @return {?}
         */
        FarrisWizardPageComponent.prototype.getPageId = /**
         * @return {?}
         */
            function () {
                return this.pageId;
            };
        /**
         *
         * @param value
         */
        /**
         *
         * @param {?} value
         * @return {?}
         */
        FarrisWizardPageComponent.prototype.setPageActive = /**
         *
         * @param {?} value
         * @return {?}
         */
            function (value) {
                if (this.active !== value) {
                    this.active = value;
                }
            };
        /**
         * 处理Active
         */
        /**
         * 处理Active
         * @return {?}
         */
        FarrisWizardPageComponent.prototype.doAfterActive = /**
         * 处理Active
         * @return {?}
         */
            function () {
                this.pageSelected.emit({
                    pageId: this.pageId,
                    state: this.active
                });
                //console.log('FarrisWizardPageComponent——' + this.pageid + this.active);
                this.pageSer.activeState.next({
                    pageId: this.pageId,
                    state: this.active
                });
            };
        FarrisWizardPageComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wizard-page',
                        template: '<ng-content></ng-content>',
                        providers: [PageService],
                        styles: [":host.f-component-wizard-page{display:none;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;position:relative}:host.f-component-wizard-page.active{display:-webkit-box;display:flex}"]
                    }] }
        ];
        /** @nocollapse */
        FarrisWizardPageComponent.ctorParameters = function () {
            return [
                { type: WizardComponent },
                { type: PageService }
            ];
        };
        FarrisWizardPageComponent.propDecorators = {
            pageId: [{ type: i0.Input }],
            addClass: [{ type: i0.HostBinding, args: ['class.f-component-wizard-page',] }],
            activeCls: [{ type: i0.HostBinding, args: ['class.active',] }],
            active: [{ type: i0.Input }],
            pageSelected: [{ type: i0.Output }]
        };
        return FarrisWizardPageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var wizardPageHeaderTemplateDirective = /** @class */ (function () {
        function wizardPageHeaderTemplateDirective(template) {
            this.template = template;
        }
        wizardPageHeaderTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[wizardPageHeader]'
                    },] }
        ];
        /** @nocollapse */
        wizardPageHeaderTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return wizardPageHeaderTemplateDirective;
    }());
    var wizardPageContentTemplateDirective = /** @class */ (function () {
        function wizardPageContentTemplateDirective(template) {
            this.template = template;
        }
        wizardPageContentTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[wizardPageContent]'
                    },] }
        ];
        /** @nocollapse */
        wizardPageContentTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return wizardPageContentTemplateDirective;
    }());
    var wizardPageFooterTemplateDirective = /** @class */ (function () {
        function wizardPageFooterTemplateDirective(template) {
            this.template = template;
        }
        wizardPageFooterTemplateDirective.decorators = [
            { type: i0.Directive, args: [{
                        selector: '[wizardPageFooter]'
                    },] }
        ];
        /** @nocollapse */
        wizardPageFooterTemplateDirective.ctorParameters = function () {
            return [
                { type: i0.TemplateRef }
            ];
        };
        return wizardPageFooterTemplateDirective;
    }());
    var FarrisPageDetailComponent = /** @class */ (function () {
        function FarrisPageDetailComponent(wizardSer, pageSer) {
            var _this = this;
            this.wizardSer = wizardSer;
            this.pageSer = pageSer;
            this.cls = true;
            this.pageId = '';
            this.pagedetailSelected = new i0.EventEmitter();
            if (!this.pageSer) {
                this.pageSer = new PageService();
            }
            this.pageSer.activeState.subscribe(( /**
             * @param {?} data
             * @return {?}
             */function (data) {
                //console.log('FarrisPageDetailComponent——' + this.pageId+'——'+data);
                if (data.state) {
                    _this.pagedetailSelected.emit(data);
                }
            }));
        }
        Object.defineProperty(FarrisPageDetailComponent.prototype, "fill", {
            get: /**
             * @return {?}
             */ function () { return this.wizardSer.getPageFill(); },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.pageId = this.pageSer.getPageId();
            };
        /**
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.getPageId = /**
         * @return {?}
         */
            function () {
                return this.pageId;
            };
        /**
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.getPrevPageId = /**
         * @return {?}
         */
            function () {
                return this.wizardSer.getPrePageId(this.pageId);
            };
        /**
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.getWizardData = /**
         * @return {?}
         */
            function () {
                return this.wizardSer.getWizardData();
            };
        /**
         * 获取某页数据
         */
        /**
         * 获取某页数据
         * @param {?=} pageid
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.getPageData = /**
         * 获取某页数据
         * @param {?=} pageid
         * @return {?}
         */
            function (pageid) {
                if (pageid === void 0) {
                    pageid = this.pageId;
                }
                return this.wizardSer.getPageData(pageid);
            };
        /**
         * 更新某页数据
         * @param data
         */
        /**
         * 更新某页数据
         * @param {?} data
         * @param {?=} pageid
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.setPageData = /**
         * 更新某页数据
         * @param {?} data
         * @param {?=} pageid
         * @return {?}
         */
            function (data, pageid) {
                if (pageid === void 0) {
                    pageid = this.pageId;
                }
                this.wizardSer.setPageData(data, pageid);
            };
        /**
         * 下一步
         */
        /**
         * 下一步
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.nextStep = /**
         * 下一步
         * @return {?}
         */
            function () {
                this.wizardSer.updateWizardState(WizardEventType.Next, this.pageId);
            };
        /**
         * 上一步
         */
        /**
         * 上一步
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.prevStep = /**
         * 上一步
         * @return {?}
         */
            function () {
                this.wizardSer.updateWizardState(WizardEventType.Prev, this.pageId);
            };
        /**
         * 结束向导
         */
        /**
         * 结束向导
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.finishWizard = /**
         * 结束向导
         * @return {?}
         */
            function () {
                this.wizardSer.updateWizardState(WizardEventType.Finish, this.pageId);
            };
        /**
         * 取消向导
         */
        /**
         * 取消向导
         * @return {?}
         */
        FarrisPageDetailComponent.prototype.cancelWizard = /**
         * 取消向导
         * @return {?}
         */
            function () {
                this.wizardSer.updateWizardState(WizardEventType.Cancel, this.pageId);
            };
        FarrisPageDetailComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'wizard-page-detail',
                        template: "<div class=\"f-component-wizard-page-detail-header\" *ngIf=\"pageHeaderTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageHeaderTemplate\"></ng-container>\r\n</div>\r\n<!-- <div class=\"page-message\">\r\n                <ng-container [ngTemplateOutlet]=\"pageMessageTemplate\"></ng-container>\r\n        </div> -->\r\n<div class=\"f-component-wizard-page-detail-content\" *ngIf=\"pageContentTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageContentTemplate\"></ng-container>\r\n</div>\r\n<div class=\"f-component-wizard-page-detail-content\" *ngIf=\"!pageContentTemplate\">\r\n    <ng-content></ng-content>\r\n</div>\r\n<div class=\"f-component-wizard-page-detail-footer\" *ngIf=\"pageFooterTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageFooterTemplate\"></ng-container>\r\n</div>\r\n",
                        styles: [":host.f-component-wizard-page-detail-fill{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-footer,:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-headeer{flex-shrink:0}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-content{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;overflow:auto}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-footer{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end}"]
                    }] }
        ];
        /** @nocollapse */
        FarrisPageDetailComponent.ctorParameters = function () {
            return [
                { type: WizardService },
                { type: PageService, decorators: [{ type: i0.Optional }] }
            ];
        };
        FarrisPageDetailComponent.propDecorators = {
            cls: [{ type: i0.HostBinding, args: ['class.f-component-wizard-page-detail',] }],
            fill: [{ type: i0.HostBinding, args: ['class.f-component-wizard-page-detail-fill',] }],
            pageHeaderTemplate: [{ type: i0.ContentChild, args: [wizardPageHeaderTemplateDirective, { read: i0.TemplateRef },] }],
            pageContentTemplate: [{ type: i0.ContentChild, args: [wizardPageContentTemplateDirective, { read: i0.TemplateRef },] }],
            pageFooterTemplate: [{ type: i0.ContentChild, args: [wizardPageFooterTemplateDirective, { read: i0.TemplateRef },] }],
            pagedetailSelected: [{ type: i0.Output }]
        };
        return FarrisPageDetailComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WizardModule = /** @class */ (function () {
        function WizardModule() {
        }
        WizardModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [
                            WizardComponent,
                            WizardHeaderTemplateDirective,
                            WizardStepTemplateDirective,
                            FarrisWizardPageComponent,
                            FarrisPageDetailComponent,
                            WizardStepTemplateDirective,
                            wizardPageHeaderTemplateDirective,
                            wizardPageContentTemplateDirective,
                            wizardPageFooterTemplateDirective
                        ],
                        imports: [common.CommonModule, uiProgressStep.ProgressStepModule],
                        exports: [
                            WizardComponent,
                            WizardHeaderTemplateDirective,
                            WizardStepTemplateDirective,
                            FarrisWizardPageComponent,
                            FarrisPageDetailComponent,
                            WizardStepTemplateDirective,
                            wizardPageHeaderTemplateDirective,
                            wizardPageContentTemplateDirective,
                            wizardPageFooterTemplateDirective
                        ],
                        providers: [WizardService]
                    },] }
        ];
        return WizardModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.WizardService = WizardService;
    exports.PageService = PageService;
    exports.WizardEventType = WizardEventType;
    exports.WizardEvent = WizardEvent;
    exports.WizardHeaderTemplateDirective = WizardHeaderTemplateDirective;
    exports.WizardStepTemplateDirective = WizardStepTemplateDirective;
    exports.WizardComponent = WizardComponent;
    exports.WizardModule = WizardModule;
    exports.FarrisWizardPageComponent = FarrisWizardPageComponent;
    exports.wizardPageHeaderTemplateDirective = wizardPageHeaderTemplateDirective;
    exports.wizardPageContentTemplateDirective = wizardPageContentTemplateDirective;
    exports.wizardPageFooterTemplateDirective = wizardPageFooterTemplateDirective;
    exports.FarrisPageDetailComponent = FarrisPageDetailComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-wizard.umd.js.map