{"version":3,"sources":["ng://@farris/ui-wizard/lib/model/wizard.model.ts","ng://@farris/ui-wizard/lib/service/wizard.service.ts","ng://@farris/ui-wizard/lib/service/page.service.ts","ng://@farris/ui-wizard/lib/wizard/wizard.component.ts","ng://@farris/ui-wizard/lib/page/page.component.ts","ng://@farris/ui-wizard/lib/page-detail/page-detail.component.ts","ng://@farris/ui-wizard/lib/wizard.module.ts"],"names":["Finish","Cancel","Prev","Next","StepChange","ChangeIndex","WizardEvent","state","fromPageId","toPageId","this","WizardService","prototype","updatePageFill","fill","pageFill","getPageFill","updateWizardState","curPageId","stepToPageId","WizardEventType","getPrePageId","getNextPageId","currentPageId","wizardState","next","getWizardState","getWizardData","wizardData","setWizardData","data","setPageData","pageid","id","wizardPagesData","getPageData","hasOwnProperty","updateProgressData","progressData","getProgressData","updateCurrentPageId","getCurrentPageId","pageIdIndex","getIndexByPageId","onlyProgressData","stepMessages","pagelen","length","isLastPage","isCurrentPage","activeIndex","isFirstPage","findIndex","item","nextStep","prevStep","finishWizard","cancelWizard","setActiveIndex","num","activeNum","changeActiveIndex","Injectable","args","providedIn","_this","Subject","subscribe","PageService","setPageId","value","tPageId","getPageId","activeState","WizardHeaderTemplateDirective","Directive","selector","TemplateRef","template","WizardStepTemplateDirective","Object","defineProperty","WizardComponent","_currentPageId","setActivePage","tProgressData","setTimeout","cachedStep","cachedPageId","doAfterProgressData","_subStepData","ngOnInit","changeWizardState","wizardSer","assign","ngAfterContentInit","stepPosition","pages","forEach","page","defaultProgressData","find","pageId","step","push","stepIndex","setProgressDataDisable","currentProgressIndex","progressStep","goStep","getCurrentStepIndex","stateChange","emit","addPage","stepClick","event","clickDisable","currentPageIndex","cachedCurrentPageIndex","storedIndex","i","setPageActive","getWizardPositionClass","className","isWizardPosition","Component","Input","HostBinding","ContentChild","read","ViewChild","Output","stepClickable","stepCls","direction","basicClass","storedIndexState","EventEmitter","FarrisWizardPageComponent","_active","doAfterActive","pageSer","active","pageSelected","providers","wizardSet","addClass","wizardPageHeaderTemplateDirective","wizardPageContentTemplateDirective","wizardPageFooterTemplateDirective","FarrisPageDetailComponent","getPrevPageId","decorators","type","Optional","cls","pagedetailSelected","WizardModule","NgModule","declarations","imports","CommonModule","ProgressStepModule","exports"],"mappings":"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","sourcesContent":["/**\r\n * æåºäºä»¶ç±»å\r\n */\r\nexport enum WizardEventType {\r\n    Finish,\r\n    Cancel,\r\n    Prev,\r\n    Next,\r\n    StepChange,\r\n    ChangeIndex\r\n}\r\nexport class WizardEvent {\r\n    state: WizardEventType; // Pre\r\n    fromPageId: string;\r\n    toPageId: string;\r\n    constructor(state, fromPageId, toPageId) {\r\n        this.state = state;\r\n        this.fromPageId = fromPageId;\r\n        this.toPageId = toPageId;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Observable, Subject } from 'rxjs';\r\nimport { isThisMonth } from 'date-fns';\r\nimport { WizardEvent, WizardEventType } from '../model/wizard.model';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class WizardService {\r\n    private wizardData:Subject<any> = new Subject();\r\n    //ç¨äºå­å¨å½åæ¾ç¤ºpageid\r\n    currentPageId:string;\r\n    // ä¿å­æ°æ®\r\n    private wizardPagesData = {};\r\n    //æ¯å¦å¹³éº\r\n    private pageFill = true;\r\n    /**\r\n     * å¯¹è±¡ç»æ\r\n     *  {\r\n     *      \"activeIndex\":-1,\r\n             \"stepMessages\":[\r\n                {\r\n                    \"id\":\"deliverytime\",\r\n                    \"title\":\"è®¾ç½®åè´§æ¶é´\",\r\n                    \"icon\":\"\"\r\n                },....]\r\n        }\r\n     */\r\n    private onlyProgressData = null;\r\n    // æ­¥éª¤æ¡æ°æ®ä¿æ\r\n    private progressData: Subject<any> = new Subject();\r\n    // å½ååå¯¼ç¶æ\r\n    private wizardState: Subject<any> = new Subject();\r\n    // ä¿®æ¹åå¯¼æ­¥éª¤\r\n    changeActiveIndex: Subject<number> = new Subject();\r\n\r\n    constructor() {\r\n        this.progressData.subscribe(data => {\r\n            this.onlyProgressData = data;\r\n        });\r\n    }\r\n    //å­å¨é¡µé¢æ¯å¦å¹³éº\r\n    updatePageFill(fill:boolean){\r\n        this.pageFill = fill;\r\n    }\r\n    getPageFill(){\r\n        return this.pageFill;\r\n    }\r\n    /**\r\n     * æ´æ°åå¯¼ç¶æ\r\n     * state: Finish,Cancel,Prev,Next\r\n     */\r\n    updateWizardState(state: WizardEventType, curPageId: string, stepToPageId?:string) {\r\n        let toPageId = '';\r\n        switch (state) {\r\n            case WizardEventType.Prev:\r\n                toPageId = this.getPrePageId(curPageId);\r\n                break;\r\n            case WizardEventType.Next:\r\n                toPageId = this.getNextPageId(curPageId);\r\n                break;\r\n            case WizardEventType.StepChange:\r\n                toPageId = stepToPageId ? stepToPageId: curPageId\r\n                break;\r\n            case WizardEventType.ChangeIndex:\r\n                toPageId = stepToPageId !== '' ? stepToPageId: curPageId\r\n                break\r\n            default:\r\n                toPageId = curPageId;\r\n        }\r\n        // åªæé¡µé¢ååæ¶åï¼ææ¹å\r\n        if (!toPageId) {\r\n            return;\r\n        }\r\n        this.currentPageId = toPageId;\r\n        this.wizardState.next(new WizardEvent(state, curPageId, toPageId));\r\n    }\r\n    /**\r\n     * è·ååå¯¼ç¶æåå\r\n     */\r\n    getWizardState() {\r\n        return this.wizardState;\r\n    }\r\n    /**\r\n     * è·åæ´ä¸ªåå¯¼ç¨çæ°æ®\r\n     * åºæ¯ï¼åå¯¼æ´ä½æ°æ®ï¼å¨ä¸åé¡µä¹é´éç¨\r\n     */\r\n    getWizardData(){\r\n        return this.wizardData;\r\n    }\r\n    /**\r\n     * è®¾ç½®åå¯¼ç¨çæ°æ®\r\n     * åºæ¯ï¼åå¯¼æ´ä½æ°æ®ï¼å¨ä¸åé¡µä¹é´éç¨\r\n     */\r\n    setWizardData(data){\r\n        this.wizardData.next(data);\r\n    }\r\n    /**\r\n     * è®¾ç½®æé¡µé¢æ°æ®\r\n     * @param pageid\r\n     * @param data\r\n     */\r\n    setPageData(data,pageid?: string) {\r\n        let id = pageid? pageid : this.currentPageId;\r\n        this.wizardPagesData[id] = data;\r\n    }\r\n    /**\r\n     * è·åæé¡µé¢æ°æ®\r\n     * @param pageid\r\n     */\r\n    getPageData(pageid) {\r\n        if (this.wizardPagesData.hasOwnProperty(pageid)) {\r\n            return this.wizardPagesData[pageid];\r\n        }\r\n        return {};\r\n    }\r\n    // /**\r\n    //  * åºæ¯ï¼Wizardç»ä»¶åå§åæ­¥éª¤æ¡æ°æ®\r\n    //  * @param data\r\n    //  */\r\n    // initProgressData(data) {\r\n    //     this.progressData.next(data);\r\n    // }\r\n\r\n    /**\r\n     * ç®çï¼æ´æ°æ­¥éª¤æ¡æ°æ®\r\n     * åºæ¯ï¼PageDetailç»ä»¶ï¼éè¦æ´æ°æ­¥éª¤æ°æ®,å·æ°æ­¥éª¤æ¡çé¢\r\n     */\r\n    updateProgressData(data) {\r\n        this.progressData.next(data);\r\n    }\r\n    /**\r\n     * ç®çï¼è·åæ­¥éª¤æ¡æ°æ®\r\n     * åºæ¯ï¼PageDetailç»ä»¶,æ¥çæ­¥éª¤æ¡æ°æ®\r\n     */\r\n    getProgressData() {\r\n        return this.progressData;\r\n    }\r\n\r\n    /**å­å¨currentpageid */\r\n    updateCurrentPageId(id:string){\r\n        this.currentPageId = id ;\r\n    }\r\n    getCurrentPageId(){\r\n        return this.currentPageId;\r\n    }\r\n\r\n    /**\r\n     * è·åä¸ä¸é¡µpageid\r\n     * @param pageid\r\n     */\r\n    getPrePageId(pageid?: string): string {\r\n        let id:string;\r\n        id = pageid?pageid:this.currentPageId;\r\n        const pageIdIndex = this.getIndexByPageId(id);\r\n        if (pageIdIndex <= 0) {\r\n            return '';\r\n        }\r\n        let prePage = this.onlyProgressData.stepMessages[pageIdIndex - 1];\r\n        return prePage['id'];\r\n    }\r\n\r\n    /**\r\n     * è·åä¸ä¸é¡µ\r\n     * @param pageid\r\n     */\r\n    getNextPageId(pageid): string {\r\n        const pagelen = this.onlyProgressData.stepMessages.length;\r\n        const pageIdIndex = this.getIndexByPageId(pageid);\r\n        if (pageIdIndex == pagelen - 1) {\r\n            return '';\r\n        }\r\n        let nextPage = this.onlyProgressData.stepMessages[pageIdIndex + 1];\r\n        return nextPage['id'];\r\n    }\r\n    /**\r\n     * æ¯å¦æ¯æåä¸é¡µ\r\n     * @param pageid\r\n     */\r\n    isLastPage(pageid): boolean {\r\n        const pagelen = this.onlyProgressData.length;\r\n        let lastPage = this.onlyProgressData.stepMessages[pagelen - 1];\r\n        return lastPage['id'] == pageid;\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦æ¯å½åé¡µ\r\n     * @param pageid\r\n     */\r\n    isCurrentPage(pageid): boolean {\r\n        const activeIndex = this.onlyProgressData.activeIndex;\r\n        if (activeIndex < 0) {\r\n            return false;\r\n        }\r\n        let curPage = this.onlyProgressData.stepMessages[activeIndex];\r\n        return curPage['id'] == pageid;\r\n    }\r\n    /**\r\n     * æ¯å¦æ¯åå§é¡µ\r\n     * @param pageid\r\n     */\r\n    isFirstPage(pageid): boolean {\r\n        if (this.onlyProgressData.activeIndex < 0) {\r\n            return false;\r\n        }\r\n        return this.onlyProgressData.stepMessages[0]['id'] == pageid;\r\n    }\r\n    /**\r\n     * æ ¹æ®IDè·åindex\r\n     * @param pageid \r\n     */\r\n    getIndexByPageId(pageid): number {\r\n        if(this.onlyProgressData&&this.onlyProgressData.hasOwnProperty('stepMessages')){\r\n            let pageIdIndex = this.onlyProgressData.stepMessages.findIndex(item => {\r\n                if (item['id'] == pageid) {\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n            return pageIdIndex;\r\n        }\r\n    }\r\n\r\n\r\n    //20190211 æå¡åæ°å¢äºä»¶\r\n    /**\r\n     * ä¸ä¸æ­¥\r\n     */\r\n    nextStep() {\r\n        this.updateWizardState(WizardEventType.Next, this.currentPageId);\r\n    }\r\n    /**\r\n     * ä¸ä¸æ­¥\r\n     */\r\n    prevStep() {\r\n        this.updateWizardState(WizardEventType.Prev, this.currentPageId);\r\n    }\r\n    /**\r\n     * ç»æåå¯¼\r\n     */\r\n    finishWizard() {\r\n        this.updateWizardState(WizardEventType.Finish, this.currentPageId);\r\n    }\r\n    /**\r\n     * åæ¶åå¯¼\r\n     */\r\n    cancelWizard() {\r\n        this.updateWizardState(WizardEventType.Cancel, this.currentPageId);\r\n    }\r\n\r\n    /**\r\n     * ä¿®æ¹åå¯¼æ¾ç¤ºæ­¥éª¤\r\n     * @param num ç´¢å¼ 0å¼å§\r\n     */\r\n    setActiveIndex(num:number){\r\n        let toPageId;\r\n        if(this.onlyProgressData&&this.onlyProgressData.hasOwnProperty('stepMessages')){\r\n            let activeNum:number  = (num>= 0 && num < this.onlyProgressData.stepMessages.length)? num: 0\r\n            toPageId = this.onlyProgressData.stepMessages[activeNum]['id'];\r\n        }\r\n        this.updateWizardState(WizardEventType.ChangeIndex, this.currentPageId, toPageId);\r\n        this.changeActiveIndex.next(num);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable()\r\nexport class PageService {\r\n    activeState: Subject<any> = new Subject();\r\n    \r\n    private tPageId = '';\r\n    constructor() {}\r\n    setPageId(value) {\r\n        this.tPageId = value;\r\n    }\r\n    getPageId() {\r\n        return this.tPageId;\r\n    }\r\n}","import {\r\n    Component,\r\n    OnInit,\r\n    Directive,\r\n    TemplateRef,\r\n    ContentChild,\r\n    Input,\r\n    ViewChild,\r\n    HostBinding,\r\n    Output,\r\n    EventEmitter,\r\n    AfterContentInit\r\n} from '@angular/core';\r\nimport { WizardService } from '../service/wizard.service';\r\nimport { FarrisWizardPageComponent } from '../page/page.component';\r\nimport { Subject } from 'rxjs';\r\n// import { PagesetConfig } from './pageset.config';\r\nimport { WizardEvent, WizardEventType } from '../model/wizard.model';\r\n\r\n@Directive({\r\n    selector: '[wizardHeader]'\r\n})\r\nexport class WizardHeaderTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n    selector: '[wizardStep]'\r\n})\r\nexport class WizardStepTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Component({\r\n    selector: 'farris-wizard',\r\n    templateUrl: './wizard.component.html',\r\n    styleUrls: ['./wizard.component.scss']\r\n})\r\nexport class WizardComponent implements OnInit, AfterContentInit {\r\n    /**æ­¥éª¤æ¡æ¯å¦å¯ä»¥ç¹å» */\r\n    @Input() stepClickable: boolean = false;\r\n    // åå¯¼å®¹å¨èªå®ä¹æ ·å¼\r\n    @Input() stepCls='';\r\n    /**æ­¥éª¤æ¡æåæ¹å */\r\n    @Input('stepDirection') direction = 'vertical';\r\n    /**æ­¥éª¤æ¡ææ¾ä½ç½®\r\n     * Top æé¡¶é¨\r\n     * HeaderRight æ é¢å³ä¾§\r\n     * PageLeft é¡µé¢å·¦ä¾§\r\n     **/\r\n    @Input('stepPosition') stepPosition = 'None';\r\n\r\n    // /**æ­¥éª¤æ¡å®½åº¦ */\r\n    // @Input('step-width') stepWidth:number;\r\n\r\n    @HostBinding('class.f-component-wizard-fill') get wizardFill() {\r\n        return this.fill;\r\n    }\r\n    @HostBinding('class.f-component-wizard') basicClass = true;\r\n\r\n    @ContentChild(WizardHeaderTemplateDirective, { read: TemplateRef })\r\n    HeaderTemplate: TemplateRef<any>;\r\n    @ContentChild(WizardStepTemplateDirective, { read: TemplateRef })\r\n    StepTemplate: TemplateRef<any>;\r\n\r\n    @ViewChild('progressStep') progressStep;\r\n    // @ViewChild('wizardContent') wizardContent: ElementRef;\r\n    // @ViewChild('wizardHeader') wizardHeader: ElementRef;\r\n    //@ViewChild('wizardStep') wizardStep:ElementRef;\r\n\r\n    /**æ¯å¦æå¼ */\r\n    @Input() fill: boolean = true;\r\n    @Input() storedIndex:boolean = false;\r\n    @Input() storedIndexState:boolean = false;\r\n\r\n    private _currentPageId = '';\r\n    private cachedPageId:string;\r\n    //æ¯å¦ä¿æå½åè¿åº¦ç¶æ\r\n    private cachedCurrentPageIndex:number;\r\n    /**\r\n     * å½åå±ç¤ºpageçpageidå\r\n     *  ---------------------------------é®é¢ï¼ å¯è½åºç°é®é¢currentProgressIndexä¸currentPageIdä¸æ¯ä¸ä¸ª\r\n     * */\r\n    @Input()\r\n    get currentPageId(): string {\r\n        return this._currentPageId;\r\n    }\r\n    set currentPageId(pageid: string) {\r\n        //console.log('å½åé¡µé¢ActiveID' + pageid);\r\n        // å¦æå½åé¡µä¸è®¾ç½®é¡µæ¯åä¸ä¸ªé¡µä¸æ ·\r\n        if (pageid && this._currentPageId == pageid) {\r\n            return;\r\n        }\r\n\r\n        this.setActivePage(pageid);\r\n    }\r\n\r\n    /**\r\n     * æ­¥éª¤æ¡ä¿¡æ¯æ°æ®\r\n     *\r\n     *  */\r\n    tProgressData;\r\n    @Input()\r\n    set progressData(progressData) {\r\n        setTimeout(() => {\r\n            if(!progressData) {return;}\r\n            if(progressData && progressData.stepMessages && progressData.stepMessages.length){\r\n                if(progressData.activeIndex && progressData.activeIndex >= 0){\r\n                    if(progressData.activeIndex > progressData.stepMessages.length){\r\n                        progressData.activeIndex = 0;\r\n                    }\r\n                    const cachedStep = progressData.stepMessages[progressData.activeIndex];\r\n                    if(cachedStep){\r\n                        this.cachedPageId = cachedStep['id'];\r\n                    }\r\n                }\r\n                else{\r\n                    this.cachedPageId = progressData.stepMessages[0]['id'];\r\n                }\r\n            }\r\n            // console.log(this.cachedPageId);\r\n            this.tProgressData = progressData;\r\n            this.doAfterProgressData();\r\n        });\r\n    }\r\n    get progressData() {\r\n        return this.tProgressData;\r\n    }\r\n    _subStepData;\r\n    @Input()\r\n    set subStepData(value){\r\n        this._subStepData = value;\r\n    }\r\n    get subStepData(){\r\n        return this._subStepData;\r\n    }\r\n\r\n    // é¡µé¢å­å¨åè¡¨\r\n    pages: FarrisWizardPageComponent[] = [];\r\n    //å½åæ­¥éª¤æ¡activeç¶æçç´¢å¼\r\n    currentProgressIndex: number = 0;\r\n    //é»è®¤æ­¥éª¤æ¡\r\n    defaultProgressData = {\r\n        activeIndex: 0,\r\n        stepMessages:[]\r\n    }\r\n\r\n    // ç»æåå¯¼ï¼ä¼ épageid\r\n    @Output() stateChange = new EventEmitter<WizardEvent>();\r\n\r\n    private wizardState: Subject<WizardEvent>;\r\n\r\n    constructor(private wizardSer: WizardService) {\r\n        //------------------------------------------------é®é¢ï¼æªæå¼ç¨ï¼ä¸è½è¿æ ·å\r\n        // Object.assign(this, { type: 'pages' });\r\n        this.wizardState = this.wizardSer.getWizardState();\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.wizardState.subscribe((data: WizardEvent) => {\r\n            this.changeWizardState(data);\r\n        });\r\n        this.wizardSer.updatePageFill(this.fill);\r\n        //æ¹ååå¯¼æ¾ç¤ºæ­¥éª¤\r\n        this.wizardSer.changeActiveIndex.subscribe((num:number)=>{\r\n            let activeNum:number  = (num>= 0 && num < this.progressData.stepMessages.length)? num: 0\r\n            this.progressData = Object.assign({}, this.progressData, {\r\n                    activeIndex: activeNum\r\n            });\r\n        })\r\n    }\r\n    /**\r\n     * å­åç´ å·²ç»è¢«å è½½\r\n     */\r\n    ngAfterContentInit () {\r\n        setTimeout(() => {\r\n            if(this.stepPosition === 'None'){\r\n                if(this.pages.length){\r\n                    this.pages.forEach(page=>{\r\n\r\n                        if(this.defaultProgressData.stepMessages.find((item)=>{\r\n                            return item.id === page.pageId;\r\n                        })){\r\n                            return false;\r\n                        }\r\n\r\n                        const step = {\r\n                            id: page.pageId\r\n                        }\r\n                        this.defaultProgressData.stepMessages.push(step);\r\n                    })\r\n                    if(this.currentPageId){\r\n                        let stepIndex = this.defaultProgressData.stepMessages.findIndex((item)=>{\r\n                            return item.id === this.currentPageId;\r\n                        })\r\n                        if(stepIndex>=0){\r\n                            this.defaultProgressData.activeIndex = stepIndex;\r\n                        }\r\n                    }\r\n                }\r\n                this.tProgressData = this.defaultProgressData;\r\n                this.doAfterProgressData();\r\n            }\r\n            else{\r\n                // æ§è¡åå§å\r\n                this.setActivePage(this.currentPageId);\r\n                this.setProgressDataDisable(this.currentProgressIndex);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     *\r\n     * @param state  WizardEvent Finish,Cancel,Prev,Next\r\n     * @param fromPageId\r\n     * @param toPageId\r\n     */\r\n    changeWizardState(data: WizardEvent) {\r\n        switch (data.state) {\r\n            case WizardEventType.Prev:\r\n                // åå¯¼åå\r\n                this.progressStep.prevStep();\r\n                this.currentPageId = data.toPageId;\r\n                break;\r\n            case WizardEventType.Next:\r\n                // åå¯¼åå\r\n                this.progressStep.nextStep();\r\n                this.currentPageId = data.toPageId;\r\n                this.cachedPageId = data.toPageId;\r\n                break;\r\n            case WizardEventType.StepChange:\r\n                this.progressStep.goStep(this.wizardSer.getIndexByPageId(data.toPageId));\r\n                this.currentPageId = data.toPageId;\r\n                break;\r\n            //default:\r\n                //this.wizardStateChange.emit(data);\r\n        }\r\n        this.currentProgressIndex = this.progressStep.getCurrentStepIndex();\r\n        this.setProgressDataDisable(this.currentProgressIndex);\r\n        this.stateChange.emit(data);\r\n    }\r\n    /**\r\n     * æ·»å Pageç»ä»¶\r\n     * @param page\r\n     */\r\n    addPage(page: FarrisWizardPageComponent): void {\r\n        this.pages.push(page);\r\n        //----------------------------------------é®é¢ï¼æ­¤æ¶pageidè¿æ²¡æå¼ï¼è®¾ç½®å½åactiveï¼ç»ä¸å¨ngAfterViewInit\r\n        // if (this.currentPageId) {\r\n        //     page.active = this.currentPageId === page.pageid;\r\n        // } else {\r\n        //     page.active = this.pages.length === 1;\r\n        // }\r\n    }\r\n    /**\r\n     * ç¹å»stepæ­¥éª¤æ¡äºä»¶\r\n     */\r\n    stepClick(event) {\r\n        if(event.step.clickDisable || this._currentPageId == event.step['id']){return;}\r\n        this.wizardSer.updateWizardState(WizardEventType.StepChange, this._currentPageId, event.step['id']);\r\n        //this.currentProgressIndex = event.index;\r\n        //this.progressStep.goStep(event.index);\r\n    }\r\n    /**è®¾ç½®æ­¥éª¤æ¡ä¸å¯ç¹å»ç¶æ */\r\n    setProgressDataDisable(currentPageIndex){\r\n        if(this.tProgressData && this.tProgressData.stepMessages && this.tProgressData.stepMessages.length){\r\n            if(this.cachedPageId){\r\n                this.cachedCurrentPageIndex = this.tProgressData.stepMessages.findIndex((step)=>{\r\n                    return step.id === this.cachedPageId;\r\n                });\r\n            }\r\n            if(this.storedIndex && this.cachedCurrentPageIndex >= 0){\r\n                this.tProgressData.stepMessages.forEach((step,i) => {\r\n                    if(i <= this.cachedCurrentPageIndex){\r\n                        step.clickDisable = false;\r\n                    }\r\n                    else{\r\n                        step.clickDisable = true;\r\n                    }\r\n                });\r\n            }\r\n            else{\r\n                this.tProgressData.stepMessages.forEach((step,i) => {\r\n                    if(i <= currentPageIndex){\r\n                        step.clickDisable = false;\r\n                    }\r\n                    else{\r\n                        step.clickDisable = true;\r\n                    }\r\n                });\r\n            }\r\n\r\n            this.wizardSer.updateProgressData(this.tProgressData);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®å½åæ¾ç¤ºpage\r\n     */\r\n    private setActivePage(pageid?: string) {\r\n        if (this.pages[0] && !this.pages[0].getPageId()) {\r\n            this._currentPageId = pageid;\r\n            // if(!this.cachedPageId){\r\n            //     this.cachedPageId = this.pages[0].getPageId();\r\n            // }\r\n            return;\r\n        }\r\n        if(this.pages && this.pages.length){\r\n            if (!pageid) {\r\n                this.pages.forEach((page: FarrisWizardPageComponent) => {\r\n                    page.setPageActive(false);\r\n                });\r\n                this.pages[0].setPageActive(true);\r\n                this._currentPageId = this.pages[0].getPageId();\r\n            } else {\r\n                this.pages.forEach((page: FarrisWizardPageComponent) => {\r\n                    if (page.getPageId() === pageid) {\r\n                        page.setPageActive(true);\r\n                    } else {\r\n                        page.setPageActive(false);\r\n                    }\r\n                });\r\n                this._currentPageId = pageid;\r\n            }\r\n        }\r\n        this.wizardSer.updateCurrentPageId(this._currentPageId);\r\n    }\r\n\r\n    /**\r\n     * è¿åclass\r\n     */\r\n    getWizardPositionClass(): string {\r\n        let className = '';\r\n        switch (this.stepPosition) {\r\n            case 'Top':\r\n                className = 'f-component-wizard-step-top';\r\n                break;\r\n            case 'HeaderRight':\r\n                className = 'f-component-wizard-step-headerright';\r\n\r\n                break;\r\n            case 'PageLeft':\r\n                className = 'f-component-wizard-step-pageleft';\r\n                break;\r\n            case \"None\":\r\n                className = 'f-component-wizard-step-none';\r\n                break;\r\n            default:\r\n                className = '';\r\n        }\r\n        return className;\r\n    }\r\n    /**\r\n     * å¤æ­ä½ç½®\r\n     * @param value\r\n     */\r\n    isWizardPosition(value): boolean {\r\n        return this.stepPosition == value;\r\n    }\r\n    /** æ­¥éª¤æ¡ä¿¡æ¯ä¿®æ¹åï¼è°æ´é¡µé¢æ¾ç¤ºä¿¡æ¯*/\r\n    doAfterProgressData(){\r\n        this.wizardSer.updateProgressData(this.tProgressData);\r\n        if(this.tProgressData){\r\n            const activeIndex = this.tProgressData.activeIndex? this.tProgressData.activeIndex : 0;\r\n            this.currentProgressIndex = (activeIndex >= 0 && activeIndex < this.tProgressData.stepMessages.length) ? activeIndex: 0;\r\n            if(this.tProgressData.stepMessages&&this.tProgressData.stepMessages.length){\r\n                this.setActivePage(this.tProgressData.stepMessages[this.currentProgressIndex].id);\r\n            }\r\n            this.setProgressDataDisable(this.currentProgressIndex);\r\n        }\r\n    }\r\n\r\n    setWizardData(data){\r\n        this.wizardSer.setWizardData(data);\r\n    }\r\n\r\n}\r\n","import {\r\n    OnInit,\r\n    Component,\r\n    Input,\r\n    HostBinding,\r\n    Output,\r\n    EventEmitter,\r\n    AfterContentInit\r\n} from '@angular/core';\r\nimport { WizardComponent } from '../wizard/wizard.component';\r\nimport { PageService } from '../service/page.service';\r\n@Component({\r\n    selector: 'wizard-page',\r\n    template: '<ng-content></ng-content>',\r\n    styleUrls: ['./page.component.scss'],\r\n    providers: [PageService]\r\n})\r\nexport class FarrisWizardPageComponent implements OnInit,AfterContentInit {\r\n    // å¯ä¸æ è®°\r\n    @Input() pageId = '';\r\n    // é»è®¤class\r\n    @HostBinding('class.f-component-wizard-page') addClass = true;\r\n    @HostBinding('class.active') get activeCls() {\r\n        return this._active;\r\n    }\r\n    private _active = false;\r\n    // å½åéä¸­\r\n    @Input()\r\n    set active(value: boolean) {\r\n        this._active = value;\r\n        if (this.pageId) {\r\n            this.doAfterActive();\r\n        }\r\n    }\r\n    get active(): boolean {\r\n        return this._active;\r\n    }\r\n\r\n    @Output() pageSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n    wizardSet: WizardComponent;\r\n    constructor(wizardSet: WizardComponent, private pageSer: PageService) {\r\n        this.wizardSet = wizardSet;\r\n        this.wizardSet.addPage(this);\r\n    }\r\n    ngOnInit() {\r\n        //console.log('FarrisWizardPageComponentââ' + this.pageId);\r\n        this.pageSer.setPageId(this.pageId);\r\n    }\r\n    ngAfterContentInit(){\r\n       this.doAfterActive();\r\n    }\r\n    getPageId() {\r\n        return this.pageId;\r\n    }\r\n    /**\r\n     *\r\n     * @param value\r\n     */\r\n    setPageActive(value: boolean) {\r\n        if (this.active !== value) {\r\n            this.active = value;\r\n        }\r\n    }\r\n    /**\r\n     * å¤çActive\r\n     */\r\n    doAfterActive() {\r\n        this.pageSelected.emit({\r\n            pageId: this.pageId,\r\n            state: this.active\r\n        });\r\n        //console.log('FarrisWizardPageComponentââ' + this.pageid + this.active);\r\n        this.pageSer.activeState.next({\r\n            pageId: this.pageId,\r\n            state: this.active\r\n        });\r\n    }\r\n}\r\n","import {\r\n    Component,\r\n    OnInit,\r\n    Directive,\r\n    TemplateRef,\r\n    ContentChild,\r\n    Input,\r\n    HostBinding,\r\n    Output,\r\n    EventEmitter,\r\n    Optional\r\n} from '@angular/core';\r\n\r\nimport { PageService } from '../service/page.service';\r\nimport { WizardService } from '../service/wizard.service';\r\nimport { WizardEventType } from '../model/wizard.model';\r\n@Directive({\r\n    selector: '[wizardPageHeader]'\r\n})\r\nexport class wizardPageHeaderTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Directive({\r\n    selector: '[wizardPageContent]'\r\n})\r\nexport class wizardPageContentTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n}\r\n@Directive({\r\n    selector: '[wizardPageFooter]'\r\n})\r\nexport class wizardPageFooterTemplateDirective {\r\n    constructor(public template: TemplateRef<any>) {}\r\n}\r\n\r\n@Component({\r\n    selector: 'wizard-page-detail',\r\n    templateUrl: './page-detail.component.html',\r\n    styleUrls: ['./page-detail.component.scss']\r\n})\r\nexport class FarrisPageDetailComponent implements OnInit {\r\n    @HostBinding('class.f-component-wizard-page-detail') cls = true;\r\n    @HostBinding('class.f-component-wizard-page-detail-fill') get fill(){return this.wizardSer.getPageFill()};\r\n    private pageId = '';\r\n\r\n    @ContentChild(wizardPageHeaderTemplateDirective, { read: TemplateRef })\r\n    pageHeaderTemplate: TemplateRef<any>;\r\n    @ContentChild(wizardPageContentTemplateDirective, { read: TemplateRef })\r\n    pageContentTemplate: TemplateRef<any>;\r\n    @ContentChild(wizardPageFooterTemplateDirective, { read: TemplateRef })\r\n    pageFooterTemplate: TemplateRef<any>;\r\n\r\n    @Output() pagedetailSelected: EventEmitter<any> = new EventEmitter();\r\n\r\n    constructor(\r\n        private wizardSer: WizardService,\r\n        @Optional() private pageSer: PageService\r\n    ) {\r\n        if (!this.pageSer) {\r\n            this.pageSer = new PageService();\r\n        }\r\n        this.pageSer.activeState.subscribe(data => {\r\n            //console.log('FarrisPageDetailComponentââ' + this.pageId+'ââ'+data);\r\n            if(data.state){\r\n                this.pagedetailSelected.emit(data);\r\n            }\r\n            \r\n        });\r\n\r\n        \r\n    }\r\n\r\n    ngOnInit() {\r\n        this.pageId = this.pageSer.getPageId();\r\n    }\r\n\r\n    getPageId(): string {\r\n        return this.pageId;\r\n    }\r\n\r\n    getPrevPageId(): string {\r\n        return this.wizardSer.getPrePageId(this.pageId);\r\n    }\r\n\r\n    getWizardData(){\r\n        return this.wizardSer.getWizardData();\r\n    }\r\n\r\n    /**\r\n     * è·åæé¡µæ°æ®\r\n     */\r\n    getPageData(pageid = this.pageId): any {\r\n        return this.wizardSer.getPageData(pageid);\r\n    }\r\n    /**\r\n     * æ´æ°æé¡µæ°æ®\r\n     * @param data\r\n     */\r\n    setPageData(data: any, pageid = this.pageId) {\r\n        this.wizardSer.setPageData(data, pageid);\r\n    }\r\n    /**\r\n     * ä¸ä¸æ­¥\r\n     */\r\n    nextStep() {\r\n        this.wizardSer.updateWizardState(WizardEventType.Next, this.pageId);\r\n    }\r\n    /**\r\n     * ä¸ä¸æ­¥\r\n     */\r\n    prevStep() {\r\n        this.wizardSer.updateWizardState(WizardEventType.Prev, this.pageId);\r\n    }\r\n    /**\r\n     * ç»æåå¯¼\r\n     */\r\n    finishWizard() {\r\n        this.wizardSer.updateWizardState(WizardEventType.Finish, this.pageId);\r\n    }\r\n    /**\r\n     * åæ¶åå¯¼\r\n     */\r\n    cancelWizard() {\r\n        this.wizardSer.updateWizardState(WizardEventType.Cancel, this.pageId);\r\n    }\r\n}\r\n","import { NgModule, ModuleWithProviders } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProgressStepModule } from '@farris/ui-progress-step';\r\nimport {\r\n    WizardComponent,\r\n    WizardHeaderTemplateDirective,\r\n    WizardStepTemplateDirective\r\n} from './wizard/wizard.component';\r\nimport { FarrisWizardPageComponent } from './page/page.component';\r\nimport {\r\n    FarrisPageDetailComponent,\r\n    wizardPageHeaderTemplateDirective,\r\n    wizardPageContentTemplateDirective,\r\n    wizardPageFooterTemplateDirective\r\n} from './page-detail/page-detail.component';\r\nimport { WizardService } from './service/wizard.service';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        WizardComponent,\r\n        WizardHeaderTemplateDirective,\r\n        WizardStepTemplateDirective,\r\n        FarrisWizardPageComponent,\r\n        FarrisPageDetailComponent,\r\n        WizardStepTemplateDirective,\r\n        wizardPageHeaderTemplateDirective,\r\n        wizardPageContentTemplateDirective,\r\n        wizardPageFooterTemplateDirective\r\n    ],\r\n    imports: [CommonModule, ProgressStepModule],\r\n    exports: [\r\n        WizardComponent,\r\n        WizardHeaderTemplateDirective,\r\n        WizardStepTemplateDirective,\r\n        FarrisWizardPageComponent,\r\n        FarrisPageDetailComponent,\r\n        WizardStepTemplateDirective,\r\n        wizardPageHeaderTemplateDirective,\r\n        wizardPageContentTemplateDirective,\r\n        wizardPageFooterTemplateDirective\r\n    ],\r\n    providers: [WizardService]\r\n})\r\nexport class WizardModule {\r\n    // static forRoot(): ModuleWithProviders {\r\n    //   return {\r\n    //     ngModule: WizardModule,\r\n    //     providers: [PagesetConfig]\r\n    //   };\r\n    // }\r\n}\r\n"]}