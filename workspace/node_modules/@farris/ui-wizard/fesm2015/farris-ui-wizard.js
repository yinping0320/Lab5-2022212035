import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { ProgressStepModule } from '@farris/ui-progress-step';
import { Injectable, NgModule, Component, Directive, TemplateRef, ContentChild, Input, ViewChild, HostBinding, Output, EventEmitter, Optional, defineInjectable } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const WizardEventType = {
    Finish: 0,
    Cancel: 1,
    Prev: 2,
    Next: 3,
    StepChange: 4,
    ChangeIndex: 5,
};
WizardEventType[WizardEventType.Finish] = 'Finish';
WizardEventType[WizardEventType.Cancel] = 'Cancel';
WizardEventType[WizardEventType.Prev] = 'Prev';
WizardEventType[WizardEventType.Next] = 'Next';
WizardEventType[WizardEventType.StepChange] = 'StepChange';
WizardEventType[WizardEventType.ChangeIndex] = 'ChangeIndex';
class WizardEvent {
    /**
     * @param {?} state
     * @param {?} fromPageId
     * @param {?} toPageId
     */
    constructor(state, fromPageId, toPageId) {
        this.state = state;
        this.fromPageId = fromPageId;
        this.toPageId = toPageId;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WizardService {
    constructor() {
        this.wizardData = new Subject();
        // 保存数据
        this.wizardPagesData = {};
        //是否平铺
        this.pageFill = true;
        /**
         * 对象结构
         *  {
         *      "activeIndex":-1,
         * "stepMessages":[
         * {
         * "id":"deliverytime",
         * "title":"设置发货时间",
         * "icon":""
         * },....]
         * }
         */
        this.onlyProgressData = null;
        // 步骤条数据保持
        this.progressData = new Subject();
        // 当前向导状态
        this.wizardState = new Subject();
        // 修改向导步骤
        this.changeActiveIndex = new Subject();
        this.progressData.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.onlyProgressData = data;
        }));
    }
    //存储页面是否平铺
    /**
     * @param {?} fill
     * @return {?}
     */
    updatePageFill(fill) {
        this.pageFill = fill;
    }
    /**
     * @return {?}
     */
    getPageFill() {
        return this.pageFill;
    }
    /**
     * 更新向导状态
     * state: Finish,Cancel,Prev,Next
     * @param {?} state
     * @param {?} curPageId
     * @param {?=} stepToPageId
     * @return {?}
     */
    updateWizardState(state, curPageId, stepToPageId) {
        /** @type {?} */
        let toPageId = '';
        switch (state) {
            case WizardEventType.Prev:
                toPageId = this.getPrePageId(curPageId);
                break;
            case WizardEventType.Next:
                toPageId = this.getNextPageId(curPageId);
                break;
            case WizardEventType.StepChange:
                toPageId = stepToPageId ? stepToPageId : curPageId;
                break;
            case WizardEventType.ChangeIndex:
                toPageId = stepToPageId !== '' ? stepToPageId : curPageId;
                break;
            default:
                toPageId = curPageId;
        }
        // 只有页面变化时候，才改变
        if (!toPageId) {
            return;
        }
        this.currentPageId = toPageId;
        this.wizardState.next(new WizardEvent(state, curPageId, toPageId));
    }
    /**
     * 获取向导状态变化
     * @return {?}
     */
    getWizardState() {
        return this.wizardState;
    }
    /**
     * 获取整个向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @return {?}
     */
    getWizardData() {
        return this.wizardData;
    }
    /**
     * 设置向导用的数据
     * 场景：向导整体数据，在不同页之间通用
     * @param {?} data
     * @return {?}
     */
    setWizardData(data) {
        this.wizardData.next(data);
    }
    /**
     * 设置某页面数据
     * @param {?} data
     * @param {?=} pageid
     * @return {?}
     */
    setPageData(data, pageid) {
        /** @type {?} */
        let id = pageid ? pageid : this.currentPageId;
        this.wizardPagesData[id] = data;
    }
    /**
     * 获取某页面数据
     * @param {?} pageid
     * @return {?}
     */
    getPageData(pageid) {
        if (this.wizardPagesData.hasOwnProperty(pageid)) {
            return this.wizardPagesData[pageid];
        }
        return {};
    }
    // /**
    //  * 场景：Wizard组件初始化步骤条数据
    //  * @param data
    //  */
    // initProgressData(data) {
    //     this.progressData.next(data);
    // }
    /**
     * 目的：更新步骤条数据
     * 场景：PageDetail组件，需要更新步骤数据,刷新步骤条界面
     * @param {?} data
     * @return {?}
     */
    updateProgressData(data) {
        this.progressData.next(data);
    }
    /**
     * 目的：获取步骤条数据
     * 场景：PageDetail组件,查看步骤条数据
     * @return {?}
     */
    getProgressData() {
        return this.progressData;
    }
    /**
     * 存储currentpageid
     * @param {?} id
     * @return {?}
     */
    updateCurrentPageId(id) {
        this.currentPageId = id;
    }
    /**
     * @return {?}
     */
    getCurrentPageId() {
        return this.currentPageId;
    }
    /**
     * 获取上一页pageid
     * @param {?=} pageid
     * @return {?}
     */
    getPrePageId(pageid) {
        /** @type {?} */
        let id;
        id = pageid ? pageid : this.currentPageId;
        /** @type {?} */
        const pageIdIndex = this.getIndexByPageId(id);
        if (pageIdIndex <= 0) {
            return '';
        }
        /** @type {?} */
        let prePage = this.onlyProgressData.stepMessages[pageIdIndex - 1];
        return prePage['id'];
    }
    /**
     * 获取下一页
     * @param {?} pageid
     * @return {?}
     */
    getNextPageId(pageid) {
        /** @type {?} */
        const pagelen = this.onlyProgressData.stepMessages.length;
        /** @type {?} */
        const pageIdIndex = this.getIndexByPageId(pageid);
        if (pageIdIndex == pagelen - 1) {
            return '';
        }
        /** @type {?} */
        let nextPage = this.onlyProgressData.stepMessages[pageIdIndex + 1];
        return nextPage['id'];
    }
    /**
     * 是否是最后一页
     * @param {?} pageid
     * @return {?}
     */
    isLastPage(pageid) {
        /** @type {?} */
        const pagelen = this.onlyProgressData.length;
        /** @type {?} */
        let lastPage = this.onlyProgressData.stepMessages[pagelen - 1];
        return lastPage['id'] == pageid;
    }
    /**
     * 是否是当前页
     * @param {?} pageid
     * @return {?}
     */
    isCurrentPage(pageid) {
        /** @type {?} */
        const activeIndex = this.onlyProgressData.activeIndex;
        if (activeIndex < 0) {
            return false;
        }
        /** @type {?} */
        let curPage = this.onlyProgressData.stepMessages[activeIndex];
        return curPage['id'] == pageid;
    }
    /**
     * 是否是初始页
     * @param {?} pageid
     * @return {?}
     */
    isFirstPage(pageid) {
        if (this.onlyProgressData.activeIndex < 0) {
            return false;
        }
        return this.onlyProgressData.stepMessages[0]['id'] == pageid;
    }
    /**
     * 根据ID获取index
     * @param {?} pageid
     * @return {?}
     */
    getIndexByPageId(pageid) {
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            let pageIdIndex = this.onlyProgressData.stepMessages.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item['id'] == pageid) {
                    return true;
                }
                return false;
            }));
            return pageIdIndex;
        }
    }
    //20190211 服务内新增事件
    /**
     * 下一步
     * @return {?}
     */
    nextStep() {
        this.updateWizardState(WizardEventType.Next, this.currentPageId);
    }
    /**
     * 上一步
     * @return {?}
     */
    prevStep() {
        this.updateWizardState(WizardEventType.Prev, this.currentPageId);
    }
    /**
     * 结束向导
     * @return {?}
     */
    finishWizard() {
        this.updateWizardState(WizardEventType.Finish, this.currentPageId);
    }
    /**
     * 取消向导
     * @return {?}
     */
    cancelWizard() {
        this.updateWizardState(WizardEventType.Cancel, this.currentPageId);
    }
    /**
     * 修改向导显示步骤
     * @param {?} num 索引 0开始
     * @return {?}
     */
    setActiveIndex(num) {
        /** @type {?} */
        let toPageId;
        if (this.onlyProgressData && this.onlyProgressData.hasOwnProperty('stepMessages')) {
            /** @type {?} */
            let activeNum = (num >= 0 && num < this.onlyProgressData.stepMessages.length) ? num : 0;
            toPageId = this.onlyProgressData.stepMessages[activeNum]['id'];
        }
        this.updateWizardState(WizardEventType.ChangeIndex, this.currentPageId, toPageId);
        this.changeActiveIndex.next(num);
    }
}
WizardService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
WizardService.ctorParameters = () => [];
/** @nocollapse */ WizardService.ngInjectableDef = defineInjectable({ factory: function WizardService_Factory() { return new WizardService(); }, token: WizardService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PageService {
    constructor() {
        this.activeState = new Subject();
        this.tPageId = '';
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setPageId(value) {
        this.tPageId = value;
    }
    /**
     * @return {?}
     */
    getPageId() {
        return this.tPageId;
    }
}
PageService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
PageService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WizardHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
WizardHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wizardHeader]'
            },] }
];
/** @nocollapse */
WizardHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
class WizardStepTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
WizardStepTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wizardStep]'
            },] }
];
/** @nocollapse */
WizardStepTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
class WizardComponent {
    /**
     * @param {?} wizardSer
     */
    constructor(wizardSer) {
        this.wizardSer = wizardSer;
        /**
         * 步骤条是否可以点击
         */
        this.stepClickable = false;
        // 向导容器自定义样式
        this.stepCls = '';
        /**
         * 步骤条排列方向
         */
        this.direction = 'vertical';
        /**
         * 步骤条摆放位置
         * Top 最顶部
         * HeaderRight 标题右侧
         * PageLeft 页面左侧
         *
         */
        this.stepPosition = 'None';
        this.basicClass = true;
        // @ViewChild('wizardContent') wizardContent: ElementRef;
        // @ViewChild('wizardHeader') wizardHeader: ElementRef;
        //@ViewChild('wizardStep') wizardStep:ElementRef;
        /**
         * 是否撑开
         */
        this.fill = true;
        this.storedIndex = false;
        this.storedIndexState = false;
        this._currentPageId = '';
        // 页面存储列表
        this.pages = [];
        //当前步骤条active状态的索引
        this.currentProgressIndex = 0;
        //默认步骤条
        this.defaultProgressData = {
            activeIndex: 0,
            stepMessages: []
        };
        // 结束向导；传递pageid
        this.stateChange = new EventEmitter();
        //------------------------------------------------问题：未有引用；不能这样写
        // Object.assign(this, { type: 'pages' });
        this.wizardState = this.wizardSer.getWizardState();
    }
    // /**步骤条宽度 */
    // @Input('step-width') stepWidth:number;
    /**
     * @return {?}
     */
    get wizardFill() {
        return this.fill;
    }
    /**
     * 当前展示page的pageid名
     *  ---------------------------------问题： 可能出现问题currentProgressIndex与currentPageId不是一个
     *
     * @return {?}
     */
    get currentPageId() {
        return this._currentPageId;
    }
    /**
     * @param {?} pageid
     * @return {?}
     */
    set currentPageId(pageid) {
        //console.log('当前页面ActiveID' + pageid);
        // 如果当前页与设置页是同一个页一样
        if (pageid && this._currentPageId == pageid) {
            return;
        }
        this.setActivePage(pageid);
    }
    /**
     * @param {?} progressData
     * @return {?}
     */
    set progressData(progressData) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (!progressData) {
                return;
            }
            if (progressData && progressData.stepMessages && progressData.stepMessages.length) {
                if (progressData.activeIndex && progressData.activeIndex >= 0) {
                    if (progressData.activeIndex > progressData.stepMessages.length) {
                        progressData.activeIndex = 0;
                    }
                    /** @type {?} */
                    const cachedStep = progressData.stepMessages[progressData.activeIndex];
                    if (cachedStep) {
                        this.cachedPageId = cachedStep['id'];
                    }
                }
                else {
                    this.cachedPageId = progressData.stepMessages[0]['id'];
                }
            }
            // console.log(this.cachedPageId);
            this.tProgressData = progressData;
            this.doAfterProgressData();
        }));
    }
    /**
     * @return {?}
     */
    get progressData() {
        return this.tProgressData;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set subStepData(value) {
        this._subStepData = value;
    }
    /**
     * @return {?}
     */
    get subStepData() {
        return this._subStepData;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.wizardState.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.changeWizardState(data);
        }));
        this.wizardSer.updatePageFill(this.fill);
        //改变向导显示步骤
        this.wizardSer.changeActiveIndex.subscribe((/**
         * @param {?} num
         * @return {?}
         */
        (num) => {
            /** @type {?} */
            let activeNum = (num >= 0 && num < this.progressData.stepMessages.length) ? num : 0;
            this.progressData = Object.assign({}, this.progressData, {
                activeIndex: activeNum
            });
        }));
    }
    /**
     * 子元素已经被加载
     * @return {?}
     */
    ngAfterContentInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.stepPosition === 'None') {
                if (this.pages.length) {
                    this.pages.forEach((/**
                     * @param {?} page
                     * @return {?}
                     */
                    page => {
                        if (this.defaultProgressData.stepMessages.find((/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.id === page.pageId;
                        }))) {
                            return false;
                        }
                        /** @type {?} */
                        const step = {
                            id: page.pageId
                        };
                        this.defaultProgressData.stepMessages.push(step);
                    }));
                    if (this.currentPageId) {
                        /** @type {?} */
                        let stepIndex = this.defaultProgressData.stepMessages.findIndex((/**
                         * @param {?} item
                         * @return {?}
                         */
                        (item) => {
                            return item.id === this.currentPageId;
                        }));
                        if (stepIndex >= 0) {
                            this.defaultProgressData.activeIndex = stepIndex;
                        }
                    }
                }
                this.tProgressData = this.defaultProgressData;
                this.doAfterProgressData();
            }
            else {
                // 执行初始化
                this.setActivePage(this.currentPageId);
                this.setProgressDataDisable(this.currentProgressIndex);
            }
        }));
    }
    /**
     *
     * @param {?} data
     * @return {?}
     */
    changeWizardState(data) {
        switch (data.state) {
            case WizardEventType.Prev:
                // 向导向前
                this.progressStep.prevStep();
                this.currentPageId = data.toPageId;
                break;
            case WizardEventType.Next:
                // 向导向后
                this.progressStep.nextStep();
                this.currentPageId = data.toPageId;
                this.cachedPageId = data.toPageId;
                break;
            case WizardEventType.StepChange:
                this.progressStep.goStep(this.wizardSer.getIndexByPageId(data.toPageId));
                this.currentPageId = data.toPageId;
                break;
            //default:
            //this.wizardStateChange.emit(data);
        }
        this.currentProgressIndex = this.progressStep.getCurrentStepIndex();
        this.setProgressDataDisable(this.currentProgressIndex);
        this.stateChange.emit(data);
    }
    /**
     * 添加Page组件
     * @param {?} page
     * @return {?}
     */
    addPage(page) {
        this.pages.push(page);
        //----------------------------------------问题：此时pageid还没有值，设置当前active，统一在ngAfterViewInit
        // if (this.currentPageId) {
        //     page.active = this.currentPageId === page.pageid;
        // } else {
        //     page.active = this.pages.length === 1;
        // }
    }
    /**
     * 点击step步骤条事件
     * @param {?} event
     * @return {?}
     */
    stepClick(event) {
        if (event.step.clickDisable || this._currentPageId == event.step['id']) {
            return;
        }
        this.wizardSer.updateWizardState(WizardEventType.StepChange, this._currentPageId, event.step['id']);
        //this.currentProgressIndex = event.index;
        //this.progressStep.goStep(event.index);
    }
    /**
     * 设置步骤条不可点击状态
     * @param {?} currentPageIndex
     * @return {?}
     */
    setProgressDataDisable(currentPageIndex) {
        if (this.tProgressData && this.tProgressData.stepMessages && this.tProgressData.stepMessages.length) {
            if (this.cachedPageId) {
                this.cachedCurrentPageIndex = this.tProgressData.stepMessages.findIndex((/**
                 * @param {?} step
                 * @return {?}
                 */
                (step) => {
                    return step.id === this.cachedPageId;
                }));
            }
            if (this.storedIndex && this.cachedCurrentPageIndex >= 0) {
                this.tProgressData.stepMessages.forEach((/**
                 * @param {?} step
                 * @param {?} i
                 * @return {?}
                 */
                (step, i) => {
                    if (i <= this.cachedCurrentPageIndex) {
                        step.clickDisable = false;
                    }
                    else {
                        step.clickDisable = true;
                    }
                }));
            }
            else {
                this.tProgressData.stepMessages.forEach((/**
                 * @param {?} step
                 * @param {?} i
                 * @return {?}
                 */
                (step, i) => {
                    if (i <= currentPageIndex) {
                        step.clickDisable = false;
                    }
                    else {
                        step.clickDisable = true;
                    }
                }));
            }
            this.wizardSer.updateProgressData(this.tProgressData);
        }
    }
    /**
     * 设置当前显示page
     * @private
     * @param {?=} pageid
     * @return {?}
     */
    setActivePage(pageid) {
        if (this.pages[0] && !this.pages[0].getPageId()) {
            this._currentPageId = pageid;
            // if(!this.cachedPageId){
            //     this.cachedPageId = this.pages[0].getPageId();
            // }
            return;
        }
        if (this.pages && this.pages.length) {
            if (!pageid) {
                this.pages.forEach((/**
                 * @param {?} page
                 * @return {?}
                 */
                (page) => {
                    page.setPageActive(false);
                }));
                this.pages[0].setPageActive(true);
                this._currentPageId = this.pages[0].getPageId();
            }
            else {
                this.pages.forEach((/**
                 * @param {?} page
                 * @return {?}
                 */
                (page) => {
                    if (page.getPageId() === pageid) {
                        page.setPageActive(true);
                    }
                    else {
                        page.setPageActive(false);
                    }
                }));
                this._currentPageId = pageid;
            }
        }
        this.wizardSer.updateCurrentPageId(this._currentPageId);
    }
    /**
     * 返回class
     * @return {?}
     */
    getWizardPositionClass() {
        /** @type {?} */
        let className = '';
        switch (this.stepPosition) {
            case 'Top':
                className = 'f-component-wizard-step-top';
                break;
            case 'HeaderRight':
                className = 'f-component-wizard-step-headerright';
                break;
            case 'PageLeft':
                className = 'f-component-wizard-step-pageleft';
                break;
            case "None":
                className = 'f-component-wizard-step-none';
                break;
            default:
                className = '';
        }
        return className;
    }
    /**
     * 判断位置
     * @param {?} value
     * @return {?}
     */
    isWizardPosition(value) {
        return this.stepPosition == value;
    }
    /**
     * 步骤条信息修改后，调整页面显示信息
     * @return {?}
     */
    doAfterProgressData() {
        this.wizardSer.updateProgressData(this.tProgressData);
        if (this.tProgressData) {
            /** @type {?} */
            const activeIndex = this.tProgressData.activeIndex ? this.tProgressData.activeIndex : 0;
            this.currentProgressIndex = (activeIndex >= 0 && activeIndex < this.tProgressData.stepMessages.length) ? activeIndex : 0;
            if (this.tProgressData.stepMessages && this.tProgressData.stepMessages.length) {
                this.setActivePage(this.tProgressData.stepMessages[this.currentProgressIndex].id);
            }
            this.setProgressDataDisable(this.currentProgressIndex);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    setWizardData(data) {
        this.wizardSer.setWizardData(data);
    }
}
WizardComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-wizard',
                template: "<div class=\"f-wizard\" [ngClass]=\"getWizardPositionClass()\">\r\n    <ng-container *ngIf=\"isWizardPosition('Top')\">\r\n        <ng-container [ngTemplateOutlet]=\"wizardStepTemplate\"></ng-container>\r\n    </ng-container>\r\n    <ng-container *ngIf=\"isWizardPosition('None')\">\r\n        <div class=\"d-none\">\r\n            <ng-container [ngTemplateOutlet]=\"wizardStepTemplate\"></ng-container>\r\n        </div>\r\n    </ng-container>\r\n\r\n    <div class=\"f-wizard-header\" #wizardHeader *ngIf=\"HeaderTemplate || isWizardPosition('HeaderRight')\">\r\n        <ng-container [ngTemplateOutlet]=\"HeaderTemplate\"></ng-container>\r\n        <ng-container *ngIf=\"isWizardPosition('HeaderRight')\">\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"wizardStepTemplate\"\r\n            ></ng-container>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <div class=\"f-wizard-content\" #wizardContent>\r\n        <ng-container *ngIf=\"isWizardPosition('PageLeft')\">\r\n            <ng-container\r\n                [ngTemplateOutlet]=\"wizardStepTemplate\"\r\n            ></ng-container>\r\n        </ng-container>\r\n        <div class=\"f-wizard-pages\">\r\n            <ng-content select=\"wizard-page\"></ng-content>\r\n        </div>\r\n    </div>\r\n</div>\r\n<ng-template #wizardStepTemplate>\r\n    <div class=\"f-wizard-step\" [ngClass]=\"stepCls\">\r\n        <farris-progress-step\r\n            #progressStep\r\n            [stepData]=\"tProgressData\"\r\n            [direction]=\"direction\"\r\n            [subStepData]=\"subStepData\"\r\n            [storedIndexState]=\"storedIndexState\"\r\n            (stepClick)=\"stepClick($event)\"\r\n            [clickable]=\"stepClickable\"\r\n        >\r\n            <ng-container *ngIf=\"StepTemplate\">\r\n                <ng-template\r\n                    progressStepItem\r\n                    let-step=\"step\"\r\n                    let-i=\"index\"\r\n                    let-length=\"length\"\r\n                    let-activeIndex=\"activeIndex\"\r\n                    let-direction=\"direction\"\r\n                >\r\n                    <ng-container\r\n                        [ngTemplateOutlet]=\"StepTemplate\"\r\n                        [ngTemplateOutletContext]=\"{\r\n                            step: step,\r\n                            index: i,\r\n                            length: length,\r\n                            activeIndex: activeIndex,\r\n                            direction: direction\r\n                        }\"\r\n                    ></ng-container>\r\n                </ng-template>\r\n            </ng-container>\r\n        </farris-progress-step>\r\n    </div>\r\n</ng-template>\r\n",
                styles: [":host.f-component-wizard{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-height:100px}:host.f-component-wizard.f-component-wizard-fill{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;height:100%}:host.f-component-wizard.f-component-wizard-fill .f-wizard{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow-y:hidden}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-header{flex-shrink:0}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-content{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow:hidden}:host.f-component-wizard.f-component-wizard-fill .f-wizard .f-wizard-content .f-wizard-pages{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;overflow:hidden}:host.f-component-wizard .f-wizard{position:relative}:host.f-component-wizard .f-wizard.f-component-wizard-step-pageleft .f-wizard-content{-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row}:host.f-component-wizard .f-wizard.f-component-wizard-step-pageleft .f-wizard-step{min-width:165px;padding:18px 24px;box-shadow:0 2px 4px 0 rgba(0,0,0,.1);overflow:auto}:host.f-component-wizard .f-wizard.f-component-wizard-step-headerright .f-wizard-header{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center}:host.f-component-wizard .f-wizard.f-component-wizard-step-headerright .f-wizard-header .f-wizard-step{-webkit-box-flex:1;flex:1 1 auto;text-align:right}"]
            }] }
];
/** @nocollapse */
WizardComponent.ctorParameters = () => [
    { type: WizardService }
];
WizardComponent.propDecorators = {
    stepClickable: [{ type: Input }],
    stepCls: [{ type: Input }],
    direction: [{ type: Input, args: ['stepDirection',] }],
    stepPosition: [{ type: Input, args: ['stepPosition',] }],
    wizardFill: [{ type: HostBinding, args: ['class.f-component-wizard-fill',] }],
    basicClass: [{ type: HostBinding, args: ['class.f-component-wizard',] }],
    HeaderTemplate: [{ type: ContentChild, args: [WizardHeaderTemplateDirective, { read: TemplateRef },] }],
    StepTemplate: [{ type: ContentChild, args: [WizardStepTemplateDirective, { read: TemplateRef },] }],
    progressStep: [{ type: ViewChild, args: ['progressStep',] }],
    fill: [{ type: Input }],
    storedIndex: [{ type: Input }],
    storedIndexState: [{ type: Input }],
    currentPageId: [{ type: Input }],
    progressData: [{ type: Input }],
    subStepData: [{ type: Input }],
    stateChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisWizardPageComponent {
    /**
     * @param {?} wizardSet
     * @param {?} pageSer
     */
    constructor(wizardSet, pageSer) {
        this.pageSer = pageSer;
        // 唯一标记
        this.pageId = '';
        // 默认class
        this.addClass = true;
        this._active = false;
        this.pageSelected = new EventEmitter();
        this.wizardSet = wizardSet;
        this.wizardSet.addPage(this);
    }
    /**
     * @return {?}
     */
    get activeCls() {
        return this._active;
    }
    // 当前选中
    /**
     * @param {?} value
     * @return {?}
     */
    set active(value) {
        this._active = value;
        if (this.pageId) {
            this.doAfterActive();
        }
    }
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        //console.log('FarrisWizardPageComponent——' + this.pageId);
        this.pageSer.setPageId(this.pageId);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.doAfterActive();
    }
    /**
     * @return {?}
     */
    getPageId() {
        return this.pageId;
    }
    /**
     *
     * @param {?} value
     * @return {?}
     */
    setPageActive(value) {
        if (this.active !== value) {
            this.active = value;
        }
    }
    /**
     * 处理Active
     * @return {?}
     */
    doAfterActive() {
        this.pageSelected.emit({
            pageId: this.pageId,
            state: this.active
        });
        //console.log('FarrisWizardPageComponent——' + this.pageid + this.active);
        this.pageSer.activeState.next({
            pageId: this.pageId,
            state: this.active
        });
    }
}
FarrisWizardPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'wizard-page',
                template: '<ng-content></ng-content>',
                providers: [PageService],
                styles: [":host.f-component-wizard-page{display:none;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;position:relative}:host.f-component-wizard-page.active{display:-webkit-box;display:flex}"]
            }] }
];
/** @nocollapse */
FarrisWizardPageComponent.ctorParameters = () => [
    { type: WizardComponent },
    { type: PageService }
];
FarrisWizardPageComponent.propDecorators = {
    pageId: [{ type: Input }],
    addClass: [{ type: HostBinding, args: ['class.f-component-wizard-page',] }],
    activeCls: [{ type: HostBinding, args: ['class.active',] }],
    active: [{ type: Input }],
    pageSelected: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class wizardPageHeaderTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
wizardPageHeaderTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wizardPageHeader]'
            },] }
];
/** @nocollapse */
wizardPageHeaderTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
class wizardPageContentTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
wizardPageContentTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wizardPageContent]'
            },] }
];
/** @nocollapse */
wizardPageContentTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
class wizardPageFooterTemplateDirective {
    /**
     * @param {?} template
     */
    constructor(template) {
        this.template = template;
    }
}
wizardPageFooterTemplateDirective.decorators = [
    { type: Directive, args: [{
                selector: '[wizardPageFooter]'
            },] }
];
/** @nocollapse */
wizardPageFooterTemplateDirective.ctorParameters = () => [
    { type: TemplateRef }
];
class FarrisPageDetailComponent {
    /**
     * @param {?} wizardSer
     * @param {?} pageSer
     */
    constructor(wizardSer, pageSer) {
        this.wizardSer = wizardSer;
        this.pageSer = pageSer;
        this.cls = true;
        this.pageId = '';
        this.pagedetailSelected = new EventEmitter();
        if (!this.pageSer) {
            this.pageSer = new PageService();
        }
        this.pageSer.activeState.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            //console.log('FarrisPageDetailComponent——' + this.pageId+'——'+data);
            if (data.state) {
                this.pagedetailSelected.emit(data);
            }
        }));
    }
    /**
     * @return {?}
     */
    get fill() { return this.wizardSer.getPageFill(); }
    ;
    /**
     * @return {?}
     */
    ngOnInit() {
        this.pageId = this.pageSer.getPageId();
    }
    /**
     * @return {?}
     */
    getPageId() {
        return this.pageId;
    }
    /**
     * @return {?}
     */
    getPrevPageId() {
        return this.wizardSer.getPrePageId(this.pageId);
    }
    /**
     * @return {?}
     */
    getWizardData() {
        return this.wizardSer.getWizardData();
    }
    /**
     * 获取某页数据
     * @param {?=} pageid
     * @return {?}
     */
    getPageData(pageid = this.pageId) {
        return this.wizardSer.getPageData(pageid);
    }
    /**
     * 更新某页数据
     * @param {?} data
     * @param {?=} pageid
     * @return {?}
     */
    setPageData(data, pageid = this.pageId) {
        this.wizardSer.setPageData(data, pageid);
    }
    /**
     * 下一步
     * @return {?}
     */
    nextStep() {
        this.wizardSer.updateWizardState(WizardEventType.Next, this.pageId);
    }
    /**
     * 上一步
     * @return {?}
     */
    prevStep() {
        this.wizardSer.updateWizardState(WizardEventType.Prev, this.pageId);
    }
    /**
     * 结束向导
     * @return {?}
     */
    finishWizard() {
        this.wizardSer.updateWizardState(WizardEventType.Finish, this.pageId);
    }
    /**
     * 取消向导
     * @return {?}
     */
    cancelWizard() {
        this.wizardSer.updateWizardState(WizardEventType.Cancel, this.pageId);
    }
}
FarrisPageDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'wizard-page-detail',
                template: "<div class=\"f-component-wizard-page-detail-header\" *ngIf=\"pageHeaderTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageHeaderTemplate\"></ng-container>\r\n</div>\r\n<!-- <div class=\"page-message\">\r\n                <ng-container [ngTemplateOutlet]=\"pageMessageTemplate\"></ng-container>\r\n        </div> -->\r\n<div class=\"f-component-wizard-page-detail-content\" *ngIf=\"pageContentTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageContentTemplate\"></ng-container>\r\n</div>\r\n<div class=\"f-component-wizard-page-detail-content\" *ngIf=\"!pageContentTemplate\">\r\n    <ng-content></ng-content>\r\n</div>\r\n<div class=\"f-component-wizard-page-detail-footer\" *ngIf=\"pageFooterTemplate\">\r\n    <ng-container [ngTemplateOutlet]=\"pageFooterTemplate\"></ng-container>\r\n</div>\r\n",
                styles: [":host.f-component-wizard-page-detail-fill{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-footer,:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-headeer{flex-shrink:0}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-content{-webkit-box-flex:1;flex-grow:1;flex-shrink:1;flex-basis:0;overflow:auto}:host.f-component-wizard-page-detail-fill .f-component-wizard-page-detail-footer{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:end;justify-content:flex-end}"]
            }] }
];
/** @nocollapse */
FarrisPageDetailComponent.ctorParameters = () => [
    { type: WizardService },
    { type: PageService, decorators: [{ type: Optional }] }
];
FarrisPageDetailComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.f-component-wizard-page-detail',] }],
    fill: [{ type: HostBinding, args: ['class.f-component-wizard-page-detail-fill',] }],
    pageHeaderTemplate: [{ type: ContentChild, args: [wizardPageHeaderTemplateDirective, { read: TemplateRef },] }],
    pageContentTemplate: [{ type: ContentChild, args: [wizardPageContentTemplateDirective, { read: TemplateRef },] }],
    pageFooterTemplate: [{ type: ContentChild, args: [wizardPageFooterTemplateDirective, { read: TemplateRef },] }],
    pagedetailSelected: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WizardModule {
}
WizardModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    WizardComponent,
                    WizardHeaderTemplateDirective,
                    WizardStepTemplateDirective,
                    FarrisWizardPageComponent,
                    FarrisPageDetailComponent,
                    WizardStepTemplateDirective,
                    wizardPageHeaderTemplateDirective,
                    wizardPageContentTemplateDirective,
                    wizardPageFooterTemplateDirective
                ],
                imports: [CommonModule, ProgressStepModule],
                exports: [
                    WizardComponent,
                    WizardHeaderTemplateDirective,
                    WizardStepTemplateDirective,
                    FarrisWizardPageComponent,
                    FarrisPageDetailComponent,
                    WizardStepTemplateDirective,
                    wizardPageHeaderTemplateDirective,
                    wizardPageContentTemplateDirective,
                    wizardPageFooterTemplateDirective
                ],
                providers: [WizardService]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { WizardService, PageService, WizardEventType, WizardEvent, WizardHeaderTemplateDirective, WizardStepTemplateDirective, WizardComponent, WizardModule, FarrisWizardPageComponent, wizardPageHeaderTemplateDirective, wizardPageContentTemplateDirective, wizardPageFooterTemplateDirective, FarrisPageDetailComponent };

//# sourceMappingURL=farris-ui-wizard.js.map