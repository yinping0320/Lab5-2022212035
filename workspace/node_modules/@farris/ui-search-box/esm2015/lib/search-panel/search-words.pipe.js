/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, Pipe } from '@angular/core';
import { SearchBoxComponent } from '../search-box.component';
export class SearchWordPipe {
    /**
     * @param {?} injector
     * @param {?} searchBoxRef
     */
    constructor(injector, searchBoxRef) {
        this.injector = injector;
        this.searchBoxRef = searchBoxRef;
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    transform(value, ...args) {
        if (value !== undefined && value !== null) {
            /** @type {?} */
            const relationStr = this.searchBoxRef.localeSer.getValue('searchbox.relation.or');
            /** @type {?} */
            const arr = value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.trim()));
            return arr.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                return n + (i === arr.length - 1 ? '' : '<span class="text-muted" style="margin: 0 5px;"> ' + relationStr + ' </span>');
            })).join('');
        }
        return '';
    }
}
SearchWordPipe.decorators = [
    { type: Pipe, args: [{
                name: 'searchwords'
            },] }
];
/** @nocollapse */
SearchWordPipe.ctorParameters = () => [
    { type: Injector },
    { type: SearchBoxComponent }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchWordPipe.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchWordPipe.prototype.searchBoxRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXdvcmRzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNlYXJjaC1ib3gvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoLXBhbmVsL3NlYXJjaC13b3Jkcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFNN0QsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBRXZCLFlBQW9CLFFBQWtCLEVBQVcsWUFBZ0M7UUFBN0QsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFXLGlCQUFZLEdBQVosWUFBWSxDQUFvQjtJQUFJLENBQUM7Ozs7OztJQUV0RixTQUFTLENBQUMsS0FBVSxFQUFFLEdBQUcsSUFBVztRQUNoQyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTs7a0JBQ2pDLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsdUJBQXVCLENBQUM7O2tCQUMzRSxHQUFHLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNOzs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLEVBQUM7WUFDekQsT0FBTyxHQUFHLENBQUMsR0FBRzs7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDcEIsT0FBTyxDQUFDLEdBQUssQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLE1BQU0sR0FBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsbURBQW1ELEdBQUUsV0FBVyxHQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQzNILENBQUMsRUFBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUNmO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7WUFsQkosSUFBSSxTQUFDO2dCQUNGLElBQUksRUFBRSxhQUFhO2FBQ3RCOzs7O1lBTFEsUUFBUTtZQUNSLGtCQUFrQjs7Ozs7OztJQVFYLGtDQUEwQjs7Ozs7SUFBRyxzQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTZWFyY2hCb3hDb21wb25lbnQgfSBmcm9tICcuLi9zZWFyY2gtYm94LmNvbXBvbmVudCc7XHJcblxyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAnc2VhcmNod29yZHMnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgU2VhcmNoV29yZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgIHByaXZhdGUgc2VhcmNoQm94UmVmOiBTZWFyY2hCb3hDb21wb25lbnQsKSB7fVxyXG5cclxuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpb25TdHIgPSB0aGlzLnNlYXJjaEJveFJlZi5sb2NhbGVTZXIuZ2V0VmFsdWUoJ3NlYXJjaGJveC5yZWxhdGlvbi5vcicpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSB2YWx1ZS50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIobiA9PiBuLnRyaW0oKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnIubWFwKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbiAgKyAgKGkgPT09IGFyci5sZW5ndGggLTEgPyAnJyA6ICc8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWRcIiBzdHlsZT1cIm1hcmdpbjogMCA1cHg7XCI+ICcrIHJlbGF0aW9uU3RyICsnIDwvc3Bhbj4nKTtcclxuICAgICAgICAgICAgfSkuam9pbignJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn0iXX0=