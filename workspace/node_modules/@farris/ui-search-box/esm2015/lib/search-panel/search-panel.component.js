/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Injector, Input, Output, ViewChild, ViewEncapsulation } from '@angular/core';
export class SearchPanelComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.fields = [];
        this.maxItems = 5;
        this.searchKeyWord = '';
        this.itemClick = new EventEmitter();
        this.closepanel = new EventEmitter();
        this.mouseDown = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} items
     * @return {?}
     */
    loadData(items) {
        this.fields = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onFieldItemClick($event, item) {
        $event.preventDefault();
        this.itemClick.emit({ data: item, evnet: $event });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveItem(index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        this.searchKeyWord = val;
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClosePanel($event) {
        $event.stopPropagation();
        this.closepanel.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.mouseDown.emit($event);
    }
}
SearchPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-panel',
                template: "<div class=\"d-flex flex-column px-2\" style=\"width: 100%;height:100%;\" #itemsContainer (mousedown)=\"onMouseDown($event)\">\r\n    <div class=\"search-tip-info d-flex flex-row align-items-center\" style=\"height: auto;line-height: normal;padding:7px\" >{{'searchbox.tips' | locale}} <i class=\"f-icon f-icon-close\" (click)=\"onClosePanel($event)\"></i></div>\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\">\r\n            <li class=\"list-group-item list-group-item-action d-flex flex-row\" [class.active]=\"activeIndex === i\" \r\n                    *ngFor=\"let item of fields; index as i\" (click)=\"onFieldItemClick($event, item)\">\r\n                <span style=\"min-width: 60px; text-align:right\" title=\"{{item.name}} ({{ item.code }})\">{{ item.name }} </span>\r\n                <span class=\"mx-2 text-muted\" >{{'searchbox.contain' | locale}}</span>\r\n                <div class=\"f-utils-fill text-primary search-box-keyword \" [innerHTML]=\" searchKeyWord | searchwords | safe: 'html' \"></div> \r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SearchPanelComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchPanelComponent.propDecorators = {
    fields: [{ type: Input }],
    maxItems: [{ type: Input }],
    searchKeyWord: [{ type: Input }],
    itemClick: [{ type: Output }],
    closepanel: [{ type: Output }],
    mouseDown: [{ type: Output }],
    itemsContainer: [{ type: ViewChild, args: ['itemsContainer',] }],
    onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SearchPanelComponent.prototype.fields;
    /** @type {?} */
    SearchPanelComponent.prototype.maxItems;
    /** @type {?} */
    SearchPanelComponent.prototype.searchKeyWord;
    /** @type {?} */
    SearchPanelComponent.prototype.itemClick;
    /** @type {?} */
    SearchPanelComponent.prototype.closepanel;
    /** @type {?} */
    SearchPanelComponent.prototype.mouseDown;
    /** @type {?} */
    SearchPanelComponent.prototype.itemsContainer;
    /** @type {?} */
    SearchPanelComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    SearchPanelComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchPanelComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktc2VhcmNoLWJveC8iLCJzb3VyY2VzIjpbImxpYi9zZWFyY2gtcGFuZWwvc2VhcmNoLXBhbmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFlLFlBQVksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFTakwsTUFBTSxPQUFPLG9CQUFvQjs7Ozs7SUFjN0IsWUFBb0IsUUFBa0IsRUFBVSxHQUFzQjtRQUFsRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFaN0QsV0FBTSxHQUF1QixFQUFFLENBQUM7UUFDaEMsYUFBUSxHQUFHLENBQUMsQ0FBQztRQUNiLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBRWxCLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQy9CLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ2hDLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSXpDLGdCQUFXLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFFeUQsQ0FBQzs7Ozs7SUFHM0UsT0FBTyxDQUFDLE1BQWtCO1FBQ3RCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsUUFBUSxLQUFLLENBQUM7Ozs7O0lBRWQsUUFBUSxDQUFDLEtBQVU7UUFDZixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztRQUVwQixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4QixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQzVCO0lBQ0wsQ0FBQzs7Ozs7O0lBRUQsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLElBQUk7UUFDekIsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7OztJQUVELFFBQVEsQ0FBQyxHQUFHO1FBQ1IsSUFBSSxDQUFDLGFBQWEsR0FBRyxHQUFHLENBQUM7UUFDekIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7OztJQUVELFlBQVksQ0FBQyxNQUFrQjtRQUMzQixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMzQixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxNQUFrQjtRQUMxQixNQUFNLENBQUMsY0FBYyxFQUFFLENBQUM7UUFDeEIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBRXpCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hDLENBQUM7OztZQWhFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGNBQWM7Z0JBQ3hCLDJwQ0FBNEM7Z0JBQzVDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2FBQ3hDOzs7O1lBUDJGLFFBQVE7WUFBM0YsaUJBQWlCOzs7cUJBV3JCLEtBQUs7dUJBQ0wsS0FBSzs0QkFDTCxLQUFLO3dCQUVMLE1BQU07eUJBQ04sTUFBTTt3QkFDTixNQUFNOzZCQUVOLFNBQVMsU0FBQyxnQkFBZ0I7c0JBTTFCLFlBQVksU0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFkckMsc0NBQXlDOztJQUN6Qyx3Q0FBc0I7O0lBQ3RCLDZDQUE0Qjs7SUFFNUIseUNBQXlDOztJQUN6QywwQ0FBMEM7O0lBQzFDLHlDQUF5Qzs7SUFFekMsOENBQTZEOztJQUU3RCwyQ0FBaUI7Ozs7O0lBRUwsd0NBQTBCOzs7OztJQUFFLG1DQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkLCBWaWV3RW5jYXBzdWxhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZCB9IGZyb20gJy4uL3NlYXJjaC1ib3gudHlwZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NlYXJjaC1wYW5lbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLXBhbmVsLmNvbXBvbmVudC5odG1sJyxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hQYW5lbENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgZmllbGRzOiBBcnJheTxTZWFyY2hGaWVsZD4gPSBbXTtcclxuICAgIEBJbnB1dCgpIG1heEl0ZW1zID0gNTtcclxuICAgIEBJbnB1dCgpIHNlYXJjaEtleVdvcmQgPSAnJztcclxuXHJcbiAgICBAT3V0cHV0KCkgaXRlbUNsaWNrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsb3NlcGFuZWwgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgbW91c2VEb3duID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2l0ZW1zQ29udGFpbmVyJykgaXRlbXNDb250YWluZXI6IEVsZW1lbnRSZWY8YW55PjtcclxuXHJcbiAgICBhY3RpdmVJbmRleCA9IC0xO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bicsIFsnJGV2ZW50J10pXHJcbiAgICBvbkNsaWNrKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHsgfVxyXG5cclxuICAgIGxvYWREYXRhKGl0ZW1zOiBhbnkpIHtcclxuICAgICAgICB0aGlzLmZpZWxkcyA9IGl0ZW1zO1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRmllbGRJdGVtQ2xpY2soJGV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2suZW1pdCh7ZGF0YTogaXRlbSwgZXZuZXQ6ICRldmVudH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZUl0ZW0oaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleDtcclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNldFZhbHVlKHZhbCkge1xyXG4gICAgICAgIHRoaXMuc2VhcmNoS2V5V29yZCA9IHZhbDtcclxuICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbG9zZVBhbmVsKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB0aGlzLmNsb3NlcGFuZWwuZW1pdCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTW91c2VEb3duKCRldmVudDogTW91c2VFdmVudCkge1xyXG4gICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgdGhpcy5tb3VzZURvd24uZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG59Il19