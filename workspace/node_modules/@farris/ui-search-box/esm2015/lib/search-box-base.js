/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ElementRef, Injector, Optional, Renderer2 } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
import { SEARCH_BOX_LOCALE } from './search-box.locale';
export class SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     */
    constructor(el, injector, overLayService, cd) {
        this.el = el;
        this.injector = injector;
        this.overLayService = overLayService;
        this.cd = cd;
        this.commonUtils = null;
        this.render = this.injector.get(Renderer2);
        if (!overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
        this.localeSer = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (this.localeSer) {
            this.localeSer.setLocaleData(SEARCH_BOX_LOCALE);
        }
    }
}
/** @nocollapse */
SearchBoxBase.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
if (false) {
    /** @type {?} */
    SearchBoxBase.prototype.commonUtils;
    /** @type {?} */
    SearchBoxBase.prototype.render;
    /** @type {?} */
    SearchBoxBase.prototype.localeSer;
    /** @type {?} */
    SearchBoxBase.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    SearchBoxBase.prototype.injector;
    /** @type {?} */
    SearchBoxBase.prototype.overLayService;
    /**
     * @type {?}
     * @protected
     */
    SearchBoxBase.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1zZWFyY2gtYm94LyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC1ib3gtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFhLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhELE1BQU0sT0FBTyxhQUFhOzs7Ozs7O0lBS3RCLFlBQW1CLEVBQWMsRUFBWSxRQUFrQixFQUFxQixjQUFvQyxFQUFZLEVBQXFCO1FBQXRJLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQXFCLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtRQUFZLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBSGxKLGdCQUFXLEdBQWdCLElBQUksQ0FBQztRQUluQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7Ozs7WUF0QmtDLFVBQVU7WUFBRSxRQUFRO1lBQ3JDLG9CQUFvQix1QkFTNEIsUUFBUTtZQVZyRSxpQkFBaUI7Ozs7SUFPdEIsb0NBQXVDOztJQUN2QywrQkFBeUI7O0lBQ3pCLGtDQUErQjs7SUFDbkIsMkJBQXFCOzs7OztJQUFFLGlDQUE0Qjs7SUFBRSx1Q0FBdUQ7Ozs7O0lBQUUsMkJBQStCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIE9wdGlvbmFsLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbHMsIE92ZXJMYXlIaWRkZW5TZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBTRUFSQ0hfQk9YX0xPQ0FMRSB9IGZyb20gJy4vc2VhcmNoLWJveC5sb2NhbGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFNlYXJjaEJveEJhc2Uge1xyXG5cclxuICAgIHB1YmxpYyBjb21tb25VdGlsczogQ29tbW9uVXRpbHMgPSBudWxsO1xyXG4gICAgcHVibGljIHJlbmRlcjogUmVuZGVyZXIyO1xyXG4gICAgcHVibGljIGxvY2FsZVNlcjogTG9jYWxlU2VydmljZVxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmLCBwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLCBAT3B0aW9uYWwoKSBwdWJsaWMgb3ZlckxheVNlcnZpY2U6IE92ZXJMYXlIaWRkZW5TZXJ2aWNlLCBwcm90ZWN0ZWQgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIgPSB0aGlzLmluamVjdG9yLmdldChSZW5kZXJlcjIpO1xyXG5cclxuICAgICAgICBpZiAoIW92ZXJMYXlTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UgPSBuZXcgT3ZlckxheUhpZGRlblNlcnZpY2UoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sb2NhbGVTZXIgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICB0aGlzLmNvbW1vblV0aWxzID0gdGhpcy5pbmplY3Rvci5nZXQoQ29tbW9uVXRpbHMsIG51bGwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLmxvY2FsZVNlcikge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsZVNlci5zZXRMb2NhbGVEYXRhKFNFQVJDSF9CT1hfTE9DQUxFKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgXHJcbn0iXX0=