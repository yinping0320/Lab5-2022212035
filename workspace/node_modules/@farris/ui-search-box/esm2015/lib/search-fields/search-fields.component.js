/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { Compare, FilterRelation } from "@farris/ui-common/types";
import { flatten } from 'lodash-es';
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { BehaviorSubject, Subject } from "rxjs";
import { SearchBoxBase } from "../search-box-base";
import { DateTimeHelperService } from "@farris/ui-common/date";
/** @type {?} */
export const SEARCH_BOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SearchFieldsComponent)),
    multi: true
};
export class SearchFieldsComponent extends SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     * @param {?} dateHelp
     */
    constructor(el, injector, overLayService, cd, dateHelp) {
        super(el, injector, overLayService, cd);
        this.dateHelp = dateHelp;
        this.fields = [];
        this.maxSearchFields = 5;
        this.condition = [];
        /**
         * 多字段查询
         */
        this.multi = true;
        this.conditionChange = new EventEmitter();
        this.clear = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        this.enableFloat = true;
        this.displayTextList = [];
        // filterConditions: Array<SearchFieldValue> = [];
        this.moreStatus$ = new BehaviorSubject(false);
        this.hideShadowbox = new Subject();
        this.showShadowBox = false;
        this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
        this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
    }
    /**
     * @return {?}
     */
    get hasFilter() {
        return this.displayTextList && this.displayTextList.length ? this.displayTextList.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.hasFilter)).length : false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initDislayText(!!this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.value)).length);
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.shadowBox && this.showShadowBox) {
                if (this.shadowBox.nativeElement.contains(e.target)) {
                    return;
                }
                if (e.target.closest('.f-search-field-container')) {
                    return;
                }
                if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                    return;
                }
                this.toggleShadowBox(false);
                this.hideShadowbox.next(e);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
    }
    /**
     * @private
     * @return {?}
     */
    filterChanged() {
        /** @type {?} */
        const conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.value)).map((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            const { value, begin, end } = n.value;
            if (value != null && value !== undefined && n.control.single) {
                if (n.control.controltype === 'datetime') {
                    return [{
                            filterField: n.code,
                            value,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: this.dateHelp.formatTo(this.dateHelp.addDays(new Date(value), 1), n.control.dateFormat),
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.Less
                        }];
                }
                else if (n.control.controltype === 'enum' && Array.isArray(value)) {
                    return value.map((/**
                     * @param {?} e
                     * @param {?} i
                     * @return {?}
                     */
                    (e, i) => {
                        return {
                            filterField: n.code,
                            value: e,
                            lbracket: i ? '' : '(',
                            rbracket: i == value.length - 1 ? ')' : '',
                            relation: i == value.length - 1 ? FilterRelation.And : FilterRelation.Or,
                            compare: Compare.Equal
                        };
                    }));
                }
                return {
                    filterField: n.code,
                    value: Array.isArray(value) ? value.join(',') : value,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.And,
                    compare: Array.isArray(value) ? Compare.In : Compare.Equal
                };
            }
            else {
                if (begin !== '' && begin != null && begin != undefined && end !== '' && end != null && end != undefined) {
                    return [
                        {
                            filterField: n.code,
                            value: begin,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        }
                    ];
                }
                else {
                    if (begin !== '' && begin != null && begin != undefined) {
                        return {
                            filterField: n.code,
                            value: begin,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        };
                    }
                    if (end !== '' && end != null && end != undefined) {
                        return {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        };
                    }
                }
                return null;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        /** @type {?} */
        let _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[_conditions.length - 1].relation = FilterRelation.Empty;
        }
        this.onModelChange(this.fields);
        this.onModelTouched(this.fields);
        this.conditionChange.emit(_conditions);
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    setConditions(condition) {
        /** @type {?} */
        const field = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === condition.field));
        field.value = condition.value;
        field.control.single = condition.value.single;
        this.initDislayText();
        this.cd.detectChanges();
    }
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    initDislayText(emit = true) {
        this.displayTextList = this.fields.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            const n = Object.assign({}, t);
            n.dislayText = n.name;
            n.hasFilter = false;
            if (n.value) {
                const { value, begin, end } = n.value;
                /** @type {?} */
                let val = value;
                if (t.control && t.control.enumValues && t.control.enumValues.length) {
                    if (!Array.isArray(val)) {
                        val = [val];
                    }
                    val = val.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        /** @type {?} */
                        const d = t.control.enumValues.find((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.value === n));
                        if (d) {
                            return d.name;
                        }
                        return n;
                    })).join(',');
                }
                else {
                    if (begin !== null && begin !== undefined) {
                        val = begin;
                    }
                    if (end !== null && end !== undefined) {
                        if (val != null) {
                            val += '~' + end;
                        }
                        else {
                            val = end;
                        }
                    }
                }
                n.dislayText += '：' + val;
                n.hasFilter = true;
            }
            return n;
        }));
        this.setMoreStatus();
        if (emit) {
            this.filterChanged();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    remove(field) {
        /** @type {?} */
        const searchField = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === field));
        if (searchField) {
            searchField.value = null;
            this.initDislayText();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemoveItem($event, item) {
        if (item.value !== null && item.value != undefined && item.value !== '') {
            $event.stopPropagation();
            this.remove(item.code);
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearConditions(emit = true) {
        this.fields.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => n.value = null));
        this.initDislayText(emit);
        if (emit) {
            this.clear.emit();
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        /** @type {?} */
        let arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.fields = arr;
        this.initDislayText();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    setValue(arr) {
        // this.filterConditions = arr;
        // this.initDislayText();
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
    }
    /**
     * @param {?=} show
     * @param {?=} el
     * @return {?}
     */
    toggleShadowBox(show = true, el = null) {
        if (!this.enableFloat) {
            return;
        }
        if (el && el.clientHeight <= 30) {
            return;
        }
        this.showShadowBox = show;
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.render.addClass(this.shadowBox.nativeElement, 'active');
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
            this.render.removeClass(this.shadowBox.nativeElement, 'active');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            this.setMoreStatus();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setMoreStatus() {
        if (this.enableFloat) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const r = this.tagContainerRef.nativeElement.clientHeight > 30;
                this.moreStatus$.next(r);
                this.cd.detectChanges();
            }));
        }
    }
}
SearchFieldsComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-search-fields',
                template: "\r\n<!-- [style.color]=\"hasFilter && (moreStatus$ | async) ? '#529dff': ''\" -->\r\n<div #searchbox class=\"input-group f-search-box f-search-fields\" style=\"border-color: transparent\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px; padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" [class.more]=\"moreStatus$ | async\"\r\n         style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox(true, tagContainer)\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-search-shadow-fields\" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more pb-1 d-flex\" style=\"height: auto; min-height: 26px;padding: 0 5px\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                // styleUrls: [
                //     `../searchbox-panel.scss`
                // ],
                encapsulation: ViewEncapsulation.None,
                providers: [
                    SEARCH_BOX_VALUE_ACCESSOR
                ]
            }] }
];
/** @nocollapse */
SearchFieldsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: DateTimeHelperService }
];
SearchFieldsComponent.propDecorators = {
    fields: [{ type: Input }],
    maxSearchFields: [{ type: Input }],
    condition: [{ type: Input }],
    multi: [{ type: Input }],
    container: [{ type: ViewChild, args: ['searchbox',] }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    tagContainerRef: [{ type: ViewChild, args: ['tagContainer',] }],
    conditionChange: [{ type: Output }],
    clear: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SearchFieldsComponent.prototype.fields;
    /** @type {?} */
    SearchFieldsComponent.prototype.maxSearchFields;
    /** @type {?} */
    SearchFieldsComponent.prototype.condition;
    /**
     * 多字段查询
     * @type {?}
     */
    SearchFieldsComponent.prototype.multi;
    /** @type {?} */
    SearchFieldsComponent.prototype.container;
    /** @type {?} */
    SearchFieldsComponent.prototype.shadowBox;
    /** @type {?} */
    SearchFieldsComponent.prototype.tagContainerRef;
    /** @type {?} */
    SearchFieldsComponent.prototype.conditionChange;
    /** @type {?} */
    SearchFieldsComponent.prototype.clear;
    /**
     * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
     * @type {?}
     */
    SearchFieldsComponent.prototype.enableFloat;
    /** @type {?} */
    SearchFieldsComponent.prototype.displayTextList;
    /** @type {?} */
    SearchFieldsComponent.prototype.moreStatus$;
    /** @type {?} */
    SearchFieldsComponent.prototype.hideShadowbox;
    /**
     * @type {?}
     * @private
     */
    SearchFieldsComponent.prototype.showShadowBox;
    /** @type {?} */
    SearchFieldsComponent.prototype.onModelChange;
    /** @type {?} */
    SearchFieldsComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    SearchFieldsComponent.prototype.dateHelp;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWZpZWxkcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNlYXJjaC1ib3gvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoLWZpZWxkcy9zZWFyY2gtZmllbGRzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixpQkFBaUIsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQ3RGLFFBQVEsRUFBRSxLQUFLLEVBQWdDLFFBQVEsRUFBRSxNQUFNLEVBQTRCLFNBQVMsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuSixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUN6RCxPQUFPLEVBQUUsT0FBTyxFQUFtQixjQUFjLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUVuRixPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3BDLE9BQU8sRUFBd0IsaUJBQWlCLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6RSxPQUFPLEVBQUUsZUFBZSxFQUFNLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7O0FBRS9ELE1BQU0sT0FBTyx5QkFBeUIsR0FBUTtJQUMxQyxPQUFPLEVBQUUsaUJBQWlCO0lBQzFCLFdBQVcsRUFBRSxVQUFVOzs7SUFBQyxHQUFHLEVBQUUsQ0FBQyxxQkFBcUIsRUFBQztJQUNwRCxLQUFLLEVBQUUsSUFBSTtDQUNkO0FBYUQsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGFBQWE7Ozs7Ozs7O0lBNkJwRCxZQUFZLEVBQWMsRUFBRSxRQUFrQixFQUFjLGNBQW9DLEVBQUUsRUFBcUIsRUFBVSxRQUErQjtRQUM1SixLQUFLLENBQUMs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O2dCQUN6QixJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQzVCLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7WUFyV0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLHV4RUFBMkM7Ozs7Z0JBSTNDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2dCQUNyQyxTQUFTLEVBQUU7b0JBQ1AseUJBQXlCO2lCQUM1QjthQUNKOzs7O1lBM0JxRCxVQUFVO1lBQzVELFFBQVE7WUFDSCxvQkFBb0IsdUJBdUR3QixRQUFRO1lBekRyQyxpQkFBaUI7WUFTaEMscUJBQXFCOzs7cUJBb0J6QixLQUFLOzhCQUNMLEtBQUs7d0JBQ0wsS0FBSztvQkFFTCxLQUFLO3dCQUVMLFNBQVMsU0FBQyxXQUFXO3dCQUNyQixTQUFTLFNBQUMsWUFBWTs4QkFDdEIsU0FBUyxTQUFDLGNBQWM7OEJBRXhCLE1BQU07b0JBQ04sTUFBTTs7OztJQVhQLHVDQUE4Qzs7SUFDOUMsZ0RBQTZCOztJQUM3QiwwQ0FBZ0Q7Ozs7O0lBRWhELHNDQUFzQjs7SUFFdEIsMENBQThDOztJQUM5QywwQ0FBK0M7O0lBQy9DLGdEQUF1RDs7SUFFdkQsZ0RBQStDOztJQUMvQyxzQ0FBcUM7Ozs7O0lBRXJDLDRDQUFtQjs7SUFFbkIsZ0RBQXlDOztJQUd6Qyw0Q0FBeUM7O0lBRXpDLDhDQUE4Qjs7Ozs7SUFNOUIsOENBQThCOztJQW1EOUIsOENBQWtDOztJQUNsQywrQ0FBbUM7Ozs7O0lBbERzRix5Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIGZvcndhcmRSZWYsIEhvc3RCaW5kaW5nLCBIb3N0TGlzdGVuZXIsIFxyXG4gICAgSW5qZWN0b3IsIElucHV0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSwgT25Jbml0LCBPcHRpb25hbCwgT3V0cHV0LCBSZW5kZXJlcjIsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCwgVmlld0VuY2Fwc3VsYXRpb24gfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5pbXBvcnQgeyBPdmVyTGF5SGlkZGVuU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vblwiO1xyXG5pbXBvcnQgeyBDb21wYXJlLCBGaWx0ZXJDb25kaXRpb24sIEZpbHRlclJlbGF0aW9uIH0gZnJvbSBcIkBmYXJyaXMvdWktY29tbW9uL3R5cGVzXCI7XHJcbmltcG9ydCB7IERpc3BsYXlUZXh0LCBTZWFyY2hGaWVsZCwgU2VhcmNoRmllbGRWYWx1ZSB9IGZyb20gXCIuLi9zZWFyY2gtYm94LnR5cGVzXCI7XHJcbmltcG9ydCB7IGZsYXR0ZW4gfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBDb250cm9sVmFsdWVBY2Nlc3NvciwgTkdfVkFMVUVfQUNDRVNTT1IgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBvZiwgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IFNlYXJjaEJveEJhc2UgfSBmcm9tIFwiLi4vc2VhcmNoLWJveC1iYXNlXCI7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gXCJAZmFycmlzL3VpLWNvbW1vbi9kYXRlXCI7XHJcblxyXG5leHBvcnQgY29uc3QgU0VBUkNIX0JPWF9WQUxVRV9BQ0NFU1NPUjogYW55ID0ge1xyXG4gICAgcHJvdmlkZTogTkdfVkFMVUVfQUNDRVNTT1IsXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTZWFyY2hGaWVsZHNDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmYXJyaXMtc2VhcmNoLWZpZWxkcycsXHJcbiAgICB0ZW1wbGF0ZVVybDogJ3NlYXJjaC1maWVsZHMuY29tcG9uZW50Lmh0bWwnLFxyXG4gICAgLy8gc3R5bGVVcmxzOiBbXHJcbiAgICAvLyAgICAgYC4uL3NlYXJjaGJveC1wYW5lbC5zY3NzYFxyXG4gICAgLy8gXSxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBTRUFSQ0hfQk9YX1ZBTFVFX0FDQ0VTU09SXHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTZWFyY2hGaWVsZHNDb21wb25lbnQgZXh0ZW5kcyBTZWFyY2hCb3hCYXNlIGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCkgZmllbGRzOiBBcnJheTxTZWFyY2hGaWVsZFZhbHVlPiA9IFtdO1xyXG4gICAgQElucHV0KCkgbWF4U2VhcmNoRmllbGRzID0gNTtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbjogQXJyYXk8RmlsdGVyQ29uZGl0aW9uPiA9IFtdO1xyXG4gICAgLyoqIOWkmuWtl+auteafpeivoiAqL1xyXG4gICAgQElucHV0KCkgbXVsdGkgPSB0cnVlO1xyXG4gICAgXHJcbiAgICBAVmlld0NoaWxkKCdzZWFyY2hib3gnKSBjb250YWluZXI6IEVsZW1lbnRSZWY7XHJcbiAgICBAVmlld0NoaWxkKCdzZWFyY2hib3gyJykgc2hhZG93Qm94OiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgndGFnQ29udGFpbmVyJykgdGFnQ29udGFpbmVyUmVmOiBFbGVtZW50UmVmO1xyXG5cclxuICAgIEBPdXRwdXQoKSBjb25kaXRpb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgY2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICAvKiog5ZCv55So5ryC5rWu77yMZmFsc2U6IOWGheWuueS8muaSkemrmOWuueWZqO+8myB0cnVl77ya5Zu65a6a6auY5bqmMjZweO+8jOeCueWHu+aIlua7kei/h+aXtu+8jOaYvuekuuWujOaVtOWGheWuue+8jOWkseWOu+eEpueCueWQju+8jOi/lOWbnuWbuuWumueKtuaAgSAqL1xyXG4gICAgZW5hYmxlRmxvYXQgPSB0cnVlO1xyXG5cclxuICAgIGRpc3BsYXlUZXh0TGlzdDogQXJyYXk8RGlzcGxheVRleHQ+ID0gW107XHJcbiAgICAvLyBmaWx0ZXJDb25kaXRpb25zOiBBcnJheTxTZWFyY2hGaWVsZFZhbHVlPiA9IFtdO1xyXG5cclxuICAgIG1vcmVTdGF0dXMkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XHJcblxyXG4gICAgaGlkZVNoYWRvd2JveCA9IG5ldyBTdWJqZWN0KCk7XHJcblxyXG4gICAgZ2V0IGhhc0ZpbHRlcigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5kaXNwbGF5VGV4dExpc3QgJiYgdGhpcy5kaXNwbGF5VGV4dExpc3QubGVuZ3RoID8gdGhpcy5kaXNwbGF5VGV4dExpc3QuZmlsdGVyKChuOiBhbnkpID0+IG4uaGFzRmlsdGVyKS5sZW5ndGggOiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHNob3dTaGFkb3dCb3ggPSBmYWxzZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihlbDogRWxlbWVudFJlZiwgaW5qZWN0b3I6IEluamVjdG9yLCBAT3B0aW9uYWwoKSBvdmVyTGF5U2VydmljZTogT3ZlckxheUhpZGRlblNlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBkYXRlSGVscDogRGF0ZVRpbWVIZWxwZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgc3VwZXIoZWwsIGluamVjdG9yLCBvdmVyTGF5U2VydmljZSwgY2QpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG5cclxuICAgICAgICB0aGlzLmluaXREaXNsYXlUZXh0KCEhdGhpcy5maWVsZHMuZmlsdGVyKChuOiBhbnkpID0+IG4udmFsdWUpLmxlbmd0aCk7XHJcblxyXG4gICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UucmVnaXN0ZXJNb3VzZUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgKGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zaGFkb3dCb3ggJiYgdGhpcy5zaG93U2hhZG93Qm94KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xvc2VzdCgnLmYtc2VhcmNoLWZpZWxkLWNvbnRhaW5lcicpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCcuZGF0ZS1vdmVybGF5LWNvbnRhaW5lcicpIHx8IGUudGFyZ2V0LmNsYXNzTmFtZS5pbmRleE9mKCdkYXRlLW92ZXJsYXktY29udGFpbmVyJykgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNoYWRvd0JveChmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpZGVTaGFkb3dib3gubmV4dChlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5tb3ZlU2hhZG93VG9Cb2R5KCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgIFxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm92ZXJMYXlTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIHRoaXMub3ZlckxheVNlcnZpY2UgPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc2hhZG93Qm94KSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Qm94Lm5hdGl2ZUVsZW1lbnQucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBvbk1vZGVsQ2hhbmdlID0gKGFycjogYW55KSA9PiB7IH07XHJcbiAgICBvbk1vZGVsVG91Y2hlZCA9IChhcnI6IGFueSkgPT4geyB9O1xyXG5cclxuICAgIHByaXZhdGUgZmlsdGVyQ2hhbmdlZCgpIHtcclxuICAgICAgICBjb25zdCBjb25kaXRpb25zID0gdGhpcy5maWVsZHMuZmlsdGVyKChuOiBhbnkpID0+IG4udmFsdWUpLm1hcCgobjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgdmFsdWUsIGJlZ2luLCBlbmQgfSA9IG4udmFsdWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG4uY29udHJvbC5zaW5nbGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuLmNvbnRyb2wuY29udHJvbHR5cGUgPT09ICdkYXRldGltZScpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyRmllbGQ6IG4uY29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxicmFja2V0OiAnKCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJicmFja2V0OiAgJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uOiBGaWx0ZXJSZWxhdGlvbi5BbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmU6IENvbXBhcmUuR3JlYXRlck9yRXF1YWxcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyRmllbGQ6IG4uY29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMuZGF0ZUhlbHAuZm9ybWF0VG8odGhpcy5kYXRlSGVscC5hZGREYXlzKG5ldyBEYXRlKHZhbHVlKSwgMSksIG4uY29udHJvbC5kYXRlRm9ybWF0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGJyYWNrZXQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYnJhY2tldDogICcpJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpb246IEZpbHRlclJlbGF0aW9uLkFuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogQ29tcGFyZS5MZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobi5jb250cm9sLmNvbnRyb2x0eXBlID09PSAnZW51bScgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWUubWFwKChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGaWVsZDogbi5jb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYnJhY2tldDogaT8nJzogJygnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmJyYWNrZXQ6ICBpID09IHZhbHVlLmxlbmd0aCAtMSA/ICcpJyA6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpb246IGkgPT0gdmFsdWUubGVuZ3RoIC0xID8gRmlsdGVyUmVsYXRpb24uQW5kOiBGaWx0ZXJSZWxhdGlvbi5PcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmU6IENvbXBhcmUuRXF1YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJGaWVsZDogbi5jb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLmpvaW4oJywnKSA6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGxicmFja2V0OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICByYnJhY2tldDogICcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uOiBGaWx0ZXJSZWxhdGlvbi5BbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogQXJyYXkuaXNBcnJheSh2YWx1ZSkgPyAgQ29tcGFyZS5JbjogQ29tcGFyZS5FcXVhbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJlZ2luICE9PSAnJyAmJiBiZWdpbiE9bnVsbCAmJiBiZWdpbiAhPSB1bmRlZmluZWQgJiYgZW5kICE9PScnICYmIGVuZCAhPW51bGwgJiYgZW5kICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckZpZWxkOiBuLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYmVnaW4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYnJhY2tldDogJygnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmJyYWNrZXQ6ICAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0aW9uOiBGaWx0ZXJSZWxhdGlvbi5BbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wYXJlOiBDb21wYXJlLkdyZWF0ZXJPckVxdWFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlckZpZWxkOiBuLmNvZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGJyYWNrZXQ6ICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmJyYWNrZXQ6ICAnKScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGlvbjogRmlsdGVyUmVsYXRpb24uQW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogQ29tcGFyZS5MZXNzT3JFcXVhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYmVnaW4gIT09ICcnICYmIGJlZ2luIT1udWxsICYmIGJlZ2luICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyRmllbGQ6IG4uY29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBiZWdpbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxicmFja2V0OiAnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJicmFja2V0OiAgJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWxhdGlvbjogRmlsdGVyUmVsYXRpb24uQW5kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcGFyZTogQ29tcGFyZS5HcmVhdGVyT3JFcXVhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kICE9PScnICYmIGVuZCAhPW51bGwgJiYgZW5kICE9IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsdGVyRmllbGQ6IG4uY29kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBlbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYnJhY2tldDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYnJhY2tldDogICcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRpb246IEZpbHRlclJlbGF0aW9uLkFuZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBhcmU6IENvbXBhcmUuTGVzc09yRXF1YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmZpbHRlcihuID0+IG4pO1xyXG5cclxuICAgICAgICBsZXQgX2NvbmRpdGlvbnM6IEFycmF5PEZpbHRlckNvbmRpdGlvbj4gPSBbXTtcclxuICAgICAgICBpZiAoY29uZGl0aW9ucyAmJiBjb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBfY29uZGl0aW9ucyA9IGZsYXR0ZW4oY29uZGl0aW9ucylcclxuICAgICAgICAgICAgX2NvbmRpdGlvbnNbX2NvbmRpdGlvbnMubGVuZ3RoIC0gMV0ucmVsYXRpb24gPSBGaWx0ZXJSZWxhdGlvbi5FbXB0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5vbk1vZGVsQ2hhbmdlKHRoaXMuZmllbGRzKTtcclxuICAgICAgICB0aGlzLm9uTW9kZWxUb3VjaGVkKHRoaXMuZmllbGRzKTtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KF9jb25kaXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICBzZXRDb25kaXRpb25zKGNvbmRpdGlvbjogYW55KSB7XHJcbiAgICAgICAgY29uc3QgZmllbGQ6IGFueSA9IHRoaXMuZmllbGRzLmZpbmQobiA9PiBuLmNvZGUgPT09IGNvbmRpdGlvbi5maWVsZCk7XHJcbiAgICAgICAgZmllbGQudmFsdWUgPSBjb25kaXRpb24udmFsdWU7XHJcbiAgICAgICAgZmllbGQuY29udHJvbC5zaW5nbGUgPSBjb25kaXRpb24udmFsdWUuc2luZ2xlO1xyXG5cclxuICAgICAgICB0aGlzLmluaXREaXNsYXlUZXh0KCk7XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgaW5pdERpc2xheVRleHQoZW1pdCA9IHRydWUpIHtcclxuICAgICAgICB0aGlzLmRpc3BsYXlUZXh0TGlzdCA9IHRoaXMuZmllbGRzLm1hcCgodDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB7Li4udH07XHJcbiAgICAgICAgICAgIG4uZGlzbGF5VGV4dCA9IG4ubmFtZTtcclxuICAgICAgICAgICAgbi5oYXNGaWx0ZXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgaWYgKG4udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHt2YWx1ZSwgYmVnaW4sIGVuZH0gPSAgbi52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGxldCB2YWwgPSB2YWx1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodC5jb250cm9sICYmIHQuY29udHJvbC5lbnVtVmFsdWVzICYmIHQuY29udHJvbC5lbnVtVmFsdWVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IFt2YWxdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSB2YWwubWFwKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0gdC5jb250cm9sLmVudW1WYWx1ZXMuZmluZChlID0+IGUudmFsdWUgPT09IG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbjtcclxuICAgICAgICAgICAgICAgICAgICB9KS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChiZWdpbiAhPT0gbnVsbCAmJiBiZWdpbiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IGJlZ2luO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW5kICE9PSBudWxsICYmIGVuZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsICs9ICd+JyArIGVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IGVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG4uZGlzbGF5VGV4dCArPSAn77yaJyArIHZhbDtcclxuICAgICAgICAgICAgICAgIG4uaGFzRmlsdGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRNb3JlU3RhdHVzKCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGVtaXQpIHtcclxuICAgICAgICAgICAgdGhpcy5maWx0ZXJDaGFuZ2VkKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZShmaWVsZDogc3RyaW5nKSB7XHJcbiAgICAgICAgY29uc3Qgc2VhcmNoRmllbGQgPSB0aGlzLmZpZWxkcy5maW5kKG4gPT4gbi5jb2RlID09PSBmaWVsZCk7XHJcbiAgICAgICAgaWYgKHNlYXJjaEZpZWxkKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaEZpZWxkLnZhbHVlID0gbnVsbDtcclxuICAgICAgICAgICAgdGhpcy5pbml0RGlzbGF5VGV4dCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIG9uUmVtb3ZlSXRlbSgkZXZlbnQsIGl0ZW0pIHtcclxuICAgICAgICBpZiAoaXRlbS52YWx1ZSE9PSBudWxsICYmIGl0ZW0udmFsdWUgIT0gdW5kZWZpbmVkICYmIGl0ZW0udmFsdWUgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUoaXRlbS5jb2RlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJDb25kaXRpb25zKGVtaXQgPSB0cnVlKSB7XHJcbiAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaChuID0+IG4udmFsdWUgPSBudWxsKTtcclxuICAgICAgICB0aGlzLmluaXREaXNsYXlUZXh0KGVtaXQpO1xyXG4gICAgICAgIGlmIChlbWl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xlYXIuZW1pdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XHJcbiAgICAgICAgbGV0IGFyciA9IG9iajtcclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkob2JqKSkge1xyXG4gICAgICAgICAgICBhcnIgPSBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmllbGRzID0gYXJyO1xyXG4gICAgICAgIHRoaXMuaW5pdERpc2xheVRleHQoKTtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uQ2hhbmdlKGZuOiBhbnkpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLm9uTW9kZWxDaGFuZ2UgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5vbk1vZGVsVG91Y2hlZCA9IGZuO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFZhbHVlKGFycjogQXJyYXk8U2VhcmNoRmllbGRWYWx1ZT4pIHtcclxuICAgICAgICAvLyB0aGlzLmZpbHRlckNvbmRpdGlvbnMgPSBhcnI7XHJcbiAgICAgICAgLy8gdGhpcy5pbml0RGlzbGF5VGV4dCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNoYWRvd0JveFBvc2l0aW9uKHt0b3AsIGxlZnQsIHdpZHRofSA9IHt0b3A6IG51bGwsIGxlZnQ6IG51bGwsIHdpZHRoOiBudWxsfSkge1xyXG4gICAgICAgIGlmICghdG9wICYmICFsZWZ0ICYmICF3aWR0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICB0b3AgPSBlLnRvcDtcclxuICAgICAgICAgICAgbGVmdCA9IGUubGVmdDtcclxuICAgICAgICAgICAgd2lkdGggPSBlLndpZHRoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLnNoYWRvd0JveC5uYXRpdmVFbGVtZW50LCAnbGVmdCcsIGxlZnQgKyAncHgnKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5zZXRTdHlsZSh0aGlzLnNoYWRvd0JveC5uYXRpdmVFbGVtZW50LCAndG9wJywgdG9wICsgJ3B4Jyk7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudCwgJ3dpZHRoJywgd2lkdGggKyAncHgnKTtcclxuXHJcbiAgICAgICAgdGhpcy5yZW5kZXIuc2V0U3R5bGUodGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudCwgJ3pJbmRleCcsIHRoaXMuY29tbW9uVXRpbHMuZ2V0RmxvYXRpbmdMYXllckluZGV4KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbW92ZVNoYWRvd1RvQm9keSgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlRmxvYXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy51cGRhdGVTaGFkb3dCb3hQb3NpdGlvbigpXHJcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmQodGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9nZ2xlU2hhZG93Qm94KHNob3cgPSB0cnVlLCBlbCA9IG51bGwpIHtcclxuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlRmxvYXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGVsICYmIGVsLmNsaWVudEhlaWdodCA8PSAzMCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNob3dTaGFkb3dCb3ggPSBzaG93O1xyXG4gICAgICAgIGlmIChzaG93KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2hhZG93Qm94UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlU3R5bGUodGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudCwgJ2Rpc3BsYXknKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIubmF0aXZlRWxlbWVudC5zdHlsZS52aXNpYmlsaXR5ID0gJ2hpZGRlbic7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLmFkZENsYXNzKHRoaXMuc2hhZG93Qm94Lm5hdGl2ZUVsZW1lbnQsICdhY3RpdmUnKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lci5uYXRpdmVFbGVtZW50LnN0eWxlLnZpc2liaWxpdHkgPSAndmlzaWJsZSc7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyLnNldFN0eWxlKHRoaXMuc2hhZG93Qm94Lm5hdGl2ZUVsZW1lbnQsICdkaXNwbGF5JywgJ25vbmUnKTtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXIucmVtb3ZlQ2xhc3ModGhpcy5zaGFkb3dCb3gubmF0aXZlRWxlbWVudCwgJ2FjdGl2ZScpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgb25SZXNpemVkKCRldmVudCkge1xyXG4gICAgICAgIGlmICh0aGlzLmVuYWJsZUZsb2F0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlU2hhZG93Qm94UG9zaXRpb24oJGV2ZW50KTtcclxuICAgICAgICAgICAgdGhpcy5zZXRNb3JlU3RhdHVzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc2V0TW9yZVN0YXR1cygpIHtcclxuICAgICAgICBpZiAodGhpcy5lbmFibGVGbG9hdCkge1xyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLnRhZ0NvbnRhaW5lclJlZi5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodCA+IDMwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3JlU3RhdHVzJC5uZXh0KHIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSJdfQ==