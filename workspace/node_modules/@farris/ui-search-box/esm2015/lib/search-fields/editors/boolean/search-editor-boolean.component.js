/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, ChangeDetectorRef, Component, ElementRef, Injector, Input, Output } from '@angular/core';
export class SearchFieldEditorBooleanComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     * @param {?} el
     */
    constructor(injector, cd, el) {
        this.injector = injector;
        this.cd = cd;
        this.el = el;
        this.radioDataSource = [];
        this.selectedValue = undefined;
        this.valueChange = new EventEmitter();
        this._radioElements = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field) {
            if (this.field.control) {
                this.radioDataSource = this.field.control.enumValues || [];
            }
            if (this.field.value) {
                this.selectedValue = this.field.value.value;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.selectedValue !== null && this.selectedValue !== undefined) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
            /** @type {?} */
            const radioEl = this._radioElements.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.value == this.selectedValue));
            if (radioEl) {
                radioEl.checked = true;
            }
        }
    }
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    onRadioClicked($event, value) {
        this.selectedValue = value;
        /** @type {?} */
        const radioInputRel = $event.target.querySelector('input');
        // radioInputRel && radioInputRel.setAttribute('checked', true);
        if (radioInputRel) {
            this.clearChecked();
            radioInputRel.checked = true;
            this.cd.detectChanges();
        }
        this.valueChange.emit({ field: this.field.code, value: { value: this.selectedValue, single: true } });
    }
    /**
     * @private
     * @return {?}
     */
    clearChecked() {
        if (!this._radioElements || !this._radioElements.length) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
        }
        this._radioElements.forEach((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            // r.removeAttribute('checked');
            r.checked = false;
        }));
    }
}
SearchFieldEditorBooleanComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-field-editor-bool',
                template: "<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': selectedValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onRadioClicked($event, item.value)\"\r\n    >\r\n        \r\n\r\n        <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" name=\"{{field.code}}\" id=\"{{'search_radio_' + item.value}}\" type=\"radio\" [attr.value]=\"item.value\">\r\n            <label class=\"custom-control-label\" for=\"{{'search_radio_' + item.value}}\">{{item.name}}</label>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>"
            }] }
];
/** @nocollapse */
SearchFieldEditorBooleanComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
SearchFieldEditorBooleanComponent.propDecorators = {
    field: [{ type: Input }],
    valueChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.field;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.radioDataSource;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.selectedValue;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype._radioElements;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWVkaXRvci1ib29sZWFuLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktc2VhcmNoLWJveC8iLCJzb3VyY2VzIjpbImxpYi9zZWFyY2gtZmllbGRzL2VkaXRvcnMvYm9vbGVhbi9zZWFyY2gtZWRpdG9yLWJvb2xlYW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBTXZJLE1BQU0sT0FBTyxpQ0FBaUM7Ozs7OztJQVUxQyxZQUFvQixRQUFrQixFQUFVLEVBQXFCLEVBQVUsRUFBYztRQUF6RSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBTjdGLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLGtCQUFhLEdBQUcsU0FBUyxDQUFDO1FBRWhCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNuQyxtQkFBYyxHQUFHLEVBQUUsQ0FBQztJQUVxRSxDQUFDOzs7O0lBRWxHLFFBQVE7UUFDSixJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDWixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFO2dCQUNwQixJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsSUFBSSxFQUFFLENBQUM7YUFDOUQ7WUFFRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNsQixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQzthQUMvQztTQUNKO0lBQ0wsQ0FBQzs7OztJQUVELGVBQWU7UUFDWCxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssU0FBUyxFQUFFO1lBQ2pFLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDOztrQkFDNUUsT0FBTyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSTs7OztZQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFDO1lBQzVFLElBQUksT0FBTyxFQUFFO2dCQUNULE9BQU8sQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO2FBQzFCO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFFRCxjQUFjLENBQUMsTUFBTSxFQUFFLEtBQUs7UUFDeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7O2NBQ3JCLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDMUQsZ0VBQWdFO1FBQ2hFLElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3BCLGFBQWEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRyxLQUFLLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7Ozs7O0lBRU8sWUFBWTtRQUNoQixJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3JELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1FBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUNuQyxnQ0FBZ0M7WUFDaEMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7UUFDdEIsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7WUEzREosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwwQkFBMEI7Z0JBQ3BDLDRzQkFBcUQ7YUFDeEQ7Ozs7WUFMZ0UsUUFBUTtZQUFsRCxpQkFBaUI7WUFBYSxVQUFVOzs7b0JBUTFELEtBQUs7MEJBS0wsTUFBTTs7OztJQUxQLGtEQUFvQjs7SUFFcEIsNERBQXFCOztJQUNyQiwwREFBMEI7O0lBRTFCLHdEQUEyQzs7Ozs7SUFDM0MsMkRBQTRCOzs7OztJQUVoQixxREFBMEI7Ozs7O0lBQUUsK0NBQTZCOzs7OztJQUFFLCtDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV2ZW50RW1pdHRlciwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIE91dHB1dCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3NlYXJjaC1maWVsZC1lZGl0b3ItYm9vbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc2VhcmNoLWVkaXRvci1ib29sZWFuLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoRmllbGRFZGl0b3JCb29sZWFuQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuXHJcbiAgICBASW5wdXQoKSBmaWVsZDogYW55O1xyXG5cclxuICAgIHJhZGlvRGF0YVNvdXJjZSA9IFtdO1xyXG4gICAgc2VsZWN0ZWRWYWx1ZSA9IHVuZGVmaW5lZDtcclxuXHJcbiAgICBAT3V0cHV0KCkgdmFsdWVDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBwcml2YXRlIF9yYWRpb0VsZW1lbnRzID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5maWVsZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC5jb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJhZGlvRGF0YVNvdXJjZSA9IHRoaXMuZmllbGQuY29udHJvbC5lbnVtVmFsdWVzIHx8IFtdO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5maWVsZC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlID0gdGhpcy5maWVsZC52YWx1ZS52YWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRWYWx1ZSAhPT0gbnVsbCAmJiB0aGlzLnNlbGVjdGVkVmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYWRpb0VsZW1lbnRzID0gQXJyYXkuZnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHJhZGlvRWwgPSB0aGlzLl9yYWRpb0VsZW1lbnRzLmZpbmQobiA9PiBuLnZhbHVlID09IHRoaXMuc2VsZWN0ZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIGlmIChyYWRpb0VsKSB7XHJcbiAgICAgICAgICAgICAgICByYWRpb0VsLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUmFkaW9DbGlja2VkKCRldmVudCwgdmFsdWUpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkVmFsdWUgPSB2YWx1ZTtcclxuICAgICAgICBjb25zdCByYWRpb0lucHV0UmVsID0gJGV2ZW50LnRhcmdldC5xdWVyeVNlbGVjdG9yKCdpbnB1dCcpO1xyXG4gICAgICAgIC8vIHJhZGlvSW5wdXRSZWwgJiYgcmFkaW9JbnB1dFJlbC5zZXRBdHRyaWJ1dGUoJ2NoZWNrZWQnLCB0cnVlKTtcclxuICAgICAgICBpZiAocmFkaW9JbnB1dFJlbCkge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyQ2hlY2tlZCgpO1xyXG4gICAgICAgICAgICByYWRpb0lucHV0UmVsLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMudmFsdWVDaGFuZ2UuZW1pdCh7IGZpZWxkOiB0aGlzLmZpZWxkLmNvZGUsICB2YWx1ZToge3ZhbHVlOiB0aGlzLnNlbGVjdGVkVmFsdWUsIHNpbmdsZTogdHJ1ZX0gfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjbGVhckNoZWNrZWQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9yYWRpb0VsZW1lbnRzIHx8ICF0aGlzLl9yYWRpb0VsZW1lbnRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLl9yYWRpb0VsZW1lbnRzID0gQXJyYXkuZnJvbSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW5wdXQnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3JhZGlvRWxlbWVudHMuZm9yRWFjaCgocjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIC8vIHIucmVtb3ZlQXR0cmlidXRlKCdjaGVja2VkJyk7XHJcbiAgICAgICAgICAgIHIuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19