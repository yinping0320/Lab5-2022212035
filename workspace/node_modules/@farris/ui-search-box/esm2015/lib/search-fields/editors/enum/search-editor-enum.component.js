/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, ViewChild } from "@angular/core";
import { cloneDeep } from 'lodash-es';
export class SearchFieldEnumEditorComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.checkedAll = false;
        this.boolcheck = false;
        this.valueChange = new EventEmitter();
        // indeterminate: boolean = true;
        // boolchecked: boolean;
        // boolCheckState: string = "indeterminate";
        this.checkboxDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get field() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set field(data) {
        this._item = cloneDeep(data);
        this.getDataSource();
        //this.checkValue = this._item.value.getOriginalValue();
        if (!this._item.hasOwnProperty("value")) {
            this._item.value = { value: [] };
        }
        if (this._item.hasOwnProperty("value") && this._item.value) {
            this.checkValue = this._item.value.value;
        }
        else {
            this._item.value = { value: [] };
        }
        // if (this.boolcheck) {
        //     if (this.checkValue.length) {
        //         this.boolchecked = this.checkValue[0];
        //         if (this.boolchecked) this.boolCheckState = "checked";
        //         else this.boolCheckState = "unchecked";
        //     } else this.boolCheckState = "indeterminate";
        // }
        if (this._item.value.value.length == 0) {
            this.checkedAll = false;
        }
        else if (this._item.control["enumValues"] && this._item.value.value.length == this._item.control["enumValues"].length) {
            this.checkedAll = true;
        }
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.field && this._item.control) {
            /** @type {?} */
            let checkboxList = this._item.control;
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    this.checkboxDataSource.push(Object.assign({}, element));
                }));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this._item.value.value = checkboxValue;
        }
        else {
            this._item.value.value = "";
        }
        if (checkboxValue.length < this._item.control["enumValues"].length) {
            this.checkedAll = false;
            // this.checkAllElRef.nativeElement.indeterminate = !!checkboxValue.length;
            // if (!checkboxValue.length) {
            //     this.checkedAll = false;    
            // }
        }
        else if (checkboxValue.length == this._item.control["enumValues"].length) {
            this.checkedAll = true;
            // this.checkAllElRef.nativeElement.indeterminate = false;
        }
        this.cd.detectChanges();
        this.getValueText();
        this.setSubmitChange();
        this.valueChange.emit({ field: this.field.code, value: { value: checkboxValue, single: true } });
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = this._item.control.enumValues;
        /** @type {?} */
        const value = this._item.value.value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            let texts = [];
            for (let i = 0; i <= value.length; i++) {
                /** @type {?} */
                const enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                (val) => {
                    return val["value"] == value[i];
                }));
                if (enums) {
                    texts.push(enums["name"]);
                }
            }
            this._item.valueText = texts.join(",");
        }
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 ||
            Object.keys(val.value).length === 0) {
            // this.submitChange.emit(false);
        }
        else {
            // this.submitChange.emit(true);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCheckAll(event) {
        // this.checkAllElRef.nativeElement.indeterminate = false;
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            this.setCheckedAll();
        }
        else {
            this._item.value.value = [];
            this._item.valueText = "";
            this.checkValue = [];
        }
        this.getValueText();
        this.setSubmitChange();
        this.cd.detectChanges();
        this.valueChange.emit({ field: this.field.code, value: { value: this.checkValue, single: true } });
    }
    /**
     * @private
     * @return {?}
     */
    setCheckedAll() {
        /** @type {?} */
        const enumValue = this._item.control.enumValues;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            let checkboxValue = [];
            //checkboxTexts = [];
            for (let i = 0; i < enumValue.length; i++) {
                checkboxValue.push(enumValue[i]["value"]);
                //checkboxTexts.push(enumValue[i]['name'])
            }
            this._item.value.value = checkboxValue;
            this.checkValue = this._item.value.value;
            //this._item.valueText = checkboxTexts.join(',');
            this.cd.detectChanges();
        }
    }
}
SearchFieldEnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "search-filed-editor-enum",
                template: "<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" style=\"padding-left: 10px;\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" #checkAllEl>\r\n    <label class=\"custom-control-label\" (click)=\"onCheckAll($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"false\" style=\"padding-left: 10px;\"\r\n    [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n</farris-checkboxgroup>\r\n"
            }] }
];
/** @nocollapse */
SearchFieldEnumEditorComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchFieldEnumEditorComponent.propDecorators = {
    boolcheck: [{ type: Input }],
    field: [{ type: Input }],
    valueChange: [{ type: Output }],
    checkAllElRef: [{ type: ViewChild, args: ['checkAllEl',] }]
};
if (false) {
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkedAll;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.boolcheck;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype._item;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.valueChange;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkValue;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkboxDataSource;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkAllElRef;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEnumEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEnumEditorComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,