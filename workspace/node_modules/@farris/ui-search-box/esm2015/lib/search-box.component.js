/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { InputGroupComponent } from "@farris/ui-input-group";
import { Compare, FilterRelation } from "@farris/ui-common/types";
import { flatten } from 'lodash-es';
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { BehaviorSubject } from "rxjs";
import { SearchBoxBase } from "./search-box-base";
/** @type {?} */
export const SEARCH_BOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SearchBoxComponent)),
    multi: true
};
export class SearchBoxComponent extends SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     */
    constructor(el, injector, overLayService, cd) {
        super(el, injector, overLayService, cd);
        this.fields = [];
        this.maxSearchFields = 5;
        this.condition = [];
        /**
         * 启用 任意字段
         */
        this.useAnyField = true;
        this.conditionChange = new EventEmitter();
        this.clear = new EventEmitter();
        this.escHandler = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        this.enableFloat = true;
        this.displayTextList = [];
        this.filterConditions = [];
        this.hiddenItemsCount$ = new BehaviorSubject(0);
        this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
        this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService.destory(this.shadowBox.nativeElement);
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
            this['REMOVE_ITEM_TIMER'] = null;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        if (this.enableFloat) {
            if (!this.input2.value) {
                this.toggleShadowBox(false);
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onInputClick($event) {
        if (this.enableFloat) {
            this.toggleShadowBox();
        }
    }
    /**
     * @private
     * @return {?}
     */
    filterChanged() {
        /** @type {?} */
        const conditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== '*')).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n.value.trim().indexOf(' ') > -1) {
                /** @type {?} */
                const searchKeys = Array.from(new Set(n.value.trim().split(' ').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.trim()))));
                return searchKeys.map((/**
                 * @param {?} s
                 * @param {?} j
                 * @return {?}
                 */
                (s, j) => {
                    return {
                        filterField: n.code,
                        value: s,
                        lbracket: j == 0 ? '(' : '',
                        rbracket: j == searchKeys.length - 1 ? ')' : '',
                        relation: j == searchKeys.length - 1 ? 1 : 2,
                        compare: 6,
                    };
                }));
            }
            return {
                filterField: n.code,
                value: n.value,
                lbracket: '',
                rbracket: '',
                relation: i == this.filterConditions.length - 1 ? 0 : 1,
                compare: 6,
            };
        }));
        /** @type {?} */
        let _conditions = [];
        _conditions = this.expandStarFieldToAllFields().concat(flatten(conditions));
        if (conditions && conditions.length) {
            _conditions[_conditions.length - 1].relation = 0;
        }
        this.onModelChange(this.filterConditions);
        this.onModelTouched(this.filterConditions);
        if (!_conditions.length) {
            this.conditionChange.emit(this.filterConditions);
        }
        else {
            this.conditionChange.emit(_conditions);
        }
    }
    /**
     * @return {?}
     */
    expandStarFieldToAllFields() {
        /** @type {?} */
        const item = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === '*'));
        if (!item) {
            return [];
        }
        /** @type {?} */
        const searchKeys = Array.from(new Set(item.value.trim().split(' ').filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.trim()))));
        /** @type {?} */
        const conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== '*')).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            return searchKeys.map((/**
             * @param {?} s
             * @param {?} j
             * @return {?}
             */
            (s, j) => {
                return {
                    filterField: n.code,
                    value: s,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.Or,
                    compare: Compare.Like,
                };
            }));
        }));
        /** @type {?} */
        let _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[0].lbracket = '(';
            _conditions[_conditions.length - 1].rbracket = ')';
            _conditions[_conditions.length - 1].relation = this.filterConditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.code !== '*')).length ? 1 : 0;
        }
        return _conditions;
    }
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    initDislayText(emit = true) {
        /** @type {?} */
        const relationStr = this.localeSer.getValue('searchbox.relation.or');
        this.displayTextList = this.filterConditions.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            const n = Object.assign({}, t);
            // .map(n => `“${n}”`)
            /** @type {?} */
            const values = n.value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.trim()));
            n.dislayText = n.name + '：' + values.join(` ${relationStr} `);
            n.displayHtml = n.name + '：' + values.join(`<span class="text-muted font-italic mx-1 or">${relationStr}</span>`);
            return n;
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.enableFloat) {
                this.setHiddenCount();
            }
        }));
        this.cd.detectChanges();
        if (emit) {
            this.filterChanged();
        }
    }
    /**
     * @param {?} searchData
     * @return {?}
     */
    select(searchData) {
        /** @type {?} */
        const condition = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === searchData.code));
        if (condition) {
            condition.value = condition.value.trim() + ' ' + searchData.value;
        }
        else {
            this.filterConditions.push(searchData);
        }
        this.initDislayText();
        this.input.value = '';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    remove(field) {
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== field));
        this.initDislayText(false);
        this._emitFilterChanged();
    }
    /**
     * @private
     * @return {?}
     */
    _emitFilterChanged() {
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
        }
        this['REMOVE_ITEM_TIMER'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.filterChanged();
        }), 180);
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemoveItem($event, item) {
        $event.stopPropagation();
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== item.code));
        this.initDislayText();
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearConditions(emit = true) {
        this.input.value = '';
        this.displayTextList = [];
        this.filterConditions = [];
        this.setHiddenCount();
        if (emit) {
            this.conditionChange.emit([]);
            this.clear.emit();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmit($event) {
        $event.stopPropagation();
        this.input.value = '';
        this.toggleShadowBox(false);
        this._emitFilterChanged();
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        /** @type {?} */
        let arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.filterConditions = arr;
        this.initDislayText();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} arr
     * @param {?=} emit
     * @return {?}
     */
    setValue(arr, emit = true) {
        this.filterConditions = arr;
        this.initDislayText(emit);
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
        this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                return;
            }
            if (e.target === this.input2.textbox.nativeElement || !this.shadowBox || this.shadowBox.nativeElement.contains(e.target) ||
                e.target['closest']('.f-search-box-panel')) {
                return;
            }
            this.toggleShadowBox(false);
        }));
    }
    /**
     * @param {?=} show
     * @return {?}
     */
    toggleShadowBox(show = true) {
        if (!this.enableFloat || ((!this.fields || !this.fields.length) && !this.useAnyField)) {
            return;
        }
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.input2.focus();
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShadowBoxClick($event) {
        $event.stopPropagation();
        if (this.enableFloat) {
            this.input2.focus();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setHiddenCount();
                this.cd.detectChanges();
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setHiddenCount() {
        /** @type {?} */
        let len = 0;
        if (!this.displayTextList || !this.displayTextList.length) {
            this.hiddenItemsCount$.next(len);
            return;
        }
        /** @type {?} */
        const items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
        if (items && items.length) {
            len = items.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return n.offsetTop;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n > 20)).length;
        }
        this.hiddenItemsCount$.next(len);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEsc($event) {
        this.escHandler.emit($event);
    }
}
SearchBoxComponent.decorators = [
    { type: Component, args: [{
                selector: "farris-search-box",
                template: "\r\n\r\n<div #searchbox class=\"input-group f-search-box\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\" (escHandler)=\"onEsc($event)\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (inputClick)=\"onInputClick($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\" (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\" >\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup \" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" \r\n(click)=\"onShadowBoxClick($event)\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\"  (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput2 class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (blurHandle)=\"onBlur($event)\" (escHandler)=\"onEsc($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mousedown)=\"$event.preventDefault()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\">\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    SEARCH_BOX_VALUE_ACCESSOR
                ]
            }] }
];
/** @nocollapse */
SearchBoxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
SearchBoxComponent.propDecorators = {
    fields: [{ type: Input }],
    maxSearchFields: [{ type: Input }],
    condition: [{ type: Input }],
    useAnyField: [{ type: Input }],
    container: [{ type: ViewChild, args: ['searchbox',] }],
    input: [{ type: ViewChild, args: ['tagInput',] }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    input2: [{ type: ViewChild, args: ['tagInput2',] }],
    conditionChange: [{ type: Output }],
    clear: [{ type: Output }],
    escHandler: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    SearchBoxComponent.prototype.fields;
    /** @type {?} */
    SearchBoxComponent.prototype.maxSearchFields;
    /** @type {?} */
    SearchBoxComponent.prototype.condition;
    /**
     * 启用 任意字段
     * @type {?}
     */
    SearchBoxComponent.prototype.useAnyField;
    /** @type {?} */
    SearchBoxComponent.prototype.container;
    /** @type {?} */
    SearchBoxComponent.prototype.input;
    /** @type {?} */
    SearchBoxComponent.prototype.shadowBox;
    /** @type {?} */
    SearchBoxComponent.prototype.input2;
    /** @type {?} */
    SearchBoxComponent.prototype.conditionChange;
    /** @type {?} */
    SearchBoxComponent.prototype.clear;
    /** @type {?} */
    SearchBoxComponent.prototype.escHandler;
    /**
     * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
     * @type {?}
     */
    SearchBoxComponent.prototype.enableFloat;
    /** @type {?} */
    SearchBoxComponent.prototype.displayTextList;
    /** @type {?} */
    SearchBoxComponent.prototype.filterConditions;
    /** @type {?} */
    SearchBoxComponent.prototype.hiddenItemsCount$;
    /** @type {?} */
    SearchBoxComponent.prototype.onModelChange;
    /** @type {?} */
    SearchBoxComponent.prototype.onModelTouched;
}
//# sourceMappingURL=data:application/json;base64,