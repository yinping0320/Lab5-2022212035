(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@farris/ui-datepicker'), require('@farris/ui-switch'), require('@farris/ui-number-spinner'), require('@farris/ui-forms'), require('@farris/ui-common/types'), require('@angular/forms'), require('rxjs'), require('@farris/ui-common'), require('@farris/ui-input-group'), require('rxjs/operators'), require('@farris/ui-common/date'), require('@farris/ui-locale'), require('lodash-es'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-search-box', ['exports', '@angular/common', '@farris/ui-datepicker', '@farris/ui-switch', '@farris/ui-number-spinner', '@farris/ui-forms', '@farris/ui-common/types', '@angular/forms', 'rxjs', '@farris/ui-common', '@farris/ui-input-group', 'rxjs/operators', '@farris/ui-common/date', '@farris/ui-locale', 'lodash-es', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-search-box'] = {}),global.ng.common,global.uiDatepicker,global.uiSwitch,global.uiNumberSpinner,global.uiForms,global.types,global.ng.forms,global.rxjs,global.uiCommon,global.uiInputGroup,global.rxjs.operators,global.date,global.uiLocale,global.lodashEs,global.ng.core));
}(this, (function (exports,common,uiDatepicker,uiSwitch,uiNumberSpinner,uiForms,types,forms,rxjs,uiCommon,uiInputGroup,operators,date,uiLocale,lodashEs,core) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchBoxService = /** @class */ (function () {
        function SearchBoxService() {
        }
        SearchBoxService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        SearchBoxService.ctorParameters = function () { return []; };
        return SearchBoxService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 列设置相关多语资源
     * @type {?}
     */
    var SEARCH_BOX_LOCALE = {
        en: {
            'searchbox': {
                enterKeywords: 'Please enter keywords',
                tips: 'Space can be used to represent "or" in input, and enter to search.',
                contain: 'contain',
                clear: 'Clear all conditions.',
                cancel: 'Cancel',
                ok: 'Ok',
                removeFilter: 'Delete Condition',
                anyFields: 'All',
                relation: {
                    and: 'AND',
                    or: 'OR'
                }
            }
        },
        'zh-CHS': {
            'searchbox': {
                enterKeywords: '请输入关键字',
                tips: '输入中可用空格代表“或”，回车可搜索',
                contain: '包含',
                clear: '清除筛选',
                cancel: '取消',
                ok: '确定',
                removeFilter: '删除条件',
                anyFields: '全部',
                relation: {
                    and: '并',
                    or: '或'
                }
            }
        },
        'zh-CHT': {
            searchbox: {
                enterKeywords: '請輸入關鍵字',
                tips: '輸入中可用空格代表“或”，回車可搜索',
                contain: '包含',
                clear: '清除篩選',
                cancel: '取消',
                ok: '確定',
                removeFilter: '刪除條件',
                anyFields: '全部',
                relation: {
                    and: '並',
                    or: '或'
                }
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchBoxBase = /** @class */ (function () {
        function SearchBoxBase(el, injector, overLayService, cd) {
            this.el = el;
            this.injector = injector;
            this.overLayService = overLayService;
            this.cd = cd;
            this.commonUtils = null;
            this.render = this.injector.get(core.Renderer2);
            if (!overLayService) {
                this.overLayService = new uiCommon.OverLayHiddenService();
            }
            this.localeSer = this.injector.get(uiLocale.LocaleService, null);
            this.commonUtils = this.injector.get(uiCommon.CommonUtils, null);
            if (this.localeSer) {
                this.localeSer.setLocaleData(SEARCH_BOX_LOCALE);
            }
        }
        /** @nocollapse */
        SearchBoxBase.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Injector },
                { type: uiCommon.OverLayHiddenService, decorators: [{ type: core.Optional }] },
                { type: core.ChangeDetectorRef }
            ];
        };
        return SearchBoxBase;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SEARCH_BOX_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(( /**
         * @return {?}
         */function () { return SearchBoxComponent; })),
        multi: true
    };
    var SearchBoxComponent = /** @class */ (function (_super) {
        __extends(SearchBoxComponent, _super);
        function SearchBoxComponent(el, injector, overLayService, cd) {
            var _this = _super.call(this, el, injector, overLayService, cd) || this;
            _this.fields = [];
            _this.maxSearchFields = 5;
            _this.condition = [];
            /**
             * 启用 任意字段
             */
            _this.useAnyField = true;
            _this.conditionChange = new core.EventEmitter();
            _this.clear = new core.EventEmitter();
            _this.escHandler = new core.EventEmitter();
            /**
             * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
             */
            _this.enableFloat = true;
            _this.displayTextList = [];
            _this.filterConditions = [];
            _this.hiddenItemsCount$ = new rxjs.BehaviorSubject(0);
            _this.onModelChange = ( /**
             * @param {?} arr
             * @return {?}
             */function (arr) { });
            _this.onModelTouched = ( /**
             * @param {?} arr
             * @return {?}
             */function (arr) { });
            return _this;
        }
        /**
         * @return {?}
         */
        SearchBoxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SearchBoxComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.moveShadowToBody();
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SearchBoxComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        SearchBoxComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.overLayService) {
                    this.overLayService.destory(this.shadowBox.nativeElement);
                    this.overLayService = null;
                }
                if (this.shadowBox) {
                    this.shadowBox.nativeElement.remove();
                }
                if (this['REMOVE_ITEM_TIMER']) {
                    clearTimeout(this['REMOVE_ITEM_TIMER']);
                    this['REMOVE_ITEM_TIMER'] = null;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onBlur = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.enableFloat) {
                    if (!this.input2.value) {
                        this.toggleShadowBox(false);
                    }
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onInputClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.enableFloat) {
                    this.toggleShadowBox();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchBoxComponent.prototype.filterChanged = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var conditions = this.filterConditions.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code !== '*'; })).map(( /**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */function (n, i) {
                    if (n.value.trim().indexOf(' ') > -1) {
                        /** @type {?} */
                        var searchKeys_1 = Array.from(new Set(n.value.trim().split(' ').filter(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) { return n.trim(); }))));
                        return searchKeys_1.map(( /**
                         * @param {?} s
                         * @param {?} j
                         * @return {?}
                         */function (s, j) {
                            return {
                                filterField: n.code,
                                value: s,
                                lbracket: j == 0 ? '(' : '',
                                rbracket: j == searchKeys_1.length - 1 ? ')' : '',
                                relation: j == searchKeys_1.length - 1 ? 1 : 2,
                                compare: 6,
                            };
                        }));
                    }
                    return {
                        filterField: n.code,
                        value: n.value,
                        lbracket: '',
                        rbracket: '',
                        relation: i == _this.filterConditions.length - 1 ? 0 : 1,
                        compare: 6,
                    };
                }));
                /** @type {?} */
                var _conditions = [];
                _conditions = this.expandStarFieldToAllFields().concat(lodashEs.flatten(conditions));
                if (conditions && conditions.length) {
                    _conditions[_conditions.length - 1].relation = 0;
                }
                this.onModelChange(this.filterConditions);
                this.onModelTouched(this.filterConditions);
                if (!_conditions.length) {
                    this.conditionChange.emit(this.filterConditions);
                }
                else {
                    this.conditionChange.emit(_conditions);
                }
            };
        /**
         * @return {?}
         */
        SearchBoxComponent.prototype.expandStarFieldToAllFields = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var item = this.filterConditions.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code === '*'; }));
                if (!item) {
                    return [];
                }
                /** @type {?} */
                var searchKeys = Array.from(new Set(item.value.trim().split(' ').filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.trim(); }))));
                /** @type {?} */
                var conditions = this.fields.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code !== '*'; })).map(( /**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */function (n, i) {
                    return searchKeys.map(( /**
                     * @param {?} s
                     * @param {?} j
                     * @return {?}
                     */function (s, j) {
                        return {
                            filterField: n.code,
                            value: s,
                            lbracket: '',
                            rbracket: '',
                            relation: types.FilterRelation.Or,
                            compare: types.Compare.Like,
                        };
                    }));
                }));
                /** @type {?} */
                var _conditions = [];
                if (conditions && conditions.length) {
                    _conditions = lodashEs.flatten(conditions);
                    _conditions[0].lbracket = '(';
                    _conditions[_conditions.length - 1].rbracket = ')';
                    _conditions[_conditions.length - 1].relation = this.filterConditions.filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.code !== '*'; })).length ? 1 : 0;
                }
                return _conditions;
            };
        /**
         * @private
         * @param {?=} emit
         * @return {?}
         */
        SearchBoxComponent.prototype.initDislayText = /**
         * @private
         * @param {?=} emit
         * @return {?}
         */
            function (emit) {
                var _this = this;
                if (emit === void 0) {
                    emit = true;
                }
                /** @type {?} */
                var relationStr = this.localeSer.getValue('searchbox.relation.or');
                this.displayTextList = this.filterConditions.map(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) {
                    /** @type {?} */
                    var n = __assign({}, t);
                    // .map(n => `“${n}”`)
                    /** @type {?} */
                    var values = n.value.trim().split(' ').filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.trim(); }));
                    n.dislayText = n.name + '：' + values.join(" " + relationStr + " ");
                    n.displayHtml = n.name + '：' + values.join("<span class=\"text-muted font-italic mx-1 or\">" + relationStr + "</span>");
                    return n;
                }));
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    if (_this.enableFloat) {
                        _this.setHiddenCount();
                    }
                }));
                this.cd.detectChanges();
                if (emit) {
                    this.filterChanged();
                }
            };
        /**
         * @param {?} searchData
         * @return {?}
         */
        SearchBoxComponent.prototype.select = /**
         * @param {?} searchData
         * @return {?}
         */
            function (searchData) {
                /** @type {?} */
                var condition = this.filterConditions.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code === searchData.code; }));
                if (condition) {
                    condition.value = condition.value.trim() + ' ' + searchData.value;
                }
                else {
                    this.filterConditions.push(searchData);
                }
                this.initDislayText();
                this.input.value = '';
            };
        /**
         * @param {?} field
         * @return {?}
         */
        SearchBoxComponent.prototype.remove = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                this.filterConditions = this.filterConditions.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code !== field; }));
                this.initDislayText(false);
                this._emitFilterChanged();
            };
        /**
         * @private
         * @return {?}
         */
        SearchBoxComponent.prototype._emitFilterChanged = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this['REMOVE_ITEM_TIMER']) {
                    clearTimeout(this['REMOVE_ITEM_TIMER']);
                }
                this['REMOVE_ITEM_TIMER'] = setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.filterChanged();
                }), 180);
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        SearchBoxComponent.prototype.onRemoveItem = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                $event.stopPropagation();
                this.filterConditions = this.filterConditions.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code !== item.code; }));
                this.initDislayText();
            };
        /**
         * @param {?=} emit
         * @return {?}
         */
        SearchBoxComponent.prototype.clearConditions = /**
         * @param {?=} emit
         * @return {?}
         */
            function (emit) {
                if (emit === void 0) {
                    emit = true;
                }
                this.input.value = '';
                this.displayTextList = [];
                this.filterConditions = [];
                this.setHiddenCount();
                if (emit) {
                    this.conditionChange.emit([]);
                    this.clear.emit();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onSubmit = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.input.value = '';
                this.toggleShadowBox(false);
                this._emitFilterChanged();
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        SearchBoxComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var arr = obj;
                if (!Array.isArray(obj)) {
                    arr = [];
                }
                this.filterConditions = arr;
                this.initDislayText();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SearchBoxComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SearchBoxComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * @param {?} arr
         * @param {?=} emit
         * @return {?}
         */
        SearchBoxComponent.prototype.setValue = /**
         * @param {?} arr
         * @param {?=} emit
         * @return {?}
         */
            function (arr, emit) {
                if (emit === void 0) {
                    emit = true;
                }
                this.filterConditions = arr;
                this.initDislayText(emit);
            };
        /**
         * @param {?=} __0
         * @return {?}
         */
        SearchBoxComponent.prototype.updateShadowBoxPosition = /**
         * @param {?=} __0
         * @return {?}
         */
            function (_a) {
                var _b = _a === void 0 ? { top: null, left: null, width: null } : _a, top = _b.top, left = _b.left, width = _b.width;
                if (!top && !left && !width) {
                    /** @type {?} */
                    var e = this.el.nativeElement.getBoundingClientRect();
                    top = e.top;
                    left = e.left;
                    width = e.width;
                }
                this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
            };
        /**
         * @private
         * @return {?}
         */
        SearchBoxComponent.prototype.moveShadowToBody = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (!this.enableFloat) {
                    return;
                }
                this.updateShadowBoxPosition();
                document.body.append(this.shadowBox.nativeElement);
                this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                        return;
                    }
                    if (e.target === _this.input2.textbox.nativeElement || !_this.shadowBox || _this.shadowBox.nativeElement.contains(e.target) ||
                        e.target['closest']('.f-search-box-panel')) {
                        return;
                    }
                    _this.toggleShadowBox(false);
                }));
            };
        /**
         * @param {?=} show
         * @return {?}
         */
        SearchBoxComponent.prototype.toggleShadowBox = /**
         * @param {?=} show
         * @return {?}
         */
            function (show) {
                if (show === void 0) {
                    show = true;
                }
                if (!this.enableFloat || ((!this.fields || !this.fields.length) && !this.useAnyField)) {
                    return;
                }
                if (show) {
                    this.updateShadowBoxPosition();
                    this.render.removeStyle(this.shadowBox.nativeElement, 'display');
                    this.container.nativeElement.style.visibility = 'hidden';
                    this.input2.focus();
                }
                else {
                    this.container.nativeElement.style.visibility = 'visible';
                    this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onShadowBoxClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                if (this.enableFloat) {
                    this.input2.focus();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onResized = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                if (this.enableFloat) {
                    this.updateShadowBoxPosition($event);
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        _this.setHiddenCount();
                        _this.cd.detectChanges();
                    }));
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchBoxComponent.prototype.setHiddenCount = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var len = 0;
                if (!this.displayTextList || !this.displayTextList.length) {
                    this.hiddenItemsCount$.next(len);
                    return;
                }
                /** @type {?} */
                var items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
                if (items && items.length) {
                    len = items.map(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) {
                        return n.offsetTop;
                    })).filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n > 20; })).length;
                }
                this.hiddenItemsCount$.next(len);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchBoxComponent.prototype.onEsc = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.escHandler.emit($event);
            };
        SearchBoxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "farris-search-box",
                        template: "\r\n\r\n<div #searchbox class=\"input-group f-search-box\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\" (escHandler)=\"onEsc($event)\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (inputClick)=\"onInputClick($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\" (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\" >\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup \" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" \r\n(click)=\"onShadowBoxClick($event)\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\"  (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput2 class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (blurHandle)=\"onBlur($event)\" (escHandler)=\"onEsc($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mousedown)=\"$event.preventDefault()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\">\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [
                            SEARCH_BOX_VALUE_ACCESSOR
                        ]
                    }] }
        ];
        /** @nocollapse */
        SearchBoxComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Injector },
                { type: uiCommon.OverLayHiddenService, decorators: [{ type: core.Optional }] },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchBoxComponent.propDecorators = {
            fields: [{ type: core.Input }],
            maxSearchFields: [{ type: core.Input }],
            condition: [{ type: core.Input }],
            useAnyField: [{ type: core.Input }],
            container: [{ type: core.ViewChild, args: ['searchbox',] }],
            input: [{ type: core.ViewChild, args: ['tagInput',] }],
            shadowBox: [{ type: core.ViewChild, args: ['searchbox2',] }],
            input2: [{ type: core.ViewChild, args: ['tagInput2',] }],
            conditionChange: [{ type: core.Output }],
            clear: [{ type: core.Output }],
            escHandler: [{ type: core.Output }]
        };
        return SearchBoxComponent;
    }(SearchBoxBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldPanelComponent = /** @class */ (function () {
        function SearchFieldPanelComponent(injecotr, cd) {
            this.injecotr = injecotr;
            this.cd = cd;
            this.filterChange = new core.EventEmitter();
            this.remove = new core.EventEmitter();
            this.conditions = null;
            this.elRef = this.injecotr.get(core.ElementRef, null);
        }
        /**
         * @return {?}
         */
        SearchFieldPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldPanelComponent.prototype.onSearchValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.conditions = $event;
                this.cd.detectChanges();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldPanelComponent.prototype.onSubmitCondition = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.fieldOptions.value = this.conditions.value;
                if (!this.fieldOptions.value.single) {
                    this.fieldOptions.value.value = null;
                }
                else {
                    delete this.fieldOptions.value.begin;
                    delete this.fieldOptions.value.end;
                }
                this.filterChange.emit(this.conditions);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldPanelComponent.prototype.onRemoveSearchField = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.remove.emit(this.fieldOptions);
            };
        SearchFieldPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-search-field-panel',
                        template: "<div class=\"f-search-field-panel f-filter-panel-inner\">\r\n    <div class=\"f-filter-panel-arrow\" style=\"left: 26px; right: auto;\"></div>\r\n    <div class=\"f-filter-panel-content \" style=\"box-shadow:none\">\r\n        <search-filed-editor-date [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'datetime'\"\r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-date>\r\n\r\n        <search-filed-editor-number [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'number'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-number>\r\n\r\n        <search-filed-editor-enum [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'enum'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-enum>\r\n\r\n        <search-field-editor-bool [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'dropdown'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-field-editor-bool>\r\n    </div>\r\n\r\n    <div class=\"f-filter-panel-footer\">\r\n        <div class=\"filer-panel-clear\">\r\n            <button class=\"btn btn-link\" (click)=\"onRemoveSearchField($event)\" [disabled]=\"fieldOptions?.value | canclear\">{{'searchbox.clear' | locale}}</button>\r\n        </div>\r\n        <div class=\"filter-panel-btns\">\r\n            <button class=\"btn btn-secondary close-field-panel\">{{'searchbox.cancel' | locale}}</button>\r\n            <button class=\"filter-panel-submit btn btn-primary\" #btnSubmit [disabled]=\"conditions?.value | canclear\" (click)=\"onSubmitCondition($event)\">{{'searchbox.ok' | locale}}</button>\r\n        </div>\r\n    </div>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SearchFieldPanelComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchFieldPanelComponent.propDecorators = {
            fieldOptions: [{ type: core.Input }],
            btnSubmit: [{ type: core.ViewChild, args: ['btnSubmit',] }],
            filterChange: [{ type: core.Output }],
            remove: [{ type: core.Output }]
        };
        return SearchFieldPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SEARCH_BOX_VALUE_ACCESSOR$1 = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: core.forwardRef(( /**
         * @return {?}
         */function () { return SearchFieldsComponent; })),
        multi: true
    };
    var SearchFieldsComponent = /** @class */ (function (_super) {
        __extends(SearchFieldsComponent, _super);
        function SearchFieldsComponent(el, injector, overLayService, cd, dateHelp) {
            var _this = _super.call(this, el, injector, overLayService, cd) || this;
            _this.dateHelp = dateHelp;
            _this.fields = [];
            _this.maxSearchFields = 5;
            _this.condition = [];
            /**
             * 多字段查询
             */
            _this.multi = true;
            _this.conditionChange = new core.EventEmitter();
            _this.clear = new core.EventEmitter();
            /**
             * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
             */
            _this.enableFloat = true;
            _this.displayTextList = [];
            // filterConditions: Array<SearchFieldValue> = [];
            _this.moreStatus$ = new rxjs.BehaviorSubject(false);
            _this.hideShadowbox = new rxjs.Subject();
            _this.showShadowBox = false;
            _this.onModelChange = ( /**
             * @param {?} arr
             * @return {?}
             */function (arr) { });
            _this.onModelTouched = ( /**
             * @param {?} arr
             * @return {?}
             */function (arr) { });
            return _this;
        }
        Object.defineProperty(SearchFieldsComponent.prototype, "hasFilter", {
            get: /**
             * @return {?}
             */ function () {
                return this.displayTextList && this.displayTextList.length ? this.displayTextList.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.hasFilter; })).length : false;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SearchFieldsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.initDislayText(!!this.fields.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.value; })).length);
                this.overLayService.registerMouseEvent(this.el.nativeElement, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (_this.shadowBox && _this.showShadowBox) {
                        if (_this.shadowBox.nativeElement.contains(e.target)) {
                            return;
                        }
                        if (e.target.closest('.f-search-field-container')) {
                            return;
                        }
                        if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                            return;
                        }
                        _this.toggleShadowBox(false);
                        _this.hideShadowbox.next(e);
                    }
                }));
            };
        /**
         * @return {?}
         */
        SearchFieldsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.moveShadowToBody();
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        SearchFieldsComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
            };
        /**
         * @return {?}
         */
        SearchFieldsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.overLayService) {
                    this.overLayService = null;
                }
                if (this.shadowBox) {
                    this.shadowBox.nativeElement.remove();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldsComponent.prototype.filterChanged = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var conditions = this.fields.filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.value; })).map(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) {
                    var _a = n.value, value = _a.value, begin = _a.begin, end = _a.end;
                    if (value != null && value !== undefined && n.control.single) {
                        if (n.control.controltype === 'datetime') {
                            return [{
                                    filterField: n.code,
                                    value: value,
                                    lbracket: '(',
                                    rbracket: '',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.GreaterOrEqual
                                },
                                {
                                    filterField: n.code,
                                    value: _this.dateHelp.formatTo(_this.dateHelp.addDays(new Date(value), 1), n.control.dateFormat),
                                    lbracket: '',
                                    rbracket: ')',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.Less
                                }];
                        }
                        else if (n.control.controltype === 'enum' && Array.isArray(value)) {
                            return value.map(( /**
                             * @param {?} e
                             * @param {?} i
                             * @return {?}
                             */function (e, i) {
                                return {
                                    filterField: n.code,
                                    value: e,
                                    lbracket: i ? '' : '(',
                                    rbracket: i == value.length - 1 ? ')' : '',
                                    relation: i == value.length - 1 ? types.FilterRelation.And : types.FilterRelation.Or,
                                    compare: types.Compare.Equal
                                };
                            }));
                        }
                        return {
                            filterField: n.code,
                            value: Array.isArray(value) ? value.join(',') : value,
                            lbracket: '',
                            rbracket: '',
                            relation: types.FilterRelation.And,
                            compare: Array.isArray(value) ? types.Compare.In : types.Compare.Equal
                        };
                    }
                    else {
                        if (begin !== '' && begin != null && begin != undefined && end !== '' && end != null && end != undefined) {
                            return [
                                {
                                    filterField: n.code,
                                    value: begin,
                                    lbracket: '(',
                                    rbracket: '',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.GreaterOrEqual
                                },
                                {
                                    filterField: n.code,
                                    value: end,
                                    lbracket: '',
                                    rbracket: ')',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.LessOrEqual
                                }
                            ];
                        }
                        else {
                            if (begin !== '' && begin != null && begin != undefined) {
                                return {
                                    filterField: n.code,
                                    value: begin,
                                    lbracket: '',
                                    rbracket: '',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.GreaterOrEqual
                                };
                            }
                            if (end !== '' && end != null && end != undefined) {
                                return {
                                    filterField: n.code,
                                    value: end,
                                    lbracket: '',
                                    rbracket: '',
                                    relation: types.FilterRelation.And,
                                    compare: types.Compare.LessOrEqual
                                };
                            }
                        }
                        return null;
                    }
                })).filter(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n; }));
                /** @type {?} */
                var _conditions = [];
                if (conditions && conditions.length) {
                    _conditions = lodashEs.flatten(conditions);
                    _conditions[_conditions.length - 1].relation = types.FilterRelation.Empty;
                }
                this.onModelChange(this.fields);
                this.onModelTouched(this.fields);
                this.conditionChange.emit(_conditions);
            };
        /**
         * @param {?} condition
         * @return {?}
         */
        SearchFieldsComponent.prototype.setConditions = /**
         * @param {?} condition
         * @return {?}
         */
            function (condition) {
                /** @type {?} */
                var field = this.fields.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code === condition.field; }));
                field.value = condition.value;
                field.control.single = condition.value.single;
                this.initDislayText();
                this.cd.detectChanges();
            };
        /**
         * @private
         * @param {?=} emit
         * @return {?}
         */
        SearchFieldsComponent.prototype.initDislayText = /**
         * @private
         * @param {?=} emit
         * @return {?}
         */
            function (emit) {
                if (emit === void 0) {
                    emit = true;
                }
                this.displayTextList = this.fields.map(( /**
                 * @param {?} t
                 * @return {?}
                 */function (t) {
                    /** @type {?} */
                    var n = __assign({}, t);
                    n.dislayText = n.name;
                    n.hasFilter = false;
                    if (n.value) {
                        var _a = n.value, value = _a.value, begin = _a.begin, end = _a.end;
                        /** @type {?} */
                        var val = value;
                        if (t.control && t.control.enumValues && t.control.enumValues.length) {
                            if (!Array.isArray(val)) {
                                val = [val];
                            }
                            val = val.map(( /**
                             * @param {?} n
                             * @return {?}
                             */function (n) {
                                /** @type {?} */
                                var d = t.control.enumValues.find(( /**
                                 * @param {?} e
                                 * @return {?}
                                 */function (e) { return e.value === n; }));
                                if (d) {
                                    return d.name;
                                }
                                return n;
                            })).join(',');
                        }
                        else {
                            if (begin !== null && begin !== undefined) {
                                val = begin;
                            }
                            if (end !== null && end !== undefined) {
                                if (val != null) {
                                    val += '~' + end;
                                }
                                else {
                                    val = end;
                                }
                            }
                        }
                        n.dislayText += '：' + val;
                        n.hasFilter = true;
                    }
                    return n;
                }));
                this.setMoreStatus();
                if (emit) {
                    this.filterChanged();
                }
            };
        /**
         * @param {?} field
         * @return {?}
         */
        SearchFieldsComponent.prototype.remove = /**
         * @param {?} field
         * @return {?}
         */
            function (field) {
                /** @type {?} */
                var searchField = this.fields.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code === field; }));
                if (searchField) {
                    searchField.value = null;
                    this.initDislayText();
                }
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        SearchFieldsComponent.prototype.onRemoveItem = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                if (item.value !== null && item.value != undefined && item.value !== '') {
                    $event.stopPropagation();
                    this.remove(item.code);
                }
            };
        /**
         * @param {?=} emit
         * @return {?}
         */
        SearchFieldsComponent.prototype.clearConditions = /**
         * @param {?=} emit
         * @return {?}
         */
            function (emit) {
                if (emit === void 0) {
                    emit = true;
                }
                this.fields.forEach(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.value = null; }));
                this.initDislayText(emit);
                if (emit) {
                    this.clear.emit();
                }
                this.cd.detectChanges();
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        SearchFieldsComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                /** @type {?} */
                var arr = obj;
                if (!Array.isArray(obj)) {
                    arr = [];
                }
                this.fields = arr;
                this.initDislayText();
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SearchFieldsComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        SearchFieldsComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * @param {?} arr
         * @return {?}
         */
        SearchFieldsComponent.prototype.setValue = /**
         * @param {?} arr
         * @return {?}
         */
            function (arr) {
                // this.filterConditions = arr;
                // this.initDislayText();
            };
        /**
         * @param {?=} __0
         * @return {?}
         */
        SearchFieldsComponent.prototype.updateShadowBoxPosition = /**
         * @param {?=} __0
         * @return {?}
         */
            function (_a) {
                var _b = _a === void 0 ? { top: null, left: null, width: null } : _a, top = _b.top, left = _b.left, width = _b.width;
                if (!top && !left && !width) {
                    /** @type {?} */
                    var e = this.el.nativeElement.getBoundingClientRect();
                    top = e.top;
                    left = e.left;
                    width = e.width;
                }
                this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
                this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldsComponent.prototype.moveShadowToBody = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this.enableFloat) {
                    return;
                }
                this.updateShadowBoxPosition();
                document.body.append(this.shadowBox.nativeElement);
            };
        /**
         * @param {?=} show
         * @param {?=} el
         * @return {?}
         */
        SearchFieldsComponent.prototype.toggleShadowBox = /**
         * @param {?=} show
         * @param {?=} el
         * @return {?}
         */
            function (show, el) {
                if (show === void 0) {
                    show = true;
                }
                if (el === void 0) {
                    el = null;
                }
                if (!this.enableFloat) {
                    return;
                }
                if (el && el.clientHeight <= 30) {
                    return;
                }
                this.showShadowBox = show;
                if (show) {
                    this.updateShadowBoxPosition();
                    this.render.removeStyle(this.shadowBox.nativeElement, 'display');
                    this.container.nativeElement.style.visibility = 'hidden';
                    this.render.addClass(this.shadowBox.nativeElement, 'active');
                }
                else {
                    this.container.nativeElement.style.visibility = 'visible';
                    this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
                    this.render.removeClass(this.shadowBox.nativeElement, 'active');
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldsComponent.prototype.onResized = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.enableFloat) {
                    this.updateShadowBoxPosition($event);
                    this.setMoreStatus();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldsComponent.prototype.setMoreStatus = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.enableFloat) {
                    setTimeout(( /**
                     * @return {?}
                     */function () {
                        /** @type {?} */
                        var r = _this.tagContainerRef.nativeElement.clientHeight > 30;
                        _this.moreStatus$.next(r);
                        _this.cd.detectChanges();
                    }));
                }
            };
        SearchFieldsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'farris-search-fields',
                        template: "\r\n<!-- [style.color]=\"hasFilter && (moreStatus$ | async) ? '#529dff': ''\" -->\r\n<div #searchbox class=\"input-group f-search-box f-search-fields\" style=\"border-color: transparent\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px; padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" [class.more]=\"moreStatus$ | async\"\r\n         style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox(true, tagContainer)\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-search-shadow-fields\" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more pb-1 d-flex\" style=\"height: auto; min-height: 26px;padding: 0 5px\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                        // styleUrls: [
                        //     `../searchbox-panel.scss`
                        // ],
                        encapsulation: core.ViewEncapsulation.None,
                        providers: [
                            SEARCH_BOX_VALUE_ACCESSOR$1
                        ]
                    }] }
        ];
        /** @nocollapse */
        SearchFieldsComponent.ctorParameters = function () {
            return [
                { type: core.ElementRef },
                { type: core.Injector },
                { type: uiCommon.OverLayHiddenService, decorators: [{ type: core.Optional }] },
                { type: core.ChangeDetectorRef },
                { type: date.DateTimeHelperService }
            ];
        };
        SearchFieldsComponent.propDecorators = {
            fields: [{ type: core.Input }],
            maxSearchFields: [{ type: core.Input }],
            condition: [{ type: core.Input }],
            multi: [{ type: core.Input }],
            container: [{ type: core.ViewChild, args: ['searchbox',] }],
            shadowBox: [{ type: core.ViewChild, args: ['searchbox2',] }],
            tagContainerRef: [{ type: core.ViewChild, args: ['tagContainer',] }],
            conditionChange: [{ type: core.Output }],
            clear: [{ type: core.Output }]
        };
        return SearchFieldsComponent;
    }(SearchBoxBase));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldDirective = /** @class */ (function () {
        function SearchFieldDirective(injector, elRef, ngzone, render, cfr, searchFieldsRef, _applicationRef) {
            this.injector = injector;
            this.elRef = elRef;
            this.ngzone = ngzone;
            this.render = render;
            this.cfr = cfr;
            this.searchFieldsRef = searchFieldsRef;
            this._applicationRef = _applicationRef;
            this.winResizeHandle = null;
            this.docKeydownEventHandle = null;
            this.commonUtils = null;
            this.commonUtils = this.injector.get(uiCommon.CommonUtils, new uiCommon.CommonUtils());
        }
        /**
         * @return {?}
         */
        SearchFieldDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.searchFieldsRef) {
                    this.searchFieldsRef.hideShadowbox.subscribe(( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        _this.removeFieldPanel();
                    }));
                }
                this.winResizeHandle = this.render.listen(window, 'resize', ( /**
                 * @return {?}
                 */function () {
                    _this.removeFieldPanel();
                }));
            };
        /**
         * @return {?}
         */
        SearchFieldDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SearchFieldDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.removeFieldPanel();
                if (this.winResizeHandle) {
                    this.winResizeHandle();
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldDirective.prototype.onMouseDown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldDirective.prototype.onFieldClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                if (!this.panelElement) {
                    this.createFieldPanel();
                }
                else {
                    this.removeFieldPanel();
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldDirective.prototype.removeFieldPanel = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.panelElement) {
                    this.panelElement.remove();
                    this.panelElement = null;
                    this.searchFieldsRef.overLayService.destory(this.elRef.nativeElement);
                    this.render.removeClass(this.elRef.nativeElement, 'selected');
                }
                if (this.docKeydownEventHandle) {
                    this.docKeydownEventHandle();
                    this.docKeydownEventHandle = null;
                }
            };
        /**
         * @private
         * @param {?=} enterFn
         * @return {?}
         */
        SearchFieldDirective.prototype.registerKeyboardEvent = /**
         * @private
         * @param {?=} enterFn
         * @return {?}
         */
            function (enterFn) {
                var _this = this;
                if (this.commonUtils) {
                    return this.commonUtils.regBodyKeydownEvent(enterFn, ( /**
                     * @return {?}
                     */function () { _this.removeFieldPanel(); }));
                }
                return null;
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldDirective.prototype.createFieldPanel = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.panelElement = document.createElement('div');
                this.panelElement.classList.add('overlay-pane', 'f-filter-panel', 'f-area-hide', 'f-search-field-container');
                /** @type {?} */
                var zindex = '' + this.searchFieldsRef.commonUtils.getFloatingLayerIndex();
                this.panelElement.style.zIndex = zindex;
                document.body.appendChild(this.panelElement);
                this.setPanelPosition();
                /** @type {?} */
                var fieldPanelRef = this.cfr.resolveComponentFactory(SearchFieldPanelComponent);
                /** @type {?} */
                var _fieldPanelIns = fieldPanelRef.create(this.injector);
                this._applicationRef.attachView(_fieldPanelIns.hostView);
                _fieldPanelIns.instance.fieldOptions = this.field;
                _fieldPanelIns.instance.conditions = { field: this.field.code, value: this.field.value };
                this.panelElement.appendChild(_fieldPanelIns.location.nativeElement);
                this.panelElement.classList.add('f-area-show');
                _fieldPanelIns.instance.filterChange.pipe(operators.debounceTime(100)).subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    // 新的查询条件
                    // console.log(e);
                    _this.searchFieldsRef.setConditions(e);
                }));
                _fieldPanelIns.instance.remove.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    _this.searchFieldsRef.remove(e.code);
                }));
                _fieldPanelIns.changeDetectorRef.detectChanges();
                this.searchFieldsRef.overLayService.registerMouseEvent(this.elRef.nativeElement, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (_this.elRef.nativeElement.contains(e.target)) {
                        return;
                    }
                    if (e.target.closest('.f-search-field-container')) {
                        if (e.target.nodeName === 'BUTTON' && e.target.className.indexOf('close-field-panel') > -1) {
                            _this.removeFieldPanel();
                        }
                        return;
                    }
                    if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                        return;
                    }
                    _this.removeFieldPanel();
                }));
                this.render.addClass(this.elRef.nativeElement, 'selected');
                // 处理 ESC、ENTER
                this.docKeydownEventHandle = this.registerKeyboardEvent(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var btnok = _fieldPanelIns.instance.btnSubmit;
                    if (btnok && !btnok.nativeElement.disabled) {
                        btnok.nativeElement.click();
                        _this.removeFieldPanel();
                    }
                }));
            };
        /**
         * @private
         * @param {?=} updateTopPosition
         * @return {?}
         */
        SearchFieldDirective.prototype.setPanelPosition = /**
         * @private
         * @param {?=} updateTopPosition
         * @return {?}
         */
            function (updateTopPosition) {
                if (updateTopPosition === void 0) {
                    updateTopPosition = true;
                }
                if (this.panelElement) {
                    var _a = this.getPanelSize(), width = _a.width, left = _a.left, top_1 = _a.top, height = _a.height;
                    this.panelElement.style.width = width + "px";
                    // this.panelElement.style.maxHeight = `${height}px`;
                    if (updateTopPosition) {
                        this.panelElement.style.top = top_1 + "px";
                    }
                    this.panelElement.style.left = left + "px";
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldDirective.prototype.getInputSizeInfo = /**
         * @private
         * @return {?}
         */
            function () {
                return this.elRef.nativeElement.getBoundingClientRect();
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldDirective.prototype.getPanelSize = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var width = 380;
                var _a = this.getInputSizeInfo(), top = _a.top, left = _a.left, height = _a.height;
                /** @type {?} */
                var bottom = window.innerHeight - height - top;
                /** @type {?} */
                var panelHeight = 190;
                /** @type {?} */
                var h = top > bottom ? top : bottom;
                if (bottom > panelHeight) {
                    top = top + height;
                    // 面板由上向下展开
                    this.panelElement.style.transformOrigin = '100% top';
                }
                else {
                    if (top > bottom) {
                        if (h < panelHeight) {
                            panelHeight = h - 10;
                            top = 10;
                        }
                        else {
                            top = top - parseInt('' + panelHeight, 10) - 5;
                        }
                        // 面板由下向上展开
                        this.panelElement.style.transformOrigin = '100% bottom';
                    }
                    else {
                        if (h < panelHeight) {
                            panelHeight = h - 10;
                        }
                        top = top + height;
                    }
                }
                if (window.innerWidth - left < width) {
                    left = left + width - width;
                }
                return { width: width, top: top, height: panelHeight, left: left };
            };
        SearchFieldDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[search-field]' },] }
        ];
        /** @nocollapse */
        SearchFieldDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ElementRef },
                { type: core.NgZone },
                { type: core.Renderer2 },
                { type: core.ComponentFactoryResolver },
                { type: SearchFieldsComponent },
                { type: core.ApplicationRef }
            ];
        };
        SearchFieldDirective.propDecorators = {
            field: [{ type: core.Input, args: ['search-field',] }],
            onMouseDown: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }],
            onFieldClick: [{ type: core.HostListener, args: ['click', ['$event'],] }]
        };
        return SearchFieldDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchPanelComponent = /** @class */ (function () {
        function SearchPanelComponent(injector, cdr) {
            this.injector = injector;
            this.cdr = cdr;
            this.fields = [];
            this.maxItems = 5;
            this.searchKeyWord = '';
            this.itemClick = new core.EventEmitter();
            this.closepanel = new core.EventEmitter();
            this.mouseDown = new core.EventEmitter();
            this.activeIndex = -1;
        }
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchPanelComponent.prototype.onClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
            };
        /**
         * @return {?}
         */
        SearchPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} items
         * @return {?}
         */
        SearchPanelComponent.prototype.loadData = /**
         * @param {?} items
         * @return {?}
         */
            function (items) {
                this.fields = items;
                if (!this.cdr['destroyed']) {
                    this.cdr.detectChanges();
                }
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        SearchPanelComponent.prototype.onFieldItemClick = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                $event.preventDefault();
                this.itemClick.emit({ data: item, evnet: $event });
            };
        /**
         * @param {?} index
         * @return {?}
         */
        SearchPanelComponent.prototype.setActiveItem = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                this.activeIndex = index;
                if (!this.cdr['destroyed']) {
                    this.cdr.detectChanges();
                }
            };
        /**
         * @param {?} val
         * @return {?}
         */
        SearchPanelComponent.prototype.setValue = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
                this.searchKeyWord = val;
                this.cdr.detectChanges();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchPanelComponent.prototype.onClosePanel = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                this.closepanel.emit();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchPanelComponent.prototype.onMouseDown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.preventDefault();
                $event.stopPropagation();
                this.mouseDown.emit($event);
            };
        SearchPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'search-panel',
                        template: "<div class=\"d-flex flex-column px-2\" style=\"width: 100%;height:100%;\" #itemsContainer (mousedown)=\"onMouseDown($event)\">\r\n    <div class=\"search-tip-info d-flex flex-row align-items-center\" style=\"height: auto;line-height: normal;padding:7px\" >{{'searchbox.tips' | locale}} <i class=\"f-icon f-icon-close\" (click)=\"onClosePanel($event)\"></i></div>\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\">\r\n            <li class=\"list-group-item list-group-item-action d-flex flex-row\" [class.active]=\"activeIndex === i\" \r\n                    *ngFor=\"let item of fields; index as i\" (click)=\"onFieldItemClick($event, item)\">\r\n                <span style=\"min-width: 60px; text-align:right\" title=\"{{item.name}} ({{ item.code }})\">{{ item.name }} </span>\r\n                <span class=\"mx-2 text-muted\" >{{'searchbox.contain' | locale}}</span>\r\n                <div class=\"f-utils-fill text-primary search-box-keyword \" [innerHTML]=\" searchKeyWord | searchwords | safe: 'html' \"></div> \r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        SearchPanelComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchPanelComponent.propDecorators = {
            fields: [{ type: core.Input }],
            maxItems: [{ type: core.Input }],
            searchKeyWord: [{ type: core.Input }],
            itemClick: [{ type: core.Output }],
            closepanel: [{ type: core.Output }],
            mouseDown: [{ type: core.Output }],
            itemsContainer: [{ type: core.ViewChild, args: ['itemsContainer',] }],
            onClick: [{ type: core.HostListener, args: ['mousedown', ['$event'],] }]
        };
        return SearchPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchPanelDirective = /** @class */ (function () {
        function SearchPanelDirective(injector, ngzone, render, inputRef, searchBoxRef, cfr) {
            this.injector = injector;
            this.ngzone = ngzone;
            this.render = render;
            this.inputRef = inputRef;
            this.searchBoxRef = searchBoxRef;
            this.cfr = cfr;
            this.maxFields = 5;
            /**
             * 启用 任意字段
             */
            this.useAnyField = true;
            this.escHandler = new core.EventEmitter();
            this.maxPanelItems = 10;
            this.minPanelWidth = 270;
        }
        /**
         * @return {?}
         */
        SearchPanelDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @return {?}
         */
        SearchPanelDirective.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if ((!this.fields || !this.fields.length) && !this.useAnyField) {
                    return;
                }
                this.inputRef.inputClick.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    e.stopPropagation();
                }));
                this.inputRef.valueChange.pipe(operators.debounceTime(50)).subscribe(( /**
                 * @param {?} val
                 * @return {?}
                 */function (val) {
                    if (lodashEs.trim(val)) {
                        // 值变化显示查询面板
                        if (!_this.panelElement) {
                            _this.createDataPanel();
                            _this.searchPanelRef.instance.setActiveItem(0);
                        }
                        _this.searchPanelRef.instance.setValue(val);
                    }
                    else {
                        if (_this.panelElement) {
                            _this.hide();
                        }
                    }
                }));
                this.searchBoxRef.clear.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.hide();
                }));
            };
        /**
         * @return {?}
         */
        SearchPanelDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                this.searchBoxRef.overLayService.destory(this.searchBoxRef.el.nativeElement);
            };
        /**
         * @private
         * @return {?}
         */
        SearchPanelDirective.prototype.removePanelElement = /**
         * @private
         * @return {?}
         */
            function () {
                document.body.removeChild(this.panelElement);
                this.panelElement = null;
                if (this.searchPanelRef) {
                    this.searchPanelRef.destroy();
                    this.searchPanelRef = null;
                }
            };
        /**
         * @param {?=} e
         * @return {?}
         */
        SearchPanelDirective.prototype.hide = /**
         * @param {?=} e
         * @return {?}
         */
            function (e) {
                var _this = this;
                uiCommon.reqAnimFrame(( /**
                 * @return {?}
                 */function () {
                    _this.inputRef.value = '';
                    if (_this.panelElement) {
                        if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                            _this.removePanelElement();
                        }
                        else {
                            _this.panelElement.classList.remove('f-area-show');
                            setTimeout(( /**
                             * @return {?}
                             */function () {
                                _this.removePanelElement();
                            }), 120);
                        }
                        _this.searchBoxRef.overLayService.destory(_this.searchBoxRef.el.nativeElement);
                    }
                }));
            };
        /**
         * @private
         * @param {?=} updateTopPosition
         * @return {?}
         */
        SearchPanelDirective.prototype.setPanelPosition = /**
         * @private
         * @param {?=} updateTopPosition
         * @return {?}
         */
            function (updateTopPosition) {
                if (updateTopPosition === void 0) {
                    updateTopPosition = true;
                }
                if (this.panelElement) {
                    var _a = this.getPanelSize(), maxWidth = _a.maxWidth, left = _a.left, top_1 = _a.top, height = _a.height;
                    this.panelElement.style.minWidth = this.minPanelWidth + "px";
                    this.panelElement.style.maxWidth = maxWidth + "px";
                    this.panelElement.style.maxHeight = height + "px";
                    if (updateTopPosition) {
                        this.panelElement.style.top = top_1 + "px";
                    }
                    this.panelElement.style.left = left + "px";
                }
            };
        /**
         * @private
         * @return {?}
         */
        SearchPanelDirective.prototype.createDataPanel = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.panelElement = document.createElement('div');
                this.panelElement.classList.add('overlay-pane', 'f-search-box-panel', 'f-area-hide');
                /** @type {?} */
                var zindex = '' + this.searchBoxRef.commonUtils.getFloatingLayerIndex();
                document.body.appendChild(this.panelElement);
                this.setPanelPosition();
                this.panelElement.style.zIndex = zindex;
                this.panelElement.style.overflow = 'hidden';
                // 创建数据展示组件
                /** @type {?} */
                var cmpFact = this.cfr.resolveComponentFactory(SearchPanelComponent);
                this.searchPanelRef = cmpFact.create(this.injector);
                if (this.useAnyField && !this.fields.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.code === '*'; }))) {
                    /** @type {?} */
                    var anyfieldsName = this.searchBoxRef.localeSer.getValue('searchbox.anyFields');
                    this.fields.splice(0, 0, { code: '*', name: anyfieldsName });
                }
                this.searchPanelRef.instance.fields = this.fields;
                this.panelElement.appendChild(this.searchPanelRef.location.nativeElement);
                this.searchPanelRef.changeDetectorRef.detectChanges();
                this.searchPanelRef.instance.searchKeyWord = this.inputRef.value;
                this.searchPanelRef.instance.itemClick.subscribe(( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    var data = e.data;
                    _this.selectItem(data);
                }));
                this.searchPanelRef.instance.closepanel.subscribe(( /**
                 * @return {?}
                 */function () {
                    _this.hide();
                }));
                // 注册鼠标滚轮，点击事件，用于隐藏Panel
                this.searchBoxRef.overLayService.registerMouseEvent(this.searchBoxRef.el.nativeElement, ( /**
                 * @param {?} e
                 * @return {?}
                 */function (e) {
                    if (!_this.panelElement || e.target['closest']('.f-search-box-panel')) {
                        return;
                    }
                    if (_this.inputRef && _this.inputRef.textbox.nativeElement === e.target) {
                        return false;
                    }
                    // 输入框内有文本时，如果不允许关闭弹出面板，可放开
                    // if (this.inputRef.value) {
                    //     return;
                    // }
                    _this.hide(e);
                }));
                if (this.searchPanelRef.instance.fields.length + 1 < this.maxPanelItems) {
                    /** @type {?} */
                    var newHeight = this.searchPanelRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 40;
                    this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = newHeight + "px";
                    if (this.panelElement) {
                        if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                            this.panelElement.style.top = this.getInputSizeInfo().top - newHeight - 5 + "px";
                        }
                        this.panelElement.style.height = 'auto';
                    }
                }
                else {
                    this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = '100%';
                    if (this.panelElement) {
                        this.render.removeStyle(this.panelElement, 'height');
                    }
                }
                this.panelElement.classList.add('f-area-show');
            };
        /**
         * @private
         * @param {?} data
         * @return {?}
         */
        SearchPanelDirective.prototype.selectItem = /**
         * @private
         * @param {?} data
         * @return {?}
         */
            function (data) {
                if (!data) {
                    return;
                }
                this.searchBoxRef.select(__assign({}, data, { value: this.inputRef.value }));
                this.hide();
                this.inputRef.focus();
            };
        /**
         * @private
         * @return {?}
         */
        SearchPanelDirective.prototype.calculationPanelHeight = /**
         * @private
         * @return {?}
         */
            function () {
                return this.maxPanelItems * 30 + 15;
            };
        /**
         * @private
         * @return {?}
         */
        SearchPanelDirective.prototype.getInputSizeInfo = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.searchBoxRef.enableFloat ? this.searchBoxRef.shadowBox : this.searchBoxRef.container;
                return el.nativeElement.getBoundingClientRect();
            };
        /**
         * @private
         * @return {?}
         */
        SearchPanelDirective.prototype.getPanelSize = /**
         * @private
         * @return {?}
         */
            function () {
                var _a = this.getInputSizeInfo(), width = _a.width, height = _a.height, top = _a.top, left = _a.left;
                /** @type {?} */
                var bottom = window.innerHeight - height - top;
                /** @type {?} */
                var panelHeight = this.calculationPanelHeight();
                /** @type {?} */
                var h = top > bottom ? top : bottom;
                if (bottom > panelHeight) {
                    top = top + height;
                    // 面板由上向下展开
                    this.panelElement.style.transformOrigin = '100% top';
                }
                else {
                    if (top > bottom) {
                        if (h < panelHeight) {
                            panelHeight = h - 10;
                            top = 10;
                        }
                        else {
                            top = top - parseInt('' + panelHeight, 10) - 5;
                        }
                        // 面板由下向上展开
                        this.panelElement.style.transformOrigin = '100% bottom';
                    }
                    else {
                        if (h < panelHeight) {
                            panelHeight = h - 10;
                        }
                        top = top + height;
                    }
                }
                /** @type {?} */
                var _width = width < this.minPanelWidth ? this.minPanelWidth : width;
                if (window.innerWidth - left < _width) {
                    left = left + width - _width;
                }
                return { width: _width, top: top, height: panelHeight, left: left, maxWidth: Math.floor(window.innerWidth - left - 10) };
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchPanelDirective.prototype.registerKeyboardEvent = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var _this = this;
                /** @type {?} */
                var rows = this.fields;
                if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
                    $event.preventDefault();
                    $event.stopPropagation();
                    if (this.searchPanelRef) {
                        /** @type {?} */
                        var idx = this.searchPanelRef.instance.activeIndex;
                        /** @type {?} */
                        var setActiveItem = ( /**
                         * @param {?} index
                         * @return {?}
                         */function (index) {
                            _this.searchPanelRef.instance.setActiveItem(index);
                        });
                        if ($event.code === 'ArrowUp') { // up
                            if (idx > -1) {
                                /** @type {?} */
                                var prevIdx = idx - 1;
                                if (prevIdx < 0) {
                                    prevIdx = rows.length - 1;
                                }
                                setActiveItem(prevIdx);
                            }
                            else {
                                setActiveItem(rows.length - 1);
                            }
                        }
                        if ($event.code === 'ArrowDown') { // down
                            // down
                            /** @type {?} */
                            var nextIdx = idx + 1;
                            if (nextIdx >= rows.length) {
                                nextIdx = 0;
                            }
                            setActiveItem(nextIdx);
                        }
                    }
                }
                if ($event.code === 'Backspace') {
                    if (!this.inputRef.value) {
                        if (this.searchBoxRef.displayTextList && this.searchBoxRef.displayTextList.length) {
                            $event.preventDefault();
                            $event.stopPropagation();
                            /** @type {?} */
                            var removeItem = this.searchBoxRef.displayTextList[this.searchBoxRef.displayTextList.length - 1];
                            if (removeItem) {
                                this.searchBoxRef.remove(removeItem.code);
                                if (this.searchPanelRef) {
                                    this.searchPanelRef.changeDetectorRef.detectChanges();
                                }
                            }
                        }
                    }
                }
                if ($event.key === 'Enter') {
                    if (rows && rows.length && this.panelElement) {
                        /** @type {?} */
                        var idx = this.searchPanelRef.instance.activeIndex;
                        /** @type {?} */
                        var data = rows[idx];
                        this.selectItem(data);
                    }
                    else {
                        this.searchBoxRef.onSubmit($event);
                    }
                }
                if ($event.key === 'Escape') {
                    if (this.panelElement) {
                        this.hide();
                    }
                    else {
                        this.escHandler.emit();
                    }
                }
            };
        SearchPanelDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[search-box-panel]' },] }
        ];
        /** @nocollapse */
        SearchPanelDirective.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.NgZone },
                { type: core.Renderer2 },
                { type: uiInputGroup.InputGroupComponent },
                { type: SearchBoxComponent },
                { type: core.ComponentFactoryResolver }
            ];
        };
        SearchPanelDirective.propDecorators = {
            fields: [{ type: core.Input, args: ['search-box-panel',] }],
            maxFields: [{ type: core.Input }],
            useAnyField: [{ type: core.Input }],
            escHandler: [{ type: core.Output }],
            registerKeyboardEvent: [{ type: core.HostListener, args: ['keydown', ['$event'],] }]
        };
        return SearchPanelDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchWordPipe = /** @class */ (function () {
        function SearchWordPipe(injector, searchBoxRef) {
            this.injector = injector;
            this.searchBoxRef = searchBoxRef;
        }
        /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
        SearchWordPipe.prototype.transform = /**
         * @param {?} value
         * @param {...?} args
         * @return {?}
         */
            function (value) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                if (value !== undefined && value !== null) {
                    /** @type {?} */
                    var relationStr_1 = this.searchBoxRef.localeSer.getValue('searchbox.relation.or');
                    /** @type {?} */
                    var arr_1 = value.trim().split(' ').filter(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.trim(); }));
                    return arr_1.map(( /**
                     * @param {?} n
                     * @param {?} i
                     * @return {?}
                     */function (n, i) {
                        return n + (i === arr_1.length - 1 ? '' : '<span class="text-muted" style="margin: 0 5px;"> ' + relationStr_1 + ' </span>');
                    })).join('');
                }
                return '';
            };
        SearchWordPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'searchwords'
                    },] }
        ];
        /** @nocollapse */
        SearchWordPipe.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: SearchBoxComponent }
            ];
        };
        return SearchWordPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldFlexibleDateComponent = /** @class */ (function () {
        function SearchFieldFlexibleDateComponent(localeService, injector, cd) {
            this.localeService = localeService;
            this.injector = injector;
            this.cd = cd;
            this.valueChange = new core.EventEmitter();
            // 是否为区间日期
            this.single = true;
            this.dateFormat = '';
            this.showTime = false;
            this.value = '';
            this.beginValue = '';
            this.endValue = '';
            this.showType = '1';
            this.placeholder = '';
            this.endPlaceHolder = '';
            this.beginPlaceHolder = '';
            this.activedDateTagId = '';
            this.activedDayTagId = '';
            this.dateTags = [];
            this.dayTags = [];
            this.dateHelp = null;
            this.dateHelp = this.injector.get(date.DateTimeHelperService, new date.DateTimeHelperService());
        }
        /**
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.dateTags = [
                    {
                        id: 'tag1',
                        text: this.localeService.getValue('filterPanel.last1Month')
                    },
                    {
                        id: 'tag2',
                        text: this.localeService.getValue('filterPanel.last3Month')
                    },
                    {
                        id: 'tag3',
                        text: this.localeService.getValue('filterPanel.last6Month')
                    }
                ];
                this.dayTags = [
                    {
                        id: 'yesterday',
                        text: this.localeService.getValue('filterPanel.yesterday')
                    },
                    {
                        id: 'today',
                        text: this.localeService.getValue('filterPanel.today')
                    }
                ];
                if (this.field.control) {
                    var _a = this.field.control, showTime = _a.showTime, showType = _a.showType, single = _a.single;
                    if (this.field.value) {
                        var _b = this.field.value, value = _b.value, begin = _b.begin, end = _b.end;
                        this.value = value,
                            this.beginValue = begin;
                        this.endValue = end;
                    }
                    this.showTime = showTime;
                    this.showType = showType;
                    this.single = single;
                    /** @type {?} */
                    var itemDateFormat = this.field.control.dateFormat;
                    if (this.showTime && itemDateFormat) {
                        if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                            itemDateFormat = itemDateFormat + ' HH:mm:ss';
                        }
                    }
                    else {
                        itemDateFormat = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
                    }
                    this.dateFormat = itemDateFormat;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.onDateChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.beginValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.endValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.onSingleChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.single = !$event;
                this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
                this.cd.detectChanges();
            };
        /**
         * @param {?} tag
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.clickTag = /**
         * @param {?} tag
         * @return {?}
         */
            function (tag) {
                this.activedDateTagId = tag.id;
                /** @type {?} */
                var tagDate;
                if (tag.id == 'tag1') {
                    tagDate = this.getLastNumMonth(1, this.showTime, this.showType);
                }
                else if (tag.id == 'tag2') {
                    tagDate = this.getLastNumMonth(3, this.showTime, this.showType);
                }
                else if (tag.id == 'tag3') {
                    tagDate = this.getLastNumMonth(6, this.showTime, this.showType);
                }
                this.beginValue = tagDate['startTime'];
                this.endValue = tagDate['endTime'];
                this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
                this.cd.detectChanges();
            };
        /**
         * @param {?} tag
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.clickDayTag = /**
         * @param {?} tag
         * @return {?}
         */
            function (tag) {
                this.activedDayTagId = tag.id;
                /** @type {?} */
                var dayTag = this.getToday(this.activedDayTagId, this.showTime);
                this.value = dayTag;
                this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
            };
        /**
         * @private
         * @param {?} num
         * @param {?} showtime
         * @param {?} type
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.getLastNumMonth = /**
         * @private
         * @param {?} num
         * @param {?} showtime
         * @param {?} type
         * @return {?}
         */
            function (num, showtime, type) {
                /** @type {?} */
                var now = new Date();
                /** @type {?} */
                var year = now.getFullYear();
                /** @type {?} */
                var month = now.getMonth() + 1;
                //0-11表示1-12月
                /** @type {?} */
                var day = now.getDate();
                /** @type {?} */
                var hour = now.getHours();
                /** @type {?} */
                var min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
                    : new Date().getMinutes();
                /** @type {?} */
                var sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
                    : new Date().getSeconds();
                /** @type {?} */
                var dateObj = {};
                /** @type {?} */
                var time = hour + ':' + min + ':' + sec;
                // dateObj['endTime'] = year + '-' + month + '-' + day;
                /** @type {?} */
                var endMonth = month < 10 ? '0' + month : month;
                /** @type {?} */
                var endDay = day < 10 ? '0' + day : day;
                if (type == '2') {
                    dateObj['endTime'] = year + '-' + endMonth;
                }
                else if (type == '3') {
                    dateObj['endTime'] = year;
                }
                else {
                    dateObj['endTime'] = year + '-' + endMonth + '-' + endDay;
                }
                /** @type {?} */
                var nowMonthDay = new Date(year, month, 0).getDate();
                //当前月的总天数
                /** @type {?} */
                var dYear;
                /** @type {?} */
                var dMouth;
                /** @type {?} */
                var dDay;
                if (month - num <= 0) { //如果是1、2、3月，年数往前推一年
                    //如果是1、2、3月，年数往前推一年
                    /** @type {?} */
                    var lastMonthDay = new Date((year - 1), (12 - (num - month)), 0).getDate();
                    if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                        // dateObj['startTime'] = (year - 1) + '-' + (12 - (num - month)) + '-' + lastMonthDay;
                        dYear = year - 1;
                        dMouth = 12 - (num - month);
                        dDay = lastMonthDay;
                    }
                    else {
                        dYear = year - 1;
                        dMouth = 12 - (num - month);
                        dDay = day;
                        // dateObj['startTime']= (year - 1) + '-' + (12 - (num - month)) + '-' + day;
                    }
                }
                else {
                    /** @type {?} */
                    var lastMonthDay = new Date(year, (month - num), 0).getDate();
                    if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                        if (day < nowMonthDay) { //当前天日期小于当前月总天数,2月份比较特殊的月份
                            // dateObj['startTime'] = year + '-' + (month - num) + '-' + (lastMonthDay - (nowMonthDay - day));
                            dYear = year;
                            dMouth = month - num;
                            dDay = lastMonthDay - (nowMonthDay - day);
                        }
                        else {
                            dYear = year;
                            dMouth = month - num;
                            dDay = lastMonthDay;
                            // dateObj['startTime'] = year + '-' + (month - num) + '-' + lastMonthDay;
                        }
                    }
                    else {
                        dYear = year;
                        dMouth = month - num;
                        dDay = day;
                        // dateObj['startTime'] = year + '-' + (month - num) + '-' + day;
                    }
                }
                dMouth = dMouth < 10 ? '0' + dMouth : dMouth;
                dDay = dDay < 10 ? '0' + dDay : dDay;
                if (type == '2') {
                    dateObj['startTime'] = dYear + '-' + dMouth;
                }
                else if (type == '3') {
                    dateObj['startTime'] = dYear;
                }
                else {
                    dateObj['startTime'] = dYear + '-' + dMouth + '-' + dDay;
                }
                if (showtime) {
                    dateObj['endTime'] = dateObj['endTime'] + ' ' + time;
                    dateObj['startTime'] = dateObj['startTime'] + ' ' + time;
                }
                return dateObj;
            };
        /**
         * @private
         * @param {?=} dayTags
         * @param {?=} showtime
         * @return {?}
         */
        SearchFieldFlexibleDateComponent.prototype.getToday = /**
         * @private
         * @param {?=} dayTags
         * @param {?=} showtime
         * @return {?}
         */
            function (dayTags, showtime) {
                if (dayTags === void 0) {
                    dayTags = 'today';
                }
                /** @type {?} */
                var now = new Date();
                if (dayTags == 'today') {
                    return this.dateHelp.formatTo(now, this.dateFormat);
                }
                else if (dayTags == 'yesterday') {
                    return this.dateHelp.formatTo(this.dateHelp.subDays(now, 1), this.dateFormat);
                }
                /*
                let year = now.getFullYear();
                let month = now.getMonth() + 1;//0-11表示1-12月
                let day = now.getDate();
                let hour = now.getHours();
                let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
                    :new Date().getMinutes();
                let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
                    :new Date().getSeconds();
                const time = hour + ':' + min + ':' + sec;
                let yesterday = new Date();
                yesterday.setTime(now.getTime()-24*60*60*1000);
                let yesterdayObj = yesterday.getFullYear()+"-" + (yesterday.getMonth()+1) + "-" + yesterday.getDate();
                let dateObj = year + '-' + month + '-' + day;
                if(showtime){
                    dateObj = dateObj + ' ' + time;
                    yesterdayObj = yesterdayObj + ' ' + time;
                }
                if(dayTags == 'today') return dateObj;
                else if (dayTags == 'yesterday') return yesterdayObj;
        
                */
            };
        SearchFieldFlexibleDateComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'search-filed-editor-date',
                        template: "\r\n<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onSingleChange($event)\"></farris-switch>\r\n</div>\r\n\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime; else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n             (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n            [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n                 (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" \r\n                (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow mx-2\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"!single && showType !== '3'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let tag of dateTags\" (click)=\"clickTag(tag)\" \r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\">\r\n        {{tag.text}}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"single && showType !== '3' && showType !== '2'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let day of dayTags\" (click)=\"clickDayTag(day)\" [ngClass]=\"{'active': day.id == activedDayTagId}\">\r\n        {{day.text}}\r\n    </div>\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SearchFieldFlexibleDateComponent.ctorParameters = function () {
            return [
                { type: uiLocale.LocaleService },
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchFieldFlexibleDateComponent.propDecorators = {
            field: [{ type: core.Input }],
            valueChange: [{ type: core.Output }]
        };
        return SearchFieldFlexibleDateComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldFlexibleNumberComponent = /** @class */ (function () {
        function SearchFieldFlexibleNumberComponent(injecotr, cd) {
            this.injecotr = injecotr;
            this.cd = cd;
            this.valueChange = new core.EventEmitter();
            // 是否为区间日期
            this.single = true;
        }
        /**
         * @return {?}
         */
        SearchFieldFlexibleNumberComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.single = this.field.control.single;
                if (this.field) {
                    if (this.field.value) {
                        var _a = this.field.value, value = _a.value, begin = _a.begin, end = _a.end;
                        this.value = value;
                        this.beginValue = begin;
                        this.endValue = end;
                    }
                    this.bigNumber = this.field.control.bigNumber;
                    this.precision = this.field.control.precision || 0;
                    if (!this.bigNumber) {
                        this.min = -2147483648;
                        this.max = 2147483647;
                    }
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleNumberComponent.prototype.onSingleValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.single = !$event;
                this.valueChange.emit({ field: this.field.code, value: { value: this.value, end: this.endValue, begin: this.beginValue, single: this.single } });
                this.cd.detectChanges();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleNumberComponent.prototype.onValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { value: $event, single: true } });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleNumberComponent.prototype.onBeginValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { begin: $event, end: this.endValue, single: false } });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        SearchFieldFlexibleNumberComponent.prototype.onEndValueChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: $event, single: false } });
            };
        SearchFieldFlexibleNumberComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'search-filed-editor-number',
                        template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onSingleValueChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <farris-number-spinner\r\n            class=\"f-utils-fill-flex-row\"\r\n            [(ngModel)]=\"value\"\r\n            [precision]=\"precision\"\r\n            [bigNumber]=\"bigNumber\"\r\n            [canNull]=\"true\"\r\n            [min]=\"min\" [max]=\"max\"\r\n            [placeholder]=\"placeholder\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n            #numberText\r\n        ></farris-number-spinner>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"beginValue\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [canNull]=\"true\"\r\n                [min]=\"min\" [max]=\"endValue?endValue:max\"\r\n                [placeholder]=\"beginPlaceHolder\"\r\n                (valueChange)=\"onBeginValueChange($event)\"\r\n                #beginNumberText\r\n            ></farris-number-spinner>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"endValue\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [canNull]=\"true\"\r\n                [min]=\"beginValue?beginValue:min\" [max]=\"max\"\r\n                [placeholder]=\"endPlaceHolder\"\r\n                (valueChange)=\"onEndValueChange($event)\"\r\n            ></farris-number-spinner>\r\n        </div>\r\n    </ng-template>\r\n    \r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SearchFieldFlexibleNumberComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchFieldFlexibleNumberComponent.propDecorators = {
            field: [{ type: core.Input }],
            valueChange: [{ type: core.Output }]
        };
        return SearchFieldFlexibleNumberComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldEnumEditorComponent = /** @class */ (function () {
        function SearchFieldEnumEditorComponent(injector, cd) {
            this.injector = injector;
            this.cd = cd;
            this.checkedAll = false;
            this.boolcheck = false;
            this.valueChange = new core.EventEmitter();
            // indeterminate: boolean = true;
            // boolchecked: boolean;
            // boolCheckState: string = "indeterminate";
            this.checkboxDataSource = new Array();
        }
        Object.defineProperty(SearchFieldEnumEditorComponent.prototype, "field", {
            get: /**
             * @return {?}
             */ function () {
                return this._item;
            },
            set: /**
             * @param {?} data
             * @return {?}
             */ function (data) {
                this._item = lodashEs.cloneDeep(data);
                this.getDataSource();
                //this.checkValue = this._item.value.getOriginalValue();
                if (!this._item.hasOwnProperty("value")) {
                    this._item.value = { value: [] };
                }
                if (this._item.hasOwnProperty("value") && this._item.value) {
                    this.checkValue = this._item.value.value;
                }
                else {
                    this._item.value = { value: [] };
                }
                // if (this.boolcheck) {
                //     if (this.checkValue.length) {
                //         this.boolchecked = this.checkValue[0];
                //         if (this.boolchecked) this.boolCheckState = "checked";
                //         else this.boolCheckState = "unchecked";
                //     } else this.boolCheckState = "indeterminate";
                // }
                if (this._item.value.value.length == 0) {
                    this.checkedAll = false;
                }
                else if (this._item.control["enumValues"] && this._item.value.value.length == this._item.control["enumValues"].length) {
                    this.checkedAll = true;
                }
                this.setSubmitChange();
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.getDataSource = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.field && this._item.control) {
                    /** @type {?} */
                    var checkboxList = this._item.control;
                    this.checkboxDataSource = Array();
                    if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                        checkboxList.enumValues.forEach(( /**
                         * @param {?} element
                         * @return {?}
                         */function (element) {
                            _this.checkboxDataSource.push(Object.assign({}, element));
                        }));
                    }
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.onSearch = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                /** @type {?} */
                var checkboxValue = [];
                if (event) {
                    // let checkboxList = event.split(',');
                    /** @type {?} */
                    var checkboxList = event;
                    if (checkboxList && checkboxList.length) {
                        checkboxValue = checkboxList;
                    }
                    this._item.value.value = checkboxValue;
                }
                else {
                    this._item.value.value = "";
                }
                if (checkboxValue.length < this._item.control["enumValues"].length) {
                    this.checkedAll = false;
                    // this.checkAllElRef.nativeElement.indeterminate = !!checkboxValue.length;
                    // if (!checkboxValue.length) {
                    //     this.checkedAll = false;    
                    // }
                }
                else if (checkboxValue.length == this._item.control["enumValues"].length) {
                    this.checkedAll = true;
                    // this.checkAllElRef.nativeElement.indeterminate = false;
                }
                this.cd.detectChanges();
                this.getValueText();
                this.setSubmitChange();
                this.valueChange.emit({ field: this.field.code, value: { value: checkboxValue, single: true } });
            };
        /**
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.getValueText = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var enumValue = this._item.control.enumValues;
                /** @type {?} */
                var value = this._item.value.value;
                if (enumValue && enumValue.length && value && value.length) {
                    /** @type {?} */
                    var texts = [];
                    var _loop_1 = function (i) {
                        /** @type {?} */
                        var enums = enumValue.find(( /**
                         * @param {?} val
                         * @return {?}
                         */function (val) {
                            return val["value"] == value[i];
                        }));
                        if (enums) {
                            texts.push(enums["name"]);
                        }
                    };
                    for (var i = 0; i <= value.length; i++) {
                        _loop_1(i);
                    }
                    this._item.valueText = texts.join(",");
                }
            };
        /**
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.setSubmitChange = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var val = this._item.value;
                if (Object.keys(val).length < 0 ||
                    Object.keys(val.value).length === 0) ;
            };
        /**
         * @param {?} event
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.onCheckAll = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                // this.checkAllElRef.nativeElement.indeterminate = false;
                this.checkedAll = !this.checkedAll;
                if (this.checkedAll) {
                    this.setCheckedAll();
                }
                else {
                    this._item.value.value = [];
                    this._item.valueText = "";
                    this.checkValue = [];
                }
                this.getValueText();
                this.setSubmitChange();
                this.cd.detectChanges();
                this.valueChange.emit({ field: this.field.code, value: { value: this.checkValue, single: true } });
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldEnumEditorComponent.prototype.setCheckedAll = /**
         * @private
         * @return {?}
         */
            function () {
                /** @type {?} */
                var enumValue = this._item.control.enumValues;
                if (enumValue && enumValue.length) {
                    /** @type {?} */
                    var checkboxValue = [];
                    //checkboxTexts = [];
                    for (var i = 0; i < enumValue.length; i++) {
                        checkboxValue.push(enumValue[i]["value"]);
                        //checkboxTexts.push(enumValue[i]['name'])
                    }
                    this._item.value.value = checkboxValue;
                    this.checkValue = this._item.value.value;
                    //this._item.valueText = checkboxTexts.join(',');
                    this.cd.detectChanges();
                }
            };
        SearchFieldEnumEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "search-filed-editor-enum",
                        template: "<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" style=\"padding-left: 10px;\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" #checkAllEl>\r\n    <label class=\"custom-control-label\" (click)=\"onCheckAll($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"false\" style=\"padding-left: 10px;\"\r\n    [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n</farris-checkboxgroup>\r\n"
                    }] }
        ];
        /** @nocollapse */
        SearchFieldEnumEditorComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef }
            ];
        };
        SearchFieldEnumEditorComponent.propDecorators = {
            boolcheck: [{ type: core.Input }],
            field: [{ type: core.Input }],
            valueChange: [{ type: core.Output }],
            checkAllElRef: [{ type: core.ViewChild, args: ['checkAllEl',] }]
        };
        return SearchFieldEnumEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldEditorBooleanComponent = /** @class */ (function () {
        function SearchFieldEditorBooleanComponent(injector, cd, el) {
            this.injector = injector;
            this.cd = cd;
            this.el = el;
            this.radioDataSource = [];
            this.selectedValue = undefined;
            this.valueChange = new core.EventEmitter();
            this._radioElements = [];
        }
        /**
         * @return {?}
         */
        SearchFieldEditorBooleanComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                if (this.field) {
                    if (this.field.control) {
                        this.radioDataSource = this.field.control.enumValues || [];
                    }
                    if (this.field.value) {
                        this.selectedValue = this.field.value.value;
                    }
                }
            };
        /**
         * @return {?}
         */
        SearchFieldEditorBooleanComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.selectedValue !== null && this.selectedValue !== undefined) {
                    this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
                    /** @type {?} */
                    var radioEl = this._radioElements.find(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.value == _this.selectedValue; }));
                    if (radioEl) {
                        radioEl.checked = true;
                    }
                }
            };
        /**
         * @param {?} $event
         * @param {?} value
         * @return {?}
         */
        SearchFieldEditorBooleanComponent.prototype.onRadioClicked = /**
         * @param {?} $event
         * @param {?} value
         * @return {?}
         */
            function ($event, value) {
                this.selectedValue = value;
                /** @type {?} */
                var radioInputRel = $event.target.querySelector('input');
                // radioInputRel && radioInputRel.setAttribute('checked', true);
                if (radioInputRel) {
                    this.clearChecked();
                    radioInputRel.checked = true;
                    this.cd.detectChanges();
                }
                this.valueChange.emit({ field: this.field.code, value: { value: this.selectedValue, single: true } });
            };
        /**
         * @private
         * @return {?}
         */
        SearchFieldEditorBooleanComponent.prototype.clearChecked = /**
         * @private
         * @return {?}
         */
            function () {
                if (!this._radioElements || !this._radioElements.length) {
                    this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
                }
                this._radioElements.forEach(( /**
                 * @param {?} r
                 * @return {?}
                 */function (r) {
                    // r.removeAttribute('checked');
                    r.checked = false;
                }));
            };
        SearchFieldEditorBooleanComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'search-field-editor-bool',
                        template: "<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': selectedValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onRadioClicked($event, item.value)\"\r\n    >\r\n        \r\n\r\n        <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" name=\"{{field.code}}\" id=\"{{'search_radio_' + item.value}}\" type=\"radio\" [attr.value]=\"item.value\">\r\n            <label class=\"custom-control-label\" for=\"{{'search_radio_' + item.value}}\">{{item.name}}</label>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>"
                    }] }
        ];
        /** @nocollapse */
        SearchFieldEditorBooleanComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef },
                { type: core.ElementRef }
            ];
        };
        SearchFieldEditorBooleanComponent.propDecorators = {
            field: [{ type: core.Input }],
            valueChange: [{ type: core.Output }]
        };
        return SearchFieldEditorBooleanComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchFieldCanClearPipe = /** @class */ (function () {
        function SearchFieldCanClearPipe() {
            this.isNil = ( /**
             * @param {?} val
             * @return {?}
             */function (val) { return val === null || val === undefined || val === '' || (Array.isArray(val) && !val.length); });
        }
        /**
         * @param {?} val
         * @param {...?} args
         * @return {?}
         */
        SearchFieldCanClearPipe.prototype.transform = /**
         * @param {?} val
         * @param {...?} args
         * @return {?}
         */
            function (val) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                /** @type {?} */
                var canClear = false;
                if (val) {
                    var value = val.value, begin = val.begin, end = val.end, single = val.single;
                    if (!this.isNil(single)) {
                        if (!single) {
                            canClear = !this.isNil(begin) || !this.isNil(end);
                        }
                        else {
                            canClear = !this.isNil(value);
                        }
                    }
                    else {
                        canClear = !this.isNil(value);
                    }
                }
                return !canClear;
            };
        SearchFieldCanClearPipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'canclear'
                    },] }
        ];
        return SearchFieldCanClearPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SearchBoxModule = /** @class */ (function () {
        function SearchBoxModule() {
        }
        SearchBoxModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            SearchBoxComponent,
                            SearchPanelComponent,
                            SearchPanelDirective,
                            SearchWordPipe,
                            SearchFieldsComponent,
                            SearchFieldDirective,
                            SearchFieldPanelComponent,
                            SearchFieldFlexibleDateComponent,
                            SearchFieldFlexibleNumberComponent,
                            SearchFieldEnumEditorComponent,
                            SearchFieldEditorBooleanComponent,
                            SearchFieldCanClearPipe
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiCommon.FarrisCommonModule.forRoot(),
                            uiInputGroup.InputGroupModule,
                            uiLocale.LocaleModule.forRoot(),
                            uiDatepicker.FarrisDatePickerModule,
                            uiSwitch.SwitchModule,
                            uiNumberSpinner.NumberSpinnerModule,
                            uiForms.FarrisFormsModule,
                            date.DateHelperModule.forRoot()
                        ],
                        entryComponents: [
                            SearchPanelComponent,
                            SearchFieldPanelComponent
                        ],
                        exports: [
                            SearchBoxComponent,
                            SearchPanelComponent,
                            SearchPanelDirective,
                            SearchWordPipe,
                            SearchFieldsComponent,
                            SearchFieldDirective,
                            SearchFieldPanelComponent,
                            SearchFieldFlexibleDateComponent,
                            SearchFieldFlexibleNumberComponent,
                            SearchFieldEnumEditorComponent,
                            SearchFieldEditorBooleanComponent
                        ]
                    },] }
        ];
        return SearchBoxModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.SearchPanelComponent = SearchPanelComponent;
    exports.SearchPanelDirective = SearchPanelDirective;
    exports.SearchWordPipe = SearchWordPipe;
    exports.SearchFieldsComponent = SearchFieldsComponent;
    exports.SearchFieldPanelComponent = SearchFieldPanelComponent;
    exports.SearchFieldDirective = SearchFieldDirective;
    exports.SearchFieldFlexibleDateComponent = SearchFieldFlexibleDateComponent;
    exports.SearchFieldFlexibleNumberComponent = SearchFieldFlexibleNumberComponent;
    exports.SearchFieldEnumEditorComponent = SearchFieldEnumEditorComponent;
    exports.SearchFieldEditorBooleanComponent = SearchFieldEditorBooleanComponent;
    exports.SearchFieldCanClearPipe = SearchFieldCanClearPipe;
    exports.SearchBoxBase = SearchBoxBase;
    exports.SearchBoxService = SearchBoxService;
    exports.SEARCH_BOX_VALUE_ACCESSOR = SEARCH_BOX_VALUE_ACCESSOR;
    exports.SearchBoxComponent = SearchBoxComponent;
    exports.SearchBoxModule = SearchBoxModule;
    exports.ɵa = SEARCH_BOX_VALUE_ACCESSOR$1;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-search-box.umd.js.map