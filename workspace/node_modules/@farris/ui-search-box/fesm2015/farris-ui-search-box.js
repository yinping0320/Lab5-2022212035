import { CommonModule } from '@angular/common';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { SwitchModule } from '@farris/ui-switch';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisFormsModule } from '@farris/ui-forms';
import { Compare, FilterRelation } from '@farris/ui-common/types';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { BehaviorSubject, Subject } from 'rxjs';
import { CommonUtils, OverLayHiddenService, reqAnimFrame, FarrisCommonModule } from '@farris/ui-common';
import { InputGroupComponent, InputGroupModule } from '@farris/ui-input-group';
import { debounceTime } from 'rxjs/operators';
import { DateTimeHelperService, DateHelperModule } from '@farris/ui-common/date';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { flatten, trim, cloneDeep } from 'lodash-es';
import { Injectable, ChangeDetectorRef, ElementRef, Injector, Optional, Renderer2, Component, EventEmitter, forwardRef, Input, Output, ViewChild, ViewEncapsulation, ApplicationRef, ComponentFactoryResolver, Directive, HostListener, NgZone, Pipe, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchBoxService {
    constructor() { }
}
SearchBoxService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
SearchBoxService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 列设置相关多语资源
 * @type {?}
 */
const SEARCH_BOX_LOCALE = {
    en: {
        'searchbox': {
            enterKeywords: 'Please enter keywords',
            tips: 'Space can be used to represent "or" in input, and enter to search.',
            contain: 'contain',
            clear: 'Clear all conditions.',
            cancel: 'Cancel',
            ok: 'Ok',
            removeFilter: 'Delete Condition',
            anyFields: 'All',
            relation: {
                and: 'AND',
                or: 'OR'
            }
        }
    },
    'zh-CHS': {
        'searchbox': {
            enterKeywords: '请输入关键字',
            tips: '输入中可用空格代表“或”，回车可搜索',
            contain: '包含',
            clear: '清除筛选',
            cancel: '取消',
            ok: '确定',
            removeFilter: '删除条件',
            anyFields: '全部',
            relation: {
                and: '并',
                or: '或'
            }
        }
    },
    'zh-CHT': {
        searchbox: {
            enterKeywords: '請輸入關鍵字',
            tips: '輸入中可用空格代表“或”，回車可搜索',
            contain: '包含',
            clear: '清除篩選',
            cancel: '取消',
            ok: '確定',
            removeFilter: '刪除條件',
            anyFields: '全部',
            relation: {
                and: '並',
                or: '或'
            }
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     */
    constructor(el, injector, overLayService, cd) {
        this.el = el;
        this.injector = injector;
        this.overLayService = overLayService;
        this.cd = cd;
        this.commonUtils = null;
        this.render = this.injector.get(Renderer2);
        if (!overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
        this.localeSer = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (this.localeSer) {
            this.localeSer.setLocaleData(SEARCH_BOX_LOCALE);
        }
    }
}
/** @nocollapse */
SearchBoxBase.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SEARCH_BOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SearchBoxComponent)),
    multi: true
};
class SearchBoxComponent extends SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     */
    constructor(el, injector, overLayService, cd) {
        super(el, injector, overLayService, cd);
        this.fields = [];
        this.maxSearchFields = 5;
        this.condition = [];
        /**
         * 启用 任意字段
         */
        this.useAnyField = true;
        this.conditionChange = new EventEmitter();
        this.clear = new EventEmitter();
        this.escHandler = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        this.enableFloat = true;
        this.displayTextList = [];
        this.filterConditions = [];
        this.hiddenItemsCount$ = new BehaviorSubject(0);
        this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
        this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService.destory(this.shadowBox.nativeElement);
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
            this['REMOVE_ITEM_TIMER'] = null;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBlur($event) {
        if (this.enableFloat) {
            if (!this.input2.value) {
                this.toggleShadowBox(false);
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onInputClick($event) {
        if (this.enableFloat) {
            this.toggleShadowBox();
        }
    }
    /**
     * @private
     * @return {?}
     */
    filterChanged() {
        /** @type {?} */
        const conditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== '*')).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            if (n.value.trim().indexOf(' ') > -1) {
                /** @type {?} */
                const searchKeys = Array.from(new Set(n.value.trim().split(' ').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.trim()))));
                return searchKeys.map((/**
                 * @param {?} s
                 * @param {?} j
                 * @return {?}
                 */
                (s, j) => {
                    return {
                        filterField: n.code,
                        value: s,
                        lbracket: j == 0 ? '(' : '',
                        rbracket: j == searchKeys.length - 1 ? ')' : '',
                        relation: j == searchKeys.length - 1 ? 1 : 2,
                        compare: 6,
                    };
                }));
            }
            return {
                filterField: n.code,
                value: n.value,
                lbracket: '',
                rbracket: '',
                relation: i == this.filterConditions.length - 1 ? 0 : 1,
                compare: 6,
            };
        }));
        /** @type {?} */
        let _conditions = [];
        _conditions = this.expandStarFieldToAllFields().concat(flatten(conditions));
        if (conditions && conditions.length) {
            _conditions[_conditions.length - 1].relation = 0;
        }
        this.onModelChange(this.filterConditions);
        this.onModelTouched(this.filterConditions);
        if (!_conditions.length) {
            this.conditionChange.emit(this.filterConditions);
        }
        else {
            this.conditionChange.emit(_conditions);
        }
    }
    /**
     * @return {?}
     */
    expandStarFieldToAllFields() {
        /** @type {?} */
        const item = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === '*'));
        if (!item) {
            return [];
        }
        /** @type {?} */
        const searchKeys = Array.from(new Set(item.value.trim().split(' ').filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.trim()))));
        /** @type {?} */
        const conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== '*')).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => {
            return searchKeys.map((/**
             * @param {?} s
             * @param {?} j
             * @return {?}
             */
            (s, j) => {
                return {
                    filterField: n.code,
                    value: s,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.Or,
                    compare: Compare.Like,
                };
            }));
        }));
        /** @type {?} */
        let _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[0].lbracket = '(';
            _conditions[_conditions.length - 1].rbracket = ')';
            _conditions[_conditions.length - 1].relation = this.filterConditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.code !== '*')).length ? 1 : 0;
        }
        return _conditions;
    }
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    initDislayText(emit = true) {
        /** @type {?} */
        const relationStr = this.localeSer.getValue('searchbox.relation.or');
        this.displayTextList = this.filterConditions.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            const n = Object.assign({}, t);
            // .map(n => `“${n}”`)
            /** @type {?} */
            const values = n.value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.trim()));
            n.dislayText = n.name + '：' + values.join(` ${relationStr} `);
            n.displayHtml = n.name + '：' + values.join(`<span class="text-muted font-italic mx-1 or">${relationStr}</span>`);
            return n;
        }));
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.enableFloat) {
                this.setHiddenCount();
            }
        }));
        this.cd.detectChanges();
        if (emit) {
            this.filterChanged();
        }
    }
    /**
     * @param {?} searchData
     * @return {?}
     */
    select(searchData) {
        /** @type {?} */
        const condition = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === searchData.code));
        if (condition) {
            condition.value = condition.value.trim() + ' ' + searchData.value;
        }
        else {
            this.filterConditions.push(searchData);
        }
        this.initDislayText();
        this.input.value = '';
    }
    /**
     * @param {?} field
     * @return {?}
     */
    remove(field) {
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== field));
        this.initDislayText(false);
        this._emitFilterChanged();
    }
    /**
     * @private
     * @return {?}
     */
    _emitFilterChanged() {
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
        }
        this['REMOVE_ITEM_TIMER'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.filterChanged();
        }), 180);
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemoveItem($event, item) {
        $event.stopPropagation();
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code !== item.code));
        this.initDislayText();
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearConditions(emit = true) {
        this.input.value = '';
        this.displayTextList = [];
        this.filterConditions = [];
        this.setHiddenCount();
        if (emit) {
            this.conditionChange.emit([]);
            this.clear.emit();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmit($event) {
        $event.stopPropagation();
        this.input.value = '';
        this.toggleShadowBox(false);
        this._emitFilterChanged();
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        /** @type {?} */
        let arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.filterConditions = arr;
        this.initDislayText();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} arr
     * @param {?=} emit
     * @return {?}
     */
    setValue(arr, emit = true) {
        this.filterConditions = arr;
        this.initDislayText(emit);
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
        this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                return;
            }
            if (e.target === this.input2.textbox.nativeElement || !this.shadowBox || this.shadowBox.nativeElement.contains(e.target) ||
                e.target['closest']('.f-search-box-panel')) {
                return;
            }
            this.toggleShadowBox(false);
        }));
    }
    /**
     * @param {?=} show
     * @return {?}
     */
    toggleShadowBox(show = true) {
        if (!this.enableFloat || ((!this.fields || !this.fields.length) && !this.useAnyField)) {
            return;
        }
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.input2.focus();
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShadowBoxClick($event) {
        $event.stopPropagation();
        if (this.enableFloat) {
            this.input2.focus();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.setHiddenCount();
                this.cd.detectChanges();
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    setHiddenCount() {
        /** @type {?} */
        let len = 0;
        if (!this.displayTextList || !this.displayTextList.length) {
            this.hiddenItemsCount$.next(len);
            return;
        }
        /** @type {?} */
        const items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
        if (items && items.length) {
            len = items.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return n.offsetTop;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n > 20)).length;
        }
        this.hiddenItemsCount$.next(len);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEsc($event) {
        this.escHandler.emit($event);
    }
}
SearchBoxComponent.decorators = [
    { type: Component, args: [{
                selector: "farris-search-box",
                template: "\r\n\r\n<div #searchbox class=\"input-group f-search-box\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\" (escHandler)=\"onEsc($event)\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (inputClick)=\"onInputClick($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\" (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\" >\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup \" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" \r\n(click)=\"onShadowBoxClick($event)\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\"  (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput2 class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (blurHandle)=\"onBlur($event)\" (escHandler)=\"onEsc($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mousedown)=\"$event.preventDefault()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\">\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                providers: [
                    SEARCH_BOX_VALUE_ACCESSOR
                ]
            }] }
];
/** @nocollapse */
SearchBoxComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef }
];
SearchBoxComponent.propDecorators = {
    fields: [{ type: Input }],
    maxSearchFields: [{ type: Input }],
    condition: [{ type: Input }],
    useAnyField: [{ type: Input }],
    container: [{ type: ViewChild, args: ['searchbox',] }],
    input: [{ type: ViewChild, args: ['tagInput',] }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    input2: [{ type: ViewChild, args: ['tagInput2',] }],
    conditionChange: [{ type: Output }],
    clear: [{ type: Output }],
    escHandler: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldPanelComponent {
    /**
     * @param {?} injecotr
     * @param {?} cd
     */
    constructor(injecotr, cd) {
        this.injecotr = injecotr;
        this.cd = cd;
        this.filterChange = new EventEmitter();
        this.remove = new EventEmitter();
        this.conditions = null;
        this.elRef = this.injecotr.get(ElementRef, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSearchValueChange($event) {
        this.conditions = $event;
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSubmitCondition($event) {
        this.fieldOptions.value = this.conditions.value;
        if (!this.fieldOptions.value.single) {
            this.fieldOptions.value.value = null;
        }
        else {
            delete this.fieldOptions.value.begin;
            delete this.fieldOptions.value.end;
        }
        this.filterChange.emit(this.conditions);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onRemoveSearchField($event) {
        this.remove.emit(this.fieldOptions);
    }
}
SearchFieldPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-search-field-panel',
                template: "<div class=\"f-search-field-panel f-filter-panel-inner\">\r\n    <div class=\"f-filter-panel-arrow\" style=\"left: 26px; right: auto;\"></div>\r\n    <div class=\"f-filter-panel-content \" style=\"box-shadow:none\">\r\n        <search-filed-editor-date [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'datetime'\"\r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-date>\r\n\r\n        <search-filed-editor-number [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'number'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-number>\r\n\r\n        <search-filed-editor-enum [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'enum'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-filed-editor-enum>\r\n\r\n        <search-field-editor-bool [field]=\"fieldOptions\" *ngIf=\"fieldOptions.control?.controltype === 'dropdown'\" \r\n            class=\"d-flex flex-column\" (valueChange)=\"onSearchValueChange($event)\"></search-field-editor-bool>\r\n    </div>\r\n\r\n    <div class=\"f-filter-panel-footer\">\r\n        <div class=\"filer-panel-clear\">\r\n            <button class=\"btn btn-link\" (click)=\"onRemoveSearchField($event)\" [disabled]=\"fieldOptions?.value | canclear\">{{'searchbox.clear' | locale}}</button>\r\n        </div>\r\n        <div class=\"filter-panel-btns\">\r\n            <button class=\"btn btn-secondary close-field-panel\">{{'searchbox.cancel' | locale}}</button>\r\n            <button class=\"filter-panel-submit btn btn-primary\" #btnSubmit [disabled]=\"conditions?.value | canclear\" (click)=\"onSubmitCondition($event)\">{{'searchbox.ok' | locale}}</button>\r\n        </div>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SearchFieldPanelComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchFieldPanelComponent.propDecorators = {
    fieldOptions: [{ type: Input }],
    btnSubmit: [{ type: ViewChild, args: ['btnSubmit',] }],
    filterChange: [{ type: Output }],
    remove: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const SEARCH_BOX_VALUE_ACCESSOR$1 = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SearchFieldsComponent)),
    multi: true
};
class SearchFieldsComponent extends SearchBoxBase {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} overLayService
     * @param {?} cd
     * @param {?} dateHelp
     */
    constructor(el, injector, overLayService, cd, dateHelp) {
        super(el, injector, overLayService, cd);
        this.dateHelp = dateHelp;
        this.fields = [];
        this.maxSearchFields = 5;
        this.condition = [];
        /**
         * 多字段查询
         */
        this.multi = true;
        this.conditionChange = new EventEmitter();
        this.clear = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        this.enableFloat = true;
        this.displayTextList = [];
        // filterConditions: Array<SearchFieldValue> = [];
        this.moreStatus$ = new BehaviorSubject(false);
        this.hideShadowbox = new Subject();
        this.showShadowBox = false;
        this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
        this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        (arr) => { });
    }
    /**
     * @return {?}
     */
    get hasFilter() {
        return this.displayTextList && this.displayTextList.length ? this.displayTextList.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.hasFilter)).length : false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initDislayText(!!this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.value)).length);
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.shadowBox && this.showShadowBox) {
                if (this.shadowBox.nativeElement.contains(e.target)) {
                    return;
                }
                if (e.target.closest('.f-search-field-container')) {
                    return;
                }
                if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                    return;
                }
                this.toggleShadowBox(false);
                this.hideShadowbox.next(e);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
    }
    /**
     * @private
     * @return {?}
     */
    filterChanged() {
        /** @type {?} */
        const conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.value)).map((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            const { value, begin, end } = n.value;
            if (value != null && value !== undefined && n.control.single) {
                if (n.control.controltype === 'datetime') {
                    return [{
                            filterField: n.code,
                            value,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: this.dateHelp.formatTo(this.dateHelp.addDays(new Date(value), 1), n.control.dateFormat),
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.Less
                        }];
                }
                else if (n.control.controltype === 'enum' && Array.isArray(value)) {
                    return value.map((/**
                     * @param {?} e
                     * @param {?} i
                     * @return {?}
                     */
                    (e, i) => {
                        return {
                            filterField: n.code,
                            value: e,
                            lbracket: i ? '' : '(',
                            rbracket: i == value.length - 1 ? ')' : '',
                            relation: i == value.length - 1 ? FilterRelation.And : FilterRelation.Or,
                            compare: Compare.Equal
                        };
                    }));
                }
                return {
                    filterField: n.code,
                    value: Array.isArray(value) ? value.join(',') : value,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.And,
                    compare: Array.isArray(value) ? Compare.In : Compare.Equal
                };
            }
            else {
                if (begin !== '' && begin != null && begin != undefined && end !== '' && end != null && end != undefined) {
                    return [
                        {
                            filterField: n.code,
                            value: begin,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        }
                    ];
                }
                else {
                    if (begin !== '' && begin != null && begin != undefined) {
                        return {
                            filterField: n.code,
                            value: begin,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        };
                    }
                    if (end !== '' && end != null && end != undefined) {
                        return {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        };
                    }
                }
                return null;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        /** @type {?} */
        let _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[_conditions.length - 1].relation = FilterRelation.Empty;
        }
        this.onModelChange(this.fields);
        this.onModelTouched(this.fields);
        this.conditionChange.emit(_conditions);
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    setConditions(condition) {
        /** @type {?} */
        const field = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === condition.field));
        field.value = condition.value;
        field.control.single = condition.value.single;
        this.initDislayText();
        this.cd.detectChanges();
    }
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    initDislayText(emit = true) {
        this.displayTextList = this.fields.map((/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            const n = Object.assign({}, t);
            n.dislayText = n.name;
            n.hasFilter = false;
            if (n.value) {
                const { value, begin, end } = n.value;
                /** @type {?} */
                let val = value;
                if (t.control && t.control.enumValues && t.control.enumValues.length) {
                    if (!Array.isArray(val)) {
                        val = [val];
                    }
                    val = val.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        /** @type {?} */
                        const d = t.control.enumValues.find((/**
                         * @param {?} e
                         * @return {?}
                         */
                        e => e.value === n));
                        if (d) {
                            return d.name;
                        }
                        return n;
                    })).join(',');
                }
                else {
                    if (begin !== null && begin !== undefined) {
                        val = begin;
                    }
                    if (end !== null && end !== undefined) {
                        if (val != null) {
                            val += '~' + end;
                        }
                        else {
                            val = end;
                        }
                    }
                }
                n.dislayText += '：' + val;
                n.hasFilter = true;
            }
            return n;
        }));
        this.setMoreStatus();
        if (emit) {
            this.filterChanged();
        }
    }
    /**
     * @param {?} field
     * @return {?}
     */
    remove(field) {
        /** @type {?} */
        const searchField = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === field));
        if (searchField) {
            searchField.value = null;
            this.initDislayText();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemoveItem($event, item) {
        if (item.value !== null && item.value != undefined && item.value !== '') {
            $event.stopPropagation();
            this.remove(item.code);
        }
    }
    /**
     * @param {?=} emit
     * @return {?}
     */
    clearConditions(emit = true) {
        this.fields.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => n.value = null));
        this.initDislayText(emit);
        if (emit) {
            this.clear.emit();
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        /** @type {?} */
        let arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.fields = arr;
        this.initDislayText();
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} arr
     * @return {?}
     */
    setValue(arr) {
        // this.filterConditions = arr;
        // this.initDislayText();
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
    }
    /**
     * @param {?=} show
     * @param {?=} el
     * @return {?}
     */
    toggleShadowBox(show = true, el = null) {
        if (!this.enableFloat) {
            return;
        }
        if (el && el.clientHeight <= 30) {
            return;
        }
        this.showShadowBox = show;
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.render.addClass(this.shadowBox.nativeElement, 'active');
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
            this.render.removeClass(this.shadowBox.nativeElement, 'active');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            this.setMoreStatus();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setMoreStatus() {
        if (this.enableFloat) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const r = this.tagContainerRef.nativeElement.clientHeight > 30;
                this.moreStatus$.next(r);
                this.cd.detectChanges();
            }));
        }
    }
}
SearchFieldsComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-search-fields',
                template: "\r\n<!-- [style.color]=\"hasFilter && (moreStatus$ | async) ? '#529dff': ''\" -->\r\n<div #searchbox class=\"input-group f-search-box f-search-fields\" style=\"border-color: transparent\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px; padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" [class.more]=\"moreStatus$ | async\"\r\n         style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox(true, tagContainer)\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-search-shadow-fields\" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more pb-1 d-flex\" style=\"height: auto; min-height: 26px;padding: 0 5px\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                // styleUrls: [
                //     `../searchbox-panel.scss`
                // ],
                encapsulation: ViewEncapsulation.None,
                providers: [
                    SEARCH_BOX_VALUE_ACCESSOR$1
                ]
            }] }
];
/** @nocollapse */
SearchFieldsComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: OverLayHiddenService, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: DateTimeHelperService }
];
SearchFieldsComponent.propDecorators = {
    fields: [{ type: Input }],
    maxSearchFields: [{ type: Input }],
    condition: [{ type: Input }],
    multi: [{ type: Input }],
    container: [{ type: ViewChild, args: ['searchbox',] }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    tagContainerRef: [{ type: ViewChild, args: ['tagContainer',] }],
    conditionChange: [{ type: Output }],
    clear: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldDirective {
    /**
     * @param {?} injector
     * @param {?} elRef
     * @param {?} ngzone
     * @param {?} render
     * @param {?} cfr
     * @param {?} searchFieldsRef
     * @param {?} _applicationRef
     */
    constructor(injector, elRef, ngzone, render, cfr, searchFieldsRef, _applicationRef) {
        this.injector = injector;
        this.elRef = elRef;
        this.ngzone = ngzone;
        this.render = render;
        this.cfr = cfr;
        this.searchFieldsRef = searchFieldsRef;
        this._applicationRef = _applicationRef;
        this.winResizeHandle = null;
        this.docKeydownEventHandle = null;
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.searchFieldsRef) {
            this.searchFieldsRef.hideShadowbox.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.removeFieldPanel();
            }));
        }
        this.winResizeHandle = this.render.listen(window, 'resize', (/**
         * @return {?}
         */
        () => {
            this.removeFieldPanel();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.removeFieldPanel();
        if (this.winResizeHandle) {
            this.winResizeHandle();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        $event.stopPropagation();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onFieldClick($event) {
        $event.stopPropagation();
        if (!this.panelElement) {
            this.createFieldPanel();
        }
        else {
            this.removeFieldPanel();
        }
    }
    /**
     * @private
     * @return {?}
     */
    removeFieldPanel() {
        if (this.panelElement) {
            this.panelElement.remove();
            this.panelElement = null;
            this.searchFieldsRef.overLayService.destory(this.elRef.nativeElement);
            this.render.removeClass(this.elRef.nativeElement, 'selected');
        }
        if (this.docKeydownEventHandle) {
            this.docKeydownEventHandle();
            this.docKeydownEventHandle = null;
        }
    }
    /**
     * @private
     * @param {?=} enterFn
     * @return {?}
     */
    registerKeyboardEvent(enterFn) {
        if (this.commonUtils) {
            return this.commonUtils.regBodyKeydownEvent(enterFn, (/**
             * @return {?}
             */
            () => { this.removeFieldPanel(); }));
        }
        return null;
    }
    /**
     * @private
     * @return {?}
     */
    createFieldPanel() {
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-filter-panel', 'f-area-hide', 'f-search-field-container');
        /** @type {?} */
        const zindex = '' + this.searchFieldsRef.commonUtils.getFloatingLayerIndex();
        this.panelElement.style.zIndex = zindex;
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        /** @type {?} */
        const fieldPanelRef = this.cfr.resolveComponentFactory(SearchFieldPanelComponent);
        /** @type {?} */
        const _fieldPanelIns = fieldPanelRef.create(this.injector);
        this._applicationRef.attachView(_fieldPanelIns.hostView);
        _fieldPanelIns.instance.fieldOptions = this.field;
        _fieldPanelIns.instance.conditions = { field: this.field.code, value: this.field.value };
        this.panelElement.appendChild(_fieldPanelIns.location.nativeElement);
        this.panelElement.classList.add('f-area-show');
        _fieldPanelIns.instance.filterChange.pipe(debounceTime(100)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            // 新的查询条件
            // console.log(e);
            this.searchFieldsRef.setConditions(e);
        }));
        _fieldPanelIns.instance.remove.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            this.searchFieldsRef.remove(e.code);
        }));
        _fieldPanelIns.changeDetectorRef.detectChanges();
        this.searchFieldsRef.overLayService.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.elRef.nativeElement.contains(e.target)) {
                return;
            }
            if (e.target.closest('.f-search-field-container')) {
                if (e.target.nodeName === 'BUTTON' && e.target.className.indexOf('close-field-panel') > -1) {
                    this.removeFieldPanel();
                }
                return;
            }
            if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                return;
            }
            this.removeFieldPanel();
        }));
        this.render.addClass(this.elRef.nativeElement, 'selected');
        // 处理 ESC、ENTER
        this.docKeydownEventHandle = this.registerKeyboardEvent((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const btnok = _fieldPanelIns.instance.btnSubmit;
            if (btnok && !btnok.nativeElement.disabled) {
                btnok.nativeElement.click();
                this.removeFieldPanel();
            }
        }));
    }
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    setPanelPosition(updateTopPosition = true) {
        if (this.panelElement) {
            const { width, left, top, height } = this.getPanelSize();
            this.panelElement.style.width = `${width}px`;
            // this.panelElement.style.maxHeight = `${height}px`;
            if (updateTopPosition) {
                this.panelElement.style.top = `${top}px`;
            }
            this.panelElement.style.left = `${left}px`;
        }
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        return this.elRef.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    getPanelSize() {
        /** @type {?} */
        const width = 380;
        let { top, left, height } = this.getInputSizeInfo();
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        /** @type {?} */
        let panelHeight = 190;
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        if (window.innerWidth - left < width) {
            left = left + width - width;
        }
        return { width, top, height: panelHeight, left };
    }
}
SearchFieldDirective.decorators = [
    { type: Directive, args: [{ selector: '[search-field]' },] }
];
/** @nocollapse */
SearchFieldDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: ComponentFactoryResolver },
    { type: SearchFieldsComponent },
    { type: ApplicationRef }
];
SearchFieldDirective.propDecorators = {
    field: [{ type: Input, args: ['search-field',] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onFieldClick: [{ type: HostListener, args: ['click', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchPanelComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.fields = [];
        this.maxItems = 5;
        this.searchKeyWord = '';
        this.itemClick = new EventEmitter();
        this.closepanel = new EventEmitter();
        this.mouseDown = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} items
     * @return {?}
     */
    loadData(items) {
        this.fields = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onFieldItemClick($event, item) {
        $event.preventDefault();
        this.itemClick.emit({ data: item, evnet: $event });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveItem(index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        this.searchKeyWord = val;
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClosePanel($event) {
        $event.stopPropagation();
        this.closepanel.emit();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.mouseDown.emit($event);
    }
}
SearchPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-panel',
                template: "<div class=\"d-flex flex-column px-2\" style=\"width: 100%;height:100%;\" #itemsContainer (mousedown)=\"onMouseDown($event)\">\r\n    <div class=\"search-tip-info d-flex flex-row align-items-center\" style=\"height: auto;line-height: normal;padding:7px\" >{{'searchbox.tips' | locale}} <i class=\"f-icon f-icon-close\" (click)=\"onClosePanel($event)\"></i></div>\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\">\r\n            <li class=\"list-group-item list-group-item-action d-flex flex-row\" [class.active]=\"activeIndex === i\" \r\n                    *ngFor=\"let item of fields; index as i\" (click)=\"onFieldItemClick($event, item)\">\r\n                <span style=\"min-width: 60px; text-align:right\" title=\"{{item.name}} ({{ item.code }})\">{{ item.name }} </span>\r\n                <span class=\"mx-2 text-muted\" >{{'searchbox.contain' | locale}}</span>\r\n                <div class=\"f-utils-fill text-primary search-box-keyword \" [innerHTML]=\" searchKeyWord | searchwords | safe: 'html' \"></div> \r\n            </li>\r\n        </ul>\r\n    </div>\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SearchPanelComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchPanelComponent.propDecorators = {
    fields: [{ type: Input }],
    maxItems: [{ type: Input }],
    searchKeyWord: [{ type: Input }],
    itemClick: [{ type: Output }],
    closepanel: [{ type: Output }],
    mouseDown: [{ type: Output }],
    itemsContainer: [{ type: ViewChild, args: ['itemsContainer',] }],
    onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchPanelDirective {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} render
     * @param {?} inputRef
     * @param {?} searchBoxRef
     * @param {?} cfr
     */
    constructor(injector, ngzone, render, inputRef, searchBoxRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.searchBoxRef = searchBoxRef;
        this.cfr = cfr;
        this.maxFields = 5;
        /**
         * 启用 任意字段
         */
        this.useAnyField = true;
        this.escHandler = new EventEmitter();
        this.maxPanelItems = 10;
        this.minPanelWidth = 270;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if ((!this.fields || !this.fields.length) && !this.useAnyField) {
            return;
        }
        this.inputRef.inputClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            e.stopPropagation();
        }));
        this.inputRef.valueChange.pipe(debounceTime(50)).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        (val) => {
            if (trim(val)) {
                // 值变化显示查询面板
                if (!this.panelElement) {
                    this.createDataPanel();
                    this.searchPanelRef.instance.setActiveItem(0);
                }
                this.searchPanelRef.instance.setValue(val);
            }
            else {
                if (this.panelElement) {
                    this.hide();
                }
            }
        }));
        this.searchBoxRef.clear.subscribe((/**
         * @return {?}
         */
        () => {
            this.hide();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.searchBoxRef.overLayService.destory(this.searchBoxRef.el.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    removePanelElement() {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
        if (this.searchPanelRef) {
            this.searchPanelRef.destroy();
            this.searchPanelRef = null;
        }
    }
    /**
     * @param {?=} e
     * @return {?}
     */
    hide(e) {
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            this.inputRef.value = '';
            if (this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    this.removePanelElement();
                }
                else {
                    this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.removePanelElement();
                    }), 120);
                }
                this.searchBoxRef.overLayService.destory(this.searchBoxRef.el.nativeElement);
            }
        }));
    }
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    setPanelPosition(updateTopPosition = true) {
        if (this.panelElement) {
            const { maxWidth, left, top, height } = this.getPanelSize();
            this.panelElement.style.minWidth = `${this.minPanelWidth}px`;
            this.panelElement.style.maxWidth = `${maxWidth}px`;
            this.panelElement.style.maxHeight = `${height}px`;
            if (updateTopPosition) {
                this.panelElement.style.top = `${top}px`;
            }
            this.panelElement.style.left = `${left}px`;
        }
    }
    /**
     * @private
     * @return {?}
     */
    createDataPanel() {
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-search-box-panel', 'f-area-hide');
        /** @type {?} */
        const zindex = '' + this.searchBoxRef.commonUtils.getFloatingLayerIndex();
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        this.panelElement.style.zIndex = zindex;
        this.panelElement.style.overflow = 'hidden';
        // 创建数据展示组件
        /** @type {?} */
        const cmpFact = this.cfr.resolveComponentFactory(SearchPanelComponent);
        this.searchPanelRef = cmpFact.create(this.injector);
        if (this.useAnyField && !this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        n => n.code === '*'))) {
            /** @type {?} */
            const anyfieldsName = this.searchBoxRef.localeSer.getValue('searchbox.anyFields');
            this.fields.splice(0, 0, { code: '*', name: anyfieldsName });
        }
        this.searchPanelRef.instance.fields = this.fields;
        this.panelElement.appendChild(this.searchPanelRef.location.nativeElement);
        this.searchPanelRef.changeDetectorRef.detectChanges();
        this.searchPanelRef.instance.searchKeyWord = this.inputRef.value;
        this.searchPanelRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            const { data } = e;
            this.selectItem(data);
        }));
        this.searchPanelRef.instance.closepanel.subscribe((/**
         * @return {?}
         */
        () => {
            this.hide();
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.searchBoxRef.overLayService.registerMouseEvent(this.searchBoxRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.panelElement || e.target['closest']('.f-search-box-panel')) {
                return;
            }
            if (this.inputRef && this.inputRef.textbox.nativeElement === e.target) {
                return false;
            }
            // 输入框内有文本时，如果不允许关闭弹出面板，可放开
            // if (this.inputRef.value) {
            //     return;
            // }
            this.hide(e);
        }));
        if (this.searchPanelRef.instance.fields.length + 1 < this.maxPanelItems) {
            /** @type {?} */
            let newHeight = this.searchPanelRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 40;
            this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = `${newHeight}px`;
            if (this.panelElement) {
                if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                    this.panelElement.style.top = `${this.getInputSizeInfo().top - newHeight - 5}px`;
                }
                this.panelElement.style.height = 'auto';
            }
        }
        else {
            this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = '100%';
            if (this.panelElement) {
                this.render.removeStyle(this.panelElement, 'height');
            }
        }
        this.panelElement.classList.add('f-area-show');
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    selectItem(data) {
        if (!data) {
            return;
        }
        this.searchBoxRef.select(Object.assign({}, data, { value: this.inputRef.value }));
        this.hide();
        this.inputRef.focus();
    }
    /**
     * @private
     * @return {?}
     */
    calculationPanelHeight() {
        return this.maxPanelItems * 30 + 15;
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        /** @type {?} */
        const el = this.searchBoxRef.enableFloat ? this.searchBoxRef.shadowBox : this.searchBoxRef.container;
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    getPanelSize() {
        let { width, height, top, left } = this.getInputSizeInfo();
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        /** @type {?} */
        let panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        let _width = width < this.minPanelWidth ? this.minPanelWidth : width;
        if (window.innerWidth - left < _width) {
            left = left + width - _width;
        }
        return { width: _width, top, height: panelHeight, left, maxWidth: Math.floor(window.innerWidth - left - 10) };
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        /** @type {?} */
        const rows = this.fields;
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
            if (this.searchPanelRef) {
                /** @type {?} */
                const idx = this.searchPanelRef.instance.activeIndex;
                /** @type {?} */
                const setActiveItem = (/**
                 * @param {?} index
                 * @return {?}
                 */
                (index) => {
                    this.searchPanelRef.instance.setActiveItem(index);
                });
                if ($event.code === 'ArrowUp') { // up
                    if (idx > -1) {
                        /** @type {?} */
                        let prevIdx = idx - 1;
                        if (prevIdx < 0) {
                            prevIdx = rows.length - 1;
                        }
                        setActiveItem(prevIdx);
                    }
                    else {
                        setActiveItem(rows.length - 1);
                    }
                }
                if ($event.code === 'ArrowDown') { // down
                    // down
                    /** @type {?} */
                    let nextIdx = idx + 1;
                    if (nextIdx >= rows.length) {
                        nextIdx = 0;
                    }
                    setActiveItem(nextIdx);
                }
            }
        }
        if ($event.code === 'Backspace') {
            if (!this.inputRef.value) {
                if (this.searchBoxRef.displayTextList && this.searchBoxRef.displayTextList.length) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    /** @type {?} */
                    const removeItem = this.searchBoxRef.displayTextList[this.searchBoxRef.displayTextList.length - 1];
                    if (removeItem) {
                        this.searchBoxRef.remove(removeItem.code);
                        if (this.searchPanelRef) {
                            this.searchPanelRef.changeDetectorRef.detectChanges();
                        }
                    }
                }
            }
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length && this.panelElement) {
                /** @type {?} */
                const idx = this.searchPanelRef.instance.activeIndex;
                /** @type {?} */
                const data = rows[idx];
                this.selectItem(data);
            }
            else {
                this.searchBoxRef.onSubmit($event);
            }
        }
        if ($event.key === 'Escape') {
            if (this.panelElement) {
                this.hide();
            }
            else {
                this.escHandler.emit();
            }
        }
    }
}
SearchPanelDirective.decorators = [
    { type: Directive, args: [{ selector: '[search-box-panel]' },] }
];
/** @nocollapse */
SearchPanelDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: InputGroupComponent },
    { type: SearchBoxComponent },
    { type: ComponentFactoryResolver }
];
SearchPanelDirective.propDecorators = {
    fields: [{ type: Input, args: ['search-box-panel',] }],
    maxFields: [{ type: Input }],
    useAnyField: [{ type: Input }],
    escHandler: [{ type: Output }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchWordPipe {
    /**
     * @param {?} injector
     * @param {?} searchBoxRef
     */
    constructor(injector, searchBoxRef) {
        this.injector = injector;
        this.searchBoxRef = searchBoxRef;
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    transform(value, ...args) {
        if (value !== undefined && value !== null) {
            /** @type {?} */
            const relationStr = this.searchBoxRef.localeSer.getValue('searchbox.relation.or');
            /** @type {?} */
            const arr = value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.trim()));
            return arr.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                return n + (i === arr.length - 1 ? '' : '<span class="text-muted" style="margin: 0 5px;"> ' + relationStr + ' </span>');
            })).join('');
        }
        return '';
    }
}
SearchWordPipe.decorators = [
    { type: Pipe, args: [{
                name: 'searchwords'
            },] }
];
/** @nocollapse */
SearchWordPipe.ctorParameters = () => [
    { type: Injector },
    { type: SearchBoxComponent }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldFlexibleDateComponent {
    /**
     * @param {?} localeService
     * @param {?} injector
     * @param {?} cd
     */
    constructor(localeService, injector, cd) {
        this.localeService = localeService;
        this.injector = injector;
        this.cd = cd;
        this.valueChange = new EventEmitter();
        // 是否为区间日期
        this.single = true;
        this.dateFormat = '';
        this.showTime = false;
        this.value = '';
        this.beginValue = '';
        this.endValue = '';
        this.showType = '1';
        this.placeholder = '';
        this.endPlaceHolder = '';
        this.beginPlaceHolder = '';
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.dateTags = [];
        this.dayTags = [];
        this.dateHelp = null;
        this.dateHelp = this.injector.get(DateTimeHelperService, new DateTimeHelperService());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
        this.dayTags = [
            {
                id: 'yesterday',
                text: this.localeService.getValue('filterPanel.yesterday')
            },
            {
                id: 'today',
                text: this.localeService.getValue('filterPanel.today')
            }
        ];
        if (this.field.control) {
            const { showTime, showType, single } = this.field.control;
            if (this.field.value) {
                const { value, begin, end } = this.field.value;
                this.value = value,
                    this.beginValue = begin;
                this.endValue = end;
            }
            this.showTime = showTime;
            this.showType = showType;
            this.single = single;
            /** @type {?} */
            let itemDateFormat = this.field.control.dateFormat;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            else {
                itemDateFormat = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            }
            this.dateFormat = itemDateFormat;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDateChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    beginValueChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    endValueChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSingleChange($event) {
        this.single = !$event;
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
        this.cd.detectChanges();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickTag(tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        let tagDate;
        if (tag.id == 'tag1') {
            tagDate = this.getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = this.getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = this.getLastNumMonth(6, this.showTime, this.showType);
        }
        this.beginValue = tagDate['startTime'];
        this.endValue = tagDate['endTime'];
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
        this.cd.detectChanges();
    }
    /**
     * @param {?} tag
     * @return {?}
     */
    clickDayTag(tag) {
        this.activedDayTagId = tag.id;
        /** @type {?} */
        let dayTag = this.getToday(this.activedDayTagId, this.showTime);
        this.value = dayTag;
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
    }
    /**
     * @private
     * @param {?} num
     * @param {?} showtime
     * @param {?} type
     * @return {?}
     */
    getLastNumMonth(num, showtime, type) {
        /** @type {?} */
        let now = new Date();
        /** @type {?} */
        let year = now.getFullYear();
        /** @type {?} */
        let month = now.getMonth() + 1;
        //0-11表示1-12月
        /** @type {?} */
        let day = now.getDate();
        /** @type {?} */
        let hour = now.getHours();
        /** @type {?} */
        let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
            : new Date().getMinutes();
        /** @type {?} */
        let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
            : new Date().getSeconds();
        /** @type {?} */
        let dateObj = {};
        /** @type {?} */
        const time = hour + ':' + min + ':' + sec;
        // dateObj['endTime'] = year + '-' + month + '-' + day;
        /** @type {?} */
        let endMonth = month < 10 ? '0' + month : month;
        /** @type {?} */
        let endDay = day < 10 ? '0' + day : day;
        if (type == '2') {
            dateObj['endTime'] = year + '-' + endMonth;
        }
        else if (type == '3') {
            dateObj['endTime'] = year;
        }
        else {
            dateObj['endTime'] = year + '-' + endMonth + '-' + endDay;
        }
        /** @type {?} */
        let nowMonthDay = new Date(year, month, 0).getDate();
        //当前月的总天数
        /** @type {?} */
        let dYear;
        /** @type {?} */
        let dMouth;
        /** @type {?} */
        let dDay;
        if (month - num <= 0) { //如果是1、2、3月，年数往前推一年
            //如果是1、2、3月，年数往前推一年
            /** @type {?} */
            let lastMonthDay = new Date((year - 1), (12 - (num - month)), 0).getDate();
            if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                // dateObj['startTime'] = (year - 1) + '-' + (12 - (num - month)) + '-' + lastMonthDay;
                dYear = year - 1;
                dMouth = 12 - (num - month);
                dDay = lastMonthDay;
            }
            else {
                dYear = year - 1;
                dMouth = 12 - (num - month);
                dDay = day;
                // dateObj['startTime']= (year - 1) + '-' + (12 - (num - month)) + '-' + day;
            }
        }
        else {
            /** @type {?} */
            let lastMonthDay = new Date(year, (month - num), 0).getDate();
            if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                if (day < nowMonthDay) { //当前天日期小于当前月总天数,2月份比较特殊的月份
                    // dateObj['startTime'] = year + '-' + (month - num) + '-' + (lastMonthDay - (nowMonthDay - day));
                    dYear = year;
                    dMouth = month - num;
                    dDay = lastMonthDay - (nowMonthDay - day);
                }
                else {
                    dYear = year;
                    dMouth = month - num;
                    dDay = lastMonthDay;
                    // dateObj['startTime'] = year + '-' + (month - num) + '-' + lastMonthDay;
                }
            }
            else {
                dYear = year;
                dMouth = month - num;
                dDay = day;
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + day;
            }
        }
        dMouth = dMouth < 10 ? '0' + dMouth : dMouth;
        dDay = dDay < 10 ? '0' + dDay : dDay;
        if (type == '2') {
            dateObj['startTime'] = dYear + '-' + dMouth;
        }
        else if (type == '3') {
            dateObj['startTime'] = dYear;
        }
        else {
            dateObj['startTime'] = dYear + '-' + dMouth + '-' + dDay;
        }
        if (showtime) {
            dateObj['endTime'] = dateObj['endTime'] + ' ' + time;
            dateObj['startTime'] = dateObj['startTime'] + ' ' + time;
        }
        return dateObj;
    }
    /**
     * @private
     * @param {?=} dayTags
     * @param {?=} showtime
     * @return {?}
     */
    getToday(dayTags = 'today', showtime) {
        /** @type {?} */
        let now = new Date();
        if (dayTags == 'today') {
            return this.dateHelp.formatTo(now, this.dateFormat);
        }
        else if (dayTags == 'yesterday') {
            return this.dateHelp.formatTo(this.dateHelp.subDays(now, 1), this.dateFormat);
        }
        /*
        let year = now.getFullYear();
        let month = now.getMonth() + 1;//0-11表示1-12月
        let day = now.getDate();
        let hour = now.getHours();
        let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
            :new Date().getMinutes();
        let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
            :new Date().getSeconds();
        const time = hour + ':' + min + ':' + sec;
        let yesterday = new Date();
        yesterday.setTime(now.getTime()-24*60*60*1000);
        let yesterdayObj = yesterday.getFullYear()+"-" + (yesterday.getMonth()+1) + "-" + yesterday.getDate();
        let dateObj = year + '-' + month + '-' + day;
        if(showtime){
            dateObj = dateObj + ' ' + time;
            yesterdayObj = yesterdayObj + ' ' + time;
        }
        if(dayTags == 'today') return dateObj;
        else if (dayTags == 'yesterday') return yesterdayObj;

        */
    }
}
SearchFieldFlexibleDateComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-filed-editor-date',
                template: "\r\n<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onSingleChange($event)\"></farris-switch>\r\n</div>\r\n\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime; else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n             (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n            [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n                 (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" \r\n                (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow mx-2\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"!single && showType !== '3'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let tag of dateTags\" (click)=\"clickTag(tag)\" \r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\">\r\n        {{tag.text}}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"single && showType !== '3' && showType !== '2'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let day of dayTags\" (click)=\"clickDayTag(day)\" [ngClass]=\"{'active': day.id == activedDayTagId}\">\r\n        {{day.text}}\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
SearchFieldFlexibleDateComponent.ctorParameters = () => [
    { type: LocaleService },
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchFieldFlexibleDateComponent.propDecorators = {
    field: [{ type: Input }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldFlexibleNumberComponent {
    /**
     * @param {?} injecotr
     * @param {?} cd
     */
    constructor(injecotr, cd) {
        this.injecotr = injecotr;
        this.cd = cd;
        this.valueChange = new EventEmitter();
        // 是否为区间日期
        this.single = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.single = this.field.control.single;
        if (this.field) {
            if (this.field.value) {
                const { value, begin, end } = this.field.value;
                this.value = value;
                this.beginValue = begin;
                this.endValue = end;
            }
            this.bigNumber = this.field.control.bigNumber;
            this.precision = this.field.control.precision || 0;
            if (!this.bigNumber) {
                this.min = -2147483648;
                this.max = 2147483647;
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSingleValueChange($event) {
        this.single = !$event;
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, end: this.endValue, begin: this.beginValue, single: this.single } });
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onValueChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { value: $event, single: true } });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onBeginValueChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: $event, end: this.endValue, single: false } });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEndValueChange($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: $event, single: false } });
    }
}
SearchFieldFlexibleNumberComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-filed-editor-number',
                template: "<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onSingleValueChange($event)\"></farris-switch>\r\n</div>\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <farris-number-spinner\r\n            class=\"f-utils-fill-flex-row\"\r\n            [(ngModel)]=\"value\"\r\n            [precision]=\"precision\"\r\n            [bigNumber]=\"bigNumber\"\r\n            [canNull]=\"true\"\r\n            [min]=\"min\" [max]=\"max\"\r\n            [placeholder]=\"placeholder\"\r\n            (valueChange)=\"onValueChange($event)\"\r\n            #numberText\r\n        ></farris-number-spinner>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex panel-flexible-range-wrapper\">\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"beginValue\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [canNull]=\"true\"\r\n                [min]=\"min\" [max]=\"endValue?endValue:max\"\r\n                [placeholder]=\"beginPlaceHolder\"\r\n                (valueChange)=\"onBeginValueChange($event)\"\r\n                #beginNumberText\r\n            ></farris-number-spinner>\r\n            <span class=\"f-icon f-icon-orientation-arrow\"></span>\r\n            <farris-number-spinner\r\n                [(ngModel)]=\"endValue\"\r\n                [precision]=\"precision\"\r\n                [bigNumber]=\"bigNumber\"\r\n                [canNull]=\"true\"\r\n                [min]=\"beginValue?beginValue:min\" [max]=\"max\"\r\n                [placeholder]=\"endPlaceHolder\"\r\n                (valueChange)=\"onEndValueChange($event)\"\r\n            ></farris-number-spinner>\r\n        </div>\r\n    </ng-template>\r\n    \r\n</div>"
            }] }
];
/** @nocollapse */
SearchFieldFlexibleNumberComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchFieldFlexibleNumberComponent.propDecorators = {
    field: [{ type: Input }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldEnumEditorComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.checkedAll = false;
        this.boolcheck = false;
        this.valueChange = new EventEmitter();
        // indeterminate: boolean = true;
        // boolchecked: boolean;
        // boolCheckState: string = "indeterminate";
        this.checkboxDataSource = new Array();
    }
    /**
     * @return {?}
     */
    get field() {
        return this._item;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    set field(data) {
        this._item = cloneDeep(data);
        this.getDataSource();
        //this.checkValue = this._item.value.getOriginalValue();
        if (!this._item.hasOwnProperty("value")) {
            this._item.value = { value: [] };
        }
        if (this._item.hasOwnProperty("value") && this._item.value) {
            this.checkValue = this._item.value.value;
        }
        else {
            this._item.value = { value: [] };
        }
        // if (this.boolcheck) {
        //     if (this.checkValue.length) {
        //         this.boolchecked = this.checkValue[0];
        //         if (this.boolchecked) this.boolCheckState = "checked";
        //         else this.boolCheckState = "unchecked";
        //     } else this.boolCheckState = "indeterminate";
        // }
        if (this._item.value.value.length == 0) {
            this.checkedAll = false;
        }
        else if (this._item.control["enumValues"] && this._item.value.value.length == this._item.control["enumValues"].length) {
            this.checkedAll = true;
        }
        this.setSubmitChange();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    getDataSource() {
        if (this.field && this._item.control) {
            /** @type {?} */
            let checkboxList = this._item.control;
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                (element) => {
                    this.checkboxDataSource.push(Object.assign({}, element));
                }));
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onSearch(event) {
        /** @type {?} */
        let checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            let checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this._item.value.value = checkboxValue;
        }
        else {
            this._item.value.value = "";
        }
        if (checkboxValue.length < this._item.control["enumValues"].length) {
            this.checkedAll = false;
            // this.checkAllElRef.nativeElement.indeterminate = !!checkboxValue.length;
            // if (!checkboxValue.length) {
            //     this.checkedAll = false;    
            // }
        }
        else if (checkboxValue.length == this._item.control["enumValues"].length) {
            this.checkedAll = true;
            // this.checkAllElRef.nativeElement.indeterminate = false;
        }
        this.cd.detectChanges();
        this.getValueText();
        this.setSubmitChange();
        this.valueChange.emit({ field: this.field.code, value: { value: checkboxValue, single: true } });
    }
    /**
     * @return {?}
     */
    getValueText() {
        /** @type {?} */
        const enumValue = this._item.control.enumValues;
        /** @type {?} */
        const value = this._item.value.value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            let texts = [];
            for (let i = 0; i <= value.length; i++) {
                /** @type {?} */
                const enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                (val) => {
                    return val["value"] == value[i];
                }));
                if (enums) {
                    texts.push(enums["name"]);
                }
            }
            this._item.valueText = texts.join(",");
        }
    }
    /**
     * @return {?}
     */
    setSubmitChange() {
        /** @type {?} */
        const val = this._item.value;
        if (Object.keys(val).length < 0 ||
            Object.keys(val.value).length === 0) ;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCheckAll(event) {
        // this.checkAllElRef.nativeElement.indeterminate = false;
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            this.setCheckedAll();
        }
        else {
            this._item.value.value = [];
            this._item.valueText = "";
            this.checkValue = [];
        }
        this.getValueText();
        this.setSubmitChange();
        this.cd.detectChanges();
        this.valueChange.emit({ field: this.field.code, value: { value: this.checkValue, single: true } });
    }
    /**
     * @private
     * @return {?}
     */
    setCheckedAll() {
        /** @type {?} */
        const enumValue = this._item.control.enumValues;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            let checkboxValue = [];
            //checkboxTexts = [];
            for (let i = 0; i < enumValue.length; i++) {
                checkboxValue.push(enumValue[i]["value"]);
                //checkboxTexts.push(enumValue[i]['name'])
            }
            this._item.value.value = checkboxValue;
            this.checkValue = this._item.value.value;
            //this._item.valueText = checkboxTexts.join(',');
            this.cd.detectChanges();
        }
    }
}
SearchFieldEnumEditorComponent.decorators = [
    { type: Component, args: [{
                selector: "search-filed-editor-enum",
                template: "<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" style=\"padding-left: 10px;\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" #checkAllEl>\r\n    <label class=\"custom-control-label\" (click)=\"onCheckAll($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"false\" style=\"padding-left: 10px;\"\r\n    [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n</farris-checkboxgroup>\r\n"
            }] }
];
/** @nocollapse */
SearchFieldEnumEditorComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
SearchFieldEnumEditorComponent.propDecorators = {
    boolcheck: [{ type: Input }],
    field: [{ type: Input }],
    valueChange: [{ type: Output }],
    checkAllElRef: [{ type: ViewChild, args: ['checkAllEl',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldEditorBooleanComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     * @param {?} el
     */
    constructor(injector, cd, el) {
        this.injector = injector;
        this.cd = cd;
        this.el = el;
        this.radioDataSource = [];
        this.selectedValue = undefined;
        this.valueChange = new EventEmitter();
        this._radioElements = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.field) {
            if (this.field.control) {
                this.radioDataSource = this.field.control.enumValues || [];
            }
            if (this.field.value) {
                this.selectedValue = this.field.value.value;
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.selectedValue !== null && this.selectedValue !== undefined) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
            /** @type {?} */
            const radioEl = this._radioElements.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.value == this.selectedValue));
            if (radioEl) {
                radioEl.checked = true;
            }
        }
    }
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    onRadioClicked($event, value) {
        this.selectedValue = value;
        /** @type {?} */
        const radioInputRel = $event.target.querySelector('input');
        // radioInputRel && radioInputRel.setAttribute('checked', true);
        if (radioInputRel) {
            this.clearChecked();
            radioInputRel.checked = true;
            this.cd.detectChanges();
        }
        this.valueChange.emit({ field: this.field.code, value: { value: this.selectedValue, single: true } });
    }
    /**
     * @private
     * @return {?}
     */
    clearChecked() {
        if (!this._radioElements || !this._radioElements.length) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
        }
        this._radioElements.forEach((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            // r.removeAttribute('checked');
            r.checked = false;
        }));
    }
}
SearchFieldEditorBooleanComponent.decorators = [
    { type: Component, args: [{
                selector: 'search-field-editor-bool',
                template: "<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': selectedValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onRadioClicked($event, item.value)\"\r\n    >\r\n        \r\n\r\n        <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" name=\"{{field.code}}\" id=\"{{'search_radio_' + item.value}}\" type=\"radio\" [attr.value]=\"item.value\">\r\n            <label class=\"custom-control-label\" for=\"{{'search_radio_' + item.value}}\">{{item.name}}</label>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>"
            }] }
];
/** @nocollapse */
SearchFieldEditorBooleanComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
SearchFieldEditorBooleanComponent.propDecorators = {
    field: [{ type: Input }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchFieldCanClearPipe {
    constructor() {
        this.isNil = (/**
         * @param {?} val
         * @return {?}
         */
        (val) => val === null || val === undefined || val === '' || (Array.isArray(val) && !val.length));
    }
    /**
     * @param {?} val
     * @param {...?} args
     * @return {?}
     */
    transform(val, ...args) {
        /** @type {?} */
        let canClear = false;
        if (val) {
            const { value, begin, end, single } = val;
            if (!this.isNil(single)) {
                if (!single) {
                    canClear = !this.isNil(begin) || !this.isNil(end);
                }
                else {
                    canClear = !this.isNil(value);
                }
            }
            else {
                canClear = !this.isNil(value);
            }
        }
        return !canClear;
    }
}
SearchFieldCanClearPipe.decorators = [
    { type: Pipe, args: [{
                name: 'canclear'
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SearchBoxModule {
}
SearchBoxModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    SearchBoxComponent,
                    SearchPanelComponent,
                    SearchPanelDirective,
                    SearchWordPipe,
                    SearchFieldsComponent,
                    SearchFieldDirective,
                    SearchFieldPanelComponent,
                    SearchFieldFlexibleDateComponent,
                    SearchFieldFlexibleNumberComponent,
                    SearchFieldEnumEditorComponent,
                    SearchFieldEditorBooleanComponent,
                    SearchFieldCanClearPipe
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisCommonModule.forRoot(),
                    InputGroupModule,
                    LocaleModule.forRoot(),
                    FarrisDatePickerModule,
                    SwitchModule,
                    NumberSpinnerModule,
                    FarrisFormsModule,
                    DateHelperModule.forRoot()
                ],
                entryComponents: [
                    SearchPanelComponent,
                    SearchFieldPanelComponent
                ],
                exports: [
                    SearchBoxComponent,
                    SearchPanelComponent,
                    SearchPanelDirective,
                    SearchWordPipe,
                    SearchFieldsComponent,
                    SearchFieldDirective,
                    SearchFieldPanelComponent,
                    SearchFieldFlexibleDateComponent,
                    SearchFieldFlexibleNumberComponent,
                    SearchFieldEnumEditorComponent,
                    SearchFieldEditorBooleanComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SearchPanelComponent, SearchPanelDirective, SearchWordPipe, SearchFieldsComponent, SearchFieldPanelComponent, SearchFieldDirective, SearchFieldFlexibleDateComponent, SearchFieldFlexibleNumberComponent, SearchFieldEnumEditorComponent, SearchFieldEditorBooleanComponent, SearchFieldCanClearPipe, SearchBoxBase, SearchBoxService, SEARCH_BOX_VALUE_ACCESSOR, SearchBoxComponent, SearchBoxModule, SEARCH_BOX_VALUE_ACCESSOR$1 as ɵa };

//# sourceMappingURL=farris-ui-search-box.js.map