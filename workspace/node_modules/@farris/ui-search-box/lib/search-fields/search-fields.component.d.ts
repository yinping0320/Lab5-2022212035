import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { FilterCondition } from "@farris/ui-common/types";
import { DisplayText, SearchFieldValue } from "../search-box.types";
import { ControlValueAccessor } from "@angular/forms";
import { BehaviorSubject, Subject } from "rxjs";
import { SearchBoxBase } from "../search-box-base";
import { DateTimeHelperService } from "@farris/ui-common/date";
export declare const SEARCH_BOX_VALUE_ACCESSOR: any;
export declare class SearchFieldsComponent extends SearchBoxBase implements OnInit, OnChanges, ControlValueAccessor, AfterViewInit, OnDestroy {
    private dateHelp;
    fields: Array<SearchFieldValue>;
    maxSearchFields: number;
    condition: Array<FilterCondition>;
    /** 多字段查询 */
    multi: boolean;
    container: ElementRef;
    shadowBox: ElementRef;
    tagContainerRef: ElementRef;
    conditionChange: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    /** 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态 */
    enableFloat: boolean;
    displayTextList: Array<DisplayText>;
    moreStatus$: BehaviorSubject<boolean>;
    hideShadowbox: Subject<{}>;
    readonly hasFilter: number | false;
    private showShadowBox;
    constructor(el: ElementRef, injector: Injector, overLayService: OverLayHiddenService, cd: ChangeDetectorRef, dateHelp: DateTimeHelperService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onModelChange: (arr: any) => void;
    onModelTouched: (arr: any) => void;
    private filterChanged;
    setConditions(condition: any): void;
    private initDislayText;
    remove(field: string): void;
    onRemoveItem($event: any, item: any): void;
    clearConditions(emit?: boolean): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setValue(arr: Array<SearchFieldValue>): void;
    updateShadowBoxPosition({ top, left, width }?: {
        top: any;
        left: any;
        width: any;
    }): void;
    private moveShadowToBody;
    toggleShadowBox(show?: boolean, el?: any): void;
    onResized($event: any): void;
    private setMoreStatus;
}
