import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, Injector, OnChanges, OnDestroy, OnInit, SimpleChanges } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { InputGroupComponent } from "@farris/ui-input-group";
import { FilterCondition } from "@farris/ui-common/types";
import { DisplayText, SearchField, SearchFieldValue } from "./search-box.types";
import { ControlValueAccessor } from "@angular/forms";
import { BehaviorSubject } from "rxjs";
import { SearchBoxBase } from "./search-box-base";
export declare const SEARCH_BOX_VALUE_ACCESSOR: any;
export declare class SearchBoxComponent extends SearchBoxBase implements OnInit, OnChanges, ControlValueAccessor, AfterViewInit, OnDestroy {
    fields: Array<SearchField>;
    maxSearchFields: number;
    condition: Array<FilterCondition>;
    /** 启用 任意字段 */
    useAnyField: boolean;
    container: ElementRef;
    input: InputGroupComponent;
    shadowBox: ElementRef;
    input2: InputGroupComponent;
    conditionChange: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    escHandler: EventEmitter<{}>;
    /** 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态 */
    enableFloat: boolean;
    displayTextList: Array<DisplayText>;
    filterConditions: Array<SearchFieldValue>;
    hiddenItemsCount$: BehaviorSubject<number>;
    constructor(el: ElementRef, injector: Injector, overLayService: OverLayHiddenService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    onBlur($event: any): void;
    onInputClick($event: any): void;
    onModelChange: (arr: any) => void;
    onModelTouched: (arr: any) => void;
    private filterChanged;
    expandStarFieldToAllFields(): any[];
    private initDislayText;
    select(searchData: any): void;
    remove(field: string): void;
    private _emitFilterChanged;
    onRemoveItem($event: any, item: any): void;
    clearConditions(emit?: boolean): void;
    onSubmit($event: any): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setValue(arr: Array<SearchFieldValue>, emit?: boolean): void;
    updateShadowBoxPosition({ top, left, width }?: {
        top: any;
        left: any;
        width: any;
    }): void;
    private moveShadowToBody;
    toggleShadowBox(show?: boolean): void;
    onShadowBoxClick($event: MouseEvent): void;
    onResized($event: any): void;
    private setHiddenCount;
    onEsc($event: any): void;
}
