/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, ElementRef, Injector, Optional, Renderer2 } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { LocaleService } from '@farris/ui-locale';
import { SEARCH_BOX_LOCALE } from './search-box.locale';
var SearchBoxBase = /** @class */ (function () {
    function SearchBoxBase(el, injector, overLayService, cd) {
        this.el = el;
        this.injector = injector;
        this.overLayService = overLayService;
        this.cd = cd;
        this.commonUtils = null;
        this.render = this.injector.get(Renderer2);
        if (!overLayService) {
            this.overLayService = new OverLayHiddenService();
        }
        this.localeSer = this.injector.get(LocaleService, null);
        this.commonUtils = this.injector.get(CommonUtils, null);
        if (this.localeSer) {
            this.localeSer.setLocaleData(SEARCH_BOX_LOCALE);
        }
    }
    /** @nocollapse */
    SearchBoxBase.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: OverLayHiddenService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    return SearchBoxBase;
}());
export { SearchBoxBase };
if (false) {
    /** @type {?} */
    SearchBoxBase.prototype.commonUtils;
    /** @type {?} */
    SearchBoxBase.prototype.render;
    /** @type {?} */
    SearchBoxBase.prototype.localeSer;
    /** @type {?} */
    SearchBoxBase.prototype.el;
    /**
     * @type {?}
     * @protected
     */
    SearchBoxBase.prototype.injector;
    /** @type {?} */
    SearchBoxBase.prototype.overLayService;
    /**
     * @type {?}
     * @protected
     */
    SearchBoxBase.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC1iYXNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1zZWFyY2gtYm94LyIsInNvdXJjZXMiOlsibGliL3NlYXJjaC1ib3gtYmFzZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGlCQUFpQixFQUFhLFVBQVUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RyxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRXhEO0lBS0ksdUJBQW1CLEVBQWMsRUFBWSxRQUFrQixFQUFxQixjQUFvQyxFQUFZLEVBQXFCO1FBQXRJLE9BQUUsR0FBRixFQUFFLENBQVk7UUFBWSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQXFCLG1CQUFjLEdBQWQsY0FBYyxDQUFzQjtRQUFZLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBSGxKLGdCQUFXLEdBQWdCLElBQUksQ0FBQztRQUluQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBRTNDLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7U0FDcEQ7UUFDRCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV4RCxJQUFJLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDaEIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsQ0FBQztTQUNuRDtJQUNMLENBQUM7OztnQkF0QmtDLFVBQVU7Z0JBQUUsUUFBUTtnQkFDckMsb0JBQW9CLHVCQVM0QixRQUFRO2dCQVZyRSxpQkFBaUI7O0lBeUIxQixvQkFBQztDQUFBLEFBcEJELElBb0JDO1NBcEJZLGFBQWE7OztJQUV0QixvQ0FBdUM7O0lBQ3ZDLCtCQUF5Qjs7SUFDekIsa0NBQStCOztJQUNuQiwyQkFBcUI7Ozs7O0lBQUUsaUNBQTRCOztJQUFFLHVDQUF1RDs7Ozs7SUFBRSwyQkFBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDaGFuZ2VEZXRlY3RvclJlZiwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3RvciwgT3B0aW9uYWwsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscywgT3ZlckxheUhpZGRlblNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IExvY2FsZVNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IFNFQVJDSF9CT1hfTE9DQUxFIH0gZnJvbSAnLi9zZWFyY2gtYm94LmxvY2FsZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2VhcmNoQm94QmFzZSB7XHJcblxyXG4gICAgcHVibGljIGNvbW1vblV0aWxzOiBDb21tb25VdGlscyA9IG51bGw7XHJcbiAgICBwdWJsaWMgcmVuZGVyOiBSZW5kZXJlcjI7XHJcbiAgICBwdWJsaWMgbG9jYWxlU2VyOiBMb2NhbGVTZXJ2aWNlXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZWw6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCBpbmplY3RvcjogSW5qZWN0b3IsIEBPcHRpb25hbCgpIHB1YmxpYyBvdmVyTGF5U2VydmljZTogT3ZlckxheUhpZGRlblNlcnZpY2UsIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHtcclxuICAgICAgICB0aGlzLnJlbmRlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KFJlbmRlcmVyMik7XHJcblxyXG4gICAgICAgIGlmICghb3ZlckxheVNlcnZpY2UpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVyTGF5U2VydmljZSA9IG5ldyBPdmVyTGF5SGlkZGVuU2VydmljZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmxvY2FsZVNlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KExvY2FsZVNlcnZpY2UsIG51bGwpO1xyXG4gICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSB0aGlzLmluamVjdG9yLmdldChDb21tb25VdGlscywgbnVsbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKHRoaXMubG9jYWxlU2VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMubG9jYWxlU2VyLnNldExvY2FsZURhdGEoU0VBUkNIX0JPWF9MT0NBTEUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBcclxufSJdfQ==