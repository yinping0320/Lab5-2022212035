/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { InputGroupComponent } from "@farris/ui-input-group";
import { Compare, FilterRelation } from "@farris/ui-common/types";
import { flatten } from 'lodash-es';
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { BehaviorSubject } from "rxjs";
import { SearchBoxBase } from "./search-box-base";
/** @type {?} */
export var SEARCH_BOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SearchBoxComponent; })),
    multi: true
};
var SearchBoxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SearchBoxComponent, _super);
    function SearchBoxComponent(el, injector, overLayService, cd) {
        var _this = _super.call(this, el, injector, overLayService, cd) || this;
        _this.fields = [];
        _this.maxSearchFields = 5;
        _this.condition = [];
        /**
         * 启用 任意字段
         */
        _this.useAnyField = true;
        _this.conditionChange = new EventEmitter();
        _this.clear = new EventEmitter();
        _this.escHandler = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        _this.enableFloat = true;
        _this.displayTextList = [];
        _this.filterConditions = [];
        _this.hiddenItemsCount$ = new BehaviorSubject(0);
        _this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { });
        _this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { });
        return _this;
    }
    /**
     * @return {?}
     */
    SearchBoxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SearchBoxComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.moveShadowToBody();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SearchBoxComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    SearchBoxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overLayService) {
            this.overLayService.destory(this.shadowBox.nativeElement);
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
            this['REMOVE_ITEM_TIMER'] = null;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onBlur = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.enableFloat) {
            if (!this.input2.value) {
                this.toggleShadowBox(false);
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onInputClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.enableFloat) {
            this.toggleShadowBox();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchBoxComponent.prototype.filterChanged = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var conditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code !== '*'; })).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            if (n.value.trim().indexOf(' ') > -1) {
                /** @type {?} */
                var searchKeys_1 = Array.from(new Set(n.value.trim().split(' ').filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.trim(); }))));
                return searchKeys_1.map((/**
                 * @param {?} s
                 * @param {?} j
                 * @return {?}
                 */
                function (s, j) {
                    return {
                        filterField: n.code,
                        value: s,
                        lbracket: j == 0 ? '(' : '',
                        rbracket: j == searchKeys_1.length - 1 ? ')' : '',
                        relation: j == searchKeys_1.length - 1 ? 1 : 2,
                        compare: 6,
                    };
                }));
            }
            return {
                filterField: n.code,
                value: n.value,
                lbracket: '',
                rbracket: '',
                relation: i == _this.filterConditions.length - 1 ? 0 : 1,
                compare: 6,
            };
        }));
        /** @type {?} */
        var _conditions = [];
        _conditions = this.expandStarFieldToAllFields().concat(flatten(conditions));
        if (conditions && conditions.length) {
            _conditions[_conditions.length - 1].relation = 0;
        }
        this.onModelChange(this.filterConditions);
        this.onModelTouched(this.filterConditions);
        if (!_conditions.length) {
            this.conditionChange.emit(this.filterConditions);
        }
        else {
            this.conditionChange.emit(_conditions);
        }
    };
    /**
     * @return {?}
     */
    SearchBoxComponent.prototype.expandStarFieldToAllFields = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var item = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code === '*'; }));
        if (!item) {
            return [];
        }
        /** @type {?} */
        var searchKeys = Array.from(new Set(item.value.trim().split(' ').filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.trim(); }))));
        /** @type {?} */
        var conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code !== '*'; })).map((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        function (n, i) {
            return searchKeys.map((/**
             * @param {?} s
             * @param {?} j
             * @return {?}
             */
            function (s, j) {
                return {
                    filterField: n.code,
                    value: s,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.Or,
                    compare: Compare.Like,
                };
            }));
        }));
        /** @type {?} */
        var _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[0].lbracket = '(';
            _conditions[_conditions.length - 1].rbracket = ')';
            _conditions[_conditions.length - 1].relation = this.filterConditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.code !== '*'; })).length ? 1 : 0;
        }
        return _conditions;
    };
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    SearchBoxComponent.prototype.initDislayText = /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        var _this = this;
        if (emit === void 0) { emit = true; }
        /** @type {?} */
        var relationStr = this.localeSer.getValue('searchbox.relation.or');
        this.displayTextList = this.filterConditions.map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var n = tslib_1.__assign({}, t);
            // .map(n => `“${n}”`)
            /** @type {?} */
            var values = n.value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.trim(); }));
            n.dislayText = n.name + '：' + values.join(" " + relationStr + " ");
            n.displayHtml = n.name + '：' + values.join("<span class=\"text-muted font-italic mx-1 or\">" + relationStr + "</span>");
            return n;
        }));
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.enableFloat) {
                _this.setHiddenCount();
            }
        }));
        this.cd.detectChanges();
        if (emit) {
            this.filterChanged();
        }
    };
    /**
     * @param {?} searchData
     * @return {?}
     */
    SearchBoxComponent.prototype.select = /**
     * @param {?} searchData
     * @return {?}
     */
    function (searchData) {
        /** @type {?} */
        var condition = this.filterConditions.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code === searchData.code; }));
        if (condition) {
            condition.value = condition.value.trim() + ' ' + searchData.value;
        }
        else {
            this.filterConditions.push(searchData);
        }
        this.initDislayText();
        this.input.value = '';
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchBoxComponent.prototype.remove = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code !== field; }));
        this.initDislayText(false);
        this._emitFilterChanged();
    };
    /**
     * @private
     * @return {?}
     */
    SearchBoxComponent.prototype._emitFilterChanged = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this['REMOVE_ITEM_TIMER']) {
            clearTimeout(this['REMOVE_ITEM_TIMER']);
        }
        this['REMOVE_ITEM_TIMER'] = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.filterChanged();
        }), 180);
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    SearchBoxComponent.prototype.onRemoveItem = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        $event.stopPropagation();
        this.filterConditions = this.filterConditions.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code !== item.code; }));
        this.initDislayText();
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    SearchBoxComponent.prototype.clearConditions = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.input.value = '';
        this.displayTextList = [];
        this.filterConditions = [];
        this.setHiddenCount();
        if (emit) {
            this.conditionChange.emit([]);
            this.clear.emit();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onSubmit = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.input.value = '';
        this.toggleShadowBox(false);
        this._emitFilterChanged();
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SearchBoxComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.filterConditions = arr;
        this.initDislayText();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchBoxComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchBoxComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} arr
     * @param {?=} emit
     * @return {?}
     */
    SearchBoxComponent.prototype.setValue = /**
     * @param {?} arr
     * @param {?=} emit
     * @return {?}
     */
    function (arr, emit) {
        if (emit === void 0) { emit = true; }
        this.filterConditions = arr;
        this.initDislayText(emit);
    };
    /**
     * @param {?=} __0
     * @return {?}
     */
    SearchBoxComponent.prototype.updateShadowBoxPosition = /**
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = _a === void 0 ? { top: null, left: null, width: null } : _a, top = _b.top, left = _b.left, width = _b.width;
        if (!top && !left && !width) {
            /** @type {?} */
            var e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    };
    /**
     * @private
     * @return {?}
     */
    SearchBoxComponent.prototype.moveShadowToBody = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
        this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                return;
            }
            if (e.target === _this.input2.textbox.nativeElement || !_this.shadowBox || _this.shadowBox.nativeElement.contains(e.target) ||
                e.target['closest']('.f-search-box-panel')) {
                return;
            }
            _this.toggleShadowBox(false);
        }));
    };
    /**
     * @param {?=} show
     * @return {?}
     */
    SearchBoxComponent.prototype.toggleShadowBox = /**
     * @param {?=} show
     * @return {?}
     */
    function (show) {
        if (show === void 0) { show = true; }
        if (!this.enableFloat || ((!this.fields || !this.fields.length) && !this.useAnyField)) {
            return;
        }
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.input2.focus();
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onShadowBoxClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.enableFloat) {
            this.input2.focus();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onResized = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.setHiddenCount();
                _this.cd.detectChanges();
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchBoxComponent.prototype.setHiddenCount = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var len = 0;
        if (!this.displayTextList || !this.displayTextList.length) {
            this.hiddenItemsCount$.next(len);
            return;
        }
        /** @type {?} */
        var items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
        if (items && items.length) {
            len = items.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.offsetTop;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n > 20; })).length;
        }
        this.hiddenItemsCount$.next(len);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchBoxComponent.prototype.onEsc = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.escHandler.emit($event);
    };
    SearchBoxComponent.decorators = [
        { type: Component, args: [{
                    selector: "farris-search-box",
                    template: "\r\n\r\n<div #searchbox class=\"input-group f-search-box\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\" (escHandler)=\"onEsc($event)\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (inputClick)=\"onInputClick($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\" (click)=\"toggleShadowBox()\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\" >\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup \" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" \r\n(click)=\"onShadowBoxClick($event)\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\">\r\n                <span class=\"search-tag\" [innerHTML]=\"txt.displayHtml | safe: 'html'\"></span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" style=\"top:5px\" title=\"{{'searchbox.removeFilter'| locale}}\"  (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span class=\"inputbox\">\r\n                <input-group #tagInput2 class=\"search-input\"\r\n                    [placeholder]=\"'searchbox.enterKeywords'| locale\"\r\n                    [enableClear]=\"false\" [noborder]=\"true\" (blurHandle)=\"onBlur($event)\" (escHandler)=\"onEsc($event)\"\r\n                    [search-box-panel]=\"fields\" [maxFields]=\"maxSearchFields\" [useAnyField]=\"useAnyField\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" (mousedown)=\"$event.preventDefault()\">\r\n        <span class=\"input-group-text\" [ngStyle]=\"displayTextList && displayTextList.length? {} : {pointerEvents: 'none'}\">\r\n            <span class=\"f-icon f-icon-search\" (click)=\"onSubmit($event)\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        SEARCH_BOX_VALUE_ACCESSOR
                    ]
                }] }
    ];
    /** @nocollapse */
    SearchBoxComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: OverLayHiddenService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef }
    ]; };
    SearchBoxComponent.propDecorators = {
        fields: [{ type: Input }],
        maxSearchFields: [{ type: Input }],
        condition: [{ type: Input }],
        useAnyField: [{ type: Input }],
        container: [{ type: ViewChild, args: ['searchbox',] }],
        input: [{ type: ViewChild, args: ['tagInput',] }],
        shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
        input2: [{ type: ViewChild, args: ['tagInput2',] }],
        conditionChange: [{ type: Output }],
        clear: [{ type: Output }],
        escHandler: [{ type: Output }]
    };
    return SearchBoxComponent;
}(SearchBoxBase));
export { SearchBoxComponent };
if (false) {
    /** @type {?} */
    SearchBoxComponent.prototype.fields;
    /** @type {?} */
    SearchBoxComponent.prototype.maxSearchFields;
    /** @type {?} */
    SearchBoxComponent.prototype.condition;
    /**
     * 启用 任意字段
     * @type {?}
     */
    SearchBoxComponent.prototype.useAnyField;
    /** @type {?} */
    SearchBoxComponent.prototype.container;
    /** @type {?} */
    SearchBoxComponent.prototype.input;
    /** @type {?} */
    SearchBoxComponent.prototype.shadowBox;
    /** @type {?} */
    SearchBoxComponent.prototype.input2;
    /** @type {?} */
    SearchBoxComponent.prototype.conditionChange;
    /** @type {?} */
    SearchBoxComponent.prototype.clear;
    /** @type {?} */
    SearchBoxComponent.prototype.escHandler;
    /**
     * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
     * @type {?}
     */
    SearchBoxComponent.prototype.enableFloat;
    /** @type {?} */
    SearchBoxComponent.prototype.displayTextList;
    /** @type {?} */
    SearchBoxComponent.prototype.filterConditions;
    /** @type {?} */
    SearchBoxComponent.prototype.hiddenItemsCount$;
    /** @type {?} */
    SearchBoxComponent.prototype.onModelChange;
    /** @type {?} */
    SearchBoxComponent.prototype.onModelTouched;
}
//# sourceMappingURL=data:application/json;base64,