/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { FarrisCommonModule } from '@farris/ui-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { LocaleModule } from '@farris/ui-locale';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { SwitchModule } from '@farris/ui-switch';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { FarrisFormsModule } from '@farris/ui-forms';
import { DateHelperModule } from "@farris/ui-common/date";
import { SearchBoxComponent } from './search-box.component';
import { SearchFieldPanelComponent } from './search-fields/search-field-panel.component';
import { SearchFieldsComponent } from './search-fields/search-fields.component';
import { SearchFieldDirective } from './search-fields/search-filed.directive';
import { SearchPanelComponent } from './search-panel/search-panel.component';
import { SearchPanelDirective } from './search-panel/search-panel.directive';
import { SearchWordPipe } from './search-panel/search-words.pipe';
import { SearchFieldFlexibleDateComponent } from './search-fields/editors/date/flexible-date.component';
import { SearchFieldFlexibleNumberComponent } from './search-fields/editors/number/flexible-number.component';
import { SearchFieldEnumEditorComponent } from './search-fields/editors/enum/search-editor-enum.component';
import { SearchFieldEditorBooleanComponent } from './search-fields/editors/boolean/search-editor-boolean.component';
import { SearchFieldCanClearPipe } from './search-fields/can-clear-condition.pipe';
var SearchBoxModule = /** @class */ (function () {
    function SearchBoxModule() {
    }
    SearchBoxModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        SearchBoxComponent,
                        SearchPanelComponent,
                        SearchPanelDirective,
                        SearchWordPipe,
                        SearchFieldsComponent,
                        SearchFieldDirective,
                        SearchFieldPanelComponent,
                        SearchFieldFlexibleDateComponent,
                        SearchFieldFlexibleNumberComponent,
                        SearchFieldEnumEditorComponent,
                        SearchFieldEditorBooleanComponent,
                        SearchFieldCanClearPipe
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisCommonModule.forRoot(),
                        InputGroupModule,
                        LocaleModule.forRoot(),
                        FarrisDatePickerModule,
                        SwitchModule,
                        NumberSpinnerModule,
                        FarrisFormsModule,
                        DateHelperModule.forRoot()
                    ],
                    entryComponents: [
                        SearchPanelComponent,
                        SearchFieldPanelComponent
                    ],
                    exports: [
                        SearchBoxComponent,
                        SearchPanelComponent,
                        SearchPanelDirective,
                        SearchWordPipe,
                        SearchFieldsComponent,
                        SearchFieldDirective,
                        SearchFieldPanelComponent,
                        SearchFieldFlexibleDateComponent,
                        SearchFieldFlexibleNumberComponent,
                        SearchFieldEnumEditorComponent,
                        SearchFieldEditorBooleanComponent
                    ]
                },] }
    ];
    return SearchBoxModule;
}());
export { SearchBoxModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWJveC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNlYXJjaC1ib3gvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoLWJveC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBZ0IsbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQWtCLHdCQUF3QixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBc0IsbUJBQW1CLENBQUM7QUFDakUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQVksdUJBQXVCLENBQUM7QUFDckUsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFzQixtQkFBbUIsQ0FBQztBQUNqRSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBZSwyQkFBMkIsQ0FBQztBQUN6RSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBaUIsa0JBQWtCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQWtCLHdCQUF3QixDQUFDO0FBRXRFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzVELE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUVsRSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBVSxzREFBc0QsQ0FBQztBQUM1RyxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBUSwwREFBMEQsQ0FBQztBQUNoSCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsTUFBWSwyREFBMkQsQ0FBQztBQUNqSCxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBUyxpRUFBaUUsQ0FBQztBQUN2SCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUNuRjtJQUFBO0lBNkMrQixDQUFDOztnQkE3Qy9CLFFBQVEsU0FBQztvQkFDTixZQUFZLEVBQUU7d0JBQ1Ysa0JBQWtCO3dCQUNsQixvQkFBb0I7d0JBQ3BCLG9CQUFvQjt3QkFDcEIsY0FBYzt3QkFDZCxxQkFBcUI7d0JBQ3JCLG9CQUFvQjt3QkFDcEIseUJBQXlCO3dCQUN6QixnQ0FBZ0M7d0JBQ2hDLGtDQUFrQzt3QkFDbEMsOEJBQThCO3dCQUM5QixpQ0FBaUM7d0JBQ2pDLHVCQUF1QjtxQkFDMUI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLFlBQVk7d0JBQ1osV0FBVzt3QkFDWCxrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGdCQUFnQjt3QkFDaEIsWUFBWSxDQUFDLE9BQU8sRUFBRTt3QkFDdEIsc0JBQXNCO3dCQUN0QixZQUFZO3dCQUNaLG1CQUFtQjt3QkFDbkIsaUJBQWlCO3dCQUNqQixnQkFBZ0IsQ0FBQyxPQUFPLEVBQUU7cUJBQzdCO29CQUNELGVBQWUsRUFBRTt3QkFDYixvQkFBb0I7d0JBQ3BCLHlCQUF5QjtxQkFDNUI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLGtCQUFrQjt3QkFDbEIsb0JBQW9CO3dCQUNwQixvQkFBb0I7d0JBQ3BCLGNBQWM7d0JBQ2QscUJBQXFCO3dCQUNyQixvQkFBb0I7d0JBQ3BCLHlCQUF5Qjt3QkFDekIsZ0NBQWdDO3dCQUNoQyxrQ0FBa0M7d0JBQ2xDLDhCQUE4Qjt3QkFDOUIsaUNBQWlDO3FCQUNwQztpQkFDSjs7SUFDOEIsc0JBQUM7Q0FBQSxBQTdDaEMsSUE2Q2dDO1NBQW5CLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IEZhcnJpc0NvbW1vbk1vZHVsZSB9ICAgICAgICAgICBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcbmltcG9ydCB7IElucHV0R3JvdXBNb2R1bGUgfSAgICAgICAgICAgICBmcm9tICdAZmFycmlzL3VpLWlucHV0LWdyb3VwJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gICAgICAgICAgICAgICAgIGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuaW1wb3J0IHsgRmFycmlzRGF0ZVBpY2tlck1vZHVsZSB9ICAgICAgIGZyb20gJ0BmYXJyaXMvdWktZGF0ZXBpY2tlcic7XHJcbmltcG9ydCB7IFN3aXRjaE1vZHVsZSB9ICAgICAgICAgICAgICAgICBmcm9tICdAZmFycmlzL3VpLXN3aXRjaCc7XHJcbmltcG9ydCB7IE51bWJlclNwaW5uZXJNb2R1bGUgfSAgICAgICAgICBmcm9tICdAZmFycmlzL3VpLW51bWJlci1zcGlubmVyJztcclxuaW1wb3J0IHsgRmFycmlzRm9ybXNNb2R1bGUgfSAgICAgICAgICAgIGZyb20gJ0BmYXJyaXMvdWktZm9ybXMnO1xyXG5pbXBvcnQgeyBEYXRlSGVscGVyTW9kdWxlIH0gICAgICAgICAgICAgZnJvbSBcIkBmYXJyaXMvdWktY29tbW9uL2RhdGVcIjtcclxuXHJcbmltcG9ydCB7IFNlYXJjaEJveENvbXBvbmVudCB9IGZyb20gJy4vc2VhcmNoLWJveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZFBhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtZmllbGRzL3NlYXJjaC1maWVsZC1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZHNDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1maWVsZHMvc2VhcmNoLWZpZWxkcy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZERpcmVjdGl2ZSB9IGZyb20gJy4vc2VhcmNoLWZpZWxkcy9zZWFyY2gtZmlsZWQuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgU2VhcmNoUGFuZWxDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1wYW5lbC9zZWFyY2gtcGFuZWwuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2VhcmNoUGFuZWxEaXJlY3RpdmUgfSBmcm9tICcuL3NlYXJjaC1wYW5lbC9zZWFyY2gtcGFuZWwuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgU2VhcmNoV29yZFBpcGUgfSBmcm9tICcuL3NlYXJjaC1wYW5lbC9zZWFyY2gtd29yZHMucGlwZSc7XHJcblxyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZEZsZXhpYmxlRGF0ZUNvbXBvbmVudCB9ICAgICBmcm9tICcuL3NlYXJjaC1maWVsZHMvZWRpdG9ycy9kYXRlL2ZsZXhpYmxlLWRhdGUuY29tcG9uZW50JztcclxuaW1wb3J0IHsgU2VhcmNoRmllbGRGbGV4aWJsZU51bWJlckNvbXBvbmVudCB9ICAgZnJvbSAnLi9zZWFyY2gtZmllbGRzL2VkaXRvcnMvbnVtYmVyL2ZsZXhpYmxlLW51bWJlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZEVudW1FZGl0b3JDb21wb25lbnQgfSAgICAgICBmcm9tICcuL3NlYXJjaC1maWVsZHMvZWRpdG9ycy9lbnVtL3NlYXJjaC1lZGl0b3ItZW51bS5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZEVkaXRvckJvb2xlYW5Db21wb25lbnQgfSAgICBmcm9tICcuL3NlYXJjaC1maWVsZHMvZWRpdG9ycy9ib29sZWFuL3NlYXJjaC1lZGl0b3ItYm9vbGVhbi5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWFyY2hGaWVsZENhbkNsZWFyUGlwZSB9IGZyb20gJy4vc2VhcmNoLWZpZWxkcy9jYW4tY2xlYXItY29uZGl0aW9uLnBpcGUnO1xyXG5ATmdNb2R1bGUoe1xyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgU2VhcmNoQm94Q29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaFBhbmVsRGlyZWN0aXZlLFxyXG4gICAgICAgIFNlYXJjaFdvcmRQaXBlLFxyXG4gICAgICAgIFNlYXJjaEZpZWxkc0NvbXBvbmVudCxcclxuICAgICAgICBTZWFyY2hGaWVsZERpcmVjdGl2ZSxcclxuICAgICAgICBTZWFyY2hGaWVsZFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRmxleGlibGVEYXRlQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRmxleGlibGVOdW1iZXJDb21wb25lbnQsXHJcbiAgICAgICAgU2VhcmNoRmllbGRFbnVtRWRpdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRWRpdG9yQm9vbGVhbkNvbXBvbmVudCxcclxuICAgICAgICBTZWFyY2hGaWVsZENhbkNsZWFyUGlwZVxyXG4gICAgXSxcclxuICAgIGltcG9ydHM6IFtcclxuICAgICAgICBDb21tb25Nb2R1bGUsXHJcbiAgICAgICAgRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzQ29tbW9uTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBJbnB1dEdyb3VwTW9kdWxlLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgRmFycmlzRGF0ZVBpY2tlck1vZHVsZSxcclxuICAgICAgICBTd2l0Y2hNb2R1bGUsXHJcbiAgICAgICAgTnVtYmVyU3Bpbm5lck1vZHVsZSxcclxuICAgICAgICBGYXJyaXNGb3Jtc01vZHVsZSxcclxuICAgICAgICBEYXRlSGVscGVyTW9kdWxlLmZvclJvb3QoKVxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW1xyXG4gICAgICAgIFNlYXJjaFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkUGFuZWxDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgU2VhcmNoQm94Q29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaFBhbmVsRGlyZWN0aXZlLFxyXG4gICAgICAgIFNlYXJjaFdvcmRQaXBlLFxyXG4gICAgICAgIFNlYXJjaEZpZWxkc0NvbXBvbmVudCxcclxuICAgICAgICBTZWFyY2hGaWVsZERpcmVjdGl2ZSxcclxuICAgICAgICBTZWFyY2hGaWVsZFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRmxleGlibGVEYXRlQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRmxleGlibGVOdW1iZXJDb21wb25lbnQsXHJcbiAgICAgICAgU2VhcmNoRmllbGRFbnVtRWRpdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIFNlYXJjaEZpZWxkRWRpdG9yQm9vbGVhbkNvbXBvbmVudFxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VhcmNoQm94TW9kdWxlIHsgfVxyXG4iXX0=