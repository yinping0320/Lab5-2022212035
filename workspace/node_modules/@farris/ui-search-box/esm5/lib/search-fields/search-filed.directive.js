/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ApplicationRef, ComponentFactoryResolver, Directive, ElementRef, HostListener, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { debounceTime } from 'rxjs/operators';
import { SearchFieldPanelComponent } from './search-field-panel.component';
import { SearchFieldsComponent } from './search-fields.component';
import { CommonUtils } from '@farris/ui-common';
var SearchFieldDirective = /** @class */ (function () {
    function SearchFieldDirective(injector, elRef, ngzone, render, cfr, searchFieldsRef, _applicationRef) {
        this.injector = injector;
        this.elRef = elRef;
        this.ngzone = ngzone;
        this.render = render;
        this.cfr = cfr;
        this.searchFieldsRef = searchFieldsRef;
        this._applicationRef = _applicationRef;
        this.winResizeHandle = null;
        this.docKeydownEventHandle = null;
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    SearchFieldDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.searchFieldsRef) {
            this.searchFieldsRef.hideShadowbox.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.removeFieldPanel();
            }));
        }
        this.winResizeHandle = this.render.listen(window, 'resize', (/**
         * @return {?}
         */
        function () {
            _this.removeFieldPanel();
        }));
    };
    /**
     * @return {?}
     */
    SearchFieldDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SearchFieldDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.removeFieldPanel();
        if (this.winResizeHandle) {
            this.winResizeHandle();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldDirective.prototype.onMouseDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldDirective.prototype.onFieldClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (!this.panelElement) {
            this.createFieldPanel();
        }
        else {
            this.removeFieldPanel();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldDirective.prototype.removeFieldPanel = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.panelElement) {
            this.panelElement.remove();
            this.panelElement = null;
            this.searchFieldsRef.overLayService.destory(this.elRef.nativeElement);
            this.render.removeClass(this.elRef.nativeElement, 'selected');
        }
        if (this.docKeydownEventHandle) {
            this.docKeydownEventHandle();
            this.docKeydownEventHandle = null;
        }
    };
    /**
     * @private
     * @param {?=} enterFn
     * @return {?}
     */
    SearchFieldDirective.prototype.registerKeyboardEvent = /**
     * @private
     * @param {?=} enterFn
     * @return {?}
     */
    function (enterFn) {
        var _this = this;
        if (this.commonUtils) {
            return this.commonUtils.regBodyKeydownEvent(enterFn, (/**
             * @return {?}
             */
            function () { _this.removeFieldPanel(); }));
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldDirective.prototype.createFieldPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-filter-panel', 'f-area-hide', 'f-search-field-container');
        /** @type {?} */
        var zindex = '' + this.searchFieldsRef.commonUtils.getFloatingLayerIndex();
        this.panelElement.style.zIndex = zindex;
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        /** @type {?} */
        var fieldPanelRef = this.cfr.resolveComponentFactory(SearchFieldPanelComponent);
        /** @type {?} */
        var _fieldPanelIns = fieldPanelRef.create(this.injector);
        this._applicationRef.attachView(_fieldPanelIns.hostView);
        _fieldPanelIns.instance.fieldOptions = this.field;
        _fieldPanelIns.instance.conditions = { field: this.field.code, value: this.field.value };
        this.panelElement.appendChild(_fieldPanelIns.location.nativeElement);
        this.panelElement.classList.add('f-area-show');
        _fieldPanelIns.instance.filterChange.pipe(debounceTime(100)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // 新的查询条件
            // console.log(e);
            _this.searchFieldsRef.setConditions(e);
        }));
        _fieldPanelIns.instance.remove.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.searchFieldsRef.remove(e.code);
        }));
        _fieldPanelIns.changeDetectorRef.detectChanges();
        this.searchFieldsRef.overLayService.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.elRef.nativeElement.contains(e.target)) {
                return;
            }
            if (e.target.closest('.f-search-field-container')) {
                if (e.target.nodeName === 'BUTTON' && e.target.className.indexOf('close-field-panel') > -1) {
                    _this.removeFieldPanel();
                }
                return;
            }
            if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                return;
            }
            _this.removeFieldPanel();
        }));
        this.render.addClass(this.elRef.nativeElement, 'selected');
        // 处理 ESC、ENTER
        this.docKeydownEventHandle = this.registerKeyboardEvent((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var btnok = _fieldPanelIns.instance.btnSubmit;
            if (btnok && !btnok.nativeElement.disabled) {
                btnok.nativeElement.click();
                _this.removeFieldPanel();
            }
        }));
    };
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    SearchFieldDirective.prototype.setPanelPosition = /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    function (updateTopPosition) {
        if (updateTopPosition === void 0) { updateTopPosition = true; }
        if (this.panelElement) {
            var _a = this.getPanelSize(), width = _a.width, left = _a.left, top_1 = _a.top, height = _a.height;
            this.panelElement.style.width = width + "px";
            // this.panelElement.style.maxHeight = `${height}px`;
            if (updateTopPosition) {
                this.panelElement.style.top = top_1 + "px";
            }
            this.panelElement.style.left = left + "px";
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldDirective.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        return this.elRef.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldDirective.prototype.getPanelSize = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width = 380;
        var _a = this.getInputSizeInfo(), top = _a.top, left = _a.left, height = _a.height;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        /** @type {?} */
        var panelHeight = 190;
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        if (window.innerWidth - left < width) {
            left = left + width - width;
        }
        return { width: width, top: top, height: panelHeight, left: left };
    };
    SearchFieldDirective.decorators = [
        { type: Directive, args: [{ selector: '[search-field]' },] }
    ];
    /** @nocollapse */
    SearchFieldDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: NgZone },
        { type: Renderer2 },
        { type: ComponentFactoryResolver },
        { type: SearchFieldsComponent },
        { type: ApplicationRef }
    ]; };
    SearchFieldDirective.propDecorators = {
        field: [{ type: Input, args: ['search-field',] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onFieldClick: [{ type: HostListener, args: ['click', ['$event'],] }]
    };
    return SearchFieldDirective;
}());
export { SearchFieldDirective };
if (false) {
    /** @type {?} */
    SearchFieldDirective.prototype.field;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.winResizeHandle;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.docKeydownEventHandle;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype.searchFieldsRef;
    /**
     * @type {?}
     * @private
     */
    SearchFieldDirective.prototype._applicationRef;
}
//# sourceMappingURL=data:application/json;base64,