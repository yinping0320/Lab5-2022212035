/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, forwardRef, Injector, Input, Optional, Output, ViewChild, ViewEncapsulation } from "@angular/core";
import { OverLayHiddenService } from "@farris/ui-common";
import { Compare, FilterRelation } from "@farris/ui-common/types";
import { flatten } from 'lodash-es';
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { BehaviorSubject, Subject } from "rxjs";
import { SearchBoxBase } from "../search-box-base";
import { DateTimeHelperService } from "@farris/ui-common/date";
/** @type {?} */
export var SEARCH_BOX_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SearchFieldsComponent; })),
    multi: true
};
var SearchFieldsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(SearchFieldsComponent, _super);
    function SearchFieldsComponent(el, injector, overLayService, cd, dateHelp) {
        var _this = _super.call(this, el, injector, overLayService, cd) || this;
        _this.dateHelp = dateHelp;
        _this.fields = [];
        _this.maxSearchFields = 5;
        _this.condition = [];
        /**
         * 多字段查询
         */
        _this.multi = true;
        _this.conditionChange = new EventEmitter();
        _this.clear = new EventEmitter();
        /**
         * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
         */
        _this.enableFloat = true;
        _this.displayTextList = [];
        // filterConditions: Array<SearchFieldValue> = [];
        _this.moreStatus$ = new BehaviorSubject(false);
        _this.hideShadowbox = new Subject();
        _this.showShadowBox = false;
        _this.onModelChange = (/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { });
        _this.onModelTouched = (/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { });
        return _this;
    }
    Object.defineProperty(SearchFieldsComponent.prototype, "hasFilter", {
        get: /**
         * @return {?}
         */
        function () {
            return this.displayTextList && this.displayTextList.length ? this.displayTextList.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.hasFilter; })).length : false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchFieldsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.initDislayText(!!this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.value; })).length);
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.shadowBox && _this.showShadowBox) {
                if (_this.shadowBox.nativeElement.contains(e.target)) {
                    return;
                }
                if (e.target.closest('.f-search-field-container')) {
                    return;
                }
                if (e.target.closest('.date-overlay-container') || e.target.className.indexOf('date-overlay-container') > -1) {
                    return;
                }
                _this.toggleShadowBox(false);
                _this.hideShadowbox.next(e);
            }
        }));
    };
    /**
     * @return {?}
     */
    SearchFieldsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.moveShadowToBody();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SearchFieldsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    SearchFieldsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overLayService) {
            this.overLayService = null;
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldsComponent.prototype.filterChanged = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var conditions = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.value; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            var _a = n.value, value = _a.value, begin = _a.begin, end = _a.end;
            if (value != null && value !== undefined && n.control.single) {
                if (n.control.controltype === 'datetime') {
                    return [{
                            filterField: n.code,
                            value: value,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: _this.dateHelp.formatTo(_this.dateHelp.addDays(new Date(value), 1), n.control.dateFormat),
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.Less
                        }];
                }
                else if (n.control.controltype === 'enum' && Array.isArray(value)) {
                    return value.map((/**
                     * @param {?} e
                     * @param {?} i
                     * @return {?}
                     */
                    function (e, i) {
                        return {
                            filterField: n.code,
                            value: e,
                            lbracket: i ? '' : '(',
                            rbracket: i == value.length - 1 ? ')' : '',
                            relation: i == value.length - 1 ? FilterRelation.And : FilterRelation.Or,
                            compare: Compare.Equal
                        };
                    }));
                }
                return {
                    filterField: n.code,
                    value: Array.isArray(value) ? value.join(',') : value,
                    lbracket: '',
                    rbracket: '',
                    relation: FilterRelation.And,
                    compare: Array.isArray(value) ? Compare.In : Compare.Equal
                };
            }
            else {
                if (begin !== '' && begin != null && begin != undefined && end !== '' && end != null && end != undefined) {
                    return [
                        {
                            filterField: n.code,
                            value: begin,
                            lbracket: '(',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        },
                        {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: ')',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        }
                    ];
                }
                else {
                    if (begin !== '' && begin != null && begin != undefined) {
                        return {
                            filterField: n.code,
                            value: begin,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.GreaterOrEqual
                        };
                    }
                    if (end !== '' && end != null && end != undefined) {
                        return {
                            filterField: n.code,
                            value: end,
                            lbracket: '',
                            rbracket: '',
                            relation: FilterRelation.And,
                            compare: Compare.LessOrEqual
                        };
                    }
                }
                return null;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n; }));
        /** @type {?} */
        var _conditions = [];
        if (conditions && conditions.length) {
            _conditions = flatten(conditions);
            _conditions[_conditions.length - 1].relation = FilterRelation.Empty;
        }
        this.onModelChange(this.fields);
        this.onModelTouched(this.fields);
        this.conditionChange.emit(_conditions);
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    SearchFieldsComponent.prototype.setConditions = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        /** @type {?} */
        var field = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code === condition.field; }));
        field.value = condition.value;
        field.control.single = condition.value.single;
        this.initDislayText();
        this.cd.detectChanges();
    };
    /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    SearchFieldsComponent.prototype.initDislayText = /**
     * @private
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.displayTextList = this.fields.map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var n = tslib_1.__assign({}, t);
            n.dislayText = n.name;
            n.hasFilter = false;
            if (n.value) {
                var _a = n.value, value = _a.value, begin = _a.begin, end = _a.end;
                /** @type {?} */
                var val = value;
                if (t.control && t.control.enumValues && t.control.enumValues.length) {
                    if (!Array.isArray(val)) {
                        val = [val];
                    }
                    val = val.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var d = t.control.enumValues.find((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) { return e.value === n; }));
                        if (d) {
                            return d.name;
                        }
                        return n;
                    })).join(',');
                }
                else {
                    if (begin !== null && begin !== undefined) {
                        val = begin;
                    }
                    if (end !== null && end !== undefined) {
                        if (val != null) {
                            val += '~' + end;
                        }
                        else {
                            val = end;
                        }
                    }
                }
                n.dislayText += '：' + val;
                n.hasFilter = true;
            }
            return n;
        }));
        this.setMoreStatus();
        if (emit) {
            this.filterChanged();
        }
    };
    /**
     * @param {?} field
     * @return {?}
     */
    SearchFieldsComponent.prototype.remove = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var searchField = this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code === field; }));
        if (searchField) {
            searchField.value = null;
            this.initDislayText();
        }
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    SearchFieldsComponent.prototype.onRemoveItem = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        if (item.value !== null && item.value != undefined && item.value !== '') {
            $event.stopPropagation();
            this.remove(item.code);
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    SearchFieldsComponent.prototype.clearConditions = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.fields.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.value = null; }));
        this.initDislayText(emit);
        if (emit) {
            this.clear.emit();
        }
        this.cd.detectChanges();
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SearchFieldsComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        /** @type {?} */
        var arr = obj;
        if (!Array.isArray(obj)) {
            arr = [];
        }
        this.fields = arr;
        this.initDislayText();
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchFieldsComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SearchFieldsComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} arr
     * @return {?}
     */
    SearchFieldsComponent.prototype.setValue = /**
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        // this.filterConditions = arr;
        // this.initDislayText();
    };
    /**
     * @param {?=} __0
     * @return {?}
     */
    SearchFieldsComponent.prototype.updateShadowBoxPosition = /**
     * @param {?=} __0
     * @return {?}
     */
    function (_a) {
        var _b = _a === void 0 ? { top: null, left: null, width: null } : _a, top = _b.top, left = _b.left, width = _b.width;
        if (!top && !left && !width) {
            /** @type {?} */
            var e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldsComponent.prototype.moveShadowToBody = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.enableFloat) {
            return;
        }
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
    };
    /**
     * @param {?=} show
     * @param {?=} el
     * @return {?}
     */
    SearchFieldsComponent.prototype.toggleShadowBox = /**
     * @param {?=} show
     * @param {?=} el
     * @return {?}
     */
    function (show, el) {
        if (show === void 0) { show = true; }
        if (el === void 0) { el = null; }
        if (!this.enableFloat) {
            return;
        }
        if (el && el.clientHeight <= 30) {
            return;
        }
        this.showShadowBox = show;
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
            this.render.addClass(this.shadowBox.nativeElement, 'active');
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
            this.render.removeClass(this.shadowBox.nativeElement, 'active');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldsComponent.prototype.onResized = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.enableFloat) {
            this.updateShadowBoxPosition($event);
            this.setMoreStatus();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldsComponent.prototype.setMoreStatus = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.enableFloat) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var r = _this.tagContainerRef.nativeElement.clientHeight > 30;
                _this.moreStatus$.next(r);
                _this.cd.detectChanges();
            }));
        }
    };
    SearchFieldsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-search-fields',
                    template: "\r\n<!-- [style.color]=\"hasFilter && (moreStatus$ | async) ? '#529dff': ''\" -->\r\n<div #searchbox class=\"input-group f-search-box f-search-fields\" style=\"border-color: transparent\" resizeObserver (resize)=\"onResized($event)\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px; padding: 0px 5px;\" [style.height]=\"enableFloat? '26px': 'auto'\">\r\n        <div class=\"multi--content d-flex flex-row\" [class.more]=\"moreStatus$ | async\"\r\n         style=\"width: 100%;flex-wrap: wrap;align-items: center;cursor: text;\" #tagContainer (click)=\"toggleShadowBox(true, tagContainer)\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-search-shadow-fields\" style=\"position:absolute;display: none; z-index: 2999;\" *ngIf=\"enableFloat\" (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more pb-1 d-flex\" style=\"height: auto; min-height: 26px;padding: 0 5px\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\">\r\n            <span class=\"multi--item search-tag-item search-field\" [search-field]=\"txt\" [class.search-field-remove]=\"txt.hasFilter\" [class.has-filter]=\"txt.hasFilter\"\r\n                *ngFor=\"let txt of displayTextList; let index\" title=\"{{ txt.dislayText }}\" [attr.field]=\"txt.code\">\r\n                {{txt.dislayText}}\r\n                <i class=\"f-icon f-icon-arrow-chevron-down\" [attr.title]=\"txt.hasFilter ? ('searchbox.removeFilter'| locale): ''\" (click)=\"onRemoveItem($event, txt)\"></i>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>\r\n",
                    // styleUrls: [
                    //     `../searchbox-panel.scss`
                    // ],
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        SEARCH_BOX_VALUE_ACCESSOR
                    ]
                }] }
    ];
    /** @nocollapse */
    SearchFieldsComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: OverLayHiddenService, decorators: [{ type: Optional }] },
        { type: ChangeDetectorRef },
        { type: DateTimeHelperService }
    ]; };
    SearchFieldsComponent.propDecorators = {
        fields: [{ type: Input }],
        maxSearchFields: [{ type: Input }],
        condition: [{ type: Input }],
        multi: [{ type: Input }],
        container: [{ type: ViewChild, args: ['searchbox',] }],
        shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
        tagContainerRef: [{ type: ViewChild, args: ['tagContainer',] }],
        conditionChange: [{ type: Output }],
        clear: [{ type: Output }]
    };
    return SearchFieldsComponent;
}(SearchBoxBase));
export { SearchFieldsComponent };
if (false) {
    /** @type {?} */
    SearchFieldsComponent.prototype.fields;
    /** @type {?} */
    SearchFieldsComponent.prototype.maxSearchFields;
    /** @type {?} */
    SearchFieldsComponent.prototype.condition;
    /**
     * 多字段查询
     * @type {?}
     */
    SearchFieldsComponent.prototype.multi;
    /** @type {?} */
    SearchFieldsComponent.prototype.container;
    /** @type {?} */
    SearchFieldsComponent.prototype.shadowBox;
    /** @type {?} */
    SearchFieldsComponent.prototype.tagContainerRef;
    /** @type {?} */
    SearchFieldsComponent.prototype.conditionChange;
    /** @type {?} */
    SearchFieldsComponent.prototype.clear;
    /**
     * 启用漂浮，false: 内容会撑高容器； true：固定高度26px，点击或滑过时，显示完整内容，失去焦点后，返回固定状态
     * @type {?}
     */
    SearchFieldsComponent.prototype.enableFloat;
    /** @type {?} */
    SearchFieldsComponent.prototype.displayTextList;
    /** @type {?} */
    SearchFieldsComponent.prototype.moreStatus$;
    /** @type {?} */
    SearchFieldsComponent.prototype.hideShadowbox;
    /**
     * @type {?}
     * @private
     */
    SearchFieldsComponent.prototype.showShadowBox;
    /** @type {?} */
    SearchFieldsComponent.prototype.onModelChange;
    /** @type {?} */
    SearchFieldsComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    SearchFieldsComponent.prototype.dateHelp;
}
//# sourceMappingURL=data:application/json;base64,