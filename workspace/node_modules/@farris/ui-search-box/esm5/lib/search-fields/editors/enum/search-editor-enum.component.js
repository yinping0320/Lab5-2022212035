/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, ViewChild } from "@angular/core";
import { cloneDeep } from 'lodash-es';
var SearchFieldEnumEditorComponent = /** @class */ (function () {
    function SearchFieldEnumEditorComponent(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this.checkedAll = false;
        this.boolcheck = false;
        this.valueChange = new EventEmitter();
        // indeterminate: boolean = true;
        // boolchecked: boolean;
        // boolCheckState: string = "indeterminate";
        this.checkboxDataSource = new Array();
    }
    Object.defineProperty(SearchFieldEnumEditorComponent.prototype, "field", {
        get: /**
         * @return {?}
         */
        function () {
            return this._item;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._item = cloneDeep(data);
            this.getDataSource();
            //this.checkValue = this._item.value.getOriginalValue();
            if (!this._item.hasOwnProperty("value")) {
                this._item.value = { value: [] };
            }
            if (this._item.hasOwnProperty("value") && this._item.value) {
                this.checkValue = this._item.value.value;
            }
            else {
                this._item.value = { value: [] };
            }
            // if (this.boolcheck) {
            //     if (this.checkValue.length) {
            //         this.boolchecked = this.checkValue[0];
            //         if (this.boolchecked) this.boolCheckState = "checked";
            //         else this.boolCheckState = "unchecked";
            //     } else this.boolCheckState = "indeterminate";
            // }
            if (this._item.value.value.length == 0) {
                this.checkedAll = false;
            }
            else if (this._item.control["enumValues"] && this._item.value.value.length == this._item.control["enumValues"].length) {
                this.checkedAll = true;
            }
            this.setSubmitChange();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.getDataSource = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.field && this._item.control) {
            /** @type {?} */
            var checkboxList = this._item.control;
            this.checkboxDataSource = Array();
            if (checkboxList.enumValues && checkboxList.enumValues.length > 0) {
                checkboxList.enumValues.forEach((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) {
                    _this.checkboxDataSource.push(Object.assign({}, element));
                }));
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.onSearch = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var checkboxValue = [];
        if (event) {
            // let checkboxList = event.split(',');
            /** @type {?} */
            var checkboxList = event;
            if (checkboxList && checkboxList.length) {
                checkboxValue = checkboxList;
            }
            this._item.value.value = checkboxValue;
        }
        else {
            this._item.value.value = "";
        }
        if (checkboxValue.length < this._item.control["enumValues"].length) {
            this.checkedAll = false;
            // this.checkAllElRef.nativeElement.indeterminate = !!checkboxValue.length;
            // if (!checkboxValue.length) {
            //     this.checkedAll = false;    
            // }
        }
        else if (checkboxValue.length == this._item.control["enumValues"].length) {
            this.checkedAll = true;
            // this.checkAllElRef.nativeElement.indeterminate = false;
        }
        this.cd.detectChanges();
        this.getValueText();
        this.setSubmitChange();
        this.valueChange.emit({ field: this.field.code, value: { value: checkboxValue, single: true } });
    };
    /**
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.getValueText = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumValue = this._item.control.enumValues;
        /** @type {?} */
        var value = this._item.value.value;
        if (enumValue && enumValue.length && value && value.length) {
            /** @type {?} */
            var texts = [];
            var _loop_1 = function (i) {
                /** @type {?} */
                var enums = enumValue.find((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    return val["value"] == value[i];
                }));
                if (enums) {
                    texts.push(enums["name"]);
                }
            };
            for (var i = 0; i <= value.length; i++) {
                _loop_1(i);
            }
            this._item.valueText = texts.join(",");
        }
    };
    /**
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.setSubmitChange = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var val = this._item.value;
        if (Object.keys(val).length < 0 ||
            Object.keys(val.value).length === 0) {
            // this.submitChange.emit(false);
        }
        else {
            // this.submitChange.emit(true);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.onCheckAll = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // this.checkAllElRef.nativeElement.indeterminate = false;
        this.checkedAll = !this.checkedAll;
        if (this.checkedAll) {
            this.setCheckedAll();
        }
        else {
            this._item.value.value = [];
            this._item.valueText = "";
            this.checkValue = [];
        }
        this.getValueText();
        this.setSubmitChange();
        this.cd.detectChanges();
        this.valueChange.emit({ field: this.field.code, value: { value: this.checkValue, single: true } });
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldEnumEditorComponent.prototype.setCheckedAll = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var enumValue = this._item.control.enumValues;
        if (enumValue && enumValue.length) {
            /** @type {?} */
            var checkboxValue = [];
            //checkboxTexts = [];
            for (var i = 0; i < enumValue.length; i++) {
                checkboxValue.push(enumValue[i]["value"]);
                //checkboxTexts.push(enumValue[i]['name'])
            }
            this._item.value.value = checkboxValue;
            this.checkValue = this._item.value.value;
            //this._item.valueText = checkboxTexts.join(',');
            this.cd.detectChanges();
        }
    };
    SearchFieldEnumEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: "search-filed-editor-enum",
                    template: "<div class=\"custom-control custom-checkbox custom-control-inline filter-panel-checkbox\" style=\"padding-left: 10px;\">\r\n    <input type=\"checkbox\" class=\"custom-control-input\"  [checked]=\"checkedAll\" #checkAllEl>\r\n    <label class=\"custom-control-label\" (click)=\"onCheckAll($event)\">{{'filterPanel.checkall'| locale}}</label>\r\n</div>\r\n<farris-checkboxgroup [value]=\"checkValue\" [horizontal]=\"false\" style=\"padding-left: 10px;\"\r\n    [data]=\"checkboxDataSource\" [isStringValue]=\"false\" (changeValue)=\"onSearch($event)\">\r\n</farris-checkboxgroup>\r\n"
                }] }
    ];
    /** @nocollapse */
    SearchFieldEnumEditorComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    SearchFieldEnumEditorComponent.propDecorators = {
        boolcheck: [{ type: Input }],
        field: [{ type: Input }],
        valueChange: [{ type: Output }],
        checkAllElRef: [{ type: ViewChild, args: ['checkAllEl',] }]
    };
    return SearchFieldEnumEditorComponent;
}());
export { SearchFieldEnumEditorComponent };
if (false) {
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkedAll;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.boolcheck;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype._item;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.valueChange;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkValue;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkboxDataSource;
    /** @type {?} */
    SearchFieldEnumEditorComponent.prototype.checkAllElRef;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEnumEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEnumEditorComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,