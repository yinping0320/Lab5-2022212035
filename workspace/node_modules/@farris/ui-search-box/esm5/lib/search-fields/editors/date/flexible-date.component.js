/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, EventEmitter, Injector, Input, Output } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { LocaleService } from '@farris/ui-locale';
var SearchFieldFlexibleDateComponent = /** @class */ (function () {
    function SearchFieldFlexibleDateComponent(localeService, injector, cd) {
        this.localeService = localeService;
        this.injector = injector;
        this.cd = cd;
        this.valueChange = new EventEmitter();
        // 是否为区间日期
        this.single = true;
        this.dateFormat = '';
        this.showTime = false;
        this.value = '';
        this.beginValue = '';
        this.endValue = '';
        this.showType = '1';
        this.placeholder = '';
        this.endPlaceHolder = '';
        this.beginPlaceHolder = '';
        this.activedDateTagId = '';
        this.activedDayTagId = '';
        this.dateTags = [];
        this.dayTags = [];
        this.dateHelp = null;
        this.dateHelp = this.injector.get(DateTimeHelperService, new DateTimeHelperService());
    }
    /**
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.dateTags = [
            {
                id: 'tag1',
                text: this.localeService.getValue('filterPanel.last1Month')
            },
            {
                id: 'tag2',
                text: this.localeService.getValue('filterPanel.last3Month')
            },
            {
                id: 'tag3',
                text: this.localeService.getValue('filterPanel.last6Month')
            }
        ];
        this.dayTags = [
            {
                id: 'yesterday',
                text: this.localeService.getValue('filterPanel.yesterday')
            },
            {
                id: 'today',
                text: this.localeService.getValue('filterPanel.today')
            }
        ];
        if (this.field.control) {
            var _a = this.field.control, showTime = _a.showTime, showType = _a.showType, single = _a.single;
            if (this.field.value) {
                var _b = this.field.value, value = _b.value, begin = _b.begin, end = _b.end;
                this.value = value,
                    this.beginValue = begin;
                this.endValue = end;
            }
            this.showTime = showTime;
            this.showType = showType;
            this.single = single;
            /** @type {?} */
            var itemDateFormat = this.field.control.dateFormat;
            if (this.showTime && itemDateFormat) {
                if (itemDateFormat.length > 0 && itemDateFormat.indexOf('HH:mm') == -1) {
                    itemDateFormat = itemDateFormat + ' HH:mm:ss';
                }
            }
            else {
                itemDateFormat = this.showTime ? 'yyyy-MM-dd HH:mm:ss' : (this.showType == '2' ? 'yyyy-MM' : (this.showType == '3' ? 'yyyy' : 'yyyy-MM-dd'));
            }
            this.dateFormat = itemDateFormat;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.onDateChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.beginValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.endValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.valueChange.emit({ field: this.field.code, value: { begin: this.beginValue, end: this.endValue, single: false } });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.onSingleChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.single = !$event;
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
        this.cd.detectChanges();
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.clickTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        this.activedDateTagId = tag.id;
        /** @type {?} */
        var tagDate;
        if (tag.id == 'tag1') {
            tagDate = this.getLastNumMonth(1, this.showTime, this.showType);
        }
        else if (tag.id == 'tag2') {
            tagDate = this.getLastNumMonth(3, this.showTime, this.showType);
        }
        else if (tag.id == 'tag3') {
            tagDate = this.getLastNumMonth(6, this.showTime, this.showType);
        }
        this.beginValue = tagDate['startTime'];
        this.endValue = tagDate['endTime'];
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, begin: this.beginValue, end: this.endValue, single: this.single } });
        this.cd.detectChanges();
    };
    /**
     * @param {?} tag
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.clickDayTag = /**
     * @param {?} tag
     * @return {?}
     */
    function (tag) {
        this.activedDayTagId = tag.id;
        /** @type {?} */
        var dayTag = this.getToday(this.activedDayTagId, this.showTime);
        this.value = dayTag;
        this.valueChange.emit({ field: this.field.code, value: { value: this.value, single: true } });
    };
    /**
     * @private
     * @param {?} num
     * @param {?} showtime
     * @param {?} type
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.getLastNumMonth = /**
     * @private
     * @param {?} num
     * @param {?} showtime
     * @param {?} type
     * @return {?}
     */
    function (num, showtime, type) {
        /** @type {?} */
        var now = new Date();
        /** @type {?} */
        var year = now.getFullYear();
        /** @type {?} */
        var month = now.getMonth() + 1;
        //0-11表示1-12月
        /** @type {?} */
        var day = now.getDate();
        /** @type {?} */
        var hour = now.getHours();
        /** @type {?} */
        var min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
            : new Date().getMinutes();
        /** @type {?} */
        var sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
            : new Date().getSeconds();
        /** @type {?} */
        var dateObj = {};
        /** @type {?} */
        var time = hour + ':' + min + ':' + sec;
        // dateObj['endTime'] = year + '-' + month + '-' + day;
        /** @type {?} */
        var endMonth = month < 10 ? '0' + month : month;
        /** @type {?} */
        var endDay = day < 10 ? '0' + day : day;
        if (type == '2') {
            dateObj['endTime'] = year + '-' + endMonth;
        }
        else if (type == '3') {
            dateObj['endTime'] = year;
        }
        else {
            dateObj['endTime'] = year + '-' + endMonth + '-' + endDay;
        }
        /** @type {?} */
        var nowMonthDay = new Date(year, month, 0).getDate();
        //当前月的总天数
        /** @type {?} */
        var dYear;
        /** @type {?} */
        var dMouth;
        /** @type {?} */
        var dDay;
        if (month - num <= 0) { //如果是1、2、3月，年数往前推一年
            //如果是1、2、3月，年数往前推一年
            /** @type {?} */
            var lastMonthDay = new Date((year - 1), (12 - (num - month)), 0).getDate();
            if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                // dateObj['startTime'] = (year - 1) + '-' + (12 - (num - month)) + '-' + lastMonthDay;
                dYear = year - 1;
                dMouth = 12 - (num - month);
                dDay = lastMonthDay;
            }
            else {
                dYear = year - 1;
                dMouth = 12 - (num - month);
                dDay = day;
                // dateObj['startTime']= (year - 1) + '-' + (12 - (num - month)) + '-' + day;
            }
        }
        else {
            /** @type {?} */
            var lastMonthDay = new Date(year, (month - num), 0).getDate();
            if (lastMonthDay < day) { //3个月前所在月的总天数小于现在的天日期
                if (day < nowMonthDay) { //当前天日期小于当前月总天数,2月份比较特殊的月份
                    // dateObj['startTime'] = year + '-' + (month - num) + '-' + (lastMonthDay - (nowMonthDay - day));
                    dYear = year;
                    dMouth = month - num;
                    dDay = lastMonthDay - (nowMonthDay - day);
                }
                else {
                    dYear = year;
                    dMouth = month - num;
                    dDay = lastMonthDay;
                    // dateObj['startTime'] = year + '-' + (month - num) + '-' + lastMonthDay;
                }
            }
            else {
                dYear = year;
                dMouth = month - num;
                dDay = day;
                // dateObj['startTime'] = year + '-' + (month - num) + '-' + day;
            }
        }
        dMouth = dMouth < 10 ? '0' + dMouth : dMouth;
        dDay = dDay < 10 ? '0' + dDay : dDay;
        if (type == '2') {
            dateObj['startTime'] = dYear + '-' + dMouth;
        }
        else if (type == '3') {
            dateObj['startTime'] = dYear;
        }
        else {
            dateObj['startTime'] = dYear + '-' + dMouth + '-' + dDay;
        }
        if (showtime) {
            dateObj['endTime'] = dateObj['endTime'] + ' ' + time;
            dateObj['startTime'] = dateObj['startTime'] + ' ' + time;
        }
        return dateObj;
    };
    /**
     * @private
     * @param {?=} dayTags
     * @param {?=} showtime
     * @return {?}
     */
    SearchFieldFlexibleDateComponent.prototype.getToday = /**
     * @private
     * @param {?=} dayTags
     * @param {?=} showtime
     * @return {?}
     */
    function (dayTags, showtime) {
        if (dayTags === void 0) { dayTags = 'today'; }
        /** @type {?} */
        var now = new Date();
        if (dayTags == 'today') {
            return this.dateHelp.formatTo(now, this.dateFormat);
        }
        else if (dayTags == 'yesterday') {
            return this.dateHelp.formatTo(this.dateHelp.subDays(now, 1), this.dateFormat);
        }
        /*
        let year = now.getFullYear();
        let month = now.getMonth() + 1;//0-11表示1-12月
        let day = now.getDate();
        let hour = now.getHours();
        let min = now.getMinutes() < 10 ? '0' + new Date().getMinutes()
            :new Date().getMinutes();
        let sec = new Date().getSeconds() < 10 ? '0' + new Date().getSeconds()
            :new Date().getSeconds();
        const time = hour + ':' + min + ':' + sec;
        let yesterday = new Date();
        yesterday.setTime(now.getTime()-24*60*60*1000);
        let yesterdayObj = yesterday.getFullYear()+"-" + (yesterday.getMonth()+1) + "-" + yesterday.getDate();
        let dateObj = year + '-' + month + '-' + day;
        if(showtime){
            dateObj = dateObj + ' ' + time;
            yesterdayObj = yesterdayObj + ' ' + time;
        }
        if(dayTags == 'today') return dateObj;
        else if (dayTags == 'yesterday') return yesterdayObj;

        */
    };
    SearchFieldFlexibleDateComponent.decorators = [
        { type: Component, args: [{
                    selector: 'search-filed-editor-date',
                    template: "\r\n<div class=\"f-panel-filter-tip\">\r\n    <span class=\"panel-filter-tip-text\">{{ 'filterPanel.intervalFilter' | locale }}</span>\r\n    <farris-switch size=\"small\" [checked]=\"!single\" (valueChange)=\"onSingleChange($event)\"></farris-switch>\r\n</div>\r\n\r\n<div class=\"f-panel-filter-content\">\r\n    <ng-container *ngIf=\"single; else elseTemplate\">\r\n        <ng-container *ngIf=\"showTime; else singleDefaultdate\">\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n             (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showTime]=\"showTime\" #datepicker></farris-datepicker>\r\n        </ng-container>\r\n        <ng-template #singleDefaultdate>\r\n            <farris-datepicker [(ngModel)]=\"value\" [editable]=\"false\" [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n            [dateFormat]=\"dateFormat\" (valueChange)=\"onDateChange($event)\" [placeholder]=\"placeholder\" [showType]=\"showType\" #datepicker></farris-datepicker>\r\n        </ng-template>\r\n    </ng-container>\r\n    <ng-template #elseTemplate>\r\n        <div class=\"d-flex align-items-center\">\r\n            <ng-container *ngIf=\"showTime;else startDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" [dateFormat]=\"dateFormat\"\r\n                 (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showTime]=\"showTime\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #startDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"beginValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" [dateFormat]=\"dateFormat\" \r\n                (valueChange)=\"beginValueChange($event)\" [placeholder]=\"beginPlaceHolder\" [showType]=\"showType\" [maxDate]=\"endValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n            <span class=\"f-icon f-icon-orientation-arrow mx-2\"></span>\r\n            <ng-container *ngIf=\"showTime;else endDefaultdate\">\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" [returnFormat]=\"'yyyy-MM-dd HH:mm:ss'\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showTime]=\"showTime\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-container>\r\n            <ng-template #endDefaultdate>\r\n                <farris-datepicker [(ngModel)]=\"endValue\" [editable]=\"false\" \r\n                [returnFormat]=\"showType == '2'? 'yyyy-MM': (showType == '3'? 'yyyy':'yyyy-MM-dd')\" \r\n                [dateFormat]=\"dateFormat\" (valueChange)=\"endValueChange($event)\" [placeholder]=\"endPlaceHolder\" [showType]=\"showType\" [minDate]=\"beginValue\" #datepicker></farris-datepicker>\r\n            </ng-template>\r\n        </div>\r\n    </ng-template>\r\n\r\n</div>\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"!single && showType !== '3'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let tag of dateTags\" (click)=\"clickTag(tag)\" \r\n    [ngClass]=\"{'active': tag.id == activedDateTagId}\">\r\n        {{tag.text}}\r\n    </div>\r\n</div>\r\n\r\n<div class=\"f-filter-panel-date-tags\" *ngIf=\"single && showType !== '3' && showType !== '2'\">\r\n    <div class=\"panel-date-tag\" *ngFor=\"let day of dayTags\" (click)=\"clickDayTag(day)\" [ngClass]=\"{'active': day.id == activedDayTagId}\">\r\n        {{day.text}}\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SearchFieldFlexibleDateComponent.ctorParameters = function () { return [
        { type: LocaleService },
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    SearchFieldFlexibleDateComponent.propDecorators = {
        field: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return SearchFieldFlexibleDateComponent;
}());
export { SearchFieldFlexibleDateComponent };
if (false) {
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.field;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.valueChange;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.single;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.dateFormat;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.showTime;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.value;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.beginValue;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.endValue;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.showType;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.placeholder;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.endPlaceHolder;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.beginPlaceHolder;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.activedDateTagId;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.activedDayTagId;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.dateTags;
    /** @type {?} */
    SearchFieldFlexibleDateComponent.prototype.dayTags;
    /**
     * @type {?}
     * @private
     */
    SearchFieldFlexibleDateComponent.prototype.dateHelp;
    /**
     * @type {?}
     * @private
     */
    SearchFieldFlexibleDateComponent.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    SearchFieldFlexibleDateComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldFlexibleDateComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,