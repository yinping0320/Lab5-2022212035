/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, ChangeDetectorRef, Component, ElementRef, Injector, Input, Output } from '@angular/core';
var SearchFieldEditorBooleanComponent = /** @class */ (function () {
    function SearchFieldEditorBooleanComponent(injector, cd, el) {
        this.injector = injector;
        this.cd = cd;
        this.el = el;
        this.radioDataSource = [];
        this.selectedValue = undefined;
        this.valueChange = new EventEmitter();
        this._radioElements = [];
    }
    /**
     * @return {?}
     */
    SearchFieldEditorBooleanComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.field) {
            if (this.field.control) {
                this.radioDataSource = this.field.control.enumValues || [];
            }
            if (this.field.value) {
                this.selectedValue = this.field.value.value;
            }
        }
    };
    /**
     * @return {?}
     */
    SearchFieldEditorBooleanComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedValue !== null && this.selectedValue !== undefined) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
            /** @type {?} */
            var radioEl = this._radioElements.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.value == _this.selectedValue; }));
            if (radioEl) {
                radioEl.checked = true;
            }
        }
    };
    /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    SearchFieldEditorBooleanComponent.prototype.onRadioClicked = /**
     * @param {?} $event
     * @param {?} value
     * @return {?}
     */
    function ($event, value) {
        this.selectedValue = value;
        /** @type {?} */
        var radioInputRel = $event.target.querySelector('input');
        // radioInputRel && radioInputRel.setAttribute('checked', true);
        if (radioInputRel) {
            this.clearChecked();
            radioInputRel.checked = true;
            this.cd.detectChanges();
        }
        this.valueChange.emit({ field: this.field.code, value: { value: this.selectedValue, single: true } });
    };
    /**
     * @private
     * @return {?}
     */
    SearchFieldEditorBooleanComponent.prototype.clearChecked = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this._radioElements || !this._radioElements.length) {
            this._radioElements = Array.from(this.el.nativeElement.querySelectorAll('input'));
        }
        this._radioElements.forEach((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            // r.removeAttribute('checked');
            r.checked = false;
        }));
    };
    SearchFieldEditorBooleanComponent.decorators = [
        { type: Component, args: [{
                    selector: 'search-field-editor-bool',
                    template: "<div class=\"f-filter-panel-radiogroup\">\r\n    <div class=\"panel-radiogroup-item\" \r\n    [ngClass]=\"{'panel-radiogroup-item-active': selectedValue == item.value}\"\r\n    *ngFor=\"let item of radioDataSource\"\r\n    (click)=\"onRadioClicked($event, item.value)\"\r\n    >\r\n        \r\n\r\n        <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" name=\"{{field.code}}\" id=\"{{'search_radio_' + item.value}}\" type=\"radio\" [attr.value]=\"item.value\">\r\n            <label class=\"custom-control-label\" for=\"{{'search_radio_' + item.value}}\">{{item.name}}</label>\r\n        </div>\r\n\r\n\r\n    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SearchFieldEditorBooleanComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: ElementRef }
    ]; };
    SearchFieldEditorBooleanComponent.propDecorators = {
        field: [{ type: Input }],
        valueChange: [{ type: Output }]
    };
    return SearchFieldEditorBooleanComponent;
}());
export { SearchFieldEditorBooleanComponent };
if (false) {
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.field;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.radioDataSource;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.selectedValue;
    /** @type {?} */
    SearchFieldEditorBooleanComponent.prototype.valueChange;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype._radioElements;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    SearchFieldEditorBooleanComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLWVkaXRvci1ib29sZWFuLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktc2VhcmNoLWJveC8iLCJzb3VyY2VzIjpbImxpYi9zZWFyY2gtZmllbGRzL2VkaXRvcnMvYm9vbGVhbi9zZWFyY2gtZWRpdG9yLWJvb2xlYW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLGlCQUFpQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBRXZJO0lBY0ksMkNBQW9CLFFBQWtCLEVBQVUsRUFBcUIsRUFBVSxFQUFjO1FBQXpFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUFVLE9BQUUsR0FBRixFQUFFLENBQVk7UUFON0Ysb0JBQWUsR0FBRyxFQUFFLENBQUM7UUFDckIsa0JBQWEsR0FBRyxTQUFTLENBQUM7UUFFaEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ25DLG1CQUFjLEdBQUcsRUFBRSxDQUFDO0lBRXFFLENBQUM7Ozs7SUFFbEcsb0RBQVE7OztJQUFSO1FBQ0ksSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRTtnQkFDcEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDO2FBQzlEO1lBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRTtnQkFDbEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUM7YUFDL0M7U0FDSjtJQUNMLENBQUM7Ozs7SUFFRCwyREFBZTs7O0lBQWY7UUFBQSxpQkFRQztRQVBHLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7WUFDakUsSUFBSSxDQUFDLGNBQWMsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7O2dCQUM1RSxPQUFPLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsS0FBSyxJQUFJLEtBQUksQ0FBQyxhQUFhLEVBQTdCLENBQTZCLEVBQUM7WUFDNUUsSUFBSSxPQUFPLEVBQUU7Z0JBQ1QsT0FBTyxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUM7YUFDMUI7U0FDSjtJQUNMLENBQUM7Ozs7OztJQUVELDBEQUFjOzs7OztJQUFkLFVBQWUsTUFBTSxFQUFFLEtBQUs7UUFDeEIsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7O1lBQ3JCLGFBQWEsR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUM7UUFDMUQsZ0VBQWdFO1FBQ2hFLElBQUksYUFBYSxFQUFFO1lBQ2YsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3BCLGFBQWEsQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQzdCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDM0I7UUFFRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRyxLQUFLLEVBQUUsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLENBQUM7Ozs7O0lBRU8sd0RBQVk7Ozs7SUFBcEI7UUFDSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFO1lBQ3JELElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1NBQ3JGO1FBQ0QsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQyxDQUFNO1lBQy9CLGdDQUFnQztZQUNoQyxDQUFDLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztRQUN0QixDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTNESixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsNHNCQUFxRDtpQkFDeEQ7Ozs7Z0JBTGdFLFFBQVE7Z0JBQWxELGlCQUFpQjtnQkFBYSxVQUFVOzs7d0JBUTFELEtBQUs7OEJBS0wsTUFBTTs7SUFpRFgsd0NBQUM7Q0FBQSxBQTVERCxJQTREQztTQXhEWSxpQ0FBaUM7OztJQUUxQyxrREFBb0I7O0lBRXBCLDREQUFxQjs7SUFDckIsMERBQTBCOztJQUUxQix3REFBMkM7Ozs7O0lBQzNDLDJEQUE0Qjs7Ozs7SUFFaEIscURBQTBCOzs7OztJQUFFLCtDQUE2Qjs7Ozs7SUFBRSwrQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzZWFyY2gtZmllbGQtZWRpdG9yLWJvb2wnLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NlYXJjaC1lZGl0b3ItYm9vbGVhbi5jb21wb25lbnQuaHRtbCdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlYXJjaEZpZWxkRWRpdG9yQm9vbGVhbkNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcblxyXG4gICAgQElucHV0KCkgZmllbGQ6IGFueTtcclxuXHJcbiAgICByYWRpb0RhdGFTb3VyY2UgPSBbXTtcclxuICAgIHNlbGVjdGVkVmFsdWUgPSB1bmRlZmluZWQ7XHJcblxyXG4gICAgQE91dHB1dCgpIHZhbHVlQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgcHJpdmF0ZSBfcmFkaW9FbGVtZW50cyA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZmllbGQpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGQuY29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yYWRpb0RhdGFTb3VyY2UgPSB0aGlzLmZpZWxkLmNvbnRyb2wuZW51bVZhbHVlcyB8fCBbXTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZmllbGQudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZSA9IHRoaXMuZmllbGQudmFsdWUudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkVmFsdWUgIT09IG51bGwgJiYgdGhpcy5zZWxlY3RlZFZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmFkaW9FbGVtZW50cyA9IEFycmF5LmZyb20odGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpO1xyXG4gICAgICAgICAgICBjb25zdCByYWRpb0VsID0gdGhpcy5fcmFkaW9FbGVtZW50cy5maW5kKG4gPT4gbi52YWx1ZSA9PSB0aGlzLnNlbGVjdGVkVmFsdWUpO1xyXG4gICAgICAgICAgICBpZiAocmFkaW9FbCkge1xyXG4gICAgICAgICAgICAgICAgcmFkaW9FbC5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBvblJhZGlvQ2xpY2tlZCgkZXZlbnQsIHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgY29uc3QgcmFkaW9JbnB1dFJlbCA9ICRldmVudC50YXJnZXQucXVlcnlTZWxlY3RvcignaW5wdXQnKTtcclxuICAgICAgICAvLyByYWRpb0lucHV0UmVsICYmIHJhZGlvSW5wdXRSZWwuc2V0QXR0cmlidXRlKCdjaGVja2VkJywgdHJ1ZSk7XHJcbiAgICAgICAgaWYgKHJhZGlvSW5wdXRSZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckNoZWNrZWQoKTtcclxuICAgICAgICAgICAgcmFkaW9JbnB1dFJlbC5jaGVja2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQoeyBmaWVsZDogdGhpcy5maWVsZC5jb2RlLCAgdmFsdWU6IHt2YWx1ZTogdGhpcy5zZWxlY3RlZFZhbHVlLCBzaW5nbGU6IHRydWV9IH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgY2xlYXJDaGVja2VkKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fcmFkaW9FbGVtZW50cyB8fCAhdGhpcy5fcmFkaW9FbGVtZW50cy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5fcmFkaW9FbGVtZW50cyA9IEFycmF5LmZyb20odGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ2lucHV0JykpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9yYWRpb0VsZW1lbnRzLmZvckVhY2goKHI6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAvLyByLnJlbW92ZUF0dHJpYnV0ZSgnY2hlY2tlZCcpO1xyXG4gICAgICAgICAgICByLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSJdfQ==