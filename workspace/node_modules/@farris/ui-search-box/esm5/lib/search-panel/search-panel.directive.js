/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ComponentFactoryResolver, Directive, EventEmitter, HostListener, Injector, Input, NgZone, Output, Renderer2 } from '@angular/core';
import { reqAnimFrame } from '@farris/ui-common';
import { InputGroupComponent } from '@farris/ui-input-group';
import { debounceTime } from 'rxjs/operators';
import { SearchBoxComponent } from '../search-box.component';
import { trim } from 'lodash-es';
import { SearchPanelComponent } from './search-panel.component';
var SearchPanelDirective = /** @class */ (function () {
    function SearchPanelDirective(injector, ngzone, render, inputRef, searchBoxRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.searchBoxRef = searchBoxRef;
        this.cfr = cfr;
        this.maxFields = 5;
        /**
         * 启用 任意字段
         */
        this.useAnyField = true;
        this.escHandler = new EventEmitter();
        this.maxPanelItems = 10;
        this.minPanelWidth = 270;
    }
    /**
     * @return {?}
     */
    SearchPanelDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SearchPanelDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if ((!this.fields || !this.fields.length) && !this.useAnyField) {
            return;
        }
        this.inputRef.inputClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            e.stopPropagation();
        }));
        this.inputRef.valueChange.pipe(debounceTime(50)).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (trim(val)) {
                // 值变化显示查询面板
                if (!_this.panelElement) {
                    _this.createDataPanel();
                    _this.searchPanelRef.instance.setActiveItem(0);
                }
                _this.searchPanelRef.instance.setValue(val);
            }
            else {
                if (_this.panelElement) {
                    _this.hide();
                }
            }
        }));
        this.searchBoxRef.clear.subscribe((/**
         * @return {?}
         */
        function () {
            _this.hide();
        }));
    };
    /**
     * @return {?}
     */
    SearchPanelDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.searchBoxRef.overLayService.destory(this.searchBoxRef.el.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    SearchPanelDirective.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
        if (this.searchPanelRef) {
            this.searchPanelRef.destroy();
            this.searchPanelRef = null;
        }
    };
    /**
     * @param {?=} e
     * @return {?}
     */
    SearchPanelDirective.prototype.hide = /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            _this.inputRef.value = '';
            if (_this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    _this.removePanelElement();
                }
                else {
                    _this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.removePanelElement();
                    }), 120);
                }
                _this.searchBoxRef.overLayService.destory(_this.searchBoxRef.el.nativeElement);
            }
        }));
    };
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    SearchPanelDirective.prototype.setPanelPosition = /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    function (updateTopPosition) {
        if (updateTopPosition === void 0) { updateTopPosition = true; }
        if (this.panelElement) {
            var _a = this.getPanelSize(), maxWidth = _a.maxWidth, left = _a.left, top_1 = _a.top, height = _a.height;
            this.panelElement.style.minWidth = this.minPanelWidth + "px";
            this.panelElement.style.maxWidth = maxWidth + "px";
            this.panelElement.style.maxHeight = height + "px";
            if (updateTopPosition) {
                this.panelElement.style.top = top_1 + "px";
            }
            this.panelElement.style.left = left + "px";
        }
    };
    /**
     * @private
     * @return {?}
     */
    SearchPanelDirective.prototype.createDataPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-search-box-panel', 'f-area-hide');
        /** @type {?} */
        var zindex = '' + this.searchBoxRef.commonUtils.getFloatingLayerIndex();
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        this.panelElement.style.zIndex = zindex;
        this.panelElement.style.overflow = 'hidden';
        // 创建数据展示组件
        /** @type {?} */
        var cmpFact = this.cfr.resolveComponentFactory(SearchPanelComponent);
        this.searchPanelRef = cmpFact.create(this.injector);
        if (this.useAnyField && !this.fields.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.code === '*'; }))) {
            /** @type {?} */
            var anyfieldsName = this.searchBoxRef.localeSer.getValue('searchbox.anyFields');
            this.fields.splice(0, 0, { code: '*', name: anyfieldsName });
        }
        this.searchPanelRef.instance.fields = this.fields;
        this.panelElement.appendChild(this.searchPanelRef.location.nativeElement);
        this.searchPanelRef.changeDetectorRef.detectChanges();
        this.searchPanelRef.instance.searchKeyWord = this.inputRef.value;
        this.searchPanelRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var data = e.data;
            _this.selectItem(data);
        }));
        this.searchPanelRef.instance.closepanel.subscribe((/**
         * @return {?}
         */
        function () {
            _this.hide();
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.searchBoxRef.overLayService.registerMouseEvent(this.searchBoxRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.panelElement || e.target['closest']('.f-search-box-panel')) {
                return;
            }
            if (_this.inputRef && _this.inputRef.textbox.nativeElement === e.target) {
                return false;
            }
            // 输入框内有文本时，如果不允许关闭弹出面板，可放开
            // if (this.inputRef.value) {
            //     return;
            // }
            _this.hide(e);
        }));
        if (this.searchPanelRef.instance.fields.length + 1 < this.maxPanelItems) {
            /** @type {?} */
            var newHeight = this.searchPanelRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 40;
            this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = newHeight + "px";
            if (this.panelElement) {
                if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                    this.panelElement.style.top = this.getInputSizeInfo().top - newHeight - 5 + "px";
                }
                this.panelElement.style.height = 'auto';
            }
        }
        else {
            this.searchPanelRef.instance.itemsContainer.nativeElement.style.height = '100%';
            if (this.panelElement) {
                this.render.removeStyle(this.panelElement, 'height');
            }
        }
        this.panelElement.classList.add('f-area-show');
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    SearchPanelDirective.prototype.selectItem = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (!data) {
            return;
        }
        this.searchBoxRef.select(tslib_1.__assign({}, data, { value: this.inputRef.value }));
        this.hide();
        this.inputRef.focus();
    };
    /**
     * @private
     * @return {?}
     */
    SearchPanelDirective.prototype.calculationPanelHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return this.maxPanelItems * 30 + 15;
    };
    /**
     * @private
     * @return {?}
     */
    SearchPanelDirective.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.searchBoxRef.enableFloat ? this.searchBoxRef.shadowBox : this.searchBoxRef.container;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    SearchPanelDirective.prototype.getPanelSize = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.getInputSizeInfo(), width = _a.width, height = _a.height, top = _a.top, left = _a.left;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        /** @type {?} */
        var panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var _width = width < this.minPanelWidth ? this.minPanelWidth : width;
        if (window.innerWidth - left < _width) {
            left = left + width - _width;
        }
        return { width: _width, top: top, height: panelHeight, left: left, maxWidth: Math.floor(window.innerWidth - left - 10) };
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SearchPanelDirective.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        /** @type {?} */
        var rows = this.fields;
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
            if (this.searchPanelRef) {
                /** @type {?} */
                var idx = this.searchPanelRef.instance.activeIndex;
                /** @type {?} */
                var setActiveItem = (/**
                 * @param {?} index
                 * @return {?}
                 */
                function (index) {
                    _this.searchPanelRef.instance.setActiveItem(index);
                });
                if ($event.code === 'ArrowUp') { // up
                    if (idx > -1) {
                        /** @type {?} */
                        var prevIdx = idx - 1;
                        if (prevIdx < 0) {
                            prevIdx = rows.length - 1;
                        }
                        setActiveItem(prevIdx);
                    }
                    else {
                        setActiveItem(rows.length - 1);
                    }
                }
                if ($event.code === 'ArrowDown') { // down
                    // down
                    /** @type {?} */
                    var nextIdx = idx + 1;
                    if (nextIdx >= rows.length) {
                        nextIdx = 0;
                    }
                    setActiveItem(nextIdx);
                }
            }
        }
        if ($event.code === 'Backspace') {
            if (!this.inputRef.value) {
                if (this.searchBoxRef.displayTextList && this.searchBoxRef.displayTextList.length) {
                    $event.preventDefault();
                    $event.stopPropagation();
                    /** @type {?} */
                    var removeItem = this.searchBoxRef.displayTextList[this.searchBoxRef.displayTextList.length - 1];
                    if (removeItem) {
                        this.searchBoxRef.remove(removeItem.code);
                        if (this.searchPanelRef) {
                            this.searchPanelRef.changeDetectorRef.detectChanges();
                        }
                    }
                }
            }
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length && this.panelElement) {
                /** @type {?} */
                var idx = this.searchPanelRef.instance.activeIndex;
                /** @type {?} */
                var data = rows[idx];
                this.selectItem(data);
            }
            else {
                this.searchBoxRef.onSubmit($event);
            }
        }
        if ($event.key === 'Escape') {
            if (this.panelElement) {
                this.hide();
            }
            else {
                this.escHandler.emit();
            }
        }
    };
    SearchPanelDirective.decorators = [
        { type: Directive, args: [{ selector: '[search-box-panel]' },] }
    ];
    /** @nocollapse */
    SearchPanelDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: InputGroupComponent },
        { type: SearchBoxComponent },
        { type: ComponentFactoryResolver }
    ]; };
    SearchPanelDirective.propDecorators = {
        fields: [{ type: Input, args: ['search-box-panel',] }],
        maxFields: [{ type: Input }],
        useAnyField: [{ type: Input }],
        escHandler: [{ type: Output }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return SearchPanelDirective;
}());
export { SearchPanelDirective };
if (false) {
    /** @type {?} */
    SearchPanelDirective.prototype.fields;
    /** @type {?} */
    SearchPanelDirective.prototype.maxFields;
    /**
     * 启用 任意字段
     * @type {?}
     */
    SearchPanelDirective.prototype.useAnyField;
    /** @type {?} */
    SearchPanelDirective.prototype.escHandler;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.searchPanelRef;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.maxPanelItems;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.minPanelWidth;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.searchBoxRef;
    /**
     * @type {?}
     * @private
     */
    SearchPanelDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,