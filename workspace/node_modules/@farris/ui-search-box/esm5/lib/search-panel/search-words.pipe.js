/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injector, Pipe } from '@angular/core';
import { SearchBoxComponent } from '../search-box.component';
var SearchWordPipe = /** @class */ (function () {
    function SearchWordPipe(injector, searchBoxRef) {
        this.injector = injector;
        this.searchBoxRef = searchBoxRef;
    }
    /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    SearchWordPipe.prototype.transform = /**
     * @param {?} value
     * @param {...?} args
     * @return {?}
     */
    function (value) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (value !== undefined && value !== null) {
            /** @type {?} */
            var relationStr_1 = this.searchBoxRef.localeSer.getValue('searchbox.relation.or');
            /** @type {?} */
            var arr_1 = value.trim().split(' ').filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.trim(); }));
            return arr_1.map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                return n + (i === arr_1.length - 1 ? '' : '<span class="text-muted" style="margin: 0 5px;"> ' + relationStr_1 + ' </span>');
            })).join('');
        }
        return '';
    };
    SearchWordPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'searchwords'
                },] }
    ];
    /** @nocollapse */
    SearchWordPipe.ctorParameters = function () { return [
        { type: Injector },
        { type: SearchBoxComponent }
    ]; };
    return SearchWordPipe;
}());
export { SearchWordPipe };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SearchWordPipe.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SearchWordPipe.prototype.searchBoxRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VhcmNoLXdvcmRzLnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNlYXJjaC1ib3gvIiwic291cmNlcyI6WyJsaWIvc2VhcmNoLXBhbmVsL3NlYXJjaC13b3Jkcy5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFN0Q7SUFNSSx3QkFBb0IsUUFBa0IsRUFBVyxZQUFnQztRQUE3RCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVcsaUJBQVksR0FBWixZQUFZLENBQW9CO0lBQUksQ0FBQzs7Ozs7O0lBRXRGLGtDQUFTOzs7OztJQUFULFVBQVUsS0FBVTtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQsNkJBQWM7O1FBQ2hDLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFOztnQkFDakMsYUFBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQzs7Z0JBQzNFLEtBQUcsR0FBRyxLQUFLLENBQUMsSUFBSSxFQUFFLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7WUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEVBQUUsRUFBUixDQUFRLEVBQUM7WUFDekQsT0FBTyxLQUFHLENBQUMsR0FBRzs7Ozs7WUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNoQixPQUFPLENBQUMsR0FBSyxDQUFDLENBQUMsS0FBSyxLQUFHLENBQUMsTUFBTSxHQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxtREFBbUQsR0FBRSxhQUFXLEdBQUUsVUFBVSxDQUFDLENBQUM7WUFDM0gsQ0FBQyxFQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1NBQ2Y7UUFFRCxPQUFPLEVBQUUsQ0FBQztJQUNkLENBQUM7O2dCQWxCSixJQUFJLFNBQUM7b0JBQ0YsSUFBSSxFQUFFLGFBQWE7aUJBQ3RCOzs7O2dCQUxRLFFBQVE7Z0JBQ1Isa0JBQWtCOztJQXFCM0IscUJBQUM7Q0FBQSxBQW5CRCxJQW1CQztTQWZZLGNBQWM7Ozs7OztJQUVYLGtDQUEwQjs7Ozs7SUFBRyxzQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciwgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTZWFyY2hCb3hDb21wb25lbnQgfSBmcm9tICcuLi9zZWFyY2gtYm94LmNvbXBvbmVudCc7XHJcblxyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAnc2VhcmNod29yZHMnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgU2VhcmNoV29yZFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgIHByaXZhdGUgc2VhcmNoQm94UmVmOiBTZWFyY2hCb3hDb21wb25lbnQsKSB7fVxyXG5cclxuICAgIHRyYW5zZm9ybSh2YWx1ZTogYW55LCAuLi5hcmdzOiBhbnlbXSk6IGFueSB7XHJcbiAgICAgICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgY29uc3QgcmVsYXRpb25TdHIgPSB0aGlzLnNlYXJjaEJveFJlZi5sb2NhbGVTZXIuZ2V0VmFsdWUoJ3NlYXJjaGJveC5yZWxhdGlvbi5vcicpO1xyXG4gICAgICAgICAgICBjb25zdCBhcnIgPSB2YWx1ZS50cmltKCkuc3BsaXQoJyAnKS5maWx0ZXIobiA9PiBuLnRyaW0oKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBhcnIubWFwKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbiAgKyAgKGkgPT09IGFyci5sZW5ndGggLTEgPyAnJyA6ICc8c3BhbiBjbGFzcz1cInRleHQtbXV0ZWRcIiBzdHlsZT1cIm1hcmdpbjogMCA1cHg7XCI+ICcrIHJlbGF0aW9uU3RyICsnIDwvc3Bhbj4nKTtcclxuICAgICAgICAgICAgfSkuam9pbignJyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcbn0iXX0=