/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
export class AvatarHtmlPipe {
    /**
     * @param {?} item
     * @return {?}
     */
    transform(item) {
        /** @type {?} */
        let str = item['name'];
        if (str) {
            return str.substring(str.length - 2, str.length);
        }
        else {
            return '';
        }
    }
}
AvatarHtmlPipe.decorators = [
    { type: Pipe, args: [{ name: 'avatarHtml' },] }
];
export class GetOrgTextPipe {
    /**
     * @param {?} item
     * @param {?} orgs
     * @return {?}
     */
    transform(item, orgs) {
        /** @type {?} */
        let str = item['orgId'];
        if (orgs && orgs.length) {
            /** @type {?} */
            let sec = orgs.find((/**
             * @param {?} org
             * @return {?}
             */
            org => {
                return org['id'] == str;
            }));
            /** @type {?} */
            let orgtext = '';
            if (sec) {
                if (sec['parentId'] != '') {
                    /** @type {?} */
                    let par = orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    org => {
                        return org['id'] == sec['parentId'];
                    }));
                    orgtext = par ? `${par.name}/${sec['name']}` : sec['name'];
                }
                else {
                    orgtext = sec['name'];
                }
            }
            return orgtext;
        }
        else {
            return '';
        }
    }
}
GetOrgTextPipe.decorators = [
    { type: Pipe, args: [{ name: 'getOrgText' },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbFR5cGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvZGlzY3Vzc2lvbi1ncm91cC8iLCJzb3VyY2VzIjpbImxpYi9waXBlL2NvbnRyb2xUeXBlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLE1BQU0sZUFBZSxDQUFDO0FBR3BELE1BQU0sT0FBTyxjQUFjOzs7OztJQUN2QixTQUFTLENBQUMsSUFBUTs7WUFDVixHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUN0QixJQUFHLEdBQUcsRUFBQztZQUNILE9BQU8sR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsTUFBTSxHQUFDLENBQUMsRUFBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDakQ7YUFDRztZQUNBLE9BQU8sRUFBRSxDQUFDO1NBQ2I7SUFDTCxDQUFDOzs7WUFWSixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFDOztBQWMxQixNQUFNLE9BQU8sY0FBYzs7Ozs7O0lBQ3ZCLFNBQVMsQ0FBQyxJQUFRLEVBQUUsSUFBVzs7WUFDdkIsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdkIsSUFBRyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBQzs7Z0JBQ2YsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJOzs7O1lBQUMsR0FBRyxDQUFDLEVBQUU7Z0JBQ3RCLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQztZQUM1QixDQUFDLEVBQUM7O2dCQUNFLE9BQU8sR0FBRyxFQUFFO1lBQ2hCLElBQUcsR0FBRyxFQUFDO2dCQUNILElBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsRUFBQzs7d0JBQ2pCLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSTs7OztvQkFBQyxHQUFHLENBQUMsRUFBRTt3QkFDdEIsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUN4QyxDQUFDLEVBQUM7b0JBQ0YsT0FBTyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxHQUFHLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQzVEO3FCQUNHO29CQUNBLE9BQU8sR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3pCO2FBQ0o7WUFDRCxPQUFPLE9BQU8sQ0FBQztTQUNsQjthQUNJO1lBQ0QsT0FBTyxFQUFFLENBQUM7U0FDYjtJQUNMLENBQUM7OztZQXpCSixJQUFJLFNBQUMsRUFBQyxJQUFJLEVBQUUsWUFBWSxFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQFBpcGUoe25hbWU6ICdhdmF0YXJIdG1sJ30pXHJcbmV4cG9ydCBjbGFzcyBBdmF0YXJIdG1sUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKGl0ZW06YW55KTogc3RyaW5nIHtcclxuICAgICAgICBsZXQgc3RyID0gaXRlbVsnbmFtZSddO1xyXG4gICAgICAgIGlmKHN0cil7XHJcbiAgICAgICAgICAgIHJldHVybiBzdHIuc3Vic3RyaW5nKHN0ci5sZW5ndGgtMixzdHIubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZXtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuQFBpcGUoe25hbWU6ICdnZXRPcmdUZXh0J30pXHJcbmV4cG9ydCBjbGFzcyBHZXRPcmdUZXh0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG4gICAgdHJhbnNmb3JtKGl0ZW06YW55LCBvcmdzOiBhbnlbXSk6IHN0cmluZyB7XHJcbiAgICAgICAgbGV0IHN0ciA9IGl0ZW1bJ29yZ0lkJ107XHJcbiAgICAgICAgaWYob3JncyAmJiBvcmdzLmxlbmd0aCl7XHJcbiAgICAgICAgICAgIGxldCBzZWMgPSBvcmdzLmZpbmQob3JnID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcmdbJ2lkJ10gPT0gc3RyO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgbGV0IG9yZ3RleHQgPSAnJztcclxuICAgICAgICAgICAgaWYoc2VjKXtcclxuICAgICAgICAgICAgICAgIGlmKHNlY1sncGFyZW50SWQnXSAhPSAnJyl7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhciA9IG9yZ3MuZmluZChvcmcgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3JnWydpZCddID09IHNlY1sncGFyZW50SWQnXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBvcmd0ZXh0ID0gcGFyID8gYCR7cGFyLm5hbWV9LyR7c2VjWyduYW1lJ119YDpzZWNbJ25hbWUnXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2V7XHJcbiAgICAgICAgICAgICAgICAgICAgb3JndGV4dCA9IHNlY1snbmFtZSddO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvcmd0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=