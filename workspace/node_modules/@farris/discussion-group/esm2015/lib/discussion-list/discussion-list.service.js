/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
export class DiscussionListService {
    constructor() {
        this.resultDiscussion = new BehaviorSubject(null);
    }
    ;
    /**
     * @param {?} data
     * @return {?}
     */
    resetData(data) {
        /** @type {?} */
        let results = [];
        if (data && data.commentIds && data.commentIds.length) {
            data.commentIds.forEach((/**
             * @param {?} commentId
             * @return {?}
             */
            commentId => {
                /** @type {?} */
                const item = data['comments'].find((/**
                 * @param {?} comment
                 * @return {?}
                 */
                (comment) => {
                    return comment["id"] === commentId;
                }));
                if (item) {
                    /** @type {?} */
                    let id = item["id"];
                    /** @type {?} */
                    let userId = item["userId"];
                    /** @type {?} */
                    let userName = item['user']["name"];
                    /** @type {?} */
                    let 
                    //  imgData = item['user']["imgData"],
                    imgData = item['user'].hasOwnProperty('imgData') ? item['user']["imgData"] : '';
                    /** @type {?} */
                    let commentDate = item["commentDate"];
                    /** @type {?} */
                    let 
                    //  commentDate = this.dataFormate(item["commentDate"]),
                    text = item["text"];
                    /** @type {?} */
                    let attachFiles = item.hasOwnProperty('attachFiles') ? item["attachFiles"] : [];
                    /** @type {?} */
                    let parentData;
                    if (item.hasOwnProperty('parentId')) {
                        /** @type {?} */
                        let parentItem = data['comments'].find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        i => {
                            return i.id === item.parentId;
                        }));
                        if (parentItem) {
                            /** @type {?} */
                            let parid = parentItem["id"];
                            /** @type {?} */
                            let paruserId = parentItem["userId"];
                            /** @type {?} */
                            let paruserName = parentItem['user']["name"];
                            /** @type {?} */
                            let 
                            // parimgData = parentItem['user']["imgData"],
                            parimgData = parentItem['user'].hasOwnProperty('imgData') ? parentItem['user']["imgData"] : '';
                            /** @type {?} */
                            let parcommentDate = parentItem["commentDate"];
                            /** @type {?} */
                            let partext = parentItem["text"];
                            /** @type {?} */
                            let parattachFiles = parentItem.hasOwnProperty('attachFiles') ? parentItem["attachFiles"] : [];
                            parentData = {
                                id: parid,
                                userId: paruserId,
                                userName: paruserName,
                                imgData: parimgData,
                                commentDate: parcommentDate,
                                text: partext,
                                attachFiles: parattachFiles
                            };
                        }
                    }
                    /** @type {?} */
                    let thisData = {
                        id,
                        userId,
                        userName,
                        imgData,
                        commentDate,
                        text,
                        attachFiles,
                        parentData
                    };
                    results.push(thisData);
                }
                else {
                    return;
                }
            }));
        }
        // this.resultDiscussion = results;
        this.resultDiscussion.next(results);
    }
    /**
     * @return {?}
     */
    getData() {
        return this.resultDiscussion;
    }
}
DiscussionListService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DiscussionListService.ctorParameters = () => [];
if (false) {
    /** @type {?} */
    DiscussionListService.prototype.resultDiscussion;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,