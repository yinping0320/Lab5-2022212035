/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input } from '@angular/core';
import { DiscussionListService } from './discussion-list.service';
var DiscussionListDirective = /** @class */ (function () {
    function DiscussionListDirective(discussionListService) {
        this.discussionListService = discussionListService;
        // private comments=[];
        // @Input('discussionListData') 
        // set discussionListData(datas){
        //     if(datas){
        //         this.discussionListService.resetData(datas);
        //         this.comments=[...datas];
        //     }
        // };
        // get discussionListData(){
        //     return this.comments;
        // }
        this._discussionListData = [];
    }
    Object.defineProperty(DiscussionListDirective.prototype, "discussionListData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._discussionListData;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._discussionListData = data;
                this.discussionListService.resetData(data);
                // this.comments=[...data];
            }
        },
        enumerable: true,
        configurable: true
    });
    DiscussionListDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fDiscussionList]'
                },] }
    ];
    /** @nocollapse */
    DiscussionListDirective.ctorParameters = function () { return [
        { type: DiscussionListService }
    ]; };
    DiscussionListDirective.propDecorators = {
        discussionListData: [{ type: Input }]
    };
    return DiscussionListDirective;
}());
export { DiscussionListDirective };
if (false) {
    /** @type {?} */
    DiscussionListDirective.prototype._discussionListData;
    /**
     * @type {?}
     * @private
     */
    DiscussionListDirective.prototype.discussionListService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlzY3Vzc2lvbkxpc3QuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9kaXNjdXNzaW9uLWdyb3VwLyIsInNvdXJjZXMiOlsibGliL2Rpc2N1c3Npb24tbGlzdC9kaXNjdXNzaW9uTGlzdC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR2pELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBRWxFO0lBNkJJLGlDQUFvQixxQkFBMkM7UUFBM0MsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFzQjs7Ozs7Ozs7Ozs7O1FBYi9ELHdCQUFtQixHQUFHLEVBQUUsQ0FBQztJQWN6QixDQUFDO0lBYkQsc0JBQ0ksdURBQWtCOzs7O1FBT3RCO1lBQ0UsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUM7UUFDbEMsQ0FBQzs7Ozs7UUFWRCxVQUN1QixJQUFJO1lBQ3pCLElBQUcsSUFBSSxFQUFDO2dCQUNOLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUM7Z0JBQ2hDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQzNDLDJCQUEyQjthQUM1QjtRQUNILENBQUM7OztPQUFBOztnQkF4QkosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7aUJBQ2hDOzs7O2dCQUpRLHFCQUFxQjs7O3FDQW1CekIsS0FBSzs7SUFjViw4QkFBQztDQUFBLEFBL0JELElBK0JDO1NBNUJZLHVCQUF1Qjs7O0lBYWhDLHNEQUF5Qjs7Ozs7SUFhYix3REFBbUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IGRpc2N1c3Npb25Db25maWcgfSBmcm9tICcuL2Rpc2N1c3Npb25MaXN0LmludGVyZmFjZSc7XHJcbmltcG9ydCB7IERpc2N1c3Npb25MaXN0U2VydmljZSB9IGZyb20gJy4vZGlzY3Vzc2lvbi1saXN0LnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmRGlzY3Vzc2lvbkxpc3RdJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRGlzY3Vzc2lvbkxpc3REaXJlY3RpdmUge1xyXG4gICAgLy8gcHJpdmF0ZSBjb21tZW50cz1bXTtcclxuICAgIC8vIEBJbnB1dCgnZGlzY3Vzc2lvbkxpc3REYXRhJykgXHJcbiAgICAvLyBzZXQgZGlzY3Vzc2lvbkxpc3REYXRhKGRhdGFzKXtcclxuICAgIC8vICAgICBpZihkYXRhcyl7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuZGlzY3Vzc2lvbkxpc3RTZXJ2aWNlLnJlc2V0RGF0YShkYXRhcyk7XHJcbiAgICAvLyAgICAgICAgIHRoaXMuY29tbWVudHM9Wy4uLmRhdGFzXTtcclxuICAgIC8vICAgICB9XHJcbiAgICAvLyB9O1xyXG4gICAgLy8gZ2V0IGRpc2N1c3Npb25MaXN0RGF0YSgpe1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmNvbW1lbnRzO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIF9kaXNjdXNzaW9uTGlzdERhdGEgPSBbXTtcclxuICAgIEBJbnB1dCgpIFxyXG4gICAgc2V0IGRpc2N1c3Npb25MaXN0RGF0YShkYXRhKSB7XHJcbiAgICAgIGlmKGRhdGEpe1xyXG4gICAgICAgIHRoaXMuX2Rpc2N1c3Npb25MaXN0RGF0YSA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5kaXNjdXNzaW9uTGlzdFNlcnZpY2UucmVzZXREYXRhKGRhdGEpO1xyXG4gICAgICAgIC8vIHRoaXMuY29tbWVudHM9Wy4uLmRhdGFdO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBnZXQgZGlzY3Vzc2lvbkxpc3REYXRhKCl7XHJcbiAgICAgIHJldHVybiB0aGlzLl9kaXNjdXNzaW9uTGlzdERhdGE7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkaXNjdXNzaW9uTGlzdFNlcnZpY2U6RGlzY3Vzc2lvbkxpc3RTZXJ2aWNlKSB7XHJcbiAgICB9XHJcbn0iXX0=