/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
var DiscussionListService = /** @class */ (function () {
    function DiscussionListService() {
        this.resultDiscussion = new BehaviorSubject(null);
    }
    ;
    /**
     * @param {?} data
     * @return {?}
     */
    DiscussionListService.prototype.resetData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var results = [];
        if (data && data.commentIds && data.commentIds.length) {
            data.commentIds.forEach((/**
             * @param {?} commentId
             * @return {?}
             */
            function (commentId) {
                /** @type {?} */
                var item = data['comments'].find((/**
                 * @param {?} comment
                 * @return {?}
                 */
                function (comment) {
                    return comment["id"] === commentId;
                }));
                if (item) {
                    /** @type {?} */
                    var id = item["id"];
                    /** @type {?} */
                    var userId = item["userId"];
                    /** @type {?} */
                    var userName = item['user']["name"];
                    /** @type {?} */
                    var 
                    //  imgData = item['user']["imgData"],
                    imgData = item['user'].hasOwnProperty('imgData') ? item['user']["imgData"] : '';
                    /** @type {?} */
                    var commentDate = item["commentDate"];
                    /** @type {?} */
                    var 
                    //  commentDate = this.dataFormate(item["commentDate"]),
                    text = item["text"];
                    /** @type {?} */
                    var attachFiles = item.hasOwnProperty('attachFiles') ? item["attachFiles"] : [];
                    /** @type {?} */
                    var parentData = void 0;
                    if (item.hasOwnProperty('parentId')) {
                        /** @type {?} */
                        var parentItem = data['comments'].find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        function (i) {
                            return i.id === item.parentId;
                        }));
                        if (parentItem) {
                            /** @type {?} */
                            var parid = parentItem["id"];
                            /** @type {?} */
                            var paruserId = parentItem["userId"];
                            /** @type {?} */
                            var paruserName = parentItem['user']["name"];
                            /** @type {?} */
                            var 
                            // parimgData = parentItem['user']["imgData"],
                            parimgData = parentItem['user'].hasOwnProperty('imgData') ? parentItem['user']["imgData"] : '';
                            /** @type {?} */
                            var parcommentDate = parentItem["commentDate"];
                            /** @type {?} */
                            var partext = parentItem["text"];
                            /** @type {?} */
                            var parattachFiles = parentItem.hasOwnProperty('attachFiles') ? parentItem["attachFiles"] : [];
                            parentData = {
                                id: parid,
                                userId: paruserId,
                                userName: paruserName,
                                imgData: parimgData,
                                commentDate: parcommentDate,
                                text: partext,
                                attachFiles: parattachFiles
                            };
                        }
                    }
                    /** @type {?} */
                    var thisData = {
                        id: id,
                        userId: userId,
                        userName: userName,
                        imgData: imgData,
                        commentDate: commentDate,
                        text: text,
                        attachFiles: attachFiles,
                        parentData: parentData
                    };
                    results.push(thisData);
                }
                else {
                    return;
                }
            }));
        }
        // this.resultDiscussion = results;
        this.resultDiscussion.next(results);
    };
    /**
     * @return {?}
     */
    DiscussionListService.prototype.getData = /**
     * @return {?}
     */
    function () {
        return this.resultDiscussion;
    };
    DiscussionListService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DiscussionListService.ctorParameters = function () { return []; };
    return DiscussionListService;
}());
export { DiscussionListService };
if (false) {
    /** @type {?} */
    DiscussionListService.prototype.resultDiscussion;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,