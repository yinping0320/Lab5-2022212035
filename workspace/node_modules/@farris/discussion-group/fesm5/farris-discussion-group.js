import { __spread, __assign } from 'tslib';
import { BehaviorSubject, of, forkJoin, Subject } from 'rxjs';
import { debounceTime } from 'rxjs/operators';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { DomSanitizer } from '@angular/platform-browser';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { WEBAPI_PREFIX_TOKEN, FarrisCommonModule } from '@farris/ui-common';
import { DateHelperModule } from '@farris/ui-common/date';
import { TreeModule } from '@farris/ui-tree';
import { ModalModule, BsModalService } from '@farris/ui-modal';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { ComponentLoaderFactory } from '@farris/ui-modal/component-loader';
import { PositioningService } from '@farris/ui-modal/positioning';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { PaginationModule } from '@farris/ui-pagination';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { InputGroupModule } from '@farris/ui-input-group';
import { HttpClient, HttpClientModule } from '@angular/common/http';
import { Injectable, Directive, Input, Component, Output, EventEmitter, ViewChild, ViewEncapsulation, NgModule, Pipe, defineInjectable, Renderer2, ElementRef, NgZone, ChangeDetectorRef, Injector } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionGroupService = /** @class */ (function () {
    function DiscussionGroupService() {
    }
    DiscussionGroupService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DiscussionGroupService.ctorParameters = function () { return []; };
    /** @nocollapse */ DiscussionGroupService.ngInjectableDef = defineInjectable({ factory: function DiscussionGroupService_Factory() { return new DiscussionGroupService(); }, token: DiscussionGroupService, providedIn: "root" });
    return DiscussionGroupService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionListService = /** @class */ (function () {
    function DiscussionListService() {
        this.resultDiscussion = new BehaviorSubject(null);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    DiscussionListService.prototype.resetData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var results = [];
        if (data && data.commentIds && data.commentIds.length) {
            data.commentIds.forEach((/**
             * @param {?} commentId
             * @return {?}
             */
            function (commentId) {
                /** @type {?} */
                var item = data['comments'].find((/**
                 * @param {?} comment
                 * @return {?}
                 */
                function (comment) {
                    return comment["id"] === commentId;
                }));
                if (item) {
                    /** @type {?} */
                    var id = item["id"];
                    /** @type {?} */
                    var userId = item["userId"];
                    /** @type {?} */
                    var userName = item['user']["name"];
                    /** @type {?} */
                    var 
                    //  imgData = item['user']["imgData"],
                    imgData = item['user'].hasOwnProperty('imgData') ? item['user']["imgData"] : '';
                    /** @type {?} */
                    var commentDate = item["commentDate"];
                    /** @type {?} */
                    var 
                    //  commentDate = this.dataFormate(item["commentDate"]),
                    text = item["text"];
                    /** @type {?} */
                    var attachFiles = item.hasOwnProperty('attachFiles') ? item["attachFiles"] : [];
                    /** @type {?} */
                    var parentData = void 0;
                    if (item.hasOwnProperty('parentId')) {
                        /** @type {?} */
                        var parentItem = data['comments'].find((/**
                         * @param {?} i
                         * @return {?}
                         */
                        function (i) {
                            return i.id === item.parentId;
                        }));
                        if (parentItem) {
                            /** @type {?} */
                            var parid = parentItem["id"];
                            /** @type {?} */
                            var paruserId = parentItem["userId"];
                            /** @type {?} */
                            var paruserName = parentItem['user']["name"];
                            /** @type {?} */
                            var 
                            // parimgData = parentItem['user']["imgData"],
                            parimgData = parentItem['user'].hasOwnProperty('imgData') ? parentItem['user']["imgData"] : '';
                            /** @type {?} */
                            var parcommentDate = parentItem["commentDate"];
                            /** @type {?} */
                            var partext = parentItem["text"];
                            /** @type {?} */
                            var parattachFiles = parentItem.hasOwnProperty('attachFiles') ? parentItem["attachFiles"] : [];
                            parentData = {
                                id: parid,
                                userId: paruserId,
                                userName: paruserName,
                                imgData: parimgData,
                                commentDate: parcommentDate,
                                text: partext,
                                attachFiles: parattachFiles
                            };
                        }
                    }
                    /** @type {?} */
                    var thisData = {
                        id: id,
                        userId: userId,
                        userName: userName,
                        imgData: imgData,
                        commentDate: commentDate,
                        text: text,
                        attachFiles: attachFiles,
                        parentData: parentData
                    };
                    results.push(thisData);
                }
                else {
                    return;
                }
            }));
        }
        // this.resultDiscussion = results;
        this.resultDiscussion.next(results);
    };
    /**
     * @return {?}
     */
    DiscussionListService.prototype.getData = /**
     * @return {?}
     */
    function () {
        return this.resultDiscussion;
    };
    DiscussionListService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DiscussionListService.ctorParameters = function () { return []; };
    return DiscussionListService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionListComponent = /** @class */ (function () {
    function DiscussionListComponent(discussionListService) {
        this.discussionListService = discussionListService;
        // @Input() personnelsPrimaryKey: string = 'userId';
        this.personnelsDisplayKey = 'userName';
        this.pagerOnServer = true;
        /* *是否支持分页 */
        this.supportPaging = true;
        /**  总页数 */
        // @Input() pageSize:number;
        /**
         * 当前页码
         */
        this.pageIndex = 1;
        /**  每页显示条数选项 */
        // private _pageList = [10,20,30,50];
        // get pageList() {
        //     return this._pageList;
        // }
        // @Input() set pageList(val) {
        //     this._pageList = val;
        //     if (this.pager) {
        //         this.pager.setPageList(val);
        //     }
        // }
        /**
         * 总条数
         */
        this._total = 0;
        /**
         * 每页显示个数
         */
        this._pageSize = 10;
        /**  总条数 */
        // @Input() total = 0;
        /**
         * 评论数据
         */
        this.innerDiscussionData = [];
        this._discussionData = [];
        this.replyMessage = new EventEmitter();
        // 分页事件
        this.pageChanged = new EventEmitter();
        this.pageSizeChanged = new EventEmitter();
        /**
         * 附件预览
         */
        this.filePreview = new EventEmitter();
        /**
         * 附件下载
         */
        this.fileDownload = new EventEmitter();
        this.labels = {
            previousLabel: ' ',
            nextLabel: ' '
        };
        this.directionLinks = true;
        this.maxSize = 7;
        this.responsive = true;
        this.autoHide = false;
    }
    Object.defineProperty(DiscussionListComponent.prototype, "total", {
        get: /**
         * @return {?}
         */
        function () {
            return this._total;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._total = val;
            // this.paginationOptions.totalItems = val;
            this.initPaginationOptions();
            // if(val){
            //   this.initPaginationOptions();
            // }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscussionListComponent.prototype, "pageSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._pageSize;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._pageSize = val;
            // this.paginationOptions.itemsPerPage = val;
            this.initPaginationOptions();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscussionListComponent.prototype, "discussionData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._discussionData;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._discussionData = val;
                this.innerDiscussionData = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DiscussionListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // this.paginationOptions = {
        //   id: 'Farris-discussion-Pagination',
        //   itemsPerPage: this.pageSize,
        //   currentPage: this.pageIndex,
        //   // pageList: this.pageList,
        //   totalItems: this.total
        // };
        this.initPaginationOptions();
        /** 监听指令得到的数据 */
        this.discussionListService.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data && !_this._discussionData.length) {
                _this.innerDiscussionData = data;
            }
        }));
    };
    /**
     * @return {?}
     */
    DiscussionListComponent.prototype.initPaginationOptions = /**
     * @return {?}
     */
    function () {
        this.paginationOptions = {
            id: 'Farris-discussion-Pagination',
            itemsPerPage: this._pageSize,
            currentPage: this.pageIndex,
            pageList: [10, 20, 30, 50, 100],
            totalItems: this._total,
            remote: this.pagerOnServer
        };
    };
    /** 点击回复留言 */
    /**
     * 点击回复留言
     * @param {?} item
     * @return {?}
     */
    DiscussionListComponent.prototype.reply = /**
     * 点击回复留言
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.replyMessage.emit(item);
    };
    /** 页码变化 */
    /**
     * 页码变化
     * @param {?} page
     * @return {?}
     */
    DiscussionListComponent.prototype.onPageChange = /**
     * 页码变化
     * @param {?} page
     * @return {?}
     */
    function (page) {
        if (this.pageIndex !== page.pageIndex) {
            this.pageIndex = page.pageIndex;
            this.paginationOptions.currentPage = page.pageIndex;
            this.pageChanged.emit({ pageInfo: page });
        }
    };
    /** 每页显示条数变化 */
    /**
     * 每页显示条数变化
     * @param {?} pageSize
     * @return {?}
     */
    DiscussionListComponent.prototype.onPageSizeChange = /**
     * 每页显示条数变化
     * @param {?} pageSize
     * @return {?}
     */
    function (pageSize) {
        if (this.pageSize !== pageSize && this.total) {
            this.paginationOptions.itemsPerPage = pageSize;
            this.pageSize = pageSize;
            /** @type {?} */
            var total = this.total;
            /** @type {?} */
            var pageLength = Math.floor(total / pageSize);
            if (total % pageSize > 0) {
                pageLength += 1;
            }
            if (pageLength && this.pageIndex > pageLength) {
                this.pageIndex = pageLength;
                this.paginationOptions.currentPage = this.pageIndex;
            }
            this.pageSizeChanged.emit({ pageInfo: { pageIndex: this.pageIndex, pageSize: pageSize } });
        }
    };
    /** 附件预览 */
    /**
     * 附件预览
     * @param {?} info
     * @return {?}
     */
    DiscussionListComponent.prototype.filePreviewEventHandler = /**
     * 附件预览
     * @param {?} info
     * @return {?}
     */
    function (info) {
        this.filePreview.emit(info);
    };
    /** 附件下载 */
    /**
     * 附件下载
     * @param {?} info
     * @return {?}
     */
    DiscussionListComponent.prototype.fileDownloadEventHandler = /**
     * 附件下载
     * @param {?} info
     * @return {?}
     */
    function (info) {
        this.fileDownload.emit(info);
    };
    /** 占位头像文字 */
    /**
     * 占位头像文字
     * @param {?} item
     * @return {?}
     */
    DiscussionListComponent.prototype.getAvatar = /**
     * 占位头像文字
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.personnelsDisplayKey]) {
            /** @type {?} */
            var str = item[this.personnelsDisplayKey];
            return str.substring(str.length - 2, str.length);
        }
        else {
            return '';
        }
    };
    DiscussionListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-discussion-list',
                    template: "<div class=\"f-discussion-group-content\">\r\n    <div class=\"f-discussion-group-content-item\" *ngFor=\"let item of (supportPaging ? (innerDiscussionData | paginate: paginationOptions) : innerDiscussionData)\">\r\n        <div class=\"discussion-item-avatar\">\r\n            <img [src]=\"item.imgData\" alt=\"\" class=\"discussion-item-avatar-img\" *ngIf=\"item.imgData\">\r\n            <div class=\"discussion-item-avatar-tip\" *ngIf=\"!item.imgData\" [innerHTML]=\"getAvatar(item)\"></div>\r\n        </div>\r\n        <div class=\"discussion-item-inner\">\r\n            <div class=\"discussion-item-username\">\r\n                {{item[personnelsDisplayKey]}}\r\n            </div>\r\n            <div class=\"discussion-item-text\">\r\n                <span class=\"discussion-item-text-message\" [innerHTML]=\"item.text | safeHtml\"></span>\r\n                <!-- <span class=\"discussion-item-text-about\" *ngIf=\"item.messageAbout\">@{{item.messageAbout}}</span> -->\r\n            </div>\r\n            <div class=\"discussion-item-text-reply\" *ngIf=\"item.parentData\">\r\n                <span class=\"discussion-item-text-reply-title\">\r\n                    {{ 'discussionGroup.reply' | locale }}\r\n                    <span class=\"discussion-item-text-reply-name\">{{item.parentData[personnelsDisplayKey]}}</span>\uFF1A\r\n                </span>\r\n                <span class=\"discussion-item-text-reply-content\" [innerHTML]=\"item.parentData.text | safeHtml\">\r\n                </span>\r\n            </div>\r\n            <!-- \u9644\u4EF6\u5217\u8868 <div class=\"discussion-item-files\" *ngIf=\"item.attachFiles && item.attachFiles.length\">\r\n                <f-file-preview class=\"d-flex flex-wrap\" [itemCls]=\"'demo-view-item'\" [fileInfos]=\"item.attachFiles\"\r\n                    (filePreviewEvent)=\"filePreviewEventHandler($event)\" (fileDownloadEvent)=\"fileDownloadEventHandler($event)\"\r\n                    #filePreview>\r\n                    <ng-template filePreviewListTypeTemplate let-data let-readonly=\"readonly\">\r\n                        <div class=\"ffilepreview--item-detail\">\r\n                            <div class=\"ffilepreview--item-icon\">\r\n                                <span class=\"ffilepreview--filetype-icon\" [ngClass]=\"filePreview.getFileTypeClassName(data.name)\"></span>\r\n                            </div>\r\n                            <div class=\"ffilepreview--item-content\">\r\n                                <a class=\"item-content--title\" [title]=\"data.name\"\r\n                                    (click)=\"filePreview.filePreviewHandler($event,data)\">{{data.name}}</a>\r\n                                <div class=\"item-content--toolbar f-text-light\">\r\n                                    <button class=\"btn btn-link\" (click)=\"filePreview.filePreviewHandler($event,data)\">\r\n                                    <span class=\"f-icon f-icon-preview\"></span>\u9884\u89C8\r\n                                    </button>\r\n                                    <button class=\"btn btn-link\" (click)=\"filePreview.fileDownloadHandler($event,data)\">\r\n                                    <span class=\"f-icon f-icon-download\"></span>\u4E0B\u8F7D\r\n                                    </button>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                    </ng-template>\r\n                </f-file-preview>\r\n            </div> -->\r\n            <div class=\"discussion-item-footer\">\r\n                <div class=\"discussion-item-time\">\r\n                    <span class=\"discussion-item-time-text\">{{item.commentDate | dateformat:'yyyy-MM-dd HH:mm'}}</span>\r\n                </div>\r\n                <div class=\"discussion-item-btns\">\r\n                    <span class=\"discussion-item-btns-start\" (click)=\"reply(item)\">\r\n                        <span class=\"f-icon f-icon-message\"></span>\r\n                        <span class=\"discussion-item-btns-start-text\">\r\n                            {{ 'discussionGroup.reply' | locale }}\r\n                        </span>\r\n                    </span>\r\n                    <!-- <span class=\"discussion-item-btns-new\">\r\n                        <span class=\"f-icon f-icon-star-outline\"></span>\r\n                    </span> -->\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <div class=\"f-discussion-group-footer\" *ngIf=\"supportPaging\">\r\n        <pagination-controls #pager \r\n            [id]=\"paginationOptions.id\" \r\n            [maxSize]=\"maxSize\" \r\n            [directionLinks]=\"directionLinks\"\r\n            [autoHide]=\"autoHide\" \r\n            [responsive]=\"responsive\" \r\n            [previousLabel]=\"labels.previousLabel\"\r\n            [nextLabel]=\"labels.nextLabel\"\r\n            (pageChange)=\"onPageChange($event)\"\r\n            (pageSizeChange)=\"onPageSizeChange($event)\"\r\n            [showPageList]=\"false\"\r\n        >\r\n        </pagination-controls>\r\n    </div>\r\n</div>",
                    encapsulation: ViewEncapsulation.None,
                    styles: [".f-discussion-group-content-item{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;margin-bottom:14px}.f-discussion-group-content-item .discussion-item-avatar{width:32px;height:32px;margin-right:10px;overflow:hidden;cursor:pointer;flex-shrink:0}.f-discussion-group-content-item .discussion-item-avatar-img{display:block;width:32px;height:32px;border-radius:50%}.f-discussion-group-content-item .discussion-item-avatar-tip{width:32px;height:32px;font-size:12px;color:#fff;text-align:center;line-height:32px;border-radius:50%;background-color:#4796ff}.f-discussion-group-content-item .discussion-item-inner{flex-shrink:1;-webkit-box-flex:1;flex-grow:1;flex-basis:0;padding-bottom:14px;border-bottom:1px solid #e3e3e3;overflow:hidden}.f-discussion-group-content-item .discussion-item-inner .discussion-item-username{margin-bottom:4px;font-size:16px;color:rgba(0,0,0,.85)}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text{font-size:14px;color:rgba(0,0,0,.75)}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text .discussion-item-text-message{word-break:break-all}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text-reply{margin-top:11px;padding:6px 8px;font-size:0;background:#f5f5f5;border-radius:2px}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text-reply-content,.f-discussion-group-content-item .discussion-item-inner .discussion-item-text-reply-title{font-size:14px;color:rgba(0,0,0,.75);line-height:20px}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text-reply-title .discussion-item-text-reply-name{color:#3487e3}.f-discussion-group-content-item .discussion-item-inner .discussion-item-text-reply-content{word-break:break-all}.f-discussion-group-content-item .discussion-item-inner .discussion-item-files{margin-top:11px}.f-discussion-group-content-item .discussion-item-inner .discussion-item-files .ffilepreview--filetype-icon{width:40px;height:40px}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer{margin-top:10px;padding-right:20px;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;-webkit-box-pack:justify;justify-content:space-between}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-time{font-size:14px;color:#b1b6c2}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;position:relative;cursor:pointer}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start .f-icon{color:rgba(0,0,0,.45);font-size:16px}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start .f-icon::before{vertical-align:bottom}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start .discussion-item-btns-start-text{margin-left:14px;font-size:14px;color:rgba(0,0,0,.45)}.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start:hover .discussion-item-btns-start-text,.f-discussion-group-content-item .discussion-item-inner .discussion-item-footer .discussion-item-btns .discussion-item-btns-start:hover .f-icon{color:#3487e3}.f-discussion-group-content-item:last-child .discussion-item-inner{border-bottom:none}"]
                }] }
    ];
    /** @nocollapse */
    DiscussionListComponent.ctorParameters = function () { return [
        { type: DiscussionListService }
    ]; };
    DiscussionListComponent.propDecorators = {
        personnelsDisplayKey: [{ type: Input }],
        pagerOnServer: [{ type: Input }],
        supportPaging: [{ type: Input }],
        pageIndex: [{ type: Input }],
        total: [{ type: Input }],
        pageSize: [{ type: Input }],
        discussionData: [{ type: Input }],
        replyMessage: [{ type: Output }],
        pageChanged: [{ type: Output }],
        pageSizeChanged: [{ type: Output }],
        filePreview: [{ type: Output }],
        fileDownload: [{ type: Output }],
        pager: [{ type: ViewChild, args: ['pager',] }]
    };
    return DiscussionListComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var MsgInfo = {
    Cancel: 0,
    Confirm: 1,
};
MsgInfo[MsgInfo.Cancel] = 'Cancel';
MsgInfo[MsgInfo.Confirm] = 'Confirm';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionEditorComponent = /** @class */ (function () {
    function DiscussionEditorComponent(renderer, elementRef, cd, notifyService, injector, http) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.cd = cd;
        this.notifyService = notifyService;
        this.injector = injector;
        this.http = http;
        this.personnelsPrimaryKey = 'id';
        this.personnelsDisplayKey = 'name';
        this.replyPersonnelsDisplayKey = 'userName';
        // @Input() personnels: Array<any> = [];
        // @Input() permissionList: Array<any> = [
        //     { value: 'ALL', text: this.localeService.getValue('discussionGroup.all') },
        //     { value: 'RELATED', text: this.localeService.getValue('discussionGroup.related') }
        // ];
        this.cancelVisible = true;
        this.editHeight = 130;
        this.type = 'user';
        // 人事弹窗列表数据
        this._personnels = [];
        // 新建还是维护自定义角色
        // @Output() customGroupChange = new EventEmitter<any>();
        // 对外暴露数据
        this.selectionsChange = new EventEmitter();
        // 选中的行
        this.lineDataChange = new EventEmitter();
        // 对外
        this.valueChange = new EventEmitter();
        /**
         * 附件预览
         */
        this.filePreview = new EventEmitter();
        /**
         * 附件删除
         */
        this.fileRemove = new EventEmitter();
        this.fileUploadDone = new EventEmitter();
        this.personnelSearch = new EventEmitter();
        this.getOugUsers = new EventEmitter();
        // @ViewChild('searchInput') searchInput;
        // 审批意见
        this.textValue = '';
        // 暂存人员信息
        this.tempPersonnelsValue = '';
        // 暂存部门
        this.tempSectionValue = '';
        // 搜索人事管理弹窗
        this.personModalVisible = false;
        // 选择要发送的人员列表
        this.selectedPersonnels = [];
        // 选择要发送的部门
        this.selectedSection = [];
        // 暂存人员信息，用于搜索
        this.copyPersonnels = [];
        this.innerPersonnels = [];
        this.relativeVisible = false;
        //上传附件是否显示
        this.attachFilesModalVisible = false;
        this.pageSize = 20;
        this.searchPersonnelList = {};
        this.showSearchList = false;
        this.permissionList = [];
        this.groupIcon = '<span class="f-icon f-icon-search"></span>';
        this.localeService = this.injector.get(LocaleService);
    }
    Object.defineProperty(DiscussionEditorComponent.prototype, "personnels", {
        get: /**
         * @return {?}
         */
        function () {
            return this._personnels;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._personnels = val;
                this.innerPersonnels = this._personnels;
                this.copyPersonnels = this._personnels;
                // this.copyPersonnels = this._personnels;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscussionEditorComponent.prototype, "replyUser", {
        get: /**
         * @return {?}
         */
        function () {
            return this._replyUser;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._replyUser = val;
                if (this._replyUser['id']) {
                    this.editorFocus();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DiscussionEditorComponent.prototype, "attachFiles", {
        get: /**
         * @return {?}
         */
        function () {
            return this._attachFiles;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._attachFiles = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DiscussionEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        this.renderer.listen(document, 'click', (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            self.personModalVisible = false;
            self.relativeVisible = false;
        }));
        // this.copyPersonnels = this.personnels;
        this.el = this.elementRef.nativeElement;
        this.permissionList = [
            { value: 'ALL', text: this.localeService.getValue('discussionGroup.all') },
            { value: 'RELATED', text: this.localeService.getValue('discussionGroup.related') }
        ];
        this.permission = this.permissionList[0];
        this.options = { maxUploads: 3, maxFileSize: 10240, allowedContentTypes: ['.jpg', '.pdf'] };
        this.placeholder = this.localeService.getValue('discussionGroup.placeholder');
    };
    /**
     * 单个附件上传完成
     * @param ev
     */
    /**
     * 单个附件上传完成
     * @param {?} ev
     * @return {?}
     */
    DiscussionEditorComponent.prototype.fUploadDoneHandler = /**
     * 单个附件上传完成
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        this.fileUploadDone.emit(ev);
    };
    /**
     * 上传附件中单个附件删除完成
     * @param ev
     */
    /**
     * 上传附件中单个附件删除完成
     * @param {?} ev
     * @return {?}
     */
    DiscussionEditorComponent.prototype.fUploadRemovedHandler = /**
     * 上传附件中单个附件删除完成
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        // console.log('fUploadRemovedHandler');
        // console.log(ev);
    };
    /**附件列表中预览 */
    /**
     * 附件列表中预览
     * @param {?} info
     * @return {?}
     */
    DiscussionEditorComponent.prototype.filePreviewEventHandler = /**
     * 附件列表中预览
     * @param {?} info
     * @return {?}
     */
    function (info) {
        this.filePreview.emit(info);
    };
    /**附件列表中删除 */
    /**
     * 附件列表中删除
     * @param {?} file
     * @return {?}
     */
    DiscussionEditorComponent.prototype.fileRemoveEventHandler = /**
     * 附件列表中删除
     * @param {?} file
     * @return {?}
     */
    function (file) {
        this.fileRemove.emit(file);
    };
    // 文本框失去焦点触发
    // 文本框失去焦点触发
    /**
     * @param {?=} e
     * @return {?}
     */
    DiscussionEditorComponent.prototype.setTextValue = 
    // 文本框失去焦点触发
    /**
     * @param {?=} e
     * @return {?}
     */
    function (e) {
        if (e === void 0) { e = null; }
        if (e) {
            // console.log(e.target.innerHTML);
            this.tempTextValue = e.target.innerHTML;
            this.textValue = this.tempTextValue;
        }
        // if (this.tempTextValue) {
        //     this.textValue = this.tempTextValue
        // }
        if (this.tempPersonnelsValue) {
            this.textValue += this.tempPersonnelsValue;
        }
        if (this.tempSectionValue) {
            this.textValue += this.tempSectionValue;
        }
        this.tempTextValue = '';
        this.tempPersonnelsValue = '';
        this.tempSectionValue = '';
    };
    // 监听键盘事件, 主要是用于删除@人
    // 监听键盘事件, 主要是用于删除@人
    /**
     * @param {?} e
     * @return {?}
     */
    DiscussionEditorComponent.prototype.listenEditorValueChange = 
    // 监听键盘事件, 主要是用于删除@人
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.tempTextValue = e.target.innerHTML;
        /** @type {?} */
        var children = e.target.children;
        /** @type {?} */
        var childrenId = [];
        for (var i = 0; i < children.length; i++) {
            childrenId.push(children[i].id);
        }
        this.selectedPersonnels.forEach((/**
         * @param {?} personnel
         * @param {?} index
         * @return {?}
         */
        function (personnel, index) {
            if (!childrenId.includes(personnel[_this.personnelsPrimaryKey])) {
                _this.selectedPersonnels.splice(index, 1);
            }
        }));
        this.selectedSection.forEach((/**
         * @param {?} section
         * @param {?} index
         * @return {?}
         */
        function (section, index) {
            if (!childrenId.includes(section[_this.personnelsPrimaryKey])) {
                _this.selectedSection.splice(index, 1);
            }
        }));
        if (!this.tempTextValue) {
            this.tempTextValue = '';
        }
    };
    /**
     * 搜索人员
     */
    /**
     * 搜索人员
     * @return {?}
     */
    DiscussionEditorComponent.prototype.serachPersonnel = /**
     * 搜索人员
     * @return {?}
     */
    function () {
        var _this = this;
        // if (this.personnelText) {
        //     this.innerPersonnels = this.copyPersonnels.filter(item => {
        //         if(item[this.personnelsDisplayKey]){
        //             return item[this.personnelsDisplayKey].indexOf(this.personnelText) !== -1;
        //         }
        //     })
        // }
        // else {
        //     this.innerPersonnels = this.copyPersonnels;
        // }
        if (this.personnelText) {
            this.showSearchList = true;
            this.getSearchData(this.personnelText, 0).subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (d.hasOwnProperty("users")) {
                    _this.searchPersonnelList = d;
                    _this.setPersonModalPosition();
                }
            }));
        }
        else {
            this.showSearchList = false;
        }
        // this.searchInput.nativeElement.blur();
        //暂时注释掉服务器端查询
        // this.personnelSearch.emit(this.personnelText);
    };
    /**
     * 搜索下一页
     */
    /**
     * 搜索下一页
     * @return {?}
     */
    DiscussionEditorComponent.prototype.getMoreSearchData = /**
     * 搜索下一页
     * @return {?}
     */
    function () {
        var _this = this;
        this.getSearchData(this.personnelText, this.searchPersonnelList.pageIndex + 1).subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d.hasOwnProperty("users")) {
                _this.searchPersonnelList.pageIndex = d['pageIndex'];
                _this.searchPersonnelList['users'] = __spread(_this.searchPersonnelList['users'], d['users']);
            }
        }));
    };
    /**
     * @param {?} text
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    DiscussionEditorComponent.prototype.getSearchData = /**
     * @param {?} text
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    function (text, pageIndex, pageSize) {
        if (pageSize === void 0) { pageSize = this.pageSize; }
        if (this.personSearchUrl) {
            /** @type {?} */
            var url = this.personSearchUrl + "?param=" + text + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex;
            //console.log(url);
            return this.http.get(url);
            //return this.http.get('assets/data/discussionPerson3.json');
        }
        else {
            return of(true);
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    DiscussionEditorComponent.prototype.personnelChecked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        item.active = !item.active;
        this.innerPersonnels = this.innerPersonnels.map((/**
         * @param {?} o
         * @return {?}
         */
        function (o) { return (__assign({}, o)); }));
        this.cd.markForCheck();
        this.appendPersonnels();
    };
    // 增加@人员
    // 增加@人员
    /**
     * @return {?}
     */
    DiscussionEditorComponent.prototype.appendPersonnels = 
    // 增加@人员
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedList = [];
        if (!this.showSearchList) {
            selectedList = this.innerPersonnels.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.active === true; }));
        }
        else {
            selectedList = this.searchPersonnelList['users'].filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.active === true; }));
        }
        if (selectedList.length) {
            this.appendPersonnel(selectedList);
        }
        this.resetPersonnels();
        this.setTextValue();
        this.personModalVisible = false;
    };
    //高级搜索人员添加
    //高级搜索人员添加
    /**
     * @param {?} listData
     * @return {?}
     */
    DiscussionEditorComponent.prototype.appendPersonnelsList = 
    //高级搜索人员添加
    /**
     * @param {?} listData
     * @return {?}
     */
    function (listData) {
        if (listData.length) {
            this.appendPersonnel(listData, true);
        }
        this.setTextValue();
    };
    //循环增加人员
    //循环增加人员
    /**
     * @param {?} listData
     * @param {?=} external
     * @return {?}
     */
    DiscussionEditorComponent.prototype.appendPersonnel = 
    //循环增加人员
    /**
     * @param {?} listData
     * @param {?=} external
     * @return {?}
     */
    function (listData, external) {
        var _this = this;
        if (external === void 0) { external = false; }
        listData.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (_this.selectedPersonnels.length && _this._isInArray(item[_this.personnelsPrimaryKey], _this.personnelsPrimaryKey, _this.selectedPersonnels)) {
                return;
            }
            else {
                //if (!external) {
                _this.tempPersonnelsValue += '<a name="personnel" contenteditable="false" class="at-user" id="' + item[_this.personnelsPrimaryKey] + '" userid="' + item[_this.personnelsPrimaryKey] + '">@' + item[_this.personnelsDisplayKey] + '</a>&nbsp;';
                // }
                // else {
                //     this.tempPersonnelsValue += '<a name="personnel" contenteditable="false" class="at-user" id="' + item[this.personnelsPrimaryKey] + '" userid="' + item[this.personnelsPrimaryKey] + '">@' + item[this.replyPersonnelsDisplayKey] + '</a>';
                // }
                _this.selectedPersonnels.push(item);
            }
        }));
    };
    /**
     * 添加部门
     * @param listData
     */
    /**
     * 添加部门
     * @param {?} listData
     * @return {?}
     */
    DiscussionEditorComponent.prototype.appendSectionList = /**
     * 添加部门
     * @param {?} listData
     * @return {?}
     */
    function (listData) {
        if (listData.length) {
            this.appendSection(listData);
        }
        this.setTextValue();
    };
    /**
     * @param {?} listData
     * @return {?}
     */
    DiscussionEditorComponent.prototype.appendSection = /**
     * @param {?} listData
     * @return {?}
     */
    function (listData) {
        var _this = this;
        listData.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (_this.selectedSection.length && _this._isInArray(item[_this.personnelsPrimaryKey], _this.personnelsPrimaryKey, _this.selectedSection)) {
                return;
            }
            else {
                _this.tempSectionValue += '<a name="org" contenteditable="false" class="at-org" id="' + item[_this.personnelsPrimaryKey] + '" orgid="' + item[_this.personnelsPrimaryKey] + '">@' + item['name'] + '</a>&nbsp;';
                _this.selectedSection.push(item);
            }
        }));
    };
    // 判断是否在数组
    // 判断是否在数组
    /**
     * @private
     * @param {?} value
     * @param {?} fieldInArray
     * @param {?} array
     * @return {?}
     */
    DiscussionEditorComponent.prototype._isInArray = 
    // 判断是否在数组
    /**
     * @private
     * @param {?} value
     * @param {?} fieldInArray
     * @param {?} array
     * @return {?}
     */
    function (value, fieldInArray, array) {
        if (!value || !fieldInArray) {
            return false;
        }
        return array.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return value === item[fieldInArray]; })) === -1 ? false : true;
    };
    /**
     * 关闭人事管理弹窗
     */
    /**
     * 关闭人事管理弹窗
     * @return {?}
     */
    DiscussionEditorComponent.prototype.resetPersonnels = /**
     * 关闭人事管理弹窗
     * @return {?}
     */
    function () {
        this.showSearchList = false;
        this.personModalVisible = false;
        this.innerPersonnels = this.copyPersonnels;
        if (this.innerPersonnels.length) {
            this.innerPersonnels.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.active = false; }));
        }
        this.personnelText = '';
        // this.stopBubble(e);
    };
    /**
     * 打开人员管理
     * @param e 事件
     */
    /**
     * 打开人员管理
     * @param {?} e 事件
     * @return {?}
     */
    DiscussionEditorComponent.prototype.openModalPerson = /**
     * 打开人员管理
     * @param {?} e 事件
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.personModalVisible = !this.personModalVisible;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.personModalVisible) {
                _this.setPersonModalPosition();
            }
        }), 0);
        // this.getPersonnelList();
        this.stopBubble(e);
    };
    /**
     * @return {?}
     */
    DiscussionEditorComponent.prototype.setPersonModalPosition = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var winH = window.innerHeight;
        /** @type {?} */
        var ModalBottom = this.personModal.nativeElement.getBoundingClientRect().bottom;
        if (winH < ModalBottom) {
            this.personModal.nativeElement.scrollIntoView(false);
        }
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DiscussionEditorComponent.prototype.openModalPermission = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.relativeVisible = !this.relativeVisible;
        this.stopBubble(e);
    };
    /**
     * 打开上传附件
     */
    /**
     * 打开上传附件
     * @param {?} e
     * @return {?}
     */
    DiscussionEditorComponent.prototype.openModalFile = /**
     * 打开上传附件
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.attachFilesModalVisible = !this.attachFilesModalVisible;
        this.stopBubble(e);
    };
    // 阻止冒泡
    // 阻止冒泡
    /**
     * @param {?} e
     * @return {?}
     */
    DiscussionEditorComponent.prototype.stopBubble = 
    // 阻止冒泡
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e && e.stopPropagation) {
            e.stopPropagation();
        }
        else {
            window.event.cancelBubble = true;
        }
    };
    /**
     * 提交评语
     */
    /**
     * 提交评语
     * @return {?}
     */
    DiscussionEditorComponent.prototype.submitApproval = /**
     * 提交评语
     * @return {?}
     */
    function () {
        if (!this.textValue) {
            /** @type {?} */
            var notEmptyText = this.localeService.getValue('discussionGroup.notEmpty');
            if (notEmptyText) {
                this.notifyService.error(notEmptyText);
            }
            return;
        }
        /** @type {?} */
        var editAttachFiles = [];
        if (this.attachFiles && this.attachFiles.length) {
            this.attachFiles.forEach((/**
             * @param {?} file
             * @return {?}
             */
            function (file) {
                /** @type {?} */
                var id = file['id'];
                /** @type {?} */
                var name = file['name'];
                /** @type {?} */
                var size = file['size'];
                /** @type {?} */
                var metadataId = file['extend']['metadataId'];
                /** @type {?} */
                var attachFile = {
                    id: id,
                    name: name,
                    size: size,
                    metadataId: metadataId
                };
                editAttachFiles.push(attachFile);
            }));
        }
        this.valueChange.emit({
            msgInfo: MsgInfo.Confirm,
            text: this.textValue,
            mailTos: this.selectedPersonnels,
            mailToSections: this.selectedSection,
            visibility: this.permission.value,
            parentId: (this.replyUser && this.replyUser.hasOwnProperty('id')) ? this.replyUser.id : null,
            attachFiles: editAttachFiles.length ? editAttachFiles : null
        });
        this.textValue = '';
        this.selectedPersonnels = [];
        this.selectedSection = [];
        this.attachFiles = [];
        this.replyUser = {};
    };
    /**
     * @return {?}
     */
    DiscussionEditorComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.valueChange.emit({
            msgInfo: MsgInfo.Cancel,
            text: null,
            mailTos: [],
            mailToSections: [],
            visibility: null,
            parentId: null,
            attachFiles: null
        });
        this.textValue = '';
        this.selectedPersonnels = [];
        this.selectedSection = [];
        this.attachFiles = [];
        this.replyUser = {};
    };
    /**修改查看权限 */
    /**
     * 修改查看权限
     * @param {?} value
     * @return {?}
     */
    DiscussionEditorComponent.prototype.changePermission = /**
     * 修改查看权限
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.permission = this.permissionList.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.value === value; }));
        this.relativeVisible = false;
    };
    //获得焦点
    //获得焦点
    /**
     * @return {?}
     */
    DiscussionEditorComponent.prototype.editorFocus = 
    //获得焦点
    /**
     * @return {?}
     */
    function () {
        this.editor.nativeElement.focus();
    };
    // customGroupChangePar(event){
    //     this.customGroupChange.emit(event);
    // }
    /**
     * 高级人员点确认
     */
    // customGroupChangePar(event){
    //     this.customGroupChange.emit(event);
    // }
    /**
     * 高级人员点确认
     * @param {?} event
     * @return {?}
     */
    DiscussionEditorComponent.prototype.selectionsChangePar = 
    // customGroupChangePar(event){
    //     this.customGroupChange.emit(event);
    // }
    /**
     * 高级人员点确认
     * @param {?} event
     * @return {?}
     */
    function (event) {
        //this.resetPersonnels();
        if (event.data.users.length) {
            /** @type {?} */
            var userList_1 = [];
            event.data.users.forEach((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                userList_1.push(user.data);
            }));
            this.appendPersonnelsList(userList_1);
        }
        if (event.data.section.length) {
            /** @type {?} */
            var sectionList_1 = [];
            event.data.section.forEach((/**
             * @param {?} sec
             * @return {?}
             */
            function (sec) {
                sectionList_1.push(sec.data);
            }));
            this.appendSectionList(sectionList_1);
        }
        this.selectionsChange.emit(event);
    };
    /**高级人员中选中某行 */
    /**
     * 高级人员中选中某行
     * @param {?} event
     * @return {?}
     */
    DiscussionEditorComponent.prototype.lineDataChangePar = /**
     * 高级人员中选中某行
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.lineDataChange.emit(event);
    };
    /**获得占位头像 */
    /**
     * 获得占位头像
     * @param {?} item
     * @return {?}
     */
    DiscussionEditorComponent.prototype.getAvatar = /**
     * 获得占位头像
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item && item[this.personnelsDisplayKey]) {
            /** @type {?} */
            var str = item[this.personnelsDisplayKey];
            return str.substring(str.length - 2, str.length);
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DiscussionEditorComponent.prototype.ougUsers = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.getOugUsers.emit(event);
    };
    DiscussionEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-discussion-editor',
                    template: "<div class=\"farris-discussion-group-reply-tip\" *ngIf=\"replyUser && replyUser.id\">\r\n    {{ 'discussionGroup.reply' | locale }} &nbsp;\r\n    <span class=\"farris-discussion-group-reply-tip-name\">\r\n        {{replyUser[replyPersonnelsDisplayKey]}}\r\n    </span>\r\n    \uFF1A\r\n</div>\r\n<div class=\"f-discussion-group-edit\">\r\n    <div class=\"f-discussion-group-edit-container\" [ngStyle]=\"{'height': editHeight + 'px'}\">\r\n        <div class=\"textarea-editor\" #editor (keyup)=\"listenEditorValueChange($event)\" (blur)=\"setTextValue($event)\"\r\n            contenteditable=\"true\" [innerHTML]=\"textValue | safeHtml\"></div>\r\n    </div>\r\n    <!-- \u9644\u4EF6\u90E8\u5206 <div class=\"f-discussion-group-edit-files\" *ngIf=\"attachFiles && attachFiles.length\">\r\n        <f-file-preview class=\"d-flex flex-wrap\" [itemCls]=\"'demo-view-item'\" [fileInfos]=\"attachFiles\"\r\n            (filePreviewEvent)=\"filePreviewEventHandler($event)\" (fileRemoveEvent)=\"fileRemoveEventHandler($event)\"\r\n            #filePreview>\r\n            <ng-template filePreviewListTypeTemplate let-data let-readonly=\"readonly\">\r\n                <div class=\"ffilepreview--item-detail\">\r\n                    <div class=\"ffilepreview--item-icon\">\r\n                        <span class=\"ffilepreview--filetype-icon\" [ngClass]=\"filePreview.getFileTypeClassName(data.name)\"></span>\r\n                    </div>\r\n                    <div class=\"ffilepreview--item-content\">\r\n                        <a class=\"item-content--title\" [title]=\"data.name\"\r\n                            (click)=\"filePreview.filePreviewHandler($event,data)\">{{data.name}}</a>\r\n                        <div class=\"item-content--toolbar f-text-light\">\r\n                            <button class=\"btn btn-link\" (click)=\"filePreview.filePreviewHandler($event,data)\">\r\n                                <span class=\"f-icon f-icon-preview\"></span>\u9884\u89C8\r\n                            </button>\r\n                            <button class=\"btn btn-link\" (click)=\"filePreview.fileRemoveHandler($event,data)\">\r\n                                <span class=\"f-icon f-icon-delete\"></span>\u5220\u9664\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </ng-template>\r\n        </f-file-preview>\r\n    </div> -->\r\n    <div class=\"f-discussion-group-edit-footer\">\r\n        <div class=\"f-discussion-group-edit-toolbar\">\r\n            <!-- <div class=\"f-discussion-group-edit-toolbar-item f-discussion-group-edit-toolbar-file\" (click)=\"openModalFile($event)\">\r\n                <div class=\"toolbar-item-text\">\r\n                    <span class=\"toolbar-icon f-icon f-icon-attachment\"></span>\r\n                    <span class=\"toolbar-text\">\u9644\u4EF6</span>\r\n                </div>\r\n            </div> -->\r\n            <div class=\"f-discussion-group-edit-toolbar-item f-discussion-group-edit-toolbar-about\">\r\n                <div class=\"toolbar-item-text\" (click)=\"openModalPerson($event)\">\r\n                    <span class=\"toolbar-icon\">@</span>\r\n                    <span class=\"toolbar-text\">{{ 'discussionGroup.colleague' | locale }}</span>\r\n                </div>\r\n                <div class=\"f-discussion-group-about-dropdown\" *ngIf=\"personModalVisible\" (click)=\"stopBubble($event)\" #personModal>\r\n                    <div class=\"f-discussion-group-about-search\">\r\n                        <!-- bugNum:480647 -->\r\n                        <input-group [placeholder]=\"placeholder\" [groupText]=\"groupIcon\" [(ngModel)]=\"personnelText\" (enterHandle)=\"serachPersonnel()\" (clickHandle)=\"serachPersonnel()\" (valueChange)=\"serachPersonnel()\" (clear)=\"serachPersonnel()\"></input-group>\r\n                    </div>\r\n                    <div class=\"f-discussion-group-about-content\">\r\n                        <div class=\"f-discussion-group-about-used\" [hidden]=\"showSearchList\">\r\n                            <ul class=\"f-discussion-group-about-dropdown-list\">\r\n                                <ng-template [ngIf]=\"innerPersonnels.length\">\r\n                                    <li *ngFor=\"let item of innerPersonnels\" (click)=\"item.active = !item.active\" class=\"d-flex f-discussion-group-about-dropdown-list-item\"\r\n                                        [class.active]=\"item.active\">\r\n                                        <span class=\"f-icon f-icon-check\"></span>\r\n                                        <img [src]=\"item.imgData\" class=\"about-list-item-avatar\" *ngIf=\"item.imgData\"/>\r\n                                        <div class=\"about-list-item-avatar-tip\" *ngIf=\"!item.imgData\" [innerHTML]=\"getAvatar(item)\"></div>\r\n                                        <div class=\"f-discussion-group-about-dropdown-list-detail f-utils-fill\">\r\n                                            <div class=\"about-list-detail-text\">{{item[personnelsDisplayKey]}}</div>\r\n                                            <div class=\"about-list-detail-subtext\">{{item.email}}</div>\r\n                                        </div>\r\n                                    </li>\r\n                                </ng-template>\r\n                                <ng-template [ngIf]=\"!innerPersonnels.length\">\r\n                                    <li class=\"f-discussion-group-about-dropdown-list-item about-dropdown-list-item-empty\">{{ 'discussionGroup.emptyMessage' | locale }}</li>\r\n                                </ng-template>\r\n                            </ul>        \r\n                        </div>\r\n                        <div class=\"f-discussion-group-about-searchlist\" [hidden]=\"!showSearchList\">\r\n                            <ul class=\"f-discussion-group-about-dropdown-list\">\r\n                                <ng-template [ngIf]=\"searchPersonnelList && searchPersonnelList.users && searchPersonnelList.users.length\">\r\n                                    <li *ngFor=\"let item of searchPersonnelList['users']\" (click)=\"item.active = !item.active\" class=\"d-flex f-discussion-group-about-dropdown-list-item\"\r\n                                        [class.active]=\"item.active\">\r\n                                        <span class=\"f-icon f-icon-check\"></span>\r\n                                        <img [src]=\"item.imgData\" class=\"about-list-item-avatar\" *ngIf=\"item.imgData\"/>\r\n                                        <div class=\"about-list-item-avatar-tip\" *ngIf=\"!item.imgData\" [innerHTML]=\"getAvatar(item)\"></div>\r\n                                        <div class=\"f-discussion-group-about-dropdown-list-detail f-utils-fill\">\r\n                                            <div class=\"about-list-detail-text\">{{item[personnelsDisplayKey]}}</div>\r\n                                            <!-- <div class=\"about-list-detail-subtext\">{{item.email}}</div> -->\r\n                                            <div class=\"about-list-detail-subtext\">\r\n                                                <span [innerHTML]=\"item | getOrgText:sectionData\"></span>\r\n                                            </div>\r\n                                        </div>\r\n                                    </li>\r\n                                    <div class=\"f-discussion-person-list-page\">\r\n                                        <span class=\"section-page-more section-page-text\" *ngIf=\"searchPersonnelList.pageIndex < searchPersonnelList.pageCount-1\" (click)=\"getMoreSearchData()\">{{ 'discussionGroup.viewMore' | locale }}</span>\r\n                                    </div>\r\n                                </ng-template>\r\n                                <ng-template [ngIf]=\"searchPersonnelList && searchPersonnelList.users && !searchPersonnelList.users.length\">\r\n                                    <li class=\"f-discussion-group-about-dropdown-list-item\">{{ 'discussionGroup.emptyMessage' | locale }}</li>\r\n                                </ng-template>\r\n                            </ul>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"f-about-list-btns d-flex\">\r\n                        <div class=\"f-about-list-btns-left\">\r\n                            <farris-discussion-personnel \r\n                            [sectionData]=\"sectionData\"\r\n                            [orgUrl]=\"orgUrl\"\r\n                            [personSearchUrl]=\"personSearchUrl\"\r\n                            (selectionsChange)=\"selectionsChangePar($event)\"\r\n                            (lineDataChange)=\"lineDataChangePar($event)\"\r\n                            (ougUsers)=\"ougUsers($event)\"\r\n                            ></farris-discussion-personnel>\r\n                        </div>\r\n                        <div class=\"f-about-list-btns-right\">\r\n                            <button class=\"btn btn-secondary\" (click)=\"resetPersonnels()\">{{ 'discussionGroup.cancel' | locale }}</button>\r\n                            <button class=\"btn btn-primary\" (click)=\"appendPersonnels()\">{{ 'discussionGroup.confirm' | locale }}</button>\r\n                        </div>\r\n                        \r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <!-- \u6682\u65F6\u6CE8\u91CA20210407 -->\r\n            <!-- <div class=\"f-discussion-group-edit-toolbar-item f-discussion-group-edit-toolbar-dropdown\">\r\n                <div class=\"toolbar-dropdown-text\" (click)=\"openModalPermission($event)\">\r\n                    <span class=\"toolbar-text\">{{permission.text}}</span>\r\n                    <span class=\"f-icon f-icon-collapse toolbar-icon\"></span>\r\n                </div>\r\n                <div class=\"toolbar-dropdown-list dropdownlist\" *ngIf=\"relativeVisible\">\r\n                    <ul *ngIf=\"permissionList && permissionList.length\">\r\n                        <li *ngFor=\"let item of permissionList\" class=\"dropdown-item\" [class.active]=\"permission?.value === item.value\"\r\n                            (click)=\"changePermission(item.value)\">{{item.text}}</li>\r\n                    </ul>\r\n                </div>\r\n            </div> -->\r\n        </div>\r\n        <div class=\"f-discussion-group-edit-btns\">\r\n            <button class=\"btn btn-link f-discussion-cancel\" *ngIf=\"cancelVisible\" (click)=\"cancel()\">{{ 'discussionGroup.cancel' | locale }}</button>\r\n            <button class=\"btn btn-primary\" (click)=\"submitApproval()\">{{ 'discussionGroup.submit' | locale }}</button>\r\n        </div>\r\n    </div>\r\n</div>\r\n<!-- <div class=\"f-discussion-group-file-upload\" [hidden]=\"!attachFilesModalVisible\">\r\n    <f-file-upload\r\n        (fUploadDoneEvent)=\"fUploadDoneHandler($event)\"\r\n        (fUploadRemovedEvent)=\"fUploadRemovedHandler($event)\">\r\n    </f-file-upload>\r\n</div> -->",
                    encapsulation: ViewEncapsulation.None,
                    styles: [":host{display:block}.f-discussion-group-edit{border:1px solid #dcdcdc;background:#fff}.f-discussion-group-edit .f-discussion-group-edit-container{width:100%;position:relative}.f-discussion-group-edit .f-discussion-group-edit-container .textarea-editor{width:100%;height:100%;padding:8px;margin:0 auto;outline:0;overflow-y:auto;word-break:break-all;white-space:normal;resize:none}.f-discussion-group-edit .f-discussion-group-edit-container .textarea-editor a{color:#3487e3}.f-discussion-group-edit .f-discussion-group-edit-footer{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;flex-wrap:wrap;-webkit-box-pack:justify;justify-content:space-between;padding:10px 14px;background:#f7f7f7}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;flex-wrap:wrap}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-item{cursor:pointer;color:rgba(0,0,0,.65)}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-item .toolbar-item-text{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;line-height:22px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-item .toolbar-text{margin-left:2px;font-size:14px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-item .toolbar-icon{color:#667580;font-size:16px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-file{margin-right:12px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about{position:relative;margin-right:32px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown{position:absolute;top:calc(100% + 6px);left:0;width:300px;padding-top:16px;z-index:999;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list{max-height:282px;margin-top:10px;overflow-y:auto}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list::-webkit-scrollbar{width:7px;height:7px;background-color:#8e8e8e}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list::-webkit-scrollbar-track{border-radius:0;background-color:#fff;border:0;background-clip:padding-box;border-right:0}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list::-webkit-scrollbar-thumb{border-radius:3px;background-color:#dbdbdb;border:0;background-clip:content-box;opacity:.6;-webkit-transform:rotate(90deg);transform:rotate(90deg)}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item{padding:3px 14px;list-style:none;-webkit-box-align:center;align-items:center}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .f-discussion-group-about-dropdown-list-detail{margin-left:6px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .f-discussion-group-about-dropdown-list-detail .about-list-detail-text{line-height:20px;font-size:12px;color:#0a131a;margin:0 auto;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .f-discussion-group-about-dropdown-list-detail .about-list-detail-subtext{font-size:12px;color:#8f9ca6;line-height:20px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .f-icon-check{border:1px solid #d8d9d9;color:#fff;font-size:15px;border-radius:2px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .f-icon-check::before{content:''}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item.active .f-icon-check{border:none;background:#4c91ff}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item.active .f-icon-check::before{content:'\\e118'}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .about-list-item-avatar{display:block;width:30px;height:30px;margin-left:6px;border-radius:50%;overflow:hidden}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item .about-list-item-avatar-tip{width:32px;height:32px;margin-left:6px;font-size:12px;color:#fff;text-align:center;line-height:32px;border-radius:50%;background-color:#4796ff}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item:hover{background:#e6f7ff}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item.about-dropdown-list-item-empty{cursor:default}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-dropdown-list-item.about-dropdown-list-item-empty:hover{background:#fff}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-discussion-group-about-search{padding:0 14px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-about-list-btns{-webkit-box-pack:justify;justify-content:space-between;background:#faf9f9;border-top:1px solid #efefef;padding:10px 15px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-about-list-btns .btn{margin-right:10px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-about .f-discussion-group-about-dropdown .f-about-list-btns .btn:last-child{margin-right:0}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown{position:relative}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-dropdown-text{cursor:pointer}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-icon{color:rgba(0,0,0,.25)}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-text{margin-left:0}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-dropdown-list{position:absolute;left:0;top:calc(100% + 6px);z-index:999;padding:2px 0;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-dropdown-list ul{max-width:220px;overflow-y:auto}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-dropdown-list ul li{font:14px/28px Microsoft yahei;padding:0 15px 0 10px;word-break:keep-all}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-toolbar .f-discussion-group-edit-toolbar-dropdown .toolbar-dropdown-list ul li:hover{background:#e6f7ff}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-btns{flex-shrink:0}.f-discussion-group-edit .f-discussion-group-edit-footer .f-discussion-group-edit-btns .f-discussion-cancel{margin-right:12px;font-size:14px;color:rgba(0,0,0,.75)}.f-discussion-group-edit .f-discussion-group-edit-files{padding:10px 14px 0}.f-discussion-group-edit .f-discussion-group-edit-files .ffilepreview--filetype-icon{width:32px;height:32px}.farris-discussion-group-reply-tip{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;margin-bottom:10px;font-size:14px;color:rgba(0,0,0,.75)}.f-discussion-group-file-upload{margin-top:10px}.f-discussion-dialog-content{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-pack:justify;justify-content:space-between;height:100%;padding:14px;overflow:hidden}.f-discussion-dialog-content-left{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;width:600px;height:100%;padding:0}.f-discussion-dialog-content-left .f-discussion-personnel-search{flex-shrink:0;position:relative;margin-bottom:7px}.f-discussion-dialog-content-left .f-discussion-tab-content{border:1px solid #dcdcdc;border-radius:2px;padding:12px 0 7px}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs{flex-shrink:0;position:relative;width:100%;height:32px;padding:0 12px;overflow:hidden}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list{width:100%;overflow:hidden}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-item{display:-webkit-box;display:flex;flex-wrap:nowrap;flex-shrink:0;-webkit-box-align:center;align-items:center;line-height:20px;font-size:14px;color:rgba(0,0,0,.85);cursor:pointer}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-item .crumbs-text{padding:0 2px;text-overflow:ellipsis;max-width:80px;max-height:20px;white-space:nowrap;overflow:hidden}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-item:first-child .crumbs-text{padding-left:0}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-item.crumbs-list-item-disabled{color:rgba(0,0,0,.55)}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-ellipsis{-webkit-box-align:center;align-items:center;position:absolute;left:12px;top:0;width:30px;height:32px;line-height:32px}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content .f-discussion-personnel-crumbs .crumbs-list-padding{padding-left:30px}.f-discussion-dialog-content-left .f-discussion-tab-content .f-discussion-personnel-content.f-discussion-personnel-content-hide{display:none!important}.f-discussion-dialog-content-right{height:100%;margin-left:14px;padding:0;border:1px solid #dcdcdc;border-radius:2px}.f-discussion-dialog-content-right .f-discussion-selected-personnel-header{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:justify;justify-content:space-between;height:36px;padding:0 14px;background:#fafafa}.f-discussion-dialog-content-right .f-discussion-selected-personnel-header-text{font-size:14px;line-height:20px}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content{padding:8px 0}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:justify;justify-content:space-between;padding:6px 12px}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item-text{line-height:20px}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item-text .f-discussion-selected-name{font-size:14px;color:rgba(0,0,0,.85)}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item-tip{font-size:12px;color:rgba(0,0,0,.35);line-height:20px}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item-remove{visibility:hidden;color:#388fff;cursor:pointer}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item:hover{background:#f3fbff}.f-discussion-dialog-content-right .f-discussion-selected-personnel-content .f-discussion-selected-list .f-discussion-selected-item:hover .f-discussion-selected-item-remove{visibility:visible}.f-discussion-dialog-content .f-discussion-selected-item-remove{visibility:hidden}.f-discussion-dialog-content .f-discussion-personnel-item{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;padding:3px 14px 3px 3px;cursor:pointer}.f-discussion-dialog-content .f-discussion-personnel-item-avatar{flex-shrink:0;width:36px;height:36px;margin-right:5px;border-radius:50%;overflow:hidden}.f-discussion-dialog-content .f-discussion-personnel-item-avatar img{display:block;width:100%}.f-discussion-dialog-content .f-discussion-personnel-item-text{flex-shrink:1;-webkit-box-flex:1;flex-grow:1;flex-basis:0;padding-right:10px;overflow:hidden;text-overflow:ellipsis;white-space:nowrap}.f-discussion-dialog-content .f-discussion-personnel-item-text .f-discussion-personnel-name{line-height:20px;font-size:12px;color:#0a131a}.f-discussion-dialog-content .f-discussion-personnel-item-text .f-discussion-personnel-mail{line-height:20px;font-size:12px;color:#8f9ca6}.f-discussion-dialog-content .f-discussion-personnel-item-remove{display:none}.f-discussion-dialog-content .f-discussion-personnel-item:hover{background:#f3fbff}.f-discussion-dialog-content .f-discussion-personnel-item:hover .f-discussion-personnel-item-remove{display:block}.f-discussion-dialog-content .f-discussion-personnel-item.active{background:#def1ff}.f-discussion-dialog-content .f-discussion-personnel-item.selected{background:#fff;cursor:not-allowed}.f-discussion-dialog-content .f-discussion-personnel-item.selected .f-discussion-personnel-mail,.f-discussion-dialog-content .f-discussion-personnel-item.selected .f-discussion-personnel-name{color:#c1c1c1}.f-discussion-dialog-content .f-discussion-personnel-empty{padding:3px 14px;list-style:none;-webkit-box-align:center;align-items:center}.f-discussion-dialog-content .f-discussion-section-list-empty{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:center;align-items:center;-webkit-box-pack:center;justify-content:center;height:100%}.f-discussion-dialog-content .f-discussion-section-list-empty .f-icon{margin-bottom:8px;font-size:26px;color:#e2e6f0}.f-discussion-dialog-content .f-discussion-section-list-empty .section-list-empty-text{font-size:13px;color:rgba(0,0,0,.25)}.f-discussion-dialog-content .f-discussion-personnel-item-tip{width:36px;height:36px;font-size:12px;color:#fff;text-align:center;line-height:32px;border-radius:50%;background-color:#4796ff}.f-discussion-dialog-content .f-discussion-section-list .section-list-item{display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center;-webkit-box-pack:justify;justify-content:space-between;height:32px;padding:0 12px;cursor:pointer}.f-discussion-dialog-content .f-discussion-section-list .section-list-item-name{font-size:14px;color:rgba(0,0,0,.85);line-height:32px}.f-discussion-dialog-content .f-discussion-section-list .section-list-item-next{flex-shrink:0;position:relative;padding-left:20px;padding-right:10px;line-height:20px;font-size:12px;color:#388fff;cursor:pointer}.f-discussion-dialog-content .f-discussion-section-list .section-list-item-next::before{position:absolute;left:0;top:50%;width:1px;height:12px;margin-top:-6px;background:#d9d9d9;content:''}.f-discussion-dialog-content .f-discussion-section-list .section-list-item:hover{background:#f3f8ff}.f-discussion-dialog-content .f-discussion-section-list .section-list-item .section-list-item-checkbox.custom-control.custom-checkbox{margin-right:0;padding:0;margin-bottom:0}.f-discussion-dialog-content .f-discussion-section-list .person-list-item{height:auto;padding-top:7px;padding-bottom:6px}.f-discussion-dialog-content .f-discussion-section-list .person-list-item-img{flex-shrink:0;width:36px;height:36px;border-radius:50%;overflow:hidden}.f-discussion-dialog-content .f-discussion-section-list .person-list-item-img img{display:block;width:100%;height:100%}.f-discussion-dialog-content .f-discussion-section-list .person-list-item-content{padding-left:6px}.f-discussion-dialog-content .f-discussion-section-list .person-list-item-content .section-list-item-name{font-size:14px;color:rgba(0,0,0,.85);line-height:20px}.f-discussion-dialog-content .f-discussion-section-list .person-list-item-content .section-list-item-tip{font-size:12px;color:rgba(0,0,0,.35);line-height:20px}.f-discussion-person-list-page{padding:10px 0;text-align:center;cursor:pointer}.f-discussion-person-list-page .section-page-text{font-size:14px;color:rgba(0,0,0,.55)}.f-discussion-person-list-page:hover .section-page-text{color:rgba(0,0,0,.85)}"]
                }] }
    ];
    /** @nocollapse */
    DiscussionEditorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: NotifyService },
        { type: Injector },
        { type: HttpClient }
    ]; };
    DiscussionEditorComponent.propDecorators = {
        personnelsPrimaryKey: [{ type: Input }],
        personnelsDisplayKey: [{ type: Input }],
        replyPersonnelsDisplayKey: [{ type: Input }],
        cancelVisible: [{ type: Input }],
        editHeight: [{ type: Input }],
        type: [{ type: Input }],
        orgUrl: [{ type: Input }],
        personSearchUrl: [{ type: Input }],
        treeIdField: [{ type: Input }],
        treeDisplayText: [{ type: Input }],
        sectionData: [{ type: Input }],
        personnels: [{ type: Input }],
        replyUser: [{ type: Input }],
        attachFiles: [{ type: Input }],
        selectionsChange: [{ type: Output }],
        lineDataChange: [{ type: Output }],
        valueChange: [{ type: Output }],
        filePreview: [{ type: Output }],
        fileRemove: [{ type: Output }],
        fileUploadDone: [{ type: Output }],
        personnelSearch: [{ type: Output }],
        getOugUsers: [{ type: Output }],
        editor: [{ type: ViewChild, args: ['editor',] }],
        personModal: [{ type: ViewChild, args: ['personModal',] }]
    };
    return DiscussionEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionPersonnelComponent = /** @class */ (function () {
    function DiscussionPersonnelComponent(renderer, elementRef, ngZone, http, cd, injector) {
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.ngZone = ngZone;
        this.http = http;
        this.cd = cd;
        this.injector = injector;
        // 操作列表或者分组所需要的主键字段
        this.listIdField = "id";
        // 列表中显示的字段
        this.listDisplayText = "userName";
        // 分层获取组织的链接
        // 使用方式 /api/runtime/sys/v1.0/sysOrgs?param={"parentId":"afa5ee9b-f9ba-2927-f9ce-2a30369267e9"}
        this.urlGetOrgByLayer = "/api/runtime/sys/v1.0/sysOrgs";
        // 新建还是维护自定义角色
        // @Output() customGroupChange = new EventEmitter<any>();
        // 对外暴露数据
        this.selectionsChange = new EventEmitter();
        // 选中的行
        this.lineDataChange = new EventEmitter();
        this.openDialog = new EventEmitter();
        this.ougUsers = new EventEmitter();
        this.loadingInstance = null;
        // 右侧项
        this.selections = [];
        this.selectedSections = [];
        this.selectedUsers = [];
        // 最重要显示的人员信息
        this.finalText = '';
        this.sectionDataTree = [];
        this.sectionDataTiled = [];
        this.currentSectionData = [];
        this.currentSection = {};
        this.currentSectionPerson = {};
        this.currentSectionId = '';
        this.sectionCrumbs = [];
        this.pageSize = 20;
        this.showSearchList = false;
        this.crumbsEllipsis = false;
        this.searchUserList = {};
        this.selectEmployee = "选择员工";
        this.placeholder = "请输入员工姓名搜索";
        this.allOrg = "全部组织";
        this.groupIcon = '<span class="f-icon f-icon-search"></span>';
        // 标记请求
        this.recordGetUserSubscribe = null;
        // 查询变化
        this.searchTextChangeSubject = new Subject();
        this.errorText = '';
        this.perfixStr = '';
        this.localeService = this.injector.get(LocaleService);
        this.loadingSer = this.injector.get(LoadingService);
        if (WEBAPI_PREFIX_TOKEN) {
            this.perfixStr = this.injector.get(WEBAPI_PREFIX_TOKEN, '');
        }
    }
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // let sectionDataTrees = this.initsectionData(this.sectionData,'');
        this.allOrg = this.localeService.getValue('discussionGroup.allOrg');
        /** @type {?} */
        var sectionDataTrees = this.initSectionData(this.sectionData, '');
        // this.sectionSort(sectionDataTrees);
        // if(sectionDataTrees.length>1){
        /** @type {?} */
        var sectionParent = [
            {
                data: {
                    id: 'discussionParent',
                    code: 'parent',
                    name: this.allOrg,
                    layer: 0,
                    parentId: "",
                    sortOrder: 1,
                    path: "",
                },
                children: [],
                personnels: {
                    count: 0,
                    pageCount: 0,
                    pageIndex: 1,
                    pageSize: 0,
                    totalCount: 0,
                    users: []
                },
                parent: null,
                parents: [],
                parentsArr: [],
                checked: false
            }
        ];
        sectionParent[0].children = sectionDataTrees;
        sectionParent[0].children.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) { return a.data['sortOrder'] - b.data['sortOrder']; }));
        this.initSectionTree(sectionParent[0].children);
        this.sectionDataTree = sectionParent;
        // }
        // else{
        //     this.sectionDataTree = sectionDataTrees;
        // }
        //console.log(this.sectionDataTree);
        if (this.sectionDataTree && this.sectionDataTree.length) {
            // 如果有组织树的数据，打平成数组数据
            this.sectionDataTiled = this.tileSectionData(this.sectionDataTree);
        }
        /**
         * 当前界面上的组织节点完整树数据
         * {
         *    checked:false,组织是否选中
         *    children:[],组织的子部门
         *    data:{ 来自于从服务器端返回的数据结构
         *      id:组织id,
         *      code:组织code,
         *      name:组织名称
         *      layer:组织层级
         *      parentId:父节点
         *      ....
         *      },
         *    parents:[],父节点Id
         *    parentsArr:[{id:'组织节点Id',name:'组织节点名称'}],
         *    personnels:{
         *          count:0,
         *          pageCount:,
         *          users:[] 用户信息
         *      }
         * }
         *
         */
        this.currentSection = this.sectionDataTree[0];
        // 面包屑数据[{id:'组织节点Id',name:'组织节点名称'}]
        this.sectionCrumbs = this.sectionDataTree[0].children.length ? this.sectionDataTree[0].children[0]['parentsArr'] : [];
        // 当前界面上的组织列表数据
        this.currentSectionData = this.sectionDataTree[0].children.length ? this.sectionDataTree[0].children : [];
        // 当前界面上的组织隶属的组织的数据Id
        this.currentSectionId = this.sectionDataTree[0].data.id;
        // 绑定当人员获取回数据时，执行的操作
        this.getPersonnel(this.currentSectionId, 0).subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d.hasOwnProperty("users")) {
                _this.sectionDataTree[0].personnels = d;
                _this.currentSectionPerson = _this.sectionDataTree[0].personnels;
                // console.log('cur',this.currentSectionPerson);
            }
        }));
        this.selectEmployee = this.localeService.getValue('discussionGroup.selectEmployee');
        this.placeholder = this.localeService.getValue('discussionGroup.placeholder');
        // console.log(this.sectionDataTiled);
        // 窗口打开时再调用也可以 this.dialogOpend();
    };
    /**
     * @param {?} data
     * @param {?=} parentId
     * @param {?=} parentName
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.initSectionTree = /**
     * @param {?} data
     * @param {?=} parentId
     * @param {?=} parentName
     * @return {?}
     */
    function (data, parentId, parentName) {
        var _this = this;
        if (parentId === void 0) { parentId = "discussionParent"; }
        if (parentName === void 0) { parentName = this.allOrg; }
        if (data && data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var par = {
                    id: parentId,
                    name: parentName
                };
                item.parentsArr.unshift(par);
                item.parents.unshift(parentId);
                if (item.children.length) {
                    _this.initSectionTree(item.children);
                }
            }));
        }
    };
    /**
     * 初始化分组数据
     * 传递过来的数据是列表，需要转换成树的层级结构
     */
    /**
     * 初始化分组数据
     * 传递过来的数据是列表，需要转换成树的层级结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @param {?=} presetParent
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.initSectionData = /**
     * 初始化分组数据
     * 传递过来的数据是列表，需要转换成树的层级结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @param {?=} presetParent
     * @return {?}
     */
    function (data, parentId, parentIdField, idField, presetParent) {
        if (parentIdField === void 0) { parentIdField = 'parentId'; }
        if (idField === void 0) { idField = 'id'; }
        if (presetParent === void 0) { presetParent = null; }
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var unattached = [];
        if (presetParent) {
            nodes.set(presetParent.data.id, presetParent);
        }
        if (data && data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    personnels: {},
                    parent: null,
                    parents: [],
                    parentsArr: [],
                    checked: false
                };
                /** @type {?} */
                var id = item[idField];
                nodes.set(id, node);
                /** @type {?} */
                var PID = item[parentIdField];
                // 初始
                if (PID === parentId || PID === null) {
                    result.push(node);
                }
                else {
                    /** @type {?} */
                    var parent_1 = nodes.get(PID);
                    // console.log(parent);
                    if (parent_1) {
                        /** @type {?} */
                        var par = {
                            id: PID,
                            name: parent_1.data.name
                        };
                        node['parent'] = PID;
                        node['parents'] = __spread(parent_1.parents, [PID]);
                        node['parentsArr'] = __spread(parent_1.parentsArr, [par]);
                        parent_1.children.push(node);
                        parent_1.children.sort((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) { return a.data['sortOrder'] - b.data['sortOrder']; }));
                    }
                    else {
                        unattached.push(node);
                    }
                }
            }));
            if (unattached.length) {
                unattached.forEach((/**
                 * @param {?} unItem
                 * @return {?}
                 */
                function (unItem) {
                    /** @type {?} */
                    var pid = unItem.data[parentIdField];
                    /** @type {?} */
                    var parent = nodes.get(pid);
                    if (parent) {
                        // 构造数据
                        unItem['parent'] = pid;
                        unItem['parents'] = __spread(parent.parents, [pid]);
                        unItem['parentsArr'] = __spread(parent.parentsArr, [{
                                id: pid,
                                name: parent.data.name
                            }]);
                        parent.children.push(unItem);
                        parent.children.sort((/**
                         * @param {?} a
                         * @param {?} b
                         * @return {?}
                         */
                        function (a, b) { return a.data['sortOrder'] - b.data['sortOrder']; }));
                    }
                }));
            }
        }
        return result;
    };
    /**
     * 所有nodes的子节点转化成数组，并返回数组
     * @param nodes
     */
    /**
     * 所有nodes的子节点转化成数组，并返回数组
     * @param {?} nodes
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.tileSectionData = /**
     * 所有nodes的子节点转化成数组，并返回数组
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        /** @type {?} */
        var r = [];
        this.getAllNodes(nodes, r);
        return r;
    };
    /**
     * 所有nodes的子节点转化成数组，并跟新数组r
     * @param nodes
     * @param r
     */
    /**
     * 所有nodes的子节点转化成数组，并跟新数组r
     * @param {?} nodes
     * @param {?} r
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getAllNodes = /**
     * 所有nodes的子节点转化成数组，并跟新数组r
     * @param {?} nodes
     * @param {?} r
     * @return {?}
     */
    function (nodes, r) {
        var _this = this;
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            r.push(n);
            if (n.children.length) {
                _this.getAllNodes(n.children, r);
            }
        }));
    };
    /**
     * 点击下级
     * @param section
     */
    /**
     * 点击下级
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.sectionNext = /**
     * 点击下级
     * @param {?} section
     * @return {?}
     */
    function (section) {
        var _this = this;
        // 构造组织节点下面的人员信息，如果没有人员信息，就构造结构，然后发请求获取人员信息
        this.showOrHideLoading(true);
        forkJoin([this.getOrgByLayerHttp(section), this.getPersonByUrlHttp(section)])
            .subscribe((/**
         * @param {?} orgAndPersonDatas
         * @return {?}
         */
        function (orgAndPersonDatas) {
            _this.showOrHideLoading(false);
            // 获取组织数据
            /** @type {?} */
            var getOrgData = orgAndPersonDatas[0];
            if (getOrgData !== false) {
                // 从服务器端真实返回数据,直接在方法内更新section的结构
                _this.initSectionData(getOrgData, '', 'parentId', 'id', section);
                // 输入所有组织树的数据，看section变更是否更新
                // 更新数据
                _this.sectionDataTiled = _this.tileSectionData(_this.sectionDataTree);
            }
            // 获取人员数据
            /** @type {?} */
            var getPersonData = orgAndPersonDatas[1];
            if (getPersonData !== false) {
                // 构造数据
                section.personnels = {
                    count: 0,
                    pageCount: 0,
                    pageIndex: 1,
                    pageSize: 0,
                    totalCount: 0,
                    users: []
                };
                if (getPersonData.hasOwnProperty("users")) {
                    section.personnels.count = getPersonData['count'];
                    section.personnels.pageCount = getPersonData['pageCount'];
                    section.personnels.pageIndex = getPersonData['pageIndex'];
                    section.personnels.pageSize = getPersonData['pageSize'];
                    section.personnels.totalCount = getPersonData['totalCount'];
                    section.personnels['users'] = __spread(section.personnels['users'], getPersonData['users']);
                }
                else {
                    section['noPersonnel'] = true;
                }
            }
            _this.getNextData(section);
        }));
    };
    /**
     * 获取下级数据
     * 点击的组织对应的是：当前组织节点
     * @param section
     */
    /**
     * 获取下级数据
     * 点击的组织对应的是：当前组织节点
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getNextData = /**
     * 获取下级数据
     * 点击的组织对应的是：当前组织节点
     * @param {?} section
     * @return {?}
     */
    function (section) {
        var _this = this;
        if ((section.children && section.children.length) || (JSON.stringify(section.personnels) !== '{}')) {
            // 如果当前组织节点有下级数据
            /** @type {?} */
            var sec = this.getSectionById(section.data.id);
            if (sec) {
                // 判断当前组织节点，是否勾选全选
                /** @type {?} */
                var secChecked_1 = sec['checked'];
                sec['disabled'] = secChecked_1 ? true : false;
                if (!sec['indeterminate']) {
                    // 当前组织的下一级组织都勾选
                    if (sec.children && sec.children.length) {
                        sec.children.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            item['checked'] = secChecked_1;
                            item['indeterminate'] = false;
                            // item['disabled'] = sec['disabled'];
                        }));
                    }
                    // 如果有人员，当前人员都勾选
                    if (section.personnels['users'] && section.personnels['users'].length) {
                        section.personnels['users'].forEach((/**
                         * @param {?} user
                         * @return {?}
                         */
                        function (user) {
                            user['checked'] = secChecked_1;
                            user['indeterminate'] = false;
                            // user['disabled'] = sec['disabled'];
                        }));
                    }
                }
            }
            /** @type {?} */
            var secParent = {
                id: sec.data.id,
                name: sec.data.name
            };
            // 当前组织的父节点与当前组织节点数据合并
            /** @type {?} */
            var secCrumbs = __spread(sec['parentsArr'], [secParent]);
            // 如果当前组织有子节点，获取子节点的父数组，否则，按照上面数据合并获取
            this.sectionCrumbs = sec.children.length ? sec.children[0]['parentsArr'] : secCrumbs;
            // 新的组织节点是当前组织的子节点
            this.currentSectionData = sec.children.length ? sec.children : [];
            // 记录当前组织节点
            this.currentSection = sec;
            // 记录当前组织节点的数据
            this.currentSectionId = sec.data.id;
            // 当前组织下对应的人员信息
            this.currentSectionPerson = sec.personnels;
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initCrumbsList();
            }), 0);
            // console.log(this.currentSection);
            this.cd.detectChanges();
        }
        else {
            this.currentSectionPerson = [];
        }
    };
    /**
     * 获取人员接口定义
     * @param ougId
     * @param pageIndex
     * @param pageSize
     */
    /**
     * 获取人员接口定义
     * @param {?} ougId
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getPersonnel = /**
     * 获取人员接口定义
     * @param {?} ougId
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    function (ougId, pageIndex, pageSize) {
        if (pageSize === void 0) { pageSize = this.pageSize; }
        // let data = {};
        if (this.orgUrl) {
            /** @type {?} */
            var url = "" + this.perfixStr + this.orgUrl + "?orgId=" + ougId + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex;
            return this.http.get(url);
            // if(ougId == 'langchao'){
            //     return this.http.get('assets/data/discussionPerson.json');
            // }
            // else if(ougId == 'guoji'){
            //     return this.http.get('assets/data/discussionPerson2.json');
            // }
            // else if(ougId == 'yanfa'){
            //     return this.http.get('assets/data/discussionPerson3.json');
            // }
            // else{
            //     return of(true);
            // }
        }
        else {
            return of(false);
        }
        // return data;
    };
    /**
     * 分层获取数据
     */
    /**
     * 分层获取数据
     * @private
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getOrgByLayerHttp = /**
     * 分层获取数据
     * @private
     * @param {?} section
     * @return {?}
     */
    function (section) {
        if (!section.data['isDetail'] && (!section.children || section.children.length == 0)) {
            //不是叶子节点，但是子为空
            if (this.urlGetOrgByLayer) {
                /** @type {?} */
                var url = "" + this.perfixStr + this.urlGetOrgByLayer + "?param={\"parentId\":\"" + section.data.id + "\"}";
                return this.http.get(url);
            }
        }
        // 处理过的数据
        return of(false);
    };
    /**
     * 获取人员
     * @param section
     */
    /**
     * 获取人员
     * @private
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getPersonByUrlHttp = /**
     * 获取人员
     * @private
     * @param {?} section
     * @return {?}
     */
    function (section) {
        if (JSON.stringify(section.personnels) === '{}' && !section.hasOwnProperty('noPersonnel')) {
            return this.getPersonnel(section.data.id, 0);
        }
        return of(false);
    };
    /**
     * @param {?} id
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getSectionById = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var section = this.sectionDataTiled.find((/**
         * @param {?} sec
         * @return {?}
         */
        function (sec) {
            return sec.data.id == id;
        }));
        return section;
    };
    /**
     * 点击面包屑
     * @param crumbs
     */
    /**
     * 点击面包屑
     * @param {?} crumbs
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.crumbsClick = /**
     * 点击面包屑
     * @param {?} crumbs
     * @return {?}
     */
    function (crumbs) {
        var _this = this;
        if (crumbs.id == this.currentSectionId)
            return;
        /** @type {?} */
        var sec = this.getSectionById(crumbs.id);
        this.sectionCrumbs = sec.children.length ? sec.children[0]['parentsArr'] : [];
        this.currentSectionData = sec.children.length ? sec.children : [];
        this.currentSectionId = sec.data.id;
        this.currentSectionPerson = sec.personnels;
        this.currentSection = sec;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initCrumbsList();
        }), 0);
    };
    /**
     * 部门或人员状态变化
     * @param event
     * @param section
     */
    /**
     * 部门或人员状态变化
     * @param {?} event
     * @param {?} section
     * @param {?} type
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.handleClick = /**
     * 部门或人员状态变化
     * @param {?} event
     * @param {?} section
     * @param {?} type
     * @return {?}
     */
    function (event, section, type) {
        var _this = this;
        if (this.currentSection.disabled)
            return;
        event.stopPropagation();
        section.checked = !section.checked;
        section['indeterminate'] = false;
        this.setSectionDataChecked();
        if (section.checked) {
            /** @type {?} */
            var selectedData = {
                parent: this.currentSection,
                data: section
            };
            if (type == 'user') {
                if (this._isSelectedInArray(section[this.listIdField], this.listIdField, this.selectedUsers)) {
                    return;
                }
                else {
                    this.selectedUsers.push(selectedData);
                }
            }
            else if (type == 'section') {
                this.addSection(section);
            }
        }
        else {
            if (type == 'user') {
                if (this._isSelectedInArray(section[this.listIdField], this.listIdField, this.selectedUsers)) {
                    this.selectedUsers.forEach((/**
                     * @param {?} item
                     * @param {?} index
                     * @return {?}
                     */
                    function (item, index) {
                        if (item['data'][_this.listIdField] === section[_this.listIdField]) {
                            _this.selectedUsers.splice(index, 1);
                        }
                    }));
                }
            }
            else if (type == 'section') {
                this.removeSection(section);
            }
        }
        // console.log(this.selectedUsers,this.selectedSections);
    };
    /**
     * @param {?} event
     * @param {?} user
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.handleSearchClick = /**
     * @param {?} event
     * @param {?} user
     * @return {?}
     */
    function (event, user) {
        var _this = this;
        event.stopPropagation();
        user.checked = !user.checked;
        if (user.checked) {
            if (this._isSelectedInArray(user[this.listIdField], this.listIdField, this.selectedUsers)) {
                return;
            }
            else {
                /** @type {?} */
                var selectedData = {
                    parent: null,
                    data: user
                };
                this.selectedUsers.push(selectedData);
            }
        }
        else {
            if (this._isSelectedInArray(user[this.listIdField], this.listIdField, this.selectedUsers)) {
                this.selectedUsers.forEach((/**
                 * @param {?} item
                 * @param {?} index
                 * @return {?}
                 */
                function (item, index) {
                    if (item['data'][_this.listIdField] === user[_this.listIdField]) {
                        _this.selectedUsers.splice(index, 1);
                    }
                }));
            }
        }
    };
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.setSectionDataChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var curChecked = false;
        /** @type {?} */
        var sec = this.currentSection;
        /** @type {?} */
        var secArray = [];
        if (sec.children || (sec.personnels['users'] && sec.personnels['users'].length)) {
            secArray = secArray.concat(sec.children, sec.personnels['users']);
            /** @type {?} */
            var secCheckedList = secArray.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.hasOwnProperty('checked') && item['checked']) {
                    return item;
                }
            }));
            /** @type {?} */
            var secIndeList = sec.children.filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (item.hasOwnProperty('indeterminate') && item['indeterminate']) {
                    return item;
                }
            }));
            this.currentSection['indeterminate'] = (secIndeList && secIndeList.length) ? true : false;
            if (secCheckedList && secCheckedList.length) {
                if (secCheckedList.length == secArray.length && sec.personnels.pageIndex >= sec.personnels.pageCount - 1) {
                    curChecked = true;
                }
                else {
                    this.currentSection['indeterminate'] = true;
                }
            }
            else {
                curChecked = false;
            }
            this.currentSection['checked'] = curChecked;
            // console.log(this.currentSection);
        }
        if (this.currentSection.parents.length > 0 && this.currentSection['indeterminate']) {
            this.currentSection.parents.forEach((/**
             * @param {?} par
             * @return {?}
             */
            function (par) {
                /** @type {?} */
                var parSec = _this.getSectionById(par);
                if (parSec) {
                    parSec['indeterminate'] = _this.currentSection['indeterminate'];
                }
            }));
        }
    };
    /**
     * @param {?=} status
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.setChildDisabledStatus = /**
     * @param {?=} status
     * @return {?}
     */
    function (status) {
        if (status === void 0) { status = true; }
        /** @type {?} */
        var sec = this.currentSection;
        // sec['disabled'] = status;
        if (sec.children || (sec.personnels['users'] && sec.personnels['users'].length)) {
            sec.children.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item['disabled'] = status;
            }));
            // sec['childDisabled'] = status;
            sec.personnels['users'].forEach((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                user['disabled'] = status;
            }));
        }
    };
    /**
     * 人员查看更多
     */
    /**
     * 人员查看更多
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getMoreData = /**
     * 人员查看更多
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.currentSectionId) {
            /** @type {?} */
            var sec_1 = this.getSectionById(this.currentSectionId);
            if (sec_1) {
                this.getPersonnel(this.currentSectionId, sec_1.personnels.pageIndex + 1).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    if (d.hasOwnProperty("users")) {
                        sec_1.personnels.pageIndex = d['pageIndex'];
                        sec_1.personnels['users'] = __spread(sec_1.personnels['users'], d['users']);
                        if (sec_1.personnels['users'].length) {
                            if (sec_1['checked']) {
                                sec_1.personnels['users'].forEach((/**
                                 * @param {?} user
                                 * @return {?}
                                 */
                                function (user) {
                                    user['checked'] = sec_1['checked'];
                                }));
                            }
                        }
                        // this.setSectionDataChecked();
                    }
                    _this.cd.detectChanges();
                }));
            }
        }
    };
    /**
     * 全选
     * @param event
     */
    /**
     * 全选
     * @param {?} event
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.handleClickAll = /**
     * 全选
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.currentSection.disabled)
            return;
        if (this.currentSection) {
            this.currentSection['checked'] = !this.currentSection['checked'];
            this.currentSection['indeterminate'] = false;
            /** @type {?} */
            var curChecked_1 = this.currentSection['checked'];
            this.currentSection.children.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item['checked'] = curChecked_1;
            }));
            if (JSON.stringify(this.currentSection.personnels) != '{}' && this.currentSection['personnels']['users'].length) {
                this.currentSection['personnels']['users'].forEach((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) {
                    user['checked'] = curChecked_1;
                }));
            }
            if (curChecked_1) {
                this.addSection(this.currentSection);
            }
            else {
                this.removeSection(this.currentSection);
            }
        }
    };
    /**
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.addSection = /**
     * @param {?} section
     * @return {?}
     */
    function (section) {
        if (this._isSelectedInArray(section['data'][this.listIdField], this.listIdField, this.selectedSections)) {
            return;
        }
        else {
            this.selectedSections.push(section);
        }
    };
    /**
     * @param {?} section
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.removeSection = /**
     * @param {?} section
     * @return {?}
     */
    function (section) {
        var _this = this;
        if (this._isSelectedInArray(section['data'][this.listIdField], this.listIdField, this.selectedSections)) {
            this.selectedSections.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (item['data'][_this.listIdField] === section['data'][_this.listIdField]) {
                    _this.selectedSections.splice(index, 1);
                }
            }));
        }
    };
    /**
     * 搜索用户
     */
    /**
     * 搜索用户
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.searchUser = /**
     * 搜索用户
     * @return {?}
     */
    function () {
        if (this.searchText) {
            this.showSearchList = true;
            this.searchTextChangeSubject.next(this.searchText);
        }
        else {
            this.showSearchList = false;
        }
    };
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.clearSearch = /**
     * @return {?}
     */
    function () {
        this.showSearchList = false;
        this.searchText = '';
        this.errorText = '';
        // 取消挂起的请求
        if (this.recordGetUserSubscribe) {
            this.recordGetUserSubscribe.unsubscribe();
            this.recordGetUserSubscribe = null;
        }
        // 清除遮罩
        this.showOrHideLoading(false);
    };
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.dialogOpend = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.showOrHideLoading(false);
        this.searchTextChangeSubject = new Subject();
        this.searchTextChangeSubject.pipe(debounceTime(200)).subscribe((/**
         * @param {?} tsearchText
         * @return {?}
         */
        function (tsearchText) {
            _this.errorText = '';
            _this.showOrHideLoading(true);
            // 记录
            _this.recordGetUserSubscribe = _this.getSearchData(tsearchText, 0).subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                _this.showOrHideLoading(false);
                if (d.hasOwnProperty("users")) {
                    _this.searchUserList = d;
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                // 处理失败
                if (error && error.statusText) {
                    _this.errorText = error.statusText;
                }
                else {
                    _this.errorText = '出现异常';
                }
                _this.showOrHideLoading(false);
            }));
        }));
    };
    /**
     * 搜索人员查看更多
     */
    /**
     * 搜索人员查看更多
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getMoreSearchData = /**
     * 搜索人员查看更多
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.searchText && this.personSearchUrl) {
            this.getSearchData(this.searchText, this.searchUserList.pageIndex + 1).subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                if (d.hasOwnProperty("users")) {
                    _this.searchUserList.pageIndex = d['pageIndex'];
                    _this.searchUserList['users'] = __spread(_this.searchUserList['users'], d['users']);
                }
            }));
        }
    };
    /**
     * @param {?} text
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.getSearchData = /**
     * @param {?} text
     * @param {?} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    function (text, pageIndex, pageSize) {
        if (pageSize === void 0) { pageSize = this.pageSize; }
        if (this.personSearchUrl) {
            /** @type {?} */
            var url = "" + this.perfixStr + this.personSearchUrl + "?param=" + text + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex;
            return this.http.get(url);
            //return this.http.get('assets/data/discussionPerson3.json');
        }
        else {
            return of(true);
        }
    };
    /**
     * 选中人员或组织删除
     * @param data
     * @param type
     */
    /**
     * 选中人员或组织删除
     * @param {?} data
     * @param {?} type
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.selectionRemove = /**
     * 选中人员或组织删除
     * @param {?} data
     * @param {?} type
     * @return {?}
     */
    function (data, type) {
        var _this = this;
        if (!data)
            return;
        if (type == 'user') {
            /** @type {?} */
            var index = this.selectedUsers.findIndex((/**
             * @param {?} user
             * @return {?}
             */
            function (user) {
                return user.data.id == data.data.id;
            }));
            if (index >= 0) {
                this.selectedUsers.splice(index, 1);
            }
            data.data['checked'] = false;
        }
        else if (type == 'section') {
            /** @type {?} */
            var index = this.selectedSections.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.data.id == data.data.id;
            }));
            if (index >= 0) {
                this.selectedSections.splice(index, 1);
            }
            data['checked'] = false;
        }
        /** @type {?} */
        var dataParent = null;
        if (type == 'section') {
            dataParent = this.getSectionById(data.parent);
        }
        else if (type == 'user') {
            // bugNum:480649
            if (data['parent']) {
                dataParent = this.getSectionById(data.parent.data.id);
            }
        }
        if (dataParent && type == 'user') {
            // bugNum:480651
            // 如果删除的是用户并且还有父级别
            /** @type {?} */
            var delParentIndex = this.selectedSections.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.data.id == dataParent.data.id;
            }));
            if (delParentIndex > -1) {
                return;
            }
        }
        if (dataParent) {
            dataParent['checked'] = false;
            if ((dataParent.children && dataParent.children.length) || (dataParent.personnels.users && dataParent.personnels.users.length)) {
                /** @type {?} */
                var childrens = dataParent.children.filter((/**
                 * @param {?} child
                 * @return {?}
                 */
                function (child) {
                    return child['checked'];
                }));
                /** @type {?} */
                var users = dataParent.personnels.users.filter((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) {
                    return user['checked'];
                }));
                if ((childrens && childrens.length) || (users && users.length)) {
                    dataParent['indeterminate'] = true;
                }
                else {
                    dataParent['indeterminate'] = false;
                }
                if (dataParent.parents.length > 0) {
                    dataParent.parents.forEach((/**
                     * @param {?} par
                     * @return {?}
                     */
                    function (par) {
                        /** @type {?} */
                        var parSec = _this.getSectionById(par);
                        if ((parSec.children && parSec.children.length) || (parSec.personnels.users && parSec.personnels.users.length)) {
                            /** @type {?} */
                            var parchildrens = parSec.children.filter((/**
                             * @param {?} child
                             * @return {?}
                             */
                            function (child) {
                                return child['checked'];
                            }));
                            /** @type {?} */
                            var parusers = parSec.personnels.users.filter((/**
                             * @param {?} user
                             * @return {?}
                             */
                            function (user) {
                                return user['checked'];
                            }));
                            if ((parchildrens && parchildrens.length) || (parusers && parusers.length)) {
                                parSec['indeterminate'] = true;
                            }
                            else {
                                if (dataParent['indeterminate']) {
                                    parSec['indeterminate'] = dataParent['indeterminate'];
                                }
                                else {
                                    parSec['indeterminate'] = false;
                                }
                            }
                        }
                    }));
                }
            }
        }
    };
    /**
     * 删除右侧全部数据
     */
    /**
     * 删除右侧全部数据
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.moveAllToLeft = /**
     * 删除右侧全部数据
     * @return {?}
     */
    function () {
        this.selectedUsers.forEach((/**
         * @param {?} user
         * @return {?}
         */
        function (user) {
            user.data['checked'] = false;
        }));
        this.selectedSections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            item['checked'] = false;
        }));
        this.sectionDataTiled.forEach((/**
         * @param {?} sec
         * @return {?}
         */
        function (sec) {
            sec['indeterminate'] = false;
            sec['checked'] = false;
            sec['disabled'] = false;
            if (JSON.stringify(sec.personnels) != '{}' && sec['personnels']['users'].length) {
                sec['personnels']['users'].forEach((/**
                 * @param {?} user
                 * @return {?}
                 */
                function (user) {
                    user['checked'] = false;
                }));
            }
        }));
        this.selectedUsers = [];
        this.selectedSections = [];
        this.cd.markForCheck();
    };
    /**
     *
     * @param numberType 0：取消；1：确定
     */
    /**
     *
     * @param {?} numberType 0：取消；1：确定
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.returnResult = /**
     *
     * @param {?} numberType 0：取消；1：确定
     * @return {?}
     */
    function (numberType) {
        this.finalText = '';
        if (numberType) {
            // console.log(this.selectedUsers,this.selectedSections);
            this.selectionsChange.emit({
                info: 'confirm',
                data: {
                    users: this.selectedUsers,
                    section: this.selectedSections
                }
            });
            // this.selections.forEach(item => {
            //     this.finalText += item[this.listDisplayText] + '；';
            // })
        }
        else {
            this.selectionsChange.emit({
                info: 'cancel',
                data: {
                    users: [],
                    section: []
                }
            });
        }
        this.moveAllToLeft();
        this.searchText = '';
        this.searchUser();
        this.personnelDialog.close();
    };
    /**
     *  面包屑列表显示
     */
    /**
     *  面包屑列表显示
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.initCrumbsList = /**
     *  面包屑列表显示
     * @return {?}
     */
    function () {
        /** @type {?} */
        var crumbsListWidth = this.crumbsList.nativeElement.offsetWidth - 30;
        /** @type {?} */
        var crumbsListItems = this.crumbsList.nativeElement.children;
        /** @type {?} */
        var crumbsListItemWidth = 0;
        if (crumbsListItems && crumbsListItems.length) {
            for (var i = crumbsListItems.length - 1; i >= 0; i--) {
                this.renderer.setStyle(crumbsListItems[i], 'display', 'flex');
                /** @type {?} */
                var width = crumbsListItems[i].offsetWidth;
                crumbsListItemWidth += width;
                if (crumbsListItemWidth >= crumbsListWidth) {
                    this.renderer.setStyle(crumbsListItems[i], 'display', 'none');
                }
                else {
                    this.renderer.setStyle(crumbsListItems[i], 'display', 'flex');
                }
            }
        }
        if (crumbsListItemWidth >= crumbsListWidth) {
            this.crumbsEllipsis = true;
        }
        else {
            this.crumbsEllipsis = false;
        }
    };
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.crumbsMore = /**
     * @return {?}
     */
    function () {
        if (this.sectionCrumbs && this.sectionCrumbs.length) {
            this.crumbsClick(this.sectionCrumbs[0]);
        }
    };
    /**
     * @param {?} value
     * @param {?} field
     * @param {?} array
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype._isInArray = /**
     * @param {?} value
     * @param {?} field
     * @param {?} array
     * @return {?}
     */
    function (value, field, array) {
        if (!field || !value) {
            throw new Error('前2个参数必填');
        }
        return array.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return value === item[field]; })) ? true : false;
    };
    /**
     * @param {?} value
     * @param {?} field
     * @param {?} array
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype._isSelectedInArray = /**
     * @param {?} value
     * @param {?} field
     * @param {?} array
     * @return {?}
     */
    function (value, field, array) {
        if (!field || !value) {
            throw new Error('前2个参数必填');
        }
        return array.find((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return value === item['data'][field]; })) ? true : false;
    };
    /**
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.moveAllToLeft();
        this.clearSearch();
        this.searchUser();
    };
    /**
     * 显示或隐藏正在加载
     * @param showOrHide ：true为显示，hide为隐藏
     */
    /**
     * 显示或隐藏正在加载
     * @private
     * @param {?} showOrHide ：true为显示，hide为隐藏
     * @return {?}
     */
    DiscussionPersonnelComponent.prototype.showOrHideLoading = /**
     * 显示或隐藏正在加载
     * @private
     * @param {?} showOrHide ：true为显示，hide为隐藏
     * @return {?}
     */
    function (showOrHide) {
        if (!this.discussionContent || !this.loadingSer) {
            return;
        }
        if (showOrHide) {
            // 打开
            if (!this.loadingInstance) {
                this.loadingInstance = this.loadingSer.show({ delay: 500, container: this.discussionContent, type: 1, message: '全力加载中...' });
            }
        }
        else if (this.loadingInstance) {
            // 关闭
            this.loadingSer.close(this.loadingInstance.id);
            this.loadingInstance = null;
        }
    };
    DiscussionPersonnelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-discussion-personnel',
                    template: "<div class=\"farris-discussion-personnel-wrapper\">\r\n    <button class=\"btn btn-link\" (click)=\"personnelDialog.show()\">{{ 'discussionGroup.advancedQuery' | locale }}</button>\r\n</div>\r\n<ng-template #buttonRef>\r\n    <div class=\"farris-input-wrap mr-auto f-utils-overflow-hidden\" *ngIf=\"errorText\" [title]=\"errorText\">\r\n        <div class=\"farris-feedback f-state-invalid position-static text-ellipse\"\r\n            style=\" white-space: nowrap;text-overflow: ellipsis;overflow: hidden;\">\r\n            <span class=\"f-icon f-icon-message_warning f-feedback-icon mr-2\"></span>{{errorText}}\r\n        </div>\r\n    </div>\r\n    <button class=\"btn btn-secondary\" (click)=\"returnResult(0)\">{{ 'discussionGroup.cancel' | locale }}</button>\r\n    <button class=\"btn btn-primary\" (click)=\"returnResult(1)\">{{ 'discussionGroup.confirm' | locale }}</button>\r\n</ng-template>\r\n<farris-dialog #personnelDialog [buttons]=\"buttonRef\" [width]=\"690\" [height]=\"520\" [resizable]=\"false\" [title]=\"selectEmployee\" (opened)=\"dialogOpend()\" (closed)=\"closeDialog()\">\r\n    <div class=\"f-discussion-dialog-content\" #discussionContent>\r\n        <div class=\"f-discussion-dialog-content-left col-6 d-flex flex-column\">\r\n            <div class=\"f-discussion-personnel-search\">\r\n                <input-group [placeholder]=\"placeholder\" [groupText]=\"groupIcon\" [(ngModel)]=\"searchText\" (clear)=\"clearSearch()\" (valueChange)=\"searchUser()\" (enterHandle)=\"searchUser()\" (clickHandle)=\"searchUser()\"></input-group>\r\n            </div>\r\n            <div class=\"f-discussion-tab-content f-utils-fill d-flex flex-column\" >\r\n                <div class=\"f-discussion-personnel-content f-utils-fill d-flex flex-column\" [ngClass]=\"{'f-discussion-personnel-content-hide': showSearchList}\">\r\n                    <div class=\"f-discussion-personnel-crumbs d-flex\">\r\n                        <ul class=\"crumbs-list d-flex\" #crumbsList [ngClass]=\"{'crumbs-list-padding': crumbsEllipsis}\" *ngIf=\"sectionCrumbs && sectionCrumbs.length\">\r\n                            <li class=\"crumbs-list-item\" *ngFor=\"let crumbs of sectionCrumbs;let first = first;let last = last;\" (click)=\"crumbsClick(crumbs)\"  \r\n                            [ngClass]=\"{'crumbs-list-item-disabled': !(first || !last)}\">\r\n                                <!-- bugNum\uFF1A449399 -->\r\n                                <span class=\"crumbs-text\" [title]=\"crumbs.name\">{{crumbs.name}}</span>\r\n                                <span class=\"crumbs-arrow f-icon f-icon-arrow-chevron-right\" *ngIf=\"first || !last\"></span>\r\n                            </li>\r\n                        </ul>\r\n                        <div class=\"crumbs-list-ellipsis crumbs-list-item\" *ngIf=\"crumbsEllipsis\" (click)=\"crumbsMore()\">\r\n                            <span class=\"crumbs-text\">...</span>\r\n                            <span class=\"crumbs-arrow f-icon f-icon-arrow-chevron-right\"></span>\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"f-discussion-section-content f-utils-fill\">\r\n                        <perfect-scrollbar>\r\n                            <ul class=\"f-discussion-section-list\">\r\n                                <!-- <li class=\"section-list-item\" *ngIf=\"currentSectionData.length || currentSectionPerson.users.length\" (click)=\"handleClickAll($event)\">\r\n                                    <div class=\"custom-control custom-checkbox  custom-control-inline section-list-item-checkbox\">\r\n                                        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"currentSection.checked\" [disabled]=\"currentSection.disabled\" [indeterminate]=\"currentSection.indeterminate\">\r\n                                        <label class=\"custom-control-label\"></label>\r\n                                    </div>\r\n                                    <div class=\"section-list-item-name f-utils-fill\">\r\n                                        \u5168\u9009\r\n                                    </div>\r\n                                </li> -->\r\n                                <li class=\"section-list-item\" *ngFor=\"let section of currentSectionData\">\r\n                                    <div class=\"custom-control custom-checkbox custom-control-inline section-list-item-checkbox\" (click)=\"handleClick($event,section,'section')\">\r\n                                        <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"section.checked\" [indeterminate]=\"section.indeterminate\" [disabled]=\"currentSection.disabled\">\r\n                                        <label class=\"custom-control-label\"></label>\r\n                                    </div>\r\n                                    <div class=\"section-list-item-name f-utils-fill\" [attr.data-orgid]=\"section.data.id\" [title]=\"section.data.name\" (click)=\"handleClick($event,section,'section')\">\r\n                                        {{section.data.name}}\r\n                                    </div>\r\n                                    <div class=\"section-list-item-next\" (click)=\"sectionNext(section)\">\r\n                                        {{ 'discussionGroup.next' | locale }}\r\n                                    </div>\r\n                                </li>\r\n                                <ng-container *ngIf=\"currentSectionPerson\">\r\n                                    <li class=\"section-list-item person-list-item\" *ngFor=\"let person of currentSectionPerson.users\" (click)=\"handleClick($event,person,'user')\">\r\n                                        <div class=\"custom-control custom-checkbox  custom-control-inline section-list-item-checkbox\">\r\n                                            <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"person.checked\" [disabled]=\"currentSection.disabled\">\r\n                                            <label class=\"custom-control-label\"></label>\r\n                                        </div>\r\n                                        <div class=\"person-list-item-img\">\r\n                                            <img [src]=\"person.imgData\" alt=\"\" *ngIf=\"person.imgData\">\r\n                                            <div class=\"f-discussion-personnel-item-tip\" *ngIf=\"!person.imgData\" [innerHTML]=\"person | avatarHtml\"></div>\r\n                                        </div>\r\n                                        <div class=\"person-list-item-content f-utils-fill\">\r\n                                            <div class=\"section-list-item-name\" [title]=\"person.name\">\r\n                                                {{person.name}}\r\n                                            </div>\r\n                                            <div class=\"section-list-item-tip\">\r\n                                                <!-- {{person.email}} -->\r\n                                                <span *ngIf=\"sectionCrumbs.length>=2\">{{sectionCrumbs[sectionCrumbs.length - 2].name}}</span>\r\n                                                <span *ngIf=\"sectionCrumbs.length>=2\">/</span>\r\n                                                <span>{{sectionCrumbs[sectionCrumbs.length - 1].name}}</span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <!-- \u4EBA\u5458\u5217\u8868 -->\r\n                                    </li>\r\n                                    <div class=\"f-discussion-person-list-page\" *ngIf=\"currentSectionPerson['users'] && currentSectionPerson['users'].length\">\r\n                                        <span class=\"section-page-more section-page-text\" *ngIf=\"currentSectionPerson.pageIndex < currentSectionPerson.pageCount-1\" (click)=\"getMoreData()\">{{ 'discussionGroup.viewMore' | locale }}</span>\r\n                                        <!-- <span class=\"section-page-end section-page-text\"  *ngIf=\"currentSectionPerson.pageIndex >= currentSectionPerson.pageCount-1\">\u52A0\u8F7D\u5B8C\u6210</span> -->\r\n                                    </div>\r\n                                </ng-container>\r\n                            </ul>\r\n                            <div class=\"f-discussion-section-list-empty\" *ngIf=\"!currentSectionData.length &&(currentSectionPerson.users && !currentSectionPerson.users.length)\">\r\n                                <span class=\"f-icon f-icon-top_my\"></span>\r\n                                <span class=\"section-list-empty-text\">{{ 'discussionGroup.emptyList' | locale }}</span>\r\n                            </div>\r\n                        </perfect-scrollbar>\r\n                    </div>\r\n                </div>\r\n                <div class=\"f-discussion-personnel-search-list f-utils-fill\" [hidden]=\"!showSearchList\">\r\n                    <perfect-scrollbar>\r\n                        <ul class=\"f-discussion-section-list\" *ngIf=\"searchUserList && searchUserList.users && searchUserList.users.length\">\r\n                            <li class=\"section-list-item person-list-item\" *ngFor=\"let user of searchUserList.users\" (click)=\"handleSearchClick($event,user)\">\r\n                                <div class=\"custom-control custom-checkbox  custom-control-inline section-list-item-checkbox\">\r\n                                    <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"user.checked\">\r\n                                    <label class=\"custom-control-label\"></label>\r\n                                </div>\r\n                                <div class=\"person-list-item-img\">\r\n                                    <img [src]=\"user.imgData\" alt=\"\" *ngIf=\"user.imgData\">\r\n                                    <div class=\"f-discussion-personnel-item-tip\" *ngIf=\"!user.imgData\" [innerHTML]=\"user | avatarHtml\"></div>\r\n                                </div>\r\n                                <div class=\"person-list-item-content f-utils-fill\">\r\n                                    <div class=\"section-list-item-name\" [title]=\"user.name\">\r\n                                        {{user.name}}\r\n                                    </div>\r\n                                    <div class=\"section-list-item-tip\">\r\n                                        <span [innerHTML]=\"user | getOrgText:sectionData\"></span>\r\n                                    </div>\r\n                                </div>\r\n                            </li>\r\n                            <div class=\"f-discussion-person-list-page\">\r\n                                <span class=\"section-page-more section-page-text\" *ngIf=\"searchUserList.pageIndex < searchUserList.pageCount-1\" (click)=\"getMoreSearchData()\">{{ 'discussionGroup.viewMore' | locale }}</span>\r\n                            </div>\r\n                        </ul>\r\n                        <div class=\"f-discussion-section-list-empty\" *ngIf=\"!searchUserList.users || !searchUserList.users.length\">\r\n                            <span class=\"f-icon f-icon-top_my\"></span>\r\n                            <span class=\"section-list-empty-text\">{{ 'discussionGroup.emptyList' | locale }}</span>\r\n                        </div>\r\n                    </perfect-scrollbar>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"f-discussion-dialog-content-right f-utils-fill d-flex flex-column\">\r\n            <div class=\"f-discussion-selected-personnel f-utils-fill d-flex flex-column\">\r\n                <div class=\"f-discussion-selected-personnel-header\">\r\n                    <div class=\"f-discussion-selected-personnel-header-text\">\r\n                        <span>{{ 'discussionGroup.selected' | locale }}</span>(<span>{{ 'discussionGroup.people' | locale }}</span><span>{{selectedUsers.length}}</span><span>{{ 'discussionGroup.per' | locale }}</span>\uFF0C<span>{{ 'discussionGroup.section' | locale }}</span><span>{{selectedSections.length}}</span><span>{{ 'discussionGroup.pcs' | locale }}</span>)\r\n                    </div>\r\n                    <div class=\"f-discussion-selected-personnel-header-btn\" (click)=\"moveAllToLeft()\">\r\n                        <button class=\"btn btn-link\">{{ 'discussionGroup.emptySelected' | locale }}</button>\r\n                    </div>\r\n                </div>\r\n                <div class=\"f-discussion-selected-personnel-content f-utils-fill d-flex flex-column\">\r\n                    <div class=\"f-discussion-selected-list f-utils-fill\">\r\n                        <perfect-scrollbar>\r\n                            <div class=\"f-discussion-selected-item\" *ngFor=\"let user of selectedUsers\">\r\n                                <div class=\"f-discussion-personnel-item-avatar\">\r\n                                    <img [src]=\"user.data.imgData\" alt=\"\" *ngIf=\"user.data.imgData\">\r\n                                    <div class=\"f-discussion-personnel-item-tip\" *ngIf=\"!user.data.imgData\" [innerHTML]=\"user.data | avatarHtml\"></div>\r\n                                </div>\r\n                                <div class=\"f-discussion-selected-item-text f-utils-fill\">\r\n                                    <div class=\"f-discussion-selected-name\">\r\n                                        {{user.data.name}}\r\n                                    </div>\r\n                                    <div class=\"f-discussion-selected-item-tip\" *ngIf=\"user.parent\">\r\n                                        <span *ngIf=\"user.parent.parentsArr.length>=1\">{{user.parent.parentsArr[user.parent.parentsArr.length - 1].name}}</span>\r\n                                            <span *ngIf=\"user.parent.parentsArr.length>=1\">/</span>\r\n                                            <span>{{user.parent.data.name}}</span>\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"f-discussion-selected-item-remove\" (click)=\"selectionRemove(user,'user')\">\r\n                                    <span class=\"f-icon f-icon-close-outline\"></span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"f-discussion-selected-item\" *ngFor=\"let section of selectedSections\">\r\n                                <div class=\"f-discussion-selected-item-text f-utils-fill\">\r\n                                    <div class=\"f-discussion-selected-name\">\r\n                                        {{section.data.name}}\r\n                                    </div>\r\n                                </div>\r\n                                <div class=\"f-discussion-selected-item-remove\" (click)=\"selectionRemove(section,'section')\">\r\n                                    <span class=\"f-icon f-icon-close-outline\"></span>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"f-discussion-section-list-empty\" *ngIf=\"!selectedUsers.length && !selectedSections.length\">\r\n                                <span class=\"f-icon f-icon-top_my\"></span>\r\n                                <span class=\"section-list-empty-text\">{{ 'discussionGroup.emptyRight' | locale }}</span>\r\n                            </div>\r\n                        </perfect-scrollbar>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</farris-dialog>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    DiscussionPersonnelComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: NgZone },
        { type: HttpClient },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    DiscussionPersonnelComponent.propDecorators = {
        listIdField: [{ type: Input }],
        listDisplayText: [{ type: Input }],
        sectionData: [{ type: Input }],
        orgUrl: [{ type: Input }],
        personSearchUrl: [{ type: Input }],
        urlGetOrgByLayer: [{ type: Input }],
        personnelDialog: [{ type: ViewChild, args: ['personnelDialog',] }],
        selectionsChange: [{ type: Output }],
        lineDataChange: [{ type: Output }],
        openDialog: [{ type: Output }],
        ougUsers: [{ type: Output }],
        crumbsList: [{ type: ViewChild, args: ['crumbsList',] }],
        discussionContent: [{ type: ViewChild, args: ['discussionContent',] }]
    };
    return DiscussionPersonnelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionListDirective = /** @class */ (function () {
    function DiscussionListDirective(discussionListService) {
        this.discussionListService = discussionListService;
        // private comments=[];
        // @Input('discussionListData') 
        // set discussionListData(datas){
        //     if(datas){
        //         this.discussionListService.resetData(datas);
        //         this.comments=[...datas];
        //     }
        // };
        // get discussionListData(){
        //     return this.comments;
        // }
        this._discussionListData = [];
    }
    Object.defineProperty(DiscussionListDirective.prototype, "discussionListData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._discussionListData;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                this._discussionListData = data;
                this.discussionListService.resetData(data);
                // this.comments=[...data];
            }
        },
        enumerable: true,
        configurable: true
    });
    DiscussionListDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[fDiscussionList]'
                },] }
    ];
    /** @nocollapse */
    DiscussionListDirective.ctorParameters = function () { return [
        { type: DiscussionListService }
    ]; };
    DiscussionListDirective.propDecorators = {
        discussionListData: [{ type: Input }]
    };
    return DiscussionListDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SafeHtmlPipe = /** @class */ (function () {
    function SafeHtmlPipe(sanitized) {
        this.sanitized = sanitized;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    SafeHtmlPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return this.sanitized.bypassSecurityTrustHtml(value);
    };
    SafeHtmlPipe.decorators = [
        { type: Pipe, args: [{ name: 'safeHtml' },] }
    ];
    /** @nocollapse */
    SafeHtmlPipe.ctorParameters = function () { return [
        { type: DomSanitizer }
    ]; };
    return SafeHtmlPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AvatarHtmlPipe = /** @class */ (function () {
    function AvatarHtmlPipe() {
    }
    /**
     * @param {?} item
     * @return {?}
     */
    AvatarHtmlPipe.prototype.transform = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var str = item['name'];
        if (str) {
            return str.substring(str.length - 2, str.length);
        }
        else {
            return '';
        }
    };
    AvatarHtmlPipe.decorators = [
        { type: Pipe, args: [{ name: 'avatarHtml' },] }
    ];
    return AvatarHtmlPipe;
}());
var GetOrgTextPipe = /** @class */ (function () {
    function GetOrgTextPipe() {
    }
    /**
     * @param {?} item
     * @param {?} orgs
     * @return {?}
     */
    GetOrgTextPipe.prototype.transform = /**
     * @param {?} item
     * @param {?} orgs
     * @return {?}
     */
    function (item, orgs) {
        /** @type {?} */
        var str = item['orgId'];
        if (orgs && orgs.length) {
            /** @type {?} */
            var sec_1 = orgs.find((/**
             * @param {?} org
             * @return {?}
             */
            function (org) {
                return org['id'] == str;
            }));
            /** @type {?} */
            var orgtext = '';
            if (sec_1) {
                if (sec_1['parentId'] != '') {
                    /** @type {?} */
                    var par = orgs.find((/**
                     * @param {?} org
                     * @return {?}
                     */
                    function (org) {
                        return org['id'] == sec_1['parentId'];
                    }));
                    orgtext = par ? par.name + "/" + sec_1['name'] : sec_1['name'];
                }
                else {
                    orgtext = sec_1['name'];
                }
            }
            return orgtext;
        }
        else {
            return '';
        }
    };
    GetOrgTextPipe.decorators = [
        { type: Pipe, args: [{ name: 'getOrgText' },] }
    ];
    return GetOrgTextPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DiscussionGroupModule = /** @class */ (function () {
    function DiscussionGroupModule() {
    }
    DiscussionGroupModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [DiscussionEditorComponent, DiscussionListComponent, DiscussionPersonnelComponent, SafeHtmlPipe, AvatarHtmlPipe, GetOrgTextPipe, DiscussionListDirective],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ModalModule,
                        FarrisDialogModule,
                        FarrisCommonModule,
                        LoadingModule.forRoot(),
                        PerfectScrollbarModule,
                        TreeModule,
                        PaginationModule,
                        NotifyModule,
                        HttpClientModule,
                        DateHelperModule.forRoot(),
                        LocaleModule.forRoot(),
                        InputGroupModule
                    ],
                    providers: [
                        BsModalService,
                        ComponentLoaderFactory,
                        PositioningService,
                        DiscussionListService
                    ],
                    exports: [DiscussionEditorComponent, DiscussionListComponent, DiscussionPersonnelComponent, SafeHtmlPipe, AvatarHtmlPipe, GetOrgTextPipe, DiscussionListDirective],
                    entryComponents: [DiscussionPersonnelComponent]
                },] }
    ];
    return DiscussionGroupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { DiscussionGroupService, DiscussionListComponent, DiscussionEditorComponent, MsgInfo, DiscussionPersonnelComponent, DiscussionListDirective, DiscussionListService, DiscussionGroupModule, SafeHtmlPipe, AvatarHtmlPipe, GetOrgTextPipe };

//# sourceMappingURL=farris-discussion-group.js.map