import { Component, Input, Output, EventEmitter, ViewChild, Directive, ElementRef, Injector, NgModule } from '@angular/core';
import { TreeTableComponent, TreeTableModule } from '@farris/ui-treetable';
import { CommonUtils, FarrisCommonModule } from '@farris/ui-common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeComponent = /** @class */ (function () {
    function TreeComponent(utils) {
        this.utils = utils;
        this.showTips = true;
        /**
         * 宽度
         */
        this.width = 500;
        /**
         * 高度
         */
        this.height = 400;
        this.showFilterBar = false;
        /**
         * 是否启用多选
         */
        this.singleSelect = true;
        /**
         * 启用多选后，是否显示checkbox
         */
        this.showCheckbox = true;
        /**
         * 显示图标
         */
        this.showIcon = false;
        /**
         * 显示边框线
         */
        this.showBorder = false;
        /**
         * 禁用。 禁用时不允许选中行
         */
        this.disabled = false;
        /**
         * 数据加载方式
         * - all: 全部加载
         * - async: 分层加载
         */
        this.loadDataType = 'all';
        /**
         * 当多选时，选中当前行并钩选
         */
        this.checkOnSelect = false;
        /**
         * 当多选时，钩选并选中当前行
         */
        this.selectOnCheck = false;
        /**
         * 启用多选时，此属性为true 时，仅当前行选中
         */
        this.onlySelectSelf = false;
        /**
         * 设置为true时自适应父容的尺寸
         */
        this.fit = false;
        /**
         * 启用级联选中功能
         */
        this.cascadeCheck = true;
        /**
         * 向下级联选中
         */
        this.cascadeDown = true;
        /**
         * 向上级联选中
         */
        this.cascadeUp = true;
        /**
         * 空数据时，显示的提示文本
         */
        this.emptyMessage = '暂无数据';
        /**
         * 单击行选中后，在次点击不会被取消选中状态;
         */
        this.keepSelect = true;
        /**
         * 虚拟加载
         */
        this.virtualized = false;
        /**
         * 仅允许选择叶子节点
         * - default: 应用服务器端传回的设置，如果服务器端没有设置，则与 no 保持一至；
         * - yes: 如果客户端设置为 `yes`, 服务器端的设置失效；
         * - no: 允许选择所有节点；服务器端设置失效
         */
        this.onlySelectLeaf = 'default';
        /**
         * 叶子节点图标
         */
        this.leafIcon = 'file';
        /**
         * 节点展开图标
         */
        this.expandIcon = 'folder-open';
        /**
         * 节点折叠图标
         */
        this.collapseIcon = 'folder';
        /**
         * 启用远端排序
         */
        this.remoteSort = true;
        this.data = [];
        /**
         * 附加按钮TXT
         */
        this.appendText = '';
        /**
         * 附加按钮点击事件
         */
        this.appendBtnClick = new EventEmitter();
        /**
         * 选中事件
         */
        this.nodeSelected = new EventEmitter();
        /**
         * 取消选中事件
         */
        this.nodeUnSelect = new EventEmitter();
        /**
         * 钩选
         */
        this.nodeChecked = new EventEmitter();
        /**
         * 取消钩选
         */
        this.nodeUnChecked = new EventEmitter();
        /**
         * 查询
         */
        this.search = new EventEmitter();
        this.dblClick = new EventEmitter();
        this.loadedData = new EventEmitter();
    }
    /**
     * @return {?}
     */
    TreeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeComponent.prototype.onMouseEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.appendText) {
            ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'inline-block';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeComponent.prototype.onMouseLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.appendText) {
            ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'none';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeComponent.prototype.onClickAppendBtn = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.appendBtnClick.emit();
        $event.stopPropagation();
    };
    TreeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-tree',
                    template: "\n        <farris-treetable #t2\n            [width]=\"width\"\n            [height]=\"height\"\n            [data]=\"data\"\n            [idField]=\"idField\"\n            [singleSelect]=\"singleSelect\"\n            [showCheckbox]=\"showCheckbox\"\n            [showIcon]=\"showIcon\"\n            [showFilterBar]=\"false\"\n            [showBorder]=\"showBorder\"\n            [disabled]=\"disabled\"\n            [loadDataType]=\"loadDataType\"\n            [checkOnSelect]=\"checkOnSelect\"\n            [selectOnCheck]=\"selectOnCheck\"\n            [onlySelectSelf]=\"onlySelectSelf\"\n            [fit]=\"fit\"\n            [cascadeCheck]=\"cascadeCheck\"\n            [cascadeDown]=\"cascadeDown\"\n            [cascadeUp]=\"cascadeUp\"\n            [emptyMessage]=\"emptyMessage\"\n            [keepSelect]=\"keepSelect\"\n            [virtualized]=\"virtualized\"\n            [onlySelectLeaf]=\"onlySelectLeaf\"\n            [leafIcon]=\"leafIcon\"\n            [expandIcon]=\"expandIcon\"\n            [collapseIcon]=\"collapseIcon\"\n            [remoteSort]=\"remoteSort\"\n            [sortName]=\"displayText\"\n            [sortOrder]=\"sortOrder\"\n            [multiSort]=\"false\"\n            (nodeSelected)=\"nodeSelected.emit($event)\"\n            (nodeUnSelect)=\"nodeUnSelect.emit($event)\"\n            (nodeChecked)=\"nodeChecked.emit($event)\"\n            (nodeUnChecked)=\"nodeUnChecked.emit($event)\"\n            (search)=\"search.emit($event)\"\n            (dblClick)=\"dblClick.emit($event)\"\n            (loadedData)=\"loadedData.emit($event)\"\n        >\n            <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\">\n                <tr\n                    #row=\"row\"\n                    [selectRow]=\"rowNode\"\n                    [dblclick]=\"true\"\n                    (mouseenter)=\"onMouseEnter($event)\"\n                    (mouseleave)=\"onMouseLeave($event)\"\n                    class=\"farris-table-selectedrow\"\n                >\n                    <td style=\"border: 0\" [style.color]=\"row.selectRowDisabled ? '#a6a6a6' : '#333'\">\n                        <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\n                        <span [show-title]=\"showTips\"\n                            [innerHTML]=\"(utils || t2.utils).getValue(displayText, rowData, true) | safe: 'html'\"></span>\n\n                        <span\n                            class=\"rbtn\"\n                            style=\" float: right; width: 40px; display:none; cursor: pointer\"\n                            (click)=\"onClickAppendBtn($event)\"\n                            >{{ appendText }}</span\n                        >\n                    </td>\n                </tr>\n            </ng-template>\n        </farris-treetable>\n    "
                }] }
    ];
    /** @nocollapse */
    TreeComponent.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    TreeComponent.propDecorators = {
        treeTable: [{ type: ViewChild, args: [TreeTableComponent,] }],
        showTips: [{ type: Input }],
        width: [{ type: Input }],
        height: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        singleSelect: [{ type: Input }],
        showCheckbox: [{ type: Input }],
        idField: [{ type: Input }],
        displayText: [{ type: Input }],
        showIcon: [{ type: Input }],
        showBorder: [{ type: Input }],
        disabled: [{ type: Input }],
        loadDataType: [{ type: Input }],
        checkOnSelect: [{ type: Input }],
        selectOnCheck: [{ type: Input }],
        onlySelectSelf: [{ type: Input }],
        fit: [{ type: Input }],
        cascadeCheck: [{ type: Input }],
        cascadeDown: [{ type: Input }],
        cascadeUp: [{ type: Input }],
        emptyMessage: [{ type: Input }],
        keepSelect: [{ type: Input }],
        virtualized: [{ type: Input }],
        onlySelectLeaf: [{ type: Input }],
        leafIcon: [{ type: Input }],
        expandIcon: [{ type: Input }],
        collapseIcon: [{ type: Input }],
        remoteSort: [{ type: Input }],
        sortOrder: [{ type: Input }],
        data: [{ type: Input }],
        appendText: [{ type: Input }],
        appendBtnClick: [{ type: Output }],
        nodeSelected: [{ type: Output }],
        nodeUnSelect: [{ type: Output }],
        nodeChecked: [{ type: Output }],
        nodeUnChecked: [{ type: Output }],
        search: [{ type: Output }],
        dblClick: [{ type: Output }],
        loadedData: [{ type: Output }]
    };
    return TreeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ShowTitleDirective = /** @class */ (function () {
    function ShowTitleDirective(el, injector) {
        this.el = el;
        this.injector = injector;
    }
    /**
     * @return {?}
     */
    ShowTitleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    ShowTitleDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.enableTips) {
            this.el.nativeElement.title = this.el.nativeElement.innerText;
        }
    };
    ShowTitleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[show-title]'
                },] }
    ];
    /** @nocollapse */
    ShowTitleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector }
    ]; };
    ShowTitleDirective.propDecorators = {
        enableTips: [{ type: Input, args: ['show-title',] }]
    };
    return ShowTitleDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeModule = /** @class */ (function () {
    function TreeModule() {
    }
    TreeModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        TreeComponent,
                        ShowTitleDirective
                    ],
                    imports: [
                        FarrisCommonModule.forRoot(),
                        TreeTableModule
                    ],
                    exports: [TreeComponent, ShowTitleDirective]
                },] }
    ];
    return TreeModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ShowTitleDirective, TreeComponent, TreeModule };

//# sourceMappingURL=farris-ui-tree.js.map