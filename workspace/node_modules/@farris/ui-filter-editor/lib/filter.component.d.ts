import { LocaleService } from "@farris/ui-locale";
import { EventEmitter, Injector, ElementRef, ComponentFactoryResolver, TemplateRef, ComponentRef, OnInit, ChangeDetectorRef } from "@angular/core";
import { BsModalRef, BsModalService } from "@farris/ui-modal";
import { LookupComponent } from "@farris/ui-lookup";
import { FilterCondition } from "@farris/ui-common/types";
import { FilterService } from "./services/filter.service";
import { FilterEditorComponent } from "./components/filter-editor.component";
import { CommonUtils } from "@farris/ui-common";
import { NotifyService } from "@farris/ui-notify";
export declare const FILTER_LOOKUPGRID_VALUE_ACCESSOR: any;
export interface FILTER_FIELD_EDITOR {
    type: "select" | "combo-tree" | "lookup";
    options?: any;
}
export declare class FilterComponent extends LookupComponent implements OnInit {
    private cfr;
    private modalService;
    el: ElementRef;
    private filterService;
    hostCls: string;
    text: string;
    conditions: FilterCondition[];
    originalData: FilterCondition[];
    /** 字段数据 */
    columns: {
        label: string;
        value: string;
    }[];
    showCode: boolean;
    showSql: boolean;
    enableExpress: boolean;
    fieldEditor: FILTER_FIELD_EDITOR;
    enableClear: boolean;
    returnType: "object" | "string";
    insertType: "above" | "below";
    /** 当值类型为 value 时是否显示按钮，默认不显示 */
    useCustomValue: boolean;
    openDialog: EventEmitter<{}>;
    showExpress: EventEmitter<{}>;
    btnRef: TemplateRef<any>;
    textbox: ElementRef<any>;
    showClearButton: boolean;
    cd: ChangeDetectorRef;
    dlgRef: BsModalRef;
    filterEditorRef: ComponentRef<FilterEditorComponent>;
    localeService: LocaleService;
    commonUtils: CommonUtils;
    notifySer: NotifyService;
    constructor(injector: Injector, cfr: ComponentFactoryResolver, modalService: BsModalService, el: ElementRef, filterService: FilterService);
    ngOnInit(): void;
    onmouseover(event: any): void;
    onmouseleave(event: any): void;
    showDialog(): void;
    writeValue(val: any): void;
    private checkSymbol;
    save(): void;
    cancel(): void;
    closeDialog(): void;
    clear(): void;
    private updateModel;
}
