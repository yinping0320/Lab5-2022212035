import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { __extends, __spread } from 'tslib';
import { cloneDeep } from 'lodash-es';
import { BsModalService } from '@farris/ui-modal';
import { FilterRelation, Compare, LeftBracket, RighttBracket, Relation, CompareOperators, ExpressValueType } from '@farris/ui-common/types';
import { NotifyService } from '@farris/ui-notify';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LookupComponent, LookupModule } from '@farris/ui-lookup';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { Injectable, Optional, Component, HostBinding, Input, Output, EventEmitter, Injector, ChangeDetectorRef, ElementRef, Renderer2, ViewChild, ChangeDetectionStrategy, ComponentFactoryResolver, forwardRef, HostListener, NgModule } from '@angular/core';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterService = /** @class */ (function () {
    function FilterService(utils) {
        this.conditionsChanged = new Subject();
        this.commonUtils = utils || new CommonUtils();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    FilterService.prototype.buildSqlWhere = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.commonUtils.buildSqlWhere(c);
    };
    /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    FilterService.prototype.isValid = /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    function (conditions, localeService) {
        if (conditions && conditions.length) {
            // 清除最后条件的关系符
            conditions[conditions.length - 1].relation = FilterRelation.Empty;
            // 检查关系连接符
            /** @type {?} */
            var emptyRelations = conditions
                .map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                if (n.relation == "" + FilterRelation.Empty) {
                    return { index: i, filter: n };
                }
                return null;
            }))
                .filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                return n && i !== conditions.length - 1;
            }));
            /** @type {?} */
            var relationFlag = true;
            if (emptyRelations.length) {
                relationFlag = false;
            }
            // 检查括号
            /** @type {?} */
            var bracketFlag = true;
            /** @type {?} */
            var bracketStr = '';
            for (var i = 0; i < conditions.length; i++) {
                bracketStr += conditions[i].lbracket + conditions[i].rbracket;
            }
            /** @type {?} */
            var l = bracketStr.length;
            if (l % 2 > 0) {
                bracketFlag = false;
            }
            else {
                for (var i = 0; i < l; i++) {
                    bracketStr = bracketStr.replace('()', '');
                }
                bracketFlag = !bracketStr.length;
            }
            // 检查字段是否设置
            /** @type {?} */
            var emptyFields = conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.filterField; })).length === 0;
            return {
                bracket: {
                    result: bracketFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.bracket') : '括号不匹配，请检查。'
                },
                relation: {
                    result: relationFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.relation') : '关系设置不完整，请检查。'
                },
                field: {
                    result: emptyFields,
                    msg: localeService ? localeService.getValue('filterEditor.validate.field') : '字段不允许为空，请检查。'
                }
            };
        }
        return true;
    };
    FilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FilterService.ctorParameters = function () { return [
        { type: CommonUtils, decorators: [{ type: Optional }] }
    ]; };
    return FilterService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterEditorComponent = /** @class */ (function () {
    function FilterEditorComponent(sanitizer, filterService, injector) {
        var _this = this;
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.injector = injector;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.insertType = 'below';
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.localeService = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        function (conditionList) {
            _this.conditions = conditionList;
        }));
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService, null);
            this.cd = this.injector.get(ChangeDetectorRef);
        }
    }
    /**
     * @return {?}
     */
    FilterEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            function (con) {
                /** @type {?} */
                var cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterEditorComponent.prototype.onTabChange = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.tabIndex = index;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterEditorComponent.prototype.onShowExpress = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.instance = this;
        this.showExpress.emit($event);
    };
    /**
     * @return {?}
     */
    FilterEditorComponent.prototype.validation = /**
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    FilterEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-editor',
                    template: "\n        <filter-tabs\n            class=\"f-utils-fill-flex-column\"\n            [showCode]=\"showCode\"\n            [showSql]=\"showSql\"\n            [columns]=\"columns\"\n            [height]=\"height\"\n            [enableExpress]=\"enableExpress\"\n            [enableFrontExpress]=\"enableFrontExpress\"\n            [conditions]=\"conditions\"\n            [fieldEditor]=\"fieldEditor\"\n            (showExpress)=\"onShowExpress($event)\"\n            (selectTabChange)=\"onTabChange($event)\"\n            [insertType]=\"insertType\"\n            [useCustomValue]=\"useCustomValue\">\n        </filter-tabs>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterEditorComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: FilterService },
        { type: Injector, decorators: [{ type: Optional }] }
    ]; };
    FilterEditorComponent.propDecorators = {
        columns: [{ type: Input }],
        conditions: [{ type: Input }],
        height: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        insertType: [{ type: Input }],
        useCustomValue: [{ type: Input }],
        showExpress: [{ type: Output }],
        cls: [{ type: HostBinding, args: ['class',] }]
    };
    return FilterEditorComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterGridComponent = /** @class */ (function () {
    function FilterGridComponent(el, render, filterService, messagerService) {
        this.el = el;
        this.render = render;
        this.filterService = filterService;
        this.messagerService = messagerService;
        this.LeftBracketData = LeftBracket;
        this.RighttBracketData = RighttBracket;
        this.relationData = Relation;
        this.operators = CompareOperators;
        this.columnSizeData = [60, 50, 120, 100, 60, 120, 50, 50];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.conditions = [];
        this.columns = [];
        this.enableExpress = false;
        this.enableFrontExpress = false;
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.insertType = 'below';
        this.defulatRelation = FilterRelation.And;
        this.showExpress = new EventEmitter();
        this.scrollContainer = null;
        // @ViewChild('ps') psRef: PerfectScrollbarComponent;
        this.currentCondition = null;
        this.newCondition = {
            filterField: '',
            value: '',
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Empty,
            compare: Compare.Equal,
            expresstype: ExpressValueType.Value
        };
        this.localeService = null;
        this.trackByValue = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        function (index, row) {
            return row ? row.value || row : index;
        });
        this.localeService = this.messagerService['localeService'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterGridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (!this.fieldEditor) {
            this.fieldEditor = { type: 'select', options: {} };
        }
        this.initRelationData();
        // this.newCondition.relation = this.defulatRelation || FilterRelation.And;
        if (!this.conditions || !this.conditions.length) {
            /** @type {?} */
            var firstCon = Object.assign({}, this.newCondition);
            this.conditions = [firstCon];
            this.changeConditionList();
        }
        // 默认选中第1行
        this.currentCondition = { index: 0, condition: this.conditions[0] };
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.initRelationData = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.localeService) {
            /** @type {?} */
            var andStr = this.localeService.getValue('filterEditor.relationValue.and');
            /** @type {?} */
            var orStr = this.localeService.getValue('filterEditor.relationValue.or');
            this.relationData = [
                { label: '', value: 0 },
                { label: andStr, value: 1 },
                { label: orStr, value: 2 }
            ];
        }
    };
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.itemIntoView = 
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.tablebodybox) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var tr = _this.tablebodybox.nativeElement.querySelector('tr.selected');
                if (tr) {
                    if (tr.scrollIntoViewIfNeeded) {
                        tr.scrollIntoViewIfNeeded(false);
                    }
                    else {
                        tr.scrollIntoView({ block: 'nearest' });
                    }
                }
            }), 50);
        }
    };
    /**
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    FilterGridComponent.prototype.insertCondition = /**
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    function (index, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var _newCondition = Object.assign({}, this.newCondition, { relation: FilterRelation.And });
        if (this.insertType === 'above') {
            if (index === 0) {
                this.conditions.unshift(_newCondition);
            }
            else {
                this.conditions.splice(index, 0, _newCondition);
            }
        }
        else {
            this.conditions.splice(index + 1, 0, _newCondition);
        }
        this.changeConditionList();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterGridComponent.prototype.removeCondition = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.conditions.splice(index, 1);
        this.changeConditionList();
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                if (this.conditions[index]) {
                    this.currentCondition = { index: index, condition: this.conditions[index] };
                }
                else {
                    if (this.conditions[index - 1]) {
                        this.currentCondition = { index: index - 1, condition: this.conditions[index - 1] };
                    }
                    else {
                        this.currentCondition = null;
                    }
                }
            }
            else {
                if (!this.conditions[this.currentCondition.index]) {
                    if (this.currentCondition.index > index) {
                        this.currentCondition.index = this.currentCondition.index - 1;
                    }
                    else {
                        this.currentCondition.index = this.currentCondition.index + 1;
                    }
                }
            }
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onAddFilter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newItem = Object.assign({}, this.newCondition);
        this.conditions.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n.relation == FilterRelation.Empty || !n.relation) {
                n.relation = FilterRelation.And;
            }
        }));
        this.conditions = __spread(this.conditions, [newItem]);
        this.changeConditionList();
        /** @type {?} */
        var newIdx = this.conditions.length - 1;
        this.currentCondition = { index: newIdx, condition: newItem };
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.messagerService.question('确认要清空当前所有条件吗？', (/**
         * @return {?}
         */
        function () {
            _this.conditions = [];
            _this.changeConditionList();
        }));
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveTop = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMovePrev = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index - 1, 0], tempArr));
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveNext = /**
     * @return {?}
     */
    function () {
        var _a;
        if (this.currentCondition) {
            /** @type {?} */
            var index = this.currentCondition.index;
            /** @type {?} */
            var tempArr = this.conditions.splice(index, 1);
            (_a = this.conditions).splice.apply(_a, __spread([index + 1, 0], tempArr));
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.onMoveBottom = /**
     * @return {?}
     */
    function () {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterGridComponent.prototype.changeConditionList = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.filterService.conditionsChanged.next(this.conditions);
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.itemIntoView();
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterGridComponent.prototype.selected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentCondition = $event;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterGridComponent.prototype.isSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    };
    /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    FilterGridComponent.prototype.showExpressDialog = /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    function ($event, condition, value) {
        /** @type {?} */
        var type = 'value';
        if (condition.expresstype == 1) {
            type = 'express';
        }
        else if (condition.expresstype == 'frontExpress') {
            type = 'frontExpress';
        }
        this.showExpress.emit({ event: $event, condition: condition, value: value, type: type });
    };
    /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    FilterGridComponent.prototype.onComboSelectChange = /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    function ($event, condition) {
        if ($event) {
            var data = $event.data;
            if (data) {
                condition.filterField = data['value'];
            }
        }
    };
    /**
     * @return {?}
     */
    FilterGridComponent.prototype.validation = /**
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    FilterGridComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-grid',
                    template: "<!-- <div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div> -->\r\n<div style=\"\r\n    border-top: 1px solid  white;\r\n    position: absolute;\r\n    top: 38px;\r\n    width: 100%;\r\n    z-index: 2;\r\n\"></div>\r\n<div class=\"table-body flex-fill win11Scroll show nobtn \" style=\"margin-left:14px; margin-right: 0; overflow-y: scroll;\" #tablebodybox>\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0;\">\r\n            <thead  style=\"position: sticky; top: 0; z-index: 1;\">\r\n                <tr>\r\n                    <th style=\"width: 60px\"></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                    <th style=\"width: 120px\"><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                    <th style=\"width: 100px\"><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                    <th style=\"width: 60px\"><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                    <th style=\"width: 120px\"><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"text-overflow: unset;\">\r\n                        <button type=\"button\" (click)=\"insertCondition(index, $event)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\"\r\n                        single-select [panelRef]=\"selectlbracketpanel\" [items]=\"LeftBracketData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectlbracketpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of LeftBracketData; trackBy: trackByValue\" [attr.value]=\"col\" [class.active]=\"condition.lbracket === col\">{{ col }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <ng-container *ngIf=\"fieldEditor.type === 'select'\" >\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.filterField\" name=\"filterField\" single-select [panelRef]=\"selectcolpanel\" [items]=\"columns\" [container]=\"scrollContainer || tablebodybox \">\r\n                                <!-- <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option> -->\r\n                            </select>\r\n\r\n                            <div #selectcolpanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                                <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                    <li class=\"dropdown-item\" *ngFor=\"let col of columns; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.filterField === col.value\">{{ col.label }}</li>\r\n                                </ul>\r\n                            </div>\r\n\r\n                        </ng-container>\r\n\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"filterField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.filterField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\">\r\n                        </farris-combo-lookup>\r\n\r\n\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" name=\"compare\" [(ngModel)]=\"condition.compare\" single-select [panelRef]=\"selectcomparepanel\" [items]=\"operators\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option> -->\r\n                        </select>\r\n                        <div #selectcomparepanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item\" *ngFor=\"let col of operators; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.compare === col.value\">{{ col.label }}</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" name=\"expresstype\" [(ngModel)]=\"condition.expresstype\" \r\n                        single-select [panelRef]=\"selectexpresstypepanel\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option [value]=\"0\">{{'filterEditor.expressType.value' | locale }}</option>\r\n                            <option [value]=\"1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</option>\r\n                            <option [value]=\"'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</option> -->\r\n                        </select>\r\n                        <div #selectexpresstypepanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"0\" [class.active]=\"condition.expresstype == 0\" >{{'filterEditor.expressType.value' | locale }}</li>\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"1\" [class.active]=\"condition.expresstype == 1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</li>\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"'frontExpress'\" [class.active]=\"condition.expresstype === 'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <input-group name=\"value\" [(ngModel)]=\"condition.value\" [groupText]=\"condition.expresstype == 1||condition.expresstype==='frontExpress' || useCustomValue ?groupIcon: ''\"\r\n                        (clickHandle)=\"showExpressDialog($event, condition, condition.value)\"></input-group>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\" single-select [panelRef]=\"selectrbracketpanel\" [items]=\"RighttBracketData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectrbracketpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of RighttBracketData; trackBy: trackByValue\" [attr.value]=\"col\" [class.active]=\"condition.rbracket === col\">{{ col }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\" single-select [panelRef]=\"selectrelationpanel\" [items]=\"relationData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectrelationpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of relationData; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.relation == col.value\">{{ col.label }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n</div>\r\n<div style=\"flex-shrink: 0; margin: 0 14px;\">\r\n<filter-footer\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></filter-footer>\r\n</div>\r\n",
                    changeDetection: ChangeDetectionStrategy.Default,
                    styles: ["\n        .filter-select { width:100%; padding-left: 0; padding-right: 0; }\n        .selected { background: #c2e4ff; }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterGridComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: FilterService },
        { type: MessagerService }
    ]; };
    FilterGridComponent.propDecorators = {
        conditions: [{ type: Input }],
        columns: [{ type: Input }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        height: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        useCustomValue: [{ type: Input }],
        insertType: [{ type: Input }],
        defulatRelation: [{ type: Input }],
        showExpress: [{ type: Output }],
        scrollContainer: [{ type: Input }],
        tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }]
    };
    return FilterGridComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterFooterComponent = /** @class */ (function () {
    function FilterFooterComponent(grid) {
        this.grid = grid;
        this.cls = 'f-filter-footer';
        this.addFilter = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.moveTop = new EventEmitter();
        this.movePrev = new EventEmitter();
        this.moveNext = new EventEmitter();
        this.moveBottom = new EventEmitter();
    }
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onAddFilter = /**
     * @return {?}
     */
    function () {
        this.addFilter.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onClear = /**
     * @return {?}
     */
    function () {
        this.clearFilter.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onMoveTop = /**
     * @return {?}
     */
    function () {
        this.moveTop.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onMovePrev = /**
     * @return {?}
     */
    function () {
        this.movePrev.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onMoveNext = /**
     * @return {?}
     */
    function () {
        this.moveNext.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.onMoveBottom = /**
     * @return {?}
     */
    function () {
        this.moveBottom.emit();
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.canUse = /**
     * @return {?}
     */
    function () {
        if (this.grid.currentCondition) {
            return this.grid.conditions.length > 1;
        }
        return false;
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.canMoveUp = /**
     * @return {?}
     */
    function () {
        if (this.canUse()) {
            return this.grid.currentCondition.index > 0;
        }
        return false;
    };
    /**
     * @return {?}
     */
    FilterFooterComponent.prototype.canMoveDown = /**
     * @return {?}
     */
    function () {
        if (this.canUse()) {
            return this.grid.currentCondition.index < this.grid.conditions.length - 1;
        }
        return false;
    };
    FilterFooterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-footer',
                    template: "\n    <div class=\"footer-container px-2\" style=\"height: 36px;\">\n        <button type=\"button\" (click)=\"onAddFilter()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-add\"></span> {{ 'filterEditor.addWhere' | locale }}</button>\n        <button type=\"button\" (click)=\"onClear()\" [disabled]=\"!grid.conditions.length\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-close\"></span> {{ 'filterEditor.clear' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMoveTop()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-end-up\"></span>\n            {{'filterEditor.moveTop' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveUp()\" (click)=\"onMovePrev()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-up\"></span>\n            {{'filterEditor.moveUp' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveNext()\"\n            class=\"k-button k-button-icontext k-flat \"><span class=\"f-icon f-icon-arrow-60-down\"></span>\n            {{'filterEditor.moveDown' | locale }}</button>\n        <button type=\"button\" [disabled]=\"!canMoveDown()\" (click)=\"onMoveBottom()\"\n            class=\"k-button k-button-icontext k-flat\"><span class=\"f-icon f-icon-arrow-end-down\"></span>\n            {{'filterEditor.moveBottom' | locale }}</button>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterFooterComponent.ctorParameters = function () { return [
        { type: FilterGridComponent }
    ]; };
    FilterFooterComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        addFilter: [{ type: Output }],
        clearFilter: [{ type: Output }],
        moveTop: [{ type: Output }],
        movePrev: [{ type: Output }],
        moveNext: [{ type: Output }],
        moveBottom: [{ type: Output }]
    };
    return FilterFooterComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterTabsComponent = /** @class */ (function () {
    function FilterTabsComponent() {
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.fieldEditor = { type: 'select' };
        this.selectTabChange = new EventEmitter();
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.showExpress = new EventEmitter();
        this.insertType = 'below';
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.currentTabIndex = 0;
    }
    /**
     * @return {?}
     */
    FilterTabsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} index
     * @return {?}
     */
    FilterTabsComponent.prototype.showTab = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.currentTabIndex = index;
        this.selectTabChange.emit(index);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterTabsComponent.prototype.showExpressDialog = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.showExpress.emit($event);
    };
    FilterTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-tabs',
                    template: "\n    <ul class=\"nav nav-tabs\" style=\"min-height: 38px\" *ngIf=\"showCode || showSql\">\n        <li class=\"nav-item\" style=\"    margin-left: 14px;\">\n            <a class=\"nav-link\" [class.active]=\"currentTabIndex === 0\"  (click)=\"showTab(0)\">{{ 'filterEditor.designTab' | locale }}</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"showCode\">\n            <a class=\"nav-link\" [class.active]=\"currentTabIndex === 1\" (click)=\"showTab(1)\">{{ 'filterEditor.jsonTab' | locale }}</a>\n        </li>\n        <li class=\"nav-item\" *ngIf=\"showSql\">\n            <a class=\"nav-link\" [class.active]=\"currentTabIndex === 2\" (click)=\"showTab(2)\">{{ 'filterEditor.sqlTab' | locale }}</a>\n        </li>\n    </ul>\n\n    <ng-container *ngIf=\"currentTabIndex === 0\">\n        <filter-grid style=\"overflow: hidden;\" [useCustomValue]=\"useCustomValue\"\n          [enableExpress]=\"enableExpress\" [enableFrontExpress]=\"enableFrontExpress\"\n          class=\"d-flex flex-column flex-fill\"  [fieldEditor]=\"fieldEditor\" [insertType]=\"insertType\"\n          [conditions]=\"conditions\" [columns]=\"columns\" (showExpress)=\"showExpressDialog($event)\"></filter-grid>\n    </ng-container>\n    <ng-container *ngIf=\"currentTabIndex === 1 && showCode\">\n        <filter-code [height]=\"height\" [conditions]=\"conditions\"></filter-code>\n    </ng-container>\n    <ng-container *ngIf=\"currentTabIndex === 2 && showSql\">\n        <filter-sql [height]=\"height\" [conditions]=\"conditions\"></filter-sql>\n    </ng-container>\n\n    ",
                    styles: [".nav-item { cursor: default;}\n        .nav-item a.active {font-weight: bold;}\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterTabsComponent.ctorParameters = function () { return []; };
    FilterTabsComponent.propDecorators = {
        columns: [{ type: Input }],
        conditions: [{ type: Input }],
        height: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        selectTabChange: [{ type: Output }],
        enableExpress: [{ type: Input }],
        enableFrontExpress: [{ type: Input }],
        showExpress: [{ type: Output }],
        insertType: [{ type: Input }],
        useCustomValue: [{ type: Input }]
    };
    return FilterTabsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var FILTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return FilterComponent; })),
    multi: true,
};
var FilterComponent = /** @class */ (function (_super) {
    __extends(FilterComponent, _super);
    function FilterComponent(injector, cfr, modalService, el, filterService) {
        var _this = _super.call(this, injector, el) || this;
        _this.cfr = cfr;
        _this.modalService = modalService;
        _this.el = el;
        _this.filterService = filterService;
        _this.hostCls = "f-cmp-inputgroup";
        _this.text = "";
        _this.conditions = [];
        _this.originalData = [];
        /**
         * 字段数据
         */
        _this.columns = [];
        _this.showCode = false;
        _this.showSql = false;
        _this.enableExpress = false;
        _this.fieldEditor = { type: "select", options: {} };
        _this.enableClear = true;
        _this.returnType = "object";
        _this.insertType = "below";
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        _this.useCustomValue = false;
        _this.openDialog = new EventEmitter();
        _this.showExpress = new EventEmitter();
        _this.showClearButton = false;
        _this.cd = null;
        _this.commonUtils = null;
        _this.notifySer = null;
        _this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        function (conditionList) {
            _this.conditions = conditionList;
        }));
        _this.notifySer = _this.injector.get(NotifyService, null);
        _this.localeService = _this.injector.get(LocaleService);
        _this.cd = _this.injector.get(ChangeDetectorRef);
        _this.commonUtils =
            _this.injector.get(CommonUtils, null) || new CommonUtils();
        return _this;
    }
    /**
     * @return {?}
     */
    FilterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterComponent.prototype.onmouseover = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = true;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterComponent.prototype.onmouseleave = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.showClearButton = false;
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === "combo-tree") {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [
                        { field: "label", title: "label", width: 100 },
                    ];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = "label";
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = "value";
                }
            }
            /** @type {?} */
            var filterEditorFactory = this.cfr.resolveComponentFactory(FilterEditorComponent);
            this.filterEditorRef = filterEditorFactory.create(this.injector);
            this.filterEditorRef.instance.columns = this.columns;
            this.filterEditorRef.instance.conditions = this.conditions;
            this.filterEditorRef.instance.useCustomValue = this.useCustomValue;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.filterEditorRef, {
                width: 800,
                height: 500,
                title: this.localeService.getValue("filterEditor.title"),
                enableScroll: false,
                minHeight: 398,
                minWidth: 798,
                iconCls: "f-icon f-icon-filter",
                buttons: this.btnRef,
                // dialogFooterStyles: { background: '#F4F6F9' },
                buttonAlign: "right",
                initialState: {
                    showCode: this.showCode,
                    showSql: this.showSql,
                    enableExpress: this.enableExpress,
                    fieldEditor: this.fieldEditor,
                    insertType: this.insertType,
                },
                closed: (/**
                 * @param {?} isCloseButtonClick
                 * @return {?}
                 */
                function (isCloseButtonClick) {
                    if (isCloseButtonClick) {
                        _this.cancel();
                    }
                }),
            });
            this.filterEditorRef.instance.height =
                this.dlgRef.dialog.instance.getContainerSize().height;
            this.filterEditorRef.instance.showExpress.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            function ($event) {
                _this.showExpress.emit($event);
            }));
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                _this.filterEditorRef.instance.height = size.containerHeight;
            }));
            this.filterEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    FilterComponent.prototype.writeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val) {
            if (typeof val === "string") {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterComponent.prototype.checkSymbol = /**
     * @private
     * @return {?}
     */
    function () {
        return this.filterService.isValid(this.conditions, this.localeService);
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.save = /**
     * @return {?}
     */
    function () {
        if (this.conditions.length) {
            /** @type {?} */
            var checkResult = this.checkSymbol();
            if (typeof checkResult === "object") {
                var bracket = checkResult.bracket, relation = checkResult.relation, field = checkResult.field;
                if (!bracket.result || !relation.result || !field.result) {
                    /** @type {?} */
                    var msg = "";
                    if (!bracket.result) {
                        msg = bracket.msg;
                    }
                    else if (!relation.result) {
                        msg = relation.msg;
                    }
                    else if (!field.result) {
                        msg = field.msg;
                    }
                    if (msg) {
                        if (this.notifySer) {
                            this.notifySer.warning(msg);
                        }
                        else {
                            alert(msg);
                        }
                        return;
                    }
                }
            }
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.filterField; }));
            // 转换in 操作符的value 值
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            function (con) {
                /** @type {?} */
                var cp = parseInt("" + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/,/g, "\r\n");
                }
                return con;
            }));
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
        else {
            this.text = "";
        }
        if (this.cd) {
            this.cd.detectChanges();
        }
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.conditions = this.originalData;
        this.closeDialog();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.updateModel();
        this.filterEditorRef = null;
        this.dlgRef.close();
    };
    /**
     * @return {?}
     */
    FilterComponent.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.text = "";
        this.conditions = [];
        this.updateModel();
    };
    /**
     * @private
     * @return {?}
     */
    FilterComponent.prototype.updateModel = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var v = this.conditions;
        if (this.returnType === "string") {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    };
    FilterComponent.decorators = [
        { type: Component, args: [{
                    selector: "filter,filter-textbox",
                    template: "<div class=\"input-group\">\r\n    <input #txtbox\r\n        class=\"form-control\" \r\n        [value]=\"text\"\r\n        [readonly]=\"!editable || readonly\"\r\n        [class.f-state-disabled] = \"disabled\"\r\n        [class.f-state-readonly] = \"readonly\"\r\n        [class.f-state-editable] = \"!editable\"\r\n        [disabled]=\"disabled\"/>\r\n    <div class=\"input-group-append\" *ngIf=\"!readonly && !disabled\">\r\n        <span *ngIf=\"showClearButton && enableClear\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\r\n            <i class=\"f-icon f-icon-lookup\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #defaultButtonRef>\r\n    <button class=\"btn btn-outline-secondary\" (click)=\"cancel()\"> {{ 'filterEditor.cancelButton'|locale }} </button>&nbsp;\r\n    <button class=\"btn btn-primary\" (click)=\"save()\"> {{ 'filterEditor.okButton'| locale }} </button>\r\n</ng-template>",
                    providers: [FILTER_LOOKUPGRID_VALUE_ACCESSOR, FilterService],
                    styles: ["\n            .lookup-clear {\n                cursor: pointer;\n                background: #fff !important;\n            }\n            .lookup-clear:hover {\n                background: #e9ecef !important;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: BsModalService },
        { type: ElementRef },
        { type: FilterService }
    ]; };
    FilterComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ["class",] }],
        columns: [{ type: Input }],
        showCode: [{ type: Input }],
        showSql: [{ type: Input }],
        enableExpress: [{ type: Input }],
        fieldEditor: [{ type: Input }],
        enableClear: [{ type: Input }],
        returnType: [{ type: Input }],
        insertType: [{ type: Input }],
        useCustomValue: [{ type: Input }],
        openDialog: [{ type: Output }],
        showExpress: [{ type: Output }],
        btnRef: [{ type: ViewChild, args: ["defaultButtonRef",] }],
        textbox: [{ type: ViewChild, args: ["txtbox",] }],
        onmouseover: [{ type: HostListener, args: ["mouseover", ["$event"],] }],
        onmouseleave: [{ type: HostListener, args: ["mouseleave", ["$event"],] }]
    };
    return FilterComponent;
}(LookupComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterSqlCodeComponent = /** @class */ (function () {
    function FilterSqlCodeComponent(filterService) {
        this.filterService = filterService;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
        this.sql = '';
    }
    /**
     * @return {?}
     */
    FilterSqlCodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.sql = this.filterService.buildSqlWhere(this.conditions);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FilterSqlCodeComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.conditions && !changes.conditions.isFirstChange()) {
            this.sql = this.filterService.buildSqlWhere(this.conditions);
        }
    };
    FilterSqlCodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-sql',
                    template: "\n    <pre class=\"flex-fill\" [style.height.px]=\"height - 38\">\n<code>{{ sql  }}</code>\n    </pre>\n    ",
                    styles: ["\n        pre {\n            color: #d8d9d9;\n            background: #424242;\n            padding-left: 20px;\n            padding-top: 20px;\n            margin-bottom: 0;\n            font-size: 16px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterSqlCodeComponent.ctorParameters = function () { return [
        { type: FilterService }
    ]; };
    FilterSqlCodeComponent.propDecorators = {
        height: [{ type: Input }],
        cls: [{ type: HostBinding, args: ['class',] }],
        conditions: [{ type: Input }]
    };
    return FilterSqlCodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterCodeComponent = /** @class */ (function () {
    function FilterCodeComponent(el) {
        this.el = el;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
    }
    /**
     * @return {?}
     */
    FilterCodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.style.overflow = 'auto';
    };
    FilterCodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-code',
                    template: "\n    <div style=\"overflow:auto\" [style.height.px]=\"height - 38\">\n        <pre class=\"flex-fill\">\n            <code>{{ conditions | json }}</code>\n        </pre>\n    </div>\n    ",
                    styles: ["\n        pre {\n            color: #d8d9d9;\n            background: #424242;\n            padding-left: 20px;\n            padding-top: 20px;\n            margin-bottom: 0;\n            font-size: 16px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterCodeComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FilterCodeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        height: [{ type: Input }],
        conditions: [{ type: Input }]
    };
    return FilterCodeComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterModule = /** @class */ (function () {
    function FilterModule() {
    }
    FilterModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisCommonModule,
                        MessagerModule.forRoot(),
                        PerfectScrollbarModule,
                        FarrisDialogModule,
                        LookupModule,
                        InputGroupModule,
                        LocaleModule.forRoot(),
                        ComboLookupModule,
                        FarrisFormsModule
                    ],
                    exports: [
                        FilterComponent,
                        FilterEditorComponent,
                        FilterGridComponent,
                        FilterFooterComponent
                    ],
                    declarations: [
                        FilterTabsComponent,
                        FilterGridComponent,
                        FilterFooterComponent,
                        FilterEditorComponent,
                        FilterCodeComponent,
                        FilterSqlCodeComponent,
                        FilterComponent
                    ],
                    providers: [],
                    entryComponents: [
                        FilterEditorComponent
                    ]
                },] }
    ];
    return FilterModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterCodeComponent, FilterSqlCodeComponent, FilterService, FilterEditorComponent, FilterFooterComponent, FilterGridComponent, FilterTabsComponent, FILTER_LOOKUPGRID_VALUE_ACCESSOR, FilterComponent, FilterModule };

//# sourceMappingURL=farris-ui-filter-editor.js.map