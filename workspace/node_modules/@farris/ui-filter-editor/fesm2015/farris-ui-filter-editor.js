import { DomSanitizer } from '@angular/platform-browser';
import { Subject } from 'rxjs';
import { cloneDeep } from 'lodash-es';
import { BsModalService } from '@farris/ui-modal';
import { FilterRelation, Compare, LeftBracket, RighttBracket, Relation, CompareOperators, ExpressValueType } from '@farris/ui-common/types';
import { NotifyService } from '@farris/ui-notify';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { LookupComponent, LookupModule } from '@farris/ui-lookup';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { PerfectScrollbarModule } from '@farris/ui-perfect-scrollbar';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { CommonUtils, FarrisCommonModule } from '@farris/ui-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { Injectable, Optional, Component, HostBinding, Input, Output, EventEmitter, Injector, ChangeDetectorRef, ElementRef, Renderer2, ViewChild, ChangeDetectionStrategy, ComponentFactoryResolver, forwardRef, HostListener, NgModule } from '@angular/core';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { ComboLookupModule } from '@farris/ui-combo-lookup';
import { FarrisFormsModule } from '@farris/ui-forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterService {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.conditionsChanged = new Subject();
        this.commonUtils = utils || new CommonUtils();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    buildSqlWhere(c) {
        return this.commonUtils.buildSqlWhere(c);
    }
    /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    isValid(conditions, localeService) {
        if (conditions && conditions.length) {
            // 清除最后条件的关系符
            conditions[conditions.length - 1].relation = FilterRelation.Empty;
            // 检查关系连接符
            /** @type {?} */
            const emptyRelations = conditions
                .map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                if (n.relation == "" + FilterRelation.Empty) {
                    return { index: i, filter: n };
                }
                return null;
            }))
                .filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                return n && i !== conditions.length - 1;
            }));
            /** @type {?} */
            let relationFlag = true;
            if (emptyRelations.length) {
                relationFlag = false;
            }
            // 检查括号
            /** @type {?} */
            let bracketFlag = true;
            /** @type {?} */
            let bracketStr = '';
            for (let i = 0; i < conditions.length; i++) {
                bracketStr += conditions[i].lbracket + conditions[i].rbracket;
            }
            /** @type {?} */
            const l = bracketStr.length;
            if (l % 2 > 0) {
                bracketFlag = false;
            }
            else {
                for (let i = 0; i < l; i++) {
                    bracketStr = bracketStr.replace('()', '');
                }
                bracketFlag = !bracketStr.length;
            }
            // 检查字段是否设置
            /** @type {?} */
            const emptyFields = conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => !n.filterField)).length === 0;
            return {
                bracket: {
                    result: bracketFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.bracket') : '括号不匹配，请检查。'
                },
                relation: {
                    result: relationFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.relation') : '关系设置不完整，请检查。'
                },
                field: {
                    result: emptyFields,
                    msg: localeService ? localeService.getValue('filterEditor.validate.field') : '字段不允许为空，请检查。'
                }
            };
        }
        return true;
    }
}
FilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterService.ctorParameters = () => [
    { type: CommonUtils, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterEditorComponent {
    /**
     * @param {?} sanitizer
     * @param {?} filterService
     * @param {?} injector
     */
    constructor(sanitizer, filterService, injector) {
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.injector = injector;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.insertType = 'below';
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.localeService = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        conditionList => {
            this.conditions = conditionList;
        }));
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService, null);
            this.cd = this.injector.get(ChangeDetectorRef);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            con => {
                /** @type {?} */
                const cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    onTabChange(index) {
        this.tabIndex = index;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowExpress($event) {
        $event.instance = this;
        this.showExpress.emit($event);
    }
    /**
     * @return {?}
     */
    validation() {
        return this.filterService.isValid(this.conditions, this.localeService);
    }
}
FilterEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-editor',
                template: `
        <filter-tabs
            class="f-utils-fill-flex-column"
            [showCode]="showCode"
            [showSql]="showSql"
            [columns]="columns"
            [height]="height"
            [enableExpress]="enableExpress"
            [enableFrontExpress]="enableFrontExpress"
            [conditions]="conditions"
            [fieldEditor]="fieldEditor"
            (showExpress)="onShowExpress($event)"
            (selectTabChange)="onTabChange($event)"
            [insertType]="insertType"
            [useCustomValue]="useCustomValue">
        </filter-tabs>
    `
            }] }
];
/** @nocollapse */
FilterEditorComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: FilterService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FilterEditorComponent.propDecorators = {
    columns: [{ type: Input }],
    conditions: [{ type: Input }],
    height: [{ type: Input }],
    showCode: [{ type: Input }],
    showSql: [{ type: Input }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    insertType: [{ type: Input }],
    useCustomValue: [{ type: Input }],
    showExpress: [{ type: Output }],
    cls: [{ type: HostBinding, args: ['class',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterGridComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} filterService
     * @param {?} messagerService
     */
    constructor(el, render, filterService, messagerService) {
        this.el = el;
        this.render = render;
        this.filterService = filterService;
        this.messagerService = messagerService;
        this.LeftBracketData = LeftBracket;
        this.RighttBracketData = RighttBracket;
        this.relationData = Relation;
        this.operators = CompareOperators;
        this.columnSizeData = [60, 50, 120, 100, 60, 120, 50, 50];
        this.groupIcon = '<i class="f-icon f-icon-lookup"></i>';
        this.conditions = [];
        this.columns = [];
        this.enableExpress = false;
        this.enableFrontExpress = false;
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.insertType = 'below';
        this.defulatRelation = FilterRelation.And;
        this.showExpress = new EventEmitter();
        this.scrollContainer = null;
        // @ViewChild('ps') psRef: PerfectScrollbarComponent;
        this.currentCondition = null;
        this.newCondition = {
            filterField: '',
            value: '',
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Empty,
            compare: Compare.Equal,
            expresstype: ExpressValueType.Value
        };
        this.localeService = null;
        this.trackByValue = (/**
         * @param {?} index
         * @param {?} row
         * @return {?}
         */
        (index, row) => {
            return row ? row.value || row : index;
        });
        this.localeService = this.messagerService['localeService'];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (!this.fieldEditor) {
            this.fieldEditor = { type: 'select', options: {} };
        }
        this.initRelationData();
        // this.newCondition.relation = this.defulatRelation || FilterRelation.And;
        if (!this.conditions || !this.conditions.length) {
            /** @type {?} */
            const firstCon = Object.assign({}, this.newCondition);
            this.conditions = [firstCon];
            this.changeConditionList();
        }
        // 默认选中第1行
        this.currentCondition = { index: 0, condition: this.conditions[0] };
    }
    /**
     * @private
     * @return {?}
     */
    initRelationData() {
        if (this.localeService) {
            /** @type {?} */
            const andStr = this.localeService.getValue('filterEditor.relationValue.and');
            /** @type {?} */
            const orStr = this.localeService.getValue('filterEditor.relationValue.or');
            this.relationData = [
                { label: '', value: 0 },
                { label: andStr, value: 1 },
                { label: orStr, value: 2 }
            ];
        }
    }
    // private psUpdate() {
    //     if (this.psRef && this.psRef.directiveRef) {
    //         this.psRef.directiveRef.update();
    //     }
    // }
    /**
     * @private
     * @return {?}
     */
    itemIntoView() {
        if (this.tablebodybox) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const tr = this.tablebodybox.nativeElement.querySelector('tr.selected');
                if (tr) {
                    if (tr.scrollIntoViewIfNeeded) {
                        tr.scrollIntoViewIfNeeded(false);
                    }
                    else {
                        tr.scrollIntoView({ block: 'nearest' });
                    }
                }
            }), 50);
        }
    }
    /**
     * @param {?} index
     * @param {?=} $event
     * @return {?}
     */
    insertCondition(index, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        const _newCondition = Object.assign({}, this.newCondition, { relation: FilterRelation.And });
        if (this.insertType === 'above') {
            if (index === 0) {
                this.conditions.unshift(_newCondition);
            }
            else {
                this.conditions.splice(index, 0, _newCondition);
            }
        }
        else {
            this.conditions.splice(index + 1, 0, _newCondition);
        }
        this.changeConditionList();
    }
    /**
     * @param {?} index
     * @return {?}
     */
    removeCondition(index) {
        this.conditions.splice(index, 1);
        this.changeConditionList();
        if (this.currentCondition) {
            if (index === this.currentCondition.index) {
                if (this.conditions[index]) {
                    this.currentCondition = { index: index, condition: this.conditions[index] };
                }
                else {
                    if (this.conditions[index - 1]) {
                        this.currentCondition = { index: index - 1, condition: this.conditions[index - 1] };
                    }
                    else {
                        this.currentCondition = null;
                    }
                }
            }
            else {
                if (!this.conditions[this.currentCondition.index]) {
                    if (this.currentCondition.index > index) {
                        this.currentCondition.index = this.currentCondition.index - 1;
                    }
                    else {
                        this.currentCondition.index = this.currentCondition.index + 1;
                    }
                }
            }
        }
    }
    /**
     * @return {?}
     */
    onAddFilter() {
        /** @type {?} */
        const newItem = Object.assign({}, this.newCondition);
        this.conditions.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (n.relation == FilterRelation.Empty || !n.relation) {
                n.relation = FilterRelation.And;
            }
        }));
        this.conditions = [...this.conditions, newItem];
        this.changeConditionList();
        /** @type {?} */
        const newIdx = this.conditions.length - 1;
        this.currentCondition = { index: newIdx, condition: newItem };
    }
    /**
     * @return {?}
     */
    onClear() {
        this.messagerService.question('确认要清空当前所有条件吗？', (/**
         * @return {?}
         */
        () => {
            this.conditions = [];
            this.changeConditionList();
        }));
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        if (this.currentCondition) {
            this.conditions.unshift(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index + 1, 1);
            this.currentCondition.index = 0;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index - 1, 0, ...tempArr);
            this.currentCondition.index = index - 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        if (this.currentCondition) {
            /** @type {?} */
            const index = this.currentCondition.index;
            /** @type {?} */
            const tempArr = this.conditions.splice(index, 1);
            this.conditions.splice(index + 1, 0, ...tempArr);
            this.currentCondition.index = index + 1;
            this.changeConditionList();
        }
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        if (this.currentCondition) {
            this.conditions.push(this.currentCondition.condition);
            this.conditions.splice(this.currentCondition.index, 1);
            this.currentCondition.index = this.conditions.length - 1;
            this.changeConditionList();
        }
    }
    /**
     * @private
     * @return {?}
     */
    changeConditionList() {
        this.filterService.conditionsChanged.next(this.conditions);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.itemIntoView();
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    selected($event) {
        this.currentCondition = $event;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    isSelected($event) {
        if (this.currentCondition) {
            return this.currentCondition.index === $event;
        }
        return false;
    }
    /**
     * @param {?} $event
     * @param {?} condition
     * @param {?} value
     * @return {?}
     */
    showExpressDialog($event, condition, value) {
        /** @type {?} */
        let type = 'value';
        if (condition.expresstype == 1) {
            type = 'express';
        }
        else if (condition.expresstype == 'frontExpress') {
            type = 'frontExpress';
        }
        this.showExpress.emit({ event: $event, condition, value, type });
    }
    /**
     * @param {?} $event
     * @param {?} condition
     * @return {?}
     */
    onComboSelectChange($event, condition) {
        if ($event) {
            const { data } = $event;
            if (data) {
                condition.filterField = data['value'];
            }
        }
    }
    /**
     * @return {?}
     */
    validation() {
        return this.filterService.isValid(this.conditions, this.localeService);
    }
}
FilterGridComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-grid',
                template: "<!-- <div class=\"table-header \">\r\n    <table class=\"table table-bordered\" style=\"margin-bottom: 0\">\r\n        <colgroup>\r\n            <col *ngFor=\"let s of columnSizeData\" [style.width]=\" s + 'px'\">\r\n        </colgroup>\r\n        <thead>\r\n            <tr>\r\n                <th></th>\r\n                <th><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                <th><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n            </tr>\r\n        </thead>\r\n    </table>\r\n</div> -->\r\n<div style=\"\r\n    border-top: 1px solid  white;\r\n    position: absolute;\r\n    top: 38px;\r\n    width: 100%;\r\n    z-index: 2;\r\n\"></div>\r\n<div class=\"table-body flex-fill win11Scroll show nobtn \" style=\"margin-left:14px; margin-right: 0; overflow-y: scroll;\" #tablebodybox>\r\n        <table class=\"table table-bordered\" style=\"margin-bottom: 0;\">\r\n            <thead  style=\"position: sticky; top: 0; z-index: 1;\">\r\n                <tr>\r\n                    <th style=\"width: 60px\"></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.leftBrackets' | locale }}</b></th>\r\n                    <th style=\"width: 120px\"><b>{{ 'filterEditor.field' | locale }}</b></th>\r\n                    <th style=\"width: 100px\"><b>{{ 'filterEditor.operator' | locale }}</b></th>\r\n                    <th style=\"width: 60px\"><b>{{ 'filterEditor.valueType' | locale }}</b></th>\r\n                    <th style=\"width: 120px\"><b>{{ 'filterEditor.value' | locale }}</b></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.rightBrackets' | locale }}</b></th>\r\n                    <th style=\"width: 50px\"><b>{{ 'filterEditor.relation' | locale }}</b></th>\r\n                </tr>\r\n            </thead>\r\n            <tbody>\r\n                <tr *ngFor=\"let condition of conditions; let index=index;\" (click)=\"selected({'index':index, 'condition': condition})\" [class.selected]=\"isSelected(index)\" >\r\n                    <td style=\"text-overflow: unset;\">\r\n                        <button type=\"button\" (click)=\"insertCondition(index, $event)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-plus\"></span></button>\r\n                        <button type=\"button\" (click)=\"removeCondition(index)\" class=\"k-button k-button-icon k-flat\"><span class=\"k-icon k-i-minus\"></span></button>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.lbracket\" name=\"lbracket\"\r\n                        single-select [panelRef]=\"selectlbracketpanel\" [items]=\"LeftBracketData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of LeftBracketData\" [value]=\"item\">{{ item }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectlbracketpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of LeftBracketData; trackBy: trackByValue\" [attr.value]=\"col\" [class.active]=\"condition.lbracket === col\">{{ col }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <ng-container *ngIf=\"fieldEditor.type === 'select'\" >\r\n                            <select class=\"form-control filter-select\" [(ngModel)]=\"condition.filterField\" name=\"filterField\" single-select [panelRef]=\"selectcolpanel\" [items]=\"columns\" [container]=\"scrollContainer || tablebodybox \">\r\n                                <!-- <option *ngFor=\"let col of columns\" [value]=\"col.value\">{{ col.label }}</option> -->\r\n                            </select>\r\n\r\n                            <div #selectcolpanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                                <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                    <li class=\"dropdown-item\" *ngFor=\"let col of columns; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.filterField === col.value\">{{ col.label }}</li>\r\n                                </ul>\r\n                            </div>\r\n\r\n                        </ng-container>\r\n\r\n                        <farris-combo-lookup *ngIf=\"fieldEditor.type === 'combo-tree'\" name=\"filterField\"\r\n                            [idField]=\"fieldEditor?.options?.idField ||'value'\"\r\n                            [textField]=\"fieldEditor?.options?.textField ||'label'\"\r\n                            [displayType]=\"'LOOKUPTREELIST'\" [useValue]=\"true\"\r\n                            [useTreeView]=\"true\"\r\n                            [columns]=\"fieldEditor?.options?.columns || []\"\r\n                            [data]=\"columns\"\r\n                            [(ngModel)]=\"condition.filterField\"\r\n                            [remoteSearch]=\"false\"\r\n                            [autoWidth]=\"fieldEditor?.options?.autoWidth\"\r\n                            [panelWidth]=\"fieldEditor?.options?.panelWidth || 200\">\r\n                        </farris-combo-lookup>\r\n\r\n\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" name=\"compare\" [(ngModel)]=\"condition.compare\" single-select [panelRef]=\"selectcomparepanel\" [items]=\"operators\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of operators\" [value]=\"item.value\">{{item.label}}</option> -->\r\n                        </select>\r\n                        <div #selectcomparepanel class=\"single-select-panel f-area-hide\" style=\"max-height: 200px;overflow: auto;\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item\" *ngFor=\"let col of operators; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.compare === col.value\">{{ col.label }}</li>\r\n                            </ul>\r\n                        </div>\r\n\r\n\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" name=\"expresstype\" [(ngModel)]=\"condition.expresstype\" \r\n                        single-select [panelRef]=\"selectexpresstypepanel\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option [value]=\"0\">{{'filterEditor.expressType.value' | locale }}</option>\r\n                            <option [value]=\"1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</option>\r\n                            <option [value]=\"'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</option> -->\r\n                        </select>\r\n                        <div #selectexpresstypepanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"0\" [class.active]=\"condition.expresstype == 0\" >{{'filterEditor.expressType.value' | locale }}</li>\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"1\" [class.active]=\"condition.expresstype == 1\" *ngIf=\"enableExpress\" >{{'filterEditor.expressType.express' | locale }}</li>\r\n                                <li style=\"line-height:26px;height:26px\"  class=\"dropdown-item p-0 px-1\" [value]=\"'frontExpress'\" [class.active]=\"condition.expresstype === 'frontExpress'\" *ngIf=\"enableFrontExpress\" >{{'filterEditor.expressType.frontExpress' | locale }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <input-group name=\"value\" [(ngModel)]=\"condition.value\" [groupText]=\"condition.expresstype == 1||condition.expresstype==='frontExpress' || useCustomValue ?groupIcon: ''\"\r\n                        (clickHandle)=\"showExpressDialog($event, condition, condition.value)\"></input-group>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\"  [(ngModel)]=\"condition.rbracket\" name=\"rbracket\" single-select [panelRef]=\"selectrbracketpanel\" [items]=\"RighttBracketData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of RighttBracketData\" [value]=\"item\">{{ item }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectrbracketpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of RighttBracketData; trackBy: trackByValue\" [attr.value]=\"col\" [class.active]=\"condition.rbracket === col\">{{ col }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                    <td class=\"px-1\">\r\n                        <select class=\"form-control filter-select\" [(ngModel)]=\"condition.relation\" name=\"relation\" single-select [panelRef]=\"selectrelationpanel\" [items]=\"relationData\" [container]=\"scrollContainer || tablebodybox \">\r\n                            <!-- <option *ngFor=\"let item of relationData\" [value]=\"item.value\">{{ item.label }}</option> -->\r\n                        </select>\r\n\r\n                        <div #selectrelationpanel class=\"single-select-panel f-area-hide\">\r\n                            <ul class=\"dropdown-menu show\" style=\"position:relative;min-width: 100%;border:none; box-shadow: none;\">\r\n                                <li class=\"dropdown-item p-0 px-1\" style=\"line-height:26px;height:26px\" *ngFor=\"let col of relationData; trackBy: trackByValue\" [attr.value]=\"col.value\" [class.active]=\"condition.relation == col.value\">{{ col.label }}</li>\r\n                            </ul>\r\n                        </div>\r\n                    </td>\r\n                </tr>\r\n            </tbody>\r\n        </table>\r\n</div>\r\n<div style=\"flex-shrink: 0; margin: 0 14px;\">\r\n<filter-footer\r\n(addFilter)=\"onAddFilter()\"\r\n(clearFilter)=\"onClear()\"\r\n(moveTop)=\"onMoveTop()\"\r\n(movePrev)=\"onMovePrev()\"\r\n(moveNext)=\"onMoveNext()\"\r\n(moveBottom)=\"onMoveBottom()\"></filter-footer>\r\n</div>\r\n",
                changeDetection: ChangeDetectionStrategy.Default,
                styles: [`
        .filter-select { width:100%; padding-left: 0; padding-right: 0; }
        .selected { background: #c2e4ff; }
        `]
            }] }
];
/** @nocollapse */
FilterGridComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: FilterService },
    { type: MessagerService }
];
FilterGridComponent.propDecorators = {
    conditions: [{ type: Input }],
    columns: [{ type: Input }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    height: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    useCustomValue: [{ type: Input }],
    insertType: [{ type: Input }],
    defulatRelation: [{ type: Input }],
    showExpress: [{ type: Output }],
    scrollContainer: [{ type: Input }],
    tablebodybox: [{ type: ViewChild, args: ['tablebodybox',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterFooterComponent {
    /**
     * @param {?} grid
     */
    constructor(grid) {
        this.grid = grid;
        this.cls = 'f-filter-footer';
        this.addFilter = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.moveTop = new EventEmitter();
        this.movePrev = new EventEmitter();
        this.moveNext = new EventEmitter();
        this.moveBottom = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.addFilter.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clearFilter.emit();
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        this.moveTop.emit();
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        this.movePrev.emit();
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        this.moveNext.emit();
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        this.moveBottom.emit();
    }
    /**
     * @return {?}
     */
    canUse() {
        if (this.grid.currentCondition) {
            return this.grid.conditions.length > 1;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveUp() {
        if (this.canUse()) {
            return this.grid.currentCondition.index > 0;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveDown() {
        if (this.canUse()) {
            return this.grid.currentCondition.index < this.grid.conditions.length - 1;
        }
        return false;
    }
}
FilterFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-footer',
                template: `
    <div class="footer-container px-2" style="height: 36px;">
        <button type="button" (click)="onAddFilter()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-add"></span> {{ 'filterEditor.addWhere' | locale }}</button>
        <button type="button" (click)="onClear()" [disabled]="!grid.conditions.length"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-close"></span> {{ 'filterEditor.clear' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMoveTop()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-end-up"></span>
            {{'filterEditor.moveTop' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMovePrev()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-up"></span>
            {{'filterEditor.moveUp' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveNext()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-down"></span>
            {{'filterEditor.moveDown' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveBottom()"
            class="k-button k-button-icontext k-flat"><span class="f-icon f-icon-arrow-end-down"></span>
            {{'filterEditor.moveBottom' | locale }}</button>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterFooterComponent.ctorParameters = () => [
    { type: FilterGridComponent }
];
FilterFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    addFilter: [{ type: Output }],
    clearFilter: [{ type: Output }],
    moveTop: [{ type: Output }],
    movePrev: [{ type: Output }],
    moveNext: [{ type: Output }],
    moveBottom: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterTabsComponent {
    constructor() {
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.fieldEditor = { type: 'select' };
        this.selectTabChange = new EventEmitter();
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.showExpress = new EventEmitter();
        this.insertType = 'below';
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.currentTabIndex = 0;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} index
     * @return {?}
     */
    showTab(index) {
        this.currentTabIndex = index;
        this.selectTabChange.emit(index);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    showExpressDialog($event) {
        this.showExpress.emit($event);
    }
}
FilterTabsComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-tabs',
                template: `
    <ul class="nav nav-tabs" style="min-height: 38px" *ngIf="showCode || showSql">
        <li class="nav-item" style="    margin-left: 14px;">
            <a class="nav-link" [class.active]="currentTabIndex === 0"  (click)="showTab(0)">{{ 'filterEditor.designTab' | locale }}</a>
        </li>
        <li class="nav-item" *ngIf="showCode">
            <a class="nav-link" [class.active]="currentTabIndex === 1" (click)="showTab(1)">{{ 'filterEditor.jsonTab' | locale }}</a>
        </li>
        <li class="nav-item" *ngIf="showSql">
            <a class="nav-link" [class.active]="currentTabIndex === 2" (click)="showTab(2)">{{ 'filterEditor.sqlTab' | locale }}</a>
        </li>
    </ul>

    <ng-container *ngIf="currentTabIndex === 0">
        <filter-grid style="overflow: hidden;" [useCustomValue]="useCustomValue"
          [enableExpress]="enableExpress" [enableFrontExpress]="enableFrontExpress"
          class="d-flex flex-column flex-fill"  [fieldEditor]="fieldEditor" [insertType]="insertType"
          [conditions]="conditions" [columns]="columns" (showExpress)="showExpressDialog($event)"></filter-grid>
    </ng-container>
    <ng-container *ngIf="currentTabIndex === 1 && showCode">
        <filter-code [height]="height" [conditions]="conditions"></filter-code>
    </ng-container>
    <ng-container *ngIf="currentTabIndex === 2 && showSql">
        <filter-sql [height]="height" [conditions]="conditions"></filter-sql>
    </ng-container>

    `,
                styles: [`.nav-item { cursor: default;}
        .nav-item a.active {font-weight: bold;}
        `]
            }] }
];
/** @nocollapse */
FilterTabsComponent.ctorParameters = () => [];
FilterTabsComponent.propDecorators = {
    columns: [{ type: Input }],
    conditions: [{ type: Input }],
    height: [{ type: Input }],
    showCode: [{ type: Input }],
    showSql: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    selectTabChange: [{ type: Output }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    showExpress: [{ type: Output }],
    insertType: [{ type: Input }],
    useCustomValue: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FILTER_LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FilterComponent)),
    multi: true,
};
class FilterComponent extends LookupComponent {
    /**
     * @param {?} injector
     * @param {?} cfr
     * @param {?} modalService
     * @param {?} el
     * @param {?} filterService
     */
    constructor(injector, cfr, modalService, el, filterService) {
        super(injector, el);
        this.cfr = cfr;
        this.modalService = modalService;
        this.el = el;
        this.filterService = filterService;
        this.hostCls = "f-cmp-inputgroup";
        this.text = "";
        this.conditions = [];
        this.originalData = [];
        /**
         * 字段数据
         */
        this.columns = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.fieldEditor = { type: "select", options: {} };
        this.enableClear = true;
        this.returnType = "object";
        this.insertType = "below";
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.openDialog = new EventEmitter();
        this.showExpress = new EventEmitter();
        this.showClearButton = false;
        this.cd = null;
        this.commonUtils = null;
        this.notifySer = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        (conditionList) => {
            this.conditions = conditionList;
        }));
        this.notifySer = this.injector.get(NotifyService, null);
        this.localeService = this.injector.get(LocaleService);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.commonUtils =
            this.injector.get(CommonUtils, null) || new CommonUtils();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    onmouseover(event) {
        this.showClearButton = true;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onmouseleave(event) {
        this.showClearButton = false;
    }
    /**
     * @return {?}
     */
    showDialog() {
        if (!this.disabled) {
            if (this.fieldEditor && this.fieldEditor.type === "combo-tree") {
                this.fieldEditor.options = this.fieldEditor.options || {};
                if (this.fieldEditor.options.autoWidth === undefined) {
                    this.fieldEditor.options.autoWidth = true;
                }
                if (!this.fieldEditor.options.columns) {
                    this.fieldEditor.options.columns = [
                        { field: "label", title: "label", width: 100 },
                    ];
                }
                if (!this.fieldEditor.options.textField) {
                    this.fieldEditor.options.textField = "label";
                }
                if (!this.fieldEditor.options.idField) {
                    this.fieldEditor.options.idField = "value";
                }
            }
            /** @type {?} */
            const filterEditorFactory = this.cfr.resolveComponentFactory(FilterEditorComponent);
            this.filterEditorRef = filterEditorFactory.create(this.injector);
            this.filterEditorRef.instance.columns = this.columns;
            this.filterEditorRef.instance.conditions = this.conditions;
            this.filterEditorRef.instance.useCustomValue = this.useCustomValue;
            this.originalData = cloneDeep(this.conditions);
            this.dlgRef = this.modalService.show(this.filterEditorRef, {
                width: 800,
                height: 500,
                title: this.localeService.getValue("filterEditor.title"),
                enableScroll: false,
                minHeight: 398,
                minWidth: 798,
                iconCls: "f-icon f-icon-filter",
                buttons: this.btnRef,
                // dialogFooterStyles: { background: '#F4F6F9' },
                buttonAlign: "right",
                initialState: {
                    showCode: this.showCode,
                    showSql: this.showSql,
                    enableExpress: this.enableExpress,
                    fieldEditor: this.fieldEditor,
                    insertType: this.insertType,
                },
                closed: (/**
                 * @param {?} isCloseButtonClick
                 * @return {?}
                 */
                (isCloseButtonClick) => {
                    if (isCloseButtonClick) {
                        this.cancel();
                    }
                }),
            });
            this.filterEditorRef.instance.height =
                this.dlgRef.dialog.instance.getContainerSize().height;
            this.filterEditorRef.instance.showExpress.subscribe((/**
             * @param {?} $event
             * @return {?}
             */
            ($event) => {
                this.showExpress.emit($event);
            }));
            this.dlgRef.dialog.instance.resized.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            (size) => {
                this.filterEditorRef.instance.height = size.containerHeight;
            }));
            this.filterEditorRef.changeDetectorRef.detectChanges();
            this.dlgRef.dialog.changeDetectorRef.reattach();
            this.openDialog.emit();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (val) {
            if (typeof val === "string") {
                val = JSON.parse(val);
            }
            this.conditions = val || [];
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
    }
    /**
     * @private
     * @return {?}
     */
    checkSymbol() {
        return this.filterService.isValid(this.conditions, this.localeService);
    }
    /**
     * @return {?}
     */
    save() {
        if (this.conditions.length) {
            /** @type {?} */
            const checkResult = this.checkSymbol();
            if (typeof checkResult === "object") {
                const { bracket, relation, field } = checkResult;
                if (!bracket.result || !relation.result || !field.result) {
                    /** @type {?} */
                    let msg = "";
                    if (!bracket.result) {
                        msg = bracket.msg;
                    }
                    else if (!relation.result) {
                        msg = relation.msg;
                    }
                    else if (!field.result) {
                        msg = field.msg;
                    }
                    if (msg) {
                        if (this.notifySer) {
                            this.notifySer.warning(msg);
                        }
                        else {
                            alert(msg);
                        }
                        return;
                    }
                }
            }
            this.conditions = this.conditions.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.filterField));
            // 转换in 操作符的value 值
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            (con) => {
                /** @type {?} */
                const cp = parseInt("" + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/,/g, "\r\n");
                }
                return con;
            }));
            this.text = this.commonUtils.buildSqlWhere(this.conditions);
        }
        else {
            this.text = "";
        }
        if (this.cd) {
            this.cd.detectChanges();
        }
        this.closeDialog();
    }
    /**
     * @return {?}
     */
    cancel() {
        this.conditions = this.originalData;
        this.closeDialog();
    }
    /**
     * @return {?}
     */
    closeDialog() {
        this.updateModel();
        this.filterEditorRef = null;
        this.dlgRef.close();
    }
    /**
     * @return {?}
     */
    clear() {
        this.text = "";
        this.conditions = [];
        this.updateModel();
    }
    /**
     * @private
     * @return {?}
     */
    updateModel() {
        /** @type {?} */
        let v = this.conditions;
        if (this.returnType === "string") {
            v = JSON.stringify(this.conditions);
        }
        this.onModelChange(v);
        this.onModelTouched(v);
    }
}
FilterComponent.decorators = [
    { type: Component, args: [{
                selector: "filter,filter-textbox",
                template: "<div class=\"input-group\">\r\n    <input #txtbox\r\n        class=\"form-control\" \r\n        [value]=\"text\"\r\n        [readonly]=\"!editable || readonly\"\r\n        [class.f-state-disabled] = \"disabled\"\r\n        [class.f-state-readonly] = \"readonly\"\r\n        [class.f-state-editable] = \"!editable\"\r\n        [disabled]=\"disabled\"/>\r\n    <div class=\"input-group-append\" *ngIf=\"!readonly && !disabled\">\r\n        <span *ngIf=\"showClearButton && enableClear\" class=\"input-group-text input-group-clear\" (click)=\"clear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"f-select input-group-text\"  (click)=\"showDialog()\">\r\n            <i class=\"f-icon f-icon-lookup\"></i>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n<ng-template #defaultButtonRef>\r\n    <button class=\"btn btn-outline-secondary\" (click)=\"cancel()\"> {{ 'filterEditor.cancelButton'|locale }} </button>&nbsp;\r\n    <button class=\"btn btn-primary\" (click)=\"save()\"> {{ 'filterEditor.okButton'| locale }} </button>\r\n</ng-template>",
                providers: [FILTER_LOOKUPGRID_VALUE_ACCESSOR, FilterService],
                styles: [`
            .lookup-clear {
                cursor: pointer;
                background: #fff !important;
            }
            .lookup-clear:hover {
                background: #e9ecef !important;
            }
        `]
            }] }
];
/** @nocollapse */
FilterComponent.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: BsModalService },
    { type: ElementRef },
    { type: FilterService }
];
FilterComponent.propDecorators = {
    hostCls: [{ type: HostBinding, args: ["class",] }],
    columns: [{ type: Input }],
    showCode: [{ type: Input }],
    showSql: [{ type: Input }],
    enableExpress: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    enableClear: [{ type: Input }],
    returnType: [{ type: Input }],
    insertType: [{ type: Input }],
    useCustomValue: [{ type: Input }],
    openDialog: [{ type: Output }],
    showExpress: [{ type: Output }],
    btnRef: [{ type: ViewChild, args: ["defaultButtonRef",] }],
    textbox: [{ type: ViewChild, args: ["txtbox",] }],
    onmouseover: [{ type: HostListener, args: ["mouseover", ["$event"],] }],
    onmouseleave: [{ type: HostListener, args: ["mouseleave", ["$event"],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterSqlCodeComponent {
    /**
     * @param {?} filterService
     */
    constructor(filterService) {
        this.filterService = filterService;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
        this.sql = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.sql = this.filterService.buildSqlWhere(this.conditions);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.conditions && !changes.conditions.isFirstChange()) {
            this.sql = this.filterService.buildSqlWhere(this.conditions);
        }
    }
}
FilterSqlCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-sql',
                template: `
    <pre class="flex-fill" [style.height.px]="height - 38">
<code>{{ sql  }}</code>
    </pre>
    `,
                styles: [`
        pre {
            color: #d8d9d9;
            background: #424242;
            padding-left: 20px;
            padding-top: 20px;
            margin-bottom: 0;
            font-size: 16px;
        }
        `]
            }] }
];
/** @nocollapse */
FilterSqlCodeComponent.ctorParameters = () => [
    { type: FilterService }
];
FilterSqlCodeComponent.propDecorators = {
    height: [{ type: Input }],
    cls: [{ type: HostBinding, args: ['class',] }],
    conditions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterCodeComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.el.nativeElement.style.overflow = 'auto';
    }
}
FilterCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-code',
                template: `
    <div style="overflow:auto" [style.height.px]="height - 38">
        <pre class="flex-fill">
            <code>{{ conditions | json }}</code>
        </pre>
    </div>
    `,
                styles: [`
        pre {
            color: #d8d9d9;
            background: #424242;
            padding-left: 20px;
            padding-top: 20px;
            margin-bottom: 0;
            font-size: 16px;
        }
        `]
            }] }
];
/** @nocollapse */
FilterCodeComponent.ctorParameters = () => [
    { type: ElementRef }
];
FilterCodeComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    height: [{ type: Input }],
    conditions: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterModule {
}
FilterModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisCommonModule,
                    MessagerModule.forRoot(),
                    PerfectScrollbarModule,
                    FarrisDialogModule,
                    LookupModule,
                    InputGroupModule,
                    LocaleModule.forRoot(),
                    ComboLookupModule,
                    FarrisFormsModule
                ],
                exports: [
                    FilterComponent,
                    FilterEditorComponent,
                    FilterGridComponent,
                    FilterFooterComponent
                ],
                declarations: [
                    FilterTabsComponent,
                    FilterGridComponent,
                    FilterFooterComponent,
                    FilterEditorComponent,
                    FilterCodeComponent,
                    FilterSqlCodeComponent,
                    FilterComponent
                ],
                providers: [],
                entryComponents: [
                    FilterEditorComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FilterCodeComponent, FilterSqlCodeComponent, FilterService, FilterEditorComponent, FilterFooterComponent, FilterGridComponent, FilterTabsComponent, FILTER_LOOKUPGRID_VALUE_ACCESSOR, FilterComponent, FilterModule };

//# sourceMappingURL=farris-ui-filter-editor.js.map