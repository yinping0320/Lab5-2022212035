/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { FilterRelation } from '@farris/ui-common/types';
import { CommonUtils } from '@farris/ui-common';
var FilterService = /** @class */ (function () {
    function FilterService(utils) {
        this.conditionsChanged = new Subject();
        this.commonUtils = utils || new CommonUtils();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    FilterService.prototype.buildSqlWhere = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return this.commonUtils.buildSqlWhere(c);
    };
    /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    FilterService.prototype.isValid = /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    function (conditions, localeService) {
        if (conditions && conditions.length) {
            // 清除最后条件的关系符
            conditions[conditions.length - 1].relation = FilterRelation.Empty;
            // 检查关系连接符
            /** @type {?} */
            var emptyRelations = conditions
                .map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                if (n.relation == "" + FilterRelation.Empty) {
                    return { index: i, filter: n };
                }
                return null;
            }))
                .filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) {
                return n && i !== conditions.length - 1;
            }));
            /** @type {?} */
            var relationFlag = true;
            if (emptyRelations.length) {
                relationFlag = false;
            }
            // 检查括号
            /** @type {?} */
            var bracketFlag = true;
            /** @type {?} */
            var bracketStr = '';
            for (var i = 0; i < conditions.length; i++) {
                bracketStr += conditions[i].lbracket + conditions[i].rbracket;
            }
            /** @type {?} */
            var l = bracketStr.length;
            if (l % 2 > 0) {
                bracketFlag = false;
            }
            else {
                for (var i = 0; i < l; i++) {
                    bracketStr = bracketStr.replace('()', '');
                }
                bracketFlag = !bracketStr.length;
            }
            // 检查字段是否设置
            /** @type {?} */
            var emptyFields = conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n.filterField; })).length === 0;
            return {
                bracket: {
                    result: bracketFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.bracket') : '括号不匹配，请检查。'
                },
                relation: {
                    result: relationFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.relation') : '关系设置不完整，请检查。'
                },
                field: {
                    result: emptyFields,
                    msg: localeService ? localeService.getValue('filterEditor.validate.field') : '字段不允许为空，请检查。'
                }
            };
        }
        return true;
    };
    FilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FilterService.ctorParameters = function () { return [
        { type: CommonUtils, decorators: [{ type: Optional }] }
    ]; };
    return FilterService;
}());
export { FilterService };
if (false) {
    /** @type {?} */
    FilterService.prototype.conditionsChanged;
    /** @type {?} */
    FilterService.prototype.commonUtils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUE0QixjQUFjLEVBQW9CLE1BQU0seUJBQXlCLENBQUM7QUFDckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRWhEO0lBS0ksdUJBQXdCLEtBQWtCO1FBRjFDLHNCQUFpQixHQUFHLElBQUksT0FBTyxFQUFxQixDQUFDO1FBR2pELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxxQ0FBYTs7OztJQUFiLFVBQWMsQ0FBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUdELCtCQUFPOzs7OztJQUFQLFVBQVEsVUFBNkIsRUFBRSxhQUE2QjtRQUNoRSxJQUFJLFVBQVUsSUFBSSxVQUFVLENBQUMsTUFBTSxFQUFFO1lBQ2pDLGFBQWE7WUFDYixVQUFVLENBQUMsVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsY0FBYyxDQUFDLEtBQUssQ0FBQzs7O2dCQUc1RCxjQUFjLEdBQUcsVUFBVTtpQkFDNUIsR0FBRzs7Ozs7WUFBQyxVQUFDLENBQU0sRUFBRSxDQUFDO2dCQUNYLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRTtvQkFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2lCQUNsQztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDLEVBQUM7aUJBQ0QsTUFBTTs7Ozs7WUFBQyxVQUFDLENBQUMsRUFBRSxDQUFDO2dCQUNULE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztZQUM1QyxDQUFDLEVBQUM7O2dCQUVGLFlBQVksR0FBRyxJQUFJO1lBQ3ZCLElBQUksY0FBYyxDQUFDLE1BQU0sRUFBRTtnQkFDdkIsWUFBWSxHQUFHLEtBQUssQ0FBQzthQUN4Qjs7O2dCQUdHLFdBQVcsR0FBRyxJQUFJOztnQkFDbEIsVUFBVSxHQUFHLEVBQUU7WUFDbkIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7Z0JBQ3hDLFVBQVUsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7YUFDakU7O2dCQUVLLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTTtZQUMzQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNYLFdBQVcsR0FBRyxLQUFLLENBQUM7YUFDdkI7aUJBQU07Z0JBQ0gsS0FBSSxJQUFJLENBQUMsR0FBRSxDQUFDLEVBQUUsQ0FBQyxHQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDckIsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO2lCQUM3QztnQkFDRCxXQUFXLEdBQUcsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDO2FBQ3BDOzs7Z0JBR0ssV0FBVyxHQUFHLFVBQVUsQ0FBQyxNQUFNOzs7O1lBQUMsVUFBQyxDQUFNLElBQUssT0FBQSxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQWQsQ0FBYyxFQUFDLENBQUMsTUFBTSxLQUFLLENBQUM7WUFHOUUsT0FBTztnQkFDSCxPQUFPLEVBQUU7b0JBQ0wsTUFBTSxFQUFFLFdBQVc7b0JBQ25CLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsK0JBQStCLENBQUMsQ0FBQyxDQUFDLENBQUMsWUFBWTtpQkFDOUY7Z0JBQ0QsUUFBUSxFQUFFO29CQUNOLE1BQU0sRUFBRSxZQUFZO29CQUNwQixHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUMsQ0FBQSxhQUFhLENBQUMsUUFBUSxDQUFDLGdDQUFnQyxDQUFDLENBQUMsQ0FBQyxDQUFDLGNBQWM7aUJBQ2hHO2dCQUNELEtBQUssRUFBRTtvQkFDSCxNQUFNLEVBQUUsV0FBVztvQkFDbkIsR0FBRyxFQUFFLGFBQWEsQ0FBQSxDQUFDLENBQUEsYUFBYSxDQUFDLFFBQVEsQ0FBQyw2QkFBNkIsQ0FBQyxDQUFBLENBQUMsQ0FBQyxjQUFjO2lCQUMzRjthQUNKLENBQUM7U0FDTDtRQUVELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7O2dCQTFFSixVQUFVOzs7O2dCQUZGLFdBQVcsdUJBT0gsUUFBUTs7SUFzRXpCLG9CQUFDO0NBQUEsQUEzRUQsSUEyRUM7U0ExRVksYUFBYTs7O0lBRXRCLDBDQUFxRDs7SUFDckQsb0NBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25kaXRpb24sIENvbXBhcmUsIEZpbHRlclJlbGF0aW9uLCBDb21wYXJlT3BlcmF0b3JzIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vdHlwZXMnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyU2VydmljZSB7XHJcblxyXG4gICAgY29uZGl0aW9uc0NoYW5nZWQgPSBuZXcgU3ViamVjdDxGaWx0ZXJDb25kaXRpb25bXT4oKTtcclxuICAgIGNvbW1vblV0aWxzOiBDb21tb25VdGlscztcclxuICAgIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIHV0aWxzOiBDb21tb25VdGlscykge1xyXG4gICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSB1dGlscyB8fCBuZXcgQ29tbW9uVXRpbHMoKTtcclxuICAgIH1cclxuXHJcbiAgICBidWlsZFNxbFdoZXJlKGM6IGFueSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmNvbW1vblV0aWxzLmJ1aWxkU3FsV2hlcmUoYyk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGlzVmFsaWQoY29uZGl0aW9uczogRmlsdGVyQ29uZGl0aW9uW10sIGxvY2FsZVNlcnZpY2U/OiBMb2NhbGVTZXJ2aWNlKSB7XHJcbiAgICAgICAgaWYgKGNvbmRpdGlvbnMgJiYgY29uZGl0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgLy8g5riF6Zmk5pyA5ZCO5p2h5Lu255qE5YWz57O756ymXHJcbiAgICAgICAgICAgIGNvbmRpdGlvbnNbY29uZGl0aW9ucy5sZW5ndGggLSAxXS5yZWxhdGlvbiA9IEZpbHRlclJlbGF0aW9uLkVtcHR5O1xyXG5cclxuICAgICAgICAgICAgLy8g5qOA5p+l5YWz57O76L+e5o6l56ymXHJcbiAgICAgICAgICAgIGNvbnN0IGVtcHR5UmVsYXRpb25zID0gY29uZGl0aW9uc1xyXG4gICAgICAgICAgICAgICAgLm1hcCgobjogYW55LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4ucmVsYXRpb24gPT0gXCJcIiArIEZpbHRlclJlbGF0aW9uLkVtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGluZGV4OiBpLCBmaWx0ZXI6IG4gfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmZpbHRlcigobiwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuICYmIGkgIT09IGNvbmRpdGlvbnMubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IHJlbGF0aW9uRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGlmIChlbXB0eVJlbGF0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJlbGF0aW9uRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDmo4Dmn6Xmi6zlj7dcclxuICAgICAgICAgICAgbGV0IGJyYWNrZXRGbGFnID0gdHJ1ZTsgXHJcbiAgICAgICAgICAgIGxldCBicmFja2V0U3RyID0gJyc7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uZGl0aW9ucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgYnJhY2tldFN0ciArPSBjb25kaXRpb25zW2ldLmxicmFja2V0ICsgY29uZGl0aW9uc1tpXS5yYnJhY2tldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBsID0gYnJhY2tldFN0ci5sZW5ndGggO1xyXG4gICAgICAgICAgICBpZiAobCAlIDIgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBicmFja2V0RmxhZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZm9yKGxldCBpID0wOyBpPCBsOyBpKysgKXtcclxuICAgICAgICAgICAgICAgICAgICBicmFja2V0U3RyID0gYnJhY2tldFN0ci5yZXBsYWNlKCcoKScsICcnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyYWNrZXRGbGFnID0gIWJyYWNrZXRTdHIubGVuZ3RoO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyDmo4Dmn6XlrZfmrrXmmK/lkKborr7nva5cclxuICAgICAgICAgICAgY29uc3QgZW1wdHlGaWVsZHMgPSBjb25kaXRpb25zLmZpbHRlcigobjogYW55KSA9PiAhbi5maWx0ZXJGaWVsZCkubGVuZ3RoID09PSAwO1xyXG5cclxuXHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBicmFja2V0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBicmFja2V0RmxhZyxcclxuICAgICAgICAgICAgICAgICAgICBtc2c6IGxvY2FsZVNlcnZpY2UgPyBsb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJFZGl0b3IudmFsaWRhdGUuYnJhY2tldCcpIDogJ+aLrOWPt+S4jeWMuemFje+8jOivt+ajgOafpeOAgidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWxhdGlvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdDogcmVsYXRpb25GbGFnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogbG9jYWxlU2VydmljZSA/bG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZmlsdGVyRWRpdG9yLnZhbGlkYXRlLnJlbGF0aW9uJykgOiAn5YWz57O76K6+572u5LiN5a6M5pW077yM6K+35qOA5p+l44CCJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGZpZWxkOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBlbXB0eUZpZWxkcyxcclxuICAgICAgICAgICAgICAgICAgICBtc2c6IGxvY2FsZVNlcnZpY2U/bG9jYWxlU2VydmljZS5nZXRWYWx1ZSgnZmlsdGVyRWRpdG9yLnZhbGlkYXRlLmZpZWxkJyk6ICflrZfmrrXkuI3lhYHorrjkuLrnqbrvvIzor7fmo4Dmn6XjgIInXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxufVxyXG4iXX0=