/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-08-15 17:22:59
 */
import { Component, Input, HostBinding } from '@angular/core';
var FilterCodeComponent = /** @class */ (function () {
    function FilterCodeComponent(el) {
        this.el = el;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
    }
    /**
     * @return {?}
     */
    FilterCodeComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.el.nativeElement.style.overflow = 'auto';
    };
    FilterCodeComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-code',
                    template: "\n    <div style=\"overflow:auto\" [style.height.px]=\"height - 38\">\n        <pre class=\"flex-fill\">\n            <code>{{ conditions | json }}</code>\n        </pre>\n    </div>\n    ",
                    styles: ["\n        pre {\n            color: #d8d9d9;\n            background: #424242;\n            padding-left: 20px;\n            padding-top: 20px;\n            margin-bottom: 0;\n            font-size: 16px;\n        }\n        "]
                }] }
    ];
    /** @nocollapse */
    FilterCodeComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    FilterCodeComponent.propDecorators = {
        cls: [{ type: HostBinding, args: ['class',] }],
        height: [{ type: Input }],
        conditions: [{ type: Input }]
    };
    return FilterCodeComponent;
}());
export { FilterCodeComponent };
if (false) {
    /** @type {?} */
    FilterCodeComponent.prototype.cls;
    /** @type {?} */
    FilterCodeComponent.prototype.height;
    /** @type {?} */
    FilterCodeComponent.prototype.conditions;
    /**
     * @type {?}
     * @private
     */
    FilterCodeComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmlsdGVyLWNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7QUFVM0MsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR3RFO0lBNkJJLDZCQUFvQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUpaLFFBQUcsR0FBRyw4QkFBOEIsQ0FBQztRQUVsRCxlQUFVLEdBQXNCLEVBQUUsQ0FBQztJQUVOLENBQUM7Ozs7SUFFdkMsc0NBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDbEQsQ0FBQzs7Z0JBakNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtvQkFDdkIsUUFBUSxFQUFFLDhMQU1UOzZCQUVHLG1PQVNDO2lCQUVSOzs7O2dCQWxDUSxVQUFVOzs7c0JBc0NkLFdBQVcsU0FBQyxPQUFPO3lCQUNuQixLQUFLOzZCQUNMLEtBQUs7O0lBT1YsMEJBQUM7Q0FBQSxBQWxDRCxJQWtDQztTQVhZLG1CQUFtQjs7O0lBRTVCLGtDQUEyRDs7SUFDM0QscUNBQXdCOztJQUN4Qix5Q0FBNEM7Ozs7O0lBRWhDLGlDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEVsZW1lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQENvbXBhbnk6IEluc3B1clxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqIEBEYXRlOiAyMDE5LTA0LTA5IDExOjAzOjQ5XHJcbiAqIEBMYXN0RWRpdFRpbWU6IDIwMTktMDgtMTUgMTc6MjI6NTlcclxuICovXHJcblxyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL3R5cGVzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWx0ZXItY29kZScsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBzdHlsZT1cIm92ZXJmbG93OmF1dG9cIiBbc3R5bGUuaGVpZ2h0LnB4XT1cImhlaWdodCAtIDM4XCI+XHJcbiAgICAgICAgPHByZSBjbGFzcz1cImZsZXgtZmlsbFwiPlxyXG4gICAgICAgICAgICA8Y29kZT57eyBjb25kaXRpb25zIHwganNvbiB9fTwvY29kZT5cclxuICAgICAgICA8L3ByZT5cclxuICAgIDwvZGl2PlxyXG4gICAgYCxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGBcclxuICAgICAgICBwcmUge1xyXG4gICAgICAgICAgICBjb2xvcjogI2Q4ZDlkOTtcclxuICAgICAgICAgICAgYmFja2dyb3VuZDogIzQyNDI0MjtcclxuICAgICAgICAgICAgcGFkZGluZy1sZWZ0OiAyMHB4O1xyXG4gICAgICAgICAgICBwYWRkaW5nLXRvcDogMjBweDtcclxuICAgICAgICAgICAgbWFyZ2luLWJvdHRvbTogMDtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxNnB4O1xyXG4gICAgICAgIH1cclxuICAgICAgICBgXHJcbiAgICBdXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ29kZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcblxyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNscyA9ICdkLWZsZXggZmxleC1jb2x1bW4gZmxleC1maWxsJztcclxuICAgIEBJbnB1dCgpIGhlaWdodDogbnVtYmVyO1xyXG4gICAgQElucHV0KCkgY29uZGl0aW9uczogRmlsdGVyQ29uZGl0aW9uW10gPSBbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGUub3ZlcmZsb3cgPSAnYXV0byc7XHJcbiAgICB9XHJcbn1cclxuIl19