/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Optional } from '@angular/core';
import { Subject } from 'rxjs';
import { FilterRelation } from '@farris/ui-common/types';
import { CommonUtils } from '@farris/ui-common';
export class FilterService {
    /**
     * @param {?} utils
     */
    constructor(utils) {
        this.conditionsChanged = new Subject();
        this.commonUtils = utils || new CommonUtils();
    }
    /**
     * @param {?} c
     * @return {?}
     */
    buildSqlWhere(c) {
        return this.commonUtils.buildSqlWhere(c);
    }
    /**
     * @param {?} conditions
     * @param {?=} localeService
     * @return {?}
     */
    isValid(conditions, localeService) {
        if (conditions && conditions.length) {
            // 清除最后条件的关系符
            conditions[conditions.length - 1].relation = FilterRelation.Empty;
            // 检查关系连接符
            /** @type {?} */
            const emptyRelations = conditions
                .map((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                if (n.relation == "" + FilterRelation.Empty) {
                    return { index: i, filter: n };
                }
                return null;
            }))
                .filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => {
                return n && i !== conditions.length - 1;
            }));
            /** @type {?} */
            let relationFlag = true;
            if (emptyRelations.length) {
                relationFlag = false;
            }
            // 检查括号
            /** @type {?} */
            let bracketFlag = true;
            /** @type {?} */
            let bracketStr = '';
            for (let i = 0; i < conditions.length; i++) {
                bracketStr += conditions[i].lbracket + conditions[i].rbracket;
            }
            /** @type {?} */
            const l = bracketStr.length;
            if (l % 2 > 0) {
                bracketFlag = false;
            }
            else {
                for (let i = 0; i < l; i++) {
                    bracketStr = bracketStr.replace('()', '');
                }
                bracketFlag = !bracketStr.length;
            }
            // 检查字段是否设置
            /** @type {?} */
            const emptyFields = conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            (n) => !n.filterField)).length === 0;
            return {
                bracket: {
                    result: bracketFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.bracket') : '括号不匹配，请检查。'
                },
                relation: {
                    result: relationFlag,
                    msg: localeService ? localeService.getValue('filterEditor.validate.relation') : '关系设置不完整，请检查。'
                },
                field: {
                    result: emptyFields,
                    msg: localeService ? localeService.getValue('filterEditor.validate.field') : '字段不允许为空，请检查。'
                }
            };
        }
        return true;
    }
}
FilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FilterService.ctorParameters = () => [
    { type: CommonUtils, decorators: [{ type: Optional }] }
];
if (false) {
    /** @type {?} */
    FilterService.prototype.conditionsChanged;
    /** @type {?} */
    FilterService.prototype.commonUtils;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmlsdGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JELE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUE0QixjQUFjLEVBQW9CLE1BQU0seUJBQXlCLENBQUM7QUFDckcsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBR2hELE1BQU0sT0FBTyxhQUFhOzs7O0lBSXRCLFlBQXdCLEtBQWtCO1FBRjFDLHNCQUFpQixHQUFHLElBQUksT0FBTyxFQUFxQixDQUFDO1FBR2pELElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxJQUFJLElBQUksV0FBVyxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7Ozs7SUFFRCxhQUFhLENBQUMsQ0FBTTtRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Ozs7OztJQUdELE9BQU8sQ0FBQyxVQUE2QixFQUFFLGFBQTZCO1FBQ2hFLElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEVBQUU7WUFDakMsYUFBYTtZQUNiLFVBQVUsQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDOzs7a0JBRzVELGNBQWMsR0FBRyxVQUFVO2lCQUM1QixHQUFHOzs7OztZQUFDLENBQUMsQ0FBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUNmLElBQUksQ0FBQyxDQUFDLFFBQVEsSUFBSSxFQUFFLEdBQUcsY0FBYyxDQUFDLEtBQUssRUFBRTtvQkFDekMsT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO2lCQUNsQztnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDLEVBQUM7aUJBQ0QsTUFBTTs7Ozs7WUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtnQkFDYixPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssVUFBVSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDNUMsQ0FBQyxFQUFDOztnQkFFRixZQUFZLEdBQUcsSUFBSTtZQUN2QixJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUU7Z0JBQ3ZCLFlBQVksR0FBRyxLQUFLLENBQUM7YUFDeEI7OztnQkFHRyxXQUFXLEdBQUcsSUFBSTs7Z0JBQ2xCLFVBQVUsR0FBRyxFQUFFO1lBQ25CLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxVQUFVLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO2dCQUN4QyxVQUFVLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO2FBQ2pFOztrQkFFSyxDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQU07WUFDM0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDWCxXQUFXLEdBQUcsS0FBSyxDQUFDO2FBQ3ZCO2lCQUFNO2dCQUNILEtBQUksSUFBSSxDQUFDLEdBQUUsQ0FBQyxFQUFFLENBQUMsR0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3JCLFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztpQkFDN0M7Z0JBQ0QsV0FBVyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQzthQUNwQzs7O2tCQUdLLFdBQVcsR0FBRyxVQUFVLENBQUMsTUFBTTs7OztZQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQztZQUc5RSxPQUFPO2dCQUNILE9BQU8sRUFBRTtvQkFDTCxNQUFNLEVBQUUsV0FBVztvQkFDbkIsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQywrQkFBK0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxZQUFZO2lCQUM5RjtnQkFDRCxRQUFRLEVBQUU7b0JBQ04sTUFBTSxFQUFFLFlBQVk7b0JBQ3BCLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQyxDQUFBLGFBQWEsQ0FBQyxRQUFRLENBQUMsZ0NBQWdDLENBQUMsQ0FBQyxDQUFDLENBQUMsY0FBYztpQkFDaEc7Z0JBQ0QsS0FBSyxFQUFFO29CQUNILE1BQU0sRUFBRSxXQUFXO29CQUNuQixHQUFHLEVBQUUsYUFBYSxDQUFBLENBQUMsQ0FBQSxhQUFhLENBQUMsUUFBUSxDQUFDLDZCQUE2QixDQUFDLENBQUEsQ0FBQyxDQUFDLGNBQWM7aUJBQzNGO2FBQ0osQ0FBQztTQUNMO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQzs7O1lBMUVKLFVBQVU7Ozs7WUFGRixXQUFXLHVCQU9ILFFBQVE7Ozs7SUFGckIsMENBQXFEOztJQUNyRCxvQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgQ29tcGFyZSwgRmlsdGVyUmVsYXRpb24sIENvbXBhcmVPcGVyYXRvcnMgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi90eXBlcyc7XHJcbmltcG9ydCB7IENvbW1vblV0aWxzIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBMb2NhbGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJTZXJ2aWNlIHtcclxuXHJcbiAgICBjb25kaXRpb25zQ2hhbmdlZCA9IG5ldyBTdWJqZWN0PEZpbHRlckNvbmRpdGlvbltdPigpO1xyXG4gICAgY29tbW9uVXRpbHM6IENvbW1vblV0aWxzO1xyXG4gICAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgdXRpbHM6IENvbW1vblV0aWxzKSB7XHJcbiAgICAgICAgdGhpcy5jb21tb25VdGlscyA9IHV0aWxzIHx8IG5ldyBDb21tb25VdGlscygpO1xyXG4gICAgfVxyXG5cclxuICAgIGJ1aWxkU3FsV2hlcmUoYzogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tbW9uVXRpbHMuYnVpbGRTcWxXaGVyZShjKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgaXNWYWxpZChjb25kaXRpb25zOiBGaWx0ZXJDb25kaXRpb25bXSwgbG9jYWxlU2VydmljZT86IExvY2FsZVNlcnZpY2UpIHtcclxuICAgICAgICBpZiAoY29uZGl0aW9ucyAmJiBjb25kaXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAvLyDmuIXpmaTmnIDlkI7mnaHku7bnmoTlhbPns7vnrKZcclxuICAgICAgICAgICAgY29uZGl0aW9uc1tjb25kaXRpb25zLmxlbmd0aCAtIDFdLnJlbGF0aW9uID0gRmlsdGVyUmVsYXRpb24uRW1wdHk7XHJcblxyXG4gICAgICAgICAgICAvLyDmo4Dmn6XlhbPns7vov57mjqXnrKZcclxuICAgICAgICAgICAgY29uc3QgZW1wdHlSZWxhdGlvbnMgPSBjb25kaXRpb25zXHJcbiAgICAgICAgICAgICAgICAubWFwKChuOiBhbnksIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5yZWxhdGlvbiA9PSBcIlwiICsgRmlsdGVyUmVsYXRpb24uRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgaW5kZXg6IGksIGZpbHRlcjogbiB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuZmlsdGVyKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4gJiYgaSAhPT0gY29uZGl0aW9ucy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBsZXQgcmVsYXRpb25GbGFnID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKGVtcHR5UmVsYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmVsYXRpb25GbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOajgOafpeaLrOWPt1xyXG4gICAgICAgICAgICBsZXQgYnJhY2tldEZsYWcgPSB0cnVlOyBcclxuICAgICAgICAgICAgbGV0IGJyYWNrZXRTdHIgPSAnJztcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb25kaXRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBicmFja2V0U3RyICs9IGNvbmRpdGlvbnNbaV0ubGJyYWNrZXQgKyBjb25kaXRpb25zW2ldLnJicmFja2V0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBicmFja2V0U3RyLmxlbmd0aCA7XHJcbiAgICAgICAgICAgIGlmIChsICUgMiA+IDApIHtcclxuICAgICAgICAgICAgICAgIGJyYWNrZXRGbGFnID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBmb3IobGV0IGkgPTA7IGk8IGw7IGkrKyApe1xyXG4gICAgICAgICAgICAgICAgICAgIGJyYWNrZXRTdHIgPSBicmFja2V0U3RyLnJlcGxhY2UoJygpJywgJycpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYnJhY2tldEZsYWcgPSAhYnJhY2tldFN0ci5sZW5ndGg7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIOajgOafpeWtl+auteaYr+WQpuiuvue9rlxyXG4gICAgICAgICAgICBjb25zdCBlbXB0eUZpZWxkcyA9IGNvbmRpdGlvbnMuZmlsdGVyKChuOiBhbnkpID0+ICFuLmZpbHRlckZpZWxkKS5sZW5ndGggPT09IDA7XHJcblxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIGJyYWNrZXQ6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IGJyYWNrZXRGbGFnLFxyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogbG9jYWxlU2VydmljZSA/IGxvY2FsZVNlcnZpY2UuZ2V0VmFsdWUoJ2ZpbHRlckVkaXRvci52YWxpZGF0ZS5icmFja2V0JykgOiAn5ous5Y+35LiN5Yy56YWN77yM6K+35qOA5p+l44CCJ1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHJlbGF0aW9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiByZWxhdGlvbkZsYWcsXHJcbiAgICAgICAgICAgICAgICAgICAgbXNnOiBsb2NhbGVTZXJ2aWNlID9sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJFZGl0b3IudmFsaWRhdGUucmVsYXRpb24nKSA6ICflhbPns7vorr7nva7kuI3lrozmlbTvvIzor7fmo4Dmn6XjgIInXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgZmllbGQ6IHtcclxuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IGVtcHR5RmllbGRzLFxyXG4gICAgICAgICAgICAgICAgICAgIG1zZzogbG9jYWxlU2VydmljZT9sb2NhbGVTZXJ2aWNlLmdldFZhbHVlKCdmaWx0ZXJFZGl0b3IudmFsaWRhdGUuZmllbGQnKTogJ+Wtl+auteS4jeWFgeiuuOS4uuepuu+8jOivt+ajgOafpeOAgidcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==