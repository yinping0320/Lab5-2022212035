/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Output, HostBinding } from '@angular/core';
import { FilterGridComponent } from './filter-grid.component';
export class FilterFooterComponent {
    /**
     * @param {?} grid
     */
    constructor(grid) {
        this.grid = grid;
        this.cls = 'f-filter-footer';
        this.addFilter = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.moveTop = new EventEmitter();
        this.movePrev = new EventEmitter();
        this.moveNext = new EventEmitter();
        this.moveBottom = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @return {?}
     */
    onAddFilter() {
        this.addFilter.emit();
    }
    /**
     * @return {?}
     */
    onClear() {
        this.clearFilter.emit();
    }
    /**
     * @return {?}
     */
    onMoveTop() {
        this.moveTop.emit();
    }
    /**
     * @return {?}
     */
    onMovePrev() {
        this.movePrev.emit();
    }
    /**
     * @return {?}
     */
    onMoveNext() {
        this.moveNext.emit();
    }
    /**
     * @return {?}
     */
    onMoveBottom() {
        this.moveBottom.emit();
    }
    /**
     * @return {?}
     */
    canUse() {
        if (this.grid.currentCondition) {
            return this.grid.conditions.length > 1;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveUp() {
        if (this.canUse()) {
            return this.grid.currentCondition.index > 0;
        }
        return false;
    }
    /**
     * @return {?}
     */
    canMoveDown() {
        if (this.canUse()) {
            return this.grid.currentCondition.index < this.grid.conditions.length - 1;
        }
        return false;
    }
}
FilterFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-footer',
                template: `
    <div class="footer-container px-2" style="height: 36px;">
        <button type="button" (click)="onAddFilter()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-add"></span> {{ 'filterEditor.addWhere' | locale }}</button>
        <button type="button" (click)="onClear()" [disabled]="!grid.conditions.length"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-close"></span> {{ 'filterEditor.clear' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMoveTop()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-end-up"></span>
            {{'filterEditor.moveTop' | locale }}</button>
        <button type="button" [disabled]="!canMoveUp()" (click)="onMovePrev()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-up"></span>
            {{'filterEditor.moveUp' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveNext()"
            class="k-button k-button-icontext k-flat "><span class="f-icon f-icon-arrow-60-down"></span>
            {{'filterEditor.moveDown' | locale }}</button>
        <button type="button" [disabled]="!canMoveDown()" (click)="onMoveBottom()"
            class="k-button k-button-icontext k-flat"><span class="f-icon f-icon-arrow-end-down"></span>
            {{'filterEditor.moveBottom' | locale }}</button>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterFooterComponent.ctorParameters = () => [
    { type: FilterGridComponent }
];
FilterFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    addFilter: [{ type: Output }],
    clearFilter: [{ type: Output }],
    moveTop: [{ type: Output }],
    movePrev: [{ type: Output }],
    moveNext: [{ type: Output }],
    moveBottom: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FilterFooterComponent.prototype.cls;
    /** @type {?} */
    FilterFooterComponent.prototype.addFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.clearFilter;
    /** @type {?} */
    FilterFooterComponent.prototype.moveTop;
    /** @type {?} */
    FilterFooterComponent.prototype.movePrev;
    /** @type {?} */
    FilterFooterComponent.prototype.moveNext;
    /** @type {?} */
    FilterFooterComponent.prototype.moveBottom;
    /** @type {?} */
    FilterFooterComponent.prototype.grid;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWZvb3Rlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZm9vdGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxZQUFZLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQTBCOUQsTUFBTSxPQUFPLHFCQUFxQjs7OztJQVc5QixZQUFtQixJQUF5QjtRQUF6QixTQUFJLEdBQUosSUFBSSxDQUFxQjtRQVZ0QixRQUFHLEdBQUcsaUJBQWlCLENBQUM7UUFFcEMsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpDLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzlCLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBRU0sQ0FBQzs7OztJQUVqRCxRQUFRLEtBQUssQ0FBQzs7OztJQUVkLFdBQVc7UUFDUCxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxPQUFPO1FBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsU0FBUztRQUNMLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7OztJQUNELFVBQVU7UUFDTixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3pCLENBQUM7Ozs7SUFDRCxVQUFVO1FBQ04sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBQ0QsWUFBWTtRQUNSLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDM0IsQ0FBQzs7OztJQUdELE1BQU07UUFDRixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDNUIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQzFDO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFNBQVM7UUFDTCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1NBQy9DO1FBRUQsT0FBTyxLQUFLLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztTQUM3RTtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7OztZQW5GSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztLQW1CVDthQUNKOzs7O1lBeEJRLG1CQUFtQjs7O2tCQTJCdkIsV0FBVyxTQUFDLE9BQU87d0JBRW5CLE1BQU07MEJBQ04sTUFBTTtzQkFFTixNQUFNO3VCQUNOLE1BQU07dUJBQ04sTUFBTTt5QkFDTixNQUFNOzs7O0lBUlAsb0NBQThDOztJQUU5QywwQ0FBeUM7O0lBQ3pDLDRDQUEyQzs7SUFFM0Msd0NBQXVDOztJQUN2Qyx5Q0FBd0M7O0lBQ3hDLHlDQUF3Qzs7SUFDeEMsMkNBQTBDOztJQUU5QixxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIEhvc3RCaW5kaW5nIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZpbHRlckdyaWRDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1ncmlkLmNvbXBvbmVudCc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWZvb3RlcicsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImZvb3Rlci1jb250YWluZXIgcHgtMlwiIHN0eWxlPVwiaGVpZ2h0OiAzNnB4O1wiPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIChjbGljayk9XCJvbkFkZEZpbHRlcigpXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXQgXCI+PHNwYW4gY2xhc3M9XCJmLWljb24gZi1pY29uLWFkZFwiPjwvc3Bhbj4ge3sgJ2ZpbHRlckVkaXRvci5hZGRXaGVyZScgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiAoY2xpY2spPVwib25DbGVhcigpXCIgW2Rpc2FibGVkXT1cIiFncmlkLmNvbmRpdGlvbnMubGVuZ3RoXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXQgXCI+PHNwYW4gY2xhc3M9XCJmLWljb24gZi1pY29uLWNsb3NlXCI+PC9zcGFuPiB7eyAnZmlsdGVyRWRpdG9yLmNsZWFyJyB8IGxvY2FsZSB9fTwvYnV0dG9uPlxyXG4gICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIFtkaXNhYmxlZF09XCIhY2FuTW92ZVVwKClcIiAoY2xpY2spPVwib25Nb3ZlVG9wKClcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImstYnV0dG9uIGstYnV0dG9uLWljb250ZXh0IGstZmxhdCBcIj48c3BhbiBjbGFzcz1cImYtaWNvbiBmLWljb24tYXJyb3ctZW5kLXVwXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICB7eydmaWx0ZXJFZGl0b3IubW92ZVRvcCcgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIWNhbk1vdmVVcCgpXCIgKGNsaWNrKT1cIm9uTW92ZVByZXYoKVwiXHJcbiAgICAgICAgICAgIGNsYXNzPVwiay1idXR0b24gay1idXR0b24taWNvbnRleHQgay1mbGF0IFwiPjxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1hcnJvdy02MC11cFwiPjwvc3Bhbj5cclxuICAgICAgICAgICAge3snZmlsdGVyRWRpdG9yLm1vdmVVcCcgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIWNhbk1vdmVEb3duKClcIiAoY2xpY2spPVwib25Nb3ZlTmV4dCgpXCJcclxuICAgICAgICAgICAgY2xhc3M9XCJrLWJ1dHRvbiBrLWJ1dHRvbi1pY29udGV4dCBrLWZsYXQgXCI+PHNwYW4gY2xhc3M9XCJmLWljb24gZi1pY29uLWFycm93LTYwLWRvd25cIj48L3NwYW4+XHJcbiAgICAgICAgICAgIHt7J2ZpbHRlckVkaXRvci5tb3ZlRG93bicgfCBsb2NhbGUgfX08L2J1dHRvbj5cclxuICAgICAgICA8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBbZGlzYWJsZWRdPVwiIWNhbk1vdmVEb3duKClcIiAoY2xpY2spPVwib25Nb3ZlQm90dG9tKClcIlxyXG4gICAgICAgICAgICBjbGFzcz1cImstYnV0dG9uIGstYnV0dG9uLWljb250ZXh0IGstZmxhdFwiPjxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1hcnJvdy1lbmQtZG93blwiPjwvc3Bhbj5cclxuICAgICAgICAgICAge3snZmlsdGVyRWRpdG9yLm1vdmVCb3R0b20nIHwgbG9jYWxlIH19PC9idXR0b24+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJGb290ZXJDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcycpIGNscyA9ICdmLWZpbHRlci1mb290ZXInO1xyXG5cclxuICAgIEBPdXRwdXQoKSBhZGRGaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgY2xlYXJGaWx0ZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIG1vdmVUb3AgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgbW92ZVByZXYgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgbW92ZU5leHQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgbW92ZUJvdHRvbSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgZ3JpZDogRmlsdGVyR3JpZENvbXBvbmVudCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgICBvbkFkZEZpbHRlcigpIHtcclxuICAgICAgICB0aGlzLmFkZEZpbHRlci5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcigpIHtcclxuICAgICAgICB0aGlzLmNsZWFyRmlsdGVyLmVtaXQoKTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdmVUb3AoKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlVG9wLmVtaXQoKTtcclxuICAgIH1cclxuICAgIG9uTW92ZVByZXYoKSB7XHJcbiAgICAgICAgdGhpcy5tb3ZlUHJldi5lbWl0KCk7XHJcbiAgICB9XHJcbiAgICBvbk1vdmVOZXh0KCkge1xyXG4gICAgICAgIHRoaXMubW92ZU5leHQuZW1pdCgpO1xyXG4gICAgfVxyXG4gICAgb25Nb3ZlQm90dG9tKCkge1xyXG4gICAgICAgIHRoaXMubW92ZUJvdHRvbS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNhblVzZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5ncmlkLmN1cnJlbnRDb25kaXRpb24pIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5jb25kaXRpb25zLmxlbmd0aCA+IDE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuTW92ZVVwKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNhblVzZSgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdyaWQuY3VycmVudENvbmRpdGlvbi5pbmRleCA+IDA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcblxyXG4gICAgY2FuTW92ZURvd24oKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2FuVXNlKCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JpZC5jdXJyZW50Q29uZGl0aW9uLmluZGV4IDwgdGhpcy5ncmlkLmNvbmRpdGlvbnMubGVuZ3RoIC0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxufVxyXG4iXX0=