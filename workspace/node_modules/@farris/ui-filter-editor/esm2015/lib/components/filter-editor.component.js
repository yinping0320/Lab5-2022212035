/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-11-30 10:15:14
 */
import { Component, HostBinding, Input, Output, EventEmitter, Injector, Optional, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { FilterService } from './../services/filter.service';
import { Compare } from '@farris/ui-common/types';
import { LocaleService } from '@farris/ui-locale';
export class FilterEditorComponent {
    /**
     * @param {?} sanitizer
     * @param {?} filterService
     * @param {?} injector
     */
    constructor(sanitizer, filterService, injector) {
        this.sanitizer = sanitizer;
        this.filterService = filterService;
        this.injector = injector;
        this.tabIndex = 0;
        this.columns = [];
        this.conditions = [];
        this.showCode = false;
        this.showSql = false;
        this.enableExpress = false;
        this.enableFrontExpress = false;
        this.fieldEditor = { type: 'select', options: {} };
        this.insertType = 'below';
        /**
         * 当值类型为 value 时是否显示按钮，默认不显示
         */
        this.useCustomValue = false;
        this.showExpress = new EventEmitter();
        this.cls = 'f-utils-flex-column f-utils-absolute-all';
        this.localeService = null;
        this.filterService.conditionsChanged.subscribe((/**
         * @param {?} conditionList
         * @return {?}
         */
        conditionList => {
            this.conditions = conditionList;
        }));
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService, null);
            this.cd = this.injector.get(ChangeDetectorRef);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.map((/**
             * @param {?} con
             * @return {?}
             */
            con => {
                /** @type {?} */
                const cp = parseInt('' + con.compare, 10);
                if (cp === Compare.In || cp === Compare.NotIn) {
                    con.value = con.value.replace(/\r\n/g, ',');
                }
                return con;
            }));
        }
    }
    /**
     * @param {?} index
     * @return {?}
     */
    onTabChange(index) {
        this.tabIndex = index;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowExpress($event) {
        $event.instance = this;
        this.showExpress.emit($event);
    }
    /**
     * @return {?}
     */
    validation() {
        return this.filterService.isValid(this.conditions, this.localeService);
    }
}
FilterEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-editor',
                template: `
        <filter-tabs
            class="f-utils-fill-flex-column"
            [showCode]="showCode"
            [showSql]="showSql"
            [columns]="columns"
            [height]="height"
            [enableExpress]="enableExpress"
            [enableFrontExpress]="enableFrontExpress"
            [conditions]="conditions"
            [fieldEditor]="fieldEditor"
            (showExpress)="onShowExpress($event)"
            (selectTabChange)="onTabChange($event)"
            [insertType]="insertType"
            [useCustomValue]="useCustomValue">
        </filter-tabs>
    `
            }] }
];
/** @nocollapse */
FilterEditorComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: FilterService },
    { type: Injector, decorators: [{ type: Optional }] }
];
FilterEditorComponent.propDecorators = {
    columns: [{ type: Input }],
    conditions: [{ type: Input }],
    height: [{ type: Input }],
    showCode: [{ type: Input }],
    showSql: [{ type: Input }],
    enableExpress: [{ type: Input }],
    enableFrontExpress: [{ type: Input }],
    fieldEditor: [{ type: Input }],
    insertType: [{ type: Input }],
    useCustomValue: [{ type: Input }],
    showExpress: [{ type: Output }],
    cls: [{ type: HostBinding, args: ['class',] }]
};
if (false) {
    /** @type {?} */
    FilterEditorComponent.prototype.tabIndex;
    /** @type {?} */
    FilterEditorComponent.prototype.columns;
    /** @type {?} */
    FilterEditorComponent.prototype.conditions;
    /** @type {?} */
    FilterEditorComponent.prototype.height;
    /** @type {?} */
    FilterEditorComponent.prototype.showCode;
    /** @type {?} */
    FilterEditorComponent.prototype.showSql;
    /** @type {?} */
    FilterEditorComponent.prototype.enableExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.enableFrontExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.fieldEditor;
    /** @type {?} */
    FilterEditorComponent.prototype.insertType;
    /**
     * 当值类型为 value 时是否显示按钮，默认不显示
     * @type {?}
     */
    FilterEditorComponent.prototype.useCustomValue;
    /** @type {?} */
    FilterEditorComponent.prototype.showExpress;
    /** @type {?} */
    FilterEditorComponent.prototype.cls;
    /** @type {?} */
    FilterEditorComponent.prototype.localeService;
    /** @type {?} */
    FilterEditorComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.filterService;
    /**
     * @type {?}
     * @private
     */
    FilterEditorComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWZpbHRlci1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9maWx0ZXItZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFTQSxPQUFPLEVBQUUsU0FBUyxFQUFVLFdBQVcsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFvQyxNQUFNLGVBQWUsQ0FBQztBQUNySyxPQUFPLEVBQUUsWUFBWSxFQUFhLE1BQU0sMkJBQTJCLENBQUM7QUFFcEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBQzdELE9BQU8sRUFBbUIsT0FBTyxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDbkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBdUJsRCxNQUFNLE9BQU8scUJBQXFCOzs7Ozs7SUFvQjlCLFlBQW9CLFNBQXVCLEVBQVUsYUFBNEIsRUFBc0IsUUFBa0I7UUFBckcsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQXNCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFuQnpILGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDSixZQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2IsZUFBVSxHQUFzQixFQUFFLENBQUM7UUFFbkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ2hCLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBQ3RCLHVCQUFrQixHQUFHLEtBQUssQ0FBQztRQUMzQixnQkFBVyxHQUFJLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFDLENBQUM7UUFDOUMsZUFBVSxHQUFvQixPQUFPLENBQUM7Ozs7UUFFdEMsbUJBQWMsR0FBRyxLQUFLLENBQUM7UUFFdEIsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQ3JCLFFBQUcsR0FBRywwQ0FBMEMsQ0FBQztRQUV2RSxrQkFBYSxHQUFrQixJQUFJLENBQUM7UUFJaEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTOzs7O1FBQUMsYUFBYSxDQUFDLEVBQUU7WUFDM0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxhQUFhLENBQUM7UUFDcEMsQ0FBQyxFQUFDLENBQUM7UUFFSCxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDZixJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRTtZQUMzQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRzs7OztZQUFDLEdBQUcsQ0FBQyxFQUFFOztzQkFDbEMsRUFBRSxHQUFHLFFBQVEsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUM7Z0JBQ3pDLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQzNDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2lCQUMvQztnQkFDRCxPQUFPLEdBQUcsQ0FBQztZQUNmLENBQUMsRUFBQyxDQUFDO1NBQ047SUFDTCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxLQUFhO1FBQ3JCLElBQUksQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQVc7UUFDckIsTUFBTSxDQUFDLFFBQVEsR0FBSSxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7OztJQUVELFVBQVU7UUFDTixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQzNFLENBQUM7OztZQTNFSixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLGVBQWU7Z0JBQ3pCLFFBQVEsRUFBRTs7Ozs7Ozs7Ozs7Ozs7OztLQWdCVDthQUNKOzs7O1lBekJRLFlBQVk7WUFFWixhQUFhO1lBSGdELFFBQVEsdUJBZ0RVLFFBQVE7OztzQkFsQjNGLEtBQUs7eUJBQ0wsS0FBSztxQkFDTCxLQUFLO3VCQUNMLEtBQUs7c0JBQ0wsS0FBSzs0QkFDTCxLQUFLO2lDQUNMLEtBQUs7MEJBQ0wsS0FBSzt5QkFDTCxLQUFLOzZCQUVMLEtBQUs7MEJBRUwsTUFBTTtrQkFDTixXQUFXLFNBQUMsT0FBTzs7OztJQWRwQix5Q0FBYTs7SUFDYix3Q0FBc0I7O0lBQ3RCLDJDQUE0Qzs7SUFDNUMsdUNBQXdCOztJQUN4Qix5Q0FBMEI7O0lBQzFCLHdDQUF5Qjs7SUFDekIsOENBQStCOztJQUMvQixtREFBb0M7O0lBQ3BDLDRDQUF1RDs7SUFDdkQsMkNBQStDOzs7OztJQUUvQywrQ0FBZ0M7O0lBRWhDLDRDQUEyQzs7SUFDM0Msb0NBQXVFOztJQUV2RSw4Q0FBb0M7O0lBQ3BDLG1DQUFzQjs7Ozs7SUFFViwwQ0FBK0I7Ozs7O0lBQUUsOENBQW9DOzs7OztJQUFFLHlDQUFzQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBDb21wYW55OiBJbnNwdXJcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKiBARGF0ZTogMjAxOS0wNC0wOSAxMTowMzo0OVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTExLTMwIDEwOjE1OjE0XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEhvc3RCaW5kaW5nLCBJbnB1dCwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBPcHRpb25hbCwgQ2hhbmdlRGV0ZWN0b3JSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBEb0NoZWNrIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERvbVNhbml0aXplciwgU2FmZVN0eWxlIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgQ29tcGFyZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL3R5cGVzJztcclxuaW1wb3J0IHsgTG9jYWxlU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktbG9jYWxlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdmaWx0ZXItZWRpdG9yJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGZpbHRlci10YWJzXHJcbiAgICAgICAgICAgIGNsYXNzPVwiZi11dGlscy1maWxsLWZsZXgtY29sdW1uXCJcclxuICAgICAgICAgICAgW3Nob3dDb2RlXT1cInNob3dDb2RlXCJcclxuICAgICAgICAgICAgW3Nob3dTcWxdPVwic2hvd1NxbFwiXHJcbiAgICAgICAgICAgIFtjb2x1bW5zXT1cImNvbHVtbnNcIlxyXG4gICAgICAgICAgICBbaGVpZ2h0XT1cImhlaWdodFwiXHJcbiAgICAgICAgICAgIFtlbmFibGVFeHByZXNzXT1cImVuYWJsZUV4cHJlc3NcIlxyXG4gICAgICAgICAgICBbZW5hYmxlRnJvbnRFeHByZXNzXT1cImVuYWJsZUZyb250RXhwcmVzc1wiXHJcbiAgICAgICAgICAgIFtjb25kaXRpb25zXT1cImNvbmRpdGlvbnNcIlxyXG4gICAgICAgICAgICBbZmllbGRFZGl0b3JdPVwiZmllbGRFZGl0b3JcIlxyXG4gICAgICAgICAgICAoc2hvd0V4cHJlc3MpPVwib25TaG93RXhwcmVzcygkZXZlbnQpXCJcclxuICAgICAgICAgICAgKHNlbGVjdFRhYkNoYW5nZSk9XCJvblRhYkNoYW5nZSgkZXZlbnQpXCJcclxuICAgICAgICAgICAgW2luc2VydFR5cGVdPVwiaW5zZXJ0VHlwZVwiXHJcbiAgICAgICAgICAgIFt1c2VDdXN0b21WYWx1ZV09XCJ1c2VDdXN0b21WYWx1ZVwiPlxyXG4gICAgICAgIDwvZmlsdGVyLXRhYnM+XHJcbiAgICBgXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgRmlsdGVyRWRpdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHRhYkluZGV4ID0gMDtcclxuICAgIEBJbnB1dCgpIGNvbHVtbnMgPSBbXTtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHNob3dDb2RlID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBzaG93U3FsID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVFeHByZXNzID0gZmFsc2U7XHJcbiAgICBASW5wdXQoKSBlbmFibGVGcm9udEV4cHJlc3MgPSBmYWxzZTtcclxuICAgIEBJbnB1dCgpIGZpZWxkRWRpdG9yICA9IHsgdHlwZTogJ3NlbGVjdCcsIG9wdGlvbnM6IHt9fTtcclxuICAgIEBJbnB1dCgpIGluc2VydFR5cGU6ICdhYm92ZSd8J2JlbG93JyA9ICdiZWxvdyc7XHJcbiAgICAvKiog5b2T5YC857G75Z6L5Li6IHZhbHVlIOaXtuaYr+WQpuaYvuekuuaMiemSru+8jOm7mOiupOS4jeaYvuekuiAqL1xyXG4gICAgQElucHV0KCkgdXNlQ3VzdG9tVmFsdWUgPSBmYWxzZTtcclxuXHJcbiAgICBAT3V0cHV0KCkgc2hvd0V4cHJlc3MgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzJykgY2xzID0gJ2YtdXRpbHMtZmxleC1jb2x1bW4gZi11dGlscy1hYnNvbHV0ZS1hbGwnO1xyXG5cclxuICAgIGxvY2FsZVNlcnZpY2U6IExvY2FsZVNlcnZpY2UgPSBudWxsO1xyXG4gICAgY2Q6IENoYW5nZURldGVjdG9yUmVmO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByaXZhdGUgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSwgQE9wdGlvbmFsKCkgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmZpbHRlclNlcnZpY2UuY29uZGl0aW9uc0NoYW5nZWQuc3Vic2NyaWJlKGNvbmRpdGlvbkxpc3QgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNvbmRpdGlvbnMgPSBjb25kaXRpb25MaXN0O1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbmplY3Rvcikge1xyXG4gICAgICAgICAgICB0aGlzLmxvY2FsZVNlcnZpY2UgPSB0aGlzLmluamVjdG9yLmdldChMb2NhbGVTZXJ2aWNlLCBudWxsKTtcclxuICAgICAgICAgICAgdGhpcy5jZCA9IHRoaXMuaW5qZWN0b3IuZ2V0KENoYW5nZURldGVjdG9yUmVmKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29uZGl0aW9ucyAmJiB0aGlzLmNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29uZGl0aW9ucyA9IHRoaXMuY29uZGl0aW9ucy5tYXAoY29uID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNwID0gcGFyc2VJbnQoJycgKyBjb24uY29tcGFyZSwgMTApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNwID09PSBDb21wYXJlLkluIHx8IGNwID09PSBDb21wYXJlLk5vdEluKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uLnZhbHVlID0gY29uLnZhbHVlLnJlcGxhY2UoL1xcclxcbi9nLCAnLCcpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNvbjtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uVGFiQ2hhbmdlKGluZGV4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnRhYkluZGV4ID0gaW5kZXg7XHJcbiAgICB9XHJcblxyXG4gICAgb25TaG93RXhwcmVzcygkZXZlbnQ6IGFueSkge1xyXG4gICAgICAgICRldmVudC5pbnN0YW5jZSA9ICB0aGlzO1xyXG4gICAgICAgIHRoaXMuc2hvd0V4cHJlc3MuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhbGlkYXRpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyU2VydmljZS5pc1ZhbGlkKHRoaXMuY29uZGl0aW9ucywgdGhpcy5sb2NhbGVTZXJ2aWNlKTtcclxuICAgIH1cclxufVxyXG4iXX0=