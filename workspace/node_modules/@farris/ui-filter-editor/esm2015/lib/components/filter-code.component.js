/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ElementRef } from '@angular/core';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @Company: Inspur
 * @Version: v0.0.1
 * @Date: 2019-04-09 11:03:49
 * @LastEditTime: 2019-08-15 17:22:59
 */
import { Component, Input, HostBinding } from '@angular/core';
export class FilterCodeComponent {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.cls = 'd-flex flex-column flex-fill';
        this.conditions = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.el.nativeElement.style.overflow = 'auto';
    }
}
FilterCodeComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-code',
                template: `
    <div style="overflow:auto" [style.height.px]="height - 38">
        <pre class="flex-fill">
            <code>{{ conditions | json }}</code>
        </pre>
    </div>
    `,
                styles: [`
        pre {
            color: #d8d9d9;
            background: #424242;
            padding-left: 20px;
            padding-top: 20px;
            margin-bottom: 0;
            font-size: 16px;
        }
        `]
            }] }
];
/** @nocollapse */
FilterCodeComponent.ctorParameters = () => [
    { type: ElementRef }
];
FilterCodeComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    height: [{ type: Input }],
    conditions: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterCodeComponent.prototype.cls;
    /** @type {?} */
    FilterCodeComponent.prototype.height;
    /** @type {?} */
    FilterCodeComponent.prototype.conditions;
    /**
     * @type {?}
     * @private
     */
    FilterCodeComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWNvZGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1maWx0ZXItZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvZmlsdGVyLWNvZGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7Ozs7QUFVM0MsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBMEJ0RSxNQUFNLE9BQU8sbUJBQW1COzs7O0lBTTVCLFlBQW9CLEVBQWM7UUFBZCxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBSlosUUFBRyxHQUFHLDhCQUE4QixDQUFDO1FBRWxELGVBQVUsR0FBc0IsRUFBRSxDQUFDO0lBRU4sQ0FBQzs7OztJQUV2QyxRQUFRO1FBQ0osSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUM7SUFDbEQsQ0FBQzs7O1lBakNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsYUFBYTtnQkFDdkIsUUFBUSxFQUFFOzs7Ozs7S0FNVDt5QkFFRzs7Ozs7Ozs7O1NBU0M7YUFFUjs7OztZQWxDUSxVQUFVOzs7a0JBc0NkLFdBQVcsU0FBQyxPQUFPO3FCQUNuQixLQUFLO3lCQUNMLEtBQUs7Ozs7SUFGTixrQ0FBMkQ7O0lBQzNELHFDQUF3Qjs7SUFDeEIseUNBQTRDOzs7OztJQUVoQyxpQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbi8qXHJcbiAqIEBBdXRob3I6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0b3JzOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBDb21wYW55OiBJbnNwdXJcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKiBARGF0ZTogMjAxOS0wNC0wOSAxMTowMzo0OVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTA4LTE1IDE3OjIyOjU5XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBIb3N0QmluZGluZyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDb25kaXRpb24gfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi90eXBlcyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLWNvZGUnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgc3R5bGU9XCJvdmVyZmxvdzphdXRvXCIgW3N0eWxlLmhlaWdodC5weF09XCJoZWlnaHQgLSAzOFwiPlxyXG4gICAgICAgIDxwcmUgY2xhc3M9XCJmbGV4LWZpbGxcIj5cclxuICAgICAgICAgICAgPGNvZGU+e3sgY29uZGl0aW9ucyB8IGpzb24gfX08L2NvZGU+XHJcbiAgICAgICAgPC9wcmU+XHJcbiAgICA8L2Rpdj5cclxuICAgIGAsXHJcbiAgICBzdHlsZXM6IFtcclxuICAgICAgICBgXHJcbiAgICAgICAgcHJlIHtcclxuICAgICAgICAgICAgY29sb3I6ICNkOGQ5ZDk7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICM0MjQyNDI7XHJcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMjBweDtcclxuICAgICAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XHJcbiAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDA7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTZweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgYFxyXG4gICAgXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIEZpbHRlckNvZGVDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBIb3N0QmluZGluZygnY2xhc3MnKSBjbHMgPSAnZC1mbGV4IGZsZXgtY29sdW1uIGZsZXgtZmlsbCc7XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGNvbmRpdGlvbnM6IEZpbHRlckNvbmRpdGlvbltdID0gW107XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlLm92ZXJmbG93ID0gJ2F1dG8nO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==