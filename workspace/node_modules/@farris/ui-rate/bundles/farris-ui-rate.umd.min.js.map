{"version":3,"sources":["ng://@farris/ui-rate/lib/rate.component.ts","ng://@farris/ui-rate/lib/rate.module.ts"],"names":["RateComponent","Object","defineProperty","prototype","value","this","realScore","ngOnInit","starId","size","oneStarWidth","config","id","length","rate","pointSystem","enableHalf","Math","ceil","realWidth","floor","distance","satisfaction","toolTipContents","onMouseOver","event","isTargetElement","target","parseInt","operateStar","onMouseMove","onMouseOut","lightStarAreaWidth","score","onClick","element","className","indexOf","clear","enableClear","realSatisfaction","valueChange","emit","token","disabled","enableSatisfaction","offsetX","Component","args","selector","template","HostBinding","Input","Output","HostListener","fsr","iconClass","toolTipDisabled","enableScore","EventEmitter","RateModule","NgModule","declarations","imports","CommonModule","FarrisTooltipModule","LocaleModule","exports"],"mappings":"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","sourcesContent":["import { Component, OnInit, HostBinding, Input, HostListener, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'farris-rate',\r\n    templateUrl: './rate.component.html',\r\n    styleUrls: ['./rate.component.css']\r\n})\r\nexport class RateComponent implements OnInit {\r\n\r\n    @HostBinding('class.farris-star-rating') fsr = true;\r\n    @Input() set value(value: any) {\r\n        this.realScore = value;\r\n    }\r\n    // ææå¤§å°\r\n    @Input() size = 'large';\r\n    // å¯ç¨åé¢ææ¨¡å¼\r\n    @Input() enableHalf = false;\r\n    // å¯ç¨åæ¬¡ç¹å»åæ¸é¤\r\n    @Input() enableClear = false;\r\n    // åªè¯»\r\n    @Input() disabled = false;\r\n    // åå¶\r\n    @Input() pointSystem = 5;\r\n    // ææäº®è²\r\n    @Input() lightColor: string;\r\n    // æææè²ï¼åºè²ï¼\r\n    @Input() darkColor: string;\r\n    // å¾æ¡æ ·å¼\r\n    @Input() iconClass = 'f-icon-star';\r\n\r\n    // ç¦ç¨åä¸ªææçæå­æç¤º\r\n    @Input() toolTipDisabled = true;\r\n    // é»è®¤çæ»¡æåº¦ææ¡\r\n    @Input() toolTipContents = ['å¾ä¸æ»¡æ', 'ä¸æ»¡æ', 'ä¸è¬', 'æ»¡æ', 'éå¸¸æ»¡æ'];\r\n    // å¯ç¨è¯å\r\n    @Input() enableScore = true;\r\n    // å¯ç¨æ»¡æåº¦\r\n    @Input() enableSatisfaction = false;\r\n    @Output() valueChange = new EventEmitter();\r\n    pointInfo: string;\r\n    // ä¸é¢æå®½åº¦\r\n    oneStarWidth: number;\r\n    // äº®è²åºåèæå®½åº¦\r\n    lightStarAreaWidth: number;\r\n    // çé¢ä¸­äº®è²åºåçå®å®½åº¦\r\n    realWidth = 0;\r\n    // èæåæ°\r\n    score: any = 0;\r\n    // æç»åæ°\r\n    realScore = 0;\r\n    // æ¯ç\r\n    rate = 1;\r\n    // åæ¢çæ»¡æåº¦\r\n    satisfaction: any;\r\n    // æç»æ¾ç¤ºçæ»¡æåº¦\r\n    realSatisfaction: any;\r\n    // éç½®\r\n    config = [];\r\n    // ææä¹é´çé´è·,è®¾è®¡ç¨¿æ¯4\r\n    distance = 4;\r\n    constructor() { }\r\n\r\n    ngOnInit() {\r\n        let starId: any;\r\n        switch (this.size) {\r\n            case 'small':\r\n                this.oneStarWidth = 14;\r\n                break;\r\n            case 'middle':\r\n                this.oneStarWidth = 16;\r\n                break;\r\n            case 'large':\r\n                this.oneStarWidth = 18;\r\n                break;\r\n        }\r\n        this.config = [\r\n            {\r\n                id: 1\r\n            },\r\n            {\r\n                id: 2\r\n            },\r\n            {\r\n                id: 3\r\n            },\r\n            {\r\n                id: 4\r\n            },\r\n            {\r\n                id: 5\r\n            }\r\n        ];\r\n        if (this.config.length) {\r\n            this.rate = this.pointSystem / this.config.length;\r\n        }\r\n        if (this.realScore) {\r\n            if (this.enableHalf) {\r\n                starId = Math.ceil(this.realScore / this.rate);\r\n            } else {\r\n                starId = this.realScore;\r\n            }\r\n            this.realWidth = (this.oneStarWidth * this.realScore + Math.floor(this.realScore) * this.distance) / this.rate;\r\n            this.satisfaction = this.toolTipContents[starId - 1]\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseover', ['$event'])\r\n    onMouseOver(event: any) {\r\n        if (!this.isTargetElement(event.target)) {\r\n            return;\r\n        }\r\n        const id = parseInt(event.target.id);\r\n        this.operateStar(event, id, false);\r\n    }\r\n\r\n    @HostListener('mousemove', ['$event'])\r\n    onMouseMove(event: any) {\r\n        if (!this.isTargetElement(event.target)) {\r\n            return;\r\n        }\r\n        const id = parseInt(event.target.id);\r\n        this.operateStar(event, id, false);\r\n    }\r\n\r\n    @HostListener('mouseout', ['$event'])\r\n    onMouseOut(event: any) {\r\n        if (!this.isTargetElement(event.target)) {\r\n            return;\r\n        }\r\n        this.lightStarAreaWidth = 0;\r\n        this.score = 0;\r\n        this.satisfaction = null;\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    onClick(event: any) {\r\n        if (!this.isTargetElement(event.target)) {\r\n            return;\r\n        }\r\n        const id = parseInt(event.target.id);\r\n        this.operateStar(event, id, true);\r\n    }\r\n\r\n    /**\r\n     * æ¯å¦æ¯ç®æ åç´ \r\n     * @param element \r\n     */\r\n    private isTargetElement(element: any) {\r\n        if (element.className.indexOf('f-icon') !== -1) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *  åæ¬¡ç¹å»åæ¶éä¸­\r\n     */\r\n    private clear() {\r\n        if (this.lightStarAreaWidth === this.realWidth && this.enableClear && this.realWidth !== 0) {\r\n            this.realWidth = 0;\r\n            this.realScore = 0;\r\n            this.realSatisfaction = null;\r\n            this.valueChange.emit(this.realScore);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * \r\n     * @param event äºä»¶\r\n     * @param id å½åææçid\r\n     * @param token æ¯å¦ç¹å»äºä»¶è§¦å\r\n     */\r\n    private operateStar(event: any, id: any, token: boolean) {\r\n        // ç¦ç¨\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n        // æ»¡æåº¦ææ¡\r\n        if (this.enableSatisfaction) {\r\n            this.satisfaction = this.toolTipContents[id - 1];\r\n        }\r\n        // å¦ææ»å¨çè·ç¦»å°äºä¸é¢ææä¸åçè·ç¦»ï¼æèè¶è¿ï¼\r\n        if (event.offsetX < this.oneStarWidth / 2 && this.enableHalf === true) {\r\n            this.lightStarAreaWidth = (this.oneStarWidth * id) - this.oneStarWidth / 2 + this.distance * (id - 1);\r\n            this.score = (this.rate * id) - this.rate / 2;\r\n            if (token === true) {\r\n                if (this.clear()) {\r\n                    return;\r\n                }\r\n                this.realScore = this.score;\r\n                this.valueChange.emit(this.realScore);\r\n                this.realWidth = this.lightStarAreaWidth;\r\n                this.realSatisfaction = this.satisfaction;\r\n            }\r\n        } else {\r\n            this.lightStarAreaWidth = this.oneStarWidth * id + this.distance * (id - 1);\r\n            this.score = this.rate * id;\r\n            if (token === true) {\r\n                if (this.clear()) {\r\n                    return;\r\n                }\r\n                this.realScore = this.score;\r\n                this.valueChange.emit(this.realScore);\r\n                this.realWidth = this.lightStarAreaWidth;\r\n                this.realSatisfaction = this.satisfaction;\r\n            }\r\n        }\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FarrisTooltipModule } from '@farris/ui-tooltip';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\nimport { RateComponent } from './rate.component';\r\n\r\n@NgModule({\r\n  declarations: [RateComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FarrisTooltipModule,\r\n    LocaleModule\r\n  ],\r\n  exports: [RateComponent]\r\n})\r\nexport class RateModule { }\r\n"]}