/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, ContentChildren, QueryList, ComponentFactoryResolver, ViewContainerRef, Injector, Renderer2, ElementRef, ViewChild } from '@angular/core';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterBarComponent } from './splitter-bar.component';
export class SplitterComponent {
    /**
     * @param {?} componentFactoryResolver
     * @param {?} injector
     * @param {?} renderer
     * @param {?} elementRef
     */
    constructor(componentFactoryResolver, injector, renderer, elementRef) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.splitterCls = true;
        // @HostBinding('class.d-flex') flexCls = true;
        this.orientation = "horizontal";
        this.barComponentRefArray = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        //使用的是ngResizable，没有使用Bar，此处方法可不执行
        this.hostEl = this.elementRef.nativeElement;
        //  this.initPane();
    }
    /**
     * @return {?}
     */
    initPane() {
        if (this.pane && this.pane['_results'] && this.pane['_results'].length) {
            /** @type {?} */
            let hostWidth = this.hostEl.offsetWidth;
            /** @type {?} */
            const length = this.pane['_results'].length;
            /** @type {?} */
            const restPane = this.pane['_results'].filter((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                return !item._size;
            }));
            /** @type {?} */
            const restLength = restPane.length;
            this.pane['_results'].forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            (item, index) => {
                item.order = index * 2;
                if (!!item._size) {
                    hostWidth = hostWidth - this.getElementSize(hostWidth, item._size);
                }
            }));
            restPane.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.size = hostWidth / restLength;
            }));
            if (length > 1) {
                this.createBar(length - 1);
            }
            this.listenPaneSizeChange();
        }
    }
    /**
     * @return {?}
     */
    listenPaneSizeChange() {
        /** @type {?} */
        const hostWidth = this.hostEl.offsetWidth;
        this.pane['_results'].forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        (item, index) => {
            item.sizeChange.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            size => {
                /** @type {?} */
                const nextIndex = index + 1;
                /** @type {?} */
                const diff = item.el.offsetWidth - size;
                if (this.pane['_results'][nextIndex]) {
                    /** @type {?} */
                    const nextPaneMin = this.getElementSize(hostWidth, this.pane['_results'][nextIndex].min);
                    if (this.barComponentRefArray[nextIndex]) {
                        // 拖拽向左的最大宽度
                        if (nextPaneMin >= item.el.offsetWidth || nextPaneMin <= 0) {
                            this.barComponentRefArray[nextIndex].instance.leftMovedMax = this.pane['_results'][nextIndex].el.offsetWidth + diff;
                        }
                        else {
                            this.barComponentRefArray[nextIndex].instance.leftMovedMax = this.pane['_results'][nextIndex].el.offsetWidth + diff - nextPaneMin;
                        }
                    }
                }
            }));
        }));
    }
    // 获取目标元素的size
    /**
     * @param {?} hostWidth
     * @param {?} size
     * @return {?}
     */
    getElementSize(hostWidth, size) {
        /** @type {?} */
        let targetSize;
        if (!size) {
            targetSize = 0;
            return targetSize;
        }
        if (size.indexOf('px') !== -1 || typeof size === 'number') {
            targetSize = parseInt(size);
        }
        else if (size.indexOf('%') !== -1) {
            targetSize = hostWidth * parseInt(size) / 100;
        }
        return targetSize;
    }
    /**
     * @param {?} len
     * @return {?}
     */
    createBar(len) {
        /** @type {?} */
        let size;
        /** @type {?} */
        const hostWidth = this.hostEl.offsetWidth;
        for (let i = 0; i < len; i++) {
            /** @type {?} */
            const factory = this.componentFactoryResolver.resolveComponentFactory(SplitterBarComponent);
            /** @type {?} */
            const componentRef = this.container.createComponent(factory);
            /** @type {?} */
            const prevPane = this.pane['_results'][i];
            /** @type {?} */
            const prevPaneOriginWidth = prevPane.el.offsetWidth;
            /** @type {?} */
            const nextPane = this.pane['_results'][i + 1];
            /** @type {?} */
            const nextPaneOriginWidth = nextPane.el.offsetWidth;
            /** @type {?} */
            const prePaneMax = this.getElementSize(hostWidth, this.pane['_results'][i].max);
            /** @type {?} */
            const prePaneMin = this.getElementSize(hostWidth, this.pane['_results'][i].min);
            // 拖拽向右的最大宽度
            if (prePaneMax <= prevPaneOriginWidth && prePaneMax > 0) {
                componentRef.instance.rightMovedMax = 0;
            }
            else if (prePaneMax >= prevPaneOriginWidth + nextPaneOriginWidth || prePaneMax === 0) {
                componentRef.instance.rightMovedMax = nextPaneOriginWidth;
            }
            else {
                componentRef.instance.rightMovedMax = prePaneMax - prevPaneOriginWidth;
            }
            // 拖拽向左的最大宽度
            if (prePaneMin >= prevPaneOriginWidth || prePaneMin <= 0) {
                componentRef.instance.leftMovedMax = prevPaneOriginWidth;
            }
            else {
                componentRef.instance.leftMovedMax = prevPaneOriginWidth - prePaneMin;
            }
            // 横向拖拽还是纵向拖拽
            if (this.orientation === 'horizontal') {
                componentRef.instance.lockAxis = 'y';
            }
            else if (this.orientation === 'vertical') {
                componentRef.instance.lockAxis = 'x';
            }
            componentRef.instance.order = 2 * i + 1;
            // 拖拽变化
            componentRef.instance.endOffset.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            data => {
                prevPane.size = prevPane.el.offsetWidth + data.x;
                nextPane.size = nextPane.el.offsetWidth - data.x;
                // console.log(prevPanelOriginWidth + data.x, nextPanelOriginWidth - data.x)
            }));
            this.barComponentRefArray.push(componentRef);
            componentRef.changeDetectorRef.detectChanges();
        }
    }
}
SplitterComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-splitter',
                template: `
    <ng-content></ng-content>
    <ng-container #container></ng-container>
  `
            }] }
];
/** @nocollapse */
SplitterComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef }
];
SplitterComponent.propDecorators = {
    splitterCls: [{ type: HostBinding, args: ['class.f-component-splitter',] }],
    orientation: [{ type: Input }],
    container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
    pane: [{ type: ContentChildren, args: [SplitterPaneComponent,] }]
};
if (false) {
    /** @type {?} */
    SplitterComponent.prototype.splitterCls;
    /** @type {?} */
    SplitterComponent.prototype.orientation;
    /** @type {?} */
    SplitterComponent.prototype.hostEl;
    /** @type {?} */
    SplitterComponent.prototype.container;
    /** @type {?} */
    SplitterComponent.prototype.pane;
    /** @type {?} */
    SplitterComponent.prototype.barComponentRefArray;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,