/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Renderer2, ElementRef, HostListener, Output, EventEmitter } from '@angular/core';
import { fromEvent, BehaviorSubject } from 'rxjs';
import { Position } from './helper/position';
import { HelperBlock } from './helper/helper-block';
var SplitterBarComponent = /** @class */ (function () {
    function SplitterBarComponent(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        // 这个组件没有被使用过，目前实现拖拽都是用ngResizable
        this.klass = true;
        this.position = { x: 0, y: 0 };
        this.trackPosition = true;
        this.gridSize = 1;
        this.lockAxis = null;
        this.scale = 1;
        this.started = new EventEmitter();
        this.stopped = new EventEmitter();
        this.edge = new EventEmitter();
        this.endOffset = new EventEmitter();
        this.movingOffset = new EventEmitter();
        this.orderState = new BehaviorSubject({});
        this.allowDrag = true;
        this.preventDefaultEvent = true;
        // 鼠标初始位置
        this.orignal = null;
        this.draggingSub = null;
        this.moving = false;
        this._helperBlock = null;
        this.needTransform = false;
        this.oldTrans = new Position(0, 0);
        this.tempTrans = new Position(0, 0);
        this.currTrans = new Position(0, 0);
        this.movedTrans = new Position(0, 0);
        this._helperBlock = new HelperBlock(elementRef.nativeElement, renderer);
    }
    Object.defineProperty(SplitterBarComponent.prototype, "order", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._order = value;
            this.orderState.next(value);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SplitterBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.el = this.elementRef.nativeElement;
    };
    /**
     * @return {?}
     */
    SplitterBarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.orderState.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data !== undefined && _this.renderer) {
                _this.renderer.setStyle(_this.el, 'order', data);
            }
        }));
        // console.log("bar" + this.el.getBoundingClientRect().left, this.el.getBoundingClientRect().top)
    };
    /**
     * @return {?}
     */
    SplitterBarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.orignal = null;
        this.oldTrans = null;
        this.tempTrans = null;
        this.currTrans = null;
        this.movedTrans = null;
        this._helperBlock.dispose();
        this._helperBlock = null;
        if (this.draggingSub) {
            this.draggingSub.unsubscribe();
        }
    };
    /**
     * @private
     * @param {?} p
     * @return {?}
     */
    SplitterBarComponent.prototype.moveTo = /**
     * @private
     * @param {?} p
     * @return {?}
     */
    function (p) {
        if (this.orignal) {
            p.subtract(this.orignal);
            this.tempTrans.set(p);
            this.tempTrans.divide(this.scale);
            this.transform();
            this.movingOffset.emit(this.currTrans.value);
        }
    };
    /**
     * @private
     * @return {?}
     */
    SplitterBarComponent.prototype.transform = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var translateX = this.tempTrans.x + this.oldTrans.x;
        /** @type {?} */
        var translateY = this.tempTrans.y + this.oldTrans.y;
        if (this.lockAxis === 'x') {
            translateX = this.oldTrans.x;
            this.tempTrans.x = 0;
        }
        else if (this.lockAxis === 'y') {
            translateY = this.oldTrans.y;
            this.tempTrans.y = 0;
            // console.log(this.movedTrans.x + this.tempTrans.x, this.movedTrans.x, this.tempTrans.x, this.rightMovedMax, this.leftMovedMax);
            if (this.movedTrans.x + this.tempTrans.x > this.rightMovedMax && this.movedTrans.x + this.tempTrans.x > 0) {
                return;
            }
            if (this.movedTrans.x + this.tempTrans.x <= 0 && Math.abs(this.movedTrans.x + this.tempTrans.x) > this.leftMovedMax) {
                return;
            }
        }
        // Snap to grid: by grid size
        if (this.gridSize > 1) {
            translateX = Math.round(translateX / this.gridSize) * this.gridSize;
            translateY = Math.round(translateY / this.gridSize) * this.gridSize;
        }
        /** @type {?} */
        var value = "translate(" + Math.round(translateX) + "px, " + Math.round(translateY) + "px)";
        this.renderer.setStyle(this.el, 'transform', value);
        this.renderer.setStyle(this.el, '-webkit-transform', value);
        this.renderer.setStyle(this.el, '-ms-transform', value);
        this.renderer.setStyle(this.el, '-moz-transform', value);
        this.renderer.setStyle(this.el, '-o-transform', value);
        // save current position
        this.currTrans.x = translateX;
        this.currTrans.y = translateY;
    };
    /**
     * @private
     * @return {?}
     */
    SplitterBarComponent.prototype.putBack = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._zIndex) {
            this.renderer.setStyle(this.el, 'z-index', this._zIndex);
        }
        else if (this.zIndexMoving) {
            if (this.oldZIndex) {
                this.renderer.setStyle(this.el, 'z-index', this.oldZIndex);
            }
            else {
                this.el.style.removeProperty('z-index');
            }
        }
        if (this.moving) {
            this.stopped.emit(this.el);
            // Remove the helper div:
            this._helperBlock.remove();
            if (this.needTransform) {
                if (Position.isIPosition(this.position)) {
                    this.oldTrans.set(this.position);
                }
                else {
                    this.oldTrans.reset();
                }
                this.transform();
                this.needTransform = false;
            }
            this.moving = false;
            this.endOffset.emit(this.currTrans.value);
            this.renderer.removeStyle(this.el, 'transform');
            if (this.trackPosition) {
                this.oldTrans.add(this.tempTrans);
                this.movedTrans.add(this.tempTrans);
            }
            this.tempTrans.reset();
            if (!this.trackPosition) {
                this.transform();
            }
            if (this.movedTrans.x + this.tempTrans.x >= this.rightMovedMax && this.movedTrans.x + this.tempTrans.x >= 0) {
                this.movedTrans.x = this.rightMovedMax;
            }
            if (this.movedTrans.x + this.tempTrans.x <= 0 && Math.abs(this.movedTrans.x + this.tempTrans.x) >= this.leftMovedMax) {
                this.movedTrans.x = -this.leftMovedMax;
            }
            /** @type {?} */
            var element = this.el;
            this.renderer.removeClass(element, 'ng-dragging');
            /**
             * Fix performance issue:
             * https://github.com/xieziyu/angular2-draggable/issues/112
             */
            this.unsubscribeEvents();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SplitterBarComponent.prototype.pickUp = /**
     * @private
     * @return {?}
     */
    function () {
        // get old z-index:
        this.oldZIndex = this.el.style.zIndex ? this.el.style.zIndex : '';
        if (window) {
            this.oldZIndex = window.getComputedStyle(this.el, null).getPropertyValue('z-index');
        }
        if (this.zIndexMoving) {
            this.renderer.setStyle(this.el, 'z-index', this.zIndexMoving);
        }
        if (!this.moving) {
            this.started.emit(this.el);
            this.moving = true;
            /** @type {?} */
            var element = this.el;
            this.renderer.addClass(element, 'ng-dragging');
            /**
             * Fix performance issue:
             * https://github.com/xieziyu/angular2-draggable/issues/112
             */
            this.subscribeEvents();
        }
    };
    /**
     * @private
     * @return {?}
     */
    SplitterBarComponent.prototype.subscribeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.draggingSub = fromEvent(document, 'mousemove', { passive: false }).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onMouseMove((/** @type {?} */ (event))); }));
        this.draggingSub.add(fromEvent(document, 'touchmove', { passive: false }).subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this.onMouseMove((/** @type {?} */ (event))); })));
        this.draggingSub.add(fromEvent(document, 'mouseup', { passive: false }).subscribe((/**
         * @return {?}
         */
        function () { return _this.putBack(); })));
        // checking if browser is IE or Edge - https://github.com/xieziyu/angular2-draggable/issues/153
        /** @type {?} */
        var isIEOrEdge = /msie\s|trident\//i.test(window.navigator.userAgent);
        if (!isIEOrEdge) {
            this.draggingSub.add(fromEvent(document, 'mouseleave', { passive: false }).subscribe((/**
             * @return {?}
             */
            function () { return _this.putBack(); })));
        }
        this.draggingSub.add(fromEvent(document, 'touchend', { passive: false }).subscribe((/**
         * @return {?}
         */
        function () { return _this.putBack(); })));
        this.draggingSub.add(fromEvent(document, 'touchcancel', { passive: false }).subscribe((/**
         * @return {?}
         */
        function () { return _this.putBack(); })));
    };
    /**
     * @private
     * @return {?}
     */
    SplitterBarComponent.prototype.unsubscribeEvents = /**
     * @private
     * @return {?}
     */
    function () {
        this.draggingSub.unsubscribe();
        this.draggingSub = null;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SplitterBarComponent.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // 1. skip right click;
        if (event instanceof MouseEvent && event.button === 2) {
            return;
        }
        // 2. if handle is set, the element can only be moved by handle
        /** @type {?} */
        var target = event.target || event.srcElement;
        // 3. if allow drag is set to false, ignore the mousedown
        if (this.allowDrag === false) {
            return;
        }
        if (this.preventDefaultEvent) {
            event.stopPropagation();
            event.preventDefault();
        }
        this.orignal = Position.fromEvent(event, this.el);
        this.currTrans.reset();
        this.oldTrans.reset();
        this.pickUp();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SplitterBarComponent.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.moving && this.allowDrag) {
            if (this.preventDefaultEvent) {
                event.stopPropagation();
                event.preventDefault();
            }
            // Add a transparent helper div:
            this._helperBlock.add();
            this.moveTo(Position.fromEvent(event, this.el));
        }
    };
    SplitterBarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-splitter-bar',
                    template: "\n    ss\n  ",
                    host: {
                        'ngDraggable': 'true'
                    },
                    styles: ["\n        :host{\n            width: 8px;\n            background: #ebebeb;\n            cursor: move;\n        }\n    "]
                }] }
    ];
    /** @nocollapse */
    SplitterBarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SplitterBarComponent.propDecorators = {
        klass: [{ type: HostBinding, args: ['class.f-component-splitter-bar',] }],
        zIndexMoving: [{ type: Input }],
        position: [{ type: Input }],
        trackPosition: [{ type: Input }],
        gridSize: [{ type: Input }],
        lockAxis: [{ type: Input }],
        scale: [{ type: Input }],
        started: [{ type: Output }],
        stopped: [{ type: Output }],
        edge: [{ type: Output }],
        endOffset: [{ type: Output }],
        movingOffset: [{ type: Output }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }, { type: HostListener, args: ['touchstart', ['$event'],] }]
    };
    return SplitterBarComponent;
}());
export { SplitterBarComponent };
if (false) {
    /** @type {?} */
    SplitterBarComponent.prototype.klass;
    /** @type {?} */
    SplitterBarComponent.prototype.zIndexMoving;
    /** @type {?} */
    SplitterBarComponent.prototype.position;
    /** @type {?} */
    SplitterBarComponent.prototype.trackPosition;
    /** @type {?} */
    SplitterBarComponent.prototype.gridSize;
    /** @type {?} */
    SplitterBarComponent.prototype.lockAxis;
    /** @type {?} */
    SplitterBarComponent.prototype.scale;
    /** @type {?} */
    SplitterBarComponent.prototype.started;
    /** @type {?} */
    SplitterBarComponent.prototype.stopped;
    /** @type {?} */
    SplitterBarComponent.prototype.edge;
    /** @type {?} */
    SplitterBarComponent.prototype.endOffset;
    /** @type {?} */
    SplitterBarComponent.prototype.movingOffset;
    /** @type {?} */
    SplitterBarComponent.prototype._order;
    /** @type {?} */
    SplitterBarComponent.prototype.orderState;
    /** @type {?} */
    SplitterBarComponent.prototype.el;
    /** @type {?} */
    SplitterBarComponent.prototype.allowDrag;
    /** @type {?} */
    SplitterBarComponent.prototype.preventDefaultEvent;
    /** @type {?} */
    SplitterBarComponent.prototype.oldZIndex;
    /** @type {?} */
    SplitterBarComponent.prototype.rightMovedMax;
    /** @type {?} */
    SplitterBarComponent.prototype.leftMovedMax;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.orignal;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.draggingSub;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.moving;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype._zIndex;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype._helperBlock;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.needTransform;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.oldTrans;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.tempTrans;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.currTrans;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.movedTrans;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SplitterBarComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,