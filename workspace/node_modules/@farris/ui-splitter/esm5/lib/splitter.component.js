/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, HostBinding, Input, ContentChildren, QueryList, ComponentFactoryResolver, ViewContainerRef, Injector, Renderer2, ElementRef, ViewChild } from '@angular/core';
import { SplitterPaneComponent } from './splitter-pane.component';
import { SplitterBarComponent } from './splitter-bar.component';
var SplitterComponent = /** @class */ (function () {
    function SplitterComponent(componentFactoryResolver, injector, renderer, elementRef) {
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.renderer = renderer;
        this.elementRef = elementRef;
        this.splitterCls = true;
        // @HostBinding('class.d-flex') flexCls = true;
        this.orientation = "horizontal";
        this.barComponentRefArray = [];
    }
    /**
     * @return {?}
     */
    SplitterComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SplitterComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SplitterComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        //使用的是ngResizable，没有使用Bar，此处方法可不执行
        this.hostEl = this.elementRef.nativeElement;
        //  this.initPane();
    };
    /**
     * @return {?}
     */
    SplitterComponent.prototype.initPane = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.pane && this.pane['_results'] && this.pane['_results'].length) {
            /** @type {?} */
            var hostWidth_1 = this.hostEl.offsetWidth;
            /** @type {?} */
            var length_1 = this.pane['_results'].length;
            /** @type {?} */
            var restPane = this.pane['_results'].filter((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return !item._size;
            }));
            /** @type {?} */
            var restLength_1 = restPane.length;
            this.pane['_results'].forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                item.order = index * 2;
                if (!!item._size) {
                    hostWidth_1 = hostWidth_1 - _this.getElementSize(hostWidth_1, item._size);
                }
            }));
            restPane.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                item.size = hostWidth_1 / restLength_1;
            }));
            if (length_1 > 1) {
                this.createBar(length_1 - 1);
            }
            this.listenPaneSizeChange();
        }
    };
    /**
     * @return {?}
     */
    SplitterComponent.prototype.listenPaneSizeChange = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var hostWidth = this.hostEl.offsetWidth;
        this.pane['_results'].forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            item.sizeChange.subscribe((/**
             * @param {?} size
             * @return {?}
             */
            function (size) {
                /** @type {?} */
                var nextIndex = index + 1;
                /** @type {?} */
                var diff = item.el.offsetWidth - size;
                if (_this.pane['_results'][nextIndex]) {
                    /** @type {?} */
                    var nextPaneMin = _this.getElementSize(hostWidth, _this.pane['_results'][nextIndex].min);
                    if (_this.barComponentRefArray[nextIndex]) {
                        // 拖拽向左的最大宽度
                        if (nextPaneMin >= item.el.offsetWidth || nextPaneMin <= 0) {
                            _this.barComponentRefArray[nextIndex].instance.leftMovedMax = _this.pane['_results'][nextIndex].el.offsetWidth + diff;
                        }
                        else {
                            _this.barComponentRefArray[nextIndex].instance.leftMovedMax = _this.pane['_results'][nextIndex].el.offsetWidth + diff - nextPaneMin;
                        }
                    }
                }
            }));
        }));
    };
    // 获取目标元素的size
    // 获取目标元素的size
    /**
     * @param {?} hostWidth
     * @param {?} size
     * @return {?}
     */
    SplitterComponent.prototype.getElementSize = 
    // 获取目标元素的size
    /**
     * @param {?} hostWidth
     * @param {?} size
     * @return {?}
     */
    function (hostWidth, size) {
        /** @type {?} */
        var targetSize;
        if (!size) {
            targetSize = 0;
            return targetSize;
        }
        if (size.indexOf('px') !== -1 || typeof size === 'number') {
            targetSize = parseInt(size);
        }
        else if (size.indexOf('%') !== -1) {
            targetSize = hostWidth * parseInt(size) / 100;
        }
        return targetSize;
    };
    /**
     * @param {?} len
     * @return {?}
     */
    SplitterComponent.prototype.createBar = /**
     * @param {?} len
     * @return {?}
     */
    function (len) {
        /** @type {?} */
        var size;
        /** @type {?} */
        var hostWidth = this.hostEl.offsetWidth;
        var _loop_1 = function (i) {
            /** @type {?} */
            var factory = this_1.componentFactoryResolver.resolveComponentFactory(SplitterBarComponent);
            /** @type {?} */
            var componentRef = this_1.container.createComponent(factory);
            /** @type {?} */
            var prevPane = this_1.pane['_results'][i];
            /** @type {?} */
            var prevPaneOriginWidth = prevPane.el.offsetWidth;
            /** @type {?} */
            var nextPane = this_1.pane['_results'][i + 1];
            /** @type {?} */
            var nextPaneOriginWidth = nextPane.el.offsetWidth;
            /** @type {?} */
            var prePaneMax = this_1.getElementSize(hostWidth, this_1.pane['_results'][i].max);
            /** @type {?} */
            var prePaneMin = this_1.getElementSize(hostWidth, this_1.pane['_results'][i].min);
            // 拖拽向右的最大宽度
            if (prePaneMax <= prevPaneOriginWidth && prePaneMax > 0) {
                componentRef.instance.rightMovedMax = 0;
            }
            else if (prePaneMax >= prevPaneOriginWidth + nextPaneOriginWidth || prePaneMax === 0) {
                componentRef.instance.rightMovedMax = nextPaneOriginWidth;
            }
            else {
                componentRef.instance.rightMovedMax = prePaneMax - prevPaneOriginWidth;
            }
            // 拖拽向左的最大宽度
            if (prePaneMin >= prevPaneOriginWidth || prePaneMin <= 0) {
                componentRef.instance.leftMovedMax = prevPaneOriginWidth;
            }
            else {
                componentRef.instance.leftMovedMax = prevPaneOriginWidth - prePaneMin;
            }
            // 横向拖拽还是纵向拖拽
            if (this_1.orientation === 'horizontal') {
                componentRef.instance.lockAxis = 'y';
            }
            else if (this_1.orientation === 'vertical') {
                componentRef.instance.lockAxis = 'x';
            }
            componentRef.instance.order = 2 * i + 1;
            // 拖拽变化
            componentRef.instance.endOffset.subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                prevPane.size = prevPane.el.offsetWidth + data.x;
                nextPane.size = nextPane.el.offsetWidth - data.x;
                // console.log(prevPanelOriginWidth + data.x, nextPanelOriginWidth - data.x)
            }));
            this_1.barComponentRefArray.push(componentRef);
            componentRef.changeDetectorRef.detectChanges();
        };
        var this_1 = this;
        for (var i = 0; i < len; i++) {
            _loop_1(i);
        }
    };
    SplitterComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-splitter',
                    template: "\n    <ng-content></ng-content>\n    <ng-container #container></ng-container>\n  "
                }] }
    ];
    /** @nocollapse */
    SplitterComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef }
    ]; };
    SplitterComponent.propDecorators = {
        splitterCls: [{ type: HostBinding, args: ['class.f-component-splitter',] }],
        orientation: [{ type: Input }],
        container: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        pane: [{ type: ContentChildren, args: [SplitterPaneComponent,] }]
    };
    return SplitterComponent;
}());
export { SplitterComponent };
if (false) {
    /** @type {?} */
    SplitterComponent.prototype.splitterCls;
    /** @type {?} */
    SplitterComponent.prototype.orientation;
    /** @type {?} */
    SplitterComponent.prototype.hostEl;
    /** @type {?} */
    SplitterComponent.prototype.container;
    /** @type {?} */
    SplitterComponent.prototype.pane;
    /** @type {?} */
    SplitterComponent.prototype.barComponentRefArray;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    SplitterComponent.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,