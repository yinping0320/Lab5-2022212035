/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, HostBinding, Renderer2, ElementRef, Output, EventEmitter, HostListener } from "@angular/core";
var SplitterPaneComponent = /** @class */ (function () {
    function SplitterPaneComponent(elementRef, renderer) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.klass = true;
        this.collapsible = false;
        this.sizeChange = new EventEmitter();
        //orderState = new BehaviorSubject<any>({});
        // 记录収折前宽度，方便后续恢复
        this._beforeCollapseDistance = -1;
        this._enableCollapse = false;
        // 记录真实的iframe父容器
        this._relatedContainer = null;
        // 标记iframe父容器的样式属性position的值
        this._relatedContainerPosition = "";
        // 记录iframe在拖拽时的遮罩层
        this._relatedIframeOverlay = null;
        // 标记iframe遮罩层是否已显示
        this._iframeOverlayShownFlag = false;
        // 拖拽到某个值时，自动收起的阈值。如果阈值设置小于0，则不处理自动收起
        this.resizeCollapseThreshold = 20;
        // pane在splitter的位置，left 左侧 right 右侧 top 顶部 bottom 底部
        this.pos = "right";
        // 真实的展开时的距离，
        this.defaultExpandDistance = "20%";
        this.realExpandDisatance = "";
        // 展开时的距离，不设置时为空，设置了按照设置的值来
        this._expandDistance = "";
        // 初始收起状态
        this.initCollapse = false;
        /**
         * 收起折叠状态变化
         */
        this.collapseStateChange = new EventEmitter();
        // collapse的动画样式名
        this.animateCls = "splitter-pane-collapse-animate";
        // 标记是否需要更新变量
        this.updateParamsFlag = false;
        // 标记拖拽时上次的大小
        this.resizeDistance = -1;
        // 兼容旧表单写法
        if (this.elementRef) {
            this.el = this.elementRef.nativeElement;
        }
    }
    Object.defineProperty(SplitterPaneComponent.prototype, "size", {
        /**
         * 2022年6月8日 ximena
         * size、max、min、collapsible、sizeChange、order、orderState这些属性没有被实际使用
         * 该组件常用的属性来自于 ngResizable 拖拽组件
         */
        set: /**
         * 2022年6月8日 ximena
         * size、max、min、collapsible、sizeChange、order、orderState这些属性没有被实际使用
         * 该组件常用的属性来自于 ngResizable 拖拽组件
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._size = value;
            this.sizeChange.emit(value);
            // this._sizeState.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "order", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._order = value;
            //this.orderState.next(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "enableCollapse", {
        get: /**
         * @return {?}
         */
        function () {
            return this._enableCollapse;
        },
        // 启用収折
        set: 
        // 启用収折
        /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value !== undefined && value !== null) {
                this._enableCollapse = value;
                // 变化属性时
                if (this._enableCollapse && this.initCollapse) {
                    this.toggleInitCollapseState();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "relatedIframeParent", {
        get: /**
         * @return {?}
         */
        function () {
            return this._relatedContainer;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._relatedIframeParent = value;
            this.getRelatedIframeParent(value);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "collapsePosition", {
        get: /**
         * @return {?}
         */
        function () {
            return this.pos;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.enableCollapse && value) {
                // 规范position
                /** @type {?} */
                var positionCorrect = ["left", "right", "top", "bottom"].findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item == value; }));
                if (positionCorrect < -1) {
                    value = "right";
                }
                if (this.pos != value) {
                    this.el &&
                        this.renderer.removeClass(this.el, "splitter-pane-collapse-on-" + this.pos);
                    this.pos = value;
                    this.el &&
                        this.renderer.addClass(this.el, "splitter-pane-collapse-on-" + value);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "expandDistance", {
        get: /**
         * @return {?}
         */
        function () {
            return this._expandDistance;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._expandDistance = this.resolveSize(value + "");
            }
            else {
                this._expandDistance = "";
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SplitterPaneComponent.prototype, "collapsed", {
        get: /**
         * @return {?}
         */
        function () {
            return this.initCollapse;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.enableCollapse && value !== undefined && value !== null) {
                if (this.initCollapse !== value) {
                    this.initCollapse = value;
                    this.toggleInitCollapseState();
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     *  拖拽的变化中事件
     *  如果超过阈值，不处理
     *  暂未处理拖拽最大、最小值的问题
     */
    /**
     *  拖拽的变化中事件
     *  如果超过阈值，不处理
     *  暂未处理拖拽最大、最小值的问题
     * @param {?} pos
     * @return {?}
     */
    SplitterPaneComponent.prototype.onRZResizing = /**
     *  拖拽的变化中事件
     *  如果超过阈值，不处理
     *  暂未处理拖拽最大、最小值的问题
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        if (this.enableCollapse && pos && pos["size"]) {
            /** @type {?} */
            var changeProp = this.getStyleProp();
            /** @type {?} */
            var resizeDirection = "";
            if (this.resizeDistance >= 0) {
                // 开始记录后
                // 此次值比上次记录大，说明在expand
                resizeDirection =
                    pos["size"][changeProp] > this.resizeDistance
                        ? "expand"
                        : "collapse";
            }
            this.resizeDistance = pos["size"][changeProp];
            if (resizeDirection == "expand" && this.initCollapse) {
                this.initCollapse = false;
            }
            if (pos["size"][changeProp] > this.resizeCollapseThreshold ||
                !resizeDirection) {
                // 拖拽速度快的时候，会漏掉计算的时机
                return;
            }
            if (this.resizeCollapseThreshold > 0) {
                // 设置了自动収折阈值
                if (!this.initCollapse && resizeDirection == "collapse") {
                    // 处理拖拽収折过程中，自动收起；不处理展开过程中的，自动展开
                    if (pos["actions"] &&
                        pos["actions"].hasOwnProperty("stopResize")) {
                        pos["actions"]["stopResize"]();
                    }
                    this.toggleCollapseState(null);
                }
            }
            else {
                // 未设置自动収折阈值，需要单独处理 即将收起时状态、即将展开时状态
                if (resizeDirection == "collapse") {
                    if (pos["size"][changeProp] < 3 && !this.initCollapse) {
                        this.initCollapse = true;
                    }
                }
            }
        }
    };
    // 拖拽的开始的事件
    // 拖拽的开始的事件
    /**
     * @param {?} pos
     * @return {?}
     */
    SplitterPaneComponent.prototype.onRZStart = 
    // 拖拽的开始的事件
    /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        if (this.enableCollapse) {
            if (this.el.className.indexOf(this.animateCls) > -1) {
                this.renderer.removeClass(this.el, this.animateCls);
            }
        }
        // 如果有iframe遮罩并且没有显示
        if (this._relatedIframeOverlay && !this._iframeOverlayShownFlag) {
            if (["relative", "absolute"].indexOf(this._relatedContainerPosition) < 0) {
                this.renderer.setStyle(this._relatedContainer, "position", "relative");
            }
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "block");
            this._iframeOverlayShownFlag = true;
        }
        if (!this.updateParamsFlag &&
            pos["actions"] &&
            pos["actions"].hasOwnProperty("updateParams")) {
            pos["actions"]["updateParams"]({ fixedEdge: true });
            this.updateParamsFlag = true;
        }
    };
    // 拖拽的停止事件
    // 拖拽的停止事件
    /**
     * @param {?} pos
     * @return {?}
     */
    SplitterPaneComponent.prototype.onRZStop = 
    // 拖拽的停止事件
    /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizeDistance = -1;
        // 如果有iframe遮罩并且显示了
        if (this._relatedIframeOverlay && this._iframeOverlayShownFlag) {
            if (["relative", "absolute"].indexOf(this._relatedContainerPosition) < 0) {
                this.renderer.setStyle(this._relatedContainer, "position", this._relatedContainerPosition);
            }
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "none");
            this._iframeOverlayShownFlag = false;
        }
    };
    /**
     * @return {?}
     */
    SplitterPaneComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.elementRef) {
            this.compatibleEl();
        }
    };
    /**
     * @return {?}
     */
    SplitterPaneComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.el) {
            this.compatibleEl();
        }
    };
    /**
     * 兼容旧表单写法
     */
    /**
     * 兼容旧表单写法
     * @private
     * @return {?}
     */
    SplitterPaneComponent.prototype.compatibleEl = /**
     * 兼容旧表单写法
     * @private
     * @return {?}
     */
    function () {
        this.el = this.elementRef.nativeElement;
        // 设置了iframe容器，但是没有创建遮罩
        if (this._relatedIframeParent && !this._relatedIframeOverlay) {
            this.getRelatedIframeParent(this._relatedIframeParent);
        }
        this.enableCollapse &&
            this.renderer.addClass(this.el, "splitter-pane-collapse-on-" + this.collapsePosition);
    };
    /**
     * @return {?}
     */
    SplitterPaneComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () { };
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    SplitterPaneComponent.prototype.resolveSize = /*宽高类型是 string或者number 解析宽高  尺寸 */
    /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var regex = /px|%|rem|em/;
        // 说明是字符串
        return regex.test(size)
            ? "" + parseInt(size, 10) + size.match(regex)[0]
            : size + "px";
    };
    /**
     * 规范获取iframe所在的父容器
     */
    /**
     * 规范获取iframe所在的父容器
     * @private
     * @param {?} content
     * @return {?}
     */
    SplitterPaneComponent.prototype.getRelatedIframeParent = /**
     * 规范获取iframe所在的父容器
     * @private
     * @param {?} content
     * @return {?}
     */
    function (content) {
        if (!content || !this.el) {
            this._relatedContainer = null;
        }
        if (content instanceof ElementRef) {
            this._relatedContainer = content.nativeElement;
        }
        else if (typeof content == "string") {
            this._relatedContainer = this.el.parentElement.querySelector(content);
        }
        else {
            this._relatedContainer = content;
        }
        if (this._relatedContainer) {
            this._relatedContainerPosition = this._relatedContainer["style"]["position"];
            // 构造遮罩层
            this._relatedIframeOverlay = this.renderer.createElement("div");
            this._relatedIframeOverlay.className = "f-utils-absolute-all";
            this.renderer.setStyle(this._relatedIframeOverlay, "display", "none");
            this.renderer.appendChild(this._relatedContainer, this._relatedIframeOverlay);
        }
    };
    /**
     * 点击収折
     */
    /**
     * 点击収折
     * @param {?} ev
     * @return {?}
     */
    SplitterPaneComponent.prototype.toggleCollapseState = /**
     * 点击収折
     * @param {?} ev
     * @return {?}
     */
    function (ev) {
        //禁止冒泡
        ev && ev.stopPropagation();
        if (!this.el)
            return;
        if (this.initCollapse) {
            // 待展开
            this.renderer.addClass(this.el, this.animateCls);
            this.changeCollapse("expand");
        }
        else {
            // 待收起
            this.renderer.addClass(this.el, this.animateCls);
            this.changeCollapse("collapse");
        }
        this.initCollapse = !this.initCollapse;
        this.collapseStateChange.emit(this.initCollapse);
    };
    /**
     * 切换初始收起状态
     */
    /**
     * 切换初始收起状态
     * @return {?}
     */
    SplitterPaneComponent.prototype.toggleInitCollapseState = /**
     * 切换初始收起状态
     * @return {?}
     */
    function () {
        if (!this.el)
            return;
        if (this.initCollapse) {
            // 收起
            this.changeCollapse("collapse");
        }
        else {
            // 展开
            this.changeCollapse("expand");
        }
        this.collapseStateChange.emit(this.initCollapse);
    };
    /**
     * expand 为展开，collapse 为收起
     * @param collapseOrExpand
     */
    /**
     * expand 为展开，collapse 为收起
     * @private
     * @param {?} collapseOrExpand
     * @return {?}
     */
    SplitterPaneComponent.prototype.changeCollapse = /**
     * expand 为展开，collapse 为收起
     * @private
     * @param {?} collapseOrExpand
     * @return {?}
     */
    function (collapseOrExpand) {
        /** @type {?} */
        var changeProp = this.getStyleProp();
        switch (collapseOrExpand) {
            case "expand":
                // 展开
                // 如果存在手写width赋值给pane会有问题
                if (this._expandDistance) {
                    //设置了展开距离
                    this.realExpandDisatance = this._expandDistance;
                }
                else {
                    //没有设置，按照之前的记录，如果存在就按照记录的值，如果没有就按照默认的值
                    this.realExpandDisatance = this._beforeCollapseDistance
                        ? this._beforeCollapseDistance + "px"
                        : this.defaultExpandDistance;
                }
                this.renderer.setStyle(this.el, changeProp, this.realExpandDisatance);
                break;
            default:
                // 收起
                this._beforeCollapseDistance =
                    changeProp == "height"
                        ? this.el.offsetHeight
                        : this.el.offsetWidth;
                this.renderer.setStyle(this.el, changeProp, "0px");
        }
    };
    /**
     * 布局排列不一样，影响到是设置宽度还是高度
     */
    /**
     * 布局排列不一样，影响到是设置宽度还是高度
     * @private
     * @return {?}
     */
    SplitterPaneComponent.prototype.getStyleProp = /**
     * 布局排列不一样，影响到是设置宽度还是高度
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var hori = ["left", "right"].findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item == _this.collapsePosition; }));
        return hori > -1 ? "width" : "height";
    };
    SplitterPaneComponent.decorators = [
        { type: Component, args: [{
                    selector: "farris-splitter-pane",
                    template: "\n        <ng-content></ng-content>\n        <div\n            class=\"f-list-nav-toggle-sidebar\"\n            *ngIf=\"enableCollapse\"\n            [ngClass]=\"{ active: collapsed }\"\n            (click)=\"toggleCollapseState($event)\"\n        >\n            <span class=\"triangle\"></span>\n        </div>\n    "
                }] }
    ];
    /** @nocollapse */
    SplitterPaneComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SplitterPaneComponent.propDecorators = {
        klass: [{ type: HostBinding, args: ["class.f-component-splitter-pane",] }],
        size: [{ type: Input }],
        max: [{ type: Input }],
        min: [{ type: Input }],
        collapsible: [{ type: Input }],
        sizeChange: [{ type: Output }],
        enableCollapse: [{ type: Input }],
        relatedIframeParent: [{ type: Input }],
        resizeCollapseThreshold: [{ type: Input }],
        collapsePosition: [{ type: Input }],
        expandDistance: [{ type: Input }],
        collapsed: [{ type: Input }],
        collapseStateChange: [{ type: Output, args: ["collapseStateChange",] }],
        onRZResizing: [{ type: HostListener, args: ["rzResizing", ["$event"],] }],
        onRZStart: [{ type: HostListener, args: ["rzStart", ["$event"],] }],
        onRZStop: [{ type: HostListener, args: ["rzStop", ["$event"],] }]
    };
    return SplitterPaneComponent;
}());
export { SplitterPaneComponent };
if (false) {
    /** @type {?} */
    SplitterPaneComponent.prototype.klass;
    /** @type {?} */
    SplitterPaneComponent.prototype.max;
    /** @type {?} */
    SplitterPaneComponent.prototype.min;
    /** @type {?} */
    SplitterPaneComponent.prototype.collapsible;
    /** @type {?} */
    SplitterPaneComponent.prototype.sizeChange;
    /** @type {?} */
    SplitterPaneComponent.prototype._size;
    /** @type {?} */
    SplitterPaneComponent.prototype.el;
    /** @type {?} */
    SplitterPaneComponent.prototype._order;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._beforeCollapseDistance;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._enableCollapse;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._relatedIframeParent;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._relatedContainer;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._relatedContainerPosition;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._relatedIframeOverlay;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._iframeOverlayShownFlag;
    /** @type {?} */
    SplitterPaneComponent.prototype.resizeCollapseThreshold;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.pos;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.defaultExpandDistance;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.realExpandDisatance;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype._expandDistance;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.initCollapse;
    /**
     * 收起折叠状态变化
     * @type {?}
     */
    SplitterPaneComponent.prototype.collapseStateChange;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.animateCls;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.updateParamsFlag;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.resizeDistance;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.elementRef;
    /**
     * @type {?}
     * @private
     */
    SplitterPaneComponent.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,