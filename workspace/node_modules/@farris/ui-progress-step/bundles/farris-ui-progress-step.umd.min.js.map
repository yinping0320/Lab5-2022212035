{"version":3,"sources":["ng://@farris/ui-progress-step/lib/progress-step.service.ts","ng://@farris/ui-progress-step/lib/progress-step.component.ts","ng://@farris/ui-progress-step/lib/progress-step.module.ts"],"names":["ProgressStepService","Injectable","args","providedIn","ProgressStepItemTemplateDirective","Directive","selector","TemplateRef","template","this","ProgressStepExtendTemplateDirective","Object","defineProperty","ProgressStepComponent","prototype","_subStepData","value","ngOnInit","_stepData","steps","stepInit","ngOnChanges","changes","_this","stepData","forEach","item","status","stepMessages","filter","hidden","index","findIndex","id","currentId","activeIndex","listClick","step","clickable","stepClick","emit","goStep","storedIndexState","currentIndex","i","nextStep","length","prevStep","getCurrentStepIndex","data","setProgressData","progressData","setActiveIndex","num","activeNum","Component","ContentChild","read","Input","Output","direction","fill","stepsCls","EventEmitter","ProgressStepModule","NgModule","declarations","imports","CommonModule","LocaleModule","forRoot","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ProgressStepService {\r\n\r\n  constructor() { }\r\n}\r\n","import {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  Directive,\r\n  TemplateRef,\r\n  ContentChild,\r\n  EventEmitter,\r\n  OnChanges,\r\n  SimpleChanges,\r\n} from \"@angular/core\";\r\n\r\n@Directive({\r\n  selector: \"[progressStepItem]\",\r\n})\r\nexport class ProgressStepItemTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n\r\n@Directive({\r\n  selector: \"[progressStepExtend]\",\r\n})\r\nexport class ProgressStepExtendTemplateDirective {\r\n  constructor(public template: TemplateRef<any>) { }\r\n}\r\n\r\nexport interface stepMessage {\r\n  id: string;\r\n  title: string;\r\n  icon?: string;\r\n  status?: string;\r\n  clickDisable?: boolean;\r\n  hidden?: boolean;\r\n  class?: string;\r\n}\r\nexport interface progressData {\r\n  activeIndex: number;\r\n  stepMessages: stepMessage[];\r\n}\r\n\r\n@Component({\r\n  selector: \"farris-progress-step\",\r\n  templateUrl: \"./progress-step.component.html\",\r\n  styleUrls: [\"./progress-step.component.scss\"],\r\n})\r\nexport class ProgressStepComponent implements OnInit, OnChanges {\r\n  @ContentChild(ProgressStepItemTemplateDirective, { read: TemplateRef })\r\n  progressStepTemplate: TemplateRef<any>;\r\n  @ContentChild(ProgressStepExtendTemplateDirective, { read: TemplateRef })\r\n  progressStepExtendTmpl: TemplateRef<any>;\r\n\r\n  //è¿åº¦æ¡æ°æ®\r\n  // @Input() stepData:progressData;\r\n\r\n  /**æ¨ªåhorizontalãç«åæåvertical*/\r\n  @Input() direction = \"horizontal\";\r\n  /**æ¯å¦éºæ»¡ */\r\n  @Input() fill: boolean = false;\r\n  /**æ¯å¦æ¯æç¹å» */\r\n  @Input() clickable: boolean = false;\r\n  // æ­¥éª¤æ¡æ´ä½æ ·å¼\r\n  @Input() stepsCls = \"\";\r\n  @Input() fHeight: number;\r\n  // æ­¥éª¤æ¡Style,åæ³ [stepStyle]=\"{'max-width':'100px'}\"\r\n  @Input() stepStyle: any;\r\n  @Output(\"stepClick\") stepClick = new EventEmitter();\r\n\r\n  /**\r\n   * stepsä¸stepDataï¼éæ©ä¸ä¸ªä½¿ç¨\r\n   * æå®æ­¥éª¤æ¡æ°æ®ï¼æ¯æ°ç»ãå¸¸ç¨å¨åèªå®ä¹æ¨¡ççå°æ¹ã\r\n   * [{id:string,title:string,icon?string,hidden?boolean}]\r\n   */\r\n  @Input() steps: stepMessage[];\r\n  /**\r\n   * æå®å½åæ­¥éª¤çæ°æ®Id\r\n   */\r\n  @Input() currentId: string;\r\n  @Input() storedIndexState: boolean = false;\r\n\r\n  /**\r\n   * æå®å­é¡¹æ°æ®ä¸­ï¼åªä¸ªæ¯æ´»å¨ç\r\n   * {å­é¡¹æ­¥éª¤id:æå®å­é¡¹å¤äºæ´»å¨æ­¥éª¤çé¡ºåº}æ¯å¦{\"data3\":2}\r\n   */\r\n  _subStepData;\r\n  @Input()\r\n  set subStepData(value) {\r\n    this._subStepData = value;\r\n  }\r\n  get subStepData() {\r\n    return this._subStepData;\r\n  }\r\n  /**\r\n   * è¿æ»¤éèçæ­¥éª¤ä¿¡æ¯ï¼è®°å½å½åæ¾ç¤ºçæ­¥éª¤æ¡ï¼\r\n   */\r\n  stepMessages: stepMessage[];\r\n  /**\r\n   * è®°å½å½åæ­¥éª¤æå¨çä½ç½®ï¼ä»0å¼å§\r\n   */\r\n  activeIndex: number = 0;\r\n  currentIndex: number;\r\n\r\n  private innerStepData: progressData;\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() { }\r\n  /**\r\n   * stepsä¸stepDataï¼éæ©ä¸ä¸ªä½¿ç¨ã\r\n   * stepDataå¸¸è¢«è¡¨åç»å®ä½¿ç¨ï¼æ°æ®ç±»å\r\n   * {activeIndex:number,stepMessages:[{id:string,title:string,icon?string,hidden?boolean}]}\r\n   * activeIndex: æå®æ´»å¨çæ­¥éª¤å¨æ°ç»ä¸­çä½ç½®,\r\n   * stepMessages: æææ­¥éª¤æ°æ®çæ°ç»\r\n   */\r\n  _stepData: progressData;\r\n  @Input()\r\n  set stepData(value) {\r\n    if (value) {\r\n      // äºéä¸å±æ§ï¼éç½®\r\n      this.steps = null;\r\n      this.stepInit(value);\r\n    }\r\n  }\r\n  get stepData() {\r\n    return this._stepData;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes[\"steps\"] || changes[\"currentId\"]) {\r\n      // stepsæ²¡æå¼æèstepDataæå¼ï¼é½ä¸å¤çï¼è¿ä¸¤ä¸ªå±æ§å¯¹ç¨æ·æ¯äºéä¸\r\n      if (!this.steps || this.stepData) {\r\n        return;\r\n      }\r\n      this.steps.forEach((item) => (item.status = \"\"));\r\n      this.stepMessages = this.steps.filter((item) => !item.hidden);\r\n      let index = this.stepMessages.findIndex(\r\n        (item) => item.id === this.currentId\r\n      );\r\n      this.activeIndex = index === -1 ? 0 : index;\r\n    }\r\n  }\r\n\r\n  /**ç¹å»æä¸æ­¥ */\r\n  listClick(step, index) {\r\n    if (this.clickable) {\r\n      this.stepClick.emit({ \"step\": step, \"index\": index });\r\n    }\r\n  }\r\n\r\n  goStep(index) {\r\n    if (this.storedIndexState) {\r\n      if (this.activeIndex == index) {\r\n        this.currentIndex = null;\r\n      } else {\r\n        this.currentIndex = index;\r\n      }\r\n    } else {\r\n      this.stepMessages.forEach((step, i) => {\r\n        if (i < index) {\r\n          step.status = \"finish\";\r\n        } else if (i > index) {\r\n          step.status = \"\";\r\n        } else {\r\n          step.status = \"active\";\r\n        }\r\n      });\r\n      this.activeIndex = index;\r\n    }\r\n  }\r\n\r\n  /**ä¸ä¸æ­¥ */\r\n  nextStep() {\r\n    if (\r\n      this.storedIndexState &&\r\n      this.currentIndex < this.stepMessages.length - 1\r\n    ) {\r\n      this.currentIndex++;\r\n    }\r\n    if (this.activeIndex < this.stepMessages.length - 1) {\r\n      this.stepMessages[this.activeIndex].status = \"finish\";\r\n      this.stepMessages[this.activeIndex + 1].status = \"active\";\r\n      this.activeIndex++;\r\n      if (this.storedIndexState) {\r\n        this.currentIndex = this.activeIndex;\r\n      }\r\n    }\r\n    //return this.activeIndex;\r\n  }\r\n  /**ä¸ä¸æ­¥ */\r\n  prevStep() {\r\n    // if(this.storedIndexState && this.currentIndex > 0){\r\n    //   this.currentIndex--;\r\n    // }\r\n    if (this.activeIndex > 0) {\r\n      // else if(this.activeIndex > 0 && !this.storedIndexState){\r\n      this.stepMessages[this.activeIndex].status = \"\";\r\n      this.stepMessages[this.activeIndex - 1].status = \"active\";\r\n      this.activeIndex--;\r\n      if (this.storedIndexState) {\r\n        this.currentIndex = this.activeIndex;\r\n      }\r\n    }\r\n    //return this.activeIndex;\r\n  }\r\n\r\n  getCurrentStepIndex() {\r\n    return this.activeIndex;\r\n  }\r\n\r\n  stepInit(data) {\r\n    if (data[\"stepMessages\"] && data[\"stepMessages\"].length) {\r\n      data[\"stepMessages\"].forEach((step) => {\r\n        //if(typeof step.status === 'undefined'){\r\n        step.status = \"\";\r\n        //}\r\n      });\r\n      this.stepMessages = data[\"stepMessages\"].filter((step) => {\r\n        return !step.hidden;\r\n      });\r\n    }\r\n    this.activeIndex = data[\"activeIndex\"];\r\n    if (this.storedIndexState) {\r\n      this.currentIndex = this.activeIndex;\r\n    }\r\n  }\r\n\r\n  setProgressData(progressData: progressData) {\r\n    if (progressData) {\r\n      //this.stepData = progressData;\r\n      this.stepInit(progressData);\r\n    }\r\n  }\r\n\r\n  setActiveIndex(num: number) {\r\n    let activeNum: number =\r\n      num >= 0 && num < this.stepMessages.length ? num : 0;\r\n    this.activeIndex = activeNum;\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective } from './progress-step.component';\r\nimport { LocaleModule } from '@farris/ui-locale';\r\n\r\n@NgModule({\r\n  declarations: [ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective],\r\n  imports: [\r\n    CommonModule,\r\n    LocaleModule.forRoot()\r\n  ],\r\n  exports: [ProgressStepComponent,ProgressStepItemTemplateDirective,ProgressStepExtendTemplateDirective]\r\n})\r\nexport class ProgressStepModule { }\r\n"]}