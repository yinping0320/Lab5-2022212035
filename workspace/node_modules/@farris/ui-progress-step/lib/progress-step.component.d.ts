import { OnInit, TemplateRef, EventEmitter, OnChanges, SimpleChanges } from "@angular/core";
export declare class ProgressStepItemTemplateDirective {
    template: TemplateRef<any>;
    constructor(template: TemplateRef<any>);
}
export declare class ProgressStepExtendTemplateDirective {
    template: TemplateRef<any>;
    constructor(template: TemplateRef<any>);
}
export interface stepMessage {
    id: string;
    title: string;
    icon?: string;
    status?: string;
    clickDisable?: boolean;
    hidden?: boolean;
    class?: string;
}
export interface progressData {
    activeIndex: number;
    stepMessages: stepMessage[];
}
export declare class ProgressStepComponent implements OnInit, OnChanges {
    progressStepTemplate: TemplateRef<any>;
    progressStepExtendTmpl: TemplateRef<any>;
    /**横向horizontal、竖向排列vertical*/
    direction: string;
    /**是否铺满 */
    fill: boolean;
    /**是否支持点击 */
    clickable: boolean;
    stepsCls: string;
    fHeight: number;
    stepStyle: any;
    stepClick: EventEmitter<{}>;
    /**
     * steps与stepData，选择一个使用
     * 指定步骤条数据，是数组。常用在写自定义模版的地方。
     * [{id:string,title:string,icon?string,hidden?boolean}]
     */
    steps: stepMessage[];
    /**
     * 指定当前步骤的数据Id
     */
    currentId: string;
    storedIndexState: boolean;
    /**
     * 指定子项数据中，哪个是活动的
     * {子项步骤id:指定子项处于活动步骤的顺序}比如{"data3":2}
     */
    _subStepData: any;
    subStepData: any;
    /**
     * 过滤隐藏的步骤信息，记录当前显示的步骤条，
     */
    stepMessages: stepMessage[];
    /**
     * 记录当前步骤所在的位置，从0开始
     */
    activeIndex: number;
    currentIndex: number;
    private innerStepData;
    constructor();
    ngOnInit(): void;
    /**
     * steps与stepData，选择一个使用。
     * stepData常被表单绑定使用，数据类型
     * {activeIndex:number,stepMessages:[{id:string,title:string,icon?string,hidden?boolean}]}
     * activeIndex: 指定活动的步骤在数组中的位置,
     * stepMessages: 所有步骤数据的数组
     */
    _stepData: progressData;
    stepData: any;
    ngOnChanges(changes: SimpleChanges): void;
    /**点击某一步 */
    listClick(step: any, index: any): void;
    goStep(index: any): void;
    /**下一步 */
    nextStep(): void;
    /**上一步 */
    prevStep(): void;
    getCurrentStepIndex(): number;
    stepInit(data: any): void;
    setProgressData(progressData: progressData): void;
    setActiveIndex(num: number): void;
}
