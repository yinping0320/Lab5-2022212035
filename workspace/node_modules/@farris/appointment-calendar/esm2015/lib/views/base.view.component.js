/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Injector, Input, NgZone, Output, ViewChild } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { AppointmentCalendarComponent } from '../appointment-calendar.component';
export class BaseViewComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} calendarRef
     */
    constructor(injector, ngzone, calendarRef) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.calendarRef = calendarRef;
        this.selectId = '';
        this.itemClick = new EventEmitter();
        this.itemDblClick = new EventEmitter();
        this.scrollChange = new EventEmitter();
        this.activeItem = null;
        this.currentMousePointX = 0;
        this.currentMousePointY = 0;
        this.isClick = true;
        this.overlaySer = new OverLayHiddenService();
        this.utils = this.injector.get(CommonUtils);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setActiveItem();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.bodyRef.nativeElement.addEventListener('scroll', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const x = this.bodyRef.nativeElement.scrollLeft;
                /** @type {?} */
                const y = this.bodyRef.nativeElement.scrollTop;
                this.headerRef.nativeElement.scrollLeft = this.bodyRef.nativeElement.scrollLeft;
                this.calendarRef.closeDetailPanel();
                this.scrollChange.emit({ x, y });
            }));
        }));
        if (this.overlaySer) {
            this.overlaySer.registerMouseEvent(this.bodyRef.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (this.calendarRef.detailRef) {
                    if (this.calendarRef.detailRef.el.nativeElement.contains(e.target)) {
                        return;
                    }
                    if (e.type !== 'mousewheel' && this.isClick) {
                        if (this.calendarRef.viewType === 'week') {
                            if (e.target.closest('li') && e.target.closest('li').classList.contains('week-day-subject')) {
                                return;
                            }
                        }
                        if (this.calendarRef.viewType === 'day') {
                            if (e.target.closest('div.item-content')) {
                                return;
                            }
                        }
                    }
                    if (e.target.classList.contains('farris-modal') || e.target.closest('.farris-modal')) {
                        if (e.target.closest('farris-messager') && e.target.nodeName !== 'BUTTON') {
                            return;
                        }
                    }
                    this.calendarRef.closeDetailPanel();
                }
            }), { mouseUp: true });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlaySer) {
            this.overlaySer.destory(this.bodyRef.nativeElement);
            this.overlaySer = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.selectId && !changes.selectId.isFirstChange()) {
            this.setActiveItem();
        }
        if (changes.data && !changes.data.isFirstChange()) {
            this.setActiveItem();
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    setActiveItem(id) { }
    /**
     * @param {?} data
     * @return {?}
     */
    getRoomData(data) {
        /** @type {?} */
        const roomid = this.utils.getValue(this.calendarRef.reserveInfoFields.placeid, data);
        /** @type {?} */
        const room = this.data.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.id === roomid));
        if (room) {
            return room.data;
        }
        return null;
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSubjectClick($event, item) {
        $event.stopPropagation();
        if (!this.isClick) {
            this.calendarRef.closeDetailPanel();
            return;
        }
        if (this.calendarRef.viewType === 'week') {
            $event.target.scrollIntoViewIfNeeded();
        }
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this['clickTimer'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.activeItem = item;
            /** @type {?} */
            const room = this.getRoomData(item.data);
            this.itemClick.emit({ item, $event, room });
        }), this.calendarRef._CLICK_DELAY_);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblClick($event) {
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this.activeItem = $event.item;
        /** @type {?} */
        const room = this.getRoomData($event.item.data);
        $event['room'] = room;
        this.itemDblClick.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        this.currentMousePointX = Math.floor($event.screenX);
        this.currentMousePointY = Math.floor($event.screenY);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseUp($event) {
        this.isClick = this.currentMousePointX == Math.floor($event.screenX) && this.currentMousePointY == Math.floor($event.screenY);
    }
}
BaseViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'appointment-base-view',
                template: ''
            }] }
];
/** @nocollapse */
BaseViewComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: AppointmentCalendarComponent }
];
BaseViewComponent.propDecorators = {
    data: [{ type: Input }],
    selectId: [{ type: Input }],
    itemClick: [{ type: Output }],
    itemDblClick: [{ type: Output }],
    headerRef: [{ type: ViewChild, args: ['header',] }],
    bodyRef: [{ type: ViewChild, args: ['body',] }],
    scrollChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    BaseViewComponent.prototype.data;
    /** @type {?} */
    BaseViewComponent.prototype.selectId;
    /** @type {?} */
    BaseViewComponent.prototype.itemClick;
    /** @type {?} */
    BaseViewComponent.prototype.itemDblClick;
    /** @type {?} */
    BaseViewComponent.prototype.headerRef;
    /** @type {?} */
    BaseViewComponent.prototype.bodyRef;
    /** @type {?} */
    BaseViewComponent.prototype.scrollChange;
    /** @type {?} */
    BaseViewComponent.prototype.activeItem;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.overlaySer;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.currentMousePointX;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.currentMousePointY;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.isClick;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.ngzone;
    /** @type {?} */
    BaseViewComponent.prototype.calendarRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS52aWV3LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvYXBwb2ludG1lbnQtY2FsZW5kYXIvIiwic291cmNlcyI6WyJsaWIvdmlld3MvYmFzZS52aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBZ0MsTUFBTSxFQUFpQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDNUssT0FBTyxFQUFFLFdBQVcsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBT2pGLE1BQU0sT0FBTyxpQkFBaUI7Ozs7OztJQXVCMUIsWUFBc0IsUUFBa0IsRUFBWSxNQUFjLEVBQVMsV0FBeUM7UUFBOUYsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFZLFdBQU0sR0FBTixNQUFNLENBQVE7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBOEI7UUFwQjNHLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFFYixjQUFTLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUMvQixpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFNbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRTVDLGVBQVUsR0FBRyxJQUFJLENBQUM7UUFLVix1QkFBa0IsR0FBRyxDQUFDLENBQUM7UUFDdkIsdUJBQWtCLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLFlBQU8sR0FBRyxJQUFJLENBQUM7UUFHbkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLG9CQUFvQixFQUFFLENBQUM7UUFDN0MsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN6QixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCOzs7UUFBQyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsUUFBUTs7OztZQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7O3NCQUNsRCxDQUFDLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVTs7c0JBQ3pDLENBQUMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxTQUFTO2dCQUM5QyxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDO2dCQUNoRixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBRXBDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDckMsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztRQUVILElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNqQixJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYTs7OztZQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUU7Z0JBQ2pFLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLEVBQUU7b0JBRTVCLElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFO3dCQUNoRSxPQUFPO3FCQUNWO29CQUVELElBQUssQ0FBQyxDQUFDLElBQUksS0FBSyxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sRUFBRTt3QkFDMUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7NEJBQ3RDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFHO2dDQUMxRixPQUFPOzZCQUNWO3lCQUNKO3dCQUVELElBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEtBQUssS0FBSyxFQUFFOzRCQUNyQyxJQUFLLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLEVBQUU7Z0NBQ3ZDLE9BQU87NkJBQ1Y7eUJBQ0o7cUJBQ0o7b0JBR0QsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsZUFBZSxDQUFDLEVBQUc7d0JBQ25GLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsS0FBSyxRQUFRLEVBQUU7NEJBQ3ZFLE9BQU87eUJBQ1Y7cUJBQ0o7b0JBRUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDO2lCQUN2QztZQUNMLENBQUMsR0FBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7OztJQUVELFdBQVc7UUFDUCxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDakIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUNwRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQztTQUMxQjtJQUNMLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksT0FBTyxDQUFDLFFBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDdkQsSUFBSSxDQUFDLGFBQWEsRUFBRSxDQUFDO1NBQ3hCO1FBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBRTtZQUMvQyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDeEI7SUFDTCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxFQUFRLElBQUcsQ0FBQzs7Ozs7SUFFMUIsV0FBVyxDQUFDLElBQUk7O2NBQ04sTUFBTSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQzs7Y0FDOUUsSUFBSSxHQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSTs7OztRQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxLQUFLLE1BQU0sRUFBQztRQUM3RCxJQUFJLElBQUksRUFBQztZQUNMLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztTQUNwQjtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Ozs7OztJQUdELGNBQWMsQ0FBQyxNQUFNLEVBQUUsSUFBSTtRQUN2QixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZixJQUFJLENBQUMsV0FBVyxDQUFDLGdCQUFnQixFQUFFLENBQUM7WUFDcEMsT0FBTztTQUNWO1FBQ0QsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsS0FBSyxNQUFNLEVBQUU7WUFDdEMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxDQUFDO1NBQzFDO1FBRUQsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDcEIsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQ3BDO1FBQ0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLFVBQVU7OztRQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQzs7a0JBQ2pCLElBQUksR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDaEQsQ0FBQyxHQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7SUFFdkMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsTUFBZ0M7UUFDdkMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFDcEIsWUFBWSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFBO1NBQ25DO1FBQ0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDOztjQUN4QixJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUMvQyxNQUFNLENBQUMsTUFBTSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE1BQU07UUFDZCxJQUFJLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3pELENBQUM7Ozs7O0lBRUQsU0FBUyxDQUFDLE1BQU07UUFDWixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLENBQUMsa0JBQWtCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDbEksQ0FBQzs7O1lBdkpKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsdUJBQXVCO2dCQUNqQyxRQUFRLEVBQUUsRUFBRTthQUNmOzs7O1lBUDRELFFBQVE7WUFBUyxNQUFNO1lBRTNFLDRCQUE0Qjs7O21CQVNoQyxLQUFLO3VCQUNMLEtBQUs7d0JBRUwsTUFBTTsyQkFDTixNQUFNO3dCQUdOLFNBQVMsU0FBQyxRQUFRO3NCQUNsQixTQUFTLFNBQUMsTUFBTTsyQkFFaEIsTUFBTTs7OztJQVZQLGlDQUFrQjs7SUFDbEIscUNBQXVCOztJQUV2QixzQ0FBeUM7O0lBQ3pDLHlDQUE0Qzs7SUFHNUMsc0NBQXdEOztJQUN4RCxvQ0FBb0Q7O0lBRXBELHlDQUE0Qzs7SUFFNUMsdUNBQWtCOzs7OztJQUVsQix1Q0FBeUM7Ozs7O0lBQ3pDLGtDQUE2Qjs7Ozs7SUFFN0IsK0NBQStCOzs7OztJQUMvQiwrQ0FBK0I7Ozs7O0lBQy9CLG9DQUF1Qjs7Ozs7SUFFWCxxQ0FBNEI7Ozs7O0lBQUUsbUNBQXdCOztJQUFFLHdDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgSW5wdXQsIE5nWm9uZSwgT25DaGFuZ2VzLCBPbkRlc3Ryb3ksIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ29tbW9uVXRpbHMsIE92ZXJMYXlIaWRkZW5TZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBBcHBvaW50bWVudENhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vYXBwb2ludG1lbnQtY2FsZW5kYXIuY29tcG9uZW50JztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdhcHBvaW50bWVudC1iYXNlLXZpZXcnLFxyXG4gICAgdGVtcGxhdGU6ICcnXHJcbn0pXHJcblxyXG5leHBvcnQgY2xhc3MgQmFzZVZpZXdDb21wb25lbnQgaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcclxuXHJcbiAgICBASW5wdXQoKSBkYXRhOiBbXTtcclxuICAgIEBJbnB1dCgpIHNlbGVjdElkID0gJyc7XHJcblxyXG4gICAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBpdGVtRGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBcclxuXHJcbiAgICBAVmlld0NoaWxkKCdoZWFkZXInKSBoZWFkZXJSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG4gICAgQFZpZXdDaGlsZCgnYm9keScpIGJvZHlSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xyXG5cclxuICAgIEBPdXRwdXQoKSBzY3JvbGxDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgYWN0aXZlSXRlbSA9IG51bGw7XHJcblxyXG4gICAgcHJpdmF0ZSBvdmVybGF5U2VyOiBPdmVyTGF5SGlkZGVuU2VydmljZTtcclxuICAgIHByb3RlY3RlZCB1dGlsczogQ29tbW9uVXRpbHM7XHJcblxyXG4gICAgcHJpdmF0ZSBjdXJyZW50TW91c2VQb2ludFggPSAwO1xyXG4gICAgcHJpdmF0ZSBjdXJyZW50TW91c2VQb2ludFkgPSAwO1xyXG4gICAgcHJpdmF0ZSBpc0NsaWNrID0gdHJ1ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgaW5qZWN0b3I6IEluamVjdG9yLCBwcm90ZWN0ZWQgbmd6b25lOiBOZ1pvbmUsIHB1YmxpYyBjYWxlbmRhclJlZjogQXBwb2ludG1lbnRDYWxlbmRhckNvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMub3ZlcmxheVNlciA9IG5ldyBPdmVyTGF5SGlkZGVuU2VydmljZSgpO1xyXG4gICAgICAgIHRoaXMudXRpbHMgPSB0aGlzLmluamVjdG9yLmdldChDb21tb25VdGlscyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5zZXRBY3RpdmVJdGVtKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIHRoaXMubmd6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5ib2R5UmVmLm5hdGl2ZUVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHggPSB0aGlzLmJvZHlSZWYubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeSA9IHRoaXMuYm9keVJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbFRvcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaGVhZGVyUmVmLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsTGVmdCA9IHRoaXMuYm9keVJlZi5uYXRpdmVFbGVtZW50LnNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbGVuZGFyUmVmLmNsb3NlRGV0YWlsUGFuZWwoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjcm9sbENoYW5nZS5lbWl0KHsgeCwgeSB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXlTZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5U2VyLnJlZ2lzdGVyTW91c2VFdmVudCh0aGlzLmJvZHlSZWYubmF0aXZlRWxlbWVudCwgKGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNhbGVuZGFyUmVmLmRldGFpbFJlZikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxlbmRhclJlZi5kZXRhaWxSZWYuZWwubmF0aXZlRWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCBlLnR5cGUgIT09ICdtb3VzZXdoZWVsJyAmJiB0aGlzLmlzQ2xpY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJSZWYudmlld1R5cGUgPT09ICd3ZWVrJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudGFyZ2V0LmNsb3Nlc3QoJ2xpJykgJiYgZS50YXJnZXQuY2xvc2VzdCgnbGknKS5jbGFzc0xpc3QuY29udGFpbnMoJ3dlZWstZGF5LXN1YmplY3QnKSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jYWxlbmRhclJlZi52aWV3VHlwZSA9PT0gJ2RheScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZS50YXJnZXQuY2xvc2VzdCgnZGl2Lml0ZW0tY29udGVudCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQuY2xhc3NMaXN0LmNvbnRhaW5zKCdmYXJyaXMtbW9kYWwnKSB8fCBlLnRhcmdldC5jbG9zZXN0KCcuZmFycmlzLW1vZGFsJykgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLnRhcmdldC5jbG9zZXN0KCdmYXJyaXMtbWVzc2FnZXInKSAmJiBlLnRhcmdldC5ub2RlTmFtZSAhPT0gJ0JVVFRPTicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWxlbmRhclJlZi5jbG9zZURldGFpbFBhbmVsKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHsgbW91c2VVcDogdHJ1ZSB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMub3ZlcmxheVNlcikge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlTZXIuZGVzdG9yeSh0aGlzLmJvZHlSZWYubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMub3ZlcmxheVNlciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5zZWxlY3RJZCAmJiAhY2hhbmdlcy5zZWxlY3RJZC5pc0ZpcnN0Q2hhbmdlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5zZXRBY3RpdmVJdGVtKCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5kYXRhICYmICFjaGFuZ2VzLmRhdGEuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QWN0aXZlSXRlbSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXRBY3RpdmVJdGVtKGlkPzogYW55KSB7fVxyXG5cclxuICAgIGdldFJvb21EYXRhKGRhdGEpIHtcclxuICAgICAgICBjb25zdCByb29taWQgPSB0aGlzLnV0aWxzLmdldFZhbHVlKHRoaXMuY2FsZW5kYXJSZWYucmVzZXJ2ZUluZm9GaWVsZHMucGxhY2VpZCwgZGF0YSk7XHJcbiAgICAgICAgY29uc3Qgcm9vbTogYW55ID0gdGhpcy5kYXRhLmZpbmQoKG46IGFueSkgPT4gbi5pZCA9PT0gcm9vbWlkKTtcclxuICAgICAgICBpZiAocm9vbSl7XHJcbiAgICAgICAgICAgIHJldHVybiByb29tLmRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICBvblN1YmplY3RDbGljaygkZXZlbnQsIGl0ZW0pIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQ2xpY2spIHtcclxuICAgICAgICAgICAgdGhpcy5jYWxlbmRhclJlZi5jbG9zZURldGFpbFBhbmVsKCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMuY2FsZW5kYXJSZWYudmlld1R5cGUgPT09ICd3ZWVrJykge1xyXG4gICAgICAgICAgICAkZXZlbnQudGFyZ2V0LnNjcm9sbEludG9WaWV3SWZOZWVkZWQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzWydjbGlja1RpbWVyJ10pIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXNbJ2NsaWNrVGltZXInXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXNbJ2NsaWNrVGltZXInXSA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZUl0ZW0gPSBpdGVtO1xyXG4gICAgICAgICAgICBjb25zdCByb29tID0gdGhpcy5nZXRSb29tRGF0YShpdGVtLmRhdGEpO1xyXG4gICAgICAgICAgICB0aGlzLml0ZW1DbGljay5lbWl0KHsgaXRlbSwgJGV2ZW50LCByb29tIH0pO1xyXG4gICAgICAgIH0sIHRoaXMuY2FsZW5kYXJSZWYuX0NMSUNLX0RFTEFZXyk7XHJcbiAgICAgICAgXHJcbiAgICB9XHJcblxyXG4gICAgb25kYmxDbGljaygkZXZlbnQ6IHtpdGVtOiBhbnksICRldmVudDogYW55fSkge1xyXG4gICAgICAgIGlmICh0aGlzWydjbGlja1RpbWVyJ10pIHtcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXNbJ2NsaWNrVGltZXInXSlcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hY3RpdmVJdGVtID0gJGV2ZW50Lml0ZW07XHJcbiAgICAgICAgY29uc3Qgcm9vbSA9IHRoaXMuZ2V0Um9vbURhdGEoJGV2ZW50Lml0ZW0uZGF0YSk7XHJcbiAgICAgICAgJGV2ZW50Wydyb29tJ10gPSByb29tO1xyXG4gICAgICAgIHRoaXMuaXRlbURibENsaWNrLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBvbk1vdXNlRG93bigkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmN1cnJlbnRNb3VzZVBvaW50WCA9IE1hdGguZmxvb3IoJGV2ZW50LnNjcmVlblgpO1xyXG4gICAgICAgIHRoaXMuY3VycmVudE1vdXNlUG9pbnRZID0gTWF0aC5mbG9vcigkZXZlbnQuc2NyZWVuWSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3VzZVVwKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuaXNDbGljayA9IHRoaXMuY3VycmVudE1vdXNlUG9pbnRYID09IE1hdGguZmxvb3IoJGV2ZW50LnNjcmVlblgpICYmIHRoaXMuY3VycmVudE1vdXNlUG9pbnRZID09IE1hdGguZmxvb3IoJGV2ZW50LnNjcmVlblkpO1xyXG4gICAgfVxyXG59Il19