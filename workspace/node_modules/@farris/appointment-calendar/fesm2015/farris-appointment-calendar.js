import { Subject } from 'rxjs';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { ComboListModule } from '@farris/ui-combo-list';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { CommonUtils, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { flatten } from 'lodash-es';
import { DateTimeHelperService, DateHelperModule } from '@farris/ui-common/date';
import { differenceInMinutes, isSameDay, addDays, subDays } from 'date-fns';
import { Injectable, Component, ElementRef, Injector, Input, ChangeDetectorRef, EventEmitter, NgZone, Output, Renderer2, ViewChild, ViewEncapsulation, Directive, HostListener, NgModule } from '@angular/core';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { DataColumnModule } from '@farris/ui-common/column';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AppointmentCalendarService {
    constructor() {
        this.cardBtnClick$ = new Subject();
    }
}
AppointmentCalendarService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AppointmentCalendarService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ReserveDetailComponent {
    /**
     * @param {?} injector
     * @param {?} ser
     * @param {?} el
     */
    constructor(injector, ser, el) {
        this.injector = injector;
        this.ser = ser;
        this.el = el;
        /**
         * 弹出面板位置
         */
        this.position = null;
        /**
         * 预定信息字段配置
         */
        this.fieldConfigs = null;
        /**
         * 预定地点字段配置
         */
        this.placeFieldConfigs = null;
        this.customCls = null;
        this.showEditButton = true;
        this.showDeleteButton = true;
        this.showCloseButton = true;
        this.detailColumnWidth = 56;
        this.titleLength = 52;
        this.rooNameField = 'name';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.rooNameField = this.placeFieldConfigs.fullName || this.placeFieldConfigs.name;
    }
    /**
     * @param {?} $event
     * @param {?} t
     * @return {?}
     */
    toolbarBtnClick($event, t) {
        $event.stopPropagation();
        this.ser.cardBtnClick$.next({ $event, action: t, item: this.data });
    }
    /**
     * @param {?=} typ
     * @return {?}
     */
    getCustomCls(typ = 'cls') {
        /** @type {?} */
        let result = null;
        if (this.customCls) {
            if (!this.customCls['cls'] && !this.customCls['cls'] && typ == 'cls') {
                result = this.customCls;
            }
            else {
                result = this.customCls[typ] || {};
            }
        }
        // if (typ === 'styles' || typ === 'detail') {
        //     Object.keys(result).forEach((n: any) => {
        //         if (result[n].indexOf('important') === -1) {
        //             result[n] = result[n] +' !important' ;
        //         }
        //     });
        // }
        return result;
    }
    /**
     * @param {?} str
     * @return {?}
     */
    getLength(str) {
        /** @type {?} */
        let strLength = 0;
        // 记录str的总长度
        /** @type {?} */
        const Len = str.length;
        for (let i = 0; i < Len; i++) {
            /** @type {?} */
            var charCode = str.charCodeAt(i);
            if (charCode >= 0 && charCode <= 128) {
                strLength++; //英文字符加1
            }
            else {
                strLength = strLength + 2; //中文字符加2
            }
        }
        return strLength;
    }
    /**
     * @param {?} str
     * @param {?} len
     * @return {?}
     */
    subStrNum(str, len) {
        /** @type {?} */
        const strLen = str.length;
        /** @type {?} */
        let strCut = '';
        /** @type {?} */
        let strLength = 0;
        for (let i = 0; i < strLen; i++) {
            /** @type {?} */
            var charStr = str.charAt(i);
            strLength++;
            if (encodeURI(charStr).length > 4) { //使用encodeURI获取编码长度
                strLength++;
            }
            strCut = strCut.concat(charStr); //单个字符进行合并
            if (strLength >= len) {
                strCut = strCut.concat('...'); //大于指定长度后合并'...'并返回此字符串
                return strCut;
            }
        }
        if (strLength < len) {
            return str;
        }
    }
}
ReserveDetailComponent.decorators = [
    { type: Component, args: [{
                selector: 'reserve-detail',
                template: `
      <div class="reserve-detail-container" style="position: fixed; z-index: 99" [style.left.px]="position?.left" [style.top.px]="position?.top">
        <div class="detail-header" [ngClass]="getCustomCls()" [ngStyle]="getCustomCls('styles')">
            <div class="detail-toolbar" *ngIf="!toolbarButtons || !toolbarButtons.length">
                <span *ngIf="showEditButton" class="f-icon f-icon f-icon-new-edit" title="{{ 'appointment.detail.edit' | locale }}" (click)="toolbarBtnClick($event, 'edit')"></span>
                <span *ngIf="showDeleteButton" class="f-icon f-icon-trash" title="{{ 'appointment.detail.del' | locale }}" (click)="toolbarBtnClick($event, 'del')"></span>
                <span *ngIf="showCloseButton" class="f-icon f-icon-close" title="{{ 'appointment.detail.close' | locale }}" (click)="toolbarBtnClick($event, 'close')"></span>
            </div>

            <div class="detail-toolbar" *ngIf="toolbarButtons && toolbarButtons.length">
                <span *ngFor="let btn of toolbarButtons" class="{{ btn.icon }}" title="{{ btn.title }}" [style.display]="btn.visible ? '': 'none'"
                    (click)="!btn.disable && btn.handler && btn.handler({ item: data, $event: $event })"></span>
                <span *ngIf="showCloseButton" class="f-icon f-icon-close" title="{{ 'appointment.detail.close' | locale }}" (click)="toolbarBtnClick($event, 'close')"></span>
            </div>

            <div class="detail-title">
 
                <span class="detail-place">
                    {{rooNameField | getvalue: placeInfo}}
                </span>
                <div class="title-content" style='word-break:break-all; font-family:-apple-system,BlinkMacSystemFont,"Segoe UI","PingFang SC","Hiragino Sans GB","Microsoft YaHei","Helvetica Neue",Helvetica,Arial,sans-serif' title="{{fieldConfigs.title}}">
                    {{subStrNum(fieldConfigs.title | getvalue: data, titleLength)}}
                    <!-- <span class="detail-label">专项会议</span> -->
                    <ng-container [ngTemplateOutlet]="badgeTemplate" [ngTemplateOutletContext]="{ $implicit: {data: data}, item: data }"></ng-container>
                </div>
                <div class="detail-timer">
                    {{ fieldConfigs.startDate| getvalue: data | dateformat: ('appointment.detail.dateFormat'|locale) }} {{ fieldConfigs.startDate| getvalue: data | dateformat: 'HH:mm' }} 
                    &nbsp;-&nbsp;
                    {{ fieldConfigs.endDate | getvalue: data | dateformat: ('appointment.detail.dateFormat'|locale) }} {{ fieldConfigs.endDate | getvalue: data | dateformat: 'HH:mm' }} 
                    <!-- 9月4日（今天）08:00 — 9月7日（周三）17:30 -->
                </div>
            </div>
        </div>
        <div class="detail-info-content  win11Scroll nobtn" [ngStyle]="getCustomCls('detail')">
            <ng-container [ngTemplateOutlet]="detailTemplate" [ngTemplateOutletContext]="{ $implicit: {data: data}, item: data }"></ng-container>
            <ul *ngIf="!detailTemplate">
                <li *ngFor="let col of columns">
                    <ng-container *ngIf="!col.template">
                        <span class="detail-subtitle" [style.width.px]="detailColumnWidth" [style.minWidth.px]="detailColumnWidth" [title]="col.title">{{col.title}}</span> 
                        <span class="detail-content  d-flex flex-row" *ngIf="!col.formatter">
                            <span class="colon"></span>    
                            <span class="text">{{ col.field | getvalue: data: true}}</span>
                        </span>
                        <span class="detail-content  d-flex flex-row" *ngIf="col.formatter">
                            <span class="colon"></span>
                            <span class="text" [innerHtml]=" col.field | getvalue: data | columnformatter: col : data | safe: 'html'"></span>
                        </span>
                    </ng-container>
                    <ng-container *ngIf="col.template"  [ngTemplateOutlet]="col.template" [ngTemplateOutletContext]="{ $implicit: {data: data, field: col.field, label: col.title}, item: data }">
                    </ng-container>
                </li>
                
            </ul>
        </div>
    </div>

    `,
                styles: [`
            .detail-subtitle {
               text-align: justify;text-align-last: justify;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;
            }
            .detail-content>.colon:before {
                content: '：'
            }

            .detail-content>.text {
                word-break: break-all;
            }
        `]
            }] }
];
/** @nocollapse */
ReserveDetailComponent.ctorParameters = () => [
    { type: Injector },
    { type: AppointmentCalendarService },
    { type: ElementRef }
];
ReserveDetailComponent.propDecorators = {
    data: [{ type: Input }],
    position: [{ type: Input }],
    columns: [{ type: Input }],
    detailTemplate: [{ type: Input }],
    badgeTemplate: [{ type: Input }],
    fieldConfigs: [{ type: Input }],
    placeInfo: [{ type: Input }],
    placeFieldConfigs: [{ type: Input }],
    customCls: [{ type: Input }],
    showEditButton: [{ type: Input }],
    showDeleteButton: [{ type: Input }],
    showCloseButton: [{ type: Input }],
    toolbarButtons: [{ type: Input }],
    detailColumnWidth: [{ type: Input }],
    titleLength: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const APPOINTMENT_CALENDAR_LOCALES = {
    'en': {
        appointment: {
            today: 'Today',
            thisWeek: 'This week',
            day: 'Day',
            week: 'Week',
            prevDay: 'Prev day',
            prevWeek: 'Prev week',
            nextDay: 'Next day',
            nextWeek: 'Next week',
            dateFormat: 'yyyy-MM-dd',
            datePlace: 'Pleasy select a date.',
            weeks: { 一: 'Mon', 二: 'Tue', 三: 'Wed', 四: 'Thu', 五: 'Fri', 六: 'Sat', 日: 'Sun' },
            detail: {
                edit: 'Edit',
                del: 'Delete',
                close: 'Close',
                dateFormat: 'MM-dd'
            }
        }
    },
    'zh-CHS': {
        appointment: {
            today: '今天',
            thisWeek: '本周',
            day: '日',
            week: '周',
            prevDay: '前一天',
            prevWeek: '前一周',
            nextDay: '下一天',
            nextWeek: '下一周',
            dateFormat: 'yyyy年MM月dd日',
            datePlace: '请选择',
            weeks: { 一: '周一', 二: '周二', 三: '周三', 四: '周四', 五: '周五', 六: '周六', 日: '周日' },
            detail: {
                edit: '编辑',
                del: '删除',
                close: '关闭',
                dateFormat: 'MM月dd日'
            }
        }
    },
    'zh-CHT': {
        appointment: {
            today: '今天',
            thisWeek: '本周',
            day: '日',
            week: '周',
            prevDay: '前一天',
            prevWeek: '前一周',
            nextDay: '下一天',
            nextWeek: '下一周',
            dateFormat: 'yyyy年MM月dd日',
            datePlace: '請選擇',
            weeks: { 一: '周一', 二: '周二', 三: '周三', 四: '周四', 五: '周五', 六: '周六', 日: '周日' },
            detail: {
                edit: '編輯',
                del: '刪除',
                close: '關閉',
                dateFormat: 'MM月dd日'
            }
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AppointmentCalendarComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     * @param {?} ngZone
     * @param {?} render
     * @param {?} roomSer
     * @param {?} dateHlp
     * @param {?} elRef
     * @param {?} utils
     * @param {?} localeSer
     */
    constructor(injector, cd, ngZone, render, roomSer, dateHlp, elRef, utils, localeSer) {
        this.injector = injector;
        this.cd = cd;
        this.ngZone = ngZone;
        this.render = render;
        this.roomSer = roomSer;
        this.dateHlp = dateHlp;
        this.elRef = elRef;
        this.utils = utils;
        this.localeSer = localeSer;
        /**
         * 预定数据
         */
        this.reserveData = [];
        /**
         * 房间列表数据
         */
        this.placeItems = [];
        /**
         * 房间标识字段 默认 id
         */
        this.placeIdField = 'id';
        /**
         * 房间名称字段
         */
        this.placeNameField = 'name';
        /**
         * 预定地点全名称
         */
        this.placeFullNameField = '';
        /**
         * 预定时间字段
         */
        this.reserveInfoFields = {
            /**
             * 预订标识字段
             */
            idField: 'id',
            /**
             * 开始时间字段
             */
            startDate: 'start',
            /**
             * 结束时间字段
             */
            endDate: 'end',
            /**
             * 对应房间ID 字段
             */
            placeid: 'roomid',
            /**
             * 预订主题名称字段
             */
            title: 'title'
        };
        this.placeTitle = '名称';
        /**
         * 天视图行高， 默认 62px
         */
        this.rowHeight = 62;
        /**
         * 周视图行高，默认 85px
         */
        this.weekRowHeight = 85;
        /**
         * 周视图单元格宽度，默认 150px
         */
        this.weekCellWidth = 150;
        /**
         * 房间列宽度，默认 300px
         */
        this.placeNameWidth = 300;
        /**
         * 默认视图 day 日， week 周。 默认 day
         */
        this.viewType = 'day';
        /**
         * 日视图下开始时间
         */
        this.startTime = 7;
        /**
         * 选中预订信息ID
         */
        this.selectedId = '';
        /**
         * 详情卡片显示编辑按钮
         */
        this.showEditButton = true;
        /**
         * 详情卡片显示删除按钮
         */
        this.showDeleteButton = true;
        this.showCloseButton = true;
        /**
         * 详情卡片标题列宽度，默认 56px 显示为4个字
         */
        this.detailColumnWidth = 56;
        /**
         * 双击事件
         */
        this.itemDblClick = new EventEmitter();
        /**
         * 日视图，鼠标滑过空白单元格显示文本
         */
        this.reservationTitle = '预订';
        /**
         * 过滤事件
         */
        this.filterChange = new EventEmitter();
        /**
         * 选中事件
         */
        this.selectChange = new EventEmitter();
        /**
         * 卡片详情编辑事件
         */
        this.editHandler = new EventEmitter();
        /**
         * 卡片详情删除事件
         */
        this.removeHandler = new EventEmitter();
        /**
         * 清除选中项
         */
        this.clearSelected = new EventEmitter();
        /**
         * 日视图单元格点击事件
         */
        this.reservation = new EventEmitter();
        this.weekDays = [];
        this.groupData = [];
        this.currentDateRangeStr = '';
        this.currentDateStr = '';
        this.currentSelectItem = null;
        this.position = null;
        this.showDetail = false;
        this.detailCustomCls = null;
        this._CLICK_DELAY_ = 180;
        // 框架头高高度；
        this._frameHeaderHeight = 0;
        this.minWeekViewWidth = 0;
        this._currentScrollPos = { 'day': { x: null, y: 0 }, 'week': { x: null, y: 0 } };
        this.rowWidth = 2450;
        this.cardBtnClickSub = this.roomSer.cardBtnClick$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.detailEventHandlers(e);
        }));
        this.localeSer.setLocaleData(APPOINTMENT_CALENDAR_LOCALES);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.groupData = this.mergeDate();
        this.showEditButton = !!this.editHandler.observers.length;
        this.showDeleteButton = !!this.removeHandler.observers.length;
        this.minWeekViewWidth = (this.weekCellWidth || 150) * 7 + this.placeNameWidth;
        this.rowWidth += this.placeNameWidth;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.reserveData && !changes.reserveData.isFirstChange()) {
            this.dataChanged();
        }
        if (changes.placeItems && !changes.placeItems.isFirstChange()) {
            this.dataChanged();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.cardBtnClickSub) {
            this.cardBtnClickSub.unsubscribe();
            this.cardBtnClickSub = null;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadReserveData(data) {
        this.reserveData = data;
        this.dataChanged();
        this.cd.detectChanges();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    loadPlaceData(data) {
        this.placeItems = data;
        this.dataChanged();
        this.cd.detectChanges();
    }
    /**
     * @private
     * @return {?}
     */
    dataChanged() {
        this.groupData = this.mergeDate();
        if (this['CALENDAR_SCROLL_POSITION']) {
            clearTimeout(this['CALENDAR_SCROLL_POSITION']);
        }
        this['CALENDAR_SCROLL_POSITION'] = setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const roomBodyEl = this.elRef.nativeElement.querySelector('.body');
            const { x, y } = this._currentScrollPos[this.viewType] || { x: null, y: null };
            if (roomBodyEl) {
                /** @type {?} */
                let left = x;
                if (this.viewType === 'day' && x === null) {
                    left = this.startTime * 100;
                }
                roomBodyEl.scrollLeft = left;
                roomBodyEl.scrollTop = y || 0;
                roomBodyEl.scrollTo(left, y || 0);
            }
        }), 100);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onViewTypeChanged($event) {
        const { viewType, weekDays, dateValue, place } = $event;
        this.viewType = viewType;
        this.weekDays = weekDays;
        if (this.viewType === 'day') {
            this.currentDateStr = dateValue;
        }
        else {
            this.currentDateRangeStr = dateValue;
        }
        this.dataChanged();
        this.filterChange.emit({ viewType, dateValue, place });
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPlaceSelected($event) {
        // TODO: 房间切换后，客户端过滤房间列表
    }
    /**
     * @private
     * @param {?} reserves
     * @return {?}
     */
    getUsedCells(reserves) {
        if (reserves && reserves.length) {
            /** @type {?} */
            const startField = this.reserveInfoFields.startDate;
            /** @type {?} */
            const endField = this.reserveInfoFields.endDate;
            /** @type {?} */
            const cells = reserves.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                /** @type {?} */
                const startValue = this.utils.getValue(startField, n.data);
                /** @type {?} */
                const _startTimes = this.getTimes(startValue);
                /** @type {?} */
                const endValue = this.utils.getValue(endField, n.data);
                /** @type {?} */
                const _endTimes = this.getTimes(endValue);
                /** @type {?} */
                const beginIndex = _startTimes.hour;
                /** @type {?} */
                let endIndex = _endTimes.hour - 1;
                // if (_endTimes.minute > 0) {
                //     endIndex++;
                // } else {
                //     endIndex--;
                // }
                /** @type {?} */
                var c = [];
                for (let i = beginIndex - 1; i < endIndex; i++) {
                    c.push(i + 1);
                }
                return c;
            }));
            return flatten(cells);
        }
    }
    /**
     * @private
     * @return {?}
     */
    mergeDate() {
        if (this.placeItems && this.placeItems.length) {
            if (this.viewType === 'day') {
                return this.placeItems.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    /** @type {?} */
                    const reserves = this.reserveData.filter((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => this.utils.getValue(this.reserveInfoFields.placeid, d) === this.utils.getValue(this.placeIdField, n) &&
                        isSameDay(new Date(this.utils.getValue(this.reserveInfoFields.startDate, d)), new Date(this.currentDateStr)))).map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        return {
                            data: r,
                            id: r[this.reserveInfoFields.idField],
                            position: this.getReservePositionInfo(r),
                        };
                    }));
                    return {
                        id: n[this.placeIdField],
                        data: n,
                        reserves,
                        disableCells: this.getUsedCells(reserves)
                    };
                }));
            }
            else {
                return this.placeItems.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return {
                        id: n[this.placeIdField],
                        data: n,
                        reserves: this.weekDays.map((/**
                         * @param {?} weekday
                         * @return {?}
                         */
                        (weekday) => {
                            return {
                                date: weekday,
                                items: this.reserveData.filter((/**
                                 * @param {?} d
                                 * @return {?}
                                 */
                                d => this.utils.getValue(this.reserveInfoFields.placeid, d) === this.utils.getValue(this.placeIdField, n) &&
                                    isSameDay(new Date(this.utils.getValue(this.reserveInfoFields.startDate, d)), weekday.date))).map((/**
                                 * @param {?} r
                                 * @return {?}
                                 */
                                r => {
                                    return {
                                        data: r,
                                        id: r[this.reserveInfoFields.idField],
                                    };
                                })).sort((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                (a, b) => {
                                    /** @type {?} */
                                    const r = this.dateHlp.differenceInMinutes(new Date(this.utils.getValue(this.reserveInfoFields.startDate, a.data)), new Date(this.utils.getValue(this.reserveInfoFields.endDate, b.data)));
                                    return r > 0 ? 1 : r < 0 ? -1 : 0;
                                }))
                            };
                        }))
                    };
                }));
            }
        }
        return [];
    }
    /**
     * @param {?} dateStr
     * @return {?}
     */
    getTimes(dateStr) {
        if (dateStr) {
            /** @type {?} */
            const _startDate = this.dateHlp.formatTo(dateStr, 'yyyy-MM-dd HH:mm:ss');
            if (_startDate) {
                /** @type {?} */
                const startDate = new Date(_startDate);
                /** @type {?} */
                const hour = startDate.getHours();
                /** @type {?} */
                const minute = startDate.getMinutes();
                return {
                    hour, minute, date: new Date(_startDate.split(' ')[0])
                };
            }
        }
        return null;
    }
    /**
     * @private
     * @param {?} reserveItem
     * @return {?}
     */
    getReservePositionInfo(reserveItem) {
        /** @type {?} */
        const startField = this.reserveInfoFields.startDate;
        /** @type {?} */
        const endField = this.reserveInfoFields.endDate;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let width = 0;
        /** @type {?} */
        const startDateStr = reserveItem[startField];
        /** @type {?} */
        const endDateStr = reserveItem[endField];
        if (startDateStr) {
            /** @type {?} */
            const _startTimes = this.getTimes(startDateStr);
            if (_startTimes) {
                const { hour, minute } = _startTimes;
                left = (hour) * 100;
                if (minute) {
                    left += minute / 60 * 100;
                }
                if (endDateStr) {
                    /** @type {?} */
                    const minutes = differenceInMinutes(new Date(endDateStr), new Date(startDateStr));
                    width = minutes / 60 * 100;
                }
            }
        }
        return { left, width };
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectChange($event) {
        this.selectedId = $event.item.id;
        this.currentSelectItem = { room: $event.room, data: $event.item.data };
        /** @type {?} */
        let tar = null;
        if (this.viewType === 'week') {
            tar = $event.$event.target.closest('li');
        }
        else {
            tar = $event.$event.target.closest('.item-content');
        }
        this.getPositionForDetailPanel(tar);
        if (this.detailCls) {
            this.detailCustomCls = this.detailCls($event.item);
        }
        this.showDetail = true;
        this.selectChange.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onItemDblClick($event) {
        this.selectedId = $event.item.id;
        this.currentSelectItem = { room: $event.room, data: $event.item.data };
        this.itemDblClick.emit($event);
    }
    /**
     * @param {?} reserveId
     * @return {?}
     */
    selectItem(reserveId) {
        this.selectedId = reserveId;
        this.cd.detectChanges();
        if (this.selectedId === null || this.selectedId === undefined || this.selectedId === '') {
            this.clearSelect();
        }
    }
    /**
     * @return {?}
     */
    clearSelect() {
        this.selectedId = null;
        this.clearSelected.emit({ ins: this });
    }
    /**
     * @private
     * @return {?}
     */
    getFrameheaderHeight() {
        if (this._frameHeaderHeight) {
            return this._frameHeaderHeight;
        }
        /** @type {?} */
        const tabset = document.querySelector('.framework-tab-origin.gw-container-tabset.tab-container');
        /** @type {?} */
        let h = 0;
        if (tabset) {
            h += tabset.offsetHeight;
        }
        /** @type {?} */
        const frameHeader = document.querySelector('.gw-header--wrapper.framework-tool-origin');
        if (frameHeader) {
            h += frameHeader.offsetHeight;
        }
        this._frameHeaderHeight = h;
        return this._frameHeaderHeight;
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    getPositionForDetailPanel(target) {
        const { left, top, right, bottom, width, height } = target.getBoundingClientRect();
        /** @type {?} */
        const panelSize = { width: 368, height: 436 };
        /** @type {?} */
        let _left = left;
        /** @type {?} */
        let _top = top;
        /** @type {?} */
        const _right = window.innerWidth - right;
        /** @type {?} */
        const _bottom = window.innerHeight - bottom;
        if (_left > _right) {
            if (_left > panelSize.width) {
                _left = _left - panelSize.width;
            }
            else {
                if (window.innerWidth - left > panelSize.width) {
                    _left = left;
                }
                else {
                    if (right > panelSize.width) {
                        _left = right - panelSize.width;
                    }
                    else {
                        _left = (window.innerWidth - panelSize.width) / 2;
                    }
                }
            }
        }
        else {
            if (_right > panelSize.width) {
                _left = right;
            }
            else {
                if (right > panelSize.width) {
                    _left = left;
                }
                else {
                    _left = (window.innerWidth - panelSize.width) / 2;
                }
            }
        }
        if (_top > _bottom) {
            if (_top > panelSize.height) {
                if (left > panelSize.width || _right > panelSize.width) {
                    if (window.innerHeight - _top < height + 40) {
                        _top = window.innerHeight - panelSize.height - 20;
                    }
                    else {
                        _top = top - panelSize.height + height + 40;
                        if (_top < this.getFrameheaderHeight()) {
                            _top = this.getFrameheaderHeight() + 10;
                        }
                    }
                }
                else {
                    _top = top - panelSize.height;
                }
            }
            else {
                _top = 10 + this.getFrameheaderHeight();
            }
        }
        else {
            if (_bottom > panelSize.height) {
                if (_right > panelSize.width || left > panelSize.width) {
                    _top = bottom - height - 40;
                }
                else {
                    _top = bottom;
                }
            }
            else {
                _top = 10 + this.getFrameheaderHeight();
            }
        }
        this.position = { left: _left, top: _top };
    }
    /**
     * @return {?}
     */
    closeDetailPanel() {
        this.roomSer.cardBtnClick$.next({ action: 'close' });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onAddNew($event) {
        this.reservation.emit($event);
    }
    /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    onScrollChange($event, typ) {
        this._currentScrollPos[this.viewType] = Object.assign({}, $event, { type: typ });
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    detailEventHandlers(e) {
        const { action, item, $event } = e;
        /** @type {?} */
        let p = null;
        if (item) {
            p = { item: { data: item, id: this.utils.getValue(this.reserveInfoFields.idField, item) } };
        }
        switch (action) {
            case 'edit':
                this.editHandler.emit(p);
                break;
            case 'del':
                this.removeHandler.emit(p);
                break;
            case 'close':
                this.showDetail = false;
                break;
        }
    }
}
AppointmentCalendarComponent.decorators = [
    { type: Component, args: [{
                selector: "farris-appointment-calendar",
                template: "<div class=\"rtv-container\" resizeObserver (resize)=\"closeDetailPanel()\" [class.rtv-container-week]=\"viewType === 'week'\">\r\n    <toolbar (placeChanged)=\"onPlaceSelected($event)\" (dateChanged)=\"onViewTypeChanged($event)\" [currentViewType]=\"viewType\" [places]=\"placeItems\"></toolbar>\r\n    <div class=\"main\" style=\"position:relative\" #viewContainer>\r\n        <!-- <div style=\"border-right: 0.5px solid #0e6ded;height: 100%;position: absolute;left: 230px;width: 1px;z-index: 99;\"></div> -->\r\n\r\n        <day-view [data]=\"groupData\" class=\"h-100 d-flex flex-column\" *ngIf=\"viewType === 'day'\" [customCls]=\"dayViewCls\" [reservationTitle]=\"reservationTitle\"\r\n         (itemClick)=\"onSelectChange($event)\" (itemDblClick)=\"onItemDblClick($event)\" [selectId]=\"selectedId\" (cellClick)=\"onAddNew($event)\" (scrollChange)=\"onScrollChange($event, 'day')\"></day-view>\r\n        <week-view [data]=\"groupData\" class=\"h-100 d-flex flex-column\" *ngIf=\"viewType === 'week'\" [weekDays]=\"weekDays\" (scrollChange)=\"onScrollChange($event, 'week')\"\r\n         (itemClick)=\"onSelectChange($event)\" (itemDblClick)=\"onItemDblClick($event)\" [width]=\"viewContainer.offsetWidth < minWeekViewWidth ? minWeekViewWidth: viewContainer.offsetWidth\" [selectId]=\"selectedId\"></week-view>\r\n    </div>\r\n</div>\r\n\r\n<reserve-detail *ngIf=\"showDetail\" #detailRef\r\n    [data]=\"currentSelectItem?.data\"\r\n    [position]=\"position\"\r\n    [detailTemplate]=\"detailTemplate\"\r\n    [columns]=\"detailColumns\"\r\n    [placeInfo]=\"currentSelectItem?.room\"\r\n    [placeFieldConfigs]=\"{ name: placeNameField, fullName: placeFullNameField, id: placeIdField }\"\r\n    [fieldConfigs]=\"reserveInfoFields\"\r\n    [badgeTemplate]=\"detailBadgeTemplate\"\r\n    [customCls]=\"detailCustomCls\"\r\n    [showCloseButton]=\"showCloseButton\"\r\n    [showDeleteButton]=\"showDeleteButton\"\r\n    [showEditButton]=\"showEditButton\"\r\n    [toolbarButtons]=\"detailToolbars\"\r\n    [detailColumnWidth]=\"detailColumnWidth\"></reserve-detail>",
                // styleUrls: ['./appointment-calendar.component.css'],
                providers: [
                    AppointmentCalendarService
                ],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
AppointmentCalendarComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: NgZone },
    { type: Renderer2 },
    { type: AppointmentCalendarService },
    { type: DateTimeHelperService },
    { type: ElementRef },
    { type: CommonUtils },
    { type: LocaleService }
];
AppointmentCalendarComponent.propDecorators = {
    reserveData: [{ type: Input }],
    placeItems: [{ type: Input }],
    placeIdField: [{ type: Input }],
    placeNameField: [{ type: Input }],
    placeFullNameField: [{ type: Input }],
    reserveInfoFields: [{ type: Input }],
    roomNameFormatter: [{ type: Input }],
    placeNameTemplate: [{ type: Input }],
    contentTemplate: [{ type: Input }],
    detailTemplate: [{ type: Input }],
    detailBadgeTemplate: [{ type: Input }],
    detailCls: [{ type: Input }],
    dayViewCls: [{ type: Input }],
    placeTitle: [{ type: Input }],
    rowHeight: [{ type: Input }],
    weekRowHeight: [{ type: Input }],
    weekCellWidth: [{ type: Input }],
    placeNameWidth: [{ type: Input }],
    viewType: [{ type: Input }],
    startTime: [{ type: Input }],
    selectedId: [{ type: Input }],
    detailColumns: [{ type: Input }],
    showEditButton: [{ type: Input }],
    showDeleteButton: [{ type: Input }],
    showCloseButton: [{ type: Input }],
    detailToolbars: [{ type: Input }],
    detailColumnWidth: [{ type: Input }],
    itemDblClick: [{ type: Output }],
    reservationTitle: [{ type: Input }],
    filterChange: [{ type: Output }],
    selectChange: [{ type: Output }],
    editHandler: [{ type: Output }],
    removeHandler: [{ type: Output }],
    clearSelected: [{ type: Output }],
    reservation: [{ type: Output }],
    detailRef: [{ type: ViewChild, args: ['detailRef',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseViewComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} calendarRef
     */
    constructor(injector, ngzone, calendarRef) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.calendarRef = calendarRef;
        this.selectId = '';
        this.itemClick = new EventEmitter();
        this.itemDblClick = new EventEmitter();
        this.scrollChange = new EventEmitter();
        this.activeItem = null;
        this.currentMousePointX = 0;
        this.currentMousePointY = 0;
        this.isClick = true;
        this.overlaySer = new OverLayHiddenService();
        this.utils = this.injector.get(CommonUtils);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.setActiveItem();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.bodyRef.nativeElement.addEventListener('scroll', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const x = this.bodyRef.nativeElement.scrollLeft;
                /** @type {?} */
                const y = this.bodyRef.nativeElement.scrollTop;
                this.headerRef.nativeElement.scrollLeft = this.bodyRef.nativeElement.scrollLeft;
                this.calendarRef.closeDetailPanel();
                this.scrollChange.emit({ x, y });
            }));
        }));
        if (this.overlaySer) {
            this.overlaySer.registerMouseEvent(this.bodyRef.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (this.calendarRef.detailRef) {
                    if (this.calendarRef.detailRef.el.nativeElement.contains(e.target)) {
                        return;
                    }
                    if (e.type !== 'mousewheel' && this.isClick) {
                        if (this.calendarRef.viewType === 'week') {
                            if (e.target.closest('li') && e.target.closest('li').classList.contains('week-day-subject')) {
                                return;
                            }
                        }
                        if (this.calendarRef.viewType === 'day') {
                            if (e.target.closest('div.item-content')) {
                                return;
                            }
                        }
                    }
                    if (e.target.classList.contains('farris-modal') || e.target.closest('.farris-modal')) {
                        if (e.target.closest('farris-messager') && e.target.nodeName !== 'BUTTON') {
                            return;
                        }
                    }
                    this.calendarRef.closeDetailPanel();
                }
            }), { mouseUp: true });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlaySer) {
            this.overlaySer.destory(this.bodyRef.nativeElement);
            this.overlaySer = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.selectId && !changes.selectId.isFirstChange()) {
            this.setActiveItem();
        }
        if (changes.data && !changes.data.isFirstChange()) {
            this.setActiveItem();
        }
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    setActiveItem(id) { }
    /**
     * @param {?} data
     * @return {?}
     */
    getRoomData(data) {
        /** @type {?} */
        const roomid = this.utils.getValue(this.calendarRef.reserveInfoFields.placeid, data);
        /** @type {?} */
        const room = this.data.find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.id === roomid));
        if (room) {
            return room.data;
        }
        return null;
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSubjectClick($event, item) {
        $event.stopPropagation();
        if (!this.isClick) {
            this.calendarRef.closeDetailPanel();
            return;
        }
        if (this.calendarRef.viewType === 'week') {
            $event.target.scrollIntoViewIfNeeded();
        }
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this['clickTimer'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.activeItem = item;
            /** @type {?} */
            const room = this.getRoomData(item.data);
            this.itemClick.emit({ item, $event, room });
        }), this.calendarRef._CLICK_DELAY_);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    ondblClick($event) {
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this.activeItem = $event.item;
        /** @type {?} */
        const room = this.getRoomData($event.item.data);
        $event['room'] = room;
        this.itemDblClick.emit($event);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseDown($event) {
        this.currentMousePointX = Math.floor($event.screenX);
        this.currentMousePointY = Math.floor($event.screenY);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseUp($event) {
        this.isClick = this.currentMousePointX == Math.floor($event.screenX) && this.currentMousePointY == Math.floor($event.screenY);
    }
}
BaseViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'appointment-base-view',
                template: ''
            }] }
];
/** @nocollapse */
BaseViewComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: AppointmentCalendarComponent }
];
BaseViewComponent.propDecorators = {
    data: [{ type: Input }],
    selectId: [{ type: Input }],
    itemClick: [{ type: Output }],
    itemDblClick: [{ type: Output }],
    headerRef: [{ type: ViewChild, args: ['header',] }],
    bodyRef: [{ type: ViewChild, args: ['body',] }],
    scrollChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DayViewComponent extends BaseViewComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} calendarRef
     */
    constructor(injector, ngzone, calendarRef) {
        super(injector, ngzone, calendarRef);
        this.reservationTitle = '预订';
        this.cellClick = new EventEmitter();
        this.cells = new Array(23);
        this.render = null;
        this.render = this.injector.get(Renderer2, null);
    }
    /**
     * @param {?} item
     * @param {?=} typ
     * @return {?}
     */
    getCustomCls(item, typ = "cls") {
        /** @type {?} */
        let result = null;
        if (this.customCls) {
            const { cls, styles } = this.customCls(item);
            if (!cls && !styles && typ === "cls") {
                result = this.customCls(item);
            }
            else {
                if (typ == "cls") {
                    result = cls || null;
                }
                else {
                    result = styles || null;
                }
            }
        }
        // if (result && typ === 'styles') {
        //     Object.keys(result).forEach((n: any) => {
        //         if (result[n].indexOf('important') === -1) {
        //             result[n] = result[n] +' !important' ;
        //         }
        //     });
        // }
        return result;
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    setActiveItem(id) {
        /** @type {?} */
        let _id = id;
        if (!id) {
            _id = this.selectId;
        }
        if (_id) {
            this.activeItem = flatten(this.data.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.reserves))).find((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.id == _id));
        }
    }
    /**
     * @param {?} $event
     * @param {?} cellIndex
     * @param {?} roomInfo
     * @return {?}
     */
    onCellClick($event, cellIndex, roomInfo) {
        /** @type {?} */
        const _h = ('' + cellIndex).padStart(2, '0');
        /** @type {?} */
        const _endH = ('' + (cellIndex + 1)).padStart(2, '0');
        /** @type {?} */
        const p = {
            start: `${this.calendarRef["currentDateStr"]} ${_h}:00:00`,
            end: `${this.calendarRef["currentDateStr"]} ${_endH}:00:00`,
            place: roomInfo.data,
        };
        this.cellClick.emit(p);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseEnter($event) {
        $event.stopPropagation();
        /** @type {?} */
        const parentCell = $event.target['parentElement'].querySelector('.addnew');
        if (parentCell) {
            parentCell.style.opacity = 0;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseLeave($event) {
        $event.stopPropagation();
        /** @type {?} */
        const parentCell = $event.target['parentElement'].querySelector('.addnew');
        if (parentCell) {
            parentCell.removeAttribute('style');
        }
    }
}
DayViewComponent.decorators = [
    { type: Component, args: [{
                selector: "day-view",
                template: "<div class=\"header\" #header>\r\n\r\n    <div class=\"header-row\" [style.width.px]=\"calendarRef.rowWidth\">\r\n\r\n        <div class=\"header-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span class=\"time ml-2\">{{calendarRef.placeTitle}}</span>\r\n        </div>\r\n\r\n        <div class=\"header-cell time-cell\" style=\"width: 50px\">\r\n        </div>\r\n        <div class=\"header-cell time-cell\" >\r\n            <span class=\"time\">00:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">01:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">02:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">03:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">04:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">05:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">06:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">07:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">08:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">09:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">10:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">11:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">12:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">13:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">14:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">15:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">16:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">17:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">18:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">19:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">20:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">21:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">22:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\"  style=\"width: 100px\">\r\n            <span class=\"time\">23:00</span>\r\n        </div>\r\n           \r\n    </div>\r\n\r\n</div>\r\n<div class=\"body win11Scroll nobtn\" #body>\r\n\r\n    <div class=\"room-row\" *ngFor=\"let room of data\" [style.height.px]=\"calendarRef.rowHeight\"  [style.width.px]=\"calendarRef.rowWidth\"  [attr.id]=\"'row_'+room.id\">\r\n\r\n        <div class=\"room-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span *ngIf=\"!calendarRef.placeNameTemplate\">{{ room.data[calendarRef.placeNameField] }}</span>\r\n            <ng-container [ngTemplateOutlet]=\"calendarRef.placeNameTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: room.data}, item: room.data }\"></ng-container>\r\n        </div>\r\n        <div class=\"room-cell time-cell\" style=\"width: 50px\">\r\n        </div>\r\n        <div class=\"room-cell time-cell\">\r\n            <div class=\"item-content\" *ngFor=\"let item of room?.reserves\" \r\n                [item-dblclick]=\"item\" (dblclickHandler)=\"ondblClick($event)\"\r\n                [style.width.px]=\"item.position?.width\" [style.left.px]=\"item.position?.left\"\r\n                (click)=\"onSubjectClick($event, item)\" \r\n                (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\r\n                 (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\">\r\n                <div class=\"item-content-wrap\" [ngClass]=\"customCls && getCustomCls(item)\" [ngStyle]=\"customCls && getCustomCls(item, 'styles')\" [class.selected]=\"activeItem && activeItem.id === item.id\">\r\n                    <div class=\"room-subject p-2 gray\" *ngIf=\"!calendarRef.contentTemplate\">\r\n                        <dl> \r\n                            <dt>{{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.title, item.data) }}</dt>\r\n                            <dd class=\"other-info\">\r\n                                <span>\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.startDate, item.data) |dateformat: 'HH:mm'}}\r\n                                    ~\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.endDate, item.data) |dateformat: 'HH:mm'}}\r\n                                </span>\r\n                            </dd>\r\n                        </dl>\r\n                    </div>\r\n                    <ng-container [ngTemplateOutlet]=\"calendarRef.contentTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: item.data}, item: item.data }\"></ng-container>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <ng-container *ngIf=\"!(room.disableCells && room.disableCells.indexOf(0) > -1)\">\r\n\r\n                <div class=\"addnew\" (click)=\"onCellClick($event, 0, room)\">\r\n                    <span class=\"f-icon f-icon-add\" style=\"position: relative;\r\n                    top: 1px;margin-right: 3px;\"></span> {{reservationTitle}}\r\n                </div>\r\n\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"room-cell time-cell\" *ngFor=\"let c of cells; let i= index\" [class.isUsed]=\"room.disableCells && room.disableCells.indexOf(i+1) > -1 \" >\r\n\r\n\r\n            <ng-container *ngIf=\"!(room.disableCells && room.disableCells.indexOf(i+1) > -1)\">\r\n\r\n                <div class=\"addnew\" (click)=\"onCellClick($event, (i + 1), room)\">\r\n                    <span class=\"f-icon f-icon-add\" style=\"position: relative;\r\n                    top: 1px;\r\n                    margin-right: 3px;\"></span> {{reservationTitle}}\r\n                </div>\r\n\r\n            </ng-container>\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                styles: [`
        .rtv-container .main .room-row .time-cell .addnew{
  width: 100%;
  height: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
  border: 1px solid #2a87ff;
  background: #edf5ff;
  cursor: pointer;
  opacity: 0;
  transition: all 0.12s ease;
  color: #045dd3;
  font-size: 14px;
  border-radius: 4px;
}

.rtv-container .main .room-row .time-cell:hover>.addnew {
  opacity: 1;
}

        `]
            }] }
];
/** @nocollapse */
DayViewComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: AppointmentCalendarComponent }
];
DayViewComponent.propDecorators = {
    customCls: [{ type: Input }],
    reservationTitle: [{ type: Input }],
    cellClick: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class WeekViewComponent extends BaseViewComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} calendarRef
     */
    constructor(injector, ngzone, calendarRef) {
        super(injector, ngzone, calendarRef);
        this.weekDays = [];
    }
    /**
     * @param {?=} id
     * @return {?}
     */
    setActiveItem(id) {
        /** @type {?} */
        let _id = id;
        if (!id) {
            _id = this.selectId;
        }
        if (_id) {
            /** @type {?} */
            const arr = flatten(this.data.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => n.reserves.map((/**
             * @param {?} t
             * @return {?}
             */
            t => t.items)))));
            this.activeItem = flatten(arr).find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id == _id));
        }
    }
}
WeekViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'week-view',
                template: "<div class=\"header\" #header>\r\n\r\n    <div class=\"header-row\" [attr.style]=\"'width: ' +  width + 'px!important' | safe: 'style'\">\r\n\r\n        <div class=\"header-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span class=\"time ml-2\">{{calendarRef.placeTitle}}</span>\r\n        </div>\r\n\r\n        <div style=\"flex: 7;display: flex;\">\r\n            <div class=\"header-cell time-cell\" *ngFor=\"let item of weekDays\" title=\"{{ item.dateStr }}  {{ 'appointment.weeks.' + item.week | locale}}\" [style.width.px]=\"calendarRef.weekCellWidth\">\r\n                <span class=\"rtv-week-day\" [class.active]=\"item.isToday\">{{item.day}}</span> <span>\r\n                    {{ 'appointment.weeks.' + item.week | locale}}</span>\r\n            </div>\r\n        </div>\r\n       \r\n           \r\n    </div>\r\n\r\n</div>\r\n<div class=\"body win11Scroll nobtn\" #body style=\"padding-bottom: 15px\">\r\n\r\n    <div class=\"room-row\" *ngFor=\"let room of data\" [attr.style]=\"'width: ' +  width + 'px!important; height:' + calendarRef.weekRowHeight + 'px' | safe: 'style'\">\r\n\r\n        <div class=\"room-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span *ngIf=\"!calendarRef.placeNameTemplate\">{{ room.data[calendarRef.placeNameField] }}</span>\r\n            <ng-container [ngTemplateOutlet]=\"calendarRef.placeNameTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: room.data}, item: room.data }\"></ng-container>        \r\n        </div>\r\n        <div style=\"flex: 7;display: flex;\">\r\n            <div class=\"room-cell time-cell win11Scroll nobtn\" *ngFor=\"let res of room?.reserves\" style=\"align-items: start;\" [style.width.px]=\"calendarRef.weekCellWidth\">\r\n                <div style=\"width: 100%;overflow: hidden;\" class=\"p-1\" *ngIf=\"res.items && res.items.length\">\r\n                    <ul style=\"list-style: none;word-break: keep-all;\">\r\n                        <li class=\"week-day-subject mb-1\" *ngFor=\"let item of res.items\" \r\n                            [class.selected]=\"activeItem && activeItem.id === item.id\" (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\r\n                            (click)=\"onSubjectClick($event, item)\" [item-dblclick]=\"item\" (dblclickHandler)=\"ondblClick($event)\">\r\n                            <div style=\"display: flex;flex-direction: row;\" class=\"rtv-week-day-item\">\r\n                                <div style=\"flex-grow: 1;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;\" title=\"{{ calendarRef.reserveInfoFields.title | getvalue: item.data }}\">\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.title || 'title', item.data) }}\r\n                                </div>\r\n                                <div  style=\"flex: none;text-align: right; padding-left: 3px;\">\r\n                                    {{ item.data[calendarRef.reserveInfoFields.startDate] | dateformat: 'HH:mm'}}\r\n                                </div>\r\n                            </div>                        \r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
WeekViewComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: AppointmentCalendarComponent }
];
WeekViewComponent.propDecorators = {
    weekDays: [{ type: Input }],
    width: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ToolbarComponent {
    /**
     * @param {?} dateHlp
     * @param {?} injector
     * @param {?} calendarRef
     */
    constructor(dateHlp, injector, calendarRef) {
        this.dateHlp = dateHlp;
        this.injector = injector;
        this.calendarRef = calendarRef;
        this.dateChanged = new EventEmitter();
        this.placeChanged = new EventEmitter();
        this.currentDate = '';
        this.currentDateRange = '';
        this.currentWeekDays = [];
        this.currentViewType = 'day';
        this.places = [];
        this.placeIdField = 'id';
        this.placeNameField = 'name';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initDate();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rooms && !changes.rooms.isFirstChange()) {
            this.places = [{ [this.placeIdField]: '', [this.placeNameField]: '全部场所' }, ...this.places];
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() { }
    /**
     * @private
     * @return {?}
     */
    initDate() {
        if (this.currentViewType === 'week' && !this.currentDateRange) {
            this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date() });
            this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
        }
        else {
            if (!this.currentDate) {
                this.currentDate = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
            }
        }
        this._dateChanged();
    }
    /**
     * @param {?} $event
     * @param {?} viewType
     * @return {?}
     */
    changeCalendarView($event, viewType) {
        if ($event) {
            $event.stopPropagation();
        }
        this.currentViewType = viewType;
        this.initDate();
    }
    /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    onDateButtonClicked($event, typ) {
        /** @type {?} */
        let baselineDate = new Date();
        if (this.currentViewType === 'day') {
            if (this.currentDate) {
                baselineDate = new Date(this.currentDate);
            }
            /** @type {?} */
            let newDateStr = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
            if (typ === -1) {
                /** @type {?} */
                const d = this.dateHlp.formatTo(subDays(baselineDate, 1), 'yyyy-MM-dd');
                newDateStr = this.dateHlp.formatTo(d);
            }
            else if (typ === 1) {
                /** @type {?} */
                const d = this.dateHlp.formatTo(addDays(baselineDate, 1), 'yyyy-MM-dd');
                newDateStr = this.dateHlp.formatTo(d);
            }
            this.currentDate = newDateStr;
        }
        else {
            if (this.currentWeekDays && this.currentWeekDays.length) {
                baselineDate = this.currentWeekDays[4].date;
            }
            // 下周
            if (typ === 1) {
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate, range: 7 });
            }
            else if (typ === -1) { // 上周
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate, range: -7 });
            }
            else { // 当前周
                baselineDate = new Date();
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate });
            }
            this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
            // console.log(this.currentWeekDays);
        }
        this._dateChanged();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDateChanged($event) {
        /** @type {?} */
        let isChanged = false;
        if (this.currentViewType == 'week') {
            /** @type {?} */
            const _date = $event.split('~')[0];
            this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date(_date) });
            isChanged = this.currentDateRange !== $event;
        }
        else {
            isChanged = this.currentDate !== $event;
        }
        if (isChanged) {
            this._dateChanged($event);
        }
    }
    /**
     * @private
     * @param {?=} newDate
     * @return {?}
     */
    _dateChanged(newDate) {
        if (newDate) {
            if (this.currentViewType === 'day') {
                this.currentDate = newDate;
            }
            else {
                this.currentDateRange = newDate;
            }
        }
        this.dateChanged.emit({
            viewType: this.currentViewType,
            dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
            weekDays: this.currentWeekDays
        });
        this.calendarRef.closeDetailPanel();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPlaceSelectChanged($event) {
        const { data } = $event;
        this.placeChanged.emit({
            viewType: this.currentViewType,
            dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
            weekDays: this.currentWeekDays,
            room: data.id ? data : null
        });
    }
}
ToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'toolbar',
                template: "<div class=\"toolbar\" style=\"overflow-x: auto ;\">\r\n\r\n    <div class=\"view-type \">\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'day'\" (click)=\"changeCalendarView($event, 'day')\">{{'appointment.day'|locale}}</button>\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'week'\" (click)=\"changeCalendarView($event, 'week')\">{{'appointment.week'|locale}}</button>\r\n    </div>\r\n    <span class=\"line\"></span>\r\n    <div class=\"btns\">\r\n        <button class=\"btn-today\" (click)=\"onDateButtonClicked($event, 0)\">{{ currentViewType === 'day'? ('appointment.today'|locale ): ('appointment.thisWeek'|locale)}}</button>\r\n\r\n        <div class=\"btn-group\">\r\n            <button class=\"btn-prev\" (click)=\"onDateButtonClicked($event, -1)\" title=\"{{ currentViewType === 'day'? ('appointment.prevDay'|locale): ('appointment.prevWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-left\"></i>\r\n            </button>\r\n            <button class=\"btn-next\" (click)=\"onDateButtonClicked($event, 1)\" title=\"{{ currentViewType === 'day'? ('appointment.nextDay'|locale): ('appointment.nextWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-right\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inputs d-flex\">\r\n        <div class=\"datebox mr-4\" [style.width.px]=\"currentViewType === 'day'? 180 : 260\">\r\n            <farris-datepicker [ngModel]=\"currentDate\" [editable]=\"false\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" \r\n                placeholder=\"\u8BF7\u9009\u62E9\" *ngIf=\"currentViewType === 'day'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n            <farris-datepicker [ngModel]=\"currentDateRange\"  [editable]=\"false\" [dateRange]=\"true\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" [showType]=\"4\" \r\n                *ngIf=\"currentViewType === 'week'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n        </div>\r\n        <div class=\"roomlist-input\" style=\"width: 176px; display: none;\">\r\n            <farris-combo-list #cmb1 \r\n                [placeholder]=\"'appointment.datePlace'|locale\"\r\n                [enableClear]=\"true\"\r\n                [idField]=\"placeIdField\"\r\n                [textField]=\"placeNameField\"\r\n                [data]=\"places\" \r\n                [panelHeight]=\"260\"\r\n                [readonly]=\"false\"\r\n                [disabled]=\"false\"\r\n                [editable]=\"true\"\r\n                (selectChange)=\"onPlaceSelectChanged($event)\">\r\n            </farris-combo-list>\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ToolbarComponent.ctorParameters = () => [
    { type: DateTimeHelperService },
    { type: Injector },
    { type: AppointmentCalendarComponent }
];
ToolbarComponent.propDecorators = {
    dateChanged: [{ type: Output }],
    placeChanged: [{ type: Output }],
    currentViewType: [{ type: Input }],
    places: [{ type: Input }],
    placeIdField: [{ type: Input }],
    placeNameField: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ItemDblClickDirective {
    /**
     * @param {?} el
     */
    constructor(el) {
        this.el = el;
        this.dblclickHandler = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    ondblclick(event) {
        event.stopPropagation();
        this.dblclickHandler.emit({ item: this.data, $event: event });
    }
}
ItemDblClickDirective.decorators = [
    { type: Directive, args: [{ selector: '[item-dblclick]' },] }
];
/** @nocollapse */
ItemDblClickDirective.ctorParameters = () => [
    { type: ElementRef }
];
ItemDblClickDirective.propDecorators = {
    data: [{ type: Input, args: ['item-dblclick',] }],
    dblclickHandler: [{ type: Output }],
    ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AppointmentCalendarModule {
}
AppointmentCalendarModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    ToolbarComponent,
                    DayViewComponent,
                    WeekViewComponent,
                    AppointmentCalendarComponent,
                    ItemDblClickDirective,
                    ReserveDetailComponent,
                    BaseViewComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    FarrisDatePickerModule,
                    ComboListModule,
                    FarrisCommonModule.forRoot(),
                    DateHelperModule.forRoot(),
                    LocaleModule.forRoot(),
                    DataColumnModule.forRoot(),
                ],
                exports: [
                    ToolbarComponent,
                    DayViewComponent,
                    WeekViewComponent,
                    AppointmentCalendarComponent,
                    ItemDblClickDirective,
                    ReserveDetailComponent,
                    BaseViewComponent
                ],
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ItemDblClickDirective, AppointmentCalendarService, AppointmentCalendarComponent, AppointmentCalendarModule, DayViewComponent, WeekViewComponent, ToolbarComponent, ReserveDetailComponent, BaseViewComponent };

//# sourceMappingURL=farris-appointment-calendar.js.map