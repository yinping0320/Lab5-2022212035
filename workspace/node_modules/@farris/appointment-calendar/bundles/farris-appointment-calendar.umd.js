(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('@angular/common'), require('@angular/forms'), require('@farris/ui-combo-list'), require('@farris/ui-datepicker'), require('@farris/ui-common'), require('lodash-es'), require('@farris/ui-common/date'), require('date-fns'), require('@angular/core'), require('@farris/ui-locale'), require('@farris/ui-common/column')) :
    typeof define === 'function' && define.amd ? define('@farris/appointment-calendar', ['exports', 'rxjs', '@angular/common', '@angular/forms', '@farris/ui-combo-list', '@farris/ui-datepicker', '@farris/ui-common', 'lodash-es', '@farris/ui-common/date', 'date-fns', '@angular/core', '@farris/ui-locale', '@farris/ui-common/column'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['appointment-calendar'] = {}),global.rxjs,global.ng.common,global.ng.forms,global.uiComboList,global.uiDatepicker,global.uiCommon,global.lodashEs,global.date,global.dateFns,global.ng.core,global.uiLocale,global.column));
}(this, (function (exports,rxjs,common,forms,uiComboList,uiDatepicker,uiCommon,lodashEs,date,dateFns,core,uiLocale,column) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppointmentCalendarService = /** @class */ (function () {
        function AppointmentCalendarService() {
            this.cardBtnClick$ = new rxjs.Subject();
        }
        AppointmentCalendarService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AppointmentCalendarService.ctorParameters = function () { return []; };
        return AppointmentCalendarService;
    }());

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var APPOINTMENT_CALENDAR_LOCALES = {
        'en': {
            appointment: {
                today: 'Today',
                thisWeek: 'This week',
                day: 'Day',
                week: 'Week',
                prevDay: 'Prev day',
                prevWeek: 'Prev week',
                nextDay: 'Next day',
                nextWeek: 'Next week',
                dateFormat: 'yyyy-MM-dd',
                datePlace: 'Pleasy select a date.',
                weeks: { 一: 'Mon', 二: 'Tue', 三: 'Wed', 四: 'Thu', 五: 'Fri', 六: 'Sat', 日: 'Sun' },
                detail: {
                    edit: 'Edit',
                    del: 'Delete',
                    close: 'Close',
                    dateFormat: 'MM-dd'
                }
            }
        },
        'zh-CHS': {
            appointment: {
                today: '今天',
                thisWeek: '本周',
                day: '日',
                week: '周',
                prevDay: '前一天',
                prevWeek: '前一周',
                nextDay: '下一天',
                nextWeek: '下一周',
                dateFormat: 'yyyy年MM月dd日',
                datePlace: '请选择',
                weeks: { 一: '周一', 二: '周二', 三: '周三', 四: '周四', 五: '周五', 六: '周六', 日: '周日' },
                detail: {
                    edit: '编辑',
                    del: '删除',
                    close: '关闭',
                    dateFormat: 'MM月dd日'
                }
            }
        },
        'zh-CHT': {
            appointment: {
                today: '今天',
                thisWeek: '本周',
                day: '日',
                week: '周',
                prevDay: '前一天',
                prevWeek: '前一周',
                nextDay: '下一天',
                nextWeek: '下一周',
                dateFormat: 'yyyy年MM月dd日',
                datePlace: '請選擇',
                weeks: { 一: '周一', 二: '周二', 三: '周三', 四: '周四', 五: '周五', 六: '周六', 日: '周日' },
                detail: {
                    edit: '編輯',
                    del: '刪除',
                    close: '關閉',
                    dateFormat: 'MM月dd日'
                }
            }
        }
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppointmentCalendarComponent = /** @class */ (function () {
        function AppointmentCalendarComponent(injector, cd, ngZone, render, roomSer, dateHlp, elRef, utils, localeSer) {
            var _this = this;
            this.injector = injector;
            this.cd = cd;
            this.ngZone = ngZone;
            this.render = render;
            this.roomSer = roomSer;
            this.dateHlp = dateHlp;
            this.elRef = elRef;
            this.utils = utils;
            this.localeSer = localeSer;
            /**
             * 预定数据
             */
            this.reserveData = [];
            /**
             * 房间列表数据
             */
            this.placeItems = [];
            /**
             * 房间标识字段 默认 id
             */
            this.placeIdField = 'id';
            /**
             * 房间名称字段
             */
            this.placeNameField = 'name';
            /**
             * 预定地点全名称
             */
            this.placeFullNameField = '';
            /**
             * 预定时间字段
             */
            this.reserveInfoFields = {
                /**
                 * 预订标识字段
                 */
                idField: 'id',
                /**
                 * 开始时间字段
                 */
                startDate: 'start',
                /**
                 * 结束时间字段
                 */
                endDate: 'end',
                /**
                 * 对应房间ID 字段
                 */
                placeid: 'roomid',
                /**
                 * 预订主题名称字段
                 */
                title: 'title'
            };
            this.placeTitle = '名称';
            /**
             * 天视图行高， 默认 62px
             */
            this.rowHeight = 62;
            /**
             * 周视图行高，默认 85px
             */
            this.weekRowHeight = 85;
            /**
             * 周视图单元格宽度，默认 150px
             */
            this.weekCellWidth = 150;
            /**
             * 房间列宽度，默认 300px
             */
            this.placeNameWidth = 300;
            /**
             * 默认视图 day 日， week 周。 默认 day
             */
            this.viewType = 'day';
            /**
             * 日视图下开始时间
             */
            this.startTime = 7;
            /**
             * 选中预订信息ID
             */
            this.selectedId = '';
            /**
             * 详情卡片显示编辑按钮
             */
            this.showEditButton = true;
            /**
             * 详情卡片显示删除按钮
             */
            this.showDeleteButton = true;
            this.showCloseButton = true;
            /**
             * 详情卡片标题列宽度，默认 56px 显示为4个字
             */
            this.detailColumnWidth = 56;
            /**
             * 双击事件
             */
            this.itemDblClick = new core.EventEmitter();
            /**
             * 日视图，鼠标滑过空白单元格显示文本
             */
            this.reservationTitle = '预订';
            /**
             * 过滤事件
             */
            this.filterChange = new core.EventEmitter();
            /**
             * 选中事件
             */
            this.selectChange = new core.EventEmitter();
            /**
             * 卡片详情编辑事件
             */
            this.editHandler = new core.EventEmitter();
            /**
             * 卡片详情删除事件
             */
            this.removeHandler = new core.EventEmitter();
            /**
             * 清除选中项
             */
            this.clearSelected = new core.EventEmitter();
            /**
             * 日视图单元格点击事件
             */
            this.reservation = new core.EventEmitter();
            this.weekDays = [];
            this.groupData = [];
            this.currentDateRangeStr = '';
            this.currentDateStr = '';
            this.currentSelectItem = null;
            this.position = null;
            this.showDetail = false;
            this.detailCustomCls = null;
            this._CLICK_DELAY_ = 180;
            // 框架头高高度；
            this._frameHeaderHeight = 0;
            this.minWeekViewWidth = 0;
            this._currentScrollPos = { 'day': { x: null, y: 0 }, 'week': { x: null, y: 0 } };
            this.rowWidth = 2450;
            this.cardBtnClickSub = this.roomSer.cardBtnClick$.subscribe(( /**
             * @param {?} e
             * @return {?}
             */function (e) {
                _this.detailEventHandlers(e);
            }));
            this.localeSer.setLocaleData(APPOINTMENT_CALENDAR_LOCALES);
        }
        /**
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.groupData = this.mergeDate();
                this.showEditButton = !!this.editHandler.observers.length;
                this.showDeleteButton = !!this.removeHandler.observers.length;
                this.minWeekViewWidth = (this.weekCellWidth || 150) * 7 + this.placeNameWidth;
                this.rowWidth += this.placeNameWidth;
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.reserveData && !changes.reserveData.isFirstChange()) {
                    this.dataChanged();
                }
                if (changes.placeItems && !changes.placeItems.isFirstChange()) {
                    this.dataChanged();
                }
            };
        /**
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.cardBtnClickSub) {
                    this.cardBtnClickSub.unsubscribe();
                    this.cardBtnClickSub = null;
                }
            };
        /**
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.loadReserveData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.reserveData = data;
                this.dataChanged();
                this.cd.detectChanges();
            };
        /**
         * @param {?} data
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.loadPlaceData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                this.placeItems = data;
                this.dataChanged();
                this.cd.detectChanges();
            };
        /**
         * @private
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.dataChanged = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                this.groupData = this.mergeDate();
                if (this['CALENDAR_SCROLL_POSITION']) {
                    clearTimeout(this['CALENDAR_SCROLL_POSITION']);
                }
                this['CALENDAR_SCROLL_POSITION'] = setTimeout(( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var roomBodyEl = _this.elRef.nativeElement.querySelector('.body');
                    var _a = _this._currentScrollPos[_this.viewType] || { x: null, y: null }, x = _a.x, y = _a.y;
                    if (roomBodyEl) {
                        /** @type {?} */
                        var left = x;
                        if (_this.viewType === 'day' && x === null) {
                            left = _this.startTime * 100;
                        }
                        roomBodyEl.scrollLeft = left;
                        roomBodyEl.scrollTop = y || 0;
                        roomBodyEl.scrollTo(left, y || 0);
                    }
                }), 100);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onViewTypeChanged = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var viewType = $event.viewType, weekDays = $event.weekDays, dateValue = $event.dateValue, place = $event.place;
                this.viewType = viewType;
                this.weekDays = weekDays;
                if (this.viewType === 'day') {
                    this.currentDateStr = dateValue;
                }
                else {
                    this.currentDateRangeStr = dateValue;
                }
                this.dataChanged();
                this.filterChange.emit({ viewType: viewType, dateValue: dateValue, place: place });
                this.cd.detectChanges();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onPlaceSelected = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                // TODO: 房间切换后，客户端过滤房间列表
            };
        /**
         * @private
         * @param {?} reserves
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.getUsedCells = /**
         * @private
         * @param {?} reserves
         * @return {?}
         */
            function (reserves) {
                var _this = this;
                if (reserves && reserves.length) {
                    /** @type {?} */
                    var startField_1 = this.reserveInfoFields.startDate;
                    /** @type {?} */
                    var endField_1 = this.reserveInfoFields.endDate;
                    /** @type {?} */
                    var cells = reserves.map(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) {
                        /** @type {?} */
                        var startValue = _this.utils.getValue(startField_1, n.data);
                        /** @type {?} */
                        var _startTimes = _this.getTimes(startValue);
                        /** @type {?} */
                        var endValue = _this.utils.getValue(endField_1, n.data);
                        /** @type {?} */
                        var _endTimes = _this.getTimes(endValue);
                        /** @type {?} */
                        var beginIndex = _startTimes.hour;
                        /** @type {?} */
                        var endIndex = _endTimes.hour - 1;
                        // if (_endTimes.minute > 0) {
                        //     endIndex++;
                        // } else {
                        //     endIndex--;
                        // }
                        /** @type {?} */
                        var c = [];
                        for (var i = beginIndex - 1; i < endIndex; i++) {
                            c.push(i + 1);
                        }
                        return c;
                    }));
                    return lodashEs.flatten(cells);
                }
            };
        /**
         * @private
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.mergeDate = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.placeItems && this.placeItems.length) {
                    if (this.viewType === 'day') {
                        return this.placeItems.map(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) {
                            /** @type {?} */
                            var reserves = _this.reserveData.filter(( /**
                             * @param {?} d
                             * @return {?}
                             */function (d) {
                                return _this.utils.getValue(_this.reserveInfoFields.placeid, d) === _this.utils.getValue(_this.placeIdField, n) &&
                                    dateFns.isSameDay(new Date(_this.utils.getValue(_this.reserveInfoFields.startDate, d)), new Date(_this.currentDateStr));
                            })).map(( /**
                         * @param {?} r
                         * @return {?}
                         */function (r) {
                                return {
                                    data: r,
                                    id: r[_this.reserveInfoFields.idField],
                                    position: _this.getReservePositionInfo(r),
                                };
                            }));
                            return {
                                id: n[_this.placeIdField],
                                data: n,
                                reserves: reserves,
                                disableCells: _this.getUsedCells(reserves)
                            };
                        }));
                    }
                    else {
                        return this.placeItems.map(( /**
                         * @param {?} n
                         * @return {?}
                         */function (n) {
                            return {
                                id: n[_this.placeIdField],
                                data: n,
                                reserves: _this.weekDays.map(( /**
                                 * @param {?} weekday
                                 * @return {?}
                                 */function (weekday) {
                                    return {
                                        date: weekday,
                                        items: _this.reserveData.filter(( /**
                                         * @param {?} d
                                         * @return {?}
                                         */function (d) {
                                            return _this.utils.getValue(_this.reserveInfoFields.placeid, d) === _this.utils.getValue(_this.placeIdField, n) &&
                                                dateFns.isSameDay(new Date(_this.utils.getValue(_this.reserveInfoFields.startDate, d)), weekday.date);
                                        })).map(( /**
                                     * @param {?} r
                                     * @return {?}
                                     */function (r) {
                                            return {
                                                data: r,
                                                id: r[_this.reserveInfoFields.idField],
                                            };
                                        })).sort(( /**
                                         * @param {?} a
                                         * @param {?} b
                                         * @return {?}
                                         */function (a, b) {
                                            /** @type {?} */
                                            var r = _this.dateHlp.differenceInMinutes(new Date(_this.utils.getValue(_this.reserveInfoFields.startDate, a.data)), new Date(_this.utils.getValue(_this.reserveInfoFields.endDate, b.data)));
                                            return r > 0 ? 1 : r < 0 ? -1 : 0;
                                        }))
                                    };
                                }))
                            };
                        }));
                    }
                }
                return [];
            };
        /**
         * @param {?} dateStr
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.getTimes = /**
         * @param {?} dateStr
         * @return {?}
         */
            function (dateStr) {
                if (dateStr) {
                    /** @type {?} */
                    var _startDate = this.dateHlp.formatTo(dateStr, 'yyyy-MM-dd HH:mm:ss');
                    if (_startDate) {
                        /** @type {?} */
                        var startDate = new Date(_startDate);
                        /** @type {?} */
                        var hour = startDate.getHours();
                        /** @type {?} */
                        var minute = startDate.getMinutes();
                        return {
                            hour: hour, minute: minute, date: new Date(_startDate.split(' ')[0])
                        };
                    }
                }
                return null;
            };
        /**
         * @private
         * @param {?} reserveItem
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.getReservePositionInfo = /**
         * @private
         * @param {?} reserveItem
         * @return {?}
         */
            function (reserveItem) {
                /** @type {?} */
                var startField = this.reserveInfoFields.startDate;
                /** @type {?} */
                var endField = this.reserveInfoFields.endDate;
                /** @type {?} */
                var left = 0;
                /** @type {?} */
                var width = 0;
                /** @type {?} */
                var startDateStr = reserveItem[startField];
                /** @type {?} */
                var endDateStr = reserveItem[endField];
                if (startDateStr) {
                    /** @type {?} */
                    var _startTimes = this.getTimes(startDateStr);
                    if (_startTimes) {
                        var hour = _startTimes.hour, minute = _startTimes.minute;
                        left = (hour) * 100;
                        if (minute) {
                            left += minute / 60 * 100;
                        }
                        if (endDateStr) {
                            /** @type {?} */
                            var minutes = dateFns.differenceInMinutes(new Date(endDateStr), new Date(startDateStr));
                            width = minutes / 60 * 100;
                        }
                    }
                }
                return { left: left, width: width };
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onSelectChange = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.selectedId = $event.item.id;
                this.currentSelectItem = { room: $event.room, data: $event.item.data };
                /** @type {?} */
                var tar = null;
                if (this.viewType === 'week') {
                    tar = $event.$event.target.closest('li');
                }
                else {
                    tar = $event.$event.target.closest('.item-content');
                }
                this.getPositionForDetailPanel(tar);
                if (this.detailCls) {
                    this.detailCustomCls = this.detailCls($event.item);
                }
                this.showDetail = true;
                this.selectChange.emit($event);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onItemDblClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.selectedId = $event.item.id;
                this.currentSelectItem = { room: $event.room, data: $event.item.data };
                this.itemDblClick.emit($event);
            };
        /**
         * @param {?} reserveId
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.selectItem = /**
         * @param {?} reserveId
         * @return {?}
         */
            function (reserveId) {
                this.selectedId = reserveId;
                this.cd.detectChanges();
                if (this.selectedId === null || this.selectedId === undefined || this.selectedId === '') {
                    this.clearSelect();
                }
            };
        /**
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.clearSelect = /**
         * @return {?}
         */
            function () {
                this.selectedId = null;
                this.clearSelected.emit({ ins: this });
            };
        /**
         * @private
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.getFrameheaderHeight = /**
         * @private
         * @return {?}
         */
            function () {
                if (this._frameHeaderHeight) {
                    return this._frameHeaderHeight;
                }
                /** @type {?} */
                var tabset = document.querySelector('.framework-tab-origin.gw-container-tabset.tab-container');
                /** @type {?} */
                var h = 0;
                if (tabset) {
                    h += tabset.offsetHeight;
                }
                /** @type {?} */
                var frameHeader = document.querySelector('.gw-header--wrapper.framework-tool-origin');
                if (frameHeader) {
                    h += frameHeader.offsetHeight;
                }
                this._frameHeaderHeight = h;
                return this._frameHeaderHeight;
            };
        /**
         * @private
         * @param {?} target
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.getPositionForDetailPanel = /**
         * @private
         * @param {?} target
         * @return {?}
         */
            function (target) {
                var _a = target.getBoundingClientRect(), left = _a.left, top = _a.top, right = _a.right, bottom = _a.bottom, width = _a.width, height = _a.height;
                /** @type {?} */
                var panelSize = { width: 368, height: 436 };
                /** @type {?} */
                var _left = left;
                /** @type {?} */
                var _top = top;
                /** @type {?} */
                var _right = window.innerWidth - right;
                /** @type {?} */
                var _bottom = window.innerHeight - bottom;
                if (_left > _right) {
                    if (_left > panelSize.width) {
                        _left = _left - panelSize.width;
                    }
                    else {
                        if (window.innerWidth - left > panelSize.width) {
                            _left = left;
                        }
                        else {
                            if (right > panelSize.width) {
                                _left = right - panelSize.width;
                            }
                            else {
                                _left = (window.innerWidth - panelSize.width) / 2;
                            }
                        }
                    }
                }
                else {
                    if (_right > panelSize.width) {
                        _left = right;
                    }
                    else {
                        if (right > panelSize.width) {
                            _left = left;
                        }
                        else {
                            _left = (window.innerWidth - panelSize.width) / 2;
                        }
                    }
                }
                if (_top > _bottom) {
                    if (_top > panelSize.height) {
                        if (left > panelSize.width || _right > panelSize.width) {
                            if (window.innerHeight - _top < height + 40) {
                                _top = window.innerHeight - panelSize.height - 20;
                            }
                            else {
                                _top = top - panelSize.height + height + 40;
                                if (_top < this.getFrameheaderHeight()) {
                                    _top = this.getFrameheaderHeight() + 10;
                                }
                            }
                        }
                        else {
                            _top = top - panelSize.height;
                        }
                    }
                    else {
                        _top = 10 + this.getFrameheaderHeight();
                    }
                }
                else {
                    if (_bottom > panelSize.height) {
                        if (_right > panelSize.width || left > panelSize.width) {
                            _top = bottom - height - 40;
                        }
                        else {
                            _top = bottom;
                        }
                    }
                    else {
                        _top = 10 + this.getFrameheaderHeight();
                    }
                }
                this.position = { left: _left, top: _top };
            };
        /**
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.closeDetailPanel = /**
         * @return {?}
         */
            function () {
                this.roomSer.cardBtnClick$.next({ action: 'close' });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onAddNew = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.reservation.emit($event);
            };
        /**
         * @param {?} $event
         * @param {?} typ
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.onScrollChange = /**
         * @param {?} $event
         * @param {?} typ
         * @return {?}
         */
            function ($event, typ) {
                this._currentScrollPos[this.viewType] = __assign({}, $event, { type: typ });
            };
        /**
         * @private
         * @param {?} e
         * @return {?}
         */
        AppointmentCalendarComponent.prototype.detailEventHandlers = /**
         * @private
         * @param {?} e
         * @return {?}
         */
            function (e) {
                var action = e.action, item = e.item, $event = e.$event;
                /** @type {?} */
                var p = null;
                if (item) {
                    p = { item: { data: item, id: this.utils.getValue(this.reserveInfoFields.idField, item) } };
                }
                switch (action) {
                    case 'edit':
                        this.editHandler.emit(p);
                        break;
                    case 'del':
                        this.removeHandler.emit(p);
                        break;
                    case 'close':
                        this.showDetail = false;
                        break;
                }
            };
        AppointmentCalendarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "farris-appointment-calendar",
                        template: "<div class=\"rtv-container\" resizeObserver (resize)=\"closeDetailPanel()\" [class.rtv-container-week]=\"viewType === 'week'\">\r\n    <toolbar (placeChanged)=\"onPlaceSelected($event)\" (dateChanged)=\"onViewTypeChanged($event)\" [currentViewType]=\"viewType\" [places]=\"placeItems\"></toolbar>\r\n    <div class=\"main\" style=\"position:relative\" #viewContainer>\r\n        <!-- <div style=\"border-right: 0.5px solid #0e6ded;height: 100%;position: absolute;left: 230px;width: 1px;z-index: 99;\"></div> -->\r\n\r\n        <day-view [data]=\"groupData\" class=\"h-100 d-flex flex-column\" *ngIf=\"viewType === 'day'\" [customCls]=\"dayViewCls\" [reservationTitle]=\"reservationTitle\"\r\n         (itemClick)=\"onSelectChange($event)\" (itemDblClick)=\"onItemDblClick($event)\" [selectId]=\"selectedId\" (cellClick)=\"onAddNew($event)\" (scrollChange)=\"onScrollChange($event, 'day')\"></day-view>\r\n        <week-view [data]=\"groupData\" class=\"h-100 d-flex flex-column\" *ngIf=\"viewType === 'week'\" [weekDays]=\"weekDays\" (scrollChange)=\"onScrollChange($event, 'week')\"\r\n         (itemClick)=\"onSelectChange($event)\" (itemDblClick)=\"onItemDblClick($event)\" [width]=\"viewContainer.offsetWidth < minWeekViewWidth ? minWeekViewWidth: viewContainer.offsetWidth\" [selectId]=\"selectedId\"></week-view>\r\n    </div>\r\n</div>\r\n\r\n<reserve-detail *ngIf=\"showDetail\" #detailRef\r\n    [data]=\"currentSelectItem?.data\"\r\n    [position]=\"position\"\r\n    [detailTemplate]=\"detailTemplate\"\r\n    [columns]=\"detailColumns\"\r\n    [placeInfo]=\"currentSelectItem?.room\"\r\n    [placeFieldConfigs]=\"{ name: placeNameField, fullName: placeFullNameField, id: placeIdField }\"\r\n    [fieldConfigs]=\"reserveInfoFields\"\r\n    [badgeTemplate]=\"detailBadgeTemplate\"\r\n    [customCls]=\"detailCustomCls\"\r\n    [showCloseButton]=\"showCloseButton\"\r\n    [showDeleteButton]=\"showDeleteButton\"\r\n    [showEditButton]=\"showEditButton\"\r\n    [toolbarButtons]=\"detailToolbars\"\r\n    [detailColumnWidth]=\"detailColumnWidth\"></reserve-detail>",
                        // styleUrls: ['./appointment-calendar.component.css'],
                        providers: [
                            AppointmentCalendarService
                        ],
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        AppointmentCalendarComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.ChangeDetectorRef },
                { type: core.NgZone },
                { type: core.Renderer2 },
                { type: AppointmentCalendarService },
                { type: date.DateTimeHelperService },
                { type: core.ElementRef },
                { type: uiCommon.CommonUtils },
                { type: uiLocale.LocaleService }
            ];
        };
        AppointmentCalendarComponent.propDecorators = {
            reserveData: [{ type: core.Input }],
            placeItems: [{ type: core.Input }],
            placeIdField: [{ type: core.Input }],
            placeNameField: [{ type: core.Input }],
            placeFullNameField: [{ type: core.Input }],
            reserveInfoFields: [{ type: core.Input }],
            roomNameFormatter: [{ type: core.Input }],
            placeNameTemplate: [{ type: core.Input }],
            contentTemplate: [{ type: core.Input }],
            detailTemplate: [{ type: core.Input }],
            detailBadgeTemplate: [{ type: core.Input }],
            detailCls: [{ type: core.Input }],
            dayViewCls: [{ type: core.Input }],
            placeTitle: [{ type: core.Input }],
            rowHeight: [{ type: core.Input }],
            weekRowHeight: [{ type: core.Input }],
            weekCellWidth: [{ type: core.Input }],
            placeNameWidth: [{ type: core.Input }],
            viewType: [{ type: core.Input }],
            startTime: [{ type: core.Input }],
            selectedId: [{ type: core.Input }],
            detailColumns: [{ type: core.Input }],
            showEditButton: [{ type: core.Input }],
            showDeleteButton: [{ type: core.Input }],
            showCloseButton: [{ type: core.Input }],
            detailToolbars: [{ type: core.Input }],
            detailColumnWidth: [{ type: core.Input }],
            itemDblClick: [{ type: core.Output }],
            reservationTitle: [{ type: core.Input }],
            filterChange: [{ type: core.Output }],
            selectChange: [{ type: core.Output }],
            editHandler: [{ type: core.Output }],
            removeHandler: [{ type: core.Output }],
            clearSelected: [{ type: core.Output }],
            reservation: [{ type: core.Output }],
            detailRef: [{ type: core.ViewChild, args: ['detailRef',] }]
        };
        return AppointmentCalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var BaseViewComponent = /** @class */ (function () {
        function BaseViewComponent(injector, ngzone, calendarRef) {
            this.injector = injector;
            this.ngzone = ngzone;
            this.calendarRef = calendarRef;
            this.selectId = '';
            this.itemClick = new core.EventEmitter();
            this.itemDblClick = new core.EventEmitter();
            this.scrollChange = new core.EventEmitter();
            this.activeItem = null;
            this.currentMousePointX = 0;
            this.currentMousePointY = 0;
            this.isClick = true;
            this.overlaySer = new uiCommon.OverLayHiddenService();
            this.utils = this.injector.get(uiCommon.CommonUtils);
        }
        /**
         * @return {?}
         */
        BaseViewComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.setActiveItem();
            };
        /**
         * @return {?}
         */
        BaseViewComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngzone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    _this.bodyRef.nativeElement.addEventListener('scroll', ( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        /** @type {?} */
                        var x = _this.bodyRef.nativeElement.scrollLeft;
                        /** @type {?} */
                        var y = _this.bodyRef.nativeElement.scrollTop;
                        _this.headerRef.nativeElement.scrollLeft = _this.bodyRef.nativeElement.scrollLeft;
                        _this.calendarRef.closeDetailPanel();
                        _this.scrollChange.emit({ x: x, y: y });
                    }));
                }));
                if (this.overlaySer) {
                    this.overlaySer.registerMouseEvent(this.bodyRef.nativeElement, ( /**
                     * @param {?} e
                     * @return {?}
                     */function (e) {
                        if (_this.calendarRef.detailRef) {
                            if (_this.calendarRef.detailRef.el.nativeElement.contains(e.target)) {
                                return;
                            }
                            if (e.type !== 'mousewheel' && _this.isClick) {
                                if (_this.calendarRef.viewType === 'week') {
                                    if (e.target.closest('li') && e.target.closest('li').classList.contains('week-day-subject')) {
                                        return;
                                    }
                                }
                                if (_this.calendarRef.viewType === 'day') {
                                    if (e.target.closest('div.item-content')) {
                                        return;
                                    }
                                }
                            }
                            if (e.target.classList.contains('farris-modal') || e.target.closest('.farris-modal')) {
                                if (e.target.closest('farris-messager') && e.target.nodeName !== 'BUTTON') {
                                    return;
                                }
                            }
                            _this.calendarRef.closeDetailPanel();
                        }
                    }), { mouseUp: true });
                }
            };
        /**
         * @return {?}
         */
        BaseViewComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.overlaySer) {
                    this.overlaySer.destory(this.bodyRef.nativeElement);
                    this.overlaySer = null;
                }
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        BaseViewComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                if (changes.selectId && !changes.selectId.isFirstChange()) {
                    this.setActiveItem();
                }
                if (changes.data && !changes.data.isFirstChange()) {
                    this.setActiveItem();
                }
            };
        /**
         * @param {?=} id
         * @return {?}
         */
        BaseViewComponent.prototype.setActiveItem = /**
         * @param {?=} id
         * @return {?}
         */
            function (id) { };
        /**
         * @param {?} data
         * @return {?}
         */
        BaseViewComponent.prototype.getRoomData = /**
         * @param {?} data
         * @return {?}
         */
            function (data) {
                /** @type {?} */
                var roomid = this.utils.getValue(this.calendarRef.reserveInfoFields.placeid, data);
                /** @type {?} */
                var room = this.data.find(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) { return n.id === roomid; }));
                if (room) {
                    return room.data;
                }
                return null;
            };
        /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
        BaseViewComponent.prototype.onSubjectClick = /**
         * @param {?} $event
         * @param {?} item
         * @return {?}
         */
            function ($event, item) {
                var _this = this;
                $event.stopPropagation();
                if (!this.isClick) {
                    this.calendarRef.closeDetailPanel();
                    return;
                }
                if (this.calendarRef.viewType === 'week') {
                    $event.target.scrollIntoViewIfNeeded();
                }
                if (this['clickTimer']) {
                    clearTimeout(this['clickTimer']);
                }
                this['clickTimer'] = setTimeout(( /**
                 * @return {?}
                 */function () {
                    _this.activeItem = item;
                    /** @type {?} */
                    var room = _this.getRoomData(item.data);
                    _this.itemClick.emit({ item: item, $event: $event, room: room });
                }), this.calendarRef._CLICK_DELAY_);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BaseViewComponent.prototype.ondblClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this['clickTimer']) {
                    clearTimeout(this['clickTimer']);
                }
                this.activeItem = $event.item;
                /** @type {?} */
                var room = this.getRoomData($event.item.data);
                $event['room'] = room;
                this.itemDblClick.emit($event);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BaseViewComponent.prototype.onMouseDown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.currentMousePointX = Math.floor($event.screenX);
                this.currentMousePointY = Math.floor($event.screenY);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        BaseViewComponent.prototype.onMouseUp = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.isClick = this.currentMousePointX == Math.floor($event.screenX) && this.currentMousePointY == Math.floor($event.screenY);
            };
        BaseViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'appointment-base-view',
                        template: ''
                    }] }
        ];
        /** @nocollapse */
        BaseViewComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.NgZone },
                { type: AppointmentCalendarComponent }
            ];
        };
        BaseViewComponent.propDecorators = {
            data: [{ type: core.Input }],
            selectId: [{ type: core.Input }],
            itemClick: [{ type: core.Output }],
            itemDblClick: [{ type: core.Output }],
            headerRef: [{ type: core.ViewChild, args: ['header',] }],
            bodyRef: [{ type: core.ViewChild, args: ['body',] }],
            scrollChange: [{ type: core.Output }]
        };
        return BaseViewComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DayViewComponent = /** @class */ (function (_super) {
        __extends(DayViewComponent, _super);
        function DayViewComponent(injector, ngzone, calendarRef) {
            var _this = _super.call(this, injector, ngzone, calendarRef) || this;
            _this.reservationTitle = '预订';
            _this.cellClick = new core.EventEmitter();
            _this.cells = new Array(23);
            _this.render = null;
            _this.render = _this.injector.get(core.Renderer2, null);
            return _this;
        }
        /**
         * @param {?} item
         * @param {?=} typ
         * @return {?}
         */
        DayViewComponent.prototype.getCustomCls = /**
         * @param {?} item
         * @param {?=} typ
         * @return {?}
         */
            function (item, typ) {
                if (typ === void 0) {
                    typ = "cls";
                }
                /** @type {?} */
                var result = null;
                if (this.customCls) {
                    var _a = this.customCls(item), cls = _a.cls, styles = _a.styles;
                    if (!cls && !styles && typ === "cls") {
                        result = this.customCls(item);
                    }
                    else {
                        if (typ == "cls") {
                            result = cls || null;
                        }
                        else {
                            result = styles || null;
                        }
                    }
                }
                // if (result && typ === 'styles') {
                //     Object.keys(result).forEach((n: any) => {
                //         if (result[n].indexOf('important') === -1) {
                //             result[n] = result[n] +' !important' ;
                //         }
                //     });
                // }
                return result;
            };
        /**
         * @param {?=} id
         * @return {?}
         */
        DayViewComponent.prototype.setActiveItem = /**
         * @param {?=} id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var _id = id;
                if (!id) {
                    _id = this.selectId;
                }
                if (_id) {
                    this.activeItem = lodashEs.flatten(this.data.map(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.reserves; }))).find(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.id == _id; }));
                }
            };
        /**
         * @param {?} $event
         * @param {?} cellIndex
         * @param {?} roomInfo
         * @return {?}
         */
        DayViewComponent.prototype.onCellClick = /**
         * @param {?} $event
         * @param {?} cellIndex
         * @param {?} roomInfo
         * @return {?}
         */
            function ($event, cellIndex, roomInfo) {
                /** @type {?} */
                var _h = ('' + cellIndex).padStart(2, '0');
                /** @type {?} */
                var _endH = ('' + (cellIndex + 1)).padStart(2, '0');
                /** @type {?} */
                var p = {
                    start: this.calendarRef["currentDateStr"] + " " + _h + ":00:00",
                    end: this.calendarRef["currentDateStr"] + " " + _endH + ":00:00",
                    place: roomInfo.data,
                };
                this.cellClick.emit(p);
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        DayViewComponent.prototype.onMouseEnter = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                /** @type {?} */
                var parentCell = $event.target['parentElement'].querySelector('.addnew');
                if (parentCell) {
                    parentCell.style.opacity = 0;
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        DayViewComponent.prototype.onMouseLeave = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                $event.stopPropagation();
                /** @type {?} */
                var parentCell = $event.target['parentElement'].querySelector('.addnew');
                if (parentCell) {
                    parentCell.removeAttribute('style');
                }
            };
        DayViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: "day-view",
                        template: "<div class=\"header\" #header>\r\n\r\n    <div class=\"header-row\" [style.width.px]=\"calendarRef.rowWidth\">\r\n\r\n        <div class=\"header-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span class=\"time ml-2\">{{calendarRef.placeTitle}}</span>\r\n        </div>\r\n\r\n        <div class=\"header-cell time-cell\" style=\"width: 50px\">\r\n        </div>\r\n        <div class=\"header-cell time-cell\" >\r\n            <span class=\"time\">00:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">01:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">02:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">03:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">04:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">05:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">06:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">07:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">08:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">09:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">10:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">11:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">12:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">13:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">14:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">15:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">16:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">17:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">18:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">19:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">20:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">21:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\">\r\n            <span class=\"time\">22:00</span>\r\n        </div>\r\n        <div class=\"header-cell time-cell\"  style=\"width: 100px\">\r\n            <span class=\"time\">23:00</span>\r\n        </div>\r\n           \r\n    </div>\r\n\r\n</div>\r\n<div class=\"body win11Scroll nobtn\" #body>\r\n\r\n    <div class=\"room-row\" *ngFor=\"let room of data\" [style.height.px]=\"calendarRef.rowHeight\"  [style.width.px]=\"calendarRef.rowWidth\"  [attr.id]=\"'row_'+room.id\">\r\n\r\n        <div class=\"room-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span *ngIf=\"!calendarRef.placeNameTemplate\">{{ room.data[calendarRef.placeNameField] }}</span>\r\n            <ng-container [ngTemplateOutlet]=\"calendarRef.placeNameTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: room.data}, item: room.data }\"></ng-container>\r\n        </div>\r\n        <div class=\"room-cell time-cell\" style=\"width: 50px\">\r\n        </div>\r\n        <div class=\"room-cell time-cell\">\r\n            <div class=\"item-content\" *ngFor=\"let item of room?.reserves\" \r\n                [item-dblclick]=\"item\" (dblclickHandler)=\"ondblClick($event)\"\r\n                [style.width.px]=\"item.position?.width\" [style.left.px]=\"item.position?.left\"\r\n                (click)=\"onSubjectClick($event, item)\" \r\n                (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\r\n                 (mouseenter)=\"onMouseEnter($event)\" (mouseleave)=\"onMouseLeave($event)\">\r\n                <div class=\"item-content-wrap\" [ngClass]=\"customCls && getCustomCls(item)\" [ngStyle]=\"customCls && getCustomCls(item, 'styles')\" [class.selected]=\"activeItem && activeItem.id === item.id\">\r\n                    <div class=\"room-subject p-2 gray\" *ngIf=\"!calendarRef.contentTemplate\">\r\n                        <dl> \r\n                            <dt>{{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.title, item.data) }}</dt>\r\n                            <dd class=\"other-info\">\r\n                                <span>\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.startDate, item.data) |dateformat: 'HH:mm'}}\r\n                                    ~\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.endDate, item.data) |dateformat: 'HH:mm'}}\r\n                                </span>\r\n                            </dd>\r\n                        </dl>\r\n                    </div>\r\n                    <ng-container [ngTemplateOutlet]=\"calendarRef.contentTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: item.data}, item: item.data }\"></ng-container>\r\n                </div>\r\n            </div>\r\n\r\n\r\n            <ng-container *ngIf=\"!(room.disableCells && room.disableCells.indexOf(0) > -1)\">\r\n\r\n                <div class=\"addnew\" (click)=\"onCellClick($event, 0, room)\">\r\n                    <span class=\"f-icon f-icon-add\" style=\"position: relative;\r\n                    top: 1px;margin-right: 3px;\"></span> {{reservationTitle}}\r\n                </div>\r\n\r\n            </ng-container>\r\n        </div>\r\n        <div class=\"room-cell time-cell\" *ngFor=\"let c of cells; let i= index\" [class.isUsed]=\"room.disableCells && room.disableCells.indexOf(i+1) > -1 \" >\r\n\r\n\r\n            <ng-container *ngIf=\"!(room.disableCells && room.disableCells.indexOf(i+1) > -1)\">\r\n\r\n                <div class=\"addnew\" (click)=\"onCellClick($event, (i + 1), room)\">\r\n                    <span class=\"f-icon f-icon-add\" style=\"position: relative;\r\n                    top: 1px;\r\n                    margin-right: 3px;\"></span> {{reservationTitle}}\r\n                </div>\r\n\r\n            </ng-container>\r\n\r\n        </div>\r\n    </div>\r\n\r\n</div>\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n        .rtv-container .main .room-row .time-cell .addnew{\n  width: 100%;\n  height: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  border: 1px solid #2a87ff;\n  background: #edf5ff;\n  cursor: pointer;\n  opacity: 0;\n  transition: all 0.12s ease;\n  color: #045dd3;\n  font-size: 14px;\n  border-radius: 4px;\n}\n\n.rtv-container .main .room-row .time-cell:hover>.addnew {\n  opacity: 1;\n}\n\n        "]
                    }] }
        ];
        /** @nocollapse */
        DayViewComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.NgZone },
                { type: AppointmentCalendarComponent }
            ];
        };
        DayViewComponent.propDecorators = {
            customCls: [{ type: core.Input }],
            reservationTitle: [{ type: core.Input }],
            cellClick: [{ type: core.Output }]
        };
        return DayViewComponent;
    }(BaseViewComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var WeekViewComponent = /** @class */ (function (_super) {
        __extends(WeekViewComponent, _super);
        function WeekViewComponent(injector, ngzone, calendarRef) {
            var _this = _super.call(this, injector, ngzone, calendarRef) || this;
            _this.weekDays = [];
            return _this;
        }
        /**
         * @param {?=} id
         * @return {?}
         */
        WeekViewComponent.prototype.setActiveItem = /**
         * @param {?=} id
         * @return {?}
         */
            function (id) {
                /** @type {?} */
                var _id = id;
                if (!id) {
                    _id = this.selectId;
                }
                if (_id) {
                    /** @type {?} */
                    var arr = lodashEs.flatten(this.data.map(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) {
                        return n.reserves.map(( /**
                         * @param {?} t
                         * @return {?}
                         */function (t) { return t.items; }));
                    })));
                    this.activeItem = lodashEs.flatten(arr).find(( /**
                     * @param {?} n
                     * @return {?}
                     */function (n) { return n.id == _id; }));
                }
            };
        WeekViewComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'week-view',
                        template: "<div class=\"header\" #header>\r\n\r\n    <div class=\"header-row\" [attr.style]=\"'width: ' +  width + 'px!important' | safe: 'style'\">\r\n\r\n        <div class=\"header-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span class=\"time ml-2\">{{calendarRef.placeTitle}}</span>\r\n        </div>\r\n\r\n        <div style=\"flex: 7;display: flex;\">\r\n            <div class=\"header-cell time-cell\" *ngFor=\"let item of weekDays\" title=\"{{ item.dateStr }}  {{ 'appointment.weeks.' + item.week | locale}}\" [style.width.px]=\"calendarRef.weekCellWidth\">\r\n                <span class=\"rtv-week-day\" [class.active]=\"item.isToday\">{{item.day}}</span> <span>\r\n                    {{ 'appointment.weeks.' + item.week | locale}}</span>\r\n            </div>\r\n        </div>\r\n       \r\n           \r\n    </div>\r\n\r\n</div>\r\n<div class=\"body win11Scroll nobtn\" #body style=\"padding-bottom: 15px\">\r\n\r\n    <div class=\"room-row\" *ngFor=\"let room of data\" [attr.style]=\"'width: ' +  width + 'px!important; height:' + calendarRef.weekRowHeight + 'px' | safe: 'style'\">\r\n\r\n        <div class=\"room-cell roomname fixed-left\" [style.width.px]=\"calendarRef.placeNameWidth\">\r\n            <span *ngIf=\"!calendarRef.placeNameTemplate\">{{ room.data[calendarRef.placeNameField] }}</span>\r\n            <ng-container [ngTemplateOutlet]=\"calendarRef.placeNameTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: room.data}, item: room.data }\"></ng-container>        \r\n        </div>\r\n        <div style=\"flex: 7;display: flex;\">\r\n            <div class=\"room-cell time-cell win11Scroll nobtn\" *ngFor=\"let res of room?.reserves\" style=\"align-items: start;\" [style.width.px]=\"calendarRef.weekCellWidth\">\r\n                <div style=\"width: 100%;overflow: hidden;\" class=\"p-1\" *ngIf=\"res.items && res.items.length\">\r\n                    <ul style=\"list-style: none;word-break: keep-all;\">\r\n                        <li class=\"week-day-subject mb-1\" *ngFor=\"let item of res.items\" \r\n                            [class.selected]=\"activeItem && activeItem.id === item.id\" (mousedown)=\"onMouseDown($event)\" (mouseup)=\"onMouseUp($event)\"\r\n                            (click)=\"onSubjectClick($event, item)\" [item-dblclick]=\"item\" (dblclickHandler)=\"ondblClick($event)\">\r\n                            <div style=\"display: flex;flex-direction: row;\" class=\"rtv-week-day-item\">\r\n                                <div style=\"flex-grow: 1;overflow: hidden;text-overflow: ellipsis;white-space: nowrap;\" title=\"{{ calendarRef.reserveInfoFields.title | getvalue: item.data }}\">\r\n                                    {{ calendarRef.utils.getValue(calendarRef.reserveInfoFields.title || 'title', item.data) }}\r\n                                </div>\r\n                                <div  style=\"flex: none;text-align: right; padding-left: 3px;\">\r\n                                    {{ item.data[calendarRef.reserveInfoFields.startDate] | dateformat: 'HH:mm'}}\r\n                                </div>\r\n                            </div>                        \r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    </div>\r\n\r\n</div>\r\n",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        WeekViewComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: core.NgZone },
                { type: AppointmentCalendarComponent }
            ];
        };
        WeekViewComponent.propDecorators = {
            weekDays: [{ type: core.Input }],
            width: [{ type: core.Input }]
        };
        return WeekViewComponent;
    }(BaseViewComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ToolbarComponent = /** @class */ (function () {
        function ToolbarComponent(dateHlp, injector, calendarRef) {
            this.dateHlp = dateHlp;
            this.injector = injector;
            this.calendarRef = calendarRef;
            this.dateChanged = new core.EventEmitter();
            this.placeChanged = new core.EventEmitter();
            this.currentDate = '';
            this.currentDateRange = '';
            this.currentWeekDays = [];
            this.currentViewType = 'day';
            this.places = [];
            this.placeIdField = 'id';
            this.placeNameField = 'name';
        }
        /**
         * @return {?}
         */
        ToolbarComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initDate();
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        ToolbarComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                var _a;
                if (changes.rooms && !changes.rooms.isFirstChange()) {
                    this.places = __spread([(_a = {}, _a[this.placeIdField] = '', _a[this.placeNameField] = '全部场所', _a)], this.places);
                }
            };
        /**
         * @return {?}
         */
        ToolbarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @private
         * @return {?}
         */
        ToolbarComponent.prototype.initDate = /**
         * @private
         * @return {?}
         */
            function () {
                if (this.currentViewType === 'week' && !this.currentDateRange) {
                    this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date() });
                    this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
                }
                else {
                    if (!this.currentDate) {
                        this.currentDate = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
                    }
                }
                this._dateChanged();
            };
        /**
         * @param {?} $event
         * @param {?} viewType
         * @return {?}
         */
        ToolbarComponent.prototype.changeCalendarView = /**
         * @param {?} $event
         * @param {?} viewType
         * @return {?}
         */
            function ($event, viewType) {
                if ($event) {
                    $event.stopPropagation();
                }
                this.currentViewType = viewType;
                this.initDate();
            };
        /**
         * @param {?} $event
         * @param {?} typ
         * @return {?}
         */
        ToolbarComponent.prototype.onDateButtonClicked = /**
         * @param {?} $event
         * @param {?} typ
         * @return {?}
         */
            function ($event, typ) {
                /** @type {?} */
                var baselineDate = new Date();
                if (this.currentViewType === 'day') {
                    if (this.currentDate) {
                        baselineDate = new Date(this.currentDate);
                    }
                    /** @type {?} */
                    var newDateStr = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
                    if (typ === -1) {
                        /** @type {?} */
                        var d = this.dateHlp.formatTo(dateFns.subDays(baselineDate, 1), 'yyyy-MM-dd');
                        newDateStr = this.dateHlp.formatTo(d);
                    }
                    else if (typ === 1) {
                        /** @type {?} */
                        var d = this.dateHlp.formatTo(dateFns.addDays(baselineDate, 1), 'yyyy-MM-dd');
                        newDateStr = this.dateHlp.formatTo(d);
                    }
                    this.currentDate = newDateStr;
                }
                else {
                    if (this.currentWeekDays && this.currentWeekDays.length) {
                        baselineDate = this.currentWeekDays[4].date;
                    }
                    // 下周
                    if (typ === 1) {
                        this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate, range: 7 });
                    }
                    else if (typ === -1) { // 上周
                        this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate, range: -7 });
                    }
                    else { // 当前周
                        baselineDate = new Date();
                        this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate });
                    }
                    this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
                    // console.log(this.currentWeekDays);
                }
                this._dateChanged();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ToolbarComponent.prototype.onDateChanged = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var isChanged = false;
                if (this.currentViewType == 'week') {
                    /** @type {?} */
                    var _date = $event.split('~')[0];
                    this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date(_date) });
                    isChanged = this.currentDateRange !== $event;
                }
                else {
                    isChanged = this.currentDate !== $event;
                }
                if (isChanged) {
                    this._dateChanged($event);
                }
            };
        /**
         * @private
         * @param {?=} newDate
         * @return {?}
         */
        ToolbarComponent.prototype._dateChanged = /**
         * @private
         * @param {?=} newDate
         * @return {?}
         */
            function (newDate) {
                if (newDate) {
                    if (this.currentViewType === 'day') {
                        this.currentDate = newDate;
                    }
                    else {
                        this.currentDateRange = newDate;
                    }
                }
                this.dateChanged.emit({
                    viewType: this.currentViewType,
                    dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
                    weekDays: this.currentWeekDays
                });
                this.calendarRef.closeDetailPanel();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        ToolbarComponent.prototype.onPlaceSelectChanged = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                var data = $event.data;
                this.placeChanged.emit({
                    viewType: this.currentViewType,
                    dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
                    weekDays: this.currentWeekDays,
                    room: data.id ? data : null
                });
            };
        ToolbarComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'toolbar',
                        template: "<div class=\"toolbar\" style=\"overflow-x: auto ;\">\r\n\r\n    <div class=\"view-type \">\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'day'\" (click)=\"changeCalendarView($event, 'day')\">{{'appointment.day'|locale}}</button>\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'week'\" (click)=\"changeCalendarView($event, 'week')\">{{'appointment.week'|locale}}</button>\r\n    </div>\r\n    <span class=\"line\"></span>\r\n    <div class=\"btns\">\r\n        <button class=\"btn-today\" (click)=\"onDateButtonClicked($event, 0)\">{{ currentViewType === 'day'? ('appointment.today'|locale ): ('appointment.thisWeek'|locale)}}</button>\r\n\r\n        <div class=\"btn-group\">\r\n            <button class=\"btn-prev\" (click)=\"onDateButtonClicked($event, -1)\" title=\"{{ currentViewType === 'day'? ('appointment.prevDay'|locale): ('appointment.prevWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-left\"></i>\r\n            </button>\r\n            <button class=\"btn-next\" (click)=\"onDateButtonClicked($event, 1)\" title=\"{{ currentViewType === 'day'? ('appointment.nextDay'|locale): ('appointment.nextWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-right\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inputs d-flex\">\r\n        <div class=\"datebox mr-4\" [style.width.px]=\"currentViewType === 'day'? 180 : 260\">\r\n            <farris-datepicker [ngModel]=\"currentDate\" [editable]=\"false\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" \r\n                placeholder=\"\u8BF7\u9009\u62E9\" *ngIf=\"currentViewType === 'day'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n            <farris-datepicker [ngModel]=\"currentDateRange\"  [editable]=\"false\" [dateRange]=\"true\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" [showType]=\"4\" \r\n                *ngIf=\"currentViewType === 'week'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n        </div>\r\n        <div class=\"roomlist-input\" style=\"width: 176px; display: none;\">\r\n            <farris-combo-list #cmb1 \r\n                [placeholder]=\"'appointment.datePlace'|locale\"\r\n                [enableClear]=\"true\"\r\n                [idField]=\"placeIdField\"\r\n                [textField]=\"placeNameField\"\r\n                [data]=\"places\" \r\n                [panelHeight]=\"260\"\r\n                [readonly]=\"false\"\r\n                [disabled]=\"false\"\r\n                [editable]=\"true\"\r\n                (selectChange)=\"onPlaceSelectChanged($event)\">\r\n            </farris-combo-list>\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        ToolbarComponent.ctorParameters = function () {
            return [
                { type: date.DateTimeHelperService },
                { type: core.Injector },
                { type: AppointmentCalendarComponent }
            ];
        };
        ToolbarComponent.propDecorators = {
            dateChanged: [{ type: core.Output }],
            placeChanged: [{ type: core.Output }],
            currentViewType: [{ type: core.Input }],
            places: [{ type: core.Input }],
            placeIdField: [{ type: core.Input }],
            placeNameField: [{ type: core.Input }]
        };
        return ToolbarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ItemDblClickDirective = /** @class */ (function () {
        function ItemDblClickDirective(el) {
            this.el = el;
            this.dblclickHandler = new core.EventEmitter();
        }
        /**
         * @return {?}
         */
        ItemDblClickDirective.prototype.ngOnInit = /**
         * @return {?}
         */
            function () { };
        /**
         * @param {?} event
         * @return {?}
         */
        ItemDblClickDirective.prototype.ondblclick = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                event.stopPropagation();
                this.dblclickHandler.emit({ item: this.data, $event: event });
            };
        ItemDblClickDirective.decorators = [
            { type: core.Directive, args: [{ selector: '[item-dblclick]' },] }
        ];
        /** @nocollapse */
        ItemDblClickDirective.ctorParameters = function () {
            return [
                { type: core.ElementRef }
            ];
        };
        ItemDblClickDirective.propDecorators = {
            data: [{ type: core.Input, args: ['item-dblclick',] }],
            dblclickHandler: [{ type: core.Output }],
            ondblclick: [{ type: core.HostListener, args: ['dblclick', ['$event'],] }]
        };
        return ItemDblClickDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ReserveDetailComponent = /** @class */ (function () {
        function ReserveDetailComponent(injector, ser, el) {
            this.injector = injector;
            this.ser = ser;
            this.el = el;
            /**
             * 弹出面板位置
             */
            this.position = null;
            /**
             * 预定信息字段配置
             */
            this.fieldConfigs = null;
            /**
             * 预定地点字段配置
             */
            this.placeFieldConfigs = null;
            this.customCls = null;
            this.showEditButton = true;
            this.showDeleteButton = true;
            this.showCloseButton = true;
            this.detailColumnWidth = 56;
            this.titleLength = 52;
            this.rooNameField = 'name';
        }
        /**
         * @return {?}
         */
        ReserveDetailComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.rooNameField = this.placeFieldConfigs.fullName || this.placeFieldConfigs.name;
            };
        /**
         * @param {?} $event
         * @param {?} t
         * @return {?}
         */
        ReserveDetailComponent.prototype.toolbarBtnClick = /**
         * @param {?} $event
         * @param {?} t
         * @return {?}
         */
            function ($event, t) {
                $event.stopPropagation();
                this.ser.cardBtnClick$.next({ $event: $event, action: t, item: this.data });
            };
        /**
         * @param {?=} typ
         * @return {?}
         */
        ReserveDetailComponent.prototype.getCustomCls = /**
         * @param {?=} typ
         * @return {?}
         */
            function (typ) {
                if (typ === void 0) {
                    typ = 'cls';
                }
                /** @type {?} */
                var result = null;
                if (this.customCls) {
                    if (!this.customCls['cls'] && !this.customCls['cls'] && typ == 'cls') {
                        result = this.customCls;
                    }
                    else {
                        result = this.customCls[typ] || {};
                    }
                }
                // if (typ === 'styles' || typ === 'detail') {
                //     Object.keys(result).forEach((n: any) => {
                //         if (result[n].indexOf('important') === -1) {
                //             result[n] = result[n] +' !important' ;
                //         }
                //     });
                // }
                return result;
            };
        /**
         * @param {?} str
         * @return {?}
         */
        ReserveDetailComponent.prototype.getLength = /**
         * @param {?} str
         * @return {?}
         */
            function (str) {
                /** @type {?} */
                var strLength = 0;
                // 记录str的总长度
                /** @type {?} */
                var Len = str.length;
                for (var i = 0; i < Len; i++) {
                    /** @type {?} */
                    var charCode = str.charCodeAt(i);
                    if (charCode >= 0 && charCode <= 128) {
                        strLength++; //英文字符加1
                    }
                    else {
                        strLength = strLength + 2; //中文字符加2
                    }
                }
                return strLength;
            };
        /**
         * @param {?} str
         * @param {?} len
         * @return {?}
         */
        ReserveDetailComponent.prototype.subStrNum = /**
         * @param {?} str
         * @param {?} len
         * @return {?}
         */
            function (str, len) {
                /** @type {?} */
                var strLen = str.length;
                /** @type {?} */
                var strCut = '';
                /** @type {?} */
                var strLength = 0;
                for (var i = 0; i < strLen; i++) {
                    /** @type {?} */
                    var charStr = str.charAt(i);
                    strLength++;
                    if (encodeURI(charStr).length > 4) { //使用encodeURI获取编码长度
                        strLength++;
                    }
                    strCut = strCut.concat(charStr); //单个字符进行合并
                    if (strLength >= len) {
                        strCut = strCut.concat('...'); //大于指定长度后合并'...'并返回此字符串
                        return strCut;
                    }
                }
                if (strLength < len) {
                    return str;
                }
            };
        ReserveDetailComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'reserve-detail',
                        template: "\n      <div class=\"reserve-detail-container\" style=\"position: fixed; z-index: 99\" [style.left.px]=\"position?.left\" [style.top.px]=\"position?.top\">\n        <div class=\"detail-header\" [ngClass]=\"getCustomCls()\" [ngStyle]=\"getCustomCls('styles')\">\n            <div class=\"detail-toolbar\" *ngIf=\"!toolbarButtons || !toolbarButtons.length\">\n                <span *ngIf=\"showEditButton\" class=\"f-icon f-icon f-icon-new-edit\" title=\"{{ 'appointment.detail.edit' | locale }}\" (click)=\"toolbarBtnClick($event, 'edit')\"></span>\n                <span *ngIf=\"showDeleteButton\" class=\"f-icon f-icon-trash\" title=\"{{ 'appointment.detail.del' | locale }}\" (click)=\"toolbarBtnClick($event, 'del')\"></span>\n                <span *ngIf=\"showCloseButton\" class=\"f-icon f-icon-close\" title=\"{{ 'appointment.detail.close' | locale }}\" (click)=\"toolbarBtnClick($event, 'close')\"></span>\n            </div>\n\n            <div class=\"detail-toolbar\" *ngIf=\"toolbarButtons && toolbarButtons.length\">\n                <span *ngFor=\"let btn of toolbarButtons\" class=\"{{ btn.icon }}\" title=\"{{ btn.title }}\" [style.display]=\"btn.visible ? '': 'none'\"\n                    (click)=\"!btn.disable && btn.handler && btn.handler({ item: data, $event: $event })\"></span>\n                <span *ngIf=\"showCloseButton\" class=\"f-icon f-icon-close\" title=\"{{ 'appointment.detail.close' | locale }}\" (click)=\"toolbarBtnClick($event, 'close')\"></span>\n            </div>\n\n            <div class=\"detail-title\">\n \n                <span class=\"detail-place\">\n                    {{rooNameField | getvalue: placeInfo}}\n                </span>\n                <div class=\"title-content\" style='word-break:break-all; font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",\"PingFang SC\",\"Hiragino Sans GB\",\"Microsoft YaHei\",\"Helvetica Neue\",Helvetica,Arial,sans-serif' title=\"{{fieldConfigs.title}}\">\n                    {{subStrNum(fieldConfigs.title | getvalue: data, titleLength)}}\n                    <!-- <span class=\"detail-label\">\u4E13\u9879\u4F1A\u8BAE</span> -->\n                    <ng-container [ngTemplateOutlet]=\"badgeTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: data}, item: data }\"></ng-container>\n                </div>\n                <div class=\"detail-timer\">\n                    {{ fieldConfigs.startDate| getvalue: data | dateformat: ('appointment.detail.dateFormat'|locale) }} {{ fieldConfigs.startDate| getvalue: data | dateformat: 'HH:mm' }} \n                    &nbsp;-&nbsp;\n                    {{ fieldConfigs.endDate | getvalue: data | dateformat: ('appointment.detail.dateFormat'|locale) }} {{ fieldConfigs.endDate | getvalue: data | dateformat: 'HH:mm' }} \n                    <!-- 9\u67084\u65E5\uFF08\u4ECA\u5929\uFF0908:00 \u2014 9\u67087\u65E5\uFF08\u5468\u4E09\uFF0917:30 -->\n                </div>\n            </div>\n        </div>\n        <div class=\"detail-info-content  win11Scroll nobtn\" [ngStyle]=\"getCustomCls('detail')\">\n            <ng-container [ngTemplateOutlet]=\"detailTemplate\" [ngTemplateOutletContext]=\"{ $implicit: {data: data}, item: data }\"></ng-container>\n            <ul *ngIf=\"!detailTemplate\">\n                <li *ngFor=\"let col of columns\">\n                    <ng-container *ngIf=\"!col.template\">\n                        <span class=\"detail-subtitle\" [style.width.px]=\"detailColumnWidth\" [style.minWidth.px]=\"detailColumnWidth\" [title]=\"col.title\">{{col.title}}</span> \n                        <span class=\"detail-content  d-flex flex-row\" *ngIf=\"!col.formatter\">\n                            <span class=\"colon\"></span>    \n                            <span class=\"text\">{{ col.field | getvalue: data: true}}</span>\n                        </span>\n                        <span class=\"detail-content  d-flex flex-row\" *ngIf=\"col.formatter\">\n                            <span class=\"colon\"></span>\n                            <span class=\"text\" [innerHtml]=\" col.field | getvalue: data | columnformatter: col : data | safe: 'html'\"></span>\n                        </span>\n                    </ng-container>\n                    <ng-container *ngIf=\"col.template\"  [ngTemplateOutlet]=\"col.template\" [ngTemplateOutletContext]=\"{ $implicit: {data: data, field: col.field, label: col.title}, item: data }\">\n                    </ng-container>\n                </li>\n                \n            </ul>\n        </div>\n    </div>\n\n    ",
                        styles: ["\n            .detail-subtitle {\n               text-align: justify;text-align-last: justify;white-space: nowrap;overflow: hidden;text-overflow: ellipsis;\n            }\n            .detail-content>.colon:before {\n                content: '\uFF1A'\n            }\n\n            .detail-content>.text {\n                word-break: break-all;\n            }\n        "]
                    }] }
        ];
        /** @nocollapse */
        ReserveDetailComponent.ctorParameters = function () {
            return [
                { type: core.Injector },
                { type: AppointmentCalendarService },
                { type: core.ElementRef }
            ];
        };
        ReserveDetailComponent.propDecorators = {
            data: [{ type: core.Input }],
            position: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            detailTemplate: [{ type: core.Input }],
            badgeTemplate: [{ type: core.Input }],
            fieldConfigs: [{ type: core.Input }],
            placeInfo: [{ type: core.Input }],
            placeFieldConfigs: [{ type: core.Input }],
            customCls: [{ type: core.Input }],
            showEditButton: [{ type: core.Input }],
            showDeleteButton: [{ type: core.Input }],
            showCloseButton: [{ type: core.Input }],
            toolbarButtons: [{ type: core.Input }],
            detailColumnWidth: [{ type: core.Input }],
            titleLength: [{ type: core.Input }]
        };
        return ReserveDetailComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AppointmentCalendarModule = /** @class */ (function () {
        function AppointmentCalendarModule() {
        }
        AppointmentCalendarModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            ToolbarComponent,
                            DayViewComponent,
                            WeekViewComponent,
                            AppointmentCalendarComponent,
                            ItemDblClickDirective,
                            ReserveDetailComponent,
                            BaseViewComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiComboList.ComboListModule,
                            uiCommon.FarrisCommonModule.forRoot(),
                            date.DateHelperModule.forRoot(),
                            uiLocale.LocaleModule.forRoot(),
                            column.DataColumnModule.forRoot(),
                        ],
                        exports: [
                            ToolbarComponent,
                            DayViewComponent,
                            WeekViewComponent,
                            AppointmentCalendarComponent,
                            ItemDblClickDirective,
                            ReserveDetailComponent,
                            BaseViewComponent
                        ],
                    },] }
        ];
        return AppointmentCalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ItemDblClickDirective = ItemDblClickDirective;
    exports.AppointmentCalendarService = AppointmentCalendarService;
    exports.AppointmentCalendarComponent = AppointmentCalendarComponent;
    exports.AppointmentCalendarModule = AppointmentCalendarModule;
    exports.DayViewComponent = DayViewComponent;
    exports.WeekViewComponent = WeekViewComponent;
    exports.ToolbarComponent = ToolbarComponent;
    exports.ReserveDetailComponent = ReserveDetailComponent;
    exports.BaseViewComponent = BaseViewComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-appointment-calendar.umd.js.map