/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Injector, Input, Output, ViewEncapsulation } from '@angular/core';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { addDays, subDays } from 'date-fns';
import { AppointmentCalendarComponent } from '../appointment-calendar.component';
var ToolbarComponent = /** @class */ (function () {
    function ToolbarComponent(dateHlp, injector, calendarRef) {
        this.dateHlp = dateHlp;
        this.injector = injector;
        this.calendarRef = calendarRef;
        this.dateChanged = new EventEmitter();
        this.placeChanged = new EventEmitter();
        this.currentDate = '';
        this.currentDateRange = '';
        this.currentWeekDays = [];
        this.currentViewType = 'day';
        this.places = [];
        this.placeIdField = 'id';
        this.placeNameField = 'name';
    }
    /**
     * @return {?}
     */
    ToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initDate();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ToolbarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _a;
        if (changes.rooms && !changes.rooms.isFirstChange()) {
            this.places = tslib_1.__spread([(_a = {}, _a[this.placeIdField] = '', _a[this.placeNameField] = '全部场所', _a)], this.places);
        }
    };
    /**
     * @return {?}
     */
    ToolbarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @private
     * @return {?}
     */
    ToolbarComponent.prototype.initDate = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.currentViewType === 'week' && !this.currentDateRange) {
            this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date() });
            this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
        }
        else {
            if (!this.currentDate) {
                this.currentDate = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
            }
        }
        this._dateChanged();
    };
    /**
     * @param {?} $event
     * @param {?} viewType
     * @return {?}
     */
    ToolbarComponent.prototype.changeCalendarView = /**
     * @param {?} $event
     * @param {?} viewType
     * @return {?}
     */
    function ($event, viewType) {
        if ($event) {
            $event.stopPropagation();
        }
        this.currentViewType = viewType;
        this.initDate();
    };
    /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    ToolbarComponent.prototype.onDateButtonClicked = /**
     * @param {?} $event
     * @param {?} typ
     * @return {?}
     */
    function ($event, typ) {
        /** @type {?} */
        var baselineDate = new Date();
        if (this.currentViewType === 'day') {
            if (this.currentDate) {
                baselineDate = new Date(this.currentDate);
            }
            /** @type {?} */
            var newDateStr = this.dateHlp.formatTo(new Date(), 'yyyy-MM-dd');
            if (typ === -1) {
                /** @type {?} */
                var d = this.dateHlp.formatTo(subDays(baselineDate, 1), 'yyyy-MM-dd');
                newDateStr = this.dateHlp.formatTo(d);
            }
            else if (typ === 1) {
                /** @type {?} */
                var d = this.dateHlp.formatTo(addDays(baselineDate, 1), 'yyyy-MM-dd');
                newDateStr = this.dateHlp.formatTo(d);
            }
            this.currentDate = newDateStr;
        }
        else {
            if (this.currentWeekDays && this.currentWeekDays.length) {
                baselineDate = this.currentWeekDays[4].date;
            }
            // 下周
            if (typ === 1) {
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate, range: 7 });
            }
            else if (typ === -1) { // 上周
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate, range: -7 });
            }
            else { // 当前周
                baselineDate = new Date();
                this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: baselineDate });
            }
            this.currentDateRange = this.currentWeekDays[0].dateStr + '~' + this.currentWeekDays[6].dateStr;
            // console.log(this.currentWeekDays);
        }
        this._dateChanged();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ToolbarComponent.prototype.onDateChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var isChanged = false;
        if (this.currentViewType == 'week') {
            /** @type {?} */
            var _date = $event.split('~')[0];
            this.currentWeekDays = this.dateHlp.getWeekDate({ baselineDate: new Date(_date) });
            isChanged = this.currentDateRange !== $event;
        }
        else {
            isChanged = this.currentDate !== $event;
        }
        if (isChanged) {
            this._dateChanged($event);
        }
    };
    /**
     * @private
     * @param {?=} newDate
     * @return {?}
     */
    ToolbarComponent.prototype._dateChanged = /**
     * @private
     * @param {?=} newDate
     * @return {?}
     */
    function (newDate) {
        if (newDate) {
            if (this.currentViewType === 'day') {
                this.currentDate = newDate;
            }
            else {
                this.currentDateRange = newDate;
            }
        }
        this.dateChanged.emit({
            viewType: this.currentViewType,
            dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
            weekDays: this.currentWeekDays
        });
        this.calendarRef.closeDetailPanel();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ToolbarComponent.prototype.onPlaceSelectChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var data = $event.data;
        this.placeChanged.emit({
            viewType: this.currentViewType,
            dateValue: this.currentViewType === 'day' ? this.currentDate : this.currentDateRange,
            weekDays: this.currentWeekDays,
            room: data.id ? data : null
        });
    };
    ToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'toolbar',
                    template: "<div class=\"toolbar\" style=\"overflow-x: auto ;\">\r\n\r\n    <div class=\"view-type \">\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'day'\" (click)=\"changeCalendarView($event, 'day')\">{{'appointment.day'|locale}}</button>\r\n        <button class=\"btn-day\" type=\"button\" [class.btn-active]=\"currentViewType === 'week'\" (click)=\"changeCalendarView($event, 'week')\">{{'appointment.week'|locale}}</button>\r\n    </div>\r\n    <span class=\"line\"></span>\r\n    <div class=\"btns\">\r\n        <button class=\"btn-today\" (click)=\"onDateButtonClicked($event, 0)\">{{ currentViewType === 'day'? ('appointment.today'|locale ): ('appointment.thisWeek'|locale)}}</button>\r\n\r\n        <div class=\"btn-group\">\r\n            <button class=\"btn-prev\" (click)=\"onDateButtonClicked($event, -1)\" title=\"{{ currentViewType === 'day'? ('appointment.prevDay'|locale): ('appointment.prevWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-left\"></i>\r\n            </button>\r\n            <button class=\"btn-next\" (click)=\"onDateButtonClicked($event, 1)\" title=\"{{ currentViewType === 'day'? ('appointment.nextDay'|locale): ('appointment.nextWeek'|locale) }}\">\r\n                <i class=\"f-icon f-icon-arrow-chevron-right\"></i>\r\n            </button>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"inputs d-flex\">\r\n        <div class=\"datebox mr-4\" [style.width.px]=\"currentViewType === 'day'? 180 : 260\">\r\n            <farris-datepicker [ngModel]=\"currentDate\" [editable]=\"false\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" \r\n                placeholder=\"\u8BF7\u9009\u62E9\" *ngIf=\"currentViewType === 'day'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n            <farris-datepicker [ngModel]=\"currentDateRange\"  [editable]=\"false\" [dateRange]=\"true\"\r\n                dateFormat=\"{{'appointment.dateFormat'|locale}}\" returnFormat=\"yyyy-MM-dd\" [showType]=\"4\" \r\n                *ngIf=\"currentViewType === 'week'\" [showClear]=\"false\"\r\n                (valueChange)=\"onDateChanged($event.returnFormatted)\"></farris-datepicker>\r\n        </div>\r\n        <div class=\"roomlist-input\" style=\"width: 176px; display: none;\">\r\n            <farris-combo-list #cmb1 \r\n                [placeholder]=\"'appointment.datePlace'|locale\"\r\n                [enableClear]=\"true\"\r\n                [idField]=\"placeIdField\"\r\n                [textField]=\"placeNameField\"\r\n                [data]=\"places\" \r\n                [panelHeight]=\"260\"\r\n                [readonly]=\"false\"\r\n                [disabled]=\"false\"\r\n                [editable]=\"true\"\r\n                (selectChange)=\"onPlaceSelectChanged($event)\">\r\n            </farris-combo-list>\r\n        </div>\r\n    </div>\r\n\r\n</div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    ToolbarComponent.ctorParameters = function () { return [
        { type: DateTimeHelperService },
        { type: Injector },
        { type: AppointmentCalendarComponent }
    ]; };
    ToolbarComponent.propDecorators = {
        dateChanged: [{ type: Output }],
        placeChanged: [{ type: Output }],
        currentViewType: [{ type: Input }],
        places: [{ type: Input }],
        placeIdField: [{ type: Input }],
        placeNameField: [{ type: Input }]
    };
    return ToolbarComponent;
}());
export { ToolbarComponent };
if (false) {
    /** @type {?} */
    ToolbarComponent.prototype.dateChanged;
    /** @type {?} */
    ToolbarComponent.prototype.placeChanged;
    /** @type {?} */
    ToolbarComponent.prototype.currentDate;
    /** @type {?} */
    ToolbarComponent.prototype.currentDateRange;
    /** @type {?} */
    ToolbarComponent.prototype.currentWeekDays;
    /** @type {?} */
    ToolbarComponent.prototype.currentViewType;
    /** @type {?} */
    ToolbarComponent.prototype.places;
    /** @type {?} */
    ToolbarComponent.prototype.placeIdField;
    /** @type {?} */
    ToolbarComponent.prototype.placeNameField;
    /**
     * @type {?}
     * @private
     */
    ToolbarComponent.prototype.dateHlp;
    /**
     * @type {?}
     * @private
     */
    ToolbarComponent.prototype.injector;
    /** @type {?} */
    ToolbarComponent.prototype.calendarRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbGJhci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL2FwcG9pbnRtZW50LWNhbGVuZGFyLyIsInNvdXJjZXMiOlsibGliL3ZpZXdzL3Rvb2xiYXIuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFpQixTQUFTLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBaUIsaUJBQWlCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckosT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0QsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDNUMsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHakY7SUFxQkksMEJBQW9CLE9BQThCLEVBQVUsUUFBa0IsRUFBUyxXQUF5QztRQUE1RyxZQUFPLEdBQVAsT0FBTyxDQUF1QjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBUyxnQkFBVyxHQUFYLFdBQVcsQ0FBOEI7UUFidEgsZ0JBQVcsR0FBRyxJQUFJLFlBQVksRUFBd0IsQ0FBQztRQUN2RCxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFFNUMsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFDakIscUJBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQ3RCLG9CQUFlLEdBQUcsRUFBRSxDQUFDO1FBRVosb0JBQWUsR0FBcUIsS0FBSyxDQUFDO1FBQzFDLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFDWixpQkFBWSxHQUFHLElBQUksQ0FBQztRQUNwQixtQkFBYyxHQUFHLE1BQU0sQ0FBQztJQUdtRyxDQUFDOzs7O0lBRXJJLG1DQUFROzs7SUFBUjtRQUNJLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNwQixDQUFDOzs7OztJQUVELHNDQUFXOzs7O0lBQVgsVUFBWSxPQUFzQjs7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LENBQUMsZUFBZTtZQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJO1NBQzlCLENBQUMsQ0FBQztJQUNQLENBQUM7O2dCQTVJSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLFNBQVM7b0JBQ25CLG04RkFBcUM7b0JBQ3JDLGFBQWEsRUFBRSxpQkFBaUIsQ0FBQyxJQUFJO2lCQUN4Qzs7OztnQkFUUSxxQkFBcUI7Z0JBRG1CLFFBQVE7Z0JBR2hELDRCQUE0Qjs7OzhCQVdoQyxNQUFNOytCQUNOLE1BQU07a0NBTU4sS0FBSzt5QkFDTCxLQUFLOytCQUNMLEtBQUs7aUNBQ0wsS0FBSzs7SUEySFYsdUJBQUM7Q0FBQSxBQTdJRCxJQTZJQztTQXZJWSxnQkFBZ0I7OztJQUV6Qix1Q0FBaUU7O0lBQ2pFLHdDQUE0Qzs7SUFFNUMsdUNBQWlCOztJQUNqQiw0Q0FBc0I7O0lBQ3RCLDJDQUFxQjs7SUFFckIsMkNBQW1EOztJQUNuRCxrQ0FBcUI7O0lBQ3JCLHdDQUE2Qjs7SUFDN0IsMENBQWlDOzs7OztJQUdyQixtQ0FBc0M7Ozs7O0lBQUUsb0NBQTBCOztJQUFFLHVDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbmplY3RvciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdFbmNhcHN1bGF0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGVUaW1lSGVscGVyU2VydmljZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uL2RhdGUnO1xyXG5pbXBvcnQgeyBhZGREYXlzLCBzdWJEYXlzIH0gZnJvbSAnZGF0ZS1mbnMnO1xyXG5pbXBvcnQgeyBBcHBvaW50bWVudENhbGVuZGFyQ29tcG9uZW50IH0gZnJvbSAnLi4vYXBwb2ludG1lbnQtY2FsZW5kYXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQ2FsZW5kYXJWaWV3VHlwZSwgVmlld1R5cGVDaGFuZ2VkUGFyYW0gfSBmcm9tICcuLi9tb2RlbHMvY2FsZW5kYXkudHlwZXMnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ3Rvb2xiYXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICd0b29sYmFyLmNvbXBvbmVudC5odG1sJyxcclxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmVcclxufSlcclxuXHJcbmV4cG9ydCBjbGFzcyBUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICAgIEBPdXRwdXQoKSBkYXRlQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8Vmlld1R5cGVDaGFuZ2VkUGFyYW0+KCk7XHJcbiAgICBAT3V0cHV0KCkgcGxhY2VDaGFuZ2VkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIGN1cnJlbnREYXRlID0gJyc7XHJcbiAgICBjdXJyZW50RGF0ZVJhbmdlID0gJyc7XHJcbiAgICBjdXJyZW50V2Vla0RheXMgPSBbXTtcclxuICAgIFxyXG4gICAgQElucHV0KCkgY3VycmVudFZpZXdUeXBlOiBDYWxlbmRhclZpZXdUeXBlID0gJ2RheSc7XHJcbiAgICBASW5wdXQoKSBwbGFjZXMgPSBbXTtcclxuICAgIEBJbnB1dCgpIHBsYWNlSWRGaWVsZCA9ICdpZCc7XHJcbiAgICBASW5wdXQoKSBwbGFjZU5hbWVGaWVsZCA9ICduYW1lJztcclxuXHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBkYXRlSGxwOiBEYXRlVGltZUhlbHBlclNlcnZpY2UsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwdWJsaWMgY2FsZW5kYXJSZWY6IEFwcG9pbnRtZW50Q2FsZW5kYXJDb21wb25lbnQpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuaW5pdERhdGUoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMucm9vbXMgJiYgIWNoYW5nZXMucm9vbXMuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMucGxhY2VzID0gW3sgW3RoaXMucGxhY2VJZEZpZWxkXTogJycsIFt0aGlzLnBsYWNlTmFtZUZpZWxkXTogJ+WFqOmDqOWcuuaJgCcgfSwgLi4udGhpcy5wbGFjZXNdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7fVxyXG5cclxuICAgIHByaXZhdGUgaW5pdERhdGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudFZpZXdUeXBlID09PSAnd2VlaycgJiYgIXRoaXMuY3VycmVudERhdGVSYW5nZSApIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0RheXMgPSB0aGlzLmRhdGVIbHAuZ2V0V2Vla0RhdGUoeyBiYXNlbGluZURhdGU6IG5ldyBEYXRlKCl9KTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZVJhbmdlID0gdGhpcy5jdXJyZW50V2Vla0RheXNbMF0uZGF0ZVN0ciArICd+JyArIHRoaXMuY3VycmVudFdlZWtEYXlzWzZdLmRhdGVTdHI7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLmN1cnJlbnREYXRlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gdGhpcy5kYXRlSGxwLmZvcm1hdFRvKG5ldyBEYXRlKCksICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuX2RhdGVDaGFuZ2VkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY2hhbmdlQ2FsZW5kYXJWaWV3KCRldmVudDogTW91c2VFdmVudCwgdmlld1R5cGU6IENhbGVuZGFyVmlld1R5cGUpIHtcclxuICAgICAgICBpZiAoJGV2ZW50KSB7XHJcbiAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Vmlld1R5cGUgPSB2aWV3VHlwZTtcclxuICAgICAgICB0aGlzLmluaXREYXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25EYXRlQnV0dG9uQ2xpY2tlZCgkZXZlbnQ6IE1vdXNlRXZlbnQsIHR5cDogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IGJhc2VsaW5lRGF0ZTogYW55ID0gbmV3IERhdGUoKTtcclxuICAgICAgICBpZiAodGhpcy5jdXJyZW50Vmlld1R5cGUgPT09ICdkYXknKSB7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgYmFzZWxpbmVEYXRlID0gbmV3IERhdGUodGhpcy5jdXJyZW50RGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBuZXdEYXRlU3RyID0gdGhpcy5kYXRlSGxwLmZvcm1hdFRvKG5ldyBEYXRlKCksICd5eXl5LU1NLWRkJyk7XHJcbiAgICAgICAgICAgIGlmICh0eXAgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5kYXRlSGxwLmZvcm1hdFRvKHN1YkRheXMoYmFzZWxpbmVEYXRlLCAxKSwgJ3l5eXktTU0tZGQnKVxyXG4gICAgICAgICAgICAgICAgbmV3RGF0ZVN0ciA9IHRoaXMuZGF0ZUhscC5mb3JtYXRUbyhkKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXAgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB0aGlzLmRhdGVIbHAuZm9ybWF0VG8oYWRkRGF5cyhiYXNlbGluZURhdGUsIDEpLCAneXl5eS1NTS1kZCcpXHJcbiAgICAgICAgICAgICAgICBuZXdEYXRlU3RyID0gdGhpcy5kYXRlSGxwLmZvcm1hdFRvKGQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gbmV3RGF0ZVN0cjtcclxuICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFdlZWtEYXlzICYmIHRoaXMuY3VycmVudFdlZWtEYXlzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgYmFzZWxpbmVEYXRlID0gdGhpcy5jdXJyZW50V2Vla0RheXNbNF0uZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyDkuIvlkahcclxuICAgICAgICAgICAgaWYgKHR5cCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0RheXMgPSB0aGlzLmRhdGVIbHAuZ2V0V2Vla0RhdGUoeyBiYXNlbGluZURhdGUsIHJhbmdlOiA3fSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwID09PSAtMSkgeyAvLyDkuIrlkahcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudFdlZWtEYXlzID0gdGhpcy5kYXRlSGxwLmdldFdlZWtEYXRlKHsgYmFzZWxpbmVEYXRlLCByYW5nZTogLTd9KTtcclxuICAgICAgICAgICAgfSBlbHNlIHsgLy8g5b2T5YmN5ZGoXHJcbiAgICAgICAgICAgICAgICBiYXNlbGluZURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0RheXMgPSAgdGhpcy5kYXRlSGxwLmdldFdlZWtEYXRlKHsgYmFzZWxpbmVEYXRlfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGVSYW5nZSA9IHRoaXMuY3VycmVudFdlZWtEYXlzWzBdLmRhdGVTdHIgKyAnficgKyB0aGlzLmN1cnJlbnRXZWVrRGF5c1s2XS5kYXRlU3RyO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0aGlzLmN1cnJlbnRXZWVrRGF5cyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9kYXRlQ2hhbmdlZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGF0ZUNoYW5nZWQoJGV2ZW50OiBzdHJpbmcpIHtcclxuXHJcbiAgICAgICAgbGV0IGlzQ2hhbmdlZCA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRWaWV3VHlwZSA9PSAnd2VlaycpIHtcclxuICAgICAgICAgICAgY29uc3QgX2RhdGUgPSAkZXZlbnQuc3BsaXQoJ34nKVswXTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50V2Vla0RheXMgPSAgdGhpcy5kYXRlSGxwLmdldFdlZWtEYXRlKHsgYmFzZWxpbmVEYXRlOiBuZXcgRGF0ZShfZGF0ZSl9KTtcclxuXHJcbiAgICAgICAgICAgIGlzQ2hhbmdlZCA9IHRoaXMuY3VycmVudERhdGVSYW5nZSAhPT0gJGV2ZW50O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlzQ2hhbmdlZCA9IHRoaXMuY3VycmVudERhdGUgIT09ICRldmVudDtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKGlzQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRlQ2hhbmdlZCgkZXZlbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIF9kYXRlQ2hhbmdlZChuZXdEYXRlPzogc3RyaW5nKSB7XHJcbiAgICAgICAgaWYgKG5ld0RhdGUpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFZpZXdUeXBlID09PSAnZGF5JyApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3VycmVudERhdGUgPSBuZXdEYXRlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZVJhbmdlID0gbmV3RGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5kYXRlQ2hhbmdlZC5lbWl0KHsgXHJcbiAgICAgICAgICAgIHZpZXdUeXBlOiB0aGlzLmN1cnJlbnRWaWV3VHlwZSxcclxuICAgICAgICAgICAgZGF0ZVZhbHVlOiB0aGlzLmN1cnJlbnRWaWV3VHlwZSA9PT0gJ2RheScgPyB0aGlzLmN1cnJlbnREYXRlIDogdGhpcy5jdXJyZW50RGF0ZVJhbmdlLCBcclxuICAgICAgICAgICAgd2Vla0RheXM6IHRoaXMuY3VycmVudFdlZWtEYXlzXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2FsZW5kYXJSZWYuY2xvc2VEZXRhaWxQYW5lbCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uUGxhY2VTZWxlY3RDaGFuZ2VkKCRldmVudCkge1xyXG4gICAgICAgIGNvbnN0IHsgZGF0YSB9ID0gJGV2ZW50O1xyXG4gICAgICAgIHRoaXMucGxhY2VDaGFuZ2VkLmVtaXQoeyBcclxuICAgICAgICAgICAgdmlld1R5cGU6IHRoaXMuY3VycmVudFZpZXdUeXBlLFxyXG4gICAgICAgICAgICBkYXRlVmFsdWU6IHRoaXMuY3VycmVudFZpZXdUeXBlID09PSAnZGF5JyA/IHRoaXMuY3VycmVudERhdGUgOiB0aGlzLmN1cnJlbnREYXRlUmFuZ2UsIFxyXG4gICAgICAgICAgICB3ZWVrRGF5czogdGhpcy5jdXJyZW50V2Vla0RheXMsXHJcbiAgICAgICAgICAgIHJvb206IGRhdGEuaWQgPyBkYXRhIDogbnVsbFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59Il19