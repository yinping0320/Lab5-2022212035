/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Injector, Input, NgZone, Output, ViewChild } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { AppointmentCalendarComponent } from '../appointment-calendar.component';
var BaseViewComponent = /** @class */ (function () {
    function BaseViewComponent(injector, ngzone, calendarRef) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.calendarRef = calendarRef;
        this.selectId = '';
        this.itemClick = new EventEmitter();
        this.itemDblClick = new EventEmitter();
        this.scrollChange = new EventEmitter();
        this.activeItem = null;
        this.currentMousePointX = 0;
        this.currentMousePointY = 0;
        this.isClick = true;
        this.overlaySer = new OverLayHiddenService();
        this.utils = this.injector.get(CommonUtils);
    }
    /**
     * @return {?}
     */
    BaseViewComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.setActiveItem();
    };
    /**
     * @return {?}
     */
    BaseViewComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.bodyRef.nativeElement.addEventListener('scroll', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var x = _this.bodyRef.nativeElement.scrollLeft;
                /** @type {?} */
                var y = _this.bodyRef.nativeElement.scrollTop;
                _this.headerRef.nativeElement.scrollLeft = _this.bodyRef.nativeElement.scrollLeft;
                _this.calendarRef.closeDetailPanel();
                _this.scrollChange.emit({ x: x, y: y });
            }));
        }));
        if (this.overlaySer) {
            this.overlaySer.registerMouseEvent(this.bodyRef.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (_this.calendarRef.detailRef) {
                    if (_this.calendarRef.detailRef.el.nativeElement.contains(e.target)) {
                        return;
                    }
                    if (e.type !== 'mousewheel' && _this.isClick) {
                        if (_this.calendarRef.viewType === 'week') {
                            if (e.target.closest('li') && e.target.closest('li').classList.contains('week-day-subject')) {
                                return;
                            }
                        }
                        if (_this.calendarRef.viewType === 'day') {
                            if (e.target.closest('div.item-content')) {
                                return;
                            }
                        }
                    }
                    if (e.target.classList.contains('farris-modal') || e.target.closest('.farris-modal')) {
                        if (e.target.closest('farris-messager') && e.target.nodeName !== 'BUTTON') {
                            return;
                        }
                    }
                    _this.calendarRef.closeDetailPanel();
                }
            }), { mouseUp: true });
        }
    };
    /**
     * @return {?}
     */
    BaseViewComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overlaySer) {
            this.overlaySer.destory(this.bodyRef.nativeElement);
            this.overlaySer = null;
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    BaseViewComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.selectId && !changes.selectId.isFirstChange()) {
            this.setActiveItem();
        }
        if (changes.data && !changes.data.isFirstChange()) {
            this.setActiveItem();
        }
    };
    /**
     * @param {?=} id
     * @return {?}
     */
    BaseViewComponent.prototype.setActiveItem = /**
     * @param {?=} id
     * @return {?}
     */
    function (id) { };
    /**
     * @param {?} data
     * @return {?}
     */
    BaseViewComponent.prototype.getRoomData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var roomid = this.utils.getValue(this.calendarRef.reserveInfoFields.placeid, data);
        /** @type {?} */
        var room = this.data.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === roomid; }));
        if (room) {
            return room.data;
        }
        return null;
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    BaseViewComponent.prototype.onSubjectClick = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        var _this = this;
        $event.stopPropagation();
        if (!this.isClick) {
            this.calendarRef.closeDetailPanel();
            return;
        }
        if (this.calendarRef.viewType === 'week') {
            $event.target.scrollIntoViewIfNeeded();
        }
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this['clickTimer'] = setTimeout((/**
         * @return {?}
         */
        function () {
            _this.activeItem = item;
            /** @type {?} */
            var room = _this.getRoomData(item.data);
            _this.itemClick.emit({ item: item, $event: $event, room: room });
        }), this.calendarRef._CLICK_DELAY_);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    BaseViewComponent.prototype.ondblClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this['clickTimer']) {
            clearTimeout(this['clickTimer']);
        }
        this.activeItem = $event.item;
        /** @type {?} */
        var room = this.getRoomData($event.item.data);
        $event['room'] = room;
        this.itemDblClick.emit($event);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    BaseViewComponent.prototype.onMouseDown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.currentMousePointX = Math.floor($event.screenX);
        this.currentMousePointY = Math.floor($event.screenY);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    BaseViewComponent.prototype.onMouseUp = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isClick = this.currentMousePointX == Math.floor($event.screenX) && this.currentMousePointY == Math.floor($event.screenY);
    };
    BaseViewComponent.decorators = [
        { type: Component, args: [{
                    selector: 'appointment-base-view',
                    template: ''
                }] }
    ];
    /** @nocollapse */
    BaseViewComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: AppointmentCalendarComponent }
    ]; };
    BaseViewComponent.propDecorators = {
        data: [{ type: Input }],
        selectId: [{ type: Input }],
        itemClick: [{ type: Output }],
        itemDblClick: [{ type: Output }],
        headerRef: [{ type: ViewChild, args: ['header',] }],
        bodyRef: [{ type: ViewChild, args: ['body',] }],
        scrollChange: [{ type: Output }]
    };
    return BaseViewComponent;
}());
export { BaseViewComponent };
if (false) {
    /** @type {?} */
    BaseViewComponent.prototype.data;
    /** @type {?} */
    BaseViewComponent.prototype.selectId;
    /** @type {?} */
    BaseViewComponent.prototype.itemClick;
    /** @type {?} */
    BaseViewComponent.prototype.itemDblClick;
    /** @type {?} */
    BaseViewComponent.prototype.headerRef;
    /** @type {?} */
    BaseViewComponent.prototype.bodyRef;
    /** @type {?} */
    BaseViewComponent.prototype.scrollChange;
    /** @type {?} */
    BaseViewComponent.prototype.activeItem;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.overlaySer;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.currentMousePointX;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.currentMousePointY;
    /**
     * @type {?}
     * @private
     */
    BaseViewComponent.prototype.isClick;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.injector;
    /**
     * @type {?}
     * @protected
     */
    BaseViewComponent.prototype.ngzone;
    /** @type {?} */
    BaseViewComponent.prototype.calendarRef;
}
//# sourceMappingURL=data:application/json;base64,