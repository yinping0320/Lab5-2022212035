/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EventEmitter, Directive, ElementRef, HostListener, Input, Output } from '@angular/core';
var ItemDblClickDirective = /** @class */ (function () {
    function ItemDblClickDirective(el) {
        this.el = el;
        this.dblclickHandler = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ItemDblClickDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    ItemDblClickDirective.prototype.ondblclick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.dblclickHandler.emit({ item: this.data, $event: event });
    };
    ItemDblClickDirective.decorators = [
        { type: Directive, args: [{ selector: '[item-dblclick]' },] }
    ];
    /** @nocollapse */
    ItemDblClickDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ItemDblClickDirective.propDecorators = {
        data: [{ type: Input, args: ['item-dblclick',] }],
        dblclickHandler: [{ type: Output }],
        ondblclick: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
    };
    return ItemDblClickDirective;
}());
export { ItemDblClickDirective };
if (false) {
    /** @type {?} */
    ItemDblClickDirective.prototype.data;
    /** @type {?} */
    ItemDblClickDirective.prototype.dblclickHandler;
    /** @type {?} */
    ItemDblClickDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGJsY2xpY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9hcHBvaW50bWVudC1jYWxlbmRhci8iLCJzb3VyY2VzIjpbImxpYi9kYmxjbGljay5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdqRztJQU1JLCtCQUFtQixFQUFjO1FBQWQsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUZ2QixvQkFBZSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7SUFHL0MsQ0FBQzs7OztJQUVELHdDQUFROzs7SUFBUixjQUFZLENBQUM7Ozs7O0lBR2IsMENBQVU7Ozs7SUFEVixVQUNXLEtBQVk7UUFDbkIsS0FBSyxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDbEUsQ0FBQzs7Z0JBZkosU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLGlCQUFpQixFQUFFOzs7O2dCQUhSLFVBQVU7Ozt1QkFNdkMsS0FBSyxTQUFDLGVBQWU7a0NBQ3JCLE1BQU07NkJBT04sWUFBWSxTQUFDLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQzs7SUFNeEMsNEJBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWhCWSxxQkFBcUI7OztJQUU5QixxQ0FBNkI7O0lBQzdCLGdEQUErQzs7SUFFbkMsbUNBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEhvc3RMaXN0ZW5lciwgSW5wdXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuXHJcbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tpdGVtLWRibGNsaWNrXScgfSlcclxuZXhwb3J0IGNsYXNzIEl0ZW1EYmxDbGlja0RpcmVjdGl2ZSB7XHJcblxyXG4gICAgQElucHV0KCdpdGVtLWRibGNsaWNrJykgZGF0YTtcclxuICAgIEBPdXRwdXQoKSBkYmxjbGlja0hhbmRsZXIgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHVibGljIGVsOiBFbGVtZW50UmVmKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7fVxyXG5cclxuICAgIEBIb3N0TGlzdGVuZXIoJ2RibGNsaWNrJywgWyckZXZlbnQnXSlcclxuICAgIG9uZGJsY2xpY2soZXZlbnQ6IEV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5kYmxjbGlja0hhbmRsZXIuZW1pdCh7IGl0ZW06IHRoaXMuZGF0YSwgJGV2ZW50OiBldmVudCB9KTtcclxuICAgIH1cclxuXHJcbn0iXX0=