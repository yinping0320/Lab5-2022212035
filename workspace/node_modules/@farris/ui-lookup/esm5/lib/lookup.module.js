/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2018-12-04 10:43:42
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-26 13:33:30
 * @Company: Inspur
 * @Version: v0.0.1
 */
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FarrisCommonModule } from '@farris/ui-common';
import { InputGroupModule } from '@farris/ui-input-group';
import { LayoutModule } from '@farris/ui-layout';
import { LocaleModule } from '@farris/ui-locale';
import { FarrisDialogModule } from '@farris/ui-dialog';
import { MessagerModule } from '@farris/ui-messager';
import { DataTableModule, DataTableComponent } from '@farris/ui-datatable';
import { TreeTableModule, TreeTableComponent } from '@farris/ui-treetable';
import { LoadingModule } from '@farris/ui-loading';
import { NotifyModule } from '@farris/ui-notify';
import { FarrisContextMenuModule } from '@farris/ui-context-menu';
import { FarrisFormsModule } from '@farris/ui-forms';
import { LookupGridComponent } from './lookup-grid.component';
import { LookupComponent } from './lookup.component';
import { LookupLeftComponent } from './lookup-left.component';
import { LookupTabsComponent } from './lookup-tabs.component';
import { LookupTipDirective } from './lookup-tip.directive';
import { LookupQuickSelectPanelComponent } from './quick-select/quick-select-panel.component';
import { LookupQuickSelectDirective } from './quick-select/lookup-quick-select.directive';
import { LookupAdvancedLayoutComponent } from './advanced-layout/lookup-advanced-layout.component';
import { SearchBoxModule } from '@farris/ui-search-box';
import { LookupFilterBarComponent } from './advanced-layout/lookup-filter-bar.component';
import { LookupSelectedDirective } from './selected-list/lookup-selected.directive';
var LookupModule = /** @class */ (function () {
    function LookupModule() {
    }
    LookupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisCommonModule.forRoot(),
                        FarrisDialogModule.forRoot(),
                        MessagerModule.forRoot(),
                        NotifyModule.forRoot(),
                        LoadingModule.forRoot({ delay: 1000 }),
                        InputGroupModule,
                        LayoutModule,
                        DataTableModule,
                        TreeTableModule,
                        FarrisContextMenuModule,
                        LocaleModule.forRoot(),
                        SearchBoxModule,
                        FarrisFormsModule
                    ],
                    exports: [
                        LookupGridComponent,
                        LookupComponent,
                        LookupAdvancedLayoutComponent
                    ],
                    declarations: [
                        LookupGridComponent,
                        LookupComponent,
                        LookupLeftComponent,
                        LookupTabsComponent,
                        LookupTipDirective,
                        LookupQuickSelectPanelComponent,
                        LookupQuickSelectDirective,
                        LookupAdvancedLayoutComponent,
                        LookupFilterBarComponent,
                        LookupSelectedDirective
                    ],
                    providers: [],
                    entryComponents: [
                        DataTableComponent,
                        TreeTableComponent,
                        LookupLeftComponent,
                        LookupTabsComponent,
                        LookupQuickSelectPanelComponent,
                        LookupAdvancedLayoutComponent,
                        LookupFilterBarComponent
                    ]
                },] }
    ];
    return LookupModule;
}());
export { LookupModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbG9va3VwLyIsInNvdXJjZXMiOlsibGliL2xvb2t1cC5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBUUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN6QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsWUFBWSxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDdkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUMzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDM0UsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFFNUQsT0FBTyxFQUFFLCtCQUErQixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDOUYsT0FBTyxFQUFFLDBCQUEwQixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDMUYsT0FBTyxFQUFFLDZCQUE2QixFQUFFLE1BQU0sb0RBQW9ELENBQUM7QUFDbkcsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQ3pGLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ3BGO0lBQUE7SUE4QzJCLENBQUM7O2dCQTlDM0IsUUFBUSxTQUFDO29CQUNOLE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsa0JBQWtCLENBQUMsT0FBTyxFQUFFO3dCQUM1QixrQkFBa0IsQ0FBQyxPQUFPLEVBQUU7d0JBQzVCLGNBQWMsQ0FBQyxPQUFPLEVBQUU7d0JBQ3hCLFlBQVksQ0FBQyxPQUFPLEVBQUU7d0JBQ3RCLGFBQWEsQ0FBQyxPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFDLENBQUM7d0JBQ3BDLGdCQUFnQjt3QkFDaEIsWUFBWTt3QkFDWixlQUFlO3dCQUNmLGVBQWU7d0JBQ2YsdUJBQXVCO3dCQUN2QixZQUFZLENBQUMsT0FBTyxFQUFFO3dCQUN0QixlQUFlO3dCQUNmLGlCQUFpQjtxQkFDcEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLG1CQUFtQjt3QkFDbkIsZUFBZTt3QkFDZiw2QkFBNkI7cUJBQ2hDO29CQUNELFlBQVksRUFBRTt3QkFDVixtQkFBbUI7d0JBQ25CLGVBQWU7d0JBQ2YsbUJBQW1CO3dCQUNuQixtQkFBbUI7d0JBQ25CLGtCQUFrQjt3QkFDbEIsK0JBQStCO3dCQUMvQiwwQkFBMEI7d0JBQzFCLDZCQUE2Qjt3QkFDN0Isd0JBQXdCO3dCQUN4Qix1QkFBdUI7cUJBQzFCO29CQUNELFNBQVMsRUFBRSxFQUFFO29CQUNiLGVBQWUsRUFBRTt3QkFDYixrQkFBa0I7d0JBQ2xCLGtCQUFrQjt3QkFDbEIsbUJBQW1CO3dCQUNuQixtQkFBbUI7d0JBQ25CLCtCQUErQjt3QkFDL0IsNkJBQTZCO3dCQUM3Qix3QkFBd0I7cUJBQzNCO2lCQUNKOztJQUMwQixtQkFBQztDQUFBLEFBOUM1QixJQThDNEI7U0FBZixZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOC0xMi0wNCAxMDo0Mzo0MlxyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0wOS0yNiAxMzozMzozMFxyXG4gKiBAQ29tcGFueTogSW5zcHVyXHJcbiAqIEBWZXJzaW9uOiB2MC4wLjFcclxuICovXHJcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vbk1vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgRmFycmlzQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBJbnB1dEdyb3VwTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1pbnB1dC1ncm91cCc7XHJcbmltcG9ydCB7IExheW91dE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktbGF5b3V0JztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IEZhcnJpc0RpYWxvZ01vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGlhbG9nJztcclxuaW1wb3J0IHsgTWVzc2FnZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW1lc3NhZ2VyJztcclxuaW1wb3J0IHsgRGF0YVRhYmxlTW9kdWxlLCBEYXRhVGFibGVDb21wb25lbnQgfSBmcm9tICdAZmFycmlzL3VpLWRhdGF0YWJsZSc7XHJcbmltcG9ydCB7IFRyZWVUYWJsZU1vZHVsZSwgVHJlZVRhYmxlQ29tcG9uZW50IH0gZnJvbSAnQGZhcnJpcy91aS10cmVldGFibGUnO1xyXG5pbXBvcnQgeyBMb2FkaW5nTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2FkaW5nJztcclxuaW1wb3J0IHsgTm90aWZ5TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1ub3RpZnknO1xyXG5pbXBvcnQgeyBGYXJyaXNDb250ZXh0TWVudU1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29udGV4dC1tZW51JztcclxuaW1wb3J0IHsgRmFycmlzRm9ybXNNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWZvcm1zJztcclxuXHJcbmltcG9ydCB7IExvb2t1cEdyaWRDb21wb25lbnQgfSBmcm9tICcuL2xvb2t1cC1ncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cENvbXBvbmVudCB9IGZyb20gJy4vbG9va3VwLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cExlZnRDb21wb25lbnQgfSBmcm9tICcuL2xvb2t1cC1sZWZ0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cFRhYnNDb21wb25lbnQgfSBmcm9tICcuL2xvb2t1cC10YWJzLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cFRpcERpcmVjdGl2ZSB9IGZyb20gJy4vbG9va3VwLXRpcC5kaXJlY3RpdmUnO1xyXG5cclxuaW1wb3J0IHsgTG9va3VwUXVpY2tTZWxlY3RQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vcXVpY2stc2VsZWN0L3F1aWNrLXNlbGVjdC1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBMb29rdXBRdWlja1NlbGVjdERpcmVjdGl2ZSB9IGZyb20gJy4vcXVpY2stc2VsZWN0L2xvb2t1cC1xdWljay1zZWxlY3QuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTG9va3VwQWR2YW5jZWRMYXlvdXRDb21wb25lbnQgfSBmcm9tICcuL2FkdmFuY2VkLWxheW91dC9sb29rdXAtYWR2YW5jZWQtbGF5b3V0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNlYXJjaEJveE1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktc2VhcmNoLWJveCc7XHJcbmltcG9ydCB7IExvb2t1cEZpbHRlckJhckNvbXBvbmVudCB9IGZyb20gJy4vYWR2YW5jZWQtbGF5b3V0L2xvb2t1cC1maWx0ZXItYmFyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IExvb2t1cFNlbGVjdGVkRGlyZWN0aXZlIH0gZnJvbSAnLi9zZWxlY3RlZC1saXN0L2xvb2t1cC1zZWxlY3RlZC5kaXJlY3RpdmUnO1xyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIEZhcnJpc0RpYWxvZ01vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTWVzc2FnZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE5vdGlmeU1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgTG9hZGluZ01vZHVsZS5mb3JSb290KHtkZWxheTogMTAwMH0pLFxyXG4gICAgICAgIElucHV0R3JvdXBNb2R1bGUsXHJcbiAgICAgICAgTGF5b3V0TW9kdWxlLFxyXG4gICAgICAgIERhdGFUYWJsZU1vZHVsZSxcclxuICAgICAgICBUcmVlVGFibGVNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzQ29udGV4dE1lbnVNb2R1bGUsXHJcbiAgICAgICAgTG9jYWxlTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBTZWFyY2hCb3hNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzRm9ybXNNb2R1bGVcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgTG9va3VwR3JpZENvbXBvbmVudCwgXHJcbiAgICAgICAgTG9va3VwQ29tcG9uZW50LFxyXG4gICAgICAgIExvb2t1cEFkdmFuY2VkTGF5b3V0Q29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgZGVjbGFyYXRpb25zOiBbXHJcbiAgICAgICAgTG9va3VwR3JpZENvbXBvbmVudCxcclxuICAgICAgICBMb29rdXBDb21wb25lbnQsXHJcbiAgICAgICAgTG9va3VwTGVmdENvbXBvbmVudCxcclxuICAgICAgICBMb29rdXBUYWJzQ29tcG9uZW50LFxyXG4gICAgICAgIExvb2t1cFRpcERpcmVjdGl2ZSxcclxuICAgICAgICBMb29rdXBRdWlja1NlbGVjdFBhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIExvb2t1cFF1aWNrU2VsZWN0RGlyZWN0aXZlLFxyXG4gICAgICAgIExvb2t1cEFkdmFuY2VkTGF5b3V0Q29tcG9uZW50LFxyXG4gICAgICAgIExvb2t1cEZpbHRlckJhckNvbXBvbmVudCxcclxuICAgICAgICBMb29rdXBTZWxlY3RlZERpcmVjdGl2ZVxyXG4gICAgXSxcclxuICAgIHByb3ZpZGVyczogW10sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgICAgICBEYXRhVGFibGVDb21wb25lbnQsIFxyXG4gICAgICAgIFRyZWVUYWJsZUNvbXBvbmVudCwgXHJcbiAgICAgICAgTG9va3VwTGVmdENvbXBvbmVudCxcclxuICAgICAgICBMb29rdXBUYWJzQ29tcG9uZW50LFxyXG4gICAgICAgIExvb2t1cFF1aWNrU2VsZWN0UGFuZWxDb21wb25lbnQsXHJcbiAgICAgICAgTG9va3VwQWR2YW5jZWRMYXlvdXRDb21wb25lbnQsXHJcbiAgICAgICAgTG9va3VwRmlsdGVyQmFyQ29tcG9uZW50XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMb29rdXBNb2R1bGUge31cclxuIl19