/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { FilterRelation, Compare } from '@farris/ui-common/types';
import { cloneDeep } from 'lodash-es';
var LookupUtils = /** @class */ (function () {
    function LookupUtils(utils, rts, ngZone) {
        this.utils = utils;
        this.rts = rts;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} lookupIns
     * @return {?}
     */
    LookupUtils.prototype.setActiveLookupInstance = /**
     * @param {?} lookupIns
     * @return {?}
     */
    function (lookupIns) {
        if (this.rts) {
            this.rts.setLookupInstance(lookupIns);
        }
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.rts.destroy();
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.pendingStart = /**
     * @return {?}
     */
    function () {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: true
                }
            });
            // 禁用页面的所有鼠标事件
            document.body.style['pointer-events'] = 'none';
        }
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.pendingEnd = /**
     * @return {?}
     */
    function () {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: false
                }
            });
            // 激活鼠标事件
            document.body.style['pointer-events'] = '';
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.getPathCode = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        var dataField = treeInfo.dataField, pathField = treeInfo.pathField;
        if (dataField) {
            return data[dataField][pathField];
        }
        else {
            return this.utils.getValue(pathField, data);
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.getLayerData = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        var dataField = treeInfo.dataField, layerField = treeInfo.layerField;
        if (dataField) {
            return data[dataField][layerField];
        }
        else {
            return this.utils.getValue(layerField, data);
        }
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    LookupUtils.prototype.createFilterCondition = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        return {
            filterField: field,
            value: value,
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Or,
            compare: Compare.Like
        };
    };
    /**
     * @param {?} condition
     * @param {?} fields
     * @param {?} searchData
     * @return {?}
     */
    LookupUtils.prototype.mergeCondition = /**
     * @param {?} condition
     * @param {?} fields
     * @param {?} searchData
     * @return {?}
     */
    function (condition, fields, searchData) {
        var _this = this;
        if (!condition) {
            condition = {
                pagination: {
                    pageIndex: 1,
                    pageSize: 20
                },
                filterConditions: [],
                sortConditions: []
            };
        }
        else {
            condition = cloneDeep(condition);
        }
        var _a = tslib_1.__assign({}, searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
        if (value) {
            if (field === '*') {
                if (fields && fields.length) {
                    /** @type {?} */
                    var searchConditions = fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        return _this.createFilterCondition(f, value);
                    }));
                    if (searchConditions.length) {
                        searchConditions[0].lbracket = '(';
                        /** @type {?} */
                        var lastSearchConditions = searchConditions[searchConditions.length - 1];
                        lastSearchConditions.rbracket = ')';
                        lastSearchConditions.relation = FilterRelation.Empty;
                    }
                    if (condition.filterConditions && condition.filterConditions.length) {
                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                        condition.filterConditions = condition.filterConditions.concat(searchConditions);
                    }
                    else {
                        condition.filterConditions = searchConditions;
                    }
                }
            }
            else {
                /** @type {?} */
                var searchCondition = this.createFilterCondition(field, value);
                searchCondition.relation = FilterRelation.Empty;
                if (condition.filterConditions && condition.filterConditions.length) {
                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                    condition.filterConditions.push(searchCondition);
                }
                else {
                    condition.filterConditions = [searchCondition];
                }
            }
        }
        return condition;
    };
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    LookupUtils.prototype.canSelectable = /**
     * @private
     * @param {?} n
     * @return {?}
     */
    function (n) {
        if (n.hasOwnProperty('farris_selectable')) {
            return !!n['farris_selectable'];
        }
        return true;
    };
    /** 将数据转树形结构 */
    /**
     * 将数据转树形结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @return {?}
     */
    LookupUtils.prototype.makeTreeWithParentID = /**
     * 将数据转树形结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @return {?}
     */
    function (data, parentId, parentIdField, idField) {
        var _this = this;
        if (parentIdField === void 0) { parentIdField = 'parentId'; }
        if (idField === void 0) { idField = 'id'; }
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var node = {
                data: t,
                children: [],
                selectable: _this.canSelectable(t),
                parent: null,
                parents: []
            };
            /** @type {?} */
            var id = t[idField];
            nodes.set(id, node);
            /** @type {?} */
            var PID = _this.utils.getValue(parentIdField, t);
            if (PID === parentId) {
                result.push(node);
            }
            else {
                /** @type {?} */
                var parent_1 = nodes.get(PID);
                if (parent_1) {
                    node.parent = PID;
                    node.parents = tslib_1.__spread(parent_1.parents, [PID]);
                    parent_1.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var pid = _this.utils.getValue(parentIdField, n.data);
            /** @type {?} */
            var parent = nodes.get(pid);
            if (parent) {
                n.parent = pid;
                n.parents = tslib_1.__spread(parent.parents, [pid]);
                parent.children.push(n);
            }
        }));
        return result;
    };
    /**
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.makeTree = /**
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        // const treeInfoField = treeInfo.dataField;
        // const layerField = treeInfo.layerField;
        // const pathField = treeInfo.pathField;
        var _this = this;
        // const treeInfoField = treeInfo.dataField;
        // const layerField = treeInfo.layerField;
        // const pathField = treeInfo.pathField;
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var node = {
                data: t,
                children: [],
                selectable: _this.canSelectable(t)
            };
            /** @type {?} */
            var pathCode = _this.getPathCode(t, treeInfo);
            nodes.set(pathCode, node);
            if (_this.getLayerData(t, treeInfo) === 1) {
                result.push(node);
            }
            else {
                /** @type {?} */
                var parentPathCode = pathCode.substr(0, pathCode.length - 4);
                /** @type {?} */
                var parent_2 = nodes.get(parentPathCode);
                if (parent_2) {
                    parent_2.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            // const pathCode = n.data[treeInfoField][pathField];
            /** @type {?} */
            var pathCode = _this.getPathCode(n.data, treeInfo);
            /** @type {?} */
            var parent = nodes.get(pathCode.substr(0, pathCode.length - 4));
            if (parent) {
                parent.children.push(n);
            }
        }));
        return result;
    };
    LookupUtils.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookupUtils.ctorParameters = function () { return [
        { type: CommonUtils },
        { type: RuntimeStateService },
        { type: NgZone }
    ]; };
    return LookupUtils;
}());
export { LookupUtils };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.rts;
    /**
     * @type {?}
     * @private
     */
    LookupUtils.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,