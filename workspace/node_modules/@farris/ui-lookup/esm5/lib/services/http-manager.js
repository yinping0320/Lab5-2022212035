/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { cloneDeep } from 'lodash-es';
import { FavoriteAction, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';
import { of } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
// 帮助默认个性化数据
/** @type {?} */
var DefaultUserConfig = {
    tabIndex: 'datalist',
    favorite: null,
    size: null
};
var LookupHttpManager = /** @class */ (function () {
    function LookupHttpManager(ins) {
        this.ins = ins;
        // 每次帮助打开后，更新此值，做为个性化数据的初始值；
        // 关闭窗口时，与此进行对比。如果一样，则不保存；
        this._originalPersonalConfig = DefaultUserConfig;
    }
    /**
     * @private
     * @return {?}
     */
    LookupHttpManager.prototype.disablePagination = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            pageIndex: 1,
            pageSize: 500
        };
    };
    /** 构造查询参数 */
    /**
     * 构造查询参数
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    LookupHttpManager.prototype.buildQueryParams = /**
     * 构造查询参数
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        /** @type {?} */
        var params = {};
        if (event.navConditions && event.navConditions.length) {
            if (event.navConditions && event.navConditions.length === 1 && event.navConditions[0].code == '*') {
                event.search = { field: '*', value: event.navConditions[0].value };
            }
            else {
                params.navSearchConditions = event.navConditions;
            }
        }
        if (this.ins.conditions && this.ins.conditions.length && type !== 'fav') {
            params.searchConditions = cloneDeep(this.ins.conditions);
        }
        /** @type {?} */
        var searchParam = { category: type };
        if (type !== 'fav') {
            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {
                if (this.ins.navigationFilter.idValue && type !== 'textchange') {
                    params.relationFilter = tslib_1.__spread(this.ins.navigationFilter.idValue);
                }
            }
        }
        if (event) {
            if (type === 'fav' || type === 'selected') {
                event.pageInfo = this.disablePagination();
            }
            if (event.pageInfo) {
                params.pageIndex = event.pageInfo.pageIndex;
                params.pageSize = event.pageInfo.pageSize;
            }
            if (event.search) {
                /** @type {?} */
                var sfield = event.search.field;
                if (sfield && sfield === '*') {
                    sfield = '*';
                }
                if (event.search.value) {
                    event.search.value = event.search.value.trim();
                }
                searchParam.searchField = sfield;
                searchParam.searchValue = event.search.value;
                searchParam.searchType = event.search.type || 'like';
                if (event.search.value === '' && searchParam.category === 'search' && (!params.searchConditions && !params.navSearchConditions)) {
                    searchParam.category = 'all';
                }
            }
            if (event.sortName) {
                searchParam.sortName = event.sortName;
            }
            if (event.sortOrder) {
                searchParam.sortOrder = event.sortOrder;
            }
            // 分层加载支持设置展开层级
            if (!isNaN(Number(event.expandLevel)) && this.ins.isTree()) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (event.expandLevel) {
                    if (event.expandLevel === -1) {
                        event.expandLevel = 0;
                    }
                }
                else {
                    event.expandLevel = -1;
                }
                searchParam['layerNum'] = event.expandLevel;
            }
        }
        if (type === 'fav' && event.favoriteIds) {
            searchParam.favoriteIds = event.favoriteIds;
        }
        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {
            params.enableFullTree = this.ins.enableFullTree;
        }
        params.treeToList = this.ins.treeToList;
        params.navTreeToList = this.ins.navTreeToList;
        // 查询时不构造完整树
        if (type === 'textchange') {
            params.enableFullTree = false;
        }
        if (type === 'selected') {
            searchParam.category = 'fav';
            params.enableFullTree = false;
            searchParam.favoriteIds = event.favoriteIds;
        }
        params.searchValue = JSON.stringify(searchParam);
        params.loadTreeDataType = this.ins.loadTreeDataType;
        params.customData = this.ins.customData;
        if (this.ins.helpId) {
            params.helpId = this.ins.helpId;
        }
        if (event.selectedInfo) {
            params.selectedInfo = event.selectedInfo;
        }
        if (event.navNodePathCode !== undefined) {
            params.navPathCode = event.navNodePathCode;
        }
        else {
            if (type === 'navAllChildren') {
                if (this.ins.includeSubordinates && this.ins['navNodePathCode']) {
                    params.navPathCode = this.ins['navNodePathCode'];
                }
            }
        }
        return params;
    };
    /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    LookupHttpManager.prototype.getData = /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        if (this.ins.isDoublleList() && this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {
            if (this.ins.includeSubordinates && this.ins.navigationOptions.treeInfo.loadDataType === 'async') {
                type = 'navAllChildren';
            }
            else {
                type = 'list';
            }
        }
        /** @type {?} */
        var params = this.buildQueryParams(event, type);
        if (uri || this.ins.beUri) {
            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {
                /** @type {?} */
                var allSearchFields = this.ins.columns.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.searchField; })).filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f; }));
                if (!params.condition) {
                    params.condition = {};
                }
                if (!this.ins.isTree() && this.ins.pagination) {
                    var _a = tslib_1.__assign({}, params), _b = _a.pageSize, pageSize = _b === void 0 ? this.ins.pageSize || 20 : _b, pageIndex = _a.pageIndex;
                    params.condition.pagination = { pageSize: pageSize, pageIndex: pageIndex };
                }
                else {
                    params.condition.pagination = { isUsePagination: false };
                }
                /** @type {?} */
                var searchParam = JSON.parse(params.searchValue);
                if (searchParam.searchValue) {
                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {
                        field: searchParam.searchField,
                        value: searchParam.searchValue
                    });
                }
            }
            /** @type {?} */
            var _uri = this.ins.beUri || uri;
            if (this.ins.http) {
                this.ins.http.context = this.ins.context;
            }
            if (this.ins._searchResult) {
                return of(this.ins._searchResult);
            }
            if (type !== 'allChildren') {
                return this.ins.http.getData(_uri, params);
            }
            else {
                /** @type {?} */
                var params1 = {
                    searchValue: JSON.stringify({ category: type }),
                    parentsIds: event.parentsIds,
                    customData: params.customData,
                    helpId: params.helpId
                };
                return this.ins.http.getData(_uri, params1);
            }
        }
        else {
            return of(false);
        }
    };
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    /**
     * @param {?} selIds
     * @return {?}
     */
    LookupHttpManager.prototype.getSelecedItems = 
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    /**
     * @param {?} selIds
     * @return {?}
     */
    function (selIds) {
        return this.getData({ favoriteIds: selIds }, 'selected');
    };
    /**
     * @return {?}
     */
    LookupHttpManager.prototype.getPersonalConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultConf = cloneDeep(DefaultUserConfig);
        // if (this.ins.customData) {
        //     const wrapKeyData = JSON.stringify({ key: this.ins.customData });
        //     const configKeyString = this.ins.getLookupBindingFields() + wrapKeyData;
        //     this.ins.personalConfigService.personalConfigKey = configKeyString;
        // }
        /** @type {?} */
        var key = this.ins.personalConfigService._newKey;
        /** @type {?} */
        var _conf = this.ins.personalConfigService.getPersonalData(key);
        if (!_conf || !Object.keys(_conf).length) {
            _conf = defaultConf;
        }
        /** @type {?} */
        var req = of(_conf);
        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {
            return req;
        }
        if (this.ins.http && this.ins.http['getUserSettings']) {
            return this.ins.http['getUserSettings'](key).pipe(tap((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r && r.textValue) {
                    localStorage.setItem(key, r.textValue);
                }
                else {
                    localStorage.setItem(key, JSON.stringify(defaultConf));
                }
            })), map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                if (ucs) {
                    return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;
                }
                return defaultConf;
            })));
        }
        else {
            return req;
        }
    };
    /**
     * @param {?=} event
     * @param {?=} type
     * @param {?=} isQuickSelect
     * @return {?}
     */
    LookupHttpManager.prototype.lookupRequest = /**
     * @param {?=} event
     * @param {?=} type
     * @param {?=} isQuickSelect
     * @return {?}
     */
    function (event, type, isQuickSelect) {
        var _this = this;
        if (type === void 0) { type = 'all'; }
        if (isQuickSelect === void 0) { isQuickSelect = false; }
        if (!this.ins.usePersionalConf || isQuickSelect) {
            return this.getData(event, type);
        }
        /** @type {?} */
        var req = this.getPersonalConfig();
        return req.pipe(tap((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            _this.ins.personalConf = c;
            _this.ins.personalConfigService.savePersonalConfig(c);
            if (!_this.ins.isTabChanged) {
                _this._originalPersonalConfig = cloneDeep(c);
            }
        })), switchMap((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            var tabIndex = c.tabIndex, favorite = c.favorite, size = c.size, cascadeStatus = c.cascadeStatus;
            if (!_this.ins.isTabChanged) {
                _this.ins.activeTab = tabIndex || 'datalist';
            }
            if (size) {
                _this.ins.dialogWidth = size.width;
                _this.ins.dialogHeight = size.height;
                if (!_this.ins.isTabChanged) {
                    _this.ins.dialog.reSize({ width: size.width, height: size.height });
                }
            }
            if (_this.ins.cascadeStatus) {
                if (cascadeStatus && _this.ins.enableCascade && _this.ins.showCascadeControl) {
                    _this.ins.cascadeStatus = cascadeStatus;
                }
                if (_this.ins.cascadeItems) {
                    /** @type {?} */
                    var keys = ['enable', 'up', 'down', 'disable'];
                    keys.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        if (_this.ins.cascadeItems[n] === undefined) {
                            _this.ins.cascadeItems[n] = true;
                        }
                    }));
                    if (!_this.ins.cascadeItems[_this.ins.cascadeStatus]) {
                        /** @type {?} */
                        var keys_1 = Object.keys(_this.ins.cascadeItems).map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return _this.ins.cascadeItems[n] ? n : '';
                        })).filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n; }));
                        _this.ins.cascadeStatus = (/** @type {?} */ (keys_1[0]));
                    }
                }
            }
            if (_this.ins.activeTab === 'datalist') {
                return _this.getData(event, type);
            }
            else if (_this.ins.activeTab === 'favorite') {
                /** @type {?} */
                var favIds = favorite ? favorite[_this.ins.localService.localeId] : [];
                if ((!favIds || !favIds.length) && !_this.ins.isTabChanged) {
                    return _this.getData(event, 'all').pipe(map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        if (r && !r.items) {
                            r.items = [];
                        }
                        r.activeTab = 'datalist';
                        return r;
                    })));
                }
                // const _fids = favIds.filter(n => n);
                event.favoriteIds = favIds;
                event.search = null;
                return _this.getData(event, 'fav').pipe(switchMap((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    /** @type {?} */
                    var items = r ? r.items || [] : [];
                    // 加入数据权限后，没有返回数据且第1次打开窗口，非手动点击收藏标签时
                    if (!items.length && !_this.ins.isTabChanged) {
                        return _this.getData(event, 'all').pipe(map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            if (a && !a.items) {
                                a.items = [];
                            }
                            a.activeTab = 'datalist';
                            return a;
                        })));
                    }
                    else {
                        return of(r);
                    }
                })));
            }
            else if (_this.ins.activeTab === 'selected') {
                /** @type {?} */
                var selIds = _this.ins.displayValue ? _this.ins.displayValue.split(',') : [];
                /** @type {?} */
                var _sids = selIds.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                return _this.getSelecedItems(_sids);
            }
        })));
    };
    // 保存个性化数据
    // 保存个性化数据
    /**
     * @param {?} action
     * @return {?}
     */
    LookupHttpManager.prototype.submitFavoriteData = 
    // 保存个性化数据
    /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        // 保存列宽度
        this.ins.personalConf.colSizeInfo = this.getColumnSizeInfo();
        // 如果数据与默认的数据一至则不保存。
        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {
            return;
        }
        /** @type {?} */
        var msg = '';
        if (action === FavoriteAction.add) {
            msg = this.ins.addFavoriteSuccess;
        }
        else if (action === FavoriteAction.delete) {
            msg = this.ins.delFavoriteSuccess;
        }
        // 更新本地缓存
        localStorage.setItem(this.ins.personalConfigService._newKey, JSON.stringify(this.ins.personalConf));
        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});
        if (this.ins.favoriteDataFrom !== 'locale') {
            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);
            /** @type {?} */
            var configData = {
                configkey1: this.ins.personalConfigService.personalConfigKey,
                configkey2: '',
                configkey3: '',
                textvalue: JSON.stringify(this.ins.personalConf)
            };
            if (this.ins.http && this.ins.http['saveUserSettings']) {
                this.ins.savingFaoriteData = true;
                this.ins.showLoading();
                return this.ins.http['saveUserSettings'](configData).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    _this.ins.savingFaoriteData = false;
                    _this.ins.closeLoading();
                    if (msg) {
                        _this.ins.notifyService.success(msg);
                    }
                }));
            }
            else {
                if (msg) {
                    this.ins.notifyService.success(msg);
                }
            }
        }
        else {
            if (msg) {
                this.ins.notifyService.success(msg);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupHttpManager.prototype.getColumnSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colSizeInfo = { data: {}, nav: {}, fav: {}, sel: {} };
        colSizeInfo.data = this.ins.columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        function (r, n) {
            r[n.field] = n.width;
            return r;
        }), {});
        if (this.ins.favoriteColumns && this.ins.favoriteColumns.length) {
            colSizeInfo.fav = this.ins.favoriteColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.navigationOptions && this.ins.navigationOptions.columns && this.ins.navigationOptions.columns.length) {
            colSizeInfo.nav = this.ins.navigationOptions.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.selectedColumns && this.ins.selectedColumns.length && this.ins.showSelected) {
            colSizeInfo.sel = this.ins.selectedColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        return colSizeInfo;
    };
    return LookupHttpManager;
}());
export { LookupHttpManager };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupHttpManager.prototype._originalPersonalConfig;
    /**
     * @type {?}
     * @private
     */
    LookupHttpManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1tYW5hZ2VyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvaHR0cC1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBR0EsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUN0QyxPQUFPLEVBQUUsY0FBYyxFQUFFLG1CQUFtQixFQUFFLHFCQUFxQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkcsT0FBTyxFQUFjLEVBQUUsRUFBWSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQWdCLE1BQU0sZ0JBQWdCLENBQUM7OztJQUc3RCxpQkFBaUIsR0FBRztJQUN0QixRQUFRLEVBQUUsVUFBVTtJQUNwQixRQUFRLEVBQUUsSUFBSTtJQUNkLElBQUksRUFBRSxJQUFJO0NBQ2I7QUFDRDtJQUtJLDJCQUFvQixHQUF3QjtRQUF4QixRQUFHLEdBQUgsR0FBRyxDQUFxQjs7O1FBRnBDLDRCQUF1QixHQUFHLGlCQUFpQixDQUFDO0lBRUosQ0FBQzs7Ozs7SUFFekMsNkNBQWlCOzs7O0lBQXpCO1FBQ0ksT0FBTztZQUNILFNBQVMsRUFBRSxDQUFDO1lBQ1osUUFBUSxFQUFFLEdBQUc7U0FDaEIsQ0FBQztJQUNOLENBQUM7SUFFRCxhQUFhOzs7Ozs7O0lBQ2IsNENBQWdCOzs7Ozs7SUFBaEIsVUFBaUIsS0FBVyxFQUFFLElBQTRCO1FBQTVCLHFCQUFBLEVBQUEsWUFBNEI7O1lBQ2hELE1BQU0sR0FBaUIsRUFBRTtRQUUvQixJQUFJLEtBQUssQ0FBQyxhQUFhLElBQUksS0FBSyxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUU7WUFDbkQsSUFBSSxLQUFLLENBQUMsYUFBYSxJQUFJLEtBQUssQ0FBQyxhQUFhLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxLQUFLLENBQUMsYUFBYSxDQUFDLENBQUMs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QUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztnQkFDckIsT0FBTyxDQUFDLENBQUM7WUFDYixDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7U0FDVjtRQUVELElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsWUFBWSxFQUFFO1lBQ3RGLFdBQVcsQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsTUFBTTs7OztZQUFDLFVBQUMsQ0FBQyxJQUFLLE9BQUEsQ0FBQyxDQUFDLEtBQUssS0FBSyxtQkFBbUIsRUFBL0IsQ0FBK0IsRUFBQyxDQUFDLE1BQU07Ozs7O1lBQUMsVUFBQyxDQUFDLEVBQUUsQ0FBQztnQkFDbEcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDO2dCQUNyQixPQUFPLENBQUMsQ0FBQztZQUNiLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztTQUNWO1FBRUQsT0FBTyxXQUFXLENBQUM7SUFDdkIsQ0FBQztJQUVMLHdCQUFDO0FBQUQsQ0FBQyxBQXBiRCxJQW9iQzs7Ozs7OztJQWpiRyxvREFBb0Q7Ozs7O0lBRXhDLGdDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlbW90ZVBhcmFtcywgU2VhcmNoUGFyYW0sIFVzZXJGYXZvcml0ZURhdGEgfSBmcm9tICcuLi9odHRwL1JlbW90ZVBhcmFtcyc7XHJcbmltcG9ydCB7IExPQURfREFUQV9UWVBFIH0gZnJvbSAnLi4vbG9va3VwLWdyaWQtb3B0aW9ucyc7XHJcbmltcG9ydCB7IExvb2t1cEdyaWRDb21wb25lbnQgfSBmcm9tICcuLi9sb29rdXAtZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBGYXZvcml0ZUFjdGlvbiwgRkFWT1JJVEVfRklFTERfTkFNRSwgTG9va3VwR3JpZERpc3BsYXlUeXBlIH0gZnJvbSAnLi4vbG9va3VwLWRpc3BsYXl0eXBlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YXAsIGRlYm91bmNlVGltZSB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbi8vIOW4ruWKqem7mOiupOS4quaAp+WMluaVsOaNrlxyXG5jb25zdCBEZWZhdWx0VXNlckNvbmZpZyA9IHtcclxuICAgIHRhYkluZGV4OiAnZGF0YWxpc3QnLFxyXG4gICAgZmF2b3JpdGU6IG51bGwsXHJcbiAgICBzaXplOiBudWxsXHJcbn07XHJcbmV4cG9ydCBjbGFzcyBMb29rdXBIdHRwTWFuYWdlciB7XHJcbiAgICAvLyDmr4/mrKHluK7liqnmiZPlvIDlkI7vvIzmm7TmlrDmraTlgLzvvIzlgZrkuLrkuKrmgKfljJbmlbDmja7nmoTliJ3lp4vlgLzvvJtcclxuICAgIC8vIOWFs+mXreeql+WPo+aXtu+8jOS4juatpOi/m+ihjOWvueavlOOAguWmguaenOS4gOagt++8jOWImeS4jeS/neWtmO+8m1xyXG4gICAgcHJpdmF0ZSBfb3JpZ2luYWxQZXJzb25hbENvbmZpZyA9IERlZmF1bHRVc2VyQ29uZmlnO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5zOiBMb29rdXBHcmlkQ29tcG9uZW50KSB7IH1cclxuXHJcbiAgICBwcml2YXRlIGRpc2FibGVQYWdpbmF0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHBhZ2VJbmRleDogMSxcclxuICAgICAgICAgICAgcGFnZVNpemU6IDUwMFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOaehOmAoOafpeivouWPguaVsCAqL1xyXG4gICAgYnVpbGRRdWVyeVBhcmFtcyhldmVudD86IGFueSwgdHlwZTogTE9BRF9EQVRBX1RZUEUgPSAnYWxsJykge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtczogUmVtb3RlUGFyYW1zID0ge307XHJcblxyXG4gICAgICAgIGlmIChldmVudC5uYXZDb25kaXRpb25zICYmIGV2ZW50Lm5hdkNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudC5uYXZDb25kaXRpb25zICYmIGV2ZW50Lm5hdkNvbmRpdGlvbnMubGVuZ3RoID09PSAxICYmIGV2ZW50Lm5hdkNvbmRpdGlvbnNbMF0uY29kZSA9PSAnKicpIHtcclxuICAgICAgICAgICAgICAgIGV2ZW50LnNlYXJjaCA9IHsgZmllbGQ6ICcqJywgdmFsdWU6IGV2ZW50Lm5hdkNvbmRpdGlvbnNbMF0udmFsdWV9O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLm5hdlNlYXJjaENvbmRpdGlvbnMgPSBldmVudC5uYXZDb25kaXRpb25zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuY29uZGl0aW9ucyAmJiB0aGlzLmlucy5jb25kaXRpb25zLmxlbmd0aCAmJiB0eXBlICE9PSAnZmF2Jykge1xyXG4gICAgICAgICAgICBwYXJhbXMuc2VhcmNoQ29uZGl0aW9ucyA9IGNsb25lRGVlcCh0aGlzLmlucy5jb25kaXRpb25zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtOiBTZWFyY2hQYXJhbSA9IHsgY2F0ZWdvcnk6IHR5cGUgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGUgIT09ICdmYXYnKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlucy5pc0RvdWJsbGVMaXN0KCkgJiYgdGhpcy5pbnMubmF2aWdhdGlvbkZpbHRlciAmJiB0eXBlICE9PSAnYWxsJykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zLm5hdmlnYXRpb25GaWx0ZXIuaWRWYWx1ZSAmJiB0eXBlICE9PSAndGV4dGNoYW5nZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMucmVsYXRpb25GaWx0ZXIgPSBbLi4udGhpcy5pbnMubmF2aWdhdGlvbkZpbHRlci5pZFZhbHVlXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnZmF2JyB8fCB0eXBlID09PSAnc2VsZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICBldmVudC5wYWdlSW5mbyA9IHRoaXMuZGlzYWJsZVBhZ2luYXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LnBhZ2VJbmZvKSB7XHJcbiAgICAgICAgICAgICAgICBwYXJhbXMucGFnZUluZGV4ID0gZXZlbnQucGFnZUluZm8ucGFnZUluZGV4O1xyXG4gICAgICAgICAgICAgICAgcGFyYW1zLnBhZ2VTaXplID0gZXZlbnQucGFnZUluZm8ucGFnZVNpemU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChldmVudC5zZWFyY2gpIHtcclxuICAgICAgICAgICAgICAgIGxldCBzZmllbGQgPSBldmVudC5zZWFyY2guZmllbGQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2ZpZWxkICYmIHNmaWVsZCA9PT0gJyonKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2ZpZWxkID0gJyonO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChldmVudC5zZWFyY2gudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zZWFyY2gudmFsdWUgPSBldmVudC5zZWFyY2gudmFsdWUudHJpbSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtLnNlYXJjaEZpZWxkID0gc2ZpZWxkO1xyXG4gICAgICAgICAgICAgICAgc2VhcmNoUGFyYW0uc2VhcmNoVmFsdWUgPSBldmVudC5zZWFyY2gudmFsdWU7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbS5zZWFyY2hUeXBlID0gIGV2ZW50LnNlYXJjaC50eXBlIHx8ICdsaWtlJztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuc2VhcmNoLnZhbHVlID09PSAnJyAmJiBzZWFyY2hQYXJhbS5jYXRlZ29yeSA9PT0gJ3NlYXJjaCcgJiYgKCFwYXJhbXMuc2VhcmNoQ29uZGl0aW9ucyAmJiAhcGFyYW1zLm5hdlNlYXJjaENvbmRpdGlvbnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoUGFyYW0uY2F0ZWdvcnkgPSAnYWxsJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGV2ZW50LnNvcnROYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbS5zb3J0TmFtZSA9IGV2ZW50LnNvcnROYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChldmVudC5zb3J0T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgIHNlYXJjaFBhcmFtLnNvcnRPcmRlciA9IGV2ZW50LnNvcnRPcmRlcjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8g5YiG5bGC5Yqg6L295pSv5oyB6K6+572u5bGV5byA5bGC57qnXHJcbiAgICAgICAgICAgIGlmICghaXNOYU4oTnVtYmVyKGV2ZW50LmV4cGFuZExldmVsKSkgJiYgdGhpcy5pbnMuaXNUcmVlKCkpIHtcclxuICAgICAgICAgICAgICAgIC8vIOWJjeerryAtMSDkuI3lsZXlvIAgICAwIOWFqOWxleW8gFxyXG4gICAgICAgICAgICAgICAgLy8g5ZCO56uvICAwIOS4jeWxleW8gCAgLTEg5YWo5bGV5byAXHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZXhwYW5kTGV2ZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnQuZXhwYW5kTGV2ZWwgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LmV4cGFuZExldmVsID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LmV4cGFuZExldmVsID0gLTE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZWFyY2hQYXJhbVsnbGF5ZXJOdW0nXSA9IGV2ZW50LmV4cGFuZExldmVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodHlwZSA9PT0gJ2ZhdicgJiYgZXZlbnQuZmF2b3JpdGVJZHMpIHtcclxuICAgICAgICAgICAgc2VhcmNoUGFyYW0uZmF2b3JpdGVJZHMgPSBldmVudC5mYXZvcml0ZUlkcztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5pc1RyZWUoKSB8fCB0aGlzLmlucy5kaXNwbGF5VHlwZSA9PT0gTG9va3VwR3JpZERpc3BsYXlUeXBlLk5hdlRyZWVMaXN0KSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5lbmFibGVGdWxsVHJlZSA9IHRoaXMuaW5zLmVuYWJsZUZ1bGxUcmVlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFyYW1zLnRyZWVUb0xpc3QgPSB0aGlzLmlucy50cmVlVG9MaXN0O1xyXG4gICAgICAgIHBhcmFtcy5uYXZUcmVlVG9MaXN0ID0gdGhpcy5pbnMubmF2VHJlZVRvTGlzdDtcclxuXHJcbiAgICAgICAgLy8g5p+l6K+i5pe25LiN5p6E6YCg5a6M5pW05qCRXHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICd0ZXh0Y2hhbmdlJykge1xyXG4gICAgICAgICAgICBwYXJhbXMuZW5hYmxlRnVsbFRyZWUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlID09PSAnc2VsZWN0ZWQnKSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFBhcmFtLmNhdGVnb3J5ID0gJ2Zhdic7XHJcbiAgICAgICAgICAgIHBhcmFtcy5lbmFibGVGdWxsVHJlZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICBzZWFyY2hQYXJhbS5mYXZvcml0ZUlkcyA9IGV2ZW50LmZhdm9yaXRlSWRzO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcGFyYW1zLnNlYXJjaFZhbHVlID0gSlNPTi5zdHJpbmdpZnkoc2VhcmNoUGFyYW0pO1xyXG4gICAgICAgIHBhcmFtcy5sb2FkVHJlZURhdGFUeXBlID0gdGhpcy5pbnMubG9hZFRyZWVEYXRhVHlwZTtcclxuXHJcbiAgICAgICAgcGFyYW1zLmN1c3RvbURhdGEgPSB0aGlzLmlucy5jdXN0b21EYXRhO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuaGVscElkKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5oZWxwSWQgPSB0aGlzLmlucy5oZWxwSWQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQuc2VsZWN0ZWRJbmZvKSB7XHJcbiAgICAgICAgICAgIHBhcmFtcy5zZWxlY3RlZEluZm8gPSBldmVudC5zZWxlY3RlZEluZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZXZlbnQubmF2Tm9kZVBhdGhDb2RlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgcGFyYW1zLm5hdlBhdGhDb2RlID0gZXZlbnQubmF2Tm9kZVBhdGhDb2RlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlID09PSAnbmF2QWxsQ2hpbGRyZW4nKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMuaW5jbHVkZVN1Ym9yZGluYXRlcyAmJiB0aGlzLmluc1snbmF2Tm9kZVBhdGhDb2RlJ10pIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMubmF2UGF0aENvZGUgPSB0aGlzLmluc1snbmF2Tm9kZVBhdGhDb2RlJ107XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwYXJhbXM7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGdldERhdGEoZXZlbnQ/OiBhbnksIHR5cGU6IExPQURfREFUQV9UWVBFID0gJ2FsbCcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVyaSA9IHRoaXMuaW5zLmdyaWRPcHRpb25zLnVyaTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLmlzRG91YmxsZUxpc3QoKSAmJiAgdGhpcy5pbnMubmF2aWdhdGlvbkZpbHRlciAmJiB0aGlzLmlucy5uYXZpZ2F0aW9uRmlsdGVyLmlkVmFsdWUgJiYgdHlwZSAhPT0gJ2ZhdicpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmluY2x1ZGVTdWJvcmRpbmF0ZXMgJiYgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMudHJlZUluZm8ubG9hZERhdGFUeXBlID09PSAnYXN5bmMnKSB7XHJcbiAgICAgICAgICAgICAgICB0eXBlID0gJ25hdkFsbENoaWxkcmVuJztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR5cGUgPSAnbGlzdCc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHBhcmFtcyA9IHRoaXMuYnVpbGRRdWVyeVBhcmFtcyhldmVudCwgdHlwZSk7XHJcblxyXG4gICAgICAgIGlmICh1cmkgfHwgdGhpcy5pbnMuYmVVcmkpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmJlVXJpICYmIHRoaXMuaW5zLmNvbHVtbnMgJiYgdGhpcy5pbnMuY29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGFsbFNlYXJjaEZpZWxkcyA9IHRoaXMuaW5zLmNvbHVtbnMubWFwKGNvbCA9PiBjb2wuc2VhcmNoRmllbGQpLmZpbHRlcihmID0+IGYpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFwYXJhbXMuY29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNvbmRpdGlvbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnMuaXNUcmVlKCkgJiYgdGhpcy5pbnMucGFnaW5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcGFnZVNpemUgPSB0aGlzLmlucy5wYWdlU2l6ZSB8fCAyMCwgcGFnZUluZGV4IH0gPSB7IC4uLnBhcmFtcyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtcy5jb25kaXRpb24ucGFnaW5hdGlvbiA9IHsgcGFnZVNpemUsIHBhZ2VJbmRleCB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBwYXJhbXMuY29uZGl0aW9uLnBhZ2luYXRpb24gPSB7IGlzVXNlUGFnaW5hdGlvbjogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHNlYXJjaFBhcmFtID0gSlNPTi5wYXJzZShwYXJhbXMuc2VhcmNoVmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHNlYXJjaFBhcmFtLnNlYXJjaFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zLmNvbmRpdGlvbiA9IHRoaXMuaW5zLmxvb2t1cFV0aWxzLm1lcmdlQ29uZGl0aW9uKHBhcmFtcy5jb25kaXRpb24sIGFsbFNlYXJjaEZpZWxkcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWVsZDogc2VhcmNoUGFyYW0uc2VhcmNoRmllbGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBzZWFyY2hQYXJhbS5zZWFyY2hWYWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCBfdXJpID0gdGhpcy5pbnMuYmVVcmkgfHwgdXJpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmh0dHApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLmh0dHAuY29udGV4dCA9IHRoaXMuaW5zLmNvbnRleHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zLl9zZWFyY2hSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvZih0aGlzLmlucy5fc2VhcmNoUmVzdWx0KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGUgIT09ICdhbGxDaGlsZHJlbicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwLmdldERhdGEoX3VyaSwgcGFyYW1zKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmFtczEgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VhcmNoVmFsdWU6IEpTT04uc3RyaW5naWZ5KHsgY2F0ZWdvcnk6IHR5cGUgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyZW50c0lkczogZXZlbnQucGFyZW50c0lkcyxcclxuICAgICAgICAgICAgICAgICAgICBjdXN0b21EYXRhOiBwYXJhbXMuY3VzdG9tRGF0YSxcclxuICAgICAgICAgICAgICAgICAgICBoZWxwSWQ6IHBhcmFtcy5oZWxwSWRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnMuaHR0cC5nZXREYXRhKF91cmksIHBhcmFtczEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLy8gZ2V0RmF2b3JpdGVEYXRhKHBhcmFtcykge1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmdldERhdGEocGFyYW1zLCAnZmF2Jyk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgZ2V0U2VsZWNlZEl0ZW1zKHNlbElkczogYW55W10pIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKHsgZmF2b3JpdGVJZHM6IHNlbElkcyB9LCAnc2VsZWN0ZWQnKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQZXJzb25hbENvbmZpZygpIHtcclxuICAgICAgICBjb25zdCBkZWZhdWx0Q29uZiA9IGNsb25lRGVlcChEZWZhdWx0VXNlckNvbmZpZyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgLy8gaWYgKHRoaXMuaW5zLmN1c3RvbURhdGEpIHtcclxuICAgICAgICAvLyAgICAgY29uc3Qgd3JhcEtleURhdGEgPSBKU09OLnN0cmluZ2lmeSh7IGtleTogdGhpcy5pbnMuY3VzdG9tRGF0YSB9KTtcclxuICAgICAgICAvLyAgICAgY29uc3QgY29uZmlnS2V5U3RyaW5nID0gdGhpcy5pbnMuZ2V0TG9va3VwQmluZGluZ0ZpZWxkcygpICsgd3JhcEtleURhdGE7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuaW5zLnBlcnNvbmFsQ29uZmlnU2VydmljZS5wZXJzb25hbENvbmZpZ0tleSA9IGNvbmZpZ0tleVN0cmluZztcclxuICAgICAgICAvLyB9XHJcbiAgICAgICAgY29uc3Qga2V5ID0gdGhpcy5pbnMucGVyc29uYWxDb25maWdTZXJ2aWNlLl9uZXdLZXk7XHJcblxyXG4gICAgICAgIGxldCBfY29uZiA9IHRoaXMuaW5zLnBlcnNvbmFsQ29uZmlnU2VydmljZS5nZXRQZXJzb25hbERhdGEoa2V5KTtcclxuXHJcbiAgICAgICAgaWYgKCFfY29uZiB8fCAhT2JqZWN0LmtleXMoX2NvbmYpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBfY29uZiA9IGRlZmF1bHRDb25mO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCByZXEgPSBvZihfY29uZik7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5mYXZvcml0ZURhdGFGcm9tID09PSAnbG9jYWxlJyB8fCB0aGlzLmlucy5pc1RhYkNoYW5nZWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5odHRwICYmIHRoaXMuaW5zLmh0dHBbJ2dldFVzZXJTZXR0aW5ncyddKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucy5odHRwWydnZXRVc2VyU2V0dGluZ3MnXShrZXkpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICB0YXAoKHI6IGFueSkgPT4geyAvLyBURlMgNjExOTUzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgci50ZXh0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCByLnRleHRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oa2V5LCBKU09OLnN0cmluZ2lmeShkZWZhdWx0Q29uZikpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgbWFwKCh1Y3M6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1Y3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVjcy50ZXh0VmFsdWUgPyBKU09OLnBhcnNlKHVjcy50ZXh0VmFsdWUpIDogZGVmYXVsdENvbmY7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkZWZhdWx0Q29uZjtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbG9va3VwUmVxdWVzdChldmVudD86IGFueSwgdHlwZTogTE9BRF9EQVRBX1RZUEUgPSAnYWxsJywgaXNRdWlja1NlbGVjdCA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlucy51c2VQZXJzaW9uYWxDb25mIHx8IGlzUXVpY2tTZWxlY3QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YShldmVudCwgdHlwZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCByZXEgPSB0aGlzLmdldFBlcnNvbmFsQ29uZmlnKCk7XHJcblxyXG4gICAgICAgIHJldHVybiByZXEucGlwZShcclxuICAgICAgICAgICAgdGFwKChjOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zLnBlcnNvbmFsQ29uZiA9IGM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5wZXJzb25hbENvbmZpZ1NlcnZpY2Uuc2F2ZVBlcnNvbmFsQ29uZmlnKGMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlucy5pc1RhYkNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFBlcnNvbmFsQ29uZmlnID0gY2xvbmVEZWVwKGMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc3dpdGNoTWFwKChjOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHsgdGFiSW5kZXgsIGZhdm9yaXRlLCBzaXplLCBjYXNjYWRlU3RhdHVzIH0gPSBjO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pbnMuaXNUYWJDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuYWN0aXZlVGFiID0gdGFiSW5kZXggfHwgJ2RhdGFsaXN0JztcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmRpYWxvZ1dpZHRoID0gc2l6ZS53aWR0aDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5kaWFsb2dIZWlnaHQgPSBzaXplLmhlaWdodDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlucy5pc1RhYkNoYW5nZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuZGlhbG9nLnJlU2l6ZSh7IHdpZHRoOiBzaXplLndpZHRoLCBoZWlnaHQ6IHNpemUuaGVpZ2h0IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCB0aGlzLmlucy5jYXNjYWRlU3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNhc2NhZGVTdGF0dXMgJiYgdGhpcy5pbnMuZW5hYmxlQ2FzY2FkZSAmJiB0aGlzLmlucy5zaG93Q2FzY2FkZUNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuY2FzY2FkZVN0YXR1cyA9IGNhc2NhZGVTdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMuY2FzY2FkZUl0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBbJ2VuYWJsZScsICd1cCcsICdkb3duJywgJ2Rpc2FibGUnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5cy5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmNhc2NhZGVJdGVtc1tuXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMuY2FzY2FkZUl0ZW1zW25dID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaW5zLmNhc2NhZGVJdGVtc1t0aGlzLmlucy5jYXNjYWRlU3RhdHVzXSApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0aGlzLmlucy5jYXNjYWRlSXRlbXMpLm1hcChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnMuY2FzY2FkZUl0ZW1zW25dID8gbjogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS5maWx0ZXIobiA9PiBuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmNhc2NhZGVTdGF0dXMgPSBrZXlzWzBdIGFzIGFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pbnMuYWN0aXZlVGFiID09PSAnZGF0YWxpc3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YShldmVudCwgdHlwZSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5zLmFjdGl2ZVRhYiA9PT0gJ2Zhdm9yaXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZhdklkcyA9IGZhdm9yaXRlID8gZmF2b3JpdGVbdGhpcy5pbnMubG9jYWxTZXJ2aWNlLmxvY2FsZUlkXSA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoIWZhdklkcyB8fCAhZmF2SWRzLmxlbmd0aCkgJiYgIXRoaXMuaW5zLmlzVGFiQ2hhbmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXREYXRhKGV2ZW50LCAnYWxsJykucGlwZShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChyID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAociAmJiAhci5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLml0ZW1zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuYWN0aXZlVGFiID0gJ2RhdGFsaXN0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBjb25zdCBfZmlkcyA9IGZhdklkcy5maWx0ZXIobiA9PiBuKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5mYXZvcml0ZUlkcyA9IGZhdklkcztcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5zZWFyY2ggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERhdGEoZXZlbnQsICdmYXYnKS5waXBlKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAociA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpdGVtcyA9IHIgPyByLml0ZW1zIHx8IFtdIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyDliqDlhaXmlbDmja7mnYPpmZDlkI7vvIzmsqHmnInov5Tlm57mlbDmja7kuJTnrKwx5qyh5omT5byA56qX5Y+j77yM6Z2e5omL5Yqo54K55Ye75pS26JeP5qCH562+5pe2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWl0ZW1zLmxlbmd0aCAmJiAhdGhpcy5pbnMuaXNUYWJDaGFuZ2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGF0YShldmVudCwgJ2FsbCcpLnBpcGUoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChhID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhICYmICFhLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5hY3RpdmVUYWIgPSAnZGF0YWxpc3QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW5zLmFjdGl2ZVRhYiA9PT0gJ3NlbGVjdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbElkcyA9IHRoaXMuaW5zLmRpc3BsYXlWYWx1ZSA/IHRoaXMuaW5zLmRpc3BsYXlWYWx1ZS5zcGxpdCgnLCcpIDogW107XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgX3NpZHMgPSBzZWxJZHMuZmlsdGVyKG4gPT4gbik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0U2VsZWNlZEl0ZW1zKF9zaWRzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOS/neWtmOS4quaAp+WMluaVsOaNrlxyXG4gICAgc3VibWl0RmF2b3JpdGVEYXRhKGFjdGlvbjogYW55IHwgRmF2b3JpdGVBY3Rpb24pIHtcclxuXHJcbiAgICAgICAgLy8g5L+d5a2Y5YiX5a695bqmXHJcbiAgICAgICAgdGhpcy5pbnMucGVyc29uYWxDb25mLmNvbFNpemVJbmZvID0gdGhpcy5nZXRDb2x1bW5TaXplSW5mbygpO1xyXG5cclxuICAgICAgICAvLyDlpoLmnpzmlbDmja7kuI7pu5jorqTnmoTmlbDmja7kuIDoh7PliJnkuI3kv53lrZjjgIJcclxuICAgICAgICBpZiAoSlNPTi5zdHJpbmdpZnkodGhpcy5pbnMucGVyc29uYWxDb25mKSA9PT0gSlNPTi5zdHJpbmdpZnkodGhpcy5fb3JpZ2luYWxQZXJzb25hbENvbmZpZykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IG1zZyA9ICcnO1xyXG4gICAgICAgIGlmIChhY3Rpb24gPT09IEZhdm9yaXRlQWN0aW9uLmFkZCkge1xyXG4gICAgICAgICAgICBtc2cgPSB0aGlzLmlucy5hZGRGYXZvcml0ZVN1Y2Nlc3M7XHJcbiAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24gPT09IEZhdm9yaXRlQWN0aW9uLmRlbGV0ZSkge1xyXG4gICAgICAgICAgICBtc2cgPSB0aGlzLmlucy5kZWxGYXZvcml0ZVN1Y2Nlc3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOabtOaWsOacrOWcsOe8k+WtmFxyXG4gICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMuaW5zLnBlcnNvbmFsQ29uZmlnU2VydmljZS5fbmV3S2V5LCBKU09OLnN0cmluZ2lmeSh0aGlzLmlucy5wZXJzb25hbENvbmYpKTtcclxuICAgICAgICB0aGlzLmlucy5wZXJzb25hbENvbmZpZ1NlcnZpY2Uuc2F2ZVBlcnNvbmFsQ29uZmlnKHRoaXMuaW5zLnBlcnNvbmFsQ29uZiB8fCB7fSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlucy5mYXZvcml0ZURhdGFGcm9tICE9PSAnbG9jYWxlJykge1xyXG4gICAgICAgICAgICB0aGlzLl9vcmlnaW5hbFBlcnNvbmFsQ29uZmlnID0gY2xvbmVEZWVwKHRoaXMuaW5zLnBlcnNvbmFsQ29uZik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjb25maWdEYXRhOiBVc2VyRmF2b3JpdGVEYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgY29uZmlna2V5MTogdGhpcy5pbnMucGVyc29uYWxDb25maWdTZXJ2aWNlLnBlcnNvbmFsQ29uZmlnS2V5LFxyXG4gICAgICAgICAgICAgICAgY29uZmlna2V5MjogJycsXHJcbiAgICAgICAgICAgICAgICBjb25maWdrZXkzOiAnJyxcclxuICAgICAgICAgICAgICAgIHRleHR2YWx1ZTogSlNPTi5zdHJpbmdpZnkodGhpcy5pbnMucGVyc29uYWxDb25mKVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaW5zLmh0dHAgJiYgdGhpcy5pbnMuaHR0cFsnc2F2ZVVzZXJTZXR0aW5ncyddKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5zYXZpbmdGYW9yaXRlRGF0YSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5zaG93TG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zLmh0dHBbJ3NhdmVVc2VyU2V0dGluZ3MnXShjb25maWdEYXRhKS5zdWJzY3JpYmUoKHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucy5zYXZpbmdGYW9yaXRlRGF0YSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zLmNsb3NlTG9hZGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtc2cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubm90aWZ5U2VydmljZS5zdWNjZXNzKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnMubm90aWZ5U2VydmljZS5zdWNjZXNzKG1zZyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAobXNnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlucy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MobXNnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldENvbHVtblNpemVJbmZvKCkge1xyXG4gICAgICAgIGNvbnN0IGNvbFNpemVJbmZvID0ge2RhdGE6IHt9LCBuYXY6IHt9LCBmYXY6IHt9LCBzZWw6IHt9fTtcclxuICAgICAgICBjb2xTaXplSW5mby5kYXRhID0gdGhpcy5pbnMuY29sdW1ucy5maWx0ZXIoKGMpID0+IGMuZmllbGQgIT09IEZBVk9SSVRFX0ZJRUxEX05BTUUpLnJlZHVjZSgociwgbikgPT4ge1xyXG4gICAgICAgICAgICByW24uZmllbGRdID0gbi53aWR0aDtcclxuICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgfSwge30pO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuZmF2b3JpdGVDb2x1bW5zICYmIHRoaXMuaW5zLmZhdm9yaXRlQ29sdW1ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29sU2l6ZUluZm8uZmF2ID0gdGhpcy5pbnMuZmF2b3JpdGVDb2x1bW5zLmZpbHRlcigoYykgPT4gYy5maWVsZCAhPT0gRkFWT1JJVEVfRklFTERfTkFNRSkucmVkdWNlKChyLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByW24uZmllbGRdID0gbi53aWR0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMgJiYgdGhpcy5pbnMubmF2aWdhdGlvbk9wdGlvbnMuY29sdW1ucyAmJiB0aGlzLmlucy5uYXZpZ2F0aW9uT3B0aW9ucy5jb2x1bW5zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb2xTaXplSW5mby5uYXYgPSB0aGlzLmlucy5uYXZpZ2F0aW9uT3B0aW9ucy5jb2x1bW5zLmZpbHRlcigoYykgPT4gYy5maWVsZCAhPT0gRkFWT1JJVEVfRklFTERfTkFNRSkucmVkdWNlKChyLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICByW24uZmllbGRdID0gbi53aWR0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICB9LCB7fSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5pbnMuc2VsZWN0ZWRDb2x1bW5zICYmIHRoaXMuaW5zLnNlbGVjdGVkQ29sdW1ucy5sZW5ndGggJiYgdGhpcy5pbnMuc2hvd1NlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgIGNvbFNpemVJbmZvLnNlbCA9IHRoaXMuaW5zLnNlbGVjdGVkQ29sdW1ucy5maWx0ZXIoKGMpID0+IGMuZmllbGQgIT09IEZBVk9SSVRFX0ZJRUxEX05BTUUpLnJlZHVjZSgociwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgcltuLmZpZWxkXSA9IG4ud2lkdGg7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICAgICAgfSwge30pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gY29sU2l6ZUluZm87XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==