/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/*
 * @Author: 疯狂秀才(lucas huang)
 * @Date: 2018-11-23 11:23:12
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2020-10-20 20:18:26
 * @Company: Inspur
 * @Version: v0.3.x
 */
import { Component, Input, ViewChild, EventEmitter, Injector, ComponentFactoryResolver, Output, ChangeDetectorRef, ViewEncapsulation, ViewContainerRef, forwardRef, ElementRef, NgZone, Renderer2, } from "@angular/core";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { of, Subject } from "rxjs";
import { LocaleService } from "@farris/ui-locale";
import { MessagerService } from "@farris/ui-messager";
import { LoadingService } from "@farris/ui-loading";
import { DataTableComponent } from "@farris/ui-datatable";
import { TreeTableComponent } from "@farris/ui-treetable";
import { LayoutComponent, LayoutPanelComponent } from "@farris/ui-layout";
import { CommonUtils, DebugService, FarrisComponentInstanceService, OverLayHiddenService } from "@farris/ui-common";
import { ShortcutsService } from "@farris/ui-shortcuts";
import { InputGroupComponent } from "@farris/ui-input-group";
import { NotifyService } from "@farris/ui-notify";
import { FAVORITE_FIELD_NAME, INPUT_GROUP_ICON, LookupGridDisplayType, QuickSelectDefaultOptions, SearchBarMode, } from "./lookup-displaytype";
import { LookupComponent } from "./lookup.component";
import { lookupGridDefaults, displayInfoDefault } from "./lookup-grid-options";
import { ServerSideToken } from "./http/ILookupHttpService";
import { LookupDefaultMapping } from "./lookup-defaut-mapping";
import { LookupUtils } from "./utils";
import { PersonalConfigService } from "./lookup-presonalConfig.service";
import { UtilService, TreeNodeHelper, FavoriteHelper, SelectionManager, DataTableEventManager, TreeTableEventManager, MultiSelectionManager, LookupHttpManager, LookupComponentManager, LookupDialogManager, onTextChanged, LookupSelectionService, } from "./services";
import { map, switchMap } from "rxjs/operators";
import { EventManager } from "@angular/platform-browser";
import { cloneDeep } from "lodash-es";
import { SingleSelectDirective } from "@farris/ui-forms";
/** @type {?} */
export var LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LookupGridComponent; })),
    multi: true,
};
var LookupGridComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LookupGridComponent, _super);
    function LookupGridComponent(injector, cfr, el, utils, defaultMapping, changeDetector, shortcuts, lookupUtils, zone, render2) {
        var _this = _super.call(this, injector, el, changeDetector) || this;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.el = el;
        _this.utils = utils;
        _this.defaultMapping = defaultMapping;
        _this.changeDetector = changeDetector;
        _this.shortcuts = shortcuts;
        _this.lookupUtils = lookupUtils;
        _this.zone = zone;
        _this.render2 = render2;
        _this.groupIcon = INPUT_GROUP_ICON;
        _this._displayType = "";
        /**
         * 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false
         */
        _this.customDisplayType = false;
        _this.viewType = "text";
        /**
         * 启用清空按钮
         */
        _this.enableClear = true;
        /**
         * 服务器端排序
         */
        _this.remoteSort = true;
        /**
         * 树表显示全选复选框。 默认不显示
         */
        _this.showCheckAll = false;
        /**
         * 是否启用多选
         */
        _this.singleSelect = true;
        /**
         * 多选分隔符, 默认为 ,
         */
        _this.multipleChoiceSeparator = ",";
        /**
         * 可以为元数据ID、webapiURL
         */
        _this.uri = '';
        /**
         * BE REST RUI
         * - 此处设置后 uri 失效
         */
        _this.beUri = "";
        /**
         * 显示过滤工具条; 默认 true
         */
        _this.showFilterBar = true;
        /**
         * 是否启用分页
         */
        _this.pagination = true;
        /**
         * 当前页索引，从 1开始
         */
        _this.pageIndex = 1;
        /**
         * 每页记录数
         */
        _this.pageSize = 20;
        /**
         * 可用分页记录数列表
         */
        _this.pageList = [10, 20, 30, 50, 100];
        /**
         * 总记录数
         */
        _this.total = 0;
        /** 可拖动列 */
        // @Input() resizableColumns = true;
        /**
         * 显示列信息, 默认为 []
         */
        _this.columns = [];
        /**
         * 帮助查询是否为远端查询
         */
        _this.remoteSearch = true;
        /**
         * 文本变化后，进行服务器端查询
         */
        _this.searchOnServer = true;
        /**
         * 不进行服务器查询，有啥算啥
         */
        _this.nosearch = false;
        /**
         * 启用任意输入后，值通过输入时触发
         */
        _this.clearMappings = new EventEmitter();
        // 收藏列表
        _this.favoriteItems = [];
        /**
         * 是否启用级联选择控制选项
         */
        _this.enableCascade = false;
        /**
         * 级联控制默认值： enable: 同步选择, up：包含上级, down：包含下级, disable：仅选择自身
         */
        _this.cascadeStatus = "enable";
        /**
         * 分别级联选项的启用状态，默认全部启用
         */
        _this.cascadeItems = {
            enable: true,
            up: true,
            down: true,
            disable: true
        };
        /**
         * 显示级联控制
         */
        _this.showCascadeControl = true;
        _this.placeholder = "";
        /**
         * 显示已选记录列表。 默认为 false 不显示
         */
        _this.showSelected = false;
        /**
         * 应用收藏夹
         */
        _this.useFavorite = false;
        /**
         * 收藏数据来自于： locale: 本地存储， remote: 服务器端存储
         */
        _this.favoriteDataFrom = "remote";
        /**
         * 使用提示,快捷选择
         */
        _this.useTip = false;
        /**
         * 记录窗口大小
         */
        _this.isRecordSize = false;
        /**
         * 是否启用选中value值对应的行数据，默认 true
         */
        _this.enableToSelect = true;
        _this.enableFindText = false;
        /**
         * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
         */
        _this.expandLevel = -1;
        _this.navTreeTableOptions = {};
        _this.treeTableOptions = {};
        _this.dataTableOptions = {};
        _this.defaultTreeTableOptions = {
            maxLevel: 9,
            enableContextMenu: false,
            contextMenuItems: [],
        };
        /**
         * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
         */
        _this.loadTreeDataType = "default";
        /**
         * 窗口打开后立即加载数据，默认为 true
         */
        _this.loadDataWhenOpen = true;
        /**
         * 导航列表，树列表在帮助打开后选中的数据;
         * 设置后，`selectFirstInNav` 失效！
         */
        _this.navSelectedIds = "";
        /**
         * 导航帮助，选中第1条数据，默认为 false;
         * 注意：当`navSelectedIds`不为空时，此属性失效。
         */
        _this.selectFirstInNav = false;
        /**
         * 启用构造完整树过滤
         */
        _this.enableFullTree = true;
        /**
         * 显示文本自定义函数
         */
        _this.displayFormatter = undefined;
        /**
         * 显示文本字段集合，以 英文 逗号隔开
         */
        _this.displayFields = "";
        _this.displayTextSeparator = "_";
        /**
         * 帮助元数据ID，不为空时调用指定的URI
         * /api/runtime/bcc/v1.0/help/data/{helpId}
         */
        _this.helpId = "";
        /**
         * 文本对齐方式； left | center | right; 默认 left
         */
        _this.textAlign = "left";
        /**
         * 鼠标滑过输入框时显示输入框内的文本信息
         */
        _this.enableTitle = true;
        _this.useExtendInfo = false;
        _this.extInfoFields = "";
        _this.extendInfo = "";
        /**
         * IDE 设计器自定义格式化 2103
         */
        _this.customFormatter = null;
        _this.customNavFormatter = null;
        /**
         * 自定义确定事件
         */
        _this.okHandler = null;
        /**
         * 自定义取消事件
         */
        _this.cancelHandler = null;
        _this.tagboxHeight = "auto";
        /**
         * 启用获取所有子级数据的功能,仅支持分级码
         */
        _this.enableGetAllChildNodes = true;
        _this.shortcutKey = {
            /**
             * 打开帮助窗口
             */
            open: "ArrowRight",
            /**
             * 确认选择数据
             */
            confirm: "Enter",
            /**
             * 搜索框焦点
             */
            searchFocus: "F3",
            /**
             * 选中上一条
             */
            moveUp: "ArrowUp",
            /**
             * 选中下一条
             */
            moveDown: "ArrowDown",
            /**
             * 展开节点
             */
            expand: "ArrowRight",
            /**
             * 折叠节点
             */
            collapse: "ArrowLeft",
            /**
             * 下一页
             */
            nextPager: "PageDown",
            /**
             * 上一页
             */
            prevPager: "PageUp",
        };
        /**
         * 快捷选择相关配置项，默认为 null, 即不启用此功能
         */
        _this.quickSelect = null;
        /**
         * 树形帮助 是否使用树形结构数据。默认为 true, 当为 false 时，服务器端无须构造树形结构，按普通列表输出
         */
        _this.treeToList = false;
        _this.navTreeToList = false;
        /**
         * 带导航的帮助中，是否显示左侧导航部分。默认 true
         */
        _this.showNavigation = true;
        /**
         * 是否启用新布局
         * - 默认 false
         */
        _this.useNewLayout = false;
        /**
         * 启用多字段查询 默认为 false
         * - 启用此特性后，useNewLayout 自动启用
         */
        _this.enableMultiFieldSearch = false;
        /**
         * 搜索工具条显示模式， both: 全部显示；onlyfield: 仅显示字段；onlyinput: 仅显示搜索输入框。默认 both
         */
        _this.searchBarMode = SearchBarMode.both;
        /**
         * 允许查询的字段，仅启用多字段查询时有效，多个字段以 “,” 隔开；
         *  - nav 左侧导航字段；main 主数据字段;
         *  - 默认为 null, 即从所有显示列中自动提取
         */
        _this.allowQueryFields = null;
        _this.labels = {
            /**
             * 数据列表
             */
            dataTab: '',
            /**
             * 收藏夹
             */
            favTab: '',
            /**
             * 取消已选
             */
            clearAllSelected: '',
            /**
             * 已选记录面板中 删除已选
             */
            delSelected: ''
        };
        /**
         * 允许任意字段进行查询； 默认 true
         */
        _this.searchAnyField = true;
        _this.selectedData = new EventEmitter();
        _this.clear = new EventEmitter();
        /**
         * 未启用多字段查询时触发
         */
        _this.search = new EventEmitter();
        /**
         * 启用多字段查询时触发
         */
        _this.query = new EventEmitter();
        // 帮助文本框中值变化事件
        _this.valueChanged = new EventEmitter();
        _this.loadSuccess = new EventEmitter();
        _this.pagerChanged = new EventEmitter();
        _this.expandTreeNode = new EventEmitter();
        _this.textChanged = new EventEmitter();
        _this.checkedChange = new EventEmitter();
        _this.tagRemoved = new EventEmitter();
        /**
         * 内容中留白边距
         */
        _this.containerMargin = { top: 0, bottom: 5, left: 14, right: 14 };
        _this.containerStyle = {};
        _this._gridOptions = lookupGridDefaults;
        // 导航帮助左则宽度
        _this.leftPanelWidth = 320;
        // 导航帮助窗口最小宽度
        _this.navLookupDialogMinWidth = 960;
        _this.navigationFilter = null;
        _this.subscriptions = [];
        _this.isTextChange = false;
        _this.isTabChanged = false;
        _this.displayInfo = Object.assign({}, displayInfoDefault);
        _this.tabChangeSubscription = null;
        // 暂存行点击数据  用于收藏
        _this.personalConf = {};
        _this.favoriteColumns = [];
        /**
         * 临时查询参数
         */
        _this._searchState = null;
        _this.allData = [];
        _this.allColumnsTitle = "所有列";
        _this.mustWriteSomething = "请输入关键字后查询。";
        _this.mustChoosAdatarow = "请选择一条记录！";
        _this.addFavoriteSuccess = "收藏成功。";
        _this.delFavoriteSuccess = "移除收藏成功。";
        /**
         * 使用内置的查询方法, 默认 false
         */
        _this.useInsideSearchHandler = false;
        _this.searching = false;
        /**
         * 临时存储查询结果集
         */
        _this._searchResult = null;
        _this.lookupinitializationSubject = new Subject();
        /**
         * 多选时，选中的数据
         */
        _this.currentSelectedItems = of([]);
        /**
         * 已选数据列信息
         */
        _this.selectedColumns = [];
        _this.activeTab = "datalist";
        _this.favHelper = null;
        _this.ttEventMgr = null;
        _this.multiSelMgr = null;
        _this.httpMgr = null;
        _this.lookupCmpMgr = null;
        _this.dialogMgr = null;
        _this.selectionMgr = null;
        _this.dtEventMgr = null;
        _this.lookupSelectionSer = null;
        _this.controlId = "";
        _this.savingFaoriteData = false;
        _this.isReady = false;
        _this.showTagboxClearButton = false;
        _this.hasError = false;
        _this.cascadeStatusItems = [
            { valeu: 'enable', label: '' },
            { valeu: 'up', label: '' },
            { valeu: 'down', label: '' },
            { valeu: 'disable', label: '' }
        ];
        _this.isGetAllChidlNodes = false;
        /**
         * 选中记录ID，自定义帮助取数时使用
         */
        _this.selectedIds = [];
        _this.lookupSearchInputEvent = null;
        _this.farrisInstances = null;
        /**
         * 用户初始设置
         */
        _this._userSettings = {};
        _this._treeInfo_ = null;
        /**
         * dialog 内容区域高度。 弹窗总高度 - 头部高度 - 脚部高度 - （启用收藏 TAB头高度）
         */
        _this.dialogContentHeight = 0;
        /**
         * 左树右列表， 左树点击节点查询时是否包括下级节点的数据，默认 false
         */
        _this.includeSubordinates = false;
        _this.includeSubordinates$ = new Subject();
        _this.includeSubordinates$$ = null;
        _this.debugSer = null;
        _this.createInstance();
        _this.currentSelectedItems = _this.lookupSelectionSer.selected$;
        _this.eventManager = _this.injector.get(EventManager);
        _this.farrisInstances = _this.injector.get(FarrisComponentInstanceService, null);
        _this.overLayService = new OverLayHiddenService();
        _this.debugSer = _this.injector.get(DebugService, null);
        if (_this.debugSer) {
            _this.debugSer.useDebugMode();
        }
        _this.lookupSelectionSer.selectionChanged$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.selectedDtRef) {
                if (!e.selected) {
                    _this.selectedDtRef.unCheckRows(e.data);
                }
            }
        }));
        _this.initLabels();
        return _this;
    }
    Object.defineProperty(LookupGridComponent.prototype, "displayType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayType;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                /** @type {?} */
                var types = Object.values(LookupGridDisplayType);
                /** @type {?} */
                var i = types.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n === val.toUpperCase(); }));
                if (i > -1) {
                    /** @type {?} */
                    var keys = Object.keys(LookupGridDisplayType);
                    this._displayType = LookupGridDisplayType[keys[i]];
                }
            }
            else {
                this._displayType = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "gridOptions", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.useFavorite &&
                this.columns &&
                this.columns.length > 0 &&
                !this.columns.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.field === FAVORITE_FIELD_NAME; }))) {
                this.columns.push({
                    field: FAVORITE_FIELD_NAME,
                    title: "",
                    width: 40,
                    align: "center",
                    fixed: 'right',
                    // fixedWidth: true,
                    formatter: this.favHelper.favoriteColumnFormatter,
                });
            }
            this._gridOptions = Object.assign(this._gridOptions, {
                singleSelect: this.singleSelect,
                idField: this.idField,
                uri: this.uri,
                showFilterBar: this.enableMultiFieldSearch ? false : this.showFilterBar,
                pagination: this.pagination,
                pageIndex: this.pageIndex,
                pageSize: this.pageSize,
                pageList: this.pageList,
                total: this.total,
                items: this.items,
                columns: this.columns,
                resizableColumns: true,
                fixedHeader: true,
                hover: true,
                treeInfo: this.treeInfo,
                searchAnyField: this.searchAnyField
            });
            return this._gridOptions;
        },
        set: /**
         * @param {?} opts
         * @return {?}
         */
        function (opts) {
            this._gridOptions = Object.assign({}, this._gridOptions, opts);
            // this.selectedColumns = this.multiSelMgr.initSelectedColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectItems = this.lookupSelectionSer.getSelections();
            if (this.singleSelect) {
                return selectItems[0];
            }
            else {
                return selectItems;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "usePersionalConf", {
        get: /**
         * @return {?}
         */
        function () {
            return this.useFavorite || this.useTip || this.isRecordSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "displayTextList", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.displayText) {
                return this.displayText.split(this.multipleChoiceSeparator);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "userInitialConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userSettings;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.initLabels = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.labels) {
            this.labels = {
                /**
                 * 数据列表
                 */
                dataTab: '',
                /**
                 * 收藏夹
                 */
                favTab: '',
                /**
                 * 取消已选
                 */
                clearAllSelected: '',
                /**
                 * 已选记录面板中 删除已选
                 */
                delSelected: ''
            };
        }
        if (!this.labels.clearAllSelected) {
            this.labels.clearAllSelected = this.localService.getValue('lookup.selectedInfo.clear');
        }
        if (!this.labels.favTab) {
            this.labels.favTab = this.localService.getValue('lookup.favorites');
        }
        if (!this.labels.dataTab) {
            this.labels.dataTab = this.localService.getValue('lookup.datalist');
        }
    };
    /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    LookupGridComponent.prototype.writeConsole = /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            this.debugSer[type](msg);
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getFilterBarHeight = /**
     * @return {?}
     */
    function () {
        return (this.showFilterBar && this.enableMultiFieldSearch ? 42 : 0);
    };
    /**
     * @param {?=} isDouble
     * @return {?}
     */
    LookupGridComponent.prototype.getSpaceWidth = /**
     * @param {?=} isDouble
     * @return {?}
     */
    function (isDouble) {
        if (isDouble === void 0) { isDouble = false; }
        return (!this.enableMultiFieldSearch ? 28 : 48) + (isDouble ? (this.enableMultiFieldSearch ? 5 : 7) : 0);
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.cacheUserConfig = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._userSettings._title = this.title;
        this.displayInfo.title = this.title;
        this._userSettings._columns = this.deepClone(this.columns || []);
        this._userSettings.getColumns = (/**
         * @return {?}
         */
        function () {
            return _this._userSettings._columns;
        });
        this._userSettings.reset = (/**
         * @return {?}
         */
        function () {
            _this.title = _this._userSettings._title;
            _this.displayInfo.title = _this.title;
            _this.columns = _this._userSettings.getColumns();
        });
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    LookupGridComponent.prototype.deepClone = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj === null) {
            return null;
        }
        /** @type {?} */
        var clone = Object.assign({}, obj);
        Object.keys(clone).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return (clone[key] =
                typeof obj[key] === "object"
                    ? _this.deepClone(obj[key])
                    : obj[key]);
        }));
        if (Array.isArray(obj)) {
            clone.length = obj.length;
            return Array.from(clone);
        }
        return clone;
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.cacheUserConfig();
        if (!this.loadTreeDataType) {
            this.loadTreeDataType = "default";
        }
        this.checkGridOptions();
        this.displayInfo.title = this.title;
        /** 传递上下文 */
        if (this.http) {
            this.http.context = this.context;
        }
        this.allColumnsTitle = this.localService.getValue("lookup.allColumns");
        this.mustWriteSomething = this.localService.getValue("lookup.mustWriteSomething");
        this.mustChoosAdatarow = this.localService.getValue("lookup.mustChoosAdatarow");
        this.addFavoriteSuccess =
            this.localService.getValue("lookup.favoriteInfo.addFav") ||
                this.addFavoriteSuccess;
        this.delFavoriteSuccess =
            this.localService.getValue("lookup.favoriteInfo.cancelFav") ||
                this.delFavoriteSuccess;
        this.dialogMgr.onDialogCreated();
        this._treeInfo_ = this.treeInfo ? cloneDeep(this.treeInfo) : null;
        if (this.quickSelect) {
            this.quickSelect = Object.assign({}, QuickSelectDefaultOptions, this.quickSelect || {});
        }
        this.setContainerMargin();
    };
    /** 内容中留白边距 */
    /**
     * 内容中留白边距
     * @return {?}
     */
    LookupGridComponent.prototype.setContainerMargin = /**
     * 内容中留白边距
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mrn = !this.enableMultiFieldSearch ? 14 : 24;
        /** @type {?} */
        var mb = !this.enableMultiFieldSearch ? 5 : 0;
        this.containerMargin = { top: 0, bottom: mb, left: mrn, right: mrn };
        if (this.enableMultiFieldSearch) {
            this.useNewLayout = true;
        }
        this.containerStyle = {
            marginLeft: this.containerMargin.left + "px",
            marginRight: this.containerMargin.right + "px",
            marginTop: this.containerMargin.top + "px",
            marginBottom: this.containerMargin.bottom + "px",
        };
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.subscriptions.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n) {
                n.unsubscribe();
                n = null;
            }
        }));
        if (this.selectionMgr) {
            this.selectionMgr.destroy();
        }
        this.subscriptions = [];
        if (this.farrisInstances) {
            this.farrisInstances.destroy(this.el.nativeElement);
        }
        if (this.lookupSearchInputEvent) {
            this.lookupSearchInputEvent();
        }
        this.lookupUtils.destroy();
        this.overLayService.destory(this.el.nativeElement);
        this.overLayService = null;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.cacheUserConfig();
        }
        if (changes.enableMultiFieldSearch && !changes.enableMultiFieldSearch.isFirstChange()) {
            this.setContainerMargin();
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.quickSelect || !this.quickSelect.enable) {
            this.lookupSearchInputEvent = onTextChanged.bind(this)();
        }
        // 初始化个性化配置
        if (this.usePersionalConf) {
            this.favHelper.initPersonalInfo();
        }
        if (this.useExtendInfo) {
            /** @type {?} */
            var jsonData = this.selectionMgr.getBindingData();
            this.updateExtendInfo(jsonData, false);
        }
        if (this.viewType === "text") {
            // this.shortcuts.add({
            //     key: 'F2',
            //     target: this.inputGroup.textbox.nativeElement,
            //     command: () => {
            //         this.showDialog();
            //     }
            // });
            this.render2.listen(this.inputGroup.textbox.nativeElement, "keydown.F2", this.showDialog.bind(this));
        }
        else {
            this.registerMouseEventForTagView();
            if (this.tagboxHeight) {
                /** @type {?} */
                var el = this.tagbox.nativeElement.querySelector(".multi-more");
                /** @type {?} */
                var tbh = this.tagboxHeight;
                if (tbh !== "auto") {
                    tbh += "px";
                    if (this.maxTagboxHeight) {
                        this.render2.setStyle(el, "maxHeight", this.maxTagboxHeight + "px");
                    }
                }
                this.render2.setStyle(el, "height", tbh);
            }
        }
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.createInstance = /**
     * @private
     * @return {?}
     */
    function () {
        this.http = this.injector.get(ServerSideToken, null);
        this.messagerService = this.injector.get(MessagerService);
        this.loadingService = this.injector.get(LoadingService);
        this.notifyService = this.injector.get(NotifyService, null);
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.lookupSelectionSer = new LookupSelectionService(this);
        this.utilService = new UtilService(this);
        this.localService = this.injector.get(LocaleService);
        this.treeNodeHelper = new TreeNodeHelper(this);
        this.favHelper = new FavoriteHelper(this);
        this.ttEventMgr = new TreeTableEventManager(this);
        this.multiSelMgr = new MultiSelectionManager(this);
        this.httpMgr = new LookupHttpManager(this);
        this.lookupCmpMgr = new LookupComponentManager(this);
        this.dialogMgr = new LookupDialogManager(this);
        this.selectionMgr = new SelectionManager(this);
        this.dtEventMgr = new DataTableEventManager(this);
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled || this.readonly) {
            return false;
        }
        this.selectionMgr.initDisplayValue();
        this.dictPickingSubscription = this.dictPicking({
            instance: this,
        }).subscribe((/**
         * @param {?} pr
         * @return {?}
         */
        function (pr) {
            _this.dialogMgr.canOpenDialog(pr);
        }));
        return false;
    };
    /** 判断是否为双列表帮助 */
    /**
     * 判断是否为双列表帮助
     * @return {?}
     */
    LookupGridComponent.prototype.isDoublleList = /**
     * 判断是否为双列表帮助
     * @return {?}
     */
    function () {
        return ((this.displayType === LookupGridDisplayType.NavList ||
            this.displayType === LookupGridDisplayType.NavTreeList ||
            this.displayType === LookupGridDisplayType.NavListTree) && this.showNavigation);
    };
    /** 判断是否显示为树帮助 */
    /**
     * 判断是否显示为树帮助
     * @return {?}
     */
    LookupGridComponent.prototype.isTree = /**
     * 判断是否显示为树帮助
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dtyp = this.displayType.toUpperCase();
        return (dtyp === LookupGridDisplayType.TreeList || dtyp === LookupGridDisplayType.NavListTree);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LookupGridComponent.prototype.onResized = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.resizeCmp(e.size);
        this.resized.emit(e.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupGridComponent.prototype.onResizing = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizing.emit(pos.size);
        this.resizeCmp(pos.size);
        if (this.isDoublleList() && this.leftComponentRef) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight(),
            });
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupGridComponent.prototype.onMaxDialog = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizeCmp(pos.size);
        if (this.leftPanel) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight(),
            });
        }
        // tfs 543132 
        // this.dialogHeight = pos.size.height;
        this.dialogContentHeight = this.dialogMgr.resetDialogContentHeight();
        this.dialogMaxed.emit(pos.size);
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    LookupGridComponent.prototype.resizeCmp = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        if (!this.componentRef || !this.componentRef.instance) {
            return;
        }
        if (!size) {
            size = this.dialog.size;
        }
        /** @type {?} */
        var _size = {
            width: size.width -
                this.containerMargin.left -
                this.containerMargin.right,
            height: 0
        };
        if (this.useFavorite && this.favoritesComponentRef && this.activeTab == 'favorite') {
            _size.height = this.lookupCmpMgr.getCmpHeight(true);
            this.favoritesComponentRef.instance.resize(_size);
        }
        else {
            _size.height = this.lookupCmpMgr.getCmpHeight();
            if (this.isDoublleList()) {
                _size.width = size.width - this.leftPanel.width - this.getSpaceWidth(true);
            }
            this.componentRef.instance.resize(_size);
        }
        if (this.isRecordSize) {
            this.personalConf.size = this.dialog.size;
            this.personalConfigService.updatePersonalConfig({
                size: this.dialog.size,
            });
        }
        if (this.isDoublleList() && this.layoutRef) {
            this.layoutRef.setPanelMaxSize();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.checkGridOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.gridOptions.idField) {
            this.writeConsole("未设置主键字段 idField");
        }
        if (!this.beforeSelectData) {
            this.beforeSelectData = (/**
             * @return {?}
             */
            function () {
                return of(true);
            });
        }
        /** @type {?} */
        var ctxMenuLanguages = this.localService.getValue("lookup.contextMenu");
        this.treeTableOptions = Object.assign({ language: ctxMenuLanguages }, this.defaultTreeTableOptions, this.treeTableOptions || {});
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getComponentType = /**
     * @return {?}
     */
    function () {
        if (!this.displayType) {
            this.displayType = "LIST";
        }
        switch (this.displayType) {
            case LookupGridDisplayType.List:
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
                return DataTableComponent;
            case LookupGridDisplayType.TreeList:
            case LookupGridDisplayType.NavListTree:
                return TreeTableComponent;
        }
    };
    /**
     * @param {?=} msg
     * @return {?}
     */
    LookupGridComponent.prototype.showLoading = /**
     * @param {?=} msg
     * @return {?}
     */
    function (msg) {
        if (msg === void 0) { msg = ""; }
        if (this.dialog && this.dialog.modalContent && !this.loading) {
            /** @type {?} */
            var opts = {
                container: this.dialog.modalContent,
                delay: 200,
            };
            if (msg) {
                opts["message"] = msg;
            }
            this.loading = this.loadingService.show(opts);
        }
        else {
            this.loading = this.loadingService.show();
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.closeLoading = /**
     * @return {?}
     */
    function () {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
        this.loadingService.clearAll();
    };
    /**
     * @param {?} resdata
     * @return {?}
     */
    LookupGridComponent.prototype.getSearchColumns = /**
     * @param {?} resdata
     * @return {?}
     */
    function (resdata) {
        /** @type {?} */
        var cols = resdata.columns || this.columns;
        if (resdata.searchFields) {
            return resdata.searchFields.map((/**
             * @param {?} sf
             * @return {?}
             */
            function (sf) {
                /** @type {?} */
                var c = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.field.toLowerCase() === sf.value.toLowerCase(); }));
                if (c) {
                    sf.label = c.title;
                }
                return sf;
            }));
        }
        else if (cols) {
            return cols
                .filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.searchField; }))
                .map((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                return {
                    label: col.title,
                    value: col.field,
                };
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.initOptions = /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        var _this = this;
        /** @type {?} */
        var obser = of(true);
        this.gridOptions.searchFields = this.getSearchColumns(resData);
        if (resData) {
            // 如果组件中未设置显示列，则使用服务器端返回的设置； 否则将使用组件中配置的展示列
            if ((!this.columns || !this.columns.length) &&
                resData.columns &&
                resData.columns.length) {
                this.columns = resData.columns;
            }
            this.initColumnWidth(this.columns);
            this.setLookupTitleText(resData);
            if (this.isDoublleList() &&
                this.dialogWidth < this.navLookupDialogMinWidth &&
                !this.isRecordSize) {
                this.dialogWidth = this.navLookupDialogMinWidth;
                this.dialog.reSize({ width: this.dialogWidth });
            }
            if (!this.customDisplayType) {
                // this.displayType = resData.displayType || this.displayType || 'LIST';
                // if (this.treeToList) {
                //     this.displayType = this.isDoublleList() ? ' NAVLIST ': 'LIST';
                // }
                this.changeDetector.detectChanges();
                this.lookupCmpMgr.createComponentWithServerData(resData);
            }
            if (this.isDoublleList() && resData.navigation && !this.leftComponentRef) {
                this.navigationOptions = resData.navigation;
                this.navigationOptions.hover = true;
                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);
                this.initColumnWidth(this.navigationOptions.columns, 'nav');
                // update columns formatter
                if (this.customNavFormatter) {
                    this.navigationOptions.columns.forEach((/**
                     * @param {?} col
                     * @return {?}
                     */
                    function (col) {
                        if (_this.customNavFormatter[col.field]) {
                            col.formatter = _this.customNavFormatter[col.field];
                        }
                    }));
                    this.navigationOptions["rowStyler"] =
                        this.customNavFormatter.rowStyler;
                    this.navigationOptions["cellStyler"] =
                        this.customNavFormatter.cellStyler;
                }
                // 20210926 树导航帮助中 左侧树支持分层加载
                if (this.displayType === LookupGridDisplayType.NavTreeList) {
                    /** @type {?} */
                    var _nav_treeinfo_loadtype = this.navigationOptions.treeInfo.loadDataType;
                    if (this.loadTreeDataType !== "default") {
                        _nav_treeinfo_loadtype =
                            this.loadTreeDataType === "loadall"
                                ? "all"
                                : "async";
                    }
                    this.navigationOptions.treeInfo.loadDataType =
                        _nav_treeinfo_loadtype;
                }
                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
            }
        }
        else {
            this.lookupCmpMgr.createContent(this.gridOptions);
            this.lookupCmpMgr.createFavoriteComponent();
        }
        if (this.isTextChange) {
            this.componentRef.instance.searchData.value = this.displayText;
        }
        else {
            if (this._searchState && this._searchState.value) {
                this.componentRef.instance.searchData.value = this._searchState.value;
            }
        }
        // update columns formatter
        if (this.customFormatter) {
            this.columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (_this.customFormatter[col.field]) {
                    col.formatter = _this.customFormatter[col.field];
                }
            }));
            if (this.customFormatter.rowStyler) {
                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;
            }
            if (this.customFormatter.cellStyler) {
                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;
            }
        }
        else {
            if (resData.customStyles) {
                var _a = resData.customStyles, rowStylers_1 = _a.row, cellStylers_1 = _a.cell;
                /** @type {?} */
                var filterFn_1 = (/**
                 * @param {?} n
                 * @param {?} data
                 * @return {?}
                 */
                function (n, data) {
                    /** @type {?} */
                    var d = _this.utils.getValue(n.field, data);
                    if (typeof d === 'boolean') {
                        if (n.value == '0' || n.value == '1' || n.value == 'true' || n.value == 'false') {
                            return d === (n.value == '0' || n.value == 'false') ? false : true;
                        }
                        return d === !!n.value;
                    }
                    return d === n.value;
                });
                if (rowStylers_1) {
                    this.componentRef.instance.rowStyler = (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    function (_a) {
                        var data = _a.data;
                        /** @type {?} */
                        var styleItem = rowStylers_1.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return filterFn_1(n, data);
                        }));
                        if (styleItem) {
                            return styleItem.styles;
                        }
                        return null;
                    });
                }
                if (cellStylers_1) {
                    this.componentRef.instance.cellStyler = (/**
                     * @param {?} e
                     * @param {?} field
                     * @return {?}
                     */
                    function (e, field) {
                        var data = e.data;
                        /** @type {?} */
                        var styleItem = cellStylers_1.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === field; })).find((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) {
                            return filterFn_1(t, data);
                        }));
                        if (styleItem) {
                            return styleItem.styles;
                        }
                        return null;
                    });
                }
            }
        }
        // this.changeDetector.detectChanges();
        return obser;
    };
    /**
     * 设置帮助窗口标题
     */
    /**
     * 设置帮助窗口标题
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.setLookupTitleText = /**
     * 设置帮助窗口标题
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        if (resData.displayInfo) {
            this.displayInfo = resData.displayInfo;
        }
        // 如果自定义标题，将以此标题为准。否则加载服务器端返回的数据
        if (this.title && this.title !== "此处显示帮助标题") {
            this.displayInfo.title = this.title;
        }
        if (this.displayInfo && resData.title) {
            if (!this.displayInfo.title) {
                this.displayInfo.title = resData.title;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.showGetAllChildrenCheckbox = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isTree() && this.treeInfo) {
            this.enableGetAllChildNodes =
                this.treeInfo.loadDataType !== "all" && this.treeInfo.layerType === "pathcode";
        }
        else {
            this.enableGetAllChildNodes = false;
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.initData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observer = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data === false) {
                    if (!_this.columns || !_this.columns.length) {
                        _this.closeLoading();
                        _this.closeDialog();
                        if (!_this.messagerService.modals || !_this.messagerService.modals.length) {
                            _this.notifyService.error({ msg: _this.localService.getValue('lookup.configError'), timeout: 3000 });
                        }
                        return;
                    }
                }
                // 服务器端发生错误，返回NULL 时，直接关闭窗口
                if (data === null) {
                    _this.isShow = false;
                    if (_this.dialog) {
                        _this.dialog.close();
                    }
                    return;
                }
                _this.initOptions(data).subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.selectedColumns = _this.multiSelMgr.initSelectedColumns();
                    // this.favoriteColumns = this.favHelper.getFavoriteColumns();
                    if (_this.usePersionalConf) {
                        if (!_this.personalConfigService.getPersonalData()) {
                            _this.personalConfigService.savePersonalConfig(_this.personalConf);
                        }
                    }
                    if (!_this.isTabChanged) {
                        _this.lookupSelectionSer.loadSelections(data.selectedItems || []);
                    }
                    if (_this.isDoublleList()) {
                        // 导航帮助时，设置左侧选中数据时，不加载主数据列表。
                        if (_this.navSelectedIds || _this.selectFirstInNav) {
                            _this.loadDataWhenOpen = false;
                        }
                    }
                    if (data['activeTab'] && !_this.isTabChanged) {
                        _this.activeTab = 'datalist';
                        if (_this.personalConf && _this.personalConf.tabIndex !== _this.activeTab) {
                            _this.personalConf.tabIndex = _this.activeTab;
                        }
                    }
                    _this.loadData(data);
                    if (_this.isTree()) {
                        if (_this.activeTab === "datalist") {
                            /** @type {?} */
                            var tt = (/** @type {?} */ (_this.componentRef.instance));
                            if (tt.searchData.value && _this.items && _this.items.length) {
                                if (_this.items[0].children && _this.items[0].children.length) {
                                    tt.toggleExpand(_this.items[0], true, false);
                                }
                            }
                        }
                        _this.showGetAllChildrenCheckbox();
                    }
                    _this.isTextChange = false;
                    _this._searchResult = null; // 清空临时查询 结果
                    _this.closeLoading();
                    // this.isReady$.next(true);
                    _this.isReady = true;
                    _this.changeDetector.detectChanges();
                    _this.lookupinitializationSubject.next();
                    if (_this.layoutRef) {
                        _this.layoutRef.setPanelMaxSize();
                    }
                }));
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                // this.isReady$.next(true);
                _this.closeLoading();
                _this._searchResult = null; // 清空临时查询 结果
                _this.isTextChange = false;
                _this.hasError = true;
                _this.changeDetector.detectChanges();
                if (typeof err === "string") {
                    _this.messagerService.error(err);
                }
                else {
                    if (err) {
                        if (err.Message) {
                            _this.messagerService.error(err.Message);
                        }
                        else {
                            if (err.error) {
                                _this.messagerService.exception(err.error);
                            }
                            else {
                                _this.messagerService.error("应用服务器错误,请联系系统管理员！");
                            }
                        }
                    }
                }
            }),
        };
        /** @type {?} */
        var p = {
            pageInfo: {
                pageSize: this.pageSize || 20,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        var t = "all";
        if (this.isTextChange) {
            this._searchState = {
                field: "*",
                value: this.displayText
            };
        }
        // 分层加载支持设置展开层级
        if (this.isTree() || this.displayType === LookupGridDisplayType.NavTreeList) {
            if (this.expandLevel > -1) {
                p['expandLevel'] = this.expandLevel;
            }
        }
        if (this._searchState && this._searchState.value) {
            p['search'] = this._searchState;
            t = 'search';
            // if (this.conditions && !this.conditions.length && this.enableMultiFieldSearch) {
            //     this.conditions = [{
            //         "filterField": this.textField,
            //         "value": this._searchState.value,
            //         "lbracket": "",
            //         "rbracket": "",
            //         "relation": 0,
            //         "compare": 6
            //     }];
            // }
        }
        if (!this.isTabChanged && this.enableToSelect) {
            /** @type {?} */
            var vals = this.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p["selectedInfo"] = {
                    selected: true,
                    selectedIds: vals,
                };
            }
            else {
                if (this["selectedIds"]) {
                    p["selectedInfo"] = {
                        selected: true,
                        selectedIds: this["selectedIds"],
                    };
                }
            }
        }
        this.showLoading();
        this.hasError = false;
        this.httpMgr.lookupRequest(p, t).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        function (restData) {
            if (restData) {
                restData.selectedItems = restData["selectedData"] || [];
            }
            else {
                if (restData && typeof restData === "object") {
                    restData.selectedItems = [];
                }
            }
            return restData === null ? false : restData;
        })), switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (_this.beforeLoadData) {
                return _this.beforeLoadData({ instance: _this, res: res });
            }
            return of(res);
        }))).subscribe(observer);
    };
    /**
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    LookupGridComponent.prototype.loadData = /**
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    function (resData, rebindEvent) {
        if (rebindEvent === void 0) { rebindEvent = true; }
        if (this.activeTab === "datalist") {
            if (this.useFavorite && !this.isTree()) {
                this.favHelper.updateFavoritesStatus(resData.items);
            }
            switch (this.displayType) {
                case LookupGridDisplayType.NavList:
                case LookupGridDisplayType.NavTreeList:
                case LookupGridDisplayType.List:
                    this.loadDataTableData(resData);
                    if (rebindEvent) {
                        this.dtEventMgr.bindDataTableEvent();
                    }
                    break;
                case LookupGridDisplayType.TreeList:
                case LookupGridDisplayType.NavListTree:
                    this.loadTreeTableData(resData, rebindEvent);
                    break;
            }
        }
        else if (this.activeTab === "favorite") {
            this.loadFavData(resData);
        }
        // 选中数据
        this.selectionMgr.selectCurrentValue();
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    LookupGridComponent.prototype.loadFavData = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var _this = this;
        // 加载收藏数据
        if (this.useFavorite) {
            if (this.isTree()) {
                this.setTreeInfo(result);
                /** @type {?} */
                var treeNodes = this.favHelper.initFavoriteTreeData(result.items);
                /** @type {?} */
                var treeData = this.treeNodeHelper
                    .flatTreeNodes(treeNodes)
                    .map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.data["_addtional_"] = n["addtional"];
                    return n.data;
                }));
                this.lookupSelectionSer.initFavoriteItems(treeData);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.favoritesComponentRef.instance.scrollToY(1);
                }));
            }
            else {
                this.lookupSelectionSer.initFavoriteItems(result.items);
            }
            this.favHelper.loadFavoritesData(result);
        }
    };
    /**
     * @param {?=} resData
     * @return {?}
     */
    LookupGridComponent.prototype.loadDataTableData = /**
     * @param {?=} resData
     * @return {?}
     */
    function (resData) {
        if (resData) {
            if (this.useFavorite && !this.isTree()) {
                this.favHelper.updateFavoritesStatus(resData.items);
            }
            if (this.gridOptions) {
                if (resData && resData.columns && resData.columns.length) {
                    if (!this.gridOptions.columns ||
                        !this.gridOptions.columns.length) {
                        this.columns = resData.columns;
                    }
                }
                this.items = resData.items;
                this.total = resData.total || resData.items.length;
                if (resData.searchFields) {
                    this.gridOptions.searchFields = this.getSearchColumns(resData);
                }
                if (resData.pageInfo) {
                    if (resData.pageInfo.pageList &&
                        (!this.pageList || !this.pageList.length)) {
                        this.pageList = resData.pageInfo.pageList;
                    }
                    this.pagination = resData.pageInfo.enablePager;
                    this.pageIndex = resData.pageInfo.pageIndex;
                    this.pageSize = resData.pageInfo.pageSize;
                }
                else {
                    this.pagination = false;
                }
            }
            else {
                this.gridOptions = (/** @type {?} */ (resData));
            }
        }
        this.updateDataTable(this.gridOptions);
    };
    /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    LookupGridComponent.prototype.updateDataTable = /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (opts) {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.componentRef.instance));
            if (!dt.columns || dt.columns.length === 0) {
                dt.columns = this.gridOptions.columns;
            }
            dt.allColumnsTitle = this.allColumnsTitle;
            dt.searchFields = opts.searchFields;
            dt.pagination = opts.pagination;
            dt.pageList = this.pageList;
            dt.remoteSort = this.remoteSort;
            dt.striped = this.enableMultiFieldSearch;
            if (this.loadDataWhenOpen) {
                dt.loadData({
                    pageSize: opts.pageSize,
                    pageIndex: this.gridOptions.pageIndex,
                    total: this.gridOptions.total,
                    data: this.gridOptions.items,
                });
                dt.cd.markForCheck();
            }
            this.loadSuccess.emit();
        }
    };
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.setTreeInfo = /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        if (!resData) {
            return;
        }
        /** @type {?} */
        var _treeInfo = null;
        if (resData.treeInfo) {
            /** @type {?} */
            var onlySelectLeaf = resData.treeInfo.onlySelectLeaf;
            /** @type {?} */
            var _osl = "no";
            if (onlySelectLeaf !== undefined) {
                _osl = onlySelectLeaf ? "yes" : "no";
            }
            _treeInfo = tslib_1.__assign({}, resData.treeInfo, { onlySelectLeaf: _osl });
        }
        /** @type {?} */
        var treeInfo = this.gridOptions.treeInfo;
        if (treeInfo) {
            if (treeInfo.onlySelectLeaf === undefined ||
                treeInfo.onlySelectLeaf === null) {
                treeInfo.onlySelectLeaf = "no";
            }
            if (typeof treeInfo.onlySelectLeaf === "boolean") {
                treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? "yes" : "no";
            }
            // 20210902
            if (this.loadTreeDataType === "default") {
                treeInfo.loadDataType = _treeInfo.loadDataType;
            }
            else {
                treeInfo.loadDataType = this.loadTreeDataType === "loadall" ? "all" : "async";
                _treeInfo.loadDataType = treeInfo.loadDataType;
            }
            if (treeInfo.onlySelectLeaf !== "default") {
                _treeInfo = Object.assign(_treeInfo, treeInfo);
            }
        }
        else {
            if (this.loadTreeDataType !== "default") {
                _treeInfo.loadDataType = this.loadTreeDataType === "loadall" ? "all" : "async";
            }
        }
        this.treeInfo = _treeInfo;
    };
    /**
     * @private
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    LookupGridComponent.prototype.loadTreeTableData = /**
     * @private
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    function (resData, rebindEvent) {
        var _this = this;
        if (rebindEvent === void 0) { rebindEvent = true; }
        /** @type {?} */
        var items = resData ? resData.items : this.gridOptions.items;
        this.items = items;
        if (resData) {
            this.setTreeInfo(resData);
            /** @type {?} */
            var treeInfo = this.gridOptions.treeInfo;
            if (!treeInfo["treeDataIsInit"]) {
                if (treeInfo.layerType.toLowerCase() === "pathcode") {
                    this.items = this.lookupUtils.makeTree(this.items, treeInfo);
                }
                else {
                    this.items = this.lookupUtils.makeTreeWithParentID(this.items, "", treeInfo.dataField ? treeInfo.dataField + "." + treeInfo.parentField : treeInfo.parentField, this.idField);
                }
            }
        }
        if (this.componentRef.instance instanceof TreeTableComponent) {
            /** @type {?} */
            var tt_1 = (/** @type {?} */ (this.componentRef.instance));
            if (this.treeInfo) {
                tt_1.loadDataType = this.treeInfo.loadDataType;
            }
            if (!this.columns || !this.columns.length) {
                tt_1.columns = resData.columns || [];
                this.gridOptions.columns = tt_1.columns;
            }
            /** @type {?} */
            var isLoadAllTreeData = (/**
             * @return {?}
             */
            function () {
                if (_this.loadTreeDataType === "default") {
                    return tt_1.loadDataType === "all";
                }
                else {
                    return _this.loadTreeDataType === "loadall";
                }
            });
            if (rebindEvent) {
                this.ttEventMgr.bindTreetableEvent();
            }
            /** @type {?} */
            var isLoadAll = isLoadAllTreeData();
            /** 完整树节点检查 By Lucas 20200302 */
            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);
            tt_1.keepSelect = true;
            if (this.useFavorite) {
                this.favHelper.updateFavoritesStatus(this.items);
            }
            if (this.loadDataWhenOpen) {
                tt_1.loadData(this.items);
            }
            tt_1.resize();
        }
    };
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     */
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     * @param {?} nodes
     * @param {?=} isAllTreeData
     * @return {?}
     */
    LookupGridComponent.prototype.checkNodeCanBeSelect = /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     * @param {?} nodes
     * @param {?=} isAllTreeData
     * @return {?}
     */
    function (nodes, isAllTreeData) {
        var _this = this;
        if (isAllTreeData === void 0) { isAllTreeData = false; }
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.hasOwnProperty("addtional")) {
                    node.selectable = !node["addtional"];
                }
                if (node.children && node.children.length) {
                    _this.checkNodeCanBeSelect(node.children, isAllTreeData);
                }
                else {
                    if (isAllTreeData && (!_this._searchState || !_this._searchState.value)) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupGridComponent.prototype.onChanges = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (!val) {
            this.onClear();
        }
        else {
            this.displayText = val;
            this.isTextChange = this.originalText !== this.displayText;
            if (this.nosearch) {
                this.setModelValue(val);
                this.clearMappings.emit({ instance: this, value: val, });
            }
            this.onModelTouched(val);
            this.valueChanged.emit(val);
            this.textChanged.emit(val);
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    LookupGridComponent.prototype.onClear = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.isTextChange = false;
        this.displayText = "";
        this.displayValue = "";
        this.originalText = "";
        this.extendInfo = "";
        this.setModelValue("");
        if (this.mappingFn) {
            this.mappingFn(null, this.mapFields);
        }
        else {
            if (this.mapFields) {
                /** @type {?} */
                var bindingData = this.selectionMgr.getBindingData();
                if (bindingData) {
                    this.defaultMapping.lookupFieldMap(null, this.mapFields, bindingData);
                }
            }
        }
        this.multiSelMgr.clear();
        if (emit) {
            this.clear.emit();
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    LookupGridComponent.prototype.clearValue = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.onClear(emit);
    };
    /**
     * @param {?=} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.selectItem = /**
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        /** @type {?} */
        var selectedRow = null;
        if (rowData) {
            selectedRow = rowData;
        }
        else {
            selectedRow = this.selections;
            if (!selectedRow) {
                selectedRow = null;
            }
            else {
                if (Array.isArray(selectedRow) && !selectedRow.length) {
                    selectedRow = null;
                }
            }
        }
        this._searchState = {
            field: '*',
            value: ''
        };
        // 如果定义了自定义处理确定事件，则由自定义事件处理后面的逻辑
        if (this.okHandler) {
            this.okHandler({ data: selectedRow, instance: this });
        }
        else {
            if (this.beforeSelectData) {
                /** @type {?} */
                var bsdResult = this.beforeSelectData({
                    instance: this,
                    data: selectedRow,
                });
                if (bsdResult && bsdResult.subscribe) {
                    bsdResult.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this._beforeSelectDataCallBack(e, selectedRow);
                    }));
                }
                else {
                    this.writeConsole('帮助数据选中前事件未返回值或返回类型非Observable, 请检查', 'error');
                }
            }
            else {
                this._beforeSelectDataCallBack(true, selectedRow);
            }
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupGridComponent.prototype.getPathCode = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        return this.lookupUtils.getPathCode(data, treeInfo || this.treeInfo);
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupGridComponent.prototype.getLayerData = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        return this.lookupUtils.getLayerData(data, treeInfo || this.treeInfo);
    };
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    LookupGridComponent.prototype.getParentPathCode = /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        /** @type {?} */
        var maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        function (arr, fn) {
            return Math.max.apply(Math, tslib_1.__spread(arr.map(typeof fn === "function" ? fn : (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val[fn]; }))));
        });
        // const { dataField, pathField, layerField } = this.treeInfo;
        /** @type {?} */
        var maxLayer = maxBy(rows, (/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.getLayerData(x); }));
        var _loop_1 = function (i) {
            /** @type {?} */
            var _rows = rows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.getLayerData(n) === i; }));
            if (_rows && _rows.length && _rows.length < rows.length) {
                _rows.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    /** @type {?} */
                    var patchCode = _this.getPathCode(r);
                    /** @type {?} */
                    var _rows2 = rows.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var _pc = _this.getPathCode(n);
                        return _pc !== patchCode && _pc.indexOf(patchCode) === 0;
                    }));
                    if (_rows2 && _rows2.length) {
                        rows = rows.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.getPathCode(n) !== patchCode; }));
                    }
                }));
            }
        };
        for (var i = 1; i <= maxLayer; i++) {
            _loop_1(i);
        }
        return rows;
    };
    /**
     * @private
     * @param {?} e
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype._beforeSelectDataCallBack = /**
     * @private
     * @param {?} e
     * @param {?} selectedRow
     * @return {?}
     */
    function (e, selectedRow) {
        var _this = this;
        /** @type {?} */
        var canSelect = e;
        /** @type {?} */
        var message = "";
        if (typeof e === "boolean") {
            canSelect = e;
        }
        else {
            if (typeof e === "object") {
                canSelect = e.canSelect;
                message = e.message;
            }
            else {
                canSelect = false;
            }
        }
        if (!selectedRow) {
            message = this.mustChoosAdatarow;
            canSelect = false;
        }
        if (canSelect) {
            /** @type {?} */
            var selectedRows$ = of(selectedRow);
            // 多选 树帮助 异步加载 分级码 开启同步选择 或包含下级
            if (!this.singleSelect && this.enableCascade && this.isTree()) {
                if (this.treeInfo.loadDataType !== "all" && this.treeInfo.layerType === "pathcode" && this.isGetAllChidlNodes) {
                    /** @type {?} */
                    var parentsIds = this.getParentPathCode(selectedRow);
                    if (parentsIds && parentsIds.length) {
                        parentsIds = parentsIds.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.getPathCode(n); }));
                        this.showLoading();
                        selectedRows$ = this.httpMgr
                            .getData({ parentsIds: parentsIds }, "allChildren")
                            .pipe(map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            /** @type {?} */
                            var items = r.items
                                ? r.items.map((/**
                                 * @param {?} d
                                 * @return {?}
                                 */
                                function (d) { return d.data; }))
                                : [];
                            /** @type {?} */
                            var allitems = tslib_1.__spread(selectedRow, items);
                            /** @type {?} */
                            var ids = allitems.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.idField]; }));
                            ids = Array.from(new Set(ids));
                            return ids.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) {
                                return allitems.find((/**
                                 * @param {?} a
                                 * @return {?}
                                 */
                                function (a) { return a[_this.idField] === n; }));
                            }));
                        })));
                    }
                }
            }
            selectedRows$.subscribe((/**
             * @param {?} rows
             * @return {?}
             */
            function (rows) {
                _this.closeLoading();
                if (_this.isGetAllChidlNodes) {
                    _this.lookupSelectionSer.loadSelections(rows);
                }
                _this.updateControlValue(rows);
                if (!_this.useTip || !rows) {
                    return;
                }
                if (_this.useTip) {
                    _this.personalConfigService.updateQueckSelected(rows, _this.localService.localeId);
                }
            }));
        }
        else {
            if (message) {
                if (this.notifyService) {
                    this.notifyService.warning(message);
                }
                else {
                    this.messagerService.warning(message, "", true, (/**
                     * @return {?}
                     */
                    function () {
                        _this.dialog.el.nativeElement.click();
                    }));
                }
            }
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.updateControlValue = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (selectedRow) {
            this.setDisplayText(selectedRow);
            if (this.mappingFn) {
                this.mappingFn(selectedRow, this.mapFields, this.bindingData);
            }
            else {
                if (this.mapFields && this.bindingData) {
                    this.defaultMapping.lookupFieldMap(selectedRow, this.mapFields, this.bindingData);
                }
            }
            this.setModelValue(this.displayText);
            if (this["inDatagrid"] && selectedRow) {
                /** @type {?} */
                var selectItems = Array.isArray(selectedRow)
                    ? selectedRow
                    : [selectedRow];
                this.updateBindData(selectItems);
            }
            this.selectedData.emit(selectedRow);
            this.runDictPickedEvent(selectedRow);
            this.isTextChange = false;
        }
        else {
            if (document.activeElement) {
                ((/** @type {?} */ (document.activeElement))).blur();
            }
            this.messagerService.warning(this.mustChoosAdatarow);
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.updateBindData = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        var _this = this;
        if (!this.mapFields) {
            return;
        }
        /** @type {?} */
        var helpFields = Object.keys(this.mapFields);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_1 = this.ngControl.formDirective.form.bindingData;
            if (bindingData_1) {
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var val = selectedRow
                            .map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            return _this.utils.getValue(helpField, r);
                        }))
                            .join(_this.multipleChoiceSeparator);
                        _this.utils.setValue(bindingData_1, formField, val);
                    }));
                }));
            }
            // if (bindingData.setValue) {
            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;
            //     let pathArr: string[] = [];
            //     if (bindingPath) {
            //         pathArr = bindingPath.split('/').filter(n => n !== '');
            //     }
            //     helpFields.forEach((helpField: any) => {
            //         this.mapFields[helpField].split(',').forEach((formField: any) => {
            //             const fieldPaths = pathArr.concat(formField.split('.'));
            //             const val = selectedRow.map(r => {
            //                 return this.utils.getValue(formField, r);
            //             }).join(this.multipleChoiceSeparator);
            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);
            //         });
            //     });
            // }
        }
        else {
            // if (this.bindingData) {
            //     helpFields.forEach((helpField: any) => {
            //         this.mapFields[helpField].split(',').forEach((formField: any) => {
            //             const val = selectedRow.map(r => {
            //                 return this.utils.getValue(formField, r);
            //             }).join(this.multipleChoiceSeparator);
            //             this.utils.setValue(this.bindingData, formField, val);
            //         });
            //     });
            // }
        }
    };
    /**
     * @private
     * @param {?=} isHelpData
     * @return {?}
     */
    LookupGridComponent.prototype.getExtendInfoFields = /**
     * @private
     * @param {?=} isHelpData
     * @return {?}
     */
    function (isHelpData) {
        var _this = this;
        if (isHelpData === void 0) { isHelpData = true; }
        if (!this.extInfoFields) {
            this.writeConsole("\u672A\u8BBE\u7F6E\u6269\u5C55\u5B57\u6BB5\u3002");
            return [];
        }
        /** @type {?} */
        var tipFieldArr = this.extInfoFields.split(",");
        if (isHelpData) {
            /** @type {?} */
            var extendInfoFields = [];
            extendInfoFields = tipFieldArr.map((/**
             * @param {?} tf
             * @return {?}
             */
            function (tf) {
                /** @type {?} */
                var mapKey = Object.keys(_this.mapFields).find((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) {
                    return _this.mapFields[k] === tf;
                }));
                if (mapKey) {
                    return mapKey;
                }
                else {
                    _this.writeConsole("\u5728\u5E2E\u52A9\u6620\u5C04\u5B57\u6BB5\u4E2D\u672A\u627E\u5230" + tf);
                    return "";
                }
            }));
            return extendInfoFields;
        }
        return tipFieldArr;
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.onUpdateExtendInfo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.selectionMgr.getBindingData();
        this.updateExtendInfo(jsonData, false);
    };
    // 选中帮助数据后，更新扩展信息
    // 选中帮助数据后，更新扩展信息
    /**
     * @private
     * @param {?} data
     * @param {?=} isHelpData
     * @return {?}
     */
    LookupGridComponent.prototype.updateExtendInfo = 
    // 选中帮助数据后，更新扩展信息
    /**
     * @private
     * @param {?} data
     * @param {?=} isHelpData
     * @return {?}
     */
    function (data, isHelpData) {
        var _this = this;
        if (isHelpData === void 0) { isHelpData = true; }
        if (data) {
            if (this.extInfoFormatter) {
                if (Array.isArray(data)) {
                    /** @type {?} */
                    var tipString = data.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return _this.getExtendInfoText(n);
                    }));
                    this.extendInfo = tipString.join("，");
                }
                else {
                    this.extendInfo = this.getExtendInfoText(data);
                }
            }
            else {
                /** @type {?} */
                var extendInfoFields_1 = this.getExtendInfoFields(isHelpData);
                if (extendInfoFields_1 && extendInfoFields_1.length) {
                    if (Array.isArray(data)) {
                        /** @type {?} */
                        var tipString = data.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return _this.getExtendInfoText(n, extendInfoFields_1);
                        }));
                        this.extendInfo = tipString.join("，");
                    }
                    else {
                        this.extendInfo = this.getExtendInfoText(data, extendInfoFields_1);
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} itemData
     * @param {?=} fields
     * @return {?}
     */
    LookupGridComponent.prototype.getExtendInfoText = /**
     * @private
     * @param {?} itemData
     * @param {?=} fields
     * @return {?}
     */
    function (itemData, fields) {
        var _this = this;
        if (fields === void 0) { fields = null; }
        if (typeof this.extInfoFormatter === "function") {
            return this.extInfoFormatter({
                bindingData: itemData,
                instance: this,
            });
        }
        else {
            /** @type {?} */
            var tipString_1 = [];
            /** @type {?} */
            var tipValues = fields.map((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                var _a;
                /** @type {?} */
                var tfv = _this.utils.getValue(t, itemData);
                tipString_1.push(tfv);
                return _a = {}, _a[t] = tfv, _a;
            }));
            return tipString_1.join(" ");
        }
    };
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    LookupGridComponent.prototype.getDisplayText = /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        /** @type {?} */
        var df = this.displayFields
            ? this.displayFields.split(",")
            : [this.textField];
        /** @type {?} */
        var txtArr = rows.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var t = [];
            df.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                t.push(_this.utils.getValue(n, r));
            }));
            return t.join(_this.displayTextSeparator);
        }));
        if (this.gridOptions.singleSelect) {
            return txtArr.join("");
        }
        else {
            if (this.displayFields) {
                return txtArr.map((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) { return "[" + t + "]"; })).join(this.multipleChoiceSeparator);
            }
            else {
                return txtArr.join(this.multipleChoiceSeparator);
            }
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.setDisplayText = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        var _this = this;
        this.originalText = this.displayText;
        if (this.gridOptions.singleSelect) {
            if (this.displayFormatter) {
                this.displayText = this.utils.getValue(this.textField, selectedRow);
                if (!this.isTree()) {
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], {
                        lookup: this,
                        datatable: (/** @type {?} */ (this.componentRef
                            .instance)),
                    });
                }
                else {
                    /** @type {?} */
                    var tt = (/** @type {?} */ (this.componentRef.instance));
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], { lookup: this, tree: tt });
                }
            }
            else {
                this.displayText = this.getDisplayText([selectedRow]);
            }
            this.displayValue = selectedRow[this.valueField || this.idField];
        }
        else {
            if (selectedRow.length) {
                if (this.displayFormatter) {
                    this.displayText = selectedRow
                        .map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        return _this.utils.getValue(_this.textField, r);
                    }))
                        .join(this.multipleChoiceSeparator);
                    if (!this.isTree()) {
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, {
                            lookup: this,
                            datatable: (/** @type {?} */ (this.componentRef
                                .instance)),
                        });
                    }
                    else {
                        /** @type {?} */
                        var tt = (/** @type {?} */ (this.componentRef
                            .instance));
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, { lookup: this, tree: tt });
                    }
                }
                else {
                    this.displayText = this.getDisplayText(selectedRow);
                }
                this.displayValue = selectedRow
                    .map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    return _this.utils.getValue(_this.valueField || _this.idField, r);
                }))
                    .join(this.multipleChoiceSeparator);
            }
        }
        this.originalText = this.displayText;
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.runDictPickedEvent = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        if (this.dictPicked) {
            if (this.okButton) {
                this.okButton.nativeElement.disabled = true;
            }
            this.dictPickedSubscription = this.dictPicked(rowData).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (_this.okButton) {
                    _this.okButton.nativeElement.disabled = false;
                }
                if (typeof v === "boolean") {
                    if (v) {
                        _this.closeDialog(rowData);
                    }
                }
                else if (typeof v === "object" &&
                    v.closeDialog !== undefined &&
                    !v.closeDialog) {
                    if (v.message) {
                        _this.messagerService.warning(v.message);
                    }
                    else {
                        _this.closeDialog(rowData);
                    }
                }
                else {
                    _this.closeDialog(rowData);
                }
            }));
        }
        else {
            this.closeDialog(rowData);
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.focusToInput = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.inputGroup && _this.inputGroup.textbox) {
                    _this.inputGroup.textbox.nativeElement.focus();
                }
            }));
        }));
    };
    /**
     * @param {?=} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.closeDialog = /**
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData === void 0) { rowData = null; }
        if (this.dialog) {
            this.dialog.close();
        }
        if (rowData) {
            this.multiSelMgr.save(rowData);
        }
        // this.isShow = false;
        this.focusToInput();
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.cancelSelect = /**
     * @return {?}
     */
    function () {
        this.closeDialog();
        this.isTextChange = false;
        if (!this.nosearch) {
            this.displayText = this.originalText;
            this.setModelValue(this.displayText);
        }
        if (this.cancelHandler) {
            this.cancelHandler(this);
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    LookupGridComponent.prototype.setModelValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (this.onModelChange) {
            this.onModelChange(v);
            this.valueChanged.emit(v);
        }
    };
    // 数据列表，收藏， 已选数据 tab 页切换
    // 数据列表，收藏， 已选数据 tab 页切换
    /**
     * @param {?} e
     * @return {?}
     */
    LookupGridComponent.prototype.onTabChange = 
    // 数据列表，收藏， 已选数据 tab 页切换
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.activeTab = e.tabIndex;
        this.personalConf.tabIndex = this.activeTab;
        /** @type {?} */
        var _firstChange = this.isTabChanged;
        this.isTabChanged = true;
        this.personalConfigService.updatePersonalConfig({
            tabIndex: e.tabIndex,
        });
        if (this.activeTab === "datalist") {
            if (this.isDoublleList() && !this.leftComponentRef) {
                if (this.navigationOptions) {
                    this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
                }
                else {
                    this.initData();
                    return;
                }
            }
            if (!this.items || !this.items.length) {
                this.initData();
            }
            else {
                if (!_firstChange) {
                    if (this.isTree()) {
                        this.loadTreeTableData();
                    }
                    else {
                        this.loadDataTableData();
                        this.dtEventMgr.bindDataTableEvent();
                    }
                }
                // this.selectionMgr.selectCurrentValue();
            }
            this.showGetAllChildrenCheckbox();
        }
        else {
            if (this.activeTab === "favorite") {
                if (this.isTree()) {
                    this.initData();
                }
                else {
                    if (!this.favoriteItems ||
                        !this.favoriteItems.length ||
                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length) {
                        this.initData();
                    }
                    else if (!_firstChange) {
                        this.favHelper._loadFavoriteData(this.favoriteItems);
                        // this.selectionMgr.selectCurrentValue();
                    }
                    //  else {
                    //     this.selectionMgr.selectCurrentValue();
                    // }
                }
            }
        }
        this.changeDetector.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.resizeCmp();
            if (_this.isTree()) {
                /** @type {?} */
                var y = _this.componentRef.instance.state.scrollY;
                _this.componentRef.instance.scrollToY(y, 0);
                if (_this.enableCascade) {
                    _this.ttEventMgr.cascadeValueChanged(_this.cascadeStatus);
                }
            }
            if (_this.isDoublleList() && _this.displayType === LookupGridDisplayType.NavTreeList && !_this.navTreeToList) {
                _this.leftComponentRef.instance.updateScrollPosition();
            }
            _this.selectionMgr.selectCurrentValue();
        }));
    };
    //#region  Tag View ----------------------------------------------------------------------
    //#region  Tag View ----------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.registerMouseEventForTagView = 
    //#region  Tag View ----------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.enableClear) {
            this.tagbox.nativeElement.addEventListener("mouseenter", this.onTagboxMouseEnter.bind(this));
            this.tagbox.nativeElement.addEventListener("mouseleave", this.onTagboxMouseLeave.bind(this));
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    LookupGridComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? "" : "none";
        /** @type {?} */
        var clearIcon = event.target.querySelector(".input-group-clear");
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagboxMouseEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.displayText && this.enableClear) {
            if (!this.readonly && !this.disabled) {
                this.showTagboxClearButton = true;
            }
        }
        if (this.showTagboxClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagboxMouseLeave = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.toggleClearIcon(event);
    };
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    LookupGridComponent.prototype.onRemoveSelectItem = /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    function ($event, txt) {
        $event.stopPropagation();
        /** @type {?} */
        var textArray = Array.from(this.displayTextList);
        /** @type {?} */
        var removedIndex = this.displayTextList.indexOf(txt);
        textArray.splice(removedIndex, 1);
        this.displayText = textArray.join(this.multipleChoiceSeparator);
        this.originalText = this.displayText;
        this.setModelValue(this.displayText);
        if (this.displayValue) {
            /** @type {?} */
            var vals = this.displayValue.split(this.multipleChoiceSeparator);
            vals.splice(removedIndex, 1);
            this.displayValue = vals.join(this.multipleChoiceSeparator);
        }
        if (this.mapFields) {
            this.updateOtherFieldDataWhenTagremoved(removedIndex);
        }
        this.tagRemoved.emit({ removedIndex: removedIndex, instance: this });
    };
    /**
     * @private
     * @param {?} removedIndex
     * @return {?}
     */
    LookupGridComponent.prototype.updateOtherFieldDataWhenTagremoved = /**
     * @private
     * @param {?} removedIndex
     * @return {?}
     */
    function (removedIndex) {
        var _this = this;
        /** @type {?} */
        var helpFields = Object.keys(this.mapFields);
        /** @type {?} */
        var textFieldIndex = helpFields.indexOf(this.textField);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_2 = this.ngControl.formDirective.form.bindingData;
            if (bindingData_2.setValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr_1 = [];
                if (bindingPath) {
                    pathArr_1 = bindingPath.split("/").filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n !== ""; }));
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var fieldPaths = pathArr_1.concat(formField.split("."));
                        /** @type {?} */
                        var val = bindingData_2.getValue(fieldPaths);
                        /** @type {?} */
                        var valArr = val.split(_this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        var newVal = valArr.join(_this.multipleChoiceSeparator);
                        bindingData_2.setValue(pathArr_1.concat(fieldPaths), newVal, true, true);
                    }));
                }));
            }
        }
        else {
            if (this.bindingData) {
                if (textFieldIndex > -1) {
                    helpFields.splice(textFieldIndex, 1);
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var val = _this.utils.getValue(formField, _this.bindingData);
                        /** @type {?} */
                        var valArr = val.split(_this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        var newVal = valArr.join(_this.multipleChoiceSeparator);
                        _this.utils.setValue(_this.bindingData, formField, newVal);
                    }));
                }));
            }
        }
    };
    //#endregion
    //#endregion
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onAllChildNodesClick = 
    //#endregion
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupGridComponent.prototype.onIncludeSubordinatesChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.includeSubordinates = val;
        this.includeSubordinates$.next(val);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagContainerClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.tagInput) {
            this.tagInput.focus();
            this.tagInput.textbox.nativeElement.click();
        }
    };
    /**
     * @param {?} nodes
     * @return {?}
     */
    LookupGridComponent.prototype.expandFirstNode = /**
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this = this;
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.children && node.children.length) {
                    node.expanded = true;
                    _this.expandFirstNode(node.children);
                }
                return node;
            }));
        }
        return nodes;
    };
    ;
    // 用于组织个性化数据key
    // 用于组织个性化数据key
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getLookupBindingFields = 
    // 用于组织个性化数据key
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngControl) {
            if (this.ngControl.name) {
                return this.ngControl.name;
            }
            else {
                if (this.mapFields && this.mapFields.length) {
                    return Object.keys(this.mapFields).map((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) {
                        return _this.mapFields[k];
                    })).join('_');
                }
                else {
                    return this.textField;
                }
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onConditionsChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isTree()) {
            this.ttEventMgr.conditionsChange($event);
        }
        else {
            this.dtEventMgr.conditionsChange($event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.clearSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var msg = this.localService.getValue('lookup.selectedInfo.confirm');
        this.messagerService.confirm(msg || '您确认要取消所有已选中的记录吗？').subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e) {
                _this.multiSelMgr.clear();
                if (_this.selectedDtRef) {
                    _this.selectedDtRef.clearSelections();
                }
            }
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onDeleteSelectedItem = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        if (this.selectedDtRef.selections && this.selectedDtRef.selections.length) {
            /** @type {?} */
            var unCheckeIds = this.selectedDtRef.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; }));
            this.multiSelMgr.deleteSelectedItems(this.selectedDtRef.selections);
            this.selectedDtRef.unCheckRows(unCheckeIds);
        }
        else {
            this.notifyService.warning('请勾选要删除的记录！');
        }
    };
    /**
     * @param {?} columns
     * @param {?=} typ
     * @return {?}
     */
    LookupGridComponent.prototype.initColumnWidth = /**
     * @param {?} columns
     * @param {?=} typ
     * @return {?}
     */
    function (columns, typ) {
        if (typ === void 0) { typ = 'data'; }
        if (this.personalConf && this.personalConf.colSizeInfo && this.personalConf.colSizeInfo.data) {
            /** @type {?} */
            var fieldsizeData_1 = this.personalConf.colSizeInfo[typ];
            if (fieldsizeData_1) {
                /** @type {?} */
                var fields = Object.keys(fieldsizeData_1);
                if (fields && fields.length) {
                    columns.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        if (fieldsizeData_1[n.field]) {
                            n.width = fieldsizeData_1[n.field];
                        }
                    }));
                }
            }
        }
    };
    LookupGridComponent.decorators = [
        { type: Component, args: [{
                    selector: "farris-lookup-grid",
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-06-16 13:44:59\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-18 08:47:32\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n <input-group #inputgroup\r\n    *ngIf=\"viewType === 'text'\"\r\n    [groupText]=\"groupIcon\"\r\n    [lookup-tip]= \"useTip\"\r\n    [(ngModel)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [customCls]=\"'lookupbox'\"\r\n    [placeholder]=\"'lookup.placeholder' | locale: '\u8BF7\u9009\u62E9': placeholder\"\r\n    [enableClear]=\"enableClear\"\r\n    [useExtendInfo]=\"useExtendInfo\"\r\n    [extendInfo]=\"extendInfo\"\r\n    [maxLength]=\"maxLength\"\r\n    (updateExtendInfo)=\"onUpdateExtendInfo()\"\r\n    [textAlign]=\"textAlign\"\r\n    [value]=\"displayText\"\r\n    (valueChange)=\"onChanges($event)\"\r\n    (clickHandle)=\"showDialog()\"\r\n    (clear)=\"onClear()\"\r\n    [quick-select]=\"quickSelect\"\r\n></input-group>\r\n\r\n<!--Tag style-->\r\n<div #tagbox class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\" *ngIf=\"viewType === 'tag'\" [attr.title]=\"displayText\">\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"height: auto; min-height: 24px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;\" #tagContainer (click)=\"onTagContainerClick($event)\">\r\n            <span class=\"multi--item\" *ngFor=\"let txt of displayTextList; let index\" title=\"\" style=\"cursor: default;padding: 0 5px;\r\n            background: #ebf7fe;\r\n            border: 1px solid #cfedff;\r\n            position: relative;\r\n            padding-right: 20px;\r\n            margin-right: 3px;margin-top: 1px;height:18px; float: left;\">\r\n                {{txt}}\r\n                <i class=\"f-icon f-icon-close\" *ngIf=\"!readonly && !disabled\" style=\"cursor: pointer;position:absolute; right: 2px\" (click)=\"onRemoveSelectItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span *ngIf=\"quickSelect && quickSelect.enable && !readonly && !disabled\" style=\"flex: 1;position: relative;min-width: 100px;height: 18px;margin: 0;padding: 0;float: left;overflow: hidden;\">\r\n                <!-- <input type=\"text\" style=\"border: 0;outline: none;width: 100px;\" #tagInput> -->\r\n                <input-group #tagInput style=\"position: absolute; top: 0px; height: 20px;align-items: center;display: flex;left: -8px; width: 100%\"\r\n                    [placeholder]=\"'lookup.placeholder' | locale: '\u8BF7\u9009\u62E9': placeholder\"\r\n                    [quick-select]=\"quickSelect\"  [enableClear]=\"false\" [noborder]=\"true\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n        <!-- <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n            <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n        </div> -->\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" title=\"\" >\r\n        <span class=\"input-group-text input-group-clear\" style=\"display: none; padding: 0px 4px;position: absolute;right: 22px;height: 100%;\" (click)=\"onClear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"input-group-text\" (click)=\"showDialog()\">\r\n            <span class=\"f-icon f-icon-lookup\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<farris-dialog\r\n    #dialog\r\n    *ngIf=\"isShow\"\r\n    [draggable]=\"draggable\"\r\n    [resizable]=\"resizable\"\r\n    [title]=\"displayInfo.title\"\r\n    [beforeOpen]=\"beforeOpen\"\r\n    [beforeClose]=\"beforeClose\"\r\n    [(width)]=\"dialogWidth\"\r\n    [(height)]=\"dialogHeight\"\r\n    [showButtons]=\"showButtons\"\r\n    [showMaxButton]=\"showMaxButton\"\r\n    [showCloseButton]=\"true\"\r\n    [buttons]=\"buttonsRef || defaultButtonRef\"\r\n    [buttonAlign]=\"buttonAlign\"\r\n    [enableScroll]=\"false\"\r\n    [dialogHeaderHeight]=\"50\"\r\n    (maxed)=\"onMaxDialog($event)\"\r\n    (resized)=\"onResized($event)\"\r\n    (resizing)=\"onResizing($event)\"\r\n    [showHeader] = \"!useNewLayout\"\r\n    class=\"farris-lookup-dialog\"\r\n    [class.lookup-advanced]=\"useNewLayout\"\r\n    [minWidth]=\"550\"\r\n    [minHeight]=\"480\"\r\n>\r\n\r\n    <div [ngStyle]=\"containerStyle\" style=\"height: 100%;\" >\r\n        <lookup-tabs (tabChange)=\"onTabChange($event)\" [enableFav]=\"useFavorite\" [activeTab]=\"activeTab\" \r\n            [visible]=\"isReady\" [dialogTitle]=\"displayInfo.title\" [layout]=\"useNewLayout ? 'advanced': 'default'\"\r\n           >\r\n            <div datalist class=\"d-flex f-utils-absolute-all flex-column\">   \r\n                <layout [direction]=\"'h'\" [fill]=\"true\" *ngIf=\"isDoublleList()\" #layout>\r\n                    <layout-panel #leftPanel [width]=\"leftPanelWidth\" region=\"west\" [minWidth]=\"200\" [showBorder]=\"false\" [overflow]=\"'hidden'\">\r\n                        <ng-container #leftContainer></ng-container>\r\n                    </layout-panel>\r\n                    <layout-panel region=\"center\" [showBorder]=\"false\" [overflow]=\"'hidden'\" [minWidth]=\"200\">\r\n                        <div class=\"lookup-filter-bar\" lookup-filter-bar *ngIf=\"enableMultiFieldSearch && showFilterBar\" [viewType]=\"searchBarMode\"\r\n                            (conditionsChange)=\"onConditionsChange($event)\" [searchAnyField]=\"searchAnyField\" [columns]=\"columns\" [searchFields]=\"gridOptions?.searchFields\"></div>\r\n                        <ng-container #centerContainer></ng-container>\r\n                    </layout-panel>\r\n                </layout>\r\n                <div class=\"lookup-filter-bar\" lookup-filter-bar *ngIf=\"!isDoublleList() && enableMultiFieldSearch && showFilterBar\" [viewType]=\"searchBarMode\"\r\n                    [columns]=\"columns\" (conditionsChange)=\"onConditionsChange($event)\" [searchAnyField]=\"searchAnyField\"  [searchFields]=\"gridOptions?.searchFields\"></div>\r\n                <ng-container *ngIf=\"!isDoublleList()\" #contentContainer></ng-container>\r\n            </div>\r\n            <div favorites  class=\"d-flex f-utils-all h-100\" *ngIf=\"useFavorite\"> \r\n                <ng-container #favoritesContainer></ng-container>\r\n            </div>\r\n        </lookup-tabs>\r\n\r\n    </div>\r\n</farris-dialog>\r\n\r\n<ng-template #selectedPagerExtendTemplate let-dtref>\r\n    <button class=\"btn btn-link btn-sm p-0 pl-1 mr-3\" \r\n        *ngIf=\"dtref?.selections && dtref?.selections.length\" (click)=\"onDeleteSelectedItem($event)\">\r\n        {{ 'lookup.selectedInfo.remove' | locale | replaceX: dtref?.selections.length}}\r\n    </button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #defaultButtonRef>\r\n    <!-- \u5DF2\u9009\u8BB0\u5F55\u6D6E\u5C42 -->\r\n    <div class=\"lookup-selected-panel fade hide d-none\" #selectedpanel  *ngIf=\"showSelected\">\r\n        <div class=\"arrow\" [style.left.px]=\"displayType==='NAVTREELIST' && activeTab === 'datalist' && showNavigation ? 123: 38\"></div>\r\n        <div class=\"overlay\" style=\"top: 0px;\"></div>\r\n        <div class=\"content lookup-datalist\" #panelContent>\r\n\r\n            <farris-datatable #multiSelectDT \r\n                [idField]=\"idField\"\r\n                [bordered]=\"false\"\r\n                [width]=\"panelContent.offsetWidth - 28\"\r\n                [columns]=\"selectedColumns\"\r\n                [data]=\"currentSelectedItems | async\"\r\n                (cellClick)=\"multiSelMgr?.onSelectedTableCellClick($event)\"\r\n                [singleSelect]=\"false\"\r\n                [striped]=\"true\"\r\n                [pagination]=\"true\"\r\n                [pageSize]=\"20\"\r\n                [pagerOnServer]=\"false\"\r\n                [pagerViewMode]=\"'simple'\"\r\n                [showPageInfo]=\"false\" \r\n                [showPageNumber]=\"false\" \r\n                [showPageList]=\"false\"\r\n                [remoteSort]=\"false\"\r\n                [total]=\"(currentSelectedItems | async)?.length\"\r\n                [pagerExtendTemplate]=\"selectedPagerExtendTemplate\"\r\n                [autoFitColumns]=\"true\"\r\n            >\r\n        </farris-datatable>\r\n\r\n        </div>\r\n        <div class=\"overlay\" style=\"bottom: 0px;\"></div>\r\n    </div>\r\n\r\n\r\n   \r\n<!--\u4EE5\u4E0B\u4E3A\u6309\u94AE\u533A\u57DF-->\r\n\r\n    <div class=\"f-utils-fill d-flex flex-row m-0\" style=\"text-align: left; align-items: center;height: 30px\" *ngIf=\"isReady\">\r\n        <!--\u5DE6\u4FA7\u5BFC\u822A\u6811 \u5305\u542B\u4E0B\u7EA7-->\r\n        <div class=\"d-flex mr-2\" *ngIf=\"displayType==='NAVTREELIST' && activeTab === 'datalist' && showNavigation\">\r\n            <div class=\"custom-control custom-checkbox custom-control-inline m-0 p-0\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"farris-lookup-nav_get-all-child-nodes\" [ngModel]=\"includeSubordinates\" (ngModelChange)=\"onIncludeSubordinatesChange($event)\">\r\n                <label class=\"custom-control-label btn-link lookup-checkbox-label\" for=\"farris-lookup-nav_get-all-child-nodes\" style=\"padding-left: 18px;\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\" !singleSelect\">\r\n\r\n            <!--\u5DF2\u9009\u8BB0\u5F55-->\r\n            <div class=\"lookup-selected-bar d-flex\" *ngIf=\"showSelected\" \r\n                [style.pointerEvents]=\"(currentSelectedItems | async)?.length ? 'auto': 'none'\" \r\n                [style.opacity]=\"(currentSelectedItems | async)?.length ? 1: 0.4\"\r\n                lookup-selected [count]=\" (currentSelectedItems | async)?.length\"\r\n                [selectedPanel]=\"selectedpanel\" [dataTableRef]=\"selectedDtRef\"\r\n                [class.mr-2]=\"!((currentSelectedItems | async)?.length)\"\r\n                [innerHTML]=\"'lookup.selectedInfo.total' | locale | replaceX: (currentSelectedItems | async)?.length\">\r\n            </div>\r\n            <button class=\"btn btn-link btn-sm p-0 pl-1 mr-3 lookup-clear-selected-items\" \r\n                *ngIf=\"showSelected && (currentSelectedItems | async)?.length\" (click)=\"clearSelected($event)\">\r\n                {{labels.clearAllSelected}}\r\n            </button>\r\n\r\n            <!--\u6811\u8868\u5E2E\u52A9\u7EA7\u8054\u63A7\u5236-->\r\n            <select *ngIf=\"showCascadeControl && enableCascade && displayType==='TREELIST'\" class=\"form-control\" style=\"width: auto; display: inline-block\" (ngModelChange)=\"ttEventMgr?.cascadeValueChanged($event)\" \r\n            [ngModel]=\"cascadeStatus\" name=\"cascadeStatus\" single-select #cascadeSelect=\"singleSelect\" [panelRef]=\"selectpanel\" [width]=\"110\" [position]=\"'above'\">\r\n                <!-- <option value=\"enable\" *ngIf=\"cascadeItems ? cascadeItems.enable : true\">{{ 'lookup.cascade.enable' | locale: '\u540C\u6B65\u9009\u62E9' }}</option>\r\n                <option value=\"up\" *ngIf=\"cascadeItems ? cascadeItems.up : true\">{{ 'lookup.cascade.up' | locale: '\u5305\u542B\u4E0A\u7EA7' }}</option>\r\n                <option value=\"down\" *ngIf=\"cascadeItems ? cascadeItems.down : true\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</option>\r\n                <option value=\"disable\" *ngIf=\"cascadeItems ? cascadeItems.disable : true\">{{ 'lookup.cascade.disable' | locale: '\u4EC5\u9009\u62E9\u81EA\u8EAB' }}</option> -->\r\n            </select>\r\n            <div #selectpanel class=\"single-select-panel f-area-hide\" [style.left]=\"showSelected ? (currentSelectedItems | async)?.length ? '164px': '92px': 'auto'\">\r\n                <ul class=\"dropdown-menu show\">\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'enable'\" value=\"enable\" *ngIf=\"cascadeItems ? cascadeItems.enable : true\">{{ 'lookup.cascade.enable' | locale: '\u540C\u6B65\u9009\u62E9' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'up'\" value=\"up\" *ngIf=\"cascadeItems ? cascadeItems.up : true\">{{ 'lookup.cascade.up' | locale: '\u5305\u542B\u4E0A\u7EA7' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'down'\" value=\"down\" *ngIf=\"cascadeItems ? cascadeItems.down : true\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'disable'\" value=\"disable\" *ngIf=\"cascadeItems ? cascadeItems.disable : true\">{{ 'lookup.cascade.disable' | locale: '\u4EC5\u9009\u62E9\u81EA\u8EAB' }}</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <!--\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E-->\r\n            <div class=\"f-utils-fill custom-control custom-checkbox custom-control-inline m-0 p-0 ml-2\" *ngIf=\"enableGetAllChildNodes && enableCascade && displayType==='TREELIST'\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"farris-lookup_get-all-child-nodes\">\r\n                <label class=\"custom-control-label btn-link lookup-checkbox-label\" for=\"farris-lookup_get-all-child-nodes\" \r\n                    style=\"padding-left: 18px;overflow: hidden;white-space: nowrap;text-overflow: ellipsis;\" title=\"{{'lookup.getAllChilds'|locale: '\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E'}}\"\r\n                    (click)=\"onAllChildNodesClick($event)\">{{'lookup.getAllChilds'|locale: '\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E'}}</label>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"cancelSelect()\" [disabled]=\"!(isReady || hasError)\" >\r\n        {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n    </button>\r\n    <button #okbtn type=\"button\" [disabled]=\"!isReady\" class=\"btn btn-primary btn-lg\" >\r\n        {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n    </button>\r\n   \r\n    \r\n</ng-template>\r\n",
                    providers: [
                        LOOKUPGRID_VALUE_ACCESSOR,
                        ShortcutsService,
                        LookupDefaultMapping,
                        LookupUtils,
                        PersonalConfigService,
                    ],
                    encapsulation: ViewEncapsulation.None,
                    exportAs: "lookup",
                    styles: [".input-group{flex-wrap:nowrap}.ng-dirty.ng-invalid>input-group>.lookupbox{border-color:#ff0303}.lookup-clear{cursor:pointer;background:#fff!important}.lookup-clear:hover{background:#e9ecef!important}.f-lookup-favorite{cursor:pointer;color:#ff9800}.f-lookup-unfavorite{cursor:pointer;color:#dd2438}.lookup-tip{position:absolute;min-width:200px;max-height:400px;padding:.25rem 0;z-index:7777;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.lookup-tip .lookup-tip-header{font-weight:700;padding:.25rem .475rem;border-radius:0}.lookup-tip ul{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;padding-left:0;margin-bottom:0}.lookup-tip ul li{position:relative;display:block;width:100%;margin-bottom:-1px;padding:.25rem .875rem;color:rgba(0,0,0,.85);background-color:#fff;cursor:pointer}.lookup-tip ul li:hover{background-color:#e6f7ff}.f-lookup_quick-panel{height:100%;z-index:10001;position:absolute;overflow:auto;background:#fff;margin-top:.25rem;box-shadow:0 2px 8px 0 #dedede;border-radius:3px}.f-lookup_quick-panel .list{margin:0 6px}.f-lookup_quick-panel .list-group-item{padding:0 8px;border:0;margin-bottom:0;word-break:break-all;min-height:30px}.f-lookup_quick-panel .more{height:50px;text-align:center;line-height:50px}.f-lookup_quick-panel .norecord{height:100%;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;font-size:16px;color:#bec6db}"]
                }] }
    ];
    /** @nocollapse */
    LookupGridComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: CommonUtils },
        { type: LookupDefaultMapping },
        { type: ChangeDetectorRef },
        { type: ShortcutsService },
        { type: LookupUtils },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    LookupGridComponent.propDecorators = {
        customDisplayType: [{ type: Input }],
        viewType: [{ type: Input }],
        displayType: [{ type: Input }],
        enableClear: [{ type: Input }],
        remoteSort: [{ type: Input }],
        condition: [{ type: Input }],
        conditions: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        singleSelect: [{ type: Input }],
        multipleChoiceSeparator: [{ type: Input }],
        idField: [{ type: Input }],
        uri: [{ type: Input }],
        beUri: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        pagination: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageList: [{ type: Input }],
        total: [{ type: Input }],
        columns: [{ type: Input }],
        remoteSearch: [{ type: Input }],
        searchOnServer: [{ type: Input }],
        nosearch: [{ type: Input }],
        clearMappings: [{ type: Output }],
        maxLength: [{ type: Input }],
        mappingFn: [{ type: Input }],
        items: [{ type: Input }],
        favoriteItems: [{ type: Input }],
        customData: [{ type: Input }],
        bindingData: [{ type: Input }],
        treeInfo: [{ type: Input }],
        enableCascade: [{ type: Input }],
        cascadeStatus: [{ type: Input }],
        cascadeItems: [{ type: Input }],
        showCascadeControl: [{ type: Input }],
        placeholder: [{ type: Input }],
        showSelected: [{ type: Input }],
        useFavorite: [{ type: Input }],
        favoriteDataFrom: [{ type: Input }],
        useTip: [{ type: Input }],
        isRecordSize: [{ type: Input }],
        userId: [{ type: Input }],
        enableToSelect: [{ type: Input }],
        enableFindText: [{ type: Input }],
        expandLevel: [{ type: Input }],
        navTreeTableOptions: [{ type: Input }],
        treeTableOptions: [{ type: Input }],
        dataTableOptions: [{ type: Input }],
        loadTreeDataType: [{ type: Input }],
        loadDataWhenOpen: [{ type: Input }],
        navSelectedIds: [{ type: Input }],
        selectFirstInNav: [{ type: Input }],
        enableFullTree: [{ type: Input }],
        displayFormatter: [{ type: Input }],
        displayFields: [{ type: Input }],
        displayTextSeparator: [{ type: Input }],
        helpId: [{ type: Input }],
        textAlign: [{ type: Input }],
        enableTitle: [{ type: Input }],
        useExtendInfo: [{ type: Input }],
        extInfoFields: [{ type: Input }],
        extInfoFormatter: [{ type: Input }],
        extendInfo: [{ type: Input }],
        customFormatter: [{ type: Input }],
        customNavFormatter: [{ type: Input }],
        okHandler: [{ type: Input }],
        cancelHandler: [{ type: Input }],
        tagboxHeight: [{ type: Input }],
        maxTagboxHeight: [{ type: Input }],
        enableGetAllChildNodes: [{ type: Input }],
        shortcutKey: [{ type: Input }],
        quickSelect: [{ type: Input }],
        treeToList: [{ type: Input }],
        navTreeToList: [{ type: Input }],
        showNavigation: [{ type: Input }],
        beforeSelectData: [{ type: Input }],
        beforeLoadData: [{ type: Input }],
        useNewLayout: [{ type: Input }],
        enableMultiFieldSearch: [{ type: Input }],
        searchBarMode: [{ type: Input }],
        allowQueryFields: [{ type: Input }],
        labels: [{ type: Input }],
        searchAnyField: [{ type: Input }],
        selectedData: [{ type: Output }],
        clear: [{ type: Output }],
        search: [{ type: Output }],
        query: [{ type: Output }],
        valueChanged: [{ type: Output }],
        loadSuccess: [{ type: Output }],
        pagerChanged: [{ type: Output }],
        expandTreeNode: [{ type: Output }],
        textChanged: [{ type: Output }],
        checkedChange: [{ type: Output }],
        tagRemoved: [{ type: Output }],
        gridOptions: [{ type: Input }],
        contentContainer: [{ type: ViewChild, args: ["contentContainer", { read: ViewContainerRef },] }],
        favoritesContainer: [{ type: ViewChild, args: ["favoritesContainer", { read: ViewContainerRef },] }],
        leftContainer: [{ type: ViewChild, args: ["leftContainer", { read: ViewContainerRef },] }],
        centerContainer: [{ type: ViewChild, args: ["centerContainer", { read: ViewContainerRef },] }],
        selectedDtRef: [{ type: ViewChild, args: ["multiSelectDT",] }],
        inputGroup: [{ type: ViewChild, args: ["inputgroup",] }],
        leftPanel: [{ type: ViewChild, args: ["leftPanel",] }],
        tagbox: [{ type: ViewChild, args: ["tagbox",] }],
        okButton: [{ type: ViewChild, args: ["okbtn",] }],
        tagInput: [{ type: ViewChild, args: ["tagInput",] }],
        selectedpanel: [{ type: ViewChild, args: ['selectedpanel',] }],
        cascadeSelect: [{ type: ViewChild, args: ['cascadeSelect',] }],
        layoutRef: [{ type: ViewChild, args: ['layout',] }]
    };
    return LookupGridComponent;
}(LookupComponent));
export { LookupGridComponent };
if (false) {
    /** @type {?} */
    LookupGridComponent.prototype.groupIcon;
    /** @type {?} */
    LookupGridComponent.prototype._displayType;
    /**
     * 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false
     * @type {?}
     */
    LookupGridComponent.prototype.customDisplayType;
    /** @type {?} */
    LookupGridComponent.prototype.viewType;
    /**
     * 启用清空按钮
     * @type {?}
     */
    LookupGridComponent.prototype.enableClear;
    /**
     * 服务器端排序
     * @type {?}
     */
    LookupGridComponent.prototype.remoteSort;
    /** @type {?} */
    LookupGridComponent.prototype.condition;
    /** @type {?} */
    LookupGridComponent.prototype.conditions;
    /**
     * 树表显示全选复选框。 默认不显示
     * @type {?}
     */
    LookupGridComponent.prototype.showCheckAll;
    /**
     * 是否启用多选
     * @type {?}
     */
    LookupGridComponent.prototype.singleSelect;
    /**
     * 多选分隔符, 默认为 ,
     * @type {?}
     */
    LookupGridComponent.prototype.multipleChoiceSeparator;
    /**
     * 主键字段
     * @type {?}
     */
    LookupGridComponent.prototype.idField;
    /**
     * 可以为元数据ID、webapiURL
     * @type {?}
     */
    LookupGridComponent.prototype.uri;
    /**
     * BE REST RUI
     * - 此处设置后 uri 失效
     * @type {?}
     */
    LookupGridComponent.prototype.beUri;
    /**
     * 显示过滤工具条; 默认 true
     * @type {?}
     */
    LookupGridComponent.prototype.showFilterBar;
    /**
     * 是否启用分页
     * @type {?}
     */
    LookupGridComponent.prototype.pagination;
    /**
     * 当前页索引，从 1开始
     * @type {?}
     */
    LookupGridComponent.prototype.pageIndex;
    /**
     * 每页记录数
     * @type {?}
     */
    LookupGridComponent.prototype.pageSize;
    /**
     * 可用分页记录数列表
     * @type {?}
     */
    LookupGridComponent.prototype.pageList;
    /**
     * 总记录数
     * @type {?}
     */
    LookupGridComponent.prototype.total;
    /**
     * 显示列信息, 默认为 []
     * @type {?}
     */
    LookupGridComponent.prototype.columns;
    /**
     * 帮助查询是否为远端查询
     * @type {?}
     */
    LookupGridComponent.prototype.remoteSearch;
    /**
     * 文本变化后，进行服务器端查询
     * @type {?}
     */
    LookupGridComponent.prototype.searchOnServer;
    /**
     * 不进行服务器查询，有啥算啥
     * @type {?}
     */
    LookupGridComponent.prototype.nosearch;
    /**
     * 启用任意输入后，值通过输入时触发
     * @type {?}
     */
    LookupGridComponent.prototype.clearMappings;
    /**
     * 允许输入的字符最大长度。
     * 任意输入时，此属性有效
     * @type {?}
     */
    LookupGridComponent.prototype.maxLength;
    /** @type {?} */
    LookupGridComponent.prototype.mappingFn;
    /**
     * 数据列表
     * @type {?}
     */
    LookupGridComponent.prototype.items;
    /** @type {?} */
    LookupGridComponent.prototype.favoriteItems;
    /**
     * 自定义数据
     * @type {?}
     */
    LookupGridComponent.prototype.customData;
    /**
     * 绑定值所在的对象
     * @type {?}
     */
    LookupGridComponent.prototype.bindingData;
    /** @type {?} */
    LookupGridComponent.prototype.treeInfo;
    /**
     * 是否启用级联选择控制选项
     * @type {?}
     */
    LookupGridComponent.prototype.enableCascade;
    /**
     * 级联控制默认值： enable: 同步选择, up：包含上级, down：包含下级, disable：仅选择自身
     * @type {?}
     */
    LookupGridComponent.prototype.cascadeStatus;
    /**
     * 分别级联选项的启用状态，默认全部启用
     * @type {?}
     */
    LookupGridComponent.prototype.cascadeItems;
    /**
     * 显示级联控制
     * @type {?}
     */
    LookupGridComponent.prototype.showCascadeControl;
    /** @type {?} */
    LookupGridComponent.prototype.placeholder;
    /**
     * 显示已选记录列表。 默认为 false 不显示
     * @type {?}
     */
    LookupGridComponent.prototype.showSelected;
    /**
     * 应用收藏夹
     * @type {?}
     */
    LookupGridComponent.prototype.useFavorite;
    /**
     * 收藏数据来自于： locale: 本地存储， remote: 服务器端存储
     * @type {?}
     */
    LookupGridComponent.prototype.favoriteDataFrom;
    /**
     * 使用提示,快捷选择
     * @type {?}
     */
    LookupGridComponent.prototype.useTip;
    /**
     * 记录窗口大小
     * @type {?}
     */
    LookupGridComponent.prototype.isRecordSize;
    /**
     * 快速选择
     * @type {?}
     */
    LookupGridComponent.prototype.userId;
    /**
     * 是否启用选中value值对应的行数据，默认 true
     * @type {?}
     */
    LookupGridComponent.prototype.enableToSelect;
    /** @type {?} */
    LookupGridComponent.prototype.enableFindText;
    /**
     * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
     * @type {?}
     */
    LookupGridComponent.prototype.expandLevel;
    /** @type {?} */
    LookupGridComponent.prototype.navTreeTableOptions;
    /** @type {?} */
    LookupGridComponent.prototype.treeTableOptions;
    /** @type {?} */
    LookupGridComponent.prototype.dataTableOptions;
    /** @type {?} */
    LookupGridComponent.prototype.defaultTreeTableOptions;
    /**
     * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
     * @type {?}
     */
    LookupGridComponent.prototype.loadTreeDataType;
    /**
     * 窗口打开后立即加载数据，默认为 true
     * @type {?}
     */
    LookupGridComponent.prototype.loadDataWhenOpen;
    /**
     * 导航列表，树列表在帮助打开后选中的数据;
     * 设置后，`selectFirstInNav` 失效！
     * @type {?}
     */
    LookupGridComponent.prototype.navSelectedIds;
    /**
     * 导航帮助，选中第1条数据，默认为 false;
     * 注意：当`navSelectedIds`不为空时，此属性失效。
     * @type {?}
     */
    LookupGridComponent.prototype.selectFirstInNav;
    /**
     * 启用构造完整树过滤
     * @type {?}
     */
    LookupGridComponent.prototype.enableFullTree;
    /**
     * 显示文本自定义函数
     * @type {?}
     */
    LookupGridComponent.prototype.displayFormatter;
    /**
     * 显示文本字段集合，以 英文 逗号隔开
     * @type {?}
     */
    LookupGridComponent.prototype.displayFields;
    /** @type {?} */
    LookupGridComponent.prototype.displayTextSeparator;
    /**
     * 帮助元数据ID，不为空时调用指定的URI
     * /api/runtime/bcc/v1.0/help/data/{helpId}
     * @type {?}
     */
    LookupGridComponent.prototype.helpId;
    /**
     * 文本对齐方式； left | center | right; 默认 left
     * @type {?}
     */
    LookupGridComponent.prototype.textAlign;
    /**
     * 鼠标滑过输入框时显示输入框内的文本信息
     * @type {?}
     */
    LookupGridComponent.prototype.enableTitle;
    /** @type {?} */
    LookupGridComponent.prototype.useExtendInfo;
    /** @type {?} */
    LookupGridComponent.prototype.extInfoFields;
    /** @type {?} */
    LookupGridComponent.prototype.extInfoFormatter;
    /** @type {?} */
    LookupGridComponent.prototype.extendInfo;
    /**
     * IDE 设计器自定义格式化 2103
     * @type {?}
     */
    LookupGridComponent.prototype.customFormatter;
    /** @type {?} */
    LookupGridComponent.prototype.customNavFormatter;
    /**
     * 自定义确定事件
     * @type {?}
     */
    LookupGridComponent.prototype.okHandler;
    /**
     * 自定义取消事件
     * @type {?}
     */
    LookupGridComponent.prototype.cancelHandler;
    /** @type {?} */
    LookupGridComponent.prototype.tagboxHeight;
    /** @type {?} */
    LookupGridComponent.prototype.maxTagboxHeight;
    /**
     * 启用获取所有子级数据的功能,仅支持分级码
     * @type {?}
     */
    LookupGridComponent.prototype.enableGetAllChildNodes;
    /** @type {?} */
    LookupGridComponent.prototype.shortcutKey;
    /**
     * 快捷选择相关配置项，默认为 null, 即不启用此功能
     * @type {?}
     */
    LookupGridComponent.prototype.quickSelect;
    /**
     * 树形帮助 是否使用树形结构数据。默认为 true, 当为 false 时，服务器端无须构造树形结构，按普通列表输出
     * @type {?}
     */
    LookupGridComponent.prototype.treeToList;
    /** @type {?} */
    LookupGridComponent.prototype.navTreeToList;
    /**
     * 带导航的帮助中，是否显示左侧导航部分。默认 true
     * @type {?}
     */
    LookupGridComponent.prototype.showNavigation;
    /**
     * 数据选择后，值映射前触发
     * 返回 Observable
     *      canSelect: <boolean>  是否允许选择
     *      message: <string> 不允许选择时的提示信息
     * @type {?}
     */
    LookupGridComponent.prototype.beforeSelectData;
    /** @type {?} */
    LookupGridComponent.prototype.beforeLoadData;
    /**
     * 是否启用新布局
     * - 默认 false
     * @type {?}
     */
    LookupGridComponent.prototype.useNewLayout;
    /**
     * 启用多字段查询 默认为 false
     * - 启用此特性后，useNewLayout 自动启用
     * @type {?}
     */
    LookupGridComponent.prototype.enableMultiFieldSearch;
    /**
     * 搜索工具条显示模式， both: 全部显示；onlyfield: 仅显示字段；onlyinput: 仅显示搜索输入框。默认 both
     * @type {?}
     */
    LookupGridComponent.prototype.searchBarMode;
    /**
     * 允许查询的字段，仅启用多字段查询时有效，多个字段以 “,” 隔开；
     *  - nav 左侧导航字段；main 主数据字段;
     *  - 默认为 null, 即从所有显示列中自动提取
     * @type {?}
     */
    LookupGridComponent.prototype.allowQueryFields;
    /** @type {?} */
    LookupGridComponent.prototype.labels;
    /**
     * 允许任意字段进行查询； 默认 true
     * @type {?}
     */
    LookupGridComponent.prototype.searchAnyField;
    /** @type {?} */
    LookupGridComponent.prototype.selectedData;
    /** @type {?} */
    LookupGridComponent.prototype.clear;
    /**
     * 未启用多字段查询时触发
     * @type {?}
     */
    LookupGridComponent.prototype.search;
    /**
     * 启用多字段查询时触发
     * @type {?}
     */
    LookupGridComponent.prototype.query;
    /** @type {?} */
    LookupGridComponent.prototype.valueChanged;
    /** @type {?} */
    LookupGridComponent.prototype.loadSuccess;
    /** @type {?} */
    LookupGridComponent.prototype.pagerChanged;
    /** @type {?} */
    LookupGridComponent.prototype.expandTreeNode;
    /** @type {?} */
    LookupGridComponent.prototype.textChanged;
    /** @type {?} */
    LookupGridComponent.prototype.checkedChange;
    /** @type {?} */
    LookupGridComponent.prototype.tagRemoved;
    /**
     * 内容中留白边距
     * @type {?}
     */
    LookupGridComponent.prototype.containerMargin;
    /** @type {?} */
    LookupGridComponent.prototype.containerStyle;
    /** @type {?} */
    LookupGridComponent.prototype._gridOptions;
    /** @type {?} */
    LookupGridComponent.prototype.contentContainer;
    /** @type {?} */
    LookupGridComponent.prototype.favoritesContainer;
    /** @type {?} */
    LookupGridComponent.prototype.leftContainer;
    /** @type {?} */
    LookupGridComponent.prototype.centerContainer;
    /** @type {?} */
    LookupGridComponent.prototype.selectedDtRef;
    /** @type {?} */
    LookupGridComponent.prototype.inputGroup;
    /** @type {?} */
    LookupGridComponent.prototype.leftPanel;
    /** @type {?} */
    LookupGridComponent.prototype.tagbox;
    /** @type {?} */
    LookupGridComponent.prototype.okButton;
    /** @type {?} */
    LookupGridComponent.prototype.tagInput;
    /** @type {?} */
    LookupGridComponent.prototype.selectedpanel;
    /** @type {?} */
    LookupGridComponent.prototype.cascadeSelect;
    /** @type {?} */
    LookupGridComponent.prototype.layoutRef;
    /** @type {?} */
    LookupGridComponent.prototype.componentRef;
    /** @type {?} */
    LookupGridComponent.prototype.leftComponentRef;
    /** @type {?} */
    LookupGridComponent.prototype.favoritesComponentRef;
    /** @type {?} */
    LookupGridComponent.prototype.http;
    /** @type {?} */
    LookupGridComponent.prototype.messagerService;
    /** @type {?} */
    LookupGridComponent.prototype.loadingService;
    /** @type {?} */
    LookupGridComponent.prototype.loading;
    /** @type {?} */
    LookupGridComponent.prototype.navigationOptions;
    /** @type {?} */
    LookupGridComponent.prototype.leftPanelWidth;
    /** @type {?} */
    LookupGridComponent.prototype.navLookupDialogMinWidth;
    /** @type {?} */
    LookupGridComponent.prototype.navigationFilter;
    /** @type {?} */
    LookupGridComponent.prototype.subscriptions;
    /** @type {?} */
    LookupGridComponent.prototype.dialogOpenedSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.dialogClosedSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.isTextChange;
    /** @type {?} */
    LookupGridComponent.prototype.isTabChanged;
    /** @type {?} */
    LookupGridComponent.prototype.displayInfo;
    /** @type {?} */
    LookupGridComponent.prototype.tabChangeSubscription;
    /** @type {?} */
    LookupGridComponent.prototype.personalConf;
    /** @type {?} */
    LookupGridComponent.prototype.favoriteColumns;
    /**
     * 临时查询参数
     * @type {?}
     */
    LookupGridComponent.prototype._searchState;
    /** @type {?} */
    LookupGridComponent.prototype.allData;
    /** @type {?} */
    LookupGridComponent.prototype.personalConfigService;
    /** @type {?} */
    LookupGridComponent.prototype.utilService;
    /** @type {?} */
    LookupGridComponent.prototype.treeNodeHelper;
    /** @type {?} */
    LookupGridComponent.prototype.localService;
    /** @type {?} */
    LookupGridComponent.prototype.notifyService;
    /** @type {?} */
    LookupGridComponent.prototype.allColumnsTitle;
    /** @type {?} */
    LookupGridComponent.prototype.mustWriteSomething;
    /** @type {?} */
    LookupGridComponent.prototype.mustChoosAdatarow;
    /** @type {?} */
    LookupGridComponent.prototype.addFavoriteSuccess;
    /** @type {?} */
    LookupGridComponent.prototype.delFavoriteSuccess;
    /**
     * 使用内置的查询方法, 默认 false
     * @type {?}
     */
    LookupGridComponent.prototype.useInsideSearchHandler;
    /** @type {?} */
    LookupGridComponent.prototype.searching;
    /**
     * 临时存储查询结果集
     * @type {?}
     */
    LookupGridComponent.prototype._searchResult;
    /** @type {?} */
    LookupGridComponent.prototype.lookupinitializationSubject;
    /**
     * 多选时，选中的数据
     * @type {?}
     */
    LookupGridComponent.prototype.currentSelectedItems;
    /**
     * 已选数据列信息
     * @type {?}
     */
    LookupGridComponent.prototype.selectedColumns;
    /** @type {?} */
    LookupGridComponent.prototype.activeTab;
    /** @type {?} */
    LookupGridComponent.prototype.favHelper;
    /** @type {?} */
    LookupGridComponent.prototype.ttEventMgr;
    /** @type {?} */
    LookupGridComponent.prototype.multiSelMgr;
    /** @type {?} */
    LookupGridComponent.prototype.httpMgr;
    /** @type {?} */
    LookupGridComponent.prototype.lookupCmpMgr;
    /** @type {?} */
    LookupGridComponent.prototype.dialogMgr;
    /** @type {?} */
    LookupGridComponent.prototype.selectionMgr;
    /** @type {?} */
    LookupGridComponent.prototype.dtEventMgr;
    /** @type {?} */
    LookupGridComponent.prototype.lookupSelectionSer;
    /** @type {?} */
    LookupGridComponent.prototype.controlId;
    /** @type {?} */
    LookupGridComponent.prototype.savingFaoriteData;
    /** @type {?} */
    LookupGridComponent.prototype.isReady;
    /** @type {?} */
    LookupGridComponent.prototype.showTagboxClearButton;
    /** @type {?} */
    LookupGridComponent.prototype.hasError;
    /** @type {?} */
    LookupGridComponent.prototype.cascadeStatusItems;
    /** @type {?} */
    LookupGridComponent.prototype.isGetAllChidlNodes;
    /** @type {?} */
    LookupGridComponent.prototype.eventManager;
    /**
     * 选中记录ID，自定义帮助取数时使用
     * @type {?}
     */
    LookupGridComponent.prototype.selectedIds;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.lookupSearchInputEvent;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.farrisInstances;
    /**
     * 用户初始设置
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype._userSettings;
    /** @type {?} */
    LookupGridComponent.prototype._treeInfo_;
    /**
     * dialog 内容区域高度。 弹窗总高度 - 头部高度 - 脚部高度 - （启用收藏 TAB头高度）
     * @type {?}
     */
    LookupGridComponent.prototype.dialogContentHeight;
    /**
     * 左树右列表， 左树点击节点查询时是否包括下级节点的数据，默认 false
     * @type {?}
     */
    LookupGridComponent.prototype.includeSubordinates;
    /** @type {?} */
    LookupGridComponent.prototype.includeSubordinates$;
    /** @type {?} */
    LookupGridComponent.prototype.includeSubordinates$$;
    /** @type {?} */
    LookupGridComponent.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.debugSer;
    /** @type {?} */
    LookupGridComponent.prototype.injector;
    /** @type {?} */
    LookupGridComponent.prototype.cfr;
    /** @type {?} */
    LookupGridComponent.prototype.el;
    /** @type {?} */
    LookupGridComponent.prototype.utils;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.defaultMapping;
    /** @type {?} */
    LookupGridComponent.prototype.changeDetector;
    /** @type {?} */
    LookupGridComponent.prototype.shortcuts;
    /** @type {?} */
    LookupGridComponent.prototype.lookupUtils;
    /**
     * @type {?}
     * @private
     */
    LookupGridComponent.prototype.zone;
    /** @type {?} */
    LookupGridComponent.prototype.render2;
    /* Skipping unhandled member: ;*/
}
//# sourceMappingURL=data:application/json;base64,