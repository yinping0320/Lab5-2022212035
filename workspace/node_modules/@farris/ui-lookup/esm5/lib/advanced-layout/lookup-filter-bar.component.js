/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, ViewChild } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { SearchBoxComponent, SearchFieldsComponent } from '@farris/ui-search-box';
import { LookupGridComponent } from '../lookup-grid.component';
import { SearchBarMode } from '../lookup-displaytype';
var LookupFilterBarComponent = /** @class */ (function () {
    function LookupFilterBarComponent(injector, cd, lookIns) {
        this.injector = injector;
        this.cd = cd;
        this.lookIns = lookIns;
        this.fields = [];
        this.filterFields = [];
        this.searchAnyField = true;
        this.columns = [];
        this.viewType = SearchBarMode.both;
        this.isNav = false;
        this.searchFields = [];
        this.conditionsChange = new EventEmitter();
        this.textConditions = [];
        this.fieldConditons = [];
        this.dialogRef = this.injector.get(DialogComponent, null);
        this.el = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.searchFields = this.searchFields || [];
        this.convertColumnsToSearchFields();
        if (this.dialogRef && this.searchboxRef) {
            this.dialogRef.moving.subscribe((/**
             * @return {?}
             */
            function () {
                _this.searchboxRef.updateShadowBoxPosition();
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.convertColumnsToSearchFields();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initSearchValue();
            }), 100);
        }
    };
    /**
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    LookupFilterBarComponent.prototype.initSearchValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lookIns._searchState && !this.isNav && this.searchboxRef) {
            var _a = this.lookIns._searchState, field = _a.field, value = _a.value;
            if (field === '*' && value != '' && value !== null && value !== undefined) {
                /** @type {?} */
                var alltitle = this.lookIns.localService.getValue('lookup.anyFields');
                /** @type {?} */
                var _conditions = [{ code: '*', name: alltitle, value: value }];
                this.searchboxRef.setValue(_conditions, false);
                this.textConditions = this.searchboxRef.expandStarFieldToAllFields();
            }
        }
    };
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    LookupFilterBarComponent.prototype.converColumnToFilterField = /**
     * @private
     * @param {?} n
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var t = {};
        t.id = n.field;
        t.labelCode = n.field;
        t.code = n.fieldPath;
        t.name = n.title;
        /** @type {?} */
        var options = n.formatter ? n.formatter.options : null;
        // 数字
        if (n.fieldType === 'NumericType') {
            /** @type {?} */
            var _options = tslib_1.__assign({}, (options || {}));
            n.precision = n.precision || 0;
            _options.precision = _options.precision || 0;
            if (n.precision != _options.precision) {
                _options.precision = n.precision;
            }
            t.control = Object.assign({
                "controltype": "number",
                "bigNumber": false,
                "placeHolder": '请输入数字',
                single: true
            }, _options);
            t.beginPlaceHolder = "开始数值";
            t.endPlaceHolder = "结束数值";
        }
        // 枚举
        if (n.fieldType === 'EnumType') {
            t.control = {
                "controltype": "enum",
                "enumValues": n.formatter.options.data,
                single: true
            };
        }
        // 布尔
        if (n.fieldType === 'BooleanType') {
            /** @type {?} */
            var trueText = options ? options.trueText || 'True' : 'True';
            /** @type {?} */
            var falseText = options ? options.falseText || 'False' : 'False';
            t.control = {
                controltype: 'dropdown',
                enumValues: [
                    { value: 1, name: trueText },
                    { value: 0, name: falseText },
                ],
                single: true
            };
        }
        // 日期
        if (n.fieldType === "DateType" || n.fieldType === 'DateTimeType') {
            /** @type {?} */
            var dateFormat = 'yyyy-MM-dd';
            /** @type {?} */
            var showTime = false;
            /** @type {?} */
            var showType = '1';
            if (options) {
                if (options.format) {
                    dateFormat = options.format;
                }
            }
            if (n.fieldType === 'DateTimeType') {
                showTime = true;
            }
            if (dateFormat === 'yyyy') {
                showType = '2';
            }
            if (dateFormat === 'yyyy-MM') {
                showType = '3';
            }
            t.control = {
                "controltype": "datetime",
                "placeholder": "请选择日期",
                single: true,
                dateFormat: dateFormat,
                showTime: showTime,
                showType: showType
            };
        }
        return t;
    };
    /**
     * @private
     * @return {?}
     */
    LookupFilterBarComponent.prototype.convertColumnsToSearchFields = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns && this.columns.length) {
            this.fields = this.columns.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fieldType && (n.fieldType === 'StringType' || n.fieldType === 'TextType'); })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    code: n.fieldPath,
                    name: n.title
                };
            }));
            if (!this.fields.length && this.searchFields.length) {
                this.fields = this.searchFields.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        code: n.value,
                        name: n.label
                    };
                }));
            }
            if (this.viewType === 'both' || this.viewType === 'onlyfield') {
                this.filterFields = this.columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.fieldType && n.fieldType !== 'StringType' && n.fieldType !== 'TextType' && n.field; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return _this.converColumnToFilterField(n);
                }));
            }
            if (this.lookIns && this.lookIns.allowQueryFields) {
                var _a = this.lookIns.allowQueryFields, nav = _a.nav, main = _a.main;
                /** @type {?} */
                var queryFields = main;
                if (this.isNav) {
                    queryFields = nav;
                }
                if (queryFields) {
                    /** @type {?} */
                    var _queryFields_1 = queryFields.split(',');
                    this.fields = this.fields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _queryFields_1.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === n.code; })) > -1; }));
                    this.filterFields = this.filterFields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _queryFields_1.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === n.code; })) > -1; }));
                }
            }
            this.cd.markForCheck();
        }
    };
    /**
     * @param {?} $event
     * @param {?=} isString
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onConditionChange = /**
     * @param {?} $event
     * @param {?=} isString
     * @return {?}
     */
    function ($event, isString) {
        if (isString === void 0) { isString = true; }
        if (isString) {
            this.textConditions = $event;
        }
        else {
            this.fieldConditons = $event;
        }
        this.textConditions = this.textConditions || [];
        /** @type {?} */
        var _conditions$ = this.fieldConditons.concat([]);
        if (this.fieldConditons && this.fieldConditons.length && this.textConditions.length) {
            _conditions$[0].lbracket = this.fieldConditons[0].lbracket + '(';
            _conditions$[_conditions$.length - 1].relation = 1;
            _conditions$[_conditions$.length - 1].rbracket = _conditions$[_conditions$.length - 1].rbracket + ')';
        }
        /** @type {?} */
        var _conditions = _conditions$.concat(this.textConditions);
        this.conditionsChange.emit(_conditions);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onClearConditions = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.textConditions = [];
        this.fieldConditons = [];
        if (this.searchboxRef) {
            this.searchboxRef.clearConditions(false);
        }
        if (this.searchfieldsRef) {
            this.filterFields.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.value = null;
            }));
            this.searchfieldsRef.clearConditions(false);
        }
        this.cd.detectChanges();
        this.conditionsChange.emit([]);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onEsc = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.lookIns.closeLoading();
        this.lookIns.closeDialog();
    };
    LookupFilterBarComponent.decorators = [
        { type: Component, args: [{
                    selector: '[lookup-filter-bar]',
                    template: "\n    <div class=\"d-flex flex-row\">\n        <farris-search-fields #searchfields [fields]=\"filterFields\" class=\"mr-2 f-utils-fill\"  \n        *ngIf=\"filterFields && filterFields.length && (viewType == 'both' || viewType=== 'onlyfield')\" \n        (conditionChange)=\"onConditionChange($event, false)\"></farris-search-fields>\n\n        <div style=\"min-width:40%;\" class=\"d-flex flex-row\" [class.w-100]=\"!filterFields || !filterFields.length\" [style.maxWidth]=\"filterFields && filterFields.length?'70%': '100%'\">\n            <farris-search-box #searchbox [fields]=\"fields\" [useAnyField]=\"searchAnyField\"\n            (conditionChange)=\"onConditionChange($event, true)\" class=\"f-cmp-inputgroup f-utils-fill\" \n            *ngIf=\"(viewType == 'both' || viewType=== 'onlyinput')\" (escHandler)=\"onEsc($event)\"></farris-search-box>\n            <span class=\"f-icon f-icon-remove clear-search-fields\" \n                [ngStyle]=\"((textConditions && textConditions.length) || (fieldConditons && fieldConditons.length)) ? { }: {opacity: '0.3',pointerEvents: 'none'}\"\n                (click)=\"onClearConditions($event)\" title=\"{{ 'lookup.clearAllConditions' | locale }}\" style=\"min-width:28px;border: 0;\"></span>\n        </div>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    LookupFilterBarComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: LookupGridComponent }
    ]; };
    LookupFilterBarComponent.propDecorators = {
        searchAnyField: [{ type: Input }],
        columns: [{ type: Input }],
        viewType: [{ type: Input }],
        isNav: [{ type: Input }],
        searchFields: [{ type: Input }],
        conditionsChange: [{ type: Output }],
        searchboxRef: [{ type: ViewChild, args: ['searchbox',] }],
        searchfieldsRef: [{ type: ViewChild, args: ['searchfields',] }]
    };
    return LookupFilterBarComponent;
}());
export { LookupFilterBarComponent };
if (false) {
    /** @type {?} */
    LookupFilterBarComponent.prototype.fields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.filterFields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchAnyField;
    /** @type {?} */
    LookupFilterBarComponent.prototype.columns;
    /** @type {?} */
    LookupFilterBarComponent.prototype.viewType;
    /** @type {?} */
    LookupFilterBarComponent.prototype.isNav;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchFields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.conditionsChange;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchboxRef;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchfieldsRef;
    /** @type {?} */
    LookupFilterBarComponent.prototype.textConditions;
    /** @type {?} */
    LookupFilterBarComponent.prototype.fieldConditons;
    /** @type {?} */
    LookupFilterBarComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.lookIns;
}
//# sourceMappingURL=data:application/json;base64,