/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { DataTableComponent } from '@farris/ui-datatable';
import { NotifyService } from '@farris/ui-notify';
var LookupSelectedDirective = /** @class */ (function () {
    function LookupSelectedDirective(injector, elRef, render, ngZone) {
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.ngZone = ngZone;
        this.count = 0;
        this.panelMouseEvent = null;
        this.notifySer = null;
        this.commonUtils = null;
        this.panelEscHandler = null;
        this.overlaySer = new OverLayHiddenService();
        this.notifySer = this.injector.get(NotifyService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.bindingEvents();
        }));
        this.panelMouseEvent = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.selectedPanel.nativeElement.contains(e.target) || _this.elRef.nativeElement.contains(e.target) ||
                e.target.classList.contains('lookup-clear-selected-items') || e.target.closest('.farris-messager')) {
                return;
            }
            _this.showPanel(false);
        }));
    };
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.panelMouseEvent) {
            this.panelMouseEvent();
            this.panelMouseEvent = null;
        }
    };
    /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    LookupSelectedDirective.prototype.showPanel = /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    function (show) {
        var _this = this;
        if (show === void 0) { show = true; }
        /** @type {?} */
        var panel = this.selectedPanel.nativeElement;
        if (!show) {
            this.render.removeClass(panel, 'show');
            this.render.addClass(panel, 'd-none');
            if (this.panelEscHandler) {
                this.panelEscHandler();
                this.panelEscHandler = null;
            }
        }
        else {
            this.render.addClass(panel, 'show');
            this.render.removeClass(panel, 'd-none');
            // 注册ESC
            if (this.commonUtils) {
                this.panelEscHandler = this.commonUtils.regBodyKeydownEvent(null, (/**
                 * @return {?}
                 */
                function () { return _this.showPanel(false); }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupSelectedDirective.prototype.bindingEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.selectedPanel) {
            return;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var panel = _this.selectedPanel.nativeElement;
            _this.render.listen(_this.elRef.nativeElement, 'click', (/**
             * @return {?}
             */
            function () {
                if (_this.selectedPanel && _this.count) {
                    if (panel.classList.contains('show')) {
                        _this.showPanel(false);
                    }
                    else {
                        _this.showPanel();
                        /** @type {?} */
                        var selectedTableContainer = panel.querySelector('.farris-datatable-container');
                        /** @type {?} */
                        var selectedTableBody = panel.querySelector('.farris-table-scorllable-body');
                        _this.render.removeStyle(selectedTableContainer, 'height');
                        _this.render.removeStyle(selectedTableBody, 'height');
                        _this.dataTableRef.resize({ height: panel.offsetHeight - 28, width: panel.offsetWidth - 28 });
                        _this.render.setStyle(selectedTableBody, 'height', _this.dataTableRef.tableHeight + 'px');
                        _this.render.setStyle(selectedTableBody, 'height', _this.dataTableRef.scorllableBodyHeight + 'px');
                        _this.dataTableRef.dtBody.checkBodyHeightWhenEmptyData();
                    }
                }
                else {
                    if (_this.notifySer) {
                        _this.notifySer.warning('当前还没有选择数据。');
                    }
                }
            }));
        }));
    };
    LookupSelectedDirective.decorators = [
        { type: Directive, args: [{ selector: '[lookup-selected]' },] }
    ];
    /** @nocollapse */
    LookupSelectedDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    LookupSelectedDirective.propDecorators = {
        selectedPanel: [{ type: Input }],
        dataTableRef: [{ type: Input }],
        count: [{ type: Input }]
    };
    return LookupSelectedDirective;
}());
export { LookupSelectedDirective };
if (false) {
    /** @type {?} */
    LookupSelectedDirective.prototype.selectedPanel;
    /** @type {?} */
    LookupSelectedDirective.prototype.dataTableRef;
    /** @type {?} */
    LookupSelectedDirective.prototype.count;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.panelMouseEvent;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.panelEscHandler;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,