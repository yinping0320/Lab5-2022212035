/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Renderer2, Injector, Input } from '@angular/core';
import { InputGroupComponent } from '@farris/ui-input-group';
import { PersonalConfigService } from './lookup-presonalConfig.service';
import { delay } from 'rxjs/operators';
import { LocaleService } from '@farris/ui-locale';
var LookupTipDirective = /** @class */ (function () {
    function LookupTipDirective(inputRef, renderer, injector) {
        this.inputRef = inputRef;
        this.renderer = renderer;
        this.injector = injector;
        this.enableTip = false;
        this.isInTipPanel = false;
        this.tipText = '您要找的是不是这些？';
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.localService = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tipText = this.localService.getValue('lookup.tipText');
        this.enableTip = false; // 因数据权限问题，此功能暂屏蔽 tfs: 403924
        if (this.enableTip) {
            this.inputRef.iconMouseEnter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.creatPanel();
            }));
            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!_this.isInTipPanel) {
                    _this.removePanel();
                }
            }));
            this.inputRef.clickHandle.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.removePanel();
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    // 获取快捷输入数据
    // 获取快捷输入数据
    /**
     * @private
     * @return {?}
     */
    LookupTipDirective.prototype.getQuickSelectedByLocaleId = 
    // 获取快捷输入数据
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var localeid = this.localService.localeId;
        /** @type {?} */
        var personalConf = this.personalConfigService.getPersonalData();
        if (personalConf && personalConf.quickSelected) {
            /** @type {?} */
            var items = personalConf.quickSelected[localeid];
            if (items && items.length) {
                return items;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.creatPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selected = this.getQuickSelectedByLocaleId();
        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {
            return;
        }
        /** @type {?} */
        var pos = this.setPosition();
        /** @type {?} */
        var ul = this.renderer.createElement('ul');
        /** @type {?} */
        var path = this.personalConfigService.textField.split('.');
        this.selected.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            /** @type {?} */
            var li = _this.renderer.createElement('li');
            li.innerHTML = _this.find(item, _this.personalConfigService.textField);
            _this.renderer.setProperty(li, 'id', index);
            _this.renderer.appendChild(ul, li);
        }));
        /** @type {?} */
        var header = this.renderer.createElement('div');
        this.renderer.addClass(header, 'lookup-tip-header');
        header.innerHTML = this.tipText;
        this.tipPanel = this.renderer.createElement('div');
        this.renderer.appendChild(this.tipPanel, header);
        this.renderer.appendChild(this.tipPanel, ul);
        this.renderer.addClass(this.tipPanel, 'lookup-tip');
        this.renderer.setStyle(this.tipPanel, 'top', pos.top);
        this.renderer.setStyle(this.tipPanel, 'left', pos.left);
        this.renderer.setStyle(this.tipPanel, 'width', pos.width);
        this.renderer.appendChild(document.body, this.tipPanel);
        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', (/**
         * @return {?}
         */
        function () {
            _this.removePanel();
        }));
        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', (/**
         * @return {?}
         */
        function () {
            _this.isInTipPanel = true;
        }));
        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.target.nodeName === 'LI') {
                _this.selectItem(e.target.id);
            }
        }));
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.removePanel = /**
     * @return {?}
     */
    function () {
        if (document.body.contains(this.tipPanel)) {
            this.renderer.removeChild(document.body, this.tipPanel);
            this.tipPanel = null;
            this.isInTipPanel = false;
            this.leaveEvent();
            this.enterEvent();
            this.clickEvent();
        }
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.setPosition = /**
     * @return {?}
     */
    function () {
        var _a = this.inputRef.inputGroup.nativeElement.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;
        return {
            left: left + 'px',
            top: top + height + 'px',
            width: width + 'px'
        };
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupTipDirective.prototype.selectItem = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var item = this.selected.find((/**
         * @param {?} el
         * @param {?} index
         * @return {?}
         */
        function (el, index) { return Number(val) === index; }));
        this.removePanel();
        if (this.personalConfigService.singleSelect) {
            this.personalConfigService.selectItemObser$.next(item);
        }
        else {
            this.personalConfigService.selectItemObser$.next([item]);
        }
    };
    /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    LookupTipDirective.prototype.find = /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    function (obj, keys) {
        /** @type {?} */
        var keyArr = keys.split('.');
        /** @type {?} */
        var key = keyArr[0];
        /** @type {?} */
        var target = obj[key];
        if (target instanceof Object) {
            keyArr.shift();
            return this.find(target, keyArr.join('.'));
        }
        else {
            return target;
        }
    };
    LookupTipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lookup-tip]'
                },] }
    ];
    /** @nocollapse */
    LookupTipDirective.ctorParameters = function () { return [
        { type: InputGroupComponent },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    LookupTipDirective.propDecorators = {
        enableTip: [{ type: Input, args: ['lookup-tip',] }]
    };
    return LookupTipDirective;
}());
export { LookupTipDirective };
if (false) {
    /** @type {?} */
    LookupTipDirective.prototype.enableTip;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.tipPanel;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.leaveEvent;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.enterEvent;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.clickEvent;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.isInTipPanel;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.selected;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.personalConfigService;
    /** @type {?} */
    LookupTipDirective.prototype.localService;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.tipText;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LookupTipDirective.prototype.renderer;
    /** @type {?} */
    LookupTipDirective.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,