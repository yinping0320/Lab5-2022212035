/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-15 15:24:24
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-30 14:01:34
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { of, Subject } from 'rxjs';
import { Component, Input, Output, EventEmitter, TemplateRef, ViewChild, Injector, forwardRef, ElementRef, ChangeDetectorRef, HostBinding, NgZone } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { DialogComponent } from '@farris/ui-dialog';
/** @type {?} */
export var LOOKUPINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LookupComponent; })),
    multi: true
};
var LookupComponent = /** @class */ (function () {
    function LookupComponent(injector, el, changeDetector) {
        this.injector = injector;
        this.el = el;
        this.changeDetector = changeDetector;
        this.hostCls = 'f-cmp-inputgroup';
        /**
         * 窗口标题。默认值：此处显示帮助标题
         */
        this.title = '';
        /**
         * 按钮对齐方式
         */
        this.buttonAlign = 'right';
        /**
         * 是否显示按钮
         */
        this.showButtons = true;
        /**
         * 显示关闭按钮
         */
        this.showCloseButton = true;
        /**
         * 显示最大化按钮
         */
        this.showMaxButton = true;
        /**
         * 允许拖拽尺寸
         */
        this.resizable = true;
        /**
         * 允许拖动窗口
         */
        this.draggable = true;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 允许编辑文本框
         */
        this.editable = true;
        /**
         * 只读
         */
        this.readonly = false;
        this.displayText = '';
        /**
         * 窗口打开后
         */
        this.dialogOpened = new EventEmitter();
        /**
         * 窗口关闭后
         */
        this.dialogClosed = new EventEmitter();
        /**
         * 窗口最大化
         */
        this.dialogMaxed = new EventEmitter();
        /**
         * 拖拽改变窗口尺寸进行时
         */
        this.resizing = new EventEmitter();
        /**
         * 拖拽改变窗口尺寸结束
         */
        this.resized = new EventEmitter();
        /**
         * 帮助窗口默认尺寸
         */
        this.defaultDialogSize = { width: 550, height: 570 };
        this.dialogCreated = new Subject();
        this._isShow = false;
        this.displayValue = '';
        this.originalText = '';
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.ngZone = this.injector.get(NgZone);
        // if (!this.personalConfigService) {
        //     const idServ = this.injector.get(IdService);
        //     this.personalConfigService = new PersonalConfigService(idServ);
        // }
    }
    Object.defineProperty(LookupComponent.prototype, "content", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            if (this.dialog !== content) {
                this.dialog = content;
                if (content) {
                    this.dialogCreated.next(this.dialog);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupComponent.prototype, "isShow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isShow;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._isShow = val;
            if (!this.changeDetector['destroyed']) {
                this.changeDetector.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupComponent.prototype, "invalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ngControl.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initEvents();
        this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lookupUnsubscribe();
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dialog) {
            this.dialog.closed.subscribe((/**
             * @return {?}
             */
            function () {
                _this.isShow = false;
                _this.dialog = null;
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.initEvents = /**
     * @return {?}
     */
    function () {
        if (!this.dictPicking) {
            this.dictPicking = (/**
             * @return {?}
             */
            function () { return of({ showDialog: true }); });
        }
        if (!this.dictPicked) {
            this.dictPicked = (/**
             * @return {?}
             */
            function () { return of({ closeDialog: true }); });
        }
        if (!this.beforeOpen) {
            this.beforeOpen = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeClose) {
            this.beforeClose = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.dialogHeight) {
            this.dialogHeight = this.defaultDialogSize.height;
        }
        if (!this.dialogWidth) {
            this.dialogWidth = this.defaultDialogSize.width;
        }
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled || this.readonly) {
            return false;
        }
        this.dictPicking().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val.showDialog === false) {
                return;
            }
            _this.isShow = true;
            // this.changeDetector.detectChanges();
            _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.dialog.show(); }));
            }));
        }));
        return false;
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.isShow = false;
        if (this.dialog) {
            this.dialog.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupComponent.prototype.lookupUnsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dictPickedSubscription) {
            this.dictPickedSubscription.unsubscribe();
        }
        if (this.dictPickingSubscription) {
            this.dictPickingSubscription.unsubscribe();
        }
        if (this.dialogCreatedSubscription) {
            this.dialogCreatedSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onResizing = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizing.emit(pos.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onResized = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resized.emit(pos.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onMaxDialog = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.dialogMaxed.emit(pos.size);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LookupComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj) {
            this.displayText = obj;
            this.displayValue = obj;
            this.originalText = this.displayText;
        }
        else {
            this.displayText = '';
            this.displayValue = '';
            this.originalText = '';
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LookupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LookupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    LookupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    LookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-lookup',
                    template: "\n        <div\n            class=\"lookupbox input-group\"\n            [ngClass]=\"{\n                'f-state-disabled': disabled,\n                'f-state-readonly': readonly,\n                'f-state-editable': !editable\n            }\"\n        >\n            <input\n                class=\"form-control\"\n                [value]=\"displayText\"\n                [disabled]=\"disabled\"\n                [readonly]=\"!editable || readonly\"\n            />\n            <div class=\"input-group-append\">\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\n                    <i class=\"f-icon f-icon-lookup\"></i>\n                </span>\n            </div>\n        </div>\n        <farris-dialog\n            #dialog\n            *ngIf=\"isShow\"\n            [title]=\"title\"\n            [beforeOpen]=\"beforeOpen\"\n            [beforeClose]=\"beforeClose\"\n            [width]=\"dialogWidth\"\n            [height]=\"dialogHeight\"\n            [showButtons]=\"showButtons\"\n            [showMaxButton]=\"showMaxButton\"\n            [buttons]=\"buttonsRef || defaultButtonRef\"\n            [buttonAlign]=\"buttonAlign\"\n            (maxed)=\"onMaxDialog($event)\"\n            (resized)=\"onResized($event)\"\n            (resizing)=\"onResizing($event)\"\n        >\n            <ng-content></ng-content>\n\n            <ng-template #defaultButtonRef>\n                <div style=\"width: 100%;\">\n                    <button\n                        class=\"btn btn-secondary btn-lg\"\n                        (click)=\"closeDialog()\"\n                    >\n                        Cancel\n                    </button>\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\n                </div>\n            </ng-template>\n        </farris-dialog>\n    ",
                    providers: [LOOKUPINPUT_VALUE_ACCESSOR],
                    styles: ["\n            .input-group {\n                flex-wrap: nowrap;\n            }\n            :host-context(.ng-invalid) .form-control {\n                border-color: #ff0303;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    LookupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    LookupComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ['class',] }],
        dialogWidth: [{ type: Input }],
        dialogHeight: [{ type: Input }],
        title: [{ type: Input }],
        buttonAlign: [{ type: Input }],
        buttonsRef: [{ type: Input }],
        showButtons: [{ type: Input }],
        showCloseButton: [{ type: Input }],
        showMaxButton: [{ type: Input }],
        resizable: [{ type: Input }],
        draggable: [{ type: Input }],
        disabled: [{ type: Input }],
        editable: [{ type: Input }],
        readonly: [{ type: Input }],
        mapFields: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        displayText: [{ type: Input }],
        context: [{ type: Input }],
        beforeOpen: [{ type: Input }],
        beforeClose: [{ type: Input }],
        dictPicking: [{ type: Input }],
        dictPicked: [{ type: Input }],
        dialogOpened: [{ type: Output }],
        dialogClosed: [{ type: Output }],
        dialogMaxed: [{ type: Output }],
        resizing: [{ type: Output }],
        resized: [{ type: Output }],
        content: [{ type: ViewChild, args: ['dialog',] }]
    };
    return LookupComponent;
}());
export { LookupComponent };
if (false) {
    /** @type {?} */
    LookupComponent.prototype.hostCls;
    /**
     * 窗口宽度
     * @type {?}
     */
    LookupComponent.prototype.dialogWidth;
    /**
     * 窗口高度
     * @type {?}
     */
    LookupComponent.prototype.dialogHeight;
    /**
     * 窗口标题。默认值：此处显示帮助标题
     * @type {?}
     */
    LookupComponent.prototype.title;
    /**
     * 按钮对齐方式
     * @type {?}
     */
    LookupComponent.prototype.buttonAlign;
    /**
     * 按钮模板
     * @type {?}
     */
    LookupComponent.prototype.buttonsRef;
    /**
     * 是否显示按钮
     * @type {?}
     */
    LookupComponent.prototype.showButtons;
    /**
     * 显示关闭按钮
     * @type {?}
     */
    LookupComponent.prototype.showCloseButton;
    /**
     * 显示最大化按钮
     * @type {?}
     */
    LookupComponent.prototype.showMaxButton;
    /**
     * 允许拖拽尺寸
     * @type {?}
     */
    LookupComponent.prototype.resizable;
    /**
     * 允许拖动窗口
     * @type {?}
     */
    LookupComponent.prototype.draggable;
    /**
     * 禁用
     * @type {?}
     */
    LookupComponent.prototype.disabled;
    /**
     * 允许编辑文本框
     * @type {?}
     */
    LookupComponent.prototype.editable;
    /**
     * 只读
     * @type {?}
     */
    LookupComponent.prototype.readonly;
    /**
     * 字段映射, { 帮助数据字段：表单字段 }
     * @type {?}
     */
    LookupComponent.prototype.mapFields;
    /**
     * 值字段
     * @type {?}
     */
    LookupComponent.prototype.valueField;
    /**
     * 文本字段
     * @type {?}
     */
    LookupComponent.prototype.textField;
    /** @type {?} */
    LookupComponent.prototype.displayText;
    /**
     * 运行时上下文自定义对象
     * @type {?}
     */
    LookupComponent.prototype.context;
    /**
     * 窗口打开前事件
     * @type {?}
     */
    LookupComponent.prototype.beforeOpen;
    /**
     * 窗口关闭前事件
     * @type {?}
     */
    LookupComponent.prototype.beforeClose;
    /**
     * 帮助前事件
     * @type {?}
     */
    LookupComponent.prototype.dictPicking;
    /** @type {?} */
    LookupComponent.prototype.dictPickingSubscription;
    /**
     * 帮助后事件
     * @type {?}
     */
    LookupComponent.prototype.dictPicked;
    /** @type {?} */
    LookupComponent.prototype.dictPickedSubscription;
    /**
     * 窗口打开后
     * @type {?}
     */
    LookupComponent.prototype.dialogOpened;
    /**
     * 窗口关闭后
     * @type {?}
     */
    LookupComponent.prototype.dialogClosed;
    /**
     * 窗口最大化
     * @type {?}
     */
    LookupComponent.prototype.dialogMaxed;
    /**
     * 拖拽改变窗口尺寸进行时
     * @type {?}
     */
    LookupComponent.prototype.resizing;
    /**
     * 拖拽改变窗口尺寸结束
     * @type {?}
     */
    LookupComponent.prototype.resized;
    /**
     * 帮助窗口默认尺寸
     * @type {?}
     * @private
     */
    LookupComponent.prototype.defaultDialogSize;
    /** @type {?} */
    LookupComponent.prototype.dialogCreated;
    /** @type {?} */
    LookupComponent.prototype.dialogCreatedSubscription;
    /** @type {?} */
    LookupComponent.prototype.dialog;
    /**
     * @type {?}
     * @private
     */
    LookupComponent.prototype._isShow;
    /** @type {?} */
    LookupComponent.prototype.ngControl;
    /** @type {?} */
    LookupComponent.prototype.displayValue;
    /** @type {?} */
    LookupComponent.prototype.originalText;
    /**
     * @type {?}
     * @private
     */
    LookupComponent.prototype.ngZone;
    /** @type {?} */
    LookupComponent.prototype.onModelChange;
    /** @type {?} */
    LookupComponent.prototype.onModelTouched;
    /** @type {?} */
    LookupComponent.prototype.injector;
    /** @type {?} */
    LookupComponent.prototype.el;
    /** @type {?} */
    LookupComponent.prototype.changeDetector;
}
//# sourceMappingURL=data:application/json;base64,