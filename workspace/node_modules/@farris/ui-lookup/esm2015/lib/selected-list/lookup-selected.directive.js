/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { DataTableComponent } from '@farris/ui-datatable';
import { NotifyService } from '@farris/ui-notify';
export class LookupSelectedDirective {
    /**
     * @param {?} injector
     * @param {?} elRef
     * @param {?} render
     * @param {?} ngZone
     */
    constructor(injector, elRef, render, ngZone) {
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.ngZone = ngZone;
        this.count = 0;
        this.panelMouseEvent = null;
        this.notifySer = null;
        this.commonUtils = null;
        this.panelEscHandler = null;
        this.overlaySer = new OverLayHiddenService();
        this.notifySer = this.injector.get(NotifyService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.bindingEvents();
        }));
        this.panelMouseEvent = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.selectedPanel.nativeElement.contains(e.target) || this.elRef.nativeElement.contains(e.target) ||
                e.target.classList.contains('lookup-clear-selected-items') || e.target.closest('.farris-messager')) {
                return;
            }
            this.showPanel(false);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.panelMouseEvent) {
            this.panelMouseEvent();
            this.panelMouseEvent = null;
        }
    }
    /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    showPanel(show = true) {
        /** @type {?} */
        const panel = this.selectedPanel.nativeElement;
        if (!show) {
            this.render.removeClass(panel, 'show');
            this.render.addClass(panel, 'd-none');
            if (this.panelEscHandler) {
                this.panelEscHandler();
                this.panelEscHandler = null;
            }
        }
        else {
            this.render.addClass(panel, 'show');
            this.render.removeClass(panel, 'd-none');
            // 注册ESC
            if (this.commonUtils) {
                this.panelEscHandler = this.commonUtils.regBodyKeydownEvent(null, (/**
                 * @return {?}
                 */
                () => this.showPanel(false)));
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    bindingEvents() {
        if (!this.selectedPanel) {
            return;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const panel = this.selectedPanel.nativeElement;
            this.render.listen(this.elRef.nativeElement, 'click', (/**
             * @return {?}
             */
            () => {
                if (this.selectedPanel && this.count) {
                    if (panel.classList.contains('show')) {
                        this.showPanel(false);
                    }
                    else {
                        this.showPanel();
                        /** @type {?} */
                        const selectedTableContainer = panel.querySelector('.farris-datatable-container');
                        /** @type {?} */
                        const selectedTableBody = panel.querySelector('.farris-table-scorllable-body');
                        this.render.removeStyle(selectedTableContainer, 'height');
                        this.render.removeStyle(selectedTableBody, 'height');
                        this.dataTableRef.resize({ height: panel.offsetHeight - 28, width: panel.offsetWidth - 28 });
                        this.render.setStyle(selectedTableBody, 'height', this.dataTableRef.tableHeight + 'px');
                        this.render.setStyle(selectedTableBody, 'height', this.dataTableRef.scorllableBodyHeight + 'px');
                        this.dataTableRef.dtBody.checkBodyHeightWhenEmptyData();
                    }
                }
                else {
                    if (this.notifySer) {
                        this.notifySer.warning('当前还没有选择数据。');
                    }
                }
            }));
        }));
    }
}
LookupSelectedDirective.decorators = [
    { type: Directive, args: [{ selector: '[lookup-selected]' },] }
];
/** @nocollapse */
LookupSelectedDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 },
    { type: NgZone }
];
LookupSelectedDirective.propDecorators = {
    selectedPanel: [{ type: Input }],
    dataTableRef: [{ type: Input }],
    count: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LookupSelectedDirective.prototype.selectedPanel;
    /** @type {?} */
    LookupSelectedDirective.prototype.dataTableRef;
    /** @type {?} */
    LookupSelectedDirective.prototype.count;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.panelMouseEvent;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.panelEscHandler;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupSelectedDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,