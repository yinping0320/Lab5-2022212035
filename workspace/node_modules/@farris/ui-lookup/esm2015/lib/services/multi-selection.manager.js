/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FavoriteIcon, FAVORITE_FIELD_NAME } from '../lookup-displaytype';
import { cloneDeep } from 'lodash-es';
export class MultiSelectionManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onSelectedTableCellClick(e) {
        if (e.col.field === FAVORITE_FIELD_NAME) {
            e.event.stopPropagation();
            /** @type {?} */
            const classList = e.event.target['classList'];
            if (classList.contains('f-lookup-unfavorite') || classList.contains('f-icon-minus-circle')) {
                /** @type {?} */
                const rid = e.row[this.ins.idField];
                this.ins.lookupSelectionSer.unSelect(rid);
                // 取消选中 主列表 收藏列表 中的数据
                if (this.ins.isTree()) {
                    /** @type {?} */
                    const tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
                    tt.unCheckedNode(rid);
                    tt.unSelectNode(rid);
                    if (this.ins.useFavorite) {
                        /** @type {?} */
                        const _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                        if (_tt && _tt.data && _tt.data.length && _tt.findRowNode(rid)) {
                            _tt.unCheckedNode(rid);
                            _tt.unSelectNode(rid);
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
                    dt.unCheckRow(rid);
                    if (this.ins.useFavorite) {
                        /** @type {?} */
                        const _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                        if (_dt && _dt.data && _dt.data.length) {
                            _dt.unCheckRow(rid);
                        }
                    }
                }
            }
        }
    }
    /**
     * 初始化已选数据列信息
     * @return {?}
     */
    initSelectedColumns() {
        /** @type {?} */
        let selectedColumns = [];
        if (this.ins.showSelected && !this.ins.singleSelect) {
            selectedColumns = cloneDeep(this.ins.gridOptions.columns);
            /** @type {?} */
            const favcol = selectedColumns.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.field === FAVORITE_FIELD_NAME));
            if (favcol) {
                favcol.formatter = (/**
                 * @return {?}
                 */
                () => {
                    return FavoriteIcon.remove;
                });
            }
            else {
                selectedColumns = selectedColumns.concat([
                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: (/**
                         * @return {?}
                         */
                        () => {
                            return FavoriteIcon.remove;
                        })
                    }
                ]);
            }
            this.ins.initColumnWidth(selectedColumns, 'sel');
        }
        return selectedColumns;
    }
    /**
     * @param {?} data
     * @return {?}
     */
    updateSelections(data) {
        if (Array.isArray(data)) {
            this.ins.lookupSelectionSer.updateSelections(data, true);
        }
        else {
            this.ins.lookupSelectionSer.select(data);
        }
    }
    /**
     * @param {?} id
     * @return {?}
     */
    remove(id) {
        if (id) {
            this.ins.lookupSelectionSer.unSelect(id);
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    deleteSelectedItems(data) {
        if (!data || !data.length) {
            return;
        }
        this.ins.lookupSelectionSer.updateSelections(data, false);
        if (!this.ins.isShow) {
            return;
        }
        /** @type {?} */
        const ids = data.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n[this.ins.idField]));
        if (this.ins.isTree()) {
            /** @type {?} */
            const tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
            tt && tt.unCheckedAndSelected(ids);
            if (this.ins.useFavorite) {
                /** @type {?} */
                const _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _tt && _tt.unCheckedNodes(ids, true, false);
            }
        }
        else {
            /** @type {?} */
            const dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
            dt && dt.unCheckRows(ids);
            if (this.ins.useFavorite) {
                /** @type {?} */
                const _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _dt && _dt.unCheckRows(ids);
            }
        }
    }
    /**
     * @return {?}
     */
    clear() {
        this.ins.lookupSelectionSer.clearSelections();
        if (!this.ins.isShow) {
            return;
        }
        if (this.ins.isTree()) {
            /** @type {?} */
            const tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
            tt && tt.clearAll();
            if (this.ins.useFavorite) {
                /** @type {?} */
                const _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _tt && _tt.clearAll();
            }
        }
        else {
            /** @type {?} */
            const dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
            dt && dt.clearSelections();
            if (this.ins.useFavorite) {
                /** @type {?} */
                const _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _dt && _dt.clearSelections();
            }
        }
    }
    /**
     * @param {?} rows
     * @return {?}
     */
    save(rows) {
        if (this.ins.showSelected) {
            this.ins.personalConf.selections = rows;
            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);
        }
    }
    /**
     * @return {?}
     */
    loadData() {
        /** @type {?} */
        let items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];
        if (!items.length) {
            items = this.ins.lookupSelectionSer.getSelections();
        }
        this.ins.lookupSelectionSer.loadSelections(items);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    MultiSelectionManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,