/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';
import { cloneDeep } from 'lodash-es';
import { of } from 'rxjs';
import { tap, catchError } from 'rxjs/operators';
export class TreeTableEventManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this._sortState = null;
        /**
         * 标识当前数据是否查询结果
         */
        this.IS_SEARCH_RESULT = false;
        this._isLoadAllTreeData = (/**
         * @param {?} tt
         * @return {?}
         */
        (tt) => {
            if (this.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'all';
            }
            else {
                return this.ins.loadTreeDataType === 'loadall';
            }
        });
        this._isAsyncLoadTreeData = (/**
         * @param {?} tt
         * @return {?}
         */
        (tt) => {
            if (this.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'async';
            }
            else {
                return this.ins.loadTreeDataType === 'layerload';
            }
        });
        this.lookupSelectionSer = this.ins.lookupSelectionSer;
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    conditionsChange(conditions) {
        this.ins.conditions = conditions;
        if (this.ins.uri) {
            if (conditions && conditions.length === 1 && conditions[0].code == '*') {
                this.ins.conditions = [];
                return this.searchTreeData({ field: '*', value: conditions[0].value });
            }
            return this.searchTreeData({ field: '*', value: '' });
        }
        else {
            this.ins.query.emit({ conditions, instance: this.ins });
        }
    }
    /**
     * @param {?} search
     * @return {?}
     */
    searchTreeData(search) {
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.componentRef.instance));
        // 判断uri 发出search.emit();
        if (this.ins.searching) {
            return;
        }
        else {
            this.ins.searching = true;
        }
        this.ins.showLoading();
        if (tt && tt.psRef && tt.psRef.directiveRef) {
            tt.psRef.directiveRef.scrollToTop(0);
        }
        return this.ins.httpMgr.getData({ search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(tap((/**
         * @return {?}
         */
        () => {
            this.ins.searching = false;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.ins.searching = false;
            return of(err);
        }))).subscribe((/**
         * @param {?} resData
         * @return {?}
         */
        resData => {
            this.ins.closeLoading();
            if (resData) {
                // this.ins.items = resData.items;
                tt.clearAll();
                /** @type {?} */
                const treeInfo = this.ins.gridOptions.treeInfo;
                if (!treeInfo['treeDataIsInit']) {
                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                        this.ins.items = this.ins.lookupUtils.makeTree(this.ins.items, treeInfo);
                    }
                    else {
                        this.ins.items = this.ins.lookupUtils.makeTreeWithParentID(this.ins.items, '', treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}` : treeInfo.parentField, this.ins.idField);
                    }
                }
                /** @type {?} */
                const checkNodes = (/**
                 * @param {?} nodes
                 * @return {?}
                 */
                (nodes) => {
                    if (nodes && nodes.length) {
                        return nodes.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        (node) => {
                            if (node.hasOwnProperty('addtional')) {
                                node.selectable = !node['addtional'];
                            }
                            if (node.children && node.children.length) {
                                checkNodes(node.children);
                            }
                            else {
                                if (this._isLoadAllTreeData(tt) && (!search || search.value === '' || search.value === undefined)) {
                                    node.leaf = true;
                                }
                            }
                            return node;
                        }));
                    }
                    return nodes;
                });
                /** @type {?} */
                const _nodes = checkNodes(resData.items);
                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {
                    _nodes[0].expanded = true;
                    _nodes[0].children = this.ins.expandFirstNode(_nodes[0].children);
                }
                this.ins.items = _nodes;
                // 加载收藏数据
                if (this.ins.useFavorite) {
                    // 更新数据的收藏状态
                    this.ins.favHelper.updateFavoritesStatus(this.ins.items);
                }
                tt.loadData(this.ins.items);
                // // 展开查询结果。
                // if (search.value && this.ins.items.length) {
                //     tt.toggleExpand(this.ins.items[0], true);
                // }
                tt.resize();
                this.IS_SEARCH_RESULT = true;
                this.ins.selectionMgr.selectCurrentValue();
            }
            this.ins.search.emit(search);
        }));
    }
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    getChildren(parentPath, parentLayer, searchData) {
        /** @type {?} */
        const uri = this.ins.gridOptions.uri;
        /** @type {?} */
        const search = Object.assign({ parentLayer, category: 'children' }, searchData);
        if (this.ins.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        const param = {
            searchValue: '',
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.componentRef.instance));
        if (tt && tt.sortName) {
            Object.assign(search, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        if (this.IS_SEARCH_RESULT) {
            param.enableFullTree = false;
            param.loadTreeDataType = 'layerload';
            if (this.ins.treeInfo.layerType === 'parentId') {
                // 树形帮助查询后，展开节点时将相关查询参数传递到后端 2022-09-13
                search.searchValue = '';
                search.searchField = '*';
            }
            // param.searchValue = JSON.stringify(search);
        }
        param.searchValue = JSON.stringify(search);
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (this.ins.conditions && this.ins.conditions.length) {
            param.searchConditions = cloneDeep(this.ins.conditions);
        }
        return this.ins.http.getData(uri, param);
    }
    /**
     * @return {?}
     */
    bindTreetableEvent() {
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.componentRef.instance));
        /** @type {?} */
        const _searchTreeData = (/**
         * @param {?} searchparam
         * @return {?}
         */
        (searchparam) => {
            if (this.ins.remoteSearch) {
                this.ins._searchState = searchparam;
                this.searchTreeData(searchparam);
            }
            else {
                if (this.ins.useInsideSearchHandler) {
                    tt.searchHandle.search(searchparam.field, searchparam.value, 'client');
                }
                else {
                    this.ins.search.emit(searchparam);
                }
            }
        });
        /** @type {?} */
        const isLoadAllTreeData = (/**
         * @return {?}
         */
        () => {
            return this._isLoadAllTreeData(tt);
        });
        /** @type {?} */
        const isAsyncLoadTreeData = (/**
         * @return {?}
         */
        () => {
            return this._isAsyncLoadTreeData(tt);
        });
        tt.dblClickExpand = !this.ins.singleSelect; // 禁用双击展开节点
        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;
        tt.idField = this.ins.idField;
        tt.columns = this.ins.columns;
        tt.searchFields = this.ins.gridOptions.searchFields;
        if (this.ins.treeInfo) {
            tt.loadDataType = this.ins.treeInfo.loadDataType;
            tt.virtualized = true;
            if (!this.ins.isTextChange) {
                this.ins.allData = cloneDeep(this.ins.items);
            }
            else {
                this.ins.allData = [];
            }
        }
        if (this.ins.gridOptions.treeInfo) {
            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;
            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;
        }
        if (!tt.singleSelect) {
            tt.checkOnSelect = true;
            tt.selectOnCheck = true;
            tt.showCheckbox = true;
            tt.showCheckAll = this.ins.showCheckAll;
            // 启用多选后，同时启用级联选择
            if (this.ins.enableCascade) {
                this.cascadeValueChanged(this.ins.cascadeStatus);
            }
            else {
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
            }
        }
        tt.enableFindText = this.ins.enableFindText;
        // tt.findField = this.textField;
        tt.nodeSelected.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {
            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;
            //     ftt.clearSelections();
            // }
            if (this.ins.singleSelect) {
                this.lookupSelectionSer.clearSelections();
            }
            this.lookupSelectionSer.updateSelections([e.node.data]);
            this.ins.checkedChange.emit({ data: [e.node.data], isCheck: true });
        }));
        tt.nodeChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (!this.ins.singleSelect) {
                /** @type {?} */
                let data = null;
                if (e.nodes && e.nodes.length) {
                    data = e.nodes.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data));
                }
                else {
                    if (Array.isArray(e.node)) {
                        data = e.node.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.data));
                    }
                    else {
                        data = [e.node.data];
                    }
                }
                this.ins.multiSelMgr.updateSelections(data);
                this.ins.checkedChange.emit({ data, isCheck: true });
            }
        }));
        tt.nodeUnChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e && e.node) {
                /** @type {?} */
                let nodeData = null;
                if (e.node.data) {
                    nodeData = e.node.data;
                }
                else {
                    if (e.node.node && e.node.node.data) {
                        nodeData = e.node.node.data;
                    }
                }
                if (!nodeData) {
                    return;
                }
                if (!this.ins.singleSelect) {
                    this.ins.multiSelMgr.remove(e.node.id);
                    // 分层加载，多选，包含下级时，取消勾选 需要将当前节点的所有子级数据也要取消选择，即从已选记录中移除
                    if (tt.loadDataType !== 'all' && this.ins.treeInfo.layerType === 'pathcode' && this.ins.enableCascade &&
                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {
                        if (e.node.children && e.node.children.length) {
                            /** @type {?} */
                            const nodes = e.node.children.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.data));
                            this.ins.lookupSelectionSer.updateSelections(nodes, false);
                        }
                        else {
                            /** @type {?} */
                            const pathcode = this.ins.getPathCode(nodeData, this.ins.treeInfo);
                            this.ins.lookupSelectionSer.unselectByPathcode(pathcode);
                        }
                    }
                    if (e.nodes && e.nodes.length) {
                        this.ins.multiSelMgr.remove(e.nodes.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.id)));
                        this.ins.checkedChange.emit({ data: e.nodes.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.data)), isCheck: false });
                    }
                    else {
                        this.ins.checkedChange.emit({ data: [nodeData], isCheck: false });
                    }
                }
                else {
                    /** @type {?} */
                    const ftt = this.ins.favoritesComponentRef && ((/** @type {?} */ (this.ins.favoritesComponentRef.instance)));
                    if (ftt && ftt.findRowNode(e.node.id)) {
                        ftt.unSelectNode(e.node.id);
                    }
                    this.ins.checkedChange.emit({ data: [nodeData], isCheck: false });
                }
            }
        }));
        tt.checkAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            /** @type {?} */
            const data = e.instance.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.data));
            this.ins.multiSelMgr.updateSelections(data);
            this.ins.checkedChange.emit({ data, isCheck: true });
        }));
        tt.unCheckAll.subscribe((/**
         * @return {?}
         */
        () => {
            this.ins.multiSelMgr.clear();
            this.ins.checkedChange.emit({ data: [], isCheck: false });
        }));
        tt.search.subscribe((/**
         * @param {?} searchparam
         * @return {?}
         */
        searchparam => {
            if (searchparam.field !== '*' && !searchparam.value) {
                this.ins.messagerService.warning(this.ins.mustWriteSomething);
            }
            else {
                searchparam.value = searchparam.value.trim();
                _searchTreeData(searchparam);
            }
        }));
        if (!tt.cellClick.observers.length) {
            tt.cellClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.col.field === FAVORITE_FIELD_NAME) {
                    e.event.stopPropagation();
                    // tslint:disable-next-line: no-string-literal
                    /** @type {?} */
                    const classList = e.event.target['classList'];
                    if (classList.contains('f-lookup-favorite')) {
                        // classList.toggle('f-icon-star');
                        // classList.toggle('f-icon-star-outline');
                        /** @type {?} */
                        const _this = this.ins;
                        ((/**
                         * @param {?} arr
                         * @return {?}
                         */
                        function each(arr) {
                            if (arr) {
                                arr.forEach((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => {
                                    /** @type {?} */
                                    const id = _this.utils.getValue(_this.idField, item.data);
                                    if (id === e.node.id) {
                                        item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];
                                        return true;
                                    }
                                    else if (item.children && item.children.length > 0) {
                                        return each(item.children);
                                    }
                                    else {
                                        return false;
                                    }
                                }));
                            }
                        }))(this.ins.items);
                        tt.loadData(this.ins.items);
                        // 更新收藏数据
                        this.lookupSelectionSer.updateFavoriteData(e.node.data, e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);
                    }
                }
            }));
        }
        tt.dblClick.subscribe((/**
         * @param {?} treeNode
         * @return {?}
         */
        (treeNode) => {
            if (this.ins.gridOptions.singleSelect && treeNode.selectable) {
                if (this.ins.okButton) {
                    // this.lookupSelectionSer.select(treeNode.data);
                    // this.ins.okButton.nativeElement.click();
                    this.ins.selectItem(treeNode.data);
                }
            }
        }));
        /** @type {?} */
        const loadAllData = isLoadAllTreeData();
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        (sort) => {
            this._sortState = sort;
            if (isLoadAllTreeData()) {
                tt.clientSort();
            }
            else {
                const { sortName, sortOrder } = Object.assign({}, sort);
                /** @type {?} */
                const col = this.ins.columns.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.field === sortName));
                /** @type {?} */
                const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;
                /** @type {?} */
                const param = Object.assign({ sortName: _sortName, sortOrder }, { search: this.ins._searchState });
                /** @type {?} */
                let reqTyp = 'all';
                if (this.ins._searchState && this.ins._searchState.value) {
                    reqTyp = 'search';
                }
                this.ins.httpMgr.getData(param, reqTyp).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => {
                    this.ins.closeLoading();
                    tt.clearAll();
                    /** @type {?} */
                    const items = this.ins.checkNodeCanBeSelect(d.items, false);
                    if (this.ins.useFavorite) {
                        this.ins.favHelper.updateFavoritesStatus(items);
                    }
                    this.ins.items = items;
                    tt.loadData(items);
                    tt.resize();
                    this.ins.selectionMgr.selectCurrentValue();
                }));
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        () => {
            if (tt && tt.psRef && tt.psRef.directiveRef) {
                tt.psRef.directiveRef.scrollToTop(0);
            }
            this.ins._searchState = null;
            this.IS_SEARCH_RESULT = false;
            /** @type {?} */
            let _items = [];
            if (this.ins.allData && this.ins.allData.length) {
                _items = this.ins.checkNodeCanBeSelect(this.ins.allData, loadAllData);
            }
            if (!_items || !_items.length) {
                _searchTreeData({ field: '*', value: '' });
            }
            else {
                this.ins.items = _items;
                this.ins.favHelper.updateFavoritesStatus(this.ins.items);
                tt.loadData(_items);
                this.ins.selectionMgr.selectCurrentValue();
            }
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        (tn) => {
            if (tn.leaf || tn['showLoading']) {
                return;
            }
            if (!tn.children || !tn.children.length) {
                /** @type {?} */
                const treeInfo = this.ins.gridOptions.treeInfo;
                if (isAsyncLoadTreeData() || this.IS_SEARCH_RESULT) {
                    /** @type {?} */
                    let parentPath = '';
                    /** @type {?} */
                    let parentLayer = -1;
                    const { field = '*', value = '' } = Object.assign({}, tt.searchData);
                    tn['showLoading'] = true;
                    tt.detectChanges();
                    if (treeInfo.layerType === 'parentId') {
                        // 父ID加载方式
                        parentPath = tn['id'];
                    }
                    else {
                        /** @type {?} */
                        const treeInfoField = treeInfo.dataField;
                        if (treeInfoField) {
                            // parentPath = tn.data[treeInfoField][treeInfo.pathField];
                            parentPath = this.ins.getPathCode(tn.data, treeInfo);
                            // parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                            parentLayer = this.ins.getLayerData(tn.data, treeInfo);
                        }
                        else {
                            this.ins.writeConsole('未找到分级信息。');
                        }
                    }
                    if (!this.ins.uri) {
                        tn['showLoading'] = false;
                        this.ins.expandTreeNode.emit({
                            instance: tt, node: tn,
                            parentIdOrPath: parentPath, parentLayer, search: { value, field }
                        });
                        return;
                    }
                    this.ins.showLoading();
                    this.getChildren(parentPath, parentLayer, {
                        searchField: field === '*' ? '*' : field,
                        searchValue: value
                    }).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => {
                        this.ins.closeLoading();
                        if (tt) {
                            if (tn && data.items && data.items.length) {
                                if (this.ins.useFavorite) {
                                    // 更新子节点收藏状态
                                    this.ins.favHelper.updateFavoritesStatus(data.items);
                                }
                                /** @type {?} */
                                const nodes = this.ins.checkNodeCanBeSelect(data.items, false);
                                tt.appendChildren(nodes, tn);
                                if (tt.loadDataType !== 'all' && !this.ins.singleSelect && this.ins.isGetAllChidlNodes &&
                                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {
                                    /** @type {?} */
                                    const rn = tt.findRowNode(tn.id);
                                    tt.propagateSelectionDown(rn, rn.isChecked);
                                    // 更新选中记录缓存
                                    /** @type {?} */
                                    const _items = data.items.filter((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    n => !n.addtional));
                                    if (_items && _items.length) {
                                        this.ins.lookupSelectionSer.updateSelections(_items.map((/**
                                         * @param {?} n
                                         * @return {?}
                                         */
                                        n => n.data)), rn.isChecked);
                                    }
                                }
                            }
                            tn['showLoading'] = false;
                            tt.detectChanges();
                            tt.psRef.directiveRef.update();
                            this.ins.selectionMgr.selectCurrentValue();
                        }
                    }));
                }
            }
            else {
                if (!this.ins.singleSelect && this.ins.enableCascade &&
                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') && this.ins.isGetAllChidlNodes) {
                    /** @type {?} */
                    const rn = tt.findRowNode(tn.id);
                    tt.propagateSelectionDown(rn, rn.isChecked);
                    /** @type {?} */
                    const selectItems = tn.children.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.selectable)).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data));
                    this.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);
                }
                // this.ins.selectionMgr.selectCurrentValue();
            }
        }));
        if (loadAllData && this.ins.items) {
            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);
        }
        return loadAllData;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    cascadeValueChanged($event) {
        /** @type {?} */
        const val = $event;
        // const tt = this.ins.componentRef.instance as TreeTableComponent;
        /** @type {?} */
        const instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance(instanceTyp)));
        if (!tt) {
            return;
        }
        switch (val) {
            case 'enable':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
            case 'disable':
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
                break;
            case 'up':
                tt.cascadeCheck = true;
                tt.cascadeUp = true;
                tt.cascadeDown = false;
                break;
            case 'down':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = false;
                break;
            default:
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
        }
        this.ins.cascadeStatus = val || 'enable';
        this.ins.personalConf.cascadeStatus = val || 'enable';
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.lookupSelectionSer;
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype._sortState;
    /**
     * 标识当前数据是否查询结果
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.IS_SEARCH_RESULT;
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype._isLoadAllTreeData;
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype._isAsyncLoadTreeData;
    /**
     * @type {?}
     * @private
     */
    TreeTableEventManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,