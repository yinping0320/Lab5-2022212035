/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, BehaviorSubject, Subject } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { FavoriteAction } from '../lookup-displaytype';
/**
 * @record
 */
export function SelectionState() { }
if (false) {
    /** @type {?} */
    SelectionState.prototype.selecteditems;
    /** @type {?} */
    SelectionState.prototype.favoriteItems;
    /** @type {?} */
    SelectionState.prototype.quickItems;
}
export class LookupSelectionService {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this.state = {
            selecteditems: [],
            favoriteItems: [],
            quickItems: []
        };
        this.state$ = new BehaviorSubject(this.state);
        this.selected$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.selecteditems))));
        this.favoriteItems$ = new BehaviorSubject({ items: this.state.favoriteItems, action: null });
        this.quickItems$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        n => of(n.quickItems))));
        this.selectionChanged$ = new Subject();
    }
    /**
     * @private
     * @return {?}
     */
    get idField() {
        return this.ins.idField;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    initFavoriteItems(items) {
        this.state.favoriteItems = items || [];
    }
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    updateFavoriteData(data, action) {
        if (this.ins.savingFaoriteData) {
            return;
        }
        if (action === FavoriteAction.add) {
            this.state.favoriteItems = this.state.favoriteItems.concat([data]);
        }
        else {
            this.state.favoriteItems = this.state.favoriteItems.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.idField] !== data[this.idField]));
        }
        this.favoriteItems$.next({ items: this.state.favoriteItems, action, data });
    }
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    loadSelections(data) {
        this.state.selecteditems = [...data];
        this.state$.next(this.state);
    }
    /**
     * @return {?}
     */
    getSelections() {
        return [...this.state.selecteditems];
    }
    /**
     * @param {?} item
     * @return {?}
     */
    select(item) {
        if (item) {
            this.state.selecteditems = [...this.state.selecteditems, item];
            this.state$.next(this.state);
            this.selectionChanged$.next({ data: [item[this.idField]], selected: true });
        }
    }
    /**
     * @param {?} pathcode
     * @return {?}
     */
    unselectByPathcode(pathcode) {
        /** @type {?} */
        const ids = [];
        this.state.selecteditems = this.state.selecteditems.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            /** @type {?} */
            const _pathcode = this.ins.getPathCode(n, this.ins.treeInfo);
            /** @type {?} */
            const r = _pathcode && _pathcode.indexOf(pathcode) !== 0;
            if (!r) {
                ids.push(n[this.idField]);
            }
            return r;
        }));
        this.selectionChanged$.next({ data: ids, selected: false });
    }
    /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    updateSelections(data, checked = true) {
        if (!Array.isArray(data)) {
            data = [data];
        }
        /** @type {?} */
        const items = [...data];
        /** @type {?} */
        const idField = this.idField;
        /** @type {?} */
        const ids = items.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n[idField]));
        if (checked) {
            if (this.state.selecteditems && !this.state.selecteditems.length) {
                this.state.selecteditems = items;
            }
            else {
                ids.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                (n, i) => {
                    if (!this.state.selecteditems.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => r[idField] == n))) {
                        this.state.selecteditems.push(items[i]);
                    }
                }));
            }
        }
        else {
            if (data) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return ids.indexOf(n[idField]) === -1;
                }));
            }
        }
        this.state$.next(this.state);
        this.selectionChanged$.next({ data: ids, selected: checked });
    }
    /**
     * @param {?} id
     * @return {?}
     */
    unSelect(id) {
        if (id) {
            if (Array.isArray(id)) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return id.indexOf(n[this.idField]) === -1;
                }));
                this.selectionChanged$.next({ data: id, selected: false });
            }
            else {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n[this.idField] != id));
                this.selectionChanged$.next({ data: [id], selected: false });
            }
            this.state$.next(this.state);
        }
    }
    /**
     * @return {?}
     */
    clearSelections() {
        this.state.selecteditems = [];
        this.state$.next(this.state);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.state;
    /** @type {?} */
    LookupSelectionService.prototype.state$;
    /** @type {?} */
    LookupSelectionService.prototype.selected$;
    /** @type {?} */
    LookupSelectionService.prototype.favoriteItems$;
    /** @type {?} */
    LookupSelectionService.prototype.quickItems$;
    /** @type {?} */
    LookupSelectionService.prototype.selectionChanged$;
    /**
     * @type {?}
     * @private
     */
    LookupSelectionService.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1sb29rdXAvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbG9va3VwLXNlbGVjdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQWMsRUFBRSxFQUFFLGVBQWUsRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDaEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUd2RCxvQ0FJQzs7O0lBSEcsdUNBQXFCOztJQUNyQix1Q0FBcUI7O0lBQ3JCLG9DQUFrQjs7QUFHdEIsTUFBTSxPQUFPLHNCQUFzQjs7OztJQTBCL0IsWUFBb0IsR0FBd0I7UUFBeEIsUUFBRyxHQUFILEdBQUcsQ0FBcUI7UUF4QnBDLFVBQUssR0FBbUI7WUFDNUIsYUFBYSxFQUFFLEVBQUU7WUFDakIsYUFBYSxFQUFFLEVBQUU7WUFDakIsVUFBVSxFQUFFLEVBQUU7U0FDakIsQ0FBQztRQUVGLFdBQU0sR0FBb0MsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRTFFLGNBQVMsR0FBc0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQzNDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDLEVBQUMsQ0FDdEMsQ0FBQztRQUVGLG1CQUFjLEdBQXlCLElBQUksZUFBZSxDQUFDLEVBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBRTdHLGdCQUFXLEdBQXNCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUM3QyxTQUFTOzs7O1FBQUMsQ0FBQyxDQUFD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LE9BQU8sQ0FBQyxJQUFJLEVBQUUsRUFBQyxDQUFDO2dCQUN2RixJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7YUFDaEU7WUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDaEM7SUFDTCxDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztDQUlKOzs7Ozs7SUE1SUcsdUNBSUU7O0lBRUYsd0NBQTBFOztJQUUxRSwyQ0FFRTs7SUFFRixnREFBNkc7O0lBRTdHLDZDQUVFOztJQUVGLG1EQUFrQzs7Ozs7SUFNdEIscUNBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IEZhdm9yaXRlQWN0aW9uIH0gZnJvbSAnLi4vbG9va3VwLWRpc3BsYXl0eXBlJztcclxuaW1wb3J0IHsgTG9va3VwR3JpZENvbXBvbmVudCB9IGZyb20gJy4uL2xvb2t1cC1ncmlkLmNvbXBvbmVudCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvblN0YXRlIHtcclxuICAgIHNlbGVjdGVkaXRlbXM6IGFueVtdO1xyXG4gICAgZmF2b3JpdGVJdGVtczogYW55W107XHJcbiAgICBxdWlja0l0ZW1zOiBhbnlbXTtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cFNlbGVjdGlvblNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgc3RhdGU6IFNlbGVjdGlvblN0YXRlID0ge1xyXG4gICAgICAgIHNlbGVjdGVkaXRlbXM6IFtdLFxyXG4gICAgICAgIGZhdm9yaXRlSXRlbXM6IFtdLFxyXG4gICAgICAgIHF1aWNrSXRlbXM6IFtdXHJcbiAgICB9O1xyXG5cclxuICAgIHN0YXRlJDogQmVoYXZpb3JTdWJqZWN0PFNlbGVjdGlvblN0YXRlPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5zdGF0ZSk7XHJcblxyXG4gICAgc2VsZWN0ZWQkOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKG4gPT4gb2Yobi5zZWxlY3RlZGl0ZW1zKSlcclxuICAgICk7XHJcblxyXG4gICAgZmF2b3JpdGVJdGVtcyQ6IEJlaGF2aW9yU3ViamVjdDxhbnk+ID0gbmV3IEJlaGF2aW9yU3ViamVjdCh7aXRlbXM6IHRoaXMuc3RhdGUuZmF2b3JpdGVJdGVtcywgYWN0aW9uOiBudWxsIH0pO1xyXG5cclxuICAgIHF1aWNrSXRlbXMkOiBPYnNlcnZhYmxlPGFueVtdPiA9IHRoaXMuc3RhdGUkLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKG4gPT4gb2Yobi5xdWlja0l0ZW1zKSlcclxuICAgICk7XHJcblxyXG4gICAgc2VsZWN0aW9uQ2hhbmdlZCQgPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuICAgIHByaXZhdGUgZ2V0IGlkRmllbGQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5zLmlkRmllbGQ7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbnM6IExvb2t1cEdyaWRDb21wb25lbnQpIHtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RmF2b3JpdGVJdGVtcyhpdGVtczogYW55W10pIHtcclxuICAgICAgICB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMgPSBpdGVtcyB8fCBbXTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8jcmVnaW9uIOaUtuiXj+aVsOaNrlxyXG5cclxuICAgIHVwZGF0ZUZhdm9yaXRlRGF0YShkYXRhOiBhbnksIGFjdGlvbjogRmF2b3JpdGVBY3Rpb24pIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaW5zLnNhdmluZ0Zhb3JpdGVEYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChhY3Rpb24gPT09IEZhdm9yaXRlQWN0aW9uLmFkZCkge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMgPSB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMuY29uY2F0KFtkYXRhXSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zID0gdGhpcy5zdGF0ZS5mYXZvcml0ZUl0ZW1zLmZpbHRlcihuID0+IG5bdGhpcy5pZEZpZWxkXSAhPT0gZGF0YVt0aGlzLmlkRmllbGRdKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuZmF2b3JpdGVJdGVtcyQubmV4dCh7IGl0ZW1zOiB0aGlzLnN0YXRlLmZhdm9yaXRlSXRlbXMsIGFjdGlvbiwgZGF0YSB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAvLyNyZWdpb24g5aSa6YCJ5pWw5o2uXHJcblxyXG4gICAgbG9hZFNlbGVjdGlvbnMoIGRhdGE6IFtdKSB7XHJcbiAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zID0gWy4uLmRhdGFdO1xyXG4gICAgICAgIHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0U2VsZWN0aW9ucygpIHtcclxuICAgICAgICByZXR1cm4gWy4uLnRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtc107XHJcbiAgICB9XHJcblxyXG4gICAgc2VsZWN0KGl0ZW06IGFueSkge1xyXG4gICAgICAgIGlmIChpdGVtKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IFsuLi50aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMsIGl0ZW1dO1xyXG4gICAgICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkJC5uZXh0KHsgZGF0YTogW2l0ZW1bdGhpcy5pZEZpZWxkXV0sIHNlbGVjdGVkOiB0cnVlIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1bnNlbGVjdEJ5UGF0aGNvZGUocGF0aGNvZGU6IHN0cmluZykge1xyXG4gICAgICAgIGNvbnN0IGlkcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maWx0ZXIobiA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9wYXRoY29kZSA9IHRoaXMuaW5zLmdldFBhdGhDb2RlKG4sIHRoaXMuaW5zLnRyZWVJbmZvKTtcclxuICAgICAgICAgICAgY29uc3QgciA9IF9wYXRoY29kZSAmJiBfcGF0aGNvZGUuaW5kZXhPZihwYXRoY29kZSkgIT09IDA7XHJcbiAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgaWRzLnB1c2goblt0aGlzLmlkRmllbGRdKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcjtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZWxlY3Rpb25DaGFuZ2VkJC5uZXh0KHsgZGF0YTogaWRzLCBzZWxlY3RlZDogZmFsc2UgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVNlbGVjdGlvbnMoZGF0YTogYW55LCBjaGVja2VkID0gdHJ1ZSkge1xyXG5cclxuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZGF0YSkpIHtcclxuICAgICAgICAgICAgZGF0YSA9IFtkYXRhXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gWyAuLi5kYXRhIF07XHJcbiAgICAgICAgY29uc3QgaWRGaWVsZCA9IHRoaXMuaWRGaWVsZDtcclxuICAgICAgICBjb25zdCBpZHMgPSBpdGVtcy5tYXAobiA9PiBuW2lkRmllbGRdKTtcclxuICAgICAgICBpZiAoY2hlY2tlZCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zICYmICF0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSBpdGVtcztcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlkcy5mb3JFYWNoKChuLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmluZChyID0+IHJbaWRGaWVsZF0gPT0gbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5zZWxlY3RlZGl0ZW1zLnB1c2goaXRlbXNbaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maWx0ZXIobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkcy5pbmRleE9mKG5baWRGaWVsZF0pID09PSAtMTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnN0YXRlJC5uZXh0KHRoaXMuc3RhdGUpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCQubmV4dCh7IGRhdGE6IGlkcywgc2VsZWN0ZWQ6IGNoZWNrZWQgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgdW5TZWxlY3QoaWQ6IGFueSkge1xyXG4gICAgICAgIGlmIChpZCkge1xyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShpZCkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcy5maWx0ZXIobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlkLmluZGV4T2Yoblt0aGlzLmlkRmllbGRdKSA9PT0gLTE7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCQubmV4dCh7IGRhdGE6IGlkLCBzZWxlY3RlZDogZmFsc2UgfSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMgPSB0aGlzLnN0YXRlLnNlbGVjdGVkaXRlbXMuZmlsdGVyKG4gPT4gblt0aGlzLmlkRmllbGRdICE9IGlkKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uQ2hhbmdlZCQubmV4dCh7IGRhdGE6IFtpZF0sIHNlbGVjdGVkOiBmYWxzZSB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSQubmV4dCh0aGlzLnN0YXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2xlYXJTZWxlY3Rpb25zKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGUuc2VsZWN0ZWRpdGVtcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuc3RhdGUkLm5leHQodGhpcy5zdGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8jZW5kcmVnaW9uXHJcblxyXG59XHJcbiJdfQ==