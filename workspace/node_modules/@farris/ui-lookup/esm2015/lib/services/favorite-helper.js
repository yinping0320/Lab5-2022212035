/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TreeTableComponent } from '@farris/ui-treetable';
import { FavoriteAction, FavoriteIcon, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';
export class FavoriteHelper {
    /**
     * @param {?} instance
     */
    constructor(instance) {
        this.instance = instance;
        this.favoriteColumnFormatter = (/**
         * @param {?} v
         * @param {?} data
         * @return {?}
         */
        (v, data) => {
            /** @type {?} */
            const f = v ? FavoriteIcon.yes : FavoriteIcon.no;
            if (this.instance.isTree()) {
                /** @type {?} */
                const id = data[this.instance.idField];
                if (id) {
                    /** @type {?} */
                    const tt = (/** @type {?} */ (this.instance.componentRef.instance));
                    /** @type {?} */
                    const rn = tt.findRowNode(id);
                    if (rn) {
                        if (rn.node.selectable) {
                            return f;
                        }
                        else {
                            return '';
                        }
                    }
                }
            }
            return f;
        });
        this.lookupSelectionSer = this.instance.lookupSelectionSer;
    }
    /**
     * @return {?}
     */
    getFavoriteColumns() {
        /** @type {?} */
        const columns = this.instance.gridOptions.columns.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            /** @type {?} */
            const rtn = Object.assign({}, item);
            if (item.field === FAVORITE_FIELD_NAME) {
                rtn.formatter = (/**
                 * @return {?}
                 */
                () => FavoriteIcon.delete);
            }
            return rtn;
        }));
        this.instance.initColumnWidth(columns, 'fav');
        return columns;
    }
    /**
     * @return {?}
     */
    initPersonalInfo() {
        if (this.instance.personalConfigService) {
            /** @type {?} */
            const controlID = this.instance.el.nativeElement.id || this.instance.controlId;
            if (!controlID) {
                this.instance.writeConsole('LookupGrid - 未设置组件id, 收藏功能将不能正常，请设置组件id.');
            }
            /** @type {?} */
            const pcstr = this.instance.getLookupBindingFields();
            this.instance.personalConfigService.controlID = controlID;
            this.instance.personalConfigService.personalConfigKey = pcstr;
            /** @type {?} */
            const conf = {
                displayType: this.instance.displayType,
                singleSelect: this.instance.singleSelect,
                idField: this.instance.idField,
                textField: this.instance.textField,
                mapFields: Object.assign({}, this.instance.mapFields || {})
            };
            this.instance.personalConfigService.initPersonalConf(conf);
            // 个性化配置的订阅事件处理
            this.listenPersonalConfigHandler();
        }
    }
    /**
     * 监听收藏TAB页中相关事件；
     * 数据选中，取消选中，移除收藏，双击事件
     * @param {?} cmpRef
     * @return {?}
     */
    initFavoriteComponentEvent(cmpRef) {
        switch (this.instance.displayType) {
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
            case LookupGridDisplayType.List: {
                /** @type {?} */
                const fdt = (/** @type {?} */ (cmpRef.instance));
                fdt.remoteSort = false;
                fdt.selectedRow.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => {
                    if (this.instance.singleSelect) {
                        this.lookupSelectionSer.clearSelections();
                    }
                    this.lookupSelectionSer.updateSelections(e.data);
                }));
                fdt.unSelectRow.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                e => {
                    this.lookupSelectionSer.unSelect(e.data[this.instance.idField]);
                }));
                if (!fdt.singleSelect) {
                    fdt.checkAll.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        this.lookupSelectionSer.updateSelections(fdt.data, e);
                    }));
                }
                fdt.cellClick.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    if (e.col.field === FAVORITE_FIELD_NAME) {
                        e.event.stopPropagation();
                        // tslint:disable-next-line: no-string-literal
                        /** @type {?} */
                        const classList = e.event.target['classList'];
                        if (classList.contains('f-lookup-unfavorite')) {
                            if (this.instance.items) {
                                this.instance.items.forEach((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                item => {
                                    if (item[this.instance.idField] === e.row[this.instance.idField]) {
                                        item[FAVORITE_FIELD_NAME] = false;
                                    }
                                }));
                                /** @type {?} */
                                const dt = (/** @type {?} */ (this.instance.componentRef.instance));
                                if (dt) {
                                    dt.loadData({
                                        pageSize: this.instance.gridOptions.pageSize,
                                        pageIndex: this.instance.gridOptions.pageIndex,
                                        total: this.instance.gridOptions.total,
                                        data: this.instance.gridOptions.items
                                    });
                                }
                            }
                            this.instance.favoriteItems =
                                this.instance.favoriteItems.filter((/**
                                 * @param {?} n
                                 * @return {?}
                                 */
                                n => n[this.instance.idField] !== e.row[this.instance.idField]));
                            this.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);
                        }
                    }
                }));
                // 双击事件
                fdt.rowDblClick.subscribe((/**
                 * @param {?} rowData
                 * @return {?}
                 */
                (rowData) => {
                    if (this.instance.gridOptions.singleSelect) {
                        this.instance.selectItem(rowData);
                    }
                }));
                break;
            }
            case LookupGridDisplayType.TreeList: {
                if (cmpRef) {
                    /** @type {?} */
                    const ftt = (/** @type {?} */ (cmpRef.instance));
                    ftt.remoteSort = false;
                    ftt.nodeSelected.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (this.instance.singleSelect) {
                            this.lookupSelectionSer.clearSelections();
                        }
                        this.lookupSelectionSer.updateSelections(e.node.data);
                    }));
                    ftt.nodeUnChecked.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (e.nodes && e.nodes.length) {
                            this.instance.multiSelMgr.remove(e.nodes.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.id)));
                        }
                        else if (e && e.node && e.node.data && e.node.data.id) {
                            // const tt = this.instance.componentRef.instance as TreeTableComponent;
                            // tt.unSelectNode(e.node.data.id);
                            this.lookupSelectionSer.unSelect(e.node.data.id);
                        }
                    }));
                    ftt.nodeChecked.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        if (!this.instance.singleSelect) {
                            if (e.nodes && e.nodes.length) {
                                this.instance.multiSelMgr.updateSelections(e.nodes.map((/**
                                 * @param {?} n
                                 * @return {?}
                                 */
                                n => n.data)));
                            }
                            else {
                                if (Array.isArray(e.node)) {
                                    this.instance.multiSelMgr.updateSelections(e.node.map((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    n => n.data)));
                                }
                                else {
                                    this.instance.multiSelMgr.updateSelections([e.node.data]);
                                }
                            }
                        }
                    }));
                    ftt.cellClick.subscribe((/**
                     * @param {?} row
                     * @return {?}
                     */
                    row => {
                        if (row.col.field === FAVORITE_FIELD_NAME) {
                            row.event.stopPropagation();
                            /** @type {?} */
                            const classList = row.event.target['classList'];
                            if (classList.contains('f-lookup-unfavorite')) {
                                /** @type {?} */
                                const _this = this.instance;
                                ((/**
                                 * @param {?} items
                                 * @return {?}
                                 */
                                function every(items) {
                                    if (!items) {
                                        return;
                                    }
                                    /** @type {?} */
                                    let hasFinish = false;
                                    items.forEach((/**
                                     * @param {?} item
                                     * @return {?}
                                     */
                                    item => {
                                        if (hasFinish) {
                                            return;
                                        }
                                        if (item.data[_this.idField] === row.node[_this.idField]) {
                                            item.data[FAVORITE_FIELD_NAME] = false;
                                            hasFinish = true;
                                        }
                                        else if (item.children && item.children.length > 0) {
                                            every(item.children);
                                        }
                                    }));
                                }))(this.instance.items);
                                /** @type {?} */
                                const tt = (/** @type {?} */ (this.instance.componentRef.instance));
                                tt.loadData(this.instance.items);
                                this.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);
                            }
                        }
                    }));
                    ftt.dblClick.subscribe((/**
                     * @param {?} treeNode
                     * @return {?}
                     */
                    (treeNode) => {
                        if (this.instance.gridOptions.singleSelect && treeNode.selectable) {
                            if (this.instance.okButton) {
                                this.instance.okButton.nativeElement.click();
                            }
                        }
                    }));
                    ftt.checkAll.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => {
                        /** @type {?} */
                        const data = e.instance.checkeds.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.data));
                        this.instance.multiSelMgr.updateSelections(data);
                        this.instance.checkedChange.emit({ data, isCheck: true });
                    }));
                    ftt.unCheckAll.subscribe((/**
                     * @return {?}
                     */
                    () => {
                        // this.instance.multiSelMgr.clear();
                        /** @type {?} */
                        const nodeItems = ftt.state.rowNodes.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.node.data));
                        this.lookupSelectionSer.updateSelections(nodeItems, false);
                        this.instance.checkedChange.emit({ data: [], isCheck: false });
                    }));
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getFavoritData() {
        if (this.instance.personalConf) {
            /** @type {?} */
            const favData = this.instance.personalConf.favorite;
            /** @type {?} */
            const _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];
            return _data;
        }
        return [];
    }
    /**
     * @return {?}
     */
    getFavoritIds() {
        return this.getFavoritData();
    }
    /**
     * @param {?=} data
     * @return {?}
     */
    _loadFavoriteData(data = null) {
        /** @type {?} */
        const fdt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
        this.loadFavoriteDatatable(fdt, data);
        fdt.cd.markForCheck();
        this.instance.closeLoading();
    }
    // 加载收藏grid数据
    /**
     * @param {?=} res
     * @return {?}
     */
    loadFavoritesData(res = null) {
        /** @type {?} */
        const favIds = this.getFavoritIds();
        switch (this.instance.displayType) {
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
            case LookupGridDisplayType.List: {
                /** @type {?} */
                const fdt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                if (this.instance.favoriteDataFrom === 'locale') {
                    if (res) {
                        this._loadFavoriteData(res.items);
                    }
                    else {
                        // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {
                        //     if (resData) {
                        //         this._loadFavoriteData(resData.items);
                        //     }
                        //     this.instance.closeLoading();
                        // });
                    }
                }
                else {
                    /** @type {?} */
                    const favData = this.getFavoritData();
                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);
                }
                break;
            }
            case LookupGridDisplayType.TreeList: {
                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {
                    /** @type {?} */
                    const ftt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                    this.bindFavTreetable(ftt);
                    if (this.instance.favoriteDataFrom === 'locale') {
                        if (res) {
                            this.loadFavoriteForTreeTable(res.items || [], ftt);
                        }
                        else {
                            // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {
                            //     if (resData) {
                            //         const items = resData.items;
                            //         this.loadFavoriteForTreeTable(items, ftt);
                            //     }
                            //     this.instance.closeLoading();
                            // });
                        }
                    }
                    else {
                        if (res) {
                            this.loadFavoriteForTreeTable(res.items, ftt);
                        }
                    }
                }
            }
        }
    }
    /**
     * @private
     * @param {?} fdt
     * @param {?=} data
     * @return {?}
     */
    loadFavoriteDatatable(fdt, data) {
        if (data !== undefined) {
            this.instance.favoriteItems = data;
        }
        if (fdt.columns && !fdt.columns.length) {
            fdt.columns = this.instance.favoriteColumns;
        }
        fdt.loadData({
            total: 0,
            pageSize: 20,
            pageIndex: 1,
            data: this.instance.favoriteItems
        });
        this.instance.selectionMgr.selectCurrentValue();
        fdt.cd.detectChanges();
    }
    /**
     * @private
     * @param {?} ftt
     * @return {?}
     */
    bindFavTreetable(ftt) {
        ftt.allColumnsTitle = this.instance.allColumnsTitle;
        ftt.idField = this.instance.idField;
        /** @type {?} */
        const columns = this.instance.gridOptions.columns.map((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            /** @type {?} */
            const rtn = Object.assign({}, item);
            if (item.field === FAVORITE_FIELD_NAME) {
                rtn.formatter = (/**
                 * @param {?} v
                 * @param {?} data
                 * @return {?}
                 */
                (v, data) => {
                    /** @type {?} */
                    const favids = this.getFavoritIds();
                    if (favids && favids.length) {
                        /** @type {?} */
                        const index = favids.findIndex((/**
                         * @param {?} el
                         * @return {?}
                         */
                        el => el === data[this.instance.idField]));
                        if (index >= 0) {
                            return FavoriteIcon.delete;
                        }
                    }
                    return '';
                });
            }
            return rtn;
        }));
        this.instance.initColumnWidth(columns, 'fav');
        this.instance.favoriteColumns = columns;
        ftt.columns = columns;
        if (this.instance.gridOptions.treeInfo) {
            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;
        }
        if (!ftt.singleSelect) {
            ftt.checkOnSelect = true;
            ftt.selectOnCheck = true;
            ftt.showCheckbox = true;
            // 启用多选后，同时启用级联选择
            if (this.instance.enableCascade) {
                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);
            }
            else {
                ftt.cascadeCheck = false;
                ftt.cascadeDown = false;
                ftt.cascadeUp = false;
            }
        }
    }
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    checkNodeIsLeaf(nodes) {
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            (node) => {
                if (node.hasOwnProperty("addtional")) {
                    node.selectable = !node["addtional"];
                }
                if (node.children && node.children.length) {
                    this.checkNodeIsLeaf(node.children);
                }
                else {
                    node.leaf = true;
                }
                return node;
            }));
        }
        return nodes;
    }
    /**
     * @param {?} items
     * @return {?}
     */
    initFavoriteTreeData(items) {
        /** @type {?} */
        const treeInfo = this.instance.gridOptions.treeInfo;
        if (treeInfo && !treeInfo['treeDataIsInit']) {
            if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                items = this.instance.lookupUtils.makeTree(items, treeInfo);
            }
            else {
                items = this.instance.lookupUtils.makeTreeWithParentID(items, '', treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}` : treeInfo.parentField, this.instance.idField);
            }
        }
        // return this.instance.checkNodeCanBeSelect(items, true);
        return this.checkNodeIsLeaf(items);
    }
    /**
     * @param {?} items
     * @param {?} ftt
     * @return {?}
     */
    loadFavoriteForTreeTable(items, ftt) {
        items = this.initFavoriteTreeData(items);
        this.instance.favoriteItems = items;
        ftt.loadData(items);
        ftt.expandAll();
        this.instance.selectionMgr.selectCurrentValue();
        return items;
    }
    // 更新列表中的收藏数据标识
    /**
     * @param {?} data
     * @return {?}
     */
    updateFavoritesStatus(data) {
        if (!data || !this.instance.useFavorite) {
            return;
        }
        /** @type {?} */
        const favIds = this.getFavoritIds();
        if (favIds && favIds.length) {
            // 处理数据列表中的收藏数据标识
            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {
                data.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (favIds && favIds.length && favIds.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    v => v === item[this.instance.idField]))) {
                        item[FAVORITE_FIELD_NAME] = true;
                    }
                }));
            }
            else {
                /** @type {?} */
                const _this = this.instance;
                ((/**
                 * @param {?} _data
                 * @return {?}
                 */
                function each(_data) {
                    _data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => {
                        if (favIds && favIds.length && favIds.find((/**
                         * @param {?} v
                         * @return {?}
                         */
                        v => v === item.data[_this.idField]))) {
                            item.data[FAVORITE_FIELD_NAME] = true;
                        }
                        if (item.children && item.children.length > 0) {
                            each(item.children);
                        }
                    }));
                }))(data);
            }
        }
    }
    /**
     * @private
     * @param {?} value
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    _updateFavorites(value, action, data) {
        /** @type {?} */
        const localeID = this.instance.localService.localeId;
        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};
        /** @type {?} */
        const items = value.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n['_addtional_']));
        /** @type {?} */
        const newVal = items.map((/**
         * @param {?} n
         * @return {?}
         */
        n => n[this.instance.idField])).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== null && n !== undefined));
        /** @type {?} */
        const favItems = this.instance.personalConf.favorite[localeID] || [];
        this.instance.personalConf.favorite[localeID] = Array.from(new Set([...favItems, ...newVal]));
        if (action === FavoriteAction.delete && data) {
            this.instance.personalConf.favorite[localeID] = this.instance.personalConf.favorite[localeID].filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== data[this.instance.idField]));
        }
        return this.instance.personalConf.favorite[localeID];
    }
    // 收藏数据管理
    /**
     * @private
     * @return {?}
     */
    listenPersonalConfigHandler() {
        this.lookupSelectionSer.favoriteItems$.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            if (!this.instance.favoritesComponentRef) {
                return;
            }
            const { items, action, data } = n;
            /** @type {?} */
            const favids = this._updateFavorites(items, action, data);
            this.instance.httpMgr.submitFavoriteData(action);
            if (this.instance.displayType === LookupGridDisplayType.List || this.instance.displayType.includes('NAV')) {
                /** @type {?} */
                const dt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                this.loadFavoriteDatatable(dt, items);
            }
            else if (this.instance.displayType === LookupGridDisplayType.TreeList) {
                /** @type {?} */
                const ftt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                // const favids = items.map(d => d.id);
                this.instance.showLoading();
                this.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe((/**
                 * @param {?} resData
                 * @return {?}
                 */
                resData => {
                    if (resData) {
                        /** @type {?} */
                        const _items = resData.items;
                        this.loadFavoriteForTreeTable(_items, ftt);
                    }
                    else {
                        this.instance.favoriteItems = [];
                        ftt.loadData([]);
                    }
                    this.instance.closeLoading();
                }));
            }
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    FavoriteHelper.prototype.lookupSelectionSer;
    /** @type {?} */
    FavoriteHelper.prototype.favoriteColumnFormatter;
    /**
     * @type {?}
     * @private
     */
    FavoriteHelper.prototype.instance;
}
//# sourceMappingURL=data:application/json;base64,