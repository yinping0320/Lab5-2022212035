/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { debounceTime, switchMap } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupLeftComponent } from '../lookup-left.component';
export class LookupComponentManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    getComponentInstance(type = 'datatable') {
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.selectedDtRef;
        }
        /** @type {?} */
        let ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            const leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    }
    /**
     * @param {?} data
     * @return {?}
     */
    createComponentWithServerData(data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        /** @type {?} */
        const dtyp = this.ins.displayType.toUpperCase();
        if (this.ins.isDoublleList()) {
            if (this.ins.navTreeToList && dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.NavListTree) {
                    this.ins.displayType = LookupGridDisplayType.NavList;
                }
            }
        }
        else {
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.TreeList) {
                    this.ins.displayType = 'LIST';
                }
                else {
                    if (dtyp === LookupGridDisplayType.NavListTree) {
                        this.ins.displayType = LookupGridDisplayType.NavList;
                    }
                }
            }
        }
        if (this.ins.isDoublleList() && this.ins.navTreeToList) {
            if (dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
        }
        this.ins.changeDetector.detectChanges();
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    }
    /**
     * @return {?}
     */
    createFavoriteComponent() {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    }
    /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    reloadTreeDataForExpand(expandLevel) {
        /** @type {?} */
        const uri = this.ins.gridOptions.uri;
        /** @type {?} */
        const tt = (/** @type {?} */ (this.ins.componentRef.instance));
        const { field = '*', value = '' } = Object.assign({}, tt.searchData);
        /** @type {?} */
        const search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };
        /** @type {?} */
        const param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        this.ins.showLoading();
        return this.ins.http.getData(uri, param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.ins.closeLoading();
            /** @type {?} */
            const nodes = this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);
            this.ins.items = nodes;
            tt.loadData(nodes);
            tt.psRef.directiveRef.scrollToTop(0);
        }));
    }
    /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    setTreeNodeExpandBy(nodes, level) {
        if (!nodes || !nodes.length) {
            return;
        }
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            /** @type {?} */
            const layer = n.data[this.ins.treeInfo.dataField].layer;
            /** @type {?} */
            const expandLayer = layer + level - 1;
            n.expanded = layer <= expandLayer ? true : n.expanded;
            if (n.children && n.children.length && layer + 1 <= expandLayer) {
                this.setTreeNodeExpandBy(n.children, level);
            }
        }));
    }
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    useContextMenuForTree(cmpRef) {
        const { maxLevel, enableContextMenu, language } = this.ins.treeTableOptions;
        if (enableContextMenu && maxLevel) {
            /** @type {?} */
            const levelMenus = [];
            for (let i = 1; i <= maxLevel; i++) {
                /** @type {?} */
                const title = language['expand' + i];
                levelMenus.push({ id: 30 + 1, code: i, title, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        // 发送请求获取数据
                        /** @type {?} */
                        const level = t.menu.code;
                        if (isLoadAllTreeData()) {
                            this.setTreeNodeExpandBy(this.ins.items, level);
                            cmpRef.instance.updateSerializedValue();
                        }
                        else {
                            const { dataField, layerField } = this.ins.treeInfo;
                            /** @type {?} */
                            const firstNodeData = (this.ins.items || [])[0];
                            if (firstNodeData && firstNodeData.data) {
                                /** @type {?} */
                                const minLayer = this.ins.utils.getValue(`${dataField}.${layerField}`, firstNodeData.data);
                                /** @type {?} */
                                let _level = minLayer + level - 1;
                                this.reloadTreeDataForExpand(_level);
                            }
                        }
                    }) });
            }
            /** @type {?} */
            const isLoadAllTreeData = (/**
             * @return {?}
             */
            () => {
                if (this.ins.loadTreeDataType === 'default') {
                    return cmpRef.instance.loadDataType === 'all';
                }
                else {
                    return this.ins.loadTreeDataType === 'loadall';
                }
            });
            /** @type {?} */
            const contextMenus = [
                {
                    id: 6, code: 'checkchildnodes', title: '勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        // console.log(e);
                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef) {
                            /** @type {?} */
                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.selectable)).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n[this.ins.idField]));
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            cmpRef.instance.checkedNodes(nodeIds);
                            cmpRef.instance.selectNodes(nodeIds);
                        }
                    })
                },
                {
                    id: 5, code: 'uncheckchildnodes', title: '取消勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        // console.log(e);
                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef) {
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            /** @type {?} */
                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n.selectable)).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            n => n[this.ins.idField]));
                            cmpRef.instance.unCheckedNodes(nodeIds);
                            cmpRef.instance.unSelectNodes(nodeIds);
                        }
                    })
                },
                '-',
                {
                    id: 1, code: 'expandall', title: language.expandall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef && isLoadAllTreeData()) {
                            cmpRef.instance.expandAll();
                        }
                        else {
                            // 发送请求获取数据
                            this.reloadTreeDataForExpand(-1);
                        }
                    })
                },
                { id: 2, code: 'collapseall', title: language.collapseall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    (t) => {
                        if (cmpRef) {
                            cmpRef.instance.collapseAll();
                        }
                    }) },
                '-',
                {
                    id: 3, title: language.expandByLayer,
                    children: levelMenus
                }
            ];
            this.ins.treeTableOptions.contextMenuItems = contextMenus;
            cmpRef.instance.beforeShowContextMenu = (/**
             * @return {?}
             */
            () => {
                return of({ show: !cmpRef.instance.state.searched });
            });
        }
    }
    /**
     * @param {?=} isFav
     * @return {?}
     */
    getCmpHeight(isFav = false) {
        return this.ins.dialogMgr.getHeight() - (isFav ? 10 : this.ins.getFilterBarHeight());
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    createContent(opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(cmpFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(cmpFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
            opts.fast = true;
            opts.fitColumns = false;
            this.useContextMenuForTree(cmpRef);
        }
        else {
            opts.fill = true;
        }
        opts.autoFitColumns = true;
        /** @type {?} */
        const ttOpts = this.ins.treeTableOptions || {};
        Object.assign(cmpRef.instance, opts, Object.assign({ allColumnsTitle: this.ins.allColumnsTitle }, ttOpts));
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    }
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    createFavoritesContent(opts) {
        /** @type {?} */
        const type = this.ins.getComponentType();
        /** @type {?} */
        const cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        let cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(cmpFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        opts.autoFitColumns = true;
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    resizeComponent(type = 'datatable') {
        /** @type {?} */
        const size = {
            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),
            height: this.getCmpHeight(type == 'fav')
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - this.ins.getSpaceWidth(true);
        }
        this.getComponentInstance(type).resize(size);
    }
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    getChildNodes(node) {
        /** @type {?} */
        const nodes = [];
        if (node.selectable || node.selectable === undefined) {
            nodes.push(node);
        }
        if (node.children && node.children.length) {
            node.children.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                nodes.push(...this.getChildNodes(n));
            }));
        }
        return nodes;
    }
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    createLeftComponent(ops) {
        /** @type {?} */
        let dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        (d) => {
            if (d && d.data) {
                this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            const p = {
                pageInfo: {
                    pageIndex: 1,
                    // tfs 638840
                    pageSize: this.ins.gridOptions.pageSize
                }
            };
            if (this.ins.includeSubordinates && d && d.node && ops.treeInfo) {
                const { layerType, pathField, loadDataType, dataField } = ops.treeInfo;
                if (loadDataType === 'all') {
                    /** @type {?} */
                    const rowDatas = this.getChildNodes(d.node).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data));
                    this.ins.navigationFilter.idValue = this.getNavigationFilter(rowDatas);
                }
                else {
                    if (layerType == 'pathcode') {
                        // p['navNodePathCode'] = d.data[dataField][pathField];
                        p['navNodePathCode'] = this.ins.getPathCode(d.data, ops.treeInfo);
                        this.ins['navNodePathCode'] = p['navNodePathCode'];
                    }
                }
            }
            else {
                this.ins['navNodePathCode'] = '';
            }
            /** @type {?} */
            const dataCmpRef = this.getComponentInstance();
            const { sortName, sortOrder } = dataCmpRef;
            Object.assign(p, { search: this.ins._searchState, sortName, sortOrder });
            return this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        res => {
            this.ins.closeLoading();
            this.ins.loadDataWhenOpen = true;
            // if (this.ins.useFavorite && !this.ins.isTree()) {
            //     this.ins.favHelper.updateFavoritesStatus(res.items);
            // }
            // this.ins.loadDataTableData(res);
            this.ins.loadData(res, false);
            setTimeout((/**
             * @return {?}
             */
            () => {
                // 选中数据
                this.ins.selectionMgr.selectCurrentValue();
                this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    }
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    getNavigationFilter(navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            const result = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            r => {
                /** @type {?} */
                const k = r.groupField;
                /** @type {?} */
                const dField = r.helpField;
                /** @type {?} */
                const rf = { fieldName: dField, fieldValue: '' };
                if (Array.isArray(navRow)) {
                    /** @type {?} */
                    const vals = navRow.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return k.split('.').reduce((/**
                         * @param {?} o
                         * @param {?} c
                         * @return {?}
                         */
                        (o, c) => {
                            return o[c];
                        }), n);
                    }));
                    rf.fieldValue = vals.join(',');
                }
                else {
                    rf.fieldValue = k.split('.').reduce((/**
                     * @param {?} o
                     * @param {?} c
                     * @return {?}
                     */
                    (o, c) => {
                        return o[c];
                    }), navRow);
                }
                result.push(rf);
            }));
            return result;
        }
        return '';
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupComponentManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,