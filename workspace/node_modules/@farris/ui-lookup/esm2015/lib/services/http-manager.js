/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { cloneDeep } from 'lodash-es';
import { FavoriteAction, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';
import { of } from 'rxjs';
import { map, switchMap, tap } from 'rxjs/operators';
// 帮助默认个性化数据
/** @type {?} */
const DefaultUserConfig = {
    tabIndex: 'datalist',
    favorite: null,
    size: null
};
export class LookupHttpManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        // 每次帮助打开后，更新此值，做为个性化数据的初始值；
        // 关闭窗口时，与此进行对比。如果一样，则不保存；
        this._originalPersonalConfig = DefaultUserConfig;
    }
    /**
     * @private
     * @return {?}
     */
    disablePagination() {
        return {
            pageIndex: 1,
            pageSize: 500
        };
    }
    /**
     * 构造查询参数
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    buildQueryParams(event, type = 'all') {
        /** @type {?} */
        const params = {};
        if (event.navConditions && event.navConditions.length) {
            if (event.navConditions && event.navConditions.length === 1 && event.navConditions[0].code == '*') {
                event.search = { field: '*', value: event.navConditions[0].value };
            }
            else {
                params.navSearchConditions = event.navConditions;
            }
        }
        if (this.ins.conditions && this.ins.conditions.length && type !== 'fav') {
            params.searchConditions = cloneDeep(this.ins.conditions);
        }
        /** @type {?} */
        const searchParam = { category: type };
        if (type !== 'fav') {
            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {
                if (this.ins.navigationFilter.idValue && type !== 'textchange') {
                    params.relationFilter = [...this.ins.navigationFilter.idValue];
                }
            }
        }
        if (event) {
            if (type === 'fav' || type === 'selected') {
                event.pageInfo = this.disablePagination();
            }
            if (event.pageInfo) {
                params.pageIndex = event.pageInfo.pageIndex;
                params.pageSize = event.pageInfo.pageSize;
            }
            if (event.search) {
                /** @type {?} */
                let sfield = event.search.field;
                if (sfield && sfield === '*') {
                    sfield = '*';
                }
                if (event.search.value) {
                    event.search.value = event.search.value.trim();
                }
                searchParam.searchField = sfield;
                searchParam.searchValue = event.search.value;
                searchParam.searchType = event.search.type || 'like';
                if (event.search.value === '' && searchParam.category === 'search' && (!params.searchConditions && !params.navSearchConditions)) {
                    searchParam.category = 'all';
                }
            }
            if (event.sortName) {
                searchParam.sortName = event.sortName;
            }
            if (event.sortOrder) {
                searchParam.sortOrder = event.sortOrder;
            }
            // 分层加载支持设置展开层级
            if (!isNaN(Number(event.expandLevel)) && this.ins.isTree()) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (event.expandLevel) {
                    if (event.expandLevel === -1) {
                        event.expandLevel = 0;
                    }
                }
                else {
                    event.expandLevel = -1;
                }
                searchParam['layerNum'] = event.expandLevel;
            }
        }
        if (type === 'fav' && event.favoriteIds) {
            searchParam.favoriteIds = event.favoriteIds;
        }
        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {
            params.enableFullTree = this.ins.enableFullTree;
        }
        params.treeToList = this.ins.treeToList;
        params.navTreeToList = this.ins.navTreeToList;
        // 查询时不构造完整树
        if (type === 'textchange') {
            params.enableFullTree = false;
        }
        if (type === 'selected') {
            searchParam.category = 'fav';
            params.enableFullTree = false;
            searchParam.favoriteIds = event.favoriteIds;
        }
        params.searchValue = JSON.stringify(searchParam);
        params.loadTreeDataType = this.ins.loadTreeDataType;
        params.customData = this.ins.customData;
        if (this.ins.helpId) {
            params.helpId = this.ins.helpId;
        }
        if (event.selectedInfo) {
            params.selectedInfo = event.selectedInfo;
        }
        if (event.navNodePathCode !== undefined) {
            params.navPathCode = event.navNodePathCode;
        }
        else {
            if (type === 'navAllChildren') {
                if (this.ins.includeSubordinates && this.ins['navNodePathCode']) {
                    params.navPathCode = this.ins['navNodePathCode'];
                }
            }
        }
        return params;
    }
    /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    getData(event, type = 'all') {
        /** @type {?} */
        const uri = this.ins.gridOptions.uri;
        if (this.ins.isDoublleList() && this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {
            if (this.ins.includeSubordinates && this.ins.navigationOptions.treeInfo.loadDataType === 'async') {
                type = 'navAllChildren';
            }
            else {
                type = 'list';
            }
        }
        /** @type {?} */
        const params = this.buildQueryParams(event, type);
        if (uri || this.ins.beUri) {
            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {
                /** @type {?} */
                const allSearchFields = this.ins.columns.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                col => col.searchField)).filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => f));
                if (!params.condition) {
                    params.condition = {};
                }
                if (!this.ins.isTree() && this.ins.pagination) {
                    const { pageSize = this.ins.pageSize || 20, pageIndex } = Object.assign({}, params);
                    params.condition.pagination = { pageSize, pageIndex };
                }
                else {
                    params.condition.pagination = { isUsePagination: false };
                }
                /** @type {?} */
                const searchParam = JSON.parse(params.searchValue);
                if (searchParam.searchValue) {
                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {
                        field: searchParam.searchField,
                        value: searchParam.searchValue
                    });
                }
            }
            /** @type {?} */
            const _uri = this.ins.beUri || uri;
            if (this.ins.http) {
                this.ins.http.context = this.ins.context;
            }
            if (this.ins._searchResult) {
                return of(this.ins._searchResult);
            }
            if (type !== 'allChildren') {
                return this.ins.http.getData(_uri, params);
            }
            else {
                /** @type {?} */
                const params1 = {
                    searchValue: JSON.stringify({ category: type }),
                    parentsIds: event.parentsIds,
                    customData: params.customData,
                    helpId: params.helpId
                };
                return this.ins.http.getData(_uri, params1);
            }
        }
        else {
            return of(false);
        }
    }
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    /**
     * @param {?} selIds
     * @return {?}
     */
    getSelecedItems(selIds) {
        return this.getData({ favoriteIds: selIds }, 'selected');
    }
    /**
     * @return {?}
     */
    getPersonalConfig() {
        /** @type {?} */
        const defaultConf = cloneDeep(DefaultUserConfig);
        // if (this.ins.customData) {
        //     const wrapKeyData = JSON.stringify({ key: this.ins.customData });
        //     const configKeyString = this.ins.getLookupBindingFields() + wrapKeyData;
        //     this.ins.personalConfigService.personalConfigKey = configKeyString;
        // }
        /** @type {?} */
        const key = this.ins.personalConfigService._newKey;
        /** @type {?} */
        let _conf = this.ins.personalConfigService.getPersonalData(key);
        if (!_conf || !Object.keys(_conf).length) {
            _conf = defaultConf;
        }
        /** @type {?} */
        const req = of(_conf);
        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {
            return req;
        }
        if (this.ins.http && this.ins.http['getUserSettings']) {
            return this.ins.http['getUserSettings'](key).pipe(tap((/**
             * @param {?} r
             * @return {?}
             */
            (r) => {
                if (r && r.textValue) {
                    localStorage.setItem(key, r.textValue);
                }
                else {
                    localStorage.setItem(key, JSON.stringify(defaultConf));
                }
            })), map((/**
             * @param {?} ucs
             * @return {?}
             */
            (ucs) => {
                if (ucs) {
                    return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;
                }
                return defaultConf;
            })));
        }
        else {
            return req;
        }
    }
    /**
     * @param {?=} event
     * @param {?=} type
     * @param {?=} isQuickSelect
     * @return {?}
     */
    lookupRequest(event, type = 'all', isQuickSelect = false) {
        if (!this.ins.usePersionalConf || isQuickSelect) {
            return this.getData(event, type);
        }
        /** @type {?} */
        const req = this.getPersonalConfig();
        return req.pipe(tap((/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            this.ins.personalConf = c;
            this.ins.personalConfigService.savePersonalConfig(c);
            if (!this.ins.isTabChanged) {
                this._originalPersonalConfig = cloneDeep(c);
            }
        })), switchMap((/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            const { tabIndex, favorite, size, cascadeStatus } = c;
            if (!this.ins.isTabChanged) {
                this.ins.activeTab = tabIndex || 'datalist';
            }
            if (size) {
                this.ins.dialogWidth = size.width;
                this.ins.dialogHeight = size.height;
                if (!this.ins.isTabChanged) {
                    this.ins.dialog.reSize({ width: size.width, height: size.height });
                }
            }
            if (this.ins.cascadeStatus) {
                if (cascadeStatus && this.ins.enableCascade && this.ins.showCascadeControl) {
                    this.ins.cascadeStatus = cascadeStatus;
                }
                if (this.ins.cascadeItems) {
                    /** @type {?} */
                    const keys = ['enable', 'up', 'down', 'disable'];
                    keys.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        if (this.ins.cascadeItems[n] === undefined) {
                            this.ins.cascadeItems[n] = true;
                        }
                    }));
                    if (!this.ins.cascadeItems[this.ins.cascadeStatus]) {
                        /** @type {?} */
                        const keys = Object.keys(this.ins.cascadeItems).map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => {
                            return this.ins.cascadeItems[n] ? n : '';
                        })).filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n));
                        this.ins.cascadeStatus = (/** @type {?} */ (keys[0]));
                    }
                }
            }
            if (this.ins.activeTab === 'datalist') {
                return this.getData(event, type);
            }
            else if (this.ins.activeTab === 'favorite') {
                /** @type {?} */
                const favIds = favorite ? favorite[this.ins.localService.localeId] : [];
                if ((!favIds || !favIds.length) && !this.ins.isTabChanged) {
                    return this.getData(event, 'all').pipe(map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    r => {
                        if (r && !r.items) {
                            r.items = [];
                        }
                        r.activeTab = 'datalist';
                        return r;
                    })));
                }
                // const _fids = favIds.filter(n => n);
                event.favoriteIds = favIds;
                event.search = null;
                return this.getData(event, 'fav').pipe(switchMap((/**
                 * @param {?} r
                 * @return {?}
                 */
                r => {
                    /** @type {?} */
                    const items = r ? r.items || [] : [];
                    // 加入数据权限后，没有返回数据且第1次打开窗口，非手动点击收藏标签时
                    if (!items.length && !this.ins.isTabChanged) {
                        return this.getData(event, 'all').pipe(map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        a => {
                            if (a && !a.items) {
                                a.items = [];
                            }
                            a.activeTab = 'datalist';
                            return a;
                        })));
                    }
                    else {
                        return of(r);
                    }
                })));
            }
            else if (this.ins.activeTab === 'selected') {
                /** @type {?} */
                const selIds = this.ins.displayValue ? this.ins.displayValue.split(',') : [];
                /** @type {?} */
                const _sids = selIds.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n));
                return this.getSelecedItems(_sids);
            }
        })));
    }
    // 保存个性化数据
    /**
     * @param {?} action
     * @return {?}
     */
    submitFavoriteData(action) {
        // 保存列宽度
        this.ins.personalConf.colSizeInfo = this.getColumnSizeInfo();
        // 如果数据与默认的数据一至则不保存。
        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {
            return;
        }
        /** @type {?} */
        let msg = '';
        if (action === FavoriteAction.add) {
            msg = this.ins.addFavoriteSuccess;
        }
        else if (action === FavoriteAction.delete) {
            msg = this.ins.delFavoriteSuccess;
        }
        // 更新本地缓存
        localStorage.setItem(this.ins.personalConfigService._newKey, JSON.stringify(this.ins.personalConf));
        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});
        if (this.ins.favoriteDataFrom !== 'locale') {
            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);
            /** @type {?} */
            const configData = {
                configkey1: this.ins.personalConfigService.personalConfigKey,
                configkey2: '',
                configkey3: '',
                textvalue: JSON.stringify(this.ins.personalConf)
            };
            if (this.ins.http && this.ins.http['saveUserSettings']) {
                this.ins.savingFaoriteData = true;
                this.ins.showLoading();
                return this.ins.http['saveUserSettings'](configData).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                (r) => {
                    this.ins.savingFaoriteData = false;
                    this.ins.closeLoading();
                    if (msg) {
                        this.ins.notifyService.success(msg);
                    }
                }));
            }
            else {
                if (msg) {
                    this.ins.notifyService.success(msg);
                }
            }
        }
        else {
            if (msg) {
                this.ins.notifyService.success(msg);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    getColumnSizeInfo() {
        /** @type {?} */
        const colSizeInfo = { data: {}, nav: {}, fav: {}, sel: {} };
        colSizeInfo.data = this.ins.columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        (c) => c.field !== FAVORITE_FIELD_NAME)).reduce((/**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        (r, n) => {
            r[n.field] = n.width;
            return r;
        }), {});
        if (this.ins.favoriteColumns && this.ins.favoriteColumns.length) {
            colSizeInfo.fav = this.ins.favoriteColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.field !== FAVORITE_FIELD_NAME)).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.navigationOptions && this.ins.navigationOptions.columns && this.ins.navigationOptions.columns.length) {
            colSizeInfo.nav = this.ins.navigationOptions.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.field !== FAVORITE_FIELD_NAME)).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.selectedColumns && this.ins.selectedColumns.length && this.ins.showSelected) {
            colSizeInfo.sel = this.ins.selectedColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            (c) => c.field !== FAVORITE_FIELD_NAME)).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            (r, n) => {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        return colSizeInfo;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupHttpManager.prototype._originalPersonalConfig;
    /**
     * @type {?}
     * @private
     */
    LookupHttpManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,