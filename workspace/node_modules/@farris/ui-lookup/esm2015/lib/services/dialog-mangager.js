/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { fromEvent, of, race } from 'rxjs';
import { buffer, bufferCount, debounceTime, filter, first, map, repeat } from 'rxjs/operators';
export class LookupDialogManager {
    /**
     * @param {?} ins
     */
    constructor(ins) {
        this.ins = ins;
        this.lookupInit = null;
        this._loadDataWhenOpen = true;
        this._navSelectedId = '';
        this._selectFirstInNav = false;
        this.dialogClosedSubscription = null;
        this.dialogOpenedSubscription = null;
        this.keyDownHandler = null;
        this._okbtnclick$ = null;
    }
    /**
     * @private
     * @return {?}
     */
    unsubscribes() {
        if (this.lookupInit) {
            this.lookupInit.unsubscribe();
            this.lookupInit = null;
        }
        if (this.dialogClosedSubscription) {
            this.dialogClosedSubscription.unsubscribe();
            this.dialogClosedSubscription = null;
        }
        if (this.dialogOpenedSubscription) {
            this.dialogOpenedSubscription.unsubscribe();
            this.dialogOpenedSubscription = null;
        }
    }
    // 帮助窗口关闭后做一些清理工作
    /**
     * @return {?}
     */
    dialogClosed() {
        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {
            this.ins.displayText = this.ins.originalText;
            this.ins.setModelValue(this.ins.displayText);
        }
        if (this.ins.componentRef) {
            this.ins.componentRef.destroy();
            this.ins.componentRef = null;
        }
        if (this.ins.favoritesComponentRef) {
            this.ins.favoritesComponentRef.destroy();
            this.ins.favoritesComponentRef = null;
        }
        if (this.ins.contentContainer) {
            this.ins.contentContainer.clear();
        }
        if (this.ins.centerContainer) {
            this.ins.centerContainer.clear();
        }
        if (this.ins.leftComponentRef) {
            this.ins.leftComponentRef.destroy();
            this.ins.leftComponentRef = null;
        }
        if (this.ins.leftContainer) {
            this.ins.leftContainer.clear();
        }
        this.ins.isShow = false;
        this.ins.isTextChange = false;
        if (this.ins.dialog) {
            this.ins.content = null;
        }
        this.ins.navigationFilter = null;
        this.ins.lookupUtils.pendingEnd();
        if (this.ins.helpId) {
            this.ins.displayType = '';
        }
        this.unsubscribes();
        // this.ins.items = [];
        this.ins.favoriteItems = [];
        this.ins.lookupSelectionSer.initFavoriteItems([]);
        this.ins.isTabChanged = false;
        if (this.ins.uri) {
            this.ins.items = [];
        }
        this.ins._searchState = null;
        this.ins.pageIndex = 1;
        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;
        this.ins.navSelectedIds = this._navSelectedId;
        this.ins.selectFirstInNav = this._selectFirstInNav;
        this.ins.isGetAllChidlNodes = false;
        this.ins.enableGetAllChildNodes = true;
        // 保存个性化数据
        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {
            this.ins.httpMgr.submitFavoriteData('dialog closed event.');
        }
        if (this.keyDownHandler) {
            this.keyDownHandler();
            this.keyDownHandler = null;
        }
        if (this.ins.inputGroup) {
            this.ins.inputGroup.focus();
        }
        this.ins.userInitialConfig.reset();
        this.ins.treeInfo = this.ins._treeInfo_;
        this.ins.lookupUtils.destroy();
        this.ins.dialogClosed.emit();
        if (this.ins.includeSubordinates$$) {
            this.ins.includeSubordinates$$.unsubscribe();
            this.ins.includeSubordinates$$ = null;
        }
        this.ins.conditions = [];
        this.ins.searching = false;
        if (this.ins.dtEventMgr) {
            this.ins.dtEventMgr['_sortState'] = null;
        }
        if (this.ins.ttEventMgr) {
            this.ins.ttEventMgr['_sortState'] = null;
        }
        if (this._okbtnclick$) {
            this._okbtnclick$.unsubscribe();
            this._okbtnclick$ = null;
        }
    }
    /**
     * @return {?}
     */
    onDialogCreated() {
        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;
        this._navSelectedId = this.ins.navSelectedIds;
        this._selectFirstInNav = this.ins.selectFirstInNav;
        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe((/**
         * @param {?} dlg
         * @return {?}
         */
        dlg => {
            if (dlg) {
                this.ins.setContainerMargin();
                if (this.ins.dialogOpenedSubscription) {
                    this.ins.dialogOpenedSubscription.unsubscribe();
                }
                if (this.ins.dialogClosedSubscription) {
                    this.ins.dialogClosedSubscription.unsubscribe();
                }
                this.registerDialogEvent();
                if (this.ins.isRecordSize) {
                    /** @type {?} */
                    const dlgSize = this.ins.personalConfigService.getDialogSize();
                    if (dlgSize) {
                        const { width, height } = dlgSize;
                        this.ins.dialogWidth = width ? width : this.ins.dialogWidth;
                        this.ins.dialogHeight = height ? height : this.ins.dialogHeight;
                        // 20200908 更新现窗口的尺寸 by Lucas
                        dlg.width = this.ins.dialogWidth;
                        dlg.height = this.ins.dialogHeight;
                    }
                }
                dlg.show();
            }
        }));
        this.ins.subscriptions.push(this.ins.dialogCreatedSubscription);
    }
    /**
     * @param {?} pr
     * @return {?}
     */
    checkDictPickingResult(pr) {
        /** @type {?} */
        let o = true;
        if (pr === undefined || pr === null || pr === '') {
            o = true;
        }
        if (typeof pr === 'boolean') {
            o = pr;
        }
        /** @type {?} */
        let customData;
        /** @type {?} */
        let selectedIds;
        /** @type {?} */
        let message;
        customData = this.ins.customData;
        selectedIds = this.ins.selectedIds;
        if (typeof pr === 'object') {
            if (pr.showDialog === undefined) {
                o = true;
            }
            else {
                o = pr.showDialog;
            }
            if (pr.hasOwnProperty('data')) {
                /** 保存帮助前传递的数据 */
                customData = pr.data;
            }
            selectedIds = pr.selectedIds || null;
            if (pr.message) {
                message = pr.message;
            }
        }
        return { show: o, customData, selectedIds, message };
    }
    /**
     * @param {?} pr
     * @return {?}
     */
    canOpenDialog(pr) {
        const { show, customData, selectedIds, message } = this.checkDictPickingResult(pr);
        this.ins.customData = customData;
        this.ins.selectedIds = selectedIds || null;
        if (message) {
            this.ins.notifyService.warning(message);
        }
        this.ins.isReady = false;
        this.ins.isShow = show;
    }
    /**
     * @return {?}
     */
    getHeight() {
        return this.ins.dialog.size.contentHeight -
            this.ins.containerMargin.bottom -
            this.ins.containerMargin.top -
            (!this.ins.useNewLayout ? (this.ins.useFavorite ? 40 : 0) : 56);
    }
    /**
     * @private
     * @return {?}
     */
    getMainGridSize() {
        if (this.ins.isDoublleList()) {
            return {
                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,
                height: this.getHeight()
            };
        }
        return {
            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,
            height: this.getHeight()
        };
    }
    /**
     * @return {?}
     */
    resetDialogContentHeight() {
        const { header: hHeight, footer: fHeight } = this.ins.dialog.size;
        return this.ins.dialogHeight - hHeight - fHeight - this.ins.containerMargin.bottom - this.ins.containerMargin.top;
    }
    /**
     * @private
     * @return {?}
     */
    registerOkBtnEvent() {
        if (this.ins.okButton) {
            /** @type {?} */
            const doubleClickDuration = 250;
            /** @type {?} */
            const leftClick$ = fromEvent(this.ins.okButton.nativeElement, 'click').pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            (event) => event.button === 0)));
            /** @type {?} */
            const debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));
            /** @type {?} */
            const clickLimit$ = leftClick$.pipe(bufferCount(2));
            /** @type {?} */
            const bufferGate$ = race(debounce$, clickLimit$)
                .pipe(
            // We are only interested in the first event. After that
            // we want to restart.
            first(), repeat());
            this._okbtnclick$ = leftClick$.pipe(buffer(bufferGate$), 
            // Here we map the buffered events into the length of the buffer
            // If the user clicked once, the buffer is 1. If he clicked twice it is 2
            map((/**
             * @param {?} clicks
             * @return {?}
             */
            clicks => clicks.length))).subscribe((/**
             * @param {?} clicks
             * @return {?}
             */
            clicks => {
                this.ins.selectItem();
            }));
        }
    }
    /**
     * 注册弹出窗口的事件
     * @private
     * @return {?}
     */
    registerDialogEvent() {
        this.dialogOpenedSubscription = this.ins.dialog.opened.subscribe((/**
         * @return {?}
         */
        () => {
            this.ins.dialogContentHeight = this.resetDialogContentHeight();
            this.ins.gridOptions = Object.assign(this.ins.gridOptions, this.getMainGridSize());
            this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';
            if (this.ins.displayType && this.ins.customDisplayType) {
                this.ins.componentRef = this.ins.lookupCmpMgr.createContent(this.ins.gridOptions);
                this.ins.lookupCmpMgr.createFavoriteComponent();
            }
            this.ins.initData();
            // 修改帮助窗口的状态
            this.ins.lookupUtils.pendingEnd();
            this.ins.dialogOpened.emit();
            // 注册确定按钮点击事件
            this.registerOkBtnEvent();
        }));
        this.lookupInit = this.ins.lookupinitializationSubject.subscribe((/**
         * @return {?}
         */
        () => {
            this.ins.loadDataWhenOpen = true;
            // 注册快捷键
            this.registerShortcutKey();
            // 监听左侧尺寸变化事件
            if (this.ins.leftPanel) {
                if (!this.ins.leftPanel.resizing.observers.length) {
                    /** @type {?} */
                    const leftPanelResize$ = this.ins.leftPanel.resizing.pipe(debounceTime(50)).subscribe((/**
                     * @param {?} s
                     * @return {?}
                     */
                    (s) => {
                        /** @type {?} */
                        const size = {
                            width: this.ins.dialog.size.width - s.size.width - this.ins.getSpaceWidth(true),
                            height: this.getHeight() - this.ins.getFilterBarHeight()
                        };
                        this.ins.componentRef.instance.resize(size);
                        this.ins.leftComponentRef.instance.resize(s.size);
                    }));
                    this.ins.subscriptions.push(leftPanelResize$);
                }
                if (this.ins.isDoublleList() && this.ins.leftComponentRef) {
                    this.ins.leftComponentRef.instance.updateScrollPosition();
                }
            }
            if (this.ins.cascadeSelect) {
                const { selectEl, panelRef } = this.ins.cascadeSelect;
                this.ins.cascadeSelect.beforeShow = (/**
                 * @return {?}
                 */
                () => {
                    if (selectEl && panelRef) {
                        panelRef.style.left = `${selectEl.offsetLeft}px`;
                        if (this.ins.localService.localeId.toLocaleLowerCase() == 'en') {
                            panelRef.style.width = 'auto';
                            panelRef.style.maxWidth = '200px';
                        }
                        return of(true);
                    }
                });
            }
        }));
        this.dialogClosedSubscription = this.ins.dialog.closed.subscribe((/**
         * @return {?}
         */
        () => {
            // 输入框变化后，弹出窗口未选择数据关闭窗口时，还原原始值
            this.ins.dialogMgr.dialogClosed();
        }));
        // this.ins.subscriptions.push(this.ins.dialogClosedSubscription);
    }
    /**
     * @private
     * @return {?}
     */
    registerShortcutKey() {
        // 回车，与确定按钮处理逻辑一至。
        /** @type {?} */
        const dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');
        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {
            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                const { moveUp, moveDown, searchFocus, confirm, nextPager, prevPager, expand, collapse } = this.ins.shortcutKey;
                /** @type {?} */
                const arrowKey = [moveUp, moveDown, expand, collapse];
                if (arrowKey.includes(e.code)) {
                    this.ins.componentRef.instance.onKeydownEvent(e);
                }
                else if (e.key === confirm) {
                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {
                        return;
                    }
                    this.ins.okButton.nativeElement.click();
                }
                else if (e.code === searchFocus) { // 帮助窗口查询输入框焦点
                    e.preventDefault();
                    this.ins.componentRef.instance.inputGroup.focus();
                }
                else if (!this.ins.isTree() && (e.code === nextPager || e.code === prevPager)) { // 分页
                    // 分页
                    /** @type {?} */
                    const isNextPager = e.code === nextPager;
                    this.paginationKeyDownHandler(isNextPager);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?=} next
     * @return {?}
     */
    paginationKeyDownHandler(next = true) {
        /** @type {?} */
        const datatableRef = this.ins.componentRef.instance;
        const { pageIndex, pageSize, total } = datatableRef;
        /** @type {?} */
        const pagerCount = Math.ceil(total / pageSize);
        /** @type {?} */
        let newPageNum = pageIndex;
        if (next) {
            newPageNum = newPageNum + 1;
        }
        else {
            newPageNum = newPageNum - 1;
        }
        if (newPageNum > pagerCount || newPageNum < 1) {
            newPageNum = pageIndex;
        }
        this.ins.componentRef.instance.onPageChange({ pageSize, pageIndex: newPageNum });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype.lookupInit;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype._loadDataWhenOpen;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype._navSelectedId;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype._selectFirstInNav;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype.dialogClosedSubscription;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype.dialogOpenedSubscription;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype.keyDownHandler;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype._okbtnclick$;
    /**
     * @type {?}
     * @private
     */
    LookupDialogManager.prototype.ins;
}
//# sourceMappingURL=data:application/json;base64,