/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ComponentFactoryResolver, Directive, HostListener, Injector, Input, NgZone, Renderer2 } from '@angular/core';
import { reqAnimFrame } from '@farris/ui-common';
import { InputGroupComponent } from '@farris/ui-input-group';
import { debounceTime, filter, map } from 'rxjs/operators';
import { LookupGridDisplayType } from '../lookup-displaytype';
import { LookupGridComponent } from '../lookup-grid.component';
import { LookupQuickSelectPanelComponent } from './quick-select-panel.component';
export class LookupQuickSelectDirective {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} render
     * @param {?} inputRef
     * @param {?} lookupRef
     * @param {?} cfr
     */
    constructor(injector, ngzone, render, inputRef, lookupRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.lookupRef = lookupRef;
        this.cfr = cfr;
        this.data = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.options && this.options.enable) {
            this.inputRef.inputClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                if (!this.panelElement) {
                    // 执行帮助前
                    this.lookupRef.dictPicking({
                        instance: this,
                    }).subscribe((/**
                     * @param {?} pr
                     * @return {?}
                     */
                    (pr) => {
                        if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {
                            return;
                        }
                        const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);
                        this.lookupRef.customData = customData;
                        if (show) {
                            this.createDataPanel();
                        }
                        else {
                            if (message) {
                                this.lookupRef.notifyService.warning(message);
                            }
                        }
                    }));
                }
            }));
            this.inputRef.valueChange.pipe(debounceTime(200)).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                this.lookupRef.dictPicking({ instance: this }).subscribe((/**
                 * @param {?} pr
                 * @return {?}
                 */
                (pr) => {
                    if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {
                        return;
                    }
                    const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);
                    this.lookupRef.customData = customData;
                    if (!this.panelElement) {
                        this.createDataPanel();
                    }
                    else {
                        this.panelElement.style.overflow = 'hidden';
                        this.setPanelPosition(false);
                        this.loadData();
                    }
                }));
            }));
            this.inputRef.keydownHandle.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            (event) => {
                return event.key === 'Escape' || event.key === 'Tab' || event.key === 'F2';
            }))).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.hide(e);
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
    }
    /**
     * @private
     * @return {?}
     */
    removePanelElement() {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
    }
    /**
     * @private
     * @return {?}
     */
    clearSearchValue() {
        this.lookupRef._searchState = {
            field: '*',
            //"*",
            value: ''
        };
    }
    /**
     * @param {?=} e
     * @param {?=} isMoreClick
     * @return {?}
     */
    hide(e, isMoreClick = false) {
        reqAnimFrame((/**
         * @return {?}
         */
        () => {
            if (this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    this.removePanelElement();
                }
                else {
                    this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.removePanelElement();
                    }), 120);
                }
                if (!this.lookupRef) {
                    return;
                }
                // tfs 579056
                if (this.lookupRef.overLayService) {
                    this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
                }
                if (isMoreClick) {
                    return;
                }
                if (this.lookupRef.tagInput) {
                    // this.lookupRef.tagInput.value = '';
                    this.inputRef.value = '';
                    this.clearSearchValue();
                }
                if (e && (e.key === 'F2' || this.lookupRef.el.nativeElement.contains(e.target))) {
                    if (this.data && this.data.length) {
                        return;
                    }
                    else {
                        this.clearSearchValue();
                    }
                }
                if (!this.lookupRef.nosearch && this.lookupRef.displayText !== this.lookupRef.originalText) {
                    this.lookupRef.onChanges(this.lookupRef.originalText);
                }
            }
        }));
    }
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    setPanelPosition(updateTopPosition = true) {
        if (this.panelElement) {
            const { width, left, top, height } = this.getPanelSize();
            this.panelElement.style.width = `${width}px`;
            this.panelElement.style.maxHeight = `${height}px`;
            if (updateTopPosition) {
                this.panelElement.style.top = `${top}px`;
            }
            this.panelElement.style.left = `${left}px`;
            this.panelElement.style.zIndex = '10001';
        }
    }
    /**
     * @private
     * @return {?}
     */
    createDataPanel() {
        if (this.lookupRef.changeDetector['destroyed']) {
            this.panelElement && this.removePanelElement();
            return;
        }
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        this.panelElement.style.overflow = 'hidden';
        // this.panelElement.style.height = 'auto';
        // 创建数据展示组件
        /** @type {?} */
        const cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);
        this.cmpRef = cmpFact.create(this.injector);
        this.cmpRef.instance.showMore = this.options.showMore;
        this.cmpRef.instance.textField = this.lookupRef.textField;
        this.cmpRef.instance.formatter = this.options.formatter;
        this.cmpRef.instance.maxItems = this.options.showItemsCount;
        // cmpRef.location.nativeElement.classList.add('farris-main-area');
        this.panelElement.appendChild(this.cmpRef.location.nativeElement);
        this.lookupRef.selectionMgr.initDisplayValue();
        this.cmpRef.changeDetectorRef.detectChanges();
        // more clicked 打开帮助窗口
        this.cmpRef.instance.moreClcik.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.hide(e, true);
            this.lookupRef.showDialog();
        }));
        this.cmpRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            const { data } = e;
            this.selectItem(data);
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {
                return;
            }
            if (this.lookupRef.inputGroup && this.lookupRef.inputGroup.textbox.nativeElement === e.target) {
                return false;
            }
            if (this.lookupRef.tagInput && this.lookupRef.tagInput.textbox.nativeElement === e.target) {
                return false;
            }
            if (this.cmpRef) {
                this.cmpRef.destroy();
                this.cmpRef = null;
            }
            this.clearSearchValue();
            this.hide(e);
        }));
        this.panelElement.classList.add('f-area-show');
        this.loadData();
    }
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    selectItem(data) {
        if (!data) {
            return;
        }
        if (this.lookupRef.viewType === 'tag') {
            /** @type {?} */
            const isSelect = this.lookupRef.selections.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.lookupRef.idField] === data[this.lookupRef.idField]));
            if (!isSelect) {
                /** @type {?} */
                const selectItems = [...this.lookupRef.selections, data];
                this.lookupRef.selectItem(selectItems);
                this.lookupRef.lookupSelectionSer.loadSelections(selectItems);
            }
        }
        else {
            this.lookupRef.selectItem(data);
        }
        this.hide();
    }
    /**
     * @private
     * @return {?}
     */
    calculationPanelHeight() {
        return this.options.showItemsCount * 30 + (this.options.showMore ? 50 : 0) + (this.options.footerHeight || 0) + 5;
    }
    /**
     * @private
     * @return {?}
     */
    getInputSizeInfo() {
        /** @type {?} */
        const el = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;
        return el.nativeElement.getBoundingClientRect();
    }
    /**
     * @private
     * @return {?}
     */
    getPanelSize() {
        let { width, height, top, left } = this.getInputSizeInfo();
        /** @type {?} */
        const bottom = window.innerHeight - height - top;
        /** @type {?} */
        let panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        const h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        const minWidth = this.options.minWidth || 200;
        /** @type {?} */
        let _width = width < minWidth ? minWidth : width;
        if (window.innerWidth - left < _width) {
            left = left + width - _width;
        }
        return { width: _width, top, height: panelHeight, left };
    }
    /**
     * @private
     * @return {?}
     */
    getData() {
        /** @type {?} */
        let p = {
            pageInfo: {
                pageSize: this.options.showItemsCount,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        let t = "all";
        if (this.lookupRef.isTextChange) {
            this.lookupRef._searchState = {
                field: this.lookupRef.textField,
                //"*",
                value: this.lookupRef.displayText
            };
            p['search'] = this.lookupRef._searchState;
            t = 'search';
        }
        else {
            this.lookupRef._searchState = null;
        }
        if (this.lookupRef.viewType === 'tag') {
            if (this.lookupRef.tagInput.value !== '') {
                this.lookupRef._searchState = {
                    field: this.lookupRef.textField,
                    //"*",
                    value: this.lookupRef.tagInput.value
                };
                p['search'] = this.lookupRef._searchState;
                t = 'search';
            }
            else {
                this.lookupRef._searchState = null;
            }
            /** @type {?} */
            const vals = this.lookupRef.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p["selectedInfo"] = {
                    selected: true,
                    selectedIds: vals,
                };
            }
        }
        return this.lookupRef.httpMgr.lookupRequest(p, t, true).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        (restData) => {
            /** @type {?} */
            let _items = this.lookupRef.items || [];
            if (restData) {
                if (this.lookupRef.viewType === 'tag') {
                    this.lookupRef.lookupSelectionSer.loadSelections(restData["selectedData"] || []);
                }
                _items = restData.items || [];
                if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {
                    _items = _items.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.data));
                }
                // return _items.slice(0, this.options.showItemsCount);
            }
            else {
                if (this.lookupRef.displayText && this.lookupRef.isTextChange) {
                    if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {
                        _items = _items.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.data));
                    }
                    /** @type {?} */
                    const items = _items.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        return n[this.lookupRef.textField].indexOf(this.lookupRef.displayText) > -1;
                    })).slice(0, this.options.showItemsCount);
                    _items = items;
                    // return _items.slice(0, this.options.showItemsCount);
                }
            }
            return _items.slice(0, this.options.showItemsCount);
        })));
    }
    /**
     * @private
     * @return {?}
     */
    loadData() {
        /** @type {?} */
        const loadingRef = this.lookupRef.loadingService.show({ container: this.panelElement });
        this.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            loadingRef.close();
            if (this.cmpRef && this.cmpRef.instance) {
                this.cmpRef.instance.loadData(data);
                if (data.length < this.options.showItemsCount) {
                    // let newHeight = data.length * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;
                    this.data = data;
                    /** @type {?} */
                    let newHeight = this.cmpRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 10;
                    if (!data || !data.length) {
                        newHeight = 55;
                    }
                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = `${newHeight}px`;
                    if (this.panelElement) {
                        if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                            this.panelElement.style.top = `${this.getInputSizeInfo().top - newHeight - 5}px`;
                        }
                        this.panelElement.style.height = 'auto';
                    }
                }
                else {
                    this.setPanelPosition();
                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = '100%';
                    if (this.panelElement) {
                        this.render.removeStyle(this.panelElement, 'height');
                    }
                }
                if ((this.lookupRef.isTextChange || (this.lookupRef.tagInput && this.lookupRef.tagInput.value !== '') ||
                    (this.lookupRef.inputGroup && this.lookupRef.inputGroup.value !== '' && this.lookupRef.isTextChange)) && data && data.length) {
                    this.cmpRef.instance.setActiveItem(0);
                }
                this.panelElement.style.overflow = 'auto';
            }
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    registerKeyboardEvent($event) {
        if (!this.lookupRef.singleSelect && this.lookupRef.viewType !== 'tag') {
            return;
        }
        /** @type {?} */
        let rows = [];
        if (this.cmpRef) {
            rows = this.cmpRef.instance.data;
        }
        if (!rows || !rows.length) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
        }
        if ($event.code === 'Backspace' && this.lookupRef.viewType === 'tag' &&
            this.lookupRef.selections && this.lookupRef.selections.length &&
            this.lookupRef.tagInput && !this.lookupRef.tagInput.value && this.lookupRef.quickSelect.enableBackspace) {
            $event.preventDefault();
            $event.stopPropagation();
            /** @type {?} */
            const newdata = this.lookupRef.selections.slice(0, this.lookupRef.selections.length - 1);
            if (!newdata || !newdata.length) {
                this.lookupRef.clearValue(true);
            }
            else {
                this.lookupRef.selectItem(newdata);
            }
            this.lookupRef.lookupSelectionSer.loadSelections(newdata);
            this.setPanelPosition();
            return;
        }
        /** @type {?} */
        const idx = this.cmpRef.instance.activeIndex;
        /** @type {?} */
        let activeIndex = idx;
        /** @type {?} */
        const setActiveItem = (/**
         * @param {?} index
         * @return {?}
         */
        (index) => {
            activeIndex = index;
            this.cmpRef.instance.setActiveItem(index);
        });
        if ($event.code === 'ArrowUp') { // up
            if (idx > -1) {
                /** @type {?} */
                let prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = rows.length - 1;
                }
                setActiveItem(prevIdx);
            }
            else {
                setActiveItem(rows.length - 1);
            }
        }
        if ($event.code === 'ArrowDown') { // down
            // down
            /** @type {?} */
            let nextIdx = idx + 1;
            if (nextIdx >= rows.length) {
                nextIdx = 0;
            }
            setActiveItem(nextIdx);
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length && this.panelElement) {
                /** @type {?} */
                const data = rows[idx];
                this.selectItem(data);
            }
            else {
                this.inputRef.inputClick.emit($event);
            }
        }
    }
}
LookupQuickSelectDirective.decorators = [
    { type: Directive, args: [{ selector: '[quick-select]' },] }
];
/** @nocollapse */
LookupQuickSelectDirective.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: InputGroupComponent },
    { type: LookupGridComponent },
    { type: ComponentFactoryResolver }
];
LookupQuickSelectDirective.propDecorators = {
    options: [{ type: Input, args: ['quick-select',] }],
    registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LookupQuickSelectDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.panelElement;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cmpRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.data;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.inputRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.lookupRef;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectDirective.prototype.cfr;
}
//# sourceMappingURL=data:application/json;base64,