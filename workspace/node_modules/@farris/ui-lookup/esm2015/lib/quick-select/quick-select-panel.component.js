/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener, Injector, Input, Output, ViewChild } from '@angular/core';
export class LookupQuickSelectPanelComponent {
    /**
     * @param {?} injector
     * @param {?} cdr
     */
    constructor(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.showMore = true;
        this.data = [];
        this.textField = '';
        this.maxItems = 10;
        this.moreClcik = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} items
     * @return {?}
     */
    loadData(items) {
        this.data = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMoreClick($event) {
        $event.stopPropagation();
        this.moreClcik.emit($event);
    }
    /**
     * @param {?} rowObj
     * @return {?}
     */
    formatData(rowObj) {
        return this.formatter(rowObj);
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onItemClick($event, item) {
        this.itemClick.emit({ data: item, evnet: $event });
    }
    /**
     * @param {?} index
     * @return {?}
     */
    setActiveItem(index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
}
LookupQuickSelectPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'lookup-quick-select-panel',
                template: "<div class=\"d-flex flex-column\" style=\"width: 100%;height:100%;padding-top: 5px\" #itemsContainer>\r\n    <!-- <div class=\"header\"></div> -->\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\"  [class.h-100]=\"!data || !data.length\">\r\n            <li class=\"list-group-item list-group-item-action\" [class.active]=\"activeIndex === i\" *ngFor=\"let item of data; index as i\" (click)=\"onItemClick($event, item)\">\r\n                <span *ngIf=\"!formatter\">{{ textField | getvalue: item }}</span> \r\n                <span *ngIf=\"formatter\" [innerHTML]=\"formatData(item) | safe:'html'\"></span>\r\n            </li>\r\n\r\n            <li class=\"norecord\" *ngIf=\"!data || !data.length\">\r\n                {{ 'lookup.quick.notfind'|locale }}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"more\" *ngIf=\"showMore && data && data.length && data.length >= maxItems\">\r\n        <button class=\"btn btn-link\" (click)=\"onMoreClick($event)\"> {{ 'lookup.quick.more'|locale }}</button>\r\n    </div>\r\n     <!-- <div class=\"footer\"></div> -->\r\n</div>"
            }] }
];
/** @nocollapse */
LookupQuickSelectPanelComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
LookupQuickSelectPanelComponent.propDecorators = {
    showMore: [{ type: Input }],
    data: [{ type: Input }],
    textField: [{ type: Input }],
    formatter: [{ type: Input }],
    maxItems: [{ type: Input }],
    moreClcik: [{ type: Output }],
    itemClick: [{ type: Output }],
    itemsContainer: [{ type: ViewChild, args: ['itemsContainer',] }],
    onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.showMore;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.data;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.textField;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.formatter;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.maxItems;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.moreClcik;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.itemClick;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.itemsContainer;
    /** @type {?} */
    LookupQuickSelectPanelComponent.prototype.activeIndex;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectPanelComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupQuickSelectPanelComponent.prototype.cdr;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVpY2stc2VsZWN0LXBhbmVsLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktbG9va3VwLyIsInNvdXJjZXMiOlsibGliL3F1aWNrLXNlbGVjdC9xdWljay1zZWxlY3QtcGFuZWwuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQWUsWUFBWSxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQU85SixNQUFNLE9BQU8sK0JBQStCOzs7OztJQWV4QyxZQUFvQixRQUFrQixFQUFVLEdBQXNCO1FBQWxELGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQWI3RCxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBQ2hCLFNBQUksR0FBZSxFQUFFLENBQUM7UUFDdEIsY0FBUyxHQUFXLEVBQUUsQ0FBQztRQUV2QixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBRWIsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDL0IsY0FBUyxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJekMsZ0JBQVcsR0FBRyxDQUFDLENBQUMsQ0FBQztJQUV5RCxDQUFDOzs7OztJQUczRSxPQUFPLENBQUMsTUFBa0I7UUFDdEIsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFFRCxRQUFRLEtBQUssQ0FBQzs7Ozs7SUFFZCxRQUFRLENBQUMsS0FBVTtRQUNmLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO1FBRWxCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxNQUFrQjtRQUMxQixNQUFNLENBQUMsZUFBZSxFQUFFLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsTUFBVztRQUNsQixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEMsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLE1BQU0sRUFBRSxJQUFJO1FBQ3BCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxLQUFhO1FBQ3ZCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ3hCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLENBQUM7U0FDNUI7SUFDTCxDQUFDOzs7WUF2REosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7Z0JBQ3JDLHlxQ0FBa0Q7YUFDckQ7Ozs7WUFMMkYsUUFBUTtZQUEzRixpQkFBaUI7Ozt1QkFTckIsS0FBSzttQkFDTCxLQUFLO3dCQUNMLEtBQUs7d0JBQ0wsS0FBSzt1QkFDTCxLQUFLO3dCQUVMLE1BQU07d0JBQ04sTUFBTTs2QkFFTixTQUFTLFNBQUMsZ0JBQWdCO3NCQU0xQixZQUFZLFNBQUMsV0FBVyxFQUFFLENBQUMsUUFBUSxDQUFDOzs7O0lBZnJDLG1EQUF5Qjs7SUFDekIsK0NBQStCOztJQUMvQixvREFBZ0M7O0lBQ2hDLG9EQUE0Qzs7SUFDNUMsbURBQXVCOztJQUV2QixvREFBeUM7O0lBQ3pDLG9EQUF5Qzs7SUFFekMseURBQTZEOztJQUU3RCxzREFBaUI7Ozs7O0lBRUwsbURBQTBCOzs7OztJQUFFLDhDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnbG9va3VwLXF1aWNrLXNlbGVjdC1wYW5lbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vcXVpY2stc2VsZWN0LXBhbmVsLmNvbXBvbmVudC5odG1sJ1xyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIExvb2t1cFF1aWNrU2VsZWN0UGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG5cclxuICAgIEBJbnB1dCgpIHNob3dNb3JlID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIGRhdGE6IEFycmF5PGFueT4gPSBbXTtcclxuICAgIEBJbnB1dCgpIHRleHRGaWVsZDogc3RyaW5nID0gJyc7XHJcbiAgICBASW5wdXQoKSBmb3JtYXR0ZXI6IChyb3dPYmo6IGFueSkgPT4gc3RyaW5nO1xyXG4gICAgQElucHV0KCkgbWF4SXRlbXMgPSAxMDtcclxuXHJcbiAgICBAT3V0cHV0KCkgbW9yZUNsY2lrID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGl0ZW1DbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdpdGVtc0NvbnRhaW5lcicpIGl0ZW1zQ29udGFpbmVyOiBFbGVtZW50UmVmPGFueT47XHJcblxyXG4gICAgYWN0aXZlSW5kZXggPSAtMTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cclxuXHJcbiAgICBASG9zdExpc3RlbmVyKCdtb3VzZWRvd24nLCBbJyRldmVudCddKVxyXG4gICAgb25DbGljaygkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7IH1cclxuXHJcbiAgICBsb2FkRGF0YShpdGVtczogYW55KSB7XHJcbiAgICAgICAgdGhpcy5kYXRhID0gaXRlbXM7XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5jZHJbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgb25Nb3JlQ2xpY2soJGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMubW9yZUNsY2lrLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXREYXRhKHJvd09iajogYW55KSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0dGVyKHJvd09iaik7XHJcbiAgICB9XHJcblxyXG4gICAgb25JdGVtQ2xpY2soJGV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgdGhpcy5pdGVtQ2xpY2suZW1pdCh7ZGF0YTogaXRlbSwgZXZuZXQ6ICRldmVudH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHNldEFjdGl2ZUl0ZW0oaW5kZXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMuYWN0aXZlSW5kZXggPSBpbmRleDtcclxuICAgICAgICBpZiAoIXRoaXMuY2RyWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il19