/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, ViewChild } from '@angular/core';
import { DialogComponent } from '@farris/ui-dialog';
import { SearchBoxComponent, SearchFieldsComponent } from '@farris/ui-search-box';
import { LookupGridComponent } from '../lookup-grid.component';
import { SearchBarMode } from '../lookup-displaytype';
export class LookupFilterBarComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     * @param {?} lookIns
     */
    constructor(injector, cd, lookIns) {
        this.injector = injector;
        this.cd = cd;
        this.lookIns = lookIns;
        this.fields = [];
        this.filterFields = [];
        this.searchAnyField = true;
        this.columns = [];
        this.viewType = SearchBarMode.both;
        this.isNav = false;
        this.searchFields = [];
        this.conditionsChange = new EventEmitter();
        this.textConditions = [];
        this.fieldConditons = [];
        this.dialogRef = this.injector.get(DialogComponent, null);
        this.el = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.searchFields = this.searchFields || [];
        this.convertColumnsToSearchFields();
        if (this.dialogRef && this.searchboxRef) {
            this.dialogRef.moving.subscribe((/**
             * @return {?}
             */
            () => {
                this.searchboxRef.updateShadowBoxPosition();
            }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.convertColumnsToSearchFields();
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.initSearchValue();
            }), 100);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @private
     * @return {?}
     */
    initSearchValue() {
        if (this.lookIns._searchState && !this.isNav && this.searchboxRef) {
            const { field, value } = this.lookIns._searchState;
            if (field === '*' && value != '' && value !== null && value !== undefined) {
                /** @type {?} */
                const alltitle = this.lookIns.localService.getValue('lookup.anyFields');
                /** @type {?} */
                const _conditions = [{ code: '*', name: alltitle, value }];
                this.searchboxRef.setValue(_conditions, false);
                this.textConditions = this.searchboxRef.expandStarFieldToAllFields();
            }
        }
    }
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    converColumnToFilterField(n) {
        /** @type {?} */
        const t = {};
        t.id = n.field;
        t.labelCode = n.field;
        t.code = n.fieldPath;
        t.name = n.title;
        /** @type {?} */
        const options = n.formatter ? n.formatter.options : null;
        // 数字
        if (n.fieldType === 'NumericType') {
            /** @type {?} */
            const _options = Object.assign({}, (options || {}));
            n.precision = n.precision || 0;
            _options.precision = _options.precision || 0;
            if (n.precision != _options.precision) {
                _options.precision = n.precision;
            }
            t.control = Object.assign({
                "controltype": "number",
                "bigNumber": false,
                "placeHolder": '请输入数字',
                single: true
            }, _options);
            t.beginPlaceHolder = "开始数值";
            t.endPlaceHolder = "结束数值";
        }
        // 枚举
        if (n.fieldType === 'EnumType') {
            t.control = {
                "controltype": "enum",
                "enumValues": n.formatter.options.data,
                single: true
            };
        }
        // 布尔
        if (n.fieldType === 'BooleanType') {
            /** @type {?} */
            let trueText = options ? options.trueText || 'True' : 'True';
            /** @type {?} */
            let falseText = options ? options.falseText || 'False' : 'False';
            t.control = {
                controltype: 'dropdown',
                enumValues: [
                    { value: 1, name: trueText },
                    { value: 0, name: falseText },
                ],
                single: true
            };
        }
        // 日期
        if (n.fieldType === "DateType" || n.fieldType === 'DateTimeType') {
            /** @type {?} */
            let dateFormat = 'yyyy-MM-dd';
            /** @type {?} */
            let showTime = false;
            /** @type {?} */
            let showType = '1';
            if (options) {
                if (options.format) {
                    dateFormat = options.format;
                }
            }
            if (n.fieldType === 'DateTimeType') {
                showTime = true;
            }
            if (dateFormat === 'yyyy') {
                showType = '2';
            }
            if (dateFormat === 'yyyy-MM') {
                showType = '3';
            }
            t.control = {
                "controltype": "datetime",
                "placeholder": "请选择日期",
                single: true,
                dateFormat,
                showTime,
                showType
            };
        }
        return t;
    }
    /**
     * @private
     * @return {?}
     */
    convertColumnsToSearchFields() {
        if (this.columns && this.columns.length) {
            this.fields = this.columns.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.fieldType && (n.fieldType === 'StringType' || n.fieldType === 'TextType'))).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    code: n.fieldPath,
                    name: n.title
                };
            }));
            if (!this.fields.length && this.searchFields.length) {
                this.fields = this.searchFields.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return {
                        code: n.value,
                        name: n.label
                    };
                }));
            }
            if (this.viewType === 'both' || this.viewType === 'onlyfield') {
                this.filterFields = this.columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.fieldType && n.fieldType !== 'StringType' && n.fieldType !== 'TextType' && n.field)).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    return this.converColumnToFilterField(n);
                }));
            }
            if (this.lookIns && this.lookIns.allowQueryFields) {
                const { nav, main } = this.lookIns.allowQueryFields;
                /** @type {?} */
                let queryFields = main;
                if (this.isNav) {
                    queryFields = nav;
                }
                if (queryFields) {
                    /** @type {?} */
                    const _queryFields = queryFields.split(',');
                    this.fields = this.fields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => _queryFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => f === n.code)) > -1));
                    this.filterFields = this.filterFields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => _queryFields.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    (f) => f === n.code)) > -1));
                }
            }
            this.cd.markForCheck();
        }
    }
    /**
     * @param {?} $event
     * @param {?=} isString
     * @return {?}
     */
    onConditionChange($event, isString = true) {
        if (isString) {
            this.textConditions = $event;
        }
        else {
            this.fieldConditons = $event;
        }
        this.textConditions = this.textConditions || [];
        /** @type {?} */
        const _conditions$ = this.fieldConditons.concat([]);
        if (this.fieldConditons && this.fieldConditons.length && this.textConditions.length) {
            _conditions$[0].lbracket = this.fieldConditons[0].lbracket + '(';
            _conditions$[_conditions$.length - 1].relation = 1;
            _conditions$[_conditions$.length - 1].rbracket = _conditions$[_conditions$.length - 1].rbracket + ')';
        }
        /** @type {?} */
        const _conditions = _conditions$.concat(this.textConditions);
        this.conditionsChange.emit(_conditions);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClearConditions($event) {
        $event.stopPropagation();
        this.textConditions = [];
        this.fieldConditons = [];
        if (this.searchboxRef) {
            this.searchboxRef.clearConditions(false);
        }
        if (this.searchfieldsRef) {
            this.filterFields.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.value = null;
            }));
            this.searchfieldsRef.clearConditions(false);
        }
        this.cd.detectChanges();
        this.conditionsChange.emit([]);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onEsc($event) {
        this.lookIns.closeLoading();
        this.lookIns.closeDialog();
    }
}
LookupFilterBarComponent.decorators = [
    { type: Component, args: [{
                selector: '[lookup-filter-bar]',
                template: `
    <div class="d-flex flex-row">
        <farris-search-fields #searchfields [fields]="filterFields" class="mr-2 f-utils-fill"  
        *ngIf="filterFields && filterFields.length && (viewType == 'both' || viewType=== 'onlyfield')" 
        (conditionChange)="onConditionChange($event, false)"></farris-search-fields>

        <div style="min-width:40%;" class="d-flex flex-row" [class.w-100]="!filterFields || !filterFields.length" [style.maxWidth]="filterFields && filterFields.length?'70%': '100%'">
            <farris-search-box #searchbox [fields]="fields" [useAnyField]="searchAnyField"
            (conditionChange)="onConditionChange($event, true)" class="f-cmp-inputgroup f-utils-fill" 
            *ngIf="(viewType == 'both' || viewType=== 'onlyinput')" (escHandler)="onEsc($event)"></farris-search-box>
            <span class="f-icon f-icon-remove clear-search-fields" 
                [ngStyle]="((textConditions && textConditions.length) || (fieldConditons && fieldConditons.length)) ? { }: {opacity: '0.3',pointerEvents: 'none'}"
                (click)="onClearConditions($event)" title="{{ 'lookup.clearAllConditions' | locale }}" style="min-width:28px;border: 0;"></span>
        </div>
    </div>
    `
            }] }
];
/** @nocollapse */
LookupFilterBarComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: LookupGridComponent }
];
LookupFilterBarComponent.propDecorators = {
    searchAnyField: [{ type: Input }],
    columns: [{ type: Input }],
    viewType: [{ type: Input }],
    isNav: [{ type: Input }],
    searchFields: [{ type: Input }],
    conditionsChange: [{ type: Output }],
    searchboxRef: [{ type: ViewChild, args: ['searchbox',] }],
    searchfieldsRef: [{ type: ViewChild, args: ['searchfields',] }]
};
if (false) {
    /** @type {?} */
    LookupFilterBarComponent.prototype.fields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.filterFields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchAnyField;
    /** @type {?} */
    LookupFilterBarComponent.prototype.columns;
    /** @type {?} */
    LookupFilterBarComponent.prototype.viewType;
    /** @type {?} */
    LookupFilterBarComponent.prototype.isNav;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchFields;
    /** @type {?} */
    LookupFilterBarComponent.prototype.conditionsChange;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchboxRef;
    /** @type {?} */
    LookupFilterBarComponent.prototype.searchfieldsRef;
    /** @type {?} */
    LookupFilterBarComponent.prototype.textConditions;
    /** @type {?} */
    LookupFilterBarComponent.prototype.fieldConditons;
    /** @type {?} */
    LookupFilterBarComponent.prototype.dialogRef;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    LookupFilterBarComponent.prototype.lookIns;
}
//# sourceMappingURL=data:application/json;base64,