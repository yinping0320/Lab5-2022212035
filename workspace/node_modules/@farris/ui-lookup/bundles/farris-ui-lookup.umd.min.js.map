{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@farris/ui-lookup/lib/lookup-displaytype.ts","ng://@farris/ui-lookup/lib/lookup.component.ts","ng://@farris/ui-lookup/lib/lookup-grid-options.ts","ng://@farris/ui-lookup/lib/http/ILookupHttpService.ts","ng://@farris/ui-lookup/lib/lookup-defaut-mapping.ts","ng://@farris/ui-lookup/lib/utils.ts","ng://@farris/ui-lookup/lib/lookup-presonalConfig.service.ts","ng://@farris/ui-lookup/lib/services/util.service.ts","ng://@farris/ui-lookup/lib/services/treenode.helper.ts","ng://@farris/ui-lookup/lib/services/favorite-helper.ts","ng://@farris/ui-lookup/lib/services/selection-manager.ts","ng://@farris/ui-lookup/lib/services/bind-datatable-event.ts","ng://@farris/ui-lookup/lib/services/on-text-change.ts","ng://@farris/ui-lookup/lib/services/bind-treetable-event.ts","ng://@farris/ui-lookup/lib/services/multi-selection.manager.ts","ng://@farris/ui-lookup/lib/services/http-manager.ts","ng://@farris/ui-lookup/lib/lookup-left.component.ts","ng://@farris/ui-lookup/lib/services/lookup-component.manager.ts","ng://@farris/ui-lookup/lib/services/dialog-mangager.ts","ng://@farris/ui-lookup/lib/services/lookup-selection.service.ts","ng://@farris/ui-lookup/lib/lookup-grid.component.ts","ng://@farris/ui-lookup/lib/lookup-tabs.component.ts","ng://@farris/ui-lookup/lib/lookup-tip.directive.ts","ng://@farris/ui-lookup/lib/quick-select/quick-select-panel.component.ts","ng://@farris/ui-lookup/lib/quick-select/lookup-quick-select.directive.ts","ng://@farris/ui-lookup/lib/advanced-layout/lookup-advanced-layout.component.ts","ng://@farris/ui-lookup/lib/advanced-layout/lookup-filter-bar.component.ts","ng://@farris/ui-lookup/lib/selected-list/lookup-selected.directive.ts","ng://@farris/ui-lookup/lib/lookup.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__assign","assign","t","s","i","n","arguments","length","prototype","call","apply","this","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","FAVORITE_FIELD_NAME","List","TreeList","NavList","NavTreeList","NavListTree","QuickSelectDefaultOptions","enable","showMore","showItemsCount","footerHeight","minWidth","enableBackspace","LOOKUPINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","LookupComponent","multi","defineProperty","content","dialog","dialogCreated","_isShow","val","changeDetector","detectChanges","ngControl","valid","ngOnInit","initEvents","injector","get","NgControl","ngOnDestroy","lookupUnsubscribe","ngAfterViewChecked","_this","closed","subscribe","isShow","dictPicking","of","showDialog","dictPicked","closeDialog","beforeOpen","beforeClose","dialogHeight","defaultDialogSize","height","dialogWidth","width","disabled","readonly","ngZone","runOutsideAngular","setTimeout","show","close","dictPickedSubscription","unsubscribe","dictPickingSubscription","dialogCreatedSubscription","onResizing","pos","resizing","emit","size","onResized","resized","onMaxDialog","dialogMaxed","writeValue","obj","displayText","displayValue","originalText","registerOnChange","fn","onModelChange","registerOnTouched","onModelTouched","setDisabledState","isDisabled","Component","args","selector","template","providers","Injector","ElementRef","ChangeDetectorRef","HostBinding","Input","Output","ViewChild","el","hostCls","title","buttonAlign","showButtons","showCloseButton","showMaxButton","resizable","draggable","editable","dialogOpened","EventEmitter","dialogClosed","Subject","NgZone","DisplayInfo","lookupGridDefaults","singleSelect","showFilterBar","pagination","pageIndex","pageSize","pageList","displayInfoDefault","favorites","okText","cancelText","allColumns","ServerSideToken","InjectionToken","LookupDefaultMapping","Injectable","CommonUtils","utils","lookupFieldMap","helpData","mapFields","dataObj","keys","forEach","f","map","h","getValue","join","split","ff","field","trim","setValue","LookupUtils","setActiveLookupInstance","lookupIns","rts","setLookupInstance","destroy","pendingStart","updateFormState","lookup","pending","document","body","style","pendingEnd","getPathCode","data","treeInfo","dataField","pathField","getLayerData","layerField","createFilterCondition","filterField","lbracket","rbracket","relation","FilterRelation","Or","compare","Compare","Like","mergeCondition","condition","fields","searchData","cloneDeep","filterConditions","sortConditions","_a","_b","_c","searchConditions","lastSearchConditions","Empty","And","searchCondition","canSelectable","makeTreeWithParentID","parentId","parentIdField","idField","nodes","Map","result","unattached","node","children","selectable","parent","parents","id","set","PID","parent_1","pid","makeTree","pathCode","parentPathCode","substr","parent_2","RuntimeStateService","PersonalConfigService","_key","buildKey","controlID","_newKey","str","pathArr","prefix","location","hash","pathname","idService","encrypt","initPersonalConf","getPersonalData","key","personalConfigKey","conf","localStorage","getItem","personalConf","JSON","parse","_updatePersonalConfig","removeItem","savePersonalConfig","getQuickSelected","localeId","qs","quickSelected","items","getDialogSize","updatePersonalConfig","cfg","_data_1","favorite","lang","arr","from","Set","setItem","stringify","getActiveTabIndex","tabName","tabIndex","updateQueckSelected","selectedRow","quickItems","selectedIndex_1","element","index","item","filter","v","unshift","_qs","newData","per","flag","isArray","zh-CHS","selected","IdService","selectItemObser$","displayType","UtilService","instance","TreeNodeHelper","getTreeInfo","treeNode","treeInfoDataField_1","toLowerCase","find","writeConsole","getTreeNodeLayer","updateTreeNodeExpanded","treeNodes","expandLevel","flatAllNodes","treeData2Flat","tn","expanded","shoudExpand","isSelectNodeParent","leaf","level","parentIds","parentID","_parents","rowNode","nodeLayer","navSelectedIds","allParentIds","includes","getLeafNode","flatTreeNodes","reduce","c","FavoriteHelper","getFavoriteColumns","columns","gridOptions","rtn","formatter","FavoriteIcon","initColumnWidth","initPersonalInfo","personalConfigService","nativeElement","controlId","pcstr","getLookupBindingFields","textField","listenPersonalConfigHandler","initFavoriteComponentEvent","cmpRef","_this_1","LookupGridDisplayType","fdt_1","remoteSort","lookupSelectionSer","clearSelections","updateSelections","unSelectRow","unSelect","checkAll","cellClick","col","event","stopPropagation","target","contains","row","dt","componentRef","loadData","total","favoriteItems","updateFavoriteData","FavoriteAction","rowDblClick","rowData","selectItem","ftt_1","nodeSelected","nodeUnChecked","multiSelMgr","remove","nodeChecked","_this_2","every","hasFinish","dblClick","okButton","click","checkeds","checkedChange","isCheck","unCheckAll","nodeItems","state","rowNodes","getFavoritData","favData","localService","getFavoritIds","_loadFavoriteData","fdt","favoritesComponentRef","loadFavoriteDatatable","cd","markForCheck","closeLoading","loadFavoritesData","res","favoriteDataFrom","TreeTableComponent","ftt","bindFavTreetable","loadFavoriteForTreeTable","undefined","favoriteColumns","selectionMgr","selectCurrentValue","allColumnsTitle","favids","findIndex","onlySelectLeaf","checkOnSelect","selectOnCheck","showCheckbox","enableCascade","ttEventMgr","cascadeValueChanged","cascadeStatus","cascadeCheck","cascadeDown","cascadeUp","checkNodeIsLeaf","initFavoriteTreeData","layerType","lookupUtils","parentField","expandAll","updateFavoritesStatus","useFavorite","favIds","_this_3","each","_data","_updateFavorites","action","localeID","newVal","favItems","favoriteItems$","httpMgr","submitFavoriteData","ftt_2","showLoading","getData","favoriteIds","resData","_items","favoriteColumnFormatter","isTree","rn","findRowNode","SelectionManager","getBindingData","jsonData","ins","bindingData","formDirective","form","getObject","toJSON","initDisplayValue","targetField","indexOf","_clearSelections","getDataCmpInstance","cmpRefInstance","clearAll","cdRef","destroyed","dtBody","selectedRowIndex","selections","selectedIds","enableToSelect","selectedRows","getSelections","selected4Treetable","selected4Datatable","ref","activeTab","lookupCmpMgr","getComponentInstance","serializedValue","values","isSelected","checkRow","valueArr","selectNode","checkedNodes","selectNodes","getSelectedIds","multipleChoiceSeparator","DataTableEventManager","conditionsChange","conditions","code","onSearch","$event","pageInfo","search","_sortState","sortName","sortOrder","uri","searching","pipe","catchError","err","_ERROR_","tap","Error","_loadData","enableMultiFieldSearch","query","messagerService","warning","mustWriteSomething","self","favHelper","loadDataTableData","bindDataTableEvent","pageChanged","pagerChanged","buildQueryParams","pageSizeChanged","_searchState","searchValueChange","observers","faction","columnSorted","sort","param","fieldPath","clearSearchValue","cellStyler","text-overflow","checkSearchResult","searchOnServer","cancelSelect","setModelValue","runDictPickedEvent","onTextChanged","isTextChange","nosearch","originalEvent","getFormState","switchMap","pr","customData","type","SHOWDIALOG","MESSAGE","message","notifyService","bind","rowdata","leafNode","treeNodeHelper","isOnlySelectLeaf","setTreeInfo","Message","inputBlurHandler","inputGroup","textbox","render2","listen","enterHandle","keydownHandle","canOpen","quickSelect","selectionStart","shortcutKey","open","preventDefault","TreeTableEventManager","searchTreeData","tt","psRef","directiveRef","scrollToTop","checkNodes_1","_isLoadAllTreeData","_nodes","expandFirstNode","resize","IS_SEARCH_RESULT","getChildren","parentPath","parentLayer","category","searchValue","enableFullTree","loadTreeDataType","searchField","helpId","http","bindTreetableEvent","_searchTreeData","searchparam","remoteSearch","useInsideSearchHandler","searchHandle","isLoadAllTreeData","dblClickExpand","searchFields","loadDataType","virtualized","allData","showCheckAll","enableFindText","nodeData","unSelectNode","pathcode","unselectByPathcode","clear","loadAllData","clientSort","sortName_1","_sortName","reqTyp","checkNodeCanBeSelect","expand","isGetAllChidlNodes","propagateSelectionDown","isChecked","selectItems","_isAsyncLoadTreeData","expandTreeNode","parentIdOrPath","appendChildren","addtional","update","instanceTyp","MultiSelectionManager","onSelectedTableCellClick","classList","rid","unCheckedNode","_tt","unCheckRow","_dt","initSelectedColumns","selectedColumns","showSelected","favcol","select","deleteSelectedItems","ids","unCheckedAndSelected","unCheckedNodes","unCheckRows","save","rows","loadSelections","DefaultUserConfig","LookupHttpManager","disablePagination","params","navConditions","navSearchConditions","searchParam","isDoublleList","navigationFilter","idValue","relationFilter","sfield","searchType","isNaN","Number","treeToList","navTreeToList","selectedInfo","navNodePathCode","navPathCode","includeSubordinates","navigationOptions","beUri","allSearchFields","isUsePagination","_uri","context","_searchResult","params1","parentsIds","getSelecedItems","selIds","getPersonalConfig","defaultConf","_conf","req","isTabChanged","textValue","ucs","lookupRequest","isQuickSelect","usePersionalConf","_originalPersonalConfig","reSize","showCascadeControl","cascadeItems","keys_1","a","_sids","colSizeInfo","getColumnSizeInfo","msg","addFavoriteSuccess","delFavoriteSuccess","configData","configkey1","configkey2","configkey3","textvalue","savingFaoriteData","success","nav","fav","sel","LookupLeftComponent","lookupCmp","isTreeList","includeSubordinates$$","includeSubordinates$","updateScrollPosition","scrollY","elementRef","scrolltop","scrollToY","createComponent","dtFac","navOptions","cfr","resolveComponentFactory","DataTableComponent","leftPanelWidth","cmpContainer","maxSize","fill","autoFitColumns","enablePager","_width","_height","getFilterBarHeight","selectLeftDataTableRow","selectFirstInNav","initDataTable","loadTableData","dataTableReLoad","buildParams","initTreeTable","fast","nodeUnSelect","fixedHeader","selectFirstNode","loadTreeData","sortCol","requestType","onNodeExpanded","parentPath_1","parentLayer_1","console","log","all","onConditionsChange","ComponentFactoryResolver","read","ViewContainerRef","unselected","LookupComponentManager","selectedDtRef","leftRef","leftComponentRef","createComponentWithServerData","valueField","dtyp","toUpperCase","createContent","createFavoriteComponent","resizeComponent","favoritesOptions","createFavoritesContent","reloadTreeDataForExpand","layerNum","setTreeNodeExpandBy","layer","expandLayer","useContextMenuForTree","treeTableOptions","maxLevel","enableContextMenu","language","levelMenus","handle","menu","isLoadAllTreeData_1","updateSerializedValue","firstNodeData","_level","contextMenus","visible","nodeIds","getChildNodes","unSelectNodes","expandall","collapseall","collapseAll","expandByLayer","contextMenuItems","beforeShowContextMenu","searched","getCmpHeight","isFav","dialogMgr","getHeight","opts","getComponentType","cmpFac","centerContainer","contentContainer","fit","fitColumns","ttOpts","favoritesContainer","getSpaceWidth","createLeftComponent","ops","leftContainer","navLookupDialogMinWidth","resizeCmp","leftPanel","debounceTime","getNavigationFilter","rowDatas","dataCmpRef","loadDataWhenOpen","navRow","relations","result_1","k","groupField","rf","fieldName","helpField","fieldValue","vals","LookupDialogManager","unsubscribes","lookupInit","dialogClosedSubscription","dialogOpenedSubscription","initFavoriteItems","_loadDataWhenOpen","_navSelectedId","_selectFirstInNav","enableGetAllChildNodes","keyDownHandler","focus","userInitialConfig","reset","_treeInfo_","dtEventMgr","_okbtnclick$","onDialogCreated","dlg","setContainerMargin","registerDialogEvent","isRecordSize","dlgSize","subscriptions","checkDictPickingResult","canOpenDialog","isReady","contentHeight","containerMargin","bottom","top","useNewLayout","getMainGridSize","left","right","resetDialogContentHeight","hHeight","header","fHeight","footer","registerOkBtnEvent","leftClick$","fromEvent","button","debounce$","clickLimit$","bufferCount","bufferGate$","race","first","repeat","buffer","clicks","opened","dialogContentHeight","querySelector","customDisplayType","initData","lookupinitializationSubject","registerShortcutKey","leftPanelResize$","cascadeSelect","selectEl_1","selectEl","panelRef_1","panelRef","beforeShow","offsetLeft","toLocaleLowerCase","maxWidth","dlgContainerDom","eventManager","addEventListener","moveUp","moveDown","searchFocus","confirm","nextPager","prevPager","collapse","onKeydownEvent","ctrlKey","isNextPager","paginationKeyDownHandler","datatableRef","newPageNum","Math","ceil","onPageChange","LookupSelectionService","selecteditems","state$","selectionChanged$","_pathcode","checked","BehaviorSubject","selected$","quickItems$","_super","LOOKUPGRID_VALUE_ACCESSOR","LookupGridComponent","__extends","__","constructor","create","tslib_1.__extends","_displayType","align","fixed","_gridOptions","resizableColumns","hover","searchAnyField","useTip","_userSettings","initLabels","labels","dataTab","favTab","clearAllSelected","delSelected","debugSer","isDouble","cacheUserConfig","_title","displayInfo","_columns","deepClone","getColumns","clone","checkGridOptions","mustChoosAdatarow","mrn","mb","containerStyle","marginLeft","marginRight","marginTop","marginBottom","farrisInstances","lookupSearchInputEvent","overLayService","destory","ngOnChanges","changes","isFirstChange","ngAfterViewInit","useExtendInfo","updateExtendInfo","viewType","registerMouseEventForTagView","tagboxHeight","tagbox","tbh","maxTagboxHeight","setStyle","add","createInstance","MessagerService","loadingService","LoadingService","NotifyService","utilService","LocaleService","showNavigation","_size","layoutRef","setPanelMaxSize","beforeSelectData","ctxMenuLanguages","defaultTreeTableOptions","modalContent","loading","container","delay","getSearchColumns","resdata","cols","sf","label","initOptions","obser","setLookupTitleText","navigation","customNavFormatter","rowStyler","_nav_treeinfo_loadtype","customFormatter","customStyles","rowStylers_1","cellStylers_1","cell","filterFn_1","styleItem","styles","showGetAllChildrenCheckbox","observer","selectedItems","toggleExpand","modals","timeout","hasError","exception","restData","beforeLoadData","rebindEvent","loadTreeTableData","loadFavData","treeData","updateDataTable","striped","loadSuccess","_treeInfo","_osl","tt_1","isLoadAll","keepSelect","isAllTreeData","onChanges","clearMappings","valueChanged","textChanged","onClear","extendInfo","mappingFn","defaultMapping","clearValue","okHandler","bsdResult","_beforeSelectDataCallBack","getParentPathCode","maxLayer","x","max","_rows","patchCode","_rows2","_pc","canSelect","selectedRows$","allitems","updateControlValue","setDisplayText","updateBindData","selectedData","activeElement","blur","helpFields","bindingData_1","formField","getExtendInfoFields","isHelpData","extInfoFields","tipFieldArr","tf","mapKey","onUpdateExtendInfo","extInfoFormatter","tipString","getExtendInfoText","extendInfoFields_1","itemData","tipString_1","tfv","getDisplayText","df","displayFields","txtArr","displayTextSeparator","displayFormatter","tree","datatable","focusToInput","zone","cancelHandler","onTabChange","_firstChange","y","enableClear","onTagboxMouseEnter","onTagboxMouseLeave","toggleClearIcon","clearIcon","display","showTagboxClearButton","onRemoveSelectItem","txt","textArray","displayTextList","removedIndex","splice","updateOtherFieldDataWhenTagremoved","tagRemoved","textFieldIndex","bindingData_2","bindingPath","pathArr_1","fieldPaths","valArr","onAllChildNodesClick","onIncludeSubordinatesChange","onTagContainerClick","tagInput","name","clearSelected","onDeleteSelectedItem","unCheckeIds","typ","fieldsizeData_1","ShortcutsService","encapsulation","ViewEncapsulation","None","exportAs","Renderer2","shortcuts","groupIcon","up","down","disable","placeholder","navTreeTableOptions","dataTableOptions","textAlign","enableTitle","searchBarMode","SearchBarMode","allowQueryFields","tabChangeSubscription","currentSelectedItems","cascadeStatusItems","valeu","EventManager","FarrisComponentInstanceService","OverLayHiddenService","DebugService","useDebugMode","LookupTabsComponent","initInkBarPos","currentValue","navClickHandle","tabChange","which","layout","enableFav","dataListNavRef","offsetWidth","favoriteNavRef","selectedNavRef","inkBarRef","animations","trigger","transition","opacity","animate","dialogTitle","render","LookupTipDirective","tipText","enableTip","inputRef","iconMouseEnter","creatPanel","iconMouseLeave","isInTipPanel","removePanel","clickHandle","getQuickSelectedByLocaleId","localeid","tipPanel","setPosition","ul","renderer","createElement","li","innerHTML","setProperty","appendChild","addClass","leaveEvent","enterEvent","clickEvent","nodeName","removeChild","getBoundingClientRect","keyArr","shift","Directive","InputGroupComponent","LookupQuickSelectPanelComponent","onClick","cdr","onMoreClick","moreClcik","formatData","rowObj","onItemClick","itemClick","evnet","setActiveItem","activeIndex","HostListener","maxItems","LookupQuickSelectDirective","options","inputClick","panelElement","lookupRef","createDataPanel","valueChange","overflow","setPanelPosition","hide","removePanelElement","isMoreClick","reqAnimFrame","updateTopPosition","getPanelSize","top_1","maxHeight","zIndex","cmpFact","changeDetectorRef","registerMouseEvent","calculationPanelHeight","getInputSizeInfo","window","innerHeight","panelHeight","transformOrigin","parseInt","innerWidth","slice","loadingRef","newHeight","itemsContainer","offsetHeight","removeStyle","registerKeyboardEvent","newdata","idx","prevIdx","nextIdx","ngzone","LookupAdvancedLayoutComponent","setCurrentTab","dialogRef","dragHandle","headerRel","activetabRef","changeTabs","tabstr","tabChanged","tab","changeDialogSize","elRef","DialogComponent","LookupFilterBarComponent","convertColumnsToSearchFields","searchboxRef","moving","updateShadowBoxPosition","initSearchValue","lookIns","isNav","_conditions","textConditions","expandStarFieldToAllFields","converColumnToFilterField","labelCode","fieldType","_options","precision","control","controltype","bigNumber","placeHolder","single","beginPlaceHolder","endPlaceHolder","enumValues","trueText","falseText","dateFormat","showTime","showType","format","filterFields","queryFields","main","_queryFields_1","onConditionChange","isString","fieldConditons","_conditions$","onClearConditions","clearConditions","searchfieldsRef","onEsc","LookupSelectedDirective","bindingEvents","panelMouseEvent","overlaySer","selectedPanel","closest","showPanel","panel","removeClass","commonUtils","panelEscHandler","regBodyKeydownEvent","count","selectedTableContainer","selectedTableBody","dataTableRef","tableHeight","scorllableBodyHeight","checkBodyHeightWhenEmptyData","notifySer","NgModule","imports","CommonModule","FormsModule","FarrisCommonModule","forRoot","FarrisDialogModule","MessagerModule","NotifyModule","LoadingModule","InputGroupModule","LayoutModule","DataTableModule","TreeTableModule","FarrisContextMenuModule","LocaleModule","SearchBoxModule","FarrisFormsModule","exports","declarations","entryComponents","LookupModule"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { DataFormatter } from '@farris/ui-common/column';\r\n\r\n/** æ¶èåå­æ®µåç§° */\r\nexport const FAVORITE_FIELD_NAME = '__favorite__';\r\nexport const INPUT_GROUP_ICON = '<i class=\"f-icon f-icon-lookup\"></i>';\r\n\r\n// è·åç»ä»¶å®ä¾çç±»å\r\nexport type ComponentInstanceType = 'datatable'| 'treetable' | 'fav' | 'selected' | 'leftTree' | 'leftDataTable';\r\n\r\nexport enum LookupGridDisplayType {\r\n    List = 'LIST',\r\n    TreeList = 'TREELIST',\r\n    NavList = 'NAVLIST',\r\n    NavTreeList = 'NAVTREELIST',\r\n    NavListTree = 'NAVLISTTREE'\r\n}\r\n\r\n/** æ¶èç¸å³å¾æ  */\r\nexport enum FavoriteIcon {\r\n    /** å·²æ¶è */\r\n    yes = '<span class=\"f-icon f-icon-star f-lookup-favorite\" style=\"font-size:12px\" ></span>',\r\n    /** æªæ¶è */\r\n    no = '<span class=\"f-icon f-icon-star-outline f-lookup-favorite\" style=\"font-size:12px\"></span>',\r\n    /** ç§»é¤æ¶è */\r\n    delete = '<span class=\"f-icon f-icon-star f-lookup-unfavorite\" style=\"font-size:12px\"></span>',\r\n    /** ç§»é¤å·²éè®°å½ */\r\n    remove = '<span class=\"f-icon f-icon-minus-circle\" style=\"font-size:12px; color: #dd2438;cursor: pointer\"></span>'\r\n}\r\n\r\n/** æ¶èç¸å³å¨ä½ */\r\nexport enum FavoriteAction {\r\n    /** æ·»å æ¶è */\r\n    add = 'append item to favorite.',\r\n    /** ç§»é¤æ¶è */\r\n    delete = 'remove favorite.'\r\n}\r\n\r\nexport interface ExtInfoFormatterParam {\r\n    [key: string]: any;\r\n    bindingData?: any;\r\n    instance?: any;\r\n}\r\n\r\nexport type ExtInfoFormatterFn = (param: ExtInfoFormatterParam) => string;\r\nexport type ExtInfoFormatter = string | ExtInfoFormatterFn;\r\n\r\nexport interface CustomDataFormatter {\r\n    /** æ°æ®æ ¼å¼å */\r\n    [fieldName: string]: DataFormatter ;\r\n    /** è¡æ ·å¼ */\r\n    rowStyler?: (e: { data: any }) => {[key: string]: any};\r\n    /** ååæ ¼æ ·å¼ */\r\n    cellStyler?: (e: { data: any }, field: string) => {[key: string]: any};\r\n}\r\n\r\nexport interface QuickSelectOption {\r\n    /** æ¯å¦å¯ç¨ */\r\n    enable?: boolean;\r\n    /** æ¾ç¤ºtop è®°å½æ°ï¼é»è®¤ 10 */\r\n    showItemsCount?: number;\r\n    /** æ¾ç¤ºææ¬å­æ®µ */\r\n    textField?: string;\r\n    /** èªå®ä¹æ ¼å¼å */\r\n    formatter?: (data: any) => string;\r\n    \r\n    footerHeight?: number;\r\n    /** æ¾ç¤ºæç´¢æ´æ° æé® */\r\n    showMore?: boolean;\r\n    /** æå°å®½åº¦, é»è®¤ 200px */\r\n    minWidth?: number;\r\n    /** å¯ç¨åéé®ç§»é¤éä¸­é¡¹ï¼é»è®¤ä¸º false */\r\n    enableBackspace?: boolean;\r\n}\r\n\r\nexport const QuickSelectDefaultOptions: QuickSelectOption = {\r\n    enable: false,\r\n    showMore: true,\r\n    showItemsCount: 10,\r\n    footerHeight: 0,\r\n    minWidth: 200,\r\n    enableBackspace: false\r\n}\r\n\r\n/**\r\n * - both: å¨é¨æ¾ç¤º\r\n * - onlyfield: ä»æ¾ç¤ºå­æ®µ\r\n * - onlyinput: ä»æ¾ç¤ºæç´¢è¾å¥æ¡ */\r\nexport enum SearchBarMode {\r\n    /** æ¾ç¤ºå­æ®µæ¥è¯¢ä¸æç´¢è¾å¥æ¡ */\r\n    both = 'both',\r\n    /** ä»æ¾ç¤ºå­æ®µ */\r\n    onlyinput = 'onlyinput',\r\n    /** ä»æ¾ç¤ºæç´¢è¾å¥æ¡ */\r\n    onlyfield = 'onlyfield'\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-15 15:24:24\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-30 14:01:34\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { Subscription, Observable, of, Subject } from 'rxjs';\r\nimport {\r\n    Component, Input, Output, EventEmitter, TemplateRef,\r\n    ViewChild, Injector, forwardRef, OnInit, ElementRef, ChangeDetectorRef,\r\n    AfterViewChecked, HostBinding, NgZone, OnDestroy\r\n} from '@angular/core';\r\nimport {\r\n    NG_VALUE_ACCESSOR,\r\n    ControlValueAccessor,\r\n    NgControl\r\n} from '@angular/forms';\r\n\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { IResizeEvent } from '@farris/ui-draggable';\r\n\r\nimport { PickingResult, PickedResult } from './lookup-grid-options';\r\n\r\nexport const LOOKUPINPUT_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farris-lookup',\r\n    template: `\r\n        <div\r\n            class=\"lookupbox input-group\"\r\n            [ngClass]=\"{\r\n                'f-state-disabled': disabled,\r\n                'f-state-readonly': readonly,\r\n                'f-state-editable': !editable\r\n            }\"\r\n        >\r\n            <input\r\n                class=\"form-control\"\r\n                [value]=\"displayText\"\r\n                [disabled]=\"disabled\"\r\n                [readonly]=\"!editable || readonly\"\r\n            />\r\n            <div class=\"input-group-append\">\r\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\r\n                    <i class=\"f-icon f-icon-lookup\"></i>\r\n                </span>\r\n            </div>\r\n        </div>\r\n        <farris-dialog\r\n            #dialog\r\n            *ngIf=\"isShow\"\r\n            [title]=\"title\"\r\n            [beforeOpen]=\"beforeOpen\"\r\n            [beforeClose]=\"beforeClose\"\r\n            [width]=\"dialogWidth\"\r\n            [height]=\"dialogHeight\"\r\n            [showButtons]=\"showButtons\"\r\n            [showMaxButton]=\"showMaxButton\"\r\n            [buttons]=\"buttonsRef || defaultButtonRef\"\r\n            [buttonAlign]=\"buttonAlign\"\r\n            (maxed)=\"onMaxDialog($event)\"\r\n            (resized)=\"onResized($event)\"\r\n            (resizing)=\"onResizing($event)\"\r\n        >\r\n            <ng-content></ng-content>\r\n\r\n            <ng-template #defaultButtonRef>\r\n                <div style=\"width: 100%;\">\r\n                    <button\r\n                        class=\"btn btn-secondary btn-lg\"\r\n                        (click)=\"closeDialog()\"\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\r\n                </div>\r\n            </ng-template>\r\n        </farris-dialog>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            :host-context(.ng-invalid) .form-control {\r\n                border-color: #ff0303;\r\n            }\r\n        `\r\n    ],\r\n    providers: [LOOKUPINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class LookupComponent\r\n    implements OnInit, ControlValueAccessor, AfterViewChecked, OnDestroy {\r\n    @HostBinding('class') hostCls = 'f-cmp-inputgroup';\r\n\r\n    /** çªå£å®½åº¦ */\r\n    @Input() dialogWidth: number;\r\n    /** çªå£é«åº¦ */\r\n    @Input() dialogHeight: number;\r\n    /** çªå£æ é¢ãé»è®¤å¼ï¼æ­¤å¤æ¾ç¤ºå¸®å©æ é¢ */\r\n    @Input() title = '';\r\n    /** æé®å¯¹é½æ¹å¼ */\r\n    @Input() buttonAlign = 'right';\r\n    /** æé®æ¨¡æ¿ */\r\n    @Input() buttonsRef: TemplateRef<any>;\r\n    /** æ¯å¦æ¾ç¤ºæé® */\r\n    @Input() showButtons = true;\r\n    /** æ¾ç¤ºå³é­æé® */\r\n    @Input() showCloseButton = true;\r\n    /** æ¾ç¤ºæå¤§åæé® */\r\n    @Input() showMaxButton = true;\r\n    /** åè®¸ææ½å°ºå¯¸ */\r\n    @Input() resizable = true;\r\n    /** åè®¸æå¨çªå£ */\r\n    @Input() draggable = true;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ææ¬æ¡ */\r\n    @Input() editable = true;\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** å­æ®µæ å°, { å¸®å©æ°æ®å­æ®µï¼è¡¨åå­æ®µ } */\r\n    @Input() mapFields: { [sourceField: string]: string };\r\n    /** å¼å­æ®µ */\r\n    @Input() valueField: string;\r\n    /** ææ¬å­æ®µ */\r\n    @Input() textField: string;\r\n    @Input() displayText = '';\r\n\r\n    /** è¿è¡æ¶ä¸ä¸æèªå®ä¹å¯¹è±¡ */\r\n    @Input() context: any;\r\n\r\n    /** çªå£æå¼åäºä»¶ */\r\n    @Input() beforeOpen: () => Observable<boolean>;\r\n    /** çªå£å³é­åäºä»¶ */\r\n    @Input() beforeClose: () => Observable<boolean>;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicking: (emptyObj?: {}) => Observable<PickingResult>;\r\n    dictPickingSubscription: Subscription;\r\n    /** å¸®å©åäºä»¶ */\r\n    @Input() dictPicked: (rowData: any) => Observable<PickedResult>;\r\n    dictPickedSubscription: Subscription;\r\n\r\n    /** çªå£æå¼å */\r\n    @Output() dialogOpened = new EventEmitter();\r\n    /** çªå£å³é­å */\r\n    @Output() dialogClosed = new EventEmitter();\r\n    /** çªå£æå¤§å */\r\n    @Output() dialogMaxed = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸è¿è¡æ¶ */\r\n    @Output() resizing = new EventEmitter();\r\n    /** ææ½æ¹åçªå£å°ºå¯¸ç»æ */\r\n    @Output() resized = new EventEmitter();\r\n    /** å¸®å©çªå£é»è®¤å°ºå¯¸ */\r\n    private defaultDialogSize = { width: 550, height: 570 };\r\n\r\n    dialogCreated = new Subject<DialogComponent>();\r\n    dialogCreatedSubscription: Subscription;\r\n    dialog: DialogComponent;\r\n    @ViewChild('dialog') set content(content: DialogComponent) {\r\n        if (this.dialog !== content) {\r\n            this.dialog = content;\r\n            if (content) {\r\n                this.dialogCreated.next(this.dialog);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _isShow = false;\r\n    get isShow() {\r\n        return this._isShow;\r\n    }\r\n    set isShow(val) {\r\n        this._isShow = val;\r\n        if (!this.changeDetector['destroyed']) {\r\n            this.changeDetector.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngControl: any;\r\n\r\n    displayValue = '';\r\n    originalText = '';\r\n\r\n    get invalid() {\r\n        return this.ngControl.valid;\r\n    }\r\n\r\n    private ngZone: NgZone;\r\n\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n    constructor(\r\n        public injector: Injector,\r\n        public el: ElementRef,\r\n        public changeDetector?: ChangeDetectorRef\r\n    ) {\r\n        this.ngZone = this.injector.get(NgZone);\r\n        // if (!this.personalConfigService) {\r\n        //     const idServ = this.injector.get(IdService);\r\n        //     this.personalConfigService = new PersonalConfigService(idServ);\r\n        // }\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.initEvents();\r\n        this.ngControl = this.injector.get(NgControl, null);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.lookupUnsubscribe();\r\n    }\r\n\r\n    ngAfterViewChecked() {\r\n        if (this.dialog) {\r\n            this.dialog.closed.subscribe(() => {\r\n                this.isShow = false;\r\n                this.dialog = null;\r\n            });\r\n        }\r\n    }\r\n\r\n    initEvents() {\r\n        if (!this.dictPicking) {\r\n            this.dictPicking = () => of({ showDialog: true });\r\n        }\r\n        if (!this.dictPicked) {\r\n            this.dictPicked = () => of({ closeDialog: true });\r\n        }\r\n        if (!this.beforeOpen) {\r\n            this.beforeOpen = () => of(true);\r\n        }\r\n        if (!this.beforeClose) {\r\n            this.beforeClose = () => of(true);\r\n        }\r\n\r\n        if (!this.dialogHeight) {\r\n            this.dialogHeight = this.defaultDialogSize.height;\r\n        }\r\n\r\n        if (!this.dialogWidth) {\r\n            this.dialogWidth = this.defaultDialogSize.width;\r\n        }\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n        this.dictPicking().subscribe((val: PickingResult) => {\r\n            if (val.showDialog === false) {\r\n                return;\r\n            }\r\n\r\n            this.isShow = true;\r\n            // this.changeDetector.detectChanges();\r\n            this.ngZone.runOutsideAngular(() => {\r\n                setTimeout(() => this.dialog.show());\r\n            });\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    closeDialog() {\r\n        this.isShow = false;\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n    }\r\n\r\n\r\n    private lookupUnsubscribe() {\r\n        if (this.dictPickedSubscription) {\r\n            this.dictPickedSubscription.unsubscribe();\r\n        }\r\n        if (this.dictPickingSubscription) {\r\n            this.dictPickingSubscription.unsubscribe();\r\n        }\r\n        if (this.dialogCreatedSubscription) {\r\n            this.dialogCreatedSubscription.unsubscribe();\r\n        }\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n    }\r\n    onResized(pos: IResizeEvent) {\r\n        this.resized.emit(pos.size);\r\n    }\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        if (obj) {\r\n            this.displayText = obj;\r\n            this.displayValue = obj;\r\n            this.originalText = this.displayText;\r\n        } else {\r\n            this.displayText = '';\r\n            this.displayValue = '';\r\n            this.originalText = '';\r\n        }\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState?(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-07-10 11:44:49\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:54\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { DataColumn } from '@farris/ui-common/column';\r\n\r\nexport type ONLY_SELECT_LEAF = 'default' | 'yes' | 'no';\r\nexport type LOAD_DATA_TYPE = 'all' | 'fav' | 'list' | 'nav' | 'search' | 'children'\r\n                            | 'textchange' | 'sort' | 'navsearch' | 'selected' | 'allChildren' | 'navAllChildren';\r\n\r\nexport interface TreeInfo {\r\n    /** æ°æ®å è½½æ¹å¼ï¼ all, async */\r\n    loadDataType?: 'all' | 'async';\r\n    /** åå±æ¹å¼ï¼ pathcode, parentId */\r\n    layerType?: string;\r\n    /** æ°æ®ä¸­å¸¦æåçº§ä¿¡æ¯çå­æ®µ */\r\n    dataField?: string;\r\n    /** ç¶IDå­æ®µ */\r\n    parentField?: string;\r\n    /** åçº§ç å­æ®µ */\r\n    pathField?: string;\r\n    /** çº§æ°å­æ®µ */\r\n    layerField?: string;\r\n    /** æ¯å¦æç»å­æ®µ */\r\n    isDetailField?: string;\r\n    /**\r\n     * åªåè®¸éæ©å¶å­èç¹\r\n     * - default: åºç¨æå¡å¨ç«¯è®¾ç½®ï¼å¦æå¡å¨æªè®¾ç½®ï¼åè½å  `no`\r\n     * - `yes`: æå¡å¨ç«¯è®¾ç½®å¤±æãä»åè®¸éæ©å¶å­èç¹ã\r\n     * - `no`:  æå¡å¨ç«¯è®¾ç½®å¤±æãææèç¹åå¯éæ©ã\r\n     */\r\n    onlySelectLeaf?: boolean | ONLY_SELECT_LEAF;\r\n    /** æ ç»ææ°æ®æ¯å¦å·²åå§åå®æ */\r\n    treeDataIsInit?: boolean;\r\n}\r\n\r\nexport interface CustomStyleData {\r\n    field: string, \r\n    value: string, comparator?: string, \r\n    styles: { [key: string]: any }\r\n}\r\n\r\nexport interface LookupGridResult {\r\n    /** åä¿¡æ¯ */\r\n    columns?: DataColumn[];\r\n    /** æ°æ®åè¡¨ */\r\n    items?: any[];\r\n    /** æ¥è¯¢å­æ®µ */\r\n    searchFields?: { label: string, value: string }[];\r\n    /** åé¡µä¿¡æ¯ */\r\n    pageInfo?: { pageIndex: number, pageSize: number, pageList?: number[], enablePager: boolean };\r\n    /** æ»è®°å½æ° */\r\n    total?: number;\r\n    /** åºå¼ */\r\n    mapFields?: { desgine: string, runtime: string }[];\r\n    /** æ åçº§ä¿¡æ¯ */\r\n    treeInfo?: TreeInfo;\r\n    displayType?: string;\r\n    displayInfo?: DisplayInfo;\r\n    title?: string;\r\n    navigation?: NavigationOptions;\r\n    valueField?: string;\r\n    textField?: string;\r\n    idField?: string;\r\n    /** å·²éæ©æ°æ®åè¡¨ */\r\n    selectedItems?: any;\r\n    /** æ¶èæ°æ® */\r\n    favoriteItems?: any[];\r\n    /** èªå®ä¹è¡æ ·å¼ */\r\n    customStyles?: {\r\n        row?: Array<CustomStyleData>,\r\n        cell?:Array<CustomStyleData>\r\n    }\r\n}\r\n\r\n/** ä¸ªæ§åæ°æ® */\r\nexport interface PersonalConfig {\r\n    tabIndex?: string;\r\n    favorite?: {\r\n        [lang: string]: any[];\r\n    };\r\n    quickSelected?: {\r\n        [lang: string]: any[];\r\n    };\r\n    size?: any;\r\n    selections?: any;\r\n    cascadeStatus?: string;\r\n    colSizeInfo?: {data: { [field: string]: number }, nav: {[field: string]: number}, fav: {[field: string]: number}};\r\n    [key: string]: any;\r\n}\r\n\r\nexport interface NavigationOptions extends LookupGridResult {\r\n    [key: string]: any;\r\n    displayType: 'List' | 'TreeList';\r\n    width: number;\r\n    idField?: string;\r\n    relations?: { groupField: string, helpField: string }[];\r\n    hover?: boolean;\r\n}\r\n\r\nexport interface LookupGridOptions extends LookupGridResult {\r\n    singleSelect?: boolean;\r\n    idField?: string;\r\n    uri?: string; // å¯ä»¥ä¸ºåæ°æ®IDãwebapi å°å\r\n    showFilterBar?: boolean;\r\n    pagination?: boolean;\r\n    pageIndex?: number;\r\n    pageSize?: number;\r\n    pageList?: number[];\r\n    total?: number;\r\n    width?: number;\r\n    height?: number;\r\n    hover?: boolean;\r\n}\r\n\r\nexport class DisplayInfo {\r\n    title?: string;\r\n    favorites?: string;\r\n    okText?: string;\r\n    cancelText?: string;\r\n    allColumns?: string;\r\n}\r\n\r\nexport const lookupGridDefaults: LookupGridOptions = {\r\n    singleSelect: true,\r\n    showFilterBar: true,\r\n    pagination: true,\r\n    pageIndex: 1,\r\n    pageSize: 10,\r\n    pageList: [10, 20, 30, 50, 100]\r\n};\r\n\r\nexport const displayInfoDefault = {\r\n    title: 'æ­¤å¤æ¾ç¤ºæ é¢',\r\n    favorites: 'æ¶èå¤¹',\r\n    okText: 'ç¡®å®',\r\n    cancelText: 'åæ¶',\r\n    allColumns: 'ææå'\r\n};\r\n\r\n/** å¸®å©åäºä»¶è¿åç±»å */\r\nexport interface PickingResult {\r\n    /** true: ç»§ç»­æå¼å¸®å©ï¼false: ä¸æå¼å¸®å©çªå£ */\r\n    showDialog: boolean;\r\n    /** æºå¸¦çä¸äºèªå®ä¹æ°æ®ï¼ç±ä¸å¡å¨æå¡å¨ç«¯å¸®å©åäºä»¶ä¸­å¤ç */\r\n    data?: any;\r\n    message?: any;\r\n}\r\n\r\nexport interface PickedResult {\r\n    closeDialog: boolean;\r\n    message?: any;\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-05-23 10:27:07\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-08-15 14:11:43\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { InjectionToken } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { LOOKUP_HTTP_PARAMS } from './RemoteParams';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\n\r\nexport interface ILookupHttpService {\r\n    context?: any;\r\n    /**\r\n     * æ ¹æ®æå®çå¸®å©åæ°æ®IDåç¸å³åæ°è·åæ°æ®\r\n     * @param uri å¸®å©åæ°æ®ID or Rest API\r\n     * @param data æå¡å¨ç«¯æ¥æ¶åæ° key/value\r\n     */\r\n    getData(uri: string, params?: LOOKUP_HTTP_PARAMS): Observable<LookupGridResult>;\r\n}\r\nexport const ServerSideToken = new InjectionToken<ILookupHttpService>('Lookup Grid HTTP service');\r\n","import { Injectable } from '@angular/core';\r\nimport { trim } from 'lodash-es';\r\nimport { CommonUtils } from '@farris/ui-common';\r\n\r\n@Injectable()\r\nexport class LookupDefaultMapping {\r\n\r\n    constructor(private utils: CommonUtils) {}\r\n\r\n    lookupFieldMap = (helpData, mapFields, dataObj) => {\r\n        if (mapFields) {\r\n            const helpFields = Object.keys(mapFields);\r\n            helpFields.forEach( (f: any) => {\r\n                let val = '';\r\n                if (helpData) {\r\n                    if (helpData instanceof Array) {\r\n                        val = helpData.map( (h: any) => {\r\n                            return this.utils.getValue(f, h);\r\n                        }).join(',');\r\n                    } else {\r\n                        val = this.utils.getValue(f, helpData);\r\n                    }\r\n\r\n                }\r\n\r\n                mapFields[f].split(',').forEach( (ff: any) => {\r\n                    const field = trim(ff);\r\n                    this.utils.setValue(dataObj, field, val);\r\n                });\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n}\r\n","import { Injectable, NgZone } from '@angular/core';\r\nimport { CommonUtils, RuntimeStateService } from '@farris/ui-common';\r\nimport { FilterRelation, FilterCondition, Compare, EntityFilter } from '@farris/ui-common/types';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { TreeInfo } from './lookup-grid-options';\r\n\r\n@Injectable()\r\nexport class LookupUtils {\r\n\r\n    constructor(private utils: CommonUtils, private rts: RuntimeStateService, private ngZone: NgZone) { }\r\n\r\n    setActiveLookupInstance(lookupIns: any) {\r\n        if (this.rts) {\r\n            this.rts.setLookupInstance(lookupIns);\r\n        }\r\n    }\r\n\r\n\r\n    destroy() {\r\n        this.rts.destroy();\r\n    }\r\n\r\n    pendingStart() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: true\r\n                }\r\n            });\r\n\r\n            // ç¦ç¨é¡µé¢çææé¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = 'none';\r\n        }\r\n    }\r\n\r\n    pendingEnd() {\r\n        if (this.rts) {\r\n            this.rts.updateFormState({\r\n                lookup: {\r\n                    pending: false\r\n                }\r\n            });\r\n\r\n            // æ¿æ´»é¼ æ äºä»¶\r\n            document.body.style['pointer-events'] = '';\r\n        }\r\n    }\r\n\r\n    getPathCode(data, treeInfo = null) {\r\n        const { dataField, pathField } =  treeInfo ;\r\n        if (dataField) {\r\n            return data[dataField][pathField];\r\n        } else {\r\n            return this.utils.getValue(pathField, data);\r\n        }\r\n    }\r\n    getLayerData(data, treeInfo = null ) {\r\n        const { dataField, layerField } = treeInfo;\r\n        if (dataField) {\r\n            return data[dataField][layerField];\r\n        } else {\r\n            return this.utils.getValue(layerField, data);\r\n        }\r\n    }\r\n\r\n\r\n    private createFilterCondition(field: string, value: string) {\r\n        return {\r\n            filterField: field,\r\n            value,\r\n            lbracket: '',\r\n            rbracket: '',\r\n            relation: FilterRelation.Or,\r\n            compare: Compare.Like\r\n        };\r\n    }\r\n\r\n    mergeCondition(condition: EntityFilter, fields: string[], searchData: { field: string, value: string }) {\r\n        if (!condition) {\r\n            condition = {\r\n                pagination: {\r\n                    pageIndex: 1,\r\n                    pageSize: 20\r\n                },\r\n                filterConditions: [],\r\n                sortConditions: []\r\n            };\r\n        } else {\r\n            condition = cloneDeep(condition);\r\n        }\r\n\r\n        const { field = '*', value = '' } = { ...searchData };\r\n\r\n        if (value) {\r\n            if (field === '*') {\r\n                if (fields && fields.length) {\r\n                    const searchConditions: FilterCondition[] = fields.map((f: string) => {\r\n                        return this.createFilterCondition(f, value);\r\n                    });\r\n\r\n                    if (searchConditions.length) {\r\n                        searchConditions[0].lbracket = '(';\r\n                        const lastSearchConditions = searchConditions[searchConditions.length - 1];\r\n                        lastSearchConditions.rbracket = ')';\r\n                        lastSearchConditions.relation = FilterRelation.Empty;\r\n                    }\r\n\r\n                    if (condition.filterConditions && condition.filterConditions.length) {\r\n                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                        condition.filterConditions = condition.filterConditions.concat(searchConditions);\r\n                    } else {\r\n                        condition.filterConditions = searchConditions;\r\n                    }\r\n                }\r\n            } else {\r\n                const searchCondition = this.createFilterCondition(field, value);\r\n                searchCondition.relation = FilterRelation.Empty;\r\n                if (condition.filterConditions && condition.filterConditions.length) {\r\n                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;\r\n                    condition.filterConditions.push(searchCondition);\r\n                } else {\r\n                    condition.filterConditions = [searchCondition];\r\n                }\r\n            }\r\n        }\r\n\r\n        return condition;\r\n    }\r\n\r\n    private canSelectable(n: any) {\r\n        if (n.hasOwnProperty('farris_selectable')) {\r\n            return !!n['farris_selectable'];\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /** å°æ°æ®è½¬æ å½¢ç»æ */\r\n    makeTreeWithParentID(data: any[], parentId, parentIdField = 'parentId', idField = 'id') {\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t),\r\n                parent: null,\r\n                parents: []\r\n            };\r\n            const id = t[idField];\r\n            nodes.set(id, node);\r\n            const PID = this.utils.getValue(parentIdField, t);\r\n            if (PID === parentId) {\r\n                result.push(node);\r\n            } else {\r\n                const parent = nodes.get(PID);\r\n                if (parent) {\r\n                    node.parent = PID;\r\n                    node.parents = [...parent.parents, PID];\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n        unattached.forEach(n => {\r\n            const pid = this.utils.getValue(parentIdField, n.data);\r\n            const parent = nodes.get(pid);\r\n            if (parent) {\r\n                n.parent = pid;\r\n                n.parents = [...parent.parents, pid];\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n\r\n    makeTree(data, treeInfo: TreeInfo) {\r\n        // const treeInfoField = treeInfo.dataField;\r\n        // const layerField = treeInfo.layerField;\r\n        // const pathField = treeInfo.pathField;\r\n\r\n        const nodes = new Map<string, any>();\r\n        const result = [];\r\n        const unattached = [];\r\n        data.forEach(t => {\r\n            const node = {\r\n                data: t,\r\n                children: [],\r\n                selectable: this.canSelectable(t)\r\n            };\r\n            const pathCode = this.getPathCode(t, treeInfo);\r\n            nodes.set(pathCode, node);\r\n\r\n            if (this.getLayerData(t, treeInfo) === 1) {\r\n                result.push(node);\r\n            } else {\r\n                const parentPathCode = pathCode.substr(0, pathCode.length - 4);\r\n                const parent = nodes.get(parentPathCode);\r\n                if (parent) {\r\n                    parent.children.push(node);\r\n                } else {\r\n                    unattached.push(node);\r\n                }\r\n            }\r\n        });\r\n\r\n\r\n        unattached.forEach(n => {\r\n            // const pathCode = n.data[treeInfoField][pathField];\r\n            const pathCode = this.getPathCode(n.data, treeInfo);\r\n            const parent = nodes.get(pathCode.substr(0, pathCode.length - 4));\r\n            if (parent) {\r\n                parent.children.push(n);\r\n            }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { IdService } from '@farris/ui-common';\r\nimport { Subject } from 'rxjs';\r\nimport { PersonalConfig } from './lookup-grid-options';\r\n\r\n\r\n@Injectable()\r\nexport class PersonalConfigService {\r\n    // ä¸ªæ§åéç½®\r\n    personalConf: PersonalConfig;\r\n\r\n    selectItemObser$ = new Subject();\r\n\r\n    displayType = 'LIST';\r\n\r\n    singleSelect = true;\r\n    idField: string;\r\n    textField: string;\r\n    mapFields: any;\r\n\r\n    // ä¸ªæ§åéç½®KEY\r\n    private _key = '';\r\n    _newKey = '';\r\n    get personalConfigKey() {\r\n        return this._key;\r\n    }\r\n    set personalConfigKey(val) {\r\n        if (val) {\r\n            this._key = this.buildKey(val);\r\n            if (this.controlID) {\r\n                this._newKey = this.buildKey(this.controlID + '_' + val);\r\n            } else {\r\n                this._newKey = this._key;\r\n            }\r\n        } else {\r\n            this._newKey = this.buildKey(this.controlID);\r\n        }\r\n    }\r\n\r\n    // ç»ä»¶ID\r\n    controlID = '';\r\n\r\n    constructor(private idService: IdService) {}\r\n\r\n    private buildKey(str) {\r\n        let prefix = '';\r\n        if (location.hash) {\r\n            const pathArr = location.hash.split('?');\r\n            prefix = pathArr ? pathArr[0] : '';\r\n        } else {\r\n            const pathArr  = location.pathname.split('/');\r\n            prefix = pathArr ? pathArr[pathArr.length - 1] : '';\r\n        }\r\n        return this.idService.encrypt(prefix + str);\r\n    }\r\n\r\n    initPersonalConf(obj) {\r\n        Object.assign(this, obj);\r\n    }\r\n\r\n    getPersonalData(key?: string): PersonalConfig {\r\n        if (key) {\r\n            this._key = key;\r\n        }\r\n\r\n        if (this.personalConfigKey) {\r\n            const conf = localStorage.getItem(this.personalConfigKey);\r\n\r\n            if (conf && conf !== 'undefined' && conf !== 'null') {\r\n                this.personalConf = conf ? JSON.parse(conf) : {};\r\n                this._updatePersonalConfig(this.personalConf);\r\n\r\n                if (this.controlID) {\r\n                    if (this._key !== this._newKey) {\r\n                        localStorage.removeItem(this._key);\r\n                    }\r\n                    this.savePersonalConfig(this.personalConf);\r\n                }\r\n\r\n                return this.personalConf;\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    getQuickSelected(localeId?: string): any {\r\n        const d = this.getPersonalData();\r\n        const qs =  d ? d.quickSelected : null;\r\n\r\n        if (localeId) {\r\n            if (qs) {\r\n                const items = qs[localeId];\r\n                if (items && items.length) {\r\n                    return items;\r\n                }\r\n            }\r\n            return null;\r\n        }\r\n        return qs;\r\n    }\r\n\r\n    getDialogSize() {\r\n        const d = this.getPersonalData();\r\n        return d ? d.size : null;\r\n    }\r\n\r\n    updatePersonalConfig(cfg: Partial<PersonalConfig>) {\r\n        const data = Object.assign(this.personalConf || {}, cfg);\r\n        this.savePersonalConfig(data);\r\n    }\r\n\r\n    savePersonalConfig(data: PersonalConfig) {\r\n        if (this._newKey) {\r\n            let _data = localStorage.getItem(this._newKey) as any;\r\n            if (_data) {\r\n                _data = JSON.parse(_data) as PersonalConfig;\r\n\r\n                if (_data.favorite) {\r\n                    if (!data.favorite) {\r\n                        data.favorite = _data.favorite;\r\n                    } else {\r\n                        Object.keys(_data.favorite).forEach((lang) => {\r\n                            data.favorite[lang] = data.favorite[lang] || [];\r\n                            if (_data.favorite[lang]) {\r\n                                const arr = Array.from(new Set([...data.favorite[lang], ..._data.favorite[lang]]));\r\n                                data.favorite[lang] = arr;\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            localStorage.setItem(this._newKey, JSON.stringify(data));\r\n            this.personalConf = data;\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    getActiveTabIndex(tabName?: string) {\r\n        const d = this.getPersonalData();\r\n        if (!tabName) {\r\n            return d && d.tabIndex ? d.tabIndex  : 'datalist';\r\n        }\r\n        return tabName;\r\n    }\r\n\r\n    updateQueckSelected(selectedRow: any, localeId: string) {\r\n        const quickItems = this.getQuickSelected(localeId);\r\n\r\n        if (quickItems && quickItems.length) {\r\n            const selectedIndex = [];\r\n            quickItems.forEach((element, index) => {\r\n                if (this.singleSelect) {\r\n                    if (element && selectedRow && element[this.idField] === selectedRow[this.idField]) {\r\n                        selectedIndex.push(index);\r\n                    }\r\n                } else {\r\n                    if (selectedRow) {\r\n                        selectedRow.forEach(item => {\r\n                            if (element && element[this.idField] === item[this.idField]) {\r\n                                selectedIndex.push(index);\r\n                            }\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n\r\n            selectedIndex.forEach(index => {\r\n                quickItems[index] = null;\r\n            });\r\n\r\n            this.personalConf.quickSelected[localeId] =\r\n                this.personalConf.quickSelected[localeId].filter(v => v !== null);\r\n            if (this.singleSelect) {\r\n                this.personalConf.quickSelected[localeId].unshift(selectedRow);\r\n            } else {\r\n                if (selectedRow) {\r\n                    selectedRow.forEach(element => {\r\n                        this.personalConf.quickSelected[localeId].unshift(element);\r\n                    });\r\n                }\r\n            }\r\n            this.personalConf.quickSelected[localeId].length =\r\n                this.personalConf.quickSelected[localeId].length > 5 ?\r\n                    5 : this.personalConf.quickSelected[localeId].length;\r\n        } else {\r\n            const _qs = this.personalConf.quickSelected || {};\r\n            let newData;\r\n            if (this.singleSelect) {\r\n                newData = Object.assign(_qs, { [localeId]: [selectedRow] });\r\n            } else {\r\n                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;\r\n                newData = Object.assign(_qs, { [localeId]: selectedRow });\r\n            }\r\n            this.personalConf.quickSelected = newData;\r\n        }\r\n\r\n        this.savePersonalConfig(this.personalConf);\r\n    }\r\n\r\n    /**\r\n     *  æ´æ°æ°æ®ç»æï¼ç°æä¸ªæ§åæ°æ®åè½¬ä¸º ä¸­æç¯å¢ä¸æ°æ®ï¼\r\n     */\r\n    _updatePersonalConfig(per: PersonalConfig) {\r\n        if (per) {\r\n            let flag = false;\r\n            // æ´æ°æ¶èæ°æ®\r\n            if (per.favorite && Array.isArray(per.favorite)) {\r\n                per.favorite = { 'zh-CHS': [...per.favorite] };\r\n                delete per.favorite;\r\n\r\n                flag = true;\r\n            }\r\n            // æ´æ°å¿«æ·å½å¥æ°æ®\r\n            if (per.selected) {\r\n                if (Array.isArray(per.selected)) {\r\n                    per.quickSelected = { 'zh-CHS': [...per.selected] };\r\n                }\r\n                delete per.selected;\r\n                flag = true;\r\n            }\r\n\r\n            if (flag) {\r\n                this.savePersonalConfig(per);\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\n\r\nexport class UtilService {\r\n\r\n    constructor(public instance: LookupGridComponent) {}\r\n\r\n\r\n}\r\n","import { TreeNode } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { TreeInfo } from '../lookup-grid-options';\r\n\r\nexport class TreeNodeHelper {\r\n    treeInfo: TreeInfo;\r\n    flatAllNodes = [];\r\n    constructor(private instance: LookupGridComponent) { }\r\n\r\n    getTreeInfo(treeNode: TreeNode) {\r\n        if (treeNode.data[this.treeInfo.dataField]) {\r\n            return treeNode.data[this.treeInfo.dataField];\r\n        }\r\n\r\n        const data = treeNode.data;\r\n        if (data && this.treeInfo.dataField) {\r\n\r\n            const treeInfoDataField = this.treeInfo.dataField.toLowerCase();\r\n            const dataField = Object.keys(treeNode.data).find(n => {\r\n                return n.toLowerCase() === treeInfoDataField;\r\n            });\r\n            if (dataField) {\r\n                return data[dataField];\r\n            } else {\r\n                this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n            }\r\n        } else {\r\n            this.instance.writeConsole(`æªæ¾å°æ å½¢ä¿¡æ¯æ°æ®å­æ®µã${this.treeInfo.dataField}ã`, 'error');\r\n        }\r\n    }\r\n\r\n    getTreeNodeLayer(treeNode: TreeNode) {\r\n        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];\r\n    }\r\n    /** æ´æ°èç¹çå±å¼ç¶æã æ ¹æ®ç»ä»¶ä¸­ expandLevel çå¼å³å®\r\n     * -1ï¼ä¸å±å¼ï¼0ï¼å¨é¨å±å¼ï¼>0 å±å¼å°æå®çº§æ°\r\n     */\r\n    updateTreeNodeExpanded(treeNodes: TreeNode[], treeInfo: TreeInfo = null) {\r\n        if (treeInfo) {\r\n            this.treeInfo = treeInfo;\r\n        } else {\r\n            this.treeInfo = this.instance.treeInfo;\r\n        }\r\n        const expandLevel = this.instance.expandLevel;\r\n        if (expandLevel === -1) {\r\n            return;\r\n        }\r\n        if (!this.flatAllNodes.length) {\r\n            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);\r\n        }\r\n\r\n        treeNodes.forEach((tn: TreeNode) => {\r\n            tn.expanded = this.shoudExpand(expandLevel, this.getTreeNodeLayer(tn));\r\n            if (this.isSelectNodeParent(tn)) {\r\n                tn.expanded = true;\r\n            }\r\n            if (tn.children && tn.children.length) {\r\n                this.updateTreeNodeExpanded(tn.children, treeInfo);\r\n            } else {\r\n                tn.leaf = true;\r\n            }\r\n        });\r\n    }\r\n\r\n    private treeData2Flat(parent, nodes, level, parentIds) {\r\n        const idField = this.instance.idField;\r\n        let arr = [];\r\n        if (nodes && nodes.length) {\r\n\r\n            nodes.forEach((node, index) => {\r\n                // node.parent = parent;\r\n\r\n                let parents = [];\r\n                if (parent) {\r\n                    const parentID = parent.data[idField];\r\n                    const _parents = parentIds || [];\r\n                    parents = parents.concat(_parents.map(n => n));\r\n                    parents.push(parentID);\r\n                }\r\n                const rowNode = {\r\n                    id: node.data[idField],\r\n                    node,\r\n                    level,\r\n                    parents,\r\n                };\r\n                arr.push(rowNode);\r\n                arr = arr.concat(this.treeData2Flat(node, node.children, level + 1, parents));\r\n            });\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    private shoudExpand(expandLevel: number, nodeLayer: number) {\r\n        if (expandLevel === -1) {\r\n            // -1 ä¸ºä¸å±å¼\r\n            return false;\r\n        } else if (expandLevel === 0) {\r\n            // 0 ä¸ºå¨é¨å±å¼\r\n            return true;\r\n        } else {\r\n            // æ²¡æå¯ç¨åå±å è½½ï¼éè¿å±å¼å±çº§ç¡®å®æ¯å¦å±å¼è¯¥èç¹\r\n            return nodeLayer <= expandLevel;\r\n        }\r\n    }\r\n\r\n    private isSelectNodeParent(treeNode) {\r\n        if (this.instance.navSelectedIds) {\r\n            const allParentIds: string[] = this.flatAllNodes.find(f => f.id === this.instance.navSelectedIds).parents;\r\n            if (allParentIds && allParentIds.length) {\r\n                return allParentIds.includes(treeNode.id);\r\n            }\r\n            return false;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getLeafNode(treeNode: TreeNode) {\r\n        if (treeNode && (!treeNode.children || !treeNode.children.length)) {\r\n            return treeNode;\r\n        } else {\r\n            if (treeNode.children.length === 1) {\r\n                return this.getLeafNode(treeNode.children[0]);\r\n            } else {\r\n                return treeNode.children;\r\n            }\r\n        }\r\n    }\r\n\r\n    flatTreeNodes(items, result = []) {\r\n        items = items || [];\r\n        return  items.reduce((c, n) => {\r\n            c.push(n);\r\n            if (n.children && n.children.length) {\r\n                this.flatTreeNodes(n.children, c);\r\n            }\r\n            return c;\r\n        }, result);\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { UserFavoriteData } from '../http/RemoteParams';\r\nimport { FavoriteAction, FavoriteIcon, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class FavoriteHelper {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    constructor(private instance: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.instance.lookupSelectionSer;\r\n    }\r\n\r\n    getFavoriteColumns(): any[] {\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn = Object.assign({}, item);\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = () => FavoriteIcon.delete;\r\n            }\r\n            return rtn;\r\n        });\r\n\r\n        this.instance.initColumnWidth(columns, 'fav');\r\n        return columns;\r\n    }\r\n\r\n    favoriteColumnFormatter = (v: any, data: any  ) => {\r\n        const f =  v ? FavoriteIcon.yes : FavoriteIcon.no;\r\n        if (this.instance.isTree()) {\r\n            const id = data[this.instance.idField];\r\n            if (id) {\r\n                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                const rn = tt.findRowNode(id);\r\n                if (rn) {\r\n                    if (rn.node.selectable) {\r\n                        return f;\r\n                    } else {\r\n                        return '';\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return f;\r\n    }\r\n\r\n    initPersonalInfo() {\r\n        if (this.instance.personalConfigService) {\r\n            const controlID = this.instance.el.nativeElement.id || this.instance.controlId;\r\n            if (!controlID) {\r\n                this.instance.writeConsole('LookupGrid - æªè®¾ç½®ç»ä»¶id, æ¶èåè½å°ä¸è½æ­£å¸¸ï¼è¯·è®¾ç½®ç»ä»¶id.');\r\n            }\r\n            const pcstr = this.instance.getLookupBindingFields();\r\n            this.instance.personalConfigService.controlID = controlID;\r\n            this.instance.personalConfigService.personalConfigKey = pcstr;\r\n\r\n            const conf = {\r\n                displayType: this.instance.displayType,\r\n                singleSelect: this.instance.singleSelect,\r\n                idField: this.instance.idField,\r\n                textField: this.instance.textField,\r\n                mapFields: Object.assign({}, this.instance.mapFields || {})\r\n            };\r\n\r\n            this.instance.personalConfigService.initPersonalConf(conf);\r\n\r\n            // ä¸ªæ§åéç½®çè®¢éäºä»¶å¤ç\r\n            this.listenPersonalConfigHandler();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * çå¬æ¶èTABé¡µä¸­ç¸å³äºä»¶ï¼\r\n     * æ°æ®éä¸­ï¼åæ¶éä¸­ï¼ç§»é¤æ¶èï¼åå»äºä»¶\r\n     */\r\n    initFavoriteComponentEvent(cmpRef: ComponentRef<any>) {\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = cmpRef.instance as DataTableComponent;\r\n                fdt.remoteSort = false;\r\n                fdt.selectedRow.subscribe(e => {\r\n                    if (this.instance.singleSelect) {\r\n                        this.lookupSelectionSer.clearSelections();\r\n                    }\r\n                    this.lookupSelectionSer.updateSelections(e.data);\r\n                });\r\n                fdt.unSelectRow.subscribe(e => {\r\n                    this.lookupSelectionSer.unSelect(e.data[this.instance.idField]);\r\n                });\r\n\r\n                if (!fdt.singleSelect) {\r\n                    fdt.checkAll.subscribe(e => {\r\n                        this.lookupSelectionSer.updateSelections(fdt.data, e);\r\n                    });\r\n                }\r\n\r\n                fdt.cellClick.subscribe((e: any) => {\r\n                    if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                        e.event.stopPropagation();\r\n                        // tslint:disable-next-line: no-string-literal\r\n                        const classList = e.event.target['classList'];\r\n                        if (classList.contains('f-lookup-unfavorite')) {\r\n                            if (this.instance.items) {\r\n                                this.instance.items.forEach(item => {\r\n                                    if (item[this.instance.idField] === e.row[this.instance.idField]) {\r\n                                        item[FAVORITE_FIELD_NAME] = false;\r\n                                    }\r\n                                });\r\n\r\n                                const dt = this.instance.componentRef.instance as DataTableComponent;\r\n                                if (dt) {\r\n                                    dt.loadData({\r\n                                        pageSize: this.instance.gridOptions.pageSize,\r\n                                        pageIndex: this.instance.gridOptions.pageIndex,\r\n                                        total: this.instance.gridOptions.total,\r\n                                        data: this.instance.gridOptions.items\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            this.instance.favoriteItems =\r\n                                this.instance.favoriteItems.filter(n => n[this.instance.idField] !== e.row[this.instance.idField]);\r\n\r\n                            this.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // åå»äºä»¶\r\n                fdt.rowDblClick.subscribe((rowData: any) => {\r\n                    if (this.instance.gridOptions.singleSelect) {\r\n                        this.instance.selectItem(rowData);\r\n                    }\r\n                });\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (cmpRef) {\r\n                    const ftt = cmpRef.instance as TreeTableComponent;\r\n                    ftt.remoteSort = false;\r\n                    ftt.nodeSelected.subscribe(e => {\r\n                        if (this.instance.singleSelect) {\r\n                            this.lookupSelectionSer.clearSelections();\r\n                        }\r\n                        this.lookupSelectionSer.updateSelections(e.node.data);\r\n                    });\r\n                    ftt.nodeUnChecked.subscribe(e => {\r\n                        if (e.nodes && e.nodes.length) {\r\n                            this.instance.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        } else if (e && e.node && e.node.data && e.node.data.id) {\r\n                            // const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                            // tt.unSelectNode(e.node.data.id);\r\n                            this.lookupSelectionSer.unSelect(e.node.data.id);\r\n                        }\r\n                    });\r\n\r\n                    ftt.nodeChecked.subscribe( e => {\r\n                        if (!this.instance.singleSelect) {\r\n                            if (e.nodes && e.nodes.length) {\r\n                                this.instance.multiSelMgr.updateSelections(e.nodes.map(n => n.data));\r\n                            } else {\r\n                                if (Array.isArray(e.node)) {\r\n                                    this.instance.multiSelMgr.updateSelections(e.node.map(n => n.data));\r\n                                } else {\r\n                                    this.instance.multiSelMgr.updateSelections([e.node.data]);\r\n                                }\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.cellClick.subscribe(row => {\r\n                        if (row.col.field === FAVORITE_FIELD_NAME) {\r\n                            row.event.stopPropagation();\r\n                            const classList = row.event.target['classList'];\r\n                            if (classList.contains('f-lookup-unfavorite')) {\r\n                                const _this = this.instance;\r\n                                (function every(items) {\r\n                                    if (!items) {\r\n                                        return;\r\n                                    }\r\n                                    let hasFinish = false;\r\n                                    items.forEach(item => {\r\n                                        if (hasFinish) {\r\n                                            return;\r\n                                        }\r\n                                        if (item.data[_this.idField] === row.node[_this.idField]) {\r\n                                            item.data[FAVORITE_FIELD_NAME] = false;\r\n                                            hasFinish = true;\r\n                                        } else if (item.children && item.children.length > 0) {\r\n                                            every(item.children);\r\n                                        }\r\n                                    });\r\n                                })(this.instance.items);\r\n                                const tt = this.instance.componentRef.instance as TreeTableComponent;\r\n                                tt.loadData(this.instance.items);\r\n\r\n                                this.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);\r\n                            }\r\n                        }\r\n                    });\r\n                    ftt.dblClick.subscribe((treeNode: TreeNode) => {\r\n                        if (this.instance.gridOptions.singleSelect && treeNode.selectable) {\r\n                            if (this.instance.okButton) {\r\n                                this.instance.okButton.nativeElement.click();\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    ftt.checkAll.subscribe( e => {\r\n                        const data = e.instance.checkeds.map(n => n.data);\r\n                        this.instance.multiSelMgr.updateSelections(data);\r\n                        this.instance.checkedChange.emit({ data, isCheck: true  });\r\n                    });\r\n                    ftt.unCheckAll.subscribe(() => {\r\n                        // this.instance.multiSelMgr.clear();\r\n                        const nodeItems = ftt.state.rowNodes.map(n => n.node.data);\r\n                        this.lookupSelectionSer.updateSelections(nodeItems, false);\r\n                        this.instance.checkedChange.emit({ data: [], isCheck: false  });\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private getFavoritData() {\r\n        if (this.instance.personalConf) {\r\n            const favData = this.instance.personalConf.favorite;\r\n            const _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];\r\n            return _data;\r\n        }\r\n        return [];\r\n    }\r\n\r\n    getFavoritIds() {\r\n        return this.getFavoritData();\r\n    }\r\n\r\n    _loadFavoriteData(data = null) {\r\n        const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n        this.loadFavoriteDatatable(fdt, data);\r\n        fdt.cd.markForCheck();\r\n        this.instance.closeLoading();\r\n    }\r\n\r\n    // å è½½æ¶ègridæ°æ®\r\n    loadFavoritesData(res = null) {\r\n        const favIds = this.getFavoritIds();\r\n        switch (this.instance.displayType) {\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n            case LookupGridDisplayType.List: {\r\n                const fdt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                if (this.instance.favoriteDataFrom === 'locale') {\r\n                    if (res) {\r\n                        this._loadFavoriteData(res.items);\r\n                    } else {\r\n                        // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                        //     if (resData) {\r\n                        //         this._loadFavoriteData(resData.items);\r\n                        //     }\r\n                        //     this.instance.closeLoading();\r\n                        // });\r\n                    }\r\n                } else {\r\n                    const favData = this.getFavoritData();\r\n                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);\r\n                }\r\n                break;\r\n            }\r\n            case LookupGridDisplayType.TreeList: {\r\n                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {\r\n                    const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                    this.bindFavTreetable(ftt);\r\n\r\n                    if (this.instance.favoriteDataFrom === 'locale') {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items || [], ftt);\r\n                        } else {\r\n                            // this.instance.httpMgr.getFavoriteData(favIds).subscribe(resData => {\r\n                            //     if (resData) {\r\n                            //         const items = resData.items;\r\n                            //         this.loadFavoriteForTreeTable(items, ftt);\r\n                            //     }\r\n                            //     this.instance.closeLoading();\r\n                            // });\r\n                        }\r\n                    } else {\r\n                        if (res) {\r\n                            this.loadFavoriteForTreeTable(res.items, ftt);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private loadFavoriteDatatable(fdt: DataTableComponent, data?: any) {\r\n        if (data !== undefined) {\r\n            this.instance.favoriteItems = data;\r\n        }\r\n\r\n        if (fdt.columns && !fdt.columns.length) {\r\n            fdt.columns = this.instance.favoriteColumns;\r\n        }\r\n\r\n        fdt.loadData({\r\n            total: 0,\r\n            pageSize: 20,\r\n            pageIndex: 1,\r\n            data: this.instance.favoriteItems\r\n        });\r\n\r\n\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n        fdt.cd.detectChanges();\r\n    }\r\n\r\n\r\n    private bindFavTreetable(ftt: TreeTableComponent) {\r\n        ftt.allColumnsTitle = this.instance.allColumnsTitle;\r\n        ftt.idField = this.instance.idField;\r\n\r\n        const columns = this.instance.gridOptions.columns.map(item => {\r\n            const rtn: any = { ...item };\r\n            if (item.field === FAVORITE_FIELD_NAME) {\r\n                rtn.formatter = (v: any, data: any): any => {\r\n                    const favids = this.getFavoritIds();\r\n                    if (favids && favids.length) {\r\n                        const index = favids.findIndex(el => el === data[this.instance.idField]);\r\n                        if (index >= 0) {\r\n                            return FavoriteIcon.delete;\r\n                        }\r\n                    }\r\n                    return '';\r\n                };\r\n            }\r\n            return rtn;\r\n        });\r\n        this.instance.initColumnWidth(columns, 'fav');\r\n        this.instance.favoriteColumns = columns;\r\n        ftt.columns = columns;\r\n\r\n\r\n        if (this.instance.gridOptions.treeInfo) {\r\n            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;\r\n        }\r\n\r\n        if (!ftt.singleSelect) {\r\n            ftt.checkOnSelect = true;\r\n            ftt.selectOnCheck = true;\r\n            ftt.showCheckbox = true;\r\n\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.instance.enableCascade) {\r\n                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);\r\n            } else {\r\n                ftt.cascadeCheck = false;\r\n                ftt.cascadeDown = false;\r\n                ftt.cascadeUp = false;\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkNodeIsLeaf(nodes: any ) {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n    \r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeIsLeaf(node.children);\r\n                } else {\r\n                    node.leaf = true;\r\n                }\r\n    \r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    initFavoriteTreeData(items) {\r\n        const treeInfo = this.instance.gridOptions.treeInfo;\r\n\r\n        if (treeInfo && !treeInfo['treeDataIsInit']) {\r\n            if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                items = this.instance.lookupUtils.makeTree(items, treeInfo);\r\n            } else {\r\n                items = this.instance.lookupUtils.makeTreeWithParentID(\r\n                    items,\r\n                    '',\r\n                    treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}`: treeInfo.parentField,\r\n                    this.instance.idField\r\n                );\r\n            }\r\n        }\r\n\r\n        // return this.instance.checkNodeCanBeSelect(items, true);\r\n        return this.checkNodeIsLeaf(items);\r\n    }\r\n\r\n    loadFavoriteForTreeTable(items, ftt: any) {\r\n        items = this.initFavoriteTreeData(items);\r\n        this.instance.favoriteItems = items;\r\n        ftt.loadData(items);\r\n        ftt.expandAll();\r\n        this.instance.selectionMgr.selectCurrentValue();\r\n\r\n        return items;\r\n    }\r\n\r\n    // æ´æ°åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n    updateFavoritesStatus(data: any[]) {\r\n\r\n        if (!data || !this.instance.useFavorite) {\r\n            return;\r\n        }\r\n\r\n        const favIds = this.getFavoritIds();\r\n\r\n        if (favIds && favIds.length) {\r\n            // å¤çæ°æ®åè¡¨ä¸­çæ¶èæ°æ®æ è¯\r\n            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {\r\n                data.map(item => {\r\n                    if (favIds && favIds.length && favIds.find(v => v === item[this.instance.idField])) {\r\n                        item[FAVORITE_FIELD_NAME] = true;\r\n                    }\r\n                });\r\n            } else {\r\n                const _this = this.instance;\r\n                (function each(_data) {\r\n                    _data.forEach(item => {\r\n                        if (favIds && favIds.length && favIds.find(v => v === item.data[_this.idField])) {\r\n                            item.data[FAVORITE_FIELD_NAME] = true;\r\n                        }\r\n                        if (item.children && item.children.length > 0) {\r\n                            each(item.children);\r\n                        }\r\n                    });\r\n                })(data);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private _updateFavorites(value: any, action, data) {\r\n        const localeID = this.instance.localService.localeId;\r\n        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};\r\n        const items = value.filter(n => !n['_addtional_']);\r\n        const newVal = items.map(n => n[this.instance.idField]).filter(n => n !== null && n !== undefined);\r\n\r\n        const favItems = this.instance.personalConf.favorite[localeID] || [];\r\n        this.instance.personalConf.favorite[localeID] = Array.from(new Set([...favItems , ...newVal]));\r\n\r\n        if (action === FavoriteAction.delete && data) {\r\n            this.instance.personalConf.favorite[localeID] = this.instance.personalConf.favorite[localeID].filter(n => n !== data[this.instance.idField]);\r\n        }\r\n\r\n        return this.instance.personalConf.favorite[localeID];\r\n    }\r\n\r\n    // æ¶èæ°æ®ç®¡ç\r\n    private listenPersonalConfigHandler() {\r\n        this.lookupSelectionSer.favoriteItems$.subscribe(n => {\r\n            if (!this.instance.favoritesComponentRef) {\r\n                return;\r\n            }\r\n\r\n            const { items, action, data } = n;\r\n            const favids = this._updateFavorites(items, action, data);\r\n\r\n            this.instance.httpMgr.submitFavoriteData(action);\r\n\r\n            if (this.instance.displayType === LookupGridDisplayType.List || this.instance.displayType.includes('NAV')) {\r\n                const dt = this.instance.favoritesComponentRef.instance as DataTableComponent;\r\n                this.loadFavoriteDatatable(dt, items);\r\n            } else if (this.instance.displayType === LookupGridDisplayType.TreeList) {\r\n                const ftt = this.instance.favoritesComponentRef.instance as TreeTableComponent;\r\n                // const favids = items.map(d => d.id);\r\n                this.instance.showLoading();\r\n                this.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe(resData => {\r\n                    if (resData) {\r\n                        const _items = resData.items;\r\n                        this.loadFavoriteForTreeTable(_items, ftt);\r\n                    } else {\r\n                        this.instance.favoriteItems = [];\r\n                        ftt.loadData([]);\r\n                    }\r\n                    this.instance.closeLoading();\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\n\r\nexport class SelectionManager {\r\n    constructor(private ins: LookupGridComponent) {\r\n\r\n    }\r\n\r\n    destroy() {\r\n    }\r\n\r\n    getBindingData() {\r\n        let jsonData = this.ins.bindingData;\r\n        if (\r\n            this.ins.ngControl &&\r\n            this.ins.ngControl.formDirective &&\r\n            this.ins.ngControl.formDirective.form &&\r\n            this.ins.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ins.ngControl.formDirective.form.bindingData;\r\n            jsonData = bindingData;\r\n\r\n            if (bindingData.getObject) {\r\n                jsonData = bindingData.getObject().toJSON();\r\n            }\r\n        }\r\n        return jsonData;\r\n    }\r\n\r\n    initDisplayValue() {\r\n        const jsonData = this.getBindingData();\r\n        if (jsonData && this.ins.mapFields) {\r\n            const idField = this.ins.idField;\r\n            let targetField = this.ins.mapFields[idField];\r\n\r\n            if (targetField) {\r\n                if (targetField.indexOf(',') > -1 ) {\r\n                    targetField = targetField.split(',')[0];\r\n                }\r\n\r\n                const val = this.ins.utils.getValue(targetField, jsonData);\r\n                if (val) {\r\n                    this.ins.displayValue = val;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private _clearSelections() {\r\n        const { cmpRefInstance: t } = this.getDataCmpInstance();\r\n        if (t) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                t.clearAll(false);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                t.dtBody.selectedRowIndex = -1;\r\n                t.dtBody.selections = undefined;\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¸®å©çªå£æå¼åï¼æ ¹æ® displayValue éä¸­æ°æ®\r\n     */\r\n    selectCurrentValue(selectedIds = []) {\r\n\r\n        if (!this.ins.enableToSelect) {\r\n            return;\r\n        }\r\n\r\n\r\n        const { cmpRefInstance: t, items } = this.getDataCmpInstance();\r\n        if (!t || !items || !items.length) {\r\n            return;\r\n        }\r\n\r\n        this._clearSelections();\r\n\r\n        if (!selectedIds || !selectedIds.length) {\r\n            const selectedRows = this.ins.lookupSelectionSer.getSelections();\r\n            if (selectedRows.length) {\r\n                selectedIds = selectedRows.map(n => n[this.ins.idField]);\r\n            }\r\n        }\r\n\r\n        // const _ids = this.getSelectedIds();\r\n        // selectedIds = selectedIds.concat(_ids);\r\n        // selectedIds = Array.from(new Set(selectedIds));\r\n\r\n        if (selectedIds && selectedIds.length) {\r\n            if (this.ins.isTree()) {\r\n                // æ è¡¨\r\n                this.selected4Treetable(t, selectedIds);\r\n                if (!t.cdRef.destroyed) {\r\n                    t.cdRef.detectChanges();\r\n                }\r\n            } else {\r\n                // åè¡¨\r\n                this.selected4Datatable(t, items, selectedIds);\r\n                if (!t.cd.destroyed) {\r\n                    t.cd.detectChanges();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getDataCmpInstance() {\r\n        let ref = null;\r\n        let items = null;\r\n        if (this.ins.activeTab === 'datalist') {\r\n            if (this.ins.isTree()) {\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');\r\n                items = (ref as TreeTableComponent).serializedValue;\r\n            } else {\r\n                items = this.ins.items;\r\n                ref = this.ins.lookupCmpMgr.getComponentInstance();\r\n            }\r\n        } else if (this.ins.activeTab === 'favorite') {\r\n            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');\r\n            items = this.ins.favoriteItems;\r\n        }\r\n        return { cmpRefInstance: ref, items };\r\n    }\r\n\r\n    private selected4Datatable(t: any, items: any, values: any) {\r\n        if (this.ins.singleSelect) {\r\n            items.forEach((item, index) => {\r\n                if (item[this.ins.idField] === values[0]) {\r\n                    if (!t.dtBody.isSelected(item)) {\r\n                        t.dtBody.selectedRowIndex = -1;\r\n                        t.dtBody.selectedRow('', index, item);\r\n                    }\r\n                }\r\n            });\r\n        } else {\r\n            // const values = this.getSelectedIds();\r\n            values.forEach(id => {\r\n                const r = items.find(n => n[this.ins.idField] == id);\r\n                if (r) {\r\n                    t.checkRow(id);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private selected4Treetable(t: any, valueArr: any) {\r\n        if (this.ins.singleSelect) {\r\n            t.selectNode(valueArr[0], false, false);\r\n        } else {\r\n            // const valueArr = this.getSelectedIds();\r\n            t.checkedNodes(valueArr, false, false, true);\r\n            t.selectNodes(valueArr);\r\n        }\r\n    }\r\n\r\n    getSelectedIds() {\r\n        let values = [];\r\n        const s = this.ins.multipleChoiceSeparator; // å¤éåéç¬¦\r\n        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {\r\n            values = this.ins.displayValue.split(s);\r\n        } else {\r\n            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {\r\n                values = [this.ins.displayValue];\r\n            }\r\n        }\r\n\r\n        // // å¯ç¨æ¾ç¤ºå¤éåè¡¨\r\n        // if (this.ins.showSelected) {\r\n        //     const rows = this.ins.lookupSelectionSer.getSelections();\r\n        //     if (rows && rows.length) {\r\n        //         values = rows.map(n => n[this.ins.idField]);\r\n        //     }\r\n        // }\r\n\r\n        return values;\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { DataTableComponent } from '@farris/ui-datatable';\r\nimport { of } from 'rxjs';\r\nimport { catchError, take, tap } from 'rxjs/operators';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\n\r\nexport class DataTableEventManager {\r\n\r\n    private lookupSelectionSer: LookupSelectionService;\r\n\r\n    private _sortState = null;\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    conditionsChange(conditions) {\r\n        this.ins.conditions = conditions;\r\n        if (conditions && conditions.length === 1 && conditions[0].code == '*') {\r\n            this.ins.conditions = [];\r\n            this.onSearch({ field: '*', value: conditions[0].value });    \r\n        } else {\r\n            this.onSearch();\r\n        }\r\n    }\r\n\r\n    onSearch($event: { field: string; value: string } = { field: '*', value: '' }) {\r\n        if ($event && $event.field !== '*' && !$event.value) {\r\n            this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            return;\r\n        }\r\n\r\n        const p = {\r\n            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },\r\n            search: $event\r\n        };\r\n\r\n        if (this._sortState) {\r\n            const {sortName, sortOrder} = this._sortState;\r\n            if (sortName) {\r\n                p['sortName'] = sortName;\r\n                p['sortOrder'] = sortOrder;\r\n            }\r\n        }\r\n\r\n        if (this.ins.uri) {\r\n            if (!this.ins.searching) {\r\n                this.ins.searching = true;\r\n\r\n                if (this.ins['navNodePathCode']) {\r\n                    p['navNodePathCode'] = this.ins['navNodePathCode'];\r\n                }\r\n\r\n                this.ins.httpMgr.getData(p, 'list').pipe(\r\n                    catchError(err => {\r\n                        this.ins.searching = false;\r\n                        return of({ \"_ERROR_\": err });\r\n                    }),\r\n                    tap(() => {\r\n                        this.ins.searching = false;\r\n                    })\r\n                ).subscribe(\r\n                    data => {\r\n                        this.ins.searching = false;\r\n                        this.ins.closeLoading();\r\n                        if (!data['_ERROR_']) {\r\n                            this._loadData(data);\r\n                        } else {\r\n                            throw new Error(data['_ERROR_']);\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        } else {\r\n            if (this.ins.enableMultiFieldSearch) {\r\n                this.ins.query.emit({ conditions: this.ins.conditions, instance: this.ins })\r\n            } else {\r\n                this.ins.search.emit(p);\r\n            }\r\n        }\r\n    }\r\n\r\n    private _loadData(data: LookupGridResult) {\r\n        const self = this.ins;\r\n        self.closeLoading();\r\n        self.favHelper.updateFavoritesStatus(data.items);\r\n        self.loadDataTableData(data);\r\n        // éä¸­æ°æ®\r\n        this.ins.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    bindDataTableEvent() {\r\n        const self = this.ins;\r\n        const dt = self.componentRef.instance as DataTableComponent;\r\n\r\n     \r\n        dt.selectedRow.subscribe((e: any) => {\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: true });\r\n            this.lookupSelectionSer.updateSelections([e.data]);\r\n            dt.cd.detectChanges();\r\n        });\r\n    \r\n\r\n        dt.unSelectRow.subscribe(e => {\r\n            this.lookupSelectionSer.unSelect(e.data[self.idField]);\r\n            this.ins.checkedChange.emit({ data: [e.data], isCheck: false });\r\n        });\r\n\r\n        dt.checkAll.subscribe((e: boolean) => {\r\n            this.lookupSelectionSer.updateSelections(dt.data, e);\r\n            this.ins.checkedChange.emit({ data: dt.data, isCheck: e });\r\n        });\r\n\r\n        dt.pageChanged.subscribe((e: any) => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe((data: LookupGridResult) => {\r\n                    this._loadData(data);\r\n                });\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe(e => {\r\n            if (self.uri) {\r\n                self.httpMgr.getData(e, 'list').subscribe(\r\n                    data => {\r\n                        this._loadData(data);\r\n                    },\r\n                    err => {\r\n                        self.closeLoading();\r\n                    }\r\n                );\r\n            } else {\r\n                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));\r\n            }\r\n        });\r\n\r\n        dt.search.subscribe((e: any) => {\r\n            // if (JSON.stringify(self._searchState || {}) !== JSON.stringify(e || {})) {\r\n            //     this.ins.searching = false;\r\n            // }\r\n            self._searchState = {...(e || {})};\r\n            this.onSearch(e);\r\n        });\r\n\r\n        dt.searchValueChange.subscribe((e: any) => {\r\n            if (e && e.value) {\r\n                self._searchState = {...e};\r\n            } else {\r\n                self._searchState = null;\r\n            }\r\n        });\r\n\r\n        // åå»äºä»¶\r\n        dt.rowDblClick.subscribe((rowData: any) => {\r\n            if (self.gridOptions.singleSelect) {\r\n                // this.lookupSelectionSer.updateSelections([rowData]);\r\n                self.selectItem(rowData);\r\n            }\r\n        });\r\n\r\n        // æ¶èäºä»¶\r\n        if(!dt.cellClick.observers.length) {\r\n            dt.cellClick.subscribe((e: any) => {\r\n                if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                    const classList = e.event.target['classList'];\r\n                    if (classList.contains('f-lookup-favorite')) {\r\n                        e.event.stopPropagation();\r\n                        self.items.forEach(item => {\r\n                            const id = self.utils.getValue(self.idField, item);\r\n                            if (id === self.utils.getValue(self.idField, e.row)) {\r\n                                item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];\r\n                            }\r\n                        });\r\n                        dt.loadData({\r\n                            pageSize: self.gridOptions.pageSize,\r\n                            pageIndex: self.gridOptions.pageIndex,\r\n                            total: self.gridOptions.total,\r\n                            data: self.gridOptions.items\r\n                        });\r\n\r\n                        // æ´æ°æ¶èæ°æ®\r\n                        const faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;\r\n\r\n                        if (faction ===  FavoriteAction.add) {\r\n                            this.ins.favoriteItems = [...this.ins.favoriteItems, e.row];\r\n                        } else {\r\n                            this.ins.favoriteItems = this.ins.favoriteItems.filter(n => {\r\n                                return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);\r\n                            });\r\n                        }\r\n\r\n                        this.lookupSelectionSer.updateFavoriteData(e.row, faction);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n\r\n        dt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any }) => {\r\n\r\n            this._sortState = sort;\r\n\r\n            if (!this.ins.remoteSort) {\r\n                return;\r\n            }\r\n\r\n            const { sortName, sortOrder } = { ...sort };\r\n\r\n            const col = this.ins.columns.find(n => n.field === sortName);\r\n\r\n            const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n            const param = {\r\n                sortName: _sortName,\r\n                sortOrder,\r\n                search: self._searchState,\r\n                pageInfo: {\r\n                    pageSize: self.pageSize,\r\n                    pageIndex: 1\r\n                }\r\n            };\r\n\r\n            self.httpMgr.getData(param, 'search').subscribe(d => {\r\n                self.loadDataTableData(d);\r\n                self.closeLoading();\r\n                // éä¸­æ°æ® TFS 615008\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            });\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe(() => {\r\n            self._searchState = null;\r\n            this.onSearch();\r\n        });\r\n\r\n        dt.cellStyler = (val: any) => {\r\n            const { field } = val;\r\n            if (field === FAVORITE_FIELD_NAME) {\r\n                return {\r\n                    'text-overflow': 'unset'\r\n                };\r\n            }\r\n\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n","import { EMPTY, of } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { LookupGridResult, PickingResult } from '../lookup-grid-options';\r\n\r\n\r\n\r\n /** æ£æ¥å¸®å©è¾å¥æ¡å¼åååè¿åçæ¥è¯¢ç»æ */\r\nfunction checkSearchResult(data = null) {\r\n    if (this.searchOnServer) {\r\n        // this._searchResult = data;\r\n        // this.showDialog();\r\n        this.isShow = true;\r\n    } else {\r\n        if (data === false) {\r\n            this.cancelSelect();\r\n        } else {\r\n            this.setModelValue(this.displayText);\r\n            this.runDictPickedEvent(null);\r\n        }\r\n    }\r\n}\r\n\r\nexport function onTextChanged() {\r\n\r\n    const self = this;\r\n\r\n    const isPending = () => {\r\n        return this.lookupUtils.rts.getFormState('lookup.pending');\r\n    };\r\n\r\n    const searchData = (e) => {\r\n\r\n        if (this.isShow) {\r\n            return;\r\n        }\r\n\r\n        if (this.isTextChange && this.displayText && (!this.nosearch || e.originalEvent) && !isPending()) {\r\n            this.lookupUtils.pendingStart();\r\n\r\n            this.dictPickingSubscription = this.dictPicking({\r\n                instance: this\r\n            }).pipe(\r\n                switchMap((pr: PickingResult) => {\r\n                    let o = true;\r\n                    if (pr === undefined || pr === null) {\r\n                        o = true;\r\n                    }\r\n\r\n                    if (typeof pr === 'boolean') {\r\n                        o = pr;\r\n                    }\r\n\r\n                    if (typeof pr === 'object') {\r\n                        if (pr.showDialog === undefined) {\r\n                            o = true;\r\n                        } else {\r\n                            o = pr.showDialog;\r\n                        }\r\n\r\n                        if (pr.data) {\r\n                            /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                            this.customData = pr.data;\r\n                        }\r\n                    }\r\n\r\n                    if (o) {\r\n                        return this.httpMgr.getData(\r\n                            {\r\n                                search: {\r\n                                    field: '*',\r\n                                    value: this.displayText,\r\n                                    type: 'equal'\r\n                                }\r\n                            },\r\n                            'search'\r\n                        );\r\n                    } else {\r\n                        return of({ SHOWDIALOG: o, MESSAGE:  pr.message || '' });\r\n                    }\r\n                })\r\n            ).subscribe(\r\n                (data: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    if (data.hasOwnProperty('SHOWDIALOG')) {\r\n                        if (data.SHOWDIALOG && data.MESSAGE) {\r\n                            this.notifyService.warning(data.MESSAGE);\r\n                        }\r\n\r\n                        return;\r\n                    }\r\n\r\n                    if (data.items && data.items.length === 1 && (!data.items[0].children || !data.items[0].children.length)) {\r\n                        let rowdata = data.items[0];\r\n                        if (this.isTree()) {\r\n                            const leafNode = this.treeNodeHelper.getLeafNode(rowdata);\r\n\r\n                            let isOnlySelectLeaf = false;\r\n\r\n                            if (!this.treeInfo) {\r\n                                this.setTreeInfo(data);\r\n                            }\r\n\r\n                            if (typeof this.treeInfo.onlySelectLeaf === 'boolean' ) {\r\n                                isOnlySelectLeaf = this.treeInfo.onlySelectLeaf;\r\n                            } else if (typeof this.treeInfo.onlySelectLeaf === 'string') {\r\n                                if (this.treeInfo.onlySelectLeaf === 'yes') {\r\n                                    isOnlySelectLeaf = true;\r\n                                } else if (this.treeInfo.onlySelectLeaf === 'no') {\r\n                                    isOnlySelectLeaf = false;\r\n                                } else {\r\n                                    if (this.treeInfo.onlySelectLeaf === 'default') {\r\n                                        isOnlySelectLeaf = data.treeInfo.onlySelectLeaf;\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (isOnlySelectLeaf && !leafNode.leaf) {\r\n                                // this.displayText = '';\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            }\r\n                            \r\n\r\n                            if (Array.isArray(leafNode)) {\r\n                                checkSearchResult.bind(self, data)();\r\n                                return;\r\n                            } else {\r\n                                rowdata = leafNode.data;\r\n                            }\r\n                        }\r\n                        if (!this.singleSelect) {\r\n                            rowdata = [ rowdata ];\r\n                        }\r\n                        this.selectItem(rowdata);\r\n\r\n                        this.dialogClosed.emit();\r\n                    } else {\r\n                        checkSearchResult.bind(self, data)();\r\n                    }\r\n                }, (err: any) => {\r\n                    this.closeLoading();\r\n                    this.lookupUtils.pendingEnd();\r\n                    this.messagerService.error(err ? err.Message : err);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    let inputBlurHandler = null;\r\n\r\n    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {\r\n        this.lookupUtils.setActiveLookupInstance(this);\r\n        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData );\r\n    }\r\n\r\n    if (this.inputGroup) {\r\n        this.inputGroup.enterHandle.subscribe( searchData);\r\n\r\n        this.inputGroup.keydownHandle.subscribe((e: any) => {\r\n            let canOpen = false;\r\n            if (e.code === 'ArrowRight') {\r\n\r\n                if (this.quickSelect && !this.quickSelect.enable) {\r\n                    this.writeConsole('å¯ç¨å¿«æ·éæ©åï¼å³æ¹åé®ç¦ç¨æå¼å¸®å©', 'warn');\r\n                    return;\r\n                }\r\n\r\n                if (this.editable) {\r\n                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;\r\n                } else {\r\n                    canOpen = true;\r\n                }\r\n            } else {\r\n                canOpen = e.code === this.shortcutKey.open;\r\n            }\r\n            if (canOpen) {\r\n                e.stopPropagation();\r\n                e.preventDefault();\r\n                this.showDialog();\r\n            }\r\n        });\r\n    }\r\n\r\n    return inputBlurHandler;\r\n\r\n}\r\n","import { TreeTableComponent, TreeNode } from '@farris/ui-treetable';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LOAD_DATA_TYPE, LookupGridResult } from '../lookup-grid-options';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { Observable, of, Subject } from 'rxjs';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { take, tap, catchError } from 'rxjs/operators';\r\nimport { LookupSelectionService } from './lookup-selection.service';\r\nimport { FilterCondition } from '@farris/ui-common/types';\r\n\r\n\r\nexport class TreeTableEventManager {\r\n    private lookupSelectionSer: LookupSelectionService;\r\n    private _sortState = null;\r\n        /**\r\n     * æ è¯å½åæ°æ®æ¯å¦æ¥è¯¢ç»æ\r\n     */\r\n    private IS_SEARCH_RESULT = false;\r\n\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n        this.lookupSelectionSer = this.ins.lookupSelectionSer;\r\n    }\r\n\r\n    conditionsChange(conditions) {\r\n        this.ins.conditions = conditions;\r\n        if (this.ins.uri) {\r\n            if (conditions && conditions.length === 1 && conditions[0].code == '*') {\r\n                this.ins.conditions = [];\r\n                return this.searchTreeData({ field: '*', value: conditions[0].value });    \r\n            }\r\n            return this.searchTreeData({ field: '*', value: '' });\r\n        } else {\r\n            this.ins.query.emit({ conditions, instance: this.ins });\r\n        }\r\n    }\r\n\r\n    searchTreeData(search: { field: string; value: string }) {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        // å¤æ­uri ååºsearch.emit();\r\n        if (this.ins.searching) {\r\n            return;\r\n        } else {\r\n            this.ins.searching = true;\r\n        }\r\n\r\n        this.ins.showLoading();\r\n        if (tt&& tt.psRef && tt.psRef.directiveRef) {\r\n            tt.psRef.directiveRef.scrollToTop(0);\r\n        }\r\n        return this.ins.httpMgr.getData({ search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(\r\n            tap(() => {\r\n                this.ins.searching = false;\r\n            }),\r\n            catchError((err) => {\r\n                this.ins.searching = false;\r\n                return of(err);\r\n            })\r\n        ).subscribe(resData => {\r\n            this.ins.closeLoading();\r\n            if (resData) {\r\n                // this.ins.items = resData.items;\r\n                tt.clearAll();\r\n\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (!treeInfo['treeDataIsInit']) {\r\n                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {\r\n                        this.ins.items = this.ins.lookupUtils.makeTree(this.ins.items, treeInfo);\r\n                    } else {\r\n                        this.ins.items = this.ins.lookupUtils.makeTreeWithParentID(\r\n                            this.ins.items,\r\n                            '',\r\n                            treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}` : treeInfo.parentField,\r\n                            this.ins.idField\r\n                        );\r\n                    }\r\n                }\r\n\r\n\r\n                const checkNodes = (nodes): TreeNode[] => {\r\n                    if (nodes && nodes.length) {\r\n                        return nodes.map((node: TreeNode) => {\r\n                            if (node.hasOwnProperty('addtional')) {\r\n                                node.selectable = !node['addtional'];\r\n                            }\r\n\r\n                            if (node.children && node.children.length) {\r\n                                checkNodes(node.children);\r\n                            } else {\r\n                                if (this._isLoadAllTreeData(tt) && (!search || search.value === '' || search.value === undefined)) {\r\n                                    node.leaf = true;\r\n                                }\r\n                            }\r\n                            return node;\r\n                        });\r\n                    }\r\n                    return nodes;\r\n                };\r\n\r\n                const _nodes = checkNodes(resData.items);\r\n                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {\r\n                    _nodes[0].expanded = true;\r\n                    _nodes[0].children = this.ins.expandFirstNode(_nodes[0].children);\r\n                }\r\n                this.ins.items = _nodes;\r\n\r\n\r\n                // å è½½æ¶èæ°æ®\r\n                if (this.ins.useFavorite) {\r\n                    // æ´æ°æ°æ®çæ¶èç¶æ\r\n                    this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                }\r\n\r\n                tt.loadData(this.ins.items);\r\n                // // å±å¼æ¥è¯¢ç»æã\r\n                // if (search.value && this.ins.items.length) {\r\n                //     tt.toggleExpand(this.ins.items[0], true);\r\n                // }\r\n                tt.resize();\r\n\r\n                this.IS_SEARCH_RESULT = true;\r\n\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n\r\n            this.ins.search.emit(search);\r\n        });\r\n    }\r\n\r\n    private getChildren(\r\n        parentPath,\r\n        parentLayer,\r\n        searchData: { searchField: string; searchValue: string }\r\n    ): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const search = { parentLayer, category: 'children', ...searchData };\r\n        if (this.ins.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n        \r\n        const param: any = {\r\n            searchValue: '',\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n        \r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        if (tt && tt.sortName) {\r\n            Object.assign(search, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n           \r\n        }\r\n\r\n        if (this.IS_SEARCH_RESULT) {\r\n            param.enableFullTree = false;\r\n            param.loadTreeDataType = 'layerload';\r\n\r\n            if (this.ins.treeInfo.layerType === 'parentId') {\r\n                // æ å½¢å¸®å©æ¥è¯¢åï¼å±å¼èç¹æ¶å°ç¸å³æ¥è¯¢åæ°ä¼ éå°åç«¯ 2022-09-13\r\n                search.searchValue = '';\r\n                search.searchField = '*';\r\n            }\r\n            // param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        param.searchValue = JSON.stringify(search);\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n       \r\n\r\n        if (this.ins.conditions && this.ins.conditions.length) {\r\n            param.searchConditions = cloneDeep(this.ins.conditions);\r\n        }\r\n       \r\n        return this.ins.http.getData(uri, param);\r\n    }\r\n\r\n\r\n    private _isLoadAllTreeData = (tt) => {\r\n        if (this.ins.loadTreeDataType === 'default') {\r\n            return tt.loadDataType === 'all';\r\n        } else {\r\n            return this.ins.loadTreeDataType === 'loadall';\r\n        }\r\n    };\r\n\r\n    private _isAsyncLoadTreeData = (tt) => {\r\n        if (this.ins.loadTreeDataType === 'default') {\r\n            return tt.loadDataType === 'async';\r\n        } else {\r\n            return this.ins.loadTreeDataType === 'layerload';\r\n        }\r\n    };\r\n\r\n\r\n    bindTreetableEvent() {\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const _searchTreeData = (searchparam: any) => {\r\n            if (this.ins.remoteSearch) {\r\n                this.ins._searchState = searchparam;\r\n                this.searchTreeData(searchparam);\r\n            } else {\r\n                if (this.ins.useInsideSearchHandler) {\r\n                    tt.searchHandle.search(searchparam.field, searchparam.value, 'client');\r\n                } else {\r\n                    this.ins.search.emit(searchparam);\r\n                }\r\n            }\r\n        };\r\n\r\n        const isLoadAllTreeData = () => {\r\n            return this._isLoadAllTreeData(tt);\r\n        };\r\n\r\n        const isAsyncLoadTreeData = () => {\r\n            return this._isAsyncLoadTreeData(tt);\r\n        };\r\n\r\n        tt.dblClickExpand = !this.ins.singleSelect; // ç¦ç¨åå»å±å¼èç¹\r\n        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;\r\n        tt.idField = this.ins.idField;\r\n        tt.columns = this.ins.columns;\r\n        tt.searchFields = this.ins.gridOptions.searchFields;\r\n        if (this.ins.treeInfo) {\r\n            tt.loadDataType = this.ins.treeInfo.loadDataType;\r\n            tt.virtualized = true;\r\n            if (!this.ins.isTextChange) {\r\n                this.ins.allData = cloneDeep(this.ins.items);\r\n            } else {\r\n                this.ins.allData = [];\r\n            }\r\n        }\r\n\r\n        if (this.ins.gridOptions.treeInfo) {\r\n            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;\r\n            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;\r\n        }\r\n\r\n        if (!tt.singleSelect) {\r\n            tt.checkOnSelect = true;\r\n            tt.selectOnCheck = true;\r\n            tt.showCheckbox = true;\r\n            tt.showCheckAll =  this.ins.showCheckAll;\r\n            // å¯ç¨å¤éåï¼åæ¶å¯ç¨çº§èéæ©\r\n            if (this.ins.enableCascade) {\r\n                this.cascadeValueChanged(this.ins.cascadeStatus);\r\n            } else {\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n            }\r\n        }\r\n\r\n        tt.enableFindText = this.ins.enableFindText;\r\n        // tt.findField = this.textField;\r\n        tt.nodeSelected.subscribe((e: any) => {\r\n            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {\r\n            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;\r\n            //     ftt.clearSelections();\r\n            // }\r\n            if (this.ins.singleSelect) {\r\n                this.lookupSelectionSer.clearSelections();\r\n            }\r\n            this.lookupSelectionSer.updateSelections([e.node.data]);\r\n            this.ins.checkedChange.emit({ data: [e.node.data] , isCheck: true  });\r\n        });\r\n\r\n        tt.nodeChecked.subscribe( e => {\r\n            if (!this.ins.singleSelect) {\r\n                let data = null;\r\n                if (e.nodes && e.nodes.length) {\r\n                    data = e.nodes.map(n => n.data);\r\n                } else {\r\n                    if (Array.isArray(e.node)) {\r\n                        data = e.node.map(n => n.data);\r\n                    } else {\r\n                        data = [e.node.data];\r\n                    }\r\n                }\r\n                this.ins.multiSelMgr.updateSelections(data);\r\n                this.ins.checkedChange.emit({ data, isCheck: true  });\r\n            }\r\n        });\r\n\r\n        tt.nodeUnChecked.subscribe((e: any) => {\r\n            if (e && e.node) {\r\n                let nodeData = null;\r\n                if (e.node.data) {\r\n                    nodeData = e.node.data;\r\n                } else {\r\n                    if (e.node.node && e.node.node.data) {\r\n                        nodeData = e.node.node.data;\r\n                    }\r\n                }\r\n\r\n                if (!nodeData) {\r\n                    return;\r\n                }\r\n\r\n                if (!this.ins.singleSelect) {\r\n                    this.ins.multiSelMgr.remove(e.node.id);\r\n\r\n                    // åå±å è½½ï¼å¤éï¼åå«ä¸çº§æ¶ï¼åæ¶å¾é éè¦å°å½åèç¹çææå­çº§æ°æ®ä¹è¦åæ¶éæ©ï¼å³ä»å·²éè®°å½ä¸­ç§»é¤\r\n                    if (tt.loadDataType !== 'all' && this.ins.treeInfo.layerType === 'pathcode' && this.ins.enableCascade &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down')) {\r\n                        if (e.node.children && e.node.children.length) {\r\n                            const nodes = e.node.children.map(n => n.data);\r\n                            this.ins.lookupSelectionSer.updateSelections(nodes, false);\r\n                        } else {\r\n                            const pathcode = this.ins.getPathCode(nodeData, this.ins.treeInfo)\r\n                            this.ins.lookupSelectionSer.unselectByPathcode(pathcode);\r\n                        }\r\n                    }\r\n\r\n                    if (e.nodes && e.nodes.length) {\r\n                        this.ins.multiSelMgr.remove(e.nodes.map(n => n.id));\r\n                        this.ins.checkedChange.emit({ data: e.nodes.map(n => n.data), isCheck: false });\r\n                    } else {\r\n                        this.ins.checkedChange.emit({ data: [nodeData], isCheck: false });\r\n                    }\r\n                } else {\r\n                    const ftt = this.ins.favoritesComponentRef && (this.ins.favoritesComponentRef.instance as TreeTableComponent);\r\n                    if (ftt && ftt.findRowNode(e.node.id)) {\r\n                        ftt.unSelectNode(e.node.id);\r\n                    }\r\n\r\n                    this.ins.checkedChange.emit({ data: [nodeData], isCheck: false });\r\n                }\r\n            }\r\n        });\r\n\r\n        tt.checkAll.subscribe( e => {\r\n            const data = e.instance.checkeds.map(n => n.data);\r\n            this.ins.multiSelMgr.updateSelections(data);\r\n            this.ins.checkedChange.emit({ data, isCheck: true  });\r\n        });\r\n        tt.unCheckAll.subscribe(() => {\r\n            this.ins.multiSelMgr.clear();\r\n            this.ins.checkedChange.emit({ data: [], isCheck: false  });\r\n        });\r\n\r\n        tt.search.subscribe(searchparam => {\r\n            if (searchparam.field !== '*' && !searchparam.value) {\r\n                this.ins.messagerService.warning(this.ins.mustWriteSomething);\r\n            } else {\r\n                searchparam.value = searchparam.value.trim();\r\n                _searchTreeData(searchparam);\r\n            }\r\n        });\r\n        if (!tt.cellClick.observers.length) {\r\n            tt.cellClick.subscribe((e: any) => {\r\n                if (e.col.field === FAVORITE_FIELD_NAME) {\r\n                    e.event.stopPropagation();\r\n                    // tslint:disable-next-line: no-string-literal\r\n                    const classList = e.event.target['classList'];\r\n                    if (classList.contains('f-lookup-favorite')) {\r\n                        // classList.toggle('f-icon-star');\r\n                        // classList.toggle('f-icon-star-outline');\r\n                        const _this = this.ins;\r\n\r\n                        (function each(arr) {\r\n                            if (arr) {\r\n                                arr.forEach(item => {\r\n                                    const id = _this.utils.getValue(_this.idField, item.data);\r\n                                    if (id === e.node.id) {\r\n                                        item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];\r\n                                        return true;\r\n                                    } else if (item.children && item.children.length > 0) {\r\n                                        return each(item.children);\r\n                                    } else {\r\n                                        return false;\r\n                                    }\r\n                                });\r\n                            }\r\n                        })(this.ins.items);\r\n                        tt.loadData(this.ins.items);\r\n\r\n                        // æ´æ°æ¶èæ°æ®\r\n                        this.lookupSelectionSer.updateFavoriteData( e.node.data,\r\n                            e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n        tt.dblClick.subscribe((treeNode: TreeNode) => {\r\n            if (this.ins.gridOptions.singleSelect && treeNode.selectable) {\r\n                if (this.ins.okButton) {\r\n                    // this.lookupSelectionSer.select(treeNode.data);\r\n                    // this.ins.okButton.nativeElement.click();\r\n                    this.ins.selectItem(treeNode.data);\r\n                }\r\n            }\r\n        });\r\n        const loadAllData = isLoadAllTreeData();\r\n        tt.columnSorted.subscribe((sort: { sortName: string; sortOrder: any; }) => {\r\n            this._sortState = sort;\r\n            if (isLoadAllTreeData()) {\r\n                tt.clientSort();\r\n            } else {\r\n                const { sortName, sortOrder } = { ...sort };\r\n\r\n                const col = this.ins.columns.find(n => n.field === sortName);\r\n                const _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;\r\n\r\n                const param = Object.assign({ sortName: _sortName, sortOrder }, { search: this.ins._searchState });\r\n\r\n                let reqTyp: LOAD_DATA_TYPE = 'all';\r\n                if (this.ins._searchState && this.ins._searchState.value) {\r\n                    reqTyp = 'search';\r\n                }\r\n\r\n                this.ins.httpMgr.getData(param, reqTyp).subscribe(d => {\r\n                    this.ins.closeLoading();\r\n                    tt.clearAll();\r\n                    const items = this.ins.checkNodeCanBeSelect(d.items, false);\r\n                    if (this.ins.useFavorite) {\r\n                        this.ins.favHelper.updateFavoritesStatus(items);\r\n                    }\r\n                    this.ins.items = items;\r\n                    tt.loadData(items);\r\n                    tt.resize();\r\n                    this.ins.selectionMgr.selectCurrentValue();\r\n                });\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe(() => {\r\n            if (tt&& tt.psRef && tt.psRef.directiveRef) {\r\n                tt.psRef.directiveRef.scrollToTop(0);\r\n            }\r\n\r\n            this.ins._searchState = null;\r\n            this.IS_SEARCH_RESULT = false;\r\n            let _items = [];\r\n            if (this.ins.allData && this.ins.allData.length) {\r\n                _items = this.ins.checkNodeCanBeSelect(this.ins.allData, loadAllData);\r\n            }\r\n            if (!_items || !_items.length) {\r\n                _searchTreeData({ field: '*', value: '' });\r\n            } else {\r\n                this.ins.items = _items;\r\n                this.ins.favHelper.updateFavoritesStatus(this.ins.items);\r\n                tt.loadData(_items);\r\n                this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        tt.expand.subscribe((tn: TreeNode) => {\r\n            if (tn.leaf ||  tn['showLoading']) {\r\n                return;\r\n            }\r\n            if (!tn.children || !tn.children.length) {\r\n                const treeInfo = this.ins.gridOptions.treeInfo;\r\n                if (isAsyncLoadTreeData() || this.IS_SEARCH_RESULT ) {\r\n                    let parentPath = '';\r\n                    let parentLayer = -1;\r\n                    const { field = '*', value = '' } = {\r\n                        ...tt.searchData\r\n                    };\r\n\r\n                    tn['showLoading'] = true;\r\n                    tt.detectChanges();\r\n                    if (treeInfo.layerType === 'parentId') {\r\n                        // ç¶IDå è½½æ¹å¼\r\n                        parentPath = tn['id'];\r\n                    } else {\r\n                        const treeInfoField = treeInfo.dataField;\r\n                        if (treeInfoField) {\r\n                            // parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                            parentPath = this.ins.getPathCode(tn.data, treeInfo);\r\n                            // parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                            parentLayer = this.ins.getLayerData(tn.data, treeInfo);\r\n                        } else {\r\n                            this.ins.writeConsole('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                        }\r\n                    }\r\n\r\n                    if (!this.ins.uri) {\r\n                        tn['showLoading'] = false;\r\n                        this.ins.expandTreeNode.emit({\r\n                            instance: tt, node: tn,\r\n                            parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                        });\r\n\r\n                        return;\r\n                    }\r\n\r\n                    this.ins.showLoading();\r\n\r\n                    this.getChildren(parentPath, parentLayer, {\r\n                        searchField: field === '*' ? '*' : field,\r\n                        searchValue: value\r\n                    }).subscribe(data => {\r\n                        this.ins.closeLoading();\r\n                        if (tt) {\r\n                            if (tn && data.items && data.items.length) {\r\n                                if (this.ins.useFavorite) {\r\n                                    // æ´æ°å­èç¹æ¶èç¶æ\r\n                                    this.ins.favHelper.updateFavoritesStatus(data.items);\r\n                                }\r\n\r\n                                const nodes = this.ins.checkNodeCanBeSelect(data.items, false);\r\n\r\n                                tt.appendChildren(nodes, tn);\r\n\r\n                                if (tt.loadDataType !== 'all' && !this.ins.singleSelect && this.ins.isGetAllChidlNodes &&\r\n                                    (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') ) {\r\n                                    const rn = tt.findRowNode(tn.id);\r\n                                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n\r\n                                    // æ´æ°éä¸­è®°å½ç¼å­\r\n                                    const _items = data.items.filter(n => !n.addtional);\r\n                                    if (_items && _items.length) {\r\n                                        this.ins.lookupSelectionSer.updateSelections(_items.map(n => n.data), rn.isChecked);\r\n                                    }\r\n                                }\r\n                            }\r\n                            tn['showLoading'] = false;\r\n                            tt.detectChanges();\r\n                            tt.psRef.directiveRef.update();\r\n                            this.ins.selectionMgr.selectCurrentValue();\r\n                        }\r\n                    });\r\n                }\r\n            } else {\r\n                if (!this.ins.singleSelect && this.ins.enableCascade &&\r\n                        (this.ins.cascadeStatus === 'enable' || this.ins.cascadeStatus === 'down') && this.ins.isGetAllChidlNodes ) {\r\n                    const rn = tt.findRowNode(tn.id);\r\n                    tt.propagateSelectionDown(rn, rn.isChecked);\r\n                    const selectItems = tn.children.filter(n => n.selectable).map(n => n.data);\r\n                    this.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);\r\n                }\r\n                // this.ins.selectionMgr.selectCurrentValue();\r\n            }\r\n        });\r\n\r\n        if (loadAllData && this.ins.items) {\r\n            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);\r\n        }\r\n        return loadAllData;\r\n    }\r\n\r\n    cascadeValueChanged($event) {\r\n        const val = $event;\r\n        // const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';\r\n        const tt = this.ins.lookupCmpMgr.getComponentInstance(instanceTyp) as TreeTableComponent;\r\n\r\n        if (!tt) {\r\n            return;\r\n        }\r\n\r\n        switch (val) {\r\n            case 'enable':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n            case 'disable':\r\n                tt.cascadeCheck = false;\r\n                tt.cascadeDown = false;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            case 'up':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeUp = true;\r\n                tt.cascadeDown = false;\r\n                break;\r\n            case 'down':\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = false;\r\n                break;\r\n            default:\r\n                tt.cascadeCheck = true;\r\n                tt.cascadeDown = true;\r\n                tt.cascadeUp = true;\r\n                break;\r\n        }\r\n\r\n        this.ins.cascadeStatus = val || 'enable';\r\n        this.ins.personalConf.cascadeStatus = val || 'enable';\r\n    }\r\n\r\n}\r\n","import { TreeTableComponent } from '@farris/ui-treetable';\r\nimport { FavoriteIcon, FAVORITE_FIELD_NAME } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\n\r\nexport class MultiSelectionManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    onSelectedTableCellClick(e: any) {\r\n        if (e.col.field === FAVORITE_FIELD_NAME) {\r\n            e.event.stopPropagation();\r\n            const classList = e.event.target['classList'];\r\n            if (classList.contains('f-lookup-unfavorite') || classList.contains('f-icon-minus-circle')) {\r\n                const rid =  e.row[this.ins.idField];\r\n                this.ins.lookupSelectionSer.unSelect(rid);\r\n                // åæ¶éä¸­ ä¸»åè¡¨ æ¶èåè¡¨ ä¸­çæ°æ®\r\n                if (this.ins.isTree()) {\r\n                    const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n                    tt.unCheckedNode(rid);\r\n                    tt.unSelectNode(rid);\r\n\r\n                    if (this.ins.useFavorite) {\r\n                        const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                        if (_tt && _tt.data && _tt.data.length && _tt.findRowNode(rid)) {\r\n                            _tt.unCheckedNode(rid);\r\n                            _tt.unSelectNode(rid);\r\n                        }\r\n                    }\r\n                } else {\r\n                    const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n                    dt.unCheckRow(rid);\r\n                    if (this.ins.useFavorite) {\r\n                        const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                        if (_dt && _dt.data && _dt.data.length) {\r\n                            _dt.unCheckRow(rid);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /** åå§åå·²éæ°æ®åä¿¡æ¯ */\r\n    initSelectedColumns() {\r\n        let selectedColumns = [];\r\n        if (this.ins.showSelected && !this.ins.singleSelect) {\r\n            selectedColumns = cloneDeep(this.ins.gridOptions.columns);\r\n            const favcol = selectedColumns.find(n => n.field === FAVORITE_FIELD_NAME);\r\n            if (favcol) {\r\n                favcol.formatter = () => {\r\n                    return FavoriteIcon.remove;\r\n                };\r\n            } else {\r\n                selectedColumns = selectedColumns.concat([\r\n                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: () => {\r\n                            return FavoriteIcon.remove;\r\n                        }\r\n                    }\r\n                ]);\r\n            }\r\n            this.ins.initColumnWidth(selectedColumns, 'sel');\r\n        }\r\n\r\n        return selectedColumns;\r\n    }\r\n\r\n    updateSelections(data) {\r\n        if (Array.isArray(data)) {\r\n            this.ins.lookupSelectionSer.updateSelections(data, true);\r\n        } else {\r\n            this.ins.lookupSelectionSer.select(data);\r\n        }\r\n    }\r\n\r\n    remove(id: any) {\r\n        if (id) {\r\n            this.ins.lookupSelectionSer.unSelect(id);\r\n        }\r\n    }\r\n\r\n    deleteSelectedItems(data: any) {\r\n        if (!data || !data.length) {return;}\r\n        this.ins.lookupSelectionSer.updateSelections(data, false);\r\n\r\n        if (!this.ins.isShow) {return;}\r\n        const ids = data.map(n => n[this.ins.idField]);\r\n        if (this.ins.isTree()) {\r\n            const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n            tt&& tt.unCheckedAndSelected(ids);\r\n\r\n            if (this.ins.useFavorite) {\r\n                const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                _tt && _tt.unCheckedNodes(ids, true, false);\r\n            }\r\n\r\n        } else {\r\n            const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n            dt && dt.unCheckRows(ids);\r\n            if (this.ins.useFavorite) {\r\n                const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                _dt && _dt.unCheckRows(ids);\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    clear() {\r\n        this.ins.lookupSelectionSer.clearSelections();\r\n\r\n        if (!this.ins.isShow) {return;}\r\n\r\n        if (this.ins.isTree()) {\r\n            const tt = this.ins.lookupCmpMgr.getComponentInstance('treetable') as TreeTableComponent;\r\n            tt&&tt.clearAll();\r\n\r\n            if (this.ins.useFavorite) {\r\n                const _tt = this.ins.lookupCmpMgr.getComponentInstance('fav') as TreeTableComponent;\r\n                _tt&&_tt.clearAll();\r\n            }\r\n\r\n        } else {\r\n            const dt = this.ins.lookupCmpMgr.getComponentInstance() as DataTableComponent;\r\n            dt&&dt.clearSelections();\r\n            if (this.ins.useFavorite) {\r\n                const _dt = this.ins.lookupCmpMgr.getComponentInstance('fav') as DataTableComponent;\r\n                _dt&&_dt.clearSelections();\r\n            }\r\n        }\r\n    }\r\n\r\n    save(rows: any) {\r\n        if (this.ins.showSelected) {\r\n            this.ins.personalConf.selections = rows;\r\n            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);\r\n        }\r\n    }\r\n\r\n    loadData() {\r\n        let items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];\r\n        if (!items.length) {\r\n            items = this.ins.lookupSelectionSer.getSelections();\r\n        }\r\n        this.ins.lookupSelectionSer.loadSelections(items);\r\n    }\r\n}\r\n","import { RemoteParams, SearchParam, UserFavoriteData } from '../http/RemoteParams';\r\nimport { LOAD_DATA_TYPE } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { cloneDeep } from 'lodash-es';\r\nimport { FavoriteAction, FAVORITE_FIELD_NAME, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { Observable, of, forkJoin } from 'rxjs';\r\nimport { map, switchMap, tap, debounceTime } from 'rxjs/operators';\r\n\r\n// å¸®å©é»è®¤ä¸ªæ§åæ°æ®\r\nconst DefaultUserConfig = {\r\n    tabIndex: 'datalist',\r\n    favorite: null,\r\n    size: null\r\n};\r\nexport class LookupHttpManager {\r\n    // æ¯æ¬¡å¸®å©æå¼åï¼æ´æ°æ­¤å¼ï¼åä¸ºä¸ªæ§åæ°æ®çåå§å¼ï¼\r\n    // å³é­çªå£æ¶ï¼ä¸æ­¤è¿è¡å¯¹æ¯ãå¦æä¸æ ·ï¼åä¸ä¿å­ï¼\r\n    private _originalPersonalConfig = DefaultUserConfig;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private disablePagination() {\r\n        return {\r\n            pageIndex: 1,\r\n            pageSize: 500\r\n        };\r\n    }\r\n\r\n    /** æé æ¥è¯¢åæ° */\r\n    buildQueryParams(event?: any, type: LOAD_DATA_TYPE = 'all') {\r\n        const params: RemoteParams = {};\r\n\r\n        if (event.navConditions && event.navConditions.length) {\r\n            if (event.navConditions && event.navConditions.length === 1 && event.navConditions[0].code == '*') {\r\n                event.search = { field: '*', value: event.navConditions[0].value};\r\n            } else {\r\n                params.navSearchConditions = event.navConditions;\r\n            }\r\n        }\r\n\r\n        if (this.ins.conditions && this.ins.conditions.length && type !== 'fav') {\r\n            params.searchConditions = cloneDeep(this.ins.conditions);\r\n        }\r\n\r\n        const searchParam: SearchParam = { category: type };\r\n\r\n        if (type !== 'fav') {\r\n            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {\r\n                if (this.ins.navigationFilter.idValue && type !== 'textchange') {\r\n                    params.relationFilter = [...this.ins.navigationFilter.idValue];\r\n                }\r\n            }\r\n        }\r\n\r\n        if (event) {\r\n            if (type === 'fav' || type === 'selected') {\r\n                event.pageInfo = this.disablePagination();\r\n            }\r\n\r\n            if (event.pageInfo) {\r\n                params.pageIndex = event.pageInfo.pageIndex;\r\n                params.pageSize = event.pageInfo.pageSize;\r\n            }\r\n\r\n            if (event.search) {\r\n                let sfield = event.search.field;\r\n                if (sfield && sfield === '*') {\r\n                    sfield = '*';\r\n                }\r\n\r\n                if (event.search.value) {\r\n                    event.search.value = event.search.value.trim();\r\n                }\r\n\r\n                searchParam.searchField = sfield;\r\n                searchParam.searchValue = event.search.value;\r\n                searchParam.searchType =  event.search.type || 'like';\r\n\r\n                if (event.search.value === '' && searchParam.category === 'search' && (!params.searchConditions && !params.navSearchConditions)) {\r\n                    searchParam.category = 'all';\r\n                }\r\n            }\r\n\r\n            if (event.sortName) {\r\n                searchParam.sortName = event.sortName;\r\n            }\r\n            if (event.sortOrder) {\r\n                searchParam.sortOrder = event.sortOrder;\r\n            }\r\n\r\n            // åå±å è½½æ¯æè®¾ç½®å±å¼å±çº§\r\n            if (!isNaN(Number(event.expandLevel)) && this.ins.isTree()) {\r\n                // åç«¯ -1 ä¸å±å¼   0 å¨å±å¼\r\n                // åç«¯  0 ä¸å±å¼  -1 å¨å±å¼\r\n                if (event.expandLevel) {\r\n                    if (event.expandLevel === -1) {\r\n                        event.expandLevel = 0;\r\n                    }\r\n                } else {\r\n                    event.expandLevel = -1;\r\n                }\r\n                searchParam['layerNum'] = event.expandLevel;\r\n            }\r\n        }\r\n\r\n        if (type === 'fav' && event.favoriteIds) {\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {\r\n            params.enableFullTree = this.ins.enableFullTree;\r\n        }\r\n\r\n        params.treeToList = this.ins.treeToList;\r\n        params.navTreeToList = this.ins.navTreeToList;\r\n\r\n        // æ¥è¯¢æ¶ä¸æé å®æ´æ \r\n        if (type === 'textchange') {\r\n            params.enableFullTree = false;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            searchParam.category = 'fav';\r\n            params.enableFullTree = false;\r\n            searchParam.favoriteIds = event.favoriteIds;\r\n        }\r\n\r\n        params.searchValue = JSON.stringify(searchParam);\r\n        params.loadTreeDataType = this.ins.loadTreeDataType;\r\n\r\n        params.customData = this.ins.customData;\r\n\r\n        if (this.ins.helpId) {\r\n            params.helpId = this.ins.helpId;\r\n        }\r\n\r\n        if (event.selectedInfo) {\r\n            params.selectedInfo = event.selectedInfo;\r\n        }\r\n\r\n        if (event.navNodePathCode !== undefined) {\r\n            params.navPathCode = event.navNodePathCode;\r\n        } else {\r\n            if (type === 'navAllChildren') {\r\n                if (this.ins.includeSubordinates && this.ins['navNodePathCode']) {\r\n                    params.navPathCode = this.ins['navNodePathCode'];\r\n                }\r\n            }\r\n        }\r\n\r\n        return params;\r\n    }\r\n\r\n\r\n    getData(event?: any, type: LOAD_DATA_TYPE = 'all'): Observable<any> {\r\n        const uri = this.ins.gridOptions.uri;\r\n\r\n        if (this.ins.isDoublleList() &&  this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {\r\n            if (this.ins.includeSubordinates && this.ins.navigationOptions.treeInfo.loadDataType === 'async') {\r\n                type = 'navAllChildren';\r\n            } else {\r\n                type = 'list';\r\n            }\r\n        }\r\n\r\n        const params = this.buildQueryParams(event, type);\r\n\r\n        if (uri || this.ins.beUri) {\r\n            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {\r\n                const allSearchFields = this.ins.columns.map(col => col.searchField).filter(f => f);\r\n                if (!params.condition) {\r\n                    params.condition = {};\r\n                }\r\n\r\n                if (!this.ins.isTree() && this.ins.pagination) {\r\n                    const { pageSize = this.ins.pageSize || 20, pageIndex } = { ...params };\r\n                    params.condition.pagination = { pageSize, pageIndex };\r\n                } else {\r\n                    params.condition.pagination = { isUsePagination: false };\r\n                }\r\n                const searchParam = JSON.parse(params.searchValue);\r\n                if (searchParam.searchValue) {\r\n                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {\r\n                        field: searchParam.searchField,\r\n                        value: searchParam.searchValue\r\n                    });\r\n                }\r\n            }\r\n\r\n            const _uri = this.ins.beUri || uri;\r\n\r\n            if (this.ins.http) {\r\n                this.ins.http.context = this.ins.context;\r\n            }\r\n            if (this.ins._searchResult) {\r\n                return of(this.ins._searchResult);\r\n            }\r\n\r\n            if (type !== 'allChildren') {\r\n                return this.ins.http.getData(_uri, params);\r\n            } else {\r\n                const params1 = {\r\n                    searchValue: JSON.stringify({ category: type }),\r\n                    parentsIds: event.parentsIds,\r\n                    customData: params.customData,\r\n                    helpId: params.helpId\r\n                };\r\n                return this.ins.http.getData(_uri, params1);\r\n            }\r\n        } else {\r\n            return of(false);\r\n        }\r\n    }\r\n\r\n    // getFavoriteData(params) {\r\n    //     return this.getData(params, 'fav');\r\n    // }\r\n\r\n    getSelecedItems(selIds: any[]) {\r\n        return this.getData({ favoriteIds: selIds }, 'selected');\r\n    }\r\n\r\n    getPersonalConfig() {\r\n        const defaultConf = cloneDeep(DefaultUserConfig);\r\n        \r\n        // if (this.ins.customData) {\r\n        //     const wrapKeyData = JSON.stringify({ key: this.ins.customData });\r\n        //     const configKeyString = this.ins.getLookupBindingFields() + wrapKeyData;\r\n        //     this.ins.personalConfigService.personalConfigKey = configKeyString;\r\n        // }\r\n        const key = this.ins.personalConfigService._newKey;\r\n\r\n        let _conf = this.ins.personalConfigService.getPersonalData(key);\r\n\r\n        if (!_conf || !Object.keys(_conf).length) {\r\n            _conf = defaultConf;\r\n        }\r\n        const req = of(_conf);\r\n\r\n        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {\r\n            return req;\r\n        }\r\n\r\n        if (this.ins.http && this.ins.http['getUserSettings']) {\r\n            return this.ins.http['getUserSettings'](key).pipe(\r\n                tap((r: any) => { // TFS 611953\r\n                    if (r && r.textValue) {\r\n                        localStorage.setItem(key, r.textValue);\r\n                    } else {\r\n                        localStorage.setItem(key, JSON.stringify(defaultConf));\r\n                    }\r\n                }),\r\n                map((ucs: any) => {\r\n                    if (ucs) {\r\n                        return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;\r\n                    }\r\n                    return defaultConf;\r\n                })\r\n            );\r\n        } else {\r\n            return req;\r\n        }\r\n    }\r\n\r\n    lookupRequest(event?: any, type: LOAD_DATA_TYPE = 'all', isQuickSelect = false) {\r\n        if (!this.ins.usePersionalConf || isQuickSelect) {\r\n            return this.getData(event, type);\r\n        }\r\n\r\n        const req = this.getPersonalConfig();\r\n\r\n        return req.pipe(\r\n            tap((c: any) => {\r\n                this.ins.personalConf = c;\r\n                this.ins.personalConfigService.savePersonalConfig(c);\r\n                if (!this.ins.isTabChanged) {\r\n                    this._originalPersonalConfig = cloneDeep(c);\r\n                }\r\n            }),\r\n            switchMap((c: any) => {\r\n                const { tabIndex, favorite, size, cascadeStatus } = c;\r\n\r\n                if (!this.ins.isTabChanged) {\r\n                    this.ins.activeTab = tabIndex || 'datalist';\r\n                }\r\n\r\n                if (size) {\r\n                    this.ins.dialogWidth = size.width;\r\n                    this.ins.dialogHeight = size.height;\r\n\r\n                    if (!this.ins.isTabChanged) {\r\n                        this.ins.dialog.reSize({ width: size.width, height: size.height });\r\n                    }\r\n                }\r\n\r\n\r\n                if ( this.ins.cascadeStatus) {\r\n                    if (cascadeStatus && this.ins.enableCascade && this.ins.showCascadeControl) {\r\n                        this.ins.cascadeStatus = cascadeStatus;\r\n                    }\r\n\r\n                    if (this.ins.cascadeItems) {\r\n                        const keys = ['enable', 'up', 'down', 'disable'];\r\n                        keys.forEach(n => {\r\n                            if (this.ins.cascadeItems[n] === undefined) {\r\n                                this.ins.cascadeItems[n] = true;\r\n                            }\r\n                        });\r\n\r\n                        if (!this.ins.cascadeItems[this.ins.cascadeStatus] ) {\r\n                            const keys = Object.keys(this.ins.cascadeItems).map(n => {\r\n                                return this.ins.cascadeItems[n] ? n: '';\r\n                            }).filter(n => n);\r\n                            this.ins.cascadeStatus = keys[0] as any;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (this.ins.activeTab === 'datalist') {\r\n                    return this.getData(event, type);\r\n                } else if (this.ins.activeTab === 'favorite') {\r\n                    const favIds = favorite ? favorite[this.ins.localService.localeId] : [];\r\n                    if ((!favIds || !favIds.length) && !this.ins.isTabChanged) {\r\n                        return this.getData(event, 'all').pipe(\r\n                            map(r => {\r\n                                if (r && !r.items) {\r\n                                    r.items = [];\r\n                                }\r\n                                r.activeTab = 'datalist';\r\n                                return r;\r\n                            })\r\n                        );\r\n                    }\r\n\r\n                    // const _fids = favIds.filter(n => n);\r\n                    event.favoriteIds = favIds;\r\n                    event.search = null;\r\n                    return this.getData(event, 'fav').pipe(\r\n                        switchMap(r => {\r\n                            const items = r ? r.items || [] : [];\r\n                            // å å¥æ°æ®æéåï¼æ²¡æè¿åæ°æ®ä¸ç¬¬1æ¬¡æå¼çªå£ï¼éæå¨ç¹å»æ¶èæ ç­¾æ¶\r\n                            if (!items.length && !this.ins.isTabChanged) {\r\n                                return this.getData(event, 'all').pipe(\r\n                                    map(a => {\r\n                                        if (a && !a.items) {\r\n                                            a.items = [];\r\n                                        }\r\n        \r\n                                        a.activeTab = 'datalist';\r\n                                        return a;\r\n                                    })\r\n                                );\r\n                            } else {\r\n                                return of(r);\r\n                            }\r\n                        })\r\n                    );\r\n                } else if (this.ins.activeTab === 'selected') {\r\n                    const selIds = this.ins.displayValue ? this.ins.displayValue.split(',') : [];\r\n                    const _sids = selIds.filter(n => n);\r\n                    return this.getSelecedItems(_sids);\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    // ä¿å­ä¸ªæ§åæ°æ®\r\n    submitFavoriteData(action: any | FavoriteAction) {\r\n\r\n        // ä¿å­åå®½åº¦\r\n        this.ins.personalConf.colSizeInfo = this.getColumnSizeInfo();\r\n\r\n        // å¦ææ°æ®ä¸é»è®¤çæ°æ®ä¸è³åä¸ä¿å­ã\r\n        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {\r\n            return;\r\n        }\r\n\r\n        let msg = '';\r\n        if (action === FavoriteAction.add) {\r\n            msg = this.ins.addFavoriteSuccess;\r\n        } else if (action === FavoriteAction.delete) {\r\n            msg = this.ins.delFavoriteSuccess;\r\n        }\r\n        // æ´æ°æ¬å°ç¼å­\r\n        localStorage.setItem(this.ins.personalConfigService._newKey, JSON.stringify(this.ins.personalConf));\r\n        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});\r\n\r\n        if (this.ins.favoriteDataFrom !== 'locale') {\r\n            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);\r\n\r\n            const configData: UserFavoriteData = {\r\n                configkey1: this.ins.personalConfigService.personalConfigKey,\r\n                configkey2: '',\r\n                configkey3: '',\r\n                textvalue: JSON.stringify(this.ins.personalConf)\r\n            };\r\n\r\n            if (this.ins.http && this.ins.http['saveUserSettings']) {\r\n                this.ins.savingFaoriteData = true;\r\n                this.ins.showLoading();\r\n                return this.ins.http['saveUserSettings'](configData).subscribe((r) => {\r\n                    this.ins.savingFaoriteData = false;\r\n                    this.ins.closeLoading();\r\n                    if (msg) {\r\n                        this.ins.notifyService.success(msg);\r\n                    }\r\n                });\r\n            } else {\r\n                if (msg) {\r\n                    this.ins.notifyService.success(msg);\r\n                }\r\n            }\r\n        } else {\r\n            if (msg) {\r\n                this.ins.notifyService.success(msg);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getColumnSizeInfo() {\r\n        const colSizeInfo = {data: {}, nav: {}, fav: {}, sel: {}};\r\n        colSizeInfo.data = this.ins.columns.filter((c) => c.field !== FAVORITE_FIELD_NAME).reduce((r, n) => {\r\n            r[n.field] = n.width;\r\n            return r;\r\n        }, {});\r\n\r\n        if (this.ins.favoriteColumns && this.ins.favoriteColumns.length) {\r\n            colSizeInfo.fav = this.ins.favoriteColumns.filter((c) => c.field !== FAVORITE_FIELD_NAME).reduce((r, n) => {\r\n                r[n.field] = n.width;\r\n                return r;\r\n            }, {});\r\n        }\r\n\r\n        if (this.ins.navigationOptions && this.ins.navigationOptions.columns && this.ins.navigationOptions.columns.length) {\r\n            colSizeInfo.nav = this.ins.navigationOptions.columns.filter((c) => c.field !== FAVORITE_FIELD_NAME).reduce((r, n) => {\r\n                r[n.field] = n.width;\r\n                return r;\r\n            }, {});\r\n        }\r\n\r\n        if (this.ins.selectedColumns && this.ins.selectedColumns.length && this.ins.showSelected) {\r\n            colSizeInfo.sel = this.ins.selectedColumns.filter((c) => c.field !== FAVORITE_FIELD_NAME).reduce((r, n) => {\r\n                r[n.field] = n.width;\r\n                return r;\r\n            }, {});\r\n        }\r\n        \r\n        return colSizeInfo;\r\n    }\r\n\r\n}\r\n","/*\r\n* @Author: ç¯çç§æ(Lucas Huang)\r\n* @Date: 2018-12-14 14:40:48\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-25 18:10:29\r\n* @Company: Inspur\r\n* @Version: v0.0.1\r\n*/\r\n\r\nimport { Component, OnInit, ViewChild, ViewContainerRef, EventEmitter, Output,\r\n    ComponentFactoryResolver, ComponentRef, ChangeDetectorRef, Injector, ReflectiveInjector, OnDestroy\r\n} from '@angular/core';\r\nimport { Observable, of, Subscription } from 'rxjs';\r\n\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\n\r\nimport { LOAD_DATA_TYPE, LookupGridOptions, LookupGridResult } from './lookup-grid-options';\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { filter, switchMap } from 'rxjs/operators';\r\nimport { FilterCondition } from '@farris/ui-common/types';\r\n\r\n@Component({\r\n    selector: 'lookup-left',\r\n    templateUrl: './lookup-left.component.html'\r\n})\r\n\r\nexport class LookupLeftComponent implements OnInit, OnDestroy {\r\n\r\n    cmpRef: ComponentRef<any>;\r\n    navOptions: LookupGridOptions;\r\n    lookupCmp: LookupGridComponent;\r\n\r\n    navConditions: Array<FilterCondition> = [];\r\n\r\n\r\n    @ViewChild('container', {read: ViewContainerRef}) cmpContainer: ViewContainerRef;\r\n    @Output() selected = new EventEmitter<{ data: any, node?: any}>();\r\n    @Output() unselected = new EventEmitter();\r\n    @Output() search = new EventEmitter<{ field: string, value: string }>();\r\n    @Output() pageChanged = new EventEmitter<{ pageInfo: {pageIndex: number, pageSize: number}, search: {field: string, value: string} }>();\r\n\r\n    private _searchState = null;\r\n    private _sortState = null;\r\n    private allData = null;\r\n    constructor(private cfr: ComponentFactoryResolver, private cd: ChangeDetectorRef) { }\r\n\r\n    ngOnInit() {\r\n        if (this.lookupCmp && this.isTreeList()) {\r\n            this.lookupCmp.includeSubordinates$$ = this.lookupCmp.includeSubordinates$.subscribe((val: boolean) => {\r\n                if (this.cmpRef) {\r\n                    const tt = this.cmpRef.instance as TreeTableComponent;\r\n                    if (tt.selectedRow) {\r\n                        this.selected.emit({ data: tt.selectedRow.data, node: tt.selectedRow });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this._searchState = null;\r\n        this._sortState = null;\r\n    }\r\n\r\n    updateScrollPosition() {\r\n        if (this.isTreeList()) {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            if (tt && tt.state.scrollY != tt.psRef.directiveRef.elementRef.nativeElement.scrolltop) {\r\n                tt.psRef.directiveRef.scrollToY(tt.state.scrollY);\r\n            }\r\n        }\r\n    }\r\n\r\n    createComponent(): Observable<any> {\r\n        let dtFac = null;\r\n        if (!this.isTreeList()) {\r\n            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);\r\n        } else {\r\n            this.navOptions['fitColumns'] = false;\r\n            this.navOptions['autoFitColumns'] = true;\r\n            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);\r\n        }\r\n        this.navOptions['keepSelect'] = false;\r\n        // å·¦ä¾§æ¥è¯¢è¿æ»¤æ¡ï¼éèæï¼\r\n        this.navOptions['showFilterBar'] = this.lookupCmp.enableMultiFieldSearch? false: this.lookupCmp.showFilterBar;\r\n\r\n        this.navOptions.width = this.lookupCmp.leftPanelWidth;\r\n\r\n        this.cmpRef = this.cmpContainer.createComponent(dtFac);\r\n\r\n        if (!this.isTreeList()) {\r\n            this.navOptions.width -= 2;\r\n            this.navOptions['fill'] = true;\r\n            this.cmpRef.instance.maxSize = 5;\r\n            this.cmpRef.instance.fill = true;\r\n            this.cmpRef.instance.autoFitColumns = true;\r\n        } else {\r\n            this.navOptions['fit'] = true;\r\n        }\r\n        // this.cmpRef.instance.fit = true;\r\n\r\n        if (this.navOptions.pageInfo) {\r\n            if (this.navOptions.pageInfo.pageList) {\r\n                this.navOptions.pageList = this.navOptions.pageInfo.pageList;\r\n            }\r\n            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;\r\n            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;\r\n            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;\r\n        } else {\r\n            this.navOptions.pagination = false;\r\n        }\r\n\r\n        Object.assign(this.cmpRef.instance, this.navOptions);\r\n\r\n        this.loadData();\r\n        return of(this.cmpRef);\r\n    }\r\n\r\n    update() {\r\n        this.cd.detectChanges();\r\n    }\r\n\r\n    resize(size?: {width: number, height: number}) {\r\n        if (size) {\r\n            const { width, height } = size;\r\n            const _width = width - 2;\r\n            this.navOptions.width = _width;\r\n            this.navOptions.height = height;\r\n\r\n            const _height = height -  this.lookupCmp.getFilterBarHeight();\r\n            this.cmpRef.instance.resize({ width: _width, height: _height });\r\n        }\r\n    }\r\n\r\n    isTreeList() {\r\n        return this.navOptions.displayType.toLowerCase() === 'treelist' && !this.lookupCmp.navTreeToList;\r\n    }\r\n\r\n    private selectLeftDataTableRow(items: any, dt: DataTableComponent) {\r\n        if (items && items.length) {\r\n            let item = null;\r\n            if (this.lookupCmp.navSelectedIds) {\r\n                item = items.find(n => n[dt.idField] == this.lookupCmp.navSelectedIds);\r\n            } else {\r\n                if (this.lookupCmp.selectFirstInNav) {\r\n                    item = items[0];\r\n                }\r\n            }\r\n\r\n            if (item) {\r\n                dt.dtBody.selectedRowIndex = -1;\r\n                dt.dtBody.selectedRow('', 0, item);\r\n            }\r\n        }\r\n    }\r\n\r\n    private closeLoading() {\r\n        this.lookupCmp.closeLoading();\r\n    }\r\n\r\n    private initDataTable(dt: DataTableComponent) {\r\n        dt.loadData({\r\n            pageSize: this.navOptions.pageSize,\r\n            pageIndex: this.navOptions.pageIndex,\r\n            total: this.navOptions.total,\r\n            data: this.navOptions.items,\r\n        });\r\n\r\n        const {width, height} = this.navOptions;\r\n        // dt.resize({ width: 320, height: this.navOptions.height});\r\n        dt.resize({ width, height: height -  this.lookupCmp.getFilterBarHeight() });\r\n        // è¡éä¸­\r\n        dt.selectedRow.subscribe(d => {\r\n            this.selected.emit({ data: d.data });\r\n        });\r\n\r\n        dt.unSelectRow.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        const loadTableData = {\r\n            next: (data: LookupGridResult) => {\r\n                this.closeLoading();\r\n                dataTableReLoad(data);\r\n                const {width, height} = this.navOptions;\r\n                this.cmpRef.instance.resize({ width, height: height -  this.lookupCmp.getFilterBarHeight() });\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n        // æ¥è¯¢\r\n        dt.search.subscribe( searchData => {\r\n            const p: any = { pageInfo: { pageIndex: 1, pageSize: this.navOptions.pageSize }, search: '',navConditions: this.navConditions };\r\n\r\n            this._searchState = searchData;\r\n            this.search.emit(searchData);\r\n            p.search = searchData;\r\n            p.pageInfo.pageSize = dt.pageSize;\r\n            this.lookupCmp.navigationFilter = null;\r\n\r\n            if (this._sortState && this._sortState.sortName) {\r\n                p['sortName'] = this._sortState.sortName;\r\n                p['sortOrder'] = this._sortState.sortOrder;\r\n            } else {\r\n                delete p['sortName'];\r\n                delete p['sortOrder'];\r\n            }\r\n\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').pipe(\r\n                filter(n => n)\r\n            ).subscribe(loadTableData);\r\n        });\r\n\r\n        const dataTableReLoad = (data) => {\r\n            dt.loadData({\r\n                pageSize: data.pageInfo.pageSize,\r\n                pageIndex: data.pageInfo.pageIndex,\r\n                total: data.total,\r\n                data: data.items,\r\n            });\r\n\r\n            this.selectLeftDataTableRow(data.items, dt);\r\n            dt.cd.markForCheck();\r\n        };\r\n\r\n        // åé¡µ\r\n        dt.pageChanged.subscribe(d => {\r\n            this.pageChanged.emit(d);\r\n            this.lookupCmp.navigationFilter = null;\r\n            d.navConditions = this.navConditions || [];\r\n            this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.pageSizeChanged.subscribe((e) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            e.navConditions = this.navConditions || [];\r\n            this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            const { sortName, sortOrder } = {...sort};\r\n            this._sortState = sort;\r\n            this.lookupCmp.navigationFilter = null;\r\n            const param = { \r\n                sortName,\r\n                sortOrder,\r\n                search: this._searchState,  \r\n                pageInfo: {\r\n                    pageSize: dt.pageSize,\r\n                    pageIndex: 1\r\n                },\r\n                navConditions: this.navConditions || []\r\n            };\r\n            this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);\r\n        });\r\n\r\n        dt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n            dt.search.emit(null);\r\n        });\r\n\r\n        this.selectLeftDataTableRow(this.navOptions.items, dt);\r\n    }\r\n\r\n    private buildParams(params: {}): {[key: string]:any} {\r\n        const p: any = { \r\n            ...params, \r\n            treeToList: this.lookupCmp.treeToList, \r\n            navTreeToList: this.lookupCmp.navTreeToList,\r\n            navConditions: this.navConditions || []\r\n        };\r\n\r\n        return p;\r\n    }\r\n\r\n    private initTreeTable(tt: TreeTableComponent) {\r\n        tt.virtualized = true;\r\n        tt.fast = true;\r\n        tt.nodeSelected.subscribe(d => {\r\n            this.selected.emit({data: d.node.data, node: d.node});\r\n        });\r\n\r\n        tt.nodeUnSelect.subscribe(d => {\r\n            this.selected.emit(null);\r\n        });\r\n\r\n        tt.fixedHeader = true;\r\n\r\n        if (this.navOptions.treeInfo.loadDataType === 'all') { // åå±å è½½ä¸æ¯æåæ°æ¶éç½®å±å¼å±çº§\r\n            this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);\r\n        }\r\n\r\n        tt.loadDataType = this.navOptions.treeInfo.loadDataType;\r\n        // æ£æ¥å®æ´æ è¿æ»¤æ¡ä»¶ By Lucas 20200302\r\n        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');\r\n        tt.loadData(this.navOptions.items);\r\n\r\n        if (this.lookupCmp.navSelectedIds) {\r\n            tt.selectNode(this.lookupCmp.navSelectedIds);\r\n        } else if (this.lookupCmp.selectFirstInNav) {\r\n            tt.selectFirstNode();\r\n        }\r\n\r\n        this.allData = this.navOptions.items;\r\n\r\n        const loadTreeData = {\r\n            next: (resData: any) => {\r\n                this.closeLoading();\r\n                tt.psRef.directiveRef.scrollToTop(0);\r\n                tt.clearAll();\r\n                const items = this.lookupCmp.checkNodeCanBeSelect(resData.items, this.navOptions.treeInfo.loadDataType === 'all' && (!this._searchState || !this._searchState.value));\r\n\r\n                if (items && items.length && items[0].children && items[0].children.length) {\r\n                    items[0].expanded = true;\r\n                    items[0].children = this.lookupCmp.expandFirstNode(items[0].children);\r\n                }\r\n\r\n                tt.loadData(items);\r\n                tt.resize();\r\n                this.selected.emit(null);\r\n            },\r\n            error: (err) => {\r\n                this.closeLoading();\r\n            }\r\n        };\r\n\r\n\r\n        tt.search.subscribe(search => {\r\n            this._searchState = search;\r\n            this.lookupCmp.navigationFilter = null;\r\n            const p = this.buildParams({ search });\r\n          \r\n            if (this._sortState && this._sortState.sortName) {\r\n                p['sortName'] = this._sortState.sortName;\r\n                p['sortOrder'] = this._sortState.sortOrder;\r\n            }\r\n            this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTreeData);\r\n        });\r\n\r\n        tt.columnSorted.subscribe( (sort: {sortName: string, sortOrder: any}) => {\r\n            this.lookupCmp.navigationFilter = null;\r\n            if (tt.loadDataType === 'all') {\r\n                tt.clientSort();\r\n            } else {\r\n                let { sortName, sortOrder } = {...sort};\r\n\r\n                const sortCol: any = this.navOptions.columns.find(n => n.field === sortName);\r\n                if (sortCol) {\r\n                    sortName = sortCol['fieldPath'];\r\n                }\r\n\r\n                this._sortState = { sortName, sortOrder };\r\n                // const param = Object.assign({ sortName, sortOrder }, this._searchState);\r\n                const param = this.buildParams({ sortName, sortOrder, search: this._searchState });\r\n                let requestType: LOAD_DATA_TYPE = 'nav';\r\n                if ((this._searchState && this._searchState.value) || (param && param.navConditions && param.navConditions.length)) {\r\n                    requestType = 'navsearch';\r\n                }\r\n\r\n\r\n                this.lookupCmp.httpMgr.getData(param, requestType).subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n        tt.clearSearchValue.subscribe( () => {\r\n            this._searchState = null;\r\n            if (!this._sortState || !this._sortState.sortName) {\r\n                tt.loadData(this.allData);\r\n                if (!tt.selectedRow) {\r\n                    this.selected.emit(null);\r\n                }\r\n            } else {\r\n                const p = this.buildParams({});\r\n                this.lookupCmp.navigationFilter = null;\r\n                if (this._sortState && this._sortState.sortName) {\r\n                    p['sortName'] = this._sortState.sortName;\r\n                    p['sortOrder'] = this._sortState.sortOrder;\r\n                }\r\n                this.lookupCmp.httpMgr.getData(p, 'nav').subscribe(loadTreeData);\r\n            }\r\n        });\r\n\r\n\r\n        tt.expand.subscribe((tn: any) => {\r\n            this.onNodeExpanded(tn, tt);\r\n        });\r\n    }\r\n\r\n\r\n    private onNodeExpanded(tn: any, tt) {\r\n        if (tn.leaf) {\r\n            return;\r\n        }\r\n        if (!tn.children || !tn.children.length) {\r\n            const treeInfo = this.navOptions.treeInfo;\r\n            if (this.navOptions.treeInfo.loadDataType === 'async') {\r\n                let parentPath = '';\r\n                let parentLayer = -1;\r\n                const { field = '*', value = '' } = {\r\n                    ...tt.searchData\r\n                };\r\n\r\n                tn['showLoading'] = true;\r\n                tt.detectChanges();\r\n                if (treeInfo.layerType === 'parentId') {\r\n                    // ç¶IDå è½½æ¹å¼\r\n                    parentPath = tn['id'];\r\n                } else {\r\n                    const treeInfoField = treeInfo.dataField;\r\n                    if (treeInfoField) {\r\n                        // parentPath = tn.data[treeInfoField][treeInfo.pathField];\r\n                        // parentLayer = tn.data[treeInfoField][treeInfo.layerField];\r\n                        parentPath = this.lookupCmp.getPathCode(tn.data, treeInfo);\r\n                        parentLayer= this.lookupCmp.getLayerData(tn.data, treeInfo);\r\n                    } else {\r\n                        console.log('æªæ¾å°åçº§ä¿¡æ¯ã');\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupCmp.uri) {\r\n                    this.lookupCmp.expandTreeNode.emit({\r\n                        instance: tt, node: tn,\r\n                        parentIdOrPath: parentPath, parentLayer, search: { value, field }\r\n                    });\r\n\r\n                    return;\r\n                }\r\n                this.getChildren(\r\n                    parentPath, parentLayer, {searchField: field === '*' ? '*' : field, searchValue: value}, tt\r\n                ).pipe(\r\n                    switchMap((data: any) => {\r\n                        if (data && data.items && data.items.length) {\r\n                            return of(data);\r\n                        } else {\r\n                            return this.getChildren(parentPath, parentLayer, { searchField: '*', searchValue: ''  }, tt, true);\r\n                        }\r\n                    })\r\n                ).subscribe(data => {\r\n                    if (tt) {\r\n                        if (tn && data.items && data.items.length) {\r\n                            tt.appendChildren(data.items, tn);\r\n                        }\r\n                        tn['showLoading'] = false;\r\n                        tt.detectChanges();\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private getChildren( parentPath, parentLayer, searchData: { searchField: string; searchValue: string }, tt, all = false ): Observable<any> {\r\n        const uri = this.lookupCmp.gridOptions.uri;\r\n        const search = { parentLayer, category: 'navchildren', ...searchData };\r\n        if (this.navOptions.treeInfo.layerType === 'parentId') {\r\n            search['parentId'] = parentPath;\r\n        } else {\r\n            search['parentPath'] = parentPath;\r\n        }\r\n\r\n        const param: any = this.buildParams({\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.lookupCmp.customData,\r\n            enableFullTree: false,\r\n            loadTreeDataType: 'layerload',\r\n        });\r\n\r\n        if (this.lookupCmp.helpId) {\r\n            param['helpId'] = this.lookupCmp.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            let sortName = tt.sortName;\r\n            const sortCol: any = this.navOptions.columns.find(n => n.field === tt.sortName);\r\n            if (sortCol) {\r\n                sortName = sortCol['fieldPath'];\r\n            }\r\n\r\n            search['sortName'] = sortName;\r\n            search['sortOrder'] = tt.sortOrder;\r\n            param.searchValue = JSON.stringify(search);\r\n        }\r\n\r\n        if (this.navConditions && this.navConditions.length && !all) {\r\n            param.navSearchConditions = this.navConditions;\r\n        }\r\n        delete param.navConditions;\r\n        return this.lookupCmp.http.getData(uri , param);\r\n    }\r\n\r\n\r\n    loadData() {\r\n        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;\r\n        if (!this.isTreeList()) {\r\n            const dt = this.cmpRef.instance as DataTableComponent;\r\n            this.initDataTable(dt);\r\n        } else {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            this.initTreeTable(tt);\r\n        }\r\n    }\r\n\r\n    onConditionsChange($event) {\r\n        this.navConditions = $event;\r\n        if (this.isTreeList()) {\r\n            const tt = this.cmpRef.instance as TreeTableComponent;\r\n            tt.search.emit();\r\n        } else {\r\n            const dt = this.cmpRef.instance as DataTableComponent;\r\n            dt.search.emit();\r\n        }\r\n    }\r\n}\r\n","import { ComponentRef } from '@angular/core';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeNode, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { of } from 'rxjs';\r\nimport { debounceTime, switchMap } from 'rxjs/operators';\r\nimport { ComponentInstanceType, LookupGridDisplayType } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupLeftComponent } from '../lookup-left.component';\r\n\r\n\r\nexport class LookupComponentManager {\r\n    constructor(private ins: LookupGridComponent) {}\r\n\r\n    getComponentInstance(type: ComponentInstanceType = 'datatable') {\r\n        if (!this.ins.componentRef || !this.ins.componentRef.instance) {\r\n            return null;\r\n        }\r\n\r\n        if (type === 'selected') {\r\n            return this.ins.selectedDtRef;\r\n        }\r\n\r\n        let ins = this.ins.componentRef.instance;\r\n\r\n        if (type === 'leftDataTable' || type === 'leftTree') {\r\n            const leftRef = this.ins.leftComponentRef;\r\n            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {\r\n                return null;\r\n            }\r\n            ins = this.ins.leftComponentRef.instance.cmpRef.instance;\r\n        }\r\n\r\n        if (type === 'fav') {\r\n            ins = this.ins.favoritesComponentRef.instance;\r\n        }\r\n\r\n        switch (type) {\r\n            case 'leftDataTable':\r\n            case 'fav':\r\n            case 'datatable':\r\n                return ins as DataTableComponent;\r\n            case 'leftTree':\r\n            case 'treetable':\r\n                return ins as TreeTableComponent;\r\n            default:\r\n                if (this.ins.isTree()) {\r\n                    return ins as TreeTableComponent;\r\n                }\r\n                return ins as DataTableComponent;\r\n        }\r\n    }\r\n\r\n    createComponentWithServerData(data: any) {\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n        this.ins.idField = data.idField || this.ins.idField;\r\n        this.ins.textField = data.textField || this.ins.textField;\r\n        this.ins.valueField = data.valueField || this.ins.valueField;\r\n\r\n        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';\r\n\r\n        const dtyp = this.ins.displayType.toUpperCase();\r\n\r\n        if (this.ins.isDoublleList()) {\r\n            if (this.ins.navTreeToList && dtyp === LookupGridDisplayType.NavTreeList) {\r\n                this.ins.displayType = LookupGridDisplayType.NavList;\r\n            }\r\n\r\n            if (this.ins.treeToList) {\r\n                if (dtyp ===  LookupGridDisplayType.NavListTree) {\r\n                    this.ins.displayType = LookupGridDisplayType.NavList;\r\n                }\r\n            }\r\n\r\n        } else {\r\n            if (this.ins.treeToList) {\r\n                if (dtyp === LookupGridDisplayType.TreeList) {\r\n                    this.ins.displayType = 'LIST';\r\n                } else {\r\n                    if (dtyp ===  LookupGridDisplayType.NavListTree) {\r\n                        this.ins.displayType = LookupGridDisplayType.NavList;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n \r\n\r\n        \r\n\r\n        if (this.ins.isDoublleList() && this.ins.navTreeToList) {\r\n            if (dtyp === LookupGridDisplayType.NavTreeList) {\r\n                this.ins.displayType = LookupGridDisplayType.NavList;\r\n            }\r\n        }\r\n\r\n        this.ins.changeDetector.detectChanges();\r\n\r\n        this.ins.componentRef = this.createContent(this.ins.gridOptions);\r\n        this.createFavoriteComponent();\r\n\r\n        this.resizeComponent();\r\n    }\r\n\r\n\r\n    createFavoriteComponent() {\r\n        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {\r\n            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();\r\n\r\n            const favoritesOptions = Object.assign({}, this.ins.gridOptions, {\r\n                showFilterBar: false,\r\n                pagination: false,\r\n                columns: this.ins.favoriteColumns || []\r\n            });\r\n            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);\r\n\r\n            this.resizeComponent('fav');\r\n        }\r\n    }\r\n\r\n\r\n    private reloadTreeDataForExpand(expandLevel) {\r\n        const uri = this.ins.gridOptions.uri;\r\n        const tt = this.ins.componentRef.instance as TreeTableComponent;\r\n        const { field = '*', value = '' } = {\r\n            ...tt.searchData\r\n        };\r\n        const search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };\r\n\r\n\r\n        const param = {\r\n            searchValue: JSON.stringify(search),\r\n            customData: this.ins.customData,\r\n            enableFullTree: this.ins.enableFullTree,\r\n            loadTreeDataType: this.ins.loadTreeDataType\r\n        };\r\n\r\n\r\n        if (this.ins.helpId) {\r\n            param['helpId'] = this.ins.helpId;\r\n        }\r\n\r\n        if (tt && tt.sortName) {\r\n            Object.assign(param, {\r\n                sortName: tt.sortName,\r\n                sortOrder: tt.sortOrder\r\n            });\r\n        }\r\n        this.ins.showLoading();\r\n        return this.ins.http.getData(uri, param).subscribe((data: any) => {\r\n            this.ins.closeLoading();\r\n            const nodes = this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);\r\n            this.ins.items = nodes;\r\n            tt.loadData(nodes);\r\n            tt.psRef.directiveRef.scrollToTop(0);\r\n        });\r\n    }\r\n\r\n    private setTreeNodeExpandBy(nodes: TreeNode[], level) {\r\n        if (!nodes || !nodes.length) {\r\n            return;\r\n        }\r\n        nodes.forEach((n: TreeNode) => {\r\n            const layer = n.data[this.ins.treeInfo.dataField].layer;\r\n\r\n            const expandLayer = layer + level - 1;\r\n\r\n            n.expanded = layer <= expandLayer ? true : n.expanded;\r\n            if (n.children && n.children.length && layer + 1 <= expandLayer) {\r\n                this.setTreeNodeExpandBy(n.children, level);\r\n            }\r\n        });\r\n    }\r\n\r\n    // å¯ç¨æ å¸®å©å³é®èååè½\r\n    private useContextMenuForTree(cmpRef: ComponentRef<any>) {\r\n        const { maxLevel, enableContextMenu, language } = this.ins.treeTableOptions;\r\n        if (enableContextMenu && maxLevel) {\r\n            const levelMenus = [];\r\n            for (let i = 1; i <= maxLevel; i++) {\r\n                const title = language['expand' + i];\r\n                levelMenus.push({ id: 30 + 1, code: i, title, handle: (t) => {\r\n                    // åéè¯·æ±è·åæ°æ®\r\n                    const level = t.menu.code;\r\n                    if (isLoadAllTreeData() ) {\r\n                        this.setTreeNodeExpandBy(this.ins.items, level);\r\n                        cmpRef.instance.updateSerializedValue();\r\n                    } else {\r\n                        const { dataField, layerField } = this.ins.treeInfo;\r\n                        const firstNodeData = (this.ins.items || [])[0];\r\n                        if (firstNodeData && firstNodeData.data) {\r\n                            const minLayer = this.ins.utils.getValue(`${dataField}.${layerField}`, firstNodeData.data);\r\n                            let _level = minLayer + level - 1;\r\n                            this.reloadTreeDataForExpand(_level);\r\n                        }\r\n                    }\r\n                } });\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.ins.loadTreeDataType === 'default') {\r\n                    return cmpRef.instance.loadDataType === 'all';\r\n                } else {\r\n                    return this.ins.loadTreeDataType === 'loadall';\r\n                }\r\n            };\r\n\r\n            const contextMenus = [\r\n                {\r\n                    id:6, code: 'checkchildnodes', title: 'å¾éä¸çº§æ°æ®',\r\n                    visible: (e) => {\r\n                        // console.log(e);\r\n                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length\r\n                    },\r\n                    handle: (t) => {\r\n                        if (cmpRef) {\r\n                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter(n => n.selectable).map(n => n[this.ins.idField]);\r\n                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);\r\n                            cmpRef.instance.checkedNodes(nodeIds);\r\n                            cmpRef.instance.selectNodes(nodeIds);\r\n                        }\r\n                    }\r\n                },\r\n                {\r\n                    id:5, code: 'uncheckchildnodes', title: 'åæ¶å¾éä¸çº§æ°æ®',\r\n                    visible: (e) => {\r\n                        // console.log(e);\r\n                        return !e.data.node.selectable && !this.ins.singleSelect && e.data.node.children && e.data.node.children.length\r\n                    },\r\n                    handle: (t) => {\r\n                        if (cmpRef) {\r\n                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);\r\n                            const nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter(n => n.selectable).map(n => n[this.ins.idField]);\r\n                            cmpRef.instance.unCheckedNodes(nodeIds);\r\n                            cmpRef.instance.unSelectNodes(nodeIds);\r\n                        }\r\n                    }\r\n                },\r\n                '-',\r\n                {\r\n                    id: 1, code: 'expandall', title: language.expandall, handle: (t) => {\r\n                        if (cmpRef && isLoadAllTreeData()) {\r\n                            cmpRef.instance.expandAll();\r\n                        } else {\r\n                            // åéè¯·æ±è·åæ°æ®\r\n                            this.reloadTreeDataForExpand(-1);\r\n                        }\r\n                    }\r\n                },\r\n                { id: 2, code: 'collapseall', title: language.collapseall, handle: (t) => {\r\n                    if (cmpRef) {\r\n                        cmpRef.instance.collapseAll();\r\n                    }\r\n                } },\r\n                '-',\r\n                {\r\n                    id: 3, title: language.expandByLayer,\r\n                    children: levelMenus\r\n                }\r\n            ];\r\n            this.ins.treeTableOptions.contextMenuItems = contextMenus;\r\n\r\n            cmpRef.instance.beforeShowContextMenu = () => {\r\n                return of({show: !cmpRef.instance.state.searched});\r\n            };\r\n        }\r\n    }\r\n\r\n    getCmpHeight(isFav = false) {\r\n        return this.ins.dialogMgr.getHeight() - (isFav ? 10 :this.ins.getFilterBarHeight());\r\n    }\r\n\r\n    createContent(opts: any): ComponentRef<any> {\r\n\r\n        if (this.ins.componentRef) {\r\n            return;\r\n        }\r\n\r\n        const type = this.ins.getComponentType();\r\n\r\n        const cmpFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef: ComponentRef<any> = null;\r\n        if (this.ins.isDoublleList()) {\r\n            cmpRef = this.ins.centerContainer.createComponent(cmpFac);\r\n        } else {\r\n            cmpRef = this.ins.contentContainer.createComponent(cmpFac);\r\n        }\r\n\r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n\r\n            opts.fast = true;\r\n            opts.fitColumns = false;\r\n            \r\n            this.useContextMenuForTree(cmpRef);\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n        opts.autoFitColumns = true;\r\n\r\n        const ttOpts = this.ins.treeTableOptions || {};\r\n        Object.assign(cmpRef.instance, opts, { allColumnsTitle: this.ins.allColumnsTitle, ...ttOpts });\r\n\r\n        this.ins.componentRef = cmpRef;\r\n        this.resizeComponent();\r\n        return cmpRef;\r\n    }\r\n\r\n    // åå»ºæ¶èCMP\r\n    createFavoritesContent(opts: any): ComponentRef<any> {\r\n        const type = this.ins.getComponentType();\r\n        \r\n        const cmpFac = this.ins.cfr.resolveComponentFactory(type);\r\n        let cmpRef = null;\r\n        cmpRef = this.ins.favoritesContainer.createComponent(cmpFac);\r\n        \r\n        if (this.ins.isTree()) {\r\n            opts.fit = true;\r\n            opts.pagination = false;\r\n        } else {\r\n            opts.fill = true;\r\n        }\r\n        opts.autoFitColumns = true;\r\n\r\n        Object.assign(cmpRef.instance, opts, {\r\n            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),\r\n            height: this.ins.dialogMgr.getHeight()\r\n        });\r\n\r\n\r\n        // è®¢éæ¶èå¤¹åè¡¨ä¸­ç»ä»¶çç¸å³äºä»¶\r\n        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);\r\n\r\n        return cmpRef;\r\n    }\r\n\r\n    resizeComponent(type: ComponentInstanceType = 'datatable') {\r\n        const size = {\r\n            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),\r\n            height: this.getCmpHeight(type == 'fav') \r\n        };\r\n\r\n        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {\r\n            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - this.ins.getSpaceWidth(true);\r\n        }\r\n\r\n        this.getComponentInstance(type).resize(size);\r\n    }\r\n\r\n    private getChildNodes(node: TreeNode) {\r\n        const nodes: any = [];\r\n        if (node.selectable || node.selectable === undefined) {\r\n            nodes.push(node);\r\n        }\r\n        if (node.children && node.children.length) {\r\n            node.children.forEach(n => {\r\n                nodes.push(...this.getChildNodes(n));\r\n            })\r\n        }\r\n\r\n        return nodes;\r\n    }\r\n\r\n    /** åå»ºå·¦ä¾§ç»ä»¶ */\r\n    createLeftComponent(ops: any) {\r\n        let dtFac = null;\r\n        if (this.ins.isDoublleList()) {\r\n            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);\r\n        }\r\n        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);\r\n        ops.height = this.ins.dialogMgr.getHeight();\r\n\r\n        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {\r\n            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;\r\n            this.ins.dialog.reSize({ width: this.ins.dialogWidth });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        if (ops.width !== this.ins.leftPanel.width) {\r\n            // é»è®¤ 1 : 2\r\n            this.ins.leftPanel.resize({\r\n                width: this.ins.leftPanel.width,\r\n                height: ops.height\r\n            });\r\n            this.ins.resizeCmp({ width: this.ins.dialog.size.width });\r\n        }\r\n\r\n        // this.resizeComponent();\r\n\r\n        this.ins.leftComponentRef.instance.lookupCmp = this.ins;\r\n        this.ins.leftComponentRef.instance.navOptions = ops;\r\n\r\n\r\n        this.ins.leftComponentRef.instance.selected\r\n            .pipe(\r\n                debounceTime(100),\r\n                switchMap((d: any) => {\r\n                    if (d && d.data) {\r\n                        this.ins.navigationFilter = {\r\n                            selected: d.data,\r\n                            idValue: this.getNavigationFilter(d.data),\r\n                            searchField: '',\r\n                            searchValue: ''\r\n                        };\r\n                    } else {\r\n                        this.ins.navigationFilter = undefined;\r\n                    }\r\n                    // å è½½å³ä¾§æ°æ®\r\n                    const p = {\r\n                        pageInfo: {\r\n                            pageIndex: 1, // tfs 638840\r\n                            pageSize: this.ins.gridOptions.pageSize\r\n                        }\r\n                    };\r\n\r\n                    if (this.ins.includeSubordinates && d && d.node && ops.treeInfo) {\r\n                        const {layerType, pathField, loadDataType, dataField} = ops.treeInfo\r\n                        if (loadDataType === 'all') {\r\n                            const rowDatas = this.getChildNodes(d.node).map(n => n.data);\r\n                            this.ins.navigationFilter.idValue = this.getNavigationFilter(rowDatas);\r\n                        } else {\r\n                            if (layerType == 'pathcode') {\r\n                                // p['navNodePathCode'] = d.data[dataField][pathField];\r\n                                p['navNodePathCode'] = this.ins.getPathCode(d.data, ops.treeInfo);\r\n                                this.ins['navNodePathCode'] = p['navNodePathCode'];\r\n                            }\r\n                        }\r\n                    } else  {\r\n                        this.ins['navNodePathCode'] = '';\r\n                    }\r\n\r\n                    const dataCmpRef = this.getComponentInstance();\r\n                    const { sortName, sortOrder } = dataCmpRef;\r\n                    Object.assign(p, { search: this.ins._searchState, sortName, sortOrder });\r\n                    return this.ins.httpMgr.getData(p, 'list');\r\n                })\r\n            )\r\n            .subscribe(res => {\r\n                this.ins.closeLoading();\r\n                this.ins.loadDataWhenOpen = true;\r\n\r\n                // if (this.ins.useFavorite && !this.ins.isTree()) {\r\n                //     this.ins.favHelper.updateFavoritesStatus(res.items);\r\n                // }\r\n                // this.ins.loadDataTableData(res);\r\n                \r\n                this.ins.loadData(res, false);\r\n\r\n                setTimeout(() => {\r\n                    // éä¸­æ°æ®\r\n                    this.ins.selectionMgr.selectCurrentValue();\r\n                    this.ins.changeDetector.detectChanges();\r\n                });\r\n            });\r\n\r\n        return this.ins.leftComponentRef.instance.createComponent();\r\n    }\r\n\r\n    // è·åå³èæ°æ®, å³ä¾§æ°æ®ä¸­ å³èåå­æ®µçå¼\r\n    private getNavigationFilter(navRow: any) {\r\n        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {\r\n            const result = [];\r\n            this.ins.navigationOptions.relations.forEach(r => {\r\n                const k = r.groupField;\r\n                const dField = r.helpField;\r\n                const rf: any = { fieldName: dField, fieldValue: '' };\r\n\r\n                if (Array.isArray(navRow)) {\r\n                    const vals = navRow.map(n => {\r\n                        return k.split('.').reduce((o, c) => {\r\n                            return o[c];\r\n                        }, n);\r\n                    });\r\n                    rf.fieldValue = vals.join(',');\r\n                } else {\r\n                    rf.fieldValue = k.split('.').reduce((o, c) => {\r\n                        return o[c];\r\n                    }, navRow);\r\n                }\r\n\r\n                result.push(rf);\r\n            });\r\n            return result;\r\n        }\r\n\r\n        return '';\r\n    }\r\n}\r\n","import { RendererStyleFlags2 } from '@angular/core';\r\nimport { fromEvent, of, race, Subscription } from 'rxjs';\r\nimport { buffer, bufferCount, debounceTime, filter, first, map, repeat } from 'rxjs/operators';\r\nimport { PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport class LookupDialogManager {\r\n\r\n    private lookupInit: Subscription = null;\r\n    private _loadDataWhenOpen = true;\r\n    private _navSelectedId = '';\r\n    private _selectFirstInNav = false;\r\n    private dialogClosedSubscription: Subscription = null;\r\n    private dialogOpenedSubscription: Subscription = null;\r\n    \r\n    private keyDownHandler = null;\r\n    private _okbtnclick$: Subscription = null;\r\n\r\n    constructor(private ins: LookupGridComponent) { }\r\n\r\n    private unsubscribes(){\r\n        if (this.lookupInit) {\r\n            this.lookupInit.unsubscribe();\r\n            this.lookupInit = null;\r\n        }\r\n\r\n        if (this.dialogClosedSubscription) {\r\n            this.dialogClosedSubscription.unsubscribe();\r\n            this.dialogClosedSubscription = null;\r\n        }\r\n\r\n        if (this.dialogOpenedSubscription) {\r\n            this.dialogOpenedSubscription.unsubscribe();\r\n            this.dialogOpenedSubscription = null;\r\n        }\r\n\r\n    }\r\n    // å¸®å©çªå£å³é­ååä¸äºæ¸çå·¥ä½\r\n    dialogClosed() {\r\n        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {\r\n            this.ins.displayText = this.ins.originalText;\r\n            this.ins.setModelValue(this.ins.displayText);\r\n        }\r\n        if (this.ins.componentRef) {\r\n            this.ins.componentRef.destroy();\r\n            this.ins.componentRef = null;\r\n        }\r\n\r\n        if (this.ins.favoritesComponentRef) {\r\n            this.ins.favoritesComponentRef.destroy();\r\n            this.ins.favoritesComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.contentContainer) {\r\n            this.ins.contentContainer.clear();\r\n        }\r\n\r\n        if (this.ins.centerContainer) {\r\n            this.ins.centerContainer.clear();\r\n        }\r\n\r\n        if (this.ins.leftComponentRef) {\r\n            this.ins.leftComponentRef.destroy();\r\n            this.ins.leftComponentRef = null;\r\n        }\r\n\r\n        if (this.ins.leftContainer) {\r\n            this.ins.leftContainer.clear();\r\n        }\r\n\r\n\r\n        this.ins.isShow = false;\r\n        this.ins.isTextChange = false;\r\n        if (this.ins.dialog) {\r\n            this.ins.content = null;\r\n        }\r\n\r\n        this.ins.navigationFilter = null;\r\n\r\n        this.ins.lookupUtils.pendingEnd();\r\n\r\n        if (this.ins.helpId) {\r\n            this.ins.displayType = '';\r\n        }\r\n\r\n\r\n        this.unsubscribes();\r\n\r\n        // this.ins.items = [];\r\n        this.ins.favoriteItems = [];\r\n        this.ins.lookupSelectionSer.initFavoriteItems([]);\r\n\r\n        this.ins.isTabChanged = false;\r\n\r\n        if (this.ins.uri) {\r\n            this.ins.items = [];\r\n        }\r\n        this.ins._searchState = null;\r\n\r\n\r\n        this.ins.pageIndex = 1;\r\n\r\n        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;\r\n        this.ins.navSelectedIds = this._navSelectedId;\r\n        this.ins.selectFirstInNav = this._selectFirstInNav;\r\n\r\n        this.ins.isGetAllChidlNodes = false;\r\n\r\n        this.ins.enableGetAllChildNodes = true;\r\n\r\n        // ä¿å­ä¸ªæ§åæ°æ®\r\n        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {\r\n            this.ins.httpMgr.submitFavoriteData('dialog closed event.');\r\n        }\r\n\r\n        if (this.keyDownHandler) {\r\n            this.keyDownHandler();\r\n            this.keyDownHandler = null;\r\n        }\r\n        if (this.ins.inputGroup) {\r\n            this.ins.inputGroup.focus();\r\n        }\r\n\r\n        this.ins.userInitialConfig.reset();\r\n\r\n        this.ins.treeInfo = this.ins._treeInfo_;\r\n\r\n        this.ins.lookupUtils.destroy();\r\n        this.ins.dialogClosed.emit();\r\n\r\n        if (this.ins.includeSubordinates$$) {\r\n            this.ins.includeSubordinates$$.unsubscribe();\r\n            this.ins.includeSubordinates$$ = null;\r\n        }\r\n\r\n        this.ins.conditions = [];\r\n        \r\n\r\n        this.ins.searching = false;\r\n\r\n        if (this.ins.dtEventMgr) {\r\n            this.ins.dtEventMgr['_sortState'] = null;\r\n        }\r\n\r\n        if (this.ins.ttEventMgr) {\r\n            this.ins.ttEventMgr['_sortState'] = null;\r\n        }\r\n\r\n        if (this._okbtnclick$) {\r\n            this._okbtnclick$.unsubscribe();\r\n            this._okbtnclick$ = null;\r\n        }\r\n    }\r\n\r\n    onDialogCreated() {\r\n        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;\r\n        this._navSelectedId = this.ins.navSelectedIds;\r\n        this._selectFirstInNav = this.ins.selectFirstInNav;\r\n\r\n        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe(dlg => {\r\n            if (dlg) {\r\n                this.ins.setContainerMargin();\r\n                if (this.ins.dialogOpenedSubscription) {\r\n                    this.ins.dialogOpenedSubscription.unsubscribe();\r\n                }\r\n                if (this.ins.dialogClosedSubscription) {\r\n                    this.ins.dialogClosedSubscription.unsubscribe();\r\n                }\r\n                this.registerDialogEvent();\r\n                if (this.ins.isRecordSize) {\r\n                    const dlgSize = this.ins.personalConfigService.getDialogSize();\r\n                    if (dlgSize) {\r\n                        const { width, height } = dlgSize;\r\n                        this.ins.dialogWidth = width ? width : this.ins.dialogWidth;\r\n                        this.ins.dialogHeight = height ? height : this.ins.dialogHeight;\r\n\r\n                        // 20200908 æ´æ°ç°çªå£çå°ºå¯¸ by Lucas\r\n                        dlg.width = this.ins.dialogWidth;\r\n                        dlg.height = this.ins.dialogHeight;\r\n                    }\r\n                }\r\n                dlg.show();\r\n            }\r\n        });\r\n\r\n        this.ins.subscriptions.push(this.ins.dialogCreatedSubscription);\r\n    }\r\n\r\n    checkDictPickingResult(pr: PickingResult | any) {\r\n        let o = true;\r\n        if (pr === undefined || pr === null || pr === '') {\r\n            o = true;\r\n        }\r\n\r\n        if (typeof pr === 'boolean') {\r\n            o = pr;\r\n        }\r\n\r\n        let customData, selectedIds, message;\r\n        customData = this.ins.customData;\r\n        selectedIds = this.ins.selectedIds;\r\n\r\n        if (typeof pr === 'object') {\r\n            if (pr.showDialog === undefined) {\r\n                o = true;\r\n            } else {\r\n                o = pr.showDialog;\r\n            }\r\n\r\n            if (pr.hasOwnProperty('data')) {\r\n                /** ä¿å­å¸®å©åä¼ éçæ°æ® */\r\n                customData = pr.data;\r\n            }\r\n            selectedIds = pr.selectedIds || null;\r\n\r\n            if (pr.message) {\r\n                message = pr.message;\r\n            }\r\n        }\r\n\r\n        return { show: o, customData, selectedIds, message };\r\n    }\r\n\r\n    canOpenDialog(pr: PickingResult | any) {\r\n        const {show, customData, selectedIds, message} = this.checkDictPickingResult(pr);\r\n        this.ins.customData = customData;\r\n        this.ins.selectedIds = selectedIds || null;\r\n        if (message) {\r\n            this.ins.notifyService.warning(message);\r\n        }\r\n\r\n        this.ins.isReady = false;\r\n        this.ins.isShow = show;\r\n    }\r\n\r\n    getHeight() {\r\n        return this.ins.dialog.size.contentHeight -\r\n                this.ins.containerMargin.bottom -\r\n                this.ins.containerMargin.top -\r\n                (!this.ins.useNewLayout ? (this.ins.useFavorite ? 40 :  0) : 56);\r\n            \r\n    }\r\n\r\n\r\n    private getMainGridSize() {\r\n        if (this.ins.isDoublleList()) {\r\n            return {\r\n                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,\r\n                height: this.getHeight()\r\n            };\r\n        }\r\n\r\n        return {\r\n            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,\r\n            height: this.getHeight()\r\n        };\r\n    }\r\n\r\n    resetDialogContentHeight() {\r\n        const { header: hHeight, footer: fHeight } = this.ins.dialog.size;\r\n        return this.ins.dialogHeight - hHeight - fHeight -  this.ins.containerMargin.bottom - this.ins.containerMargin.top;\r\n    }\r\n\r\n\r\n    private registerOkBtnEvent() {\r\n        if (this.ins.okButton) {\r\n            const doubleClickDuration = 250;\r\n            const leftClick$ = fromEvent(this.ins.okButton.nativeElement, 'click').pipe(filter((event: any) => event.button === 0));\r\n            const debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));\r\n            const clickLimit$ = leftClick$.pipe(bufferCount(2));\r\n            const bufferGate$ = race(debounce$, clickLimit$)\r\n            .pipe(\r\n              // We are only interested in the first event. After that\r\n              // we want to restart.\r\n              first(),\r\n              repeat(),\r\n            );\r\n\r\n            this._okbtnclick$ = leftClick$.pipe(\r\n                buffer(bufferGate$),\r\n                // Here we map the buffered events into the length of the buffer\r\n                // If the user clicked once, the buffer is 1. If he clicked twice it is 2\r\n                map(clicks => clicks.length)\r\n            ).subscribe(clicks => {\r\n                this.ins.selectItem();\r\n            });\r\n        }\r\n    }\r\n\r\n    /** æ³¨åå¼¹åºçªå£çäºä»¶ */\r\n    private registerDialogEvent() {\r\n        this.dialogOpenedSubscription = this.ins.dialog.opened.subscribe(() => {\r\n\r\n            this.ins.dialogContentHeight = this.resetDialogContentHeight();\r\n\r\n            this.ins.gridOptions = Object.assign(this.ins.gridOptions, this.getMainGridSize());\r\n            this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';\r\n\r\n            if (this.ins.displayType && this.ins.customDisplayType) {\r\n                this.ins.componentRef = this.ins.lookupCmpMgr.createContent(this.ins.gridOptions);\r\n                this.ins.lookupCmpMgr.createFavoriteComponent();\r\n            }\r\n\r\n            this.ins.initData();\r\n\r\n            // ä¿®æ¹å¸®å©çªå£çç¶æ\r\n            this.ins.lookupUtils.pendingEnd();\r\n            this.ins.dialogOpened.emit();\r\n\r\n            // æ³¨åç¡®å®æé®ç¹å»äºä»¶\r\n            this.registerOkBtnEvent();\r\n\r\n        });\r\n\r\n        this.lookupInit = this.ins.lookupinitializationSubject.subscribe(() => {\r\n            this.ins.loadDataWhenOpen = true;\r\n            // æ³¨åå¿«æ·é®\r\n            this.registerShortcutKey();\r\n            // çå¬å·¦ä¾§å°ºå¯¸ååäºä»¶\r\n            if (this.ins.leftPanel) {\r\n                if (!this.ins.leftPanel.resizing.observers.length) {\r\n                    const leftPanelResize$ = this.ins.leftPanel.resizing.pipe(\r\n                        debounceTime(50)\r\n                    ).subscribe((s: any) => {\r\n                        const size = {\r\n                            width: this.ins.dialog.size.width - s.size.width - this.ins.getSpaceWidth(true),\r\n                            height: this.getHeight() - this.ins.getFilterBarHeight()\r\n                        }\r\n                        this.ins.componentRef.instance.resize(size);\r\n                        this.ins.leftComponentRef.instance.resize(s.size);\r\n                    });\r\n\r\n                    this.ins.subscriptions.push(leftPanelResize$);\r\n                }\r\n                if (this.ins.isDoublleList() && this.ins.leftComponentRef) {\r\n                    this.ins.leftComponentRef.instance.updateScrollPosition();\r\n                }\r\n            }\r\n\r\n            if (this.ins.cascadeSelect) {\r\n                const {selectEl, panelRef } = this.ins.cascadeSelect;\r\n                this.ins.cascadeSelect.beforeShow = () => {\r\n                    if (selectEl && panelRef) {\r\n                        panelRef.style.left = `${selectEl.offsetLeft}px`;\r\n                        if (this.ins.localService.localeId.toLocaleLowerCase() == 'en') {\r\n                            panelRef.style.width = 'auto';\r\n                            panelRef.style.maxWidth = '200px'\r\n                        }\r\n                        return of(true);\r\n                    }\r\n                }\r\n            }\r\n        });\r\n\r\n        this.dialogClosedSubscription = this.ins.dialog.closed.subscribe(() => {\r\n            // è¾å¥æ¡åååï¼å¼¹åºçªå£æªéæ©æ°æ®å³é­çªå£æ¶ï¼è¿ååå§å¼\r\n            this.ins.dialogMgr.dialogClosed();\r\n        });\r\n\r\n        // this.ins.subscriptions.push(this.ins.dialogClosedSubscription);\r\n    }\r\n\r\n    private registerShortcutKey() {\r\n        // åè½¦ï¼ä¸ç¡®å®æé®å¤çé»è¾ä¸è³ã\r\n        const dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');\r\n\r\n        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {\r\n            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (e: KeyboardEvent) => {\r\n                e.stopPropagation();\r\n                const { moveUp, moveDown, searchFocus, confirm, nextPager, prevPager, expand, collapse } = this.ins.shortcutKey;\r\n                const arrowKey = [moveUp, moveDown, expand, collapse];\r\n                if (arrowKey.includes(e.code)) {\r\n                    this.ins.componentRef.instance.onKeydownEvent(e);\r\n                } else if (e.key === confirm) {\r\n                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {\r\n                        return;\r\n                    }\r\n                    this.ins.okButton.nativeElement.click();\r\n                } else if (e.code === searchFocus) { // å¸®å©çªå£æ¥è¯¢è¾å¥æ¡ç¦ç¹\r\n                    e.preventDefault();\r\n                    this.ins.componentRef.instance.inputGroup.focus();\r\n                } else if (!this.ins.isTree() && (e.code === nextPager || e.code === prevPager )) {  // åé¡µ\r\n                    const isNextPager = e.code === nextPager;\r\n                    this.paginationKeyDownHandler(isNextPager);\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    private paginationKeyDownHandler(next = true) {\r\n        const datatableRef = this.ins.componentRef.instance;\r\n        const {pageIndex, pageSize, total} = datatableRef;\r\n        const pagerCount = Math.ceil(total / pageSize);\r\n\r\n        let newPageNum = pageIndex;\r\n        if (next) {\r\n            newPageNum = newPageNum + 1;\r\n        } else {\r\n            newPageNum = newPageNum - 1;\r\n        }\r\n\r\n        if (newPageNum > pagerCount || newPageNum < 1) {\r\n            newPageNum = pageIndex;\r\n        }\r\n\r\n        this.ins.componentRef.instance.onPageChange({ pageSize, pageIndex: newPageNum });\r\n    }\r\n\r\n}\r\n\r\n","import { Observable, of, BehaviorSubject, Subject } from 'rxjs';\r\nimport { switchMap } from 'rxjs/operators';\r\nimport { FavoriteAction } from '../lookup-displaytype';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\n\r\nexport interface SelectionState {\r\n    selecteditems: any[];\r\n    favoriteItems: any[];\r\n    quickItems: any[];\r\n}\r\n\r\nexport class LookupSelectionService {\r\n\r\n    private state: SelectionState = {\r\n        selecteditems: [],\r\n        favoriteItems: [],\r\n        quickItems: []\r\n    };\r\n\r\n    state$: BehaviorSubject<SelectionState> = new BehaviorSubject(this.state);\r\n\r\n    selected$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.selecteditems))\r\n    );\r\n\r\n    favoriteItems$: BehaviorSubject<any> = new BehaviorSubject({items: this.state.favoriteItems, action: null });\r\n\r\n    quickItems$: Observable<any[]> = this.state$.pipe(\r\n        switchMap(n => of(n.quickItems))\r\n    );\r\n\r\n    selectionChanged$ = new Subject();\r\n\r\n    private get idField() {\r\n        return this.ins.idField;\r\n    }\r\n\r\n    constructor(private ins: LookupGridComponent) {\r\n    }\r\n\r\n    initFavoriteItems(items: any[]) {\r\n        this.state.favoriteItems = items || [];\r\n    }\r\n\r\n\r\n    //#region æ¶èæ°æ®\r\n\r\n    updateFavoriteData(data: any, action: FavoriteAction) {\r\n\r\n        if (this.ins.savingFaoriteData) {\r\n            return;\r\n        }\r\n\r\n        if (action === FavoriteAction.add) {\r\n            this.state.favoriteItems = this.state.favoriteItems.concat([data]);\r\n        } else {\r\n            this.state.favoriteItems = this.state.favoriteItems.filter(n => n[this.idField] !== data[this.idField]);\r\n        }\r\n\r\n        this.favoriteItems$.next({ items: this.state.favoriteItems, action, data });\r\n    }\r\n\r\n    //#endregion\r\n\r\n    //#region å¤éæ°æ®\r\n\r\n    loadSelections( data: []) {\r\n        this.state.selecteditems = [...data];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    getSelections() {\r\n        return [...this.state.selecteditems];\r\n    }\r\n\r\n    select(item: any) {\r\n        if (item) {\r\n            this.state.selecteditems = [...this.state.selecteditems, item];\r\n            this.state$.next(this.state);\r\n\r\n            this.selectionChanged$.next({ data: [item[this.idField]], selected: true });\r\n        }\r\n    }\r\n\r\n    unselectByPathcode(pathcode: string) {\r\n        const ids = [];\r\n        this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n            const _pathcode = this.ins.getPathCode(n, this.ins.treeInfo);\r\n            const r = _pathcode && _pathcode.indexOf(pathcode) !== 0;\r\n            if (!r) {\r\n                ids.push(n[this.idField]);\r\n            }\r\n            return r;\r\n        });\r\n\r\n        this.selectionChanged$.next({ data: ids, selected: false });\r\n\r\n    }\r\n\r\n    updateSelections(data: any, checked = true) {\r\n\r\n        if (!Array.isArray(data)) {\r\n            data = [data];\r\n        }\r\n\r\n        const items = [ ...data ];\r\n        const idField = this.idField;\r\n        const ids = items.map(n => n[idField]);\r\n        if (checked) {\r\n            if (this.state.selecteditems && !this.state.selecteditems.length) {\r\n                this.state.selecteditems = items;\r\n            } else {\r\n                ids.forEach((n, i) => {\r\n                    if (!this.state.selecteditems.find(r => r[idField] == n)) {\r\n                        this.state.selecteditems.push(items[i]);\r\n                    }\r\n                });\r\n            }\r\n        } else {\r\n            if (data) {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return ids.indexOf(n[idField]) === -1;\r\n                });\r\n            }\r\n        }\r\n\r\n        this.state$.next(this.state);\r\n        this.selectionChanged$.next({ data: ids, selected: checked });\r\n    }\r\n\r\n    unSelect(id: any) {\r\n        if (id) {\r\n            if (Array.isArray(id)) {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => {\r\n                    return id.indexOf(n[this.idField]) === -1;\r\n                });\r\n                this.selectionChanged$.next({ data: id, selected: false });\r\n            } else {\r\n                this.state.selecteditems = this.state.selecteditems.filter(n => n[this.idField] != id);\r\n                this.selectionChanged$.next({ data: [id], selected: false });\r\n            }\r\n\r\n            this.state$.next(this.state);\r\n        }\r\n    }\r\n\r\n    clearSelections() {\r\n        this.state.selecteditems = [];\r\n        this.state$.next(this.state);\r\n    }\r\n\r\n    //#endregion\r\n\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(lucas huang)\r\n * @Date: 2018-11-23 11:23:12\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2020-10-20 20:18:26\r\n * @Company: Inspur\r\n * @Version: v0.3.x\r\n */\r\n\r\nimport {Component, Input, ViewChild, OnChanges, SimpleChanges,\r\nEventEmitter,OnInit,Injector,ComponentFactoryResolver,\r\nOutput,ChangeDetectorRef,ViewEncapsulation,AfterViewInit,ViewContainerRef,\r\nforwardRef,ComponentRef,Type,ElementRef,NgZone,Renderer2,OnDestroy,HostListener,} from \"@angular/core\";\r\n\r\nimport { NG_VALUE_ACCESSOR } from \"@angular/forms\";\r\nimport { Observable, Subscription, of, Subject, BehaviorSubject } from \"rxjs\";\r\n\r\nimport { LocaleService } from \"@farris/ui-locale\";\r\nimport { IResizeEvent } from \"@farris/ui-draggable\";\r\nimport { MessagerService } from \"@farris/ui-messager\";\r\nimport { LoadingService, LoadingComponent } from \"@farris/ui-loading\";\r\nimport { DataTableComponent } from \"@farris/ui-datatable\";\r\nimport { TreeTableComponent, TreeNode } from \"@farris/ui-treetable\";\r\nimport { LayoutComponent, LayoutPanelComponent } from \"@farris/ui-layout\";\r\nimport { CommonUtils, DebugService, FarrisComponentInstanceService, OverLayHiddenService } from \"@farris/ui-common\";\r\nimport { EntityFilter, FilterCondition } from \"@farris/ui-common/types\";\r\nimport { ShortcutsService } from \"@farris/ui-shortcuts\";\r\nimport { InputGroupComponent } from \"@farris/ui-input-group\";\r\nimport { NotifyService } from \"@farris/ui-notify\";\r\n\r\nimport {\r\n    FAVORITE_FIELD_NAME,\r\n    INPUT_GROUP_ICON,\r\n    LookupGridDisplayType,\r\n    ExtInfoFormatter,\r\n    CustomDataFormatter,\r\n    QuickSelectOption,\r\n    QuickSelectDefaultOptions,\r\n    SearchBarMode,\r\n} from \"./lookup-displaytype\";\r\nimport { LookupComponent } from \"./lookup.component\";\r\nimport {\r\n    LookupGridOptions,\r\n    lookupGridDefaults,\r\n    LookupGridResult,\r\n    NavigationOptions,\r\n    DisplayInfo,\r\n    displayInfoDefault,\r\n    PickingResult,\r\n    TreeInfo,\r\n    LOAD_DATA_TYPE,\r\n    ONLY_SELECT_LEAF,\r\n    PersonalConfig} from \"./lookup-grid-options\";\r\nimport { ILookupHttpService, ServerSideToken } from \"./http/ILookupHttpService\";\r\nimport { NavigationFilter } from \"./http/RemoteParams\";\r\nimport { LookupLeftComponent } from \"./lookup-left.component\";\r\nimport { LookupDefaultMapping } from \"./lookup-defaut-mapping\";\r\nimport { LookupUtils } from \"./utils\";\r\nimport { PersonalConfigService } from \"./lookup-presonalConfig.service\";\r\nimport {\r\n    UtilService,\r\n    TreeNodeHelper,\r\n    FavoriteHelper,\r\n    SelectionManager,\r\n    DataTableEventManager,\r\n    TreeTableEventManager,\r\n    MultiSelectionManager,\r\n    LookupHttpManager,\r\n    LookupComponentManager,\r\n    LookupDialogManager,\r\n    onTextChanged,\r\n    LookupSelectionService,\r\n} from \"./services\";\r\nimport { catchError, map, switchMap } from \"rxjs/operators\";\r\n\r\nimport { EventManager } from \"@angular/platform-browser\";\r\nimport { cloneDeep } from \"lodash-es\";\r\nimport { SingleSelectDirective } from \"@farris/ui-forms\";\r\n\r\nexport const LOOKUPGRID_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => LookupGridComponent),\r\n    multi: true,\r\n};\r\n\r\n@Component({\r\n    selector: \"farris-lookup-grid\",\r\n    templateUrl: \"./lookup-grid.component.html\",\r\n    styleUrls: [\"./lookup-grid.component.scss\"],\r\n    providers: [\r\n        LOOKUPGRID_VALUE_ACCESSOR,\r\n        ShortcutsService,\r\n        LookupDefaultMapping,\r\n        LookupUtils,\r\n        PersonalConfigService,\r\n    ],\r\n    encapsulation: ViewEncapsulation.None,\r\n    exportAs: \"lookup\"\r\n})\r\nexport class LookupGridComponent\r\n    extends LookupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, OnDestroy\r\n{\r\n    groupIcon = INPUT_GROUP_ICON;\r\n    _displayType = \"\";\r\n\r\n    /** ä½¿ç¨è¡¨åè®¾è®¡å¨ä¸­çæ¾ç¤ºç±»åãå¦åä½¿ç¨åæ°æ®è®¾ç½®çæ¾ç¤ºç±»åã é»è®¤ï¼false */\r\n    @Input() customDisplayType = false;\r\n    @Input() viewType: \"text\" | \"tag\" = \"text\";\r\n    @Input()\r\n    get displayType() {\r\n        return this._displayType;\r\n    }\r\n    set displayType(val: string) {\r\n        if (val) {\r\n            const types = Object.values(LookupGridDisplayType);\r\n            const i = types.findIndex((n) => n === val.toUpperCase());\r\n            if (i > -1) {\r\n                const keys = Object.keys(LookupGridDisplayType);\r\n                this._displayType = LookupGridDisplayType[keys[i]];\r\n            }\r\n        } else {\r\n            this._displayType = val;\r\n        }\r\n    }\r\n    /** å¯ç¨æ¸ç©ºæé® */\r\n    @Input() enableClear = true;\r\n    /** æå¡å¨ç«¯æåº */\r\n    @Input() remoteSort = true;\r\n\r\n    @Input() condition: EntityFilter;\r\n    @Input() conditions: Array<FilterCondition>;\r\n\r\n    /** æ è¡¨æ¾ç¤ºå¨éå¤éæ¡ã é»è®¤ä¸æ¾ç¤º */\r\n    @Input() showCheckAll = false;\r\n\r\n    /** æ¯å¦å¯ç¨å¤é */\r\n    @Input() singleSelect = true;\r\n    /** å¤éåéç¬¦, é»è®¤ä¸º , */\r\n    @Input() multipleChoiceSeparator = \",\";\r\n    /** ä¸»é®å­æ®µ */\r\n    @Input() idField?: string;\r\n    /** å¯ä»¥ä¸ºåæ°æ®IDãwebapiURL */\r\n    @Input() uri?: string = '';\r\n    /**\r\n     * BE REST RUI\r\n     * - æ­¤å¤è®¾ç½®å uri å¤±æ\r\n     */\r\n    @Input() beUri = \"\";\r\n    /**\r\n     * æ¾ç¤ºè¿æ»¤å·¥å·æ¡; é»è®¤ true\r\n     */\r\n    @Input() showFilterBar = true;\r\n    /** æ¯å¦å¯ç¨åé¡µ */\r\n    @Input() pagination = true;\r\n    /** å½åé¡µç´¢å¼ï¼ä» 1å¼å§ */\r\n    @Input() pageIndex = 1;\r\n    /** æ¯é¡µè®°å½æ° */\r\n    @Input() pageSize = 20;\r\n    /** å¯ç¨åé¡µè®°å½æ°åè¡¨ */\r\n    @Input() pageList = [10, 20, 30, 50, 100];\r\n    /** æ»è®°å½æ° */\r\n    @Input() total = 0;\r\n    /** å¯æå¨å */\r\n    // @Input() resizableColumns = true;\r\n    /** æ¾ç¤ºåä¿¡æ¯, é»è®¤ä¸º [] */\r\n    @Input() columns: any[] = [];\r\n\r\n    /** å¸®å©æ¥è¯¢æ¯å¦ä¸ºè¿ç«¯æ¥è¯¢ */\r\n    @Input() remoteSearch = true;\r\n\r\n    /** ææ¬åååï¼è¿è¡æå¡å¨ç«¯æ¥è¯¢ */\r\n    @Input() searchOnServer = true;\r\n    /** ä¸è¿è¡æå¡å¨æ¥è¯¢ï¼æå¥ç®å¥ */\r\n    @Input() nosearch = false;\r\n\r\n    /**\r\n     * å¯ç¨ä»»æè¾å¥åï¼å¼éè¿è¾å¥æ¶è§¦å\r\n     */\r\n    @Output() clearMappings = new EventEmitter();\r\n\r\n    /**\r\n     * åè®¸è¾å¥çå­ç¬¦æå¤§é¿åº¦ã\r\n     * ä»»æè¾å¥æ¶ï¼æ­¤å±æ§ææ\r\n     */\r\n    @Input() maxLength;\r\n\r\n    @Input() mappingFn: (rowData, mapFields, bindingData?: any) => void;\r\n    /** æ°æ®åè¡¨ */\r\n    @Input() items: any;\r\n    // æ¶èåè¡¨\r\n    @Input() favoriteItems: any[] = [];\r\n    /** èªå®ä¹æ°æ® */\r\n    @Input() customData: any;\r\n\r\n    /** ç»å®å¼æå¨çå¯¹è±¡ */\r\n    @Input() bindingData: {};\r\n\r\n    @Input() treeInfo: TreeInfo;\r\n    /** æ¯å¦å¯ç¨çº§èéæ©æ§å¶éé¡¹ */\r\n    @Input() enableCascade = false;\r\n    /** çº§èæ§å¶é»è®¤å¼ï¼ enable: åæ­¥éæ©, upï¼åå«ä¸çº§, downï¼åå«ä¸çº§, disableï¼ä»éæ©èªèº« */\r\n    @Input() cascadeStatus: \"enable\" | \"up\" | \"down\" | \"disable\" = \"enable\";\r\n    /** åå«çº§èéé¡¹çå¯ç¨ç¶æï¼é»è®¤å¨é¨å¯ç¨ */\r\n    @Input() cascadeItems = {\r\n        enable: true,\r\n        up: true, \r\n        down: true,\r\n        disable: true\r\n    }\r\n    /** æ¾ç¤ºçº§èæ§å¶ */\r\n    @Input() showCascadeControl = true;\r\n\r\n    @Input() placeholder = \"\";\r\n\r\n    /** æ¾ç¤ºå·²éè®°å½åè¡¨ã é»è®¤ä¸º false ä¸æ¾ç¤º */\r\n    @Input() showSelected = false;\r\n\r\n    /** åºç¨æ¶èå¤¹ */\r\n    @Input() useFavorite = false;\r\n    /** æ¶èæ°æ®æ¥èªäºï¼ locale: æ¬å°å­å¨ï¼ remote: æå¡å¨ç«¯å­å¨ */\r\n    @Input() favoriteDataFrom: \"locale\" | \"remote\" = \"remote\";\r\n    /** ä½¿ç¨æç¤º,å¿«æ·éæ© */\r\n    @Input() useTip = false;\r\n    /** è®°å½çªå£å¤§å° */\r\n    @Input() isRecordSize = false;\r\n\r\n    /** å¿«ééæ© */\r\n    @Input() userId: string;\r\n\r\n    /** æ¯å¦å¯ç¨éä¸­valueå¼å¯¹åºçè¡æ°æ®ï¼é»è®¤ true */\r\n    @Input() enableToSelect = true;\r\n\r\n    @Input() enableFindText = false;\r\n    /** -1: ä¸å±å¼ï¼ 0: å¨é¨å±å¼ï¼>0: å±å¼å°æå®çº§æ° */\r\n    @Input() expandLevel = -1;\r\n\r\n    @Input() navTreeTableOptions: any = {};\r\n    @Input() treeTableOptions: any = {};\r\n    @Input() dataTableOptions: any = {};\r\n\r\n\r\n    defaultTreeTableOptions = {\r\n        maxLevel: 9,\r\n        enableContextMenu: false,\r\n        contextMenuItems: [],\r\n    };\r\n\r\n    /** æ å½¢å¸®å©æ°æ®å è½½æ¹å¼ï¼ default: åç½®åæ°ï¼ loadall: å è½½ææ layerloadï¼åå±å è½½ */\r\n    @Input() loadTreeDataType: \"default\" | \"loadall\" | \"layerload\" = \"default\";\r\n\r\n    /** çªå£æå¼åç«å³å è½½æ°æ®ï¼é»è®¤ä¸º true */\r\n    @Input() loadDataWhenOpen = true;\r\n\r\n    /**\r\n     * å¯¼èªåè¡¨ï¼æ åè¡¨å¨å¸®å©æå¼åéä¸­çæ°æ®;\r\n     * è®¾ç½®åï¼`selectFirstInNav` å¤±æï¼\r\n     */\r\n    @Input() navSelectedIds = \"\";\r\n\r\n    /**\r\n     * å¯¼èªå¸®å©ï¼éä¸­ç¬¬1æ¡æ°æ®ï¼é»è®¤ä¸º false;\r\n     * æ³¨æï¼å½`navSelectedIds`ä¸ä¸ºç©ºæ¶ï¼æ­¤å±æ§å¤±æã\r\n     */\r\n    @Input() selectFirstInNav = false;\r\n\r\n    /** å¯ç¨æé å®æ´æ è¿æ»¤ */\r\n    @Input() enableFullTree = true;\r\n\r\n    /** æ¾ç¤ºææ¬èªå®ä¹å½æ° */\r\n    @Input() displayFormatter: (\r\n        value: string,\r\n        data: any,\r\n        instance: any\r\n    ) => string = undefined;\r\n    /** æ¾ç¤ºææ¬å­æ®µéåï¼ä»¥ è±æ éå·éå¼ */\r\n    @Input() displayFields = \"\";\r\n    @Input() displayTextSeparator = \"_\";\r\n\r\n    /**\r\n     * å¸®å©åæ°æ®IDï¼ä¸ä¸ºç©ºæ¶è°ç¨æå®çURI\r\n     * /api/runtime/bcc/v1.0/help/data/{helpId}\r\n     */\r\n    @Input() helpId = \"\";\r\n    /** ææ¬å¯¹é½æ¹å¼ï¼ left | center | right; é»è®¤ left */\r\n    @Input() textAlign = \"left\";\r\n\r\n    /** é¼ æ æ»è¿è¾å¥æ¡æ¶æ¾ç¤ºè¾å¥æ¡åçææ¬ä¿¡æ¯ */\r\n    @Input() enableTitle = true;\r\n    @Input() useExtendInfo = false;\r\n    @Input() extInfoFields = \"\";\r\n    @Input() extInfoFormatter: ExtInfoFormatter;\r\n    @Input() extendInfo = \"\";\r\n    /** IDE è®¾è®¡å¨èªå®ä¹æ ¼å¼å 2103 */\r\n    @Input() customFormatter: CustomDataFormatter = null;\r\n    @Input() customNavFormatter: CustomDataFormatter = null;\r\n\r\n    /** èªå®ä¹ç¡®å®äºä»¶ */\r\n    @Input() okHandler = null;\r\n    /** èªå®ä¹åæ¶äºä»¶ */\r\n    @Input() cancelHandler = null;\r\n\r\n    @Input() tagboxHeight = \"auto\";\r\n    @Input() maxTagboxHeight;\r\n\r\n    /** å¯ç¨è·åææå­çº§æ°æ®çåè½,ä»æ¯æåçº§ç  */\r\n    @Input() enableGetAllChildNodes = true;\r\n\r\n    @Input() shortcutKey = {\r\n        /** æå¼å¸®å©çªå£ */\r\n        open: \"ArrowRight\",\r\n        /** ç¡®è®¤éæ©æ°æ® */\r\n        confirm: \"Enter\",\r\n        /** æç´¢æ¡ç¦ç¹ */\r\n        searchFocus: \"F3\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveUp: \"ArrowUp\",\r\n        /** éä¸­ä¸ä¸æ¡ */\r\n        moveDown: \"ArrowDown\",\r\n        /** å±å¼èç¹ */\r\n        expand: \"ArrowRight\",\r\n        /** æå èç¹ */\r\n        collapse: \"ArrowLeft\",\r\n        /** ä¸ä¸é¡µ */\r\n        nextPager: \"PageDown\",\r\n        /** ä¸ä¸é¡µ */\r\n        prevPager: \"PageUp\",\r\n    };\r\n    /** å¿«æ·éæ©ç¸å³éç½®é¡¹ï¼é»è®¤ä¸º null, å³ä¸å¯ç¨æ­¤åè½ */\r\n    @Input() quickSelect: QuickSelectOption = null;\r\n\r\n    /** æ å½¢å¸®å© æ¯å¦ä½¿ç¨æ å½¢ç»ææ°æ®ãé»è®¤ä¸º true, å½ä¸º false æ¶ï¼æå¡å¨ç«¯æ é¡»æé æ å½¢ç»æï¼ææ®éåè¡¨è¾åº */\r\n    @Input() treeToList = false;\r\n    @Input() navTreeToList = false;\r\n\r\n    /** å¸¦å¯¼èªçå¸®å©ä¸­ï¼æ¯å¦æ¾ç¤ºå·¦ä¾§å¯¼èªé¨åãé»è®¤ true */\r\n    @Input() showNavigation = true;\r\n\r\n    /** æ°æ®éæ©åï¼å¼æ å°åè§¦å\r\n     * è¿å Observable\r\n     *      canSelect: <boolean>  æ¯å¦åè®¸éæ©\r\n     *      message: <string> ä¸åè®¸éæ©æ¶çæç¤ºä¿¡æ¯\r\n     */\r\n    @Input() beforeSelectData: (p: {\r\n        instance: any;\r\n        data: any;\r\n    }) => Observable<{ canSelect: boolean; message: string } | boolean>;\r\n\r\n    @Input() beforeLoadData: (p: { instance: any, res: LookupGridResult }) => Observable<LookupGridResult>;\r\n\r\n    /** æ¯å¦å¯ç¨æ°å¸å±\r\n     * - é»è®¤ false */\r\n    @Input() useNewLayout = false;\r\n\r\n    /** å¯ç¨å¤å­æ®µæ¥è¯¢ é»è®¤ä¸º false\r\n     * - å¯ç¨æ­¤ç¹æ§åï¼useNewLayout èªå¨å¯ç¨\r\n     */\r\n    @Input() enableMultiFieldSearch = false;\r\n    /** æç´¢å·¥å·æ¡æ¾ç¤ºæ¨¡å¼ï¼ both: å¨é¨æ¾ç¤ºï¼onlyfield: ä»æ¾ç¤ºå­æ®µï¼onlyinput: ä»æ¾ç¤ºæç´¢è¾å¥æ¡ãé»è®¤ both */\r\n    @Input() searchBarMode: SearchBarMode = SearchBarMode.both;\r\n    /** åè®¸æ¥è¯¢çå­æ®µï¼ä»å¯ç¨å¤å­æ®µæ¥è¯¢æ¶ææï¼å¤ä¸ªå­æ®µä»¥ â,â éå¼ï¼  \r\n     *  - nav å·¦ä¾§å¯¼èªå­æ®µï¼main ä¸»æ°æ®å­æ®µ;\r\n     *  - é»è®¤ä¸º null, å³ä»æææ¾ç¤ºåä¸­èªå¨æå\r\n     */\r\n    @Input() allowQueryFields:{ nav?: string, main: string } = null;\r\n\r\n    @Input() labels = {\r\n        /** æ°æ®åè¡¨*/\r\n        dataTab: '',\r\n        /** æ¶èå¤¹ */\r\n        favTab:'',\r\n        /** åæ¶å·²é */\r\n        clearAllSelected: '',\r\n        /** å·²éè®°å½é¢æ¿ä¸­ å é¤å·²é */\r\n        delSelected: ''\r\n    }\r\n\r\n    /** åè®¸ä»»æå­æ®µè¿è¡æ¥è¯¢ï¼ é»è®¤ true */\r\n    @Input() searchAnyField = true;\r\n\r\n    @Output() selectedData = new EventEmitter();\r\n    @Output() clear = new EventEmitter();\r\n    /** æªå¯ç¨å¤å­æ®µæ¥è¯¢æ¶è§¦å */\r\n    @Output() search = new EventEmitter();\r\n    /** å¯ç¨å¤å­æ®µæ¥è¯¢æ¶è§¦å */\r\n    @Output() query  = new EventEmitter();\r\n    // å¸®å©ææ¬æ¡ä¸­å¼ååäºä»¶\r\n    @Output() valueChanged = new EventEmitter();\r\n    @Output() loadSuccess = new EventEmitter();\r\n\r\n    @Output() pagerChanged = new EventEmitter();\r\n\r\n    @Output() expandTreeNode = new EventEmitter();\r\n    @Output() textChanged = new EventEmitter();\r\n\r\n    @Output() checkedChange = new EventEmitter<{\r\n        data: any;\r\n        isCheck: boolean;\r\n    }>();\r\n\r\n    @Output() tagRemoved = new EventEmitter();\r\n\r\n    /** åå®¹ä¸­çç½è¾¹è· */\r\n    containerMargin = { top: 0, bottom: 5, left:  14, right: 14 };\r\n    containerStyle = {\r\n    };\r\n\r\n    _gridOptions: LookupGridOptions = lookupGridDefaults;\r\n\r\n    get gridOptions() {\r\n        if (\r\n            this.useFavorite &&\r\n            this.columns &&\r\n            this.columns.length > 0 &&\r\n            !this.columns.find((item) => item.field === FAVORITE_FIELD_NAME)\r\n        ) {\r\n            this.columns.push({\r\n                field: FAVORITE_FIELD_NAME,\r\n                title: \"\",\r\n                width: 40,\r\n                align: \"center\",\r\n                fixed: 'right',\r\n                // fixedWidth: true,\r\n                formatter: this.favHelper.favoriteColumnFormatter,\r\n            });\r\n        }\r\n        this._gridOptions = Object.assign(this._gridOptions, {\r\n            singleSelect: this.singleSelect,\r\n            idField: this.idField,\r\n            uri: this.uri,\r\n            showFilterBar:  this.enableMultiFieldSearch? false: this.showFilterBar,\r\n            pagination: this.pagination,\r\n            pageIndex: this.pageIndex,\r\n            pageSize: this.pageSize,\r\n            pageList: this.pageList,\r\n            total: this.total,\r\n            items: this.items,\r\n            columns: this.columns,\r\n            resizableColumns: true,\r\n            fixedHeader: true,\r\n            hover: true,\r\n            treeInfo: this.treeInfo,\r\n            searchAnyField: this.searchAnyField\r\n        });\r\n\r\n        return this._gridOptions;\r\n    }\r\n    @Input() set gridOptions(opts) {\r\n        this._gridOptions = Object.assign({}, this._gridOptions, opts);\r\n        // this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n    }\r\n\r\n    @ViewChild(\"contentContainer\", { read: ViewContainerRef })\r\n    contentContainer: ViewContainerRef;\r\n    @ViewChild(\"favoritesContainer\", { read: ViewContainerRef })\r\n    favoritesContainer: ViewContainerRef;\r\n    @ViewChild(\"leftContainer\", { read: ViewContainerRef })\r\n    leftContainer: ViewContainerRef;\r\n    @ViewChild(\"centerContainer\", { read: ViewContainerRef })\r\n    centerContainer: ViewContainerRef;\r\n    @ViewChild(\"multiSelectDT\") selectedDtRef: DataTableComponent;\r\n    @ViewChild(\"inputgroup\") inputGroup: InputGroupComponent;\r\n    @ViewChild(\"leftPanel\") leftPanel: LayoutPanelComponent;\r\n    @ViewChild(\"tagbox\") tagbox: ElementRef;\r\n\r\n    @ViewChild(\"okbtn\") okButton: ElementRef;\r\n    @ViewChild(\"tagInput\") tagInput: InputGroupComponent;\r\n\r\n    @ViewChild('selectedpanel') selectedpanel: ElementRef;\r\n    @ViewChild('cascadeSelect') cascadeSelect: SingleSelectDirective;\r\n    @ViewChild('layout') layoutRef: LayoutComponent;\r\n\r\n    componentRef: ComponentRef<any>;\r\n    leftComponentRef: ComponentRef<LookupLeftComponent>;\r\n    favoritesComponentRef: ComponentRef<any>;\r\n\r\n    public http: ILookupHttpService;\r\n    public messagerService: MessagerService;\r\n    public loadingService: LoadingService;\r\n    loading: LoadingComponent;\r\n    // dataFieldMaps: any;\r\n    navigationOptions: NavigationOptions;\r\n\r\n    // å¯¼èªå¸®å©å·¦åå®½åº¦\r\n    leftPanelWidth = 320;\r\n    // å¯¼èªå¸®å©çªå£æå°å®½åº¦\r\n    navLookupDialogMinWidth = 960;\r\n\r\n    navigationFilter: NavigationFilter = null;\r\n\r\n    subscriptions: Subscription[] = [];\r\n    dialogOpenedSubscription: Subscription;\r\n    dialogClosedSubscription: Subscription;\r\n\r\n    isTextChange = false;\r\n    isTabChanged = false;\r\n\r\n    displayInfo: DisplayInfo = Object.assign({}, displayInfoDefault);\r\n\r\n    tabChangeSubscription = null;\r\n    // æå­è¡ç¹å»æ°æ®  ç¨äºæ¶è\r\n    personalConf: PersonalConfig = {};\r\n    favoriteColumns: any[] = [];\r\n    /** ä¸´æ¶æ¥è¯¢åæ° */\r\n    _searchState = null;\r\n    allData: any = [];\r\n    get selections() {\r\n        const selectItems = this.lookupSelectionSer.getSelections();\r\n        if (this.singleSelect) {\r\n            return selectItems[0];\r\n        } else {\r\n            return selectItems;\r\n        }\r\n    }\r\n    get usePersionalConf() {\r\n        return this.useFavorite || this.useTip || this.isRecordSize;\r\n    }\r\n\r\n    get displayTextList() {\r\n        if (this.displayText) {\r\n            return this.displayText.split(this.multipleChoiceSeparator);\r\n        }\r\n        return [];\r\n    }\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n    public utilService: UtilService;\r\n    public treeNodeHelper: TreeNodeHelper;\r\n    public localService: LocaleService;\r\n    public notifyService: NotifyService;\r\n    allColumnsTitle = \"ææå\";\r\n    mustWriteSomething = \"è¯·è¾å¥å³é®å­åæ¥è¯¢ã\";\r\n    mustChoosAdatarow = \"è¯·éæ©ä¸æ¡è®°å½ï¼\";\r\n    addFavoriteSuccess = \"æ¶èæåã\";\r\n    delFavoriteSuccess = \"ç§»é¤æ¶èæåã\";\r\n\r\n    /** ä½¿ç¨åç½®çæ¥è¯¢æ¹æ³, é»è®¤ false */\r\n    useInsideSearchHandler = false;\r\n    searching = false;\r\n    /** ä¸´æ¶å­å¨æ¥è¯¢ç»æé */\r\n    _searchResult = null;\r\n\r\n    lookupinitializationSubject = new Subject();\r\n\r\n    /** å¤éæ¶ï¼éä¸­çæ°æ® */\r\n    currentSelectedItems: Observable<any> = of([]);\r\n    /** å·²éæ°æ®åä¿¡æ¯ */\r\n    selectedColumns = [];\r\n    activeTab: string | \"datalist\" | \"favorite\" | \"selected\" = \"datalist\";\r\n\r\n    favHelper: FavoriteHelper = null;\r\n    ttEventMgr: TreeTableEventManager = null;\r\n    multiSelMgr: MultiSelectionManager = null;\r\n    httpMgr: LookupHttpManager = null;\r\n    lookupCmpMgr: LookupComponentManager = null;\r\n    dialogMgr: LookupDialogManager = null;\r\n    selectionMgr: SelectionManager = null;\r\n    dtEventMgr: DataTableEventManager = null;\r\n\r\n    lookupSelectionSer: LookupSelectionService = null;\r\n\r\n    controlId = \"\";\r\n    savingFaoriteData = false;\r\n    isReady = false;\r\n    showTagboxClearButton = false;\r\n    hasError = false;\r\n\r\n    cascadeStatusItems = [\r\n        { valeu: 'enable', label: '' },\r\n        { valeu: 'up', label: '' },\r\n        { valeu: 'down', label: '' },\r\n        { valeu: 'disable', label: '' }\r\n    ]\r\n\r\n    isGetAllChidlNodes = false;\r\n    eventManager: EventManager;\r\n    /** éä¸­è®°å½IDï¼èªå®ä¹å¸®å©åæ°æ¶ä½¿ç¨ */\r\n    selectedIds = [];\r\n    private lookupSearchInputEvent = null;\r\n    private farrisInstances: FarrisComponentInstanceService = null;\r\n    /** ç¨æ·åå§è®¾ç½® */\r\n    private _userSettings: any = {};\r\n\r\n    get userInitialConfig() {\r\n        return this._userSettings;\r\n    }\r\n\r\n    _treeInfo_ = null;\r\n\r\n    /** dialog åå®¹åºåé«åº¦ã å¼¹çªæ»é«åº¦ - å¤´é¨é«åº¦ - èé¨é«åº¦ - ï¼å¯ç¨æ¶è TABå¤´é«åº¦ï¼ */\r\n    dialogContentHeight = 0;\r\n    /** å·¦æ å³åè¡¨ï¼ å·¦æ ç¹å»èç¹æ¥è¯¢æ¶æ¯å¦åæ¬ä¸çº§èç¹çæ°æ®ï¼é»è®¤ false */\r\n    includeSubordinates = false;\r\n    includeSubordinates$ = new Subject();\r\n    includeSubordinates$$: Subscription = null;\r\n    overLayService: OverLayHiddenService;\r\n    private debugSer: DebugService = null;\r\n    constructor(\r\n        public injector: Injector,\r\n        public cfr: ComponentFactoryResolver,\r\n        public el: ElementRef,\r\n        public utils: CommonUtils,\r\n        private defaultMapping: LookupDefaultMapping,\r\n        public changeDetector: ChangeDetectorRef,\r\n        public shortcuts: ShortcutsService,\r\n        public lookupUtils: LookupUtils,\r\n        private zone: NgZone,\r\n        public render2: Renderer2\r\n    ) {\r\n        super(injector, el, changeDetector);\r\n        this.createInstance();\r\n        this.currentSelectedItems = this.lookupSelectionSer.selected$;\r\n        this.eventManager = this.injector.get(EventManager);\r\n        this.farrisInstances = this.injector.get(\r\n            FarrisComponentInstanceService,\r\n            null\r\n        );\r\n\r\n        this.overLayService = new OverLayHiddenService();\r\n\r\n        this.debugSer = this.injector.get(DebugService, null);\r\n        if (this.debugSer) {\r\n            this.debugSer.useDebugMode();\r\n        }\r\n\r\n        this.lookupSelectionSer.selectionChanged$.subscribe((e: {data: Array<any>, selected: boolean}) => {\r\n            if (this.selectedDtRef) {\r\n                if (!e.selected) {\r\n                    this.selectedDtRef.unCheckRows(e.data);\r\n                }\r\n            }\r\n        });\r\n\r\n        this.initLabels();\r\n    }\r\n\r\n    private initLabels() {\r\n        if (!this.labels) {\r\n            this.labels = {\r\n                /** æ°æ®åè¡¨*/\r\n                dataTab: '',\r\n                /** æ¶èå¤¹ */\r\n                favTab:'',\r\n                /** åæ¶å·²é */\r\n                clearAllSelected: '',\r\n                /** å·²éè®°å½é¢æ¿ä¸­ å é¤å·²é */\r\n                delSelected: ''\r\n            }\r\n        }\r\n        if (!this.labels.clearAllSelected) {\r\n            this.labels.clearAllSelected = this.localService.getValue('lookup.selectedInfo.clear');\r\n        }\r\n\r\n        if (!this.labels.favTab) {\r\n            this.labels.favTab = this.localService.getValue('lookup.favorites');\r\n        }\r\n\r\n        if (!this.labels.dataTab) {\r\n            this.labels.dataTab = this.localService.getValue('lookup.datalist');\r\n        }\r\n    }\r\n\r\n    writeConsole(msg, type: 'info'|'log'|'warn'|'error' = 'warn') {\r\n        if (this.debugSer) {\r\n            this.debugSer[type](msg);\r\n        }\r\n    }\r\n\r\n    getFilterBarHeight() {\r\n        return (this.showFilterBar && this.enableMultiFieldSearch ? 42 : 0);\r\n    }\r\n\r\n    getSpaceWidth(isDouble = false) {\r\n        return (!this.enableMultiFieldSearch ? 28 : 48) + (isDouble ? ( this.enableMultiFieldSearch? 5: 7) : 0);\r\n    }\r\n\r\n    private cacheUserConfig() {\r\n        this._userSettings._title = this.title;\r\n        this.displayInfo.title = this.title;\r\n        this._userSettings._columns = this.deepClone(this.columns || []);\r\n        this._userSettings.getColumns = () => {\r\n            return this._userSettings._columns;\r\n        };\r\n\r\n        this._userSettings.reset = () => {\r\n            this.title = this._userSettings._title;\r\n            this.displayInfo.title = this.title;\r\n            this.columns = this._userSettings.getColumns();\r\n        };\r\n    }\r\n\r\n    private deepClone(obj) {\r\n        if (obj === null) {\r\n            return null;\r\n        }\r\n        const clone = Object.assign({}, obj);\r\n        Object.keys(clone).forEach(\r\n            (key) =>\r\n                (clone[key] =\r\n                    typeof obj[key] === \"object\"\r\n                        ? this.deepClone(obj[key])\r\n                        : obj[key])\r\n        );\r\n        if (Array.isArray(obj)) {\r\n            clone.length = obj.length;\r\n            return Array.from(clone);\r\n        }\r\n        return clone;\r\n    }\r\n\r\n    ngOnInit() {\r\n        super.ngOnInit();\r\n        this.cacheUserConfig();\r\n        if (!this.loadTreeDataType) {\r\n            this.loadTreeDataType = \"default\";\r\n        }\r\n\r\n        this.checkGridOptions();\r\n        this.displayInfo.title = this.title;\r\n        /** ä¼ éä¸ä¸æ */\r\n        if (this.http) {\r\n            this.http.context = this.context;\r\n        }\r\n\r\n        this.allColumnsTitle = this.localService.getValue(\"lookup.allColumns\");\r\n        this.mustWriteSomething = this.localService.getValue(\r\n            \"lookup.mustWriteSomething\"\r\n        );\r\n        this.mustChoosAdatarow = this.localService.getValue(\r\n            \"lookup.mustChoosAdatarow\"\r\n        );\r\n        this.addFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.addFav\") ||\r\n            this.addFavoriteSuccess;\r\n        this.delFavoriteSuccess =\r\n            this.localService.getValue(\"lookup.favoriteInfo.cancelFav\") ||\r\n            this.delFavoriteSuccess;\r\n\r\n        this.dialogMgr.onDialogCreated();\r\n\r\n        this._treeInfo_ = this.treeInfo ? cloneDeep(this.treeInfo) : null;\r\n\r\n        if (this.quickSelect) {\r\n            this.quickSelect = Object.assign({}, QuickSelectDefaultOptions, this.quickSelect || {});\r\n        }\r\n        this.setContainerMargin();\r\n    }\r\n    /** åå®¹ä¸­çç½è¾¹è· */\r\n    setContainerMargin() {\r\n        const mrn = !this.enableMultiFieldSearch ? 14 : 24;\r\n        const mb =  !this.enableMultiFieldSearch ? 5 : 0;\r\n        this.containerMargin = { top: 0, bottom: mb, left: mrn, right: mrn };\r\n        \r\n        if (this.enableMultiFieldSearch) {\r\n            this.useNewLayout = true;\r\n        }\r\n\r\n        this.containerStyle = {\r\n            marginLeft: this.containerMargin.left + \"px\",\r\n            marginRight: this.containerMargin.right + \"px\",\r\n            marginTop: this.containerMargin.top + \"px\",\r\n            marginBottom: this.containerMargin.bottom + \"px\",\r\n        };\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        super.ngOnDestroy();\r\n        this.subscriptions.forEach((n) => {\r\n            if (n) {\r\n                n.unsubscribe();\r\n                n = null;\r\n            }\r\n        });\r\n\r\n        if (this.selectionMgr) {\r\n            this.selectionMgr.destroy();\r\n        }\r\n\r\n        this.subscriptions = [];\r\n\r\n        if (this.farrisInstances) {\r\n            this.farrisInstances.destroy(this.el.nativeElement);\r\n        }\r\n\r\n        if (this.lookupSearchInputEvent) {\r\n            this.lookupSearchInputEvent();\r\n        }\r\n        this.lookupUtils.destroy();\r\n\r\n        this.overLayService.destory(this.el.nativeElement);\r\n        this.overLayService = null;\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.cacheUserConfig();\r\n        }\r\n\r\n        if (changes.enableMultiFieldSearch && !changes.enableMultiFieldSearch.isFirstChange()) {\r\n            this.setContainerMargin();\r\n        }\r\n\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        if (!this.quickSelect || !this.quickSelect.enable) {\r\n            this.lookupSearchInputEvent = onTextChanged.bind(this)();\r\n        }\r\n\r\n        // åå§åä¸ªæ§åéç½®\r\n        if (this.usePersionalConf) {\r\n            this.favHelper.initPersonalInfo();\r\n        }\r\n\r\n        if (this.useExtendInfo) {\r\n            const jsonData = this.selectionMgr.getBindingData();\r\n            this.updateExtendInfo(jsonData, false);\r\n        }\r\n\r\n        if (this.viewType === \"text\") {\r\n            // this.shortcuts.add({\r\n            //     key: 'F2',\r\n            //     target: this.inputGroup.textbox.nativeElement,\r\n            //     command: () => {\r\n            //         this.showDialog();\r\n            //     }\r\n            // });\r\n            this.render2.listen(\r\n                this.inputGroup.textbox.nativeElement,\r\n                \"keydown.F2\",\r\n                this.showDialog.bind(this)\r\n            );\r\n        } else {\r\n            this.registerMouseEventForTagView();\r\n\r\n            if (this.tagboxHeight) {\r\n                const el =\r\n                    this.tagbox.nativeElement.querySelector(\".multi-more\");\r\n                let tbh = this.tagboxHeight;\r\n                if (tbh !== \"auto\") {\r\n                    tbh += \"px\";\r\n\r\n                    if (this.maxTagboxHeight) {\r\n                        this.render2.setStyle(\r\n                            el,\r\n                            \"maxHeight\",\r\n                            `${this.maxTagboxHeight}px`\r\n                        );\r\n                    }\r\n                }\r\n\r\n                this.render2.setStyle(el, \"height\", tbh);\r\n            }\r\n        }\r\n\r\n        if (this.el && this.farrisInstances) {\r\n            this.farrisInstances.add(this.el.nativeElement, this);\r\n        }\r\n    }\r\n\r\n    private createInstance() {\r\n        this.http = this.injector.get(ServerSideToken, null);\r\n        this.messagerService = this.injector.get(MessagerService);\r\n        this.loadingService = this.injector.get(LoadingService);\r\n        this.notifyService = this.injector.get(NotifyService, null);\r\n\r\n        this.personalConfigService = this.injector.get(\r\n            PersonalConfigService,\r\n            null\r\n        );\r\n\r\n        this.lookupSelectionSer = new LookupSelectionService(this);\r\n\r\n        this.utilService = new UtilService(this);\r\n        this.localService = this.injector.get(LocaleService);\r\n        this.treeNodeHelper = new TreeNodeHelper(this);\r\n\r\n        this.favHelper = new FavoriteHelper(this);\r\n        this.ttEventMgr = new TreeTableEventManager(this);\r\n        this.multiSelMgr = new MultiSelectionManager(this);\r\n        this.httpMgr = new LookupHttpManager(this);\r\n        this.lookupCmpMgr = new LookupComponentManager(this);\r\n        this.dialogMgr = new LookupDialogManager(this);\r\n        this.selectionMgr = new SelectionManager(this);\r\n        this.dtEventMgr = new DataTableEventManager(this);\r\n    }\r\n\r\n    showDialog(): any {\r\n        if (this.disabled || this.readonly) {\r\n            return false;\r\n        }\r\n\r\n        this.selectionMgr.initDisplayValue();\r\n        this.dictPickingSubscription = this.dictPicking({\r\n            instance: this,\r\n        }).subscribe((pr: PickingResult) => {\r\n            this.dialogMgr.canOpenDialog(pr);\r\n        });\r\n\r\n        return false;\r\n    }\r\n\r\n    /** å¤æ­æ¯å¦ä¸ºååè¡¨å¸®å© */\r\n    isDoublleList() {\r\n        return (\r\n           ( this.displayType === LookupGridDisplayType.NavList ||\r\n            this.displayType === LookupGridDisplayType.NavTreeList ||\r\n            this.displayType === LookupGridDisplayType.NavListTree) && this.showNavigation\r\n        );\r\n    }\r\n    /** å¤æ­æ¯å¦æ¾ç¤ºä¸ºæ å¸®å© */\r\n    isTree() {\r\n        const dtyp = this.displayType.toUpperCase()\r\n        return (\r\n            dtyp === LookupGridDisplayType.TreeList || dtyp === LookupGridDisplayType.NavListTree\r\n        );\r\n    }\r\n\r\n    onResized(e: any) {\r\n        this.resizeCmp(e.size);\r\n        this.resized.emit(e.size);\r\n    }\r\n\r\n    onResizing(pos: IResizeEvent) {\r\n        this.resizing.emit(pos.size);\r\n        this.resizeCmp(pos.size);\r\n        if (this.isDoublleList() && this.leftComponentRef) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n    }\r\n\r\n    onMaxDialog(pos: IResizeEvent) {\r\n        this.resizeCmp(pos.size);\r\n        if (this.leftPanel) {\r\n            this.leftComponentRef.instance.resize({\r\n                width: this.leftPanel.width,\r\n                height: this.dialogMgr.getHeight(),\r\n            });\r\n        }\r\n        // tfs 543132 \r\n        // this.dialogHeight = pos.size.height;\r\n        this.dialogContentHeight = this.dialogMgr.resetDialogContentHeight();\r\n        this.dialogMaxed.emit(pos.size);\r\n    }\r\n\r\n    resizeCmp(size?: any) {\r\n        if (!this.componentRef || !this.componentRef.instance) {\r\n            return;\r\n        }\r\n\r\n        if (!size) {\r\n            size = this.dialog.size;\r\n        }\r\n        const _size = {\r\n            width:\r\n                size.width -\r\n                this.containerMargin.left -\r\n                this.containerMargin.right,\r\n            height: 0\r\n        };\r\n\r\n        if (this.useFavorite && this.favoritesComponentRef && this.activeTab == 'favorite') {\r\n            _size.height = this.lookupCmpMgr.getCmpHeight(true);\r\n            this.favoritesComponentRef.instance.resize(_size);\r\n        } else {\r\n            _size.height = this.lookupCmpMgr.getCmpHeight();\r\n            if (this.isDoublleList()) {\r\n                _size.width = size.width - this.leftPanel.width - this.getSpaceWidth(true);\r\n            }\r\n    \r\n            this.componentRef.instance.resize(_size);\r\n        }\r\n\r\n        if (this.isRecordSize) {\r\n            this.personalConf.size = this.dialog.size;\r\n            this.personalConfigService.updatePersonalConfig({\r\n                size: this.dialog.size,\r\n            });\r\n        }\r\n\r\n        if (this.isDoublleList() && this.layoutRef) {\r\n            this.layoutRef.setPanelMaxSize();\r\n        }\r\n    }\r\n\r\n    private checkGridOptions() {\r\n        if (!this.gridOptions.idField) {\r\n            this.writeConsole(\"æªè®¾ç½®ä¸»é®å­æ®µ idField\");\r\n        }\r\n\r\n        if (!this.beforeSelectData) {\r\n            this.beforeSelectData = () => {\r\n                return of(true);\r\n            };\r\n        }\r\n\r\n        const ctxMenuLanguages =\r\n            this.localService.getValue(\"lookup.contextMenu\");\r\n\r\n        this.treeTableOptions = Object.assign(\r\n            { language: ctxMenuLanguages },\r\n            this.defaultTreeTableOptions,\r\n            this.treeTableOptions || {}\r\n        );\r\n    }\r\n\r\n    getComponentType(): Type<any> {\r\n        if (!this.displayType) {\r\n            this.displayType = \"LIST\";\r\n        }\r\n        switch (this.displayType) {\r\n            case LookupGridDisplayType.List:\r\n            case LookupGridDisplayType.NavList:\r\n            case LookupGridDisplayType.NavTreeList:\r\n                return DataTableComponent;\r\n            case LookupGridDisplayType.TreeList:\r\n            case LookupGridDisplayType.NavListTree:\r\n                return TreeTableComponent;\r\n        }\r\n    }\r\n\r\n    showLoading(msg = \"\") {\r\n        if (this.dialog && this.dialog.modalContent && !this.loading) {\r\n            const opts = {\r\n                container: this.dialog.modalContent,\r\n                delay: 200,\r\n            };\r\n\r\n            if (msg) {\r\n                opts[\"message\"] = msg;\r\n            }\r\n\r\n            this.loading = this.loadingService.show(opts);\r\n        } else {\r\n            this.loading = this.loadingService.show();\r\n        }\r\n    }\r\n\r\n    closeLoading() {\r\n        if (this.loading) {\r\n            this.loading.close();\r\n            this.loading = null;\r\n        }\r\n\r\n        this.loadingService.clearAll();\r\n    }\r\n\r\n    getSearchColumns(resdata: any): {label: string, value: string}[] {\r\n        const cols = resdata.columns || this.columns;\r\n        if (resdata.searchFields) {\r\n            return resdata.searchFields.map((sf) => {\r\n                const c = cols.find(\r\n                    (col) => col.field.toLowerCase() === sf.value.toLowerCase()\r\n                );\r\n                if (c) {\r\n                    sf.label = c.title;\r\n                }\r\n                return sf;\r\n            });\r\n        } else if (cols) {\r\n            return cols\r\n                .filter((c) => c.searchField)\r\n                .map((col) => {\r\n                    return {\r\n                        label: col.title,\r\n                        value: col.field,\r\n                    };\r\n                });\r\n        }\r\n        return [];\r\n    }\r\n\r\n    private initOptions(resData: LookupGridResult) {\r\n        let obser = of(true);\r\n        this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n        if (resData) {\r\n            // å¦æç»ä»¶ä¸­æªè®¾ç½®æ¾ç¤ºåï¼åä½¿ç¨æå¡å¨ç«¯è¿åçè®¾ç½®ï¼ å¦åå°ä½¿ç¨ç»ä»¶ä¸­éç½®çå±ç¤ºå\r\n            if (\r\n                (!this.columns || !this.columns.length) &&\r\n                resData.columns &&\r\n                resData.columns.length\r\n            ) {\r\n                this.columns = resData.columns;\r\n            }\r\n\r\n            this.initColumnWidth(this.columns);\r\n\r\n            this.setLookupTitleText(resData);\r\n\r\n            if (\r\n                this.isDoublleList() &&\r\n                this.dialogWidth < this.navLookupDialogMinWidth &&\r\n                !this.isRecordSize\r\n            ) {\r\n                this.dialogWidth = this.navLookupDialogMinWidth;\r\n                this.dialog.reSize({ width: this.dialogWidth });\r\n            }\r\n\r\n            if (!this.customDisplayType) {\r\n                // this.displayType = resData.displayType || this.displayType || 'LIST';\r\n                // if (this.treeToList) {\r\n                //     this.displayType = this.isDoublleList() ? ' NAVLIST ': 'LIST';\r\n                // }\r\n                this.changeDetector.detectChanges();\r\n                this.lookupCmpMgr.createComponentWithServerData(resData);\r\n            }\r\n\r\n            if ( this.isDoublleList() && resData.navigation && !this.leftComponentRef) {\r\n                this.navigationOptions = resData.navigation;\r\n                this.navigationOptions.hover = true;\r\n                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);\r\n                this.initColumnWidth(this.navigationOptions.columns, 'nav');\r\n\r\n                // update columns formatter\r\n                if (this.customNavFormatter) {\r\n                    this.navigationOptions.columns.forEach((col) => {\r\n                        if (this.customNavFormatter[col.field]) {\r\n                            col.formatter = this.customNavFormatter[col.field];\r\n                        }\r\n                    });\r\n\r\n                    this.navigationOptions[\"rowStyler\"] =\r\n                        this.customNavFormatter.rowStyler;\r\n                    this.navigationOptions[\"cellStyler\"] =\r\n                        this.customNavFormatter.cellStyler;\r\n                }\r\n                // 20210926 æ å¯¼èªå¸®å©ä¸­ å·¦ä¾§æ æ¯æåå±å è½½\r\n                if (this.displayType === LookupGridDisplayType.NavTreeList) {\r\n                    let _nav_treeinfo_loadtype =\r\n                        this.navigationOptions.treeInfo.loadDataType;\r\n                    if (this.loadTreeDataType !== \"default\") {\r\n                        _nav_treeinfo_loadtype =\r\n                            this.loadTreeDataType === \"loadall\"\r\n                                ? \"all\"\r\n                                : \"async\";\r\n                    }\r\n                    this.navigationOptions.treeInfo.loadDataType =\r\n                        _nav_treeinfo_loadtype;\r\n                }\r\n\r\n                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);\r\n            }\r\n        } else {\r\n            this.lookupCmpMgr.createContent(this.gridOptions);\r\n            this.lookupCmpMgr.createFavoriteComponent();\r\n        }\r\n\r\n        if (this.isTextChange) {\r\n            this.componentRef.instance.searchData.value = this.displayText;\r\n        } else {\r\n            if (this._searchState && this._searchState.value) {\r\n                this.componentRef.instance.searchData.value = this._searchState.value;\r\n            }\r\n        }\r\n\r\n        // update columns formatter\r\n        if (this.customFormatter) {\r\n            this.columns.forEach((col) => {\r\n                if (this.customFormatter[col.field]) {\r\n                    col.formatter = this.customFormatter[col.field];\r\n                }\r\n            });\r\n\r\n            if (this.customFormatter.rowStyler) {\r\n                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;\r\n            }\r\n\r\n            if (this.customFormatter.cellStyler) {\r\n                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;\r\n            }\r\n        } else {\r\n            if (resData.customStyles) {\r\n                const { row: rowStylers, cell: cellStylers } = resData.customStyles;\r\n\r\n                const filterFn = (n, data) => {\r\n                    const d = this.utils.getValue(n.field, data);\r\n                    if (typeof d === 'boolean') {\r\n                        if (n.value == '0' || n.value == '1' || n.value == 'true' || n.value == 'false') {\r\n                            return d === (n.value == '0' || n.value == 'false') ? false : true;\r\n                        }\r\n                        return d === !!n.value;\r\n                    }\r\n                    return d === n.value;\r\n                }\r\n\r\n                if (rowStylers) {\r\n                    this.componentRef.instance.rowStyler = ({ data }) => {\r\n                        const styleItem = rowStylers.find(n => {\r\n                            return filterFn(n, data);\r\n                        });\r\n                        if (styleItem) {\r\n                            return styleItem.styles;\r\n                        }\r\n\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n                if (cellStylers) {\r\n                    this.componentRef.instance.cellStyler = (e, field) => {\r\n                        const { data } = e;\r\n                        const styleItem = cellStylers.filter(n => n.field === field).find(t => {\r\n                            return filterFn(t, data);\r\n                        });\r\n\r\n                        if (styleItem) {\r\n                            return styleItem.styles;\r\n                        }\r\n\r\n                        return null;\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // this.changeDetector.detectChanges();\r\n        return obser;\r\n    }\r\n\r\n    /**\r\n     * è®¾ç½®å¸®å©çªå£æ é¢\r\n     */\r\n    private setLookupTitleText(resData: LookupGridResult) {\r\n        if (resData.displayInfo) {\r\n            this.displayInfo = resData.displayInfo;\r\n        }\r\n\r\n        // å¦æèªå®ä¹æ é¢ï¼å°ä»¥æ­¤æ é¢ä¸ºåãå¦åå è½½æå¡å¨ç«¯è¿åçæ°æ®\r\n        if (this.title && this.title !== \"æ­¤å¤æ¾ç¤ºå¸®å©æ é¢\") {\r\n            this.displayInfo.title = this.title;\r\n        }\r\n\r\n        if (this.displayInfo && resData.title) {\r\n            if (!this.displayInfo.title) {\r\n                this.displayInfo.title = resData.title;\r\n            }\r\n        }\r\n    }\r\n\r\n    private showGetAllChildrenCheckbox() {\r\n        if (this.isTree() && this.treeInfo) {\r\n            this.enableGetAllChildNodes =\r\n                this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\";\r\n        } else {\r\n            this.enableGetAllChildNodes = false;\r\n        }\r\n    }\r\n\r\n    initData() {\r\n\r\n        const observer = {\r\n            next: (data: LookupGridResult) => {\r\n\r\n                if (data === false) {\r\n                    if (!this.columns || !this.columns.length) {\r\n                        this.closeLoading();\r\n                        this.closeDialog();\r\n                        if (!this.messagerService.modals || !this.messagerService.modals.length) {\r\n                            this.notifyService.error({msg: this.localService.getValue('lookup.configError') , timeout: 3000});\r\n                        }\r\n                        return;\r\n                    }\r\n                }\r\n\r\n                // æå¡å¨ç«¯åçéè¯¯ï¼è¿åNULL æ¶ï¼ç´æ¥å³é­çªå£\r\n                if (data === null) {\r\n                    this.isShow = false;\r\n                    if (this.dialog) {\r\n                        this.dialog.close();\r\n                    }\r\n                    return;\r\n                }\r\n                this.initOptions(data).subscribe(() => {\r\n                    this.selectedColumns = this.multiSelMgr.initSelectedColumns();\r\n                    // this.favoriteColumns = this.favHelper.getFavoriteColumns();\r\n\r\n                    if (this.usePersionalConf) {\r\n                        if (!this.personalConfigService.getPersonalData()) {\r\n                            this.personalConfigService.savePersonalConfig(\r\n                                this.personalConf\r\n                            );\r\n                        }\r\n                    }\r\n                    if (!this.isTabChanged) {\r\n                        this.lookupSelectionSer.loadSelections(\r\n                            data.selectedItems || []\r\n                        );\r\n                    }\r\n\r\n                    if (this.isDoublleList()) {\r\n                        // å¯¼èªå¸®å©æ¶ï¼è®¾ç½®å·¦ä¾§éä¸­æ°æ®æ¶ï¼ä¸å è½½ä¸»æ°æ®åè¡¨ã\r\n                        if (this.navSelectedIds || this.selectFirstInNav) {\r\n                            this.loadDataWhenOpen = false;\r\n                        }\r\n                    }\r\n\r\n                    if (data['activeTab'] && !this.isTabChanged) {\r\n                        this.activeTab = 'datalist';\r\n\r\n                        if (this.personalConf && this.personalConf.tabIndex !== this.activeTab) {\r\n                            this.personalConf.tabIndex = this.activeTab;\r\n                        }\r\n\r\n                    }\r\n\r\n                    this.loadData(data);\r\n\r\n                    if (this.isTree()) {\r\n                        if (this.activeTab === \"datalist\") {\r\n                            const tt = this.componentRef.instance as TreeTableComponent;\r\n                            if (tt.searchData.value && this.items && this.items.length) {\r\n                                if (this.items[0].children && this.items[0].children.length) {\r\n                                    tt.toggleExpand(this.items[0], true, false);\r\n                                }\r\n                            }\r\n                        }\r\n                        this.showGetAllChildrenCheckbox();\r\n\r\n                    }\r\n                    this.isTextChange = false;\r\n                    this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                    this.closeLoading();\r\n                    // this.isReady$.next(true);\r\n                    this.isReady = true;\r\n                    this.changeDetector.detectChanges();\r\n                    this.lookupinitializationSubject.next();\r\n\r\n                    if (this.layoutRef) {\r\n                        this.layoutRef.setPanelMaxSize();\r\n                    }\r\n                });\r\n            },\r\n            error: (err: any) => {\r\n                // this.isReady$.next(true);\r\n                this.closeLoading();\r\n                this._searchResult = null; // æ¸ç©ºä¸´æ¶æ¥è¯¢ ç»æ\r\n                this.isTextChange = false;\r\n\r\n                this.hasError = true;\r\n                this.changeDetector.detectChanges();\r\n                if (typeof err === \"string\") {\r\n                    this.messagerService.error(err);\r\n                } else {\r\n                    if (err) {\r\n                        if (err.Message) {\r\n                            this.messagerService.error(err.Message);\r\n                        } else {\r\n                            if (err.error) {\r\n                                this.messagerService.exception(err.error);\r\n                            } else {\r\n                                this.messagerService.error(\r\n                                    \"åºç¨æå¡å¨éè¯¯,è¯·èç³»ç³»ç»ç®¡çåï¼\"\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n        };\r\n\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.pageSize || 20,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.isTextChange) {\r\n            this._searchState = { \r\n                field: \"*\",\r\n                value: this.displayText\r\n            }\r\n        }\r\n\r\n        // åå±å è½½æ¯æè®¾ç½®å±å¼å±çº§\r\n        if (this.isTree() || this.displayType === LookupGridDisplayType.NavTreeList) {\r\n            if (this.expandLevel > -1) {\r\n                p['expandLevel'] = this.expandLevel;\r\n            }\r\n        }\r\n\r\n        if (this._searchState && this._searchState.value) {\r\n            p['search'] = this._searchState;\r\n            t = 'search';\r\n\r\n            // if (this.conditions && !this.conditions.length && this.enableMultiFieldSearch) {\r\n            //     this.conditions = [{\r\n            //         \"filterField\": this.textField,\r\n            //         \"value\": this._searchState.value,\r\n            //         \"lbracket\": \"\",\r\n            //         \"rbracket\": \"\",\r\n            //         \"relation\": 0,\r\n            //         \"compare\": 6\r\n            //     }];\r\n            // }\r\n        }\r\n\r\n\r\n        if (!this.isTabChanged && this.enableToSelect) {\r\n            const vals = this.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p[\"selectedInfo\"] = {\r\n                    selected: true,\r\n                    selectedIds: vals,\r\n                };\r\n            } else {\r\n                if (this[\"selectedIds\"]) {\r\n                    p[\"selectedInfo\"] = {\r\n                        selected: true,\r\n                        selectedIds: this[\"selectedIds\"],\r\n                    };\r\n                }\r\n            }\r\n        }\r\n\r\n        this.showLoading();\r\n        this.hasError = false;\r\n       \r\n        this.httpMgr.lookupRequest(p, t).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                if (restData) {\r\n                    restData.selectedItems = restData[\"selectedData\"] || [];\r\n                } else {\r\n                    if (restData && typeof restData === \"object\") {\r\n                        restData.selectedItems = [];\r\n                    }\r\n                }\r\n                return restData === null ? false : restData;\r\n            }),\r\n            switchMap((res: LookupGridResult) => {\r\n                if (this.beforeLoadData) {\r\n                    return this.beforeLoadData({instance: this, res});\r\n                }\r\n                return of(res);\r\n            })\r\n        ).subscribe(observer);\r\n    }\r\n\r\n    loadData(resData?: LookupGridResult, rebindEvent = true) {\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n\r\n            switch (this.displayType) {\r\n                case LookupGridDisplayType.NavList:\r\n                case LookupGridDisplayType.NavTreeList:\r\n                case LookupGridDisplayType.List:\r\n                    this.loadDataTableData(resData);\r\n                    if (rebindEvent) {\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                    break;\r\n                case LookupGridDisplayType.TreeList:\r\n                case LookupGridDisplayType.NavListTree:\r\n                    this.loadTreeTableData(resData, rebindEvent);\r\n                    break;\r\n            }\r\n        } else if (this.activeTab === \"favorite\") {\r\n            this.loadFavData(resData);\r\n        }\r\n\r\n        // éä¸­æ°æ®\r\n        this.selectionMgr.selectCurrentValue();\r\n    }\r\n\r\n    private loadFavData(result: LookupGridResult) {\r\n        // å è½½æ¶èæ°æ®\r\n        if (this.useFavorite) {\r\n            if (this.isTree()) {\r\n                this.setTreeInfo(result);\r\n                const treeNodes = this.favHelper.initFavoriteTreeData(\r\n                    result.items\r\n                );\r\n                const treeData = this.treeNodeHelper\r\n                    .flatTreeNodes(treeNodes)\r\n                    .map((n) => {\r\n                        n.data[\"_addtional_\"] = n[\"addtional\"];\r\n                        return n.data;\r\n                    });\r\n                this.lookupSelectionSer.initFavoriteItems(treeData);\r\n\r\n                setTimeout(() => {\r\n                    this.favoritesComponentRef.instance.scrollToY(1);\r\n                });\r\n            } else {\r\n                this.lookupSelectionSer.initFavoriteItems(result.items);\r\n            }\r\n\r\n            this.favHelper.loadFavoritesData(result);\r\n        }\r\n    }\r\n\r\n    loadDataTableData(resData?: LookupGridResult) {\r\n        if (resData) {\r\n            if (this.useFavorite && !this.isTree()) {\r\n                this.favHelper.updateFavoritesStatus(resData.items);\r\n            }\r\n            if (this.gridOptions) {\r\n                if (resData && resData.columns && resData.columns.length) {\r\n                    if (\r\n                        !this.gridOptions.columns ||\r\n                        !this.gridOptions.columns.length\r\n                    ) {\r\n                        this.columns = resData.columns;\r\n                    }\r\n                }\r\n\r\n                this.items = resData.items;\r\n                this.total = resData.total || resData.items.length;\r\n                if ( resData.searchFields ) {\r\n                    this.gridOptions.searchFields = this.getSearchColumns(resData);\r\n                }\r\n                if (resData.pageInfo) {\r\n                    if (\r\n                        resData.pageInfo.pageList &&\r\n                        (!this.pageList || !this.pageList.length)\r\n                    ) {\r\n                        this.pageList = resData.pageInfo.pageList;\r\n                    }\r\n                    this.pagination = resData.pageInfo.enablePager;\r\n                    this.pageIndex = resData.pageInfo.pageIndex;\r\n                    this.pageSize = resData.pageInfo.pageSize;\r\n                } else {\r\n                    this.pagination = false;\r\n                }\r\n            } else {\r\n                this.gridOptions = resData as LookupGridOptions;\r\n            }\r\n        }\r\n\r\n        this.updateDataTable(this.gridOptions);\r\n    }\r\n\r\n    private updateDataTable(opts: any) {\r\n        if (opts) {\r\n            const dt = this.componentRef.instance as DataTableComponent;\r\n\r\n            if (!dt.columns || dt.columns.length === 0) {\r\n                dt.columns = this.gridOptions.columns;\r\n            }\r\n            dt.allColumnsTitle = this.allColumnsTitle;\r\n            dt.searchFields = opts.searchFields;\r\n            dt.pagination = opts.pagination;\r\n            dt.pageList = this.pageList;\r\n            dt.remoteSort = this.remoteSort;\r\n            dt.striped = this.enableMultiFieldSearch;\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                dt.loadData({\r\n                    pageSize: opts.pageSize,\r\n                    pageIndex: this.gridOptions.pageIndex,\r\n                    total: this.gridOptions.total,\r\n                    data: this.gridOptions.items,\r\n                });\r\n                dt.cd.markForCheck();\r\n            }\r\n            this.loadSuccess.emit();\r\n        }\r\n    }\r\n\r\n    private setTreeInfo(resData) {\r\n        if (!resData) {\r\n            return;\r\n        }\r\n\r\n        let _treeInfo = null;\r\n        if (resData.treeInfo) {\r\n            const onlySelectLeaf = resData.treeInfo.onlySelectLeaf;\r\n            let _osl: ONLY_SELECT_LEAF = \"no\";\r\n            if (onlySelectLeaf !== undefined) {\r\n                _osl = onlySelectLeaf ? \"yes\" : \"no\";\r\n            }\r\n            _treeInfo = { ...resData.treeInfo, onlySelectLeaf: _osl };\r\n        }\r\n\r\n        const treeInfo = this.gridOptions.treeInfo;\r\n        if (treeInfo) {\r\n            if (\r\n                treeInfo.onlySelectLeaf === undefined ||\r\n                treeInfo.onlySelectLeaf === null\r\n            ) {\r\n                treeInfo.onlySelectLeaf = \"no\";\r\n            }\r\n\r\n            if (typeof treeInfo.onlySelectLeaf === \"boolean\") {\r\n                treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? \"yes\" : \"no\";\r\n            }\r\n\r\n            // 20210902\r\n            if (this.loadTreeDataType === \"default\") {\r\n                treeInfo.loadDataType = _treeInfo.loadDataType;\r\n            } else {\r\n                treeInfo.loadDataType = this.loadTreeDataType === \"loadall\" ? \"all\" : \"async\";\r\n                _treeInfo.loadDataType = treeInfo.loadDataType\r\n            }\r\n\r\n            if (treeInfo.onlySelectLeaf !== \"default\") {\r\n                _treeInfo = Object.assign(_treeInfo, treeInfo);\r\n            }\r\n        } else {\r\n            if (this.loadTreeDataType !== \"default\") {\r\n                _treeInfo.loadDataType = this.loadTreeDataType === \"loadall\" ? \"all\" : \"async\";\r\n            }\r\n        }\r\n\r\n        this.treeInfo = _treeInfo;\r\n    }\r\n\r\n    private loadTreeTableData(resData?: LookupGridResult, rebindEvent = true) {\r\n        const items = resData ? resData.items : this.gridOptions.items;\r\n        this.items = items;\r\n\r\n        if (resData) {\r\n            this.setTreeInfo(resData);\r\n\r\n            const treeInfo = this.gridOptions.treeInfo;\r\n            if (!treeInfo[\"treeDataIsInit\"]) {\r\n                if (treeInfo.layerType.toLowerCase() === \"pathcode\") {\r\n                    this.items = this.lookupUtils.makeTree(\r\n                        this.items,\r\n                        treeInfo\r\n                    );\r\n                } else {\r\n                    this.items = this.lookupUtils.makeTreeWithParentID(\r\n                        this.items,\r\n                        \"\",\r\n                        treeInfo.dataField ? `${treeInfo.dataField}.${treeInfo.parentField}`: treeInfo.parentField,\r\n                        this.idField\r\n                    );\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.componentRef.instance instanceof TreeTableComponent) {\r\n            const tt = this.componentRef.instance as TreeTableComponent;\r\n            if (this.treeInfo) {\r\n                tt.loadDataType = this.treeInfo.loadDataType;\r\n            }\r\n\r\n            if (!this.columns || !this.columns.length) {\r\n                tt.columns = resData.columns || [];\r\n                this.gridOptions.columns = tt.columns;\r\n            }\r\n\r\n            const isLoadAllTreeData = () => {\r\n                if (this.loadTreeDataType === \"default\") {\r\n                    return tt.loadDataType === \"all\";\r\n                } else {\r\n                    return this.loadTreeDataType === \"loadall\";\r\n                }\r\n            };\r\n\r\n            if (rebindEvent) {\r\n                this.ttEventMgr.bindTreetableEvent();\r\n            }\r\n            const isLoadAll = isLoadAllTreeData();\r\n\r\n            /** å®æ´æ èç¹æ£æ¥ By Lucas 20200302 */\r\n            \r\n            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);\r\n            tt.keepSelect = true;\r\n\r\n            if (this.useFavorite) {\r\n                this.favHelper.updateFavoritesStatus(this.items);\r\n            }\r\n\r\n            if (this.loadDataWhenOpen) {\r\n                tt.loadData(this.items);\r\n            }\r\n            tt.resize();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * å¨æå®æ´æ ä¸­ï¼æé¨åèç¹å ä¸ºæ¡ä»¶è¢«è¿æ»¤ï¼ä¸ºæ¾ç¤ºå®æ´æ ï¼\r\n     * è¿äºèç¹å¨è¿è¡æ¶æ¯ä¸åè®¸è¢«éä¸­ç, è¿åæ°çèç¹æ°ç»\r\n     * By Lucas 20200302\r\n     */\r\n    checkNodeCanBeSelect(nodes, isAllTreeData = false): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.hasOwnProperty(\"addtional\")) {\r\n                    node.selectable = !node[\"addtional\"];\r\n                }\r\n\r\n                if (node.children && node.children.length) {\r\n                    this.checkNodeCanBeSelect(node.children, isAllTreeData);\r\n                } else {\r\n                    if (isAllTreeData && (!this._searchState || !this._searchState.value)) {\r\n                        node.leaf = true;\r\n                    }\r\n                }\r\n\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    }\r\n\r\n    onChanges(val) {\r\n        if (!val) {\r\n            this.onClear();\r\n        } else {\r\n            this.displayText = val;\r\n            this.isTextChange = this.originalText !== this.displayText;\r\n            if (this.nosearch) {\r\n                this.setModelValue(val);\r\n                this.clearMappings.emit({ instance: this, value: val, });\r\n            }\r\n\r\n            this.onModelTouched(val);\r\n            this.valueChanged.emit(val);\r\n            this.textChanged.emit(val);\r\n        }\r\n    }\r\n\r\n\r\n    onClear(emit = true) {\r\n        this.isTextChange = false;\r\n        this.displayText = \"\";\r\n        this.displayValue = \"\";\r\n        this.originalText = \"\";\r\n        this.extendInfo = \"\";\r\n        this.setModelValue(\"\");\r\n        if (this.mappingFn) {\r\n            this.mappingFn(null, this.mapFields);\r\n        } else {\r\n            if (this.mapFields) {\r\n                const bindingData = this.selectionMgr.getBindingData();\r\n                if (bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        null,\r\n                        this.mapFields,\r\n                        bindingData\r\n                    );\r\n                }\r\n            }\r\n        }\r\n        this.multiSelMgr.clear();\r\n        if (emit) {\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    clearValue(emit = true) {\r\n        this.onClear(emit);\r\n    }\r\n\r\n    selectItem(rowData?: any) {\r\n        let selectedRow = null;\r\n        if (rowData) {\r\n            selectedRow = rowData;\r\n        } else {\r\n            selectedRow = this.selections;\r\n\r\n            if (!selectedRow) {\r\n                selectedRow = null;\r\n            } else {\r\n                if (Array.isArray(selectedRow) && !selectedRow.length) {\r\n                    selectedRow = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        this._searchState = { \r\n            field: '*',\r\n            value: ''\r\n        }\r\n\r\n        // å¦æå®ä¹äºèªå®ä¹å¤çç¡®å®äºä»¶ï¼åç±èªå®ä¹äºä»¶å¤çåé¢çé»è¾\r\n        if (this.okHandler) {\r\n            this.okHandler({ data: selectedRow, instance: this });\r\n        } else {\r\n            if (this.beforeSelectData) {\r\n                const bsdResult = this.beforeSelectData({\r\n                    instance: this,\r\n                    data: selectedRow,\r\n                });\r\n                if (bsdResult && bsdResult.subscribe) {\r\n                    bsdResult.subscribe((e: any) => {\r\n                        this._beforeSelectDataCallBack(e, selectedRow);\r\n                    });\r\n                } else {\r\n                    this.writeConsole('å¸®å©æ°æ®éä¸­åäºä»¶æªè¿åå¼æè¿åç±»åéObservable, è¯·æ£æ¥', 'error');\r\n                }\r\n            } else {\r\n                this._beforeSelectDataCallBack(true, selectedRow);\r\n            }\r\n        }\r\n    }\r\n\r\n    getPathCode(data, treeInfo = null) {\r\n       return this.lookupUtils.getPathCode(data, treeInfo || this.treeInfo);\r\n    }\r\n    getLayerData(data, treeInfo = null) {\r\n        return this.lookupUtils.getLayerData(data, treeInfo || this.treeInfo);\r\n    }\r\n\r\n\r\n    private getParentPathCode(rows) {\r\n        const maxBy = (arr, fn) =>\r\n            Math.max(\r\n                ...arr.map(typeof fn === \"function\" ? fn : (val) => val[fn])\r\n            );\r\n\r\n        // const { dataField, pathField, layerField } = this.treeInfo;\r\n        const maxLayer = maxBy(rows, (x) => this.getLayerData(x));\r\n\r\n        for (let i = 1; i <= maxLayer; i++) {\r\n            const _rows = rows.filter((n) => this.getLayerData(n) === i);\r\n            if (_rows && _rows.length && _rows.length < rows.length) {\r\n                _rows.forEach((r) => {\r\n                    const patchCode = this.getPathCode(r);\r\n                    const _rows2 = rows.filter(\r\n                        (n) => {\r\n                            var _pc = this.getPathCode(n);\r\n                            return _pc !== patchCode && _pc.indexOf(patchCode) === 0;\r\n                        }\r\n                    );\r\n                    if (_rows2 && _rows2.length) {\r\n                        rows = rows.filter(\r\n                            (n) => this.getPathCode(n) !== patchCode\r\n                        );\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        return rows;\r\n    }\r\n\r\n    private _beforeSelectDataCallBack(e, selectedRow) {\r\n        let canSelect = e;\r\n        let message = \"\";\r\n        if (typeof e === \"boolean\") {\r\n            canSelect = e;\r\n        } else {\r\n            if (typeof e === \"object\") {\r\n                canSelect = e.canSelect;\r\n                message = e.message;\r\n            } else {\r\n                canSelect = false;\r\n            }\r\n        }\r\n\r\n        if (!selectedRow) {\r\n            message = this.mustChoosAdatarow;\r\n            canSelect = false;\r\n        }\r\n\r\n        if (canSelect) {\r\n            let selectedRows$ = of(selectedRow);\r\n            // å¤é æ å¸®å© å¼æ­¥å è½½ åçº§ç  å¼å¯åæ­¥éæ© æåå«ä¸çº§\r\n            if (!this.singleSelect && this.enableCascade && this.isTree() ) {\r\n                if (this.treeInfo.loadDataType !== \"all\" && this.treeInfo.layerType === \"pathcode\" && this.isGetAllChidlNodes) {\r\n                    let parentsIds = this.getParentPathCode(selectedRow);\r\n                    if (parentsIds && parentsIds.length) {\r\n                        parentsIds = parentsIds.map(\r\n                            (n) => this.getPathCode(n)\r\n                        );\r\n                        this.showLoading();\r\n                        selectedRows$ = this.httpMgr\r\n                            .getData({ parentsIds }, \"allChildren\")\r\n                            .pipe(\r\n                                map((r: LookupGridResult) => {\r\n                                    const items = r.items\r\n                                        ? r.items.map((d) => d.data)\r\n                                        : [];\r\n                                    const allitems = [...selectedRow, ...items];\r\n                                    let ids = allitems.map((n) => n[this.idField]);\r\n                                    ids = Array.from(new Set(ids));\r\n                                    return ids.map((n) =>\r\n                                        allitems.find((a) => a[this.idField] === n)\r\n                                    );\r\n                                })\r\n                            );\r\n                    }\r\n                }\r\n            }\r\n\r\n            selectedRows$.subscribe((rows) => {\r\n                this.closeLoading();\r\n                if (this.isGetAllChidlNodes) {\r\n                    this.lookupSelectionSer.loadSelections(rows);\r\n                }\r\n                this.updateControlValue(rows);\r\n                if (!this.useTip || !rows) {\r\n                    return;\r\n                }\r\n                if (this.useTip) {\r\n                    this.personalConfigService.updateQueckSelected(\r\n                        rows,\r\n                        this.localService.localeId\r\n                    );\r\n                }\r\n            });\r\n        } else {\r\n            if (message) {\r\n                if (this.notifyService) {\r\n                    this.notifyService.warning(message);\r\n                } else {\r\n                    this.messagerService.warning(message, \"\", true, () => {\r\n                        this.dialog.el.nativeElement.click();\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private updateControlValue(selectedRow) {\r\n        if (selectedRow) {\r\n            this.setDisplayText(selectedRow);\r\n            if (this.mappingFn) {\r\n                this.mappingFn(selectedRow, this.mapFields, this.bindingData);\r\n            } else {\r\n                if (this.mapFields && this.bindingData) {\r\n                    this.defaultMapping.lookupFieldMap(\r\n                        selectedRow,\r\n                        this.mapFields,\r\n                        this.bindingData\r\n                    );\r\n                }\r\n            }\r\n            this.setModelValue(this.displayText);\r\n            if (this[\"inDatagrid\"] && selectedRow) {\r\n                const selectItems = Array.isArray(selectedRow)\r\n                    ? selectedRow\r\n                    : [selectedRow];\r\n                this.updateBindData(selectItems);\r\n            }\r\n            this.selectedData.emit(selectedRow);\r\n            this.runDictPickedEvent(selectedRow);\r\n            this.isTextChange = false;\r\n        } else {\r\n            if (document.activeElement) {\r\n                (document.activeElement as HTMLButtonElement).blur();\r\n            }\r\n            this.messagerService.warning(this.mustChoosAdatarow);\r\n        }\r\n    }\r\n\r\n    private updateBindData(selectedRow) {\r\n        if (!this.mapFields) {\r\n            return;\r\n        }\r\n\r\n        const helpFields = Object.keys(this.mapFields);\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n\r\n            if (bindingData) {\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = selectedRow\r\n                                .map((r) => {\r\n                                    return this.utils.getValue(helpField, r);\r\n                                })\r\n                                .join(this.multipleChoiceSeparator);\r\n                            this.utils.setValue(bindingData, formField, val);\r\n                        });\r\n                });\r\n            }\r\n\r\n            // if (bindingData.setValue) {\r\n            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;\r\n            //     let pathArr: string[] = [];\r\n            //     if (bindingPath) {\r\n            //         pathArr = bindingPath.split('/').filter(n => n !== '');\r\n            //     }\r\n\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const fieldPaths = pathArr.concat(formField.split('.'));\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);\r\n            //         });\r\n            //     });\r\n            // }\r\n        } else {\r\n            // if (this.bindingData) {\r\n            //     helpFields.forEach((helpField: any) => {\r\n            //         this.mapFields[helpField].split(',').forEach((formField: any) => {\r\n            //             const val = selectedRow.map(r => {\r\n            //                 return this.utils.getValue(formField, r);\r\n            //             }).join(this.multipleChoiceSeparator);\r\n            //             this.utils.setValue(this.bindingData, formField, val);\r\n            //         });\r\n            //     });\r\n            // }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoFields(isHelpData = true) {\r\n        if (!this.extInfoFields) {\r\n            this.writeConsole(`æªè®¾ç½®æ©å±å­æ®µã`);\r\n            return [];\r\n        }\r\n        const tipFieldArr = this.extInfoFields.split(\",\");\r\n\r\n        if (isHelpData) {\r\n            let extendInfoFields = [];\r\n            extendInfoFields = tipFieldArr.map((tf) => {\r\n                const mapKey = Object.keys(this.mapFields).find((k) => {\r\n                    return this.mapFields[k] === tf;\r\n                });\r\n\r\n                if (mapKey) {\r\n                    return mapKey;\r\n                } else {\r\n                    this.writeConsole(`å¨å¸®å©æ å°å­æ®µä¸­æªæ¾å°${tf}`);\r\n                    return \"\";\r\n                }\r\n            });\r\n            return extendInfoFields;\r\n        }\r\n\r\n        return tipFieldArr;\r\n    }\r\n\r\n    onUpdateExtendInfo() {\r\n        const jsonData = this.selectionMgr.getBindingData();\r\n        this.updateExtendInfo(jsonData, false);\r\n    }\r\n\r\n    // éä¸­å¸®å©æ°æ®åï¼æ´æ°æ©å±ä¿¡æ¯\r\n    private updateExtendInfo(data: any, isHelpData = true) {\r\n        if (data) {\r\n            if (this.extInfoFormatter) {\r\n                if (Array.isArray(data)) {\r\n                    const tipString = data.map((n) => {\r\n                        return this.getExtendInfoText(n);\r\n                    });\r\n                    this.extendInfo = tipString.join(\"ï¼\");\r\n                } else {\r\n                    this.extendInfo = this.getExtendInfoText(data);\r\n                }\r\n            } else {\r\n                const extendInfoFields = this.getExtendInfoFields(isHelpData);\r\n                if (extendInfoFields && extendInfoFields.length) {\r\n                    if (Array.isArray(data)) {\r\n                        const tipString = data.map((n) => {\r\n                            return this.getExtendInfoText(n, extendInfoFields);\r\n                        });\r\n                        this.extendInfo = tipString.join(\"ï¼\");\r\n                    } else {\r\n                        this.extendInfo = this.getExtendInfoText(\r\n                            data,\r\n                            extendInfoFields\r\n                        );\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private getExtendInfoText(itemData, fields = null) {\r\n        if (typeof this.extInfoFormatter === \"function\") {\r\n            return this.extInfoFormatter({\r\n                bindingData: itemData,\r\n                instance: this,\r\n            });\r\n        } else {\r\n            const tipString = [];\r\n            const tipValues = fields.map((t) => {\r\n                const tfv = this.utils.getValue(t, itemData);\r\n                tipString.push(tfv);\r\n                return { [t]: tfv };\r\n            });\r\n            return tipString.join(\" \");\r\n        }\r\n    }\r\n\r\n    private getDisplayText(rows: any) {\r\n        const df = this.displayFields\r\n            ? this.displayFields.split(\",\")\r\n            : [this.textField];\r\n        const txtArr = rows.map((r) => {\r\n            const t = [];\r\n            df.forEach((n) => {\r\n                t.push(this.utils.getValue(n, r));\r\n            });\r\n            return t.join(this.displayTextSeparator);\r\n        });\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            return txtArr.join(\"\");\r\n        } else {\r\n            if (this.displayFields) {\r\n                return txtArr.map((t) => \"[\" + t + \"]\").join(this.multipleChoiceSeparator);\r\n            } else {\r\n                return txtArr.join(this.multipleChoiceSeparator);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setDisplayText(selectedRow: any) {\r\n        this.originalText = this.displayText;\r\n\r\n        if (this.gridOptions.singleSelect) {\r\n            if (this.displayFormatter) {\r\n                this.displayText = this.utils.getValue(\r\n                    this.textField,\r\n                    selectedRow\r\n                );\r\n                if (!this.isTree()) {\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        {\r\n                            lookup: this,\r\n                            datatable: this.componentRef\r\n                                .instance as DataTableComponent,\r\n                        }\r\n                    );\r\n                } else {\r\n                    const tt = this.componentRef.instance as TreeTableComponent;\r\n                    this.displayText = this.displayFormatter(\r\n                        this.displayText,\r\n                        [selectedRow],\r\n                        { lookup: this, tree: tt }\r\n                    );\r\n                }\r\n            } else {\r\n                this.displayText = this.getDisplayText([selectedRow]);\r\n            }\r\n            this.displayValue = selectedRow[this.valueField || this.idField];\r\n        } else {\r\n            if (selectedRow.length) {\r\n                if (this.displayFormatter) {\r\n                    this.displayText = selectedRow\r\n                        .map((r) => {\r\n                            return this.utils.getValue(this.textField, r);\r\n                        })\r\n                        .join(this.multipleChoiceSeparator);\r\n                    if (!this.isTree()) {\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            {\r\n                                lookup: this,\r\n                                datatable: this.componentRef\r\n                                    .instance as DataTableComponent,\r\n                            }\r\n                        );\r\n                    } else {\r\n                        const tt = this.componentRef\r\n                            .instance as TreeTableComponent;\r\n                        this.displayText = this.displayFormatter(\r\n                            this.displayText,\r\n                            selectedRow,\r\n                            { lookup: this, tree: tt }\r\n                        );\r\n                    }\r\n                } else {\r\n                    this.displayText = this.getDisplayText(selectedRow);\r\n                }\r\n\r\n                this.displayValue = selectedRow\r\n                    .map((r) => {\r\n                        return this.utils.getValue(this.valueField || this.idField, r);\r\n                    })\r\n                    .join(this.multipleChoiceSeparator);\r\n            }\r\n        }\r\n        this.originalText = this.displayText;\r\n    }\r\n\r\n    runDictPickedEvent(rowData: any) {\r\n        if (this.dictPicked) {\r\n            if (this.okButton) {\r\n                this.okButton.nativeElement.disabled = true;\r\n            }\r\n            this.dictPickedSubscription = this.dictPicked(rowData).subscribe(\r\n                (v: any) => {\r\n                    if (this.okButton) {\r\n                        this.okButton.nativeElement.disabled = false;\r\n                    }\r\n                    if (typeof v === \"boolean\") {\r\n                        if (v) {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else if (\r\n                        typeof v === \"object\" &&\r\n                        v.closeDialog !== undefined &&\r\n                        !v.closeDialog\r\n                    ) {\r\n                        if (v.message) {\r\n                            this.messagerService.warning(v.message);\r\n                        } else {\r\n                            this.closeDialog(rowData);\r\n                        }\r\n                    } else {\r\n                        this.closeDialog(rowData);\r\n                    }\r\n                }\r\n            );\r\n        } else {\r\n            this.closeDialog(rowData);\r\n        }\r\n    }\r\n\r\n    private focusToInput(): void {\r\n        this.zone.runOutsideAngular(() => {\r\n            setTimeout(() => {\r\n                if (this.inputGroup && this.inputGroup.textbox) {\r\n                    this.inputGroup.textbox.nativeElement.focus();\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    closeDialog(rowData = null) {\r\n        if (this.dialog) {\r\n            this.dialog.close();\r\n        }\r\n        \r\n        if (rowData) {\r\n            this.multiSelMgr.save(rowData);\r\n        }\r\n        \r\n        // this.isShow = false;\r\n        this.focusToInput();\r\n    }\r\n\r\n    cancelSelect() {\r\n        this.closeDialog();\r\n        this.isTextChange = false;\r\n        if (!this.nosearch) {\r\n            this.displayText = this.originalText;\r\n            this.setModelValue(this.displayText);\r\n        }\r\n\r\n        if (this.cancelHandler) {\r\n            this.cancelHandler(this);\r\n        }\r\n    }\r\n\r\n    setModelValue(v) {\r\n        if (this.onModelChange) {\r\n            this.onModelChange(v);\r\n            this.valueChanged.emit(v);\r\n        }\r\n    }\r\n\r\n    // æ°æ®åè¡¨ï¼æ¶èï¼ å·²éæ°æ® tab é¡µåæ¢\r\n    onTabChange(e: any) {\r\n        this.activeTab = e.tabIndex;\r\n        this.personalConf.tabIndex = this.activeTab;\r\n        const _firstChange = this.isTabChanged;\r\n        this.isTabChanged = true;\r\n        this.personalConfigService.updatePersonalConfig({\r\n            tabIndex: e.tabIndex,\r\n        });\r\n\r\n        if (this.activeTab === \"datalist\") {\r\n            if (this.isDoublleList() && !this.leftComponentRef) {\r\n                if (this.navigationOptions) {\r\n                    this.lookupCmpMgr.createLeftComponent(\r\n                        this.navigationOptions\r\n                    );\r\n                } else {\r\n                    this.initData();\r\n                    return;\r\n                }\r\n            }\r\n\r\n            if (!this.items || !this.items.length) {\r\n                this.initData();\r\n            } else {\r\n                if (!_firstChange) {\r\n                    if (this.isTree()) {\r\n                        this.loadTreeTableData();\r\n                    } else {\r\n                        this.loadDataTableData();\r\n                        this.dtEventMgr.bindDataTableEvent();\r\n                    }\r\n                }\r\n                // this.selectionMgr.selectCurrentValue();\r\n            }\r\n            this.showGetAllChildrenCheckbox();\r\n        } else {\r\n            if (this.activeTab === \"favorite\") {\r\n                if (this.isTree()) {\r\n                    this.initData();\r\n                } else {\r\n                    if (\r\n                        !this.favoriteItems ||\r\n                        !this.favoriteItems.length ||\r\n                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length\r\n                    ) {\r\n                        this.initData();\r\n                    } else if (!_firstChange) {\r\n                        this.favHelper._loadFavoriteData(this.favoriteItems);\r\n                        // this.selectionMgr.selectCurrentValue();\r\n                    }\r\n                    //  else {\r\n                    //     this.selectionMgr.selectCurrentValue();\r\n                    // }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.changeDetector.detectChanges();\r\n        setTimeout(() => {\r\n            this.resizeCmp();\r\n            if (this.isTree()) {\r\n                const y = this.componentRef.instance.state.scrollY;\r\n                this.componentRef.instance.scrollToY(y, 0);\r\n\r\n                if (this.enableCascade) {\r\n                    this.ttEventMgr.cascadeValueChanged(this.cascadeStatus);\r\n                }\r\n            }\r\n\r\n            if (this.isDoublleList() && this.displayType === LookupGridDisplayType.NavTreeList && !this.navTreeToList) {\r\n                this.leftComponentRef.instance.updateScrollPosition(); \r\n            }\r\n            this.selectionMgr.selectCurrentValue();\r\n        });\r\n    }\r\n\r\n    //#region  Tag View ----------------------------------------------------------------------\r\n    private registerMouseEventForTagView() {\r\n        if (this.enableClear) {\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseenter\",\r\n                this.onTagboxMouseEnter.bind(this)\r\n            );\r\n            this.tagbox.nativeElement.addEventListener(\r\n                \"mouseleave\",\r\n                this.onTagboxMouseLeave.bind(this)\r\n            );\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? \"\" : \"none\";\r\n        const clearIcon = event.target.querySelector(\".input-group-clear\");\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseEnter(event) {\r\n        if (this.displayText && this.enableClear) {\r\n            if (!this.readonly && !this.disabled) {\r\n                this.showTagboxClearButton = true;\r\n            }\r\n        }\r\n        if (this.showTagboxClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    private onTagboxMouseLeave(event) {\r\n        this.toggleClearIcon(event);\r\n    }\r\n\r\n    onRemoveSelectItem($event, txt) {\r\n        $event.stopPropagation();\r\n        const textArray = Array.from(this.displayTextList);\r\n        const removedIndex = this.displayTextList.indexOf(txt);\r\n        textArray.splice(removedIndex, 1);\r\n        this.displayText = textArray.join(this.multipleChoiceSeparator);\r\n        this.originalText = this.displayText;\r\n        this.setModelValue(this.displayText);\r\n\r\n\r\n        if (this.displayValue) {\r\n            const vals = this.displayValue.split(this.multipleChoiceSeparator);\r\n            vals.splice(removedIndex, 1);\r\n            this.displayValue = vals.join(this.multipleChoiceSeparator);\r\n        }\r\n\r\n        if (this.mapFields) {\r\n            this.updateOtherFieldDataWhenTagremoved(removedIndex);\r\n        }\r\n\r\n        this.tagRemoved.emit({ removedIndex, instance: this });\r\n    }\r\n\r\n    private updateOtherFieldDataWhenTagremoved(removedIndex) {\r\n        const helpFields = Object.keys(this.mapFields);\r\n        const textFieldIndex = helpFields.indexOf(this.textField);\r\n\r\n        if (\r\n            this.ngControl &&\r\n            this.ngControl.formDirective &&\r\n            this.ngControl.formDirective.form &&\r\n            this.ngControl.formDirective.form.bindingData\r\n        ) {\r\n            const bindingData = this.ngControl.formDirective.form.bindingData;\r\n            if (bindingData.setValue) {\r\n                const bindingPath =\r\n                    this.ngControl.formDirective.form.bindingPath;\r\n                let pathArr: string[] = [];\r\n                if (bindingPath) {\r\n                    pathArr = bindingPath.split(\"/\").filter((n) => n !== \"\");\r\n                }\r\n\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const fieldPaths = pathArr.concat(\r\n                                formField.split(\".\")\r\n                            );\r\n                            const val = bindingData.getValue(fieldPaths);\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            bindingData.setValue(\r\n                                pathArr.concat(fieldPaths),\r\n                                newVal,\r\n                                true,\r\n                                true\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        } else {\r\n            if (this.bindingData) {\r\n                if (textFieldIndex > -1) {\r\n                    helpFields.splice(textFieldIndex, 1);\r\n                }\r\n                helpFields.forEach((helpField: any) => {\r\n                    this.mapFields[helpField]\r\n                        .split(\",\")\r\n                        .forEach((formField: any) => {\r\n                            const val = this.utils.getValue(\r\n                                formField,\r\n                                this.bindingData\r\n                            );\r\n                            const valArr = val.split(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            valArr.splice(removedIndex, 1);\r\n                            const newVal = valArr.join(\r\n                                this.multipleChoiceSeparator\r\n                            );\r\n                            this.utils.setValue(\r\n                                this.bindingData,\r\n                                formField,\r\n                                newVal\r\n                            );\r\n                        });\r\n                });\r\n            }\r\n        }\r\n    }\r\n    //#endregion\r\n\r\n    onAllChildNodesClick($event: any) {\r\n        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;\r\n    }\r\n\r\n    onIncludeSubordinatesChange(val) {\r\n        this.includeSubordinates = val;\r\n        this.includeSubordinates$.next(val);\r\n    }\r\n\r\n    onTagContainerClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        if (this.tagInput) {\r\n            this.tagInput.focus();\r\n            this.tagInput.textbox.nativeElement.click();\r\n        }\r\n    }\r\n\r\n    expandFirstNode(nodes): TreeNode[] {\r\n        if (nodes && nodes.length) {\r\n            return nodes.map((node: TreeNode) => {\r\n                if (node.children && node.children.length) {\r\n                    node.expanded = true;\r\n                    this.expandFirstNode(node.children);\r\n                }\r\n                return node;\r\n            });\r\n        }\r\n        return nodes;\r\n    };\r\n\r\n    // ç¨äºç»ç»ä¸ªæ§åæ°æ®key\r\n    getLookupBindingFields() {\r\n        if (this.ngControl) {\r\n            if (this.ngControl.name) {\r\n                return this.ngControl.name;\r\n            } else {\r\n                if (this.mapFields && this.mapFields.length) {\r\n                    return Object.keys(this.mapFields).map(k => {\r\n                        return this.mapFields[k];\r\n                    }).join('_');\r\n                } else {\r\n                    return this.textField;\r\n                }\r\n            }\r\n        } else {\r\n            return '';\r\n        }\r\n    }\r\n\r\n    onConditionsChange($event) {\r\n        if (this.isTree() ) {\r\n            this.ttEventMgr.conditionsChange($event);\r\n        } else {\r\n            this.dtEventMgr.conditionsChange($event);\r\n        }\r\n    }\r\n\r\n    clearSelected($event: MouseEvent) {\r\n        if($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        const msg = this.localService.getValue('lookup.selectedInfo.confirm');\r\n\r\n        this.messagerService.confirm(msg || 'æ¨ç¡®è®¤è¦åæ¶ææå·²éä¸­çè®°å½åï¼').subscribe((e) => {\r\n            if (e) {\r\n                this.multiSelMgr.clear();\r\n                if (this.selectedDtRef) {\r\n                    this.selectedDtRef.clearSelections();\r\n                } \r\n            }\r\n        });\r\n    }\r\n\r\n    onDeleteSelectedItem($event: MouseEvent) {\r\n        if($event) {\r\n            $event.stopPropagation();\r\n        }\r\n\r\n        if (this.selectedDtRef.selections && this.selectedDtRef.selections.length) {\r\n            const unCheckeIds = this.selectedDtRef.selections.map(n => n[this.idField]);\r\n            this.multiSelMgr.deleteSelectedItems(this.selectedDtRef.selections);\r\n            this.selectedDtRef.unCheckRows(unCheckeIds);\r\n        } else {\r\n            this.notifyService.warning('è¯·å¾éè¦å é¤çè®°å½ï¼');\r\n        }\r\n    }\r\n\r\n    initColumnWidth(columns: any, typ: 'data'|'nav'|'fav'|'sel' = 'data') {\r\n        if (this.personalConf && this.personalConf.colSizeInfo && this.personalConf.colSizeInfo.data) {\r\n            const fieldsizeData = this.personalConf.colSizeInfo[typ];\r\n            if(fieldsizeData) {\r\n                const fields = Object.keys(fieldsizeData);\r\n                if (fields && fields.length) {\r\n                    columns.forEach(n => {\r\n                        if (fieldsizeData[n.field]) {\r\n                            n.width = fieldsizeData[n.field];\r\n                        }\r\n                    })\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n","import {\r\n    Component, OnInit, ElementRef, AfterViewInit, OnChanges,\r\n    Output, EventEmitter, ViewChild, Injector, Renderer2, Input, SimpleChanges, ViewEncapsulation\r\n} from '@angular/core';\r\nimport { trigger, state, style, transition, animate } from '@angular/animations';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\n\r\n@Component({\r\n    selector: 'lookup-tabs',\r\n    templateUrl: './lookup-tabs.component.html',\r\n    styleUrls: ['./lookup-tabs.component.scss'],\r\n    animations: [\r\n        trigger('flyInOut', [\r\n            transition(':enter', [style({ opacity: 0 }), animate('.3s', style({ opacity: 1 }))]),\r\n            transition(':leave', [animate('.3s', style({ opacity: 0 }))])\r\n        ])\r\n    ]\r\n})\r\nexport class LookupTabsComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    @Input() enableFav = false;\r\n    @Input() activeTab = 'datalist';\r\n    @Input() visible = false;\r\n\r\n    @Input() layout = 'default';\r\n    @Input() dialogTitle = '';\r\n\r\n    @Output() tabChange = new EventEmitter<any>();\r\n\r\n    @ViewChild('inkBar') inkBarRef: ElementRef;\r\n    @ViewChild('dataListNav') dataListNavRef: ElementRef;\r\n    @ViewChild('favoriteNav') favoriteNavRef: ElementRef;\r\n    @ViewChild('selectedNav') selectedNavRef: ElementRef;\r\n    @ViewChild('advanceLayout') advanceLayoutRef: ElementRef;\r\n\r\n    public personalConfigService: PersonalConfigService;\r\n\r\n    private render: Renderer2 = null;\r\n    private el: ElementRef = null;\r\n    lookupIns = null;\r\n    constructor(public injector: Injector) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.render = this.injector.get(Renderer2);\r\n        this.el = this.injector.get(ElementRef);\r\n        this.lookupIns = this.injector.get(LookupGridComponent, null);\r\n        if (!this.lookupIns.labels) {\r\n            this.lookupIns.initLabels();\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.initInkBarPos(changes.activeTab.currentValue);\r\n            \r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        setTimeout(() => {\r\n            this.initInkBarPos(this.activeTab);\r\n        }, 300);\r\n    }\r\n\r\n    navClickHandle(e: Event, v: string) {\r\n        e.stopPropagation();\r\n        if (this.activeTab !== v) {\r\n            this.activeTab = v;\r\n            this.tabChange.emit({ event: e, tabIndex: v });\r\n            this.initInkBarPos(v);\r\n            \r\n        }\r\n    }\r\n\r\n    initInkBarPos(which: string) {\r\n\r\n        if (this.layout !== 'default') {\r\n            return;\r\n        }\r\n\r\n        if (!this.enableFav) {\r\n            return;\r\n        }\r\n\r\n        let width = this.dataListNavRef.nativeElement.offsetWidth;\r\n        let left = 0;\r\n        if (which !== 'datalist') {\r\n            left = this.dataListNavRef.nativeElement.offsetWidth;\r\n        }\r\n        if (which === 'favorite') {\r\n            width = this.favoriteNavRef.nativeElement.offsetWidth;\r\n        } else if (which === 'selected') {\r\n            if (this.favoriteNavRef) {\r\n                left += this.favoriteNavRef.nativeElement.offsetWidth;\r\n            }\r\n\r\n            if (this.selectedNavRef) {\r\n                width = this.selectedNavRef.nativeElement.offsetWidth;\r\n            } else {\r\n                this.activeTab = 'datalist';\r\n            }\r\n        }\r\n\r\n        this.inkBarRef.nativeElement.style = `width: ${width}px; transform: translate3d(${left}px, 0px, 0px);`;\r\n    }\r\n    ngOnInit(): void {\r\n    }\r\n\r\n}\r\n","import { Directive, OnInit, AfterViewInit, Renderer2, Injector, Input} from '@angular/core';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { PersonalConfigService } from './lookup-presonalConfig.service';\r\nimport { delay } from 'rxjs/operators';\r\nimport { LocaleService } from '@farris/ui-locale';\r\n@Directive({\r\n    selector: '[lookup-tip]'\r\n})\r\nexport class LookupTipDirective implements OnInit, AfterViewInit {\r\n    @Input('lookup-tip') enableTip = false;\r\n    private tipPanel: Element;\r\n    private leaveEvent: any;\r\n    private enterEvent: any;\r\n    private clickEvent: any;\r\n    private isInTipPanel = false;\r\n    private selected: any[];\r\n    private personalConfigService: PersonalConfigService;\r\n    public localService: LocaleService;\r\n    private tipText = 'æ¨è¦æ¾çæ¯ä¸æ¯è¿äºï¼';\r\n    constructor(\r\n        private inputRef: InputGroupComponent,\r\n        private renderer: Renderer2,\r\n        public injector: Injector\r\n    ) {\r\n        this.personalConfigService = this.injector.get(PersonalConfigService, null);\r\n        this.localService = this.injector.get(LocaleService);\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        this.tipText = this.localService.getValue('lookup.tipText');\r\n        this.enableTip = false; // å æ°æ®æéé®é¢ï¼æ­¤åè½æå±è½ tfs: 403924\r\n        if (this.enableTip) {\r\n            this.inputRef.iconMouseEnter.subscribe(e => {\r\n                this.creatPanel();\r\n            });\r\n            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe(e => {\r\n                if (!this.isInTipPanel) {\r\n                    this.removePanel();\r\n                }\r\n            });\r\n            this.inputRef.clickHandle.subscribe(e => {\r\n                this.removePanel();\r\n            });\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void { }\r\n\r\n    // è·åå¿«æ·è¾å¥æ°æ®\r\n    private getQuickSelectedByLocaleId() {\r\n        const localeid = this.localService.localeId;\r\n        const personalConf = this.personalConfigService.getPersonalData();\r\n        if (personalConf && personalConf.quickSelected) {\r\n            const items = personalConf.quickSelected[localeid];\r\n            if (items && items.length) {\r\n                return items;\r\n            }\r\n        }\r\n\r\n        return null;\r\n    }\r\n\r\n    creatPanel() {\r\n        this.selected = this.getQuickSelectedByLocaleId();\r\n        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {\r\n            return;\r\n        }\r\n        const pos = this.setPosition();\r\n        const ul = this.renderer.createElement('ul');\r\n        const path = this.personalConfigService.textField.split('.');\r\n        this.selected.forEach((item, index) => {\r\n            const li = this.renderer.createElement('li');\r\n            li.innerHTML = this.find(item, this.personalConfigService.textField);\r\n            this.renderer.setProperty(li, 'id', index);\r\n            this.renderer.appendChild(ul, li);\r\n        });\r\n        const header = this.renderer.createElement('div');\r\n        this.renderer.addClass(header, 'lookup-tip-header');\r\n        header.innerHTML = this.tipText;\r\n        this.tipPanel = this.renderer.createElement('div');\r\n        this.renderer.appendChild(this.tipPanel, header);\r\n        this.renderer.appendChild(this.tipPanel, ul);\r\n        this.renderer.addClass(this.tipPanel, 'lookup-tip');\r\n        this.renderer.setStyle(this.tipPanel, 'top', pos.top);\r\n        this.renderer.setStyle(this.tipPanel, 'left', pos.left);\r\n        this.renderer.setStyle(this.tipPanel, 'width', pos.width);\r\n        this.renderer.appendChild(document.body, this.tipPanel);\r\n        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', () => {\r\n            this.removePanel();\r\n        });\r\n        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', () => {\r\n            this.isInTipPanel = true;\r\n        });\r\n        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (e) => {\r\n            if (e.target.nodeName === 'LI') {\r\n                this.selectItem(e.target.id);\r\n            }\r\n        });\r\n    }\r\n\r\n    removePanel() {\r\n        if (document.body.contains(this.tipPanel)) {\r\n            this.renderer.removeChild(document.body, this.tipPanel);\r\n            this.tipPanel = null;\r\n            this.isInTipPanel = false;\r\n            this.leaveEvent();\r\n            this.enterEvent();\r\n            this.clickEvent();\r\n        }\r\n    }\r\n\r\n    setPosition() {\r\n        const { left, top, width, height } = this.inputRef.inputGroup.nativeElement.getBoundingClientRect();\r\n        return {\r\n            left: left + 'px',\r\n            top: top + height + 'px',\r\n            width: width + 'px'\r\n        };\r\n    }\r\n\r\n    selectItem(val) {\r\n        const item = this.selected.find((el, index) => Number(val) === index);\r\n        this.removePanel();\r\n        if (this.personalConfigService.singleSelect) {\r\n            this.personalConfigService.selectItemObser$.next(item);\r\n        } else {\r\n            this.personalConfigService.selectItemObser$.next([item]);\r\n        }\r\n    }\r\n\r\n    find(obj, keys) {\r\n        const keyArr = keys.split('.');\r\n        const key = keyArr[0];\r\n        const target = obj[key];\r\n        if (target instanceof Object) {\r\n            keyArr.shift();\r\n            return this.find(target, keyArr.join('.'));\r\n        } else {\r\n            return target;\r\n        }\r\n    }\r\n}\r\n","import { ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, HostListener, Injector, Input, OnInit, Output, ViewChild } from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'lookup-quick-select-panel',\r\n    templateUrl: './quick-select-panel.component.html'\r\n})\r\n\r\nexport class LookupQuickSelectPanelComponent implements OnInit {\r\n\r\n    @Input() showMore = true;\r\n    @Input() data: Array<any> = [];\r\n    @Input() textField: string = '';\r\n    @Input() formatter: (rowObj: any) => string;\r\n    @Input() maxItems = 10;\r\n\r\n    @Output() moreClcik = new EventEmitter();\r\n    @Output() itemClick = new EventEmitter();\r\n\r\n    @ViewChild('itemsContainer') itemsContainer: ElementRef<any>;\r\n\r\n    activeIndex = -1;\r\n\r\n    constructor(private injector: Injector, private cdr: ChangeDetectorRef) { }\r\n\r\n    @HostListener('mousedown', ['$event'])\r\n    onClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    ngOnInit() { }\r\n\r\n    loadData(items: any) {\r\n        this.data = items;\r\n\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n\r\n    onMoreClick($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.moreClcik.emit($event);\r\n    }\r\n\r\n    formatData(rowObj: any) {\r\n        return this.formatter(rowObj);\r\n    }\r\n\r\n    onItemClick($event, item) {\r\n        this.itemClick.emit({data: item, evnet: $event});\r\n    }\r\n\r\n    setActiveItem(index: number) {\r\n        this.activeIndex = index;\r\n        if (!this.cdr['destroyed']) {\r\n            this.cdr.detectChanges();\r\n        }\r\n    }\r\n}","import { AfterViewInit, ComponentFactoryResolver, ComponentRef, Directive, ElementRef, HostListener, Injector, Input, NgZone, OnDestroy, OnInit, Optional, Renderer2 } from '@angular/core';\r\nimport { reqAnimFrame } from '@farris/ui-common';\r\nimport { InputGroupComponent } from '@farris/ui-input-group';\r\nimport { from, fromEvent, Observable } from 'rxjs';\r\nimport { debounceTime, filter, map } from 'rxjs/operators';\r\n\r\nimport { LookupGridDisplayType, QuickSelectOption } from '../lookup-displaytype';\r\nimport { DisplayInfo, LOAD_DATA_TYPE, LookupGridResult, PickingResult } from '../lookup-grid-options';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { LookupQuickSelectPanelComponent } from './quick-select-panel.component';\r\n\r\n@Directive({ selector: '[quick-select]'})\r\nexport class LookupQuickSelectDirective implements OnInit, AfterViewInit, OnDestroy {\r\n    @Input('quick-select') options: QuickSelectOption;\r\n    private panelElement: HTMLElement;\r\n    private cmpRef: ComponentRef<LookupQuickSelectPanelComponent>;\r\n\r\n    private data = [];\r\n\r\n    constructor(private injector: Injector, private ngzone: NgZone, private render: Renderer2, private inputRef: InputGroupComponent, private lookupRef: LookupGridComponent,\r\n        private cfr: ComponentFactoryResolver) {\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.options && this.options.enable) {\r\n            this.inputRef.inputClick.subscribe((e: MouseEvent) => {\r\n                e.stopPropagation();\r\n                if (!this.panelElement) {\r\n                    // æ§è¡å¸®å©å\r\n                    this.lookupRef.dictPicking({\r\n                        instance: this,\r\n                    }).subscribe((pr: PickingResult) => {\r\n                        if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {\r\n                            return;\r\n                        }\r\n                        const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                        this.lookupRef.customData = customData;\r\n                        if (show) {\r\n                            this.createDataPanel();\r\n                        } else {\r\n                            if (message) {\r\n                                this.lookupRef.notifyService.warning(message);\r\n                            }\r\n                        }\r\n                    })\r\n                }\r\n            });\r\n\r\n            this.inputRef.valueChange.pipe(\r\n                debounceTime(200)\r\n            ).subscribe((val: string) => {\r\n                this.lookupRef.dictPicking({instance: this}).subscribe((pr: PickingResult) => {\r\n                    if (this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!this.lookupRef.singleSelect && this.lookupRef.viewType === 'text')) {\r\n                        return;\r\n                    }\r\n                    const { show, customData, message } = this.lookupRef.dialogMgr.checkDictPickingResult(pr);\r\n                    this.lookupRef.customData = customData;\r\n                    if (!this.panelElement) {\r\n                        this.createDataPanel();\r\n                    } else {\r\n                        this.panelElement.style.overflow = 'hidden';\r\n                        this.setPanelPosition(false);\r\n                        this.loadData();\r\n                    }\r\n                })\r\n            });\r\n\r\n            this.inputRef.keydownHandle.pipe(\r\n                filter((event: KeyboardEvent) => {\r\n                    return event.key === 'Escape' || event.key === 'Tab' ||  event.key === 'F2';\r\n                })\r\n            ).subscribe((e) => {\r\n                this.hide(e);\r\n            });\r\n        }\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n    }\r\n\r\n    private removePanelElement() {\r\n        document.body.removeChild(this.panelElement);\r\n        this.panelElement = null;\r\n    }\r\n\r\n    private clearSearchValue() {\r\n        this.lookupRef._searchState = { \r\n            field: '*', //\"*\",\r\n            value: ''\r\n        }\r\n    }\r\n\r\n    hide(e?: any, isMoreClick = false) {\r\n        reqAnimFrame(() => {\r\n            if (this.panelElement) {\r\n                if (e && ( e.type === 'mousewheel' || e.type === 'wheel')) {\r\n                    this.removePanelElement();\r\n                } else {\r\n                    this.panelElement.classList.remove('f-area-show');\r\n                    setTimeout(() => {\r\n                        this.removePanelElement();\r\n                    },120);\r\n                }\r\n\r\n                if (!this.lookupRef) {\r\n                    return;\r\n                }\r\n\r\n                \r\n                // tfs 579056\r\n                if (this.lookupRef.overLayService) {\r\n                    this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);\r\n                }\r\n\r\n                if (isMoreClick) {\r\n                    return;       \r\n                }\r\n\r\n                if (this.lookupRef.tagInput) {\r\n                    // this.lookupRef.tagInput.value = '';\r\n                    this.inputRef.value = '';\r\n                    this.clearSearchValue();\r\n                }\r\n\r\n                if (e && (e.key === 'F2' || this.lookupRef.el.nativeElement.contains(e.target))) {\r\n                    if (this.data && this.data.length) {\r\n                        return;\r\n                    } else {\r\n                        this.clearSearchValue();\r\n                    }\r\n                }\r\n\r\n                if (!this.lookupRef.nosearch && this.lookupRef.displayText !== this.lookupRef.originalText) {\r\n                    this.lookupRef.onChanges(this.lookupRef.originalText)\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    private setPanelPosition(updateTopPosition = true) {\r\n        if (this.panelElement) {\r\n            const { width, left, top, height } = this.getPanelSize();\r\n            this.panelElement.style.width = `${width}px`;\r\n            this.panelElement.style.maxHeight = `${height}px`;\r\n            if (updateTopPosition) {\r\n                this.panelElement.style.top = `${top}px`;\r\n            }\r\n            this.panelElement.style.left = `${left}px`;\r\n            this.panelElement.style.zIndex = '10001';\r\n        }\r\n    }\r\n\r\n    private createDataPanel() {\r\n        \r\n        if (this.lookupRef.changeDetector['destroyed']) {\r\n            this.panelElement && this.removePanelElement();\r\n            return;\r\n        }\r\n\r\n        this.panelElement = document.createElement('div');\r\n        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');\r\n\r\n        document.body.appendChild(this.panelElement);\r\n        this.setPanelPosition();\r\n\r\n        this.panelElement.style.overflow = 'hidden';\r\n        // this.panelElement.style.height = 'auto';\r\n        \r\n        // åå»ºæ°æ®å±ç¤ºç»ä»¶\r\n        const cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);\r\n        this.cmpRef = cmpFact.create(this.injector);\r\n        \r\n        this.cmpRef.instance.showMore = this.options.showMore;\r\n        this.cmpRef.instance.textField = this.lookupRef.textField;\r\n        this.cmpRef.instance.formatter = this.options.formatter;\r\n        this.cmpRef.instance.maxItems = this.options.showItemsCount;\r\n\r\n        // cmpRef.location.nativeElement.classList.add('farris-main-area');\r\n        this.panelElement.appendChild(this.cmpRef.location.nativeElement);\r\n\r\n        this.lookupRef.selectionMgr.initDisplayValue();\r\n        \r\n        this.cmpRef.changeDetectorRef.detectChanges();\r\n\r\n        // more clicked æå¼å¸®å©çªå£\r\n        this.cmpRef.instance.moreClcik.subscribe((e) => {\r\n            this.hide(e, true);\r\n            this.lookupRef.showDialog();\r\n        });\r\n\r\n        this.cmpRef.instance.itemClick.subscribe((e: any) => {\r\n            const { data } = e;\r\n            this.selectItem(data);\r\n        });\r\n\r\n\r\n        // æ³¨åé¼ æ æ»è½®ï¼ç¹å»äºä»¶ï¼ç¨äºéèPanel\r\n        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (e: MouseEvent) => {\r\n            if (!this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {\r\n                return;\r\n            }\r\n            \r\n            if(this.lookupRef.inputGroup && this.lookupRef.inputGroup.textbox.nativeElement === e.target) {\r\n                return false;\r\n            }\r\n\r\n            if(this.lookupRef.tagInput && this.lookupRef.tagInput.textbox.nativeElement === e.target) {\r\n                return false;\r\n            }\r\n\r\n            if (this.cmpRef) {\r\n                this.cmpRef.destroy();\r\n                this.cmpRef = null;\r\n            }\r\n\r\n            this.clearSearchValue();\r\n\r\n            this.hide(e);\r\n        });\r\n\r\n        this.panelElement.classList.add('f-area-show');\r\n\r\n        this.loadData();\r\n    }\r\n\r\n    private selectItem(data: any) {\r\n        if (!data) {\r\n            return;\r\n        }\r\n\r\n        if (this.lookupRef.viewType === 'tag') {\r\n            const isSelect = this.lookupRef.selections.find(n => n[this.lookupRef.idField] === data[this.lookupRef.idField]);\r\n            if (!isSelect) {\r\n                const selectItems: any = [...this.lookupRef.selections, data];\r\n                this.lookupRef.selectItem(selectItems);\r\n                this.lookupRef.lookupSelectionSer.loadSelections(selectItems);\r\n            }\r\n        } else {\r\n            this.lookupRef.selectItem(data);\r\n        }\r\n        this.hide();\r\n    }\r\n\r\n\r\n    private calculationPanelHeight() {\r\n        return this.options.showItemsCount * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;\r\n    }\r\n\r\n    private getInputSizeInfo() {\r\n        const el: any = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;\r\n        return el.nativeElement.getBoundingClientRect();\r\n    }\r\n\r\n    private getPanelSize() {\r\n        let { width, height, top, left } = this.getInputSizeInfo();\r\n        const bottom = window.innerHeight - height - top;\r\n        let panelHeight = this.calculationPanelHeight();\r\n\r\n        const h = top > bottom ? top : bottom;\r\n        if (bottom > panelHeight) {\r\n            top = top + height;\r\n            // é¢æ¿ç±ä¸åä¸å±å¼\r\n            this.panelElement.style.transformOrigin = '100% top';\r\n        } else {\r\n            if (top > bottom) {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                    top = 10;\r\n                } else {\r\n                    top = top - parseInt('' + panelHeight, 10) - 5;\r\n                }\r\n\r\n                // é¢æ¿ç±ä¸åä¸å±å¼\r\n                this.panelElement.style.transformOrigin = '100% bottom';\r\n\r\n            } else {\r\n                if (h < panelHeight) {\r\n                    panelHeight = h - 10;\r\n                }\r\n                top = top + height;\r\n            }\r\n        }\r\n\r\n        const minWidth = this.options.minWidth || 200;\r\n        let _width =  width < minWidth? minWidth: width;\r\n        if (window.innerWidth - left < _width) {\r\n            left = left + width - _width;\r\n        }\r\n\r\n        return { width: _width, top, height: panelHeight, left };\r\n    }\r\n\r\n    private getData(): Observable<Array<any>> {\r\n        let p: any = {\r\n            pageInfo: {\r\n                pageSize: this.options.showItemsCount,\r\n                pageIndex: 1,\r\n            },\r\n        };\r\n        let t: LOAD_DATA_TYPE = \"all\";\r\n        if (this.lookupRef.isTextChange) {\r\n            this.lookupRef._searchState = { \r\n                field: this.lookupRef.textField, //\"*\",\r\n                value: this.lookupRef.displayText\r\n            }\r\n            p['search'] = this.lookupRef._searchState;\r\n            t = 'search';\r\n        } else {\r\n            this.lookupRef._searchState = null;\r\n        }\r\n\r\n        if (this.lookupRef.viewType === 'tag') {\r\n            if (this.lookupRef.tagInput.value !== '') {\r\n                this.lookupRef._searchState = { \r\n                    field: this.lookupRef.textField, //\"*\",\r\n                    value: this.lookupRef.tagInput.value\r\n                }\r\n                p['search'] = this.lookupRef._searchState;\r\n                t = 'search';\r\n            } else {\r\n                this.lookupRef._searchState = null;\r\n            }\r\n\r\n            const vals = this.lookupRef.selectionMgr.getSelectedIds();\r\n            if (vals && vals.length) {\r\n                p[\"selectedInfo\"] = {\r\n                    selected: true,\r\n                    selectedIds: vals,\r\n                };\r\n            }\r\n        }\r\n\r\n\r\n        return this.lookupRef.httpMgr.lookupRequest(p, t, true).pipe(\r\n            map((restData: LookupGridResult) => {\r\n                let _items = this.lookupRef.items || [];\r\n                if (restData) {\r\n                    if (this.lookupRef.viewType === 'tag') {\r\n                        this.lookupRef.lookupSelectionSer.loadSelections(\r\n                            restData[\"selectedData\"] || []\r\n                        );\r\n                    }\r\n                    _items = restData.items || [];\r\n\r\n                    if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {\r\n                        _items = _items.map(n => n.data);\r\n                    }\r\n    \r\n                    // return _items.slice(0, this.options.showItemsCount);\r\n\r\n                } else {\r\n                    if (this.lookupRef.displayText && this.lookupRef.isTextChange) {\r\n                        if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {\r\n                            _items = _items.map(n => n.data);\r\n                        }\r\n\r\n                        const items = _items.filter(n => {\r\n                            return n[this.lookupRef.textField].indexOf(this.lookupRef.displayText) > -1;\r\n                        }).slice(0, this.options.showItemsCount);\r\n                        _items = items;\r\n\r\n                        // return _items.slice(0, this.options.showItemsCount);\r\n                    }\r\n                }\r\n\r\n                return _items.slice(0, this.options.showItemsCount);\r\n            })\r\n        );\r\n    }\r\n\r\n    private loadData() {\r\n        const loadingRef = this.lookupRef.loadingService.show({container: this.panelElement});\r\n        this.getData().subscribe((data: any) => {\r\n            loadingRef.close();\r\n            if (this.cmpRef && this.cmpRef.instance) {\r\n                this.cmpRef.instance.loadData(data);\r\n                if (data.length < this.options.showItemsCount) {\r\n                    // let newHeight = data.length * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;\r\n                    this.data = data;\r\n\r\n                    let newHeight = this.cmpRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 10;\r\n\r\n                    if (!data || !data.length) {\r\n                        newHeight = 55;\r\n                    }\r\n\r\n                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = `${newHeight}px`;\r\n                    if (this.panelElement) {\r\n                        if (this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {\r\n                            this.panelElement.style.top = `${this.getInputSizeInfo().top - newHeight - 5}px` ;\r\n                        }\r\n                        this.panelElement.style.height = 'auto';\r\n                    }\r\n                } else {\r\n                    this.setPanelPosition();\r\n                    this.cmpRef.instance.itemsContainer.nativeElement.style.height = '100%';\r\n                    if (this.panelElement) {\r\n                        this.render.removeStyle(this.panelElement, 'height');\r\n                    }\r\n                }\r\n\r\n                if ((this.lookupRef.isTextChange || (this.lookupRef.tagInput && this.lookupRef.tagInput.value !== '') ||  \r\n                    (this.lookupRef.inputGroup && this.lookupRef.inputGroup.value !== '' && this.lookupRef.isTextChange)) && data && data.length) {\r\n                    this.cmpRef.instance.setActiveItem(0);\r\n                }\r\n\r\n                this.panelElement.style.overflow = 'auto';\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @HostListener('keydown', ['$event'])\r\n    registerKeyboardEvent($event: KeyboardEvent) {\r\n\r\n        if (!this.lookupRef.singleSelect && this.lookupRef.viewType !== 'tag')  {\r\n            return;\r\n        }\r\n\r\n        let rows= [];\r\n        if (this.cmpRef) {\r\n            rows = this.cmpRef.instance.data;\r\n        }\r\n\r\n        if (!rows || !rows.length) {\r\n            return;\r\n        }\r\n\r\n        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n        }\r\n\r\n\r\n        if ($event.code === 'Backspace' && this.lookupRef.viewType === 'tag' &&\r\n            this.lookupRef.selections && this.lookupRef.selections.length &&\r\n            this.lookupRef.tagInput && !this.lookupRef.tagInput.value && this.lookupRef.quickSelect.enableBackspace) {\r\n            $event.preventDefault();\r\n            $event.stopPropagation();\r\n            const newdata = this.lookupRef.selections.slice(0, this.lookupRef.selections.length - 1);\r\n            if (!newdata || !newdata.length) {\r\n                this.lookupRef.clearValue(true);\r\n            } else {\r\n                this.lookupRef.selectItem(newdata);\r\n            }\r\n            this.lookupRef.lookupSelectionSer.loadSelections(newdata);\r\n            this.setPanelPosition();\r\n            return;\r\n        }\r\n\r\n\r\n        const idx = this.cmpRef.instance.activeIndex;\r\n        let activeIndex = idx;\r\n\r\n        const setActiveItem = (index) => {\r\n            activeIndex = index;\r\n            this.cmpRef.instance.setActiveItem(index);\r\n        };\r\n\r\n        if ($event.code === 'ArrowUp') {  // up\r\n            if (idx > -1) {\r\n                let prevIdx = idx - 1;\r\n                if (prevIdx < 0) {\r\n                    prevIdx = rows.length - 1;\r\n                }\r\n                setActiveItem(prevIdx);\r\n            } else {\r\n                setActiveItem(rows.length - 1);\r\n            }\r\n        }\r\n        if ($event.code === 'ArrowDown') { // down\r\n            let nextIdx = idx + 1;\r\n            if (nextIdx >= rows.length) {\r\n                nextIdx = 0;\r\n            }\r\n\r\n            setActiveItem(nextIdx);\r\n        }\r\n\r\n        if($event.key === 'Enter') {\r\n            if (rows && rows.length && this.panelElement) {\r\n                const data = rows[idx];\r\n                this.selectItem(data);\r\n            } else {\r\n                this.inputRef.inputClick.emit($event);\r\n            }\r\n        }\r\n    }\r\n}","import { EventEmitter, AfterViewInit, Component, ElementRef, Injector, Input, NgZone, OnChanges, OnDestroy, OnInit, Output, Renderer2, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\n\r\n@Component({\r\n    selector: 'lookup-advanced-layout',\r\n    templateUrl: 'lookup-advanced-layout.component.html',\r\n    // styleUrls: ['./advanced-layout.scss'],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\n\r\nexport class LookupAdvancedLayoutComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit {\r\n\r\n    @Input() title = 'å¸®å©éæ©å¨'\r\n    @Input() activeTab = 'datalist';\r\n    @Input() enableFav: boolean;\r\n\r\n    @Input() dataTab = 'æ°æ®åè¡¨';\r\n    @Input() favTab = 'æ¶èå¤¹'\r\n\r\n    @Output() tabChanged = new EventEmitter();\r\n    @Output() close = new EventEmitter();\r\n\r\n    @ViewChild('header') headerRel: ElementRef;\r\n    @ViewChild('activetab') activetabRef:ElementRef;\r\n\r\n    dialogRef: DialogComponent;\r\n    constructor(public elRef: ElementRef, private injector: Injector, private zone: NgZone, private render2: Renderer2) {\r\n        this.dialogRef = this.injector.get(DialogComponent, null);\r\n    }\r\n\r\n    ngOnInit() {\r\n        \r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        \r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.activeTab && !changes.activeTab.isFirstChange()) {\r\n            this.setCurrentTab();\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        if (this.dialogRef) {\r\n            this.dialogRef.dragHandle = this.headerRel.nativeElement;\r\n        }\r\n\r\n        this.setCurrentTab();\r\n    }\r\n\r\n    private setCurrentTab() {\r\n        if (this.activetabRef) {\r\n            this.render2.setStyle(this.activetabRef.nativeElement, 'transform', `translate3d(${this.activeTab == 'datalist' ? 0: 84}px, 0px, 0px)`);\r\n        }\r\n    }\r\n\r\n    changeTabs($event, tabstr) {\r\n        this.activeTab = tabstr;\r\n        this.setCurrentTab();\r\n        this.tabChanged.emit({ tab: tabstr, $event });\r\n    }\r\n\r\n    closeDialog($event) {\r\n        if (this.dialogRef) {\r\n            $event.stopPropagation();\r\n            this.dialogRef.close();\r\n        }\r\n    }\r\n\r\n    changeDialogSize($event: MouseEvent) {\r\n        if (this.dialogRef) {\r\n            $event.stopPropagation();\r\n            this.dialogRef.changeDialogSize();\r\n        }\r\n    }\r\n}","import { AfterViewInit, ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, OnChanges, OnInit, Output, SimpleChanges, ViewChild } from '@angular/core';\r\nimport { DialogComponent } from '@farris/ui-dialog';\r\nimport { SearchBoxComponent, SearchFieldsComponent } from '@farris/ui-search-box';\r\nimport { LookupGridComponent } from '../lookup-grid.component';\r\nimport { SearchBarMode } from '../lookup-displaytype';\r\n\r\n@Component({\r\n    selector: '[lookup-filter-bar]',\r\n    template: `\r\n    <div class=\"d-flex flex-row\">\r\n        <farris-search-fields #searchfields [fields]=\"filterFields\" class=\"mr-2 f-utils-fill\"  \r\n        *ngIf=\"filterFields && filterFields.length && (viewType == 'both' || viewType=== 'onlyfield')\" \r\n        (conditionChange)=\"onConditionChange($event, false)\"></farris-search-fields>\r\n\r\n        <div style=\"min-width:40%;\" class=\"d-flex flex-row\" [class.w-100]=\"!filterFields || !filterFields.length\" [style.maxWidth]=\"filterFields && filterFields.length?'70%': '100%'\">\r\n            <farris-search-box #searchbox [fields]=\"fields\" [useAnyField]=\"searchAnyField\"\r\n            (conditionChange)=\"onConditionChange($event, true)\" class=\"f-cmp-inputgroup f-utils-fill\" \r\n            *ngIf=\"(viewType == 'both' || viewType=== 'onlyinput')\" (escHandler)=\"onEsc($event)\"></farris-search-box>\r\n            <span class=\"f-icon f-icon-remove clear-search-fields\" \r\n                [ngStyle]=\"((textConditions && textConditions.length) || (fieldConditons && fieldConditons.length)) ? { }: {opacity: '0.3',pointerEvents: 'none'}\"\r\n                (click)=\"onClearConditions($event)\" title=\"{{ 'lookup.clearAllConditions' | locale }}\" style=\"min-width:28px;border: 0;\"></span>\r\n        </div>\r\n    </div>\r\n    `\r\n})\r\n\r\nexport class LookupFilterBarComponent implements OnInit, OnChanges, AfterViewInit {\r\n\r\n    fields = [];\r\n    filterFields = [];\r\n    @Input() searchAnyField = true;\r\n    @Input() columns = [];\r\n    @Input() viewType: SearchBarMode = SearchBarMode.both;\r\n    @Input() isNav = false;\r\n\r\n    @Input() searchFields = [];\r\n\r\n    @Output() conditionsChange = new EventEmitter();\r\n\r\n    @ViewChild('searchbox') searchboxRef: SearchBoxComponent;\r\n    @ViewChild('searchfields') searchfieldsRef: SearchFieldsComponent;\r\n\r\n    textConditions = [];\r\n    fieldConditons = [];\r\n    \r\n\r\n    dialogRef: DialogComponent;\r\n    private el: ElementRef;\r\n    constructor(private injector: Injector, private cd: ChangeDetectorRef, private lookIns: LookupGridComponent) {\r\n        this.dialogRef = this.injector.get(DialogComponent, null);\r\n        this.el = this.injector.get(ElementRef);\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.searchFields = this.searchFields || [];\r\n        this.convertColumnsToSearchFields();\r\n\r\n        if(this.dialogRef && this.searchboxRef) {\r\n            this.dialogRef.moving.subscribe(() => {\r\n                this.searchboxRef.updateShadowBoxPosition();\r\n            })\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        if (changes.columns && !changes.columns.isFirstChange()) {\r\n            this.convertColumnsToSearchFields();\r\n            setTimeout(() => {\r\n                this.initSearchValue();\r\n            }, 100)\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n    }\r\n\r\n    private initSearchValue() {\r\n        if (this.lookIns._searchState && !this.isNav && this.searchboxRef) {\r\n            const { field, value} = this.lookIns._searchState;\r\n            if (field === '*' && value != '' && value !== null && value!== undefined) {\r\n                const alltitle = this.lookIns.localService.getValue('lookup.anyFields')\r\n                const _conditions = [{ code: '*', name: alltitle, value }];\r\n                this.searchboxRef.setValue(_conditions, false);\r\n                this.textConditions = this.searchboxRef.expandStarFieldToAllFields();\r\n            }\r\n        }\r\n    }\r\n\r\n    private converColumnToFilterField(n: any) {\r\n        const t: any = {};\r\n        t.id = n.field;\r\n        t.labelCode = n.field;\r\n        t.code = n.fieldPath;\r\n        t.name = n.title;\r\n        const options = n.formatter ? n.formatter.options : null;\r\n        // æ°å­\r\n        if (n.fieldType === 'NumericType') {\r\n            const _options = {...(options || {})};\r\n            n.precision = n.precision || 0;\r\n            _options.precision = _options.precision || 0;\r\n            if (n.precision != _options.precision) {\r\n                _options.precision = n.precision;\r\n            }\r\n\r\n            t.control = Object.assign({ \r\n                \"controltype\": \"number\", \r\n                \"bigNumber\": false, \r\n                \"placeHolder\": 'è¯·è¾å¥æ°å­', \r\n                single: true \r\n            }, _options);\r\n            t.beginPlaceHolder = \"å¼å§æ°å¼\";\r\n            t.endPlaceHolder = \"ç»ææ°å¼\";\r\n        }\r\n        // æä¸¾\r\n        if (n.fieldType === 'EnumType') {\r\n            t.control = {\r\n                \"controltype\": \"enum\",\r\n                \"enumValues\": n.formatter.options.data,\r\n                single: true\r\n            };\r\n        }\r\n\r\n        // å¸å°\r\n        if (n.fieldType === 'BooleanType') {\r\n            let trueText = options ? options.trueText || 'True' : 'True';\r\n\r\n            let falseText = options ? options.falseText || 'False' : 'False';\r\n            t.control = {\r\n                controltype: 'dropdown',\r\n                enumValues: [\r\n                    { value: 1, name: trueText },\r\n                    { value: 0, name: falseText },\r\n                ],\r\n                single: true\r\n            };\r\n        }\r\n\r\n        // æ¥æ\r\n        if (n.fieldType === \"DateType\" || n.fieldType === 'DateTimeType') {\r\n\r\n            let dateFormat = 'yyyy-MM-dd';\r\n            let showTime = false;\r\n            let showType = '1';\r\n            if (options) {\r\n                if (options.format) {\r\n                    dateFormat = options.format;\r\n                }\r\n            }\r\n            if (n.fieldType === 'DateTimeType') {\r\n                showTime = true;\r\n            }\r\n            if (dateFormat === 'yyyy') {\r\n                showType = '2';\r\n            }\r\n            if (dateFormat === 'yyyy-MM') {\r\n                showType = '3';\r\n            }\r\n            t.control = {\r\n                \"controltype\": \"datetime\",\r\n                \"placeholder\": \"è¯·éæ©æ¥æ\",\r\n                single: true,\r\n                dateFormat,\r\n                showTime,\r\n                showType\r\n            };\r\n        }\r\n        return t;\r\n    }\r\n\r\n    private convertColumnsToSearchFields() {\r\n        if (this.columns && this.columns.length) {\r\n            this.fields = this.columns.filter(n => n.fieldType && (n.fieldType === 'StringType' || n.fieldType === 'TextType')).map(n => {\r\n                return {\r\n                    code: n.fieldPath,\r\n                    name: n.title\r\n                };\r\n            });\r\n\r\n            if (!this.fields.length && this.searchFields.length) {\r\n                this.fields = this.searchFields.map(n => {\r\n                    return {\r\n                        code: n.value,\r\n                        name: n.label\r\n                    }\r\n                });\r\n            }\r\n\r\n            if (this.viewType === 'both' || this.viewType === 'onlyfield') {\r\n                this.filterFields = this.columns.filter(n => n.fieldType && n.fieldType !== 'StringType' && n.fieldType !== 'TextType' && n.field).map(n => {\r\n                    return this.converColumnToFilterField(n);\r\n                });\r\n            }\r\n\r\n            if (this.lookIns && this.lookIns.allowQueryFields) {\r\n                const { nav, main } = this.lookIns.allowQueryFields;\r\n                let queryFields = main;\r\n                if (this.isNav) {\r\n                    queryFields = nav;\r\n                }\r\n\r\n                if (queryFields) {\r\n                    const _queryFields = queryFields.split(',');\r\n                    this.fields = this.fields.filter(n => _queryFields.findIndex(f => f === n.code) > -1);\r\n                    this.filterFields = this.filterFields.filter(n => _queryFields.findIndex((f: any) => f === n.code) > -1);\r\n                }\r\n            }\r\n\r\n            this.cd.markForCheck();\r\n        }\r\n    }\r\n\r\n    onConditionChange($event, isString = true) {\r\n        if (isString) {\r\n            this.textConditions = $event;\r\n        } else {\r\n            this.fieldConditons = $event;\r\n        }\r\n\r\n        this.textConditions = this.textConditions || [];\r\n        const _conditions$ =  this.fieldConditons.concat([]);\r\n        if (this.fieldConditons && this.fieldConditons.length && this.textConditions.length) {\r\n            _conditions$[0].lbracket =  this.fieldConditons[0].lbracket + '(';\r\n            _conditions$[_conditions$.length - 1].relation = 1;\r\n            _conditions$[_conditions$.length - 1].rbracket =  _conditions$[_conditions$.length - 1].rbracket + ')';\r\n        }\r\n        \r\n        const _conditions = _conditions$.concat(this.textConditions);\r\n        this.conditionsChange.emit(_conditions);\r\n    }\r\n\r\n    onClearConditions($event: MouseEvent) {\r\n        $event.stopPropagation();\r\n        this.textConditions = [];\r\n        this.fieldConditons = [];\r\n\r\n\r\n        if (this.searchboxRef) {\r\n            this.searchboxRef.clearConditions(false);\r\n        }\r\n\r\n        if (this.searchfieldsRef) {\r\n            this.filterFields.forEach(n => {\r\n                n.value = null;\r\n            });\r\n            this.searchfieldsRef.clearConditions(false);\r\n        }\r\n\r\n        this.cd.detectChanges();\r\n        this.conditionsChange.emit([]);\r\n    }\r\n\r\n    onEsc($event) {\r\n        this.lookIns.closeLoading();\r\n        this.lookIns.closeDialog();\r\n    }\r\n}","import { AfterViewInit, Directive, ElementRef, Injector, Input, NgZone, OnDestroy, OnInit, Renderer2 } from '@angular/core';\r\nimport { CommonUtils, OverLayHiddenService } from '@farris/ui-common';\r\nimport { DataTableComponent } from '@farris/ui-datatable';\r\nimport { NotifyService } from '@farris/ui-notify';\r\n\r\n@Directive({ selector: '[lookup-selected]' })\r\nexport class LookupSelectedDirective implements OnInit, AfterViewInit, OnDestroy{\r\n\r\n    @Input() selectedPanel: ElementRef;\r\n    @Input() dataTableRef: DataTableComponent;\r\n    @Input() count = 0;\r\n\r\n    private overlaySer: OverLayHiddenService;\r\n    private panelMouseEvent = null;\r\n    private notifySer: NotifyService = null;\r\n    private commonUtils = null;\r\n    private panelEscHandler = null;\r\n\r\n    constructor(private injector: Injector, private elRef: ElementRef, private render: Renderer2, private ngZone: NgZone) {\r\n        this.overlaySer = new OverLayHiddenService();\r\n        this.notifySer = this.injector.get(NotifyService, null);\r\n        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils())\r\n    }\r\n\r\n    ngOnInit(): void {\r\n        \r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        setTimeout(() => {\r\n            this.bindingEvents();\r\n        });\r\n\r\n        this.panelMouseEvent =  this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (e: any) => {\r\n            if (this.selectedPanel.nativeElement.contains(e.target)  || this.elRef.nativeElement.contains(e.target) || \r\n            e.target.classList.contains('lookup-clear-selected-items') || e.target.closest('.farris-messager')) {\r\n                return;\r\n            }\r\n\r\n            this.showPanel(false);\r\n        });\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        if (this.panelMouseEvent) {\r\n            this.panelMouseEvent();\r\n            this.panelMouseEvent = null;\r\n        }\r\n    }\r\n\r\n    private showPanel(show = true) {\r\n        const panel = this.selectedPanel.nativeElement;\r\n        if (!show) {\r\n            this.render.removeClass(panel, 'show');\r\n            this.render.addClass(panel, 'd-none');\r\n            if (this.panelEscHandler) {\r\n                this.panelEscHandler();\r\n                this.panelEscHandler = null;\r\n            }\r\n\r\n        } else {\r\n            this.render.addClass(panel, 'show');\r\n            this.render.removeClass(panel, 'd-none');\r\n            // æ³¨åESC\r\n            if (this.commonUtils) {\r\n                this.panelEscHandler = this.commonUtils.regBodyKeydownEvent(null, () => this.showPanel(false));\r\n            }\r\n        }\r\n    }\r\n\r\n    private bindingEvents() {\r\n        if (!this.selectedPanel) {\r\n            return;\r\n        }\r\n        this.ngZone.runOutsideAngular(() => {\r\n            const panel = this.selectedPanel.nativeElement;\r\n            \r\n            this.render.listen(this.elRef.nativeElement, 'click', () => {\r\n                if (this.selectedPanel && this.count) {\r\n                    if (panel.classList.contains('show')) {\r\n                        this.showPanel(false);\r\n                    } else {\r\n                        this.showPanel();\r\n                        const selectedTableContainer = panel.querySelector('.farris-datatable-container');\r\n                        const selectedTableBody = panel.querySelector('.farris-table-scorllable-body');\r\n                        this.render.removeStyle(selectedTableContainer, 'height');\r\n                        this.render.removeStyle(selectedTableBody, 'height');\r\n                      \r\n                        this.dataTableRef.resize({height: panel.offsetHeight - 28, width: panel.offsetWidth - 28});\r\n\r\n                        this.render.setStyle(selectedTableBody, 'height', this.dataTableRef.tableHeight + 'px');\r\n                        this.render.setStyle(selectedTableBody, 'height', this.dataTableRef.scorllableBodyHeight + 'px');\r\n                        \r\n                        this.dataTableRef.dtBody.checkBodyHeightWhenEmptyData();\r\n                    }\r\n                } else {\r\n                    if (this.notifySer) {\r\n                        this.notifySer.warning('å½åè¿æ²¡æéæ©æ°æ®ã');\r\n                    }\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n}","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2018-12-04 10:43:42\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-09-26 13:33:30\r\n * @Company: Inspur\r\n * @Version: v0.0.1\r\n */\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { InputGroupModule } from '@farris/ui-input-group';\r\nimport { LayoutModule } from '@farris/ui-layout';\r\nimport { LocaleModule} from '@farris/ui-locale';\r\nimport { FarrisDialogModule } from '@farris/ui-dialog';\r\nimport { MessagerModule } from '@farris/ui-messager';\r\nimport { DataTableModule, DataTableComponent } from '@farris/ui-datatable';\r\nimport { TreeTableModule, TreeTableComponent } from '@farris/ui-treetable';\r\nimport { LoadingModule } from '@farris/ui-loading';\r\nimport { NotifyModule } from '@farris/ui-notify';\r\nimport { FarrisContextMenuModule } from '@farris/ui-context-menu';\r\nimport { FarrisFormsModule } from '@farris/ui-forms';\r\n\r\nimport { LookupGridComponent } from './lookup-grid.component';\r\nimport { LookupComponent } from './lookup.component';\r\nimport { LookupLeftComponent } from './lookup-left.component';\r\nimport { LookupTabsComponent } from './lookup-tabs.component';\r\nimport { LookupTipDirective } from './lookup-tip.directive';\r\n\r\nimport { LookupQuickSelectPanelComponent } from './quick-select/quick-select-panel.component';\r\nimport { LookupQuickSelectDirective } from './quick-select/lookup-quick-select.directive';\r\nimport { LookupAdvancedLayoutComponent } from './advanced-layout/lookup-advanced-layout.component';\r\nimport { SearchBoxModule } from '@farris/ui-search-box';\r\nimport { LookupFilterBarComponent } from './advanced-layout/lookup-filter-bar.component';\r\nimport { LookupSelectedDirective } from './selected-list/lookup-selected.directive';\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        FarrisCommonModule.forRoot(),\r\n        FarrisDialogModule.forRoot(),\r\n        MessagerModule.forRoot(),\r\n        NotifyModule.forRoot(),\r\n        LoadingModule.forRoot({delay: 1000}),\r\n        InputGroupModule,\r\n        LayoutModule,\r\n        DataTableModule,\r\n        TreeTableModule,\r\n        FarrisContextMenuModule,\r\n        LocaleModule.forRoot(),\r\n        SearchBoxModule,\r\n        FarrisFormsModule\r\n    ],\r\n    exports: [\r\n        LookupGridComponent, \r\n        LookupComponent,\r\n        LookupAdvancedLayoutComponent\r\n    ],\r\n    declarations: [\r\n        LookupGridComponent,\r\n        LookupComponent,\r\n        LookupLeftComponent,\r\n        LookupTabsComponent,\r\n        LookupTipDirective,\r\n        LookupQuickSelectPanelComponent,\r\n        LookupQuickSelectDirective,\r\n        LookupAdvancedLayoutComponent,\r\n        LookupFilterBarComponent,\r\n        LookupSelectedDirective\r\n    ],\r\n    providers: [],\r\n    entryComponents: [\r\n        DataTableComponent, \r\n        TreeTableComponent, \r\n        LookupLeftComponent,\r\n        LookupTabsComponent,\r\n        LookupQuickSelectPanelComponent,\r\n        LookupAdvancedLayoutComponent,\r\n        LookupFilterBarComponent\r\n    ]\r\n})\r\nexport class LookupModule {}\r\n"]}