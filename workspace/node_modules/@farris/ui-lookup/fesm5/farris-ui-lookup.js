import { ShortcutsService } from '@farris/ui-shortcuts';
import { FilterRelation, Compare } from '@farris/ui-common/types';
import { of, Subject, fromEvent, race, BehaviorSubject } from 'rxjs';
import { EventManager } from '@angular/platform-browser';
import { trim, cloneDeep } from 'lodash-es';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, NgControl, FormsModule } from '@angular/forms';
import { LayoutModule } from '@farris/ui-layout';
import { MessagerService, MessagerModule } from '@farris/ui-messager';
import { TreeTableComponent, TreeTableModule } from '@farris/ui-treetable';
import { LoadingService, LoadingModule } from '@farris/ui-loading';
import { FarrisContextMenuModule } from '@farris/ui-context-menu';
import { FarrisFormsModule } from '@farris/ui-forms';
import { trigger, style, transition, animate } from '@angular/animations';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { InputGroupComponent, InputGroupModule } from '@farris/ui-input-group';
import { catchError, tap, switchMap, map, filter, debounceTime, buffer, bufferCount, first, repeat, delay } from 'rxjs/operators';
import { __assign, __spread, __extends } from 'tslib';
import { DialogComponent, FarrisDialogModule } from '@farris/ui-dialog';
import { SearchBoxModule } from '@farris/ui-search-box';
import { Component, Input, Output, EventEmitter, ViewChild, Injector, forwardRef, ElementRef, ChangeDetectorRef, HostBinding, NgZone, InjectionToken, Injectable, ViewContainerRef, ComponentFactoryResolver, ViewEncapsulation, Renderer2, Directive, HostListener, NgModule } from '@angular/core';
import { CommonUtils, RuntimeStateService, IdService, DebugService, FarrisComponentInstanceService, OverLayHiddenService, reqAnimFrame, FarrisCommonModule } from '@farris/ui-common';
import { DataTableComponent, DataTableModule } from '@farris/ui-datatable';
import { NotifyService, NotifyModule } from '@farris/ui-notify';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 收藏列字段名称
 * @type {?}
 */
var FAVORITE_FIELD_NAME = '__favorite__';
/** @type {?} */
var INPUT_GROUP_ICON = '<i class="f-icon f-icon-lookup"></i>';
/** @enum {string} */
var LookupGridDisplayType = {
    List: 'LIST',
    TreeList: 'TREELIST',
    NavList: 'NAVLIST',
    NavTreeList: 'NAVTREELIST',
    NavListTree: 'NAVLISTTREE',
};
/** @enum {string} */
var FavoriteIcon = {
    /** 已收藏 */
    yes: '<span class="f-icon f-icon-star f-lookup-favorite" style="font-size:12px" ></span>',
    /** 未收藏 */
    no: '<span class="f-icon f-icon-star-outline f-lookup-favorite" style="font-size:12px"></span>',
    /** 移除收藏 */
    delete: '<span class="f-icon f-icon-star f-lookup-unfavorite" style="font-size:12px"></span>',
    /** 移除已选记录 */
    remove: '<span class="f-icon f-icon-minus-circle" style="font-size:12px; color: #dd2438;cursor: pointer"></span>',
};
/** @enum {string} */
var FavoriteAction = {
    /** 添加收藏 */
    add: 'append item to favorite.',
    /** 移除收藏 */
    delete: 'remove favorite.',
};
/** @type {?} */
var QuickSelectDefaultOptions = {
    enable: false,
    showMore: true,
    showItemsCount: 10,
    footerHeight: 0,
    minWidth: 200,
    enableBackspace: false
}
/**
 * - both: 全部显示
 * - onlyfield: 仅显示字段
 * - onlyinput: 仅显示搜索输入框 */
;
/** @enum {string} */
var SearchBarMode = {
    /** 显示字段查询与搜索输入框 */
    both: 'both',
    /** 仅显示字段 */
    onlyinput: 'onlyinput',
    /** 仅显示搜索输入框 */
    onlyfield: 'onlyfield',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOOKUPINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LookupComponent; })),
    multi: true
};
var LookupComponent = /** @class */ (function () {
    function LookupComponent(injector, el, changeDetector) {
        this.injector = injector;
        this.el = el;
        this.changeDetector = changeDetector;
        this.hostCls = 'f-cmp-inputgroup';
        /**
         * 窗口标题。默认值：此处显示帮助标题
         */
        this.title = '';
        /**
         * 按钮对齐方式
         */
        this.buttonAlign = 'right';
        /**
         * 是否显示按钮
         */
        this.showButtons = true;
        /**
         * 显示关闭按钮
         */
        this.showCloseButton = true;
        /**
         * 显示最大化按钮
         */
        this.showMaxButton = true;
        /**
         * 允许拖拽尺寸
         */
        this.resizable = true;
        /**
         * 允许拖动窗口
         */
        this.draggable = true;
        /**
         * 禁用
         */
        this.disabled = false;
        /**
         * 允许编辑文本框
         */
        this.editable = true;
        /**
         * 只读
         */
        this.readonly = false;
        this.displayText = '';
        /**
         * 窗口打开后
         */
        this.dialogOpened = new EventEmitter();
        /**
         * 窗口关闭后
         */
        this.dialogClosed = new EventEmitter();
        /**
         * 窗口最大化
         */
        this.dialogMaxed = new EventEmitter();
        /**
         * 拖拽改变窗口尺寸进行时
         */
        this.resizing = new EventEmitter();
        /**
         * 拖拽改变窗口尺寸结束
         */
        this.resized = new EventEmitter();
        /**
         * 帮助窗口默认尺寸
         */
        this.defaultDialogSize = { width: 550, height: 570 };
        this.dialogCreated = new Subject();
        this._isShow = false;
        this.displayValue = '';
        this.originalText = '';
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) { });
        this.onModelTouched = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { });
        this.ngZone = this.injector.get(NgZone);
        // if (!this.personalConfigService) {
        //     const idServ = this.injector.get(IdService);
        //     this.personalConfigService = new PersonalConfigService(idServ);
        // }
    }
    Object.defineProperty(LookupComponent.prototype, "content", {
        set: /**
         * @param {?} content
         * @return {?}
         */
        function (content) {
            if (this.dialog !== content) {
                this.dialog = content;
                if (content) {
                    this.dialogCreated.next(this.dialog);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupComponent.prototype, "isShow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isShow;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._isShow = val;
            if (!this.changeDetector['destroyed']) {
                this.changeDetector.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupComponent.prototype, "invalid", {
        get: /**
         * @return {?}
         */
        function () {
            return this.ngControl.valid;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initEvents();
        this.ngControl = this.injector.get(NgControl, null);
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lookupUnsubscribe();
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dialog) {
            this.dialog.closed.subscribe((/**
             * @return {?}
             */
            function () {
                _this.isShow = false;
                _this.dialog = null;
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.initEvents = /**
     * @return {?}
     */
    function () {
        if (!this.dictPicking) {
            this.dictPicking = (/**
             * @return {?}
             */
            function () { return of({ showDialog: true }); });
        }
        if (!this.dictPicked) {
            this.dictPicked = (/**
             * @return {?}
             */
            function () { return of({ closeDialog: true }); });
        }
        if (!this.beforeOpen) {
            this.beforeOpen = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.beforeClose) {
            this.beforeClose = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
        if (!this.dialogHeight) {
            this.dialogHeight = this.defaultDialogSize.height;
        }
        if (!this.dialogWidth) {
            this.dialogWidth = this.defaultDialogSize.width;
        }
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled || this.readonly) {
            return false;
        }
        this.dictPicking().subscribe((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val.showDialog === false) {
                return;
            }
            _this.isShow = true;
            // this.changeDetector.detectChanges();
            _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                setTimeout((/**
                 * @return {?}
                 */
                function () { return _this.dialog.show(); }));
            }));
        }));
        return false;
    };
    /**
     * @return {?}
     */
    LookupComponent.prototype.closeDialog = /**
     * @return {?}
     */
    function () {
        this.isShow = false;
        if (this.dialog) {
            this.dialog.close();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupComponent.prototype.lookupUnsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.dictPickedSubscription) {
            this.dictPickedSubscription.unsubscribe();
        }
        if (this.dictPickingSubscription) {
            this.dictPickingSubscription.unsubscribe();
        }
        if (this.dialogCreatedSubscription) {
            this.dialogCreatedSubscription.unsubscribe();
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onResizing = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizing.emit(pos.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onResized = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resized.emit(pos.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupComponent.prototype.onMaxDialog = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.dialogMaxed.emit(pos.size);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    LookupComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (obj) {
            this.displayText = obj;
            this.displayValue = obj;
            this.originalText = this.displayText;
        }
        else {
            this.displayText = '';
            this.displayValue = '';
            this.originalText = '';
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LookupComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    LookupComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onModelTouched = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    LookupComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    LookupComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-lookup',
                    template: "\n        <div\n            class=\"lookupbox input-group\"\n            [ngClass]=\"{\n                'f-state-disabled': disabled,\n                'f-state-readonly': readonly,\n                'f-state-editable': !editable\n            }\"\n        >\n            <input\n                class=\"form-control\"\n                [value]=\"displayText\"\n                [disabled]=\"disabled\"\n                [readonly]=\"!editable || readonly\"\n            />\n            <div class=\"input-group-append\">\n                <span class=\"f-select input-group-text\" (click)=\"showDialog()\">\n                    <i class=\"f-icon f-icon-lookup\"></i>\n                </span>\n            </div>\n        </div>\n        <farris-dialog\n            #dialog\n            *ngIf=\"isShow\"\n            [title]=\"title\"\n            [beforeOpen]=\"beforeOpen\"\n            [beforeClose]=\"beforeClose\"\n            [width]=\"dialogWidth\"\n            [height]=\"dialogHeight\"\n            [showButtons]=\"showButtons\"\n            [showMaxButton]=\"showMaxButton\"\n            [buttons]=\"buttonsRef || defaultButtonRef\"\n            [buttonAlign]=\"buttonAlign\"\n            (maxed)=\"onMaxDialog($event)\"\n            (resized)=\"onResized($event)\"\n            (resizing)=\"onResizing($event)\"\n        >\n            <ng-content></ng-content>\n\n            <ng-template #defaultButtonRef>\n                <div style=\"width: 100%;\">\n                    <button\n                        class=\"btn btn-secondary btn-lg\"\n                        (click)=\"closeDialog()\"\n                    >\n                        Cancel\n                    </button>\n                    <button class=\"btn btn-primary btn-lg\">Ok</button>\n                </div>\n            </ng-template>\n        </farris-dialog>\n    ",
                    providers: [LOOKUPINPUT_VALUE_ACCESSOR],
                    styles: ["\n            .input-group {\n                flex-wrap: nowrap;\n            }\n            :host-context(.ng-invalid) .form-control {\n                border-color: #ff0303;\n            }\n        "]
                }] }
    ];
    /** @nocollapse */
    LookupComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    LookupComponent.propDecorators = {
        hostCls: [{ type: HostBinding, args: ['class',] }],
        dialogWidth: [{ type: Input }],
        dialogHeight: [{ type: Input }],
        title: [{ type: Input }],
        buttonAlign: [{ type: Input }],
        buttonsRef: [{ type: Input }],
        showButtons: [{ type: Input }],
        showCloseButton: [{ type: Input }],
        showMaxButton: [{ type: Input }],
        resizable: [{ type: Input }],
        draggable: [{ type: Input }],
        disabled: [{ type: Input }],
        editable: [{ type: Input }],
        readonly: [{ type: Input }],
        mapFields: [{ type: Input }],
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        displayText: [{ type: Input }],
        context: [{ type: Input }],
        beforeOpen: [{ type: Input }],
        beforeClose: [{ type: Input }],
        dictPicking: [{ type: Input }],
        dictPicked: [{ type: Input }],
        dialogOpened: [{ type: Output }],
        dialogClosed: [{ type: Output }],
        dialogMaxed: [{ type: Output }],
        resizing: [{ type: Output }],
        resized: [{ type: Output }],
        content: [{ type: ViewChild, args: ['dialog',] }]
    };
    return LookupComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DisplayInfo = /** @class */ (function () {
    function DisplayInfo() {
    }
    return DisplayInfo;
}());
/** @type {?} */
var lookupGridDefaults = {
    singleSelect: true,
    showFilterBar: true,
    pagination: true,
    pageIndex: 1,
    pageSize: 10,
    pageList: [10, 20, 30, 50, 100]
};
/** @type {?} */
var displayInfoDefault = {
    title: '此处显示标题',
    favorites: '收藏夹',
    okText: '确定',
    cancelText: '取消',
    allColumns: '所有列'
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ServerSideToken = new InjectionToken('Lookup Grid HTTP service');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupDefaultMapping = /** @class */ (function () {
    function LookupDefaultMapping(utils) {
        var _this = this;
        this.utils = utils;
        this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        function (helpData, mapFields, dataObj) {
            if (mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} h
                             * @return {?}
                             */
                            function (h) {
                                return _this.utils.getValue(f, h);
                            })).join(',');
                        }
                        else {
                            val = _this.utils.getValue(f, helpData);
                        }
                    }
                    mapFields[f].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    function (ff) {
                        /** @type {?} */
                        var field = trim(ff);
                        _this.utils.setValue(dataObj, field, val);
                    }));
                }));
            }
        });
    }
    LookupDefaultMapping.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookupDefaultMapping.ctorParameters = function () { return [
        { type: CommonUtils }
    ]; };
    return LookupDefaultMapping;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupUtils = /** @class */ (function () {
    function LookupUtils(utils, rts, ngZone) {
        this.utils = utils;
        this.rts = rts;
        this.ngZone = ngZone;
    }
    /**
     * @param {?} lookupIns
     * @return {?}
     */
    LookupUtils.prototype.setActiveLookupInstance = /**
     * @param {?} lookupIns
     * @return {?}
     */
    function (lookupIns) {
        if (this.rts) {
            this.rts.setLookupInstance(lookupIns);
        }
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.rts.destroy();
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.pendingStart = /**
     * @return {?}
     */
    function () {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: true
                }
            });
            // 禁用页面的所有鼠标事件
            document.body.style['pointer-events'] = 'none';
        }
    };
    /**
     * @return {?}
     */
    LookupUtils.prototype.pendingEnd = /**
     * @return {?}
     */
    function () {
        if (this.rts) {
            this.rts.updateFormState({
                lookup: {
                    pending: false
                }
            });
            // 激活鼠标事件
            document.body.style['pointer-events'] = '';
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.getPathCode = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        var dataField = treeInfo.dataField, pathField = treeInfo.pathField;
        if (dataField) {
            return data[dataField][pathField];
        }
        else {
            return this.utils.getValue(pathField, data);
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.getLayerData = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        var dataField = treeInfo.dataField, layerField = treeInfo.layerField;
        if (dataField) {
            return data[dataField][layerField];
        }
        else {
            return this.utils.getValue(layerField, data);
        }
    };
    /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    LookupUtils.prototype.createFilterCondition = /**
     * @private
     * @param {?} field
     * @param {?} value
     * @return {?}
     */
    function (field, value) {
        return {
            filterField: field,
            value: value,
            lbracket: '',
            rbracket: '',
            relation: FilterRelation.Or,
            compare: Compare.Like
        };
    };
    /**
     * @param {?} condition
     * @param {?} fields
     * @param {?} searchData
     * @return {?}
     */
    LookupUtils.prototype.mergeCondition = /**
     * @param {?} condition
     * @param {?} fields
     * @param {?} searchData
     * @return {?}
     */
    function (condition, fields, searchData) {
        var _this = this;
        if (!condition) {
            condition = {
                pagination: {
                    pageIndex: 1,
                    pageSize: 20
                },
                filterConditions: [],
                sortConditions: []
            };
        }
        else {
            condition = cloneDeep(condition);
        }
        var _a = __assign({}, searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
        if (value) {
            if (field === '*') {
                if (fields && fields.length) {
                    /** @type {?} */
                    var searchConditions = fields.map((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) {
                        return _this.createFilterCondition(f, value);
                    }));
                    if (searchConditions.length) {
                        searchConditions[0].lbracket = '(';
                        /** @type {?} */
                        var lastSearchConditions = searchConditions[searchConditions.length - 1];
                        lastSearchConditions.rbracket = ')';
                        lastSearchConditions.relation = FilterRelation.Empty;
                    }
                    if (condition.filterConditions && condition.filterConditions.length) {
                        condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                        condition.filterConditions = condition.filterConditions.concat(searchConditions);
                    }
                    else {
                        condition.filterConditions = searchConditions;
                    }
                }
            }
            else {
                /** @type {?} */
                var searchCondition = this.createFilterCondition(field, value);
                searchCondition.relation = FilterRelation.Empty;
                if (condition.filterConditions && condition.filterConditions.length) {
                    condition.filterConditions[condition.filterConditions.length - 1].relation = FilterRelation.And;
                    condition.filterConditions.push(searchCondition);
                }
                else {
                    condition.filterConditions = [searchCondition];
                }
            }
        }
        return condition;
    };
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    LookupUtils.prototype.canSelectable = /**
     * @private
     * @param {?} n
     * @return {?}
     */
    function (n) {
        if (n.hasOwnProperty('farris_selectable')) {
            return !!n['farris_selectable'];
        }
        return true;
    };
    /** 将数据转树形结构 */
    /**
     * 将数据转树形结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @return {?}
     */
    LookupUtils.prototype.makeTreeWithParentID = /**
     * 将数据转树形结构
     * @param {?} data
     * @param {?} parentId
     * @param {?=} parentIdField
     * @param {?=} idField
     * @return {?}
     */
    function (data, parentId, parentIdField, idField) {
        var _this = this;
        if (parentIdField === void 0) { parentIdField = 'parentId'; }
        if (idField === void 0) { idField = 'id'; }
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var node = {
                data: t,
                children: [],
                selectable: _this.canSelectable(t),
                parent: null,
                parents: []
            };
            /** @type {?} */
            var id = t[idField];
            nodes.set(id, node);
            /** @type {?} */
            var PID = _this.utils.getValue(parentIdField, t);
            if (PID === parentId) {
                result.push(node);
            }
            else {
                /** @type {?} */
                var parent_1 = nodes.get(PID);
                if (parent_1) {
                    node.parent = PID;
                    node.parents = __spread(parent_1.parents, [PID]);
                    parent_1.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var pid = _this.utils.getValue(parentIdField, n.data);
            /** @type {?} */
            var parent = nodes.get(pid);
            if (parent) {
                n.parent = pid;
                n.parents = __spread(parent.parents, [pid]);
                parent.children.push(n);
            }
        }));
        return result;
    };
    /**
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    LookupUtils.prototype.makeTree = /**
     * @param {?} data
     * @param {?} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        // const treeInfoField = treeInfo.dataField;
        // const layerField = treeInfo.layerField;
        // const pathField = treeInfo.pathField;
        var _this = this;
        // const treeInfoField = treeInfo.dataField;
        // const layerField = treeInfo.layerField;
        // const pathField = treeInfo.pathField;
        /** @type {?} */
        var nodes = new Map();
        /** @type {?} */
        var result = [];
        /** @type {?} */
        var unattached = [];
        data.forEach((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            /** @type {?} */
            var node = {
                data: t,
                children: [],
                selectable: _this.canSelectable(t)
            };
            /** @type {?} */
            var pathCode = _this.getPathCode(t, treeInfo);
            nodes.set(pathCode, node);
            if (_this.getLayerData(t, treeInfo) === 1) {
                result.push(node);
            }
            else {
                /** @type {?} */
                var parentPathCode = pathCode.substr(0, pathCode.length - 4);
                /** @type {?} */
                var parent_2 = nodes.get(parentPathCode);
                if (parent_2) {
                    parent_2.children.push(node);
                }
                else {
                    unattached.push(node);
                }
            }
        }));
        unattached.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            // const pathCode = n.data[treeInfoField][pathField];
            /** @type {?} */
            var pathCode = _this.getPathCode(n.data, treeInfo);
            /** @type {?} */
            var parent = nodes.get(pathCode.substr(0, pathCode.length - 4));
            if (parent) {
                parent.children.push(n);
            }
        }));
        return result;
    };
    LookupUtils.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LookupUtils.ctorParameters = function () { return [
        { type: CommonUtils },
        { type: RuntimeStateService },
        { type: NgZone }
    ]; };
    return LookupUtils;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PersonalConfigService = /** @class */ (function () {
    function PersonalConfigService(idService) {
        this.idService = idService;
        this.selectItemObser$ = new Subject();
        this.displayType = 'LIST';
        this.singleSelect = true;
        // 个性化配置KEY
        this._key = '';
        this._newKey = '';
        // 组件ID
        this.controlID = '';
    }
    Object.defineProperty(PersonalConfigService.prototype, "personalConfigKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this._key;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                this._key = this.buildKey(val);
                if (this.controlID) {
                    this._newKey = this.buildKey(this.controlID + '_' + val);
                }
                else {
                    this._newKey = this._key;
                }
            }
            else {
                this._newKey = this.buildKey(this.controlID);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @param {?} str
     * @return {?}
     */
    PersonalConfigService.prototype.buildKey = /**
     * @private
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var prefix = '';
        if (location.hash) {
            /** @type {?} */
            var pathArr = location.hash.split('?');
            prefix = pathArr ? pathArr[0] : '';
        }
        else {
            /** @type {?} */
            var pathArr = location.pathname.split('/');
            prefix = pathArr ? pathArr[pathArr.length - 1] : '';
        }
        return this.idService.encrypt(prefix + str);
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    PersonalConfigService.prototype.initPersonalConf = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        Object.assign(this, obj);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    PersonalConfigService.prototype.getPersonalData = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (key) {
            this._key = key;
        }
        if (this.personalConfigKey) {
            /** @type {?} */
            var conf = localStorage.getItem(this.personalConfigKey);
            if (conf && conf !== 'undefined' && conf !== 'null') {
                this.personalConf = conf ? JSON.parse(conf) : {};
                this._updatePersonalConfig(this.personalConf);
                if (this.controlID) {
                    if (this._key !== this._newKey) {
                        localStorage.removeItem(this._key);
                    }
                    this.savePersonalConfig(this.personalConf);
                }
                return this.personalConf;
            }
            else {
                return null;
            }
        }
        return null;
    };
    /**
     * @param {?=} localeId
     * @return {?}
     */
    PersonalConfigService.prototype.getQuickSelected = /**
     * @param {?=} localeId
     * @return {?}
     */
    function (localeId) {
        /** @type {?} */
        var d = this.getPersonalData();
        /** @type {?} */
        var qs = d ? d.quickSelected : null;
        if (localeId) {
            if (qs) {
                /** @type {?} */
                var items = qs[localeId];
                if (items && items.length) {
                    return items;
                }
            }
            return null;
        }
        return qs;
    };
    /**
     * @return {?}
     */
    PersonalConfigService.prototype.getDialogSize = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var d = this.getPersonalData();
        return d ? d.size : null;
    };
    /**
     * @param {?} cfg
     * @return {?}
     */
    PersonalConfigService.prototype.updatePersonalConfig = /**
     * @param {?} cfg
     * @return {?}
     */
    function (cfg) {
        /** @type {?} */
        var data = Object.assign(this.personalConf || {}, cfg);
        this.savePersonalConfig(data);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PersonalConfigService.prototype.savePersonalConfig = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this._newKey) {
            /** @type {?} */
            var _data_1 = (/** @type {?} */ (localStorage.getItem(this._newKey)));
            if (_data_1) {
                _data_1 = (/** @type {?} */ (JSON.parse(_data_1)));
                if (_data_1.favorite) {
                    if (!data.favorite) {
                        data.favorite = _data_1.favorite;
                    }
                    else {
                        Object.keys(_data_1.favorite).forEach((/**
                         * @param {?} lang
                         * @return {?}
                         */
                        function (lang) {
                            data.favorite[lang] = data.favorite[lang] || [];
                            if (_data_1.favorite[lang]) {
                                /** @type {?} */
                                var arr = Array.from(new Set(__spread(data.favorite[lang], _data_1.favorite[lang])));
                                data.favorite[lang] = arr;
                            }
                        }));
                    }
                }
            }
            localStorage.setItem(this._newKey, JSON.stringify(data));
            this.personalConf = data;
            return true;
        }
        return false;
    };
    /**
     * @param {?=} tabName
     * @return {?}
     */
    PersonalConfigService.prototype.getActiveTabIndex = /**
     * @param {?=} tabName
     * @return {?}
     */
    function (tabName) {
        /** @type {?} */
        var d = this.getPersonalData();
        if (!tabName) {
            return d && d.tabIndex ? d.tabIndex : 'datalist';
        }
        return tabName;
    };
    /**
     * @param {?} selectedRow
     * @param {?} localeId
     * @return {?}
     */
    PersonalConfigService.prototype.updateQueckSelected = /**
     * @param {?} selectedRow
     * @param {?} localeId
     * @return {?}
     */
    function (selectedRow, localeId) {
        var _this = this;
        var _a, _b;
        /** @type {?} */
        var quickItems = this.getQuickSelected(localeId);
        if (quickItems && quickItems.length) {
            /** @type {?} */
            var selectedIndex_1 = [];
            quickItems.forEach((/**
             * @param {?} element
             * @param {?} index
             * @return {?}
             */
            function (element, index) {
                if (_this.singleSelect) {
                    if (element && selectedRow && element[_this.idField] === selectedRow[_this.idField]) {
                        selectedIndex_1.push(index);
                    }
                }
                else {
                    if (selectedRow) {
                        selectedRow.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            if (element && element[_this.idField] === item[_this.idField]) {
                                selectedIndex_1.push(index);
                            }
                        }));
                    }
                }
            }));
            selectedIndex_1.forEach((/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                quickItems[index] = null;
            }));
            this.personalConf.quickSelected[localeId] =
                this.personalConf.quickSelected[localeId].filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v !== null; }));
            if (this.singleSelect) {
                this.personalConf.quickSelected[localeId].unshift(selectedRow);
            }
            else {
                if (selectedRow) {
                    selectedRow.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.personalConf.quickSelected[localeId].unshift(element);
                    }));
                }
            }
            this.personalConf.quickSelected[localeId].length =
                this.personalConf.quickSelected[localeId].length > 5 ?
                    5 : this.personalConf.quickSelected[localeId].length;
        }
        else {
            /** @type {?} */
            var _qs = this.personalConf.quickSelected || {};
            /** @type {?} */
            var newData = void 0;
            if (this.singleSelect) {
                newData = Object.assign(_qs, (_a = {}, _a[localeId] = [selectedRow], _a));
            }
            else {
                selectedRow.length = selectedRow.length > 5 ? 5 : selectedRow.length;
                newData = Object.assign(_qs, (_b = {}, _b[localeId] = selectedRow, _b));
            }
            this.personalConf.quickSelected = newData;
        }
        this.savePersonalConfig(this.personalConf);
    };
    /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     */
    /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     * @param {?} per
     * @return {?}
     */
    PersonalConfigService.prototype._updatePersonalConfig = /**
     *  更新数据结构，现有个性化数据均转为 中文环境下数据；
     * @param {?} per
     * @return {?}
     */
    function (per) {
        if (per) {
            /** @type {?} */
            var flag = false;
            // 更新收藏数据
            if (per.favorite && Array.isArray(per.favorite)) {
                per.favorite = { 'zh-CHS': __spread(per.favorite) };
                delete per.favorite;
                flag = true;
            }
            // 更新快捷录入数据
            if (per.selected) {
                if (Array.isArray(per.selected)) {
                    per.quickSelected = { 'zh-CHS': __spread(per.selected) };
                }
                delete per.selected;
                flag = true;
            }
            if (flag) {
                this.savePersonalConfig(per);
            }
        }
    };
    PersonalConfigService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PersonalConfigService.ctorParameters = function () { return [
        { type: IdService }
    ]; };
    return PersonalConfigService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UtilService = /** @class */ (function () {
    function UtilService(instance) {
        this.instance = instance;
    }
    return UtilService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeNodeHelper = /** @class */ (function () {
    function TreeNodeHelper(instance) {
        this.instance = instance;
        this.flatAllNodes = [];
    }
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getTreeInfo = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        if (treeNode.data[this.treeInfo.dataField]) {
            return treeNode.data[this.treeInfo.dataField];
        }
        /** @type {?} */
        var data = treeNode.data;
        if (data && this.treeInfo.dataField) {
            /** @type {?} */
            var treeInfoDataField_1 = this.treeInfo.dataField.toLowerCase();
            /** @type {?} */
            var dataField = Object.keys(treeNode.data).find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n.toLowerCase() === treeInfoDataField_1;
            }));
            if (dataField) {
                return data[dataField];
            }
            else {
                this.instance.writeConsole("\u672A\u627E\u5230\u6811\u5F62\u4FE1\u606F\u6570\u636E\u5B57\u6BB5\u3010" + this.treeInfo.dataField + "\u3011", 'error');
            }
        }
        else {
            this.instance.writeConsole("\u672A\u627E\u5230\u6811\u5F62\u4FE1\u606F\u6570\u636E\u5B57\u6BB5\u3010" + this.treeInfo.dataField + "\u3011", 'error');
        }
    };
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getTreeNodeLayer = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        return this.getTreeInfo(treeNode)[this.treeInfo.layerField];
    };
    /** 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     */
    /**
     * 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     * @param {?} treeNodes
     * @param {?=} treeInfo
     * @return {?}
     */
    TreeNodeHelper.prototype.updateTreeNodeExpanded = /**
     * 更新节点的展开状态。 根据组件中 expandLevel 的值决定
     * -1：不展开，0：全部展开，>0 展开到指定级数
     * @param {?} treeNodes
     * @param {?=} treeInfo
     * @return {?}
     */
    function (treeNodes, treeInfo) {
        var _this = this;
        if (treeInfo === void 0) { treeInfo = null; }
        if (treeInfo) {
            this.treeInfo = treeInfo;
        }
        else {
            this.treeInfo = this.instance.treeInfo;
        }
        /** @type {?} */
        var expandLevel = this.instance.expandLevel;
        if (expandLevel === -1) {
            return;
        }
        if (!this.flatAllNodes.length) {
            this.flatAllNodes = this.treeData2Flat(null, treeNodes, 0, []);
        }
        treeNodes.forEach((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            tn.expanded = _this.shoudExpand(expandLevel, _this.getTreeNodeLayer(tn));
            if (_this.isSelectNodeParent(tn)) {
                tn.expanded = true;
            }
            if (tn.children && tn.children.length) {
                _this.updateTreeNodeExpanded(tn.children, treeInfo);
            }
            else {
                tn.leaf = true;
            }
        }));
    };
    /**
     * @private
     * @param {?} parent
     * @param {?} nodes
     * @param {?} level
     * @param {?} parentIds
     * @return {?}
     */
    TreeNodeHelper.prototype.treeData2Flat = /**
     * @private
     * @param {?} parent
     * @param {?} nodes
     * @param {?} level
     * @param {?} parentIds
     * @return {?}
     */
    function (parent, nodes, level, parentIds) {
        var _this = this;
        /** @type {?} */
        var idField = this.instance.idField;
        /** @type {?} */
        var arr = [];
        if (nodes && nodes.length) {
            nodes.forEach((/**
             * @param {?} node
             * @param {?} index
             * @return {?}
             */
            function (node, index) {
                // node.parent = parent;
                // node.parent = parent;
                /** @type {?} */
                var parents = [];
                if (parent) {
                    /** @type {?} */
                    var parentID = parent.data[idField];
                    /** @type {?} */
                    var _parents = parentIds || [];
                    parents = parents.concat(_parents.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n; })));
                    parents.push(parentID);
                }
                /** @type {?} */
                var rowNode = {
                    id: node.data[idField],
                    node: node,
                    level: level,
                    parents: parents,
                };
                arr.push(rowNode);
                arr = arr.concat(_this.treeData2Flat(node, node.children, level + 1, parents));
            }));
        }
        return arr;
    };
    /**
     * @private
     * @param {?} expandLevel
     * @param {?} nodeLayer
     * @return {?}
     */
    TreeNodeHelper.prototype.shoudExpand = /**
     * @private
     * @param {?} expandLevel
     * @param {?} nodeLayer
     * @return {?}
     */
    function (expandLevel, nodeLayer) {
        if (expandLevel === -1) {
            // -1 为不展开
            return false;
        }
        else if (expandLevel === 0) {
            // 0 为全部展开
            return true;
        }
        else {
            // 没有启用分层加载，通过展开层级确定是否展开该节点
            return nodeLayer <= expandLevel;
        }
    };
    /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.isSelectNodeParent = /**
     * @private
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        var _this = this;
        if (this.instance.navSelectedIds) {
            /** @type {?} */
            var allParentIds = this.flatAllNodes.find((/**
             * @param {?} f
             * @return {?}
             */
            function (f) { return f.id === _this.instance.navSelectedIds; })).parents;
            if (allParentIds && allParentIds.length) {
                return allParentIds.includes(treeNode.id);
            }
            return false;
        }
        return false;
    };
    /**
     * @param {?} treeNode
     * @return {?}
     */
    TreeNodeHelper.prototype.getLeafNode = /**
     * @param {?} treeNode
     * @return {?}
     */
    function (treeNode) {
        if (treeNode && (!treeNode.children || !treeNode.children.length)) {
            return treeNode;
        }
        else {
            if (treeNode.children.length === 1) {
                return this.getLeafNode(treeNode.children[0]);
            }
            else {
                return treeNode.children;
            }
        }
    };
    /**
     * @param {?} items
     * @param {?=} result
     * @return {?}
     */
    TreeNodeHelper.prototype.flatTreeNodes = /**
     * @param {?} items
     * @param {?=} result
     * @return {?}
     */
    function (items, result) {
        var _this = this;
        if (result === void 0) { result = []; }
        items = items || [];
        return items.reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        function (c, n) {
            c.push(n);
            if (n.children && n.children.length) {
                _this.flatTreeNodes(n.children, c);
            }
            return c;
        }), result);
    };
    return TreeNodeHelper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FavoriteHelper = /** @class */ (function () {
    function FavoriteHelper(instance) {
        var _this_1 = this;
        this.instance = instance;
        this.favoriteColumnFormatter = (/**
         * @param {?} v
         * @param {?} data
         * @return {?}
         */
        function (v, data) {
            /** @type {?} */
            var f = v ? FavoriteIcon.yes : FavoriteIcon.no;
            if (_this_1.instance.isTree()) {
                /** @type {?} */
                var id = data[_this_1.instance.idField];
                if (id) {
                    /** @type {?} */
                    var tt = (/** @type {?} */ (_this_1.instance.componentRef.instance));
                    /** @type {?} */
                    var rn = tt.findRowNode(id);
                    if (rn) {
                        if (rn.node.selectable) {
                            return f;
                        }
                        else {
                            return '';
                        }
                    }
                }
            }
            return f;
        });
        this.lookupSelectionSer = this.instance.lookupSelectionSer;
    }
    /**
     * @return {?}
     */
    FavoriteHelper.prototype.getFavoriteColumns = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var columns = this.instance.gridOptions.columns.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var rtn = Object.assign({}, item);
            if (item.field === FAVORITE_FIELD_NAME) {
                rtn.formatter = (/**
                 * @return {?}
                 */
                function () { return FavoriteIcon.delete; });
            }
            return rtn;
        }));
        this.instance.initColumnWidth(columns, 'fav');
        return columns;
    };
    /**
     * @return {?}
     */
    FavoriteHelper.prototype.initPersonalInfo = /**
     * @return {?}
     */
    function () {
        if (this.instance.personalConfigService) {
            /** @type {?} */
            var controlID = this.instance.el.nativeElement.id || this.instance.controlId;
            if (!controlID) {
                this.instance.writeConsole('LookupGrid - 未设置组件id, 收藏功能将不能正常，请设置组件id.');
            }
            /** @type {?} */
            var pcstr = this.instance.getLookupBindingFields();
            this.instance.personalConfigService.controlID = controlID;
            this.instance.personalConfigService.personalConfigKey = pcstr;
            /** @type {?} */
            var conf = {
                displayType: this.instance.displayType,
                singleSelect: this.instance.singleSelect,
                idField: this.instance.idField,
                textField: this.instance.textField,
                mapFields: Object.assign({}, this.instance.mapFields || {})
            };
            this.instance.personalConfigService.initPersonalConf(conf);
            // 个性化配置的订阅事件处理
            this.listenPersonalConfigHandler();
        }
    };
    /**
     * 监听收藏TAB页中相关事件；
     * 数据选中，取消选中，移除收藏，双击事件
     */
    /**
     * 监听收藏TAB页中相关事件；
     * 数据选中，取消选中，移除收藏，双击事件
     * @param {?} cmpRef
     * @return {?}
     */
    FavoriteHelper.prototype.initFavoriteComponentEvent = /**
     * 监听收藏TAB页中相关事件；
     * 数据选中，取消选中，移除收藏，双击事件
     * @param {?} cmpRef
     * @return {?}
     */
    function (cmpRef) {
        var _this_1 = this;
        switch (this.instance.displayType) {
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
            case LookupGridDisplayType.List: {
                /** @type {?} */
                var fdt_1 = (/** @type {?} */ (cmpRef.instance));
                fdt_1.remoteSort = false;
                fdt_1.selectedRow.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (_this_1.instance.singleSelect) {
                        _this_1.lookupSelectionSer.clearSelections();
                    }
                    _this_1.lookupSelectionSer.updateSelections(e.data);
                }));
                fdt_1.unSelectRow.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    _this_1.lookupSelectionSer.unSelect(e.data[_this_1.instance.idField]);
                }));
                if (!fdt_1.singleSelect) {
                    fdt_1.checkAll.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this_1.lookupSelectionSer.updateSelections(fdt_1.data, e);
                    }));
                }
                fdt_1.cellClick.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    if (e.col.field === FAVORITE_FIELD_NAME) {
                        e.event.stopPropagation();
                        // tslint:disable-next-line: no-string-literal
                        /** @type {?} */
                        var classList = e.event.target['classList'];
                        if (classList.contains('f-lookup-unfavorite')) {
                            if (_this_1.instance.items) {
                                _this_1.instance.items.forEach((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) {
                                    if (item[_this_1.instance.idField] === e.row[_this_1.instance.idField]) {
                                        item[FAVORITE_FIELD_NAME] = false;
                                    }
                                }));
                                /** @type {?} */
                                var dt = (/** @type {?} */ (_this_1.instance.componentRef.instance));
                                if (dt) {
                                    dt.loadData({
                                        pageSize: _this_1.instance.gridOptions.pageSize,
                                        pageIndex: _this_1.instance.gridOptions.pageIndex,
                                        total: _this_1.instance.gridOptions.total,
                                        data: _this_1.instance.gridOptions.items
                                    });
                                }
                            }
                            _this_1.instance.favoriteItems =
                                _this_1.instance.favoriteItems.filter((/**
                                 * @param {?} n
                                 * @return {?}
                                 */
                                function (n) { return n[_this_1.instance.idField] !== e.row[_this_1.instance.idField]; }));
                            _this_1.lookupSelectionSer.updateFavoriteData(e.row, FavoriteAction.delete);
                        }
                    }
                }));
                // 双击事件
                fdt_1.rowDblClick.subscribe((/**
                 * @param {?} rowData
                 * @return {?}
                 */
                function (rowData) {
                    if (_this_1.instance.gridOptions.singleSelect) {
                        _this_1.instance.selectItem(rowData);
                    }
                }));
                break;
            }
            case LookupGridDisplayType.TreeList: {
                if (cmpRef) {
                    /** @type {?} */
                    var ftt_1 = (/** @type {?} */ (cmpRef.instance));
                    ftt_1.remoteSort = false;
                    ftt_1.nodeSelected.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        if (_this_1.instance.singleSelect) {
                            _this_1.lookupSelectionSer.clearSelections();
                        }
                        _this_1.lookupSelectionSer.updateSelections(e.node.data);
                    }));
                    ftt_1.nodeUnChecked.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        if (e.nodes && e.nodes.length) {
                            _this_1.instance.multiSelMgr.remove(e.nodes.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.id; })));
                        }
                        else if (e && e.node && e.node.data && e.node.data.id) {
                            // const tt = this.instance.componentRef.instance as TreeTableComponent;
                            // tt.unSelectNode(e.node.data.id);
                            _this_1.lookupSelectionSer.unSelect(e.node.data.id);
                        }
                    }));
                    ftt_1.nodeChecked.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        if (!_this_1.instance.singleSelect) {
                            if (e.nodes && e.nodes.length) {
                                _this_1.instance.multiSelMgr.updateSelections(e.nodes.map((/**
                                 * @param {?} n
                                 * @return {?}
                                 */
                                function (n) { return n.data; })));
                            }
                            else {
                                if (Array.isArray(e.node)) {
                                    _this_1.instance.multiSelMgr.updateSelections(e.node.map((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    function (n) { return n.data; })));
                                }
                                else {
                                    _this_1.instance.multiSelMgr.updateSelections([e.node.data]);
                                }
                            }
                        }
                    }));
                    ftt_1.cellClick.subscribe((/**
                     * @param {?} row
                     * @return {?}
                     */
                    function (row) {
                        if (row.col.field === FAVORITE_FIELD_NAME) {
                            row.event.stopPropagation();
                            /** @type {?} */
                            var classList = row.event.target['classList'];
                            if (classList.contains('f-lookup-unfavorite')) {
                                /** @type {?} */
                                var _this_2 = _this_1.instance;
                                ((/**
                                 * @param {?} items
                                 * @return {?}
                                 */
                                function every(items) {
                                    if (!items) {
                                        return;
                                    }
                                    /** @type {?} */
                                    var hasFinish = false;
                                    items.forEach((/**
                                     * @param {?} item
                                     * @return {?}
                                     */
                                    function (item) {
                                        if (hasFinish) {
                                            return;
                                        }
                                        if (item.data[_this_2.idField] === row.node[_this_2.idField]) {
                                            item.data[FAVORITE_FIELD_NAME] = false;
                                            hasFinish = true;
                                        }
                                        else if (item.children && item.children.length > 0) {
                                            every(item.children);
                                        }
                                    }));
                                }))(_this_1.instance.items);
                                /** @type {?} */
                                var tt = (/** @type {?} */ (_this_1.instance.componentRef.instance));
                                tt.loadData(_this_1.instance.items);
                                _this_1.lookupSelectionSer.updateFavoriteData(row.node.data, FavoriteAction.delete);
                            }
                        }
                    }));
                    ftt_1.dblClick.subscribe((/**
                     * @param {?} treeNode
                     * @return {?}
                     */
                    function (treeNode) {
                        if (_this_1.instance.gridOptions.singleSelect && treeNode.selectable) {
                            if (_this_1.instance.okButton) {
                                _this_1.instance.okButton.nativeElement.click();
                            }
                        }
                    }));
                    ftt_1.checkAll.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var data = e.instance.checkeds.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.data; }));
                        _this_1.instance.multiSelMgr.updateSelections(data);
                        _this_1.instance.checkedChange.emit({ data: data, isCheck: true });
                    }));
                    ftt_1.unCheckAll.subscribe((/**
                     * @return {?}
                     */
                    function () {
                        // this.instance.multiSelMgr.clear();
                        /** @type {?} */
                        var nodeItems = ftt_1.state.rowNodes.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.node.data; }));
                        _this_1.lookupSelectionSer.updateSelections(nodeItems, false);
                        _this_1.instance.checkedChange.emit({ data: [], isCheck: false });
                    }));
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    FavoriteHelper.prototype.getFavoritData = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.instance.personalConf) {
            /** @type {?} */
            var favData = this.instance.personalConf.favorite;
            /** @type {?} */
            var _data = (favData && favData[this.instance.localService.localeId]) ? favData[this.instance.localService.localeId] : [];
            return _data;
        }
        return [];
    };
    /**
     * @return {?}
     */
    FavoriteHelper.prototype.getFavoritIds = /**
     * @return {?}
     */
    function () {
        return this.getFavoritData();
    };
    /**
     * @param {?=} data
     * @return {?}
     */
    FavoriteHelper.prototype._loadFavoriteData = /**
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        if (data === void 0) { data = null; }
        /** @type {?} */
        var fdt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
        this.loadFavoriteDatatable(fdt, data);
        fdt.cd.markForCheck();
        this.instance.closeLoading();
    };
    // 加载收藏grid数据
    // 加载收藏grid数据
    /**
     * @param {?=} res
     * @return {?}
     */
    FavoriteHelper.prototype.loadFavoritesData = 
    // 加载收藏grid数据
    /**
     * @param {?=} res
     * @return {?}
     */
    function (res) {
        if (res === void 0) { res = null; }
        /** @type {?} */
        var favIds = this.getFavoritIds();
        switch (this.instance.displayType) {
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
            case LookupGridDisplayType.List: {
                /** @type {?} */
                var fdt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                if (this.instance.favoriteDataFrom === 'locale') {
                    if (res) {
                        this._loadFavoriteData(res.items);
                    }
                }
                else {
                    /** @type {?} */
                    var favData = this.getFavoritData();
                    this.loadFavoriteDatatable(fdt, res ? res.items : favData);
                }
                break;
            }
            case LookupGridDisplayType.TreeList: {
                if (this.instance.favoritesComponentRef && this.instance.favoritesComponentRef.instance instanceof TreeTableComponent) {
                    /** @type {?} */
                    var ftt = (/** @type {?} */ (this.instance.favoritesComponentRef.instance));
                    this.bindFavTreetable(ftt);
                    if (this.instance.favoriteDataFrom === 'locale') {
                        if (res) {
                            this.loadFavoriteForTreeTable(res.items || [], ftt);
                        }
                    }
                    else {
                        if (res) {
                            this.loadFavoriteForTreeTable(res.items, ftt);
                        }
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} fdt
     * @param {?=} data
     * @return {?}
     */
    FavoriteHelper.prototype.loadFavoriteDatatable = /**
     * @private
     * @param {?} fdt
     * @param {?=} data
     * @return {?}
     */
    function (fdt, data) {
        if (data !== undefined) {
            this.instance.favoriteItems = data;
        }
        if (fdt.columns && !fdt.columns.length) {
            fdt.columns = this.instance.favoriteColumns;
        }
        fdt.loadData({
            total: 0,
            pageSize: 20,
            pageIndex: 1,
            data: this.instance.favoriteItems
        });
        this.instance.selectionMgr.selectCurrentValue();
        fdt.cd.detectChanges();
    };
    /**
     * @private
     * @param {?} ftt
     * @return {?}
     */
    FavoriteHelper.prototype.bindFavTreetable = /**
     * @private
     * @param {?} ftt
     * @return {?}
     */
    function (ftt) {
        var _this_1 = this;
        ftt.allColumnsTitle = this.instance.allColumnsTitle;
        ftt.idField = this.instance.idField;
        /** @type {?} */
        var columns = this.instance.gridOptions.columns.map((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var rtn = __assign({}, item);
            if (item.field === FAVORITE_FIELD_NAME) {
                rtn.formatter = (/**
                 * @param {?} v
                 * @param {?} data
                 * @return {?}
                 */
                function (v, data) {
                    /** @type {?} */
                    var favids = _this_1.getFavoritIds();
                    if (favids && favids.length) {
                        /** @type {?} */
                        var index = favids.findIndex((/**
                         * @param {?} el
                         * @return {?}
                         */
                        function (el) { return el === data[_this_1.instance.idField]; }));
                        if (index >= 0) {
                            return FavoriteIcon.delete;
                        }
                    }
                    return '';
                });
            }
            return rtn;
        }));
        this.instance.initColumnWidth(columns, 'fav');
        this.instance.favoriteColumns = columns;
        ftt.columns = columns;
        if (this.instance.gridOptions.treeInfo) {
            ftt.onlySelectLeaf = this.instance.gridOptions.treeInfo.onlySelectLeaf;
        }
        if (!ftt.singleSelect) {
            ftt.checkOnSelect = true;
            ftt.selectOnCheck = true;
            ftt.showCheckbox = true;
            // 启用多选后，同时启用级联选择
            if (this.instance.enableCascade) {
                this.instance.ttEventMgr.cascadeValueChanged(this.instance.cascadeStatus);
            }
            else {
                ftt.cascadeCheck = false;
                ftt.cascadeDown = false;
                ftt.cascadeUp = false;
            }
        }
    };
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    FavoriteHelper.prototype.checkNodeIsLeaf = /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this_1 = this;
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.hasOwnProperty("addtional")) {
                    node.selectable = !node["addtional"];
                }
                if (node.children && node.children.length) {
                    _this_1.checkNodeIsLeaf(node.children);
                }
                else {
                    node.leaf = true;
                }
                return node;
            }));
        }
        return nodes;
    };
    /**
     * @param {?} items
     * @return {?}
     */
    FavoriteHelper.prototype.initFavoriteTreeData = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        /** @type {?} */
        var treeInfo = this.instance.gridOptions.treeInfo;
        if (treeInfo && !treeInfo['treeDataIsInit']) {
            if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                items = this.instance.lookupUtils.makeTree(items, treeInfo);
            }
            else {
                items = this.instance.lookupUtils.makeTreeWithParentID(items, '', treeInfo.dataField ? treeInfo.dataField + "." + treeInfo.parentField : treeInfo.parentField, this.instance.idField);
            }
        }
        // return this.instance.checkNodeCanBeSelect(items, true);
        return this.checkNodeIsLeaf(items);
    };
    /**
     * @param {?} items
     * @param {?} ftt
     * @return {?}
     */
    FavoriteHelper.prototype.loadFavoriteForTreeTable = /**
     * @param {?} items
     * @param {?} ftt
     * @return {?}
     */
    function (items, ftt) {
        items = this.initFavoriteTreeData(items);
        this.instance.favoriteItems = items;
        ftt.loadData(items);
        ftt.expandAll();
        this.instance.selectionMgr.selectCurrentValue();
        return items;
    };
    // 更新列表中的收藏数据标识
    // 更新列表中的收藏数据标识
    /**
     * @param {?} data
     * @return {?}
     */
    FavoriteHelper.prototype.updateFavoritesStatus = 
    // 更新列表中的收藏数据标识
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this_1 = this;
        if (!data || !this.instance.useFavorite) {
            return;
        }
        /** @type {?} */
        var favIds = this.getFavoritIds();
        if (favIds && favIds.length) {
            // 处理数据列表中的收藏数据标识
            if (this.instance.displayType !== LookupGridDisplayType.TreeList) {
                data.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (favIds && favIds.length && favIds.find((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) { return v === item[_this_1.instance.idField]; }))) {
                        item[FAVORITE_FIELD_NAME] = true;
                    }
                }));
            }
            else {
                /** @type {?} */
                var _this_3 = this.instance;
                ((/**
                 * @param {?} _data
                 * @return {?}
                 */
                function each(_data) {
                    _data.forEach((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) {
                        if (favIds && favIds.length && favIds.find((/**
                         * @param {?} v
                         * @return {?}
                         */
                        function (v) { return v === item.data[_this_3.idField]; }))) {
                            item.data[FAVORITE_FIELD_NAME] = true;
                        }
                        if (item.children && item.children.length > 0) {
                            each(item.children);
                        }
                    }));
                }))(data);
            }
        }
    };
    /**
     * @private
     * @param {?} value
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    FavoriteHelper.prototype._updateFavorites = /**
     * @private
     * @param {?} value
     * @param {?} action
     * @param {?} data
     * @return {?}
     */
    function (value, action, data) {
        var _this_1 = this;
        /** @type {?} */
        var localeID = this.instance.localService.localeId;
        this.instance.personalConf.favorite = this.instance.personalConf.favorite || {};
        /** @type {?} */
        var items = value.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n['_addtional_']; }));
        /** @type {?} */
        var newVal = items.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[_this_1.instance.idField]; })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n !== null && n !== undefined; }));
        /** @type {?} */
        var favItems = this.instance.personalConf.favorite[localeID] || [];
        this.instance.personalConf.favorite[localeID] = Array.from(new Set(__spread(favItems, newVal)));
        if (action === FavoriteAction.delete && data) {
            this.instance.personalConf.favorite[localeID] = this.instance.personalConf.favorite[localeID].filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== data[_this_1.instance.idField]; }));
        }
        return this.instance.personalConf.favorite[localeID];
    };
    // 收藏数据管理
    // 收藏数据管理
    /**
     * @private
     * @return {?}
     */
    FavoriteHelper.prototype.listenPersonalConfigHandler = 
    // 收藏数据管理
    /**
     * @private
     * @return {?}
     */
    function () {
        var _this_1 = this;
        this.lookupSelectionSer.favoriteItems$.subscribe((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (!_this_1.instance.favoritesComponentRef) {
                return;
            }
            var items = n.items, action = n.action, data = n.data;
            /** @type {?} */
            var favids = _this_1._updateFavorites(items, action, data);
            _this_1.instance.httpMgr.submitFavoriteData(action);
            if (_this_1.instance.displayType === LookupGridDisplayType.List || _this_1.instance.displayType.includes('NAV')) {
                /** @type {?} */
                var dt = (/** @type {?} */ (_this_1.instance.favoritesComponentRef.instance));
                _this_1.loadFavoriteDatatable(dt, items);
            }
            else if (_this_1.instance.displayType === LookupGridDisplayType.TreeList) {
                /** @type {?} */
                var ftt_2 = (/** @type {?} */ (_this_1.instance.favoritesComponentRef.instance));
                // const favids = items.map(d => d.id);
                _this_1.instance.showLoading();
                _this_1.instance.httpMgr.getData({ favoriteIds: favids }, 'fav').subscribe((/**
                 * @param {?} resData
                 * @return {?}
                 */
                function (resData) {
                    if (resData) {
                        /** @type {?} */
                        var _items = resData.items;
                        _this_1.loadFavoriteForTreeTable(_items, ftt_2);
                    }
                    else {
                        _this_1.instance.favoriteItems = [];
                        ftt_2.loadData([]);
                    }
                    _this_1.instance.closeLoading();
                }));
            }
        }));
    };
    return FavoriteHelper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SelectionManager = /** @class */ (function () {
    function SelectionManager(ins) {
        this.ins = ins;
    }
    /**
     * @return {?}
     */
    SelectionManager.prototype.destroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.getBindingData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.ins.bindingData;
        if (this.ins.ngControl &&
            this.ins.ngControl.formDirective &&
            this.ins.ngControl.formDirective.form &&
            this.ins.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData = this.ins.ngControl.formDirective.form.bindingData;
            jsonData = bindingData;
            if (bindingData.getObject) {
                jsonData = bindingData.getObject().toJSON();
            }
        }
        return jsonData;
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.initDisplayValue = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.getBindingData();
        if (jsonData && this.ins.mapFields) {
            /** @type {?} */
            var idField = this.ins.idField;
            /** @type {?} */
            var targetField = this.ins.mapFields[idField];
            if (targetField) {
                if (targetField.indexOf(',') > -1) {
                    targetField = targetField.split(',')[0];
                }
                /** @type {?} */
                var val = this.ins.utils.getValue(targetField, jsonData);
                if (val) {
                    this.ins.displayValue = val;
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectionManager.prototype._clearSelections = /**
     * @private
     * @return {?}
     */
    function () {
        var t = this.getDataCmpInstance().cmpRefInstance;
        if (t) {
            if (this.ins.isTree()) {
                // 树表
                t.clearAll(false);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                t.dtBody.selectedRowIndex = -1;
                t.dtBody.selections = undefined;
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    };
    /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     */
    /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     * @param {?=} selectedIds
     * @return {?}
     */
    SelectionManager.prototype.selectCurrentValue = /**
     * 帮助窗口打开后，根据 displayValue 选中数据
     * @param {?=} selectedIds
     * @return {?}
     */
    function (selectedIds) {
        var _this = this;
        if (selectedIds === void 0) { selectedIds = []; }
        if (!this.ins.enableToSelect) {
            return;
        }
        var _a = this.getDataCmpInstance(), t = _a.cmpRefInstance, items = _a.items;
        if (!t || !items || !items.length) {
            return;
        }
        this._clearSelections();
        if (!selectedIds || !selectedIds.length) {
            /** @type {?} */
            var selectedRows = this.ins.lookupSelectionSer.getSelections();
            if (selectedRows.length) {
                selectedIds = selectedRows.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.ins.idField]; }));
            }
        }
        // const _ids = this.getSelectedIds();
        // selectedIds = selectedIds.concat(_ids);
        // selectedIds = Array.from(new Set(selectedIds));
        if (selectedIds && selectedIds.length) {
            if (this.ins.isTree()) {
                // 树表
                this.selected4Treetable(t, selectedIds);
                if (!t.cdRef.destroyed) {
                    t.cdRef.detectChanges();
                }
            }
            else {
                // 列表
                this.selected4Datatable(t, items, selectedIds);
                if (!t.cd.destroyed) {
                    t.cd.detectChanges();
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectionManager.prototype.getDataCmpInstance = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var ref = null;
        /** @type {?} */
        var items = null;
        if (this.ins.activeTab === 'datalist') {
            if (this.ins.isTree()) {
                ref = this.ins.lookupCmpMgr.getComponentInstance('treetable');
                items = ((/** @type {?} */ (ref))).serializedValue;
            }
            else {
                items = this.ins.items;
                ref = this.ins.lookupCmpMgr.getComponentInstance();
            }
        }
        else if (this.ins.activeTab === 'favorite') {
            ref = this.ins.lookupCmpMgr.getComponentInstance('fav');
            items = this.ins.favoriteItems;
        }
        return { cmpRefInstance: ref, items: items };
    };
    /**
     * @private
     * @param {?} t
     * @param {?} items
     * @param {?} values
     * @return {?}
     */
    SelectionManager.prototype.selected4Datatable = /**
     * @private
     * @param {?} t
     * @param {?} items
     * @param {?} values
     * @return {?}
     */
    function (t, items, values) {
        var _this = this;
        if (this.ins.singleSelect) {
            items.forEach((/**
             * @param {?} item
             * @param {?} index
             * @return {?}
             */
            function (item, index) {
                if (item[_this.ins.idField] === values[0]) {
                    if (!t.dtBody.isSelected(item)) {
                        t.dtBody.selectedRowIndex = -1;
                        t.dtBody.selectedRow('', index, item);
                    }
                }
            }));
        }
        else {
            // const values = this.getSelectedIds();
            values.forEach((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                /** @type {?} */
                var r = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.ins.idField] == id; }));
                if (r) {
                    t.checkRow(id);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} t
     * @param {?} valueArr
     * @return {?}
     */
    SelectionManager.prototype.selected4Treetable = /**
     * @private
     * @param {?} t
     * @param {?} valueArr
     * @return {?}
     */
    function (t, valueArr) {
        if (this.ins.singleSelect) {
            t.selectNode(valueArr[0], false, false);
        }
        else {
            // const valueArr = this.getSelectedIds();
            t.checkedNodes(valueArr, false, false, true);
            t.selectNodes(valueArr);
        }
    };
    /**
     * @return {?}
     */
    SelectionManager.prototype.getSelectedIds = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var values = [];
        /** @type {?} */
        var s = this.ins.multipleChoiceSeparator;
        if (!this.ins.singleSelect && this.ins.displayValue && ('' + this.ins.displayValue).indexOf(s) > -1) {
            values = this.ins.displayValue.split(s);
        }
        else {
            if (this.ins.displayValue !== null && this.ins.displayValue !== '' && this.ins.displayValue !== undefined) {
                values = [this.ins.displayValue];
            }
        }
        // // 启用显示多选列表
        // if (this.ins.showSelected) {
        //     const rows = this.ins.lookupSelectionSer.getSelections();
        //     if (rows && rows.length) {
        //         values = rows.map(n => n[this.ins.idField]);
        //     }
        // }
        return values;
    };
    return SelectionManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataTableEventManager = /** @class */ (function () {
    function DataTableEventManager(ins) {
        this.ins = ins;
        this._sortState = null;
        this.lookupSelectionSer = this.ins.lookupSelectionSer;
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    DataTableEventManager.prototype.conditionsChange = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        this.ins.conditions = conditions;
        if (conditions && conditions.length === 1 && conditions[0].code == '*') {
            this.ins.conditions = [];
            this.onSearch({ field: '*', value: conditions[0].value });
        }
        else {
            this.onSearch();
        }
    };
    /**
     * @param {?=} $event
     * @return {?}
     */
    DataTableEventManager.prototype.onSearch = /**
     * @param {?=} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event === void 0) { $event = { field: '*', value: '' }; }
        if ($event && $event.field !== '*' && !$event.value) {
            this.ins.messagerService.warning(this.ins.mustWriteSomething);
            return;
        }
        /** @type {?} */
        var p = {
            pageInfo: { pageIndex: 1, pageSize: this.ins.gridOptions.pageSize },
            search: $event
        };
        if (this._sortState) {
            var _a = this._sortState, sortName = _a.sortName, sortOrder = _a.sortOrder;
            if (sortName) {
                p['sortName'] = sortName;
                p['sortOrder'] = sortOrder;
            }
        }
        if (this.ins.uri) {
            if (!this.ins.searching) {
                this.ins.searching = true;
                if (this.ins['navNodePathCode']) {
                    p['navNodePathCode'] = this.ins['navNodePathCode'];
                }
                this.ins.httpMgr.getData(p, 'list').pipe(catchError((/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    _this.ins.searching = false;
                    return of({ "_ERROR_": err });
                })), tap((/**
                 * @return {?}
                 */
                function () {
                    _this.ins.searching = false;
                }))).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this.ins.searching = false;
                    _this.ins.closeLoading();
                    if (!data['_ERROR_']) {
                        _this._loadData(data);
                    }
                    else {
                        throw new Error(data['_ERROR_']);
                    }
                }));
            }
        }
        else {
            if (this.ins.enableMultiFieldSearch) {
                this.ins.query.emit({ conditions: this.ins.conditions, instance: this.ins });
            }
            else {
                this.ins.search.emit(p);
            }
        }
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    DataTableEventManager.prototype._loadData = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var self = this.ins;
        self.closeLoading();
        self.favHelper.updateFavoritesStatus(data.items);
        self.loadDataTableData(data);
        // 选中数据
        this.ins.selectionMgr.selectCurrentValue();
    };
    /**
     * @return {?}
     */
    DataTableEventManager.prototype.bindDataTableEvent = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var self = this.ins;
        /** @type {?} */
        var dt = (/** @type {?} */ (self.componentRef.instance));
        dt.selectedRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.ins.singleSelect) {
                _this.lookupSelectionSer.clearSelections();
            }
            _this.ins.checkedChange.emit({ data: [e.data], isCheck: true });
            _this.lookupSelectionSer.updateSelections([e.data]);
            dt.cd.detectChanges();
        }));
        dt.unSelectRow.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.lookupSelectionSer.unSelect(e.data[self.idField]);
            _this.ins.checkedChange.emit({ data: [e.data], isCheck: false });
        }));
        dt.checkAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.lookupSelectionSer.updateSelections(dt.data, e);
            _this.ins.checkedChange.emit({ data: dt.data, isCheck: e });
        }));
        dt.pageChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (self.uri) {
                self.httpMgr.getData(e, 'list').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this._loadData(data);
                }));
            }
            else {
                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));
            }
        }));
        dt.pageSizeChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (self.uri) {
                self.httpMgr.getData(e, 'list').subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    _this._loadData(data);
                }), (/**
                 * @param {?} err
                 * @return {?}
                 */
                function (err) {
                    self.closeLoading();
                }));
            }
            else {
                self.pagerChanged.emit(self.httpMgr.buildQueryParams(e, 'list'));
            }
        }));
        dt.search.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // if (JSON.stringify(self._searchState || {}) !== JSON.stringify(e || {})) {
            //     this.ins.searching = false;
            // }
            self._searchState = __assign({}, (e || {}));
            _this.onSearch(e);
        }));
        dt.searchValueChange.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.value) {
                self._searchState = __assign({}, e);
            }
            else {
                self._searchState = null;
            }
        }));
        // 双击事件
        dt.rowDblClick.subscribe((/**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            if (self.gridOptions.singleSelect) {
                // this.lookupSelectionSer.updateSelections([rowData]);
                self.selectItem(rowData);
            }
        }));
        // 收藏事件
        if (!dt.cellClick.observers.length) {
            dt.cellClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.col.field === FAVORITE_FIELD_NAME) {
                    /** @type {?} */
                    var classList = e.event.target['classList'];
                    if (classList.contains('f-lookup-favorite')) {
                        e.event.stopPropagation();
                        self.items.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            /** @type {?} */
                            var id = self.utils.getValue(self.idField, item);
                            if (id === self.utils.getValue(self.idField, e.row)) {
                                item[FAVORITE_FIELD_NAME] = !item[FAVORITE_FIELD_NAME];
                            }
                        }));
                        dt.loadData({
                            pageSize: self.gridOptions.pageSize,
                            pageIndex: self.gridOptions.pageIndex,
                            total: self.gridOptions.total,
                            data: self.gridOptions.items
                        });
                        // 更新收藏数据
                        /** @type {?} */
                        var faction = e.row[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete;
                        if (faction === FavoriteAction.add) {
                            _this.ins.favoriteItems = __spread(_this.ins.favoriteItems, [e.row]);
                        }
                        else {
                            _this.ins.favoriteItems = _this.ins.favoriteItems.filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) {
                                return self.utils.getValue(self.idField, n) !== self.utils.getValue(self.idField, e.row);
                            }));
                        }
                        _this.lookupSelectionSer.updateFavoriteData(e.row, faction);
                    }
                }
            }));
        }
        dt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            _this._sortState = sort;
            if (!_this.ins.remoteSort) {
                return;
            }
            var _a = __assign({}, sort), sortName = _a.sortName, sortOrder = _a.sortOrder;
            /** @type {?} */
            var col = _this.ins.columns.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === sortName; }));
            /** @type {?} */
            var _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName;
            /** @type {?} */
            var param = {
                sortName: _sortName,
                sortOrder: sortOrder,
                search: self._searchState,
                pageInfo: {
                    pageSize: self.pageSize,
                    pageIndex: 1
                }
            };
            self.httpMgr.getData(param, 'search').subscribe((/**
             * @param {?} d
             * @return {?}
             */
            function (d) {
                self.loadDataTableData(d);
                self.closeLoading();
                // 选中数据 TFS 615008
                _this.ins.selectionMgr.selectCurrentValue();
            }));
        }));
        dt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            self._searchState = null;
            _this.onSearch();
        }));
        dt.cellStyler = (/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            var field = val.field;
            if (field === FAVORITE_FIELD_NAME) {
                return {
                    'text-overflow': 'unset'
                };
            }
            return null;
        });
    };
    return DataTableEventManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 检查帮助输入框值变化后返回的查询结果
 * @param {?=} data
 * @return {?}
 */
function checkSearchResult(data) {
    if (data === void 0) { data = null; }
    if (this.searchOnServer) {
        // this._searchResult = data;
        // this.showDialog();
        this.isShow = true;
    }
    else {
        if (data === false) {
            this.cancelSelect();
        }
        else {
            this.setModelValue(this.displayText);
            this.runDictPickedEvent(null);
        }
    }
}
/**
 * @return {?}
 */
function onTextChanged() {
    var _this = this;
    /** @type {?} */
    var self = this;
    /** @type {?} */
    var isPending = (/**
     * @return {?}
     */
    function () {
        return _this.lookupUtils.rts.getFormState('lookup.pending');
    });
    /** @type {?} */
    var searchData = (/**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (_this.isShow) {
            return;
        }
        if (_this.isTextChange && _this.displayText && (!_this.nosearch || e.originalEvent) && !isPending()) {
            _this.lookupUtils.pendingStart();
            _this.dictPickingSubscription = _this.dictPicking({
                instance: _this
            }).pipe(switchMap((/**
             * @param {?} pr
             * @return {?}
             */
            function (pr) {
                /** @type {?} */
                var o = true;
                if (pr === undefined || pr === null) {
                    o = true;
                }
                if (typeof pr === 'boolean') {
                    o = pr;
                }
                if (typeof pr === 'object') {
                    if (pr.showDialog === undefined) {
                        o = true;
                    }
                    else {
                        o = pr.showDialog;
                    }
                    if (pr.data) {
                        /** 保存帮助前传递的数据 */
                        _this.customData = pr.data;
                    }
                }
                if (o) {
                    return _this.httpMgr.getData({
                        search: {
                            field: '*',
                            value: _this.displayText,
                            type: 'equal'
                        }
                    }, 'search');
                }
                else {
                    return of({ SHOWDIALOG: o, MESSAGE: pr.message || '' });
                }
            }))).subscribe((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.closeLoading();
                _this.lookupUtils.pendingEnd();
                if (data.hasOwnProperty('SHOWDIALOG')) {
                    if (data.SHOWDIALOG && data.MESSAGE) {
                        _this.notifyService.warning(data.MESSAGE);
                    }
                    return;
                }
                if (data.items && data.items.length === 1 && (!data.items[0].children || !data.items[0].children.length)) {
                    /** @type {?} */
                    var rowdata = data.items[0];
                    if (_this.isTree()) {
                        /** @type {?} */
                        var leafNode = _this.treeNodeHelper.getLeafNode(rowdata);
                        /** @type {?} */
                        var isOnlySelectLeaf = false;
                        if (!_this.treeInfo) {
                            _this.setTreeInfo(data);
                        }
                        if (typeof _this.treeInfo.onlySelectLeaf === 'boolean') {
                            isOnlySelectLeaf = _this.treeInfo.onlySelectLeaf;
                        }
                        else if (typeof _this.treeInfo.onlySelectLeaf === 'string') {
                            if (_this.treeInfo.onlySelectLeaf === 'yes') {
                                isOnlySelectLeaf = true;
                            }
                            else if (_this.treeInfo.onlySelectLeaf === 'no') {
                                isOnlySelectLeaf = false;
                            }
                            else {
                                if (_this.treeInfo.onlySelectLeaf === 'default') {
                                    isOnlySelectLeaf = data.treeInfo.onlySelectLeaf;
                                }
                            }
                        }
                        if (isOnlySelectLeaf && !leafNode.leaf) {
                            // this.displayText = '';
                            checkSearchResult.bind(self, data)();
                            return;
                        }
                        if (Array.isArray(leafNode)) {
                            checkSearchResult.bind(self, data)();
                            return;
                        }
                        else {
                            rowdata = leafNode.data;
                        }
                    }
                    if (!_this.singleSelect) {
                        rowdata = [rowdata];
                    }
                    _this.selectItem(rowdata);
                    _this.dialogClosed.emit();
                }
                else {
                    checkSearchResult.bind(self, data)();
                }
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
                _this.lookupUtils.pendingEnd();
                _this.messagerService.error(err ? err.Message : err);
            }));
        }
    });
    /** @type {?} */
    var inputBlurHandler = null;
    if (this.inputGroup && this.inputGroup.textbox && !this.nosearch) {
        this.lookupUtils.setActiveLookupInstance(this);
        inputBlurHandler = this.render2.listen(this.inputGroup.textbox.nativeElement, 'blur', searchData);
    }
    if (this.inputGroup) {
        this.inputGroup.enterHandle.subscribe(searchData);
        this.inputGroup.keydownHandle.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var canOpen = false;
            if (e.code === 'ArrowRight') {
                if (_this.quickSelect && !_this.quickSelect.enable) {
                    _this.writeConsole('启用快捷选择后，右方向键禁用打开帮助', 'warn');
                    return;
                }
                if (_this.editable) {
                    canOpen = !e.target.value || e.target.selectionStart === e.target.value.length;
                }
                else {
                    canOpen = true;
                }
            }
            else {
                canOpen = e.code === _this.shortcutKey.open;
            }
            if (canOpen) {
                e.stopPropagation();
                e.preventDefault();
                _this.showDialog();
            }
        }));
    }
    return inputBlurHandler;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TreeTableEventManager = /** @class */ (function () {
    function TreeTableEventManager(ins) {
        var _this_1 = this;
        this.ins = ins;
        this._sortState = null;
        /**
         * 标识当前数据是否查询结果
         */
        this.IS_SEARCH_RESULT = false;
        this._isLoadAllTreeData = (/**
         * @param {?} tt
         * @return {?}
         */
        function (tt) {
            if (_this_1.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'all';
            }
            else {
                return _this_1.ins.loadTreeDataType === 'loadall';
            }
        });
        this._isAsyncLoadTreeData = (/**
         * @param {?} tt
         * @return {?}
         */
        function (tt) {
            if (_this_1.ins.loadTreeDataType === 'default') {
                return tt.loadDataType === 'async';
            }
            else {
                return _this_1.ins.loadTreeDataType === 'layerload';
            }
        });
        this.lookupSelectionSer = this.ins.lookupSelectionSer;
    }
    /**
     * @param {?} conditions
     * @return {?}
     */
    TreeTableEventManager.prototype.conditionsChange = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        this.ins.conditions = conditions;
        if (this.ins.uri) {
            if (conditions && conditions.length === 1 && conditions[0].code == '*') {
                this.ins.conditions = [];
                return this.searchTreeData({ field: '*', value: conditions[0].value });
            }
            return this.searchTreeData({ field: '*', value: '' });
        }
        else {
            this.ins.query.emit({ conditions: conditions, instance: this.ins });
        }
    };
    /**
     * @param {?} search
     * @return {?}
     */
    TreeTableEventManager.prototype.searchTreeData = /**
     * @param {?} search
     * @return {?}
     */
    function (search) {
        var _this_1 = this;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        // 判断uri 发出search.emit();
        if (this.ins.searching) {
            return;
        }
        else {
            this.ins.searching = true;
        }
        this.ins.showLoading();
        if (tt && tt.psRef && tt.psRef.directiveRef) {
            tt.psRef.directiveRef.scrollToTop(0);
        }
        return this.ins.httpMgr.getData({ search: search, sortName: tt.sortName, sortOrder: tt.sortOrder }, 'search').pipe(tap((/**
         * @return {?}
         */
        function () {
            _this_1.ins.searching = false;
        })), catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this_1.ins.searching = false;
            return of(err);
        }))).subscribe((/**
         * @param {?} resData
         * @return {?}
         */
        function (resData) {
            _this_1.ins.closeLoading();
            if (resData) {
                // this.ins.items = resData.items;
                tt.clearAll();
                /** @type {?} */
                var treeInfo = _this_1.ins.gridOptions.treeInfo;
                if (!treeInfo['treeDataIsInit']) {
                    if (treeInfo.layerType.toLowerCase() === 'pathcode') {
                        _this_1.ins.items = _this_1.ins.lookupUtils.makeTree(_this_1.ins.items, treeInfo);
                    }
                    else {
                        _this_1.ins.items = _this_1.ins.lookupUtils.makeTreeWithParentID(_this_1.ins.items, '', treeInfo.dataField ? treeInfo.dataField + "." + treeInfo.parentField : treeInfo.parentField, _this_1.ins.idField);
                    }
                }
                /** @type {?} */
                var checkNodes_1 = (/**
                 * @param {?} nodes
                 * @return {?}
                 */
                function (nodes) {
                    if (nodes && nodes.length) {
                        return nodes.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) {
                            if (node.hasOwnProperty('addtional')) {
                                node.selectable = !node['addtional'];
                            }
                            if (node.children && node.children.length) {
                                checkNodes_1(node.children);
                            }
                            else {
                                if (_this_1._isLoadAllTreeData(tt) && (!search || search.value === '' || search.value === undefined)) {
                                    node.leaf = true;
                                }
                            }
                            return node;
                        }));
                    }
                    return nodes;
                });
                /** @type {?} */
                var _nodes = checkNodes_1(resData.items);
                if (_nodes && _nodes.length && _nodes[0].children && _nodes[0].children.length) {
                    _nodes[0].expanded = true;
                    _nodes[0].children = _this_1.ins.expandFirstNode(_nodes[0].children);
                }
                _this_1.ins.items = _nodes;
                // 加载收藏数据
                if (_this_1.ins.useFavorite) {
                    // 更新数据的收藏状态
                    _this_1.ins.favHelper.updateFavoritesStatus(_this_1.ins.items);
                }
                tt.loadData(_this_1.ins.items);
                // // 展开查询结果。
                // if (search.value && this.ins.items.length) {
                //     tt.toggleExpand(this.ins.items[0], true);
                // }
                tt.resize();
                _this_1.IS_SEARCH_RESULT = true;
                _this_1.ins.selectionMgr.selectCurrentValue();
            }
            _this_1.ins.search.emit(search);
        }));
    };
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    TreeTableEventManager.prototype.getChildren = /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @return {?}
     */
    function (parentPath, parentLayer, searchData) {
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        /** @type {?} */
        var search = __assign({ parentLayer: parentLayer, category: 'children' }, searchData);
        if (this.ins.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        var param = {
            searchValue: '',
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        if (tt && tt.sortName) {
            Object.assign(search, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        if (this.IS_SEARCH_RESULT) {
            param.enableFullTree = false;
            param.loadTreeDataType = 'layerload';
            if (this.ins.treeInfo.layerType === 'parentId') {
                // 树形帮助查询后，展开节点时将相关查询参数传递到后端 2022-09-13
                search.searchValue = '';
                search.searchField = '*';
            }
            // param.searchValue = JSON.stringify(search);
        }
        param.searchValue = JSON.stringify(search);
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (this.ins.conditions && this.ins.conditions.length) {
            param.searchConditions = cloneDeep(this.ins.conditions);
        }
        return this.ins.http.getData(uri, param);
    };
    /**
     * @return {?}
     */
    TreeTableEventManager.prototype.bindTreetableEvent = /**
     * @return {?}
     */
    function () {
        var _this_1 = this;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        /** @type {?} */
        var _searchTreeData = (/**
         * @param {?} searchparam
         * @return {?}
         */
        function (searchparam) {
            if (_this_1.ins.remoteSearch) {
                _this_1.ins._searchState = searchparam;
                _this_1.searchTreeData(searchparam);
            }
            else {
                if (_this_1.ins.useInsideSearchHandler) {
                    tt.searchHandle.search(searchparam.field, searchparam.value, 'client');
                }
                else {
                    _this_1.ins.search.emit(searchparam);
                }
            }
        });
        /** @type {?} */
        var isLoadAllTreeData = (/**
         * @return {?}
         */
        function () {
            return _this_1._isLoadAllTreeData(tt);
        });
        /** @type {?} */
        var isAsyncLoadTreeData = (/**
         * @return {?}
         */
        function () {
            return _this_1._isAsyncLoadTreeData(tt);
        });
        tt.dblClickExpand = !this.ins.singleSelect; // 禁用双击展开节点
        tt.allColumnsTitle = this.ins.allColumnsTitle; // this.displayInfo.allColumns;
        tt.idField = this.ins.idField;
        tt.columns = this.ins.columns;
        tt.searchFields = this.ins.gridOptions.searchFields;
        if (this.ins.treeInfo) {
            tt.loadDataType = this.ins.treeInfo.loadDataType;
            tt.virtualized = true;
            if (!this.ins.isTextChange) {
                this.ins.allData = cloneDeep(this.ins.items);
            }
            else {
                this.ins.allData = [];
            }
        }
        if (this.ins.gridOptions.treeInfo) {
            tt.onlySelectLeaf = this.ins.gridOptions.treeInfo.onlySelectLeaf;
            tt.loadDataType = this.ins.gridOptions.treeInfo.loadDataType;
        }
        if (!tt.singleSelect) {
            tt.checkOnSelect = true;
            tt.selectOnCheck = true;
            tt.showCheckbox = true;
            tt.showCheckAll = this.ins.showCheckAll;
            // 启用多选后，同时启用级联选择
            if (this.ins.enableCascade) {
                this.cascadeValueChanged(this.ins.cascadeStatus);
            }
            else {
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
            }
        }
        tt.enableFindText = this.ins.enableFindText;
        // tt.findField = this.textField;
        tt.nodeSelected.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // if (this.ins.favoritesComponentRef && this.ins.singleSelect) {
            //     const ftt = this.ins.favoritesComponentRef.instance as TreeTableComponent;
            //     ftt.clearSelections();
            // }
            if (_this_1.ins.singleSelect) {
                _this_1.lookupSelectionSer.clearSelections();
            }
            _this_1.lookupSelectionSer.updateSelections([e.node.data]);
            _this_1.ins.checkedChange.emit({ data: [e.node.data], isCheck: true });
        }));
        tt.nodeChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this_1.ins.singleSelect) {
                /** @type {?} */
                var data = null;
                if (e.nodes && e.nodes.length) {
                    data = e.nodes.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                }
                else {
                    if (Array.isArray(e.node)) {
                        data = e.node.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.data; }));
                    }
                    else {
                        data = [e.node.data];
                    }
                }
                _this_1.ins.multiSelMgr.updateSelections(data);
                _this_1.ins.checkedChange.emit({ data: data, isCheck: true });
            }
        }));
        tt.nodeUnChecked.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e && e.node) {
                /** @type {?} */
                var nodeData = null;
                if (e.node.data) {
                    nodeData = e.node.data;
                }
                else {
                    if (e.node.node && e.node.node.data) {
                        nodeData = e.node.node.data;
                    }
                }
                if (!nodeData) {
                    return;
                }
                if (!_this_1.ins.singleSelect) {
                    _this_1.ins.multiSelMgr.remove(e.node.id);
                    // 分层加载，多选，包含下级时，取消勾选 需要将当前节点的所有子级数据也要取消选择，即从已选记录中移除
                    if (tt.loadDataType !== 'all' && _this_1.ins.treeInfo.layerType === 'pathcode' && _this_1.ins.enableCascade &&
                        (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down')) {
                        if (e.node.children && e.node.children.length) {
                            /** @type {?} */
                            var nodes = e.node.children.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.data; }));
                            _this_1.ins.lookupSelectionSer.updateSelections(nodes, false);
                        }
                        else {
                            /** @type {?} */
                            var pathcode = _this_1.ins.getPathCode(nodeData, _this_1.ins.treeInfo);
                            _this_1.ins.lookupSelectionSer.unselectByPathcode(pathcode);
                        }
                    }
                    if (e.nodes && e.nodes.length) {
                        _this_1.ins.multiSelMgr.remove(e.nodes.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.id; })));
                        _this_1.ins.checkedChange.emit({ data: e.nodes.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.data; })), isCheck: false });
                    }
                    else {
                        _this_1.ins.checkedChange.emit({ data: [nodeData], isCheck: false });
                    }
                }
                else {
                    /** @type {?} */
                    var ftt = _this_1.ins.favoritesComponentRef && ((/** @type {?} */ (_this_1.ins.favoritesComponentRef.instance)));
                    if (ftt && ftt.findRowNode(e.node.id)) {
                        ftt.unSelectNode(e.node.id);
                    }
                    _this_1.ins.checkedChange.emit({ data: [nodeData], isCheck: false });
                }
            }
        }));
        tt.checkAll.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var data = e.instance.checkeds.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data; }));
            _this_1.ins.multiSelMgr.updateSelections(data);
            _this_1.ins.checkedChange.emit({ data: data, isCheck: true });
        }));
        tt.unCheckAll.subscribe((/**
         * @return {?}
         */
        function () {
            _this_1.ins.multiSelMgr.clear();
            _this_1.ins.checkedChange.emit({ data: [], isCheck: false });
        }));
        tt.search.subscribe((/**
         * @param {?} searchparam
         * @return {?}
         */
        function (searchparam) {
            if (searchparam.field !== '*' && !searchparam.value) {
                _this_1.ins.messagerService.warning(_this_1.ins.mustWriteSomething);
            }
            else {
                searchparam.value = searchparam.value.trim();
                _searchTreeData(searchparam);
            }
        }));
        if (!tt.cellClick.observers.length) {
            tt.cellClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e.col.field === FAVORITE_FIELD_NAME) {
                    e.event.stopPropagation();
                    // tslint:disable-next-line: no-string-literal
                    /** @type {?} */
                    var classList = e.event.target['classList'];
                    if (classList.contains('f-lookup-favorite')) {
                        // classList.toggle('f-icon-star');
                        // classList.toggle('f-icon-star-outline');
                        /** @type {?} */
                        var _this_2 = _this_1.ins;
                        ((/**
                         * @param {?} arr
                         * @return {?}
                         */
                        function each(arr) {
                            if (arr) {
                                arr.forEach((/**
                                 * @param {?} item
                                 * @return {?}
                                 */
                                function (item) {
                                    /** @type {?} */
                                    var id = _this_2.utils.getValue(_this_2.idField, item.data);
                                    if (id === e.node.id) {
                                        item.data[FAVORITE_FIELD_NAME] = !item.data[FAVORITE_FIELD_NAME];
                                        return true;
                                    }
                                    else if (item.children && item.children.length > 0) {
                                        return each(item.children);
                                    }
                                    else {
                                        return false;
                                    }
                                }));
                            }
                        }))(_this_1.ins.items);
                        tt.loadData(_this_1.ins.items);
                        // 更新收藏数据
                        _this_1.lookupSelectionSer.updateFavoriteData(e.node.data, e.node.data[FAVORITE_FIELD_NAME] ? FavoriteAction.add : FavoriteAction.delete);
                    }
                }
            }));
        }
        tt.dblClick.subscribe((/**
         * @param {?} treeNode
         * @return {?}
         */
        function (treeNode) {
            if (_this_1.ins.gridOptions.singleSelect && treeNode.selectable) {
                if (_this_1.ins.okButton) {
                    // this.lookupSelectionSer.select(treeNode.data);
                    // this.ins.okButton.nativeElement.click();
                    _this_1.ins.selectItem(treeNode.data);
                }
            }
        }));
        /** @type {?} */
        var loadAllData = isLoadAllTreeData();
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            _this_1._sortState = sort;
            if (isLoadAllTreeData()) {
                tt.clientSort();
            }
            else {
                var _a = __assign({}, sort), sortName_1 = _a.sortName, sortOrder = _a.sortOrder;
                /** @type {?} */
                var col = _this_1.ins.columns.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === sortName_1; }));
                /** @type {?} */
                var _sortName = col ? col.fieldPath ? col.fieldPath : col.field : sortName_1;
                /** @type {?} */
                var param = Object.assign({ sortName: _sortName, sortOrder: sortOrder }, { search: _this_1.ins._searchState });
                /** @type {?} */
                var reqTyp = 'all';
                if (_this_1.ins._searchState && _this_1.ins._searchState.value) {
                    reqTyp = 'search';
                }
                _this_1.ins.httpMgr.getData(param, reqTyp).subscribe((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) {
                    _this_1.ins.closeLoading();
                    tt.clearAll();
                    /** @type {?} */
                    var items = _this_1.ins.checkNodeCanBeSelect(d.items, false);
                    if (_this_1.ins.useFavorite) {
                        _this_1.ins.favHelper.updateFavoritesStatus(items);
                    }
                    _this_1.ins.items = items;
                    tt.loadData(items);
                    tt.resize();
                    _this_1.ins.selectionMgr.selectCurrentValue();
                }));
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            if (tt && tt.psRef && tt.psRef.directiveRef) {
                tt.psRef.directiveRef.scrollToTop(0);
            }
            _this_1.ins._searchState = null;
            _this_1.IS_SEARCH_RESULT = false;
            /** @type {?} */
            var _items = [];
            if (_this_1.ins.allData && _this_1.ins.allData.length) {
                _items = _this_1.ins.checkNodeCanBeSelect(_this_1.ins.allData, loadAllData);
            }
            if (!_items || !_items.length) {
                _searchTreeData({ field: '*', value: '' });
            }
            else {
                _this_1.ins.items = _items;
                _this_1.ins.favHelper.updateFavoritesStatus(_this_1.ins.items);
                tt.loadData(_items);
                _this_1.ins.selectionMgr.selectCurrentValue();
            }
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            if (tn.leaf || tn['showLoading']) {
                return;
            }
            if (!tn.children || !tn.children.length) {
                /** @type {?} */
                var treeInfo = _this_1.ins.gridOptions.treeInfo;
                if (isAsyncLoadTreeData() || _this_1.IS_SEARCH_RESULT) {
                    /** @type {?} */
                    var parentPath = '';
                    /** @type {?} */
                    var parentLayer = -1;
                    var _a = __assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
                    tn['showLoading'] = true;
                    tt.detectChanges();
                    if (treeInfo.layerType === 'parentId') {
                        // 父ID加载方式
                        parentPath = tn['id'];
                    }
                    else {
                        /** @type {?} */
                        var treeInfoField = treeInfo.dataField;
                        if (treeInfoField) {
                            // parentPath = tn.data[treeInfoField][treeInfo.pathField];
                            parentPath = _this_1.ins.getPathCode(tn.data, treeInfo);
                            // parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                            parentLayer = _this_1.ins.getLayerData(tn.data, treeInfo);
                        }
                        else {
                            _this_1.ins.writeConsole('未找到分级信息。');
                        }
                    }
                    if (!_this_1.ins.uri) {
                        tn['showLoading'] = false;
                        _this_1.ins.expandTreeNode.emit({
                            instance: tt, node: tn,
                            parentIdOrPath: parentPath, parentLayer: parentLayer, search: { value: value, field: field }
                        });
                        return;
                    }
                    _this_1.ins.showLoading();
                    _this_1.getChildren(parentPath, parentLayer, {
                        searchField: field === '*' ? '*' : field,
                        searchValue: value
                    }).subscribe((/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        _this_1.ins.closeLoading();
                        if (tt) {
                            if (tn && data.items && data.items.length) {
                                if (_this_1.ins.useFavorite) {
                                    // 更新子节点收藏状态
                                    _this_1.ins.favHelper.updateFavoritesStatus(data.items);
                                }
                                /** @type {?} */
                                var nodes = _this_1.ins.checkNodeCanBeSelect(data.items, false);
                                tt.appendChildren(nodes, tn);
                                if (tt.loadDataType !== 'all' && !_this_1.ins.singleSelect && _this_1.ins.isGetAllChidlNodes &&
                                    (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down')) {
                                    /** @type {?} */
                                    var rn = tt.findRowNode(tn.id);
                                    tt.propagateSelectionDown(rn, rn.isChecked);
                                    // 更新选中记录缓存
                                    /** @type {?} */
                                    var _items = data.items.filter((/**
                                     * @param {?} n
                                     * @return {?}
                                     */
                                    function (n) { return !n.addtional; }));
                                    if (_items && _items.length) {
                                        _this_1.ins.lookupSelectionSer.updateSelections(_items.map((/**
                                         * @param {?} n
                                         * @return {?}
                                         */
                                        function (n) { return n.data; })), rn.isChecked);
                                    }
                                }
                            }
                            tn['showLoading'] = false;
                            tt.detectChanges();
                            tt.psRef.directiveRef.update();
                            _this_1.ins.selectionMgr.selectCurrentValue();
                        }
                    }));
                }
            }
            else {
                if (!_this_1.ins.singleSelect && _this_1.ins.enableCascade &&
                    (_this_1.ins.cascadeStatus === 'enable' || _this_1.ins.cascadeStatus === 'down') && _this_1.ins.isGetAllChidlNodes) {
                    /** @type {?} */
                    var rn = tt.findRowNode(tn.id);
                    tt.propagateSelectionDown(rn, rn.isChecked);
                    /** @type {?} */
                    var selectItems = tn.children.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.selectable; })).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                    _this_1.ins.lookupSelectionSer.updateSelections(selectItems, rn.isChecked);
                }
                // this.ins.selectionMgr.selectCurrentValue();
            }
        }));
        if (loadAllData && this.ins.items) {
            this.ins.treeNodeHelper.updateTreeNodeExpanded(this.ins.items);
        }
        return loadAllData;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    TreeTableEventManager.prototype.cascadeValueChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var val = $event;
        // const tt = this.ins.componentRef.instance as TreeTableComponent;
        /** @type {?} */
        var instanceTyp = this.ins.activeTab === 'datalist' ? 'treetable' : 'fav';
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance(instanceTyp)));
        if (!tt) {
            return;
        }
        switch (val) {
            case 'enable':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
            case 'disable':
                tt.cascadeCheck = false;
                tt.cascadeDown = false;
                tt.cascadeUp = false;
                break;
            case 'up':
                tt.cascadeCheck = true;
                tt.cascadeUp = true;
                tt.cascadeDown = false;
                break;
            case 'down':
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = false;
                break;
            default:
                tt.cascadeCheck = true;
                tt.cascadeDown = true;
                tt.cascadeUp = true;
                break;
        }
        this.ins.cascadeStatus = val || 'enable';
        this.ins.personalConf.cascadeStatus = val || 'enable';
    };
    return TreeTableEventManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MultiSelectionManager = /** @class */ (function () {
    function MultiSelectionManager(ins) {
        this.ins = ins;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    MultiSelectionManager.prototype.onSelectedTableCellClick = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e.col.field === FAVORITE_FIELD_NAME) {
            e.event.stopPropagation();
            /** @type {?} */
            var classList = e.event.target['classList'];
            if (classList.contains('f-lookup-unfavorite') || classList.contains('f-icon-minus-circle')) {
                /** @type {?} */
                var rid = e.row[this.ins.idField];
                this.ins.lookupSelectionSer.unSelect(rid);
                // 取消选中 主列表 收藏列表 中的数据
                if (this.ins.isTree()) {
                    /** @type {?} */
                    var tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
                    tt.unCheckedNode(rid);
                    tt.unSelectNode(rid);
                    if (this.ins.useFavorite) {
                        /** @type {?} */
                        var _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                        if (_tt && _tt.data && _tt.data.length && _tt.findRowNode(rid)) {
                            _tt.unCheckedNode(rid);
                            _tt.unSelectNode(rid);
                        }
                    }
                }
                else {
                    /** @type {?} */
                    var dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
                    dt.unCheckRow(rid);
                    if (this.ins.useFavorite) {
                        /** @type {?} */
                        var _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                        if (_dt && _dt.data && _dt.data.length) {
                            _dt.unCheckRow(rid);
                        }
                    }
                }
            }
        }
    };
    /** 初始化已选数据列信息 */
    /**
     * 初始化已选数据列信息
     * @return {?}
     */
    MultiSelectionManager.prototype.initSelectedColumns = /**
     * 初始化已选数据列信息
     * @return {?}
     */
    function () {
        /** @type {?} */
        var selectedColumns = [];
        if (this.ins.showSelected && !this.ins.singleSelect) {
            selectedColumns = cloneDeep(this.ins.gridOptions.columns);
            /** @type {?} */
            var favcol = selectedColumns.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === FAVORITE_FIELD_NAME; }));
            if (favcol) {
                favcol.formatter = (/**
                 * @return {?}
                 */
                function () {
                    return FavoriteIcon.remove;
                });
            }
            else {
                selectedColumns = selectedColumns.concat([
                    { field: FAVORITE_FIELD_NAME, width: 80, formatter: (/**
                         * @return {?}
                         */
                        function () {
                            return FavoriteIcon.remove;
                        })
                    }
                ]);
            }
            this.ins.initColumnWidth(selectedColumns, 'sel');
        }
        return selectedColumns;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiSelectionManager.prototype.updateSelections = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (Array.isArray(data)) {
            this.ins.lookupSelectionSer.updateSelections(data, true);
        }
        else {
            this.ins.lookupSelectionSer.select(data);
        }
    };
    /**
     * @param {?} id
     * @return {?}
     */
    MultiSelectionManager.prototype.remove = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        if (id) {
            this.ins.lookupSelectionSer.unSelect(id);
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    MultiSelectionManager.prototype.deleteSelectedItems = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (!data || !data.length) {
            return;
        }
        this.ins.lookupSelectionSer.updateSelections(data, false);
        if (!this.ins.isShow) {
            return;
        }
        /** @type {?} */
        var ids = data.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[_this.ins.idField]; }));
        if (this.ins.isTree()) {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
            tt && tt.unCheckedAndSelected(ids);
            if (this.ins.useFavorite) {
                /** @type {?} */
                var _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _tt && _tt.unCheckedNodes(ids, true, false);
            }
        }
        else {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
            dt && dt.unCheckRows(ids);
            if (this.ins.useFavorite) {
                /** @type {?} */
                var _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _dt && _dt.unCheckRows(ids);
            }
        }
    };
    /**
     * @return {?}
     */
    MultiSelectionManager.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.ins.lookupSelectionSer.clearSelections();
        if (!this.ins.isShow) {
            return;
        }
        if (this.ins.isTree()) {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('treetable')));
            tt && tt.clearAll();
            if (this.ins.useFavorite) {
                /** @type {?} */
                var _tt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _tt && _tt.clearAll();
            }
        }
        else {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance()));
            dt && dt.clearSelections();
            if (this.ins.useFavorite) {
                /** @type {?} */
                var _dt = (/** @type {?} */ (this.ins.lookupCmpMgr.getComponentInstance('fav')));
                _dt && _dt.clearSelections();
            }
        }
    };
    /**
     * @param {?} rows
     * @return {?}
     */
    MultiSelectionManager.prototype.save = /**
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        if (this.ins.showSelected) {
            this.ins.personalConf.selections = rows;
            this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf);
        }
    };
    /**
     * @return {?}
     */
    MultiSelectionManager.prototype.loadData = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var items = this.ins.personalConf ? (this.ins.personalConf.selections || []) : [];
        if (!items.length) {
            items = this.ins.lookupSelectionSer.getSelections();
        }
        this.ins.lookupSelectionSer.loadSelections(items);
    };
    return MultiSelectionManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 帮助默认个性化数据
/** @type {?} */
var DefaultUserConfig = {
    tabIndex: 'datalist',
    favorite: null,
    size: null
};
var LookupHttpManager = /** @class */ (function () {
    function LookupHttpManager(ins) {
        this.ins = ins;
        // 每次帮助打开后，更新此值，做为个性化数据的初始值；
        // 关闭窗口时，与此进行对比。如果一样，则不保存；
        this._originalPersonalConfig = DefaultUserConfig;
    }
    /**
     * @private
     * @return {?}
     */
    LookupHttpManager.prototype.disablePagination = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            pageIndex: 1,
            pageSize: 500
        };
    };
    /** 构造查询参数 */
    /**
     * 构造查询参数
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    LookupHttpManager.prototype.buildQueryParams = /**
     * 构造查询参数
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        /** @type {?} */
        var params = {};
        if (event.navConditions && event.navConditions.length) {
            if (event.navConditions && event.navConditions.length === 1 && event.navConditions[0].code == '*') {
                event.search = { field: '*', value: event.navConditions[0].value };
            }
            else {
                params.navSearchConditions = event.navConditions;
            }
        }
        if (this.ins.conditions && this.ins.conditions.length && type !== 'fav') {
            params.searchConditions = cloneDeep(this.ins.conditions);
        }
        /** @type {?} */
        var searchParam = { category: type };
        if (type !== 'fav') {
            if (this.ins.isDoublleList() && this.ins.navigationFilter && type !== 'all') {
                if (this.ins.navigationFilter.idValue && type !== 'textchange') {
                    params.relationFilter = __spread(this.ins.navigationFilter.idValue);
                }
            }
        }
        if (event) {
            if (type === 'fav' || type === 'selected') {
                event.pageInfo = this.disablePagination();
            }
            if (event.pageInfo) {
                params.pageIndex = event.pageInfo.pageIndex;
                params.pageSize = event.pageInfo.pageSize;
            }
            if (event.search) {
                /** @type {?} */
                var sfield = event.search.field;
                if (sfield && sfield === '*') {
                    sfield = '*';
                }
                if (event.search.value) {
                    event.search.value = event.search.value.trim();
                }
                searchParam.searchField = sfield;
                searchParam.searchValue = event.search.value;
                searchParam.searchType = event.search.type || 'like';
                if (event.search.value === '' && searchParam.category === 'search' && (!params.searchConditions && !params.navSearchConditions)) {
                    searchParam.category = 'all';
                }
            }
            if (event.sortName) {
                searchParam.sortName = event.sortName;
            }
            if (event.sortOrder) {
                searchParam.sortOrder = event.sortOrder;
            }
            // 分层加载支持设置展开层级
            if (!isNaN(Number(event.expandLevel)) && this.ins.isTree()) {
                // 前端 -1 不展开   0 全展开
                // 后端  0 不展开  -1 全展开
                if (event.expandLevel) {
                    if (event.expandLevel === -1) {
                        event.expandLevel = 0;
                    }
                }
                else {
                    event.expandLevel = -1;
                }
                searchParam['layerNum'] = event.expandLevel;
            }
        }
        if (type === 'fav' && event.favoriteIds) {
            searchParam.favoriteIds = event.favoriteIds;
        }
        if (this.ins.isTree() || this.ins.displayType === LookupGridDisplayType.NavTreeList) {
            params.enableFullTree = this.ins.enableFullTree;
        }
        params.treeToList = this.ins.treeToList;
        params.navTreeToList = this.ins.navTreeToList;
        // 查询时不构造完整树
        if (type === 'textchange') {
            params.enableFullTree = false;
        }
        if (type === 'selected') {
            searchParam.category = 'fav';
            params.enableFullTree = false;
            searchParam.favoriteIds = event.favoriteIds;
        }
        params.searchValue = JSON.stringify(searchParam);
        params.loadTreeDataType = this.ins.loadTreeDataType;
        params.customData = this.ins.customData;
        if (this.ins.helpId) {
            params.helpId = this.ins.helpId;
        }
        if (event.selectedInfo) {
            params.selectedInfo = event.selectedInfo;
        }
        if (event.navNodePathCode !== undefined) {
            params.navPathCode = event.navNodePathCode;
        }
        else {
            if (type === 'navAllChildren') {
                if (this.ins.includeSubordinates && this.ins['navNodePathCode']) {
                    params.navPathCode = this.ins['navNodePathCode'];
                }
            }
        }
        return params;
    };
    /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    LookupHttpManager.prototype.getData = /**
     * @param {?=} event
     * @param {?=} type
     * @return {?}
     */
    function (event, type) {
        if (type === void 0) { type = 'all'; }
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        if (this.ins.isDoublleList() && this.ins.navigationFilter && this.ins.navigationFilter.idValue && type !== 'fav') {
            if (this.ins.includeSubordinates && this.ins.navigationOptions.treeInfo.loadDataType === 'async') {
                type = 'navAllChildren';
            }
            else {
                type = 'list';
            }
        }
        /** @type {?} */
        var params = this.buildQueryParams(event, type);
        if (uri || this.ins.beUri) {
            if (this.ins.beUri && this.ins.columns && this.ins.columns.length) {
                /** @type {?} */
                var allSearchFields = this.ins.columns.map((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.searchField; })).filter((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return f; }));
                if (!params.condition) {
                    params.condition = {};
                }
                if (!this.ins.isTree() && this.ins.pagination) {
                    var _a = __assign({}, params), _b = _a.pageSize, pageSize = _b === void 0 ? this.ins.pageSize || 20 : _b, pageIndex = _a.pageIndex;
                    params.condition.pagination = { pageSize: pageSize, pageIndex: pageIndex };
                }
                else {
                    params.condition.pagination = { isUsePagination: false };
                }
                /** @type {?} */
                var searchParam = JSON.parse(params.searchValue);
                if (searchParam.searchValue) {
                    params.condition = this.ins.lookupUtils.mergeCondition(params.condition, allSearchFields, {
                        field: searchParam.searchField,
                        value: searchParam.searchValue
                    });
                }
            }
            /** @type {?} */
            var _uri = this.ins.beUri || uri;
            if (this.ins.http) {
                this.ins.http.context = this.ins.context;
            }
            if (this.ins._searchResult) {
                return of(this.ins._searchResult);
            }
            if (type !== 'allChildren') {
                return this.ins.http.getData(_uri, params);
            }
            else {
                /** @type {?} */
                var params1 = {
                    searchValue: JSON.stringify({ category: type }),
                    parentsIds: event.parentsIds,
                    customData: params.customData,
                    helpId: params.helpId
                };
                return this.ins.http.getData(_uri, params1);
            }
        }
        else {
            return of(false);
        }
    };
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    /**
     * @param {?} selIds
     * @return {?}
     */
    LookupHttpManager.prototype.getSelecedItems = 
    // getFavoriteData(params) {
    //     return this.getData(params, 'fav');
    // }
    /**
     * @param {?} selIds
     * @return {?}
     */
    function (selIds) {
        return this.getData({ favoriteIds: selIds }, 'selected');
    };
    /**
     * @return {?}
     */
    LookupHttpManager.prototype.getPersonalConfig = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var defaultConf = cloneDeep(DefaultUserConfig);
        // if (this.ins.customData) {
        //     const wrapKeyData = JSON.stringify({ key: this.ins.customData });
        //     const configKeyString = this.ins.getLookupBindingFields() + wrapKeyData;
        //     this.ins.personalConfigService.personalConfigKey = configKeyString;
        // }
        /** @type {?} */
        var key = this.ins.personalConfigService._newKey;
        /** @type {?} */
        var _conf = this.ins.personalConfigService.getPersonalData(key);
        if (!_conf || !Object.keys(_conf).length) {
            _conf = defaultConf;
        }
        /** @type {?} */
        var req = of(_conf);
        if (this.ins.favoriteDataFrom === 'locale' || this.ins.isTabChanged) {
            return req;
        }
        if (this.ins.http && this.ins.http['getUserSettings']) {
            return this.ins.http['getUserSettings'](key).pipe(tap((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r && r.textValue) {
                    localStorage.setItem(key, r.textValue);
                }
                else {
                    localStorage.setItem(key, JSON.stringify(defaultConf));
                }
            })), map((/**
             * @param {?} ucs
             * @return {?}
             */
            function (ucs) {
                if (ucs) {
                    return ucs.textValue ? JSON.parse(ucs.textValue) : defaultConf;
                }
                return defaultConf;
            })));
        }
        else {
            return req;
        }
    };
    /**
     * @param {?=} event
     * @param {?=} type
     * @param {?=} isQuickSelect
     * @return {?}
     */
    LookupHttpManager.prototype.lookupRequest = /**
     * @param {?=} event
     * @param {?=} type
     * @param {?=} isQuickSelect
     * @return {?}
     */
    function (event, type, isQuickSelect) {
        var _this = this;
        if (type === void 0) { type = 'all'; }
        if (isQuickSelect === void 0) { isQuickSelect = false; }
        if (!this.ins.usePersionalConf || isQuickSelect) {
            return this.getData(event, type);
        }
        /** @type {?} */
        var req = this.getPersonalConfig();
        return req.pipe(tap((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            _this.ins.personalConf = c;
            _this.ins.personalConfigService.savePersonalConfig(c);
            if (!_this.ins.isTabChanged) {
                _this._originalPersonalConfig = cloneDeep(c);
            }
        })), switchMap((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            var tabIndex = c.tabIndex, favorite = c.favorite, size = c.size, cascadeStatus = c.cascadeStatus;
            if (!_this.ins.isTabChanged) {
                _this.ins.activeTab = tabIndex || 'datalist';
            }
            if (size) {
                _this.ins.dialogWidth = size.width;
                _this.ins.dialogHeight = size.height;
                if (!_this.ins.isTabChanged) {
                    _this.ins.dialog.reSize({ width: size.width, height: size.height });
                }
            }
            if (_this.ins.cascadeStatus) {
                if (cascadeStatus && _this.ins.enableCascade && _this.ins.showCascadeControl) {
                    _this.ins.cascadeStatus = cascadeStatus;
                }
                if (_this.ins.cascadeItems) {
                    /** @type {?} */
                    var keys = ['enable', 'up', 'down', 'disable'];
                    keys.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        if (_this.ins.cascadeItems[n] === undefined) {
                            _this.ins.cascadeItems[n] = true;
                        }
                    }));
                    if (!_this.ins.cascadeItems[_this.ins.cascadeStatus]) {
                        /** @type {?} */
                        var keys_1 = Object.keys(_this.ins.cascadeItems).map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return _this.ins.cascadeItems[n] ? n : '';
                        })).filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n; }));
                        _this.ins.cascadeStatus = (/** @type {?} */ (keys_1[0]));
                    }
                }
            }
            if (_this.ins.activeTab === 'datalist') {
                return _this.getData(event, type);
            }
            else if (_this.ins.activeTab === 'favorite') {
                /** @type {?} */
                var favIds = favorite ? favorite[_this.ins.localService.localeId] : [];
                if ((!favIds || !favIds.length) && !_this.ins.isTabChanged) {
                    return _this.getData(event, 'all').pipe(map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        if (r && !r.items) {
                            r.items = [];
                        }
                        r.activeTab = 'datalist';
                        return r;
                    })));
                }
                // const _fids = favIds.filter(n => n);
                event.favoriteIds = favIds;
                event.search = null;
                return _this.getData(event, 'fav').pipe(switchMap((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    /** @type {?} */
                    var items = r ? r.items || [] : [];
                    // 加入数据权限后，没有返回数据且第1次打开窗口，非手动点击收藏标签时
                    if (!items.length && !_this.ins.isTabChanged) {
                        return _this.getData(event, 'all').pipe(map((/**
                         * @param {?} a
                         * @return {?}
                         */
                        function (a) {
                            if (a && !a.items) {
                                a.items = [];
                            }
                            a.activeTab = 'datalist';
                            return a;
                        })));
                    }
                    else {
                        return of(r);
                    }
                })));
            }
            else if (_this.ins.activeTab === 'selected') {
                /** @type {?} */
                var selIds = _this.ins.displayValue ? _this.ins.displayValue.split(',') : [];
                /** @type {?} */
                var _sids = selIds.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                return _this.getSelecedItems(_sids);
            }
        })));
    };
    // 保存个性化数据
    // 保存个性化数据
    /**
     * @param {?} action
     * @return {?}
     */
    LookupHttpManager.prototype.submitFavoriteData = 
    // 保存个性化数据
    /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        // 保存列宽度
        this.ins.personalConf.colSizeInfo = this.getColumnSizeInfo();
        // 如果数据与默认的数据一至则不保存。
        if (JSON.stringify(this.ins.personalConf) === JSON.stringify(this._originalPersonalConfig)) {
            return;
        }
        /** @type {?} */
        var msg = '';
        if (action === FavoriteAction.add) {
            msg = this.ins.addFavoriteSuccess;
        }
        else if (action === FavoriteAction.delete) {
            msg = this.ins.delFavoriteSuccess;
        }
        // 更新本地缓存
        localStorage.setItem(this.ins.personalConfigService._newKey, JSON.stringify(this.ins.personalConf));
        this.ins.personalConfigService.savePersonalConfig(this.ins.personalConf || {});
        if (this.ins.favoriteDataFrom !== 'locale') {
            this._originalPersonalConfig = cloneDeep(this.ins.personalConf);
            /** @type {?} */
            var configData = {
                configkey1: this.ins.personalConfigService.personalConfigKey,
                configkey2: '',
                configkey3: '',
                textvalue: JSON.stringify(this.ins.personalConf)
            };
            if (this.ins.http && this.ins.http['saveUserSettings']) {
                this.ins.savingFaoriteData = true;
                this.ins.showLoading();
                return this.ins.http['saveUserSettings'](configData).subscribe((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    _this.ins.savingFaoriteData = false;
                    _this.ins.closeLoading();
                    if (msg) {
                        _this.ins.notifyService.success(msg);
                    }
                }));
            }
            else {
                if (msg) {
                    this.ins.notifyService.success(msg);
                }
            }
        }
        else {
            if (msg) {
                this.ins.notifyService.success(msg);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupHttpManager.prototype.getColumnSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var colSizeInfo = { data: {}, nav: {}, fav: {}, sel: {} };
        colSizeInfo.data = this.ins.columns.filter((/**
         * @param {?} c
         * @return {?}
         */
        function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
         * @param {?} r
         * @param {?} n
         * @return {?}
         */
        function (r, n) {
            r[n.field] = n.width;
            return r;
        }), {});
        if (this.ins.favoriteColumns && this.ins.favoriteColumns.length) {
            colSizeInfo.fav = this.ins.favoriteColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.navigationOptions && this.ins.navigationOptions.columns && this.ins.navigationOptions.columns.length) {
            colSizeInfo.nav = this.ins.navigationOptions.columns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        if (this.ins.selectedColumns && this.ins.selectedColumns.length && this.ins.showSelected) {
            colSizeInfo.sel = this.ins.selectedColumns.filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.field !== FAVORITE_FIELD_NAME; })).reduce((/**
             * @param {?} r
             * @param {?} n
             * @return {?}
             */
            function (r, n) {
                r[n.field] = n.width;
                return r;
            }), {});
        }
        return colSizeInfo;
    };
    return LookupHttpManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupLeftComponent = /** @class */ (function () {
    function LookupLeftComponent(cfr, cd) {
        this.cfr = cfr;
        this.cd = cd;
        this.navConditions = [];
        this.selected = new EventEmitter();
        this.unselected = new EventEmitter();
        this.search = new EventEmitter();
        this.pageChanged = new EventEmitter();
        this._searchState = null;
        this._sortState = null;
        this.allData = null;
    }
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lookupCmp && this.isTreeList()) {
            this.lookupCmp.includeSubordinates$$ = this.lookupCmp.includeSubordinates$.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (_this.cmpRef) {
                    /** @type {?} */
                    var tt = (/** @type {?} */ (_this.cmpRef.instance));
                    if (tt.selectedRow) {
                        _this.selected.emit({ data: tt.selectedRow.data, node: tt.selectedRow });
                    }
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._searchState = null;
        this._sortState = null;
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.updateScrollPosition = /**
     * @return {?}
     */
    function () {
        if (this.isTreeList()) {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.cmpRef.instance));
            if (tt && tt.state.scrollY != tt.psRef.directiveRef.elementRef.nativeElement.scrolltop) {
                tt.psRef.directiveRef.scrollToY(tt.state.scrollY);
            }
        }
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.createComponent = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dtFac = null;
        if (!this.isTreeList()) {
            dtFac = this.cfr.resolveComponentFactory(DataTableComponent);
        }
        else {
            this.navOptions['fitColumns'] = false;
            this.navOptions['autoFitColumns'] = true;
            dtFac = this.cfr.resolveComponentFactory(TreeTableComponent);
        }
        this.navOptions['keepSelect'] = false;
        // 左侧查询过滤条，隐藏掉；
        this.navOptions['showFilterBar'] = this.lookupCmp.enableMultiFieldSearch ? false : this.lookupCmp.showFilterBar;
        this.navOptions.width = this.lookupCmp.leftPanelWidth;
        this.cmpRef = this.cmpContainer.createComponent(dtFac);
        if (!this.isTreeList()) {
            this.navOptions.width -= 2;
            this.navOptions['fill'] = true;
            this.cmpRef.instance.maxSize = 5;
            this.cmpRef.instance.fill = true;
            this.cmpRef.instance.autoFitColumns = true;
        }
        else {
            this.navOptions['fit'] = true;
        }
        // this.cmpRef.instance.fit = true;
        if (this.navOptions.pageInfo) {
            if (this.navOptions.pageInfo.pageList) {
                this.navOptions.pageList = this.navOptions.pageInfo.pageList;
            }
            this.navOptions.pagination = this.navOptions.pageInfo.enablePager;
            this.navOptions.pageIndex = this.navOptions.pageInfo.pageIndex;
            this.navOptions.pageSize = this.navOptions.pageInfo.pageSize;
        }
        else {
            this.navOptions.pagination = false;
        }
        Object.assign(this.cmpRef.instance, this.navOptions);
        this.loadData();
        return of(this.cmpRef);
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.cd.detectChanges();
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    LookupLeftComponent.prototype.resize = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        if (size) {
            var width = size.width, height = size.height;
            /** @type {?} */
            var _width = width - 2;
            this.navOptions.width = _width;
            this.navOptions.height = height;
            /** @type {?} */
            var _height = height - this.lookupCmp.getFilterBarHeight();
            this.cmpRef.instance.resize({ width: _width, height: _height });
        }
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.isTreeList = /**
     * @return {?}
     */
    function () {
        return this.navOptions.displayType.toLowerCase() === 'treelist' && !this.lookupCmp.navTreeToList;
    };
    /**
     * @private
     * @param {?} items
     * @param {?} dt
     * @return {?}
     */
    LookupLeftComponent.prototype.selectLeftDataTableRow = /**
     * @private
     * @param {?} items
     * @param {?} dt
     * @return {?}
     */
    function (items, dt) {
        var _this = this;
        if (items && items.length) {
            /** @type {?} */
            var item = null;
            if (this.lookupCmp.navSelectedIds) {
                item = items.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[dt.idField] == _this.lookupCmp.navSelectedIds; }));
            }
            else {
                if (this.lookupCmp.selectFirstInNav) {
                    item = items[0];
                }
            }
            if (item) {
                dt.dtBody.selectedRowIndex = -1;
                dt.dtBody.selectedRow('', 0, item);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupLeftComponent.prototype.closeLoading = /**
     * @private
     * @return {?}
     */
    function () {
        this.lookupCmp.closeLoading();
    };
    /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    LookupLeftComponent.prototype.initDataTable = /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    function (dt) {
        var _this = this;
        dt.loadData({
            pageSize: this.navOptions.pageSize,
            pageIndex: this.navOptions.pageIndex,
            total: this.navOptions.total,
            data: this.navOptions.items,
        });
        var _a = this.navOptions, width = _a.width, height = _a.height;
        // dt.resize({ width: 320, height: this.navOptions.height});
        dt.resize({ width: width, height: height - this.lookupCmp.getFilterBarHeight() });
        // 行选中
        dt.selectedRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit({ data: d.data });
        }));
        dt.unSelectRow.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit(null);
        }));
        /** @type {?} */
        var loadTableData = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.closeLoading();
                dataTableReLoad(data);
                var _a = _this.navOptions, width = _a.width, height = _a.height;
                _this.cmpRef.instance.resize({ width: width, height: height - _this.lookupCmp.getFilterBarHeight() });
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
            })
        };
        // 查询
        dt.search.subscribe((/**
         * @param {?} searchData
         * @return {?}
         */
        function (searchData) {
            /** @type {?} */
            var p = { pageInfo: { pageIndex: 1, pageSize: _this.navOptions.pageSize }, search: '', navConditions: _this.navConditions };
            _this._searchState = searchData;
            _this.search.emit(searchData);
            p.search = searchData;
            p.pageInfo.pageSize = dt.pageSize;
            _this.lookupCmp.navigationFilter = null;
            if (_this._sortState && _this._sortState.sortName) {
                p['sortName'] = _this._sortState.sortName;
                p['sortOrder'] = _this._sortState.sortOrder;
            }
            else {
                delete p['sortName'];
                delete p['sortOrder'];
            }
            _this.lookupCmp.httpMgr.getData(p, 'navsearch').pipe(filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }))).subscribe(loadTableData);
        }));
        /** @type {?} */
        var dataTableReLoad = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            dt.loadData({
                pageSize: data.pageInfo.pageSize,
                pageIndex: data.pageInfo.pageIndex,
                total: data.total,
                data: data.items,
            });
            _this.selectLeftDataTableRow(data.items, dt);
            dt.cd.markForCheck();
        });
        // 分页
        dt.pageChanged.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.pageChanged.emit(d);
            _this.lookupCmp.navigationFilter = null;
            d.navConditions = _this.navConditions || [];
            _this.lookupCmp.httpMgr.getData(d, 'navsearch').subscribe(loadTableData);
        }));
        dt.pageSizeChanged.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.lookupCmp.navigationFilter = null;
            e.navConditions = _this.navConditions || [];
            _this.lookupCmp.httpMgr.getData(e, 'navsearch').subscribe(loadTableData);
        }));
        dt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            var _a = __assign({}, sort), sortName = _a.sortName, sortOrder = _a.sortOrder;
            _this._sortState = sort;
            _this.lookupCmp.navigationFilter = null;
            /** @type {?} */
            var param = {
                sortName: sortName,
                sortOrder: sortOrder,
                search: _this._searchState,
                pageInfo: {
                    pageSize: dt.pageSize,
                    pageIndex: 1
                },
                navConditions: _this.navConditions || []
            };
            _this.lookupCmp.httpMgr.getData(param, 'navsearch').subscribe(loadTableData);
        }));
        dt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            _this._searchState = null;
            dt.search.emit(null);
        }));
        this.selectLeftDataTableRow(this.navOptions.items, dt);
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    LookupLeftComponent.prototype.buildParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var p = __assign({}, params, { treeToList: this.lookupCmp.treeToList, navTreeToList: this.lookupCmp.navTreeToList, navConditions: this.navConditions || [] });
        return p;
    };
    /**
     * @private
     * @param {?} tt
     * @return {?}
     */
    LookupLeftComponent.prototype.initTreeTable = /**
     * @private
     * @param {?} tt
     * @return {?}
     */
    function (tt) {
        var _this = this;
        tt.virtualized = true;
        tt.fast = true;
        tt.nodeSelected.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit({ data: d.node.data, node: d.node });
        }));
        tt.nodeUnSelect.subscribe((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            _this.selected.emit(null);
        }));
        tt.fixedHeader = true;
        if (this.navOptions.treeInfo.loadDataType === 'all') { // 分层加载不支持取数时配置展开层级
            this.lookupCmp.treeNodeHelper.updateTreeNodeExpanded(this.navOptions.items, this.navOptions.treeInfo);
        }
        tt.loadDataType = this.navOptions.treeInfo.loadDataType;
        // 检查完整树过滤条件 By Lucas 20200302
        this.navOptions.items = this.lookupCmp.checkNodeCanBeSelect(this.navOptions.items, this.navOptions.treeInfo.loadDataType === 'all');
        tt.loadData(this.navOptions.items);
        if (this.lookupCmp.navSelectedIds) {
            tt.selectNode(this.lookupCmp.navSelectedIds);
        }
        else if (this.lookupCmp.selectFirstInNav) {
            tt.selectFirstNode();
        }
        this.allData = this.navOptions.items;
        /** @type {?} */
        var loadTreeData = {
            next: (/**
             * @param {?} resData
             * @return {?}
             */
            function (resData) {
                _this.closeLoading();
                tt.psRef.directiveRef.scrollToTop(0);
                tt.clearAll();
                /** @type {?} */
                var items = _this.lookupCmp.checkNodeCanBeSelect(resData.items, _this.navOptions.treeInfo.loadDataType === 'all' && (!_this._searchState || !_this._searchState.value));
                if (items && items.length && items[0].children && items[0].children.length) {
                    items[0].expanded = true;
                    items[0].children = _this.lookupCmp.expandFirstNode(items[0].children);
                }
                tt.loadData(items);
                tt.resize();
                _this.selected.emit(null);
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.closeLoading();
            })
        };
        tt.search.subscribe((/**
         * @param {?} search
         * @return {?}
         */
        function (search) {
            _this._searchState = search;
            _this.lookupCmp.navigationFilter = null;
            /** @type {?} */
            var p = _this.buildParams({ search: search });
            if (_this._sortState && _this._sortState.sortName) {
                p['sortName'] = _this._sortState.sortName;
                p['sortOrder'] = _this._sortState.sortOrder;
            }
            _this.lookupCmp.httpMgr.getData(p, 'navsearch').subscribe(loadTreeData);
        }));
        tt.columnSorted.subscribe((/**
         * @param {?} sort
         * @return {?}
         */
        function (sort) {
            _this.lookupCmp.navigationFilter = null;
            if (tt.loadDataType === 'all') {
                tt.clientSort();
            }
            else {
                var _a = __assign({}, sort), sortName_1 = _a.sortName, sortOrder = _a.sortOrder;
                /** @type {?} */
                var sortCol = _this.navOptions.columns.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.field === sortName_1; }));
                if (sortCol) {
                    sortName_1 = sortCol['fieldPath'];
                }
                _this._sortState = { sortName: sortName_1, sortOrder: sortOrder };
                // const param = Object.assign({ sortName, sortOrder }, this._searchState);
                /** @type {?} */
                var param = _this.buildParams({ sortName: sortName_1, sortOrder: sortOrder, search: _this._searchState });
                /** @type {?} */
                var requestType = 'nav';
                if ((_this._searchState && _this._searchState.value) || (param && param.navConditions && param.navConditions.length)) {
                    requestType = 'navsearch';
                }
                _this.lookupCmp.httpMgr.getData(param, requestType).subscribe(loadTreeData);
            }
        }));
        tt.clearSearchValue.subscribe((/**
         * @return {?}
         */
        function () {
            _this._searchState = null;
            if (!_this._sortState || !_this._sortState.sortName) {
                tt.loadData(_this.allData);
                if (!tt.selectedRow) {
                    _this.selected.emit(null);
                }
            }
            else {
                /** @type {?} */
                var p = _this.buildParams({});
                _this.lookupCmp.navigationFilter = null;
                if (_this._sortState && _this._sortState.sortName) {
                    p['sortName'] = _this._sortState.sortName;
                    p['sortOrder'] = _this._sortState.sortOrder;
                }
                _this.lookupCmp.httpMgr.getData(p, 'nav').subscribe(loadTreeData);
            }
        }));
        tt.expand.subscribe((/**
         * @param {?} tn
         * @return {?}
         */
        function (tn) {
            _this.onNodeExpanded(tn, tt);
        }));
    };
    /**
     * @private
     * @param {?} tn
     * @param {?} tt
     * @return {?}
     */
    LookupLeftComponent.prototype.onNodeExpanded = /**
     * @private
     * @param {?} tn
     * @param {?} tt
     * @return {?}
     */
    function (tn, tt) {
        var _this = this;
        if (tn.leaf) {
            return;
        }
        if (!tn.children || !tn.children.length) {
            /** @type {?} */
            var treeInfo = this.navOptions.treeInfo;
            if (this.navOptions.treeInfo.loadDataType === 'async') {
                /** @type {?} */
                var parentPath_1 = '';
                /** @type {?} */
                var parentLayer_1 = -1;
                var _a = __assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
                tn['showLoading'] = true;
                tt.detectChanges();
                if (treeInfo.layerType === 'parentId') {
                    // 父ID加载方式
                    parentPath_1 = tn['id'];
                }
                else {
                    /** @type {?} */
                    var treeInfoField = treeInfo.dataField;
                    if (treeInfoField) {
                        // parentPath = tn.data[treeInfoField][treeInfo.pathField];
                        // parentLayer = tn.data[treeInfoField][treeInfo.layerField];
                        parentPath_1 = this.lookupCmp.getPathCode(tn.data, treeInfo);
                        parentLayer_1 = this.lookupCmp.getLayerData(tn.data, treeInfo);
                    }
                    else {
                        console.log('未找到分级信息。');
                    }
                }
                if (!this.lookupCmp.uri) {
                    this.lookupCmp.expandTreeNode.emit({
                        instance: tt, node: tn,
                        parentIdOrPath: parentPath_1, parentLayer: parentLayer_1, search: { value: value, field: field }
                    });
                    return;
                }
                this.getChildren(parentPath_1, parentLayer_1, { searchField: field === '*' ? '*' : field, searchValue: value }, tt).pipe(switchMap((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (data && data.items && data.items.length) {
                        return of(data);
                    }
                    else {
                        return _this.getChildren(parentPath_1, parentLayer_1, { searchField: '*', searchValue: '' }, tt, true);
                    }
                }))).subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    if (tt) {
                        if (tn && data.items && data.items.length) {
                            tt.appendChildren(data.items, tn);
                        }
                        tn['showLoading'] = false;
                        tt.detectChanges();
                    }
                }));
            }
        }
    };
    /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @param {?} tt
     * @param {?=} all
     * @return {?}
     */
    LookupLeftComponent.prototype.getChildren = /**
     * @private
     * @param {?} parentPath
     * @param {?} parentLayer
     * @param {?} searchData
     * @param {?} tt
     * @param {?=} all
     * @return {?}
     */
    function (parentPath, parentLayer, searchData, tt, all) {
        if (all === void 0) { all = false; }
        /** @type {?} */
        var uri = this.lookupCmp.gridOptions.uri;
        /** @type {?} */
        var search = __assign({ parentLayer: parentLayer, category: 'navchildren' }, searchData);
        if (this.navOptions.treeInfo.layerType === 'parentId') {
            search['parentId'] = parentPath;
        }
        else {
            search['parentPath'] = parentPath;
        }
        /** @type {?} */
        var param = this.buildParams({
            searchValue: JSON.stringify(search),
            customData: this.lookupCmp.customData,
            enableFullTree: false,
            loadTreeDataType: 'layerload',
        });
        if (this.lookupCmp.helpId) {
            param['helpId'] = this.lookupCmp.helpId;
        }
        if (tt && tt.sortName) {
            /** @type {?} */
            var sortName = tt.sortName;
            /** @type {?} */
            var sortCol = this.navOptions.columns.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.field === tt.sortName; }));
            if (sortCol) {
                sortName = sortCol['fieldPath'];
            }
            search['sortName'] = sortName;
            search['sortOrder'] = tt.sortOrder;
            param.searchValue = JSON.stringify(search);
        }
        if (this.navConditions && this.navConditions.length && !all) {
            param.navSearchConditions = this.navConditions;
        }
        delete param.navConditions;
        return this.lookupCmp.http.getData(uri, param);
    };
    /**
     * @return {?}
     */
    LookupLeftComponent.prototype.loadData = /**
     * @return {?}
     */
    function () {
        this.cmpRef.instance.allColumnsTitle = this.lookupCmp.allColumnsTitle;
        if (!this.isTreeList()) {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.cmpRef.instance));
            this.initDataTable(dt);
        }
        else {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.cmpRef.instance));
            this.initTreeTable(tt);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupLeftComponent.prototype.onConditionsChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.navConditions = $event;
        if (this.isTreeList()) {
            /** @type {?} */
            var tt = (/** @type {?} */ (this.cmpRef.instance));
            tt.search.emit();
        }
        else {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.cmpRef.instance));
            dt.search.emit();
        }
    };
    LookupLeftComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lookup-left',
                    template: "<div style=\"height: 100%;position: relative;width: calc(100% - 2px)\" class=\"d-flex flex-column\">\r\n    <div class=\"lookup-filter-bar\" [viewType]=\"'onlyinput'\"\r\n    lookup-filter-bar *ngIf=\"lookupCmp?.enableMultiFieldSearch && lookupCmp?.showFilterBar\"\r\n    [columns]=\"navOptions?.columns\" [searchFields]=\"navOptions?.searchFields\" [isNav]=\"true\"\r\n    (conditionsChange)=\"onConditionsChange($event)\"></div>\r\n    <div class=\"h-100 w-100 f-utils-fill\" style=\"position: relative;\">\r\n        <ng-container #container></ng-container>\r\n    </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    LookupLeftComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: ChangeDetectorRef }
    ]; };
    LookupLeftComponent.propDecorators = {
        cmpContainer: [{ type: ViewChild, args: ['container', { read: ViewContainerRef },] }],
        selected: [{ type: Output }],
        unselected: [{ type: Output }],
        search: [{ type: Output }],
        pageChanged: [{ type: Output }]
    };
    return LookupLeftComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupComponentManager = /** @class */ (function () {
    function LookupComponentManager(ins) {
        this.ins = ins;
    }
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.getComponentInstance = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        if (!this.ins.componentRef || !this.ins.componentRef.instance) {
            return null;
        }
        if (type === 'selected') {
            return this.ins.selectedDtRef;
        }
        /** @type {?} */
        var ins = this.ins.componentRef.instance;
        if (type === 'leftDataTable' || type === 'leftTree') {
            /** @type {?} */
            var leftRef = this.ins.leftComponentRef;
            if (!leftRef || !leftRef.instance || !leftRef.instance.cmpRef || !leftRef.instance.cmpRef.instance) {
                return null;
            }
            ins = this.ins.leftComponentRef.instance.cmpRef.instance;
        }
        if (type === 'fav') {
            ins = this.ins.favoritesComponentRef.instance;
        }
        switch (type) {
            case 'leftDataTable':
            case 'fav':
            case 'datatable':
                return (/** @type {?} */ (ins));
            case 'leftTree':
            case 'treetable':
                return (/** @type {?} */ (ins));
            default:
                if (this.ins.isTree()) {
                    return (/** @type {?} */ (ins));
                }
                return (/** @type {?} */ (ins));
        }
    };
    /**
     * @param {?} data
     * @return {?}
     */
    LookupComponentManager.prototype.createComponentWithServerData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        if (this.ins.componentRef) {
            return;
        }
        this.ins.idField = data.idField || this.ins.idField;
        this.ins.textField = data.textField || this.ins.textField;
        this.ins.valueField = data.valueField || this.ins.valueField;
        this.ins.displayType = (data && data.displayType) || this.ins.displayType || 'LIST';
        /** @type {?} */
        var dtyp = this.ins.displayType.toUpperCase();
        if (this.ins.isDoublleList()) {
            if (this.ins.navTreeToList && dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.NavListTree) {
                    this.ins.displayType = LookupGridDisplayType.NavList;
                }
            }
        }
        else {
            if (this.ins.treeToList) {
                if (dtyp === LookupGridDisplayType.TreeList) {
                    this.ins.displayType = 'LIST';
                }
                else {
                    if (dtyp === LookupGridDisplayType.NavListTree) {
                        this.ins.displayType = LookupGridDisplayType.NavList;
                    }
                }
            }
        }
        if (this.ins.isDoublleList() && this.ins.navTreeToList) {
            if (dtyp === LookupGridDisplayType.NavTreeList) {
                this.ins.displayType = LookupGridDisplayType.NavList;
            }
        }
        this.ins.changeDetector.detectChanges();
        this.ins.componentRef = this.createContent(this.ins.gridOptions);
        this.createFavoriteComponent();
        this.resizeComponent();
    };
    /**
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoriteComponent = /**
     * @return {?}
     */
    function () {
        if (this.ins.useFavorite && !this.ins.favoritesComponentRef) {
            this.ins.favoriteColumns = this.ins.favHelper.getFavoriteColumns();
            /** @type {?} */
            var favoritesOptions = Object.assign({}, this.ins.gridOptions, {
                showFilterBar: false,
                pagination: false,
                columns: this.ins.favoriteColumns || []
            });
            this.ins.favoritesComponentRef = this.createFavoritesContent(favoritesOptions);
            this.resizeComponent('fav');
        }
    };
    /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    LookupComponentManager.prototype.reloadTreeDataForExpand = /**
     * @private
     * @param {?} expandLevel
     * @return {?}
     */
    function (expandLevel) {
        var _this = this;
        /** @type {?} */
        var uri = this.ins.gridOptions.uri;
        /** @type {?} */
        var tt = (/** @type {?} */ (this.ins.componentRef.instance));
        var _a = __assign({}, tt.searchData), _b = _a.field, field = _b === void 0 ? '*' : _b, _c = _a.value, value = _c === void 0 ? '' : _c;
        /** @type {?} */
        var search = { category: 'all', searchValue: value, searchField: field, layerNum: expandLevel };
        /** @type {?} */
        var param = {
            searchValue: JSON.stringify(search),
            customData: this.ins.customData,
            enableFullTree: this.ins.enableFullTree,
            loadTreeDataType: this.ins.loadTreeDataType
        };
        if (this.ins.helpId) {
            param['helpId'] = this.ins.helpId;
        }
        if (tt && tt.sortName) {
            Object.assign(param, {
                sortName: tt.sortName,
                sortOrder: tt.sortOrder
            });
        }
        this.ins.showLoading();
        return this.ins.http.getData(uri, param).subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.ins.closeLoading();
            /** @type {?} */
            var nodes = _this.ins.checkNodeCanBeSelect(data.items, expandLevel === -1);
            _this.ins.items = nodes;
            tt.loadData(nodes);
            tt.psRef.directiveRef.scrollToTop(0);
        }));
    };
    /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    LookupComponentManager.prototype.setTreeNodeExpandBy = /**
     * @private
     * @param {?} nodes
     * @param {?} level
     * @return {?}
     */
    function (nodes, level) {
        var _this = this;
        if (!nodes || !nodes.length) {
            return;
        }
        nodes.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var layer = n.data[_this.ins.treeInfo.dataField].layer;
            /** @type {?} */
            var expandLayer = layer + level - 1;
            n.expanded = layer <= expandLayer ? true : n.expanded;
            if (n.children && n.children.length && layer + 1 <= expandLayer) {
                _this.setTreeNodeExpandBy(n.children, level);
            }
        }));
    };
    // 启用树帮助右键菜单功能
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    LookupComponentManager.prototype.useContextMenuForTree = 
    // 启用树帮助右键菜单功能
    /**
     * @private
     * @param {?} cmpRef
     * @return {?}
     */
    function (cmpRef) {
        var _this = this;
        var _a = this.ins.treeTableOptions, maxLevel = _a.maxLevel, enableContextMenu = _a.enableContextMenu, language = _a.language;
        if (enableContextMenu && maxLevel) {
            /** @type {?} */
            var levelMenus = [];
            for (var i = 1; i <= maxLevel; i++) {
                /** @type {?} */
                var title = language['expand' + i];
                levelMenus.push({ id: 30 + 1, code: i, title: title, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        // 发送请求获取数据
                        /** @type {?} */
                        var level = t.menu.code;
                        if (isLoadAllTreeData_1()) {
                            _this.setTreeNodeExpandBy(_this.ins.items, level);
                            cmpRef.instance.updateSerializedValue();
                        }
                        else {
                            var _a = _this.ins.treeInfo, dataField = _a.dataField, layerField = _a.layerField;
                            /** @type {?} */
                            var firstNodeData = (_this.ins.items || [])[0];
                            if (firstNodeData && firstNodeData.data) {
                                /** @type {?} */
                                var minLayer = _this.ins.utils.getValue(dataField + "." + layerField, firstNodeData.data);
                                /** @type {?} */
                                var _level = minLayer + level - 1;
                                _this.reloadTreeDataForExpand(_level);
                            }
                        }
                    }) });
            }
            /** @type {?} */
            var isLoadAllTreeData_1 = (/**
             * @return {?}
             */
            function () {
                if (_this.ins.loadTreeDataType === 'default') {
                    return cmpRef.instance.loadDataType === 'all';
                }
                else {
                    return _this.ins.loadTreeDataType === 'loadall';
                }
            });
            /** @type {?} */
            var contextMenus = [
                {
                    id: 6, code: 'checkchildnodes', title: '勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        // console.log(e);
                        return !e.data.node.selectable && !_this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            /** @type {?} */
                            var nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.selectable; })).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.ins.idField]; }));
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            cmpRef.instance.checkedNodes(nodeIds);
                            cmpRef.instance.selectNodes(nodeIds);
                        }
                    })
                },
                {
                    id: 5, code: 'uncheckchildnodes', title: '取消勾选下级数据',
                    visible: (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        // console.log(e);
                        return !e.data.node.selectable && !_this.ins.singleSelect && e.data.node.children && e.data.node.children.length;
                    }),
                    handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            // const nodeIds = t.data.node.children.map(n => n[this.ins.idField]);
                            /** @type {?} */
                            var nodeIds = cmpRef.instance.getChildNodes(t.data.id).filter((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n.selectable; })).map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.ins.idField]; }));
                            cmpRef.instance.unCheckedNodes(nodeIds);
                            cmpRef.instance.unSelectNodes(nodeIds);
                        }
                    })
                },
                '-',
                {
                    id: 1, code: 'expandall', title: language.expandall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef && isLoadAllTreeData_1()) {
                            cmpRef.instance.expandAll();
                        }
                        else {
                            // 发送请求获取数据
                            _this.reloadTreeDataForExpand(-1);
                        }
                    })
                },
                { id: 2, code: 'collapseall', title: language.collapseall, handle: (/**
                     * @param {?} t
                     * @return {?}
                     */
                    function (t) {
                        if (cmpRef) {
                            cmpRef.instance.collapseAll();
                        }
                    }) },
                '-',
                {
                    id: 3, title: language.expandByLayer,
                    children: levelMenus
                }
            ];
            this.ins.treeTableOptions.contextMenuItems = contextMenus;
            cmpRef.instance.beforeShowContextMenu = (/**
             * @return {?}
             */
            function () {
                return of({ show: !cmpRef.instance.state.searched });
            });
        }
    };
    /**
     * @param {?=} isFav
     * @return {?}
     */
    LookupComponentManager.prototype.getCmpHeight = /**
     * @param {?=} isFav
     * @return {?}
     */
    function (isFav) {
        if (isFav === void 0) { isFav = false; }
        return this.ins.dialogMgr.getHeight() - (isFav ? 10 : this.ins.getFilterBarHeight());
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createContent = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (this.ins.componentRef) {
            return;
        }
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        if (this.ins.isDoublleList()) {
            cmpRef = this.ins.centerContainer.createComponent(cmpFac);
        }
        else {
            cmpRef = this.ins.contentContainer.createComponent(cmpFac);
        }
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
            opts.fast = true;
            opts.fitColumns = false;
            this.useContextMenuForTree(cmpRef);
        }
        else {
            opts.fill = true;
        }
        opts.autoFitColumns = true;
        /** @type {?} */
        var ttOpts = this.ins.treeTableOptions || {};
        Object.assign(cmpRef.instance, opts, __assign({ allColumnsTitle: this.ins.allColumnsTitle }, ttOpts));
        this.ins.componentRef = cmpRef;
        this.resizeComponent();
        return cmpRef;
    };
    // 创建收藏CMP
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    LookupComponentManager.prototype.createFavoritesContent = 
    // 创建收藏CMP
    /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        /** @type {?} */
        var type = this.ins.getComponentType();
        /** @type {?} */
        var cmpFac = this.ins.cfr.resolveComponentFactory(type);
        /** @type {?} */
        var cmpRef = null;
        cmpRef = this.ins.favoritesContainer.createComponent(cmpFac);
        if (this.ins.isTree()) {
            opts.fit = true;
            opts.pagination = false;
        }
        else {
            opts.fill = true;
        }
        opts.autoFitColumns = true;
        Object.assign(cmpRef.instance, opts, {
            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),
            height: this.ins.dialogMgr.getHeight()
        });
        // 订阅收藏夹列表中组件的相关事件
        this.ins.favHelper.initFavoriteComponentEvent(cmpRef);
        return cmpRef;
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    LookupComponentManager.prototype.resizeComponent = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        if (type === void 0) { type = 'datatable'; }
        /** @type {?} */
        var size = {
            width: this.ins.dialog.size.width - this.ins.getSpaceWidth(),
            height: this.getCmpHeight(type == 'fav')
        };
        if (this.ins.isDoublleList() && (type === 'datatable' || type === 'treetable')) {
            size.width = this.ins.dialog.size.width - this.ins.leftPanelWidth - this.ins.getSpaceWidth(true);
        }
        this.getComponentInstance(type).resize(size);
    };
    /**
     * @private
     * @param {?} node
     * @return {?}
     */
    LookupComponentManager.prototype.getChildNodes = /**
     * @private
     * @param {?} node
     * @return {?}
     */
    function (node) {
        var _this = this;
        /** @type {?} */
        var nodes = [];
        if (node.selectable || node.selectable === undefined) {
            nodes.push(node);
        }
        if (node.children && node.children.length) {
            node.children.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                nodes.push.apply(nodes, __spread(_this.getChildNodes(n)));
            }));
        }
        return nodes;
    };
    /** 创建左侧组件 */
    /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    LookupComponentManager.prototype.createLeftComponent = /**
     * 创建左侧组件
     * @param {?} ops
     * @return {?}
     */
    function (ops) {
        var _this = this;
        /** @type {?} */
        var dtFac = null;
        if (this.ins.isDoublleList()) {
            dtFac = this.ins.cfr.resolveComponentFactory(LookupLeftComponent);
        }
        this.ins.leftComponentRef = this.ins.leftContainer.createComponent(dtFac);
        ops.height = this.ins.dialogMgr.getHeight();
        if (this.ins.dialogWidth < this.ins.navLookupDialogMinWidth) {
            this.ins.dialogWidth = this.ins.navLookupDialogMinWidth;
            this.ins.dialog.reSize({ width: this.ins.dialogWidth });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        if (ops.width !== this.ins.leftPanel.width) {
            // 默认 1 : 2
            this.ins.leftPanel.resize({
                width: this.ins.leftPanel.width,
                height: ops.height
            });
            this.ins.resizeCmp({ width: this.ins.dialog.size.width });
        }
        // this.resizeComponent();
        this.ins.leftComponentRef.instance.lookupCmp = this.ins;
        this.ins.leftComponentRef.instance.navOptions = ops;
        this.ins.leftComponentRef.instance.selected
            .pipe(debounceTime(100), switchMap((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            if (d && d.data) {
                _this.ins.navigationFilter = {
                    selected: d.data,
                    idValue: _this.getNavigationFilter(d.data),
                    searchField: '',
                    searchValue: ''
                };
            }
            else {
                _this.ins.navigationFilter = undefined;
            }
            // 加载右侧数据
            /** @type {?} */
            var p = {
                pageInfo: {
                    pageIndex: 1,
                    // tfs 638840
                    pageSize: _this.ins.gridOptions.pageSize
                }
            };
            if (_this.ins.includeSubordinates && d && d.node && ops.treeInfo) {
                var _a = ops.treeInfo, layerType = _a.layerType, pathField = _a.pathField, loadDataType = _a.loadDataType, dataField = _a.dataField;
                if (loadDataType === 'all') {
                    /** @type {?} */
                    var rowDatas = _this.getChildNodes(d.node).map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                    _this.ins.navigationFilter.idValue = _this.getNavigationFilter(rowDatas);
                }
                else {
                    if (layerType == 'pathcode') {
                        // p['navNodePathCode'] = d.data[dataField][pathField];
                        p['navNodePathCode'] = _this.ins.getPathCode(d.data, ops.treeInfo);
                        _this.ins['navNodePathCode'] = p['navNodePathCode'];
                    }
                }
            }
            else {
                _this.ins['navNodePathCode'] = '';
            }
            /** @type {?} */
            var dataCmpRef = _this.getComponentInstance();
            var sortName = dataCmpRef.sortName, sortOrder = dataCmpRef.sortOrder;
            Object.assign(p, { search: _this.ins._searchState, sortName: sortName, sortOrder: sortOrder });
            return _this.ins.httpMgr.getData(p, 'list');
        })))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            _this.ins.closeLoading();
            _this.ins.loadDataWhenOpen = true;
            // if (this.ins.useFavorite && !this.ins.isTree()) {
            //     this.ins.favHelper.updateFavoritesStatus(res.items);
            // }
            // this.ins.loadDataTableData(res);
            _this.ins.loadData(res, false);
            setTimeout((/**
             * @return {?}
             */
            function () {
                // 选中数据
                _this.ins.selectionMgr.selectCurrentValue();
                _this.ins.changeDetector.detectChanges();
            }));
        }));
        return this.ins.leftComponentRef.instance.createComponent();
    };
    // 获取关联数据, 右侧数据中 关联各字段的值
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    LookupComponentManager.prototype.getNavigationFilter = 
    // 获取关联数据, 右侧数据中 关联各字段的值
    /**
     * @private
     * @param {?} navRow
     * @return {?}
     */
    function (navRow) {
        if (this.ins.navigationOptions.relations && this.ins.navigationOptions.relations.length) {
            /** @type {?} */
            var result_1 = [];
            this.ins.navigationOptions.relations.forEach((/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                /** @type {?} */
                var k = r.groupField;
                /** @type {?} */
                var dField = r.helpField;
                /** @type {?} */
                var rf = { fieldName: dField, fieldValue: '' };
                if (Array.isArray(navRow)) {
                    /** @type {?} */
                    var vals = navRow.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return k.split('.').reduce((/**
                         * @param {?} o
                         * @param {?} c
                         * @return {?}
                         */
                        function (o, c) {
                            return o[c];
                        }), n);
                    }));
                    rf.fieldValue = vals.join(',');
                }
                else {
                    rf.fieldValue = k.split('.').reduce((/**
                     * @param {?} o
                     * @param {?} c
                     * @return {?}
                     */
                    function (o, c) {
                        return o[c];
                    }), navRow);
                }
                result_1.push(rf);
            }));
            return result_1;
        }
        return '';
    };
    return LookupComponentManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupDialogManager = /** @class */ (function () {
    function LookupDialogManager(ins) {
        this.ins = ins;
        this.lookupInit = null;
        this._loadDataWhenOpen = true;
        this._navSelectedId = '';
        this._selectFirstInNav = false;
        this.dialogClosedSubscription = null;
        this.dialogOpenedSubscription = null;
        this.keyDownHandler = null;
        this._okbtnclick$ = null;
    }
    /**
     * @private
     * @return {?}
     */
    LookupDialogManager.prototype.unsubscribes = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lookupInit) {
            this.lookupInit.unsubscribe();
            this.lookupInit = null;
        }
        if (this.dialogClosedSubscription) {
            this.dialogClosedSubscription.unsubscribe();
            this.dialogClosedSubscription = null;
        }
        if (this.dialogOpenedSubscription) {
            this.dialogOpenedSubscription.unsubscribe();
            this.dialogOpenedSubscription = null;
        }
    };
    // 帮助窗口关闭后做一些清理工作
    // 帮助窗口关闭后做一些清理工作
    /**
     * @return {?}
     */
    LookupDialogManager.prototype.dialogClosed = 
    // 帮助窗口关闭后做一些清理工作
    /**
     * @return {?}
     */
    function () {
        if (this.ins.displayText !== this.ins.originalText && !this.ins.nosearch) {
            this.ins.displayText = this.ins.originalText;
            this.ins.setModelValue(this.ins.displayText);
        }
        if (this.ins.componentRef) {
            this.ins.componentRef.destroy();
            this.ins.componentRef = null;
        }
        if (this.ins.favoritesComponentRef) {
            this.ins.favoritesComponentRef.destroy();
            this.ins.favoritesComponentRef = null;
        }
        if (this.ins.contentContainer) {
            this.ins.contentContainer.clear();
        }
        if (this.ins.centerContainer) {
            this.ins.centerContainer.clear();
        }
        if (this.ins.leftComponentRef) {
            this.ins.leftComponentRef.destroy();
            this.ins.leftComponentRef = null;
        }
        if (this.ins.leftContainer) {
            this.ins.leftContainer.clear();
        }
        this.ins.isShow = false;
        this.ins.isTextChange = false;
        if (this.ins.dialog) {
            this.ins.content = null;
        }
        this.ins.navigationFilter = null;
        this.ins.lookupUtils.pendingEnd();
        if (this.ins.helpId) {
            this.ins.displayType = '';
        }
        this.unsubscribes();
        // this.ins.items = [];
        this.ins.favoriteItems = [];
        this.ins.lookupSelectionSer.initFavoriteItems([]);
        this.ins.isTabChanged = false;
        if (this.ins.uri) {
            this.ins.items = [];
        }
        this.ins._searchState = null;
        this.ins.pageIndex = 1;
        this.ins.loadDataWhenOpen = this._loadDataWhenOpen;
        this.ins.navSelectedIds = this._navSelectedId;
        this.ins.selectFirstInNav = this._selectFirstInNav;
        this.ins.isGetAllChidlNodes = false;
        this.ins.enableGetAllChildNodes = true;
        // 保存个性化数据
        if (this.ins.usePersionalConf && this.ins.favoriteDataFrom !== 'locale') {
            this.ins.httpMgr.submitFavoriteData('dialog closed event.');
        }
        if (this.keyDownHandler) {
            this.keyDownHandler();
            this.keyDownHandler = null;
        }
        if (this.ins.inputGroup) {
            this.ins.inputGroup.focus();
        }
        this.ins.userInitialConfig.reset();
        this.ins.treeInfo = this.ins._treeInfo_;
        this.ins.lookupUtils.destroy();
        this.ins.dialogClosed.emit();
        if (this.ins.includeSubordinates$$) {
            this.ins.includeSubordinates$$.unsubscribe();
            this.ins.includeSubordinates$$ = null;
        }
        this.ins.conditions = [];
        this.ins.searching = false;
        if (this.ins.dtEventMgr) {
            this.ins.dtEventMgr['_sortState'] = null;
        }
        if (this.ins.ttEventMgr) {
            this.ins.ttEventMgr['_sortState'] = null;
        }
        if (this._okbtnclick$) {
            this._okbtnclick$.unsubscribe();
            this._okbtnclick$ = null;
        }
    };
    /**
     * @return {?}
     */
    LookupDialogManager.prototype.onDialogCreated = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this._loadDataWhenOpen = this.ins.loadDataWhenOpen;
        this._navSelectedId = this.ins.navSelectedIds;
        this._selectFirstInNav = this.ins.selectFirstInNav;
        this.ins.dialogCreatedSubscription = this.ins.dialogCreated.subscribe((/**
         * @param {?} dlg
         * @return {?}
         */
        function (dlg) {
            if (dlg) {
                _this.ins.setContainerMargin();
                if (_this.ins.dialogOpenedSubscription) {
                    _this.ins.dialogOpenedSubscription.unsubscribe();
                }
                if (_this.ins.dialogClosedSubscription) {
                    _this.ins.dialogClosedSubscription.unsubscribe();
                }
                _this.registerDialogEvent();
                if (_this.ins.isRecordSize) {
                    /** @type {?} */
                    var dlgSize = _this.ins.personalConfigService.getDialogSize();
                    if (dlgSize) {
                        var width = dlgSize.width, height = dlgSize.height;
                        _this.ins.dialogWidth = width ? width : _this.ins.dialogWidth;
                        _this.ins.dialogHeight = height ? height : _this.ins.dialogHeight;
                        // 20200908 更新现窗口的尺寸 by Lucas
                        dlg.width = _this.ins.dialogWidth;
                        dlg.height = _this.ins.dialogHeight;
                    }
                }
                dlg.show();
            }
        }));
        this.ins.subscriptions.push(this.ins.dialogCreatedSubscription);
    };
    /**
     * @param {?} pr
     * @return {?}
     */
    LookupDialogManager.prototype.checkDictPickingResult = /**
     * @param {?} pr
     * @return {?}
     */
    function (pr) {
        /** @type {?} */
        var o = true;
        if (pr === undefined || pr === null || pr === '') {
            o = true;
        }
        if (typeof pr === 'boolean') {
            o = pr;
        }
        /** @type {?} */
        var customData;
        /** @type {?} */
        var selectedIds;
        /** @type {?} */
        var message;
        customData = this.ins.customData;
        selectedIds = this.ins.selectedIds;
        if (typeof pr === 'object') {
            if (pr.showDialog === undefined) {
                o = true;
            }
            else {
                o = pr.showDialog;
            }
            if (pr.hasOwnProperty('data')) {
                /** 保存帮助前传递的数据 */
                customData = pr.data;
            }
            selectedIds = pr.selectedIds || null;
            if (pr.message) {
                message = pr.message;
            }
        }
        return { show: o, customData: customData, selectedIds: selectedIds, message: message };
    };
    /**
     * @param {?} pr
     * @return {?}
     */
    LookupDialogManager.prototype.canOpenDialog = /**
     * @param {?} pr
     * @return {?}
     */
    function (pr) {
        var _a = this.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, selectedIds = _a.selectedIds, message = _a.message;
        this.ins.customData = customData;
        this.ins.selectedIds = selectedIds || null;
        if (message) {
            this.ins.notifyService.warning(message);
        }
        this.ins.isReady = false;
        this.ins.isShow = show;
    };
    /**
     * @return {?}
     */
    LookupDialogManager.prototype.getHeight = /**
     * @return {?}
     */
    function () {
        return this.ins.dialog.size.contentHeight -
            this.ins.containerMargin.bottom -
            this.ins.containerMargin.top -
            (!this.ins.useNewLayout ? (this.ins.useFavorite ? 40 : 0) : 56);
    };
    /**
     * @private
     * @return {?}
     */
    LookupDialogManager.prototype.getMainGridSize = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.ins.isDoublleList()) {
            return {
                width: this.ins.dialog.size.width - this.ins.leftPanel.width - 27,
                height: this.getHeight()
            };
        }
        return {
            width: this.ins.dialog.size.width - this.ins.containerMargin.left - this.ins.containerMargin.right,
            height: this.getHeight()
        };
    };
    /**
     * @return {?}
     */
    LookupDialogManager.prototype.resetDialogContentHeight = /**
     * @return {?}
     */
    function () {
        var _a = this.ins.dialog.size, hHeight = _a.header, fHeight = _a.footer;
        return this.ins.dialogHeight - hHeight - fHeight - this.ins.containerMargin.bottom - this.ins.containerMargin.top;
    };
    /**
     * @private
     * @return {?}
     */
    LookupDialogManager.prototype.registerOkBtnEvent = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ins.okButton) {
            /** @type {?} */
            var doubleClickDuration = 250;
            /** @type {?} */
            var leftClick$ = fromEvent(this.ins.okButton.nativeElement, 'click').pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) { return event.button === 0; })));
            /** @type {?} */
            var debounce$ = leftClick$.pipe(debounceTime(doubleClickDuration));
            /** @type {?} */
            var clickLimit$ = leftClick$.pipe(bufferCount(2));
            /** @type {?} */
            var bufferGate$ = race(debounce$, clickLimit$)
                .pipe(
            // We are only interested in the first event. After that
            // we want to restart.
            first(), repeat());
            this._okbtnclick$ = leftClick$.pipe(buffer(bufferGate$), 
            // Here we map the buffered events into the length of the buffer
            // If the user clicked once, the buffer is 1. If he clicked twice it is 2
            map((/**
             * @param {?} clicks
             * @return {?}
             */
            function (clicks) { return clicks.length; }))).subscribe((/**
             * @param {?} clicks
             * @return {?}
             */
            function (clicks) {
                _this.ins.selectItem();
            }));
        }
    };
    /** 注册弹出窗口的事件 */
    /**
     * 注册弹出窗口的事件
     * @private
     * @return {?}
     */
    LookupDialogManager.prototype.registerDialogEvent = /**
     * 注册弹出窗口的事件
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.dialogOpenedSubscription = this.ins.dialog.opened.subscribe((/**
         * @return {?}
         */
        function () {
            _this.ins.dialogContentHeight = _this.resetDialogContentHeight();
            _this.ins.gridOptions = Object.assign(_this.ins.gridOptions, _this.getMainGridSize());
            _this.ins.dialog.el.nativeElement.querySelector('.ps-content').style.height = '100%';
            if (_this.ins.displayType && _this.ins.customDisplayType) {
                _this.ins.componentRef = _this.ins.lookupCmpMgr.createContent(_this.ins.gridOptions);
                _this.ins.lookupCmpMgr.createFavoriteComponent();
            }
            _this.ins.initData();
            // 修改帮助窗口的状态
            _this.ins.lookupUtils.pendingEnd();
            _this.ins.dialogOpened.emit();
            // 注册确定按钮点击事件
            _this.registerOkBtnEvent();
        }));
        this.lookupInit = this.ins.lookupinitializationSubject.subscribe((/**
         * @return {?}
         */
        function () {
            _this.ins.loadDataWhenOpen = true;
            // 注册快捷键
            _this.registerShortcutKey();
            // 监听左侧尺寸变化事件
            if (_this.ins.leftPanel) {
                if (!_this.ins.leftPanel.resizing.observers.length) {
                    /** @type {?} */
                    var leftPanelResize$ = _this.ins.leftPanel.resizing.pipe(debounceTime(50)).subscribe((/**
                     * @param {?} s
                     * @return {?}
                     */
                    function (s) {
                        /** @type {?} */
                        var size = {
                            width: _this.ins.dialog.size.width - s.size.width - _this.ins.getSpaceWidth(true),
                            height: _this.getHeight() - _this.ins.getFilterBarHeight()
                        };
                        _this.ins.componentRef.instance.resize(size);
                        _this.ins.leftComponentRef.instance.resize(s.size);
                    }));
                    _this.ins.subscriptions.push(leftPanelResize$);
                }
                if (_this.ins.isDoublleList() && _this.ins.leftComponentRef) {
                    _this.ins.leftComponentRef.instance.updateScrollPosition();
                }
            }
            if (_this.ins.cascadeSelect) {
                var _a = _this.ins.cascadeSelect, selectEl_1 = _a.selectEl, panelRef_1 = _a.panelRef;
                _this.ins.cascadeSelect.beforeShow = (/**
                 * @return {?}
                 */
                function () {
                    if (selectEl_1 && panelRef_1) {
                        panelRef_1.style.left = selectEl_1.offsetLeft + "px";
                        if (_this.ins.localService.localeId.toLocaleLowerCase() == 'en') {
                            panelRef_1.style.width = 'auto';
                            panelRef_1.style.maxWidth = '200px';
                        }
                        return of(true);
                    }
                });
            }
        }));
        this.dialogClosedSubscription = this.ins.dialog.closed.subscribe((/**
         * @return {?}
         */
        function () {
            // 输入框变化后，弹出窗口未选择数据关闭窗口时，还原原始值
            _this.ins.dialogMgr.dialogClosed();
        }));
        // this.ins.subscriptions.push(this.ins.dialogClosedSubscription);
    };
    /**
     * @private
     * @return {?}
     */
    LookupDialogManager.prototype.registerShortcutKey = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // 回车，与确定按钮处理逻辑一至。
        /** @type {?} */
        var dlgContainerDom = this.ins.dialog.el.nativeElement.querySelector('.farris-modal');
        if (dlgContainerDom && this.ins.shortcutKey && !this.keyDownHandler) {
            this.keyDownHandler = this.ins.eventManager.addEventListener(dlgContainerDom, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                var _a = _this.ins.shortcutKey, moveUp = _a.moveUp, moveDown = _a.moveDown, searchFocus = _a.searchFocus, confirm = _a.confirm, nextPager = _a.nextPager, prevPager = _a.prevPager, expand = _a.expand, collapse = _a.collapse;
                /** @type {?} */
                var arrowKey = [moveUp, moveDown, expand, collapse];
                if (arrowKey.includes(e.code)) {
                    _this.ins.componentRef.instance.onKeydownEvent(e);
                }
                else if (e.key === confirm) {
                    if (e.target['nodeName'] === 'INPUT' && !e.ctrlKey) {
                        return;
                    }
                    _this.ins.okButton.nativeElement.click();
                }
                else if (e.code === searchFocus) { // 帮助窗口查询输入框焦点
                    e.preventDefault();
                    _this.ins.componentRef.instance.inputGroup.focus();
                }
                else if (!_this.ins.isTree() && (e.code === nextPager || e.code === prevPager)) { // 分页
                    // 分页
                    /** @type {?} */
                    var isNextPager = e.code === nextPager;
                    _this.paginationKeyDownHandler(isNextPager);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?=} next
     * @return {?}
     */
    LookupDialogManager.prototype.paginationKeyDownHandler = /**
     * @private
     * @param {?=} next
     * @return {?}
     */
    function (next) {
        if (next === void 0) { next = true; }
        /** @type {?} */
        var datatableRef = this.ins.componentRef.instance;
        var pageIndex = datatableRef.pageIndex, pageSize = datatableRef.pageSize, total = datatableRef.total;
        /** @type {?} */
        var pagerCount = Math.ceil(total / pageSize);
        /** @type {?} */
        var newPageNum = pageIndex;
        if (next) {
            newPageNum = newPageNum + 1;
        }
        else {
            newPageNum = newPageNum - 1;
        }
        if (newPageNum > pagerCount || newPageNum < 1) {
            newPageNum = pageIndex;
        }
        this.ins.componentRef.instance.onPageChange({ pageSize: pageSize, pageIndex: newPageNum });
    };
    return LookupDialogManager;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupSelectionService = /** @class */ (function () {
    function LookupSelectionService(ins) {
        this.ins = ins;
        this.state = {
            selecteditems: [],
            favoriteItems: [],
            quickItems: []
        };
        this.state$ = new BehaviorSubject(this.state);
        this.selected$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return of(n.selecteditems); })));
        this.favoriteItems$ = new BehaviorSubject({ items: this.state.favoriteItems, action: null });
        this.quickItems$ = this.state$.pipe(switchMap((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return of(n.quickItems); })));
        this.selectionChanged$ = new Subject();
    }
    Object.defineProperty(LookupSelectionService.prototype, "idField", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.ins.idField;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} items
     * @return {?}
     */
    LookupSelectionService.prototype.initFavoriteItems = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.state.favoriteItems = items || [];
    };
    //#region 收藏数据
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    LookupSelectionService.prototype.updateFavoriteData = 
    //#region 收藏数据
    /**
     * @param {?} data
     * @param {?} action
     * @return {?}
     */
    function (data, action) {
        var _this = this;
        if (this.ins.savingFaoriteData) {
            return;
        }
        if (action === FavoriteAction.add) {
            this.state.favoriteItems = this.state.favoriteItems.concat([data]);
        }
        else {
            this.state.favoriteItems = this.state.favoriteItems.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField] !== data[_this.idField]; }));
        }
        this.favoriteItems$.next({ items: this.state.favoriteItems, action: action, data: data });
    };
    //#endregion
    //#region 多选数据
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    LookupSelectionService.prototype.loadSelections = 
    //#endregion
    //#region 多选数据
    /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.state.selecteditems = __spread(data);
        this.state$.next(this.state);
    };
    /**
     * @return {?}
     */
    LookupSelectionService.prototype.getSelections = /**
     * @return {?}
     */
    function () {
        return __spread(this.state.selecteditems);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    LookupSelectionService.prototype.select = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            this.state.selecteditems = __spread(this.state.selecteditems, [item]);
            this.state$.next(this.state);
            this.selectionChanged$.next({ data: [item[this.idField]], selected: true });
        }
    };
    /**
     * @param {?} pathcode
     * @return {?}
     */
    LookupSelectionService.prototype.unselectByPathcode = /**
     * @param {?} pathcode
     * @return {?}
     */
    function (pathcode) {
        var _this = this;
        /** @type {?} */
        var ids = [];
        this.state.selecteditems = this.state.selecteditems.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            /** @type {?} */
            var _pathcode = _this.ins.getPathCode(n, _this.ins.treeInfo);
            /** @type {?} */
            var r = _pathcode && _pathcode.indexOf(pathcode) !== 0;
            if (!r) {
                ids.push(n[_this.idField]);
            }
            return r;
        }));
        this.selectionChanged$.next({ data: ids, selected: false });
    };
    /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    LookupSelectionService.prototype.updateSelections = /**
     * @param {?} data
     * @param {?=} checked
     * @return {?}
     */
    function (data, checked) {
        var _this = this;
        if (checked === void 0) { checked = true; }
        if (!Array.isArray(data)) {
            data = [data];
        }
        /** @type {?} */
        var items = __spread(data);
        /** @type {?} */
        var idField = this.idField;
        /** @type {?} */
        var ids = items.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[idField]; }));
        if (checked) {
            if (this.state.selecteditems && !this.state.selecteditems.length) {
                this.state.selecteditems = items;
            }
            else {
                ids.forEach((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                function (n, i) {
                    if (!_this.state.selecteditems.find((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) { return r[idField] == n; }))) {
                        _this.state.selecteditems.push(items[i]);
                    }
                }));
            }
        }
        else {
            if (data) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return ids.indexOf(n[idField]) === -1;
                }));
            }
        }
        this.state$.next(this.state);
        this.selectionChanged$.next({ data: ids, selected: checked });
    };
    /**
     * @param {?} id
     * @return {?}
     */
    LookupSelectionService.prototype.unSelect = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        if (id) {
            if (Array.isArray(id)) {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return id.indexOf(n[_this.idField]) === -1;
                }));
                this.selectionChanged$.next({ data: id, selected: false });
            }
            else {
                this.state.selecteditems = this.state.selecteditems.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.idField] != id; }));
                this.selectionChanged$.next({ data: [id], selected: false });
            }
            this.state$.next(this.state);
        }
    };
    /**
     * @return {?}
     */
    LookupSelectionService.prototype.clearSelections = /**
     * @return {?}
     */
    function () {
        this.state.selecteditems = [];
        this.state$.next(this.state);
    };
    return LookupSelectionService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var LOOKUPGRID_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return LookupGridComponent; })),
    multi: true,
};
var LookupGridComponent = /** @class */ (function (_super) {
    __extends(LookupGridComponent, _super);
    function LookupGridComponent(injector, cfr, el, utils, defaultMapping, changeDetector, shortcuts, lookupUtils, zone, render2) {
        var _this = _super.call(this, injector, el, changeDetector) || this;
        _this.injector = injector;
        _this.cfr = cfr;
        _this.el = el;
        _this.utils = utils;
        _this.defaultMapping = defaultMapping;
        _this.changeDetector = changeDetector;
        _this.shortcuts = shortcuts;
        _this.lookupUtils = lookupUtils;
        _this.zone = zone;
        _this.render2 = render2;
        _this.groupIcon = INPUT_GROUP_ICON;
        _this._displayType = "";
        /**
         * 使用表单设计器中的显示类型。否则使用元数据设置的显示类型。 默认：false
         */
        _this.customDisplayType = false;
        _this.viewType = "text";
        /**
         * 启用清空按钮
         */
        _this.enableClear = true;
        /**
         * 服务器端排序
         */
        _this.remoteSort = true;
        /**
         * 树表显示全选复选框。 默认不显示
         */
        _this.showCheckAll = false;
        /**
         * 是否启用多选
         */
        _this.singleSelect = true;
        /**
         * 多选分隔符, 默认为 ,
         */
        _this.multipleChoiceSeparator = ",";
        /**
         * 可以为元数据ID、webapiURL
         */
        _this.uri = '';
        /**
         * BE REST RUI
         * - 此处设置后 uri 失效
         */
        _this.beUri = "";
        /**
         * 显示过滤工具条; 默认 true
         */
        _this.showFilterBar = true;
        /**
         * 是否启用分页
         */
        _this.pagination = true;
        /**
         * 当前页索引，从 1开始
         */
        _this.pageIndex = 1;
        /**
         * 每页记录数
         */
        _this.pageSize = 20;
        /**
         * 可用分页记录数列表
         */
        _this.pageList = [10, 20, 30, 50, 100];
        /**
         * 总记录数
         */
        _this.total = 0;
        /** 可拖动列 */
        // @Input() resizableColumns = true;
        /**
         * 显示列信息, 默认为 []
         */
        _this.columns = [];
        /**
         * 帮助查询是否为远端查询
         */
        _this.remoteSearch = true;
        /**
         * 文本变化后，进行服务器端查询
         */
        _this.searchOnServer = true;
        /**
         * 不进行服务器查询，有啥算啥
         */
        _this.nosearch = false;
        /**
         * 启用任意输入后，值通过输入时触发
         */
        _this.clearMappings = new EventEmitter();
        // 收藏列表
        _this.favoriteItems = [];
        /**
         * 是否启用级联选择控制选项
         */
        _this.enableCascade = false;
        /**
         * 级联控制默认值： enable: 同步选择, up：包含上级, down：包含下级, disable：仅选择自身
         */
        _this.cascadeStatus = "enable";
        /**
         * 分别级联选项的启用状态，默认全部启用
         */
        _this.cascadeItems = {
            enable: true,
            up: true,
            down: true,
            disable: true
        };
        /**
         * 显示级联控制
         */
        _this.showCascadeControl = true;
        _this.placeholder = "";
        /**
         * 显示已选记录列表。 默认为 false 不显示
         */
        _this.showSelected = false;
        /**
         * 应用收藏夹
         */
        _this.useFavorite = false;
        /**
         * 收藏数据来自于： locale: 本地存储， remote: 服务器端存储
         */
        _this.favoriteDataFrom = "remote";
        /**
         * 使用提示,快捷选择
         */
        _this.useTip = false;
        /**
         * 记录窗口大小
         */
        _this.isRecordSize = false;
        /**
         * 是否启用选中value值对应的行数据，默认 true
         */
        _this.enableToSelect = true;
        _this.enableFindText = false;
        /**
         * -1: 不展开； 0: 全部展开；>0: 展开到指定级数
         */
        _this.expandLevel = -1;
        _this.navTreeTableOptions = {};
        _this.treeTableOptions = {};
        _this.dataTableOptions = {};
        _this.defaultTreeTableOptions = {
            maxLevel: 9,
            enableContextMenu: false,
            contextMenuItems: [],
        };
        /**
         * 树形帮助数据加载方式： default: 内置取数； loadall: 加载所有 layerload：分层加载
         */
        _this.loadTreeDataType = "default";
        /**
         * 窗口打开后立即加载数据，默认为 true
         */
        _this.loadDataWhenOpen = true;
        /**
         * 导航列表，树列表在帮助打开后选中的数据;
         * 设置后，`selectFirstInNav` 失效！
         */
        _this.navSelectedIds = "";
        /**
         * 导航帮助，选中第1条数据，默认为 false;
         * 注意：当`navSelectedIds`不为空时，此属性失效。
         */
        _this.selectFirstInNav = false;
        /**
         * 启用构造完整树过滤
         */
        _this.enableFullTree = true;
        /**
         * 显示文本自定义函数
         */
        _this.displayFormatter = undefined;
        /**
         * 显示文本字段集合，以 英文 逗号隔开
         */
        _this.displayFields = "";
        _this.displayTextSeparator = "_";
        /**
         * 帮助元数据ID，不为空时调用指定的URI
         * /api/runtime/bcc/v1.0/help/data/{helpId}
         */
        _this.helpId = "";
        /**
         * 文本对齐方式； left | center | right; 默认 left
         */
        _this.textAlign = "left";
        /**
         * 鼠标滑过输入框时显示输入框内的文本信息
         */
        _this.enableTitle = true;
        _this.useExtendInfo = false;
        _this.extInfoFields = "";
        _this.extendInfo = "";
        /**
         * IDE 设计器自定义格式化 2103
         */
        _this.customFormatter = null;
        _this.customNavFormatter = null;
        /**
         * 自定义确定事件
         */
        _this.okHandler = null;
        /**
         * 自定义取消事件
         */
        _this.cancelHandler = null;
        _this.tagboxHeight = "auto";
        /**
         * 启用获取所有子级数据的功能,仅支持分级码
         */
        _this.enableGetAllChildNodes = true;
        _this.shortcutKey = {
            /**
             * 打开帮助窗口
             */
            open: "ArrowRight",
            /**
             * 确认选择数据
             */
            confirm: "Enter",
            /**
             * 搜索框焦点
             */
            searchFocus: "F3",
            /**
             * 选中上一条
             */
            moveUp: "ArrowUp",
            /**
             * 选中下一条
             */
            moveDown: "ArrowDown",
            /**
             * 展开节点
             */
            expand: "ArrowRight",
            /**
             * 折叠节点
             */
            collapse: "ArrowLeft",
            /**
             * 下一页
             */
            nextPager: "PageDown",
            /**
             * 上一页
             */
            prevPager: "PageUp",
        };
        /**
         * 快捷选择相关配置项，默认为 null, 即不启用此功能
         */
        _this.quickSelect = null;
        /**
         * 树形帮助 是否使用树形结构数据。默认为 true, 当为 false 时，服务器端无须构造树形结构，按普通列表输出
         */
        _this.treeToList = false;
        _this.navTreeToList = false;
        /**
         * 带导航的帮助中，是否显示左侧导航部分。默认 true
         */
        _this.showNavigation = true;
        /**
         * 是否启用新布局
         * - 默认 false
         */
        _this.useNewLayout = false;
        /**
         * 启用多字段查询 默认为 false
         * - 启用此特性后，useNewLayout 自动启用
         */
        _this.enableMultiFieldSearch = false;
        /**
         * 搜索工具条显示模式， both: 全部显示；onlyfield: 仅显示字段；onlyinput: 仅显示搜索输入框。默认 both
         */
        _this.searchBarMode = SearchBarMode.both;
        /**
         * 允许查询的字段，仅启用多字段查询时有效，多个字段以 “,” 隔开；
         *  - nav 左侧导航字段；main 主数据字段;
         *  - 默认为 null, 即从所有显示列中自动提取
         */
        _this.allowQueryFields = null;
        _this.labels = {
            /**
             * 数据列表
             */
            dataTab: '',
            /**
             * 收藏夹
             */
            favTab: '',
            /**
             * 取消已选
             */
            clearAllSelected: '',
            /**
             * 已选记录面板中 删除已选
             */
            delSelected: ''
        };
        /**
         * 允许任意字段进行查询； 默认 true
         */
        _this.searchAnyField = true;
        _this.selectedData = new EventEmitter();
        _this.clear = new EventEmitter();
        /**
         * 未启用多字段查询时触发
         */
        _this.search = new EventEmitter();
        /**
         * 启用多字段查询时触发
         */
        _this.query = new EventEmitter();
        // 帮助文本框中值变化事件
        _this.valueChanged = new EventEmitter();
        _this.loadSuccess = new EventEmitter();
        _this.pagerChanged = new EventEmitter();
        _this.expandTreeNode = new EventEmitter();
        _this.textChanged = new EventEmitter();
        _this.checkedChange = new EventEmitter();
        _this.tagRemoved = new EventEmitter();
        /**
         * 内容中留白边距
         */
        _this.containerMargin = { top: 0, bottom: 5, left: 14, right: 14 };
        _this.containerStyle = {};
        _this._gridOptions = lookupGridDefaults;
        // 导航帮助左则宽度
        _this.leftPanelWidth = 320;
        // 导航帮助窗口最小宽度
        _this.navLookupDialogMinWidth = 960;
        _this.navigationFilter = null;
        _this.subscriptions = [];
        _this.isTextChange = false;
        _this.isTabChanged = false;
        _this.displayInfo = Object.assign({}, displayInfoDefault);
        _this.tabChangeSubscription = null;
        // 暂存行点击数据  用于收藏
        _this.personalConf = {};
        _this.favoriteColumns = [];
        /**
         * 临时查询参数
         */
        _this._searchState = null;
        _this.allData = [];
        _this.allColumnsTitle = "所有列";
        _this.mustWriteSomething = "请输入关键字后查询。";
        _this.mustChoosAdatarow = "请选择一条记录！";
        _this.addFavoriteSuccess = "收藏成功。";
        _this.delFavoriteSuccess = "移除收藏成功。";
        /**
         * 使用内置的查询方法, 默认 false
         */
        _this.useInsideSearchHandler = false;
        _this.searching = false;
        /**
         * 临时存储查询结果集
         */
        _this._searchResult = null;
        _this.lookupinitializationSubject = new Subject();
        /**
         * 多选时，选中的数据
         */
        _this.currentSelectedItems = of([]);
        /**
         * 已选数据列信息
         */
        _this.selectedColumns = [];
        _this.activeTab = "datalist";
        _this.favHelper = null;
        _this.ttEventMgr = null;
        _this.multiSelMgr = null;
        _this.httpMgr = null;
        _this.lookupCmpMgr = null;
        _this.dialogMgr = null;
        _this.selectionMgr = null;
        _this.dtEventMgr = null;
        _this.lookupSelectionSer = null;
        _this.controlId = "";
        _this.savingFaoriteData = false;
        _this.isReady = false;
        _this.showTagboxClearButton = false;
        _this.hasError = false;
        _this.cascadeStatusItems = [
            { valeu: 'enable', label: '' },
            { valeu: 'up', label: '' },
            { valeu: 'down', label: '' },
            { valeu: 'disable', label: '' }
        ];
        _this.isGetAllChidlNodes = false;
        /**
         * 选中记录ID，自定义帮助取数时使用
         */
        _this.selectedIds = [];
        _this.lookupSearchInputEvent = null;
        _this.farrisInstances = null;
        /**
         * 用户初始设置
         */
        _this._userSettings = {};
        _this._treeInfo_ = null;
        /**
         * dialog 内容区域高度。 弹窗总高度 - 头部高度 - 脚部高度 - （启用收藏 TAB头高度）
         */
        _this.dialogContentHeight = 0;
        /**
         * 左树右列表， 左树点击节点查询时是否包括下级节点的数据，默认 false
         */
        _this.includeSubordinates = false;
        _this.includeSubordinates$ = new Subject();
        _this.includeSubordinates$$ = null;
        _this.debugSer = null;
        _this.createInstance();
        _this.currentSelectedItems = _this.lookupSelectionSer.selected$;
        _this.eventManager = _this.injector.get(EventManager);
        _this.farrisInstances = _this.injector.get(FarrisComponentInstanceService, null);
        _this.overLayService = new OverLayHiddenService();
        _this.debugSer = _this.injector.get(DebugService, null);
        if (_this.debugSer) {
            _this.debugSer.useDebugMode();
        }
        _this.lookupSelectionSer.selectionChanged$.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.selectedDtRef) {
                if (!e.selected) {
                    _this.selectedDtRef.unCheckRows(e.data);
                }
            }
        }));
        _this.initLabels();
        return _this;
    }
    Object.defineProperty(LookupGridComponent.prototype, "displayType", {
        get: /**
         * @return {?}
         */
        function () {
            return this._displayType;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val) {
                /** @type {?} */
                var types = Object.values(LookupGridDisplayType);
                /** @type {?} */
                var i = types.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n === val.toUpperCase(); }));
                if (i > -1) {
                    /** @type {?} */
                    var keys = Object.keys(LookupGridDisplayType);
                    this._displayType = LookupGridDisplayType[keys[i]];
                }
            }
            else {
                this._displayType = val;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "gridOptions", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.useFavorite &&
                this.columns &&
                this.columns.length > 0 &&
                !this.columns.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.field === FAVORITE_FIELD_NAME; }))) {
                this.columns.push({
                    field: FAVORITE_FIELD_NAME,
                    title: "",
                    width: 40,
                    align: "center",
                    fixed: 'right',
                    // fixedWidth: true,
                    formatter: this.favHelper.favoriteColumnFormatter,
                });
            }
            this._gridOptions = Object.assign(this._gridOptions, {
                singleSelect: this.singleSelect,
                idField: this.idField,
                uri: this.uri,
                showFilterBar: this.enableMultiFieldSearch ? false : this.showFilterBar,
                pagination: this.pagination,
                pageIndex: this.pageIndex,
                pageSize: this.pageSize,
                pageList: this.pageList,
                total: this.total,
                items: this.items,
                columns: this.columns,
                resizableColumns: true,
                fixedHeader: true,
                hover: true,
                treeInfo: this.treeInfo,
                searchAnyField: this.searchAnyField
            });
            return this._gridOptions;
        },
        set: /**
         * @param {?} opts
         * @return {?}
         */
        function (opts) {
            this._gridOptions = Object.assign({}, this._gridOptions, opts);
            // this.selectedColumns = this.multiSelMgr.initSelectedColumns();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "selections", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var selectItems = this.lookupSelectionSer.getSelections();
            if (this.singleSelect) {
                return selectItems[0];
            }
            else {
                return selectItems;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "usePersionalConf", {
        get: /**
         * @return {?}
         */
        function () {
            return this.useFavorite || this.useTip || this.isRecordSize;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "displayTextList", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.displayText) {
                return this.displayText.split(this.multipleChoiceSeparator);
            }
            return [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(LookupGridComponent.prototype, "userInitialConfig", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userSettings;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.initLabels = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.labels) {
            this.labels = {
                /**
                 * 数据列表
                 */
                dataTab: '',
                /**
                 * 收藏夹
                 */
                favTab: '',
                /**
                 * 取消已选
                 */
                clearAllSelected: '',
                /**
                 * 已选记录面板中 删除已选
                 */
                delSelected: ''
            };
        }
        if (!this.labels.clearAllSelected) {
            this.labels.clearAllSelected = this.localService.getValue('lookup.selectedInfo.clear');
        }
        if (!this.labels.favTab) {
            this.labels.favTab = this.localService.getValue('lookup.favorites');
        }
        if (!this.labels.dataTab) {
            this.labels.dataTab = this.localService.getValue('lookup.datalist');
        }
    };
    /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    LookupGridComponent.prototype.writeConsole = /**
     * @param {?} msg
     * @param {?=} type
     * @return {?}
     */
    function (msg, type) {
        if (type === void 0) { type = 'warn'; }
        if (this.debugSer) {
            this.debugSer[type](msg);
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getFilterBarHeight = /**
     * @return {?}
     */
    function () {
        return (this.showFilterBar && this.enableMultiFieldSearch ? 42 : 0);
    };
    /**
     * @param {?=} isDouble
     * @return {?}
     */
    LookupGridComponent.prototype.getSpaceWidth = /**
     * @param {?=} isDouble
     * @return {?}
     */
    function (isDouble) {
        if (isDouble === void 0) { isDouble = false; }
        return (!this.enableMultiFieldSearch ? 28 : 48) + (isDouble ? (this.enableMultiFieldSearch ? 5 : 7) : 0);
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.cacheUserConfig = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._userSettings._title = this.title;
        this.displayInfo.title = this.title;
        this._userSettings._columns = this.deepClone(this.columns || []);
        this._userSettings.getColumns = (/**
         * @return {?}
         */
        function () {
            return _this._userSettings._columns;
        });
        this._userSettings.reset = (/**
         * @return {?}
         */
        function () {
            _this.title = _this._userSettings._title;
            _this.displayInfo.title = _this.title;
            _this.columns = _this._userSettings.getColumns();
        });
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    LookupGridComponent.prototype.deepClone = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        var _this = this;
        if (obj === null) {
            return null;
        }
        /** @type {?} */
        var clone = Object.assign({}, obj);
        Object.keys(clone).forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            return (clone[key] =
                typeof obj[key] === "object"
                    ? _this.deepClone(obj[key])
                    : obj[key]);
        }));
        if (Array.isArray(obj)) {
            clone.length = obj.length;
            return Array.from(clone);
        }
        return clone;
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.cacheUserConfig();
        if (!this.loadTreeDataType) {
            this.loadTreeDataType = "default";
        }
        this.checkGridOptions();
        this.displayInfo.title = this.title;
        /** 传递上下文 */
        if (this.http) {
            this.http.context = this.context;
        }
        this.allColumnsTitle = this.localService.getValue("lookup.allColumns");
        this.mustWriteSomething = this.localService.getValue("lookup.mustWriteSomething");
        this.mustChoosAdatarow = this.localService.getValue("lookup.mustChoosAdatarow");
        this.addFavoriteSuccess =
            this.localService.getValue("lookup.favoriteInfo.addFav") ||
                this.addFavoriteSuccess;
        this.delFavoriteSuccess =
            this.localService.getValue("lookup.favoriteInfo.cancelFav") ||
                this.delFavoriteSuccess;
        this.dialogMgr.onDialogCreated();
        this._treeInfo_ = this.treeInfo ? cloneDeep(this.treeInfo) : null;
        if (this.quickSelect) {
            this.quickSelect = Object.assign({}, QuickSelectDefaultOptions, this.quickSelect || {});
        }
        this.setContainerMargin();
    };
    /** 内容中留白边距 */
    /**
     * 内容中留白边距
     * @return {?}
     */
    LookupGridComponent.prototype.setContainerMargin = /**
     * 内容中留白边距
     * @return {?}
     */
    function () {
        /** @type {?} */
        var mrn = !this.enableMultiFieldSearch ? 14 : 24;
        /** @type {?} */
        var mb = !this.enableMultiFieldSearch ? 5 : 0;
        this.containerMargin = { top: 0, bottom: mb, left: mrn, right: mrn };
        if (this.enableMultiFieldSearch) {
            this.useNewLayout = true;
        }
        this.containerStyle = {
            marginLeft: this.containerMargin.left + "px",
            marginRight: this.containerMargin.right + "px",
            marginTop: this.containerMargin.top + "px",
            marginBottom: this.containerMargin.bottom + "px",
        };
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnDestroy.call(this);
        this.subscriptions.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            if (n) {
                n.unsubscribe();
                n = null;
            }
        }));
        if (this.selectionMgr) {
            this.selectionMgr.destroy();
        }
        this.subscriptions = [];
        if (this.farrisInstances) {
            this.farrisInstances.destroy(this.el.nativeElement);
        }
        if (this.lookupSearchInputEvent) {
            this.lookupSearchInputEvent();
        }
        this.lookupUtils.destroy();
        this.overLayService.destory(this.el.nativeElement);
        this.overLayService = null;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupGridComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.cacheUserConfig();
        }
        if (changes.enableMultiFieldSearch && !changes.enableMultiFieldSearch.isFirstChange()) {
            this.setContainerMargin();
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (!this.quickSelect || !this.quickSelect.enable) {
            this.lookupSearchInputEvent = onTextChanged.bind(this)();
        }
        // 初始化个性化配置
        if (this.usePersionalConf) {
            this.favHelper.initPersonalInfo();
        }
        if (this.useExtendInfo) {
            /** @type {?} */
            var jsonData = this.selectionMgr.getBindingData();
            this.updateExtendInfo(jsonData, false);
        }
        if (this.viewType === "text") {
            // this.shortcuts.add({
            //     key: 'F2',
            //     target: this.inputGroup.textbox.nativeElement,
            //     command: () => {
            //         this.showDialog();
            //     }
            // });
            this.render2.listen(this.inputGroup.textbox.nativeElement, "keydown.F2", this.showDialog.bind(this));
        }
        else {
            this.registerMouseEventForTagView();
            if (this.tagboxHeight) {
                /** @type {?} */
                var el = this.tagbox.nativeElement.querySelector(".multi-more");
                /** @type {?} */
                var tbh = this.tagboxHeight;
                if (tbh !== "auto") {
                    tbh += "px";
                    if (this.maxTagboxHeight) {
                        this.render2.setStyle(el, "maxHeight", this.maxTagboxHeight + "px");
                    }
                }
                this.render2.setStyle(el, "height", tbh);
            }
        }
        if (this.el && this.farrisInstances) {
            this.farrisInstances.add(this.el.nativeElement, this);
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.createInstance = /**
     * @private
     * @return {?}
     */
    function () {
        this.http = this.injector.get(ServerSideToken, null);
        this.messagerService = this.injector.get(MessagerService);
        this.loadingService = this.injector.get(LoadingService);
        this.notifyService = this.injector.get(NotifyService, null);
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.lookupSelectionSer = new LookupSelectionService(this);
        this.utilService = new UtilService(this);
        this.localService = this.injector.get(LocaleService);
        this.treeNodeHelper = new TreeNodeHelper(this);
        this.favHelper = new FavoriteHelper(this);
        this.ttEventMgr = new TreeTableEventManager(this);
        this.multiSelMgr = new MultiSelectionManager(this);
        this.httpMgr = new LookupHttpManager(this);
        this.lookupCmpMgr = new LookupComponentManager(this);
        this.dialogMgr = new LookupDialogManager(this);
        this.selectionMgr = new SelectionManager(this);
        this.dtEventMgr = new DataTableEventManager(this);
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.showDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled || this.readonly) {
            return false;
        }
        this.selectionMgr.initDisplayValue();
        this.dictPickingSubscription = this.dictPicking({
            instance: this,
        }).subscribe((/**
         * @param {?} pr
         * @return {?}
         */
        function (pr) {
            _this.dialogMgr.canOpenDialog(pr);
        }));
        return false;
    };
    /** 判断是否为双列表帮助 */
    /**
     * 判断是否为双列表帮助
     * @return {?}
     */
    LookupGridComponent.prototype.isDoublleList = /**
     * 判断是否为双列表帮助
     * @return {?}
     */
    function () {
        return ((this.displayType === LookupGridDisplayType.NavList ||
            this.displayType === LookupGridDisplayType.NavTreeList ||
            this.displayType === LookupGridDisplayType.NavListTree) && this.showNavigation);
    };
    /** 判断是否显示为树帮助 */
    /**
     * 判断是否显示为树帮助
     * @return {?}
     */
    LookupGridComponent.prototype.isTree = /**
     * 判断是否显示为树帮助
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dtyp = this.displayType.toUpperCase();
        return (dtyp === LookupGridDisplayType.TreeList || dtyp === LookupGridDisplayType.NavListTree);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    LookupGridComponent.prototype.onResized = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        this.resizeCmp(e.size);
        this.resized.emit(e.size);
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupGridComponent.prototype.onResizing = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizing.emit(pos.size);
        this.resizeCmp(pos.size);
        if (this.isDoublleList() && this.leftComponentRef) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight(),
            });
        }
    };
    /**
     * @param {?} pos
     * @return {?}
     */
    LookupGridComponent.prototype.onMaxDialog = /**
     * @param {?} pos
     * @return {?}
     */
    function (pos) {
        this.resizeCmp(pos.size);
        if (this.leftPanel) {
            this.leftComponentRef.instance.resize({
                width: this.leftPanel.width,
                height: this.dialogMgr.getHeight(),
            });
        }
        // tfs 543132 
        // this.dialogHeight = pos.size.height;
        this.dialogContentHeight = this.dialogMgr.resetDialogContentHeight();
        this.dialogMaxed.emit(pos.size);
    };
    /**
     * @param {?=} size
     * @return {?}
     */
    LookupGridComponent.prototype.resizeCmp = /**
     * @param {?=} size
     * @return {?}
     */
    function (size) {
        if (!this.componentRef || !this.componentRef.instance) {
            return;
        }
        if (!size) {
            size = this.dialog.size;
        }
        /** @type {?} */
        var _size = {
            width: size.width -
                this.containerMargin.left -
                this.containerMargin.right,
            height: 0
        };
        if (this.useFavorite && this.favoritesComponentRef && this.activeTab == 'favorite') {
            _size.height = this.lookupCmpMgr.getCmpHeight(true);
            this.favoritesComponentRef.instance.resize(_size);
        }
        else {
            _size.height = this.lookupCmpMgr.getCmpHeight();
            if (this.isDoublleList()) {
                _size.width = size.width - this.leftPanel.width - this.getSpaceWidth(true);
            }
            this.componentRef.instance.resize(_size);
        }
        if (this.isRecordSize) {
            this.personalConf.size = this.dialog.size;
            this.personalConfigService.updatePersonalConfig({
                size: this.dialog.size,
            });
        }
        if (this.isDoublleList() && this.layoutRef) {
            this.layoutRef.setPanelMaxSize();
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.checkGridOptions = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.gridOptions.idField) {
            this.writeConsole("未设置主键字段 idField");
        }
        if (!this.beforeSelectData) {
            this.beforeSelectData = (/**
             * @return {?}
             */
            function () {
                return of(true);
            });
        }
        /** @type {?} */
        var ctxMenuLanguages = this.localService.getValue("lookup.contextMenu");
        this.treeTableOptions = Object.assign({ language: ctxMenuLanguages }, this.defaultTreeTableOptions, this.treeTableOptions || {});
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getComponentType = /**
     * @return {?}
     */
    function () {
        if (!this.displayType) {
            this.displayType = "LIST";
        }
        switch (this.displayType) {
            case LookupGridDisplayType.List:
            case LookupGridDisplayType.NavList:
            case LookupGridDisplayType.NavTreeList:
                return DataTableComponent;
            case LookupGridDisplayType.TreeList:
            case LookupGridDisplayType.NavListTree:
                return TreeTableComponent;
        }
    };
    /**
     * @param {?=} msg
     * @return {?}
     */
    LookupGridComponent.prototype.showLoading = /**
     * @param {?=} msg
     * @return {?}
     */
    function (msg) {
        if (msg === void 0) { msg = ""; }
        if (this.dialog && this.dialog.modalContent && !this.loading) {
            /** @type {?} */
            var opts = {
                container: this.dialog.modalContent,
                delay: 200,
            };
            if (msg) {
                opts["message"] = msg;
            }
            this.loading = this.loadingService.show(opts);
        }
        else {
            this.loading = this.loadingService.show();
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.closeLoading = /**
     * @return {?}
     */
    function () {
        if (this.loading) {
            this.loading.close();
            this.loading = null;
        }
        this.loadingService.clearAll();
    };
    /**
     * @param {?} resdata
     * @return {?}
     */
    LookupGridComponent.prototype.getSearchColumns = /**
     * @param {?} resdata
     * @return {?}
     */
    function (resdata) {
        /** @type {?} */
        var cols = resdata.columns || this.columns;
        if (resdata.searchFields) {
            return resdata.searchFields.map((/**
             * @param {?} sf
             * @return {?}
             */
            function (sf) {
                /** @type {?} */
                var c = cols.find((/**
                 * @param {?} col
                 * @return {?}
                 */
                function (col) { return col.field.toLowerCase() === sf.value.toLowerCase(); }));
                if (c) {
                    sf.label = c.title;
                }
                return sf;
            }));
        }
        else if (cols) {
            return cols
                .filter((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.searchField; }))
                .map((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                return {
                    label: col.title,
                    value: col.field,
                };
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.initOptions = /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        var _this = this;
        /** @type {?} */
        var obser = of(true);
        this.gridOptions.searchFields = this.getSearchColumns(resData);
        if (resData) {
            // 如果组件中未设置显示列，则使用服务器端返回的设置； 否则将使用组件中配置的展示列
            if ((!this.columns || !this.columns.length) &&
                resData.columns &&
                resData.columns.length) {
                this.columns = resData.columns;
            }
            this.initColumnWidth(this.columns);
            this.setLookupTitleText(resData);
            if (this.isDoublleList() &&
                this.dialogWidth < this.navLookupDialogMinWidth &&
                !this.isRecordSize) {
                this.dialogWidth = this.navLookupDialogMinWidth;
                this.dialog.reSize({ width: this.dialogWidth });
            }
            if (!this.customDisplayType) {
                // this.displayType = resData.displayType || this.displayType || 'LIST';
                // if (this.treeToList) {
                //     this.displayType = this.isDoublleList() ? ' NAVLIST ': 'LIST';
                // }
                this.changeDetector.detectChanges();
                this.lookupCmpMgr.createComponentWithServerData(resData);
            }
            if (this.isDoublleList() && resData.navigation && !this.leftComponentRef) {
                this.navigationOptions = resData.navigation;
                this.navigationOptions.hover = true;
                this.navigationOptions.searchFields = this.getSearchColumns(this.navigationOptions);
                this.initColumnWidth(this.navigationOptions.columns, 'nav');
                // update columns formatter
                if (this.customNavFormatter) {
                    this.navigationOptions.columns.forEach((/**
                     * @param {?} col
                     * @return {?}
                     */
                    function (col) {
                        if (_this.customNavFormatter[col.field]) {
                            col.formatter = _this.customNavFormatter[col.field];
                        }
                    }));
                    this.navigationOptions["rowStyler"] =
                        this.customNavFormatter.rowStyler;
                    this.navigationOptions["cellStyler"] =
                        this.customNavFormatter.cellStyler;
                }
                // 20210926 树导航帮助中 左侧树支持分层加载
                if (this.displayType === LookupGridDisplayType.NavTreeList) {
                    /** @type {?} */
                    var _nav_treeinfo_loadtype = this.navigationOptions.treeInfo.loadDataType;
                    if (this.loadTreeDataType !== "default") {
                        _nav_treeinfo_loadtype =
                            this.loadTreeDataType === "loadall"
                                ? "all"
                                : "async";
                    }
                    this.navigationOptions.treeInfo.loadDataType =
                        _nav_treeinfo_loadtype;
                }
                obser = this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
            }
        }
        else {
            this.lookupCmpMgr.createContent(this.gridOptions);
            this.lookupCmpMgr.createFavoriteComponent();
        }
        if (this.isTextChange) {
            this.componentRef.instance.searchData.value = this.displayText;
        }
        else {
            if (this._searchState && this._searchState.value) {
                this.componentRef.instance.searchData.value = this._searchState.value;
            }
        }
        // update columns formatter
        if (this.customFormatter) {
            this.columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (_this.customFormatter[col.field]) {
                    col.formatter = _this.customFormatter[col.field];
                }
            }));
            if (this.customFormatter.rowStyler) {
                this.componentRef.instance.rowStyler = this.customFormatter.rowStyler;
            }
            if (this.customFormatter.cellStyler) {
                this.componentRef.instance.cellStyler = this.customFormatter.cellStyler;
            }
        }
        else {
            if (resData.customStyles) {
                var _a = resData.customStyles, rowStylers_1 = _a.row, cellStylers_1 = _a.cell;
                /** @type {?} */
                var filterFn_1 = (/**
                 * @param {?} n
                 * @param {?} data
                 * @return {?}
                 */
                function (n, data) {
                    /** @type {?} */
                    var d = _this.utils.getValue(n.field, data);
                    if (typeof d === 'boolean') {
                        if (n.value == '0' || n.value == '1' || n.value == 'true' || n.value == 'false') {
                            return d === (n.value == '0' || n.value == 'false') ? false : true;
                        }
                        return d === !!n.value;
                    }
                    return d === n.value;
                });
                if (rowStylers_1) {
                    this.componentRef.instance.rowStyler = (/**
                     * @param {?} __0
                     * @return {?}
                     */
                    function (_a) {
                        var data = _a.data;
                        /** @type {?} */
                        var styleItem = rowStylers_1.find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return filterFn_1(n, data);
                        }));
                        if (styleItem) {
                            return styleItem.styles;
                        }
                        return null;
                    });
                }
                if (cellStylers_1) {
                    this.componentRef.instance.cellStyler = (/**
                     * @param {?} e
                     * @param {?} field
                     * @return {?}
                     */
                    function (e, field) {
                        var data = e.data;
                        /** @type {?} */
                        var styleItem = cellStylers_1.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.field === field; })).find((/**
                         * @param {?} t
                         * @return {?}
                         */
                        function (t) {
                            return filterFn_1(t, data);
                        }));
                        if (styleItem) {
                            return styleItem.styles;
                        }
                        return null;
                    });
                }
            }
        }
        // this.changeDetector.detectChanges();
        return obser;
    };
    /**
     * 设置帮助窗口标题
     */
    /**
     * 设置帮助窗口标题
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.setLookupTitleText = /**
     * 设置帮助窗口标题
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        if (resData.displayInfo) {
            this.displayInfo = resData.displayInfo;
        }
        // 如果自定义标题，将以此标题为准。否则加载服务器端返回的数据
        if (this.title && this.title !== "此处显示帮助标题") {
            this.displayInfo.title = this.title;
        }
        if (this.displayInfo && resData.title) {
            if (!this.displayInfo.title) {
                this.displayInfo.title = resData.title;
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.showGetAllChildrenCheckbox = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.isTree() && this.treeInfo) {
            this.enableGetAllChildNodes =
                this.treeInfo.loadDataType !== "all" && this.treeInfo.layerType === "pathcode";
        }
        else {
            this.enableGetAllChildNodes = false;
        }
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.initData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var observer = {
            next: (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data === false) {
                    if (!_this.columns || !_this.columns.length) {
                        _this.closeLoading();
                        _this.closeDialog();
                        if (!_this.messagerService.modals || !_this.messagerService.modals.length) {
                            _this.notifyService.error({ msg: _this.localService.getValue('lookup.configError'), timeout: 3000 });
                        }
                        return;
                    }
                }
                // 服务器端发生错误，返回NULL 时，直接关闭窗口
                if (data === null) {
                    _this.isShow = false;
                    if (_this.dialog) {
                        _this.dialog.close();
                    }
                    return;
                }
                _this.initOptions(data).subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.selectedColumns = _this.multiSelMgr.initSelectedColumns();
                    // this.favoriteColumns = this.favHelper.getFavoriteColumns();
                    if (_this.usePersionalConf) {
                        if (!_this.personalConfigService.getPersonalData()) {
                            _this.personalConfigService.savePersonalConfig(_this.personalConf);
                        }
                    }
                    if (!_this.isTabChanged) {
                        _this.lookupSelectionSer.loadSelections(data.selectedItems || []);
                    }
                    if (_this.isDoublleList()) {
                        // 导航帮助时，设置左侧选中数据时，不加载主数据列表。
                        if (_this.navSelectedIds || _this.selectFirstInNav) {
                            _this.loadDataWhenOpen = false;
                        }
                    }
                    if (data['activeTab'] && !_this.isTabChanged) {
                        _this.activeTab = 'datalist';
                        if (_this.personalConf && _this.personalConf.tabIndex !== _this.activeTab) {
                            _this.personalConf.tabIndex = _this.activeTab;
                        }
                    }
                    _this.loadData(data);
                    if (_this.isTree()) {
                        if (_this.activeTab === "datalist") {
                            /** @type {?} */
                            var tt = (/** @type {?} */ (_this.componentRef.instance));
                            if (tt.searchData.value && _this.items && _this.items.length) {
                                if (_this.items[0].children && _this.items[0].children.length) {
                                    tt.toggleExpand(_this.items[0], true, false);
                                }
                            }
                        }
                        _this.showGetAllChildrenCheckbox();
                    }
                    _this.isTextChange = false;
                    _this._searchResult = null; // 清空临时查询 结果
                    _this.closeLoading();
                    // this.isReady$.next(true);
                    _this.isReady = true;
                    _this.changeDetector.detectChanges();
                    _this.lookupinitializationSubject.next();
                    if (_this.layoutRef) {
                        _this.layoutRef.setPanelMaxSize();
                    }
                }));
            }),
            error: (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                // this.isReady$.next(true);
                _this.closeLoading();
                _this._searchResult = null; // 清空临时查询 结果
                _this.isTextChange = false;
                _this.hasError = true;
                _this.changeDetector.detectChanges();
                if (typeof err === "string") {
                    _this.messagerService.error(err);
                }
                else {
                    if (err) {
                        if (err.Message) {
                            _this.messagerService.error(err.Message);
                        }
                        else {
                            if (err.error) {
                                _this.messagerService.exception(err.error);
                            }
                            else {
                                _this.messagerService.error("应用服务器错误,请联系系统管理员！");
                            }
                        }
                    }
                }
            }),
        };
        /** @type {?} */
        var p = {
            pageInfo: {
                pageSize: this.pageSize || 20,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        var t = "all";
        if (this.isTextChange) {
            this._searchState = {
                field: "*",
                value: this.displayText
            };
        }
        // 分层加载支持设置展开层级
        if (this.isTree() || this.displayType === LookupGridDisplayType.NavTreeList) {
            if (this.expandLevel > -1) {
                p['expandLevel'] = this.expandLevel;
            }
        }
        if (this._searchState && this._searchState.value) {
            p['search'] = this._searchState;
            t = 'search';
            // if (this.conditions && !this.conditions.length && this.enableMultiFieldSearch) {
            //     this.conditions = [{
            //         "filterField": this.textField,
            //         "value": this._searchState.value,
            //         "lbracket": "",
            //         "rbracket": "",
            //         "relation": 0,
            //         "compare": 6
            //     }];
            // }
        }
        if (!this.isTabChanged && this.enableToSelect) {
            /** @type {?} */
            var vals = this.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p["selectedInfo"] = {
                    selected: true,
                    selectedIds: vals,
                };
            }
            else {
                if (this["selectedIds"]) {
                    p["selectedInfo"] = {
                        selected: true,
                        selectedIds: this["selectedIds"],
                    };
                }
            }
        }
        this.showLoading();
        this.hasError = false;
        this.httpMgr.lookupRequest(p, t).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        function (restData) {
            if (restData) {
                restData.selectedItems = restData["selectedData"] || [];
            }
            else {
                if (restData && typeof restData === "object") {
                    restData.selectedItems = [];
                }
            }
            return restData === null ? false : restData;
        })), switchMap((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (_this.beforeLoadData) {
                return _this.beforeLoadData({ instance: _this, res: res });
            }
            return of(res);
        }))).subscribe(observer);
    };
    /**
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    LookupGridComponent.prototype.loadData = /**
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    function (resData, rebindEvent) {
        if (rebindEvent === void 0) { rebindEvent = true; }
        if (this.activeTab === "datalist") {
            if (this.useFavorite && !this.isTree()) {
                this.favHelper.updateFavoritesStatus(resData.items);
            }
            switch (this.displayType) {
                case LookupGridDisplayType.NavList:
                case LookupGridDisplayType.NavTreeList:
                case LookupGridDisplayType.List:
                    this.loadDataTableData(resData);
                    if (rebindEvent) {
                        this.dtEventMgr.bindDataTableEvent();
                    }
                    break;
                case LookupGridDisplayType.TreeList:
                case LookupGridDisplayType.NavListTree:
                    this.loadTreeTableData(resData, rebindEvent);
                    break;
            }
        }
        else if (this.activeTab === "favorite") {
            this.loadFavData(resData);
        }
        // 选中数据
        this.selectionMgr.selectCurrentValue();
    };
    /**
     * @private
     * @param {?} result
     * @return {?}
     */
    LookupGridComponent.prototype.loadFavData = /**
     * @private
     * @param {?} result
     * @return {?}
     */
    function (result) {
        var _this = this;
        // 加载收藏数据
        if (this.useFavorite) {
            if (this.isTree()) {
                this.setTreeInfo(result);
                /** @type {?} */
                var treeNodes = this.favHelper.initFavoriteTreeData(result.items);
                /** @type {?} */
                var treeData = this.treeNodeHelper
                    .flatTreeNodes(treeNodes)
                    .map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    n.data["_addtional_"] = n["addtional"];
                    return n.data;
                }));
                this.lookupSelectionSer.initFavoriteItems(treeData);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.favoritesComponentRef.instance.scrollToY(1);
                }));
            }
            else {
                this.lookupSelectionSer.initFavoriteItems(result.items);
            }
            this.favHelper.loadFavoritesData(result);
        }
    };
    /**
     * @param {?=} resData
     * @return {?}
     */
    LookupGridComponent.prototype.loadDataTableData = /**
     * @param {?=} resData
     * @return {?}
     */
    function (resData) {
        if (resData) {
            if (this.useFavorite && !this.isTree()) {
                this.favHelper.updateFavoritesStatus(resData.items);
            }
            if (this.gridOptions) {
                if (resData && resData.columns && resData.columns.length) {
                    if (!this.gridOptions.columns ||
                        !this.gridOptions.columns.length) {
                        this.columns = resData.columns;
                    }
                }
                this.items = resData.items;
                this.total = resData.total || resData.items.length;
                if (resData.searchFields) {
                    this.gridOptions.searchFields = this.getSearchColumns(resData);
                }
                if (resData.pageInfo) {
                    if (resData.pageInfo.pageList &&
                        (!this.pageList || !this.pageList.length)) {
                        this.pageList = resData.pageInfo.pageList;
                    }
                    this.pagination = resData.pageInfo.enablePager;
                    this.pageIndex = resData.pageInfo.pageIndex;
                    this.pageSize = resData.pageInfo.pageSize;
                }
                else {
                    this.pagination = false;
                }
            }
            else {
                this.gridOptions = (/** @type {?} */ (resData));
            }
        }
        this.updateDataTable(this.gridOptions);
    };
    /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    LookupGridComponent.prototype.updateDataTable = /**
     * @private
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        if (opts) {
            /** @type {?} */
            var dt = (/** @type {?} */ (this.componentRef.instance));
            if (!dt.columns || dt.columns.length === 0) {
                dt.columns = this.gridOptions.columns;
            }
            dt.allColumnsTitle = this.allColumnsTitle;
            dt.searchFields = opts.searchFields;
            dt.pagination = opts.pagination;
            dt.pageList = this.pageList;
            dt.remoteSort = this.remoteSort;
            dt.striped = this.enableMultiFieldSearch;
            if (this.loadDataWhenOpen) {
                dt.loadData({
                    pageSize: opts.pageSize,
                    pageIndex: this.gridOptions.pageIndex,
                    total: this.gridOptions.total,
                    data: this.gridOptions.items,
                });
                dt.cd.markForCheck();
            }
            this.loadSuccess.emit();
        }
    };
    /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    LookupGridComponent.prototype.setTreeInfo = /**
     * @private
     * @param {?} resData
     * @return {?}
     */
    function (resData) {
        if (!resData) {
            return;
        }
        /** @type {?} */
        var _treeInfo = null;
        if (resData.treeInfo) {
            /** @type {?} */
            var onlySelectLeaf = resData.treeInfo.onlySelectLeaf;
            /** @type {?} */
            var _osl = "no";
            if (onlySelectLeaf !== undefined) {
                _osl = onlySelectLeaf ? "yes" : "no";
            }
            _treeInfo = __assign({}, resData.treeInfo, { onlySelectLeaf: _osl });
        }
        /** @type {?} */
        var treeInfo = this.gridOptions.treeInfo;
        if (treeInfo) {
            if (treeInfo.onlySelectLeaf === undefined ||
                treeInfo.onlySelectLeaf === null) {
                treeInfo.onlySelectLeaf = "no";
            }
            if (typeof treeInfo.onlySelectLeaf === "boolean") {
                treeInfo.onlySelectLeaf = treeInfo.onlySelectLeaf ? "yes" : "no";
            }
            // 20210902
            if (this.loadTreeDataType === "default") {
                treeInfo.loadDataType = _treeInfo.loadDataType;
            }
            else {
                treeInfo.loadDataType = this.loadTreeDataType === "loadall" ? "all" : "async";
                _treeInfo.loadDataType = treeInfo.loadDataType;
            }
            if (treeInfo.onlySelectLeaf !== "default") {
                _treeInfo = Object.assign(_treeInfo, treeInfo);
            }
        }
        else {
            if (this.loadTreeDataType !== "default") {
                _treeInfo.loadDataType = this.loadTreeDataType === "loadall" ? "all" : "async";
            }
        }
        this.treeInfo = _treeInfo;
    };
    /**
     * @private
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    LookupGridComponent.prototype.loadTreeTableData = /**
     * @private
     * @param {?=} resData
     * @param {?=} rebindEvent
     * @return {?}
     */
    function (resData, rebindEvent) {
        var _this = this;
        if (rebindEvent === void 0) { rebindEvent = true; }
        /** @type {?} */
        var items = resData ? resData.items : this.gridOptions.items;
        this.items = items;
        if (resData) {
            this.setTreeInfo(resData);
            /** @type {?} */
            var treeInfo = this.gridOptions.treeInfo;
            if (!treeInfo["treeDataIsInit"]) {
                if (treeInfo.layerType.toLowerCase() === "pathcode") {
                    this.items = this.lookupUtils.makeTree(this.items, treeInfo);
                }
                else {
                    this.items = this.lookupUtils.makeTreeWithParentID(this.items, "", treeInfo.dataField ? treeInfo.dataField + "." + treeInfo.parentField : treeInfo.parentField, this.idField);
                }
            }
        }
        if (this.componentRef.instance instanceof TreeTableComponent) {
            /** @type {?} */
            var tt_1 = (/** @type {?} */ (this.componentRef.instance));
            if (this.treeInfo) {
                tt_1.loadDataType = this.treeInfo.loadDataType;
            }
            if (!this.columns || !this.columns.length) {
                tt_1.columns = resData.columns || [];
                this.gridOptions.columns = tt_1.columns;
            }
            /** @type {?} */
            var isLoadAllTreeData = (/**
             * @return {?}
             */
            function () {
                if (_this.loadTreeDataType === "default") {
                    return tt_1.loadDataType === "all";
                }
                else {
                    return _this.loadTreeDataType === "loadall";
                }
            });
            if (rebindEvent) {
                this.ttEventMgr.bindTreetableEvent();
            }
            /** @type {?} */
            var isLoadAll = isLoadAllTreeData();
            /** 完整树节点检查 By Lucas 20200302 */
            this.items = this.checkNodeCanBeSelect(this.items, isLoadAll);
            tt_1.keepSelect = true;
            if (this.useFavorite) {
                this.favHelper.updateFavoritesStatus(this.items);
            }
            if (this.loadDataWhenOpen) {
                tt_1.loadData(this.items);
            }
            tt_1.resize();
        }
    };
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     */
    /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     * @param {?} nodes
     * @param {?=} isAllTreeData
     * @return {?}
     */
    LookupGridComponent.prototype.checkNodeCanBeSelect = /**
     * 在构完整树中，有部分节点因为条件被过滤，为显示完整树，
     * 这些节点在运行时是不允许被选中的, 返回新的节点数组
     * By Lucas 20200302
     * @param {?} nodes
     * @param {?=} isAllTreeData
     * @return {?}
     */
    function (nodes, isAllTreeData) {
        var _this = this;
        if (isAllTreeData === void 0) { isAllTreeData = false; }
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.hasOwnProperty("addtional")) {
                    node.selectable = !node["addtional"];
                }
                if (node.children && node.children.length) {
                    _this.checkNodeCanBeSelect(node.children, isAllTreeData);
                }
                else {
                    if (isAllTreeData && (!_this._searchState || !_this._searchState.value)) {
                        node.leaf = true;
                    }
                }
                return node;
            }));
        }
        return nodes;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupGridComponent.prototype.onChanges = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (!val) {
            this.onClear();
        }
        else {
            this.displayText = val;
            this.isTextChange = this.originalText !== this.displayText;
            if (this.nosearch) {
                this.setModelValue(val);
                this.clearMappings.emit({ instance: this, value: val, });
            }
            this.onModelTouched(val);
            this.valueChanged.emit(val);
            this.textChanged.emit(val);
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    LookupGridComponent.prototype.onClear = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.isTextChange = false;
        this.displayText = "";
        this.displayValue = "";
        this.originalText = "";
        this.extendInfo = "";
        this.setModelValue("");
        if (this.mappingFn) {
            this.mappingFn(null, this.mapFields);
        }
        else {
            if (this.mapFields) {
                /** @type {?} */
                var bindingData = this.selectionMgr.getBindingData();
                if (bindingData) {
                    this.defaultMapping.lookupFieldMap(null, this.mapFields, bindingData);
                }
            }
        }
        this.multiSelMgr.clear();
        if (emit) {
            this.clear.emit();
        }
    };
    /**
     * @param {?=} emit
     * @return {?}
     */
    LookupGridComponent.prototype.clearValue = /**
     * @param {?=} emit
     * @return {?}
     */
    function (emit) {
        if (emit === void 0) { emit = true; }
        this.onClear(emit);
    };
    /**
     * @param {?=} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.selectItem = /**
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        /** @type {?} */
        var selectedRow = null;
        if (rowData) {
            selectedRow = rowData;
        }
        else {
            selectedRow = this.selections;
            if (!selectedRow) {
                selectedRow = null;
            }
            else {
                if (Array.isArray(selectedRow) && !selectedRow.length) {
                    selectedRow = null;
                }
            }
        }
        this._searchState = {
            field: '*',
            value: ''
        };
        // 如果定义了自定义处理确定事件，则由自定义事件处理后面的逻辑
        if (this.okHandler) {
            this.okHandler({ data: selectedRow, instance: this });
        }
        else {
            if (this.beforeSelectData) {
                /** @type {?} */
                var bsdResult = this.beforeSelectData({
                    instance: this,
                    data: selectedRow,
                });
                if (bsdResult && bsdResult.subscribe) {
                    bsdResult.subscribe((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this._beforeSelectDataCallBack(e, selectedRow);
                    }));
                }
                else {
                    this.writeConsole('帮助数据选中前事件未返回值或返回类型非Observable, 请检查', 'error');
                }
            }
            else {
                this._beforeSelectDataCallBack(true, selectedRow);
            }
        }
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupGridComponent.prototype.getPathCode = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        return this.lookupUtils.getPathCode(data, treeInfo || this.treeInfo);
    };
    /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    LookupGridComponent.prototype.getLayerData = /**
     * @param {?} data
     * @param {?=} treeInfo
     * @return {?}
     */
    function (data, treeInfo) {
        if (treeInfo === void 0) { treeInfo = null; }
        return this.lookupUtils.getLayerData(data, treeInfo || this.treeInfo);
    };
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    LookupGridComponent.prototype.getParentPathCode = /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        /** @type {?} */
        var maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        function (arr, fn) {
            return Math.max.apply(Math, __spread(arr.map(typeof fn === "function" ? fn : (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val[fn]; }))));
        });
        // const { dataField, pathField, layerField } = this.treeInfo;
        /** @type {?} */
        var maxLayer = maxBy(rows, (/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.getLayerData(x); }));
        var _loop_1 = function (i) {
            /** @type {?} */
            var _rows = rows.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.getLayerData(n) === i; }));
            if (_rows && _rows.length && _rows.length < rows.length) {
                _rows.forEach((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    /** @type {?} */
                    var patchCode = _this.getPathCode(r);
                    /** @type {?} */
                    var _rows2 = rows.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        /** @type {?} */
                        var _pc = _this.getPathCode(n);
                        return _pc !== patchCode && _pc.indexOf(patchCode) === 0;
                    }));
                    if (_rows2 && _rows2.length) {
                        rows = rows.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.getPathCode(n) !== patchCode; }));
                    }
                }));
            }
        };
        for (var i = 1; i <= maxLayer; i++) {
            _loop_1(i);
        }
        return rows;
    };
    /**
     * @private
     * @param {?} e
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype._beforeSelectDataCallBack = /**
     * @private
     * @param {?} e
     * @param {?} selectedRow
     * @return {?}
     */
    function (e, selectedRow) {
        var _this = this;
        /** @type {?} */
        var canSelect = e;
        /** @type {?} */
        var message = "";
        if (typeof e === "boolean") {
            canSelect = e;
        }
        else {
            if (typeof e === "object") {
                canSelect = e.canSelect;
                message = e.message;
            }
            else {
                canSelect = false;
            }
        }
        if (!selectedRow) {
            message = this.mustChoosAdatarow;
            canSelect = false;
        }
        if (canSelect) {
            /** @type {?} */
            var selectedRows$ = of(selectedRow);
            // 多选 树帮助 异步加载 分级码 开启同步选择 或包含下级
            if (!this.singleSelect && this.enableCascade && this.isTree()) {
                if (this.treeInfo.loadDataType !== "all" && this.treeInfo.layerType === "pathcode" && this.isGetAllChidlNodes) {
                    /** @type {?} */
                    var parentsIds = this.getParentPathCode(selectedRow);
                    if (parentsIds && parentsIds.length) {
                        parentsIds = parentsIds.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return _this.getPathCode(n); }));
                        this.showLoading();
                        selectedRows$ = this.httpMgr
                            .getData({ parentsIds: parentsIds }, "allChildren")
                            .pipe(map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            /** @type {?} */
                            var items = r.items
                                ? r.items.map((/**
                                 * @param {?} d
                                 * @return {?}
                                 */
                                function (d) { return d.data; }))
                                : [];
                            /** @type {?} */
                            var allitems = __spread(selectedRow, items);
                            /** @type {?} */
                            var ids = allitems.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) { return n[_this.idField]; }));
                            ids = Array.from(new Set(ids));
                            return ids.map((/**
                             * @param {?} n
                             * @return {?}
                             */
                            function (n) {
                                return allitems.find((/**
                                 * @param {?} a
                                 * @return {?}
                                 */
                                function (a) { return a[_this.idField] === n; }));
                            }));
                        })));
                    }
                }
            }
            selectedRows$.subscribe((/**
             * @param {?} rows
             * @return {?}
             */
            function (rows) {
                _this.closeLoading();
                if (_this.isGetAllChidlNodes) {
                    _this.lookupSelectionSer.loadSelections(rows);
                }
                _this.updateControlValue(rows);
                if (!_this.useTip || !rows) {
                    return;
                }
                if (_this.useTip) {
                    _this.personalConfigService.updateQueckSelected(rows, _this.localService.localeId);
                }
            }));
        }
        else {
            if (message) {
                if (this.notifyService) {
                    this.notifyService.warning(message);
                }
                else {
                    this.messagerService.warning(message, "", true, (/**
                     * @return {?}
                     */
                    function () {
                        _this.dialog.el.nativeElement.click();
                    }));
                }
            }
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.updateControlValue = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (selectedRow) {
            this.setDisplayText(selectedRow);
            if (this.mappingFn) {
                this.mappingFn(selectedRow, this.mapFields, this.bindingData);
            }
            else {
                if (this.mapFields && this.bindingData) {
                    this.defaultMapping.lookupFieldMap(selectedRow, this.mapFields, this.bindingData);
                }
            }
            this.setModelValue(this.displayText);
            if (this["inDatagrid"] && selectedRow) {
                /** @type {?} */
                var selectItems = Array.isArray(selectedRow)
                    ? selectedRow
                    : [selectedRow];
                this.updateBindData(selectItems);
            }
            this.selectedData.emit(selectedRow);
            this.runDictPickedEvent(selectedRow);
            this.isTextChange = false;
        }
        else {
            if (document.activeElement) {
                ((/** @type {?} */ (document.activeElement))).blur();
            }
            this.messagerService.warning(this.mustChoosAdatarow);
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.updateBindData = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        var _this = this;
        if (!this.mapFields) {
            return;
        }
        /** @type {?} */
        var helpFields = Object.keys(this.mapFields);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_1 = this.ngControl.formDirective.form.bindingData;
            if (bindingData_1) {
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var val = selectedRow
                            .map((/**
                         * @param {?} r
                         * @return {?}
                         */
                        function (r) {
                            return _this.utils.getValue(helpField, r);
                        }))
                            .join(_this.multipleChoiceSeparator);
                        _this.utils.setValue(bindingData_1, formField, val);
                    }));
                }));
            }
            // if (bindingData.setValue) {
            //     const bindingPath = this.ngControl.formDirective.form.bindingPath;
            //     let pathArr: string[] = [];
            //     if (bindingPath) {
            //         pathArr = bindingPath.split('/').filter(n => n !== '');
            //     }
            //     helpFields.forEach((helpField: any) => {
            //         this.mapFields[helpField].split(',').forEach((formField: any) => {
            //             const fieldPaths = pathArr.concat(formField.split('.'));
            //             const val = selectedRow.map(r => {
            //                 return this.utils.getValue(formField, r);
            //             }).join(this.multipleChoiceSeparator);
            //             bindingData.setValue(pathArr.concat(fieldPaths), val, true, true);
            //         });
            //     });
            // }
        }
    };
    /**
     * @private
     * @param {?=} isHelpData
     * @return {?}
     */
    LookupGridComponent.prototype.getExtendInfoFields = /**
     * @private
     * @param {?=} isHelpData
     * @return {?}
     */
    function (isHelpData) {
        var _this = this;
        if (isHelpData === void 0) { isHelpData = true; }
        if (!this.extInfoFields) {
            this.writeConsole("\u672A\u8BBE\u7F6E\u6269\u5C55\u5B57\u6BB5\u3002");
            return [];
        }
        /** @type {?} */
        var tipFieldArr = this.extInfoFields.split(",");
        if (isHelpData) {
            /** @type {?} */
            var extendInfoFields = [];
            extendInfoFields = tipFieldArr.map((/**
             * @param {?} tf
             * @return {?}
             */
            function (tf) {
                /** @type {?} */
                var mapKey = Object.keys(_this.mapFields).find((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) {
                    return _this.mapFields[k] === tf;
                }));
                if (mapKey) {
                    return mapKey;
                }
                else {
                    _this.writeConsole("\u5728\u5E2E\u52A9\u6620\u5C04\u5B57\u6BB5\u4E2D\u672A\u627E\u5230" + tf);
                    return "";
                }
            }));
            return extendInfoFields;
        }
        return tipFieldArr;
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.onUpdateExtendInfo = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var jsonData = this.selectionMgr.getBindingData();
        this.updateExtendInfo(jsonData, false);
    };
    // 选中帮助数据后，更新扩展信息
    // 选中帮助数据后，更新扩展信息
    /**
     * @private
     * @param {?} data
     * @param {?=} isHelpData
     * @return {?}
     */
    LookupGridComponent.prototype.updateExtendInfo = 
    // 选中帮助数据后，更新扩展信息
    /**
     * @private
     * @param {?} data
     * @param {?=} isHelpData
     * @return {?}
     */
    function (data, isHelpData) {
        var _this = this;
        if (isHelpData === void 0) { isHelpData = true; }
        if (data) {
            if (this.extInfoFormatter) {
                if (Array.isArray(data)) {
                    /** @type {?} */
                    var tipString = data.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return _this.getExtendInfoText(n);
                    }));
                    this.extendInfo = tipString.join("，");
                }
                else {
                    this.extendInfo = this.getExtendInfoText(data);
                }
            }
            else {
                /** @type {?} */
                var extendInfoFields_1 = this.getExtendInfoFields(isHelpData);
                if (extendInfoFields_1 && extendInfoFields_1.length) {
                    if (Array.isArray(data)) {
                        /** @type {?} */
                        var tipString = data.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) {
                            return _this.getExtendInfoText(n, extendInfoFields_1);
                        }));
                        this.extendInfo = tipString.join("，");
                    }
                    else {
                        this.extendInfo = this.getExtendInfoText(data, extendInfoFields_1);
                    }
                }
            }
        }
    };
    /**
     * @private
     * @param {?} itemData
     * @param {?=} fields
     * @return {?}
     */
    LookupGridComponent.prototype.getExtendInfoText = /**
     * @private
     * @param {?} itemData
     * @param {?=} fields
     * @return {?}
     */
    function (itemData, fields) {
        var _this = this;
        if (fields === void 0) { fields = null; }
        if (typeof this.extInfoFormatter === "function") {
            return this.extInfoFormatter({
                bindingData: itemData,
                instance: this,
            });
        }
        else {
            /** @type {?} */
            var tipString_1 = [];
            /** @type {?} */
            var tipValues = fields.map((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                var _a;
                /** @type {?} */
                var tfv = _this.utils.getValue(t, itemData);
                tipString_1.push(tfv);
                return _a = {}, _a[t] = tfv, _a;
            }));
            return tipString_1.join(" ");
        }
    };
    /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    LookupGridComponent.prototype.getDisplayText = /**
     * @private
     * @param {?} rows
     * @return {?}
     */
    function (rows) {
        var _this = this;
        /** @type {?} */
        var df = this.displayFields
            ? this.displayFields.split(",")
            : [this.textField];
        /** @type {?} */
        var txtArr = rows.map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            /** @type {?} */
            var t = [];
            df.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                t.push(_this.utils.getValue(n, r));
            }));
            return t.join(_this.displayTextSeparator);
        }));
        if (this.gridOptions.singleSelect) {
            return txtArr.join("");
        }
        else {
            if (this.displayFields) {
                return txtArr.map((/**
                 * @param {?} t
                 * @return {?}
                 */
                function (t) { return "[" + t + "]"; })).join(this.multipleChoiceSeparator);
            }
            else {
                return txtArr.join(this.multipleChoiceSeparator);
            }
        }
    };
    /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    LookupGridComponent.prototype.setDisplayText = /**
     * @private
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        var _this = this;
        this.originalText = this.displayText;
        if (this.gridOptions.singleSelect) {
            if (this.displayFormatter) {
                this.displayText = this.utils.getValue(this.textField, selectedRow);
                if (!this.isTree()) {
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], {
                        lookup: this,
                        datatable: (/** @type {?} */ (this.componentRef
                            .instance)),
                    });
                }
                else {
                    /** @type {?} */
                    var tt = (/** @type {?} */ (this.componentRef.instance));
                    this.displayText = this.displayFormatter(this.displayText, [selectedRow], { lookup: this, tree: tt });
                }
            }
            else {
                this.displayText = this.getDisplayText([selectedRow]);
            }
            this.displayValue = selectedRow[this.valueField || this.idField];
        }
        else {
            if (selectedRow.length) {
                if (this.displayFormatter) {
                    this.displayText = selectedRow
                        .map((/**
                     * @param {?} r
                     * @return {?}
                     */
                    function (r) {
                        return _this.utils.getValue(_this.textField, r);
                    }))
                        .join(this.multipleChoiceSeparator);
                    if (!this.isTree()) {
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, {
                            lookup: this,
                            datatable: (/** @type {?} */ (this.componentRef
                                .instance)),
                        });
                    }
                    else {
                        /** @type {?} */
                        var tt = (/** @type {?} */ (this.componentRef
                            .instance));
                        this.displayText = this.displayFormatter(this.displayText, selectedRow, { lookup: this, tree: tt });
                    }
                }
                else {
                    this.displayText = this.getDisplayText(selectedRow);
                }
                this.displayValue = selectedRow
                    .map((/**
                 * @param {?} r
                 * @return {?}
                 */
                function (r) {
                    return _this.utils.getValue(_this.valueField || _this.idField, r);
                }))
                    .join(this.multipleChoiceSeparator);
            }
        }
        this.originalText = this.displayText;
    };
    /**
     * @param {?} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.runDictPickedEvent = /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        if (this.dictPicked) {
            if (this.okButton) {
                this.okButton.nativeElement.disabled = true;
            }
            this.dictPickedSubscription = this.dictPicked(rowData).subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                if (_this.okButton) {
                    _this.okButton.nativeElement.disabled = false;
                }
                if (typeof v === "boolean") {
                    if (v) {
                        _this.closeDialog(rowData);
                    }
                }
                else if (typeof v === "object" &&
                    v.closeDialog !== undefined &&
                    !v.closeDialog) {
                    if (v.message) {
                        _this.messagerService.warning(v.message);
                    }
                    else {
                        _this.closeDialog(rowData);
                    }
                }
                else {
                    _this.closeDialog(rowData);
                }
            }));
        }
        else {
            this.closeDialog(rowData);
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.focusToInput = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            setTimeout((/**
             * @return {?}
             */
            function () {
                if (_this.inputGroup && _this.inputGroup.textbox) {
                    _this.inputGroup.textbox.nativeElement.focus();
                }
            }));
        }));
    };
    /**
     * @param {?=} rowData
     * @return {?}
     */
    LookupGridComponent.prototype.closeDialog = /**
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData === void 0) { rowData = null; }
        if (this.dialog) {
            this.dialog.close();
        }
        if (rowData) {
            this.multiSelMgr.save(rowData);
        }
        // this.isShow = false;
        this.focusToInput();
    };
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.cancelSelect = /**
     * @return {?}
     */
    function () {
        this.closeDialog();
        this.isTextChange = false;
        if (!this.nosearch) {
            this.displayText = this.originalText;
            this.setModelValue(this.displayText);
        }
        if (this.cancelHandler) {
            this.cancelHandler(this);
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    LookupGridComponent.prototype.setModelValue = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (this.onModelChange) {
            this.onModelChange(v);
            this.valueChanged.emit(v);
        }
    };
    // 数据列表，收藏， 已选数据 tab 页切换
    // 数据列表，收藏， 已选数据 tab 页切换
    /**
     * @param {?} e
     * @return {?}
     */
    LookupGridComponent.prototype.onTabChange = 
    // 数据列表，收藏， 已选数据 tab 页切换
    /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _this = this;
        this.activeTab = e.tabIndex;
        this.personalConf.tabIndex = this.activeTab;
        /** @type {?} */
        var _firstChange = this.isTabChanged;
        this.isTabChanged = true;
        this.personalConfigService.updatePersonalConfig({
            tabIndex: e.tabIndex,
        });
        if (this.activeTab === "datalist") {
            if (this.isDoublleList() && !this.leftComponentRef) {
                if (this.navigationOptions) {
                    this.lookupCmpMgr.createLeftComponent(this.navigationOptions);
                }
                else {
                    this.initData();
                    return;
                }
            }
            if (!this.items || !this.items.length) {
                this.initData();
            }
            else {
                if (!_firstChange) {
                    if (this.isTree()) {
                        this.loadTreeTableData();
                    }
                    else {
                        this.loadDataTableData();
                        this.dtEventMgr.bindDataTableEvent();
                    }
                }
                // this.selectionMgr.selectCurrentValue();
            }
            this.showGetAllChildrenCheckbox();
        }
        else {
            if (this.activeTab === "favorite") {
                if (this.isTree()) {
                    this.initData();
                }
                else {
                    if (!this.favoriteItems ||
                        !this.favoriteItems.length ||
                        this.favoriteItems.length !== this.favHelper.getFavoritIds().length) {
                        this.initData();
                    }
                    else if (!_firstChange) {
                        this.favHelper._loadFavoriteData(this.favoriteItems);
                        // this.selectionMgr.selectCurrentValue();
                    }
                    //  else {
                    //     this.selectionMgr.selectCurrentValue();
                    // }
                }
            }
        }
        this.changeDetector.detectChanges();
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.resizeCmp();
            if (_this.isTree()) {
                /** @type {?} */
                var y = _this.componentRef.instance.state.scrollY;
                _this.componentRef.instance.scrollToY(y, 0);
                if (_this.enableCascade) {
                    _this.ttEventMgr.cascadeValueChanged(_this.cascadeStatus);
                }
            }
            if (_this.isDoublleList() && _this.displayType === LookupGridDisplayType.NavTreeList && !_this.navTreeToList) {
                _this.leftComponentRef.instance.updateScrollPosition();
            }
            _this.selectionMgr.selectCurrentValue();
        }));
    };
    //#region  Tag View ----------------------------------------------------------------------
    //#region  Tag View ----------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    LookupGridComponent.prototype.registerMouseEventForTagView = 
    //#region  Tag View ----------------------------------------------------------------------
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.enableClear) {
            this.tagbox.nativeElement.addEventListener("mouseenter", this.onTagboxMouseEnter.bind(this));
            this.tagbox.nativeElement.addEventListener("mouseleave", this.onTagboxMouseLeave.bind(this));
        }
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    LookupGridComponent.prototype.toggleClearIcon = /**
     * @private
     * @param {?} event
     * @param {?=} isShow
     * @return {?}
     */
    function (event, isShow) {
        if (isShow === void 0) { isShow = false; }
        /** @type {?} */
        var str = isShow ? "" : "none";
        /** @type {?} */
        var clearIcon = event.target.querySelector(".input-group-clear");
        if (clearIcon) {
            clearIcon.style.display = str;
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagboxMouseEnter = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.displayText && this.enableClear) {
            if (!this.readonly && !this.disabled) {
                this.showTagboxClearButton = true;
            }
        }
        if (this.showTagboxClearButton) {
            this.toggleClearIcon(event, true);
        }
    };
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagboxMouseLeave = /**
     * @private
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.toggleClearIcon(event);
    };
    /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    LookupGridComponent.prototype.onRemoveSelectItem = /**
     * @param {?} $event
     * @param {?} txt
     * @return {?}
     */
    function ($event, txt) {
        $event.stopPropagation();
        /** @type {?} */
        var textArray = Array.from(this.displayTextList);
        /** @type {?} */
        var removedIndex = this.displayTextList.indexOf(txt);
        textArray.splice(removedIndex, 1);
        this.displayText = textArray.join(this.multipleChoiceSeparator);
        this.originalText = this.displayText;
        this.setModelValue(this.displayText);
        if (this.displayValue) {
            /** @type {?} */
            var vals = this.displayValue.split(this.multipleChoiceSeparator);
            vals.splice(removedIndex, 1);
            this.displayValue = vals.join(this.multipleChoiceSeparator);
        }
        if (this.mapFields) {
            this.updateOtherFieldDataWhenTagremoved(removedIndex);
        }
        this.tagRemoved.emit({ removedIndex: removedIndex, instance: this });
    };
    /**
     * @private
     * @param {?} removedIndex
     * @return {?}
     */
    LookupGridComponent.prototype.updateOtherFieldDataWhenTagremoved = /**
     * @private
     * @param {?} removedIndex
     * @return {?}
     */
    function (removedIndex) {
        var _this = this;
        /** @type {?} */
        var helpFields = Object.keys(this.mapFields);
        /** @type {?} */
        var textFieldIndex = helpFields.indexOf(this.textField);
        if (this.ngControl &&
            this.ngControl.formDirective &&
            this.ngControl.formDirective.form &&
            this.ngControl.formDirective.form.bindingData) {
            /** @type {?} */
            var bindingData_2 = this.ngControl.formDirective.form.bindingData;
            if (bindingData_2.setValue) {
                /** @type {?} */
                var bindingPath = this.ngControl.formDirective.form.bindingPath;
                /** @type {?} */
                var pathArr_1 = [];
                if (bindingPath) {
                    pathArr_1 = bindingPath.split("/").filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n !== ""; }));
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var fieldPaths = pathArr_1.concat(formField.split("."));
                        /** @type {?} */
                        var val = bindingData_2.getValue(fieldPaths);
                        /** @type {?} */
                        var valArr = val.split(_this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        var newVal = valArr.join(_this.multipleChoiceSeparator);
                        bindingData_2.setValue(pathArr_1.concat(fieldPaths), newVal, true, true);
                    }));
                }));
            }
        }
        else {
            if (this.bindingData) {
                if (textFieldIndex > -1) {
                    helpFields.splice(textFieldIndex, 1);
                }
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    _this.mapFields[helpField]
                        .split(",")
                        .forEach((/**
                     * @param {?} formField
                     * @return {?}
                     */
                    function (formField) {
                        /** @type {?} */
                        var val = _this.utils.getValue(formField, _this.bindingData);
                        /** @type {?} */
                        var valArr = val.split(_this.multipleChoiceSeparator);
                        valArr.splice(removedIndex, 1);
                        /** @type {?} */
                        var newVal = valArr.join(_this.multipleChoiceSeparator);
                        _this.utils.setValue(_this.bindingData, formField, newVal);
                    }));
                }));
            }
        }
    };
    //#endregion
    //#endregion
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onAllChildNodesClick = 
    //#endregion
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isGetAllChidlNodes = !this.isGetAllChidlNodes;
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupGridComponent.prototype.onIncludeSubordinatesChange = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.includeSubordinates = val;
        this.includeSubordinates$.next(val);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onTagContainerClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        if (this.tagInput) {
            this.tagInput.focus();
            this.tagInput.textbox.nativeElement.click();
        }
    };
    /**
     * @param {?} nodes
     * @return {?}
     */
    LookupGridComponent.prototype.expandFirstNode = /**
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this = this;
        if (nodes && nodes.length) {
            return nodes.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) {
                if (node.children && node.children.length) {
                    node.expanded = true;
                    _this.expandFirstNode(node.children);
                }
                return node;
            }));
        }
        return nodes;
    };
    // 用于组织个性化数据key
    // 用于组织个性化数据key
    /**
     * @return {?}
     */
    LookupGridComponent.prototype.getLookupBindingFields = 
    // 用于组织个性化数据key
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.ngControl) {
            if (this.ngControl.name) {
                return this.ngControl.name;
            }
            else {
                if (this.mapFields && this.mapFields.length) {
                    return Object.keys(this.mapFields).map((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) {
                        return _this.mapFields[k];
                    })).join('_');
                }
                else {
                    return this.textField;
                }
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onConditionsChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.isTree()) {
            this.ttEventMgr.conditionsChange($event);
        }
        else {
            this.dtEventMgr.conditionsChange($event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.clearSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        /** @type {?} */
        var msg = this.localService.getValue('lookup.selectedInfo.confirm');
        this.messagerService.confirm(msg || '您确认要取消所有已选中的记录吗？').subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e) {
                _this.multiSelMgr.clear();
                if (_this.selectedDtRef) {
                    _this.selectedDtRef.clearSelections();
                }
            }
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupGridComponent.prototype.onDeleteSelectedItem = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if ($event) {
            $event.stopPropagation();
        }
        if (this.selectedDtRef.selections && this.selectedDtRef.selections.length) {
            /** @type {?} */
            var unCheckeIds = this.selectedDtRef.selections.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.idField]; }));
            this.multiSelMgr.deleteSelectedItems(this.selectedDtRef.selections);
            this.selectedDtRef.unCheckRows(unCheckeIds);
        }
        else {
            this.notifyService.warning('请勾选要删除的记录！');
        }
    };
    /**
     * @param {?} columns
     * @param {?=} typ
     * @return {?}
     */
    LookupGridComponent.prototype.initColumnWidth = /**
     * @param {?} columns
     * @param {?=} typ
     * @return {?}
     */
    function (columns, typ) {
        if (typ === void 0) { typ = 'data'; }
        if (this.personalConf && this.personalConf.colSizeInfo && this.personalConf.colSizeInfo.data) {
            /** @type {?} */
            var fieldsizeData_1 = this.personalConf.colSizeInfo[typ];
            if (fieldsizeData_1) {
                /** @type {?} */
                var fields = Object.keys(fieldsizeData_1);
                if (fields && fields.length) {
                    columns.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        if (fieldsizeData_1[n.field]) {
                            n.width = fieldsizeData_1[n.field];
                        }
                    }));
                }
            }
        }
    };
    LookupGridComponent.decorators = [
        { type: Component, args: [{
                    selector: "farris-lookup-grid",
                    template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-06-16 13:44:59\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-18 08:47:32\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n <input-group #inputgroup\r\n    *ngIf=\"viewType === 'text'\"\r\n    [groupText]=\"groupIcon\"\r\n    [lookup-tip]= \"useTip\"\r\n    [(ngModel)]=\"displayText\"\r\n    [disabled]=\"disabled\"\r\n    [readonly]=\"readonly\"\r\n    [editable]=\"editable\"\r\n    [customCls]=\"'lookupbox'\"\r\n    [placeholder]=\"'lookup.placeholder' | locale: '\u8BF7\u9009\u62E9': placeholder\"\r\n    [enableClear]=\"enableClear\"\r\n    [useExtendInfo]=\"useExtendInfo\"\r\n    [extendInfo]=\"extendInfo\"\r\n    [maxLength]=\"maxLength\"\r\n    (updateExtendInfo)=\"onUpdateExtendInfo()\"\r\n    [textAlign]=\"textAlign\"\r\n    [value]=\"displayText\"\r\n    (valueChange)=\"onChanges($event)\"\r\n    (clickHandle)=\"showDialog()\"\r\n    (clear)=\"onClear()\"\r\n    [quick-select]=\"quickSelect\"\r\n></input-group>\r\n\r\n<!--Tag style-->\r\n<div #tagbox class=\"input-group\" [class.f-state-disabled]=\"disabled\" [class.f-state-readonly]=\"readonly\" *ngIf=\"viewType === 'tag'\" [attr.title]=\"displayText\">\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"height: auto; min-height: 24px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;\" #tagContainer (click)=\"onTagContainerClick($event)\">\r\n            <span class=\"multi--item\" *ngFor=\"let txt of displayTextList; let index\" title=\"\" style=\"cursor: default;padding: 0 5px;\r\n            background: #ebf7fe;\r\n            border: 1px solid #cfedff;\r\n            position: relative;\r\n            padding-right: 20px;\r\n            margin-right: 3px;margin-top: 1px;height:18px; float: left;\">\r\n                {{txt}}\r\n                <i class=\"f-icon f-icon-close\" *ngIf=\"!readonly && !disabled\" style=\"cursor: pointer;position:absolute; right: 2px\" (click)=\"onRemoveSelectItem($event, txt)\"></i>\r\n            </span>\r\n\r\n            <span *ngIf=\"quickSelect && quickSelect.enable && !readonly && !disabled\" style=\"flex: 1;position: relative;min-width: 100px;height: 18px;margin: 0;padding: 0;float: left;overflow: hidden;\">\r\n                <!-- <input type=\"text\" style=\"border: 0;outline: none;width: 100px;\" #tagInput> -->\r\n                <input-group #tagInput style=\"position: absolute; top: 0px; height: 20px;align-items: center;display: flex;left: -8px; width: 100%\"\r\n                    [placeholder]=\"'lookup.placeholder' | locale: '\u8BF7\u9009\u62E9': placeholder\"\r\n                    [quick-select]=\"quickSelect\"  [enableClear]=\"false\" [noborder]=\"true\"\r\n                ></input-group>\r\n            </span>\r\n        </div>\r\n        <!-- <div class=\"multi--more\" *ngIf=\"selections && selections.length\">\r\n            <i class=\"f-icon multi--more-icon\"></i><span class=\"multi--more-text\">{{selections.length}}</span>\r\n        </div> -->\r\n    </div>\r\n    <div class=\"input-group-append\" style=\"position: relative;\" title=\"\" >\r\n        <span class=\"input-group-text input-group-clear\" style=\"display: none; padding: 0px 4px;position: absolute;right: 22px;height: 100%;\" (click)=\"onClear()\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <span class=\"input-group-text\" (click)=\"showDialog()\">\r\n            <span class=\"f-icon f-icon-lookup\"></span>\r\n        </span>\r\n    </div>\r\n</div>\r\n\r\n\r\n<farris-dialog\r\n    #dialog\r\n    *ngIf=\"isShow\"\r\n    [draggable]=\"draggable\"\r\n    [resizable]=\"resizable\"\r\n    [title]=\"displayInfo.title\"\r\n    [beforeOpen]=\"beforeOpen\"\r\n    [beforeClose]=\"beforeClose\"\r\n    [(width)]=\"dialogWidth\"\r\n    [(height)]=\"dialogHeight\"\r\n    [showButtons]=\"showButtons\"\r\n    [showMaxButton]=\"showMaxButton\"\r\n    [showCloseButton]=\"true\"\r\n    [buttons]=\"buttonsRef || defaultButtonRef\"\r\n    [buttonAlign]=\"buttonAlign\"\r\n    [enableScroll]=\"false\"\r\n    [dialogHeaderHeight]=\"50\"\r\n    (maxed)=\"onMaxDialog($event)\"\r\n    (resized)=\"onResized($event)\"\r\n    (resizing)=\"onResizing($event)\"\r\n    [showHeader] = \"!useNewLayout\"\r\n    class=\"farris-lookup-dialog\"\r\n    [class.lookup-advanced]=\"useNewLayout\"\r\n    [minWidth]=\"550\"\r\n    [minHeight]=\"480\"\r\n>\r\n\r\n    <div [ngStyle]=\"containerStyle\" style=\"height: 100%;\" >\r\n        <lookup-tabs (tabChange)=\"onTabChange($event)\" [enableFav]=\"useFavorite\" [activeTab]=\"activeTab\" \r\n            [visible]=\"isReady\" [dialogTitle]=\"displayInfo.title\" [layout]=\"useNewLayout ? 'advanced': 'default'\"\r\n           >\r\n            <div datalist class=\"d-flex f-utils-absolute-all flex-column\">   \r\n                <layout [direction]=\"'h'\" [fill]=\"true\" *ngIf=\"isDoublleList()\" #layout>\r\n                    <layout-panel #leftPanel [width]=\"leftPanelWidth\" region=\"west\" [minWidth]=\"200\" [showBorder]=\"false\" [overflow]=\"'hidden'\">\r\n                        <ng-container #leftContainer></ng-container>\r\n                    </layout-panel>\r\n                    <layout-panel region=\"center\" [showBorder]=\"false\" [overflow]=\"'hidden'\" [minWidth]=\"200\">\r\n                        <div class=\"lookup-filter-bar\" lookup-filter-bar *ngIf=\"enableMultiFieldSearch && showFilterBar\" [viewType]=\"searchBarMode\"\r\n                            (conditionsChange)=\"onConditionsChange($event)\" [searchAnyField]=\"searchAnyField\" [columns]=\"columns\" [searchFields]=\"gridOptions?.searchFields\"></div>\r\n                        <ng-container #centerContainer></ng-container>\r\n                    </layout-panel>\r\n                </layout>\r\n                <div class=\"lookup-filter-bar\" lookup-filter-bar *ngIf=\"!isDoublleList() && enableMultiFieldSearch && showFilterBar\" [viewType]=\"searchBarMode\"\r\n                    [columns]=\"columns\" (conditionsChange)=\"onConditionsChange($event)\" [searchAnyField]=\"searchAnyField\"  [searchFields]=\"gridOptions?.searchFields\"></div>\r\n                <ng-container *ngIf=\"!isDoublleList()\" #contentContainer></ng-container>\r\n            </div>\r\n            <div favorites  class=\"d-flex f-utils-all h-100\" *ngIf=\"useFavorite\"> \r\n                <ng-container #favoritesContainer></ng-container>\r\n            </div>\r\n        </lookup-tabs>\r\n\r\n    </div>\r\n</farris-dialog>\r\n\r\n<ng-template #selectedPagerExtendTemplate let-dtref>\r\n    <button class=\"btn btn-link btn-sm p-0 pl-1 mr-3\" \r\n        *ngIf=\"dtref?.selections && dtref?.selections.length\" (click)=\"onDeleteSelectedItem($event)\">\r\n        {{ 'lookup.selectedInfo.remove' | locale | replaceX: dtref?.selections.length}}\r\n    </button>\r\n</ng-template>\r\n\r\n\r\n<ng-template #defaultButtonRef>\r\n    <!-- \u5DF2\u9009\u8BB0\u5F55\u6D6E\u5C42 -->\r\n    <div class=\"lookup-selected-panel fade hide d-none\" #selectedpanel  *ngIf=\"showSelected\">\r\n        <div class=\"arrow\" [style.left.px]=\"displayType==='NAVTREELIST' && activeTab === 'datalist' && showNavigation ? 123: 38\"></div>\r\n        <div class=\"overlay\" style=\"top: 0px;\"></div>\r\n        <div class=\"content lookup-datalist\" #panelContent>\r\n\r\n            <farris-datatable #multiSelectDT \r\n                [idField]=\"idField\"\r\n                [bordered]=\"false\"\r\n                [width]=\"panelContent.offsetWidth - 28\"\r\n                [columns]=\"selectedColumns\"\r\n                [data]=\"currentSelectedItems | async\"\r\n                (cellClick)=\"multiSelMgr?.onSelectedTableCellClick($event)\"\r\n                [singleSelect]=\"false\"\r\n                [striped]=\"true\"\r\n                [pagination]=\"true\"\r\n                [pageSize]=\"20\"\r\n                [pagerOnServer]=\"false\"\r\n                [pagerViewMode]=\"'simple'\"\r\n                [showPageInfo]=\"false\" \r\n                [showPageNumber]=\"false\" \r\n                [showPageList]=\"false\"\r\n                [remoteSort]=\"false\"\r\n                [total]=\"(currentSelectedItems | async)?.length\"\r\n                [pagerExtendTemplate]=\"selectedPagerExtendTemplate\"\r\n                [autoFitColumns]=\"true\"\r\n            >\r\n        </farris-datatable>\r\n\r\n        </div>\r\n        <div class=\"overlay\" style=\"bottom: 0px;\"></div>\r\n    </div>\r\n\r\n\r\n   \r\n<!--\u4EE5\u4E0B\u4E3A\u6309\u94AE\u533A\u57DF-->\r\n\r\n    <div class=\"f-utils-fill d-flex flex-row m-0\" style=\"text-align: left; align-items: center;height: 30px\" *ngIf=\"isReady\">\r\n        <!--\u5DE6\u4FA7\u5BFC\u822A\u6811 \u5305\u542B\u4E0B\u7EA7-->\r\n        <div class=\"d-flex mr-2\" *ngIf=\"displayType==='NAVTREELIST' && activeTab === 'datalist' && showNavigation\">\r\n            <div class=\"custom-control custom-checkbox custom-control-inline m-0 p-0\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"farris-lookup-nav_get-all-child-nodes\" [ngModel]=\"includeSubordinates\" (ngModelChange)=\"onIncludeSubordinatesChange($event)\">\r\n                <label class=\"custom-control-label btn-link lookup-checkbox-label\" for=\"farris-lookup-nav_get-all-child-nodes\" style=\"padding-left: 18px;\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</label>\r\n            </div>\r\n        </div>\r\n\r\n        <ng-container *ngIf=\" !singleSelect\">\r\n\r\n            <!--\u5DF2\u9009\u8BB0\u5F55-->\r\n            <div class=\"lookup-selected-bar d-flex\" *ngIf=\"showSelected\" \r\n                [style.pointerEvents]=\"(currentSelectedItems | async)?.length ? 'auto': 'none'\" \r\n                [style.opacity]=\"(currentSelectedItems | async)?.length ? 1: 0.4\"\r\n                lookup-selected [count]=\" (currentSelectedItems | async)?.length\"\r\n                [selectedPanel]=\"selectedpanel\" [dataTableRef]=\"selectedDtRef\"\r\n                [class.mr-2]=\"!((currentSelectedItems | async)?.length)\"\r\n                [innerHTML]=\"'lookup.selectedInfo.total' | locale | replaceX: (currentSelectedItems | async)?.length\">\r\n            </div>\r\n            <button class=\"btn btn-link btn-sm p-0 pl-1 mr-3 lookup-clear-selected-items\" \r\n                *ngIf=\"showSelected && (currentSelectedItems | async)?.length\" (click)=\"clearSelected($event)\">\r\n                {{labels.clearAllSelected}}\r\n            </button>\r\n\r\n            <!--\u6811\u8868\u5E2E\u52A9\u7EA7\u8054\u63A7\u5236-->\r\n            <select *ngIf=\"showCascadeControl && enableCascade && displayType==='TREELIST'\" class=\"form-control\" style=\"width: auto; display: inline-block\" (ngModelChange)=\"ttEventMgr?.cascadeValueChanged($event)\" \r\n            [ngModel]=\"cascadeStatus\" name=\"cascadeStatus\" single-select #cascadeSelect=\"singleSelect\" [panelRef]=\"selectpanel\" [width]=\"110\" [position]=\"'above'\">\r\n                <!-- <option value=\"enable\" *ngIf=\"cascadeItems ? cascadeItems.enable : true\">{{ 'lookup.cascade.enable' | locale: '\u540C\u6B65\u9009\u62E9' }}</option>\r\n                <option value=\"up\" *ngIf=\"cascadeItems ? cascadeItems.up : true\">{{ 'lookup.cascade.up' | locale: '\u5305\u542B\u4E0A\u7EA7' }}</option>\r\n                <option value=\"down\" *ngIf=\"cascadeItems ? cascadeItems.down : true\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</option>\r\n                <option value=\"disable\" *ngIf=\"cascadeItems ? cascadeItems.disable : true\">{{ 'lookup.cascade.disable' | locale: '\u4EC5\u9009\u62E9\u81EA\u8EAB' }}</option> -->\r\n            </select>\r\n            <div #selectpanel class=\"single-select-panel f-area-hide\" [style.left]=\"showSelected ? (currentSelectedItems | async)?.length ? '164px': '92px': 'auto'\">\r\n                <ul class=\"dropdown-menu show\">\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'enable'\" value=\"enable\" *ngIf=\"cascadeItems ? cascadeItems.enable : true\">{{ 'lookup.cascade.enable' | locale: '\u540C\u6B65\u9009\u62E9' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'up'\" value=\"up\" *ngIf=\"cascadeItems ? cascadeItems.up : true\">{{ 'lookup.cascade.up' | locale: '\u5305\u542B\u4E0A\u7EA7' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'down'\" value=\"down\" *ngIf=\"cascadeItems ? cascadeItems.down : true\">{{ 'lookup.cascade.down' | locale: '\u5305\u542B\u4E0B\u7EA7' }}</li>\r\n                    <li class=\"dropdown-item\" [class.active]=\"cascadeStatus === 'disable'\" value=\"disable\" *ngIf=\"cascadeItems ? cascadeItems.disable : true\">{{ 'lookup.cascade.disable' | locale: '\u4EC5\u9009\u62E9\u81EA\u8EAB' }}</li>\r\n                </ul>\r\n            </div>\r\n\r\n            <!--\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E-->\r\n            <div class=\"f-utils-fill custom-control custom-checkbox custom-control-inline m-0 p-0 ml-2\" *ngIf=\"enableGetAllChildNodes && enableCascade && displayType==='TREELIST'\">\r\n                <input class=\"custom-control-input\" type=\"checkbox\" id=\"farris-lookup_get-all-child-nodes\">\r\n                <label class=\"custom-control-label btn-link lookup-checkbox-label\" for=\"farris-lookup_get-all-child-nodes\" \r\n                    style=\"padding-left: 18px;overflow: hidden;white-space: nowrap;text-overflow: ellipsis;\" title=\"{{'lookup.getAllChilds'|locale: '\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E'}}\"\r\n                    (click)=\"onAllChildNodesClick($event)\">{{'lookup.getAllChilds'|locale: '\u83B7\u53D6\u6240\u6709\u5B50\u7EA7\u6570\u636E'}}</label>\r\n            </div>\r\n        </ng-container>\r\n    </div>\r\n\r\n    <button type=\"button\" class=\"btn btn-secondary btn-lg\" (click)=\"cancelSelect()\" [disabled]=\"!(isReady || hasError)\" >\r\n        {{ 'lookup.cancelText' | locale: '\u53D6\u6D88' }}\r\n    </button>\r\n    <button #okbtn type=\"button\" [disabled]=\"!isReady\" class=\"btn btn-primary btn-lg\" >\r\n        {{ 'lookup.okText' | locale: '\u786E\u5B9A' }}\r\n    </button>\r\n   \r\n    \r\n</ng-template>\r\n",
                    providers: [
                        LOOKUPGRID_VALUE_ACCESSOR,
                        ShortcutsService,
                        LookupDefaultMapping,
                        LookupUtils,
                        PersonalConfigService,
                    ],
                    encapsulation: ViewEncapsulation.None,
                    exportAs: "lookup",
                    styles: [".input-group{flex-wrap:nowrap}.ng-dirty.ng-invalid>input-group>.lookupbox{border-color:#ff0303}.lookup-clear{cursor:pointer;background:#fff!important}.lookup-clear:hover{background:#e9ecef!important}.f-lookup-favorite{cursor:pointer;color:#ff9800}.f-lookup-unfavorite{cursor:pointer;color:#dd2438}.lookup-tip{position:absolute;min-width:200px;max-height:400px;padding:.25rem 0;z-index:7777;background:#fff;box-shadow:0 2px 8px 0 rgba(0,0,0,.15);border-radius:2px}.lookup-tip .lookup-tip-header{font-weight:700;padding:.25rem .475rem;border-radius:0}.lookup-tip ul{display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;padding-left:0;margin-bottom:0}.lookup-tip ul li{position:relative;display:block;width:100%;margin-bottom:-1px;padding:.25rem .875rem;color:rgba(0,0,0,.85);background-color:#fff;cursor:pointer}.lookup-tip ul li:hover{background-color:#e6f7ff}.f-lookup_quick-panel{height:100%;z-index:10001;position:absolute;overflow:auto;background:#fff;margin-top:.25rem;box-shadow:0 2px 8px 0 #dedede;border-radius:3px}.f-lookup_quick-panel .list{margin:0 6px}.f-lookup_quick-panel .list-group-item{padding:0 8px;border:0;margin-bottom:0;word-break:break-all;min-height:30px}.f-lookup_quick-panel .more{height:50px;text-align:center;line-height:50px}.f-lookup_quick-panel .norecord{height:100%;-webkit-box-pack:center;justify-content:center;-webkit-box-align:center;align-items:center;display:-webkit-box;display:flex;font-size:16px;color:#bec6db}"]
                }] }
    ];
    /** @nocollapse */
    LookupGridComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ElementRef },
        { type: CommonUtils },
        { type: LookupDefaultMapping },
        { type: ChangeDetectorRef },
        { type: ShortcutsService },
        { type: LookupUtils },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    LookupGridComponent.propDecorators = {
        customDisplayType: [{ type: Input }],
        viewType: [{ type: Input }],
        displayType: [{ type: Input }],
        enableClear: [{ type: Input }],
        remoteSort: [{ type: Input }],
        condition: [{ type: Input }],
        conditions: [{ type: Input }],
        showCheckAll: [{ type: Input }],
        singleSelect: [{ type: Input }],
        multipleChoiceSeparator: [{ type: Input }],
        idField: [{ type: Input }],
        uri: [{ type: Input }],
        beUri: [{ type: Input }],
        showFilterBar: [{ type: Input }],
        pagination: [{ type: Input }],
        pageIndex: [{ type: Input }],
        pageSize: [{ type: Input }],
        pageList: [{ type: Input }],
        total: [{ type: Input }],
        columns: [{ type: Input }],
        remoteSearch: [{ type: Input }],
        searchOnServer: [{ type: Input }],
        nosearch: [{ type: Input }],
        clearMappings: [{ type: Output }],
        maxLength: [{ type: Input }],
        mappingFn: [{ type: Input }],
        items: [{ type: Input }],
        favoriteItems: [{ type: Input }],
        customData: [{ type: Input }],
        bindingData: [{ type: Input }],
        treeInfo: [{ type: Input }],
        enableCascade: [{ type: Input }],
        cascadeStatus: [{ type: Input }],
        cascadeItems: [{ type: Input }],
        showCascadeControl: [{ type: Input }],
        placeholder: [{ type: Input }],
        showSelected: [{ type: Input }],
        useFavorite: [{ type: Input }],
        favoriteDataFrom: [{ type: Input }],
        useTip: [{ type: Input }],
        isRecordSize: [{ type: Input }],
        userId: [{ type: Input }],
        enableToSelect: [{ type: Input }],
        enableFindText: [{ type: Input }],
        expandLevel: [{ type: Input }],
        navTreeTableOptions: [{ type: Input }],
        treeTableOptions: [{ type: Input }],
        dataTableOptions: [{ type: Input }],
        loadTreeDataType: [{ type: Input }],
        loadDataWhenOpen: [{ type: Input }],
        navSelectedIds: [{ type: Input }],
        selectFirstInNav: [{ type: Input }],
        enableFullTree: [{ type: Input }],
        displayFormatter: [{ type: Input }],
        displayFields: [{ type: Input }],
        displayTextSeparator: [{ type: Input }],
        helpId: [{ type: Input }],
        textAlign: [{ type: Input }],
        enableTitle: [{ type: Input }],
        useExtendInfo: [{ type: Input }],
        extInfoFields: [{ type: Input }],
        extInfoFormatter: [{ type: Input }],
        extendInfo: [{ type: Input }],
        customFormatter: [{ type: Input }],
        customNavFormatter: [{ type: Input }],
        okHandler: [{ type: Input }],
        cancelHandler: [{ type: Input }],
        tagboxHeight: [{ type: Input }],
        maxTagboxHeight: [{ type: Input }],
        enableGetAllChildNodes: [{ type: Input }],
        shortcutKey: [{ type: Input }],
        quickSelect: [{ type: Input }],
        treeToList: [{ type: Input }],
        navTreeToList: [{ type: Input }],
        showNavigation: [{ type: Input }],
        beforeSelectData: [{ type: Input }],
        beforeLoadData: [{ type: Input }],
        useNewLayout: [{ type: Input }],
        enableMultiFieldSearch: [{ type: Input }],
        searchBarMode: [{ type: Input }],
        allowQueryFields: [{ type: Input }],
        labels: [{ type: Input }],
        searchAnyField: [{ type: Input }],
        selectedData: [{ type: Output }],
        clear: [{ type: Output }],
        search: [{ type: Output }],
        query: [{ type: Output }],
        valueChanged: [{ type: Output }],
        loadSuccess: [{ type: Output }],
        pagerChanged: [{ type: Output }],
        expandTreeNode: [{ type: Output }],
        textChanged: [{ type: Output }],
        checkedChange: [{ type: Output }],
        tagRemoved: [{ type: Output }],
        gridOptions: [{ type: Input }],
        contentContainer: [{ type: ViewChild, args: ["contentContainer", { read: ViewContainerRef },] }],
        favoritesContainer: [{ type: ViewChild, args: ["favoritesContainer", { read: ViewContainerRef },] }],
        leftContainer: [{ type: ViewChild, args: ["leftContainer", { read: ViewContainerRef },] }],
        centerContainer: [{ type: ViewChild, args: ["centerContainer", { read: ViewContainerRef },] }],
        selectedDtRef: [{ type: ViewChild, args: ["multiSelectDT",] }],
        inputGroup: [{ type: ViewChild, args: ["inputgroup",] }],
        leftPanel: [{ type: ViewChild, args: ["leftPanel",] }],
        tagbox: [{ type: ViewChild, args: ["tagbox",] }],
        okButton: [{ type: ViewChild, args: ["okbtn",] }],
        tagInput: [{ type: ViewChild, args: ["tagInput",] }],
        selectedpanel: [{ type: ViewChild, args: ['selectedpanel',] }],
        cascadeSelect: [{ type: ViewChild, args: ['cascadeSelect',] }],
        layoutRef: [{ type: ViewChild, args: ['layout',] }]
    };
    return LookupGridComponent;
}(LookupComponent));

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupTabsComponent = /** @class */ (function () {
    function LookupTabsComponent(injector) {
        this.injector = injector;
        this.enableFav = false;
        this.activeTab = 'datalist';
        this.visible = false;
        this.layout = 'default';
        this.dialogTitle = '';
        this.tabChange = new EventEmitter();
        this.render = null;
        this.el = null;
        this.lookupIns = null;
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.render = this.injector.get(Renderer2);
        this.el = this.injector.get(ElementRef);
        this.lookupIns = this.injector.get(LookupGridComponent, null);
        if (!this.lookupIns.labels) {
            this.lookupIns.initLabels();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupTabsComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.activeTab && !changes.activeTab.isFirstChange()) {
            this.initInkBarPos(changes.activeTab.currentValue);
        }
    };
    /**
     * @return {?}
     */
    LookupTabsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.initInkBarPos(_this.activeTab);
        }), 300);
    };
    /**
     * @param {?} e
     * @param {?} v
     * @return {?}
     */
    LookupTabsComponent.prototype.navClickHandle = /**
     * @param {?} e
     * @param {?} v
     * @return {?}
     */
    function (e, v) {
        e.stopPropagation();
        if (this.activeTab !== v) {
            this.activeTab = v;
            this.tabChange.emit({ event: e, tabIndex: v });
            this.initInkBarPos(v);
        }
    };
    /**
     * @param {?} which
     * @return {?}
     */
    LookupTabsComponent.prototype.initInkBarPos = /**
     * @param {?} which
     * @return {?}
     */
    function (which) {
        if (this.layout !== 'default') {
            return;
        }
        if (!this.enableFav) {
            return;
        }
        /** @type {?} */
        var width = this.dataListNavRef.nativeElement.offsetWidth;
        /** @type {?} */
        var left = 0;
        if (which !== 'datalist') {
            left = this.dataListNavRef.nativeElement.offsetWidth;
        }
        if (which === 'favorite') {
            width = this.favoriteNavRef.nativeElement.offsetWidth;
        }
        else if (which === 'selected') {
            if (this.favoriteNavRef) {
                left += this.favoriteNavRef.nativeElement.offsetWidth;
            }
            if (this.selectedNavRef) {
                width = this.selectedNavRef.nativeElement.offsetWidth;
            }
            else {
                this.activeTab = 'datalist';
            }
        }
        this.inkBarRef.nativeElement.style = "width: " + width + "px; transform: translate3d(" + left + "px, 0px, 0px);";
    };
    /**
     * @return {?}
     */
    LookupTabsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    LookupTabsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lookup-tabs',
                    template: "<div class=\"lookup-tabs-nav\" *ngIf=\"enableFav && layout === 'default'\">\r\n    <div class=\"nav-item\" [class.nav-item-selected]=\"activeTab === 'datalist'\" (click)=\"navClickHandle($event, 'datalist')\" #dataListNav>{{ 'lookup.datalist' | locale: '\u6570\u636E\u5217\u8868' }}</div>\r\n    <div class=\"nav-item\" [class.nav-item-selected]=\"activeTab === 'favorite'\" *ngIf=\"enableFav\" (click)=\"navClickHandle($event, 'favorite')\" #favoriteNav>{{ 'lookup.favorites' | locale: '\u6536\u85CF\u5939' }}</div>\r\n    <div class=\"tabs-ink-bar tabs-ink-bar-animated\" #inkBar></div>\r\n</div>\r\n\r\n<lookup-advanced-layout *ngIf=\"layout !== 'default'\" \r\n#advanceLayout class=\"lookup-advanced-layout\"\r\n[title]=\"dialogTitle\"\r\n[enableFav]=\"enableFav\"\r\n[activeTab]=\"activeTab\"\r\n[dataTab]=\"lookupIns?.labels.dataTab\"\r\n[favTab]=\"lookupIns?.labels.favTab\"\r\n(tabChanged)=\"navClickHandle($event.$event, $event.tab)\"></lookup-advanced-layout>\r\n\r\n<div class=\"lookup-tabs-content\" style=\"transition: all 0.1s ease-in;\" [style.opacity]=\"visible ? 1: 0\">\r\n    <div class=\"lookup-datalist\" style=\"height:100%\"  @flyInOut *ngIf=\"activeTab === 'datalist'\">\r\n        <div style=\"height: 100%\">\r\n            <ng-content select=\"[datalist]\"></ng-content>\r\n        </div>\r\n    </div>\r\n    <div class=\"lookup-datalist lookup-favorites\" style=\"height:100%; padding-top: 10px;\" @flyInOut *ngIf=\"activeTab === 'favorite'\" >\r\n        <div style=\"height: 100%\">\r\n            <ng-content select=\"[favorites]\"></ng-content>\r\n        </div>\r\n    </div>\r\n</div>",
                    animations: [
                        trigger('flyInOut', [
                            transition(':enter', [style({ opacity: 0 }), animate('.3s', style({ opacity: 1 }))]),
                            transition(':leave', [animate('.3s', style({ opacity: 0 }))])
                        ])
                    ],
                    styles: [":host{display:-webkit-box;display:flex;height:100%;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}:host .lookup-tabs-nav{position:relative;display:inline-block;box-sizing:border-box;margin:0;padding-left:0;list-style:none;-webkit-transition:-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1)}:host .lookup-tabs-nav .nav-item{position:relative;display:inline-block;text-decoration:none;box-sizing:border-box;padding:.625rem .8125rem;color:inherit;cursor:pointer}:host .lookup-tabs-nav .nav-item-selected{color:#1890ff}:host .lookup-tabs-nav .tabs-ink-bar{position:absolute;bottom:1px;left:0;z-index:1;box-sizing:border-box;height:2px;background-color:#1890ff;-webkit-transform-origin:0 0;transform-origin:0 0}:host .lookup-tabs-nav .tabs-ink-bar-animated{-webkit-transition:width .3s cubic-bezier(.645,.045,.355,1),left .3s cubic-bezier(.71,.03,.35,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1);transition:transform .3s cubic-bezier(.645,.045,.355,1),width .3s cubic-bezier(.645,.045,.355,1),left .3s cubic-bezier(.71,.03,.35,1),-webkit-transform .3s cubic-bezier(.645,.045,.355,1)}:host .lookup-tabs-content{-webkit-box-flex:1;flex:1;border-top:1px solid #cecece;position:relative;top:-2px}"]
                }] }
    ];
    /** @nocollapse */
    LookupTabsComponent.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    LookupTabsComponent.propDecorators = {
        enableFav: [{ type: Input }],
        activeTab: [{ type: Input }],
        visible: [{ type: Input }],
        layout: [{ type: Input }],
        dialogTitle: [{ type: Input }],
        tabChange: [{ type: Output }],
        inkBarRef: [{ type: ViewChild, args: ['inkBar',] }],
        dataListNavRef: [{ type: ViewChild, args: ['dataListNav',] }],
        favoriteNavRef: [{ type: ViewChild, args: ['favoriteNav',] }],
        selectedNavRef: [{ type: ViewChild, args: ['selectedNav',] }],
        advanceLayoutRef: [{ type: ViewChild, args: ['advanceLayout',] }]
    };
    return LookupTabsComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupTipDirective = /** @class */ (function () {
    function LookupTipDirective(inputRef, renderer, injector) {
        this.inputRef = inputRef;
        this.renderer = renderer;
        this.injector = injector;
        this.enableTip = false;
        this.isInTipPanel = false;
        this.tipText = '您要找的是不是这些？';
        this.personalConfigService = this.injector.get(PersonalConfigService, null);
        this.localService = this.injector.get(LocaleService);
    }
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.tipText = this.localService.getValue('lookup.tipText');
        this.enableTip = false; // 因数据权限问题，此功能暂屏蔽 tfs: 403924
        if (this.enableTip) {
            this.inputRef.iconMouseEnter.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.creatPanel();
            }));
            this.inputRef.iconMouseLeave.pipe(delay(200)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (!_this.isInTipPanel) {
                    _this.removePanel();
                }
            }));
            this.inputRef.clickHandle.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.removePanel();
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () { };
    // 获取快捷输入数据
    // 获取快捷输入数据
    /**
     * @private
     * @return {?}
     */
    LookupTipDirective.prototype.getQuickSelectedByLocaleId = 
    // 获取快捷输入数据
    /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var localeid = this.localService.localeId;
        /** @type {?} */
        var personalConf = this.personalConfigService.getPersonalData();
        if (personalConf && personalConf.quickSelected) {
            /** @type {?} */
            var items = personalConf.quickSelected[localeid];
            if (items && items.length) {
                return items;
            }
        }
        return null;
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.creatPanel = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.selected = this.getQuickSelectedByLocaleId();
        if (this.tipPanel || !this.selected || (this.selected && this.selected.length === 0)) {
            return;
        }
        /** @type {?} */
        var pos = this.setPosition();
        /** @type {?} */
        var ul = this.renderer.createElement('ul');
        /** @type {?} */
        var path = this.personalConfigService.textField.split('.');
        this.selected.forEach((/**
         * @param {?} item
         * @param {?} index
         * @return {?}
         */
        function (item, index) {
            /** @type {?} */
            var li = _this.renderer.createElement('li');
            li.innerHTML = _this.find(item, _this.personalConfigService.textField);
            _this.renderer.setProperty(li, 'id', index);
            _this.renderer.appendChild(ul, li);
        }));
        /** @type {?} */
        var header = this.renderer.createElement('div');
        this.renderer.addClass(header, 'lookup-tip-header');
        header.innerHTML = this.tipText;
        this.tipPanel = this.renderer.createElement('div');
        this.renderer.appendChild(this.tipPanel, header);
        this.renderer.appendChild(this.tipPanel, ul);
        this.renderer.addClass(this.tipPanel, 'lookup-tip');
        this.renderer.setStyle(this.tipPanel, 'top', pos.top);
        this.renderer.setStyle(this.tipPanel, 'left', pos.left);
        this.renderer.setStyle(this.tipPanel, 'width', pos.width);
        this.renderer.appendChild(document.body, this.tipPanel);
        this.leaveEvent = this.renderer.listen(this.tipPanel, 'mouseleave', (/**
         * @return {?}
         */
        function () {
            _this.removePanel();
        }));
        this.enterEvent = this.renderer.listen(this.tipPanel, 'mouseenter', (/**
         * @return {?}
         */
        function () {
            _this.isInTipPanel = true;
        }));
        this.clickEvent = this.renderer.listen(this.tipPanel, 'click', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (e.target.nodeName === 'LI') {
                _this.selectItem(e.target.id);
            }
        }));
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.removePanel = /**
     * @return {?}
     */
    function () {
        if (document.body.contains(this.tipPanel)) {
            this.renderer.removeChild(document.body, this.tipPanel);
            this.tipPanel = null;
            this.isInTipPanel = false;
            this.leaveEvent();
            this.enterEvent();
            this.clickEvent();
        }
    };
    /**
     * @return {?}
     */
    LookupTipDirective.prototype.setPosition = /**
     * @return {?}
     */
    function () {
        var _a = this.inputRef.inputGroup.nativeElement.getBoundingClientRect(), left = _a.left, top = _a.top, width = _a.width, height = _a.height;
        return {
            left: left + 'px',
            top: top + height + 'px',
            width: width + 'px'
        };
    };
    /**
     * @param {?} val
     * @return {?}
     */
    LookupTipDirective.prototype.selectItem = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        /** @type {?} */
        var item = this.selected.find((/**
         * @param {?} el
         * @param {?} index
         * @return {?}
         */
        function (el, index) { return Number(val) === index; }));
        this.removePanel();
        if (this.personalConfigService.singleSelect) {
            this.personalConfigService.selectItemObser$.next(item);
        }
        else {
            this.personalConfigService.selectItemObser$.next([item]);
        }
    };
    /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    LookupTipDirective.prototype.find = /**
     * @param {?} obj
     * @param {?} keys
     * @return {?}
     */
    function (obj, keys) {
        /** @type {?} */
        var keyArr = keys.split('.');
        /** @type {?} */
        var key = keyArr[0];
        /** @type {?} */
        var target = obj[key];
        if (target instanceof Object) {
            keyArr.shift();
            return this.find(target, keyArr.join('.'));
        }
        else {
            return target;
        }
    };
    LookupTipDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[lookup-tip]'
                },] }
    ];
    /** @nocollapse */
    LookupTipDirective.ctorParameters = function () { return [
        { type: InputGroupComponent },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    LookupTipDirective.propDecorators = {
        enableTip: [{ type: Input, args: ['lookup-tip',] }]
    };
    return LookupTipDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupQuickSelectPanelComponent = /** @class */ (function () {
    function LookupQuickSelectPanelComponent(injector, cdr) {
        this.injector = injector;
        this.cdr = cdr;
        this.showMore = true;
        this.data = [];
        this.textField = '';
        this.maxItems = 10;
        this.moreClcik = new EventEmitter();
        this.itemClick = new EventEmitter();
        this.activeIndex = -1;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.onClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
    };
    /**
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} items
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.loadData = /**
     * @param {?} items
     * @return {?}
     */
    function (items) {
        this.data = items;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.onMoreClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.moreClcik.emit($event);
    };
    /**
     * @param {?} rowObj
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.formatData = /**
     * @param {?} rowObj
     * @return {?}
     */
    function (rowObj) {
        return this.formatter(rowObj);
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.onItemClick = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        this.itemClick.emit({ data: item, evnet: $event });
    };
    /**
     * @param {?} index
     * @return {?}
     */
    LookupQuickSelectPanelComponent.prototype.setActiveItem = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.activeIndex = index;
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    LookupQuickSelectPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lookup-quick-select-panel',
                    template: "<div class=\"d-flex flex-column\" style=\"width: 100%;height:100%;padding-top: 5px\" #itemsContainer>\r\n    <!-- <div class=\"header\"></div> -->\r\n    <div class=\"list f-utils-fill f-datalist\" style=\"overflow: auto;\">\r\n        <ul class=\"list-group list-group-flush p-0\"  [class.h-100]=\"!data || !data.length\">\r\n            <li class=\"list-group-item list-group-item-action\" [class.active]=\"activeIndex === i\" *ngFor=\"let item of data; index as i\" (click)=\"onItemClick($event, item)\">\r\n                <span *ngIf=\"!formatter\">{{ textField | getvalue: item }}</span> \r\n                <span *ngIf=\"formatter\" [innerHTML]=\"formatData(item) | safe:'html'\"></span>\r\n            </li>\r\n\r\n            <li class=\"norecord\" *ngIf=\"!data || !data.length\">\r\n                {{ 'lookup.quick.notfind'|locale }}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"more\" *ngIf=\"showMore && data && data.length && data.length >= maxItems\">\r\n        <button class=\"btn btn-link\" (click)=\"onMoreClick($event)\"> {{ 'lookup.quick.more'|locale }}</button>\r\n    </div>\r\n     <!-- <div class=\"footer\"></div> -->\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    LookupQuickSelectPanelComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef }
    ]; };
    LookupQuickSelectPanelComponent.propDecorators = {
        showMore: [{ type: Input }],
        data: [{ type: Input }],
        textField: [{ type: Input }],
        formatter: [{ type: Input }],
        maxItems: [{ type: Input }],
        moreClcik: [{ type: Output }],
        itemClick: [{ type: Output }],
        itemsContainer: [{ type: ViewChild, args: ['itemsContainer',] }],
        onClick: [{ type: HostListener, args: ['mousedown', ['$event'],] }]
    };
    return LookupQuickSelectPanelComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupQuickSelectDirective = /** @class */ (function () {
    function LookupQuickSelectDirective(injector, ngzone, render, inputRef, lookupRef, cfr) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.inputRef = inputRef;
        this.lookupRef = lookupRef;
        this.cfr = cfr;
        this.data = [];
    }
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.options && this.options.enable) {
            this.inputRef.inputClick.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                if (!_this.panelElement) {
                    // 执行帮助前
                    _this.lookupRef.dictPicking({
                        instance: _this,
                    }).subscribe((/**
                     * @param {?} pr
                     * @return {?}
                     */
                    function (pr) {
                        if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!_this.lookupRef.singleSelect && _this.lookupRef.viewType === 'text')) {
                            return;
                        }
                        var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                        _this.lookupRef.customData = customData;
                        if (show) {
                            _this.createDataPanel();
                        }
                        else {
                            if (message) {
                                _this.lookupRef.notifyService.warning(message);
                            }
                        }
                    }));
                }
            }));
            this.inputRef.valueChange.pipe(debounceTime(200)).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                _this.lookupRef.dictPicking({ instance: _this }).subscribe((/**
                 * @param {?} pr
                 * @return {?}
                 */
                function (pr) {
                    if (_this.lookupRef.displayType === LookupGridDisplayType.TreeList || (!_this.lookupRef.singleSelect && _this.lookupRef.viewType === 'text')) {
                        return;
                    }
                    var _a = _this.lookupRef.dialogMgr.checkDictPickingResult(pr), show = _a.show, customData = _a.customData, message = _a.message;
                    _this.lookupRef.customData = customData;
                    if (!_this.panelElement) {
                        _this.createDataPanel();
                    }
                    else {
                        _this.panelElement.style.overflow = 'hidden';
                        _this.setPanelPosition(false);
                        _this.loadData();
                    }
                }));
            }));
            this.inputRef.keydownHandle.pipe(filter((/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return event.key === 'Escape' || event.key === 'Tab' || event.key === 'F2';
            }))).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.hide(e);
            }));
        }
    };
    /**
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.lookupRef.overLayService.destory(this.lookupRef.el.nativeElement);
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.removePanelElement = /**
     * @private
     * @return {?}
     */
    function () {
        document.body.removeChild(this.panelElement);
        this.panelElement = null;
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.clearSearchValue = /**
     * @private
     * @return {?}
     */
    function () {
        this.lookupRef._searchState = {
            field: '*',
            //"*",
            value: ''
        };
    };
    /**
     * @param {?=} e
     * @param {?=} isMoreClick
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.hide = /**
     * @param {?=} e
     * @param {?=} isMoreClick
     * @return {?}
     */
    function (e, isMoreClick) {
        var _this = this;
        if (isMoreClick === void 0) { isMoreClick = false; }
        reqAnimFrame((/**
         * @return {?}
         */
        function () {
            if (_this.panelElement) {
                if (e && (e.type === 'mousewheel' || e.type === 'wheel')) {
                    _this.removePanelElement();
                }
                else {
                    _this.panelElement.classList.remove('f-area-show');
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.removePanelElement();
                    }), 120);
                }
                if (!_this.lookupRef) {
                    return;
                }
                // tfs 579056
                if (_this.lookupRef.overLayService) {
                    _this.lookupRef.overLayService.destory(_this.lookupRef.el.nativeElement);
                }
                if (isMoreClick) {
                    return;
                }
                if (_this.lookupRef.tagInput) {
                    // this.lookupRef.tagInput.value = '';
                    _this.inputRef.value = '';
                    _this.clearSearchValue();
                }
                if (e && (e.key === 'F2' || _this.lookupRef.el.nativeElement.contains(e.target))) {
                    if (_this.data && _this.data.length) {
                        return;
                    }
                    else {
                        _this.clearSearchValue();
                    }
                }
                if (!_this.lookupRef.nosearch && _this.lookupRef.displayText !== _this.lookupRef.originalText) {
                    _this.lookupRef.onChanges(_this.lookupRef.originalText);
                }
            }
        }));
    };
    /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.setPanelPosition = /**
     * @private
     * @param {?=} updateTopPosition
     * @return {?}
     */
    function (updateTopPosition) {
        if (updateTopPosition === void 0) { updateTopPosition = true; }
        if (this.panelElement) {
            var _a = this.getPanelSize(), width = _a.width, left = _a.left, top_1 = _a.top, height = _a.height;
            this.panelElement.style.width = width + "px";
            this.panelElement.style.maxHeight = height + "px";
            if (updateTopPosition) {
                this.panelElement.style.top = top_1 + "px";
            }
            this.panelElement.style.left = left + "px";
            this.panelElement.style.zIndex = '10001';
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.createDataPanel = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.lookupRef.changeDetector['destroyed']) {
            this.panelElement && this.removePanelElement();
            return;
        }
        this.panelElement = document.createElement('div');
        this.panelElement.classList.add('overlay-pane', 'f-lookup_quick-panel', 'f-area-hide');
        document.body.appendChild(this.panelElement);
        this.setPanelPosition();
        this.panelElement.style.overflow = 'hidden';
        // this.panelElement.style.height = 'auto';
        // 创建数据展示组件
        /** @type {?} */
        var cmpFact = this.cfr.resolveComponentFactory(LookupQuickSelectPanelComponent);
        this.cmpRef = cmpFact.create(this.injector);
        this.cmpRef.instance.showMore = this.options.showMore;
        this.cmpRef.instance.textField = this.lookupRef.textField;
        this.cmpRef.instance.formatter = this.options.formatter;
        this.cmpRef.instance.maxItems = this.options.showItemsCount;
        // cmpRef.location.nativeElement.classList.add('farris-main-area');
        this.panelElement.appendChild(this.cmpRef.location.nativeElement);
        this.lookupRef.selectionMgr.initDisplayValue();
        this.cmpRef.changeDetectorRef.detectChanges();
        // more clicked 打开帮助窗口
        this.cmpRef.instance.moreClcik.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            _this.hide(e, true);
            _this.lookupRef.showDialog();
        }));
        this.cmpRef.instance.itemClick.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            var data = e.data;
            _this.selectItem(data);
        }));
        // 注册鼠标滚轮，点击事件，用于隐藏Panel
        this.lookupRef.overLayService.registerMouseEvent(this.lookupRef.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (!_this.panelElement || e.target['closest']('.f-lookup_quick-panel')) {
                return;
            }
            if (_this.lookupRef.inputGroup && _this.lookupRef.inputGroup.textbox.nativeElement === e.target) {
                return false;
            }
            if (_this.lookupRef.tagInput && _this.lookupRef.tagInput.textbox.nativeElement === e.target) {
                return false;
            }
            if (_this.cmpRef) {
                _this.cmpRef.destroy();
                _this.cmpRef = null;
            }
            _this.clearSearchValue();
            _this.hide(e);
        }));
        this.panelElement.classList.add('f-area-show');
        this.loadData();
    };
    /**
     * @private
     * @param {?} data
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.selectItem = /**
     * @private
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        if (!data) {
            return;
        }
        if (this.lookupRef.viewType === 'tag') {
            /** @type {?} */
            var isSelect = this.lookupRef.selections.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.lookupRef.idField] === data[_this.lookupRef.idField]; }));
            if (!isSelect) {
                /** @type {?} */
                var selectItems = __spread(this.lookupRef.selections, [data]);
                this.lookupRef.selectItem(selectItems);
                this.lookupRef.lookupSelectionSer.loadSelections(selectItems);
            }
        }
        else {
            this.lookupRef.selectItem(data);
        }
        this.hide();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.calculationPanelHeight = /**
     * @private
     * @return {?}
     */
    function () {
        return this.options.showItemsCount * 30 + (this.options.showMore ? 50 : 0) + (this.options.footerHeight || 0) + 5;
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getInputSizeInfo = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var el = this.lookupRef.viewType === 'text' ? this.inputRef.inputGroup : this.lookupRef.tagbox;
        return el.nativeElement.getBoundingClientRect();
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getPanelSize = /**
     * @private
     * @return {?}
     */
    function () {
        var _a = this.getInputSizeInfo(), width = _a.width, height = _a.height, top = _a.top, left = _a.left;
        /** @type {?} */
        var bottom = window.innerHeight - height - top;
        /** @type {?} */
        var panelHeight = this.calculationPanelHeight();
        /** @type {?} */
        var h = top > bottom ? top : bottom;
        if (bottom > panelHeight) {
            top = top + height;
            // 面板由上向下展开
            this.panelElement.style.transformOrigin = '100% top';
        }
        else {
            if (top > bottom) {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                    top = 10;
                }
                else {
                    top = top - parseInt('' + panelHeight, 10) - 5;
                }
                // 面板由下向上展开
                this.panelElement.style.transformOrigin = '100% bottom';
            }
            else {
                if (h < panelHeight) {
                    panelHeight = h - 10;
                }
                top = top + height;
            }
        }
        /** @type {?} */
        var minWidth = this.options.minWidth || 200;
        /** @type {?} */
        var _width = width < minWidth ? minWidth : width;
        if (window.innerWidth - left < _width) {
            left = left + width - _width;
        }
        return { width: _width, top: top, height: panelHeight, left: left };
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.getData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var p = {
            pageInfo: {
                pageSize: this.options.showItemsCount,
                pageIndex: 1,
            },
        };
        /** @type {?} */
        var t = "all";
        if (this.lookupRef.isTextChange) {
            this.lookupRef._searchState = {
                field: this.lookupRef.textField,
                //"*",
                value: this.lookupRef.displayText
            };
            p['search'] = this.lookupRef._searchState;
            t = 'search';
        }
        else {
            this.lookupRef._searchState = null;
        }
        if (this.lookupRef.viewType === 'tag') {
            if (this.lookupRef.tagInput.value !== '') {
                this.lookupRef._searchState = {
                    field: this.lookupRef.textField,
                    //"*",
                    value: this.lookupRef.tagInput.value
                };
                p['search'] = this.lookupRef._searchState;
                t = 'search';
            }
            else {
                this.lookupRef._searchState = null;
            }
            /** @type {?} */
            var vals = this.lookupRef.selectionMgr.getSelectedIds();
            if (vals && vals.length) {
                p["selectedInfo"] = {
                    selected: true,
                    selectedIds: vals,
                };
            }
        }
        return this.lookupRef.httpMgr.lookupRequest(p, t, true).pipe(map((/**
         * @param {?} restData
         * @return {?}
         */
        function (restData) {
            /** @type {?} */
            var _items = _this.lookupRef.items || [];
            if (restData) {
                if (_this.lookupRef.viewType === 'tag') {
                    _this.lookupRef.lookupSelectionSer.loadSelections(restData["selectedData"] || []);
                }
                _items = restData.items || [];
                if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {
                    _items = _items.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                }
                // return _items.slice(0, this.options.showItemsCount);
            }
            else {
                if (_this.lookupRef.displayText && _this.lookupRef.isTextChange) {
                    if (restData.displayType.toLowerCase().indexOf('treelist') > -1 && _items.length && _items[0].data) {
                        _items = _items.map((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.data; }));
                    }
                    /** @type {?} */
                    var items = _items.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return n[_this.lookupRef.textField].indexOf(_this.lookupRef.displayText) > -1;
                    })).slice(0, _this.options.showItemsCount);
                    _items = items;
                    // return _items.slice(0, this.options.showItemsCount);
                }
            }
            return _items.slice(0, _this.options.showItemsCount);
        })));
    };
    /**
     * @private
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.loadData = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var loadingRef = this.lookupRef.loadingService.show({ container: this.panelElement });
        this.getData().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            loadingRef.close();
            if (_this.cmpRef && _this.cmpRef.instance) {
                _this.cmpRef.instance.loadData(data);
                if (data.length < _this.options.showItemsCount) {
                    // let newHeight = data.length * 30 + (this.options.showMore ? 50: 0) + (this.options.footerHeight||0) + 5;
                    _this.data = data;
                    /** @type {?} */
                    var newHeight = _this.cmpRef.instance.itemsContainer.nativeElement.querySelector('ul').offsetHeight + 10;
                    if (!data || !data.length) {
                        newHeight = 55;
                    }
                    _this.cmpRef.instance.itemsContainer.nativeElement.style.height = newHeight + "px";
                    if (_this.panelElement) {
                        if (_this.panelElement.style.transformOrigin.indexOf('bottom') > -1) {
                            _this.panelElement.style.top = _this.getInputSizeInfo().top - newHeight - 5 + "px";
                        }
                        _this.panelElement.style.height = 'auto';
                    }
                }
                else {
                    _this.setPanelPosition();
                    _this.cmpRef.instance.itemsContainer.nativeElement.style.height = '100%';
                    if (_this.panelElement) {
                        _this.render.removeStyle(_this.panelElement, 'height');
                    }
                }
                if ((_this.lookupRef.isTextChange || (_this.lookupRef.tagInput && _this.lookupRef.tagInput.value !== '') ||
                    (_this.lookupRef.inputGroup && _this.lookupRef.inputGroup.value !== '' && _this.lookupRef.isTextChange)) && data && data.length) {
                    _this.cmpRef.instance.setActiveItem(0);
                }
                _this.panelElement.style.overflow = 'auto';
            }
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupQuickSelectDirective.prototype.registerKeyboardEvent = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        if (!this.lookupRef.singleSelect && this.lookupRef.viewType !== 'tag') {
            return;
        }
        /** @type {?} */
        var rows = [];
        if (this.cmpRef) {
            rows = this.cmpRef.instance.data;
        }
        if (!rows || !rows.length) {
            return;
        }
        if ($event.code === 'ArrowUp' || $event.code === 'ArrowDown') {
            $event.preventDefault();
            $event.stopPropagation();
        }
        if ($event.code === 'Backspace' && this.lookupRef.viewType === 'tag' &&
            this.lookupRef.selections && this.lookupRef.selections.length &&
            this.lookupRef.tagInput && !this.lookupRef.tagInput.value && this.lookupRef.quickSelect.enableBackspace) {
            $event.preventDefault();
            $event.stopPropagation();
            /** @type {?} */
            var newdata = this.lookupRef.selections.slice(0, this.lookupRef.selections.length - 1);
            if (!newdata || !newdata.length) {
                this.lookupRef.clearValue(true);
            }
            else {
                this.lookupRef.selectItem(newdata);
            }
            this.lookupRef.lookupSelectionSer.loadSelections(newdata);
            this.setPanelPosition();
            return;
        }
        /** @type {?} */
        var idx = this.cmpRef.instance.activeIndex;
        /** @type {?} */
        var setActiveItem = (/**
         * @param {?} index
         * @return {?}
         */
        function (index) {
            _this.cmpRef.instance.setActiveItem(index);
        });
        if ($event.code === 'ArrowUp') { // up
            if (idx > -1) {
                /** @type {?} */
                var prevIdx = idx - 1;
                if (prevIdx < 0) {
                    prevIdx = rows.length - 1;
                }
                setActiveItem(prevIdx);
            }
            else {
                setActiveItem(rows.length - 1);
            }
        }
        if ($event.code === 'ArrowDown') { // down
            // down
            /** @type {?} */
            var nextIdx = idx + 1;
            if (nextIdx >= rows.length) {
                nextIdx = 0;
            }
            setActiveItem(nextIdx);
        }
        if ($event.key === 'Enter') {
            if (rows && rows.length && this.panelElement) {
                /** @type {?} */
                var data = rows[idx];
                this.selectItem(data);
            }
            else {
                this.inputRef.inputClick.emit($event);
            }
        }
    };
    LookupQuickSelectDirective.decorators = [
        { type: Directive, args: [{ selector: '[quick-select]' },] }
    ];
    /** @nocollapse */
    LookupQuickSelectDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: InputGroupComponent },
        { type: LookupGridComponent },
        { type: ComponentFactoryResolver }
    ]; };
    LookupQuickSelectDirective.propDecorators = {
        options: [{ type: Input, args: ['quick-select',] }],
        registerKeyboardEvent: [{ type: HostListener, args: ['keydown', ['$event'],] }]
    };
    return LookupQuickSelectDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupAdvancedLayoutComponent = /** @class */ (function () {
    function LookupAdvancedLayoutComponent(elRef, injector, zone, render2) {
        this.elRef = elRef;
        this.injector = injector;
        this.zone = zone;
        this.render2 = render2;
        this.title = '帮助选择器';
        this.activeTab = 'datalist';
        this.dataTab = '数据列表';
        this.favTab = '收藏夹';
        this.tabChanged = new EventEmitter();
        this.close = new EventEmitter();
        this.dialogRef = this.injector.get(DialogComponent, null);
    }
    /**
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.activeTab && !changes.activeTab.isFirstChange()) {
            this.setCurrentTab();
        }
    };
    /**
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.dialogRef) {
            this.dialogRef.dragHandle = this.headerRel.nativeElement;
        }
        this.setCurrentTab();
    };
    /**
     * @private
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.setCurrentTab = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.activetabRef) {
            this.render2.setStyle(this.activetabRef.nativeElement, 'transform', "translate3d(" + (this.activeTab == 'datalist' ? 0 : 84) + "px, 0px, 0px)");
        }
    };
    /**
     * @param {?} $event
     * @param {?} tabstr
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.changeTabs = /**
     * @param {?} $event
     * @param {?} tabstr
     * @return {?}
     */
    function ($event, tabstr) {
        this.activeTab = tabstr;
        this.setCurrentTab();
        this.tabChanged.emit({ tab: tabstr, $event: $event });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.closeDialog = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.dialogRef) {
            $event.stopPropagation();
            this.dialogRef.close();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupAdvancedLayoutComponent.prototype.changeDialogSize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.dialogRef) {
            $event.stopPropagation();
            this.dialogRef.changeDialogSize();
        }
    };
    LookupAdvancedLayoutComponent.decorators = [
        { type: Component, args: [{
                    selector: 'lookup-advanced-layout',
                    template: "<div class=\"d-flex justify-content-between header\" #header [style.cursor]=\"dialogRef.isMax ? 'default': 'move'\">\r\n    <div class=\"title\" style=\"max-width: calc(50% - 100px);text-overflow: ellipsis;overflow: hidden;z-index: 3;cursor: default;\" title=\"{{title}}\">{{title}}</div>\r\n\r\n    <div style=\"width: 100%;\" class=\"tabs\">\r\n        <div class=\"d-flex justify-content-center\">\r\n            <div class=\"d-flex tabs-labels\" *ngIf=\"enableFav\"  (mousedown)=\"$event.stopPropagation()\">\r\n                <div class=\"active-tab\" #activetab></div>\r\n                <div class=\"tab-title d-flex\" [class.active]=\"activeTab === 'datalist'\" (click)=\"changeTabs($event, 'datalist')\" >\r\n                    {{dataTab }}\r\n                </div>\r\n                <div class=\"tab-title d-flex\" [class.active]=\"activeTab === 'favorite'\" (click)=\"changeTabs($event, 'favorite')\">\r\n                    {{favTab}}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n\r\n    <div class=\"close d-flex flex-row h-100\">\r\n        <span class=\"f-icon modal_maximize\" [class.modalrevert]=\"dialogRef.isMax\" (click)=\"changeDialogSize($event)\"></span>\r\n        <span class=\"f-icon modal_close\" (click)=\"closeDialog($event)\"></span>\r\n    </div>\r\n</div>",
                    // styleUrls: ['./advanced-layout.scss'],
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    LookupAdvancedLayoutComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 }
    ]; };
    LookupAdvancedLayoutComponent.propDecorators = {
        title: [{ type: Input }],
        activeTab: [{ type: Input }],
        enableFav: [{ type: Input }],
        dataTab: [{ type: Input }],
        favTab: [{ type: Input }],
        tabChanged: [{ type: Output }],
        close: [{ type: Output }],
        headerRel: [{ type: ViewChild, args: ['header',] }],
        activetabRef: [{ type: ViewChild, args: ['activetab',] }]
    };
    return LookupAdvancedLayoutComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupFilterBarComponent = /** @class */ (function () {
    function LookupFilterBarComponent(injector, cd, lookIns) {
        this.injector = injector;
        this.cd = cd;
        this.lookIns = lookIns;
        this.fields = [];
        this.filterFields = [];
        this.searchAnyField = true;
        this.columns = [];
        this.viewType = SearchBarMode.both;
        this.isNav = false;
        this.searchFields = [];
        this.conditionsChange = new EventEmitter();
        this.textConditions = [];
        this.fieldConditons = [];
        this.dialogRef = this.injector.get(DialogComponent, null);
        this.el = this.injector.get(ElementRef);
    }
    /**
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.searchFields = this.searchFields || [];
        this.convertColumnsToSearchFields();
        if (this.dialogRef && this.searchboxRef) {
            this.dialogRef.moving.subscribe((/**
             * @return {?}
             */
            function () {
                _this.searchboxRef.updateShadowBoxPosition();
            }));
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        if (changes.columns && !changes.columns.isFirstChange()) {
            this.convertColumnsToSearchFields();
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.initSearchValue();
            }), 100);
        }
    };
    /**
     * @return {?}
     */
    LookupFilterBarComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    LookupFilterBarComponent.prototype.initSearchValue = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.lookIns._searchState && !this.isNav && this.searchboxRef) {
            var _a = this.lookIns._searchState, field = _a.field, value = _a.value;
            if (field === '*' && value != '' && value !== null && value !== undefined) {
                /** @type {?} */
                var alltitle = this.lookIns.localService.getValue('lookup.anyFields');
                /** @type {?} */
                var _conditions = [{ code: '*', name: alltitle, value: value }];
                this.searchboxRef.setValue(_conditions, false);
                this.textConditions = this.searchboxRef.expandStarFieldToAllFields();
            }
        }
    };
    /**
     * @private
     * @param {?} n
     * @return {?}
     */
    LookupFilterBarComponent.prototype.converColumnToFilterField = /**
     * @private
     * @param {?} n
     * @return {?}
     */
    function (n) {
        /** @type {?} */
        var t = {};
        t.id = n.field;
        t.labelCode = n.field;
        t.code = n.fieldPath;
        t.name = n.title;
        /** @type {?} */
        var options = n.formatter ? n.formatter.options : null;
        // 数字
        if (n.fieldType === 'NumericType') {
            /** @type {?} */
            var _options = __assign({}, (options || {}));
            n.precision = n.precision || 0;
            _options.precision = _options.precision || 0;
            if (n.precision != _options.precision) {
                _options.precision = n.precision;
            }
            t.control = Object.assign({
                "controltype": "number",
                "bigNumber": false,
                "placeHolder": '请输入数字',
                single: true
            }, _options);
            t.beginPlaceHolder = "开始数值";
            t.endPlaceHolder = "结束数值";
        }
        // 枚举
        if (n.fieldType === 'EnumType') {
            t.control = {
                "controltype": "enum",
                "enumValues": n.formatter.options.data,
                single: true
            };
        }
        // 布尔
        if (n.fieldType === 'BooleanType') {
            /** @type {?} */
            var trueText = options ? options.trueText || 'True' : 'True';
            /** @type {?} */
            var falseText = options ? options.falseText || 'False' : 'False';
            t.control = {
                controltype: 'dropdown',
                enumValues: [
                    { value: 1, name: trueText },
                    { value: 0, name: falseText },
                ],
                single: true
            };
        }
        // 日期
        if (n.fieldType === "DateType" || n.fieldType === 'DateTimeType') {
            /** @type {?} */
            var dateFormat = 'yyyy-MM-dd';
            /** @type {?} */
            var showTime = false;
            /** @type {?} */
            var showType = '1';
            if (options) {
                if (options.format) {
                    dateFormat = options.format;
                }
            }
            if (n.fieldType === 'DateTimeType') {
                showTime = true;
            }
            if (dateFormat === 'yyyy') {
                showType = '2';
            }
            if (dateFormat === 'yyyy-MM') {
                showType = '3';
            }
            t.control = {
                "controltype": "datetime",
                "placeholder": "请选择日期",
                single: true,
                dateFormat: dateFormat,
                showTime: showTime,
                showType: showType
            };
        }
        return t;
    };
    /**
     * @private
     * @return {?}
     */
    LookupFilterBarComponent.prototype.convertColumnsToSearchFields = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.columns && this.columns.length) {
            this.fields = this.columns.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fieldType && (n.fieldType === 'StringType' || n.fieldType === 'TextType'); })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return {
                    code: n.fieldPath,
                    name: n.title
                };
            }));
            if (!this.fields.length && this.searchFields.length) {
                this.fields = this.searchFields.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        code: n.value,
                        name: n.label
                    };
                }));
            }
            if (this.viewType === 'both' || this.viewType === 'onlyfield') {
                this.filterFields = this.columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.fieldType && n.fieldType !== 'StringType' && n.fieldType !== 'TextType' && n.field; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return _this.converColumnToFilterField(n);
                }));
            }
            if (this.lookIns && this.lookIns.allowQueryFields) {
                var _a = this.lookIns.allowQueryFields, nav = _a.nav, main = _a.main;
                /** @type {?} */
                var queryFields = main;
                if (this.isNav) {
                    queryFields = nav;
                }
                if (queryFields) {
                    /** @type {?} */
                    var _queryFields_1 = queryFields.split(',');
                    this.fields = this.fields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _queryFields_1.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === n.code; })) > -1; }));
                    this.filterFields = this.filterFields.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return _queryFields_1.findIndex((/**
                     * @param {?} f
                     * @return {?}
                     */
                    function (f) { return f === n.code; })) > -1; }));
                }
            }
            this.cd.markForCheck();
        }
    };
    /**
     * @param {?} $event
     * @param {?=} isString
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onConditionChange = /**
     * @param {?} $event
     * @param {?=} isString
     * @return {?}
     */
    function ($event, isString) {
        if (isString === void 0) { isString = true; }
        if (isString) {
            this.textConditions = $event;
        }
        else {
            this.fieldConditons = $event;
        }
        this.textConditions = this.textConditions || [];
        /** @type {?} */
        var _conditions$ = this.fieldConditons.concat([]);
        if (this.fieldConditons && this.fieldConditons.length && this.textConditions.length) {
            _conditions$[0].lbracket = this.fieldConditons[0].lbracket + '(';
            _conditions$[_conditions$.length - 1].relation = 1;
            _conditions$[_conditions$.length - 1].rbracket = _conditions$[_conditions$.length - 1].rbracket + ')';
        }
        /** @type {?} */
        var _conditions = _conditions$.concat(this.textConditions);
        this.conditionsChange.emit(_conditions);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onClearConditions = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.textConditions = [];
        this.fieldConditons = [];
        if (this.searchboxRef) {
            this.searchboxRef.clearConditions(false);
        }
        if (this.searchfieldsRef) {
            this.filterFields.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                n.value = null;
            }));
            this.searchfieldsRef.clearConditions(false);
        }
        this.cd.detectChanges();
        this.conditionsChange.emit([]);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    LookupFilterBarComponent.prototype.onEsc = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.lookIns.closeLoading();
        this.lookIns.closeDialog();
    };
    LookupFilterBarComponent.decorators = [
        { type: Component, args: [{
                    selector: '[lookup-filter-bar]',
                    template: "\n    <div class=\"d-flex flex-row\">\n        <farris-search-fields #searchfields [fields]=\"filterFields\" class=\"mr-2 f-utils-fill\"  \n        *ngIf=\"filterFields && filterFields.length && (viewType == 'both' || viewType=== 'onlyfield')\" \n        (conditionChange)=\"onConditionChange($event, false)\"></farris-search-fields>\n\n        <div style=\"min-width:40%;\" class=\"d-flex flex-row\" [class.w-100]=\"!filterFields || !filterFields.length\" [style.maxWidth]=\"filterFields && filterFields.length?'70%': '100%'\">\n            <farris-search-box #searchbox [fields]=\"fields\" [useAnyField]=\"searchAnyField\"\n            (conditionChange)=\"onConditionChange($event, true)\" class=\"f-cmp-inputgroup f-utils-fill\" \n            *ngIf=\"(viewType == 'both' || viewType=== 'onlyinput')\" (escHandler)=\"onEsc($event)\"></farris-search-box>\n            <span class=\"f-icon f-icon-remove clear-search-fields\" \n                [ngStyle]=\"((textConditions && textConditions.length) || (fieldConditons && fieldConditons.length)) ? { }: {opacity: '0.3',pointerEvents: 'none'}\"\n                (click)=\"onClearConditions($event)\" title=\"{{ 'lookup.clearAllConditions' | locale }}\" style=\"min-width:28px;border: 0;\"></span>\n        </div>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    LookupFilterBarComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: LookupGridComponent }
    ]; };
    LookupFilterBarComponent.propDecorators = {
        searchAnyField: [{ type: Input }],
        columns: [{ type: Input }],
        viewType: [{ type: Input }],
        isNav: [{ type: Input }],
        searchFields: [{ type: Input }],
        conditionsChange: [{ type: Output }],
        searchboxRef: [{ type: ViewChild, args: ['searchbox',] }],
        searchfieldsRef: [{ type: ViewChild, args: ['searchfields',] }]
    };
    return LookupFilterBarComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupSelectedDirective = /** @class */ (function () {
    function LookupSelectedDirective(injector, elRef, render, ngZone) {
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.ngZone = ngZone;
        this.count = 0;
        this.panelMouseEvent = null;
        this.notifySer = null;
        this.commonUtils = null;
        this.panelEscHandler = null;
        this.overlaySer = new OverLayHiddenService();
        this.notifySer = this.injector.get(NotifyService, null);
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            _this.bindingEvents();
        }));
        this.panelMouseEvent = this.overlaySer.registerMouseEvent(this.elRef.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (_this.selectedPanel.nativeElement.contains(e.target) || _this.elRef.nativeElement.contains(e.target) ||
                e.target.classList.contains('lookup-clear-selected-items') || e.target.closest('.farris-messager')) {
                return;
            }
            _this.showPanel(false);
        }));
    };
    /**
     * @return {?}
     */
    LookupSelectedDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.panelMouseEvent) {
            this.panelMouseEvent();
            this.panelMouseEvent = null;
        }
    };
    /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    LookupSelectedDirective.prototype.showPanel = /**
     * @private
     * @param {?=} show
     * @return {?}
     */
    function (show) {
        var _this = this;
        if (show === void 0) { show = true; }
        /** @type {?} */
        var panel = this.selectedPanel.nativeElement;
        if (!show) {
            this.render.removeClass(panel, 'show');
            this.render.addClass(panel, 'd-none');
            if (this.panelEscHandler) {
                this.panelEscHandler();
                this.panelEscHandler = null;
            }
        }
        else {
            this.render.addClass(panel, 'show');
            this.render.removeClass(panel, 'd-none');
            // 注册ESC
            if (this.commonUtils) {
                this.panelEscHandler = this.commonUtils.regBodyKeydownEvent(null, (/**
                 * @return {?}
                 */
                function () { return _this.showPanel(false); }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    LookupSelectedDirective.prototype.bindingEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.selectedPanel) {
            return;
        }
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var panel = _this.selectedPanel.nativeElement;
            _this.render.listen(_this.elRef.nativeElement, 'click', (/**
             * @return {?}
             */
            function () {
                if (_this.selectedPanel && _this.count) {
                    if (panel.classList.contains('show')) {
                        _this.showPanel(false);
                    }
                    else {
                        _this.showPanel();
                        /** @type {?} */
                        var selectedTableContainer = panel.querySelector('.farris-datatable-container');
                        /** @type {?} */
                        var selectedTableBody = panel.querySelector('.farris-table-scorllable-body');
                        _this.render.removeStyle(selectedTableContainer, 'height');
                        _this.render.removeStyle(selectedTableBody, 'height');
                        _this.dataTableRef.resize({ height: panel.offsetHeight - 28, width: panel.offsetWidth - 28 });
                        _this.render.setStyle(selectedTableBody, 'height', _this.dataTableRef.tableHeight + 'px');
                        _this.render.setStyle(selectedTableBody, 'height', _this.dataTableRef.scorllableBodyHeight + 'px');
                        _this.dataTableRef.dtBody.checkBodyHeightWhenEmptyData();
                    }
                }
                else {
                    if (_this.notifySer) {
                        _this.notifySer.warning('当前还没有选择数据。');
                    }
                }
            }));
        }));
    };
    LookupSelectedDirective.decorators = [
        { type: Directive, args: [{ selector: '[lookup-selected]' },] }
    ];
    /** @nocollapse */
    LookupSelectedDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 },
        { type: NgZone }
    ]; };
    LookupSelectedDirective.propDecorators = {
        selectedPanel: [{ type: Input }],
        dataTableRef: [{ type: Input }],
        count: [{ type: Input }]
    };
    return LookupSelectedDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LookupModule = /** @class */ (function () {
    function LookupModule() {
    }
    LookupModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        FarrisCommonModule.forRoot(),
                        FarrisDialogModule.forRoot(),
                        MessagerModule.forRoot(),
                        NotifyModule.forRoot(),
                        LoadingModule.forRoot({ delay: 1000 }),
                        InputGroupModule,
                        LayoutModule,
                        DataTableModule,
                        TreeTableModule,
                        FarrisContextMenuModule,
                        LocaleModule.forRoot(),
                        SearchBoxModule,
                        FarrisFormsModule
                    ],
                    exports: [
                        LookupGridComponent,
                        LookupComponent,
                        LookupAdvancedLayoutComponent
                    ],
                    declarations: [
                        LookupGridComponent,
                        LookupComponent,
                        LookupLeftComponent,
                        LookupTabsComponent,
                        LookupTipDirective,
                        LookupQuickSelectPanelComponent,
                        LookupQuickSelectDirective,
                        LookupAdvancedLayoutComponent,
                        LookupFilterBarComponent,
                        LookupSelectedDirective
                    ],
                    providers: [],
                    entryComponents: [
                        DataTableComponent,
                        TreeTableComponent,
                        LookupLeftComponent,
                        LookupTabsComponent,
                        LookupQuickSelectPanelComponent,
                        LookupAdvancedLayoutComponent,
                        LookupFilterBarComponent
                    ]
                },] }
    ];
    return LookupModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { LookupUtils, LookupDefaultMapping, LookupLeftComponent, LookupAdvancedLayoutComponent, LookupFilterBarComponent, LookupSelectedDirective, LOOKUPGRID_VALUE_ACCESSOR, LookupGridComponent, DisplayInfo, lookupGridDefaults, displayInfoDefault, LOOKUPINPUT_VALUE_ACCESSOR, LookupComponent, ServerSideToken, LookupModule, PersonalConfigService, LookupTabsComponent, LookupTipDirective, LookupQuickSelectDirective, LookupQuickSelectPanelComponent };

//# sourceMappingURL=farris-ui-lookup.js.map