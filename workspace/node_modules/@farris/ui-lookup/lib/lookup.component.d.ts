import { Subscription, Observable, Subject } from 'rxjs';
import { EventEmitter, TemplateRef, Injector, OnInit, ElementRef, ChangeDetectorRef, AfterViewChecked, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { DialogComponent } from '@farris/ui-dialog';
import { IResizeEvent } from '@farris/ui-draggable';
import { PickingResult, PickedResult } from './lookup-grid-options';
export declare const LOOKUPINPUT_VALUE_ACCESSOR: any;
export declare class LookupComponent implements OnInit, ControlValueAccessor, AfterViewChecked, OnDestroy {
    injector: Injector;
    el: ElementRef;
    changeDetector?: ChangeDetectorRef;
    hostCls: string;
    /** 窗口宽度 */
    dialogWidth: number;
    /** 窗口高度 */
    dialogHeight: number;
    /** 窗口标题。默认值：此处显示帮助标题 */
    title: string;
    /** 按钮对齐方式 */
    buttonAlign: string;
    /** 按钮模板 */
    buttonsRef: TemplateRef<any>;
    /** 是否显示按钮 */
    showButtons: boolean;
    /** 显示关闭按钮 */
    showCloseButton: boolean;
    /** 显示最大化按钮 */
    showMaxButton: boolean;
    /** 允许拖拽尺寸 */
    resizable: boolean;
    /** 允许拖动窗口 */
    draggable: boolean;
    /** 禁用 */
    disabled: boolean;
    /** 允许编辑文本框 */
    editable: boolean;
    /** 只读 */
    readonly: boolean;
    /** 字段映射, { 帮助数据字段：表单字段 } */
    mapFields: {
        [sourceField: string]: string;
    };
    /** 值字段 */
    valueField: string;
    /** 文本字段 */
    textField: string;
    displayText: string;
    /** 运行时上下文自定义对象 */
    context: any;
    /** 窗口打开前事件 */
    beforeOpen: () => Observable<boolean>;
    /** 窗口关闭前事件 */
    beforeClose: () => Observable<boolean>;
    /** 帮助前事件 */
    dictPicking: (emptyObj?: {}) => Observable<PickingResult>;
    dictPickingSubscription: Subscription;
    /** 帮助后事件 */
    dictPicked: (rowData: any) => Observable<PickedResult>;
    dictPickedSubscription: Subscription;
    /** 窗口打开后 */
    dialogOpened: EventEmitter<{}>;
    /** 窗口关闭后 */
    dialogClosed: EventEmitter<{}>;
    /** 窗口最大化 */
    dialogMaxed: EventEmitter<{}>;
    /** 拖拽改变窗口尺寸进行时 */
    resizing: EventEmitter<{}>;
    /** 拖拽改变窗口尺寸结束 */
    resized: EventEmitter<{}>;
    /** 帮助窗口默认尺寸 */
    private defaultDialogSize;
    dialogCreated: Subject<DialogComponent>;
    dialogCreatedSubscription: Subscription;
    dialog: DialogComponent;
    content: DialogComponent;
    private _isShow;
    isShow: boolean;
    ngControl: any;
    displayValue: string;
    originalText: string;
    readonly invalid: any;
    private ngZone;
    onModelChange: (obj: any) => void;
    onModelTouched: (val: any) => void;
    constructor(injector: Injector, el: ElementRef, changeDetector?: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewChecked(): void;
    initEvents(): void;
    showDialog(): any;
    closeDialog(): void;
    private lookupUnsubscribe;
    onResizing(pos: IResizeEvent): void;
    onResized(pos: IResizeEvent): void;
    onMaxDialog(pos: IResizeEvent): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState?(isDisabled: boolean): void;
}
