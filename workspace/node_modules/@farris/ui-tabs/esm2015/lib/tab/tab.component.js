/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, TemplateRef, ChangeDetectorRef, Compiler, ComponentFactoryResolver, Renderer2, ElementRef, ContentChild, Optional, Type, NgModuleFactory } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { FarrisTabsComponent } from '../tabs/tabs.component';
import { FarrisTabsExtendDirective } from './extend.directive';
export class FarrisTabComponent {
    /**
     * @param {?} cp
     * @param {?} componentFactoryResolver
     * @param {?} render
     * @param {?} el
     * @param {?} cef
     * @param {?} scrollTabs
     */
    constructor(cp, componentFactoryResolver, render, el, cef, scrollTabs) {
        this.cp = cp;
        this.componentFactoryResolver = componentFactoryResolver;
        this.render = render;
        this.el = el;
        this.cef = cef;
        this.scrollTabs = scrollTabs;
        this.tabWidth = -1;
        // 追加自定义的样式
        this.titleCustomCls = '';
        // selected 是否选中
        // tslint:disable-next-line:no-inferrable-types
        this.selected = false;
        // appDiv: T;
        this.showStates = new BehaviorSubject(true);
        // 兼容旧表单
        this.activeState = new BehaviorSubject(false);
        this._show = true;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set show(value) {
        if (this._show != value) {
            this.showStates.next(value);
            this._show = value;
            this.scrollTabs.tabVisibleChanged.next({ tab: this, visible: value });
        }
    }
    /**
     * @return {?}
     */
    get show() {
        return this._show;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set _active(value) {
        this._activeForOld = value;
        this.activeState.next(value);
    }
    /**
     * @return {?}
     */
    get _active() {
        return this._activeForOld;
    }
    // 无用代码
    /**
     * @return {?}
     */
    get active() {
        return this._active;
    }
    /**
     * 内容是否激活
     * @return {?}
     */
    ngOnInit() {
        this.scrollTabs.tabs.push(this);
        if (!this.scrollTabs.activeId) {
            this.scrollTabs.tabs[0]._active = true;
        }
        else {
            this.scrollTabs.load();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 为了兼容弄旧表单，不兼容HostBinding, 通过追加class的方式实现
        /** @type {?} */
        const nEl = this.el.nativeElement;
        this.activeState.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            this.render.addClass(nEl, 'farris-tabs-body');
            if (data) {
                this.render.addClass(nEl, 'f-tab-active');
                this.render.removeClass(nEl, 'f-tab-d-none');
            }
            else {
                this.render.addClass(nEl, 'f-tab-d-none');
                this.render.removeClass(nEl, 'f-tab-active');
            }
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @return {?}
     */
    loadComponent() {
    }
}
FarrisTabComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-tab',
                template: "<!-- \u5F02\u6B65\u83B7\u53D6\u7EC4\u4EF6 -->\r\n<ng-template [ngTemplateOutlet]=\"contentTempl\"></ng-template>\r\n<ng-container>\r\n    <ng-container *ngComponentOutlet=\"asyncComponent;ngModuleFactory:asyncModule\">\r\n    </ng-container>\r\n</ng-container>\r\n\r\n"
            }] }
];
/** @nocollapse */
FarrisTabComponent.ctorParameters = () => [
    { type: Compiler },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ElementRef },
    { type: ChangeDetectorRef },
    { type: FarrisTabsComponent, decorators: [{ type: Optional }] }
];
FarrisTabComponent.propDecorators = {
    tabWidth: [{ type: Input, args: ['width',] }],
    show: [{ type: Input }],
    asyncComponent: [{ type: Input }],
    asyncModule: [{ type: Input }],
    id: [{ type: Input }],
    titleCustomCls: [{ type: Input }],
    title: [{ type: Input }],
    disabled: [{ type: Input }],
    removeable: [{ type: Input }],
    toolbar: [{ type: Input }],
    contentTempl: [{ type: ContentChild, args: ['content',] }],
    farrisTabsExtendDirective: [{ type: ContentChild, args: [FarrisTabsExtendDirective,] }]
};
if (false) {
    /** @type {?} */
    FarrisTabComponent.prototype.setIntervalTab;
    /** @type {?} */
    FarrisTabComponent.prototype.tabWidth;
    /** @type {?} */
    FarrisTabComponent.prototype.asyncComponent;
    /** @type {?} */
    FarrisTabComponent.prototype.asyncModule;
    /** @type {?} */
    FarrisTabComponent.prototype.id;
    /** @type {?} */
    FarrisTabComponent.prototype.titleCustomCls;
    /** @type {?} */
    FarrisTabComponent.prototype.titleOverflow;
    /** @type {?} */
    FarrisTabComponent.prototype.title;
    /** @type {?} */
    FarrisTabComponent.prototype.selected;
    /** @type {?} */
    FarrisTabComponent.prototype.disabled;
    /** @type {?} */
    FarrisTabComponent.prototype.removeable;
    /** @type {?} */
    FarrisTabComponent.prototype.toolbar;
    /** @type {?} */
    FarrisTabComponent.prototype.contentTempl;
    /** @type {?} */
    FarrisTabComponent.prototype.farrisTabsExtendDirective;
    /** @type {?} */
    FarrisTabComponent.prototype.showStates;
    /** @type {?} */
    FarrisTabComponent.prototype.activeState;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype._activeForOld;
    /** @type {?} */
    FarrisTabComponent.prototype.view;
    /** @type {?} */
    FarrisTabComponent.prototype.tempDirective;
    /** @type {?} */
    FarrisTabComponent.prototype.popupFlag;
    /** @type {?} */
    FarrisTabComponent.prototype._show;
    /** @type {?} */
    FarrisTabComponent.prototype.headingRef;
    /** @type {?} */
    FarrisTabComponent.prototype.compOrHtml;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.cp;
    /** @type {?} */
    FarrisTabComponent.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisTabComponent.prototype.cef;
    /** @type {?} */
    FarrisTabComponent.prototype.scrollTabs;
}
//# sourceMappingURL=data:application/json;base64,