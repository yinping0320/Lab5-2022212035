/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, KeyValueDiffers } from '@angular/core';
export class TabTranscludeDirective {
    /**
     * @param {?} viewRef
     * @param {?} _differs
     */
    constructor(viewRef, _differs) {
        this._differs = _differs;
        // setTimeout(() => {
        this.viewRef = viewRef;
        // }, 5000);
        // this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get trancludeTempl() {
        return this._trancludeTempl;
    }
    /**
     * @param {?} templateRef
     * @return {?}
     */
    set trancludeTempl(templateRef) {
        this._trancludeTempl = templateRef;
        if (templateRef) {
            this.viewRef.createEmbeddedView(templateRef);
        }
        // if (!this._differ && templateRef) {
        //     this._differ = this._differs.find(templateRef).create();
        // }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.setIntervalTemp = setInterval(() => {
        //     if (this._trancludeTempl && this.viewRef) {
        //         console.log('sa');
        //         // this.viewRef = this.viewRef;
        //         clearInterval(this.setIntervalTemp);
        //     }
        // }, 0);
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // const CHANGE = this._differ.diff(this._trancludeTempl);
        // if (CHANGE) {
        //     this.viewRef.createEmbeddedView(this._trancludeTempl);
        // }
    }
}
TabTranscludeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[tabTransclude]',
            },] }
];
/** @nocollapse */
TabTranscludeDirective.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: KeyValueDiffers }
];
TabTranscludeDirective.propDecorators = {
    trancludeTempl: [{ type: Input, args: ['tabTransclude',] }]
};
if (false) {
    /** @type {?} */
    TabTranscludeDirective.prototype._trancludeTempl;
    /** @type {?} */
    TabTranscludeDirective.prototype.setIntervalTemp;
    /**
     * @type {?}
     * @private
     */
    TabTranscludeDirective.prototype._differ;
    /** @type {?} */
    TabTranscludeDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    TabTranscludeDirective.prototype._differs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnRyYW5zY2x1ZGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS10YWJzLyIsInNvdXJjZXMiOlsibGliL3RhYi90YWIudHJhbnNjbHVkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFDL0MsZUFBZSxFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUt2QixNQUFNLE9BQU8sc0JBQXNCOzs7OztJQWtCL0IsWUFBWSxPQUF5QixFQUFVLFFBQXlCO1FBQXpCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3BFLHFCQUFxQjtRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQixZQUFZO1FBRVosMkJBQTJCO0lBQy9CLENBQUM7Ozs7SUFwQkQsSUFDSSxjQUFjO1FBQ2QsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO0lBQ2hDLENBQUM7Ozs7O0lBQ0QsSUFBSSxjQUFjLENBQUMsV0FBNkI7UUFDNUMsSUFBSSxDQUFDLGVBQWUsR0FBRyxXQUFXLENBQUM7UUFDbkMsSUFBSSxXQUFXLEVBQUU7WUFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ2hEO1FBQ0Qsc0NBQXNDO1FBQ3RDLCtEQUErRDtRQUMvRCxJQUFJO0lBQ1IsQ0FBQzs7OztJQVNELFFBQVE7UUFDSiw2Q0FBNkM7UUFDN0Msa0RBQWtEO1FBQ2xELDZCQUE2QjtRQUM3QiwwQ0FBMEM7UUFDMUMsK0NBQStDO1FBQy9DLFFBQVE7UUFDUixTQUFTO0lBQ2IsQ0FBQzs7OztJQUNELFNBQVM7UUFDTCwwREFBMEQ7UUFDMUQsZ0JBQWdCO1FBQ2hCLDZEQUE2RDtRQUM3RCxJQUFJO0lBQ1IsQ0FBQzs7O1lBMUNKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2FBQzlCOzs7O1lBTnFCLGdCQUFnQjtZQUNsQyxlQUFlOzs7NkJBVWQsS0FBSyxTQUFDLGVBQWU7Ozs7SUFIdEIsaURBQWtDOztJQUNsQyxpREFBcUI7Ozs7O0lBQ3JCLHlDQUFxQjs7SUFjckIseUNBQTBCOzs7OztJQUNhLDBDQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBEaXJlY3RpdmUsIElucHV0LCBWaWV3Q29udGFpbmVyUmVmLCBUZW1wbGF0ZVJlZiwgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENoYW5nZURldGVjdG9yUmVmLCBPbkluaXQsXHJcbiAgICBLZXlWYWx1ZURpZmZlcnMsIEtleVZhbHVlRGlmZmVyLCBEb0NoZWNrXHJcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3RhYlRyYW5zY2x1ZGVdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFRhYlRyYW5zY2x1ZGVEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIERvQ2hlY2sge1xyXG4gICAgX3RyYW5jbHVkZVRlbXBsOiBUZW1wbGF0ZVJlZjxhbnk+O1xyXG4gICAgc2V0SW50ZXJ2YWxUZW1wOiBhbnk7XHJcbiAgICBwcml2YXRlIF9kaWZmZXI6IGFueTtcclxuICAgIEBJbnB1dCgndGFiVHJhbnNjbHVkZScpXHJcbiAgICBnZXQgdHJhbmNsdWRlVGVtcGwoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RyYW5jbHVkZVRlbXBsO1xyXG4gICAgfVxyXG4gICAgc2V0IHRyYW5jbHVkZVRlbXBsKHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+KSB7XHJcbiAgICAgICAgdGhpcy5fdHJhbmNsdWRlVGVtcGwgPSB0ZW1wbGF0ZVJlZjtcclxuICAgICAgICBpZiAodGVtcGxhdGVSZWYpIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3UmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0ZW1wbGF0ZVJlZik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGlmICghdGhpcy5fZGlmZmVyICYmIHRlbXBsYXRlUmVmKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMuX2RpZmZlciA9IHRoaXMuX2RpZmZlcnMuZmluZCh0ZW1wbGF0ZVJlZikuY3JlYXRlKCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG4gICAgdmlld1JlZjogVmlld0NvbnRhaW5lclJlZjtcclxuICAgIGNvbnN0cnVjdG9yKHZpZXdSZWY6IFZpZXdDb250YWluZXJSZWYsIHByaXZhdGUgX2RpZmZlcnM6IEtleVZhbHVlRGlmZmVycykge1xyXG4gICAgICAgIC8vIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdSZWYgPSB2aWV3UmVmO1xyXG4gICAgICAgIC8vIH0sIDUwMDApO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIC8vIHRoaXMuc2V0SW50ZXJ2YWxUZW1wID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gICAgICAgIC8vICAgICBpZiAodGhpcy5fdHJhbmNsdWRlVGVtcGwgJiYgdGhpcy52aWV3UmVmKSB7XHJcbiAgICAgICAgLy8gICAgICAgICBjb25zb2xlLmxvZygnc2EnKTtcclxuICAgICAgICAvLyAgICAgICAgIC8vIHRoaXMudmlld1JlZiA9IHRoaXMudmlld1JlZjtcclxuICAgICAgICAvLyAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5zZXRJbnRlcnZhbFRlbXApO1xyXG4gICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgLy8gfSwgMCk7XHJcbiAgICB9XHJcbiAgICBuZ0RvQ2hlY2soKSB7XHJcbiAgICAgICAgLy8gY29uc3QgQ0hBTkdFID0gdGhpcy5fZGlmZmVyLmRpZmYodGhpcy5fdHJhbmNsdWRlVGVtcGwpO1xyXG4gICAgICAgIC8vIGlmIChDSEFOR0UpIHtcclxuICAgICAgICAvLyAgICAgdGhpcy52aWV3UmVmLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLl90cmFuY2x1ZGVUZW1wbCk7XHJcbiAgICAgICAgLy8gfVxyXG4gICAgfVxyXG4gICAgLy8gbmdcclxufVxyXG4iXX0=