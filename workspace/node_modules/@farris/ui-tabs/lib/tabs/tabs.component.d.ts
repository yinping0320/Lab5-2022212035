import { OnInit, OnChanges, SimpleChanges, ElementRef, Renderer2, ChangeDetectorRef, AfterViewInit, OnDestroy, AfterContentChecked, EventEmitter, AfterContentInit, AfterViewChecked, NgZone } from '@angular/core';
import { Subscription, Observable, BehaviorSubject, Subject } from 'rxjs';
import { TabService } from '../tabs.config';
import { TabsChangeEvent, TabsRemoveTabEvent } from '../tabs.events';
import { ToolbarConf } from '../toolbar.config';
import { NgbDropdownMenu } from '../dropdown/dropdown';
export declare class FarrisTabsComponent implements OnInit, OnChanges, AfterViewInit, OnDestroy, AfterContentInit, AfterContentChecked, AfterViewChecked {
    private stService;
    private elementRef;
    private renderer;
    private cdRef;
    private ngZone;
    tabType: 'fill' | 'pills' | '';
    fill: boolean;
    autoTitleWidth: boolean;
    titleLength: number;
    searchInputVisible: boolean;
    position: string;
    showDropDown: any;
    showTooltips: any;
    scrollStep: any;
    autoResize: any;
    closeable: boolean;
    selectId: string;
    width: any;
    height: any;
    searchBoxVisible: boolean;
    _headerHeight: string | number;
    headerHeight: string | number;
    contentDirection: string;
    contentFill: any;
    clickThrottleTime: number;
    private clickItems;
    private clickSubscription;
    /**
     * 因为生成器结构变更导致此处变更
     */
    private _disableStatesDatas;
    btnStates: Observable<Array<{
        [key: string]: boolean;
    }>>;
    private _visibleDatas;
    btnVisible: Observable<Array<{
        [key: string]: boolean;
    }>>;
    tabs: any[];
    customClass: string;
    titleWidth: number;
    leftNav: any;
    rightNav: any;
    tabContainer: any;
    toolbarContainer: any;
    dropDownButton: any;
    tabParent: any;
    btnPlaceHolder: any;
    /** 选中tab 前事件 */
    beforeSelect: (e: TabsChangeEvent) => Observable<boolean>;
    tabChange: EventEmitter<TabsChangeEvent>;
    tabRemove: EventEmitter<TabsRemoveTabEvent>;
    readonly direction: "column" | "column-reverse" | "row" | "row-reverse";
    readonly tabDirection: "column" | "row";
    contentFillStates: BehaviorSubject<boolean>;
    _contentFill: any;
    widthStates: BehaviorSubject<any>;
    _width: any;
    heightStates: BehaviorSubject<any>;
    _height: any;
    _position: any;
    positionStates: BehaviorSubject<string>;
    menuItemsWidth: string;
    maxDropdownW: number;
    private _customClass;
    private _tabs;
    headerExtendConf: any;
    toolbarConf: ToolbarConf;
    toolbarDpHidden: boolean;
    inMoreButtonContents: any[];
    dropdownTabs: any[];
    hideButtons: boolean;
    tabWidth: number;
    hideDropDown: boolean;
    disableLeft: boolean;
    disableRight: boolean;
    private el;
    subscription: Subscription[];
    disableRTooltip: boolean;
    disableLTooltip: boolean;
    leftTooltipTabs: any[];
    rightTooltipTabs: any[];
    private _tabContainerEl;
    private maxTooltipLen;
    activeId: string;
    private ro;
    searchTabText: string;
    ddm: NgbDropdownMenu;
    private _ddmHandler;
    dpState: boolean[];
    private visibleRecord;
    private disableRecord;
    referEl: any;
    trackByButton(index: number, btn: any): number;
    tabVisibleChanged: Subject<{}>;
    constructor(stService: TabService, elementRef: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef, ngZone: NgZone);
    /** 验证传递参数 */
    private verifyConfig;
    ngOnInit(): void;
    /**
     * 解决按钮调整隐藏状态之后，下拉中能显示的按钮有多少
     */
    private visibleStateBind;
    private disableStateBind;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    ngAfterContentChecked(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngOnDestroy(): void;
    clickHandler(btnInfo: any): void;
    openChange(e: any): void;
    searchTab(e: any): void;
    stopBubble(e: any): void;
    /**
     * Ximena 23.08.30 判断是否可见,独立出来
     * Todo:
     * 1、现在btnVisible每次的变更都是全量，是否需要记录每次变更，然后合并计算？
     * 2、现在判断是否可见的方法，是直接更新界面的，每个按钮上都绑定了这个方法，会有性能问题。应该改成处理在绑定的所有数据，然后更新界面。
     * 3、是否可见和禁用有同样的问题
     * @param id
     * @returns
     */
    getToolbarStateVisible(btnItem: any): any;
    getToolbarStateDisable(btnItem: any): any;
    /**
     * 只处理是否禁用
     * @param id
     * @param state
     * @returns
     */
    getToolbarState(id: string, state?: Observable<any>): Observable<any>;
    private _listenShowChanges;
    /**
     * 选中Tab
     * @param  tabId tab标识
     */
    selectTab(tabId: string): void;
    _cpSelectTabByIndex(ev: Event, id: string, ddm?: any): boolean;
    /**
     * 通过tabs的索引选择 tab
     * @param index tabs索引
     */
    selectTabByIndex(index: number): void;
    private _selectTab;
    private _setActive;
    /**
     * @param activeId 显示某个tab
     */
    showTab(tabId: any, selectable?: boolean): void;
    /**
     * @param activeId 隐藏某个tab
     */
    hideTab(activeId: any): void;
    /**
     * 添加标签
     * @param curTabs 数组或者对象
     * @param activeId 设置
     */
    addTabs(curTabs: any[], index: any, setActiveId: any): void;
    /**
     * 添加标签时  去重
     *
     */
    private _unique;
    removeTabByIndex(index: number): void;
    /**
     * 关闭标签  跟删除标签不同
     * @param string
     */
    closeTab(activeId: any): void;
    /**
     * 初始化
     */
    load(): void;
    /**
     * 截取tab中的title,超过6位，截断
     */
    private _truncateTitle;
    /**
     * 替换tab中的title颜色
     */
    private _changeTitleStyle;
    /**
     * 创建流
     */
    private _createStream;
    /**
     * 按照方向，滚动到指定位置
     * @param dist_scroll 目标滚动
     * @param direction 方向
     */
    private _scrollTab;
    /**
     * 指定当前滑动到可视区域——————————————未测试
     * index
     */
    scrollTabIntoView(index: any): void;
    /**
     * 切换tab后，重新获取需要该tab下工具条按钮的配置信息以及隐藏更多按钮
     * 以及获取该tab下的头部扩展区域
     */
    private getToolbarConf;
    /**
     * 计算工具栏是否显示下拉按钮
     */
    private _calculateToolbarDropdownIsShow;
    /**
     * 计算显示的按钮个数及更多中显示的按钮个数
     */
    private _calculateButtonsShow;
    /**
     * 重新计算是否显示按钮和下拉
     */
    private _reCalculateAll;
    /**
     * 重新计算左右的提示文字
     */
    private _reCalulateTooltips;
    /**
     * 重新计算左右箭头状态
     */
    private _reCalculateSides;
    /**
     * 通过id寻找Tab
     * @param id ID
     */
    private _getTabById;
    resolveSize(size: any): string;
    hasInHeadCl(): boolean;
    /**
 * 改变可用状态
 * @param values
 */
    private changeState;
}
