/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ViewContainerRef, TemplateRef, KeyValueDiffers } from '@angular/core';
var TabTranscludeDirective = /** @class */ (function () {
    function TabTranscludeDirective(viewRef, _differs) {
        this._differs = _differs;
        // setTimeout(() => {
        this.viewRef = viewRef;
        // }, 5000);
        // this.cd.detectChanges();
    }
    Object.defineProperty(TabTranscludeDirective.prototype, "trancludeTempl", {
        get: /**
         * @return {?}
         */
        function () {
            return this._trancludeTempl;
        },
        set: /**
         * @param {?} templateRef
         * @return {?}
         */
        function (templateRef) {
            this._trancludeTempl = templateRef;
            if (templateRef) {
                this.viewRef.createEmbeddedView(templateRef);
            }
            // if (!this._differ && templateRef) {
            //     this._differ = this._differs.find(templateRef).create();
            // }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    TabTranscludeDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.setIntervalTemp = setInterval(() => {
        //     if (this._trancludeTempl && this.viewRef) {
        //         console.log('sa');
        //         // this.viewRef = this.viewRef;
        //         clearInterval(this.setIntervalTemp);
        //     }
        // }, 0);
    };
    /**
     * @return {?}
     */
    TabTranscludeDirective.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        // const CHANGE = this._differ.diff(this._trancludeTempl);
        // if (CHANGE) {
        //     this.viewRef.createEmbeddedView(this._trancludeTempl);
        // }
    };
    TabTranscludeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[tabTransclude]',
                },] }
    ];
    /** @nocollapse */
    TabTranscludeDirective.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: KeyValueDiffers }
    ]; };
    TabTranscludeDirective.propDecorators = {
        trancludeTempl: [{ type: Input, args: ['tabTransclude',] }]
    };
    return TabTranscludeDirective;
}());
export { TabTranscludeDirective };
if (false) {
    /** @type {?} */
    TabTranscludeDirective.prototype._trancludeTempl;
    /** @type {?} */
    TabTranscludeDirective.prototype.setIntervalTemp;
    /**
     * @type {?}
     * @private
     */
    TabTranscludeDirective.prototype._differ;
    /** @type {?} */
    TabTranscludeDirective.prototype.viewRef;
    /**
     * @type {?}
     * @private
     */
    TabTranscludeDirective.prototype._differs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnRyYW5zY2x1ZGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS10YWJzLyIsInNvdXJjZXMiOlsibGliL3RhYi90YWIudHJhbnNjbHVkZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLFdBQVcsRUFDL0MsZUFBZSxFQUNsQixNQUFNLGVBQWUsQ0FBQztBQUV2QjtJQXFCSSxnQ0FBWSxPQUF5QixFQUFVLFFBQXlCO1FBQXpCLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3BFLHFCQUFxQjtRQUNqQixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQixZQUFZO1FBRVosMkJBQTJCO0lBQy9CLENBQUM7SUFwQkQsc0JBQ0ksa0RBQWM7Ozs7UUFEbEI7WUFFSSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUM7UUFDaEMsQ0FBQzs7Ozs7UUFDRCxVQUFtQixXQUE2QjtZQUM1QyxJQUFJLENBQUMsZUFBZSxHQUFHLFdBQVcsQ0FBQztZQUNuQyxJQUFJLFdBQVcsRUFBRTtnQkFDYixJQUFJLENBQUMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLFdBQVcsQ0FBQyxDQUFDO2FBQ2hEO1lBQ0Qsc0NBQXNDO1lBQ3RDLCtEQUErRDtZQUMvRCxJQUFJO1FBQ1IsQ0FBQzs7O09BVEE7Ozs7SUFrQkQseUNBQVE7OztJQUFSO1FBQ0ksNkNBQTZDO1FBQzdDLGtEQUFrRDtRQUNsRCw2QkFBNkI7UUFDN0IsMENBQTBDO1FBQzFDLCtDQUErQztRQUMvQyxRQUFRO1FBQ1IsU0FBUztJQUNiLENBQUM7Ozs7SUFDRCwwQ0FBUzs7O0lBQVQ7UUFDSSwwREFBMEQ7UUFDMUQsZ0JBQWdCO1FBQ2hCLDZEQUE2RDtRQUM3RCxJQUFJO0lBQ1IsQ0FBQzs7Z0JBMUNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2lCQUM5Qjs7OztnQkFOcUIsZ0JBQWdCO2dCQUNsQyxlQUFlOzs7aUNBVWQsS0FBSyxTQUFDLGVBQWU7O0lBcUMxQiw2QkFBQztDQUFBLEFBNUNELElBNENDO1NBekNZLHNCQUFzQjs7O0lBQy9CLGlEQUFrQzs7SUFDbEMsaURBQXFCOzs7OztJQUNyQix5Q0FBcUI7O0lBY3JCLHlDQUEwQjs7Ozs7SUFDYSwwQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgRGlyZWN0aXZlLCBJbnB1dCwgVmlld0NvbnRhaW5lclJlZiwgVGVtcGxhdGVSZWYsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LCBDaGFuZ2VEZXRlY3RvclJlZiwgT25Jbml0LFxyXG4gICAgS2V5VmFsdWVEaWZmZXJzLCBLZXlWYWx1ZURpZmZlciwgRG9DaGVja1xyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t0YWJUcmFuc2NsdWRlXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBUYWJUcmFuc2NsdWRlRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBEb0NoZWNrIHtcclxuICAgIF90cmFuY2x1ZGVUZW1wbDogVGVtcGxhdGVSZWY8YW55PjtcclxuICAgIHNldEludGVydmFsVGVtcDogYW55O1xyXG4gICAgcHJpdmF0ZSBfZGlmZmVyOiBhbnk7XHJcbiAgICBASW5wdXQoJ3RhYlRyYW5zY2x1ZGUnKVxyXG4gICAgZ2V0IHRyYW5jbHVkZVRlbXBsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl90cmFuY2x1ZGVUZW1wbDtcclxuICAgIH1cclxuICAgIHNldCB0cmFuY2x1ZGVUZW1wbCh0ZW1wbGF0ZVJlZjogVGVtcGxhdGVSZWY8YW55Pikge1xyXG4gICAgICAgIHRoaXMuX3RyYW5jbHVkZVRlbXBsID0gdGVtcGxhdGVSZWY7XHJcbiAgICAgICAgaWYgKHRlbXBsYXRlUmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGVtcGxhdGVSZWYpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBpZiAoIXRoaXMuX2RpZmZlciAmJiB0ZW1wbGF0ZVJlZikge1xyXG4gICAgICAgIC8vICAgICB0aGlzLl9kaWZmZXIgPSB0aGlzLl9kaWZmZXJzLmZpbmQodGVtcGxhdGVSZWYpLmNyZWF0ZSgpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuICAgIHZpZXdSZWY6IFZpZXdDb250YWluZXJSZWY7XHJcbiAgICBjb25zdHJ1Y3Rvcih2aWV3UmVmOiBWaWV3Q29udGFpbmVyUmVmLCBwcml2YXRlIF9kaWZmZXJzOiBLZXlWYWx1ZURpZmZlcnMpIHtcclxuICAgICAgICAvLyBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy52aWV3UmVmID0gdmlld1JlZjtcclxuICAgICAgICAvLyB9LCA1MDAwKTtcclxuXHJcbiAgICAgICAgLy8gdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICB9XHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICAvLyB0aGlzLnNldEludGVydmFsVGVtcCA9IHNldEludGVydmFsKCgpID0+IHtcclxuICAgICAgICAvLyAgICAgaWYgKHRoaXMuX3RyYW5jbHVkZVRlbXBsICYmIHRoaXMudmlld1JlZikge1xyXG4gICAgICAgIC8vICAgICAgICAgY29uc29sZS5sb2coJ3NhJyk7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyB0aGlzLnZpZXdSZWYgPSB0aGlzLnZpZXdSZWY7XHJcbiAgICAgICAgLy8gICAgICAgICBjbGVhckludGVydmFsKHRoaXMuc2V0SW50ZXJ2YWxUZW1wKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH0sIDApO1xyXG4gICAgfVxyXG4gICAgbmdEb0NoZWNrKCkge1xyXG4gICAgICAgIC8vIGNvbnN0IENIQU5HRSA9IHRoaXMuX2RpZmZlci5kaWZmKHRoaXMuX3RyYW5jbHVkZVRlbXBsKTtcclxuICAgICAgICAvLyBpZiAoQ0hBTkdFKSB7XHJcbiAgICAgICAgLy8gICAgIHRoaXMudmlld1JlZi5jcmVhdGVFbWJlZGRlZFZpZXcodGhpcy5fdHJhbmNsdWRlVGVtcGwpO1xyXG4gICAgICAgIC8vIH1cclxuICAgIH1cclxuICAgIC8vIG5nXHJcbn1cclxuIl19