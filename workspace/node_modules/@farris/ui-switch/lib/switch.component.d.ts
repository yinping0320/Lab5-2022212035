import { ChangeDetectorRef, EventEmitter, Injector, ElementRef, OnDestroy } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { SwitchModuleConfig } from './switch.config';
import { Observable } from 'rxjs';
export declare class SwitchComponent implements ControlValueAccessor, OnDestroy {
    config: SwitchModuleConfig;
    private cdr;
    injector: Injector;
    private _beforeChange;
    square: boolean;
    size: string | 'small' | 'medium' | 'large';
    color: string;
    switchOffColor: string;
    switchColor: string;
    defaultBgColor: string;
    defaultBoColor: string;
    checkedLabel: string;
    uncheckedLabel: string;
    checked: boolean;
    readonly: boolean;
    disabled: boolean;
    editable: boolean;
    reverse: boolean;
    trueValue: any;
    falseValue: any;
    beforeChange: Observable<boolean>;
    /**
     * @deprecated
     */
    changeEvent: EventEmitter<any>;
    clickHandle: EventEmitter<any>;
    /**
     * Emits changed value
     */
    valueChange: EventEmitter<boolean>;
    switchElRef: ElementRef<any>;
    constructor(config: SwitchModuleConfig, cdr: ChangeDetectorRef, injector: Injector);
    ngOnDestroy(): void;
    getColor(flag?: string): string;
    private updateChecked;
    onToggle(event: MouseEvent): void;
    onSpaceHandle($event: any): void;
    private getValue;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    private onTouchedCallback;
    private onChangeCallback;
}
