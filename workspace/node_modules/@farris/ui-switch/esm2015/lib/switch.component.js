/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, HostListener, forwardRef, Inject, Optional, Injector, ElementRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SWITCH_OPTIONS } from './switch.token';
import { Observable } from 'rxjs';
/** @type {?} */
const UI_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable-next-line: no-use-before-declare */
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => SwitchComponent)),
    multi: true
};
export class SwitchComponent {
    /**
     * @param {?=} config
     * @param {?=} cdr
     * @param {?=} injector
     */
    constructor(config = {}, cdr, injector) {
        this.config = config;
        this.cdr = cdr;
        this.injector = injector;
        this.size = 'medium';
        this.editable = true;
        this.trueValue = true;
        this.falseValue = false;
        /**
         * @deprecated
         */
        this.changeEvent = new EventEmitter();
        this.clickHandle = new EventEmitter();
        /**
         * Emits changed value
         */
        this.valueChange = new EventEmitter();
        this.onTouchedCallback = (/**
         * @param {?} v
         * @return {?}
         */
        (v) => { });
        this.onChangeCallback = (/**
         * @param {?} v
         * @return {?}
         */
        (v) => { });
        this.square = (config && config.square) || false;
        this.size = (config && config.size) || this.size;
        this.color = config && config.color;
        this.switchOffColor = config && config.switchOffColor;
        this.switchColor = config && config.switchColor;
        this.defaultBgColor = config && config.defaultBgColor;
        this.defaultBoColor = config && config.defaultBoColor;
        this.checkedLabel = config && config.checkedLabel;
        this.uncheckedLabel = config && config.uncheckedLabel;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._beforeChange) {
            this._beforeChange.unsubscribe();
        }
    }
    /**
     * @param {?=} flag
     * @return {?}
     */
    getColor(flag = '') {
        if (flag === 'borderColor') {
            return this.defaultBoColor;
        }
        if (flag === 'switchColor') {
            if (this.reverse) {
                return !this.checked
                    ? this.switchColor
                    : this.switchOffColor || this.switchColor;
            }
            return this.checked
                ? this.switchColor
                : this.switchOffColor || this.switchColor;
        }
        if (this.reverse) {
            return !this.checked ? this.color : this.defaultBgColor;
        }
        return this.checked ? this.color : this.defaultBgColor;
    }
    /**
     * @private
     * @param {?} event
     * @param {?=} isClick
     * @return {?}
     */
    updateChecked(event, isClick = true) {
        if (this.disabled || !this.editable) {
            return;
        }
        this.checked = !this.checked;
        /** @type {?} */
        const val = this.getValue(this.checked);
        // Component events
        this.valueChange.emit(val);
        this.changeEvent.emit(event);
        if (isClick) {
            this.clickHandle.emit({ event, checked: this.checked, value: val, instance: this });
        }
        this.onChangeCallback(val);
        this.onTouchedCallback(val);
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onToggle(event) {
        /** @type {?} */
        const span = ((/** @type {?} */ (event.target))).closest('.f-cmp-switch');
        if (!span || span !== this.switchElRef.nativeElement) {
            return;
        }
        if (this.beforeChange) {
            this._beforeChange = this.beforeChange.subscribe((/**
             * @param {?} confirm
             * @return {?}
             */
            (confirm) => {
                if (confirm) {
                    this.updateChecked(event);
                }
            }));
        }
        else {
            this.updateChecked(event);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSpaceHandle($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.updateChecked($event, false);
    }
    /**
     * @private
     * @param {?} checked
     * @return {?}
     */
    getValue(checked) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            return checked ? this.trueValue : this.falseValue;
        }
        return checked;
    }
    /**
     * @param {?} obj
     * @return {?}
     */
    writeValue(obj) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            this.checked = obj == this.trueValue;
        }
        else {
            if (obj !== this.checked) {
                this.checked = !!obj;
            }
        }
        if (this.cdr && !this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
}
SwitchComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                // bugNum2:462134 && 506852
                // style="display:flex;height:100%;align-items:center;"
                selector: 'farris-switch',
                template: `
    <div class="farris-switch-outlayer">
        <span #container tabindex="0" role="button" hidefocus="true" class="switch f-cmp-switch"
            [ngClass]="{
                checked: checked,
                disabled: disabled || !editable,
                square: square,
                'switch-large': size === 'large',
                'switch-medium': size === 'medium',
                'switch-small': size === 'small'
            }"
            [ngStyle]="{
                'outline': 'none',
                'background-color': getColor(),
                'border-color': getColor('borderColor')
            }"
        >
            <span class="switch-pane" *ngIf="checkedLabel || uncheckedLabel">
                <span class="switch-label-checked">{{
                    this.checkedLabel
                }}</span>
                <span class="switch-label-unchecked">{{
                    this.uncheckedLabel
                }}</span>
            </span>
            <small [style.background]="getColor('switchColor')">
                <ng-content></ng-content>
            </small>
        </span>
    <div>
    `,
                providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR]
            }] }
];
/** @nocollapse */
SwitchComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SWITCH_OPTIONS,] }, { type: Optional }] },
    { type: ChangeDetectorRef },
    { type: Injector }
];
SwitchComponent.propDecorators = {
    square: [{ type: Input }],
    size: [{ type: Input }],
    color: [{ type: Input }],
    switchOffColor: [{ type: Input }],
    switchColor: [{ type: Input }],
    defaultBgColor: [{ type: Input }],
    defaultBoColor: [{ type: Input }],
    checkedLabel: [{ type: Input }],
    uncheckedLabel: [{ type: Input }],
    checked: [{ type: Input }],
    readonly: [{ type: Input }],
    disabled: [{ type: Input }],
    editable: [{ type: Input }],
    reverse: [{ type: Input }],
    trueValue: [{ type: Input }],
    falseValue: [{ type: Input }],
    beforeChange: [{ type: Input }],
    changeEvent: [{ type: Output }],
    clickHandle: [{ type: Output }],
    valueChange: [{ type: Output }],
    switchElRef: [{ type: ViewChild, args: ['container',] }],
    onToggle: [{ type: HostListener, args: ['click', ['$event'],] }],
    onSpaceHandle: [{ type: HostListener, args: ['keydown.Space', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype._beforeChange;
    /** @type {?} */
    SwitchComponent.prototype.square;
    /** @type {?} */
    SwitchComponent.prototype.size;
    /** @type {?} */
    SwitchComponent.prototype.color;
    /** @type {?} */
    SwitchComponent.prototype.switchOffColor;
    /** @type {?} */
    SwitchComponent.prototype.switchColor;
    /** @type {?} */
    SwitchComponent.prototype.defaultBgColor;
    /** @type {?} */
    SwitchComponent.prototype.defaultBoColor;
    /** @type {?} */
    SwitchComponent.prototype.checkedLabel;
    /** @type {?} */
    SwitchComponent.prototype.uncheckedLabel;
    /** @type {?} */
    SwitchComponent.prototype.checked;
    /** @type {?} */
    SwitchComponent.prototype.readonly;
    /** @type {?} */
    SwitchComponent.prototype.disabled;
    /** @type {?} */
    SwitchComponent.prototype.editable;
    /** @type {?} */
    SwitchComponent.prototype.reverse;
    /** @type {?} */
    SwitchComponent.prototype.trueValue;
    /** @type {?} */
    SwitchComponent.prototype.falseValue;
    /** @type {?} */
    SwitchComponent.prototype.beforeChange;
    /**
     * @deprecated
     * @type {?}
     */
    SwitchComponent.prototype.changeEvent;
    /** @type {?} */
    SwitchComponent.prototype.clickHandle;
    /**
     * Emits changed value
     * @type {?}
     */
    SwitchComponent.prototype.valueChange;
    /** @type {?} */
    SwitchComponent.prototype.switchElRef;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onChangeCallback;
    /** @type {?} */
    SwitchComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.cdr;
    /** @type {?} */
    SwitchComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,