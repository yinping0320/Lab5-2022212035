/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, Input, Output, EventEmitter, HostListener, forwardRef, Inject, Optional, Injector, ElementRef, ViewChild } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { SWITCH_OPTIONS } from './switch.token';
import { Observable } from 'rxjs';
/** @type {?} */
var UI_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable-next-line: no-use-before-declare */
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SwitchComponent; })),
    multi: true
};
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(config, cdr, injector) {
        if (config === void 0) { config = {}; }
        this.config = config;
        this.cdr = cdr;
        this.injector = injector;
        this.size = 'medium';
        this.editable = true;
        this.trueValue = true;
        this.falseValue = false;
        /**
         * @deprecated
         */
        this.changeEvent = new EventEmitter();
        this.clickHandle = new EventEmitter();
        /**
         * Emits changed value
         */
        this.valueChange = new EventEmitter();
        this.onTouchedCallback = (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { });
        this.onChangeCallback = (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { });
        this.square = (config && config.square) || false;
        this.size = (config && config.size) || this.size;
        this.color = config && config.color;
        this.switchOffColor = config && config.switchOffColor;
        this.switchColor = config && config.switchColor;
        this.defaultBgColor = config && config.defaultBgColor;
        this.defaultBoColor = config && config.defaultBoColor;
        this.checkedLabel = config && config.checkedLabel;
        this.uncheckedLabel = config && config.uncheckedLabel;
    }
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._beforeChange) {
            this._beforeChange.unsubscribe();
        }
    };
    /**
     * @param {?=} flag
     * @return {?}
     */
    SwitchComponent.prototype.getColor = /**
     * @param {?=} flag
     * @return {?}
     */
    function (flag) {
        if (flag === void 0) { flag = ''; }
        if (flag === 'borderColor') {
            return this.defaultBoColor;
        }
        if (flag === 'switchColor') {
            if (this.reverse) {
                return !this.checked
                    ? this.switchColor
                    : this.switchOffColor || this.switchColor;
            }
            return this.checked
                ? this.switchColor
                : this.switchOffColor || this.switchColor;
        }
        if (this.reverse) {
            return !this.checked ? this.color : this.defaultBgColor;
        }
        return this.checked ? this.color : this.defaultBgColor;
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isClick
     * @return {?}
     */
    SwitchComponent.prototype.updateChecked = /**
     * @private
     * @param {?} event
     * @param {?=} isClick
     * @return {?}
     */
    function (event, isClick) {
        if (isClick === void 0) { isClick = true; }
        if (this.disabled || !this.editable) {
            return;
        }
        this.checked = !this.checked;
        /** @type {?} */
        var val = this.getValue(this.checked);
        // Component events
        this.valueChange.emit(val);
        this.changeEvent.emit(event);
        if (isClick) {
            this.clickHandle.emit({ event: event, checked: this.checked, value: val, instance: this });
        }
        this.onChangeCallback(val);
        this.onTouchedCallback(val);
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwitchComponent.prototype.onToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var span = ((/** @type {?} */ (event.target))).closest('.f-cmp-switch');
        if (!span || span !== this.switchElRef.nativeElement) {
            return;
        }
        if (this.beforeChange) {
            this._beforeChange = this.beforeChange.subscribe((/**
             * @param {?} confirm
             * @return {?}
             */
            function (confirm) {
                if (confirm) {
                    _this.updateChecked(event);
                }
            }));
        }
        else {
            this.updateChecked(event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SwitchComponent.prototype.onSpaceHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.updateChecked($event, false);
    };
    /**
     * @private
     * @param {?} checked
     * @return {?}
     */
    SwitchComponent.prototype.getValue = /**
     * @private
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            return checked ? this.trueValue : this.falseValue;
        }
        return checked;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SwitchComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            this.checked = obj == this.trueValue;
        }
        else {
            if (obj !== this.checked) {
                this.checked = !!obj;
            }
        }
        if (this.cdr && !this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SwitchComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SwitchComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SwitchComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    SwitchComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    // bugNum2:462134 && 506852
                    // style="display:flex;height:100%;align-items:center;"
                    selector: 'farris-switch',
                    template: "\n    <div class=\"farris-switch-outlayer\">\n        <span #container tabindex=\"0\" role=\"button\" hidefocus=\"true\" class=\"switch f-cmp-switch\"\n            [ngClass]=\"{\n                checked: checked,\n                disabled: disabled || !editable,\n                square: square,\n                'switch-large': size === 'large',\n                'switch-medium': size === 'medium',\n                'switch-small': size === 'small'\n            }\"\n            [ngStyle]=\"{\n                'outline': 'none',\n                'background-color': getColor(),\n                'border-color': getColor('borderColor')\n            }\"\n        >\n            <span class=\"switch-pane\" *ngIf=\"checkedLabel || uncheckedLabel\">\n                <span class=\"switch-label-checked\">{{\n                    this.checkedLabel\n                }}</span>\n                <span class=\"switch-label-unchecked\">{{\n                    this.uncheckedLabel\n                }}</span>\n            </span>\n            <small [style.background]=\"getColor('switchColor')\">\n                <ng-content></ng-content>\n            </small>\n        </span>\n    <div>\n    ",
                    providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR]
                }] }
    ];
    /** @nocollapse */
    SwitchComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SWITCH_OPTIONS,] }, { type: Optional }] },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    SwitchComponent.propDecorators = {
        square: [{ type: Input }],
        size: [{ type: Input }],
        color: [{ type: Input }],
        switchOffColor: [{ type: Input }],
        switchColor: [{ type: Input }],
        defaultBgColor: [{ type: Input }],
        defaultBoColor: [{ type: Input }],
        checkedLabel: [{ type: Input }],
        uncheckedLabel: [{ type: Input }],
        checked: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        editable: [{ type: Input }],
        reverse: [{ type: Input }],
        trueValue: [{ type: Input }],
        falseValue: [{ type: Input }],
        beforeChange: [{ type: Input }],
        changeEvent: [{ type: Output }],
        clickHandle: [{ type: Output }],
        valueChange: [{ type: Output }],
        switchElRef: [{ type: ViewChild, args: ['container',] }],
        onToggle: [{ type: HostListener, args: ['click', ['$event'],] }],
        onSpaceHandle: [{ type: HostListener, args: ['keydown.Space', ['$event'],] }]
    };
    return SwitchComponent;
}());
export { SwitchComponent };
if (false) {
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype._beforeChange;
    /** @type {?} */
    SwitchComponent.prototype.square;
    /** @type {?} */
    SwitchComponent.prototype.size;
    /** @type {?} */
    SwitchComponent.prototype.color;
    /** @type {?} */
    SwitchComponent.prototype.switchOffColor;
    /** @type {?} */
    SwitchComponent.prototype.switchColor;
    /** @type {?} */
    SwitchComponent.prototype.defaultBgColor;
    /** @type {?} */
    SwitchComponent.prototype.defaultBoColor;
    /** @type {?} */
    SwitchComponent.prototype.checkedLabel;
    /** @type {?} */
    SwitchComponent.prototype.uncheckedLabel;
    /** @type {?} */
    SwitchComponent.prototype.checked;
    /** @type {?} */
    SwitchComponent.prototype.readonly;
    /** @type {?} */
    SwitchComponent.prototype.disabled;
    /** @type {?} */
    SwitchComponent.prototype.editable;
    /** @type {?} */
    SwitchComponent.prototype.reverse;
    /** @type {?} */
    SwitchComponent.prototype.trueValue;
    /** @type {?} */
    SwitchComponent.prototype.falseValue;
    /** @type {?} */
    SwitchComponent.prototype.beforeChange;
    /**
     * @deprecated
     * @type {?}
     */
    SwitchComponent.prototype.changeEvent;
    /** @type {?} */
    SwitchComponent.prototype.clickHandle;
    /**
     * Emits changed value
     * @type {?}
     */
    SwitchComponent.prototype.valueChange;
    /** @type {?} */
    SwitchComponent.prototype.switchElRef;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onTouchedCallback;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.onChangeCallback;
    /** @type {?} */
    SwitchComponent.prototype.config;
    /**
     * @type {?}
     * @private
     */
    SwitchComponent.prototype.cdr;
    /** @type {?} */
    SwitchComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3dpdGNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktc3dpdGNoLyIsInNvdXJjZXMiOlsibGliL3N3aXRjaC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULEtBQUssRUFDTCxNQUFNLEVBQ04sWUFBWSxFQUNaLFlBQVksRUFDWixVQUFVLEVBQ1YsTUFBTSxFQUNOLFFBQVEsRUFFUixRQUFRLEVBRVIsVUFBVSxFQUNWLFNBQVMsRUFFWixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsaUJBQWlCLEVBQW1DLE1BQU0sZ0JBQWdCLENBQUM7QUFFcEYsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRWhELE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sTUFBTSxDQUFDOztJQUUxQyxnQ0FBZ0MsR0FBUTtJQUMxQyxPQUFPLEVBQUUsaUJBQWlCOztJQUUxQixXQUFXLEVBQUUsVUFBVTs7O0lBQUMsY0FBTSxPQUFBLGVBQWUsRUFBZixDQUFlLEVBQUM7SUFDOUMsS0FBSyxFQUFFLElBQUk7Q0FDZDtBQUVEO0lBMkVJLHlCQUMrQyxNQUErQixFQUNsRSxHQUFzQixFQUN2QixRQUFrQjtRQUZrQix1QkFBQSxFQUFBLFdBQStCO1FBQS9CLFdBQU0sR0FBTixNQUFNLENBQXlCO1FBQ2xFLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBQ3ZCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFwQ3BCLFNBQUksR0FBMEMsUUFBUSxDQUFDO1FBWXZELGFBQVEsR0FBRyxJQUFJLENBQUM7UUFHaEIsY0FBUyxHQUFRLElBQUksQ0FBQztRQUN0QixlQUFVLEdBQVEsS0FBSyxDQUFDOzs7O1FBT3ZCLGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUN0QyxnQkFBVyxHQUFHLElBQUksWUFBWSxFQUFPLENBQUM7Ozs7UUFLdEMs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Ozs7O0lBS2hELHNDQUFvRDs7SUFFcEQsc0NBQXFEOzs7OztJQStIckQsNENBQTRDOzs7OztJQUM1QywyQ0FBMkM7O0lBN0h2QyxpQ0FBMEU7Ozs7O0lBQzFFLDhCQUE4Qjs7SUFDOUIsbUNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcclxuICAgIENoYW5nZURldGVjdG9yUmVmLFxyXG4gICAgQ29tcG9uZW50LFxyXG4gICAgSW5wdXQsXHJcbiAgICBPdXRwdXQsXHJcbiAgICBFdmVudEVtaXR0ZXIsXHJcbiAgICBIb3N0TGlzdGVuZXIsXHJcbiAgICBmb3J3YXJkUmVmLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT3B0aW9uYWwsXHJcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcclxuICAgIEluamVjdG9yLFxyXG4gICAgT25Jbml0LFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIFZpZXdDaGlsZCxcclxuICAgIE9uRGVzdHJveVxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBOR19WQUxVRV9BQ0NFU1NPUiwgQ29udHJvbFZhbHVlQWNjZXNzb3IsIE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IFNXSVRDSF9PUFRJT05TIH0gZnJvbSAnLi9zd2l0Y2gudG9rZW4nO1xyXG5pbXBvcnQgeyBTd2l0Y2hNb2R1bGVDb25maWcgfSBmcm9tICcuL3N3aXRjaC5jb25maWcnO1xyXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcclxuXHJcbmNvbnN0IFVJX1NXSVRDSF9DT05UUk9MX1ZBTFVFX0FDQ0VTU09SOiBhbnkgPSB7XHJcbiAgICBwcm92aWRlOiBOR19WQUxVRV9BQ0NFU1NPUixcclxuICAgIC8qIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tdXNlLWJlZm9yZS1kZWNsYXJlICovXHJcbiAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBTd2l0Y2hDb21wb25lbnQpLFxyXG4gICAgbXVsdGk6IHRydWVcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBjb21wb25lbnQtc2VsZWN0b3JcclxuICAgIC8vIGJ1Z051bTI6NDYyMTM0ICYmIDUwNjg1MlxyXG4gICAgLy8gc3R5bGU9XCJkaXNwbGF5OmZsZXg7aGVpZ2h0OjEwMCU7YWxpZ24taXRlbXM6Y2VudGVyO1wiXHJcbiAgICBzZWxlY3RvcjogJ2ZhcnJpcy1zd2l0Y2gnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgY2xhc3M9XCJmYXJyaXMtc3dpdGNoLW91dGxheWVyXCI+XHJcbiAgICAgICAgPHNwYW4gI2NvbnRhaW5lciB0YWJpbmRleD1cIjBcIiByb2xlPVwiYnV0dG9uXCIgaGlkZWZvY3VzPVwidHJ1ZVwiIGNsYXNzPVwic3dpdGNoIGYtY21wLXN3aXRjaFwiXHJcbiAgICAgICAgICAgIFtuZ0NsYXNzXT1cIntcclxuICAgICAgICAgICAgICAgIGNoZWNrZWQ6IGNoZWNrZWQsXHJcbiAgICAgICAgICAgICAgICBkaXNhYmxlZDogZGlzYWJsZWQgfHwgIWVkaXRhYmxlLFxyXG4gICAgICAgICAgICAgICAgc3F1YXJlOiBzcXVhcmUsXHJcbiAgICAgICAgICAgICAgICAnc3dpdGNoLWxhcmdlJzogc2l6ZSA9PT0gJ2xhcmdlJyxcclxuICAgICAgICAgICAgICAgICdzd2l0Y2gtbWVkaXVtJzogc2l6ZSA9PT0gJ21lZGl1bScsXHJcbiAgICAgICAgICAgICAgICAnc3dpdGNoLXNtYWxsJzogc2l6ZSA9PT0gJ3NtYWxsJ1xyXG4gICAgICAgICAgICB9XCJcclxuICAgICAgICAgICAgW25nU3R5bGVdPVwie1xyXG4gICAgICAgICAgICAgICAgJ291dGxpbmUnOiAnbm9uZScsXHJcbiAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1jb2xvcic6IGdldENvbG9yKCksXHJcbiAgICAgICAgICAgICAgICAnYm9yZGVyLWNvbG9yJzogZ2V0Q29sb3IoJ2JvcmRlckNvbG9yJylcclxuICAgICAgICAgICAgfVwiXHJcbiAgICAgICAgPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cInN3aXRjaC1wYW5lXCIgKm5nSWY9XCJjaGVja2VkTGFiZWwgfHwgdW5jaGVja2VkTGFiZWxcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3dpdGNoLWxhYmVsLWNoZWNrZWRcIj57e1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZExhYmVsXHJcbiAgICAgICAgICAgICAgICB9fTwvc3Bhbj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwic3dpdGNoLWxhYmVsLXVuY2hlY2tlZFwiPnt7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bmNoZWNrZWRMYWJlbFxyXG4gICAgICAgICAgICAgICAgfX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvc3Bhbj5cclxuICAgICAgICAgICAgPHNtYWxsIFtzdHlsZS5iYWNrZ3JvdW5kXT1cImdldENvbG9yKCdzd2l0Y2hDb2xvcicpXCI+XHJcbiAgICAgICAgICAgICAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XHJcbiAgICAgICAgICAgIDwvc21hbGw+XHJcbiAgICAgICAgPC9zcGFuPlxyXG4gICAgPGRpdj5cclxuICAgIGAsXHJcbiAgICBwcm92aWRlcnM6IFtVSV9TV0lUQ0hfQ09OVFJPTF9WQUxVRV9BQ0NFU1NPUl1cclxufSlcclxuZXhwb3J0IGNsYXNzIFN3aXRjaENvbXBvbmVudCBpbXBsZW1lbnRzIENvbnRyb2xWYWx1ZUFjY2Vzc29yLCBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSBfYmVmb3JlQ2hhbmdlOiBTdWJzY3JpcHRpb247XHJcblxyXG4gICAgQElucHV0KCkgc3F1YXJlOiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgc2l6ZTogc3RyaW5nIHwgJ3NtYWxsJyB8ICdtZWRpdW0nIHwgJ2xhcmdlJyA9ICdtZWRpdW0nO1xyXG4gICAgQElucHV0KCkgY29sb3I6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHN3aXRjaE9mZkNvbG9yOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBzd2l0Y2hDb2xvcjogc3RyaW5nO1xyXG4gICAgQElucHV0KCkgZGVmYXVsdEJnQ29sb3I6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIGRlZmF1bHRCb0NvbG9yOiBzdHJpbmc7XHJcbiAgICBASW5wdXQoKSBjaGVja2VkTGFiZWw6IHN0cmluZztcclxuICAgIEBJbnB1dCgpIHVuY2hlY2tlZExhYmVsOiBzdHJpbmc7XHJcblxyXG4gICAgQElucHV0KCkgY2hlY2tlZDogYm9vbGVhbjtcclxuICAgIEBJbnB1dCgpIHJlYWRvbmx5OiBib29sZWFuO1xyXG4gICAgQElucHV0KCkgZGlzYWJsZWQ6IGJvb2xlYW47XHJcbiAgICBASW5wdXQoKSBlZGl0YWJsZSA9IHRydWU7XHJcbiAgICBASW5wdXQoKSByZXZlcnNlOiBib29sZWFuO1xyXG5cclxuICAgIEBJbnB1dCgpIHRydWVWYWx1ZTogYW55ID0gdHJ1ZTtcclxuICAgIEBJbnB1dCgpIGZhbHNlVmFsdWU6IGFueSA9IGZhbHNlO1xyXG5cclxuICAgIEBJbnB1dCgpIGJlZm9yZUNoYW5nZTogT2JzZXJ2YWJsZTxib29sZWFuPjtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBkZXByZWNhdGVkXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSBjaGFuZ2VFdmVudCA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgQE91dHB1dCgpIGNsaWNrSGFuZGxlID0gbmV3IEV2ZW50RW1pdHRlcjxhbnk+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBFbWl0cyBjaGFuZ2VkIHZhbHVlXHJcbiAgICAgKi9cclxuICAgIEBPdXRwdXQoKSB2YWx1ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdjb250YWluZXInKSBzd2l0Y2hFbFJlZjogRWxlbWVudFJlZjxhbnk+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoU1dJVENIX09QVElPTlMpIEBPcHRpb25hbCgpIHB1YmxpYyBjb25maWc6IFN3aXRjaE1vZHVsZUNvbmZpZyA9IHt9LFxyXG4gICAgICAgIHByaXZhdGUgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcclxuICAgICAgICBwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICApIHtcclxuICAgICAgICB0aGlzLnNxdWFyZSA9IChjb25maWcgJiYgY29uZmlnLnNxdWFyZSkgfHwgZmFsc2U7XHJcbiAgICAgICAgdGhpcy5zaXplID0gKGNvbmZpZyAmJiBjb25maWcuc2l6ZSkgfHwgdGhpcy5zaXplO1xyXG4gICAgICAgIHRoaXMuY29sb3IgPSBjb25maWcgJiYgY29uZmlnLmNvbG9yO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoT2ZmQ29sb3IgPSBjb25maWcgJiYgY29uZmlnLnN3aXRjaE9mZkNvbG9yO1xyXG4gICAgICAgIHRoaXMuc3dpdGNoQ29sb3IgPSBjb25maWcgJiYgY29uZmlnLnN3aXRjaENvbG9yO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEJnQ29sb3IgPSBjb25maWcgJiYgY29uZmlnLmRlZmF1bHRCZ0NvbG9yO1xyXG4gICAgICAgIHRoaXMuZGVmYXVsdEJvQ29sb3IgPSBjb25maWcgJiYgY29uZmlnLmRlZmF1bHRCb0NvbG9yO1xyXG4gICAgICAgIHRoaXMuY2hlY2tlZExhYmVsID0gY29uZmlnICYmIGNvbmZpZy5jaGVja2VkTGFiZWw7XHJcbiAgICAgICAgdGhpcy51bmNoZWNrZWRMYWJlbCA9IGNvbmZpZyAmJiBjb25maWcudW5jaGVja2VkTGFiZWw7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2JlZm9yZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVDaGFuZ2UudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q29sb3IoZmxhZyA9ICcnKSB7XHJcbiAgICAgICAgaWYgKGZsYWcgPT09ICdib3JkZXJDb2xvcicpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdEJvQ29sb3I7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChmbGFnID09PSAnc3dpdGNoQ29sb3InKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5jaGVja2VkXHJcbiAgICAgICAgICAgICAgICAgICAgPyB0aGlzLnN3aXRjaENvbG9yXHJcbiAgICAgICAgICAgICAgICAgICAgOiB0aGlzLnN3aXRjaE9mZkNvbG9yIHx8IHRoaXMuc3dpdGNoQ29sb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgPyB0aGlzLnN3aXRjaENvbG9yXHJcbiAgICAgICAgICAgICAgICA6IHRoaXMuc3dpdGNoT2ZmQ29sb3IgfHwgdGhpcy5zd2l0Y2hDb2xvcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHRoaXMucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuY2hlY2tlZCA/IHRoaXMuY29sb3IgOiB0aGlzLmRlZmF1bHRCZ0NvbG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5jaGVja2VkID8gdGhpcy5jb2xvciA6IHRoaXMuZGVmYXVsdEJnQ29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSB1cGRhdGVDaGVja2VkKGV2ZW50OiBhbnksIGlzQ2xpY2sgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQgfHwgIXRoaXMuZWRpdGFibGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tlZCA9ICF0aGlzLmNoZWNrZWQ7XHJcbiAgICAgICAgY29uc3QgdmFsID0gdGhpcy5nZXRWYWx1ZSh0aGlzLmNoZWNrZWQpO1xyXG4gICAgICAgIC8vIENvbXBvbmVudCBldmVudHNcclxuICAgICAgICB0aGlzLnZhbHVlQ2hhbmdlLmVtaXQodmFsKTtcclxuICAgICAgICB0aGlzLmNoYW5nZUV2ZW50LmVtaXQoZXZlbnQpO1xyXG4gICAgICAgIGlmIChpc0NsaWNrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2xpY2tIYW5kbGUuZW1pdCh7IGV2ZW50LCBjaGVja2VkOiB0aGlzLmNoZWNrZWQsIHZhbHVlOiB2YWwsIGluc3RhbmNlOiB0aGlzIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrKHZhbCk7XHJcbiAgICAgICAgdGhpcy5vblRvdWNoZWRDYWxsYmFjayh2YWwpO1xyXG4gICAgICAgIGlmICghdGhpcy5jZHJbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcignY2xpY2snLCBbJyRldmVudCddKVxyXG4gICAgb25Ub2dnbGUoZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuXHJcbiAgICAgICAgY29uc3Qgc3BhbiA9ICg8YW55PmV2ZW50LnRhcmdldCkuY2xvc2VzdCgnLmYtY21wLXN3aXRjaCcpXHJcblxyXG4gICAgICAgIGlmICghc3BhbiB8fCBzcGFuICE9PSB0aGlzLnN3aXRjaEVsUmVmLm5hdGl2ZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJlZm9yZUNoYW5nZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9iZWZvcmVDaGFuZ2UgPSB0aGlzLmJlZm9yZUNoYW5nZS5zdWJzY3JpYmUoKGNvbmZpcm06IGJvb2xlYW4pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChjb25maXJtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGRhdGVDaGVja2VkKGV2ZW50KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVDaGVja2VkKGV2ZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQEhvc3RMaXN0ZW5lcigna2V5ZG93bi5TcGFjZScsIFsnJGV2ZW50J10pXHJcbiAgICBvblNwYWNlSGFuZGxlKCRldmVudDogYW55KSB7XHJcbiAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tlZCgkZXZlbnQsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGdldFZhbHVlKGNoZWNrZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBpZiAodGhpcy50cnVlVmFsdWUgIT09IHVuZGVmaW5lZCAmJiB0aGlzLmZhbHNlVmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gY2hlY2tlZCA/IHRoaXMudHJ1ZVZhbHVlIDogdGhpcy5mYWxzZVZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gY2hlY2tlZDtcclxuICAgIH1cclxuXHJcbiAgICB3cml0ZVZhbHVlKG9iajogYW55KTogdm9pZCB7XHJcbiAgICAgICAgaWYgKHRoaXMudHJ1ZVZhbHVlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5mYWxzZVZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gb2JqID09IHRoaXMudHJ1ZVZhbHVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChvYmogIT09IHRoaXMuY2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gISFvYmo7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNkciAmJiAhdGhpcy5jZHJbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KSB7XHJcbiAgICAgICAgdGhpcy5vbkNoYW5nZUNhbGxiYWNrID0gZm47XHJcbiAgICB9XHJcblxyXG4gICAgcmVnaXN0ZXJPblRvdWNoZWQoZm46IGFueSkge1xyXG4gICAgICAgIHRoaXMub25Ub3VjaGVkQ2FsbGJhY2sgPSBmbjtcclxuICAgIH1cclxuXHJcbiAgICBzZXREaXNhYmxlZFN0YXRlKGlzRGlzYWJsZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gaXNEaXNhYmxlZDtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uVG91Y2hlZENhbGxiYWNrID0gKHY6IGFueSkgPT4geyB9O1xyXG4gICAgcHJpdmF0ZSBvbkNoYW5nZUNhbGxiYWNrID0gKHY6IGFueSkgPT4geyB9O1xyXG59XHJcbiJdfQ==