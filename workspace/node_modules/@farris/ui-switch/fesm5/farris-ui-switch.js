import 'rxjs';
import { InjectionToken, ChangeDetectorRef, Component, Input, Output, EventEmitter, HostListener, forwardRef, Inject, Optional, Injector, ViewChild, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var SWITCH_OPTIONS = new InjectionToken('UI_SWITCH_OPTIONS');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var UI_SWITCH_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    /* tslint:disable-next-line: no-use-before-declare */
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return SwitchComponent; })),
    multi: true
};
var SwitchComponent = /** @class */ (function () {
    function SwitchComponent(config, cdr, injector) {
        if (config === void 0) { config = {}; }
        this.config = config;
        this.cdr = cdr;
        this.injector = injector;
        this.size = 'medium';
        this.editable = true;
        this.trueValue = true;
        this.falseValue = false;
        /**
         * @deprecated
         */
        this.changeEvent = new EventEmitter();
        this.clickHandle = new EventEmitter();
        /**
         * Emits changed value
         */
        this.valueChange = new EventEmitter();
        this.onTouchedCallback = (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { });
        this.onChangeCallback = (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { });
        this.square = (config && config.square) || false;
        this.size = (config && config.size) || this.size;
        this.color = config && config.color;
        this.switchOffColor = config && config.switchOffColor;
        this.switchColor = config && config.switchColor;
        this.defaultBgColor = config && config.defaultBgColor;
        this.defaultBoColor = config && config.defaultBoColor;
        this.checkedLabel = config && config.checkedLabel;
        this.uncheckedLabel = config && config.uncheckedLabel;
    }
    /**
     * @return {?}
     */
    SwitchComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this._beforeChange) {
            this._beforeChange.unsubscribe();
        }
    };
    /**
     * @param {?=} flag
     * @return {?}
     */
    SwitchComponent.prototype.getColor = /**
     * @param {?=} flag
     * @return {?}
     */
    function (flag) {
        if (flag === void 0) { flag = ''; }
        if (flag === 'borderColor') {
            return this.defaultBoColor;
        }
        if (flag === 'switchColor') {
            if (this.reverse) {
                return !this.checked
                    ? this.switchColor
                    : this.switchOffColor || this.switchColor;
            }
            return this.checked
                ? this.switchColor
                : this.switchOffColor || this.switchColor;
        }
        if (this.reverse) {
            return !this.checked ? this.color : this.defaultBgColor;
        }
        return this.checked ? this.color : this.defaultBgColor;
    };
    /**
     * @private
     * @param {?} event
     * @param {?=} isClick
     * @return {?}
     */
    SwitchComponent.prototype.updateChecked = /**
     * @private
     * @param {?} event
     * @param {?=} isClick
     * @return {?}
     */
    function (event, isClick) {
        if (isClick === void 0) { isClick = true; }
        if (this.disabled || !this.editable) {
            return;
        }
        this.checked = !this.checked;
        /** @type {?} */
        var val = this.getValue(this.checked);
        // Component events
        this.valueChange.emit(val);
        this.changeEvent.emit(event);
        if (isClick) {
            this.clickHandle.emit({ event: event, checked: this.checked, value: val, instance: this });
        }
        this.onChangeCallback(val);
        this.onTouchedCallback(val);
        if (!this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwitchComponent.prototype.onToggle = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var span = ((/** @type {?} */ (event.target))).closest('.f-cmp-switch');
        if (!span || span !== this.switchElRef.nativeElement) {
            return;
        }
        if (this.beforeChange) {
            this._beforeChange = this.beforeChange.subscribe((/**
             * @param {?} confirm
             * @return {?}
             */
            function (confirm) {
                if (confirm) {
                    _this.updateChecked(event);
                }
            }));
        }
        else {
            this.updateChecked(event);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    SwitchComponent.prototype.onSpaceHandle = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.preventDefault();
        $event.stopPropagation();
        this.updateChecked($event, false);
    };
    /**
     * @private
     * @param {?} checked
     * @return {?}
     */
    SwitchComponent.prototype.getValue = /**
     * @private
     * @param {?} checked
     * @return {?}
     */
    function (checked) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            return checked ? this.trueValue : this.falseValue;
        }
        return checked;
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    SwitchComponent.prototype.writeValue = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        if (this.trueValue !== undefined && this.falseValue !== undefined) {
            this.checked = obj == this.trueValue;
        }
        else {
            if (obj !== this.checked) {
                this.checked = !!obj;
            }
        }
        if (this.cdr && !this.cdr['destroyed']) {
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SwitchComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCallback = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    SwitchComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCallback = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    SwitchComponent.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    SwitchComponent.decorators = [
        { type: Component, args: [{
                    // tslint:disable-next-line: component-selector
                    // bugNum2:462134 && 506852
                    // style="display:flex;height:100%;align-items:center;"
                    selector: 'farris-switch',
                    template: "\n    <div class=\"farris-switch-outlayer\">\n        <span #container tabindex=\"0\" role=\"button\" hidefocus=\"true\" class=\"switch f-cmp-switch\"\n            [ngClass]=\"{\n                checked: checked,\n                disabled: disabled || !editable,\n                square: square,\n                'switch-large': size === 'large',\n                'switch-medium': size === 'medium',\n                'switch-small': size === 'small'\n            }\"\n            [ngStyle]=\"{\n                'outline': 'none',\n                'background-color': getColor(),\n                'border-color': getColor('borderColor')\n            }\"\n        >\n            <span class=\"switch-pane\" *ngIf=\"checkedLabel || uncheckedLabel\">\n                <span class=\"switch-label-checked\">{{\n                    this.checkedLabel\n                }}</span>\n                <span class=\"switch-label-unchecked\">{{\n                    this.uncheckedLabel\n                }}</span>\n            </span>\n            <small [style.background]=\"getColor('switchColor')\">\n                <ng-content></ng-content>\n            </small>\n        </span>\n    <div>\n    ",
                    providers: [UI_SWITCH_CONTROL_VALUE_ACCESSOR]
                }] }
    ];
    /** @nocollapse */
    SwitchComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SWITCH_OPTIONS,] }, { type: Optional }] },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    SwitchComponent.propDecorators = {
        square: [{ type: Input }],
        size: [{ type: Input }],
        color: [{ type: Input }],
        switchOffColor: [{ type: Input }],
        switchColor: [{ type: Input }],
        defaultBgColor: [{ type: Input }],
        defaultBoColor: [{ type: Input }],
        checkedLabel: [{ type: Input }],
        uncheckedLabel: [{ type: Input }],
        checked: [{ type: Input }],
        readonly: [{ type: Input }],
        disabled: [{ type: Input }],
        editable: [{ type: Input }],
        reverse: [{ type: Input }],
        trueValue: [{ type: Input }],
        falseValue: [{ type: Input }],
        beforeChange: [{ type: Input }],
        changeEvent: [{ type: Output }],
        clickHandle: [{ type: Output }],
        valueChange: [{ type: Output }],
        switchElRef: [{ type: ViewChild, args: ['container',] }],
        onToggle: [{ type: HostListener, args: ['click', ['$event'],] }],
        onSpaceHandle: [{ type: HostListener, args: ['keydown.Space', ['$event'],] }]
    };
    return SwitchComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SwitchModule = /** @class */ (function () {
    function SwitchModule() {
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    SwitchModule.forRoot = /**
     * @param {?=} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: SwitchModule,
            providers: [{ provide: SWITCH_OPTIONS, useValue: config || {} }]
        };
    };
    SwitchModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [SwitchComponent],
                    imports: [CommonModule, FormsModule],
                    exports: [FormsModule, SwitchComponent]
                },] }
    ];
    return SwitchModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { SwitchComponent, SwitchModule, SWITCH_OPTIONS };

//# sourceMappingURL=farris-ui-switch.js.map