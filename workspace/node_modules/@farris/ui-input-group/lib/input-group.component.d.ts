import { SimpleChanges, Renderer2, Injector, ChangeDetectorRef } from '@angular/core';
import { NgZone, TemplateRef } from '@angular/core';
import { OnInit, EventEmitter, ElementRef, AfterViewInit, OnChanges } from '@angular/core';
import { ControlValueAccessor, NgControl } from '@angular/forms';
export declare const INPUT_GROUP_VALUE_ACCESSOR: any;
export declare class InputGroupComponent implements OnInit, AfterViewInit, OnChanges, ControlValueAccessor {
    el: ElementRef;
    private renderer;
    private ngZone;
    private injector;
    autocomplete: string;
    showClearButton: boolean;
    ngControl: NgControl;
    value: string;
    /** 只读 */
    readonly: boolean;
    /** 禁用 */
    disabled: boolean;
    /** 允许编辑 */
    editable: boolean;
    /** 启用清除按钮 */
    enableClear: boolean;
    /** 扩展按钮 */
    groupText: string;
    /** 自定义CLASS */
    customCls: string;
    /** 当组件禁用或只读时显示后边的按钮 */
    showButtonWhenDisabled: boolean;
    /** 启用提示信息 */
    placeholder: string;
    /** 文本在输入框中的对齐方式 */
    textAlign: string;
    groupTextTemplate: TemplateRef<any>;
    isPassword: boolean;
    enableViewPassword: boolean;
    noborder: boolean;
    minLength: number | undefined;
    maxLength: number | undefined;
    tabIndex: number;
    enableTitle: boolean;
    /** 扩展信息；在输入框前面 显示 ① 图标鼠标滑过后显示 */
    useExtendInfo: boolean;
    extendInfo: string;
    forcePlaceholder: boolean;
    updateExtendInfo: EventEmitter<{}>;
    clear: EventEmitter<{}>;
    valueChange: EventEmitter<{}>;
    clickHandle: EventEmitter<{}>;
    blurHandle: EventEmitter<{}>;
    focusHandle: EventEmitter<{}>;
    enterHandle: EventEmitter<{}>;
    iconMouseEnter: EventEmitter<{}>;
    iconMouseLeave: EventEmitter<{}>;
    keyupHandle: EventEmitter<{}>;
    keydownHandle: EventEmitter<{}>;
    inputClick: EventEmitter<{}>;
    inputGroup: ElementRef;
    textbox: ElementRef;
    clearIconRef: ElementRef;
    inputType: string;
    private state;
    cd: ChangeDetectorRef;
    private focusCls;
    private ro;
    onModelChange: (obj: any) => void;
    onModelTouched: (val: any) => void;
    private openEyeICON;
    private closeEyeICON;
    constructor(el: ElementRef, renderer: Renderer2, ngZone: NgZone, injector: Injector);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngModelChange(val: any): void;
    private initSmartPassword;
    onEnter($event: KeyboardEvent): void;
    onInputFocus($event: any): void;
    onInputClick($event: any): void;
    onMouseEnter(event: any): void;
    onMouseLeave(event: any): void;
    getStateCls(): {
        'f-state-disabled': boolean;
        'f-state-editable'?: undefined;
        'f-state-readonly'?: undefined;
    } | {
        'f-state-editable': boolean;
        'f-state-readonly': boolean;
        'f-state-disabled'?: undefined;
    } | {
        'f-state-readonly': boolean;
        'f-state-disabled'?: undefined;
        'f-state-editable'?: undefined;
    };
    private toggleClearIcon;
    onMouseOverInExtentInfo(): void;
    onMousedown($event: MouseEvent): void;
    onClearValue($event: any): void;
    onBlur(event: any): boolean;
    onValueChange(val: string, emit?: boolean): void;
    onClickHandle(event?: Event): void;
    onIconMouseEnter(e: MouseEvent): void;
    onIconMouseLeave(e: MouseEvent): void;
    focus(): void;
    writeValue(obj: any): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    setFocusToEnd(): void;
}
