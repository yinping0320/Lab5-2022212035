!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("resize-observer-polyfill"),require("@farris/ui-popover"),require("@angular/core"),require("@farris/ui-common"),require("@angular/common"),require("@angular/forms")):"function"==typeof define&&define.amd?define("@farris/ui-input-group",["exports","resize-observer-polyfill","@farris/ui-popover","@angular/core","@farris/ui-common","@angular/common","@angular/forms"],t):t((e.farris=e.farris||{},e.farris["ui-input-group"]={}),e.ResizeObserver,e.uiPopover,e.ng.core,e.uiCommon,e.ng.common,e.ng.forms)}(this,function(e,t,n,i,o,r,s){"use strict";t=t&&t.hasOwnProperty("default")?t["default"]:t;var a=(u.decorators=[{type:i.Injectable,args:[{providedIn:"root"}]}],u.ctorParameters=function(){return[]},u.ngInjectableDef=i.defineInjectable({factory:function(){return new u},token:u,providedIn:"root"}),u);function u(){}var l={provide:s.NG_VALUE_ACCESSOR,useExisting:i.forwardRef(function(){return p}),multi:!0},p=(d.prototype.ngOnInit=function(){this.initSmartPassword()},d.prototype.ngAfterViewInit=function(){var i=this;this.ngZone.runOutsideAngular(function(){i.enableClear&&(i.inputGroup.nativeElement.addEventListener("mouseenter",i.onMouseEnter.bind(i)),i.inputGroup.nativeElement.addEventListener("mouseleave",i.onMouseLeave.bind(i))),i.ro=new t(function(e,t){if(e&&e[0]&&i.clearIconRef){var n=e[0].contentRect,o=n.width;n.height,e[0].target,o<70?i.clearIconRef.nativeElement.classList.add("input-group-clear-right"):i.clearIconRef.nativeElement.classList.remove("input-group-clear-right")}}),i.ro.observe(i.inputGroup.nativeElement),i.noborder&&i.renderer.setStyle(i.inputGroup.nativeElement,"borderWidth","0px");var e=i.el.nativeElement.querySelector(".input-group-append");!i.groupText&&e&&i.renderer.setStyle(e,"margin-left","0")})},d.prototype.ngOnChanges=function(t){var n=this;["readonly","disabled"].forEach(function(e){t[e]&&!t[e].isFirstChange()&&n[e]&&n.isPassword&&(n.groupText&&(n.groupText=n.closeEyeICON),n.inputType="password")})},d.prototype.ngModelChange=function(e){},d.prototype.initSmartPassword=function(){var n=this;if(this.isPassword){this.groupText=this.closeEyeICON,this.enableViewPassword||(this.groupText="");var o=!(this.inputType="password");this.onClickHandle=function(e){var t=(o=!o)?"text":"password";return n.groupText=o?n.openEyeICON:n.closeEyeICON,n.inputType=t,n.cd.detectChanges(),!1}}else this.inputType="text"},d.prototype.onEnter=function(e){this.enterHandle.emit({originalEvent:e})},d.prototype.onInputFocus=function(e){this.disabled||(this.noborder||this.renderer.addClass(this.inputGroup.nativeElement,this.focusCls),!this.editable&&this.readonly||this.focusHandle.emit(e))},d.prototype.onInputClick=function(e){this.inputClick.emit(e)},d.prototype.onMouseEnter=function(e){this.value&&(this.editable?this.readonly||this.disabled||(this.showClearButton=!0):this.state||this.disabled||(this.showClearButton=!0)),this.showClearButton&&this.toggleClearIcon(e,!0)},d.prototype.onMouseLeave=function(e){this.showClearButton=!1,this.toggleClearIcon(e,!1)},d.prototype.getStateCls=function(){return this.disabled?{"f-state-disabled":!0}:this.editable?{"f-state-readonly":this.readonly}:{"f-state-editable":!0,"f-state-readonly":this.readonly}},d.prototype.toggleClearIcon=function(e,t){void 0===t&&(t=!1);var n=t?"":"none",o=e.target.querySelector(".input-group-clear");o&&(o.style.display=n)},d.prototype.onMouseOverInExtentInfo=function(){this.updateExtendInfo.emit()},d.prototype.onMousedown=function(e){"INPUT"!==e.target.tagName&&e.preventDefault(),e.stopPropagation()},d.prototype.onClearValue=function(e){var t=!this.readonly&&!this.disabled&&this.editable,n=!this.editable;e.stopPropagation(),(t||n)&&(this.onValueChange("",!1),this.showClearButton=!1,this.clear.emit())},d.prototype.onBlur=function(e){return this.renderer.removeClass(this.inputGroup.nativeElement,this.focusCls),this.blurHandle.emit(e),e.stopPropagation(),!1},d.prototype.onValueChange=function(e,t){void 0===t&&(t=!0),this.value!==e&&(this.value=e,this.onModelChange(e),this.onModelTouched(e),t&&this.valueChange.emit(e))},d.prototype.onClickHandle=function(e){!this.showButtonWhenDisabled&&(this.editable&&this.readonly||this.disabled)||this.clickHandle.emit({originalEvent:e,value:this.value}),e&&e.stopPropagation()},d.prototype.onIconMouseEnter=function(e){this.iconMouseEnter.emit(e)},d.prototype.onIconMouseLeave=function(e){this.iconMouseLeave.emit(e)},d.prototype.focus=function(){this.textbox.nativeElement.focus()},d.prototype.writeValue=function(e){this.value=null===e||e===undefined?"":e,this.textbox.nativeElement.value=this.value},d.prototype.registerOnChange=function(e){this.onModelChange=e},d.prototype.registerOnTouched=function(e){this.onModelTouched=e},d.prototype.setDisabledState=function(e){this.disabled=e},d.prototype.setFocusToEnd=function(){var e=this.textbox.nativeElement;e.focus(),e.selectionStart=e.value.length,e.selectionEnd=e.value.length},d.decorators=[{type:i.Component,args:[{selector:"farrisui-input-group, input-group, farris-input-group",template:'\n        <div #inputGroup [class]="customCls + \' input-group\'"\n            [class.f-state-disabled]="disabled"\n            [class.f-state-editable]="editable && !disabled && !readonly"\n            [class.f-state-readonly]="readonly && !disabled">\n            <span class="input-group-before-tips" *ngIf="useExtendInfo" (mouseenter)="onMouseOverInExtentInfo()"\n                farrisPopover [popover]="extendInfo" [triggers]="\'hover\'" [container]="\'body\'" [placement]="\'top\'">\n                <i class="f-icon f-icon-info-circle"></i><b class="tips-arrow"></b>\n            </span>\n\n            <input\n                #textbox\n                name="input-group-value"\n                class="form-control f-utils-fill"\n                [class.text-left]="textAlign == \'left\'"\n                [class.text-center]="textAlign == \'center\'"\n                [class.text-right]="textAlign == \'right\'"\n                [attr.title]="(enableTitle && !isPassword)? value: \'\'"\n                [attr.type]="inputType"\n                [attr.placeholder]="(disabled||readonly)&&!forcePlaceholder?\'\':placeholder"\n                [attr.autocomplete]="autocomplete"\n                [readonly]="readonly || !editable"\n                [ngModel]="value"\n                [disabled]="disabled"\n                (blur)="onBlur($event)"\n                (mousedown)="onMousedown($event)"\n                (ngModelChange)="onValueChange($event)"\n                (keydown.enter)="onEnter($event)"\n                (focus)="onInputFocus($event)"\n                (click)="onInputClick($event)"\n                minlength="{{minLength}}"\n                maxlength="{{maxLength}}"\n                (keyup)="keyupHandle.emit($event)"\n                (keydown)="keydownHandle.emit($event)"\n                [attr.tabindex]="tabIndex"\n            />\n            <div class="input-group-append" [ngClass]="{\'append-force-show\':showButtonWhenDisabled && (readonly||disabled)}"  *ngIf="enableClear || groupText || groupTextTemplate">\n                <span *ngIf="enableClear && !readonly && !disabled"\n                    [style.display]="showClearButton ? \'flex\' : \'none\'"\n                    class="input-group-text input-group-clear" #clearIcon\n                    (click)="onClearValue($event)" style="width:24px">\n                    <i class="f-icon modal_close"></i>\n                </span>\n                <span class="input-group-text"\n                    (mouseenter)="onIconMouseEnter($event)" (mouseleave)="onIconMouseLeave($event)"\n                    *ngIf="groupText && !groupTextTemplate" [innerHTML]="groupText | safe: \'html\'"\n                    (click)="onClickHandle($event)"></span>\n                <ng-container *ngIf="groupTextTemplate">\n                    <ng-container *ngTemplateOutlet="groupTextTemplate" ></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    ',providers:[l],encapsulation:i.ViewEncapsulation.None,styles:["\n            .input-group {\n                flex-wrap: nowrap;\n            }\n            .input-group-text {\n                cursor: pointer;\n            }\n            .input-group-clear {\n                cursor: pointer;\n            }\n\n            .input-group-text:hover {\n                background: #ccc;\n            }\n\n            .input-group-clear-right {\n                position: absolute;\n                height: 100%;\n                right: 0;\n                top: 0;\n                z-index: 100;\n            }\n        "]}]}],d.ctorParameters=function(){return[{type:i.ElementRef},{type:i.Renderer2},{type:i.NgZone},{type:i.Injector}]},d.propDecorators={autocomplete:[{type:i.HostBinding,args:["class.f-cmp-inputgroup"]},{type:i.Input}],value:[{type:i.Input}],readonly:[{type:i.Input}],disabled:[{type:i.Input}],editable:[{type:i.Input}],enableClear:[{type:i.Input}],groupText:[{type:i.Input}],customCls:[{type:i.Input}],showButtonWhenDisabled:[{type:i.Input}],placeholder:[{type:i.Input}],textAlign:[{type:i.Input}],groupTextTemplate:[{type:i.Input}],isPassword:[{type:i.Input}],enableViewPassword:[{type:i.Input}],noborder:[{type:i.Input}],minLength:[{type:i.Input}],maxLength:[{type:i.Input}],tabIndex:[{type:i.Input}],enableTitle:[{type:i.Input}],useExtendInfo:[{type:i.Input}],extendInfo:[{type:i.Input}],forcePlaceholder:[{type:i.Input}],updateExtendInfo:[{type:i.Output}],clear:[{type:i.Output}],valueChange:[{type:i.Output}],clickHandle:[{type:i.Output}],blurHandle:[{type:i.Output}],focusHandle:[{type:i.Output}],enterHandle:[{type:i.Output}],iconMouseEnter:[{type:i.Output}],iconMouseLeave:[{type:i.Output}],keyupHandle:[{type:i.Output}],keydownHandle:[{type:i.Output}],inputClick:[{type:i.Output}],inputGroup:[{type:i.ViewChild,args:["inputGroup"]}],textbox:[{type:i.ViewChild,args:["textbox"]}],clearIconRef:[{type:i.ViewChild,args:["clearIcon"]}]},d);function d(e,t,n,o){this.el=e,this.renderer=t,this.ngZone=n,this.injector=o,this.autocomplete="off",this.showClearButton=!1,this.value="",this.readonly=!1,this.disabled=!1,this.editable=!0,this.enableClear=!0,this.groupText="",this.customCls="",this.showButtonWhenDisabled=!1,this.placeholder="",this.textAlign="left",this.isPassword=!1,this.enableViewPassword=!0,this.noborder=!1,this.minLength=undefined,this.maxLength=undefined,this.enableTitle=!0,this.useExtendInfo=!1,this.extendInfo="",this.forcePlaceholder=!1,this.updateExtendInfo=new i.EventEmitter,this.clear=new i.EventEmitter,this.valueChange=new i.EventEmitter,this.clickHandle=new i.EventEmitter,this.blurHandle=new i.EventEmitter,this.focusHandle=new i.EventEmitter,this.enterHandle=new i.EventEmitter,this.iconMouseEnter=new i.EventEmitter,this.iconMouseLeave=new i.EventEmitter,this.keyupHandle=new i.EventEmitter,this.keydownHandle=new i.EventEmitter,this.inputClick=new i.EventEmitter,this.inputType="text",this.cd=null,this.focusCls="f-state-focus",this.ro=null,this.onModelChange=function(e){},this.onModelTouched=function(e){},this.openEyeICON='<span class="f-icon f-icon-eye" style="color: rgb(56, 143, 255);"></span>',this.closeEyeICON='<span class="f-icon f-icon-eye"></span>',this.cd=this.injector.get(i.ChangeDetectorRef)}var c=(h.decorators=[{type:i.NgModule,args:[{declarations:[p],imports:[r.CommonModule,s.FormsModule,n.PopoverModule.forRoot(),o.FarrisCommonModule],exports:[p]}]}],h);function h(){}e.InputGroupService=a,e.INPUT_GROUP_VALUE_ACCESSOR=l,e.InputGroupComponent=p,e.InputGroupModule=c,Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=farris-ui-input-group.umd.min.js.map