(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('resize-observer-polyfill'), require('@farris/ui-popover'), require('@angular/core'), require('@farris/ui-common'), require('@angular/common'), require('@angular/forms')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-input-group', ['exports', 'resize-observer-polyfill', '@farris/ui-popover', '@angular/core', '@farris/ui-common', '@angular/common', '@angular/forms'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-input-group'] = {}),global.ResizeObserver,global.uiPopover,global.ng.core,global.uiCommon,global.ng.common,global.ng.forms));
}(this, (function (exports,ResizeObserver,uiPopover,i0,uiCommon,common,forms) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputGroupService = /** @class */ (function () {
        function InputGroupService() {
        }
        InputGroupService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        InputGroupService.ctorParameters = function () { return []; };
        /** @nocollapse */ InputGroupService.ngInjectableDef = i0.defineInjectable({ factory: function InputGroupService_Factory() { return new InputGroupService(); }, token: InputGroupService, providedIn: "root" });
        return InputGroupService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var INPUT_GROUP_VALUE_ACCESSOR = {
        provide: forms.NG_VALUE_ACCESSOR,
        useExisting: i0.forwardRef(( /**
         * @return {?}
         */function () { return InputGroupComponent; })),
        multi: true
    };
    var InputGroupComponent = /** @class */ (function () {
        function InputGroupComponent(el, renderer, ngZone, injector) {
            this.el = el;
            this.renderer = renderer;
            this.ngZone = ngZone;
            this.injector = injector;
            this.autocomplete = 'off';
            this.showClearButton = false;
            this.value = '';
            /**
             * 只读
             */
            this.readonly = false;
            /**
             * 禁用
             */
            this.disabled = false;
            /**
             * 允许编辑
             */
            this.editable = true;
            /**
             * 启用清除按钮
             */
            this.enableClear = true;
            /**
             * 扩展按钮
             */
            this.groupText = '';
            /**
             * 自定义CLASS
             */
            this.customCls = '';
            /**
             * 当组件禁用或只读时显示后边的按钮
             */
            this.showButtonWhenDisabled = false;
            /**
             * 启用提示信息
             */
            this.placeholder = '';
            /**
             * 文本在输入框中的对齐方式
             */
            this.textAlign = 'left';
            this.isPassword = false;
            this.enableViewPassword = true;
            this.noborder = false;
            this.minLength = undefined;
            this.maxLength = undefined;
            this.enableTitle = true;
            /**
             * 扩展信息；在输入框前面 显示 ① 图标鼠标滑过后显示
             */
            this.useExtendInfo = false;
            this.extendInfo = '';
            this.forcePlaceholder = false;
            this.updateExtendInfo = new i0.EventEmitter();
            this.clear = new i0.EventEmitter();
            this.valueChange = new i0.EventEmitter();
            this.clickHandle = new i0.EventEmitter();
            this.blurHandle = new i0.EventEmitter();
            this.focusHandle = new i0.EventEmitter();
            this.enterHandle = new i0.EventEmitter();
            this.iconMouseEnter = new i0.EventEmitter();
            this.iconMouseLeave = new i0.EventEmitter();
            this.keyupHandle = new i0.EventEmitter();
            this.keydownHandle = new i0.EventEmitter();
            this.inputClick = new i0.EventEmitter();
            this.inputType = 'text';
            this.cd = null;
            this.focusCls = 'f-state-focus';
            this.ro = null;
            this.onModelChange = ( /**
             * @param {?} obj
             * @return {?}
             */function (obj) { });
            this.onModelTouched = ( /**
             * @param {?} val
             * @return {?}
             */function (val) { });
            this.openEyeICON = '<span class="f-icon f-icon-eye" style="color: rgb(56, 143, 255);"></span>';
            this.closeEyeICON = '<span class="f-icon f-icon-eye"></span>';
            this.cd = this.injector.get(i0.ChangeDetectorRef);
        }
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.ngOnInit = /**
         * @return {?}
         */
            function () {
                this.initSmartPassword();
                // this.ngControl = this.injector.get(NgControl, null);
                // console.log(this.ngControl);
                // if (this.ngControl) {
                //     this.ngControl.valueChanges.subscribe((val:any) => {
                //         this.value = val;
                //         this.textbox.nativeElement.value = this.value;
                //     });
                // }
                // if (!this.editable) {
                //     this.readonly = true
                // }
            };
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.ngZone.runOutsideAngular(( /**
                 * @return {?}
                 */function () {
                    if (_this.enableClear) {
                        _this.inputGroup.nativeElement.addEventListener('mouseenter', _this.onMouseEnter.bind(_this));
                        _this.inputGroup.nativeElement.addEventListener('mouseleave', _this.onMouseLeave.bind(_this));
                    }
                    _this.ro = new ResizeObserver(( /**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */function (entries, observer) {
                        if (entries && entries[0] && _this.clearIconRef) {
                            var _a = entries[0].contentRect, width = _a.width, height = _a.height;
                            /** @type {?} */
                            var target = entries[0].target;
                            if (width < 70) {
                                _this.clearIconRef.nativeElement.classList.add('input-group-clear-right');
                            }
                            else {
                                _this.clearIconRef.nativeElement.classList.remove('input-group-clear-right');
                            }
                        }
                    }));
                    _this.ro.observe(_this.inputGroup.nativeElement);
                    if (_this.noborder) {
                        _this.renderer.setStyle(_this.inputGroup.nativeElement, 'borderWidth', '0px');
                    }
                    /** @type {?} */
                    var groupAppendEl = _this.el.nativeElement.querySelector('.input-group-append');
                    if (!_this.groupText && groupAppendEl) {
                        _this.renderer.setStyle(groupAppendEl, 'margin-left', '0');
                    }
                }));
            };
        /**
         * @param {?} changes
         * @return {?}
         */
        InputGroupComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
            function (changes) {
                // if (changes.groupText && !changes.groupText.isFirstChange()) {
                //     if (changes.groupText.currentValue) {
                //         this.renderer.setStyle(
                //             this.el.nativeElement.querySelector('.input-group-append'),
                //             'margin-left',
                //             '-1'
                //         );
                //     }
                // }
                var _this = this;
                ['readonly', 'disabled'].forEach(( /**
                 * @param {?} n
                 * @return {?}
                 */function (n) {
                    if (changes[n] && !changes[n].isFirstChange()) {
                        if (_this[n] && _this.isPassword) {
                            if (_this.groupText) {
                                _this.groupText = _this.closeEyeICON;
                            }
                            _this.inputType = 'password';
                        }
                    }
                }));
            };
        /**
         * @param {?} val
         * @return {?}
         */
        InputGroupComponent.prototype.ngModelChange = /**
         * @param {?} val
         * @return {?}
         */
            function (val) {
            };
        /**
         * @private
         * @return {?}
         */
        InputGroupComponent.prototype.initSmartPassword = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                if (this.isPassword) {
                    this.groupText = this.closeEyeICON;
                    if (!this.enableViewPassword) {
                        this.groupText = '';
                    }
                    this.inputType = 'password';
                    /** @type {?} */
                    var openEyes_1 = false;
                    this.onClickHandle = ( /**
                     * @param {?} $event
                     * @return {?}
                     */function ($event) {
                        openEyes_1 = !openEyes_1;
                        /** @type {?} */
                        var inputtype = openEyes_1 ? 'text' : 'password';
                        _this.groupText = openEyes_1 ? _this.openEyeICON : _this.closeEyeICON;
                        _this.inputType = inputtype;
                        _this.cd.detectChanges();
                        return false;
                    });
                }
                else {
                    this.inputType = 'text';
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        InputGroupComponent.prototype.onEnter = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                // if (this.editable) {
                //     $event.stopPropagation();
                // }
                this.enterHandle.emit({ originalEvent: $event });
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        InputGroupComponent.prototype.onInputFocus = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                if (this.disabled) {
                    return;
                }
                else {
                    if (!this.noborder) {
                        this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);
                    }
                    if (this.editable || !this.readonly) {
                        this.focusHandle.emit($event);
                    }
                }
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        InputGroupComponent.prototype.onInputClick = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                this.inputClick.emit($event);
            };
        /**
         * @param {?} event
         * @return {?}
         */
        InputGroupComponent.prototype.onMouseEnter = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                if (this.value) {
                    if (!this.editable) {
                        if (!this.state && !this.disabled) {
                            this.showClearButton = true;
                        }
                    }
                    else {
                        if (!this.readonly && !this.disabled) {
                            this.showClearButton = true;
                        }
                    }
                }
                if (this.showClearButton) {
                    this.toggleClearIcon(event, true);
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        InputGroupComponent.prototype.onMouseLeave = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.showClearButton = false;
                this.toggleClearIcon(event, false);
            };
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.getStateCls = /**
         * @return {?}
         */
            function () {
                if (this.disabled) {
                    return { 'f-state-disabled': true };
                }
                else {
                    if (!this.editable) {
                        return { 'f-state-editable': true, 'f-state-readonly': this.readonly };
                    }
                    else {
                        return { 'f-state-readonly': this.readonly };
                    }
                }
            };
        /**
         * @private
         * @param {?} event
         * @param {?=} isShow
         * @return {?}
         */
        InputGroupComponent.prototype.toggleClearIcon = /**
         * @private
         * @param {?} event
         * @param {?=} isShow
         * @return {?}
         */
            function (event, isShow) {
                if (isShow === void 0) {
                    isShow = false;
                }
                /** @type {?} */
                var str = isShow ? '' : 'none';
                /** @type {?} */
                var clearIcon = event.target.querySelector('.input-group-clear');
                if (clearIcon) {
                    clearIcon.style.display = str;
                }
            };
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.onMouseOverInExtentInfo = /**
         * @return {?}
         */
            function () {
                this.updateExtendInfo.emit();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        InputGroupComponent.prototype.onMousedown = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var target = ( /** @type {?} */($event.target));
                if (target.tagName !== 'INPUT') {
                    $event.preventDefault();
                }
                $event.stopPropagation();
            };
        /**
         * @param {?} $event
         * @return {?}
         */
        InputGroupComponent.prototype.onClearValue = /**
         * @param {?} $event
         * @return {?}
         */
            function ($event) {
                /** @type {?} */
                var flag1 = !this.readonly && !this.disabled && this.editable;
                /** @type {?} */
                var flag2 = !this.editable;
                $event.stopPropagation();
                if (flag1 || flag2) {
                    this.onValueChange('', false);
                    this.showClearButton = false;
                    this.clear.emit();
                }
            };
        /**
         * @param {?} event
         * @return {?}
         */
        InputGroupComponent.prototype.onBlur = /**
         * @param {?} event
         * @return {?}
         */
            function (event) {
                this.renderer.removeClass(this.inputGroup.nativeElement, this.focusCls);
                this.blurHandle.emit(event);
                event.stopPropagation();
                return false;
            };
        /**
         * @param {?} val
         * @param {?=} emit
         * @return {?}
         */
        InputGroupComponent.prototype.onValueChange = /**
         * @param {?} val
         * @param {?=} emit
         * @return {?}
         */
            function (val, emit) {
                if (emit === void 0) {
                    emit = true;
                }
                if (this.value !== val) {
                    this.value = val;
                    this.onModelChange(val);
                    this.onModelTouched(val);
                    if (emit) {
                        this.valueChange.emit(val);
                    }
                }
            };
        /**
         * @param {?=} event
         * @return {?}
         */
        InputGroupComponent.prototype.onClickHandle = /**
         * @param {?=} event
         * @return {?}
         */
            function (event) {
                if (this.showButtonWhenDisabled || ((!this.editable || !this.readonly) && !this.disabled)) {
                    this.clickHandle.emit({
                        originalEvent: event,
                        value: this.value
                    });
                }
                if (event) {
                    event.stopPropagation();
                }
            };
        /**
         * @param {?} e
         * @return {?}
         */
        InputGroupComponent.prototype.onIconMouseEnter = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.iconMouseEnter.emit(e);
            };
        /**
         * @param {?} e
         * @return {?}
         */
        InputGroupComponent.prototype.onIconMouseLeave = /**
         * @param {?} e
         * @return {?}
         */
            function (e) {
                this.iconMouseLeave.emit(e);
            };
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.focus = /**
         * @return {?}
         */
            function () {
                this.textbox.nativeElement.focus();
            };
        /**
         * @param {?} obj
         * @return {?}
         */
        InputGroupComponent.prototype.writeValue = /**
         * @param {?} obj
         * @return {?}
         */
            function (obj) {
                this.value = (obj === null || obj === undefined) ? '' : obj;
                this.textbox.nativeElement.value = this.value;
                // 在此处执行 onModelChange 则 pristine 状态变为 false 即非第一次加载；导至表单中的错误信息显示出来，
                // 如果必须要执行一次，需要重新ngControl 的状态
                // this.onModelChange(obj);
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        InputGroupComponent.prototype.registerOnChange = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelChange = fn;
            };
        /**
         * @param {?} fn
         * @return {?}
         */
        InputGroupComponent.prototype.registerOnTouched = /**
         * @param {?} fn
         * @return {?}
         */
            function (fn) {
                this.onModelTouched = fn;
            };
        /**
         * @param {?} isDisabled
         * @return {?}
         */
        InputGroupComponent.prototype.setDisabledState = /**
         * @param {?} isDisabled
         * @return {?}
         */
            function (isDisabled) {
                this.disabled = isDisabled;
            };
        /**
         * @return {?}
         */
        InputGroupComponent.prototype.setFocusToEnd = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var el = this.textbox.nativeElement;
                el.focus();
                el.selectionStart = el.value.length;
                el.selectionEnd = el.value.length;
            };
        InputGroupComponent.decorators = [
            { type: i0.Component, args: [{
                        selector: 'farrisui-input-group, input-group, farris-input-group',
                        template: "\n        <div #inputGroup [class]=\"customCls + ' input-group'\"\n            [class.f-state-disabled]=\"disabled\"\n            [class.f-state-editable]=\"editable && !disabled && !readonly\"\n            [class.f-state-readonly]=\"readonly && !disabled\">\n            <span class=\"input-group-before-tips\" *ngIf=\"useExtendInfo\" (mouseenter)=\"onMouseOverInExtentInfo()\"\n                farrisPopover [popover]=\"extendInfo\" [triggers]=\"'hover'\" [container]=\"'body'\" [placement]=\"'top'\">\n                <i class=\"f-icon f-icon-info-circle\"></i><b class=\"tips-arrow\"></b>\n            </span>\n\n            <input\n                #textbox\n                name=\"input-group-value\"\n                class=\"form-control f-utils-fill\"\n                [class.text-left]=\"textAlign == 'left'\"\n                [class.text-center]=\"textAlign == 'center'\"\n                [class.text-right]=\"textAlign == 'right'\"\n                [attr.title]=\"(enableTitle && !isPassword)? value: ''\"\n                [attr.type]=\"inputType\"\n                [attr.placeholder]=\"(disabled||readonly)&&!forcePlaceholder?'':placeholder\"\n                [attr.autocomplete]=\"autocomplete\"\n                [readonly]=\"readonly || !editable\"\n                [ngModel]=\"value\"\n                [disabled]=\"disabled\"\n                (blur)=\"onBlur($event)\"\n                (mousedown)=\"onMousedown($event)\"\n                (ngModelChange)=\"onValueChange($event)\"\n                (keydown.enter)=\"onEnter($event)\"\n                (focus)=\"onInputFocus($event)\"\n                (click)=\"onInputClick($event)\"\n                minlength=\"{{minLength}}\"\n                maxlength=\"{{maxLength}}\"\n                (keyup)=\"keyupHandle.emit($event)\"\n                (keydown)=\"keydownHandle.emit($event)\"\n                [attr.tabindex]=\"tabIndex\"\n            />\n            <div class=\"input-group-append\" [ngClass]=\"{'append-force-show':showButtonWhenDisabled && (readonly||disabled)}\"  *ngIf=\"enableClear || groupText || groupTextTemplate\">\n                <span *ngIf=\"enableClear && !readonly && !disabled\"\n                    [style.display]=\"showClearButton ? 'flex' : 'none'\"\n                    class=\"input-group-text input-group-clear\" #clearIcon\n                    (click)=\"onClearValue($event)\" style=\"width:24px\">\n                    <i class=\"f-icon modal_close\"></i>\n                </span>\n                <span class=\"input-group-text\"\n                    (mouseenter)=\"onIconMouseEnter($event)\" (mouseleave)=\"onIconMouseLeave($event)\"\n                    *ngIf=\"groupText && !groupTextTemplate\" [innerHTML]=\"groupText | safe: 'html'\"\n                    (click)=\"onClickHandle($event)\"></span>\n                <ng-container *ngIf=\"groupTextTemplate\">\n                    <ng-container *ngTemplateOutlet=\"groupTextTemplate\" ></ng-container>\n                </ng-container>\n            </div>\n        </div>\n    ",
                        // .input-group-clear:hover {
                        //     background: #e9ecef !important;
                        // }
                        providers: [INPUT_GROUP_VALUE_ACCESSOR],
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: ["\n            .input-group {\n                flex-wrap: nowrap;\n            }\n            .input-group-text {\n                cursor: pointer;\n            }\n            .input-group-clear {\n                cursor: pointer;\n            }\n\n            .input-group-text:hover {\n                background: #ccc;\n            }\n\n            .input-group-clear-right {\n                position: absolute;\n                height: 100%;\n                right: 0;\n                top: 0;\n                z-index: 100;\n            }\n        "]
                    }] }
        ];
        /** @nocollapse */
        InputGroupComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: i0.Renderer2 },
                { type: i0.NgZone },
                { type: i0.Injector }
            ];
        };
        InputGroupComponent.propDecorators = {
            autocomplete: [{ type: i0.HostBinding, args: ['class.f-cmp-inputgroup',] }, { type: i0.Input }],
            value: [{ type: i0.Input }],
            readonly: [{ type: i0.Input }],
            disabled: [{ type: i0.Input }],
            editable: [{ type: i0.Input }],
            enableClear: [{ type: i0.Input }],
            groupText: [{ type: i0.Input }],
            customCls: [{ type: i0.Input }],
            showButtonWhenDisabled: [{ type: i0.Input }],
            placeholder: [{ type: i0.Input }],
            textAlign: [{ type: i0.Input }],
            groupTextTemplate: [{ type: i0.Input }],
            isPassword: [{ type: i0.Input }],
            enableViewPassword: [{ type: i0.Input }],
            noborder: [{ type: i0.Input }],
            minLength: [{ type: i0.Input }],
            maxLength: [{ type: i0.Input }],
            tabIndex: [{ type: i0.Input }],
            enableTitle: [{ type: i0.Input }],
            useExtendInfo: [{ type: i0.Input }],
            extendInfo: [{ type: i0.Input }],
            forcePlaceholder: [{ type: i0.Input }],
            updateExtendInfo: [{ type: i0.Output }],
            clear: [{ type: i0.Output }],
            valueChange: [{ type: i0.Output }],
            clickHandle: [{ type: i0.Output }],
            blurHandle: [{ type: i0.Output }],
            focusHandle: [{ type: i0.Output }],
            enterHandle: [{ type: i0.Output }],
            iconMouseEnter: [{ type: i0.Output }],
            iconMouseLeave: [{ type: i0.Output }],
            keyupHandle: [{ type: i0.Output }],
            keydownHandle: [{ type: i0.Output }],
            inputClick: [{ type: i0.Output }],
            inputGroup: [{ type: i0.ViewChild, args: ['inputGroup',] }],
            textbox: [{ type: i0.ViewChild, args: ['textbox',] }],
            clearIconRef: [{ type: i0.ViewChild, args: ['clearIcon',] }]
        };
        return InputGroupComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var InputGroupModule = /** @class */ (function () {
        function InputGroupModule() {
        }
        InputGroupModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [InputGroupComponent],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiPopover.PopoverModule.forRoot(),
                            uiCommon.FarrisCommonModule
                        ],
                        exports: [
                            InputGroupComponent
                        ]
                    },] }
        ];
        return InputGroupModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.InputGroupService = InputGroupService;
    exports.INPUT_GROUP_VALUE_ACCESSOR = INPUT_GROUP_VALUE_ACCESSOR;
    exports.InputGroupComponent = InputGroupComponent;
    exports.InputGroupModule = InputGroupModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-input-group.umd.js.map