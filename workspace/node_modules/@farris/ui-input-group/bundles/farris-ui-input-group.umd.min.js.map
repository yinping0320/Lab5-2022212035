{"version":3,"sources":["ng://@farris/ui-input-group/lib/input-group.service.ts","ng://@farris/ui-input-group/lib/input-group.component.ts","ng://@farris/ui-input-group/lib/input-group.module.ts"],"names":["InputGroupService","Injectable","args","providedIn","INPUT_GROUP_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","InputGroupComponent","multi","prototype","ngOnInit","this","initSmartPassword","ngAfterViewInit","_this","ngZone","runOutsideAngular","enableClear","inputGroup","nativeElement","addEventListener","onMouseEnter","bind","onMouseLeave","ro","ResizeObserver","entries","observer","clearIconRef","_a","contentRect","width","height","target","classList","add","remove","observe","noborder","renderer","setStyle","groupAppendEl","el","querySelector","groupText","ngOnChanges","changes","forEach","n","isFirstChange","isPassword","closeEyeICON","inputType","ngModelChange","val","enableViewPassword","openEyes_1","onClickHandle","$event","inputtype","openEyeICON","cd","detectChanges","onEnter","enterHandle","emit","originalEvent","onInputFocus","disabled","addClass","focusCls","editable","readonly","focusHandle","onInputClick","inputClick","event","value","showClearButton","state","toggleClearIcon","getStateCls","f-state-disabled","f-state-readonly","f-state-editable","isShow","str","clearIcon","style","display","onMouseOverInExtentInfo","updateExtendInfo","onMousedown","tagName","preventDefault","stopPropagation","onClearValue","flag1","flag2","onValueChange","clear","onBlur","removeClass","blurHandle","onModelChange","onModelTouched","valueChange","showButtonWhenDisabled","clickHandle","onIconMouseEnter","e","iconMouseEnter","onIconMouseLeave","iconMouseLeave","focus","textbox","writeValue","obj","undefined","registerOnChange","fn","registerOnTouched","setDisabledState","isDisabled","setFocusToEnd","selectionStart","length","selectionEnd","Component","selector","template","providers","encapsulation","ViewEncapsulation","None","ElementRef","Renderer2","NgZone","Injector","HostBinding","type","Input","Output","ViewChild","injector","autocomplete","customCls","placeholder","textAlign","minLength","maxLength","enableTitle","useExtendInfo","extendInfo","forcePlaceholder","EventEmitter","keyupHandle","keydownHandle","get","ChangeDetectorRef","InputGroupModule","NgModule","declarations","imports","CommonModule","FormsModule","PopoverModule","forRoot","FarrisCommonModule","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class InputGroupService {\r\n\r\n  constructor() { }\r\n}\r\n","/*\r\n * @Author: ç¯çç§æ(Lucas Huang)\r\n * @Date: 2019-08-08 18:53:41\r\n * @LastEditors: ç¯çç§æ(Lucas Huang)\r\n * @LastEditTime: 2019-11-27 11:19:44\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n */\r\nimport { SimpleChanges, Renderer2, forwardRef, Injector, HostBinding, ChangeDetectorRef } from '@angular/core';\r\nimport { NgZone, ViewEncapsulation, TemplateRef } from '@angular/core';\r\nimport { Component, OnInit, Output, EventEmitter, ElementRef, Input, AfterViewInit, ViewChild, OnChanges } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, NgControl, MaxLengthValidator } from '@angular/forms';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nexport const INPUT_GROUP_VALUE_ACCESSOR: any = {\r\n    provide: NG_VALUE_ACCESSOR,\r\n    useExisting: forwardRef(() => InputGroupComponent),\r\n    multi: true\r\n};\r\n\r\n@Component({\r\n    selector: 'farrisui-input-group, input-group, farris-input-group',\r\n    template: `\r\n        <div #inputGroup [class]=\"customCls + ' input-group'\"\r\n            [class.f-state-disabled]=\"disabled\"\r\n            [class.f-state-editable]=\"editable && !disabled && !readonly\"\r\n            [class.f-state-readonly]=\"readonly && !disabled\">\r\n            <span class=\"input-group-before-tips\" *ngIf=\"useExtendInfo\" (mouseenter)=\"onMouseOverInExtentInfo()\"\r\n                farrisPopover [popover]=\"extendInfo\" [triggers]=\"'hover'\" [container]=\"'body'\" [placement]=\"'top'\">\r\n                <i class=\"f-icon f-icon-info-circle\"></i><b class=\"tips-arrow\"></b>\r\n            </span>\r\n\r\n            <input\r\n                #textbox\r\n                name=\"input-group-value\"\r\n                class=\"form-control f-utils-fill\"\r\n                [class.text-left]=\"textAlign == 'left'\"\r\n                [class.text-center]=\"textAlign == 'center'\"\r\n                [class.text-right]=\"textAlign == 'right'\"\r\n                [attr.title]=\"(enableTitle && !isPassword)? value: ''\"\r\n                [attr.type]=\"inputType\"\r\n                [attr.placeholder]=\"(disabled||readonly)&&!forcePlaceholder?'':placeholder\"\r\n                [attr.autocomplete]=\"autocomplete\"\r\n                [readonly]=\"readonly || !editable\"\r\n                [ngModel]=\"value\"\r\n                [disabled]=\"disabled\"\r\n                (blur)=\"onBlur($event)\"\r\n                (mousedown)=\"onMousedown($event)\"\r\n                (ngModelChange)=\"onValueChange($event)\"\r\n                (keydown.enter)=\"onEnter($event)\"\r\n                (focus)=\"onInputFocus($event)\"\r\n                (click)=\"onInputClick($event)\"\r\n                minlength=\"{{minLength}}\"\r\n                maxlength=\"{{maxLength}}\"\r\n                (keyup)=\"keyupHandle.emit($event)\"\r\n                (keydown)=\"keydownHandle.emit($event)\"\r\n                [attr.tabindex]=\"tabIndex\"\r\n            />\r\n            <div class=\"input-group-append\" [ngClass]=\"{'append-force-show':showButtonWhenDisabled && (readonly||disabled)}\"  *ngIf=\"enableClear || groupText || groupTextTemplate\">\r\n                <span *ngIf=\"enableClear && !readonly && !disabled\"\r\n                    [style.display]=\"showClearButton ? 'flex' : 'none'\"\r\n                    class=\"input-group-text input-group-clear\" #clearIcon\r\n                    (click)=\"onClearValue($event)\" style=\"width:24px\">\r\n                    <i class=\"f-icon modal_close\"></i>\r\n                </span>\r\n                <span class=\"input-group-text\"\r\n                    (mouseenter)=\"onIconMouseEnter($event)\" (mouseleave)=\"onIconMouseLeave($event)\"\r\n                    *ngIf=\"groupText && !groupTextTemplate\" [innerHTML]=\"groupText | safe: 'html'\"\r\n                    (click)=\"onClickHandle($event)\"></span>\r\n                <ng-container *ngIf=\"groupTextTemplate\">\r\n                    <ng-container *ngTemplateOutlet=\"groupTextTemplate\" ></ng-container>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    `,\r\n    styles: [\r\n        `\r\n            .input-group {\r\n                flex-wrap: nowrap;\r\n            }\r\n            .input-group-text {\r\n                cursor: pointer;\r\n            }\r\n            .input-group-clear {\r\n                cursor: pointer;\r\n            }\r\n\r\n            .input-group-text:hover {\r\n                background: #ccc;\r\n            }\r\n\r\n            .input-group-clear-right {\r\n                position: absolute;\r\n                height: 100%;\r\n                right: 0;\r\n                top: 0;\r\n                z-index: 100;\r\n            }\r\n        `\r\n    ],\r\n    // .input-group-clear:hover {\r\n    //     background: #e9ecef !important;\r\n    // }\r\n    providers: [INPUT_GROUP_VALUE_ACCESSOR],\r\n    encapsulation: ViewEncapsulation.None\r\n})\r\nexport class InputGroupComponent\r\n    implements OnInit, AfterViewInit, OnChanges, ControlValueAccessor {\r\n    @HostBinding('class.f-cmp-inputgroup')\r\n    @Input() autocomplete = 'off';\r\n    showClearButton = false;\r\n    ngControl: NgControl;\r\n    @Input() value = '';\r\n    /** åªè¯» */\r\n    @Input() readonly = false;\r\n    /** ç¦ç¨ */\r\n    @Input() disabled = false;\r\n    /** åè®¸ç¼è¾ */\r\n    @Input() editable = true;\r\n    /** å¯ç¨æ¸é¤æé® */\r\n    @Input() enableClear = true;\r\n    /** æ©å±æé® */\r\n    @Input() groupText = '';\r\n    /** èªå®ä¹CLASS */\r\n    @Input() customCls = '';\r\n    /** å½ç»ä»¶ç¦ç¨æåªè¯»æ¶æ¾ç¤ºåè¾¹çæé® */\r\n    @Input() showButtonWhenDisabled = false;\r\n    /** å¯ç¨æç¤ºä¿¡æ¯ */\r\n    @Input() placeholder = '';\r\n    /** ææ¬å¨è¾å¥æ¡ä¸­çå¯¹é½æ¹å¼ */\r\n    @Input() textAlign = 'left';\r\n\r\n    @Input() groupTextTemplate: TemplateRef<any>;\r\n    @Input() isPassword = false;\r\n    @Input() enableViewPassword = true;\r\n\r\n    @Input() noborder = false;\r\n\r\n    @Input() minLength: number | undefined = undefined;\r\n    @Input() maxLength: number | undefined = undefined;\r\n\r\n    @Input() tabIndex: number;\r\n\r\n    @Input() enableTitle = true;\r\n    /** æ©å±ä¿¡æ¯ï¼å¨è¾å¥æ¡åé¢ æ¾ç¤º â  å¾æ é¼ æ æ»è¿åæ¾ç¤º */\r\n    @Input() useExtendInfo = false;\r\n    @Input() extendInfo = '';\r\n    @Input() forcePlaceholder = false;\r\n    @Output() updateExtendInfo = new EventEmitter();\r\n\r\n    @Output() clear = new EventEmitter();\r\n    @Output() valueChange = new EventEmitter();\r\n    @Output() clickHandle = new EventEmitter();\r\n    @Output() blurHandle = new EventEmitter();\r\n    @Output() focusHandle = new EventEmitter();\r\n    @Output() enterHandle = new EventEmitter();\r\n    @Output() iconMouseEnter = new EventEmitter();\r\n    @Output() iconMouseLeave = new EventEmitter();\r\n    @Output() keyupHandle = new EventEmitter();\r\n    @Output() keydownHandle = new EventEmitter();\r\n    @Output() inputClick = new EventEmitter();\r\n\r\n    @ViewChild('inputGroup') inputGroup: ElementRef;\r\n    @ViewChild('textbox') textbox: ElementRef;\r\n    @ViewChild('clearIcon') clearIconRef: ElementRef;\r\n\r\n    inputType = 'text';\r\n\r\n    private state: boolean;\r\n    cd: ChangeDetectorRef = null;\r\n\r\n    private focusCls = 'f-state-focus';\r\n    private ro: ResizeObserver = null;\r\n    onModelChange = (obj: any) => { };\r\n    onModelTouched = (val: any) => { };\r\n\r\n\r\n    private openEyeICON = '<span class=\"f-icon f-icon-eye\" style=\"color: rgb(56, 143, 255);\"></span>';\r\n    private closeEyeICON = '<span class=\"f-icon f-icon-eye\"></span>';\r\n\r\n    constructor(\r\n        public el: ElementRef,\r\n        private renderer: Renderer2,\r\n        private ngZone: NgZone,\r\n        private injector: Injector\r\n    ) {\r\n        this.cd = this.injector.get(ChangeDetectorRef);\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n        this.initSmartPassword();\r\n\r\n        // this.ngControl = this.injector.get(NgControl, null);\r\n        // console.log(this.ngControl);\r\n        // if (this.ngControl) {\r\n        //     this.ngControl.valueChanges.subscribe((val:any) => {\r\n        //         this.value = val;\r\n        //         this.textbox.nativeElement.value = this.value;\r\n        //     });\r\n        // }\r\n        // if (!this.editable) {\r\n        //     this.readonly = true\r\n        // }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.ngZone.runOutsideAngular(() => {\r\n            if (this.enableClear) {\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseenter',\r\n                    this.onMouseEnter.bind(this)\r\n                );\r\n                this.inputGroup.nativeElement.addEventListener(\r\n                    'mouseleave',\r\n                    this.onMouseLeave.bind(this)\r\n                );\r\n            }\r\n\r\n            this.ro = new ResizeObserver((entries, observer) => {\r\n                if (entries && entries[0] && this.clearIconRef) {\r\n                    const { width, height } = entries[0].contentRect;\r\n                    const target =  entries[0].target;\r\n\r\n                    if (width < 70) {\r\n                        this.clearIconRef.nativeElement.classList.add('input-group-clear-right');\r\n                    } else {\r\n                        this.clearIconRef.nativeElement.classList.remove('input-group-clear-right');\r\n                    }\r\n                }\r\n            });\r\n            this.ro.observe(this.inputGroup.nativeElement);\r\n\r\n            if (this.noborder) {\r\n                this.renderer.setStyle(this.inputGroup.nativeElement, 'borderWidth', '0px');\r\n            }\r\n\r\n            const groupAppendEl = this.el.nativeElement.querySelector('.input-group-append');\r\n            if (!this.groupText && groupAppendEl) {\r\n                this.renderer.setStyle( groupAppendEl, 'margin-left', '0');\r\n            }\r\n        });\r\n\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        // if (changes.groupText && !changes.groupText.isFirstChange()) {\r\n        //     if (changes.groupText.currentValue) {\r\n        //         this.renderer.setStyle(\r\n        //             this.el.nativeElement.querySelector('.input-group-append'),\r\n        //             'margin-left',\r\n        //             '-1'\r\n        //         );\r\n        //     }\r\n        // }\r\n\r\n        ['readonly', 'disabled'].forEach(n => {\r\n            if (changes[n] && !changes[n].isFirstChange()) {\r\n                if (this[n] && this.isPassword) {\r\n                    if (this.groupText) {\r\n                        this.groupText = this.closeEyeICON;\r\n                    }\r\n                    this.inputType = 'password';\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    ngModelChange(val: any) {\r\n    }\r\n\r\n\r\n    private initSmartPassword() {\r\n        if (this.isPassword) {\r\n            \r\n            this.groupText = this.closeEyeICON;\r\n\r\n            if (!this.enableViewPassword) {\r\n                this.groupText = '';\r\n            }\r\n\r\n            this.inputType = 'password';\r\n            let openEyes = false;\r\n            this.onClickHandle = ($event) => {\r\n                openEyes = !openEyes;\r\n                const inputtype = openEyes ? 'text' : 'password';\r\n                this.groupText = openEyes ? this.openEyeICON : this.closeEyeICON;\r\n                this.inputType = inputtype;\r\n                this.cd.detectChanges();\r\n                return false;\r\n            };\r\n        } else {\r\n            this.inputType = 'text';\r\n        }\r\n    }\r\n\r\n    onEnter($event: KeyboardEvent) {\r\n        // if (this.editable) {\r\n        //     $event.stopPropagation();\r\n        // }\r\n        this.enterHandle.emit({originalEvent: $event});\r\n    }\r\n\r\n    onInputFocus($event) {\r\n        if (this.disabled) {\r\n            return;\r\n        } else {\r\n            if (!this.noborder) {\r\n                this.renderer.addClass(this.inputGroup.nativeElement, this.focusCls);\r\n            }\r\n            if (this.editable || !this.readonly) {\r\n                this.focusHandle.emit($event);\r\n            }\r\n        }\r\n    }\r\n\r\n    onInputClick($event) {\r\n        this.inputClick.emit($event);\r\n    }\r\n\r\n\r\n    onMouseEnter(event) {\r\n        if (this.value) {\r\n            if (!this.editable) {\r\n                if (!this.state && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            } else {\r\n                if (!this.readonly && !this.disabled) {\r\n                    this.showClearButton = true;\r\n                }\r\n            }\r\n        }\r\n        if (this.showClearButton) {\r\n            this.toggleClearIcon(event, true);\r\n        }\r\n    }\r\n\r\n    onMouseLeave(event) {\r\n        this.showClearButton = false;\r\n        this.toggleClearIcon(event, false);\r\n    }\r\n\r\n    getStateCls() {\r\n        if (this.disabled) {\r\n            return { 'f-state-disabled': true };\r\n        } else {\r\n            if (!this.editable) {\r\n                return { 'f-state-editable': true, 'f-state-readonly': this.readonly };\r\n            } else {\r\n                return { 'f-state-readonly': this.readonly };\r\n            }\r\n        }\r\n    }\r\n\r\n    private toggleClearIcon(event: any, isShow = false) {\r\n        const str = isShow ? '' : 'none';\r\n        const clearIcon = event.target.querySelector('.input-group-clear');\r\n        if (clearIcon) {\r\n            clearIcon.style.display = str;\r\n        }\r\n    }\r\n\r\n    onMouseOverInExtentInfo() {\r\n        this.updateExtendInfo.emit();\r\n    }\r\n\r\n    onMousedown($event: MouseEvent) {\r\n        const target = $event.target as HTMLElement;\r\n        if (target.tagName !== 'INPUT') {\r\n            $event.preventDefault();\r\n        }\r\n        $event.stopPropagation();\r\n    }\r\n\r\n    onClearValue($event: any) {\r\n        const flag1 = !this.readonly && !this.disabled && this.editable;\r\n        const flag2 = !this.editable;\r\n        $event.stopPropagation();\r\n        if (flag1 || flag2) {\r\n            this.onValueChange('', false);\r\n            this.showClearButton = false;\r\n            this.clear.emit();\r\n        }\r\n    }\r\n\r\n    onBlur(event) {\r\n        this.renderer.removeClass(this.inputGroup.nativeElement, this.focusCls);\r\n        this.blurHandle.emit(event);\r\n        event.stopPropagation();\r\n        return false;\r\n    }\r\n\r\n    onValueChange(val: string, emit = true) {\r\n        if (this.value !== val) {\r\n            this.value = val;\r\n            this.onModelChange(val);\r\n            this.onModelTouched(val);\r\n            if (emit) {\r\n                this.valueChange.emit(val);\r\n            }\r\n        }\r\n    }\r\n\r\n    onClickHandle(event?: Event) {\r\n        if (this.showButtonWhenDisabled || ((!this.editable  || !this.readonly) && !this.disabled)) {\r\n            this.clickHandle.emit({\r\n                originalEvent: event,\r\n                value: this.value\r\n            });\r\n        }\r\n\r\n        if (event) {\r\n            event.stopPropagation();\r\n        }\r\n    }\r\n    onIconMouseEnter(e: MouseEvent) {\r\n        this.iconMouseEnter.emit(e);\r\n    }\r\n    onIconMouseLeave(e: MouseEvent) {\r\n        this.iconMouseLeave.emit(e);\r\n    }\r\n    focus() {\r\n        this.textbox.nativeElement.focus();\r\n    }\r\n\r\n    writeValue(obj: any): void {\r\n        this.value = (obj === null || obj === undefined) ? '' : obj;\r\n        this.textbox.nativeElement.value = this.value;\r\n        // å¨æ­¤å¤æ§è¡ onModelChange å pristine ç¶æåä¸º false å³éç¬¬ä¸æ¬¡å è½½ï¼å¯¼è³è¡¨åä¸­çéè¯¯ä¿¡æ¯æ¾ç¤ºåºæ¥ï¼\r\n        // å¦æå¿é¡»è¦æ§è¡ä¸æ¬¡ï¼éè¦éæ°ngControl çç¶æ\r\n        // this.onModelChange(obj);\r\n    }\r\n    registerOnChange(fn: any): void {\r\n        this.onModelChange = fn;\r\n    }\r\n    registerOnTouched(fn: any): void {\r\n        this.onModelTouched = fn;\r\n    }\r\n    setDisabledState(isDisabled: boolean): void {\r\n        this.disabled = isDisabled;\r\n    }\r\n\r\n    setFocusToEnd() {\r\n        const el = this.textbox.nativeElement;\r\n        el.focus();\r\n        el.selectionStart = el.value.length;\r\n        el.selectionEnd = el.value.length;\r\n    }\r\n}\r\n","import { PopoverModule } from '@farris/ui-popover';\r\nimport { NgModule } from '@angular/core';\r\nimport { InputGroupComponent } from './input-group.component';\r\nimport { FarrisCommonModule } from '@farris/ui-common';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\n@NgModule({\r\n  declarations: [InputGroupComponent],\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    PopoverModule.forRoot(),\r\n    FarrisCommonModule\r\n  ],\r\n  exports: [\r\n    InputGroupComponent\r\n  ]\r\n})\r\nexport class InputGroupModule { }\r\n"]}