import { ElementRef, Renderer2, ChangeDetectorRef, EventEmitter } from '@angular/core';
import { IMyDate, IMyDateRange, IMyMonth, IMyCalendarDay, IMyCalendarMonth, IMyCalendarYear, IMyWeek, IMyOptions, IMySelectorPosition, IMyCalendarViewChanged, IMyRangeDateSelection, IMyDateModel, IMyMonthRow } from '../../interfaces/public-api';
import { UtilService } from '../../services/public-api';
import { ResetDateType } from '../../enums/public-api';
import { TimePickerPanelComponent } from '@farris/ui-time-picker';
import { DateTimeHelperService } from '@farris/ui-common/date';
export declare class CalendarComponent {
    private renderer;
    private cdr;
    private utilService;
    selectorEl: ElementRef;
    styleEl: ElementRef;
    endTimeRef: TimePickerPanelComponent;
    dynamicViewEle: ElementRef;
    position: string;
    dynamicViewShow: EventEmitter<{}>;
    dateHlp: DateTimeHelperService;
    opts: IMyOptions;
    visibleMonth: IMyMonth;
    visibleMonth_range: IMyMonth;
    selectedMonth: IMyMonth;
    selectedMonth_range: IMyMonth;
    selectedDate: IMyDate;
    selectedDateRange: IMyDateRange;
    selectedWeek: IMyWeek;
    weekDays: Array<string>;
    dates: Array<IMyWeek>;
    dates_range: Array<IMyWeek>;
    months: Array<IMyMonthRow>;
    months_range: Array<IMyMonthRow>;
    years: Array<Array<IMyCalendarYear>>;
    years_range: Array<Array<IMyCalendarYear>>;
    timeVlaue: string;
    timeVlaue_range: string;
    multiSelect: boolean;
    dayIdx: number;
    weekDayOpts: Array<string>;
    selectMonth: boolean;
    selectMonth_range: boolean;
    selectYear: boolean;
    selectYear_range: boolean;
    selectTime: boolean;
    dateChanged: (dm: IMyDateModel, close: boolean) => void;
    calendarViewChanged: (cvc: IMyCalendarViewChanged) => void;
    rangeDateSelection: (rds: IMyRangeDateSelection) => void;
    multiDatesChanged: (dates: any[]) => void;
    closedByEsc: () => void;
    selectorPos: IMySelectorPosition;
    scrollDiff: number;
    prevViewDisabled: boolean;
    nextViewDisabled: boolean;
    prevDobViewDisabled: boolean;
    nextDobViewDisabled: boolean;
    prevViewDisabled_range: boolean;
    nextViewDisabled_range: boolean;
    prevDobViewDisabled_range: boolean;
    nextDobViewDisabled_range: boolean;
    showNotify: () => void;
    /** 多选 */
    selectedDates: any[];
    getTimeStr(date: Date): string;
    disabledHours: () => any[];
    disabledMinutes: (hour: number) => any[];
    disabledSeconds: (hour: number, minute: number) => any[];
    disabledHours2: () => any[];
    disabledMinutes2: (hour: number) => any[];
    disabledSeconds2: (hour: number, minute: number) => any[];
    btnDynamicDisabled: boolean;
    constructor(renderer: Renderer2, cdr: ChangeDetectorRef, utilService: UtilService);
    initialize(opts: IMyOptions, defaultMonth: string, selectorPos: IMySelectorPosition, inputValue: string, dc: (dm: IMyDateModel, close: boolean) => void, cvc: (cvc: IMyCalendarViewChanged) => void, rds: (rds: IMyRangeDateSelection) => void, cbe: () => void): void;
    resetDateValue(value: ResetDateType): void;
    resetMonthYearSelect(isSecondCalendar?: boolean): void;
    onMonthViewBtnClicked(isSecondCalendar?: boolean): void;
    onMonthCellClicked(cell: IMyCalendarMonth, isSecondCalendar: boolean): void;
    onMonthCellKeyDown(cell: IMyCalendarMonth): void;
    onYearViewBtnClicked(isSecondCalendar?: boolean): void;
    onYearCellClicked(cell: IMyCalendarYear, isSecondCalendar?: boolean): void;
    onYearCellKeyDown(cell: IMyCalendarYear): void;
    generateMonths(isSecondCalendar?: boolean): void;
    generateYears(inputYear: number, isSecondCalendar?: boolean): void;
    setCalendarVisibleMonth(): void;
    onPrevNavigateBtnClicked(event?: any, isSecondCalendar?: boolean): void;
    onNextNavigateBtnClicked(event?: any, isSecondCalendar?: boolean): void;
    setDateViewMonth(isSecondCalendar?: boolean, isNext?: boolean): void;
    onCloseSelector(event: any): void;
    onDayCellClicked(cell: IMyCalendarDay, isSecondCalendar?: boolean): void;
    onDayCellKeyDown(cell: IMyCalendarDay): void;
    onDayCellMouseEnter(cell: any, isSecondCalendar?: boolean): void;
    onDayCellMouseLeave(isSecondCalendar?: boolean): void;
    onMonthCellMouseEnter(cell: any, isSecondCalendar?: boolean): void;
    onMonthCellMouseLeave(isSecondCalendar?: boolean): void;
    onYearCellMouseEnter(cell: any, isSecondCalendar?: boolean): void;
    onYearCellMouseLeave(isSecondCalendar?: boolean): void;
    onWeekClicked(weekData: IMyWeek): void;
    getSourceRowAndColumnFromEvent(event: any): any;
    getTargetFocusRowAndColumn(event: any, row: number, col: number, rowCount: number, colCount: number): any;
    focusCellElement(type: string, row: number, col: number): void;
    selectDate(date: IMyDate): void;
    toSelectMonth(month: IMyMonth): void;
    toSelectYear(year: {
        year: number;
    }): void;
    monthStartIdx(y: number, m: number): number;
    daysInMonth(m: number, y: number): number;
    daysInPrevMonth(m: number, y: number): number;
    isCurrDay(d: number, m: number, y: number, cmo: number, today: IMyDate): boolean;
    getWidth(): string;
    getToday(): IMyDate;
    getDayNumber(date: IMyDate): number;
    getWeekday(date: IMyDate): string;
    getDate(year: number, month: number, day: number): Date;
    sundayIdx(): number;
    generateCalendar(m: number, y: number, notifyChange: boolean, isSecondCalendar?: boolean): void;
    setDateViewHeaderBtnDisabledState(m: number, y: number, isSecondCalendar: boolean): void;
    setMonthViewHeaderBtnDisabledState(y: number, isSecondCalendar: boolean): void;
    setYearViewHeaderBtnDisabledState(yp: number, yn: number, isSecondCalendar: boolean): void;
    onContainerClick(event: Event): void;
    onClickTimeBtn(event: Event): void;
    onShowDynamicView($event: any): void;
    onShowDatePanel($event: any): void;
    private getTimeValue;
    onClickOkBtn(event: Event): void;
    onTodayClick($event: any): void;
    onDynamicOkClick($event: any, dynamicviewRef: any): void;
    initializedDate(date: IMyDate, otherDate?: IMyDate): IMyDate;
    setTime(date: any): void;
    onSelectCurrentWeek($event: MouseEvent): void;
    onDynamicValueChanged($event: any): void;
    onDayCellClickedForMultiDates(cell: IMyCalendarDay, isSecondCalendar?: boolean): void;
    onMultiDatesOkClicked($event: MouseEvent): void;
    onMultiDateRemoved(removeItem: any): void;
    onMultiDateClear($event: any): void;
    showGoBackToday(): boolean;
    private setCalendarView;
    gototodayView($event: any): void;
    onSelectDateClicked($event: any): void;
    private makeRange;
    private buildHours;
    private buildMinutes;
    private buildSeconds;
    checkTimeValues(timeValue: string): string;
    checkTimeValue(dateObj: IMyDate): void;
}
