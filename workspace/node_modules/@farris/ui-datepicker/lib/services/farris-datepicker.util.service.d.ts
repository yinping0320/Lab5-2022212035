import { IMyDateModel, IMyDate, IMyDateRange, IMyMonth, IMyMonthLabels, IMyMarkedDates, IMyMarkedDate, IMyDateFormat, IMyOptions } from '../interfaces/public-api';
import { DynamicData } from '../interfaces/dynamic-data-type.interface';
import { MultiSelectedOrderBy } from '../interfaces/my-options.interface';
export declare class UtilService {
    weekDays: Array<string>;
    isDateValid(dateStr: string, options: IMyOptions, isReturn?: boolean): IMyDate;
    isDateValidDateRange(dateRangeStr: string, options: IMyOptions): IMyDateRange;
    getDateValue(dateStr: string, dateFormat: string, delimeters: Array<string>): Array<IMyDateFormat>;
    getMonthNumberByMonthName(df: IMyDateFormat, monthLabels: IMyMonthLabels): number;
    getNumberByValue(df: IMyDateFormat): number;
    parseDefaultMonth(monthString: string): IMyMonth;
    isDisabledDate(date: IMyDate, options: IMyOptions): boolean;
    isMarkedDate(date: IMyDate, markedDates: Array<IMyMarkedDates>, markWeekends: IMyMarkedDate): IMyMarkedDate;
    isHighlightedDate(date: IMyDate, sunHighlight: boolean, satHighlight: boolean, highlightDates: Array<IMyDate>): boolean;
    getWeekNumber(date: IMyDate): number;
    getNowWeekTime(date: Date): IMyDateRange;
    isMonthDisabledByDisableUntil(date: IMyDate, disableUntil: IMyDate): boolean;
    isMonthDisabledByDisableSince(date: IMyDate, disableSince: IMyDate): boolean;
    getDateModel(date: IMyDate, dateRange: IMyDateRange, dateFormat: string, monthLabels: IMyMonthLabels, rangeDelimiter: string, returnFormat: string, dateStr?: string): IMyDateModel;
    formatDate(date: IMyDate, dateFormat: string, monthLabels: IMyMonthLabels): string;
    delete(format: string, delStr: string): string;
    getFormattedDate(model: IMyDateModel): string;
    preZero(val: number): string;
    isInitializedDate(date: IMyDate): boolean;
    isInitializedMonth(date: IMyDate): boolean;
    isInitializedYear(date: IMyDate): boolean;
    isDateEarlier(firstDate: IMyDate, secondDate: IMyDate): boolean;
    isDateSameOrEarlier(firstDate: IMyDate, secondDate: IMyDate): boolean;
    isDateSame(firstDate: IMyDate, secondDate: IMyDate): boolean;
    isDateRangeBeginOrEndSame(dateRange: IMyDateRange, date: IMyDate): boolean;
    isDateInRange(date: IMyDate, dateRange: IMyDateRange): boolean;
    resetDate(): IMyDate;
    getTimeInMilliseconds(date: IMyDate): number;
    getDate2(date: IMyDate): Date;
    getDate(date: IMyDate): Date;
    getDayNumber(date: IMyDate): number;
    getWeekdayIndex(wd: string): number;
    getEpocTime(date: IMyDate): number;
    getKeyCodeFromEvent(event: any): number;
    getNearDate(now: IMyDate, min: IMyDate, max: IMyDate): IMyDate;
    disabledHours(min: IMyDate, max: IMyDate, currentDate: IMyDate): any[];
    disabledMinutes(min: IMyDate, max: IMyDate, _hour: number, currentDate: IMyDate): any[];
    disabledSeconds(min: IMyDate, max: IMyDate, _hour: number, _minute: number, currentDate: IMyDate): any[];
    private getDateTypeString;
    formatDynamicValue(val: DynamicData, dynamicLocale: any): string;
    padStartZero(str: any): string;
    orderSelectedDates(items: any, order?: MultiSelectedOrderBy): any;
}
