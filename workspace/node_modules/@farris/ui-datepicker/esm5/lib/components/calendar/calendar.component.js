/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, ViewEncapsulation, ViewChild, Renderer2, ChangeDetectorRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { UtilService } from '../../services/public-api';
import { DefaultView, KeyCode, MonthId, ResetDateType } from '../../enums/public-api';
import { DOT, UNDER_LINE, D, M, Y, DATE_ROW_COUNT, DATE_COL_COUNT, MONTH_ROW_COUNT, MONTH_COL_COUNT, YEAR_ROW_COUNT, YEAR_COL_COUNT, SU, MO, TU, WE, TH, FR, SA, EMPTY_STR } from '../../constants/constants';
import { TimePickerPanelComponent } from '@farris/ui-time-picker';
import { flatten } from 'lodash-es';
import { ViewType } from '../../interfaces/my-options.interface';
var CalendarComponent = /** @class */ (function () {
    function CalendarComponent(renderer, cdr, utilService) {
        var _this = this;
        this.renderer = renderer;
        this.cdr = cdr;
        this.utilService = utilService;
        this.position = 'static';
        this.dynamicViewShow = new EventEmitter();
        this.dateHlp = null;
        this.visibleMonth = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.visibleMonth_range = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.selectedMonth = { monthNbr: 0, year: 0 };
        this.selectedMonth_range = { monthNbr: 0, year: 0 };
        this.selectedDate = { year: 0, month: 0, day: 0 };
        this.selectedDateRange = { begin: { year: 0, month: 0, day: 0 }, end: { year: 0, month: 0, day: 0 } };
        this.selectedWeek = { weekNbr: 0, year: 0 };
        this.weekDays = [];
        this.dates = [];
        this.dates_range = [];
        this.months = [];
        this.months_range = [];
        this.years = [];
        this.years_range = [];
        this.multiSelect = false;
        this.dayIdx = 0;
        this.weekDayOpts = [SU, MO, TU, WE, TH, FR, SA];
        this.selectMonth = false;
        this.selectMonth_range = false;
        this.selectYear = false;
        this.selectYear_range = false;
        this.selectTime = false;
        this.selectorPos = null;
        this.scrollDiff = 0;
        this.prevViewDisabled = false;
        this.nextViewDisabled = false;
        this.prevDobViewDisabled = false;
        this.nextDobViewDisabled = false;
        this.prevViewDisabled_range = false;
        this.nextViewDisabled_range = false;
        this.prevDobViewDisabled_range = false;
        this.nextDobViewDisabled_range = false;
        /**
         * 多选
         */
        this.selectedDates = [];
        // 禁用日期时间控件中的时间段的小时
        this.disabledHours = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.begin : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes = (/**
         * @param {?} hour
         * @return {?}
         */
        function (hour) {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.begin : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        function (hour, minute) {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.begin : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.disabledHours2 = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.end : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes2 = (/**
         * @param {?} hour
         * @return {?}
         */
        function (hour) {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.end : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds2 = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        function (hour, minute) {
            /** @type {?} */
            var min = _this.opts.disableUntil;
            /** @type {?} */
            var max = _this.opts.disableSince;
            /** @type {?} */
            var currentDate = _this.opts.dateRange ? _this.selectedDateRange.end : _this.selectedDate;
            /** @type {?} */
            var res = _this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.btnDynamicDisabled = true;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.getTimeStr = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var hour = this.utilService.preZero(date.getHours());
        /** @type {?} */
        var minute = this.utilService.preZero(date.getMinutes());
        /** @type {?} */
        var second = this.utilService.preZero(date.getSeconds());
        return hour + ":" + minute + ":" + second;
    };
    /**
     * @param {?} opts
     * @param {?} defaultMonth
     * @param {?} selectorPos
     * @param {?} inputValue
     * @param {?} dc
     * @param {?} cvc
     * @param {?} rds
     * @param {?} cbe
     * @return {?}
     */
    CalendarComponent.prototype.initialize = /**
     * @param {?} opts
     * @param {?} defaultMonth
     * @param {?} selectorPos
     * @param {?} inputValue
     * @param {?} dc
     * @param {?} cvc
     * @param {?} rds
     * @param {?} cbe
     * @return {?}
     */
    function (opts, defaultMonth, selectorPos, inputValue, dc, cvc, rds, cbe) {
        var _this = this;
        this.opts = opts;
        this.selectorPos = selectorPos;
        this.weekDays.length = 0;
        var _a = this.opts, defaultView = _a.defaultView, dateRange = _a.dateRange, firstDayOfWeek = _a.firstDayOfWeek, dayLabels = _a.dayLabels, stylesData = _a.stylesData, yearTxt = _a.yearTxt, multiSelect = _a.multiSelect, separator = _a.separator, selectedOrderBy = _a.selectedOrderBy;
        this.visibleMonth.yearTxt = yearTxt;
        this.visibleMonth_range.yearTxt = yearTxt;
        this.multiSelect = multiSelect;
        // if (stylesData.styles.length) {
        //     const styleElTemp: any = this.renderer.createElement(STYLE);
        //     this.renderer.appendChild(styleElTemp, this.renderer.createText(stylesData.styles));
        //     this.renderer.appendChild(this.styleEl.nativeElement, styleElTemp);
        // }
        this.dayIdx = this.weekDayOpts.indexOf(firstDayOfWeek);
        if (this.dayIdx !== -1) {
            /** @type {?} */
            var idx = this.dayIdx;
            // tslint:disable-next-line:prefer-for-of
            for (var i = 0; i < this.weekDayOpts.length; i++) {
                this.weekDays.push(dayLabels[this.weekDayOpts[idx]]);
                idx = this.weekDayOpts[idx] === SA ? 0 : idx + 1;
            }
        }
        /** @type {?} */
        var today = this.getToday();
        /** @type {?} */
        var isInDisableRange = this.utilService.isDisabledDate(today, this.opts);
        today = !isInDisableRange ? today : this.utilService.getNearDate(today, this.opts.disableUntil, this.opts.disableSince);
        switch (defaultView) {
            case DefaultView.Month:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 1 };
                break;
            case DefaultView.Year:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 10 };
                break;
            default:
                this.selectedMonth = { monthNbr: today.month, year: today.year };
                if (today.month >= 12) {
                    this.selectedMonth_range = { monthNbr: 1, year: today.year + 1 };
                }
                else {
                    this.selectedMonth_range = { monthNbr: today.month + this.opts.monthRangeValue, year: today.year };
                }
                break;
        }
        if (defaultMonth && defaultMonth.length) {
            this.selectedMonth = this.utilService.parseDefaultMonth(defaultMonth);
            this.selectedMonth_range = this.utilService.parseDefaultMonth(defaultMonth);
            if (this.selectedMonth_range.monthNbr >= 12) {
                this.selectedMonth_range.year++;
                this.selectedMonth_range.monthNbr = 1;
            }
            else {
                this.selectedMonth_range.monthNbr = this.selectedMonth_range.monthNbr + this.opts.monthRangeValue;
            }
        }
        // 日期多选
        if (this.multiSelect && inputValue) {
            this.selectedDates = inputValue.split(separator).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (_this.opts.returnFormat === 'yyyyMMdd') {
                    if (n.length > 8) {
                        n = _this.dateHlp.formatTo(n, _this.opts.returnFormat);
                    }
                }
                /** @type {?} */
                var _dObj = _this.utilService.isDateValid(n, _this.opts, true);
                return tslib_1.__assign({}, _dObj, { value: _this.utilService.formatDate(_dObj, _this.opts.dateFormat, _this.opts.monthLabels) });
            }));
            this.selectedDates = this.utilService.orderSelectedDates(this.selectedDates, selectedOrderBy);
        }
        else {
            if (!dateRange) {
                // Single date mode
                /** @type {?} */
                var date = this.utilService.isDateValid(inputValue, this.opts, true);
                if (this.utilService.isInitializedDate(date)) {
                    this.selectedDate = date;
                    /** @type {?} */
                    var hour = this.utilService.preZero(date.hour);
                    /** @type {?} */
                    var minute = this.utilService.preZero(date.minute);
                    /** @type {?} */
                    var second = this.utilService.preZero(date.second);
                    this.timeVlaue = hour + ":" + minute + ":" + second;
                    this.selectedMonth = { monthNbr: date.month, year: date.year };
                }
            }
            else {
                // Date range mode
                var _b = this.utilService.isDateValidDateRange(inputValue, this.opts), begin = _b.begin, end = _b.end;
                if (this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end)) {
                    this.selectedDateRange = { begin: begin, end: end };
                    /** @type {?} */
                    var hour = this.utilService.preZero(begin.hour);
                    /** @type {?} */
                    var minute = this.utilService.preZero(begin.minute);
                    /** @type {?} */
                    var second = this.utilService.preZero(begin.second);
                    this.timeVlaue = hour + ":" + minute + ":" + second;
                    /** @type {?} */
                    var _hour = this.utilService.preZero(end.hour);
                    /** @type {?} */
                    var _minute = this.utilService.preZero(end.minute);
                    /** @type {?} */
                    var _second = this.utilService.preZero(end.second);
                    this.timeVlaue_range = _hour + ":" + _minute + ":" + _second;
                    this.selectedMonth = { monthNbr: begin.month, year: begin.year };
                    if (begin.month === end.month && begin.year === end.year) {
                        if (end.month >= 12) {
                            this.selectedMonth_range = { monthNbr: 1, year: end.year + 1 };
                        }
                        else {
                            /** @type {?} */
                            var endyear = end.year;
                            if (defaultView === DefaultView.Month) {
                                endyear = endyear + 1;
                            }
                            this.selectedMonth_range = { monthNbr: end.month + this.opts.monthRangeValue, year: endyear };
                        }
                    }
                    else {
                        if (defaultView === DefaultView.Month && begin.year === end.year) {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year + 1 };
                        }
                        else {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year };
                        }
                    }
                    // tfs 579358
                    // let endDayWeekNbr = this.utilService.getWeekNumber(end);
                    // if (this.opts.firstDayOfWeek === 'su') {
                    //     endDayWeekNbr -= 1;
                    // }
                    // const weekNbr = this.utilService.getWeekNumber(begin) === endDayWeekNbr ? this.utilService.getWeekNumber(begin): 0;
                    /** @type {?} */
                    var dateObj = this.opts.firstDayOfWeek == 'su' ? end : begin;
                    /** @type {?} */
                    var weekNbr = this.utilService.getWeekNumber(dateObj);
                    this.selectedWeek = { weekNbr: weekNbr, year: begin.year };
                }
            }
        }
        this.dateChanged = dc;
        this.calendarViewChanged = cvc;
        this.rangeDateSelection = rds;
        this.closedByEsc = cbe;
        this.setCalendarVisibleMonth();
        if (defaultView === DefaultView.Month) {
            this.onMonthViewBtnClicked();
            if (dateRange) {
                this.onMonthViewBtnClicked(true);
            }
        }
        else if (defaultView === DefaultView.Year) {
            this.onYearViewBtnClicked();
            if (dateRange) {
                this.onYearViewBtnClicked(true);
            }
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CalendarComponent.prototype.resetDateValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value === ResetDateType.singleDate || value === ResetDateType.both) {
            this.selectedDate = this.utilService.resetDate();
        }
        if (value === ResetDateType.dateRange || value === ResetDateType.both) {
            this.selectedDateRange.begin = this.utilService.resetDate();
            this.selectedDateRange.end = this.utilService.resetDate();
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.resetMonthYearSelect = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        if (!isSecondCalendar) {
            this.selectMonth = false;
            this.selectYear = false;
        }
        else {
            this.selectMonth_range = false;
            this.selectYear_range = false;
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onMonthViewBtnClicked = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.selectMonth = !this.selectMonth;
            this.selectYear = false;
            if (this.selectMonth) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth.year = this.selectedMonth.year;
            }
        }
        else {
            this.selectMonth_range = !this.selectMonth_range;
            this.selectYear_range = false;
            if (this.selectMonth_range) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth_range.year = this.selectedMonth_range.year;
            }
            this.cdr.detectChanges();
        }
    };
    /**
     * @param {?} cell
     * @param {?} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onMonthCellClicked = /**
     * @param {?} cell
     * @param {?} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            var _a = this.visibleMonth, year = _a.year, monthNbr = _a.monthNbr;
            /** @type {?} */
            var mc = cell.nbr !== monthNbr;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year: year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth = false;
            }
        }
        else {
            var _b = this.visibleMonth_range, year = _b.year, monthNbr = _b.monthNbr;
            /** @type {?} */
            var mc = cell.nbr !== monthNbr;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year: year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth_range);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth_range = false;
            }
        }
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    CalendarComponent.prototype.onMonthCellKeyDown = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        // Make possible to move focus by arrow keys
        var _a = this.getSourceRowAndColumnFromEvent(event), sourceRow = _a.sourceRow, sourceCol = _a.sourceCol;
        var _b = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, MONTH_ROW_COUNT, MONTH_COL_COUNT), moveFocus = _b.moveFocus, targetRow = _b.targetRow, targetCol = _b.targetCol;
        if (moveFocus) {
            this.focusCellElement(M, targetRow, targetCol);
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onYearViewBtnClicked = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.visibleMonth.year = this.selectedMonth.year;
            if (!this.selectYear) {
                this.generateYears(this.visibleMonth.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false, isSecondCalendar);
            }
            this.selectYear = this.opts.showType === 3 ? true : !this.selectYear;
            if (this.opts.showType === 2) {
                this.selectMonth = !this.selectMonth;
            }
            else {
                this.selectMonth = false;
            }
            // this.selectYear = !this.selectYear;
            // this.selectMonth = false;
        }
        else {
            this.visibleMonth_range.year = this.selectedMonth_range.year;
            if (!this.selectYear_range) {
                this.generateYears(this.visibleMonth_range.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth_range.monthNbr, this.visibleMonth_range.year, false, isSecondCalendar);
            }
            this.selectYear_range = this.opts.showType === 3 ? true : !this.selectYear_range;
            if (this.opts.showType === 2) {
                this.selectMonth_range = !this.selectMonth_range;
            }
            else {
                this.selectMonth_range = false;
            }
        }
        this.cdr.detectChanges();
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onYearCellClicked = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            var _a = this.visibleMonth, year = _a.year, monthNbr = _a.monthNbr, monthTxt = _a.monthTxt;
            /** @type {?} */
            var yc = cell.year !== year;
            this.visibleMonth = { monthTxt: monthTxt, monthNbr: monthNbr, year: cell.year, yearTxt: this.opts.yearTxt };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear = false;
                this.selectMonth = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear = false;
            }
        }
        else {
            var _b = this.visibleMonth_range, year = _b.year, monthNbr = _b.monthNbr, monthTxt = _b.monthTxt;
            /** @type {?} */
            var yc = cell.year !== year;
            this.visibleMonth_range = {
                monthTxt: monthTxt,
                monthNbr: monthNbr,
                year: cell.year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth_range.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear_range = false;
                this.selectMonth_range = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear_range = false;
            }
        }
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    CalendarComponent.prototype.onYearCellKeyDown = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        // Make possible to move focus by arrow keys
        var _a = this.getSourceRowAndColumnFromEvent(event), sourceRow = _a.sourceRow, sourceCol = _a.sourceCol;
        var _b = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, YEAR_ROW_COUNT, YEAR_COL_COUNT), moveFocus = _b.moveFocus, targetRow = _b.targetRow, targetCol = _b.targetCol;
        if (moveFocus) {
            this.focusCellElement(Y, targetRow, targetCol);
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.generateMonths = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        /** @type {?} */
        var today = this.getToday();
        var _a = this.opts, disableUntil = _a.disableUntil, disableSince = _a.disableSince;
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        var year;
        /** @type {?} */
        var monthNbr;
        if (!isSecondCalendar) {
            this.months.length = 0;
            year = this.visibleMonth.year;
            monthNbr = this.visibleMonth.monthNbr;
        }
        else {
            this.months_range.length = 0;
            year = this.visibleMonth_range.year;
            monthNbr = this.visibleMonth_range.monthNbr;
        }
        for (var i = 1; i <= 12; i += 3) {
            /** @type {?} */
            var row = [];
            for (var j = i; j < i + 3; j++) {
                /** @type {?} */
                var disabled = this.utilService.isMonthDisabledByDisableUntil({ year: year, month: j, day: this.daysInMonth(j, year) }, disableUntil) || this.utilService.isMonthDisabledByDisableSince({ year: year, month: j, day: 1 }, disableSince);
                row.push({
                    nbr: j,
                    name: this.opts.monthLabels[j],
                    currMonth: j === today.month && year === today.year,
                    disabled: disabled,
                    monthObj: { year: year, month: j }
                });
            }
            if (!isSecondCalendar) {
                this.months.push({ row: row, year: year });
            }
            else {
                this.months_range.push({ row: row, year: year });
            }
        }
        this.setMonthViewHeaderBtnDisabledState(year, isSecondCalendar);
        this.generateCalendar(isSecondCalendar ? this.visibleMonth_range.monthNbr : this.visibleMonth.monthNbr, year, false, isSecondCalendar);
    };
    /**
     * @param {?} inputYear
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.generateYears = /**
     * @param {?} inputYear
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (inputYear, isSecondCalendar) {
        var _a = this.opts, minYear = _a.minYear, maxYear = _a.maxYear, disableUntil = _a.disableUntil, disableSince = _a.disableSince;
        /** @type {?} */
        var y = inputYear - (inputYear % 10);
        var _b = this.visibleMonth, year = _b.year, monthNbr = _b.monthNbr;
        if (!isSecondCalendar) {
            this.years.length = 0;
        }
        else {
            if (!this.years_range.length && ((this.years && this.years.length) && y < this.years[3][2].year && y > this.years[0][0].year) && this.opts.showType === 3) {
                y += 10;
            }
            this.years_range.length = 0;
            /** @type {?} */
            var allYears = flatten(this.years_range);
            if (allYears.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.year == inputYear; })) > -1) {
                y = this.years_range[3][2].year;
            }
        }
        /** @type {?} */
        var today = this.getToday();
        for (var i = y - 1; i < y + 10; i += 3) {
            /** @type {?} */
            var row = [];
            for (var j = i; j < i + 3; j++) {
                /** @type {?} */
                var disabled = this.utilService.isMonthDisabledByDisableUntil({
                    year: j,
                    month: monthNbr,
                    day: this.daysInMonth(monthNbr, j)
                }, disableUntil) ||
                    this.utilService.isMonthDisabledByDisableSince({ year: j, month: monthNbr, day: 1 }, disableSince);
                /** @type {?} */
                var minMax = j < minYear || j > maxYear;
                row.push({
                    year: j,
                    currYear: j === today.year,
                    selected: j === year,
                    disabled: disabled || minMax,
                    yearObj: { year: j }
                });
            }
            if (!isSecondCalendar) {
                this.years.push(row);
            }
            else {
                this.years_range.push(row);
            }
        }
        if (!isSecondCalendar) {
            this.setYearViewHeaderBtnDisabledState(this.years[0][1].year, this.years[3][1].year, isSecondCalendar);
        }
        else {
            this.setYearViewHeaderBtnDisabledState(this.years_range[0][1].year, this.years_range[3][1].year, isSecondCalendar);
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.setCalendarVisibleMonth = /**
     * @return {?}
     */
    function () {
        // Sets visible month of calendar
        var _a = this.selectedMonth, year = _a.year, monthNbr = _a.monthNbr;
        this.visibleMonth = {
            monthTxt: this.opts.monthLabels[monthNbr],
            monthNbr: monthNbr,
            year: year,
            yearTxt: this.opts.yearTxt
        };
        // Create current month
        if (this.opts.dateRange) {
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[this.selectedMonth_range.monthNbr],
                monthNbr: this.selectedMonth_range.monthNbr,
                year: this.selectedMonth_range.year,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(this.selectedMonth_range.monthNbr, this.selectedMonth_range.year, true, true);
        }
        this.generateCalendar(monthNbr, year, true, false);
    };
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onPrevNavigateBtnClicked = /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10, isSecondCalendar);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10, isSecondCalendar);
                }
            }
        }
    };
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onNextNavigateBtnClicked = /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @param {?=} isNext
     * @return {?}
     */
    CalendarComponent.prototype.setDateViewMonth = /**
     * @param {?=} isSecondCalendar
     * @param {?=} isNext
     * @return {?}
     */
    function (isSecondCalendar, isNext) {
        /** @type {?} */
        var change;
        if (isNext === undefined) {
            change = 0;
        }
        else {
            change = isNext ? 1 : -1;
        }
        if (!isSecondCalendar) {
            var _a = this.visibleMonth, year = _a.year, monthNbr = _a.monthNbr;
            /** @type {?} */
            var d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            var y = d.getFullYear();
            /** @type {?} */
            var m = d.getMonth() + 1;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
        else {
            var _b = this.visibleMonth_range, year = _b.year, monthNbr = _b.monthNbr;
            /** @type {?} */
            var d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            var y = d.getFullYear();
            /** @type {?} */
            var m = d.getMonth() + 1;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalendarComponent.prototype.onCloseSelector = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.esc) {
            this.closedByEsc();
        }
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onDayCellClicked = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        this.selectDate(cell.dateObj);
        this.resetMonthYearSelect(isSecondCalendar);
    };
    /**
     * @param {?} cell
     * @return {?}
     */
    CalendarComponent.prototype.onDayCellKeyDown = /**
     * @param {?} cell
     * @return {?}
     */
    function (cell) {
        // Make possible to move focus by arrow keys
        var _a = this.getSourceRowAndColumnFromEvent(event), sourceRow = _a.sourceRow, sourceCol = _a.sourceCol;
        var _b = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, DATE_ROW_COUNT, DATE_COL_COUNT), moveFocus = _b.moveFocus, targetRow = _b.targetRow, targetCol = _b.targetCol;
        if (moveFocus) {
            this.focusCellElement(D, targetRow, targetCol);
        }
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onDayCellMouseEnter = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.dates), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var w = _f.value;
                    try {
                        for (var _g = tslib_1.__values(w.week), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var day = _h.value;
                            day.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                                    this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                                    (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else {
            try {
                for (var _j = tslib_1.__values(this.dates_range), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var w = _k.value;
                    try {
                        for (var _l = tslib_1.__values(w.week), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var day = _m.value;
                            day.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                                    this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                                    (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                        }
                    }
                    catch (e_4_1) { e_4 = { error: e_4_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                        }
                        finally { if (e_4) throw e_4.error; }
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onDayCellMouseLeave = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        var e_5, _a, e_6, _b, e_7, _c, e_8, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.dates), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var w = _f.value;
                    try {
                        for (var _g = tslib_1.__values(w.week), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var day = _h.value;
                            day.range = false;
                        }
                    }
                    catch (e_6_1) { e_6 = { error: e_6_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                        }
                        finally { if (e_6) throw e_6.error; }
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        else {
            try {
                for (var _j = tslib_1.__values(this.dates_range), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var w = _k.value;
                    try {
                        for (var _l = tslib_1.__values(w.week), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var day = _m.value;
                            day.range = false;
                        }
                    }
                    catch (e_8_1) { e_8 = { error: e_8_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                        }
                        finally { if (e_8) throw e_8.error; }
                    }
                }
            }
            catch (e_7_1) { e_7 = { error: e_7_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_7) throw e_7.error; }
            }
        }
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onMonthCellMouseEnter = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        var e_9, _a, e_10, _b, e_11, _c, e_12, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.months), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    try {
                        for (var _g = tslib_1.__values(item.row), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var month = _h.value;
                            month.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                                    this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                                    (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                        }
                    }
                    catch (e_10_1) { e_10 = { error: e_10_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                        }
                        finally { if (e_10) throw e_10.error; }
                    }
                }
            }
            catch (e_9_1) { e_9 = { error: e_9_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_9) throw e_9.error; }
            }
        }
        else {
            try {
                for (var _j = tslib_1.__values(this.months_range), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var item = _k.value;
                    try {
                        for (var _l = tslib_1.__values(item.row), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var month = _m.value;
                            month.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                                    this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                                    (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                        }
                    }
                    catch (e_12_1) { e_12 = { error: e_12_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                        }
                        finally { if (e_12) throw e_12.error; }
                    }
                }
            }
            catch (e_11_1) { e_11 = { error: e_11_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_11) throw e_11.error; }
            }
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onMonthCellMouseLeave = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        var e_13, _a, e_14, _b, e_15, _c, e_16, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.months), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    try {
                        for (var _g = tslib_1.__values(item.row), _h = _g.next(); !_h.done; _h = _g.next()) {
                            var month = _h.value;
                            month.range = false;
                        }
                    }
                    catch (e_14_1) { e_14 = { error: e_14_1 }; }
                    finally {
                        try {
                            if (_h && !_h.done && (_b = _g.return)) _b.call(_g);
                        }
                        finally { if (e_14) throw e_14.error; }
                    }
                }
            }
            catch (e_13_1) { e_13 = { error: e_13_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_13) throw e_13.error; }
            }
        }
        else {
            try {
                for (var _j = tslib_1.__values(this.months), _k = _j.next(); !_k.done; _k = _j.next()) {
                    var item = _k.value;
                    try {
                        for (var _l = tslib_1.__values(item.row), _m = _l.next(); !_m.done; _m = _l.next()) {
                            var month = _m.value;
                            month.range = false;
                        }
                    }
                    catch (e_16_1) { e_16 = { error: e_16_1 }; }
                    finally {
                        try {
                            if (_m && !_m.done && (_d = _l.return)) _d.call(_l);
                        }
                        finally { if (e_16) throw e_16.error; }
                    }
                }
            }
            catch (e_15_1) { e_15 = { error: e_15_1 }; }
            finally {
                try {
                    if (_k && !_k.done && (_c = _j.return)) _c.call(_j);
                }
                finally { if (e_15) throw e_15.error; }
            }
        }
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onYearCellMouseEnter = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        var e_17, _a, e_18, _b, e_19, _c, e_20, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.years), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    try {
                        for (var item_1 = tslib_1.__values(item), item_1_1 = item_1.next(); !item_1_1.done; item_1_1 = item_1.next()) {
                            var year = item_1_1.value;
                            year.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                                    this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                                    (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                        }
                    }
                    catch (e_18_1) { e_18 = { error: e_18_1 }; }
                    finally {
                        try {
                            if (item_1_1 && !item_1_1.done && (_b = item_1.return)) _b.call(item_1);
                        }
                        finally { if (e_18) throw e_18.error; }
                    }
                }
            }
            catch (e_17_1) { e_17 = { error: e_17_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_17) throw e_17.error; }
            }
        }
        else {
            try {
                for (var _g = tslib_1.__values(this.years_range), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var item = _h.value;
                    try {
                        for (var item_2 = tslib_1.__values(item), item_2_1 = item_2.next(); !item_2_1.done; item_2_1 = item_2.next()) {
                            var year = item_2_1.value;
                            year.range =
                                (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                                    this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                                    (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                        this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                        }
                    }
                    catch (e_20_1) { e_20 = { error: e_20_1 }; }
                    finally {
                        try {
                            if (item_2_1 && !item_2_1.done && (_d = item_2.return)) _d.call(item_2);
                        }
                        finally { if (e_20) throw e_20.error; }
                    }
                }
            }
            catch (e_19_1) { e_19 = { error: e_19_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
                }
                finally { if (e_19) throw e_19.error; }
            }
        }
    };
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onYearCellMouseLeave = /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (isSecondCalendar) {
        var e_21, _a, e_22, _b, e_23, _c, e_24, _d;
        if (isSecondCalendar) {
            try {
                for (var _e = tslib_1.__values(this.years), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var item = _f.value;
                    try {
                        for (var item_3 = tslib_1.__values(item), item_3_1 = item_3.next(); !item_3_1.done; item_3_1 = item_3.next()) {
                            var year = item_3_1.value;
                            year.range = false;
                        }
                    }
                    catch (e_22_1) { e_22 = { error: e_22_1 }; }
                    finally {
                        try {
                            if (item_3_1 && !item_3_1.done && (_b = item_3.return)) _b.call(item_3);
                        }
                        finally { if (e_22) throw e_22.error; }
                    }
                }
            }
            catch (e_21_1) { e_21 = { error: e_21_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_a = _e.return)) _a.call(_e);
                }
                finally { if (e_21) throw e_21.error; }
            }
        }
        else {
            try {
                for (var _g = tslib_1.__values(this.years_range), _h = _g.next(); !_h.done; _h = _g.next()) {
                    var item = _h.value;
                    try {
                        for (var item_4 = tslib_1.__values(item), item_4_1 = item_4.next(); !item_4_1.done; item_4_1 = item_4.next()) {
                            var year = item_4_1.value;
                            year.range = false;
                        }
                    }
                    catch (e_24_1) { e_24 = { error: e_24_1 }; }
                    finally {
                        try {
                            if (item_4_1 && !item_4_1.done && (_d = item_4.return)) _d.call(item_4);
                        }
                        finally { if (e_24) throw e_24.error; }
                    }
                }
            }
            catch (e_23_1) { e_23 = { error: e_23_1 }; }
            finally {
                try {
                    if (_h && !_h.done && (_c = _g.return)) _c.call(_g);
                }
                finally { if (e_23) throw e_23.error; }
            }
        }
    };
    /**
     * @param {?} weekData
     * @return {?}
     */
    CalendarComponent.prototype.onWeekClicked = /**
     * @param {?} weekData
     * @return {?}
     */
    function (weekData) {
        /** @type {?} */
        var showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr: weekData.weekNbr, year: weekData.year };
        if (showTime) {
            weekData.week[0].dateObj.hour = 0;
            weekData.week[0].dateObj.minute = 0;
            weekData.week[0].dateObj.second = 0;
            weekData.week[6].dateObj.hour = 23;
            weekData.week[6].dateObj.minute = 59;
            weekData.week[6].dateObj.second = 59;
        }
        this.selectDate(weekData.week[0].dateObj);
        this.selectDate(weekData.week[6].dateObj);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalendarComponent.prototype.getSourceRowAndColumnFromEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var sourceRow = 0;
        /** @type {?} */
        var sourceCol = 0;
        if (event.target && event.target.id) {
            // value of id is for example: m_0_1 (first number = row, second number = column)
            /** @type {?} */
            var arr = event.target.id.split(UNDER_LINE);
            sourceRow = Number(arr[1]);
            sourceCol = Number(arr[2]);
        }
        return { sourceRow: sourceRow, sourceCol: sourceCol };
    };
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} rowCount
     * @param {?} colCount
     * @return {?}
     */
    CalendarComponent.prototype.getTargetFocusRowAndColumn = /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} rowCount
     * @param {?} colCount
     * @return {?}
     */
    function (event, row, col, rowCount, colCount) {
        /** @type {?} */
        var moveFocus = false;
        /** @type {?} */
        var targetRow = row;
        /** @type {?} */
        var targetCol = col;
        /** @type {?} */
        var keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.upArrow && row > 0) {
            moveFocus = true;
            targetRow--;
        }
        else if (keyCode === KeyCode.downArrow && row < rowCount) {
            moveFocus = true;
            targetRow++;
        }
        else if (keyCode === KeyCode.leftArrow && col > 0) {
            moveFocus = true;
            targetCol--;
        }
        else if (keyCode === KeyCode.rightArrow && col < colCount) {
            moveFocus = true;
            targetCol++;
        }
        return { moveFocus: moveFocus, targetRow: targetRow, targetCol: targetCol };
    };
    /**
     * @param {?} type
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    CalendarComponent.prototype.focusCellElement = /**
     * @param {?} type
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    function (type, row, col) {
        /** @type {?} */
        var elem = this.selectorEl.nativeElement.querySelector(DOT + type + UNDER_LINE + row + UNDER_LINE + col);
        if (elem) {
            elem.focus();
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.selectDate = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, showTime = _a.showTime, returnFormat = _a.returnFormat;
        if (this.opts.dateRange) {
            // Date range
            /** @type {?} */
            var isBeginDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            var isEndDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.end) &&
                JSON.stringify(this.selectedDateRange.begin) !== JSON.stringify(this.selectedDateRange.end);
            if (isBeginDateInitialized && isEndDateInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = date;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else if (!isBeginDateInitialized) {
                // begin date
                this.selectedDateRange.begin = date;
                if (!isEndDateInitialized) {
                    this.selectedDateRange.end = date;
                }
                this.rangeDateSelection({
                    isBegin: true,
                    date: date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else {
                // second selection
                /** @type {?} */
                var firstDateEarlier = this.utilService.isDateEarlier(date, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    var _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = date;
                    this.rangeDateSelection({
                        isBegin: true,
                        date: date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                else {
                    this.selectedDateRange.end = date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            // Single date
            this.selectedDate = date;
            if (!this.opts.showTime) {
                this.dateChanged(this.utilService.getDateModel(this.selectedDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
            }
            else {
                if (!this.timeVlaue && this.opts.viewType == ViewType.Together) {
                    this.timeVlaue = this.getTimeStr(new Date);
                }
            }
        }
    };
    /**
     * @param {?} month
     * @return {?}
     */
    CalendarComponent.prototype.toSelectMonth = /**
     * @param {?} month
     * @return {?}
     */
    function (month) {
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, showTime = _a.showTime, returnFormat = _a.returnFormat;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            var isBeginMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.begin);
            /** @type {?} */
            var isEndMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.end);
            if (isBeginMonthInitialized && isEndMonthInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginMonthInitialized) {
                // begin date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                var firstDateEarlier = this.utilService.isDateEarlier({ year: month.year, month: month.monthNbr }, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    var _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.selectedMonth = month;
            this.dateChanged(this.utilService.getDateModel({ year: month.year, month: month.monthNbr }, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    };
    /**
     * @param {?} year
     * @return {?}
     */
    CalendarComponent.prototype.toSelectYear = /**
     * @param {?} year
     * @return {?}
     */
    function (year) {
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, showTime = _a.showTime, returnFormat = _a.returnFormat;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            var isBeginYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.begin);
            /** @type {?} */
            var isEndYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.end);
            if (isBeginYearInitialized && isEndYearInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = year;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginYearInitialized) {
                // begin date
                this.selectedDateRange.begin = year;
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat: dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                var firstDateEarlier = this.utilService.isDateEarlier(year, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    var _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = year;
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = year;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat: dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.dateChanged(this.utilService.getDateModel(year, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    };
    /**
     * @param {?} y
     * @param {?} m
     * @return {?}
     */
    CalendarComponent.prototype.monthStartIdx = /**
     * @param {?} y
     * @param {?} m
     * @return {?}
     */
    function (y, m) {
        // Month start index
        /** @type {?} */
        var d = new Date();
        d.setDate(1);
        d.setMonth(m - 1);
        d.setFullYear(y);
        /** @type {?} */
        var idx = d.getDay() + this.sundayIdx();
        return idx >= 7 ? idx - 7 : idx;
    };
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    CalendarComponent.prototype.daysInMonth = /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    function (m, y) {
        // Return number of days of current month
        return new Date(y, m, 0).getDate();
    };
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    CalendarComponent.prototype.daysInPrevMonth = /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    function (m, y) {
        // Return number of days of the previous month
        /** @type {?} */
        var d = this.getDate(y, m, 1);
        d.setMonth(d.getMonth() - 1);
        return this.daysInMonth(d.getMonth() + 1, d.getFullYear());
    };
    /**
     * @param {?} d
     * @param {?} m
     * @param {?} y
     * @param {?} cmo
     * @param {?} today
     * @return {?}
     */
    CalendarComponent.prototype.isCurrDay = /**
     * @param {?} d
     * @param {?} m
     * @param {?} y
     * @param {?} cmo
     * @param {?} today
     * @return {?}
     */
    function (d, m, y, cmo, today) {
        // Check is a given date the today
        return d === today.day && m === today.month && y === today.year && cmo === MonthId.curr;
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.getWidth = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hasShortCuts = this.opts.shortcuts && this.opts.shortcuts.length > 0;
        if (this.opts.dateRange && this.opts.showType !== 4) {
            return hasShortCuts ? '660px' : '574px';
        }
        else {
            /** @type {?} */
            var w = (hasShortCuts ? 380 : 287) + ((this.opts.viewType === ViewType.Together || this.multiSelect) ? 200 : 0);
            return w + 'px';
        }
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.getToday = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var date = new Date();
        if (this.opts.showTime) {
            return {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate(),
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds()
            };
        }
        else {
            return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
        }
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.getDayNumber = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // Get day number: su=0, mo=1, tu=2, we=3 ...
        /** @type {?} */
        var d = this.getDate(date.year, date.month, date.day);
        return d.getDay();
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.getWeekday = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        // Get weekday: su, mo, tu, we ...
        return this.weekDayOpts[this.getDayNumber(date)];
    };
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    CalendarComponent.prototype.getDate = /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    function (year, month, day) {
        // Creates a date object from given year, month and day
        return new Date(year, month - 1, day, 0, 0, 0, 0);
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.sundayIdx = /**
     * @return {?}
     */
    function () {
        // Index of Sunday day
        return this.dayIdx > 0 ? 7 - this.dayIdx : 0;
    };
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} notifyChange
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.generateCalendar = /**
     * @param {?} m
     * @param {?} y
     * @param {?} notifyChange
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (m, y, notifyChange, isSecondCalendar) {
        if (!isSecondCalendar) {
            this.dates.length = 0;
        }
        else {
            this.dates_range.length = 0;
        }
        /** @type {?} */
        var today = this.getToday();
        /** @type {?} */
        var monthStart = this.monthStartIdx(y, m);
        /** @type {?} */
        var dInThisM = this.daysInMonth(m, y);
        /** @type {?} */
        var dInPrevM = this.daysInPrevMonth(m, y);
        /** @type {?} */
        var dayNbr = 1;
        /** @type {?} */
        var cmo = MonthId.prev;
        for (var i = 1; i < 7; i++) {
            /** @type {?} */
            var week = [];
            if (i === 1) {
                // First week
                /** @type {?} */
                var pm = dInPrevM - monthStart + 1;
                // Previous month
                for (var j = pm; j <= dInPrevM; j++) {
                    /** @type {?} */
                    var date = { year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: j };
                    week.push({
                        dateObj: date,
                        cmo: cmo,
                        currDay: this.isCurrDay(j, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                }
                cmo = MonthId.curr;
                // Current month
                /** @type {?} */
                var daysLeft = 7 - week.length;
                for (var j = 0; j < daysLeft; j++) {
                    /** @type {?} */
                    var date = { year: y, month: m, day: dayNbr };
                    week.push({
                        dateObj: date,
                        cmo: cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            else {
                // Rest of the weeks
                for (var j = 1; j < 8; j++) {
                    if (dayNbr > dInThisM) {
                        // Next month
                        dayNbr = 1;
                        cmo = MonthId.next;
                    }
                    /** @type {?} */
                    var date = {
                        year: cmo === MonthId.next && m === 12 ? y + 1 : y,
                        month: cmo === MonthId.curr ? m : cmo === MonthId.next && m < 12 ? m + 1 : 1,
                        day: dayNbr
                    };
                    week.push({
                        dateObj: date,
                        cmo: cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            // let weekNbr = this.opts.showWeekNumbers ? this.utilService.getWeekNumber(week[0].dateObj) : 0;
            /** @type {?} */
            var weekNbr = 0;
            if (this.opts.showWeekNumbers) {
                /** @type {?} */
                var dateIndex = this.opts.firstDayOfWeek == 'su' ? 6 : 0;
                weekNbr = this.utilService.getWeekNumber(week[dateIndex].dateObj);
                // if (this.opts.firstDayOfWeek === 'su') {
                //     endDayWeekNbr -= 1;
                // }
                // weekNbr = this.utilService.getWeekNumber(week[0].dateObj) === endDayWeekNbr ? this.utilService.getWeekNumber(week[0].dateObj): 0;
            }
            if (!isSecondCalendar) {
                this.dates.push({ week: week, weekNbr: weekNbr, year: y });
            }
            else {
                this.dates_range.push({ week: week, weekNbr: weekNbr, year: y });
            }
        }
        this.setDateViewHeaderBtnDisabledState(m, y, isSecondCalendar);
        if (notifyChange) {
            // Notify parent
            this.calendarViewChanged({
                year: y,
                month: m,
                first: { number: 1, weekday: this.getWeekday({ year: y, month: m, day: 1 }) },
                last: { number: dInThisM, weekday: this.getWeekday({ year: y, month: m, day: dInThisM }) }
            });
        }
    };
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.setDateViewHeaderBtnDisabledState = /**
     * @param {?} m
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    function (m, y, isSecondCalendar) {
        /** @type {?} */
        var dpm = false;
        /** @type {?} */
        var dnm = false;
        var _a = this.opts, disableUntil = _a.disableUntil, disableSince = _a.disableSince, minYear = _a.minYear, maxYear = _a.maxYear;
        dpm = this.utilService.isMonthDisabledByDisableUntil({
            year: m === 1 ? y - 1 : y,
            month: m === 1 ? 12 : m - 1,
            day: this.daysInMonth(m === 1 ? 12 : m - 1, m === 1 ? y - 1 : y)
        }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: m === 12 ? y + 1 : y, month: m === 12 ? 1 : m + 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled_range = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    };
    /**
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.setMonthViewHeaderBtnDisabledState = /**
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    function (y, isSecondCalendar) {
        /** @type {?} */
        var dpm = false;
        /** @type {?} */
        var dnm = false;
        var _a = this.opts, disableUntil = _a.disableUntil, disableSince = _a.disableSince, minYear = _a.minYear, maxYear = _a.maxYear;
        dpm = this.utilService.isMonthDisabledByDisableUntil({ year: y - 1, month: 12, day: 31 }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: y + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = y === minYear || dpm;
            this.nextViewDisabled = y === maxYear || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = y === minYear || dpm;
            this.nextViewDisabled_range = y === maxYear || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    };
    /**
     * @param {?} yp
     * @param {?} yn
     * @param {?} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.setYearViewHeaderBtnDisabledState = /**
     * @param {?} yp
     * @param {?} yn
     * @param {?} isSecondCalendar
     * @return {?}
     */
    function (yp, yn, isSecondCalendar) {
        /** @type {?} */
        var dpy = false;
        /** @type {?} */
        var dny = false;
        var _a = this.opts, disableUntil = _a.disableUntil, disableSince = _a.disableSince, minYear = _a.minYear, maxYear = _a.maxYear;
        dpy = this.utilService.isMonthDisabledByDisableUntil({ year: yp - 1, month: 12, day: 31 }, disableUntil);
        dny = this.utilService.isMonthDisabledByDisableSince({ year: yn + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = yp <= minYear || dpy;
            this.nextViewDisabled = yn >= maxYear || dny;
            this.prevDobViewDisabled = yp <= minYear || dpy;
            this.nextDobViewDisabled = yn >= maxYear || dny;
        }
        else {
            this.prevViewDisabled_range = yp <= minYear || dpy;
            this.nextViewDisabled_range = yn >= maxYear || dny;
            this.prevDobViewDisabled_range = yp <= minYear || dpy;
            this.nextDobViewDisabled_range = yn >= maxYear || dny;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalendarComponent.prototype.onContainerClick = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalendarComponent.prototype.onClickTimeBtn = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        if (this.opts.dateRange) {
            /** @type {?} */
            var beginIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            var endIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.end);
            /** @type {?} */
            var now = new Date();
            if (!beginIsInitializedDate || !endIsInitializedDate) {
                // 直接点击确定显示本月和下月
                if (!beginIsInitializedDate) {
                    this.selectedDateRange.begin = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
                }
                /** @type {?} */
                var endYear = now.getFullYear();
                /** @type {?} */
                var endmonth = now.getMonth() + 1;
                if (endmonth >= 12) {
                    endYear = endYear + 1;
                    endmonth = 1;
                }
                // else {
                //     endmonth = endmonth + this.opts.monthRangeValue;
                // }
                this.selectedDateRange.end = tslib_1.__assign({}, this.selectedDateRange.begin);
                // this.selectedDateRange.end = { year: endYear, month: endmonth, day: now.getDate() };
                // 点击selectTime之前给dateRange赋两个时间值
                this.timeVlaue = this.getTimeStr(now);
                this.timeVlaue_range = this.getTimeStr(now);
            }
            if (!this.timeVlaue_range) {
                this.timeVlaue_range = this.getTimeStr(now);
            }
            this.timeVlaue_range = this.checkTimeValues(this.timeVlaue_range);
        }
        else {
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                /** @type {?} */
                var now = new Date();
                // 点击selectTime之前赋值
                this.timeVlaue = this.getTimeStr(now);
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        if (!this.timeVlaue) {
            /** @type {?} */
            var now = new Date();
            // 点击selectTime之前赋值
            this.timeVlaue = this.getTimeStr(now);
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        this.timeVlaue = this.checkTimeValues(this.timeVlaue);
        if (this.selectYear) {
            this.selectYear = false;
        }
        if (this.selectMonth) {
            this.selectMonth = false;
        }
        if (this.selectYear_range) {
            this.selectYear_range = false;
        }
        if (this.selectMonth_range) {
            this.selectMonth_range = false;
        }
        this.selectTime = !this.selectTime;
        this.cdr.detectChanges();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onShowDynamicView = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = true;
        this.dynamicViewShow.emit({ showDynamicView: true });
        this.cdr.detectChanges();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onShowDatePanel = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = false;
        this.dynamicViewShow.emit({ showDynamicView: false });
        this.cdr.detectChanges();
    };
    /**
     * @private
     * @param {?} isDateRange
     * @return {?}
     */
    CalendarComponent.prototype.getTimeValue = /**
     * @private
     * @param {?} isDateRange
     * @return {?}
     */
    function (isDateRange) {
        /** @type {?} */
        var t = { start: null, end: null };
        if (this.timeVlaue) {
            /** @type {?} */
            var timeArr = this.timeVlaue.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
            if (timeArr.length >= 2) {
                t.start = {
                    hour: timeArr[0],
                    minute: timeArr[1],
                    second: timeArr[2] ? timeArr[2] : 0
                };
            }
        }
        else {
            /** @type {?} */
            var nowDate = new Date();
            /** @type {?} */
            var hour = nowDate.getHours();
            /** @type {?} */
            var minute = nowDate.getMinutes();
            /** @type {?} */
            var second = nowDate.getSeconds();
            if (this.opts.dateRange) {
                t.start = { hour: 0, minute: 0, second: 0 };
            }
            else {
                t.start = { hour: hour, minute: minute, second: second };
            }
        }
        if (isDateRange) {
            if (this.timeVlaue_range) {
                /** @type {?} */
                var timeArr_range = this.timeVlaue_range.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (timeArr_range.length >= 2) {
                    t.end = {
                        hour: timeArr_range[0],
                        minute: timeArr_range[1],
                        second: timeArr_range[2] ? timeArr_range[2] : 0
                    };
                }
            }
            else {
                /** @type {?} */
                var hour = 23;
                /** @type {?} */
                var minute = 59;
                /** @type {?} */
                var second = 59;
                t.end = { hour: hour, minute: minute, second: second };
            }
        }
        return t;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CalendarComponent.prototype.onClickOkBtn = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        /** @type {?} */
        var timeObj = null;
        /** @type {?} */
        var timeObj_range = null;
        /** @type {?} */
        var selectedDate = null;
        /** @type {?} */
        var selectedDate_range = null;
        if (this.opts.showTime) {
            var _a = this.getTimeValue(this.opts.dateRange), start = _a.start, end = _a.end;
            timeObj = start;
            timeObj_range = end;
        }
        var _b = this.opts, dateFormat = _b.dateFormat, monthLabels = _b.monthLabels, dateRangeDatesDelimiter = _b.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _b.closeSelectorOnDateSelect, returnFormat = _b.returnFormat;
        if (!this.opts.dateRange) {
            selectedDate = tslib_1.__assign({}, this.initializedDate(this.selectedDate), timeObj);
            /** @type {?} */
            var isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
            /** @type {?} */
            var earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
            selectedDate = !isInDisableRange
                ? selectedDate
                : tslib_1.__assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
            this.checkTimeValue(selectedDate);
        }
        else {
            /** @type {?} */
            var begin = tslib_1.__assign({}, this.initializedDate(this.selectedDateRange.begin), timeObj);
            /** @type {?} */
            var end = tslib_1.__assign({}, this.initializedDate(this.selectedDateRange.end, begin), timeObj_range);
            this.checkTimeValue(begin);
            this.checkTimeValue(end);
            selectedDate_range = { begin: begin, end: end };
        }
        /** @type {?} */
        var dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onTodayClick = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        /** @type {?} */
        var timeObj = null;
        /** @type {?} */
        var selectedDate = null;
        /** @type {?} */
        var selectedDate_range = null;
        if (this.opts.showTime) {
            var start = this.getTimeValue(false).start;
            timeObj = start;
        }
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, returnFormat = _a.returnFormat;
        selectedDate = tslib_1.__assign({}, this.initializedDate({ year: 0, month: 0, day: 0 }), timeObj);
        /** @type {?} */
        var isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
        /** @type {?} */
        var earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
        selectedDate = !isInDisableRange
            ? selectedDate
            : tslib_1.__assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
        /** @type {?} */
        var dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    };
    /**
     * @param {?} $event
     * @param {?} dynamicviewRef
     * @return {?}
     */
    CalendarComponent.prototype.onDynamicOkClick = /**
     * @param {?} $event
     * @param {?} dynamicviewRef
     * @return {?}
     */
    function ($event, dynamicviewRef) {
        if (dynamicviewRef) {
            /** @type {?} */
            var text = dynamicviewRef.formatValue();
            /** @type {?} */
            var value = dynamicviewRef.getValue();
            value.text = text;
            this.opts.dynamicValueChanged(value);
        }
    };
    /**
     * @param {?} date
     * @param {?=} otherDate
     * @return {?}
     */
    CalendarComponent.prototype.initializedDate = /**
     * @param {?} date
     * @param {?=} otherDate
     * @return {?}
     */
    function (date, otherDate) {
        if (otherDate === void 0) { otherDate = { year: 0, month: 0, day: 0 }; }
        /** @type {?} */
        var daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if (!this.utilService.isInitializedDate(date) && !this.utilService.isInitializedDate(otherDate)) {
            /** @type {?} */
            var year = new Date().getFullYear();
            /** @type {?} */
            var month = new Date().getMonth() + 1;
            /** @type {?} */
            var day = new Date().getDate();
            return this.utilService.isDisabledDate({ year: year, month: month, day: day }, this.opts) ? this.opts.disableUntil : { year: year, month: month, day: day };
        }
        else if (!this.utilService.isInitializedDate(date)) {
            /** @type {?} */
            var year = otherDate.month + 1 > 12 ? otherDate.year + 1 : otherDate.year;
            /** @type {?} */
            var month = otherDate.month + 1 > 12 ? 1 : otherDate.month + this.opts.monthRangeValue;
            if (!date.month) {
                month = otherDate.month;
            }
            /** @type {?} */
            var day = otherDate.day < 1 || otherDate.day > daysInMonth[month - 1] ? 1 : otherDate.day;
            return this.utilService.isDisabledDate({ year: year, month: month, day: day }, this.opts) ? this.opts.disableSince : { year: year, month: month, day: day };
        }
        return date;
    };
    /**
     * @param {?} date
     * @return {?}
     */
    CalendarComponent.prototype.setTime = /**
     * @param {?} date
     * @return {?}
     */
    function (date) {
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, returnFormat = _a.returnFormat;
        if (date instanceof Date) {
            if (this.opts.showType !== 4 && !this.opts.dateRange) {
                /** @type {?} */
                var targetDate = void 0;
                if (this.opts.showTime) {
                    targetDate = {
                        year: date.getFullYear(),
                        month: date.getMonth() + 1,
                        day: date.getDate(),
                        hour: date.getHours(),
                        minute: date.getMinutes(),
                        second: date.getSeconds()
                    };
                }
                else {
                    targetDate = { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
                }
                /** @type {?} */
                var dateModel = this.utilService.getDateModel(targetDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
            else {
                // 启用周选择时  快捷按钮参数为单个日期
                /** @type {?} */
                var dateModel = this.utilService.getDateModel(null, this.utilService.getNowWeekTime(date), dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
        }
        else if (date instanceof Object && this.opts.dateRange) {
            /** @type {?} */
            var targetDateRange = void 0;
            var begin = date.begin, end = date.end;
            if (!begin || !end) {
                return;
            }
            if (this.opts.showTime) {
                targetDateRange = {
                    begin: {
                        year: begin.getFullYear(),
                        month: begin.getMonth() + 1,
                        day: begin.getDate(),
                        hour: begin.getHours(),
                        minute: begin.getMinutes(),
                        second: begin.getSeconds()
                    },
                    end: {
                        year: end.getFullYear(),
                        month: end.getMonth() + 1,
                        day: end.getDate(),
                        hour: end.getHours(),
                        minute: end.getMinutes(),
                        second: end.getSeconds()
                    }
                };
            }
            else {
                targetDateRange = {
                    begin: { year: begin.getFullYear(), month: begin.getMonth() + 1, day: begin.getDate() },
                    end: { year: end.getFullYear(), month: end.getMonth() + 1, day: end.getDate() }
                };
            }
            /** @type {?} */
            var dateModel = this.utilService.getDateModel(null, targetDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
            this.dateChanged(dateModel, closeSelectorOnDateSelect);
        }
        else {
            // console.warn('参数必须符合要求！');
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onSelectCurrentWeek = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        /** @type {?} */
        var firstDay = this.opts.firstDayOfWeek === 'su' ? '日' : '一';
        var _a = this.dateHlp.getNowWeekTime(new Date(), firstDay), begin = _a.begin, end = _a.end;
        /** @type {?} */
        var year = new Date().getFullYear();
        /** @type {?} */
        var weekNbr = this.utilService.getWeekNumber(begin);
        /** @type {?} */
        var showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr: weekNbr, year: year };
        if (showTime) {
            begin['hour'] = 0;
            begin['minute'] = 0;
            begin['second'] = 0;
            end['hour'] = 23;
            end['minute'] = 59;
            end['second'] = 59;
        }
        this.selectDate(begin);
        this.selectDate(end);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onDynamicValueChanged = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.btnDynamicDisabled = !$event;
    };
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    CalendarComponent.prototype.onDayCellClickedForMultiDates = /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    function (cell, isSecondCalendar) {
        var _this = this;
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        var _a = this.opts, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, maxSelected = _a.maxSelected, closeSelectorOnDateSelect = _a.closeSelectorOnDateSelect, showTime = _a.showTime, returnFormat = _a.returnFormat, selectedOrderBy = _a.selectedOrderBy;
        /** @type {?} */
        var selectedDates = [];
        /** @type {?} */
        var isSelected = this.selectedDates.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return _this.utilService.isDateSame(n, cell.dateObj); }));
        if (!isSelected) {
            if (!maxSelected || (maxSelected && this.selectedDates.length < maxSelected)) {
                selectedDates = tslib_1.__spread(this.selectedDates, [tslib_1.__assign({}, cell.dateObj, { value: this.utilService.formatDate(cell.dateObj, dateFormat, monthLabels) })]);
            }
            else {
                selectedDates = tslib_1.__spread(this.selectedDates);
                if (this.showNotify) {
                    this.showNotify();
                }
            }
        }
        else {
            selectedDates = this.selectedDates.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n !== isSelected; }));
        }
        selectedDates = this.utilService.orderSelectedDates(selectedDates, selectedOrderBy);
        this.selectedDates = selectedDates;
        this.resetMonthYearSelect(isSecondCalendar);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onMultiDatesOkClicked = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        $event.stopPropagation();
        this.multiDatesChanged(this.selectedDates);
    };
    /**
     * @param {?} removeItem
     * @return {?}
     */
    CalendarComponent.prototype.onMultiDateRemoved = /**
     * @param {?} removeItem
     * @return {?}
     */
    function (removeItem) {
        this.selectedDates = this.selectedDates.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n !== removeItem; }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onMultiDateClear = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectedDates = [];
    };
    /**
     * @return {?}
     */
    CalendarComponent.prototype.showGoBackToday = /**
     * @return {?}
     */
    function () {
        var _a = this.visibleMonth, monthNbr = _a.monthNbr, year = _a.year;
        var _b = this.getToday(), currentYear = _b.year, month = _b.month;
        return monthNbr != month || year != currentYear;
    };
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    CalendarComponent.prototype.setCalendarView = /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    function (year, month) {
        if (this.visibleMonth.year != year || this.visibleMonth.monthNbr != month) {
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[month],
                monthNbr: month,
                year: year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = year;
            this.selectedMonth.monthNbr = month;
            //tfs638280
            this.selectMonth = false;
            this.selectYear = false;
            this.generateCalendar(month, year, true);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.gototodayView = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a = this.getToday(), year = _a.year, month = _a.month;
        this.setCalendarView(year, month);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CalendarComponent.prototype.onSelectDateClicked = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (!$event) {
            return;
        }
        var year = $event.year, month = $event.month;
        this.setCalendarView(year, month);
    };
    /**
     * @private
     * @param {?} length
     * @param {?=} step
     * @param {?=} start
     * @return {?}
     */
    CalendarComponent.prototype.makeRange = /**
     * @private
     * @param {?} length
     * @param {?=} step
     * @param {?=} start
     * @return {?}
     */
    function (length, step, start) {
        if (step === void 0) { step = 1; }
        if (start === void 0) { start = 0; }
        step = Math.ceil(step);
        return new Array(Math.ceil(length / step))
            .fill(0)
            .map((/**
         * @param {?} _
         * @param {?} i
         * @return {?}
         */
        function (_, i) { return (i + start) * step; }));
    };
    /**
     * @private
     * @return {?}
     */
    CalendarComponent.prototype.buildHours = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var hourRanges = 24;
        /** @type {?} */
        var disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        var startIndex = 0;
        /** @type {?} */
        var hourRange = this.makeRange(hourRanges, this.opts.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(n.disabled);
        }));
    };
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    CalendarComponent.prototype.buildMinutes = /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    function (timeObj) {
        var _this = this;
        /** @type {?} */
        var minuteRange = this.makeRange(60, this.opts.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledMinutes &&
                    _this.disabledMinutes((/** @type {?} */ (timeObj.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(n.disabled);
        }));
    };
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    CalendarComponent.prototype.buildSeconds = /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    function (timeObj) {
        var _this = this;
        /** @type {?} */
        var secondRange = this.makeRange(60, this.opts.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return {
                index: r,
                disabled: _this.disabledSeconds &&
                    _this.disabledSeconds((/** @type {?} */ (timeObj.hours)), (/** @type {?} */ (timeObj.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !(n.disabled);
        }));
    };
    /**
     * @param {?} timeValue
     * @return {?}
     */
    CalendarComponent.prototype.checkTimeValues = /**
     * @param {?} timeValue
     * @return {?}
     */
    function (timeValue) {
        if (timeValue) {
            /** @type {?} */
            var times = timeValue.split(':').map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return parseInt(n, 10); }));
            /** @type {?} */
            var timeObj_1 = {
                hour: times[0],
                minute: times[1],
                second: times[2]
            };
            if (this.opts.hourStep > 1) {
                /** @type {?} */
                var hours = this.buildHours();
                if (!hours.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === timeObj_1.hour; }))) {
                    timeObj_1.hour = 0;
                }
            }
            if (this.opts.minuteStep > 1) {
                /** @type {?} */
                var minutes = this.buildMinutes({ hours: timeObj_1.hour });
                if (!minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === timeObj_1.minute; }))) {
                    timeObj_1.minute = 0;
                }
            }
            if (this.opts.secondStep > 1) {
                /** @type {?} */
                var seconds = this.buildSeconds({ hours: timeObj_1.hour, minutes: timeObj_1.minute });
                if (!seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.index === timeObj_1.second; }))) {
                    timeObj_1.second = 0;
                }
            }
            return (timeObj_1.hour || '00') + ":" + (timeObj_1.minute || '00') + ":" + (timeObj_1.second || '00');
        }
        return timeValue;
    };
    /**
     * @param {?} dateObj
     * @return {?}
     */
    CalendarComponent.prototype.checkTimeValue = /**
     * @param {?} dateObj
     * @return {?}
     */
    function (dateObj) {
        if (!this.opts.showTime) {
            return;
        }
        if (this.opts.hourStep > 1) {
            /** @type {?} */
            var hours = this.buildHours();
            if (!hours.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === parseInt('' + dateObj.hour, 10); }))) {
                dateObj.hour = 0;
            }
        }
        if (this.opts.minuteStep > 1) {
            /** @type {?} */
            var minutes = this.buildMinutes({ hours: dateObj.hour });
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === parseInt('' + dateObj.minute, 10); }))) {
                dateObj.minute = 0;
            }
        }
        if (this.opts.secondStep > 1) {
            /** @type {?} */
            var seconds = this.buildSeconds({ hours: dateObj.hour, minutes: dateObj.minute });
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.index === parseInt('' + dateObj.second, 10); }))) {
                dateObj.second = 0;
            }
        }
    };
    CalendarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-datepicker-calendar',
                    template: "<div class=\"f-datepicker-container\" #selectorEl *ngIf=\"!multiSelect\"\r\n    [ngStyle]=\"{\r\n        top: selectorPos.top + 'px',\r\n        left: selectorPos.left + 'px',\r\n        width: getWidth()\r\n    }\"\r\n    (keyup)=\"onCloseSelector($event)\"\r\n    tabindex=\"0\"\r\n    (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\"\r\n    [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\"\r\n>\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClicked($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours\"\r\n            [disabledMinutes]=\"disabledMinutes\"\r\n            [disabledSeconds]=\"disabledSeconds\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" *ngIf=\"opts.dateRange && opts.showType !== 4\">\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [visibleMonth]=\"visibleMonth_range\"\r\n            [selectMonth]=\"selectMonth_range\"\r\n            [selectYear]=\"selectYear_range\"\r\n            [prevViewDisabled]=\"prevViewDisabled_range\"\r\n            [nextViewDisabled]=\"nextViewDisabled_range\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled_range\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled_range\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked(true)\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked(true)\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth_range && !selectYear_range && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates_range\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (dayCellClicked)=\"onDayCellClicked($event, true)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave(true)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth_range\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, true)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave(true)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear_range\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event, true)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave(true)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue_range\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours2\"\r\n            [disabledMinutes]=\"disabledMinutes2\"\r\n            [disabledSeconds]=\"disabledSeconds2\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n            #endTimeRef\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-content\" *ngIf=\"!opts.dateRange && opts.viewType === 'together' && opts.showTime\" style=\"width: 190px;margin-left: 10px;\">\r\n\r\n        <div style=\"height: 41px;\r\n        border-bottom: 1px solid #E4E7EF;\r\n        text-align: center;\r\n        line-height: 40px;\r\n        font-size: 16px;\r\n        font-weight: 500;margin-bottom: 15px;\">{{ timeVlaue }}</div>\r\n\r\n        <time-picker-panel\r\n        [(ngModel)]=\"timeVlaue\"\r\n        [opened]=\"true\"\r\n        [inDatePicker]=\"true\"\r\n        [disabledHours]=\"disabledHours\"\r\n        [disabledMinutes]=\"disabledMinutes\"\r\n        [disabledSeconds]=\"disabledSeconds\"\r\n        [selectCurrentTimeWhenNull]=\"false\"\r\n        [hourStep]=\"opts.hourStep || 1\"\r\n        [minuteStep]=\"opts.minuteStep || 1\"\r\n        [secondStep]=\"opts.secondStep || 1\"\r\n        [format]=\"opts.timeFormat\"></time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\" *ngIf=\"opts.showTime || opts?.enableDynamic\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts?.enableDynamic\" style=\"text-align: left;\" (click)=\"onShowDynamicView($event)\">\r\n            {{ opts?.dynamicLocale.setting }}\r\n        </button>\r\n\r\n        <button (click)=\"onClickTimeBtn($event)\" class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts.showTime && opts.viewType === 'switch'\">\r\n            {{\r\n                selectTime\r\n                    ? opts.dateBtnText\r\n                        ? opts.dateBtnText\r\n                        : \"Select Date\"\r\n                    : opts.timeBtnText\r\n                    ? opts.timeBtnText\r\n                    : \"Select Time\"\r\n            }}\r\n        </button>\r\n        <button (click)=\"onClickOkBtn($event)\" class=\"btn btn-primary f-datepicker-makesure-btn\" *ngIf=\"opts.showTime\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;\" *ngIf=\"opts?.enableDynamic && !opts.showTime\">    \r\n            {{opts?.dynamicLocale.today}}\r\n        </button>\r\n    </div>\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"!opts.showTime && !opts?.enableDynamic && opts.showPresent && !opts.dateRange \">\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ (opts.showType === 1 || opts.showType === 4) ? opts?.dynamicLocale.today :  opts.showType === 2 ? opts?.dynamicLocale.presentMonth : opts?.dynamicLocale.presentYear }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"opts.showType === 4 && opts.showPresent\">\r\n        <button (click)=\"onSelectCurrentWeek($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ opts?.dynamicLocale.presentWeek }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>\r\n\r\n\r\n<div *ngIf=\"!multiSelect && opts?.enableDynamic\" class=\"f-datepicker-container\" #dynamicViewEle [ngStyle]=\"{\r\n    top: selectorPos.top + 'px',\r\n    left: (selectorPos.left) + 'px',\r\n    width: getWidth()\r\n}\"\r\nstyle=\"transition: all 0.2s ease 0s\"\r\n[style.display]=\"(opts?.enableDynamic && opts?.showDynamicView ) ? '': 'none'\"\r\n(click)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"f-datepicker-content\" >\r\n        \r\n        <div class=\"f-datepicker-header\" style=\"justify-content: unset;\" >\r\n            <div class=\"f-datepicker-prev-btn\" style=\"padding-left: 8px;position: absolute;\">\r\n                <button type=\"button\" class=\"f-datepicker-header-btn\" (click)=\"onShowDatePanel($event)\">\r\n                    <i class=\"k-icon k-i-arrow-chevron-left\"></i>\r\n                </button>\r\n            </div>\r\n            <div class=\"f-datepicker-monthYearText\" style=\"width: 100%;align-items: center;display: flex;justify-content: center;height: 40px;\">\r\n                {{opts.dynamicLocale.setting}}\r\n            </div>\r\n        </div>\r\n        <lib-dynamic-view #dynamicview [locale]=\"opts?.dynamicLocale\" (valueChange)=\"onDynamicValueChanged($event)\"\r\n            [data]=\"opts?.dynamicValue\" [futureMaxDays]=\"opts?.futureMaxDays || 30\" [previousMaxDays]=\"opts?.previousMaxDays || 30\"></lib-dynamic-view>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button (click)=\"onDynamicOkClick($event, dynamicview)\" class=\"btn btn-primary f-datepicker-makesure-btn\" [disabled]=\"btnDynamicDisabled\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"f-datepicker-container\" tabindex=\"0\" #selectorEl *ngIf=\"multiSelect\"\r\n    [ngStyle]=\"{top: selectorPos.top + 'px',left: selectorPos.left + 'px',width: getWidth()}\"\r\n    (keyup)=\"onCloseSelector($event)\" (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\" [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\">\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-multi-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDates]=\"selectedDates\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClickedForMultiDates($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-multi-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" style=\"width: 198px;border-left: 1px solid #E4E7EF;\">\r\n        <multi-days [selectedDates]=\"selectedDates\" (clicked)=\"onSelectDateClicked($event)\" \r\n        (removed)=\"onMultiDateRemoved($event)\" (clear)=\"onMultiDateClear($event)\" [locales]=\"opts.mulstiDatesLocale\"></multi-days>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"showGoBackToday()\" (click)=\"gototodayView($event)\"> {{ opts.mulstiDatesLocale.backtotoday || '\u56DE\u5230\u4ECA\u5929'}} </button>\r\n        <button class=\"btn btn-primary f-datepicker-makesure-btn\" (click)=\"onMultiDatesOkClicked($event)\">    \r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>",
                    providers: [UtilService],
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    CalendarComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: UtilService }
    ]; };
    CalendarComponent.propDecorators = {
        selectorEl: [{ type: ViewChild, args: ['selectorEl',] }],
        styleEl: [{ type: ViewChild, args: ['styleEl',] }],
        endTimeRef: [{ type: ViewChild, args: ['endTimeRef',] }],
        dynamicViewEle: [{ type: ViewChild, args: ['dynamicViewEle',] }],
        position: [{ type: HostBinding, args: ['style.position',] }],
        dynamicViewShow: [{ type: Output }]
    };
    return CalendarComponent;
}());
export { CalendarComponent };
if (false) {
    /** @type {?} */
    CalendarComponent.prototype.selectorEl;
    /** @type {?} */
    CalendarComponent.prototype.styleEl;
    /** @type {?} */
    CalendarComponent.prototype.endTimeRef;
    /** @type {?} */
    CalendarComponent.prototype.dynamicViewEle;
    /** @type {?} */
    CalendarComponent.prototype.position;
    /** @type {?} */
    CalendarComponent.prototype.dynamicViewShow;
    /** @type {?} */
    CalendarComponent.prototype.dateHlp;
    /** @type {?} */
    CalendarComponent.prototype.opts;
    /** @type {?} */
    CalendarComponent.prototype.visibleMonth;
    /** @type {?} */
    CalendarComponent.prototype.visibleMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarComponent.prototype.selectedDateRange;
    /** @type {?} */
    CalendarComponent.prototype.selectedWeek;
    /** @type {?} */
    CalendarComponent.prototype.weekDays;
    /** @type {?} */
    CalendarComponent.prototype.dates;
    /** @type {?} */
    CalendarComponent.prototype.dates_range;
    /** @type {?} */
    CalendarComponent.prototype.months;
    /** @type {?} */
    CalendarComponent.prototype.months_range;
    /** @type {?} */
    CalendarComponent.prototype.years;
    /** @type {?} */
    CalendarComponent.prototype.years_range;
    /** @type {?} */
    CalendarComponent.prototype.timeVlaue;
    /** @type {?} */
    CalendarComponent.prototype.timeVlaue_range;
    /** @type {?} */
    CalendarComponent.prototype.multiSelect;
    /** @type {?} */
    CalendarComponent.prototype.dayIdx;
    /** @type {?} */
    CalendarComponent.prototype.weekDayOpts;
    /** @type {?} */
    CalendarComponent.prototype.selectMonth;
    /** @type {?} */
    CalendarComponent.prototype.selectMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectYear;
    /** @type {?} */
    CalendarComponent.prototype.selectYear_range;
    /** @type {?} */
    CalendarComponent.prototype.selectTime;
    /** @type {?} */
    CalendarComponent.prototype.dateChanged;
    /** @type {?} */
    CalendarComponent.prototype.calendarViewChanged;
    /** @type {?} */
    CalendarComponent.prototype.rangeDateSelection;
    /** @type {?} */
    CalendarComponent.prototype.multiDatesChanged;
    /** @type {?} */
    CalendarComponent.prototype.closedByEsc;
    /** @type {?} */
    CalendarComponent.prototype.selectorPos;
    /** @type {?} */
    CalendarComponent.prototype.scrollDiff;
    /** @type {?} */
    CalendarComponent.prototype.prevViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.nextViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.prevDobViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.nextDobViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.prevViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.nextViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.prevDobViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.nextDobViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.showNotify;
    /**
     * 多选
     * @type {?}
     */
    CalendarComponent.prototype.selectedDates;
    /** @type {?} */
    CalendarComponent.prototype.disabledHours;
    /** @type {?} */
    CalendarComponent.prototype.disabledMinutes;
    /** @type {?} */
    CalendarComponent.prototype.disabledSeconds;
    /** @type {?} */
    CalendarComponent.prototype.disabledHours2;
    /** @type {?} */
    CalendarComponent.prototype.disabledMinutes2;
    /** @type {?} */
    CalendarComponent.prototype.disabledSeconds2;
    /** @type {?} */
    CalendarComponent.prototype.btnDynamicDisabled;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.utilService;
}
//# sourceMappingURL=data:application/json;base64,