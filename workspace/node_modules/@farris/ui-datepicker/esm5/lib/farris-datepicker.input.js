/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, ViewContainerRef, Renderer2, ChangeDetectorRef, ComponentFactoryResolver, forwardRef, EventEmitter, Output, HostListener, NgZone } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { CalendarComponent } from './components/calendar/calendar.component';
import { UtilService, DatepickerLocaleService, DefaultConfigService } from './services/public-api';
import { KeyCode, CalToggle, Year, ResetDateType } from './enums/public-api';
import { KEYUP, BLUR, EMPTY_STR, DISABLED, CLICK, VALUE, OPTIONS, DEFAULT_MONTH, LOCALE, OBJECT, PX } from './constants/constants';
/** @type {?} */
var NGX_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return FarrisDatePickerDirective; })),
    multi: true
};
/** @type {?} */
var NGX_DP_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return FarrisDatePickerDirective; })),
    multi: true
};
var FarrisDatePickerDirective = /** @class */ (function () {
    function FarrisDatePickerDirective(localeService, utilService, vcRef, cfr, renderer, cdr, elem, config, zone) {
        var _this = this;
        this.localeService = localeService;
        this.utilService = utilService;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.renderer = renderer;
        this.cdr = cdr;
        this.elem = elem;
        this.config = config;
        this.zone = zone;
        this.dateChanged = new EventEmitter();
        this.inputFieldChanged = new EventEmitter();
        this.calendarViewChanged = new EventEmitter();
        this.calendarToggle = new EventEmitter();
        this.rangeDateSelection = new EventEmitter();
        this.cRef = null;
        this.inputText = '';
        this.preventClose = false;
        this.disabled = false;
        // scrollFn: any = (e) => {
        //     console.log((e.target as any).scrollTop);
        // };
        this.onChangeCb = (/**
         * @return {?}
         */
        function () { });
        this.onTouchedCb = (/**
         * @return {?}
         */
        function () { });
        // wrapper with arrow function to preserve the use of 'this' word
        this.onClickWrapper = (/**
         * @param {?} ev
         * @return {?}
         */
        function (ev) {
            _this.onClick(ev);
        });
        this.opts = this.config.getDefaultConfig();
        this.parseOptions(this.opts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.onKeyUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (this.ignoreKeyPress(keyCode)) {
            return;
        }
        else if (keyCode === KeyCode.esc) {
            this.closeSelector(CalToggle.CloseByEsc);
        }
        else {
            var value = this.elem.nativeElement.value;
            /** @type {?} */
            var valid = false;
            if (!this.opts.dateRange) {
                /** @type {?} */
                var date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                var _a = this.utilService.isDateValidDateRange(value, this.opts), begin = _a.begin, end = _a.end;
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            this.emitInputFieldChanged(value, valid);
        }
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.onBlur = /**
     * @return {?}
     */
    function () {
        var _a = this.opts, inputFieldValidation = _a.inputFieldValidation, dateRange = _a.dateRange;
        if (inputFieldValidation) {
            var value = this.elem.nativeElement.value;
            /** @type {?} */
            var valid = false;
            if (!dateRange) {
                /** @type {?} */
                var date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                /** @type {?} */
                var _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
                var begin = _dateRange.begin, end = _dateRange.end;
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            if (!valid && this.inputText !== value) {
                this.clearDate();
            }
            this.onChangeCb(value);
        }
        this.onTouchedCb();
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.onClick = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        if (this.opts.closeSelectorOnDocumentClick &&
            !this.preventClose &&
            evt.target &&
            this.cRef !== null &&
            this.elem.nativeElement !== evt.target &&
            !this.cRef.location.nativeElement.contains(evt.target) &&
            !this.disabled) {
            this.closeSelector(CalToggle.CloseByOutClick);
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.hasOwnProperty(LOCALE)) {
            this.setLocaleOptions();
        }
        if (changes.hasOwnProperty(DEFAULT_MONTH)) {
            /** @type {?} */
            var dm = changes[DEFAULT_MONTH].currentValue;
            if (typeof dm === OBJECT) {
                dm = dm.defMonth;
            }
            this.defaultMonth = dm;
        }
        if (changes.hasOwnProperty(OPTIONS)) {
            this.parseOptions(changes[OPTIONS].currentValue);
        }
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.closeCalendar();
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.setLocaleOptions = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var opts = this.localeService.getLocaleOptions(this.locale);
        Object.keys(opts).forEach((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            ((/** @type {?} */ (_this.opts)))[k] = opts[k];
        }));
    };
    /**
     * @param {?} opts
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.parseOptions = /**
     * @param {?} opts
     * @return {?}
     */
    function (opts) {
        var _this = this;
        if (opts !== undefined) {
            Object.keys(opts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                if (opts[k] !== undefined && opts[k] !== '') {
                    ((/** @type {?} */ (_this.opts)))[k] = opts[k];
                }
            }));
        }
        if (this.opts.minYear < Year.min) {
            this.opts.minYear = Year.min;
        }
        if (this.opts.maxYear > Year.max) {
            this.opts.maxYear = Year.max;
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.formatDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        var _a = this.opts, dateRange = _a.dateRange, dateFormat = _a.dateFormat, monthLabels = _a.monthLabels, dateRangeDatesDelimiter = _a.dateRangeDatesDelimiter, returnFormat = _a.returnFormat;
        if (!dateRange) {
            // Single date mode
            /** @type {?} */
            var date = this.utilService.isDateValid(value, this.opts);
            return this.utilService.getDateModel(date, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
        else {
            // Date range mode
            /** @type {?} */
            var _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            return this.utilService.getDateModel(null, _dateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (this.disabled) {
            return;
        }
        if (value) {
            value = this.formatDate(value);
        }
        if (!value) {
            this.setInputValue(EMPTY_STR);
            this.emitInputFieldChanged(EMPTY_STR, false);
            if (this.cRef !== null) {
                this.cRef.instance.resetDateValue(ResetDateType.both);
            }
        }
        else if (value.isRange === false && value.singleDate) {
            // single date
            var _a = value.singleDate, date = _a.date, formatted = _a.formatted;
            /** @type {?} */
            var valid = this.utilService.isInitializedDate(date);
            if (valid) {
                this.setInputValue(formatted);
                this.emitInputFieldChanged(formatted, valid);
                if (this.cRef !== null) {
                    this.cRef.instance.resetDateValue(ResetDateType.dateRange);
                }
            }
        }
        else if (value.isRange === true && value.dateRange) {
            // date range
            var _b = value.dateRange, beginDate = _b.beginDate, endDate = _b.endDate, formatted = _b.formatted;
            if (beginDate && endDate) {
                /** @type {?} */
                var valid = this.utilService.isInitializedDate(beginDate) &&
                    this.utilService.isInitializedDate(endDate);
                if (valid) {
                    this.setInputValue(formatted);
                    this.emitInputFieldChanged(formatted, valid);
                    if (this.cRef !== null) {
                        this.cRef.instance.resetDateValue(ResetDateType.singleDate);
                    }
                }
            }
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChangeCb = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouchedCb = fn;
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
        this.renderer.setProperty(this.elem.nativeElement, DISABLED, isDisabled);
        if (isDisabled) {
            this.closeCalendar();
        }
    };
    /**
     * @param {?} c
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.validate = /**
     * @param {?} c
     * @return {?}
     */
    function (c) {
        return null;
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.openCalendar = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.disabled) {
            return;
        }
        this.preventClose = true;
        this.cdr.detectChanges();
        if (this.cRef === null) {
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.appendSelector(this.cRef.location.nativeElement);
            this.cRef.instance.initialize(this.opts, this.defaultMonth, this.getSelectorPosition(this.elem.nativeElement), this.elem.nativeElement.value, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            function (dm, close) {
                _this.focusToInput();
                _this.updateModel(dm);
                if (close) {
                    _this.closeSelector(CalToggle.CloseByDateSel);
                }
                _this.emitDateChanged(dm);
                _this.emitInputFieldChanged(_this.utilService.getFormattedDate(dm), true);
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            function (cvc) {
                _this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            function (rds) {
                _this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            function () {
                _this.closeSelector(CalToggle.CloseByEsc);
            }));
            this.emitCalendarToggle(CalToggle.Open);
            this.cdr.detectChanges();
        }
        else {
            this.appendSelector(this.cRef.location.nativeElement);
        }
        this.preventClose = false;
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.closeCalendar = /**
     * @return {?}
     */
    function () {
        this.closeSelector(CalToggle.CloseByCalBtn);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.toggleCalendar = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        if (this.cRef === null) {
            document.addEventListener(CLICK, this.onClickWrapper, true);
            this.openCalendar();
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
        }
        else {
            /** @type {?} */
            var flag_1 = true;
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    function (el) {
                        if (el === _this.cRef.location.nativeElement) {
                            flag_1 = false;
                        }
                    }));
                }
            }
            if (flag_1) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.openCalendar();
            }
            else {
                document.removeEventListener(CLICK, this.onClickWrapper);
                this.closeSelector(CalToggle.CloseByCalBtn);
                this.renderer.setStyle(container, 'pointer-events', '');
            }
        }
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.clearDate = /**
     * @return {?}
     */
    function () {
        if (this.disabled) {
            return;
        }
        this.setInputValue(EMPTY_STR);
        this.emitDateChanged({
            isRange: this.opts.dateRange,
            singleDate: {
                date: this.utilService.resetDate(),
                jsDate: null,
                formatted: EMPTY_STR,
                epoc: 0
            },
            dateRange: {
                beginDate: this.utilService.resetDate(),
                beginJsDate: null,
                beginEpoc: 0,
                endDate: this.utilService.resetDate(),
                endJsDate: null,
                endEpoc: 0,
                formatted: EMPTY_STR
            }
        });
        this.onChangeCb(null);
        this.onTouchedCb();
        this.closeSelector(CalToggle.CloseByCalBtn);
    };
    /**
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.isDateValid = /**
     * @return {?}
     */
    function () {
        var value = this.elem.nativeElement.value;
        if (value !== EMPTY_STR) {
            /** @type {?} */
            var date = this.utilService.isDateValid(value, this.opts);
            if (this.utilService.isInitializedDate(date)) {
                this.emitInputFieldChanged(value, true);
                return true;
            }
        }
        this.emitInputFieldChanged(value, false);
        return false;
    };
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.ignoreKeyPress = /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    function (keyCode) {
        // keyCode === KeyCode.tab ||
        return (keyCode === KeyCode.leftArrow ||
            keyCode === KeyCode.rightArrow ||
            keyCode === KeyCode.upArrow ||
            keyCode === KeyCode.downArrow ||
            keyCode === KeyCode.shift);
    };
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.closeSelector = /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    function (reason) {
        if (this.cRef !== null) {
            this.vcRef.remove(this.vcRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            this.cdr.detectChanges();
            this.emitCalendarToggle(reason);
            /** @type {?} */
            var container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', '');
        }
    };
    /**
     * @private
     * @param {?} model
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.updateModel = /**
     * @private
     * @param {?} model
     * @return {?}
     */
    function (model) {
        this.setInputValue(this.utilService.getFormattedDate(model));
        this.onChangeCb(this.utilService.getFormattedDate(model));
        this.onTouchedCb();
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.setInputValue = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.inputText = value;
        this.renderer.setProperty(this.elem.nativeElement, VALUE, value);
    };
    /**
     * @private
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.focusToInput = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.opts.focusInputOnDateSelect) {
            this.elem.nativeElement.focus();
        }
    };
    /**
     * @private
     * @param {?} dateModel
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.emitDateChanged = /**
     * @private
     * @param {?} dateModel
     * @return {?}
     */
    function (dateModel) {
        this.dateChanged.emit(dateModel);
    };
    /**
     * @private
     * @param {?} value
     * @param {?} valid
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.emitInputFieldChanged = /**
     * @private
     * @param {?} value
     * @param {?} valid
     * @return {?}
     */
    function (value, valid) {
        this.inputFieldChanged.emit({
            value: value,
            dateFormat: this.opts.dateFormat,
            valid: valid
        });
    };
    /**
     * @private
     * @param {?} cvc
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.emitCalendarChanged = /**
     * @private
     * @param {?} cvc
     * @return {?}
     */
    function (cvc) {
        this.calendarViewChanged.emit(cvc);
    };
    /**
     * @private
     * @param {?} rds
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.emitRangeDateSelection = /**
     * @private
     * @param {?} rds
     * @return {?}
     */
    function (rds) {
        this.rangeDateSelection.emit(rds);
    };
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.emitCalendarToggle = /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    function (reason) {
        this.calendarToggle.emit(reason);
    };
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.jsDateToMyDate = /**
     * @private
     * @param {?} date
     * @return {?}
     */
    function (date) {
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
    };
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.appendSelector = /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                function (el) {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.appendChild(elem);
    };
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.getSelectorPosition = /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    function (elem) {
        /** @type {?} */
        var top = 0;
        /** @type {?} */
        var left = 0;
        /** @type {?} */
        var _selectorHeight = 0;
        /** @type {?} */
        var _selectorWidth = 0;
        var _a = this.opts, selectorHeight = _a.selectorHeight, selectorWidth = _a.selectorWidth, showTime = _a.showTime, dateRange = _a.dateRange;
        /** @type {?} */
        var b = document.body.getBoundingClientRect();
        /** @type {?} */
        var e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        var position = 'bottom';
        if (dateRange) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        if (showTime) {
            _selectorHeight = this.getSelectorDimension(selectorHeight) + 36;
        }
        else {
            _selectorHeight = this.getSelectorDimension(selectorHeight);
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        return { top: top, left: left, position: position };
    };
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    FarrisDatePickerDirective.prototype.getSelectorDimension = /**
     * @private
     * @param {?} value
     * @return {?}
     */
    function (value) {
        return Number(value.replace(PX, EMPTY_STR));
    };
    FarrisDatePickerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-datepicker]',
                    exportAs: 'farris-datepicker',
                    providers: [
                        UtilService,
                        DatepickerLocaleService,
                        DefaultConfigService,
                        NGX_DP_VALUE_ACCESSOR,
                        NGX_DP_VALIDATORS
                    ]
                },] }
    ];
    /** @nocollapse */
    FarrisDatePickerDirective.ctorParameters = function () { return [
        { type: DatepickerLocaleService },
        { type: UtilService },
        { type: ViewContainerRef },
        { type: ComponentFactoryResolver },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: ElementRef },
        { type: DefaultConfigService },
        { type: NgZone }
    ]; };
    FarrisDatePickerDirective.propDecorators = {
        options: [{ type: Input }],
        locale: [{ type: Input }],
        defaultMonth: [{ type: Input }],
        dateChanged: [{ type: Output }],
        inputFieldChanged: [{ type: Output }],
        calendarViewChanged: [{ type: Output }],
        calendarToggle: [{ type: Output }],
        rangeDateSelection: [{ type: Output }],
        onKeyUp: [{ type: HostListener, args: [KEYUP, ['$event'],] }],
        onBlur: [{ type: HostListener, args: [BLUR,] }]
    };
    return FarrisDatePickerDirective;
}());
export { FarrisDatePickerDirective };
if (false) {
    /** @type {?} */
    FarrisDatePickerDirective.prototype.options;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.locale;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.defaultMonth;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.dateChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.inputFieldChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.calendarViewChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.calendarToggle;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.rangeDateSelection;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.inputText;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.preventClose;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.opts;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.onChangeCb;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.onTouchedCb;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.onClickWrapper;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,