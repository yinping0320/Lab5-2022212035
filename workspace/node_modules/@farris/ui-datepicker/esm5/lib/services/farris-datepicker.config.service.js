/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Year, DefaultView, ShowType } from '../enums/public-api';
var DefaultConfigService = /** @class */ (function () {
    function DefaultConfigService() {
        this.defaultConfig = {
            dateRange: false,
            dayLabels: {
                su: 'Sun',
                mo: 'Mon',
                tu: 'Tue',
                we: 'Wed',
                th: 'Thu',
                fr: 'Fri',
                sa: 'Sat'
            },
            monthLabels: {
                1: 'Jan',
                2: 'Feb',
                3: 'Mar',
                4: 'Apr',
                5: 'May',
                6: 'Jun',
                7: 'Jul',
                8: 'Aug',
                9: 'Sep',
                10: 'Oct',
                11: 'Nov',
                12: 'Dec'
            },
            dateFormat: 'yyyy-MM-dd',
            returnFormat: 'yyyy-MM-dd',
            defaultView: DefaultView.Date,
            showType: ShowType.all,
            firstDayOfWeek: 'mo',
            satHighlight: false,
            sunHighlight: false,
            highlightDates: [],
            markCurrentDay: true,
            markCurrentMonth: true,
            markCurrentYear: true,
            monthSelector: true,
            yearSelector: true,
            disableHeaderButtons: true,
            showWeekNumbers: false,
            selectorHeight: '295px',
            selectorWidth: '287px',
            disableUntil: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableSince: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableDates: [],
            disableDateRanges: [],
            disableWeekends: false,
            disableWeekdays: [],
            enableDates: [],
            markDates: [],
            markWeekends: { marked: false, color: '' },
            closeSelectorOnDateSelect: true,
            closeSelectorOnDocumentClick: true,
            minYear: Year.min,
            maxYear: Year.max,
            focusInputOnDateSelect: true,
            moveFocusByArrowKeys: true,
            dateRangeDatesDelimiter: ' - ',
            inputFieldValidation: true,
            stylesData: { selector: '', styles: '' },
            ariaLabelPrevMonth: 'Previous Month',
            ariaLabelNextMonth: 'Next Month',
            shortcuts: [],
            weekText: 'Week'
        };
    }
    /**
     * @return {?}
     */
    DefaultConfigService.prototype.getDefaultConfig = /**
     * @return {?}
     */
    function () {
        return this.defaultConfig;
    };
    DefaultConfigService.decorators = [
        { type: Injectable }
    ];
    return DefaultConfigService;
}());
export { DefaultConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultConfigService.prototype.defaultConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWRhdGVwaWNrZXIuY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmFycmlzLWRhdGVwaWNrZXIuY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbEU7SUFBQTtRQUVZLGtCQUFhLEdBQWU7WUFDaEMsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFO2dCQUNQLEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2FBQ1o7WUFDRCxXQUFXLEVBQUU7Z0JBQ1QsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLEtBQUs7YUFDWjtZQUNELFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFdBQVcsRUFBRSxXQUFXLENBQUMsSUFBSTtZQUM3QixRQUFRLEVBQUUsUUFBUSxDQUFDLEdBQUc7WUFDdEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsY0FBYyxFQUFFLEVBQUU7WUFDbEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixlQUFlLEVBQUUsSUFBSTtZQUNyQixhQUFhLEVBQUUsSUFBSTtZQUNuQixZQUFZLEVBQUUsSUFBSTtZQUNsQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLGNBQWMsRUFBRSxPQUFPO1lBQ3ZCLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDO1lBQ3BFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDO1lBQ3BFLFlBQVksRUFBRSxFQUFFO1lBQ2hCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsZUFBZSxFQUFFLEVBQUU7WUFDbkIsV0FBVyxFQUFFLEVBQUU7WUFDZixTQUFTLEVBQUUsRUFBRTtZQUNiLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMxQyx5QkFBeUIsRUFBRSxJQUFJO1lBQy9CLDRCQUE0QixFQUFFLElBQUk7WUFDbEMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRztZQUNqQixzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsdUJBQXVCLEVBQUUsS0FBSztZQUM5QixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtZQUN4QyxrQkFBa0IsRUFBRSxnQkFBZ0I7WUFDcEMsa0JBQWtCLEVBQUUsWUFBWTtZQUNoQyxTQUFTLEVBQUUsRUFBRTtZQUNiLFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUM7SUFLTixDQUFDOzs7O0lBSFUsK0NBQWdCOzs7SUFBdkI7UUFDSSxPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDOUIsQ0FBQzs7Z0JBdEVKLFVBQVU7O0lBdUVYLDJCQUFDO0NBQUEsQUF2RUQsSUF1RUM7U0F0RVksb0JBQW9COzs7Ozs7SUFDN0IsNkNBZ0VFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBJTXlPcHRpb25zIH0gZnJvbSAnLi4vaW50ZXJmYWNlcy9wdWJsaWMtYXBpJztcclxuaW1wb3J0IHsgWWVhciwgRGVmYXVsdFZpZXcsIFNob3dUeXBlIH0gZnJvbSAnLi4vZW51bXMvcHVibGljLWFwaSc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29uZmlnU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGRlZmF1bHRDb25maWc6IElNeU9wdGlvbnMgPSB7XHJcbiAgICAgICAgZGF0ZVJhbmdlOiBmYWxzZSxcclxuICAgICAgICBkYXlMYWJlbHM6IHtcclxuICAgICAgICAgICAgc3U6ICdTdW4nLFxyXG4gICAgICAgICAgICBtbzogJ01vbicsXHJcbiAgICAgICAgICAgIHR1OiAnVHVlJyxcclxuICAgICAgICAgICAgd2U6ICdXZWQnLFxyXG4gICAgICAgICAgICB0aDogJ1RodScsXHJcbiAgICAgICAgICAgIGZyOiAnRnJpJyxcclxuICAgICAgICAgICAgc2E6ICdTYXQnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtb250aExhYmVsczoge1xyXG4gICAgICAgICAgICAxOiAnSmFuJyxcclxuICAgICAgICAgICAgMjogJ0ZlYicsXHJcbiAgICAgICAgICAgIDM6ICdNYXInLFxyXG4gICAgICAgICAgICA0OiAnQXByJyxcclxuICAgICAgICAgICAgNTogJ01heScsXHJcbiAgICAgICAgICAgIDY6ICdKdW4nLFxyXG4gICAgICAgICAgICA3OiAnSnVsJyxcclxuICAgICAgICAgICAgODogJ0F1ZycsXHJcbiAgICAgICAgICAgIDk6ICdTZXAnLFxyXG4gICAgICAgICAgICAxMDogJ09jdCcsXHJcbiAgICAgICAgICAgIDExOiAnTm92JyxcclxuICAgICAgICAgICAgMTI6ICdEZWMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlRm9ybWF0OiAneXl5eS1NTS1kZCcsXHJcbiAgICAgICAgcmV0dXJuRm9ybWF0OiAneXl5eS1NTS1kZCcsXHJcbiAgICAgICAgZGVmYXVsdFZpZXc6IERlZmF1bHRWaWV3LkRhdGUsXHJcbiAgICAgICAgc2hvd1R5cGU6IFNob3dUeXBlLmFsbCxcclxuICAgICAgICBmaXJzdERheU9mV2VlazogJ21vJyxcclxuICAgICAgICBzYXRIaWdobGlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIHN1bkhpZ2hsaWdodDogZmFsc2UsXHJcbiAgICAgICAgaGlnaGxpZ2h0RGF0ZXM6IFtdLFxyXG4gICAgICAgIG1hcmtDdXJyZW50RGF5OiB0cnVlLFxyXG4gICAgICAgIG1hcmtDdXJyZW50TW9udGg6IHRydWUsXHJcbiAgICAgICAgbWFya0N1cnJlbnRZZWFyOiB0cnVlLFxyXG4gICAgICAgIG1vbnRoU2VsZWN0b3I6IHRydWUsXHJcbiAgICAgICAgeWVhclNlbGVjdG9yOiB0cnVlLFxyXG4gICAgICAgIGRpc2FibGVIZWFkZXJCdXR0b25zOiB0cnVlLFxyXG4gICAgICAgIHNob3dXZWVrTnVtYmVyczogZmFsc2UsXHJcbiAgICAgICAgc2VsZWN0b3JIZWlnaHQ6ICcyOTVweCcsXHJcbiAgICAgICAgc2VsZWN0b3JXaWR0aDogJzI4N3B4JyxcclxuICAgICAgICBkaXNhYmxlVW50aWw6IHsgeWVhcjogMCwgbW9udGg6IDAsIGRheTogMCAsaG91cjowLG1pbnV0ZTowLHNlY29uZDowfSxcclxuICAgICAgICBkaXNhYmxlU2luY2U6IHsgeWVhcjogMCwgbW9udGg6IDAsIGRheTogMCAsaG91cjowLG1pbnV0ZTowLHNlY29uZDowfSxcclxuICAgICAgICBkaXNhYmxlRGF0ZXM6IFtdLFxyXG4gICAgICAgIGRpc2FibGVEYXRlUmFuZ2VzOiBbXSxcclxuICAgICAgICBkaXNhYmxlV2Vla2VuZHM6IGZhbHNlLFxyXG4gICAgICAgIGRpc2FibGVXZWVrZGF5czogW10sXHJcbiAgICAgICAgZW5hYmxlRGF0ZXM6IFtdLFxyXG4gICAgICAgIG1hcmtEYXRlczogW10sXHJcbiAgICAgICAgbWFya1dlZWtlbmRzOiB7IG1hcmtlZDogZmFsc2UsIGNvbG9yOiAnJyB9LFxyXG4gICAgICAgIGNsb3NlU2VsZWN0b3JPbkRhdGVTZWxlY3Q6IHRydWUsXHJcbiAgICAgICAgY2xvc2VTZWxlY3Rvck9uRG9jdW1lbnRDbGljazogdHJ1ZSxcclxuICAgICAgICBtaW5ZZWFyOiBZZWFyLm1pbixcclxuICAgICAgICBtYXhZZWFyOiBZZWFyLm1heCxcclxuICAgICAgICBmb2N1c0lucHV0T25EYXRlU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgIG1vdmVGb2N1c0J5QXJyb3dLZXlzOiB0cnVlLFxyXG4gICAgICAgIGRhdGVSYW5nZURhdGVzRGVsaW1pdGVyOiAnIC0gJyxcclxuICAgICAgICBpbnB1dEZpZWxkVmFsaWRhdGlvbjogdHJ1ZSxcclxuICAgICAgICBzdHlsZXNEYXRhOiB7IHNlbGVjdG9yOiAnJywgc3R5bGVzOiAnJyB9LFxyXG4gICAgICAgIGFyaWFMYWJlbFByZXZNb250aDogJ1ByZXZpb3VzIE1vbnRoJyxcclxuICAgICAgICBhcmlhTGFiZWxOZXh0TW9udGg6ICdOZXh0IE1vbnRoJyxcclxuICAgICAgICBzaG9ydGN1dHM6IFtdLFxyXG4gICAgICAgIHdlZWtUZXh0OiAnV2VlaydcclxuICAgIH07XHJcblxyXG4gICAgcHVibGljIGdldERlZmF1bHRDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVmYXVsdENvbmZpZztcclxuICAgIH1cclxufVxyXG4iXX0=