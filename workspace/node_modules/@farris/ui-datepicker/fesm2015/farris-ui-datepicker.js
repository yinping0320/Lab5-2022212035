import { CommonModule } from '@angular/common';
import { orderBy, flatten } from 'lodash-es';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl, FormsModule } from '@angular/forms';
import { differenceInSeconds, isDate, isValid, parse } from 'date-fns';
import { TimePickerModule } from '@farris/ui-time-picker';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { PopoverModule } from '@farris/ui-popover';
import { DateTimeHelperService, DateHelperModule } from '@farris/ui-common/date';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { FarrisFormsModule } from '@farris/ui-forms';
import { CommonUtils, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { BehaviorSubject } from 'rxjs';
import { Injectable, Component, ElementRef, ViewEncapsulation, ViewChild, Renderer2, ChangeDetectorRef, HostBinding, Output, EventEmitter, Input, Directive, ViewContainerRef, ComponentFactoryResolver, forwardRef, HostListener, NgZone, Injector, ApplicationRef, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const CalToggle = {
    Open: 1,
    CloseByDateSel: 2,
    CloseByCalBtn: 3,
    CloseByOutClick: 4,
    CloseByEsc: 5,
};
CalToggle[CalToggle.Open] = 'Open';
CalToggle[CalToggle.CloseByDateSel] = 'CloseByDateSel';
CalToggle[CalToggle.CloseByCalBtn] = 'CloseByCalBtn';
CalToggle[CalToggle.CloseByOutClick] = 'CloseByOutClick';
CalToggle[CalToggle.CloseByEsc] = 'CloseByEsc';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const DefaultView = {
    Date: 1,
    Month: 2,
    Year: 3,
};
DefaultView[DefaultView.Date] = 'Date';
DefaultView[DefaultView.Month] = 'Month';
DefaultView[DefaultView.Year] = 'Year';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const KeyCode = {
    enter: 13,
    esc: 27,
    space: 32,
    leftArrow: 37,
    upArrow: 38,
    rightArrow: 39,
    downArrow: 40,
    tab: 9,
    shift: 16,
};
KeyCode[KeyCode.enter] = 'enter';
KeyCode[KeyCode.esc] = 'esc';
KeyCode[KeyCode.space] = 'space';
KeyCode[KeyCode.leftArrow] = 'leftArrow';
KeyCode[KeyCode.upArrow] = 'upArrow';
KeyCode[KeyCode.rightArrow] = 'rightArrow';
KeyCode[KeyCode.downArrow] = 'downArrow';
KeyCode[KeyCode.tab] = 'tab';
KeyCode[KeyCode.shift] = 'shift';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const KeyName = {
    enter: 'Enter',
    esc: 'Escape',
    space: ' ',
    leftArrow: 'ArrowLeft',
    upArrow: 'ArrowUp',
    rightArrow: 'ArrowRight',
    downArrow: 'ArrowDown',
    tab: 'Tab',
    shift: 'Shift',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const MonthId = {
    prev: 1,
    curr: 2,
    next: 3,
};
MonthId[MonthId.prev] = 'prev';
MonthId[MonthId.curr] = 'curr';
MonthId[MonthId.next] = 'next';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ResetDateType = {
    both: 0,
    singleDate: 1,
    dateRange: 2,
};
ResetDateType[ResetDateType.both] = 'both';
ResetDateType[ResetDateType.singleDate] = 'singleDate';
ResetDateType[ResetDateType.dateRange] = 'dateRange';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const ShowType = {
    all: 1,
    noDate: 2,
    noDateAndMonth: 3,
    selectWeek: 4,
};
ShowType[ShowType.all] = 'all';
ShowType[ShowType.noDate] = 'noDate';
ShowType[ShowType.noDateAndMonth] = 'noDateAndMonth';
ShowType[ShowType.selectWeek] = 'selectWeek';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const Year = {
    min: 1000,
    max: 9999,
};
Year[Year.min] = 'min';
Year[Year.max] = 'max';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DefaultConfigService {
    constructor() {
        this.defaultConfig = {
            dateRange: false,
            dayLabels: {
                su: 'Sun',
                mo: 'Mon',
                tu: 'Tue',
                we: 'Wed',
                th: 'Thu',
                fr: 'Fri',
                sa: 'Sat'
            },
            monthLabels: {
                1: 'Jan',
                2: 'Feb',
                3: 'Mar',
                4: 'Apr',
                5: 'May',
                6: 'Jun',
                7: 'Jul',
                8: 'Aug',
                9: 'Sep',
                10: 'Oct',
                11: 'Nov',
                12: 'Dec'
            },
            dateFormat: 'yyyy-MM-dd',
            returnFormat: 'yyyy-MM-dd',
            defaultView: DefaultView.Date,
            showType: ShowType.all,
            firstDayOfWeek: 'mo',
            satHighlight: false,
            sunHighlight: false,
            highlightDates: [],
            markCurrentDay: true,
            markCurrentMonth: true,
            markCurrentYear: true,
            monthSelector: true,
            yearSelector: true,
            disableHeaderButtons: true,
            showWeekNumbers: false,
            selectorHeight: '295px',
            selectorWidth: '287px',
            disableUntil: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableSince: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableDates: [],
            disableDateRanges: [],
            disableWeekends: false,
            disableWeekdays: [],
            enableDates: [],
            markDates: [],
            markWeekends: { marked: false, color: '' },
            closeSelectorOnDateSelect: true,
            closeSelectorOnDocumentClick: true,
            minYear: Year.min,
            maxYear: Year.max,
            focusInputOnDateSelect: true,
            moveFocusByArrowKeys: true,
            dateRangeDatesDelimiter: ' - ',
            inputFieldValidation: true,
            stylesData: { selector: '', styles: '' },
            ariaLabelPrevMonth: 'Previous Month',
            ariaLabelNextMonth: 'Next Month',
            shortcuts: [],
            weekText: 'Week'
        };
    }
    /**
     * @return {?}
     */
    getDefaultConfig() {
        return this.defaultConfig;
    }
}
DefaultConfigService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Constants
 * @type {?}
 */
const D = 'd';
/** @type {?} */
const DD = 'dd';
/** @type {?} */
const M = 'M';
/** @type {?} */
const MM = 'MM';
/** @type {?} */
const MMM = 'MMM';
/** @type {?} */
const Y = 'y';
/** @type {?} */
const YYYY = 'yyyy';
/** @type {?} */
const DATE_ROW_COUNT = 5;
/** @type {?} */
const DATE_COL_COUNT = 6;
/** @type {?} */
const MONTH_ROW_COUNT = 3;
/** @type {?} */
const MONTH_COL_COUNT = 2;
/** @type {?} */
const YEAR_ROW_COUNT = 4;
/** @type {?} */
const YEAR_COL_COUNT = 4;
/** @type {?} */
const DOT = '.';
/** @type {?} */
const UNDER_LINE = '_';
/** @type {?} */
const SU = 'su';
/** @type {?} */
const MO = 'mo';
/** @type {?} */
const TU = 'tu';
/** @type {?} */
const WE = 'we';
/** @type {?} */
const TH = 'th';
/** @type {?} */
const FR = 'fr';
/** @type {?} */
const SA = 'sa';
/** @type {?} */
const DEFAULT_LOCALE = 'ZH_CN';
/** @type {?} */
const ZERO_STR = '0';
/** @type {?} */
const EMPTY_STR = '';
/** @type {?} */
const CLICK = 'click';
/** @type {?} */
const KEYUP = 'keyup';
/** @type {?} */
const BLUR = 'blur';
/** @type {?} */
const DISABLED = 'disabled';
/** @type {?} */
const BODY = 'body';
/** @type {?} */
const VALUE = 'value';
/** @type {?} */
const OPTIONS = 'options';
/** @type {?} */
const DEFAULT_MONTH = 'defaultMonth';
/** @type {?} */
const LOCALE = 'locale';
/** @type {?} */
const OBJECT = 'object';
/** @type {?} */
const PX = 'px';
/** @type {?} */
const STYLE = 'style';
/** @type {?} */
const OPTS = 'opts';
/** @type {?} */
const YEARS = 'years';
/** @type {?} */
const VISIBLE_MONTH = 'visibleMonth';
/** @type {?} */
const SELECT_MONTH = 'selectMonth';
/** @type {?} */
const SELECT_YEAR = 'selectYear';
/** @type {?} */
const PREV_VIEW_DISABLED = 'prevViewDisabled';
/** @type {?} */
const NEXT_VIEW_DISABLED = 'nextViewDisabled';
/** @type {?} */
const DATES = 'dates';
/** @type {?} */
const WEEK_DAYS = 'weekDays';
/** @type {?} */
const SELECTED_DATE = 'selectedDate';
/** @type {?} */
const SELECTED_DATE_RANGE = 'selectedDateRange';
/** @type {?} */
const MONTHS = 'months';
/** @type {?} */
const PREVENT_CLOSE_TIMEOUT = 50;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatepickerLocaleService {
    constructor() {
        this.locales = {
            'EN_US': {
                dayLabels: { su: 'Sun', mo: 'Mon', tu: 'Tue', we: 'Wed', th: 'Thu', fr: 'Fri', sa: 'Sat' },
                monthLabels: {
                    1: 'Jan',
                    2: 'Feb',
                    3: 'Mar',
                    4: 'Apr',
                    5: 'May',
                    6: 'Jun',
                    7: 'Jul',
                    8: 'Aug',
                    9: 'Sep',
                    10: 'Oct',
                    11: 'Nov',
                    12: 'Dec'
                },
                dateFormat: 'MM/dd/yyyy',
                returnFormat: 'MM/dd/yyyy',
                firstDayOfWeek: 'mo',
                sunHighlight: false,
                yearTxt: '',
                timeBtnText: 'Select Time',
                dateBtnText: 'Select Date',
                commitBtnText: 'OK',
                weekText: 'Week',
                placeholder: 'Please select a date',
                range: {
                    begin: 'Please select a begin date',
                    end: 'Please select a end date'
                },
                message: {
                    101: 'The end time must not be earlier than the start time.',
                    102: 'Only ${0} dates are allowed to be selected.'
                },
                dynamicLocale: {
                    setting: 'Dynamic Date',
                    today: 'Today',
                    presentWeek: 'Current Week',
                    presentMonth: 'Current Month',
                    presentYear: 'Current Year',
                    previous: 'Previous',
                    future: 'Future',
                    day: 'Day',
                    month: 'Month',
                    year: 'Year',
                    week: 'Week',
                    current: 'Current',
                    first: 'First Day',
                    last: 'Last Day'
                },
                mulstiDatesLocale: {
                    backtotoday: 'Back to today',
                    clearSelections: 'Clear all',
                    delete: 'Delete',
                    selected: 'Selected,days'
                }
            },
            'ZH_CN': {
                dayLabels: { su: '日', mo: '一', tu: '二', we: '三', th: '四', fr: '五', sa: '六' },
                monthLabels: {
                    1: '一月',
                    2: '二月',
                    3: '三月',
                    4: '四月',
                    5: '五月',
                    6: '六月',
                    7: '七月',
                    8: '八月',
                    9: '九月',
                    10: '十月',
                    11: '十一月',
                    12: '十二月'
                },
                dateFormat: 'yyyy-MM-dd',
                returnFormat: 'yyyy-MM-dd',
                firstDayOfWeek: 'mo',
                sunHighlight: false,
                yearTxt: '年',
                timeBtnText: '选择时间',
                dateBtnText: '选择日期',
                commitBtnText: '确认',
                weekText: '周',
                placeholder: '请选择日期',
                range: {
                    begin: '请选择开始日期',
                    end: '请选择结束日期'
                },
                message: {
                    101: '结束时间不得早于开始时间！',
                    102: '仅允许选择 ${0} 个日期'
                },
                dynamicLocale: {
                    setting: '设置动态日期',
                    today: '今天',
                    presentWeek: '本周',
                    presentMonth: '本月',
                    presentYear: '本年',
                    previous: '过去',
                    future: '未来',
                    day: '天',
                    month: '月',
                    year: '年',
                    week: '周',
                    current: '本',
                    first: '第 1 天',
                    last: '最后 1 天'
                },
                mulstiDatesLocale: {
                    backtotoday: '回到今天',
                    clearSelections: '清空',
                    delete: '删除',
                    selected: '已选,天'
                }
            },
            'ZH_CHT': {
                dayLabels: { su: '日', mo: '一', tu: '二', we: '三', th: '四', fr: '五', sa: '六' },
                monthLabels: {
                    1: '一月',
                    2: '二月',
                    3: '三月',
                    4: '四月',
                    5: '五月',
                    6: '六月',
                    7: '七月',
                    8: '八月',
                    9: '九月',
                    10: '十月',
                    11: '十一月',
                    12: '十二月'
                },
                dateFormat: 'yyyy-MM-dd',
                returnFormat: 'yyyy-MM-dd',
                firstDayOfWeek: 'mo',
                sunHighlight: false,
                yearTxt: '年',
                timeBtnText: '選擇時間',
                dateBtnText: '選擇日期',
                commitBtnText: '確認',
                weekText: '周',
                placeholder: '請選擇日期',
                range: {
                    begin: '請選擇開始日期',
                    end: '請選擇結束日期'
                },
                message: {
                    101: '結束時間不得早于開始時間！',
                    102: '僅允許選擇 ${0} 個日期'
                },
                dynamicLocale: {
                    setting: '設置動態日期',
                    today: '今天',
                    presentWeek: '本周',
                    presentMonth: '本月',
                    presentYear: '本年',
                    previous: '過去',
                    future: '未來',
                    day: '天',
                    month: '月',
                    year: '年',
                    week: '周',
                    current: '本',
                    first: '第 1 天',
                    last: '最後 1 天'
                },
                mulstiDatesLocale: {
                    backtotoday: '回到今天',
                    clearSelections: '清空',
                    delete: '刪除',
                    selected: '已選,天'
                }
            } // ,
            // he: {
            //     dayLabels: { su: 'רא', mo: 'שנ', tu: 'של', we: 'רב', th: 'חמ', fr: 'שי', sa: 'שב' },
            //     monthLabels: {
            //         1: 'ינו',
            //         2: 'פבר',
            //         3: 'מרץ',
            //         4: 'אפר',
            //         5: 'מאי',
            //         6: 'יונ',
            //         7: 'יול',
            //         8: 'אוג',
            //         9: 'ספט',
            //         10: 'אוק',
            //         11: 'נוב',
            //         12: 'דצמ'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // ja: {
            //     dayLabels: { su: '日', mo: '月', tu: '火', we: '水', th: '木', fr: '金', sa: '土' },
            //     monthLabels: {
            //         1: '１月',
            //         2: '２月',
            //         3: '３月',
            //         4: '４月',
            //         5: '５月',
            //         6: '６月',
            //         7: '７月',
            //         8: '８月',
            //         9: '９月',
            //         10: '１０月',
            //         11: '１１月',
            //         12: '１２月'
            //     },
            //     dateFormat: 'yyyy.mm.dd',
            //     sunHighlight: false
            // },
            // fr: {
            //     dayLabels: { su: 'Dim', mo: 'Lun', tu: 'Mar', we: 'Mer', th: 'Jeu', fr: 'Ven', sa: 'Sam' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Fév',
            //         3: 'Mar',
            //         4: 'Avr',
            //         5: 'Mai',
            //         6: 'Juin',
            //         7: 'Juil',
            //         8: 'Aoû',
            //         9: 'Sep',
            //         10: 'Oct',
            //         11: 'Nov',
            //         12: 'Déc'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // 'fr-ch': {
            //     dayLabels: { su: 'Dim', mo: 'Lun', tu: 'Mar', we: 'Mer', th: 'Jeu', fr: 'Ven', sa: 'Sam' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Fév',
            //         3: 'Mar',
            //         4: 'Avr',
            //         5: 'Mai',
            //         6: 'Juin',
            //         7: 'Juil',
            //         8: 'Aoû',
            //         9: 'Sep',
            //         10: 'Oct',
            //         11: 'Nov',
            //         12: 'Déc'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // fi: {
            //     dayLabels: { su: 'Su', mo: 'Ma', tu: 'Ti', we: 'Ke', th: 'To', fr: 'Pe', sa: 'La' },
            //     monthLabels: {
            //         1: 'Tam',
            //         2: 'Hel',
            //         3: 'Maa',
            //         4: 'Huh',
            //         5: 'Tou',
            //         6: 'Kes',
            //         7: 'Hei',
            //         8: 'Elo',
            //         9: 'Syy',
            //         10: 'Lok',
            //         11: 'Mar',
            //         12: 'Jou'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // es: {
            //     dayLabels: { su: 'Do', mo: 'Lu', tu: 'Ma', we: 'Mi', th: 'Ju', fr: 'Vi', sa: 'Sa' },
            //     monthLabels: {
            //         1: 'Ene',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Abr',
            //         5: 'May',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Ago',
            //         9: 'Sep',
            //         10: 'Oct',
            //         11: 'Nov',
            //         12: 'Dic'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // hu: {
            //     dayLabels: { su: 'Vas', mo: 'Hét', tu: 'Kedd', we: 'Sze', th: 'Csü', fr: 'Pén', sa: 'Szo' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Már',
            //         4: 'Ápr',
            //         5: 'Máj',
            //         6: 'Jún',
            //         7: 'Júl',
            //         8: 'Aug',
            //         9: 'Szep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // sv: {
            //     dayLabels: { su: 'Sön', mo: 'Mån', tu: 'Tis', we: 'Ons', th: 'Tor', fr: 'Fre', sa: 'Lör' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Maj',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // nl: {
            //     dayLabels: { su: 'Zon', mo: 'Maa', tu: 'Din', we: 'Woe', th: 'Don', fr: 'Vri', sa: 'Zat' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Mei',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd-mm-yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // ru: {
            //     dayLabels: { su: 'Вс', mo: 'Пн', tu: 'Вт', we: 'Ср', th: 'Чт', fr: 'Пт', sa: 'Сб' },
            //     monthLabels: {
            //         1: 'Янв',
            //         2: 'Фев',
            //         3: 'Март',
            //         4: 'Апр',
            //         5: 'Май',
            //         6: 'Июнь',
            //         7: 'Июль',
            //         8: 'Авг',
            //         9: 'Сент',
            //         10: 'Окт',
            //         11: 'Ноя',
            //         12: 'Дек'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // uk: {
            //     dayLabels: { su: 'Нд', mo: 'Пн', tu: 'Вт', we: 'Ср', th: 'Чт', fr: 'Пт', sa: 'Сб' },
            //     monthLabels: {
            //         1: 'Січ',
            //         2: 'Лют',
            //         3: 'Бер',
            //         4: 'Кві',
            //         5: 'Тра',
            //         6: 'Чер',
            //         7: 'Лип',
            //         8: 'Сер',
            //         9: 'Вер',
            //         10: 'Жов',
            //         11: 'Лис',
            //         12: 'Гру'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // no: {
            //     dayLabels: { su: 'Søn', mo: 'Man', tu: 'Tir', we: 'Ons', th: 'Tor', fr: 'Fre', sa: 'Lør' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Mai',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Des'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // tr: {
            //     dayLabels: { su: 'Paz', mo: 'Pzt', tu: 'Sal', we: 'Çar', th: 'Per', fr: 'Cum', sa: 'Cmt' },
            //     monthLabels: {
            //         1: 'Oca',
            //         2: 'Şub',
            //         3: 'Mar',
            //         4: 'Nis',
            //         5: 'May',
            //         6: 'Haz',
            //         7: 'Tem',
            //         8: 'Ağu',
            //         9: 'Eyl',
            //         10: 'Eki',
            //         11: 'Kas',
            //         12: 'Ara'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // 'pt-br': {
            //     dayLabels: { su: 'Dom', mo: 'Seg', tu: 'Ter', we: 'Qua', th: 'Qui', fr: 'Sex', sa: 'Sab' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Fev',
            //         3: 'Mar',
            //         4: 'Abr',
            //         5: 'Mai',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Ago',
            //         9: 'Set',
            //         10: 'Out',
            //         11: 'Nov',
            //         12: 'Dez'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // de: {
            //     dayLabels: { su: 'So', mo: 'Mo', tu: 'Di', we: 'Mi', th: 'Do', fr: 'Fr', sa: 'Sa' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mär',
            //         4: 'Apr',
            //         5: 'Mai',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dez'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // 'de-ch': {
            //     dayLabels: { su: 'So', mo: 'Mo', tu: 'Di', we: 'Mi', th: 'Do', fr: 'Fr', sa: 'Sa' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mär',
            //         4: 'Apr',
            //         5: 'Mai',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dez'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // it: {
            //     dayLabels: { su: 'Dom', mo: 'Lun', tu: 'Mar', we: 'Mer', th: 'Gio', fr: 'Ven', sa: 'Sab' },
            //     monthLabels: {
            //         1: 'Gen',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Mag',
            //         6: 'Giu',
            //         7: 'Lug',
            //         8: 'Ago',
            //         9: 'Set',
            //         10: 'Ott',
            //         11: 'Nov',
            //         12: 'Dic'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // 'it-ch': {
            //     dayLabels: { su: 'Dom', mo: 'Lun', tu: 'Mar', we: 'Mer', th: 'Gio', fr: 'Ven', sa: 'Sab' },
            //     monthLabels: {
            //         1: 'Gen',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Mag',
            //         6: 'Giu',
            //         7: 'Lug',
            //         8: 'Ago',
            //         9: 'Set',
            //         10: 'Ott',
            //         11: 'Nov',
            //         12: 'Dic'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // pl: {
            //     dayLabels: { su: 'Nie', mo: 'Pon', tu: 'Wto', we: 'Śro', th: 'Czw', fr: 'Pią', sa: 'Sob' },
            //     monthLabels: {
            //         1: 'Sty',
            //         2: 'Lut',
            //         3: 'Mar',
            //         4: 'Kwi',
            //         5: 'Maj',
            //         6: 'Cze',
            //         7: 'Lip',
            //         8: 'Sie',
            //         9: 'Wrz',
            //         10: 'Paź',
            //         11: 'Lis',
            //         12: 'Gru'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // my: {
            //     dayLabels: {
            //         su: 'တနင်္ဂနွေ',
            //         mo: 'တနင်္လာ',
            //         tu: 'အင်္ဂါ',
            //         we: 'ဗုဒ္ဓဟူး',
            //         th: 'ကြသပတေး',
            //         fr: 'သောကြာ',
            //         sa: 'စနေ'
            //     },
            //     monthLabels: {
            //         1: 'ဇန်နဝါရီ',
            //         2: 'ဖေဖော်ဝါရီ',
            //         3: 'မတ်',
            //         4: 'ဧပြီ',
            //         5: 'မေ',
            //         6: 'ဇွန်',
            //         7: 'ဇူလိုင်',
            //         8: 'ဩဂုတ်',
            //         9: 'စက်တင်ဘာ',
            //         10: 'အောက်တိုဘာ',
            //         11: 'နိုဝင်ဘာ',
            //         12: 'ဒီဇင်ဘာ'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // sk: {
            //     dayLabels: { su: 'Ne', mo: 'Po', tu: 'Ut', we: 'St', th: 'Št', fr: 'Pi', sa: 'So' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Máj',
            //         6: 'Jún',
            //         7: 'Júl',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // sl: {
            //     dayLabels: { su: 'Ned', mo: 'Pon', tu: 'Tor', we: 'Sre', th: 'Čet', fr: 'Pet', sa: 'Sob' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Maj',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Avg',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd. mm. yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // ro: {
            //     dayLabels: { su: 'du', mo: 'lu', tu: 'ma', we: 'mi', th: 'jo', fr: 'vi', sa: 'sa' },
            //     monthLabels: {
            //         1: 'ian',
            //         2: 'feb',
            //         3: 'mart',
            //         4: 'apr',
            //         5: 'mai',
            //         6: 'iun',
            //         7: 'iul',
            //         8: 'aug',
            //         9: 'sept',
            //         10: 'oct',
            //         11: 'nov',
            //         12: 'dec'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // ca: {
            //     dayLabels: { su: 'dg', mo: 'dl', tu: 'dt', we: 'dc', th: 'dj', fr: 'dv', sa: 'ds' },
            //     monthLabels: {
            //         1: 'Gen',
            //         2: 'Febr',
            //         3: 'Març',
            //         4: 'Abr',
            //         5: 'Maig',
            //         6: 'Juny',
            //         7: 'Jul',
            //         8: 'Ag',
            //         9: 'Set',
            //         10: 'Oct',
            //         11: 'Nov',
            //         12: 'Des'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // id: {
            //     dayLabels: { su: 'Min', mo: 'Sen', tu: 'Sel', we: 'Rab', th: 'Kam', fr: 'Jum', sa: 'Sab' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Mei',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Ags',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Des'
            //     },
            //     dateFormat: 'dd-mm-yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // 'en-au': {
            //     dayLabels: { su: 'Sun', mo: 'Mon', tu: 'Tue', we: 'Wed', th: 'Thu', fr: 'Fri', sa: 'Sat' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'May',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Oct',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // 'am-et': {
            //     dayLabels: { su: 'እሑድ', mo: 'ሰኞ', tu: 'ማክሰኞ', we: 'ረቡዕ', th: 'ሐሙስ', fr: 'ዓርብ', sa: 'ቅዳሜ' },
            //     monthLabels: {
            //         1: 'ጃንዩ',
            //         2: 'ፌብሩ',
            //         3: 'ማርች',
            //         4: 'ኤፕረ',
            //         5: 'ሜይ',
            //         6: 'ጁን',
            //         7: 'ጁላይ',
            //         8: 'ኦገስ',
            //         9: 'ሴፕቴ',
            //         10: 'ኦክተ',
            //         11: 'ኖቬም',
            //         12: 'ዲሴም'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // cs: {
            //     dayLabels: { su: 'Ne', mo: 'Po', tu: 'Út', we: 'St', th: 'Čt', fr: 'Pá', sa: 'So' },
            //     monthLabels: {
            //         1: 'Led',
            //         2: 'Úno',
            //         3: 'Bře',
            //         4: 'Dub',
            //         5: 'Kvě',
            //         6: 'Čvn',
            //         7: 'Čvc',
            //         8: 'Srp',
            //         9: 'Zář',
            //         10: 'Říj',
            //         11: 'Lis',
            //         12: 'Pro'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // el: {
            //     dayLabels: { su: 'Κυρ', mo: 'Δευ', tu: 'Τρι', we: 'Τετ', th: 'Πεμ', fr: 'Παρ', sa: 'Σαβ' },
            //     monthLabels: {
            //         1: 'Ιαν',
            //         2: 'Φεβ',
            //         3: 'Μαρ',
            //         4: 'Απρ',
            //         5: 'Μαι',
            //         6: 'Ιουν',
            //         7: 'Ιουλ',
            //         8: 'Αυγ',
            //         9: 'Σεπ',
            //         10: 'Οκτ',
            //         11: 'Νοε',
            //         12: 'Δεκ'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // kk: {
            //     dayLabels: { su: 'Жк', mo: 'Дс', tu: 'Сс', we: 'Ср', th: 'Бс', fr: 'Жм', sa: 'Сб' },
            //     monthLabels: {
            //         1: 'Қаң',
            //         2: 'Ақп',
            //         3: 'Нау',
            //         4: 'Сәу',
            //         5: 'Мам',
            //         6: 'Мау',
            //         7: 'Шіл',
            //         8: 'Там',
            //         9: 'Қырк',
            //         10: 'Қаз',
            //         11: 'Қар',
            //         12: 'Желт'
            //     },
            //     dateFormat: 'dd-mmm-yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // th: {
            //     dayLabels: { su: 'อา', mo: 'จ', tu: 'อ', we: 'พ', th: 'พฤ', fr: 'ศ', sa: 'ส' },
            //     monthLabels: {
            //         1: 'ม.ค',
            //         2: 'ก.พ.',
            //         3: 'มี.ค.',
            //         4: 'เม.ย.',
            //         5: 'พ.ค.',
            //         6: 'มิ.ย.',
            //         7: 'ก.ค.',
            //         8: 'ส.ค.',
            //         9: 'ก.ย.',
            //         10: 'ต.ค.',
            //         11: 'พ.ย.',
            //         12: 'ธ.ค.'
            //     },
            //     dateFormat: 'dd-mm-yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // 'ko-kr': {
            //     dayLabels: { su: '일', mo: '월', tu: '화', we: '수', th: '목', fr: '금', sa: '토' },
            //     monthLabels: {
            //         1: '1월',
            //         2: '2월',
            //         3: '3월',
            //         4: '4월',
            //         5: '5월',
            //         6: '6월',
            //         7: '7월',
            //         8: '8월',
            //         9: '9월',
            //         10: '10월',
            //         11: '11월',
            //         12: '12월'
            //     },
            //     dateFormat: 'yyyy mm dd',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // da: {
            //     dayLabels: { su: 'Søn', mo: 'Man', tu: 'Tir', we: 'Ons', th: 'Tor', fr: 'Fre', sa: 'Lør' },
            //     monthLabels: {
            //         1: 'Jan',
            //         2: 'Feb',
            //         3: 'Mar',
            //         4: 'Apr',
            //         5: 'Maj',
            //         6: 'Jun',
            //         7: 'Jul',
            //         8: 'Aug',
            //         9: 'Sep',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd-mm-yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // lt: {
            //     dayLabels: { su: 'Sk', mo: 'Pr', tu: 'An', we: 'Tr', th: 'Kt', fr: 'Pn', sa: 'Št' },
            //     monthLabels: {
            //         1: 'Saus.',
            //         2: 'Vas.',
            //         3: 'Kov.',
            //         4: 'Bal.',
            //         5: 'Geg.',
            //         6: 'Birž.',
            //         7: 'Liep.',
            //         8: 'Rugp.',
            //         9: 'Rugs.',
            //         10: 'Sapl.',
            //         11: 'Lapkr.',
            //         12: 'Gruod.'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // vi: {
            //     dayLabels: { su: 'CN', mo: 'T2', tu: 'T3', we: 'T4', th: 'T5', fr: 'T6', sa: 'T7' },
            //     monthLabels: {
            //         1: 'THG 1',
            //         2: 'THG 2',
            //         3: 'THG 3',
            //         4: 'THG 4',
            //         5: 'THG 5',
            //         6: 'THG 6',
            //         7: 'THG 7',
            //         8: 'THG 8',
            //         9: 'THG 9',
            //         10: 'THG 10',
            //         11: 'THG 11',
            //         12: 'THG 12'
            //     },
            //     dateFormat: 'dd/mm/yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // bn: {
            //     dayLabels: { su: 'রবি', mo: 'সোম', tu: 'মঙ্গল', we: 'বুধ', th: 'বৃহঃ', fr: 'শুক্র', sa: 'শনি' },
            //     monthLabels: {
            //         1: 'জানু',
            //         2: 'ফেব্রু',
            //         3: 'মার্চ',
            //         4: 'এপ্রিল',
            //         5: 'মে',
            //         6: 'জুন',
            //         7: 'জুলাই',
            //         8: 'আগস্ট',
            //         9: 'সেপ্টে',
            //         10: 'অক্টো',
            //         11: 'নভে',
            //         12: 'ডিসে'
            //     },
            //     dateFormat: 'dd-mm-yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // bg: {
            //     dayLabels: { su: 'нд', mo: 'пн', tu: 'вт', we: 'ср', th: 'чт', fr: 'пт', sa: 'сб' },
            //     monthLabels: {
            //         1: 'яну.',
            //         2: 'фев.',
            //         3: 'март',
            //         4: 'апр.',
            //         5: 'май',
            //         6: 'юни',
            //         7: 'юли',
            //         8: 'авг.',
            //         9: 'сеп.',
            //         10: 'окт.',
            //         11: 'ное.',
            //         12: 'дек.'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // hr: {
            //     dayLabels: { su: 'Ne', mo: 'Po', tu: 'Ul', we: 'Sr', th: 'Če', fr: 'Pe', sa: 'Su' },
            //     monthLabels: {
            //         1: 'Sij',
            //         2: 'Vel',
            //         3: 'Ožu',
            //         4: 'Tra',
            //         5: 'Svi',
            //         6: 'Lip',
            //         7: 'Srp',
            //         8: 'Kol',
            //         9: 'Ruj',
            //         10: 'Lis',
            //         11: 'Stu',
            //         12: 'Pro'
            //     },
            //     dateFormat: 'dd.mm.yyyy.',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // ar: {
            //     dayLabels: {
            //         su: 'الأحد',
            //         mo: 'الاثنين',
            //         tu: 'الثلاثاء',
            //         we: 'الاربعاء',
            //         th: 'الخميس',
            //         fr: 'الجمعة',
            //         sa: 'السبت'
            //     },
            //     monthLabels: {
            //         1: 'يناير',
            //         2: 'فبراير',
            //         3: 'مارس',
            //         4: 'ابريل',
            //         5: 'مايو',
            //         6: 'يونيو',
            //         7: 'يوليو',
            //         8: 'أغسطس',
            //         9: 'سبتمبر',
            //         10: 'أكتوبر',
            //         11: 'نوفمبر',
            //         12: 'ديسمبر'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'sa',
            //     sunHighlight: false
            // },
            // is: {
            //     dayLabels: { su: 'sun', mo: 'mán', tu: 'þri', we: 'mið', th: 'fim', fr: 'fös', sa: 'lau' },
            //     monthLabels: {
            //         1: 'jan',
            //         2: 'feb',
            //         3: 'mar',
            //         4: 'apr',
            //         5: 'maí',
            //         6: 'jún',
            //         7: 'júl',
            //         8: 'ágú',
            //         9: 'sep',
            //         10: 'okt',
            //         11: 'nóv',
            //         12: 'des'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'su',
            //     sunHighlight: false
            // },
            // tw: {
            //     dayLabels: { su: '週日', mo: '週一', tu: '週二', we: '週三', th: '週四', fr: '週五', sa: '週六' },
            //     monthLabels: {
            //         1: '一月',
            //         2: '二月',
            //         3: '三月',
            //         4: '四月',
            //         5: '五月',
            //         6: '六月',
            //         7: '七月',
            //         8: '八月',
            //         9: '九月',
            //         10: '十月',
            //         11: '十一月',
            //         12: '十二月'
            //     },
            //     dateFormat: 'yyyy-mm-dd',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // lv: {
            //     dayLabels: { su: 'S', mo: 'P', tu: 'O', we: 'T', th: 'C', fr: 'P', sa: 'S' },
            //     monthLabels: {
            //         1: 'Janv',
            //         2: 'Febr',
            //         3: 'Marts',
            //         4: 'Apr',
            //         5: 'Maijs',
            //         6: 'Jūn',
            //         7: 'Jūl',
            //         8: 'Aug',
            //         9: 'Sept',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dec'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // },
            // et: {
            //     dayLabels: { su: 'P', mo: 'E', tu: 'T', we: 'K', th: 'N', fr: 'R', sa: 'L' },
            //     monthLabels: {
            //         1: 'Jaan',
            //         2: 'Veebr',
            //         3: 'Märts',
            //         4: 'Apr',
            //         5: 'Mai',
            //         6: 'Juuni',
            //         7: 'Juuli',
            //         8: 'Aug',
            //         9: 'Sept',
            //         10: 'Okt',
            //         11: 'Nov',
            //         12: 'Dets'
            //     },
            //     dateFormat: 'dd.mm.yyyy',
            //     firstDayOfWeek: 'mo',
            //     sunHighlight: false
            // }
        };
    }
    /**
     * @param {?} locale
     * @return {?}
     */
    getLocaleOptions(locale) {
        if (locale && this.locales.hasOwnProperty(locale)) {
            // User given locale
            return this.locales[locale];
        }
        // Default: en
        return this.locales[DEFAULT_LOCALE];
    }
}
DatepickerLocaleService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class UtilService {
    constructor() {
        this.weekDays = [SU, MO, TU, WE, TH, FR, SA];
    }
    /**
     * @param {?} dateStr
     * @param {?} options
     * @param {?=} isReturn
     * @return {?}
     */
    isDateValid(dateStr, options, isReturn = false) {
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        let _dateStr;
        /** @type {?} */
        let hour = 0;
        /** @type {?} */
        let minute = 0;
        /** @type {?} */
        let second = 0;
        /** @type {?} */
        const returnDate = this.resetDate();
        if (!dateStr || !dateStr.length) {
            return returnDate;
        }
        const { dateFormat, minYear, maxYear, monthLabels, showTime, returnFormat, showType } = options;
        /** @type {?} */
        let _st = showTime;
        /** @type {?} */
        let formatStr = dateFormat;
        if (isReturn) {
            formatStr = returnFormat.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            dateStr = dateStr.replace(/[年,月]/g, '-').replace(/[日]/, '').replace(/[时,分]/g, ':').replace(/[秒]/g, '');
            if (dateStr[dateStr.length - 1] === '-' || dateStr[dateStr.length - 1] === ':') {
                dateStr = dateStr.substring(0, dateStr.length - 1);
            }
            if (!showTime && returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1) {
                _st = true;
            }
        }
        /** @type {?} */
        const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        /** @type {?} */
        const isMonthStr = formatStr.indexOf(MMM) !== -1;
        /** @type {?} */
        let delimeters = formatStr.match(/[^(DdMmYy)]{1,}/g);
        if (_st && dateStr) {
            _dateStr = dateStr.split(' ')[0];
            Object.assign(returnDate, { hour: 0, minute: 0, second: 0 });
            /** @type {?} */
            const timeStr = dateStr.split(' ')[1];
            if (timeStr) {
                /** @type {?} */
                const _timer = timeStr.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (_timer[0]) {
                    hour = Number(_timer[0].substr(0, 2));
                    hour = isNaN(hour) ? 0 : hour;
                }
                if (_timer[1]) {
                    minute = Number(_timer[1].substr(0, 2));
                    minute = isNaN(minute) ? 0 : minute;
                }
                if (_timer[2]) {
                    second = Number(_timer[2].substr(0, 2));
                    second = isNaN(second) ? 0 : second;
                }
            }
            else {
                delimeters = undefined;
                /** @type {?} */
                const reg = /^\d{1,}$/;
                if (reg.test(dateStr)) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    const df = formatStr;
                    _dateStr = dateStr.substr(0, 8);
                    /** @type {?} */
                    let _timer = dateStr.substr(8);
                    if (_timer) {
                        if (df.includes('HH')) {
                            if (_timer) {
                                hour = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('mm')) {
                            if (_timer) {
                                minute = +_timer.slice(0, 2);
                                _timer = _timer.slice(2);
                            }
                        }
                        if (df.includes('ss')) {
                            if (_timer) {
                                second = +_timer.slice(0, 2);
                            }
                        }
                    }
                }
            }
        }
        else {
            _dateStr = dateStr ? dateStr.split(' ')[0] : '';
        }
        /** @type {?} */
        const dateValue = this.getDateValue(_dateStr, formatStr, delimeters);
        /** @type {?} */
        const year = this.getNumberByValue(dateValue[0]);
        /** @type {?} */
        const month = isMonthStr
            ? this.getMonthNumberByMonthName(dateValue[1], monthLabels)
            : this.getNumberByValue(dateValue[1]);
        /** @type {?} */
        const day = this.getNumberByValue(dateValue[2]);
        if (showType === ShowType.noDateAndMonth) {
            return { year, month: 1, day: 1 };
        }
        if (month !== -1 && day !== -1 && year !== -1) {
            if (year < minYear || year > maxYear || month < 1 || month > 12) {
                return returnDate;
            }
            /** @type {?} */
            const date = _st ? { year, month, day, hour, minute, second } : { year, month, day };
            if (this.isDisabledDate(date, options)) {
                return returnDate;
            }
            if (year % 400 === 0 || (year % 100 !== 0 && year % 4 === 0)) {
                daysInMonth[1] = 29;
            }
            if (day < 1 || day > daysInMonth[month - 1]) {
                return returnDate;
            }
            // Valid date
            if (options.showType === ShowType.noDate) {
                return { year: date.year, month: date.month };
            }
            else if (options.showType === ShowType.noDateAndMonth) {
                return { year: date.year };
            }
            else {
                return date;
            }
        }
        return returnDate;
    }
    /**
     * @param {?} dateRangeStr
     * @param {?} options
     * @return {?}
     */
    isDateValidDateRange(dateRangeStr, options) {
        /** @type {?} */
        let dateRange = {
            begin: this.resetDate(),
            end: this.resetDate()
        };
        if (dateRangeStr && dateRangeStr.length) {
            /** @type {?} */
            const dates = dateRangeStr.split(options.dateRangeDatesDelimiter);
            if (dates && dates.length === 2) {
                const [beginDate, endDate] = dates;
                /** @type {?} */
                const begin = this.isDateValid(beginDate, options, true);
                if (this.isInitializedDate(begin)) {
                    /** @type {?} */
                    const end = this.isDateValid(endDate, options, true);
                    if (this.isInitializedDate(end) && this.isDateSameOrEarlier(begin, end)) {
                        dateRange = { begin, end };
                    }
                }
            }
        }
        return dateRange;
    }
    /**
     * @param {?} dateStr
     * @param {?} dateFormat
     * @param {?} delimeters
     * @return {?}
     */
    getDateValue(dateStr, dateFormat, delimeters) {
        /** @type {?} */
        const da = [];
        if (delimeters) {
            /** @type {?} */
            let del = delimeters[0];
            if (delimeters[0] !== delimeters[1]) {
                del = delimeters[0] + delimeters[1];
                if (delimeters[2] && delimeters[1] !== delimeters[2]) {
                    del = del + delimeters[2];
                }
            }
            /** @type {?} */
            const re = new RegExp('[' + del + ']');
            /** @type {?} */
            const ds = dateStr.split(re);
            /** @type {?} */
            const df = dateFormat.split(re);
            for (let i = 0; i < df.length; i++) {
                if (df[i].indexOf(YYYY) !== -1) {
                    da[0] = { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(M) !== -1) {
                    da[1] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
                if (df[i].indexOf(D) !== -1) {
                    da[2] = ds[i] === undefined ? { value: '1', format: df[i] } : { value: ds[i], format: df[i] };
                }
            }
        }
        else {
            /** @type {?} */
            const yearIndex = (dateFormat + '').indexOf(YYYY);
            /** @type {?} */
            const monthIndex = (dateFormat + '').indexOf(MM);
            /** @type {?} */
            const dayIndex = (dateFormat + '').indexOf(DD);
            if (yearIndex >= 0) {
                da[0] = { value: dateStr.substring(yearIndex, yearIndex + 4), format: dateFormat.substring(yearIndex, yearIndex + 4) };
            }
            if (monthIndex >= 0) {
                da[1] = { value: dateStr.substring(monthIndex, monthIndex + 2), format: dateFormat.substring(monthIndex, monthIndex + 2) };
            }
            if (dayIndex >= 0) {
                da[2] = { value: dateStr.substring(dayIndex, dayIndex + 2) || '01', format: dateFormat.substring(dayIndex, dayIndex + 2) };
            }
        }
        return da;
    }
    /**
     * @param {?} df
     * @param {?} monthLabels
     * @return {?}
     */
    getMonthNumberByMonthName(df, monthLabels) {
        if (df.value) {
            for (let key = 1; key <= 12; key++) {
                if (df.value.toLowerCase() === monthLabels[key].toLowerCase()) {
                    return key;
                }
            }
        }
        return -1;
    }
    /**
     * @param {?} df
     * @return {?}
     */
    getNumberByValue(df) {
        if (!df) {
            return 1;
        }
        if (!/^\d+$/.test(df.value)) {
            return -1;
        }
        /** @type {?} */
        let nbr = Number(df.value);
        if ((df.format.length === 1 && df.value.length !== 1 && nbr < 10) ||
            (df.format.length === 1 && df.value.length !== 2 && nbr >= 10)) {
            nbr = -1;
        }
        else if (df.format.length === 2 && df.value.length > 2) {
            nbr = -1;
        }
        return nbr;
    }
    /**
     * @param {?} monthString
     * @return {?}
     */
    parseDefaultMonth(monthString) {
        /** @type {?} */
        const month = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0 };
        if (monthString !== EMPTY_STR) {
            /** @type {?} */
            const split = monthString.split(monthString.match(/[^0-9]/)[0]);
            month.monthNbr = split[0].length === 2 ? Number(split[0]) : Number(split[1]);
            month.year = split[0].length === 2 ? Number(split[1]) : Number(split[0]);
        }
        return month;
    }
    /**
     * @param {?} date
     * @param {?} options
     * @return {?}
     */
    isDisabledDate(date, options) {
        const { minYear, maxYear, disableUntil, disableSince, disableWeekends, disableDates, disableDateRanges, disableWeekdays, enableDates } = options;
        // for (const d of enableDates) {
        //     if (
        //         (d.year === 0 || d.year === date.year) &&
        //         (d.month === 0 || d.month === date.month) &&
        //         d.day === date.day
        //     ) {
        //         return false;
        //     }
        // }
        if ((date.year < minYear && date.month === 12) || (date.year > maxYear && date.month === 1)) {
            return true;
        }
        /** @type {?} */
        const dateMs = this.getTimeInMilliseconds(date);
        if (this.isInitializedDate(disableUntil) && (dateMs + 24 * 60 * 60 * 1000 - 1) < this.getTimeInMilliseconds(disableUntil)) {
            return true;
        }
        if (this.isInitializedDate(disableSince) && dateMs > this.getTimeInMilliseconds(disableSince)) {
            return true;
        }
        if (disableWeekends) {
            /** @type {?} */
            const dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return true;
            }
        }
        /** @type {?} */
        const dn = this.getDayNumber(date);
        if (disableWeekdays.length > 0) {
            for (const wd of disableWeekdays) {
                if (dn === this.getWeekdayIndex(wd)) {
                    return true;
                }
            }
        }
        for (const d of disableDates) {
            if ((d.year === 0 || d.year === date.year) &&
                (d.month === 0 || d.month === date.month) &&
                d.day === date.day) {
                return true;
            }
        }
        for (const d of disableDateRanges) {
            if (this.isInitializedDate(d.begin) &&
                this.isInitializedDate(d.end) &&
                dateMs >= this.getTimeInMilliseconds(d.begin) &&
                dateMs <= this.getTimeInMilliseconds(d.end)) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} date
     * @param {?} markedDates
     * @param {?} markWeekends
     * @return {?}
     */
    isMarkedDate(date, markedDates, markWeekends) {
        for (const md of markedDates) {
            for (const d of md.dates) {
                if ((d.year === 0 || d.year === date.year) &&
                    (d.month === 0 || d.month === date.month) &&
                    d.day === date.day) {
                    return { marked: true, color: md.color };
                }
            }
        }
        if (markWeekends && markWeekends.marked) {
            /** @type {?} */
            const dayNbr = this.getDayNumber(date);
            if (dayNbr === 0 || dayNbr === 6) {
                return { marked: true, color: markWeekends.color };
            }
        }
        return { marked: false, color: EMPTY_STR };
    }
    /**
     * @param {?} date
     * @param {?} sunHighlight
     * @param {?} satHighlight
     * @param {?} highlightDates
     * @return {?}
     */
    isHighlightedDate(date, sunHighlight, satHighlight, highlightDates) {
        /** @type {?} */
        const dayNbr = this.getDayNumber(date);
        if ((sunHighlight && dayNbr === 0) || (satHighlight && dayNbr === 6)) {
            return true;
        }
        for (const d of highlightDates) {
            if ((d.year === 0 || d.year === date.year) &&
                (d.month === 0 || d.month === date.month) &&
                d.day === date.day) {
                return true;
            }
        }
        return false;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getWeekNumber(date) {
        /** @type {?} */
        const d = new Date(date.year, date.month - 1, date.day, 0, 0, 0, 0);
        d.setDate(d.getDate() + (d.getDay() === 0 ? -3 : 4 - d.getDay()));
        return Math.round((d.getTime() - new Date(d.getFullYear(), 0, 4).getTime()) / 86400000 / 7) + 1;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getNowWeekTime(date) {
        date.setDate(date.getDate() - ((date.getDay() + 6) % 7));
        /** @type {?} */
        const begin = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        date.setDate(date.getDate() + 6);
        /** @type {?} */
        const end = {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
        return { begin, end };
    }
    /**
     * @param {?} date
     * @param {?} disableUntil
     * @return {?}
     */
    isMonthDisabledByDisableUntil(date, disableUntil) {
        return (this.isInitializedDate(disableUntil) &&
            this.getTimeInMilliseconds(date) <= this.getTimeInMilliseconds(disableUntil));
    }
    /**
     * @param {?} date
     * @param {?} disableSince
     * @return {?}
     */
    isMonthDisabledByDisableSince(date, disableSince) {
        return (this.isInitializedDate(disableSince) &&
            this.getTimeInMilliseconds(date) >= this.getTimeInMilliseconds(disableSince));
    }
    /**
     * @param {?} date
     * @param {?} dateRange
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @param {?} rangeDelimiter
     * @param {?} returnFormat
     * @param {?=} dateStr
     * @return {?}
     */
    getDateModel(date, dateRange, dateFormat, monthLabels, rangeDelimiter, returnFormat, dateStr = EMPTY_STR) {
        /** @type {?} */
        let singleDateModel = null;
        /** @type {?} */
        let dateRangeModel = null;
        if (date) {
            singleDateModel = {
                date,
                jsDate: this.getDate2(date),
                formatted: dateStr.length ? dateStr : this.formatDate(date, dateFormat, monthLabels),
                returnFormatted: this.formatDate(date, returnFormat, monthLabels),
                epoc: this.getEpocTime(date)
            };
        }
        else {
            dateRangeModel = {
                beginDate: dateRange.begin,
                beginJsDate: this.getDate(dateRange.begin),
                beginEpoc: this.getEpocTime(dateRange.begin),
                endDate: dateRange.end,
                endJsDate: this.getDate(dateRange.end),
                endEpoc: this.getEpocTime(dateRange.end),
                formatted: this.formatDate(dateRange.begin, dateFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, dateFormat, monthLabels),
                returnFormatted: this.formatDate(dateRange.begin, returnFormat, monthLabels) +
                    rangeDelimiter +
                    this.formatDate(dateRange.end, returnFormat, monthLabels),
            };
        }
        return {
            isRange: date === null,
            singleDate: singleDateModel,
            dateRange: dateRangeModel
        };
    }
    /**
     * @param {?} date
     * @param {?} dateFormat
     * @param {?} monthLabels
     * @return {?}
     */
    formatDate(date, dateFormat, monthLabels) {
        if (!date.month && dateFormat.indexOf(MM) === -1) {
            dateFormat = this.delete(dateFormat, MM);
        }
        if (!date.day && dateFormat.indexOf(DD) === -1) {
            dateFormat = this.delete(dateFormat, DD);
        }
        /** @type {?} */
        let formatted = dateFormat.replace(YYYY, String(date.year));
        if (dateFormat.indexOf(M) === -1) {
            formatted = formatted.replace(MM, '01');
        }
        else {
            if (dateFormat.indexOf(MMM) !== -1) {
                formatted = formatted.replace(MMM, monthLabels[date.month]);
            }
            else if (dateFormat.indexOf(MM) !== -1) {
                formatted = formatted.replace(MM, this.preZero(date.month || 1));
            }
            else {
                formatted = formatted.replace(M, String(date.month || 1));
            }
        }
        if (dateFormat.indexOf(DD) === -1) {
            formatted = formatted.replace(DD, '01');
        }
        else if (dateFormat.indexOf(DD) !== -1) {
            formatted = formatted.replace(DD, this.preZero(date.day || 1));
        }
        else {
            formatted = formatted.replace(D, String(date.day || 1));
        }
        formatted = formatted.replace('MM', 'mm').replace('HH', this.preZero(date.hour || 0))
            .replace('mm', this.preZero(date.minute || 0))
            .replace('ss', this.preZero(date.second || 0));
        return formatted && formatted.length > 2 ? formatted : '';
    }
    /**
     * @param {?} format
     * @param {?} delStr
     * @return {?}
     */
    delete(format, delStr) {
        /** @type {?} */
        const re = format.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        const index = format.indexOf(delStr);
        if (index < 0) {
            return format;
        }
        else if (index === 0) {
            if (re) {
                return format.substring(3);
            }
            else {
                return format.substring(2);
            }
        }
        else if (index + 2 === format.length) {
            if (re) {
                return format.substring(0, format.length - 3);
            }
            else {
                return format.substring(0, format.length - 2);
            }
        }
        else {
            if (re) {
                return format.substring(0, index) + format.substring(index + 3);
            }
            else {
                return format.substring(0, index) + format.substring(index + 2);
            }
        }
    }
    /**
     * @param {?} model
     * @return {?}
     */
    getFormattedDate(model) {
        return !model.isRange ? model.singleDate.formatted : model.dateRange.formatted;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    preZero(val) {
        return val < 10 ? ZERO_STR + Number(val) : String(val);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedDate(date) {
        return date && date.year !== 0 && date.month !== 0 && date.day !== 0;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedMonth(date) {
        return date && date.year !== 0 && date.month !== 0;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isInitializedYear(date) {
        return date && date.year !== 0;
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateEarlier(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) < this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateSameOrEarlier(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) <= this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} firstDate
     * @param {?} secondDate
     * @return {?}
     */
    isDateSame(firstDate, secondDate) {
        return this.getTimeInMilliseconds(firstDate) === this.getTimeInMilliseconds(secondDate);
    }
    /**
     * @param {?} dateRange
     * @param {?} date
     * @return {?}
     */
    isDateRangeBeginOrEndSame(dateRange, date) {
        /** @type {?} */
        const dateMs = this.getTimeInMilliseconds(date);
        return (this.getTimeInMilliseconds(dateRange.begin) === dateMs ||
            this.getTimeInMilliseconds(dateRange.end) === dateMs);
    }
    /**
     * @param {?} date
     * @param {?} dateRange
     * @return {?}
     */
    isDateInRange(date, dateRange) {
        if (!this.isInitializedDate(dateRange.begin) || !this.isInitializedDate(dateRange.end)) {
            return false;
        }
        return this.isDateSameOrEarlier(dateRange.begin, date) && this.isDateSameOrEarlier(date, dateRange.end);
    }
    /**
     * @return {?}
     */
    resetDate() {
        return { year: 0, month: 0, day: 0 };
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getTimeInMilliseconds(date) {
        return this.getDate(date).getTime();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate2(date) {
        /** @type {?} */
        const now = new Date();
        if (!date.year) {
            date.year = now.getFullYear();
        }
        if (!date.month) {
            date.month = now.getMonth() + 1;
        }
        if (!date.day) {
            date.day = 1;
        }
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDate(date) {
        return new Date(date.year || 0, date.month ? date.month - 1 : 0, date.day || 0, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayNumber(date) {
        return new Date(date.year, date.month - 1, date.day, date.hour ? date.hour : 0, date.minute ? date.minute : 0, date.second ? date.second : 0, 0).getDay();
    }
    /**
     * @param {?} wd
     * @return {?}
     */
    getWeekdayIndex(wd) {
        return this.weekDays.indexOf(wd);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getEpocTime(date) {
        return Math.round(this.getTimeInMilliseconds(date) / 1000.0);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getKeyCodeFromEvent(event) {
        /** @type {?} */
        const key = event.key || event.keyCode;
        if (key === KeyName.enter || key === KeyCode.enter) {
            return KeyCode.enter;
        }
        else if (key === KeyName.esc || key === KeyCode.esc) {
            return KeyCode.esc;
        }
        else if (key === KeyName.space || key === KeyCode.space) {
            return KeyCode.space;
        }
        else if (key === KeyName.leftArrow || key === KeyCode.leftArrow) {
            return KeyCode.leftArrow;
        }
        else if (key === KeyName.upArrow || key === KeyCode.upArrow) {
            return KeyCode.upArrow;
        }
        else if (key === KeyName.rightArrow || key === KeyCode.rightArrow) {
            return KeyCode.rightArrow;
        }
        else if (key === KeyName.downArrow || key === KeyCode.downArrow) {
            return KeyCode.downArrow;
        }
        else if (key === KeyName.tab || key === KeyCode.tab) {
            return KeyCode.tab;
        }
        else if (key === KeyName.shift || key === KeyCode.shift) {
            return KeyCode.shift;
        }
        else {
            return null;
        }
    }
    /**
     * @param {?} now
     * @param {?} min
     * @param {?} max
     * @return {?}
     */
    getNearDate(now, min, max) {
        /** @type {?} */
        const minMilliseconds = this.getTimeInMilliseconds(min);
        /** @type {?} */
        const maxMilliseconds = this.getTimeInMilliseconds(max);
        /** @type {?} */
        const nowMilliseconds = this.getTimeInMilliseconds(now);
        if (maxMilliseconds - nowMilliseconds > nowMilliseconds - minMilliseconds) {
            return min;
        }
        else {
            return max;
        }
    }
    // 禁用时间对应的小时
    // 选中日期等于左区间日期时，禁用左端点的左部分[0，minHour）
    // 选中日期等于右区间日期时，禁用右端点的右部分(maxHour,23]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} currentDate
     * @return {?}
     */
    disabledHours(min, max, currentDate) {
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            while (minHour-- >= 0) {
                res.push(minHour);
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            while (maxHour++ < 24) {
                res.push(maxHour);
            }
        }
        return res;
    }
    //禁用时间对应的分钟 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minMinute）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxMinute，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} currentDate
     * @return {?}
     */
    disabledMinutes(min, max, _hour, currentDate) {
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let maxMinute = max.minute;
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let minMinute = min.minute;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour) {
                while (minMinute-- >= 0) {
                    res.push(minMinute);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour) {
                while (maxMinute++ < 60) {
                    res.push(maxMinute);
                }
            }
        }
        return res;
    }
    //禁用时间对应的秒 
    //选中日期等于左区间日期时，禁用左端点的左部分[0，minSecond）
    //选中日期等于右区间日期时，禁用右端点的右部分（maxSecond，59]
    /**
     * @param {?} min
     * @param {?} max
     * @param {?} _hour
     * @param {?} _minute
     * @param {?} currentDate
     * @return {?}
     */
    disabledSeconds(min, max, _hour, _minute, currentDate) {
        /** @type {?} */
        let maxHour = max.hour;
        /** @type {?} */
        let maxMinute = max.minute;
        /** @type {?} */
        let maxSecond = max.second;
        /** @type {?} */
        let minHour = min.hour;
        /** @type {?} */
        let minMinute = min.minute;
        /** @type {?} */
        let minSecond = min.second;
        /** @type {?} */
        let res = [];
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: min.year, month: min.month, day: min.day })) {
            if (_hour == minHour && _minute == minMinute) {
                while (minSecond-- >= 0) {
                    res.push(minSecond);
                }
            }
        }
        if (this.isDateSame({ year: currentDate.year, month: currentDate.month, day: currentDate.day }, { year: max.year, month: max.month, day: max.day })) {
            if (_hour == maxHour && _minute == maxMinute) {
                while (maxSecond++ < 60) {
                    res.push(maxSecond);
                }
            }
        }
        return res;
    }
    /**
     * @private
     * @param {?} dt
     * @param {?} dynamicLocale
     * @return {?}
     */
    getDateTypeString(dt, dynamicLocale) {
        switch (dt) {
            case 'week':
                return dynamicLocale.week || '周';
            case 'day':
                return dynamicLocale.day || '天';
            case 'month':
                return dynamicLocale.month || '月';
            case 'year':
                return dynamicLocale.year || '年';
        }
    }
    /**
     * @param {?} val
     * @param {?} dynamicLocale
     * @return {?}
     */
    formatDynamicValue(val, dynamicLocale) {
        if (val) {
            /** @type {?} */
            let fval = '';
            switch (val.name) {
                case 'present_day': // 今天
                    fval = dynamicLocale.today || '今天';
                    break;
                case 'present_month': // 本月
                    fval = dynamicLocale.presentMonth || '本月';
                    break;
                case 'present_year':
                    fval = dynamicLocale.presentYear || '本年';
                    break;
                case 'previou':
                    fval = (dynamicLocale.previous || '过去') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'future':
                    fval = (dynamicLocale.future || '未来') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType, dynamicLocale);
                    break;
                case 'present_first':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.first || '第 1 天');
                    break;
                case 'present_last':
                    fval = (dynamicLocale.current || '本') + this.getDateTypeString(val.dateType, dynamicLocale) + (dynamicLocale.last || '最后 1 天');
                    break;
            }
            return fval;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} str
     * @return {?}
     */
    padStartZero(str) {
        if (str != null && str !== undefined) {
            return ('' + str).padStart(2, '0');
        }
        return '00';
    }
    /**
     * @param {?} items
     * @param {?=} order
     * @return {?}
     */
    orderSelectedDates(items, order = 'none') {
        if (order !== 'asc' && order !== 'desc') {
            order = 'none';
        }
        if (order === 'none') {
            return items;
        }
        return orderBy(items, ['year', 'month', 'day'], [order, order, order]);
    }
}
UtilService.decorators = [
    { type: Injectable }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatePickerService {
    /**
     * @param {?} opts
     */
    constructor(opts) {
        this._mouseWheelHandle = null;
        this._mouseScrollHandle = null;
        this.opts = opts;
        this.utilService = new UtilService();
    }
    /**
     * @param {?} opts
     * @param {?} defaultOpts
     * @return {?}
     */
    static parseOptions(opts, defaultOpts) {
        if (defaultOpts !== undefined) {
            Object.keys(defaultOpts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                if (defaultOpts[k] !== undefined && defaultOpts[k] !== '') {
                    ((/** @type {?} */ (opts)))[k] = defaultOpts[k];
                }
            }));
        }
        if (opts.minYear < Year.min) {
            opts.minYear = Year.min;
        }
        if (opts.maxYear > Year.max) {
            opts.maxYear = Year.max;
        }
        return opts;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    validate(value) {
        const { dateRange } = this.opts;
        /** @type {?} */
        let valid = false;
        if (!dateRange) {
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            valid = this.utilService.isInitializedDate(date);
        }
        else {
            /** @type {?} */
            const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            const { begin, end } = _dateRange;
            valid = this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end);
        }
        return valid;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerScrollEvent(fn) {
        this._mouseScrollHandle = fn;
        document.addEventListener('scroll', this._mouseScrollHandle);
    }
    /**
     * @return {?}
     */
    removeMouseEvent() {
        /** @type {?} */
        const container = document.querySelector('.date-overlay-container');
        if (container) {
            container.removeEventListener('mousewheel', this._mouseWheelHandle);
        }
        document.removeEventListener('scroll', this._mouseScrollHandle);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    appendSelector(elem) {
        /** @type {?} */
        let container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.addEventListener('mousewheel', this._mouseWheelHandle = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const target = (/** @type {?} */ (e.target));
            if (!target.closest('.calendar-time-picker-select')) {
                e.preventDefault();
            }
            return;
        }));
        container.appendChild(elem);
    }
    /**
     * @param {?} elem
     * @param {?=} calendarRef
     * @return {?}
     */
    getSelectorPosition(elem, calendarRef = null) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let _selectorHeight = 0;
        /** @type {?} */
        let _selectorWidth = 0;
        const { selectorHeight, selectorWidth, showTime, dateRange, showType, enableDynamic, showPresent, multiSelect, viewType } = this.opts;
        /** @type {?} */
        const b = document.body.getBoundingClientRect();
        /** @type {?} */
        const e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        let position = 'bottom';
        if ((dateRange || multiSelect || (viewType === 'together' && showTime)) && showType !== 4) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        _selectorHeight = this.getSelectorDimension(selectorHeight);
        // if (showTime || enableDynamic) {
        //     top = top - 6;
        // }
        top = top - 6;
        if ((showPresent && (!dateRange || showType === 4)) || showTime || enableDynamic) {
            _selectorHeight += 45;
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (window.innerHeight - top < _selectorHeight) {
            top = top - (_selectorHeight - (window.innerHeight - e.top - e.height - 15));
            if (calendarRef) {
                /** @type {?} */
                const calendarElem = calendarRef.location.nativeElement;
                /** @type {?} */
                const arrow = calendarElem.querySelector('.arrow');
                if (arrow) {
                    arrow.style.display = 'none';
                }
            }
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        /** @type {?} */
        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
        top -= scrollTop;
        return { top, left, position };
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getSelectorDimension(value) {
        return Number(value.replace(PX, EMPTY_STR));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
const ViewType = {
    Switch: 'switch',
    Together: 'together',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CalendarComponent {
    /**
     * @param {?} renderer
     * @param {?} cdr
     * @param {?} utilService
     */
    constructor(renderer, cdr, utilService) {
        this.renderer = renderer;
        this.cdr = cdr;
        this.utilService = utilService;
        this.position = 'static';
        this.dynamicViewShow = new EventEmitter();
        this.dateHlp = null;
        this.visibleMonth = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.visibleMonth_range = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.selectedMonth = { monthNbr: 0, year: 0 };
        this.selectedMonth_range = { monthNbr: 0, year: 0 };
        this.selectedDate = { year: 0, month: 0, day: 0 };
        this.selectedDateRange = { begin: { year: 0, month: 0, day: 0 }, end: { year: 0, month: 0, day: 0 } };
        this.selectedWeek = { weekNbr: 0, year: 0 };
        this.weekDays = [];
        this.dates = [];
        this.dates_range = [];
        this.months = [];
        this.months_range = [];
        this.years = [];
        this.years_range = [];
        this.multiSelect = false;
        this.dayIdx = 0;
        this.weekDayOpts = [SU, MO, TU, WE, TH, FR, SA];
        this.selectMonth = false;
        this.selectMonth_range = false;
        this.selectYear = false;
        this.selectYear_range = false;
        this.selectTime = false;
        this.selectorPos = null;
        this.scrollDiff = 0;
        this.prevViewDisabled = false;
        this.nextViewDisabled = false;
        this.prevDobViewDisabled = false;
        this.nextDobViewDisabled = false;
        this.prevViewDisabled_range = false;
        this.nextViewDisabled_range = false;
        this.prevDobViewDisabled_range = false;
        this.nextDobViewDisabled_range = false;
        /**
         * 多选
         */
        this.selectedDates = [];
        // 禁用日期时间控件中的时间段的小时
        this.disabledHours = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes = (/**
         * @param {?} hour
         * @return {?}
         */
        (hour) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        (hour, minute) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.disabledHours2 = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes2 = (/**
         * @param {?} hour
         * @return {?}
         */
        (hour) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds2 = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        (hour, minute) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.btnDynamicDisabled = true;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getTimeStr(date) {
        /** @type {?} */
        const hour = this.utilService.preZero(date.getHours());
        /** @type {?} */
        const minute = this.utilService.preZero(date.getMinutes());
        /** @type {?} */
        const second = this.utilService.preZero(date.getSeconds());
        return `${hour}:${minute}:${second}`;
    }
    /**
     * @param {?} opts
     * @param {?} defaultMonth
     * @param {?} selectorPos
     * @param {?} inputValue
     * @param {?} dc
     * @param {?} cvc
     * @param {?} rds
     * @param {?} cbe
     * @return {?}
     */
    initialize(opts, defaultMonth, selectorPos, inputValue, dc, cvc, rds, cbe) {
        this.opts = opts;
        this.selectorPos = selectorPos;
        this.weekDays.length = 0;
        const { defaultView, dateRange, firstDayOfWeek, dayLabels, stylesData, yearTxt, multiSelect, separator, selectedOrderBy } = this.opts;
        this.visibleMonth.yearTxt = yearTxt;
        this.visibleMonth_range.yearTxt = yearTxt;
        this.multiSelect = multiSelect;
        // if (stylesData.styles.length) {
        //     const styleElTemp: any = this.renderer.createElement(STYLE);
        //     this.renderer.appendChild(styleElTemp, this.renderer.createText(stylesData.styles));
        //     this.renderer.appendChild(this.styleEl.nativeElement, styleElTemp);
        // }
        this.dayIdx = this.weekDayOpts.indexOf(firstDayOfWeek);
        if (this.dayIdx !== -1) {
            /** @type {?} */
            let idx = this.dayIdx;
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < this.weekDayOpts.length; i++) {
                this.weekDays.push(dayLabels[this.weekDayOpts[idx]]);
                idx = this.weekDayOpts[idx] === SA ? 0 : idx + 1;
            }
        }
        /** @type {?} */
        let today = this.getToday();
        /** @type {?} */
        const isInDisableRange = this.utilService.isDisabledDate(today, this.opts);
        today = !isInDisableRange ? today : this.utilService.getNearDate(today, this.opts.disableUntil, this.opts.disableSince);
        switch (defaultView) {
            case DefaultView.Month:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 1 };
                break;
            case DefaultView.Year:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 10 };
                break;
            default:
                this.selectedMonth = { monthNbr: today.month, year: today.year };
                if (today.month >= 12) {
                    this.selectedMonth_range = { monthNbr: 1, year: today.year + 1 };
                }
                else {
                    this.selectedMonth_range = { monthNbr: today.month + this.opts.monthRangeValue, year: today.year };
                }
                break;
        }
        if (defaultMonth && defaultMonth.length) {
            this.selectedMonth = this.utilService.parseDefaultMonth(defaultMonth);
            this.selectedMonth_range = this.utilService.parseDefaultMonth(defaultMonth);
            if (this.selectedMonth_range.monthNbr >= 12) {
                this.selectedMonth_range.year++;
                this.selectedMonth_range.monthNbr = 1;
            }
            else {
                this.selectedMonth_range.monthNbr = this.selectedMonth_range.monthNbr + this.opts.monthRangeValue;
            }
        }
        // 日期多选
        if (this.multiSelect && inputValue) {
            this.selectedDates = inputValue.split(separator).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.opts.returnFormat === 'yyyyMMdd') {
                    if (n.length > 8) {
                        n = this.dateHlp.formatTo(n, this.opts.returnFormat);
                    }
                }
                /** @type {?} */
                const _dObj = this.utilService.isDateValid(n, this.opts, true);
                return Object.assign({}, _dObj, { value: this.utilService.formatDate(_dObj, this.opts.dateFormat, this.opts.monthLabels) });
            }));
            this.selectedDates = this.utilService.orderSelectedDates(this.selectedDates, selectedOrderBy);
        }
        else {
            if (!dateRange) {
                // Single date mode
                /** @type {?} */
                const date = this.utilService.isDateValid(inputValue, this.opts, true);
                if (this.utilService.isInitializedDate(date)) {
                    this.selectedDate = date;
                    /** @type {?} */
                    const hour = this.utilService.preZero(date.hour);
                    /** @type {?} */
                    const minute = this.utilService.preZero(date.minute);
                    /** @type {?} */
                    const second = this.utilService.preZero(date.second);
                    this.timeVlaue = `${hour}:${minute}:${second}`;
                    this.selectedMonth = { monthNbr: date.month, year: date.year };
                }
            }
            else {
                // Date range mode
                const { begin, end } = this.utilService.isDateValidDateRange(inputValue, this.opts);
                if (this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end)) {
                    this.selectedDateRange = { begin, end };
                    /** @type {?} */
                    const hour = this.utilService.preZero(begin.hour);
                    /** @type {?} */
                    const minute = this.utilService.preZero(begin.minute);
                    /** @type {?} */
                    const second = this.utilService.preZero(begin.second);
                    this.timeVlaue = `${hour}:${minute}:${second}`;
                    /** @type {?} */
                    const _hour = this.utilService.preZero(end.hour);
                    /** @type {?} */
                    const _minute = this.utilService.preZero(end.minute);
                    /** @type {?} */
                    const _second = this.utilService.preZero(end.second);
                    this.timeVlaue_range = `${_hour}:${_minute}:${_second}`;
                    this.selectedMonth = { monthNbr: begin.month, year: begin.year };
                    if (begin.month === end.month && begin.year === end.year) {
                        if (end.month >= 12) {
                            this.selectedMonth_range = { monthNbr: 1, year: end.year + 1 };
                        }
                        else {
                            /** @type {?} */
                            let endyear = end.year;
                            if (defaultView === DefaultView.Month) {
                                endyear = endyear + 1;
                            }
                            this.selectedMonth_range = { monthNbr: end.month + this.opts.monthRangeValue, year: endyear };
                        }
                    }
                    else {
                        if (defaultView === DefaultView.Month && begin.year === end.year) {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year + 1 };
                        }
                        else {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year };
                        }
                    }
                    // tfs 579358
                    // let endDayWeekNbr = this.utilService.getWeekNumber(end);
                    // if (this.opts.firstDayOfWeek === 'su') {
                    //     endDayWeekNbr -= 1;
                    // }
                    // const weekNbr = this.utilService.getWeekNumber(begin) === endDayWeekNbr ? this.utilService.getWeekNumber(begin): 0;
                    /** @type {?} */
                    const dateObj = this.opts.firstDayOfWeek == 'su' ? end : begin;
                    /** @type {?} */
                    let weekNbr = this.utilService.getWeekNumber(dateObj);
                    this.selectedWeek = { weekNbr, year: begin.year };
                }
            }
        }
        this.dateChanged = dc;
        this.calendarViewChanged = cvc;
        this.rangeDateSelection = rds;
        this.closedByEsc = cbe;
        this.setCalendarVisibleMonth();
        if (defaultView === DefaultView.Month) {
            this.onMonthViewBtnClicked();
            if (dateRange) {
                this.onMonthViewBtnClicked(true);
            }
        }
        else if (defaultView === DefaultView.Year) {
            this.onYearViewBtnClicked();
            if (dateRange) {
                this.onYearViewBtnClicked(true);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetDateValue(value) {
        if (value === ResetDateType.singleDate || value === ResetDateType.both) {
            this.selectedDate = this.utilService.resetDate();
        }
        if (value === ResetDateType.dateRange || value === ResetDateType.both) {
            this.selectedDateRange.begin = this.utilService.resetDate();
            this.selectedDateRange.end = this.utilService.resetDate();
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    resetMonthYearSelect(isSecondCalendar) {
        if (!isSecondCalendar) {
            this.selectMonth = false;
            this.selectYear = false;
        }
        else {
            this.selectMonth_range = false;
            this.selectYear_range = false;
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthViewBtnClicked(isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.selectMonth = !this.selectMonth;
            this.selectYear = false;
            if (this.selectMonth) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth.year = this.selectedMonth.year;
            }
        }
        else {
            this.selectMonth_range = !this.selectMonth_range;
            this.selectYear_range = false;
            if (this.selectMonth_range) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth_range.year = this.selectedMonth_range.year;
            }
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} cell
     * @param {?} isSecondCalendar
     * @return {?}
     */
    onMonthCellClicked(cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            const { year, monthNbr } = this.visibleMonth;
            /** @type {?} */
            const mc = cell.nbr !== monthNbr;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth = false;
            }
        }
        else {
            const { year, monthNbr } = this.visibleMonth_range;
            /** @type {?} */
            const mc = cell.nbr !== monthNbr;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth_range);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth_range = false;
            }
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onMonthCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, MONTH_ROW_COUNT, MONTH_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(M, targetRow, targetCol);
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearViewBtnClicked(isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.visibleMonth.year = this.selectedMonth.year;
            if (!this.selectYear) {
                this.generateYears(this.visibleMonth.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false, isSecondCalendar);
            }
            this.selectYear = this.opts.showType === 3 ? true : !this.selectYear;
            if (this.opts.showType === 2) {
                this.selectMonth = !this.selectMonth;
            }
            else {
                this.selectMonth = false;
            }
            // this.selectYear = !this.selectYear;
            // this.selectMonth = false;
        }
        else {
            this.visibleMonth_range.year = this.selectedMonth_range.year;
            if (!this.selectYear_range) {
                this.generateYears(this.visibleMonth_range.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth_range.monthNbr, this.visibleMonth_range.year, false, isSecondCalendar);
            }
            this.selectYear_range = this.opts.showType === 3 ? true : !this.selectYear_range;
            if (this.opts.showType === 2) {
                this.selectMonth_range = !this.selectMonth_range;
            }
            else {
                this.selectMonth_range = false;
            }
        }
        this.cdr.detectChanges();
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellClicked(cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            const { year, monthNbr, monthTxt } = this.visibleMonth;
            /** @type {?} */
            const yc = cell.year !== year;
            this.visibleMonth = { monthTxt, monthNbr, year: cell.year, yearTxt: this.opts.yearTxt };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear = false;
                this.selectMonth = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear = false;
            }
        }
        else {
            const { year, monthNbr, monthTxt } = this.visibleMonth_range;
            /** @type {?} */
            const yc = cell.year !== year;
            this.visibleMonth_range = {
                monthTxt,
                monthNbr,
                year: cell.year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth_range.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear_range = false;
                this.selectMonth_range = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear_range = false;
            }
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onYearCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, YEAR_ROW_COUNT, YEAR_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(Y, targetRow, targetCol);
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateMonths(isSecondCalendar) {
        /** @type {?} */
        const today = this.getToday();
        const { disableUntil, disableSince } = this.opts;
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        let year;
        /** @type {?} */
        let monthNbr;
        if (!isSecondCalendar) {
            this.months.length = 0;
            year = this.visibleMonth.year;
            monthNbr = this.visibleMonth.monthNbr;
        }
        else {
            this.months_range.length = 0;
            year = this.visibleMonth_range.year;
            monthNbr = this.visibleMonth_range.monthNbr;
        }
        for (let i = 1; i <= 12; i += 3) {
            /** @type {?} */
            const row = [];
            for (let j = i; j < i + 3; j++) {
                /** @type {?} */
                const disabled = this.utilService.isMonthDisabledByDisableUntil({ year, month: j, day: this.daysInMonth(j, year) }, disableUntil) || this.utilService.isMonthDisabledByDisableSince({ year, month: j, day: 1 }, disableSince);
                row.push({
                    nbr: j,
                    name: this.opts.monthLabels[j],
                    currMonth: j === today.month && year === today.year,
                    disabled,
                    monthObj: { year, month: j }
                });
            }
            if (!isSecondCalendar) {
                this.months.push({ row, year });
            }
            else {
                this.months_range.push({ row, year });
            }
        }
        this.setMonthViewHeaderBtnDisabledState(year, isSecondCalendar);
        this.generateCalendar(isSecondCalendar ? this.visibleMonth_range.monthNbr : this.visibleMonth.monthNbr, year, false, isSecondCalendar);
    }
    /**
     * @param {?} inputYear
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateYears(inputYear, isSecondCalendar) {
        const { minYear, maxYear, disableUntil, disableSince } = this.opts;
        /** @type {?} */
        let y = inputYear - (inputYear % 10);
        const { year, monthNbr } = this.visibleMonth;
        if (!isSecondCalendar) {
            this.years.length = 0;
        }
        else {
            if (!this.years_range.length && ((this.years && this.years.length) && y < this.years[3][2].year && y > this.years[0][0].year) && this.opts.showType === 3) {
                y += 10;
            }
            this.years_range.length = 0;
            /** @type {?} */
            const allYears = flatten(this.years_range);
            if (allYears.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.year == inputYear)) > -1) {
                y = this.years_range[3][2].year;
            }
        }
        /** @type {?} */
        const today = this.getToday();
        for (let i = y - 1; i < y + 10; i += 3) {
            /** @type {?} */
            const row = [];
            for (let j = i; j < i + 3; j++) {
                /** @type {?} */
                const disabled = this.utilService.isMonthDisabledByDisableUntil({
                    year: j,
                    month: monthNbr,
                    day: this.daysInMonth(monthNbr, j)
                }, disableUntil) ||
                    this.utilService.isMonthDisabledByDisableSince({ year: j, month: monthNbr, day: 1 }, disableSince);
                /** @type {?} */
                const minMax = j < minYear || j > maxYear;
                row.push({
                    year: j,
                    currYear: j === today.year,
                    selected: j === year,
                    disabled: disabled || minMax,
                    yearObj: { year: j }
                });
            }
            if (!isSecondCalendar) {
                this.years.push(row);
            }
            else {
                this.years_range.push(row);
            }
        }
        if (!isSecondCalendar) {
            this.setYearViewHeaderBtnDisabledState(this.years[0][1].year, this.years[3][1].year, isSecondCalendar);
        }
        else {
            this.setYearViewHeaderBtnDisabledState(this.years_range[0][1].year, this.years_range[3][1].year, isSecondCalendar);
        }
    }
    /**
     * @return {?}
     */
    setCalendarVisibleMonth() {
        // Sets visible month of calendar
        const { year, monthNbr } = this.selectedMonth;
        this.visibleMonth = {
            monthTxt: this.opts.monthLabels[monthNbr],
            monthNbr,
            year,
            yearTxt: this.opts.yearTxt
        };
        // Create current month
        if (this.opts.dateRange) {
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[this.selectedMonth_range.monthNbr],
                monthNbr: this.selectedMonth_range.monthNbr,
                year: this.selectedMonth_range.year,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(this.selectedMonth_range.monthNbr, this.selectedMonth_range.year, true, true);
        }
        this.generateCalendar(monthNbr, year, true, false);
    }
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onPrevNavigateBtnClicked(event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10, isSecondCalendar);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10, isSecondCalendar);
                }
            }
        }
    }
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onNextNavigateBtnClicked(event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @param {?=} isNext
     * @return {?}
     */
    setDateViewMonth(isSecondCalendar, isNext) {
        /** @type {?} */
        let change;
        if (isNext === undefined) {
            change = 0;
        }
        else {
            change = isNext ? 1 : -1;
        }
        if (!isSecondCalendar) {
            const { year, monthNbr } = this.visibleMonth;
            /** @type {?} */
            const d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            const y = d.getFullYear();
            /** @type {?} */
            const m = d.getMonth() + 1;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
        else {
            const { year, monthNbr } = this.visibleMonth_range;
            /** @type {?} */
            const d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            const y = d.getFullYear();
            /** @type {?} */
            const m = d.getMonth() + 1;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCloseSelector(event) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.esc) {
            this.closedByEsc();
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellClicked(cell, isSecondCalendar) {
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        this.selectDate(cell.dateObj);
        this.resetMonthYearSelect(isSecondCalendar);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onDayCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, DATE_ROW_COUNT, DATE_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(D, targetRow, targetCol);
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                            this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
        }
        else {
            for (const w of this.dates_range) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                            this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range = false;
                }
            }
        }
        else {
            for (const w of this.dates_range) {
                for (const day of w.week) {
                    day.range = false;
                }
            }
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
        }
        else {
            for (const item of this.months_range) {
                for (const month of item.row) {
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range = false;
                }
            }
        }
        else {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range = false;
                }
            }
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.years) {
                for (const year of item) {
                    year.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                            this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                            (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                }
            }
        }
        else {
            for (const item of this.years_range) {
                for (const year of item) {
                    year.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                            this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                            (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.years) {
                for (const year of item) {
                    year.range = false;
                }
            }
        }
        else {
            for (const item of this.years_range) {
                for (const year of item) {
                    year.range = false;
                }
            }
        }
    }
    /**
     * @param {?} weekData
     * @return {?}
     */
    onWeekClicked(weekData) {
        /** @type {?} */
        const showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr: weekData.weekNbr, year: weekData.year };
        if (showTime) {
            weekData.week[0].dateObj.hour = 0;
            weekData.week[0].dateObj.minute = 0;
            weekData.week[0].dateObj.second = 0;
            weekData.week[6].dateObj.hour = 23;
            weekData.week[6].dateObj.minute = 59;
            weekData.week[6].dateObj.second = 59;
        }
        this.selectDate(weekData.week[0].dateObj);
        this.selectDate(weekData.week[6].dateObj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getSourceRowAndColumnFromEvent(event) {
        /** @type {?} */
        let sourceRow = 0;
        /** @type {?} */
        let sourceCol = 0;
        if (event.target && event.target.id) {
            // value of id is for example: m_0_1 (first number = row, second number = column)
            /** @type {?} */
            const arr = event.target.id.split(UNDER_LINE);
            sourceRow = Number(arr[1]);
            sourceCol = Number(arr[2]);
        }
        return { sourceRow, sourceCol };
    }
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} rowCount
     * @param {?} colCount
     * @return {?}
     */
    getTargetFocusRowAndColumn(event, row, col, rowCount, colCount) {
        /** @type {?} */
        let moveFocus = false;
        /** @type {?} */
        let targetRow = row;
        /** @type {?} */
        let targetCol = col;
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.upArrow && row > 0) {
            moveFocus = true;
            targetRow--;
        }
        else if (keyCode === KeyCode.downArrow && row < rowCount) {
            moveFocus = true;
            targetRow++;
        }
        else if (keyCode === KeyCode.leftArrow && col > 0) {
            moveFocus = true;
            targetCol--;
        }
        else if (keyCode === KeyCode.rightArrow && col < colCount) {
            moveFocus = true;
            targetCol++;
        }
        return { moveFocus, targetRow, targetCol };
    }
    /**
     * @param {?} type
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    focusCellElement(type, row, col) {
        /** @type {?} */
        const elem = this.selectorEl.nativeElement.querySelector(DOT + type + UNDER_LINE + row + UNDER_LINE + col);
        if (elem) {
            elem.focus();
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    selectDate(date) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // Date range
            /** @type {?} */
            const isBeginDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.end) &&
                JSON.stringify(this.selectedDateRange.begin) !== JSON.stringify(this.selectedDateRange.end);
            if (isBeginDateInitialized && isEndDateInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = date;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else if (!isBeginDateInitialized) {
                // begin date
                this.selectedDateRange.begin = date;
                if (!isEndDateInitialized) {
                    this.selectedDateRange.end = date;
                }
                this.rangeDateSelection({
                    isBegin: true,
                    date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier(date, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = date;
                    this.rangeDateSelection({
                        isBegin: true,
                        date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                else {
                    this.selectedDateRange.end = date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            // Single date
            this.selectedDate = date;
            if (!this.opts.showTime) {
                this.dateChanged(this.utilService.getDateModel(this.selectedDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
            }
            else {
                if (!this.timeVlaue && this.opts.viewType == ViewType.Together) {
                    this.timeVlaue = this.getTimeStr(new Date);
                }
            }
        }
    }
    /**
     * @param {?} month
     * @return {?}
     */
    toSelectMonth(month) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            const isBeginMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.end);
            if (isBeginMonthInitialized && isEndMonthInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginMonthInitialized) {
                // begin date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier({ year: month.year, month: month.monthNbr }, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.selectedMonth = month;
            this.dateChanged(this.utilService.getDateModel({ year: month.year, month: month.monthNbr }, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    }
    /**
     * @param {?} year
     * @return {?}
     */
    toSelectYear(year) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            const isBeginYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.end);
            if (isBeginYearInitialized && isEndYearInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = year;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginYearInitialized) {
                // begin date
                this.selectedDateRange.begin = year;
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier(year, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = year;
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = year;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.dateChanged(this.utilService.getDateModel(year, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    }
    /**
     * @param {?} y
     * @param {?} m
     * @return {?}
     */
    monthStartIdx(y, m) {
        // Month start index
        /** @type {?} */
        const d = new Date();
        d.setDate(1);
        d.setMonth(m - 1);
        d.setFullYear(y);
        /** @type {?} */
        const idx = d.getDay() + this.sundayIdx();
        return idx >= 7 ? idx - 7 : idx;
    }
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    daysInMonth(m, y) {
        // Return number of days of current month
        return new Date(y, m, 0).getDate();
    }
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    daysInPrevMonth(m, y) {
        // Return number of days of the previous month
        /** @type {?} */
        const d = this.getDate(y, m, 1);
        d.setMonth(d.getMonth() - 1);
        return this.daysInMonth(d.getMonth() + 1, d.getFullYear());
    }
    /**
     * @param {?} d
     * @param {?} m
     * @param {?} y
     * @param {?} cmo
     * @param {?} today
     * @return {?}
     */
    isCurrDay(d, m, y, cmo, today) {
        // Check is a given date the today
        return d === today.day && m === today.month && y === today.year && cmo === MonthId.curr;
    }
    /**
     * @return {?}
     */
    getWidth() {
        /** @type {?} */
        const hasShortCuts = this.opts.shortcuts && this.opts.shortcuts.length > 0;
        if (this.opts.dateRange && this.opts.showType !== 4) {
            return hasShortCuts ? '660px' : '574px';
        }
        else {
            /** @type {?} */
            const w = (hasShortCuts ? 380 : 287) + ((this.opts.viewType === ViewType.Together || this.multiSelect) ? 200 : 0);
            return w + 'px';
        }
    }
    /**
     * @return {?}
     */
    getToday() {
        /** @type {?} */
        const date = new Date();
        if (this.opts.showTime) {
            return {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate(),
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds()
            };
        }
        else {
            return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayNumber(date) {
        // Get day number: su=0, mo=1, tu=2, we=3 ...
        /** @type {?} */
        const d = this.getDate(date.year, date.month, date.day);
        return d.getDay();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getWeekday(date) {
        // Get weekday: su, mo, tu, we ...
        return this.weekDayOpts[this.getDayNumber(date)];
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getDate(year, month, day) {
        // Creates a date object from given year, month and day
        return new Date(year, month - 1, day, 0, 0, 0, 0);
    }
    /**
     * @return {?}
     */
    sundayIdx() {
        // Index of Sunday day
        return this.dayIdx > 0 ? 7 - this.dayIdx : 0;
    }
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} notifyChange
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateCalendar(m, y, notifyChange, isSecondCalendar) {
        if (!isSecondCalendar) {
            this.dates.length = 0;
        }
        else {
            this.dates_range.length = 0;
        }
        /** @type {?} */
        const today = this.getToday();
        /** @type {?} */
        const monthStart = this.monthStartIdx(y, m);
        /** @type {?} */
        const dInThisM = this.daysInMonth(m, y);
        /** @type {?} */
        const dInPrevM = this.daysInPrevMonth(m, y);
        /** @type {?} */
        let dayNbr = 1;
        /** @type {?} */
        let cmo = MonthId.prev;
        for (let i = 1; i < 7; i++) {
            /** @type {?} */
            const week = [];
            if (i === 1) {
                // First week
                /** @type {?} */
                const pm = dInPrevM - monthStart + 1;
                // Previous month
                for (let j = pm; j <= dInPrevM; j++) {
                    /** @type {?} */
                    const date = { year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: j };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(j, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                }
                cmo = MonthId.curr;
                // Current month
                /** @type {?} */
                const daysLeft = 7 - week.length;
                for (let j = 0; j < daysLeft; j++) {
                    /** @type {?} */
                    const date = { year: y, month: m, day: dayNbr };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            else {
                // Rest of the weeks
                for (let j = 1; j < 8; j++) {
                    if (dayNbr > dInThisM) {
                        // Next month
                        dayNbr = 1;
                        cmo = MonthId.next;
                    }
                    /** @type {?} */
                    const date = {
                        year: cmo === MonthId.next && m === 12 ? y + 1 : y,
                        month: cmo === MonthId.curr ? m : cmo === MonthId.next && m < 12 ? m + 1 : 1,
                        day: dayNbr
                    };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            // let weekNbr = this.opts.showWeekNumbers ? this.utilService.getWeekNumber(week[0].dateObj) : 0;
            /** @type {?} */
            let weekNbr = 0;
            if (this.opts.showWeekNumbers) {
                /** @type {?} */
                const dateIndex = this.opts.firstDayOfWeek == 'su' ? 6 : 0;
                weekNbr = this.utilService.getWeekNumber(week[dateIndex].dateObj);
                // if (this.opts.firstDayOfWeek === 'su') {
                //     endDayWeekNbr -= 1;
                // }
                // weekNbr = this.utilService.getWeekNumber(week[0].dateObj) === endDayWeekNbr ? this.utilService.getWeekNumber(week[0].dateObj): 0;
            }
            if (!isSecondCalendar) {
                this.dates.push({ week, weekNbr, year: y });
            }
            else {
                this.dates_range.push({ week, weekNbr, year: y });
            }
        }
        this.setDateViewHeaderBtnDisabledState(m, y, isSecondCalendar);
        if (notifyChange) {
            // Notify parent
            this.calendarViewChanged({
                year: y,
                month: m,
                first: { number: 1, weekday: this.getWeekday({ year: y, month: m, day: 1 }) },
                last: { number: dInThisM, weekday: this.getWeekday({ year: y, month: m, day: dInThisM }) }
            });
        }
    }
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setDateViewHeaderBtnDisabledState(m, y, isSecondCalendar) {
        /** @type {?} */
        let dpm = false;
        /** @type {?} */
        let dnm = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpm = this.utilService.isMonthDisabledByDisableUntil({
            year: m === 1 ? y - 1 : y,
            month: m === 1 ? 12 : m - 1,
            day: this.daysInMonth(m === 1 ? 12 : m - 1, m === 1 ? y - 1 : y)
        }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: m === 12 ? y + 1 : y, month: m === 12 ? 1 : m + 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled_range = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    }
    /**
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setMonthViewHeaderBtnDisabledState(y, isSecondCalendar) {
        /** @type {?} */
        let dpm = false;
        /** @type {?} */
        let dnm = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpm = this.utilService.isMonthDisabledByDisableUntil({ year: y - 1, month: 12, day: 31 }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: y + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = y === minYear || dpm;
            this.nextViewDisabled = y === maxYear || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = y === minYear || dpm;
            this.nextViewDisabled_range = y === maxYear || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    }
    /**
     * @param {?} yp
     * @param {?} yn
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setYearViewHeaderBtnDisabledState(yp, yn, isSecondCalendar) {
        /** @type {?} */
        let dpy = false;
        /** @type {?} */
        let dny = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpy = this.utilService.isMonthDisabledByDisableUntil({ year: yp - 1, month: 12, day: 31 }, disableUntil);
        dny = this.utilService.isMonthDisabledByDisableSince({ year: yn + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = yp <= minYear || dpy;
            this.nextViewDisabled = yn >= maxYear || dny;
            this.prevDobViewDisabled = yp <= minYear || dpy;
            this.nextDobViewDisabled = yn >= maxYear || dny;
        }
        else {
            this.prevViewDisabled_range = yp <= minYear || dpy;
            this.nextViewDisabled_range = yn >= maxYear || dny;
            this.prevDobViewDisabled_range = yp <= minYear || dpy;
            this.nextDobViewDisabled_range = yn >= maxYear || dny;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickTimeBtn(event) {
        event.stopPropagation();
        if (this.opts.dateRange) {
            /** @type {?} */
            const beginIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            const endIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.end);
            /** @type {?} */
            const now = new Date();
            if (!beginIsInitializedDate || !endIsInitializedDate) {
                // 直接点击确定显示本月和下月
                if (!beginIsInitializedDate) {
                    this.selectedDateRange.begin = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
                }
                /** @type {?} */
                let endYear = now.getFullYear();
                /** @type {?} */
                let endmonth = now.getMonth() + 1;
                if (endmonth >= 12) {
                    endYear = endYear + 1;
                    endmonth = 1;
                }
                // else {
                //     endmonth = endmonth + this.opts.monthRangeValue;
                // }
                this.selectedDateRange.end = Object.assign({}, this.selectedDateRange.begin);
                // this.selectedDateRange.end = { year: endYear, month: endmonth, day: now.getDate() };
                // 点击selectTime之前给dateRange赋两个时间值
                this.timeVlaue = this.getTimeStr(now);
                this.timeVlaue_range = this.getTimeStr(now);
            }
            if (!this.timeVlaue_range) {
                this.timeVlaue_range = this.getTimeStr(now);
            }
            this.timeVlaue_range = this.checkTimeValues(this.timeVlaue_range);
        }
        else {
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                /** @type {?} */
                const now = new Date();
                // 点击selectTime之前赋值
                this.timeVlaue = this.getTimeStr(now);
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        if (!this.timeVlaue) {
            /** @type {?} */
            const now = new Date();
            // 点击selectTime之前赋值
            this.timeVlaue = this.getTimeStr(now);
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        this.timeVlaue = this.checkTimeValues(this.timeVlaue);
        if (this.selectYear) {
            this.selectYear = false;
        }
        if (this.selectMonth) {
            this.selectMonth = false;
        }
        if (this.selectYear_range) {
            this.selectYear_range = false;
        }
        if (this.selectMonth_range) {
            this.selectMonth_range = false;
        }
        this.selectTime = !this.selectTime;
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowDynamicView($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = true;
        this.dynamicViewShow.emit({ showDynamicView: true });
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowDatePanel($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = false;
        this.dynamicViewShow.emit({ showDynamicView: false });
        this.cdr.detectChanges();
    }
    /**
     * @private
     * @param {?} isDateRange
     * @return {?}
     */
    getTimeValue(isDateRange) {
        /** @type {?} */
        const t = { start: null, end: null };
        if (this.timeVlaue) {
            /** @type {?} */
            const timeArr = this.timeVlaue.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
            if (timeArr.length >= 2) {
                t.start = {
                    hour: timeArr[0],
                    minute: timeArr[1],
                    second: timeArr[2] ? timeArr[2] : 0
                };
            }
        }
        else {
            /** @type {?} */
            const nowDate = new Date();
            /** @type {?} */
            const hour = nowDate.getHours();
            /** @type {?} */
            const minute = nowDate.getMinutes();
            /** @type {?} */
            const second = nowDate.getSeconds();
            if (this.opts.dateRange) {
                t.start = { hour: 0, minute: 0, second: 0 };
            }
            else {
                t.start = { hour, minute, second };
            }
        }
        if (isDateRange) {
            if (this.timeVlaue_range) {
                /** @type {?} */
                const timeArr_range = this.timeVlaue_range.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (timeArr_range.length >= 2) {
                    t.end = {
                        hour: timeArr_range[0],
                        minute: timeArr_range[1],
                        second: timeArr_range[2] ? timeArr_range[2] : 0
                    };
                }
            }
            else {
                /** @type {?} */
                const hour = 23;
                /** @type {?} */
                const minute = 59;
                /** @type {?} */
                const second = 59;
                t.end = { hour, minute, second };
            }
        }
        return t;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickOkBtn(event) {
        event.stopPropagation();
        /** @type {?} */
        let timeObj = null;
        /** @type {?} */
        let timeObj_range = null;
        /** @type {?} */
        let selectedDate = null;
        /** @type {?} */
        let selectedDate_range = null;
        if (this.opts.showTime) {
            const { start, end } = this.getTimeValue(this.opts.dateRange);
            timeObj = start;
            timeObj_range = end;
        }
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        if (!this.opts.dateRange) {
            selectedDate = Object.assign({}, this.initializedDate(this.selectedDate), timeObj);
            /** @type {?} */
            const isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
            /** @type {?} */
            const earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
            selectedDate = !isInDisableRange
                ? selectedDate
                : Object.assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
            this.checkTimeValue(selectedDate);
        }
        else {
            /** @type {?} */
            const begin = Object.assign({}, this.initializedDate(this.selectedDateRange.begin), timeObj);
            /** @type {?} */
            const end = Object.assign({}, this.initializedDate(this.selectedDateRange.end, begin), timeObj_range);
            this.checkTimeValue(begin);
            this.checkTimeValue(end);
            selectedDate_range = { begin, end };
        }
        /** @type {?} */
        const dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTodayClick($event) {
        $event.stopPropagation();
        /** @type {?} */
        let timeObj = null;
        /** @type {?} */
        let selectedDate = null;
        /** @type {?} */
        let selectedDate_range = null;
        if (this.opts.showTime) {
            const { start } = this.getTimeValue(false);
            timeObj = start;
        }
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        selectedDate = Object.assign({}, this.initializedDate({ year: 0, month: 0, day: 0 }), timeObj);
        /** @type {?} */
        const isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
        /** @type {?} */
        const earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
        selectedDate = !isInDisableRange
            ? selectedDate
            : Object.assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
        /** @type {?} */
        const dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    }
    /**
     * @param {?} $event
     * @param {?} dynamicviewRef
     * @return {?}
     */
    onDynamicOkClick($event, dynamicviewRef) {
        if (dynamicviewRef) {
            /** @type {?} */
            const text = dynamicviewRef.formatValue();
            /** @type {?} */
            const value = dynamicviewRef.getValue();
            value.text = text;
            this.opts.dynamicValueChanged(value);
        }
    }
    /**
     * @param {?} date
     * @param {?=} otherDate
     * @return {?}
     */
    initializedDate(date, otherDate = { year: 0, month: 0, day: 0 }) {
        /** @type {?} */
        const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if (!this.utilService.isInitializedDate(date) && !this.utilService.isInitializedDate(otherDate)) {
            /** @type {?} */
            const year = new Date().getFullYear();
            /** @type {?} */
            const month = new Date().getMonth() + 1;
            /** @type {?} */
            const day = new Date().getDate();
            return this.utilService.isDisabledDate({ year, month, day }, this.opts) ? this.opts.disableUntil : { year, month, day };
        }
        else if (!this.utilService.isInitializedDate(date)) {
            /** @type {?} */
            const year = otherDate.month + 1 > 12 ? otherDate.year + 1 : otherDate.year;
            /** @type {?} */
            let month = otherDate.month + 1 > 12 ? 1 : otherDate.month + this.opts.monthRangeValue;
            if (!date.month) {
                month = otherDate.month;
            }
            /** @type {?} */
            const day = otherDate.day < 1 || otherDate.day > daysInMonth[month - 1] ? 1 : otherDate.day;
            return this.utilService.isDisabledDate({ year, month, day }, this.opts) ? this.opts.disableSince : { year, month, day };
        }
        return date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    setTime(date) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        if (date instanceof Date) {
            if (this.opts.showType !== 4 && !this.opts.dateRange) {
                /** @type {?} */
                let targetDate;
                if (this.opts.showTime) {
                    targetDate = {
                        year: date.getFullYear(),
                        month: date.getMonth() + 1,
                        day: date.getDate(),
                        hour: date.getHours(),
                        minute: date.getMinutes(),
                        second: date.getSeconds()
                    };
                }
                else {
                    targetDate = { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
                }
                /** @type {?} */
                const dateModel = this.utilService.getDateModel(targetDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
            else {
                // 启用周选择时  快捷按钮参数为单个日期
                /** @type {?} */
                const dateModel = this.utilService.getDateModel(null, this.utilService.getNowWeekTime(date), dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
        }
        else if (date instanceof Object && this.opts.dateRange) {
            /** @type {?} */
            let targetDateRange;
            const { begin, end } = date;
            if (!begin || !end) {
                return;
            }
            if (this.opts.showTime) {
                targetDateRange = {
                    begin: {
                        year: begin.getFullYear(),
                        month: begin.getMonth() + 1,
                        day: begin.getDate(),
                        hour: begin.getHours(),
                        minute: begin.getMinutes(),
                        second: begin.getSeconds()
                    },
                    end: {
                        year: end.getFullYear(),
                        month: end.getMonth() + 1,
                        day: end.getDate(),
                        hour: end.getHours(),
                        minute: end.getMinutes(),
                        second: end.getSeconds()
                    }
                };
            }
            else {
                targetDateRange = {
                    begin: { year: begin.getFullYear(), month: begin.getMonth() + 1, day: begin.getDate() },
                    end: { year: end.getFullYear(), month: end.getMonth() + 1, day: end.getDate() }
                };
            }
            /** @type {?} */
            const dateModel = this.utilService.getDateModel(null, targetDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
            this.dateChanged(dateModel, closeSelectorOnDateSelect);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectCurrentWeek($event) {
        $event.stopPropagation();
        /** @type {?} */
        const firstDay = this.opts.firstDayOfWeek === 'su' ? '日' : '一';
        const { begin, end } = this.dateHlp.getNowWeekTime(new Date(), firstDay);
        /** @type {?} */
        const year = new Date().getFullYear();
        /** @type {?} */
        const weekNbr = this.utilService.getWeekNumber(begin);
        /** @type {?} */
        const showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr, year };
        if (showTime) {
            begin['hour'] = 0;
            begin['minute'] = 0;
            begin['second'] = 0;
            end['hour'] = 23;
            end['minute'] = 59;
            end['second'] = 59;
        }
        this.selectDate(begin);
        this.selectDate(end);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDynamicValueChanged($event) {
        this.btnDynamicDisabled = !$event;
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellClickedForMultiDates(cell, isSecondCalendar) {
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        const { dateFormat, monthLabels, maxSelected, closeSelectorOnDateSelect, showTime, returnFormat, selectedOrderBy } = this.opts;
        /** @type {?} */
        let selectedDates = [];
        /** @type {?} */
        const isSelected = this.selectedDates.find((/**
         * @param {?} n
         * @return {?}
         */
        n => this.utilService.isDateSame(n, cell.dateObj)));
        if (!isSelected) {
            if (!maxSelected || (maxSelected && this.selectedDates.length < maxSelected)) {
                selectedDates = [...this.selectedDates, Object.assign({}, cell.dateObj, { value: this.utilService.formatDate(cell.dateObj, dateFormat, monthLabels) })];
            }
            else {
                selectedDates = [...this.selectedDates];
                if (this.showNotify) {
                    this.showNotify();
                }
            }
        }
        else {
            selectedDates = this.selectedDates.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== isSelected));
        }
        selectedDates = this.utilService.orderSelectedDates(selectedDates, selectedOrderBy);
        this.selectedDates = selectedDates;
        this.resetMonthYearSelect(isSecondCalendar);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMultiDatesOkClicked($event) {
        $event.stopPropagation();
        this.multiDatesChanged(this.selectedDates);
    }
    /**
     * @param {?} removeItem
     * @return {?}
     */
    onMultiDateRemoved(removeItem) {
        this.selectedDates = this.selectedDates.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== removeItem));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMultiDateClear($event) {
        this.selectedDates = [];
    }
    /**
     * @return {?}
     */
    showGoBackToday() {
        const { monthNbr, year } = this.visibleMonth;
        const { year: currentYear, month } = this.getToday();
        return monthNbr != month || year != currentYear;
    }
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    setCalendarView(year, month) {
        if (this.visibleMonth.year != year || this.visibleMonth.monthNbr != month) {
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[month],
                monthNbr: month,
                year: year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = year;
            this.selectedMonth.monthNbr = month;
            //tfs638280
            this.selectMonth = false;
            this.selectYear = false;
            this.generateCalendar(month, year, true);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    gototodayView($event) {
        const { year, month } = this.getToday();
        this.setCalendarView(year, month);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectDateClicked($event) {
        if (!$event) {
            return;
        }
        const { year, month } = $event;
        this.setCalendarView(year, month);
    }
    /**
     * @private
     * @param {?} length
     * @param {?=} step
     * @param {?=} start
     * @return {?}
     */
    makeRange(length, step = 1, start = 0) {
        step = Math.ceil(step);
        return new Array(Math.ceil(length / step))
            .fill(0)
            .map((/**
         * @param {?} _
         * @param {?} i
         * @return {?}
         */
        (_, i) => (i + start) * step));
    }
    /**
     * @private
     * @return {?}
     */
    buildHours() {
        /** @type {?} */
        let hourRanges = 24;
        /** @type {?} */
        let disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        let startIndex = 0;
        /** @type {?} */
        let hourRange = this.makeRange(hourRanges, this.opts.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    buildMinutes(timeObj) {
        /** @type {?} */
        let minuteRange = this.makeRange(60, this.opts.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledMinutes &&
                    this.disabledMinutes((/** @type {?} */ (timeObj.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    buildSeconds(timeObj) {
        /** @type {?} */
        let secondRange = this.makeRange(60, this.opts.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledSeconds &&
                    this.disabledSeconds((/** @type {?} */ (timeObj.hours)), (/** @type {?} */ (timeObj.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @param {?} timeValue
     * @return {?}
     */
    checkTimeValues(timeValue) {
        if (timeValue) {
            /** @type {?} */
            let times = timeValue.split(':').map((/**
             * @param {?} n
             * @return {?}
             */
            n => parseInt(n, 10)));
            /** @type {?} */
            const timeObj = {
                hour: times[0],
                minute: times[1],
                second: times[2]
            };
            if (this.opts.hourStep > 1) {
                /** @type {?} */
                const hours = this.buildHours();
                if (!hours.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.hour))) {
                    timeObj.hour = 0;
                }
            }
            if (this.opts.minuteStep > 1) {
                /** @type {?} */
                const minutes = this.buildMinutes({ hours: timeObj.hour });
                if (!minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.minute))) {
                    timeObj.minute = 0;
                }
            }
            if (this.opts.secondStep > 1) {
                /** @type {?} */
                const seconds = this.buildSeconds({ hours: timeObj.hour, minutes: timeObj.minute });
                if (!seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.second))) {
                    timeObj.second = 0;
                }
            }
            return `${timeObj.hour || '00'}:${timeObj.minute || '00'}:${timeObj.second || '00'}`;
        }
        return timeValue;
    }
    /**
     * @param {?} dateObj
     * @return {?}
     */
    checkTimeValue(dateObj) {
        if (!this.opts.showTime) {
            return;
        }
        if (this.opts.hourStep > 1) {
            /** @type {?} */
            const hours = this.buildHours();
            if (!hours.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.hour, 10)))) {
                dateObj.hour = 0;
            }
        }
        if (this.opts.minuteStep > 1) {
            /** @type {?} */
            const minutes = this.buildMinutes({ hours: dateObj.hour });
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.minute, 10)))) {
                dateObj.minute = 0;
            }
        }
        if (this.opts.secondStep > 1) {
            /** @type {?} */
            const seconds = this.buildSeconds({ hours: dateObj.hour, minutes: dateObj.minute });
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.second, 10)))) {
                dateObj.second = 0;
            }
        }
    }
}
CalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datepicker-calendar',
                template: "<div class=\"f-datepicker-container\" #selectorEl *ngIf=\"!multiSelect\"\r\n    [ngStyle]=\"{\r\n        top: selectorPos.top + 'px',\r\n        left: selectorPos.left + 'px',\r\n        width: getWidth()\r\n    }\"\r\n    (keyup)=\"onCloseSelector($event)\"\r\n    tabindex=\"0\"\r\n    (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\"\r\n    [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\"\r\n>\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClicked($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours\"\r\n            [disabledMinutes]=\"disabledMinutes\"\r\n            [disabledSeconds]=\"disabledSeconds\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" *ngIf=\"opts.dateRange && opts.showType !== 4\">\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [visibleMonth]=\"visibleMonth_range\"\r\n            [selectMonth]=\"selectMonth_range\"\r\n            [selectYear]=\"selectYear_range\"\r\n            [prevViewDisabled]=\"prevViewDisabled_range\"\r\n            [nextViewDisabled]=\"nextViewDisabled_range\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled_range\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled_range\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked(true)\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked(true)\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth_range && !selectYear_range && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates_range\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (dayCellClicked)=\"onDayCellClicked($event, true)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave(true)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth_range\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, true)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave(true)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear_range\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event, true)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave(true)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue_range\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours2\"\r\n            [disabledMinutes]=\"disabledMinutes2\"\r\n            [disabledSeconds]=\"disabledSeconds2\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n            #endTimeRef\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-content\" *ngIf=\"!opts.dateRange && opts.viewType === 'together' && opts.showTime\" style=\"width: 190px;margin-left: 10px;\">\r\n\r\n        <div style=\"height: 41px;\r\n        border-bottom: 1px solid #E4E7EF;\r\n        text-align: center;\r\n        line-height: 40px;\r\n        font-size: 16px;\r\n        font-weight: 500;margin-bottom: 15px;\">{{ timeVlaue }}</div>\r\n\r\n        <time-picker-panel\r\n        [(ngModel)]=\"timeVlaue\"\r\n        [opened]=\"true\"\r\n        [inDatePicker]=\"true\"\r\n        [disabledHours]=\"disabledHours\"\r\n        [disabledMinutes]=\"disabledMinutes\"\r\n        [disabledSeconds]=\"disabledSeconds\"\r\n        [selectCurrentTimeWhenNull]=\"false\"\r\n        [hourStep]=\"opts.hourStep || 1\"\r\n        [minuteStep]=\"opts.minuteStep || 1\"\r\n        [secondStep]=\"opts.secondStep || 1\"\r\n        [format]=\"opts.timeFormat\"></time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\" *ngIf=\"opts.showTime || opts?.enableDynamic\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts?.enableDynamic\" style=\"text-align: left;\" (click)=\"onShowDynamicView($event)\">\r\n            {{ opts?.dynamicLocale.setting }}\r\n        </button>\r\n\r\n        <button (click)=\"onClickTimeBtn($event)\" class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts.showTime && opts.viewType === 'switch'\">\r\n            {{\r\n                selectTime\r\n                    ? opts.dateBtnText\r\n                        ? opts.dateBtnText\r\n                        : \"Select Date\"\r\n                    : opts.timeBtnText\r\n                    ? opts.timeBtnText\r\n                    : \"Select Time\"\r\n            }}\r\n        </button>\r\n        <button (click)=\"onClickOkBtn($event)\" class=\"btn btn-primary f-datepicker-makesure-btn\" *ngIf=\"opts.showTime\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;\" *ngIf=\"opts?.enableDynamic && !opts.showTime\">    \r\n            {{opts?.dynamicLocale.today}}\r\n        </button>\r\n    </div>\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"!opts.showTime && !opts?.enableDynamic && opts.showPresent && !opts.dateRange \">\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ (opts.showType === 1 || opts.showType === 4) ? opts?.dynamicLocale.today :  opts.showType === 2 ? opts?.dynamicLocale.presentMonth : opts?.dynamicLocale.presentYear }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"opts.showType === 4 && opts.showPresent\">\r\n        <button (click)=\"onSelectCurrentWeek($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ opts?.dynamicLocale.presentWeek }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>\r\n\r\n\r\n<div *ngIf=\"!multiSelect && opts?.enableDynamic\" class=\"f-datepicker-container\" #dynamicViewEle [ngStyle]=\"{\r\n    top: selectorPos.top + 'px',\r\n    left: (selectorPos.left) + 'px',\r\n    width: getWidth()\r\n}\"\r\nstyle=\"transition: all 0.2s ease 0s\"\r\n[style.display]=\"(opts?.enableDynamic && opts?.showDynamicView ) ? '': 'none'\"\r\n(click)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"f-datepicker-content\" >\r\n        \r\n        <div class=\"f-datepicker-header\" style=\"justify-content: unset;\" >\r\n            <div class=\"f-datepicker-prev-btn\" style=\"padding-left: 8px;position: absolute;\">\r\n                <button type=\"button\" class=\"f-datepicker-header-btn\" (click)=\"onShowDatePanel($event)\">\r\n                    <i class=\"k-icon k-i-arrow-chevron-left\"></i>\r\n                </button>\r\n            </div>\r\n            <div class=\"f-datepicker-monthYearText\" style=\"width: 100%;align-items: center;display: flex;justify-content: center;height: 40px;\">\r\n                {{opts.dynamicLocale.setting}}\r\n            </div>\r\n        </div>\r\n        <lib-dynamic-view #dynamicview [locale]=\"opts?.dynamicLocale\" (valueChange)=\"onDynamicValueChanged($event)\"\r\n            [data]=\"opts?.dynamicValue\" [futureMaxDays]=\"opts?.futureMaxDays || 30\" [previousMaxDays]=\"opts?.previousMaxDays || 30\"></lib-dynamic-view>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button (click)=\"onDynamicOkClick($event, dynamicview)\" class=\"btn btn-primary f-datepicker-makesure-btn\" [disabled]=\"btnDynamicDisabled\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"f-datepicker-container\" tabindex=\"0\" #selectorEl *ngIf=\"multiSelect\"\r\n    [ngStyle]=\"{top: selectorPos.top + 'px',left: selectorPos.left + 'px',width: getWidth()}\"\r\n    (keyup)=\"onCloseSelector($event)\" (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\" [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\">\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-multi-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDates]=\"selectedDates\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClickedForMultiDates($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-multi-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" style=\"width: 198px;border-left: 1px solid #E4E7EF;\">\r\n        <multi-days [selectedDates]=\"selectedDates\" (clicked)=\"onSelectDateClicked($event)\" \r\n        (removed)=\"onMultiDateRemoved($event)\" (clear)=\"onMultiDateClear($event)\" [locales]=\"opts.mulstiDatesLocale\"></multi-days>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"showGoBackToday()\" (click)=\"gototodayView($event)\"> {{ opts.mulstiDatesLocale.backtotoday || '\u56DE\u5230\u4ECA\u5929'}} </button>\r\n        <button class=\"btn btn-primary f-datepicker-makesure-btn\" (click)=\"onMultiDatesOkClicked($event)\">    \r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: UtilService }
];
CalendarComponent.propDecorators = {
    selectorEl: [{ type: ViewChild, args: ['selectorEl',] }],
    styleEl: [{ type: ViewChild, args: ['styleEl',] }],
    endTimeRef: [{ type: ViewChild, args: ['endTimeRef',] }],
    dynamicViewEle: [{ type: ViewChild, args: ['dynamicViewEle',] }],
    position: [{ type: HostBinding, args: ['style.position',] }],
    dynamicViewShow: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectionBarComponent {
    constructor() {
        this.prevNavigateBtnClicked = new EventEmitter();
        this.nextNavigateBtnClicked = new EventEmitter();
        this.monthViewBtnClicked = new EventEmitter();
        this.yearViewBtnClicked = new EventEmitter();
        this.todayViewBtnClicked = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(YEARS)) {
            this.years = changes[YEARS].currentValue;
        }
        if (changes.hasOwnProperty(VISIBLE_MONTH)) {
            this.visibleMonth = changes[VISIBLE_MONTH].currentValue;
        }
        if (changes.hasOwnProperty(SELECT_MONTH)) {
            this.selectMonth = changes[SELECT_MONTH].currentValue;
        }
        if (changes.hasOwnProperty(SELECT_YEAR)) {
            this.selectYear = changes[SELECT_YEAR].currentValue;
        }
        if (changes.hasOwnProperty(PREV_VIEW_DISABLED)) {
            this.prevViewDisabled = changes[PREV_VIEW_DISABLED].currentValue;
        }
        if (changes.hasOwnProperty(NEXT_VIEW_DISABLED)) {
            this.nextViewDisabled = changes[NEXT_VIEW_DISABLED].currentValue;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPrevNavigateBtnClicked(event) {
        event.stopPropagation();
        !this.prevViewDisabled && this.prevNavigateBtnClicked.emit(true);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNextNavigateBtnClicked(event) {
        event.stopPropagation();
        !this.nextViewDisabled && this.nextNavigateBtnClicked.emit(true);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onPrevDobNavigateBtnClicked(event) {
        event.stopPropagation();
        !this.prevDobViewDisabled && this.prevNavigateBtnClicked.emit(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onNextDobNavigateBtnClicked(event) {
        event.stopPropagation();
        !this.nextDobViewDisabled && this.nextNavigateBtnClicked.emit(false);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMonthViewBtnClicked(event) {
        event.stopPropagation();
        this.monthViewBtnClicked.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onYearViewBtnClicked(event) {
        event.stopPropagation();
        this.yearViewBtnClicked.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTodayViewBtnClicked(event) {
        event.stopPropagation();
        this.todayViewBtnClicked.emit();
    }
    /**
     * @return {?}
     */
    getFormateType() {
        /** @type {?} */
        const yIndex = this.opts.dateFormat
            ? this.opts.dateFormat.indexOf(YYYY)
            : 0;
        /** @type {?} */
        const mIndex = this.opts.dateFormat
            ? this.opts.dateFormat.indexOf(MM)
            : 0;
        return yIndex > mIndex ? `${MM}-${YYYY}` : `${YYYY}-${MM}`;
    }
}
SelectionBarComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-selection-bar',
                template: "<div\r\n    class=\"f-datepicker-header\"\r\n    [ngClass]=\"{ monthYearSelBarBorder: selectMonth || selectYear }\"\r\n>\r\n    <div class=\"f-datepicker-prev-btn\">\r\n        <button\r\n            type=\"button\"\r\n            class=\"f-datepicker-header-btn\"\r\n            (click)=\"onPrevDobNavigateBtnClicked($event)\"\r\n            [ngClass]=\"{\r\n                'f-datepicker-header-btn-disabled': prevDobViewDisabled\r\n            }\"\r\n        >\r\n            <i class=\"k-icon k-i-arrow-double-60-left\"></i>\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            *ngIf=\"!selectMonth && !selectYear\"\r\n            [attr.aria-label]=\"opts.ariaLabelPrevMonth\"\r\n            class=\"f-datepicker-header-btn\"\r\n            (click)=\"onPrevNavigateBtnClicked($event)\"\r\n            [ngClass]=\"{ 'f-datepicker-header-btn-disabled': prevViewDisabled }\"\r\n        >\r\n            <i class=\"k-icon k-i-arrow-chevron-left\"></i>\r\n        </button>\r\n    </div>\r\n    <div class=\"f-datepicker-monthYearText\">\r\n        <ng-container *ngIf=\"getFormateType() === 'yyyy-MM'; else elseTemplate\">\r\n            <button\r\n                type=\"button\"\r\n                class=\"f-datepicker-header-btn\"\r\n                (click)=\"opts.yearSelector && onYearViewBtnClicked($event)\"\r\n                tabindex=\"{{ opts.yearSelector ? '0' : '-1' }}\"\r\n                [disabled]=\"opts.showType === 3\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-yearLabel': opts.yearSelector,\r\n                    'f-datepicker-labelBtnNotEdit': !opts.yearSelector\r\n                }\"\r\n            >\r\n                {{\r\n                    !selectYear\r\n                        ? visibleMonth.year + visibleMonth.yearTxt \r\n                        : years[0][1].year + ' - ' + years[3][1].year\r\n                }}\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                class=\"f-datepicker-header-btn\"\r\n                *ngIf=\"!selectYear && opts.showType !== 2\"\r\n                (click)=\"opts.monthSelector && onMonthViewBtnClicked($event)\"\r\n                tabindex=\"{{ opts.monthSelector ? '0' : '-1' }}\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-monthLabel': opts.monthSelector,\r\n                    'f-datepicker-labelBtnNotEdit': !opts.monthSelector\r\n                }\"\r\n            >\r\n                {{ visibleMonth.monthTxt }}\r\n            </button>\r\n        </ng-container>\r\n        <ng-template #elseTemplate>\r\n            <button\r\n                type=\"button\"\r\n                class=\"f-datepicker-header-btn\"\r\n                *ngIf=\"!selectYear\"\r\n                (click)=\"opts.monthSelector && onMonthViewBtnClicked($event)\"\r\n                tabindex=\"{{ opts.monthSelector ? '0' : '-1' }}\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-monthLabel': opts.monthSelector,\r\n                    'f-datepicker-labelBtnNotEdit': !opts.monthSelector\r\n                }\"\r\n            >\r\n                {{ visibleMonth.monthTxt }}\r\n            </button>\r\n            <button\r\n                type=\"button\"\r\n                class=\"f-datepicker-header-btn\"\r\n                (click)=\"opts.yearSelector && onYearViewBtnClicked($event)\"\r\n                tabindex=\"{{ opts.yearSelector ? '0' : '-1' }}\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-yearLabel': opts.yearSelector,\r\n                    'f-datepicker-labelBtnNotEdit': !opts.yearSelector\r\n                }\"\r\n            >\r\n                {{\r\n                    !selectYear\r\n                        ? visibleMonth.year + visibleMonth.yearTxt\r\n                        : years[0][1].year + ' - ' + years[3][1].year\r\n                }}\r\n            </button>\r\n        </ng-template>\r\n    </div>\r\n    <div class=\"f-datepicker-next-btn\">\r\n        <button\r\n            type=\"button\"\r\n            *ngIf=\"!selectMonth && !selectYear\"\r\n            [attr.aria-label]=\"opts.ariaLabelNextMonth\"\r\n            class=\"f-datepicker-header-btn\"\r\n            (click)=\"onNextNavigateBtnClicked($event)\"\r\n            [ngClass]=\"{ 'f-datepicker-header-btn-disabled': nextViewDisabled }\"\r\n        >\r\n            <i class=\"k-icon k-i-arrow-chevron-right\"></i>\r\n        </button>\r\n        <button\r\n            type=\"button\"\r\n            class=\"f-datepicker-header-btn\"\r\n            (click)=\"onNextDobNavigateBtnClicked($event)\"\r\n            [ngClass]=\"{\r\n                'f-datepicker-header-btn-disabled': nextDobViewDisabled\r\n            }\"\r\n        >\r\n            <i class=\"k-icon k-i-arrow-double-60-right\"></i>\r\n        </button>\r\n    </div>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SelectionBarComponent.ctorParameters = () => [];
SelectionBarComponent.propDecorators = {
    opts: [{ type: Input }],
    years: [{ type: Input }],
    visibleMonth: [{ type: Input }],
    selectMonth: [{ type: Input }],
    selectYear: [{ type: Input }],
    selectToday: [{ type: Input }],
    prevViewDisabled: [{ type: Input }],
    nextViewDisabled: [{ type: Input }],
    prevDobViewDisabled: [{ type: Input }],
    nextDobViewDisabled: [{ type: Input }],
    prevNavigateBtnClicked: [{ type: Output }],
    nextNavigateBtnClicked: [{ type: Output }],
    monthViewBtnClicked: [{ type: Output }],
    yearViewBtnClicked: [{ type: Output }],
    todayViewBtnClicked: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { IMyWeek } from '../../interfaces/my-month-row.interface'
class DayViewComponent {
    /**
     * @param {?} utilService
     */
    constructor(utilService) {
        this.utilService = utilService;
        this.dayCellClicked = new EventEmitter();
        this.dayCellKeyDown = new EventEmitter();
        this.weekClicked = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
        this.prevMonthId = MonthId.prev;
        this.currMonthId = MonthId.curr;
        this.nextMonthId = MonthId.next;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(DATES)) {
            this.dates = changes[DATES].currentValue;
        }
        if (changes.hasOwnProperty(WEEK_DAYS)) {
            this.weekDays = changes[WEEK_DAYS].currentValue;
        }
        if (changes.hasOwnProperty(SELECTED_DATE)) {
            this.selectedDate = changes[SELECTED_DATE].currentValue;
        }
        if (changes.hasOwnProperty(SELECTED_DATE_RANGE)) {
            this.selectedDateRange = changes[SELECTED_DATE_RANGE].currentValue;
        }
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onDayCellClicked(event, cell) {
        if (cell.disabled || this.opts.showType === 4) {
            return;
        }
        event.stopPropagation();
        this.dayCellClicked.emit(cell);
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onDayCellKeyDown(event, cell) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode !== KeyCode.tab) {
            event.preventDefault();
            if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
                this.onDayCellClicked(event, cell);
            }
            else if (this.opts.moveFocusByArrowKeys) {
                this.dayCellKeyDown.emit(cell);
            }
        }
    }
    /**
     * @param {?} event
     * @param {?} week
     * @return {?}
     */
    onWeekClicked(event, week) {
        if (this.opts.showType !== 4) {
            return;
        }
        event.stopPropagation();
        this.weekClicked.emit(week);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onDayCellMouseEnter(cell) {
        if (this.utilService.isInitializedDate(this.selectedDateRange.begin) &&
            (!this.utilService.isInitializedDate(this.selectedDateRange.end) ||
                JSON.stringify(this.selectedDateRange.begin) === JSON.stringify(this.selectedDateRange.end))) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) && this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) && this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
            this.onMouseEnter.emit(cell);
        }
    }
    /**
     * @return {?}
     */
    onDayCellMouseLeave() {
        for (const w of this.dates) {
            for (const day of w.week) {
                day.range = false;
            }
        }
        this.onMouseLeave.emit();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateInRange(date) {
        return this.utilService.isDateInRange(date, this.selectedDateRange);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateSame(date) {
        return this.utilService.isDateSame({
            year: this.selectedDate.year,
            month: this.selectedDate.month,
            day: this.selectedDate.day
        }, date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateRangeBeginOrEndSame(date) {
        /** @type {?} */
        const selectedDateRange = {
            begin: {
                year: this.selectedDateRange.begin.year,
                month: this.selectedDateRange.begin.month,
                day: this.selectedDateRange.begin.day
            },
            end: {
                year: this.selectedDateRange.end.year,
                month: this.selectedDateRange.end.month,
                day: this.selectedDateRange.end.day
            }
        };
        return this.utilService.isDateRangeBeginOrEndSame(selectedDateRange, date);
    }
}
DayViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-day-view',
                template: "<div class=\"f-datepicker-table-wrapper\">\r\n    <table class=\"f-datepicker-table\" cellpadding=\"0\">\r\n        <thead>\r\n            <tr>\r\n                <th\r\n                    class=\"f-datepicker-weeknbr-title\" style=\"padding-bottom: 8px;padding-top: 4px\"\r\n                    *ngIf=\"opts.showWeekNumbers\"\r\n                >\r\n                    {{ opts.weekText ? opts.weekText : 'Week'}}\r\n                </th>\r\n                <th\r\n                    scope=\"col\"\r\n                    *ngFor=\"let d of weekDays\"\r\n                    style=\"padding-bottom: 8px;padding-top: 4px\"\r\n                >\r\n                    {{ d }}\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr\r\n                *ngFor=\"let w of dates; let di = index\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-selectWeek': opts.showType === 4,\r\n                    'f-datepicker-selectedWeek':\r\n                        opts.showType === 4 &&\r\n                        w.weekNbr === selectedWeek.weekNbr &&\r\n                        w.year === selectedWeek.year\r\n                }\"\r\n                (click)=\"onWeekClicked($event, w)\"\r\n            >\r\n                <td\r\n                    class=\"f-datepicker-weeknbr\"\r\n                    *ngIf=\"opts.showWeekNumbers\"\r\n                >\r\n                    <div class=\"f-datepicker-date\">{{ w.weekNbr }}</div>\r\n                </td>\r\n                <td\r\n                    id=\"d_{{ di }}_{{ i }}\"\r\n                    class=\"d_{{ di }}_{{ i }} \"\r\n                    *ngFor=\"let d of w.week; let i = index\"\r\n                    [ngClass]=\"{\r\n                        'f-datepicker-range':\r\n                            opts.showType !== 4 && d.cmo === currMonthId &&\r\n                            ((this.opts.dateRange &&\r\n                                isDateInRange(d.dateObj) &&\r\n                                !isDateRangeBeginOrEndSame(d.dateObj)) ||\r\n                                d.range),\r\n                        'f-datepicker-no-currmonth':\r\n                            d.cmo === prevMonthId || d.cmo === nextMonthId,\r\n                        'f-datepicker-disabled': d.disabled,\r\n                        'f-datepicker-singledate': !d.disabled\r\n                    }\"\r\n                    (click)=\"onDayCellClicked($event, d)\"\r\n                    (keydown)=\"onDayCellKeyDown($event, d)\"\r\n                    (mouseenter)=\"onDayCellMouseEnter(d)\"\r\n                    (mouseleave)=\"onDayCellMouseLeave()\"\r\n                    tabindex=\"0\"\r\n                >\r\n                    <span\r\n                        *ngIf=\"d.markedDate.marked\"\r\n                        class=\"f-datepicker-markdate\"\r\n                        [ngStyle]=\"{ 'background-color': d.markedDate.color }\"\r\n                    ></span>\r\n                    <div\r\n                        class=\"f-datepicker-date\"\r\n                        [ngClass]=\"{\r\n                            'f-datepicker-selected':\r\n                                opts.showType !== 4 &&\r\n                                d.cmo === currMonthId &&\r\n                                ((!this.opts.dateRange &&\r\n                                    isDateSame(d.dateObj)) ||\r\n                                    (this.opts.dateRange &&\r\n                                        isDateRangeBeginOrEndSame(d.dateObj))),\r\n                            'f-datepicker-current':\r\n                                d.currDay && opts.markCurrentDay,\r\n                            'f-datepicker-opacity':\r\n                                d.highlight &&\r\n                                (d.cmo === prevMonthId ||\r\n                                    d.cmo === nextMonthId ||\r\n                                    d.disabled),\r\n                            'f-datepicker-highlight': d.highlight,\r\n                            'f-datepicker-disabled': d.disabled\r\n                        }\"\r\n                    >\r\n                        {{ d.dateObj.day }}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
DayViewComponent.ctorParameters = () => [
    { type: UtilService }
];
DayViewComponent.propDecorators = {
    opts: [{ type: Input }],
    dates: [{ type: Input }],
    weekDays: [{ type: Input }],
    selectedDate: [{ type: Input }],
    selectedDateRange: [{ type: Input }],
    selectedWeek: [{ type: Input }],
    dayCellClicked: [{ type: Output }],
    dayCellKeyDown: [{ type: Output }],
    weekClicked: [{ type: Output }],
    onMouseEnter: [{ type: Output }],
    onMouseLeave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MonthViewComponent {
    /**
     * @param {?} utilService
     */
    constructor(utilService) {
        this.utilService = utilService;
        this.months = [];
        this.monthCellClicked = new EventEmitter();
        this.monthCellKeyDown = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(MONTHS)) {
            this.months = changes[MONTHS].currentValue;
        }
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onMonthCellClicked(event, cell) {
        event.stopPropagation();
        if (cell.disabled) {
            return;
        }
        this.monthCellClicked.emit(cell);
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onMonthCellKeyDown(event, cell) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode !== KeyCode.tab) {
            event.preventDefault();
            if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
                this.onMonthCellClicked(event, cell);
            }
            else if (this.opts.moveFocusByArrowKeys) {
                this.monthCellKeyDown.emit(cell);
            }
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onMonthCellMouseEnter(cell) {
        if (this.utilService.isInitializedDate(this.selectedDateRange.begin) &&
            !this.utilService.isInitializedDate(this.selectedDateRange.end)) {
            for (let i = 0; i < this.months.length; i++) {
                /** @type {?} */
                let row = this.months[i].row;
                for (let j = 0; j < row.length; j++) {
                    /** @type {?} */
                    let month = row[j];
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
            this.onMouseEnter.emit(cell);
        }
    }
    /**
     * @return {?}
     */
    onMonthCellMouseLeave() {
        for (let i = 0; i < this.months.length; i++) {
            /** @type {?} */
            let row = this.months[i].row;
            for (let j = 0; j < row.length; j++) {
                /** @type {?} */
                let month = row[j];
                month.range = false;
            }
        }
        this.onMouseLeave.emit();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isMonthInRange(date) {
        return this.utilService.isDateInRange(date, this.selectedDateRange);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isMonthSame(date) {
        if (this.selectedDate) {
            const { year, month } = this.selectedDate;
            return year == date.year && month == date.month;
        }
        return false;
        // if (this.visibleMonth.monthNbr) {
        // } else {
        //     return this.visibleMonth.year == date.year && this.visibleMonth.monthNbr == date.month;
        // }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isMonthRangeBeginOrEndSame(date) {
        return this.utilService.isDateRangeBeginOrEndSame(this.selectedDateRange, date);
    }
}
MonthViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-month-view',
                template: "<div class=\"f-datepicker-table-wrapper\">\r\n    <table class=\"f-datepicker-table\">\r\n        <tbody>\r\n            <tr *ngFor=\"let mr of months; let mi = index\">\r\n                <td\r\n                    id=\"m_{{ mi }}_{{ i }}\"\r\n                    class=\"m_{{ mi }}_{{ i }}\"\r\n                    *ngFor=\"let m of mr.row; let i = index\"\r\n                    (click)=\"onMonthCellClicked($event, m)\"\r\n                    (keydown)=\"onMonthCellKeyDown($event, m)\"\r\n                    (mouseenter)=\"onMonthCellMouseEnter(m)\"\r\n                    (mouseleave)=\"onMonthCellMouseLeave()\"\r\n                    tabindex=\"0\"\r\n                    style=\"width: 33.3%\"\r\n                >\r\n                    <div class=\"f-datepicker-month\">\r\n                        <span\r\n                            class=\"f-datepicker-month-cell\"\r\n                            [ngClass]=\"{\r\n                                'f-datepicker-current':\r\n                                    m.currMonth && opts.markCurrentMonth,\r\n                                'f-datepicker-selected':\r\n                                    (!this.opts.dateRange &&\r\n                                        isMonthSame(m.monthObj)) ||\r\n                                    (this.opts.dateRange &&\r\n                                        isMonthRangeBeginOrEndSame(m.monthObj)),\r\n                                'f-datepicker-disabled': m.disabled,\r\n                                'f-datepicker-range':\r\n                                    isMonthInRange(m.monthObj) || m.range\r\n                            }\"\r\n                            >{{ m.name }}</span\r\n                        >\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
MonthViewComponent.ctorParameters = () => [
    { type: UtilService }
];
MonthViewComponent.propDecorators = {
    opts: [{ type: Input }],
    months: [{ type: Input }],
    selectedDate: [{ type: Input }],
    selectedDateRange: [{ type: Input }],
    visibleMonth: [{ type: Input }],
    monthCellClicked: [{ type: Output }],
    monthCellKeyDown: [{ type: Output }],
    onMouseEnter: [{ type: Output }],
    onMouseLeave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class YearViewComponent {
    /**
     * @param {?} utilService
     */
    constructor(utilService) {
        this.utilService = utilService;
        this.yearCellClicked = new EventEmitter();
        this.yearCellKeyDown = new EventEmitter();
        this.prevCellClicked = new EventEmitter();
        this.nextCellClicked = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(YEARS)) {
            this.years = changes[YEARS].currentValue;
        }
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onYearCellClicked(event, cell) {
        event.stopPropagation();
        if (cell.disabled) {
            return;
        }
        this.yearCellClicked.emit(cell);
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onYearCellKeyDown(event, cell) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode !== KeyCode.tab) {
            event.preventDefault();
            if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
                this.onYearCellClicked(event, cell);
            }
            else if (this.opts.moveFocusByArrowKeys) {
                this.yearCellKeyDown.emit(cell);
            }
        }
    }
    /**
     * @param {?} event
     * @param {?} index
     * @return {?}
     */
    onPrevOrNextYearCellClicked(event, index) {
        event.stopPropagation();
        if (index === 0) {
            if (this.prevViewDisabled)
                return;
            this.prevCellClicked.emit(event);
        }
        else {
            if (this.nextViewDisabled)
                return;
            this.nextCellClicked.emit(event);
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onMonthCellMouseEnter(cell) {
        if (this.utilService.isInitializedDate(this.selectedDateRange.begin) &&
            !this.utilService.isInitializedDate(this.selectedDateRange.end)) {
            for (let i = 0; i < this.years.length; i++) {
                /** @type {?} */
                let row = this.years[i];
                for (let j = 0; j < row.length; j++) {
                    /** @type {?} */
                    let year = row[j];
                    year.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                            this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                            (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                }
            }
            this.onMouseEnter.emit(cell);
        }
    }
    /**
     * @return {?}
     */
    onMonthCellMouseLeave() {
        for (let i = 0; i < this.years.length; i++) {
            /** @type {?} */
            let row = this.years[i];
            for (let j = 0; j < row.length; j++) {
                /** @type {?} */
                let year = row[j];
                year.range = false;
            }
        }
        this.onMouseLeave.emit();
    }
    /**
     * @param {?} year
     * @return {?}
     */
    isMonthInRange(year) {
        return this.utilService.isDateInRange(year, this.selectedDateRange);
    }
    /**
     * @param {?} year
     * @return {?}
     */
    isYearSame(year) {
        // return this.utilService.isDateSame(
        //     {
        //         year: this.visibleMonth.year
        //     },
        //     year
        // );
        if (this.selectedDate) {
            return this.selectedDate.year === year.year;
        }
        return false;
    }
    /**
     * @param {?} year
     * @return {?}
     */
    isMonthRangeBeginOrEndSame(year) {
        return this.utilService.isDateSame({ year: this.selectedDateRange.begin.year }, year) || this.utilService.isDateSame({ year: this.selectedDateRange.end.year }, year);
    }
}
YearViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-year-view',
                template: "<table class=\"f-datepicker-table-wrapper\">\r\n    <tbody class=\"f-datepicker-table\">\r\n        <tr *ngFor=\"let yr of years; let yi = index\">\r\n            <td\r\n                *ngFor=\"let y of yr; let i = index\"\r\n                id=\"y_{{ yi }}_{{ i }}\"\r\n                class=\"y_{{ yi }}_{{ i }} \"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-no-currmonth':\r\n                        (yi === 0 && i === 0) || (yi === 3 && i === 2)\r\n                }\"\r\n                (click)=\"onYearCellClicked($event, y)\"\r\n                (keydown)=\"onYearCellKeyDown($event, y)\"\r\n                (mouseenter)=\"onMonthCellMouseEnter(y)\"\r\n                (mouseleave)=\"onMonthCellMouseLeave()\"\r\n                tabindex=\"0\"\r\n            >\r\n                <div class=\"f-datepicker-year\">\r\n                    <span\r\n                        class=\"f-datepicker-year-cell\"\r\n                        [ngClass]=\"{\r\n                            'f-datepicker-current':\r\n                                y.currYear && opts.markCurrentYear,\r\n                            'f-datepicker-selected':\r\n                                (!this.opts.dateRange &&\r\n                                    isYearSame(y.yearObj)) ||\r\n                                (this.opts.dateRange &&\r\n                                    isMonthRangeBeginOrEndSame(y.yearObj)),\r\n                            'f-datepicker-disabled': y.disabled,\r\n                            'f-datepicker-range':\r\n                                isMonthInRange(y.yearObj) || y.range\r\n                        }\"\r\n                        >{{ y.year }}</span\r\n                    >\r\n                </div>\r\n            </td>\r\n            <!-- <ng-container *ngFor=\"let y of yr; let i = index\">\r\n                <ng-container\r\n                    *ngIf=\"\r\n                        (yi === 0 && i === 0) || (yi === 3 && i === 2);\r\n                        else elseTemplate\r\n                    \"\r\n                >\r\n                    <td\r\n                        id=\"y_{{ yi }}_{{ i }}\"\r\n                        class=\"y_{{ yi }}_{{ i }}\"\r\n                        (click)=\"onPrevOrNextYearCellClicked($event, i)\"\r\n                        (keydown)=\"onPrevOrNextYearCellKeyDown($event, i)\"\r\n                        tabindex=\"0\"\r\n                    >\r\n                        <div class=\"f-datepicker-year\">\r\n                            <span\r\n                                class=\"f-datepicker-year-cell\"\r\n                                [ngClass]=\"{\r\n                                    'f-datepicker-disabled':\r\n                                        (i === 0 && this.prevViewDisabled) ||\r\n                                        (i === 2 && this.nextViewDisabled)\r\n                                }\"\r\n                                ><i\r\n                                    class=\"f-icon \"\r\n                                    [ngClass]=\"{\r\n                                        'k-i-arrow-chevron-left': i === 0,\r\n                                        'k-i-arrow-chevron-right': i === 2\r\n                                    }\"\r\n                                ></i>\r\n                            </span>\r\n                        </div>\r\n                    </td>\r\n                </ng-container>\r\n                <ng-template #elseTemplate>\r\n                    <td\r\n                        id=\"y_{{ yi }}_{{ i }}\"\r\n                        class=\"y_{{ yi }}_{{ i }}\"\r\n                        (click)=\"onYearCellClicked($event, y)\"\r\n                        (keydown)=\"onYearCellKeyDown($event, y)\"\r\n                        tabindex=\"0\"\r\n                    >\r\n                        <div class=\"f-datepicker-year\">\r\n                            <span\r\n                                class=\"f-datepicker-year-cell\"\r\n                                [ngClass]=\"{\r\n                                    'f-datepicker-current':\r\n                                        y.currYear && opts.markCurrentYear,\r\n                                    'f-datepicker-selected': y.selected,\r\n                                    'f-datepicker-disabled': y.disabled\r\n                                }\"\r\n                                >{{ y.year }}</span\r\n                            >\r\n                        </div>\r\n                    </td>\r\n                </ng-template>\r\n            </ng-container> -->\r\n        </tr>\r\n    </tbody>\r\n</table>\r\n",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
YearViewComponent.ctorParameters = () => [
    { type: UtilService }
];
YearViewComponent.propDecorators = {
    opts: [{ type: Input }],
    years: [{ type: Input }],
    prevViewDisabled: [{ type: Input }],
    nextViewDisabled: [{ type: Input }],
    selectedDate: [{ type: Input }],
    selectedDateRange: [{ type: Input }],
    visibleMonth: [{ type: Input }],
    yearCellClicked: [{ type: Output }],
    yearCellKeyDown: [{ type: Output }],
    prevCellClicked: [{ type: Output }],
    nextCellClicked: [{ type: Output }],
    onMouseEnter: [{ type: Output }],
    onMouseLeave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NGX_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatePickerDirective)),
    multi: true
};
/** @type {?} */
const NGX_DP_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatePickerDirective)),
    multi: true
};
class FarrisDatePickerDirective {
    /**
     * @param {?} localeService
     * @param {?} utilService
     * @param {?} vcRef
     * @param {?} cfr
     * @param {?} renderer
     * @param {?} cdr
     * @param {?} elem
     * @param {?} config
     * @param {?} zone
     */
    constructor(localeService, utilService, vcRef, cfr, renderer, cdr, elem, config, zone) {
        this.localeService = localeService;
        this.utilService = utilService;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.renderer = renderer;
        this.cdr = cdr;
        this.elem = elem;
        this.config = config;
        this.zone = zone;
        this.dateChanged = new EventEmitter();
        this.inputFieldChanged = new EventEmitter();
        this.calendarViewChanged = new EventEmitter();
        this.calendarToggle = new EventEmitter();
        this.rangeDateSelection = new EventEmitter();
        this.cRef = null;
        this.inputText = '';
        this.preventClose = false;
        this.disabled = false;
        // scrollFn: any = (e) => {
        //     console.log((e.target as any).scrollTop);
        // };
        this.onChangeCb = (/**
         * @return {?}
         */
        () => { });
        this.onTouchedCb = (/**
         * @return {?}
         */
        () => { });
        // wrapper with arrow function to preserve the use of 'this' word
        this.onClickWrapper = (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => {
            this.onClick(ev);
        });
        this.opts = this.config.getDefaultConfig();
        this.parseOptions(this.opts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (this.ignoreKeyPress(keyCode)) {
            return;
        }
        else if (keyCode === KeyCode.esc) {
            this.closeSelector(CalToggle.CloseByEsc);
        }
        else {
            const { value } = this.elem.nativeElement;
            /** @type {?} */
            let valid = false;
            if (!this.opts.dateRange) {
                /** @type {?} */
                const date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                const { begin, end } = this.utilService.isDateValidDateRange(value, this.opts);
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            this.emitInputFieldChanged(value, valid);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        const { inputFieldValidation, dateRange } = this.opts;
        if (inputFieldValidation) {
            const { value } = this.elem.nativeElement;
            /** @type {?} */
            let valid = false;
            if (!dateRange) {
                /** @type {?} */
                const date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                /** @type {?} */
                const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
                const { begin, end } = _dateRange;
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            if (!valid && this.inputText !== value) {
                this.clearDate();
            }
            this.onChangeCb(value);
        }
        this.onTouchedCb();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        if (this.opts.closeSelectorOnDocumentClick &&
            !this.preventClose &&
            evt.target &&
            this.cRef !== null &&
            this.elem.nativeElement !== evt.target &&
            !this.cRef.location.nativeElement.contains(evt.target) &&
            !this.disabled) {
            this.closeSelector(CalToggle.CloseByOutClick);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(LOCALE)) {
            this.setLocaleOptions();
        }
        if (changes.hasOwnProperty(DEFAULT_MONTH)) {
            /** @type {?} */
            let dm = changes[DEFAULT_MONTH].currentValue;
            if (typeof dm === OBJECT) {
                dm = dm.defMonth;
            }
            this.defaultMonth = dm;
        }
        if (changes.hasOwnProperty(OPTIONS)) {
            this.parseOptions(changes[OPTIONS].currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.closeCalendar();
    }
    /**
     * @return {?}
     */
    setLocaleOptions() {
        /** @type {?} */
        const opts = this.localeService.getLocaleOptions(this.locale);
        Object.keys(opts).forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            ((/** @type {?} */ (this.opts)))[k] = opts[k];
        }));
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    parseOptions(opts) {
        if (opts !== undefined) {
            Object.keys(opts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                if (opts[k] !== undefined && opts[k] !== '') {
                    ((/** @type {?} */ (this.opts)))[k] = opts[k];
                }
            }));
        }
        if (this.opts.minYear < Year.min) {
            this.opts.minYear = Year.min;
        }
        if (this.opts.maxYear > Year.max) {
            this.opts.maxYear = Year.max;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDate(value) {
        const { dateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat } = this.opts;
        if (!dateRange) {
            // Single date mode
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            return this.utilService.getDateModel(date, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
        else {
            // Date range mode
            /** @type {?} */
            const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            return this.utilService.getDateModel(null, _dateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.disabled) {
            return;
        }
        if (value) {
            value = this.formatDate(value);
        }
        if (!value) {
            this.setInputValue(EMPTY_STR);
            this.emitInputFieldChanged(EMPTY_STR, false);
            if (this.cRef !== null) {
                this.cRef.instance.resetDateValue(ResetDateType.both);
            }
        }
        else if (value.isRange === false && value.singleDate) {
            // single date
            const { date, formatted } = value.singleDate;
            /** @type {?} */
            const valid = this.utilService.isInitializedDate(date);
            if (valid) {
                this.setInputValue(formatted);
                this.emitInputFieldChanged(formatted, valid);
                if (this.cRef !== null) {
                    this.cRef.instance.resetDateValue(ResetDateType.dateRange);
                }
            }
        }
        else if (value.isRange === true && value.dateRange) {
            // date range
            const { beginDate, endDate, formatted } = value.dateRange;
            if (beginDate && endDate) {
                /** @type {?} */
                const valid = this.utilService.isInitializedDate(beginDate) &&
                    this.utilService.isInitializedDate(endDate);
                if (valid) {
                    this.setInputValue(formatted);
                    this.emitInputFieldChanged(formatted, valid);
                    if (this.cRef !== null) {
                        this.cRef.instance.resetDateValue(ResetDateType.singleDate);
                    }
                }
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCb = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCb = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.renderer.setProperty(this.elem.nativeElement, DISABLED, isDisabled);
        if (isDisabled) {
            this.closeCalendar();
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return null;
    }
    /**
     * @return {?}
     */
    openCalendar() {
        if (this.disabled) {
            return;
        }
        this.preventClose = true;
        this.cdr.detectChanges();
        if (this.cRef === null) {
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.appendSelector(this.cRef.location.nativeElement);
            this.cRef.instance.initialize(this.opts, this.defaultMonth, this.getSelectorPosition(this.elem.nativeElement), this.elem.nativeElement.value, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            (dm, close) => {
                this.focusToInput();
                this.updateModel(dm);
                if (close) {
                    this.closeSelector(CalToggle.CloseByDateSel);
                }
                this.emitDateChanged(dm);
                this.emitInputFieldChanged(this.utilService.getFormattedDate(dm), true);
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            (cvc) => {
                this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            (rds) => {
                this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            () => {
                this.closeSelector(CalToggle.CloseByEsc);
            }));
            this.emitCalendarToggle(CalToggle.Open);
            this.cdr.detectChanges();
        }
        else {
            this.appendSelector(this.cRef.location.nativeElement);
        }
        this.preventClose = false;
    }
    /**
     * @return {?}
     */
    closeCalendar() {
        this.closeSelector(CalToggle.CloseByCalBtn);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleCalendar(event) {
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        if (this.cRef === null) {
            document.addEventListener(CLICK, this.onClickWrapper, true);
            this.openCalendar();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
        }
        else {
            /** @type {?} */
            let flag = true;
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => {
                        if (el === this.cRef.location.nativeElement) {
                            flag = false;
                        }
                    }));
                }
            }
            if (flag) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.openCalendar();
            }
            else {
                document.removeEventListener(CLICK, this.onClickWrapper);
                this.closeSelector(CalToggle.CloseByCalBtn);
                this.renderer.setStyle(container, 'pointer-events', '');
            }
        }
    }
    /**
     * @return {?}
     */
    clearDate() {
        if (this.disabled) {
            return;
        }
        this.setInputValue(EMPTY_STR);
        this.emitDateChanged({
            isRange: this.opts.dateRange,
            singleDate: {
                date: this.utilService.resetDate(),
                jsDate: null,
                formatted: EMPTY_STR,
                epoc: 0
            },
            dateRange: {
                beginDate: this.utilService.resetDate(),
                beginJsDate: null,
                beginEpoc: 0,
                endDate: this.utilService.resetDate(),
                endJsDate: null,
                endEpoc: 0,
                formatted: EMPTY_STR
            }
        });
        this.onChangeCb(null);
        this.onTouchedCb();
        this.closeSelector(CalToggle.CloseByCalBtn);
    }
    /**
     * @return {?}
     */
    isDateValid() {
        const { value } = this.elem.nativeElement;
        if (value !== EMPTY_STR) {
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            if (this.utilService.isInitializedDate(date)) {
                this.emitInputFieldChanged(value, true);
                return true;
            }
        }
        this.emitInputFieldChanged(value, false);
        return false;
    }
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    ignoreKeyPress(keyCode) {
        // keyCode === KeyCode.tab ||
        return (keyCode === KeyCode.leftArrow ||
            keyCode === KeyCode.rightArrow ||
            keyCode === KeyCode.upArrow ||
            keyCode === KeyCode.downArrow ||
            keyCode === KeyCode.shift);
    }
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    closeSelector(reason) {
        if (this.cRef !== null) {
            this.vcRef.remove(this.vcRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            this.cdr.detectChanges();
            this.emitCalendarToggle(reason);
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', '');
        }
    }
    /**
     * @private
     * @param {?} model
     * @return {?}
     */
    updateModel(model) {
        this.setInputValue(this.utilService.getFormattedDate(model));
        this.onChangeCb(this.utilService.getFormattedDate(model));
        this.onTouchedCb();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setInputValue(value) {
        this.inputText = value;
        this.renderer.setProperty(this.elem.nativeElement, VALUE, value);
    }
    /**
     * @private
     * @return {?}
     */
    focusToInput() {
        if (this.opts.focusInputOnDateSelect) {
            this.elem.nativeElement.focus();
        }
    }
    /**
     * @private
     * @param {?} dateModel
     * @return {?}
     */
    emitDateChanged(dateModel) {
        this.dateChanged.emit(dateModel);
    }
    /**
     * @private
     * @param {?} value
     * @param {?} valid
     * @return {?}
     */
    emitInputFieldChanged(value, valid) {
        this.inputFieldChanged.emit({
            value,
            dateFormat: this.opts.dateFormat,
            valid
        });
    }
    /**
     * @private
     * @param {?} cvc
     * @return {?}
     */
    emitCalendarChanged(cvc) {
        this.calendarViewChanged.emit(cvc);
    }
    /**
     * @private
     * @param {?} rds
     * @return {?}
     */
    emitRangeDateSelection(rds) {
        this.rangeDateSelection.emit(rds);
    }
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    emitCalendarToggle(reason) {
        this.calendarToggle.emit(reason);
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    jsDateToMyDate(date) {
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    appendSelector(elem) {
        /** @type {?} */
        let container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.appendChild(elem);
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    getSelectorPosition(elem) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let _selectorHeight = 0;
        /** @type {?} */
        let _selectorWidth = 0;
        const { selectorHeight, selectorWidth, showTime, dateRange } = this.opts;
        /** @type {?} */
        const b = document.body.getBoundingClientRect();
        /** @type {?} */
        const e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        let position = 'bottom';
        if (dateRange) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        if (showTime) {
            _selectorHeight = this.getSelectorDimension(selectorHeight) + 36;
        }
        else {
            _selectorHeight = this.getSelectorDimension(selectorHeight);
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        return { top, left, position };
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getSelectorDimension(value) {
        return Number(value.replace(PX, EMPTY_STR));
    }
}
FarrisDatePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-datepicker]',
                exportAs: 'farris-datepicker',
                providers: [
                    UtilService,
                    DatepickerLocaleService,
                    DefaultConfigService,
                    NGX_DP_VALUE_ACCESSOR,
                    NGX_DP_VALIDATORS
                ]
            },] }
];
/** @nocollapse */
FarrisDatePickerDirective.ctorParameters = () => [
    { type: DatepickerLocaleService },
    { type: UtilService },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: DefaultConfigService },
    { type: NgZone }
];
FarrisDatePickerDirective.propDecorators = {
    options: [{ type: Input }],
    locale: [{ type: Input }],
    defaultMonth: [{ type: Input }],
    dateChanged: [{ type: Output }],
    inputFieldChanged: [{ type: Output }],
    calendarViewChanged: [{ type: Output }],
    calendarToggle: [{ type: Output }],
    rangeDateSelection: [{ type: Output }],
    onKeyUp: [{ type: HostListener, args: [KEYUP, ['$event'],] }],
    onBlur: [{ type: HostListener, args: [BLUR,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FARRIS_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatepickerComponent)),
    multi: true
};
class FarrisDatepickerComponent {
    /**
     * @param {?} el
     * @param {?} utilService
     * @param {?} defaultConfigService
     * @param {?} injector
     */
    constructor(el, utilService, defaultConfigService, injector) {
        this.el = el;
        this.utilService = utilService;
        this.defaultConfigService = defaultConfigService;
        this.injector = injector;
        this.cls = 'f-cmp-datepicker f-cmp-inputgroup';
        this.viewType = ViewType.Switch;
        // 是否禁用该组件
        this.disabled = false;
        // 是否只读
        this.readonly = false;
        // 是否只能选择数据，不可键入
        this.editable = true;
        // 是否使用日期范围输入模式
        this.dateRange = false;
        // 是否使用时间输入框
        this.showTime = false;
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        // 显示类型
        this.showType = ShowType.all;
        // 本地语言
        this.locale = 'zh-cn';
        // 是否使用默认值
        this.useDefault = false;
        this.returnType = 'String';
        // placeholder
        this.placeholder = '';
        this.beginPlaceholder = '';
        this.endPlaceholder = '';
        /**
         * 输入值变化后关闭选择面板。 默认为 true
         */
        this.whenValueChangedThenCloseSelectorPanel = true;
        // 需要高亮显示的日期
        this.highlightDates = [];
        // 禁用区域的日期开始时间
        this.disableDateRangesBegin = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用区域的日期结束时间
        this.disableDateRangesEnd = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用的日期
        this.disableDates = [];
        // 一周中被禁用的日子
        this.disableWeekdays = [];
        // 被标记的日期
        this.markDates = [];
        // 被标记的日期的显示颜色
        this.markDatesColor = '#59a1ff';
        // 是否显示第几周
        this.showWeekNumbers = false;
        // 是否标记周末
        this.isMarkWeekends = false;
        // 被标记周末的显示颜色
        this.markWeekendsColor = '#59a1ff';
        // 日期范围模式下input的显示分割符合
        this.dateRangeDatesDelimiter = '~';
        // 配置左侧 sidebar 快捷键
        this.shortcuts = [];
        // 日期范围选择时，默认结束月份为当前月份 + monthRangeValue
        this.monthRangeValue = 1;
        /**
         * 启用动态日期值设置，默认 false
         */
        this.enableDynamic = false;
        /**
         * 允许设置过去最大天数
         */
        this.previousMaxDays = 30;
        /**
         * 允许设置未来最大天数
         */
        this.futureMaxDays = 30;
        this.showClear = true;
        /**
         * 显示今天，本年，本月 按钮
         */
        this.showPresent = false;
        /**
         * 每周起始日  可选值 mo：周一  su: 周日，默认为 mo周一
         */
        this.firstDayOfWeek = 'mo';
        // clear 事件
        this.clear = new EventEmitter();
        // valueChanged 事件
        this.valueChange = new EventEmitter();
        // focus 事件
        this.focus = new EventEmitter();
        // blur 事件
        this.blur = new EventEmitter();
        // beginValueChange
        this.beginValueChange = new EventEmitter();
        // endValueChange
        this.endValueChange = new EventEmitter();
        // PrevFocus dateRange 第一个日期
        this.PrevFocus = new EventEmitter();
        // NextFocus dateRange 第二个日期
        this.NextFocus = new EventEmitter();
        // close 事件
        this.close = new EventEmitter();
        /**
         * 启用多选，默认 false
         */
        this.multiSelect = false;
        this.separator = ',';
        /**
         * 允许选择日期的个数； 0 无限
         */
        this.maxSelected = 0;
        /**
         * 选中日期的排序方式，默认为 'none' 即不排序
         */
        this.selectedOrderBy = 'none';
        this.cRef = null;
        this._timeFormat = '';
        this._value = '';
        this._beginValue = '';
        this._endValue = '';
        this._initFinished = false;
        this._minDate = {
            year: 1840,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this._maxDate = {
            year: 10000,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this.selectedWeek = null;
        this.dateOpts = {};
        // 开始输入控件聚焦
        this.beginFocus = false;
        // 结束输入控件聚焦
        this.endFocus = false;
        // 整体聚焦
        this.totalFocus = false;
        // 是否字符超长显示Tip
        this.isActiveTip = false;
        this._realValue = null;
        this._realRangeValue = null;
        this.formatedValue = '';
        this.dtService = null;
        this._updateOn = 'change';
        // 日期选择后设置为 true， blur 事件将不会重复执行valueChanged；
        // 键盘修改时，blur 事件中会执行一次 valueChanged 后，将此值设为 false;
        this._valueChangeEmitted = false;
        this._mousedownEvent = null;
        this.closeCalendarHandler = null;
        this.cdr = null;
        /**
         * 缓存通过点击日历的数据，用于的格式化格式不标准时，格式化数据。
         */
        this._SELECT_DATE_ = null;
        this.dynamicText = '';
        this.dynamicValue = null;
        this.dynamicValueChange = new EventEmitter();
        this.dynamicViewChanged = new EventEmitter();
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.defaultConfig = this.defaultConfigService.getDefaultConfig();
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService);
            this.dtService = this.injector.get(DateTimeHelperService);
            this.notifySer = this.injector.get(NotifyService, null);
            if (this.notifySer) {
                this.notifySer.config.position = 'top-center';
            }
        }
        this.localeConfig = new DatepickerLocaleService();
        this.vcRef = this.injector.get(ViewContainerRef, null);
        this.cfr = this.injector.get(ComponentFactoryResolver, null);
        this.renderer = this.injector.get(Renderer2, null);
        this._applicationRef = this.injector.get(ApplicationRef);
        this.cdr = this.injector.get(ChangeDetectorRef);
        this.overLayService = new OverLayHiddenService();
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    // 日期格式
    /**
     * @param {?} value
     * @return {?}
     */
    set dateFormat(value) {
        if (value) {
            // value 格式形如 yyyy-MM-dd HH:mm:ss
            // const formArr = 'yyyy-MM-dd HH:mm:ss'.split(' ');
            value = value.replace(/^\s+|\s+$/g, ''); // 去掉左右空格
            value = value.replace(/\s+/g, ' '); // 将中间的多个连续空格，替换为1个空格
            // 将中间的多个连续空格，替换为1个空格
            /** @type {?} */
            const formArr = value.split(' ');
            this._dateFormat = formArr[0];
            // 处理'yyyy-MM-dd h:mm:ss a'即12小时显示的情况
            if (formArr.length === 3) {
                this._timeFormat = 'h:mm:ss a';
            }
            else {
                this._timeFormat = formArr[1];
            }
        }
        // this._dateFormat = this._dateFormat ? (this._dateFormat + '').replace(/m/g, 'M') : '';
        if (this._dateFormat) {
            /** @type {?} */
            const mm = ['yyyy-mm', 'yyyy/mm', 'yyyy年mm', 'mm/yyyy'];
            /** @type {?} */
            const _mm = mm.find((/**
             * @param {?} m
             * @return {?}
             */
            m => this._dateFormat.includes(m)));
            if (_mm) {
                this._dateFormat = this._dateFormat.replace(_mm, _mm.replace(/m/g, 'M'));
            }
            if (this._timeFormat && this.showTime) {
                this._dateFormat += ' ' + this._timeFormat;
                if (this._timeFormat.indexOf('时') > -1) {
                    this._timeFormat = this._timeFormat.replace('时', ':').replace('分', ':').replace('秒', '');
                }
            }
        }
        // this.dateOpts.dateFormat = this._dateFormat;
    }
    /**
     * @return {?}
     */
    get dateFormat() {
        return this._dateFormat;
    }
    // 最小日期
    // 加入接收时分秒功能
    /**
     * @param {?} val
     * @return {?}
     */
    set minDate(val) {
        /** @type {?} */
        const type = Object.prototype.toString.call(val);
        /** @type {?} */
        let date;
        switch (type) {
            case '[object Date]':
                date = val;
                break;
            case '[object String]':
                if (val) {
                    date = new Date(val);
                }
                else {
                    date = new Date(1840, 1, 1, 0, 0, 0);
                }
                break;
            case '[object Null]':
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
            // case null:
            //     date = new Date(1840, 1, 1, 0, 0, 0);
            //     break;
            case '[object Undefined]':
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
            default:
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
        }
        if (isValid(date)) {
            /** @type {?} */
            const year = date.getFullYear();
            /** @type {?} */
            const month = date.getMonth() + 1;
            /** @type {?} */
            const day = date.getDate();
            /** @type {?} */
            const hour = date.getHours();
            /** @type {?} */
            const minute = date.getMinutes();
            /** @type {?} */
            const second = date.getSeconds();
            this._minDate = { year, month, day, hour, minute, second };
        }
    }
    /**
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    // 最大日期
    // 加入接收时分秒功能
    /**
     * @param {?} val
     * @return {?}
     */
    set maxDate(val) {
        /** @type {?} */
        const type = Object.prototype.toString.call(val);
        /** @type {?} */
        let date;
        switch (type) {
            case '[object Date]':
                date = val;
                break;
            case '[object String]':
                if (val) {
                    date = new Date(val);
                }
                else {
                    date = new Date(10000, 1, 1, 0, 0, 0);
                }
                break;
            case '[object Null]':
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
            // case null:
            //     date = new Date(10000, 1, 1, 0, 0, 0);
            //     break;
            case '[object Undefined]':
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
            default:
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
        }
        if (isValid(date)) {
            /** @type {?} */
            const year = date.getFullYear();
            /** @type {?} */
            const month = date.getMonth() + 1;
            /** @type {?} */
            const day = date.getDate();
            /** @type {?} */
            const hour = date.getHours();
            /** @type {?} */
            const minute = date.getMinutes();
            /** @type {?} */
            const second = date.getSeconds();
            this._maxDate = { year, month, day, hour, minute, second };
        }
    }
    /**
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    // 日期范围：开始日期
    /**
     * @param {?} value
     * @return {?}
     */
    set beginValue(value) {
        value = value ? value : '';
        if (value instanceof Date) {
            value = this.dateTo(value);
            this.returnType = 'Date';
        }
        else {
            if (value.indexOf('T') > -1) {
                value = value.replace('T', ' ');
            }
            this.returnType = 'String';
        }
        this._beginValue = value;
        if (this._initFinished) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
    }
    /**
     * @return {?}
     */
    get beginValue() {
        return this.dateFrom(this._beginValue, true);
    }
    // 日期范围：结束日期
    /**
     * @param {?} value
     * @return {?}
     */
    set endValue(value) {
        value = value ? value : '';
        if (value instanceof Date) {
            value = this.dateTo(value);
            this.returnType = 'Date';
        }
        else {
            if (value.indexOf('T') > -1) {
                value = value.replace('T', ' ');
            }
            this.returnType = 'String';
        }
        this._endValue = value;
        if (this._initFinished) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
    }
    /**
     * @return {?}
     */
    get endValue() {
        return this.dateFrom(this._endValue, true);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this._value = v ? v : '';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._ngControl = this.injector.get(NgControl, null);
        this.initPlaceholder();
        this.mergeDateOptions();
        if (this._beginValue && this._endValue) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
        this._initFinished = true;
        this.datePicekrService = new DatePickerService(this.dateOpts);
    }
    /**
     * @private
     * @return {?}
     */
    initPlaceholder() {
        if (this.localeService) {
            this.locale = this.localeService.getValue('locale');
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
            this.placeholder = this.placeholder
                ? this.placeholder
                : this.localDateOpts.placeholder
                    ? this.localDateOpts.placeholder
                    : '请选择日期';
            if (!this.beginPlaceholder) {
                this.beginPlaceholder = this.localDateOpts.range.begin || this.placeholder;
            }
            if (!this.endPlaceholder) {
                this.endPlaceholder = this.localDateOpts.range.end || this.placeholder;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    mergeDateOptions() {
        this.dateOpts = Object.assign({}, this.defaultConfig, this.buildOptions());
        if (this.dateOpts.dateFormat) {
            if (!this._dateFormat) {
                this.dateFormat = this.dateOpts.dateFormat;
                this.dateOpts.dateFormat = this.dateFormat;
            }
        }
        if (this.showTime && !this._timeFormat) {
            this._timeFormat = 'HH:mm:ss';
            this.dateOpts.timeFormat = this._timeFormat;
        }
        if (this.dateOpts.returnFormat) {
            if (!this.returnFormat) {
                this.returnFormat = this.dateOpts.returnFormat;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.locale && changes.locale.isFirstChange()) {
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (changes) {
            /** @type {?} */
            let flag = false;
            /** @type {?} */
            const inputs = ['showTime', 'showType', 'dateRange', 'maxDate', 'minDate', 'monthRangeValue', 'maxSelected', 'separator', 'selectedOrderBy'];
            Object.keys(changes).forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                if (!changes[e].isFirstChange() && (this.dateOpts[e] || inputs.includes(e))) {
                    flag = true;
                }
            }));
            if (flag) {
                this.dateOpts = Object.assign({}, (this.dateOpts || this.defaultConfig), this.buildOptions());
            }
        }
        if (changes.readonly &&
            !changes.readonly.currentValue &&
            !changes.readonly.firstChange &&
            !this.value &&
            this.useDefault) {
            this.setDefaultValue();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this._timer = setTimeout((/**
         * @return {?}
         */
        () => {
            this.setDefaultValue();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        clearTimeout(this._timer);
        this.closeSelector();
        this.overLayService.destory(this.el.nativeElement);
        this.overLayService = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.value && !this.readonly && !this.disabled) {
            if (this.value && this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = '';
            }
            if (this.dateOpts.dateRange) {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 300;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 190;
                }
            }
            else {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 170;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 120;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.readonly && !this.disabled && this.clearIcon) {
            this.clearIcon.nativeElement.style.visibility = 'hidden';
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlur(e) {
        this.totalFocus = false;
        /** @type {?} */
        let _runblur = true;
        if (this.value) {
            try {
                this.value = this.transform(this.value);
                /** @type {?} */
                const valid = this._isValid(this.value);
                if (!valid) {
                    this.clearDate();
                    _runblur = false;
                }
            }
            catch (e) {
                this.clearDate();
                _runblur = false;
            }
        }
        /** @type {?} */
        const updateModel = (/**
         * @return {?}
         */
        () => {
            if (!this._valueChangeEmitted) {
                /** @type {?} */
                const realDate = this.dateFrom(this.transform(this.value, this.returnFormat));
                this.onNgModelChange(this.value, realDate, true);
                this.onModelTouched();
            }
        });
        if (this.editable && _runblur) {
            if (this['inDatagrid']) {
                updateModel();
            }
            else {
                setTimeout(updateModel, 250);
            }
        }
        this._valueChangeEmitted = false;
        if (this._mousedownEvent) {
            this._mousedownEvent();
            this._mousedownEvent = null;
        }
        this.blur.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocus(e) {
        this.totalFocus = true;
        this.registerMouseDownHandle();
        this.focus.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputClick(event) {
        event.stopPropagation();
        if (!this.readonly && !this.disabled) {
            this.registerMouseDownHandle();
            this.toggleCalendar(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerMouseDownHandle() {
        if (!this._mousedownEvent) {
            this._mousedownEvent = this.renderer.listen(document, 'mousedown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target.className.toString().indexOf('SVGAnimatedString') > -1) {
                    return;
                }
                if (e.target.closest('.dynamic-view-item')) {
                    return;
                }
                if (e.target.closest('.f-cmp-datepicker') ||
                    e.target.closest('.f-datepicker-container') || e.target.className.indexOf('f-icon-date') > -1) {
                    if (this.dateInput) {
                        this.renderer.setStyle(this.dateInput.nativeElement, 'unselectable', 'on');
                    }
                    e.preventDefault();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    setDefaultValue() {
        if (!this.readonly && !this.value && this.useDefault) {
            /** @type {?} */
            const now = new Date();
            /** @type {?} */
            let nowValue = '';
            if (!this.dateOpts.dateRange) {
                nowValue = this.dateTo(now);
            }
            else {
                nowValue =
                    this.dateTo(now) +
                        this.dateRangeDatesDelimiter +
                        this.dateTo(new Date(now.setMonth(now.getMonth() + 1)));
            }
            if (this.datePicekrService.validate(nowValue)) {
                this.value = nowValue;
                this.onNgModelChange(this.value);
                this.onModelTouched();
            }
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    clearDynamicDate($event = null) {
        if ($event) {
            $event.stopPropagation();
        }
        this.dateOpts.dynamicValueChanged(null);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    clearDate($event = null) {
        if ($event) {
            $event.stopPropagation();
        }
        this._SELECT_DATE_ = null;
        if (!this.disabled) {
            this._realRangeValue = null;
            this._realValue = null;
            this.selectedWeek = null;
            this.onDateChanged({
                isRange: this.dateOpts.dateRange,
                singleDate: {
                    date: this.utilService.resetDate(),
                    jsDate: null,
                    formatted: EMPTY_STR,
                    epoc: 0
                },
                dateRange: {
                    beginDate: this.utilService.resetDate(),
                    beginJsDate: null,
                    beginEpoc: 0,
                    endDate: this.utilService.resetDate(),
                    endJsDate: null,
                    endEpoc: 0,
                    formatted: EMPTY_STR
                }
            });
            this.closeSelector(CalToggle.CloseByCalBtn);
            this.onModelChange(null);
            this.clear.emit();
            if (this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = 'hidden';
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSingleInputNgModelChange($event) {
        this.value = $event || '';
        this._realValue = this.value ? this.dateFrom($event) : '';
        this.closeSelector();
    }
    /**
     * @param {?} value
     * @param {?=} realdate
     * @param {?=} emitValueChange
     * @return {?}
     */
    onNgModelChange(value, realdate = null, emitValueChange = false) {
        // this.value = value;
        if (this.dateRange || this.showType == ShowType.selectWeek) {
            /** @type {?} */
            const tmpArr = value ? value.split(this.dateRangeDatesDelimiter) : ['', ''];
            /** @type {?} */
            const _beginValue = this.transform(tmpArr[0], this.returnFormat);
            /** @type {?} */
            const _endValue = this.transform(tmpArr[1], this.returnFormat);
            this._beginValue = this.transform(tmpArr[0]);
            this._endValue = this.transform(tmpArr[1]);
            value = _beginValue && _endValue ? _beginValue + this.dateRangeDatesDelimiter + _endValue : '';
            this._realRangeValue = value;
            this.onModelChange(value);
            this.cdr.detectChanges();
            this.beginValueChange.emit(this._beginValue);
            this.endValueChange.emit(this._endValue);
            /** @type {?} */
            const p = {
                date: null,
                formatted: this.value,
                returnFormatted: this._realRangeValue,
                cmpRef: this
            };
            this.valueChange.emit(p);
        }
        else {
            if (value === '') {
                this.value = '';
                this._onModelChange(null, emitValueChange);
                return;
            }
            if (realdate) {
                this._realValue = this.getRealReturnFormatted(realdate);
                this._onModelChange(this._realValue, emitValueChange);
                if (this.dateInput && this.dateInput.nativeElement.value !== this.value) {
                    this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                }
            }
            else {
                if (this._isValid(value)) {
                    this._realValue = this.getRealReturnFormatted(realdate);
                    if (this.dateInput) {
                        this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                    }
                    this._onModelChange(this._realValue, emitValueChange);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} realValue
     * @param {?} emit
     * @return {?}
     */
    _onModelChange(realValue, emit) {
        this._realValue = realValue;
        this.onModelChange(realValue);
        if (emit) {
            /** @type {?} */
            const p = {
                date: this.utilService.isDateValid(this.value, this.dateOpts, true),
                formatted: this.value,
                returnFormatted: realValue,
                cmpRef: this
            };
            if (this.valueChange.observers.length) {
                if (this.whenValueChangedThenCloseSelectorPanel) {
                    this.closeSelector();
                }
                this.valueChange.emit(p);
            }
        }
    }
    /**
     * @private
     * @param {?} realdate
     * @return {?}
     */
    getRealReturnFormatted(realdate) {
        if (realdate) {
            if (this.returnType === 'Date') {
                return realdate;
            }
            else {
                if (this.returnFormat) {
                    return this.dtService.formatTo(realdate, this.returnFormat);
                }
                return realdate;
            }
        }
        else {
            return this.dateFrom(this._realValue || this.value) || '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateRangeInputBlur(event) {
        this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        this.onNgModelChange(this._realRangeValue || this.value);
    }
    /**
     * @return {?}
     */
    openCalendar() {
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        let val = this._realValue;
        if (!this.multiSelect) {
            if (this.dateRange || this.showType == ShowType.selectWeek) {
                val = this._realRangeValue;
            }
            else {
                if (this.returnType === 'Date') {
                    val = this.transform(val, this.returnFormat);
                }
            }
        }
        if (this.cRef === null) {
            this.cRef = this.calendarRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
            this.datePicekrService.registerScrollEvent((/**
             * @return {?}
             */
            () => {
                this.closeSelector();
            }));
            this.cRef.instance.dateHlp = this.dtService;
            if (this.showType === 4 && this.selectedWeek) {
                this.cRef.instance.selectedWeek = this.selectedWeek;
            }
            if (this.multiSelect) {
                this.cRef.instance.multiDatesChanged = (/**
                 * @param {?} dates
                 * @return {?}
                 */
                (dates) => {
                    this.value = dates.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.value)).join(this.separator);
                    this._realValue = dates.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => this.dtService.formatTo(`${n.year}-${n.month}-${n.day}`, this.returnFormat))).join(this.separator);
                    this.multiSelectedChanged();
                });
                this.cRef.instance.showNotify = (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const msg = this.localDateOpts.message['102'].replace('${0}', this.maxSelected);
                    if (this.notifySer) {
                        this.notifySer.warning(msg);
                    }
                    else {
                        alert(msg);
                    }
                });
            }
            this.cRef.instance.initialize(this.dateOpts, '', this.datePicekrService.getSelectorPosition(this.el.nativeElement, this.cRef), val, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            (dm, close) => {
                if (this.dateOpts.dateRange && this.showTime && dm.dateRange.endJsDate < dm.dateRange.beginJsDate) {
                    // const { year: beginYear, month: beginMonth,  day: beginDay  } = {...dm.dateRange.beginDate};
                    // const { year: endYear, month: endMonth,  day: endDay  } = {...dm.dateRange.endDate};
                    // error message:  The end time must not be earlier than the start time
                    // error message:  結束時間不得早于開始時間
                    /** @type {?} */
                    const msg = this.localDateOpts.message['101'];
                    if (this.notifySer) {
                        this.notifySer.warning(msg);
                    }
                    else {
                        alert(msg);
                    }
                    return;
                }
                this.selectedWeek = this.cRef.instance.selectedWeek;
                this.onDateChanged(dm);
                if (close) {
                    this.closeSelector(CalToggle.CloseByDateSel);
                }
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            (cvc) => {
                // this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            (rds) => {
                // this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            () => {
                this.closeSelector(CalToggle.CloseByEsc);
            }));
            this.cRef.instance.dynamicViewShow.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const t = Object.assign(e, { dynamicValue: this.dynamicValue, singleValue: this._realValue, instance: this });
                this.dynamicViewChanged.emit(t);
            }));
            // this.cdr.detectChanges();
        }
        else {
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
        }
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const t = e.target;
            /** @type {?} */
            const notClose = (this.cRef && this.cRef.location.nativeElement.contains(t)) ||
                t.closest('.multi-date-select') || (t.className && t.className.indexOf('multi-date-select') > -1);
            if (notClose) {
                return false;
            }
            this.closeSelector();
        }), { onlyTopWindow: true });
        this.cRef.changeDetectorRef.detectChanges();
        // this.preventClose = false;
    }
    /**
     * @param {?=} reason
     * @return {?}
     */
    closeSelector(reason) {
        if (this.cRef !== null) {
            this.calendarRef.remove(this.calendarRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            // this.cdr.detectChanges();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container.childElementCount) {
                container.remove();
            }
            this.renderer.setStyle(container, 'pointer-events', '');
        }
        this.totalFocus = false;
        if (this.dateOpts.dateRange) {
            this.beginFocus = false;
            this.endFocus = false;
        }
        if (this.closeCalendarHandler) {
            this.closeCalendarHandler();
            this.closeCalendarHandler = null;
        }
        if (this.datePicekrService) {
            this.datePicekrService.removeMouseEvent();
        }
        this.overLayService.destory(this.el.nativeElement);
    }
    /**
     * @param {?} close
     * @param {?=} emit
     * @return {?}
     */
    toggleCalendar(close, emit = true) {
        if (this.disabled) {
            this.totalFocus = false;
            if (this.dateOpts.dateRange) {
                this.beginFocus = false;
                this.endFocus = false;
            }
            return;
        }
        if (this.cRef === null) {
            if (!this.closeCalendarHandler) {
                this.closeCalendarHandler = this.renderer.listen(document, CLICK, (/**
                 * @return {?}
                 */
                () => this.closeSelector(CalToggle.CloseByOutClick)));
            }
            this.totalFocus = true;
            this.openCalendar();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
            /** @type {?} */
            const zindex = this.commonUtils.getFloatingLayerIndex();
            this.renderer.setStyle(container, 'zIndex', zindex);
        }
        else {
            /** @type {?} */
            let flag = true;
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => {
                        if (el === this.cRef.location.nativeElement) {
                            flag = false;
                        }
                    }));
                }
            }
            if (flag) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.totalFocus = true;
                this.openCalendar();
            }
            else {
                this.totalFocus = false;
                if (this.dateOpts.dateRange) {
                    this.beginFocus = false;
                    this.endFocus = false;
                }
                // document.removeEventListener(CLICK, this.onClickHidden);
                close && this.closeSelector(CalToggle.CloseByCalBtn);
                // this.renderer.setStyle(container, 'pointer-events', '')
                if (emit) {
                    this.close.emit();
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChanged(event) {
        this._SELECT_DATE_ = event;
        /** @type {?} */
        let valChangeParams = '';
        if (event.singleDate) {
            this.value = event.singleDate.formatted;
            this.formatedValue = event.singleDate.formatted;
            /** @type {?} */
            const returnFormatted = this.getRealReturnFormatted(event.singleDate.jsDate);
            valChangeParams = Object.assign({}, event.singleDate, { formatted: event.singleDate.formatted, returnFormatted });
            const { year, month, day, hour, minute, second } = event.singleDate.date;
            if (month && (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1)) {
                /** @type {?} */
                const nd = new Date(year || new Date().getFullYear(), month - 1, day || 1, hour || 0, minute || 0, second || 0);
                event.singleDate.jsDate = nd;
            }
            let { year: minYear, month: minMonth, day: minDay, hour: minHour, minute: minMinute, second: minSecond } = this.minDate;
            minMonth = this.utilService.padStartZero(minMonth);
            minDay = this.utilService.padStartZero(minDay);
            minHour = this.utilService.padStartZero(minHour);
            minMinute = this.utilService.padStartZero(minMinute);
            minSecond = this.utilService.padStartZero(minSecond);
            /** @type {?} */
            const MIN_DATE = new Date(`${minYear}-${minMonth}-${minDay} ${minHour}:${minMinute}:${minSecond}`);
            if (this.minDate.year !== 1840) {
                if (differenceInSeconds(MIN_DATE, event.singleDate.jsDate) > 0) {
                    event.singleDate.jsDate = MIN_DATE;
                    this.value = this.transform(MIN_DATE);
                }
            }
            else if (this.maxDate.year !== 10000) {
                let { year: maxYear, month: maxMonth, day: maxDay, hour: maxHour, maxute: maxMinute, second: maxSecond } = this.maxDate;
                maxMonth = this.utilService.padStartZero(maxMonth);
                maxDay = this.utilService.padStartZero(maxDay);
                maxHour = this.utilService.padStartZero(maxHour);
                maxMinute = this.utilService.padStartZero(maxMinute);
                maxSecond = this.utilService.padStartZero(maxSecond);
                /** @type {?} */
                const MAX_DATE = new Date(`${maxYear}-${maxMonth}-${maxDay} ${maxHour}:${maxMinute}:${maxSecond}`);
                if (event.singleDate.date.year === 1840 || differenceInSeconds(MIN_DATE, event.singleDate.jsDate) === 0 || differenceInSeconds(MAX_DATE, event.singleDate.jsDate) < 0) {
                    event.singleDate.jsDate = MAX_DATE;
                    this.value = this.transform(MAX_DATE);
                }
            }
            this.onNgModelChange(returnFormatted, event.singleDate.jsDate);
        }
        else if (event.dateRange) {
            this.value = event.dateRange.formatted;
            this.formatedValue = event.dateRange.formatted;
            /** @type {?} */
            const returnFormatted = event.dateRange.returnFormatted;
            // let returnFormatted = this.dateFrom(event.dateRange.returnFormatted);
            valChangeParams = Object.assign({}, event.dateRange, { formatted: event.dateRange.formatted, returnFormatted });
            this.onNgModelChange(returnFormatted, event.dateRange);
        }
        this.onModelTouched();
        this._valueChangeEmitted = true;
        this.valueChange.emit(valChangeParams);
    }
    /**
     * @private
     * @return {?}
     */
    checkMultiSelectedOption() {
        if (this.multiSelect) {
            this.showTime = false;
            this.showType = ShowType.all;
            this.dateRange = false;
            this.enableDynamic = false;
            // 返回格式必须包括年月日
            /** @type {?} */
            const fmtList = ['yyyy-MM-dd', 'yyyy/MM/dd', 'MM/dd/yyyy', 'yyyy年MM月dd日', 'yyyyMMdd'];
            if (!fmtList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n === this.returnFormat))) {
                this.returnFormat = 'yyyy-MM-dd';
            }
            if (!fmtList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n === this.dateFormat))) {
                this.dateFormat = 'yyyy-MM-dd';
            }
        }
    }
    /**
     * @return {?}
     */
    buildOptions() {
        /** @type {?} */
        let dateOpts;
        if (!this.localDateOpts) {
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (this.showType === ShowType.noDateAndMonth) {
            this.localDateOpts.dateFormat = 'yyyy';
            this.localDateOpts.returnFormat = 'yyyy';
        }
        // 检查是否具备启用日期多选的条件
        this.checkMultiSelectedOption();
        /** @type {?} */
        const _showTime = (Number(this.showType) === ShowType.all) ? this.showTime : false;
        dateOpts = {
            dateRange: this.dateRange,
            showTime: _showTime,
            showType: Number(this.showType),
            dateFormat: this.dateFormat ? this.dateFormat : this.localDateOpts.dateFormat,
            returnFormat: this.returnFormat ? this.returnFormat : this.localDateOpts.returnFormat,
            minYear: this._minDate.year,
            maxYear: this._maxDate.year,
            highlightDates: this.highlightDates,
            disableDates: this.disableDates,
            showWeekNumbers: this.showWeekNumbers,
            disableDateRanges: [
                {
                    begin: this.disableDateRangesBegin,
                    end: this.disableDateRangesEnd
                }
            ],
            disableUntil: this._minDate,
            disableSince: this._maxDate,
            disableWeekdays: this.disableWeekdays,
            markDates: [
                {
                    dates: this.markDates,
                    color: this.markDatesColor
                }
            ],
            markWeekends: {
                marked: this.isMarkWeekends,
                color: this.markWeekendsColor
            },
            dateRangeDatesDelimiter: this.dateRangeDatesDelimiter,
            shortcuts: this.shortcuts,
            timeFormat: this._timeFormat,
            monthRangeValue: this.monthRangeValue,
            viewType: this.viewType,
            enableDynamic: this.enableDynamic,
            dynamicValue: this.dynamicValue,
            dynamicValueChanged: (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.dynamicValue = e;
                this.dynamicText = e ? e.text : '';
                this.dateOpts.dynamicValue = e;
                this.dynamicValueChange.emit(e);
                this.closeSelector();
            }),
            previousMaxDays: this.previousMaxDays,
            futureMaxDays: this.futureMaxDays,
            dynamicLocale: this.localDateOpts.dynamicLocale,
            mulstiDatesLocale: this.localDateOpts.mulstiDatesLocale,
            showPresent: this.showPresent,
            hourStep: this.hourStep,
            minuteStep: this.minuteStep,
            secondStep: this.secondStep,
            closeSelectorOnDateSelect: !this.multiSelect,
            multiSelect: this.multiSelect,
            separator: this.separator,
            maxSelected: this.maxSelected,
            selectedOrderBy: this.selectedOrderBy
        };
        dateOpts.firstDayOfWeek = this.firstDayOfWeek;
        switch (Number(this.showType)) {
            case ShowType.noDate:
                dateOpts.defaultView = DefaultView.Month;
                break;
            case ShowType.noDateAndMonth:
                dateOpts.defaultView = DefaultView.Year;
                // dateOpts.dateFormat = 'yyyy';
                // dateOpts.returnFormat = 'yyyy';
                // this.dateFormat = 'yyyy';
                break;
            case ShowType.selectWeek:
                dateOpts.showWeekNumbers = true;
                dateOpts.dateRange = true;
                // dateOpts.firstDayOfWeek = 'mo';
                break;
            // default:
            // this.returnType = 'String';
        }
        return Object.assign({}, this.localDateOpts, dateOpts);
    }
    /**
     * @param {?} d
     * @return {?}
     */
    dateTo(d) {
        /** @type {?} */
        const dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        const monthLabels = this.dateOpts.monthLabels ? this.dateOpts.monthLabels : this.defaultConfig.monthLabels;
        /** @type {?} */
        const showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        const year = d.getFullYear();
        /** @type {?} */
        const month = d.getMonth() + 1;
        /** @type {?} */
        const day = d.getDate();
        /** @type {?} */
        const hour = d.getHours();
        /** @type {?} */
        const minute = d.getMinutes();
        /** @type {?} */
        const second = d.getSeconds();
        /** @type {?} */
        let date;
        if (!showTime) {
            date = { year, month, day };
            this.originTime = { hour, minute, second };
        }
        else {
            date = { year, month, day, hour, minute, second };
        }
        return this.utilService.formatDate(date, dateFormat, monthLabels);
    }
    // 返回真实日期 Date 类型
    /**
     * @param {?} str
     * @param {?=} ignorRange
     * @return {?}
     */
    dateFrom(str, ignorRange = false) {
        if (!str) {
            return '';
        }
        /** @type {?} */
        const _this = this;
        /** @type {?} */
        const dateRange = this.dateOpts.dateRange ? this.dateOpts.dateRange : this.defaultConfig.dateRange;
        /** @type {?} */
        const dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        const returnFormat = this.dateOpts.returnFormat ? this.dateOpts.returnFormat : this.defaultConfig.returnFormat;
        /** @type {?} */
        const showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        const delimeters = returnFormat.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        let dateValue;
        /** @type {?} */
        const getValue = this.utilService.getDateValue;
        if ((dateRange || this.dateOpts.showType === ShowType.selectWeek) && !ignorRange) {
            /** @type {?} */
            const tmpBegin = str.split(this.dateRangeDatesDelimiter)[0];
            /** @type {?} */
            const tmpEnd = str.split(this.dateRangeDatesDelimiter)[1];
            /** @type {?} */
            let tmpBeginDate = this.utilService.isDateValid(tmpBegin, this.dateOpts, true);
            /** @type {?} */
            let tmpEndDate = this.utilService.isDateValid(tmpEnd, this.dateOpts, true);
            tmpBeginDate = this.utilService.isInitializedDate(tmpBeginDate) ? tmpBeginDate : this.dateOpts.disableUntil;
            tmpEndDate = this.utilService.isInitializedDate(tmpEndDate) ? tmpEndDate : this.dateOpts.disableSince;
            return (this.utilService.formatDate(tmpBeginDate, returnFormat, this.defaultConfig.monthLabels) +
                this.dateRangeDatesDelimiter +
                this.utilService.formatDate(tmpEndDate, returnFormat, this.defaultConfig.monthLabels));
        }
        else {
            if (this.returnType === 'Date') {
                if (str && str instanceof Date) {
                    return str;
                }
                return convert(str, getValue, this.originTime);
            }
            else {
                /** @type {?} */
                const tmpDate = this.utilService.isDateValid(str, this.dateOpts, true);
                return this.utilService.formatDate(tmpDate, returnFormat, this.defaultConfig.monthLabels);
            }
        }
        /**
         * @param {?} v
         * @param {?} _getValue
         * @param {?=} originTime
         * @return {?}
         */
        function convert(v, _getValue, originTime = { hour: 0, minute: 0, second: 0 }) {
            /** @type {?} */
            let fmt = returnFormat;
            if (_this.returnType === 'Date') {
                fmt = 'yyyy-MM-dd' + (showTime ? ' HH:mm:ss' : '');
            }
            if (showTime) {
                /** @type {?} */
                const date = v.split(' ')[0];
                /** @type {?} */
                let time = v.split(' ')[1];
                dateValue = _getValue(date, fmt, delimeters);
                if (time) {
                    time = time.replace(/[时,分]/g, ':').replace(/[秒]/, '');
                    const [h, m, s] = time.split(':');
                    /** @type {?} */
                    const hour = h;
                    /** @type {?} */
                    const minute = m;
                    /** @type {?} */
                    const second = s ? s : '';
                    dateValue[3] = { value: hour, format: 'hh' };
                    dateValue[4] = { value: minute, format: 'mm' };
                    if (second) {
                        dateValue[5] = { value: second, format: 'ss' };
                    }
                }
            }
            else {
                /** @type {?} */
                const date = v.split(' ')[0];
                dateValue = _getValue(date, fmt, delimeters);
            }
            /** @type {?} */
            let year = Number(dateValue[0] ? dateValue[0].value : 1970);
            /** @type {?} */
            const yearValue = dateValue[0];
            if (yearValue.format) {
                if (!yearValue.value || yearValue.value.length !== yearValue.format.length) {
                    year = null;
                }
            }
            /** @type {?} */
            const month = Number(dateValue[1] ? dateValue[1].value : 1) - 1;
            /** @type {?} */
            const day = Number(dateValue[2] ? dateValue[2].value : 1);
            /** @type {?} */
            const _hour = dateValue[3] ? Number(dateValue[3].value) : originTime.hour;
            /** @type {?} */
            const _minute = dateValue[4] ? Number(dateValue[4].value) : originTime.minute;
            /** @type {?} */
            const _second = dateValue[5] ? Number(dateValue[5].value) : originTime.second;
            if (!year) {
                return null;
            }
            return new Date(year, month, day, _hour, _minute, _second);
        }
    }
    /**
     * @param {?} value
     * @param {?=} _fmt
     * @return {?}
     */
    transform(value, _fmt = this.dateOpts.dateFormat) {
        value = value ? value : '';
        const { returnFormat, dateFormat, showTime } = this.dateOpts;
        /** @type {?} */
        let _tmpDate = null;
        if (typeof value === 'string') {
            _tmpDate = parse(value, returnFormat, new Date());
            if (!isValid(_tmpDate)) {
                if (this._SELECT_DATE_ && this._SELECT_DATE_.singleDate) {
                    _tmpDate = this._SELECT_DATE_.singleDate.jsDate;
                }
                else {
                    if (this._realValue) {
                        _tmpDate = parse(this._realValue, returnFormat, new Date());
                    }
                }
            }
        }
        else {
            if (value instanceof Date) {
                _tmpDate = value;
            }
        }
        /** @type {?} */
        let formattedVal = value;
        if (isValid(_tmpDate)) {
            formattedVal = this.dtService.formatTo(_tmpDate, _fmt);
            return formattedVal;
        }
        else {
            // 兼容年月日,年月,年格式
            value = value.replace(/[年,月]/g, '-').replace(/[日]/, '');
            if (value[value.length - 1] === '-') {
                value = value.substr(0, value.length - 1);
            }
            if (isValid(new Date(value))) {
                formattedVal = this.dtService.formatTo(value, _fmt);
            }
            else {
                value = '';
            }
        }
        if (value) {
            if (this.dateFrom(value, true) === '') {
                /** @type {?} */
                const tmpDate = this.utilService.isDateValid(value, Object.assign({}, this.dateOpts, {
                    dateFormat: returnFormat
                }));
                formattedVal = this.utilService.formatDate(tmpDate, _fmt, this.defaultConfig.monthLabels);
            }
        }
        return formattedVal;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        if (this.value !== value) {
            if (this.dateOpts.dateRange) {
                /** @type {?} */
                const _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
                /** @type {?} */
                const beginStr = _tmpDateArr[0];
                /** @type {?} */
                const endStr = _tmpDateArr[1];
                this._beginValue = this.transform(beginStr);
                this._endValue = this.transform(endStr);
                this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
            }
            else {
                if (value) {
                    this.value = this.transform(value);
                }
                else {
                    this.value = '';
                }
            }
            this.cdr.markForCheck();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this.dateOpts.dateRange) {
            /** @type {?} */
            const _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
            /** @type {?} */
            const beginStr = _tmpDateArr[0];
            /** @type {?} */
            const endStr = _tmpDateArr[1];
            this._beginValue = this.transform(beginStr);
            this._endValue = this.transform(endStr);
            this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
        }
        else {
            this.value = this.transform(value);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getValueByType(val) {
        if (val instanceof Date) {
            this.returnType = 'Date';
            // return this.dateTo(val);
            return val;
        }
        else if (val && val instanceof Object) {
            const { begin, end } = val;
            /** @type {?} */
            const beginStr = begin instanceof Date ? this.dateTo(begin) : '';
            /** @type {?} */
            const endStr = begin instanceof Date ? this.dateTo(end) : '';
            this.returnType = 'Object';
            return beginStr && endStr ? beginStr + this.dateRangeDatesDelimiter + endStr : '';
        }
        else if (val && typeof val === 'string') {
            if (val.indexOf('T') > -1) {
                val = val.replace('T', ' ');
            }
            this.returnType = 'String';
            return val;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (!this.multiSelect) {
            if (typeof val === 'object' && val && !isDate(val)) {
                this.dynamicValue = val;
                this.dynamicText = this.utilService.formatDynamicValue(val, this.dateOpts.dynamicLocale);
                this.dateOpts.showDynamicView = true;
                this.dateOpts.dynamicValue = this.dynamicValue;
            }
            else {
                // this.dateOpts.showDynamicView = false;
                this._realValue = val;
                if (this.dateRange) {
                    this._realRangeValue = val;
                }
                this.setValue(this.getValueByType(val));
            }
        }
        else {
            if (!val) {
                val = '';
            }
            this.value = val.split(this.separator).map((/**
             * @param {?} n
             * @return {?}
             */
            n => this.transform(n))).join(this.separator);
            this._realValue = val;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onPrevFocus(value) {
        this.beginFocus = true;
        if (this.endFocus == true) {
            this.endFocus = !this.endFocus;
        }
        this.PrevFocus.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onNextFocus(value) {
        this.endFocus = true;
        if (this.beginFocus == true) {
            this.beginFocus = !this.beginFocus;
        }
        this.NextFocus.emit();
    }
    /**
     * @private
     * @param {?} val
     * @param {?=} realValue
     * @return {?}
     */
    _convert2dateString(val, realValue = false) {
        if (val) {
            /** @type {?} */
            let t = val.replace(/[年,月]/g, '-').replace(/[日,号]/g, ' ').replace(/[时,点,分,分钟]/g, ':').replace('秒', '');
            if (this.showType === ShowType.noDateAndMonth && t.indexOf('-') === -1) {
                t += '-';
            }
            // 替换连续的空格字符为单个空格
            /** @type {?} */
            var checkSpaceReg = /(\s)\1{1,}/g;
            if (t.match(checkSpaceReg)) {
                t.match(checkSpaceReg).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n[0] === ' ') {
                        t = t.replace(n, ' ');
                    }
                }));
            }
            if (realValue) {
                /** @type {?} */
                const objDate = this.utilService.isDateValid(val, this.dateOpts, true);
                if (objDate) {
                    let { year, month, day, hour, minute, second } = objDate;
                    if (!year) {
                        year = new Date().getFullYear();
                    }
                    if (!month) {
                        month = new Date().getMonth();
                    }
                    if (!day) {
                        day = 1;
                    }
                    if (!hour) {
                        hour = 0;
                    }
                    if (!minute) {
                        minute = 0;
                    }
                    if (!second) {
                        second = 0;
                    }
                    /** @type {?} */
                    const _datePart = `${year}-${this.utilService.padStartZero(month)}-${this.utilService.padStartZero(day)}`;
                    /** @type {?} */
                    const _timePart = `${this.utilService.padStartZero(hour)}:${this.utilService.padStartZero(minute)}:${this.utilService.padStartZero(second)}`;
                    return `${_datePart} ${_timePart}`;
                }
            }
            if (t[t.length - 1] === '-') {
                // t = t.substr(0, t.length - 1);
                t += '01';
            }
            if (t[t.length - 1] === ':') {
                t = t.substr(0, t.length - 1);
            }
            return t.replace(/^\s+|\s+$/g, '');
        }
        return val;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _isValid(value) {
        value = this._convert2dateString(value);
        if (value) {
            if (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1) {
                /** @type {?} */
                const _tmpDate = parse(this.value, this.dateFormat, new Date());
                if (this._realValue) {
                    if (this.returnType === 'Date') {
                        return isValid(this._realValue);
                    }
                    else {
                        return isValid(new Date(this._convert2dateString(this._realValue, true)));
                        // return isValid(parse(this._realValue, this.returnFormat, new Date()));
                    }
                }
                /** @type {?} */
                const d = this.utilService.isDateValid(value, this.dateOpts);
                if (d) {
                    if (d.year || d.month) {
                        /** @type {?} */
                        const cdate = new Date();
                        /** @type {?} */
                        const year = cdate.getFullYear();
                        /** @type {?} */
                        const str = (this.dateOpts.returnFormat || 'yyyy-MM-dd')
                            .replace('yyyy', '' + (d.year || year)).replace('MM', '' + d.month).replace('dd', '1');
                        return isValid(new Date(str));
                    }
                    return false;
                }
                return isValid(value);
            }
            else {
                /** @type {?} */
                const reg = /^\d{1,}$/;
                if (reg.test(value) && this.dateFormat.indexOf('yyyyMMdd') > -1) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    const _r = this._isValid2(value);
                    if (_r.isValided) {
                        this._realValue = this.getRealReturnFormatted(_r.date);
                        this.value = this.transform(_r.date);
                    }
                    return _r.isValided;
                }
                else {
                    /** @type {?} */
                    const _tmpDate = parse(value, this.dateFormat, new Date());
                    /** @type {?} */
                    const d = this.utilService.isDateValid(this.value, this.dateOpts);
                    return isValid(_tmpDate) || this.utilService.isInitializedDate(d);
                }
            }
        }
        return false;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _isValid2(value) {
        /** @type {?} */
        let year = 0;
        /** @type {?} */
        let month = 0;
        /** @type {?} */
        let day = 0;
        /** @type {?} */
        let hour = 0;
        /** @type {?} */
        let minute = 0;
        /** @type {?} */
        let seconds = 0;
        /** @type {?} */
        const df = this.dateFormat;
        if (df.includes('yyyy')) {
            if (value) {
                year = +value.slice(0, 4);
                value = value.slice(4);
            }
            else {
                return false;
            }
        }
        if (df.includes('MM')) {
            if (value) {
                month = +value.slice(0, 2) - 1;
                value = value.slice(2);
                if (month < 0) {
                    month = 0;
                }
            }
            else {
                return false;
            }
        }
        if (df.includes('dd')) {
            if (value) {
                day = +value.slice(0, 2);
                value = value.slice(2);
            }
            else {
                return false;
            }
        }
        if (df.includes('HH')) {
            if (value) {
                hour = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('mm')) {
            if (value) {
                minute = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('ss')) {
            if (value) {
                seconds = +value.slice(0, 2);
            }
        }
        /** @type {?} */
        const d = new Date(year, month, day, hour, minute, seconds);
        return {
            isValided: isValid(d),
            date: d
        };
    }
    /**
     * @private
     * @return {?}
     */
    multiSelectedChanged() {
        this.onModelChange(this._realValue);
        /** @type {?} */
        const p = {
            formatted: this.value,
            returnFormatted: this._realValue,
            cmpRef: this
        };
        this.onModelTouched();
        this.closeSelector(CalToggle.CloseByDateSel);
        this.valueChange.emit(p);
        if (!this.value) {
            this.clear.emit();
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    onRemoveDate(d) {
        if (!d) {
            return;
        }
        const { value, index } = d;
        this.value = this.value.split(this.separator).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== value)).join(this.separator);
        this._realValue = this._realValue.split(this.separator).filter((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => i !== index)).join(this.separator);
        this.multiSelectedChanged();
        this.cdr.detectChanges();
    }
}
FarrisDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datepicker',
                exportAs: 'farris-datepicker',
                template: "<div class=\"input-group\" [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly,\r\n        'f-state-focus':totalFocus\r\n    }\" *ngIf=\"!(dateOpts?.showDynamicView && enableDynamic) && !multiSelect\" >\r\n    <ng-container *ngIf=\"!dateOpts.dateRange; else range\">\r\n        <input type=\"text\" class=\"form-control f-utils-fill\" [attr.placeholder]=\"readonly||disabled?'':placeholder\" name=\"farris-date\" [ngModel]=\"value\"\r\n            (ngModelChange)=\"onSingleInputNgModelChange($event)\" #dateInput autocomplete=\"off\" [readonly]=\"readonly || !editable\"\r\n            [disabled]=\"disabled\" (dateChanged)=\"onDateChanged($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" (click)=\"onInputClick($event)\" style=\"padding-right: 4px;\" farrisPopover\r\n            [popover]=\"value\" [triggers]=\"'hover'\" [popActive]=\"isActiveTip\" [showAction]=\"'show2'\"\r\n            [container]=\"'body'\" (keydown.tab)=\"closeSelector(3)\" />\r\n\r\n    </ng-container>\r\n    <ng-template #range>\r\n        <div class=\"form-control date-range-wrapper\" (click)=\"onInputClick($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" [title]=\"readonly || !editable|| disabled ?value:''\">\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-begin\" [class.f-state-focus]=\"totalFocus&&beginFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':beginPlaceholder\"\r\n                    [(ngModel)]=\"_beginValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\"\r\n                    autocomplete=\"off\" (blur)=\"onDateRangeInputBlur('begin')\" (focus)=\"onPrevFocus($event)\"/>\r\n            </span>\r\n            <span class=\"f-icon f-icon-orientation-arrow sub-input-spliter\"></span>\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-end\" [class.f-state-focus]=\"totalFocus&&endFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':endPlaceholder\"\r\n                    [(ngModel)]=\"_endValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\" autocomplete=\"off\"\r\n                    (blur)=\"onDateRangeInputBlur('end')\" (focus)=\"onNextFocus($event)\" />\r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\" style=\"position: relative;\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear\" (click)=\"clearDate($event)\"\r\n            style=\"visibility: hidden\" #clearIcon  *ngIf=\"showClear\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <button type=\"button\" class=\"btn f-cmp-iconbtn\" (click)=\"onInputClick($event)\" style=\"z-index:0\">\r\n            <span class=\"f-icon f-icon-date\"></span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<dynamic-date-input *ngIf=\"dateOpts?.showDynamicView && enableDynamic && !multiSelect\" [showClear]=\"showClear\"\r\n    [value]=\"dynamicValue\" [text]=\"dynamicText\" [readonly]=\"readonly\" [disabled]=\"disabled\" [isFocus]=\"totalFocus\" [placeholder]=\"placeholder\"\r\n    (inputClick)=\"onInputClick($event)\" (clear)=\"clearDynamicDate($event)\" (tabKeydown)=\"closeSelector(3)\"></dynamic-date-input>\r\n\r\n\r\n<multi-select-input  *ngIf=\"multiSelect\" [separator]=\"separator\" [dates]=\"value\" [placeholder]=\"readonly||disabled?'':placeholder\"\r\n[editable]=\"!readonly&&!disabled\"  [orderBy]=\"selectedOrderBy\"\r\n (clickHandle)=\"onInputClick($event)\" (remove)=\"onRemoveDate($event)\"></multi-select-input>\r\n <input type=\"hidden\" [(ngModel)]=\"_realValue\"  *ngIf=\"multiSelect\">\r\n\r\n\r\n<ng-container #calendar>\r\n    <ng-container></ng-container>\r\n</ng-container>\r\n",
                providers: [FARRIS_DP_VALUE_ACCESSOR, UtilService, DefaultConfigService, LocaleService],
                styles: [`
            :host {
                display: block;
            }

            :host .datepicker-clear {
                position: absolute;
                height: 100%;
                right: 0;
                top: 0;
                z-index: 100;
            }
        `]
            }] }
];
/** @nocollapse */
FarrisDatepickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UtilService },
    { type: DefaultConfigService },
    { type: Injector }
];
FarrisDatepickerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    viewType: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    dateRange: [{ type: Input }],
    showTime: [{ type: Input }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    showType: [{ type: Input }],
    locale: [{ type: Input }],
    dateFormat: [{ type: Input }],
    useDefault: [{ type: Input }],
    returnType: [{ type: Input }],
    returnFormat: [{ type: Input }],
    placeholder: [{ type: Input }],
    beginPlaceholder: [{ type: Input }],
    endPlaceholder: [{ type: Input }],
    whenValueChangedThenCloseSelectorPanel: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    highlightDates: [{ type: Input }],
    disableDateRangesBegin: [{ type: Input }],
    disableDateRangesEnd: [{ type: Input }],
    disableDates: [{ type: Input }],
    disableWeekdays: [{ type: Input }],
    markDates: [{ type: Input }],
    markDatesColor: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    isMarkWeekends: [{ type: Input }],
    markWeekendsColor: [{ type: Input }],
    dateRangeDatesDelimiter: [{ type: Input }],
    shortcuts: [{ type: Input }],
    monthRangeValue: [{ type: Input }],
    beginValue: [{ type: Input }],
    endValue: [{ type: Input }],
    enableDynamic: [{ type: Input }],
    previousMaxDays: [{ type: Input }],
    futureMaxDays: [{ type: Input }],
    showClear: [{ type: Input }],
    showPresent: [{ type: Input }],
    firstDayOfWeek: [{ type: Input }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    beginValueChange: [{ type: Output }],
    endValueChange: [{ type: Output }],
    PrevFocus: [{ type: Output }],
    NextFocus: [{ type: Output }],
    close: [{ type: Output }],
    multiSelect: [{ type: Input }],
    separator: [{ type: Input }],
    maxSelected: [{ type: Input }],
    selectedOrderBy: [{ type: Input }],
    dp: [{ type: ViewChild, args: [FarrisDatePickerDirective,] }],
    clearIcon: [{ type: ViewChild, args: ['clearIcon',] }],
    calendarRef: [{ type: ViewChild, args: ['calendar', { read: ViewContainerRef },] }],
    PFocus: [{ type: ViewChild, args: ['onPrevFocus',] }],
    NFocus: [{ type: ViewChild, args: ['onNextFocus',] }],
    dateInput: [{ type: ViewChild, args: ['dateInput',] }],
    dynamicValue: [{ type: Input }],
    dynamicValueChange: [{ type: Output }],
    dynamicViewChanged: [{ type: Output }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SelectionSidebarComponent {
    constructor() {
        this.setTime = new EventEmitter();
    }
}
SelectionSidebarComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-selection-sidebar',
                template: "<div class=\"f-datepicker-sidebar\">\r\n    <button *ngFor=\"let item of opts.shortcuts\" (click)=\"item.onClick(setTime)\">\r\n        {{ item.text }}\r\n    </button>\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None
            }] }
];
SelectionSidebarComponent.propDecorators = {
    opts: [{ type: Input }],
    setTime: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AngularMyDatePickerComponent {
}
AngularMyDatePickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'angular-datepicker',
                template: ''
            }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicViewComponent {
    /**
     * @param {?} injector
     * @param {?} cd
     */
    constructor(injector, cd) {
        this.injector = injector;
        this.cd = cd;
        this._value = '';
        this._data = null;
        this.previousMaxDays = 30;
        this.futureMaxDays = 30;
        this.previous_dateType = 'day';
        this.previous_days = 1;
        this.future_dateType = 'day';
        this.future_days = 1;
        this.present_first_dateType = 'month';
        this.present_last_dateType = 'month';
        this.valueChange = new EventEmitter();
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set value(val) {
        this._value = val;
        this.valueChange.emit(val);
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set data(val) {
        this._data = val;
        this.setValue(val);
    }
    /**
     * @return {?}
     */
    get data() {
        return this._data;
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} $event
     * @return {?}
     */
    onListItemFormControlClick($event) {
        /** @type {?} */
        const lbl = $event.target.closest('label');
        if (lbl) {
            lbl.click();
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    setValue(val) {
        if (val) {
            this.value = val.name;
            switch (this.value) {
                case 'present_day': // 今天
                case 'present_month': // 本月
                case 'present_year':
                    break;
                case 'previou':
                    this.previous_dateType = val.dateType;
                    this.previous_days = val.count;
                    break;
                case 'future':
                    this.future_dateType = val.dateType;
                    this.future_days = val.count;
                    break;
                case 'present_first':
                    this.present_first_dateType = val.dateType;
                    break;
                case 'present_last':
                    this.present_last_dateType = val.dateType;
                    break;
            }
            this.cd.detectChanges();
        }
    }
    /**
     * @return {?}
     */
    getValue() {
        /** @type {?} */
        let val = null;
        if (this.value) {
            switch (this.value) {
                case 'present_day': // 今天
                    val = { dateType: 'day', period: 'present', count: null, isFirstDay: false, isLastDay: false };
                    break;
                case 'present_month': // 本月
                    val = { dateType: 'month', period: 'present', count: null, isFirstDay: false, isLastDay: false };
                    break;
                case 'present_year':
                    val = { dateType: 'year', period: 'present', count: null, isFirstDay: false, isLastDay: false };
                    break;
                case 'previou':
                    val = { dateType: this.previous_dateType, period: 'previous', count: this.previous_days, isFirstDay: false, isLastDay: false };
                    break;
                case 'future':
                    val = { dateType: this.future_dateType, period: 'future', count: this.future_days, isFirstDay: false, isLastDay: false };
                    break;
                case 'present_first':
                    val = { dateType: this.present_first_dateType, period: 'present', count: null, isFirstDay: true, isLastDay: false };
                    break;
                case 'present_last':
                    val = { dateType: this.present_last_dateType, period: 'present', count: null, isFirstDay: false, isLastDay: true };
                    break;
            }
            if (val) {
                val.name = this.value;
            }
        }
        return val;
    }
    /**
     * @private
     * @param {?} dt
     * @return {?}
     */
    getDateTypeString(dt) {
        switch (dt) {
            case 'week':
                return this.locale.week || '天';
            case 'day':
                return this.locale.day || '天';
            case 'month':
                return this.locale.month || '月';
            case 'year':
                return this.locale.year || '年';
        }
    }
    /**
     * @return {?}
     */
    formatValue() {
        /** @type {?} */
        const val = this.getValue();
        if (val) {
            /** @type {?} */
            let fval = '';
            switch (val.name) {
                case 'present_day': // 今天
                    fval = this.locale.today || '今天';
                    break;
                case 'present_month': // 本月
                    fval = this.locale.presentMonth || '本月';
                    break;
                case 'present_year':
                    fval = this.locale.presentYear || '本年';
                    break;
                case 'previou':
                    fval = (this.locale.previous || '过去') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType);
                    break;
                case 'future':
                    fval = (this.locale.future || '未来') + ' ' + val.count + ' ' + this.getDateTypeString(val.dateType);
                    break;
                case 'present_first':
                    fval = (this.locale.current || '本') + this.getDateTypeString(val.dateType) + (this.locale.first || '第 1 天');
                    break;
                case 'present_last':
                    fval = (this.locale.current || '本') + this.getDateTypeString(val.dateType) + (this.locale.last || '最后 1 天');
                    break;
            }
            return fval;
        }
        else {
            return '';
        }
    }
    /**
     * @private
     * @param {?} typ
     * @param {?} days
     * @return {?}
     */
    setDays(typ, days) {
        if (typ === 'previous') {
            this.previous_days = days;
        }
        else {
            this.future_days = days;
        }
    }
    /**
     * @param {?} $event
     * @param {?} tye
     * @return {?}
     */
    checkMaxDays($event, tye) {
        /** @type {?} */
        const target = (/** @type {?} */ ($event.target));
        /** @type {?} */
        const val = target.value.replace(/[^\d]/g, '');
        /** @type {?} */
        const days = Number(val);
        target.value = days;
        /** @type {?} */
        const max = tye === 'previous' ? this.previousMaxDays : this.futureMaxDays;
        this.setDays(tye, days);
        if (days > max) {
            target.value = max;
            this.setDays(tye, max);
            return;
        }
        else {
            if (days < 1) {
                target.value = 1;
                this.setDays(tye, 1);
                return;
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onNumberKeydown($event) {
        $event.stopPropagation();
        if ($event.key === '.' || $event.key === '-' || $event.key === '+') {
            $event.preventDefault();
        }
    }
}
DynamicViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-dynamic-view',
                template: "<div class=\"datepicker_dynamic-view\">\r\n    <ul>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_day'\">  \r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_today\" value=\"present_day\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_today\">{{locale?.today}}</label>\r\n            </div>\r\n        </li>\r\n        <!--\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_week'\">\r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_present_week\" value=\"present_week\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_present_week\">\u672C\u5468</label>\r\n            </div>\r\n        </li>\r\n        -->\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_month'\">\r\n            <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_present_month\" value=\"present_month\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n            <label class=\"custom-control-label\" for=\"radio_dynamic_present_month\">{{locale?.presentMonth}}</label>\r\n        </div></li>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_year'\">\r\n            <div class=\"custom-control custom-radio\">\r\n            <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_present_year\" value=\"present_year\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n            <label class=\"custom-control-label\" for=\"radio_dynamic_present_year\">{{locale?.presentYear}}</label>\r\n        </div></li>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'previou'\">\r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_previou\" value=\"previou\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_previou\">\r\n                    {{locale?.previous}} <input type=\"number\" [ngModel]=\"previous_days\" name=\"previous_days\" \r\n                    (mousedown)=\"onListItemFormControlClick($event)\" (keydown)=\"onNumberKeydown($event)\"\r\n                    min=\"1\" max=\"{{previousMaxDays}}\" (input)=\"checkMaxDays($event, 'previous')\">\r\n                    <select (mousedown)=\"onListItemFormControlClick($event)\" name=\"previous_dateType\" [(ngModel)]=\"previous_dateType\">\r\n                        <option value=\"day\">{{locale?.day}}</option>\r\n                        <option value=\"week\">{{locale?.week}}</option>\r\n                        <option value=\"month\">{{locale?.month}}</option>    \r\n                        <option value=\"year\">{{locale?.year}}</option>      \r\n                    </select>\r\n                </label>\r\n            </div> </li>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'future'\">\r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_future\" value=\"future\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_future\">\r\n                    {{locale?.future}} <input type=\"number\" [ngModel]=\"future_days\" name=\"future_days\" \r\n                    (mousedown)=\"onListItemFormControlClick($event)\" (keydown)=\"onNumberKeydown($event)\"\r\n                    min=\"1\" max=\"{{futureMaxDays}}\" (input)=\"checkMaxDays($event, 'future')\">\r\n                    <select (mousedown)=\"onListItemFormControlClick($event)\" [(ngModel)]=\"future_dateType\" name=\"future_dateType\">\r\n                        <option value=\"day\">{{locale?.day}}</option>\r\n                        <option value=\"week\">{{locale?.week}}</option>\r\n                        <option value=\"month\">{{locale?.month}}</option>    \r\n                        <option value=\"year\">{{locale?.year}}</option>    \r\n                    </select>\r\n                </label>\r\n            </div>    \r\n        </li>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_first'\">\r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_present_first\" value=\"present_first\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_present_first\">\r\n                    {{locale?.current}}<select (mousedown)=\"onListItemFormControlClick($event)\" [(ngModel)]=\"present_first_dateType\" name=\"present_first_dateType\">\r\n                        <option value=\"week\">{{locale?.week}}</option>\r\n                        <option value=\"month\">{{locale?.month}}</option>    \r\n                        <option value=\"year\">{{locale?.year}}</option>    \r\n                    </select>{{locale?.first}}\r\n                </label>\r\n            </div>    \r\n            \r\n        </li>\r\n        <li class=\"dynamic-view-item\" [class.active]=\"value === 'present_last'\">\r\n            <div class=\"custom-control custom-radio\">\r\n                <input class=\"custom-control-input\" type=\"radio\" name=\"dynamic_date\" id=\"radio_dynamic_present_last\" value=\"present_last\" tabindex=\"0\" [(ngModel)]=\"value\">\r\n                <label class=\"custom-control-label\" for=\"radio_dynamic_present_last\" >\r\n                    {{locale?.current}}<select (mousedown)=\"onListItemFormControlClick($event)\" [(ngModel)]=\"present_last_dateType\" name=\"present_last_dateType\">\r\n                        <option value=\"week\">{{locale?.week}}</option>\r\n                        <option value=\"month\">{{locale?.month}}</option>    \r\n                        <option value=\"year\">{{locale?.year}}</option>    \r\n                    </select>{{locale?.last}}\r\n                </label>\r\n            </div>  \r\n        </li>\r\n    </ul>\r\n</div>\r\n\r\n\r\n\r\n",
                styles: [".datepicker_dynamic-view ul{margin:10px 8px;list-style:none}.dynamic-view-item{line-height:30px;padding-left:8px;list-style:none}.dynamic-view-item.active{background:#f7f8fb;border-radius:6px}.dynamic-view-item input[type=number]{width:46px;text-align:center;-moz-appearance:textfield}.dynamic-view-item select{width:60px;padding-left:5px;margin:0 6px}.dynamic-view-item input,.dynamic-view-item select{height:26px;border-radius:6px;border:1px solid #d9dee7}.dynamic-view-item input:focus,.dynamic-view-item select:focus{outline:0}.dynamic-view-item .custom-radio .custom-control-label::before{top:7px}.dynamic-view-item label{padding-left:20px;display:inline-block;width:100%}.dynamic-view-item input::-webkit-inner-spin-button,.dynamic-view-item input::-webkit-outer-spin-button{-webkit-appearance:none!important}"]
            }] }
];
/** @nocollapse */
DynamicViewComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef }
];
DynamicViewComponent.propDecorators = {
    data: [{ type: Input }],
    previousMaxDays: [{ type: Input }],
    futureMaxDays: [{ type: Input }],
    locale: [{ type: Input }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DynamicDateInputComponent {
    /**
     * @param {?} inject
     */
    constructor(inject) {
        this.inject = inject;
        this.inputClick = new EventEmitter();
        this.tabKeydown = new EventEmitter();
        this.clear = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() { }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.value && !this.disabled && !this.readonly) {
            if (this.value && this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = '';
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.disabled && this.clearIcon && !this.readonly) {
            this.clearIcon.nativeElement.style.visibility = 'hidden';
        }
    }
}
DynamicDateInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'dynamic-date-input',
                template: "<div class=\"input-group\" [ngClass]=\"{\r\n    'f-state-disabled': disabled,\r\n    'f-state-readonly': readonly && !disabled,\r\n    'f-state-focus':isFocus\r\n}\">\r\n    <input type=\"text\" class=\"form-control f-utils-fill\"  (click)=\"inputClick.emit($event)\"\r\n    [attr.placeholder]=\"readonly||disabled?'':placeholder\" \r\n    name=\"farris-dynamic-date\" [ngModel]=\"text\"\r\n    #dynamicDateInput autocomplete=\"off\" [readonly]=\"true\"\r\n    [disabled]=\"disabled\" \r\n    style=\"padding-right: 4px;\" (keydown.tab)=\"tabKeydown.emit($event)\"  />\r\n\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!disabled\" style=\"position: relative;\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear\" (click)=\"clear.emit($event)\"\r\n            #clearIcon *ngIf=\"showClear\" style=\"position: absolute;height: 100%;right: 0px;top: 0px;z-index: 100;visibility: hidden\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <button type=\"button\" class=\"btn f-cmp-iconbtn\" (click)=\"inputClick.emit($event)\">\r\n            <span class=\"f-icon f-icon-date\"></span>\r\n        </button>\r\n    </div>\r\n</div>"
            }] }
];
/** @nocollapse */
DynamicDateInputComponent.ctorParameters = () => [
    { type: Injector }
];
DynamicDateInputComponent.propDecorators = {
    readonly: [{ type: Input }],
    disabled: [{ type: Input }],
    value: [{ type: Input }],
    text: [{ type: Input }],
    isFocus: [{ type: Input }],
    placeholder: [{ type: Input }],
    showClear: [{ type: Input }],
    inputClick: [{ type: Output }],
    tabKeydown: [{ type: Output }],
    clear: [{ type: Output }],
    clearIcon: [{ type: ViewChild, args: ['clearIcon',] }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiSelectDateInputComponent {
    /**
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} overLayService
     * @param {?} cd
     * @param {?} utilService
     */
    constructor(injector, render, el, overLayService, cd, utilService) {
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.overLayService = overLayService;
        this.cd = cd;
        this.utilService = utilService;
        this.dates = '';
        this.separator = ',';
        this.placeholder = '';
        this.editable = true;
        this.orderBy = 'none';
        this.clickHandle = new EventEmitter();
        this.remove = new EventEmitter();
        this._dateItems = [];
        this.hiddenItemsCount$ = new BehaviorSubject(0);
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService.destory(this.shadowBox.nativeElement);
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.dates && !changes.dates.isFirstChange()) {
            this.initDateItems();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDateItems() {
        /** @type {?} */
        const _dateItems = this.dates.split(this.separator).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        this._dateItems = this.utilService.orderSelectedDates(_dateItems, this.orderBy);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setHiddenCount();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDateItems();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        this.toggleShadowBox($event, false);
        this.clickHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @param {?} txt
     * @param {?} index
     * @return {?}
     */
    onRemove($event, txt, index) {
        if ($event) {
            $event.stopPropagation();
        }
        this.remove.emit({ index, value: txt });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        this.updateShadowBoxPosition($event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setHiddenCount();
            this.cd.detectChanges();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setHiddenCount() {
        /** @type {?} */
        let len = 0;
        if (!this._dateItems || !this._dateItems.length) {
            this.hiddenItemsCount$.next(len);
            return;
        }
        /** @type {?} */
        const items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
        if (items && items.length) {
            len = items.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return n.offsetTop;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n > 20)).length;
        }
        this.hiddenItemsCount$.next(len);
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
        this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                return;
            }
            if (!this.shadowBox || this.shadowBox.nativeElement.contains(e.target)) {
                return;
            }
            this.toggleShadowBox(null, false);
        }));
    }
    /**
     * @param {?} $event
     * @param {?=} show
     * @return {?}
     */
    toggleShadowBox($event, show = true) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.hiddenItemsCount$.value) {
            show = false;
        }
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
        }
    }
}
MultiSelectDateInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'multi-select-input',
                template: "\r\n<div #searchbox class=\"input-group f-search-box f-multi-select-date\" [class.f-state-disabled]=\"!editable\" resizeObserver (resize)=\"onResized($event)\"\r\n[attr.title]=\"dates\" (mousedown)=\"$event.preventDefault()\">\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"'26px'\" (click)=\"toggleShadowBox($event)\">\r\n        <div class=\"multi--content d-flex flex-row multi-date-display\" #tagContainer \r\n        [attr.placeholder]=\"placeholder\">\r\n            <span class=\"multi--item search-tag-item\" [class.multi-date-display-readonly]=\"!editable\" *ngFor=\"let txt of _dateItems; index as i\" >\r\n                <span class=\"search-tag\" >{{txt}}</span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" *ngIf=\"editable\" style=\"top:5px\" (click)=\"onRemove($event, txt, i)\"></i>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"editable\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear \" \r\n            style=\"position: absolute; height: 100%; right: 0px; top: 0px; z-index: 100; visibility: hidden;\">\r\n            <i class=\"f-icon modal_close\"></i></span>\r\n        <button class=\"btn f-cmp-iconbtn\" type=\"button\" (click)=\"onClick($event)\"><span class=\"f-icon f-icon-date\"></span></button>\r\n    </div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-multi-select-date\" [class.f-state-disabled]=\"!editable\" style=\"position:absolute;display: none; z-index: 2999;\"\r\n (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" [class.multi-date-display-readonly]=\"!editable\" *ngFor=\"let txt of _dateItems; index as i\">\r\n                <span class=\"search-tag\">{{txt}}</span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" *ngIf=\"editable\" style=\"top:5px\" (click)=\"onRemove($event, txt, i)\"></i>\r\n            </span>\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"editable\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear \" \r\n            style=\"position: absolute; height: 100%; right: 0px; top: 0px; z-index: 100; visibility: hidden;\">\r\n            <i class=\"f-icon modal_close\"></i></span>\r\n        <button class=\"btn f-cmp-iconbtn\" type=\"button\" (click)=\"onClick($event)\"><span class=\"f-icon f-icon-date\"></span></button>\r\n    </div>\r\n</div>\r\n",
                styles: [`
        .multi-date-display {
            width: 100%;flex-wrap: wrap;align-items: center;cursor: text;
        }

        .multi-date-display:empty:before {
            content: attr(placeholder);
            color: #c4c4c4;
        }

        .multi-date-display-readonly {
            padding-right: 5px;
        }

        .f-multi-select-date.f-state-disabled .search-tag-item {
            background: #F1F3F7;
            border: 1px solid #F1F3F7;
            color:  #2D2F33;
        }

        .f-multi-select-date.f-state-disabled .multi--more-text {
            color: #c7c7c7;
        }

        `]
            }] }
];
/** @nocollapse */
MultiSelectDateInputComponent.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: OverLayHiddenService },
    { type: ChangeDetectorRef },
    { type: UtilService }
];
MultiSelectDateInputComponent.propDecorators = {
    dates: [{ type: Input }],
    separator: [{ type: Input }],
    placeholder: [{ type: Input }],
    editable: [{ type: Input }],
    orderBy: [{ type: Input }],
    clickHandle: [{ type: Output }],
    remove: [{ type: Output }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    container: [{ type: ViewChild, args: ['searchbox',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import { IMyWeek } from '../../interfaces/my-month-row.interface'
class MultiDayViewComponent {
    /**
     * @param {?} utilService
     */
    constructor(utilService) {
        this.utilService = utilService;
        this.selectedDates = [];
        this.dayCellClicked = new EventEmitter();
        this.dayCellKeyDown = new EventEmitter();
        this.weekClicked = new EventEmitter();
        this.onMouseEnter = new EventEmitter();
        this.onMouseLeave = new EventEmitter();
        this.prevMonthId = MonthId.prev;
        this.currMonthId = MonthId.curr;
        this.nextMonthId = MonthId.next;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(OPTS)) {
            this.opts = changes[OPTS].currentValue;
        }
        if (changes.hasOwnProperty(DATES)) {
            this.dates = changes[DATES].currentValue;
        }
        if (changes.hasOwnProperty(WEEK_DAYS)) {
            this.weekDays = changes[WEEK_DAYS].currentValue;
        }
        if (changes.hasOwnProperty(SELECTED_DATE)) {
            this.selectedDate = changes[SELECTED_DATE].currentValue;
        }
        if (changes.hasOwnProperty(SELECTED_DATE_RANGE)) {
            this.selectedDateRange = changes[SELECTED_DATE_RANGE].currentValue;
        }
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onDayCellClicked(event, cell) {
        if (cell.disabled || this.opts.showType === 4) {
            return;
        }
        event.stopPropagation();
        this.dayCellClicked.emit(cell);
    }
    /**
     * @param {?} event
     * @param {?} cell
     * @return {?}
     */
    onDayCellKeyDown(event, cell) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode !== KeyCode.tab) {
            event.preventDefault();
            if (keyCode === KeyCode.enter || keyCode === KeyCode.space) {
                this.onDayCellClicked(event, cell);
            }
            else if (this.opts.moveFocusByArrowKeys) {
                this.dayCellKeyDown.emit(cell);
            }
        }
    }
    /**
     * @param {?} event
     * @param {?} week
     * @return {?}
     */
    onWeekClicked(event, week) {
        if (this.opts.showType !== 4) {
            return;
        }
        event.stopPropagation();
        this.weekClicked.emit(week);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onDayCellMouseEnter(cell) {
        if (this.utilService.isInitializedDate(this.selectedDateRange.begin) &&
            (!this.utilService.isInitializedDate(this.selectedDateRange.end) ||
                JSON.stringify(this.selectedDateRange.begin) === JSON.stringify(this.selectedDateRange.end))) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) && this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) && this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
            this.onMouseEnter.emit(cell);
        }
    }
    /**
     * @return {?}
     */
    onDayCellMouseLeave() {
        for (const w of this.dates) {
            for (const day of w.week) {
                day.range = false;
            }
        }
        this.onMouseLeave.emit();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateInRange(date) {
        return this.utilService.isDateInRange(date, this.selectedDateRange);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateSame(date) {
        return this.utilService.isDateSame({
            year: this.selectedDate.year,
            month: this.selectedDate.month,
            day: this.selectedDate.day
        }, date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateRangeBeginOrEndSame(date) {
        /** @type {?} */
        const selectedDateRange = {
            begin: {
                year: this.selectedDateRange.begin.year,
                month: this.selectedDateRange.begin.month,
                day: this.selectedDateRange.begin.day
            },
            end: {
                year: this.selectedDateRange.end.year,
                month: this.selectedDateRange.end.month,
                day: this.selectedDateRange.end.day
            }
        };
        return this.utilService.isDateRangeBeginOrEndSame(selectedDateRange, date);
    }
    /**
     * @param {?} date
     * @return {?}
     */
    isDateSelected(date) {
        return !!this.selectedDates.find((/**
         * @param {?} n
         * @return {?}
         */
        n => this.utilService.isDateSame(n, date)));
    }
}
MultiDayViewComponent.decorators = [
    { type: Component, args: [{
                selector: 'lib-multi-day-view',
                template: "<div class=\"f-datepicker-table-wrapper\">\r\n    <table class=\"f-datepicker-table\" cellpadding=\"0\">\r\n        <thead>\r\n            <tr>\r\n                <th\r\n                    class=\"f-datepicker-weeknbr-title\" style=\"padding-bottom: 8px;padding-top: 4px\"\r\n                    *ngIf=\"opts.showWeekNumbers\"\r\n                >\r\n                    {{ opts.weekText ? opts.weekText : 'Week'}}\r\n                </th>\r\n                <th\r\n                    scope=\"col\"\r\n                    *ngFor=\"let d of weekDays\"\r\n                    style=\"padding-bottom: 8px;padding-top: 4px\"\r\n                >\r\n                    {{ d }}\r\n                </th>\r\n            </tr>\r\n        </thead>\r\n        <tbody>\r\n            <tr\r\n                *ngFor=\"let w of dates; let di = index\"\r\n                [ngClass]=\"{\r\n                    'f-datepicker-selectWeek': opts.showType === 4,\r\n                    'f-datepicker-selectedWeek':\r\n                        opts.showType === 4 &&\r\n                        w.weekNbr === selectedWeek.weekNbr &&\r\n                        w.year === selectedWeek.year\r\n                }\"\r\n                (click)=\"onWeekClicked($event, w)\"\r\n            >\r\n                <td\r\n                    class=\"f-datepicker-weeknbr\"\r\n                    *ngIf=\"opts.showWeekNumbers\"\r\n                >\r\n                    <div class=\"f-datepicker-date\">{{ w.weekNbr }}</div>\r\n                </td>\r\n                <td\r\n                    id=\"d_{{ di }}_{{ i }}\"\r\n                    class=\"d_{{ di }}_{{ i }} \"\r\n                    *ngFor=\"let d of w.week; let i = index\"\r\n                    [ngClass]=\"{\r\n                        'f-datepicker-range':\r\n                            opts.showType !== 4 && d.cmo === currMonthId &&\r\n                            ((this.opts.dateRange &&\r\n                                isDateInRange(d.dateObj) &&\r\n                                !isDateRangeBeginOrEndSame(d.dateObj)) ||\r\n                                d.range),\r\n                        'f-datepicker-no-currmonth':\r\n                            d.cmo === prevMonthId || d.cmo === nextMonthId,\r\n                        'f-datepicker-disabled': d.disabled,\r\n                        'f-datepicker-singledate': !d.disabled\r\n                    }\"\r\n                    (click)=\"onDayCellClicked($event, d)\"\r\n                    (keydown)=\"onDayCellKeyDown($event, d)\"\r\n                    (mouseenter)=\"onDayCellMouseEnter(d)\"\r\n                    (mouseleave)=\"onDayCellMouseLeave()\"\r\n                    tabindex=\"0\"\r\n                >\r\n                    <span\r\n                        *ngIf=\"d.markedDate.marked\"\r\n                        class=\"f-datepicker-markdate\"\r\n                        [ngStyle]=\"{ 'background-color': d.markedDate.color }\"\r\n                    ></span>\r\n                    <div\r\n                        class=\"f-datepicker-date\"\r\n                        [ngClass]=\"{\r\n                            'f-datepicker-selected':\r\n                                opts.showType !== 4 &&\r\n                                d.cmo === currMonthId &&\r\n                                ((!this.opts.dateRange && isDateSame(d.dateObj)) ||\r\n                                (this.opts.dateRange && isDateRangeBeginOrEndSame(d.dateObj)) || \r\n                                (this.opts.multiSelect && isDateSelected(d.dateObj))),\r\n                            'f-datepicker-current':\r\n                                d.currDay && opts.markCurrentDay,\r\n                            'f-datepicker-opacity':\r\n                                d.highlight &&\r\n                                (d.cmo === prevMonthId ||\r\n                                    d.cmo === nextMonthId ||\r\n                                    d.disabled),\r\n                            'f-datepicker-highlight': d.highlight,\r\n                            'f-datepicker-disabled': d.disabled\r\n                        }\"\r\n                    >\r\n                        {{ d.dateObj.day }}\r\n                    </div>\r\n                </td>\r\n            </tr>\r\n        </tbody>\r\n    </table>\r\n</div>\r\n",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
MultiDayViewComponent.ctorParameters = () => [
    { type: UtilService }
];
MultiDayViewComponent.propDecorators = {
    opts: [{ type: Input }],
    dates: [{ type: Input }],
    weekDays: [{ type: Input }],
    selectedDate: [{ type: Input }],
    selectedDateRange: [{ type: Input }],
    selectedWeek: [{ type: Input }],
    selectedDates: [{ type: Input }],
    dayCellClicked: [{ type: Output }],
    dayCellKeyDown: [{ type: Output }],
    weekClicked: [{ type: Output }],
    onMouseEnter: [{ type: Output }],
    onMouseLeave: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MultiSelectedDaysComponent {
    constructor() {
        this.locales = {};
        this.selectedDates = [];
        this.removed = new EventEmitter();
        this.clear = new EventEmitter();
        this.clicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemove($event, item) {
        $event.stopPropagation();
        this.removed.emit(item);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        $event.stopPropagation();
        this.clear.emit();
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSelectDateClick($event, item) {
        $event.stopPropagation();
        this.clicked.emit(item);
    }
}
MultiSelectedDaysComponent.decorators = [
    { type: Component, args: [{
                selector: 'multi-days',
                template: `
        <div class="d-flex mb-2 f-datepicker-multi-selectdays-header">
            <span style="font-size: 14px;" class="ml-3">{{ locales?.selected.split(',')[0] || '已选'}} <span style="font-weight: bold;font-size: 17px;">{{selectedDates.length}}</span> {{locales?.selected.split(',')[1] ||'天'}}</span>
            <span class="f-datepicker-multi-selectdays-clear" (click)="onClear($event)">{{ locales?.clearSelections || '清空'}}</span>
        </div>
        <div #selecteditems style="height: 230px;overflow-y: auto;" class="ml-3 multi-date-select win11Scroll nobtn" (wheel)="$event.stopPropagation()">
            <ul [style.width.px]="167">
                <li class="d-flex align-items-center f-datepicker-multi-selectdays" *ngFor="let d of selectedDates" (click)="onSelectDateClick($event, d)">
                    {{d.value}} <span class="f-icon f-icon-close remove" title="{{ locales?.delete || '删除'}}" (click)="onRemove($event, d)"></span>
                </li>
            </ul>
        </div>
    `,
                styles: [`
        .f-datepicker-multi-selectdays-header{
            height: 41px;border-bottom: 1px solid #E4E7EF;line-height: 40px;justify-content: space-between;
        }

        .f-datepicker-multi-selectdays {
            justify-content: space-between;color: #2D2F33;height: 30px;padding: 0 5px;border-radius: 6px;
            cursor: pointer;
        }

        .f-datepicker-multi-selectdays:hover {
            background: #F7F8FB;
        }

        .f-datepicker-multi-selectdays .remove {
            font-size: 12px;color: #C7CFDD;cursor: pointer;
        }

        .f-datepicker-multi-selectdays .remove:hover {
            color: #5f96f5;
        }

        .f-datepicker-multi-selectdays-clear {
            font-size: 13px;margin-right: 10px; color: #CCD1DD; cursor: pointer;
        }
        .f-datepicker-multi-selectdays-clear:hover {
            color: #5f96f5;
        }

        .mr14 {
            margin-right: 14px;
        }
        `]
            }] }
];
/** @nocollapse */
MultiSelectedDaysComponent.ctorParameters = () => [];
MultiSelectedDaysComponent.propDecorators = {
    locales: [{ type: Input }],
    selectedDates: [{ type: Input }],
    removed: [{ type: Output }],
    clear: [{ type: Output }],
    clicked: [{ type: Output }],
    selecteditemsEl: [{ type: ViewChild, args: ['selecteditems',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisDatePickerModule {
}
FarrisDatePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    TimePickerModule,
                    LocaleModule,
                    FarrisCommonModule,
                    PopoverModule.forRoot(),
                    DateHelperModule.forRoot(),
                    NotifyModule.forRoot(),
                    FarrisFormsModule
                ],
                declarations: [
                    CalendarComponent,
                    SelectionSidebarComponent,
                    SelectionBarComponent,
                    DayViewComponent,
                    MonthViewComponent,
                    YearViewComponent,
                    FarrisDatepickerComponent,
                    FarrisDatePickerDirective,
                    AngularMyDatePickerComponent,
                    DynamicViewComponent,
                    DynamicDateInputComponent,
                    MultiSelectDateInputComponent,
                    MultiDayViewComponent,
                    MultiSelectedDaysComponent
                ],
                entryComponents: [CalendarComponent],
                exports: [
                    CalendarComponent,
                    SelectionBarComponent,
                    SelectionSidebarComponent,
                    DayViewComponent,
                    MonthViewComponent,
                    YearViewComponent,
                    FarrisDatepickerComponent,
                    FarrisDatePickerDirective,
                    DynamicViewComponent,
                    DynamicDateInputComponent,
                    MultiSelectDateInputComponent,
                    MultiDayViewComponent,
                    MultiSelectedDaysComponent
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FarrisDatePickerModule, FarrisDatepickerComponent, FarrisDatePickerDirective, CalendarComponent, DayViewComponent, MonthViewComponent, YearViewComponent, SelectionBarComponent, SelectionSidebarComponent, AngularMyDatePickerComponent, DefaultConfigService, DatepickerLocaleService, UtilService, DatePickerService, CalToggle, DefaultView, KeyCode, KeyName, MonthId, ResetDateType, ShowType, Year, D, DD, M, MM, MMM, Y, YYYY, DATE_ROW_COUNT, DATE_COL_COUNT, MONTH_ROW_COUNT, MONTH_COL_COUNT, YEAR_ROW_COUNT, YEAR_COL_COUNT, DOT, UNDER_LINE, SU, MO, TU, WE, TH, FR, SA, DEFAULT_LOCALE, ZERO_STR, EMPTY_STR, CLICK, KEYUP, BLUR, DISABLED, BODY, VALUE, OPTIONS, DEFAULT_MONTH, LOCALE, OBJECT, PX, STYLE, OPTS, YEARS, VISIBLE_MONTH, SELECT_MONTH, SELECT_YEAR, PREV_VIEW_DISABLED, NEXT_VIEW_DISABLED, DATES, WEEK_DAYS, SELECTED_DATE, SELECTED_DATE_RANGE, MONTHS, PREVENT_CLOSE_TIMEOUT, DynamicViewComponent, DynamicDateInputComponent, MultiSelectDateInputComponent, MultiDayViewComponent, MultiSelectedDaysComponent };

//# sourceMappingURL=farris-ui-datepicker.js.map