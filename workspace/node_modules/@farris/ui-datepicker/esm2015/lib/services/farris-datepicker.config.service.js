/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Year, DefaultView, ShowType } from '../enums/public-api';
export class DefaultConfigService {
    constructor() {
        this.defaultConfig = {
            dateRange: false,
            dayLabels: {
                su: 'Sun',
                mo: 'Mon',
                tu: 'Tue',
                we: 'Wed',
                th: 'Thu',
                fr: 'Fri',
                sa: 'Sat'
            },
            monthLabels: {
                1: 'Jan',
                2: 'Feb',
                3: 'Mar',
                4: 'Apr',
                5: 'May',
                6: 'Jun',
                7: 'Jul',
                8: 'Aug',
                9: 'Sep',
                10: 'Oct',
                11: 'Nov',
                12: 'Dec'
            },
            dateFormat: 'yyyy-MM-dd',
            returnFormat: 'yyyy-MM-dd',
            defaultView: DefaultView.Date,
            showType: ShowType.all,
            firstDayOfWeek: 'mo',
            satHighlight: false,
            sunHighlight: false,
            highlightDates: [],
            markCurrentDay: true,
            markCurrentMonth: true,
            markCurrentYear: true,
            monthSelector: true,
            yearSelector: true,
            disableHeaderButtons: true,
            showWeekNumbers: false,
            selectorHeight: '295px',
            selectorWidth: '287px',
            disableUntil: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableSince: { year: 0, month: 0, day: 0, hour: 0, minute: 0, second: 0 },
            disableDates: [],
            disableDateRanges: [],
            disableWeekends: false,
            disableWeekdays: [],
            enableDates: [],
            markDates: [],
            markWeekends: { marked: false, color: '' },
            closeSelectorOnDateSelect: true,
            closeSelectorOnDocumentClick: true,
            minYear: Year.min,
            maxYear: Year.max,
            focusInputOnDateSelect: true,
            moveFocusByArrowKeys: true,
            dateRangeDatesDelimiter: ' - ',
            inputFieldValidation: true,
            stylesData: { selector: '', styles: '' },
            ariaLabelPrevMonth: 'Previous Month',
            ariaLabelNextMonth: 'Next Month',
            shortcuts: [],
            weekText: 'Week'
        };
    }
    /**
     * @return {?}
     */
    getDefaultConfig() {
        return this.defaultConfig;
    }
}
DefaultConfigService.decorators = [
    { type: Injectable }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultConfigService.prototype.defaultConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWRhdGVwaWNrZXIuY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvZmFycmlzLWRhdGVwaWNrZXIuY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLElBQUksRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFHbEUsTUFBTSxPQUFPLG9CQUFvQjtJQURqQztRQUVZLGtCQUFhLEdBQWU7WUFDaEMsU0FBUyxFQUFFLEtBQUs7WUFDaEIsU0FBUyxFQUFFO2dCQUNQLEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2dCQUNULEVBQUUsRUFBRSxLQUFLO2FBQ1o7WUFDRCxXQUFXLEVBQUU7Z0JBQ1QsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsQ0FBQyxFQUFFLEtBQUs7Z0JBQ1IsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLEtBQUs7Z0JBQ1QsRUFBRSxFQUFFLEtBQUs7YUFDWjtZQUNELFVBQVUsRUFBRSxZQUFZO1lBQ3hCLFlBQVksRUFBRSxZQUFZO1lBQzFCLFdBQVcsRUFBRSxXQUFXLENBQUMsSUFBSTtZQUM3QixRQUFRLEVBQUUsUUFBUSxDQUFDLEdBQUc7WUFDdEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsWUFBWSxFQUFFLEtBQUs7WUFDbkIsY0FBYyxFQUFFLEVBQUU7WUFDbEIsY0FBYyxFQUFFLElBQUk7WUFDcEIsZ0JBQWdCLEVBQUUsSUFBSTtZQUN0QixlQUFlLEVBQUUsSUFBSTtZQUNyQixhQUFhLEVBQUUsSUFBSTtZQUNuQixZQUFZLEVBQUUsSUFBSTtZQUNsQixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLGVBQWUsRUFBRSxLQUFLO1lBQ3RCLGNBQWMsRUFBRSxPQUFPO1lBQ3ZCLGFBQWEsRUFBRSxPQUFPO1lBQ3RCLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDO1lBQ3BFLFlBQVksRUFBRSxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBQyxDQUFDLEVBQUMsTUFBTSxFQUFDLENBQUMsRUFBQyxNQUFNLEVBQUMsQ0FBQyxFQUFDO1lBQ3BFLFlBQVksRUFBRSxFQUFFO1lBQ2hCLGlCQUFpQixFQUFFLEVBQUU7WUFDckIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsZUFBZSxFQUFFLEVBQUU7WUFDbkIsV0FBVyxFQUFFLEVBQUU7WUFDZixTQUFTLEVBQUUsRUFBRTtZQUNiLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUMxQyx5QkFBeUIsRUFBRSxJQUFJO1lBQy9CLDRCQUE0QixFQUFFLElBQUk7WUFDbEMsT0FBTyxFQUFFLElBQUksQ0FBQyxHQUFHO1lBQ2pCLE9BQU8sRUFBRSxJQUFJLENBQUMsR0FBRztZQUNqQixzQkFBc0IsRUFBRSxJQUFJO1lBQzVCLG9CQUFvQixFQUFFLElBQUk7WUFDMUIsdUJBQXVCLEVBQUUsS0FBSztZQUM5QixvQkFBb0IsRUFBRSxJQUFJO1lBQzFCLFVBQVUsRUFBRSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsRUFBRTtZQUN4QyxrQkFBa0IsRUFBRSxnQkFBZ0I7WUFDcEMsa0JBQWtCLEVBQUUsWUFBWTtZQUNoQyxTQUFTLEVBQUUsRUFBRTtZQUNiLFFBQVEsRUFBRSxNQUFNO1NBQ25CLENBQUM7SUFLTixDQUFDOzs7O0lBSFUsZ0JBQWdCO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztJQUM5QixDQUFDOzs7WUF0RUosVUFBVTs7Ozs7OztJQUVQLDZDQWdFRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSU15T3B0aW9ucyB9IGZyb20gJy4uL2ludGVyZmFjZXMvcHVibGljLWFwaSc7XHJcbmltcG9ydCB7IFllYXIsIERlZmF1bHRWaWV3LCBTaG93VHlwZSB9IGZyb20gJy4uL2VudW1zL3B1YmxpYy1hcGknO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgRGVmYXVsdENvbmZpZ1NlcnZpY2Uge1xyXG4gICAgcHJpdmF0ZSBkZWZhdWx0Q29uZmlnOiBJTXlPcHRpb25zID0ge1xyXG4gICAgICAgIGRhdGVSYW5nZTogZmFsc2UsXHJcbiAgICAgICAgZGF5TGFiZWxzOiB7XHJcbiAgICAgICAgICAgIHN1OiAnU3VuJyxcclxuICAgICAgICAgICAgbW86ICdNb24nLFxyXG4gICAgICAgICAgICB0dTogJ1R1ZScsXHJcbiAgICAgICAgICAgIHdlOiAnV2VkJyxcclxuICAgICAgICAgICAgdGg6ICdUaHUnLFxyXG4gICAgICAgICAgICBmcjogJ0ZyaScsXHJcbiAgICAgICAgICAgIHNhOiAnU2F0J1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbW9udGhMYWJlbHM6IHtcclxuICAgICAgICAgICAgMTogJ0phbicsXHJcbiAgICAgICAgICAgIDI6ICdGZWInLFxyXG4gICAgICAgICAgICAzOiAnTWFyJyxcclxuICAgICAgICAgICAgNDogJ0FwcicsXHJcbiAgICAgICAgICAgIDU6ICdNYXknLFxyXG4gICAgICAgICAgICA2OiAnSnVuJyxcclxuICAgICAgICAgICAgNzogJ0p1bCcsXHJcbiAgICAgICAgICAgIDg6ICdBdWcnLFxyXG4gICAgICAgICAgICA5OiAnU2VwJyxcclxuICAgICAgICAgICAgMTA6ICdPY3QnLFxyXG4gICAgICAgICAgICAxMTogJ05vdicsXHJcbiAgICAgICAgICAgIDEyOiAnRGVjJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0ZUZvcm1hdDogJ3l5eXktTU0tZGQnLFxyXG4gICAgICAgIHJldHVybkZvcm1hdDogJ3l5eXktTU0tZGQnLFxyXG4gICAgICAgIGRlZmF1bHRWaWV3OiBEZWZhdWx0Vmlldy5EYXRlLFxyXG4gICAgICAgIHNob3dUeXBlOiBTaG93VHlwZS5hbGwsXHJcbiAgICAgICAgZmlyc3REYXlPZldlZWs6ICdtbycsXHJcbiAgICAgICAgc2F0SGlnaGxpZ2h0OiBmYWxzZSxcclxuICAgICAgICBzdW5IaWdobGlnaHQ6IGZhbHNlLFxyXG4gICAgICAgIGhpZ2hsaWdodERhdGVzOiBbXSxcclxuICAgICAgICBtYXJrQ3VycmVudERheTogdHJ1ZSxcclxuICAgICAgICBtYXJrQ3VycmVudE1vbnRoOiB0cnVlLFxyXG4gICAgICAgIG1hcmtDdXJyZW50WWVhcjogdHJ1ZSxcclxuICAgICAgICBtb250aFNlbGVjdG9yOiB0cnVlLFxyXG4gICAgICAgIHllYXJTZWxlY3RvcjogdHJ1ZSxcclxuICAgICAgICBkaXNhYmxlSGVhZGVyQnV0dG9uczogdHJ1ZSxcclxuICAgICAgICBzaG93V2Vla051bWJlcnM6IGZhbHNlLFxyXG4gICAgICAgIHNlbGVjdG9ySGVpZ2h0OiAnMjk1cHgnLFxyXG4gICAgICAgIHNlbGVjdG9yV2lkdGg6ICcyODdweCcsXHJcbiAgICAgICAgZGlzYWJsZVVudGlsOiB7IHllYXI6IDAsIG1vbnRoOiAwLCBkYXk6IDAgLGhvdXI6MCxtaW51dGU6MCxzZWNvbmQ6MH0sXHJcbiAgICAgICAgZGlzYWJsZVNpbmNlOiB7IHllYXI6IDAsIG1vbnRoOiAwLCBkYXk6IDAgLGhvdXI6MCxtaW51dGU6MCxzZWNvbmQ6MH0sXHJcbiAgICAgICAgZGlzYWJsZURhdGVzOiBbXSxcclxuICAgICAgICBkaXNhYmxlRGF0ZVJhbmdlczogW10sXHJcbiAgICAgICAgZGlzYWJsZVdlZWtlbmRzOiBmYWxzZSxcclxuICAgICAgICBkaXNhYmxlV2Vla2RheXM6IFtdLFxyXG4gICAgICAgIGVuYWJsZURhdGVzOiBbXSxcclxuICAgICAgICBtYXJrRGF0ZXM6IFtdLFxyXG4gICAgICAgIG1hcmtXZWVrZW5kczogeyBtYXJrZWQ6IGZhbHNlLCBjb2xvcjogJycgfSxcclxuICAgICAgICBjbG9zZVNlbGVjdG9yT25EYXRlU2VsZWN0OiB0cnVlLFxyXG4gICAgICAgIGNsb3NlU2VsZWN0b3JPbkRvY3VtZW50Q2xpY2s6IHRydWUsXHJcbiAgICAgICAgbWluWWVhcjogWWVhci5taW4sXHJcbiAgICAgICAgbWF4WWVhcjogWWVhci5tYXgsXHJcbiAgICAgICAgZm9jdXNJbnB1dE9uRGF0ZVNlbGVjdDogdHJ1ZSxcclxuICAgICAgICBtb3ZlRm9jdXNCeUFycm93S2V5czogdHJ1ZSxcclxuICAgICAgICBkYXRlUmFuZ2VEYXRlc0RlbGltaXRlcjogJyAtICcsXHJcbiAgICAgICAgaW5wdXRGaWVsZFZhbGlkYXRpb246IHRydWUsXHJcbiAgICAgICAgc3R5bGVzRGF0YTogeyBzZWxlY3RvcjogJycsIHN0eWxlczogJycgfSxcclxuICAgICAgICBhcmlhTGFiZWxQcmV2TW9udGg6ICdQcmV2aW91cyBNb250aCcsXHJcbiAgICAgICAgYXJpYUxhYmVsTmV4dE1vbnRoOiAnTmV4dCBNb250aCcsXHJcbiAgICAgICAgc2hvcnRjdXRzOiBbXSxcclxuICAgICAgICB3ZWVrVGV4dDogJ1dlZWsnXHJcbiAgICB9O1xyXG5cclxuICAgIHB1YmxpYyBnZXREZWZhdWx0Q29uZmlnKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRlZmF1bHRDb25maWc7XHJcbiAgICB9XHJcbn1cclxuIl19