/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PX, EMPTY_STR } from '../constants/constants';
import { Year } from '../enums/year.enum';
import { UtilService } from './farris-datepicker.util.service';
export class DatePickerService {
    /**
     * @param {?} opts
     */
    constructor(opts) {
        this._mouseWheelHandle = null;
        this._mouseScrollHandle = null;
        this.opts = opts;
        this.utilService = new UtilService();
    }
    /**
     * @param {?} opts
     * @param {?} defaultOpts
     * @return {?}
     */
    static parseOptions(opts, defaultOpts) {
        if (defaultOpts !== undefined) {
            Object.keys(defaultOpts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                if (defaultOpts[k] !== undefined && defaultOpts[k] !== '') {
                    ((/** @type {?} */ (opts)))[k] = defaultOpts[k];
                }
            }));
        }
        if (opts.minYear < Year.min) {
            opts.minYear = Year.min;
        }
        if (opts.maxYear > Year.max) {
            opts.maxYear = Year.max;
        }
        return opts;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    validate(value) {
        const { dateRange } = this.opts;
        /** @type {?} */
        let valid = false;
        if (!dateRange) {
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            valid = this.utilService.isInitializedDate(date);
        }
        else {
            /** @type {?} */
            const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            const { begin, end } = _dateRange;
            valid = this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end);
        }
        return valid;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerScrollEvent(fn) {
        this._mouseScrollHandle = fn;
        document.addEventListener('scroll', this._mouseScrollHandle);
    }
    /**
     * @return {?}
     */
    removeMouseEvent() {
        /** @type {?} */
        const container = document.querySelector('.date-overlay-container');
        if (container) {
            container.removeEventListener('mousewheel', this._mouseWheelHandle);
        }
        document.removeEventListener('scroll', this._mouseScrollHandle);
    }
    /**
     * @param {?} elem
     * @return {?}
     */
    appendSelector(elem) {
        /** @type {?} */
        let container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.addEventListener('mousewheel', this._mouseWheelHandle = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const target = (/** @type {?} */ (e.target));
            if (!target.closest('.calendar-time-picker-select')) {
                e.preventDefault();
            }
            return;
        }));
        container.appendChild(elem);
    }
    /**
     * @param {?} elem
     * @param {?=} calendarRef
     * @return {?}
     */
    getSelectorPosition(elem, calendarRef = null) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let _selectorHeight = 0;
        /** @type {?} */
        let _selectorWidth = 0;
        const { selectorHeight, selectorWidth, showTime, dateRange, showType, enableDynamic, showPresent, multiSelect, viewType } = this.opts;
        /** @type {?} */
        const b = document.body.getBoundingClientRect();
        /** @type {?} */
        const e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        let position = 'bottom';
        if ((dateRange || multiSelect || (viewType === 'together' && showTime)) && showType !== 4) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        _selectorHeight = this.getSelectorDimension(selectorHeight);
        // if (showTime || enableDynamic) {
        //     top = top - 6;
        // }
        top = top - 6;
        if ((showPresent && (!dateRange || showType === 4)) || showTime || enableDynamic) {
            _selectorHeight += 45;
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (window.innerHeight - top < _selectorHeight) {
            top = top - (_selectorHeight - (window.innerHeight - e.top - e.height - 15));
            if (calendarRef) {
                /** @type {?} */
                const calendarElem = calendarRef.location.nativeElement;
                /** @type {?} */
                const arrow = calendarElem.querySelector('.arrow');
                if (arrow) {
                    arrow.style.display = 'none';
                }
            }
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        /** @type {?} */
        const scrollTop = document.body.scrollTop || document.documentElement.scrollTop;
        top -= scrollTop;
        return { top, left, position };
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getSelectorDimension(value) {
        return Number(value.replace(PX, EMPTY_STR));
    }
}
if (false) {
    /** @type {?} */
    DatePickerService.prototype.opts;
    /** @type {?} */
    DatePickerService.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    DatePickerService.prototype._mouseWheelHandle;
    /**
     * @type {?}
     * @private
     */
    DatePickerService.prototype._mouseScrollHandle;
}
//# sourceMappingURL=data:application/json;base64,