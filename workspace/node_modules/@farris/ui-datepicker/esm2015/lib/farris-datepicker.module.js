/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { NgModule } from '@angular/core';
import { CalendarComponent } from './components/calendar/calendar.component';
import { SelectionBarComponent } from './components/selection-bar/selection-bar.component';
import { DayViewComponent } from './components/day-view/day-view.component';
import { MonthViewComponent } from './components/month-view/month-view.component';
import { YearViewComponent } from './components/year-view/year-view.component';
import { FarrisDatePickerDirective } from './farris-datepicker.input';
import { FarrisDatepickerComponent } from './farris-datepicker.component';
import { SelectionSidebarComponent } from './components/selection-sidebar/selection-sidebar.component';
import { AngularMyDatePickerComponent } from './AngularMyDatePicker.component';
import { TimePickerModule } from '@farris/ui-time-picker';
import { LocaleModule } from '@farris/ui-locale';
import { PopoverModule } from '@farris/ui-popover';
import { DateHelperModule } from '@farris/ui-common/date';
import { NotifyModule } from '@farris/ui-notify';
import { FarrisCommonModule } from '@farris/ui-common';
import { FarrisFormsModule } from '@farris/ui-forms';
import { DynamicViewComponent } from './components/dynamic-view/dynamic-view.component';
import { DynamicDateInputComponent } from './dynamic-date-input/dynamic-date-input.component';
import { MultiSelectDateInputComponent } from './multi-date-input/multi-date-input.component';
import { MultiDayViewComponent } from './components/multi-day-view/multi-day-view.component';
import { MultiSelectedDaysComponent } from './components/multi-day-view/multi-days.component';
export class FarrisDatePickerModule {
}
FarrisDatePickerModule.decorators = [
    { type: NgModule, args: [{
                imports: [
                    CommonModule,
                    FormsModule,
                    TimePickerModule,
                    LocaleModule,
                    FarrisCommonModule,
                    PopoverModule.forRoot(),
                    DateHelperModule.forRoot(),
                    NotifyModule.forRoot(),
                    FarrisFormsModule
                ],
                declarations: [
                    CalendarComponent,
                    SelectionSidebarComponent,
                    SelectionBarComponent,
                    DayViewComponent,
                    MonthViewComponent,
                    YearViewComponent,
                    FarrisDatepickerComponent,
                    FarrisDatePickerDirective,
                    AngularMyDatePickerComponent,
                    DynamicViewComponent,
                    DynamicDateInputComponent,
                    MultiSelectDateInputComponent,
                    MultiDayViewComponent,
                    MultiSelectedDaysComponent
                ],
                entryComponents: [CalendarComponent],
                exports: [
                    CalendarComponent,
                    SelectionBarComponent,
                    SelectionSidebarComponent,
                    DayViewComponent,
                    MonthViewComponent,
                    YearViewComponent,
                    FarrisDatepickerComponent,
                    FarrisDatePickerDirective,
                    DynamicViewComponent,
                    DynamicDateInputComponent,
                    MultiSelectDateInputComponent,
                    MultiDayViewComponent,
                    MultiSelectedDaysComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmFycmlzLWRhdGVwaWNrZXIubW9kdWxlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRlcGlja2VyLyIsInNvdXJjZXMiOlsibGliL2ZhcnJpcy1kYXRlcGlja2VyLm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM3QyxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXpDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzdFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG9EQUFvRCxDQUFDO0FBQzNGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzVFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBRS9FLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLDREQUE0RCxDQUFDO0FBQ3ZHLE9BQU8sRUFBRSw0QkFBNEIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBRS9FLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDMUQsT0FBTyxFQUFFLFlBQVksRUFBRyxNQUFNLG1CQUFtQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRXJELE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBQ3hGLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLG1EQUFtRCxDQUFDO0FBQzlGLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzlGLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDO0FBQzdGLE9BQU8sRUFBRSwwQkFBMEIsRUFBRSxNQUFNLGtEQUFrRCxDQUFDO0FBK0M5RixNQUFNLE9BQU8sc0JBQXNCOzs7WUE3Q2xDLFFBQVEsU0FBQztnQkFDTixPQUFPLEVBQUU7b0JBQ0wsWUFBWTtvQkFDWixXQUFXO29CQUNYLGdCQUFnQjtvQkFDaEIsWUFBWTtvQkFDWixrQkFBa0I7b0JBQ2xCLGFBQWEsQ0FBQyxPQUFPLEVBQUU7b0JBQ3ZCLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtvQkFDMUIsWUFBWSxDQUFDLE9BQU8sRUFBRTtvQkFDdEIsaUJBQWlCO2lCQUNwQjtnQkFDRCxZQUFZLEVBQUU7b0JBQ1YsaUJBQWlCO29CQUNqQix5QkFBeUI7b0JBQ3pCLHFCQUFxQjtvQkFDckIsZ0JBQWdCO29CQUNoQixrQkFBa0I7b0JBQ2xCLGlCQUFpQjtvQkFDakIseUJBQXlCO29CQUN6Qix5QkFBeUI7b0JBQ3pCLDRCQUE0QjtvQkFDNUIsb0JBQW9CO29CQUNwQix5QkFBeUI7b0JBQ3pCLDZCQUE2QjtvQkFDN0IscUJBQXFCO29CQUNyQiwwQkFBMEI7aUJBQzdCO2dCQUNELGVBQWUsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2dCQUNwQyxPQUFPLEVBQUU7b0JBQ0wsaUJBQWlCO29CQUNqQixxQkFBcUI7b0JBQ3JCLHlCQUF5QjtvQkFDekIsZ0JBQWdCO29CQUNoQixrQkFBa0I7b0JBQ2xCLGlCQUFpQjtvQkFDakIseUJBQXlCO29CQUN6Qix5QkFBeUI7b0JBQ3pCLG9CQUFvQjtvQkFDcEIseUJBQXlCO29CQUN6Qiw2QkFBNkI7b0JBQzdCLHFCQUFxQjtvQkFDckIsMEJBQTBCO2lCQUM3QjthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgRm9ybXNNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBDYWxlbmRhckNvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9jYWxlbmRhci9jYWxlbmRhci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBTZWxlY3Rpb25CYXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2VsZWN0aW9uLWJhci9zZWxlY3Rpb24tYmFyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IERheVZpZXdDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvZGF5LXZpZXcvZGF5LXZpZXcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgTW9udGhWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL21vbnRoLXZpZXcvbW9udGgtdmlldy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBZZWFyVmlld0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy95ZWFyLXZpZXcveWVhci12aWV3LmNvbXBvbmVudCc7XHJcblxyXG5pbXBvcnQgeyBGYXJyaXNEYXRlUGlja2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9mYXJyaXMtZGF0ZXBpY2tlci5pbnB1dCc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVwaWNrZXJDb21wb25lbnQgfSBmcm9tICcuL2ZhcnJpcy1kYXRlcGlja2VyLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IFNlbGVjdGlvblNpZGViYXJDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvc2VsZWN0aW9uLXNpZGViYXIvc2VsZWN0aW9uLXNpZGViYXIuY29tcG9uZW50JztcclxuaW1wb3J0IHsgQW5ndWxhck15RGF0ZVBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vQW5ndWxhck15RGF0ZVBpY2tlci5jb21wb25lbnQnO1xyXG5cclxuaW1wb3J0IHsgVGltZVBpY2tlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktdGltZS1waWNrZXInO1xyXG5pbXBvcnQgeyBMb2NhbGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IFBvcG92ZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXBvcG92ZXInO1xyXG5pbXBvcnQgeyBEYXRlSGVscGVyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24vZGF0ZSc7XHJcbmltcG9ydCB7IE5vdGlmeU1vZHVsZSAgfSBmcm9tICdAZmFycmlzL3VpLW5vdGlmeSc7XHJcbmltcG9ydCB7IEZhcnJpc0NvbW1vbk1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuaW1wb3J0IHsgRmFycmlzRm9ybXNNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWZvcm1zJztcclxuXHJcbmltcG9ydCB7IER5bmFtaWNWaWV3Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2R5bmFtaWMtdmlldy9keW5hbWljLXZpZXcuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRHluYW1pY0RhdGVJbnB1dENvbXBvbmVudCB9IGZyb20gJy4vZHluYW1pYy1kYXRlLWlucHV0L2R5bmFtaWMtZGF0ZS1pbnB1dC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdERhdGVJbnB1dENvbXBvbmVudCB9IGZyb20gJy4vbXVsdGktZGF0ZS1pbnB1dC9tdWx0aS1kYXRlLWlucHV0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IE11bHRpRGF5Vmlld0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tdWx0aS1kYXktdmlldy9tdWx0aS1kYXktdmlldy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBNdWx0aVNlbGVjdGVkRGF5c0NvbXBvbmVudCB9IGZyb20gJy4vY29tcG9uZW50cy9tdWx0aS1kYXktdmlldy9tdWx0aS1kYXlzLmNvbXBvbmVudCc7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSwgXHJcbiAgICAgICAgVGltZVBpY2tlck1vZHVsZSxcclxuICAgICAgICBMb2NhbGVNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIFBvcG92ZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIERhdGVIZWxwZXJNb2R1bGUuZm9yUm9vdCgpLFxyXG4gICAgICAgIE5vdGlmeU1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgRmFycmlzRm9ybXNNb2R1bGVcclxuICAgIF0sXHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBDYWxlbmRhckNvbXBvbmVudCxcclxuICAgICAgICBTZWxlY3Rpb25TaWRlYmFyQ29tcG9uZW50LFxyXG4gICAgICAgIFNlbGVjdGlvbkJhckNvbXBvbmVudCxcclxuICAgICAgICBEYXlWaWV3Q29tcG9uZW50LFxyXG4gICAgICAgIE1vbnRoVmlld0NvbXBvbmVudCxcclxuICAgICAgICBZZWFyVmlld0NvbXBvbmVudCxcclxuICAgICAgICBGYXJyaXNEYXRlcGlja2VyQ29tcG9uZW50LFxyXG4gICAgICAgIEZhcnJpc0RhdGVQaWNrZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgQW5ndWxhck15RGF0ZVBpY2tlckNvbXBvbmVudCxcclxuICAgICAgICBEeW5hbWljVmlld0NvbXBvbmVudCxcclxuICAgICAgICBEeW5hbWljRGF0ZUlucHV0Q29tcG9uZW50LFxyXG4gICAgICAgIE11bHRpU2VsZWN0RGF0ZUlucHV0Q29tcG9uZW50LFxyXG4gICAgICAgIE11bHRpRGF5Vmlld0NvbXBvbmVudCxcclxuICAgICAgICBNdWx0aVNlbGVjdGVkRGF5c0NvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGVudHJ5Q29tcG9uZW50czogW0NhbGVuZGFyQ29tcG9uZW50XSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBDYWxlbmRhckNvbXBvbmVudCxcclxuICAgICAgICBTZWxlY3Rpb25CYXJDb21wb25lbnQsXHJcbiAgICAgICAgU2VsZWN0aW9uU2lkZWJhckNvbXBvbmVudCxcclxuICAgICAgICBEYXlWaWV3Q29tcG9uZW50LFxyXG4gICAgICAgIE1vbnRoVmlld0NvbXBvbmVudCxcclxuICAgICAgICBZZWFyVmlld0NvbXBvbmVudCxcclxuICAgICAgICBGYXJyaXNEYXRlcGlja2VyQ29tcG9uZW50LFxyXG4gICAgICAgIEZhcnJpc0RhdGVQaWNrZXJEaXJlY3RpdmUsXHJcbiAgICAgICAgRHluYW1pY1ZpZXdDb21wb25lbnQsXHJcbiAgICAgICAgRHluYW1pY0RhdGVJbnB1dENvbXBvbmVudCxcclxuICAgICAgICBNdWx0aVNlbGVjdERhdGVJbnB1dENvbXBvbmVudCxcclxuICAgICAgICBNdWx0aURheVZpZXdDb21wb25lbnQsXHJcbiAgICAgICAgTXVsdGlTZWxlY3RlZERheXNDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUge31cclxuIl19