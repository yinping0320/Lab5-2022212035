/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, ViewEncapsulation, ViewChild, Renderer2, ChangeDetectorRef, HostBinding, Output, EventEmitter } from '@angular/core';
import { UtilService } from '../../services/public-api';
import { DefaultView, KeyCode, MonthId, ResetDateType } from '../../enums/public-api';
import { DOT, UNDER_LINE, D, M, Y, DATE_ROW_COUNT, DATE_COL_COUNT, MONTH_ROW_COUNT, MONTH_COL_COUNT, YEAR_ROW_COUNT, YEAR_COL_COUNT, SU, MO, TU, WE, TH, FR, SA, EMPTY_STR } from '../../constants/constants';
import { TimePickerPanelComponent } from '@farris/ui-time-picker';
import { flatten } from 'lodash-es';
import { ViewType } from '../../interfaces/my-options.interface';
export class CalendarComponent {
    /**
     * @param {?} renderer
     * @param {?} cdr
     * @param {?} utilService
     */
    constructor(renderer, cdr, utilService) {
        this.renderer = renderer;
        this.cdr = cdr;
        this.utilService = utilService;
        this.position = 'static';
        this.dynamicViewShow = new EventEmitter();
        this.dateHlp = null;
        this.visibleMonth = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.visibleMonth_range = { monthTxt: EMPTY_STR, monthNbr: 0, year: 0, yearTxt: EMPTY_STR };
        this.selectedMonth = { monthNbr: 0, year: 0 };
        this.selectedMonth_range = { monthNbr: 0, year: 0 };
        this.selectedDate = { year: 0, month: 0, day: 0 };
        this.selectedDateRange = { begin: { year: 0, month: 0, day: 0 }, end: { year: 0, month: 0, day: 0 } };
        this.selectedWeek = { weekNbr: 0, year: 0 };
        this.weekDays = [];
        this.dates = [];
        this.dates_range = [];
        this.months = [];
        this.months_range = [];
        this.years = [];
        this.years_range = [];
        this.multiSelect = false;
        this.dayIdx = 0;
        this.weekDayOpts = [SU, MO, TU, WE, TH, FR, SA];
        this.selectMonth = false;
        this.selectMonth_range = false;
        this.selectYear = false;
        this.selectYear_range = false;
        this.selectTime = false;
        this.selectorPos = null;
        this.scrollDiff = 0;
        this.prevViewDisabled = false;
        this.nextViewDisabled = false;
        this.prevDobViewDisabled = false;
        this.nextDobViewDisabled = false;
        this.prevViewDisabled_range = false;
        this.nextViewDisabled_range = false;
        this.prevDobViewDisabled_range = false;
        this.nextDobViewDisabled_range = false;
        /**
         * 多选
         */
        this.selectedDates = [];
        // 禁用日期时间控件中的时间段的小时
        this.disabledHours = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes = (/**
         * @param {?} hour
         * @return {?}
         */
        (hour) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        (hour, minute) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.begin : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.disabledHours2 = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledHours(min, max, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的分钟
        this.disabledMinutes2 = (/**
         * @param {?} hour
         * @return {?}
         */
        (hour) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledMinutes(min, max, hour, currentDate);
            return res;
        });
        // 禁用日期时间控件中的时间段的秒
        this.disabledSeconds2 = (/**
         * @param {?} hour
         * @param {?} minute
         * @return {?}
         */
        (hour, minute) => {
            /** @type {?} */
            const min = this.opts.disableUntil;
            /** @type {?} */
            const max = this.opts.disableSince;
            /** @type {?} */
            const currentDate = this.opts.dateRange ? this.selectedDateRange.end : this.selectedDate;
            /** @type {?} */
            const res = this.utilService.disabledSeconds(min, max, hour, minute, currentDate);
            return res;
        });
        this.btnDynamicDisabled = true;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getTimeStr(date) {
        /** @type {?} */
        const hour = this.utilService.preZero(date.getHours());
        /** @type {?} */
        const minute = this.utilService.preZero(date.getMinutes());
        /** @type {?} */
        const second = this.utilService.preZero(date.getSeconds());
        return `${hour}:${minute}:${second}`;
    }
    /**
     * @param {?} opts
     * @param {?} defaultMonth
     * @param {?} selectorPos
     * @param {?} inputValue
     * @param {?} dc
     * @param {?} cvc
     * @param {?} rds
     * @param {?} cbe
     * @return {?}
     */
    initialize(opts, defaultMonth, selectorPos, inputValue, dc, cvc, rds, cbe) {
        this.opts = opts;
        this.selectorPos = selectorPos;
        this.weekDays.length = 0;
        const { defaultView, dateRange, firstDayOfWeek, dayLabels, stylesData, yearTxt, multiSelect, separator, selectedOrderBy } = this.opts;
        this.visibleMonth.yearTxt = yearTxt;
        this.visibleMonth_range.yearTxt = yearTxt;
        this.multiSelect = multiSelect;
        // if (stylesData.styles.length) {
        //     const styleElTemp: any = this.renderer.createElement(STYLE);
        //     this.renderer.appendChild(styleElTemp, this.renderer.createText(stylesData.styles));
        //     this.renderer.appendChild(this.styleEl.nativeElement, styleElTemp);
        // }
        this.dayIdx = this.weekDayOpts.indexOf(firstDayOfWeek);
        if (this.dayIdx !== -1) {
            /** @type {?} */
            let idx = this.dayIdx;
            // tslint:disable-next-line:prefer-for-of
            for (let i = 0; i < this.weekDayOpts.length; i++) {
                this.weekDays.push(dayLabels[this.weekDayOpts[idx]]);
                idx = this.weekDayOpts[idx] === SA ? 0 : idx + 1;
            }
        }
        /** @type {?} */
        let today = this.getToday();
        /** @type {?} */
        const isInDisableRange = this.utilService.isDisabledDate(today, this.opts);
        today = !isInDisableRange ? today : this.utilService.getNearDate(today, this.opts.disableUntil, this.opts.disableSince);
        switch (defaultView) {
            case DefaultView.Month:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 1 };
                break;
            case DefaultView.Year:
                this.selectedMonth = { monthNbr: 0, year: today.year };
                this.selectedMonth_range = { monthNbr: 0, year: today.year + 10 };
                break;
            default:
                this.selectedMonth = { monthNbr: today.month, year: today.year };
                if (today.month >= 12) {
                    this.selectedMonth_range = { monthNbr: 1, year: today.year + 1 };
                }
                else {
                    this.selectedMonth_range = { monthNbr: today.month + this.opts.monthRangeValue, year: today.year };
                }
                break;
        }
        if (defaultMonth && defaultMonth.length) {
            this.selectedMonth = this.utilService.parseDefaultMonth(defaultMonth);
            this.selectedMonth_range = this.utilService.parseDefaultMonth(defaultMonth);
            if (this.selectedMonth_range.monthNbr >= 12) {
                this.selectedMonth_range.year++;
                this.selectedMonth_range.monthNbr = 1;
            }
            else {
                this.selectedMonth_range.monthNbr = this.selectedMonth_range.monthNbr + this.opts.monthRangeValue;
            }
        }
        // 日期多选
        if (this.multiSelect && inputValue) {
            this.selectedDates = inputValue.split(separator).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (this.opts.returnFormat === 'yyyyMMdd') {
                    if (n.length > 8) {
                        n = this.dateHlp.formatTo(n, this.opts.returnFormat);
                    }
                }
                /** @type {?} */
                const _dObj = this.utilService.isDateValid(n, this.opts, true);
                return Object.assign({}, _dObj, { value: this.utilService.formatDate(_dObj, this.opts.dateFormat, this.opts.monthLabels) });
            }));
            this.selectedDates = this.utilService.orderSelectedDates(this.selectedDates, selectedOrderBy);
        }
        else {
            if (!dateRange) {
                // Single date mode
                /** @type {?} */
                const date = this.utilService.isDateValid(inputValue, this.opts, true);
                if (this.utilService.isInitializedDate(date)) {
                    this.selectedDate = date;
                    /** @type {?} */
                    const hour = this.utilService.preZero(date.hour);
                    /** @type {?} */
                    const minute = this.utilService.preZero(date.minute);
                    /** @type {?} */
                    const second = this.utilService.preZero(date.second);
                    this.timeVlaue = `${hour}:${minute}:${second}`;
                    this.selectedMonth = { monthNbr: date.month, year: date.year };
                }
            }
            else {
                // Date range mode
                const { begin, end } = this.utilService.isDateValidDateRange(inputValue, this.opts);
                if (this.utilService.isInitializedDate(begin) && this.utilService.isInitializedDate(end)) {
                    this.selectedDateRange = { begin, end };
                    /** @type {?} */
                    const hour = this.utilService.preZero(begin.hour);
                    /** @type {?} */
                    const minute = this.utilService.preZero(begin.minute);
                    /** @type {?} */
                    const second = this.utilService.preZero(begin.second);
                    this.timeVlaue = `${hour}:${minute}:${second}`;
                    /** @type {?} */
                    const _hour = this.utilService.preZero(end.hour);
                    /** @type {?} */
                    const _minute = this.utilService.preZero(end.minute);
                    /** @type {?} */
                    const _second = this.utilService.preZero(end.second);
                    this.timeVlaue_range = `${_hour}:${_minute}:${_second}`;
                    this.selectedMonth = { monthNbr: begin.month, year: begin.year };
                    if (begin.month === end.month && begin.year === end.year) {
                        if (end.month >= 12) {
                            this.selectedMonth_range = { monthNbr: 1, year: end.year + 1 };
                        }
                        else {
                            /** @type {?} */
                            let endyear = end.year;
                            if (defaultView === DefaultView.Month) {
                                endyear = endyear + 1;
                            }
                            this.selectedMonth_range = { monthNbr: end.month + this.opts.monthRangeValue, year: endyear };
                        }
                    }
                    else {
                        if (defaultView === DefaultView.Month && begin.year === end.year) {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year + 1 };
                        }
                        else {
                            this.selectedMonth_range = { monthNbr: end.month, year: end.year };
                        }
                    }
                    // tfs 579358
                    // let endDayWeekNbr = this.utilService.getWeekNumber(end);
                    // if (this.opts.firstDayOfWeek === 'su') {
                    //     endDayWeekNbr -= 1;
                    // }
                    // const weekNbr = this.utilService.getWeekNumber(begin) === endDayWeekNbr ? this.utilService.getWeekNumber(begin): 0;
                    /** @type {?} */
                    const dateObj = this.opts.firstDayOfWeek == 'su' ? end : begin;
                    /** @type {?} */
                    let weekNbr = this.utilService.getWeekNumber(dateObj);
                    this.selectedWeek = { weekNbr, year: begin.year };
                }
            }
        }
        this.dateChanged = dc;
        this.calendarViewChanged = cvc;
        this.rangeDateSelection = rds;
        this.closedByEsc = cbe;
        this.setCalendarVisibleMonth();
        if (defaultView === DefaultView.Month) {
            this.onMonthViewBtnClicked();
            if (dateRange) {
                this.onMonthViewBtnClicked(true);
            }
        }
        else if (defaultView === DefaultView.Year) {
            this.onYearViewBtnClicked();
            if (dateRange) {
                this.onYearViewBtnClicked(true);
            }
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    resetDateValue(value) {
        if (value === ResetDateType.singleDate || value === ResetDateType.both) {
            this.selectedDate = this.utilService.resetDate();
        }
        if (value === ResetDateType.dateRange || value === ResetDateType.both) {
            this.selectedDateRange.begin = this.utilService.resetDate();
            this.selectedDateRange.end = this.utilService.resetDate();
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    resetMonthYearSelect(isSecondCalendar) {
        if (!isSecondCalendar) {
            this.selectMonth = false;
            this.selectYear = false;
        }
        else {
            this.selectMonth_range = false;
            this.selectYear_range = false;
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthViewBtnClicked(isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.selectMonth = !this.selectMonth;
            this.selectYear = false;
            if (this.selectMonth) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth.year = this.selectedMonth.year;
            }
        }
        else {
            this.selectMonth_range = !this.selectMonth_range;
            this.selectYear_range = false;
            if (this.selectMonth_range) {
                this.generateMonths(isSecondCalendar);
            }
            else {
                this.visibleMonth_range.year = this.selectedMonth_range.year;
            }
            this.cdr.detectChanges();
        }
    }
    /**
     * @param {?} cell
     * @param {?} isSecondCalendar
     * @return {?}
     */
    onMonthCellClicked(cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            const { year, monthNbr } = this.visibleMonth;
            /** @type {?} */
            const mc = cell.nbr !== monthNbr;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth = false;
            }
        }
        else {
            const { year, monthNbr } = this.visibleMonth_range;
            /** @type {?} */
            const mc = cell.nbr !== monthNbr;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[cell.nbr],
                monthNbr: cell.nbr,
                year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 2) {
                this.toSelectMonth(this.visibleMonth_range);
            }
            else {
                this.generateCalendar(cell.nbr, year, mc, isSecondCalendar);
                this.selectMonth_range = false;
            }
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onMonthCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, MONTH_ROW_COUNT, MONTH_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(M, targetRow, targetCol);
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearViewBtnClicked(isSecondCalendar) {
        this.selectTime = false;
        if (!isSecondCalendar) {
            this.visibleMonth.year = this.selectedMonth.year;
            if (!this.selectYear) {
                this.generateYears(this.visibleMonth.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth.monthNbr, this.visibleMonth.year, false, isSecondCalendar);
            }
            this.selectYear = this.opts.showType === 3 ? true : !this.selectYear;
            if (this.opts.showType === 2) {
                this.selectMonth = !this.selectMonth;
            }
            else {
                this.selectMonth = false;
            }
            // this.selectYear = !this.selectYear;
            // this.selectMonth = false;
        }
        else {
            this.visibleMonth_range.year = this.selectedMonth_range.year;
            if (!this.selectYear_range) {
                this.generateYears(this.visibleMonth_range.year, isSecondCalendar);
            }
            else {
                this.generateCalendar(this.visibleMonth_range.monthNbr, this.visibleMonth_range.year, false, isSecondCalendar);
            }
            this.selectYear_range = this.opts.showType === 3 ? true : !this.selectYear_range;
            if (this.opts.showType === 2) {
                this.selectMonth_range = !this.selectMonth_range;
            }
            else {
                this.selectMonth_range = false;
            }
        }
        this.cdr.detectChanges();
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellClicked(cell, isSecondCalendar) {
        if (!isSecondCalendar) {
            const { year, monthNbr, monthTxt } = this.visibleMonth;
            /** @type {?} */
            const yc = cell.year !== year;
            this.visibleMonth = { monthTxt, monthNbr, year: cell.year, yearTxt: this.opts.yearTxt };
            this.selectedMonth.year = this.visibleMonth.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear = false;
                this.selectMonth = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear = false;
            }
        }
        else {
            const { year, monthNbr, monthTxt } = this.visibleMonth_range;
            /** @type {?} */
            const yc = cell.year !== year;
            this.visibleMonth_range = {
                monthTxt,
                monthNbr,
                year: cell.year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth_range.year = this.visibleMonth_range.year;
            if (this.opts.showType === 3) {
                this.toSelectYear({ year: this.visibleMonth_range.year });
            }
            else if (this.opts.showType === 2) {
                this.generateMonths(isSecondCalendar);
                this.selectYear_range = false;
                this.selectMonth_range = true;
            }
            else {
                this.generateCalendar(monthNbr, cell.year, yc, isSecondCalendar);
                this.selectYear_range = false;
            }
        }
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onYearCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, YEAR_ROW_COUNT, YEAR_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(Y, targetRow, targetCol);
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateMonths(isSecondCalendar) {
        /** @type {?} */
        const today = this.getToday();
        const { disableUntil, disableSince } = this.opts;
        // tslint:disable-next-line:one-variable-per-declaration
        /** @type {?} */
        let year;
        /** @type {?} */
        let monthNbr;
        if (!isSecondCalendar) {
            this.months.length = 0;
            year = this.visibleMonth.year;
            monthNbr = this.visibleMonth.monthNbr;
        }
        else {
            this.months_range.length = 0;
            year = this.visibleMonth_range.year;
            monthNbr = this.visibleMonth_range.monthNbr;
        }
        for (let i = 1; i <= 12; i += 3) {
            /** @type {?} */
            const row = [];
            for (let j = i; j < i + 3; j++) {
                /** @type {?} */
                const disabled = this.utilService.isMonthDisabledByDisableUntil({ year, month: j, day: this.daysInMonth(j, year) }, disableUntil) || this.utilService.isMonthDisabledByDisableSince({ year, month: j, day: 1 }, disableSince);
                row.push({
                    nbr: j,
                    name: this.opts.monthLabels[j],
                    currMonth: j === today.month && year === today.year,
                    disabled,
                    monthObj: { year, month: j }
                });
            }
            if (!isSecondCalendar) {
                this.months.push({ row, year });
            }
            else {
                this.months_range.push({ row, year });
            }
        }
        this.setMonthViewHeaderBtnDisabledState(year, isSecondCalendar);
        this.generateCalendar(isSecondCalendar ? this.visibleMonth_range.monthNbr : this.visibleMonth.monthNbr, year, false, isSecondCalendar);
    }
    /**
     * @param {?} inputYear
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateYears(inputYear, isSecondCalendar) {
        const { minYear, maxYear, disableUntil, disableSince } = this.opts;
        /** @type {?} */
        let y = inputYear - (inputYear % 10);
        const { year, monthNbr } = this.visibleMonth;
        if (!isSecondCalendar) {
            this.years.length = 0;
        }
        else {
            if (!this.years_range.length && ((this.years && this.years.length) && y < this.years[3][2].year && y > this.years[0][0].year) && this.opts.showType === 3) {
                y += 10;
            }
            this.years_range.length = 0;
            /** @type {?} */
            const allYears = flatten(this.years_range);
            if (allYears.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.year == inputYear)) > -1) {
                y = this.years_range[3][2].year;
            }
        }
        /** @type {?} */
        const today = this.getToday();
        for (let i = y - 1; i < y + 10; i += 3) {
            /** @type {?} */
            const row = [];
            for (let j = i; j < i + 3; j++) {
                /** @type {?} */
                const disabled = this.utilService.isMonthDisabledByDisableUntil({
                    year: j,
                    month: monthNbr,
                    day: this.daysInMonth(monthNbr, j)
                }, disableUntil) ||
                    this.utilService.isMonthDisabledByDisableSince({ year: j, month: monthNbr, day: 1 }, disableSince);
                /** @type {?} */
                const minMax = j < minYear || j > maxYear;
                row.push({
                    year: j,
                    currYear: j === today.year,
                    selected: j === year,
                    disabled: disabled || minMax,
                    yearObj: { year: j }
                });
            }
            if (!isSecondCalendar) {
                this.years.push(row);
            }
            else {
                this.years_range.push(row);
            }
        }
        if (!isSecondCalendar) {
            this.setYearViewHeaderBtnDisabledState(this.years[0][1].year, this.years[3][1].year, isSecondCalendar);
        }
        else {
            this.setYearViewHeaderBtnDisabledState(this.years_range[0][1].year, this.years_range[3][1].year, isSecondCalendar);
        }
    }
    /**
     * @return {?}
     */
    setCalendarVisibleMonth() {
        // Sets visible month of calendar
        const { year, monthNbr } = this.selectedMonth;
        this.visibleMonth = {
            monthTxt: this.opts.monthLabels[monthNbr],
            monthNbr,
            year,
            yearTxt: this.opts.yearTxt
        };
        // Create current month
        if (this.opts.dateRange) {
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[this.selectedMonth_range.monthNbr],
                monthNbr: this.selectedMonth_range.monthNbr,
                year: this.selectedMonth_range.year,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(this.selectedMonth_range.monthNbr, this.selectedMonth_range.year, true, true);
        }
        this.generateCalendar(monthNbr, year, true, false);
    }
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onPrevNavigateBtnClicked(event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year - 10, isSecondCalendar);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, false);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year--;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year--;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year - 10, isSecondCalendar);
                }
            }
        }
    }
    /**
     * @param {?=} event
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onNextNavigateBtnClicked(event, isSecondCalendar) {
        if (!isSecondCalendar) {
            if (event) {
                if (!this.selectMonth && !this.selectYear) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
            else {
                if (!this.selectMonth && !this.selectYear) {
                    this.visibleMonth.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth) {
                    this.visibleMonth.year++;
                    this.generateMonths();
                }
                else if (this.selectYear) {
                    this.generateYears(this.years[2][2].year + 10);
                }
            }
        }
        else {
            if (event) {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.setDateViewMonth(isSecondCalendar, true);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
            else {
                if (!this.selectMonth_range && !this.selectYear_range) {
                    this.visibleMonth_range.year++;
                    this.setDateViewMonth(isSecondCalendar);
                }
                else if (this.selectMonth_range) {
                    this.visibleMonth_range.year++;
                    this.generateMonths(isSecondCalendar);
                }
                else if (this.selectYear_range) {
                    this.generateYears(this.years_range[2][2].year + 10, isSecondCalendar);
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @param {?=} isNext
     * @return {?}
     */
    setDateViewMonth(isSecondCalendar, isNext) {
        /** @type {?} */
        let change;
        if (isNext === undefined) {
            change = 0;
        }
        else {
            change = isNext ? 1 : -1;
        }
        if (!isSecondCalendar) {
            const { year, monthNbr } = this.visibleMonth;
            /** @type {?} */
            const d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            const y = d.getFullYear();
            /** @type {?} */
            const m = d.getMonth() + 1;
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
        else {
            const { year, monthNbr } = this.visibleMonth_range;
            /** @type {?} */
            const d = this.getDate(year, monthNbr, 1);
            d.setMonth(d.getMonth() + change);
            /** @type {?} */
            const y = d.getFullYear();
            /** @type {?} */
            const m = d.getMonth() + 1;
            this.visibleMonth_range = {
                monthTxt: this.opts.monthLabels[m],
                monthNbr: m,
                year: y,
                yearTxt: this.opts.yearTxt
            };
            this.generateCalendar(m, y, true, isSecondCalendar);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onCloseSelector(event) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.esc) {
            this.closedByEsc();
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellClicked(cell, isSecondCalendar) {
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        this.selectDate(cell.dateObj);
        this.resetMonthYearSelect(isSecondCalendar);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onDayCellKeyDown(cell) {
        // Make possible to move focus by arrow keys
        const { sourceRow, sourceCol } = this.getSourceRowAndColumnFromEvent(event);
        const { moveFocus, targetRow, targetCol } = this.getTargetFocusRowAndColumn(event, sourceRow, sourceCol, DATE_ROW_COUNT, DATE_COL_COUNT);
        if (moveFocus) {
            this.focusCellElement(D, targetRow, targetCol);
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                            this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
        }
        else {
            for (const w of this.dates_range) {
                for (const day of w.week) {
                    day.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, day.dateObj) &&
                            this.utilService.isDateSameOrEarlier(day.dateObj, cell.dateObj)) ||
                            (this.utilService.isDateSameOrEarlier(day.dateObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.dateObj, day.dateObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const w of this.dates) {
                for (const day of w.week) {
                    day.range = false;
                }
            }
        }
        else {
            for (const w of this.dates_range) {
                for (const day of w.week) {
                    day.range = false;
                }
            }
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
        }
        else {
            for (const item of this.months_range) {
                for (const month of item.row) {
                    month.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, month.monthObj) &&
                            this.utilService.isDateSameOrEarlier(month.monthObj, cell.monthObj)) ||
                            (this.utilService.isDateSameOrEarlier(month.monthObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.monthObj, month.monthObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onMonthCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range = false;
                }
            }
        }
        else {
            for (const item of this.months) {
                for (const month of item.row) {
                    month.range = false;
                }
            }
        }
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellMouseEnter(cell, isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.years) {
                for (const year of item) {
                    year.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                            this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                            (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                }
            }
        }
        else {
            for (const item of this.years_range) {
                for (const year of item) {
                    year.range =
                        (this.utilService.isDateSameOrEarlier(this.selectedDateRange.begin, year.yearObj) &&
                            this.utilService.isDateSameOrEarlier(year.yearObj, cell.yearObj)) ||
                            (this.utilService.isDateSameOrEarlier(year.yearObj, this.selectedDateRange.begin) &&
                                this.utilService.isDateSameOrEarlier(cell.yearObj, year.yearObj));
                }
            }
        }
    }
    /**
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onYearCellMouseLeave(isSecondCalendar) {
        if (isSecondCalendar) {
            for (const item of this.years) {
                for (const year of item) {
                    year.range = false;
                }
            }
        }
        else {
            for (const item of this.years_range) {
                for (const year of item) {
                    year.range = false;
                }
            }
        }
    }
    /**
     * @param {?} weekData
     * @return {?}
     */
    onWeekClicked(weekData) {
        /** @type {?} */
        const showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr: weekData.weekNbr, year: weekData.year };
        if (showTime) {
            weekData.week[0].dateObj.hour = 0;
            weekData.week[0].dateObj.minute = 0;
            weekData.week[0].dateObj.second = 0;
            weekData.week[6].dateObj.hour = 23;
            weekData.week[6].dateObj.minute = 59;
            weekData.week[6].dateObj.second = 59;
        }
        this.selectDate(weekData.week[0].dateObj);
        this.selectDate(weekData.week[6].dateObj);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getSourceRowAndColumnFromEvent(event) {
        /** @type {?} */
        let sourceRow = 0;
        /** @type {?} */
        let sourceCol = 0;
        if (event.target && event.target.id) {
            // value of id is for example: m_0_1 (first number = row, second number = column)
            /** @type {?} */
            const arr = event.target.id.split(UNDER_LINE);
            sourceRow = Number(arr[1]);
            sourceCol = Number(arr[2]);
        }
        return { sourceRow, sourceCol };
    }
    /**
     * @param {?} event
     * @param {?} row
     * @param {?} col
     * @param {?} rowCount
     * @param {?} colCount
     * @return {?}
     */
    getTargetFocusRowAndColumn(event, row, col, rowCount, colCount) {
        /** @type {?} */
        let moveFocus = false;
        /** @type {?} */
        let targetRow = row;
        /** @type {?} */
        let targetCol = col;
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (keyCode === KeyCode.upArrow && row > 0) {
            moveFocus = true;
            targetRow--;
        }
        else if (keyCode === KeyCode.downArrow && row < rowCount) {
            moveFocus = true;
            targetRow++;
        }
        else if (keyCode === KeyCode.leftArrow && col > 0) {
            moveFocus = true;
            targetCol--;
        }
        else if (keyCode === KeyCode.rightArrow && col < colCount) {
            moveFocus = true;
            targetCol++;
        }
        return { moveFocus, targetRow, targetCol };
    }
    /**
     * @param {?} type
     * @param {?} row
     * @param {?} col
     * @return {?}
     */
    focusCellElement(type, row, col) {
        /** @type {?} */
        const elem = this.selectorEl.nativeElement.querySelector(DOT + type + UNDER_LINE + row + UNDER_LINE + col);
        if (elem) {
            elem.focus();
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    selectDate(date) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // Date range
            /** @type {?} */
            const isBeginDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndDateInitialized = this.utilService.isInitializedDate(this.selectedDateRange.end) &&
                JSON.stringify(this.selectedDateRange.begin) !== JSON.stringify(this.selectedDateRange.end);
            if (isBeginDateInitialized && isEndDateInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = date;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else if (!isBeginDateInitialized) {
                // begin date
                this.selectedDateRange.begin = date;
                if (!isEndDateInitialized) {
                    this.selectedDateRange.end = date;
                }
                this.rangeDateSelection({
                    isBegin: true,
                    date,
                    jsDate: this.utilService.getDate(date),
                    dateFormat,
                    formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(date)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier(date, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = date;
                    this.rangeDateSelection({
                        isBegin: true,
                        date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                else {
                    this.selectedDateRange.end = date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date,
                        jsDate: this.utilService.getDate(date),
                        dateFormat,
                        formatted: this.utilService.formatDate(date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(date)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            // Single date
            this.selectedDate = date;
            if (!this.opts.showTime) {
                this.dateChanged(this.utilService.getDateModel(this.selectedDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
            }
            else {
                if (!this.timeVlaue && this.opts.viewType == ViewType.Together) {
                    this.timeVlaue = this.getTimeStr(new Date);
                }
            }
        }
    }
    /**
     * @param {?} month
     * @return {?}
     */
    toSelectMonth(month) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            const isBeginMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndMonthInitialized = this.utilService.isInitializedMonth(this.selectedDateRange.end);
            if (isBeginMonthInitialized && isEndMonthInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginMonthInitialized) {
                // begin date
                this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier({ year: month.year, month: month.monthNbr }, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = { year: month.year, month: month.monthNbr };
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.selectedMonth = month;
            this.dateChanged(this.utilService.getDateModel({ year: month.year, month: month.monthNbr }, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    }
    /**
     * @param {?} year
     * @return {?}
     */
    toSelectYear(year) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, showTime, returnFormat } = this.opts;
        if (this.opts.dateRange) {
            // month range
            /** @type {?} */
            const isBeginYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.begin);
            /** @type {?} */
            const isEndYearInitialized = this.utilService.isInitializedYear(this.selectedDateRange.end);
            if (isBeginYearInitialized && isEndYearInitialized) {
                // both already selected - set begin date and reset end date
                this.selectedDateRange.begin = year;
                this.selectedDateRange.end = this.utilService.resetDate();
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else if (!isBeginYearInitialized) {
                // begin date
                this.selectedDateRange.begin = year;
                this.rangeDateSelection({
                    isBegin: true,
                    date: this.selectedDateRange.begin,
                    jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                    dateFormat,
                    formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                    epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                });
            }
            else {
                // second selection
                /** @type {?} */
                const firstDateEarlier = this.utilService.isDateEarlier(year, this.selectedDateRange.begin);
                if (firstDateEarlier) {
                    /** @type {?} */
                    const _date = this.selectedDateRange.begin;
                    this.selectedDateRange.end = _date;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: _date,
                        jsDate: this.utilService.getDate(_date),
                        dateFormat,
                        formatted: this.utilService.formatDate(_date, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(_date)
                    });
                    this.selectedDateRange.begin = year;
                    this.rangeDateSelection({
                        isBegin: true,
                        date: this.selectedDateRange.begin,
                        jsDate: this.utilService.getDate(this.selectedDateRange.begin),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.begin, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.begin)
                    });
                }
                else {
                    this.selectedDateRange.end = year;
                    this.rangeDateSelection({
                        isBegin: false,
                        date: this.selectedDateRange.end,
                        jsDate: this.utilService.getDate(this.selectedDateRange.end),
                        dateFormat,
                        formatted: this.utilService.formatDate(this.selectedDateRange.end, dateFormat, monthLabels),
                        epoc: this.utilService.getEpocTime(this.selectedDateRange.end)
                    });
                }
                if (!this.opts.showTime) {
                    this.dateChanged(this.utilService.getDateModel(null, this.selectedDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), closeSelectorOnDateSelect);
                }
            }
        }
        else {
            this.dateChanged(this.utilService.getDateModel(year, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat), showTime ? false : closeSelectorOnDateSelect);
        }
    }
    /**
     * @param {?} y
     * @param {?} m
     * @return {?}
     */
    monthStartIdx(y, m) {
        // Month start index
        /** @type {?} */
        const d = new Date();
        d.setDate(1);
        d.setMonth(m - 1);
        d.setFullYear(y);
        /** @type {?} */
        const idx = d.getDay() + this.sundayIdx();
        return idx >= 7 ? idx - 7 : idx;
    }
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    daysInMonth(m, y) {
        // Return number of days of current month
        return new Date(y, m, 0).getDate();
    }
    /**
     * @param {?} m
     * @param {?} y
     * @return {?}
     */
    daysInPrevMonth(m, y) {
        // Return number of days of the previous month
        /** @type {?} */
        const d = this.getDate(y, m, 1);
        d.setMonth(d.getMonth() - 1);
        return this.daysInMonth(d.getMonth() + 1, d.getFullYear());
    }
    /**
     * @param {?} d
     * @param {?} m
     * @param {?} y
     * @param {?} cmo
     * @param {?} today
     * @return {?}
     */
    isCurrDay(d, m, y, cmo, today) {
        // Check is a given date the today
        return d === today.day && m === today.month && y === today.year && cmo === MonthId.curr;
    }
    /**
     * @return {?}
     */
    getWidth() {
        /** @type {?} */
        const hasShortCuts = this.opts.shortcuts && this.opts.shortcuts.length > 0;
        if (this.opts.dateRange && this.opts.showType !== 4) {
            return hasShortCuts ? '660px' : '574px';
        }
        else {
            /** @type {?} */
            const w = (hasShortCuts ? 380 : 287) + ((this.opts.viewType === ViewType.Together || this.multiSelect) ? 200 : 0);
            return w + 'px';
        }
    }
    /**
     * @return {?}
     */
    getToday() {
        /** @type {?} */
        const date = new Date();
        if (this.opts.showTime) {
            return {
                year: date.getFullYear(),
                month: date.getMonth() + 1,
                day: date.getDate(),
                hour: date.getHours(),
                minute: date.getMinutes(),
                second: date.getSeconds()
            };
        }
        else {
            return { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
        }
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getDayNumber(date) {
        // Get day number: su=0, mo=1, tu=2, we=3 ...
        /** @type {?} */
        const d = this.getDate(date.year, date.month, date.day);
        return d.getDay();
    }
    /**
     * @param {?} date
     * @return {?}
     */
    getWeekday(date) {
        // Get weekday: su, mo, tu, we ...
        return this.weekDayOpts[this.getDayNumber(date)];
    }
    /**
     * @param {?} year
     * @param {?} month
     * @param {?} day
     * @return {?}
     */
    getDate(year, month, day) {
        // Creates a date object from given year, month and day
        return new Date(year, month - 1, day, 0, 0, 0, 0);
    }
    /**
     * @return {?}
     */
    sundayIdx() {
        // Index of Sunday day
        return this.dayIdx > 0 ? 7 - this.dayIdx : 0;
    }
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} notifyChange
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    generateCalendar(m, y, notifyChange, isSecondCalendar) {
        if (!isSecondCalendar) {
            this.dates.length = 0;
        }
        else {
            this.dates_range.length = 0;
        }
        /** @type {?} */
        const today = this.getToday();
        /** @type {?} */
        const monthStart = this.monthStartIdx(y, m);
        /** @type {?} */
        const dInThisM = this.daysInMonth(m, y);
        /** @type {?} */
        const dInPrevM = this.daysInPrevMonth(m, y);
        /** @type {?} */
        let dayNbr = 1;
        /** @type {?} */
        let cmo = MonthId.prev;
        for (let i = 1; i < 7; i++) {
            /** @type {?} */
            const week = [];
            if (i === 1) {
                // First week
                /** @type {?} */
                const pm = dInPrevM - monthStart + 1;
                // Previous month
                for (let j = pm; j <= dInPrevM; j++) {
                    /** @type {?} */
                    const date = { year: m === 1 ? y - 1 : y, month: m === 1 ? 12 : m - 1, day: j };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(j, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                }
                cmo = MonthId.curr;
                // Current month
                /** @type {?} */
                const daysLeft = 7 - week.length;
                for (let j = 0; j < daysLeft; j++) {
                    /** @type {?} */
                    const date = { year: y, month: m, day: dayNbr };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            else {
                // Rest of the weeks
                for (let j = 1; j < 8; j++) {
                    if (dayNbr > dInThisM) {
                        // Next month
                        dayNbr = 1;
                        cmo = MonthId.next;
                    }
                    /** @type {?} */
                    const date = {
                        year: cmo === MonthId.next && m === 12 ? y + 1 : y,
                        month: cmo === MonthId.curr ? m : cmo === MonthId.next && m < 12 ? m + 1 : 1,
                        day: dayNbr
                    };
                    week.push({
                        dateObj: date,
                        cmo,
                        currDay: this.isCurrDay(dayNbr, m, y, cmo, today),
                        disabled: this.utilService.isDisabledDate(date, this.opts),
                        markedDate: this.utilService.isMarkedDate(date, this.opts.markDates, this.opts.markWeekends),
                        highlight: this.utilService.isHighlightedDate(date, this.opts.sunHighlight, this.opts.satHighlight, this.opts.highlightDates)
                    });
                    dayNbr++;
                }
            }
            // let weekNbr = this.opts.showWeekNumbers ? this.utilService.getWeekNumber(week[0].dateObj) : 0;
            /** @type {?} */
            let weekNbr = 0;
            if (this.opts.showWeekNumbers) {
                /** @type {?} */
                const dateIndex = this.opts.firstDayOfWeek == 'su' ? 6 : 0;
                weekNbr = this.utilService.getWeekNumber(week[dateIndex].dateObj);
                // if (this.opts.firstDayOfWeek === 'su') {
                //     endDayWeekNbr -= 1;
                // }
                // weekNbr = this.utilService.getWeekNumber(week[0].dateObj) === endDayWeekNbr ? this.utilService.getWeekNumber(week[0].dateObj): 0;
            }
            if (!isSecondCalendar) {
                this.dates.push({ week, weekNbr, year: y });
            }
            else {
                this.dates_range.push({ week, weekNbr, year: y });
            }
        }
        this.setDateViewHeaderBtnDisabledState(m, y, isSecondCalendar);
        if (notifyChange) {
            // Notify parent
            this.calendarViewChanged({
                year: y,
                month: m,
                first: { number: 1, weekday: this.getWeekday({ year: y, month: m, day: 1 }) },
                last: { number: dInThisM, weekday: this.getWeekday({ year: y, month: m, day: dInThisM }) }
            });
        }
    }
    /**
     * @param {?} m
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setDateViewHeaderBtnDisabledState(m, y, isSecondCalendar) {
        /** @type {?} */
        let dpm = false;
        /** @type {?} */
        let dnm = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpm = this.utilService.isMonthDisabledByDisableUntil({
            year: m === 1 ? y - 1 : y,
            month: m === 1 ? 12 : m - 1,
            day: this.daysInMonth(m === 1 ? 12 : m - 1, m === 1 ? y - 1 : y)
        }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: m === 12 ? y + 1 : y, month: m === 12 ? 1 : m + 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = (m === 1 && y === minYear) || dpm;
            this.nextViewDisabled_range = (m === 12 && y === maxYear) || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    }
    /**
     * @param {?} y
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setMonthViewHeaderBtnDisabledState(y, isSecondCalendar) {
        /** @type {?} */
        let dpm = false;
        /** @type {?} */
        let dnm = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpm = this.utilService.isMonthDisabledByDisableUntil({ year: y - 1, month: 12, day: 31 }, disableUntil);
        dnm = this.utilService.isMonthDisabledByDisableSince({ year: y + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = y === minYear || dpm;
            this.nextViewDisabled = y === maxYear || dnm;
            this.prevDobViewDisabled = y === minYear || dpm;
            this.nextDobViewDisabled = y === maxYear || dnm;
        }
        else {
            this.prevViewDisabled_range = y === minYear || dpm;
            this.nextViewDisabled_range = y === maxYear || dnm;
            this.prevDobViewDisabled_range = y === minYear || dpm;
            this.nextDobViewDisabled_range = y === maxYear || dnm;
        }
    }
    /**
     * @param {?} yp
     * @param {?} yn
     * @param {?} isSecondCalendar
     * @return {?}
     */
    setYearViewHeaderBtnDisabledState(yp, yn, isSecondCalendar) {
        /** @type {?} */
        let dpy = false;
        /** @type {?} */
        let dny = false;
        const { disableUntil, disableSince, minYear, maxYear } = this.opts;
        dpy = this.utilService.isMonthDisabledByDisableUntil({ year: yp - 1, month: 12, day: 31 }, disableUntil);
        dny = this.utilService.isMonthDisabledByDisableSince({ year: yn + 1, month: 1, day: 1 }, disableSince);
        if (!isSecondCalendar) {
            this.prevViewDisabled = yp <= minYear || dpy;
            this.nextViewDisabled = yn >= maxYear || dny;
            this.prevDobViewDisabled = yp <= minYear || dpy;
            this.nextDobViewDisabled = yn >= maxYear || dny;
        }
        else {
            this.prevViewDisabled_range = yp <= minYear || dpy;
            this.nextViewDisabled_range = yn >= maxYear || dny;
            this.prevDobViewDisabled_range = yp <= minYear || dpy;
            this.nextDobViewDisabled_range = yn >= maxYear || dny;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContainerClick(event) {
        event.stopPropagation();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickTimeBtn(event) {
        event.stopPropagation();
        if (this.opts.dateRange) {
            /** @type {?} */
            const beginIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.begin);
            /** @type {?} */
            const endIsInitializedDate = this.utilService.isInitializedDate(this.selectedDateRange.end);
            /** @type {?} */
            const now = new Date();
            if (!beginIsInitializedDate || !endIsInitializedDate) {
                // 直接点击确定显示本月和下月
                if (!beginIsInitializedDate) {
                    this.selectedDateRange.begin = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
                }
                /** @type {?} */
                let endYear = now.getFullYear();
                /** @type {?} */
                let endmonth = now.getMonth() + 1;
                if (endmonth >= 12) {
                    endYear = endYear + 1;
                    endmonth = 1;
                }
                // else {
                //     endmonth = endmonth + this.opts.monthRangeValue;
                // }
                this.selectedDateRange.end = Object.assign({}, this.selectedDateRange.begin);
                // this.selectedDateRange.end = { year: endYear, month: endmonth, day: now.getDate() };
                // 点击selectTime之前给dateRange赋两个时间值
                this.timeVlaue = this.getTimeStr(now);
                this.timeVlaue_range = this.getTimeStr(now);
            }
            if (!this.timeVlaue_range) {
                this.timeVlaue_range = this.getTimeStr(now);
            }
            this.timeVlaue_range = this.checkTimeValues(this.timeVlaue_range);
        }
        else {
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                /** @type {?} */
                const now = new Date();
                // 点击selectTime之前赋值
                this.timeVlaue = this.getTimeStr(now);
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        if (!this.timeVlaue) {
            /** @type {?} */
            const now = new Date();
            // 点击selectTime之前赋值
            this.timeVlaue = this.getTimeStr(now);
            if (!this.utilService.isInitializedDate(this.selectedDate)) {
                this.selectedDate = { year: now.getFullYear(), month: now.getMonth() + 1, day: now.getDate() };
            }
        }
        this.timeVlaue = this.checkTimeValues(this.timeVlaue);
        if (this.selectYear) {
            this.selectYear = false;
        }
        if (this.selectMonth) {
            this.selectMonth = false;
        }
        if (this.selectYear_range) {
            this.selectYear_range = false;
        }
        if (this.selectMonth_range) {
            this.selectMonth_range = false;
        }
        this.selectTime = !this.selectTime;
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowDynamicView($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = true;
        this.dynamicViewShow.emit({ showDynamicView: true });
        this.cdr.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onShowDatePanel($event) {
        $event.stopPropagation();
        this.opts.showDynamicView = false;
        this.dynamicViewShow.emit({ showDynamicView: false });
        this.cdr.detectChanges();
    }
    /**
     * @private
     * @param {?} isDateRange
     * @return {?}
     */
    getTimeValue(isDateRange) {
        /** @type {?} */
        const t = { start: null, end: null };
        if (this.timeVlaue) {
            /** @type {?} */
            const timeArr = this.timeVlaue.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
            if (timeArr.length >= 2) {
                t.start = {
                    hour: timeArr[0],
                    minute: timeArr[1],
                    second: timeArr[2] ? timeArr[2] : 0
                };
            }
        }
        else {
            /** @type {?} */
            const nowDate = new Date();
            /** @type {?} */
            const hour = nowDate.getHours();
            /** @type {?} */
            const minute = nowDate.getMinutes();
            /** @type {?} */
            const second = nowDate.getSeconds();
            if (this.opts.dateRange) {
                t.start = { hour: 0, minute: 0, second: 0 };
            }
            else {
                t.start = { hour, minute, second };
            }
        }
        if (isDateRange) {
            if (this.timeVlaue_range) {
                /** @type {?} */
                const timeArr_range = this.timeVlaue_range.replace('时', ':').replace('分', ':').replace('秒', '').split(':');
                if (timeArr_range.length >= 2) {
                    t.end = {
                        hour: timeArr_range[0],
                        minute: timeArr_range[1],
                        second: timeArr_range[2] ? timeArr_range[2] : 0
                    };
                }
            }
            else {
                /** @type {?} */
                const hour = 23;
                /** @type {?} */
                const minute = 59;
                /** @type {?} */
                const second = 59;
                t.end = { hour, minute, second };
            }
        }
        return t;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onClickOkBtn(event) {
        event.stopPropagation();
        /** @type {?} */
        let timeObj = null;
        /** @type {?} */
        let timeObj_range = null;
        /** @type {?} */
        let selectedDate = null;
        /** @type {?} */
        let selectedDate_range = null;
        if (this.opts.showTime) {
            const { start, end } = this.getTimeValue(this.opts.dateRange);
            timeObj = start;
            timeObj_range = end;
        }
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        if (!this.opts.dateRange) {
            selectedDate = Object.assign({}, this.initializedDate(this.selectedDate), timeObj);
            /** @type {?} */
            const isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
            /** @type {?} */
            const earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
            selectedDate = !isInDisableRange
                ? selectedDate
                : Object.assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
            this.checkTimeValue(selectedDate);
        }
        else {
            /** @type {?} */
            const begin = Object.assign({}, this.initializedDate(this.selectedDateRange.begin), timeObj);
            /** @type {?} */
            const end = Object.assign({}, this.initializedDate(this.selectedDateRange.end, begin), timeObj_range);
            this.checkTimeValue(begin);
            this.checkTimeValue(end);
            selectedDate_range = { begin, end };
        }
        /** @type {?} */
        const dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTodayClick($event) {
        $event.stopPropagation();
        /** @type {?} */
        let timeObj = null;
        /** @type {?} */
        let selectedDate = null;
        /** @type {?} */
        let selectedDate_range = null;
        if (this.opts.showTime) {
            const { start } = this.getTimeValue(false);
            timeObj = start;
        }
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        selectedDate = Object.assign({}, this.initializedDate({ year: 0, month: 0, day: 0 }), timeObj);
        /** @type {?} */
        const isInDisableRange = this.utilService.isDisabledDate(selectedDate, this.opts);
        /** @type {?} */
        const earlier = this.utilService.isDateSameOrEarlier(selectedDate, this.opts.disableUntil);
        selectedDate = !isInDisableRange
            ? selectedDate
            : Object.assign({}, selectedDate, (earlier ? this.opts.disableUntil : this.opts.disableSince));
        /** @type {?} */
        const dateModel = this.utilService.getDateModel(selectedDate, selectedDate_range, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        this.dateChanged(dateModel, closeSelectorOnDateSelect);
    }
    /**
     * @param {?} $event
     * @param {?} dynamicviewRef
     * @return {?}
     */
    onDynamicOkClick($event, dynamicviewRef) {
        if (dynamicviewRef) {
            /** @type {?} */
            const text = dynamicviewRef.formatValue();
            /** @type {?} */
            const value = dynamicviewRef.getValue();
            value.text = text;
            this.opts.dynamicValueChanged(value);
        }
    }
    /**
     * @param {?} date
     * @param {?=} otherDate
     * @return {?}
     */
    initializedDate(date, otherDate = { year: 0, month: 0, day: 0 }) {
        /** @type {?} */
        const daysInMonth = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
        if (!this.utilService.isInitializedDate(date) && !this.utilService.isInitializedDate(otherDate)) {
            /** @type {?} */
            const year = new Date().getFullYear();
            /** @type {?} */
            const month = new Date().getMonth() + 1;
            /** @type {?} */
            const day = new Date().getDate();
            return this.utilService.isDisabledDate({ year, month, day }, this.opts) ? this.opts.disableUntil : { year, month, day };
        }
        else if (!this.utilService.isInitializedDate(date)) {
            /** @type {?} */
            const year = otherDate.month + 1 > 12 ? otherDate.year + 1 : otherDate.year;
            /** @type {?} */
            let month = otherDate.month + 1 > 12 ? 1 : otherDate.month + this.opts.monthRangeValue;
            if (!date.month) {
                month = otherDate.month;
            }
            /** @type {?} */
            const day = otherDate.day < 1 || otherDate.day > daysInMonth[month - 1] ? 1 : otherDate.day;
            return this.utilService.isDisabledDate({ year, month, day }, this.opts) ? this.opts.disableSince : { year, month, day };
        }
        return date;
    }
    /**
     * @param {?} date
     * @return {?}
     */
    setTime(date) {
        const { dateFormat, monthLabels, dateRangeDatesDelimiter, closeSelectorOnDateSelect, returnFormat } = this.opts;
        if (date instanceof Date) {
            if (this.opts.showType !== 4 && !this.opts.dateRange) {
                /** @type {?} */
                let targetDate;
                if (this.opts.showTime) {
                    targetDate = {
                        year: date.getFullYear(),
                        month: date.getMonth() + 1,
                        day: date.getDate(),
                        hour: date.getHours(),
                        minute: date.getMinutes(),
                        second: date.getSeconds()
                    };
                }
                else {
                    targetDate = { year: date.getFullYear(), month: date.getMonth() + 1, day: date.getDate() };
                }
                /** @type {?} */
                const dateModel = this.utilService.getDateModel(targetDate, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
            else {
                // 启用周选择时  快捷按钮参数为单个日期
                /** @type {?} */
                const dateModel = this.utilService.getDateModel(null, this.utilService.getNowWeekTime(date), dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
                this.dateChanged(dateModel, closeSelectorOnDateSelect);
            }
        }
        else if (date instanceof Object && this.opts.dateRange) {
            /** @type {?} */
            let targetDateRange;
            const { begin, end } = date;
            if (!begin || !end) {
                return;
            }
            if (this.opts.showTime) {
                targetDateRange = {
                    begin: {
                        year: begin.getFullYear(),
                        month: begin.getMonth() + 1,
                        day: begin.getDate(),
                        hour: begin.getHours(),
                        minute: begin.getMinutes(),
                        second: begin.getSeconds()
                    },
                    end: {
                        year: end.getFullYear(),
                        month: end.getMonth() + 1,
                        day: end.getDate(),
                        hour: end.getHours(),
                        minute: end.getMinutes(),
                        second: end.getSeconds()
                    }
                };
            }
            else {
                targetDateRange = {
                    begin: { year: begin.getFullYear(), month: begin.getMonth() + 1, day: begin.getDate() },
                    end: { year: end.getFullYear(), month: end.getMonth() + 1, day: end.getDate() }
                };
            }
            /** @type {?} */
            const dateModel = this.utilService.getDateModel(null, targetDateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
            this.dateChanged(dateModel, closeSelectorOnDateSelect);
        }
        else {
            // console.warn('参数必须符合要求！');
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectCurrentWeek($event) {
        $event.stopPropagation();
        /** @type {?} */
        const firstDay = this.opts.firstDayOfWeek === 'su' ? '日' : '一';
        const { begin, end } = this.dateHlp.getNowWeekTime(new Date(), firstDay);
        /** @type {?} */
        const year = new Date().getFullYear();
        /** @type {?} */
        const weekNbr = this.utilService.getWeekNumber(begin);
        /** @type {?} */
        const showTime = this.opts.returnFormat && this.opts.returnFormat.toLocaleLowerCase().indexOf('hh:mm') > -1;
        this.selectedWeek = { weekNbr, year };
        if (showTime) {
            begin['hour'] = 0;
            begin['minute'] = 0;
            begin['second'] = 0;
            end['hour'] = 23;
            end['minute'] = 59;
            end['second'] = 59;
        }
        this.selectDate(begin);
        this.selectDate(end);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDynamicValueChanged($event) {
        this.btnDynamicDisabled = !$event;
    }
    /**
     * @param {?} cell
     * @param {?=} isSecondCalendar
     * @return {?}
     */
    onDayCellClickedForMultiDates(cell, isSecondCalendar) {
        if (cell.cmo === 1) {
            this.onPrevNavigateBtnClicked(true, isSecondCalendar);
        }
        else if (cell.cmo === 3) {
            this.onNextNavigateBtnClicked(true, isSecondCalendar);
        }
        const { dateFormat, monthLabels, maxSelected, closeSelectorOnDateSelect, showTime, returnFormat, selectedOrderBy } = this.opts;
        /** @type {?} */
        let selectedDates = [];
        /** @type {?} */
        const isSelected = this.selectedDates.find((/**
         * @param {?} n
         * @return {?}
         */
        n => this.utilService.isDateSame(n, cell.dateObj)));
        if (!isSelected) {
            if (!maxSelected || (maxSelected && this.selectedDates.length < maxSelected)) {
                selectedDates = [...this.selectedDates, Object.assign({}, cell.dateObj, { value: this.utilService.formatDate(cell.dateObj, dateFormat, monthLabels) })];
            }
            else {
                selectedDates = [...this.selectedDates];
                if (this.showNotify) {
                    this.showNotify();
                }
            }
        }
        else {
            selectedDates = this.selectedDates.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n !== isSelected));
        }
        selectedDates = this.utilService.orderSelectedDates(selectedDates, selectedOrderBy);
        this.selectedDates = selectedDates;
        this.resetMonthYearSelect(isSecondCalendar);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMultiDatesOkClicked($event) {
        $event.stopPropagation();
        this.multiDatesChanged(this.selectedDates);
    }
    /**
     * @param {?} removeItem
     * @return {?}
     */
    onMultiDateRemoved(removeItem) {
        this.selectedDates = this.selectedDates.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== removeItem));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMultiDateClear($event) {
        this.selectedDates = [];
    }
    /**
     * @return {?}
     */
    showGoBackToday() {
        const { monthNbr, year } = this.visibleMonth;
        const { year: currentYear, month } = this.getToday();
        return monthNbr != month || year != currentYear;
    }
    /**
     * @private
     * @param {?} year
     * @param {?} month
     * @return {?}
     */
    setCalendarView(year, month) {
        if (this.visibleMonth.year != year || this.visibleMonth.monthNbr != month) {
            this.visibleMonth = {
                monthTxt: this.opts.monthLabels[month],
                monthNbr: month,
                year: year,
                yearTxt: this.opts.yearTxt
            };
            this.selectedMonth.year = year;
            this.selectedMonth.monthNbr = month;
            //tfs638280
            this.selectMonth = false;
            this.selectYear = false;
            this.generateCalendar(month, year, true);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    gototodayView($event) {
        const { year, month } = this.getToday();
        this.setCalendarView(year, month);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelectDateClicked($event) {
        if (!$event) {
            return;
        }
        const { year, month } = $event;
        this.setCalendarView(year, month);
    }
    /**
     * @private
     * @param {?} length
     * @param {?=} step
     * @param {?=} start
     * @return {?}
     */
    makeRange(length, step = 1, start = 0) {
        step = Math.ceil(step);
        return new Array(Math.ceil(length / step))
            .fill(0)
            .map((/**
         * @param {?} _
         * @param {?} i
         * @return {?}
         */
        (_, i) => (i + start) * step));
    }
    /**
     * @private
     * @return {?}
     */
    buildHours() {
        /** @type {?} */
        let hourRanges = 24;
        /** @type {?} */
        let disabledHours = this.disabledHours && this.disabledHours();
        /** @type {?} */
        let startIndex = 0;
        /** @type {?} */
        let hourRange = this.makeRange(hourRanges, this.opts.hourStep, startIndex).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledHours && disabledHours.indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return hourRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    buildMinutes(timeObj) {
        /** @type {?} */
        let minuteRange = this.makeRange(60, this.opts.minuteStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledMinutes &&
                    this.disabledMinutes((/** @type {?} */ (timeObj.hours))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return minuteRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @private
     * @param {?} timeObj
     * @return {?}
     */
    buildSeconds(timeObj) {
        /** @type {?} */
        let secondRange = this.makeRange(60, this.opts.secondStep).map((/**
         * @param {?} r
         * @return {?}
         */
        r => {
            return {
                index: r,
                disabled: this.disabledSeconds &&
                    this.disabledSeconds((/** @type {?} */ (timeObj.hours)), (/** @type {?} */ (timeObj.minutes))).indexOf(r) !== -1
            };
        }));
        // 移除禁用的值
        return secondRange.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return !(n.disabled);
        }));
    }
    /**
     * @param {?} timeValue
     * @return {?}
     */
    checkTimeValues(timeValue) {
        if (timeValue) {
            /** @type {?} */
            let times = timeValue.split(':').map((/**
             * @param {?} n
             * @return {?}
             */
            n => parseInt(n, 10)));
            /** @type {?} */
            const timeObj = {
                hour: times[0],
                minute: times[1],
                second: times[2]
            };
            if (this.opts.hourStep > 1) {
                /** @type {?} */
                const hours = this.buildHours();
                if (!hours.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.hour))) {
                    timeObj.hour = 0;
                }
            }
            if (this.opts.minuteStep > 1) {
                /** @type {?} */
                const minutes = this.buildMinutes({ hours: timeObj.hour });
                if (!minutes.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.minute))) {
                    timeObj.minute = 0;
                }
            }
            if (this.opts.secondStep > 1) {
                /** @type {?} */
                const seconds = this.buildSeconds({ hours: timeObj.hour, minutes: timeObj.minute });
                if (!seconds.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.index === timeObj.second))) {
                    timeObj.second = 0;
                }
            }
            return `${timeObj.hour || '00'}:${timeObj.minute || '00'}:${timeObj.second || '00'}`;
        }
        return timeValue;
    }
    /**
     * @param {?} dateObj
     * @return {?}
     */
    checkTimeValue(dateObj) {
        if (!this.opts.showTime) {
            return;
        }
        if (this.opts.hourStep > 1) {
            /** @type {?} */
            const hours = this.buildHours();
            if (!hours.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.hour, 10)))) {
                dateObj.hour = 0;
            }
        }
        if (this.opts.minuteStep > 1) {
            /** @type {?} */
            const minutes = this.buildMinutes({ hours: dateObj.hour });
            if (!minutes.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.minute, 10)))) {
                dateObj.minute = 0;
            }
        }
        if (this.opts.secondStep > 1) {
            /** @type {?} */
            const seconds = this.buildSeconds({ hours: dateObj.hour, minutes: dateObj.minute });
            if (!seconds.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.index === parseInt('' + dateObj.second, 10)))) {
                dateObj.second = 0;
            }
        }
    }
}
CalendarComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datepicker-calendar',
                template: "<div class=\"f-datepicker-container\" #selectorEl *ngIf=\"!multiSelect\"\r\n    [ngStyle]=\"{\r\n        top: selectorPos.top + 'px',\r\n        left: selectorPos.left + 'px',\r\n        width: getWidth()\r\n    }\"\r\n    (keyup)=\"onCloseSelector($event)\"\r\n    tabindex=\"0\"\r\n    (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\"\r\n    [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\"\r\n>\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClicked($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours\"\r\n            [disabledMinutes]=\"disabledMinutes\"\r\n            [disabledSeconds]=\"disabledSeconds\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" *ngIf=\"opts.dateRange && opts.showType !== 4\">\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [visibleMonth]=\"visibleMonth_range\"\r\n            [selectMonth]=\"selectMonth_range\"\r\n            [selectYear]=\"selectYear_range\"\r\n            [prevViewDisabled]=\"prevViewDisabled_range\"\r\n            [nextViewDisabled]=\"nextViewDisabled_range\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled_range\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled_range\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked(true)\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked(true)\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-day-view\r\n            *ngIf=\"!selectMonth_range && !selectYear_range && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates_range\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (dayCellClicked)=\"onDayCellClicked($event, true)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave(true)\"\r\n        ></lib-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth_range\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, true)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave(true)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear_range\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years_range\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event, true)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked($event, true)\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked($event, true)\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event, true)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave(true)\"\r\n        ></lib-year-view>\r\n        <time-picker-panel\r\n            *ngIf=\"selectTime\"\r\n            [(ngModel)]=\"timeVlaue_range\"\r\n            [opened]=\"true\"\r\n            [inDatePicker]=\"true\"\r\n            [disabledHours]=\"disabledHours2\"\r\n            [disabledMinutes]=\"disabledMinutes2\"\r\n            [disabledSeconds]=\"disabledSeconds2\"\r\n            [format]=\"opts.timeFormat\"\r\n            [hourStep]=\"opts.hourStep || 1\"\r\n            [minuteStep]=\"opts.minuteStep || 1\"\r\n            [secondStep]=\"opts.secondStep || 1\"\r\n            #endTimeRef\r\n        >\r\n        </time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-content\" *ngIf=\"!opts.dateRange && opts.viewType === 'together' && opts.showTime\" style=\"width: 190px;margin-left: 10px;\">\r\n\r\n        <div style=\"height: 41px;\r\n        border-bottom: 1px solid #E4E7EF;\r\n        text-align: center;\r\n        line-height: 40px;\r\n        font-size: 16px;\r\n        font-weight: 500;margin-bottom: 15px;\">{{ timeVlaue }}</div>\r\n\r\n        <time-picker-panel\r\n        [(ngModel)]=\"timeVlaue\"\r\n        [opened]=\"true\"\r\n        [inDatePicker]=\"true\"\r\n        [disabledHours]=\"disabledHours\"\r\n        [disabledMinutes]=\"disabledMinutes\"\r\n        [disabledSeconds]=\"disabledSeconds\"\r\n        [selectCurrentTimeWhenNull]=\"false\"\r\n        [hourStep]=\"opts.hourStep || 1\"\r\n        [minuteStep]=\"opts.minuteStep || 1\"\r\n        [secondStep]=\"opts.secondStep || 1\"\r\n        [format]=\"opts.timeFormat\"></time-picker-panel>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\" *ngIf=\"opts.showTime || opts?.enableDynamic\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts?.enableDynamic\" style=\"text-align: left;\" (click)=\"onShowDynamicView($event)\">\r\n            {{ opts?.dynamicLocale.setting }}\r\n        </button>\r\n\r\n        <button (click)=\"onClickTimeBtn($event)\" class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"opts.showTime && opts.viewType === 'switch'\">\r\n            {{\r\n                selectTime\r\n                    ? opts.dateBtnText\r\n                        ? opts.dateBtnText\r\n                        : \"Select Date\"\r\n                    : opts.timeBtnText\r\n                    ? opts.timeBtnText\r\n                    : \"Select Time\"\r\n            }}\r\n        </button>\r\n        <button (click)=\"onClickOkBtn($event)\" class=\"btn btn-primary f-datepicker-makesure-btn\" *ngIf=\"opts.showTime\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;\" *ngIf=\"opts?.enableDynamic && !opts.showTime\">    \r\n            {{opts?.dynamicLocale.today}}\r\n        </button>\r\n    </div>\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"!opts.showTime && !opts?.enableDynamic && opts.showPresent && !opts.dateRange \">\r\n        <button (click)=\"onTodayClick($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ (opts.showType === 1 || opts.showType === 4) ? opts?.dynamicLocale.today :  opts.showType === 2 ? opts?.dynamicLocale.presentMonth : opts?.dynamicLocale.presentYear }}\r\n        </button>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: center;\" *ngIf=\"opts.showType === 4 && opts.showPresent\">\r\n        <button (click)=\"onSelectCurrentWeek($event)\" class=\"btn btn-link f-datepicker-makesure-btn\" style=\"margin-right: 0;height: 100%;width: 100px;\">    \r\n            {{ opts?.dynamicLocale.presentWeek }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>\r\n\r\n\r\n<div *ngIf=\"!multiSelect && opts?.enableDynamic\" class=\"f-datepicker-container\" #dynamicViewEle [ngStyle]=\"{\r\n    top: selectorPos.top + 'px',\r\n    left: (selectorPos.left) + 'px',\r\n    width: getWidth()\r\n}\"\r\nstyle=\"transition: all 0.2s ease 0s\"\r\n[style.display]=\"(opts?.enableDynamic && opts?.showDynamicView ) ? '': 'none'\"\r\n(click)=\"$event.stopPropagation()\">\r\n\r\n    <div class=\"f-datepicker-content\" >\r\n        \r\n        <div class=\"f-datepicker-header\" style=\"justify-content: unset;\" >\r\n            <div class=\"f-datepicker-prev-btn\" style=\"padding-left: 8px;position: absolute;\">\r\n                <button type=\"button\" class=\"f-datepicker-header-btn\" (click)=\"onShowDatePanel($event)\">\r\n                    <i class=\"k-icon k-i-arrow-chevron-left\"></i>\r\n                </button>\r\n            </div>\r\n            <div class=\"f-datepicker-monthYearText\" style=\"width: 100%;align-items: center;display: flex;justify-content: center;height: 40px;\">\r\n                {{opts.dynamicLocale.setting}}\r\n            </div>\r\n        </div>\r\n        <lib-dynamic-view #dynamicview [locale]=\"opts?.dynamicLocale\" (valueChange)=\"onDynamicValueChanged($event)\"\r\n            [data]=\"opts?.dynamicValue\" [futureMaxDays]=\"opts?.futureMaxDays || 30\" [previousMaxDays]=\"opts?.previousMaxDays || 30\"></lib-dynamic-view>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button (click)=\"onDynamicOkClick($event, dynamicview)\" class=\"btn btn-primary f-datepicker-makesure-btn\" [disabled]=\"btnDynamicDisabled\">\r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n\r\n\r\n<div class=\"f-datepicker-container\" tabindex=\"0\" #selectorEl *ngIf=\"multiSelect\"\r\n    [ngStyle]=\"{top: selectorPos.top + 'px',left: selectorPos.left + 'px',width: getWidth()}\"\r\n    (keyup)=\"onCloseSelector($event)\" (click)=\"onContainerClick($event)\"\r\n    style=\"transition: all 0.2s ease 0s;\" [style.display]=\"(opts?.enableDynamic ? !opts?.showDynamicView: true ) ? '': 'none'\">\r\n    <lib-selection-sidebar *ngIf=\"opts.shortcuts[0]\" [opts]=\"opts\" (setTime)=\"setTime($event)\"></lib-selection-sidebar>\r\n    <div class=\"f-datepicker-content\" [ngStyle]=\"{'margin-left': opts.shortcuts[0] ? '100px' : 0}\" >\r\n        <lib-selection-bar\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectMonth]=\"selectMonth\"\r\n            [selectYear]=\"selectYear\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            [prevDobViewDisabled]=\"prevDobViewDisabled\"\r\n            [nextDobViewDisabled]=\"nextDobViewDisabled\"\r\n            (prevNavigateBtnClicked)=\"onPrevNavigateBtnClicked($event)\"\r\n            (nextNavigateBtnClicked)=\"onNextNavigateBtnClicked($event)\"\r\n            (monthViewBtnClicked)=\"onMonthViewBtnClicked()\"\r\n            (yearViewBtnClicked)=\"onYearViewBtnClicked()\"\r\n        ></lib-selection-bar>\r\n\r\n        <lib-multi-day-view\r\n            *ngIf=\"!selectMonth && !selectYear && !selectTime\"\r\n            [opts]=\"opts\"\r\n            [dates]=\"dates\"\r\n            [weekDays]=\"weekDays\"\r\n            [selectedDates]=\"selectedDates\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [selectedWeek]=\"selectedWeek\"\r\n            (dayCellClicked)=\"onDayCellClickedForMultiDates($event)\"\r\n            (dayCellKeyDown)=\"onDayCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onDayCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onDayCellMouseLeave($event)\"\r\n            (weekClicked)=\"onWeekClicked($event)\"\r\n        ></lib-multi-day-view>\r\n        <lib-month-view\r\n            *ngIf=\"selectMonth\"\r\n            [opts]=\"opts\"\r\n            [months]=\"months\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            (monthCellClicked)=\"onMonthCellClicked($event, false)\"\r\n            (monthCellKeyDown)=\"onMonthCellKeyDown($event)\"\r\n            (onMouseEnter)=\"onMonthCellMouseEnter($event, false)\"\r\n            (onMouseLeave)=\"onMonthCellMouseLeave($event)\"\r\n        ></lib-month-view>\r\n\r\n        <lib-year-view\r\n            *ngIf=\"selectYear\"\r\n            [opts]=\"opts\"\r\n            [years]=\"years\"\r\n            [visibleMonth]=\"visibleMonth\"\r\n            [selectedDate]=\"selectedDate\"\r\n            [selectedDateRange]=\"selectedDateRange\"\r\n            [prevViewDisabled]=\"prevViewDisabled\"\r\n            [nextViewDisabled]=\"nextViewDisabled\"\r\n            (yearCellClicked)=\"onYearCellClicked($event)\"\r\n            (yearCellKeyDown)=\"onYearCellKeyDown($event)\"\r\n            (prevCellClicked)=\"onPrevNavigateBtnClicked()\"\r\n            (nextCellClicked)=\"onNextNavigateBtnClicked()\"\r\n            (onMouseEnter)=\"onYearCellMouseEnter($event)\"\r\n            (onMouseLeave)=\"onYearCellMouseLeave($event)\"\r\n        ></lib-year-view>\r\n    </div>\r\n    <div class=\"f-datepicker-content\" style=\"width: 198px;border-left: 1px solid #E4E7EF;\">\r\n        <multi-days [selectedDates]=\"selectedDates\" (clicked)=\"onSelectDateClicked($event)\" \r\n        (removed)=\"onMultiDateRemoved($event)\" (clear)=\"onMultiDateClear($event)\" [locales]=\"opts.mulstiDatesLocale\"></multi-days>\r\n    </div>\r\n\r\n    <div class=\"f-datepicker-commitBtn-wrapper\" style=\"justify-content: end;\">\r\n        <button class=\"btn btn-link f-datepicker-select-btn\" *ngIf=\"showGoBackToday()\" (click)=\"gototodayView($event)\"> {{ opts.mulstiDatesLocale.backtotoday || '\u56DE\u5230\u4ECA\u5929'}} </button>\r\n        <button class=\"btn btn-primary f-datepicker-makesure-btn\" (click)=\"onMultiDatesOkClicked($event)\">    \r\n            {{ opts.commitBtnText ? opts.commitBtnText : \"OK\" }}\r\n        </button>\r\n    </div>\r\n    <span class=\"arrow\"></span>\r\n</div>",
                providers: [UtilService],
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
CalendarComponent.ctorParameters = () => [
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: UtilService }
];
CalendarComponent.propDecorators = {
    selectorEl: [{ type: ViewChild, args: ['selectorEl',] }],
    styleEl: [{ type: ViewChild, args: ['styleEl',] }],
    endTimeRef: [{ type: ViewChild, args: ['endTimeRef',] }],
    dynamicViewEle: [{ type: ViewChild, args: ['dynamicViewEle',] }],
    position: [{ type: HostBinding, args: ['style.position',] }],
    dynamicViewShow: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CalendarComponent.prototype.selectorEl;
    /** @type {?} */
    CalendarComponent.prototype.styleEl;
    /** @type {?} */
    CalendarComponent.prototype.endTimeRef;
    /** @type {?} */
    CalendarComponent.prototype.dynamicViewEle;
    /** @type {?} */
    CalendarComponent.prototype.position;
    /** @type {?} */
    CalendarComponent.prototype.dynamicViewShow;
    /** @type {?} */
    CalendarComponent.prototype.dateHlp;
    /** @type {?} */
    CalendarComponent.prototype.opts;
    /** @type {?} */
    CalendarComponent.prototype.visibleMonth;
    /** @type {?} */
    CalendarComponent.prototype.visibleMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth;
    /** @type {?} */
    CalendarComponent.prototype.selectedMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectedDate;
    /** @type {?} */
    CalendarComponent.prototype.selectedDateRange;
    /** @type {?} */
    CalendarComponent.prototype.selectedWeek;
    /** @type {?} */
    CalendarComponent.prototype.weekDays;
    /** @type {?} */
    CalendarComponent.prototype.dates;
    /** @type {?} */
    CalendarComponent.prototype.dates_range;
    /** @type {?} */
    CalendarComponent.prototype.months;
    /** @type {?} */
    CalendarComponent.prototype.months_range;
    /** @type {?} */
    CalendarComponent.prototype.years;
    /** @type {?} */
    CalendarComponent.prototype.years_range;
    /** @type {?} */
    CalendarComponent.prototype.timeVlaue;
    /** @type {?} */
    CalendarComponent.prototype.timeVlaue_range;
    /** @type {?} */
    CalendarComponent.prototype.multiSelect;
    /** @type {?} */
    CalendarComponent.prototype.dayIdx;
    /** @type {?} */
    CalendarComponent.prototype.weekDayOpts;
    /** @type {?} */
    CalendarComponent.prototype.selectMonth;
    /** @type {?} */
    CalendarComponent.prototype.selectMonth_range;
    /** @type {?} */
    CalendarComponent.prototype.selectYear;
    /** @type {?} */
    CalendarComponent.prototype.selectYear_range;
    /** @type {?} */
    CalendarComponent.prototype.selectTime;
    /** @type {?} */
    CalendarComponent.prototype.dateChanged;
    /** @type {?} */
    CalendarComponent.prototype.calendarViewChanged;
    /** @type {?} */
    CalendarComponent.prototype.rangeDateSelection;
    /** @type {?} */
    CalendarComponent.prototype.multiDatesChanged;
    /** @type {?} */
    CalendarComponent.prototype.closedByEsc;
    /** @type {?} */
    CalendarComponent.prototype.selectorPos;
    /** @type {?} */
    CalendarComponent.prototype.scrollDiff;
    /** @type {?} */
    CalendarComponent.prototype.prevViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.nextViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.prevDobViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.nextDobViewDisabled;
    /** @type {?} */
    CalendarComponent.prototype.prevViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.nextViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.prevDobViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.nextDobViewDisabled_range;
    /** @type {?} */
    CalendarComponent.prototype.showNotify;
    /**
     * 多选
     * @type {?}
     */
    CalendarComponent.prototype.selectedDates;
    /** @type {?} */
    CalendarComponent.prototype.disabledHours;
    /** @type {?} */
    CalendarComponent.prototype.disabledMinutes;
    /** @type {?} */
    CalendarComponent.prototype.disabledSeconds;
    /** @type {?} */
    CalendarComponent.prototype.disabledHours2;
    /** @type {?} */
    CalendarComponent.prototype.disabledMinutes2;
    /** @type {?} */
    CalendarComponent.prototype.disabledSeconds2;
    /** @type {?} */
    CalendarComponent.prototype.btnDynamicDisabled;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.utilService;
}
//# sourceMappingURL=data:application/json;base64,