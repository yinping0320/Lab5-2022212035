/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
export class MultiSelectedDaysComponent {
    constructor() {
        this.locales = {};
        this.selectedDates = [];
        this.removed = new EventEmitter();
        this.clear = new EventEmitter();
        this.clicked = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onRemove($event, item) {
        $event.stopPropagation();
        this.removed.emit(item);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClear($event) {
        $event.stopPropagation();
        this.clear.emit();
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onSelectDateClick($event, item) {
        $event.stopPropagation();
        this.clicked.emit(item);
    }
}
MultiSelectedDaysComponent.decorators = [
    { type: Component, args: [{
                selector: 'multi-days',
                template: `
        <div class="d-flex mb-2 f-datepicker-multi-selectdays-header">
            <span style="font-size: 14px;" class="ml-3">{{ locales?.selected.split(',')[0] || '已选'}} <span style="font-weight: bold;font-size: 17px;">{{selectedDates.length}}</span> {{locales?.selected.split(',')[1] ||'天'}}</span>
            <span class="f-datepicker-multi-selectdays-clear" (click)="onClear($event)">{{ locales?.clearSelections || '清空'}}</span>
        </div>
        <div #selecteditems style="height: 230px;overflow-y: auto;" class="ml-3 multi-date-select win11Scroll nobtn" (wheel)="$event.stopPropagation()">
            <ul [style.width.px]="167">
                <li class="d-flex align-items-center f-datepicker-multi-selectdays" *ngFor="let d of selectedDates" (click)="onSelectDateClick($event, d)">
                    {{d.value}} <span class="f-icon f-icon-close remove" title="{{ locales?.delete || '删除'}}" (click)="onRemove($event, d)"></span>
                </li>
            </ul>
        </div>
    `,
                styles: [`
        .f-datepicker-multi-selectdays-header{
            height: 41px;border-bottom: 1px solid #E4E7EF;line-height: 40px;justify-content: space-between;
        }

        .f-datepicker-multi-selectdays {
            justify-content: space-between;color: #2D2F33;height: 30px;padding: 0 5px;border-radius: 6px;
            cursor: pointer;
        }

        .f-datepicker-multi-selectdays:hover {
            background: #F7F8FB;
        }

        .f-datepicker-multi-selectdays .remove {
            font-size: 12px;color: #C7CFDD;cursor: pointer;
        }

        .f-datepicker-multi-selectdays .remove:hover {
            color: #5f96f5;
        }

        .f-datepicker-multi-selectdays-clear {
            font-size: 13px;margin-right: 10px; color: #CCD1DD; cursor: pointer;
        }
        .f-datepicker-multi-selectdays-clear:hover {
            color: #5f96f5;
        }

        .mr14 {
            margin-right: 14px;
        }
        `]
            }] }
];
/** @nocollapse */
MultiSelectedDaysComponent.ctorParameters = () => [];
MultiSelectedDaysComponent.propDecorators = {
    locales: [{ type: Input }],
    selectedDates: [{ type: Input }],
    removed: [{ type: Output }],
    clear: [{ type: Output }],
    clicked: [{ type: Output }],
    selecteditemsEl: [{ type: ViewChild, args: ['selecteditems',] }]
};
if (false) {
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.locales;
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.selectedDates;
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.removed;
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.clear;
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.clicked;
    /** @type {?} */
    MultiSelectedDaysComponent.prototype.selecteditemsEl;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktZGF5cy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGVwaWNrZXIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9tdWx0aS1kYXktdmlldy9tdWx0aS1kYXlzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFpQixTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFzRGhJLE1BQU0sT0FBTywwQkFBMEI7SUFhbkM7UUFYUyxZQUFPLEdBQVEsRUFBRSxDQUFDO1FBRWxCLGtCQUFhLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzdCLFVBQUssR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBQzNCLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBTXZCLENBQUM7Ozs7SUFFakIsUUFBUTtJQUVSLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO0lBQ2xDLENBQUM7Ozs7OztJQUVELFFBQVEsQ0FBQyxNQUFrQixFQUFFLElBQUk7UUFDN0IsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDO1FBQ3pCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzVCLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLE1BQWtCO1FBQ3RCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQ3RCLENBQUM7Ozs7OztJQUVELGlCQUFpQixDQUFDLE1BQU0sRUFBRSxJQUFJO1FBQzFCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDOzs7WUF2RkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxZQUFZO2dCQUN0QixRQUFRLEVBQUU7Ozs7Ozs7Ozs7OztLQVlUO3lCQUVHOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztTQWdDQzthQUVSOzs7OztzQkFJSSxLQUFLOzRCQUVMLEtBQUs7c0JBQ0wsTUFBTTtvQkFDTixNQUFNO3NCQUNOLE1BQU07OEJBR04sU0FBUyxTQUFDLGVBQWU7Ozs7SUFSMUIsNkNBQTJCOztJQUUzQixtREFBNEI7O0lBQzVCLDZDQUF1Qzs7SUFDdkMsMkNBQXFDOztJQUNyQyw2Q0FBdUM7O0lBR3ZDLHFEQUF3RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IHNvcnRCeSB9IGZyb20gJ2xvZGFzaC1lcyc7XHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdtdWx0aS1kYXlzJyxcclxuICAgIHRlbXBsYXRlOiBgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImQtZmxleCBtYi0yIGYtZGF0ZXBpY2tlci1tdWx0aS1zZWxlY3RkYXlzLWhlYWRlclwiPlxyXG4gICAgICAgICAgICA8c3BhbiBzdHlsZT1cImZvbnQtc2l6ZTogMTRweDtcIiBjbGFzcz1cIm1sLTNcIj57eyBsb2NhbGVzPy5zZWxlY3RlZC5zcGxpdCgnLCcpWzBdIHx8ICflt7LpgIknfX0gPHNwYW4gc3R5bGU9XCJmb250LXdlaWdodDogYm9sZDtmb250LXNpemU6IDE3cHg7XCI+e3tzZWxlY3RlZERhdGVzLmxlbmd0aH19PC9zcGFuPiB7e2xvY2FsZXM/LnNlbGVjdGVkLnNwbGl0KCcsJylbMV0gfHwn5aSpJ319PC9zcGFuPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImYtZGF0ZXBpY2tlci1tdWx0aS1zZWxlY3RkYXlzLWNsZWFyXCIgKGNsaWNrKT1cIm9uQ2xlYXIoJGV2ZW50KVwiPnt7IGxvY2FsZXM/LmNsZWFyU2VsZWN0aW9ucyB8fCAn5riF56m6J319PC9zcGFuPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIDxkaXYgI3NlbGVjdGVkaXRlbXMgc3R5bGU9XCJoZWlnaHQ6IDIzMHB4O292ZXJmbG93LXk6IGF1dG87XCIgY2xhc3M9XCJtbC0zIG11bHRpLWRhdGUtc2VsZWN0IHdpbjExU2Nyb2xsIG5vYnRuXCIgKHdoZWVsKT1cIiRldmVudC5zdG9wUHJvcGFnYXRpb24oKVwiPlxyXG4gICAgICAgICAgICA8dWwgW3N0eWxlLndpZHRoLnB4XT1cIjE2N1wiPlxyXG4gICAgICAgICAgICAgICAgPGxpIGNsYXNzPVwiZC1mbGV4IGFsaWduLWl0ZW1zLWNlbnRlciBmLWRhdGVwaWNrZXItbXVsdGktc2VsZWN0ZGF5c1wiICpuZ0Zvcj1cImxldCBkIG9mIHNlbGVjdGVkRGF0ZXNcIiAoY2xpY2spPVwib25TZWxlY3REYXRlQ2xpY2soJGV2ZW50LCBkKVwiPlxyXG4gICAgICAgICAgICAgICAgICAgIHt7ZC52YWx1ZX19IDxzcGFuIGNsYXNzPVwiZi1pY29uIGYtaWNvbi1jbG9zZSByZW1vdmVcIiB0aXRsZT1cInt7IGxvY2FsZXM/LmRlbGV0ZSB8fCAn5Yig6ZmkJ319XCIgKGNsaWNrKT1cIm9uUmVtb3ZlKCRldmVudCwgZClcIj48L3NwYW4+XHJcbiAgICAgICAgICAgICAgICA8L2xpPlxyXG4gICAgICAgICAgICA8L3VsPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYCxcclxuICAgIHN0eWxlczogW1xyXG4gICAgICAgIGBcclxuICAgICAgICAuZi1kYXRlcGlja2VyLW11bHRpLXNlbGVjdGRheXMtaGVhZGVye1xyXG4gICAgICAgICAgICBoZWlnaHQ6IDQxcHg7Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkICNFNEU3RUY7bGluZS1oZWlnaHQ6IDQwcHg7anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmYtZGF0ZXBpY2tlci1tdWx0aS1zZWxlY3RkYXlzIHtcclxuICAgICAgICAgICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO2NvbG9yOiAjMkQyRjMzO2hlaWdodDogMzBweDtwYWRkaW5nOiAwIDVweDtib3JkZXItcmFkaXVzOiA2cHg7XHJcbiAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC5mLWRhdGVwaWNrZXItbXVsdGktc2VsZWN0ZGF5czpob3ZlciB7XHJcbiAgICAgICAgICAgIGJhY2tncm91bmQ6ICNGN0Y4RkI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZi1kYXRlcGlja2VyLW11bHRpLXNlbGVjdGRheXMgLnJlbW92ZSB7XHJcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogMTJweDtjb2xvcjogI0M3Q0ZERDtjdXJzb3I6IHBvaW50ZXI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAuZi1kYXRlcGlja2VyLW11bHRpLXNlbGVjdGRheXMgLnJlbW92ZTpob3ZlciB7XHJcbiAgICAgICAgICAgIGNvbG9yOiAjNWY5NmY1O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLmYtZGF0ZXBpY2tlci1tdWx0aS1zZWxlY3RkYXlzLWNsZWFyIHtcclxuICAgICAgICAgICAgZm9udC1zaXplOiAxM3B4O21hcmdpbi1yaWdodDogMTBweDsgY29sb3I6ICNDQ0QxREQ7IGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLmYtZGF0ZXBpY2tlci1tdWx0aS1zZWxlY3RkYXlzLWNsZWFyOmhvdmVyIHtcclxuICAgICAgICAgICAgY29sb3I6ICM1Zjk2ZjU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAubXIxNCB7XHJcbiAgICAgICAgICAgIG1hcmdpbi1yaWdodDogMTRweDtcclxuICAgICAgICB9XHJcbiAgICAgICAgYFxyXG4gICAgXVxyXG59KVxyXG5cclxuZXhwb3J0IGNsYXNzIE11bHRpU2VsZWN0ZWREYXlzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xyXG5cclxuICAgIEBJbnB1dCgpIGxvY2FsZXM6IGFueSA9IHt9O1xyXG5cclxuICAgIEBJbnB1dCgpIHNlbGVjdGVkRGF0ZXMgPSBbXTtcclxuICAgIEBPdXRwdXQoKSByZW1vdmVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsZWFyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGNsaWNrZWQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ3NlbGVjdGVkaXRlbXMnKSBzZWxlY3RlZGl0ZW1zRWw6IEVsZW1lbnRSZWY7XHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpOiB2b2lkIHtcclxuICAgIH1cclxuXHJcbiAgICBvblJlbW92ZSgkZXZlbnQ6IE1vdXNlRXZlbnQsIGl0ZW0pIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVkLmVtaXQoaXRlbSk7XHJcbiAgICB9XHJcblxyXG4gICAgb25DbGVhcigkZXZlbnQ6IE1vdXNlRXZlbnQpIHtcclxuICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5jbGVhci5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgb25TZWxlY3REYXRlQ2xpY2soJGV2ZW50LCBpdGVtKSB7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgIHRoaXMuY2xpY2tlZC5lbWl0KGl0ZW0pO1xyXG4gICAgfVxyXG59Il19