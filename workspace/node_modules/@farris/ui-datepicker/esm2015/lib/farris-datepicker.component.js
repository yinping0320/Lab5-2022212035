/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NotifyService } from '@farris/ui-notify';
import { DateTimeHelperService } from '@farris/ui-common/date';
import { Component, Input, EventEmitter, Output, ViewChild, forwardRef, ElementRef, HostListener, HostBinding, Injector, ViewContainerRef, ComponentFactoryResolver, Renderer2, ApplicationRef, ChangeDetectorRef } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { FarrisDatePickerDirective } from './farris-datepicker.input';
import { DefaultView, ShowType, CalToggle } from './enums/public-api';
import { UtilService, DefaultConfigService, DatepickerLocaleService, DatePickerService } from './services/public-api';
import { LocaleService } from '@farris/ui-locale';
import { differenceInSeconds, isDate, isValid, parse } from 'date-fns';
import { CalendarComponent } from './components/calendar/calendar.component';
import { CLICK, EMPTY_STR } from './constants/constants';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { ViewType } from './interfaces/my-options.interface';
/** @type {?} */
const FARRIS_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatepickerComponent)),
    multi: true
};
export class FarrisDatepickerComponent {
    /**
     * @param {?} el
     * @param {?} utilService
     * @param {?} defaultConfigService
     * @param {?} injector
     */
    constructor(el, utilService, defaultConfigService, injector) {
        this.el = el;
        this.utilService = utilService;
        this.defaultConfigService = defaultConfigService;
        this.injector = injector;
        this.cls = 'f-cmp-datepicker f-cmp-inputgroup';
        this.viewType = ViewType.Switch;
        // 是否禁用该组件
        this.disabled = false;
        // 是否只读
        this.readonly = false;
        // 是否只能选择数据，不可键入
        this.editable = true;
        // 是否使用日期范围输入模式
        this.dateRange = false;
        // 是否使用时间输入框
        this.showTime = false;
        this.hourStep = 1;
        this.minuteStep = 1;
        this.secondStep = 1;
        // 显示类型
        this.showType = ShowType.all;
        // 本地语言
        this.locale = 'zh-cn';
        // 是否使用默认值
        this.useDefault = false;
        this.returnType = 'String';
        // placeholder
        this.placeholder = '';
        this.beginPlaceholder = '';
        this.endPlaceholder = '';
        /**
         * 输入值变化后关闭选择面板。 默认为 true
         */
        this.whenValueChangedThenCloseSelectorPanel = true;
        // 需要高亮显示的日期
        this.highlightDates = [];
        // 禁用区域的日期开始时间
        this.disableDateRangesBegin = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用区域的日期结束时间
        this.disableDateRangesEnd = {
            year: 0,
            month: 0,
            day: 0
        };
        // 禁用的日期
        this.disableDates = [];
        // 一周中被禁用的日子
        this.disableWeekdays = [];
        // 被标记的日期
        this.markDates = [];
        // 被标记的日期的显示颜色
        this.markDatesColor = '#59a1ff';
        // 是否显示第几周
        this.showWeekNumbers = false;
        // 是否标记周末
        this.isMarkWeekends = false;
        // 被标记周末的显示颜色
        this.markWeekendsColor = '#59a1ff';
        // 日期范围模式下input的显示分割符合
        this.dateRangeDatesDelimiter = '~';
        // 配置左侧 sidebar 快捷键
        this.shortcuts = [];
        // 日期范围选择时，默认结束月份为当前月份 + monthRangeValue
        this.monthRangeValue = 1;
        /**
         * 启用动态日期值设置，默认 false
         */
        this.enableDynamic = false;
        /**
         * 允许设置过去最大天数
         */
        this.previousMaxDays = 30;
        /**
         * 允许设置未来最大天数
         */
        this.futureMaxDays = 30;
        this.showClear = true;
        /**
         * 显示今天，本年，本月 按钮
         */
        this.showPresent = false;
        /**
         * 每周起始日  可选值 mo：周一  su: 周日，默认为 mo周一
         */
        this.firstDayOfWeek = 'mo';
        // clear 事件
        this.clear = new EventEmitter();
        // valueChanged 事件
        this.valueChange = new EventEmitter();
        // focus 事件
        this.focus = new EventEmitter();
        // blur 事件
        this.blur = new EventEmitter();
        // beginValueChange
        this.beginValueChange = new EventEmitter();
        // endValueChange
        this.endValueChange = new EventEmitter();
        // PrevFocus dateRange 第一个日期
        this.PrevFocus = new EventEmitter();
        // NextFocus dateRange 第二个日期
        this.NextFocus = new EventEmitter();
        // close 事件
        this.close = new EventEmitter();
        /**
         * 启用多选，默认 false
         */
        this.multiSelect = false;
        this.separator = ',';
        /**
         * 允许选择日期的个数； 0 无限
         */
        this.maxSelected = 0;
        /**
         * 选中日期的排序方式，默认为 'none' 即不排序
         */
        this.selectedOrderBy = 'none';
        this.cRef = null;
        this._timeFormat = '';
        this._value = '';
        this._beginValue = '';
        this._endValue = '';
        this._initFinished = false;
        this._minDate = {
            year: 1840,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this._maxDate = {
            year: 10000,
            month: 1,
            day: 1,
            hour: 0,
            minute: 0,
            second: 0
        };
        this.selectedWeek = null;
        this.dateOpts = {};
        // 开始输入控件聚焦
        this.beginFocus = false;
        // 结束输入控件聚焦
        this.endFocus = false;
        // 整体聚焦
        this.totalFocus = false;
        // 是否字符超长显示Tip
        this.isActiveTip = false;
        this._realValue = null;
        this._realRangeValue = null;
        this.formatedValue = '';
        this.dtService = null;
        this._updateOn = 'change';
        // 日期选择后设置为 true， blur 事件将不会重复执行valueChanged；
        // 键盘修改时，blur 事件中会执行一次 valueChanged 后，将此值设为 false;
        this._valueChangeEmitted = false;
        this._mousedownEvent = null;
        this.closeCalendarHandler = null;
        this.cdr = null;
        /**
         * 缓存通过点击日历的数据，用于的格式化格式不标准时，格式化数据。
         */
        this._SELECT_DATE_ = null;
        this.dynamicText = '';
        this.dynamicValue = null;
        this.dynamicValueChange = new EventEmitter();
        this.dynamicViewChanged = new EventEmitter();
        this.onModelChange = (/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => { });
        this.onModelTouched = (/**
         * @return {?}
         */
        () => { });
        this.defaultConfig = this.defaultConfigService.getDefaultConfig();
        if (this.injector) {
            this.localeService = this.injector.get(LocaleService);
            this.dtService = this.injector.get(DateTimeHelperService);
            this.notifySer = this.injector.get(NotifyService, null);
            if (this.notifySer) {
                this.notifySer.config.position = 'top-center';
            }
        }
        this.localeConfig = new DatepickerLocaleService();
        this.vcRef = this.injector.get(ViewContainerRef, null);
        this.cfr = this.injector.get(ComponentFactoryResolver, null);
        this.renderer = this.injector.get(Renderer2, null);
        this._applicationRef = this.injector.get(ApplicationRef);
        this.cdr = this.injector.get(ChangeDetectorRef);
        this.overLayService = new OverLayHiddenService();
        this.commonUtils = this.injector.get(CommonUtils, new CommonUtils());
    }
    // 日期格式
    /**
     * @param {?} value
     * @return {?}
     */
    set dateFormat(value) {
        if (value) {
            // value 格式形如 yyyy-MM-dd HH:mm:ss
            // const formArr = 'yyyy-MM-dd HH:mm:ss'.split(' ');
            value = value.replace(/^\s+|\s+$/g, ''); // 去掉左右空格
            value = value.replace(/\s+/g, ' '); // 将中间的多个连续空格，替换为1个空格
            // 将中间的多个连续空格，替换为1个空格
            /** @type {?} */
            const formArr = value.split(' ');
            this._dateFormat = formArr[0];
            // 处理'yyyy-MM-dd h:mm:ss a'即12小时显示的情况
            if (formArr.length === 3) {
                this._timeFormat = 'h:mm:ss a';
            }
            else {
                this._timeFormat = formArr[1];
            }
        }
        // this._dateFormat = this._dateFormat ? (this._dateFormat + '').replace(/m/g, 'M') : '';
        if (this._dateFormat) {
            /** @type {?} */
            const mm = ['yyyy-mm', 'yyyy/mm', 'yyyy年mm', 'mm/yyyy'];
            /** @type {?} */
            const _mm = mm.find((/**
             * @param {?} m
             * @return {?}
             */
            m => this._dateFormat.includes(m)));
            if (_mm) {
                this._dateFormat = this._dateFormat.replace(_mm, _mm.replace(/m/g, 'M'));
            }
            if (this._timeFormat && this.showTime) {
                this._dateFormat += ' ' + this._timeFormat;
                if (this._timeFormat.indexOf('时') > -1) {
                    this._timeFormat = this._timeFormat.replace('时', ':').replace('分', ':').replace('秒', '');
                }
            }
        }
        // this.dateOpts.dateFormat = this._dateFormat;
    }
    /**
     * @return {?}
     */
    get dateFormat() {
        return this._dateFormat;
    }
    // 最小日期
    // 加入接收时分秒功能
    /**
     * @param {?} val
     * @return {?}
     */
    set minDate(val) {
        /** @type {?} */
        const type = Object.prototype.toString.call(val);
        /** @type {?} */
        let date;
        switch (type) {
            case '[object Date]':
                date = val;
                break;
            case '[object String]':
                if (val) {
                    date = new Date(val);
                }
                else {
                    date = new Date(1840, 1, 1, 0, 0, 0);
                }
                break;
            case '[object Null]':
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
            // case null:
            //     date = new Date(1840, 1, 1, 0, 0, 0);
            //     break;
            case '[object Undefined]':
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
            default:
                date = new Date(1840, 1, 1, 0, 0, 0);
                break;
        }
        if (isValid(date)) {
            /** @type {?} */
            const year = date.getFullYear();
            /** @type {?} */
            const month = date.getMonth() + 1;
            /** @type {?} */
            const day = date.getDate();
            /** @type {?} */
            const hour = date.getHours();
            /** @type {?} */
            const minute = date.getMinutes();
            /** @type {?} */
            const second = date.getSeconds();
            this._minDate = { year, month, day, hour, minute, second };
        }
    }
    /**
     * @return {?}
     */
    get minDate() {
        return this._minDate;
    }
    // 最大日期
    // 加入接收时分秒功能
    /**
     * @param {?} val
     * @return {?}
     */
    set maxDate(val) {
        /** @type {?} */
        const type = Object.prototype.toString.call(val);
        /** @type {?} */
        let date;
        switch (type) {
            case '[object Date]':
                date = val;
                break;
            case '[object String]':
                if (val) {
                    date = new Date(val);
                }
                else {
                    date = new Date(10000, 1, 1, 0, 0, 0);
                }
                break;
            case '[object Null]':
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
            // case null:
            //     date = new Date(10000, 1, 1, 0, 0, 0);
            //     break;
            case '[object Undefined]':
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
            default:
                date = new Date(10000, 1, 1, 0, 0, 0);
                break;
        }
        if (isValid(date)) {
            /** @type {?} */
            const year = date.getFullYear();
            /** @type {?} */
            const month = date.getMonth() + 1;
            /** @type {?} */
            const day = date.getDate();
            /** @type {?} */
            const hour = date.getHours();
            /** @type {?} */
            const minute = date.getMinutes();
            /** @type {?} */
            const second = date.getSeconds();
            this._maxDate = { year, month, day, hour, minute, second };
        }
    }
    /**
     * @return {?}
     */
    get maxDate() {
        return this._maxDate;
    }
    // 日期范围：开始日期
    /**
     * @param {?} value
     * @return {?}
     */
    set beginValue(value) {
        value = value ? value : '';
        if (value instanceof Date) {
            value = this.dateTo(value);
            this.returnType = 'Date';
        }
        else {
            if (value.indexOf('T') > -1) {
                value = value.replace('T', ' ');
            }
            this.returnType = 'String';
        }
        this._beginValue = value;
        if (this._initFinished) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
    }
    /**
     * @return {?}
     */
    get beginValue() {
        return this.dateFrom(this._beginValue, true);
    }
    // 日期范围：结束日期
    /**
     * @param {?} value
     * @return {?}
     */
    set endValue(value) {
        value = value ? value : '';
        if (value instanceof Date) {
            value = this.dateTo(value);
            this.returnType = 'Date';
        }
        else {
            if (value.indexOf('T') > -1) {
                value = value.replace('T', ' ');
            }
            this.returnType = 'String';
        }
        this._endValue = value;
        if (this._initFinished) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
    }
    /**
     * @return {?}
     */
    get endValue() {
        return this.dateFrom(this._endValue, true);
    }
    /**
     * @param {?} v
     * @return {?}
     */
    set value(v) {
        this._value = v ? v : '';
    }
    /**
     * @return {?}
     */
    get value() {
        return this._value;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this._ngControl = this.injector.get(NgControl, null);
        this.initPlaceholder();
        this.mergeDateOptions();
        if (this._beginValue && this._endValue) {
            this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        }
        this._initFinished = true;
        this.datePicekrService = new DatePickerService(this.dateOpts);
    }
    /**
     * @private
     * @return {?}
     */
    initPlaceholder() {
        if (this.localeService) {
            this.locale = this.localeService.getValue('locale');
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
            this.placeholder = this.placeholder
                ? this.placeholder
                : this.localDateOpts.placeholder
                    ? this.localDateOpts.placeholder
                    : '请选择日期';
            if (!this.beginPlaceholder) {
                this.beginPlaceholder = this.localDateOpts.range.begin || this.placeholder;
            }
            if (!this.endPlaceholder) {
                this.endPlaceholder = this.localDateOpts.range.end || this.placeholder;
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    mergeDateOptions() {
        this.dateOpts = Object.assign({}, this.defaultConfig, this.buildOptions());
        if (this.dateOpts.dateFormat) {
            if (!this._dateFormat) {
                this.dateFormat = this.dateOpts.dateFormat;
                this.dateOpts.dateFormat = this.dateFormat;
            }
        }
        if (this.showTime && !this._timeFormat) {
            this._timeFormat = 'HH:mm:ss';
            this.dateOpts.timeFormat = this._timeFormat;
        }
        if (this.dateOpts.returnFormat) {
            if (!this.returnFormat) {
                this.returnFormat = this.dateOpts.returnFormat;
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.locale && changes.locale.isFirstChange()) {
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (changes) {
            /** @type {?} */
            let flag = false;
            /** @type {?} */
            const inputs = ['showTime', 'showType', 'dateRange', 'maxDate', 'minDate', 'monthRangeValue', 'maxSelected', 'separator', 'selectedOrderBy'];
            Object.keys(changes).forEach((/**
             * @param {?} e
             * @return {?}
             */
            e => {
                if (!changes[e].isFirstChange() && (this.dateOpts[e] || inputs.includes(e))) {
                    flag = true;
                }
            }));
            if (flag) {
                this.dateOpts = Object.assign({}, (this.dateOpts || this.defaultConfig), this.buildOptions());
            }
        }
        if (changes.readonly &&
            !changes.readonly.currentValue &&
            !changes.readonly.firstChange &&
            !this.value &&
            this.useDefault) {
            this.setDefaultValue();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this._ngControl && this._ngControl.control) {
            this._updateOn = this._ngControl.control.updateOn;
        }
        this._timer = setTimeout((/**
         * @return {?}
         */
        () => {
            this.setDefaultValue();
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        clearTimeout(this._timer);
        this.closeSelector();
        this.overLayService.destory(this.el.nativeElement);
        this.overLayService = null;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseEnter(event) {
        if (this.value && !this.readonly && !this.disabled) {
            if (this.value && this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = '';
            }
            if (this.dateOpts.dateRange) {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 300;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 190;
                }
            }
            else {
                if (this.dateOpts.showTime) {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 170;
                }
                else {
                    this.isActiveTip = this.el.nativeElement.getBoundingClientRect().width < 120;
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseLeave(event) {
        if (!this.readonly && !this.disabled && this.clearIcon) {
            this.clearIcon.nativeElement.style.visibility = 'hidden';
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onBlur(e) {
        this.totalFocus = false;
        /** @type {?} */
        let _runblur = true;
        if (this.value) {
            try {
                this.value = this.transform(this.value);
                /** @type {?} */
                const valid = this._isValid(this.value);
                if (!valid) {
                    this.clearDate();
                    _runblur = false;
                }
            }
            catch (e) {
                this.clearDate();
                _runblur = false;
            }
        }
        /** @type {?} */
        const updateModel = (/**
         * @return {?}
         */
        () => {
            if (!this._valueChangeEmitted) {
                /** @type {?} */
                const realDate = this.dateFrom(this.transform(this.value, this.returnFormat));
                this.onNgModelChange(this.value, realDate, true);
                this.onModelTouched();
            }
        });
        if (this.editable && _runblur) {
            if (this['inDatagrid']) {
                updateModel();
            }
            else {
                setTimeout(updateModel, 250);
            }
        }
        this._valueChangeEmitted = false;
        if (this._mousedownEvent) {
            this._mousedownEvent();
            this._mousedownEvent = null;
        }
        this.blur.emit();
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onFocus(e) {
        this.totalFocus = true;
        this.registerMouseDownHandle();
        this.focus.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onInputClick(event) {
        event.stopPropagation();
        if (!this.readonly && !this.disabled) {
            this.registerMouseDownHandle();
            this.toggleCalendar(false);
        }
    }
    /**
     * @private
     * @return {?}
     */
    registerMouseDownHandle() {
        if (!this._mousedownEvent) {
            this._mousedownEvent = this.renderer.listen(document, 'mousedown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e.target.className.toString().indexOf('SVGAnimatedString') > -1) {
                    return;
                }
                if (e.target.closest('.dynamic-view-item')) {
                    return;
                }
                if (e.target.closest('.f-cmp-datepicker') ||
                    e.target.closest('.f-datepicker-container') || e.target.className.indexOf('f-icon-date') > -1) {
                    if (this.dateInput) {
                        this.renderer.setStyle(this.dateInput.nativeElement, 'unselectable', 'on');
                    }
                    e.preventDefault();
                }
            }));
        }
    }
    /**
     * @return {?}
     */
    setDefaultValue() {
        if (!this.readonly && !this.value && this.useDefault) {
            /** @type {?} */
            const now = new Date();
            /** @type {?} */
            let nowValue = '';
            if (!this.dateOpts.dateRange) {
                nowValue = this.dateTo(now);
            }
            else {
                nowValue =
                    this.dateTo(now) +
                        this.dateRangeDatesDelimiter +
                        this.dateTo(new Date(now.setMonth(now.getMonth() + 1)));
            }
            if (this.datePicekrService.validate(nowValue)) {
                this.value = nowValue;
                this.onNgModelChange(this.value);
                this.onModelTouched();
            }
        }
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    clearDynamicDate($event = null) {
        if ($event) {
            $event.stopPropagation();
        }
        this.dateOpts.dynamicValueChanged(null);
    }
    /**
     * @param {?=} $event
     * @return {?}
     */
    clearDate($event = null) {
        if ($event) {
            $event.stopPropagation();
        }
        this._SELECT_DATE_ = null;
        if (!this.disabled) {
            this._realRangeValue = null;
            this._realValue = null;
            this.selectedWeek = null;
            this.onDateChanged({
                isRange: this.dateOpts.dateRange,
                singleDate: {
                    date: this.utilService.resetDate(),
                    jsDate: null,
                    formatted: EMPTY_STR,
                    epoc: 0
                },
                dateRange: {
                    beginDate: this.utilService.resetDate(),
                    beginJsDate: null,
                    beginEpoc: 0,
                    endDate: this.utilService.resetDate(),
                    endJsDate: null,
                    endEpoc: 0,
                    formatted: EMPTY_STR
                }
            });
            this.closeSelector(CalToggle.CloseByCalBtn);
            this.onModelChange(null);
            this.clear.emit();
            if (this.clearIcon) {
                this.clearIcon.nativeElement.style.visibility = 'hidden';
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSingleInputNgModelChange($event) {
        this.value = $event || '';
        this._realValue = this.value ? this.dateFrom($event) : '';
        this.closeSelector();
    }
    /**
     * @param {?} value
     * @param {?=} realdate
     * @param {?=} emitValueChange
     * @return {?}
     */
    onNgModelChange(value, realdate = null, emitValueChange = false) {
        // this.value = value;
        if (this.dateRange || this.showType == ShowType.selectWeek) {
            /** @type {?} */
            const tmpArr = value ? value.split(this.dateRangeDatesDelimiter) : ['', ''];
            /** @type {?} */
            const _beginValue = this.transform(tmpArr[0], this.returnFormat);
            /** @type {?} */
            const _endValue = this.transform(tmpArr[1], this.returnFormat);
            this._beginValue = this.transform(tmpArr[0]);
            this._endValue = this.transform(tmpArr[1]);
            value = _beginValue && _endValue ? _beginValue + this.dateRangeDatesDelimiter + _endValue : '';
            this._realRangeValue = value;
            this.onModelChange(value);
            this.cdr.detectChanges();
            this.beginValueChange.emit(this._beginValue);
            this.endValueChange.emit(this._endValue);
            /** @type {?} */
            const p = {
                date: null,
                formatted: this.value,
                returnFormatted: this._realRangeValue,
                cmpRef: this
            };
            this.valueChange.emit(p);
        }
        else {
            if (value === '') {
                this.value = '';
                this._onModelChange(null, emitValueChange);
                return;
            }
            if (realdate) {
                this._realValue = this.getRealReturnFormatted(realdate);
                this._onModelChange(this._realValue, emitValueChange);
                if (this.dateInput && this.dateInput.nativeElement.value !== this.value) {
                    this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                }
            }
            else {
                if (this._isValid(value)) {
                    this._realValue = this.getRealReturnFormatted(realdate);
                    if (this.dateInput) {
                        this.renderer.setProperty(this.dateInput.nativeElement, 'value', this.value);
                    }
                    this._onModelChange(this._realValue, emitValueChange);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} realValue
     * @param {?} emit
     * @return {?}
     */
    _onModelChange(realValue, emit) {
        this._realValue = realValue;
        this.onModelChange(realValue);
        if (emit) {
            /** @type {?} */
            const p = {
                date: this.utilService.isDateValid(this.value, this.dateOpts, true),
                formatted: this.value,
                returnFormatted: realValue,
                cmpRef: this
            };
            if (this.valueChange.observers.length) {
                if (this.whenValueChangedThenCloseSelectorPanel) {
                    this.closeSelector();
                }
                this.valueChange.emit(p);
            }
        }
    }
    /**
     * @private
     * @param {?} realdate
     * @return {?}
     */
    getRealReturnFormatted(realdate) {
        if (realdate) {
            if (this.returnType === 'Date') {
                return realdate;
            }
            else {
                if (this.returnFormat) {
                    return this.dtService.formatTo(realdate, this.returnFormat);
                }
                return realdate;
            }
        }
        else {
            return this.dateFrom(this._realValue || this.value) || '';
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateRangeInputBlur(event) {
        this.setValue(this._beginValue + this.dateRangeDatesDelimiter + this._endValue);
        this.onNgModelChange(this._realRangeValue || this.value);
    }
    /**
     * @return {?}
     */
    openCalendar() {
        if (this.disabled) {
            return;
        }
        /** @type {?} */
        let val = this._realValue;
        if (!this.multiSelect) {
            if (this.dateRange || this.showType == ShowType.selectWeek) {
                val = this._realRangeValue;
            }
            else {
                if (this.returnType === 'Date') {
                    val = this.transform(val, this.returnFormat);
                }
            }
        }
        if (this.cRef === null) {
            this.cRef = this.calendarRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
            this.datePicekrService.registerScrollEvent((/**
             * @return {?}
             */
            () => {
                this.closeSelector();
            }));
            this.cRef.instance.dateHlp = this.dtService;
            if (this.showType === 4 && this.selectedWeek) {
                this.cRef.instance.selectedWeek = this.selectedWeek;
            }
            if (this.multiSelect) {
                this.cRef.instance.multiDatesChanged = (/**
                 * @param {?} dates
                 * @return {?}
                 */
                (dates) => {
                    this.value = dates.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.value)).join(this.separator);
                    this._realValue = dates.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => this.dtService.formatTo(`${n.year}-${n.month}-${n.day}`, this.returnFormat))).join(this.separator);
                    this.multiSelectedChanged();
                });
                this.cRef.instance.showNotify = (/**
                 * @return {?}
                 */
                () => {
                    /** @type {?} */
                    const msg = this.localDateOpts.message['102'].replace('${0}', this.maxSelected);
                    if (this.notifySer) {
                        this.notifySer.warning(msg);
                    }
                    else {
                        alert(msg);
                    }
                });
            }
            this.cRef.instance.initialize(this.dateOpts, '', this.datePicekrService.getSelectorPosition(this.el.nativeElement, this.cRef), val, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            (dm, close) => {
                if (this.dateOpts.dateRange && this.showTime && dm.dateRange.endJsDate < dm.dateRange.beginJsDate) {
                    // const { year: beginYear, month: beginMonth,  day: beginDay  } = {...dm.dateRange.beginDate};
                    // const { year: endYear, month: endMonth,  day: endDay  } = {...dm.dateRange.endDate};
                    // error message:  The end time must not be earlier than the start time
                    // error message:  結束時間不得早于開始時間
                    /** @type {?} */
                    const msg = this.localDateOpts.message['101'];
                    if (this.notifySer) {
                        this.notifySer.warning(msg);
                    }
                    else {
                        alert(msg);
                    }
                    return;
                }
                this.selectedWeek = this.cRef.instance.selectedWeek;
                this.onDateChanged(dm);
                if (close) {
                    this.closeSelector(CalToggle.CloseByDateSel);
                }
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            (cvc) => {
                // this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            (rds) => {
                // this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            () => {
                this.closeSelector(CalToggle.CloseByEsc);
            }));
            this.cRef.instance.dynamicViewShow.subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                /** @type {?} */
                const t = Object.assign(e, { dynamicValue: this.dynamicValue, singleValue: this._realValue, instance: this });
                this.dynamicViewChanged.emit(t);
            }));
            // this.cdr.detectChanges();
        }
        else {
            this.datePicekrService.appendSelector(this.cRef.location.nativeElement);
        }
        this.overLayService.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const t = e.target;
            /** @type {?} */
            const notClose = (this.cRef && this.cRef.location.nativeElement.contains(t)) ||
                t.closest('.multi-date-select') || (t.className && t.className.indexOf('multi-date-select') > -1);
            if (notClose) {
                return false;
            }
            this.closeSelector();
        }), { onlyTopWindow: true });
        this.cRef.changeDetectorRef.detectChanges();
        // this.preventClose = false;
    }
    /**
     * @param {?=} reason
     * @return {?}
     */
    closeSelector(reason) {
        if (this.cRef !== null) {
            this.calendarRef.remove(this.calendarRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            // this.cdr.detectChanges();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container.childElementCount) {
                container.remove();
            }
            this.renderer.setStyle(container, 'pointer-events', '');
        }
        this.totalFocus = false;
        if (this.dateOpts.dateRange) {
            this.beginFocus = false;
            this.endFocus = false;
        }
        if (this.closeCalendarHandler) {
            this.closeCalendarHandler();
            this.closeCalendarHandler = null;
        }
        if (this.datePicekrService) {
            this.datePicekrService.removeMouseEvent();
        }
        this.overLayService.destory(this.el.nativeElement);
    }
    /**
     * @param {?} close
     * @param {?=} emit
     * @return {?}
     */
    toggleCalendar(close, emit = true) {
        if (this.disabled) {
            this.totalFocus = false;
            if (this.dateOpts.dateRange) {
                this.beginFocus = false;
                this.endFocus = false;
            }
            return;
        }
        if (this.cRef === null) {
            if (!this.closeCalendarHandler) {
                this.closeCalendarHandler = this.renderer.listen(document, CLICK, (/**
                 * @return {?}
                 */
                () => this.closeSelector(CalToggle.CloseByOutClick)));
            }
            this.totalFocus = true;
            this.openCalendar();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
            /** @type {?} */
            const zindex = this.commonUtils.getFloatingLayerIndex();
            this.renderer.setStyle(container, 'zIndex', zindex);
        }
        else {
            /** @type {?} */
            let flag = true;
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => {
                        if (el === this.cRef.location.nativeElement) {
                            flag = false;
                        }
                    }));
                }
            }
            if (flag) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.totalFocus = true;
                this.openCalendar();
            }
            else {
                this.totalFocus = false;
                if (this.dateOpts.dateRange) {
                    this.beginFocus = false;
                    this.endFocus = false;
                }
                // document.removeEventListener(CLICK, this.onClickHidden);
                close && this.closeSelector(CalToggle.CloseByCalBtn);
                // this.renderer.setStyle(container, 'pointer-events', '')
                if (emit) {
                    this.close.emit();
                }
            }
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onDateChanged(event) {
        this._SELECT_DATE_ = event;
        /** @type {?} */
        let valChangeParams = '';
        if (event.singleDate) {
            this.value = event.singleDate.formatted;
            this.formatedValue = event.singleDate.formatted;
            /** @type {?} */
            const returnFormatted = this.getRealReturnFormatted(event.singleDate.jsDate);
            valChangeParams = Object.assign({}, event.singleDate, { formatted: event.singleDate.formatted, returnFormatted });
            const { year, month, day, hour, minute, second } = event.singleDate.date;
            if (month && (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1)) {
                /** @type {?} */
                const nd = new Date(year || new Date().getFullYear(), month - 1, day || 1, hour || 0, minute || 0, second || 0);
                event.singleDate.jsDate = nd;
            }
            let { year: minYear, month: minMonth, day: minDay, hour: minHour, minute: minMinute, second: minSecond } = this.minDate;
            minMonth = this.utilService.padStartZero(minMonth);
            minDay = this.utilService.padStartZero(minDay);
            minHour = this.utilService.padStartZero(minHour);
            minMinute = this.utilService.padStartZero(minMinute);
            minSecond = this.utilService.padStartZero(minSecond);
            /** @type {?} */
            const MIN_DATE = new Date(`${minYear}-${minMonth}-${minDay} ${minHour}:${minMinute}:${minSecond}`);
            if (this.minDate.year !== 1840) {
                if (differenceInSeconds(MIN_DATE, event.singleDate.jsDate) > 0) {
                    event.singleDate.jsDate = MIN_DATE;
                    this.value = this.transform(MIN_DATE);
                }
            }
            else if (this.maxDate.year !== 10000) {
                let { year: maxYear, month: maxMonth, day: maxDay, hour: maxHour, maxute: maxMinute, second: maxSecond } = this.maxDate;
                maxMonth = this.utilService.padStartZero(maxMonth);
                maxDay = this.utilService.padStartZero(maxDay);
                maxHour = this.utilService.padStartZero(maxHour);
                maxMinute = this.utilService.padStartZero(maxMinute);
                maxSecond = this.utilService.padStartZero(maxSecond);
                /** @type {?} */
                const MAX_DATE = new Date(`${maxYear}-${maxMonth}-${maxDay} ${maxHour}:${maxMinute}:${maxSecond}`);
                if (event.singleDate.date.year === 1840 || differenceInSeconds(MIN_DATE, event.singleDate.jsDate) === 0 || differenceInSeconds(MAX_DATE, event.singleDate.jsDate) < 0) {
                    event.singleDate.jsDate = MAX_DATE;
                    this.value = this.transform(MAX_DATE);
                }
            }
            this.onNgModelChange(returnFormatted, event.singleDate.jsDate);
        }
        else if (event.dateRange) {
            this.value = event.dateRange.formatted;
            this.formatedValue = event.dateRange.formatted;
            /** @type {?} */
            const returnFormatted = event.dateRange.returnFormatted;
            // let returnFormatted = this.dateFrom(event.dateRange.returnFormatted);
            valChangeParams = Object.assign({}, event.dateRange, { formatted: event.dateRange.formatted, returnFormatted });
            this.onNgModelChange(returnFormatted, event.dateRange);
        }
        this.onModelTouched();
        this._valueChangeEmitted = true;
        this.valueChange.emit(valChangeParams);
    }
    /**
     * @private
     * @return {?}
     */
    checkMultiSelectedOption() {
        if (this.multiSelect) {
            this.showTime = false;
            this.showType = ShowType.all;
            this.dateRange = false;
            this.enableDynamic = false;
            // 返回格式必须包括年月日
            /** @type {?} */
            const fmtList = ['yyyy-MM-dd', 'yyyy/MM/dd', 'MM/dd/yyyy', 'yyyy年MM月dd日', 'yyyyMMdd'];
            if (!fmtList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n === this.returnFormat))) {
                this.returnFormat = 'yyyy-MM-dd';
            }
            if (!fmtList.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n === this.dateFormat))) {
                this.dateFormat = 'yyyy-MM-dd';
            }
        }
    }
    /**
     * @return {?}
     */
    buildOptions() {
        /** @type {?} */
        let dateOpts;
        if (!this.localDateOpts) {
            this.localDateOpts = this.localeConfig.getLocaleOptions(this.locale);
        }
        if (this.showType === ShowType.noDateAndMonth) {
            this.localDateOpts.dateFormat = 'yyyy';
            this.localDateOpts.returnFormat = 'yyyy';
        }
        // 检查是否具备启用日期多选的条件
        this.checkMultiSelectedOption();
        /** @type {?} */
        const _showTime = (Number(this.showType) === ShowType.all) ? this.showTime : false;
        dateOpts = {
            dateRange: this.dateRange,
            showTime: _showTime,
            showType: Number(this.showType),
            dateFormat: this.dateFormat ? this.dateFormat : this.localDateOpts.dateFormat,
            returnFormat: this.returnFormat ? this.returnFormat : this.localDateOpts.returnFormat,
            minYear: this._minDate.year,
            maxYear: this._maxDate.year,
            highlightDates: this.highlightDates,
            disableDates: this.disableDates,
            showWeekNumbers: this.showWeekNumbers,
            disableDateRanges: [
                {
                    begin: this.disableDateRangesBegin,
                    end: this.disableDateRangesEnd
                }
            ],
            disableUntil: this._minDate,
            disableSince: this._maxDate,
            disableWeekdays: this.disableWeekdays,
            markDates: [
                {
                    dates: this.markDates,
                    color: this.markDatesColor
                }
            ],
            markWeekends: {
                marked: this.isMarkWeekends,
                color: this.markWeekendsColor
            },
            dateRangeDatesDelimiter: this.dateRangeDatesDelimiter,
            shortcuts: this.shortcuts,
            timeFormat: this._timeFormat,
            monthRangeValue: this.monthRangeValue,
            viewType: this.viewType,
            enableDynamic: this.enableDynamic,
            dynamicValue: this.dynamicValue,
            dynamicValueChanged: (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.dynamicValue = e;
                this.dynamicText = e ? e.text : '';
                this.dateOpts.dynamicValue = e;
                this.dynamicValueChange.emit(e);
                this.closeSelector();
            }),
            previousMaxDays: this.previousMaxDays,
            futureMaxDays: this.futureMaxDays,
            dynamicLocale: this.localDateOpts.dynamicLocale,
            mulstiDatesLocale: this.localDateOpts.mulstiDatesLocale,
            showPresent: this.showPresent,
            hourStep: this.hourStep,
            minuteStep: this.minuteStep,
            secondStep: this.secondStep,
            closeSelectorOnDateSelect: !this.multiSelect,
            multiSelect: this.multiSelect,
            separator: this.separator,
            maxSelected: this.maxSelected,
            selectedOrderBy: this.selectedOrderBy
        };
        dateOpts.firstDayOfWeek = this.firstDayOfWeek;
        switch (Number(this.showType)) {
            case ShowType.noDate:
                dateOpts.defaultView = DefaultView.Month;
                break;
            case ShowType.noDateAndMonth:
                dateOpts.defaultView = DefaultView.Year;
                // dateOpts.dateFormat = 'yyyy';
                // dateOpts.returnFormat = 'yyyy';
                // this.dateFormat = 'yyyy';
                break;
            case ShowType.selectWeek:
                dateOpts.showWeekNumbers = true;
                dateOpts.dateRange = true;
                // dateOpts.firstDayOfWeek = 'mo';
                break;
            // default:
            // this.returnType = 'String';
        }
        return Object.assign({}, this.localDateOpts, dateOpts);
    }
    /**
     * @param {?} d
     * @return {?}
     */
    dateTo(d) {
        /** @type {?} */
        const dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        const monthLabels = this.dateOpts.monthLabels ? this.dateOpts.monthLabels : this.defaultConfig.monthLabels;
        /** @type {?} */
        const showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        const year = d.getFullYear();
        /** @type {?} */
        const month = d.getMonth() + 1;
        /** @type {?} */
        const day = d.getDate();
        /** @type {?} */
        const hour = d.getHours();
        /** @type {?} */
        const minute = d.getMinutes();
        /** @type {?} */
        const second = d.getSeconds();
        /** @type {?} */
        let date;
        if (!showTime) {
            date = { year, month, day };
            this.originTime = { hour, minute, second };
        }
        else {
            date = { year, month, day, hour, minute, second };
        }
        return this.utilService.formatDate(date, dateFormat, monthLabels);
    }
    // 返回真实日期 Date 类型
    /**
     * @param {?} str
     * @param {?=} ignorRange
     * @return {?}
     */
    dateFrom(str, ignorRange = false) {
        if (!str) {
            return '';
        }
        /** @type {?} */
        const _this = this;
        /** @type {?} */
        const dateRange = this.dateOpts.dateRange ? this.dateOpts.dateRange : this.defaultConfig.dateRange;
        /** @type {?} */
        const dateFormat = this.dateOpts.dateFormat ? this.dateOpts.dateFormat : this.defaultConfig.dateFormat;
        /** @type {?} */
        const returnFormat = this.dateOpts.returnFormat ? this.dateOpts.returnFormat : this.defaultConfig.returnFormat;
        /** @type {?} */
        const showTime = this.dateOpts.showTime ? this.dateOpts.showTime : this.defaultConfig.showTime;
        /** @type {?} */
        const delimeters = returnFormat.match(/[^(DdMmYy)]{1,}/g);
        /** @type {?} */
        let dateValue;
        /** @type {?} */
        const getValue = this.utilService.getDateValue;
        if ((dateRange || this.dateOpts.showType === ShowType.selectWeek) && !ignorRange) {
            /** @type {?} */
            const tmpBegin = str.split(this.dateRangeDatesDelimiter)[0];
            /** @type {?} */
            const tmpEnd = str.split(this.dateRangeDatesDelimiter)[1];
            /** @type {?} */
            let tmpBeginDate = this.utilService.isDateValid(tmpBegin, this.dateOpts, true);
            /** @type {?} */
            let tmpEndDate = this.utilService.isDateValid(tmpEnd, this.dateOpts, true);
            tmpBeginDate = this.utilService.isInitializedDate(tmpBeginDate) ? tmpBeginDate : this.dateOpts.disableUntil;
            tmpEndDate = this.utilService.isInitializedDate(tmpEndDate) ? tmpEndDate : this.dateOpts.disableSince;
            return (this.utilService.formatDate(tmpBeginDate, returnFormat, this.defaultConfig.monthLabels) +
                this.dateRangeDatesDelimiter +
                this.utilService.formatDate(tmpEndDate, returnFormat, this.defaultConfig.monthLabels));
        }
        else {
            if (this.returnType === 'Date') {
                if (str && str instanceof Date) {
                    return str;
                }
                return convert(str, getValue, this.originTime);
            }
            else {
                /** @type {?} */
                const tmpDate = this.utilService.isDateValid(str, this.dateOpts, true);
                return this.utilService.formatDate(tmpDate, returnFormat, this.defaultConfig.monthLabels);
            }
        }
        /**
         * @param {?} v
         * @param {?} _getValue
         * @param {?=} originTime
         * @return {?}
         */
        function convert(v, _getValue, originTime = { hour: 0, minute: 0, second: 0 }) {
            /** @type {?} */
            let fmt = returnFormat;
            if (_this.returnType === 'Date') {
                fmt = 'yyyy-MM-dd' + (showTime ? ' HH:mm:ss' : '');
            }
            if (showTime) {
                /** @type {?} */
                const date = v.split(' ')[0];
                /** @type {?} */
                let time = v.split(' ')[1];
                dateValue = _getValue(date, fmt, delimeters);
                if (time) {
                    time = time.replace(/[时,分]/g, ':').replace(/[秒]/, '');
                    const [h, m, s] = time.split(':');
                    /** @type {?} */
                    const hour = h;
                    /** @type {?} */
                    const minute = m;
                    /** @type {?} */
                    const second = s ? s : '';
                    dateValue[3] = { value: hour, format: 'hh' };
                    dateValue[4] = { value: minute, format: 'mm' };
                    if (second) {
                        dateValue[5] = { value: second, format: 'ss' };
                    }
                }
            }
            else {
                /** @type {?} */
                const date = v.split(' ')[0];
                dateValue = _getValue(date, fmt, delimeters);
            }
            /** @type {?} */
            let year = Number(dateValue[0] ? dateValue[0].value : 1970);
            /** @type {?} */
            const yearValue = dateValue[0];
            if (yearValue.format) {
                if (!yearValue.value || yearValue.value.length !== yearValue.format.length) {
                    year = null;
                }
            }
            /** @type {?} */
            const month = Number(dateValue[1] ? dateValue[1].value : 1) - 1;
            /** @type {?} */
            const day = Number(dateValue[2] ? dateValue[2].value : 1);
            /** @type {?} */
            const _hour = dateValue[3] ? Number(dateValue[3].value) : originTime.hour;
            /** @type {?} */
            const _minute = dateValue[4] ? Number(dateValue[4].value) : originTime.minute;
            /** @type {?} */
            const _second = dateValue[5] ? Number(dateValue[5].value) : originTime.second;
            if (!year) {
                return null;
            }
            return new Date(year, month, day, _hour, _minute, _second);
        }
    }
    /**
     * @param {?} value
     * @param {?=} _fmt
     * @return {?}
     */
    transform(value, _fmt = this.dateOpts.dateFormat) {
        value = value ? value : '';
        const { returnFormat, dateFormat, showTime } = this.dateOpts;
        /** @type {?} */
        let _tmpDate = null;
        if (typeof value === 'string') {
            _tmpDate = parse(value, returnFormat, new Date());
            if (!isValid(_tmpDate)) {
                if (this._SELECT_DATE_ && this._SELECT_DATE_.singleDate) {
                    _tmpDate = this._SELECT_DATE_.singleDate.jsDate;
                }
                else {
                    if (this._realValue) {
                        _tmpDate = parse(this._realValue, returnFormat, new Date());
                    }
                }
            }
        }
        else {
            if (value instanceof Date) {
                _tmpDate = value;
            }
        }
        /** @type {?} */
        let formattedVal = value;
        if (isValid(_tmpDate)) {
            formattedVal = this.dtService.formatTo(_tmpDate, _fmt);
            return formattedVal;
        }
        else {
            // 兼容年月日,年月,年格式
            value = value.replace(/[年,月]/g, '-').replace(/[日]/, '');
            if (value[value.length - 1] === '-') {
                value = value.substr(0, value.length - 1);
            }
            if (isValid(new Date(value))) {
                formattedVal = this.dtService.formatTo(value, _fmt);
            }
            else {
                value = '';
            }
        }
        if (value) {
            if (this.dateFrom(value, true) === '') {
                /** @type {?} */
                const tmpDate = this.utilService.isDateValid(value, Object.assign({}, this.dateOpts, {
                    dateFormat: returnFormat
                }));
                formattedVal = this.utilService.formatDate(tmpDate, _fmt, this.defaultConfig.monthLabels);
            }
        }
        return formattedVal;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    setValue(value) {
        if (this.value !== value) {
            if (this.dateOpts.dateRange) {
                /** @type {?} */
                const _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
                /** @type {?} */
                const beginStr = _tmpDateArr[0];
                /** @type {?} */
                const endStr = _tmpDateArr[1];
                this._beginValue = this.transform(beginStr);
                this._endValue = this.transform(endStr);
                this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
            }
            else {
                if (value) {
                    this.value = this.transform(value);
                }
                else {
                    this.value = '';
                }
            }
            this.cdr.markForCheck();
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    updateValue(value) {
        if (this.dateOpts.dateRange) {
            /** @type {?} */
            const _tmpDateArr = value.split(this.dateRangeDatesDelimiter);
            /** @type {?} */
            const beginStr = _tmpDateArr[0];
            /** @type {?} */
            const endStr = _tmpDateArr[1];
            this._beginValue = this.transform(beginStr);
            this._endValue = this.transform(endStr);
            this.value = this._beginValue && this._endValue ? this._beginValue + this.dateRangeDatesDelimiter + this._endValue : '';
        }
        else {
            this.value = this.transform(value);
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    getValueByType(val) {
        if (val instanceof Date) {
            this.returnType = 'Date';
            // return this.dateTo(val);
            return val;
        }
        else if (val && val instanceof Object) {
            const { begin, end } = val;
            /** @type {?} */
            const beginStr = begin instanceof Date ? this.dateTo(begin) : '';
            /** @type {?} */
            const endStr = begin instanceof Date ? this.dateTo(end) : '';
            this.returnType = 'Object';
            return beginStr && endStr ? beginStr + this.dateRangeDatesDelimiter + endStr : '';
        }
        else if (val && typeof val === 'string') {
            if (val.indexOf('T') > -1) {
                val = val.replace('T', ' ');
            }
            this.returnType = 'String';
            return val;
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    writeValue(val) {
        if (!this.multiSelect) {
            if (typeof val === 'object' && val && !isDate(val)) {
                this.dynamicValue = val;
                this.dynamicText = this.utilService.formatDynamicValue(val, this.dateOpts.dynamicLocale);
                this.dateOpts.showDynamicView = true;
                this.dateOpts.dynamicValue = this.dynamicValue;
            }
            else {
                // this.dateOpts.showDynamicView = false;
                this._realValue = val;
                if (this.dateRange) {
                    this._realRangeValue = val;
                }
                this.setValue(this.getValueByType(val));
            }
        }
        else {
            if (!val) {
                val = '';
            }
            this.value = val.split(this.separator).map((/**
             * @param {?} n
             * @return {?}
             */
            n => this.transform(n))).join(this.separator);
            this._realValue = val;
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onPrevFocus(value) {
        this.beginFocus = true;
        if (this.endFocus == true) {
            this.endFocus = !this.endFocus;
        }
        this.PrevFocus.emit();
    }
    /**
     * @param {?} value
     * @return {?}
     */
    onNextFocus(value) {
        this.endFocus = true;
        if (this.beginFocus == true) {
            this.beginFocus = !this.beginFocus;
        }
        this.NextFocus.emit();
    }
    /**
     * @private
     * @param {?} val
     * @param {?=} realValue
     * @return {?}
     */
    _convert2dateString(val, realValue = false) {
        if (val) {
            /** @type {?} */
            let t = val.replace(/[年,月]/g, '-').replace(/[日,号]/g, ' ').replace(/[时,点,分,分钟]/g, ':').replace('秒', '');
            if (this.showType === ShowType.noDateAndMonth && t.indexOf('-') === -1) {
                t += '-';
            }
            // 替换连续的空格字符为单个空格
            /** @type {?} */
            var checkSpaceReg = /(\s)\1{1,}/g;
            if (t.match(checkSpaceReg)) {
                t.match(checkSpaceReg).forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    if (n[0] === ' ') {
                        t = t.replace(n, ' ');
                    }
                }));
            }
            if (realValue) {
                /** @type {?} */
                const objDate = this.utilService.isDateValid(val, this.dateOpts, true);
                if (objDate) {
                    let { year, month, day, hour, minute, second } = objDate;
                    if (!year) {
                        year = new Date().getFullYear();
                    }
                    if (!month) {
                        month = new Date().getMonth();
                    }
                    if (!day) {
                        day = 1;
                    }
                    if (!hour) {
                        hour = 0;
                    }
                    if (!minute) {
                        minute = 0;
                    }
                    if (!second) {
                        second = 0;
                    }
                    /** @type {?} */
                    const _datePart = `${year}-${this.utilService.padStartZero(month)}-${this.utilService.padStartZero(day)}`;
                    /** @type {?} */
                    const _timePart = `${this.utilService.padStartZero(hour)}:${this.utilService.padStartZero(minute)}:${this.utilService.padStartZero(second)}`;
                    return `${_datePart} ${_timePart}`;
                }
            }
            if (t[t.length - 1] === '-') {
                // t = t.substr(0, t.length - 1);
                t += '01';
            }
            if (t[t.length - 1] === ':') {
                t = t.substr(0, t.length - 1);
            }
            return t.replace(/^\s+|\s+$/g, '');
        }
        return val;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _isValid(value) {
        value = this._convert2dateString(value);
        if (value) {
            if (this.dateFormat.indexOf('yyyy') === -1 || this.dateFormat.indexOf('dd') === -1) {
                /** @type {?} */
                const _tmpDate = parse(this.value, this.dateFormat, new Date());
                if (this._realValue) {
                    if (this.returnType === 'Date') {
                        return isValid(this._realValue);
                    }
                    else {
                        return isValid(new Date(this._convert2dateString(this._realValue, true)));
                        // return isValid(parse(this._realValue, this.returnFormat, new Date()));
                    }
                }
                /** @type {?} */
                const d = this.utilService.isDateValid(value, this.dateOpts);
                if (d) {
                    if (d.year || d.month) {
                        /** @type {?} */
                        const cdate = new Date();
                        /** @type {?} */
                        const year = cdate.getFullYear();
                        /** @type {?} */
                        const str = (this.dateOpts.returnFormat || 'yyyy-MM-dd')
                            .replace('yyyy', '' + (d.year || year)).replace('MM', '' + d.month).replace('dd', '1');
                        return isValid(new Date(str));
                    }
                    return false;
                }
                return isValid(value);
            }
            else {
                /** @type {?} */
                const reg = /^\d{1,}$/;
                if (reg.test(value) && this.dateFormat.indexOf('yyyyMMdd') > -1) { // 验证传入的格式为 yyyyMMddHHmmss
                    // 验证传入的格式为 yyyyMMddHHmmss
                    /** @type {?} */
                    const _r = this._isValid2(value);
                    if (_r.isValided) {
                        this._realValue = this.getRealReturnFormatted(_r.date);
                        this.value = this.transform(_r.date);
                    }
                    return _r.isValided;
                }
                else {
                    /** @type {?} */
                    const _tmpDate = parse(value, this.dateFormat, new Date());
                    /** @type {?} */
                    const d = this.utilService.isDateValid(this.value, this.dateOpts);
                    return isValid(_tmpDate) || this.utilService.isInitializedDate(d);
                }
            }
        }
        return false;
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    _isValid2(value) {
        /** @type {?} */
        let year = 0;
        /** @type {?} */
        let month = 0;
        /** @type {?} */
        let day = 0;
        /** @type {?} */
        let hour = 0;
        /** @type {?} */
        let minute = 0;
        /** @type {?} */
        let seconds = 0;
        /** @type {?} */
        const df = this.dateFormat;
        if (df.includes('yyyy')) {
            if (value) {
                year = +value.slice(0, 4);
                value = value.slice(4);
            }
            else {
                return false;
            }
        }
        if (df.includes('MM')) {
            if (value) {
                month = +value.slice(0, 2) - 1;
                value = value.slice(2);
                if (month < 0) {
                    month = 0;
                }
            }
            else {
                return false;
            }
        }
        if (df.includes('dd')) {
            if (value) {
                day = +value.slice(0, 2);
                value = value.slice(2);
            }
            else {
                return false;
            }
        }
        if (df.includes('HH')) {
            if (value) {
                hour = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('mm')) {
            if (value) {
                minute = +value.slice(0, 2);
                value = value.slice(2);
            }
        }
        if (df.includes('ss')) {
            if (value) {
                seconds = +value.slice(0, 2);
            }
        }
        /** @type {?} */
        const d = new Date(year, month, day, hour, minute, seconds);
        return {
            isValided: isValid(d),
            date: d
        };
    }
    /**
     * @private
     * @return {?}
     */
    multiSelectedChanged() {
        this.onModelChange(this._realValue);
        /** @type {?} */
        const p = {
            formatted: this.value,
            returnFormatted: this._realValue,
            cmpRef: this
        };
        this.onModelTouched();
        this.closeSelector(CalToggle.CloseByDateSel);
        this.valueChange.emit(p);
        if (!this.value) {
            this.clear.emit();
        }
    }
    /**
     * @param {?} d
     * @return {?}
     */
    onRemoveDate(d) {
        if (!d) {
            return;
        }
        const { value, index } = d;
        this.value = this.value.split(this.separator).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n !== value)).join(this.separator);
        this._realValue = this._realValue.split(this.separator).filter((/**
         * @param {?} n
         * @param {?} i
         * @return {?}
         */
        (n, i) => i !== index)).join(this.separator);
        this.multiSelectedChanged();
        this.cdr.detectChanges();
    }
}
FarrisDatepickerComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-datepicker',
                exportAs: 'farris-datepicker',
                template: "<div class=\"input-group\" [ngClass]=\"{\r\n        'f-state-disabled': disabled,\r\n        'f-state-readonly': readonly && !disabled,\r\n        'f-state-editable': editable && !disabled && !readonly,\r\n        'f-state-focus':totalFocus\r\n    }\" *ngIf=\"!(dateOpts?.showDynamicView && enableDynamic) && !multiSelect\" >\r\n    <ng-container *ngIf=\"!dateOpts.dateRange; else range\">\r\n        <input type=\"text\" class=\"form-control f-utils-fill\" [attr.placeholder]=\"readonly||disabled?'':placeholder\" name=\"farris-date\" [ngModel]=\"value\"\r\n            (ngModelChange)=\"onSingleInputNgModelChange($event)\" #dateInput autocomplete=\"off\" [readonly]=\"readonly || !editable\"\r\n            [disabled]=\"disabled\" (dateChanged)=\"onDateChanged($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" (click)=\"onInputClick($event)\" style=\"padding-right: 4px;\" farrisPopover\r\n            [popover]=\"value\" [triggers]=\"'hover'\" [popActive]=\"isActiveTip\" [showAction]=\"'show2'\"\r\n            [container]=\"'body'\" (keydown.tab)=\"closeSelector(3)\" />\r\n\r\n    </ng-container>\r\n    <ng-template #range>\r\n        <div class=\"form-control date-range-wrapper\" (click)=\"onInputClick($event)\" (blur)=\"onBlur($event)\"\r\n            (focus)=\"onFocus($event)\" [title]=\"readonly || !editable|| disabled ?value:''\">\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-begin\" [class.f-state-focus]=\"totalFocus&&beginFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':beginPlaceholder\"\r\n                    [(ngModel)]=\"_beginValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\"\r\n                    autocomplete=\"off\" (blur)=\"onDateRangeInputBlur('begin')\" (focus)=\"onPrevFocus($event)\"/>\r\n            </span>\r\n            <span class=\"f-icon f-icon-orientation-arrow sub-input-spliter\"></span>\r\n            <span class=\"sub-input-wrapper sub-input-wrapper-end\" [class.f-state-focus]=\"totalFocus&&endFocus\">\r\n                <input class=\"sub-input form-control\" type=\"text\" [attr.placeholder]=\"readonly||disabled?'':endPlaceholder\"\r\n                    [(ngModel)]=\"_endValue\" [readonly]=\"readonly || !editable\" [disabled]=\"disabled\" autocomplete=\"off\"\r\n                    (blur)=\"onDateRangeInputBlur('end')\" (focus)=\"onNextFocus($event)\" />\r\n            </span>\r\n        </div>\r\n    </ng-template>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"!readonly && !disabled\" style=\"position: relative;\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear\" (click)=\"clearDate($event)\"\r\n            style=\"visibility: hidden\" #clearIcon  *ngIf=\"showClear\">\r\n            <i class=\"f-icon modal_close\"></i>\r\n        </span>\r\n        <button type=\"button\" class=\"btn f-cmp-iconbtn\" (click)=\"onInputClick($event)\" style=\"z-index:0\">\r\n            <span class=\"f-icon f-icon-date\"></span>\r\n        </button>\r\n    </div>\r\n</div>\r\n\r\n<dynamic-date-input *ngIf=\"dateOpts?.showDynamicView && enableDynamic && !multiSelect\" [showClear]=\"showClear\"\r\n    [value]=\"dynamicValue\" [text]=\"dynamicText\" [readonly]=\"readonly\" [disabled]=\"disabled\" [isFocus]=\"totalFocus\" [placeholder]=\"placeholder\"\r\n    (inputClick)=\"onInputClick($event)\" (clear)=\"clearDynamicDate($event)\" (tabKeydown)=\"closeSelector(3)\"></dynamic-date-input>\r\n\r\n\r\n<multi-select-input  *ngIf=\"multiSelect\" [separator]=\"separator\" [dates]=\"value\" [placeholder]=\"readonly||disabled?'':placeholder\"\r\n[editable]=\"!readonly&&!disabled\"  [orderBy]=\"selectedOrderBy\"\r\n (clickHandle)=\"onInputClick($event)\" (remove)=\"onRemoveDate($event)\"></multi-select-input>\r\n <input type=\"hidden\" [(ngModel)]=\"_realValue\"  *ngIf=\"multiSelect\">\r\n\r\n\r\n<ng-container #calendar>\r\n    <ng-container></ng-container>\r\n</ng-container>\r\n",
                providers: [FARRIS_DP_VALUE_ACCESSOR, UtilService, DefaultConfigService, LocaleService],
                styles: [`
            :host {
                display: block;
            }

            :host .datepicker-clear {
                position: absolute;
                height: 100%;
                right: 0;
                top: 0;
                z-index: 100;
            }
        `]
            }] }
];
/** @nocollapse */
FarrisDatepickerComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: UtilService },
    { type: DefaultConfigService },
    { type: Injector }
];
FarrisDatepickerComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class',] }],
    viewType: [{ type: Input }],
    disabled: [{ type: Input }],
    readonly: [{ type: Input }],
    editable: [{ type: Input }],
    dateRange: [{ type: Input }],
    showTime: [{ type: Input }],
    hourStep: [{ type: Input }],
    minuteStep: [{ type: Input }],
    secondStep: [{ type: Input }],
    showType: [{ type: Input }],
    locale: [{ type: Input }],
    dateFormat: [{ type: Input }],
    useDefault: [{ type: Input }],
    returnType: [{ type: Input }],
    returnFormat: [{ type: Input }],
    placeholder: [{ type: Input }],
    beginPlaceholder: [{ type: Input }],
    endPlaceholder: [{ type: Input }],
    whenValueChangedThenCloseSelectorPanel: [{ type: Input }],
    minDate: [{ type: Input }],
    maxDate: [{ type: Input }],
    highlightDates: [{ type: Input }],
    disableDateRangesBegin: [{ type: Input }],
    disableDateRangesEnd: [{ type: Input }],
    disableDates: [{ type: Input }],
    disableWeekdays: [{ type: Input }],
    markDates: [{ type: Input }],
    markDatesColor: [{ type: Input }],
    showWeekNumbers: [{ type: Input }],
    isMarkWeekends: [{ type: Input }],
    markWeekendsColor: [{ type: Input }],
    dateRangeDatesDelimiter: [{ type: Input }],
    shortcuts: [{ type: Input }],
    monthRangeValue: [{ type: Input }],
    beginValue: [{ type: Input }],
    endValue: [{ type: Input }],
    enableDynamic: [{ type: Input }],
    previousMaxDays: [{ type: Input }],
    futureMaxDays: [{ type: Input }],
    showClear: [{ type: Input }],
    showPresent: [{ type: Input }],
    firstDayOfWeek: [{ type: Input }],
    clear: [{ type: Output }],
    valueChange: [{ type: Output }],
    focus: [{ type: Output }],
    blur: [{ type: Output }],
    beginValueChange: [{ type: Output }],
    endValueChange: [{ type: Output }],
    PrevFocus: [{ type: Output }],
    NextFocus: [{ type: Output }],
    close: [{ type: Output }],
    multiSelect: [{ type: Input }],
    separator: [{ type: Input }],
    maxSelected: [{ type: Input }],
    selectedOrderBy: [{ type: Input }],
    dp: [{ type: ViewChild, args: [FarrisDatePickerDirective,] }],
    clearIcon: [{ type: ViewChild, args: ['clearIcon',] }],
    calendarRef: [{ type: ViewChild, args: ['calendar', { read: ViewContainerRef },] }],
    PFocus: [{ type: ViewChild, args: ['onPrevFocus',] }],
    NFocus: [{ type: ViewChild, args: ['onNextFocus',] }],
    dateInput: [{ type: ViewChild, args: ['dateInput',] }],
    dynamicValue: [{ type: Input }],
    dynamicValueChange: [{ type: Output }],
    dynamicViewChanged: [{ type: Output }],
    onMouseEnter: [{ type: HostListener, args: ['mouseenter', ['$event'],] }],
    onMouseLeave: [{ type: HostListener, args: ['mouseleave', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    FarrisDatepickerComponent.prototype.cls;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.viewType;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disabled;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.readonly;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.editable;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateRange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showTime;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.hourStep;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.minuteStep;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.secondStep;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showType;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.locale;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.useDefault;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.returnType;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.returnFormat;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.placeholder;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginPlaceholder;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endPlaceholder;
    /**
     * 输入值变化后关闭选择面板。 默认为 true
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.whenValueChangedThenCloseSelectorPanel;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.highlightDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDateRangesBegin;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDateRangesEnd;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.disableWeekdays;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markDates;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markDatesColor;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showWeekNumbers;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.isMarkWeekends;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.markWeekendsColor;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateRangeDatesDelimiter;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.shortcuts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.monthRangeValue;
    /**
     * 启用动态日期值设置，默认 false
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.enableDynamic;
    /**
     * 允许设置过去最大天数
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.previousMaxDays;
    /**
     * 允许设置未来最大天数
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.futureMaxDays;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.showClear;
    /**
     * 显示今天，本年，本月 按钮
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.showPresent;
    /**
     * 每周起始日  可选值 mo：周一  su: 周日，默认为 mo周一
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.firstDayOfWeek;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.clear;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.valueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.focus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.blur;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginValueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endValueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.PrevFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.NextFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.close;
    /**
     * 启用多选，默认 false
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.multiSelect;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.separator;
    /**
     * 允许选择日期的个数； 0 无限
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.maxSelected;
    /**
     * 选中日期的排序方式，默认为 'none' 即不排序
     * @type {?}
     */
    FarrisDatepickerComponent.prototype.selectedOrderBy;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dp;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.clearIcon;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.calendarRef;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.PFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.NFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateInput;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._timeFormat;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._value;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._beginValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._endValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._initFinished;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._timer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._dateFormat;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._minDate;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._maxDate;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.selectedWeek;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dateOpts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.defaultConfig;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localDateOpts;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localeConfig;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.localeService;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.beginFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.endFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.totalFocus;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.originTime;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.isActiveTip;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.datePicekrService;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._realValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._realRangeValue;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.notifySer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.formatedValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dtService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._applicationRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._ngControl;
    /** @type {?} */
    FarrisDatepickerComponent.prototype._updateOn;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._valueChangeEmitted;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._mousedownEvent;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.closeCalendarHandler;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.cdr;
    /**
     * 缓存通过点击日历的数据，用于的格式化格式不标准时，格式化数据。
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype._SELECT_DATE_;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dynamicText;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dynamicValue;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dynamicValueChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.dynamicViewChanged;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.onModelChange;
    /** @type {?} */
    FarrisDatepickerComponent.prototype.onModelTouched;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.overLayService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.defaultConfigService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatepickerComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,