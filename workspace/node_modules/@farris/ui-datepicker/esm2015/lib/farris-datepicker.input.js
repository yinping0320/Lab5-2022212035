/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, ElementRef, ViewContainerRef, Renderer2, ChangeDetectorRef, ComponentFactoryResolver, forwardRef, EventEmitter, Output, HostListener, NgZone } from '@angular/core';
import { NG_VALIDATORS, NG_VALUE_ACCESSOR } from '@angular/forms';
import { CalendarComponent } from './components/calendar/calendar.component';
import { UtilService, DatepickerLocaleService, DefaultConfigService } from './services/public-api';
import { KeyCode, CalToggle, Year, ResetDateType } from './enums/public-api';
import { KEYUP, BLUR, EMPTY_STR, DISABLED, CLICK, VALUE, OPTIONS, DEFAULT_MONTH, LOCALE, OBJECT, PX } from './constants/constants';
/** @type {?} */
const NGX_DP_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatePickerDirective)),
    multi: true
};
/** @type {?} */
const NGX_DP_VALIDATORS = {
    provide: NG_VALIDATORS,
    useExisting: forwardRef((/**
     * @return {?}
     */
    () => FarrisDatePickerDirective)),
    multi: true
};
export class FarrisDatePickerDirective {
    /**
     * @param {?} localeService
     * @param {?} utilService
     * @param {?} vcRef
     * @param {?} cfr
     * @param {?} renderer
     * @param {?} cdr
     * @param {?} elem
     * @param {?} config
     * @param {?} zone
     */
    constructor(localeService, utilService, vcRef, cfr, renderer, cdr, elem, config, zone) {
        this.localeService = localeService;
        this.utilService = utilService;
        this.vcRef = vcRef;
        this.cfr = cfr;
        this.renderer = renderer;
        this.cdr = cdr;
        this.elem = elem;
        this.config = config;
        this.zone = zone;
        this.dateChanged = new EventEmitter();
        this.inputFieldChanged = new EventEmitter();
        this.calendarViewChanged = new EventEmitter();
        this.calendarToggle = new EventEmitter();
        this.rangeDateSelection = new EventEmitter();
        this.cRef = null;
        this.inputText = '';
        this.preventClose = false;
        this.disabled = false;
        // scrollFn: any = (e) => {
        //     console.log((e.target as any).scrollTop);
        // };
        this.onChangeCb = (/**
         * @return {?}
         */
        () => { });
        this.onTouchedCb = (/**
         * @return {?}
         */
        () => { });
        // wrapper with arrow function to preserve the use of 'this' word
        this.onClickWrapper = (/**
         * @param {?} ev
         * @return {?}
         */
        (ev) => {
            this.onClick(ev);
        });
        this.opts = this.config.getDefaultConfig();
        this.parseOptions(this.opts);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onKeyUp(event) {
        /** @type {?} */
        const keyCode = this.utilService.getKeyCodeFromEvent(event);
        if (this.ignoreKeyPress(keyCode)) {
            return;
        }
        else if (keyCode === KeyCode.esc) {
            this.closeSelector(CalToggle.CloseByEsc);
        }
        else {
            const { value } = this.elem.nativeElement;
            /** @type {?} */
            let valid = false;
            if (!this.opts.dateRange) {
                /** @type {?} */
                const date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                const { begin, end } = this.utilService.isDateValidDateRange(value, this.opts);
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            this.emitInputFieldChanged(value, valid);
        }
    }
    /**
     * @return {?}
     */
    onBlur() {
        const { inputFieldValidation, dateRange } = this.opts;
        if (inputFieldValidation) {
            const { value } = this.elem.nativeElement;
            /** @type {?} */
            let valid = false;
            if (!dateRange) {
                /** @type {?} */
                const date = this.utilService.isDateValid(value, this.opts);
                valid = this.utilService.isInitializedDate(date);
            }
            else {
                /** @type {?} */
                const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
                const { begin, end } = _dateRange;
                valid =
                    this.utilService.isInitializedDate(begin) &&
                        this.utilService.isInitializedDate(end);
            }
            if (!valid && this.inputText !== value) {
                this.clearDate();
            }
            this.onChangeCb(value);
        }
        this.onTouchedCb();
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    onClick(evt) {
        if (this.opts.closeSelectorOnDocumentClick &&
            !this.preventClose &&
            evt.target &&
            this.cRef !== null &&
            this.elem.nativeElement !== evt.target &&
            !this.cRef.location.nativeElement.contains(evt.target) &&
            !this.disabled) {
            this.closeSelector(CalToggle.CloseByOutClick);
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty(LOCALE)) {
            this.setLocaleOptions();
        }
        if (changes.hasOwnProperty(DEFAULT_MONTH)) {
            /** @type {?} */
            let dm = changes[DEFAULT_MONTH].currentValue;
            if (typeof dm === OBJECT) {
                dm = dm.defMonth;
            }
            this.defaultMonth = dm;
        }
        if (changes.hasOwnProperty(OPTIONS)) {
            this.parseOptions(changes[OPTIONS].currentValue);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.closeCalendar();
    }
    /**
     * @return {?}
     */
    setLocaleOptions() {
        /** @type {?} */
        const opts = this.localeService.getLocaleOptions(this.locale);
        Object.keys(opts).forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            ((/** @type {?} */ (this.opts)))[k] = opts[k];
        }));
    }
    /**
     * @param {?} opts
     * @return {?}
     */
    parseOptions(opts) {
        if (opts !== undefined) {
            Object.keys(opts).forEach((/**
             * @param {?} k
             * @return {?}
             */
            k => {
                if (opts[k] !== undefined && opts[k] !== '') {
                    ((/** @type {?} */ (this.opts)))[k] = opts[k];
                }
            }));
        }
        if (this.opts.minYear < Year.min) {
            this.opts.minYear = Year.min;
        }
        if (this.opts.maxYear > Year.max) {
            this.opts.maxYear = Year.max;
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    formatDate(value) {
        const { dateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat } = this.opts;
        if (!dateRange) {
            // Single date mode
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            return this.utilService.getDateModel(date, null, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
        else {
            // Date range mode
            /** @type {?} */
            const _dateRange = this.utilService.isDateValidDateRange(value, this.opts);
            return this.utilService.getDateModel(null, _dateRange, dateFormat, monthLabels, dateRangeDatesDelimiter, returnFormat);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        if (this.disabled) {
            return;
        }
        if (value) {
            value = this.formatDate(value);
        }
        if (!value) {
            this.setInputValue(EMPTY_STR);
            this.emitInputFieldChanged(EMPTY_STR, false);
            if (this.cRef !== null) {
                this.cRef.instance.resetDateValue(ResetDateType.both);
            }
        }
        else if (value.isRange === false && value.singleDate) {
            // single date
            const { date, formatted } = value.singleDate;
            /** @type {?} */
            const valid = this.utilService.isInitializedDate(date);
            if (valid) {
                this.setInputValue(formatted);
                this.emitInputFieldChanged(formatted, valid);
                if (this.cRef !== null) {
                    this.cRef.instance.resetDateValue(ResetDateType.dateRange);
                }
            }
        }
        else if (value.isRange === true && value.dateRange) {
            // date range
            const { beginDate, endDate, formatted } = value.dateRange;
            if (beginDate && endDate) {
                /** @type {?} */
                const valid = this.utilService.isInitializedDate(beginDate) &&
                    this.utilService.isInitializedDate(endDate);
                if (valid) {
                    this.setInputValue(formatted);
                    this.emitInputFieldChanged(formatted, valid);
                    if (this.cRef !== null) {
                        this.cRef.instance.resetDateValue(ResetDateType.singleDate);
                    }
                }
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onChangeCb = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouchedCb = fn;
    }
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled) {
        this.disabled = isDisabled;
        this.renderer.setProperty(this.elem.nativeElement, DISABLED, isDisabled);
        if (isDisabled) {
            this.closeCalendar();
        }
    }
    /**
     * @param {?} c
     * @return {?}
     */
    validate(c) {
        return null;
    }
    /**
     * @return {?}
     */
    openCalendar() {
        if (this.disabled) {
            return;
        }
        this.preventClose = true;
        this.cdr.detectChanges();
        if (this.cRef === null) {
            this.cRef = this.vcRef.createComponent(this.cfr.resolveComponentFactory(CalendarComponent));
            this.appendSelector(this.cRef.location.nativeElement);
            this.cRef.instance.initialize(this.opts, this.defaultMonth, this.getSelectorPosition(this.elem.nativeElement), this.elem.nativeElement.value, (/**
             * @param {?} dm
             * @param {?} close
             * @return {?}
             */
            (dm, close) => {
                this.focusToInput();
                this.updateModel(dm);
                if (close) {
                    this.closeSelector(CalToggle.CloseByDateSel);
                }
                this.emitDateChanged(dm);
                this.emitInputFieldChanged(this.utilService.getFormattedDate(dm), true);
            }), (/**
             * @param {?} cvc
             * @return {?}
             */
            (cvc) => {
                this.emitCalendarChanged(cvc);
            }), (/**
             * @param {?} rds
             * @return {?}
             */
            (rds) => {
                this.emitRangeDateSelection(rds);
            }), (/**
             * @return {?}
             */
            () => {
                this.closeSelector(CalToggle.CloseByEsc);
            }));
            this.emitCalendarToggle(CalToggle.Open);
            this.cdr.detectChanges();
        }
        else {
            this.appendSelector(this.cRef.location.nativeElement);
        }
        this.preventClose = false;
    }
    /**
     * @return {?}
     */
    closeCalendar() {
        this.closeSelector(CalToggle.CloseByCalBtn);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    toggleCalendar(event) {
        event.stopPropagation();
        if (this.disabled) {
            return;
        }
        if (this.cRef === null) {
            document.addEventListener(CLICK, this.onClickWrapper, true);
            this.openCalendar();
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', 'auto');
        }
        else {
            /** @type {?} */
            let flag = true;
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            if (container && this.cRef.location) {
                if (container.hasChildNodes()) {
                    container.childNodes.forEach((/**
                     * @param {?} el
                     * @return {?}
                     */
                    el => {
                        if (el === this.cRef.location.nativeElement) {
                            flag = false;
                        }
                    }));
                }
            }
            if (flag) {
                this.renderer.setStyle(container, 'pointer-events', 'auto');
                this.openCalendar();
            }
            else {
                document.removeEventListener(CLICK, this.onClickWrapper);
                this.closeSelector(CalToggle.CloseByCalBtn);
                this.renderer.setStyle(container, 'pointer-events', '');
            }
        }
    }
    /**
     * @return {?}
     */
    clearDate() {
        if (this.disabled) {
            return;
        }
        this.setInputValue(EMPTY_STR);
        this.emitDateChanged({
            isRange: this.opts.dateRange,
            singleDate: {
                date: this.utilService.resetDate(),
                jsDate: null,
                formatted: EMPTY_STR,
                epoc: 0
            },
            dateRange: {
                beginDate: this.utilService.resetDate(),
                beginJsDate: null,
                beginEpoc: 0,
                endDate: this.utilService.resetDate(),
                endJsDate: null,
                endEpoc: 0,
                formatted: EMPTY_STR
            }
        });
        this.onChangeCb(null);
        this.onTouchedCb();
        this.closeSelector(CalToggle.CloseByCalBtn);
    }
    /**
     * @return {?}
     */
    isDateValid() {
        const { value } = this.elem.nativeElement;
        if (value !== EMPTY_STR) {
            /** @type {?} */
            const date = this.utilService.isDateValid(value, this.opts);
            if (this.utilService.isInitializedDate(date)) {
                this.emitInputFieldChanged(value, true);
                return true;
            }
        }
        this.emitInputFieldChanged(value, false);
        return false;
    }
    /**
     * @private
     * @param {?} keyCode
     * @return {?}
     */
    ignoreKeyPress(keyCode) {
        // keyCode === KeyCode.tab ||
        return (keyCode === KeyCode.leftArrow ||
            keyCode === KeyCode.rightArrow ||
            keyCode === KeyCode.upArrow ||
            keyCode === KeyCode.downArrow ||
            keyCode === KeyCode.shift);
    }
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    closeSelector(reason) {
        if (this.cRef !== null) {
            this.vcRef.remove(this.vcRef.indexOf(this.cRef.hostView));
            this.cRef = null;
            this.cdr.detectChanges();
            this.emitCalendarToggle(reason);
            /** @type {?} */
            const container = document.querySelector('.date-overlay-container');
            this.renderer.setStyle(container, 'pointer-events', '');
        }
    }
    /**
     * @private
     * @param {?} model
     * @return {?}
     */
    updateModel(model) {
        this.setInputValue(this.utilService.getFormattedDate(model));
        this.onChangeCb(this.utilService.getFormattedDate(model));
        this.onTouchedCb();
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    setInputValue(value) {
        this.inputText = value;
        this.renderer.setProperty(this.elem.nativeElement, VALUE, value);
    }
    /**
     * @private
     * @return {?}
     */
    focusToInput() {
        if (this.opts.focusInputOnDateSelect) {
            this.elem.nativeElement.focus();
        }
    }
    /**
     * @private
     * @param {?} dateModel
     * @return {?}
     */
    emitDateChanged(dateModel) {
        this.dateChanged.emit(dateModel);
    }
    /**
     * @private
     * @param {?} value
     * @param {?} valid
     * @return {?}
     */
    emitInputFieldChanged(value, valid) {
        this.inputFieldChanged.emit({
            value,
            dateFormat: this.opts.dateFormat,
            valid
        });
    }
    /**
     * @private
     * @param {?} cvc
     * @return {?}
     */
    emitCalendarChanged(cvc) {
        this.calendarViewChanged.emit(cvc);
    }
    /**
     * @private
     * @param {?} rds
     * @return {?}
     */
    emitRangeDateSelection(rds) {
        this.rangeDateSelection.emit(rds);
    }
    /**
     * @private
     * @param {?} reason
     * @return {?}
     */
    emitCalendarToggle(reason) {
        this.calendarToggle.emit(reason);
    }
    /**
     * @private
     * @param {?} date
     * @return {?}
     */
    jsDateToMyDate(date) {
        return {
            year: date.getFullYear(),
            month: date.getMonth() + 1,
            day: date.getDate()
        };
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    appendSelector(elem) {
        /** @type {?} */
        let container = document.querySelector('.date-overlay-container');
        if (container) {
            if (container.hasChildNodes()) {
                container.childNodes.forEach((/**
                 * @param {?} el
                 * @return {?}
                 */
                el => {
                    if (el !== elem) {
                        container.removeChild(el);
                    }
                }));
            }
        }
        else {
            container = document.createElement('div');
            container.classList.add('date-overlay-container');
            container.classList.add('overlay-container');
            document.body.appendChild(container);
        }
        container.appendChild(elem);
    }
    /**
     * @private
     * @param {?} elem
     * @return {?}
     */
    getSelectorPosition(elem) {
        /** @type {?} */
        let top = 0;
        /** @type {?} */
        let left = 0;
        /** @type {?} */
        let _selectorHeight = 0;
        /** @type {?} */
        let _selectorWidth = 0;
        const { selectorHeight, selectorWidth, showTime, dateRange } = this.opts;
        /** @type {?} */
        const b = document.body.getBoundingClientRect();
        /** @type {?} */
        const e = elem.getBoundingClientRect();
        top = e.top - b.top;
        left = e.left - b.left;
        /** @type {?} */
        let position = 'bottom';
        if (dateRange) {
            _selectorWidth = this.getSelectorDimension(selectorWidth) * 2;
        }
        else {
            _selectorWidth = this.getSelectorDimension(selectorWidth);
        }
        if (showTime) {
            _selectorHeight = this.getSelectorDimension(selectorHeight) + 36;
        }
        else {
            _selectorHeight = this.getSelectorDimension(selectorHeight);
        }
        if (top + elem.offsetHeight + _selectorHeight > window.innerHeight && top - _selectorHeight - 2 > 0) {
            top = top - _selectorHeight - 2;
            position = 'top';
        }
        else {
            top = top + elem.offsetHeight + 2;
        }
        if (left + _selectorWidth > b.width) {
            left = b.width - _selectorWidth - 15;
        }
        left = left > 0 ? left : 0;
        return { top, left, position };
    }
    /**
     * @private
     * @param {?} value
     * @return {?}
     */
    getSelectorDimension(value) {
        return Number(value.replace(PX, EMPTY_STR));
    }
}
FarrisDatePickerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-datepicker]',
                exportAs: 'farris-datepicker',
                providers: [
                    UtilService,
                    DatepickerLocaleService,
                    DefaultConfigService,
                    NGX_DP_VALUE_ACCESSOR,
                    NGX_DP_VALIDATORS
                ]
            },] }
];
/** @nocollapse */
FarrisDatePickerDirective.ctorParameters = () => [
    { type: DatepickerLocaleService },
    { type: UtilService },
    { type: ViewContainerRef },
    { type: ComponentFactoryResolver },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: DefaultConfigService },
    { type: NgZone }
];
FarrisDatePickerDirective.propDecorators = {
    options: [{ type: Input }],
    locale: [{ type: Input }],
    defaultMonth: [{ type: Input }],
    dateChanged: [{ type: Output }],
    inputFieldChanged: [{ type: Output }],
    calendarViewChanged: [{ type: Output }],
    calendarToggle: [{ type: Output }],
    rangeDateSelection: [{ type: Output }],
    onKeyUp: [{ type: HostListener, args: [KEYUP, ['$event'],] }],
    onBlur: [{ type: HostListener, args: [BLUR,] }]
};
if (false) {
    /** @type {?} */
    FarrisDatePickerDirective.prototype.options;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.locale;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.defaultMonth;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.dateChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.inputFieldChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.calendarViewChanged;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.calendarToggle;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.rangeDateSelection;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.inputText;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.preventClose;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.opts;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.onChangeCb;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.onTouchedCb;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.onClickWrapper;
    /** @type {?} */
    FarrisDatePickerDirective.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.utilService;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.vcRef;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.renderer;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.elem;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.config;
    /**
     * @type {?}
     * @private
     */
    FarrisDatePickerDirective.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,