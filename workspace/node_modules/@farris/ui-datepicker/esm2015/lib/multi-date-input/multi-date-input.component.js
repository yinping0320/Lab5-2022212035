/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ChangeDetectorRef, Component, ElementRef, EventEmitter, Injector, Input, Output, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
import { BehaviorSubject } from 'rxjs';
import { UtilService } from '../services/farris-datepicker.util.service';
export class MultiSelectDateInputComponent {
    /**
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} overLayService
     * @param {?} cd
     * @param {?} utilService
     */
    constructor(injector, render, el, overLayService, cd, utilService) {
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.overLayService = overLayService;
        this.cd = cd;
        this.utilService = utilService;
        this.dates = '';
        this.separator = ',';
        this.placeholder = '';
        this.editable = true;
        this.orderBy = 'none';
        this.clickHandle = new EventEmitter();
        this.remove = new EventEmitter();
        this._dateItems = [];
        this.hiddenItemsCount$ = new BehaviorSubject(0);
        this.commonUtils = null;
        this.commonUtils = this.injector.get(CommonUtils, null);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overLayService) {
            this.overLayService.destory(this.shadowBox.nativeElement);
        }
        if (this.shadowBox) {
            this.shadowBox.nativeElement.remove();
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.dates && !changes.dates.isFirstChange()) {
            this.initDateItems();
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDateItems() {
        /** @type {?} */
        const _dateItems = this.dates.split(this.separator).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
        this._dateItems = this.utilService.orderSelectedDates(_dateItems, this.orderBy);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setHiddenCount();
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDateItems();
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.moveShadowToBody();
        }));
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClick($event) {
        $event.stopPropagation();
        this.toggleShadowBox($event, false);
        this.clickHandle.emit($event);
    }
    /**
     * @param {?} $event
     * @param {?} txt
     * @param {?} index
     * @return {?}
     */
    onRemove($event, txt, index) {
        if ($event) {
            $event.stopPropagation();
        }
        this.remove.emit({ index, value: txt });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onResized($event) {
        this.updateShadowBoxPosition($event);
        setTimeout((/**
         * @return {?}
         */
        () => {
            this.setHiddenCount();
            this.cd.detectChanges();
        }));
    }
    /**
     * @private
     * @return {?}
     */
    setHiddenCount() {
        /** @type {?} */
        let len = 0;
        if (!this._dateItems || !this._dateItems.length) {
            this.hiddenItemsCount$.next(len);
            return;
        }
        /** @type {?} */
        const items = Array.from(this.container.nativeElement.querySelectorAll('span.search-tag-item'));
        if (items && items.length) {
            len = items.map((/**
             * @param {?} n
             * @return {?}
             */
            (n) => {
                return n.offsetTop;
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n > 20)).length;
        }
        this.hiddenItemsCount$.next(len);
    }
    /**
     * @param {?=} __0
     * @return {?}
     */
    updateShadowBoxPosition({ top, left, width } = { top: null, left: null, width: null }) {
        if (!top && !left && !width) {
            /** @type {?} */
            const e = this.el.nativeElement.getBoundingClientRect();
            top = e.top;
            left = e.left;
            width = e.width;
        }
        this.render.setStyle(this.shadowBox.nativeElement, 'left', left + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'top', top + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'width', width + 'px');
        this.render.setStyle(this.shadowBox.nativeElement, 'zIndex', this.commonUtils.getFloatingLayerIndex());
    }
    /**
     * @private
     * @return {?}
     */
    moveShadowToBody() {
        this.updateShadowBoxPosition();
        document.body.append(this.shadowBox.nativeElement);
        this.overLayService.registerMouseEvent(this.shadowBox.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e.target && e.target.className.indexOf('search-box_delete-keys') > -1) {
                return;
            }
            if (!this.shadowBox || this.shadowBox.nativeElement.contains(e.target)) {
                return;
            }
            this.toggleShadowBox(null, false);
        }));
    }
    /**
     * @param {?} $event
     * @param {?=} show
     * @return {?}
     */
    toggleShadowBox($event, show = true) {
        if ($event) {
            $event.stopPropagation();
        }
        if (!this.hiddenItemsCount$.value) {
            show = false;
        }
        if (show) {
            this.updateShadowBoxPosition();
            this.render.removeStyle(this.shadowBox.nativeElement, 'display');
            this.container.nativeElement.style.visibility = 'hidden';
        }
        else {
            this.container.nativeElement.style.visibility = 'visible';
            this.render.setStyle(this.shadowBox.nativeElement, 'display', 'none');
        }
    }
}
MultiSelectDateInputComponent.decorators = [
    { type: Component, args: [{
                selector: 'multi-select-input',
                template: "\r\n<div #searchbox class=\"input-group f-search-box f-multi-select-date\" [class.f-state-disabled]=\"!editable\" resizeObserver (resize)=\"onResized($event)\"\r\n[attr.title]=\"dates\" (mousedown)=\"$event.preventDefault()\">\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more\" style=\"min-height: 26px;padding: 0px 5px;\" [style.height]=\"'26px'\" (click)=\"toggleShadowBox($event)\">\r\n        <div class=\"multi--content d-flex flex-row multi-date-display\" #tagContainer \r\n        [attr.placeholder]=\"placeholder\">\r\n            <span class=\"multi--item search-tag-item\" [class.multi-date-display-readonly]=\"!editable\" *ngFor=\"let txt of _dateItems; index as i\" >\r\n                <span class=\"search-tag\" >{{txt}}</span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" *ngIf=\"editable\" style=\"top:5px\" (click)=\"onRemove($event, txt, i)\"></i>\r\n            </span>\r\n        </div>\r\n\r\n        <div class=\"d-flex flex-row\" style=\"cursor: pointer;align-items: center;color: #2A87FF;font-weight: 600;\" *ngIf=\"hiddenItemsCount$ | async\">\r\n            <span class=\"multi--more-text\">+{{hiddenItemsCount$ | async}}</span>\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"editable\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear \" \r\n            style=\"position: absolute; height: 100%; right: 0px; top: 0px; z-index: 100; visibility: hidden;\">\r\n            <i class=\"f-icon modal_close\"></i></span>\r\n        <button class=\"btn f-cmp-iconbtn\" type=\"button\" (click)=\"onClick($event)\"><span class=\"f-icon f-icon-date\"></span></button>\r\n    </div>\r\n    \r\n</div>\r\n\r\n\r\n\r\n<div #searchbox2 class=\"input-group f-search-box f-cmp-inputgroup f-multi-select-date\" [class.f-state-disabled]=\"!editable\" style=\"position:absolute;display: none; z-index: 2999;\"\r\n (mousedown)=\"$event.preventDefault()\" >\r\n    <div class=\"form-control f-cmp-inputgroup--multi-wrapper multi-more  d-flex\" style=\"height: auto; min-height: 26px;padding: 0px 5px;\">\r\n        <div class=\"multi--content d-flex flex-row\" style=\"width: 100%;flex-wrap: wrap;align-items: center;\" #tagContainer>\r\n            <span class=\"multi--item search-tag-item\" [class.multi-date-display-readonly]=\"!editable\" *ngFor=\"let txt of _dateItems; index as i\">\r\n                <span class=\"search-tag\">{{txt}}</span>\r\n                <i class=\"f-icon f-icon-close search-box_delete-keys\" *ngIf=\"editable\" style=\"top:5px\" (click)=\"onRemove($event, txt, i)\"></i>\r\n            </span>\r\n\r\n        </div>\r\n    </div>\r\n    <div class=\"input-group-append f-cmp-iconbtn-wrapper\" *ngIf=\"editable\" style=\"position: relative;\" (mouseenter)=\"$event.stopPropagation()\">\r\n        <span class=\"input-group-text input-group-clear datepicker-clear \" \r\n            style=\"position: absolute; height: 100%; right: 0px; top: 0px; z-index: 100; visibility: hidden;\">\r\n            <i class=\"f-icon modal_close\"></i></span>\r\n        <button class=\"btn f-cmp-iconbtn\" type=\"button\" (click)=\"onClick($event)\"><span class=\"f-icon f-icon-date\"></span></button>\r\n    </div>\r\n</div>\r\n",
                styles: [`
        .multi-date-display {
            width: 100%;flex-wrap: wrap;align-items: center;cursor: text;
        }

        .multi-date-display:empty:before {
            content: attr(placeholder);
            color: #c4c4c4;
        }

        .multi-date-display-readonly {
            padding-right: 5px;
        }

        .f-multi-select-date.f-state-disabled .search-tag-item {
            background: #F1F3F7;
            border: 1px solid #F1F3F7;
            color:  #2D2F33;
        }

        .f-multi-select-date.f-state-disabled .multi--more-text {
            color: #c7c7c7;
        }

        `]
            }] }
];
/** @nocollapse */
MultiSelectDateInputComponent.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: OverLayHiddenService },
    { type: ChangeDetectorRef },
    { type: UtilService }
];
MultiSelectDateInputComponent.propDecorators = {
    dates: [{ type: Input }],
    separator: [{ type: Input }],
    placeholder: [{ type: Input }],
    editable: [{ type: Input }],
    orderBy: [{ type: Input }],
    clickHandle: [{ type: Output }],
    remove: [{ type: Output }],
    shadowBox: [{ type: ViewChild, args: ['searchbox2',] }],
    container: [{ type: ViewChild, args: ['searchbox',] }]
};
if (false) {
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.dates;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.separator;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.placeholder;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.editable;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.orderBy;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.clickHandle;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.remove;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.shadowBox;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.container;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype._dateItems;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.hiddenItemsCount$;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    MultiSelectDateInputComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    MultiSelectDateInputComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    MultiSelectDateInputComponent.prototype.el;
    /** @type {?} */
    MultiSelectDateInputComponent.prototype.overLayService;
    /**
     * @type {?}
     * @protected
     */
    MultiSelectDateInputComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    MultiSelectDateInputComponent.prototype.utilService;
}
//# sourceMappingURL=data:application/json;base64,