/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { codes, modifiers } from './keys';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { allPass, any, difference, identity, isNill } from './utils';
import * as i0 from "@angular/core";
/** @type {?} */
const $$ngOnDestroy = Symbol('OnDestroy');
export class ShortcutsService {
    constructor() {
        /**
         * 解析快捷键
         * 并为每个KEY 创建一个函数
         */
        this._shortcuts = [];
        /**
         * 控制按键时间.
         */
        this.throttleTime = 0;
        this._pressed = new Subject();
        /**
         * Streams of pressed events, can be used instead or with a command.
         */
        this.pressed$ = this._pressed.asObservable();
        /**
         * 禁用快捷键
         */
        this.disabled = false;
        this._ignored = ['INPUT', 'TEXTAREA', 'SELECT'];
        this.isAllowed = (/**
         * @param {?} shortcut
         * @return {?}
         */
        (shortcut) => {
            /** @type {?} */
            const target = (/** @type {?} */ (shortcut.event.target));
            if (target === shortcut.target) {
                return true;
            }
            if (shortcut.allowIn.length) {
                return !((/** @type {?} */ (difference(this._ignored, shortcut.allowIn)))).includes(target.nodeName);
            }
            return !((/** @type {?} */ (this._ignored))).includes(target.nodeName);
        });
        this.mapEvent = (/**
         * @param {?} event
         * @return {?}
         */
        event => this._shortcuts
            .map((/**
         * @param {?} shortcut
         * @return {?}
         */
        shortcut => Object.assign({}, shortcut, {
            predicates: any(identity, shortcut.predicates.map((/**
             * @param {?} predicates
             * @return {?}
             */
            (predicates) => allPass(predicates)(event)))),
            event: event
        })))
            .filter((/**
         * @param {?} shortcut
         * @return {?}
         */
        shortcut => shortcut.predicates))
            .reduce((/**
         * @param {?} acc
         * @param {?} shortcut
         * @return {?}
         */
        (acc, shortcut) => (acc.priority > shortcut.priority ? acc : shortcut)), (/** @type {?} */ ({
            priority: 0
        }))));
        /**
         * transforms a shortcut to:
         * a predicate function
         */
        this.getKeys = (/**
         * @param {?} command
         * @return {?}
         */
        (command) => command.map((/**
         * @param {?} key
         * @return {?}
         */
        key => key.trim())).filter((/**
         * @param {?} key
         * @return {?}
         */
        key => key !== '+'))
            .map((/**
         * @param {?} key
         * @return {?}
         */
        key => {
            // for modifiers like control key
            // look for event['ctrlKey']
            // otherwise use the keyCode
            if (modifiers.hasOwnProperty(key)) {
                return (/**
                 * @param {?} event
                 * @return {?}
                 */
                event => !!event[modifiers[key]]);
            }
            return (/**
             * @param {?} event
             * @return {?}
             */
            event => codes[key]
                ? event.keyCode === codes[key] || event.key === key
                : event.keyCode === key.toUpperCase().charCodeAt(0));
        })));
        // this.keydown$ = fromEvent(document, 'keydown').pipe(
        //     filter(_ => !this.disabled),
        //     map(this.mapEvent),
        //     filter(
        //         (shortcut: ParsedShortcut) =>
        //             !shortcut.target || shortcut.event.target === shortcut.target
        //     ),
        //     filter((shortcut: ParsedShortcut) => isFunction(shortcut.command)),
        //     filter(this.isAllowed),
        //     tap((shortcut: any) => !shortcut.preventDefault || shortcut.event.preventDefault()),
        //     debounce(shortcut => timer(shortcut.throttleTime)),
        //     tap(shortcut => shortcut.command({ event: shortcut.event, key: shortcut.key })),
        //     tap(shortcut => this._pressed.next({ event: shortcut.event, key: shortcut.key })),
        //     catchError(error => of(error))
        // );
        // this.subscription = this.keydown$.subscribe();
    }
    /**
     * @private
     * @return {?}
     */
    get shortcuts() {
        return this._shortcuts;
    }
    /**
     * Remove subscription.
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    }
    /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    enable() {
        this.disabled = false;
        return this;
    }
    /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    disable() {
        this.disabled = true;
        return this;
    }
    /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    isDisabled() {
        return this.disabled;
    }
    /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    add(shortcuts, instance) {
        shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
        if (instance) {
            const [key] = [...shortcuts.map((/**
                 * @param {?} shortcut
                 * @return {?}
                 */
                shortcut => shortcut.key))];
            this.bindOnDestroy(instance, key);
        }
        this._shortcuts.push(...this.parseCommand(shortcuts));
        return this;
    }
    /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @private
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    bindOnDestroy(instance, keys) {
        if (instance.ngOnDestroy) {
            instance[$$ngOnDestroy] = instance.ngOnDestroy;
        }
        /** @type {?} */
        const that = this;
        instance.ngOnDestroy = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            const onDestroy = instance[$$ngOnDestroy];
            if (onDestroy) {
                onDestroy.apply(this);
            }
            that.remove(keys);
        });
        return this;
    }
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    remove(key) {
        /** @type {?} */
        const keys = Array.isArray(key) ? key : [key];
        this._shortcuts = this._shortcuts.filter((/**
         * @param {?} shortcut
         * @return {?}
         */
        shortcut => {
            return !shortcut.key.find((/**
             * @param {?} sKey
             * @return {?}
             */
            sKey => {
                return keys.filter((/**
                 * @param {?} k
                 * @return {?}
                 */
                k => k === sKey)).length > 0;
            }));
        }));
        return this;
    }
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    select(key) {
        return this.pressed$.pipe(filter((/**
         * @param {?} __0
         * @return {?}
         */
        ({ event, key: eventKeys }) => {
            return !!eventKeys.find((/**
             * @param {?} eventKey
             * @return {?}
             */
            eventKey => eventKey === key));
        })));
    }
    /**
     * Parse each command using getKeys function
     * @private
     * @param {?} command
     * @return {?}
     */
    parseCommand(command) {
        /** @type {?} */
        const commands = Array.isArray(command) ? command : [command];
        return commands.map((/**
         * @param {?} cmd
         * @return {?}
         */
        (cmd) => {
            /** @type {?} */
            const keys = Array.isArray(cmd.key) ? cmd.key : [cmd.key];
            /** @type {?} */
            const priority = Math.max(...keys.map((/**
             * @param {?} key
             * @return {?}
             */
            key => key.split(' ').length)));
            /** @type {?} */
            const predicates = keys.map((/**
             * @param {?} key
             * @return {?}
             */
            key => this.getKeys(key.split(' '))));
            return (/** @type {?} */ (Object.assign({}, cmd, { allowIn: cmd.allowIn || [], key: keys, throttle: isNill(cmd.throttleTime) ? this.throttleTime : cmd.throttleTime, priority: priority, predicates: predicates })));
        }));
    }
}
ShortcutsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
ShortcutsService.ctorParameters = () => [];
/** @nocollapse */ ShortcutsService.ngInjectableDef = i0.defineInjectable({ factory: function ShortcutsService_Factory() { return new ShortcutsService(); }, token: ShortcutsService, providedIn: "root" });
if (false) {
    /**
     * 解析快捷键
     * 并为每个KEY 创建一个函数
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._shortcuts;
    /**
     * 控制按键时间.
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.throttleTime;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._pressed;
    /**
     * Streams of pressed events, can be used instead or with a command.
     * @type {?}
     */
    ShortcutsService.prototype.pressed$;
    /**
     * 禁用快捷键
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._ignored;
    /**
     * Subscription for on destroy.
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.keydown$;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.isAllowed;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.mapEvent;
    /**
     * transforms a shortcut to:
     * a predicate function
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.getKeys;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hvcnRjdXRzLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi9zaG9ydGN1dHMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBYSxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUUxQyxPQUFPLEVBQTJCLE9BQU8sRUFBdUIsTUFBTSxNQUFNLENBQUM7QUFFN0UsT0FBTyxFQUFPLE1BQU0sRUFBNkIsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFjLE1BQU0sRUFBRSxNQUFNLFNBQVMsQ0FBQzs7O01BRTNFLGFBQWEsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO0FBS3pDLE1BQU0sT0FBTyxnQkFBZ0I7SUFpRXpCOzs7OztRQTVEUSxlQUFVLEdBQXFCLEVBQUUsQ0FBQzs7OztRQUtsQyxpQkFBWSxHQUFHLENBQUMsQ0FBQztRQUVqQixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQXVCLENBQUM7Ozs7UUFLL0MsYUFBUSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7Ozs7UUFLdkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixhQUFRLEdBQUcsQ0FBQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBUzNDLGNBQVM7Ozs7UUFBRyxDQUFDLFFBQXdCLEVBQUUsRUFBRTs7a0JBQ3ZDLE1BQU0sR0FBRyxtQkFBQSxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBZTtZQUNuRCxJQUFJLE1BQU0sS0FBSyxRQUFRLENBQUMsTUFBTSxFQUFFO2dCQUM1QixPQUFPLElBQUksQ0FBQzthQUNmO1lBQ0QsSUFBSSxRQUFRLENBQUMsT0FB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L0Msb0NBQXlCOzs7OztJQUV6QixvQ0FBbUQ7Ozs7OztJQUtuRCx3Q0FBNEM7Ozs7O0lBRTVDLG9DQUFpQjs7Ozs7SUFFakIscUNBU0M7Ozs7O0lBRUQsb0NBYXdCOzs7Ozs7O0lBOEh4QixtQ0FZRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBjb2RlcywgbW9kaWZpZXJzIH0gZnJvbSAnLi9rZXlzJztcclxuXHJcbmltcG9ydCB7U3Vic2NyaXB0aW9uLCBPYnNlcnZhYmxlLCBTdWJqZWN0LCBmcm9tRXZlbnQsIHRpbWVyLCBvZn0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFNob3J0Y3V0RXZlbnRPdXRwdXQsIFBhcnNlZFNob3J0Y3V0LCBTaG9ydGN1dElucHV0IH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IG1hcCwgZmlsdGVyLCB0YXAsIGRlYm91bmNlLCBjYXRjaEVycm9yIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBhbGxQYXNzLCBhbnksIGRpZmZlcmVuY2UsIGlkZW50aXR5LCBpc0Z1bmN0aW9uLCBpc05pbGwgfSBmcm9tICcuL3V0aWxzJztcclxuXHJcbmNvbnN0ICQkbmdPbkRlc3Ryb3kgPSBTeW1ib2woJ09uRGVzdHJveScpO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTaG9ydGN1dHNTZXJ2aWNlIGltcGxlbWVudHMgT25EZXN0cm95IHtcclxuICAgIC8qKlxyXG4gICAgICog6Kej5p6Q5b+r5o236ZSuXHJcbiAgICAgKiDlubbkuLrmr4/kuKpLRVkg5Yib5bu65LiA5Liq5Ye95pWwXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgX3Nob3J0Y3V0czogUGFyc2VkU2hvcnRjdXRbXSA9IFtdO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog5o6n5Yi25oyJ6ZSu5pe26Ze0LlxyXG4gICAgICovXHJcbiAgICBwcml2YXRlIHRocm90dGxlVGltZSA9IDA7XHJcblxyXG4gICAgcHJpdmF0ZSBfcHJlc3NlZCA9IG5ldyBTdWJqZWN0PFNob3J0Y3V0RXZlbnRPdXRwdXQ+KCk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBTdHJlYW1zIG9mIHByZXNzZWQgZXZlbnRzLCBjYW4gYmUgdXNlZCBpbnN0ZWFkIG9yIHdpdGggYSBjb21tYW5kLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgcHJlc3NlZCQgPSB0aGlzLl9wcmVzc2VkLmFzT2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICog56aB55So5b+r5o236ZSuXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZGlzYWJsZWQgPSBmYWxzZTtcclxuXHJcbiAgICBwcml2YXRlIF9pZ25vcmVkID0gWydJTlBVVCcsICdURVhUQVJFQScsICdTRUxFQ1QnXTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFN1YnNjcmlwdGlvbiBmb3Igb24gZGVzdHJveS5cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuXHJcbiAgICBwcml2YXRlIGtleWRvd24kO1xyXG5cclxuICAgIHByaXZhdGUgaXNBbGxvd2VkID0gKHNob3J0Y3V0OiBQYXJzZWRTaG9ydGN1dCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHNob3J0Y3V0LmV2ZW50LnRhcmdldCBhcyBIVE1MRWxlbWVudDtcclxuICAgICAgICBpZiAodGFyZ2V0ID09PSBzaG9ydGN1dC50YXJnZXQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzaG9ydGN1dC5hbGxvd0luLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISg8YW55PmRpZmZlcmVuY2UodGhpcy5faWdub3JlZCwgc2hvcnRjdXQuYWxsb3dJbikpLmluY2x1ZGVzKHRhcmdldC5ub2RlTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAhKDxhbnk+dGhpcy5faWdub3JlZCkuaW5jbHVkZXModGFyZ2V0Lm5vZGVOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG1hcEV2ZW50ID0gZXZlbnQgPT4gdGhpcy5fc2hvcnRjdXRzXHJcbiAgICAgICAgLm1hcChzaG9ydGN1dCA9PlxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHt9LCBzaG9ydGN1dCwge1xyXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlczogYW55KFxyXG4gICAgICAgICAgICAgICAgICAgIGlkZW50aXR5LFxyXG4gICAgICAgICAgICAgICAgICAgIHNob3J0Y3V0LnByZWRpY2F0ZXMubWFwKChwcmVkaWNhdGVzOiBhbnkpID0+IGFsbFBhc3MocHJlZGljYXRlcykoZXZlbnQpKVxyXG4gICAgICAgICAgICAgICAgKSxcclxuICAgICAgICAgICAgICAgIGV2ZW50OiBldmVudFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIClcclxuICAgICAgICAuZmlsdGVyKHNob3J0Y3V0ID0+IHNob3J0Y3V0LnByZWRpY2F0ZXMpXHJcbiAgICAgICAgLnJlZHVjZSgoYWNjLCBzaG9ydGN1dCkgPT4gKGFjYy5wcmlvcml0eSA+IHNob3J0Y3V0LnByaW9yaXR5ID8gYWNjIDogc2hvcnRjdXQpLCB7XHJcbiAgICAgICAgICAgIHByaW9yaXR5OiAwXHJcbiAgICAgICAgfSBhcyBQYXJzZWRTaG9ydGN1dClcclxuXHJcbiAgICBwcml2YXRlIGdldCBzaG9ydGN1dHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3Nob3J0Y3V0cztcclxuICAgIH1cclxuXHJcblxyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIHRoaXMua2V5ZG93biQgPSBmcm9tRXZlbnQoZG9jdW1lbnQsICdrZXlkb3duJykucGlwZShcclxuICAgICAgICAvLyAgICAgZmlsdGVyKF8gPT4gIXRoaXMuZGlzYWJsZWQpLFxyXG4gICAgICAgIC8vICAgICBtYXAodGhpcy5tYXBFdmVudCksXHJcbiAgICAgICAgLy8gICAgIGZpbHRlcihcclxuICAgICAgICAvLyAgICAgICAgIChzaG9ydGN1dDogUGFyc2VkU2hvcnRjdXQpID0+XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgIXNob3J0Y3V0LnRhcmdldCB8fCBzaG9ydGN1dC5ldmVudC50YXJnZXQgPT09IHNob3J0Y3V0LnRhcmdldFxyXG4gICAgICAgIC8vICAgICApLFxyXG4gICAgICAgIC8vICAgICBmaWx0ZXIoKHNob3J0Y3V0OiBQYXJzZWRTaG9ydGN1dCkgPT4gaXNGdW5jdGlvbihzaG9ydGN1dC5jb21tYW5kKSksXHJcbiAgICAgICAgLy8gICAgIGZpbHRlcih0aGlzLmlzQWxsb3dlZCksXHJcbiAgICAgICAgLy8gICAgIHRhcCgoc2hvcnRjdXQ6IGFueSkgPT4gIXNob3J0Y3V0LnByZXZlbnREZWZhdWx0IHx8IHNob3J0Y3V0LmV2ZW50LnByZXZlbnREZWZhdWx0KCkpLFxyXG4gICAgICAgIC8vICAgICBkZWJvdW5jZShzaG9ydGN1dCA9PiB0aW1lcihzaG9ydGN1dC50aHJvdHRsZVRpbWUpKSxcclxuICAgICAgICAvLyAgICAgdGFwKHNob3J0Y3V0ID0+IHNob3J0Y3V0LmNvbW1hbmQoeyBldmVudDogc2hvcnRjdXQuZXZlbnQsIGtleTogc2hvcnRjdXQua2V5IH0pKSxcclxuICAgICAgICAvLyAgICAgdGFwKHNob3J0Y3V0ID0+IHRoaXMuX3ByZXNzZWQubmV4dCh7IGV2ZW50OiBzaG9ydGN1dC5ldmVudCwga2V5OiBzaG9ydGN1dC5rZXkgfSkpLFxyXG4gICAgICAgIC8vICAgICBjYXRjaEVycm9yKGVycm9yID0+IG9mKGVycm9yKSlcclxuICAgICAgICAvLyApO1xyXG4gICAgICAgIC8vIHRoaXMuc3Vic2NyaXB0aW9uID0gdGhpcy5rZXlkb3duJC5zdWJzY3JpYmUoKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlbW92ZSBzdWJzY3JpcHRpb24uXHJcbiAgICAgKi9cclxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xyXG4gICAgICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbikge1xyXG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEVuYWJsZSBhbGwga2V5Ym9hcmQgc2hvcnRjdXRzXHJcbiAgICAgKi9cclxuICAgIGVuYWJsZSgpOiBTaG9ydGN1dHNTZXJ2aWNlIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBEaXNhYmxlIGFsbCBrZXlib2FyZCBzaG9ydGN1dHNcclxuICAgICAqL1xyXG4gICAgZGlzYWJsZSgpOiBTaG9ydGN1dHNTZXJ2aWNlIHtcclxuICAgICAgICB0aGlzLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGFsbCBrZXlib2FyZCBzaG9ydGN1dHMgYXJlIGRpc2FibGVkLlxyXG4gICAgICovXHJcbiAgICBpc0Rpc2FibGVkKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmRpc2FibGVkO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQWRkIG5ldyBzaG9ydGN1dC9zXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhZGQoc2hvcnRjdXRzOiBTaG9ydGN1dElucHV0W10gfCBTaG9ydGN1dElucHV0LCBpbnN0YW5jZT86IGFueSk6IFNob3J0Y3V0c1NlcnZpY2Uge1xyXG4gICAgICAgIHNob3J0Y3V0cyA9IEFycmF5LmlzQXJyYXkoc2hvcnRjdXRzKSA/IHNob3J0Y3V0cyA6IFtzaG9ydGN1dHNdO1xyXG4gICAgICAgIGlmIChpbnN0YW5jZSkge1xyXG4gICAgICAgICAgICBjb25zdCBba2V5XSA9IFsuLi5zaG9ydGN1dHMubWFwKHNob3J0Y3V0ID0+IHNob3J0Y3V0LmtleSldO1xyXG4gICAgICAgICAgICB0aGlzLmJpbmRPbkRlc3Ryb3koaW5zdGFuY2UsIGtleSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLl9zaG9ydGN1dHMucHVzaCguLi50aGlzLnBhcnNlQ29tbWFuZChzaG9ydGN1dHMpKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIGJpbmQgdG8gdGhlIGNvbXBvbmVudCBuZ09uRGVzdHJveSB0byByZW1vdmUgcmVsYXRlZCBrZXlzXHJcbiAgICAgKiB3aGVuIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQuXHJcbiAgICAgKiBAcGFyYW0gaW5zdGFuY2UgLSBjb21wb25lbnQgdG8gcmVtb3ZlIGtleXMgd2hlbiBuZ09uRGVzdHJveSBpcyBjYWxsZWQuXHJcbiAgICAgKiBAcGFyYW0ga2V5c1xyXG4gICAgICovXHJcbiAgICBwcml2YXRlIGJpbmRPbkRlc3Ryb3koaW5zdGFuY2U6IGFueSwga2V5czogc3RyaW5nIHwgc3RyaW5nW10pOiBTaG9ydGN1dHNTZXJ2aWNlIHtcclxuICAgICAgICBpZiAoaW5zdGFuY2UubmdPbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgaW5zdGFuY2VbJCRuZ09uRGVzdHJveV0gPSBpbnN0YW5jZS5uZ09uRGVzdHJveTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdGhhdCA9IHRoaXM7XHJcbiAgICAgICAgaW5zdGFuY2UubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgY29uc3Qgb25EZXN0cm95ID0gaW5zdGFuY2VbJCRuZ09uRGVzdHJveV07XHJcbiAgICAgICAgICAgIGlmIChvbkRlc3Ryb3kpIHtcclxuICAgICAgICAgICAgICAgIG9uRGVzdHJveS5hcHBseSh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGF0LnJlbW92ZShrZXlzKTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVtb3ZlIGEgY29tbWFuZCBiYXNlZCBvbiBrZXkgb3IgYXJyYXkgb2Yga2V5cy5cclxuICAgICAqIGNhbiBiZSB1c2VkIGZvciBjbGVhbnVwLlxyXG4gICAgICogQHBhcmFtIGtleVxyXG4gICAgICogQHJldHVybnNcclxuICAgICAqL1xyXG4gICAgcHVibGljIHJlbW92ZShrZXk6IHN0cmluZyB8IHN0cmluZ1tdKTogU2hvcnRjdXRzU2VydmljZSB7XHJcbiAgICAgICAgY29uc3Qga2V5czogc3RyaW5nW10gPSBBcnJheS5pc0FycmF5KGtleSkgPyBrZXkgOiBba2V5XTtcclxuICAgICAgICB0aGlzLl9zaG9ydGN1dHMgPSB0aGlzLl9zaG9ydGN1dHMuZmlsdGVyKHNob3J0Y3V0ID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFzaG9ydGN1dC5rZXkuZmluZChzS2V5ID0+IHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBrZXlzLmZpbHRlcihrID0+IGsgPT09IHNLZXkpLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIG9mIGtleWJvYXJkIHNob3J0Y3V0IGZpbHRlcmVkIGJ5IGEgc3BlY2lmaWMga2V5LlxyXG4gICAgICogQHBhcmFtIGtleSAtIHRoZSBrZXkgdG8gZmlsdGVyIHRoZSBvYnNlcnZhYmxlIGJ5LlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc2VsZWN0KGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxTaG9ydGN1dEV2ZW50T3V0cHV0PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlc3NlZCQucGlwZShcclxuICAgICAgICAgICAgZmlsdGVyKCh7ZXZlbnQsIGtleTogZXZlbnRLZXlzfSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhZXZlbnRLZXlzLmZpbmQoZXZlbnRLZXkgPT4gZXZlbnRLZXkgPT09IGtleSk7XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIHRyYW5zZm9ybXMgYSBzaG9ydGN1dCB0bzpcclxuICAgICAqIGEgcHJlZGljYXRlIGZ1bmN0aW9uXHJcbiAgICAgKi9cclxuICAgIHByaXZhdGUgZ2V0S2V5cyA9IChjb21tYW5kOiBzdHJpbmdbXSkgPT4gY29tbWFuZC5tYXAoa2V5ID0+IGtleS50cmltKCkpLmZpbHRlcihrZXkgPT4ga2V5ICE9PSAnKycpXHJcbiAgICAubWFwKGtleSA9PiB7XHJcbiAgICAgICAgLy8gZm9yIG1vZGlmaWVycyBsaWtlIGNvbnRyb2wga2V5XHJcbiAgICAgICAgLy8gbG9vayBmb3IgZXZlbnRbJ2N0cmxLZXknXVxyXG4gICAgICAgIC8vIG90aGVyd2lzZSB1c2UgdGhlIGtleUNvZGVcclxuICAgICAgICBpZiAobW9kaWZpZXJzLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGV2ZW50ID0+ICEhZXZlbnRbbW9kaWZpZXJzW2tleV1dO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZXZlbnQgPT5cclxuICAgICAgICAgICAgY29kZXNba2V5XVxyXG4gICAgICAgICAgICAgICAgPyBldmVudC5rZXlDb2RlID09PSBjb2Rlc1trZXldIHx8IGV2ZW50LmtleSA9PT0ga2V5XHJcbiAgICAgICAgICAgICAgICA6IGV2ZW50LmtleUNvZGUgPT09IGtleS50b1VwcGVyQ2FzZSgpLmNoYXJDb2RlQXQoMCk7XHJcbiAgICB9KVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUGFyc2UgZWFjaCBjb21tYW5kIHVzaW5nIGdldEtleXMgZnVuY3Rpb25cclxuICAgICAqL1xyXG4gICAgcHJpdmF0ZSBwYXJzZUNvbW1hbmQoY29tbWFuZDogU2hvcnRjdXRJbnB1dCB8IFNob3J0Y3V0SW5wdXRbXSk6IFBhcnNlZFNob3J0Y3V0W10ge1xyXG4gICAgICAgIGNvbnN0IGNvbW1hbmRzID0gQXJyYXkuaXNBcnJheShjb21tYW5kKSA/IGNvbW1hbmQgOiBbY29tbWFuZF07XHJcbiAgICAgICAgcmV0dXJuIGNvbW1hbmRzLm1hcCggKGNtZDogU2hvcnRjdXRJbnB1dCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuaXNBcnJheShjbWQua2V5KSA/IGNtZC5rZXkgOiBbY21kLmtleV07XHJcbiAgICAgICAgICAgIGNvbnN0IHByaW9yaXR5ID0gTWF0aC5tYXgoLi4ua2V5cy5tYXAoa2V5ID0+IGtleS5zcGxpdCgnICcpLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICBjb25zdCBwcmVkaWNhdGVzID0ga2V5cy5tYXAoa2V5ID0+IHRoaXMuZ2V0S2V5cyhrZXkuc3BsaXQoJyAnKSkpO1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgLi4uY21kLFxyXG4gICAgICAgICAgICAgICAgYWxsb3dJbjogY21kLmFsbG93SW4gfHwgW10sXHJcbiAgICAgICAgICAgICAgICBrZXk6IGtleXMsXHJcbiAgICAgICAgICAgICAgICB0aHJvdHRsZTogaXNOaWxsKGNtZC50aHJvdHRsZVRpbWUpID8gdGhpcy50aHJvdHRsZVRpbWUgOiBjbWQudGhyb3R0bGVUaW1lLFxyXG4gICAgICAgICAgICAgICAgcHJpb3JpdHk6IHByaW9yaXR5LFxyXG4gICAgICAgICAgICAgICAgcHJlZGljYXRlczogcHJlZGljYXRlc1xyXG4gICAgICAgICAgICB9IGFzIFBhcnNlZFNob3J0Y3V0O1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==