(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-shortcuts', ['exports', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-shortcuts'] = {}),global.rxjs,global.rxjs.operators,global.ng.core));
}(this, (function (exports,rxjs,operators,i0) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var isMac = (navigator.userAgent.indexOf('Mac OS') !== -1);
    /** @type {?} */
    var codes = {
        'backspace': 8,
        'tab': 9,
        'enter': 13,
        'pause/break': 19,
        'caps lock': 20,
        'esc': 27,
        'space': 32,
        'page up': 33,
        'page down': 34,
        'end': 35,
        'home': 36,
        'left': 37,
        'up': 38,
        'right': 39,
        'down': 40,
        'insert': 45,
        'delete': 46,
        'numpad *': 106,
        'numpad +': 107,
        'numpad -': 109,
        'numpad .': 110,
        'numpad /': 111,
        'num lock': 144,
        'scroll lock': 145,
        'my computer': 182,
        'my calculator': 183,
        ';': 186,
        '=': 187,
        ',': 188,
        '-': 189,
        '.': 190,
        '/': 191,
        '`': 192,
        '[': 219,
        '\\': 220,
        ']': 221,
        "'": 222,
        'windows': 91,
        '⇧': 16,
        '⌥': 18,
        '⌃': 17,
        'pause': 19,
        'break': 19,
        'caps': 20,
        'return': 13,
        'escape': 27,
        'spc': 32,
        'pgup': 33,
        'pgdn': 34,
        'ins': 45,
        'del': 46,
        'F2': 113
    };
    /** @type {?} */
    var modifiers = {
        'shift': 'shiftKey',
        'ctrl': 'ctrlKey',
        'alt': 'altKey',
        'cmd': isMac ? 'metaKey' : 'ctrlKey',
        'command': isMac ? 'metaKey' : 'ctrlKey',
        'left command': 'metaKey',
        'right command': 'MetaRight',
        '⌘': isMac ? 'metaKey' : 'ctrlKey',
        'option': 'altKey',
        'ctl': 'ctrlKey',
        'control': 'ctrlKey',
    };

    var _this = this;
    /** @type {?} */
    var any = ( /**
     * @param {?} fn
     * @param {?} list
     * @return {?}
     */function (fn, list) {
        /** @type {?} */
        var idx = 0;
        while (idx < list.length) {
            if (fn(list[idx])) {
                return true;
            }
            idx += 1;
        }
        return false;
    });
    /** @type {?} */
    var identity = ( /**
     * @param {?} x
     * @return {?}
     */function (x) { return x; });
    /** @type {?} */
    var isNill = ( /**
     * @param {?} x
     * @return {?}
     */function (x) { return x == null; });
    /** @type {?} */
    var difference = ( /**
     * @param {?} first
     * @param {?} second
     * @return {?}
     */function (first, second) {
        return first.filter(( /**
         * @param {?} item
         * @return {?}
         */function (item) {
            return !(( /** @type {?} */(second))).some(( /**
             * @param {?} secondItem
             * @return {?}
             */function (secondItem) { return secondItem == item; }));
        }));
    });
    /** @type {?} */
    var allPass = ( /**
     * @param {?} preds
     * @return {?}
     */function (preds) {
        return ( /**
         * @param {...?} args
         * @return {?}
         */function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            /** @type {?} */
            var idx = 0;
            /** @type {?} */
            var len = preds.length;
            while (idx < len) {
                if (!preds[idx].apply(_this, args)) {
                    return false;
                }
                idx += 1;
            }
            return true;
        });
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var $$ngOnDestroy = Symbol('OnDestroy');
    var ShortcutsService = /** @class */ (function () {
        function ShortcutsService() {
            var _this = this;
            /**
             * 解析快捷键
             * 并为每个KEY 创建一个函数
             */
            this._shortcuts = [];
            /**
             * 控制按键时间.
             */
            this.throttleTime = 0;
            this._pressed = new rxjs.Subject();
            /**
             * Streams of pressed events, can be used instead or with a command.
             */
            this.pressed$ = this._pressed.asObservable();
            /**
             * 禁用快捷键
             */
            this.disabled = false;
            this._ignored = ['INPUT', 'TEXTAREA', 'SELECT'];
            this.isAllowed = ( /**
             * @param {?} shortcut
             * @return {?}
             */function (shortcut) {
                /** @type {?} */
                var target = ( /** @type {?} */(shortcut.event.target));
                if (target === shortcut.target) {
                    return true;
                }
                if (shortcut.allowIn.length) {
                    return !(( /** @type {?} */(difference(_this._ignored, shortcut.allowIn)))).includes(target.nodeName);
                }
                return !(( /** @type {?} */(_this._ignored))).includes(target.nodeName);
            });
            this.mapEvent = ( /**
             * @param {?} event
             * @return {?}
             */function (event) {
                return _this._shortcuts
                    .map(( /**
             * @param {?} shortcut
             * @return {?}
             */function (shortcut) {
                    return Object.assign({}, shortcut, {
                        predicates: any(identity, shortcut.predicates.map(( /**
                         * @param {?} predicates
                         * @return {?}
                         */function (predicates) { return allPass(predicates)(event); }))),
                        event: event
                    });
                }))
                    .filter(( /**
             * @param {?} shortcut
             * @return {?}
             */function (shortcut) { return shortcut.predicates; }))
                    .reduce(( /**
             * @param {?} acc
             * @param {?} shortcut
             * @return {?}
             */function (acc, shortcut) { return (acc.priority > shortcut.priority ? acc : shortcut); }), ( /** @type {?} */({
                    priority: 0
                })));
            });
            /**
             * transforms a shortcut to:
             * a predicate function
             */
            this.getKeys = ( /**
             * @param {?} command
             * @return {?}
             */function (command) {
                return command.map(( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) { return key.trim(); })).filter(( /**
                 * @param {?} key
                 * @return {?}
                 */function (key) { return key !== '+'; }))
                    .map(( /**
             * @param {?} key
             * @return {?}
             */function (key) {
                    // for modifiers like control key
                    // look for event['ctrlKey']
                    // otherwise use the keyCode
                    if (modifiers.hasOwnProperty(key)) {
                        return ( /**
                         * @param {?} event
                         * @return {?}
                         */function (event) { return !!event[modifiers[key]]; });
                    }
                    return ( /**
                     * @param {?} event
                     * @return {?}
                     */function (event) {
                        return codes[key]
                            ? event.keyCode === codes[key] || event.key === key
                            : event.keyCode === key.toUpperCase().charCodeAt(0);
                    });
                }));
            });
            // this.keydown$ = fromEvent(document, 'keydown').pipe(
            //     filter(_ => !this.disabled),
            //     map(this.mapEvent),
            //     filter(
            //         (shortcut: ParsedShortcut) =>
            //             !shortcut.target || shortcut.event.target === shortcut.target
            //     ),
            //     filter((shortcut: ParsedShortcut) => isFunction(shortcut.command)),
            //     filter(this.isAllowed),
            //     tap((shortcut: any) => !shortcut.preventDefault || shortcut.event.preventDefault()),
            //     debounce(shortcut => timer(shortcut.throttleTime)),
            //     tap(shortcut => shortcut.command({ event: shortcut.event, key: shortcut.key })),
            //     tap(shortcut => this._pressed.next({ event: shortcut.event, key: shortcut.key })),
            //     catchError(error => of(error))
            // );
            // this.subscription = this.keydown$.subscribe();
        }
        Object.defineProperty(ShortcutsService.prototype, "shortcuts", {
            get: /**
             * @private
             * @return {?}
             */ function () {
                return this._shortcuts;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * Remove subscription.
         */
        /**
         * Remove subscription.
         * @return {?}
         */
        ShortcutsService.prototype.ngOnDestroy = /**
         * Remove subscription.
         * @return {?}
         */
            function () {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                }
            };
        /**
         * Enable all keyboard shortcuts
         */
        /**
         * Enable all keyboard shortcuts
         * @return {?}
         */
        ShortcutsService.prototype.enable = /**
         * Enable all keyboard shortcuts
         * @return {?}
         */
            function () {
                this.disabled = false;
                return this;
            };
        /**
         * Disable all keyboard shortcuts
         */
        /**
         * Disable all keyboard shortcuts
         * @return {?}
         */
        ShortcutsService.prototype.disable = /**
         * Disable all keyboard shortcuts
         * @return {?}
         */
            function () {
                this.disabled = true;
                return this;
            };
        /**
         * Check if all keyboard shortcuts are disabled.
         */
        /**
         * Check if all keyboard shortcuts are disabled.
         * @return {?}
         */
        ShortcutsService.prototype.isDisabled = /**
         * Check if all keyboard shortcuts are disabled.
         * @return {?}
         */
            function () {
                return this.disabled;
            };
        /**
         * Add new shortcut/s
         */
        /**
         * Add new shortcut/s
         * @param {?} shortcuts
         * @param {?=} instance
         * @return {?}
         */
        ShortcutsService.prototype.add = /**
         * Add new shortcut/s
         * @param {?} shortcuts
         * @param {?=} instance
         * @return {?}
         */
            function (shortcuts, instance) {
                var _a;
                shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
                if (instance) {
                    var _b = __read(__spread(shortcuts.map(( /**
                     * @param {?} shortcut
                     * @return {?}
                     */function (shortcut) { return shortcut.key; }))), 1), key = _b[0];
                    this.bindOnDestroy(instance, key);
                }
                (_a = this._shortcuts).push.apply(_a, __spread(this.parseCommand(shortcuts)));
                return this;
            };
        /**
         * bind to the component ngOnDestroy to remove related keys
         * when component is destroyed.
         * @param instance - component to remove keys when ngOnDestroy is called.
         * @param keys
         */
        /**
         * bind to the component ngOnDestroy to remove related keys
         * when component is destroyed.
         * @private
         * @param {?} instance - component to remove keys when ngOnDestroy is called.
         * @param {?} keys
         * @return {?}
         */
        ShortcutsService.prototype.bindOnDestroy = /**
         * bind to the component ngOnDestroy to remove related keys
         * when component is destroyed.
         * @private
         * @param {?} instance - component to remove keys when ngOnDestroy is called.
         * @param {?} keys
         * @return {?}
         */
            function (instance, keys) {
                if (instance.ngOnDestroy) {
                    instance[$$ngOnDestroy] = instance.ngOnDestroy;
                }
                /** @type {?} */
                var that = this;
                instance.ngOnDestroy = ( /**
                 * @return {?}
                 */function () {
                    /** @type {?} */
                    var onDestroy = instance[$$ngOnDestroy];
                    if (onDestroy) {
                        onDestroy.apply(this);
                    }
                    that.remove(keys);
                });
                return this;
            };
        /**
         * Remove a command based on key or array of keys.
         * can be used for cleanup.
         * @param key
         * @returns
         */
        /**
         * Remove a command based on key or array of keys.
         * can be used for cleanup.
         * @param {?} key
         * @return {?}
         */
        ShortcutsService.prototype.remove = /**
         * Remove a command based on key or array of keys.
         * can be used for cleanup.
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var keys = Array.isArray(key) ? key : [key];
                this._shortcuts = this._shortcuts.filter(( /**
                 * @param {?} shortcut
                 * @return {?}
                 */function (shortcut) {
                    return !shortcut.key.find(( /**
                     * @param {?} sKey
                     * @return {?}
                     */function (sKey) {
                        return keys.filter(( /**
                         * @param {?} k
                         * @return {?}
                         */function (k) { return k === sKey; })).length > 0;
                    }));
                }));
                return this;
            };
        /**
         * Returns an observable of keyboard shortcut filtered by a specific key.
         * @param key - the key to filter the observable by.
         */
        /**
         * Returns an observable of keyboard shortcut filtered by a specific key.
         * @param {?} key - the key to filter the observable by.
         * @return {?}
         */
        ShortcutsService.prototype.select = /**
         * Returns an observable of keyboard shortcut filtered by a specific key.
         * @param {?} key - the key to filter the observable by.
         * @return {?}
         */
            function (key) {
                return this.pressed$.pipe(operators.filter(( /**
                 * @param {?} __0
                 * @return {?}
                 */function (_a) {
                    var event = _a.event, eventKeys = _a.key;
                    return !!eventKeys.find(( /**
                     * @param {?} eventKey
                     * @return {?}
                     */function (eventKey) { return eventKey === key; }));
                })));
            };
        /**
         * Parse each command using getKeys function
         */
        /**
         * Parse each command using getKeys function
         * @private
         * @param {?} command
         * @return {?}
         */
        ShortcutsService.prototype.parseCommand = /**
         * Parse each command using getKeys function
         * @private
         * @param {?} command
         * @return {?}
         */
            function (command) {
                var _this = this;
                /** @type {?} */
                var commands = Array.isArray(command) ? command : [command];
                return commands.map(( /**
                 * @param {?} cmd
                 * @return {?}
                 */function (cmd) {
                    /** @type {?} */
                    var keys = Array.isArray(cmd.key) ? cmd.key : [cmd.key];
                    /** @type {?} */
                    var priority = Math.max.apply(Math, __spread(keys.map(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) { return key.split(' ').length; }))));
                    /** @type {?} */
                    var predicates = keys.map(( /**
                     * @param {?} key
                     * @return {?}
                     */function (key) { return _this.getKeys(key.split(' ')); }));
                    return ( /** @type {?} */(__assign({}, cmd, { allowIn: cmd.allowIn || [], key: keys, throttle: isNill(cmd.throttleTime) ? _this.throttleTime : cmd.throttleTime, priority: priority, predicates: predicates })));
                }));
            };
        ShortcutsService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        ShortcutsService.ctorParameters = function () { return []; };
        /** @nocollapse */ ShortcutsService.ngInjectableDef = i0.defineInjectable({ factory: function ShortcutsService_Factory() { return new ShortcutsService(); }, token: ShortcutsService, providedIn: "root" });
        return ShortcutsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ShortcutsModule = /** @class */ (function () {
        function ShortcutsModule() {
        }
        /**
         * @return {?}
         */
        ShortcutsModule.forRoot = /**
         * @return {?}
         */
            function () {
                return {
                    ngModule: ShortcutsModule,
                    providers: [
                        ShortcutsService
                    ]
                };
            };
        ShortcutsModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [],
                        imports: [],
                        exports: []
                    },] }
        ];
        return ShortcutsModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.ShortcutsService = ShortcutsService;
    exports.ShortcutsModule = ShortcutsModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-shortcuts.umd.js.map