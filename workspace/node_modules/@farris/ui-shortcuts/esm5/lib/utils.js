var _this = this;
/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} x
 * @return {?}
 */
export function isFunction(x) {
    return typeof x === 'function';
}
/** @type {?} */
export var any = (/**
 * @param {?} fn
 * @param {?} list
 * @return {?}
 */
function (fn, list) {
    /** @type {?} */
    var idx = 0;
    while (idx < list.length) {
        if (fn(list[idx])) {
            return true;
        }
        idx += 1;
    }
    return false;
});
/** @type {?} */
export var identity = (/**
 * @param {?} x
 * @return {?}
 */
function (x) { return x; });
/** @type {?} */
export var isNill = (/**
 * @param {?} x
 * @return {?}
 */
function (x) { return x == null; });
/** @type {?} */
export var difference = (/**
 * @param {?} first
 * @param {?} second
 * @return {?}
 */
function (first, second) {
    return first.filter((/**
     * @param {?} item
     * @return {?}
     */
    function (item) { return !((/** @type {?} */ (second))).some((/**
     * @param {?} secondItem
     * @return {?}
     */
    function (secondItem) { return secondItem == item; })); }));
});
/** @type {?} */
export var allPass = (/**
 * @param {?} preds
 * @return {?}
 */
function (preds) { return (/**
 * @param {...?} args
 * @return {?}
 */
function () {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    /** @type {?} */
    var idx = 0;
    /** @type {?} */
    var len = preds.length;
    while (idx < len) {
        if (!preds[idx].apply(_this, args)) {
            return false;
        }
        idx += 1;
    }
    return true;
}); });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLXNob3J0Y3V0cy8iLCJzb3VyY2VzIjpbImxpYi91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxpQkFnQ0E7Ozs7Ozs7OztBQWhDQSxNQUFNLFVBQVUsVUFBVSxDQUFDLENBQU07SUFDN0IsT0FBTyxPQUFPLENBQUMsS0FBSyxVQUFVLENBQUM7QUFDbkMsQ0FBQzs7QUFFRCxNQUFNLEtBQU8sR0FBRzs7Ozs7QUFBRyxVQUFDLEVBQVksRUFBRSxJQUFXOztRQUNyQyxHQUFHLEdBQUcsQ0FBQztJQUNYLE9BQU8sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDdEIsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7WUFDZixPQUFPLElBQUksQ0FBQztTQUNmO1FBQ0QsR0FBRyxJQUFJLENBQUMsQ0FBQztLQUNaO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDakIsQ0FBQyxDQUFBOztBQUNELE1BQU0sS0FBTyxRQUFROzs7O0FBQUcsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLEVBQUQsQ0FBQyxDQUFBOztBQUU5QixNQUFNLEtBQU8sTUFBTTs7OztBQUFHLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxJQUFJLElBQUksRUFBVCxDQUFTLENBQUE7O0FBRXBDLE1BQU0sS0FBTyxVQUFVOzs7OztBQUFHLFVBQUMsS0FBWSxFQUFFLE1BQWE7SUFDbEQsT0FBQSxLQUFLLENBQUMsTUFBTTs7OztJQUFDLFVBQUEsSUFBSSxJQUFJLE9BQUEsQ0FBQyxDQUFDLG1CQUFLLE1BQU0sRUFBQSxDQUFDLENBQUMsSUFBSTs7OztJQUFDLFVBQUEsVUFBVSxJQUFFLE9BQUEsVUFBVSxJQUFFLElBQUksRUFBaEIsQ0FBZ0IsRUFBQyxFQUFqRCxDQUFpRCxFQUFDO0FBQXZFLENBQXVFLENBQUE7O0FBRTNFLE1BQU0sS0FBTyxPQUFPOzs7O0FBQUcsVUFBQSxLQUFLOzs7O0FBQUk7SUFBQyxjQUFPO1NBQVAsVUFBTyxFQUFQLHFCQUFPLEVBQVAsSUFBTztRQUFQLHlCQUFPOzs7UUFDaEMsR0FBRyxHQUFHLENBQUM7O1FBQ0wsR0FBRyxHQUFHLEtBQUssQ0FBQyxNQUFNO0lBQ3hCLE9BQU8sR0FBRyxHQUFHLEdBQUcsRUFBRTtRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUksRUFBRSxJQUFJLENBQUMsRUFBRTtZQUMvQixPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELEdBQUcsSUFBSSxDQUFDLENBQUM7S0FDWjtJQUNELE9BQU8sSUFBSSxDQUFDO0FBQ2hCLENBQUMsSUFBQSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGlzRnVuY3Rpb24oeDogYW55KTogeCBpcyBGdW5jdGlvbiB7XHJcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdmdW5jdGlvbic7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBhbnkgPSAoZm46IEZ1bmN0aW9uLCBsaXN0OiBhbnlbXSkgPT4ge1xyXG4gICAgbGV0IGlkeCA9IDA7XHJcbiAgICB3aGlsZSAoaWR4IDwgbGlzdC5sZW5ndGgpIHtcclxuICAgICAgICBpZiAoZm4obGlzdFtpZHhdKSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWR4ICs9IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XHJcbmV4cG9ydCBjb25zdCBpZGVudGl0eSA9IHggPT4geDtcclxuXHJcbmV4cG9ydCBjb25zdCBpc05pbGwgPSB4ID0+IHggPT0gbnVsbDtcclxuXHJcbmV4cG9ydCBjb25zdCBkaWZmZXJlbmNlID0gKGZpcnN0OiBhbnlbXSwgc2Vjb25kOiBhbnlbXSkgPT5cclxuICAgIGZpcnN0LmZpbHRlcihpdGVtID0+ICEoPGFueT5zZWNvbmQpLnNvbWUoc2Vjb25kSXRlbT0+c2Vjb25kSXRlbT09aXRlbSkpO1xyXG5cclxuZXhwb3J0IGNvbnN0IGFsbFBhc3MgPSBwcmVkcyA9PiAoLi4uYXJncykgPT4ge1xyXG4gICAgbGV0IGlkeCA9IDA7XHJcbiAgICBjb25zdCBsZW4gPSBwcmVkcy5sZW5ndGg7XHJcbiAgICB3aGlsZSAoaWR4IDwgbGVuKSB7XHJcbiAgICAgICAgaWYgKCFwcmVkc1tpZHhdLmFwcGx5KHRoaXMsIGFyZ3MpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWR4ICs9IDE7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxufTtcclxuIl19