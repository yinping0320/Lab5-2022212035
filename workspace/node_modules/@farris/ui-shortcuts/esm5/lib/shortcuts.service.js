/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { codes, modifiers } from './keys';
import { Subject } from 'rxjs';
import { filter } from 'rxjs/operators';
import { allPass, any, difference, identity, isNill } from './utils';
import * as i0 from "@angular/core";
/** @type {?} */
var $$ngOnDestroy = Symbol('OnDestroy');
var ShortcutsService = /** @class */ (function () {
    function ShortcutsService() {
        var _this = this;
        /**
         * 解析快捷键
         * 并为每个KEY 创建一个函数
         */
        this._shortcuts = [];
        /**
         * 控制按键时间.
         */
        this.throttleTime = 0;
        this._pressed = new Subject();
        /**
         * Streams of pressed events, can be used instead or with a command.
         */
        this.pressed$ = this._pressed.asObservable();
        /**
         * 禁用快捷键
         */
        this.disabled = false;
        this._ignored = ['INPUT', 'TEXTAREA', 'SELECT'];
        this.isAllowed = (/**
         * @param {?} shortcut
         * @return {?}
         */
        function (shortcut) {
            /** @type {?} */
            var target = (/** @type {?} */ (shortcut.event.target));
            if (target === shortcut.target) {
                return true;
            }
            if (shortcut.allowIn.length) {
                return !((/** @type {?} */ (difference(_this._ignored, shortcut.allowIn)))).includes(target.nodeName);
            }
            return !((/** @type {?} */ (_this._ignored))).includes(target.nodeName);
        });
        this.mapEvent = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) { return _this._shortcuts
            .map((/**
         * @param {?} shortcut
         * @return {?}
         */
        function (shortcut) {
            return Object.assign({}, shortcut, {
                predicates: any(identity, shortcut.predicates.map((/**
                 * @param {?} predicates
                 * @return {?}
                 */
                function (predicates) { return allPass(predicates)(event); }))),
                event: event
            });
        }))
            .filter((/**
         * @param {?} shortcut
         * @return {?}
         */
        function (shortcut) { return shortcut.predicates; }))
            .reduce((/**
         * @param {?} acc
         * @param {?} shortcut
         * @return {?}
         */
        function (acc, shortcut) { return (acc.priority > shortcut.priority ? acc : shortcut); }), (/** @type {?} */ ({
            priority: 0
        }))); });
        /**
         * transforms a shortcut to:
         * a predicate function
         */
        this.getKeys = (/**
         * @param {?} command
         * @return {?}
         */
        function (command) { return command.map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return key.trim(); })).filter((/**
         * @param {?} key
         * @return {?}
         */
        function (key) { return key !== '+'; }))
            .map((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            // for modifiers like control key
            // look for event['ctrlKey']
            // otherwise use the keyCode
            if (modifiers.hasOwnProperty(key)) {
                return (/**
                 * @param {?} event
                 * @return {?}
                 */
                function (event) { return !!event[modifiers[key]]; });
            }
            return (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                return codes[key]
                    ? event.keyCode === codes[key] || event.key === key
                    : event.keyCode === key.toUpperCase().charCodeAt(0);
            });
        })); });
        // this.keydown$ = fromEvent(document, 'keydown').pipe(
        //     filter(_ => !this.disabled),
        //     map(this.mapEvent),
        //     filter(
        //         (shortcut: ParsedShortcut) =>
        //             !shortcut.target || shortcut.event.target === shortcut.target
        //     ),
        //     filter((shortcut: ParsedShortcut) => isFunction(shortcut.command)),
        //     filter(this.isAllowed),
        //     tap((shortcut: any) => !shortcut.preventDefault || shortcut.event.preventDefault()),
        //     debounce(shortcut => timer(shortcut.throttleTime)),
        //     tap(shortcut => shortcut.command({ event: shortcut.event, key: shortcut.key })),
        //     tap(shortcut => this._pressed.next({ event: shortcut.event, key: shortcut.key })),
        //     catchError(error => of(error))
        // );
        // this.subscription = this.keydown$.subscribe();
    }
    Object.defineProperty(ShortcutsService.prototype, "shortcuts", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this._shortcuts;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Remove subscription.
     */
    /**
     * Remove subscription.
     * @return {?}
     */
    ShortcutsService.prototype.ngOnDestroy = /**
     * Remove subscription.
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * Enable all keyboard shortcuts
     */
    /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    ShortcutsService.prototype.enable = /**
     * Enable all keyboard shortcuts
     * @return {?}
     */
    function () {
        this.disabled = false;
        return this;
    };
    /**
     * Disable all keyboard shortcuts
     */
    /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    ShortcutsService.prototype.disable = /**
     * Disable all keyboard shortcuts
     * @return {?}
     */
    function () {
        this.disabled = true;
        return this;
    };
    /**
     * Check if all keyboard shortcuts are disabled.
     */
    /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    ShortcutsService.prototype.isDisabled = /**
     * Check if all keyboard shortcuts are disabled.
     * @return {?}
     */
    function () {
        return this.disabled;
    };
    /**
     * Add new shortcut/s
     */
    /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    ShortcutsService.prototype.add = /**
     * Add new shortcut/s
     * @param {?} shortcuts
     * @param {?=} instance
     * @return {?}
     */
    function (shortcuts, instance) {
        var _a;
        shortcuts = Array.isArray(shortcuts) ? shortcuts : [shortcuts];
        if (instance) {
            var _b = tslib_1.__read(tslib_1.__spread(shortcuts.map((/**
             * @param {?} shortcut
             * @return {?}
             */
            function (shortcut) { return shortcut.key; }))), 1), key = _b[0];
            this.bindOnDestroy(instance, key);
        }
        (_a = this._shortcuts).push.apply(_a, tslib_1.__spread(this.parseCommand(shortcuts)));
        return this;
    };
    /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @param instance - component to remove keys when ngOnDestroy is called.
     * @param keys
     */
    /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @private
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    ShortcutsService.prototype.bindOnDestroy = /**
     * bind to the component ngOnDestroy to remove related keys
     * when component is destroyed.
     * @private
     * @param {?} instance - component to remove keys when ngOnDestroy is called.
     * @param {?} keys
     * @return {?}
     */
    function (instance, keys) {
        if (instance.ngOnDestroy) {
            instance[$$ngOnDestroy] = instance.ngOnDestroy;
        }
        /** @type {?} */
        var that = this;
        instance.ngOnDestroy = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var onDestroy = instance[$$ngOnDestroy];
            if (onDestroy) {
                onDestroy.apply(this);
            }
            that.remove(keys);
        });
        return this;
    };
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param key
     * @returns
     */
    /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    ShortcutsService.prototype.remove = /**
     * Remove a command based on key or array of keys.
     * can be used for cleanup.
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var keys = Array.isArray(key) ? key : [key];
        this._shortcuts = this._shortcuts.filter((/**
         * @param {?} shortcut
         * @return {?}
         */
        function (shortcut) {
            return !shortcut.key.find((/**
             * @param {?} sKey
             * @return {?}
             */
            function (sKey) {
                return keys.filter((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) { return k === sKey; })).length > 0;
            }));
        }));
        return this;
    };
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param key - the key to filter the observable by.
     */
    /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    ShortcutsService.prototype.select = /**
     * Returns an observable of keyboard shortcut filtered by a specific key.
     * @param {?} key - the key to filter the observable by.
     * @return {?}
     */
    function (key) {
        return this.pressed$.pipe(filter((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var event = _a.event, eventKeys = _a.key;
            return !!eventKeys.find((/**
             * @param {?} eventKey
             * @return {?}
             */
            function (eventKey) { return eventKey === key; }));
        })));
    };
    /**
     * Parse each command using getKeys function
     */
    /**
     * Parse each command using getKeys function
     * @private
     * @param {?} command
     * @return {?}
     */
    ShortcutsService.prototype.parseCommand = /**
     * Parse each command using getKeys function
     * @private
     * @param {?} command
     * @return {?}
     */
    function (command) {
        var _this = this;
        /** @type {?} */
        var commands = Array.isArray(command) ? command : [command];
        return commands.map((/**
         * @param {?} cmd
         * @return {?}
         */
        function (cmd) {
            /** @type {?} */
            var keys = Array.isArray(cmd.key) ? cmd.key : [cmd.key];
            /** @type {?} */
            var priority = Math.max.apply(Math, tslib_1.__spread(keys.map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return key.split(' ').length; }))));
            /** @type {?} */
            var predicates = keys.map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return _this.getKeys(key.split(' ')); }));
            return (/** @type {?} */ (tslib_1.__assign({}, cmd, { allowIn: cmd.allowIn || [], key: keys, throttle: isNill(cmd.throttleTime) ? _this.throttleTime : cmd.throttleTime, priority: priority, predicates: predicates })));
        }));
    };
    ShortcutsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ShortcutsService.ctorParameters = function () { return []; };
    /** @nocollapse */ ShortcutsService.ngInjectableDef = i0.defineInjectable({ factory: function ShortcutsService_Factory() { return new ShortcutsService(); }, token: ShortcutsService, providedIn: "root" });
    return ShortcutsService;
}());
export { ShortcutsService };
if (false) {
    /**
     * 解析快捷键
     * 并为每个KEY 创建一个函数
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._shortcuts;
    /**
     * 控制按键时间.
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.throttleTime;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._pressed;
    /**
     * Streams of pressed events, can be used instead or with a command.
     * @type {?}
     */
    ShortcutsService.prototype.pressed$;
    /**
     * 禁用快捷键
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.disabled;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype._ignored;
    /**
     * Subscription for on destroy.
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.subscription;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.keydown$;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.isAllowed;
    /**
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.mapEvent;
    /**
     * transforms a shortcut to:
     * a predicate function
     * @type {?}
     * @private
     */
    ShortcutsService.prototype.getKeys;
}
//# sourceMappingURL=data:application/json;base64,