(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('@farris/ui-datagrid'), require('@angular/forms'), require('@farris/ui-locale'), require('rxjs/operators'), require('resize-observer-polyfill'), require('@farris/ui-common'), require('@angular/common'), require('@farris/ui-time-picker'), require('@farris/ui-datepicker'), require('@farris/ui-number-spinner'), require('@farris/ui-datalist'), require('@farris/ui-forms'), require('lodash-es')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-datagrid-filter', ['exports', '@angular/core', 'rxjs', '@farris/ui-datagrid', '@angular/forms', '@farris/ui-locale', 'rxjs/operators', 'resize-observer-polyfill', '@farris/ui-common', '@angular/common', '@farris/ui-time-picker', '@farris/ui-datepicker', '@farris/ui-number-spinner', '@farris/ui-datalist', '@farris/ui-forms', 'lodash-es'], factory) :
    (global = global || self, factory((global.farris = global.farris || {}, global.farris['ui-datagrid-filter'] = {}), global.ng.core, global.rxjs, global.uiDatagrid, global.ng.forms, global.uiLocale, global.rxjs.operators, global.ResizeObserver, global.uiCommon, global.ng.common, global.uiTimePicker, global.uiDatepicker, global.uiNumberSpinner, global.uiDatalist, global.uiForms, global.lodashEs));
}(this, function (exports, core, rxjs, uiDatagrid, forms, uiLocale, operators, ResizeObserver, uiCommon, common, uiTimePicker, uiDatepicker, uiNumberSpinner, uiDatalist, uiForms, lodashEs) { 'use strict';

    ResizeObserver = ResizeObserver && ResizeObserver.hasOwnProperty('default') ? ResizeObserver['default'] : ResizeObserver;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var _a;
    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * 服务器端支持比较操作
     *  Equal(0),
        NotEqual(1),
        Greater(2),
        GreaterOrEqual(3),
        Less(4),
        LessOrEqual(5),
        Like(6),
        LikeStartWith(7),
        LikeEndWith(8),
        NotLike(9),
        NotLikeStartWith(10),
        NotLikeEndWith(11),
        Is(12),
        IsNot(13),
        In(14),
        NotIn(15),
        LikeIgnoreCase(16);
     */
    /** @enum {number} */
    var FilterOperator = {
        Equal: 0,
        NotEqual: 1,
        Greater: 2,
        GreaterOrEqual: 3,
        Less: 4,
        LessOrEqual: 5,
        Contains: 6,
        NotContains: 9,
        In: 14,
        NotIn: 15,
        Empty: 1001,
        NotEmpty: 1002,
        Null: 1003,
        NotNull: 1004,
    };
    FilterOperator[FilterOperator.Equal] = 'Equal';
    FilterOperator[FilterOperator.NotEqual] = 'NotEqual';
    FilterOperator[FilterOperator.Greater] = 'Greater';
    FilterOperator[FilterOperator.GreaterOrEqual] = 'GreaterOrEqual';
    FilterOperator[FilterOperator.Less] = 'Less';
    FilterOperator[FilterOperator.LessOrEqual] = 'LessOrEqual';
    FilterOperator[FilterOperator.Contains] = 'Contains';
    FilterOperator[FilterOperator.NotContains] = 'NotContains';
    FilterOperator[FilterOperator.In] = 'In';
    FilterOperator[FilterOperator.NotIn] = 'NotIn';
    FilterOperator[FilterOperator.Empty] = 'Empty';
    FilterOperator[FilterOperator.NotEmpty] = 'NotEmpty';
    FilterOperator[FilterOperator.Null] = 'Null';
    FilterOperator[FilterOperator.NotNull] = 'NotNull';
    /** @enum {string} */
    var FilterConditionValue = {
        All: '',
        Empty: 'null',
    };
    /** @type {?} */
    var AllFilterOperator = (_a = {},
        _a[FilterOperator.Equal] = '等于',
        _a[FilterOperator.NotEqual] = '不等于',
        _a[FilterOperator.Greater] = '大于',
        _a[FilterOperator.GreaterOrEqual] = '大于等于',
        _a[FilterOperator.Less] = '小于',
        _a[FilterOperator.LessOrEqual] = '小于等于',
        _a[FilterOperator.Contains] = '包含',
        _a[FilterOperator.NotContains] = '不包含',
        _a[FilterOperator.NotEmpty] = '不为空',
        _a[FilterOperator.Empty] = '空',
        _a);
    /**
     * 文本操作符
     * @type {?}
     */
    var TextFilterOperators = [
        { code: FilterOperator.Empty, label: AllFilterOperator[FilterOperator.Empty], isDefault: false },
        { code: FilterOperator.NotEmpty, label: AllFilterOperator[FilterOperator.NotEmpty], isDefault: false },
        { code: FilterOperator.Equal, label: AllFilterOperator[FilterOperator.Equal], isDefault: false },
        { code: FilterOperator.NotEqual, label: AllFilterOperator[FilterOperator.NotEqual], isDefault: false },
        { code: FilterOperator.Contains, label: AllFilterOperator[FilterOperator.Contains], isDefault: true },
        { code: FilterOperator.NotContains, label: AllFilterOperator[FilterOperator.NotContains], isDefault: false }
    ];
    /**
     * 日期或数字操作符
     * @type {?}
     */
    var NumberOrDateFilterOperators = [
        { code: FilterOperator.Empty, label: AllFilterOperator[FilterOperator.Empty], isDefault: false },
        { code: FilterOperator.NotEmpty, label: AllFilterOperator[FilterOperator.NotEmpty], isDefault: false },
        { code: FilterOperator.Equal, label: AllFilterOperator[FilterOperator.Equal], isDefault: false },
        { code: FilterOperator.NotEqual, label: AllFilterOperator[FilterOperator.NotEqual], isDefault: false },
        { code: FilterOperator.Greater, label: AllFilterOperator[FilterOperator.Greater], isDefault: false },
        { code: FilterOperator.GreaterOrEqual, label: AllFilterOperator[FilterOperator.GreaterOrEqual], isDefault: false },
        { code: FilterOperator.Less, label: AllFilterOperator[FilterOperator.Less], isDefault: false },
        { code: FilterOperator.LessOrEqual, label: AllFilterOperator[FilterOperator.LessOrEqual], isDefault: false }
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DatagridFilterRowService = /** @class */ (function () {
        function DatagridFilterRowService() {
            this.columnConditionSubject = new rxjs.Subject();
            this.filterRowConditions$ = this.columnConditionSubject.asObservable();
            this.columnConditions = {};
            this.filterTextboxChanged = new core.EventEmitter();
            this.removeField = new core.EventEmitter();
        }
        /**
         * @param {?} frp
         * @return {?}
         */
        DatagridFilterRowService.prototype.setFilterPanel = /**
         * @param {?} frp
         * @return {?}
         */
        function (frp) {
            this.currentFilterPanel = frp;
        };
        /**
         * @return {?}
         */
        DatagridFilterRowService.prototype.hasFilterPanel = /**
         * @return {?}
         */
        function () {
            return !!this.currentFilterPanel;
        };
        /**
         * @return {?}
         */
        DatagridFilterRowService.prototype.closeFilterPanel = /**
         * @return {?}
         */
        function () {
            if (this.hasFilterPanel()) {
                if (this.currentFilterPanel.instance.documentClickHandle) {
                    this.currentFilterPanel.instance.documentClickHandle();
                }
                document.body.removeChild(this.currentFilterPanel.location.nativeElement);
                this.currentFilterPanel.destroy();
                this.currentFilterPanel = null;
                // document.body.style.overflow = 'auto';
            }
        };
        /**
         * @param {?=} emitEvent
         * @return {?}
         */
        DatagridFilterRowService.prototype.clear = /**
         * @param {?=} emitEvent
         * @return {?}
         */
        function (emitEvent) {
            if (emitEvent === void 0) { emitEvent = true; }
            this.columnConditions = {};
            if (emitEvent) {
                this.columnConditionSubject.next({});
            }
        };
        /**
         * @param {?} field
         * @param {?=} opts
         * @return {?}
         */
        DatagridFilterRowService.prototype.removeFilterField = /**
         * @param {?} field
         * @param {?=} opts
         * @return {?}
         */
        function (field, opts) {
            if (this.columnConditions) {
                delete this.columnConditions[field];
                this.removeField.emit(field);
                if (!opts || (opts && opts.emitEvent)) {
                    this.emitColumnConditionChanged(this.columnConditions, field);
                }
            }
        };
        /**
         * @param {?} field
         * @param {?} colCondition
         * @return {?}
         */
        DatagridFilterRowService.prototype._updateColumnConditions = /**
         * @param {?} field
         * @param {?} colCondition
         * @return {?}
         */
        function (field, colCondition) {
            var _this = this;
            var _a, _b;
            /** @type {?} */
            var currentCondition = this.columnConditions[field];
            if (!currentCondition) {
                this.columnConditions = Object.assign(this.columnConditions, (_a = {}, _a[field] = colCondition, _a));
            }
            else {
                if (JSON.stringify(currentCondition) !== JSON.stringify(colCondition)) {
                    this.columnConditions = Object.assign(this.columnConditions, (_b = {}, _b[field] = colCondition, _b));
                }
            }
            // 值为 ‘’ ，则代表着不参与查询
            Object.keys(this.columnConditions).forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                if (!_this.columnConditions[k]) {
                    // delete this.columnConditions[k];
                    _this.columnConditions[k] = null;
                }
            }));
        };
        /**
         * @param {?} field
         * @param {?} colCondition
         * @return {?}
         */
        DatagridFilterRowService.prototype.updateColumnConditions = /**
         * @param {?} field
         * @param {?} colCondition
         * @return {?}
         */
        function (field, colCondition) {
            this._updateColumnConditions(field, colCondition);
            this.emitColumnConditionChanged(this.columnConditions);
        };
        /**
         * @private
         * @param {?} conditions
         * @param {?=} removedFields
         * @return {?}
         */
        DatagridFilterRowService.prototype.emitColumnConditionChanged = /**
         * @private
         * @param {?} conditions
         * @param {?=} removedFields
         * @return {?}
         */
        function (conditions, removedFields) {
            // const farr = this.gridInstance.remoteFilter ? this.convert2FilterArray(this.columnConditions) : this.columnConditions;
            this.columnConditionSubject.next({ conditions: conditions, removedFields: removedFields });
        };
        // 获取过滤行显示文本
        // 获取过滤行显示文本
        /**
         * @param {?} column
         * @param {?} condition
         * @return {?}
         */
        DatagridFilterRowService.prototype.condition2string = 
        // 获取过滤行显示文本
        /**
         * @param {?} column
         * @param {?} condition
         * @return {?}
         */
        function (column, condition) {
            if (!condition || typeof condition === 'string') {
                return '';
            }
            /** @type {?} */
            var andText = this.gridInstance.localeService.getValue('datagrid.filter.and');
            /** @type {?} */
            var orText = this.gridInstance.localeService.getValue('datagrid.filter.or');
            /** @type {?} */
            var getRelationLabel = (/**
             * @param {?} r
             * @return {?}
             */
            function (r) {
                if (r === 'and') {
                    return andText;
                }
                else if (r === 'or') {
                    return orText;
                }
                else {
                    return '';
                }
            });
            /** @type {?} */
            var filterPreViewString = '';
            if (column.filter.type === uiDatagrid.ColumnFilterType.fromdata) {
                filterPreViewString = "(" + condition.value1.length + ")";
                if (condition.value1) {
                    filterPreViewString += " " + condition.value1.join(',');
                }
            }
            else if (column.filter.type === uiDatagrid.ColumnFilterType.enum) {
                /** @type {?} */
                var enumOpts = (/** @type {?} */ (this.getEnumOptions(column)));
                var valueField_1 = enumOpts.valueField, textField_1 = enumOpts.textField, data_1 = enumOpts.data;
                filterPreViewString = "(" + condition.value1.length + ")";
                if (condition.value1) {
                    filterPreViewString += " " + condition.value1.map((/**
                     * @param {?} v
                     * @return {?}
                     */
                    function (v) {
                        /** @type {?} */
                        var enumItem = data_1.find((/**
                         * @param {?} d
                         * @return {?}
                         */
                        function (d) { return d[valueField_1] == v; }));
                        return enumItem[textField_1];
                    })).join(',');
                }
            }
            else {
                if (condition) {
                    /** @type {?} */
                    var operator1Label = this.getOperatorLabel(condition.operator1);
                    if (!this.isEmpty(condition.value1)) {
                        filterPreViewString = operator1Label + " " + condition.value1;
                        /** @type {?} */
                        var operator2Label = this.getOperatorLabel(condition.operator2);
                        if (!this.isEmpty(condition.value2)) {
                            filterPreViewString += " " + getRelationLabel(condition.relation) + " " + operator2Label + " " + condition.value2;
                        }
                        else {
                            if (condition.operator2 !== undefined) {
                                /** @type {?} */
                                var op2 = parseInt('' + condition.operator2, 10);
                                if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                                    filterPreViewString += " " + getRelationLabel(condition.relation) + " " + operator2Label;
                                }
                            }
                        }
                    }
                    else {
                        /** @type {?} */
                        var op1 = parseInt('' + condition.operator1, 10);
                        if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
                            filterPreViewString = "" + operator1Label;
                        }
                    }
                }
            }
            return filterPreViewString;
        };
        /**
         * @private
         * @param {?} v
         * @return {?}
         */
        DatagridFilterRowService.prototype.isEmpty = /**
         * @private
         * @param {?} v
         * @return {?}
         */
        function (v) {
            return v === '' || v === undefined || v === null;
        };
        /**
         * @param {?} column
         * @return {?}
         */
        DatagridFilterRowService.prototype.getEnumOptions = /**
         * @param {?} column
         * @return {?}
         */
        function (column) {
            /** @type {?} */
            var colFilter = (/** @type {?} */ (column.filter));
            /** @type {?} */
            var datatype = colFilter.type;
            /** @type {?} */
            var enumSetting = null;
            if (datatype === uiDatagrid.ColumnFilterType.enum) {
                /** @type {?} */
                var fmt = (/** @type {?} */ (column.formatter));
                if (fmt) {
                    enumSetting = fmt.options;
                }
                else {
                    if (colFilter.options) {
                        enumSetting = colFilter.options;
                    }
                }
            }
            else { // enum 数据源来自grid 数据列表
                // enum 数据源来自grid 数据列表
                /** @type {?} */
                var columnData = this.gridInstance.dfs.getData(true).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return uiDatagrid.DatagridUtils.getValue(column.field, n);
                }));
                // 去除重复
                /** @type {?} */
                var enumData = Array.from(new Set(columnData)).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        value: n, label: n
                    };
                }));
                enumSetting = {
                    valueField: 'value', textField: 'label', data: enumData, idField: 'value'
                };
            }
            return enumSetting;
        };
        // 获取操作符标签
        // 获取操作符标签
        /**
         * @param {?} code
         * @return {?}
         */
        DatagridFilterRowService.prototype.getOperatorLabel = 
        // 获取操作符标签
        /**
         * @param {?} code
         * @return {?}
         */
        function (code) {
            /** @type {?} */
            var strOper = FilterOperator[code];
            if (strOper) {
                /** @type {?} */
                var operName = strOper[0].toLowerCase() + strOper.substr(1);
                /** @type {?} */
                var key = "datagrid.filter.operators." + operName;
                return this.gridInstance.localeService.getValue(key);
            }
            return '';
        };
        DatagridFilterRowService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DatagridFilterRowService.ctorParameters = function () { return []; };
        return DatagridFilterRowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterRowPanelComponent = /** @class */ (function () {
        function FilterRowPanelComponent(ngzone, el, render, dfrs, inject) {
            this.ngzone = ngzone;
            this.el = el;
            this.render = render;
            this.dfrs = dfrs;
            this.inject = inject;
            this.width = 240;
            this.height = 250;
            this.datatype = uiDatagrid.ColumnFilterType.string;
            this.conditionChange = new core.EventEmitter();
            this.panelHeightChange = new core.EventEmitter();
            this.gridInstance = null;
            this.enumSetting = {};
            this.condition = {
                operator1: 1,
                value1: '',
                relation: '',
                operator2: 1,
                value2: ''
            };
            this.documentClickHandle = null;
            this.ro = null;
            this.zone = null;
            this.zone = this.inject.get(core.NgZone);
            this.commonUtils = this.inject.get(uiCommon.CommonUtils, new uiCommon.CommonUtils());
            this.overlaySer = this.inject.get(uiCommon.OverLayHiddenService, new uiCommon.OverLayHiddenService());
        }
        /**
         * @return {?}
         */
        FilterRowPanelComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.render.listen(_this.el.nativeElement, 'click', (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    e.stopPropagation();
                    return false;
                }));
            }));
            this.initEnumSetting();
            // this.documentClickHandle = this.render.listen(document, 'click', (event) => {
            //     this.close(event);
            // });
            this.overlaySer.registerMouseEvent(this.el.nativeElement, (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                /** @type {?} */
                var tar = (/** @type {?} */ (e.target));
                if (tar && tar.closest('.overlay-container')) {
                    return;
                }
                if (document.body.className.indexOf('modal-open') > -1) {
                    return;
                }
                if (_this.el.nativeElement.contains(e.target)) {
                    return;
                }
                _this.close(e);
            }));
        };
        /**
         * @return {?}
         */
        FilterRowPanelComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            if (this.target) {
                this.resetPanelPosition();
                /** @type {?} */
                var panelDiv = this.el.nativeElement.querySelector('div');
                panelDiv.style.transition = 'top 0.2s ease 0.05s';
                /** @type {?} */
                var zindex = this.commonUtils.getFloatingLayerIndex();
                panelDiv.style.zIndex = zindex;
                /** @type {?} */
                var overlayEl = this.el.nativeElement.querySelector('.filter-panel-overlay');
                if (overlayEl) {
                    overlayEl.style.zIndex = zindex;
                    panelDiv.style.zIndex = zindex + 1;
                }
                // this.el.nativeElement.style.position = 'fixed';
            }
        };
        /**
         * @return {?}
         */
        FilterRowPanelComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.overlaySer) {
                this.overlaySer.destory(this.el.nativeElement);
            }
        };
        /**
         * @private
         * @return {?}
         */
        FilterRowPanelComponent.prototype.resetPanelPosition = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var panelDiv = this.el.nativeElement.querySelector('div');
            /** @type {?} */
            var h = panelDiv.querySelector('.panel-content').clientHeight + 36;
            /** @type {?} */
            var rect = this.target.target.parentElement.getBoundingClientRect();
            /** @type {?} */
            var downAreaHeight = window['innerHeight'] - rect.top;
            if (downAreaHeight < h) {
                /** @type {?} */
                var top_1 = window['innerHeight'] - h - 10;
                panelDiv.style.top = top_1 + 'px';
            }
            else {
                panelDiv.style.top = rect.top + 'px';
            }
        };
        /**
         * @return {?}
         */
        FilterRowPanelComponent.prototype.onPanelHeightChanged = /**
         * @return {?}
         */
        function () {
            this.resetPanelPosition();
            this.panelHeightChange.emit();
        };
        /**
         * @param {?} event
         * @return {?}
         */
        FilterRowPanelComponent.prototype.close = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            event.stopPropagation();
            this.dfrs.closeFilterPanel();
        };
        /**
         * @param {?} condition
         * @return {?}
         */
        FilterRowPanelComponent.prototype.onValueChange = /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            this.conditionChange.emit(condition);
        };
        /**
         * @private
         * @return {?}
         */
        FilterRowPanelComponent.prototype.initEnumSetting = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.datatype > 5) {
                this.enumSetting = this.dfrs.getEnumOptions(this.column);
                /** @type {?} */
                var currentColumnCondition = (/** @type {?} */ (this.dfrs.columnConditions[this.column.field]));
                if (currentColumnCondition && currentColumnCondition.value1) {
                    this.selectedValues = currentColumnCondition.value1.join(',');
                }
            }
        };
        FilterRowPanelComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-row-panel',
                        template: "<div class=\"f-datagrid-filter-panel d-flex flex-column\" style=\"position: fixed;\" [style.width.px]=\"width\"  (click)=\"$event.stopPropagation()\">\r\n    <div class=\"panel-header\">\r\n        <div (click)=\"close($event)\" class=\"panel-icon\" style=\"text-align: center; cursor: pointer;\">\r\n            <span class=\"f-icon f-icon-filter-sm\"></span>\r\n        </div> \r\n    </div>\r\n    <div class=\"panel-content flex-fill\">\r\n        <condition-editor *ngIf=\"datatype < 6\"\r\n            [datatype]=\"datatype\"\r\n            [condition]=\"condition\"\r\n            [operators]=\"operators\"\r\n            [filterOptions]=\"column.filter.options\"\r\n            (conditionChange)=\"onValueChange($event)\"\r\n            (panelHeightChange)=\"onPanelHeightChanged()\"></condition-editor>\r\n            \r\n\r\n        <filter-datalist *ngIf=\"datatype === 6 || datatype === 7\" \r\n            [data]=\"enumSetting?.data\" [valueField]=\"enumSetting?.valueField\"\r\n            [textField]=\"enumSetting?.textField\" [idField]=\"enumSetting?.valueField\"\r\n            [selectedValues]=\"selectedValues\"\r\n            (valueChange)=\"onValueChange($event)\"></filter-datalist>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"filter-panel-overlay\" style=\"position: absolute;\r\nposition: absolute;\r\nwidth: 100%;\r\ntop: 0;\r\nheight: 100%;\r\nbackground: rgb(255, 255, 255);\r\nopacity: 0;\" (click)=\"close($event)\"></div>\r\n"
                    }] }
        ];
        /** @nocollapse */
        FilterRowPanelComponent.ctorParameters = function () { return [
            { type: core.NgZone },
            { type: core.ElementRef },
            { type: core.Renderer2 },
            { type: DatagridFilterRowService },
            { type: core.Injector }
        ]; };
        FilterRowPanelComponent.propDecorators = {
            width: [{ type: core.Input }],
            height: [{ type: core.Input }],
            column: [{ type: core.Input }],
            operators: [{ type: core.Input }],
            datatype: [{ type: core.Input }],
            conditionChange: [{ type: core.Output }],
            panelHeightChange: [{ type: core.Output }]
        };
        return FilterRowPanelComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterRowEditorComponent = /** @class */ (function () {
        function FilterRowEditorComponent() {
            this.id = '';
        }
        /**
         * @return {?}
         */
        FilterRowEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.id = "filter-row_" + this.column.field;
        };
        /**
         * @return {?}
         */
        FilterRowEditorComponent.prototype.clearValue = /**
         * @return {?}
         */
        function () { };
        FilterRowEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-editor',
                        template: ''
                    }] }
        ];
        /** @nocollapse */
        FilterRowEditorComponent.ctorParameters = function () { return []; };
        FilterRowEditorComponent.propDecorators = {
            column: [{ type: core.Input }]
        };
        return FilterRowEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterTextboxComponent = /** @class */ (function (_super) {
        __extends(FilterTextboxComponent, _super);
        function FilterTextboxComponent(cfr, injector, app, dfrs, render, cd, localSer) {
            var _this = _super.call(this) || this;
            _this.cfr = cfr;
            _this.injector = injector;
            _this.app = app;
            _this.dfrs = dfrs;
            _this.render = render;
            _this.cd = cd;
            _this.localSer = localSer;
            _this.disabled = false;
            _this.delay = 300;
            _this.filterStr = '';
            _this.filterPanelSubscription = null;
            _this.ro = null;
            _this.zone = null;
            _this.el = null;
            _this.zone = _this.injector.get(core.NgZone);
            _this.el = _this.injector.get(core.ElementRef);
            _this.dfrs.filterTextboxChanged.pipe(operators.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v[_this.column.field] !== undefined; })), operators.delay(_this.delay)).subscribe((/**
             * @param {?} obj
             * @return {?}
             */
            function (obj) {
                /** @type {?} */
                var val = obj[_this.column.field];
                if (val !== '') {
                    /** @type {?} */
                    var _condition = { operator1: FilterOperator.Contains, value1: val };
                    if (_this.column.filter.type === uiDatagrid.ColumnFilterType.number) {
                        _condition.operator1 = FilterOperator.Equal;
                    }
                    _this.dfrs.updateColumnConditions(_this.column.field, _condition);
                }
                else {
                    _this.dfrs.updateColumnConditions(_this.column.field, FilterConditionValue.All);
                }
            }));
            _this.dfrs.removeField.subscribe((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (f === _this.column.field) {
                    _this.clearValue();
                }
            }));
            return _this;
        }
        Object.defineProperty(FilterTextboxComponent.prototype, "inputType", {
            get: /**
             * @return {?}
             */
            function () {
                if (this.column.filter.type === uiDatagrid.ColumnFilterType.number) {
                    return 'number';
                }
                return 'text';
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        FilterTextboxComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.ro) {
                this.ro.disconnect();
                this.ro = null;
            }
        };
        /**
         * @param {?} event
         * @return {?}
         */
        FilterTextboxComponent.prototype.show = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            this.close();
            event.stopPropagation();
            /** @type {?} */
            var dgContainerEle = ((/** @type {?} */ (event.target))).closest('.f-datagrid');
            if (dgContainerEle) {
                dgContainerEle.addEventListener('click', (/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    _this.close();
                }));
            }
            if (!this.dfrs.gridInstance) {
                this.dfrs.gridInstance = this.gridInstance;
            }
            /** @type {?} */
            var cf = this.cfr.resolveComponentFactory(FilterRowPanelComponent);
            this.filterPanelRef = cf.create(this.injector);
            this.app.attachView(this.filterPanelRef.hostView);
            this.filterPanelRef.instance.column = this.column;
            this.filterPanelRef.instance.gridInstance = this.gridInstance;
            this.initOperators(this.filterPanelRef.instance);
            if (this.column.filter !== false && this.column.filter !== undefined) {
                this.filterPanelRef.instance.datatype = this.column.filter.type;
                if (this.column.filter.type === uiDatagrid.ColumnFilterType.enum ||
                    this.column.filter.type === uiDatagrid.ColumnFilterType.fromdata) {
                    this.filterPanelRef.instance.height = 300;
                }
            }
            /** @type {?} */
            var currentColumnCondition = this.dfrs.columnConditions[this.column.field];
            if (currentColumnCondition) {
                this.filterPanelRef.instance.condition = (/** @type {?} */ (currentColumnCondition));
            }
            else {
                this.filterPanelRef.instance.condition = {
                    operator1: 0,
                    value1: '',
                    relation: '',
                    operator2: 0,
                    value2: ''
                };
                // this.initOperators(this.filterPanelRef.instance);
            }
            this.filterPanelSubscription = this.filterPanelRef.instance.conditionChange.subscribe((/**
             * @param {?} condition
             * @return {?}
             */
            function (condition) {
                if (condition) {
                    _this.dfrs.updateColumnConditions(_this.column.field, condition);
                    _this.filterStr = _this.dfrs.condition2string(_this.column, condition);
                    if (_this.column.filter.type < 2) {
                        _this.disabled = !!_this.filterStr;
                    }
                    _this.cd.detectChanges();
                }
                else {
                    _this.clearValue();
                    _this.dfrs.updateColumnConditions(_this.column.field, FilterConditionValue.All);
                }
            }));
            // document.body.style.overflow = 'hidden';
            document.body.appendChild(this.filterPanelRef.location.nativeElement);
            this.updateFilterPanelPosition(event.target);
            this.dfrs.setFilterPanel(this.filterPanelRef);
            var _a = dgContainerEle.getBoundingClientRect(), dgwidth = _a.width, dgHeight = _a.height;
            this['DG_CONTAINER_SIZE'] = { width: dgwidth, height: dgHeight };
            this.filterPanelRef.instance.panelHeightChange.subscribe((/**
             * @return {?}
             */
            function () {
                var _a = dgContainerEle.getBoundingClientRect(), width = _a.width, height = _a.height;
                _this['DG_CONTAINER_SIZE'] = { width: width, height: height };
            }));
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                if (!_this.ro) {
                    _this.ro = new ResizeObserver((/**
                     * @param {?} entries
                     * @param {?} observer
                     * @return {?}
                     */
                    function (entries, observer) {
                        if (_this['resize_timer_001']) {
                            clearTimeout(_this['resize_timer_001']);
                        }
                        _this['resize_timer_001'] = setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            var _a = entries[0].target.getBoundingClientRect(), width = _a.width, height = _a.height;
                            var _b = _this['DG_CONTAINER_SIZE'], dgWidth = _b.width, dgHeight = _b.height;
                            if (_this.gridInstance.autoHeight) {
                                if (dgWidth == width || dgWidth - width === 7 || dgWidth - width === -7) {
                                    return;
                                }
                            }
                            if (width !== dgWidth || height !== dgHeight) {
                                _this.close();
                            }
                        }), 30);
                    }));
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.ro.observe(dgContainerEle);
                    }));
                }
            }));
            this.filterPanelRef.instance.target = event;
            this.filterPanelRef.changeDetectorRef.markForCheck();
            this.filterPanelRef.changeDetectorRef.detectChanges();
        };
        /**
         * @return {?}
         */
        FilterTextboxComponent.prototype.close = /**
         * @return {?}
         */
        function () {
            this.dfrs.closeFilterPanel();
            if (this.filterPanelSubscription) {
                this.filterPanelSubscription.unsubscribe();
                this.filterPanelSubscription = null;
            }
        };
        /**
         * @private
         * @param {?} ins
         * @return {?}
         */
        FilterTextboxComponent.prototype.initOperators = /**
         * @private
         * @param {?} ins
         * @return {?}
         */
        function (ins) {
            var _this = this;
            if (this.column.filter.type === uiDatagrid.ColumnFilterType.string) {
                ins.operators = TextFilterOperators;
                ins.condition.operator1 = FilterOperator.Contains;
                ins.condition.operator2 = FilterOperator.Contains;
            }
            else if (this.column.filter.type === uiDatagrid.ColumnFilterType.number || this.column.filter.type === uiDatagrid.ColumnFilterType.datetime
                || this.column.filter.type === uiDatagrid.ColumnFilterType.date || this.column.filter.type === uiDatagrid.ColumnFilterType.time) {
                ins.operators = NumberOrDateFilterOperators;
                ins.condition.operator1 = FilterOperator.Equal;
                ins.condition.operator2 = FilterOperator.Equal;
            }
            if (ins.operators) {
                ins.operators.forEach((/**
                 * @param {?} o
                 * @return {?}
                 */
                function (o) {
                    o.label = _this.dfrs.getOperatorLabel(o.code);
                }));
            }
        };
        /**
         * @private
         * @param {?} target
         * @return {?}
         */
        FilterTextboxComponent.prototype.updateFilterPanelPosition = /**
         * @private
         * @param {?} target
         * @return {?}
         */
        function (target) {
            if (target) {
                /** @type {?} */
                var filterIconParent = target.parentElement;
                if (filterIconParent) {
                    /** @type {?} */
                    var pos = filterIconParent.getBoundingClientRect();
                    /** @type {?} */
                    var tr = target.closest('tr');
                    /** @type {?} */
                    var td = target.closest('td');
                    /** @type {?} */
                    var headerPos = target.closest('.f-datagrid-header').getBoundingClientRect();
                    /** @type {?} */
                    var panelWidth = this.filterPanelRef.instance.width;
                    /** @type {?} */
                    var left = pos.left;
                    if (headerPos.width + headerPos.x < pos.x + panelWidth) { // this.column.filter.type === ColumnFilterType.enum
                        left = td.getBoundingClientRect().left + td.offsetWidth - panelWidth;
                        this.filterPanelRef.location.nativeElement.querySelector('.panel-icon').style.left = panelWidth - 40 + "px";
                    }
                    // const top = pos.top
                    /** @type {?} */
                    var panel = this.filterPanelRef.location.nativeElement.querySelector('div');
                    if (panel) {
                        this.render.setStyle(panel, 'top', pos.top + "px");
                        this.render.setStyle(panel, 'left', left + "px");
                    }
                }
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterTextboxComponent.prototype.onTextValueChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            var _a;
            /** @type {?} */
            var value = $event.target.value;
            this.dfrs.filterTextboxChanged.emit((_a = {}, _a[this.column.field] = value, _a));
        };
        /**
         * @return {?}
         */
        FilterTextboxComponent.prototype.clearValue = /**
         * @return {?}
         */
        function () {
            this.filterStr = '';
            if (this.input) {
                this.input.nativeElement.value = '';
            }
            if (this.column.filter.type < 2) {
                this.disabled = false;
            }
            this.cd.detectChanges();
        };
        /**
         * @param {?} condition
         * @return {?}
         */
        FilterTextboxComponent.prototype.initFilter = /**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            this.filterStr = this.dfrs.condition2string(this.column, condition);
            this.disabled = !!this.filterStr;
            this.dfrs._updateColumnConditions(this.column.field, condition);
            this.cd.detectChanges();
        };
        FilterTextboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-textbox',
                        template: "\n    <div class=\"f-datagrid-header-cell-content f-datagrid-filter-cell d-flex\" style=\"padding-right: 5px\">\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\">\n            <input *ngIf=\"!disabled\" class=\"form-control\" [attr.type]=\"inputType\" [value]=\"filterStr\"\n                (input)=\"onTextValueChange($event)\" #input [class.no-number-button]=\"inputType == 'number'\">\n            <input *ngIf=\"disabled\" class=\"form-control\" type=\"text\" [value]=\"filterStr\"\n            [attr.title]=\"filterStr\" [disabled]=\"disabled\" [class.filter-editor-disabled]=\"disabled\" >\n        </div>\n        <div style=\"min-width: 26px; text-align: center; align-items: center;\n            display: flex; justify-content: center;\" *ngIf=\"column.filter.enableOperator\">\n            <span style=\"cursor: pointer;\" class=\"f-icon f-icon-filter-sm\" (click)=\"show($event)\"></span>\n        </div>\n    </div>\n    ",
                        styles: ["\n        .no-number-button{-moz-appearance: textfield;}\n        .no-number-button::-webkit-outer-spin-button, .no-number-button::-webkit-inner-spin-button {\n              -webkit-appearance: none!important;\n        }"]
                    }] }
        ];
        /** @nocollapse */
        FilterTextboxComponent.ctorParameters = function () { return [
            { type: core.ComponentFactoryResolver },
            { type: core.Injector },
            { type: core.ApplicationRef },
            { type: DatagridFilterRowService },
            { type: core.Renderer2 },
            { type: core.ChangeDetectorRef },
            { type: uiLocale.LocaleService }
        ]; };
        FilterTextboxComponent.propDecorators = {
            column: [{ type: core.Input }],
            disabled: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            input: [{ type: core.ViewChild, args: ['input',] }]
        };
        return FilterTextboxComponent;
    }(FilterRowEditorComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
    var FilterCheckboxComponent = /** @class */ (function (_super) {
        __extends(FilterCheckboxComponent, _super);
        function FilterCheckboxComponent(dfrs, cd, inject) {
            var _this = _super.call(this) || this;
            _this.dfrs = dfrs;
            _this.cd = cd;
            _this.inject = inject;
            _this.i = 0;
            _this.checked = false;
            _this.dfrs.removeField.subscribe((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                if (f === _this.column.field) {
                    _this.clearValue();
                }
            }));
            return _this;
        }
        /**
         * @return {?}
         */
        FilterCheckboxComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.chk.nativeElement.indeterminate = true;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterCheckboxComponent.prototype.checkedChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.dfrs.closeFilterPanel();
            if (this.i > 0) {
                this.checked = !this.checked;
            }
            this.i += 1;
            if (this.i > 2) {
                this.i = 0;
                this.chk.nativeElement.indeterminate = true;
            }
            else {
                this.chk.nativeElement.indeterminate = false;
            }
            if (this.i === 0) {
                this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
                this.checked = false;
            }
            else {
                /** @type {?} */
                var condition = {
                    operator1: FilterOperator.Equal,
                    value1: this.checked
                };
                this.dfrs.updateColumnConditions(this.column.field, condition);
            }
            this.cd.detectChanges();
            $event.stopPropagation();
        };
        /**
         * @return {?}
         */
        FilterCheckboxComponent.prototype.clearValue = /**
         * @return {?}
         */
        function () {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.cd.detectChanges();
        };
        /**
         * @param {?} filterCondition
         * @return {?}
         */
        FilterCheckboxComponent.prototype.initFilter = /**
         * @param {?} filterCondition
         * @return {?}
         */
        function (filterCondition) {
            if (filterCondition && Object.keys(filterCondition).length) {
                this.checked = filterCondition.value1;
                this.chk.nativeElement.indeterminate = false;
                this.i = this.checked ? 2 : 1;
            }
            else {
                this.checked = false;
                this.chk.nativeElement.indeterminate = true;
                this.i = 0;
            }
            this.dfrs._updateColumnConditions(this.column.field, filterCondition);
            this.cd.detectChanges();
        };
        FilterCheckboxComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-checkbox',
                        template: "\n    <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input [name]=\"column.field\" [checked]=\"checked\" type=\"checkbox\" #chk class=\"custom-control-input\">\n        <label class=\"custom-control-label\" (click)=\"checkedChange($event)\"></label>\n    </div>\n    "
                    }] }
        ];
        /** @nocollapse */
        FilterCheckboxComponent.ctorParameters = function () { return [
            { type: DatagridFilterRowService },
            { type: core.ChangeDetectorRef },
            { type: core.Injector }
        ]; };
        FilterCheckboxComponent.propDecorators = {
            chk: [{ type: core.ViewChild, args: ['chk',] }]
        };
        return FilterCheckboxComponent;
    }(FilterRowEditorComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterCellEditorDirective = /** @class */ (function () {
        function FilterCellEditorDirective(injector, resolver, container, render) {
            this.injector = injector;
            this.resolver = resolver;
            this.container = container;
            this.render = render;
            this.delay = 300;
        }
        /**
         * @return {?}
         */
        FilterCellEditorDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.createFilterEditor();
        };
        /**
         * @private
         * @return {?}
         */
        FilterCellEditorDirective.prototype.createFilterEditor = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.column.filter) {
                /** @type {?} */
                var columnFilter = (/** @type {?} */ (this.column.filter));
                columnFilter.type = columnFilter.type || uiDatagrid.ColumnFilterType.string;
                /** @type {?} */
                var constructorCmp = FilterTextboxComponent;
                switch (columnFilter.type) {
                    case uiDatagrid.ColumnFilterType.boolean:
                        constructorCmp = FilterCheckboxComponent;
                        break;
                    // case ColumnFilterType.enum:
                    //     constructorCmp = FilterEnumComponent;
                    //     break;
                }
                /** @type {?} */
                var factory = this.resolver.resolveComponentFactory(constructorCmp);
                this.componentRef = this.container.createComponent(factory);
                this.componentRef.instance.column = this.column;
                this.componentRef.instance.group = this.group;
                this.componentRef.instance.gridInstance = this.gridInstance;
                this.componentRef.instance.disabled = columnFilter.type >= 3;
                this.componentRef.instance.delay = this.delay;
                if (this.gridInstance.conditions && Object.keys(this.gridInstance.conditions).length) {
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        _this.componentRef.instance.initFilter(_this.gridInstance.conditions[_this.column.field]);
                    }), 100);
                }
            }
        };
        /**
         * @return {?}
         */
        FilterCellEditorDirective.prototype.clearValue = /**
         * @return {?}
         */
        function () {
            if (this.componentRef) {
                this.componentRef.instance.clearValue();
            }
        };
        FilterCellEditorDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[filter-cell-editor]',
                    },] }
        ];
        /** @nocollapse */
        FilterCellEditorDirective.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ComponentFactoryResolver },
            { type: core.ViewContainerRef },
            { type: core.Renderer2 }
        ]; };
        FilterCellEditorDirective.propDecorators = {
            column: [{ type: core.Input }],
            group: [{ type: core.Input }],
            gridInstance: [{ type: core.Input }],
            delay: [{ type: core.Input }]
        };
        return FilterCellEditorDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterRowComponent = /** @class */ (function () {
        function FilterRowComponent(fb, el, ngzone, cd, dfrs, render, inject) {
            var _this = this;
            this.fb = fb;
            this.el = el;
            this.ngzone = ngzone;
            this.cd = cd;
            this.dfrs = dfrs;
            this.render = render;
            this.inject = inject;
            this.fixedLeft = false;
            this.fixedRight = false;
            this.delay = 300;
            this.conditionChange = new core.EventEmitter();
            this.form = new forms.FormGroup({});
            this.filterRowConditionsScribe = this.dfrs.filterRowConditions$.subscribe((/**
             * @param {?} ccs
             * @return {?}
             */
            function (ccs) {
                _this.conditionChange.emit(ccs);
            }));
        }
        /**
         * @return {?}
         */
        FilterRowComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.form = this.createControl();
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this.render.listen('document', 'click', (/**
                 * @return {?}
                 */
                function () {
                    _this.dfrs.closeFilterPanel();
                }));
            }));
        };
        /**
         * @return {?}
         */
        FilterRowComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var nativeEl = this.el.nativeElement;
            this.tr = nativeEl.parentElement;
            nativeEl.querySelectorAll('td').forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                _this.tr.append(n);
            }));
            nativeEl.style.display = 'none';
            this.dfrs.gridInstance = this.gridInstance;
        };
        /**
         * @return {?}
         */
        FilterRowComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.filterRowConditionsScribe) {
                this.filterRowConditionsScribe.unsubscribe();
                this.filterRowConditionsScribe = null;
            }
            if (this.tr) {
                /** @type {?} */
                var tds = this.tr.querySelectorAll('td');
                if (tds && tds.length) {
                    tds.forEach((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) {
                        if (!a.classList.contains('f-datagrid-header-checkbox') && !a.classList.contains('f-datagrid-cell-rownumber')) {
                            _this.tr.removeChild(a);
                        }
                    }));
                }
            }
        };
        /**
         * @return {?}
         */
        FilterRowComponent.prototype.createControl = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var group = this.fb.group({});
            this.columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (col.colspan) {
                    return;
                }
                /** @type {?} */
                var control = _this.fb.control('');
                group.addControl(col.field, control);
            }));
            return group;
        };
        /**
         * @param {?=} emitEvent
         * @return {?}
         */
        FilterRowComponent.prototype.clearFilterValue = /**
         * @param {?=} emitEvent
         * @return {?}
         */
        function (emitEvent) {
            if (emitEvent === void 0) { emitEvent = true; }
            // this.form.reset();
            this.editors.forEach((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                c.clearValue();
            }));
            this.dfrs.clear(emitEvent);
        };
        /**
         * @param {?} field
         * @param {?=} opts
         * @return {?}
         */
        FilterRowComponent.prototype.removeField = /**
         * @param {?} field
         * @param {?=} opts
         * @return {?}
         */
        function (field, opts) {
            this.dfrs.removeFilterField(field, opts);
        };
        FilterRowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: '[filter-row]',
                        template: "\r\n<!-- <td *ngIf=\"gridInstance.showCheckbox  && fixedLeft && gridInstance.enableDragColumn\"></td>\r\n<td *ngIf=\"gridInstance.showLineNumber && fixedLeft && gridInstance.enableDragColumn\"></td> -->\r\n<td *ngFor=\"let col of columns\" class=\"f-datagrid-header-cell f-datagrid-filter-td\" \r\n    style=\"text-align: center;\" [attr.id]=\"'filter-row_' + col.field \">\r\n    <ng-container filter-cell-editor [delay]=\"delay\" [gridInstance]=\"gridInstance\" [column]=\"col\" [group]=\"form\"></ng-container>\r\n</td>\r\n\r\n",
                        providers: [
                            DatagridFilterRowService
                        ],
                        encapsulation: core.ViewEncapsulation.None,
                        styles: [".filter-condition .list-group-item{padding:10px;background:#f8f8f8}.filter-condition .datalist{min-height:100px;max-height:200px;overflow:auto}.filter-condition .datalist::-webkit-scrollbar{width:15px;height:15px}.filter-condition .datalist::-webkit-scrollbar-thumb{background-color:#c2c2c2;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:hover{background-color:#7d7d7d;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:vertical,.filter-condition .datalist::-webkit-scrollbar-thumb:vertical:hover{border:3px solid transparent;border-left-width:4px}.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal,.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal:hover{border:3px solid transparent;border-top:4px solid transparent}.filter-condition .datalist::-webkit-scrollbar-track{background-color:#fafafa}.filter-condition .datalist::-webkit-scrollbar-track:vertical{border-left:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-track:horizontal{border-top:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-corner{background-color:#fafafa}.filter-condition farris-datalist .card{border:0}.filter-condition .card .list-group-item{padding-left:0;padding-right:0}.filter-condition .list-group-item.border-b1{border-bottom:1px solid #dde2eb!important;margin-bottom:0}.f-datagrid-filter-panel{background:#f8f8f8;position:absolute;z-index:999;box-shadow:0 1px 4px 1px rgba(186,191,199,.4);top:140px;left:1257px;width:200px;border-radius:3px;border:1px solid #babfc7}.f-datagrid-filter-panel .panel-header{height:36px;min-height:36px;border-bottom:1px solid #2196f3;text-align:center;line-height:36px;color:#2196f3}.f-datagrid-filter-td .filter-editor-disabled{color:rgba(24,29,31,.5);background-color:#f1f2f4;border-color:rgba(186,191,199,.3)}.f-datagrid-filter-td .filter-editor-disabled:hover{background-color:#f1f2f4}.f-datagrid-filter-td:hover{background-color:transparent}"]
                    }] }
        ];
        /** @nocollapse */
        FilterRowComponent.ctorParameters = function () { return [
            { type: forms.FormBuilder },
            { type: core.ElementRef },
            { type: core.NgZone },
            { type: core.ChangeDetectorRef },
            { type: DatagridFilterRowService },
            { type: core.Renderer2 },
            { type: core.Injector }
        ]; };
        FilterRowComponent.propDecorators = {
            fixedLeft: [{ type: core.Input }],
            fixedRight: [{ type: core.Input }],
            columns: [{ type: core.Input }],
            gridInstance: [{ type: core.Input }],
            delay: [{ type: core.Input }],
            conditionChange: [{ type: core.Output }],
            editors: [{ type: core.ViewChildren, args: [FilterCellEditorDirective,] }]
        };
        return FilterRowComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ConditionEditorComponent = /** @class */ (function () {
        function ConditionEditorComponent(inject, cd, fb) {
            this.inject = inject;
            this.cd = cd;
            this.fb = fb;
            this.datatype = uiDatagrid.ColumnFilterType.string;
            this.condition = {
                operator1: 0,
                value1: '',
                relation: '',
                operator2: 0,
                value2: ''
            };
            this.filterOptions = {};
            this.conditionChange = new core.EventEmitter();
            this.panelHeightChange = new core.EventEmitter();
            this.emptyCondition = __assign({}, this.condition);
            this.formValueChangesSubscription = null;
            this.originalCondition = {};
            this.form = this.fb.group({
                operator1: new forms.FormControl(0),
                value1: new forms.FormControl(''),
                relation: new forms.FormControl(''),
                operator2: new forms.FormControl(0),
                value2: new forms.FormControl(''),
            });
            this.emptyConditonString = JSON.stringify(this.emptyCondition);
        }
        /**
         * @return {?}
         */
        ConditionEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.originalCondition = Object.assign({}, this.condition);
            this.form.patchValue(this.condition);
        };
        /**
         * @return {?}
         */
        ConditionEditorComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.formValueChangesSubscription) {
                this.formValueChangesSubscription.unsubscribe();
                this.formValueChangesSubscription = null;
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        ConditionEditorComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
        };
        /**
         * @private
         * @param {?} v
         * @return {?}
         */
        ConditionEditorComponent.prototype.emitConditionChange = /**
         * @private
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.condition = v;
            /** @type {?} */
            var filter = this.checkFilterOperator();
            this.conditionChange.emit(filter);
        };
        /**
         * @return {?}
         */
        ConditionEditorComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.form.valueChanges.subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                _this.condition = Object.assign(_this.emptyCondition, _this.condition);
                if (v.operator1 > 1000) {
                    _this.emitConditionChange(v);
                    return;
                }
                /** @type {?} */
                var currentFilterJSON = JSON.stringify(v);
                if (_this.emptyConditonString === currentFilterJSON) {
                    _this.emitConditionChange(v);
                }
                else {
                    // if (this.condition.value1 != v.value1 || (this.condition.value2 !== undefined && this.condition.value2 != v.value2)) {
                    if (JSON.stringify(_this.condition) !== currentFilterJSON) {
                        _this.emitConditionChange(v);
                        if (v.value2 == '') {
                            _this.emitPanelHeightChanged();
                        }
                    }
                    else {
                        if ((_this.condition.operator1 != v.operator1) ||
                            (_this.condition.relation != v.relation || _this.condition.operator2 != v.operator2)) {
                            _this.emitConditionChange(v);
                        }
                    }
                }
            }));
        };
        /**
         * @private
         * @return {?}
         */
        ConditionEditorComponent.prototype.checkFilterOperator = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var filter = __assign({}, this.condition);
            /** @type {?} */
            var op1 = parseInt('' + filter.operator1, 10);
            /** @type {?} */
            var f1 = { operator1: filter.operator1, value1: filter.value1 };
            if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
                filter.value1 = '';
                f1.value1 = '';
            }
            if ((filter.value1 === '' || filter.value1 === null) && op1 !== FilterOperator.Empty && op1 !== FilterOperator.NotEmpty) {
                return '';
            }
            if (!filter.relation) {
                return f1;
            }
            else {
                /** @type {?} */
                var op2 = parseInt('' + filter.operator2, 10);
                if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                    filter.value2 = '';
                    return filter;
                }
                else {
                    if (filter.value2 == null || filter.value2 == undefined || filter.value2 === '') {
                        return f1;
                    }
                }
            }
            return filter;
        };
        /**
         * @param {?} relation
         * @param {?} $event
         * @return {?}
         */
        ConditionEditorComponent.prototype.chooseRelation = /**
         * @param {?} relation
         * @param {?} $event
         * @return {?}
         */
        function (relation, $event) {
            $event.stopPropagation();
            /** @type {?} */
            var emit = !this.form.get('relation').value;
            this.form.get('relation').setValue(relation);
            this.condition.relation = relation;
            if (this.condition.operator2 === undefined) {
                this.condition.operator2 = 0;
            }
            if (emit) {
                this.emitPanelHeightChanged();
            }
            this.cd.detectChanges();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ConditionEditorComponent.prototype.resetFilters = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            if (this.emptyConditonString !== JSON.stringify(this.condition)) {
                this.condition = JSON.parse(this.emptyConditonString);
                this.form.reset(this.condition);
                this.emitPanelHeightChanged();
            }
        };
        /**
         * @private
         * @return {?}
         */
        ConditionEditorComponent.prototype.emitPanelHeightChanged = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this['panelHeightChangedTimer']) {
                clearTimeout(this['panelHeightChangedTimer']);
            }
            this['panelHeightChangedTimer'] = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.panelHeightChange.emit();
            }), 20);
        };
        ConditionEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'condition-editor',
                        template: "<form [formGroup]=\"form\">\r\n<ul class=\"list-group filter-condition\">\r\n    <li class=\"list-group-item border-0\">\r\n        <select class=\"form-control form-control-sm\" formControlName=\"operator1\" single-select [panelRef]=\"selectpanel\">\r\n            <!-- <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option> -->\r\n        </select>\r\n        <div #selectpanel class=\"single-select-panel f-area-hide\">\r\n            <ul class=\"dropdown-menu show\">\r\n                <li class=\"dropdown-item\" *ngFor=\"let col of operators\" [attr.value]=\"col.code\" [class.active]=\"condition.operator1 === col.code\">{{ col.label }}</li>\r\n            </ul>\r\n        </div>\r\n    </li>\r\n    <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator1 < 1000\">\r\n        <!-- <farris-time-picker #timepicker formControlName=\"value1\" [readonly]= \"false\" [editable]= \"true\"\r\n        [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\" [secondStep] = \"1\"></farris-time-picker> -->\r\n\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"true\" *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n        <!-- <farris-number-spinner  name=\"value1\" [(ngModel)]=\"condition.value1\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n            <input formControlName=\"value1\" class=\"form-control no-number-button\" type=\"number\" >\r\n        </div>\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"time\" >\r\n        </div>\r\n\r\n        <input class=\"form-control form-control-sm\" formControlName=\"value1\" *ngSwitchDefault type=\"text\" >\r\n    </li>\r\n\r\n    <ng-container *ngIf=\"condition.value1 !== '' && condition.value1 !== null && condition.value1 !== undefined\">\r\n        \r\n        <li class=\"list-group-item border-0\">\r\n            <div class=\"custom-control custom-radio custom-control-inline\" style=\"margin-right: 0;\">\r\n                <input type=\"radio\" id=\"customRadioInline1\" formControlName=\"relation\" value=\"and\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline1\" (click)=\"chooseRelation('and', $event)\">{{ 'datagrid.filter.and' | locale }}</label>\r\n            </div>\r\n            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                <input type=\"radio\" id=\"customRadioInline2\" formControlName=\"relation\" value=\"or\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline2\"  (click)=\"chooseRelation('or', $event)\">{{ 'datagrid.filter.or' | locale }}</label>\r\n            </div>\r\n        </li>\r\n        <ng-container *ngIf=\"condition.relation\">\r\n            \r\n            <li class=\"list-group-item border-0\">\r\n                <!-- <select class=\"form-control form-control-sm\" formControlName=\"operator2\" >\r\n                    <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n                </select> -->\r\n\r\n                <select class=\"form-control form-control-sm\" formControlName=\"operator2\" single-select [panelRef]=\"selectpanel2\">\r\n                </select>\r\n                <div #selectpanel2 class=\"single-select-panel f-area-hide\">\r\n                    <ul class=\"dropdown-menu show\">\r\n                        <li class=\"dropdown-item\" *ngFor=\"let col of operators\" [attr.value]=\"col.code\" [class.active]=\"condition.operator2 === col.code\">{{ col.label }}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n\r\n\r\n            </li>\r\n            <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator2 < 1000\">\r\n                <!-- <farris-time-picker #timepicker formControlName=\"value2\" [readonly]= \"false\" [editable]= \"false\"\r\n                [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\"[secondStep] = \"1\"></farris-time-picker> -->\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"true\"  *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n                <!-- <farris-number-spinner  name=\"value2\" [(ngModel)]=\"condition.value2\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n                    <input formControlName=\"value2\" class=\"form-control no-number-button\" type=\"number\" >\r\n                </div>\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"time\" >\r\n                </div>\r\n                <input class=\"form-control form-control-sm\" formControlName=\"value2\" *ngSwitchDefault type=\"text\" >\r\n            </li>\r\n        </ng-container>\r\n    </ng-container>\r\n    \r\n    <li class=\"list-group-item border-0\">\r\n        <div class=\"d-flex\">\r\n            <!-- <div class=\"p-2 \"><button type=\"button\" class=\"btn btn-light\">\u9AD8\u7EA7</button></div> -->\r\n            <div class=\"ml-auto\">\r\n                <button type=\"button\" style=\"position: unset;\" (click)=\"resetFilters($event)\" class=\"btn btn-primary\">{{ 'datagrid.filter.clear' | locale }}</button>\r\n            </div>\r\n        </div>\r\n   </li>\r\n</ul>\r\n</form>",
                        styles: ["\n        .no-number-button{-moz-appearance: textfield;}\n        .no-number-button::-webkit-outer-spin-button, .no-number-button::-webkit-inner-spin-button {\n              -webkit-appearance: none!important;\n        }"]
                    }] }
        ];
        /** @nocollapse */
        ConditionEditorComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef },
            { type: forms.FormBuilder }
        ]; };
        ConditionEditorComponent.propDecorators = {
            operators: [{ type: core.Input }],
            datatype: [{ type: core.Input }],
            condition: [{ type: core.Input }],
            filterOptions: [{ type: core.Input }],
            conditionChange: [{ type: core.Output }],
            panelHeightChange: [{ type: core.Output }]
        };
        return ConditionEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterDatalistComponent = /** @class */ (function () {
        function FilterDatalistComponent(inject, cd, dfrs) {
            this.inject = inject;
            this.cd = cd;
            this.dfrs = dfrs;
            this.data = [];
            this.showFilter = false;
            this.filterKeyWord = '';
            this.valueChange = new core.EventEmitter();
            this.checked = false;
            this.originalData = [];
        }
        /**
         * @return {?}
         */
        FilterDatalistComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.originalData = lodashEs.cloneDeep(this.data);
        };
        /**
         * @return {?}
         */
        FilterDatalistComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.selectedValues === undefined) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.checkAll(true, false);
                    _this.checked = true;
                    _this.cd.detectChanges();
                }));
            }
            this.updateCheckboxState();
        };
        /**
         * @private
         * @param {?=} checked
         * @param {?=} emit
         * @return {?}
         */
        FilterDatalistComponent.prototype.checkAll = /**
         * @private
         * @param {?=} checked
         * @param {?=} emit
         * @return {?}
         */
        function (checked, emit) {
            var _this = this;
            if (checked === void 0) { checked = true; }
            if (emit === void 0) { emit = true; }
            if (checked) {
                this.dataListInstance.selectAll();
                this.selectedValues = this.originalData.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n[_this.valueField]; })).join(',');
            }
            else {
                this.dataListInstance.unSelectAll();
                this.selectedValues = '';
            }
            if (emit) {
                this.buildCondition();
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterDatalistComponent.prototype.checkAllHandler = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.checked = $event;
            this.chkall.nativeElement.indeterminate = false;
            this.checkAll(this.checked);
            this.cd.detectChanges();
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterDatalistComponent.prototype.onSelect = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.updateSelectedValues($event);
            this.updateCheckboxState();
            this.buildCondition();
        };
        /**
         * @private
         * @return {?}
         */
        FilterDatalistComponent.prototype.updateCheckboxState = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.selectedValues === undefined) {
                return;
            }
            if (this.selectedValues.split(',').length === this.originalData.length) {
                this.checked = true;
                this.chkall.nativeElement.indeterminate = false;
            }
            else {
                this.checked = false;
                this.chkall.nativeElement.indeterminate = true;
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterDatalistComponent.prototype.onUnSelected = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.updateSelectedValues($event, false);
            this.checked = false;
            this.chkall.nativeElement.indeterminate = !!this.selectedValues;
            this.buildCondition();
        };
        /**
         * @private
         * @return {?}
         */
        FilterDatalistComponent.prototype.buildCondition = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var values = this.selectedValues.split(',');
            if (this.selectedValues) {
                if (values.length === this.originalData.length) {
                    this.valueChange.emit(FilterConditionValue.All);
                    return;
                }
                /** @type {?} */
                var condition = {
                    operator1: FilterOperator.In,
                    value1: values
                };
                this.valueChange.emit(condition);
            }
            else {
                // this.valueChange.emit({ operator1: FilterOperator.Equal, value1: [] });
                // 没有选择相当于此条件无效
                this.valueChange.emit(FilterConditionValue.All);
            }
        };
        /**
         * @param {?} $event
         * @param {?=} selected
         * @return {?}
         */
        FilterDatalistComponent.prototype.updateSelectedValues = /**
         * @param {?} $event
         * @param {?=} selected
         * @return {?}
         */
        function ($event, selected) {
            if (selected === void 0) { selected = true; }
            if ($event) {
                /** @type {?} */
                var val_1 = $event.data[this.valueField];
                /** @type {?} */
                var valArr = this.selectedValues ? this.selectedValues.split(',') : [];
                if (selected) {
                    if (valArr.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n == val_1; })) === -1) {
                        valArr.push(val_1);
                    }
                }
                else {
                    valArr = valArr.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n != val_1; }));
                }
                this.selectedValues = valArr.join(',');
                this.cd.detectChanges();
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        FilterDatalistComponent.prototype.onTextChange = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            /** @type {?} */
            var val = $event.target[this.valueField];
            this.filterKeyWord = val;
            this.changeDataSource();
        };
        /**
         * @private
         * @return {?}
         */
        FilterDatalistComponent.prototype.changeDataSource = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.filterKeyWord) {
                this.data = this.originalData.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return n[_this.textField].indexOf(_this.filterKeyWord) > -1;
                }));
            }
            else {
                this.data = lodashEs.cloneDeep(this.originalData);
            }
        };
        /**
         * @return {?}
         */
        FilterDatalistComponent.prototype.restFilter = /**
         * @return {?}
         */
        function () {
            this.filterKeyWord = '';
            this.changeDataSource();
            this.checkAll();
            this.checked = true;
            this.chkall.nativeElement.indeterminate = false;
            this.cd.detectChanges();
        };
        FilterDatalistComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-datalist',
                        template: "\n    <ul class=\"list-group filter-condition\">\n        <li class=\"list-group-item border-0 border-b1\" *ngIf=\"showFilter\">\n            <input class=\"form-control form-control-sm\" [ngModel]=\"filterKeyWord\"\n                (input)=\"onTextChange($event)\" type=\"text\" >\n        </li>\n        <li class=\"list-group-item datalist border-0 border-b1\">\n            <farris-datalist\n                #dl\n                [data]=\"data\"\n                [idField]=\"idField\"\n                [height]=\"'auto'\"\n                [fit]=\"false\"\n                [multiSelect]=\"true\"\n                [selectedValues]=\"selectedValues\"\n                [valueField]=\"valueField\"\n                [textField]=\"textField\"\n                (selected)=\"onSelect($event)\"\n                (unSelected)=\"onUnSelected($event)\">\n            </farris-datalist>\n        </li>\n        <li class=\"list-group-item border-0\" style=\"border-bottom: 1px solid #dde2eb;\">\n            <div class=\"d-flex\">\n                <div class=\"custom-control custom-checkbox\" style=\"padding-left: 3px;\">\n                    <input id=\"filter-datalist-checkall\" #chkall type=\"checkbox\" class=\"custom-control-input\" [ngModel]=\"checked\" (ngModelChange)=\"checkAllHandler($event)\">\n                    <label class=\"custom-control-label\" for=\"filter-datalist-checkall\" >{{ 'datagrid.filter.checkAll' | locale }}</label>\n                </div>\n                <div class=\"ml-auto\"><button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"restFilter()\">\n                {{ 'datagrid.filter.reset' | locale }}</button></div>\n            </div>\n        </li>\n    </ul>\n    ",
                        encapsulation: core.ViewEncapsulation.None
                    }] }
        ];
        /** @nocollapse */
        FilterDatalistComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: core.ChangeDetectorRef },
            { type: DatagridFilterRowService }
        ]; };
        FilterDatalistComponent.propDecorators = {
            valueField: [{ type: core.Input }],
            textField: [{ type: core.Input }],
            idField: [{ type: core.Input }],
            selectedValues: [{ type: core.Input }],
            data: [{ type: core.Input }],
            showFilter: [{ type: core.Input }],
            filterKeyWord: [{ type: core.Input }],
            chkall: [{ type: core.ViewChild, args: ['chkall',] }],
            dataListInstance: [{ type: core.ViewChild, args: ['dl',] }],
            valueChange: [{ type: core.Output }]
        };
        return FilterDatalistComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FilterSelectComponent = /** @class */ (function () {
        function FilterSelectComponent() {
        }
        /**
         * @return {?}
         */
        FilterSelectComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        FilterSelectComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'filter-select',
                        template: "\n    <select class=\"form-control form-control-sm\">\n        <option>Small select</option>\n    </select>\n    "
                    }] }
        ];
        /** @nocollapse */
        FilterSelectComponent.ctorParameters = function () { return []; };
        return FilterSelectComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var FilterRowProvider = { provide: uiDatagrid.GRID_FILTER_ROW, useValue: FilterRowComponent };
    var DatagridFilterRowModule = /** @class */ (function () {
        function DatagridFilterRowModule() {
        }
        /**
         * @return {?}
         */
        DatagridFilterRowModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: DatagridFilterRowModule,
                providers: [
                    { provide: uiDatagrid.GRID_FILTER_ROW, useValue: FilterRowComponent }
                ]
            };
        };
        DatagridFilterRowModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            FilterRowComponent,
                            FilterCellEditorDirective,
                            FilterTextboxComponent,
                            FilterCheckboxComponent,
                            FilterRowPanelComponent,
                            FilterDatalistComponent,
                            FilterRowEditorComponent,
                            FilterSelectComponent,
                            ConditionEditorComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule,
                            uiDatagrid.DatagridModule,
                            uiDatepicker.FarrisDatePickerModule,
                            uiNumberSpinner.NumberSpinnerModule,
                            uiDatalist.DatalistModule,
                            uiTimePicker.TimePickerModule,
                            uiLocale.LocaleModule.forRoot(),
                            uiForms.FarrisFormsModule,
                            uiCommon.FarrisCommonModule
                        ],
                        entryComponents: [
                            FilterRowComponent,
                            FilterTextboxComponent,
                            FilterCheckboxComponent,
                            ConditionEditorComponent,
                            FilterDatalistComponent,
                            FilterRowPanelComponent,
                            FilterRowEditorComponent,
                            FilterSelectComponent
                        ],
                        exports: [
                            FilterRowComponent
                        ]
                    },] }
        ];
        return DatagridFilterRowModule;
    }());

    exports.AllFilterOperator = AllFilterOperator;
    exports.ConditionEditorComponent = ConditionEditorComponent;
    exports.DatagridFilterRowModule = DatagridFilterRowModule;
    exports.DatagridFilterRowService = DatagridFilterRowService;
    exports.FilterCellEditorDirective = FilterCellEditorDirective;
    exports.FilterCheckboxComponent = FilterCheckboxComponent;
    exports.FilterConditionValue = FilterConditionValue;
    exports.FilterDatalistComponent = FilterDatalistComponent;
    exports.FilterOperator = FilterOperator;
    exports.FilterRowComponent = FilterRowComponent;
    exports.FilterRowEditorComponent = FilterRowEditorComponent;
    exports.FilterRowPanelComponent = FilterRowPanelComponent;
    exports.FilterRowProvider = FilterRowProvider;
    exports.FilterSelectComponent = FilterSelectComponent;
    exports.FilterTextboxComponent = FilterTextboxComponent;
    exports.NumberOrDateFilterOperators = NumberOrDateFilterOperators;
    exports.TextFilterOperators = TextFilterOperators;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=farris-ui-datagrid-filter.umd.js.map
