/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { TimePickerModule } from '@farris/ui-time-picker';
import { LocaleModule } from '@farris/ui-locale';
import { DatagridModule, GRID_FILTER_ROW } from '@farris/ui-datagrid';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { DatalistModule } from '@farris/ui-datalist';
import { FarrisFormsModule } from '@farris/ui-forms';
import { FarrisCommonModule } from '@farris/ui-common';
import { FilterRowComponent } from './datagrid-filter-row.component';
import { FilterCellEditorDirective } from './datagrid-filter-cell-editor.directive';
import { FilterTextboxComponent } from './filter-editors/filter-row-textbox.component';
import { FilterRowPanelComponent } from './filter-editors/filter-row-panel.component';
import { FilterCheckboxComponent } from './filter-editors/filter-row-checkbox.component';
import { ConditionEditorComponent } from './filter-editors/condition-editor.component';
import { FilterDatalistComponent } from './filter-editors/filter-datalist.component';
import { FilterRowEditorComponent } from './filter-editors/filter-row-editor.component';
import { FilterSelectComponent } from './filter-editors/filter-row-select.component';
/** @type {?} */
export var FilterRowProvider = { provide: GRID_FILTER_ROW, useValue: FilterRowComponent };
var DatagridFilterRowModule = /** @class */ (function () {
    function DatagridFilterRowModule() {
    }
    /**
     * @return {?}
     */
    DatagridFilterRowModule.forRoot = /**
     * @return {?}
     */
    function () {
        return {
            ngModule: DatagridFilterRowModule,
            providers: [
                { provide: GRID_FILTER_ROW, useValue: FilterRowComponent }
            ]
        };
    };
    DatagridFilterRowModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FilterRowComponent,
                        FilterCellEditorDirective,
                        FilterTextboxComponent,
                        FilterCheckboxComponent,
                        FilterRowPanelComponent,
                        FilterDatalistComponent,
                        FilterRowEditorComponent,
                        FilterSelectComponent,
                        ConditionEditorComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        ReactiveFormsModule,
                        DatagridModule,
                        FarrisDatePickerModule,
                        NumberSpinnerModule,
                        DatalistModule,
                        TimePickerModule,
                        LocaleModule.forRoot(),
                        FarrisFormsModule,
                        FarrisCommonModule
                    ],
                    entryComponents: [
                        FilterRowComponent,
                        FilterTextboxComponent,
                        FilterCheckboxComponent,
                        ConditionEditorComponent,
                        FilterDatalistComponent,
                        FilterRowPanelComponent,
                        FilterRowEditorComponent,
                        FilterSelectComponent
                    ],
                    exports: [
                        FilterRowComponent
                    ]
                },] }
    ];
    return DatagridFilterRowModule;
}());
export { DatagridFilterRowModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLXJvdy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1maWx0ZXItcm93Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDekYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDckYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDeEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOENBQThDLENBQUM7O0FBR3JGLE1BQU0sS0FBTyxpQkFBaUIsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFHO0FBRTVGO0lBQUE7SUFnREEsQ0FBQzs7OztJQVJVLCtCQUFPOzs7SUFBZDtRQUNJLE9BQU87WUFDSCxRQUFRLEVBQUUsdUJBQXVCO1lBQ2pDLFNBQVMsRUFBRTtnQkFDUCxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFHO2FBQzlEO1NBQ0osQ0FBQztJQUNOLENBQUM7O2dCQS9DSixRQUFRLFNBQUM7b0JBQ04sWUFBWSxFQUFFO3dCQUNWLGtCQUFrQjt3QkFDbEIseUJBQXlCO3dCQUN6QixzQkFBc0I7d0JBQ3RCLHVCQUF1Qjt3QkFDdkIsdUJBQXVCO3dCQUN2Qix1QkFBdUI7d0JBQ3ZCLHdCQUF3Qjt3QkFDeEIscUJBQXFCO3dCQUNyQix3QkFBd0I7cUJBQzNCO29CQUNELE9BQU8sRUFBRTt3QkFDTCxZQUFZO3dCQUNaLFdBQVc7d0JBQ1gsbUJBQW1CO3dCQUNuQixjQUFjO3dCQUNkLHNCQUFzQjt3QkFDdEIsbUJBQW1CO3dCQUNuQixjQUFjO3dCQUNkLGdCQUFnQjt3QkFDaEIsWUFBWSxDQUFDLE9BQU8sRUFBRTt3QkFDdEIsaUJBQWlCO3dCQUNqQixrQkFBa0I7cUJBQ3JCO29CQUNELGVBQWUsRUFBRTt3QkFDYixrQkFBa0I7d0JBQ2xCLHNCQUFzQjt3QkFDdEIsdUJBQXVCO3dCQUN2Qix3QkFBd0I7d0JBQ3hCLHVCQUF1Qjt3QkFDdkIsdUJBQXVCO3dCQUN2Qix3QkFBd0I7d0JBQ3hCLHFCQUFxQjtxQkFDeEI7b0JBQ0QsT0FBTyxFQUFFO3dCQUNMLGtCQUFrQjtxQkFDckI7aUJBQ0o7O0lBVUQsOEJBQUM7Q0FBQSxBQWhERCxJQWdEQztTQVRZLHVCQUF1QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBQcm92aWRlciwgTW9kdWxlV2l0aFByb3ZpZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3Jtc01vZHVsZSwgUmVhY3RpdmVGb3Jtc01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCB7IFRpbWVQaWNrZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLXRpbWUtcGlja2VyJztcclxuaW1wb3J0IHsgTG9jYWxlTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1sb2NhbGUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZE1vZHVsZSwgR1JJRF9GSUxURVJfUk9XIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGVwaWNrZXInO1xyXG5pbXBvcnQgeyBOdW1iZXJTcGlubmVyTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1udW1iZXItc3Bpbm5lcic7XHJcbmltcG9ydCB7IERhdGFsaXN0TW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhbGlzdCc7XHJcbmltcG9ydCB7IEZhcnJpc0Zvcm1zTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1mb3Jtcyc7XHJcbmltcG9ydCB7IEZhcnJpc0NvbW1vbk1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktY29tbW9uJztcclxuXHJcblxyXG5pbXBvcnQgeyBGaWx0ZXJSb3dDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLWZpbHRlci1yb3cuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyQ2VsbEVkaXRvckRpcmVjdGl2ZSB9IGZyb20gJy4vZGF0YWdyaWQtZmlsdGVyLWNlbGwtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEZpbHRlclRleHRib3hDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2ZpbHRlci1yb3ctdGV4dGJveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJSb3dQYW5lbENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy1wYW5lbC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy1jaGVja2JveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb25kaXRpb25FZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2NvbmRpdGlvbi1lZGl0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyRGF0YWxpc3RDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2ZpbHRlci1kYXRhbGlzdC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJSb3dFZGl0b3JDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2ZpbHRlci1yb3ctZWRpdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlclNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy1zZWxlY3QuY29tcG9uZW50JztcclxuXHJcblxyXG5leHBvcnQgY29uc3QgRmlsdGVyUm93UHJvdmlkZXIgPSB7IHByb3ZpZGU6IEdSSURfRklMVEVSX1JPVywgdXNlVmFsdWU6IEZpbHRlclJvd0NvbXBvbmVudCAgfTtcclxuXHJcbkBOZ01vZHVsZSh7XHJcbiAgICBkZWNsYXJhdGlvbnM6IFtcclxuICAgICAgICBGaWx0ZXJSb3dDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyQ2VsbEVkaXRvckRpcmVjdGl2ZSxcclxuICAgICAgICBGaWx0ZXJUZXh0Ym94Q29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlckNoZWNrYm94Q29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclJvd1BhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlckRhdGFsaXN0Q29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclJvd0VkaXRvckNvbXBvbmVudCxcclxuICAgICAgICBGaWx0ZXJTZWxlY3RDb21wb25lbnQsXHJcbiAgICAgICAgQ29uZGl0aW9uRWRpdG9yQ29tcG9uZW50XHJcbiAgICBdLFxyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIENvbW1vbk1vZHVsZSxcclxuICAgICAgICBGb3Jtc01vZHVsZSxcclxuICAgICAgICBSZWFjdGl2ZUZvcm1zTW9kdWxlLFxyXG4gICAgICAgIERhdGFncmlkTW9kdWxlLFxyXG4gICAgICAgIEZhcnJpc0RhdGVQaWNrZXJNb2R1bGUsXHJcbiAgICAgICAgTnVtYmVyU3Bpbm5lck1vZHVsZSxcclxuICAgICAgICBEYXRhbGlzdE1vZHVsZSxcclxuICAgICAgICBUaW1lUGlja2VyTW9kdWxlLFxyXG4gICAgICAgIExvY2FsZU1vZHVsZS5mb3JSb290KCksXHJcbiAgICAgICAgRmFycmlzRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzQ29tbW9uTW9kdWxlXHJcbiAgICBdLFxyXG4gICAgZW50cnlDb21wb25lbnRzOiBbXHJcbiAgICAgICAgRmlsdGVyUm93Q29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclRleHRib3hDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyQ2hlY2tib3hDb21wb25lbnQsXHJcbiAgICAgICAgQ29uZGl0aW9uRWRpdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlckRhdGFsaXN0Q29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclJvd1BhbmVsQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclJvd0VkaXRvckNvbXBvbmVudCxcclxuICAgICAgICBGaWx0ZXJTZWxlY3RDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBleHBvcnRzOiBbXHJcbiAgICAgICAgRmlsdGVyUm93Q29tcG9uZW50XHJcbiAgICBdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEZpbHRlclJvd01vZHVsZSB7XHJcbiAgICBzdGF0aWMgZm9yUm9vdCgpOiBNb2R1bGVXaXRoUHJvdmlkZXJzIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBuZ01vZHVsZTogRGF0YWdyaWRGaWx0ZXJSb3dNb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBHUklEX0ZJTFRFUl9ST1csIHVzZVZhbHVlOiBGaWx0ZXJSb3dDb21wb25lbnQgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbn1cclxuIl19