/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormGroup } from '@angular/forms';
import { Directive, Input, Injector, ComponentFactoryResolver, ViewContainerRef, Renderer2 } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { FilterTextboxComponent } from './filter-editors/filter-row-textbox.component';
import { FilterCheckboxComponent } from './filter-editors/filter-row-checkbox.component';
var FilterCellEditorDirective = /** @class */ (function () {
    function FilterCellEditorDirective(injector, resolver, container, render) {
        this.injector = injector;
        this.resolver = resolver;
        this.container = container;
        this.render = render;
        this.delay = 300;
    }
    /**
     * @return {?}
     */
    FilterCellEditorDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.createFilterEditor();
    };
    /**
     * @private
     * @return {?}
     */
    FilterCellEditorDirective.prototype.createFilterEditor = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.column.filter) {
            /** @type {?} */
            var columnFilter = (/** @type {?} */ (this.column.filter));
            columnFilter.type = columnFilter.type || ColumnFilterType.string;
            /** @type {?} */
            var constructorCmp = FilterTextboxComponent;
            switch (columnFilter.type) {
                case ColumnFilterType.boolean:
                    constructorCmp = FilterCheckboxComponent;
                    break;
                // case ColumnFilterType.enum:
                //     constructorCmp = FilterEnumComponent;
                //     break;
            }
            /** @type {?} */
            var factory = this.resolver.resolveComponentFactory(constructorCmp);
            this.componentRef = this.container.createComponent(factory);
            this.componentRef.instance.column = this.column;
            this.componentRef.instance.group = this.group;
            this.componentRef.instance.gridInstance = this.gridInstance;
            this.componentRef.instance.disabled = columnFilter.type >= 3;
            this.componentRef.instance.delay = this.delay;
            if (this.gridInstance.conditions && Object.keys(this.gridInstance.conditions).length) {
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.componentRef.instance.initFilter(_this.gridInstance.conditions[_this.column.field]);
                }), 100);
            }
        }
    };
    /**
     * @return {?}
     */
    FilterCellEditorDirective.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        if (this.componentRef) {
            this.componentRef.instance.clearValue();
        }
    };
    FilterCellEditorDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[filter-cell-editor]',
                },] }
    ];
    /** @nocollapse */
    FilterCellEditorDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: ComponentFactoryResolver },
        { type: ViewContainerRef },
        { type: Renderer2 }
    ]; };
    FilterCellEditorDirective.propDecorators = {
        column: [{ type: Input }],
        group: [{ type: Input }],
        gridInstance: [{ type: Input }],
        delay: [{ type: Input }]
    };
    return FilterCellEditorDirective;
}());
export { FilterCellEditorDirective };
if (false) {
    /** @type {?} */
    FilterCellEditorDirective.prototype.column;
    /** @type {?} */
    FilterCellEditorDirective.prototype.group;
    /** @type {?} */
    FilterCellEditorDirective.prototype.gridInstance;
    /** @type {?} */
    FilterCellEditorDirective.prototype.delay;
    /** @type {?} */
    FilterCellEditorDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLWNlbGwtZWRpdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2RhdGFncmlkLWZpbHRlci1jZWxsLWVkaXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLEVBQXdCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQTRCLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFekY7SUFTSSxtQ0FDWSxRQUFrQixFQUNsQixRQUFrQyxFQUNsQyxTQUEyQixFQUMzQixNQUFpQjtRQUhqQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGFBQVEsR0FBUixRQUFRLENBQTBCO1FBQ2xDLGNBQVMsR0FBVCxTQUFTLENBQWtCO1FBQzNCLFdBQU0sR0FBTixNQUFNLENBQVc7UUFOcEIsVUFBSyxHQUFHLEdBQUcsQ0FBQztJQU1XLENBQUM7Ozs7SUFFakMsNENBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTyxzREFBa0I7Ozs7SUFBMUI7UUFBQSxpQkE2QkM7UUEzQkcsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7Z0JBQ2QsWUFBWSxHQUFHLG1CQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFnQjtZQUN2RCxZQUFZLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDOztnQkFDN0QsY0FBYyxHQUFRLHNCQUFzQjtZQUNoRCxRQUFRLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZCLEtBQUssZ0JBQWdCLENBQUMsT0FBTztvQkFDekIsY0FBYyxHQUFHLHVCQUF1QixDQUFDO29CQUN6QyxNQUFNO2dCQUNWLDhCQUE4QjtnQkFDOUIsNENBQTRDO2dCQUM1QyxhQUFhO2FBQ2hCOztnQkFDSyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBRSxjQUFjLENBQUU7WUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFFOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFHO2dCQUNuRixVQUFVOzs7Z0JBQUM7b0JBQ1AsS0FBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDM0YsQ0FBQyxHQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQ1g7U0FDSjtJQUVMLENBQUM7Ozs7SUFFRCw4Q0FBVTs7O0lBQVY7UUFDSSxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLENBQUM7U0FDM0M7SUFDTCxDQUFDOztnQkF0REosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ25DOzs7O2dCQVAwQixRQUFRO2dCQUFFLHdCQUF3QjtnQkFBRSxnQkFBZ0I7Z0JBQXdCLFNBQVM7Ozt5QkFTM0csS0FBSzt3QkFDTCxLQUFLOytCQUNMLEtBQUs7d0JBQ0wsS0FBSzs7SUFpRFYsZ0NBQUM7Q0FBQSxBQXhERCxJQXdEQztTQXJEWSx5QkFBeUI7OztJQUNsQywyQ0FBNEI7O0lBQzVCLDBDQUEwQjs7SUFDMUIsaURBQTJCOztJQUMzQiwwQ0FBcUI7O0lBQ3JCLGlEQUFnQzs7Ozs7SUFFNUIsNkNBQTBCOzs7OztJQUMxQiw2Q0FBMEM7Ozs7O0lBQzFDLDhDQUFtQzs7Ozs7SUFDbkMsMkNBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmLCBPbkluaXQsIENvbXBvbmVudFJlZiwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFDb2x1bW4sIENvbHVtbkZpbHRlciwgQ29sdW1uRmlsdGVyVHlwZSB9IGZyb20gJ0BmYXJyaXMvdWktZGF0YWdyaWQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJUZXh0Ym94Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LXRleHRib3guY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyQ2hlY2tib3hDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2ZpbHRlci1yb3ctY2hlY2tib3guY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZmlsdGVyLWNlbGwtZWRpdG9yXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGaWx0ZXJDZWxsRWRpdG9yRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgpIGNvbHVtbjogRGF0YUNvbHVtbjtcclxuICAgIEBJbnB1dCgpIGdyb3VwOiBGb3JtR3JvdXA7XHJcbiAgICBASW5wdXQoKSBncmlkSW5zdGFuY2U6IGFueTtcclxuICAgIEBJbnB1dCgpIGRlbGF5ID0gMzAwO1xyXG4gICAgY29tcG9uZW50UmVmOiBDb21wb25lbnRSZWY8YW55PjtcclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgICAgIHByaXZhdGUgcmVzb2x2ZXI6IENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcixcclxuICAgICAgICBwcml2YXRlIGNvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyKSB7fVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlRmlsdGVyRWRpdG9yKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjcmVhdGVGaWx0ZXJFZGl0b3IoKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmNvbHVtbi5maWx0ZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgY29sdW1uRmlsdGVyID0gdGhpcy5jb2x1bW4uZmlsdGVyIGFzIENvbHVtbkZpbHRlcjtcclxuICAgICAgICAgICAgY29sdW1uRmlsdGVyLnR5cGUgPSBjb2x1bW5GaWx0ZXIudHlwZSB8fCBDb2x1bW5GaWx0ZXJUeXBlLnN0cmluZztcclxuICAgICAgICAgICAgbGV0IGNvbnN0cnVjdG9yQ21wOiBhbnkgPSBGaWx0ZXJUZXh0Ym94Q29tcG9uZW50O1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGNvbHVtbkZpbHRlci50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIENvbHVtbkZpbHRlclR5cGUuYm9vbGVhbjpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdHJ1Y3RvckNtcCA9IEZpbHRlckNoZWNrYm94Q29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgLy8gY2FzZSBDb2x1bW5GaWx0ZXJUeXBlLmVudW06XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgY29uc3RydWN0b3JDbXAgPSBGaWx0ZXJFbnVtQ29tcG9uZW50O1xyXG4gICAgICAgICAgICAgICAgLy8gICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLnJlc29sdmVyLnJlc29sdmVDb21wb25lbnRGYWN0b3J5KCBjb25zdHJ1Y3RvckNtcCApO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZiA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZUNvbXBvbmVudChmYWN0b3J5KTtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuY29sdW1uID0gdGhpcy5jb2x1bW47XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmdyb3VwID0gdGhpcy5ncm91cDtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZ3JpZEluc3RhbmNlID0gdGhpcy5ncmlkSW5zdGFuY2U7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmRpc2FibGVkID0gY29sdW1uRmlsdGVyLnR5cGUgPj0gMztcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZGVsYXkgPSB0aGlzLmRlbGF5O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JpZEluc3RhbmNlLmNvbmRpdGlvbnMgJiYgT2JqZWN0LmtleXModGhpcy5ncmlkSW5zdGFuY2UuY29uZGl0aW9ucykubGVuZ3RoICkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuaW5pdEZpbHRlcih0aGlzLmdyaWRJbnN0YW5jZS5jb25kaXRpb25zW3RoaXMuY29sdW1uLmZpZWxkXSk7XHJcbiAgICAgICAgICAgICAgICB9LCAxMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBjbGVhclZhbHVlKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmNvbXBvbmVudFJlZikge1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jbGVhclZhbHVlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=