/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, Injector, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { DatalistComponent } from '@farris/ui-datalist';
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { DatagridFilterRowService } from './../datagrid-filter-row.service';
var FilterDatalistComponent = /** @class */ (function () {
    function FilterDatalistComponent(inject, cd, dfrs) {
        this.inject = inject;
        this.cd = cd;
        this.dfrs = dfrs;
        this.data = [];
        this.showFilter = false;
        this.filterKeyWord = '';
        this.valueChange = new EventEmitter();
        this.checked = false;
        this.originalData = [];
    }
    /**
     * @return {?}
     */
    FilterDatalistComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.originalData = cloneDeep(this.data);
    };
    /**
     * @return {?}
     */
    FilterDatalistComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.selectedValues === undefined) {
            setTimeout((/**
             * @return {?}
             */
            function () {
                _this.checkAll(true, false);
                _this.checked = true;
                _this.cd.detectChanges();
            }));
        }
        this.updateCheckboxState();
    };
    /**
     * @private
     * @param {?=} checked
     * @param {?=} emit
     * @return {?}
     */
    FilterDatalistComponent.prototype.checkAll = /**
     * @private
     * @param {?=} checked
     * @param {?=} emit
     * @return {?}
     */
    function (checked, emit) {
        var _this = this;
        if (checked === void 0) { checked = true; }
        if (emit === void 0) { emit = true; }
        if (checked) {
            this.dataListInstance.selectAll();
            this.selectedValues = this.originalData.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.valueField]; })).join(',');
        }
        else {
            this.dataListInstance.unSelectAll();
            this.selectedValues = '';
        }
        if (emit) {
            this.buildCondition();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterDatalistComponent.prototype.checkAllHandler = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.checked = $event;
        this.chkall.nativeElement.indeterminate = false;
        this.checkAll(this.checked);
        this.cd.detectChanges();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterDatalistComponent.prototype.onSelect = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.updateSelectedValues($event);
        this.updateCheckboxState();
        this.buildCondition();
    };
    /**
     * @private
     * @return {?}
     */
    FilterDatalistComponent.prototype.updateCheckboxState = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.selectedValues === undefined) {
            return;
        }
        if (this.selectedValues.split(',').length === this.originalData.length) {
            this.checked = true;
            this.chkall.nativeElement.indeterminate = false;
        }
        else {
            this.checked = false;
            this.chkall.nativeElement.indeterminate = true;
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterDatalistComponent.prototype.onUnSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.updateSelectedValues($event, false);
        this.checked = false;
        this.chkall.nativeElement.indeterminate = !!this.selectedValues;
        this.buildCondition();
    };
    /**
     * @private
     * @return {?}
     */
    FilterDatalistComponent.prototype.buildCondition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var values = this.selectedValues.split(',');
        if (this.selectedValues) {
            if (values.length === this.originalData.length) {
                this.valueChange.emit(FilterConditionValue.All);
                return;
            }
            /** @type {?} */
            var condition = {
                operator1: FilterOperator.In,
                value1: values
            };
            this.valueChange.emit(condition);
        }
        else {
            // this.valueChange.emit({ operator1: FilterOperator.Equal, value1: [] });
            // 没有选择相当于此条件无效
            this.valueChange.emit(FilterConditionValue.All);
        }
    };
    /**
     * @param {?} $event
     * @param {?=} selected
     * @return {?}
     */
    FilterDatalistComponent.prototype.updateSelectedValues = /**
     * @param {?} $event
     * @param {?=} selected
     * @return {?}
     */
    function ($event, selected) {
        if (selected === void 0) { selected = true; }
        if ($event) {
            /** @type {?} */
            var val_1 = $event.data[this.valueField];
            /** @type {?} */
            var valArr = this.selectedValues ? this.selectedValues.split(',') : [];
            if (selected) {
                if (valArr.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n == val_1; })) === -1) {
                    valArr.push(val_1);
                }
            }
            else {
                valArr = valArr.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n != val_1; }));
            }
            this.selectedValues = valArr.join(',');
            this.cd.detectChanges();
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterDatalistComponent.prototype.onTextChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var val = $event.target[this.valueField];
        this.filterKeyWord = val;
        this.changeDataSource();
    };
    /**
     * @private
     * @return {?}
     */
    FilterDatalistComponent.prototype.changeDataSource = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.filterKeyWord) {
            this.data = this.originalData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n[_this.textField].indexOf(_this.filterKeyWord) > -1;
            }));
        }
        else {
            this.data = cloneDeep(this.originalData);
        }
    };
    /**
     * @return {?}
     */
    FilterDatalistComponent.prototype.restFilter = /**
     * @return {?}
     */
    function () {
        this.filterKeyWord = '';
        this.changeDataSource();
        this.checkAll();
        this.checked = true;
        this.chkall.nativeElement.indeterminate = false;
        this.cd.detectChanges();
    };
    FilterDatalistComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-datalist',
                    template: "\n    <ul class=\"list-group filter-condition\">\n        <li class=\"list-group-item border-0 border-b1\" *ngIf=\"showFilter\">\n            <input class=\"form-control form-control-sm\" [ngModel]=\"filterKeyWord\"\n                (input)=\"onTextChange($event)\" type=\"text\" >\n        </li>\n        <li class=\"list-group-item datalist border-0 border-b1\">\n            <farris-datalist\n                #dl\n                [data]=\"data\"\n                [idField]=\"idField\"\n                [height]=\"'auto'\"\n                [fit]=\"false\"\n                [multiSelect]=\"true\"\n                [selectedValues]=\"selectedValues\"\n                [valueField]=\"valueField\"\n                [textField]=\"textField\"\n                (selected)=\"onSelect($event)\"\n                (unSelected)=\"onUnSelected($event)\">\n            </farris-datalist>\n        </li>\n        <li class=\"list-group-item border-0\" style=\"border-bottom: 1px solid #dde2eb;\">\n            <div class=\"d-flex\">\n                <div class=\"custom-control custom-checkbox\" style=\"padding-left: 3px;\">\n                    <input id=\"filter-datalist-checkall\" #chkall type=\"checkbox\" class=\"custom-control-input\" [ngModel]=\"checked\" (ngModelChange)=\"checkAllHandler($event)\">\n                    <label class=\"custom-control-label\" for=\"filter-datalist-checkall\" >{{ 'datagrid.filter.checkAll' | locale }}</label>\n                </div>\n                <div class=\"ml-auto\"><button type=\"button\" class=\"btn btn-outline-primary\" (click)=\"restFilter()\">\n                {{ 'datagrid.filter.reset' | locale }}</button></div>\n            </div>\n        </li>\n    </ul>\n    ",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    FilterDatalistComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: ChangeDetectorRef },
        { type: DatagridFilterRowService }
    ]; };
    FilterDatalistComponent.propDecorators = {
        valueField: [{ type: Input }],
        textField: [{ type: Input }],
        idField: [{ type: Input }],
        selectedValues: [{ type: Input }],
        data: [{ type: Input }],
        showFilter: [{ type: Input }],
        filterKeyWord: [{ type: Input }],
        chkall: [{ type: ViewChild, args: ['chkall',] }],
        dataListInstance: [{ type: ViewChild, args: ['dl',] }],
        valueChange: [{ type: Output }]
    };
    return FilterDatalistComponent;
}());
export { FilterDatalistComponent };
if (false) {
    /** @type {?} */
    FilterDatalistComponent.prototype.valueField;
    /** @type {?} */
    FilterDatalistComponent.prototype.textField;
    /** @type {?} */
    FilterDatalistComponent.prototype.idField;
    /** @type {?} */
    FilterDatalistComponent.prototype.selectedValues;
    /** @type {?} */
    FilterDatalistComponent.prototype.data;
    /** @type {?} */
    FilterDatalistComponent.prototype.showFilter;
    /** @type {?} */
    FilterDatalistComponent.prototype.filterKeyWord;
    /** @type {?} */
    FilterDatalistComponent.prototype.chkall;
    /** @type {?} */
    FilterDatalistComponent.prototype.dataListInstance;
    /** @type {?} */
    FilterDatalistComponent.prototype.valueChange;
    /** @type {?} */
    FilterDatalistComponent.prototype.checked;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.originalData;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.dfrs;
}
//# sourceMappingURL=data:application/json;base64,