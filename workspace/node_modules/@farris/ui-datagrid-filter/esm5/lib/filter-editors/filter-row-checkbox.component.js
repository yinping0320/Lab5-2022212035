/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { Component, ViewChild, ElementRef, ChangeDetectorRef, Injector } from '@angular/core';
import { FilterRowEditorComponent } from './filter-row-editor.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
// <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
var FilterCheckboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FilterCheckboxComponent, _super);
    function FilterCheckboxComponent(dfrs, cd, inject) {
        var _this = _super.call(this) || this;
        _this.dfrs = dfrs;
        _this.cd = cd;
        _this.inject = inject;
        _this.i = 0;
        _this.checked = false;
        _this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            if (f === _this.column.field) {
                _this.clearValue();
            }
        }));
        return _this;
    }
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.chk.nativeElement.indeterminate = true;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterCheckboxComponent.prototype.checkedChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.dfrs.closeFilterPanel();
        if (this.i > 0) {
            this.checked = !this.checked;
        }
        this.i += 1;
        if (this.i > 2) {
            this.i = 0;
            this.chk.nativeElement.indeterminate = true;
        }
        else {
            this.chk.nativeElement.indeterminate = false;
        }
        if (this.i === 0) {
            this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            this.checked = false;
        }
        else {
            /** @type {?} */
            var condition = {
                operator1: FilterOperator.Equal,
                value1: this.checked
            };
            this.dfrs.updateColumnConditions(this.column.field, condition);
        }
        this.cd.detectChanges();
        $event.stopPropagation();
    };
    /**
     * @return {?}
     */
    FilterCheckboxComponent.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.checked = false;
        this.chk.nativeElement.indeterminate = true;
        this.cd.detectChanges();
    };
    /**
     * @param {?} filterCondition
     * @return {?}
     */
    FilterCheckboxComponent.prototype.initFilter = /**
     * @param {?} filterCondition
     * @return {?}
     */
    function (filterCondition) {
        if (filterCondition && Object.keys(filterCondition).length) {
            this.checked = filterCondition.value1;
            this.chk.nativeElement.indeterminate = false;
            this.i = this.checked ? 2 : 1;
        }
        else {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.i = 0;
        }
        this.dfrs._updateColumnConditions(this.column.field, filterCondition);
        this.cd.detectChanges();
    };
    FilterCheckboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-checkbox',
                    template: "\n    <div class=\"custom-control custom-checkbox f-checkradio-single\">\n        <input [name]=\"column.field\" [checked]=\"checked\" type=\"checkbox\" #chk class=\"custom-control-input\">\n        <label class=\"custom-control-label\" (click)=\"checkedChange($event)\"></label>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    FilterCheckboxComponent.ctorParameters = function () { return [
        { type: DatagridFilterRowService },
        { type: ChangeDetectorRef },
        { type: Injector }
    ]; };
    FilterCheckboxComponent.propDecorators = {
        chk: [{ type: ViewChild, args: ['chk',] }]
    };
    return FilterCheckboxComponent;
}(FilterRowEditorComponent));
export { FilterCheckboxComponent };
if (false) {
    /** @type {?} */
    FilterCheckboxComponent.prototype.i;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checked;
    /** @type {?} */
    FilterCheckboxComponent.prototype.chk;
    /** @type {?} */
    FilterCheckboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,