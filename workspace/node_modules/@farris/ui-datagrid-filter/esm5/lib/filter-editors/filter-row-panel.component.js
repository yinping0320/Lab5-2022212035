/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, NgZone, ElementRef, Renderer2, Output, EventEmitter, Injector } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
var FilterRowPanelComponent = /** @class */ (function () {
    function FilterRowPanelComponent(ngzone, el, render, dfrs, inject) {
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dfrs = dfrs;
        this.inject = inject;
        this.width = 240;
        this.height = 250;
        this.datatype = ColumnFilterType.string;
        this.conditionChange = new EventEmitter();
        this.panelHeightChange = new EventEmitter();
        this.gridInstance = null;
        this.enumSetting = {};
        this.condition = {
            operator1: 1,
            value1: '',
            relation: '',
            operator2: 1,
            value2: ''
        };
        this.documentClickHandle = null;
        this.ro = null;
        this.zone = null;
        this.zone = this.inject.get(NgZone);
        this.commonUtils = this.inject.get(CommonUtils, new CommonUtils());
        this.overlaySer = this.inject.get(OverLayHiddenService, new OverLayHiddenService());
    }
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            _this.render.listen(_this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.stopPropagation();
                return false;
            }));
        }));
        this.initEnumSetting();
        // this.documentClickHandle = this.render.listen(document, 'click', (event) => {
        //     this.close(event);
        // });
        this.overlaySer.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var tar = (/** @type {?} */ (e.target));
            if (tar && tar.closest('.overlay-container')) {
                return;
            }
            if (document.body.className.indexOf('modal-open') > -1) {
                return;
            }
            if (_this.el.nativeElement.contains(e.target)) {
                return;
            }
            _this.close(e);
        }));
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.target) {
            this.resetPanelPosition();
            /** @type {?} */
            var panelDiv = this.el.nativeElement.querySelector('div');
            panelDiv.style.transition = 'top 0.2s ease 0.05s';
            /** @type {?} */
            var zindex = this.commonUtils.getFloatingLayerIndex();
            panelDiv.style.zIndex = zindex;
            /** @type {?} */
            var overlayEl = this.el.nativeElement.querySelector('.filter-panel-overlay');
            if (overlayEl) {
                overlayEl.style.zIndex = zindex;
                panelDiv.style.zIndex = zindex + 1;
            }
            // this.el.nativeElement.style.position = 'fixed';
        }
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.overlaySer) {
            this.overlaySer.destory(this.el.nativeElement);
        }
    };
    /**
     * @private
     * @return {?}
     */
    FilterRowPanelComponent.prototype.resetPanelPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var panelDiv = this.el.nativeElement.querySelector('div');
        /** @type {?} */
        var h = panelDiv.querySelector('.panel-content').clientHeight + 36;
        /** @type {?} */
        var rect = this.target.target.parentElement.getBoundingClientRect();
        /** @type {?} */
        var downAreaHeight = window['innerHeight'] - rect.top;
        if (downAreaHeight < h) {
            /** @type {?} */
            var top_1 = window['innerHeight'] - h - 10;
            panelDiv.style.top = top_1 + 'px';
        }
        else {
            panelDiv.style.top = rect.top + 'px';
        }
    };
    /**
     * @return {?}
     */
    FilterRowPanelComponent.prototype.onPanelHeightChanged = /**
     * @return {?}
     */
    function () {
        this.resetPanelPosition();
        this.panelHeightChange.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterRowPanelComponent.prototype.close = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.stopPropagation();
        this.dfrs.closeFilterPanel();
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    FilterRowPanelComponent.prototype.onValueChange = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        this.conditionChange.emit(condition);
    };
    /**
     * @private
     * @return {?}
     */
    FilterRowPanelComponent.prototype.initEnumSetting = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.datatype > 5) {
            this.enumSetting = this.dfrs.getEnumOptions(this.column);
            /** @type {?} */
            var currentColumnCondition = (/** @type {?} */ (this.dfrs.columnConditions[this.column.field]));
            if (currentColumnCondition && currentColumnCondition.value1) {
                this.selectedValues = currentColumnCondition.value1.join(',');
            }
        }
    };
    FilterRowPanelComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-row-panel',
                    template: "<div class=\"f-datagrid-filter-panel d-flex flex-column\" style=\"position: fixed;\" [style.width.px]=\"width\"  (click)=\"$event.stopPropagation()\">\r\n    <div class=\"panel-header\">\r\n        <div (click)=\"close($event)\" class=\"panel-icon\" style=\"text-align: center; cursor: pointer;\">\r\n            <span class=\"f-icon f-icon-filter-sm\"></span>\r\n        </div> \r\n    </div>\r\n    <div class=\"panel-content flex-fill\">\r\n        <condition-editor *ngIf=\"datatype < 6\"\r\n            [datatype]=\"datatype\"\r\n            [condition]=\"condition\"\r\n            [operators]=\"operators\"\r\n            [filterOptions]=\"column.filter.options\"\r\n            (conditionChange)=\"onValueChange($event)\"\r\n            (panelHeightChange)=\"onPanelHeightChanged()\"></condition-editor>\r\n            \r\n\r\n        <filter-datalist *ngIf=\"datatype === 6 || datatype === 7\" \r\n            [data]=\"enumSetting?.data\" [valueField]=\"enumSetting?.valueField\"\r\n            [textField]=\"enumSetting?.textField\" [idField]=\"enumSetting?.valueField\"\r\n            [selectedValues]=\"selectedValues\"\r\n            (valueChange)=\"onValueChange($event)\"></filter-datalist>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"filter-panel-overlay\" style=\"position: absolute;\r\nposition: absolute;\r\nwidth: 100%;\r\ntop: 0;\r\nheight: 100%;\r\nbackground: rgb(255, 255, 255);\r\nopacity: 0;\" (click)=\"close($event)\"></div>\r\n"
                }] }
    ];
    /** @nocollapse */
    FilterRowPanelComponent.ctorParameters = function () { return [
        { type: NgZone },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DatagridFilterRowService },
        { type: Injector }
    ]; };
    FilterRowPanelComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        column: [{ type: Input }],
        operators: [{ type: Input }],
        datatype: [{ type: Input }],
        conditionChange: [{ type: Output }],
        panelHeightChange: [{ type: Output }]
    };
    return FilterRowPanelComponent;
}());
export { FilterRowPanelComponent };
if (false) {
    /** @type {?} */
    FilterRowPanelComponent.prototype.width;
    /** @type {?} */
    FilterRowPanelComponent.prototype.height;
    /** @type {?} */
    FilterRowPanelComponent.prototype.column;
    /** @type {?} */
    FilterRowPanelComponent.prototype.operators;
    /** @type {?} */
    FilterRowPanelComponent.prototype.datatype;
    /** @type {?} */
    FilterRowPanelComponent.prototype.conditionChange;
    /** @type {?} */
    FilterRowPanelComponent.prototype.panelHeightChange;
    /** @type {?} */
    FilterRowPanelComponent.prototype.gridInstance;
    /** @type {?} */
    FilterRowPanelComponent.prototype.enumSetting;
    /** @type {?} */
    FilterRowPanelComponent.prototype.selectedValues;
    /** @type {?} */
    FilterRowPanelComponent.prototype.condition;
    /** @type {?} */
    FilterRowPanelComponent.prototype.documentClickHandle;
    /** @type {?} */
    FilterRowPanelComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.render;
    /** @type {?} */
    FilterRowPanelComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXJvdy1wYW5lbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LXBhbmVsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFVLFVBQVUsRUFDekMsU0FBUyxFQUFFLE1BQU0sRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUE0QixNQUFNLGVBQWUsQ0FBQztBQUV2RyxPQUFPLEVBQWMsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRSxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUUxRSxPQUFPLEVBQUUsV0FBVyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFdEU7SUFxQ0ksaUNBQ1ksTUFBYyxFQUFVLEVBQWMsRUFDdEMsTUFBaUIsRUFBUyxJQUE4QixFQUN4RCxNQUFnQjtRQUZoQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUN0QyxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVMsU0FBSSxHQUFKLElBQUksQ0FBMEI7UUFDeEQsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQW5DbkIsVUFBSyxHQUFHLEdBQUcsQ0FBQztRQUNaLFdBQU0sR0FBRyxHQUFHLENBQUM7UUFLYixhQUFRLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDO1FBRWxDLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUVyQyxzQkFBaUIsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWpELGlCQUFZLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLGdCQUFXLEdBQXNCLEVBQUUsQ0FBQztRQUdwQyxjQUFTLEdBQW9CO1lBQ3pCLFNBQVMsRUFBRSxDQUFD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Qzs7Ozs7SUFFckMseUNBQXNCOzs7OztJQUFFLHFDQUFzQjs7Ozs7SUFDOUMseUNBQXlCOztJQUFFLHVDQUFxQzs7Ozs7SUFDaEUseUNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgTmdab25lLCBPbkluaXQsIEVsZW1lbnRSZWYsXHJcbiAgICAgICAgICAgIFJlbmRlcmVyMiwgT3V0cHV0LCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IFJlc2l6ZU9ic2VydmVyIGZyb20gJ3Jlc2l6ZS1vYnNlcnZlci1wb2x5ZmlsbCc7XHJcbmltcG9ydCB7IERhdGFDb2x1bW4sIENvbHVtbkZpbHRlclR5cGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuXHJcbmltcG9ydCB7IERhdGFncmlkRmlsdGVyUm93U2VydmljZSB9IGZyb20gJy4uL2RhdGFncmlkLWZpbHRlci1yb3cuc2VydmljZSc7XHJcbmltcG9ydCB7IEZpbHRlckVudW1TZXR0aW5nLCBGaWx0ZXJDb25kaXRpb24sIEZpbHRlclJvd09wZXJhdG9yIH0gZnJvbSAnLi4vb3BlcmF0aW9ucy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscywgT3ZlckxheUhpZGRlblNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbic7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZmlsdGVyLXJvdy1wYW5lbCcsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vZmlsdGVyLXJvdy1wYW5lbC5jb21wb2VudC5odG1sJ1xyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyUm93UGFuZWxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoKSB3aWR0aCA9IDI0MDtcclxuICAgIEBJbnB1dCgpIGhlaWdodCA9IDI1MDtcclxuXHJcbiAgICBASW5wdXQoKSBjb2x1bW46IERhdGFDb2x1bW47XHJcbiAgICBASW5wdXQoKSBvcGVyYXRvcnM6IEZpbHRlclJvd09wZXJhdG9yW107XHJcblxyXG4gICAgQElucHV0KCkgZGF0YXR5cGUgPSBDb2x1bW5GaWx0ZXJUeXBlLnN0cmluZztcclxuXHJcbiAgICBAT3V0cHV0KCkgY29uZGl0aW9uQ2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBPdXRwdXQoKSBwYW5lbEhlaWdodENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBncmlkSW5zdGFuY2UgPSBudWxsO1xyXG4gICAgZW51bVNldHRpbmc6IEZpbHRlckVudW1TZXR0aW5nID0ge307XHJcbiAgICBzZWxlY3RlZFZhbHVlczogc3RyaW5nO1xyXG5cclxuICAgIGNvbmRpdGlvbjogRmlsdGVyQ29uZGl0aW9uID0ge1xyXG4gICAgICAgIG9wZXJhdG9yMTogMSxcclxuICAgICAgICB2YWx1ZTE6ICcnLFxyXG4gICAgICAgIHJlbGF0aW9uOiAnJyxcclxuICAgICAgICBvcGVyYXRvcjI6IDEsXHJcbiAgICAgICAgdmFsdWUyOiAnJ1xyXG4gICAgfTtcclxuXHJcbiAgICBkb2N1bWVudENsaWNrSGFuZGxlID0gbnVsbDtcclxuXHJcbiAgICB0YXJnZXQ6IGFueTtcclxuXHJcbiAgICBwcml2YXRlIHJvOiBSZXNpemVPYnNlcnZlciB8IG51bGwgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSB6b25lOiBOZ1pvbmUgPSBudWxsO1xyXG4gICAgcHJpdmF0ZSBjb21tb25VdGlsczogQ29tbW9uVXRpbHM7XHJcbiAgICBwcml2YXRlIG92ZXJsYXlTZXI6IE92ZXJMYXlIaWRkZW5TZXJ2aWNlO1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBuZ3pvbmU6IE5nWm9uZSwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwdWJsaWMgZGZyczogRGF0YWdyaWRGaWx0ZXJSb3dTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgaW5qZWN0OiBJbmplY3Rvcikge1xyXG4gICAgICAgIHRoaXMuem9uZSA9IHRoaXMuaW5qZWN0LmdldChOZ1pvbmUpO1xyXG4gICAgICAgIHRoaXMuY29tbW9uVXRpbHMgPSB0aGlzLmluamVjdC5nZXQoQ29tbW9uVXRpbHMsIG5ldyBDb21tb25VdGlscygpKTtcclxuICAgICAgICB0aGlzLm92ZXJsYXlTZXIgPSAgdGhpcy5pbmplY3QuZ2V0KE92ZXJMYXlIaWRkZW5TZXJ2aWNlLCBuZXcgT3ZlckxheUhpZGRlblNlcnZpY2UoKSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHRoaXMubmd6b25lLnJ1bk91dHNpZGVBbmd1bGFyKCAoKSA9PiAge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlci5saXN0ZW4odGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnY2xpY2snLCAgKGU6IE1vdXNlRXZlbnQpID0+IHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmluaXRFbnVtU2V0dGluZygpO1xyXG5cclxuICAgICAgICAvLyB0aGlzLmRvY3VtZW50Q2xpY2tIYW5kbGUgPSB0aGlzLnJlbmRlci5saXN0ZW4oZG9jdW1lbnQsICdjbGljaycsIChldmVudCkgPT4ge1xyXG4gICAgICAgIC8vICAgICB0aGlzLmNsb3NlKGV2ZW50KTtcclxuICAgICAgICAvLyB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vdmVybGF5U2VyLnJlZ2lzdGVyTW91c2VFdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIChlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRhciA9IGUudGFyZ2V0IGFzIGFueTtcclxuICAgICAgICAgICAgaWYodGFyICYmIHRhci5jbG9zZXN0KCcub3ZlcmxheS1jb250YWluZXInKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZG9jdW1lbnQuYm9keS5jbGFzc05hbWUuaW5kZXhPZignbW9kYWwtb3BlbicpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZWwubmF0aXZlRWxlbWVudC5jb250YWlucyhlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmNsb3NlKGUpXHJcbiAgICAgICAgfSlcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdBZnRlclZpZXdJbml0KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnRhcmdldCkge1xyXG4gICAgICAgICAgICB0aGlzLnJlc2V0UGFuZWxQb3NpdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcGFuZWxEaXYgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignZGl2Jyk7XHJcbiAgICAgICAgICAgIHBhbmVsRGl2LnN0eWxlLnRyYW5zaXRpb24gPSAgJ3RvcCAwLjJzIGVhc2UgMC4wNXMnO1xyXG5cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHppbmRleCA9IHRoaXMuY29tbW9uVXRpbHMuZ2V0RmxvYXRpbmdMYXllckluZGV4KCk7XHJcbiAgICAgICAgICAgIHBhbmVsRGl2LnN0eWxlLnpJbmRleCA9IHppbmRleDtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG92ZXJsYXlFbCA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZmlsdGVyLXBhbmVsLW92ZXJsYXknKTtcclxuICAgICAgICAgICAgaWYgKG92ZXJsYXlFbCkge1xyXG4gICAgICAgICAgICAgICAgb3ZlcmxheUVsLnN0eWxlLnpJbmRleCA9IHppbmRleDtcclxuICAgICAgICAgICAgICAgIHBhbmVsRGl2LnN0eWxlLnpJbmRleCA9IHppbmRleCArIDE7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZS5wb3NpdGlvbiA9ICdmaXhlZCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXlTZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5vdmVybGF5U2VyLmRlc3RvcnkodGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSByZXNldFBhbmVsUG9zaXRpb24oKSB7XHJcbiAgICAgICAgY29uc3QgcGFuZWxEaXYgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignZGl2Jyk7XHJcbiAgICAgICAgY29uc3QgaCA9IHBhbmVsRGl2LnF1ZXJ5U2VsZWN0b3IoJy5wYW5lbC1jb250ZW50JykuY2xpZW50SGVpZ2h0ICsgMzY7XHJcbiAgICAgICAgY29uc3QgcmVjdCA9IHRoaXMudGFyZ2V0LnRhcmdldC5wYXJlbnRFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG5cclxuICAgICAgICBjb25zdCBkb3duQXJlYUhlaWdodCA9IHdpbmRvd1snaW5uZXJIZWlnaHQnXSAtIHJlY3QudG9wO1xyXG5cclxuICAgICAgICBpZiAoZG93bkFyZWFIZWlnaHQgPCBoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRvcCA9IHdpbmRvd1snaW5uZXJIZWlnaHQnXSAtIGggLSAxMDtcclxuICAgICAgICAgICAgcGFuZWxEaXYuc3R5bGUudG9wID0gdG9wICsgJ3B4JztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBwYW5lbERpdi5zdHlsZS50b3AgPSByZWN0LnRvcCArICdweCc7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uUGFuZWxIZWlnaHRDaGFuZ2VkKCkge1xyXG4gICAgICAgIHRoaXMucmVzZXRQYW5lbFBvc2l0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5wYW5lbEhlaWdodENoYW5nZS5lbWl0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIGNsb3NlKGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgdGhpcy5kZnJzLmNsb3NlRmlsdGVyUGFuZWwoKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgb25WYWx1ZUNoYW5nZShjb25kaXRpb24pIHtcclxuICAgICAgICB0aGlzLmNvbmRpdGlvbkNoYW5nZS5lbWl0KGNvbmRpdGlvbik7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0RW51bVNldHRpbmcoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuZGF0YXR5cGUgPiA1KSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW51bVNldHRpbmcgPSB0aGlzLmRmcnMuZ2V0RW51bU9wdGlvbnModGhpcy5jb2x1bW4pO1xyXG4gICAgICAgICAgICBjb25zdCBjdXJyZW50Q29sdW1uQ29uZGl0aW9uID0gdGhpcy5kZnJzLmNvbHVtbkNvbmRpdGlvbnNbdGhpcy5jb2x1bW4uZmllbGRdIGFzIEZpbHRlckNvbmRpdGlvbjtcclxuICAgICAgICAgICAgaWYgKGN1cnJlbnRDb2x1bW5Db25kaXRpb24gJiYgY3VycmVudENvbHVtbkNvbmRpdGlvbi52YWx1ZTEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXMgPSBjdXJyZW50Q29sdW1uQ29uZGl0aW9uLnZhbHVlMS5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19