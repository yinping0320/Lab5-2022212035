/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LocaleService } from '@farris/ui-locale';
import { Component, Input, ComponentFactoryResolver, Injector, ApplicationRef, Renderer2, ViewChild, ElementRef, ChangeDetectorRef, NgZone } from '@angular/core';
import { delay, filter } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { FilterOperator, TextFilterOperators, NumberOrDateFilterOperators, FilterConditionValue, } from './../operations/operators';
import { FilterRowPanelComponent } from './filter-row-panel.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
import { FilterRowEditorComponent } from './filter-row-editor.component';
var FilterTextboxComponent = /** @class */ (function (_super) {
    tslib_1.__extends(FilterTextboxComponent, _super);
    function FilterTextboxComponent(cfr, injector, app, dfrs, render, cd, localSer) {
        var _this = _super.call(this) || this;
        _this.cfr = cfr;
        _this.injector = injector;
        _this.app = app;
        _this.dfrs = dfrs;
        _this.render = render;
        _this.cd = cd;
        _this.localSer = localSer;
        _this.disabled = false;
        _this.delay = 300;
        _this.filterStr = '';
        _this.filterPanelSubscription = null;
        _this.ro = null;
        _this.zone = null;
        _this.el = null;
        _this.zone = _this.injector.get(NgZone);
        _this.el = _this.injector.get(ElementRef);
        _this.dfrs.filterTextboxChanged.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v[_this.column.field] !== undefined; })), delay(_this.delay)).subscribe((/**
         * @param {?} obj
         * @return {?}
         */
        function (obj) {
            /** @type {?} */
            var val = obj[_this.column.field];
            if (val !== '') {
                /** @type {?} */
                var _condition = { operator1: FilterOperator.Contains, value1: val };
                if (_this.column.filter.type === ColumnFilterType.number) {
                    _condition.operator1 = FilterOperator.Equal;
                }
                _this.dfrs.updateColumnConditions(_this.column.field, _condition);
            }
            else {
                _this.dfrs.updateColumnConditions(_this.column.field, FilterConditionValue.All);
            }
        }));
        _this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            if (f === _this.column.field) {
                _this.clearValue();
            }
        }));
        return _this;
    }
    Object.defineProperty(FilterTextboxComponent.prototype, "inputType", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.column.filter.type === ColumnFilterType.number) {
                return 'number';
            }
            return 'text';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FilterTextboxComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.ro) {
            this.ro.disconnect();
            this.ro = null;
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FilterTextboxComponent.prototype.show = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.close();
        event.stopPropagation();
        /** @type {?} */
        var dgContainerEle = ((/** @type {?} */ (event.target))).closest('.f-datagrid');
        if (dgContainerEle) {
            dgContainerEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                _this.close();
            }));
        }
        if (!this.dfrs.gridInstance) {
            this.dfrs.gridInstance = this.gridInstance;
        }
        /** @type {?} */
        var cf = this.cfr.resolveComponentFactory(FilterRowPanelComponent);
        this.filterPanelRef = cf.create(this.injector);
        this.app.attachView(this.filterPanelRef.hostView);
        this.filterPanelRef.instance.column = this.column;
        this.filterPanelRef.instance.gridInstance = this.gridInstance;
        this.initOperators(this.filterPanelRef.instance);
        if (this.column.filter !== false && this.column.filter !== undefined) {
            this.filterPanelRef.instance.datatype = this.column.filter.type;
            if (this.column.filter.type === ColumnFilterType.enum ||
                this.column.filter.type === ColumnFilterType.fromdata) {
                this.filterPanelRef.instance.height = 300;
            }
        }
        /** @type {?} */
        var currentColumnCondition = this.dfrs.columnConditions[this.column.field];
        if (currentColumnCondition) {
            this.filterPanelRef.instance.condition = (/** @type {?} */ (currentColumnCondition));
        }
        else {
            this.filterPanelRef.instance.condition = {
                operator1: 0,
                value1: '',
                relation: '',
                operator2: 0,
                value2: ''
            };
            // this.initOperators(this.filterPanelRef.instance);
        }
        this.filterPanelSubscription = this.filterPanelRef.instance.conditionChange.subscribe((/**
         * @param {?} condition
         * @return {?}
         */
        function (condition) {
            if (condition) {
                _this.dfrs.updateColumnConditions(_this.column.field, condition);
                _this.filterStr = _this.dfrs.condition2string(_this.column, condition);
                if (_this.column.filter.type < 2) {
                    _this.disabled = !!_this.filterStr;
                }
                _this.cd.detectChanges();
            }
            else {
                _this.clearValue();
                _this.dfrs.updateColumnConditions(_this.column.field, FilterConditionValue.All);
            }
        }));
        // document.body.style.overflow = 'hidden';
        document.body.appendChild(this.filterPanelRef.location.nativeElement);
        this.updateFilterPanelPosition(event.target);
        this.dfrs.setFilterPanel(this.filterPanelRef);
        var _a = dgContainerEle.getBoundingClientRect(), dgwidth = _a.width, dgHeight = _a.height;
        this['DG_CONTAINER_SIZE'] = { width: dgwidth, height: dgHeight };
        this.filterPanelRef.instance.panelHeightChange.subscribe((/**
         * @return {?}
         */
        function () {
            var _a = dgContainerEle.getBoundingClientRect(), width = _a.width, height = _a.height;
            _this['DG_CONTAINER_SIZE'] = { width: width, height: height };
        }));
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            if (!_this.ro) {
                _this.ro = new ResizeObserver((/**
                 * @param {?} entries
                 * @param {?} observer
                 * @return {?}
                 */
                function (entries, observer) {
                    if (_this['resize_timer_001']) {
                        clearTimeout(_this['resize_timer_001']);
                    }
                    _this['resize_timer_001'] = setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        var _a = entries[0].target.getBoundingClientRect(), width = _a.width, height = _a.height;
                        var _b = _this['DG_CONTAINER_SIZE'], dgWidth = _b.width, dgHeight = _b.height;
                        if (_this.gridInstance.autoHeight) {
                            if (dgWidth == width || dgWidth - width === 7 || dgWidth - width === -7) {
                                return;
                            }
                        }
                        if (width !== dgWidth || height !== dgHeight) {
                            _this.close();
                        }
                    }), 30);
                }));
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.ro.observe(dgContainerEle);
                }));
            }
        }));
        this.filterPanelRef.instance.target = event;
        this.filterPanelRef.changeDetectorRef.markForCheck();
        this.filterPanelRef.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    FilterTextboxComponent.prototype.close = /**
     * @return {?}
     */
    function () {
        this.dfrs.closeFilterPanel();
        if (this.filterPanelSubscription) {
            this.filterPanelSubscription.unsubscribe();
            this.filterPanelSubscription = null;
        }
    };
    /**
     * @private
     * @param {?} ins
     * @return {?}
     */
    FilterTextboxComponent.prototype.initOperators = /**
     * @private
     * @param {?} ins
     * @return {?}
     */
    function (ins) {
        var _this = this;
        if (this.column.filter.type === ColumnFilterType.string) {
            ins.operators = TextFilterOperators;
            ins.condition.operator1 = FilterOperator.Contains;
            ins.condition.operator2 = FilterOperator.Contains;
        }
        else if (this.column.filter.type === ColumnFilterType.number || this.column.filter.type === ColumnFilterType.datetime
            || this.column.filter.type === ColumnFilterType.date || this.column.filter.type === ColumnFilterType.time) {
            ins.operators = NumberOrDateFilterOperators;
            ins.condition.operator1 = FilterOperator.Equal;
            ins.condition.operator2 = FilterOperator.Equal;
        }
        if (ins.operators) {
            ins.operators.forEach((/**
             * @param {?} o
             * @return {?}
             */
            function (o) {
                o.label = _this.dfrs.getOperatorLabel(o.code);
            }));
        }
    };
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    FilterTextboxComponent.prototype.updateFilterPanelPosition = /**
     * @private
     * @param {?} target
     * @return {?}
     */
    function (target) {
        if (target) {
            /** @type {?} */
            var filterIconParent = target.parentElement;
            if (filterIconParent) {
                /** @type {?} */
                var pos = filterIconParent.getBoundingClientRect();
                /** @type {?} */
                var tr = target.closest('tr');
                /** @type {?} */
                var td = target.closest('td');
                /** @type {?} */
                var headerPos = target.closest('.f-datagrid-header').getBoundingClientRect();
                /** @type {?} */
                var panelWidth = this.filterPanelRef.instance.width;
                /** @type {?} */
                var left = pos.left;
                if (headerPos.width + headerPos.x < pos.x + panelWidth) { // this.column.filter.type === ColumnFilterType.enum
                    left = td.getBoundingClientRect().left + td.offsetWidth - panelWidth;
                    this.filterPanelRef.location.nativeElement.querySelector('.panel-icon').style.left = panelWidth - 40 + "px";
                }
                // const top = pos.top
                /** @type {?} */
                var panel = this.filterPanelRef.location.nativeElement.querySelector('div');
                if (panel) {
                    this.render.setStyle(panel, 'top', pos.top + "px");
                    this.render.setStyle(panel, 'left', left + "px");
                }
            }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    FilterTextboxComponent.prototype.onTextValueChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _a;
        /** @type {?} */
        var value = $event.target.value;
        this.dfrs.filterTextboxChanged.emit((_a = {}, _a[this.column.field] = value, _a));
    };
    /**
     * @return {?}
     */
    FilterTextboxComponent.prototype.clearValue = /**
     * @return {?}
     */
    function () {
        this.filterStr = '';
        if (this.input) {
            this.input.nativeElement.value = '';
        }
        if (this.column.filter.type < 2) {
            this.disabled = false;
        }
        this.cd.detectChanges();
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    FilterTextboxComponent.prototype.initFilter = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        this.filterStr = this.dfrs.condition2string(this.column, condition);
        this.disabled = !!this.filterStr;
        this.dfrs._updateColumnConditions(this.column.field, condition);
        this.cd.detectChanges();
    };
    FilterTextboxComponent.decorators = [
        { type: Component, args: [{
                    selector: 'filter-textbox',
                    template: "\n    <div class=\"f-datagrid-header-cell-content f-datagrid-filter-cell d-flex\" style=\"padding-right: 5px\">\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\">\n            <input *ngIf=\"!disabled\" class=\"form-control\" [attr.type]=\"inputType\" [value]=\"filterStr\"\n                (input)=\"onTextValueChange($event)\" #input [class.no-number-button]=\"inputType == 'number'\">\n            <input *ngIf=\"disabled\" class=\"form-control\" type=\"text\" [value]=\"filterStr\"\n            [attr.title]=\"filterStr\" [disabled]=\"disabled\" [class.filter-editor-disabled]=\"disabled\" >\n        </div>\n        <div style=\"min-width: 26px; text-align: center; align-items: center;\n            display: flex; justify-content: center;\" *ngIf=\"column.filter.enableOperator\">\n            <span style=\"cursor: pointer;\" class=\"f-icon f-icon-filter-sm\" (click)=\"show($event)\"></span>\n        </div>\n    </div>\n    ",
                    styles: ["\n        .no-number-button{-moz-appearance: textfield;}\n        .no-number-button::-webkit-outer-spin-button, .no-number-button::-webkit-inner-spin-button {\n              -webkit-appearance: none!important;\n        }"]
                }] }
    ];
    /** @nocollapse */
    FilterTextboxComponent.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: ApplicationRef },
        { type: DatagridFilterRowService },
        { type: Renderer2 },
        { type: ChangeDetectorRef },
        { type: LocaleService }
    ]; };
    FilterTextboxComponent.propDecorators = {
        column: [{ type: Input }],
        disabled: [{ type: Input }],
        delay: [{ type: Input }],
        input: [{ type: ViewChild, args: ['input',] }]
    };
    return FilterTextboxComponent;
}(FilterRowEditorComponent));
export { FilterTextboxComponent };
if (false) {
    /** @type {?} */
    FilterTextboxComponent.prototype.column;
    /** @type {?} */
    FilterTextboxComponent.prototype.disabled;
    /** @type {?} */
    FilterTextboxComponent.prototype.delay;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterStr;
    /** @type {?} */
    FilterTextboxComponent.prototype.gridInstance;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterPanelRef;
    /** @type {?} */
    FilterTextboxComponent.prototype.filterPanelSubscription;
    /** @type {?} */
    FilterTextboxComponent.prototype.input;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.cfr;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.app;
    /** @type {?} */
    FilterTextboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterTextboxComponent.prototype.localSer;
}
//# sourceMappingURL=data:application/json;base64,