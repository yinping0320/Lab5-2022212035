import { EventEmitter, Injectable, NgZone, Component, ElementRef, Renderer2, Injector, Input, Output, ComponentFactoryResolver, ApplicationRef, ChangeDetectorRef, ViewChild, Directive, ViewContainerRef, ViewEncapsulation, ViewChildren, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { ColumnFilterType, DatagridUtils, GRID_FILTER_ROW, DatagridModule } from '@farris/ui-datagrid';
import { FormGroup, FormBuilder, FormControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { LocaleService, LocaleModule } from '@farris/ui-locale';
import { filter, delay } from 'rxjs/operators';
import ResizeObserver from 'resize-observer-polyfill';
import { CommonUtils, OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { CommonModule } from '@angular/common';
import { TimePickerModule } from '@farris/ui-time-picker';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { DatalistModule } from '@farris/ui-datalist';
import { FarrisFormsModule } from '@farris/ui-forms';
import { cloneDeep } from 'lodash-es';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 服务器端支持比较操作
 *  Equal(0),
    NotEqual(1),
    Greater(2),
    GreaterOrEqual(3),
    Less(4),
    LessOrEqual(5),
    Like(6),
    LikeStartWith(7),
    LikeEndWith(8),
    NotLike(9),
    NotLikeStartWith(10),
    NotLikeEndWith(11),
    Is(12),
    IsNot(13),
    In(14),
    NotIn(15),
    LikeIgnoreCase(16);
 */
/** @enum {number} */
const FilterOperator = {
    Equal: 0,
    NotEqual: 1,
    Greater: 2,
    GreaterOrEqual: 3,
    Less: 4,
    LessOrEqual: 5,
    Contains: 6,
    NotContains: 9,
    In: 14,
    NotIn: 15,
    Empty: 1001,
    NotEmpty: 1002,
    Null: 1003,
    NotNull: 1004,
};
FilterOperator[FilterOperator.Equal] = 'Equal';
FilterOperator[FilterOperator.NotEqual] = 'NotEqual';
FilterOperator[FilterOperator.Greater] = 'Greater';
FilterOperator[FilterOperator.GreaterOrEqual] = 'GreaterOrEqual';
FilterOperator[FilterOperator.Less] = 'Less';
FilterOperator[FilterOperator.LessOrEqual] = 'LessOrEqual';
FilterOperator[FilterOperator.Contains] = 'Contains';
FilterOperator[FilterOperator.NotContains] = 'NotContains';
FilterOperator[FilterOperator.In] = 'In';
FilterOperator[FilterOperator.NotIn] = 'NotIn';
FilterOperator[FilterOperator.Empty] = 'Empty';
FilterOperator[FilterOperator.NotEmpty] = 'NotEmpty';
FilterOperator[FilterOperator.Null] = 'Null';
FilterOperator[FilterOperator.NotNull] = 'NotNull';
/** @enum {string} */
const FilterConditionValue = {
    All: '',
    Empty: 'null',
};
/** @type {?} */
const AllFilterOperator = {
    [FilterOperator.Equal]: '等于',
    [FilterOperator.NotEqual]: '不等于',
    [FilterOperator.Greater]: '大于',
    [FilterOperator.GreaterOrEqual]: '大于等于',
    [FilterOperator.Less]: '小于',
    [FilterOperator.LessOrEqual]: '小于等于',
    [FilterOperator.Contains]: '包含',
    [FilterOperator.NotContains]: '不包含',
    [FilterOperator.NotEmpty]: '不为空',
    [FilterOperator.Empty]: '空',
};
/**
 * 文本操作符
 * @type {?}
 */
const TextFilterOperators = [
    { code: FilterOperator.Empty, label: AllFilterOperator[FilterOperator.Empty], isDefault: false },
    { code: FilterOperator.NotEmpty, label: AllFilterOperator[FilterOperator.NotEmpty], isDefault: false },
    { code: FilterOperator.Equal, label: AllFilterOperator[FilterOperator.Equal], isDefault: false },
    { code: FilterOperator.NotEqual, label: AllFilterOperator[FilterOperator.NotEqual], isDefault: false },
    { code: FilterOperator.Contains, label: AllFilterOperator[FilterOperator.Contains], isDefault: true },
    { code: FilterOperator.NotContains, label: AllFilterOperator[FilterOperator.NotContains], isDefault: false }
];
/**
 * 日期或数字操作符
 * @type {?}
 */
const NumberOrDateFilterOperators = [
    { code: FilterOperator.Empty, label: AllFilterOperator[FilterOperator.Empty], isDefault: false },
    { code: FilterOperator.NotEmpty, label: AllFilterOperator[FilterOperator.NotEmpty], isDefault: false },
    { code: FilterOperator.Equal, label: AllFilterOperator[FilterOperator.Equal], isDefault: false },
    { code: FilterOperator.NotEqual, label: AllFilterOperator[FilterOperator.NotEqual], isDefault: false },
    { code: FilterOperator.Greater, label: AllFilterOperator[FilterOperator.Greater], isDefault: false },
    { code: FilterOperator.GreaterOrEqual, label: AllFilterOperator[FilterOperator.GreaterOrEqual], isDefault: false },
    { code: FilterOperator.Less, label: AllFilterOperator[FilterOperator.Less], isDefault: false },
    { code: FilterOperator.LessOrEqual, label: AllFilterOperator[FilterOperator.LessOrEqual], isDefault: false }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DatagridFilterRowService {
    constructor() {
        this.columnConditionSubject = new Subject();
        this.filterRowConditions$ = this.columnConditionSubject.asObservable();
        this.columnConditions = {};
        this.filterTextboxChanged = new EventEmitter();
        this.removeField = new EventEmitter();
    }
    /**
     * @param {?} frp
     * @return {?}
     */
    setFilterPanel(frp) {
        this.currentFilterPanel = frp;
    }
    /**
     * @return {?}
     */
    hasFilterPanel() {
        return !!this.currentFilterPanel;
    }
    /**
     * @return {?}
     */
    closeFilterPanel() {
        if (this.hasFilterPanel()) {
            if (this.currentFilterPanel.instance.documentClickHandle) {
                this.currentFilterPanel.instance.documentClickHandle();
            }
            document.body.removeChild(this.currentFilterPanel.location.nativeElement);
            this.currentFilterPanel.destroy();
            this.currentFilterPanel = null;
            // document.body.style.overflow = 'auto';
        }
    }
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    clear(emitEvent = true) {
        this.columnConditions = {};
        if (emitEvent) {
            this.columnConditionSubject.next({});
        }
    }
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    removeFilterField(field, opts) {
        if (this.columnConditions) {
            delete this.columnConditions[field];
            this.removeField.emit(field);
            if (!opts || (opts && opts.emitEvent)) {
                this.emitColumnConditionChanged(this.columnConditions, field);
            }
        }
    }
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    _updateColumnConditions(field, colCondition) {
        /** @type {?} */
        const currentCondition = this.columnConditions[field];
        if (!currentCondition) {
            this.columnConditions = Object.assign(this.columnConditions, { [field]: colCondition });
        }
        else {
            if (JSON.stringify(currentCondition) !== JSON.stringify(colCondition)) {
                this.columnConditions = Object.assign(this.columnConditions, { [field]: colCondition });
            }
        }
        // 值为 ‘’ ，则代表着不参与查询
        Object.keys(this.columnConditions).forEach((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            if (!this.columnConditions[k]) {
                // delete this.columnConditions[k];
                this.columnConditions[k] = null;
            }
        }));
    }
    /**
     * @param {?} field
     * @param {?} colCondition
     * @return {?}
     */
    updateColumnConditions(field, colCondition) {
        this._updateColumnConditions(field, colCondition);
        this.emitColumnConditionChanged(this.columnConditions);
    }
    /**
     * @private
     * @param {?} conditions
     * @param {?=} removedFields
     * @return {?}
     */
    emitColumnConditionChanged(conditions, removedFields) {
        // const farr = this.gridInstance.remoteFilter ? this.convert2FilterArray(this.columnConditions) : this.columnConditions;
        this.columnConditionSubject.next({ conditions, removedFields });
    }
    // 获取过滤行显示文本
    /**
     * @param {?} column
     * @param {?} condition
     * @return {?}
     */
    condition2string(column, condition) {
        if (!condition || typeof condition === 'string') {
            return '';
        }
        /** @type {?} */
        const andText = this.gridInstance.localeService.getValue('datagrid.filter.and');
        /** @type {?} */
        const orText = this.gridInstance.localeService.getValue('datagrid.filter.or');
        /** @type {?} */
        const getRelationLabel = (/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            if (r === 'and') {
                return andText;
            }
            else if (r === 'or') {
                return orText;
            }
            else {
                return '';
            }
        });
        /** @type {?} */
        let filterPreViewString = '';
        if (column.filter.type === ColumnFilterType.fromdata) {
            filterPreViewString = `(${condition.value1.length})`;
            if (condition.value1) {
                filterPreViewString += ` ${condition.value1.join(',')}`;
            }
        }
        else if (column.filter.type === ColumnFilterType.enum) {
            /** @type {?} */
            const enumOpts = (/** @type {?} */ (this.getEnumOptions(column)));
            const { valueField, textField, data } = enumOpts;
            filterPreViewString = `(${condition.value1.length})`;
            if (condition.value1) {
                filterPreViewString += ` ${condition.value1.map((/**
                 * @param {?} v
                 * @return {?}
                 */
                v => {
                    /** @type {?} */
                    const enumItem = data.find((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => d[valueField] == v));
                    return enumItem[textField];
                })).join(',')}`;
            }
        }
        else {
            if (condition) {
                /** @type {?} */
                const operator1Label = this.getOperatorLabel(condition.operator1);
                if (!this.isEmpty(condition.value1)) {
                    filterPreViewString = `${operator1Label} ${condition.value1}`;
                    /** @type {?} */
                    const operator2Label = this.getOperatorLabel(condition.operator2);
                    if (!this.isEmpty(condition.value2)) {
                        filterPreViewString += ` ${getRelationLabel(condition.relation)} ${operator2Label} ${condition.value2}`;
                    }
                    else {
                        if (condition.operator2 !== undefined) {
                            /** @type {?} */
                            const op2 = parseInt('' + condition.operator2, 10);
                            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                                filterPreViewString += ` ${getRelationLabel(condition.relation)} ${operator2Label}`;
                            }
                        }
                    }
                }
                else {
                    /** @type {?} */
                    const op1 = parseInt('' + condition.operator1, 10);
                    if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
                        filterPreViewString = `${operator1Label}`;
                    }
                }
            }
        }
        return filterPreViewString;
    }
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    isEmpty(v) {
        return v === '' || v === undefined || v === null;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    getEnumOptions(column) {
        /** @type {?} */
        const colFilter = (/** @type {?} */ (column.filter));
        /** @type {?} */
        const datatype = colFilter.type;
        /** @type {?} */
        let enumSetting = null;
        if (datatype === ColumnFilterType.enum) {
            /** @type {?} */
            const fmt = (/** @type {?} */ (column.formatter));
            if (fmt) {
                enumSetting = fmt.options;
            }
            else {
                if (colFilter.options) {
                    enumSetting = colFilter.options;
                }
            }
        }
        else { // enum 数据源来自grid 数据列表
            // enum 数据源来自grid 数据列表
            /** @type {?} */
            const columnData = this.gridInstance.dfs.getData(true).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return DatagridUtils.getValue(column.field, n);
            }));
            // 去除重复
            /** @type {?} */
            const enumData = Array.from(new Set(columnData)).map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    value: n, label: n
                };
            }));
            enumSetting = {
                valueField: 'value', textField: 'label', data: enumData, idField: 'value'
            };
        }
        return enumSetting;
    }
    // 获取操作符标签
    /**
     * @param {?} code
     * @return {?}
     */
    getOperatorLabel(code) {
        /** @type {?} */
        const strOper = FilterOperator[code];
        if (strOper) {
            /** @type {?} */
            const operName = strOper[0].toLowerCase() + strOper.substr(1);
            /** @type {?} */
            const key = `datagrid.filter.operators.${operName}`;
            return this.gridInstance.localeService.getValue(key);
        }
        return '';
    }
}
DatagridFilterRowService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridFilterRowService.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterRowPanelComponent {
    /**
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     * @param {?} dfrs
     * @param {?} inject
     */
    constructor(ngzone, el, render, dfrs, inject) {
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dfrs = dfrs;
        this.inject = inject;
        this.width = 240;
        this.height = 250;
        this.datatype = ColumnFilterType.string;
        this.conditionChange = new EventEmitter();
        this.panelHeightChange = new EventEmitter();
        this.gridInstance = null;
        this.enumSetting = {};
        this.condition = {
            operator1: 1,
            value1: '',
            relation: '',
            operator2: 1,
            value2: ''
        };
        this.documentClickHandle = null;
        this.ro = null;
        this.zone = null;
        this.zone = this.inject.get(NgZone);
        this.commonUtils = this.inject.get(CommonUtils, new CommonUtils());
        this.overlaySer = this.inject.get(OverLayHiddenService, new OverLayHiddenService());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                return false;
            }));
        }));
        this.initEnumSetting();
        // this.documentClickHandle = this.render.listen(document, 'click', (event) => {
        //     this.close(event);
        // });
        this.overlaySer.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const tar = (/** @type {?} */ (e.target));
            if (tar && tar.closest('.overlay-container')) {
                return;
            }
            if (document.body.className.indexOf('modal-open') > -1) {
                return;
            }
            if (this.el.nativeElement.contains(e.target)) {
                return;
            }
            this.close(e);
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.target) {
            this.resetPanelPosition();
            /** @type {?} */
            const panelDiv = this.el.nativeElement.querySelector('div');
            panelDiv.style.transition = 'top 0.2s ease 0.05s';
            /** @type {?} */
            const zindex = this.commonUtils.getFloatingLayerIndex();
            panelDiv.style.zIndex = zindex;
            /** @type {?} */
            const overlayEl = this.el.nativeElement.querySelector('.filter-panel-overlay');
            if (overlayEl) {
                overlayEl.style.zIndex = zindex;
                panelDiv.style.zIndex = zindex + 1;
            }
            // this.el.nativeElement.style.position = 'fixed';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlaySer) {
            this.overlaySer.destory(this.el.nativeElement);
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetPanelPosition() {
        /** @type {?} */
        const panelDiv = this.el.nativeElement.querySelector('div');
        /** @type {?} */
        const h = panelDiv.querySelector('.panel-content').clientHeight + 36;
        /** @type {?} */
        const rect = this.target.target.parentElement.getBoundingClientRect();
        /** @type {?} */
        const downAreaHeight = window['innerHeight'] - rect.top;
        if (downAreaHeight < h) {
            /** @type {?} */
            const top = window['innerHeight'] - h - 10;
            panelDiv.style.top = top + 'px';
        }
        else {
            panelDiv.style.top = rect.top + 'px';
        }
    }
    /**
     * @return {?}
     */
    onPanelHeightChanged() {
        this.resetPanelPosition();
        this.panelHeightChange.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    close(event) {
        event.stopPropagation();
        this.dfrs.closeFilterPanel();
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    onValueChange(condition) {
        this.conditionChange.emit(condition);
    }
    /**
     * @private
     * @return {?}
     */
    initEnumSetting() {
        if (this.datatype > 5) {
            this.enumSetting = this.dfrs.getEnumOptions(this.column);
            /** @type {?} */
            const currentColumnCondition = (/** @type {?} */ (this.dfrs.columnConditions[this.column.field]));
            if (currentColumnCondition && currentColumnCondition.value1) {
                this.selectedValues = currentColumnCondition.value1.join(',');
            }
        }
    }
}
FilterRowPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-row-panel',
                template: "<div class=\"f-datagrid-filter-panel d-flex flex-column\" style=\"position: fixed;\" [style.width.px]=\"width\"  (click)=\"$event.stopPropagation()\">\r\n    <div class=\"panel-header\">\r\n        <div (click)=\"close($event)\" class=\"panel-icon\" style=\"text-align: center; cursor: pointer;\">\r\n            <span class=\"f-icon f-icon-filter-sm\"></span>\r\n        </div> \r\n    </div>\r\n    <div class=\"panel-content flex-fill\">\r\n        <condition-editor *ngIf=\"datatype < 6\"\r\n            [datatype]=\"datatype\"\r\n            [condition]=\"condition\"\r\n            [operators]=\"operators\"\r\n            [filterOptions]=\"column.filter.options\"\r\n            (conditionChange)=\"onValueChange($event)\"\r\n            (panelHeightChange)=\"onPanelHeightChanged()\"></condition-editor>\r\n            \r\n\r\n        <filter-datalist *ngIf=\"datatype === 6 || datatype === 7\" \r\n            [data]=\"enumSetting?.data\" [valueField]=\"enumSetting?.valueField\"\r\n            [textField]=\"enumSetting?.textField\" [idField]=\"enumSetting?.valueField\"\r\n            [selectedValues]=\"selectedValues\"\r\n            (valueChange)=\"onValueChange($event)\"></filter-datalist>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"filter-panel-overlay\" style=\"position: absolute;\r\nposition: absolute;\r\nwidth: 100%;\r\ntop: 0;\r\nheight: 100%;\r\nbackground: rgb(255, 255, 255);\r\nopacity: 0;\" (click)=\"close($event)\"></div>\r\n"
            }] }
];
/** @nocollapse */
FilterRowPanelComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DatagridFilterRowService },
    { type: Injector }
];
FilterRowPanelComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    column: [{ type: Input }],
    operators: [{ type: Input }],
    datatype: [{ type: Input }],
    conditionChange: [{ type: Output }],
    panelHeightChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterRowEditorComponent {
    constructor() {
        this.id = '';
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.id = `filter-row_${this.column.field}`;
    }
    /**
     * @return {?}
     */
    clearValue() { }
}
FilterRowEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-editor',
                template: ''
            }] }
];
/** @nocollapse */
FilterRowEditorComponent.ctorParameters = () => [];
FilterRowEditorComponent.propDecorators = {
    column: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterTextboxComponent extends FilterRowEditorComponent {
    /**
     * @param {?} cfr
     * @param {?} injector
     * @param {?} app
     * @param {?} dfrs
     * @param {?} render
     * @param {?} cd
     * @param {?} localSer
     */
    constructor(cfr, injector, app, dfrs, render, cd, localSer) {
        super();
        this.cfr = cfr;
        this.injector = injector;
        this.app = app;
        this.dfrs = dfrs;
        this.render = render;
        this.cd = cd;
        this.localSer = localSer;
        this.disabled = false;
        this.delay = 300;
        this.filterStr = '';
        this.filterPanelSubscription = null;
        this.ro = null;
        this.zone = null;
        this.el = null;
        this.zone = this.injector.get(NgZone);
        this.el = this.injector.get(ElementRef);
        this.dfrs.filterTextboxChanged.pipe(filter((/**
         * @param {?} v
         * @return {?}
         */
        v => v[this.column.field] !== undefined)), delay(this.delay)).subscribe((/**
         * @param {?} obj
         * @return {?}
         */
        (obj) => {
            /** @type {?} */
            const val = obj[this.column.field];
            if (val !== '') {
                /** @type {?} */
                const _condition = { operator1: FilterOperator.Contains, value1: val };
                if (this.column.filter.type === ColumnFilterType.number) {
                    _condition.operator1 = FilterOperator.Equal;
                }
                this.dfrs.updateColumnConditions(this.column.field, _condition);
            }
            else {
                this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            }
        }));
        this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            if (f === this.column.field) {
                this.clearValue();
            }
        }));
    }
    /**
     * @return {?}
     */
    get inputType() {
        if (this.column.filter.type === ColumnFilterType.number) {
            return 'number';
        }
        return 'text';
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ro) {
            this.ro.disconnect();
            this.ro = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    show(event) {
        this.close();
        event.stopPropagation();
        /** @type {?} */
        const dgContainerEle = ((/** @type {?} */ (event.target))).closest('.f-datagrid');
        if (dgContainerEle) {
            dgContainerEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.close();
            }));
        }
        if (!this.dfrs.gridInstance) {
            this.dfrs.gridInstance = this.gridInstance;
        }
        /** @type {?} */
        const cf = this.cfr.resolveComponentFactory(FilterRowPanelComponent);
        this.filterPanelRef = cf.create(this.injector);
        this.app.attachView(this.filterPanelRef.hostView);
        this.filterPanelRef.instance.column = this.column;
        this.filterPanelRef.instance.gridInstance = this.gridInstance;
        this.initOperators(this.filterPanelRef.instance);
        if (this.column.filter !== false && this.column.filter !== undefined) {
            this.filterPanelRef.instance.datatype = this.column.filter.type;
            if (this.column.filter.type === ColumnFilterType.enum ||
                this.column.filter.type === ColumnFilterType.fromdata) {
                this.filterPanelRef.instance.height = 300;
            }
        }
        /** @type {?} */
        const currentColumnCondition = this.dfrs.columnConditions[this.column.field];
        if (currentColumnCondition) {
            this.filterPanelRef.instance.condition = (/** @type {?} */ (currentColumnCondition));
        }
        else {
            this.filterPanelRef.instance.condition = {
                operator1: 0,
                value1: '',
                relation: '',
                operator2: 0,
                value2: ''
            };
            // this.initOperators(this.filterPanelRef.instance);
        }
        this.filterPanelSubscription = this.filterPanelRef.instance.conditionChange.subscribe((/**
         * @param {?} condition
         * @return {?}
         */
        (condition) => {
            if (condition) {
                this.dfrs.updateColumnConditions(this.column.field, condition);
                this.filterStr = this.dfrs.condition2string(this.column, condition);
                if (this.column.filter.type < 2) {
                    this.disabled = !!this.filterStr;
                }
                this.cd.detectChanges();
            }
            else {
                this.clearValue();
                this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            }
        }));
        // document.body.style.overflow = 'hidden';
        document.body.appendChild(this.filterPanelRef.location.nativeElement);
        this.updateFilterPanelPosition(event.target);
        this.dfrs.setFilterPanel(this.filterPanelRef);
        let { width: dgwidth, height: dgHeight } = dgContainerEle.getBoundingClientRect();
        this['DG_CONTAINER_SIZE'] = { width: dgwidth, height: dgHeight };
        this.filterPanelRef.instance.panelHeightChange.subscribe((/**
         * @return {?}
         */
        () => {
            let { width, height } = dgContainerEle.getBoundingClientRect();
            this['DG_CONTAINER_SIZE'] = { width, height };
        }));
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            if (!this.ro) {
                this.ro = new ResizeObserver((/**
                 * @param {?} entries
                 * @param {?} observer
                 * @return {?}
                 */
                (entries, observer) => {
                    if (this['resize_timer_001']) {
                        clearTimeout(this['resize_timer_001']);
                    }
                    this['resize_timer_001'] = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        let { width, height } = entries[0].target.getBoundingClientRect();
                        const { width: dgWidth, height: dgHeight } = this['DG_CONTAINER_SIZE'];
                        if (this.gridInstance.autoHeight) {
                            if (dgWidth == width || dgWidth - width === 7 || dgWidth - width === -7) {
                                return;
                            }
                        }
                        if (width !== dgWidth || height !== dgHeight) {
                            this.close();
                        }
                    }), 30);
                }));
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.ro.observe(dgContainerEle);
                }));
            }
        }));
        this.filterPanelRef.instance.target = event;
        this.filterPanelRef.changeDetectorRef.markForCheck();
        this.filterPanelRef.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    close() {
        this.dfrs.closeFilterPanel();
        if (this.filterPanelSubscription) {
            this.filterPanelSubscription.unsubscribe();
            this.filterPanelSubscription = null;
        }
    }
    /**
     * @private
     * @param {?} ins
     * @return {?}
     */
    initOperators(ins) {
        if (this.column.filter.type === ColumnFilterType.string) {
            ins.operators = TextFilterOperators;
            ins.condition.operator1 = FilterOperator.Contains;
            ins.condition.operator2 = FilterOperator.Contains;
        }
        else if (this.column.filter.type === ColumnFilterType.number || this.column.filter.type === ColumnFilterType.datetime
            || this.column.filter.type === ColumnFilterType.date || this.column.filter.type === ColumnFilterType.time) {
            ins.operators = NumberOrDateFilterOperators;
            ins.condition.operator1 = FilterOperator.Equal;
            ins.condition.operator2 = FilterOperator.Equal;
        }
        if (ins.operators) {
            ins.operators.forEach((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                o.label = this.dfrs.getOperatorLabel(o.code);
            }));
        }
    }
    /**
     * @private
     * @param {?} target
     * @return {?}
     */
    updateFilterPanelPosition(target) {
        if (target) {
            /** @type {?} */
            const filterIconParent = target.parentElement;
            if (filterIconParent) {
                /** @type {?} */
                const pos = filterIconParent.getBoundingClientRect();
                /** @type {?} */
                const tr = target.closest('tr');
                /** @type {?} */
                const td = target.closest('td');
                /** @type {?} */
                const headerPos = target.closest('.f-datagrid-header').getBoundingClientRect();
                /** @type {?} */
                const panelWidth = this.filterPanelRef.instance.width;
                /** @type {?} */
                let left = pos.left;
                if (headerPos.width + headerPos.x < pos.x + panelWidth) { // this.column.filter.type === ColumnFilterType.enum
                    left = td.getBoundingClientRect().left + td.offsetWidth - panelWidth;
                    this.filterPanelRef.location.nativeElement.querySelector('.panel-icon').style.left = `${panelWidth - 40}px`;
                }
                // const top = pos.top
                /** @type {?} */
                const panel = this.filterPanelRef.location.nativeElement.querySelector('div');
                if (panel) {
                    this.render.setStyle(panel, 'top', `${pos.top}px`);
                    this.render.setStyle(panel, 'left', `${left}px`);
                }
            }
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTextValueChange($event) {
        /** @type {?} */
        const value = $event.target.value;
        this.dfrs.filterTextboxChanged.emit({ [this.column.field]: value });
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.filterStr = '';
        if (this.input) {
            this.input.nativeElement.value = '';
        }
        if (this.column.filter.type < 2) {
            this.disabled = false;
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    initFilter(condition) {
        this.filterStr = this.dfrs.condition2string(this.column, condition);
        this.disabled = !!this.filterStr;
        this.dfrs._updateColumnConditions(this.column.field, condition);
        this.cd.detectChanges();
    }
}
FilterTextboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-textbox',
                template: `
    <div class="f-datagrid-header-cell-content f-datagrid-filter-cell d-flex" style="padding-right: 5px">
        <div class="f-datagrid-cell-formgroup farris-group-auto flex-fill">
            <input *ngIf="!disabled" class="form-control" [attr.type]="inputType" [value]="filterStr"
                (input)="onTextValueChange($event)" #input [class.no-number-button]="inputType == 'number'">
            <input *ngIf="disabled" class="form-control" type="text" [value]="filterStr"
            [attr.title]="filterStr" [disabled]="disabled" [class.filter-editor-disabled]="disabled" >
        </div>
        <div style="min-width: 26px; text-align: center; align-items: center;
            display: flex; justify-content: center;" *ngIf="column.filter.enableOperator">
            <span style="cursor: pointer;" class="f-icon f-icon-filter-sm" (click)="show($event)"></span>
        </div>
    </div>
    `,
                styles: [`
        .no-number-button{-moz-appearance: textfield;}
        .no-number-button::-webkit-outer-spin-button, .no-number-button::-webkit-inner-spin-button {
              -webkit-appearance: none!important;
        }`]
            }] }
];
/** @nocollapse */
FilterTextboxComponent.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: ApplicationRef },
    { type: DatagridFilterRowService },
    { type: Renderer2 },
    { type: ChangeDetectorRef },
    { type: LocaleService }
];
FilterTextboxComponent.propDecorators = {
    column: [{ type: Input }],
    disabled: [{ type: Input }],
    delay: [{ type: Input }],
    input: [{ type: ViewChild, args: ['input',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
class FilterCheckboxComponent extends FilterRowEditorComponent {
    /**
     * @param {?} dfrs
     * @param {?} cd
     * @param {?} inject
     */
    constructor(dfrs, cd, inject) {
        super();
        this.dfrs = dfrs;
        this.cd = cd;
        this.inject = inject;
        this.i = 0;
        this.checked = false;
        this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            if (f === this.column.field) {
                this.clearValue();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.chk.nativeElement.indeterminate = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkedChange($event) {
        this.dfrs.closeFilterPanel();
        if (this.i > 0) {
            this.checked = !this.checked;
        }
        this.i += 1;
        if (this.i > 2) {
            this.i = 0;
            this.chk.nativeElement.indeterminate = true;
        }
        else {
            this.chk.nativeElement.indeterminate = false;
        }
        if (this.i === 0) {
            this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            this.checked = false;
        }
        else {
            /** @type {?} */
            const condition = {
                operator1: FilterOperator.Equal,
                value1: this.checked
            };
            this.dfrs.updateColumnConditions(this.column.field, condition);
        }
        this.cd.detectChanges();
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.checked = false;
        this.chk.nativeElement.indeterminate = true;
        this.cd.detectChanges();
    }
    /**
     * @param {?} filterCondition
     * @return {?}
     */
    initFilter(filterCondition) {
        if (filterCondition && Object.keys(filterCondition).length) {
            this.checked = filterCondition.value1;
            this.chk.nativeElement.indeterminate = false;
            this.i = this.checked ? 2 : 1;
        }
        else {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.i = 0;
        }
        this.dfrs._updateColumnConditions(this.column.field, filterCondition);
        this.cd.detectChanges();
    }
}
FilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-checkbox',
                template: `
    <div class="custom-control custom-checkbox f-checkradio-single">
        <input [name]="column.field" [checked]="checked" type="checkbox" #chk class="custom-control-input">
        <label class="custom-control-label" (click)="checkedChange($event)"></label>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterCheckboxComponent.ctorParameters = () => [
    { type: DatagridFilterRowService },
    { type: ChangeDetectorRef },
    { type: Injector }
];
FilterCheckboxComponent.propDecorators = {
    chk: [{ type: ViewChild, args: ['chk',] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterCellEditorDirective {
    /**
     * @param {?} injector
     * @param {?} resolver
     * @param {?} container
     * @param {?} render
     */
    constructor(injector, resolver, container, render) {
        this.injector = injector;
        this.resolver = resolver;
        this.container = container;
        this.render = render;
        this.delay = 300;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createFilterEditor();
    }
    /**
     * @private
     * @return {?}
     */
    createFilterEditor() {
        if (this.column.filter) {
            /** @type {?} */
            const columnFilter = (/** @type {?} */ (this.column.filter));
            columnFilter.type = columnFilter.type || ColumnFilterType.string;
            /** @type {?} */
            let constructorCmp = FilterTextboxComponent;
            switch (columnFilter.type) {
                case ColumnFilterType.boolean:
                    constructorCmp = FilterCheckboxComponent;
                    break;
                // case ColumnFilterType.enum:
                //     constructorCmp = FilterEnumComponent;
                //     break;
            }
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(constructorCmp);
            this.componentRef = this.container.createComponent(factory);
            this.componentRef.instance.column = this.column;
            this.componentRef.instance.group = this.group;
            this.componentRef.instance.gridInstance = this.gridInstance;
            this.componentRef.instance.disabled = columnFilter.type >= 3;
            this.componentRef.instance.delay = this.delay;
            if (this.gridInstance.conditions && Object.keys(this.gridInstance.conditions).length) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.componentRef.instance.initFilter(this.gridInstance.conditions[this.column.field]);
                }), 100);
            }
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        if (this.componentRef) {
            this.componentRef.instance.clearValue();
        }
    }
}
FilterCellEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[filter-cell-editor]',
            },] }
];
/** @nocollapse */
FilterCellEditorDirective.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Renderer2 }
];
FilterCellEditorDirective.propDecorators = {
    column: [{ type: Input }],
    group: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterRowComponent {
    /**
     * @param {?} fb
     * @param {?} el
     * @param {?} ngzone
     * @param {?} cd
     * @param {?} dfrs
     * @param {?} render
     * @param {?} inject
     */
    constructor(fb, el, ngzone, cd, dfrs, render, inject) {
        this.fb = fb;
        this.el = el;
        this.ngzone = ngzone;
        this.cd = cd;
        this.dfrs = dfrs;
        this.render = render;
        this.inject = inject;
        this.fixedLeft = false;
        this.fixedRight = false;
        this.delay = 300;
        this.conditionChange = new EventEmitter();
        this.form = new FormGroup({});
        this.filterRowConditionsScribe = this.dfrs.filterRowConditions$.subscribe((/**
         * @param {?} ccs
         * @return {?}
         */
        ccs => {
            this.conditionChange.emit(ccs);
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.form = this.createControl();
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.render.listen('document', 'click', (/**
             * @return {?}
             */
            () => {
                this.dfrs.closeFilterPanel();
            }));
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        /** @type {?} */
        const nativeEl = this.el.nativeElement;
        this.tr = nativeEl.parentElement;
        nativeEl.querySelectorAll('td').forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            this.tr.append(n);
        }));
        nativeEl.style.display = 'none';
        this.dfrs.gridInstance = this.gridInstance;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.filterRowConditionsScribe) {
            this.filterRowConditionsScribe.unsubscribe();
            this.filterRowConditionsScribe = null;
        }
        if (this.tr) {
            /** @type {?} */
            const tds = this.tr.querySelectorAll('td');
            if (tds && tds.length) {
                tds.forEach((/**
                 * @param {?} a
                 * @return {?}
                 */
                a => {
                    if (!a.classList.contains('f-datagrid-header-checkbox') && !a.classList.contains('f-datagrid-cell-rownumber')) {
                        this.tr.removeChild(a);
                    }
                }));
            }
        }
    }
    /**
     * @return {?}
     */
    createControl() {
        /** @type {?} */
        const group = this.fb.group({});
        this.columns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            if (col.colspan) {
                return;
            }
            /** @type {?} */
            const control = this.fb.control('');
            group.addControl(col.field, control);
        }));
        return group;
    }
    /**
     * @param {?=} emitEvent
     * @return {?}
     */
    clearFilterValue(emitEvent = true) {
        // this.form.reset();
        this.editors.forEach((/**
         * @param {?} c
         * @return {?}
         */
        c => {
            c.clearValue();
        }));
        this.dfrs.clear(emitEvent);
    }
    /**
     * @param {?} field
     * @param {?=} opts
     * @return {?}
     */
    removeField(field, opts) {
        this.dfrs.removeFilterField(field, opts);
    }
}
FilterRowComponent.decorators = [
    { type: Component, args: [{
                selector: '[filter-row]',
                template: "\r\n<!-- <td *ngIf=\"gridInstance.showCheckbox  && fixedLeft && gridInstance.enableDragColumn\"></td>\r\n<td *ngIf=\"gridInstance.showLineNumber && fixedLeft && gridInstance.enableDragColumn\"></td> -->\r\n<td *ngFor=\"let col of columns\" class=\"f-datagrid-header-cell f-datagrid-filter-td\" \r\n    style=\"text-align: center;\" [attr.id]=\"'filter-row_' + col.field \">\r\n    <ng-container filter-cell-editor [delay]=\"delay\" [gridInstance]=\"gridInstance\" [column]=\"col\" [group]=\"form\"></ng-container>\r\n</td>\r\n\r\n",
                providers: [
                    DatagridFilterRowService
                ],
                encapsulation: ViewEncapsulation.None,
                styles: [".filter-condition .list-group-item{padding:10px;background:#f8f8f8}.filter-condition .datalist{min-height:100px;max-height:200px;overflow:auto}.filter-condition .datalist::-webkit-scrollbar{width:15px;height:15px}.filter-condition .datalist::-webkit-scrollbar-thumb{background-color:#c2c2c2;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:hover{background-color:#7d7d7d;border-radius:10px;background-clip:content-box}.filter-condition .datalist::-webkit-scrollbar-thumb:vertical,.filter-condition .datalist::-webkit-scrollbar-thumb:vertical:hover{border:3px solid transparent;border-left-width:4px}.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal,.filter-condition .datalist::-webkit-scrollbar-thumb:horizontal:hover{border:3px solid transparent;border-top:4px solid transparent}.filter-condition .datalist::-webkit-scrollbar-track{background-color:#fafafa}.filter-condition .datalist::-webkit-scrollbar-track:vertical{border-left:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-track:horizontal{border-top:1px solid #e8e8e8}.filter-condition .datalist::-webkit-scrollbar-corner{background-color:#fafafa}.filter-condition farris-datalist .card{border:0}.filter-condition .card .list-group-item{padding-left:0;padding-right:0}.filter-condition .list-group-item.border-b1{border-bottom:1px solid #dde2eb!important;margin-bottom:0}.f-datagrid-filter-panel{background:#f8f8f8;position:absolute;z-index:999;box-shadow:0 1px 4px 1px rgba(186,191,199,.4);top:140px;left:1257px;width:200px;border-radius:3px;border:1px solid #babfc7}.f-datagrid-filter-panel .panel-header{height:36px;min-height:36px;border-bottom:1px solid #2196f3;text-align:center;line-height:36px;color:#2196f3}.f-datagrid-filter-td .filter-editor-disabled{color:rgba(24,29,31,.5);background-color:#f1f2f4;border-color:rgba(186,191,199,.3)}.f-datagrid-filter-td .filter-editor-disabled:hover{background-color:#f1f2f4}.f-datagrid-filter-td:hover{background-color:transparent}"]
            }] }
];
/** @nocollapse */
FilterRowComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: ElementRef },
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: DatagridFilterRowService },
    { type: Renderer2 },
    { type: Injector }
];
FilterRowComponent.propDecorators = {
    fixedLeft: [{ type: Input }],
    fixedRight: [{ type: Input }],
    columns: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }],
    conditionChange: [{ type: Output }],
    editors: [{ type: ViewChildren, args: [FilterCellEditorDirective,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ConditionEditorComponent {
    /**
     * @param {?} inject
     * @param {?} cd
     * @param {?} fb
     */
    constructor(inject, cd, fb) {
        this.inject = inject;
        this.cd = cd;
        this.fb = fb;
        this.datatype = ColumnFilterType.string;
        this.condition = {
            operator1: 0,
            value1: '',
            relation: '',
            operator2: 0,
            value2: ''
        };
        this.filterOptions = {};
        this.conditionChange = new EventEmitter();
        this.panelHeightChange = new EventEmitter();
        this.emptyCondition = Object.assign({}, this.condition);
        this.formValueChangesSubscription = null;
        this.originalCondition = {};
        this.form = this.fb.group({
            operator1: new FormControl(0),
            value1: new FormControl(''),
            relation: new FormControl(''),
            operator2: new FormControl(0),
            value2: new FormControl(''),
        });
        this.emptyConditonString = JSON.stringify(this.emptyCondition);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.originalCondition = Object.assign({}, this.condition);
        this.form.patchValue(this.condition);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.formValueChangesSubscription) {
            this.formValueChangesSubscription.unsubscribe();
            this.formValueChangesSubscription = null;
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @private
     * @param {?} v
     * @return {?}
     */
    emitConditionChange(v) {
        this.condition = v;
        /** @type {?} */
        const filter = this.checkFilterOperator();
        this.conditionChange.emit(filter);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.form.valueChanges.subscribe((/**
         * @param {?} v
         * @return {?}
         */
        (v) => {
            this.condition = Object.assign(this.emptyCondition, this.condition);
            if (v.operator1 > 1000) {
                this.emitConditionChange(v);
                return;
            }
            /** @type {?} */
            const currentFilterJSON = JSON.stringify(v);
            if (this.emptyConditonString === currentFilterJSON) {
                this.emitConditionChange(v);
            }
            else {
                // if (this.condition.value1 != v.value1 || (this.condition.value2 !== undefined && this.condition.value2 != v.value2)) {
                if (JSON.stringify(this.condition) !== currentFilterJSON) {
                    this.emitConditionChange(v);
                    if (v.value2 == '') {
                        this.emitPanelHeightChanged();
                    }
                }
                else {
                    if ((this.condition.operator1 != v.operator1) ||
                        (this.condition.relation != v.relation || this.condition.operator2 != v.operator2)) {
                        this.emitConditionChange(v);
                    }
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    checkFilterOperator() {
        /** @type {?} */
        const filter = Object.assign({}, this.condition);
        /** @type {?} */
        const op1 = parseInt('' + filter.operator1, 10);
        /** @type {?} */
        const f1 = { operator1: filter.operator1, value1: filter.value1 };
        if (op1 === FilterOperator.Empty || op1 === FilterOperator.NotEmpty) {
            filter.value1 = '';
            f1.value1 = '';
        }
        if ((filter.value1 === '' || filter.value1 === null) && op1 !== FilterOperator.Empty && op1 !== FilterOperator.NotEmpty) {
            return '';
        }
        if (!filter.relation) {
            return f1;
        }
        else {
            /** @type {?} */
            const op2 = parseInt('' + filter.operator2, 10);
            if (op2 === FilterOperator.Empty || op2 === FilterOperator.NotEmpty) {
                filter.value2 = '';
                return filter;
            }
            else {
                if (filter.value2 == null || filter.value2 == undefined || filter.value2 === '') {
                    return f1;
                }
            }
        }
        return filter;
    }
    /**
     * @param {?} relation
     * @param {?} $event
     * @return {?}
     */
    chooseRelation(relation, $event) {
        $event.stopPropagation();
        /** @type {?} */
        const emit = !this.form.get('relation').value;
        this.form.get('relation').setValue(relation);
        this.condition.relation = relation;
        if (this.condition.operator2 === undefined) {
            this.condition.operator2 = 0;
        }
        if (emit) {
            this.emitPanelHeightChanged();
        }
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    resetFilters($event) {
        if (this.emptyConditonString !== JSON.stringify(this.condition)) {
            this.condition = JSON.parse(this.emptyConditonString);
            this.form.reset(this.condition);
            this.emitPanelHeightChanged();
        }
    }
    /**
     * @private
     * @return {?}
     */
    emitPanelHeightChanged() {
        if (this['panelHeightChangedTimer']) {
            clearTimeout(this['panelHeightChangedTimer']);
        }
        this['panelHeightChangedTimer'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.panelHeightChange.emit();
        }), 20);
    }
}
ConditionEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'condition-editor',
                template: "<form [formGroup]=\"form\">\r\n<ul class=\"list-group filter-condition\">\r\n    <li class=\"list-group-item border-0\">\r\n        <select class=\"form-control form-control-sm\" formControlName=\"operator1\" single-select [panelRef]=\"selectpanel\">\r\n            <!-- <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option> -->\r\n        </select>\r\n        <div #selectpanel class=\"single-select-panel f-area-hide\">\r\n            <ul class=\"dropdown-menu show\">\r\n                <li class=\"dropdown-item\" *ngFor=\"let col of operators\" [attr.value]=\"col.code\" [class.active]=\"condition.operator1 === col.code\">{{ col.label }}</li>\r\n            </ul>\r\n        </div>\r\n    </li>\r\n    <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator1 < 1000\">\r\n        <!-- <farris-time-picker #timepicker formControlName=\"value1\" [readonly]= \"false\" [editable]= \"true\"\r\n        [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\" [secondStep] = \"1\"></farris-time-picker> -->\r\n\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n        <farris-datepicker formControlName=\"value1\" [dateFormat]=\"filterOptions?.dateFormat\" [returnFormat]=\"filterOptions?.returnFormat\" [useDefault]=\"false\" [showTime]=\"true\" *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n        <!-- <farris-number-spinner  name=\"value1\" [(ngModel)]=\"condition.value1\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n            <input formControlName=\"value1\" class=\"form-control no-number-button\" type=\"number\" >\r\n        </div>\r\n        <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n            <input formControlName=\"value1\" class=\"form-control\" type=\"time\" >\r\n        </div>\r\n\r\n        <input class=\"form-control form-control-sm\" formControlName=\"value1\" *ngSwitchDefault type=\"text\" >\r\n    </li>\r\n\r\n    <ng-container *ngIf=\"condition.value1 !== '' && condition.value1 !== null && condition.value1 !== undefined\">\r\n        \r\n        <li class=\"list-group-item border-0\">\r\n            <div class=\"custom-control custom-radio custom-control-inline\" style=\"margin-right: 0;\">\r\n                <input type=\"radio\" id=\"customRadioInline1\" formControlName=\"relation\" value=\"and\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline1\" (click)=\"chooseRelation('and', $event)\">{{ 'datagrid.filter.and' | locale }}</label>\r\n            </div>\r\n            <div class=\"custom-control custom-radio custom-control-inline\">\r\n                <input type=\"radio\" id=\"customRadioInline2\" formControlName=\"relation\" value=\"or\" class=\"custom-control-input\">\r\n                <label class=\"custom-control-label\" for=\"customRadioInline2\"  (click)=\"chooseRelation('or', $event)\">{{ 'datagrid.filter.or' | locale }}</label>\r\n            </div>\r\n        </li>\r\n        <ng-container *ngIf=\"condition.relation\">\r\n            \r\n            <li class=\"list-group-item border-0\">\r\n                <!-- <select class=\"form-control form-control-sm\" formControlName=\"operator2\" >\r\n                    <option *ngFor=\"let o of operators\" [selected]=\"o.isDefault\" [value]=\"o.code\">{{ o.label }}</option>\r\n                </select> -->\r\n\r\n                <select class=\"form-control form-control-sm\" formControlName=\"operator2\" single-select [panelRef]=\"selectpanel2\">\r\n                </select>\r\n                <div #selectpanel2 class=\"single-select-panel f-area-hide\">\r\n                    <ul class=\"dropdown-menu show\">\r\n                        <li class=\"dropdown-item\" *ngFor=\"let col of operators\" [attr.value]=\"col.code\" [class.active]=\"condition.operator2 === col.code\">{{ col.label }}</li>\r\n                    </ul>\r\n                </div>\r\n\r\n\r\n\r\n            </li>\r\n            <li class=\"list-group-item border-0\" [ngSwitch]=\"datatype\" *ngIf=\"condition.operator2 < 1000\">\r\n                <!-- <farris-time-picker #timepicker formControlName=\"value2\" [readonly]= \"false\" [editable]= \"false\"\r\n                [hourStep] = \"1\" [minuteStep] = \"1\"  *ngSwitchCase=\"'4'\" [format]=\"filterOptions?.format\"[secondStep] = \"1\"></farris-time-picker> -->\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"false\" *ngSwitchCase=\"'3'\" ></farris-datepicker>\r\n                <farris-datepicker formControlName=\"value2\" [dateFormat]=\"filterOptions?.dateFormat\" [useDefault]=\"false\" [showTime]=\"true\"  *ngSwitchCase=\"'5'\" ></farris-datepicker>\r\n                <!-- <farris-number-spinner  name=\"value2\" [(ngModel)]=\"condition.value2\" *ngSwitchCase=\"'1'\"></farris-number-spinner> -->\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'1'\">\r\n                    <input formControlName=\"value2\" class=\"form-control no-number-button\" type=\"number\" >\r\n                </div>\r\n                <div class=\"f-datagrid-cell-formgroup farris-group-auto flex-fill\"  *ngSwitchCase=\"'4'\">\r\n                    <input formControlName=\"value2\" class=\"form-control\" type=\"time\" >\r\n                </div>\r\n                <input class=\"form-control form-control-sm\" formControlName=\"value2\" *ngSwitchDefault type=\"text\" >\r\n            </li>\r\n        </ng-container>\r\n    </ng-container>\r\n    \r\n    <li class=\"list-group-item border-0\">\r\n        <div class=\"d-flex\">\r\n            <!-- <div class=\"p-2 \"><button type=\"button\" class=\"btn btn-light\">\u9AD8\u7EA7</button></div> -->\r\n            <div class=\"ml-auto\">\r\n                <button type=\"button\" style=\"position: unset;\" (click)=\"resetFilters($event)\" class=\"btn btn-primary\">{{ 'datagrid.filter.clear' | locale }}</button>\r\n            </div>\r\n        </div>\r\n   </li>\r\n</ul>\r\n</form>",
                styles: [`
        .no-number-button{-moz-appearance: textfield;}
        .no-number-button::-webkit-outer-spin-button, .no-number-button::-webkit-inner-spin-button {
              -webkit-appearance: none!important;
        }`]
            }] }
];
/** @nocollapse */
ConditionEditorComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: FormBuilder }
];
ConditionEditorComponent.propDecorators = {
    operators: [{ type: Input }],
    datatype: [{ type: Input }],
    condition: [{ type: Input }],
    filterOptions: [{ type: Input }],
    conditionChange: [{ type: Output }],
    panelHeightChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterDatalistComponent {
    /**
     * @param {?} inject
     * @param {?} cd
     * @param {?} dfrs
     */
    constructor(inject, cd, dfrs) {
        this.inject = inject;
        this.cd = cd;
        this.dfrs = dfrs;
        this.data = [];
        this.showFilter = false;
        this.filterKeyWord = '';
        this.valueChange = new EventEmitter();
        this.checked = false;
        this.originalData = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.originalData = cloneDeep(this.data);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.selectedValues === undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.checkAll(true, false);
                this.checked = true;
                this.cd.detectChanges();
            }));
        }
        this.updateCheckboxState();
    }
    /**
     * @private
     * @param {?=} checked
     * @param {?=} emit
     * @return {?}
     */
    checkAll(checked = true, emit = true) {
        if (checked) {
            this.dataListInstance.selectAll();
            this.selectedValues = this.originalData.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.valueField])).join(',');
        }
        else {
            this.dataListInstance.unSelectAll();
            this.selectedValues = '';
        }
        if (emit) {
            this.buildCondition();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkAllHandler($event) {
        this.checked = $event;
        this.chkall.nativeElement.indeterminate = false;
        this.checkAll(this.checked);
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelect($event) {
        this.updateSelectedValues($event);
        this.updateCheckboxState();
        this.buildCondition();
    }
    /**
     * @private
     * @return {?}
     */
    updateCheckboxState() {
        if (this.selectedValues === undefined) {
            return;
        }
        if (this.selectedValues.split(',').length === this.originalData.length) {
            this.checked = true;
            this.chkall.nativeElement.indeterminate = false;
        }
        else {
            this.checked = false;
            this.chkall.nativeElement.indeterminate = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onUnSelected($event) {
        this.updateSelectedValues($event, false);
        this.checked = false;
        this.chkall.nativeElement.indeterminate = !!this.selectedValues;
        this.buildCondition();
    }
    /**
     * @private
     * @return {?}
     */
    buildCondition() {
        /** @type {?} */
        const values = this.selectedValues.split(',');
        if (this.selectedValues) {
            if (values.length === this.originalData.length) {
                this.valueChange.emit(FilterConditionValue.All);
                return;
            }
            /** @type {?} */
            const condition = {
                operator1: FilterOperator.In,
                value1: values
            };
            this.valueChange.emit(condition);
        }
        else {
            // this.valueChange.emit({ operator1: FilterOperator.Equal, value1: [] });
            // 没有选择相当于此条件无效
            this.valueChange.emit(FilterConditionValue.All);
        }
    }
    /**
     * @param {?} $event
     * @param {?=} selected
     * @return {?}
     */
    updateSelectedValues($event, selected = true) {
        if ($event) {
            /** @type {?} */
            const val = $event.data[this.valueField];
            /** @type {?} */
            let valArr = this.selectedValues ? this.selectedValues.split(',') : [];
            if (selected) {
                if (valArr.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n == val)) === -1) {
                    valArr.push(val);
                }
            }
            else {
                valArr = valArr.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n != val));
            }
            this.selectedValues = valArr.join(',');
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTextChange($event) {
        /** @type {?} */
        const val = $event.target[this.valueField];
        this.filterKeyWord = val;
        this.changeDataSource();
    }
    /**
     * @private
     * @return {?}
     */
    changeDataSource() {
        if (this.filterKeyWord) {
            this.data = this.originalData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return n[this.textField].indexOf(this.filterKeyWord) > -1;
            }));
        }
        else {
            this.data = cloneDeep(this.originalData);
        }
    }
    /**
     * @return {?}
     */
    restFilter() {
        this.filterKeyWord = '';
        this.changeDataSource();
        this.checkAll();
        this.checked = true;
        this.chkall.nativeElement.indeterminate = false;
        this.cd.detectChanges();
    }
}
FilterDatalistComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-datalist',
                template: `
    <ul class="list-group filter-condition">
        <li class="list-group-item border-0 border-b1" *ngIf="showFilter">
            <input class="form-control form-control-sm" [ngModel]="filterKeyWord"
                (input)="onTextChange($event)" type="text" >
        </li>
        <li class="list-group-item datalist border-0 border-b1">
            <farris-datalist
                #dl
                [data]="data"
                [idField]="idField"
                [height]="'auto'"
                [fit]="false"
                [multiSelect]="true"
                [selectedValues]="selectedValues"
                [valueField]="valueField"
                [textField]="textField"
                (selected)="onSelect($event)"
                (unSelected)="onUnSelected($event)">
            </farris-datalist>
        </li>
        <li class="list-group-item border-0" style="border-bottom: 1px solid #dde2eb;">
            <div class="d-flex">
                <div class="custom-control custom-checkbox" style="padding-left: 3px;">
                    <input id="filter-datalist-checkall" #chkall type="checkbox" class="custom-control-input" [ngModel]="checked" (ngModelChange)="checkAllHandler($event)">
                    <label class="custom-control-label" for="filter-datalist-checkall" >{{ 'datagrid.filter.checkAll' | locale }}</label>
                </div>
                <div class="ml-auto"><button type="button" class="btn btn-outline-primary" (click)="restFilter()">
                {{ 'datagrid.filter.reset' | locale }}</button></div>
            </div>
        </li>
    </ul>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
FilterDatalistComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: DatagridFilterRowService }
];
FilterDatalistComponent.propDecorators = {
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    idField: [{ type: Input }],
    selectedValues: [{ type: Input }],
    data: [{ type: Input }],
    showFilter: [{ type: Input }],
    filterKeyWord: [{ type: Input }],
    chkall: [{ type: ViewChild, args: ['chkall',] }],
    dataListInstance: [{ type: ViewChild, args: ['dl',] }],
    valueChange: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FilterSelectComponent {
    constructor() { }
    /**
     * @return {?}
     */
    ngOnInit() { }
}
FilterSelectComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-select',
                template: `
    <select class="form-control form-control-sm">
        <option>Small select</option>
    </select>
    `
            }] }
];
/** @nocollapse */
FilterSelectComponent.ctorParameters = () => [];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FilterRowProvider = { provide: GRID_FILTER_ROW, useValue: FilterRowComponent };
class DatagridFilterRowModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DatagridFilterRowModule,
            providers: [
                { provide: GRID_FILTER_ROW, useValue: FilterRowComponent }
            ]
        };
    }
}
DatagridFilterRowModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FilterRowComponent,
                    FilterCellEditorDirective,
                    FilterTextboxComponent,
                    FilterCheckboxComponent,
                    FilterRowPanelComponent,
                    FilterDatalistComponent,
                    FilterRowEditorComponent,
                    FilterSelectComponent,
                    ConditionEditorComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DatagridModule,
                    FarrisDatePickerModule,
                    NumberSpinnerModule,
                    DatalistModule,
                    TimePickerModule,
                    LocaleModule.forRoot(),
                    FarrisFormsModule,
                    FarrisCommonModule
                ],
                entryComponents: [
                    FilterRowComponent,
                    FilterTextboxComponent,
                    FilterCheckboxComponent,
                    ConditionEditorComponent,
                    FilterDatalistComponent,
                    FilterRowPanelComponent,
                    FilterRowEditorComponent,
                    FilterSelectComponent
                ],
                exports: [
                    FilterRowComponent
                ]
            },] }
];

export { AllFilterOperator, ConditionEditorComponent, DatagridFilterRowModule, DatagridFilterRowService, FilterCellEditorDirective, FilterCheckboxComponent, FilterConditionValue, FilterDatalistComponent, FilterOperator, FilterRowComponent, FilterRowEditorComponent, FilterRowPanelComponent, FilterRowProvider, FilterSelectComponent, FilterTextboxComponent, NumberOrDateFilterOperators, TextFilterOperators };
//# sourceMappingURL=farris-ui-datagrid-filter.js.map
