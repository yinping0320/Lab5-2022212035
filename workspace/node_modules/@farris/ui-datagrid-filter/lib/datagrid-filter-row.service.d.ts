import { ComponentRef, EventEmitter } from '@angular/core';
import { DataColumn, DatagridComponent } from '@farris/ui-datagrid';
import { ColumnFilterCondition, FilterCondition, FilterConditionValue } from './operations/operators';
import { FilterRowPanelComponent } from './filter-editors/filter-row-panel.component';
export declare class DatagridFilterRowService {
    private columnConditionSubject;
    filterRowConditions$: import("rxjs").Observable<any>;
    columnConditions: ColumnFilterCondition;
    currentFilterPanel: ComponentRef<FilterRowPanelComponent>;
    gridInstance: DatagridComponent;
    filterTextboxChanged: EventEmitter<{}>;
    removeField: EventEmitter<string>;
    constructor();
    setFilterPanel(frp: ComponentRef<FilterRowPanelComponent>): void;
    hasFilterPanel(): boolean;
    closeFilterPanel(): void;
    clear(emitEvent?: boolean): void;
    removeFilterField(field: string, opts?: {
        emitEvent: boolean;
    }): void;
    _updateColumnConditions(field: string, colCondition: FilterCondition | FilterConditionValue): void;
    updateColumnConditions(field: string, colCondition: FilterCondition | FilterConditionValue): void;
    private emitColumnConditionChanged;
    condition2string(column: DataColumn, condition: FilterCondition): string;
    private isEmpty;
    getEnumOptions(column: DataColumn): any;
    getOperatorLabel(code: any): any;
}
