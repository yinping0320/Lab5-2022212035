/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FormGroup } from '@angular/forms';
import { Directive, Input, Injector, ComponentFactoryResolver, ViewContainerRef, Renderer2 } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { FilterTextboxComponent } from './filter-editors/filter-row-textbox.component';
import { FilterCheckboxComponent } from './filter-editors/filter-row-checkbox.component';
export class FilterCellEditorDirective {
    /**
     * @param {?} injector
     * @param {?} resolver
     * @param {?} container
     * @param {?} render
     */
    constructor(injector, resolver, container, render) {
        this.injector = injector;
        this.resolver = resolver;
        this.container = container;
        this.render = render;
        this.delay = 300;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.createFilterEditor();
    }
    /**
     * @private
     * @return {?}
     */
    createFilterEditor() {
        if (this.column.filter) {
            /** @type {?} */
            const columnFilter = (/** @type {?} */ (this.column.filter));
            columnFilter.type = columnFilter.type || ColumnFilterType.string;
            /** @type {?} */
            let constructorCmp = FilterTextboxComponent;
            switch (columnFilter.type) {
                case ColumnFilterType.boolean:
                    constructorCmp = FilterCheckboxComponent;
                    break;
                // case ColumnFilterType.enum:
                //     constructorCmp = FilterEnumComponent;
                //     break;
            }
            /** @type {?} */
            const factory = this.resolver.resolveComponentFactory(constructorCmp);
            this.componentRef = this.container.createComponent(factory);
            this.componentRef.instance.column = this.column;
            this.componentRef.instance.group = this.group;
            this.componentRef.instance.gridInstance = this.gridInstance;
            this.componentRef.instance.disabled = columnFilter.type >= 3;
            this.componentRef.instance.delay = this.delay;
            if (this.gridInstance.conditions && Object.keys(this.gridInstance.conditions).length) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.componentRef.instance.initFilter(this.gridInstance.conditions[this.column.field]);
                }), 100);
            }
        }
    }
    /**
     * @return {?}
     */
    clearValue() {
        if (this.componentRef) {
            this.componentRef.instance.clearValue();
        }
    }
}
FilterCellEditorDirective.decorators = [
    { type: Directive, args: [{
                selector: '[filter-cell-editor]',
            },] }
];
/** @nocollapse */
FilterCellEditorDirective.ctorParameters = () => [
    { type: Injector },
    { type: ComponentFactoryResolver },
    { type: ViewContainerRef },
    { type: Renderer2 }
];
FilterCellEditorDirective.propDecorators = {
    column: [{ type: Input }],
    group: [{ type: Input }],
    gridInstance: [{ type: Input }],
    delay: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FilterCellEditorDirective.prototype.column;
    /** @type {?} */
    FilterCellEditorDirective.prototype.group;
    /** @type {?} */
    FilterCellEditorDirective.prototype.gridInstance;
    /** @type {?} */
    FilterCellEditorDirective.prototype.delay;
    /** @type {?} */
    FilterCellEditorDirective.prototype.componentRef;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.resolver;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    FilterCellEditorDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLWNlbGwtZWRpdG9yLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQtZmlsdGVyLyIsInNvdXJjZXMiOlsibGliL2RhdGFncmlkLWZpbHRlci1jZWxsLWVkaXRvci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUMzQyxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsd0JBQXdCLEVBQUUsZ0JBQWdCLEVBQXdCLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4SSxPQUFPLEVBQTRCLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFLekYsTUFBTSxPQUFPLHlCQUF5Qjs7Ozs7OztJQU1sQyxZQUNZLFFBQWtCLEVBQ2xCLFFBQWtDLEVBQ2xDLFNBQTJCLEVBQzNCLE1BQWlCO1FBSGpCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsYUFBUSxHQUFSLFFBQVEsQ0FBMEI7UUFDbEMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFDM0IsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQU5wQixVQUFLLEdBQUcsR0FBRyxDQUFDO0lBTVcsQ0FBQzs7OztJQUVqQyxRQUFRO1FBQ0osSUFBSSxDQUFDLGtCQUFrQixFQUFFLENBQUM7SUFDOUIsQ0FBQzs7Ozs7SUFFTyxrQkFBa0I7UUFFdEIsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7a0JBQ2QsWUFBWSxHQUFHLG1CQUFBLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFnQjtZQUN2RCxZQUFZLENBQUMsSUFBSSxHQUFHLFlBQVksQ0FBQyxJQUFJLElBQUksZ0JBQWdCLENBQUMsTUFBTSxDQUFDOztnQkFDN0QsY0FBYyxHQUFRLHNCQUFzQjtZQUNoRCxRQUFRLFlBQVksQ0FBQyxJQUFJLEVBQUU7Z0JBQ3ZCLEtBQUssZ0JBQWdCLENBQUMsT0FBTztvQkFDekIsY0FBYyxHQUFHLHVCQUF1QixDQUFDO29CQUN6QyxNQUFNO2dCQUNWLDhCQUE4QjtnQkFDOUIsNENBQTRDO2dCQUM1QyxhQUFhO2FBQ2hCOztrQkFDSyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBRSxjQUFjLENBQUU7WUFDdkUsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoRCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUM5QyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQztZQUM1RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLENBQUM7WUFDN0QsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7WUFFOUMsSUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUMsTUFBTSxFQUFHO2dCQUNuRixVQUFVOzs7Z0JBQUMsR0FBRyxFQUFFO29CQUNaLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQzNGLENBQUMsR0FBRSxHQUFHLENBQUMsQ0FBQzthQUNYO1NBQ0o7SUFFTCxDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztTQUMzQztJQUNMLENBQUM7OztZQXRESixTQUFTLFNBQUM7Z0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjthQUNuQzs7OztZQVAwQixRQUFRO1lBQUUsd0JBQXdCO1lBQUUsZ0JBQWdCO1lBQXdCLFNBQVM7OztxQkFTM0csS0FBSztvQkFDTCxLQUFLOzJCQUNMLEtBQUs7b0JBQ0wsS0FBSzs7OztJQUhOLDJDQUE0Qjs7SUFDNUIsMENBQTBCOztJQUMxQixpREFBMkI7O0lBQzNCLDBDQUFxQjs7SUFDckIsaURBQWdDOzs7OztJQUU1Qiw2Q0FBMEI7Ozs7O0lBQzFCLDZDQUEwQzs7Ozs7SUFDMUMsOENBQW1DOzs7OztJQUNuQywyQ0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYsIE9uSW5pdCwgQ29tcG9uZW50UmVmLCBSZW5kZXJlcjIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YUNvbHVtbiwgQ29sdW1uRmlsdGVyLCBDb2x1bW5GaWx0ZXJUeXBlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZCc7XHJcbmltcG9ydCB7IEZpbHRlclRleHRib3hDb21wb25lbnQgfSBmcm9tICcuL2ZpbHRlci1lZGl0b3JzL2ZpbHRlci1yb3ctdGV4dGJveC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDaGVja2JveENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy1jaGVja2JveC5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tmaWx0ZXItY2VsbC1lZGl0b3JdJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIEZpbHRlckNlbGxFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgY29sdW1uOiBEYXRhQ29sdW1uO1xyXG4gICAgQElucHV0KCkgZ3JvdXA6IEZvcm1Hcm91cDtcclxuICAgIEBJbnB1dCgpIGdyaWRJbnN0YW5jZTogYW55O1xyXG4gICAgQElucHV0KCkgZGVsYXkgPSAzMDA7XHJcbiAgICBjb21wb25lbnRSZWY6IENvbXBvbmVudFJlZjxhbnk+O1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXHJcbiAgICAgICAgcHJpdmF0ZSByZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxyXG4gICAgICAgIHByaXZhdGUgY29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxyXG4gICAgICAgIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIpIHt9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVGaWx0ZXJFZGl0b3IoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNyZWF0ZUZpbHRlckVkaXRvcigpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuY29sdW1uLmZpbHRlcikge1xyXG4gICAgICAgICAgICBjb25zdCBjb2x1bW5GaWx0ZXIgPSB0aGlzLmNvbHVtbi5maWx0ZXIgYXMgQ29sdW1uRmlsdGVyO1xyXG4gICAgICAgICAgICBjb2x1bW5GaWx0ZXIudHlwZSA9IGNvbHVtbkZpbHRlci50eXBlIHx8IENvbHVtbkZpbHRlclR5cGUuc3RyaW5nO1xyXG4gICAgICAgICAgICBsZXQgY29uc3RydWN0b3JDbXA6IGFueSA9IEZpbHRlclRleHRib3hDb21wb25lbnQ7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29sdW1uRmlsdGVyLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQ29sdW1uRmlsdGVyVHlwZS5ib29sZWFuOlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0cnVjdG9yQ21wID0gRmlsdGVyQ2hlY2tib3hDb21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAvLyBjYXNlIENvbHVtbkZpbHRlclR5cGUuZW51bTpcclxuICAgICAgICAgICAgICAgIC8vICAgICBjb25zdHJ1Y3RvckNtcCA9IEZpbHRlckVudW1Db21wb25lbnQ7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZmFjdG9yeSA9IHRoaXMucmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoIGNvbnN0cnVjdG9yQ21wICk7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmID0gdGhpcy5jb250YWluZXIuY3JlYXRlQ29tcG9uZW50KGZhY3RvcnkpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5jb2x1bW4gPSB0aGlzLmNvbHVtbjtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZ3JvdXAgPSB0aGlzLmdyb3VwO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5ncmlkSW5zdGFuY2UgPSB0aGlzLmdyaWRJbnN0YW5jZTtcclxuICAgICAgICAgICAgdGhpcy5jb21wb25lbnRSZWYuaW5zdGFuY2UuZGlzYWJsZWQgPSBjb2x1bW5GaWx0ZXIudHlwZSA+PSAzO1xyXG4gICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5kZWxheSA9IHRoaXMuZGVsYXk7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5ncmlkSW5zdGFuY2UuY29uZGl0aW9ucyAmJiBPYmplY3Qua2V5cyh0aGlzLmdyaWRJbnN0YW5jZS5jb25kaXRpb25zKS5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudFJlZi5pbnN0YW5jZS5pbml0RmlsdGVyKHRoaXMuZ3JpZEluc3RhbmNlLmNvbmRpdGlvbnNbdGhpcy5jb2x1bW4uZmllbGRdKTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcG9uZW50UmVmLmluc3RhbmNlLmNsZWFyVmFsdWUoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==