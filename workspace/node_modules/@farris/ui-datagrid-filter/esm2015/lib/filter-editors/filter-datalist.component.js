/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild, ElementRef, Output, EventEmitter, Injector, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { cloneDeep } from 'lodash-es';
import { DatalistComponent } from '@farris/ui-datalist';
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { DatagridFilterRowService } from './../datagrid-filter-row.service';
export class FilterDatalistComponent {
    /**
     * @param {?} inject
     * @param {?} cd
     * @param {?} dfrs
     */
    constructor(inject, cd, dfrs) {
        this.inject = inject;
        this.cd = cd;
        this.dfrs = dfrs;
        this.data = [];
        this.showFilter = false;
        this.filterKeyWord = '';
        this.valueChange = new EventEmitter();
        this.checked = false;
        this.originalData = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.originalData = cloneDeep(this.data);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.selectedValues === undefined) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.checkAll(true, false);
                this.checked = true;
                this.cd.detectChanges();
            }));
        }
        this.updateCheckboxState();
    }
    /**
     * @private
     * @param {?=} checked
     * @param {?=} emit
     * @return {?}
     */
    checkAll(checked = true, emit = true) {
        if (checked) {
            this.dataListInstance.selectAll();
            this.selectedValues = this.originalData.map((/**
             * @param {?} n
             * @return {?}
             */
            n => n[this.valueField])).join(',');
        }
        else {
            this.dataListInstance.unSelectAll();
            this.selectedValues = '';
        }
        if (emit) {
            this.buildCondition();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkAllHandler($event) {
        this.checked = $event;
        this.chkall.nativeElement.indeterminate = false;
        this.checkAll(this.checked);
        this.cd.detectChanges();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onSelect($event) {
        this.updateSelectedValues($event);
        this.updateCheckboxState();
        this.buildCondition();
    }
    /**
     * @private
     * @return {?}
     */
    updateCheckboxState() {
        if (this.selectedValues === undefined) {
            return;
        }
        if (this.selectedValues.split(',').length === this.originalData.length) {
            this.checked = true;
            this.chkall.nativeElement.indeterminate = false;
        }
        else {
            this.checked = false;
            this.chkall.nativeElement.indeterminate = true;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onUnSelected($event) {
        this.updateSelectedValues($event, false);
        this.checked = false;
        this.chkall.nativeElement.indeterminate = !!this.selectedValues;
        this.buildCondition();
    }
    /**
     * @private
     * @return {?}
     */
    buildCondition() {
        /** @type {?} */
        const values = this.selectedValues.split(',');
        if (this.selectedValues) {
            if (values.length === this.originalData.length) {
                this.valueChange.emit(FilterConditionValue.All);
                return;
            }
            /** @type {?} */
            const condition = {
                operator1: FilterOperator.In,
                value1: values
            };
            this.valueChange.emit(condition);
        }
        else {
            // this.valueChange.emit({ operator1: FilterOperator.Equal, value1: [] });
            // 没有选择相当于此条件无效
            this.valueChange.emit(FilterConditionValue.All);
        }
    }
    /**
     * @param {?} $event
     * @param {?=} selected
     * @return {?}
     */
    updateSelectedValues($event, selected = true) {
        if ($event) {
            /** @type {?} */
            const val = $event.data[this.valueField];
            /** @type {?} */
            let valArr = this.selectedValues ? this.selectedValues.split(',') : [];
            if (selected) {
                if (valArr.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n == val)) === -1) {
                    valArr.push(val);
                }
            }
            else {
                valArr = valArr.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n != val));
            }
            this.selectedValues = valArr.join(',');
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onTextChange($event) {
        /** @type {?} */
        const val = $event.target[this.valueField];
        this.filterKeyWord = val;
        this.changeDataSource();
    }
    /**
     * @private
     * @return {?}
     */
    changeDataSource() {
        if (this.filterKeyWord) {
            this.data = this.originalData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return n[this.textField].indexOf(this.filterKeyWord) > -1;
            }));
        }
        else {
            this.data = cloneDeep(this.originalData);
        }
    }
    /**
     * @return {?}
     */
    restFilter() {
        this.filterKeyWord = '';
        this.changeDataSource();
        this.checkAll();
        this.checked = true;
        this.chkall.nativeElement.indeterminate = false;
        this.cd.detectChanges();
    }
}
FilterDatalistComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-datalist',
                template: `
    <ul class="list-group filter-condition">
        <li class="list-group-item border-0 border-b1" *ngIf="showFilter">
            <input class="form-control form-control-sm" [ngModel]="filterKeyWord"
                (input)="onTextChange($event)" type="text" >
        </li>
        <li class="list-group-item datalist border-0 border-b1">
            <farris-datalist
                #dl
                [data]="data"
                [idField]="idField"
                [height]="'auto'"
                [fit]="false"
                [multiSelect]="true"
                [selectedValues]="selectedValues"
                [valueField]="valueField"
                [textField]="textField"
                (selected)="onSelect($event)"
                (unSelected)="onUnSelected($event)">
            </farris-datalist>
        </li>
        <li class="list-group-item border-0" style="border-bottom: 1px solid #dde2eb;">
            <div class="d-flex">
                <div class="custom-control custom-checkbox" style="padding-left: 3px;">
                    <input id="filter-datalist-checkall" #chkall type="checkbox" class="custom-control-input" [ngModel]="checked" (ngModelChange)="checkAllHandler($event)">
                    <label class="custom-control-label" for="filter-datalist-checkall" >{{ 'datagrid.filter.checkAll' | locale }}</label>
                </div>
                <div class="ml-auto"><button type="button" class="btn btn-outline-primary" (click)="restFilter()">
                {{ 'datagrid.filter.reset' | locale }}</button></div>
            </div>
        </li>
    </ul>
    `,
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
FilterDatalistComponent.ctorParameters = () => [
    { type: Injector },
    { type: ChangeDetectorRef },
    { type: DatagridFilterRowService }
];
FilterDatalistComponent.propDecorators = {
    valueField: [{ type: Input }],
    textField: [{ type: Input }],
    idField: [{ type: Input }],
    selectedValues: [{ type: Input }],
    data: [{ type: Input }],
    showFilter: [{ type: Input }],
    filterKeyWord: [{ type: Input }],
    chkall: [{ type: ViewChild, args: ['chkall',] }],
    dataListInstance: [{ type: ViewChild, args: ['dl',] }],
    valueChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FilterDatalistComponent.prototype.valueField;
    /** @type {?} */
    FilterDatalistComponent.prototype.textField;
    /** @type {?} */
    FilterDatalistComponent.prototype.idField;
    /** @type {?} */
    FilterDatalistComponent.prototype.selectedValues;
    /** @type {?} */
    FilterDatalistComponent.prototype.data;
    /** @type {?} */
    FilterDatalistComponent.prototype.showFilter;
    /** @type {?} */
    FilterDatalistComponent.prototype.filterKeyWord;
    /** @type {?} */
    FilterDatalistComponent.prototype.chkall;
    /** @type {?} */
    FilterDatalistComponent.prototype.dataListInstance;
    /** @type {?} */
    FilterDatalistComponent.prototype.valueChange;
    /** @type {?} */
    FilterDatalistComponent.prototype.checked;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.originalData;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterDatalistComponent.prototype.dfrs;
}
//# sourceMappingURL=data:application/json;base64,