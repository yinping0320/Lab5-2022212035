/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, NgZone, ElementRef, Renderer2, Output, EventEmitter, Injector } from '@angular/core';
import { ColumnFilterType } from '@farris/ui-datagrid';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
import { CommonUtils, OverLayHiddenService } from '@farris/ui-common';
export class FilterRowPanelComponent {
    /**
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     * @param {?} dfrs
     * @param {?} inject
     */
    constructor(ngzone, el, render, dfrs, inject) {
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dfrs = dfrs;
        this.inject = inject;
        this.width = 240;
        this.height = 250;
        this.datatype = ColumnFilterType.string;
        this.conditionChange = new EventEmitter();
        this.panelHeightChange = new EventEmitter();
        this.gridInstance = null;
        this.enumSetting = {};
        this.condition = {
            operator1: 1,
            value1: '',
            relation: '',
            operator2: 1,
            value2: ''
        };
        this.documentClickHandle = null;
        this.ro = null;
        this.zone = null;
        this.zone = this.inject.get(NgZone);
        this.commonUtils = this.inject.get(CommonUtils, new CommonUtils());
        this.overlaySer = this.inject.get(OverLayHiddenService, new OverLayHiddenService());
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.render.listen(this.el.nativeElement, 'click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.stopPropagation();
                return false;
            }));
        }));
        this.initEnumSetting();
        // this.documentClickHandle = this.render.listen(document, 'click', (event) => {
        //     this.close(event);
        // });
        this.overlaySer.registerMouseEvent(this.el.nativeElement, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const tar = (/** @type {?} */ (e.target));
            if (tar && tar.closest('.overlay-container')) {
                return;
            }
            if (document.body.className.indexOf('modal-open') > -1) {
                return;
            }
            if (this.el.nativeElement.contains(e.target)) {
                return;
            }
            this.close(e);
        }));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.target) {
            this.resetPanelPosition();
            /** @type {?} */
            const panelDiv = this.el.nativeElement.querySelector('div');
            panelDiv.style.transition = 'top 0.2s ease 0.05s';
            /** @type {?} */
            const zindex = this.commonUtils.getFloatingLayerIndex();
            panelDiv.style.zIndex = zindex;
            /** @type {?} */
            const overlayEl = this.el.nativeElement.querySelector('.filter-panel-overlay');
            if (overlayEl) {
                overlayEl.style.zIndex = zindex;
                panelDiv.style.zIndex = zindex + 1;
            }
            // this.el.nativeElement.style.position = 'fixed';
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.overlaySer) {
            this.overlaySer.destory(this.el.nativeElement);
        }
    }
    /**
     * @private
     * @return {?}
     */
    resetPanelPosition() {
        /** @type {?} */
        const panelDiv = this.el.nativeElement.querySelector('div');
        /** @type {?} */
        const h = panelDiv.querySelector('.panel-content').clientHeight + 36;
        /** @type {?} */
        const rect = this.target.target.parentElement.getBoundingClientRect();
        /** @type {?} */
        const downAreaHeight = window['innerHeight'] - rect.top;
        if (downAreaHeight < h) {
            /** @type {?} */
            const top = window['innerHeight'] - h - 10;
            panelDiv.style.top = top + 'px';
        }
        else {
            panelDiv.style.top = rect.top + 'px';
        }
    }
    /**
     * @return {?}
     */
    onPanelHeightChanged() {
        this.resetPanelPosition();
        this.panelHeightChange.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    close(event) {
        event.stopPropagation();
        this.dfrs.closeFilterPanel();
    }
    /**
     * @param {?} condition
     * @return {?}
     */
    onValueChange(condition) {
        this.conditionChange.emit(condition);
    }
    /**
     * @private
     * @return {?}
     */
    initEnumSetting() {
        if (this.datatype > 5) {
            this.enumSetting = this.dfrs.getEnumOptions(this.column);
            /** @type {?} */
            const currentColumnCondition = (/** @type {?} */ (this.dfrs.columnConditions[this.column.field]));
            if (currentColumnCondition && currentColumnCondition.value1) {
                this.selectedValues = currentColumnCondition.value1.join(',');
            }
        }
    }
}
FilterRowPanelComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-row-panel',
                template: "<div class=\"f-datagrid-filter-panel d-flex flex-column\" style=\"position: fixed;\" [style.width.px]=\"width\"  (click)=\"$event.stopPropagation()\">\r\n    <div class=\"panel-header\">\r\n        <div (click)=\"close($event)\" class=\"panel-icon\" style=\"text-align: center; cursor: pointer;\">\r\n            <span class=\"f-icon f-icon-filter-sm\"></span>\r\n        </div> \r\n    </div>\r\n    <div class=\"panel-content flex-fill\">\r\n        <condition-editor *ngIf=\"datatype < 6\"\r\n            [datatype]=\"datatype\"\r\n            [condition]=\"condition\"\r\n            [operators]=\"operators\"\r\n            [filterOptions]=\"column.filter.options\"\r\n            (conditionChange)=\"onValueChange($event)\"\r\n            (panelHeightChange)=\"onPanelHeightChanged()\"></condition-editor>\r\n            \r\n\r\n        <filter-datalist *ngIf=\"datatype === 6 || datatype === 7\" \r\n            [data]=\"enumSetting?.data\" [valueField]=\"enumSetting?.valueField\"\r\n            [textField]=\"enumSetting?.textField\" [idField]=\"enumSetting?.valueField\"\r\n            [selectedValues]=\"selectedValues\"\r\n            (valueChange)=\"onValueChange($event)\"></filter-datalist>\r\n    </div>\r\n</div>\r\n\r\n<div class=\"filter-panel-overlay\" style=\"position: absolute;\r\nposition: absolute;\r\nwidth: 100%;\r\ntop: 0;\r\nheight: 100%;\r\nbackground: rgb(255, 255, 255);\r\nopacity: 0;\" (click)=\"close($event)\"></div>\r\n"
            }] }
];
/** @nocollapse */
FilterRowPanelComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DatagridFilterRowService },
    { type: Injector }
];
FilterRowPanelComponent.propDecorators = {
    width: [{ type: Input }],
    height: [{ type: Input }],
    column: [{ type: Input }],
    operators: [{ type: Input }],
    datatype: [{ type: Input }],
    conditionChange: [{ type: Output }],
    panelHeightChange: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    FilterRowPanelComponent.prototype.width;
    /** @type {?} */
    FilterRowPanelComponent.prototype.height;
    /** @type {?} */
    FilterRowPanelComponent.prototype.column;
    /** @type {?} */
    FilterRowPanelComponent.prototype.operators;
    /** @type {?} */
    FilterRowPanelComponent.prototype.datatype;
    /** @type {?} */
    FilterRowPanelComponent.prototype.conditionChange;
    /** @type {?} */
    FilterRowPanelComponent.prototype.panelHeightChange;
    /** @type {?} */
    FilterRowPanelComponent.prototype.gridInstance;
    /** @type {?} */
    FilterRowPanelComponent.prototype.enumSetting;
    /** @type {?} */
    FilterRowPanelComponent.prototype.selectedValues;
    /** @type {?} */
    FilterRowPanelComponent.prototype.condition;
    /** @type {?} */
    FilterRowPanelComponent.prototype.documentClickHandle;
    /** @type {?} */
    FilterRowPanelComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.commonUtils;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.overlaySer;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.render;
    /** @type {?} */
    FilterRowPanelComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterRowPanelComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,