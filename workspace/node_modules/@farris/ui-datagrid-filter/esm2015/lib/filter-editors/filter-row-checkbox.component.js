/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { FilterOperator, FilterConditionValue } from './../operations/operators';
import { Component, ViewChild, ElementRef, ChangeDetectorRef, Injector } from '@angular/core';
import { FilterRowEditorComponent } from './filter-row-editor.component';
import { DatagridFilterRowService } from '../datagrid-filter-row.service';
// <input [checked]="chekced" id="{{ id }}" type="checkbox" #chk >
export class FilterCheckboxComponent extends FilterRowEditorComponent {
    /**
     * @param {?} dfrs
     * @param {?} cd
     * @param {?} inject
     */
    constructor(dfrs, cd, inject) {
        super();
        this.dfrs = dfrs;
        this.cd = cd;
        this.inject = inject;
        this.i = 0;
        this.checked = false;
        this.dfrs.removeField.subscribe((/**
         * @param {?} f
         * @return {?}
         */
        f => {
            if (f === this.column.field) {
                this.clearValue();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        super.ngOnInit();
        this.chk.nativeElement.indeterminate = true;
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    checkedChange($event) {
        this.dfrs.closeFilterPanel();
        if (this.i > 0) {
            this.checked = !this.checked;
        }
        this.i += 1;
        if (this.i > 2) {
            this.i = 0;
            this.chk.nativeElement.indeterminate = true;
        }
        else {
            this.chk.nativeElement.indeterminate = false;
        }
        if (this.i === 0) {
            this.dfrs.updateColumnConditions(this.column.field, FilterConditionValue.All);
            this.checked = false;
        }
        else {
            /** @type {?} */
            const condition = {
                operator1: FilterOperator.Equal,
                value1: this.checked
            };
            this.dfrs.updateColumnConditions(this.column.field, condition);
        }
        this.cd.detectChanges();
        $event.stopPropagation();
    }
    /**
     * @return {?}
     */
    clearValue() {
        this.checked = false;
        this.chk.nativeElement.indeterminate = true;
        this.cd.detectChanges();
    }
    /**
     * @param {?} filterCondition
     * @return {?}
     */
    initFilter(filterCondition) {
        if (filterCondition && Object.keys(filterCondition).length) {
            this.checked = filterCondition.value1;
            this.chk.nativeElement.indeterminate = false;
            this.i = this.checked ? 2 : 1;
        }
        else {
            this.checked = false;
            this.chk.nativeElement.indeterminate = true;
            this.i = 0;
        }
        this.dfrs._updateColumnConditions(this.column.field, filterCondition);
        this.cd.detectChanges();
    }
}
FilterCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'filter-checkbox',
                template: `
    <div class="custom-control custom-checkbox f-checkradio-single">
        <input [name]="column.field" [checked]="checked" type="checkbox" #chk class="custom-control-input">
        <label class="custom-control-label" (click)="checkedChange($event)"></label>
    </div>
    `
            }] }
];
/** @nocollapse */
FilterCheckboxComponent.ctorParameters = () => [
    { type: DatagridFilterRowService },
    { type: ChangeDetectorRef },
    { type: Injector }
];
FilterCheckboxComponent.propDecorators = {
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    FilterCheckboxComponent.prototype.i;
    /** @type {?} */
    FilterCheckboxComponent.prototype.checked;
    /** @type {?} */
    FilterCheckboxComponent.prototype.chk;
    /** @type {?} */
    FilterCheckboxComponent.prototype.dfrs;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    FilterCheckboxComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLXJvdy1jaGVja2JveC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LWNoZWNrYm94LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFtQixjQUFjLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRyxPQUFPLEVBQUUsU0FBUyxFQUFVLFNBQVMsRUFBRSxVQUFVLEVBQVMsaUJBQWlCLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdHLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQ3pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDOztBQWlCMUUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLHdCQUF3Qjs7Ozs7O0lBSWpFLFlBQ1csSUFBOEIsRUFDN0IsRUFBcUIsRUFBVSxNQUFnQjtRQUN2RCxLQUFLLEVBQUUsQ0FBQztRQUZELFNBQUksR0FBSixJQUFJLENBQTBCO1FBQzdCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVTtRQUwzRCxNQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ04sWUFBTyxHQUFHLEtBQUssQ0FBQztRQU9aLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVM7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtnQkFDekIsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO2FBQ3JCO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNKLEtBQUssQ0FBQyxRQUFRLEVBQUUsQ0FBQztRQUNqQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE1BQWtCO1FBQzVCLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztRQUM3QixJQUFJLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ1osSUFBSSxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDaEM7UUFDRCxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7WUFDWixJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNYLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7U0FDL0M7YUFBTTtZQUNILElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7U0FDaEQ7UUFFRCxJQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ2QsSUFBSSxDQUFDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxvQkFBb0IsQ0FBQyxHQUFHLENBQUUsQ0FBQztZQUMvRSxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztTQUN4QjthQUFNOztrQkFDRyxTQUFTLEdBQW9CO2dCQUMvQixTQUFTLEVBQUUsY0FBYyxDQUFDLEtBQUs7Z0JBQy9CLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTzthQUN2QjtZQUNELElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsU0FBUyxDQUFFLENBQUM7U0FDbkU7UUFDRCxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQ3hCLE1BQU0sQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsVUFBVTtRQUNOLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDNUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxlQUFvQjtRQUMzQixJQUFJLGVBQWUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtZQUN4RCxJQUFJLENBQUMsT0FBTyxHQUFHLGVBQWUsQ0FBQyxNQUFNLENBQUM7WUFDdEMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQztZQUM3QyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDO1lBQzVDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2Q7UUFDRCxJQUFJLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1FBQ3RFLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7O1lBNUVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsaUJBQWlCO2dCQUMzQixRQUFRLEVBQUU7Ozs7O0tBS1Q7YUFFSjs7OztZQWhCUSx3QkFBd0I7WUFGeUIsaUJBQWlCO1lBQUUsUUFBUTs7O2tCQXNCaEYsU0FBUyxTQUFDLEtBQUs7Ozs7SUFGaEIsb0NBQU07O0lBQ04sMENBQWdCOztJQUNoQixzQ0FBa0M7O0lBRTlCLHVDQUFxQzs7Ozs7SUFDckMscUNBQTZCOzs7OztJQUFFLHlDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgRmlsdGVyT3BlcmF0b3IsIEZpbHRlckNvbmRpdGlvblZhbHVlIH0gZnJvbSAnLi8uLi9vcGVyYXRpb25zL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBWaWV3Q2hpbGQsIEVsZW1lbnRSZWYsIElucHV0LCBDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0b3IgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRmlsdGVyUm93RWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItcm93LWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZpbHRlclJvd1NlcnZpY2UgfSBmcm9tICcuLi9kYXRhZ3JpZC1maWx0ZXItcm93LnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGaWx0ZXJSb3dDb21wb25lbnQgfSBmcm9tICcuLi9kYXRhZ3JpZC1maWx0ZXItcm93LmNvbXBvbmVudCc7XHJcblxyXG5cclxuXHJcbi8vIDxpbnB1dCBbY2hlY2tlZF09XCJjaGVrY2VkXCIgaWQ9XCJ7eyBpZCB9fVwiIHR5cGU9XCJjaGVja2JveFwiICNjaGsgPlxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgICBzZWxlY3RvcjogJ2ZpbHRlci1jaGVja2JveCcsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCBmLWNoZWNrcmFkaW8tc2luZ2xlXCI+XHJcbiAgICAgICAgPGlucHV0IFtuYW1lXT1cImNvbHVtbi5maWVsZFwiIFtjaGVja2VkXT1cImNoZWNrZWRcIiB0eXBlPVwiY2hlY2tib3hcIiAjY2hrIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtaW5wdXRcIj5cclxuICAgICAgICA8bGFiZWwgY2xhc3M9XCJjdXN0b20tY29udHJvbC1sYWJlbFwiIChjbGljayk9XCJjaGVja2VkQ2hhbmdlKCRldmVudClcIj48L2xhYmVsPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgXHJcblxyXG59KVxyXG5leHBvcnQgY2xhc3MgRmlsdGVyQ2hlY2tib3hDb21wb25lbnQgZXh0ZW5kcyBGaWx0ZXJSb3dFZGl0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgaSA9IDA7XHJcbiAgICBjaGVja2VkID0gZmFsc2U7XHJcbiAgICBAVmlld0NoaWxkKCdjaGsnKSBjaGs6IEVsZW1lbnRSZWY7XHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBwdWJsaWMgZGZyczogRGF0YWdyaWRGaWx0ZXJSb3dTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG5cclxuICAgICAgICB0aGlzLmRmcnMucmVtb3ZlRmllbGQuc3Vic2NyaWJlKGYgPT4ge1xyXG4gICAgICAgICAgICBpZiAoZiA9PT0gdGhpcy5jb2x1bW4uZmllbGQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJWYWx1ZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgc3VwZXIubmdPbkluaXQoKTtcclxuICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIGNoZWNrZWRDaGFuZ2UoJGV2ZW50OiBNb3VzZUV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5kZnJzLmNsb3NlRmlsdGVyUGFuZWwoKTtcclxuICAgICAgICBpZiAodGhpcy5pID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSAhdGhpcy5jaGVja2VkO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmkgKz0gMTtcclxuICAgICAgICBpZiAodGhpcy5pID4gMikge1xyXG4gICAgICAgICAgICB0aGlzLmkgPSAwO1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaSA9PT0gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmRmcnMudXBkYXRlQ29sdW1uQ29uZGl0aW9ucyh0aGlzLmNvbHVtbi5maWVsZCwgRmlsdGVyQ29uZGl0aW9uVmFsdWUuQWxsICk7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbjogRmlsdGVyQ29uZGl0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgb3BlcmF0b3IxOiBGaWx0ZXJPcGVyYXRvci5FcXVhbCxcclxuICAgICAgICAgICAgICAgIHZhbHVlMTogdGhpcy5jaGVja2VkXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHRoaXMuZGZycy51cGRhdGVDb2x1bW5Db25kaXRpb25zKHRoaXMuY29sdW1uLmZpZWxkLCBjb25kaXRpb24gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jZC5kZXRlY3RDaGFuZ2VzKCk7XHJcbiAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyVmFsdWUoKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jaGsubmF0aXZlRWxlbWVudC5pbmRldGVybWluYXRlID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0RmlsdGVyKGZpbHRlckNvbmRpdGlvbjogYW55KSB7XHJcbiAgICAgICAgaWYgKGZpbHRlckNvbmRpdGlvbiAmJiBPYmplY3Qua2V5cyhmaWx0ZXJDb25kaXRpb24pLmxlbmd0aCkge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWQgPSBmaWx0ZXJDb25kaXRpb24udmFsdWUxO1xyXG4gICAgICAgICAgICB0aGlzLmNoay5uYXRpdmVFbGVtZW50LmluZGV0ZXJtaW5hdGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgdGhpcy5pID0gdGhpcy5jaGVja2VkID8gMiA6IDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHRoaXMuY2hrLm5hdGl2ZUVsZW1lbnQuaW5kZXRlcm1pbmF0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMuaSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuZGZycy5fdXBkYXRlQ29sdW1uQ29uZGl0aW9ucyh0aGlzLmNvbHVtbi5maWVsZCwgZmlsdGVyQ29uZGl0aW9uKTtcclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxufVxyXG4iXX0=