/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { TimePickerModule } from '@farris/ui-time-picker';
import { LocaleModule } from '@farris/ui-locale';
import { DatagridModule, GRID_FILTER_ROW } from '@farris/ui-datagrid';
import { FarrisDatePickerModule } from '@farris/ui-datepicker';
import { NumberSpinnerModule } from '@farris/ui-number-spinner';
import { DatalistModule } from '@farris/ui-datalist';
import { FarrisFormsModule } from '@farris/ui-forms';
import { FarrisCommonModule } from '@farris/ui-common';
import { FilterRowComponent } from './datagrid-filter-row.component';
import { FilterCellEditorDirective } from './datagrid-filter-cell-editor.directive';
import { FilterTextboxComponent } from './filter-editors/filter-row-textbox.component';
import { FilterRowPanelComponent } from './filter-editors/filter-row-panel.component';
import { FilterCheckboxComponent } from './filter-editors/filter-row-checkbox.component';
import { ConditionEditorComponent } from './filter-editors/condition-editor.component';
import { FilterDatalistComponent } from './filter-editors/filter-datalist.component';
import { FilterRowEditorComponent } from './filter-editors/filter-row-editor.component';
import { FilterSelectComponent } from './filter-editors/filter-row-select.component';
/** @type {?} */
export const FilterRowProvider = { provide: GRID_FILTER_ROW, useValue: FilterRowComponent };
export class DatagridFilterRowModule {
    /**
     * @return {?}
     */
    static forRoot() {
        return {
            ngModule: DatagridFilterRowModule,
            providers: [
                { provide: GRID_FILTER_ROW, useValue: FilterRowComponent }
            ]
        };
    }
}
DatagridFilterRowModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FilterRowComponent,
                    FilterCellEditorDirective,
                    FilterTextboxComponent,
                    FilterCheckboxComponent,
                    FilterRowPanelComponent,
                    FilterDatalistComponent,
                    FilterRowEditorComponent,
                    FilterSelectComponent,
                    ConditionEditorComponent
                ],
                imports: [
                    CommonModule,
                    FormsModule,
                    ReactiveFormsModule,
                    DatagridModule,
                    FarrisDatePickerModule,
                    NumberSpinnerModule,
                    DatalistModule,
                    TimePickerModule,
                    LocaleModule.forRoot(),
                    FarrisFormsModule,
                    FarrisCommonModule
                ],
                entryComponents: [
                    FilterRowComponent,
                    FilterTextboxComponent,
                    FilterCheckboxComponent,
                    ConditionEditorComponent,
                    FilterDatalistComponent,
                    FilterRowPanelComponent,
                    FilterRowEditorComponent,
                    FilterSelectComponent
                ],
                exports: [
                    FilterRowComponent
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZmlsdGVyLXJvdy5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLWZpbHRlci8iLCJzb3VyY2VzIjpbImxpYi9kYXRhZ3JpZC1maWx0ZXItcm93Lm1vZHVsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2xFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDckQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFHdkQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUNBQWlDLENBQUM7QUFDckUsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDcEYsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sK0NBQStDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdEYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFDekYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sNkNBQTZDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDckYsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sOENBQThDLENBQUM7QUFDeEYsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sOENBQThDLENBQUM7O0FBR3JGLE1BQU0sT0FBTyxpQkFBaUIsR0FBRyxFQUFFLE9BQU8sRUFBRSxlQUFlLEVBQUUsUUFBUSxFQUFFLGtCQUFrQixFQUFHO0FBeUM1RixNQUFNLE9BQU8sdUJBQXVCOzs7O0lBQ2hDLE1BQU0sQ0FBQyxPQUFPO1FBQ1YsT0FBTztZQUNILFFBQVEsRUFBRSx1QkFBdUI7WUFDakMsU0FBUyxFQUFFO2dCQUNQLEVBQUUsT0FBTyxFQUFFLGVBQWUsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUc7YUFDOUQ7U0FDSixDQUFDO0lBQ04sQ0FBQzs7O1lBL0NKLFFBQVEsU0FBQztnQkFDTixZQUFZLEVBQUU7b0JBQ1Ysa0JBQWtCO29CQUNsQix5QkFBeUI7b0JBQ3pCLHNCQUFzQjtvQkFDdEIsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLHVCQUF1QjtvQkFDdkIsd0JBQXdCO29CQUN4QixxQkFBcUI7b0JBQ3JCLHdCQUF3QjtpQkFDM0I7Z0JBQ0QsT0FBTyxFQUFFO29CQUNMLFlBQVk7b0JBQ1osV0FBVztvQkFDWCxtQkFBbUI7b0JBQ25CLGNBQWM7b0JBQ2Qsc0JBQXNCO29CQUN0QixtQkFBbUI7b0JBQ25CLGNBQWM7b0JBQ2QsZ0JBQWdCO29CQUNoQixZQUFZLENBQUMsT0FBTyxFQUFFO29CQUN0QixpQkFBaUI7b0JBQ2pCLGtCQUFrQjtpQkFDckI7Z0JBQ0QsZUFBZSxFQUFFO29CQUNiLGtCQUFrQjtvQkFDbEIsc0JBQXNCO29CQUN0Qix1QkFBdUI7b0JBQ3ZCLHdCQUF3QjtvQkFDeEIsdUJBQXVCO29CQUN2Qix1QkFBdUI7b0JBQ3ZCLHdCQUF3QjtvQkFDeEIscUJBQXFCO2lCQUN4QjtnQkFDRCxPQUFPLEVBQUU7b0JBQ0wsa0JBQWtCO2lCQUNyQjthQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUsIFByb3ZpZGVyLCBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEZvcm1zTW9kdWxlLCBSZWFjdGl2ZUZvcm1zTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBDb21tb25Nb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5cclxuaW1wb3J0IHsgVGltZVBpY2tlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktdGltZS1waWNrZXInO1xyXG5pbXBvcnQgeyBMb2NhbGVNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWxvY2FsZSc7XHJcbmltcG9ydCB7IERhdGFncmlkTW9kdWxlLCBHUklEX0ZJTFRFUl9ST1cgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgRmFycmlzRGF0ZVBpY2tlck1vZHVsZSB9IGZyb20gJ0BmYXJyaXMvdWktZGF0ZXBpY2tlcic7XHJcbmltcG9ydCB7IE51bWJlclNwaW5uZXJNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLW51bWJlci1zcGlubmVyJztcclxuaW1wb3J0IHsgRGF0YWxpc3RNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFsaXN0JztcclxuaW1wb3J0IHsgRmFycmlzRm9ybXNNb2R1bGUgfSBmcm9tICdAZmFycmlzL3VpLWZvcm1zJztcclxuaW1wb3J0IHsgRmFycmlzQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5cclxuXHJcbmltcG9ydCB7IEZpbHRlclJvd0NvbXBvbmVudCB9IGZyb20gJy4vZGF0YWdyaWQtZmlsdGVyLXJvdy5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJDZWxsRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnLi9kYXRhZ3JpZC1maWx0ZXItY2VsbC1lZGl0b3IuZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgRmlsdGVyVGV4dGJveENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy10ZXh0Ym94LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlclJvd1BhbmVsQ29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LXBhbmVsLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlckNoZWNrYm94Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LWNoZWNrYm94LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbmRpdGlvbkVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvY29uZGl0aW9uLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBGaWx0ZXJEYXRhbGlzdENvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLWRhdGFsaXN0LmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IEZpbHRlclJvd0VkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vZmlsdGVyLWVkaXRvcnMvZmlsdGVyLXJvdy1lZGl0b3IuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRmlsdGVyU2VsZWN0Q29tcG9uZW50IH0gZnJvbSAnLi9maWx0ZXItZWRpdG9ycy9maWx0ZXItcm93LXNlbGVjdC5jb21wb25lbnQnO1xyXG5cclxuXHJcbmV4cG9ydCBjb25zdCBGaWx0ZXJSb3dQcm92aWRlciA9IHsgcHJvdmlkZTogR1JJRF9GSUxURVJfUk9XLCB1c2VWYWx1ZTogRmlsdGVyUm93Q29tcG9uZW50ICB9O1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogW1xyXG4gICAgICAgIEZpbHRlclJvd0NvbXBvbmVudCxcclxuICAgICAgICBGaWx0ZXJDZWxsRWRpdG9yRGlyZWN0aXZlLFxyXG4gICAgICAgIEZpbHRlclRleHRib3hDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyQ2hlY2tib3hDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyUm93UGFuZWxDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyRGF0YWxpc3RDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyUm93RWRpdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclNlbGVjdENvbXBvbmVudCxcclxuICAgICAgICBDb25kaXRpb25FZGl0b3JDb21wb25lbnRcclxuICAgIF0sXHJcbiAgICBpbXBvcnRzOiBbXHJcbiAgICAgICAgQ29tbW9uTW9kdWxlLFxyXG4gICAgICAgIEZvcm1zTW9kdWxlLFxyXG4gICAgICAgIFJlYWN0aXZlRm9ybXNNb2R1bGUsXHJcbiAgICAgICAgRGF0YWdyaWRNb2R1bGUsXHJcbiAgICAgICAgRmFycmlzRGF0ZVBpY2tlck1vZHVsZSxcclxuICAgICAgICBOdW1iZXJTcGlubmVyTW9kdWxlLFxyXG4gICAgICAgIERhdGFsaXN0TW9kdWxlLFxyXG4gICAgICAgIFRpbWVQaWNrZXJNb2R1bGUsXHJcbiAgICAgICAgTG9jYWxlTW9kdWxlLmZvclJvb3QoKSxcclxuICAgICAgICBGYXJyaXNGb3Jtc01vZHVsZSxcclxuICAgICAgICBGYXJyaXNDb21tb25Nb2R1bGVcclxuICAgIF0sXHJcbiAgICBlbnRyeUNvbXBvbmVudHM6IFtcclxuICAgICAgICBGaWx0ZXJSb3dDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyVGV4dGJveENvbXBvbmVudCxcclxuICAgICAgICBGaWx0ZXJDaGVja2JveENvbXBvbmVudCxcclxuICAgICAgICBDb25kaXRpb25FZGl0b3JDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyRGF0YWxpc3RDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyUm93UGFuZWxDb21wb25lbnQsXHJcbiAgICAgICAgRmlsdGVyUm93RWRpdG9yQ29tcG9uZW50LFxyXG4gICAgICAgIEZpbHRlclNlbGVjdENvbXBvbmVudFxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBGaWx0ZXJSb3dDb21wb25lbnRcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkRmlsdGVyUm93TW9kdWxlIHtcclxuICAgIHN0YXRpYyBmb3JSb290KCk6IE1vZHVsZVdpdGhQcm92aWRlcnMge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBEYXRhZ3JpZEZpbHRlclJvd01vZHVsZSxcclxuICAgICAgICAgICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEdSSURfRklMVEVSX1JPVywgdXNlVmFsdWU6IEZpbHRlclJvd0NvbXBvbmVudCAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxufVxyXG4iXX0=