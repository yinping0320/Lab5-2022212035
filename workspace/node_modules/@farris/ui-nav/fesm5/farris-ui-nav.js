import { of } from 'rxjs';
import { Injectable, NgModule, Component, Input, Output, EventEmitter, defineInjectable } from '@angular/core';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NavService = /** @class */ (function () {
    function NavService() {
    }
    NavService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    NavService.ctorParameters = function () { return []; };
    /** @nocollapse */ NavService.ngInjectableDef = defineInjectable({ factory: function NavService_Factory() { return new NavService(); }, token: NavService, providedIn: "root" });
    return NavService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NavComponent = /** @class */ (function () {
    function NavComponent() {
        /* 是否水平分布 */
        // @Input() horizontal: boolean = true;
        this._horizontal = true;
        this._activeNavId = '';
        this.maxNum = 99;
        this.navChange = new EventEmitter();
    }
    Object.defineProperty(NavComponent.prototype, "horizontal", {
        get: /**
         * @return {?}
         */
        function () {
            return this._horizontal;
        },
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this._horizontal = val;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavComponent.prototype, "navData", {
        get: /**
         * @return {?}
         */
        function () {
            return this._navData;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this._navData = data;
            this.initNavData();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NavComponent.prototype, "activeNavId", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeNavId;
        },
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            this._activeNavId = data;
            if (this._activeNavId && this.navData && this.navData.length) {
                /** @type {?} */
                var nav = this.navData.find((/**
                 * @param {?} nav
                 * @return {?}
                 */
                function (nav) {
                    return nav['id'] === _this._activeNavId;
                }));
                if (nav) {
                    this.navChange.emit(nav);
                }
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    NavComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initEvents();
    };
    /**
     * @return {?}
     */
    NavComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.navPickingSubscription) {
            this.navPickingSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    NavComponent.prototype.initNavData = /**
     * @return {?}
     */
    function () {
        if (this.navData && this.navData.length) {
            if (!this._activeNavId) {
                /** @type {?} */
                var activeNav = this.navData.find((/**
                 * @param {?} nav
                 * @return {?}
                 */
                function (nav) {
                    return !nav.disable;
                }));
                if (activeNav) {
                    this._activeNavId = activeNav['id'];
                }
            }
        }
    };
    /**
     * @param {?} nav
     * @return {?}
     */
    NavComponent.prototype.navClick = /**
     * @param {?} nav
     * @return {?}
     */
    function (nav) {
        var _this = this;
        if (nav.disable || nav.id === this._activeNavId) {
            return;
        }
        else {
            this.navPickingSubscription = this.navPicking().subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val) {
                    _this.navChange.emit(nav);
                    setTimeout((/**
                     * @return {?}
                     */
                    function () { return _this._activeNavId = nav.id; }));
                }
            }));
        }
    };
    /**
     * @return {?}
     */
    NavComponent.prototype.initEvents = /**
     * @return {?}
     */
    function () {
        if (!this.navPicking) {
            this.navPicking = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
    };
    NavComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-nav',
                    template: "<div class=\"farris-nav\" [class.farris-nav-vertical]=\"!horizontal\">\r\n    <div class=\"farris-nav-item\" *ngFor=\"let item of navData\" \r\n    [class.active]=\"item.id === activeNavId\" \r\n    [class.disabled]=\"item.disable\"\r\n    (click)=\"navClick(item)\"\r\n    >\r\n        <div class=\"farris-nav-item-link\">\r\n            <span class=\"farris-nav-item-link-text\">\r\n                {{item.text}}\r\n                <div class=\"farris-nav-item-tag\" *ngIf=\"item.num\">\r\n                    <ng-container *ngIf=\"item.num <= maxNum; else elseTemplate\">\r\n                        <span class=\"tag-text\">{{item.num}}</span>\r\n                    </ng-container>\r\n                    <ng-template #elseTemplate>\r\n                        <span class=\"tag-text\">{{maxNum}}+</span>\r\n                    </ng-template>\r\n                </div>\r\n            </span>\r\n        </div>\r\n    </div>\r\n</div>",
                    styles: [".farris-nav{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;border-bottom:1px solid #e9e9e9;overflow:hidden}.farris-nav-item{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.farris-nav-item-link{padding:.75rem 1rem;cursor:pointer}.farris-nav-item-link-text{position:relative;font-size:1rem;font-weight:400}.farris-nav-item-tag{position:absolute;right:-.75rem;top:calc(10px - 100%);padding:0 .375rem;color:#fff;font-size:.75rem;line-height:1.125rem;border-radius:1.125rem}.farris-nav.farris-nav-vertical{-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;-webkit-box-align:start;align-items:flex-start}.farris-nav.farris-nav-vertical .farris-nav-item{width:100%}"]
                }] }
    ];
    /** @nocollapse */
    NavComponent.ctorParameters = function () { return []; };
    NavComponent.propDecorators = {
        horizontal: [{ type: Input }],
        navData: [{ type: Input }],
        activeNavId: [{ type: Input }],
        navPicking: [{ type: Input }],
        maxNum: [{ type: Input }],
        navChange: [{ type: Output }]
    };
    return NavComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NavModule = /** @class */ (function () {
    function NavModule() {
    }
    NavModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NavComponent],
                    imports: [
                        CommonModule
                    ],
                    exports: [NavComponent]
                },] }
    ];
    return NavModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NavService, NavComponent, NavModule };

//# sourceMappingURL=farris-ui-nav.js.map