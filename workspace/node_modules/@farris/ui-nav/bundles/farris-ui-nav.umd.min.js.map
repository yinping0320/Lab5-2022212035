{"version":3,"sources":["ng://@farris/ui-nav/lib/nav.service.ts","ng://@farris/ui-nav/lib/nav.component.ts","ng://@farris/ui-nav/lib/nav.module.ts"],"names":["NavService","Injectable","args","providedIn","NavComponent","Object","defineProperty","prototype","this","_horizontal","val","_navData","data","initNavData","_activeNavId","_this","navData","length","nav","find","navChange","emit","ngOnInit","initEvents","ngOnDestroy","navPickingSubscription","unsubscribe","activeNav","disable","navClick","id","navPicking","subscribe","setTimeout","of","Component","selector","template","Input","Output","maxNum","EventEmitter","NavModule","NgModule","declarations","imports","CommonModule","exports"],"mappings":"4XAAA,IAAAA,uBAECC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAH,KCPF,IAAAI,GAqBEC,OAAAC,eACIF,EAAAG,UAAA,aAAU,KAGd,WACE,OAAOC,KAAKC,iBALd,SACeC,GACbF,KAAKC,YAAcC,mCAQrBL,OAAAC,eACIF,EAAAG,UAAA,UAAO,KADX,WAEE,OAAOC,KAAKG,cAEd,SAAYC,GACVJ,KAAKG,SAAWC,EAChBJ,KAAKK,+CAGPR,OAAAC,eACIF,EAAAG,UAAA,cAAW,KADf,WAEE,OAAOC,KAAKM,kBAEd,SAAgBF,GAAhB,IAAAG,EAAAP,KAEE,GADAA,KAAKM,aAAeF,EACjBJ,KAAKM,cAAgBN,KAAKQ,SAAWR,KAAKQ,QAAQC,OAAO,KACpDC,EAAMV,KAAKQ,QAAQG,KAAI,SAACD,GAC5B,OAAOA,EAAQ,KAAMH,EAAKD,eAEzBI,GACDV,KAAKY,UAAUC,KAAKH,qCAc1Bd,EAAAG,UAAAe,SAAA,WACEd,KAAKe,cAEPnB,EAAAG,UAAAiB,YAAA,WACKhB,KAAKiB,wBACNjB,KAAKiB,uBAAuBC,eAIhCtB,EAAAG,UAAAM,YAAA,WACE,GAAGL,KAAKQ,SAAWR,KAAKQ,QAAQC,SAC1BT,KAAKM,aAAa,KACda,EAAYnB,KAAKQ,QAAQG,KAAI,SAACD,GAClC,OAAQA,EAAIU,UAEXD,IACDnB,KAAKM,aAAea,EAAc,MAK1CvB,EAAAG,UAAAsB,SAAA,SAASX,GAAT,IAAAH,EAAAP,KACKU,EAAIU,SAAWV,EAAIY,KAAOtB,KAAKM,eAIhCN,KAAKiB,uBAAyBjB,KAAKuB,aAAaC,UAAS,SAAEtB,GACpDA,IACDK,EAAKK,UAAUC,KAAKH,GACpBe,WAAU,WAAO,OAAAlB,EAAKD,aAAeI,EAAIY,UAKnD1B,EAAAG,UAAAgB,WAAA,WACOf,KAAKuB,aACNvB,KAAKuB,WAAU,WAAS,OAAAG,EAAAA,IAAG,0BA3FlCC,EAAAA,UAASjC,KAAA,CAAC,CACTkC,SAAU,aACVC,SAAA,+wDASCC,EAAAA,uBAUAA,EAAAA,2BASAA,EAAAA,0BAgBAA,EAAAA,sBAGAA,EAAAA,yBAEAC,EAAAA,UA4CHnC,GA1CE,SAAAA,IA3CAI,KAAAC,aAAsB,EAmBtBD,KAAAM,aAAsB,GAoBbN,KAAAgC,OAAgB,GAEfhC,KAAAY,UAAY,IAAIqB,EAAAA,aC7D5B,IAAAC,uBAICC,EAAAA,SAAQzC,KAAA,CAAC,CACR0C,aAAc,CAACxC,GACfyC,QAAS,CACPC,EAAAA,cAEFC,QAAS,CAAC3C,OAEasC,GAPzB,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class NavService {\r\n\r\n  constructor() { }\r\n}\r\n","import { Component, OnInit, Input, Output, EventEmitter, OnDestroy } from '@angular/core';\r\nimport { Observable, Subscription, of } from 'rxjs';\r\n\r\ninterface navItem {\r\n  id:string,\r\n  text:string,\r\n  num?:number,\r\n  disable?:boolean\r\n}\r\n\r\n@Component({\r\n  selector: 'farris-nav',\r\n  templateUrl: './nav.component.html',\r\n  styleUrls: ['./nav.component.scss'],\r\n})\r\nexport class NavComponent implements OnInit, OnDestroy {\r\n\r\n  /* æ¯å¦æ°´å¹³åå¸ */\r\n  // @Input() horizontal: boolean = true;\r\n\r\n  _horizontal:boolean = true;\r\n  @Input()\r\n  set horizontal(val) {\r\n    this._horizontal = val;\r\n  }\r\n  get horizontal() {\r\n    return this._horizontal;\r\n  }\r\n\r\n  //å¯¼èªæ°æ®\r\n  _navData:navItem[]\r\n  @Input()\r\n  get navData(): Array<navItem> {\r\n    return this._navData;\r\n  }\r\n  set navData(data: Array<navItem>) {\r\n    this._navData = data;\r\n    this.initNavData();\r\n  }\r\n  _activeNavId:string = ''\r\n  @Input()\r\n  get activeNavId():string {\r\n    return this._activeNavId;\r\n  }\r\n  set activeNavId(data:string) {\r\n    this._activeNavId = data;\r\n    if(this._activeNavId && this.navData && this.navData.length){\r\n      const nav = this.navData.find(nav => {\r\n        return nav['id'] === this._activeNavId;\r\n      });\r\n      if(nav){\r\n        this.navChange.emit(nav);\r\n      }\r\n    }\r\n  }\r\n  /** navåæ¢åäºä»¶ */\r\n  @Input() navPicking: (emptyObj?: {}) => Observable<any>;\r\n  navPickingSubscription: Subscription;\r\n\r\n  @Input() maxNum:number = 99;\r\n\r\n  @Output() navChange = new EventEmitter();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n    this.initEvents();\r\n  }\r\n  ngOnDestroy() {\r\n    if(this.navPickingSubscription){\r\n      this.navPickingSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  initNavData(){\r\n    if(this.navData && this.navData.length){\r\n      if(!this._activeNavId){\r\n        const activeNav = this.navData.find(nav=>{\r\n          return !nav.disable;\r\n        });\r\n        if(activeNav){\r\n          this._activeNavId = activeNav['id'];\r\n        }\r\n      }\r\n    }\r\n  }\r\n  navClick(nav){\r\n    if(nav.disable || nav.id === this._activeNavId){\r\n      return\r\n    }\r\n    else{\r\n      this.navPickingSubscription = this.navPicking().subscribe((val) => {\r\n          if(val){\r\n            this.navChange.emit(nav);\r\n            setTimeout(() => this._activeNavId = nav.id);\r\n          }\r\n      });\r\n    }\r\n  }\r\n  initEvents() {\r\n    if (!this.navPicking) {\r\n        this.navPicking = () => of(true);\r\n    }\r\n  }\r\n\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NavComponent } from './nav.component';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@NgModule({\r\n  declarations: [NavComponent],\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  exports: [NavComponent]\r\n})\r\nexport class NavModule { }\r\n"]}