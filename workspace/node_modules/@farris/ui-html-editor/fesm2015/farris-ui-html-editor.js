import { isPlatformServer, DOCUMENT } from '@angular/common';
import { DomSanitizer } from '@angular/platform-browser';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { Convert2HtmlEditorToolbars } from '@farris/ui-common';
import Quill from 'quill';
import { InjectionToken, Component, ElementRef, EventEmitter, forwardRef, Inject, Input, NgZone, Output, PLATFORM_ID, Renderer2, SecurityContext, ViewEncapsulation, HostBinding, Optional, Injector, NgModule } from '@angular/core';
import { NotifyService, NotifyModule } from '@farris/ui-notify';
import { LocaleService, LocaleModule } from '@farris/ui-locale';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const defaultModules = {
    toolbar: [
        // ['bold', 'italic', 'underline', 'strike'], // toggled buttons
        ['bold', 'italic', 'code-block', { header: 1 }, { header: 2 }, { list: 'ordered' }, { list: 'bullet' }, 'image']
        // ['blockquote', 'code-block'],
        // [{ header: 1 }, { header: 2 }], // custom button values
        // [{ list: 'ordered' }, { list: 'bullet' }],
        // [{ script: 'sub' }, { script: 'super' }], // superscript/subscript
        // [{ indent: '-1' }, { indent: '+1' }], // outdent/indent
        // [{ direction: 'rtl' }], // text direction
        // [{ size: ['small', false, 'large', 'huge'] }], // custom dropdown
        // [{ header: [1, 2, 3, 4, 5, 6, false] }],
        // [{ color: [] }, { background: [] }], // dropdown with defaults from theme
        // [
        //     {
        //         font: [
        //             'Microsoft-YaHei',
        //             'SimSun',
        //             'SimHei',
        //             'KaiTi',
        //             'FangSong',
        //             'Arial',
        //             'Times',
        //             'sans-serif'
        //         ]
        //     }
        // ],
        // [{ align: [] }],
        // ['clean'], // remove formatting button
        // ['link', 'image', 'video'] // link and image, video,
    ],
    imageDrop: true,
    imageResize: true,
    tooltip: true
};
/** @type {?} */
const toolbarOptions = {
    fontBar: [
        {
            font: ['Microsoft-YaHei', 'SimSun', 'SimHei', 'KaiTi', 'FangSong', 'Arial', 'sans-serif']
        }
    ],
    headerBar: [{ header: [1, 2, 3, 4, 5, 6, false] }],
    sizeBar: [{ size: ['small', false, 'large', 'huge'] }],
    fontStyleBar: ['bold', 'italic', 'underline', 'strike', 'link'],
    indentBar: [{ indent: '-1' }, { indent: '+1' }],
    listBar: [{ list: 'ordered' }, { list: 'bullet' }],
    BlockBar: ['code-block', 'blockquote'],
    superAndSubscriptBar: [{ script: 'sub' }, { script: 'super' }],
    colorBar: [{ color: [] }, { background: [] }],
    mediaBar: ['image', 'video'],
    alignBar: [{ align: [] }],
    imageBar: ['image'],
    videoBar: ['video'],
    cleanBar: ['clean']
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const QUILL_CONFIG_TOKEN = new InjectionToken('config');

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DefaultOptions = {
    modules: ['DisplaySize', 'Toolbar', 'Resize'],
    overlayStyles: {
        position: 'absolute',
        boxSizing: 'border-box',
        border: '1px dashed #444'
    },
    handleStyles: {
        position: 'absolute',
        height: '12px',
        width: '12px',
        backgroundColor: 'white',
        border: '1px solid #777',
        boxSizing: 'border-box',
        opacity: '0.80'
    },
    displayStyles: {
        position: 'absolute',
        font: '12px/1.0 Arial, Helvetica, sans-serif',
        padding: '4px 8px',
        textAlign: 'center',
        backgroundColor: 'white',
        color: '#333',
        border: '1px solid #777',
        boxSizing: 'border-box',
        opacity: '0.80',
        cursor: 'default'
    },
    toolbarStyles: {
        position: 'absolute',
        top: '-12px',
        right: '0',
        left: '0',
        height: '0',
        minWidth: '100px',
        font: '12px/1.0 Arial, Helvetica, sans-serif',
        textAlign: 'center',
        color: '#333',
        boxSizing: 'border-box',
        cursor: 'default'
    },
    toolbarButtonStyles: {
        display: 'inline-block',
        width: '24px',
        height: '24px',
        background: 'white',
        border: '1px solid #999',
        verticalAlign: 'middle'
    },
    toolbarButtonSvgStyles: {
        fill: '#444',
        stroke: '#444',
        strokeWidth: '2'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class BaseModule {
    /**
     * @param {?} resizer
     */
    constructor(resizer) {
        /*
                requestUpdate (passed in by the library during construction, above) can be used to let the library know that
                you've changed something about the image that would require re-calculating the overlay (and all of its child
                elements)
        
                For example, if you add a margin to the element, you'll want to call this or else all the controls will be
                misaligned on-screen.
             */
        /*
                onCreate will be called when the element is clicked on
        
                If the module has any user controls, it should create any containers that it'll need here.
                The overlay has absolute positioning, and will be automatically repositioned and resized as needed, so you can
                use your own absolute positioning and the 'top', 'right', etc. styles to be positioned relative to the element
                on-screen.
             */
        this.onCreate = (/**
         * @return {?}
         */
        () => { });
        /*
                onDestroy will be called when the element is de-selected, or when this module otherwise needs to tidy up.
        
                If you created any DOM elements in onCreate, please remove them from the DOM and destroy them here.
             */
        this.onDestroy = (/**
         * @return {?}
         */
        () => { });
        /*
                onUpdate will be called any time that the element is changed (e.g. resized, aligned, etc.)
        
                This frequently happens during resize dragging, so keep computations light while here to ensure a smooth
                user experience.
             */
        this.onUpdate = (/**
         * @return {?}
         */
        () => { });
        this.overlay = resizer.overlay;
        this.img = resizer.img;
        this.options = resizer.options;
        this.requestUpdate = resizer.onUpdate;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DisplaySize extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // Create the container to hold the size display
            this.display = document.createElement('div');
            // Apply styles
            Object.assign(this.display.style, this.options.displayStyles);
            // Attach it
            this.overlay.appendChild(this.display);
        });
        this.onDestroy = (/**
         * @return {?}
         */
        () => { });
        this.onUpdate = (/**
         * @return {?}
         */
        () => {
            if (!this.display || !this.img) {
                return;
            }
            /** @type {?} */
            const size = this.getCurrentSize();
            this.display.innerHTML = size.join(' &times; ');
            if (size[0] > 120 && size[1] > 30) {
                // position on top of image
                Object.assign(this.display.style, {
                    right: '4px',
                    bottom: '4px',
                    left: 'auto'
                });
            }
            else if (this.img.style.float == 'right') {
                // position off bottom left
                /** @type {?} */
                const dispRect = this.display.getBoundingClientRect();
                Object.assign(this.display.style, {
                    right: 'auto',
                    bottom: `-${dispRect.height + 4}px`,
                    left: `-${dispRect.width + 4}px`
                });
            }
            else {
                // position off bottom right
                /** @type {?} */
                const dispRect = this.display.getBoundingClientRect();
                Object.assign(this.display.style, {
                    right: `-${dispRect.width + 4}px`,
                    bottom: `-${dispRect.height + 4}px`,
                    left: 'auto'
                });
            }
        });
        this.getCurrentSize = (/**
         * @return {?}
         */
        () => [
            this.img.width,
            Math.round((this.img.width / this.img.naturalWidth) * this.img.naturalHeight)
        ]);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const Parchment = Quill.imports.parchment;
/** @type {?} */
const FloatStyle = new Parchment.Attributor.Style('float', 'float');
/** @type {?} */
const MarginStyle = new Parchment.Attributor.Style('margin', 'margin');
/** @type {?} */
const DisplayStyle = new Parchment.Attributor.Style('display', 'display');
class Toolbar extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // Setup Toolbar
            this.toolbar = document.createElement('div');
            Object.assign(this.toolbar.style, this.options.toolbarStyles);
            this.overlay.appendChild(this.toolbar);
            // Setup Buttons
            this._defineAlignments();
            this._addToolbarButtons();
        });
        // The toolbar and its children will be destroyed when the overlay is removed
        this.onDestroy = (/**
         * @return {?}
         */
        () => { });
        // Nothing to update on drag because we are are positioned relative to the overlay
        this.onUpdate = (/**
         * @return {?}
         */
        () => { });
        this._defineAlignments = (/**
         * @return {?}
         */
        () => {
            this.alignments = [
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'inline');
                        FloatStyle.add(this.img, 'left');
                        MarginStyle.add(this.img, '0 1em 1em 0');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => FloatStyle.value(this.img) == 'left')
                },
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'block');
                        FloatStyle.remove(this.img);
                        MarginStyle.add(this.img, 'auto');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => MarginStyle.value(this.img) == 'auto')
                },
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'inline');
                        FloatStyle.add(this.img, 'right');
                        MarginStyle.add(this.img, '0 0 1em 1em');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => FloatStyle.value(this.img) == 'right')
                }
            ];
        });
        this._addToolbarButtons = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const buttons = [];
            this.alignments.forEach((/**
             * @param {?} alignment
             * @param {?} idx
             * @return {?}
             */
            (alignment, idx) => {
                /** @type {?} */
                const button = document.createElement('span');
                buttons.push(button);
                button.innerHTML = alignment.icon;
                button.addEventListener('click', (/**
                 * @return {?}
                 */
                () => {
                    // deselect all buttons
                    buttons.forEach((/**
                     * @param {?} button
                     * @return {?}
                     */
                    button => (button.style.filter = '')));
                    if (alignment.isApplied()) {
                        // If applied, unapply
                        FloatStyle.remove(this.img);
                        MarginStyle.remove(this.img);
                        DisplayStyle.remove(this.img);
                    }
                    else {
                        // otherwise, select button and apply
                        this._selectButton(button);
                        alignment.apply();
                    }
                    // image may change position; redraw drag handles
                    this.requestUpdate();
                }));
                Object.assign(button.style, this.options.toolbarButtonStyles);
                if (idx > 0) {
                    button.style.borderLeftWidth = '0';
                }
                Object.assign(
                // tslint:disable-next-line:object-literal-key-quotes
                button.children[0]['style'], this.options.toolbarButtonSvgStyles);
                if (alignment.isApplied()) {
                    // select button if previously applied
                    this._selectButton(button);
                }
                this.toolbar.appendChild(button);
            }));
        });
        this._selectButton = (/**
         * @param {?} button
         * @return {?}
         */
        button => {
            button.style.filter = 'invert(20%)';
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class Resize extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // track resize handles
            this.boxes = [];
            // add 4 resize handles
            this.addBox('nwse-resize'); // top left
            this.addBox('nesw-resize'); // top right
            this.addBox('nwse-resize'); // bottom right
            this.addBox('nesw-resize'); // bottom left
            this.positionBoxes();
        });
        this.onDestroy = (/**
         * @return {?}
         */
        () => {
            // reset drag handle cursors
            this.setCursor('');
        });
        this.positionBoxes = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const handleXOffset = `${-parseFloat(this.options.handleStyles.width) /
                2}px`;
            /** @type {?} */
            const handleYOffset = `${-parseFloat(this.options.handleStyles.height) /
                2}px`;
            // set the top and left for each drag handle
            [
                { left: handleXOffset, top: handleYOffset },
                { right: handleXOffset, top: handleYOffset },
                { right: handleXOffset, bottom: handleYOffset },
                { left: handleXOffset, bottom: handleYOffset } // bottom left
            ].forEach((/**
             * @param {?} pos
             * @param {?} idx
             * @return {?}
             */
            (pos, idx) => {
                Object.assign(this.boxes[idx].style, pos);
            }));
        });
        this.addBox = (/**
         * @param {?} cursor
         * @return {?}
         */
        cursor => {
            // create div element for resize handle
            /** @type {?} */
            const box = document.createElement('div');
            // Star with the specified styles
            Object.assign(box.style, this.options.handleStyles);
            box.style.cursor = cursor;
            // Set the width/height to use 'px'
            box.style.width = `${this.options.handleStyles.width}px`;
            box.style.height = `${this.options.handleStyles.height}px`;
            // listen for mousedown on each box
            box.addEventListener('mousedown', this.handleMousedown, false);
            // add drag handle to document
            this.overlay.appendChild(box);
            // keep track of drag handle
            this.boxes.push(box);
        });
        this.handleMousedown = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            // note which box
            this.dragBox = evt.target;
            // note starting mousedown position
            this.dragStartX = evt.clientX;
            // store the width before the drag
            this.preDragWidth = this.img.width || this.img.naturalWidth;
            // set the proper cursor everywhere
            this.setCursor(this.dragBox.style.cursor);
            // listen for movement and mouseup
            document.addEventListener('mousemove', this.handleDrag, false);
            document.addEventListener('mouseup', this.handleMouseup, false);
        });
        this.handleMouseup = (/**
         * @return {?}
         */
        () => {
            // reset cursor everywhere
            this.setCursor('');
            // stop listening for movement and mouseup
            document.removeEventListener('mousemove', this.handleDrag);
            document.removeEventListener('mouseup', this.handleMouseup);
        });
        this.handleDrag = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (!this.img) {
                // image not set yet
                return;
            }
            // update image size
            /** @type {?} */
            const deltaX = evt.clientX - this.dragStartX;
            if (this.dragBox === this.boxes[0] || this.dragBox === this.boxes[3]) {
                // left-side resize handler; dragging right shrinks image
                this.img.width = Math.round(this.preDragWidth - deltaX);
            }
            else {
                // right-side resize handler; dragging right enlarges image
                this.img.width = Math.round(this.preDragWidth + deltaX);
            }
            this.requestUpdate();
        });
        this.setCursor = (/**
         * @param {?} value
         * @return {?}
         */
        value => {
            [document.body, this.img].forEach((/**
             * @param {?} el
             * @return {?}
             */
            el => {
                el.style.cursor = value; // eslint-disable-line no-param-reassign
            }));
        });
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const knownModules = { DisplaySize, Toolbar, Resize };
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
class ImageResize {
    /**
     * @param {?} quill
     * @param {?=} options
     */
    constructor(quill, options = {}) {
        this.initializeModules = (/**
         * @return {?}
         */
        () => {
            this.removeModules();
            this.modules = this.moduleClasses.map((/**
             * @param {?} ModuleClass
             * @return {?}
             */
            ModuleClass => new (knownModules[ModuleClass] || ModuleClass)(this)));
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onCreate();
            }));
            this.onUpdate();
        });
        this.onUpdate = (/**
         * @return {?}
         */
        () => {
            this.repositionElements();
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onUpdate();
            }));
        });
        this.removeModules = (/**
         * @return {?}
         */
        () => {
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onDestroy();
            }));
            this.modules = [];
        });
        this.handleClick = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (evt.target &&
                evt.target.tagName &&
                evt.target.tagName.toUpperCase() === 'IMG') {
                if (this.img === evt.target) {
                    // we are already focused on this image
                    return;
                }
                if (this.img) {
                    // we were just focused on another image
                    this.hide();
                }
                // clicked on an image inside the editor
                this.show(evt.target);
            }
            else if (this.img) {
                // clicked on a non image
                this.hide();
            }
        });
        this.show = (/**
         * @param {?} img
         * @return {?}
         */
        img => {
            if (!this.quill.isEnabled()) {
                return;
            }
            // keep track of this img element
            this.img = img;
            this.showOverlay();
            this.initializeModules();
        });
        this.showOverlay = (/**
         * @return {?}
         */
        () => {
            if (this.overlay) {
                this.hideOverlay();
            }
            this.quill.setSelection(null);
            // prevent spurious text selection
            this.setUserSelect('none');
            // listen for the image being deleted or moved
            document.addEventListener('keyup', this.checkImage, true);
            this.quill.root.addEventListener('input', this.checkImage, true);
            // Create and add the overlay
            this.overlay = document.createElement('div');
            Object.assign(this.overlay.style, this.options.overlayStyles);
            this.quill.root.parentNode.appendChild(this.overlay);
            this.repositionElements();
        });
        this.hideOverlay = (/**
         * @return {?}
         */
        () => {
            if (!this.overlay) {
                return;
            }
            // Remove the overlay
            this.quill.root.parentNode.removeChild(this.overlay);
            this.overlay = undefined;
            // stop listening for image deletion or movement
            document.removeEventListener('keyup', this.checkImage);
            this.quill.root.removeEventListener('input', this.checkImage);
            // reset user-select
            this.setUserSelect('');
        });
        this.repositionElements = (/**
         * @return {?}
         */
        () => {
            if (!this.overlay || !this.img) {
                return;
            }
            // position the overlay over the image
            /** @type {?} */
            const parent = this.quill.root.parentNode;
            /** @type {?} */
            const imgRect = this.img.getBoundingClientRect();
            /** @type {?} */
            const containerRect = parent.getBoundingClientRect();
            Object.assign(this.overlay.style, {
                left: `${imgRect.left -
                    containerRect.left +
                    parent.scrollLeft -
                    2}px`,
                top: `${imgRect.top - containerRect.top + parent.scrollTop - 2}px`,
                width: `${imgRect.width + 2}px`,
                height: `${imgRect.height + 2}px`
            });
        });
        this.hide = (/**
         * @return {?}
         */
        () => {
            this.hideOverlay();
            this.removeModules();
            this.img = undefined;
        });
        this.setUserSelect = (/**
         * @param {?} value
         * @return {?}
         */
        value => {
            [
                'userSelect',
                'mozUserSelect',
                'webkitUserSelect',
                'msUserSelect'
            ].forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                // set on contenteditable element and <html>
                this.quill.root.style[prop] = value;
                document.documentElement.style[prop] = value;
            }));
        });
        this.checkImage = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (this.img) {
                if (evt.keyCode == 46 || evt.keyCode == 8) {
                    Quill.find(this.img).deleteAt(0);
                }
                this.hide();
            }
        });
        // save the quill reference and options
        this.quill = quill;
        // Apply the options to our defaults, and stash them for later
        // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately
        /** @type {?} */
        let moduleClasses = false;
        // tslint:disable-next-line:object-literal-key-quotes
        if (options['modules']) {
            moduleClasses = options['modules'].slice();
        }
        // Apply options to default options
        //this.options = defaultsDeep({}, options, DefaultOptions);
        this.options = Object.assign({}, options, DefaultOptions);
        // (see above about moduleClasses)
        if (moduleClasses !== false) {
            this.options.modules = moduleClasses;
        }
        // disable native image resizing on firefox
        document.execCommand('enableObjectResizing', false, 'false');
        // respond to clicks inside the editor
        this.quill.root.addEventListener('click', this.handleClick, false);
        this.quill.root.parentNode.style.position =
            this.quill.root.parentNode.style.position || 'relative';
        // setup modules
        this.moduleClasses = this.options.modules;
        //console.log('this.options.modules', this.options.modules)
        this.modules = [];
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ImageDrop {
    /**
     * @param {?} quill
     * @param {?=} options
     * @param {?=} ngZone
     */
    constructor(quill, options = {}, ngZone) {
        this.ngZone = ngZone;
        // save the quill reference
        this.quill = quill;
        // bind handlers to this instance
        this.handleDrop = this.handleDrop.bind(this);
        this.handlePaste = this.handlePaste.bind(this);
        // listen for drop and paste events
        this.quill.root.addEventListener('drop', this.handleDrop, false);
        this.quill.root.addEventListener('paste', this.handlePaste, false);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    handleDrop(evt) {
        evt.preventDefault();
        if (evt.dataTransfer &&
            evt.dataTransfer.files &&
            evt.dataTransfer.files.length) {
            if (document.caretRangeFromPoint) {
                /** @type {?} */
                const selection = document.getSelection();
                /** @type {?} */
                const range = document.caretRangeFromPoint(evt.clientX, evt.clientY);
                if (selection && range) {
                    selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);
                }
            }
            this.readFiles(evt.dataTransfer.files, this.insert.bind(this));
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    handlePaste(evt) {
        if (evt) {
            evt.preventDefault();
        }
        if (evt.clipboardData &&
            evt.clipboardData.items &&
            evt.clipboardData.items.length) {
            this.readFiles(evt.clipboardData.items, (/**
             * @param {?} dataUrl
             * @return {?}
             */
            dataUrl => {
                // const selection = this.quill.getSelection();
                // if (selection && selection.length) {
                //     // we must be in a browser that supports pasting (like Firefox)
                //     // so it has already been placed into the editor
                // } else {
                //     // otherwise we wait until after the paste when this.quill.getSelection()
                //     // will return a valid index
                // const selection = this.quill.getSelection();
                // if (selection && selection.length) {
                //     // we must be in a browser that supports pasting (like Firefox)
                //     // so it has already been placed into the editor
                // } else {
                //     // otherwise we wait until after the paste when this.quill.getSelection()
                //     // will return a valid index
                //     let _ngZone = this.ngZone;
                //     if (!_ngZone && this.quill && this.quill.options) {
                //         _ngZone = this.quill.options.ngZone;
                //     }
                //     if (_ngZone) {
                //         _ngZone.runOutsideAngular(() => {
                //             setTimeout(() => this.insert(dataUrl), 0);
                //         });
                //     }
                // }
                /** @type {?} */
                let _ngZone = this.ngZone;
                if (!_ngZone && this.quill && this.quill.options) {
                    _ngZone = this.quill.options.ngZone;
                }
                if (_ngZone) {
                    _ngZone.runOutsideAngular((/**
                     * @return {?}
                     */
                    () => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const img = this.quill.container.querySelector('img[src="' + dataUrl + '"]');
                            if (!img) {
                                this.insert(dataUrl);
                            }
                        }), 0);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} dataUrl
     * @return {?}
     */
    insert(dataUrl) {
        /** @type {?} */
        const index = (this.quill.getSelection() || {}).index || this.quill.getLength();
        this.quill.insertEmbed(index, 'image', dataUrl, 'user');
    }
    /**
     * @param {?} files
     * @param {?} callback
     * @return {?}
     */
    readFiles(files, callback) {
        // check each file for an image
        /** @type {?} */
        let imgs = [];
        const { limitImageSize, maxImgSize } = this.quill.options;
        /** @type {?} */
        var uploadImgs = Array.from(files).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            /** @type {?} */
            const blob = n.getAsFile && n.getAsFile() || n;
            if (!blob.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
                // file is not an image
                // Note that some file formats such as psd start with image/* but are not readable
                return false;
            }
            else {
                if (!limitImageSize) {
                    return true;
                }
                else {
                    if (maxImgSize && blob.size > maxImgSize * 1024) {
                        imgs.push(blob);
                        return false;
                    }
                    return true;
                }
            }
        }));
        uploadImgs.forEach((/**
         * @param {?} file
         * @return {?}
         */
        (file) => {
            /** @type {?} */
            const reader = new FileReader();
            reader.onload = (/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                callback(evt.target.result);
            });
            /** @type {?} */
            const blob = file.getAsFile && file.getAsFile() || file;
            if (blob instanceof Blob) {
                reader.readAsDataURL(blob);
            }
        }));
        // [].forEach.call(files, file => {
        //     // read the clipboard item or file
        //     const blob = file.getAsFile && file.getAsFile() || file;
        //     if (!blob.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
        //         // file is not an image
        //         // Note that some file formats such as psd start with image/* but are not readable
        //         return;
        //     }
        //     if (limitImageSize && maxImgSize && blob.size > maxImgSize * 1024) {
        //         imgs.push(blob);
        //         return;
        //     } else {
        //         // set up file reader
        //         const reader = new FileReader();
        //         reader.onload = (evt: any) => {
        //             callback(evt.target.result);
        //         };
        //         if (blob instanceof Blob) {
        //             reader.readAsDataURL(blob);
        //         }
        //     }
        // });
        if (imgs && imgs.length) {
            this.quill.options.showMaxImageMessage(imgs);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const tooltips = {
    "en": {
        align: {
            '': 'Align',
            center: 'Alinear al centro',
            right: 'Alinear a la derecha',
            justify: 'Justificar'
        },
        background: 'Background color',
        blockquote: 'Bloque de cita',
        bold: 'Bold',
        clean: 'Limpiar formato',
        code: 'Code',
        'code-block': 'Code block',
        color: 'Font Color',
        direction: 'Direction',
        float: {
            center: 'Center',
            full: '全浮动',
            left: '左浮动',
            right: '右浮动'
        },
        formula: 'Formula',
        header: {
            '': 'Encabezados',
            '1': 'Encabezados 1',
            '2': 'Encabezados 2'
        },
        italic: 'Italic',
        image: 'Image',
        indent: {
            '+1': 'Increase indent',
            '-1': 'Decrease indent'
        },
        link: 'Enlace',
        list: {
            ordered: 'Numbered list',
            bullet: 'Bullet list',
            check: '选择列表'
        },
        script: {
            sub: 'Subscript',
            super: 'Superscript'
        },
        strike: 'Strike',
        underline: 'Underline',
        video: 'Video',
        undo: 'Undo',
        redo: 'Redo',
        size: 'Font Size',
        font: 'Font Family',
        divider: 'Divider',
        formatBrush: 'Format Brush',
        emoji: 'Emoji'
    },
    "zh-CHS": {
        align: {
            '': '对齐',
            center: '居中对齐',
            right: '右对齐',
            justify: '两端对齐'
        },
        background: '背景色',
        blockquote: '引用',
        bold: '加粗',
        clean: '清除格式',
        code: '代码',
        'code-block': '代码段',
        color: '颜色',
        direction: '方向',
        float: {
            center: '居中',
            full: '全浮动',
            left: '左浮动',
            right: '右浮动'
        },
        formula: '公式',
        header: {
            '': '标题',
            '1': '标题1',
            '2': '标题2'
        },
        italic: '斜体',
        image: '图片',
        indent: {
            '+1': '缩进',
            '-1': '取消缩进'
        },
        link: '链接',
        list: {
            ordered: '有序列表',
            bullet: '无序列表',
            check: '选择列表'
        },
        script: {
            sub: '下标',
            super: '上标'
        },
        strike: '删除线',
        underline: '下划线',
        video: '视频',
        undo: '撤销',
        redo: '重做',
        size: '字号',
        font: '字体',
        divider: '分割线',
        formatBrush: '格式刷',
        emoji: '表情'
    },
    "zh-CHT": {
        align: {
            '': '對齊',
            center: '居中對齊',
            right: '右對齊',
            justify: '兩端對齊'
        },
        background: '背景色',
        blockquote: '引用',
        bold: '加粗',
        clean: '清除格式',
        code: '代碼',
        'code-block': '代碼段',
        color: '顔色',
        direction: '方向',
        float: {
            center: '居中',
            full: '全浮動',
            left: '左浮動',
            right: '右浮動'
        },
        formula: '公式',
        header: {
            '': '標題',
            '1': '標題1',
            '2': '標題2'
        },
        italic: '斜體',
        image: '圖片',
        indent: {
            '+1': '縮進',
            '-1': '取消縮進'
        },
        link: '鏈接',
        list: {
            ordered: '有序列表',
            bullet: '無序列表',
            check: '選擇列表'
        },
        script: {
            sub: '下標',
            super: '上標'
        },
        strike: '刪除線',
        underline: '下劃線',
        video: '視頻',
        undo: '撤銷',
        redo: '重做',
        size: '字號',
        font: '字體',
        divider: '分割線',
        formatBrush: '格式刷',
        emoji: '表情'
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const getScrollParent = (/**
 * @param {?} element
 * @return {?}
 */
function (element) {
    /** @type {?} */
    var parent = element.parentNode;
    if (!parent) {
        return element;
    }
    if (parent === document) {
        if (document.body.scrollTop !== undefined) {
            return document.body;
        }
        else {
            return document.documentElement;
        }
    }
    if (['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow')) !== -1 ||
        ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-x')) !== -1 ||
        ['scroll', 'auto'].indexOf(getStyleComputedProperty(parent, 'overflow-y')) !== -1) {
        return parent;
    }
    return getScrollParent(element.parentNode);
});
/** @type {?} */
const getStyleComputedProperty = (/**
 * @param {?} element
 * @param {?} property
 * @return {?}
 */
function (element, property) {
    /** @type {?} */
    var css = window.getComputedStyle(element, null);
    return css[property];
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const tooltipStyles = {
    minWidth: '70px',
    position: 'absolute',
    padding: '4px 8px',
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    color: '#fff',
    cursor: 'default',
    borderRadius: '4px',
    fontSize: '12px',
    top: '-9999px',
    visibility: 'hidden',
    'z-index': '9999'
};
class Tooltip {
    /**
     * @param {?} quill
     * @param {?} ngZone
     */
    constructor(quill, ngZone) {
        this.ngZone = ngZone;
        this.quill = quill;
        this.toolbar = quill.getModule('toolbar');
        this.buttons = null;
        this.selectors = null;
        this.tip = null;
        this.timeout = null;
        this.mouseenterHandler = null;
        this.mouseleaveHandler = null;
        /** @type {?} */
        const toolbarElement = this.toolbar.container;
        if (toolbarElement) {
            // 添加处理事件
            this.buttons = toolbarElement.querySelectorAll('button');
            this.selectors = toolbarElement.querySelectorAll('.ql-picker');
            for (let el of this.buttons) {
                this.addHandler(el);
            }
            for (let el of this.selectors) {
                this.addHandler(el);
            }
            // 创建tooltip
            this.createTooltip();
            // 滚动元素增加handler
            this.scrollElm = getScrollParent(toolbarElement);
            this.scrollElm.addEventListener('scroll', this.mouseleaveHandler);
        }
    }
    /**
     * @return {?}
     */
    createTooltip() {
        this.tip = document.createElement('div');
        this.tip.classList.add('quill-tooltip');
        Object.assign(this.tip.style, tooltipStyles);
        document.body.appendChild(this.tip);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    addHandler(el) {
        this.mouseenterHandler = (/**
         * @return {?}
         */
        () => {
            // this.ngZone.runOutsideAngular(() => {
            //     this.timeout = setTimeout(() => {
            //         this.showTooltip(el);
            //     }, 100);
            // });
            this.timeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.showTooltip(el);
            }), 100);
        });
        this.mouseleaveHandler = (/**
         * @return {?}
         */
        () => {
            if (this.timeout) {
                // this.ngZone.runOutsideAngular(() => {
                //     clearTimeout(this.timeout);
                // });
                clearTimeout(this.timeout);
            }
            this.hideTooltip();
        });
        // if (this.ngZone && this.ngZone.runOutsideAngular) {
        //     this.ngZone.runOutsideAngular(() => {
        //         el.addEventListener('mouseenter', this.mouseenterHandler);
        //         el.addEventListener('mouseleave', this.mouseleaveHandler);
        //     });
        // }
        el.addEventListener('mouseenter', this.mouseenterHandler);
        el.addEventListener('mouseleave', this.mouseleaveHandler);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    showTooltip(el) {
        // let format = el.className.replace('ql-', '')
        // let format = el.className.replace('ql-', '')
        /** @type {?} */
        const LOCALE_ID = this.quill.options.localeId || 'zh-CHS';
        /** @type {?} */
        const format = [].find
            .call(el.classList, (/**
         * @param {?} className
         * @return {?}
         */
        className => {
            return className.indexOf('ql-') === 0;
        }))
            .replace('ql-', '');
        /** @type {?} */
        const tool = tooltips[LOCALE_ID][format];
        if (tool) {
            if (typeof tool === 'string') {
                this.tip.textContent = tool;
            }
            else {
                /** @type {?} */
                const value = el.value || '';
                if (value != null && tool[value]) {
                    this.tip.textContent = tool[value];
                }
            }
            /** @type {?} */
            const elRect = el.getBoundingClientRect();
            /** @type {?} */
            const tipRect = this.tip.getBoundingClientRect();
            /** @type {?} */
            const body = document.documentElement || document.body;
            /** @type {?} */
            const bodyRect = {
                width: body.scrollWidth,
                height: body.scrollHeight,
                scrollTop: body.scrollTop,
                scrollLeft: body.scrollLeft
            };
            /** @type {?} */
            const offset = 3;
            Object.assign(this.tip.style, {
                top: elRect.top - elRect.height - offset + bodyRect.scrollTop + 'px',
                left: elRect.left - (tipRect.width - elRect.width) / 2 + bodyRect.scrollLeft + 'px',
                visibility: 'visible'
            });
        }
    }
    /**
     * @return {?}
     */
    hideTooltip() {
        Object.assign(this.tip.style, {
            top: '-9999px',
            visibility: 'hidden'
        });
    }
    /**
     * @return {?}
     */
    onDestroy() {
        // console.warn('ondestroy');
        this.destroyTooltip();
        if (this.buttons) {
            for (let el of this.buttons) {
                this.removeHandler(el);
            }
        }
        if (this.selectors) {
            for (let el of this.selectors) {
                this.removeHandler(el);
            }
        }
        if (this.scrollElm) {
            this.scrollElm.removeEventListener('scroll', this.mouseleaveHandler);
        }
    }
    /**
     * @return {?}
     */
    destroyTooltip() {
        if (this.tip.parentNode) {
            this.tip.parentNode.removeChild(this.tip);
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    removeHandler(el) {
        el.removeEventListener('mouseenter', this.mouseenterHandler);
        el.removeEventListener('mouseleave', this.mouseleaveHandler);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const HTML_EDITOR_LOCALES = {
    "en": {
        "html-editor": {
            "maximgsize": "The uploaded image should not exceed {0}",
            "dropimg": "{0} has exceeded the upload limit! Maximum allowed upload {1}"
        }
    },
    "zh-CHS": {
        "html-editor": {
            "maximgsize": "图片超出上传限制！最大允许 {0}",
            "dropimg": "{0} 超出上传限制！最大允许 {1}"
        }
    },
    "zh-CHT": {
        "html-editor": {
            "maximgsize": "圖片超出上傳限制！最大允許 {0}",
            "dropimg": "{0} 超出上傳限制！最大允許 {1}"
        }
    }
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// 修改默认字体
/** @type {?} */
const Font = Quill.import('attributors/style/font');
Font.whitelist = ['Microsoft-YaHei', 'SimSun', 'SimHei', 'KaiTi', 'FangSong', 'Arial', 'Times', 'sans-serif'];
Quill.register(Font, true);
// 注册图片拖拽和图片大小调整
Quill.register('modules/imageDrop', ImageDrop);
Quill.register('modules/imageResize', ImageResize);
Quill.register('modules/tooltip', Tooltip);
/** @type {?} */
const getFormat = (/**
 * @param {?=} format
 * @param {?=} configFormat
 * @return {?}
 */
(format, configFormat) => {
    /** @type {?} */
    const passedFormat = format || configFormat;
    return passedFormat || 'html';
});
class HtmlEditorComponent {
    /**
     * @param {?} elementRef
     * @param {?} domSanitizer
     * @param {?} doc
     * @param {?} platformId
     * @param {?} renderer
     * @param {?} zone
     * @param {?} config
     * @param {?} notifySer
     * @param {?} localeSer
     * @param {?} injector
     */
    constructor(elementRef, domSanitizer, doc, platformId, renderer, zone, config, notifySer, localeSer, injector) {
        this.elementRef = elementRef;
        this.domSanitizer = domSanitizer;
        this.doc = doc;
        this.platformId = platformId;
        this.renderer = renderer;
        this.zone = zone;
        this.config = config;
        this.notifySer = notifySer;
        this.localeSer = localeSer;
        this.injector = injector;
        this._disabled = false; // used to store initial value before ViewInit
        // used to store initial value before ViewInit
        this.rootClass = 'farris-html-editor';
        this.disabled = false;
        this.showBorder = true;
        this.modules = {
            imageDrop: true,
            imageResize: true,
            tooltip: true
        };
        this.required = false;
        this.customToolbarPosition = 'top';
        this.sanitize = false; // 净化dom
        // 净化dom
        this.styles = null;
        this.strict = true;
        this.customOptions = [];
        this.preserveWhitespace = false;
        /**
         * 限制上传图片大小, 默认为 false不限制上传图片的大小
         */
        this.limitImageSize = false;
        /**
         * 允许上传图片最大字节数，单位 kb
         */
        this.maxImgSize = 500;
        // 自定义toobar
        this.customToolbar = false;
        // 文字样式
        this.fontStyleBar = true;
        // 代码块
        this.BlockBar = false; // false;
        // false;
        // 标题
        this.headerBar = true;
        // 字号
        this.sizeBar = true;
        // 列表
        this.listBar = true;
        // 字体
        this.fontBar = true;
        // 上标和下标
        this.superAndSubscriptBar = true; // false;
        // false;
        // 缩进
        this.indentBar = true;
        // 文字颜色
        this.colorBar = true; // false;
        // false;
        // 媒体
        this.mediaBar = true; // false;
        // false;
        // 图片
        this.imageBar = false;
        // 视频
        this.videoBar = false; // false;
        // false;
        // 清除
        this.cleanBar = true;
        this.alignBar = true;
        /**
         * 只读禁用时，最大高度，为 0 时，不限制最大高度; 默认 800px
         */
        this.maxHeight = 800;
        this.minHeight = 100;
        this.autoHeight = true;
        this.onEditorCreated = new EventEmitter();
        this.onContentChanged = new EventEmitter();
        this.onSelectionChanged = new EventEmitter();
        this.onFocus = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.valueGetter = (/**
         * @param {?} quillEditor
         * @param {?} editorElement
         * @return {?}
         */
        (quillEditor, editorElement) => {
            // tslint:disable-next-line: no-non-null-assertion
            /** @type {?} */
            let html = (/** @type {?} */ (editorElement.querySelector('.ql-editor'))).innerHTML;
            if (html === '<p><br></p>' || html === '<div><br><div>') {
                html = null;
            }
            /** @type {?} */
            let modelValue = html;
            /** @type {?} */
            const format = getFormat(this.format, this.config.format);
            if (format === 'text') {
                modelValue = quillEditor.getText();
            }
            else if (format === 'object') {
                modelValue = quillEditor.getContents();
            }
            else if (format === 'json') {
                try {
                    modelValue = JSON.stringify(quillEditor.getContents());
                }
                catch (e) {
                    modelValue = quillEditor.getText();
                }
            }
            return modelValue;
        });
        this.valueSetter = (/**
         * @param {?} quillEditor
         * @param {?} value
         * @return {?}
         */
        (quillEditor, value) => {
            /** @type {?} */
            const format = getFormat(this.format, this.config.format);
            if (format === 'html') {
                if (this.sanitize) {
                    value = this.domSanitizer.sanitize(SecurityContext.HTML, value);
                }
                value = value ? (value + '').replace(/\s\s/g, '&nbsp;&nbsp;') : '';
                return quillEditor.clipboard.convert(value);
            }
            else if (format === 'json') {
                try {
                    return JSON.parse(value);
                }
                catch (e) {
                    return [{ insert: value }];
                }
            }
            return value;
        });
        this.selectionChangeHandler = (/**
         * @param {?} range
         * @param {?} oldRange
         * @param {?} source
         * @return {?}
         */
        (range, oldRange, source) => {
            this.zone.run((/**
             * @return {?}
             */
            () => {
                if (range === null) {
                    this.onBlur.emit({
                        editor: this.quillEditor,
                        source
                    });
                }
                else if (oldRange === null) {
                    this.onFocus.emit({
                        editor: this.quillEditor,
                        source
                    });
                }
                this.onSelectionChanged.emit({
                    editor: this.quillEditor,
                    oldRange,
                    range,
                    source
                });
                if (!range && this.onModelTouched) {
                    this.onModelTouched();
                }
            }));
        });
        this.textChangeHandler = (/**
         * @param {?} delta
         * @param {?} oldDelta
         * @param {?} source
         * @return {?}
         */
        (delta, oldDelta, source) => {
            // only emit changes emitted by user interactions
            // only emit changes emitted by user interactions
            /** @type {?} */
            const text = this.quillEditor.getText();
            /** @type {?} */
            const content = this.quillEditor.getContents();
            // tslint:disable-next-line: no-non-null-assertion
            /** @type {?} */
            let html = (/** @type {?} */ ((/** @type {?} */ (this.editorElem)).querySelector('.ql-editor'))).innerHTML;
            if (html === '<p><br></p>' || html === '<div><br><div>') {
                html = null;
            }
            this.zone.run((/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const trackChanges = this.trackChanges || this.config.trackChanges;
                if ((source === Quill.sources.USER || (trackChanges && trackChanges === 'all')) && this.onModelChange) {
                    this.onModelChange(this.valueGetter(this.quillEditor, (/** @type {?} */ (this.editorElem))));
                }
                this.onContentChanged.emit({
                    content,
                    delta,
                    editor: this.quillEditor,
                    html,
                    oldDelta,
                    source,
                    text
                });
            }));
        });
        if (this.localeSer) {
            this.localeSer.setLocaleData(HTML_EDITOR_LOCALES);
        }
    }
    // tslint:disable-next-line:no-empty
    /**
     * @param {?=} _modelValue
     * @return {?}
     */
    onModelChange(_modelValue) { }
    // tslint:disable-next-line:no-empty
    /**
     * @return {?}
     */
    onModelTouched() { }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.editorCreate();
        if (this.editorElem) {
            this.renderer.setStyle(this.editorElem, 'min-height', `${this.minHeight || 100}px`);
            if (this.autoHeight) {
                if (this.maxHeight) {
                    this.renderer.setStyle(this.editorElem, 'max-height', `${this.maxHeight}px`);
                    this.renderer.setStyle(this.editorElem, 'overflow', 'auto');
                }
            }
            else {
                this.renderer.setStyle(this.editorElem, 'max-height', `${this.minHeight}px`);
                this.renderer.setStyle(this.editorElem, 'overflow', 'auto');
            }
        }
    }
    /**
     * @param {?} toolbar
     * @return {?}
     */
    setToolbar(toolbar) {
        // console.log(toolbar);
    }
    /**
     * @private
     * @return {?}
     */
    editorCreate() {
        if (isPlatformServer(this.platformId)) {
            return;
        }
        this.elementRef.nativeElement.insertAdjacentHTML(this.customToolbarPosition === 'top' ? 'beforeend' : 'afterbegin', this.preserveWhitespace ? '<pre html-editor-element></pre>' : '<div html-editor-element></div>');
        this.editorElem = this.elementRef.nativeElement.querySelector('[html-editor-element]');
        /** @type {?} */
        const toolbarElem = this.elementRef.nativeElement.querySelector('[html-editor-toolbar]');
        /** @type {?} */
        const modules = this.modules || this.config.modules || defaultModules;
        if (modules.toolbar === undefined) {
            modules.toolbar = defaultModules.toolbar;
        }
        if (this.customToolbar) {
            if (this.toolbar && this.toolbar.length) {
                modules.toolbar = Convert2HtmlEditorToolbars('concise', this.toolbar);
            }
            else {
                modules.toolbar = defaultModules.toolbar;
            }
        }
        if (modules.tooltip === undefined) {
            modules.tooltip = defaultModules.tooltip;
        }
        if (modules.imageDrop === undefined) {
            modules.imageDrop = defaultModules.imageDrop;
        }
        if (modules.imageResize === undefined) {
            modules.imageResize = defaultModules.imageResize;
        }
        /** @type {?} */
        let placeholder = this.placeholder !== undefined ? this.placeholder : this.config.placeholder;
        if (placeholder === undefined) {
            placeholder = '';
        }
        if (toolbarElem) {
            // tslint:disable-next-line:no-string-literal
            modules['toolbar'] = toolbarElem;
        }
        if (this.styles) {
            Object.keys(this.styles).forEach((/**
             * @param {?} key
             * @return {?}
             */
            (key) => {
                this.renderer.setStyle(this.editorElem, key, this.styles[key]);
            }));
        }
        this.customOptions.forEach((/**
         * @param {?} customOption
         * @return {?}
         */
        customOption => {
            /** @type {?} */
            const newCustomOption = Quill.import(customOption.import);
            newCustomOption.whitelist = customOption.whitelist;
            Quill.register(newCustomOption, true);
        }));
        /** @type {?} */
        let bounds = this.bounds && this.bounds === 'self' ? this.editorElem : this.bounds;
        if (!bounds) {
            bounds = this.config.bounds ? this.config.bounds : this.doc.body;
        }
        /** @type {?} */
        let debug = this.debug;
        if (!debug && debug !== false && this.config.debug) {
            debug = this.config.debug;
        }
        /** @type {?} */
        let readOnly = this.readonly;
        if (!readOnly && this.readonly !== false) {
            readOnly = this.config.readOnly !== undefined ? this.config.readOnly : false;
        }
        // modules.imageResize = !(readOnly || this.disabled)
        /** @type {?} */
        let scrollingContainer = this.scrollingContainer;
        if (!scrollingContainer) {
            scrollingContainer = this.editorElem;
        }
        // if (!scrollingContainer) {
        //     scrollingContainer =
        //         this.config.scrollingContainer === null || this.config.scrollingContainer
        //             ? this.config.scrollingContainer
        //             : null;
        // }
        /** @type {?} */
        let formats = this.formats;
        if (!formats && formats === undefined) {
            formats = this.config.formats || this.config.formats === null ? this.config.formats : undefined;
        }
        // 初始化quill
        this.quillEditor = new Quill(this.editorElem, {
            bounds,
            debug,
            formats,
            modules,
            placeholder,
            readOnly,
            scrollingContainer,
            strict: this.strict,
            theme: this.theme || (this.config.theme ? this.config.theme : 'snow'),
            /**
             * 限制上传图片大小, 默认为 false不限制上传图片的大小
             */
            limitImageSize: this.limitImageSize,
            /**
             * 允许上传图片最大字节数，单位 kb
             */
            maxImgSize: this.maxImgSize,
            showMaxImageMessage: this.showMaxImageMessage.bind(this),
            ngZone: this.zone,
            localeId: this.localeSer ? this.localeSer.localeId : localStorage.getItem('languageCode') || 'zh-CHS'
        });
        if (this.content) {
            /** @type {?} */
            const format = getFormat(this.format, this.config.format);
            if (format === 'object') {
                this.quillEditor.setContents(this.content, 'silent');
            }
            else if (format === 'text') {
                this.quillEditor.setText(this.content, 'silent');
            }
            else if (format === 'json') {
                try {
                    this.quillEditor.setContents(JSON.parse(this.content), 'silent');
                }
                catch (e) {
                    this.quillEditor.setText(this.content, 'silent');
                }
            }
            else {
                if (this.sanitize) {
                    this.content = this.domSanitizer.sanitize(SecurityContext.HTML, this.content);
                }
                /** @type {?} */
                const contents = this.quillEditor.clipboard.convert(this.content);
                this.quillEditor.setContents(contents, 'silent');
            }
            this.quillEditor.history.clear();
        }
        // initialize _disabled status based on this._disabled as default value
        // this.setDisabledState(this.disabled);
        this.setStatusEditor(this.readonly, this.disabled);
        this.onEditorCreated.emit(this.quillEditor);
        // mark model as touched if editor lost focus
        this.quillEditor.on('selection-change', this.selectionChangeHandler);
        // update model if text changes
        this.quillEditor.on('text-change', this.textChangeHandler);
    }
    /**
     * @return {?}
     */
    random_id() {
        return Math.random().toString(36).slice(2);
    }
    /**
     * @return {?}
     */
    endEdit() {
        this.onModelTouched();
    }
    /**
     * @param {?} options
     * @return {?}
     */
    buildToolbar(options) {
        /** @type {?} */
        const rtn = [];
        Object.keys(options).forEach((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            if (this[e] === true) {
                rtn.push(options[e]);
            }
            else if (this[e]) {
                rtn.push(this[e]);
            }
        }));
        return rtn;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.quillEditor) {
            this.quillEditor.off('selection-change', this.selectionChangeHandler);
            this.quillEditor.off('text-change', this.textChangeHandler);
        }
    }
    /**
     * @private
     * @return {?}
     */
    hideImgSelectionRange() {
        /** @type {?} */
        const imgResizeIns = this.quillEditor.getModule('imageResize');
        if (imgResizeIns) {
            if (this.readonly || this.disabled) {
                imgResizeIns.hide();
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.quillEditor) {
            return;
        }
        if (changes['disabled']) {
            this.setStatusEditor(false, this.disabled);
            this.hideImgSelectionRange();
        }
        // tslint:disable:no-string-literal
        if (changes['readonly']) {
            this.quillEditor.enable(!changes['readonly'].currentValue);
            this.disableToolbar(changes['readonly'].currentValue);
            this.hideImgSelectionRange();
        }
        if (changes['placeholder']) {
            this.quillEditor.root.dataset.placeholder = changes['placeholder'].currentValue;
        }
        if (changes['styles']) {
            /** @type {?} */
            const currentStyling = changes['styles'].currentValue;
            /** @type {?} */
            const previousStyling = changes['styles'].previousValue;
            if (previousStyling) {
                Object.keys(previousStyling).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    this.renderer.removeStyle(this.editorElem, key);
                }));
            }
            if (currentStyling) {
                Object.keys(currentStyling).forEach((/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => {
                    this.renderer.setStyle(this.editorElem, key, this.styles[key]);
                }));
            }
        }
        if (changes.limitImageSize && !changes.limitImageSize.isFirstChange()) {
            this.quillEditor.options.limitImageSize = this.limitImageSize;
        }
        if (changes.maxImgSize && !changes.maxImgSize.isFirstChange()) {
            this.quillEditor.options.maxImgSize = this.maxImgSize;
        }
        // tslint:enable:no-string-literal
    }
    /**
     * @param {?} currentValue
     * @return {?}
     */
    writeValue(currentValue) {
        this.content = currentValue;
        /** @type {?} */
        const format = getFormat(this.format, this.config.format);
        if (this.quillEditor) {
            this.quillEditor.setText('');
            if (currentValue) {
                if (format === 'text') {
                    this.quillEditor.setText(currentValue);
                }
                else {
                    this.quillEditor.setContents(this.valueSetter(this.quillEditor, this.content));
                }
                return;
            }
        }
    }
    /**
     * @param {?} readonly
     * @return {?}
     */
    disableToolbar(readonly) {
        /** @type {?} */
        const toolbarElem = this.elementRef.nativeElement.querySelector('.ql-toolbar');
        if (toolbarElem) {
            toolbarElem.style.display = readonly ? 'none' : 'block';
        }
    }
    /**
     * @param {?=} readonly
     * @param {?=} disable
     * @return {?}
     */
    setStatusEditor(readonly = false, disable) {
        // if (disable || readonly) {
        //     this.elementRef.nativeElement.style.border = 'none';
        // }
        this.disableToolbar(disable || readonly);
        this.setDisabledState(disable);
    }
    /**
     * @param {?=} isDisabled
     * @return {?}
     */
    setDisabledState(isDisabled = this._disabled) {
        // store initial value to set appropriate _disabled status after ViewInit
        this._disabled = isDisabled;
        if (this.quillEditor) {
            if (isDisabled) {
                this.quillEditor.disable();
                this.renderer.setAttribute(this.elementRef.nativeElement, 'disabled', 'disabled');
            }
            else {
                if (!this.readonly) {
                    this.quillEditor.enable();
                }
                this.renderer.removeAttribute(this.elementRef.nativeElement, 'disabled');
            }
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.onModelChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onModelTouched = fn;
    }
    /**
     * @param {?=} imgs
     * @return {?}
     */
    showMaxImageMessage(imgs = null) {
        /** @type {?} */
        let errMsg = `上传的图片不得大于${this.maxImgSize}kb`;
        if (this.localeSer) {
            /** @type {?} */
            let _errMsg = this.localeSer.getValue('html-editor.maximgsize');
            if (_errMsg) {
                _errMsg = _errMsg.replace('{0}', `${this.maxImgSize}kb`);
                errMsg = _errMsg;
            }
            if (imgs && imgs.length) {
                /** @type {?} */
                const imgNames = imgs.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.name)).join(', ');
                errMsg = this.localeSer.getValue('html-editor.dropimg').replace('{0}', imgNames).replace('{1}', `${this.maxImgSize}kb`);
            }
        }
        else {
            if (imgs && imgs.length) {
                /** @type {?} */
                const imgNames = imgs.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.name)).join(', ');
                errMsg = `${imgNames} 超出上传限制！最大允许 ${this.maxImgSize}kb`;
            }
        }
        if (this.notifySer) {
            this.notifySer.warning({ msg: errMsg, timeout: 2000 });
        }
        else {
            alert(errMsg);
        }
    }
    /**
     * @return {?}
     */
    validate() {
        return null;
        // if (!this.quillEditor) {
        // }
        // const err: {
        //     minLengthError?: {
        //         given: number;
        //         minLength: number;
        //     };
        //     maxLengthError?: {
        //         given: number;
        //         maxLength: number;
        //     };
        //     requiredError?: { empty: boolean };
        // } = {};
        // let valid = true;
        // const textLength = this.quillEditor.getText().trim().length;
        // if (this.minLength && textLength && textLength < this.minLength) {
        //     err.minLengthError = {
        //         given: textLength,
        //         minLength: this.minLength
        //     };
        //     valid = false;
        // }
        // if (this.maxLength && textLength > this.maxLength) {
        //     err.maxLengthError = {
        //         given: textLength,
        //         maxLength: this.maxLength
        //     };
        //     valid = false;
        // }
        // if (this.required && !textLength) {
        //     err.requiredError = {
        //         empty: true
        //     };
        //     valid = false;
        // }
        // return valid ? null : err;
    }
}
HtmlEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-html-editor',
                template: `
        <ng-content select="[html-editor-toolbar]"></ng-content>
    `,
                encapsulation: ViewEncapsulation.None,
                providers: [
                    {
                        multi: true,
                        provide: NG_VALUE_ACCESSOR,
                        // 自定义组件的数据绑定
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => HtmlEditorComponent))
                    }, {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => HtmlEditorComponent)),
                        multi: true
                    }
                ],
                styles: [".ql-container{box-sizing:border-box;font-family:Helvetica,Arial,sans-serif;font-size:.875rem;height:100%;margin:0;position:relative;color:rgba(0,0,0,.85)}.ql-container.ql-disabled .ql-tooltip{visibility:hidden}.ql-container.ql-disabled .ql-editor ul[data-checked]>li::before{pointer-events:none}.ql-clipboard{left:-100000px;height:1px;overflow-y:hidden;position:absolute;top:50%}.ql-clipboard p{margin:0;padding:0}.ql-editor{box-sizing:border-box;line-height:1.42;height:100%;outline:0;overflow-y:auto;padding:12px 15px;-o-tab-size:4;tab-size:4;-moz-tab-size:4;text-align:left;white-space:pre-wrap;word-wrap:break-word;min-height:80px;word-break:break-all}.ql-editor>*{cursor:text}.ql-editor blockquote,.ql-editor h1,.ql-editor h2,.ql-editor h3,.ql-editor h4,.ql-editor h5,.ql-editor h6,.ql-editor ol,.ql-editor p,.ql-editor pre,.ql-editor ul{margin:0;padding:0;counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol,.ql-editor ul{padding-left:1.5em}.ql-editor ol>li,.ql-editor ul>li{list-style-type:none}.ql-editor ul>li::before{content:'\\2022'}.ql-editor ul[data-checked=false],.ql-editor ul[data-checked=true]{pointer-events:none}.ql-editor ul[data-checked=false]>li *,.ql-editor ul[data-checked=true]>li *{pointer-events:all}.ql-editor ul[data-checked=false]>li::before,.ql-editor ul[data-checked=true]>li::before{color:#777;cursor:pointer;pointer-events:all}.ql-editor ul[data-checked=true]>li::before{content:'\\2611'}.ql-editor ul[data-checked=false]>li::before{content:'\\2610'}.ql-editor li::before{display:inline-block;white-space:nowrap;width:1.2em}.ql-editor li:not(.ql-direction-rtl)::before{margin-left:-1.5em;margin-right:.3em;text-align:right}.ql-editor li.ql-direction-rtl::before{margin-left:.3em;margin-right:-1.5em}.ql-editor ol li:not(.ql-direction-rtl),.ql-editor ul li:not(.ql-direction-rtl){padding-left:1.5em}.ql-editor ol li.ql-direction-rtl,.ql-editor ul li.ql-direction-rtl{padding-right:1.5em}.ql-editor ol li{counter-reset:list-1 list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9;counter-increment:list-0}.ql-editor ol li:before{content:counter(list-0,decimal) '. '}.ql-editor ol li.ql-indent-1{counter-increment:list-1;counter-reset:list-2 list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-1:before{content:counter(list-1,lower-alpha) '. '}.ql-editor ol li.ql-indent-2{counter-increment:list-2;counter-reset:list-3 list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-2:before{content:counter(list-2,lower-roman) '. '}.ql-editor ol li.ql-indent-3{counter-increment:list-3;counter-reset:list-4 list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-3:before{content:counter(list-3,decimal) '. '}.ql-editor ol li.ql-indent-4{counter-increment:list-4;counter-reset:list-5 list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-4:before{content:counter(list-4,lower-alpha) '. '}.ql-editor ol li.ql-indent-5{counter-increment:list-5;counter-reset:list-6 list-7 list-8 list-9}.ql-editor ol li.ql-indent-5:before{content:counter(list-5,lower-roman) '. '}.ql-editor ol li.ql-indent-6{counter-increment:list-6;counter-reset:list-7 list-8 list-9}.ql-editor ol li.ql-indent-6:before{content:counter(list-6,decimal) '. '}.ql-editor ol li.ql-indent-7{counter-increment:list-7;counter-reset:list-8 list-9}.ql-editor ol li.ql-indent-7:before{content:counter(list-7,lower-alpha) '. '}.ql-editor ol li.ql-indent-8{counter-increment:list-8;counter-reset:list-9}.ql-editor ol li.ql-indent-8:before{content:counter(list-8,lower-roman) '. '}.ql-editor ol li.ql-indent-9{counter-increment:list-9}.ql-editor ol li.ql-indent-9:before{content:counter(list-9,decimal) '. '}.ql-editor .ql-indent-1:not(.ql-direction-rtl){padding-left:3em}.ql-editor li.ql-indent-1:not(.ql-direction-rtl){padding-left:4.5em}.ql-editor .ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:3em}.ql-editor li.ql-indent-1.ql-direction-rtl.ql-align-right{padding-right:4.5em}.ql-editor .ql-indent-2:not(.ql-direction-rtl){padding-left:6em}.ql-editor li.ql-indent-2:not(.ql-direction-rtl){padding-left:7.5em}.ql-editor .ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:6em}.ql-editor li.ql-indent-2.ql-direction-rtl.ql-align-right{padding-right:7.5em}.ql-editor .ql-indent-3:not(.ql-direction-rtl){padding-left:9em}.ql-editor li.ql-indent-3:not(.ql-direction-rtl){padding-left:10.5em}.ql-editor .ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:9em}.ql-editor li.ql-indent-3.ql-direction-rtl.ql-align-right{padding-right:10.5em}.ql-editor .ql-indent-4:not(.ql-direction-rtl){padding-left:12em}.ql-editor li.ql-indent-4:not(.ql-direction-rtl){padding-left:13.5em}.ql-editor .ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:12em}.ql-editor li.ql-indent-4.ql-direction-rtl.ql-align-right{padding-right:13.5em}.ql-editor .ql-indent-5:not(.ql-direction-rtl){padding-left:15em}.ql-editor li.ql-indent-5:not(.ql-direction-rtl){padding-left:16.5em}.ql-editor .ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:15em}.ql-editor li.ql-indent-5.ql-direction-rtl.ql-align-right{padding-right:16.5em}.ql-editor .ql-indent-6:not(.ql-direction-rtl){padding-left:18em}.ql-editor li.ql-indent-6:not(.ql-direction-rtl){padding-left:19.5em}.ql-editor .ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:18em}.ql-editor li.ql-indent-6.ql-direction-rtl.ql-align-right{padding-right:19.5em}.ql-editor .ql-indent-7:not(.ql-direction-rtl){padding-left:21em}.ql-editor li.ql-indent-7:not(.ql-direction-rtl){padding-left:22.5em}.ql-editor .ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:21em}.ql-editor li.ql-indent-7.ql-direction-rtl.ql-align-right{padding-right:22.5em}.ql-editor .ql-indent-8:not(.ql-direction-rtl){padding-left:24em}.ql-editor li.ql-indent-8:not(.ql-direction-rtl){padding-left:25.5em}.ql-editor .ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:24em}.ql-editor li.ql-indent-8.ql-direction-rtl.ql-align-right{padding-right:25.5em}.ql-editor .ql-indent-9:not(.ql-direction-rtl){padding-left:27em}.ql-editor li.ql-indent-9:not(.ql-direction-rtl){padding-left:28.5em}.ql-editor .ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:27em}.ql-editor li.ql-indent-9.ql-direction-rtl.ql-align-right{padding-right:28.5em}.ql-editor .ql-video{display:block;max-width:100%}.ql-editor .ql-video.ql-align-center{margin:0 auto}.ql-editor .ql-video.ql-align-right{margin:0 0 0 auto}.ql-editor .ql-bg-black{background-color:#000}.ql-editor .ql-bg-red{background-color:#e60000}.ql-editor .ql-bg-orange{background-color:#f90}.ql-editor .ql-bg-yellow{background-color:#ff0}.ql-editor .ql-bg-green{background-color:#008a00}.ql-editor .ql-bg-blue{background-color:#06c}.ql-editor .ql-bg-purple{background-color:#93f}.ql-editor .ql-color-white{color:#fff}.ql-editor .ql-color-red{color:#e60000}.ql-editor .ql-color-orange{color:#f90}.ql-editor .ql-color-yellow{color:#ff0}.ql-editor .ql-color-green{color:#008a00}.ql-editor .ql-color-blue{color:#06c}.ql-editor .ql-color-purple{color:#93f}.ql-editor .ql-font-serif{font-family:Georgia,Times New Roman,serif}.ql-editor .ql-font-monospace{font-family:Monaco,Courier New,monospace}.ql-editor .ql-size-small{font-size:.75em}.ql-editor .ql-size-large{font-size:1.5em}.ql-editor .ql-size-huge{font-size:2.5em}.ql-editor .ql-direction-rtl{direction:rtl;text-align:inherit}.ql-editor .ql-align-center{text-align:center}.ql-editor .ql-align-justify{text-align:justify}.ql-editor .ql-align-right{text-align:right}.ql-editor.ql-blank::before{color:rgba(0,0,0,.6);content:attr(data-placeholder);left:15px;pointer-events:none;position:absolute;right:15px}.ql-snow .ql-toolbar:after,.ql-snow.ql-toolbar:after{clear:both;content:'';display:table}.ql-snow .ql-toolbar button,.ql-snow.ql-toolbar button{background:0 0;border:none;cursor:pointer;display:inline-block;float:left;height:24px;padding:3px 5px;width:28px}.ql-snow .ql-toolbar button svg,.ql-snow.ql-toolbar button svg{float:left;height:100%}.ql-snow .ql-toolbar button:active:hover,.ql-snow.ql-toolbar button:active:hover{outline:0}.ql-snow .ql-toolbar input.ql-image[type=file],.ql-snow.ql-toolbar input.ql-image[type=file]{display:none}.ql-snow .ql-toolbar .ql-picker-item.ql-selected,.ql-snow .ql-toolbar .ql-picker-item:hover,.ql-snow .ql-toolbar .ql-picker-label.ql-active,.ql-snow .ql-toolbar .ql-picker-label:hover,.ql-snow .ql-toolbar button.ql-active,.ql-snow .ql-toolbar button:focus,.ql-snow .ql-toolbar button:hover,.ql-snow.ql-toolbar .ql-picker-item.ql-selected,.ql-snow.ql-toolbar .ql-picker-item:hover,.ql-snow.ql-toolbar .ql-picker-label.ql-active,.ql-snow.ql-toolbar .ql-picker-label:hover,.ql-snow.ql-toolbar button.ql-active,.ql-snow.ql-toolbar button:focus,.ql-snow.ql-toolbar button:hover{color:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-fill,.ql-snow .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:focus .ql-fill,.ql-snow .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow .ql-toolbar button:hover .ql-fill,.ql-snow .ql-toolbar button:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-fill,.ql-snow.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:focus .ql-fill,.ql-snow.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover .ql-fill,.ql-snow.ql-toolbar button:hover .ql-stroke.ql-fill{fill:#06c}.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow .ql-toolbar button.ql-active .ql-stroke,.ql-snow .ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow .ql-toolbar button:focus .ql-stroke,.ql-snow .ql-toolbar button:focus .ql-stroke-miter,.ql-snow .ql-toolbar button:hover .ql-stroke,.ql-snow .ql-toolbar button:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-snow.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-snow.ql-toolbar button.ql-active .ql-stroke,.ql-snow.ql-toolbar button.ql-active .ql-stroke-miter,.ql-snow.ql-toolbar button:focus .ql-stroke,.ql-snow.ql-toolbar button:focus .ql-stroke-miter,.ql-snow.ql-toolbar button:hover .ql-stroke,.ql-snow.ql-toolbar button:hover .ql-stroke-miter{stroke:#06c}@media (pointer:coarse){.ql-snow .ql-toolbar button:hover:not(.ql-active),.ql-snow.ql-toolbar button:hover:not(.ql-active){color:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-snow.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter{stroke:#444}}.ql-snow,.ql-snow *{box-sizing:border-box}.ql-snow .ql-hidden{display:none}.ql-snow .ql-out-bottom,.ql-snow .ql-out-top{visibility:hidden}.ql-snow .ql-tooltip{position:absolute;-webkit-transform:translateY(10px);transform:translateY(10px)}.ql-snow .ql-tooltip a{cursor:pointer;text-decoration:none;line-height:26px}.ql-snow .ql-tooltip.ql-flip{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.ql-snow .ql-formats{display:inline-block;vertical-align:middle}.ql-snow .ql-formats:after{clear:both;content:'';display:table}.ql-snow .ql-stroke{fill:none;stroke:#444;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}.ql-snow .ql-stroke-miter{fill:none;stroke:#444;stroke-miterlimit:10;stroke-width:2}.ql-snow .ql-fill,.ql-snow .ql-stroke.ql-fill{fill:#444}.ql-snow .ql-empty{fill:none}.ql-snow .ql-even{fill-rule:evenodd}.ql-snow .ql-stroke.ql-thin,.ql-snow .ql-thin{stroke-width:1}.ql-snow .ql-transparent{opacity:.4}.ql-snow .ql-direction svg:last-child{display:none}.ql-snow .ql-direction.ql-active svg:last-child{display:inline}.ql-snow .ql-direction.ql-active svg:first-child{display:none}.ql-snow .ql-editor h1{font-size:2em}.ql-snow .ql-editor h2{font-size:1.5em}.ql-snow .ql-editor h3{font-size:1.17em}.ql-snow .ql-editor h4{font-size:1em}.ql-snow .ql-editor h5{font-size:.83em}.ql-snow .ql-editor h6{font-size:.67em}.ql-snow .ql-editor a{text-decoration:underline}.ql-snow .ql-editor blockquote{border-left:4px solid #ccc;margin-bottom:5px;margin-top:5px;padding-left:16px}.ql-snow .ql-editor code,.ql-snow .ql-editor pre{background-color:#f0f0f0;border-radius:3px}.ql-snow .ql-editor pre{white-space:pre-wrap;margin-bottom:5px;margin-top:5px;padding:5px 10px}.ql-snow .ql-editor code{font-size:85%;padding:2px 4px}.ql-snow .ql-editor pre.ql-syntax{background-color:#23241f;color:#f8f8f2;overflow:visible}.ql-snow .ql-editor img{max-width:100%}.ql-snow .ql-picker{color:#444;display:inline-block;float:left;font-size:14px;font-weight:500;height:24px;position:relative;vertical-align:middle}.ql-snow .ql-picker-label{cursor:pointer;display:inline-block;height:100%;padding-left:8px;padding-right:2px;position:relative;width:100%;overflow:hidden}.ql-snow .ql-picker-options{background-color:#fff;display:none;min-width:100%;padding:4px 8px;position:absolute;white-space:nowrap}.ql-snow .ql-picker-options .ql-picker-item{cursor:pointer;display:block;padding-bottom:5px;padding-top:5px}.ql-snow .ql-picker.ql-expanded .ql-picker-label{color:#ccc;z-index:2}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-fill{fill:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-label .ql-stroke{stroke:#ccc}.ql-snow .ql-picker.ql-expanded .ql-picker-options{display:block;margin-top:-1px;top:100%;z-index:1}.ql-snow .ql-color-picker,.ql-snow .ql-icon-picker{width:28px}.ql-snow .ql-color-picker .ql-picker-label,.ql-snow .ql-icon-picker .ql-picker-label{padding:0 4px}.ql-snow .ql-color-picker .ql-picker-label svg,.ql-snow .ql-icon-picker .ql-picker-label svg{top:-1px;position:relative}.ql-snow .ql-icon-picker .ql-picker-options{padding:4px 0}.ql-snow .ql-icon-picker .ql-picker-item{height:24px;width:24px;padding:2px 4px}.ql-snow .ql-color-picker .ql-picker-options{padding:3px 5px;width:152px}.ql-snow .ql-color-picker .ql-picker-item{border:1px solid transparent;float:left;height:16px;margin:2px;padding:0;width:16px}.ql-snow .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg{position:absolute;margin-top:-9px;right:0;top:50%;width:18px;background-color:#fff}.ql-snow .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before{content:attr(data-label)}.ql-snow .ql-picker.ql-header{width:98px}.ql-snow .ql-picker.ql-header .ql-picker-item::before,.ql-snow .ql-picker.ql-header .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='1']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='1']::before{content:'Heading 1'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='2']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='2']::before{content:'Heading 2'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='3']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='3']::before{content:'Heading 3'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='4']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='4']::before{content:'Heading 4'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='5']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='5']::before{content:'Heading 5'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='6']::before,.ql-snow .ql-picker.ql-header .ql-picker-label[data-value='6']::before{content:'Heading 6'}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='1']::before{font-size:2em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='2']::before{font-size:1.5em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='3']::before{font-size:1.17em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='4']::before{font-size:1em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='5']::before{font-size:.83em}.ql-snow .ql-picker.ql-header .ql-picker-item[data-value='6']::before{font-size:.67em}.ql-snow .ql-picker.ql-font{width:108px}.ql-snow .ql-picker.ql-font .ql-picker-item::before,.ql-snow .ql-picker.ql-font .ql-picker-label::before{content:'Sans Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=serif]::before{content:'Serif'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before{content:'Monospace'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=serif]::before{font-family:Georgia,Times New Roman,serif}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before{font-family:Monaco,Courier New,monospace}.ql-snow .ql-picker.ql-size{width:98px}.ql-snow .ql-picker.ql-size .ql-picker-item::before,.ql-snow .ql-picker.ql-size .ql-picker-label::before{content:'Normal'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=small]::before{content:'Small'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=large]::before{content:'Large'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,.ql-snow .ql-picker.ql-size .ql-picker-label[data-value=huge]::before{content:'Huge'}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=small]::before{font-size:10px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=large]::before{font-size:18px}.ql-snow .ql-picker.ql-size .ql-picker-item[data-value=huge]::before{font-size:32px}.ql-snow .ql-color-picker.ql-background .ql-picker-item{background-color:#fff}.ql-snow .ql-color-picker.ql-color .ql-picker-item{background-color:#000}.ql-toolbar.ql-snow{border:1px solid #ccc;box-sizing:border-box;font-family:'Helvetica Neue',Helvetica,Arial,sans-serif;padding:8px}.ql-toolbar.ql-snow .ql-formats{margin-right:15px}.ql-toolbar.ql-snow .ql-picker-label{border:1px solid transparent}.ql-toolbar.ql-snow .ql-picker-options{border:1px solid transparent;box-shadow:rgba(0,0,0,.2) 0 2px 8px}.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-label,.ql-toolbar.ql-snow .ql-picker.ql-expanded .ql-picker-options{border-color:#ccc}.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item.ql-selected,.ql-toolbar.ql-snow .ql-color-picker .ql-picker-item:hover{border-color:#000}.ql-toolbar.ql-snow+.ql-container.ql-snow{border-top:0}.ql-snow .ql-tooltip{background-color:#fff;border:1px solid #ccc;box-shadow:0 0 5px #ddd;color:#444;padding:5px 12px;white-space:nowrap}.ql-snow .ql-tooltip::before{content:'Visit URL:';line-height:26px;margin-right:8px}.ql-snow .ql-tooltip input[type=text]{display:none;border:1px solid #ccc;font-size:13px;height:26px;margin:0;padding:3px 5px;width:170px}.ql-snow .ql-tooltip a.ql-preview{display:inline-block;max-width:200px;overflow-x:hidden;text-overflow:ellipsis;vertical-align:top}.ql-snow .ql-tooltip a.ql-action::after{border-right:1px solid #ccc;content:'Edit';margin-left:16px;padding-right:8px}.ql-snow .ql-tooltip a.ql-remove::before{content:'Remove';margin-left:8px}.ql-snow .ql-tooltip.ql-editing a.ql-preview,.ql-snow .ql-tooltip.ql-editing a.ql-remove{display:none}.ql-snow .ql-tooltip.ql-editing input[type=text]{display:inline-block}.ql-snow .ql-tooltip.ql-editing a.ql-action::after{border-right:0;content:'Save';padding-right:0}.ql-snow .ql-tooltip[data-mode=link]::before{content:'Enter link:'}.ql-snow .ql-tooltip[data-mode=formula]::before{content:'Enter formula:'}.ql-snow .ql-tooltip[data-mode=video]::before{content:'Enter video:'}.ql-snow a{color:#06c}.ql-container.ql-snow{border:1px solid #d9d9d9;border-top:1px solid #d9d9d9!important}.ql-toolbar.ql-snow{border-bottom:0;line-height:20px}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=SimSun]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=SimSun]::before{content:'\u5B8B\u4F53';font-family:SimSun}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=SimHei]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=SimHei]::before{content:'\u9ED1\u4F53';font-family:SimHei}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=Microsoft-YaHei]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=Microsoft-YaHei]::before{content:'\u5FAE\u8F6F\u96C5\u9ED1';font-family:'Microsoft YaHei'}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=KaiTi]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=KaiTi]::before{content:'\u6977\u4F53';font-family:KaiTi}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=FangSong]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=FangSong]::before{content:'\u4EFF\u5B8B';font-family:FangSong}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=Arial]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=Arial]::before{content:'Arial';font-family:Arial}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=Times]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=Times]::before{content:'Times New Roman';font-family:'Times New Roman';white-space:nowrap}.ql-snow .ql-picker.ql-font .ql-picker-item[data-value=sans-serif]::before,.ql-snow .ql-picker.ql-font .ql-picker-label[data-value=sans-serif]::before{content:'sans-serif';font-family:sans-serif}.ql-font-SimSun{font-family:SimSun}.ql-font-SimHei{font-family:SimHei}.ql-font-Microsoft-YaHei{font-family:'Microsoft YaHei'}.ql-font-KaiTi{font-family:KaiTi}.ql-font-FangSong{font-family:FangSong}.ql-font-Arial{font-family:Arial}.ql-font-Times{font-family:'Times New Roman'}.ql-font-sans-serif{font-family:sans-serif}.ql-toolbar [tooltip]{position:relative}.ql-toolbar [tooltip]::before{content:'';position:absolute;top:-4px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);border-width:4px 6px 0;border-style:solid;border-color:rgba(0,0,0,.7) transparent transparent;z-index:99;opacity:0}.ql-toolbar [tooltip-position=left]::before{left:0;top:50%;margin-left:-12px;-webkit-transform:translatey(-50%) rotate(-90deg);transform:translatey(-50%) rotate(-90deg)}.ql-toolbar [tooltip-position=top]::before{left:50%}.ql-toolbar [tooltip-position=bottom]::before{top:100%;margin-top:8px;-webkit-transform:translateX(-50%) translatey(-100%) rotate(-180deg);transform:translateX(-50%) translatey(-100%) rotate(-180deg)}.ql-toolbar [tooltip-position=right]::before{left:100%;top:50%;margin-left:1px;-webkit-transform:translatey(-50%) rotate(90deg);transform:translatey(-50%) rotate(90deg)}.ql-toolbar [tooltip]::after{content:attr(tooltip);position:absolute;left:50%;top:-4px;-webkit-transform:translateX(-50%) translateY(-100%);transform:translateX(-50%) translateY(-100%);background:rgba(0,0,0,.7);text-align:center;color:#fff;padding:4px;font-size:12px;min-width:70px;border-radius:5px;pointer-events:none;z-index:99;opacity:0}.ql-toolbar [tooltip-position=left]::after{left:0;top:50%;margin-left:-8px;-webkit-transform:translateX(-100%) translateY(-50%);transform:translateX(-100%) translateY(-50%)}.ql-toolbar [tooltip-position=top]::after{left:50%}.ql-toolbar [tooltip-position=bottom]::after{top:100%;margin-top:8px;-webkit-transform:translateX(-50%) translateY(0);transform:translateX(-50%) translateY(0)}.ql-toolbar [tooltip-position=right]::after{left:100%;top:50%;margin-left:8px;-webkit-transform:translateX(0) translateY(-50%);transform:translateX(0) translateY(-50%)}.ql-toolbar [tooltip]:hover::after,.ql-toolbar [tooltip]:hover::before{opacity:1}.quill-tooltip::before{content:'';position:absolute;bottom:-4px;left:50%;-webkit-transform:translateX(-50%);transform:translateX(-50%);border-width:4px 6px 0;border-style:solid;border-color:rgba(0,0,0,.7) transparent transparent;z-index:99}.ql-container.ql-snow,.ql-toolbar.ql-snow{border:none}.farris-html-editor{height:auto;border:1px solid #d9d9d9;display:block;padding:0}.farris-html-editor.farris-html-editor-disabled,.farris-html-editor.farris-html-editor-readonly{border:none}.ql-container.ql-disabled{border-top:none!important}.ql-bubble .ql-toolbar:after,.ql-bubble.ql-toolbar:after{clear:both;content:'';display:table}.ql-bubble .ql-toolbar button,.ql-bubble.ql-toolbar button{background:0 0;border:none;cursor:pointer;display:inline-block;float:left;height:24px;padding:3px 5px;width:28px}.ql-bubble .ql-toolbar button svg,.ql-bubble.ql-toolbar button svg{float:left;height:100%}.ql-bubble .ql-toolbar button:active:hover,.ql-bubble.ql-toolbar button:active:hover{outline:0}.ql-bubble .ql-toolbar input.ql-image[type=file],.ql-bubble.ql-toolbar input.ql-image[type=file]{display:none}.ql-bubble .ql-toolbar .ql-picker-item.ql-selected,.ql-bubble .ql-toolbar .ql-picker-item:hover,.ql-bubble .ql-toolbar .ql-picker-label.ql-active,.ql-bubble .ql-toolbar .ql-picker-label:hover,.ql-bubble .ql-toolbar button.ql-active,.ql-bubble .ql-toolbar button:focus,.ql-bubble .ql-toolbar button:hover,.ql-bubble.ql-toolbar .ql-picker-item.ql-selected,.ql-bubble.ql-toolbar .ql-picker-item:hover,.ql-bubble.ql-toolbar .ql-picker-label.ql-active,.ql-bubble.ql-toolbar .ql-picker-label:hover,.ql-bubble.ql-toolbar button.ql-active,.ql-bubble.ql-toolbar button:focus,.ql-bubble.ql-toolbar button:hover{color:#fff}.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-fill,.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-fill,.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-bubble .ql-toolbar button.ql-active .ql-fill,.ql-bubble .ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-bubble .ql-toolbar button:focus .ql-fill,.ql-bubble .ql-toolbar button:focus .ql-stroke.ql-fill,.ql-bubble .ql-toolbar button:hover .ql-fill,.ql-bubble .ql-toolbar button:hover .ql-stroke.ql-fill,.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-fill,.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke.ql-fill,.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-fill,.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke.ql-fill,.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-fill,.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke.ql-fill,.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-fill,.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke.ql-fill,.ql-bubble.ql-toolbar button.ql-active .ql-fill,.ql-bubble.ql-toolbar button.ql-active .ql-stroke.ql-fill,.ql-bubble.ql-toolbar button:focus .ql-fill,.ql-bubble.ql-toolbar button:focus .ql-stroke.ql-fill,.ql-bubble.ql-toolbar button:hover .ql-fill,.ql-bubble.ql-toolbar button:hover .ql-stroke.ql-fill{fill:#fff}.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-bubble .ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-bubble .ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-bubble .ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-bubble .ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-bubble .ql-toolbar button.ql-active .ql-stroke,.ql-bubble .ql-toolbar button.ql-active .ql-stroke-miter,.ql-bubble .ql-toolbar button:focus .ql-stroke,.ql-bubble .ql-toolbar button:focus .ql-stroke-miter,.ql-bubble .ql-toolbar button:hover .ql-stroke,.ql-bubble .ql-toolbar button:hover .ql-stroke-miter,.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke,.ql-bubble.ql-toolbar .ql-picker-item.ql-selected .ql-stroke-miter,.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke,.ql-bubble.ql-toolbar .ql-picker-item:hover .ql-stroke-miter,.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke,.ql-bubble.ql-toolbar .ql-picker-label.ql-active .ql-stroke-miter,.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke,.ql-bubble.ql-toolbar .ql-picker-label:hover .ql-stroke-miter,.ql-bubble.ql-toolbar button.ql-active .ql-stroke,.ql-bubble.ql-toolbar button.ql-active .ql-stroke-miter,.ql-bubble.ql-toolbar button:focus .ql-stroke,.ql-bubble.ql-toolbar button:focus .ql-stroke-miter,.ql-bubble.ql-toolbar button:hover .ql-stroke,.ql-bubble.ql-toolbar button:hover .ql-stroke-miter{stroke:#fff}@media (pointer:coarse){.ql-bubble .ql-toolbar button:hover:not(.ql-active),.ql-bubble.ql-toolbar button:hover:not(.ql-active){color:#ccc}.ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill,.ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-fill,.ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke.ql-fill{fill:#ccc}.ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-bubble .ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter,.ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke,.ql-bubble.ql-toolbar button:hover:not(.ql-active) .ql-stroke-miter{stroke:#ccc}}.ql-bubble,.ql-bubble *{box-sizing:border-box}.ql-bubble .ql-hidden{display:none}.ql-bubble .ql-out-bottom,.ql-bubble .ql-out-top{visibility:hidden}.ql-bubble .ql-tooltip{position:absolute;-webkit-transform:translateY(10px);transform:translateY(10px)}.ql-bubble .ql-tooltip a{cursor:pointer;text-decoration:none}.ql-bubble .ql-tooltip.ql-flip{-webkit-transform:translateY(-10px);transform:translateY(-10px)}.ql-bubble .ql-formats{display:inline-block;vertical-align:middle}.ql-bubble .ql-formats:after{clear:both;content:'';display:table}.ql-bubble .ql-stroke{fill:none;stroke:#ccc;stroke-linecap:round;stroke-linejoin:round;stroke-width:2}.ql-bubble .ql-stroke-miter{fill:none;stroke:#ccc;stroke-miterlimit:10;stroke-width:2}.ql-bubble .ql-fill,.ql-bubble .ql-stroke.ql-fill{fill:#ccc}.ql-bubble .ql-empty{fill:none}.ql-bubble .ql-even{fill-rule:evenodd}.ql-bubble .ql-stroke.ql-thin,.ql-bubble .ql-thin{stroke-width:1}.ql-bubble .ql-transparent{opacity:.4}.ql-bubble .ql-direction svg:last-child{display:none}.ql-bubble .ql-direction.ql-active svg:last-child{display:inline}.ql-bubble .ql-direction.ql-active svg:first-child{display:none}.ql-bubble .ql-editor h1{font-size:2em}.ql-bubble .ql-editor h2{font-size:1.5em}.ql-bubble .ql-editor h3{font-size:1.17em}.ql-bubble .ql-editor h4{font-size:1em}.ql-bubble .ql-editor h5{font-size:.83em}.ql-bubble .ql-editor h6{font-size:.67em}.ql-bubble .ql-editor a{text-decoration:underline}.ql-bubble .ql-editor blockquote{border-left:4px solid #ccc;margin-bottom:5px;margin-top:5px;padding-left:16px}.ql-bubble .ql-editor code,.ql-bubble .ql-editor pre{background-color:#f0f0f0;border-radius:3px}.ql-bubble .ql-editor pre{white-space:pre-wrap;margin-bottom:5px;margin-top:5px;padding:5px 10px}.ql-bubble .ql-editor code{font-size:85%;padding:2px 4px}.ql-bubble .ql-editor pre.ql-syntax{background-color:#23241f;color:#f8f8f2;overflow:visible}.ql-bubble .ql-editor img{max-width:100%}.ql-bubble .ql-picker{color:#ccc;display:inline-block;float:left;font-size:14px;font-weight:500;height:24px;position:relative;vertical-align:middle}.ql-bubble .ql-picker-label{cursor:pointer;display:inline-block;height:100%;padding-left:8px;padding-right:2px;position:relative;width:100%;overflow:hidden}.ql-bubble .ql-picker-label::before{display:inline-block;line-height:22px}.ql-bubble .ql-picker-options{background-color:#444;display:none;min-width:100%;padding:4px 8px;position:absolute;white-space:nowrap}.ql-bubble .ql-picker-options .ql-picker-item{cursor:pointer;display:block;padding-bottom:5px;padding-top:5px}.ql-bubble .ql-picker.ql-expanded .ql-picker-label{color:#777;z-index:2}.ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-fill{fill:#777}.ql-bubble .ql-picker.ql-expanded .ql-picker-label .ql-stroke{stroke:#777}.ql-bubble .ql-picker.ql-expanded .ql-picker-options{display:block;margin-top:-1px;top:100%;z-index:1}.ql-bubble .ql-color-picker,.ql-bubble .ql-icon-picker{width:28px}.ql-bubble .ql-color-picker .ql-picker-label,.ql-bubble .ql-icon-picker .ql-picker-label{padding:0 4px}.ql-bubble .ql-color-picker .ql-picker-label svg,.ql-bubble .ql-icon-picker .ql-picker-label svg{right:4px}.ql-bubble .ql-icon-picker .ql-picker-options{padding:4px 0}.ql-bubble .ql-icon-picker .ql-picker-item{height:24px;width:24px;padding:2px 4px}.ql-bubble .ql-color-picker .ql-picker-options{padding:3px 5px;width:152px}.ql-bubble .ql-color-picker .ql-picker-item{border:1px solid transparent;float:left;height:16px;margin:2px;padding:0;width:16px}.ql-bubble .ql-picker:not(.ql-color-picker):not(.ql-icon-picker) svg{position:absolute;margin-top:-9px;right:0;top:50%;width:18px;background-color:#fff}.ql-bubble .ql-picker.ql-font .ql-picker-item[data-label]:not([data-label=''])::before,.ql-bubble .ql-picker.ql-font .ql-picker-label[data-label]:not([data-label=''])::before,.ql-bubble .ql-picker.ql-header .ql-picker-item[data-label]:not([data-label=''])::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-label]:not([data-label=''])::before,.ql-bubble .ql-picker.ql-size .ql-picker-item[data-label]:not([data-label=''])::before,.ql-bubble .ql-picker.ql-size .ql-picker-label[data-label]:not([data-label=''])::before{content:attr(data-label)}.ql-bubble .ql-picker.ql-header{width:98px}.ql-bubble .ql-picker.ql-header .ql-picker-item::before,.ql-bubble .ql-picker.ql-header .ql-picker-label::before{content:'Normal'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"1\"]::before{content:'Heading 1'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"2\"]::before{content:'Heading 2'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"3\"]::before{content:'Heading 3'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"4\"]::before{content:'Heading 4'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"5\"]::before{content:'Heading 5'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before,.ql-bubble .ql-picker.ql-header .ql-picker-label[data-value=\"6\"]::before{content:'Heading 6'}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"1\"]::before{font-size:2em}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"2\"]::before{font-size:1.5em}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"3\"]::before{font-size:1.17em}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"4\"]::before{font-size:1em}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"5\"]::before{font-size:.83em}.ql-bubble .ql-picker.ql-header .ql-picker-item[data-value=\"6\"]::before{font-size:.67em}.ql-bubble .ql-picker.ql-font{width:108px}.ql-bubble .ql-picker.ql-font .ql-picker-item::before,.ql-bubble .ql-picker.ql-font .ql-picker-label::before{content:'Sans Serif'}.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before,.ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=serif]::before{content:'Serif'}.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before,.ql-bubble .ql-picker.ql-font .ql-picker-label[data-value=monospace]::before{content:'Monospace'}.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=serif]::before{font-family:Georgia,Times New Roman,serif}.ql-bubble .ql-picker.ql-font .ql-picker-item[data-value=monospace]::before{font-family:Monaco,Courier New,monospace}.ql-bubble .ql-picker.ql-size{width:98px}.ql-bubble .ql-picker.ql-size .ql-picker-item::before,.ql-bubble .ql-picker.ql-size .ql-picker-label::before{content:'Normal'}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before,.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=small]::before{content:'Small'}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before,.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=large]::before{content:'Large'}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before,.ql-bubble .ql-picker.ql-size .ql-picker-label[data-value=huge]::before{content:'Huge'}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=small]::before{font-size:10px}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=large]::before{font-size:18px}.ql-bubble .ql-picker.ql-size .ql-picker-item[data-value=huge]::before{font-size:32px}.ql-bubble .ql-color-picker.ql-background .ql-picker-item{background-color:#fff}.ql-bubble .ql-color-picker.ql-color .ql-picker-item{background-color:#000}.ql-bubble .ql-toolbar .ql-formats{margin:8px 12px 8px 0}.ql-bubble .ql-toolbar .ql-formats:first-child{margin-left:12px}.ql-bubble .ql-color-picker svg{margin:1px}.ql-bubble .ql-color-picker .ql-picker-item.ql-selected,.ql-bubble .ql-color-picker .ql-picker-item:hover{border-color:#fff}.ql-bubble .ql-tooltip{background-color:#444;border-radius:25px;color:#fff}.ql-bubble .ql-tooltip-arrow{border-left:6px solid transparent;border-right:6px solid transparent;content:\" \";display:block;left:50%;margin-left:-6px;position:absolute}.ql-bubble .ql-tooltip:not(.ql-flip) .ql-tooltip-arrow{border-bottom:6px solid #444;top:-6px}.ql-bubble .ql-tooltip.ql-flip .ql-tooltip-arrow{border-top:6px solid #444;bottom:-6px}.ql-bubble .ql-tooltip.ql-editing .ql-tooltip-editor{display:block}.ql-bubble .ql-tooltip.ql-editing .ql-formats{visibility:hidden}.ql-bubble .ql-tooltip-editor{display:none}.ql-bubble .ql-tooltip-editor input[type=text]{background:0 0;border:none;color:#fff;font-size:13px;height:100%;outline:0;padding:10px 20px;position:absolute;width:100%}.ql-bubble .ql-tooltip-editor a{top:10px;position:absolute;right:20px}.ql-bubble .ql-tooltip-editor a:before{color:#ccc;content:\"\\D7\";font-size:16px;font-weight:700}.ql-container.ql-bubble:not(.ql-disabled) a{position:relative;white-space:nowrap}.ql-container.ql-bubble:not(.ql-disabled) a::before{background-color:#444;border-radius:15px;top:-5px;font-size:12px;color:#fff;content:attr(href);font-weight:400;overflow:hidden;padding:5px 15px;text-decoration:none;z-index:1}.ql-container.ql-bubble:not(.ql-disabled) a::after{border-top:6px solid #444;border-left:6px solid transparent;border-right:6px solid transparent;top:0;content:\" \";height:0;width:0}.ql-container.ql-bubble:not(.ql-disabled) a::after,.ql-container.ql-bubble:not(.ql-disabled) a::before{left:0;margin-left:50%;position:absolute;-webkit-transform:translate(-50%,-100%);transform:translate(-50%,-100%);-webkit-transition:visibility .2s;transition:visibility .2s;visibility:hidden}.ql-container.ql-bubble:not(.ql-disabled) a:hover::after,.ql-container.ql-bubble:not(.ql-disabled) a:hover::before{visibility:visible}"]
            }] }
];
/** @nocollapse */
HtmlEditorComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DomSanitizer },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: Renderer2 },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [QUILL_CONFIG_TOKEN,] }] },
    { type: NotifyService, decorators: [{ type: Optional }] },
    { type: LocaleService, decorators: [{ type: Optional }] },
    { type: Injector, decorators: [{ type: Optional }] }
];
HtmlEditorComponent.propDecorators = {
    rootClass: [{ type: HostBinding, args: ['class',] }],
    readonly: [{ type: Input }, { type: HostBinding, args: ['class.farris-html-editor-readonly',] }],
    disabled: [{ type: Input }, { type: HostBinding, args: ['class.farris-html-editor-disabled',] }],
    showBorder: [{ type: Input }, { type: HostBinding, args: ['class.farris-html-editor-border',] }],
    format: [{ type: Input }],
    theme: [{ type: Input }],
    modules: [{ type: Input }],
    debug: [{ type: Input }],
    placeholder: [{ type: Input }],
    maxLength: [{ type: Input }],
    minLength: [{ type: Input }],
    required: [{ type: Input }],
    formats: [{ type: Input }],
    customToolbarPosition: [{ type: Input }],
    sanitize: [{ type: Input }],
    styles: [{ type: Input }],
    strict: [{ type: Input }],
    scrollingContainer: [{ type: Input }],
    bounds: [{ type: Input }],
    customOptions: [{ type: Input }],
    trackChanges: [{ type: Input }],
    preserveWhitespace: [{ type: Input }],
    limitImageSize: [{ type: Input }],
    maxImgSize: [{ type: Input }],
    customToolbar: [{ type: Input }],
    toolbar: [{ type: Input }],
    fontStyleBar: [{ type: Input }],
    BlockBar: [{ type: Input }],
    headerBar: [{ type: Input }],
    sizeBar: [{ type: Input }],
    listBar: [{ type: Input }],
    fontBar: [{ type: Input }],
    superAndSubscriptBar: [{ type: Input }],
    indentBar: [{ type: Input }],
    colorBar: [{ type: Input }],
    mediaBar: [{ type: Input }],
    imageBar: [{ type: Input }],
    videoBar: [{ type: Input }],
    cleanBar: [{ type: Input }],
    alignBar: [{ type: Input }],
    maxHeight: [{ type: Input }],
    minHeight: [{ type: Input }],
    autoHeight: [{ type: Input }],
    onEditorCreated: [{ type: Output }],
    onContentChanged: [{ type: Output }],
    onSelectionChanged: [{ type: Output }],
    onFocus: [{ type: Output }],
    onBlur: [{ type: Output }],
    imageUpload: [{ type: Input }],
    valueGetter: [{ type: Input }],
    valueSetter: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
const ɵ0$1 = { modules: defaultModules };
class FarrisHtmlEditorModule {
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config) {
        return {
            ngModule: FarrisHtmlEditorModule,
            providers: [
                {
                    provide: QUILL_CONFIG_TOKEN,
                    // tslint:disable-next-line:only-arrow-functions
                    useValue: config || { modules: defaultModules }
                }
            ]
        };
    }
}
FarrisHtmlEditorModule.decorators = [
    { type: NgModule, args: [{
                declarations: [HtmlEditorComponent],
                imports: [
                    NotifyModule.forRoot(),
                    LocaleModule.forRoot()
                ],
                exports: [HtmlEditorComponent],
                providers: [
                    {
                        provide: QUILL_CONFIG_TOKEN,
                        useValue: ɵ0$1
                    }
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { HtmlEditorComponent, FarrisHtmlEditorModule, defaultModules, toolbarOptions, QUILL_CONFIG_TOKEN as ɵb };

//# sourceMappingURL=farris-ui-html-editor.js.map