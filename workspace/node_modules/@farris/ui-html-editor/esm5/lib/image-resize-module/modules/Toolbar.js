/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BaseModule } from './BaseModule';
import Quill from 'quill';
/** @type {?} */
var Parchment = Quill.imports.parchment;
/** @type {?} */
var FloatStyle = new Parchment.Attributor.Style('float', 'float');
/** @type {?} */
var MarginStyle = new Parchment.Attributor.Style('margin', 'margin');
/** @type {?} */
var DisplayStyle = new Parchment.Attributor.Style('display', 'display');
var Toolbar = /** @class */ (function (_super) {
    tslib_1.__extends(Toolbar, _super);
    function Toolbar() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onCreate = (/**
         * @return {?}
         */
        function () {
            // Setup Toolbar
            _this.toolbar = document.createElement('div');
            Object.assign(_this.toolbar.style, _this.options.toolbarStyles);
            _this.overlay.appendChild(_this.toolbar);
            // Setup Buttons
            _this._defineAlignments();
            _this._addToolbarButtons();
        });
        // The toolbar and its children will be destroyed when the overlay is removed
        _this.onDestroy = (/**
         * @return {?}
         */
        function () { });
        // Nothing to update on drag because we are are positioned relative to the overlay
        _this.onUpdate = (/**
         * @return {?}
         */
        function () { });
        _this._defineAlignments = (/**
         * @return {?}
         */
        function () {
            _this.alignments = [
                {
                    icon: "<svg viewbox=\"0 0 18 18\">\n                <line class=\"ql-stroke\" x1=\"3\" x2=\"15\" y1=\"9\" y2=\"9\"></line>\n                <line class=\"ql-stroke\" x1=\"3\" x2=\"13\" y1=\"14\" y2=\"14\"></line>\n                <line class=\"ql-stroke\" x1=\"3\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n              </svg>",
                    apply: (/**
                     * @return {?}
                     */
                    function () {
                        DisplayStyle.add(_this.img, 'inline');
                        FloatStyle.add(_this.img, 'left');
                        MarginStyle.add(_this.img, '0 1em 1em 0');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    function () { return FloatStyle.value(_this.img) == 'left'; })
                },
                {
                    icon: "<svg viewbox=\"0 0 18 18\">\n                <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n                <line class=\"ql-stroke\" x1=\"14\" x2=\"4\" y1=\"14\" y2=\"14\"></line>\n                <line class=\"ql-stroke\" x1=\"12\" x2=\"6\" y1=\"4\" y2=\"4\"></line>\n              </svg>",
                    apply: (/**
                     * @return {?}
                     */
                    function () {
                        DisplayStyle.add(_this.img, 'block');
                        FloatStyle.remove(_this.img);
                        MarginStyle.add(_this.img, 'auto');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    function () { return MarginStyle.value(_this.img) == 'auto'; })
                },
                {
                    icon: "<svg viewbox=\"0 0 18 18\">\n                <line class=\"ql-stroke\" x1=\"15\" x2=\"3\" y1=\"9\" y2=\"9\"></line>\n                <line class=\"ql-stroke\" x1=\"15\" x2=\"5\" y1=\"14\" y2=\"14\"></line>\n                <line class=\"ql-stroke\" x1=\"15\" x2=\"9\" y1=\"4\" y2=\"4\"></line>\n              </svg>",
                    apply: (/**
                     * @return {?}
                     */
                    function () {
                        DisplayStyle.add(_this.img, 'inline');
                        FloatStyle.add(_this.img, 'right');
                        MarginStyle.add(_this.img, '0 0 1em 1em');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    function () { return FloatStyle.value(_this.img) == 'right'; })
                }
            ];
        });
        _this._addToolbarButtons = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var buttons = [];
            _this.alignments.forEach((/**
             * @param {?} alignment
             * @param {?} idx
             * @return {?}
             */
            function (alignment, idx) {
                /** @type {?} */
                var button = document.createElement('span');
                buttons.push(button);
                button.innerHTML = alignment.icon;
                button.addEventListener('click', (/**
                 * @return {?}
                 */
                function () {
                    // deselect all buttons
                    buttons.forEach((/**
                     * @param {?} button
                     * @return {?}
                     */
                    function (button) { return (button.style.filter = ''); }));
                    if (alignment.isApplied()) {
                        // If applied, unapply
                        FloatStyle.remove(_this.img);
                        MarginStyle.remove(_this.img);
                        DisplayStyle.remove(_this.img);
                    }
                    else {
                        // otherwise, select button and apply
                        _this._selectButton(button);
                        alignment.apply();
                    }
                    // image may change position; redraw drag handles
                    _this.requestUpdate();
                }));
                Object.assign(button.style, _this.options.toolbarButtonStyles);
                if (idx > 0) {
                    button.style.borderLeftWidth = '0';
                }
                Object.assign(
                // tslint:disable-next-line:object-literal-key-quotes
                button.children[0]['style'], _this.options.toolbarButtonSvgStyles);
                if (alignment.isApplied()) {
                    // select button if previously applied
                    _this._selectButton(button);
                }
                _this.toolbar.appendChild(button);
            }));
        });
        _this._selectButton = (/**
         * @param {?} button
         * @return {?}
         */
        function (button) {
            button.style.filter = 'invert(20%)';
        });
        return _this;
    }
    return Toolbar;
}(BaseModule));
export { Toolbar };
if (false) {
    /** @type {?} */
    Toolbar.prototype.toolbar;
    /** @type {?} */
    Toolbar.prototype.alignments;
    /** @type {?} */
    Toolbar.prototype.onCreate;
    /** @type {?} */
    Toolbar.prototype.onDestroy;
    /** @type {?} */
    Toolbar.prototype.onUpdate;
    /** @type {?} */
    Toolbar.prototype._defineAlignments;
    /** @type {?} */
    Toolbar.prototype._addToolbarButtons;
    /** @type {?} */
    Toolbar.prototype._selectButton;
}
//# sourceMappingURL=data:application/json;base64,