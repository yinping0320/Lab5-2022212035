/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BaseModule } from './BaseModule';
var DisplaySize = /** @class */ (function (_super) {
    tslib_1.__extends(DisplaySize, _super);
    function DisplaySize() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onCreate = (/**
         * @return {?}
         */
        function () {
            // Create the container to hold the size display
            _this.display = document.createElement('div');
            // Apply styles
            Object.assign(_this.display.style, _this.options.displayStyles);
            // Attach it
            _this.overlay.appendChild(_this.display);
        });
        _this.onDestroy = (/**
         * @return {?}
         */
        function () { });
        _this.onUpdate = (/**
         * @return {?}
         */
        function () {
            if (!_this.display || !_this.img) {
                return;
            }
            /** @type {?} */
            var size = _this.getCurrentSize();
            _this.display.innerHTML = size.join(' &times; ');
            if (size[0] > 120 && size[1] > 30) {
                // position on top of image
                Object.assign(_this.display.style, {
                    right: '4px',
                    bottom: '4px',
                    left: 'auto'
                });
            }
            else if (_this.img.style.float == 'right') {
                // position off bottom left
                /** @type {?} */
                var dispRect = _this.display.getBoundingClientRect();
                Object.assign(_this.display.style, {
                    right: 'auto',
                    bottom: "-" + (dispRect.height + 4) + "px",
                    left: "-" + (dispRect.width + 4) + "px"
                });
            }
            else {
                // position off bottom right
                /** @type {?} */
                var dispRect = _this.display.getBoundingClientRect();
                Object.assign(_this.display.style, {
                    right: "-" + (dispRect.width + 4) + "px",
                    bottom: "-" + (dispRect.height + 4) + "px",
                    left: 'auto'
                });
            }
        });
        _this.getCurrentSize = (/**
         * @return {?}
         */
        function () { return [
            _this.img.width,
            Math.round((_this.img.width / _this.img.naturalWidth) * _this.img.naturalHeight)
        ]; });
        return _this;
    }
    return DisplaySize;
}(BaseModule));
export { DisplaySize };
if (false) {
    /** @type {?} */
    DisplaySize.prototype.display;
    /** @type {?} */
    DisplaySize.prototype.onCreate;
    /** @type {?} */
    DisplaySize.prototype.onDestroy;
    /** @type {?} */
    DisplaySize.prototype.onUpdate;
    /** @type {?} */
    DisplaySize.prototype.getCurrentSize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzcGxheVNpemUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWh0bWwtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLXJlc2l6ZS1tb2R1bGUvbW9kdWxlcy9EaXNwbGF5U2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFFMUM7SUFBaUMsdUNBQVU7SUFBM0M7UUFBQSxxRUFzREM7UUFwREcsY0FBUTs7O1FBQUc7WUFDUCxnREFBZ0Q7WUFDaEQsS0FBSSxDQUFDLE9BQU8sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTdDLGVBQWU7WUFDZixNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEtBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFOUQsWUFBWTtZQUNaLEtBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQyxDQUFDLEVBQUM7UUFFRixlQUFTOzs7UUFBRyxjQUFPLENBQUMsRUFBQztRQUVyQixjQUFROzs7UUFBRztZQUNQLElBQUksQ0FBQyxLQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsS0FBSSxDQUFDLEdBQUcsRUFBRTtnQkFDNUIsT0FBTzthQUNWOztnQkFFSyxJQUFJLEdBQUcsS0FBSSxDQUFDLGNBQWMsRUFBRTtZQUNsQyxLQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUMvQiwyQkFBMkI7Z0JBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLEtBQUssRUFBRSxLQUFLO29CQUNaLE1BQU0sRUFBRSxLQUFLO29CQUNiLElBQUksRUFBRSxNQUFNO2lCQUNmLENBQUMsQ0FBQzthQUNOO2lCQUFNLElBQUksS0FBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLE9BQU8sRUFBRTs7O29CQUVsQyxRQUFRLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRTtnQkFDckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtvQkFDOUIsS0FBSyxFQUFFLE1BQU07b0JBQ2IsTUFBTSxFQUFFLE9BQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLFFBQUk7b0JBQ25DLElBQUksRUFBRSxPQUFJLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxRQUFJO2lCQUNuQyxDQUFDLENBQUM7YUFDTjtpQkFBTTs7O29CQUVHLFFBQVEsR0FBRyxLQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFO2dCQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO29CQUM5QixLQUFLLEVBQUUsT0FBSSxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsUUFBSTtvQkFDakMsTUFBTSxFQUFFLE9BQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLFFBQUk7b0JBQ25DLElBQUksRUFBRSxNQUFNO2lCQUNmLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxFQUFDO1FBRUYsb0JBQWM7OztRQUFHLGNBQU0sT0FBQTtZQUNuQixLQUFJLENBQUMsR0FBRyxDQUFDLEtBQUs7WUFDZCxJQUFJLENBQUMsS0FBSyxDQUNOLENBQUMsS0FBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsS0FBSSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsR0FBRyxLQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FDcEU7U0FDSixFQUxzQixDQUt0QixFQUFDOztJQUNOLENBQUM7SUFBRCxrQkFBQztBQUFELENBQUMsQUF0REQsQ0FBaUMsVUFBVSxHQXNEMUM7Ozs7SUFyREcsOEJBQVE7O0lBQ1IsK0JBU0U7O0lBRUYsZ0NBQXFCOztJQUVyQiwrQkErQkU7O0lBRUYscUNBS0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCYXNlTW9kdWxlIH0gZnJvbSAnLi9CYXNlTW9kdWxlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBEaXNwbGF5U2l6ZSBleHRlbmRzIEJhc2VNb2R1bGUge1xyXG4gICAgZGlzcGxheTtcclxuICAgIG9uQ3JlYXRlID0gKCkgPT4ge1xyXG4gICAgICAgIC8vIENyZWF0ZSB0aGUgY29udGFpbmVyIHRvIGhvbGQgdGhlIHNpemUgZGlzcGxheVxyXG4gICAgICAgIHRoaXMuZGlzcGxheSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG5cclxuICAgICAgICAvLyBBcHBseSBzdHlsZXNcclxuICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGlzcGxheS5zdHlsZSwgdGhpcy5vcHRpb25zLmRpc3BsYXlTdHlsZXMpO1xyXG5cclxuICAgICAgICAvLyBBdHRhY2ggaXRcclxuICAgICAgICB0aGlzLm92ZXJsYXkuYXBwZW5kQ2hpbGQodGhpcy5kaXNwbGF5KTtcclxuICAgIH07XHJcblxyXG4gICAgb25EZXN0cm95ID0gKCkgPT4ge307XHJcblxyXG4gICAgb25VcGRhdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRpc3BsYXkgfHwgIXRoaXMuaW1nKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHNpemUgPSB0aGlzLmdldEN1cnJlbnRTaXplKCk7XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5LmlubmVySFRNTCA9IHNpemUuam9pbignICZ0aW1lczsgJyk7XHJcbiAgICAgICAgaWYgKHNpemVbMF0gPiAxMjAgJiYgc2l6ZVsxXSA+IDMwKSB7XHJcbiAgICAgICAgICAgIC8vIHBvc2l0aW9uIG9uIHRvcCBvZiBpbWFnZVxyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGlzcGxheS5zdHlsZSwge1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICc0cHgnLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiAnNHB4JyxcclxuICAgICAgICAgICAgICAgIGxlZnQ6ICdhdXRvJ1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaW1nLnN0eWxlLmZsb2F0ID09ICdyaWdodCcpIHtcclxuICAgICAgICAgICAgLy8gcG9zaXRpb24gb2ZmIGJvdHRvbSBsZWZ0XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3BSZWN0ID0gdGhpcy5kaXNwbGF5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGlzcGxheS5zdHlsZSwge1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6ICdhdXRvJyxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogYC0ke2Rpc3BSZWN0LmhlaWdodCArIDR9cHhgLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogYC0ke2Rpc3BSZWN0LndpZHRoICsgNH1weGBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgLy8gcG9zaXRpb24gb2ZmIGJvdHRvbSByaWdodFxyXG4gICAgICAgICAgICBjb25zdCBkaXNwUmVjdCA9IHRoaXMuZGlzcGxheS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLmRpc3BsYXkuc3R5bGUsIHtcclxuICAgICAgICAgICAgICAgIHJpZ2h0OiBgLSR7ZGlzcFJlY3Qud2lkdGggKyA0fXB4YCxcclxuICAgICAgICAgICAgICAgIGJvdHRvbTogYC0ke2Rpc3BSZWN0LmhlaWdodCArIDR9cHhgLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogJ2F1dG8nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcblxyXG4gICAgZ2V0Q3VycmVudFNpemUgPSAoKSA9PiBbXHJcbiAgICAgICAgdGhpcy5pbWcud2lkdGgsXHJcbiAgICAgICAgTWF0aC5yb3VuZChcclxuICAgICAgICAgICAgKHRoaXMuaW1nLndpZHRoIC8gdGhpcy5pbWcubmF0dXJhbFdpZHRoKSAqIHRoaXMuaW1nLm5hdHVyYWxIZWlnaHRcclxuICAgICAgICApXHJcbiAgICBdO1xyXG59XHJcbiJdfQ==