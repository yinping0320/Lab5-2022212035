/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { BaseModule } from './BaseModule';
var Resize = /** @class */ (function (_super) {
    tslib_1.__extends(Resize, _super);
    function Resize() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onCreate = (/**
         * @return {?}
         */
        function () {
            // track resize handles
            _this.boxes = [];
            // add 4 resize handles
            _this.addBox('nwse-resize'); // top left
            _this.addBox('nesw-resize'); // top right
            _this.addBox('nwse-resize'); // bottom right
            _this.addBox('nesw-resize'); // bottom left
            _this.positionBoxes();
        });
        _this.onDestroy = (/**
         * @return {?}
         */
        function () {
            // reset drag handle cursors
            _this.setCursor('');
        });
        _this.positionBoxes = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var handleXOffset = -parseFloat(_this.options.handleStyles.width) /
                2 + "px";
            /** @type {?} */
            var handleYOffset = -parseFloat(_this.options.handleStyles.height) /
                2 + "px";
            // set the top and left for each drag handle
            [
                { left: handleXOffset, top: handleYOffset },
                { right: handleXOffset, top: handleYOffset },
                { right: handleXOffset, bottom: handleYOffset },
                { left: handleXOffset, bottom: handleYOffset } // bottom left
            ].forEach((/**
             * @param {?} pos
             * @param {?} idx
             * @return {?}
             */
            function (pos, idx) {
                Object.assign(_this.boxes[idx].style, pos);
            }));
        });
        _this.addBox = (/**
         * @param {?} cursor
         * @return {?}
         */
        function (cursor) {
            // create div element for resize handle
            /** @type {?} */
            var box = document.createElement('div');
            // Star with the specified styles
            Object.assign(box.style, _this.options.handleStyles);
            box.style.cursor = cursor;
            // Set the width/height to use 'px'
            box.style.width = _this.options.handleStyles.width + "px";
            box.style.height = _this.options.handleStyles.height + "px";
            // listen for mousedown on each box
            box.addEventListener('mousedown', _this.handleMousedown, false);
            // add drag handle to document
            _this.overlay.appendChild(box);
            // keep track of drag handle
            _this.boxes.push(box);
        });
        _this.handleMousedown = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            // note which box
            _this.dragBox = evt.target;
            // note starting mousedown position
            _this.dragStartX = evt.clientX;
            // store the width before the drag
            _this.preDragWidth = _this.img.width || _this.img.naturalWidth;
            // set the proper cursor everywhere
            _this.setCursor(_this.dragBox.style.cursor);
            // listen for movement and mouseup
            document.addEventListener('mousemove', _this.handleDrag, false);
            document.addEventListener('mouseup', _this.handleMouseup, false);
        });
        _this.handleMouseup = (/**
         * @return {?}
         */
        function () {
            // reset cursor everywhere
            _this.setCursor('');
            // stop listening for movement and mouseup
            document.removeEventListener('mousemove', _this.handleDrag);
            document.removeEventListener('mouseup', _this.handleMouseup);
        });
        _this.handleDrag = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (!_this.img) {
                // image not set yet
                return;
            }
            // update image size
            /** @type {?} */
            var deltaX = evt.clientX - _this.dragStartX;
            if (_this.dragBox === _this.boxes[0] || _this.dragBox === _this.boxes[3]) {
                // left-side resize handler; dragging right shrinks image
                _this.img.width = Math.round(_this.preDragWidth - deltaX);
            }
            else {
                // right-side resize handler; dragging right enlarges image
                _this.img.width = Math.round(_this.preDragWidth + deltaX);
            }
            _this.requestUpdate();
        });
        _this.setCursor = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            [document.body, _this.img].forEach((/**
             * @param {?} el
             * @return {?}
             */
            function (el) {
                el.style.cursor = value; // eslint-disable-line no-param-reassign
            }));
        });
        return _this;
    }
    return Resize;
}(BaseModule));
export { Resize };
if (false) {
    /** @type {?} */
    Resize.prototype.boxes;
    /** @type {?} */
    Resize.prototype.dragBox;
    /** @type {?} */
    Resize.prototype.dragStartX;
    /** @type {?} */
    Resize.prototype.preDragWidth;
    /** @type {?} */
    Resize.prototype.onCreate;
    /** @type {?} */
    Resize.prototype.onDestroy;
    /** @type {?} */
    Resize.prototype.positionBoxes;
    /** @type {?} */
    Resize.prototype.addBox;
    /** @type {?} */
    Resize.prototype.handleMousedown;
    /** @type {?} */
    Resize.prototype.handleMouseup;
    /** @type {?} */
    Resize.prototype.handleDrag;
    /** @type {?} */
    Resize.prototype.setCursor;
}
//# sourceMappingURL=data:application/json;base64,