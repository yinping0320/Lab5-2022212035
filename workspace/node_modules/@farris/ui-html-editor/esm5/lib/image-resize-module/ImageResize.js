/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import DefaultOptions from './DefaultOptions';
import { DisplaySize } from './modules/DisplaySize';
import { Toolbar } from './modules/Toolbar';
import { Resize } from './modules/Resize';
import Quill from 'quill';
/** @type {?} */
var knownModules = { DisplaySize: DisplaySize, Toolbar: Toolbar, Resize: Resize };
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
var /**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
ImageResize = /** @class */ (function () {
    function ImageResize(quill, options) {
        if (options === void 0) { options = {}; }
        var _this = this;
        this.initializeModules = (/**
         * @return {?}
         */
        function () {
            _this.removeModules();
            _this.modules = _this.moduleClasses.map((/**
             * @param {?} ModuleClass
             * @return {?}
             */
            function (ModuleClass) { return new (knownModules[ModuleClass] || ModuleClass)(_this); }));
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onCreate();
            }));
            _this.onUpdate();
        });
        this.onUpdate = (/**
         * @return {?}
         */
        function () {
            _this.repositionElements();
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onUpdate();
            }));
        });
        this.removeModules = (/**
         * @return {?}
         */
        function () {
            _this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            function (module) {
                module.onDestroy();
            }));
            _this.modules = [];
        });
        this.handleClick = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (evt.target &&
                evt.target.tagName &&
                evt.target.tagName.toUpperCase() === 'IMG') {
                if (_this.img === evt.target) {
                    // we are already focused on this image
                    return;
                }
                if (_this.img) {
                    // we were just focused on another image
                    _this.hide();
                }
                // clicked on an image inside the editor
                _this.show(evt.target);
            }
            else if (_this.img) {
                // clicked on a non image
                _this.hide();
            }
        });
        this.show = (/**
         * @param {?} img
         * @return {?}
         */
        function (img) {
            if (!_this.quill.isEnabled()) {
                return;
            }
            // keep track of this img element
            _this.img = img;
            _this.showOverlay();
            _this.initializeModules();
        });
        this.showOverlay = (/**
         * @return {?}
         */
        function () {
            if (_this.overlay) {
                _this.hideOverlay();
            }
            _this.quill.setSelection(null);
            // prevent spurious text selection
            _this.setUserSelect('none');
            // listen for the image being deleted or moved
            document.addEventListener('keyup', _this.checkImage, true);
            _this.quill.root.addEventListener('input', _this.checkImage, true);
            // Create and add the overlay
            _this.overlay = document.createElement('div');
            Object.assign(_this.overlay.style, _this.options.overlayStyles);
            _this.quill.root.parentNode.appendChild(_this.overlay);
            _this.repositionElements();
        });
        this.hideOverlay = (/**
         * @return {?}
         */
        function () {
            if (!_this.overlay) {
                return;
            }
            // Remove the overlay
            _this.quill.root.parentNode.removeChild(_this.overlay);
            _this.overlay = undefined;
            // stop listening for image deletion or movement
            document.removeEventListener('keyup', _this.checkImage);
            _this.quill.root.removeEventListener('input', _this.checkImage);
            // reset user-select
            _this.setUserSelect('');
        });
        this.repositionElements = (/**
         * @return {?}
         */
        function () {
            if (!_this.overlay || !_this.img) {
                return;
            }
            // position the overlay over the image
            /** @type {?} */
            var parent = _this.quill.root.parentNode;
            /** @type {?} */
            var imgRect = _this.img.getBoundingClientRect();
            /** @type {?} */
            var containerRect = parent.getBoundingClientRect();
            Object.assign(_this.overlay.style, {
                left: imgRect.left -
                    containerRect.left +
                    parent.scrollLeft -
                    2 + "px",
                top: imgRect.top - containerRect.top + parent.scrollTop - 2 + "px",
                width: imgRect.width + 2 + "px",
                height: imgRect.height + 2 + "px"
            });
        });
        this.hide = (/**
         * @return {?}
         */
        function () {
            _this.hideOverlay();
            _this.removeModules();
            _this.img = undefined;
        });
        this.setUserSelect = (/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            [
                'userSelect',
                'mozUserSelect',
                'webkitUserSelect',
                'msUserSelect'
            ].forEach((/**
             * @param {?} prop
             * @return {?}
             */
            function (prop) {
                // set on contenteditable element and <html>
                _this.quill.root.style[prop] = value;
                document.documentElement.style[prop] = value;
            }));
        });
        this.checkImage = (/**
         * @param {?} evt
         * @return {?}
         */
        function (evt) {
            if (_this.img) {
                if (evt.keyCode == 46 || evt.keyCode == 8) {
                    Quill.find(_this.img).deleteAt(0);
                }
                _this.hide();
            }
        });
        // save the quill reference and options
        this.quill = quill;
        // Apply the options to our defaults, and stash them for later
        // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately
        /** @type {?} */
        var moduleClasses = false;
        // tslint:disable-next-line:object-literal-key-quotes
        if (options['modules']) {
            moduleClasses = options['modules'].slice();
        }
        // Apply options to default options
        //this.options = defaultsDeep({}, options, DefaultOptions);
        this.options = Object.assign({}, options, DefaultOptions);
        // (see above about moduleClasses)
        if (moduleClasses !== false) {
            this.options.modules = moduleClasses;
        }
        // disable native image resizing on firefox
        document.execCommand('enableObjectResizing', false, 'false');
        // respond to clicks inside the editor
        this.quill.root.addEventListener('click', this.handleClick, false);
        this.quill.root.parentNode.style.position =
            this.quill.root.parentNode.style.position || 'relative';
        // setup modules
        this.moduleClasses = this.options.modules;
        //console.log('this.options.modules', this.options.modules)
        this.modules = [];
    }
    return ImageResize;
}());
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
export { ImageResize };
if (false) {
    /** @type {?} */
    ImageResize.prototype.quill;
    /** @type {?} */
    ImageResize.prototype.options;
    /** @type {?} */
    ImageResize.prototype.moduleClasses;
    /** @type {?} */
    ImageResize.prototype.modules;
    /** @type {?} */
    ImageResize.prototype.img;
    /** @type {?} */
    ImageResize.prototype.overlay;
    /** @type {?} */
    ImageResize.prototype.initializeModules;
    /** @type {?} */
    ImageResize.prototype.onUpdate;
    /** @type {?} */
    ImageResize.prototype.removeModules;
    /** @type {?} */
    ImageResize.prototype.handleClick;
    /** @type {?} */
    ImageResize.prototype.show;
    /** @type {?} */
    ImageResize.prototype.showOverlay;
    /** @type {?} */
    ImageResize.prototype.hideOverlay;
    /** @type {?} */
    ImageResize.prototype.repositionElements;
    /** @type {?} */
    ImageResize.prototype.hide;
    /** @type {?} */
    ImageResize.prototype.setUserSelect;
    /** @type {?} */
    ImageResize.prototype.checkImage;
}
//# sourceMappingURL=data:application/json;base64,