/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { tooltips } from './tooltip-list';
import { getScrollParent } from './utils/scrollInfo';
/** @type {?} */
var tooltipStyles = {
    minWidth: '70px',
    position: 'absolute',
    padding: '4px 8px',
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    color: '#fff',
    cursor: 'default',
    borderRadius: '4px',
    fontSize: '12px',
    top: '-9999px',
    visibility: 'hidden',
    'z-index': '9999'
};
var Tooltip = /** @class */ (function () {
    function Tooltip(quill, ngZone) {
        var e_1, _a, e_2, _b;
        this.ngZone = ngZone;
        this.quill = quill;
        this.toolbar = quill.getModule('toolbar');
        this.buttons = null;
        this.selectors = null;
        this.tip = null;
        this.timeout = null;
        this.mouseenterHandler = null;
        this.mouseleaveHandler = null;
        /** @type {?} */
        var toolbarElement = this.toolbar.container;
        if (toolbarElement) {
            // 添加处理事件
            this.buttons = toolbarElement.querySelectorAll('button');
            this.selectors = toolbarElement.querySelectorAll('.ql-picker');
            try {
                for (var _c = tslib_1.__values(this.buttons), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var el = _d.value;
                    this.addHandler(el);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_1) throw e_1.error; }
            }
            try {
                for (var _e = tslib_1.__values(this.selectors), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var el = _f.value;
                    this.addHandler(el);
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_2) throw e_2.error; }
            }
            // 创建tooltip
            this.createTooltip();
            // 滚动元素增加handler
            this.scrollElm = getScrollParent(toolbarElement);
            this.scrollElm.addEventListener('scroll', this.mouseleaveHandler);
        }
    }
    /**
     * @return {?}
     */
    Tooltip.prototype.createTooltip = /**
     * @return {?}
     */
    function () {
        this.tip = document.createElement('div');
        this.tip.classList.add('quill-tooltip');
        Object.assign(this.tip.style, tooltipStyles);
        document.body.appendChild(this.tip);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    Tooltip.prototype.addHandler = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        var _this = this;
        this.mouseenterHandler = (/**
         * @return {?}
         */
        function () {
            // this.ngZone.runOutsideAngular(() => {
            //     this.timeout = setTimeout(() => {
            //         this.showTooltip(el);
            //     }, 100);
            // });
            _this.timeout = setTimeout((/**
             * @return {?}
             */
            function () {
                _this.showTooltip(el);
            }), 100);
        });
        this.mouseleaveHandler = (/**
         * @return {?}
         */
        function () {
            if (_this.timeout) {
                // this.ngZone.runOutsideAngular(() => {
                //     clearTimeout(this.timeout);
                // });
                clearTimeout(_this.timeout);
            }
            _this.hideTooltip();
        });
        // if (this.ngZone && this.ngZone.runOutsideAngular) {
        //     this.ngZone.runOutsideAngular(() => {
        //         el.addEventListener('mouseenter', this.mouseenterHandler);
        //         el.addEventListener('mouseleave', this.mouseleaveHandler);
        //     });
        // }
        el.addEventListener('mouseenter', this.mouseenterHandler);
        el.addEventListener('mouseleave', this.mouseleaveHandler);
    };
    /**
     * @param {?} el
     * @return {?}
     */
    Tooltip.prototype.showTooltip = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        // let format = el.className.replace('ql-', '')
        // let format = el.className.replace('ql-', '')
        /** @type {?} */
        var LOCALE_ID = this.quill.options.localeId || 'zh-CHS';
        /** @type {?} */
        var format = [].find
            .call(el.classList, (/**
         * @param {?} className
         * @return {?}
         */
        function (className) {
            return className.indexOf('ql-') === 0;
        }))
            .replace('ql-', '');
        /** @type {?} */
        var tool = tooltips[LOCALE_ID][format];
        if (tool) {
            if (typeof tool === 'string') {
                this.tip.textContent = tool;
            }
            else {
                /** @type {?} */
                var value = el.value || '';
                if (value != null && tool[value]) {
                    this.tip.textContent = tool[value];
                }
            }
            /** @type {?} */
            var elRect = el.getBoundingClientRect();
            /** @type {?} */
            var tipRect = this.tip.getBoundingClientRect();
            /** @type {?} */
            var body = document.documentElement || document.body;
            /** @type {?} */
            var bodyRect = {
                width: body.scrollWidth,
                height: body.scrollHeight,
                scrollTop: body.scrollTop,
                scrollLeft: body.scrollLeft
            };
            /** @type {?} */
            var offset = 3;
            Object.assign(this.tip.style, {
                top: elRect.top - elRect.height - offset + bodyRect.scrollTop + 'px',
                left: elRect.left - (tipRect.width - elRect.width) / 2 + bodyRect.scrollLeft + 'px',
                visibility: 'visible'
            });
        }
    };
    /**
     * @return {?}
     */
    Tooltip.prototype.hideTooltip = /**
     * @return {?}
     */
    function () {
        Object.assign(this.tip.style, {
            top: '-9999px',
            visibility: 'hidden'
        });
    };
    /**
     * @return {?}
     */
    Tooltip.prototype.onDestroy = /**
     * @return {?}
     */
    function () {
        var e_3, _a, e_4, _b;
        // console.warn('ondestroy');
        this.destroyTooltip();
        if (this.buttons) {
            try {
                for (var _c = tslib_1.__values(this.buttons), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var el = _d.value;
                    this.removeHandler(el);
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                }
                finally { if (e_3) throw e_3.error; }
            }
        }
        if (this.selectors) {
            try {
                for (var _e = tslib_1.__values(this.selectors), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var el = _f.value;
                    this.removeHandler(el);
                }
            }
            catch (e_4_1) { e_4 = { error: e_4_1 }; }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                }
                finally { if (e_4) throw e_4.error; }
            }
        }
        if (this.scrollElm) {
            this.scrollElm.removeEventListener('scroll', this.mouseleaveHandler);
        }
    };
    /**
     * @return {?}
     */
    Tooltip.prototype.destroyTooltip = /**
     * @return {?}
     */
    function () {
        if (this.tip.parentNode) {
            this.tip.parentNode.removeChild(this.tip);
        }
    };
    /**
     * @param {?} el
     * @return {?}
     */
    Tooltip.prototype.removeHandler = /**
     * @param {?} el
     * @return {?}
     */
    function (el) {
        el.removeEventListener('mouseenter', this.mouseenterHandler);
        el.removeEventListener('mouseleave', this.mouseleaveHandler);
    };
    return Tooltip;
}());
export { Tooltip };
if (false) {
    /** @type {?} */
    Tooltip.prototype.quill;
    /** @type {?} */
    Tooltip.prototype.toolbar;
    /** @type {?} */
    Tooltip.prototype.buttons;
    /** @type {?} */
    Tooltip.prototype.tip;
    /** @type {?} */
    Tooltip.prototype.selectors;
    /** @type {?} */
    Tooltip.prototype.mouseenterHandler;
    /** @type {?} */
    Tooltip.prototype.mouseleaveHandler;
    /** @type {?} */
    Tooltip.prototype.timeout;
    /** @type {?} */
    Tooltip.prototype.scrollElm;
    /**
     * @type {?}
     * @private
     */
    Tooltip.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,