/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { tooltips } from './tooltip-list';
import { getScrollParent } from './utils/scrollInfo';
/** @type {?} */
const tooltipStyles = {
    minWidth: '70px',
    position: 'absolute',
    padding: '4px 8px',
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.7)',
    color: '#fff',
    cursor: 'default',
    borderRadius: '4px',
    fontSize: '12px',
    top: '-9999px',
    visibility: 'hidden',
    'z-index': '9999'
};
export class Tooltip {
    /**
     * @param {?} quill
     * @param {?} ngZone
     */
    constructor(quill, ngZone) {
        this.ngZone = ngZone;
        this.quill = quill;
        this.toolbar = quill.getModule('toolbar');
        this.buttons = null;
        this.selectors = null;
        this.tip = null;
        this.timeout = null;
        this.mouseenterHandler = null;
        this.mouseleaveHandler = null;
        /** @type {?} */
        const toolbarElement = this.toolbar.container;
        if (toolbarElement) {
            // 添加处理事件
            this.buttons = toolbarElement.querySelectorAll('button');
            this.selectors = toolbarElement.querySelectorAll('.ql-picker');
            for (let el of this.buttons) {
                this.addHandler(el);
            }
            for (let el of this.selectors) {
                this.addHandler(el);
            }
            // 创建tooltip
            this.createTooltip();
            // 滚动元素增加handler
            this.scrollElm = getScrollParent(toolbarElement);
            this.scrollElm.addEventListener('scroll', this.mouseleaveHandler);
        }
    }
    /**
     * @return {?}
     */
    createTooltip() {
        this.tip = document.createElement('div');
        this.tip.classList.add('quill-tooltip');
        Object.assign(this.tip.style, tooltipStyles);
        document.body.appendChild(this.tip);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    addHandler(el) {
        this.mouseenterHandler = (/**
         * @return {?}
         */
        () => {
            // this.ngZone.runOutsideAngular(() => {
            //     this.timeout = setTimeout(() => {
            //         this.showTooltip(el);
            //     }, 100);
            // });
            this.timeout = setTimeout((/**
             * @return {?}
             */
            () => {
                this.showTooltip(el);
            }), 100);
        });
        this.mouseleaveHandler = (/**
         * @return {?}
         */
        () => {
            if (this.timeout) {
                // this.ngZone.runOutsideAngular(() => {
                //     clearTimeout(this.timeout);
                // });
                clearTimeout(this.timeout);
            }
            this.hideTooltip();
        });
        // if (this.ngZone && this.ngZone.runOutsideAngular) {
        //     this.ngZone.runOutsideAngular(() => {
        //         el.addEventListener('mouseenter', this.mouseenterHandler);
        //         el.addEventListener('mouseleave', this.mouseleaveHandler);
        //     });
        // }
        el.addEventListener('mouseenter', this.mouseenterHandler);
        el.addEventListener('mouseleave', this.mouseleaveHandler);
    }
    /**
     * @param {?} el
     * @return {?}
     */
    showTooltip(el) {
        // let format = el.className.replace('ql-', '')
        // let format = el.className.replace('ql-', '')
        /** @type {?} */
        const LOCALE_ID = this.quill.options.localeId || 'zh-CHS';
        /** @type {?} */
        const format = [].find
            .call(el.classList, (/**
         * @param {?} className
         * @return {?}
         */
        className => {
            return className.indexOf('ql-') === 0;
        }))
            .replace('ql-', '');
        /** @type {?} */
        const tool = tooltips[LOCALE_ID][format];
        if (tool) {
            if (typeof tool === 'string') {
                this.tip.textContent = tool;
            }
            else {
                /** @type {?} */
                const value = el.value || '';
                if (value != null && tool[value]) {
                    this.tip.textContent = tool[value];
                }
            }
            /** @type {?} */
            const elRect = el.getBoundingClientRect();
            /** @type {?} */
            const tipRect = this.tip.getBoundingClientRect();
            /** @type {?} */
            const body = document.documentElement || document.body;
            /** @type {?} */
            const bodyRect = {
                width: body.scrollWidth,
                height: body.scrollHeight,
                scrollTop: body.scrollTop,
                scrollLeft: body.scrollLeft
            };
            /** @type {?} */
            const offset = 3;
            Object.assign(this.tip.style, {
                top: elRect.top - elRect.height - offset + bodyRect.scrollTop + 'px',
                left: elRect.left - (tipRect.width - elRect.width) / 2 + bodyRect.scrollLeft + 'px',
                visibility: 'visible'
            });
        }
    }
    /**
     * @return {?}
     */
    hideTooltip() {
        Object.assign(this.tip.style, {
            top: '-9999px',
            visibility: 'hidden'
        });
    }
    /**
     * @return {?}
     */
    onDestroy() {
        // console.warn('ondestroy');
        this.destroyTooltip();
        if (this.buttons) {
            for (let el of this.buttons) {
                this.removeHandler(el);
            }
        }
        if (this.selectors) {
            for (let el of this.selectors) {
                this.removeHandler(el);
            }
        }
        if (this.scrollElm) {
            this.scrollElm.removeEventListener('scroll', this.mouseleaveHandler);
        }
    }
    /**
     * @return {?}
     */
    destroyTooltip() {
        if (this.tip.parentNode) {
            this.tip.parentNode.removeChild(this.tip);
        }
    }
    /**
     * @param {?} el
     * @return {?}
     */
    removeHandler(el) {
        el.removeEventListener('mouseenter', this.mouseenterHandler);
        el.removeEventListener('mouseleave', this.mouseleaveHandler);
    }
}
if (false) {
    /** @type {?} */
    Tooltip.prototype.quill;
    /** @type {?} */
    Tooltip.prototype.toolbar;
    /** @type {?} */
    Tooltip.prototype.buttons;
    /** @type {?} */
    Tooltip.prototype.tip;
    /** @type {?} */
    Tooltip.prototype.selectors;
    /** @type {?} */
    Tooltip.prototype.mouseenterHandler;
    /** @type {?} */
    Tooltip.prototype.mouseleaveHandler;
    /** @type {?} */
    Tooltip.prototype.timeout;
    /** @type {?} */
    Tooltip.prototype.scrollElm;
    /**
     * @type {?}
     * @private
     */
    Tooltip.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,