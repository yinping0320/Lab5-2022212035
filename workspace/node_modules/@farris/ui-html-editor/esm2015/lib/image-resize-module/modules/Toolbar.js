/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseModule } from './BaseModule';
import Quill from 'quill';
/** @type {?} */
const Parchment = Quill.imports.parchment;
/** @type {?} */
const FloatStyle = new Parchment.Attributor.Style('float', 'float');
/** @type {?} */
const MarginStyle = new Parchment.Attributor.Style('margin', 'margin');
/** @type {?} */
const DisplayStyle = new Parchment.Attributor.Style('display', 'display');
export class Toolbar extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // Setup Toolbar
            this.toolbar = document.createElement('div');
            Object.assign(this.toolbar.style, this.options.toolbarStyles);
            this.overlay.appendChild(this.toolbar);
            // Setup Buttons
            this._defineAlignments();
            this._addToolbarButtons();
        });
        // The toolbar and its children will be destroyed when the overlay is removed
        this.onDestroy = (/**
         * @return {?}
         */
        () => { });
        // Nothing to update on drag because we are are positioned relative to the overlay
        this.onUpdate = (/**
         * @return {?}
         */
        () => { });
        this._defineAlignments = (/**
         * @return {?}
         */
        () => {
            this.alignments = [
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="3" x2="15" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="3" x2="13" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="3" x2="9" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'inline');
                        FloatStyle.add(this.img, 'left');
                        MarginStyle.add(this.img, '0 1em 1em 0');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => FloatStyle.value(this.img) == 'left')
                },
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="14" x2="4" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="12" x2="6" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'block');
                        FloatStyle.remove(this.img);
                        MarginStyle.add(this.img, 'auto');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => MarginStyle.value(this.img) == 'auto')
                },
                {
                    icon: `<svg viewbox="0 0 18 18">
                <line class="ql-stroke" x1="15" x2="3" y1="9" y2="9"></line>
                <line class="ql-stroke" x1="15" x2="5" y1="14" y2="14"></line>
                <line class="ql-stroke" x1="15" x2="9" y1="4" y2="4"></line>
              </svg>`,
                    apply: (/**
                     * @return {?}
                     */
                    () => {
                        DisplayStyle.add(this.img, 'inline');
                        FloatStyle.add(this.img, 'right');
                        MarginStyle.add(this.img, '0 0 1em 1em');
                    }),
                    isApplied: (/**
                     * @return {?}
                     */
                    () => FloatStyle.value(this.img) == 'right')
                }
            ];
        });
        this._addToolbarButtons = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const buttons = [];
            this.alignments.forEach((/**
             * @param {?} alignment
             * @param {?} idx
             * @return {?}
             */
            (alignment, idx) => {
                /** @type {?} */
                const button = document.createElement('span');
                buttons.push(button);
                button.innerHTML = alignment.icon;
                button.addEventListener('click', (/**
                 * @return {?}
                 */
                () => {
                    // deselect all buttons
                    buttons.forEach((/**
                     * @param {?} button
                     * @return {?}
                     */
                    button => (button.style.filter = '')));
                    if (alignment.isApplied()) {
                        // If applied, unapply
                        FloatStyle.remove(this.img);
                        MarginStyle.remove(this.img);
                        DisplayStyle.remove(this.img);
                    }
                    else {
                        // otherwise, select button and apply
                        this._selectButton(button);
                        alignment.apply();
                    }
                    // image may change position; redraw drag handles
                    this.requestUpdate();
                }));
                Object.assign(button.style, this.options.toolbarButtonStyles);
                if (idx > 0) {
                    button.style.borderLeftWidth = '0';
                }
                Object.assign(
                // tslint:disable-next-line:object-literal-key-quotes
                button.children[0]['style'], this.options.toolbarButtonSvgStyles);
                if (alignment.isApplied()) {
                    // select button if previously applied
                    this._selectButton(button);
                }
                this.toolbar.appendChild(button);
            }));
        });
        this._selectButton = (/**
         * @param {?} button
         * @return {?}
         */
        button => {
            button.style.filter = 'invert(20%)';
        });
    }
}
if (false) {
    /** @type {?} */
    Toolbar.prototype.toolbar;
    /** @type {?} */
    Toolbar.prototype.alignments;
    /** @type {?} */
    Toolbar.prototype.onCreate;
    /** @type {?} */
    Toolbar.prototype.onDestroy;
    /** @type {?} */
    Toolbar.prototype.onUpdate;
    /** @type {?} */
    Toolbar.prototype._defineAlignments;
    /** @type {?} */
    Toolbar.prototype._addToolbarButtons;
    /** @type {?} */
    Toolbar.prototype._selectButton;
}
//# sourceMappingURL=data:application/json;base64,