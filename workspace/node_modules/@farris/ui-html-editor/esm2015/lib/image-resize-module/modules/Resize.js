/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseModule } from './BaseModule';
export class Resize extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // track resize handles
            this.boxes = [];
            // add 4 resize handles
            this.addBox('nwse-resize'); // top left
            this.addBox('nesw-resize'); // top right
            this.addBox('nwse-resize'); // bottom right
            this.addBox('nesw-resize'); // bottom left
            this.positionBoxes();
        });
        this.onDestroy = (/**
         * @return {?}
         */
        () => {
            // reset drag handle cursors
            this.setCursor('');
        });
        this.positionBoxes = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const handleXOffset = `${-parseFloat(this.options.handleStyles.width) /
                2}px`;
            /** @type {?} */
            const handleYOffset = `${-parseFloat(this.options.handleStyles.height) /
                2}px`;
            // set the top and left for each drag handle
            [
                { left: handleXOffset, top: handleYOffset },
                { right: handleXOffset, top: handleYOffset },
                { right: handleXOffset, bottom: handleYOffset },
                { left: handleXOffset, bottom: handleYOffset } // bottom left
            ].forEach((/**
             * @param {?} pos
             * @param {?} idx
             * @return {?}
             */
            (pos, idx) => {
                Object.assign(this.boxes[idx].style, pos);
            }));
        });
        this.addBox = (/**
         * @param {?} cursor
         * @return {?}
         */
        cursor => {
            // create div element for resize handle
            /** @type {?} */
            const box = document.createElement('div');
            // Star with the specified styles
            Object.assign(box.style, this.options.handleStyles);
            box.style.cursor = cursor;
            // Set the width/height to use 'px'
            box.style.width = `${this.options.handleStyles.width}px`;
            box.style.height = `${this.options.handleStyles.height}px`;
            // listen for mousedown on each box
            box.addEventListener('mousedown', this.handleMousedown, false);
            // add drag handle to document
            this.overlay.appendChild(box);
            // keep track of drag handle
            this.boxes.push(box);
        });
        this.handleMousedown = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            // note which box
            this.dragBox = evt.target;
            // note starting mousedown position
            this.dragStartX = evt.clientX;
            // store the width before the drag
            this.preDragWidth = this.img.width || this.img.naturalWidth;
            // set the proper cursor everywhere
            this.setCursor(this.dragBox.style.cursor);
            // listen for movement and mouseup
            document.addEventListener('mousemove', this.handleDrag, false);
            document.addEventListener('mouseup', this.handleMouseup, false);
        });
        this.handleMouseup = (/**
         * @return {?}
         */
        () => {
            // reset cursor everywhere
            this.setCursor('');
            // stop listening for movement and mouseup
            document.removeEventListener('mousemove', this.handleDrag);
            document.removeEventListener('mouseup', this.handleMouseup);
        });
        this.handleDrag = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (!this.img) {
                // image not set yet
                return;
            }
            // update image size
            /** @type {?} */
            const deltaX = evt.clientX - this.dragStartX;
            if (this.dragBox === this.boxes[0] || this.dragBox === this.boxes[3]) {
                // left-side resize handler; dragging right shrinks image
                this.img.width = Math.round(this.preDragWidth - deltaX);
            }
            else {
                // right-side resize handler; dragging right enlarges image
                this.img.width = Math.round(this.preDragWidth + deltaX);
            }
            this.requestUpdate();
        });
        this.setCursor = (/**
         * @param {?} value
         * @return {?}
         */
        value => {
            [document.body, this.img].forEach((/**
             * @param {?} el
             * @return {?}
             */
            el => {
                el.style.cursor = value; // eslint-disable-line no-param-reassign
            }));
        });
    }
}
if (false) {
    /** @type {?} */
    Resize.prototype.boxes;
    /** @type {?} */
    Resize.prototype.dragBox;
    /** @type {?} */
    Resize.prototype.dragStartX;
    /** @type {?} */
    Resize.prototype.preDragWidth;
    /** @type {?} */
    Resize.prototype.onCreate;
    /** @type {?} */
    Resize.prototype.onDestroy;
    /** @type {?} */
    Resize.prototype.positionBoxes;
    /** @type {?} */
    Resize.prototype.addBox;
    /** @type {?} */
    Resize.prototype.handleMousedown;
    /** @type {?} */
    Resize.prototype.handleMouseup;
    /** @type {?} */
    Resize.prototype.handleDrag;
    /** @type {?} */
    Resize.prototype.setCursor;
}
//# sourceMappingURL=data:application/json;base64,