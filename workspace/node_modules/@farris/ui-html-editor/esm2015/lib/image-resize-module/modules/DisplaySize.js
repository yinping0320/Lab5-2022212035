/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BaseModule } from './BaseModule';
export class DisplaySize extends BaseModule {
    constructor() {
        super(...arguments);
        this.onCreate = (/**
         * @return {?}
         */
        () => {
            // Create the container to hold the size display
            this.display = document.createElement('div');
            // Apply styles
            Object.assign(this.display.style, this.options.displayStyles);
            // Attach it
            this.overlay.appendChild(this.display);
        });
        this.onDestroy = (/**
         * @return {?}
         */
        () => { });
        this.onUpdate = (/**
         * @return {?}
         */
        () => {
            if (!this.display || !this.img) {
                return;
            }
            /** @type {?} */
            const size = this.getCurrentSize();
            this.display.innerHTML = size.join(' &times; ');
            if (size[0] > 120 && size[1] > 30) {
                // position on top of image
                Object.assign(this.display.style, {
                    right: '4px',
                    bottom: '4px',
                    left: 'auto'
                });
            }
            else if (this.img.style.float == 'right') {
                // position off bottom left
                /** @type {?} */
                const dispRect = this.display.getBoundingClientRect();
                Object.assign(this.display.style, {
                    right: 'auto',
                    bottom: `-${dispRect.height + 4}px`,
                    left: `-${dispRect.width + 4}px`
                });
            }
            else {
                // position off bottom right
                /** @type {?} */
                const dispRect = this.display.getBoundingClientRect();
                Object.assign(this.display.style, {
                    right: `-${dispRect.width + 4}px`,
                    bottom: `-${dispRect.height + 4}px`,
                    left: 'auto'
                });
            }
        });
        this.getCurrentSize = (/**
         * @return {?}
         */
        () => [
            this.img.width,
            Math.round((this.img.width / this.img.naturalWidth) * this.img.naturalHeight)
        ]);
    }
}
if (false) {
    /** @type {?} */
    DisplaySize.prototype.display;
    /** @type {?} */
    DisplaySize.prototype.onCreate;
    /** @type {?} */
    DisplaySize.prototype.onDestroy;
    /** @type {?} */
    DisplaySize.prototype.onUpdate;
    /** @type {?} */
    DisplaySize.prototype.getCurrentSize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRGlzcGxheVNpemUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWh0bWwtZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL2ltYWdlLXJlc2l6ZS1tb2R1bGUvbW9kdWxlcy9EaXNwbGF5U2l6ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUUxQyxNQUFNLE9BQU8sV0FBWSxTQUFRLFVBQVU7SUFBM0M7O1FBRUksYUFBUTs7O1FBQUcsR0FBRyxFQUFFO1lBQ1osZ0RBQWdEO1lBQ2hELElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUU3QyxlQUFlO1lBQ2YsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTlELFlBQVk7WUFDWixJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDM0MsQ0FBQyxFQUFDO1FBRUYsY0FBUzs7O1FBQUcsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFDO1FBRXJCLGFBQVE7OztRQUFHLEdBQUcsRUFBRTtZQUNaLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRTtnQkFDNUIsT0FBTzthQUNWOztrQkFFSyxJQUFJLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ2hELElBQUksSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxFQUFFO2dCQUMvQiwyQkFBMkI7Z0JBQzNCLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQzlCLEtBQUssRUFBRSxLQUFLO29CQUNaLE1BQU0sRUFBRSxLQUFLO29CQUNiLElBQUksRUFBRSxNQUFNO2lCQUNmLENBQUMsQ0FBQzthQUNOO2lCQUFNLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLE9BQU8sRUFBRTs7O3NCQUVsQyxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRTtnQkFDckQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRTtvQkFDOUIsS0FBSyxFQUFFLE1BQU07b0JBQ2IsTUFBTSxFQUFFLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUk7b0JBQ25DLElBQUksRUFBRSxJQUFJLFFBQVEsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxJQUFJO2lCQUNuQyxDQUFDLENBQUM7YUFDTjtpQkFBTTs7O3NCQUVHLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLHFCQUFxQixFQUFFO2dCQUNyRCxNQUFNLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFO29CQUM5QixLQUFLLEVBQUUsSUFBSSxRQUFRLENBQUMsS0FBSyxHQUFHLENBQUMsSUFBSTtvQkFDakMsTUFBTSxFQUFFLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUk7b0JBQ25DLElBQUksRUFBRSxNQUFNO2lCQUNmLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxFQUFDO1FBRUYsbUJBQWM7OztRQUFHLEdBQUcsRUFBRSxDQUFDO1lBQ25CLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSztZQUNkLElBQUksQ0FBQyxLQUFLLENBQ04sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUNwRTtTQUNKLEVBQUM7SUFDTixDQUFDO0NBQUE7OztJQXJERyw4QkFBUTs7SUFDUiwrQkFTRTs7SUFFRixnQ0FBcUI7O0lBRXJCLCtCQStCRTs7SUFFRixxQ0FLRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJhc2VNb2R1bGUgfSBmcm9tICcuL0Jhc2VNb2R1bGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIERpc3BsYXlTaXplIGV4dGVuZHMgQmFzZU1vZHVsZSB7XHJcbiAgICBkaXNwbGF5O1xyXG4gICAgb25DcmVhdGUgPSAoKSA9PiB7XHJcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBjb250YWluZXIgdG8gaG9sZCB0aGUgc2l6ZSBkaXNwbGF5XHJcbiAgICAgICAgdGhpcy5kaXNwbGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcblxyXG4gICAgICAgIC8vIEFwcGx5IHN0eWxlc1xyXG4gICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5kaXNwbGF5LnN0eWxlLCB0aGlzLm9wdGlvbnMuZGlzcGxheVN0eWxlcyk7XHJcblxyXG4gICAgICAgIC8vIEF0dGFjaCBpdFxyXG4gICAgICAgIHRoaXMub3ZlcmxheS5hcHBlbmRDaGlsZCh0aGlzLmRpc3BsYXkpO1xyXG4gICAgfTtcclxuXHJcbiAgICBvbkRlc3Ryb3kgPSAoKSA9PiB7fTtcclxuXHJcbiAgICBvblVwZGF0ZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXRoaXMuZGlzcGxheSB8fCAhdGhpcy5pbWcpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHRoaXMuZ2V0Q3VycmVudFNpemUoKTtcclxuICAgICAgICB0aGlzLmRpc3BsYXkuaW5uZXJIVE1MID0gc2l6ZS5qb2luKCcgJnRpbWVzOyAnKTtcclxuICAgICAgICBpZiAoc2l6ZVswXSA+IDEyMCAmJiBzaXplWzFdID4gMzApIHtcclxuICAgICAgICAgICAgLy8gcG9zaXRpb24gb24gdG9wIG9mIGltYWdlXHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5kaXNwbGF5LnN0eWxlLCB7XHJcbiAgICAgICAgICAgICAgICByaWdodDogJzRweCcsXHJcbiAgICAgICAgICAgICAgICBib3R0b206ICc0cHgnLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogJ2F1dG8nXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbWcuc3R5bGUuZmxvYXQgPT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBvZmYgYm90dG9tIGxlZnRcclxuICAgICAgICAgICAgY29uc3QgZGlzcFJlY3QgPSB0aGlzLmRpc3BsYXkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcy5kaXNwbGF5LnN0eWxlLCB7XHJcbiAgICAgICAgICAgICAgICByaWdodDogJ2F1dG8nLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiBgLSR7ZGlzcFJlY3QuaGVpZ2h0ICsgNH1weGAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBgLSR7ZGlzcFJlY3Qud2lkdGggKyA0fXB4YFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiBvZmYgYm90dG9tIHJpZ2h0XHJcbiAgICAgICAgICAgIGNvbnN0IGRpc3BSZWN0ID0gdGhpcy5kaXNwbGF5LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMuZGlzcGxheS5zdHlsZSwge1xyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IGAtJHtkaXNwUmVjdC53aWR0aCArIDR9cHhgLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiBgLSR7ZGlzcFJlY3QuaGVpZ2h0ICsgNH1weGAsXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiAnYXV0bydcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBnZXRDdXJyZW50U2l6ZSA9ICgpID0+IFtcclxuICAgICAgICB0aGlzLmltZy53aWR0aCxcclxuICAgICAgICBNYXRoLnJvdW5kKFxyXG4gICAgICAgICAgICAodGhpcy5pbWcud2lkdGggLyB0aGlzLmltZy5uYXR1cmFsV2lkdGgpICogdGhpcy5pbWcubmF0dXJhbEhlaWdodFxyXG4gICAgICAgIClcclxuICAgIF07XHJcbn1cclxuIl19