/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import DefaultOptions from './DefaultOptions';
import { DisplaySize } from './modules/DisplaySize';
import { Toolbar } from './modules/Toolbar';
import { Resize } from './modules/Resize';
import Quill from 'quill';
/** @type {?} */
const knownModules = { DisplaySize, Toolbar, Resize };
/**
 * Custom module for quilljs to allow user to resize <img> elements
 * (Works on Chrome, Edge, Safari and replaces Firefox's native resize behavior)
 * @see https://quilljs.com/blog/building-a-custom-module/
 */
export class ImageResize {
    /**
     * @param {?} quill
     * @param {?=} options
     */
    constructor(quill, options = {}) {
        this.initializeModules = (/**
         * @return {?}
         */
        () => {
            this.removeModules();
            this.modules = this.moduleClasses.map((/**
             * @param {?} ModuleClass
             * @return {?}
             */
            ModuleClass => new (knownModules[ModuleClass] || ModuleClass)(this)));
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onCreate();
            }));
            this.onUpdate();
        });
        this.onUpdate = (/**
         * @return {?}
         */
        () => {
            this.repositionElements();
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onUpdate();
            }));
        });
        this.removeModules = (/**
         * @return {?}
         */
        () => {
            this.modules.forEach((/**
             * @param {?} module
             * @return {?}
             */
            module => {
                module.onDestroy();
            }));
            this.modules = [];
        });
        this.handleClick = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (evt.target &&
                evt.target.tagName &&
                evt.target.tagName.toUpperCase() === 'IMG') {
                if (this.img === evt.target) {
                    // we are already focused on this image
                    return;
                }
                if (this.img) {
                    // we were just focused on another image
                    this.hide();
                }
                // clicked on an image inside the editor
                this.show(evt.target);
            }
            else if (this.img) {
                // clicked on a non image
                this.hide();
            }
        });
        this.show = (/**
         * @param {?} img
         * @return {?}
         */
        img => {
            if (!this.quill.isEnabled()) {
                return;
            }
            // keep track of this img element
            this.img = img;
            this.showOverlay();
            this.initializeModules();
        });
        this.showOverlay = (/**
         * @return {?}
         */
        () => {
            if (this.overlay) {
                this.hideOverlay();
            }
            this.quill.setSelection(null);
            // prevent spurious text selection
            this.setUserSelect('none');
            // listen for the image being deleted or moved
            document.addEventListener('keyup', this.checkImage, true);
            this.quill.root.addEventListener('input', this.checkImage, true);
            // Create and add the overlay
            this.overlay = document.createElement('div');
            Object.assign(this.overlay.style, this.options.overlayStyles);
            this.quill.root.parentNode.appendChild(this.overlay);
            this.repositionElements();
        });
        this.hideOverlay = (/**
         * @return {?}
         */
        () => {
            if (!this.overlay) {
                return;
            }
            // Remove the overlay
            this.quill.root.parentNode.removeChild(this.overlay);
            this.overlay = undefined;
            // stop listening for image deletion or movement
            document.removeEventListener('keyup', this.checkImage);
            this.quill.root.removeEventListener('input', this.checkImage);
            // reset user-select
            this.setUserSelect('');
        });
        this.repositionElements = (/**
         * @return {?}
         */
        () => {
            if (!this.overlay || !this.img) {
                return;
            }
            // position the overlay over the image
            /** @type {?} */
            const parent = this.quill.root.parentNode;
            /** @type {?} */
            const imgRect = this.img.getBoundingClientRect();
            /** @type {?} */
            const containerRect = parent.getBoundingClientRect();
            Object.assign(this.overlay.style, {
                left: `${imgRect.left -
                    containerRect.left +
                    parent.scrollLeft -
                    2}px`,
                top: `${imgRect.top - containerRect.top + parent.scrollTop - 2}px`,
                width: `${imgRect.width + 2}px`,
                height: `${imgRect.height + 2}px`
            });
        });
        this.hide = (/**
         * @return {?}
         */
        () => {
            this.hideOverlay();
            this.removeModules();
            this.img = undefined;
        });
        this.setUserSelect = (/**
         * @param {?} value
         * @return {?}
         */
        value => {
            [
                'userSelect',
                'mozUserSelect',
                'webkitUserSelect',
                'msUserSelect'
            ].forEach((/**
             * @param {?} prop
             * @return {?}
             */
            prop => {
                // set on contenteditable element and <html>
                this.quill.root.style[prop] = value;
                document.documentElement.style[prop] = value;
            }));
        });
        this.checkImage = (/**
         * @param {?} evt
         * @return {?}
         */
        evt => {
            if (this.img) {
                if (evt.keyCode == 46 || evt.keyCode == 8) {
                    Quill.find(this.img).deleteAt(0);
                }
                this.hide();
            }
        });
        // save the quill reference and options
        this.quill = quill;
        // Apply the options to our defaults, and stash them for later
        // defaultsDeep doesn't do arrays as you'd expect, so we'll need to apply the classes array from options separately
        /** @type {?} */
        let moduleClasses = false;
        // tslint:disable-next-line:object-literal-key-quotes
        if (options['modules']) {
            moduleClasses = options['modules'].slice();
        }
        // Apply options to default options
        //this.options = defaultsDeep({}, options, DefaultOptions);
        this.options = Object.assign({}, options, DefaultOptions);
        // (see above about moduleClasses)
        if (moduleClasses !== false) {
            this.options.modules = moduleClasses;
        }
        // disable native image resizing on firefox
        document.execCommand('enableObjectResizing', false, 'false');
        // respond to clicks inside the editor
        this.quill.root.addEventListener('click', this.handleClick, false);
        this.quill.root.parentNode.style.position =
            this.quill.root.parentNode.style.position || 'relative';
        // setup modules
        this.moduleClasses = this.options.modules;
        //console.log('this.options.modules', this.options.modules)
        this.modules = [];
    }
}
if (false) {
    /** @type {?} */
    ImageResize.prototype.quill;
    /** @type {?} */
    ImageResize.prototype.options;
    /** @type {?} */
    ImageResize.prototype.moduleClasses;
    /** @type {?} */
    ImageResize.prototype.modules;
    /** @type {?} */
    ImageResize.prototype.img;
    /** @type {?} */
    ImageResize.prototype.overlay;
    /** @type {?} */
    ImageResize.prototype.initializeModules;
    /** @type {?} */
    ImageResize.prototype.onUpdate;
    /** @type {?} */
    ImageResize.prototype.removeModules;
    /** @type {?} */
    ImageResize.prototype.handleClick;
    /** @type {?} */
    ImageResize.prototype.show;
    /** @type {?} */
    ImageResize.prototype.showOverlay;
    /** @type {?} */
    ImageResize.prototype.hideOverlay;
    /** @type {?} */
    ImageResize.prototype.repositionElements;
    /** @type {?} */
    ImageResize.prototype.hide;
    /** @type {?} */
    ImageResize.prototype.setUserSelect;
    /** @type {?} */
    ImageResize.prototype.checkImage;
}
//# sourceMappingURL=data:application/json;base64,