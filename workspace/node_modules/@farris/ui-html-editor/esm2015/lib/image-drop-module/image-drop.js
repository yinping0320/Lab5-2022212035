/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class ImageDrop {
    /**
     * @param {?} quill
     * @param {?=} options
     * @param {?=} ngZone
     */
    constructor(quill, options = {}, ngZone) {
        this.ngZone = ngZone;
        // save the quill reference
        this.quill = quill;
        // bind handlers to this instance
        this.handleDrop = this.handleDrop.bind(this);
        this.handlePaste = this.handlePaste.bind(this);
        // listen for drop and paste events
        this.quill.root.addEventListener('drop', this.handleDrop, false);
        this.quill.root.addEventListener('paste', this.handlePaste, false);
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    handleDrop(evt) {
        evt.preventDefault();
        if (evt.dataTransfer &&
            evt.dataTransfer.files &&
            evt.dataTransfer.files.length) {
            if (document.caretRangeFromPoint) {
                /** @type {?} */
                const selection = document.getSelection();
                /** @type {?} */
                const range = document.caretRangeFromPoint(evt.clientX, evt.clientY);
                if (selection && range) {
                    selection.setBaseAndExtent(range.startContainer, range.startOffset, range.startContainer, range.startOffset);
                }
            }
            this.readFiles(evt.dataTransfer.files, this.insert.bind(this));
        }
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    handlePaste(evt) {
        if (evt) {
            evt.preventDefault();
        }
        if (evt.clipboardData &&
            evt.clipboardData.items &&
            evt.clipboardData.items.length) {
            this.readFiles(evt.clipboardData.items, (/**
             * @param {?} dataUrl
             * @return {?}
             */
            dataUrl => {
                // const selection = this.quill.getSelection();
                // if (selection && selection.length) {
                //     // we must be in a browser that supports pasting (like Firefox)
                //     // so it has already been placed into the editor
                // } else {
                //     // otherwise we wait until after the paste when this.quill.getSelection()
                //     // will return a valid index
                // const selection = this.quill.getSelection();
                // if (selection && selection.length) {
                //     // we must be in a browser that supports pasting (like Firefox)
                //     // so it has already been placed into the editor
                // } else {
                //     // otherwise we wait until after the paste when this.quill.getSelection()
                //     // will return a valid index
                //     let _ngZone = this.ngZone;
                //     if (!_ngZone && this.quill && this.quill.options) {
                //         _ngZone = this.quill.options.ngZone;
                //     }
                //     if (_ngZone) {
                //         _ngZone.runOutsideAngular(() => {
                //             setTimeout(() => this.insert(dataUrl), 0);
                //         });
                //     }
                // }
                /** @type {?} */
                let _ngZone = this.ngZone;
                if (!_ngZone && this.quill && this.quill.options) {
                    _ngZone = this.quill.options.ngZone;
                }
                if (_ngZone) {
                    _ngZone.runOutsideAngular((/**
                     * @return {?}
                     */
                    () => {
                        setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            /** @type {?} */
                            const img = this.quill.container.querySelector('img[src="' + dataUrl + '"]');
                            if (!img) {
                                this.insert(dataUrl);
                            }
                        }), 0);
                    }));
                }
            }));
        }
    }
    /**
     * @param {?} dataUrl
     * @return {?}
     */
    insert(dataUrl) {
        /** @type {?} */
        const index = (this.quill.getSelection() || {}).index || this.quill.getLength();
        this.quill.insertEmbed(index, 'image', dataUrl, 'user');
    }
    /**
     * @param {?} files
     * @param {?} callback
     * @return {?}
     */
    readFiles(files, callback) {
        // check each file for an image
        /** @type {?} */
        let imgs = [];
        const { limitImageSize, maxImgSize } = this.quill.options;
        /** @type {?} */
        var uploadImgs = Array.from(files).filter((/**
         * @param {?} n
         * @return {?}
         */
        (n) => {
            /** @type {?} */
            const blob = n.getAsFile && n.getAsFile() || n;
            if (!blob.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
                // file is not an image
                // Note that some file formats such as psd start with image/* but are not readable
                return false;
            }
            else {
                if (!limitImageSize) {
                    return true;
                }
                else {
                    if (maxImgSize && blob.size > maxImgSize * 1024) {
                        imgs.push(blob);
                        return false;
                    }
                    return true;
                }
            }
        }));
        uploadImgs.forEach((/**
         * @param {?} file
         * @return {?}
         */
        (file) => {
            /** @type {?} */
            const reader = new FileReader();
            reader.onload = (/**
             * @param {?} evt
             * @return {?}
             */
            (evt) => {
                callback(evt.target.result);
            });
            /** @type {?} */
            const blob = file.getAsFile && file.getAsFile() || file;
            if (blob instanceof Blob) {
                reader.readAsDataURL(blob);
            }
        }));
        // [].forEach.call(files, file => {
        //     // read the clipboard item or file
        //     const blob = file.getAsFile && file.getAsFile() || file;
        //     if (!blob.type.match(/^image\/(gif|jpe?g|a?png|svg|webp|bmp|vnd\.microsoft\.icon)/i)) {
        //         // file is not an image
        //         // Note that some file formats such as psd start with image/* but are not readable
        //         return;
        //     }
        //     if (limitImageSize && maxImgSize && blob.size > maxImgSize * 1024) {
        //         imgs.push(blob);
        //         return;
        //     } else {
        //         // set up file reader
        //         const reader = new FileReader();
        //         reader.onload = (evt: any) => {
        //             callback(evt.target.result);
        //         };
        //         if (blob instanceof Blob) {
        //             reader.readAsDataURL(blob);
        //         }
        //     }
        // });
        if (imgs && imgs.length) {
            this.quill.options.showMaxImageMessage(imgs);
        }
    }
}
if (false) {
    /** @type {?} */
    ImageDrop.prototype.quill;
    /**
     * @type {?}
     * @private
     */
    ImageDrop.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2UtZHJvcC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktaHRtbC1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvaW1hZ2UtZHJvcC1tb2R1bGUvaW1hZ2UtZHJvcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsTUFBTSxPQUFPLFNBQVM7Ozs7OztJQUVsQixZQUFZLEtBQUssRUFBRSxPQUFPLEdBQUcsRUFBRSxFQUFVLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ25ELDJCQUEyQjtRQUMzQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztRQUNuQixpQ0FBaUM7UUFDakMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM3QyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQy9DLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNqRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN2RSxDQUFDOzs7OztJQUVELFVBQVUsQ0FBQyxHQUFHO1FBQ1YsR0FBRyxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQ3JCLElBQ0ksR0FBRyxDQUFDLFlBQVk7WUFDaEIsR0FBRyxDQUFDLFlBQVksQ0FBQyxLQUFLO1lBQ3RCLEdBQUcsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFDL0I7WUFDRSxJQUFJLFFBQVEsQ0FBQyxtQkFBbUIsRUFBRTs7c0JBQ3hCLFNBQVMsR0FBRyxRQUFRLENBQUMsWUFBWSxFQUFFOztzQkFD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QztRQUN0QywwQ0FBMEM7UUFDMUMsWUFBWTtRQUNaLFFBQVE7UUFFUixNQUFNO1FBRU4sSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNyQixJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNoRDtJQUNMLENBQUM7Q0FDSjs7O0lBbEtHLDBCQUFXOzs7OztJQUNzQiwyQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xyXG5leHBvcnQgY2xhc3MgSW1hZ2VEcm9wIHtcclxuICAgIHF1aWxsOiBhbnk7XHJcbiAgICBjb25zdHJ1Y3RvcihxdWlsbCwgb3B0aW9ucyA9IHt9LCBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XHJcbiAgICAgICAgLy8gc2F2ZSB0aGUgcXVpbGwgcmVmZXJlbmNlXHJcbiAgICAgICAgdGhpcy5xdWlsbCA9IHF1aWxsO1xyXG4gICAgICAgIC8vIGJpbmQgaGFuZGxlcnMgdG8gdGhpcyBpbnN0YW5jZVxyXG4gICAgICAgIHRoaXMuaGFuZGxlRHJvcCA9IHRoaXMuaGFuZGxlRHJvcC5iaW5kKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuaGFuZGxlUGFzdGUgPSB0aGlzLmhhbmRsZVBhc3RlLmJpbmQodGhpcyk7XHJcbiAgICAgICAgLy8gbGlzdGVuIGZvciBkcm9wIGFuZCBwYXN0ZSBldmVudHNcclxuICAgICAgICB0aGlzLnF1aWxsLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignZHJvcCcsIHRoaXMuaGFuZGxlRHJvcCwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMucXVpbGwucm9vdC5hZGRFdmVudExpc3RlbmVyKCdwYXN0ZScsIHRoaXMuaGFuZGxlUGFzdGUsIGZhbHNlKTtcclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVEcm9wKGV2dCkge1xyXG4gICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgZXZ0LmRhdGFUcmFuc2ZlciAmJlxyXG4gICAgICAgICAgICBldnQuZGF0YVRyYW5zZmVyLmZpbGVzICYmXHJcbiAgICAgICAgICAgIGV2dC5kYXRhVHJhbnNmZXIuZmlsZXMubGVuZ3RoXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5jYXJldFJhbmdlRnJvbVBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBkb2N1bWVudC5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJhbmdlID0gZG9jdW1lbnQuY2FyZXRSYW5nZUZyb21Qb2ludChcclxuICAgICAgICAgICAgICAgICAgICBldnQuY2xpZW50WCxcclxuICAgICAgICAgICAgICAgICAgICBldnQuY2xpZW50WVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3Rpb24gJiYgcmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3Rpb24uc2V0QmFzZUFuZEV4dGVudChcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRDb250YWluZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlLnN0YXJ0T2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZS5zdGFydENvbnRhaW5lcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2Uuc3RhcnRPZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMucmVhZEZpbGVzKGV2dC5kYXRhVHJhbnNmZXIuZmlsZXMsIHRoaXMuaW5zZXJ0LmJpbmQodGhpcykpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBoYW5kbGVQYXN0ZShldnQpIHtcclxuXHJcbiAgICAgICAgaWYgKGV2dCkge1xyXG4gICAgICAgICAgICBldnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEgJiZcclxuICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuaXRlbXMgJiZcclxuICAgICAgICAgICAgZXZ0LmNsaXBib2FyZERhdGEuaXRlbXMubGVuZ3RoXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVhZEZpbGVzKGV2dC5jbGlwYm9hcmREYXRhLml0ZW1zLCBkYXRhVXJsID0+IHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnN0IHNlbGVjdGlvbiA9IHRoaXMucXVpbGwuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiAoc2VsZWN0aW9uICYmIHNlbGVjdGlvbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAvLyB3ZSBtdXN0IGJlIGluIGEgYnJvd3NlciB0aGF0IHN1cHBvcnRzIHBhc3RpbmcgKGxpa2UgRmlyZWZveClcclxuICAgICAgICAgICAgICAgIC8vICAgICAvLyBzbyBpdCBoYXMgYWxyZWFkeSBiZWVuIHBsYWNlZCBpbnRvIHRoZSBlZGl0b3JcclxuICAgICAgICAgICAgICAgIC8vIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8gb3RoZXJ3aXNlIHdlIHdhaXQgdW50aWwgYWZ0ZXIgdGhlIHBhc3RlIHdoZW4gdGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKVxyXG4gICAgICAgICAgICAgICAgLy8gICAgIC8vIHdpbGwgcmV0dXJuIGEgdmFsaWQgaW5kZXhcclxuXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgbGV0IF9uZ1pvbmUgPSB0aGlzLm5nWm9uZTtcclxuICAgICAgICAgICAgICAgIC8vICAgICBpZiAoIV9uZ1pvbmUgJiYgdGhpcy5xdWlsbCAmJiB0aGlzLnF1aWxsLm9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgX25nWm9uZSA9IHRoaXMucXVpbGwub3B0aW9ucy5uZ1pvbmU7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vICAgICBpZiAoX25nWm9uZSkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICBfbmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4gdGhpcy5pbnNlcnQoZGF0YVVybCksIDApO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyB9XHJcblxyXG4gICAgICAgICAgICAgICAgbGV0IF9uZ1pvbmUgPSB0aGlzLm5nWm9uZTtcclxuICAgICAgICAgICAgICAgIGlmICghX25nWm9uZSAmJiB0aGlzLnF1aWxsICYmIHRoaXMucXVpbGwub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIF9uZ1pvbmUgPSB0aGlzLnF1aWxsLm9wdGlvbnMubmdab25lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChfbmdab25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX25nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaW1nID0gdGhpcy5xdWlsbC5jb250YWluZXIucXVlcnlTZWxlY3RvcignaW1nW3NyYz1cIicrZGF0YVVybCsnXCJdJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWltZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KGRhdGFVcmwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGluc2VydChkYXRhVXJsKSB7XHJcbiAgICAgICAgY29uc3QgaW5kZXggPSAodGhpcy5xdWlsbC5nZXRTZWxlY3Rpb24oKSB8fCB7fSkuaW5kZXggfHwgdGhpcy5xdWlsbC5nZXRMZW5ndGgoKTtcclxuICAgICAgICB0aGlzLnF1aWxsLmluc2VydEVtYmVkKGluZGV4LCAnaW1hZ2UnLCBkYXRhVXJsLCAndXNlcicpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlYWRGaWxlcyhmaWxlcywgY2FsbGJhY2spIHtcclxuICAgICAgICAvLyBjaGVjayBlYWNoIGZpbGUgZm9yIGFuIGltYWdlXHJcbiAgICAgICAgbGV0IGltZ3MgPSBbXTtcclxuICAgICAgICBjb25zdCB7bGltaXRJbWFnZVNpemUsIG1heEltZ1NpemV9ID0gdGhpcy5xdWlsbC5vcHRpb25zO1xyXG4gIFxyXG4gICAgICAgIHZhciB1cGxvYWRJbWdzID0gQXJyYXkuZnJvbShmaWxlcykuZmlsdGVyKChuOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgYmxvYiA9IG4uZ2V0QXNGaWxlICYmIG4uZ2V0QXNGaWxlKCkgfHwgbjtcclxuICAgICAgICAgICAgaWYgKCFibG9iLnR5cGUubWF0Y2goL15pbWFnZVxcLyhnaWZ8anBlP2d8YT9wbmd8c3ZnfHdlYnB8Ym1wfHZuZFxcLm1pY3Jvc29mdFxcLmljb24pL2kpKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBmaWxlIGlzIG5vdCBhbiBpbWFnZVxyXG4gICAgICAgICAgICAgICAgLy8gTm90ZSB0aGF0IHNvbWUgZmlsZSBmb3JtYXRzIHN1Y2ggYXMgcHNkIHN0YXJ0IHdpdGggaW1hZ2UvKiBidXQgYXJlIG5vdCByZWFkYWJsZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFsaW1pdEltYWdlU2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIG1heEltZ1NpemUgJiYgYmxvYi5zaXplID4gbWF4SW1nU2l6ZSAqIDEwMjQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1ncy5wdXNoKGJsb2IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICB1cGxvYWRJbWdzLmZvckVhY2goKGZpbGU6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgICAgICByZWFkZXIub25sb2FkID0gKGV2dDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhldnQudGFyZ2V0LnJlc3VsdCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGNvbnN0IGJsb2IgPSBmaWxlLmdldEFzRmlsZSAmJiBmaWxlLmdldEFzRmlsZSgpIHx8IGZpbGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoYmxvYiBpbnN0YW5jZW9mIEJsb2IpIHtcclxuICAgICAgICAgICAgICAgIHJlYWRlci5yZWFkQXNEYXRhVVJMKGJsb2IpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSlcclxuXHJcbiAgICAgICAgLy8gW10uZm9yRWFjaC5jYWxsKGZpbGVzLCBmaWxlID0+IHtcclxuICAgICAgICAvLyAgICAgLy8gcmVhZCB0aGUgY2xpcGJvYXJkIGl0ZW0gb3IgZmlsZVxyXG4gICAgICAgIC8vICAgICBjb25zdCBibG9iID0gZmlsZS5nZXRBc0ZpbGUgJiYgZmlsZS5nZXRBc0ZpbGUoKSB8fCBmaWxlO1xyXG5cclxuICAgICAgICAvLyAgICAgaWYgKCFibG9iLnR5cGUubWF0Y2goL15pbWFnZVxcLyhnaWZ8anBlP2d8YT9wbmd8c3ZnfHdlYnB8Ym1wfHZuZFxcLm1pY3Jvc29mdFxcLmljb24pL2kpKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAvLyBmaWxlIGlzIG5vdCBhbiBpbWFnZVxyXG4gICAgICAgIC8vICAgICAgICAgLy8gTm90ZSB0aGF0IHNvbWUgZmlsZSBmb3JtYXRzIHN1Y2ggYXMgcHNkIHN0YXJ0IHdpdGggaW1hZ2UvKiBidXQgYXJlIG5vdCByZWFkYWJsZVxyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vICAgICB9XHJcblxyXG4gICAgICAgIC8vICAgICBpZiAobGltaXRJbWFnZVNpemUgJiYgbWF4SW1nU2l6ZSAmJiBibG9iLnNpemUgPiBtYXhJbWdTaXplICogMTAyNCkge1xyXG4gICAgICAgIC8vICAgICAgICAgaW1ncy5wdXNoKGJsb2IpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vICAgICAgICAgLy8gc2V0IHVwIGZpbGUgcmVhZGVyXHJcbiAgICAgICAgLy8gICAgICAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xyXG4gICAgICAgIC8vICAgICAgICAgcmVhZGVyLm9ubG9hZCA9IChldnQ6IGFueSkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgICAgIGNhbGxiYWNrKGV2dC50YXJnZXQucmVzdWx0KTtcclxuICAgICAgICAvLyAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIC8vICAgICAgICAgaWYgKGJsb2IgaW5zdGFuY2VvZiBCbG9iKSB7XHJcbiAgICAgICAgLy8gICAgICAgICAgICAgcmVhZGVyLnJlYWRBc0RhdGFVUkwoYmxvYik7XHJcbiAgICAgICAgLy8gICAgICAgICB9XHJcbiAgICAgICAgLy8gICAgIH1cclxuXHJcbiAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIGlmIChpbWdzICYmIGltZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMucXVpbGwub3B0aW9ucy5zaG93TWF4SW1hZ2VNZXNzYWdlKGltZ3MpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=