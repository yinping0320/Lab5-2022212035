import { AfterViewInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy, Renderer2, SimpleChanges, Injector } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ControlValueAccessor } from '@angular/forms';
import { RichTextEditorToolbars } from '@farris/ui-common';
import { QuillConfig, QuillModules } from './html-editor.interfaces';
import { NotifyService } from '@farris/ui-notify';
import { LocaleService } from '@farris/ui-locale';
export interface CustomOption {
    import: string;
    whitelist: any[];
}
export interface Range {
    index: number;
    length: number;
}
export declare class HtmlEditorComponent implements AfterViewInit, ControlValueAccessor, OnChanges, OnDestroy {
    private elementRef;
    private domSanitizer;
    private doc;
    private platformId;
    private renderer;
    private zone;
    private config;
    private notifySer;
    private localeSer;
    private injector;
    quillEditor: any;
    editorElem: HTMLElement | undefined;
    content: any;
    private _disabled;
    rootClass: string;
    readonly?: boolean;
    disabled: boolean;
    showBorder: boolean;
    format?: 'object' | 'html' | 'text' | 'json';
    theme?: string;
    modules?: QuillModules;
    debug?: 'warn' | 'log' | 'error' | false;
    placeholder?: string;
    maxLength?: number;
    minLength?: number;
    required: boolean;
    formats?: string[] | null;
    customToolbarPosition: 'top' | 'bottom';
    sanitize: boolean;
    styles: any;
    strict: boolean;
    scrollingContainer?: HTMLElement | string | null;
    bounds?: HTMLElement | string;
    customOptions: CustomOption[];
    trackChanges?: 'user' | 'all';
    preserveWhitespace: boolean;
    /** 限制上传图片大小, 默认为 false不限制上传图片的大小 */
    limitImageSize: boolean;
    /** 允许上传图片最大字节数，单位 kb  */
    maxImgSize: number;
    customToolbar: boolean;
    toolbar: RichTextEditorToolbars;
    fontStyleBar: string[] | boolean;
    BlockBar: string[] | boolean;
    headerBar: {
        header: any[];
    } | boolean;
    sizeBar: {
        size: any[];
    } | boolean;
    listBar: any[] | boolean;
    fontBar: {
        font: string[];
    } | boolean;
    superAndSubscriptBar: any[] | boolean;
    indentBar: any[] | boolean;
    colorBar: any[] | boolean;
    mediaBar: string | boolean;
    imageBar: string | boolean;
    videoBar: string | boolean;
    cleanBar: string | boolean;
    alignBar: string | boolean;
    /** 只读禁用时，最大高度，为 0 时，不限制最大高度; 默认 800px */
    maxHeight: number;
    minHeight: number;
    autoHeight: boolean;
    onEditorCreated: EventEmitter<{}>;
    onContentChanged: EventEmitter<{
        content: any;
        delta: any;
        editor: any;
        html: string | null;
        oldDelta: any;
        source: string;
        text: string;
    }>;
    onSelectionChanged: EventEmitter<{
        editor: any;
        oldRange: Range | null;
        range: Range | null;
        source: string;
    }>;
    onFocus: EventEmitter<{
        editor: any;
        source: string;
    }>;
    onBlur: EventEmitter<{
        editor: any;
        source: string;
    }>;
    imageUpload: () => void;
    valueGetter: (quillEditor: any, editorElement: HTMLElement) => any;
    valueSetter: (quillEditor: any, value: any) => any;
    constructor(elementRef: ElementRef, domSanitizer: DomSanitizer, doc: any, platformId: Object, renderer: Renderer2, zone: NgZone, config: QuillConfig, notifySer: NotifyService, localeSer: LocaleService, injector: Injector);
    onModelChange(_modelValue?: any): void;
    onModelTouched(): void;
    ngAfterViewInit(): void;
    setToolbar(toolbar: any): void;
    private editorCreate;
    random_id(): string;
    selectionChangeHandler: (range: Range, oldRange: Range, source: string) => void;
    textChangeHandler: (delta: any, oldDelta: any, source: string) => void;
    endEdit(): void;
    buildToolbar(options: any): any[];
    ngOnDestroy(): void;
    private hideImgSelectionRange;
    ngOnChanges(changes: SimpleChanges): void;
    writeValue(currentValue: any): void;
    disableToolbar(readonly: boolean): void;
    setStatusEditor(readonly: boolean, disable: boolean): void;
    setDisabledState(isDisabled?: boolean): void;
    registerOnChange(fn: (modelValue: any) => void): void;
    registerOnTouched(fn: () => void): void;
    showMaxImageMessage(imgs?: any): void;
    validate(): any;
}
