import { EventEmitter } from '@angular/core';
import { CommonUtils, IdService } from '@farris/ui-common';
import { RowEventParam } from '../types/event-params';
import { CellInfo } from './state';
export declare type ScrollAction = 'psScrollY' | 'psScrollX' | 'psScrollUp' | 'psScrollDown' | 'psScrollLeft' | 'psScrollRight' | 'psYReachEnd' | 'psYReachStart' | 'psXReachEnd' | 'psXReachStart';
export declare class DatagridService {
    private scorllSubject;
    private scrollX;
    private rowHoverSubject;
    private rowSelectSubject;
    private dataSourceChangedSubject;
    /** 编辑单元格 */
    private editCellSubject;
    /** 选中单元格 */
    private selectCellSubject;
    /** 结束单元编辑 */
    private endCellEdit;
    private changeCheckedRows;
    /** 结束行编辑 */
    scorll$: import("rxjs").Observable<{}>;
    scrollX$: import("rxjs").Observable<any>;
    scrollY$: import("rxjs").Observable<any>;
    rowHover$: import("rxjs").Observable<Partial<RowEventParam>>;
    rowClick$: import("rxjs").Observable<Partial<Partial<RowEventParam>>>;
    onDataSourceChange: import("rxjs").Observable<{}>;
    cellEdit$: import("rxjs").Observable<{}>;
    endCellEdit$: import("rxjs").Observable<{}>;
    checkedRowsTotalChanged$: import("rxjs").Observable<{}>;
    updateEmptyStyle$: EventEmitter<{}>;
    showGridHeader: EventEmitter<{}>;
    uncheckAll: EventEmitter<{}>;
    checkAll: EventEmitter<{}>;
    columnResized: EventEmitter<{}>;
    rowHeightChanged: EventEmitter<{}>;
    loadVirtualData: EventEmitter<{}>;
    /** 显示固定列隐影 */
    showFixedShadow: EventEmitter<{}>;
    setSelecedRow: EventEmitter<{}>;
    setCheckedRows: EventEmitter<{}>;
    scrollToCurrentRow: EventEmitter<{}>;
    columnsChanged: EventEmitter<{}>;
    cellContentWrapChanged: EventEmitter<{}>;
    onFilterChanged: EventEmitter<{}>;
    clearFilter: EventEmitter<{}>;
    filterTextChange: EventEmitter<{}>;
    toggleFilterRow: EventEmitter<{}>;
    closeFilterPanel: EventEmitter<{}>;
    refreshFooterData: EventEmitter<{}>;
    disableHeader: EventEmitter<{}>;
    /** 更新全选复选框状态 */
    changeCheckAllStatus: EventEmitter<{}>;
    setScrollbarPosition: EventEmitter<{}>;
    smartFilterBarExpand: EventEmitter<{}>;
    smartFilterDataChange: EventEmitter<{}>;
    scrollbarUpdate: EventEmitter<{}>;
    footerPositionChanged: EventEmitter<{}>;
    styleElement: HTMLStyleElement;
    commonUtils: CommonUtils;
    idService: IdService;
    cellEditorCreated: EventEmitter<{}>;
    cellEditorDestory: EventEmitter<{}>;
    focusRowChanged: EventEmitter<{}>;
    dataloaded: EventEmitter<{}>;
    toggleGroupRow$: EventEmitter<{
        groupRowIndex: number;
        expand: boolean;
    }>;
    toggleAllGroupRows$: EventEmitter<{
        expand: boolean;
    }>;
    private cssTextCache;
    constructor();
    onScrollMove(x: number, action: ScrollAction): void;
    dataSourceChanged(): void;
    onRowHover(rowIndex: number, rowData: any, mouseEnter: boolean): void;
    onRowClick(rowIndex: number, rowData: any): void;
    onCellEdit(tdElement: any): void;
    onEndCellEdit(cell: CellInfo): void;
    onSelectCell(cell: CellInfo): void;
    onCheckedRowsCountChange(): void;
    onRowHeightChange(rowHeight: number): void;
    onLoadVirtualData(data: any): void;
    onClearFilter(): void;
    onFilterTextChange(txt: string): void;
    restoreScrollbarPosition(): void;
    updateEmptyStyle(): void;
    groupBy: (arr: any, fn: any) => any;
    getMergeCellInfo(data: any, mergeFields: any): {};
    getMergeCellInfo0(data: any, field: any): {};
    getMergeCellInfo2(data: any, mergeFields: any): {};
    getMergeCellInfo3(data: any, mergeFields: any): {};
    getMergeInfo(rowIndex: number, field: string, mergeCellInfo: any): any;
    removeStyleSheet(): void;
    createStyleElement(styleSheetId: string): void;
    appendCssRules(rules: string[]): void;
    removeCssRule(ruleName: string | Array<string>): void;
    private _createStyleSheet;
    private _appendCssRules;
    private _removeCssRule;
    createConfigKey(gridID: string): string;
    getCustomStyle(styler: any, args: any): {
        cls?: any;
        style?: any;
    };
    findNextTr(nextTr: any, dir: any): any;
    private _getCssTextBySelector;
}
