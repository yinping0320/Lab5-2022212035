import { EventEmitter } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { BehaviorSubject, Observable, Subject } from 'rxjs';
import { DataColumn, ColumnGroup } from '../types';
import { FarrisDatagridState, DataResult, CellInfo, VirtualizedState, SelectedRow, RowDataChanges } from './state';
import { DatagridRow } from '../types/datagrid-row';
export declare class DatagridFacadeService {
    private http;
    localId: string;
    protected _state: FarrisDatagridState;
    store: BehaviorSubject<FarrisDatagridState>;
    virtualRowSubject: BehaviorSubject<any>;
    gridSizeSubject: Subject<any>;
    errorSubject: Subject<{}>;
    private selectRowSubject;
    private unSelectRowSubject;
    private columnResizeSubject;
    private clearSelectionSubject;
    private checkRowSubject;
    private unCheckRowSubject;
    private clearCheckedsSubject;
    private clearAllSubject;
    private checkAllSubject;
    private unCheckAllSubject;
    private selectAllSubject;
    private selectCellSubject;
    error$: Observable<{}>;
    selectRow$: Observable<any>;
    unSelectRow$: Observable<any>;
    columnResize$: Observable<any>;
    clearSelections$: Observable<{}>;
    checkRow$: Observable<any>;
    unCheckRow$: Observable<any>;
    clearCheckeds$: Observable<any>;
    clearAll$: Observable<any>;
    checkAll$: Observable<{}>;
    unCheckAll$: Observable<{}>;
    selectAll$: Observable<{}>;
    currentCell$: Observable<{}>;
    editCell$: EventEmitter<{}>;
    clientSort$: EventEmitter<{}>;
    rowAppend$: EventEmitter<{}>;
    rowUpdate$: EventEmitter<{}>;
    rowDelete$: EventEmitter<{}>;
    expandGroupRow: EventEmitter<{}>;
    collapseGroupRow: EventEmitter<{}>;
    updateCheckboxState$: EventEmitter<{}>;
    readonly state$: Observable<any>;
    readonly columnGroup$: Observable<any>;
    gridSize$: Observable<{
        headerHeight: number;
        pagerHeight: number;
        width: number;
        columnsGroup: ColumnGroup;
        height: number;
        rowHeight: number;
    }>;
    readonly data$: Observable<{
        index: number;
        rows: any;
        top: number;
        bottom: number;
        scrolling: boolean;
    }>;
    difference: (first: any[], second: any[]) => any[];
    differenceBy: (a: any, b: any, fn: any) => any;
    constructor(http: HttpClient);
    updateVirthualRows(scrolltop: number, isScrollChange?: boolean): void;
    getVirthualRows(scrolltop: any): VirtualizedState;
    getData(original?: boolean): any;
    getState(): FarrisDatagridState;
    getVirtualState(): VirtualizedState;
    getPageInfo(): {
        pageIndex: number;
        pageSize: number;
    };
    initState(state: Partial<FarrisDatagridState>): void;
    /** 加载数据
     * @param data: 数据列表
     * @param updateOriginalData 是否更新原始数据, 默认为 true
     */
    loadData(data: any, updateOriginalData?: boolean, sortable?: boolean): void;
    /** 复原指定行的数据 */
    resetRow(rowId: any): void;
    fetchData(url: string): Observable<DataResult>;
    setTotal(total: number): void;
    updateProperty(property: string, value: any): void;
    setPagination(pageIndex: number, pageSize: number, total: number): void;
    setScrollTop(scrollTop: number): void;
    isMultiSelect(): boolean;
    private _isRowSelected;
    isRowSelected(id: any, selections?: any): boolean;
    isRowChecked(id: any, checkeds?: any): boolean;
    isCheckAll(): boolean;
    getCurrentPageCheckeds(): SelectedRow[];
    getCurrentRow(): SelectedRow;
    getSelections(): SelectedRow[];
    private getCheckedRowsFromSource;
    getCheckeds(fromDataSource?: boolean): SelectedRow[];
    updateCheckedData(rowid: any, rowData: {
        [key: string]: string;
    }): void;
    setCheckedRows(ids: string[], checked?: boolean): void;
    checkRecord(id: any, checked?: boolean): void;
    checkRow(rowIndex: number, rowData: any, grid?: any): void;
    unCheckRow(rowIndex: number, rowData: any, grid?: any): void;
    setCurrentPageData(data: any): void;
    getCurrentPageData(): any;
    /** 获取所有可以操作的行 */
    private getAllRowsForLive;
    checkAll(): void;
    selectAll(): void;
    findRow(id: any): {
        index: number;
        data: any;
    };
    findRowIndex(id: any): any;
    /**
     * 设置选中行，不触发grid 选中事件，取消选中事件
     */
    setSelectRow(id: string, select?: boolean, emit?: boolean): void;
    selectRecord(id: any, select?: boolean): void;
    selectRow(rowIndex: number, rowData: any, gridOpts?: any): void;
    private selectRowForMulti;
    private unSelectRowForMulti;
    unSelectRow(rowIndex: number, rowData: any, gridOpts?: any): void;
    private _canCancelSelectWhenMulti;
    private _clearSelections;
    private _clearCheckeds;
    clearSelections(excludeIds?: string[]): void;
    clearCheckeds(clearAll?: boolean): void;
    clearAll(): void;
    setMultiSelect(flag: boolean): void;
    setCheckOnSelect(flag: boolean): void;
    setSelectOnCheck(flag: boolean): void;
    setCurrentCell(dr: DatagridRow, field: string, cellElement?: any, cellRef?: any): void;
    cancelSelectCell(): void;
    primaryId(rowData: any): any;
    getCurrentCell(): CellInfo;
    editCell(): void;
    endEditCell(): void;
    appendRow(rowData: any): void;
    updateRow(rowid: any, rowData: any): void;
    deleteRow(rowid: any): {
        index: number;
        data: any;
    };
    /**
     * 从数组中删除指定的ID
     * @param data 数组
     * @param rowId 要删除的ID
     */
    removeRow(data: any, rowId: any): any;
    isCellSelected(cellInfo: CellInfo): boolean;
    protected updateState(state: Partial<FarrisDatagridState>, emit?: boolean): void;
    resize(newSize?: {
        width: number;
        height: number;
        [key: string]: any;
    }): void;
    fitColumns(fit: any): void;
    private useUserSetColumnSize;
    private resetColumnsSize;
    /**
     * 更新列设置
     * @param columns 新的列集合
     * @param restitute 是否还原初始宽度 默认为 false
     */
    updateColumns(columns: any, restitute?: boolean, emit?: boolean): void;
    getGroupColumns(columns: any): any[];
    initColumns(emit?: boolean, restColumnWidth?: boolean): void;
    getColumnIndex(field: string, fixed?: 'right' | '' | 'left' | 'center'): number;
    columnResizeEnd(): void;
    resizeColumns(restitute?: boolean): void;
    getAllFlatColumns(): DataColumn[];
    getColumn(fieldName: string): DataColumn;
    setFitColumnsWidth(colgroup: ColumnGroup, restitute?: boolean, useUserSetColumnSize?: boolean): void;
    private getFixedCols;
    private initColumnsWidth;
    showCheckbox(isShow?: boolean): void;
    hideCheckbox(): void;
    showLineNumber(isShow?: boolean): void;
    hideLineNumber(): void;
    setSortInfo(sortName: any, sortOrder: any): void;
    orderBy(arr: any, props: any[], orders: any[]): any[];
    sort(data: any): any[];
    clientSort(data?: any): void;
    clearSort(): void;
    loadFilterData(filterData: any[]): void;
    private hasRowChanges;
    appendChanges(changes: RowDataChanges): void;
    acceptChanges(): void;
    rejectChanges(rowid?: any): void;
    getChanges(): RowDataChanges;
    refresh(): void;
    /**
     * 构造合计行
     * @param data 数据集合
     */
    getFooterData(data: any): {}[];
    private arrToGroup;
    private toGroup;
    private groupRows2Flat;
    /** 更新分组合计行数据 */
    private updateGroupFooterData;
    /** 多字段分组
     * groupField 以逗号分隔，从左到右依次进行分组
     */
    private groupRows2;
    showGroupFooter(groupFooter: any): void;
    updateGroupFooter(groupRowId: string): void;
    private calculation;
    setGroupRowsVisible(row: any, open: boolean, emit?: boolean): void;
    setinitialOptions(opts: {
        [key: string]: any;
    }): void;
}
