import { OnInit, QueryList, EventEmitter, Renderer2, OnDestroy, OnChanges, SimpleChanges, ChangeDetectorRef, Injector, AfterContentInit, NgZone, ElementRef, AfterViewInit, ApplicationRef, TemplateRef, DoCheck } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ValidatorFn } from '@angular/forms';
import { Subscription, Observable, BehaviorSubject } from 'rxjs';
import { DataColumn, CustomStyle, MoveDirection, ColumnGroup, CellTemplateFn } from './types/data-column';
import { DatagridFacadeService } from './services/datagrid-facade.service';
import { DatagridColumnDirective } from './components/columns/datagrid-column.directive';
import { CellInfo, SelectedRow } from './services/state';
import { RestService } from './services/rest.service';
import { DatagridService } from './services/datagrid.service';
import { SizeConfig } from './types/constant';
import { CommonUtils } from '@farris/ui-common';
import { ColumnFormatService } from '@farris/ui-common/column';
import { ScrollbarDirective } from './scrollbar/scrollbar.directive';
import { LocaleService } from '@farris/ui-locale';
import { BeforEventParam, RowEditParam } from './types/event-params';
import { DatagridFilterService } from './services/datagrid-filter.service';
import { SmartFilterToolbarComponent } from './components/filter-toolbar/smart-filter-toolbar.component';
import { DatagridSmartFilterService } from './services/datagrid-smart-filter.service';
import { IdService } from '@farris/ui-common';
import { SelectionModeService } from './services/selection-mode.service';
import { ContextMenuItem } from '@farris/ui-context-menu';
export declare class DatagridComponent implements OnInit, OnDestroy, OnChanges, AfterContentInit, AfterViewInit, DoCheck {
    cd: ChangeDetectorRef;
    el: ElementRef;
    inject: Injector;
    zone: NgZone;
    dfs: DatagridFacadeService;
    dgs: DatagridService;
    private app;
    protected domSanitizer: DomSanitizer;
    render2: Renderer2;
    private auther;
    private version;
    __component_type__: string;
    /** 启用性能优化版，默认为 false */
    fast: boolean;
    pos: string;
    hostCls: boolean;
    readonly autoHeightCls: boolean;
    /** 使用主题 */
    useThemes: boolean;
    id: string;
    /** 自动高度 - 启用此属性后，就是一个普普通通的 table , 不能编辑，不能排序，不能分页，不能... 就是一凡胎 */
    useHtmlTable: boolean;
    /** 自动高度 */
    autoHeight: boolean;
    /** 配合 autoHeight 一起使用，当此值大于0 时，且autoHeight 为true时，数据总行高达到最大高度时，将停止自动高度并使用内部滚动条 */
    maxHeight: number;
    /** 显示边框 */
    showBorder: boolean;
    /** 启用斑马线  */
    striped: boolean;
    /** 宽度 */
    width: number;
    /** 高度 */
    height: number;
    /** 显示表头 */
    showHeader: boolean;
    /** 表头-单行高度 */
    headerHeight: number;
    /** 表头折行 */
    headerWrap: boolean;
    /** 显示页脚 */
    showFooter: boolean;
    /** 页脚默认行高 */
    footerHeight: number;
    /** 页脚数据来源, 默认为 client */
    footerDataFrom: 'server' | 'client';
    /** 页脚合计行模板 */
    footerTemplate: TemplateRef<any>;
    footerComponentType: CellTemplateFn;
    /** 合计行显示位置，默认为底部 */
    footerPosition: 'top' | 'bottom' | 'both';
    /** 页脚行自定义样式 */
    footerStyler: () => {
        cls?: string;
        style?: any;
    };
    /** 行高 */
    rowHeight: number;
    /**
     * 设置grid 行高尺寸
     * sm: 小，md: 正常， lg: 大，xl: 超大
     */
    private _sizeType;
    sizeType: "sm" | "md" | "lg" | "xl";
    /** 填充容器 */
    private _fit;
    fit: boolean;
    /** 如果为真，则自动展开/收缩列的大小以适合网格宽度并防止水平滚动。 */
    private _fitColumns;
    fitColumns: boolean;
    /** 根据grid的宽度自动调整列宽度 */
    private _autoFitColumns;
    autoFitColumns: boolean;
    /** 禁用 */
    disabled: boolean;
    /**
     * 滚动条显示模式，默认为 auto
     */
    scrollBarShowMode: 'auto' | 'allways';
    scrollBarOptions: {
        width: number;
        height: number;
    };
    /** 当滚动一直显示时，是否显示两端的箭头 */
    showScrollArrow: boolean;
    /** 可拖动列设置列宽 */
    resizeColumn: boolean;
    /** 显示行号 */
    showLineNumber: boolean;
    /** 行号表头字符 */
    lineNumberTitle: string;
    /** 行号宽度 */
    lineNumberWidth: number;
    /** 复选框列宽度，默认 36px */
    checkboxColumnWidth: number;
    /** 鼠标滑过效果开关，默认开启 */
    rowHover: boolean;
    /** 允许编辑时，单击进入编辑状态; false为双击进入编辑 */
    clickToEdit: boolean;
    private _lockPagination;
    /** 锁定分页条，锁定后页码点击无效 */
    lockPagination: boolean;
    /** 分页信息 */
    private __pagination;
    pagination: any;
    /** 分页组件自定义内容区模板 */
    pagerContentTemplate: TemplateRef<any>;
    /** 分页条对齐展示方式， left, right, center   默认为 right  */
    pagerPos: 'left' | 'center' | 'right';
    /** 分页条显示模式， default, simple */
    pagerViewMode: string;
    /** 启用服务器端分页 */
    pagerOnServer: boolean;
    /** 每页记录数 */
    pageList: number[];
    /** 当前页码 */
    pageIndex: number;
    /** 每页记录数 */
    pageSize: number;
    /** 分页区高度 */
    pagerHeight: number;
    /** 显示每页记录数 */
    showPageList: boolean;
    /** 显示分页信息 */
    showPageInfo: boolean;
    /** 显示页码 */
    showPageNumber: boolean;
    /** 显示页码最大数量 */
    pagerLabelSize: number;
    /** 显示转至指定页码输入框 */
    showGotoInput: boolean;
    /** 启用跨页多选 */
    enableMorePageSelect: boolean;
    /** 显示选中列表 */
    showSelectedList: boolean;
    /** 选中列表中，每条记录显示的内容 */
    selectedItemFormatter: (data: any) => string;
    /** 单元格信息提示延时，默认 1000ms */
    cellTipTimer: number;
    /** grid 内部处理分页状态 */
    controlPaginationState: boolean;
    /** 总记录数 */
    private _total;
    total: number;
    /** 启用选中行 */
    enableSelectRow: boolean;
    /** 启用多选 */
    multiSelect: boolean;
    /** 启用多选时，是否显示checkbox */
    showCheckbox: boolean;
    /** 显示全选checkbox */
    showAllCheckbox: boolean;
    /** 当启用多选时，点击行选中，只允许且只有一行被选中。, 默认为 true */
    onlySelectSelf: boolean;
    /** 启用多选且显示checkbox, 选中行同时钩选, 默认为 false */
    checkOnSelect: boolean;
    /** 启用多选且显示checkbox, 钩选后选中行, 默认为 false */
    selectOnCheck: boolean;
    /**
     * 行选中模式，custom: 自定义， default: 仿Windows资源管理器选中
     * 注意： 此属性仅多选，显示复选框有效
     * 默认值： custom
     * addTime: 2021-12-14 by LUCAS HUANG
     */
    selectionMode: 'custom' | 'default';
    /**
     * 单击行选中后，在次点击不会被取消选中状态;
     */
    keepSelect: boolean;
    /** 当数据为空时，使用空白显示，且高度为一行的高度。 默认为 false */
    useBlankWhenDataIsEmpty: boolean;
    /** 数据为空时的高度 */
    emptyDataHeight: number;
    /** 空数据时，显示的提示文本 */
    emptyMessage: string;
    /** 无数据时的模板 */
    emptyTemplate: TemplateRef<any>;
    emptyComponentType: CellTemplateFn;
    /** 主键字段 */
    idField: string;
    /** 请求数据源的URL */
    url: string;
    /** 数据源 */
    data: any[];
    /** 页脚数据 */
    private _footerData;
    footerData: Observable<any>;
    /** 验证不通过时可以结束编辑 */
    endEditByInvalid: boolean;
    /** 列集合 */
    private _columns;
    columns: any[];
    private _fields;
    fields: any[];
    /** 禁止数据折行，默认值：true,即在一行显示，不折行。 */
    nowrap: boolean;
    /** 虚拟加载 */
    virtualized: boolean;
    /** 是否启用异步加载数据 */
    virtualizedAsyncLoad: boolean;
    /** 行样式 */
    rowStyler: (rowData: any, rowIndex?: number) => {
        cls?: string;
        style?: any;
    };
    /** 编辑方式： row(整行编辑)、cell(单元格编辑)；默认为 row */
    editMode: 'row' | 'cell';
    /** 编辑状态 */
    private _editable;
    editable: boolean;
    /** 启用可编辑单元格样式。 */
    enableEditCellStyle: boolean;
    /** 进入编辑状态时选是否选中文本；默认为 false
     * 仅文本框支持此特性
     */
    selectOnEditing: boolean;
    /** 编辑器高度 */
    editorHeight: number;
    /** 启用远端排序 */
    remoteSort: boolean;
    /** 排序字段 */
    sortName: string;
    /** 排序方式 asc | desc */
    sortOrder: string;
    /** 允许多列排序 */
    multiSort: boolean;
    hoverRowCls: string;
    /** 允许拖拽列顺序 */
    enableDragColumn: boolean;
    /** 行分组面板高度，默认 50PX */
    rowGroupPanelHeight: number;
    /** 启用分组行 */
    groupRows: boolean;
    /** 启用行分组合计行 */
    groupFooter: boolean;
    /** 分组行是否展开，默认为 展开  */
    expandGroupRows: boolean;
    /**
     * 分组合计行自定义样式：
     * 允许的值为
     * - { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } }
     * - (groupFooterRowData): { cls: 'cssclassname, ', style: { color: 'red', border: 1px solid } } => {}
     */
    groupFooterStyler: any;
    /** 合计数据显示位置
     * inGroupRow: 与分组在同一行，分别相关合计字段对齐
     * groupFooterRow: 在分组数据最后增加一行
     * 默认为 groupFooterRow
     */
    groupSummaryPosition: 'inGroupRow' | 'groupFooterRow';
    /** 分组信息合并列数
     * 默认为 1
     */
    groupCellColSpan: number;
    /** 分组字段名称, 多字段分组以英文逗号分隔 */
    private _groupField;
    groupFields$: BehaviorSubject<any[]>;
    groupField: string;
    /** 显示分组列 */
    showGroupColumn: boolean;
    /** 分组格式化 */
    groupFormatter: (groupRow: any) => any;
    /** 分组行样式 */
    groupStyler: (groupRow: any) => {
        cls?: string;
        style?: any;
    };
    /** 显示分组列面板。默认为 false */
    private _showRowGroupPanel;
    showRowGroupPanel: any;
    /** 双击表头适应内容宽度 */
    AutoColumnWidthUseDblclick: boolean;
    /** 行钩选及选中禁用表达式 */
    disableRow: (row: any, index?: any) => boolean;
    /** 使用内部过滤器; 默认为 false */
    useDefaultFilter: boolean;
    /** 过滤图标与排序图标合并，此属性与 enableFilterRow 互斥 */
    enableSmartFilter: boolean;
    /** 显示过滤行 */
    enableFilterRow: boolean;
    /** 服务器端过滤 */
    remoteFilter: boolean;
    /** 启用过滤条件显示条 */
    showFilterBar: boolean;
    /** 过滤条件汇总条高度，默认 32px  */
    filterBarHeight: number;
    filterRowHeight: number;
    conditions: any;
    selectValue: any;
    checkValues: any[];
    selectValues: any[];
    /** 合并单元格；先支持纵向合并 */
    mergeCell: boolean;
    mergeFields: any[];
    /** 合并单元格数据启用客户端排序 */
    enableClientSortForMergeCell: boolean;
    /** 使用高级控制面板(列设置) */
    useControlPanel: boolean;
    /** 启用简洁控制面板模式。默认为 false */
    enableSimpleMode: boolean;
    /** 点击列设置图标，默认打开的控制面板 */
    controlPanelMode: 'advanced' | 'simple';
    /** 启用列设置方案 */
    enableScheme: boolean;
    /** 系统预制方案名称 */
    defaultSchemeName: string;
    /** 多表头启用列设置; 默认 false */
    enableSetMultiHeaders: boolean;
    /** 允许运行时列设置中可设置的最大表头数（包含数据列）；默认为 3层 */
    maxMultiHeaders: number;
    /** 列设置方案变化后，弹出方案变更提示，默认为false,修改保存到当前方案中 */
    showConfirmWhenSchemeChanged: boolean;
    /** 阻止click 事件冒泡 */
    stopPropagation: boolean;
    /**
     * (202105 弃用)
     * 点击单元格进行编辑状态时，关闭其他Grid的编辑器。默认 false，
     * 多个列表存时，仅有一个列表中有编辑状态，其他列表结束编辑
     */
    closeOtherGridEditor: boolean;
    /** 当数据源为空时，清空已选记录, 默认 true */
    clearSelectionsWhenDataIsEmpty: boolean;
    /** 启用右键菜单，默认为 false */
    enableContextMenu: boolean;
    /** 右键菜单数据 */
    contextMenus: ContextMenuItem[];
    beforeShowContextMenus: (e: any) => boolean;
    selectValueChange: EventEmitter<{}>;
    checkValuesChange: EventEmitter<{}>;
    selectValuesChange: EventEmitter<{}>;
    beforeEdit: (param: RowEditParam) => Observable<boolean>;
    beginEdit: EventEmitter<RowEditParam>;
    afterEdit: (rowIndex: number, rowData: any, column?: DataColumn, editor?: any) => Observable<boolean>;
    endEdit: EventEmitter<{
        rowIndex: number;
        rowData: any;
        column?: DataColumn;
        value?: any;
    }>;
    cancelEdited: EventEmitter<string>;
    scrollY: EventEmitter<{}>;
    pageSizeChanged: EventEmitter<{}>;
    pageChanged: EventEmitter<{}>;
    loadSuccess: EventEmitter<{}>;
    emptyData: EventEmitter<{}>;
    filterChanged: EventEmitter<{}>;
    beforeSelect: (params: BeforEventParam) => Observable<boolean>;
    beforeUnselect: (params: BeforEventParam) => Observable<boolean>;
    beforeCheck: (params: BeforEventParam) => Observable<boolean>;
    beforeUncheck: (params: BeforEventParam) => Observable<boolean>;
    beforeSortColumn: (field: string, order: string, instance: DatagridComponent) => Observable<boolean>;
    beforeLoad: (params: {
        data: any;
        instance: DatagridComponent;
    }) => Observable<{
        data: any;
    }>;
    /** 启用选中单元格高亮显示 */
    enableHighlightCell: boolean;
    /**  选中的数据始终从数据源中获取. 默认为 false */
    checkedRowsDataFromSource: boolean;
    /** 当前单元格为只读时，使用tab 键跳到下个单元格时，是否允许进入编辑状态，默认为 false;
     * 默认情况下，当前单元格只读，按TAB跳到下个CELL 时，选中CELL ，回车进入编辑。
     * 开启后，下个单元格自动进入编辑状态。
     */
    editcellWhenTabKeydwon: boolean;
    /** 单元格点击前事件 */
    beforeClickCell: EventEmitter<RowEditParam>;
    dblclickRow: EventEmitter<{}>;
    selectChanged: EventEmitter<SelectedRow>;
    unSelect: EventEmitter<SelectedRow>;
    selectAll: EventEmitter<SelectedRow[]>;
    unSelectAll: EventEmitter<{}>;
    /** 异步请求虚拟加载 */
    scrollYLoad: EventEmitter<{
        pager: number;
        pageSize: number;
    }>;
    checked: EventEmitter<SelectedRow>;
    unChecked: EventEmitter<SelectedRow>;
    checkAll: EventEmitter<SelectedRow[]>;
    unCheckAll: EventEmitter<SelectedRow[]>;
    checkedChange: EventEmitter<SelectedRow[]>;
    columnSorted: EventEmitter<any>;
    rowClick: EventEmitter<{}>;
    rowAppended: EventEmitter<{}>;
    rowDeleted: EventEmitter<{}>;
    rowUpdated: EventEmitter<{}>;
    dataChange: EventEmitter<{}>;
    /** 最后一行的最后单元格回车处理事件 */
    lastCellEnterHandler: EventEmitter<{}>;
    /** 分组字段变化后 */
    groupFieldChange: EventEmitter<{}>;
    /** 拖动列改变列显示位置后触发 */
    columnMoved: EventEmitter<{}>;
    /** 单元格点击事件 */
    cellClick: EventEmitter<{}>;
    resized: EventEmitter<{}>;
    dgColumns?: QueryList<DatagridColumnDirective>;
    dgPager: any;
    resizeProxy: ElementRef;
    resizeProxyBg: ElementRef;
    dgContainer: ElementRef;
    longTextArea: ElementRef;
    smartFilterToolbar: SmartFilterToolbarComponent;
    colGroup: ColumnGroup;
    private _loading;
    loading: boolean;
    readonly selections: SelectedRow[];
    readonly checkeds: any[];
    checkedRows: any[];
    private _selectedRow;
    selectedRow: SelectedRow;
    ds: {
        index: number;
        rows: any[];
        top: number;
        bottom: number;
        scrolling: boolean;
    };
    pagerOpts: any;
    restService: RestService;
    editors: {
        [key: string]: any;
    };
    validators: {
        name: string;
        value: ValidatorFn;
    }[];
    currentCell: CellInfo;
    flatColumns: DataColumn[];
    footerWidth: number;
    clickDelay: number;
    private resizeColumnInfo;
    private ro;
    subscriptions: Subscription[];
    realHeaderHeight: number;
    isSingleClick: boolean;
    docuemntCellClickEvents: any;
    documentCellClickHandler: any;
    documentCellKeydownEvents: any;
    documentCellKeydownHandler: any;
    private modalClickEvent;
    documentRowKeydownHandler: any;
    documentRowEditKeydownHanlder: any;
    documentClickEndRowEditHandler: any;
    pending: boolean;
    colFormatSer: ColumnFormatService;
    scrollInstance: ScrollbarDirective;
    localeService: LocaleService;
    mergeCellInfo: {};
    ignoreTarget: string[];
    clientFilterService: DatagridFilterService;
    settingService: any;
    /**
     * 控制列字段名称: _datagrid-setting-control_
     **/
    ControlPanelFeild: string;
    private _isResized;
    gridSize: {
        width: string;
        height: string;
    };
    clientFilterChanged: boolean;
    styleSheetId: string;
    groupRowPanelPlaceholder: string;
    commonUtils: CommonUtils;
    smartFilterService: DatagridSmartFilterService;
    smartFilterResult: {
        controlData: any[];
        conditions: any[];
    };
    smartFilterBarHeight: number;
    idService: IdService;
    private _active_datagrid_cls;
    private _blured_datagrid_cls;
    _custom_datagrid_cls: string;
    sms: SelectionModeService;
    focusRowIndex: number;
    private documentBodyMouseDown;
    private farrisInstances;
    private currentPagerData;
    private resizeTimer;
    private debugSer;
    private DATA_CHANGED_TIMER;
    /** 当bodyclick 时，是否退出行编辑状态，默认为 false */
    exitRowEditingWhenBodyClick: boolean;
    formValidations: any;
    isFF: boolean;
    private _footerRowHeight;
    constructor(cd: ChangeDetectorRef, el: ElementRef, inject: Injector, zone: NgZone, dfs: DatagridFacadeService, dgs: DatagridService, app: ApplicationRef, domSanitizer: DomSanitizer, render2: Renderer2);
    setCurrentPagerData($data: any): void;
    writeConsole(msg: any, type?: 'info' | 'log' | 'warn' | 'error'): void;
    private updateFooterData;
    ngDoCheck(): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private checkFilterStyle;
    private _checkSize;
    private checkDragColumns;
    private enableSettings;
    private checkOptions;
    refreshSelectedData(): void;
    ngOnDestroy(): void;
    onClick(event: MouseEvent): void;
    private initPaginationOptions;
    private updatePagerOptions;
    private setPagerTotal;
    private setFooterHeight;
    customStyleKey(): string;
    private setRowHeight;
    initSelectOrChecked(): void;
    private updateAllCheckboxStatus;
    private setCheckboxBehavior;
    private _cancelColumnFixed;
    private _flatColumns;
    columnIsVisible(col: DataColumn): any;
    private addControlCol;
    private checkGroupHeaderColumns;
    private correctColumns;
    private checkColumnsType;
    private checkGroupRowSetting;
    private checkMergeCell;
    private checkSortInfo;
    private checkNowrap;
    setHeaderHeight(): number;
    columnsChanged(reloadData?: boolean, useColumnSettingWidth?: any, rebuildFilterBar?: boolean): void;
    private headerHeightChange;
    /** 判断是否在弹出的窗口中；返回undefind 说明没有在弹出的窗口，否则视为当前列表在弹出窗口使用 */
    inDialog(): any;
    /** 初始编辑器与验证器 */
    private initEditorAndValidator;
    setPagerHeight(): void;
    private initState;
    private setFitColumns;
    private setGridNewSizeWhenFit;
    calculateGridSize(fit?: boolean): void;
    private initBeforeEvents;
    trackByRows: (index: number, row: any) => any;
    private unbindMoveSelectRowEvent;
    private bindDocumentMoveSelectRowEvent;
    private bindEditListenerInModal;
    onDocumentMouseDown: (event: any) => boolean;
    private bindDocumentEditListener;
    private unbindDocumentEditListener;
    private onKeyDownEvent;
    private unsubscribes;
    isRowEditing(): number | false;
    isCellEditing(): boolean;
    isEditing(): number | boolean;
    endEditing(): void;
    getEditors(): any[];
    editCell(rowId: any, field: string, validation?: {
        isValid: boolean;
        message: string;
    }): void;
    endCellEdit(event?: any): void;
    editRow(rowId?: any): boolean;
    endRowEdit(): {
        canEnd: boolean;
    };
    cancelEdit(rowId: any, emit?: boolean): void;
    closeAllCellEditor(): void;
    private rowEditTabKeydwonEvent;
    private bindRowEditorKeydownEvent;
    private unbindRowEditorKeydownEvent;
    private _clientFilter;
    private smartFilterData;
    onClearSmartFilters($event?: any): void;
    onRemoveSmartFilterItem($event: any): void;
    onFilterBarResize($event: any): void;
    onSmartFilterChange($event: any): void;
    filterData(conditions?: any): void;
    /** 清空过滤条件 */
    clearCondition(): void;
    private _loadData;
    loadData(data?: any, keepSortState?: boolean, keepScrollPosition?: boolean): void;
    loadVirtualData(data: any): void;
    fetchData(pageIndex: any, pageSize: any): Observable<any>;
    refresh(): void;
    reload(): void;
    /** 获取当前页数据 */
    getRows(): any[];
    getGroupRow(groupRowId: string): {
        data: any;
        index: number;
    };
    setPageIndex(pageIndex: number, detectChanges?: boolean): void;
    setPageList(pageList: number[], detectChanges?: boolean): void;
    onPageChange(pageIndex: number): void;
    onPageSizeChange(pageSize: number): void;
    onRemoveSelectedItem(id: any): void;
    onClearSelectedItem($event: any): void;
    showLoading(): void;
    closeLoading(detectChanges?: boolean): void;
    private replacePX2Empty;
    renderCustomCls(cls: any, dom: any): void;
    renderCustomStyle(cs: CustomStyle, dom: any, cssRuleText?: any): void;
    renderCustomStyle2(cs: CustomStyle, dom: any, cssClassName: string): void;
    getBoundingClientRect(el: ElementRef): any;
    getElementPadding(el: HTMLElement): {
        top: number;
        left: number;
        bottom: number;
        right: number;
    };
    getElementBorderWidth(el: HTMLElement): {
        top: number;
        bottom: number;
        right: number;
        left: number;
    };
    formatData(field: any, data: any, formatter: any): any;
    getFieldValue(field: any, rowData: any): any;
    private canOperateCheckbox;
    findNextTd(nextColumn: any): any;
    /**
     * 依据当前字段查询下个字段的TD DOM
     * @param field 当前字段名称
     * @param dir 移动方向
     * @returns TD element
     */
    findNextCell(field: string, dir: MoveDirection): any;
    selectNextCell(dir: MoveDirection, event: Event): any;
    getRowIdByTr(tr: HTMLElement): {
        id: any;
        index: number;
        data: any;
    };
    _beforeSelectRow$(index: any, data: any, id: any): Observable<boolean>;
    selectNextRow(): void;
    selectPrevRow(): void;
    removeCellSelectedCls(): void;
    /**
     * 选中行
     * @param id 选中行ID
     * @param emit 触发select 事件
     * @param toCurrentPosition 滚动条定位到当前选择中行
     */
    selectRow(id: any, emit?: boolean, toCurrentPosition?: boolean): void;
    /**
     * 滚动条滚动到当前行的位置
     */
    scrollToCurrentRow(): void;
    unSelectRow(id: any, emit?: boolean): void;
    selectAllRows(): void;
    cancelSelectCell(): void;
    clearSelections(excludeIds?: string[]): void;
    checkRow(id: any, emit?: boolean): void;
    /** 钩选行，不触发选中事件 */
    checkRows(ids: any[], emit?: boolean): void;
    /** 取消钩选，不触发选中事件 */
    unCheckRows(ids: any[], emit?: boolean): void;
    checkAllRows(emit?: boolean): void;
    unCheckRow(id: any, emit?: boolean): void;
    /** 清空钩选行，默认只清空当前页的钩选
     * clearAll: 清空所有 默认为 false; 否则仅清空当前页的钩选数据。
     */
    clearCheckeds(clearAll?: boolean, emitUnCheckAll?: boolean): void;
    clearAll(): void;
    private getResizeProxyPosLeft;
    private toggleResizeProxy;
    onColumnResizeBegin(e: MouseEvent): void;
    onColumnResize(e: MouseEvent): void;
    onColumnResizeEnd(e: MouseEvent, col: DataColumn): void;
    /** 还原列宽 */
    restituteColumnsSize(): void;
    /** 单元格内容自适应列宽 */
    sizeToContent(col: DataColumn, th: ElementRef): boolean;
    getChanges(): import("./services/state").RowDataChanges;
    acceptChanges(): void;
    rejectChanges(): void;
    appendRow(row: any): void;
    updateRow(rowId: any, newData: {
        [key: string]: any;
    }): void;
    private _updateRow;
    refreshRow(rowId: any): void;
    deleteRow(rowId?: any): void;
    validateRow(): void;
    insertRow(): void;
    scrollToLeft(): void;
    scrollToRight(): void;
    scrollToTop(): void;
    scrollToBottom(): void;
    private _setColumnReadonly;
    setColumnReadonly(field: string, readonly?: boolean): void;
    isMultiHeader(): boolean;
    toggleVisibleColumn(fields: string[], visible?: boolean): void;
    getColumn(field: string): DataColumn;
    showColumn(field: string | string[], reload?: boolean): void;
    hideColumn(field: string | string[], reload?: boolean): void;
    updateColumn(field: string, columnObject: {
        [key: string]: any;
    }, detectChange?: boolean): void;
    setColumnFormatter(field: string, formatter: any, detectChange?: boolean): void;
    updateColumnFormatterOptions(field: string, formatterOptions: any, detectChange?: boolean): void;
    setColumnTitle(field: string, title: string, detectChange?: boolean): void;
    /**
     * 排序
     * @param sortName 排序字段，如： 'name,age'
     * @param sortOrder 排序方式，如：'desc, asc'
     */
    sort(sortName?: string, sortOrder?: string): void;
    clearSort(): void;
    onColumnSorted(): void;
    updateSortInfo(newSortName: any, newSortOrder: any): void;
    /** 列设置 */
    showControlPanel($event: MouseEvent): void;
    checkSettingHttp(): void;
    disableHeader(flag?: boolean): void;
    /** 获取用户个性化设置 */
    private userProfileSetting;
    private isActived;
    private cleanDom;
    cellIsReadOnly(col: DataColumn, rowData: any): boolean;
    private groupFieldChanged;
    removeGroupField(field: string): void;
    clearAllGrouppingField($event: any): void;
    setGroupFields(groupFields: any): void;
    activeDataGrid(active?: boolean): void;
    onDatagridContainerFocus($event: any): void;
    private setShadowColumnForFastMode;
    private setCellStyle;
    private updateFixedColumnCssForFastMode;
    expandGroupRow(groupRowIndex: number): void;
    collapseGroupRow(groupRowIndex: number): void;
    expandAllGroupRows(): void;
    collapseAllGroupRows(): void;
    private checkFilterValues;
    getActionColumn(): {};
    hideActionColumn(): void;
    showActionColumn(): void;
    /**
     * 支持全局设置表头、合计行、数据行、行号列宽、复选框列宽
     * 分页条高度可通过配置样式实现，如：
     *  .f-datagrid-pager {
            height: 60px!important;
        }
     * */
    applyNewSize(sizeConfig: SizeConfig): void;
}
