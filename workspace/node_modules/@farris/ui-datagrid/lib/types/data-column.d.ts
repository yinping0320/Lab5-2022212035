import { ComponentRef, TemplateRef } from '@angular/core';
import { ColumnFormatter } from '@farris/ui-common/column';
import { DatagridValidator } from './datagrid-validator';
import { Compare } from '@farris/ui-common/types';
import { ComponentType } from '@angular/core/src/render3';
import { FormGroup } from '@angular/forms';
export interface CustomStyle {
    cls?: string;
    style?: {
        [key: string]: string;
    };
}
export declare type MoveDirection = 'left' | 'right' | 'up' | 'down';
declare type TooltipContentFn = (value: any, rowData: any, column: any) => string;
declare type TooltipContent = string | TooltipContentFn;
export declare type HeaderStyleFn = (column: DataColumn) => CustomStyle;
declare type HeaderStyle = string | {
    [cssKey: string]: string;
} | HeaderStyleFn;
declare type ColumnFormatterFn = (value: any, rowData: any, rowIndex: any) => any;
declare type ColumnFormatterType = ColumnFormatterFn | ColumnFormatter;
export interface CellContext {
    field: string;
    rowIndex: number;
    rowData: any;
    column: any;
    instance: any;
    formGroup: FormGroup;
    tools: any;
}
export interface ICellTemplateComponent {
    ctx: Partial<CellContext>;
    bindingContext?: any;
}
export declare type CellTemplateFn = () => ComponentType<ICellTemplateComponent> | ComponentRef<ICellTemplateComponent>;
export declare type CellTemplateRef = ComponentType<ICellTemplateComponent> | ComponentRef<ICellTemplateComponent>;
export interface DataColumn {
    dataType?: string;
    id?: string;
    parentId?: any;
    field: string;
    title: string;
    width: number;
    /** 记录原始定义宽度 */
    originalWidth?: number;
    /** 标题对齐方式 */
    halign?: 'left' | 'center' | 'right';
    /** 文本对齐方式 */
    align?: 'left' | 'center' | 'right';
    /** 垂直对齐方式 */
    valign?: 'top' | 'middle' | 'bottom';
    formatter?: ColumnFormatterType;
    styler?: (value: any, rowData: any, rowIndex: any) => CustomStyle;
    /** 表头自定义样式 */
    headerStyler?: HeaderStyle;
    /** 左侧边距 */
    left?: number;
    /** 右侧边距 */
    right?: number;
    /** 是否固定 */
    fixed?: 'left' | 'right' | 'center';
    /** 是否显示 */
    visible?: boolean | any;
    /** 只读 */
    readonly?: boolean | any;
    editor?: GridEditor;
    /** 单元格自定义模板 */
    template?: TemplateRef<any>;
    /** 表关模板 */
    headerTemplate?: TemplateRef<any>;
    /** 编辑器模板 */
    editorTemplate?: TemplateRef<any>;
    /** 鼠标移动至单元格后，显示悬浮消息 */
    showTips?: boolean;
    /** 单元格提示模式：
     *  allways： 鼠标滑过即显示
     *  auto: 单元格宽度不够时才会显示
     */
    tipMode?: 'allways' | 'auto';
    tipContent?: TooltipContent;
    tipOptions?: any;
    /** True to allow the column can be sorted. */
    sortable?: boolean;
    order?: 'asc' | 'desc';
    sorter?: (r1: any, r2: any) => 0 | 1 | -1;
    /** True to allow the column can be resized. */
    resizable?: boolean;
    rowspan?: number;
    /** 列合并 */
    colspan?: number;
    /** 列合并原始值  */
    origianlColSpan?: number;
    index?: number;
    footer?: GridFooterRow;
    /** 允许分组，默认为 true */
    allowGrouping?: boolean;
    groupFooter?: GridFooterRow;
    validators?: DatagridValidator[];
    filter?: ColumnFilter | any;
    /** 是否多语字段 */
    isMultilingualField?: boolean;
    /** 空格键响应回调函数 */
    onSpaceHandler?: (e: any) => any;
    /** 回车响应回调函数 */
    onEnterHandler?: (e: any) => any;
    componentType?: CellTemplateFn;
    headerComponentType?: CellTemplateFn;
    /** 由datagrid接管click 事件，默认为 true */
    proxyClick?: boolean;
}
export declare enum ColumnFilterType {
    string = 0,
    number = 1,
    boolean = 2,
    date = 3,
    time = 4,
    datetime = 5,
    enum = 6,
    fromdata = 7
}
/** Client Filter Type */
export interface FilterCondition {
    operator1?: Compare;
    value1?: any;
    relation?: 'and' | 'or' | '';
    operator2?: Compare;
    value2?: any;
}
export interface ColumnFilter {
    type?: ColumnFilterType;
    enableOperator?: boolean;
    options?: any;
}
export interface GridEditor {
    type: string;
    options?: any;
    validators?: DatagridValidator[];
}
export interface ColumnGroup {
    /** 左侧固定列总宽度 */
    leftFixedWidth?: number;
    /** 左侧固定列集合 */
    leftFixed?: DataColumn[];
    /** 非固定列集合 */
    normalColumns?: DataColumn[];
    /** 右侧固定列集合 */
    rightFixed?: DataColumn[];
    columns?: DataColumn[];
    /** 右侧固定列宽度 */
    rightFixedWidth?: number;
    /** 正常宽度 */
    normalWidth?: number;
    /** 所有列宽度之和 */
    totalWidth?: number;
    /** 用户设置的列宽之和 */
    originalTotalWidth?: number;
}
export interface PaginationInfo {
    enable?: boolean;
    pageList?: number[];
    pageSize?: number;
    pageIndex?: number;
    total?: number;
}
export declare enum CalculationType {
    /** 无 */
    none = -1,
    /** 最大值 */
    max = 0,
    /** 最小值 */
    min = 1,
    /** 求和 */
    sum = 2,
    /** 平均数 */
    average = 3,
    /** 总记录数 */
    count = 4
}
export interface GridFooterRow {
    options?: {
        /** 计算类型 */
        calculationType?: CalculationType;
        /** 静态文本，直接附加到TD 中 */
        text?: string;
    };
    /** 文本对齐方式 */
    align?: 'left' | 'center' | 'right';
    /** 数据格式化 */
    formatter?: (value: any, rowData: any, rowIndex: any) => any | ColumnFormatter;
    /** 单元格样式 */
    styler?: (value: any, rowData: any, rowIndex: any) => CustomStyle;
    rowspan?: number;
    colspan?: number;
    visible?: boolean;
}
export declare const defaultPaginationInfo: PaginationInfo;
export {};
