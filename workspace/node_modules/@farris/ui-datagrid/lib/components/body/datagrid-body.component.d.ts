import { OnInit, Renderer2, ElementRef, OnDestroy, ChangeDetectorRef, AfterViewInit, AfterViewChecked, OnChanges, SimpleChanges, NgZone, Injector, ApplicationRef, EventEmitter } from '@angular/core';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { ScrollbarDirective } from '../../scrollbar/scrollbar.directive';
import { ColumnGroup } from '../../types';
import { SelectedRow } from '../../services/state';
import { DatagridService } from '../../services/datagrid.service';
import { DatagridComponent } from '../../datagrid.component';
import { FormatCellDataPipe } from '../../utils/format-cell-data.pipe';
import { ContextMenuItem } from '@farris/ui-context-menu';
export declare class DatagridBodyComponent implements OnInit, OnDestroy, OnChanges, AfterViewInit, AfterViewChecked {
    private injector;
    private app;
    dg: DatagridComponent;
    private cd;
    private el;
    psConfig: {
        swipeEasing: boolean;
        minScrollbarLength: number;
        handlers: string[];
        suppressScrollY: boolean;
    };
    top: number;
    height: number;
    width: number;
    colsWidth: number;
    totalWidth: number;
    leftFixedWidth: number;
    rightFixedWidth: number;
    rowHeight: number;
    bodyStyle: any;
    scrollTop: number;
    scrollLeft: number;
    deltaTopHeight: number;
    wheelWidth: number;
    private _fixedRightScrollLeft;
    fixedRightScrollLeft: number;
    maxScrollLeft: number;
    showRightShadow: boolean;
    footerHeight: number;
    canvasWidth: any;
    columnsGroup: ColumnGroup;
    topHideHeight: number;
    bottomHideHeight: number;
    startRowIndex: number;
    data: any;
    dataChange: EventEmitter<{}>;
    scrollBarMode: string;
    contextMenuItems: ContextMenuItem[];
    checkedRows: any[];
    /** 性能优化版，默认为 false */
    fast: boolean;
    ps?: ScrollbarDirective;
    tableRowsCmp: any;
    rightRowsCmp: any;
    fixedLeftEl: ElementRef;
    fixedRightEl: ElementRef;
    mainArea: ElementRef;
    viewScrollContainer: ElementRef;
    visibleContextMenus: any[];
    currentRowId: any;
    private _hoverRowIndex;
    hoverRowIndex: number;
    readonly selectedRows: SelectedRow[];
    private gridSizeSubscribe;
    private columnResizeSubscribe;
    private onDataSourceChangeSubscribe;
    private selectRowSubscribe;
    private unselectRowSubscribe;
    private selectAllSubscribe;
    private checkRowSubscribe;
    private clearSelectionsSubscribe;
    private checkAllSubscribe;
    private uncheckRowSubscribe;
    private clearCheckedsSubscribe;
    private subscriptions;
    dfs: DatagridFacadeService;
    dgs: DatagridService;
    ngZone: NgZone;
    render: Renderer2;
    private viewportH;
    viewportW: any;
    canvasHeight: any;
    private minRowBuffer;
    private vScrollDir;
    private rowsCache;
    private lastRenderedScrollTop;
    private lastRenderedScrollLeft;
    prevScrollTop: number;
    prevScrollLeft: number;
    rows: any[];
    blankTopHeight: number;
    blankBottomHeight: number;
    readonly scrollbarXHeight: number;
    readonly scrollbarYWidth: 0 | 18;
    cellContentFormatter: FormatCellDataPipe;
    private __triggerBodyClickEvent;
    private destroy$;
    private _onMouseClick;
    private _scrollTimer;
    private _scrollXTimer;
    private ro;
    private resizeObserverTimer;
    private _clickCellWeakMap;
    constructor(injector: Injector, app: ApplicationRef, dg: DatagridComponent, cd: ChangeDetectorRef, el: ElementRef);
    ngOnInit(): void;
    private updateContainerSize;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    private setPositionTop;
    private checkScrollbarPosition;
    /**
     * 数据发生变化，重新加载数据时执行
     * 重置滚动条位置
     */
    private onDataChanged;
    private destroySubscriptions;
    private listenSubjects;
    private groupRowExpandUpdate;
    private groupRowStateChanged;
    private keepScrollbarPosition;
    private updateColumnSize;
    private setFixedRightWidth;
    private buildCustomCellStyle;
    private checkedRowsChanged;
    private getTrDomHeight;
    updateRowHeight2(): void;
    private removeRowHeightCls;
    private addRowHeightCls;
    /** 允许数据折行时，计算行号的行高 */
    updateRowHeight(trDomId?: any): void;
    private getBodyStyle;
    private updateScrollPosition;
    onScrollToX($event: any): void;
    onScrollToY($event: any): void;
    onPsXReachStart($event: any): void;
    onPsXReachEnd($event: any): void;
    isChecked(rowData: any): boolean;
    isSelected(rowData: any): boolean;
    toggleGroupRow(row: any, open?: boolean): void;
    /** =================================== 分 ====== 隔 ====== 线 =================================== */
    /** 获取可视区域高度 */
    getViewPortHeight(): number;
    private allRowsHeight;
    private getCanvasHeight;
    updateCanvasHeight(): void;
    private getRowFromPosition;
    getVisibleRange(viewportTop?: number, viewportLeft?: number): {
        top: number;
        bottom: number;
        leftPx: number;
        rightPx: any;
    };
    private getRenderedRange;
    private renderRows;
    private removeRowFromCache;
    private cleanupRows;
    hasYScrollbar(showYscrollbar?: boolean): void;
    onClickScrollArrow($event: any): void;
    private renderData;
    private handleScroll;
    private _handleScroll;
    private _scrollTo;
    onMouseClick($event: MouseEvent): void;
    private _selectRow;
    onBeforeShowContextMenu: (e: any) => import("rxjs").Observable<{
        show: boolean;
    }> | import("rxjs").Observable<{
        show: any;
        data: {
            rowid: any;
            data: any;
            grid: DatagridComponent;
            column: any;
        };
        focusTargetWidth: any;
    }>;
}
