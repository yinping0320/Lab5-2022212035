import { ElementRef, Renderer2, OnInit, OnDestroy, Injector, AfterViewInit, NgZone, OnChanges, SimpleChanges } from '@angular/core';
import { FormControl } from '@angular/forms';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DataColumn } from './../../types/data-column';
import { DatagridComponent } from '../../datagrid.component';
import { Observable } from 'rxjs';
export declare class DatagridCellEditableDirective implements OnInit, OnDestroy, OnChanges, AfterViewInit {
    private injector;
    el: ElementRef;
    private render;
    dg: DatagridComponent;
    ngZone: NgZone;
    rowData: any;
    column: DataColumn;
    private clickTimer;
    private cellclick;
    private celldblclick;
    private bindCellEventSubscription;
    private editorInputKeydownEvent;
    editor: any;
    formControl: FormControl;
    cellEditorRef: any;
    dc: DatagridCellComponent;
    private dgb;
    private dr;
    private dfs;
    private dgs;
    private cellEditorCreatedSubscription;
    private cellEditorDestorySubscription;
    private destroy$;
    private validMessageEle;
    constructor(injector: Injector, el: ElementRef, render: Renderer2, dg: DatagridComponent, ngZone: NgZone);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    private runZoneClick;
    private initCellEvent;
    ngOnDestroy(): void;
    private isDifferentCell;
    private onClickCell;
    private onDblClickCell;
    isReadonly(col?: DataColumn): any;
    private getReadonlyValue;
    openCellEditor(): void;
    private emitBeginEdit;
    removeValidMessage(): void;
    showValidMessage(): HTMLDivElement;
    closeEditingCell(): Observable<any>;
    cancelCellEditing(): void;
    bindEditorInputEvent(): void;
    unBindEditorInputEvent(): void;
    findLastEditCell(): any;
    onKeyDownForInput(e: KeyboardEvent): void;
    private selectCell;
    private moveScrollbar;
    private moveNextCellAndEdit;
    private movePrevCellAndEdit;
    private selectNextRowAndEditCell;
    private clearCellSelectedClass;
    private setCellClsWithEditorType;
    private cleanOtherEditorIcon;
}
