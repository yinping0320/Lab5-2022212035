import { Renderer2, SimpleChanges, OnChanges, ChangeDetectorRef, OnDestroy, QueryList } from '@angular/core';
import { FormBuilder, FormGroup } from '@angular/forms';
import { Subscription } from 'rxjs';
import { EventEmitter, OnInit, ElementRef, AfterViewInit, Injector } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridRow } from '../../types/datagrid-row';
import { DatagridRowHoverDirective } from './datagrid-row-hover.directive';
export declare class DatagridRowDirective implements OnInit, AfterViewInit, DatagridRow, OnChanges, OnDestroy {
    dg: DatagridComponent;
    private injector;
    private fb;
    el: ElementRef;
    private render;
    drHover: DatagridRowHoverDirective;
    editable: boolean;
    rowData: any;
    rowIndex: number;
    clickHandler: EventEmitter<{}>;
    rowUpdated: EventEmitter<{}>;
    cells: QueryList<DatagridCellComponent>;
    readonly rowId: any;
    readonly disabled: boolean;
    form: FormGroup;
    private dfs;
    private documentRowDblclickEvent;
    private ngZone;
    private dgb;
    cd: ChangeDetectorRef;
    columnsChangedSubscription: Subscription;
    datasourceChangedSubscription: Subscription;
    subscriptions: Subscription[];
    private destroy$;
    constructor(dg: DatagridComponent, injector: Injector, fb: FormBuilder, el: ElementRef, render: Renderer2, drHover: DatagridRowHoverDirective);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterViewInit(): void;
    private getRowPosition;
    renderCustomStyle(rowData?: any): void;
    onRowClick(event: MouseEvent): void;
    initFormControl(): void;
    createControl(): void;
    private createFormControl;
    private bindValidations;
    refresh(): void;
    updateRowHeight(): void;
    private updateCellEmptyStyle;
}
