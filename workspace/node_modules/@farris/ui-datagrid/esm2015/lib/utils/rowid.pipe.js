/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe } from '@angular/core';
import { TR_PREFIX } from './../types/constant';
import { DatagridFacadeService } from '../services/datagrid-facade.service';
export class RowDataIdPipe {
    /**
     * @param {?} dfs
     */
    constructor(dfs) {
        this.dfs = dfs;
    }
    /**
     * @param {?} rowData
     * @param {?=} fixedRight
     * @param {?=} fixedLeft
     * @param {?=} isGroupRow
     * @return {?}
     */
    transform(rowData, fixedRight = false, fixedLeft = false, isGroupRow = false) {
        if (rowData) {
            /** @type {?} */
            let rowID = TR_PREFIX + this.dfs.primaryId(rowData);
            if (fixedRight) {
                rowID += '_fixedright';
            }
            else if (fixedLeft) {
                rowID += '_fixedleft';
            }
            if (isGroupRow) {
                rowID += '_grouprow';
            }
            return rowID;
        }
        return null;
    }
}
RowDataIdPipe.decorators = [
    { type: Pipe, args: [{ name: 'rowDataId' },] }
];
/** @nocollapse */
RowDataIdPipe.ctorParameters = () => [
    { type: DatagridFacadeService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RowDataIdPipe.prototype.dfs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm93aWQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvcm93aWQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFDcEQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRzVFLE1BQU0sT0FBTyxhQUFhOzs7O0lBRXRCLFlBQW9CLEdBQTBCO1FBQTFCLFFBQUcsR0FBSCxHQUFHLENBQXVCO0lBQUcsQ0FBQzs7Ozs7Ozs7SUFFbEQsU0FBUyxDQUFDLE9BQVksRUFBRSxVQUFVLEdBQUcsS0FBSyxFQUFFLFNBQVMsR0FBRyxLQUFLLEVBQUUsVUFBVSxHQUFHLEtBQUs7UUFDN0UsSUFBSSxPQUFPLEVBQUU7O2dCQUNMLEtBQUssR0FBRyxTQUFTLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO1lBQ25ELElBQUksVUFBVSxFQUFFO2dCQUNaLEtBQUssSUFBSSxhQUFhLENBQUM7YUFDMUI7aUJBQU0sSUFBSSxTQUFTLEVBQUU7Z0JBQ2xCLEtBQUssSUFBSSxZQUFZLENBQUM7YUFDekI7WUFFRCxJQUFJLFVBQVUsRUFBRTtnQkFDWixLQUFLLElBQUksV0FBVyxDQUFDO2FBQ3hCO1lBRUQsT0FBTyxLQUFLLENBQUM7U0FDaEI7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7WUFyQkosSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQzs7OztZQUZoQixxQkFBcUI7Ozs7Ozs7SUFLZCw0QkFBa0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFRSX1BSRUZJWCB9IGZyb20gJy4vLi4vdHlwZXMvY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZhY2FkZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9kYXRhZ3JpZC1mYWNhZGUuc2VydmljZSc7XHJcblxyXG5AUGlwZSh7bmFtZTogJ3Jvd0RhdGFJZCd9KVxyXG5leHBvcnQgY2xhc3MgUm93RGF0YUlkUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZGZzOiBEYXRhZ3JpZEZhY2FkZVNlcnZpY2UpIHt9XHJcblxyXG4gICAgdHJhbnNmb3JtKHJvd0RhdGE6IGFueSwgZml4ZWRSaWdodCA9IGZhbHNlLCBmaXhlZExlZnQgPSBmYWxzZSwgaXNHcm91cFJvdyA9IGZhbHNlKTogYW55IHtcclxuICAgICAgICBpZiAocm93RGF0YSkge1xyXG4gICAgICAgICAgICBsZXQgcm93SUQgPSBUUl9QUkVGSVggKyB0aGlzLmRmcy5wcmltYXJ5SWQocm93RGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChmaXhlZFJpZ2h0KSB7XHJcbiAgICAgICAgICAgICAgICByb3dJRCArPSAnX2ZpeGVkcmlnaHQnO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZpeGVkTGVmdCkge1xyXG4gICAgICAgICAgICAgICAgcm93SUQgKz0gJ19maXhlZGxlZnQnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoaXNHcm91cFJvdykge1xyXG4gICAgICAgICAgICAgICAgcm93SUQgKz0gJ19ncm91cHJvdyc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldHVybiByb3dJRDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcbn1cclxuIl19