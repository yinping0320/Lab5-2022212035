/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TR_PREFIX } from "../types";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 20:31:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
export class Utils {
    /**
     * @return {?}
     */
    static uuid() {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line: no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    }
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    static keysInData(field, data) {
        /** @type {?} */
        const noProperty = 'no property';
        /** @type {?} */
        const val = field.split('.').reduce((/**
         * @param {?} obj
         * @param {?} key
         * @return {?}
         */
        (obj, key) => {
            if (obj && obj.hasOwnProperty(key)) {
                return obj[key];
            }
            else {
                return noProperty;
            }
        }), data);
        return val != noProperty;
    }
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    static getValue(field, data, safe = false) {
        if (!data) {
            return '';
        }
        /** @type {?} */
        let resultVal = '';
        if (field.indexOf('.') === -1 || data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.escapeValue(resultVal);
        }
        return resultVal;
    }
    /**
     * @param {?} field
     * @param {?} val
     * @param {?} obj
     * @param {?=} nest
     * @return {?}
     */
    static setValue(field, val, obj, nest = true) {
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                let lastObj = null;
                /** @type {?} */
                const _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                (c, p) => {
                    lastObj = c;
                    return c[p];
                }), obj);
                if (lastObj) {
                    lastObj[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    }
    /**
     * 获取多语值
     * @param {?} valObj
     * @param {?} localeId
     * @return {?}
     */
    static getMultilingualValue(valObj, localeId) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            localeId = localeId || 'zh-CHS';
            /** @type {?} */
            const val = valObj[localeId];
            if (val !== undefined) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    }
    /**
     * @param {?} val
     * @return {?}
     */
    static escapeValue(val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        /** @type {?} */
        const escapeHTML = (/**
         * @param {?} unsafe_str
         * @return {?}
         */
        (unsafe_str) => {
            return unsafe_str
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\"/g, '&quot;')
                .replace(/\'/g, '&#39;')
                .replace(/\//g, '&#x2F;');
            // .replace('src','drc');
        });
        if (typeof val === 'string') {
            return escapeHTML(val);
        }
        return val;
    }
    /**
     * @param {?} evt
     * @return {?}
     */
    static eventPath(evt) {
        /** @type {?} */
        const path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        const target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        const getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        (node, memo = undefined) => {
            memo = memo || [];
            /** @type {?} */
            const parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    }
    /**
     * @return {?}
     */
    static hasDialogOpen() {
        // return document.body.classList.value.indexOf('modal-open') > -1;
        // 兼容IE 11
        return document.body.className.indexOf('modal-open') > -1;
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} fn
     * @param {?=} opts
     * @return {?}
     */
    static on(el, evt, fn, opts = {}) {
        /** @type {?} */
        const delegatorFn = (/**
         * @param {?} e
         * @return {?}
         */
        e => e.target.matches(opts.target) && fn.call(e.target, e));
        el.addEventListener(evt, opts.target ? delegatorFn : fn, opts.options || false);
        return (/**
         * @return {?}
         */
        () => {
            el.removeEventListener(evt, delegatorFn, opts);
        });
    }
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?=} fn
     * @param {?=} opts
     * @return {?}
     */
    static off(el, evt, fn = (/**
     * @return {?}
     */
    () => { }), opts = {}) {
        el.removeEventListener(evt, fn, opts);
    }
    /**
     * 获取字符长度，中文汉字占2个字符
     * @param {?} str
     * @return {?}
     */
    static getBLen(str) {
        if (str == null) {
            return 0;
        }
        if (typeof str !== 'string') {
            str += '';
        }
        return str.replace(/[^\x00-\xff]/g, '01').length;
    }
    // static difference(first: any[], second: any[]): any[] {
    //     return first.filter(item => !second.includes(item));
    // }
    // static getDiffItems(arr1, arr2) {
    //     const diff1 = Utils.difference(arr1, arr2);
    //     const diff2 = Utils.difference(arr2, arr1);
    //     return diff1.concat(diff2);
    // }
    /**
     * @param {?} col
     * @param {?} localeId
     * @return {?}
     */
    static getWhenEmptyText(col, localeId) {
        /** @type {?} */
        const EMPTY_INPUT_TEXT = {
            'zh-CHS': '请输入',
            'zh-CHT': '請輸入',
            en: 'Please input'
        };
        /** @type {?} */
        const EMPTY_SELECT_TEXT = {
            'zh-CHS': '请选择',
            'zh-CHT': '請選擇',
            en: 'Please select'
        };
        if (col.editor) {
            switch (col.editor.type) {
                case 'datepicker':
                case 'select':
                case 'lookup':
                case 'combolist':
                case 'combo-lookup':
                    return EMPTY_SELECT_TEXT[localeId];
                default:
                    return EMPTY_INPUT_TEXT[localeId];
            }
        }
        // 控制面板列
        if (col.field === '_datagrid-setting-control_') {
            return '';
        }
        return EMPTY_INPUT_TEXT[localeId];
    }
    /**
     * @param {?} tr
     * @return {?}
     */
    static getRowIdByTr(tr) {
        if (tr) {
            /** @type {?} */
            let id = tr.getAttribute('id');
            if (id == null || id == undefined) {
                return null;
            }
            return id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '').replace('_grouprow', '');
        }
        return null;
    }
    /**
     * @param {?} dataid
     * @param {?} parentElement
     * @return {?}
     */
    static getTrDomById(dataid, parentElement) {
        if (parentElement) {
            return parentElement.querySelector(`[id="${dataid}"]`);
        }
        return null;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7Ozs7Ozs7QUFVckMsTUFBTSxPQUFPLEtBQUs7Ozs7SUFFZCxNQUFNLENBQUMsSUFBSTs7OztRQUNQLFNBQVMsRUFBRTtZQUNQLHVDQUF1QztZQUN2QyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzNFLENBQUM7UUFDRCxPQUFPLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDM0YsQ0FBQzs7Ozs7O0lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsSUFBSTs7Y0FDbkIsVUFBVSxHQUFHLGFBQWE7O2NBQzFCLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O1FBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDN0MsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDaEMsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbkI7aUJBQU07Z0JBQ0gsT0FBTyxVQUFVLENBQUM7YUFDckI7UUFD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UUFBUSxDQUFDLENBQUM7SUFDdEMsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbEIsSUFBSSxFQUFFLEVBQUU7O2dCQUNBLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUU5QixJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJLFNBQVMsRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDbEg7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxhQUFhO1FBQ3JDLElBQUksYUFBYSxFQUFFO1lBQ2YsT0FBTyxhQUFhLENBQUMsYUFBYSxDQUFDLFFBQVEsTUFBTSxJQUFJLENBQUMsQ0FBQztTQUMxRDtRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRSX1BSRUZJWCB9IGZyb20gXCIuLi90eXBlc1wiO1xyXG5cclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0wNiAwNzo0Mzo1M1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMS0xOSAyMDozMToyN1xyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIFV0aWxzIHtcclxuXHJcbiAgICBzdGF0aWMgdXVpZCgpIHtcclxuICAgICAgICBmdW5jdGlvbiBTNCgpIHtcclxuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBuby1iaXR3aXNlXHJcbiAgICAgICAgICAgIHJldHVybiAoKCgxICsgTWF0aC5yYW5kb20oKSkgKiAweDEwMDAwKSB8IDApLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoUzQoKSArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgUzQoKSArIFM0KCkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBrZXlzSW5EYXRhKGZpZWxkLCBkYXRhKSB7XHJcbiAgICAgICAgY29uc3Qgbm9Qcm9wZXJ0eSA9ICdubyBwcm9wZXJ0eSc7XHJcbiAgICAgICAgY29uc3QgdmFsID0gZmllbGQuc3BsaXQoJy4nKS5yZWR1Y2UoKG9iaiwga2V5KSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChvYmogJiYgb2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBub1Byb3BlcnR5O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZGF0YSk7XHJcblxyXG4gICAgICAgIHJldHVybiB2YWwgIT0gbm9Qcm9wZXJ0eTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluWvueixoeS4reaMh+WumuWtl+auteeahOWAvOOAgiBmaWVsZDog5Y+v5Lul5Li65bim5pyJ5bGC57qn57uT5p6E55qE6Lev5b6E77yM5aaC77yaIHVzZXIuZmlyc3ROYW1lIHwgbmFtZSDnrYlcclxuICAgICAqL1xyXG4gICAgc3RhdGljIGdldFZhbHVlKGZpZWxkOiBzdHJpbmcsIGRhdGE6IGFueSwgc2FmZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgaWYgKCFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAgJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCByZXN1bHRWYWwgPSAnJztcclxuICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID09PSAtMSB8fCBkYXRhLmhhc093blByb3BlcnR5KGZpZWxkKSkge1xyXG4gICAgICAgICAgICByZXN1bHRWYWwgPSBkYXRhW2ZpZWxkXTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXN1bHRWYWwgPSBmaWVsZC5zcGxpdCgnLicpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChvYmopIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqW2tleV07XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBkYXRhKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChzYWZlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVzY2FwZVZhbHVlKHJlc3VsdFZhbCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRWYWw7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldFZhbHVlKCBmaWVsZDogc3RyaW5nLCB2YWw6IGFueSwgb2JqOiB7IFtrZXk6IHN0cmluZ106IGFueSB9LCBuZXN0ID0gdHJ1ZSkge1xyXG4gICAgICAgIGlmIChmaWVsZCkge1xyXG4gICAgICAgICAgICBpZiAoZmllbGQuaW5kZXhPZignLicpID4gLTEgJiYgbmVzdCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxhc3RPYmogPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgX2ZpZWxkcyA9IGZpZWxkLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgICAgICAgICBfZmllbGRzLnJlZHVjZSggKGMsIHApID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0T2JqID0gYztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY1twXTtcclxuICAgICAgICAgICAgICAgIH0sIG9iaik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGxhc3RPYmopIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0T2JqW19maWVsZHMucG9wKCldID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgb2JqW2ZpZWxkXSA9IHZhbDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog6I635Y+W5aSa6K+t5YC8ICovXHJcbiAgICBzdGF0aWMgZ2V0TXVsdGlsaW5ndWFsVmFsdWUodmFsT2JqLCBsb2NhbGVJZCkge1xyXG4gICAgICAgIGlmICh2YWxPYmogJiYgdHlwZW9mIHZhbE9iaiA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsT2JqKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIGxvY2FsZUlkID0gbG9jYWxlSWQgfHwgJ3poLUNIUyc7XHJcbiAgICAgICAgICAgIGNvbnN0IHZhbCA9IHZhbE9ialtsb2NhbGVJZF07XHJcbiAgICAgICAgICAgIGlmICh2YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBlc2NhcGVWYWx1ZSh2YWw6IGFueSkge1xyXG4gICAgICAgIGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQgfHwgdmFsID09PSAnJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlc2NhcGVIVE1MID0gKHVuc2FmZV9zdHIpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHVuc2FmZV9zdHJcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8mL2csICcmYW1wOycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPC9nLCAnJmx0OycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvPi9nLCAnJmd0OycpXHJcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcIi9nLCAnJnF1b3Q7JylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCcvZywgJyYjMzk7JylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXC8vZywgJyYjeDJGOycpO1xyXG4gICAgICAgICAgICAgICAgLy8gLnJlcGxhY2UoJ3NyYycsJ2RyYycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZXNjYXBlSFRNTCh2YWwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZXZlbnRQYXRoKGV2dDogYW55KSB7XHJcbiAgICAgICAgY29uc3QgcGF0aCA9IChldnQuY29tcG9zZWRQYXRoICYmIGV2dC5jb21wb3NlZFBhdGgoKSkgfHwgZXZ0LnBhdGg7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcclxuXHJcbiAgICAgICAgaWYgKHBhdGggIT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHBhdGguaW5kZXhPZih3aW5kb3cpIDwgMCkgPyBwYXRoLmNvbmNhdCh3aW5kb3cpIDogcGF0aDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHdpbmRvdykge1xyXG4gICAgICAgICAgICByZXR1cm4gW3dpbmRvd107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBnZXRQYXJlbnRzID0gKG5vZGUsIG1lbW8gPSB1bmRlZmluZWQpID0+IHtcclxuICAgICAgICAgICAgbWVtbyA9IG1lbW8gfHwgW107XHJcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSBub2RlLnBhcmVudE5vZGU7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtZW1vO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldFBhcmVudHMocGFyZW50Tm9kZSwgbWVtby5jb25jYXQocGFyZW50Tm9kZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgcmV0dXJuIFt0YXJnZXRdLmNvbmNhdChnZXRQYXJlbnRzKHRhcmdldCksIHdpbmRvdyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhhc0RpYWxvZ09wZW4oKSB7XHJcbiAgICAgICAgLy8gcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnZhbHVlLmluZGV4T2YoJ21vZGFsLW9wZW4nKSA+IC0xO1xyXG4gICAgICAgIC8vIOWFvOWuuUlFIDExXHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50LmJvZHkuY2xhc3NOYW1lLmluZGV4T2YoJ21vZGFsLW9wZW4nKSA+IC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBvbihlbCwgZXZ0LCBmbiwgb3B0czogYW55ID0ge30pIHtcclxuICAgICAgICBjb25zdCBkZWxlZ2F0b3JGbiA9IGUgPT4gZS50YXJnZXQubWF0Y2hlcyhvcHRzLnRhcmdldCkgJiYgZm4uY2FsbChlLnRhcmdldCwgZSk7XHJcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldnQsIG9wdHMudGFyZ2V0ID8gZGVsZWdhdG9yRm4gOiBmbiwgb3B0cy5vcHRpb25zIHx8IGZhbHNlKTtcclxuICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dCwgZGVsZWdhdG9yRm4sIG9wdHMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG9mZihlbCwgZXZ0LCBmbj0gKCkgPT4ge30sIG9wdHM6IGFueSA9IHt9KSB7XHJcbiAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnQsIGZuLCBvcHRzKTtcclxuICAgIH1cclxuICAgIC8qKiDojrflj5blrZfnrKbplb/luqbvvIzkuK3mlofmsYnlrZfljaAy5Liq5a2X56ymICovXHJcbiAgICBzdGF0aWMgZ2V0QkxlbihzdHIpIHtcclxuICAgICAgICBpZiAoc3RyID09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0eXBlb2Ygc3RyICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgc3RyICs9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoL1teXFx4MDAtXFx4ZmZdL2csICcwMScpLmxlbmd0aDtcclxuICAgIH1cclxuXHJcbiAgICAvLyBzdGF0aWMgZGlmZmVyZW5jZShmaXJzdDogYW55W10sIHNlY29uZDogYW55W10pOiBhbnlbXSB7XHJcbiAgICAvLyAgICAgcmV0dXJuIGZpcnN0LmZpbHRlcihpdGVtID0+ICFzZWNvbmQuaW5jbHVkZXMoaXRlbSkpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIC8vIHN0YXRpYyBnZXREaWZmSXRlbXMoYXJyMSwgYXJyMikge1xyXG4gICAgLy8gICAgIGNvbnN0IGRpZmYxID0gVXRpbHMuZGlmZmVyZW5jZShhcnIxLCBhcnIyKTtcclxuICAgIC8vICAgICBjb25zdCBkaWZmMiA9IFV0aWxzLmRpZmZlcmVuY2UoYXJyMiwgYXJyMSk7XHJcblxyXG4gICAgLy8gICAgIHJldHVybiBkaWZmMS5jb25jYXQoZGlmZjIpO1xyXG4gICAgLy8gfVxyXG5cclxuICAgIHN0YXRpYyBnZXRXaGVuRW1wdHlUZXh0KGNvbDogYW55LCBsb2NhbGVJZCkge1xyXG5cclxuICAgICAgICBjb25zdCBFTVBUWV9JTlBVVF9URVhUID0ge1xyXG4gICAgICAgICAgICAnemgtQ0hTJzogJ+ivt+i+k+WFpScsXHJcbiAgICAgICAgICAgICd6aC1DSFQnOiAn6KuL6Ly45YWlJyxcclxuICAgICAgICAgICAgZW46ICdQbGVhc2UgaW5wdXQnXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgY29uc3QgRU1QVFlfU0VMRUNUX1RFWFQgPSB7XHJcbiAgICAgICAgICAgICd6aC1DSFMnOiAn6K+36YCJ5oupJyxcclxuICAgICAgICAgICAgJ3poLUNIVCc6ICfoq4vpgbjmk4cnLFxyXG4gICAgICAgICAgICBlbjogJ1BsZWFzZSBzZWxlY3QnXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGlmIChjb2wuZWRpdG9yKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoY29sLmVkaXRvci50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdkYXRlcGlja2VyJzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3NlbGVjdCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdsb29rdXAnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY29tYm9saXN0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NvbWJvLWxvb2t1cCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICBFTVBUWV9TRUxFQ1RfVEVYVFtsb2NhbGVJZF07XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBFTVBUWV9JTlBVVF9URVhUW2xvY2FsZUlkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8g5o6n5Yi26Z2i5p2/5YiXXHJcbiAgICAgICAgaWYgKGNvbC5maWVsZCA9PT0gJ19kYXRhZ3JpZC1zZXR0aW5nLWNvbnRyb2xfJykge1xyXG4gICAgICAgICAgICByZXR1cm4gJyc7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gRU1QVFlfSU5QVVRfVEVYVFtsb2NhbGVJZF07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldFJvd0lkQnlUcih0cikge1xyXG4gICAgICAgIGlmICh0cikge1xyXG4gICAgICAgICAgICBsZXQgaWQgPSB0ci5nZXRBdHRyaWJ1dGUoJ2lkJyk7XHJcblxyXG4gICAgICAgICAgICBpZiAoaWQgPT0gbnVsbCB8fCBpZCA9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpZC5yZXBsYWNlKFRSX1BSRUZJWCwgJycpLnJlcGxhY2UoJ19maXhlZHJpZ2h0JywgJycpLnJlcGxhY2UoJ19maXhlZGxlZnQnLCAnJykucmVwbGFjZSgnX2dyb3Vwcm93JywgJycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0VHJEb21CeUlkKGRhdGFpZCwgcGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgIGlmIChwYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoYFtpZD1cIiR7ZGF0YWlkfVwiXWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufVxyXG5cclxuIl19