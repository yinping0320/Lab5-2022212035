/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Optional, Pipe } from '@angular/core';
import { DatagridFacadeService } from './../services/datagrid-facade.service';
export class FormatGroupRowPipe {
    /**
     * @param {?} dfs
     */
    constructor(dfs) {
        this.dfs = dfs;
    }
    /**
     * @param {?} row
     * @param {?} col
     * @param {?=} fn
     * @return {?}
     */
    transform(row, col, fn) {
        if (row) {
            /** @type {?} */
            let val = row['value'];
            if (!col && this.dfs) {
                col = this.dfs.getColumn(row.field);
            }
            if (col && col.formatter) {
                if (col.formatter.type === 'enum') {
                    /** @type {?} */
                    const enumOpts = col.formatter.options;
                    const { valueField, textField, data } = Object.assign({}, enumOpts);
                    /** @type {?} */
                    const enumItem = data.find((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item[valueField] === row['value']));
                    val = enumItem ? enumItem[textField] : '';
                }
            }
            return fn ? fn(row) : val;
        }
        return '';
    }
}
FormatGroupRowPipe.decorators = [
    { type: Pipe, args: [{ name: 'formatGroupRow' },] }
];
/** @nocollapse */
FormatGroupRowPipe.ctorParameters = () => [
    { type: DatagridFacadeService, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormatGroupRowPipe.prototype.dfs;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LWdyb3VwLXJvdy5waXBlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi91dGlscy9mb3JtYXQtZ3JvdXAtcm93LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFpQixNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUc5RSxNQUFNLE9BQU8sa0JBQWtCOzs7O0lBRTNCLFlBQWdDLEdBQTBCO1FBQTFCLFFBQUcsR0FBSCxHQUFHLENBQXVCO0lBQUcsQ0FBQzs7Ozs7OztJQUc5RCxTQUFTLENBQUMsR0FBUSxFQUFFLEdBQVEsRUFBRSxFQUFRO1FBQ2xDLElBQUksR0FBRyxFQUFFOztnQkFDRCxHQUFHLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQztZQUN0QixJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7Z0JBQ2xCLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDdkM7WUFFRCxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsU0FBUyxFQUFFO2dCQUN0QixJQUFJLEdBQUcsQ0FBQyxTQUFTLENBQUMsSUFBSSxLQUFLLE1BQU0sRUFBRTs7MEJBQ3pCLFFBQVEsR0FBdUQsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzBCQUNwRixFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLHFCQUFPLFFBQVEsQ0FBQzs7MEJBQy9DLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSTs7OztvQkFBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUM7b0JBQ3JFLEdBQUcsR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2lCQUM3QzthQUNKO1lBRUQsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDO1NBQzdCO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7WUExQkosSUFBSSxTQUFDLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFDOzs7O1lBRnJCLHFCQUFxQix1QkFLYixRQUFROzs7Ozs7O0lBQVQsaUNBQThDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT3B0aW9uYWwsIFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRGYWNhZGVTZXJ2aWNlIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy9kYXRhZ3JpZC1mYWNhZGUuc2VydmljZSc7XHJcblxyXG5AUGlwZSh7bmFtZTogJ2Zvcm1hdEdyb3VwUm93J30pXHJcbmV4cG9ydCBjbGFzcyBGb3JtYXRHcm91cFJvd1BpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBwcml2YXRlIGRmczogRGF0YWdyaWRGYWNhZGVTZXJ2aWNlKSB7fVxyXG5cclxuXHJcbiAgICB0cmFuc2Zvcm0ocm93OiBhbnksIGNvbDogYW55LCBmbj86IGFueSk6IGFueSB7XHJcbiAgICAgICAgaWYgKHJvdykge1xyXG4gICAgICAgICAgICBsZXQgdmFsID0gcm93Wyd2YWx1ZSddO1xyXG4gICAgICAgICAgICBpZiAoIWNvbCAmJiB0aGlzLmRmcykge1xyXG4gICAgICAgICAgICAgICAgY29sID0gdGhpcy5kZnMuZ2V0Q29sdW1uKHJvdy5maWVsZCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChjb2wgJiYgY29sLmZvcm1hdHRlcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbC5mb3JtYXR0ZXIudHlwZSA9PT0gJ2VudW0nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW51bU9wdHM6IHt2YWx1ZUZpZWxkOiBzdHJpbmcsIHRleHRGaWVsZDogc3RyaW5nLCBkYXRhOiBhbnl9ID0gY29sLmZvcm1hdHRlci5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgdmFsdWVGaWVsZCwgdGV4dEZpZWxkLCBkYXRhIH0gPSB7Li4uZW51bU9wdHN9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVudW1JdGVtID0gZGF0YS5maW5kKGl0ZW0gPT4gaXRlbVt2YWx1ZUZpZWxkXSA9PT0gcm93Wyd2YWx1ZSddKTtcclxuICAgICAgICAgICAgICAgICAgICB2YWwgPSBlbnVtSXRlbSA/IGVudW1JdGVtW3RleHRGaWVsZF0gOiAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZuID8gZm4ocm93KSA6IHZhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxufVxyXG4iXX0=