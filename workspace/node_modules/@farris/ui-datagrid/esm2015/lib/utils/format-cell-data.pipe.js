/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from './../datagrid.component';
import { LocaleService } from '@farris/ui-locale';
import { Pipe, Injector, Optional, ElementRef, LOCALE_ID } from '@angular/core';
import { Utils } from './utils';
import { ColumnFormatService } from '@farris/ui-common/column';
export class FormatCellDataPipe {
    /**
     * @param {?} cfs
     * @param {?=} injector
     */
    constructor(cfs, injector) {
        this.cfs = cfs;
        this.injector = injector;
        this.localeId = 'ZH-CHS';
        this.localeId = this.injector.get(LOCALE_ID);
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @param {?=} groupFooter
     * @param {?=} footer
     * @return {?}
     */
    transform(col, rowData, groupFooter = false, footer = false) {
        if (rowData && col && col.field) {
            /** @type {?} */
            const value = Utils.getValue(col.field, rowData);
            if (col.editor && col.editor.options && col.editor.options.isPassword && !col.formatter) {
                return value ? '******' : '';
            }
            /** @type {?} */
            let formatterFn = col.formatter;
            if (groupFooter) {
                formatterFn = col.groupFooter ? col.groupFooter.formatter : undefined;
            }
            else if (footer) {
                formatterFn = col.footer ? col.footer.formatter : undefined;
                if (typeof formatterFn === 'object') {
                    if (!formatterFn.options) {
                        /** @type {?} */
                        const opts = { type: formatterFn.type, options: formatterFn };
                        formatterFn = opts;
                    }
                }
            }
            if (!formatterFn) {
                /** @type {?} */
                let resoultStr = value;
                if (col.isMultilingualField) {
                    resoultStr = this.getMultilingualValue(value);
                }
                else {
                    if (value !== null && value !== undefined && value !== '0' && typeof value === 'string') {
                        this.getDatagridInstance();
                        if (value.indexOf('\n') > -1) {
                            // return value.replace(/\n/g, '<br>');
                            if (this.dataGrid && this.dataGrid.nowrap) {
                                resoultStr = value.replace(/\n/g, ' ');
                            }
                        }
                        this.setFooterCellTitle(resoultStr, footer, col.field);
                    }
                    // value.replace(/ /g, '&ensp;');
                }
                return this.setPlaceHolderWhenEnableEditCellStyle(col, resoultStr, rowData, groupFooter || footer);
            }
            else {
                if (formatterFn) {
                    if (formatterFn.type === 'number') {
                        if (!formatterFn.options || !Object.keys(formatterFn.options).length) {
                            formatterFn.options = {
                                thousand: ',',
                                precision: 2
                            };
                        }
                    }
                    if (formatterFn.type === 'datetime') {
                        if (formatterFn.options) {
                            if (col.editor && col.editor.options) {
                                const { dateRange, dateRangeDatesDelimiter } = col.editor.options;
                                formatterFn.options = Object.assign({ dateRange, dateRangeDatesDelimiter }, formatterFn.options);
                            }
                        }
                    }
                    if (formatterFn.type === 'timeago') {
                        if (formatterFn.options) {
                            formatterFn.options.locale = formatterFn.options.locale || this.localeId;
                        }
                        else {
                            formatterFn.options = {
                                locale: this.localeId
                            };
                        }
                    }
                }
                this.getDatagridInstance();
                /** @type {?} */
                let r = '';
                if (this.dataGrid) {
                    r = this.cfs.format(value, rowData, formatterFn, { utils: this.dataGrid.commonUtils, locale: this.localeId });
                    this.setFooterCellTitle(r, footer, col.field);
                    return this.setPlaceHolderWhenEnableEditCellStyle(col, r, rowData, groupFooter || footer);
                }
                else {
                    r = this.cfs.format(value, rowData, formatterFn, { locale: this.localeId });
                    this.setFooterCellTitle(r, footer, col.field);
                    return r;
                }
            }
        }
        return '';
    }
    /**
     * @private
     * @param {?} text
     * @param {?} isFooter
     * @param {?} field
     * @return {?}
     */
    setFooterCellTitle(text, isFooter, field) {
        if (text && isFooter && this.elRef) {
            /** @type {?} */
            const span = this.elRef.nativeElement.querySelector(`td[field="${field}"] .f-datagrid-footer-cell`);
            if (span) {
                span.title = text;
            }
        }
    }
    // 获取多语数据
    /**
     * @private
     * @param {?} valObj
     * @return {?}
     */
    getMultilingualValue(valObj) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            if (this.injector) {
                this.localeService = this.injector.get(LocaleService);
            }
            if (this.localeService) {
                /** @type {?} */
                const localeId = this.localeService.localeId;
                return Utils.getMultilingualValue(valObj, localeId);
            }
            else {
                return valObj['zh-CHS'];
            }
        }
        else {
            return '';
        }
    }
    // 启用标识可编辑单元格时，内容为空时设置提示语
    /**
     * @private
     * @param {?} col
     * @param {?} val
     * @param {?} rowData
     * @param {?} isFooter
     * @return {?}
     */
    setPlaceHolderWhenEnableEditCellStyle(col, val, rowData, isFooter) {
        this.getDatagridInstance();
        if (this.dataGrid) {
            /*
            if (!this.dataGrid.editable || (val !== null && val !== undefined && val !== '') || isFooter || this.cellIsReadOnly(col, rowData)) {
                if (this.elRef) {
                    const span = this.elRef.nativeElement.querySelector('.cell-text-box');
                    if (span && span.className.indexOf('cell-empty') > -1) {
                        span.className = span.className.replace('cell-empty', ' ');
                    }
                }

                return val;
            }
*/
            if (this.dataGrid.enableEditCellStyle) {
                if (!this.dataGrid.editable || (val !== null && val !== undefined && val !== '') || isFooter || this.cellIsReadOnly(col, rowData)) {
                    if (this.elRef) {
                        /** @type {?} */
                        const span = this.elRef.nativeElement.querySelector('.cell-text-box');
                        if (span && span.className.indexOf('cell-empty') > -1) {
                            span.className = span.className.replace('cell-empty', ' ');
                        }
                    }
                    return val;
                }
                if (this.elRef) {
                    /** @type {?} */
                    const span = this.elRef.nativeElement.querySelector('.cell-text-box');
                    if (span && span.className.indexOf('cell-empty') === -1) {
                        span.className = span.className + ' cell-empty';
                    }
                }
                return Utils.getWhenEmptyText(col, this.localeId);
            }
            return val;
        }
        return val;
    }
    /**
     * @private
     * @return {?}
     */
    getDatagridInstance() {
        if (!this.dataGrid) {
            this.dataGrid = this.injector.get(DatagridComponent, null);
        }
        if (!this.elRef) {
            this.elRef = this.injector.get(ElementRef, null);
        }
    }
    /**
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    cellIsReadOnly(col, rowData) {
        return this.dataGrid.cellIsReadOnly(col, rowData);
    }
}
FormatCellDataPipe.decorators = [
    { type: Pipe, args: [{ name: 'formatCellData', pure: false },] }
];
/** @nocollapse */
FormatCellDataPipe.ctorParameters = () => [
    { type: ColumnFormatService },
    { type: Injector, decorators: [{ type: Optional }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.localeService;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.dataGrid;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.elRef;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.localeId;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.cfs;
    /**
     * @type {?}
     * @private
     */
    FormatCellDataPipe.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,