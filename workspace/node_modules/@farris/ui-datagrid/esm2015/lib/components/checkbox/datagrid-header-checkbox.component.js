/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { takeUntil } from 'rxjs/operators';
import { DatagridComponent } from './../../datagrid.component';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-18 10:30:21
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, ElementRef, Injector } from '@angular/core';
import { DatagridFacadeService } from './../../services/datagrid-facade.service';
import { Subject } from 'rxjs';
export class DatagridHeaderCheckboxComponent {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
        this.indeterminate = false;
        this.destroy$ = new Subject();
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dg = this.injector.get(DatagridComponent);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.indeterminate) {
            this.chk.nativeElement.indeterminate = true;
        }
        this.dg.dgs.changeCheckAllStatus.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} status
         * @return {?}
         */
        (status) => {
            if (status === 2) {
                this.chk.nativeElement.indeterminate = true;
            }
            else {
                this.chk.nativeElement.indeterminate = false;
                this.updateStatus(!!status);
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    /**
     * @param {?} checked
     * @return {?}
     */
    updateStatus(checked) {
        this.checked = checked;
        this.chk.nativeElement.checked = checked;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    handleClick(event) {
        if (!this.dg.data || !this.dg.data.length) {
            return;
        }
        if (!this.disabled) {
            this.checked = !this.checked;
            this.indeterminate = false;
            this.chk.nativeElement.indeterminate = false;
            if (this.checked) {
                this.dfs.checkAll();
                this.chk.nativeElement.checked = true;
                // this.dg.checkAll.emit();
            }
            else {
                this.dfs.clearCheckeds(!this.dg.enableMorePageSelect);
                if (this.dg.selectedRow && this.dg.checkOnSelect && this.dg.selectOnCheck) {
                    this.dg.unSelectRow(this.dg.selectedRow.id);
                }
                this.chk.nativeElement.checked = false;
                // this.dg.unCheckAll.emit();
            }
        }
        event.stopPropagation();
    }
}
DatagridHeaderCheckboxComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-header-checkbox',
                template: ` <div class="custom-control custom-checkbox f-checkradio-single">
        <input type="checkbox" #chk class="custom-control-input" [disabled]="disabled" [checked]="checked">
        <label class="custom-control-label" (click)="handleClick($event)"></label>
    </div>`,
                styles: [`
        :host {
            vertical-align: middle;
        }
        :host .custom-checkbox {
            opacity: 1;
            float: none;
            top: 4px;
        }
        `]
            }] }
];
/** @nocollapse */
DatagridHeaderCheckboxComponent.ctorParameters = () => [
    { type: Injector }
];
DatagridHeaderCheckboxComponent.propDecorators = {
    checked: [{ type: Input }],
    disabled: [{ type: Input }],
    indeterminate: [{ type: Input }],
    chk: [{ type: ViewChild, args: ['chk',] }]
};
if (false) {
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.checked;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.disabled;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.indeterminate;
    /** @type {?} */
    DatagridHeaderCheckboxComponent.prototype.chk;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DatagridHeaderCheckboxComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,