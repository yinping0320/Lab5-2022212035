/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DatagridComponent } from '../../datagrid.component';
import { Directive, Injector, Input, ElementRef } from '@angular/core';
import { DatagridBodyComponent } from '../body';
export class AutoHeightDirective {
    /**
     * @param {?} dg
     * @param {?} inject
     * @param {?} el
     */
    constructor(dg, inject, el) {
        this.dg = dg;
        this.inject = inject;
        this.el = el;
        this.autoHeight = false;
        this._timer = null;
        this._dgb = null;
        this._dgb = this.inject.get(DatagridBodyComponent);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.updateDatagridHeight(this.wheelHeight);
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this._updateDatagridHeight(this.wheelHeight);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.wheelHeight) {
            this._updateDatagridHeight(this.wheelHeight);
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        // this.checkScrollbarPosition();
    }
    /**
     * @private
     * @param {?} wheelHeight
     * @return {?}
     */
    updateDatagridHeight(wheelHeight) {
        if (this.el && this.el.nativeElement && this.el.nativeElement.parentElement) {
            if (this.autoHeight) {
                if (!wheelHeight) {
                    wheelHeight = 240;
                    if (!this.dg.ds || !this.dg.ds.rows || !this.dg.ds.rows.length) {
                        wheelHeight = (!this.dg.emptyDataHeight || this.dg.emptyDataHeight < 0) ? 240 : this.dg.emptyDataHeight;
                    }
                }
                /** @type {?} */
                let h = parseInt(wheelHeight, 10);
                if (this.dg.showHeader) {
                    if (!this.dg.realHeaderHeight) {
                        h += this.dg.setHeaderHeight();
                    }
                    else {
                        h += this.dg.realHeaderHeight;
                    }
                }
                if (this.dg.showFooter) {
                    h += this.dg.footerHeight;
                }
                if (this.dg.pagination) {
                    /** @type {?} */
                    const ph = this.dg.pagerHeight || 40;
                    h += ph;
                }
                if (this.dg.showFilterBar) {
                    h += this.dg.filterBarHeight;
                }
                if (this.dg.showRowGroupPanel) {
                    h += this.dg.rowGroupPanelHeight;
                }
                /** @type {?} */
                let wh = `${wheelHeight}px`;
                if (this.dg.maxHeight && h > this.dg.maxHeight) {
                    wh = this._dgb.getViewPortHeight();
                }
                this.el.nativeElement.parentElement.style.height = wh;
                this.el.nativeElement.parentElement.parentElement.style.height = wh;
                if (this.dg.dgContainer) {
                    if (this.dg.maxHeight && h > this.dg.maxHeight) {
                        h = this.dg.maxHeight;
                    }
                    /** @type {?} */
                    const dgHeight = `${h}px`;
                    // 更新grid 最外层的高度
                    this.dg.dgContainer.nativeElement.style.height = dgHeight;
                    // farris-datagrid 增加高度
                    this.dg.el.nativeElement.style.height = dgHeight;
                    this.dg.height = h;
                    if (this.dg.maxHeight) {
                        if (this.dg.maxHeight && this.dg.maxHeight < 55) {
                            this.dg.maxHeight = 60;
                        }
                        /** @type {?} */
                        const gridContainerEl = this.dg.el.nativeElement.parentElement;
                        gridContainerEl.style.height = 'unset';
                        gridContainerEl.style.maxHeight = this.dg.maxHeight + 'px';
                        gridContainerEl.style.minHeight = h + 'px';
                    }
                }
                else {
                    this.dg.el.nativeElement.querySelector('.f-datagrid').style.height = `${h}px`;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} wheelHeight
     * @return {?}
     */
    _updateDatagridHeight(wheelHeight) {
        if (this.dg.autoHeight) {
            if (this.dg.el.nativeElement.parentElement.className.indexOf('f-utils-fill') > -1) {
                this.dg.el.nativeElement.parentElement.className = this.dg.el.nativeElement.parentElement.className.replace('f-utils-fill', '');
            }
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.updateDatagridHeight(wheelHeight);
            }), 50);
        }
    }
}
AutoHeightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[auto-height]',
            },] }
];
/** @nocollapse */
AutoHeightDirective.ctorParameters = () => [
    { type: DatagridComponent },
    { type: Injector },
    { type: ElementRef }
];
AutoHeightDirective.propDecorators = {
    autoHeight: [{ type: Input, args: ['auto-height',] }],
    wheelHeight: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AutoHeightDirective.prototype.autoHeight;
    /**
     * 数据列表总高度
     * @type {?}
     */
    AutoHeightDirective.prototype.wheelHeight;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype._timer;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype._dgb;
    /** @type {?} */
    AutoHeightDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype.inject;
    /**
     * @type {?}
     * @private
     */
    AutoHeightDirective.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,