/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
export class FooterCellStylerDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     * @param {?} dg
     */
    constructor(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
        this.isGroupFooter = false;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isGroupFooter) {
            this.setGroupFooterCellStyle(this.column);
        }
        else {
            this.buildCustomCellStyle(this.column, this.rowData);
        }
    }
    /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    buildCustomCellStyle(column, rowData) {
        /** @type {?} */
        const tr = this.el.nativeElement.parentNode;
        if (tr && !tr.id) {
            /** @type {?} */
            const rowdataid = this.dg.dfs.primaryId(rowData);
            /** @type {?} */
            let fixed = '';
            if (tr.closest('.f-datagrid-body-fixed-left')) {
                fixed = '-left';
            }
            else if (tr.closest('.f-datagrid-body-fixed-right')) {
                fixed = '-right';
            }
            /** @type {?} */
            const trID = 'footer-row' + fixed + '_' + (rowdataid || this.rowIndex);
            tr.id = trID;
        }
        if (!this.el.nativeElement.id) {
            this.el.nativeElement.id = 'footer-td_' + this.rowIndex + '_' + this.column.field.replace(/\./g, '_');
        }
        if (column && column.footer && column.footer.styler) {
            /** @type {?} */
            const _rd = rowData;
            /** @type {?} */
            const styler = column.footer.styler;
            /** @type {?} */
            const cs = styler(_rd[column.field], _rd);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, this.el.nativeElement);
            }
            else {
                this.dg.dgs.removeCssRule('#' + this.el.nativeElement.id);
            }
        }
    }
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    setGroupFooterCellStyle(col) {
        // 分组合计行自定义样式 20210909
        if (col.groupFooter && col.groupFooter.styler) {
            /** @type {?} */
            const val = this.dg.commonUtils.getValue(col.field, this.rowData);
            /** @type {?} */
            const _customStyles = this.dg.dgs.getCustomStyle(col.groupFooter.styler, [val, this.rowData]);
            if (_customStyles) {
                this.dg.renderCustomCls(_customStyles.cls, this.el.nativeElement);
                if (_customStyles.style) {
                    Object.keys(_customStyles.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this.el.nativeElement.style[n] = _customStyles.style[n];
                    }));
                }
            }
        }
    }
}
FooterCellStylerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[footer-cell-styler]',
            },] }
];
/** @nocollapse */
FooterCellStylerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector },
    { type: DatagridComponent }
];
FooterCellStylerDirective.propDecorators = {
    column: [{ type: Input }],
    rowData: [{ type: Input }],
    rowIndex: [{ type: Input }],
    isGroupFooter: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FooterCellStylerDirective.prototype.column;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowData;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowIndex;
    /** @type {?} */
    FooterCellStylerDirective.prototype.isGroupFooter;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.inject;
    /** @type {?} */
    FooterCellStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9mb290ZXIvZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBSzdELE1BQU0sT0FBTyx5QkFBeUI7Ozs7Ozs7SUFLbEMsWUFBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0IsRUFBUyxFQUFxQjtRQUFqRyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtRQUQ1RyxrQkFBYSxHQUFHLEtBQUssQ0FBQztJQUMwRixDQUFDOzs7O0lBRzFILFFBQVE7SUFDUixDQUFDOzs7O0lBRUQsZUFBZTtRQUNYLElBQUksSUFBSSxDQUFDLGFBQWEsRUFBRTtZQUNwQixJQUFJLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQzdDO2FBQU07WUFDSCxJQUFJLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEQ7SUFDTCxDQUFDOzs7Ozs7O0lBRU8sb0JBQW9CLENBQUMsTUFBTSxFQUFFLE9BQU87O2NBRWxDLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxVQUFVO1FBQzNDLElBQUksRUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTs7a0JBQ1IsU0FBUyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUM7O2dCQUM1QyxLQUFLLEdBQUcsRUFBRTtZQUNkLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyw2QkFBNkIsQ0FBQyxFQUFFO2dCQUMzQyxLQUFLLEdBQUcsT0FBTyxDQUFDO2FBQ25CO2lCQUFNLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQyw4QkFBOEIsQ0FBQyxFQUFFO2dCQUNuRCxLQUFLLEdBQUcsUUFBUSxDQUFDO2FBQ3BCOztrQkFFSyxJQUFJLEdBQUcsWUFBWSxHQUFFLEtBQUssR0FBRyxHQUFHLEdBQUcsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNyRSxFQUFFLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQztTQUNoQjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFLEVBQUU7WUFDM0IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLEdBQUcsR0FBSSxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFFO1NBQzNHO1FBRUQsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRTs7a0JBQzNDLEdBQUcsR0FBRyxPQUFPOztrQkFDYixNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNOztrQkFDN0IsRUFBRSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUN6QyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDOUIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQzthQUN4RDtpQkFBTTtnQkFDSCxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxhQUFhLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUUsQ0FBQyxDQUFDO2FBQzdEO1NBQ0o7SUFDTCxDQUFDOzs7Ozs7SUFHTyx1QkFBdUIsQ0FBQyxHQUFRO1FBQ3BDLHNCQUFzQjtRQUN0QixJQUFJLEdBQUcsQ0FBQyxXQUFXLElBQUksR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUU7O2tCQUNyQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQzs7a0JBQzNELGFBQWEsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzdGLElBQUksYUFBYSxFQUFFO2dCQUNmLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLGFBQWEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDbEUsSUFBSSxhQUFhLENBQUMsS0FBSyxFQUFFO29CQUNyQixNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPOzs7O29CQUFDLENBQUMsQ0FBQyxFQUFFO3dCQUN6QyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUQsQ0FBQyxFQUFDLENBQUM7aUJBQ047YUFDSjtTQUNKO0lBQ0wsQ0FBQzs7O1lBckVKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsc0JBQXNCO2FBQ25DOzs7O1lBTG1CLFVBQVU7WUFBRSxTQUFTO1lBQUUsUUFBUTtZQUMxQyxpQkFBaUI7OztxQkFNckIsS0FBSztzQkFDTCxLQUFLO3VCQUNMLEtBQUs7NEJBQ0wsS0FBSzs7OztJQUhOLDJDQUFxQjs7SUFDckIsNENBQXNCOztJQUN0Qiw2Q0FBdUI7O0lBQ3ZCLGtEQUErQjs7Ozs7SUFDbkIsdUNBQXNCOzs7OztJQUFFLDJDQUF5Qjs7Ozs7SUFBRSwyQ0FBd0I7O0lBQUUsdUNBQTRCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEluamVjdG9yLCBJbnB1dCwgT25Jbml0LCBBZnRlclZpZXdJbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZm9vdGVyLWNlbGwtc3R5bGVyXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBGb290ZXJDZWxsU3R5bGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBBZnRlclZpZXdJbml0IHtcclxuICAgIEBJbnB1dCgpIGNvbHVtbjogYW55O1xyXG4gICAgQElucHV0KCkgcm93RGF0YTogYW55O1xyXG4gICAgQElucHV0KCkgcm93SW5kZXg6IGFueTtcclxuICAgIEBJbnB1dCgpIGlzR3JvdXBGb290ZXIgPSBmYWxzZTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaW5qZWN0OiBJbmplY3RvciwgcHVibGljIGRnOiBEYXRhZ3JpZENvbXBvbmVudCkgeyB9XHJcblxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICBpZiAodGhpcy5pc0dyb3VwRm9vdGVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0R3JvdXBGb290ZXJDZWxsU3R5bGUodGhpcy5jb2x1bW4pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuYnVpbGRDdXN0b21DZWxsU3R5bGUodGhpcy5jb2x1bW4sIHRoaXMucm93RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRDdXN0b21DZWxsU3R5bGUoY29sdW1uLCByb3dEYXRhKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHRyID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgaWYgKHRyICYmICF0ci5pZCkge1xyXG4gICAgICAgICAgICBjb25zdCByb3dkYXRhaWQgPSB0aGlzLmRnLmRmcy5wcmltYXJ5SWQocm93RGF0YSk7XHJcbiAgICAgICAgICAgIGxldCBmaXhlZCA9ICcnO1xyXG4gICAgICAgICAgICBpZiAodHIuY2xvc2VzdCgnLmYtZGF0YWdyaWQtYm9keS1maXhlZC1sZWZ0JykpIHtcclxuICAgICAgICAgICAgICAgIGZpeGVkID0gJy1sZWZ0JztcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0ci5jbG9zZXN0KCcuZi1kYXRhZ3JpZC1ib2R5LWZpeGVkLXJpZ2h0JykpIHtcclxuICAgICAgICAgICAgICAgIGZpeGVkID0gJy1yaWdodCc7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRySUQgPSAnZm9vdGVyLXJvdycrIGZpeGVkICsgJ18nICsgKHJvd2RhdGFpZCB8fCB0aGlzLnJvd0luZGV4KTtcclxuICAgICAgICAgICAgdHIuaWQgPSB0cklEO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkID0gJ2Zvb3Rlci10ZF8nICsgdGhpcy5yb3dJbmRleCArICdfJyAgKyB0aGlzLmNvbHVtbi5maWVsZC5yZXBsYWNlKC9cXC4vZywgJ18nKSA7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY29sdW1uICYmIGNvbHVtbi5mb290ZXIgJiYgY29sdW1uLmZvb3Rlci5zdHlsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgX3JkID0gcm93RGF0YTtcclxuICAgICAgICAgICAgY29uc3Qgc3R5bGVyID0gY29sdW1uLmZvb3Rlci5zdHlsZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzID0gc3R5bGVyKF9yZFtjb2x1bW4uZmllbGRdLCBfcmQpO1xyXG4gICAgICAgICAgICBpZiAoY3MgJiYgT2JqZWN0LmtleXMoY3MpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5yZW5kZXJDdXN0b21TdHlsZShjcywgdGhpcy5lbC5uYXRpdmVFbGVtZW50KTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcuZGdzLnJlbW92ZUNzc1J1bGUoJyMnICsgdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBzZXRHcm91cEZvb3RlckNlbGxTdHlsZShjb2w6IGFueSkge1xyXG4gICAgICAgIC8vIOWIhue7hOWQiOiuoeihjOiHquWumuS5ieagt+W8jyAyMDIxMDkwOVxyXG4gICAgICAgIGlmIChjb2wuZ3JvdXBGb290ZXIgJiYgY29sLmdyb3VwRm9vdGVyLnN0eWxlcikge1xyXG4gICAgICAgICAgICBjb25zdCB2YWwgPSB0aGlzLmRnLmNvbW1vblV0aWxzLmdldFZhbHVlKGNvbC5maWVsZCwgdGhpcy5yb3dEYXRhKTtcclxuICAgICAgICAgICAgY29uc3QgX2N1c3RvbVN0eWxlcyA9IHRoaXMuZGcuZGdzLmdldEN1c3RvbVN0eWxlKGNvbC5ncm91cEZvb3Rlci5zdHlsZXIsIFt2YWwsIHRoaXMucm93RGF0YV0pO1xyXG4gICAgICAgICAgICBpZiAoX2N1c3RvbVN0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5yZW5kZXJDdXN0b21DbHMoX2N1c3RvbVN0eWxlcy5jbHMsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2N1c3RvbVN0eWxlcy5zdHlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKF9jdXN0b21TdHlsZXMuc3R5bGUpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZVtuXSA9IF9jdXN0b21TdHlsZXMuc3R5bGVbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19