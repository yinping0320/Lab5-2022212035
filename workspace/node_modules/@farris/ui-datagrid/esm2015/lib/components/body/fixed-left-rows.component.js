/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { takeUntil } from 'rxjs/operators';
import { Component, ChangeDetectorRef, ElementRef, Injector, NgZone, Input, Output, EventEmitter, Renderer2 } from '@angular/core';
import { Subject } from 'rxjs';
import { DatagridService } from './../../services/datagrid.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { ROW_INDEX_FIELD, IS_GROUP_ROW_FIELD, GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD, GROUP_LEVEL_FIELD } from '../../services/state';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
export class FixedLeftRowsComponent {
    /**
     * @param {?} cd
     * @param {?} dg
     * @param {?} dgb
     * @param {?} dfs
     * @param {?} el
     * @param {?} injector
     * @param {?} ngZone
     */
    constructor(cd, dg, dgb, dfs, el, injector, ngZone) {
        this.cd = cd;
        this.dg = dg;
        this.dgb = dgb;
        this.dfs = dfs;
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.columns = [];
        this.toggle = new EventEmitter();
        this.checkedRows = [];
        this.selectedRows = [];
        this.data = [];
        /**
         * 启用分组时，数据源中自动设置行索引字段
         */
        this.groupRowIndex = ROW_INDEX_FIELD;
        this.isGroupRow = IS_GROUP_ROW_FIELD;
        this.groupRow = GROUP_ROW_FIELD;
        this.isGroupFooter = IS_GROUP_FOOTER_ROW_FIELD;
        this.visible = GROUP_VISIBLE_FIELD;
        this.groupLevelField = GROUP_LEVEL_FIELD;
        this.filterConditions = '';
        this.subscriptions = [];
        this.dgs = null;
        this.destroy$ = new Subject();
        this.dgs = this.injector.get(DatagridService);
        this.render2 = this.injector.get(Renderer2);
    }
    /**
     * @private
     * @return {?}
     */
    listenSubject() {
        // const _selectrow = this.dfs.selectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_selectrow);
        // const _selectrow = this.dfs.selectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_selectrow);
        // const _unselectrow = this.dfs.unSelectRow$.subscribe(() => {
        //     this.detectChanges();
        // });
        // this.subscriptions.push(_unselectrow);
        /** @type {?} */
        const _setselectrow = this.dgs.setSelecedRow.pipe(takeUntil(this.destroy$))
            .subscribe((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            this.detectChanges();
        }));
        this.subscriptions.push(_setselectrow);
        this.dfs.checkRow$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.checkedRows = this.dfs.getCheckeds();
            this.detectChanges();
        }));
        this.dfs.clearCheckeds$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.checkedRows = this.dfs.getCheckeds();
            this.detectChanges();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.listenSubject();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.unsubscribe()));
            this.subscriptions = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    detectChanges() {
        if (!this.cd['destroyed']) {
            // this.cd.markForCheck();
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @param {?} open
     * @param {?=} $event
     * @return {?}
     */
    toggleGroupRow(row, index, open, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        row.expanded = open;
        this.dg.dfs.setGroupRowsVisible(row, open);
    }
    /**
     * @param {?} groupId
     * @return {?}
     */
    getGroupSummaryData(groupId) {
        /** @type {?} */
        const _data = this.dg.getRows();
        if (_data && _data.length) {
            /** @type {?} */
            const row = this.dg.getRows().find((/**
             * @param {?} n
             * @return {?}
             */
            n => n['__group_parent_id__'] === groupId && n['__group_footer__']));
            if (row) {
                return row.data;
            }
        }
        return null;
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getGroupColumn(field) {
        return this.dg.flatColumns.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === field));
    }
}
FixedLeftRowsComponent.decorators = [
    { type: Component, args: [{
                selector: 'fixed-left-rows',
                template: "\r\n<ng-template #groupActionCell>\r\n    <td *ngIf=\"dg.showLineNumber || dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-group-action\"></td>\r\n</ng-template>\r\n\r\n<ng-template #grouprowControl let-ctx>\r\n    <div class=\"d-flex flex-row\" style=\"align-items: center; white-space: nowrap;\">\r\n        <span class=\"f-icon f-datagrid-group-expanded ml-1 mr-1\" *ngIf=\"!ctx.row.expanded\" (click)=\"toggleGroupRow(ctx.row, ctx.index, true, $event)\"></span>\r\n        <span class=\"f-icon f-datagrid-group-collapsed ml-1 mr-1\" *ngIf=\"ctx.row.expanded\" (click)=\"toggleGroupRow(ctx.row, ctx.index, false, $event)\"></span>\r\n        <span class=\"f-utils-fill group-row-text\" *ngIf=\"dg.groupFormatter\" [innerHTML]=\"ctx.row | formatGroupRow: '': dg.groupFormatter| safe: 'html' \"></span>\r\n        <span class=\"f-utils-fill  group-row-text\" *ngIf=\"!dg.groupFormatter\"> {{ ctx.row | formatGroupRow: getGroupColumn(ctx.row.field)  }} </span>\r\n    </div>\r\n</ng-template>\r\n\r\n\r\n<table class=\"f-datagrid-rows\" style=\"width: 100%\" cellpadding=\"0\" cellspacing=\"0\" row-hover row-dblclick>\r\n    <colgroup>\r\n        <col [style.width.px]=\"dg.checkboxColumnWidth || 36\" *ngIf=\"dg.showCheckbox\" />\r\n        <col [style.width.px]=\"dg.lineNumberWidth\" *ngIf=\"dg.showLineNumber\" />\r\n        <col *ngFor=\"let col of columns\" [style.width.px]=\"col.width\" />\r\n    </colgroup>\r\n\r\n\r\n    <tbody *ngIf=\"dg.groupRows && dg.groupField\">\r\n        <ng-container *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\">\r\n            <tr *ngIf=\"row[isGroupRow]\" [style.display]=\"row[visible] ? '': 'none'\" [group-row]=\"row\" \r\n            [attr.id]=\"row | rowDataId: false: true \" class=\"f-datagrid-body-row fixed-left-row f-datagrid-group-row\" [attr.index]=\"dgb.startRowIndex + i\">\r\n\r\n                <!-- <ng-container *ngIf=\"dg.showLineNumber && dg.showCheckbox; else groupActionCell\">\r\n                    <td class=\"f-datagrid-cell f-datagrid-cell-checkbox\"></td>\r\n                    <td class=\"f-datagrid-cell f-datagrid-cell-rownumber\"></td>\r\n                    </ng-container>\r\n                    <td [cell-editable]=\"row\" [column]=\"col\" [attr.field]=\"col.field\" class=\"f-datagrid-cell\" [attr.align]=\"col.align\" *ngFor=\"let col of columns; let ci = index;\">\r\n                        <grid-body-cell [width]=\"col.width\" [height]=\"dg.rowHeight\" [column]=\"col\" [rowData]=\"row\" [rowIndex]=\"dgb.startRowIndex + i\"></grid-body-cell>\r\n                    </td> \r\n                -->\r\n                <td class=\"f-datagrid-cell f-datagrid-cell-checkbox\" *ngIf=\"dg.showCheckbox\"></td>\r\n                <td class=\"f-datagrid-cell f-datagrid-cell-rownumber\" *ngIf=\"dg.showLineNumber\"></td>\r\n\r\n                <td *ngIf=\"!(dg.groupSummaryPosition === 'inGroupRow')\" class=\"f-datagrid-cell\" [attr.colspan]=\"columns.length\" [style.paddingLeft.px]=\"row[groupLevelField] * 15\">\r\n\r\n                    <ng-container [ngTemplateOutlet]=\"grouprowControl\" [ngTemplateOutletContext]=\"{$implicit: { row: row, index: i }}\"></ng-container>\r\n                    \r\n                </td>\r\n\r\n                <ng-container *ngIf=\"dg.groupSummaryPosition === 'inGroupRow'\">\r\n\r\n                    <ng-container *ngFor=\"let col of columns; let ci = index;\">\r\n                        <td *ngIf=\"ci === 0\" class=\"f-datagrid-cell\" [style.paddingLeft.px]=\"row[groupLevelField] * 15\" [attr.colspan]=\"dg.groupCellColSpan\">\r\n\r\n                            <ng-container [ngTemplateOutlet]=\"grouprowControl\" [ngTemplateOutletContext]=\"{$implicit: { row: row, index: i }}\"></ng-container>\r\n\r\n                        </td>\r\n                             \r\n                        <td class=\"f-datagrid-cell\"  \r\n                            *ngIf=\"ci > 0 && ci >= dg.groupCellColSpan\"\r\n                            [attr.field]=\"col.field\" \r\n                            [attr.align]=\" col.groupFooter?.align || col.align\">\r\n                            <div class=\"f-datagrid-cell-content\" [innerHTML]=\"col | formatCellData: getGroupSummaryData(row.id) : true: false | safe: 'html'\"></div>\r\n                        </td>\r\n                    </ng-container>\r\n                </ng-container>\r\n            </tr>\r\n\r\n            <ng-container *ngIf=\"!row[isGroupRow]\">\r\n\r\n                <ng-container *ngIf=\"row[isGroupFooter] && dg.groupSummaryPosition === 'groupFooterRow'\">\r\n                    <tr class=\"f-datagrid-body-row fixed-left-row f-datagrid-group-footer\" [group-footer-row-styler]=\"row\"\r\n                        [attr.index]=\"dgb.startRowIndex + i\" [style.display]=\"row[visible] ? '': 'none'\">\r\n                        <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\"></td>\r\n                        <td *ngIf=\"dg.showLineNumber\" class=\"f-datagrid-cell f-datagrid-cell-rownumber\"></td>\r\n                        \r\n                        <td class=\"f-datagrid-cell\"\r\n                            [attr.field]=\"col.field\" \r\n                            [attr.colspan]=\"col.groupFooter?.colspan || 1\"\r\n                            [attr.align]=\" col.groupFooter?.align || col.align\"\r\n                            [style.display]=\"col.groupFooter?.visible === false ? 'none': ''\"\r\n                            footer-cell-styler [column]=\"col\" [rowData]=\"row\" [isGroupFooter]=\"true\"\r\n                            *ngFor=\"let col of columns; let ci = index;\"\r\n                            [style.paddingLeft.px]=\"(ci === 0 ) ? row[groupLevelField] * 10 + 25 : 0\">\r\n                            <div class=\"f-datagrid-cell-content\" [innerHTML]=\"col | formatCellData: row.data : true: false | safe: 'html'\"></div>\r\n                        </td>\r\n                    </tr>\r\n                </ng-container>\r\n                <ng-container *ngIf=\"!row[isGroupFooter]\">\r\n                    <tr class=\"f-datagrid-body-row fixed-left-row\" [attr.index]=\"dgb.startRowIndex + i\"\r\n                        [class.f-datagrid-row-selected]=\"row | rowIsSelected: selectedRows\" [grid-row]=\"row\"\r\n                        [rowIndex]=\"dgb.startRowIndex + i\" [attr.id]=\"row | rowDataId: false: true \"\r\n                        [class.f-datagrid-disable-row]=\"row | disableRow: (dgb.startRowIndex + i) : dg.disableRow\"\r\n                        [style.display]=\"row[visible] ? '': 'none'\">\r\n\r\n                        <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center\">\r\n                            <div class=\"f-datagrid-cell-content checkbox-column\"  style=\"text-overflow: unset;\">\r\n                                <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\"\r\n                                    [rowData]=\"row\" [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                            </div>\r\n                        </td>\r\n\r\n                        <td *ngIf=\"dg.showLineNumber\" class=\"f-datagrid-cell f-datagrid-cell-rownumber\">\r\n                            <div class=\"f-datagrid-cell-content\" *ngIf=\"dg.virtualized\">\r\n                                {{ dg.pageSize * (dg.pageIndex-1) + row[groupRowIndex] + 1 }}\r\n                            </div>\r\n                            <div class=\"f-datagrid-cell-content\" *ngIf=\"!dg.virtualized\">\r\n                                {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + row[groupRowIndex] + 1 }}\r\n                            </div>\r\n                        </td>\r\n                        <td [cell-editable]=\"row\" [column]=\"col\" [attr.field]=\"col.field\" class=\"f-datagrid-cell\"\r\n                            [attr.align]=\"col.align\" *ngFor=\"let col of columns; let ci = index;\"\r\n                            [style.paddingLeft.px]=\"(ci === 0 ) ? row[groupLevelField] * 10 + 25 : 0\">\r\n                            <grid-body-cell [width]=\"col.width\" [height]=\"dg.rowHeight\" [column]=\"col\" [rowData]=\"row\"\r\n                                [rowIndex]=\"dgb.startRowIndex + i\"></grid-body-cell>\r\n                        </td>\r\n                    </tr>\r\n\r\n                </ng-container>\r\n\r\n            </ng-container>\r\n\r\n        </ng-container>\r\n\r\n    </tbody>\r\n\r\n\r\n    <tbody *ngIf=\"!dg.groupRows || !dg.groupField\">\r\n        <tr class=\"f-datagrid-body-row fixed-left-row\" [attr.index]=\"dgb.startRowIndex + i\"\r\n            [class.f-datagrid-row-selected]=\"row | rowIsSelected\" [grid-row]=\"row\" \r\n            [rowIndex]=\"dgb.startRowIndex + i\" [attr.id]=\"row | rowDataId: false: true \"\r\n            [class.f-datagrid-disable-row]=\"row | disableRow: (dgb.startRowIndex + i) : dg.disableRow\"\r\n            *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\"\r\n        >\r\n            <td *ngIf=\"dg.showCheckbox\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center\">\r\n                <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                    [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                </div>\r\n            </td>\r\n\r\n            <td *ngIf=\"dg.showLineNumber\" [style.width.px]=\"dg.lineNumberWidth\"  class=\"f-datagrid-cell f-datagrid-cell-rownumber\">\r\n                <div class=\"f-datagrid-cell-content\">\r\n                    {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + i + 1 }}\r\n                </div>\r\n            </td>\r\n\r\n            <td [cell-editable]=\"row\" [column]=\"col\" [attr.field]=\"col.field\" class=\"f-datagrid-cell\"\r\n                [attr.align]=\"col.align\" *ngFor=\"let col of columns; let ci = index;\">\r\n                <grid-body-cell [width]=\"col.width\" [height]=\"dg.rowHeight\" [column]=\"col\" [rowData]=\"row\"\r\n                    [rowIndex]=\"dgb.startRowIndex + i\"></grid-body-cell>\r\n            </td>\r\n        </tr>\r\n    </tbody>\r\n\r\n\r\n\r\n\r\n</table>"
            }] }
];
/** @nocollapse */
FixedLeftRowsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DatagridComponent },
    { type: DatagridBodyComponent },
    { type: DatagridFacadeService },
    { type: ElementRef },
    { type: Injector },
    { type: NgZone }
];
FixedLeftRowsComponent.propDecorators = {
    columns: [{ type: Input }],
    toggle: [{ type: Output }],
    checkedRows: [{ type: Input }],
    selectedRows: [{ type: Input }],
    data: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FixedLeftRowsComponent.prototype.columns;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.toggle;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.checkedRows;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.selectedRows;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.data;
    /**
     * 启用分组时，数据源中自动设置行索引字段
     * @type {?}
     */
    FixedLeftRowsComponent.prototype.groupRowIndex;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.isGroupRow;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.groupRow;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.isGroupFooter;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.visible;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.groupLevelField;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.filterConditions;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.subscriptions;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dgs;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.render2;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.cd;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dg;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dgb;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.dfs;
    /** @type {?} */
    FixedLeftRowsComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    FixedLeftRowsComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,