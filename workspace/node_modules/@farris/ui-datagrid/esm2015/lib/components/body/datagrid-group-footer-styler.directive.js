/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
export class GroupFooterRowStylerDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     * @param {?} dg
     */
    constructor(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.buildCustomGroupFooterRowStyle(this.rowData);
    }
    /**
     * @private
     * @param {?} rowData
     * @return {?}
     */
    buildCustomGroupFooterRowStyle(rowData) {
        if (this.dg.groupFooterStyler) {
            /** @type {?} */
            const cs = this.dg.dgs.getCustomStyle(this.dg.groupFooterStyler, [rowData]);
            if (cs) {
                this.dg.renderCustomCls(cs.cls, this.el.nativeElement);
                if (cs.style) {
                    Object.keys(cs.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this.el.nativeElement.style[n] = cs.style[n];
                    }));
                }
            }
        }
    }
}
GroupFooterRowStylerDirective.decorators = [
    { type: Directive, args: [{
                selector: '[group-footer-row-styler]',
            },] }
];
/** @nocollapse */
GroupFooterRowStylerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector },
    { type: DatagridComponent }
];
GroupFooterRowStylerDirective.propDecorators = {
    column: [{ type: Input }],
    rowData: [{ type: Input, args: ['group-footer-row-styler',] }],
    rowIndex: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.column;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.rowData;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.rowIndex;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.inject;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZ3JvdXAtZm9vdGVyLXN0eWxlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYm9keS9kYXRhZ3JpZC1ncm91cC1mb290ZXItc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBSzdELE1BQU0sT0FBTyw2QkFBNkI7Ozs7Ozs7SUFLdEMsWUFBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0IsRUFBUyxFQUFxQjtRQUFqRyxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsV0FBTSxHQUFOLE1BQU0sQ0FBVztRQUFVLFdBQU0sR0FBTixNQUFNLENBQVU7UUFBUyxPQUFFLEdBQUYsRUFBRSxDQUFtQjtJQUFJLENBQUM7Ozs7SUFHMUgsUUFBUTtJQUNSLENBQUM7Ozs7SUFFRCxlQUFlO1FBQ1gsSUFBSSxDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUN0RCxDQUFDOzs7Ozs7SUFFTyw4QkFBOEIsQ0FBQyxPQUFPO1FBRTFDLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTs7a0JBRXJCLEVBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNFLElBQUksRUFBRSxFQUFFO2dCQUNKLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxFQUFFLENBQUMsS0FBSyxFQUFFO29CQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87Ozs7b0JBQUMsQ0FBQyxDQUFDLEVBQUU7d0JBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUNqRCxDQUFDLEVBQUMsQ0FBQztpQkFDTjthQUNKO1NBQ0o7SUFDTCxDQUFDOzs7WUFoQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSwyQkFBMkI7YUFDeEM7Ozs7WUFMbUIsVUFBVTtZQUFFLFNBQVM7WUFBRSxRQUFRO1lBQzFDLGlCQUFpQjs7O3FCQU1yQixLQUFLO3NCQUNMLEtBQUssU0FBQyx5QkFBeUI7dUJBQy9CLEtBQUs7Ozs7SUFGTiwrQ0FBcUI7O0lBQ3JCLGdEQUErQzs7SUFDL0MsaURBQXVCOzs7OztJQUVYLDJDQUFzQjs7Ozs7SUFBRSwrQ0FBeUI7Ozs7O0lBQUUsK0NBQXdCOztJQUFFLDJDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2dyb3VwLWZvb3Rlci1yb3ctc3R5bGVyXScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcm91cEZvb3RlclJvd1N0eWxlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoKSBjb2x1bW46IGFueTtcclxuICAgIEBJbnB1dCgnZ3JvdXAtZm9vdGVyLXJvdy1zdHlsZXInKSByb3dEYXRhOiBhbnk7XHJcbiAgICBASW5wdXQoKSByb3dJbmRleDogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaW5qZWN0OiBJbmplY3RvciwgcHVibGljIGRnOiBEYXRhZ3JpZENvbXBvbmVudCkgeyB9XHJcblxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tR3JvdXBGb290ZXJSb3dTdHlsZSh0aGlzLnJvd0RhdGEpO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgYnVpbGRDdXN0b21Hcm91cEZvb3RlclJvd1N0eWxlKHJvd0RhdGEpIHtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZGcuZ3JvdXBGb290ZXJTdHlsZXIpIHtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5kZy5kZ3MuZ2V0Q3VzdG9tU3R5bGUodGhpcy5kZy5ncm91cEZvb3RlclN0eWxlciwgW3Jvd0RhdGFdKTtcclxuICAgICAgICAgICAgaWYgKGNzKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnJlbmRlckN1c3RvbUNscyhjcy5jbHMsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3Muc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhjcy5zdHlsZSkuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbC5uYXRpdmVFbGVtZW50LnN0eWxlW25dID0gY3Muc3R5bGVbbl07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuIl19