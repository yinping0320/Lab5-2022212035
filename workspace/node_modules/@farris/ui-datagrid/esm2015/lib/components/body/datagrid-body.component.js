/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { switchMap, delay, debounceTime, takeUntil } from 'rxjs/operators';
import { of, Subject } from 'rxjs';
import ResizeObserver from 'resize-observer-polyfill';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-12 07:47:12
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-26 10:21:25
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, Renderer2, ElementRef, ChangeDetectorRef, ChangeDetectionStrategy, NgZone, Injector, Optional, ApplicationRef, Output, EventEmitter } from '@angular/core';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { ScrollbarDirective } from '../../scrollbar/scrollbar.directive';
import { GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD } from '../../services/state';
import { SCROLL_X_ACTION, SCROLL_Y_ACTION, SCROLL_X_REACH_START_ACTION, TR_PREFIX, WORDWRAP_ROW_HEIGHT_CLS } from '../../types/constant';
import { DatagridService } from '../../services/datagrid.service';
import { DatagridComponent } from '../../datagrid.component';
import { FormatCellDataPipe } from '../../utils/format-cell-data.pipe';
import { ColumnFormatService } from '@farris/ui-common/column';
import { Utils } from '../../utils/utils';
export class DatagridBodyComponent {
    /**
     * @param {?} injector
     * @param {?} app
     * @param {?} dg
     * @param {?} cd
     * @param {?} el
     */
    constructor(injector, app, dg, cd, el) {
        this.injector = injector;
        this.app = app;
        this.dg = dg;
        this.cd = cd;
        this.el = el;
        // 自动高度时，禁用纵向滚动条
        this.psConfig = { swipeEasing: false, minScrollbarLength: 15, handlers: ['click-rail', 'drag-thumb', 'wheel', 'touch'], suppressScrollY: this.dg.autoHeight && this.dg.maxHeight ? false : this.dg.autoHeight };
        this.scrollTop = 0;
        this.scrollLeft = 0;
        this.deltaTopHeight = 0;
        // wheelHeight = 0;
        this.wheelWidth = 0;
        this._fixedRightScrollLeft = 0;
        this.maxScrollLeft = 0;
        this.showRightShadow = false;
        this.footerHeight = 0;
        // 虚拟加载
        this.topHideHeight = 0;
        this.bottomHideHeight = 0;
        this.startRowIndex = 0;
        this.dataChange = new EventEmitter();
        this.scrollBarMode = 'auto';
        this.checkedRows = [];
        /**
         * 性能优化版，默认为 false
         */
        this.fast = false;
        this.visibleContextMenus = [];
        this.currentRowId = undefined;
        this._hoverRowIndex = -1;
        this.subscriptions = [];
        this.minRowBuffer = 3;
        this.vScrollDir = 1;
        this.rowsCache = {};
        this.lastRenderedScrollTop = 0;
        this.lastRenderedScrollLeft = 0;
        this.prevScrollTop = 0;
        this.prevScrollLeft = 0;
        this.rows = [];
        this.blankTopHeight = 0;
        this.blankBottomHeight = 0;
        this.cellContentFormatter = null;
        // 当启用多选且允许多选中，列表不能编辑时，取选中后禁止触发body 的click 事件
        this.__triggerBodyClickEvent = true;
        this.destroy$ = new Subject();
        this._onMouseClick = null;
        this._scrollTimer = 0;
        this._scrollXTimer = 0;
        this.ro = null;
        this.resizeObserverTimer = 0;
        this._clickCellWeakMap = new WeakMap();
        this.onBeforeShowContextMenu = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            // row_1_fixedleft  row_1  row_1_fixedright
            const { contextMenuDom, event } = e;
            if (event.target.closest('.datagrid-editor')) {
                return of({ show: false });
            }
            /** @type {?} */
            let rowID = event.target.id;
            if (contextMenuDom) {
                // 排除分组行、分组合计行
                if (contextMenuDom.className.indexOf('f-datagrid-group-row') === -1 && contextMenuDom.className.indexOf('f-datagrid-group-footer') === -1) {
                    rowID = Utils.getRowIdByTr(contextMenuDom);
                    /** @type {?} */
                    const rowData = this.dfs.findRow(rowID);
                    /** @type {?} */
                    const focusTargetWidth = this.viewportW > this.totalWidth ? this.totalWidth : this.viewportW;
                    /** @type {?} */
                    const td = event.target.closest('td');
                    /** @type {?} */
                    let colInfo = null;
                    if (td) {
                        /** @type {?} */
                        const fieldName = td.getAttribute('field');
                        colInfo = fieldName ? this.dfs.getColumn(fieldName) : null;
                    }
                    /** @type {?} */
                    let beforeShowContextMenus$ = of(true);
                    if (this.dg.beforeShowContextMenus) {
                        /** @type {?} */
                        const showContextMenu = this.dg.beforeShowContextMenus({ rowid: rowID, data: rowData.data, grid: this.dg, column: colInfo });
                        if (typeof showContextMenu === 'boolean') {
                            beforeShowContextMenus$ = of(showContextMenu);
                        }
                        else {
                            if (showContextMenu['subscribe']) {
                                beforeShowContextMenus$ = showContextMenu;
                            }
                        }
                    }
                    return beforeShowContextMenus$.pipe(switchMap((/**
                     * @param {?} e
                     * @return {?}
                     */
                    (e) => {
                        /** @type {?} */
                        const params = { rowid: rowID, data: rowData.data, grid: this.dg, column: colInfo };
                        if (typeof e === 'object') {
                            const { show: isShow, customData } = e;
                            return of({ show: isShow, data: Object.assign(params, { customData: customData ? customData : null }), focusTargetWidth });
                        }
                        else {
                            return of({ show: e, data: params, focusTargetWidth });
                        }
                    })));
                }
            }
            return of({ show: false });
        });
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.ngZone = this.injector.get(NgZone);
        this.render = this.injector.get(Renderer2);
        /** @type {?} */
        const columnFormatService = this.injector.get(ColumnFormatService);
        this.cellContentFormatter = new FormatCellDataPipe(columnFormatService, this.injector);
    }
    /**
     * @return {?}
     */
    get fixedRightScrollLeft() {
        return this._fixedRightScrollLeft;
    }
    /**
     * @param {?} val
     * @return {?}
     */
    set fixedRightScrollLeft(val) {
        this._fixedRightScrollLeft = val;
    }
    /**
     * @return {?}
     */
    get hoverRowIndex() {
        return this._hoverRowIndex;
    }
    /**
     * @param {?} rowIdx
     * @return {?}
     */
    set hoverRowIndex(rowIdx) {
        this._hoverRowIndex = rowIdx;
        this.cd.detectChanges();
    }
    /**
     * @return {?}
     */
    get selectedRows() {
        return this.dg.selections;
    }
    //////////////////////////////////////////////////////////////////////////
    /**
     * @return {?}
     */
    get scrollbarXHeight() {
        if (this.dg && this.ps && this.ps.instance) {
            /** @type {?} */
            const h = this.dg.scrollBarShowMode === 'allways' && this.ps.instance['scrollbarXActive'] ? 22 : 0;
            if (this.ps.instance['scrollbarYActive'] && h) {
                return h + 18; // + (this.dg.showScrollArrow && this.ps.instance['scrollbarYActive'] ? 18 : 0);
            }
        }
    }
    /**
     * @return {?}
     */
    get scrollbarYWidth() {
        if (this.dg && this.ps && this.ps.instance) {
            return this.dg.scrollBarShowMode === 'allways' && this.ps.instance['scrollbarYActive'] && this.showRightShadow ? 18 : 0;
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.listenSubjects();
        this.dg.scrollInstance = this.ps;
        /** @type {?} */
        const s1 = this.dgs.showGridHeader.subscribe((/**
         * @param {?} headerHeight
         * @return {?}
         */
        headerHeight => {
            this.updateContainerSize(headerHeight);
        }));
        this.subscriptions.push(s1);
        /** @type {?} */
        const s10 = this.dgs.footerPositionChanged.subscribe((/**
         * @return {?}
         */
        () => {
            this.updateContainerSize();
        }));
        this.subscriptions.push(s10);
        /** @type {?} */
        const s2 = this.dgs.rowHeightChanged.subscribe((/**
         * @return {?}
         */
        () => {
            this.cd.detectChanges();
        }));
        this.subscriptions.push(s2);
        /** @type {?} */
        const s3 = this.dfs.clientSort$.subscribe((/**
         * @return {?}
         */
        () => {
            this.checkScrollbarPosition(true);
            this.cd.detectChanges();
            // this.dg.columnSorted.emit();
        }));
        this.subscriptions.push(s3);
        /** @type {?} */
        const s5 = this.dg.dgs.columnsChanged.pipe(delay(50)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (e && e.scrollToLeft) {
                this.ps.elementRef.nativeElement.scrollTo(0, 0);
                this.ps.scrollToLeft(0, 100);
            }
        }));
        this.subscriptions.push(s5);
        this.viewScrollContainer.nativeElement.addEventListener('click', this._onMouseClick = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.onMouseClick(e);
        }));
        if (!this.dg.nowrap) {
            this.dgs.dataloaded.subscribe((/**
             * @return {?}
             */
            () => {
                this.updateRowHeight();
            }));
        }
    }
    /**
     * @private
     * @param {?=} headerHeight
     * @return {?}
     */
    updateContainerSize(headerHeight) {
        /** @type {?} */
        const hh = headerHeight || this.dg.realHeaderHeight;
        this.setPositionTop(hh);
        this.height = this.dg.height - this.top;
        this.bodyStyle = this.getBodyStyle();
        this.cd.detectChanges();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.data && !changes.data.isFirstChange()) {
            this.bodyStyle = this.getBodyStyle();
            this.dfs.setCurrentPageData(changes.data.currentValue);
            /** @type {?} */
            const isDiffrentDataSource = !!changes.data.currentValue.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n['__group__'])).map((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id)).filter((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return !changes.data.previousValue.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => !n['__group__'])).find((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => p.id === n));
            })).length;
            /** @type {?} */
            const isSameLength = changes.data.currentValue.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n['__group__'])).length >= changes.data.previousValue.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => !n['__group__'])).length;
            this.onDataChanged(isSameLength, isDiffrentDataSource);
            if (!changes.data.currentValue || !changes.data.currentValue.length) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.setPositionTop(this.dg.realHeaderHeight);
                }));
            }
        }
        if (changes.footerHeight !== undefined && !changes.footerHeight.isFirstChange()) {
            this.bodyStyle = this.getBodyStyle();
        }
        if (changes.scrollBarMode !== undefined && !changes.scrollBarMode.isFirstChange()) {
            if (this.ps && this.ps.instance && this.scrollBarMode === 'allways' && this.ps.instance.scrollbarYActive) {
                this.rightFixedWidth += this.showRightShadow ? 18 : 0;
            }
            else {
                this.rightFixedWidth = this.columnsGroup.rightFixedWidth;
            }
            if (this.dg.scrollBarShowMode === 'allways' && this.ps && this.ps.instance && this.ps.instance.scrollbarXActive) {
                this.blankBottomHeight += 22;
            }
        }
        if (changes.showScrollArrow && !changes.showScrollArrow.isFirstChange()) {
            this.ps && this.ps.update();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        this.cellContentFormatter = null;
        this.dg.scrollInstance = null;
        this.destroySubscriptions();
        this.viewScrollContainer.nativeElement.removeEventListener('click', this._onMouseClick);
        if (this.ro) {
            this.ro.unobserve(this.viewScrollContainer.nativeElement);
            this.ro.disconnect();
        }
        if (this.resizeObserverTimer) {
            clearTimeout(this.resizeObserverTimer);
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ro = new ResizeObserver((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.viewScrollContainer.nativeElement.offsetParent) {
                if (this.resizeObserverTimer) {
                    clearTimeout(this.resizeObserverTimer);
                }
                this.resizeObserverTimer = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.updateCanvasHeight();
                    if (this.scrollBarMode === 'allways') {
                        this.ps.update();
                    }
                    // this.setFixedRightWidth();
                    this.cd.detectChanges();
                    this.dgs.scrollbarUpdate.emit({ scrollbarRef: this.ps.instance, rightWidth: this.rightFixedWidth, showRightShadow: this.showRightShadow });
                }), 100);
            }
        }));
        this.ro.observe(this.viewScrollContainer.nativeElement);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
    }
    /**
     * @private
     * @param {?} headerHeight
     * @return {?}
     */
    setPositionTop(headerHeight) {
        this.top = headerHeight;
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            this.top += this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            this.top += this.dg.rowGroupPanelHeight;
        }
        if (this.dg.showFooter && (this.dg.footerPosition === 'top' || this.dg.footerPosition === 'both')) {
            // headerHeight 已包括过滤行的高度 tfs 542471
            if (this.data && this.data.length) {
                this.top += this.dg.footerHeight;
            }
        }
    }
    /**
     * @private
     * @param {?=} toTop
     * @return {?}
     */
    checkScrollbarPosition(toTop = false) {
        if (!this.dg.data || !this.dg.data.length) {
            return;
        }
        /** @type {?} */
        const scrollBar = this.ps.instance;
        /** @type {?} */
        const scrollElRef = this.ps.elementRef.nativeElement;
        // scrollBar.update();
        /** @type {?} */
        const lastScrollLeft = scrollBar ? scrollBar.lastScrollLeft : 0;
        /** @type {?} */
        const lastScrollTop = scrollBar ? scrollBar.lastScrollTop : 0;
        // const lastScrollLeft = this.scrollLeft;
        // const lastScrollTop = this.scrollTop;
        /** @type {?} */
        const scrollTop = scrollElRef.scrollTop;
        /** @type {?} */
        const scrollLeft = scrollElRef.scrollLeft;
        if (!toTop) {
            if (scrollTop != lastScrollTop) {
                this.ps.scrollToTop(lastScrollTop);
                this.dgs.onScrollMove(lastScrollTop, SCROLL_Y_ACTION);
            }
        }
        else {
            this.ps.scrollToTop();
            this.dgs.onScrollMove(lastScrollTop, SCROLL_Y_ACTION);
        }
        this.scrollLeft = lastScrollLeft;
        if (scrollLeft != lastScrollLeft) {
            this.ps.scrollToX(lastScrollLeft);
            this.dgs.onScrollMove(lastScrollLeft, SCROLL_X_ACTION);
        }
        else {
            if (lastScrollLeft) {
                this.dgs.onScrollMove(lastScrollLeft, SCROLL_X_ACTION);
            }
        }
    }
    /**
     * 数据发生变化，重新加载数据时执行
     * 重置滚动条位置
     * @private
     * @param {?=} isSameLength
     * @param {?=} isDiffrentDataSource
     * @return {?}
     */
    onDataChanged(isSameLength = true, isDiffrentDataSource = false) {
        this.dg.setPagerHeight();
        this.viewportH = this.getViewPortHeight();
        this.bodyStyle = this.getBodyStyle();
        /**
         * update:
         * node_modules\perfect-scrollbar\types\perfect-scrollbar.d.ts
         * lastScrollTop: number
         */
        if (this.ps && this.ps.instance && !this.dg.isEditing() && !this.dg.clientFilterChanged && !this.dg.autoHeight) {
            this.scrollTop = 0;
            this.lastRenderedScrollTop = 0;
            this.ps.scrollToTop();
            this.scrollLeft = 0;
            this.ps.scrollToLeft();
        }
        this.rowsCache = {};
        /** @type {?} */
        const keepscrollPos = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const scrollInfo = this.dg.dfs.getState().scrollInfo;
            if (scrollInfo) {
                if (scrollInfo.y) {
                    this.scrollTop = scrollInfo.y;
                    this.dg.scrollInstance.scrollToY(scrollInfo.y);
                    this.dgs.onScrollMove(scrollInfo.y, SCROLL_Y_ACTION);
                }
                if (scrollInfo.x) {
                    this.scrollLeft = scrollInfo.x;
                    this.dg.scrollInstance.scrollToX(scrollInfo.x);
                    this.dg.dgs.onScrollMove(scrollInfo.x, SCROLL_X_ACTION);
                }
            }
        });
        if (!this.dg.nowrap || this.dg.autoHeight) {
            this.renderData(false);
            this.dgs.cellContentWrapChanged.next(this.width);
        }
        else {
            if (isSameLength) {
                keepscrollPos();
            }
            this.renderData(false);
            this.ps.update();
        }
        if (isDiffrentDataSource) {
            this.dg.initSelectOrChecked();
        }
        else {
            this.dg.refreshSelectedData();
        }
        this.dg.clientFilterChanged = false;
        this.dataChange.emit(this.data);
        if (this.dg.scrollBarShowMode === 'allways' && this.ps.instance && !this.dg.showScrollArrow) {
            this.hasYScrollbar();
        }
    }
    /**
     * @private
     * @return {?}
     */
    destroySubscriptions() {
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} sub
             * @return {?}
             */
            (sub) => {
                if (sub) {
                    sub.unsubscribe();
                    sub = null;
                }
            }));
            this.subscriptions = [];
        }
    }
    /**
     * @private
     * @return {?}
     */
    listenSubjects() {
        this.destroySubscriptions();
        this.gridSizeSubscribe = this.dfs.gridSize$.pipe(takeUntil(this.destroy$)).pipe(debounceTime(50)).subscribe((/**
         * @param {?} state
         * @return {?}
         */
        state => {
            if (state) {
                this.dg.setPagerHeight();
                /** @type {?} */
                const hh = this.dg.setHeaderHeight();
                this.setPositionTop(hh);
                this.height = state.height - this.top;
                /** @type {?} */
                const oldWidth = this.width;
                this.width = Math.floor(state.width);
                this.rowHeight = state.rowHeight;
                if (this.dg.showBorder) {
                    this.width -= 2;
                }
                this.viewportW = this.width;
                this.viewportH = this.getViewPortHeight();
                this.canvasHeight = this.getCanvasHeight();
                this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                () => {
                    this.columnsGroup = state.columnsGroup;
                    this.checkScrollbarPosition();
                    // this.setFixedRightPosition();
                    this.updateColumnSize(state.columnsGroup);
                    this.dgs.showFixedShadow.emit({ showRightShadow: this.showRightShadow, x: this.fixedRightScrollLeft });
                    this.renderData(false);
                    if ((!this.dg.nowrap || this.dg.autoHeight) && this.rows && this.rows.length) {
                        if (oldWidth !== this.width) {
                            this.dgs.cellContentWrapChanged.next(oldWidth);
                        }
                        else {
                            this.keepScrollbarPosition(oldWidth);
                        }
                    }
                    else {
                        if (this._scrollXTimer) {
                            clearTimeout(this._scrollXTimer);
                        }
                        this._scrollXTimer = setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this.keepScrollbarPosition(oldWidth);
                        }), 100);
                    }
                }));
            }
        }));
        this.subscriptions.push(this.gridSizeSubscribe);
        this.columnResizeSubscribe = this.dfs.columnResize$.subscribe((/**
         * @param {?} cg
         * @return {?}
         */
        (cg) => {
            this.updateColumnSize(cg);
            this.cd.detectChanges();
        }));
        this.subscriptions.push(this.columnResizeSubscribe);
        this.dgs.setSelecedRow.subscribe((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            if (r && r.selected) {
                this.currentRowId = r.id;
            }
            else {
                this.currentRowId = undefined;
            }
        }));
        this.selectRowSubscribe = this.dfs.selectRow$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (row) {
                this.currentRowId = row.id;
                // 20210817 方向键移动后刷新视图状态
                this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(this.selectRowSubscribe);
        this.unselectRowSubscribe = this.dfs.unSelectRow$.subscribe((/**
         * @param {?} prevRow
         * @return {?}
         */
        (prevRow) => {
            if (prevRow && prevRow.id === this.currentRowId) {
                this.currentRowId = undefined;
                this.dg.selectedRow = null;
            }
            if (!this.dg.editable && this.dg.multiSelect) {
                this.__triggerBodyClickEvent = this.dg.selectionMode === 'default';
            }
            this.cd.detectChanges();
        }));
        this.subscriptions.push(this.unselectRowSubscribe);
        this.selectAllSubscribe = this.dfs.selectAll$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        (rows) => {
            this.dg.selectAll.emit(rows);
            this.cd.detectChanges();
        }));
        this.subscriptions.push(this.selectAllSubscribe);
        this.checkRowSubscribe = this.dfs.checkRow$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            this.dg.checked.emit(row);
            this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.checkRowSubscribe);
        this.clearSelectionsSubscribe = this.dfs.clearSelections$.subscribe((/**
         * @return {?}
         */
        () => {
            this.currentRowId = undefined;
            if (this.dg.checkOnSelect) {
                this.checkedRowsChanged();
            }
            this.dg.unSelectAll.emit();
        }));
        this.subscriptions.push(this.clearSelectionsSubscribe);
        this.uncheckRowSubscribe = this.dfs.unCheckRow$.subscribe((/**
         * @param {?} prevRow
         * @return {?}
         */
        (prevRow) => {
            this.dg.unChecked.emit(prevRow);
            this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.uncheckRowSubscribe);
        this.checkAllSubscribe = this.dfs.checkAll$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        (rows) => {
            this.dg.checkAll.emit(rows);
            this.checkedRowsChanged();
            // this.cd.detectChanges();
        }));
        this.subscriptions.push(this.checkAllSubscribe);
        this.clearCheckedsSubscribe = this.dfs.clearCheckeds$.subscribe((/**
         * @param {?} rows
         * @return {?}
         */
        (rows) => {
            if (this.dg.selectOnCheck) {
                this.currentRowId = undefined;
            }
            this.dg.unCheckAll.emit(rows);
            this.checkedRowsChanged();
            this.cd.detectChanges();
        }));
        this.subscriptions.push(this.clearCheckedsSubscribe);
        this.subscriptions.push(this.dgs.setScrollbarPosition.subscribe((/**
         * @return {?}
         */
        () => {
            this.checkScrollbarPosition();
            this.updateScrollPosition(this.scrollLeft);
        })));
        this.dgs.columnResized.pipe(delay(100)).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.dg.nowrap ||
                (this.dg.currentCell && this.dg.currentCell.isEditing && this.dg.currentCell.column &&
                    this.dg.currentCell.column.editor && this.dg.currentCell.column.editor.type === 'textarea')) {
                /** @type {?} */
                const trdoms = this.dg.dgContainer.nativeElement.querySelectorAll('.f-datagrid-body-row:not(.f-datagrid-footer-row)');
                trdoms.forEach((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    this.render.setStyle(n, 'height', 'auto');
                }));
                /** @type {?} */
                let trID = '';
                if (e) {
                    /** @type {?} */
                    const rowId = e.id;
                    trID = TR_PREFIX + rowId;
                }
                this.updateRowHeight(trID);
            }
            if (this.dg.headerWrap) {
                this.dg.setHeaderHeight();
                this.dfs.columnResizeEnd();
            }
        }));
        this.dgs.cellContentWrapChanged.pipe(takeUntil(this.destroy$), debounceTime(100)).subscribe((/**
         * @param {?} oldWidth
         * @return {?}
         */
        (oldWidth) => {
            this.updateRowHeight();
            if (oldWidth != null) {
                this.keepScrollbarPosition(oldWidth);
            }
            else {
                this.ps && this.ps.instance && this.ps.instance.update();
            }
        }));
        this.dg.dfs.rowUpdate$.subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (row && row.data) {
                this.buildCustomCellStyle(row);
            }
        }));
        if (this.dg.groupRows) {
            this.dfs.expandGroupRow.pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && e.data) {
                    this.groupRowStateChanged(e.data, true);
                    setTimeout((/**
                     * @return {?}
                     */
                    () => { this.updateRowHeight(); }));
                }
            }));
            this.dfs.collapseGroupRow.pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e && e.data) {
                    this.groupRowStateChanged(e.data, false);
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} groupRow
     * @param {?} isExpand
     * @return {?}
     */
    groupRowExpandUpdate(groupRow, isExpand) {
        if (groupRow.rows && groupRow.rows.length) {
            groupRow.rows.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                if (n[IS_GROUP_FOOTER_ROW_FIELD]) {
                    this.data.filter((/**
                     * @param {?} t
                     * @return {?}
                     */
                    t => t[GROUP_ROW_FIELD] === n[GROUP_ROW_FIELD])).forEach((/**
                     * @param {?} d
                     * @return {?}
                     */
                    d => {
                        d[GROUP_VISIBLE_FIELD] = isExpand && groupRow.expanded;
                    }));
                }
                else {
                    /** @type {?} */
                    const item = this.data.find((/**
                     * @param {?} e
                     * @return {?}
                     */
                    e => e.id === n.id));
                    if (item) {
                        item[GROUP_VISIBLE_FIELD] = isExpand && groupRow.expanded;
                        if (item.rows && item.rows.length) {
                            this.groupRowExpandUpdate(item, isExpand);
                        }
                    }
                }
            }));
        }
    }
    /**
     * @private
     * @param {?} rowData
     * @param {?} expand
     * @return {?}
     */
    groupRowStateChanged(rowData, expand) {
        if (this.dg.virtualized) {
            /** @type {?} */
            const gr = this.data.find((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === rowData.id));
            this.groupRowExpandUpdate(gr, expand);
            this.renderData(false);
        }
        else {
            this.getCanvasHeight();
        }
        if (this['_psUpdateTimer_']) {
            clearTimeout(this['_psUpdateTimer_']);
        }
        this['_psUpdateTimer_'] = setTimeout((/**
         * @return {?}
         */
        () => {
            this.ps.update();
            this.cd.detectChanges();
        }), 100);
    }
    /**
     * @private
     * @param {?} oldWidth
     * @return {?}
     */
    keepScrollbarPosition(oldWidth) {
        if (!this.cd["destroyed"]) {
            this.cd.detectChanges();
        }
        if (!this.ps.instance) {
            return;
        }
        if (this["keepScrollbarPositionTIMER"]) {
            clearTimeout(this["keepScrollbarPositionTIMER"]);
        }
        this["keepScrollbarPositionTIMER"] = setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.width > oldWidth) {
                /** @type {?} */
                const x = this.scrollLeft - (this.width - oldWidth);
                this.ps.elementRef.nativeElement.scrollLeft = x < 0 ? 0 : x;
            }
            if (!this.dg.nowrap || this.dg.autoHeight) {
                this.updateCanvasHeight();
            }
            this.ps.update();
            this.updateScrollPosition(this.ps.elementRef.nativeElement.scrollLeft);
            this.dgs.scrollbarUpdate.emit({ scrollbarRef: this.ps.instance, rightWidth: this.rightFixedWidth, showRightShadow: this.showRightShadow });
        }), 50);
    }
    /**
     * @private
     * @param {?} cg
     * @return {?}
     */
    updateColumnSize(cg) {
        if (cg) {
            this.columnsGroup = cg;
            this.leftFixedWidth = this.columnsGroup.leftFixedWidth;
            this.colsWidth = this.columnsGroup.normalWidth;
            this.scrollLeft = this.ps.elementRef.nativeElement.scrollLeft;
            this.maxScrollLeft = this.colsWidth + this.leftFixedWidth;
            this.fixedRightScrollLeft = this.maxScrollLeft;
            // grid 容器宽度
            /** @type {?} */
            const dgContainerWidth = this.dg.dgContainer.nativeElement.offsetWidth;
            // 所有列宽之和
            /** @type {?} */
            const allColsWidth = Math.floor(this.columnsGroup.totalWidth);
            this.bodyStyle = this.getBodyStyle();
            if (dgContainerWidth > allColsWidth || dgContainerWidth === allColsWidth) {
                this.showRightShadow = false;
            }
            else {
                this.showRightShadow = true;
                // 右侧固定列的位置
                this.fixedRightScrollLeft = this.width + this.scrollLeft;
            }
            this.setFixedRightWidth();
        }
    }
    /**
     * @private
     * @return {?}
     */
    setFixedRightWidth() {
        this.rightFixedWidth = this.columnsGroup.rightFixedWidth;
        this.totalWidth = this.columnsGroup.totalWidth;
        if (this.ps && this.ps.instance && this.dg.scrollBarShowMode === 'allways') {
            if (this.ps.instance.scrollbarYActive) {
                this.rightFixedWidth += 18;
            }
        }
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    buildCustomCellStyle(row) {
        /** @type {?} */
        let rightTrs = [];
        /** @type {?} */
        let leftTrs = [];
        if (this.fixedRightEl) {
            rightTrs = this.fixedRightEl.nativeElement.querySelectorAll('tr');
        }
        if (this.fixedLeftEl) {
            leftTrs = this.fixedLeftEl.nativeElement.querySelectorAll('.fixed-left-row');
        }
        /** @type {?} */
        const trs = this.mainArea.nativeElement.querySelectorAll('tr.f-datagrid-body-row');
        /** @type {?} */
        const updateCellStyle = (/**
         * @param {?} arr
         * @param {?} col
         * @param {?} style
         * @return {?}
         */
        (arr, col, style) => {
            if (arr.length) {
                /** @type {?} */
                const td = arr[row.index].querySelector(`[field="${col.field}"]`);
                if (td) {
                    this.dg.renderCustomStyle(style, td);
                }
            }
        });
        this.dg.flatColumns.forEach((/**
         * @param {?} col
         * @return {?}
         */
        col => {
            if (col.styler) {
                /** @type {?} */
                const _rd = row.data;
                /** @type {?} */
                const val = Utils.getValue(col.field, _rd);
                /** @type {?} */
                const cs = col.styler(val, _rd, row.index);
                if (cs && Object.keys(cs).length) {
                    updateCellStyle(leftTrs, col, cs);
                    updateCellStyle(rightTrs, col, cs);
                    updateCellStyle(trs, col, cs);
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    checkedRowsChanged() {
        this.dgs.onCheckedRowsCountChange();
        /** @type {?} */
        const checkedRows = this.dg.checkeds;
        this.dg.checkValues = checkedRows.map((/**
         * @param {?} r
         * @return {?}
         */
        r => r.id));
        this.dg.checkValuesChange.emit(this.dg.checkValues);
        this.dg.checkedChange.emit(checkedRows);
    }
    /**
     * @private
     * @return {?}
     */
    getTrDomHeight() {
        /** @type {?} */
        const list = [];
        /** @type {?} */
        let rightTrs = [];
        /** @type {?} */
        let leftTrs = [];
        /** @type {?} */
        let trdoms = [];
        if (this.fixedRightEl) {
            rightTrs = this.fixedRightEl.nativeElement.querySelectorAll('tr');
        }
        if (this.fixedLeftEl) {
            leftTrs = this.fixedLeftEl.nativeElement.querySelectorAll('.fixed-left-row');
        }
        if (this.mainArea) {
            trdoms = this.mainArea.nativeElement.querySelectorAll('tr.f-datagrid-body-row');
        }
        trdoms.forEach((/**
         * @param {?} tr
         * @param {?} i
         * @return {?}
         */
        (tr, i) => {
            /** @type {?} */
            let t1 = 0;
            /** @type {?} */
            const t2 = Math.ceil(tr.offsetHeight);
            /** @type {?} */
            let t3 = 0;
            if (leftTrs && leftTrs.length) {
                t1 = Math.ceil(leftTrs[i].offsetHeight);
            }
            if (rightTrs && rightTrs.length) {
                t3 = Math.ceil(rightTrs[i].offsetHeight);
            }
            /** @type {?} */
            const _h = Math.max(t1, t2, t3, this.dg.rowHeight);
            list.push(_h);
        }));
        return list;
    }
    /**
     * @return {?}
     */
    updateRowHeight2() {
        /** @type {?} */
        let rightTrs = [];
        /** @type {?} */
        let leftTrs = [];
        /** @type {?} */
        let trdoms = [];
        if (this.fixedRightEl) {
            rightTrs = this.fixedRightEl.nativeElement.querySelectorAll('tr');
        }
        if (this.fixedLeftEl) {
            leftTrs = this.fixedLeftEl.nativeElement.querySelectorAll('.fixed-left-row');
        }
        if (this.mainArea) {
            trdoms = this.mainArea.nativeElement.querySelectorAll('tr.f-datagrid-body-row');
        }
        trdoms.forEach((/**
         * @param {?} tr
         * @param {?} i
         * @return {?}
         */
        (tr, i) => {
            this.removeRowHeightCls(tr);
            if (leftTrs && leftTrs[i]) {
                this.removeRowHeightCls(leftTrs[i]);
            }
            if (rightTrs && rightTrs[i]) {
                this.removeRowHeightCls(rightTrs[i]);
            }
        }));
        if (this['UPDATE_ROW_HEIGHT_TIMER']) {
            clearTimeout(this['UPDATE_ROW_HEIGHT_TIMER']);
        }
        this['UPDATE_ROW_HEIGHT_TIMER'] = setTimeout((/**
         * @return {?}
         */
        () => {
            trdoms.forEach((/**
             * @param {?} tr
             * @param {?} i
             * @return {?}
             */
            (tr, i) => {
                /** @type {?} */
                let t1 = 0;
                /** @type {?} */
                const t2 = Math.ceil(tr.offsetHeight);
                /** @type {?} */
                let t3 = 0;
                /** @type {?} */
                let leftTr = null;
                /** @type {?} */
                let rightTr = null;
                if (leftTrs && leftTrs.length) {
                    t1 = Math.ceil(leftTrs[i].offsetHeight);
                    leftTr = leftTrs[i];
                }
                if (rightTrs && rightTrs.length) {
                    t3 = Math.ceil(rightTrs[i].offsetHeight);
                    rightTr = rightTrs[i];
                }
                /** @type {?} */
                const _h = Math.max(t1, t2, t3, this.dg.rowHeight);
                if (!this.dg.nowrap || this.dg.autoHeight) {
                    /** @type {?} */
                    const heightClsName = WORDWRAP_ROW_HEIGHT_CLS + '_' + _h;
                    /** @type {?} */
                    const minRowHeightClsName = 'min_row_height_' + this.rowHeight;
                    /** @type {?} */
                    const _addRowHeightClsToDom = (/**
                     * @param {?} trdom
                     * @return {?}
                     */
                    (trdom) => {
                        this.removeRowHeightCls(trdom);
                        this.render.addClass(trdom, heightClsName);
                        this.render.addClass(trdom, minRowHeightClsName);
                    });
                    this.addRowHeightCls(heightClsName, _h);
                    _addRowHeightClsToDom(tr);
                    if (leftTr) {
                        _addRowHeightClsToDom(leftTr);
                    }
                    if (rightTr) {
                        _addRowHeightClsToDom(rightTr);
                    }
                }
            }));
        }), 100);
    }
    /**
     * @private
     * @param {?} tr
     * @return {?}
     */
    removeRowHeightCls(tr) {
        if (!tr) {
            return;
        }
        /** @type {?} */
        const _cls = Array.from(tr.classList).find((/**
         * @param {?} n
         * @return {?}
         */
        (n) => n.indexOf(WORDWRAP_ROW_HEIGHT_CLS) > -1));
        if (_cls) {
            tr.classList.remove(_cls);
        }
    }
    /**
     * @private
     * @param {?} heightClsName
     * @param {?} _h
     * @return {?}
     */
    addRowHeightCls(heightClsName, _h) {
        this.dgs.removeCssRule(`${this.dg.customStyleKey()} .${heightClsName}`);
        this.dg.renderCustomStyle2({ style: { height: _h + 'px!important' } }, null, heightClsName);
    }
    /**
     * 允许数据折行时，计算行号的行高
     * @param {?=} trDomId
     * @return {?}
     */
    updateRowHeight(trDomId = null) {
        if (this.fast) {
            return;
        }
        if (!this.mainArea) {
            return;
        }
        /** @type {?} */
        const dgBody = this.el.nativeElement.querySelector('div.f-datagrid-body');
        if (dgBody) {
            if (!this.dg.nowrap || this.dg.autoHeight) {
                this.render.addClass(dgBody, 'data-wrap');
            }
            else {
                this.render.removeClass(dgBody, 'data-wrap');
            }
        }
        if (!trDomId) {
            this.updateRowHeight2();
        }
        else {
            /** @type {?} */
            const tr = Utils.getTrDomById(trDomId, document);
            if (!tr) {
                return;
            }
            /** @type {?} */
            const leftTrId = trDomId + '_fixedleft';
            /** @type {?} */
            const rightTrId = trDomId + '_fixedright';
            /** @type {?} */
            const leftTr = Utils.getTrDomById(leftTrId, document);
            /** @type {?} */
            const rightTr = Utils.getTrDomById(rightTrId, document);
            this.removeRowHeightCls(tr);
            this.removeRowHeightCls(leftTr);
            this.removeRowHeightCls(rightTr);
            /** @type {?} */
            const _arr = [];
            if (this.fixedRightEl) {
                /** @type {?} */
                const rtr = Utils.getTrDomById(trDomId, this.fixedRightEl.nativeElement);
                if (rtr) {
                    _arr.push(Math.ceil(rtr.offsetHeight));
                }
            }
            if (this.fixedLeftEl) {
                /** @type {?} */
                const ltr = Utils.getTrDomById(trDomId, this.fixedLeftEl.nativeElement);
                if (ltr) {
                    _arr.push(Math.ceil(ltr.offsetHeight));
                }
            }
            if (this.mainArea) {
                /** @type {?} */
                const tr = Utils.getTrDomById(trDomId, this.mainArea.nativeElement);
                if (tr) {
                    _arr.push(Math.ceil(tr.offsetHeight));
                }
            }
            /** @type {?} */
            const _h = Math.max(..._arr);
            /** @type {?} */
            const heightClsName = WORDWRAP_ROW_HEIGHT_CLS + '_' + _h;
            if (!this.dg.nowrap || this.dg.autoHeight) {
                this.render.addClass(tr, heightClsName);
                this.addRowHeightCls(heightClsName, _h);
                if (leftTr) {
                    this.render.addClass(leftTr, heightClsName);
                }
                if (rightTr) {
                    this.render.addClass(rightTr, heightClsName);
                }
            }
        }
        this.updateCanvasHeight();
        // 移除height: auto
        /** @type {?} */
        const trdoms = this.dg.dgContainer.nativeElement.querySelectorAll('.f-datagrid-body-row:not(f-datagrid-footer-row)');
        trdoms.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => n.style.height = ''));
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @private
     * @return {?}
     */
    getBodyStyle() {
        /** @type {?} */
        let h = this.getViewPortHeight();
        if (!this.data.length) {
            if (this.dg.useBlankWhenDataIsEmpty) {
                h = this.dg.emptyDataHeight;
            }
            else {
                if (this.dg.autoHeight) {
                    h = this.dg.emptyDataHeight;
                }
                if (this.dg.footerData && this.dg.showFooter) {
                    /** @type {?} */
                    let fd = this.dg.footerData;
                    if (this.dg.footerData.subscribe) {
                        fd = this.dg.footerData['value'];
                    }
                    if (fd && Array.isArray(fd) && fd.length) {
                        h = h - this.dg.footerHeight;
                        if (this.dg.footerPosition === 'both') {
                            h = h - this.dg.footerHeight;
                        }
                    }
                }
            }
        }
        else {
            if (this.dg.showFooter && this.dg.footerPosition === 'both') {
                h = h - this.dg.footerHeight;
            }
        }
        return {
            height: `${Math.floor(h) + 1}px`
        };
    }
    /**
     * @private
     * @param {?} scrollLeft
     * @return {?}
     */
    updateScrollPosition(scrollLeft) {
        this.scrollLeft = scrollLeft;
        this.fixedRightScrollLeft = this.scrollLeft + this.width - this.rightFixedWidth;
        if (this.fixedRightScrollLeft === this.maxScrollLeft || this.fixedRightScrollLeft > this.maxScrollLeft) {
            this.fixedRightScrollLeft = this.maxScrollLeft;
            this.showRightShadow = false;
        }
        else {
            this.showRightShadow = true;
        }
        if (this.fixedLeftEl) {
            this.render.setStyle(this.fixedLeftEl.nativeElement, 'transform', `translate3d(${this.scrollLeft}px, 0px, 0px)`);
        }
        if (this.fixedRightEl) {
            /** @type {?} */
            let l = this.dg.width - (this.dg.showBorder ? 2 : 0) - this.columnsGroup.rightFixedWidth;
            if (this.ps && this.ps.instance && this.ps.instance.scrollbarYActive && this.dg.scrollBarShowMode === 'allways') {
                l -= 18;
            }
            /** @type {?} */
            let realWidth = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth + this.columnsGroup.rightFixedWidth;
            if (this.dg.width - (this.dg.showBorder ? 2 : 0) > realWidth) {
                l = this.columnsGroup.leftFixedWidth + this.columnsGroup.normalWidth;
            }
            l += this.scrollLeft;
            this.fixedRightScrollLeft = l;
            this.render.setStyle(this.fixedRightEl.nativeElement, 'transform', `translate3d(${this.fixedRightScrollLeft}px, 0px, 0px)`);
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onScrollToX($event) {
        /** @type {?} */
        const x = $event.target.scrollLeft;
        this.updateScrollPosition(x);
        // this.cd.detectChanges();
        this.dgs.onScrollMove(x, SCROLL_X_ACTION);
        this.dfs.updateProperty('scrollInfo', { y: $event.target.scrollTop, x });
        this.dgs.showFixedShadow.emit({ showRightShadow: this.showRightShadow, x: this.fixedRightScrollLeft });
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onScrollToY($event) {
        if (this._scrollTimer) {
            clearTimeout(this._scrollTimer);
        }
        this._scrollTimer = setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const y = $event.target.scrollTop;
            if (this.dg.virtualized) {
                this.handleScroll();
            }
            this.scrollTop = y;
            this.dfs.updateProperty('scrollInfo', { y, x: $event.target.scrollLeft });
            this.dg.scrollY.emit(y);
            this.dgs.onScrollMove(y, SCROLL_Y_ACTION);
        }), 100);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPsXReachStart($event) {
        /** @type {?} */
        const x = $event.target.scrollLeft;
        this.updateScrollPosition(x);
        this.dgs.onScrollMove(x, SCROLL_X_REACH_START_ACTION);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onPsXReachEnd($event) {
        this.showRightShadow = false;
        // const x = $event.target.scrollLeft;
        // this.updateScrollPosition(x);
        // this.cd.detectChanges();
        // // this.dgs.onShowFixedShadow(this.showRightShadow);
        // this.dgs.onScrollMove(x, SCROLL_X_REACH_END_ACTION);
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    isChecked(rowData) {
        if (rowData) {
            return this.dfs.isRowChecked(rowData[this.dg.idField]);
        }
        else {
            return false;
        }
    }
    /**
     * @param {?} rowData
     * @return {?}
     */
    isSelected(rowData) {
        if (rowData) {
            return this.dfs.isRowSelected(rowData[this.dg.idField]);
        }
        return false;
    }
    /**
     * @param {?} row
     * @param {?=} open
     * @return {?}
     */
    toggleGroupRow(row, open = true) {
        row.expanded = open;
        this.ps.update();
    }
    /** =================================== 分 ====== 隔 ====== 线 =================================== */
    /**
     * 获取可视区域高度
     * @return {?}
     */
    getViewPortHeight() {
        /** @type {?} */
        let viewPortHeight = this.dg.height;
        if (this.dg.showHeader) {
            viewPortHeight = viewPortHeight - this.dg.realHeaderHeight;
        }
        if ((this.dg.enableFilterRow || this.dg.enableSmartFilter) && this.dg.showFilterBar) {
            viewPortHeight -= this.dg.filterBarHeight;
        }
        if (this.dg.showRowGroupPanel) {
            viewPortHeight -= this.dg.rowGroupPanelHeight;
        }
        if (this.dg.showFooter && this.data.length) {
            viewPortHeight = viewPortHeight - this.dg.footerHeight;
        }
        if (this.dg.pagination) {
            viewPortHeight = viewPortHeight - this.dg.pagerHeight - 2;
        }
        if (this.dg.showBorder) {
            viewPortHeight -= 2;
        }
        this.viewportH = viewPortHeight;
        return viewPortHeight;
    }
    // 不折行时，所有数据的高度
    /**
     * @private
     * @return {?}
     */
    allRowsHeight() {
        /** @type {?} */
        const rowHeightpatch = 1;
        // this.dg.autoHeight ? 2 : 1;
        /** @type {?} */
        const rowHeight = this.dg.rowHeight + rowHeightpatch;
        /** @type {?} */
        let itemsCount = 0;
        if (this.dg.groupRows) {
            /** @type {?} */
            const data = this.data.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n['__group_visible__'] || n['__group_visible__'] === undefined));
            if (this.dg.groupSummaryPosition === 'inGroupRow') {
                itemsCount = data.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => !n['__group_footer__'])).length;
            }
            else {
                itemsCount = data.length;
            }
        }
        else {
            itemsCount = this.data.length;
        }
        /** @type {?} */
        let h = itemsCount * rowHeight;
        if (this.dg.autoHeight) {
            h += itemsCount;
        }
        else {
            h += 2;
        }
        return h;
    }
    /**
     * @private
     * @return {?}
     */
    getCanvasHeight() {
        /** @type {?} */
        let canvasHeight = 0;
        if (!this.data || !this.data.length) {
            this.canvasHeight = 0;
            return 0;
        }
        if (this.dg.nowrap) {
            // tfs 572022
            if (this.dg.maxHeight && this.dg.autoHeight && this.mainArea) {
                canvasHeight = Math.floor(this.mainArea.nativeElement.getBoundingClientRect().height);
            }
            else {
                canvasHeight = this.allRowsHeight();
            }
        }
        else {
            canvasHeight = this.getTrDomHeight().reduce((/**
             * @param {?} r
             * @param {?} c
             * @return {?}
             */
            (r, c) => r + c), 0);
        }
        if (!canvasHeight) {
            canvasHeight = this.viewportH;
        }
        canvasHeight = canvasHeight + (this.dg.scrollBarShowMode === 'allways' && (this.ps.instance && this.ps.instance['scrollbarXActive']) ? 18 : 0);
        this.canvasHeight = canvasHeight;
        return canvasHeight;
    }
    /**
     * @return {?}
     */
    updateCanvasHeight() {
        this.canvasHeight = this.getCanvasHeight();
    }
    /**
     * @private
     * @param {?} y
     * @return {?}
     */
    getRowFromPosition(y) {
        return Math.floor(y / (this.dg.rowHeight + 1));
    }
    /**
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    getVisibleRange(viewportTop, viewportLeft) {
        if (viewportTop == null) {
            viewportTop = this.scrollTop;
        }
        if (viewportLeft == null) {
            viewportLeft = this.scrollLeft;
        }
        return {
            top: this.getRowFromPosition(viewportTop),
            bottom: this.getRowFromPosition(viewportTop + this.viewportH) + 1,
            leftPx: viewportLeft,
            rightPx: viewportLeft + this.viewportW
        };
    }
    /**
     * @private
     * @param {?=} viewportTop
     * @param {?=} viewportLeft
     * @return {?}
     */
    getRenderedRange(viewportTop, viewportLeft) {
        /** @type {?} */
        const range = this.getVisibleRange(viewportTop, viewportLeft);
        /** @type {?} */
        const buffer = Math.round(this.viewportH / (this.dg.rowHeight + 1));
        /** @type {?} */
        const minBuffer = this.minRowBuffer;
        if (this.vScrollDir == -1) {
            range.top -= buffer;
            range.bottom += minBuffer;
        }
        else if (this.vScrollDir == 1) {
            range.top -= minBuffer;
            range.bottom += buffer;
        }
        else {
            range.top -= minBuffer;
            range.bottom += minBuffer;
        }
        range.top = Math.max(0, range.top);
        range.bottom = Math.min(this.data.length - 1, range.bottom);
        range.leftPx -= this.viewportW;
        range.rightPx += this.viewportW;
        range.leftPx = Math.max(0, range.leftPx);
        range.rightPx = Math.min(this.canvasWidth, range.rightPx);
        return range;
    }
    /**
     * @private
     * @param {?} range
     * @return {?}
     */
    renderRows(range) {
        /** @type {?} */
        const rows = [];
        /** @type {?} */
        let dataLength = this.data.length;
        /** @type {?} */
        let _data = this.data;
        // 启用分组
        if (this.dg.groupRows && this.dg.groupField) {
            _data = _data.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n['__group_visible__'] || n['__group_visible__'] === undefined));
            if (this.dg.groupSummaryPosition === 'inGroupRow') {
                _data = _data.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => !n['__group_footer__']));
            }
            dataLength = _data.length;
            this.rowsCache = {};
        }
        for (let i = range.top; i <= range.bottom; i++) {
            if (this.rowsCache[i] || (i == dataLength)) {
                continue;
            }
            rows.push(i);
            // Create an entry right away so that appendRowHtml() can
            // start populatating it.
            this.rowsCache[i] = {
                rowNode: null,
                // ColSpans of rendered cells (by column idx).
                // Can also be used for checking whether a cell has been rendered.
                cellColSpans: [],
                // Cell nodes (by column idx).  Lazy-populated by ensureCellNodesInRowsCache().
                cellNodesByColumnIdx: [],
                // Column indices of cell nodes that have been rendered, but not yet indexed in
                // cellNodesByColumnIdx.  These are in the same order as cell nodes added at the
                // end of the row.
                cellRenderQueue: []
            };
        }
        for (let i = 0, ii = rows.length; i < ii; i++) {
            this.rowsCache[rows[i]].rowNode = _data[rows[i]];
        }
        return Object.keys(this.rowsCache).map((/**
         * @param {?} n
         * @return {?}
         */
        n => this.rowsCache[n].rowNode)).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n));
    }
    /**
     * @private
     * @param {?} row
     * @return {?}
     */
    removeRowFromCache(row) {
        /** @type {?} */
        const cacheEntry = this.rowsCache[row];
        if (!cacheEntry) {
            return;
        }
        delete this.rowsCache[row];
    }
    /**
     * @private
     * @param {?} rangeToKeep
     * @return {?}
     */
    cleanupRows(rangeToKeep) {
        for (const i in this.rowsCache) {
            if (i < rangeToKeep.top || i > rangeToKeep.bottom) {
                this.removeRowFromCache(i);
            }
        }
    }
    /**
     * @param {?=} showYscrollbar
     * @return {?}
     */
    hasYScrollbar(showYscrollbar) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            showYscrollbar = showYscrollbar == undefined ? this.ps.instance.scrollbarYActive : showYscrollbar;
            /** @type {?} */
            const hasY = showYscrollbar && this.dg.scrollBarShowMode === 'allways' ? 18 : 0;
            this.dfs.updateProperty('scrollbarY', hasY);
            this.dfs.resize();
        }), 60);
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onClickScrollArrow($event) {
        const { dir, event } = $event;
        if (this.ps && this.ps.instance) {
            const { x, y } = this.ps.instance.reach;
            switch (dir) {
                case 'left':
                    if (x !== 'start') {
                        this.viewScrollContainer.nativeElement.scrollLeft = this.viewScrollContainer.nativeElement.scrollLeft - 40;
                    }
                    break;
                case 'right':
                    if (x !== 'end') {
                        this.viewScrollContainer.nativeElement.scrollLeft = this.viewScrollContainer.nativeElement.scrollLeft + 40;
                    }
                    break;
                case 'top':
                    if (y !== 'start') {
                        this.viewScrollContainer.nativeElement.scrollTop = this.viewScrollContainer.nativeElement.scrollTop - 40;
                    }
                    break;
                case 'bottom':
                    if (y !== 'end') {
                        this.viewScrollContainer.nativeElement.scrollTop = this.viewScrollContainer.nativeElement.scrollTop + 40;
                    }
                    break;
            }
            this.ps.update();
        }
    }
    /**
     * @private
     * @param {?=} detectchanges
     * @return {?}
     */
    renderData(detectchanges = true) {
        this.canvasHeight = this.getCanvasHeight();
        if (!this.dg.virtualized || this.dg.autoHeight) {
            this.rows = this.data;
        }
        else {
            /** @type {?} */
            const visible = this.getVisibleRange();
            /** @type {?} */
            const rendered = this.getRenderedRange();
            // remove rows no longer in the viewport
            this.cleanupRows(rendered);
            // render missing rows
            this.rows = this.renderRows(rendered);
            this.startRowIndex = rendered.top;
            this.lastRenderedScrollTop = this.scrollTop;
            this.lastRenderedScrollLeft = this.scrollLeft;
            this.blankTopHeight = this.startRowIndex * (this.dg.rowHeight + 1);
            this.blankBottomHeight = this.canvasHeight - this.blankTopHeight - (this.rows.length * (this.dg.rowHeight + 1));
            if (this.dg.scrollBarShowMode === 'allways' && this.ps && this.ps.instance && this.ps.instance.scrollbarXActive) {
                this.blankBottomHeight += 22;
            }
            if (detectchanges) {
                this.cd.detectChanges();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    handleScroll() {
        this.scrollTop = this.ps.elementRef.nativeElement.scrollTop;
        this.scrollLeft = this.ps.elementRef.nativeElement.scrollLeft;
        return this._handleScroll();
    }
    /**
     * @private
     * @return {?}
     */
    _handleScroll() {
        /** @type {?} */
        const viewportContainer = this.viewScrollContainer.nativeElement;
        /** @type {?} */
        let maxScrollDistanceY = viewportContainer.scrollHeight - viewportContainer.clientHeight;
        /** @type {?} */
        let maxScrollDistanceX = viewportContainer.scrollWidth - viewportContainer.clientWidth;
        // Protect against erroneous clientHeight/Width greater than scrollHeight/Width.
        // Sometimes seen in Chrome.
        maxScrollDistanceY = Math.max(0, maxScrollDistanceY);
        maxScrollDistanceX = Math.max(0, maxScrollDistanceX);
        // Ceiling the max scroll values
        if (this.scrollTop > maxScrollDistanceY) {
            this.scrollTop = maxScrollDistanceY;
        }
        if (this.scrollLeft > maxScrollDistanceX) {
            this.scrollLeft = maxScrollDistanceX;
        }
        /** @type {?} */
        const vScrollDist = Math.abs(this.scrollTop - this.prevScrollTop);
        /** @type {?} */
        const hScrollDist = Math.abs(this.scrollLeft - this.prevScrollLeft);
        if (hScrollDist) {
            this.prevScrollLeft = this.scrollLeft;
            // $viewportScrollContainerX[0].scrollLeft = scrollLeft;
            // if (hasFrozenColumns()) {
            //     if (hasFrozenRows) {
            //         $viewportTopR[0].scrollLeft = scrollLeft;
            //     }
            // } else {
            //     if (hasFrozenRows) {
            //         $viewportTopL[0].scrollLeft = scrollLeft;
            //     }
            // }
        }
        /** @type {?} */
        const lastScrollTop = this.lastRenderedScrollTop;
        if (vScrollDist) {
            this.vScrollDir = this.prevScrollTop < this.scrollTop ? 1 : -1;
            this.prevScrollTop = this.scrollTop;
            // if (hasFrozenColumns()) {
            //     if (hasFrozenRows && !options.frozenBottom) {
            //         $viewportBottomL[0].scrollTop = scrollTop;
            //     } else {
            //         $viewportTopL[0].scrollTop = scrollTop;
            //     }
            // }
            // switch virtual pages if needed
            if (vScrollDist < this.viewportH) {
                this._scrollTo(this.scrollTop);
            }
        }
        if (hScrollDist || vScrollDist) {
            /** @type {?} */
            const dx = Math.abs(this.lastRenderedScrollLeft - this.scrollLeft);
            /** @type {?} */
            const dy = Math.abs(lastScrollTop - this.scrollTop);
            if (dx > 20 || dy > 20) {
                // if rendering is forced or scrolling is small enough to be "easy", just render
                if (dy < this.viewportH && dx < this.viewportW) {
                    this.renderData();
                }
                else {
                    this.renderData();
                }
            }
        }
        if (hScrollDist || vScrollDist) {
            return true;
        }
        return false;
    }
    /**
     * @private
     * @param {?} y
     * @return {?}
     */
    _scrollTo(y) {
        /** @type {?} */
        const $viewportScrollContainerY = this.viewScrollContainer.nativeElement;
        y = Math.max(y, 0);
        y = Math.min(y, this.canvasHeight - this.viewportH);
        /** @type {?} */
        const newScrollTop = y;
        if (this.prevScrollTop != newScrollTop) {
            this.vScrollDir = (this.prevScrollTop < newScrollTop) ? 1 : -1;
            this.lastRenderedScrollTop = (this.scrollTop = this.prevScrollTop = newScrollTop);
            // if (hasFrozenColumns()) {
            //     $viewportTopL[0].scrollTop = newScrollTop;
            // }
            // if (hasFrozenRows) {
            //     $viewportBottomL[0].scrollTop = $viewportBottomR[0].scrollTop = newScrollTop;
            // }
            // $viewportScrollContainerY.scrollTop = newScrollTop;
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onMouseClick($event) {
        // document.body.click();
        /** @type {?} */
        const target = (/** @type {?} */ ($event.target));
        if (target.nodeName === 'TEXTAREA' || target.nodeName === 'INPUT') {
            return;
        }
        /** @type {?} */
        let td = target;
        if (target.nodeName !== 'TD') {
            td = target.closest('TD');
        }
        if (!td) {
            if (this.dg.isEditing() && (this.dg.exitRowEditingWhenBodyClick || this.dg.editMode == 'cell')) {
                this.dg.endEditing();
            }
            return;
        }
        /** @type {?} */
        let curT = new Date().getTime()
        //上一次时间戳
        ;
        //上一次时间戳
        /** @type {?} */
        let lastT = this['lastTapDiffTime'] || 0;
        //对上一次时间戳重新赋值
        this['lastTapDiffTime'] = curT;
        //做差
        /** @type {?} */
        let diff = curT - lastT;
        /** @type {?} */
        const isClickSameRow = (/**
         * @return {?}
         */
        () => {
            if (this._clickCellWeakMap.has(this.el.nativeElement) && td && td.parentElement === this._clickCellWeakMap.get(this.el.nativeElement)) {
                this._clickCellWeakMap.delete(this.el.nativeElement);
                return true;
            }
            return false;
        });
        /** @type {?} */
        const runTdClick = (/**
         * @return {?}
         */
        () => {
            if (td && td.selectCell) {
                td.selectCell($event, td);
            }
            else {
                this._selectRow(td, (/**
                 * @param {?} id
                 * @param {?} rowSelected
                 * @return {?}
                 */
                (id, rowSelected) => {
                    /** @type {?} */
                    let emit = !rowSelected;
                    if (this.dg.selectionMode === 'default') {
                        this.dg.clearCheckeds();
                        emit = true;
                    }
                    this.dg.selectRow(id, emit, false);
                    this.dg['updateAllCheckboxStatus']();
                }));
            }
        });
        /** @type {?} */
        const runSelectRow = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const dblclickTimer = this.dg.dblclickRow.observers.length ? 200 : 0;
            if (isClickSameRow()) {
                if (diff < dblclickTimer) {
                    this.dg.writeConsole('双击');
                    //清除上一次单击的定时器ID
                    clearTimeout(this['lastTapTimeFunc']);
                }
                else {
                    //定时器id
                    this['lastTapTimeFunc'] = setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        runTdClick();
                    }), dblclickTimer);
                }
            }
            else {
                this['lastTapTimeFunc'] = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    runTdClick();
                }), dblclickTimer ? 180 : 0);
            }
            this._clickCellWeakMap.set(this.el.nativeElement, td.parentElement);
        });
        if (!this.dg.editable && td) {
            // 解决超链点击事件，要先执行选中行
            $event.stopPropagation();
            runSelectRow();
            return;
        }
        if (this.dg.editMode === 'row') {
            if (this.dg.exitRowEditingWhenBodyClick && this.dg.isEditing()) {
                this.dg.endEditing();
            }
            this._selectRow(td, (/**
             * @param {?} id
             * @param {?} rowSelected
             * @return {?}
             */
            (id, rowSelected) => {
                this.dg.selectRow(id, !rowSelected, false);
            }));
            return;
        }
        if (!td && this.dg.currentCell) {
            td = this.dg.currentCell.cellElement;
            if (td && td.closeEdit) {
                $event.stopPropagation();
                td.closeEdit();
                return;
            }
        }
        if (td) {
            // 行禁用时
            if (this.dg.disableRow) {
                /** @type {?} */
                let rowData = null;
                /** @type {?} */
                let rowIndex = -1;
                if (td.gridCellData) {
                    rowData = td.gridCellData.rowData;
                    rowIndex = td.gridCellData.rowIndex;
                }
                else {
                    /** @type {?} */
                    const rowInfo = this.dg.getRowIdByTr(td.parentElement);
                    if (rowInfo) {
                        rowData = rowInfo.data;
                        rowIndex = rowInfo.index;
                    }
                }
                if (rowData) {
                    if (this.dg.disableRow(rowData, rowIndex)) {
                        this.dg.endEditing();
                        return;
                    }
                }
                else {
                    this.dg.writeConsole('未获取到行数据。');
                    return;
                }
            }
            $event.stopPropagation();
            if (this.dg.editable && this.dg.editMode === 'cell') {
                if (td.edit) {
                    this._selectRow(td, (/**
                     * @return {?}
                     */
                    () => {
                        td.edit($event);
                    }));
                }
                else {
                    // 允许编辑点击行号时，可以选中行
                    if (td.selectCell || td.className.indexOf('f-datagrid-cell-rownumber') > -1) {
                        runSelectRow();
                    }
                    else {
                        // 当点分组行或合计行时，须结束编辑
                        this.dg.isEditing() && this.dg.endEditing();
                    }
                }
            }
            else {
                if (td.selectCell) {
                    runSelectRow();
                }
                else {
                    if (this.dg.isEditing() && (this.dg.exitRowEditingWhenBodyClick || this.dg.editMode === 'cell')) {
                        this.dg.endEditing();
                    }
                    // this._selectRow(td, (id, rowSelected) => {
                    //     this.dg.selectRow(id, !rowSelected, false);
                    // });
                    runTdClick();
                }
            }
        }
    }
    /**
     * @private
     * @param {?} tdEl
     * @param {?} callback
     * @return {?}
     */
    _selectRow(tdEl, callback) {
        if (tdEl) {
            /** @type {?} */
            const tr = tdEl.parentElement;
            /** @type {?} */
            const rowInfo = this.dg.getRowIdByTr(tr);
            if (!rowInfo) {
                return;
            }
            const { data, index, id } = rowInfo;
            /** @type {?} */
            const rowisSelected = this.dfs.isRowSelected(id);
            this.dg._beforeSelectRow$(index, data, id).pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} t
             * @return {?}
             */
            (t) => {
                if (t) {
                    callback(id, rowisSelected);
                }
            }));
        }
    }
}
DatagridBodyComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-body',
                template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-06 07:43:07\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-26 08:20:46\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n\r\n<ng-container  *ngIf=\"(!data || !data.length) && !dg.useBlankWhenDataIsEmpty\" >\r\n\r\n    <div *ngIf=\"!dg.emptyTemplate && !dg.emptyComponentType\" class=\"d-flex flex-column f-datagrid-norecords\"\r\n        style=\"position:absolute; margin:0;left: 0; z-index: 1;justify-content: center; align-items: center;pointer-events: none;\" \r\n        [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" >\r\n        <div class=\"f-datagrid-norecords-content\" style=\"margin: 0;width: 100%;position: relative; top: 0\">\r\n            {{ 'datagrid.emptyMessage' | locale }}\r\n        </div>\r\n    </div>\r\n    <div class=\"f-datagrid-body\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" style=\"z-index: 1;\"  *ngIf=\"dg.emptyTemplate && !dg.emptyComponentType\">\r\n        <ng-container #emptyTemplate [ngTemplateOutlet]=\"dg.emptyTemplate\" ></ng-container>\r\n    </div>\r\n    <div class=\"f-datagrid-body\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" style=\"z-index: 1;\"  *ngIf=\"dg.emptyComponentType\"\r\n    component-template [ctx]=\"{ instance: dg }\" [cmpRef]=\"dg.emptyComponentType\">\r\n    </div>\r\n   \r\n</ng-container>\r\n\r\n\r\n\r\n<div class=\"f-datagrid-body\" [ngStyle]=\"bodyStyle\" [style.top.px]=\"top\" [style.width.px]=\"viewportW\" \r\n[farris-context-menus]=\"contextMenuItems\" [disabled]=\"!dg.enableContextMenu\" [activeDomName]=\"'tr'\" [beforeShowContextMenu]=\"onBeforeShowContextMenu\"\r\n[menuClass]=\"'f-datagrid-context-menu'\">\r\n\r\n    <div #viewScrollContainer [scrollbar]=\"psConfig\" #ps=\"ngxScrollbar\"\r\n        class=\"ps f-datagrid-body-wheel-area\" \r\n        style=\"width: 100%;\"\r\n        [ngStyle]=\"bodyStyle\"\r\n        (psXReachEnd)=\"onPsXReachEnd($event)\"\r\n        (psScrollY)=\"onScrollToY($event)\"\r\n        (psScrollX)=\"onScrollToX($event)\" (psXReachStart)=\"onPsXReachStart($event)\"\r\n        [style.paddingRight.px]=\"scrollbarYWidth\">\r\n       \r\n        <div class=\"f-datagrid-norecords\"  [auto-height]=\"dg.autoHeight\" [wheelHeight]=\"dg.emptyDataHeight || 240\" style=\"height: 100%\" [style.width.px]=\"canvasWidth - 2\"  *ngIf=\"!data || !data.length\">\r\n            <!-- <div *ngIf=\"!dg.emptyTemplate\" class=\"f-datagrid-norecords-content\" style=\"width: 100%\" >{{ 'datagrid.emptyMessage' | locale }}</div>\r\n            <ng-container #emptyTemplate *ngIf=\"dg.emptyTemplate\" [ngTemplateOutlet]=\"dg.emptyTemplate\" ></ng-container> -->\r\n        </div>\r\n\r\n        <div [style.display]=\"dg.flatColumns?.length ? '': 'none'\"  *ngIf=\"data && data.length && !fast\"\r\n            class=\"f-datagrid-bg\" [auto-height]=\"dg.autoHeight\" [wheelHeight]=\"canvasHeight\"\r\n            [style.height.px]=\"canvasHeight\" [style.width.px]=\"totalWidth\" >\r\n            \r\n                <div #blankTop hidefocus style=\"width: 100%\" [style.height.px]=\"blankTopHeight\"></div>\r\n                \r\n                <div #fixedLeft class=\"f-datagrid-table f-datagrid-body-fixed-left\" style=\"z-index:999\" [class.f-datagrid-fixed-left-shadow]=\"!!scrollLeft && !dg.groupRows\"\r\n                    *ngIf=\"dg.showLineNumber || dg.showCheckbox || (columnsGroup?.leftFixed && columnsGroup?.leftFixed.length)\"  [style.width.px]=\"leftFixedWidth\" \r\n                    [style.transform]=\"'translate3d('+ scrollLeft +'px, 0px, 0px)'\">\r\n\r\n                    <fixed-left-rows [columns]=\"columnsGroup?.leftFixed\" [checkedRows]=\"checkedRows\" [selectedRows]=\"selectedRows\" [data]=\"rows\"></fixed-left-rows>\r\n                </div>\r\n\r\n                <div #fixedRight class=\"f-datagrid-table f-datagrid-body-fixed-right\" \r\n                    *ngIf=\"columnsGroup?.rightFixed && columnsGroup?.rightFixed.length\"\r\n                    [class.f-datagrid-fixed-right-shadow]=\"showRightShadow\" \r\n                    style=\"border: 0\" [style.width.px]=\"rightFixedWidth\" \r\n                    [style.transform]=\"'translate3d('+ fixedRightScrollLeft +'px, 0px, 0px)'\">\r\n                    \r\n                    <datagrid-rows #rightRows [fixedRight]=\"true\" [startRowIndex]=\"startRowIndex\" \r\n                    [width]=\"columnsGroup?.rightFixedWidth\"\r\n                    [columns]=\"columnsGroup?.rightFixed\" [data]=\"rows\"></datagrid-rows>\r\n                </div>\r\n\r\n                <div #main [style.width.px]=\"colsWidth\" style=\"position: relative;\" [style.left.px]=\"leftFixedWidth\" class=\"f-datagrid-table f-datagrid-body-center\">\r\n                    <datagrid-rows #mainRows [hasFixedColumns]=\"columnsGroup?.leftFixed && columnsGroup?.leftFixed?.length\" [startRowIndex]=\"startRowIndex\" [columns]=\"columnsGroup?.normalColumns\" [data]=\"rows\"></datagrid-rows>\r\n                </div>\r\n\r\n                <div hidefocus style=\"width: 100%\" [style.height.px]=\"blankBottomHeight\"></div>\r\n\r\n        </div>\r\n\r\n\r\n        <div [style.display]=\"dg.flatColumns?.length ? '': 'none'\"  *ngIf=\"data && data.length && fast\"\r\n        class=\"f-datagrid-bg\" [auto-height]=\"dg.autoHeight\" [wheelHeight]=\"canvasHeight\"\r\n        [style.height.px]=\"canvasHeight\" [style.width.px]=\"totalWidth\" >\r\n        \r\n                <div #blankTop hidefocus style=\"width: 100%\" [style.height.px]=\"blankTopHeight\"></div>\r\n\r\n                <div #main style=\"position: relative;\"  class=\"f-datagrid-table f-datagrid-body-center\">\r\n                    <datagrid-rows #mainRows [hasFixedColumns]=\"columnsGroup?.leftFixed && columnsGroup?.leftFixed?.length\"  [startRowIndex]=\"startRowIndex\" [columns]=\"columnsGroup?.columns\" [data]=\"rows\"></datagrid-rows>\r\n                </div>\r\n\r\n                <div hidefocus style=\"width: 100%\" [style.height.px]=\"blankBottomHeight\"></div>\r\n\r\n        </div>\r\n    </div>\r\n\r\n    <scrollbar-arrows [scrollbarXActive]=\"ps.instance && ps.instance.scrollbarXActive\" [scrollbarYActive]=\"ps.instance && ps.instance.scrollbarYActive\" \r\n    *ngIf=\"dg.scrollBarShowMode === 'allways' && dg.showScrollArrow\" (hasYScrollbar)=\"hasYScrollbar($event)\" (scrollMoveTo)=\"onClickScrollArrow($event)\"\r\n    [reachX]=\"ps.instance && ps.instance.reach.x\" [reachY]=\"ps.instance && ps.instance.reach.y\"></scrollbar-arrows>\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n",
                changeDetection: ChangeDetectionStrategy.OnPush
            }] }
];
/** @nocollapse */
DatagridBodyComponent.ctorParameters = () => [
    { type: Injector },
    { type: ApplicationRef },
    { type: DatagridComponent, decorators: [{ type: Optional }] },
    { type: ChangeDetectorRef },
    { type: ElementRef }
];
DatagridBodyComponent.propDecorators = {
    footerHeight: [{ type: Input }],
    canvasWidth: [{ type: Input }],
    columnsGroup: [{ type: Input }],
    topHideHeight: [{ type: Input }],
    bottomHideHeight: [{ type: Input }],
    startRowIndex: [{ type: Input }],
    data: [{ type: Input }],
    dataChange: [{ type: Output }],
    scrollBarMode: [{ type: Input }],
    contextMenuItems: [{ type: Input }],
    checkedRows: [{ type: Input }],
    fast: [{ type: Input }],
    ps: [{ type: ViewChild, args: ['ps',] }],
    tableRowsCmp: [{ type: ViewChild, args: ['mainRows',] }],
    rightRowsCmp: [{ type: ViewChild, args: ['rightRows',] }],
    fixedLeftEl: [{ type: ViewChild, args: ['fixedLeft',] }],
    fixedRightEl: [{ type: ViewChild, args: ['fixedRight',] }],
    mainArea: [{ type: ViewChild, args: ['main',] }],
    viewScrollContainer: [{ type: ViewChild, args: ['viewScrollContainer',] }]
};
if (false) {
    /** @type {?} */
    DatagridBodyComponent.prototype.psConfig;
    /** @type {?} */
    DatagridBodyComponent.prototype.top;
    /** @type {?} */
    DatagridBodyComponent.prototype.height;
    /** @type {?} */
    DatagridBodyComponent.prototype.width;
    /** @type {?} */
    DatagridBodyComponent.prototype.colsWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.totalWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.leftFixedWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.rightFixedWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.rowHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.bodyStyle;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollTop;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.deltaTopHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.wheelWidth;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._fixedRightScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.maxScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.showRightShadow;
    /** @type {?} */
    DatagridBodyComponent.prototype.footerHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.canvasWidth;
    /** @type {?} */
    DatagridBodyComponent.prototype.columnsGroup;
    /** @type {?} */
    DatagridBodyComponent.prototype.topHideHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.bottomHideHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.startRowIndex;
    /** @type {?} */
    DatagridBodyComponent.prototype.data;
    /** @type {?} */
    DatagridBodyComponent.prototype.dataChange;
    /** @type {?} */
    DatagridBodyComponent.prototype.scrollBarMode;
    /** @type {?} */
    DatagridBodyComponent.prototype.contextMenuItems;
    /** @type {?} */
    DatagridBodyComponent.prototype.checkedRows;
    /**
     * 性能优化版，默认为 false
     * @type {?}
     */
    DatagridBodyComponent.prototype.fast;
    /** @type {?} */
    DatagridBodyComponent.prototype.ps;
    /** @type {?} */
    DatagridBodyComponent.prototype.tableRowsCmp;
    /** @type {?} */
    DatagridBodyComponent.prototype.rightRowsCmp;
    /** @type {?} */
    DatagridBodyComponent.prototype.fixedLeftEl;
    /** @type {?} */
    DatagridBodyComponent.prototype.fixedRightEl;
    /** @type {?} */
    DatagridBodyComponent.prototype.mainArea;
    /** @type {?} */
    DatagridBodyComponent.prototype.viewScrollContainer;
    /** @type {?} */
    DatagridBodyComponent.prototype.visibleContextMenus;
    /** @type {?} */
    DatagridBodyComponent.prototype.currentRowId;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._hoverRowIndex;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.gridSizeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.columnResizeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.onDataSourceChangeSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.selectRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.unselectRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.selectAllSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.checkRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.clearSelectionsSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.checkAllSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.uncheckRowSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.clearCheckedsSubscribe;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.subscriptions;
    /** @type {?} */
    DatagridBodyComponent.prototype.dfs;
    /** @type {?} */
    DatagridBodyComponent.prototype.dgs;
    /** @type {?} */
    DatagridBodyComponent.prototype.ngZone;
    /** @type {?} */
    DatagridBodyComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.viewportH;
    /** @type {?} */
    DatagridBodyComponent.prototype.viewportW;
    /** @type {?} */
    DatagridBodyComponent.prototype.canvasHeight;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.minRowBuffer;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.vScrollDir;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.rowsCache;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.lastRenderedScrollTop;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.lastRenderedScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.prevScrollTop;
    /** @type {?} */
    DatagridBodyComponent.prototype.prevScrollLeft;
    /** @type {?} */
    DatagridBodyComponent.prototype.rows;
    /** @type {?} */
    DatagridBodyComponent.prototype.blankTopHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.blankBottomHeight;
    /** @type {?} */
    DatagridBodyComponent.prototype.cellContentFormatter;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.__triggerBodyClickEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._onMouseClick;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._scrollTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._scrollXTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.resizeObserverTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype._clickCellWeakMap;
    /** @type {?} */
    DatagridBodyComponent.prototype.onBeforeShowContextMenu;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.app;
    /** @type {?} */
    DatagridBodyComponent.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridBodyComponent.prototype.el;
}
//# sourceMappingURL=data:application/json;base64,