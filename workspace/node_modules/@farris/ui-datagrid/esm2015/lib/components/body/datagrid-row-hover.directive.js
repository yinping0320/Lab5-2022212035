/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-09-26 17:17:32
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Input, NgZone, Renderer2, ElementRef, Inject, forwardRef, ChangeDetectorRef } from '@angular/core';
import { DatagridBodyComponent } from './datagrid-body.component';
import { DatagridComponent } from './../../datagrid.component';
import { Utils } from './../../utils/utils';
export class DatagridRowHoverDirective {
    /**
     * @param {?} dg
     * @param {?} dgb
     * @param {?} cd
     * @param {?} el
     * @param {?} zone
     * @param {?} render
     */
    constructor(dg, dgb, cd, el, zone, render) {
        this.dg = dg;
        this.dgb = dgb;
        this.cd = cd;
        this.el = el;
        this.zone = zone;
        this.render = render;
        this._mouseenter = null;
        this._mouseleave = null;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (this.dg.rowHover && !this.dg.fast) {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._mouseenter = Utils.on(this.el.nativeElement, 'mouseenter', this.onmouseenter.bind(this), { target: '.f-datagrid-body-row', options: { capture: true } });
                this._mouseleave = Utils.on(this.el.nativeElement, 'mouseleave', this.onmouseleave.bind(this), { target: '.f-datagrid-body-row', options: { capture: true } });
            }));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this._mouseenter) {
            this._mouseenter();
        }
        if (this._mouseleave) {
            this._mouseleave();
        }
    }
    // @HostListener('mouseenter')
    /**
     * @param {?} event
     * @return {?}
     */
    onmouseenter(event) {
        this.setRowHoverCls(event);
    }
    // @HostListener('mouseleave')
    /**
     * @param {?} event
     * @return {?}
     */
    onmouseleave(event) {
        this.setRowHoverCls(event, false);
    }
    /**
     * @param {?} event
     * @param {?=} hover
     * @return {?}
     */
    setRowHoverCls(event, hover = true) {
        if (!this.dg.rowHover) {
            return;
        }
        if (!event.target.matches('.f-datagrid-body-row')) {
            return;
        }
        this.rowIndex = event.target.getAttribute('index');
        /** @type {?} */
        const leftTableCls = 'f-datagrid-body-fixed-left';
        /** @type {?} */
        const rightTableCls = 'f-datagrid-body-fixed-right';
        /** @type {?} */
        const centerTableCls = 'f-datagrid-body-center';
        /** @type {?} */
        const body = this.dg.el.nativeElement.querySelector('.f-datagrid-body');
        if (!body) {
            return;
        }
        /** @type {?} */
        const leftTableDom = body.querySelector(`.${leftTableCls}`);
        /** @type {?} */
        const rightTableDom = body.querySelector(`.${rightTableCls}`);
        /** @type {?} */
        const centerTableDom = body.querySelector(`.${centerTableCls}`);
        /** @type {?} */
        const method = hover ? 'addClass' : 'removeClass';
        /** @type {?} */
        const trSelector = `tr[index="${this.rowIndex}"]`;
        /** @type {?} */
        const dom = this.el.nativeElement.closest('div');
        if (dom && dom.className) {
            /** @type {?} */
            const trDom = centerTableDom.querySelector(trSelector);
            if (!trDom) {
                return;
            }
            if (trDom.className.indexOf('f-datagrid-disable-row') > -1) {
                return;
            }
            /** @type {?} */
            let ltr = null;
            /** @type {?} */
            let rtr = null;
            if (rightTableDom) {
                rtr = rightTableDom.querySelector(trSelector);
            }
            if (leftTableDom) {
                ltr = leftTableDom.querySelector(trSelector);
            }
            if (leftTableDom && ltr) {
                this.render[method](ltr, this.dg.hoverRowCls);
            }
            if (rightTableDom && rtr) {
                this.render[method](rtr, this.dg.hoverRowCls);
            }
            this.render[method](trDom, this.dg.hoverRowCls);
        }
    }
}
DatagridRowHoverDirective.decorators = [
    { type: Directive, args: [{
                selector: '[row-hover]',
                exportAs: 'rowHover'
            },] }
];
/** @nocollapse */
DatagridRowHoverDirective.ctorParameters = () => [
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: DatagridBodyComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridBodyComponent)),] }] },
    { type: ChangeDetectorRef },
    { type: ElementRef },
    { type: NgZone },
    { type: Renderer2 }
];
DatagridRowHoverDirective.propDecorators = {
    rowIndex: [{ type: Input }],
    rowData: [{ type: Input, args: ['row-hover',] }]
};
if (false) {
    /** @type {?} */
    DatagridRowHoverDirective.prototype.rowIndex;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.rowData;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype._mouseenter;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype._mouseleave;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.dg;
    /** @type {?} */
    DatagridRowHoverDirective.prototype.dgb;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowHoverDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,