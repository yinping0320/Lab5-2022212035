/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 08:19:06
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, ViewChild, ElementRef, Injector, Inject, forwardRef } from '@angular/core';
import { ChangeDetectorRef, NgZone } from '@angular/core';
import { Subject } from 'rxjs';
import { TR_ID_PREFIX } from '../../types';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { IS_GROUP_ROW_FIELD, GROUP_ROW_FIELD, IS_GROUP_FOOTER_ROW_FIELD, GROUP_VISIBLE_FIELD, GROUP_LEVEL_FIELD } from '../../services/state';
import { delay, takeUntil } from 'rxjs/operators';
import { Utils } from '../../utils/utils';
export class DatagridRowsComponent {
    /**
     * @param {?} cd
     * @param {?} dg
     * @param {?} dgb
     * @param {?} el
     * @param {?} injector
     * @param {?} ngZone
     */
    constructor(cd, dg, dgb, el, injector, ngZone) {
        this.cd = cd;
        this.dg = dg;
        this.dgb = dgb;
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        /**
         * 是否为右侧固定列。默认为 false
         */
        this.fixedRight = false;
        /**
         * 是否有左侧固定列
         */
        this.hasFixedColumns = false;
        this.isGroupRow = IS_GROUP_ROW_FIELD;
        /**
         * 分组行父ID字段
         */
        this.groupRow = GROUP_ROW_FIELD;
        this.isGroupFooter = IS_GROUP_FOOTER_ROW_FIELD;
        this.visible = GROUP_VISIBLE_FIELD;
        this.groupLevelField = GROUP_LEVEL_FIELD;
        this.filterConditions = '';
        this.checkedRows = [];
        this.ro = null;
        this.subscriptions = [];
        this.destroy$ = new Subject();
    }
    /**
     * @return {?}
     */
    get groupSummaryDataInGroupRow() {
        return this.dg.groupSummaryPosition === 'inGroupRow';
    }
    /**
     * @private
     * @return {?}
     */
    listenEvent() {
        /** @type {?} */
        const _s3 = this.dg.dgs.setSelecedRow.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} r
         * @return {?}
         */
        (r) => {
            this.detectChanges();
        }));
        this.subscriptions.push(_s3);
        /** @type {?} */
        const _s4 = this.dg.dfs.rowAppend$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.detectChanges();
        }));
        this.subscriptions.push(_s4);
        /** @type {?} */
        const _s5 = this.dg.dfs.rowUpdate$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} row
         * @return {?}
         */
        (row) => {
            if (row) {
                if (this.dg.groupRows && this.dg.groupFooter && this.dg.groupField) {
                    /** @type {?} */
                    let groupRowId = row.data[this.groupRow];
                    if (groupRowId === undefined) {
                        /** @type {?} */
                        const _row = this.dg.getRows().find((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.id === this.dg.dfs.primaryId(row.data)));
                        if (_row) {
                            groupRowId = this.dg.commonUtils.getValue(this.groupRow, _row);
                        }
                    }
                    if (groupRowId !== '' && groupRowId !== null) {
                        this.dg.dfs.updateGroupFooter(groupRowId);
                    }
                    else {
                        this.dg.writeConsole('未获取到groupRowId。', 'error');
                    }
                }
            }
        }));
        this.subscriptions.push(_s5);
        this.scrollToCurrentRowSubscription = this.dg.dgs.scrollToCurrentRow.pipe(delay(50)).subscribe((/**
         * @return {?}
         */
        () => {
            this.scrollToFirstSelectedRow();
            /** @type {?} */
            const scrollInfo = this.dg.dfs.getState().scrollInfo;
            this.dg.scrollInstance.scrollToLeft();
            if (this.dg.enableFilterRow && scrollInfo && scrollInfo.x) {
                this.dg.dgs.closeFilterPanel.emit();
            }
        }));
        this.dg.dfs.checkRow$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.checkedRows = this.dg.dfs.getCheckeds();
            this.detectChanges();
        }));
        this.dg.dfs.clearCheckeds$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.checkedRows = this.dg.dfs.getCheckeds();
            this.detectChanges();
        }));
        this.dg.dgs.toggleGroupRow$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ expand, groupRowIndex }) => {
            this._toggleGroupRow(groupRowIndex, expand);
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.dgb.ps) {
                    this.dgb.ps.update();
                }
            }), 10);
        }));
        this.dg.dgs.toggleAllGroupRows$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ({ expand }) => {
            this.toggleAllGroupRows(expand);
            // setTimeout(() => {
            //     this.dg.scrollToTop();
            // });
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.dgb.ps) {
                    this.dgb.ps.update();
                }
            }), 10);
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.listenEvent();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.unSubscriptions();
    }
    /**
     * @private
     * @param {?} groupRowIndex
     * @param {?=} expand
     * @return {?}
     */
    _toggleGroupRow(groupRowIndex, expand = true) {
        if (groupRowIndex > -1) {
            /** @type {?} */
            const allRows = this.dg.getRows();
            /** @type {?} */
            const groupRows = allRows.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n[IS_GROUP_ROW_FIELD]));
            /** @type {?} */
            let gr = groupRows[groupRowIndex];
            if (!gr) {
                gr = allRows[groupRowIndex];
            }
            if (gr) {
                this.toggleGroupRow(gr, groupRowIndex, expand);
            }
        }
    }
    /**
     * @private
     * @param {?=} expand
     * @return {?}
     */
    toggleAllGroupRows(expand = true) {
        /** @type {?} */
        const groupRows = this.data.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n[IS_GROUP_ROW_FIELD]));
        groupRows.forEach((/**
         * @param {?} gr
         * @return {?}
         */
        gr => {
            gr.expanded = expand;
            this.dg.dfs.setGroupRowsVisible(gr, expand, false);
        }));
        this.cd.detectChanges();
        if (expand) {
            this.dg.dfs.expandGroupRow.emit();
        }
        else {
            this.dg.dfs.collapseGroupRow.emit();
        }
    }
    /**
     * @private
     * @return {?}
     */
    unSubscriptions() {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.scrollToCurrentRowSubscription) {
            this.scrollToCurrentRowSubscription.unsubscribe();
            this.scrollToCurrentRowSubscription = null;
        }
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => n.unsubscribe));
            this.subscriptions = [];
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (!this.dg.nowrap) {
                    // this.dgb.updateRowHeight();
                    this.dg.calculateGridSize();
                }
            }), 100);
        }));
    }
    /**
     * @param {?} field
     * @return {?}
     */
    getGroupColumn(field) {
        return this.dg.flatColumns.find((/**
         * @param {?} col
         * @return {?}
         */
        col => col.field === field));
    }
    /**
     * @private
     * @return {?}
     */
    detectChanges() {
        if (!this.cd['destroyed']) {
            this.cd.detectChanges();
        }
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    trackByField(index, item) {
        return item.field;
    }
    /**
     * @param {?} el
     * @return {?}
     */
    isElementInViewport(el) {
        /** @type {?} */
        const container = this.dgb.ps.instance.element.getBoundingClientRect();
        /** @type {?} */
        const box = el.getBoundingClientRect();
        /** @type {?} */
        const top = (box.top <= container.height + container.top);
        /** @type {?} */
        const bottom = (box.bottom <= (container.bottom));
        return (top && bottom);
    }
    /**
     * @private
     * @param {?} tr
     * @param {?} rowIndex
     * @return {?}
     */
    _elementIntoView(tr, rowIndex) {
        if (tr) {
            if (tr.scrollIntoViewIfNeeded) {
                tr.scrollIntoViewIfNeeded(false);
            }
            else {
                tr.scrollIntoView({ block: 'nearest', inline: 'nearest' });
            }
        }
        else {
            /** @type {?} */
            const currentTrTop = rowIndex * this.dg.rowHeight;
            if (currentTrTop) {
                this.dg.scrollInstance.scrollToY(currentTrTop);
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    scrollToFirstSelectedRow() {
        if (this.dg.selectedRow) {
            /** @type {?} */
            const rowIndex = this.dg.selectedRow.index;
            /** @type {?} */
            const rowId = TR_ID_PREFIX + this.dg.selectedRow.id;
            // const tr: any = document.querySelector(rowId);
            /** @type {?} */
            const tr = Utils.getTrDomById(rowId, document);
            if (rowIndex === 0) {
                if (this.dgb.ps && this.dgb.ps.instance) {
                    if (this.dgb.ps.instance.element.scrollTop === 0) {
                        return;
                    }
                    else {
                        this.dg.scrollInstance.scrollToY(0);
                        return;
                    }
                }
            }
            const { top, bottom } = this.dgb.getVisibleRange();
            if (rowIndex === top || rowIndex === bottom) {
                this._elementIntoView(tr, rowIndex);
                return;
            }
            else {
                if (rowIndex > top && rowIndex < bottom && tr && this.isElementInViewport(tr)) {
                    return;
                }
            }
            this._elementIntoView(tr, rowIndex);
        }
    }
    /**
     * @param {?} row
     * @param {?} index
     * @param {?} open
     * @param {?=} $event
     * @return {?}
     */
    toggleGroupRow(row, index, open, $event) {
        if ($event) {
            $event.stopPropagation();
        }
        row.expanded = open;
        this.dg.dfs.setGroupRowsVisible(row, open);
    }
    /**
     * @private
     * @param {?} field
     * @param {?} rowIndex
     * @return {?}
     */
    mergeInfo(field, rowIndex) {
        return this.dg.dgs.getMergeInfo(rowIndex, field, this.dg.mergeCellInfo);
    }
    /**
     * @param {?} col
     * @param {?} rowIndex
     * @return {?}
     */
    showCell(col, rowIndex) {
        /** @type {?} */
        const mergeInfo = this.mergeInfo(col.field, rowIndex);
        /** @type {?} */
        let show = true;
        if (mergeInfo) {
            show = mergeInfo.show;
        }
        return show;
    }
    /**
     * @param {?} col
     * @param {?} rowIndex
     * @return {?}
     */
    getRowSpan(col, rowIndex) {
        /** @type {?} */
        const mergeInfo = this.mergeInfo(col.field, rowIndex);
        if (!mergeInfo) {
            return 1;
        }
        if (this.showCell(col, rowIndex)) {
            col.readonly = true;
            return mergeInfo.rowspan;
        }
        else {
            return 1;
        }
    }
    /**
     * @param {?} groupId
     * @return {?}
     */
    getGroupSummaryData(groupId) {
        /** @type {?} */
        const _data = this.dg.getRows();
        if (_data && _data.length) {
            /** @type {?} */
            const row = this.dg.getRows().find((/**
             * @param {?} n
             * @return {?}
             */
            n => n['__group_parent_id__'] === groupId && n['__group_footer__']));
            if (row) {
                return row.data;
            }
        }
        return null;
    }
}
DatagridRowsComponent.decorators = [
    { type: Component, args: [{
                selector: 'datagrid-rows',
                template: "<!--\r\n * @Author: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @Date: 2019-08-06 07:43:07\r\n * @LastEditors: \u75AF\u72C2\u79C0\u624D(Lucas Huang)\r\n * @LastEditTime: 2019-11-19 20:34:12\r\n * @QQ: 1055818239\r\n * @Version: v0.0.1\r\n -->\r\n<!-- [class.f-datagrid-row-hover]=\"dg.rowHover && dgb.hoverRowIndex === hoverRow.rowIndex\" \r\n        [class.f-datagrid-row-odd]=\"odd && dg.striped\"\r\n        [class.f-datagrid-row-even]=\"!odd && dg.striped\"\r\n-->\r\n\r\n<ng-template #grouprowControl let-ctx>\r\n    <div class=\"d-flex flex-row\" style=\"align-items: center; white-space: nowrap;\">\r\n        <span class=\"f-icon f-datagrid-group-expanded ml-1 mr-1\" *ngIf=\"!ctx.row.expanded\" (click)=\"toggleGroupRow(ctx.row, ctx.index, true, $event)\"></span>\r\n        <span class=\"f-icon f-datagrid-group-collapsed ml-1 mr-1\" *ngIf=\"ctx.row.expanded\" (click)=\"toggleGroupRow(ctx.row, ctx.index, false, $event)\"></span>\r\n        <span class=\"f-utils-fill group-row-text\" *ngIf=\"dg.groupFormatter\" [innerHTML]=\"ctx.row | formatGroupRow: '': dg.groupFormatter| safe: 'html' \"></span>\r\n        <span class=\"f-utils-fill group-row-text\" *ngIf=\"!dg.groupFormatter\"> {{ ctx.row | formatGroupRow: getGroupColumn(ctx.row.field)  }} </span>\r\n    </div>\r\n</ng-template>\r\n\r\n<table #tableEl style=\"border:0; width: 100%\" class=\"f-datagrid-rows\" cellpadding=0 cellspacing=\"0\" row-hover row-dblclick\r\n[ngStyle]=\"fixedRight && width ? { width: width +'px' }: {}\">\r\n    <colgroup>\r\n        <col width=\"36px\" *ngIf=\"dg.showCheckbox && dg.fast\">\r\n        <col [width]=\"dg?.lineNumberWidth + 'px'\" *ngIf=\"dg.showLineNumber && dg.fast\">\r\n        <col *ngFor=\"let col of columns\" [width]=\"col.width + 'px'\" />\r\n    </colgroup>\r\n\r\n    <tbody *ngIf=\"dg.groupRows && dg.groupField\" id=\"{{'row-group-tbody_'+ dg.id}}\" >\r\n        <ng-container *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\">\r\n            <tr *ngIf=\"row[isGroupRow]\" class=\"f-datagrid-body-row f-datagrid-group-row\" [style.display]=\"row[visible] ? '': 'none'\" [group-row]=\"row\" [attr.group-index]=\"i\" [attr.expand]=\"row.expanded || true\" [attr.id]=\"row | rowDataId: false:false: true\">\r\n                <td *ngIf=\"dg.showCheckbox && dg.fast\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center; left: 0\"\r\n                    [class.f-datagrid-fast__fixed-left]=\"dg.fast\" [class.l-shadow-col]=\"dg.fast && !dg.showLineNumber && !hasFixedColumns\">\r\n                    <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                        <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                            [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                    </div>\r\n                </td>\r\n        \r\n                <td *ngIf=\"dg.showLineNumber && dg.fast\" [style.width.px]=\"dg.lineNumberWidth\"  class=\"f-datagrid-cell f-datagrid-cell-rownumber\"\r\n                    [class.f-datagrid-fast__fixed-left]=\"dg.fast\"  [style.left.px]=\"dg.showCheckbox ? 36: 0\" [class.l-shadow-col]=\"dg.fast && !hasFixedColumns\">\r\n                    <div class=\"f-datagrid-cell-content\">\r\n                        {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + i + 1 }}\r\n                    </div>\r\n                </td>\r\n\r\n\r\n                <td *ngIf=\"!fixedRight && !groupSummaryDataInGroupRow && !hasFixedColumns\" class=\"f-datagrid-cell f-dg-groupcell\" [attr.colspan]=\"hasFixedColumns? columns.length: row['colspan']\" [style.paddingLeft.px]=\"row[groupLevelField] * 15\">\r\n                    <ng-container [ngTemplateOutlet]=\"grouprowControl\" [ngTemplateOutletContext]=\"{$implicit: { row: row, index: i }}\"></ng-container>\r\n                </td>\r\n                \r\n                <td *ngIf=\"!fixedRight && !groupSummaryDataInGroupRow && hasFixedColumns\" class=\"f-datagrid-cell f-dg-groupcell\" [attr.colspan]=\"hasFixedColumns? columns.length: row['colspan']\" [style.paddingLeft.px]=\"row[groupLevelField] * 15\">\r\n                </td>\r\n\r\n                <ng-container *ngIf=\"groupSummaryDataInGroupRow && !fixedRight\">\r\n\r\n                    <ng-container *ngFor=\"let col of columns; trackBy: trackByField; let ci = index;\">\r\n                        <td *ngIf=\"!fixedRight && ci === 0 && !hasFixedColumns\" class=\"f-datagrid-cell\" [style.paddingLeft.px]=\"row[groupLevelField] * 15\" [attr.colspan]=\"dg.groupCellColSpan\">\r\n                            <ng-container [ngTemplateOutlet]=\"grouprowControl\" [ngTemplateOutletContext]=\"{$implicit: { row: row, index: i }}\"></ng-container>\r\n                        </td>\r\n                             \r\n                        <td class=\"f-datagrid-cell\"  \r\n                            *ngIf=\"!hasFixedColumns ?ci > 0 && ci >= dg.groupCellColSpan: true\"\r\n                            [attr.field]=\"col.field\" \r\n                            [attr.align]=\" col.groupFooter?.align || col.align\">\r\n                            <div class=\"f-datagrid-cell-content\" [innerHTML]=\"col | formatCellData: getGroupSummaryData(row.id) : true: false | safe: 'html'\"></div>\r\n                        </td>\r\n                    </ng-container>\r\n                </ng-container>\r\n\r\n                <td *ngIf=\"fixedRight\" class=\"f-datagrid-cell\" [attr.colspan]=\"columns.length\"></td>\r\n            </tr>\r\n\r\n            <ng-container *ngIf=\"!row[isGroupRow]\">\r\n                <ng-container *ngIf=\"!row[isGroupFooter]\">\r\n                    <tr class=\"f-datagrid-body-row\"\r\n                        [attr.id]=\"row | rowDataId:fixedRight\"\r\n                        [attr.index]=\"startRowIndex + i\"\r\n                        [grid-row]=\"row\"\r\n                        [editable]=\"dg.editable\"\r\n                        [rowIndex]=\"startRowIndex + i\" #dr=\"gridRow\"\r\n                        [formGroup]=\"dr.form\"\r\n                        [class.f-datagrid-row-selected]=\"row | rowIsSelected\"\r\n                        [style.display]=\"row[visible] ? '': 'none'\"\r\n                        [class.f-datagrid-disable-row]=\"dr.disabled\">\r\n\r\n                        <td *ngIf=\"dg.showCheckbox && dg.fast\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center; left: 0\"\r\n                        [class.f-datagrid-fast__fixed-left]=\"dg.fast\" [class.l-shadow-col]=\"dg.fast && !dg.showLineNumber && !hasFixedColumns\">\r\n                            <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                            <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                                [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                            </div>\r\n                        </td>\r\n            \r\n                        <td *ngIf=\"dg.showLineNumber && dg.fast\" [style.width.px]=\"dg.lineNumberWidth\"  class=\"f-datagrid-cell f-datagrid-cell-rownumber\"\r\n                        [class.f-datagrid-fast__fixed-left]=\"dg.fast\"  [style.left.px]=\"dg.showCheckbox ? 36: 0\" [class.l-shadow-col]=\"dg.fast && !hasFixedColumns\">\r\n                            <div class=\"f-datagrid-cell-content\">\r\n                                {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + i + 1 }}\r\n                            </div>\r\n                        </td>\r\n\r\n\r\n                        <td class=\"f-datagrid-cell\"\r\n                            [cell-editable]=\"row\"\r\n                            [column]=\"col\"\r\n                            [attr.field]=\"col.field\" #cell\r\n                            [style.paddingLeft.px]=\"(ci === 0 && !fixedRight && !hasFixedColumns) ? row[groupLevelField] * 10 + 25 : 0\"\r\n                            [attr.align]=\"col.align\"\r\n                            [class.f-datagrid-fast__fixed-left]=\"dg.fast && col.fixed && col.fixed === 'left'\"\r\n                            [class.f-datagrid-fast__fixed-right]=\"dg.fast && col.fixed && col.fixed === 'right'\"\r\n                            [class.r-shadow-col]=\"col.rightShadowCol\"\r\n                            [class.l-shadow-col]=\"col.leftShadowCol\"\r\n                            *ngFor=\"let col of columns; trackBy: trackByField; let ci = index;\">\r\n                            <grid-body-cell\r\n                                [width]=\"col.width\"\r\n                                [height]=\"dg.rowHeight\"\r\n                                [column]=\"col\"\r\n                                [rowData]=\"row\"\r\n                                [rowIndex]=\"startRowIndex + i\">\r\n                            </grid-body-cell>\r\n                        </td>\r\n                    </tr>\r\n                </ng-container>\r\n\r\n                <ng-container *ngIf=\"row[isGroupFooter] && !groupSummaryDataInGroupRow\">\r\n                    <tr class=\"f-datagrid-body-row f-datagrid-group-footer\" \r\n                        *ngIf=\"!row[isGroupRow]\"\r\n                        [attr.index]=\"startRowIndex + i\"\r\n                        [group-footer-row-styler]=\"row\"\r\n                        [style.display]=\"row[visible] ? '': 'none'\">\r\n                        <td class=\"f-datagrid-cell\"\r\n                            [attr.field]=\"col.field\" \r\n                            [attr.colspan]=\"col.groupFooter?.colspan || 1\"\r\n                            [attr.align]=\" col.groupFooter?.align || col.align\"\r\n                            [style.display]=\"col.groupFooter?.visible === false ? 'none': ''\"\r\n                            [style.paddingLeft.px]=\"(ci === 0 && !fixedRight && !hasFixedColumns)? row[groupLevelField] * 10 + 25 : 0\"\r\n                            footer-cell-styler [column]=\"col\" [rowData]=\"row\" [isGroupFooter]=\"true\"\r\n                            *ngFor=\"let col of columns; trackBy: trackByField; let ci = index;\">\r\n                            <div class=\"f-datagrid-cell-content\" [innerHTML]=\"col | formatCellData: row.data : true: false | safe: 'html'\"></div>\r\n                        </td>\r\n                    </tr>\r\n                </ng-container>\r\n\r\n            </ng-container>\r\n        </ng-container>\r\n\r\n    </tbody>\r\n    <tbody *ngIf=\"!dg.groupRows || !dg.groupField\" id=\"{{ (fixedRight? 'right-tbody_' : 'normal-rows-tbody_')+ dg.id}}\">\r\n\r\n        <ng-container *ngIf=\"!dg.mergeCell\">\r\n            <tr class=\"f-datagrid-body-row\"\r\n                [attr.id]=\"row | rowDataId: fixedRight\"\r\n                [attr.index]=\"startRowIndex + i\"\r\n                [grid-row]=\"row\"\r\n                [editable]=\"dg.editable\"\r\n                [rowIndex]=\"startRowIndex + i\" #dr=\"gridRow\"\r\n                [formGroup]=\"dr.form\"\r\n                #tr\r\n                [class.f-datagrid-row-selected]=\"row | rowIsSelected\"\r\n                [class.f-datagrid-disable-row]=\"dr.disabled\"\r\n                *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\"\r\n                >\r\n\r\n                    <td *ngIf=\"dg.showCheckbox && dg.fast\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center; left: 0\"\r\n                    [class.f-datagrid-fast__fixed-left]=\"dg.fast\" [class.l-shadow-col]=\"dg.fast && !dg.showLineNumber && !hasFixedColumns\">\r\n                        <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                        <datagrid-checkbox [disabled]=\"row | disableRow: dgb.startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                            [rowIndex]=\"dgb.startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                        </div>\r\n                    </td>\r\n        \r\n                    <td *ngIf=\"dg.showLineNumber && dg.fast\" [style.width.px]=\"dg.lineNumberWidth\"  class=\"f-datagrid-cell f-datagrid-cell-rownumber\"\r\n                    [class.f-datagrid-fast__fixed-left]=\"dg.fast\"  [style.left.px]=\"dg.showCheckbox ? 36: 0\" [class.l-shadow-col]=\"dg.fast && !hasFixedColumns\">\r\n                        <div class=\"f-datagrid-cell-content\">\r\n                            {{ dg.pageSize * (dg.pageIndex-1) + dgb.startRowIndex + i + 1 }}\r\n                        </div>\r\n                    </td>\r\n\r\n                    <td class=\"f-datagrid-cell\"\r\n                        [attr.field]=\"col.field\" \r\n                        [attr.align]=\"col.align\"\r\n                        [style.vertical-align]=\"col.valign\"\r\n                        [cell-editable]=\"row\"\r\n                        [column]=\"col\"  #editorcell=\"cellEditable\"\r\n                        [class.cell-readonly]=\"col | cellReadonly: row: dg\"\r\n                        [style.display]=\"dg.columnIsVisible(col) ? '': 'none'\"\r\n                        [class.f-datagrid-fast__fixed-left]=\"dg.fast && col.fixed && col.fixed === 'left'\"\r\n                        [class.f-datagrid-fast__fixed-right]=\"dg.fast && col.fixed && col.fixed === 'right'\"\r\n                        [class.r-shadow-col]=\"col.rightShadowCol\"\r\n                        [class.l-shadow-col]=\"col.leftShadowCol\"\r\n                        *ngFor=\"let col of columns;trackBy: dg.trackByRows; index as ci; last as islast;\">\r\n                        <grid-body-cell\r\n                            [width]=\"col.width\"\r\n                            [height]=\"dg.rowHeight\"\r\n                            [lastColumn]=\"islast\"\r\n                            [column]=\"col\"\r\n                            [rowData]=\"row\"\r\n                            [rowIndex]=\"startRowIndex + i\">\r\n                        </grid-body-cell>\r\n                    </td>\r\n                </tr>\r\n            </ng-container>\r\n            <ng-container *ngIf=\"dg.mergeCell\">\r\n                <tr class=\"f-datagrid-body-row\"\r\n                    [attr.id]=\"row | rowDataId: fixedRight \"\r\n                    [attr.index]=\"startRowIndex + i\"\r\n                    [grid-row]=\"row\"\r\n                    [editable]=\"dg.editable\"\r\n                    [rowIndex]=\"startRowIndex + i\"\r\n                    #dr=\"gridRow\" [formGroup]=\"dr.form\"\r\n                    [class.f-datagrid-row-selected]=\"row | rowIsSelected\"\r\n                    [class.f-datagrid-disable-row]=\"dr.disabled\"\r\n                    #tr\r\n                    *ngFor=\"let row of data; trackBy: dg.trackByRows; let i = index\">\r\n\r\n                        <td *ngIf=\"dg.showCheckbox && dg.fast\" class=\"f-datagrid-cell f-datagrid-cell-checkbox\" style=\"text-align: center;left:0\" \r\n                            [class.f-datagrid-fast__fixed-left]=\"dg.fast\" [class.l-shadow-col]=\"dg.fast && !dg.showLineNumber && !hasFixedColumns\">\r\n                            <div class=\"f-datagrid-cell-content checkbox-column\" style=\"text-overflow: unset;\">\r\n                            <datagrid-checkbox [disabled]=\"row | disableRow: startRowIndex + i: dg.disableRow\" [rowData]=\"row\"\r\n                                [rowIndex]=\"startRowIndex + i\" [checked]=\"row | rowIsChecked: checkedRows\"></datagrid-checkbox>\r\n                            </div>\r\n                        </td>\r\n            \r\n                        <td *ngIf=\"dg.showLineNumber  && dg.fast\" [style.width.px]=\"dg.lineNumberWidth\" class=\"f-datagrid-cell f-datagrid-cell-rownumber\"\r\n                        [class.f-datagrid-fast__fixed-left]=\"dg.fast\" [style.left.px]=\"dg.showCheckbox ? 36: 0\"\r\n                        [class.l-shadow-col]=\"dg.fast && !hasFixedColumns\">\r\n                            <div class=\"f-datagrid-cell-content\">\r\n                                {{ dg.pageSize * (dg.pageIndex-1) + startRowIndex + i + 1 }}\r\n                            </div>\r\n                        </td>\r\n\r\n                        <td *ngFor=\"let column of columns; trackBy: trackByField; index as ci; last as islast;\"\r\n                            [attr.field]=\"column.field\"\r\n                            class=\"f-datagrid-cell\" \r\n                            [attr.align]=\"column.align\"\r\n                            [style.display]=\" showCell(column, startRowIndex + i) ? '': 'none' \"\r\n                            [style.vertical-align]=\"column.valign\"\r\n                            [attr.rowspan]=\" getRowSpan(column, startRowIndex + i)\"\r\n                            [cell-editable]=\"row\"\r\n                            [column]=\"column\" #td \r\n                            [class.f-datagrid-td-merged]=\"td.rowSpan > 1\"\r\n                            [class.f-datagrid-fast__fixed-left]=\"dg.fast && column.fixed && column.fixed === 'left'\"\r\n                            [class.f-datagrid-fast__fixed-right]=\"dg.fast && column.fixed && column.fixed === 'right'\"\r\n                            [class.r-shadow-col]=\"column.rightShadowCol\"\r\n                            [class.l-shadow-col]=\"column.leftShadowCol\">\r\n                            <grid-body-cell \r\n                                [width]=\"column.width\"\r\n                                [height]=\"dg.rowHeight\" \r\n                                [lastColumn]=\"islast\"\r\n                                [column]=\"column\"\r\n                                [rowData]=\"row\"\r\n                                [rowIndex]=\"startRowIndex + i\">\r\n                            </grid-body-cell>\r\n                        </td>\r\n                </tr>\r\n            </ng-container>\r\n    </tbody>\r\n\r\n</table>"
            }] }
];
/** @nocollapse */
DatagridRowsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef },
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: DatagridBodyComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridBodyComponent)),] }] },
    { type: ElementRef },
    { type: Injector },
    { type: NgZone }
];
DatagridRowsComponent.propDecorators = {
    startRowIndex: [{ type: Input }],
    data: [{ type: Input }],
    columns: [{ type: Input }],
    tableEl: [{ type: ViewChild, args: ['tableEl',] }],
    fixedRight: [{ type: Input }],
    hasFixedColumns: [{ type: Input }],
    width: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    DatagridRowsComponent.prototype.startRowIndex;
    /** @type {?} */
    DatagridRowsComponent.prototype.data;
    /** @type {?} */
    DatagridRowsComponent.prototype.columns;
    /** @type {?} */
    DatagridRowsComponent.prototype.tableEl;
    /**
     * 是否为右侧固定列。默认为 false
     * @type {?}
     */
    DatagridRowsComponent.prototype.fixedRight;
    /**
     * 是否有左侧固定列
     * @type {?}
     */
    DatagridRowsComponent.prototype.hasFixedColumns;
    /** @type {?} */
    DatagridRowsComponent.prototype.width;
    /** @type {?} */
    DatagridRowsComponent.prototype.isGroupRow;
    /**
     * 分组行父ID字段
     * @type {?}
     */
    DatagridRowsComponent.prototype.groupRow;
    /** @type {?} */
    DatagridRowsComponent.prototype.isGroupFooter;
    /** @type {?} */
    DatagridRowsComponent.prototype.visible;
    /** @type {?} */
    DatagridRowsComponent.prototype.groupLevelField;
    /** @type {?} */
    DatagridRowsComponent.prototype.filterConditions;
    /** @type {?} */
    DatagridRowsComponent.prototype.checkedRows;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.ro;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.scrollToCurrentRowSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.destroy$;
    /** @type {?} */
    DatagridRowsComponent.prototype.cd;
    /** @type {?} */
    DatagridRowsComponent.prototype.dg;
    /** @type {?} */
    DatagridRowsComponent.prototype.dgb;
    /** @type {?} */
    DatagridRowsComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowsComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,