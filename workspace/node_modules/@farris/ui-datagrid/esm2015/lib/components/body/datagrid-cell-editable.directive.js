/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:07
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 15:48:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Directive, Input, ElementRef, Renderer2, ContentChild, Injector, forwardRef, Inject, NgZone } from '@angular/core';
import { filter, debounceTime, takeUntil } from 'rxjs/operators';
import { DatagridService } from './../../services/datagrid.service';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridBodyComponent } from './datagrid-body.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { CELL_SELECTED_CLS, CELL_EDITING_CLS, ALLOW_EDIT_CELL_HIGHLIGHT_CLS } from '../../types/constant';
import { of, noop, Subject } from 'rxjs';
import { Utils } from '../../utils/utils';
export class DatagridCellEditableDirective {
    /**
     * @param {?} injector
     * @param {?} el
     * @param {?} render
     * @param {?} dg
     * @param {?} ngZone
     */
    constructor(injector, el, render, dg, ngZone) {
        this.injector = injector;
        this.el = el;
        this.render = render;
        this.dg = dg;
        this.ngZone = ngZone;
        // private _readonly$ = null;
        this.cellEditorCreatedSubscription = null;
        this.cellEditorDestorySubscription = null;
        this.destroy$ = new Subject();
        this.validMessageEle = null;
        this.dgb = this.injector.get(DatagridBodyComponent);
        this.dr = this.injector.get(DatagridRowDirective);
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        if (!this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription = this.dgs.cellEditorCreated.pipe(takeUntil(this.destroy$)).pipe(filter((/**
             * @param {?} __0
             * @return {?}
             */
            ({ column, editorRef, cellEditorRef, templateRef }) => {
                return column.field === this.column.field && this.dg.selectedRow.id === this.dr.rowId;
            }))).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ({ editorRef, cellEditorRef, templateRef }) => {
                if (editorRef) {
                    this['editor'] = editorRef.instance;
                    this['formControl'] = (/** @type {?} */ (this.editor.formControl));
                    this.cellEditorRef = cellEditorRef;
                    this.emitBeginEdit();
                }
                else {
                    this['formControl'] = (/** @type {?} */ (this.dr.form.get(this.column.field)));
                    this.bindEditorInputEvent();
                    this.dg.beginEdit.emit({ editor: null, column: this.column, rowData: this.rowData, gridInstance: this.dg, template: templateRef });
                }
                this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
            }));
        }
        this.dg.dgs.cellEditorDestory.pipe(takeUntil(this.destroy$)).pipe(filter((/**
         * @param {?} __0
         * @return {?}
         */
        ({ column }) => {
            return this.dg.selectedRow && column.field === this.column.field && this.dg.selectedRow.id === this.dr.rowId;
        }))).subscribe((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (this.dg.editMode === 'cell') {
                this.dg.selectedRow.editors = [];
                if (this.dg.currentCell) {
                    this.dg.currentCell.editor = null;
                    this.dg.currentCell.cellEditorRef = null;
                }
            }
            this.unBindEditorInputEvent();
            this.cellEditorRef = null;
            this.formControl = null;
            this.editor = null;
            this.removeValidMessage();
        }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.initCellEvent();
            this.setCellClsWithEditorType();
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initCellEvent();
        this.setCellClsWithEditorType();
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    runZoneClick(e) {
        if (this['zoneClick']) {
            Object.assign(e, { rowData: this.rowData });
            this['zoneClick'].forEach((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                n.target.style.pointerEvents = 'auto';
                if (n.callback) {
                    n.callback(e);
                }
                else if (n.handler) {
                    n.handler(e);
                }
            }));
            if (this.dg.isFF) {
                e.target['__zone_symbol__clickfalse'] = this['zoneClick'];
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCellEvent() {
        if (this.column && (this.column.editor || this.column.editorTemplate)) {
            if (!this.dg.clickToEdit) {
                this.celldblclick = this.render.listen(this.el.nativeElement, 'dblclick', (/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    this.onDblClickCell(e);
                }));
            }
            this.el.nativeElement.edit = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.closeEditingCell().subscribe((/**
                 * @param {?} canEdit
                 * @return {?}
                 */
                (canEdit) => {
                    if (canEdit) {
                        this.onClickCell(e);
                        if (!this.dg.selectedRow || this.dg.selectedRow.id !== this.dr.rowId) {
                            this.dg.selectRow(this.dr.rowId, true, false);
                        }
                        this.runZoneClick(e);
                    }
                }));
            });
            this.el.nativeElement.editCell = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.openCellEditor();
            });
        }
        else {
            this.clickTimer = 0;
        }
        /** @type {?} */
        const excludeTarget = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            return e.target.parentElement.nodeName !== 'GRID-BODY-CELL' &&
                e.target.nodeName !== 'INPUT' && e.target.nodeName !== 'TEXTAREA' &&
                !(e.target.className.indexOf('custom-control-label') > -1 &&
                    e.target.parentElement && e.target.parentElement.className.indexOf('custom-control') > -1) &&
                !e.target.closest('input-group') && !e.target.closest('farris-switch') &&
                !e.target.closest('farris-number-spinner') &&
                !e.target.closest('farris-datepicker') &&
                !e.target.closest('farris-time-picker') &&
                !e.target.closest('grid-editor-textarea') &&
                !e.target.closest('farris-checkboxgroup') &&
                !e.target.closest('grid-editor-checkbox') && !e.target.closest('farris-radiogroup') &&
                !e.target.closest('farris-organization-selector') && !e.target.closest('farris-personnel-selector');
        });
        if (this.column.proxyClick === undefined) {
            this.column.proxyClick = true;
        }
        if (this.column.template && this.column.proxyClick) {
            if (this['_tdmousedown_']) {
                this.el.nativeElement.removeEventListener('mousedown', this['_tdmousedown_'], true);
                this['_tdmousedown_'] = null;
            }
            this.el.nativeElement.addEventListener('mousedown', this['_tdmousedown_'] = (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (excludeTarget(e)) {
                    this['zoneClick'] = e.target['__zone_symbol__clickfalse'] || e.target['__zone_symbol__ANGULARclickFALSE'];
                    if (this['zoneClick'] && this['zoneClick'].length) {
                        if (!this.dg.isFF) {
                            e.target.style.pointerEvents = 'none';
                        }
                        else {
                            if (e.target['__zone_symbol__clickfalse']) {
                                delete (e.target['__zone_symbol__clickfalse']);
                            }
                            if (e.target['__zone_symbol__ANGULARclickFALSE']) {
                                delete (e.target['__zone_symbol__ANGULARclickFALSE']);
                            }
                        }
                        this['zoneClick'].forEach(((/**
                         * @param {?} proxyClick
                         * @return {?}
                         */
                        proxyClick => {
                            if (!proxyClick.target) {
                                proxyClick.target = e.target;
                            }
                        })));
                    }
                }
            }), true);
            /*
            this['_tdmousedown_'] = this.render.listen(this.el.nativeElement, 'mousedown', (e: any) => {
                if (excludeTarget(e)) {
                    this['zoneClick'] = e.target['__zone_symbol__clickfalse'] || e.target['__zone_symbol__ANGULARclickFALSE'];
                    if (this['zoneClick'] && this['zoneClick'].length) {
                        e.target.style.pointerEvents = 'none';
                        this['zoneClick'].forEach((proxyClick => {
                            if (!proxyClick.target) {
                                proxyClick.target = e.target;
                            }
                        }));
                    }
                }
            });
            */
        }
        this.el.nativeElement.gridCellData = { rowData: this.rowData, rowIndex: this.dr.rowIndex };
        this.el.nativeElement.closeEdit = (/**
         * @return {?}
         */
        () => this.closeEditingCell());
        this.el.nativeElement.selectCell = (/**
         * @param {?} e
         * @param {?} el
         * @return {?}
         */
        (e, el) => {
            if (this.dg.disableRow && this.dg.disableRow(this.rowData, this.dr.rowIndex)) {
                return;
            }
            /** @type {?} */
            const beforEventParam = {
                rowIndex: this.dr.rowIndex,
                rowData: this.rowData,
                gridInstance: this.dg
            };
            /** @type {?} */
            const runTemplateClickEvent = (/**
             * @return {?}
             */
            () => {
                if (!this.dg.currentCell) {
                    this.selectCell(this.column.field, el);
                    if (!this.dg.currentCell) {
                        this.dg.currentCell = { rowData: this.rowData };
                    }
                    else {
                        if (!this.dg.currentCell.rowData) {
                            this.dg.currentCell.rowData = this.rowData;
                        }
                    }
                }
                if (this['zoneClick']) {
                    this.runZoneClick(e);
                }
                this.dg.cellClick.emit({ column: this.column, rowData: this.rowData, gridInstance: this.dg, event: e });
            });
            /** @type {?} */
            const useNewSelectionMode = this.dg.sms.beforRowClick(Object.assign({}, beforEventParam, { e, id: this.dr.rowId, dr: this.dr, cellref: this }));
            if (useNewSelectionMode) {
                this.selectCell(this.column.field, el);
                if (!this.dg.currentCell) {
                    this.dg.currentCell = { rowData: this.rowData };
                }
                else {
                    if (!this.dg.currentCell.rowData) {
                        this.dg.currentCell.rowData = this.rowData;
                    }
                }
                this.dg.cellClick.emit({ column: this.column, rowData: this.rowData, gridInstance: this.dg, event: e });
                return;
            }
            if (this.dfs.isRowSelected(this.dr.rowId)) {
                if (!this.dg.keepSelect && !this.column.template) {
                    if (this.dg.currentCell && this.dg.currentCell.cellElement && this.dg.currentCell.cellElement.id === el.id) {
                        this.dg.cancelSelectCell();
                    }
                    this.dg.beforeUnselect(beforEventParam).pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} canUnselect
                     * @return {?}
                     */
                    (canUnselect) => {
                        if (canUnselect) {
                            // this.dg.unSelect.emit(this.dg.selectedRow);
                            this.dfs.unSelectRow(this.dr.rowIndex, this.rowData, { instance: this.dg });
                            /** @type {?} */
                            const trCLS = this.el.nativeElement.className;
                            if (trCLS.indexOf('f-datagrid-row-selected') > -1) {
                                this.el.nativeElement.className = trCLS.replace('f-datagrid-row-selected', '');
                            }
                        }
                        this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                        this.dg.dgs.setSelecedRow.emit();
                    }));
                }
                else {
                    this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                    runTemplateClickEvent();
                }
            }
            else {
                /** @type {?} */
                let r$ = of(true);
                if (this.dg.beforeSelect) {
                    /** @type {?} */
                    const r = this.dg.beforeSelect({ rowIndex: this.dr.rowIndex, rowData: this.rowData, gridInstance: this.dg });
                    if (r && r.subscribe) {
                        r$ = r;
                    }
                }
                /** @type {?} */
                const zoneClick = this['zoneClick'];
                /** @type {?} */
                const _timer = zoneClick && zoneClick.length ? 100 : 0;
                r$.pipe(debounceTime(_timer)).subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    if (t) {
                        this.selectCell(this.column.field, el);
                        this.dg.cellClick.emit({ column: this.column, rowData: this.rowData, gridInstance: this.dg, event: e });
                        if (_timer) {
                            this.runZoneClick(e);
                        }
                    }
                    this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                    this.dg.dgs.setSelecedRow.emit();
                }));
            }
        });
        this.el.nativeElement.cancelSelected = (/**
         * @return {?}
         */
        () => {
            this.render.removeClass(this.el.nativeElement, CELL_SELECTED_CLS);
            this.render.removeClass(this.el.nativeElement, CELL_EDITING_CLS);
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.cellclick) {
            this.cellclick();
        }
        if (this.celldblclick) {
            this.celldblclick();
        }
        this.unBindEditorInputEvent();
        if (this.bindCellEventSubscription) {
            this.bindCellEventSubscription.unsubscribe();
            this.bindCellEventSubscription = null;
        }
        if (this.cellEditorCreatedSubscription) {
            this.cellEditorCreatedSubscription.unsubscribe();
            this.cellEditorCreatedSubscription = null;
        }
        if (this.cellEditorDestorySubscription) {
            this.cellEditorDestorySubscription.unsubscribe();
            this.cellEditorDestorySubscription = null;
        }
        this.editor = null;
        this.cellEditorRef = null;
        this.formControl = null;
        if (this.el) {
            this.el.nativeElement.cancelSelected = noop;
            this.el.nativeElement.selectCell = noop;
            this.el.nativeElement.closeEdit = noop;
            this.el.nativeElement.gridCellData = noop;
            this.el.nativeElement.edit = noop;
            this.el.nativeElement.selectCell = noop;
            if (this['_tdmousedown_']) {
                this.el.nativeElement.removeEventListener('mousedown', this['_tdmousedown_'], true);
                this['_tdmousedown_'] = null;
            }
            this.el = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    isDifferentCell() {
        if (!this.dg.currentCell) {
            return true;
        }
        else {
            if (!this.dg.selectedRow || this.dg.selectedRow.index !== this.dr.rowIndex) {
                return true;
            }
            else {
                if (this.dr.rowIndex !== this.dg.currentCell.rowIndex) {
                    return true;
                }
                else {
                    return this.dg.currentCell.field !== this.column.field;
                }
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onClickCell(event) {
        // 关闭其他Grid 的编辑器
        document.body.click();
        this.dg.beforeClickCell.emit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (this.dr.disabled) {
            return;
        }
        if (this.dg.disabled) {
            return;
        }
        else {
            if (!this.dg.editable || this.isReadonly()) {
                if (this.dg.enableHighlightCell) {
                    event.stopPropagation();
                    this.dg.endEditing();
                    this.selectCell(this.column.field);
                }
                // 只读单元格，点击后须触发行点击事件 tfs 574551
                this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                return;
            }
            else {
                if (this.dg.editMode === 'row') {
                    return;
                }
            }
        }
        if (this.dg.selectionMode === 'default' && event) {
            if (event.ctrlKey || event.shiftKey) {
                return;
            }
        }
        event.stopPropagation();
        if (event.target['nodeName'] === 'INPUT') {
            return;
        }
        // if (this.dg.clickToEdit && !this.dg.dblclickRow.observers.length) {
        //     this.dg.clickDelay = 0;
        // }
        this.render.addClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (!this.dg.isSingleClick && this.dg.editMode) {
            this.dg.isSingleClick = true;
            if (this.clickTimer) {
                clearTimeout(this.clickTimer);
            }
            this.clickTimer = setTimeout((/**
             * @return {?}
             */
            () => {
                if (this.dg.isSingleClick && this.dg.editable && this.dg.editMode === 'cell') {
                    this.dg.isSingleClick = false;
                    clearTimeout(this.clickTimer);
                    // if (!this.closeEditingCell()) {
                    //     return;
                    // }
                    this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    (f) => {
                        if (f) {
                            if (this.dg.clickToEdit) {
                                !this.dg.nowrap && this.dgb.updateRowHeight();
                                this.openCellEditor();
                            }
                            else {
                                this.selectCell(this.column.field);
                            }
                            this.render.removeClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
                            event.preventDefault();
                        }
                    }));
                }
            }), this.dg.clickDelay);
        }
    }
    /**
     * @private
     * @param {?} event
     * @return {?}
     */
    onDblClickCell(event) {
        if (this.dg.disabled || this.isReadonly()) {
            return;
        }
        if (event.target['nodeName'] === 'INPUT' || event.target['nodeName'] === 'TEXTAREA') {
            return;
        }
        if (this.dg.editable && this.dg.editMode === 'cell') {
            if (this.clickTimer) {
                this.dg.isSingleClick = false;
                clearTimeout(this.clickTimer);
                this.clickTimer = null;
            }
            this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                if (f) {
                    setTimeout((/**
                     * @return {?}
                     */
                    () => {
                        this.openCellEditor();
                    }));
                }
            }));
        }
    }
    /**
     * @param {?=} col
     * @return {?}
     */
    isReadonly(col = this.column) {
        if (this.dg.editable) {
            // 参与合并的单元格不允许编辑
            if (this.dg.mergeCell && this.dg.mergeFields.indexOf(col.field) > -1) {
                return true;
            }
            return this.getReadonlyValue(col);
        }
        else {
            return true;
        }
    }
    /**
     * @private
     * @param {?=} col
     * @return {?}
     */
    getReadonlyValue(col = this.column) {
        if (col.readonly !== undefined) {
            if (typeof col.readonly === 'boolean') {
                return col.readonly;
            }
            else if (typeof col.readonly === 'function') {
                return col.readonly(this.rowData);
            }
        }
        return false;
    }
    /**
     * @return {?}
     */
    openCellEditor() {
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if ((!this.column.editor && !this.column.editorTemplate) || !this.dg.editable || this.isReadonly()) {
            if (this.dg.selectionMode === 'default' && this.dg.multiSelect) {
                this.dg.clearCheckeds();
            }
            this.selectCell(this.column.field);
            return;
        }
        /** @type {?} */
        const beforeEditEvent = this.dg.beforeEdit({ rowIndex: this.dr.rowIndex, rowData: this.rowData, column: this.column, gridInstance: this.dg });
        if (!beforeEditEvent || !beforeEditEvent.subscribe) {
            this.dg.writeConsole('please return an Observable Type.');
            return;
        }
        if (this.dg.currentCell) {
            if (!this.dg.currentCell.cellRef || this.dg.currentCell.cellRef.column.field !== this.column.field) {
                this.dg.currentCell.cellRef = this.dc;
            }
        }
        beforeEditEvent.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                if (this.isDifferentCell()) {
                    if (this.dg.selectionMode === 'default' && this.dg.multiSelect) {
                        this.dg.clearCheckeds();
                    }
                    this.selectCell(this.column.field);
                }
                this.dfs.editCell();
            }
            else {
                this.selectCell(this.column.field);
                // tfs 574612
                this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    emitBeginEdit() {
        /** @type {?} */
        const _cellEditorRef = this.cellEditorRef || this.dc.cellEditor;
        this.render.removeClass(this.dg.el.nativeElement, 'f-datagrid-unselect');
        if (this.dg.editMode === 'cell') {
            this.dg.selectedRow.editors = [this.editor];
            this.dg.currentCell.editor = this.editor;
            this.dg.currentCell.cellEditorRef = _cellEditorRef;
            this.bindEditorInputEvent();
            this.render.addClass(this.el.nativeElement, CELL_EDITING_CLS);
            // this.formControl.setValue(this.dc.value);
            this.dg.beginEdit.emit({ editor: _cellEditorRef, column: this.column, rowData: this.rowData, gridInstance: this.dg });
            if (this.column.editor.type === 'textarea' && this.column.editor.options && this.column.editor.options.editType === 'dialog') {
                this.editor.showDialog();
            }
        }
        if (this.dr && !this.dg.nowrap) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                this.dr.updateRowHeight();
            }));
        }
        if (this.editor) {
            this.validMessageEle = this.showValidMessage();
        }
    }
    /**
     * @return {?}
     */
    removeValidMessage() {
        // 移除验证信息
        if (this.validMessageEle) {
            this.validMessageEle.remove();
            this.validMessageEle = null;
            if (this.dg.formValidations) {
                delete this.dg.formValidations[this.column.field];
            }
        }
    }
    /**
     * @return {?}
     */
    showValidMessage() {
        if (this.dg.formValidations && this.dg.formValidations[this.column.field]) {
            const { isValid, message } = this.dg.formValidations[this.column.field];
            if (!isValid && message) {
                /** @type {?} */
                const tr = this.editor.el.nativeElement.closest('tr');
                /** @type {?} */
                const td = this.editor.el.nativeElement.closest('td');
                /** @type {?} */
                const parentContainver = this.editor.el.nativeElement.closest('.f-datagrid-table');
                /** @type {?} */
                const box = document.createElement('div');
                /** @type {?} */
                const msgWrap = document.createElement('span');
                box.appendChild(msgWrap);
                msgWrap.innerText = message;
                box.style.position = 'absolute';
                box.style.background = '#FDEFEF';
                box.style.color = '#F46160';
                /** @type {?} */
                let top = tr.offsetTop - 21;
                if (tr.getAttribute('index') == '0') {
                    top = tr.offsetHeight;
                }
                box.style.top = `${top}px`;
                box.style.left = `${td.offsetLeft + 5}px`;
                box.style.zIndex = '996';
                box.style.padding = '0.1875rem 0.5rem';
                box.style.fontSize = '.8125rem';
                box.style.lineHeight = '14px';
                // document.body.append(box);
                parentContainver.append(box);
                return box;
            }
            return null;
        }
    }
    /**
     * @return {?}
     */
    closeEditingCell() {
        if (!this.dg.isCellEditing()) {
            return of(true);
        }
        /** @type {?} */
        let currentCell = null;
        /** @type {?} */
        let editor = null;
        if (this.dg.currentCell) {
            currentCell = (/** @type {?} */ (this.dg.currentCell.cellRef));
            if (currentCell) {
                if (!currentCell.isEditing) {
                    return of(true);
                }
                if (currentCell.cellEditor && currentCell.cellEditor.componentRef && !currentCell.column.editorTemplate) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    if (editor) {
                        // 执行blur 事件
                        if (editor.inputElement) {
                            /** @type {?} */
                            const domName = editor.inputElement.nodeName;
                            /** @type {?} */
                            const blurFn = editor.options && editor.options.onBlur;
                            if (blurFn) {
                                if ((domName === 'INPUT' || domName === 'TEXTAREA') && this.dg['focusElement'] === editor.inputElement) {
                                    blurFn({ editorRef: editor, rowData: currentCell.rowData });
                                }
                            }
                            if (editor.inputElement.blur) {
                                editor.inputElement.blur();
                            }
                            this.dg['focusElement'] = null;
                        }
                        if (editor.blur) {
                            editor.blur();
                        }
                        if (editor.pending) {
                            return of(false);
                        }
                        if (editor.formControl) {
                            if (editor.formControl.pending) {
                                return of(false);
                            }
                            if (editor.formControl && editor.formControl.invalid && !this.dg.endEditByInvalid) {
                                return of(false);
                            }
                        }
                        else {
                            return of(true);
                        }
                    }
                    else {
                        return of(true);
                    }
                }
            }
        }
        else {
            return of(true);
        }
        this.dg.isSingleClick = false;
        /** @type {?} */
        const _col_ = (editor || currentCell).column;
        /** @type {?} */
        const afterEditEvent = this.dg.afterEdit(currentCell.rowIndex, currentCell.rowData, _col_, editor);
        if (!afterEditEvent || !afterEditEvent.subscribe) {
            this.dg.writeConsole('please return an Observable Type.');
            return of(undefined);
        }
        // let cellEndEdit = of(undefined);
        /** @type {?} */
        let cellEndEdit = new Subject();
        afterEditEvent.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @param {?} flag
         * @return {?}
         */
        (flag) => {
            if (flag) {
                /** @type {?} */
                let val = currentCell.value === undefined ? '' : currentCell.value;
                if (currentCell && currentCell.formControl && currentCell.formControl.value !== undefined && val !== currentCell.formControl.value) {
                    val = currentCell.formControl.value;
                    currentCell.isEditing = false;
                    currentCell.updateValue(val);
                }
                this.dfs.endEditCell();
                this.dgs.onEndCellEdit(this.dfs.getCurrentCell());
                this.unBindEditorInputEvent();
                // 移除编辑样式
                this.render.removeClass(this.el.nativeElement, CELL_EDITING_CLS);
                if (this.dg.selectedRow) {
                    this.dg.selectedRow.editors = [];
                }
                // this.dg.selectedRow.data = this.rowData;
                // 更新行样式或者单元格样式
                /** @type {?} */
                const _rid = this.dfs.primaryId(currentCell.rowData);
                this.dfs.rowUpdate$.next({ index: currentCell.rowIndex, data: currentCell.rowData, cellRef: currentCell, keyID: _rid });
                if (this.dg.showFooter) {
                    // 更新footerData
                    this.dgs.refreshFooterData.emit();
                }
                // 刷新行数据
                // this.dr.refresh();
                if (this.dg.selectedRow && this.dg.selectedRow.dr) {
                    this.dg.selectedRow.dr.refresh();
                }
                if (this['ENDEDIT_TIMER']) {
                    clearTimeout(this['ENDEDIT_TIMER']);
                }
                const { rowIndex, rowData } = currentCell;
                this['ENDEDIT_TIMER'] = setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dg.endEdit.emit({ rowIndex, rowData, column: _col_, value: val });
                    // cellEndEdit = of(true);
                    cellEndEdit.next(true);
                }), 100);
            }
            else {
                if (currentCell && currentCell.cellEditor && currentCell.cellEditor.componentRef && currentCell.cellEditor.componentRef.instance) {
                    editor = currentCell.cellEditor.componentRef.instance;
                    editor.inputElement.focus();
                    // cellEndEdit = of(false);
                    cellEndEdit.next(false);
                }
                else {
                    // cellEndEdit = of(true);
                    cellEndEdit.next(true);
                }
            }
        }));
        return cellEndEdit.asObservable();
    }
    /**
     * @return {?}
     */
    cancelCellEditing() {
        if (this.dg.currentCell && this.dg.currentCell.isEditing && this.dg.selectedRow.index > -1) {
            // this.dfs.resetRow(this.dg.selectedRow.id);
            this.dc.rowData = this.dg.selectedRow.data;
            this.formControl.reset(Utils.getValue(this.column.field, this.dc.rowData));
            this.closeEditingCell();
        }
    }
    /**
     * @return {?}
     */
    bindEditorInputEvent() {
        /** @type {?} */
        const ceRef = this.cellEditorRef || this.dc.cellEditor;
        /** @type {?} */
        let input = null;
        if (ceRef) {
            input = ceRef.componentRef.instance.inputElement;
        }
        else {
            if (this.column.editorTemplate) {
                input = this.dc.el.nativeElement.querySelector('input,textarea');
            }
        }
        if (input) {
            input.focus();
            if (this.dg.selectOnEditing && this.column.editorTemplate) {
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    if (input.select) {
                        input.select();
                    }
                }));
            }
            this.editorInputKeydownEvent = this.render.listen(input, 'keydown', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                this.onKeyDownForInput(e);
            }));
        }
    }
    /**
     * @return {?}
     */
    unBindEditorInputEvent() {
        if (this.editorInputKeydownEvent) {
            this.editorInputKeydownEvent();
            this.editorInputKeydownEvent = null;
        }
    }
    // private isLastCell() {
    //     let i = this.dg.flatColumns.length;
    //     while(i <= ) {
    //         if (this.dg.flatColumns[i])
    //     }
    // }
    /**
     * @return {?}
     */
    findLastEditCell() {
        /** @type {?} */
        let i = this.dg.colGroup.columns.length - 1;
        /** @type {?} */
        let _col = null;
        while (i >= 0) {
            /** @type {?} */
            const col = this.dg.colGroup.columns[i];
            if (col.editor || col.editorTemplate) {
                _col = col;
                break;
            }
            else {
                i--;
            }
        }
        return _col;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    onKeyDownForInput(e) {
        /** @type {?} */
        const keyCode = e.keyCode;
        if (e.altKey || e.ctrlKey) {
            return;
        }
        if ((this.editor && this.editor.stopPropagation) || keyCode === 13 || this.column.editorTemplate) {
            e.stopPropagation();
        }
        switch (keyCode) {
            case 32: // SPACE
                if (this.column.editor.type === 'switch') {
                    e.preventDefault();
                    this.editor.instance.updateChecked(e, false);
                }
                break;
            case 13: // Enter
                this.closeEditingCell().pipe(takeUntil(this.destroy$)).pipe(debounceTime(100)).subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => {
                    if (f) {
                        this.dg.dgContainer.nativeElement.focus();
                        /** @type {?} */
                        const lastEditCell = this.findLastEditCell();
                        /** @type {?} */
                        const enterParam = { gird: this.dg, cell: this.dg.currentCell, event: e, lastCell: lastEditCell.field === this.column.field };
                        if (this.column.onEnterHandler) {
                            this.column.onEnterHandler(enterParam);
                        }
                        else {
                            /** @type {?} */
                            const nextTd = this.dg.findNextCell(this.column.field, 'right');
                            if (this.dg.currentCell.lastRow && (!nextTd || lastEditCell.field === this.column.field)) {
                                this.dg.lastCellEnterHandler.emit(enterParam);
                            }
                        }
                    }
                }));
                break;
            case 27: // ESC
                this.cancelCellEditing();
                break;
            case 9: // Tab
                e.stopPropagation();
                this.dg.clickDelay = 0;
                if (e.shiftKey) {
                    this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.movePrevCellAndEdit();
                        }
                    }));
                }
                else {
                    this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.moveNextCellAndEdit(e);
                        }
                    }));
                    e.preventDefault();
                }
                break;
            case 40: // ↓
                /** 选中下一行，且当前列进入编辑态; 仅普通文本输入框支持 */
                if (this.column.editor.type === 'textbox') {
                    this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.selectNextRowAndEditCell(this.column.field, 'down');
                        }
                    }));
                    e.preventDefault();
                }
                break;
            case 38: // ↑
                /** 选中上一行，且当前列进入编辑态; 仅普通文本输入框支持 */
                if (this.column.editor.type === 'textbox') {
                    this.closeEditingCell().pipe(takeUntil(this.destroy$)).subscribe((/**
                     * @param {?} f
                     * @return {?}
                     */
                    f => {
                        if (f) {
                            this.selectNextRowAndEditCell(this.column.field, 'up');
                        }
                    }));
                    e.preventDefault();
                }
                break;
        }
    }
    /**
     * @private
     * @param {?} field
     * @param {?=} tdElement
     * @return {?}
     */
    selectCell(field, tdElement) {
        this.closeEditingCell().subscribe((/**
         * @param {?} t
         * @return {?}
         */
        t => {
            if (!t) {
                return;
            }
            tdElement = tdElement || this.el.nativeElement;
            this.clearCellSelectedClass();
            if (field && field !== this.dg.ControlPanelFeild && field.indexOf('farris-datagrid-column') === -1) {
                this.render.addClass(tdElement, CELL_SELECTED_CLS);
            }
            // this.dr.drHover.setRowHoverCls(false);
            this.dfs.setCurrentCell(this.dr, field, tdElement, this.dc);
            if (!this.dg.fast && this.column.fixed !== 'left' && this.column.fixed !== 'right') {
                this.moveScrollbar(tdElement);
            }
        }));
    }
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    moveScrollbar(td) {
        /** @type {?} */
        const tdPosLeft = td.offsetLeft + td.offsetWidth;
        /** @type {?} */
        const containerWidth = this.dg.width - this.dgb.columnsGroup.leftFixedWidth - this.dgb.columnsGroup.rightFixedWidth;
        /** @type {?} */
        const tdRect = td.getBoundingClientRect();
        /** @type {?} */
        const scrollContainer = this.dgb.ps.elementRef.nativeElement;
        /** @type {?} */
        const psContainer = scrollContainer.getBoundingClientRect();
        /** @type {?} */
        const scrollTop = scrollContainer.scrollTop;
        /** @type {?} */
        const scrollLeft = scrollContainer.scrollLeft;
        /** @type {?} */
        const scrollbarXLeft = this.dgb.ps.elementRef.nativeElement.scrollLeft;
        if (tdPosLeft > containerWidth) {
            /** @type {?} */
            const x = tdPosLeft - containerWidth + 2;
            // const x = tdPosLeft - this.dgb.ps.instance.scrollbarXWidth + 2;
            if (x > scrollbarXLeft) {
                this.dgb.ps.scrollToX(x);
            }
        }
        else {
            // if (tdRect.x < psContainer.x) {
            //     const x = scrollLeft - tdRect.x;
            //     this.dgb.ps.scrollToX(x);
            // }
            if (td.offsetLeft < scrollLeft) {
                this.dgb.ps.scrollToX(td.offsetLeft);
            }
        }
        /** @type {?} */
        const tdPosTop = tdRect.top - psContainer.top + tdRect.height;
        if (tdPosTop > psContainer.height) {
            /** @type {?} */
            const y = tdPosTop - psContainer.height;
            this.dgb.ps.scrollToY(scrollTop + y);
        }
        else {
            if (tdRect.y < psContainer.y) {
                this.dgb.ps.scrollToY(scrollTop - (psContainer.y - tdRect.y));
            }
        }
    }
    /**
     * @private
     * @param {?=} event
     * @return {?}
     */
    moveNextCellAndEdit(event) {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        // const fieldIndex = this.dfs.getColumnIndex(this.column.field);
        /** @type {?} */
        const fieldIndex = this.dg.colGroup.columns.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => (n.id && n.id === this.column.id) || n.field === this.column.field));
        if (fieldIndex + 1 < this.dgb.columnsGroup.columns.length) {
            /** @type {?} */
            const nextColumn = this.dgb.columnsGroup.columns[fieldIndex + 1];
            /** @type {?} */
            const nextTd = this.dg.findNextTd(nextColumn);
            if (nextTd && (!nextColumn.fixed || nextColumn.fixed === 'center')) {
                this.moveScrollbar(nextTd);
            }
            // const nextTd = this.dg.currentCell.cellElement.nextElementSibling;
            if (nextColumn && ((!nextColumn.editor && !nextColumn.editorTemplate) || this.isReadonly(nextColumn))) {
                if (nextTd) {
                    nextTd.selectCell(event, nextTd);
                }
                return;
            }
            if (nextTd) {
                nextTd.focus();
                if (nextColumn.editor || nextColumn.editorTemplate) {
                    nextTd.editCell();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
        else {
            // next row's first cell to editing
            /** @type {?} */
            const nextTr = this.dg.currentCell.cellElement.parentElement.nextElementSibling;
            if (nextTr && nextTr.tagName === 'TR') {
                // nextTr.children.find(td => td.editCell).editCell();
                /** @type {?} */
                let firstEditor = false;
                /** @type {?} */
                let i = 0;
                while (!firstEditor) {
                    firstEditor = !!nextTr.children[i].editCell;
                    if (!firstEditor) {
                        i++;
                    }
                }
                if (this.dg.selectionMode === 'default') {
                    this.dg.clearCheckeds();
                }
                nextTr.children[i].editCell();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    movePrevCellAndEdit() {
        // if (!this.closeEditingCell()) {
        //     return;
        // }
        /** @type {?} */
        const fieldIndex = this.dfs.getColumnIndex(this.column.field);
        if (fieldIndex - 1 >= 0) {
            /** @type {?} */
            const nextColumn = this.dgb.columnsGroup.normalColumns[fieldIndex - 1];
            if (nextColumn && this.isReadonly(nextColumn)) {
                return;
            }
            /** @type {?} */
            const nextTd = this.dg.currentCell.cellElement.previousElementSibling;
            if (nextTd) {
                // this.selectCell(nextColumn.field, nextTd);
                nextTd.focus();
                if (nextColumn.editor) {
                    // this.dfs.editCell();
                    nextTd.click();
                    this.dgs.onCellEdit(nextTd);
                }
            }
        }
    }
    /**
     * @private
     * @param {?} cellFieldName
     * @param {?} dir
     * @return {?}
     */
    selectNextRowAndEditCell(cellFieldName, dir) {
        if (!this.dg.currentCell) {
            this.dg.writeConsole('当前选中单元格为空');
            return;
        }
        /** @type {?} */
        const p = dir === 'down' ? 'nextElementSibling' : 'previousElementSibling';
        /** @type {?} */
        const nextTr = this.dg.currentCell.cellElement.parentElement[p];
        if (nextTr && nextTr.tagName === 'TR') {
            /** @type {?} */
            const td = Array.from(nextTr.children).find((/**
             * @param {?} td
             * @return {?}
             */
            (td) => td.getAttribute('field') == cellFieldName));
            if (td && td.editCell) {
                if (this.dg.selectionMode === 'default') {
                    this.dg.clearCheckeds();
                }
                td.editCell();
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    clearCellSelectedClass() {
        this.dg.removeCellSelectedCls();
    }
    /**
     * @private
     * @return {?}
     */
    setCellClsWithEditorType() {
        // 设置当前选中单元格样式
        if (this.dg.currentCell && this.dg.enableHighlightCell) {
            if (this.dg.currentCell.field === this.column.field && this.dg.currentCell.rowId === this.rowData[this.dg.idField] && !this.dc.isEditing) {
                this.clearCellSelectedClass();
                this.render.addClass(this.el.nativeElement, CELL_SELECTED_CLS);
            }
        }
        if (!this.dg.enableEditCellStyle) {
            return;
        }
        /** @type {?} */
        const td = this.el.nativeElement;
        this.cleanOtherEditorIcon(td);
        // 当前行禁用，不允许编辑。
        if (this.dr.disabled) {
            return;
        }
        if (!this.column.editor) {
            return;
        }
        if (this.isReadonly()) {
            return;
        }
        /** @type {?} */
        const editorType = this.column.editor.type;
        /** @type {?} */
        const cls = this.column.align === 'right' ? 'allow-edit-cell-left' : 'allow-edit-cell';
        this.render.addClass(td, cls);
        this.render.addClass(td, ALLOW_EDIT_CELL_HIGHLIGHT_CLS[editorType]);
    }
    /**
     * @private
     * @param {?} td
     * @return {?}
     */
    cleanOtherEditorIcon(td) {
        /** @type {?} */
        const values = Object.values(ALLOW_EDIT_CELL_HIGHLIGHT_CLS);
        values.forEach((/**
         * @param {?} v
         * @return {?}
         */
        v => {
            if (td.className.indexOf(v) > -1) {
                td.className = td.className.replace('allow-edit-cell-left', '').replace('allow-edit-cell', '');
                td.className = td.className.replace(v, '');
            }
        }));
    }
}
DatagridCellEditableDirective.decorators = [
    { type: Directive, args: [{
                selector: '[cell-editable]',
                exportAs: 'cellEditable'
            },] }
];
/** @nocollapse */
DatagridCellEditableDirective.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 },
    { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                     * @return {?}
                     */
                    () => DatagridComponent)),] }] },
    { type: NgZone }
];
DatagridCellEditableDirective.propDecorators = {
    rowData: [{ type: Input, args: ['cell-editable',] }],
    column: [{ type: Input }],
    dc: [{ type: ContentChild, args: [DatagridCellComponent,] }]
};
if (false) {
    /** @type {?} */
    DatagridCellEditableDirective.prototype.rowData;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.column;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.clickTimer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.celldblclick;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.bindCellEventSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.editorInputKeydownEvent;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.editor;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.formControl;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.cellEditorRef;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dc;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgb;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorCreatedSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.cellEditorDestorySubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.destroy$;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.validMessageEle;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.injector;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridCellEditableDirective.prototype.render;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.dg;
    /** @type {?} */
    DatagridCellEditableDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,