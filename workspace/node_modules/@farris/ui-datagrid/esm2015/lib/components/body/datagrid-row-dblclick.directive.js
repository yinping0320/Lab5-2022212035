/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Injector, NgZone, Renderer2, HostListener } from '@angular/core';
import { of } from 'rxjs';
import { DatagridComponent } from '../../datagrid.component';
import { Utils } from '../../utils/utils';
export class DatagridRowDblClickDirective {
    /**
     * @param {?} el
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} render
     * @param {?} dg
     */
    constructor(el, injector, ngZone, render, dg) {
        this.el = el;
        this.injector = injector;
        this.ngZone = ngZone;
        this.render = render;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    dblclickRowEvent(event) {
        /** @type {?} */
        const tr = event.target.closest('tr');
        if (!tr) {
            return;
        }
        if (tr.id == null || tr.id == undefined) {
            return;
        }
        // const rowid = tr.id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '').replace('');
        /** @type {?} */
        const rowid = Utils.getRowIdByTr(tr);
        if (tr.className.indexOf('f-datagrid-group-row') > -1) {
            /** @type {?} */
            const groupRowid = rowid.replace('group-tr_', '');
            const { data: groupData, index: groupIndex } = this.dg.getGroupRow(groupRowid);
            if (groupData && !isNaN(groupIndex)) {
                if (groupData.expanded) {
                    this.dg.collapseGroupRow(groupIndex);
                }
                else {
                    this.dg.expandGroupRow(groupIndex);
                }
            }
            return;
        }
        /** @type {?} */
        const rowIndex = tr.getAttribute('index');
        /** @type {?} */
        const rowData = this.dg.dfs.findRow(rowid);
        if (!rowData) {
            return;
        }
        if (this.dg.disableRow) {
            if (this.dg.disableRow(rowData.data, rowData.index)) {
                event.stopPropagation();
                return false;
            }
        }
        /** @type {?} */
        const handler = (/**
         * @return {?}
         */
        () => {
            if (!this.dg.dfs.isRowSelected(rowid)) {
                /** @type {?} */
                const r = this.dg.beforeSelect({ rowIndex: rowIndex, rowData: rowData.data, gridInstance: this.dg });
                /** @type {?} */
                let r$ = of(true);
                if (r && r.subscribe) {
                    r$ = r;
                }
                r$.subscribe((/**
                 * @param {?} t
                 * @return {?}
                 */
                (t) => {
                    if (t) {
                        this.dg.selectRow(rowid, true, false);
                        this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
                    }
                }));
            }
            else {
                this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
            }
        });
        if (this.dg.editable) {
            if (this.dg.editMode === 'row' && this.dg.clickToEdit) {
                this.dg.endRowEdit();
                setTimeout((/**
                 * @return {?}
                 */
                () => {
                    this.dg.editRow(rowid);
                }), 200);
            }
            else {
                this.dg.isSingleClick = false;
                // this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg, dblclick: true });
                handler();
            }
        }
        else {
            // this.dg.dblclickRow.emit({ rowData, id: rowid, index: rowIndex, grid: this.dg,  dblclick: true });
            handler();
        }
        event.stopPropagation();
        event.preventDefault();
    }
}
DatagridRowDblClickDirective.decorators = [
    { type: Directive, args: [{
                selector: '[row-dblclick]',
            },] }
];
/** @nocollapse */
DatagridRowDblClickDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: DatagridComponent }
];
DatagridRowDblClickDirective.propDecorators = {
    dblclickRowEvent: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDblClickDirective.prototype.render;
    /** @type {?} */
    DatagridRowDblClickDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,