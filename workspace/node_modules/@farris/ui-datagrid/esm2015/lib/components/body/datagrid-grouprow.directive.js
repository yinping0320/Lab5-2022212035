/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, Renderer2, ElementRef } from '@angular/core';
import { CUSTOM_GROUP_ROW_CLS } from '../../types/constant';
import { DatagridComponent } from './../../datagrid.component';
export class DatagridGroupRowDirective {
    /**
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} dg
     */
    constructor(injector, render, el, dg) {
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        setTimeout((/**
         * @return {?}
         */
        () => {
            if (this.dg && this.dg.groupStyler) {
                /** @type {?} */
                const tr = this.el.nativeElement;
                /** @type {?} */
                const _cls = Array.from(tr.classList).find((/**
                 * @param {?} n
                 * @return {?}
                 */
                (n) => n.indexOf(CUSTOM_GROUP_ROW_CLS) > -1));
                if (_cls) {
                    tr.classList.remove(_cls);
                }
                /** @type {?} */
                const styler = this.dg.groupStyler(this.groupRow);
                if (!styler) {
                    return;
                }
                if (!tr.id) {
                    tr.id = 'group-tr_' + this.groupRow.id;
                }
                /** @type {?} */
                const str = CUSTOM_GROUP_ROW_CLS + this.dg.idService.encrypt(JSON.stringify(styler));
                this.render.addClass(tr, str);
                this.dg.renderCustomStyle2(styler, tr, str);
                // this.dg.renderCustomStyle(styler, tr);
            }
        }));
    }
}
DatagridGroupRowDirective.decorators = [
    { type: Directive, args: [{
                selector: '[group-row]',
            },] }
];
/** @nocollapse */
DatagridGroupRowDirective.ctorParameters = () => [
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: DatagridComponent }
];
DatagridGroupRowDirective.propDecorators = {
    groupRow: [{ type: Input, args: ['group-row',] }]
};
if (false) {
    /** @type {?} */
    DatagridGroupRowDirective.prototype.groupRow;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2JvZHkvZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUsvRCxNQUFNLE9BQU8seUJBQXlCOzs7Ozs7O0lBR2xDLFlBQW9CLFFBQWtCLEVBQVUsTUFBaUIsRUFBVSxFQUFjLEVBQVUsRUFBcUI7UUFBcEcsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxPQUFFLEdBQUYsRUFBRSxDQUFZO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFFeEgsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixVQUFVOzs7UUFBQyxHQUFHLEVBQUU7WUFDWixJQUFJLElBQUksQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7O3NCQUUxQixFQUFFLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhOztzQkFDMUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUk7Ozs7Z0JBQUMsQ0FBQyxDQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsb0JBQW9CLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQztnQkFDL0YsSUFBSSxJQUFJLEVBQUU7b0JBQ04sRUFBRSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzdCOztzQkFFSyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztnQkFFakQsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDVCxPQUFPO2lCQUNWO2dCQUVELElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFO29CQUNSLEVBQUUsQ0FBQyxFQUFFLEdBQUcsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDO2lCQUMxQzs7c0JBRUssR0FBRyxHQUFHLG9CQUFvQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUVwRixJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzlCLElBQUksQ0FBQyxFQUFFLENBQUMsa0JBQWtCLENBQUMsTUFBTSxFQUFFLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztnQkFDNUMseUNBQXlDO2FBQzVDO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7WUFyQ0osU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxhQUFhO2FBQzFCOzs7O1lBTjBCLFFBQVE7WUFBRSxTQUFTO1lBQUUsVUFBVTtZQUVqRCxpQkFBaUI7Ozt1QkFNckIsS0FBSyxTQUFDLFdBQVc7Ozs7SUFBbEIsNkNBQTZCOzs7OztJQUVqQiw2Q0FBMEI7Ozs7O0lBQUUsMkNBQXlCOzs7OztJQUFFLHVDQUFzQjs7Ozs7SUFBRSx1Q0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBJbmplY3RvciwgUmVuZGVyZXIyLCBFbGVtZW50UmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgQ1VTVE9NX0dST1VQX1JPV19DTFMgfSBmcm9tICcuLi8uLi90eXBlcy9jb25zdGFudCc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi8uLi8uLi9kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tncm91cC1yb3ddJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIERhdGFncmlkR3JvdXBSb3dEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCdncm91cC1yb3cnKSBncm91cFJvdztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3RvciwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBkZzogRGF0YWdyaWRDb21wb25lbnQpIHtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnICYmIHRoaXMuZGcuZ3JvdXBTdHlsZXIpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IF9jbHMgPSBBcnJheS5mcm9tKHRyLmNsYXNzTGlzdCkuZmluZCgobjogc3RyaW5nKSA9PiBuLmluZGV4T2YoQ1VTVE9NX0dST1VQX1JPV19DTFMpID4gLTEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jbHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5jbGFzc0xpc3QucmVtb3ZlKF9jbHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0eWxlciA9IHRoaXMuZGcuZ3JvdXBTdHlsZXIodGhpcy5ncm91cFJvdyk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFzdHlsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCF0ci5pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyLmlkID0gJ2dyb3VwLXRyXycgKyB0aGlzLmdyb3VwUm93LmlkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGNvbnN0IHN0ciA9IENVU1RPTV9HUk9VUF9ST1dfQ0xTICsgdGhpcy5kZy5pZFNlcnZpY2UuZW5jcnlwdChKU09OLnN0cmluZ2lmeShzdHlsZXIpKTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0ciwgc3RyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tU3R5bGUyKHN0eWxlciwgdHIsIHN0cik7XHJcbiAgICAgICAgICAgICAgICAvLyB0aGlzLmRnLnJlbmRlckN1c3RvbVN0eWxlKHN0eWxlciwgdHIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19