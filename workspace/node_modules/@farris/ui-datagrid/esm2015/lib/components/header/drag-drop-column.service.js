/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class DragDropColumnService {
    constructor() { }
    /**
     * 元素位置调整
     * arr: 数组
     * newIndex: 新位置索引
     * removedIndex: 老位置索引
     * @param {?} arr
     * @param {?} newIndex
     * @param {?} removedIndex
     * @return {?}
     */
    moveItem(arr, newIndex, removedIndex) {
        /** @type {?} */
        const removedItem = arr.splice(removedIndex, 1);
        arr.splice(newIndex, 0, ...removedItem);
        return arr;
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    backupColumns(columns) {
        this.initColumns = columns.map((/**
         * @param {?} cols
         * @return {?}
         */
        cols => {
            return cols.map((/**
             * @param {?} n
             * @return {?}
             */
            n => {
                return {
                    id: n.id,
                    field: n.field
                };
            }));
        }));
    }
}
DragDropColumnService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DragDropColumnService.ctorParameters = () => [];
/** @nocollapse */ DragDropColumnService.ngInjectableDef = i0.defineInjectable({ factory: function DragDropColumnService_Factory() { return new DragDropColumnService(); }, token: DragDropColumnService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragDropColumnService.prototype.initColumns;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLWNvbHVtbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2hlYWRlci9kcmFnLWRyb3AtY29sdW1uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSzNDLE1BQU0sT0FBTyxxQkFBcUI7SUFFOUIsZ0JBQWUsQ0FBQzs7Ozs7Ozs7Ozs7SUFPaEIsUUFBUSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsWUFBWTs7Y0FDMUIsV0FBVyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztRQUMvQyxHQUFHLENBQUMsTUFBTSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQUUsR0FBRyxXQUFXLENBQUMsQ0FBQztRQUN4QyxPQUFPLEdBQUcsQ0FBQztJQUNmLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLE9BQU87UUFDakIsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsR0FBRzs7OztRQUFFLElBQUksQ0FBQyxFQUFFO1lBQ25DLE9BQU8sSUFBSSxDQUFDLEdBQUc7Ozs7WUFBRSxDQUFDLENBQUMsRUFBRTtnQkFDakIsT0FBTztvQkFDSCxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUU7b0JBQ1IsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLO2lCQUNqQixDQUFDO1lBQ04sQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7OztZQTNCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7Ozs7Ozs7SUFFRyw0Q0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7XHJcbiAgICBwcm92aWRlZEluOiAncm9vdCdcclxufSlcclxuZXhwb3J0IGNsYXNzIERyYWdEcm9wQ29sdW1uU2VydmljZSB7XHJcbiAgICBwcml2YXRlIGluaXRDb2x1bW5zO1xyXG4gICAgY29uc3RydWN0b3IoKSB7fVxyXG5cclxuICAgIC8qKiDlhYPntKDkvY3nva7osIPmlbRcclxuICAgICAqIGFycjog5pWw57uEXHJcbiAgICAgKiBuZXdJbmRleDog5paw5L2N572u57Si5byVXHJcbiAgICAgKiByZW1vdmVkSW5kZXg6IOiAgeS9jee9rue0ouW8lVxyXG4gICAgICovXHJcbiAgICBtb3ZlSXRlbShhcnIsIG5ld0luZGV4LCByZW1vdmVkSW5kZXgpIHtcclxuICAgICAgICBjb25zdCByZW1vdmVkSXRlbSA9IGFyci5zcGxpY2UocmVtb3ZlZEluZGV4LCAxKTtcclxuICAgICAgICBhcnIuc3BsaWNlKG5ld0luZGV4LCAwLCAuLi5yZW1vdmVkSXRlbSk7XHJcbiAgICAgICAgcmV0dXJuIGFycjtcclxuICAgIH1cclxuXHJcbiAgICBiYWNrdXBDb2x1bW5zKGNvbHVtbnMpIHtcclxuICAgICAgICB0aGlzLmluaXRDb2x1bW5zID0gY29sdW1ucy5tYXAoIGNvbHMgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gY29scy5tYXAoIG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBpZDogbi5pZCxcclxuICAgICAgICAgICAgICAgICAgICBmaWVsZDogbi5maWVsZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuIl19