/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDnDForHeader, constants } from '@farris/smooth-dnd';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { DragDropColumnService } from './drag-drop-column.service';
const { wrapperClass, animationClass } = constants;
SmoothDnDForHeader.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDnDForHeader.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
export class DragColumnDirective {
    /**
     * @param {?} ngzone
     * @param {?} injector
     * @param {?} render
     * @param {?} el
     * @param {?} header
     * @param {?} dg
     * @param {?} dndSer
     */
    constructor(ngzone, injector, render, el, header, dg, dndSer) {
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.header = header;
        this.dg = dg;
        this.dndSer = dndSer;
        this.enableDrag = true;
        this.groupName = '';
        this.options = {
            groupName: this.groupName,
            orientation: 'horizontal',
            behaviour: 'move',
            dragHandleSelector: '.drag-column-bar',
            dragClass: 'drag-column-moving',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            () => {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            (sourceContainerOptions, payload) => {
                if (typeof payload === 'number') {
                    return false;
                }
                if (sourceContainerOptions.groupName !== this.groupName) {
                    return false;
                }
                return !this.dg.isMultiHeader();
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            (dropResult) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDrop(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            () => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                this.ngzone.run((/**
                 * @return {?}
                 */
                () => {
                    this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.enableDrag && !changes.enableDrag.isFirstChange()) {
            if (this.enableDrag) {
                this.initDnD();
            }
            else {
                this.disposeDnd();
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.initDnD();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.disposeDnd();
    }
    /**
     * @private
     * @return {?}
     */
    disposeDnd() {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    }
    /**
     * @private
     * @return {?}
     */
    initDnD() {
        if (!this.dg.enableDragColumn) {
            return;
        }
        if (this.groupName === 'left' || this.groupName === 'right') {
            const { left, right } = this.columnsGroup();
            if (this.groupName === 'left' && !left.length) {
                return;
            }
            if (this.groupName === 'right' && (!right.length || (right.length === 1 && right[0].field === '_datagrid-setting-control_'))) {
                return;
            }
        }
        this.options.groupName = this.groupName;
        this.disposeDnd();
        if (this.enableDrag) {
            this.container = SmoothDnDForHeader(this.el.nativeElement, this.options);
            this.dndSer.backupColumns(this.header.columns);
        }
    }
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    getChildPayload(index) {
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                index--;
            }
            if (this.dg.showLineNumber) {
                index--;
            }
        }
        /** @type {?} */
        const groupColumns = this.columnsGroup();
        if (this.groupName === 'left') {
            return groupColumns.left.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => this.dg.columnIsVisible(n)))[index];
        }
        else if (this.groupName === 'right') {
            return groupColumns.right.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => this.dg.columnIsVisible(n)))[index];
        }
        else {
            return groupColumns.middle.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            (n, i) => this.dg.columnIsVisible(n)))[index];
        }
    }
    /**
     * @param {?} dropResult
     * @return {?}
     */
    onDropReady(dropResult) {
    }
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    onDrop(dropResult) {
        const { addedIndex, payload, removedIndex } = dropResult;
        if (addedIndex === null) {
            return;
        }
        /** @type {?} */
        const groupColumns = this.columnsGroup();
        /** @type {?} */
        const cols = this.dg.columns[0];
        /** @type {?} */
        const currIndex = cols.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field === payload.field));
        /** @type {?} */
        let newIndex = addedIndex;
        /** @type {?} */
        const moveColumn = (/**
         * @param {?} columns
         * @return {?}
         */
        (columns) => {
            if (columns) {
                /** @type {?} */
                const targetColumn = columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.visible || n.visible === undefined))[newIndex];
                if (targetColumn) {
                    /** @type {?} */
                    const realTagetIndex = cols.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.field === targetColumn.field));
                    this.dg.columns[0] = this.dndSer.moveItem(this.dg.columns[0], realTagetIndex, currIndex);
                    return true;
                }
            }
            return false;
        });
        /** @type {?} */
        let columns = [];
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                newIndex--;
            }
            if (this.dg.showLineNumber) {
                newIndex--;
            }
            columns = groupColumns.left;
        }
        else if (this.groupName === 'center') {
            columns = groupColumns.middle;
        }
        else if (this.groupName === 'right') {
            columns = groupColumns.right;
        }
        if (moveColumn(columns)) {
            this.dg.columnsChanged(false);
            if (this.dg.useControlPanel && this.dg.settingService) {
                this.dg.settingService.saveUserConfig(this.dg.id);
            }
            this.dg.columnMoved.emit({ newColumns: this.dg.columns, grid: this.dg });
        }
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragStart(info) {
    }
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    onDragEnd(info) {
    }
    /**
     * @private
     * @return {?}
     */
    onDragEnter() {
    }
    /**
     * @private
     * @return {?}
     */
    columnsGroup() {
        /** @type {?} */
        const leftColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'left'));
        /** @type {?} */
        const rightColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed === 'right'));
        /** @type {?} */
        const middleColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.fixed !== 'right' && n.fixed !== 'left'));
        return {
            left: leftColumns,
            right: rightColumns,
            middle: middleColumns
        };
    }
}
DragColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[drag-column]',
                providers: [
                    DragDropColumnService
                ]
            },] }
];
/** @nocollapse */
DragColumnDirective.ctorParameters = () => [
    { type: NgZone },
    { type: Injector },
    { type: Renderer2 },
    { type: ElementRef },
    { type: DatagridHeaderComponent },
    { type: DatagridComponent },
    { type: DragDropColumnService }
];
DragColumnDirective.propDecorators = {
    enableDrag: [{ type: Input, args: ['drag-column',] }],
    groupName: [{ type: Input }],
    options: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.container;
    /** @type {?} */
    DragColumnDirective.prototype.enableDrag;
    /** @type {?} */
    DragColumnDirective.prototype.groupName;
    /** @type {?} */
    DragColumnDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.header;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dndSer;
}
//# sourceMappingURL=data:application/json;base64,