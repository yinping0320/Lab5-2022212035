/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
export class HeaderStyleDirective {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     */
    constructor(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.groupHeader = false;
        this.dg = null;
        this.dg = this.inject.get(DatagridComponent);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.renderCss2Element();
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // 启用表头自提示
        if (this.column.halign && this.column.halign !== 'left') {
            /** @type {?} */
            const tipEl = this.el.nativeElement.querySelector('.farris-label-tips');
            if (tipEl && tipEl.parentElement && tipEl.parentElement.nodeName == 'DIV') {
                this.render.setStyle(tipEl.parentElement, 'width', '100%');
                if (this.column.halign === 'right') {
                    this.render.setStyle(tipEl.parentElement, 'justify-content', 'end');
                }
                else {
                    this.render.setStyle(tipEl.parentElement, 'justify-content', 'center');
                }
            }
            else {
                if (this.groupHeader) {
                    if (this.column.halign === 'right') {
                        this.render.setStyle(this.el.nativeElement, 'justify-content', 'end');
                    }
                    else {
                        this.render.setStyle(this.el.nativeElement, 'justify-content', 'center');
                    }
                }
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    renderCss2Element() {
        if (this.column && this.column.headerStyler) {
            /** @type {?} */
            const styler = this.column.headerStyler;
            /** @type {?} */
            const dom = this.el.nativeElement;
            /** @type {?} */
            const st = typeof this.column.headerStyler;
            if (st === 'string') {
                this.render.addClass(this.el.nativeElement, (/** @type {?} */ (styler)));
            }
            else if (st === 'function') {
                /** @type {?} */
                const r = ((/** @type {?} */ (this.column.headerStyler)))(this.column);
                if (r.cls) {
                    this.render.addClass(this.el.nativeElement, r.cls);
                }
                if (r.style) {
                    this.renderStyle(dom, r.style);
                }
            }
            else if (st === 'object' && Object.keys(st).length) {
                this.renderStyle(dom, styler);
            }
        }
    }
    /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    renderStyle(targetEl, styleObj) {
        /** @type {?} */
        const clskey = `${this.dg.customStyleKey()} td[field="${this.column.field}"] span.f-datagrid-header-cell-title`;
        this.dg.renderCustomStyle2({ style: styleObj }, targetEl, clskey);
        /** @type {?} */
        const tdClskey = `${this.dg.customStyleKey()} td[field="${this.column.field}"].f-datagrid-header-cell`;
        this.dg.renderCustomStyle2({ style: styleObj }, targetEl, tdClskey);
        /** @type {?} */
        const bg = Object.keys(styleObj).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.toLowerCase().indexOf('background') > -1));
        if (bg && bg.length) {
            /** @type {?} */
            const _bgcolor = styleObj[bg[bg.length - 1]];
            /** @type {?} */
            const tdClskey2 = `${this.dg.customStyleKey()} td[field="${this.column.field}"] div.f-datagrid-header-cell-content::after`;
            this.dg.renderCustomStyle2({ style: { 'background-color': _bgcolor } }, targetEl, tdClskey2);
        }
    }
}
HeaderStyleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[header-style]',
                exportAs: 'HeaderStyler'
            },] }
];
/** @nocollapse */
HeaderStyleDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
HeaderStyleDirective.propDecorators = {
    column: [{ type: Input, args: ['header-style',] }],
    groupHeader: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    HeaderStyleDirective.prototype.column;
    /** @type {?} */
    HeaderStyleDirective.prototype.groupHeader;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,