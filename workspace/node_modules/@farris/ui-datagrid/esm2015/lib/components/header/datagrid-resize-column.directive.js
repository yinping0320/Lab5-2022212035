/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, NgZone, ElementRef, Renderer2, Optional, HostListener } from '@angular/core';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { fromEvent } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-10 09:04:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-20 17:09:09
 * @QQ: 1055818239
 * @Version: v0.0.12
 */
export class DatagridResizeColumnDirective {
    /**
     * @param {?} dh
     * @param {?} ngzone
     * @param {?} el
     * @param {?} render
     */
    constructor(dh, ngzone, el, render) {
        this.dh = dh;
        this.ngzone = ngzone;
        this.el = el;
        this.render = render;
        this.dg = this.dh.dg;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        if (this.isEnable()) {
            this.render.addClass(this.el.nativeElement, 'f-datagrid-header-cell-resize');
            this.resizer = document.createElement('span');
            this.resizer.className = 'column-resize-bar';
            this.el.nativeElement.appendChild(this.resizer);
            this.ngzone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                // this.resizerMouseDownListener = this.onMouseDown.bind(this);
                // this.resizer.addEventListener('mousedown', this.resizerMouseDownListener);
                /** @type {?} */
                const mouseUp$ = fromEvent(this.resizer, 'mouseup');
                this.resizerMouseDownListener = fromEvent(this.resizer, 'mousedown').pipe(
                // debounceTime(260),
                takeUntil(mouseUp$)).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => this.onMouseDown(e)));
            }));
            // const mouse$ = fromEvent(this.resizer, 'click');
            // const buff$ = mouse$.pipe(
            //     debounceTime(250)
            // );
            // const click$ = mouse$.pipe(
            //     buffer(buff$),
            //     map(list => {
            //         return {event: list[0], count: list.length};
            //     }),
            //     filter(x => x.count === 2),
            //     map(x => x.event),
            //     takeUntil(mouseUp$)
            // );
            // click$.subscribe((e) => {
            //     this.onDblClickHandler(e);
            //     // this.onMouseUp(e);
            // });
        }
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    onDblClickHandler($event) {
        if ($event && $event.target && $event.target.className.indexOf('f-datagrid-sort') > -1) {
            return;
        }
        if (this.col.field && this.col.field !== this.dg.ControlPanelFeild) {
            /** @type {?} */
            const thRef = this.el;
            this.dg.sizeToContent(this.col, thRef);
        }
        return false;
    }
    /**
     * @private
     * @return {?}
     */
    isEnable() {
        if (this.dg.resizeColumn) {
            if (this.col.field === this.dg.ControlPanelFeild) {
                this.col.resizable = false;
            }
            if (this.col.resizable === undefined) {
                this.col.resizable = true;
            }
            return this.col.resizable;
        }
        return false;
    }
    /**
     * @return {?}
     */
    bindDocumentEvents() {
        this.ngzone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            this.documentMouseMoveListener = this.onMouseMove.bind(this);
            document.addEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseUpListener = this.onMouseUp.bind(this);
            document.addEventListener('mouseup', this.documentMouseUpListener);
        }));
    }
    /**
     * @return {?}
     */
    unbindDocumentEvents() {
        if (this.documentMouseMoveListener) {
            document.removeEventListener('mousemove', this.documentMouseMoveListener);
            this.documentMouseMoveListener = null;
        }
        if (this.documentMouseUpListener) {
            document.removeEventListener('mouseup', this.documentMouseUpListener);
            this.documentMouseUpListener = null;
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        event.stopPropagation();
        this.dg.onColumnResizeBegin(event);
        this.render.addClass(this.el.nativeElement, 'column-resizeing');
        this.bindDocumentEvents();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        this.dg.onColumnResize(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        this.dg.onColumnResizeEnd(event, this.col);
        this.render.removeClass(this.el.nativeElement, 'column-resizeing');
        this.unbindDocumentEvents();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.resizerMouseDownListener) {
            // this.resizer.removeEventListener('mousedown', this.resizerMouseDownListener);
            this.resizerMouseDownListener.unsubscribe();
        }
        this.unbindDocumentEvents();
        if (this.dblclickListener) {
            this.dblclickListener();
        }
        this.resizer = null;
    }
}
DatagridResizeColumnDirective.decorators = [
    { type: Directive, args: [{
                selector: '[resize-column]',
            },] }
];
/** @nocollapse */
DatagridResizeColumnDirective.ctorParameters = () => [
    { type: DatagridHeaderComponent, decorators: [{ type: Optional }] },
    { type: NgZone },
    { type: ElementRef },
    { type: Renderer2 }
];
DatagridResizeColumnDirective.propDecorators = {
    col: [{ type: Input, args: ['resize-column',] }],
    onDblClickHandler: [{ type: HostListener, args: ['dblclick', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.col;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizer;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.resizerMouseDownListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseMoveListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.documentMouseUpListener;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dblclickListener;
    /**
     * @type {?}
     * @private
     */
    DatagridResizeColumnDirective.prototype.dg;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.dh;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.ngzone;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.el;
    /** @type {?} */
    DatagridResizeColumnDirective.prototype.render;
}
//# sourceMappingURL=data:application/json;base64,