/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Component, EventEmitter, Input, Output, ElementRef, Renderer2, Injector, ViewChild } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { takeUntil } from 'rxjs/operators';
export class SmartFilterToolbarComponent {
    /**
     * @param {?} el
     * @param {?} render
     * @param {?} inject
     */
    constructor(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.padding = '';
        this.height = 40;
        this.filterData = [];
        this.clearFilters = new EventEmitter();
        this.removeFilter = new EventEmitter();
        this.filterChange = new EventEmitter();
        this.resize = new EventEmitter();
        this.sk = '';
        this.destory$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.dg = this.inject.get(DatagridComponent);
        this.sk = 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id);
        this.dg.dgs.clearFilter.pipe(takeUntil(this.destory$)).subscribe((/**
         * @return {?}
         */
        () => {
            this.clearFilters.emit(null);
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destory$.next();
        this.destory$.complete();
    }
    /**
     * 条件变化事件
     * @param {?} $event
     * @return {?}
     */
    onQuery($event) {
        const { data, filterItem } = $event;
        if (data && data.length) {
            /** @type {?} */
            const conditions = JSON.parse(data);
            if (conditions && conditions.length) {
                this.filterChange.emit({ conditions, filterItem });
            }
        }
    }
    /**
     * 清除所有条件
     * @param {?} $event
     * @return {?}
     */
    onResetFilter($event) {
        this.clearFilters.emit($event);
    }
    /**
     * 移除单个条件
     * @param {?} $event
     * @return {?}
     */
    onRemoveFilter($event) {
        this.removeFilter.emit($event);
    }
    /**
     * 展开折叠事件
     * @param {?} $event
     * @return {?}
     */
    onResize($event) {
        setTimeout((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const smartFilterWrapper = this.el.nativeElement.querySelector('.f-filter-wrapper');
            if (smartFilterWrapper) {
                /** @type {?} */
                const h = smartFilterWrapper.offsetHeight;
                if (h) {
                    this.resize.emit(h + 6);
                }
            }
        }));
    }
}
SmartFilterToolbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'smart-filter-toolbar',
                template: "\r\n<div class=\"f-datagrid-filter-toolbar\" [style.height.px]=\"height\" \r\n[style.padding]=\"padding\" placeholder=\"\u6B64\u5904\u663E\u793A\u5217\u8FC7\u6EE4\u6761\u4EF6\" style=\"align-items: normal;\"\r\n[style.display]=\"filterData && filterData.length ? '' : 'none'\">\r\n<farris-filter [filterList]=\"filterData\" (query)=\"onQuery($event)\"  #farrisFilter\r\n    (resetChange)=\"onResetFilter($event)\" (clearFilter)=\"onRemoveFilter($event)\"\r\n    (filterResize)=\"onResize($event)\" (expandFilter)=\"onResize($event)\"\r\n    [localStorageKey]=\"sk\"\r\n>\r\n</farris-filter>\r\n\r\n</div>"
            }] }
];
/** @nocollapse */
SmartFilterToolbarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 },
    { type: Injector }
];
SmartFilterToolbarComponent.propDecorators = {
    padding: [{ type: Input }],
    height: [{ type: Input }],
    filterData: [{ type: Input }],
    clearFilters: [{ type: Output }],
    removeFilter: [{ type: Output }],
    filterChange: [{ type: Output }],
    resize: [{ type: Output }],
    filtebar: [{ type: ViewChild, args: ['farrisFilter',] }]
};
if (false) {
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.padding;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.height;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterData;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.clearFilters;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.removeFilter;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterChange;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.resize;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filtebar;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.sk;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.dg;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.destory$;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpbHRlci10b29sYmFyL3NtYXJ0LWZpbHRlci10b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUE0QixTQUFTLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzFLLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQU0zQyxNQUFNLE9BQU8sMkJBQTJCOzs7Ozs7SUFjcEMsWUFBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0I7UUFBbkUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBYjlFLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNmLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWxDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3RDLE9BQUUsR0FBRyxFQUFFLENBQUM7UUFFUixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUNrRSxDQUFDOzs7O0lBRTVGLFFBQVE7UUFDSixJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFvQixpQkFBaUIsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxFQUFFLEdBQUksY0FBYyxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBR3BFLElBQUksQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLFNBQVM7OztRQUFDLEdBQUcsRUFBRTtZQUNsRSxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNqQyxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO0lBQ2xDLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7OztJQUdELE9BQU8sQ0FBQyxNQUFNO2NBQ0osRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLEdBQUcsTUFBTTtRQUNuQyxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFOztrQkFDZixVQUFVLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUM7WUFDbkMsSUFBSSxVQUFVLElBQUksVUFBVSxDQUFDLE1BQU0sRUFBRTtnQkFDakMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBQyxVQUFVLEVBQUUsVUFBVSxFQUFDLENBQUMsQ0FBQzthQUNwRDtTQUNKO0lBQ0wsQ0FBQzs7Ozs7O0lBR0QsYUFBYSxDQUFDLE1BQU07UUFDaEIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7O0lBR0QsY0FBYyxDQUFDLE1BQU07UUFDakIsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7Ozs7O0lBR0QsUUFBUSxDQUFDLE1BQU07UUFDWCxVQUFVOzs7UUFBQyxHQUFHLEVBQUU7O2tCQUNOLGtCQUFrQixHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLGFBQWEsQ0FBQyxtQkFBbUIsQ0FBQztZQUNuRixJQUFJLGtCQUFrQixFQUFFOztzQkFDZCxDQUFDLEdBQUcsa0JBQWtCLENBQUMsWUFBWTtnQkFDekMsSUFBSSxDQUFDLEVBQUU7b0JBQ0gsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO2lCQUMzQjthQUNKO1FBQ0wsQ0FBQyxFQUFDLENBQUM7SUFDUCxDQUFDOzs7WUF0RUosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxzQkFBc0I7Z0JBQ2hDLHdtQkFBb0Q7YUFDdkQ7Ozs7WUFQd0QsVUFBVTtZQUFFLFNBQVM7WUFBRSxRQUFROzs7c0JBU25GLEtBQUs7cUJBQ0wsS0FBSzt5QkFDTCxLQUFLOzJCQUNMLE1BQU07MkJBQ04sTUFBTTsyQkFDTixNQUFNO3FCQUVOLE1BQU07dUJBRU4sU0FBUyxTQUFDLGNBQWM7Ozs7SUFUekIsOENBQXNCOztJQUN0Qiw2Q0FBcUI7O0lBQ3JCLGlEQUF5Qjs7SUFDekIsbURBQTRDOztJQUM1QyxtREFBNEM7O0lBQzVDLG1EQUE0Qzs7SUFFNUMsNkNBQXNDOztJQUV0QywrQ0FBeUM7O0lBQ3pDLHlDQUFROztJQUNSLHlDQUFzQjs7SUFDdEIsK0NBQXlCOzs7OztJQUNiLHlDQUFzQjs7Ozs7SUFBRSw2Q0FBeUI7Ozs7O0lBQUUsNkNBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBFbGVtZW50UmVmLCBSZW5kZXJlcjIsIEluamVjdG9yLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZCwgT3B0aW9uYWwsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IHRha2VVbnRpbCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzbWFydC1maWx0ZXItdG9vbGJhcicsXHJcbiAgICB0ZW1wbGF0ZVVybDogJy4vc21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50Lmh0bWwnLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU21hcnRGaWx0ZXJUb29sYmFyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMsIE9uRGVzdHJveSB7XHJcbiAgICBASW5wdXQoKSBwYWRkaW5nID0gJyc7XHJcbiAgICBASW5wdXQoKSBoZWlnaHQgPSA0MDtcclxuICAgIEBJbnB1dCgpIGZpbHRlckRhdGEgPSBbXTtcclxuICAgIEBPdXRwdXQoKSBjbGVhckZpbHRlcnMgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcbiAgICBAT3V0cHV0KCkgcmVtb3ZlRmlsdGVyID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIGZpbHRlckNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAT3V0cHV0KCkgcmVzaXplID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2ZhcnJpc0ZpbHRlcicpIGZpbHRlYmFyOiBhbnk7XHJcbiAgICBzayA9ICcnO1xyXG4gICAgZGc6IERhdGFncmlkQ29tcG9uZW50O1xyXG4gICAgZGVzdG9yeSQgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSByZW5kZXI6IFJlbmRlcmVyMiwgcHJpdmF0ZSBpbmplY3Q6IEluamVjdG9yKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRnID0gdGhpcy5pbmplY3QuZ2V0PERhdGFncmlkQ29tcG9uZW50PihEYXRhZ3JpZENvbXBvbmVudCk7XHJcbiAgICAgICAgdGhpcy5zayA9ICAnc21hcnRmaWx0ZXJfJyArIHRoaXMuZGcuZGdzLmNyZWF0ZUNvbmZpZ0tleSh0aGlzLmRnLmlkKTtcclxuXHJcblxyXG4gICAgICAgIHRoaXMuZGcuZGdzLmNsZWFyRmlsdGVyLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdG9yeSQpKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyRmlsdGVycy5lbWl0KG51bGwpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmRlc3RvcnkkLm5leHQoKTtcclxuICAgICAgICB0aGlzLmRlc3RvcnkkLmNvbXBsZXRlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOadoeS7tuWPmOWMluS6i+S7tiAqL1xyXG4gICAgb25RdWVyeSgkZXZlbnQpIHtcclxuICAgICAgICBjb25zdCB7IGRhdGEsIGZpbHRlckl0ZW0gfSA9ICRldmVudDtcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjb25zdCBjb25kaXRpb25zID0gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgICAgICAgICAgaWYgKGNvbmRpdGlvbnMgJiYgY29uZGl0aW9ucy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlsdGVyQ2hhbmdlLmVtaXQoe2NvbmRpdGlvbnMsIGZpbHRlckl0ZW19KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKiog5riF6Zmk5omA5pyJ5p2h5Lu2ICovXHJcbiAgICBvblJlc2V0RmlsdGVyKCRldmVudCkge1xyXG4gICAgICAgIHRoaXMuY2xlYXJGaWx0ZXJzLmVtaXQoJGV2ZW50KTtcclxuICAgIH1cclxuXHJcbiAgICAvKiog56e76Zmk5Y2V5Liq5p2h5Lu2ICovXHJcbiAgICBvblJlbW92ZUZpbHRlcigkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLnJlbW92ZUZpbHRlci5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWxleW8gOaKmOWPoOS6i+S7tiAqL1xyXG4gICAgb25SZXNpemUoJGV2ZW50KSB7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHNtYXJ0RmlsdGVyV3JhcHBlciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZi1maWx0ZXItd3JhcHBlcicpO1xyXG4gICAgICAgICAgICBpZiAoc21hcnRGaWx0ZXJXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoID0gc21hcnRGaWx0ZXJXcmFwcGVyLm9mZnNldEhlaWdodDtcclxuICAgICAgICAgICAgICAgIGlmIChoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXNpemUuZW1pdChoICsgNik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19