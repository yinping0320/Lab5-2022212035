/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Pipe, Injector } from '@angular/core';
import { ColumnFormatService } from '@farris/ui-common/column';
import { Utils } from './../../utils/utils';
export class CellTootipMessagePipe {
    /**
     * @param {?} injector
     */
    constructor(injector) {
        this.injector = injector;
    }
    /**
     * @param {?} col
     * @param {...?} args
     * @return {?}
     */
    transform(col, ...args) {
        if (col.showTips) {
            this.colFormatSer = this.injector.get(ColumnFormatService);
            /** @type {?} */
            const msg = this.getCellTooltipContent(col, args[0]);
            return msg;
        }
        return '';
    }
    /**
     * @private
     * @param {?} col
     * @param {?} rowData
     * @return {?}
     */
    getCellTooltipContent(col, rowData) {
        /** @type {?} */
        let txt = Utils.getValue(col.field, rowData);
        if (col.tipContent) {
            if (typeof col.tipContent === 'string') {
                txt = col.tipContent;
            }
            else {
                if (typeof col.tipContent === 'function') {
                    txt = col.tipContent(txt, rowData, col);
                }
            }
        }
        else {
            if (col.formatter && (typeof col.formatter === 'function' ||
                (typeof col.formatter === 'object' && Object.keys(col.formatter).length))) {
                txt = this.colFormatSer.format(txt, rowData, col.formatter);
            }
            else {
                txt = Utils.escapeValue(txt);
            }
        }
        return txt;
    }
}
CellTootipMessagePipe.decorators = [
    { type: Pipe, args: [{ name: 'tipmsg', pure: false },] }
];
/** @nocollapse */
CellTootipMessagePipe.ctorParameters = () => [
    { type: Injector }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CellTootipMessagePipe.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    CellTootipMessagePipe.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlwLW1lc3NhZ2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy90b29sdGlwL3RpcC1tZXNzYWdlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQWlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFJNUMsTUFBTSxPQUFPLHFCQUFxQjs7OztJQUc5QixZQUFxQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ3ZDLENBQUM7Ozs7OztJQUVELFNBQVMsQ0FBQyxHQUFRLEVBQUUsR0FBRyxJQUFXO1FBQzlCLElBQUksR0FBRyxDQUFDLFFBQVEsRUFBRTtZQUNkLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7a0JBQ3JELEdBQUcsR0FBRyxJQUFJLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUNwRCxPQUFPLEdBQUcsQ0FBQztTQUNkO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDOzs7Ozs7O0lBRU8scUJBQXFCLENBQUMsR0FBZSxFQUFFLE9BQU87O1lBQzlDLEdBQUcsR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDO1FBQzVDLElBQUksR0FBRyxDQUFDLFVBQVUsRUFBRTtZQUNoQixJQUFLLE9BQU8sR0FBRyxDQUFDLFVBQVUsS0FBSyxRQUFRLEVBQUU7Z0JBQ3JDLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDO2FBQ3hCO2lCQUFNO2dCQUNILElBQUksT0FBTyxHQUFHLENBQUMsVUFBVSxLQUFLLFVBQVUsRUFBRTtvQkFDdEMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxVQUFVLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztpQkFDM0M7YUFDSjtTQUNKO2FBQU07WUFDSCxJQUFJLEdBQUcsQ0FBQyxTQUFTLElBQUksQ0FBQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLEtBQUssVUFBVTtnQkFDckQsQ0FBQyxPQUFPLEdBQUcsQ0FBQyxTQUFTLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQzNFLEdBQUcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsQ0FBQyxTQUFTLENBQUMsQ0FBQzthQUMvRDtpQkFBTTtnQkFDSCxHQUFHLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNoQztTQUNKO1FBQ0QsT0FBTyxHQUFHLENBQUM7SUFDZixDQUFDOzs7WUFuQ0osSUFBSSxTQUFDLEVBQUUsSUFBSSxFQUFFLFFBQVEsRUFBRyxJQUFJLEVBQUUsS0FBSyxFQUFDOzs7O1lBTFAsUUFBUTs7Ozs7OztJQVFsQyw2Q0FBMEM7Ozs7O0lBQzdCLHlDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0sIEluamVjdG9yIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbHVtbkZvcm1hdFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5pbXBvcnQgeyBVdGlscyB9IGZyb20gJy4vLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBEYXRhQ29sdW1uIH0gZnJvbSAnLi8uLi8uLi90eXBlcy9kYXRhLWNvbHVtbic7XHJcblxyXG5AUGlwZSh7IG5hbWU6ICd0aXBtc2cnICwgcHVyZTogZmFsc2V9KVxyXG5leHBvcnQgY2xhc3MgQ2VsbFRvb3RpcE1lc3NhZ2VQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgcHJpdmF0ZSBjb2xGb3JtYXRTZXI6IENvbHVtbkZvcm1hdFNlcnZpY2U7XHJcbiAgICBjb25zdHJ1Y3RvciggcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcclxuICAgIH1cclxuXHJcbiAgICB0cmFuc2Zvcm0oY29sOiBhbnksIC4uLmFyZ3M6IGFueVtdKSB7XHJcbiAgICAgICAgaWYgKGNvbC5zaG93VGlwcykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbEZvcm1hdFNlciA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbHVtbkZvcm1hdFNlcnZpY2UpO1xyXG4gICAgICAgICAgICBjb25zdCBtc2cgPSB0aGlzLmdldENlbGxUb29sdGlwQ29udGVudChjb2wsIGFyZ3NbMF0pO1xyXG4gICAgICAgICAgICByZXR1cm4gbXNnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJyc7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDZWxsVG9vbHRpcENvbnRlbnQoY29sOiBEYXRhQ29sdW1uLCByb3dEYXRhKSB7XHJcbiAgICAgICAgbGV0IHR4dCA9IFV0aWxzLmdldFZhbHVlKGNvbC5maWVsZCwgcm93RGF0YSk7XHJcbiAgICAgICAgaWYgKGNvbC50aXBDb250ZW50KSB7XHJcbiAgICAgICAgICAgIGlmICggdHlwZW9mIGNvbC50aXBDb250ZW50ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAgICAgdHh0ID0gY29sLnRpcENvbnRlbnQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbC50aXBDb250ZW50ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHh0ID0gY29sLnRpcENvbnRlbnQodHh0LCByb3dEYXRhLCBjb2wpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGNvbC5mb3JtYXR0ZXIgJiYgKHR5cGVvZiBjb2wuZm9ybWF0dGVyID09PSAnZnVuY3Rpb24nIHx8XHJcbiAgICAgICAgICAgICAgICAodHlwZW9mIGNvbC5mb3JtYXR0ZXIgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKGNvbC5mb3JtYXR0ZXIpLmxlbmd0aCkpKSB7XHJcbiAgICAgICAgICAgICAgICB0eHQgPSB0aGlzLmNvbEZvcm1hdFNlci5mb3JtYXQodHh0LCByb3dEYXRhLCBjb2wuZm9ybWF0dGVyKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHR4dCA9IFV0aWxzLmVzY2FwZVZhbHVlKHR4dCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHR4dDtcclxuICAgIH1cclxufVxyXG4iXX0=