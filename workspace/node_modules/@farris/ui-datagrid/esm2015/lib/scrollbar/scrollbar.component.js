/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject, merge, fromEvent } from 'rxjs';
import { mapTo, takeUntil, distinctUntilChanged } from 'rxjs/operators';
import { PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { NgZone, Inject, Component, Input, Output, EventEmitter, HostBinding, ViewChild, ViewEncapsulation, ChangeDetectorRef } from '@angular/core';
import { ScrollbarDirective } from './scrollbar.directive';
import { ScrollbarEvents } from './scrollbar.interfaces';
// styleUrls: [
//     './scrollbar.component.css'
// ],
export class ScrollbarComponent {
    /**
     * @param {?} zone
     * @param {?} cdRef
     * @param {?} platformId
     */
    constructor(zone, cdRef, platformId) {
        this.zone = zone;
        this.cdRef = cdRef;
        this.platformId = platformId;
        this.states = {};
        this.indicatorX = false;
        this.indicatorY = false;
        this.interaction = false;
        this.scrollPositionX = 0;
        this.scrollPositionY = 0;
        this.scrollDirectionX = 0;
        this.scrollDirectionY = 0;
        this.usePropagationX = false;
        this.usePropagationY = false;
        this.allowPropagationX = false;
        this.allowPropagationY = false;
        this.stateTimeout = null;
        this.ngDestroy = new Subject();
        this.stateUpdate = new Subject();
        this.disabled = false;
        this.usePSClass = true;
        this.autoPropagation = false;
        this.scrollIndicators = false;
        this.psScrollY = new EventEmitter();
        this.psScrollX = new EventEmitter();
        this.psScrollUp = new EventEmitter();
        this.psScrollDown = new EventEmitter();
        this.psScrollLeft = new EventEmitter();
        this.psScrollRight = new EventEmitter();
        this.psYReachEnd = new EventEmitter();
        this.psYReachStart = new EventEmitter();
        this.psXReachEnd = new EventEmitter();
        this.psXReachStart = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        if (isPlatformBrowser(this.platformId)) {
            this.stateUpdate
                .pipe(takeUntil(this.ngDestroy))
                .pipe(distinctUntilChanged((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => (a === b && !this.stateTimeout))))
                .subscribe((/**
             * @param {?} state
             * @return {?}
             */
            (state) => {
                if (this.stateTimeout && typeof window !== 'undefined') {
                    window.clearTimeout(this.stateTimeout);
                    this.stateTimeout = null;
                }
                if (state === 'x' || state === 'y') {
                    this.interaction = false;
                    if (state === 'x') {
                        this.indicatorX = false;
                        this.states.left = false;
                        this.states.right = false;
                        if (this.autoPropagation && this.usePropagationX) {
                            this.allowPropagationX = false;
                        }
                    }
                    else if (state === 'y') {
                        this.indicatorY = false;
                        this.states.top = false;
                        this.states.bottom = false;
                        if (this.autoPropagation && this.usePropagationY) {
                            this.allowPropagationY = false;
                        }
                    }
                }
                else {
                    if (state === 'left' || state === 'right') {
                        this.states.left = false;
                        this.states.right = false;
                        this.states[state] = true;
                        if (this.autoPropagation && this.usePropagationX) {
                            this.indicatorX = true;
                        }
                    }
                    else if (state === 'top' || state === 'bottom') {
                        this.states.top = false;
                        this.states.bottom = false;
                        this.states[state] = true;
                        if (this.autoPropagation && this.usePropagationY) {
                            this.indicatorY = true;
                        }
                    }
                    if (this.autoPropagation && typeof window !== 'undefined') {
                        this.stateTimeout = window.setTimeout((/**
                         * @return {?}
                         */
                        () => {
                            this.indicatorX = false;
                            this.indicatorY = false;
                            this.stateTimeout = null;
                            if (this.interaction && (this.states.left || this.states.right)) {
                                this.allowPropagationX = true;
                            }
                            if (this.interaction && (this.states.top || this.states.bottom)) {
                                this.allowPropagationY = true;
                            }
                            this.cdRef.markForCheck();
                        }), 500);
                    }
                }
                this.cdRef.markForCheck();
                this.cdRef.detectChanges();
            }));
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                if (this.directiveRef) {
                    /** @type {?} */
                    const element = this.directiveRef.elementRef.nativeElement;
                    fromEvent(element, 'wheel')
                        .pipe(takeUntil(this.ngDestroy))
                        .subscribe((/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        if (!this.disabled && this.autoPropagation) {
                            /** @type {?} */
                            const scrollDeltaX = event.deltaX;
                            /** @type {?} */
                            const scrollDeltaY = event.deltaY;
                            this.checkPropagation(event, scrollDeltaX, scrollDeltaY);
                        }
                    }));
                    fromEvent(element, 'touchmove')
                        .pipe(takeUntil(this.ngDestroy))
                        .subscribe((/**
                     * @param {?} event
                     * @return {?}
                     */
                    (event) => {
                        if (!this.disabled && this.autoPropagation) {
                            /** @type {?} */
                            const scrollPositionX = event.touches[0].clientX;
                            /** @type {?} */
                            const scrollPositionY = event.touches[0].clientY;
                            /** @type {?} */
                            const scrollDeltaX = scrollPositionX - this.scrollPositionX;
                            /** @type {?} */
                            const scrollDeltaY = scrollPositionY - this.scrollPositionY;
                            this.checkPropagation(event, scrollDeltaX, scrollDeltaY);
                            this.scrollPositionX = scrollPositionX;
                            this.scrollPositionY = scrollPositionY;
                        }
                    }));
                    merge(fromEvent(element, 'ps-scroll-x')
                        .pipe(mapTo('x')), fromEvent(element, 'ps-scroll-y')
                        .pipe(mapTo('y')), fromEvent(element, 'ps-x-reach-end')
                        .pipe(mapTo('right')), fromEvent(element, 'ps-y-reach-end')
                        .pipe(mapTo('bottom')), fromEvent(element, 'ps-x-reach-start')
                        .pipe(mapTo('left')), fromEvent(element, 'ps-y-reach-start')
                        .pipe(mapTo('top')))
                        .pipe(takeUntil(this.ngDestroy))
                        .subscribe((/**
                     * @param {?} state
                     * @return {?}
                     */
                    (state) => {
                        if (!this.disabled && (this.autoPropagation || this.scrollIndicators)) {
                            this.stateUpdate.next(state);
                        }
                    }));
                }
            }));
            window.setTimeout((/**
             * @return {?}
             */
            () => {
                ScrollbarEvents.forEach((/**
                 * @param {?} eventName
                 * @return {?}
                 */
                (eventName) => {
                    if (this.directiveRef) {
                        this.directiveRef[eventName] = this[eventName];
                    }
                }));
            }), 0);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (isPlatformBrowser(this.platformId)) {
            this.ngDestroy.next();
            this.ngDestroy.unsubscribe();
            if (this.stateTimeout && typeof window !== 'undefined') {
                window.clearTimeout(this.stateTimeout);
            }
        }
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (isPlatformBrowser(this.platformId)) {
            if (!this.disabled && this.autoPropagation && this.directiveRef) {
                /** @type {?} */
                const element = this.directiveRef.elementRef.nativeElement;
                this.usePropagationX = element.classList.contains('ps--active-x');
                this.usePropagationY = element.classList.contains('ps--active-y');
            }
        }
    }
    /**
     * @private
     * @param {?} event
     * @param {?} deltaX
     * @param {?} deltaY
     * @return {?}
     */
    checkPropagation(event, deltaX, deltaY) {
        this.interaction = true;
        /** @type {?} */
        const scrollDirectionX = (deltaX < 0) ? -1 : 1;
        /** @type {?} */
        const scrollDirectionY = (deltaY < 0) ? -1 : 1;
        if ((this.usePropagationX && this.usePropagationY) ||
            (this.usePropagationX && (!this.allowPropagationX ||
                (this.scrollDirectionX !== scrollDirectionX))) ||
            (this.usePropagationY && (!this.allowPropagationY ||
                (this.scrollDirectionY !== scrollDirectionY)))) {
            event.preventDefault();
            event.stopPropagation();
        }
        if (!!deltaX) {
            this.scrollDirectionX = scrollDirectionX;
        }
        if (!!deltaY) {
            this.scrollDirectionY = scrollDirectionY;
        }
        this.stateUpdate.next('interaction');
        this.cdRef.detectChanges();
    }
}
ScrollbarComponent.decorators = [
    { type: Component, args: [{
                selector: 'scrollbar',
                exportAs: 'ngxScrollbar',
                template: "<div style=\"position: static;\" [class.ps]=\"usePSClass\" [scrollbar]=\"config\" [disabled]=\"disabled\">\r\n    <div class=\"ps-content\">\r\n      <ng-content></ng-content>\r\n    </div>\r\n  \r\n    <div *ngIf=\"scrollIndicators\" class=\"ps-overlay\" [class.ps-at-top]=\"states.top\" [class.ps-at-left]=\"states.left\" [class.ps-at-right]=\"states.right\" [class.ps-at-bottom]=\"states.bottom\">\r\n      <div class=\"ps-indicator-top\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div>\r\n      <div class=\"ps-indicator-left\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div>\r\n      <div class=\"ps-indicator-right\" [class.ps-indicator-show]=\"indicatorX && interaction\"></div>\r\n      <div class=\"ps-indicator-bottom\" [class.ps-indicator-show]=\"indicatorY && interaction\"></div>\r\n    </div>\r\n  </div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
ScrollbarComponent.ctorParameters = () => [
    { type: NgZone },
    { type: ChangeDetectorRef },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
ScrollbarComponent.propDecorators = {
    disabled: [{ type: Input }],
    usePSClass: [{ type: Input }],
    autoPropagation: [{ type: HostBinding, args: ['class.ps-show-limits',] }, { type: Input }],
    scrollIndicators: [{ type: HostBinding, args: ['class.ps-show-active',] }, { type: Input }],
    config: [{ type: Input }],
    psScrollY: [{ type: Output }],
    psScrollX: [{ type: Output }],
    psScrollUp: [{ type: Output }],
    psScrollDown: [{ type: Output }],
    psScrollLeft: [{ type: Output }],
    psScrollRight: [{ type: Output }],
    psYReachEnd: [{ type: Output }],
    psYReachStart: [{ type: Output }],
    psXReachEnd: [{ type: Output }],
    psXReachStart: [{ type: Output }],
    directiveRef: [{ type: ViewChild, args: [ScrollbarDirective,] }]
};
if (false) {
    /** @type {?} */
    ScrollbarComponent.prototype.states;
    /** @type {?} */
    ScrollbarComponent.prototype.indicatorX;
    /** @type {?} */
    ScrollbarComponent.prototype.indicatorY;
    /** @type {?} */
    ScrollbarComponent.prototype.interaction;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.scrollPositionX;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.scrollPositionY;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.scrollDirectionX;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.scrollDirectionY;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.usePropagationX;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.usePropagationY;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.allowPropagationX;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.allowPropagationY;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.stateTimeout;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.ngDestroy;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.stateUpdate;
    /** @type {?} */
    ScrollbarComponent.prototype.disabled;
    /** @type {?} */
    ScrollbarComponent.prototype.usePSClass;
    /** @type {?} */
    ScrollbarComponent.prototype.autoPropagation;
    /** @type {?} */
    ScrollbarComponent.prototype.scrollIndicators;
    /** @type {?} */
    ScrollbarComponent.prototype.config;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollY;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollX;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollUp;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollDown;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollLeft;
    /** @type {?} */
    ScrollbarComponent.prototype.psScrollRight;
    /** @type {?} */
    ScrollbarComponent.prototype.psYReachEnd;
    /** @type {?} */
    ScrollbarComponent.prototype.psYReachStart;
    /** @type {?} */
    ScrollbarComponent.prototype.psXReachEnd;
    /** @type {?} */
    ScrollbarComponent.prototype.psXReachStart;
    /** @type {?} */
    ScrollbarComponent.prototype.directiveRef;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.cdRef;
    /**
     * @type {?}
     * @private
     */
    ScrollbarComponent.prototype.platformId;
}
//# sourceMappingURL=data:application/json;base64,