/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const SCROLLBAR_CONFIG = new InjectionToken('PERFECT_SCROLLBAR_CONFIG');
export class Geometry {
    /**
     * @param {?} x
     * @param {?} y
     * @param {?} w
     * @param {?} h
     */
    constructor(x, y, w, h) {
        this.x = x;
        this.y = y;
        this.w = w;
        this.h = h;
    }
}
if (false) {
    /** @type {?} */
    Geometry.prototype.x;
    /** @type {?} */
    Geometry.prototype.y;
    /** @type {?} */
    Geometry.prototype.w;
    /** @type {?} */
    Geometry.prototype.h;
}
export class Position {
    /**
     * @param {?} x
     * @param {?} y
     */
    constructor(x, y) {
        this.x = x;
        this.y = y;
    }
}
if (false) {
    /** @type {?} */
    Position.prototype.x;
    /** @type {?} */
    Position.prototype.y;
}
/** @type {?} */
export const ScrollbarEvents = [
    'psScrollY',
    'psScrollX',
    'psScrollUp',
    'psScrollDown',
    'psScrollLeft',
    'psScrollRight',
    'psYReachEnd',
    'psYReachStart',
    'psXReachEnd',
    'psXReachStart'
];
/**
 * @record
 */
export function ScrollbarConfigInterface() { }
if (false) {
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.handlers;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.wheelSpeed;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.swipeEasing;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.suppressScrollX;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.suppressScrollY;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.wheelPropagation;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.useBothWheelAxes;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.scrollingThreshold;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.minScrollbarLength;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.maxScrollbarLength;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.scrollXMarginOffset;
    /** @type {?|undefined} */
    ScrollbarConfigInterface.prototype.scrollYMarginOffset;
}
export class ScrollbarConfig {
    /**
     * @param {?=} config
     */
    constructor(config = {}) {
        this.assign(config);
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    assign(config = {}) {
        for (const key in config) {
            this[(/** @type {?} */ (key))] = config[(/** @type {?} */ (key))];
        }
    }
}
if (false) {
    /** @type {?} */
    ScrollbarConfig.prototype.handlers;
    /** @type {?} */
    ScrollbarConfig.prototype.wheelSpeed;
    /** @type {?} */
    ScrollbarConfig.prototype.swipeEasing;
    /** @type {?} */
    ScrollbarConfig.prototype.suppressScrollX;
    /** @type {?} */
    ScrollbarConfig.prototype.suppressScrollY;
    /** @type {?} */
    ScrollbarConfig.prototype.wheelPropagation;
    /** @type {?} */
    ScrollbarConfig.prototype.useBothWheelAxes;
    /** @type {?} */
    ScrollbarConfig.prototype.scrollingThreshold;
    /** @type {?} */
    ScrollbarConfig.prototype.minScrollbarLength;
    /** @type {?} */
    ScrollbarConfig.prototype.maxScrollbarLength;
    /** @type {?} */
    ScrollbarConfig.prototype.scrollXMarginOffset;
    /** @type {?} */
    ScrollbarConfig.prototype.scrollYMarginOffset;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLmludGVyZmFjZXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL3Njcm9sbGJhci9zY3JvbGxiYXIuaW50ZXJmYWNlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFL0MsTUFBTSxPQUFPLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUM5QywwQkFBMEIsQ0FDN0I7QUFFRCxNQUFNLE9BQU8sUUFBUTs7Ozs7OztJQU9qQixZQUFZLENBQVMsRUFBRSxDQUFTLEVBQUUsQ0FBUyxFQUFFLENBQVM7UUFDbEQsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDWCxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ1gsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDZixDQUFDO0NBQ0o7OztJQVpHLHFCQUFpQjs7SUFDakIscUJBQWlCOztJQUVqQixxQkFBaUI7O0lBQ2pCLHFCQUFpQjs7QUFVckIsTUFBTSxPQUFPLFFBQVE7Ozs7O0lBSWpCLFlBQVksQ0FBMkIsRUFBRSxDQUEyQjtRQUNoRSxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNYLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNKOzs7SUFQRyxxQkFBbUM7O0lBQ25DLHFCQUFtQzs7O0FBb0J2QyxNQUFNLE9BQU8sZUFBZSxHQUFxQjtJQUM3QyxXQUFXO0lBQ1gsV0FBVztJQUVYLFlBQVk7SUFDWixjQUFjO0lBQ2QsY0FBYztJQUNkLGVBQWU7SUFFZixhQUFhO0lBQ2IsZUFBZTtJQUNmLGFBQWE7SUFDYixlQUFlO0NBQ2xCOzs7O0FBRUQsOENBbUJDOzs7SUFsQkcsNENBQW9COztJQUVwQiw4Q0FBb0I7O0lBQ3BCLCtDQUFzQjs7SUFFdEIsbURBQTBCOztJQUMxQixtREFBMEI7O0lBRTFCLG9EQUEyQjs7SUFDM0Isb0RBQTJCOztJQUUzQixzREFBNEI7O0lBRTVCLHNEQUE0Qjs7SUFDNUIsc0RBQTRCOztJQUU1Qix1REFBNkI7O0lBQzdCLHVEQUE2Qjs7QUFHakMsTUFBTSxPQUFPLGVBQWU7Ozs7SUFvQnhCLFlBQVksU0FBbUMsRUFBRTtRQUM3QyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Ozs7O0lBRU0sTUFBTSxDQUFDLFNBQW1DLEVBQUU7UUFDL0MsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLEVBQUU7WUFDdEIsSUFBSSxDQUFDLG1CQUFBLEdBQUcsRUFBeUIsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxtQkFBQSxHQUFHLEVBQWtDLENBQUMsQ0FBQztTQUN0RjtJQUNMLENBQUM7Q0FDSjs7O0lBNUJHLG1DQUEyQjs7SUFFM0IscUNBQTJCOztJQUMzQixzQ0FBNkI7O0lBRTdCLDBDQUFpQzs7SUFDakMsMENBQWlDOztJQUVqQywyQ0FBa0M7O0lBQ2xDLDJDQUFrQzs7SUFFbEMsNkNBQW1DOztJQUVuQyw2Q0FBbUM7O0lBQ25DLDZDQUFtQzs7SUFFbkMsOENBQW9DOztJQUNwQyw4Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNDUk9MTEJBUl9DT05GSUcgPSBuZXcgSW5qZWN0aW9uVG9rZW4oXHJcbiAgICAnUEVSRkVDVF9TQ1JPTExCQVJfQ09ORklHJ1xyXG4pO1xyXG5cclxuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyB3OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgaDogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHg6IG51bWJlciwgeTogbnVtYmVyLCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLncgPSB3O1xyXG4gICAgICAgIHRoaXMuaCA9IGg7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb3NpdGlvbiB7XHJcbiAgICBwdWJsaWMgeDogbnVtYmVyIHwgJ3N0YXJ0JyB8ICdlbmQnO1xyXG4gICAgcHVibGljIHk6IG51bWJlciB8ICdzdGFydCcgfCAnZW5kJztcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgfCAnc3RhcnQnIHwgJ2VuZCcsIHk6IG51bWJlciB8ICdzdGFydCcgfCAnZW5kJykge1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyRXZlbnQgPVxyXG4gICAgfCAncHNTY3JvbGxZJ1xyXG4gICAgfCAncHNTY3JvbGxYJ1xyXG4gICAgfCAncHNTY3JvbGxVcCdcclxuICAgIHwgJ3BzU2Nyb2xsRG93bidcclxuICAgIHwgJ3BzU2Nyb2xsTGVmdCdcclxuICAgIHwgJ3BzU2Nyb2xsUmlnaHQnXHJcbiAgICB8ICdwc1lSZWFjaEVuZCdcclxuICAgIHwgJ3BzWVJlYWNoU3RhcnQnXHJcbiAgICB8ICdwc1hSZWFjaEVuZCdcclxuICAgIHwgJ3BzWFJlYWNoU3RhcnQnO1xyXG5cclxuZXhwb3J0IGNvbnN0IFNjcm9sbGJhckV2ZW50czogU2Nyb2xsYmFyRXZlbnRbXSA9IFtcclxuICAgICdwc1Njcm9sbFknLFxyXG4gICAgJ3BzU2Nyb2xsWCcsXHJcblxyXG4gICAgJ3BzU2Nyb2xsVXAnLFxyXG4gICAgJ3BzU2Nyb2xsRG93bicsXHJcbiAgICAncHNTY3JvbGxMZWZ0JyxcclxuICAgICdwc1Njcm9sbFJpZ2h0JyxcclxuXHJcbiAgICAncHNZUmVhY2hFbmQnLFxyXG4gICAgJ3BzWVJlYWNoU3RhcnQnLFxyXG4gICAgJ3BzWFJlYWNoRW5kJyxcclxuICAgICdwc1hSZWFjaFN0YXJ0J1xyXG5dO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxiYXJDb25maWdJbnRlcmZhY2Uge1xyXG4gICAgaGFuZGxlcnM/OiBzdHJpbmdbXTtcclxuXHJcbiAgICB3aGVlbFNwZWVkPzogbnVtYmVyO1xyXG4gICAgc3dpcGVFYXNpbmc/OiBib29sZWFuO1xyXG5cclxuICAgIHN1cHByZXNzU2Nyb2xsWD86IGJvb2xlYW47XHJcbiAgICBzdXBwcmVzc1Njcm9sbFk/OiBib29sZWFuO1xyXG5cclxuICAgIHdoZWVsUHJvcGFnYXRpb24/OiBib29sZWFuO1xyXG4gICAgdXNlQm90aFdoZWVsQXhlcz86IGJvb2xlYW47XHJcblxyXG4gICAgc2Nyb2xsaW5nVGhyZXNob2xkPzogbnVtYmVyO1xyXG5cclxuICAgIG1pblNjcm9sbGJhckxlbmd0aD86IG51bWJlcjtcclxuICAgIG1heFNjcm9sbGJhckxlbmd0aD86IG51bWJlcjtcclxuXHJcbiAgICBzY3JvbGxYTWFyZ2luT2Zmc2V0PzogbnVtYmVyO1xyXG4gICAgc2Nyb2xsWU1hcmdpbk9mZnNldD86IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhckNvbmZpZyBpbXBsZW1lbnRzIFNjcm9sbGJhckNvbmZpZ0ludGVyZmFjZSB7XHJcbiAgICBwdWJsaWMgaGFuZGxlcnM/OiBzdHJpbmdbXTtcclxuXHJcbiAgICBwdWJsaWMgd2hlZWxTcGVlZD86IG51bWJlcjtcclxuICAgIHB1YmxpYyBzd2lwZUVhc2luZz86IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIHN1cHByZXNzU2Nyb2xsWD86IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgc3VwcHJlc3NTY3JvbGxZPzogYm9vbGVhbjtcclxuXHJcbiAgICBwdWJsaWMgd2hlZWxQcm9wYWdhdGlvbj86IGJvb2xlYW47XHJcbiAgICBwdWJsaWMgdXNlQm90aFdoZWVsQXhlcz86IGJvb2xlYW47XHJcblxyXG4gICAgcHVibGljIHNjcm9sbGluZ1RocmVzaG9sZD86IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgbWluU2Nyb2xsYmFyTGVuZ3RoPzogbnVtYmVyO1xyXG4gICAgcHVibGljIG1heFNjcm9sbGJhckxlbmd0aD86IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgc2Nyb2xsWE1hcmdpbk9mZnNldD86IG51bWJlcjtcclxuICAgIHB1YmxpYyBzY3JvbGxZTWFyZ2luT2Zmc2V0PzogbnVtYmVyO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGNvbmZpZzogU2Nyb2xsYmFyQ29uZmlnSW50ZXJmYWNlID0ge30pIHtcclxuICAgICAgICB0aGlzLmFzc2lnbihjb25maWcpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3NpZ24oY29uZmlnOiBTY3JvbGxiYXJDb25maWdJbnRlcmZhY2UgPSB7fSkge1xyXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGNvbmZpZykge1xyXG4gICAgICAgICAgICB0aGlzW2tleSBhcyBrZXlvZiBTY3JvbGxiYXJDb25maWddID0gY29uZmlnW2tleSBhcyBrZXlvZiBTY3JvbGxiYXJDb25maWdJbnRlcmZhY2VdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=