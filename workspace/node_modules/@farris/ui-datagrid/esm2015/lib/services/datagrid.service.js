/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2019-08-06 07:43:53
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2019-11-09 20:44:54
* @QQ: 1055818239
* @Version: v0.0.1
*/
import { EventEmitter } from '@angular/core';
import { Subject, BehaviorSubject } from 'rxjs';
import { filter, map, debounceTime } from 'rxjs/operators';
import { IdService } from '@farris/ui-common';
import { Utils } from './../utils/utils';
import { CUSTOM_CELL_CLS, CUSTOM_GROUP_ROW_CLS, CUSTOM_ROW_CLS } from '../types/constant';
export class DatagridService {
    constructor() {
        this.scorllSubject = new Subject();
        this.scrollX = new BehaviorSubject(0);
        this.rowHoverSubject = new Subject();
        this.rowSelectSubject = new Subject();
        this.dataSourceChangedSubject = new Subject();
        /**
         * 编辑单元格
         */
        this.editCellSubject = new Subject();
        /**
         * 选中单元格
         */
        this.selectCellSubject = new Subject();
        /**
         * 结束单元编辑
         */
        this.endCellEdit = new Subject();
        this.changeCheckedRows = new Subject();
        /**
         * 结束行编辑
         */
        // private endRowEdit = new BehaviorSubject(true);
        this.scorll$ = this.scorllSubject.asObservable();
        this.scrollX$ = this.scorll$.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        (p) => p.type === 'psScrollX')), map((/**
         * @param {?} t
         * @return {?}
         */
        t => t.x)), debounceTime(50));
        this.scrollY$ = this.scorll$.pipe(filter((/**
         * @param {?} p
         * @return {?}
         */
        (p) => p.type === 'psScrollY')), map((/**
         * @param {?} t
         * @return {?}
         */
        t => t.x)), debounceTime(50));
        this.rowHover$ = this.rowHoverSubject.asObservable();
        this.rowClick$ = this.rowSelectSubject.asObservable();
        this.onDataSourceChange = this.dataSourceChangedSubject.asObservable();
        this.cellEdit$ = this.editCellSubject.asObservable();
        this.endCellEdit$ = this.endCellEdit.asObservable();
        this.checkedRowsTotalChanged$ = this.changeCheckedRows.asObservable();
        this.updateEmptyStyle$ = new EventEmitter();
        this.showGridHeader = new EventEmitter();
        // 取消全选
        this.uncheckAll = new EventEmitter();
        // 全部选中
        this.checkAll = new EventEmitter();
        this.columnResized = new EventEmitter();
        this.rowHeightChanged = new EventEmitter();
        this.loadVirtualData = new EventEmitter();
        /**
         * 显示固定列隐影
         */
        this.showFixedShadow = new EventEmitter();
        // public endRowEdit$ = this.endRowEdit.asObservable();
        this.setSelecedRow = new EventEmitter();
        this.setCheckedRows = new EventEmitter();
        this.scrollToCurrentRow = new EventEmitter();
        this.columnsChanged = new EventEmitter();
        this.cellContentWrapChanged = new EventEmitter();
        this.onFilterChanged = new EventEmitter();
        this.clearFilter = new EventEmitter();
        this.filterTextChange = new EventEmitter();
        this.toggleFilterRow = new EventEmitter();
        this.closeFilterPanel = new EventEmitter();
        this.refreshFooterData = new EventEmitter();
        this.disableHeader = new EventEmitter();
        /**
         * 更新全选复选框状态
         */
        this.changeCheckAllStatus = new EventEmitter();
        this.setScrollbarPosition = new EventEmitter();
        this.smartFilterBarExpand = new EventEmitter();
        this.smartFilterDataChange = new EventEmitter();
        this.scrollbarUpdate = new EventEmitter();
        this.footerPositionChanged = new EventEmitter();
        this.styleElement = null;
        this.commonUtils = null;
        this.idService = null;
        // 单元格编辑器创建完成
        this.cellEditorCreated = new EventEmitter();
        // 单元格编辑器销毁
        this.cellEditorDestory = new EventEmitter();
        // 焦点行切换
        this.focusRowChanged = new EventEmitter();
        this.dataloaded = new EventEmitter();
        this.toggleGroupRow$ = new EventEmitter();
        this.toggleAllGroupRows$ = new EventEmitter();
        // CSS 文本缓存
        this.cssTextCache = [];
        this.groupBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        (arr, fn) => arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        val => Utils.getValue(fn, val))).reduce((/**
         * @param {?} acc
         * @param {?} val
         * @param {?} i
         * @return {?}
         */
        (acc, val, i) => {
            acc[val] = (acc[val] || []).concat(arr[i]);
            return acc;
        }), {}));
    }
    /**
     * @param {?} x
     * @param {?} action
     * @return {?}
     */
    onScrollMove(x, action) {
        this.scorllSubject.next({ x, type: action });
    }
    /**
     * @return {?}
     */
    dataSourceChanged() {
        this.dataSourceChangedSubject.next();
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @param {?} mouseEnter
     * @return {?}
     */
    onRowHover(rowIndex, rowData, mouseEnter) {
        this.rowHoverSubject.next({ index: rowIndex, data: rowData, mouseenter: mouseEnter });
    }
    /**
     * @param {?} rowIndex
     * @param {?} rowData
     * @return {?}
     */
    onRowClick(rowIndex, rowData) {
        this.rowSelectSubject.next({ index: rowIndex, data: rowData });
    }
    /**
     * @param {?} tdElement
     * @return {?}
     */
    onCellEdit(tdElement) {
        this.editCellSubject.next(tdElement);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onEndCellEdit(cell) {
        this.endCellEdit.next(cell);
    }
    /**
     * @param {?} cell
     * @return {?}
     */
    onSelectCell(cell) {
        this.selectCellSubject.next(cell);
    }
    /**
     * @return {?}
     */
    onCheckedRowsCountChange() {
        this.changeCheckedRows.next();
    }
    /**
     * @param {?} rowHeight
     * @return {?}
     */
    onRowHeightChange(rowHeight) {
        this.rowHeightChanged.emit(rowHeight);
    }
    /**
     * @param {?} data
     * @return {?}
     */
    onLoadVirtualData(data) {
        this.loadVirtualData.emit({ data });
    }
    /**
     * @return {?}
     */
    onClearFilter() {
        this.clearFilter.emit();
        this.filterTextChange.emit('');
    }
    /**
     * @param {?} txt
     * @return {?}
     */
    onFilterTextChange(txt) {
        this.filterTextChange.emit(txt);
    }
    /**
     * @return {?}
     */
    restoreScrollbarPosition() {
        this.setScrollbarPosition.emit();
    }
    /**
     * @return {?}
     */
    updateEmptyStyle() {
        this.updateEmptyStyle$.emit();
    }
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    getMergeCellInfo(data, mergeFields) {
        /** @type {?} */
        const result = {};
        /** @type {?} */
        let firstVal = null;
        /** @type {?} */
        let currVal;
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        (f, i) => {
            if (i === 0) {
                data.forEach((/**
                 * @param {?} d
                 * @param {?} j
                 * @return {?}
                 */
                (d, j) => {
                    /** @type {?} */
                    const item = { [f]: { show: true, rowspan: 1 } };
                    if (!result[j]) {
                        result[j] = item;
                    }
                    else {
                        if (!result[j][f]) {
                            result[j] = Object.assign(result[j], item);
                        }
                    }
                    /** @type {?} */
                    const _item = result[j];
                    currVal = d[f];
                    if (firstVal === null || firstVal !== currVal) {
                        firstVal = currVal;
                        _item[f].show = true;
                        _item[f].startIndex = j;
                    }
                    else {
                        /** @type {?} */
                        const strIndex = result[j - 1][f].startIndex;
                        _item[f].startIndex = strIndex;
                        _item[f].show = false;
                        result[strIndex][f].rowspan++;
                    }
                }));
            }
        }));
        return result;
    }
    /**
     * @param {?} data
     * @param {?} field
     * @return {?}
     */
    getMergeCellInfo0(data, field) {
        /** @type {?} */
        const result = {};
        /** @type {?} */
        let firstVal;
        /** @type {?} */
        let currVal;
        data.forEach((/**
         * @param {?} d
         * @param {?} j
         * @return {?}
         */
        (d, j) => {
            /** @type {?} */
            const item = { [field]: { show: true, rowspan: 1, value: '' } };
            if (!result[j]) {
                result[j] = item;
            }
            /** @type {?} */
            const _item = result[j];
            currVal = Utils.getValue(field, d);
            _item[field].value = currVal;
            if (firstVal === undefined || firstVal !== currVal) {
                firstVal = currVal;
                _item[field].show = true;
                _item[field].startIndex = j;
            }
            else {
                /** @type {?} */
                const strIndex = result[j - 1][field].startIndex;
                _item[field].startIndex = strIndex;
                _item[field].show = false;
                result[strIndex][field].rowspan++;
            }
        }));
        return result;
    }
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    getMergeCellInfo2(data, mergeFields) {
        /** @type {?} */
        let result = {};
        /** @type {?} */
        let firstVal = null;
        result = this.getMergeCellInfo0(data, mergeFields.splice(0, 1)[0]);
        /** @type {?} */
        const groupData = this.groupBy(data, mergeFields[0]);
        /** @type {?} */
        const groupKeys = Object.keys(groupData);
        /** @type {?} */
        let startRowIndex = 0;
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        (f, i) => {
            groupKeys.forEach((/**
             * @param {?} k
             * @param {?} j
             * @return {?}
             */
            (k, j) => {
                /** @type {?} */
                let currVal;
                groupData[k].forEach((/**
                 * @param {?} d
                 * @param {?} n
                 * @return {?}
                 */
                (d, n) => {
                    if (result[startRowIndex] && !result[startRowIndex][f]) {
                        result[startRowIndex] = Object.assign(result[startRowIndex], { [f]: { show: true, rowspan: 1, value: '' } });
                    }
                    /** @type {?} */
                    const _item = result[startRowIndex];
                    currVal = Utils.getValue(f, d);
                    _item[f].value = currVal;
                    if (firstVal === null || firstVal !== currVal) {
                        firstVal = currVal;
                        _item[f].show = true;
                        _item[f].startIndex = startRowIndex;
                    }
                    else {
                        /** @type {?} */
                        const strIndex = result[startRowIndex - 1][f].startIndex;
                        _item[f].startIndex = strIndex;
                        _item[f].show = false;
                        result[strIndex][f].rowspan++;
                    }
                    startRowIndex++;
                }));
            }));
        }));
        return result;
    }
    /**
     * @param {?} data
     * @param {?} mergeFields
     * @return {?}
     */
    getMergeCellInfo3(data, mergeFields) {
        /** @type {?} */
        let result = {};
        /** @type {?} */
        const firstField = mergeFields.splice(0, 1)[0];
        result = this.getMergeCellInfo0(data, firstField);
        /** @type {?} */
        let prevGroupField = firstField;
        // const groupData = this.groupBy(data, firstField);
        // const groupKeys = Object.keys(groupData);
        mergeFields.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        (f, i) => {
            /** @type {?} */
            let startRowIndex = 0;
            /** @type {?} */
            let firstVal;
            /** @type {?} */
            let currVal;
            if (i > 0) {
                prevGroupField = mergeFields[i - 1];
            }
            data.forEach((/**
             * @param {?} d
             * @param {?} n
             * @return {?}
             */
            (d, n) => {
                if (result[startRowIndex] && !result[startRowIndex][f]) {
                    result[startRowIndex] = Object.assign(result[startRowIndex], { [f]: { show: true, rowspan: 1, value: '' } });
                }
                /** @type {?} */
                const _item = result[startRowIndex];
                currVal = Utils.getValue(f, d);
                _item[f].value = currVal;
                if (startRowIndex > 0) {
                    /** @type {?} */
                    const prevItem = result[startRowIndex - 1];
                    /** @type {?} */
                    const _c = Object.keys(_item).map((/**
                     * @param {?} c
                     * @return {?}
                     */
                    c => '' + _item[c].value)).join(',');
                    /** @type {?} */
                    const _p = Object.keys(prevItem).map((/**
                     * @param {?} p
                     * @return {?}
                     */
                    p => '' + prevItem[p].value)).join(',');
                    if (_c !== _p) {
                        firstVal = undefined;
                    }
                }
                if ((firstVal === undefined || firstVal !== currVal)) {
                    firstVal = currVal;
                    _item[f].show = true;
                    _item[f].startIndex = startRowIndex;
                }
                else {
                    /** @type {?} */
                    const startIndex = result[startRowIndex - 1][f].startIndex;
                    _item[f].startIndex = startIndex;
                    _item[f].show = false;
                    result[startIndex][f].rowspan++;
                }
                if (data.length - 1 > startRowIndex) {
                    startRowIndex++;
                }
            }));
        }));
        return result;
    }
    /**
     * @param {?} rowIndex
     * @param {?} field
     * @param {?} mergeCellInfo
     * @return {?}
     */
    getMergeInfo(rowIndex, field, mergeCellInfo) {
        if (field && mergeCellInfo && mergeCellInfo[rowIndex] && mergeCellInfo[rowIndex][field]) {
            return mergeCellInfo[rowIndex][field];
        }
        return null;
    }
    /**
     * @return {?}
     */
    removeStyleSheet() {
        if (this.styleElement) {
            this.styleElement.remove();
            this.styleElement = null;
            // 清空缓存
            this.cssTextCache = [];
        }
    }
    /**
     * @param {?} styleSheetId
     * @return {?}
     */
    createStyleElement(styleSheetId) {
        this.styleElement = this._createStyleSheet(styleSheetId);
    }
    /**
     * @param {?} rules
     * @return {?}
     */
    appendCssRules(rules) {
        if (this.styleElement) {
            this._appendCssRules(rules, this.styleElement.sheet);
        }
    }
    /**
     * @param {?} ruleName
     * @return {?}
     */
    removeCssRule(ruleName) {
        if (this.styleElement) {
            if (typeof ruleName === 'string') {
                this._removeCssRule(ruleName, this.styleElement.sheet);
                this.cssTextCache = this.cssTextCache.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.indexOf(ruleName) == -1));
            }
            else {
                if (Array.isArray(ruleName)) {
                    ruleName.forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => {
                        this._removeCssRule(n, this.styleElement.sheet);
                        this.cssTextCache = this.cssTextCache.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        n => n.indexOf(n) == -1));
                    }));
                }
            }
        }
    }
    /**
     * @private
     * @param {?} styleSheetId
     * @return {?}
     */
    _createStyleSheet(styleSheetId) {
        /** @type {?} */
        const htmlHead = document.querySelector('head');
        /** @type {?} */
        const styleEleId = styleSheetId;
        /** @type {?} */
        let styleElement = null;
        if (document.querySelector('#' + styleEleId)) {
            styleElement = document.querySelector('#' + styleEleId);
            styleElement.innerText = '';
        }
        else {
            styleElement = document.createElement('style');
            styleElement.id = styleEleId;
            styleElement.type = 'text/css';
            htmlHead.appendChild(styleElement);
        }
        return styleElement;
    }
    /**
     * @private
     * @param {?} rules
     * @param {?} styleSheet
     * @return {?}
     */
    _appendCssRules(rules, styleSheet) {
        /** @type {?} */
        let allCssText = '';
        for (const rule of rules) {
            /** @type {?} */
            const ruleName = rule.slice(0, rule.indexOf('{')).trim();
            // const removedCssRule = this._removeCssRule(ruleName, styleSheet);
            /** @type {?} */
            const removedCssRule = this._getCssTextBySelector(ruleName, styleSheet);
            /** @type {?} */
            let cssText = '';
            if (removedCssRule && ruleName.indexOf(CUSTOM_CELL_CLS) == -1 && ruleName.indexOf(CUSTOM_GROUP_ROW_CLS) == -1 && ruleName.indexOf(CUSTOM_ROW_CLS) == -1) {
                cssText += removedCssRule.cssText.slice(removedCssRule.cssText.indexOf('{') + 1, removedCssRule.cssText.indexOf('}'));
            }
            cssText += rule.slice(rule.indexOf('{') + 1, rule.indexOf('}')).replace(/"/g, '').replace(/,/g, ';') + ';';
            /** @type {?} */
            const _newRule = `${ruleName}{ ${cssText} }`;
            allCssText += _newRule;
            if (!this.cssTextCache.includes(_newRule)) {
                // 将合并后CSS文本添加到缓存
                this.cssTextCache.push(_newRule);
                if (styleSheet.addRule) {
                    styleSheet.addRule(ruleName, cssText, 0);
                }
                else {
                    styleSheet.insertRule(_newRule, 0);
                }
            }
        }
        return allCssText;
    }
    /**
     * @private
     * @param {?} ruleName
     * @param {?} styleSheet
     * @return {?}
     */
    _removeCssRule(ruleName, styleSheet) {
        if (!styleSheet) {
            return;
        }
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let ii = 0;
        /** @type {?} */
        let cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == ruleName.toLowerCase()) {
                    if (styleSheet.cssRules) {
                        styleSheet.deleteRule(ii);
                    }
                    else {
                        styleSheet.removeRule(ii);
                    }
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    }
    /**
     * @param {?} gridID
     * @return {?}
     */
    createConfigKey(gridID) {
        const { host, hash, href, pathname } = location;
        /** @type {?} */
        let formCode = '';
        /** @type {?} */
        let menuId = '';
        if (hash) {
            /** @type {?} */
            const _searchArr = hash.split('?');
            formCode = _searchArr[0];
            /** @type {?} */
            const searchObj = {};
            if (_searchArr[1]) {
                _searchArr[1].split('&').map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => {
                    searchObj[n.split('=')[0]] = n.split('=')[1];
                }));
            }
            /** @type {?} */
            const catchFuncIdKEY = `${pathname}`;
            if (searchObj && Object.keys(searchObj).length) {
                menuId = searchObj.funcId || '';
                if (menuId) {
                    localStorage.setItem(catchFuncIdKEY, menuId);
                }
            }
            if (!menuId) {
                menuId = localStorage.getItem(catchFuncIdKEY);
            }
        }
        /** @type {?} */
        const key = formCode + '_' + menuId + '_' + gridID;
        if (!this.idService) {
            this.idService = new IdService();
        }
        return this.idService.encrypt(key);
    }
    /**
     * @param {?} styler
     * @param {?} args
     * @return {?}
     */
    getCustomStyle(styler, args) {
        if (typeof styler === 'object') {
            return styler;
        }
        else {
            if (typeof styler === 'function') {
                /** @type {?} */
                const p = args || [];
                return styler(...p);
            }
        }
    }
    /**
     * @param {?} nextTr
     * @param {?} dir
     * @return {?}
     */
    findNextTr(nextTr, dir) {
        /** @type {?} */
        const getNextElement = (/**
         * @param {?} target
         * @return {?}
         */
        (target) => {
            if (target && target.className.indexOf('f-datagrid-disable-row') == -1) {
                return target;
            }
            return false;
        });
        /** @type {?} */
        const m = dir === 'down' ? 'nextElementSibling' : 'previousElementSibling';
        /** @type {?} */
        const getEle = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => {
            /** @type {?} */
            let n = null;
            /** @type {?} */
            let next = true;
            while (next) {
                n = getNextElement(t);
                if (n) {
                    next = false;
                }
                else {
                    if (t && t[m]) {
                        n = getNextElement(t[m]);
                        if (n) {
                            break;
                        }
                    }
                    else {
                        next = false;
                    }
                }
            }
            return n;
        });
        return getEle(nextTr);
    }
    /**
     * @private
     * @param {?} selector
     * @param {?} styleSheet
     * @return {?}
     */
    _getCssTextBySelector(selector, styleSheet) {
        if (!styleSheet) {
            return;
        }
        /** @type {?} */
        const cssRules = (/** @type {?} */ ((styleSheet.cssRules || styleSheet.rules)));
        /** @type {?} */
        let ii = 0;
        /** @type {?} */
        let cssRule = false;
        do {
            cssRule = cssRules[ii];
            if (cssRule) {
                if (cssRule.selectorText.toLowerCase() == selector.toLowerCase()) {
                    return cssRule;
                }
            }
            ii++;
        } while (cssRule);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.scorllSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.scrollX;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.rowHoverSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.rowSelectSubject;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.dataSourceChangedSubject;
    /**
     * 编辑单元格
     * @type {?}
     * @private
     */
    DatagridService.prototype.editCellSubject;
    /**
     * 选中单元格
     * @type {?}
     * @private
     */
    DatagridService.prototype.selectCellSubject;
    /**
     * 结束单元编辑
     * @type {?}
     * @private
     */
    DatagridService.prototype.endCellEdit;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.changeCheckedRows;
    /**
     * 结束行编辑
     * @type {?}
     */
    DatagridService.prototype.scorll$;
    /** @type {?} */
    DatagridService.prototype.scrollX$;
    /** @type {?} */
    DatagridService.prototype.scrollY$;
    /** @type {?} */
    DatagridService.prototype.rowHover$;
    /** @type {?} */
    DatagridService.prototype.rowClick$;
    /** @type {?} */
    DatagridService.prototype.onDataSourceChange;
    /** @type {?} */
    DatagridService.prototype.cellEdit$;
    /** @type {?} */
    DatagridService.prototype.endCellEdit$;
    /** @type {?} */
    DatagridService.prototype.checkedRowsTotalChanged$;
    /** @type {?} */
    DatagridService.prototype.updateEmptyStyle$;
    /** @type {?} */
    DatagridService.prototype.showGridHeader;
    /** @type {?} */
    DatagridService.prototype.uncheckAll;
    /** @type {?} */
    DatagridService.prototype.checkAll;
    /** @type {?} */
    DatagridService.prototype.columnResized;
    /** @type {?} */
    DatagridService.prototype.rowHeightChanged;
    /** @type {?} */
    DatagridService.prototype.loadVirtualData;
    /**
     * 显示固定列隐影
     * @type {?}
     */
    DatagridService.prototype.showFixedShadow;
    /** @type {?} */
    DatagridService.prototype.setSelecedRow;
    /** @type {?} */
    DatagridService.prototype.setCheckedRows;
    /** @type {?} */
    DatagridService.prototype.scrollToCurrentRow;
    /** @type {?} */
    DatagridService.prototype.columnsChanged;
    /** @type {?} */
    DatagridService.prototype.cellContentWrapChanged;
    /** @type {?} */
    DatagridService.prototype.onFilterChanged;
    /** @type {?} */
    DatagridService.prototype.clearFilter;
    /** @type {?} */
    DatagridService.prototype.filterTextChange;
    /** @type {?} */
    DatagridService.prototype.toggleFilterRow;
    /** @type {?} */
    DatagridService.prototype.closeFilterPanel;
    /** @type {?} */
    DatagridService.prototype.refreshFooterData;
    /** @type {?} */
    DatagridService.prototype.disableHeader;
    /**
     * 更新全选复选框状态
     * @type {?}
     */
    DatagridService.prototype.changeCheckAllStatus;
    /** @type {?} */
    DatagridService.prototype.setScrollbarPosition;
    /** @type {?} */
    DatagridService.prototype.smartFilterBarExpand;
    /** @type {?} */
    DatagridService.prototype.smartFilterDataChange;
    /** @type {?} */
    DatagridService.prototype.scrollbarUpdate;
    /** @type {?} */
    DatagridService.prototype.footerPositionChanged;
    /** @type {?} */
    DatagridService.prototype.styleElement;
    /** @type {?} */
    DatagridService.prototype.commonUtils;
    /** @type {?} */
    DatagridService.prototype.idService;
    /** @type {?} */
    DatagridService.prototype.cellEditorCreated;
    /** @type {?} */
    DatagridService.prototype.cellEditorDestory;
    /** @type {?} */
    DatagridService.prototype.focusRowChanged;
    /** @type {?} */
    DatagridService.prototype.dataloaded;
    /** @type {?} */
    DatagridService.prototype.toggleGroupRow$;
    /** @type {?} */
    DatagridService.prototype.toggleAllGroupRows$;
    /**
     * @type {?}
     * @private
     */
    DatagridService.prototype.cssTextCache;
    /** @type {?} */
    DatagridService.prototype.groupBy;
}
//# sourceMappingURL=data:application/json;base64,