/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ColumnFilterType } from '../types/data-column';
import { BooleanFilterControl, DateFilterControl, EnumFilterControl, NumberFilterControl, TextFilterControl } from '../plugins/smart-filter/controlData/filter-control.options';
export class DatagridSmartFilterService {
    constructor() {
        this.conditions = [];
        this.controlData = [];
        this.filterChanged = new Subject();
        this.removeFilter = new Subject();
        this.clearAllFilter = new Subject();
    }
    /**
     * @param {?} col
     * @return {?}
     */
    getColumnFilterData(col) {
        /** @type {?} */
        let filterControlData = {
            controltype: 'text',
        };
        if (col.filter !== undefined) {
            if (typeof col.filter === 'boolean') {
                if (col.formatter) {
                    if (typeof col.formatter === 'object' && Object.keys(col.formatter).length) {
                        /** @type {?} */
                        const options = col.formatter['options'];
                        switch (col.formatter['type']) {
                            case 'number':
                                return NumberFilterControl(col);
                            case 'enum':
                                return EnumFilterControl(col, options);
                            case 'boolean':
                                return BooleanFilterControl(col);
                            case 'datetime':
                                /** @type {?} */
                                let tye = 'datetime';
                                /** @type {?} */
                                let fmt = 'yyyy-MM-dd';
                                /** @type {?} */
                                let returnFmt = 'yyyy-MM-dd';
                                if (options && options.format) {
                                    fmt = options.format;
                                    if (fmt.indexOf('HH:') == -1) {
                                        tye = 'date';
                                    }
                                    else {
                                        returnFmt += ' HH:mm';
                                        if (fmt.indexOf('ss') > -1) {
                                            returnFmt += ':ss';
                                        }
                                    }
                                }
                                else {
                                    tye = 'date';
                                }
                                filterControlData = {
                                    controltype: 'flexibleDate',
                                    dateFormat: fmt,
                                    single: false,
                                    showType: 3,
                                    showTime: tye === 'datetime'
                                };
                                break;
                            default:
                                return TextFilterControl(col);
                        }
                    }
                }
                return filterControlData;
            }
            else {
                switch (col.filter.type) {
                    case ColumnFilterType.enum:
                        return EnumFilterControl(col, col.filter.options);
                    case ColumnFilterType.date:
                    case ColumnFilterType.datetime:
                        return DateFilterControl(col, col.filter.options);
                    case ColumnFilterType.number:
                        return NumberFilterControl(col);
                    case ColumnFilterType.boolean:
                        return BooleanFilterControl(col);
                }
            }
        }
        return filterControlData;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    filterConditionChanged(e) {
        /** @type {?} */
        const items = e.conditions;
        if (!this.conditions || !this.conditions.length) {
            this.conditions.push(...items);
            this.controlData.push(Object.assign({}, e.controlData));
        }
        else {
            /// TODO, CONTROLDATA 的索引与conditions 的索引很可能不是1个
            if (e.from === 'toolbar') {
                this.conditions = [...items];
            }
            else {
                this.conditions = this.conditions.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.FilterField !== items[0].FilterField));
                if (items.length === 1) {
                    this.conditions.push(Object.assign({}, items[0]));
                }
                else {
                    this.conditions.push(...items);
                }
            }
            if (e.controlData) {
                /** @type {?} */
                const ctrlIdx = this.controlData.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.labelCode === e.controlData.labelCode));
                if (ctrlIdx > -1) {
                    this.controlData[ctrlIdx] = Object.assign({}, e.controlData);
                }
                else {
                    this.controlData.push(Object.assign({}, e.controlData));
                }
            }
        }
        this.filterChanged.next({ conditions: [...this.conditions], controlData: [...this.controlData] });
    }
    /**
     * @param {?} e
     * @param {?=} emitRemove
     * @return {?}
     */
    removeCondition(e, emitRemove = false) {
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.FilterField !== e.labelCode));
            this.controlData = this.controlData.filter((/**
             * @param {?} n
             * @return {?}
             */
            n => n.labelCode !== e.labelCode));
        }
        this.filterChanged.next({ conditions: [...this.conditions], controlData: [...this.controlData] });
        if (emitRemove) {
            this.removeFilter.next(e);
        }
    }
    /**
     * @return {?}
     */
    clearAll() {
        this.conditions = [];
        this.controlData = [];
        this.clearAllFilter.next(null);
    }
}
DatagridSmartFilterService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DatagridSmartFilterService.ctorParameters = () => [];
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterService.prototype.conditions;
    /** @type {?} */
    DatagridSmartFilterService.prototype.controlData;
    /** @type {?} */
    DatagridSmartFilterService.prototype.filterChanged;
    /** @type {?} */
    DatagridSmartFilterService.prototype.removeFilter;
    /** @type {?} */
    DatagridSmartFilterService.prototype.clearAllFilter;
}
//# sourceMappingURL=data:application/json;base64,