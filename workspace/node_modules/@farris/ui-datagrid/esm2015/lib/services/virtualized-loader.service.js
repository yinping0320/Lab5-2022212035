/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
export class VirtualizedLoaderService {
    /**
     * @return {?}
     */
    getTableHeight() {
        return this.state.height;
    }
    /**
     * @return {?}
     */
    getTableHeaderHeight() {
        return this.state.headerHeight;
    }
    /**
     * @return {?}
     */
    getTableBodyHeight() {
        return this.getTableHeight() - this.getTableHeaderHeight();
    }
    /**
     * @return {?}
     */
    getTableWidth() {
        return this.state.width;
    }
    /**
     * @return {?}
     */
    getRowHeight() {
        return this.state.rowHeight;
    }
    /**
     * @return {?}
     */
    displayRowsCount() {
        return Math.floor(this.getTableHeight() / this.getRowHeight());
    }
    /**
     * @return {?}
     */
    getTotal() {
        /** @type {?} */
        let total = this.state.total;
        /** @type {?} */
        const data = this.state.data || [];
        /** @type {?} */
        const pagination = this.state.pagination;
        /** @type {?} */
        const count = data.length;
        if (pagination) {
            total = count;
        }
        return total;
    }
    /**
     * @return {?}
     */
    reload() {
        /** @type {?} */
        const rowHeight = this.getRowHeight();
        /** @type {?} */
        const scroTop = this.state.virtual.scrollTop;
        /** @type {?} */
        const res = this.getRows(scroTop);
        /** @type {?} */
        const total = this.getTotal();
        res.topHideHeight = scroTop;
        if (res.bottomHideHeight !== 0) {
            res.bottomHideHeight = total * rowHeight - res.virtualRows.length * rowHeight - res.topHideHeight;
        }
        return res;
    }
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    getRows(scrollTop) {
        /** @type {?} */
        const minTop = Math.abs(scrollTop);
        /** @type {?} */
        const rowHeight = this.getRowHeight();
        /** @type {?} */
        const maxTop = minTop + this.getTableHeight();
        /** @type {?} */
        let top = (!this.state.virtualizedAsyncLoad) ? 0 : this.state.virtual.rowIndex * rowHeight;
        /** @type {?} */
        const rows = [];
        /** @type {?} */
        let topHideHeight = 0;
        /** @type {?} */
        let bottomHideHeight = 0;
        /** @type {?} */
        const data = this.state.data;
        /** @type {?} */
        const total = this.getTotal();
        for (const n of data) {
            top += rowHeight;
            if (top + rowHeight < minTop) {
                topHideHeight += rowHeight;
                continue;
            }
            else {
                if (top > maxTop) {
                    bottomHideHeight += rowHeight;
                    continue;
                }
            }
            rows.push(n);
        }
        if (this.state.virtualizedAsyncLoad) {
            topHideHeight = this.state.virtual.rowIndex * rowHeight + topHideHeight;
            bottomHideHeight = total * rowHeight - rows.length * rowHeight - topHideHeight;
        }
        /** @type {?} */
        let startIndex = this.state.virtual.rowIndex;
        if (data && data.length && rows && rows.length) {
            /** @type {?} */
            const rid = rows[0][this.state.idField];
            startIndex = this.state.virtual.rowIndex + data.findIndex((/**
             * @param {?} r
             * @return {?}
             */
            r => r[this.state.idField] === rid));
        }
        return {
            startIndex,
            virtualRows: rows,
            topHideHeight,
            bottomHideHeight
        };
    }
    /**
     * @param {?} scrollTop
     * @param {?} itemsCount
     * @param {?} firstRowIndex
     * @return {?}
     */
    getRowsCount(scrollTop, itemsCount, firstRowIndex) {
        /** @type {?} */
        const rowHeight = this.getRowHeight();
        /** @type {?} */
        const total = this.getTotal();
        /** @type {?} */
        const maxTop = scrollTop + this.getTableBodyHeight();
        /** @type {?} */
        let top = firstRowIndex * rowHeight;
        /** @type {?} */
        let rowsLength = 0;
        /** @type {?} */
        let topHideHeight = 0;
        /** @type {?} */
        let bottomHideHeight = 0;
        for (let i = 0; i < itemsCount; i++) {
            top += rowHeight;
            if (top + rowHeight < scrollTop) {
                topHideHeight += rowHeight;
                continue;
            }
            else {
                if (top > maxTop) {
                    continue;
                }
            }
            rowsLength++;
        }
        bottomHideHeight = total * rowHeight - rowsLength * rowHeight - topHideHeight;
        return { rowsLength, top: topHideHeight, bottom: bottomHideHeight };
    }
}
if (false) {
    /** @type {?} */
    VirtualizedLoaderService.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlydHVhbGl6ZWQtbG9hZGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3ZpcnR1YWxpemVkLWxvYWRlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFFQSxNQUFNLE9BQU8sd0JBQXdCOzs7O0lBR2pDLGNBQWM7UUFDVixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7Ozs7SUFDRCxvQkFBb0I7UUFDaEIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQztJQUNuQyxDQUFDOzs7O0lBQ0Qsa0JBQWtCO1FBQ2QsT0FBTyxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFDL0QsQ0FBQzs7OztJQUNELGFBQWE7UUFDVCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCxZQUFZO1FBQ1IsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNoQyxDQUFDOzs7O0lBRUQsZ0JBQWdCO1FBQ1osT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7O0lBRUQsUUFBUTs7WUFDQSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLOztjQUN0QixJQUFJLEdBQVUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRTs7Y0FDbkMsVUFBVSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVTs7Y0FDbEMsS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNO1FBQ3pCLElBQUksVUFBVSxFQUFFO1lBQ1osS0FBSyxHQUFHLEtBQUssQ0FBQztTQUNqQjtRQUVELE9BQU8s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OztJQUVELFlBQVksQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLGFBQWE7O2NBQ3ZDLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFOztjQUMvQixLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsRUFBRTs7Y0FFdkIsTUFBTSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsa0JBQWtCLEVBQUU7O1lBQ2hELEdBQUcsR0FBRyxhQUFhLEdBQUcsU0FBUzs7WUFDL0IsVUFBVSxHQUFHLENBQUM7O1lBQ2QsYUFBYSxHQUFHLENBQUM7O1lBQ2pCLGdCQUFnQixHQUFHLENBQUM7UUFFeEIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFVBQVUsRUFBRSxDQUFDLEVBQUUsRUFBRztZQUNsQyxHQUFHLElBQUksU0FBUyxDQUFDO1lBQ2pCLElBQUksR0FBRyxHQUFHLFNBQVMsR0FBRyxTQUFTLEVBQUU7Z0JBQzdCLGFBQWEsSUFBSSxTQUFTLENBQUM7Z0JBQzNCLFNBQVM7YUFDWjtpQkFBTTtnQkFDSCxJQUFJLEdBQUcsR0FBRyxNQUFNLEVBQUU7b0JBQ2QsU0FBUztpQkFDWjthQUNKO1lBRUQsVUFBVSxFQUFFLENBQUM7U0FDaEI7UUFFRCxnQkFBZ0IsR0FBRyxLQUFLLEdBQUcsU0FBUyxHQUFHLFVBQVUsR0FBRyxTQUFTLEdBQUcsYUFBYSxDQUFDO1FBQzlFLE9BQU8sRUFBQyxVQUFVLEVBQUUsR0FBRyxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsZ0JBQWdCLEVBQUMsQ0FBQztJQUN0RSxDQUFDO0NBQ0o7OztJQTFIRyx5Q0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGYXJyaXNEYXRhZ3JpZFN0YXRlIH0gZnJvbSAnLi9zdGF0ZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgVmlydHVhbGl6ZWRMb2FkZXJTZXJ2aWNlIHtcclxuICAgIHN0YXRlOiBQYXJ0aWFsPEZhcnJpc0RhdGFncmlkU3RhdGU+O1xyXG5cclxuICAgIGdldFRhYmxlSGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmhlaWdodDtcclxuICAgIH1cclxuICAgIGdldFRhYmxlSGVhZGVySGVpZ2h0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlLmhlYWRlckhlaWdodDtcclxuICAgIH1cclxuICAgIGdldFRhYmxlQm9keUhlaWdodCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXRUYWJsZUhlaWdodCgpIC0gdGhpcy5nZXRUYWJsZUhlYWRlckhlaWdodCgpO1xyXG4gICAgfVxyXG4gICAgZ2V0VGFibGVXaWR0aCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZS53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb3dIZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUucm93SGVpZ2h0O1xyXG4gICAgfVxyXG5cclxuICAgIGRpc3BsYXlSb3dzQ291bnQoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IodGhpcy5nZXRUYWJsZUhlaWdodCgpIC8gdGhpcy5nZXRSb3dIZWlnaHQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0VG90YWwoKSB7XHJcbiAgICAgICAgbGV0IHRvdGFsID0gdGhpcy5zdGF0ZS50b3RhbDtcclxuICAgICAgICBjb25zdCBkYXRhOiBhbnlbXSA9IHRoaXMuc3RhdGUuZGF0YSB8fCBbXTtcclxuICAgICAgICBjb25zdCBwYWdpbmF0aW9uID0gdGhpcy5zdGF0ZS5wYWdpbmF0aW9uO1xyXG4gICAgICAgIGNvbnN0IGNvdW50ID0gZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgaWYgKHBhZ2luYXRpb24pIHtcclxuICAgICAgICAgICAgdG90YWwgPSBjb3VudDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0b3RhbDtcclxuICAgIH1cclxuXHJcbiAgICByZWxvYWQoKSB7XHJcbiAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gdGhpcy5nZXRSb3dIZWlnaHQoKTtcclxuICAgICAgICBjb25zdCBzY3JvVG9wID0gdGhpcy5zdGF0ZS52aXJ0dWFsLnNjcm9sbFRvcDtcclxuICAgICAgICBjb25zdCByZXMgPSB0aGlzLmdldFJvd3Moc2Nyb1RvcCk7XHJcbiAgICAgICAgY29uc3QgdG90YWwgPSB0aGlzLmdldFRvdGFsKCk7XHJcblxyXG4gICAgICAgIHJlcy50b3BIaWRlSGVpZ2h0ID0gc2Nyb1RvcDtcclxuICAgICAgICBpZiAocmVzLmJvdHRvbUhpZGVIZWlnaHQgIT09IDApIHtcclxuICAgICAgICAgICAgcmVzLmJvdHRvbUhpZGVIZWlnaHQgPSB0b3RhbCAqIHJvd0hlaWdodCAtIHJlcy52aXJ0dWFsUm93cy5sZW5ndGggKiByb3dIZWlnaHQgLSByZXMudG9wSGlkZUhlaWdodDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlcztcclxuICAgIH1cclxuXHJcbiAgICBnZXRSb3dzKHNjcm9sbFRvcDogbnVtYmVyKSB7XHJcbiAgICAgICAgY29uc3QgbWluVG9wID0gIE1hdGguYWJzKHNjcm9sbFRvcCk7XHJcbiAgICAgICAgY29uc3Qgcm93SGVpZ2h0ID0gdGhpcy5nZXRSb3dIZWlnaHQoKTtcclxuICAgICAgICBjb25zdCBtYXhUb3AgPSBtaW5Ub3AgKyB0aGlzLmdldFRhYmxlSGVpZ2h0KCk7XHJcblxyXG4gICAgICAgIGxldCB0b3AgPSAoIXRoaXMuc3RhdGUudmlydHVhbGl6ZWRBc3luY0xvYWQpID8gMCA6IHRoaXMuc3RhdGUudmlydHVhbC5yb3dJbmRleCAqIHJvd0hlaWdodCA7XHJcblxyXG4gICAgICAgIGNvbnN0IHJvd3MgPSBbXTtcclxuICAgICAgICBsZXQgdG9wSGlkZUhlaWdodCA9IDA7XHJcbiAgICAgICAgbGV0IGJvdHRvbUhpZGVIZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRhOiBhbnlbXSA9IHRoaXMuc3RhdGUuZGF0YTtcclxuICAgICAgICBjb25zdCB0b3RhbCA9IHRoaXMuZ2V0VG90YWwoKTtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBuIG9mIGRhdGEpIHtcclxuICAgICAgICAgICAgdG9wICs9IHJvd0hlaWdodDtcclxuICAgICAgICAgICAgaWYgKHRvcCArIHJvd0hlaWdodCA8IG1pblRvcCkge1xyXG4gICAgICAgICAgICAgICAgdG9wSGlkZUhlaWdodCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b3AgPiBtYXhUb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBib3R0b21IaWRlSGVpZ2h0ICs9IHJvd0hlaWdodDtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcm93cy5wdXNoKG4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUudmlydHVhbGl6ZWRBc3luY0xvYWQpIHtcclxuICAgICAgICAgICAgdG9wSGlkZUhlaWdodCA9IHRoaXMuc3RhdGUudmlydHVhbC5yb3dJbmRleCAqIHJvd0hlaWdodCAgKyB0b3BIaWRlSGVpZ2h0O1xyXG4gICAgICAgICAgICBib3R0b21IaWRlSGVpZ2h0ID0gdG90YWwgKiByb3dIZWlnaHQgLSByb3dzLmxlbmd0aCAqIHJvd0hlaWdodCAtIHRvcEhpZGVIZWlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsZXQgc3RhcnRJbmRleCA9IHRoaXMuc3RhdGUudmlydHVhbC5yb3dJbmRleDtcclxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLmxlbmd0aCAmJiByb3dzICYmIHJvd3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHJpZCA9ICByb3dzWzBdW3RoaXMuc3RhdGUuaWRGaWVsZF07XHJcbiAgICAgICAgICAgIHN0YXJ0SW5kZXggPSB0aGlzLnN0YXRlLnZpcnR1YWwucm93SW5kZXggKyBkYXRhLmZpbmRJbmRleChyID0+IHJbdGhpcy5zdGF0ZS5pZEZpZWxkXSA9PT0gcmlkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgc3RhcnRJbmRleCxcclxuICAgICAgICAgICAgdmlydHVhbFJvd3M6IHJvd3MsXHJcbiAgICAgICAgICAgIHRvcEhpZGVIZWlnaHQsXHJcbiAgICAgICAgICAgIGJvdHRvbUhpZGVIZWlnaHRcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldFJvd3NDb3VudChzY3JvbGxUb3AsIGl0ZW1zQ291bnQsIGZpcnN0Um93SW5kZXgpIHtcclxuICAgICAgICBjb25zdCByb3dIZWlnaHQgPSB0aGlzLmdldFJvd0hlaWdodCgpO1xyXG4gICAgICAgIGNvbnN0IHRvdGFsID0gdGhpcy5nZXRUb3RhbCgpO1xyXG5cclxuICAgICAgICBjb25zdCBtYXhUb3AgPSBzY3JvbGxUb3AgKyB0aGlzLmdldFRhYmxlQm9keUhlaWdodCgpO1xyXG4gICAgICAgIGxldCB0b3AgPSBmaXJzdFJvd0luZGV4ICogcm93SGVpZ2h0O1xyXG4gICAgICAgIGxldCByb3dzTGVuZ3RoID0gMDtcclxuICAgICAgICBsZXQgdG9wSGlkZUhlaWdodCA9IDA7XHJcbiAgICAgICAgbGV0IGJvdHRvbUhpZGVIZWlnaHQgPSAwO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zQ291bnQ7IGkrKyApIHtcclxuICAgICAgICAgICAgdG9wICs9IHJvd0hlaWdodDtcclxuICAgICAgICAgICAgaWYgKHRvcCArIHJvd0hlaWdodCA8IHNjcm9sbFRvcCkge1xyXG4gICAgICAgICAgICAgICAgdG9wSGlkZUhlaWdodCArPSByb3dIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0b3AgPiBtYXhUb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcm93c0xlbmd0aCsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYm90dG9tSGlkZUhlaWdodCA9IHRvdGFsICogcm93SGVpZ2h0IC0gcm93c0xlbmd0aCAqIHJvd0hlaWdodCAtIHRvcEhpZGVIZWlnaHQ7XHJcbiAgICAgICAgcmV0dXJuIHtyb3dzTGVuZ3RoLCB0b3A6IHRvcEhpZGVIZWlnaHQsIGJvdHRvbTogYm90dG9tSGlkZUhlaWdodH07XHJcbiAgICB9XHJcbn1cclxuIl19