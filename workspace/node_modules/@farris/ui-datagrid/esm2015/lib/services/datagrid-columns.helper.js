/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { ColumnFilterType } from './../types/data-column';
import { bindCallback, of } from 'rxjs';
export class DatagridColumnsHelper {
    /**
     * 获取总列数
     * @private
     * @param {?} firstCols
     * @return {?}
     */
    static getColumnTotal(firstCols) {
        /** @type {?} */
        let total = 0;
        firstCols.forEach((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            total += (n.colspan || 1);
        }));
        return total;
    }
    // 查找未赋值项的索引
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    static findUndefinedItem(arr) {
        for (let i = 0; i < arr.length; i++) {
            if (arr[i] == undefined) {
                return i;
            }
        }
        return -1;
    }
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    static getColumnFields(columns) {
        /** @type {?} */
        const aa = [];
        // 根据第一行计算总列数
        /** @type {?} */
        const colTotal = DatagridColumnsHelper.getColumnTotal(columns[0]);
        // 创建空数组
        for (let i = 0; i < columns.length; i++) {
            aa[i] = new Array(colTotal);
        }
        for (let i = 0; i < columns.length; i++) {
            columns[i].forEach((/**
             * @param {?} col
             * @return {?}
             */
            col => {
                /** @type {?} */
                let k = DatagridColumnsHelper.findUndefinedItem(aa[i]);
                if (k >= 0) {
                    /** @type {?} */
                    const field = col.field || col.id || '';
                    for (let c = 0; c < (col.colspan || 1); c++) {
                        for (let r = 0; r < (col.rowspan || 1); r++) {
                            aa[i + r][k] = field;
                        }
                        k++;
                    }
                }
            }));
        }
        return aa;
    }
    /**
     * @param {?} col
     * @param {?} ins
     * @return {?}
     */
    static columnIsVisible(col, ins) {
        if (col.visible === undefined) {
            col.visible = true;
        }
        /** @type {?} */
        const t = typeof col.visible;
        if (t === 'boolean') {
            return col.visible;
        }
        else if (t === 'function') {
            return col.visible({ instance: ins, column: col });
        }
        else {
            return true;
        }
    }
    /**
     * @param {?} columns
     * @return {?}
     */
    static getFields(columns) {
        // 移除隐藏的列
        /** @type {?} */
        const _cols = columns.map((/**
         * @param {?} cols
         * @return {?}
         */
        cols => {
            cols = cols.filter((/**
             * @param {?} col
             * @return {?}
             */
            col => DatagridColumnsHelper.columnIsVisible(col, DatagridColumnsHelper.gridInstance)));
            return cols;
        }));
        /** @type {?} */
        const fields = DatagridColumnsHelper.getColumnFields(_cols);
        return fields.length ? fields[fields.length - 1] : fields;
    }
    /**
     * @param {?} column
     * @return {?}
     */
    static getFilterEnumOptions(column) {
        /** @type {?} */
        let enumSetting = null;
        if (column.filter.type === ColumnFilterType.enum) {
            /** @type {?} */
            const fmt = (/** @type {?} */ (column.formatter));
            if (fmt) {
                enumSetting = fmt.options;
            }
            else {
                if (column.filter.options) {
                    enumSetting = column.filter.options;
                }
            }
        }
        return enumSetting;
    }
    /**
     * @param {?} enumOpts
     * @param {?} value1
     * @return {?}
     */
    static getEnumText(enumOpts, value1) {
        if (!enumOpts) {
            return '';
        }
        const { valueField, textField, data } = enumOpts;
        /** @type {?} */
        let str = '';
        if (value1) {
            str += ` ${value1.map((/**
             * @param {?} v
             * @return {?}
             */
            v => {
                /** @type {?} */
                const enumItem = data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                d => d[valueField] === v));
                return enumItem[textField];
            })).join(',')}`;
        }
        return str;
    }
    /**
     * @param {?} col
     * @return {?}
     */
    static columnVisibleAsObservable(col) {
        if (typeof col.visible === 'function') {
            /** @type {?} */
            const visibleAsObservable = bindCallback(col.visible);
            return visibleAsObservable();
        }
        return of(col.visible);
    }
    /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    static getParentColumns(col, allCols) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const _getParents = (/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            if (c && c.parentId) {
                /** @type {?} */
                const parentCol = allCols.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.id === c.parentId));
                // arr.splice(0, 0, parentCol);
                arr.push(parentCol);
                _getParents(parentCol);
            }
        });
        _getParents(col);
        return arr;
    }
    /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    static getChildColumns(col, allCols) {
        /** @type {?} */
        const arr = [];
        /** @type {?} */
        const _getChilds = (/**
         * @param {?} c
         * @return {?}
         */
        (c) => {
            if (c && c.parentId) {
                /** @type {?} */
                const childs = allCols.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.parentId === c.id));
                arr.splice(0, 0, ...childs);
                childs.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                child => {
                    _getChilds(child);
                }));
            }
        });
        _getChilds(col);
        return arr;
    }
    // 检查多表头时，设计器中将列设为隐藏
    /**
     * @param {?} allCols
     * @return {?}
     */
    static checkGroupHeaderColumnVisible(allCols) {
        /** @type {?} */
        const hiddenFields = allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n.visible === false)).map((/**
         * @param {?} n
         * @return {?}
         */
        n => n.field));
        hiddenFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        field => {
            /** @type {?} */
            const _col = allCols.find((/**
             * @param {?} col
             * @return {?}
             */
            col => col.field === field || col.id === field));
            if (_col) {
                /** @type {?} */
                const parents = DatagridColumnsHelper.getParentColumns(_col, allCols);
                parents.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                p => {
                    /** @type {?} */
                    const _childs = allCols.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    n => n.parentId === p.id && (n.visible || n.visible === undefined)));
                    p.colspan = _childs.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @return {?}
                     */
                    (r, c) => {
                        r = r + (c.colspan || 1);
                        return r;
                    }), 0);
                    p.visible = !!p.colspan;
                }));
            }
        }));
    }
    // 多表头下仅有一列显示
    /**
     * @return {?}
     */
    static onlyOneColumn() {
    }
}
DatagridColumnsHelper.gridInstance = null;
if (false) {
    /** @type {?} */
    DatagridColumnsHelper.gridInstance;
}
//# sourceMappingURL=data:application/json;base64,