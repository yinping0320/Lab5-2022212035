/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { TR_PREFIX } from "../types";
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 20:31:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
var /*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 20:31:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
Utils = /** @class */ (function () {
    function Utils() {
    }
    /**
     * @return {?}
     */
    Utils.uuid = /**
     * @return {?}
     */
    function () {
        /**
         * @return {?}
         */
        function S4() {
            // tslint:disable-next-line: no-bitwise
            return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
        }
        return (S4() + S4() + '-' + S4() + '-' + S4() + '-' + S4() + '-' + S4() + S4() + S4());
    };
    /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    Utils.keysInData = /**
     * @param {?} field
     * @param {?} data
     * @return {?}
     */
    function (field, data) {
        /** @type {?} */
        var noProperty = 'no property';
        /** @type {?} */
        var val = field.split('.').reduce((/**
         * @param {?} obj
         * @param {?} key
         * @return {?}
         */
        function (obj, key) {
            if (obj && obj.hasOwnProperty(key)) {
                return obj[key];
            }
            else {
                return noProperty;
            }
        }), data);
        return val != noProperty;
    };
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     */
    /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    Utils.getValue = /**
     * 获取对象中指定字段的值。 field: 可以为带有层级结构的路径，如： user.firstName | name 等
     * @param {?} field
     * @param {?} data
     * @param {?=} safe
     * @return {?}
     */
    function (field, data, safe) {
        if (safe === void 0) { safe = false; }
        if (!data) {
            return '';
        }
        /** @type {?} */
        var resultVal = '';
        if (field.indexOf('.') === -1 || data.hasOwnProperty(field)) {
            resultVal = data[field];
        }
        else {
            resultVal = field.split('.').reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            function (obj, key) {
                if (obj) {
                    return obj[key];
                }
                else {
                    return null;
                }
            }), data);
        }
        if (safe) {
            return this.escapeValue(resultVal);
        }
        return resultVal;
    };
    /**
     * @param {?} field
     * @param {?} val
     * @param {?} obj
     * @param {?=} nest
     * @return {?}
     */
    Utils.setValue = /**
     * @param {?} field
     * @param {?} val
     * @param {?} obj
     * @param {?=} nest
     * @return {?}
     */
    function (field, val, obj, nest) {
        if (nest === void 0) { nest = true; }
        if (field) {
            if (field.indexOf('.') > -1 && nest) {
                /** @type {?} */
                var lastObj_1 = null;
                /** @type {?} */
                var _fields = field.split('.');
                _fields.reduce((/**
                 * @param {?} c
                 * @param {?} p
                 * @return {?}
                 */
                function (c, p) {
                    lastObj_1 = c;
                    return c[p];
                }), obj);
                if (lastObj_1) {
                    lastObj_1[_fields.pop()] = val;
                }
            }
            else {
                obj[field] = val;
            }
        }
    };
    /** 获取多语值 */
    /**
     * 获取多语值
     * @param {?} valObj
     * @param {?} localeId
     * @return {?}
     */
    Utils.getMultilingualValue = /**
     * 获取多语值
     * @param {?} valObj
     * @param {?} localeId
     * @return {?}
     */
    function (valObj, localeId) {
        if (valObj && typeof valObj === 'object' && Object.keys(valObj).length > 0) {
            localeId = localeId || 'zh-CHS';
            /** @type {?} */
            var val = valObj[localeId];
            if (val !== undefined) {
                return val;
            }
            else {
                return '';
            }
        }
        else {
            return '';
        }
    };
    /**
     * @param {?} val
     * @return {?}
     */
    Utils.escapeValue = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        if (val === null || val === undefined || val === '') {
            return '';
        }
        /** @type {?} */
        var escapeHTML = (/**
         * @param {?} unsafe_str
         * @return {?}
         */
        function (unsafe_str) {
            return unsafe_str
                .replace(/&/g, '&amp;')
                .replace(/</g, '&lt;')
                .replace(/>/g, '&gt;')
                .replace(/\"/g, '&quot;')
                .replace(/\'/g, '&#39;')
                .replace(/\//g, '&#x2F;');
            // .replace('src','drc');
        });
        if (typeof val === 'string') {
            return escapeHTML(val);
        }
        return val;
    };
    /**
     * @param {?} evt
     * @return {?}
     */
    Utils.eventPath = /**
     * @param {?} evt
     * @return {?}
     */
    function (evt) {
        /** @type {?} */
        var path = (evt.composedPath && evt.composedPath()) || evt.path;
        /** @type {?} */
        var target = evt.target;
        if (path != null) {
            return (path.indexOf(window) < 0) ? path.concat(window) : path;
        }
        if (target === window) {
            return [window];
        }
        /** @type {?} */
        var getParents = (/**
         * @param {?} node
         * @param {?=} memo
         * @return {?}
         */
        function (node, memo) {
            if (memo === void 0) { memo = undefined; }
            memo = memo || [];
            /** @type {?} */
            var parentNode = node.parentNode;
            if (!parentNode) {
                return memo;
            }
            else {
                return getParents(parentNode, memo.concat(parentNode));
            }
        });
        return [target].concat(getParents(target), window);
    };
    /**
     * @return {?}
     */
    Utils.hasDialogOpen = /**
     * @return {?}
     */
    function () {
        // return document.body.classList.value.indexOf('modal-open') > -1;
        // 兼容IE 11
        return document.body.className.indexOf('modal-open') > -1;
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?} fn
     * @param {?=} opts
     * @return {?}
     */
    Utils.on = /**
     * @param {?} el
     * @param {?} evt
     * @param {?} fn
     * @param {?=} opts
     * @return {?}
     */
    function (el, evt, fn, opts) {
        if (opts === void 0) { opts = {}; }
        /** @type {?} */
        var delegatorFn = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.target.matches(opts.target) && fn.call(e.target, e); });
        el.addEventListener(evt, opts.target ? delegatorFn : fn, opts.options || false);
        return (/**
         * @return {?}
         */
        function () {
            el.removeEventListener(evt, delegatorFn, opts);
        });
    };
    /**
     * @param {?} el
     * @param {?} evt
     * @param {?=} fn
     * @param {?=} opts
     * @return {?}
     */
    Utils.off = /**
     * @param {?} el
     * @param {?} evt
     * @param {?=} fn
     * @param {?=} opts
     * @return {?}
     */
    function (el, evt, fn, opts) {
        if (fn === void 0) { fn = (/**
         * @return {?}
         */
        function () { }); }
        if (opts === void 0) { opts = {}; }
        el.removeEventListener(evt, fn, opts);
    };
    /** 获取字符长度，中文汉字占2个字符 */
    /**
     * 获取字符长度，中文汉字占2个字符
     * @param {?} str
     * @return {?}
     */
    Utils.getBLen = /**
     * 获取字符长度，中文汉字占2个字符
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (str == null) {
            return 0;
        }
        if (typeof str !== 'string') {
            str += '';
        }
        return str.replace(/[^\x00-\xff]/g, '01').length;
    };
    // static difference(first: any[], second: any[]): any[] {
    //     return first.filter(item => !second.includes(item));
    // }
    // static getDiffItems(arr1, arr2) {
    //     const diff1 = Utils.difference(arr1, arr2);
    //     const diff2 = Utils.difference(arr2, arr1);
    //     return diff1.concat(diff2);
    // }
    // static difference(first: any[], second: any[]): any[] {
    //     return first.filter(item => !second.includes(item));
    // }
    // static getDiffItems(arr1, arr2) {
    //     const diff1 = Utils.difference(arr1, arr2);
    //     const diff2 = Utils.difference(arr2, arr1);
    //     return diff1.concat(diff2);
    // }
    /**
     * @param {?} col
     * @param {?} localeId
     * @return {?}
     */
    Utils.getWhenEmptyText = 
    // static difference(first: any[], second: any[]): any[] {
    //     return first.filter(item => !second.includes(item));
    // }
    // static getDiffItems(arr1, arr2) {
    //     const diff1 = Utils.difference(arr1, arr2);
    //     const diff2 = Utils.difference(arr2, arr1);
    //     return diff1.concat(diff2);
    // }
    /**
     * @param {?} col
     * @param {?} localeId
     * @return {?}
     */
    function (col, localeId) {
        /** @type {?} */
        var EMPTY_INPUT_TEXT = {
            'zh-CHS': '请输入',
            'zh-CHT': '請輸入',
            en: 'Please input'
        };
        /** @type {?} */
        var EMPTY_SELECT_TEXT = {
            'zh-CHS': '请选择',
            'zh-CHT': '請選擇',
            en: 'Please select'
        };
        if (col.editor) {
            switch (col.editor.type) {
                case 'datepicker':
                case 'select':
                case 'lookup':
                case 'combolist':
                case 'combo-lookup':
                    return EMPTY_SELECT_TEXT[localeId];
                default:
                    return EMPTY_INPUT_TEXT[localeId];
            }
        }
        // 控制面板列
        if (col.field === '_datagrid-setting-control_') {
            return '';
        }
        return EMPTY_INPUT_TEXT[localeId];
    };
    /**
     * @param {?} tr
     * @return {?}
     */
    Utils.getRowIdByTr = /**
     * @param {?} tr
     * @return {?}
     */
    function (tr) {
        if (tr) {
            /** @type {?} */
            var id = tr.getAttribute('id');
            if (id == null || id == undefined) {
                return null;
            }
            return id.replace(TR_PREFIX, '').replace('_fixedright', '').replace('_fixedleft', '').replace('_grouprow', '');
        }
        return null;
    };
    /**
     * @param {?} dataid
     * @param {?} parentElement
     * @return {?}
     */
    Utils.getTrDomById = /**
     * @param {?} dataid
     * @param {?} parentElement
     * @return {?}
     */
    function (dataid, parentElement) {
        if (parentElement) {
            return parentElement.querySelector("[id=\"" + dataid + "\"]");
        }
        return null;
    };
    return Utils;
}());
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-11-19 20:31:27
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
export { Utils };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sVUFBVSxDQUFDOzs7Ozs7Ozs7QUFVckM7Ozs7Ozs7OztJQUFBO0lBa09BLENBQUM7Ozs7SUFoT1UsVUFBSTs7O0lBQVg7Ozs7UUFDSSxTQUFTLEVBQUU7WUFDUCx1Q0FBdUM7WUFDdkMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRSxDQUFDO1FBQ0QsT0FBTyxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxFQUFFLEdBQUcsR0FBRyxHQUFHLEVBQUUsRUFBRSxHQUFHLEdBQUcsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzNGLENBQUM7Ozs7OztJQUVNLGdCQUFVOzs7OztJQUFqQixVQUFrQixLQUFLLEVBQUUsSUFBSTs7WUFDbkIsVUFBVSxHQUFHLGFBQWE7O1lBQzFCLEdBQUcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU07Ozs7O1FBQUMsVUFBQyxHQUFHLEVBQUUsR0FBRztZQUN6QyxJQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUNoQyxPQUFPLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUNuQjtpQkFBTTtnQkFDSCxPQUFPLFVBQVUsQ0FBQzthQUNyQjtRQUNM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USxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztnQkFDeEM7b0JBQ0ksT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN6QztTQUNKO1FBRUQsUUFBUTtRQUNSLElBQUksR0FBRyxDQUFDLEtBQUssS0FBSyw0QkFBNEIsRUFBRTtZQUM1QyxPQUFPLEVBQUUsQ0FBQztTQUNiO1FBRUQsT0FBTyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUN0QyxDQUFDOzs7OztJQUVNLGtCQUFZOzs7O0lBQW5CLFVBQW9CLEVBQUU7UUFDbEIsSUFBSSxFQUFFLEVBQUU7O2dCQUNBLEVBQUUsR0FBRyxFQUFFLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQztZQUU5QixJQUFJLEVBQUUsSUFBSSxJQUFJLElBQUksRUFBRSxJQUFJLFNBQVMsRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUNELE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsRUFBRSxDQUFDLENBQUM7U0FDbEg7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzs7Ozs7SUFFTSxrQkFBWTs7Ozs7SUFBbkIsVUFBb0IsTUFBTSxFQUFFLGFBQWE7UUFDckMsSUFBSSxhQUFhLEVBQUU7WUFDZixPQUFPLGFBQWEsQ0FBQyxhQUFhLENBQUMsV0FBUSxNQUFNLFFBQUksQ0FBQyxDQUFDO1NBQzFEO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNMLFlBQUM7QUFBRCxDQUFDLEFBbE9ELElBa09DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVFJfUFJFRklYIH0gZnJvbSBcIi4uL3R5cGVzXCI7XHJcblxyXG4vKlxyXG4gKiBAQXV0aG9yOiDnlq/ni4Lnp4DmiY0oTHVjYXMgSHVhbmcpXHJcbiAqIEBEYXRlOiAyMDE5LTA4LTA2IDA3OjQzOjUzXHJcbiAqIEBMYXN0RWRpdG9yczog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBATGFzdEVkaXRUaW1lOiAyMDE5LTExLTE5IDIwOjMxOjI3XHJcbiAqIEBRUTogMTA1NTgxODIzOVxyXG4gKiBAVmVyc2lvbjogdjAuMC4xXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVXRpbHMge1xyXG5cclxuICAgIHN0YXRpYyB1dWlkKCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIFM0KCkge1xyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG5vLWJpdHdpc2VcclxuICAgICAgICAgICAgcmV0dXJuICgoKDEgKyBNYXRoLnJhbmRvbSgpKSAqIDB4MTAwMDApIHwgMCkudG9TdHJpbmcoMTYpLnN1YnN0cmluZygxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIChTNCgpICsgUzQoKSArICctJyArIFM0KCkgKyAnLScgKyBTNCgpICsgJy0nICsgUzQoKSArICctJyArIFM0KCkgKyBTNCgpICsgUzQoKSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGtleXNJbkRhdGEoZmllbGQsIGRhdGEpIHtcclxuICAgICAgICBjb25zdCBub1Byb3BlcnR5ID0gJ25vIHByb3BlcnR5JztcclxuICAgICAgICBjb25zdCB2YWwgPSBmaWVsZC5zcGxpdCgnLicpLnJlZHVjZSgob2JqLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgaWYgKG9iaiAmJiBvYmouaGFzT3duUHJvcGVydHkoa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ialtrZXldO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5vUHJvcGVydHk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCBkYXRhKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHZhbCAhPSBub1Byb3BlcnR5O1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog6I635Y+W5a+56LGh5Lit5oyH5a6a5a2X5q6155qE5YC844CCIGZpZWxkOiDlj6/ku6XkuLrluKbmnInlsYLnuqfnu5PmnoTnmoTot6/lvoTvvIzlpoLvvJogdXNlci5maXJzdE5hbWUgfCBuYW1lIOetiVxyXG4gICAgICovXHJcbiAgICBzdGF0aWMgZ2V0VmFsdWUoZmllbGQ6IHN0cmluZywgZGF0YTogYW55LCBzYWZlID0gZmFsc2UpIHtcclxuICAgICAgICBpZiAoIWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuICAnJztcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHJlc3VsdFZhbCA9ICcnO1xyXG4gICAgICAgIGlmIChmaWVsZC5pbmRleE9mKCcuJykgPT09IC0xIHx8IGRhdGEuaGFzT3duUHJvcGVydHkoZmllbGQpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFZhbCA9IGRhdGFbZmllbGRdO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJlc3VsdFZhbCA9IGZpZWxkLnNwbGl0KCcuJykucmVkdWNlKChvYmosIGtleSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvYmpba2V5XTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGRhdGEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHNhZmUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXNjYXBlVmFsdWUocmVzdWx0VmFsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdFZhbDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgc2V0VmFsdWUoIGZpZWxkOiBzdHJpbmcsIHZhbDogYW55LCBvYmo6IHsgW2tleTogc3RyaW5nXTogYW55IH0sIG5lc3QgPSB0cnVlKSB7XHJcbiAgICAgICAgaWYgKGZpZWxkKSB7XHJcbiAgICAgICAgICAgIGlmIChmaWVsZC5pbmRleE9mKCcuJykgPiAtMSAmJiBuZXN0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbGFzdE9iaiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfZmllbGRzID0gZmllbGQuc3BsaXQoJy4nKTtcclxuICAgICAgICAgICAgICAgIF9maWVsZHMucmVkdWNlKCAoYywgcCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RPYmogPSBjO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjW3BdO1xyXG4gICAgICAgICAgICAgICAgfSwgb2JqKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobGFzdE9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RPYmpbX2ZpZWxkcy5wb3AoKV0gPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvYmpbZmllbGRdID0gdmFsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8qKiDojrflj5blpJror63lgLwgKi9cclxuICAgIHN0YXRpYyBnZXRNdWx0aWxpbmd1YWxWYWx1ZSh2YWxPYmosIGxvY2FsZUlkKSB7XHJcbiAgICAgICAgaWYgKHZhbE9iaiAmJiB0eXBlb2YgdmFsT2JqID09PSAnb2JqZWN0JyAmJiBPYmplY3Qua2V5cyh2YWxPYmopLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgbG9jYWxlSWQgPSBsb2NhbGVJZCB8fCAnemgtQ0hTJztcclxuICAgICAgICAgICAgY29uc3QgdmFsID0gdmFsT2JqW2xvY2FsZUlkXTtcclxuICAgICAgICAgICAgaWYgKHZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGVzY2FwZVZhbHVlKHZhbDogYW55KSB7XHJcbiAgICAgICAgaWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCB8fCB2YWwgPT09ICcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVzY2FwZUhUTUwgPSAodW5zYWZlX3N0cikgPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gdW5zYWZlX3N0clxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoLyYvZywgJyZhbXA7JylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC88L2csICcmbHQ7JylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8+L2csICcmZ3Q7JylcclxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFwiL2csICcmcXVvdDsnKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcJy9nLCAnJiMzOTsnKVxyXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcLy9nLCAnJiN4MkY7Jyk7XHJcbiAgICAgICAgICAgICAgICAvLyAucmVwbGFjZSgnc3JjJywnZHJjJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlc2NhcGVIVE1MKHZhbCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdmFsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBldmVudFBhdGgoZXZ0OiBhbnkpIHtcclxuICAgICAgICBjb25zdCBwYXRoID0gKGV2dC5jb21wb3NlZFBhdGggJiYgZXZ0LmNvbXBvc2VkUGF0aCgpKSB8fCBldnQucGF0aDtcclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBldnQudGFyZ2V0O1xyXG5cclxuICAgICAgICBpZiAocGF0aCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAocGF0aC5pbmRleE9mKHdpbmRvdykgPCAwKSA/IHBhdGguY29uY2F0KHdpbmRvdykgOiBwYXRoO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRhcmdldCA9PT0gd2luZG93KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbd2luZG93XTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdldFBhcmVudHMgPSAobm9kZSwgbWVtbyA9IHVuZGVmaW5lZCkgPT4ge1xyXG4gICAgICAgICAgICBtZW1vID0gbWVtbyB8fCBbXTtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcclxuXHJcbiAgICAgICAgICAgIGlmICghcGFyZW50Tm9kZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbW87XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0UGFyZW50cyhwYXJlbnROb2RlLCBtZW1vLmNvbmNhdChwYXJlbnROb2RlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICByZXR1cm4gW3RhcmdldF0uY29uY2F0KGdldFBhcmVudHModGFyZ2V0KSwgd2luZG93KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGFzRGlhbG9nT3BlbigpIHtcclxuICAgICAgICAvLyByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QudmFsdWUuaW5kZXhPZignbW9kYWwtb3BlbicpID4gLTE7XHJcbiAgICAgICAgLy8g5YW85a65SUUgMTFcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc05hbWUuaW5kZXhPZignbW9kYWwtb3BlbicpID4gLTE7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG9uKGVsLCBldnQsIGZuLCBvcHRzOiBhbnkgPSB7fSkge1xyXG4gICAgICAgIGNvbnN0IGRlbGVnYXRvckZuID0gZSA9PiBlLnRhcmdldC5tYXRjaGVzKG9wdHMudGFyZ2V0KSAmJiBmbi5jYWxsKGUudGFyZ2V0LCBlKTtcclxuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKGV2dCwgb3B0cy50YXJnZXQgPyBkZWxlZ2F0b3JGbiA6IGZuLCBvcHRzLm9wdGlvbnMgfHwgZmFsc2UpO1xyXG4gICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBkZWxlZ2F0b3JGbiwgb3B0cyk7XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgb2ZmKGVsLCBldnQsIGZuPSAoKSA9PiB7fSwgb3B0czogYW55ID0ge30pIHtcclxuICAgICAgICBlbC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dCwgZm4sIG9wdHMpO1xyXG4gICAgfVxyXG4gICAgLyoqIOiOt+WPluWtl+espumVv+W6pu+8jOS4reaWh+axieWtl+WNoDLkuKrlrZfnrKYgKi9cclxuICAgIHN0YXRpYyBnZXRCTGVuKHN0cikge1xyXG4gICAgICAgIGlmIChzdHIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICByZXR1cm4gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICBzdHIgKz0gJyc7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvW15cXHgwMC1cXHhmZl0vZywgJzAxJykubGVuZ3RoO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXRpYyBkaWZmZXJlbmNlKGZpcnN0OiBhbnlbXSwgc2Vjb25kOiBhbnlbXSk6IGFueVtdIHtcclxuICAgIC8vICAgICByZXR1cm4gZmlyc3QuZmlsdGVyKGl0ZW0gPT4gIXNlY29uZC5pbmNsdWRlcyhpdGVtKSk7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgLy8gc3RhdGljIGdldERpZmZJdGVtcyhhcnIxLCBhcnIyKSB7XHJcbiAgICAvLyAgICAgY29uc3QgZGlmZjEgPSBVdGlscy5kaWZmZXJlbmNlKGFycjEsIGFycjIpO1xyXG4gICAgLy8gICAgIGNvbnN0IGRpZmYyID0gVXRpbHMuZGlmZmVyZW5jZShhcnIyLCBhcnIxKTtcclxuXHJcbiAgICAvLyAgICAgcmV0dXJuIGRpZmYxLmNvbmNhdChkaWZmMik7XHJcbiAgICAvLyB9XHJcblxyXG4gICAgc3RhdGljIGdldFdoZW5FbXB0eVRleHQoY29sOiBhbnksIGxvY2FsZUlkKSB7XHJcblxyXG4gICAgICAgIGNvbnN0IEVNUFRZX0lOUFVUX1RFWFQgPSB7XHJcbiAgICAgICAgICAgICd6aC1DSFMnOiAn6K+36L6T5YWlJyxcclxuICAgICAgICAgICAgJ3poLUNIVCc6ICfoq4vovLjlhaUnLFxyXG4gICAgICAgICAgICBlbjogJ1BsZWFzZSBpbnB1dCdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBjb25zdCBFTVBUWV9TRUxFQ1RfVEVYVCA9IHtcclxuICAgICAgICAgICAgJ3poLUNIUyc6ICfor7fpgInmi6knLFxyXG4gICAgICAgICAgICAnemgtQ0hUJzogJ+iri+mBuOaThycsXHJcbiAgICAgICAgICAgIGVuOiAnUGxlYXNlIHNlbGVjdCdcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgaWYgKGNvbC5lZGl0b3IpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChjb2wuZWRpdG9yLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2RhdGVwaWNrZXInOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnc2VsZWN0JzpcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2xvb2t1cCc6XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjb21ib2xpc3QnOlxyXG4gICAgICAgICAgICAgICAgY2FzZSAnY29tYm8tbG9va3VwJzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gIEVNUFRZX1NFTEVDVF9URVhUW2xvY2FsZUlkXTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVNUFRZX0lOUFVUX1RFWFRbbG9jYWxlSWRdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDmjqfliLbpnaLmnb/liJdcclxuICAgICAgICBpZiAoY29sLmZpZWxkID09PSAnX2RhdGFncmlkLXNldHRpbmctY29udHJvbF8nKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnJztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBFTVBUWV9JTlBVVF9URVhUW2xvY2FsZUlkXTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0Um93SWRCeVRyKHRyKSB7XHJcbiAgICAgICAgaWYgKHRyKSB7XHJcbiAgICAgICAgICAgIGxldCBpZCA9IHRyLmdldEF0dHJpYnV0ZSgnaWQnKTtcclxuXHJcbiAgICAgICAgICAgIGlmIChpZCA9PSBudWxsIHx8IGlkID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlkLnJlcGxhY2UoVFJfUFJFRklYLCAnJykucmVwbGFjZSgnX2ZpeGVkcmlnaHQnLCAnJykucmVwbGFjZSgnX2ZpeGVkbGVmdCcsICcnKS5yZXBsYWNlKCdfZ3JvdXByb3cnLCAnJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRUckRvbUJ5SWQoZGF0YWlkLCBwYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgaWYgKHBhcmVudEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHBhcmVudEVsZW1lbnQucXVlcnlTZWxlY3RvcihgW2lkPVwiJHtkYXRhaWR9XCJdYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=