/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { LocaleService } from '@farris/ui-locale';
import { Injectable, Injector, EventEmitter } from '@angular/core';
import { Compare } from '@farris/ui-common/types';
import { DatagridFacadeService } from './datagrid-facade.service';
import { Utils } from './../utils/utils';
import { ColumnFilterType } from '../types/data-column';
import { DatagridColumnsHelper } from './datagrid-columns.helper';
import { trim } from 'lodash-es';
var DatagridFilterService = /** @class */ (function () {
    function DatagridFilterService(dfs, localeSer, inject) {
        this.dfs = dfs;
        this.localeSer = localeSer;
        this.inject = inject;
        this.removeField = new EventEmitter();
    }
    /**
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.validateRowData = /**
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    function (rowData, conditions) {
        if (!conditions || Object.keys(conditions).length === 0) {
            return true;
        }
        return this.checkAllFieldInRowData(rowData, conditions);
    };
    /**
     * @param {?} data
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.executeFilter = /**
     * @param {?} data
     * @param {?} conditions
     * @return {?}
     */
    function (data, conditions) {
        var _this = this;
        if (this.dfs.getState().enableSmartFilter) {
            return this.executeSmartFilter(data, conditions);
        }
        if (data && data.length) {
            return data.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.validateRowData(n, conditions); }));
        }
        return data;
    };
    /**
     * @private
     * @param {?} fieldDataValue
     * @param {?} operator
     * @param {?} targetValue
     * @return {?}
     */
    DatagridFilterService.prototype.getCompareResult = /**
     * @private
     * @param {?} fieldDataValue
     * @param {?} operator
     * @param {?} targetValue
     * @return {?}
     */
    function (fieldDataValue, operator, targetValue) {
        /** @type {?} */
        var op = parseInt('' + operator, 10);
        switch (op) {
            case Compare.Equal:
                return fieldDataValue == targetValue;
            case Compare.NotEqual:
                return ('' + fieldDataValue).toLowerCase() !== ('' + targetValue).toLowerCase();
            case Compare.Greater:
                return fieldDataValue > targetValue;
            case Compare.GreaterOrEqual:
                return fieldDataValue >= targetValue;
            case Compare.Less:
                return fieldDataValue < targetValue;
            case Compare.LessOrEqual:
                return fieldDataValue <= targetValue;
            case Compare.Like:
                if (fieldDataValue == null) {
                    fieldDataValue = '';
                }
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) > -1;
            case Compare.NotLike:
                return ('' + fieldDataValue).toLowerCase().indexOf(targetValue.toLowerCase()) === -1;
            case Compare.In:
                targetValue = targetValue || [];
                return targetValue.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n == fieldDataValue; })) > -1;
            case 1001: // Empty
                return trim(fieldDataValue) === '' || fieldDataValue === null || fieldDataValue === undefined;
            case 1002: // NotEmpty
                return trim(fieldDataValue) !== '' && fieldDataValue !== null && fieldDataValue !== undefined;
            case 1003: // Null
                return fieldDataValue === null;
            case 1004: // NotNull
                return fieldDataValue !== null;
        }
    };
    /**
     * @private
     * @param {?} result1
     * @param {?} relation
     * @param {?} result2
     * @return {?}
     */
    DatagridFilterService.prototype.getRelationResult = /**
     * @private
     * @param {?} result1
     * @param {?} relation
     * @param {?} result2
     * @return {?}
     */
    function (result1, relation, result2) {
        /** @type {?} */
        var _relation = relation.toLowerCase();
        if (_relation === 'and') {
            return result1 && result2;
        }
        else {
            return result1 || result2;
        }
    };
    /**
     * @private
     * @param {?} resultObj
     * @return {?}
     */
    DatagridFilterService.prototype.checkAllFieldResult = /**
     * @private
     * @param {?} resultObj
     * @return {?}
     */
    function (resultObj) {
        if (!resultObj) {
            return true;
        }
        return Object.values(resultObj).reduce((/**
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        function (c, n) {
            return c && n;
        }), true);
    };
    /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.checkAllFieldInRowData = /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    function (rowData, conditions) {
        var _this = this;
        // this.state = conditions;
        /** @type {?} */
        var resultObj = null;
        if (conditions) {
            /** @type {?} */
            var fields = Object.keys(conditions);
            resultObj = {};
            fields.forEach((/**
             * @param {?} field
             * @return {?}
             */
            function (field) {
                /** @type {?} */
                var fieldValue = Utils.getValue(field, rowData);
                /** @type {?} */
                var columnObj = _this.dfs.getColumn(field);
                if (columnObj && columnObj.isMultilingualField) {
                    fieldValue = Utils.getMultilingualValue(fieldValue, _this.localeSer.localeId);
                }
                /** @type {?} */
                var where = conditions[field];
                var value1 = where.value1, operator1 = where.operator1, relation = where.relation, operator2 = where.operator2, value2 = where.value2;
                if (where) {
                    /** @type {?} */
                    var result = _this.getCompareResult(fieldValue, operator1, value1);
                    resultObj[field] = result;
                    if (relation) {
                        /** @type {?} */
                        var result2 = _this.getCompareResult(fieldValue, operator2, value2);
                        resultObj[field] = _this.getRelationResult(result, relation, result2);
                    }
                }
            }));
        }
        return this.checkAllFieldResult(resultObj);
    };
    /**
     * @param {?} field
     * @return {?}
     */
    DatagridFilterService.prototype.removeFilterField = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        this.removeField.emit(field);
    };
    /**
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.convertFilterCondition2String = /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        var _this = this;
        if (!conditions) {
            return '';
        }
        /** @type {?} */
        var str = '';
        /** @type {?} */
        var andText = this.localeSer.getValue('datagrid.filter.and');
        /** @type {?} */
        var orText = this.localeSer.getValue('datagrid.filter.or');
        /** @type {?} */
        var and = "<span class='badge badge-success'>" + andText + "</span>";
        /** @type {?} */
        var and2 = "<span class='badge badge-info'>" + andText + "</span>";
        /** @type {?} */
        var or = "<span class='badge badge-warning'>" + orText + "</span>";
        /** @type {?} */
        var lbracket = "<b>\u3014</b>";
        /** @type {?} */
        var rbracket = "<b>\u3015</b>";
        /** @type {?} */
        var ellipsis = "[ <span class=\"ellipsis\" title=\"$title$\">  $value$<i class=\"f-icon f-icon-lookup\"></i></span> ]";
        str = Object.keys(conditions).reduce((/**
         * @param {?} c
         * @param {?} r
         * @return {?}
         */
        function (c, r) {
            /** @type {?} */
            var filter = conditions[r];
            /** @type {?} */
            var col = _this.dfs.getColumn(r);
            /** @type {?} */
            var t = "<b>" + col.title + "</b>";
            /** @type {?} */
            var s = " " + t + " " + _this.getCompareString(filter.operator1) + " " + Utils.escapeValue(filter.value1) + "  ";
            if (filter.operator1 == Compare.In) {
                /** @type {?} */
                var txt = filter.value1;
                /** @type {?} */
                var txt2 = txt;
                if (col.filter.type === ColumnFilterType.enum) {
                    /** @type {?} */
                    var enumOpts = DatagridColumnsHelper.getFilterEnumOptions(col);
                    txt = DatagridColumnsHelper.getEnumText(enumOpts, filter.value1);
                    txt2 = txt.split(',').slice(0, 2).join(',');
                }
                else {
                    txt2 = txt.slice(0, 2).join(',');
                }
                s = " " + t + " " + _this.getCompareString(filter.operator1) + " [ " + txt + " ]  ";
                if (filter.value1.length > 2) {
                    s = " " + t + " " + _this.getCompareString(filter.operator1) + " " + ellipsis.replace('$title$', txt).replace('$value$', txt2) + "  ";
                }
            }
            else {
                if (filter.operator1 == Compare.Equal && Array.isArray(filter.value1)) {
                    if (!filter.value1.length) {
                        s = " " + t + " " + _this.getCompareString(filter.operator1) + " ''  ";
                    }
                }
            }
            if (filter.relation) {
                /** @type {?} */
                var s2 = t + " " + _this.getCompareString(filter.operator2) + " " + filter.value2;
                s = lbracket + " " + s + " " + (filter.relation === 'and' ? and2 : or) + " " + s2 + " " + rbracket;
            }
            return c + " <span class=\"filter-field filter-column-" + r + "\"> " + s + " AND </span>";
        }), '');
        /** @type {?} */
        var lastANDidx = str.lastIndexOf('AND');
        /** @type {?} */
        var resultStr = str.substr(0, lastANDidx);
        resultStr += str.substr(lastANDidx + 3);
        return resultStr.replace(/AND/g, and).replace(/OR/g, or);
    };
    /**
     * @private
     * @param {?} operator
     * @return {?}
     */
    DatagridFilterService.prototype.getCompareString = /**
     * @private
     * @param {?} operator
     * @return {?}
     */
    function (operator) {
        /** @type {?} */
        var op = parseInt('' + operator, 10);
        /** @type {?} */
        var code = '';
        switch (op) {
            case Compare.Equal:
            case Compare.NotEqual:
            case Compare.Greater:
            case Compare.GreaterOrEqual:
            case Compare.Less:
            case Compare.LessOrEqual:
            case Compare.Like:
            case Compare.NotLike:
            case Compare.In:
                code = Compare[op];
                code = code[0].toLowerCase() + code.substr(1);
                return this.localeSer.getValue('datagrid.filter.operators.' + code);
            case 1001: // Empty
                return ' ' + this.localeSer.getValue('datagrid.filter.operators.empty');
            case 1002: // NotEmpty
                return ' ' + this.localeSer.getValue('datagrid.filter.operators.notEmpty');
            case 1003: // Null
                return ' ' + this.localeSer.getValue('datagrid.filter.operators.null');
            case 1004: // NotNull
                return ' ' + this.localeSer.getValue('datagrid.filter.operators.notNull');
        }
    };
    /**
     * @param {?} condition
     * @return {?}
     */
    DatagridFilterService.prototype.convert2FilterArray = /**
     * @param {?} condition
     * @return {?}
     */
    function (condition) {
        var _this = this;
        /** @type {?} */
        var filterArr = [];
        /** @type {?} */
        var excludeDataTypes = ['number', 'date', 'datetime'];
        if (condition) {
            /** @type {?} */
            var fields = Object.keys(condition);
            if (fields && fields.length) {
                fields.forEach((/**
                 * @param {?} field
                 * @return {?}
                 */
                function (field) {
                    /** @type {?} */
                    var columnInfo = _this.dfs.getColumn(field);
                    /** @type {?} */
                    var dataType = columnInfo.dataType || 'string';
                    /** @type {?} */
                    var obj = { filterField: field, value: '', lbracket: '', rbracket: '', relation: 1, compare: 0 };
                    /** @type {?} */
                    var conditionVal = condition[field];
                    if (typeof conditionVal === 'object') {
                        // tfs 568484
                        /** @type {?} */
                        var operator1 = parseInt('' + conditionVal.operator1, 10);
                        if (operator1 === 1001 || operator1 === 1002) {
                            obj.compare = operator1 === 1001 ? Compare.Equal : Compare.NotEqual;
                            obj.lbracket = '(';
                            obj.relation = operator1 === 1002 ? 1 : 2;
                            filterArr.push(obj);
                            if (excludeDataTypes.includes(dataType)) {
                                obj.value = null;
                                obj.lbracket = '';
                                obj.relation = 1;
                                obj.compare = operator1 === 1002 ? Compare.IsNot : Compare.Is;
                                return;
                            }
                            /** @type {?} */
                            var obj2 = { filterField: field, value: null, lbracket: '', rbracket: ')', relation: 1, compare: 0 };
                            if (operator1 === 1002) {
                                obj2.compare = Compare.IsNot;
                            }
                            else {
                                obj2.compare = Compare.Is;
                            }
                            filterArr.push(obj2);
                            return;
                        }
                        obj.compare = conditionVal.operator1;
                        obj.value = conditionVal.value1;
                        filterArr.push(obj);
                        if (conditionVal.value2) {
                            obj.lbracket = '(';
                            obj.relation = conditionVal.relation === 'and' ? 1 : 2;
                            /** @type {?} */
                            var obj2 = { filterField: field, value: '', lbracket: '', rbracket: ')', relation: 1, compare: 0 };
                            obj2.compare = conditionVal.operator2;
                            obj2.value = conditionVal.value2;
                            filterArr.push(obj2);
                        }
                        else {
                            if (conditionVal.operator2) {
                                /** @type {?} */
                                var op2 = parseInt('' + conditionVal.operator2, 10);
                                if (op2 === 1001 || op2 === 1002) {
                                    obj.lbracket = '(';
                                    obj.relation = conditionVal.relation === 'and' ? 1 : 2;
                                    /** @type {?} */
                                    var obj2 = { filterField: field, value: '', lbracket: '(', rbracket: '', relation: 2, compare: 0 };
                                    obj2.compare = op2 === 1001 ? Compare.Equal : Compare.NotEqual;
                                    obj2.relation = op2 === 1002 ? 1 : 2;
                                    filterArr.push(obj2);
                                    if (excludeDataTypes.includes(dataType)) {
                                        obj2.value = null;
                                        obj2.lbracket = '';
                                        obj2.rbracket = ')';
                                        obj2.relation = 1;
                                        obj2.compare = op2 === 1002 ? Compare.IsNot : Compare.Is;
                                        return;
                                    }
                                    /** @type {?} */
                                    var obj21 = { filterField: field, value: null, lbracket: '', rbracket: '))', relation: 1, compare: 0 };
                                    obj21.compare = op2 === 1001 ? Compare.Is : Compare.IsNot;
                                    filterArr.push(obj21);
                                }
                            }
                        }
                    }
                    return obj;
                }));
            }
        }
        if (filterArr.length) {
            this.checkEnumTypeFilters(filterArr);
            filterArr[filterArr.length - 1].relation = 0;
        }
        return filterArr;
    };
    /**
     * @private
     * @param {?} filterArr
     * @return {?}
     */
    DatagridFilterService.prototype.checkEnumTypeFilters = /**
     * @private
     * @param {?} filterArr
     * @return {?}
     */
    function (filterArr) {
        var _this = this;
        /** @type {?} */
        var enumFilters = {};
        filterArr.forEach((/**
         * @param {?} f
         * @param {?} i
         * @return {?}
         */
        function (f, i) {
            /** @type {?} */
            var enumFilterArr = _this.convertEnumTypeFilter(f);
            if (enumFilterArr && enumFilterArr.length) {
                enumFilters[f.filterField] = enumFilterArr;
            }
        }));
        /** @type {?} */
        var keys = Object.keys(enumFilters);
        if (keys.length) {
            keys.forEach((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                /** @type {?} */
                var i = filterArr.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.filterField === k; }));
                filterArr.splice.apply(filterArr, tslib_1.__spread([i, 1], enumFilters[k]));
            }));
        }
        return filterArr;
    };
    // 将enum 类型的条件转换多个条件
    // 将enum 类型的条件转换多个条件
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    DatagridFilterService.prototype.convertEnumTypeFilter = 
    // 将enum 类型的条件转换多个条件
    /**
     * @private
     * @param {?} filter
     * @return {?}
     */
    function (filter) {
        if (filter) {
            /** @type {?} */
            var col = (/** @type {?} */ (this.dfs.getColumn(filter.filterField)));
            if (col && col.filter && col.filter.type === ColumnFilterType.enum) {
                if (Array.isArray(filter.value) && filter.value.length) {
                    if (filter.value.length === 1) {
                        filter.compare = Compare.Equal;
                        filter.value = filter.value[0];
                        return [];
                    }
                    else {
                        // > 1
                        /** @type {?} */
                        var filterArr = filter.value.map((/**
                         * @param {?} val
                         * @return {?}
                         */
                        function (val) {
                            return {
                                filterField: filter.filterField,
                                value: val,
                                lbracket: '',
                                rbracket: '',
                                relation: 2,
                                // or
                                compare: 0
                            };
                        }));
                        filterArr[0].lbracket = '(';
                        filterArr[filter.value.length - 1].rbracket = ')';
                        filterArr[filter.value.length - 1].relation = 1;
                        return filterArr;
                    }
                }
            }
        }
        return [];
    };
    /**
     * @param {?} col
     * @return {?}
     */
    DatagridFilterService.prototype.createColumnFilterOptions = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        /** @type {?} */
        var filterTypeOptions = {
            type: ColumnFilterType.string,
            enableOperator: true
        };
        if (col.editor) {
            switch (col.editor.type) {
                case 'textarea':
                case 'textbox':
                case 'language-textbox':
                    filterTypeOptions = {
                        type: ColumnFilterType.string,
                        enableOperator: true
                    };
                    break;
                case 'checkbox':
                case 'switch':
                    filterTypeOptions = {
                        type: ColumnFilterType.boolean,
                        enableOperator: false
                    };
                    break;
                case 'numberbox':
                    filterTypeOptions = {
                        type: ColumnFilterType.number,
                        enableOperator: true
                    };
                    break;
                case 'combolist':
                case 'select':
                    filterTypeOptions = {
                        type: ColumnFilterType.enum,
                        enableOperator: true,
                        options: col.editor.options
                    };
                    break;
                case 'datepicker':
                    filterTypeOptions = {
                        type: col['dataType'] === 'datetime' ? ColumnFilterType.datetime : ColumnFilterType.date,
                        enableOperator: true,
                        options: {
                            dateFormat: col.editor.options.dateFormat,
                            returnFormat: col.editor.options.returnFormat
                        }
                    };
                    break;
                case 'timepicker':
                    filterTypeOptions = {
                        type: ColumnFilterType.time,
                        enableOperator: true
                    };
                    break;
            }
        }
        else if (col.formatter) {
            if (typeof col.formatter === 'object' && Object.keys(col.formatter).length) {
                /** @type {?} */
                var options = col.formatter['options'];
                switch (col.formatter['type']) {
                    case 'number':
                        filterTypeOptions = {
                            type: ColumnFilterType.number,
                            enableOperator: true
                        };
                        break;
                    case 'enum':
                        filterTypeOptions = {
                            type: ColumnFilterType.enum,
                            enableOperator: true,
                            options: options
                        };
                        break;
                    case 'boolean':
                        filterTypeOptions = {
                            type: ColumnFilterType.boolean,
                            enableOperator: false
                        };
                        break;
                    case 'datetime':
                        /** @type {?} */
                        var tye = ColumnFilterType.datetime;
                        /** @type {?} */
                        var fmt = 'yyyy-MM-dd';
                        /** @type {?} */
                        var returnFmt = 'yyyy-MM-dd';
                        if (options && options.format) {
                            fmt = options.format;
                            if (fmt.indexOf('HH:') == -1) {
                                tye = ColumnFilterType.date;
                            }
                            else {
                                returnFmt += ' HH:mm';
                                if (fmt.indexOf('ss') > -1) {
                                    returnFmt += ':ss';
                                }
                            }
                        }
                        else {
                            tye = ColumnFilterType.date;
                        }
                        filterTypeOptions = {
                            type: tye,
                            enableOperator: true
                        };
                        filterTypeOptions.options = { dateFormat: fmt, returnFormat: returnFmt };
                        break;
                    default:
                        filterTypeOptions = {
                            type: ColumnFilterType.string,
                            enableOperator: true
                        };
                }
            }
        }
        else {
            filterTypeOptions = {
                type: ColumnFilterType.string,
                enableOperator: true
            };
        }
        return filterTypeOptions;
    };
    //#region  Smart Filter
    //#region  Smart Filter
    /**
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.convertSmartFilter2EntityFilter = 
    //#region  Smart Filter
    /**
     * @param {?} conditions
     * @return {?}
     */
    function (conditions) {
        if (conditions && conditions.length) {
            return conditions.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return n;
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.validateRowData2 = /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    function (rowData, conditions) {
        if (!conditions || conditions.length === 0) {
            return true;
        }
        return this.checkRowDataWithCondition(rowData, conditions);
    };
    /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.checkRowDataWithCondition = /**
     * @private
     * @param {?} rowData
     * @param {?} conditions
     * @return {?}
     */
    function (rowData, conditions) {
        var _this = this;
        /** @type {?} */
        var resultObj = null;
        if (conditions) {
            resultObj = {};
            conditions.forEach((/**
             * @param {?} condition
             * @return {?}
             */
            function (condition) {
                /** @type {?} */
                var field = condition.FilterField;
                /** @type {?} */
                var fieldValue = Utils.getValue(field, rowData);
                /** @type {?} */
                var columnObj = _this.dfs.getColumn(field);
                if (columnObj && columnObj.isMultilingualField) {
                    fieldValue = Utils.getMultilingualValue(fieldValue, _this.localeSer.localeId);
                }
                /** @type {?} */
                var where = condition;
                var Value = where.Value, Relation = where.Relation, operator1 = where.Compare;
                if (where) {
                    /** @type {?} */
                    var r = _this.getCompareResult(fieldValue, operator1, Value);
                    if (resultObj[field] === undefined) {
                        resultObj[field] = [r];
                    }
                    else {
                        resultObj[field].push(r);
                    }
                }
            }));
        }
        // return this.checkAllFieldResult(resultObj);
        /** @type {?} */
        var fields = Object.keys(resultObj);
        /** @type {?} */
        var result = [];
        fields.forEach((/**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var _filters = conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.FilterField === f; }));
            if (resultObj[f].length === 1) {
                result.push(resultObj[f][0]);
            }
            else {
                if (_filters[0].Relation === 1 && resultObj[f].length === 2) { // and
                    result.push(resultObj[f][0] && resultObj[f][1]);
                }
                else { // or
                    result.push(resultObj[f].indexOf(true) > -1);
                }
            }
        }));
        return result.indexOf(false) === -1;
    };
    /**
     * @param {?} data
     * @param {?} conditions
     * @return {?}
     */
    DatagridFilterService.prototype.executeSmartFilter = /**
     * @param {?} data
     * @param {?} conditions
     * @return {?}
     */
    function (data, conditions) {
        var _this = this;
        if (data && data.length) {
            return data.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return _this.validateRowData2(n, conditions); }));
        }
        return data;
    };
    DatagridFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridFilterService.ctorParameters = function () { return [
        { type: DatagridFacadeService },
        { type: LocaleService },
        { type: Injector }
    ]; };
    return DatagridFilterService;
}());
export { DatagridFilterService };
if (false) {
    /** @type {?} */
    DatagridFilterService.prototype.removeField;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterService.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterService.prototype.localeSer;
    /**
     * @type {?}
     * @private
     */
    DatagridFilterService.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,