/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { ColumnFilterType } from './../types/data-column';
import { bindCallback, of } from 'rxjs';
var DatagridColumnsHelper = /** @class */ (function () {
    function DatagridColumnsHelper() {
    }
    /** 获取总列数 */
    /**
     * 获取总列数
     * @private
     * @param {?} firstCols
     * @return {?}
     */
    DatagridColumnsHelper.getColumnTotal = /**
     * 获取总列数
     * @private
     * @param {?} firstCols
     * @return {?}
     */
    function (firstCols) {
        /** @type {?} */
        var total = 0;
        firstCols.forEach((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            total += (n.colspan || 1);
        }));
        return total;
    };
    // 查找未赋值项的索引
    // 查找未赋值项的索引
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    DatagridColumnsHelper.findUndefinedItem = 
    // 查找未赋值项的索引
    /**
     * @private
     * @param {?} arr
     * @return {?}
     */
    function (arr) {
        for (var i = 0; i < arr.length; i++) {
            if (arr[i] == undefined) {
                return i;
            }
        }
        return -1;
    };
    /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    DatagridColumnsHelper.getColumnFields = /**
     * @private
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        /** @type {?} */
        var aa = [];
        // 根据第一行计算总列数
        /** @type {?} */
        var colTotal = DatagridColumnsHelper.getColumnTotal(columns[0]);
        // 创建空数组
        for (var i = 0; i < columns.length; i++) {
            aa[i] = new Array(colTotal);
        }
        var _loop_1 = function (i) {
            columns[i].forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                /** @type {?} */
                var k = DatagridColumnsHelper.findUndefinedItem(aa[i]);
                if (k >= 0) {
                    /** @type {?} */
                    var field = col.field || col.id || '';
                    for (var c = 0; c < (col.colspan || 1); c++) {
                        for (var r = 0; r < (col.rowspan || 1); r++) {
                            aa[i + r][k] = field;
                        }
                        k++;
                    }
                }
            }));
        };
        for (var i = 0; i < columns.length; i++) {
            _loop_1(i);
        }
        return aa;
    };
    /**
     * @param {?} col
     * @param {?} ins
     * @return {?}
     */
    DatagridColumnsHelper.columnIsVisible = /**
     * @param {?} col
     * @param {?} ins
     * @return {?}
     */
    function (col, ins) {
        if (col.visible === undefined) {
            col.visible = true;
        }
        /** @type {?} */
        var t = typeof col.visible;
        if (t === 'boolean') {
            return col.visible;
        }
        else if (t === 'function') {
            return col.visible({ instance: ins, column: col });
        }
        else {
            return true;
        }
    };
    /**
     * @param {?} columns
     * @return {?}
     */
    DatagridColumnsHelper.getFields = /**
     * @param {?} columns
     * @return {?}
     */
    function (columns) {
        // 移除隐藏的列
        /** @type {?} */
        var _cols = columns.map((/**
         * @param {?} cols
         * @return {?}
         */
        function (cols) {
            cols = cols.filter((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return DatagridColumnsHelper.columnIsVisible(col, DatagridColumnsHelper.gridInstance); }));
            return cols;
        }));
        /** @type {?} */
        var fields = DatagridColumnsHelper.getColumnFields(_cols);
        return fields.length ? fields[fields.length - 1] : fields;
    };
    /**
     * @param {?} column
     * @return {?}
     */
    DatagridColumnsHelper.getFilterEnumOptions = /**
     * @param {?} column
     * @return {?}
     */
    function (column) {
        /** @type {?} */
        var enumSetting = null;
        if (column.filter.type === ColumnFilterType.enum) {
            /** @type {?} */
            var fmt = (/** @type {?} */ (column.formatter));
            if (fmt) {
                enumSetting = fmt.options;
            }
            else {
                if (column.filter.options) {
                    enumSetting = column.filter.options;
                }
            }
        }
        return enumSetting;
    };
    /**
     * @param {?} enumOpts
     * @param {?} value1
     * @return {?}
     */
    DatagridColumnsHelper.getEnumText = /**
     * @param {?} enumOpts
     * @param {?} value1
     * @return {?}
     */
    function (enumOpts, value1) {
        if (!enumOpts) {
            return '';
        }
        var valueField = enumOpts.valueField, textField = enumOpts.textField, data = enumOpts.data;
        /** @type {?} */
        var str = '';
        if (value1) {
            str += " " + value1.map((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var enumItem = data.find((/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d[valueField] === v; }));
                return enumItem[textField];
            })).join(',');
        }
        return str;
    };
    /**
     * @param {?} col
     * @return {?}
     */
    DatagridColumnsHelper.columnVisibleAsObservable = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        if (typeof col.visible === 'function') {
            /** @type {?} */
            var visibleAsObservable = bindCallback(col.visible);
            return visibleAsObservable();
        }
        return of(col.visible);
    };
    /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    DatagridColumnsHelper.getParentColumns = /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    function (col, allCols) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var _getParents = (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            if (c && c.parentId) {
                /** @type {?} */
                var parentCol = allCols.find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === c.parentId; }));
                // arr.splice(0, 0, parentCol);
                arr.push(parentCol);
                _getParents(parentCol);
            }
        });
        _getParents(col);
        return arr;
    };
    /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    DatagridColumnsHelper.getChildColumns = /**
     * @param {?} col
     * @param {?} allCols
     * @return {?}
     */
    function (col, allCols) {
        /** @type {?} */
        var arr = [];
        /** @type {?} */
        var _getChilds = (/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            if (c && c.parentId) {
                /** @type {?} */
                var childs = allCols.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.parentId === c.id; }));
                arr.splice.apply(arr, tslib_1.__spread([0, 0], childs));
                childs.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                function (child) {
                    _getChilds(child);
                }));
            }
        });
        _getChilds(col);
        return arr;
    };
    // 检查多表头时，设计器中将列设为隐藏
    // 检查多表头时，设计器中将列设为隐藏
    /**
     * @param {?} allCols
     * @return {?}
     */
    DatagridColumnsHelper.checkGroupHeaderColumnVisible = 
    // 检查多表头时，设计器中将列设为隐藏
    /**
     * @param {?} allCols
     * @return {?}
     */
    function (allCols) {
        /** @type {?} */
        var hiddenFields = allCols.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.visible === false; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field; }));
        hiddenFields.forEach((/**
         * @param {?} field
         * @return {?}
         */
        function (field) {
            /** @type {?} */
            var _col = allCols.find((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return col.field === field || col.id === field; }));
            if (_col) {
                /** @type {?} */
                var parents = DatagridColumnsHelper.getParentColumns(_col, allCols);
                parents.forEach((/**
                 * @param {?} p
                 * @return {?}
                 */
                function (p) {
                    /** @type {?} */
                    var _childs = allCols.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.parentId === p.id && (n.visible || n.visible === undefined); }));
                    p.colspan = _childs.reduce((/**
                     * @param {?} r
                     * @param {?} c
                     * @return {?}
                     */
                    function (r, c) {
                        r = r + (c.colspan || 1);
                        return r;
                    }), 0);
                    p.visible = !!p.colspan;
                }));
            }
        }));
    };
    // 多表头下仅有一列显示
    // 多表头下仅有一列显示
    /**
     * @return {?}
     */
    DatagridColumnsHelper.onlyOneColumn = 
    // 多表头下仅有一列显示
    /**
     * @return {?}
     */
    function () {
    };
    DatagridColumnsHelper.gridInstance = null;
    return DatagridColumnsHelper;
}());
export { DatagridColumnsHelper };
if (false) {
    /** @type {?} */
    DatagridColumnsHelper.gridInstance;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1ucy5oZWxwZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2RhdGFncmlkLWNvbHVtbnMuaGVscGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFjLGdCQUFnQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEUsT0FBTyxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFeEM7SUFBQTtJQXNLQSxDQUFDO0lBbEtHLFlBQVk7Ozs7Ozs7SUFDRyxvQ0FBYzs7Ozs7O0lBQTdCLFVBQThCLFNBQWdCOztZQUN0QyxLQUFLLEdBQUcsQ0FBQztRQUNiLFNBQVMsQ0FBQyxPQUFPOzs7O1FBQUMsVUFBQSxDQUFDO1lBQ2YsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztRQUM5QixDQUFDLEVBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFFRCxZQUFZOzs7Ozs7O0lBQ0csdUNBQWlCOzs7Ozs7O0lBQWhDLFVBQWlDLEdBQUc7UUFDaEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDakMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksU0FBUyxFQUFFO2dCQUNyQixPQUFPLENBQUMsQ0FBQzthQUNaO1NBQ0o7UUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQ2QsQ0FBQzs7Ozs7O0lBRWMscUNBQWU7Ozs7O0lBQTlCLFVBQStCLE9BQU87O1lBQzVCLEVBQUUsR0FBRyxFQUFFOzs7WUFFUCxRQUFRLEdBQUcscUJBQXFCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRSxRQUFRO1FBQ1IsS0FBSyxJQUFJ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LEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQzVCLENBQUMsRUFBQyxDQUFDO2FBQ047UUFDTCxDQUFDLEVBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCxhQUFhOzs7OztJQUNOLG1DQUFhOzs7OztJQUFwQjtJQUVBLENBQUM7SUFuS00sa0NBQVksR0FBRyxJQUFJLENBQUM7SUFvSy9CLDRCQUFDO0NBQUEsQUF0S0QsSUFzS0M7U0F0S1kscUJBQXFCOzs7SUFFOUIsbUNBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGF0YUNvbHVtbiwgQ29sdW1uRmlsdGVyVHlwZSB9IGZyb20gJy4vLi4vdHlwZXMvZGF0YS1jb2x1bW4nO1xyXG5pbXBvcnQgeyBiaW5kQ2FsbGJhY2ssIG9mIH0gZnJvbSAncnhqcyc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGF0YWdyaWRDb2x1bW5zSGVscGVyIHtcclxuXHJcbiAgICBzdGF0aWMgZ3JpZEluc3RhbmNlID0gbnVsbDtcclxuXHJcbiAgICAvKiog6I635Y+W5oC75YiX5pWwICovXHJcbiAgICBwcml2YXRlIHN0YXRpYyBnZXRDb2x1bW5Ub3RhbChmaXJzdENvbHM6IGFueVtdKSB7XHJcbiAgICAgICAgbGV0IHRvdGFsID0gMDtcclxuICAgICAgICBmaXJzdENvbHMuZm9yRWFjaChuID0+IHtcclxuICAgICAgICAgICAgdG90YWwgKz0gKG4uY29sc3BhbiB8fCAxKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdG90YWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5p+l5om+5pyq6LWL5YC86aG555qE57Si5byVXHJcbiAgICBwcml2YXRlIHN0YXRpYyBmaW5kVW5kZWZpbmVkSXRlbShhcnIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFyci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoYXJyW2ldID09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIC0xO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgc3RhdGljIGdldENvbHVtbkZpZWxkcyhjb2x1bW5zKSB7XHJcbiAgICAgICAgY29uc3QgYWEgPSBbXTtcclxuICAgICAgICAvLyDmoLnmja7nrKzkuIDooYzorqHnrpfmgLvliJfmlbBcclxuICAgICAgICBjb25zdCBjb2xUb3RhbCA9IERhdGFncmlkQ29sdW1uc0hlbHBlci5nZXRDb2x1bW5Ub3RhbChjb2x1bW5zWzBdKTtcclxuICAgICAgICAvLyDliJvlu7rnqbrmlbDnu4RcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgYWFbaV0gPSBuZXcgQXJyYXkoY29sVG90YWwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbHVtbnMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY29sdW1uc1tpXS5mb3JFYWNoKGNvbCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgayA9IERhdGFncmlkQ29sdW1uc0hlbHBlci5maW5kVW5kZWZpbmVkSXRlbShhYVtpXSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoayA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSBjb2wuZmllbGQgfHwgY29sLmlkIHx8ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgKGNvbC5jb2xzcGFuIHx8IDEpOyBjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgciA9IDA7IHIgPCAoY29sLnJvd3NwYW4gfHwgMSk7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWFbaSArIHJdW2tdID0gZmllbGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBhYTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29sdW1uSXNWaXNpYmxlKGNvbDogYW55LCBpbnM6IGFueSkge1xyXG4gICAgICAgIGlmIChjb2wudmlzaWJsZSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIGNvbC52aXNpYmxlID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHQgPSB0eXBlb2YgY29sLnZpc2libGU7XHJcbiAgICAgICAgaWYgKHQgPT09ICdib29sZWFuJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sLnZpc2libGU7XHJcbiAgICAgICAgfSBlbHNlIGlmICggdCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICByZXR1cm4gY29sLnZpc2libGUoe2luc3RhbmNlOiBpbnMsIGNvbHVtbjogY29sfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRGaWVsZHMoY29sdW1ucykge1xyXG4gICAgICAgIC8vIOenu+mZpOmakOiXj+eahOWIl1xyXG4gICAgICAgIGNvbnN0IF9jb2xzID0gY29sdW1ucy5tYXAoY29scyA9PiB7XHJcbiAgICAgICAgICAgIGNvbHMgPSBjb2xzLmZpbHRlcihjb2wgPT4gRGF0YWdyaWRDb2x1bW5zSGVscGVyLmNvbHVtbklzVmlzaWJsZShjb2wsIERhdGFncmlkQ29sdW1uc0hlbHBlci5ncmlkSW5zdGFuY2UpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNvbHM7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpZWxkcyA9ICBEYXRhZ3JpZENvbHVtbnNIZWxwZXIuZ2V0Q29sdW1uRmllbGRzKF9jb2xzKTtcclxuICAgICAgICByZXR1cm4gZmllbGRzLmxlbmd0aCA/IGZpZWxkc1tmaWVsZHMubGVuZ3RoIC0gMV0gOiBmaWVsZHM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEZpbHRlckVudW1PcHRpb25zKGNvbHVtbjogRGF0YUNvbHVtbikge1xyXG4gICAgICAgIGxldCBlbnVtU2V0dGluZyA9IG51bGw7XHJcbiAgICAgICAgaWYgKGNvbHVtbi5maWx0ZXIudHlwZSA9PT0gQ29sdW1uRmlsdGVyVHlwZS5lbnVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGZtdCA9IGNvbHVtbi5mb3JtYXR0ZXIgYXMgYW55O1xyXG4gICAgICAgICAgICBpZiAoZm10KSB7XHJcbiAgICAgICAgICAgICAgICBlbnVtU2V0dGluZyA9IGZtdC5vcHRpb25zO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvbHVtbi5maWx0ZXIub3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1TZXR0aW5nID0gY29sdW1uLmZpbHRlci5vcHRpb25zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gZW51bVNldHRpbmc7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldEVudW1UZXh0KGVudW1PcHRzOiBhbnksIHZhbHVlMTogYW55KSB7XHJcbiAgICAgICAgaWYgKCFlbnVtT3B0cykge1xyXG4gICAgICAgICAgICByZXR1cm4gICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IHZhbHVlRmllbGQsIHRleHRGaWVsZCwgZGF0YSB9ID0gZW51bU9wdHM7XHJcbiAgICAgICAgbGV0IHN0ciA9ICcnO1xyXG4gICAgICAgIGlmICh2YWx1ZTEpIHtcclxuICAgICAgICAgICAgc3RyICs9IGAgJHt2YWx1ZTEubWFwKHYgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZW51bUl0ZW0gPSBkYXRhLmZpbmQoZCA9PiBkW3ZhbHVlRmllbGRdID09PSB2KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbnVtSXRlbVt0ZXh0RmllbGRdO1xyXG4gICAgICAgICAgICB9KS5qb2luKCcsJyl9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY29sdW1uVmlzaWJsZUFzT2JzZXJ2YWJsZShjb2w6IERhdGFDb2x1bW4pIHtcclxuICAgICAgICBpZiAodHlwZW9mIGNvbC52aXNpYmxlID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHZpc2libGVBc09ic2VydmFibGUgPSBiaW5kQ2FsbGJhY2soY29sLnZpc2libGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdmlzaWJsZUFzT2JzZXJ2YWJsZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb2YoY29sLnZpc2libGUpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRQYXJlbnRDb2x1bW5zKGNvbDogRGF0YUNvbHVtbiwgYWxsQ29scykge1xyXG4gICAgICAgIGNvbnN0IGFyciA9IFtdO1xyXG4gICAgICAgIGNvbnN0IF9nZXRQYXJlbnRzID0gKGMpID0+IHtcclxuICAgICAgICAgICAgaWYgKGMgJiYgYy5wYXJlbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50Q29sID0gYWxsQ29scy5maW5kKG4gPT4gbi5pZCA9PT0gYy5wYXJlbnRJZCk7XHJcbiAgICAgICAgICAgICAgICAvLyBhcnIuc3BsaWNlKDAsIDAsIHBhcmVudENvbCk7XHJcbiAgICAgICAgICAgICAgICBhcnIucHVzaChwYXJlbnRDb2wpO1xyXG4gICAgICAgICAgICAgICAgX2dldFBhcmVudHMocGFyZW50Q29sKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgX2dldFBhcmVudHMoY29sKTtcclxuICAgICAgICByZXR1cm4gYXJyO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBnZXRDaGlsZENvbHVtbnMoY29sOiBEYXRhQ29sdW1uLCBhbGxDb2xzKSB7XHJcbiAgICAgICAgY29uc3QgYXJyID0gW107XHJcbiAgICAgICAgY29uc3QgX2dldENoaWxkcyA9IChjKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChjICYmIGMucGFyZW50SWQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGNoaWxkcyA9IGFsbENvbHMuZmlsdGVyKG4gPT4gbi5wYXJlbnRJZCA9PT0gYy5pZCk7XHJcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKDAsIDAsIC4uLmNoaWxkcyk7XHJcbiAgICAgICAgICAgICAgICBjaGlsZHMuZm9yRWFjaChjaGlsZCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgX2dldENoaWxkcyhjaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgX2dldENoaWxkcyhjb2wpO1xyXG4gICAgICAgIHJldHVybiBhcnI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5qOA5p+l5aSa6KGo5aS05pe277yM6K6+6K6h5Zmo5Lit5bCG5YiX6K6+5Li66ZqQ6JePXHJcbiAgICBzdGF0aWMgY2hlY2tHcm91cEhlYWRlckNvbHVtblZpc2libGUoYWxsQ29scykge1xyXG4gICAgICAgIGNvbnN0IGhpZGRlbkZpZWxkcyA9IGFsbENvbHMuZmlsdGVyKG4gPT4gbi52aXNpYmxlID09PSBmYWxzZSkubWFwKG4gPT4gbi5maWVsZCk7XHJcbiAgICAgICAgaGlkZGVuRmllbGRzLmZvckVhY2goZmllbGQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBfY29sID0gYWxsQ29scy5maW5kKGNvbCA9PiBjb2wuZmllbGQgPT09IGZpZWxkIHx8IGNvbC5pZCA9PT0gZmllbGQpO1xyXG4gICAgICAgICAgICBpZiAoX2NvbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcGFyZW50cyA9IERhdGFncmlkQ29sdW1uc0hlbHBlci5nZXRQYXJlbnRDb2x1bW5zKF9jb2wsIGFsbENvbHMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHBhcmVudHMuZm9yRWFjaChwID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBfY2hpbGRzID0gYWxsQ29scy5maWx0ZXIobiA9PiBuLnBhcmVudElkID09PSBwLmlkICYmIChuLnZpc2libGUgfHwgbi52aXNpYmxlID09PSB1bmRlZmluZWQpICk7XHJcbiAgICAgICAgICAgICAgICAgICAgcC5jb2xzcGFuID0gX2NoaWxkcy5yZWR1Y2UoKCByLCBjICkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gciArIChjLmNvbHNwYW4gfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHAudmlzaWJsZSA9ICEhcC5jb2xzcGFuO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDlpJrooajlpLTkuIvku4XmnInkuIDliJfmmL7npLpcclxuICAgIHN0YXRpYyBvbmx5T25lQ29sdW1uKCkge1xyXG5cclxuICAgIH1cclxufVxyXG4iXX0=