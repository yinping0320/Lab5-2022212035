/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
var VirtualizedLoaderService = /** @class */ (function () {
    function VirtualizedLoaderService() {
    }
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getTableHeight = /**
     * @return {?}
     */
    function () {
        return this.state.height;
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getTableHeaderHeight = /**
     * @return {?}
     */
    function () {
        return this.state.headerHeight;
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getTableBodyHeight = /**
     * @return {?}
     */
    function () {
        return this.getTableHeight() - this.getTableHeaderHeight();
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getTableWidth = /**
     * @return {?}
     */
    function () {
        return this.state.width;
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getRowHeight = /**
     * @return {?}
     */
    function () {
        return this.state.rowHeight;
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.displayRowsCount = /**
     * @return {?}
     */
    function () {
        return Math.floor(this.getTableHeight() / this.getRowHeight());
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getTotal = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var total = this.state.total;
        /** @type {?} */
        var data = this.state.data || [];
        /** @type {?} */
        var pagination = this.state.pagination;
        /** @type {?} */
        var count = data.length;
        if (pagination) {
            total = count;
        }
        return total;
    };
    /**
     * @return {?}
     */
    VirtualizedLoaderService.prototype.reload = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rowHeight = this.getRowHeight();
        /** @type {?} */
        var scroTop = this.state.virtual.scrollTop;
        /** @type {?} */
        var res = this.getRows(scroTop);
        /** @type {?} */
        var total = this.getTotal();
        res.topHideHeight = scroTop;
        if (res.bottomHideHeight !== 0) {
            res.bottomHideHeight = total * rowHeight - res.virtualRows.length * rowHeight - res.topHideHeight;
        }
        return res;
    };
    /**
     * @param {?} scrollTop
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getRows = /**
     * @param {?} scrollTop
     * @return {?}
     */
    function (scrollTop) {
        var _this = this;
        var e_1, _a;
        /** @type {?} */
        var minTop = Math.abs(scrollTop);
        /** @type {?} */
        var rowHeight = this.getRowHeight();
        /** @type {?} */
        var maxTop = minTop + this.getTableHeight();
        /** @type {?} */
        var top = (!this.state.virtualizedAsyncLoad) ? 0 : this.state.virtual.rowIndex * rowHeight;
        /** @type {?} */
        var rows = [];
        /** @type {?} */
        var topHideHeight = 0;
        /** @type {?} */
        var bottomHideHeight = 0;
        /** @type {?} */
        var data = this.state.data;
        /** @type {?} */
        var total = this.getTotal();
        try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
                var n = data_1_1.value;
                top += rowHeight;
                if (top + rowHeight < minTop) {
                    topHideHeight += rowHeight;
                    continue;
                }
                else {
                    if (top > maxTop) {
                        bottomHideHeight += rowHeight;
                        continue;
                    }
                }
                rows.push(n);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (data_1_1 && !data_1_1.done && (_a = data_1.return)) _a.call(data_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (this.state.virtualizedAsyncLoad) {
            topHideHeight = this.state.virtual.rowIndex * rowHeight + topHideHeight;
            bottomHideHeight = total * rowHeight - rows.length * rowHeight - topHideHeight;
        }
        /** @type {?} */
        var startIndex = this.state.virtual.rowIndex;
        if (data && data.length && rows && rows.length) {
            /** @type {?} */
            var rid_1 = rows[0][this.state.idField];
            startIndex = this.state.virtual.rowIndex + data.findIndex((/**
             * @param {?} r
             * @return {?}
             */
            function (r) { return r[_this.state.idField] === rid_1; }));
        }
        return {
            startIndex: startIndex,
            virtualRows: rows,
            topHideHeight: topHideHeight,
            bottomHideHeight: bottomHideHeight
        };
    };
    /**
     * @param {?} scrollTop
     * @param {?} itemsCount
     * @param {?} firstRowIndex
     * @return {?}
     */
    VirtualizedLoaderService.prototype.getRowsCount = /**
     * @param {?} scrollTop
     * @param {?} itemsCount
     * @param {?} firstRowIndex
     * @return {?}
     */
    function (scrollTop, itemsCount, firstRowIndex) {
        /** @type {?} */
        var rowHeight = this.getRowHeight();
        /** @type {?} */
        var total = this.getTotal();
        /** @type {?} */
        var maxTop = scrollTop + this.getTableBodyHeight();
        /** @type {?} */
        var top = firstRowIndex * rowHeight;
        /** @type {?} */
        var rowsLength = 0;
        /** @type {?} */
        var topHideHeight = 0;
        /** @type {?} */
        var bottomHideHeight = 0;
        for (var i = 0; i < itemsCount; i++) {
            top += rowHeight;
            if (top + rowHeight < scrollTop) {
                topHideHeight += rowHeight;
                continue;
            }
            else {
                if (top > maxTop) {
                    continue;
                }
            }
            rowsLength++;
        }
        bottomHideHeight = total * rowHeight - rowsLength * rowHeight - topHideHeight;
        return { rowsLength: rowsLength, top: topHideHeight, bottom: bottomHideHeight };
    };
    return VirtualizedLoaderService;
}());
export { VirtualizedLoaderService };
if (false) {
    /** @type {?} */
    VirtualizedLoaderService.prototype.state;
}
//# sourceMappingURL=data:application/json;base64,