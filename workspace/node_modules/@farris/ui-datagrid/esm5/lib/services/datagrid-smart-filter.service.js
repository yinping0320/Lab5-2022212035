/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { ColumnFilterType } from '../types/data-column';
import { BooleanFilterControl, DateFilterControl, EnumFilterControl, NumberFilterControl, TextFilterControl } from '../plugins/smart-filter/controlData/filter-control.options';
var DatagridSmartFilterService = /** @class */ (function () {
    function DatagridSmartFilterService() {
        this.conditions = [];
        this.controlData = [];
        this.filterChanged = new Subject();
        this.removeFilter = new Subject();
        this.clearAllFilter = new Subject();
    }
    /**
     * @param {?} col
     * @return {?}
     */
    DatagridSmartFilterService.prototype.getColumnFilterData = /**
     * @param {?} col
     * @return {?}
     */
    function (col) {
        /** @type {?} */
        var filterControlData = {
            controltype: 'text',
        };
        if (col.filter !== undefined) {
            if (typeof col.filter === 'boolean') {
                if (col.formatter) {
                    if (typeof col.formatter === 'object' && Object.keys(col.formatter).length) {
                        /** @type {?} */
                        var options = col.formatter['options'];
                        switch (col.formatter['type']) {
                            case 'number':
                                return NumberFilterControl(col);
                            case 'enum':
                                return EnumFilterControl(col, options);
                            case 'boolean':
                                return BooleanFilterControl(col);
                            case 'datetime':
                                /** @type {?} */
                                var tye = 'datetime';
                                /** @type {?} */
                                var fmt = 'yyyy-MM-dd';
                                /** @type {?} */
                                var returnFmt = 'yyyy-MM-dd';
                                if (options && options.format) {
                                    fmt = options.format;
                                    if (fmt.indexOf('HH:') == -1) {
                                        tye = 'date';
                                    }
                                    else {
                                        returnFmt += ' HH:mm';
                                        if (fmt.indexOf('ss') > -1) {
                                            returnFmt += ':ss';
                                        }
                                    }
                                }
                                else {
                                    tye = 'date';
                                }
                                filterControlData = {
                                    controltype: 'flexibleDate',
                                    dateFormat: fmt,
                                    single: false,
                                    showType: 3,
                                    showTime: tye === 'datetime'
                                };
                                break;
                            default:
                                return TextFilterControl(col);
                        }
                    }
                }
                return filterControlData;
            }
            else {
                switch (col.filter.type) {
                    case ColumnFilterType.enum:
                        return EnumFilterControl(col, col.filter.options);
                    case ColumnFilterType.date:
                    case ColumnFilterType.datetime:
                        return DateFilterControl(col, col.filter.options);
                    case ColumnFilterType.number:
                        return NumberFilterControl(col);
                    case ColumnFilterType.boolean:
                        return BooleanFilterControl(col);
                }
            }
        }
        return filterControlData;
    };
    /**
     * @param {?} e
     * @return {?}
     */
    DatagridSmartFilterService.prototype.filterConditionChanged = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        var _a, _b;
        /** @type {?} */
        var items = e.conditions;
        if (!this.conditions || !this.conditions.length) {
            (_a = this.conditions).push.apply(_a, tslib_1.__spread(items));
            this.controlData.push(tslib_1.__assign({}, e.controlData));
        }
        else {
            /// TODO, CONTROLDATA 的索引与conditions 的索引很可能不是1个
            if (e.from === 'toolbar') {
                this.conditions = tslib_1.__spread(items);
            }
            else {
                this.conditions = this.conditions.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.FilterField !== items[0].FilterField; }));
                if (items.length === 1) {
                    this.conditions.push(tslib_1.__assign({}, items[0]));
                }
                else {
                    (_b = this.conditions).push.apply(_b, tslib_1.__spread(items));
                }
            }
            if (e.controlData) {
                /** @type {?} */
                var ctrlIdx = this.controlData.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.labelCode === e.controlData.labelCode; }));
                if (ctrlIdx > -1) {
                    this.controlData[ctrlIdx] = tslib_1.__assign({}, e.controlData);
                }
                else {
                    this.controlData.push(tslib_1.__assign({}, e.controlData));
                }
            }
        }
        this.filterChanged.next({ conditions: tslib_1.__spread(this.conditions), controlData: tslib_1.__spread(this.controlData) });
    };
    /**
     * @param {?} e
     * @param {?=} emitRemove
     * @return {?}
     */
    DatagridSmartFilterService.prototype.removeCondition = /**
     * @param {?} e
     * @param {?=} emitRemove
     * @return {?}
     */
    function (e, emitRemove) {
        if (emitRemove === void 0) { emitRemove = false; }
        if (this.conditions && this.conditions.length) {
            this.conditions = this.conditions.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.FilterField !== e.labelCode; }));
            this.controlData = this.controlData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.labelCode !== e.labelCode; }));
        }
        this.filterChanged.next({ conditions: tslib_1.__spread(this.conditions), controlData: tslib_1.__spread(this.controlData) });
        if (emitRemove) {
            this.removeFilter.next(e);
        }
    };
    /**
     * @return {?}
     */
    DatagridSmartFilterService.prototype.clearAll = /**
     * @return {?}
     */
    function () {
        this.conditions = [];
        this.controlData = [];
        this.clearAllFilter.next(null);
    };
    DatagridSmartFilterService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DatagridSmartFilterService.ctorParameters = function () { return []; };
    return DatagridSmartFilterService;
}());
export { DatagridSmartFilterService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DatagridSmartFilterService.prototype.conditions;
    /** @type {?} */
    DatagridSmartFilterService.prototype.controlData;
    /** @type {?} */
    DatagridSmartFilterService.prototype.filterChanged;
    /** @type {?} */
    DatagridSmartFilterService.prototype.removeFilter;
    /** @type {?} */
    DatagridSmartFilterService.prototype.clearAllFilter;
}
//# sourceMappingURL=data:application/json;base64,