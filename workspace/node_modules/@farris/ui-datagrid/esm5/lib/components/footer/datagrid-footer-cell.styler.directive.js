/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
var FooterCellStylerDirective = /** @class */ (function () {
    function FooterCellStylerDirective(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
        this.isGroupFooter = false;
    }
    /**
     * @return {?}
     */
    FooterCellStylerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    FooterCellStylerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.isGroupFooter) {
            this.setGroupFooterCellStyle(this.column);
        }
        else {
            this.buildCustomCellStyle(this.column, this.rowData);
        }
    };
    /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    FooterCellStylerDirective.prototype.buildCustomCellStyle = /**
     * @private
     * @param {?} column
     * @param {?} rowData
     * @return {?}
     */
    function (column, rowData) {
        /** @type {?} */
        var tr = this.el.nativeElement.parentNode;
        if (tr && !tr.id) {
            /** @type {?} */
            var rowdataid = this.dg.dfs.primaryId(rowData);
            /** @type {?} */
            var fixed = '';
            if (tr.closest('.f-datagrid-body-fixed-left')) {
                fixed = '-left';
            }
            else if (tr.closest('.f-datagrid-body-fixed-right')) {
                fixed = '-right';
            }
            /** @type {?} */
            var trID = 'footer-row' + fixed + '_' + (rowdataid || this.rowIndex);
            tr.id = trID;
        }
        if (!this.el.nativeElement.id) {
            this.el.nativeElement.id = 'footer-td_' + this.rowIndex + '_' + this.column.field.replace(/\./g, '_');
        }
        if (column && column.footer && column.footer.styler) {
            /** @type {?} */
            var _rd = rowData;
            /** @type {?} */
            var styler = column.footer.styler;
            /** @type {?} */
            var cs = styler(_rd[column.field], _rd);
            if (cs && Object.keys(cs).length) {
                this.dg.renderCustomStyle(cs, this.el.nativeElement);
            }
            else {
                this.dg.dgs.removeCssRule('#' + this.el.nativeElement.id);
            }
        }
    };
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    FooterCellStylerDirective.prototype.setGroupFooterCellStyle = /**
     * @private
     * @param {?} col
     * @return {?}
     */
    function (col) {
        var _this = this;
        // 分组合计行自定义样式 20210909
        if (col.groupFooter && col.groupFooter.styler) {
            /** @type {?} */
            var val = this.dg.commonUtils.getValue(col.field, this.rowData);
            /** @type {?} */
            var _customStyles_1 = this.dg.dgs.getCustomStyle(col.groupFooter.styler, [val, this.rowData]);
            if (_customStyles_1) {
                this.dg.renderCustomCls(_customStyles_1.cls, this.el.nativeElement);
                if (_customStyles_1.style) {
                    Object.keys(_customStyles_1.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this.el.nativeElement.style[n] = _customStyles_1.style[n];
                    }));
                }
            }
        }
    };
    FooterCellStylerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[footer-cell-styler]',
                },] }
    ];
    /** @nocollapse */
    FooterCellStylerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: DatagridComponent }
    ]; };
    FooterCellStylerDirective.propDecorators = {
        column: [{ type: Input }],
        rowData: [{ type: Input }],
        rowIndex: [{ type: Input }],
        isGroupFooter: [{ type: Input }]
    };
    return FooterCellStylerDirective;
}());
export { FooterCellStylerDirective };
if (false) {
    /** @type {?} */
    FooterCellStylerDirective.prototype.column;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowData;
    /** @type {?} */
    FooterCellStylerDirective.prototype.rowIndex;
    /** @type {?} */
    FooterCellStylerDirective.prototype.isGroupFooter;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    FooterCellStylerDirective.prototype.inject;
    /** @type {?} */
    FooterCellStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvdWktZGF0YWdyaWQvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9mb290ZXIvZGF0YWdyaWQtZm9vdGVyLWNlbGwuc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdEO0lBUUksbUNBQW9CLEVBQWMsRUFBVSxNQUFpQixFQUFVLE1BQWdCLEVBQVMsRUFBcUI7UUFBakcsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFENUcsa0JBQWEsR0FBRyxLQUFLLENBQUM7SUFDMEYsQ0FBQzs7OztJQUcxSCw0Q0FBUTs7O0lBQVI7SUFDQSxDQUFDOzs7O0lBRUQsbURBQWU7OztJQUFmO1FBQ0ksSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3BCLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDN0M7YUFBTTtZQUNILElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztTQUN4RDtJQUNMLENBQUM7Ozs7Ozs7SUFFTyx3REFBb0I7Ozs7OztJQUE1QixVQUE2QixNQUFNLEVBQUUsT0FBTzs7WUFFbEMsRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVU7UUFDM0MsSUFBSSxFQUFFLElBQUksQ0FBQyxFQUFFLENB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LENBQUM7O2dCQXJFSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtpQkFDbkM7Ozs7Z0JBTG1CLFVBQVU7Z0JBQUUsU0FBUztnQkFBRSxRQUFRO2dCQUMxQyxpQkFBaUI7Ozt5QkFNckIsS0FBSzswQkFDTCxLQUFLOzJCQUNMLEtBQUs7Z0NBQ0wsS0FBSzs7SUErRFYsZ0NBQUM7Q0FBQSxBQXRFRCxJQXNFQztTQW5FWSx5QkFBeUI7OztJQUNsQywyQ0FBcUI7O0lBQ3JCLDRDQUFzQjs7SUFDdEIsNkNBQXVCOztJQUN2QixrREFBK0I7Ozs7O0lBQ25CLHVDQUFzQjs7Ozs7SUFBRSwyQ0FBeUI7Ozs7O0lBQUUsMkNBQXdCOztJQUFFLHVDQUE0QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgSW5wdXQsIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4uLy4uL2RhdGFncmlkLmNvbXBvbmVudCc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2Zvb3Rlci1jZWxsLXN0eWxlcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgRm9vdGVyQ2VsbFN0eWxlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgQWZ0ZXJWaWV3SW5pdCB7XHJcbiAgICBASW5wdXQoKSBjb2x1bW46IGFueTtcclxuICAgIEBJbnB1dCgpIHJvd0RhdGE6IGFueTtcclxuICAgIEBJbnB1dCgpIHJvd0luZGV4OiBhbnk7XHJcbiAgICBASW5wdXQoKSBpc0dyb3VwRm9vdGVyID0gZmFsc2U7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IsIHB1YmxpYyBkZzogRGF0YWdyaWRDb21wb25lbnQpIHsgfVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNHcm91cEZvb3Rlcikge1xyXG4gICAgICAgICAgICB0aGlzLnNldEdyb3VwRm9vdGVyQ2VsbFN0eWxlKHRoaXMuY29sdW1uKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tQ2VsbFN0eWxlKHRoaXMuY29sdW1uLCB0aGlzLnJvd0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1aWxkQ3VzdG9tQ2VsbFN0eWxlKGNvbHVtbiwgcm93RGF0YSkge1xyXG5cclxuICAgICAgICBjb25zdCB0ciA9IHRoaXMuZWwubmF0aXZlRWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICAgIGlmICh0ciAmJiAhdHIuaWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgcm93ZGF0YWlkID0gdGhpcy5kZy5kZnMucHJpbWFyeUlkKHJvd0RhdGEpO1xyXG4gICAgICAgICAgICBsZXQgZml4ZWQgPSAnJztcclxuICAgICAgICAgICAgaWYgKHRyLmNsb3Nlc3QoJy5mLWRhdGFncmlkLWJvZHktZml4ZWQtbGVmdCcpKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhlZCA9ICctbGVmdCc7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodHIuY2xvc2VzdCgnLmYtZGF0YWdyaWQtYm9keS1maXhlZC1yaWdodCcpKSB7XHJcbiAgICAgICAgICAgICAgICBmaXhlZCA9ICctcmlnaHQnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0cklEID0gJ2Zvb3Rlci1yb3cnKyBmaXhlZCArICdfJyArIChyb3dkYXRhaWQgfHwgdGhpcy5yb3dJbmRleCk7XHJcbiAgICAgICAgICAgIHRyLmlkID0gdHJJRDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pZCA9ICdmb290ZXItdGRfJyArIHRoaXMucm93SW5kZXggKyAnXycgICsgdGhpcy5jb2x1bW4uZmllbGQucmVwbGFjZSgvXFwuL2csICdfJykgO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNvbHVtbiAmJiBjb2x1bW4uZm9vdGVyICYmIGNvbHVtbi5mb290ZXIuc3R5bGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZCA9IHJvd0RhdGE7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0eWxlciA9IGNvbHVtbi5mb290ZXIuc3R5bGVyO1xyXG4gICAgICAgICAgICBjb25zdCBjcyA9IHN0eWxlcihfcmRbY29sdW1uLmZpZWxkXSwgX3JkKTtcclxuICAgICAgICAgICAgaWYgKGNzICYmIE9iamVjdC5rZXlzKGNzKS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tU3R5bGUoY3MsIHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLmRncy5yZW1vdmVDc3NSdWxlKCcjJyArIHRoaXMuZWwubmF0aXZlRWxlbWVudC5pZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHByaXZhdGUgc2V0R3JvdXBGb290ZXJDZWxsU3R5bGUoY29sOiBhbnkpIHtcclxuICAgICAgICAvLyDliIbnu4TlkIjorqHooYzoh6rlrprkuYnmoLflvI8gMjAyMTA5MDlcclxuICAgICAgICBpZiAoY29sLmdyb3VwRm9vdGVyICYmIGNvbC5ncm91cEZvb3Rlci5zdHlsZXIpIHtcclxuICAgICAgICAgICAgY29uc3QgdmFsID0gdGhpcy5kZy5jb21tb25VdGlscy5nZXRWYWx1ZShjb2wuZmllbGQsIHRoaXMucm93RGF0YSk7XHJcbiAgICAgICAgICAgIGNvbnN0IF9jdXN0b21TdHlsZXMgPSB0aGlzLmRnLmRncy5nZXRDdXN0b21TdHlsZShjb2wuZ3JvdXBGb290ZXIuc3R5bGVyLCBbdmFsLCB0aGlzLnJvd0RhdGFdKTtcclxuICAgICAgICAgICAgaWYgKF9jdXN0b21TdHlsZXMpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGcucmVuZGVyQ3VzdG9tQ2xzKF9jdXN0b21TdHlsZXMuY2xzLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF9jdXN0b21TdHlsZXMuc3R5bGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3Qua2V5cyhfY3VzdG9tU3R5bGVzLnN0eWxlKS5mb3JFYWNoKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuc3R5bGVbbl0gPSBfY3VzdG9tU3R5bGVzLnN0eWxlW25dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==