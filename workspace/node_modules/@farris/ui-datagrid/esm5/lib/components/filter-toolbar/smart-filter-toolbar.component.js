/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Component, EventEmitter, Input, Output, ElementRef, Renderer2, Injector, ViewChild } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
import { takeUntil } from 'rxjs/operators';
var SmartFilterToolbarComponent = /** @class */ (function () {
    function SmartFilterToolbarComponent(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.padding = '';
        this.height = 40;
        this.filterData = [];
        this.clearFilters = new EventEmitter();
        this.removeFilter = new EventEmitter();
        this.filterChange = new EventEmitter();
        this.resize = new EventEmitter();
        this.sk = '';
        this.destory$ = new Subject();
    }
    /**
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.dg = this.inject.get(DatagridComponent);
        this.sk = 'smartfilter_' + this.dg.dgs.createConfigKey(this.dg.id);
        this.dg.dgs.clearFilter.pipe(takeUntil(this.destory$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.clearFilters.emit(null);
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destory$.next();
        this.destory$.complete();
    };
    /** 条件变化事件 */
    /**
     * 条件变化事件
     * @param {?} $event
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.onQuery = /**
     * 条件变化事件
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var data = $event.data, filterItem = $event.filterItem;
        if (data && data.length) {
            /** @type {?} */
            var conditions = JSON.parse(data);
            if (conditions && conditions.length) {
                this.filterChange.emit({ conditions: conditions, filterItem: filterItem });
            }
        }
    };
    /** 清除所有条件 */
    /**
     * 清除所有条件
     * @param {?} $event
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.onResetFilter = /**
     * 清除所有条件
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.clearFilters.emit($event);
    };
    /** 移除单个条件 */
    /**
     * 移除单个条件
     * @param {?} $event
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.onRemoveFilter = /**
     * 移除单个条件
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.removeFilter.emit($event);
    };
    /** 展开折叠事件 */
    /**
     * 展开折叠事件
     * @param {?} $event
     * @return {?}
     */
    SmartFilterToolbarComponent.prototype.onResize = /**
     * 展开折叠事件
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var smartFilterWrapper = _this.el.nativeElement.querySelector('.f-filter-wrapper');
            if (smartFilterWrapper) {
                /** @type {?} */
                var h = smartFilterWrapper.offsetHeight;
                if (h) {
                    _this.resize.emit(h + 6);
                }
            }
        }));
    };
    SmartFilterToolbarComponent.decorators = [
        { type: Component, args: [{
                    selector: 'smart-filter-toolbar',
                    template: "\r\n<div class=\"f-datagrid-filter-toolbar\" [style.height.px]=\"height\" \r\n[style.padding]=\"padding\" placeholder=\"\u6B64\u5904\u663E\u793A\u5217\u8FC7\u6EE4\u6761\u4EF6\" style=\"align-items: normal;\"\r\n[style.display]=\"filterData && filterData.length ? '' : 'none'\">\r\n<farris-filter [filterList]=\"filterData\" (query)=\"onQuery($event)\"  #farrisFilter\r\n    (resetChange)=\"onResetFilter($event)\" (clearFilter)=\"onRemoveFilter($event)\"\r\n    (filterResize)=\"onResize($event)\" (expandFilter)=\"onResize($event)\"\r\n    [localStorageKey]=\"sk\"\r\n>\r\n</farris-filter>\r\n\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SmartFilterToolbarComponent.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    SmartFilterToolbarComponent.propDecorators = {
        padding: [{ type: Input }],
        height: [{ type: Input }],
        filterData: [{ type: Input }],
        clearFilters: [{ type: Output }],
        removeFilter: [{ type: Output }],
        filterChange: [{ type: Output }],
        resize: [{ type: Output }],
        filtebar: [{ type: ViewChild, args: ['farrisFilter',] }]
    };
    return SmartFilterToolbarComponent;
}());
export { SmartFilterToolbarComponent };
if (false) {
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.padding;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.height;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterData;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.clearFilters;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.removeFilter;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filterChange;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.resize;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.filtebar;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.sk;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.dg;
    /** @type {?} */
    SmartFilterToolbarComponent.prototype.destory$;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    SmartFilterToolbarComponent.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic21hcnQtZmlsdGVyLXRvb2xiYXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2ZpbHRlci10b29sYmFyL3NtYXJ0LWZpbHRlci10b29sYmFyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvQixPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFVBQVUsRUFBRSxTQUFTLEVBQUUsUUFBUSxFQUE0QixTQUFTLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzFLLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUUzQztJQWtCSSxxQ0FBb0IsRUFBYyxFQUFVLE1BQWlCLEVBQVUsTUFBZ0I7UUFBbkUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBYjlFLFlBQU8sR0FBRyxFQUFFLENBQUM7UUFDYixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBQ1osZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNmLGlCQUFZLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNsQyxpQkFBWSxHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFDbEMsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBRWxDLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBR3RDLE9BQUUsR0FBRyxFQUFFLENBQUM7UUFFUixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztJQUNrRSxDQUFDOzs7O0lBRTVGLDhDQUFROzs7SUFBUjtRQUFBLGlCQVFDO1FBUEcsSUFB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OztJQUFFLDZDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgRWxlbWVudFJlZiwgUmVuZGVyZXIyLCBJbmplY3RvciwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGQsIE9wdGlvbmFsLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnc21hcnQtZmlsdGVyLXRvb2xiYXInLFxyXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NtYXJ0LWZpbHRlci10b29sYmFyLmNvbXBvbmVudC5odG1sJyxcclxufSlcclxuZXhwb3J0IGNsYXNzIFNtYXJ0RmlsdGVyVG9vbGJhckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kge1xyXG4gICAgQElucHV0KCkgcGFkZGluZyA9ICcnO1xyXG4gICAgQElucHV0KCkgaGVpZ2h0ID0gNDA7XHJcbiAgICBASW5wdXQoKSBmaWx0ZXJEYXRhID0gW107XHJcbiAgICBAT3V0cHV0KCkgY2xlYXJGaWx0ZXJzID0gbmV3IEV2ZW50RW1pdHRlcigpO1xyXG4gICAgQE91dHB1dCgpIHJlbW92ZUZpbHRlciA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBmaWx0ZXJDaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgQE91dHB1dCgpIHJlc2l6ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuXHJcbiAgICBAVmlld0NoaWxkKCdmYXJyaXNGaWx0ZXInKSBmaWx0ZWJhcjogYW55O1xyXG4gICAgc2sgPSAnJztcclxuICAgIGRnOiBEYXRhZ3JpZENvbXBvbmVudDtcclxuICAgIGRlc3RvcnkkID0gbmV3IFN1YmplY3QoKTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgaW5qZWN0OiBJbmplY3RvcikgeyB9XHJcblxyXG4gICAgbmdPbkluaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZyA9IHRoaXMuaW5qZWN0LmdldDxEYXRhZ3JpZENvbXBvbmVudD4oRGF0YWdyaWRDb21wb25lbnQpO1xyXG4gICAgICAgIHRoaXMuc2sgPSAgJ3NtYXJ0ZmlsdGVyXycgKyB0aGlzLmRnLmRncy5jcmVhdGVDb25maWdLZXkodGhpcy5kZy5pZCk7XHJcblxyXG5cclxuICAgICAgICB0aGlzLmRnLmRncy5jbGVhckZpbHRlci5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3RvcnkkKSkuc3Vic2NyaWJlKCgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5jbGVhckZpbHRlcnMuZW1pdChudWxsKTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kZXN0b3J5JC5uZXh0KCk7XHJcbiAgICAgICAgdGhpcy5kZXN0b3J5JC5jb21wbGV0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDmnaHku7blj5jljJbkuovku7YgKi9cclxuICAgIG9uUXVlcnkoJGV2ZW50KSB7XHJcbiAgICAgICAgY29uc3QgeyBkYXRhLCBmaWx0ZXJJdGVtIH0gPSAkZXZlbnQ7XHJcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgY29uZGl0aW9ucyA9IEpTT04ucGFyc2UoZGF0YSk7XHJcbiAgICAgICAgICAgIGlmIChjb25kaXRpb25zICYmIGNvbmRpdGlvbnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbHRlckNoYW5nZS5lbWl0KHtjb25kaXRpb25zLCBmaWx0ZXJJdGVtfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOa4hemZpOaJgOacieadoeS7tiAqL1xyXG4gICAgb25SZXNldEZpbHRlcigkZXZlbnQpIHtcclxuICAgICAgICB0aGlzLmNsZWFyRmlsdGVycy5lbWl0KCRldmVudCk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOenu+mZpOWNleS4quadoeS7tiAqL1xyXG4gICAgb25SZW1vdmVGaWx0ZXIoJGV2ZW50KSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVGaWx0ZXIuZW1pdCgkZXZlbnQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlsZXlvIDmipjlj6Dkuovku7YgKi9cclxuICAgIG9uUmVzaXplKCRldmVudCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBzbWFydEZpbHRlcldyYXBwZXIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQucXVlcnlTZWxlY3RvcignLmYtZmlsdGVyLXdyYXBwZXInKTtcclxuICAgICAgICAgICAgaWYgKHNtYXJ0RmlsdGVyV3JhcHBlcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaCA9IHNtYXJ0RmlsdGVyV3JhcHBlci5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVzaXplLmVtaXQoaCArIDYpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==