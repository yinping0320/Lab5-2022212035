/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
 * @Author: 疯狂秀才(Lucas Huang)
 * @Date: 2019-08-06 07:43:53
 * @LastEditors: 疯狂秀才(Lucas Huang)
 * @LastEditTime: 2019-10-31 09:11:02
 * @QQ: 1055818239
 * @Version: v0.0.1
 */
import { Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy, ChangeDetectorRef, ViewContainerRef, Injector, Inject, forwardRef, Renderer2, ComponentFactoryResolver } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { ColumnFormatService } from '@farris/ui-common/column';
import { Utils } from '../../utils/utils';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridRowDirective } from './datagrid-row.directive';
import { GridCellEditorDirective } from '../editors/cell-editor.directive';
import { DatagridService } from '../../services/datagrid.service';
import { SafePipe } from './../../utils/safe.pipe';
import { TR_PREFIX } from '../../types/constant';
var DatagridCellComponent = /** @class */ (function () {
    function DatagridCellComponent(dg, dr, el, cd, injector, colFormatSer, domSanitizer) {
        var _this = this;
        this.dg = dg;
        this.dr = dr;
        this.el = el;
        this.cd = cd;
        this.injector = injector;
        this.colFormatSer = colFormatSer;
        this.domSanitizer = domSanitizer;
        this.cls = '';
        this.lastColumn = false;
        // @ViewChild('celltip') celltip: DatagridCellTooltipDirective;
        this._isEditing = false;
        this.controlHeight = 'auto';
        this.isSelected = false;
        this._cellEditorTemplate = null;
        this.cellClick = new EventEmitter();
        this.cellDblClick = new EventEmitter();
        this.cellContext = {};
        this.cellStyler = {};
        this.safePipe = null;
        this.ro = null;
        this.canEdit = (/**
         * @return {?}
         */
        function () { return _this.dg.editable && _this.dg.editMode === 'cell' && _this.column.editor; });
        this.dfs = this.injector.get(DatagridFacadeService);
        this.dgs = this.injector.get(DatagridService);
        this.safePipe = new SafePipe(this.domSanitizer);
        this.render = this.injector.get(Renderer2);
        this.cfr = this.injector.get(ComponentFactoryResolver);
    }
    Object.defineProperty(DatagridCellComponent.prototype, "isEditing", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isEditing;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            var _this = this;
            if (this._isEditing === v) {
                return;
            }
            this._isEditing = v;
            if (v) {
                if (!this.dr.form || !Object.keys(this.dr.form.controls).length) {
                    this.dr.initFormControl();
                }
                if (this.column.editorTemplate && this.column.editorTemplate.elementRef) {
                    this.cellContext.formGroup = this.dr.form;
                    setTimeout((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.el) {
                            /** @type {?} */
                            var input = _this.el.nativeElement.querySelector('input,textarea');
                            if (input) {
                                input.focus();
                            }
                        }
                    }), 10);
                }
            }
            if (this.column.editor && this.column.editor.type === 'textarea') {
                if (!this.dg.nowrap) {
                    this.controlHeight = this.dr.el.nativeElement.offsetHeight;
                }
            }
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "cellEditorTemplate", {
        get: /**
         * @return {?}
         */
        function () {
            return this._cellEditorTemplate;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._cellEditorTemplate = v;
            if (v) {
                this.dg.dgs.cellEditorCreated.emit({ editorRef: null, column: this.column, cellEditorRef: null, templateRef: v });
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "value", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.rowData && this.column && this.column.field) {
                return Utils.getValue(this.column.field, this.rowData);
            }
            return '';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "formControl", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.cellEditor && this.cellEditor.componentRef) {
                return this.cellEditor.componentRef.instance.formControl;
            }
            else if (this.column.editorTemplate) {
                return this.dr.form.get(this.column.field);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridCellComponent.prototype, "cellFormatterIsFn", {
        get: /**
         * @return {?}
         */
        function () {
            return typeof this.column.formatter === 'function' || this.column.formatter.type === 'boolean';
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initCellTemplateContext();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.initCellTemplateContext();
            this.buildCustomCellStyle();
            if (this.formControl) {
                /** @type {?} */
                var val = Utils.getValue(this.column.field, this.rowData);
                this.formControl.setValue(val);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridCellComponent.prototype.initCellTemplateContext = /**
     * @private
     * @return {?}
     */
    function () {
        this.cellContext = {
            field: this.column.field,
            rowIndex: this.rowIndex,
            rowData: this.rowData,
            column: this.column,
            instance: this,
            formGroup: this.dr.form,
            tools: {
                utils: this.dg.commonUtils,
                format: this.dg.colFormatSer,
                number: this.dg.colFormatSer['numberhelper'],
                date: this.dg.colFormatSer['datehelper']
            },
        };
    };
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.buildCustomCellStyle();
        /** @type {?} */
        var fieldClsName = 'cell-text-align__' + this.column.field.replace(/\./g, '_');
        this.render.addClass(this.cellContainer.nativeElement, fieldClsName);
    };
    /**
     * @return {?}
     */
    DatagridCellComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.cellSubscription) {
            this.cellSubscription.unsubscribe();
            this.cellSubscription = null;
        }
        if (this.rowUpdateSubscription) {
            this.rowUpdateSubscription.unsubscribe();
            this.rowUpdateSubscription = null;
        }
        this.cellContext = null;
    };
    /**
     * @private
     * @param {?=} rowData
     * @return {?}
     */
    DatagridCellComponent.prototype.buildCustomCellStyle = /**
     * @private
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData === void 0) { rowData = null; }
        /** @type {?} */
        var td = this.el.nativeElement.parentNode;
        /** @type {?} */
        var fieldName = this.column.field.replace(/\./g, '_');
        if (!td.id) {
            td.id = TR_PREFIX + this.dr.rowId + '_' + this.rowIndex + '-' + fieldName;
        }
        // td.id = td.id.replace(/\./g, '_');
        /** @type {?} */
        var clsName = 'customcellcls_' + fieldName + '_';
        /** @type {?} */
        var removeCls = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var _cls = Array.from(td.classList).find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.indexOf('customcellcls_') > -1; }));
            if (_cls) {
                td.classList.remove(_cls);
            }
        });
        if (this.column.styler) {
            /** @type {?} */
            var _rd = rowData || this.rowData;
            /** @type {?} */
            var fieldValue = Utils.getValue(this.column.field, _rd);
            /** @type {?} */
            var cs = this.column.styler(fieldValue, _rd, this.rowIndex);
            if (cs && Object.keys(cs).length) {
                removeCls();
                // clsName = clsName.replace(/\./g, '_');
                clsName = clsName + this.dg.idService.encrypt(JSON.stringify(cs));
                this.render.addClass(td, clsName);
                this.dg.renderCustomStyle2(cs, td, clsName);
            }
        }
        else {
            removeCls();
        }
    };
    /**
     * @param {?=} val
     * @return {?}
     */
    DatagridCellComponent.prototype.updateValue = /**
     * @param {?=} val
     * @return {?}
     */
    function (val) {
        var _this = this;
        var _a;
        if (this.dr.form) {
            // this.rowData = Object.assign(this.rowData, this.dr.form.value);
            Utils.setValue(this.column.field, val, this.rowData);
            // this.rowData = {...this.rowData};
            /** @type {?} */
            var rowid_1 = this.rowData[this.dg.idField];
            /** @type {?} */
            var item = this.dg.data.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.dg.idField] === rowid_1; }));
            if (item) {
                Utils.setValue(this.column.field, val, item);
            }
            this.dfs.updateCheckedData(rowid_1, (_a = {}, _a[this.column.field] = val, _a));
            if (!this.cd['destroyed']) {
                this.cd.detectChanges();
            }
        }
    };
    DatagridCellComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-body-cell',
                    template: "\n    <div\n     [cell-tooltip]=\"column.showTips && !isEditing\"   [attr.tipMode]=\" column.tipMode || 'auto'\"\n     [attr.message]=\"column | tipmsg: rowData\"  [attr.position]=\" column?.tipOptions?.position || 'top-left'\"\n     [attr.tipWidth]=\"column?.tipOptions?.width\" [attr.tipHeight]=\"column?.tipOptions?.height\"\n     class=\"f-datagrid-cell-content\" #cellContainer  [component-template]=\"column\" [ctx]=\"cellContext\"\n    >\n        <ng-container *ngIf=\"!isEditing && !column.template && !column.componentType\">\n            <ng-container *ngIf=\"column.formatter\">\n                <span class=\"cell-text-box\" *ngIf=\"cellFormatterIsFn\" [innerHtml]=\" column | formatCellData: rowData | safe: 'html'\"></span>\n                <span class=\"cell-text-box\" *ngIf=\"!cellFormatterIsFn\">{{  column | formatCellData: rowData }}</span>\n            </ng-container>\n            <span *ngIf=\"!column.formatter\" class=\"cell-text-box\" [class.grid-cell-nowrap]=\"dg.nowrap\" [class.grid-cell-wrap]=\"!dg.nowrap\">{{  column | formatCellData: rowData }}</span>\n        </ng-container>\n\n        <ng-container #cellTemplate *ngIf=\"!isEditing && column.template && !column.componentType\" [ngTemplateOutlet]=\"column.template\" [ngTemplateOutletContext]=\"{$implicit: cellContext}\"></ng-container>\n        <ng-container #cellEditorTemplate *ngIf=\"isEditing && column.editorTemplate\" [ngTemplateOutlet]=\"column.editorTemplate\" [ngTemplateOutletContext]=\"{$implicit: cellContext}\"></ng-container>\n        <ng-container #editorTemplate *ngIf=\"isEditing && !column.editorTemplate\" cell-editor [height]=\"controlHeight\" [rowData]=\"rowData\" [value]=\"value\" [column]=\"column\" [group]=\"dr.form\"></ng-container>\n    </div>\n    ",
                    changeDetection: ChangeDetectionStrategy.Default
                }] }
    ];
    /** @nocollapse */
    DatagridCellComponent.ctorParameters = function () { return [
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] },
        { type: DatagridRowDirective, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridRowDirective; })),] }] },
        { type: ElementRef },
        { type: ChangeDetectorRef },
        { type: Injector },
        { type: ColumnFormatService },
        { type: DomSanitizer }
    ]; };
    DatagridCellComponent.propDecorators = {
        width: [{ type: Input }],
        height: [{ type: Input }],
        cls: [{ type: Input }],
        column: [{ type: Input }],
        rowData: [{ type: Input }],
        rowIndex: [{ type: Input }],
        lastColumn: [{ type: Input }],
        isEditing: [{ type: Input }],
        isSelected: [{ type: Input }],
        cellContainer: [{ type: ViewChild, args: ['cellContainer',] }],
        cellTemplateVcr: [{ type: ViewChild, args: ['cellTemplate', { read: ViewContainerRef },] }],
        cellEditorTemplate: [{ type: ViewChild, args: ['cellEditorTemplate', { read: ViewContainerRef },] }],
        cellEditor: [{ type: ViewChild, args: [GridCellEditorDirective,] }],
        cellClick: [{ type: Output }],
        cellDblClick: [{ type: Output }]
    };
    return DatagridCellComponent;
}());
export { DatagridCellComponent };
if (false) {
    /** @type {?} */
    DatagridCellComponent.prototype.width;
    /** @type {?} */
    DatagridCellComponent.prototype.height;
    /** @type {?} */
    DatagridCellComponent.prototype.cls;
    /** @type {?} */
    DatagridCellComponent.prototype.column;
    /** @type {?} */
    DatagridCellComponent.prototype.rowData;
    /** @type {?} */
    DatagridCellComponent.prototype.rowIndex;
    /** @type {?} */
    DatagridCellComponent.prototype.lastColumn;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._isEditing;
    /** @type {?} */
    DatagridCellComponent.prototype.controlHeight;
    /** @type {?} */
    DatagridCellComponent.prototype.isSelected;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContainer;
    /** @type {?} */
    DatagridCellComponent.prototype.cellTemplateVcr;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype._cellEditorTemplate;
    /** @type {?} */
    DatagridCellComponent.prototype.cellEditor;
    /** @type {?} */
    DatagridCellComponent.prototype.cellClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellDblClick;
    /** @type {?} */
    DatagridCellComponent.prototype.cellContext;
    /** @type {?} */
    DatagridCellComponent.prototype.cellStyler;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.dgs;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.cellSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.rowUpdateSubscription;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.safePipe;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.ro;
    /** @type {?} */
    DatagridCellComponent.prototype.canEdit;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.cfr;
    /** @type {?} */
    DatagridCellComponent.prototype.dg;
    /** @type {?} */
    DatagridCellComponent.prototype.dr;
    /** @type {?} */
    DatagridCellComponent.prototype.el;
    /** @type {?} */
    DatagridCellComponent.prototype.cd;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.injector;
    /** @type {?} */
    DatagridCellComponent.prototype.colFormatSer;
    /**
     * @type {?}
     * @private
     */
    DatagridCellComponent.prototype.domSanitizer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY2VsbC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYm9keS9kYXRhZ3JpZC1jZWxsLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7QUFVQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUNuRCxTQUFTLEVBQUUsVUFBVSxFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUN4RSxRQUFRLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBZ0MsU0FBUyxFQUFFLHdCQUF3QixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JJLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUd6RCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDMUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sd0NBQXdDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDM0UsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDakQ7SUFvSUksK0JBQ3dELEVBQXFCLEVBQ2xCLEVBQXdCLEVBQ3hFLEVBQWMsRUFBUyxFQUFxQixFQUFVLFFBQWtCLEVBQ3hFLFlBQWlDLEVBQ2hDLFlBQTBC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QUFDLG9CQUFvQixFQUFFLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFFOzZCQVd6RCxTQUFTLFNBQUMsdUJBQXVCOzRCQUdqQyxNQUFNOytCQUNOLE1BQU07O0lBZ0tYLDRCQUFDO0NBQUEsQUFoUUQsSUFnUUM7U0F4T1kscUJBQXFCOzs7SUFDOUIsc0NBQXVCOztJQUN2Qix1Q0FBd0I7O0lBQ3hCLG9DQUFrQjs7SUFDbEIsdUNBQTRCOztJQUM1Qix3Q0FBc0I7O0lBQ3RCLHlDQUEwQjs7SUFDMUIsMkNBQTRCOzs7OztJQUc1QiwyQ0FBMkI7O0lBQzNCLDhDQUF1Qjs7SUF1Q3ZCLDJDQUE0Qjs7SUFFNUIsOENBQXNEOztJQUN0RCxnREFBd0Y7Ozs7O0lBR3hGLG9EQUFtQzs7SUFZbkMsMkNBQStDOztJQUcvQywwQ0FBeUM7O0lBQ3pDLDZDQUE0Qzs7SUFFNUMsNENBQXVDOztJQXFCdkMsMkNBQXFCOzs7OztJQUVyQixvQ0FBbUM7Ozs7O0lBQ25DLG9DQUE2Qjs7Ozs7SUFDN0IsaURBQXVDOzs7OztJQUN2QyxzREFBNEM7Ozs7O0lBQzVDLHlDQUFrQzs7Ozs7SUFDbEMsdUNBQTBCOzs7OztJQUMxQixtQ0FBa0M7O0lBQ2xDLHdDQUFzRjs7Ozs7SUFFdEYsb0NBQXFDOztJQUdqQyxtQ0FBeUU7O0lBQ3pFLG1DQUErRTs7SUFDL0UsbUNBQXFCOztJQUFFLG1DQUE0Qjs7Ozs7SUFBRSx5Q0FBMEI7O0lBQy9FLDZDQUF3Qzs7Ozs7SUFDeEMsNkNBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUdyb3VwIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuLypcclxuICogQEF1dGhvcjog55av54uC56eA5omNKEx1Y2FzIEh1YW5nKVxyXG4gKiBARGF0ZTogMjAxOS0wOC0wNiAwNzo0Mzo1M1xyXG4gKiBATGFzdEVkaXRvcnM6IOeWr+eLguengOaJjShMdWNhcyBIdWFuZylcclxuICogQExhc3RFZGl0VGltZTogMjAxOS0xMC0zMSAwOToxMTowMlxyXG4gKiBAUVE6IDEwNTU4MTgyMzlcclxuICogQFZlcnNpb246IHYwLjAuMVxyXG4gKi9cclxuaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciwgT25DaGFuZ2VzLFxyXG4gICAgVmlld0NoaWxkLCBFbGVtZW50UmVmLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ2hhbmdlRGV0ZWN0b3JSZWYsIFZpZXdDb250YWluZXJSZWYsXHJcbiAgICBPbkRlc3Ryb3ksIEluamVjdG9yLCBJbmplY3QsIGZvcndhcmRSZWYsIEFmdGVyVmlld0luaXQsIFNpbXBsZUNoYW5nZXMsIFJlbmRlcmVyMiwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XHJcbmltcG9ydCB7IFN1YmplY3QsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBmaWx0ZXIgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IENvbHVtbkZvcm1hdFNlcnZpY2UgfSBmcm9tICdAZmFycmlzL3VpLWNvbW1vbi9jb2x1bW4nO1xyXG5pbXBvcnQgeyBDZWxsQ29udGV4dCwgQ2VsbFRlbXBsYXRlRm4sIERhdGFDb2x1bW4sIElDZWxsVGVtcGxhdGVDb21wb25lbnQgfSBmcm9tICcuLi8uLi90eXBlcy9kYXRhLWNvbHVtbic7XHJcbmltcG9ydCB7IFV0aWxzIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZEZhY2FkZVNlcnZpY2UgfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9kYXRhZ3JpZC1mYWNhZGUuc2VydmljZSc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0YWdyaWRSb3dEaXJlY3RpdmUgfSBmcm9tICcuL2RhdGFncmlkLXJvdy5kaXJlY3RpdmUnO1xyXG5pbXBvcnQgeyBDZWxsSW5mbyB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3N0YXRlJztcclxuaW1wb3J0IHsgR3JpZENlbGxFZGl0b3JEaXJlY3RpdmUgfSBmcm9tICcuLi9lZGl0b3JzL2NlbGwtZWRpdG9yLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IERhdGFncmlkU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RhdGFncmlkLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTYWZlUGlwZSB9IGZyb20gJy4vLi4vLi4vdXRpbHMvc2FmZS5waXBlJztcclxuaW1wb3J0IHsgVFJfUFJFRklYIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29uc3RhbnQnO1xyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnZ3JpZC1ib2R5LWNlbGwnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXZcclxuICAgICBbY2VsbC10b29sdGlwXT1cImNvbHVtbi5zaG93VGlwcyAmJiAhaXNFZGl0aW5nXCIgICBbYXR0ci50aXBNb2RlXT1cIiBjb2x1bW4udGlwTW9kZSB8fCAnYXV0bydcIlxyXG4gICAgIFthdHRyLm1lc3NhZ2VdPVwiY29sdW1uIHwgdGlwbXNnOiByb3dEYXRhXCIgIFthdHRyLnBvc2l0aW9uXT1cIiBjb2x1bW4/LnRpcE9wdGlvbnM/LnBvc2l0aW9uIHx8ICd0b3AtbGVmdCdcIlxyXG4gICAgIFthdHRyLnRpcFdpZHRoXT1cImNvbHVtbj8udGlwT3B0aW9ucz8ud2lkdGhcIiBbYXR0ci50aXBIZWlnaHRdPVwiY29sdW1uPy50aXBPcHRpb25zPy5oZWlnaHRcIlxyXG4gICAgIGNsYXNzPVwiZi1kYXRhZ3JpZC1jZWxsLWNvbnRlbnRcIiAjY2VsbENvbnRhaW5lciAgW2NvbXBvbmVudC10ZW1wbGF0ZV09XCJjb2x1bW5cIiBbY3R4XT1cImNlbGxDb250ZXh0XCJcclxuICAgID5cclxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWlzRWRpdGluZyAmJiAhY29sdW1uLnRlbXBsYXRlICYmICFjb2x1bW4uY29tcG9uZW50VHlwZVwiPlxyXG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29sdW1uLmZvcm1hdHRlclwiPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjZWxsLXRleHQtYm94XCIgKm5nSWY9XCJjZWxsRm9ybWF0dGVySXNGblwiIFtpbm5lckh0bWxdPVwiIGNvbHVtbiB8IGZvcm1hdENlbGxEYXRhOiByb3dEYXRhIHwgc2FmZTogJ2h0bWwnXCI+PC9zcGFuPlxyXG4gICAgICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjZWxsLXRleHQtYm94XCIgKm5nSWY9XCIhY2VsbEZvcm1hdHRlcklzRm5cIj57eyAgY29sdW1uIHwgZm9ybWF0Q2VsbERhdGE6IHJvd0RhdGEgfX08L3NwYW4+XHJcbiAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxyXG4gICAgICAgICAgICA8c3BhbiAqbmdJZj1cIiFjb2x1bW4uZm9ybWF0dGVyXCIgY2xhc3M9XCJjZWxsLXRleHQtYm94XCIgW2NsYXNzLmdyaWQtY2VsbC1ub3dyYXBdPVwiZGcubm93cmFwXCIgW2NsYXNzLmdyaWQtY2VsbC13cmFwXT1cIiFkZy5ub3dyYXBcIj57eyAgY29sdW1uIHwgZm9ybWF0Q2VsbERhdGE6IHJvd0RhdGEgfX08L3NwYW4+XHJcbiAgICAgICAgPC9uZy1jb250YWluZXI+XHJcblxyXG4gICAgICAgIDxuZy1jb250YWluZXIgI2NlbGxUZW1wbGF0ZSAqbmdJZj1cIiFpc0VkaXRpbmcgJiYgY29sdW1uLnRlbXBsYXRlICYmICFjb2x1bW4uY29tcG9uZW50VHlwZVwiIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImNvbHVtbi50ZW1wbGF0ZVwiIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBjZWxsQ29udGV4dH1cIj48L25nLWNvbnRhaW5lcj5cclxuICAgICAgICA8bmctY29udGFpbmVyICNjZWxsRWRpdG9yVGVtcGxhdGUgKm5nSWY9XCJpc0VkaXRpbmcgJiYgY29sdW1uLmVkaXRvclRlbXBsYXRlXCIgW25nVGVtcGxhdGVPdXRsZXRdPVwiY29sdW1uLmVkaXRvclRlbXBsYXRlXCIgW25nVGVtcGxhdGVPdXRsZXRDb250ZXh0XT1cInskaW1wbGljaXQ6IGNlbGxDb250ZXh0fVwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgICAgIDxuZy1jb250YWluZXIgI2VkaXRvclRlbXBsYXRlICpuZ0lmPVwiaXNFZGl0aW5nICYmICFjb2x1bW4uZWRpdG9yVGVtcGxhdGVcIiBjZWxsLWVkaXRvciBbaGVpZ2h0XT1cImNvbnRyb2xIZWlnaHRcIiBbcm93RGF0YV09XCJyb3dEYXRhXCIgW3ZhbHVlXT1cInZhbHVlXCIgW2NvbHVtbl09XCJjb2x1bW5cIiBbZ3JvdXBdPVwiZHIuZm9ybVwiPjwvbmctY29udGFpbmVyPlxyXG4gICAgPC9kaXY+XHJcbiAgICBgLFxyXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5EZWZhdWx0XHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZENlbGxDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgT25DaGFuZ2VzIHtcclxuICAgIEBJbnB1dCgpIHdpZHRoOiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBoZWlnaHQ6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGNscyA9ICcnO1xyXG4gICAgQElucHV0KCkgY29sdW1uOiBEYXRhQ29sdW1uO1xyXG4gICAgQElucHV0KCkgcm93RGF0YTogYW55O1xyXG4gICAgQElucHV0KCkgcm93SW5kZXg6IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIGxhc3RDb2x1bW4gPSBmYWxzZTtcclxuICAgIC8vIEBWaWV3Q2hpbGQoJ2NlbGx0aXAnKSBjZWxsdGlwOiBEYXRhZ3JpZENlbGxUb29sdGlwRGlyZWN0aXZlO1xyXG5cclxuICAgIHByaXZhdGUgX2lzRWRpdGluZyA9IGZhbHNlO1xyXG4gICAgY29udHJvbEhlaWdodCA9ICdhdXRvJztcclxuICAgIGdldCBpc0VkaXRpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzRWRpdGluZztcclxuICAgIH1cclxuICAgIEBJbnB1dCgpIHNldCBpc0VkaXRpbmcodikge1xyXG4gICAgICAgIGlmICh0aGlzLl9pc0VkaXRpbmcgPT09IHYpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9pc0VkaXRpbmcgPSB2O1xyXG5cclxuICAgICAgICBpZiAodikge1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZHIuZm9ybSB8fCAhT2JqZWN0LmtleXModGhpcy5kci5mb3JtLmNvbnRyb2xzKS5sZW5ndGggKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRyLmluaXRGb3JtQ29udHJvbCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5jb2x1bW4uZWRpdG9yVGVtcGxhdGUgJiYgdGhpcy5jb2x1bW4uZWRpdG9yVGVtcGxhdGUuZWxlbWVudFJlZikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jZWxsQ29udGV4dC5mb3JtR3JvdXAgPSB0aGlzLmRyLmZvcm07XHJcblxyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlucHV0ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJ2lucHV0LHRleHRhcmVhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIDEwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5jb2x1bW4uZWRpdG9yICYmIHRoaXMuY29sdW1uLmVkaXRvci50eXBlID09PSAndGV4dGFyZWEnKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5kZy5ub3dyYXApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udHJvbEhlaWdodCA9IHRoaXMuZHIuZWwubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCF0aGlzLmNkWydkZXN0cm95ZWQnXSkge1xyXG4gICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgaXNTZWxlY3RlZCA9IGZhbHNlO1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ2NlbGxDb250YWluZXInKSBjZWxsQ29udGFpbmVyOiBFbGVtZW50UmVmO1xyXG4gICAgQFZpZXdDaGlsZCgnY2VsbFRlbXBsYXRlJywge3JlYWQ6IFZpZXdDb250YWluZXJSZWYgfSkgY2VsbFRlbXBsYXRlVmNyOiBWaWV3Q29udGFpbmVyUmVmO1xyXG5cclxuXHJcbiAgICBwcml2YXRlIF9jZWxsRWRpdG9yVGVtcGxhdGUgPSBudWxsO1xyXG4gICAgQFZpZXdDaGlsZCgnY2VsbEVkaXRvclRlbXBsYXRlJywge3JlYWQ6IFZpZXdDb250YWluZXJSZWYgfSlcclxuICAgIGdldCBjZWxsRWRpdG9yVGVtcGxhdGUoKTogVmlld0NvbnRhaW5lclJlZiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NlbGxFZGl0b3JUZW1wbGF0ZTtcclxuICAgIH1cclxuICAgIHNldCBjZWxsRWRpdG9yVGVtcGxhdGUodikge1xyXG4gICAgICAgIHRoaXMuX2NlbGxFZGl0b3JUZW1wbGF0ZSA9IHY7XHJcbiAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgdGhpcy5kZy5kZ3MuY2VsbEVkaXRvckNyZWF0ZWQuZW1pdCh7IGVkaXRvclJlZjogbnVsbCwgY29sdW1uOiB0aGlzLmNvbHVtbiwgY2VsbEVkaXRvclJlZjogbnVsbCwgdGVtcGxhdGVSZWY6IHZ9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgQFZpZXdDaGlsZChHcmlkQ2VsbEVkaXRvckRpcmVjdGl2ZSkgY2VsbEVkaXRvcjtcclxuXHJcblxyXG4gICAgQE91dHB1dCgpIGNlbGxDbGljayA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcclxuICAgIEBPdXRwdXQoKSBjZWxsRGJsQ2xpY2sgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XHJcblxyXG4gICAgY2VsbENvbnRleHQ6IFBhcnRpYWw8Q2VsbENvbnRleHQ+ID0ge307XHJcbiAgICBnZXQgdmFsdWUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucm93RGF0YSAmJiB0aGlzLmNvbHVtbiAmJiB0aGlzLmNvbHVtbi5maWVsZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVXRpbHMuZ2V0VmFsdWUodGhpcy5jb2x1bW4uZmllbGQsIHRoaXMucm93RGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAnJztcclxuICAgIH1cclxuXHJcbiAgICBnZXQgZm9ybUNvbnRyb2woKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY2VsbEVkaXRvciAmJiB0aGlzLmNlbGxFZGl0b3IuY29tcG9uZW50UmVmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNlbGxFZGl0b3IuY29tcG9uZW50UmVmLmluc3RhbmNlLmZvcm1Db250cm9sO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5jb2x1bW4uZWRpdG9yVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZHIuZm9ybS5nZXQodGhpcy5jb2x1bW4uZmllbGQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuXHJcbiAgICBnZXQgY2VsbEZvcm1hdHRlcklzRm4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB0aGlzLmNvbHVtbi5mb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicgfHwgdGhpcy5jb2x1bW4uZm9ybWF0dGVyLnR5cGUgPT09ICdib29sZWFuJztcclxuICAgIH1cclxuXHJcbiAgICBjZWxsU3R5bGVyOiBhbnkgPSB7fTtcclxuXHJcbiAgICBwcml2YXRlIGRmczogRGF0YWdyaWRGYWNhZGVTZXJ2aWNlO1xyXG4gICAgcHJpdmF0ZSBkZ3M6IERhdGFncmlkU2VydmljZTtcclxuICAgIHByaXZhdGUgY2VsbFN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xyXG4gICAgcHJpdmF0ZSByb3dVcGRhdGVTdWJzY3JpcHRpb246IFN1YnNjcmlwdGlvbjtcclxuICAgIHByaXZhdGUgc2FmZVBpcGU6IFNhZmVQaXBlID0gbnVsbDtcclxuICAgIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjI7XHJcbiAgICBwcml2YXRlIHJvOiBSZXNpemVPYnNlcnZlciA9IG51bGw7XHJcbiAgICBjYW5FZGl0ID0gKCkgPT4gdGhpcy5kZy5lZGl0YWJsZSAmJiB0aGlzLmRnLmVkaXRNb2RlID09PSAnY2VsbCcgJiYgdGhpcy5jb2x1bW4uZWRpdG9yO1xyXG5cclxuICAgIHByaXZhdGUgY2ZyOkNvbXBvbmVudEZhY3RvcnlSZXNvbHZlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBASW5qZWN0KGZvcndhcmRSZWYoKCkgPT4gRGF0YWdyaWRDb21wb25lbnQpKSBwdWJsaWMgZGc6IERhdGFncmlkQ29tcG9uZW50LFxyXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBEYXRhZ3JpZFJvd0RpcmVjdGl2ZSkpIHB1YmxpYyBkcjogRGF0YWdyaWRSb3dEaXJlY3RpdmUsXHJcbiAgICAgICAgcHVibGljIGVsOiBFbGVtZW50UmVmLCBwdWJsaWMgY2Q6IENoYW5nZURldGVjdG9yUmVmLCBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcclxuICAgICAgICBwdWJsaWMgY29sRm9ybWF0U2VyOiBDb2x1bW5Gb3JtYXRTZXJ2aWNlLFxyXG4gICAgICAgIHByaXZhdGUgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXJcclxuICAgICkge1xyXG4gICAgICAgIHRoaXMuZGZzID0gdGhpcy5pbmplY3Rvci5nZXQoRGF0YWdyaWRGYWNhZGVTZXJ2aWNlKTtcclxuICAgICAgICB0aGlzLmRncyA9IHRoaXMuaW5qZWN0b3IuZ2V0KERhdGFncmlkU2VydmljZSk7XHJcbiAgICAgICAgdGhpcy5zYWZlUGlwZSA9IG5ldyBTYWZlUGlwZSh0aGlzLmRvbVNhbml0aXplcik7XHJcbiAgICAgICAgdGhpcy5yZW5kZXIgPSB0aGlzLmluamVjdG9yLmdldChSZW5kZXJlcjIpO1xyXG5cclxuICAgICAgICB0aGlzLmNmciA9IHRoaXMuaW5qZWN0b3IuZ2V0KENvbXBvbmVudEZhY3RvcnlSZXNvbHZlcik7XHJcbiAgICAgICBcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluaXRDZWxsVGVtcGxhdGVDb250ZXh0KCk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcclxuICAgICAgICBpZiAoY2hhbmdlcy5yb3dEYXRhICYmICFjaGFuZ2VzLnJvd0RhdGEuaXNGaXJzdENoYW5nZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdENlbGxUZW1wbGF0ZUNvbnRleHQoKTtcclxuICAgICAgICAgICAgdGhpcy5idWlsZEN1c3RvbUNlbGxTdHlsZSgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZm9ybUNvbnRyb2wpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHZhbCA9IFV0aWxzLmdldFZhbHVlKHRoaXMuY29sdW1uLmZpZWxkLCB0aGlzLnJvd0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3JtQ29udHJvbC5zZXRWYWx1ZSh2YWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgaW5pdENlbGxUZW1wbGF0ZUNvbnRleHQoKSB7XHJcbiAgICAgICAgdGhpcy5jZWxsQ29udGV4dCA9IHtcclxuICAgICAgICAgICAgZmllbGQ6IHRoaXMuY29sdW1uLmZpZWxkLFxyXG4gICAgICAgICAgICByb3dJbmRleDogdGhpcy5yb3dJbmRleCxcclxuICAgICAgICAgICAgcm93RGF0YTogdGhpcy5yb3dEYXRhLFxyXG4gICAgICAgICAgICBjb2x1bW46IHRoaXMuY29sdW1uLFxyXG4gICAgICAgICAgICBpbnN0YW5jZTogdGhpcyxcclxuICAgICAgICAgICAgZm9ybUdyb3VwOiB0aGlzLmRyLmZvcm0sXHJcbiAgICAgICAgICAgIHRvb2xzOiB7XHJcbiAgICAgICAgICAgICAgICB1dGlsczogdGhpcy5kZy5jb21tb25VdGlscyxcclxuICAgICAgICAgICAgICAgIGZvcm1hdDogdGhpcy5kZy5jb2xGb3JtYXRTZXIsXHJcbiAgICAgICAgICAgICAgICBudW1iZXI6IHRoaXMuZGcuY29sRm9ybWF0U2VyWydudW1iZXJoZWxwZXInXSxcclxuICAgICAgICAgICAgICAgIGRhdGU6IHRoaXMuZGcuY29sRm9ybWF0U2VyWydkYXRlaGVscGVyJ11cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmJ1aWxkQ3VzdG9tQ2VsbFN0eWxlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZpZWxkQ2xzTmFtZSA9ICdjZWxsLXRleHQtYWxpZ25fXycgKyB0aGlzLmNvbHVtbi5maWVsZC5yZXBsYWNlKC9cXC4vZywgJ18nKTtcclxuICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0aGlzLmNlbGxDb250YWluZXIubmF0aXZlRWxlbWVudCwgZmllbGRDbHNOYW1lKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICBpZiAodGhpcy5jZWxsU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2VsbFN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNlbGxTdWJzY3JpcHRpb24gPSBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucm93VXBkYXRlU3Vic2NyaXB0aW9uKSB7XHJcbiAgICAgICAgICAgIHRoaXMucm93VXBkYXRlU3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XHJcbiAgICAgICAgICAgIHRoaXMucm93VXBkYXRlU3Vic2NyaXB0aW9uID0gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG5cclxuICAgICAgICB0aGlzLmNlbGxDb250ZXh0ID0gbnVsbDtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBidWlsZEN1c3RvbUNlbGxTdHlsZShyb3dEYXRhID0gbnVsbCkge1xyXG4gICAgICAgIGNvbnN0IHRkID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50LnBhcmVudE5vZGU7XHJcbiAgICAgICAgY29uc3QgZmllbGROYW1lID0gdGhpcy5jb2x1bW4uZmllbGQucmVwbGFjZSgvXFwuL2csICAnXycpO1xyXG5cclxuICAgICAgICBpZiAoIXRkLmlkKSB7XHJcbiAgICAgICAgICAgIHRkLmlkID0gVFJfUFJFRklYICsgdGhpcy5kci5yb3dJZCArICdfJyArIHRoaXMucm93SW5kZXggKyAnLScgKyBmaWVsZE5hbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHRkLmlkID0gdGQuaWQucmVwbGFjZSgvXFwuL2csICdfJyk7XHJcbiAgICAgICAgbGV0IGNsc05hbWUgPSAnY3VzdG9tY2VsbGNsc18nICsgZmllbGROYW1lICsgJ18nO1xyXG4gICAgICAgXHJcbiAgICAgICAgY29uc3QgcmVtb3ZlQ2xzID0gKCkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBfY2xzID0gQXJyYXkuZnJvbSh0ZC5jbGFzc0xpc3QpLmZpbmQoKG46IHN0cmluZykgPT4gbi5pbmRleE9mKCdjdXN0b21jZWxsY2xzXycpID4gLTEpO1xyXG4gICAgICAgICAgICBpZiAoX2Nscykge1xyXG4gICAgICAgICAgICAgICAgdGQuY2xhc3NMaXN0LnJlbW92ZShfY2xzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5jb2x1bW4uc3R5bGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IF9yZCA9IHJvd0RhdGEgfHwgdGhpcy5yb3dEYXRhO1xyXG4gICAgICAgICAgICBjb25zdCBmaWVsZFZhbHVlID0gVXRpbHMuZ2V0VmFsdWUodGhpcy5jb2x1bW4uZmllbGQsIF9yZCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGNzID0gdGhpcy5jb2x1bW4uc3R5bGVyKGZpZWxkVmFsdWUsIF9yZCwgdGhpcy5yb3dJbmRleCk7XHJcbiAgICAgICAgICAgIGlmIChjcyAmJiBPYmplY3Qua2V5cyhjcykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZW1vdmVDbHMoKTtcclxuICAgICAgICAgICAgICAgIC8vIGNsc05hbWUgPSBjbHNOYW1lLnJlcGxhY2UoL1xcLi9nLCAnXycpO1xyXG4gICAgICAgICAgICAgICAgY2xzTmFtZSA9IGNsc05hbWUgKyB0aGlzLmRnLmlkU2VydmljZS5lbmNyeXB0KEpTT04uc3RyaW5naWZ5KGNzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbmRlci5hZGRDbGFzcyh0ZCwgY2xzTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnJlbmRlckN1c3RvbVN0eWxlMihjcywgdGQsIGNsc05hbWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmVtb3ZlQ2xzKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZVZhbHVlKHZhbD86IGFueSkge1xyXG4gICAgICAgIGlmICh0aGlzLmRyLmZvcm0pIHtcclxuICAgICAgICAgICAgLy8gdGhpcy5yb3dEYXRhID0gT2JqZWN0LmFzc2lnbih0aGlzLnJvd0RhdGEsIHRoaXMuZHIuZm9ybS52YWx1ZSk7XHJcbiAgICAgICAgICAgIFV0aWxzLnNldFZhbHVlKHRoaXMuY29sdW1uLmZpZWxkLCB2YWwsIHRoaXMucm93RGF0YSk7XHJcbiAgICAgICAgICAgIC8vIHRoaXMucm93RGF0YSA9IHsuLi50aGlzLnJvd0RhdGF9O1xyXG4gICAgICAgICAgICBjb25zdCByb3dpZCA9IHRoaXMucm93RGF0YVt0aGlzLmRnLmlkRmllbGRdO1xyXG4gICAgICAgICAgICBjb25zdCBpdGVtID0gdGhpcy5kZy5kYXRhLmZpbmQobiA9PiBuW3RoaXMuZGcuaWRGaWVsZF0gPT09IHJvd2lkKTtcclxuICAgICAgICAgICAgaWYgKGl0ZW0pIHtcclxuICAgICAgICAgICAgICAgIFV0aWxzLnNldFZhbHVlKHRoaXMuY29sdW1uLmZpZWxkLCB2YWwsIGl0ZW0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRmcy51cGRhdGVDaGVja2VkRGF0YShyb3dpZCwgeyBbdGhpcy5jb2x1bW4uZmllbGRdOiB2YWwgfSk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuY2RbJ2Rlc3Ryb3llZCddKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4iXX0=