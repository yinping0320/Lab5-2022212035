/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { filter, takeUntil } from 'rxjs/operators';
/*
* @Author: 疯狂秀才(Lucas Huang)
* @Date: 2019-08-12 07:47:12
* @LastEditors: 疯狂秀才(Lucas Huang)
* @LastEditTime: 2019-11-27 13:31:43
* @QQ: 1055818239
* @Version: v0.0.1
*/
import { Renderer2, Self, NgZone, ChangeDetectorRef, Optional, ContentChildren, QueryList } from '@angular/core';
import { Validators, FormBuilder, FormGroup } from '@angular/forms';
import { Subject } from 'rxjs';
import { Directive, Input, Output, EventEmitter, ElementRef, Injector, Inject, forwardRef } from '@angular/core';
import { DatagridFacadeService } from '../../services/datagrid-facade.service';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridCellComponent } from './datagrid-cell.component';
import { DatagridRowHoverDirective } from './datagrid-row-hover.directive';
import { Utils } from '../../utils/utils';
import { DatagridBodyComponent } from './datagrid-body.component';
import { ALLOW_EDIT_CELL_HIGHLIGHT_CLS, CUSTOM_ROW_CLS } from '../../types/constant';
var DatagridRowDirective = /** @class */ (function () {
    function DatagridRowDirective(dg, injector, fb, el, render, drHover) {
        this.dg = dg;
        this.injector = injector;
        this.fb = fb;
        this.el = el;
        this.render = render;
        this.drHover = drHover;
        this.editable = false;
        this.clickHandler = new EventEmitter();
        this.rowUpdated = new EventEmitter();
        this.form = new FormGroup({});
        this.documentRowDblclickEvent = null;
        this.columnsChangedSubscription = null;
        this.datasourceChangedSubscription = null;
        this.subscriptions = [];
        this.destroy$ = new Subject();
        this.dfs = this.injector.get(DatagridFacadeService);
        this.ngZone = this.injector.get(NgZone);
        this.cd = this.injector.get(ChangeDetectorRef);
        this.dgb = this.injector.get(DatagridBodyComponent);
    }
    Object.defineProperty(DatagridRowDirective.prototype, "rowId", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.rowData) {
                return this.dfs.primaryId(this.rowData);
            }
            return null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DatagridRowDirective.prototype, "disabled", {
        get: /**
         * @return {?}
         */
        function () {
            if (this.dg.disableRow) {
                return this.dg.disableRow(this.rowData, this.rowIndex);
            }
            return false;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.datasourceChangedSubscription = this.dg.dgs.onDataSourceChange.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.renderCustomStyle();
        }));
        this.columnsChangedSubscription = this.dg.dgs.columnsChanged.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.createControl();
        }));
        /** @type {?} */
        var s$ = this.dg.dfs.rowUpdate$.pipe(takeUntil(this.destroy$), filter((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            return row.keyID === _this.rowId;
        }))).subscribe((/**
         * @param {?} row
         * @return {?}
         */
        function (row) {
            if (row && row.data) {
                // this.rowData = cloneDeep(row.data);
                if (_this.dfs.primaryId(row.data) === _this.rowId) {
                    _this.renderCustomStyle(row.data);
                }
                // 此处会导至rowData 与数据源的引用不一致
                // this.rowData = {...row.data};
                // 更新当前数据
                Object.assign(_this.rowData, row.data);
                _this.updateCellEmptyStyle();
                _this.rowUpdated.emit(_this.rowData);
                _this.cd.detectChanges();
            }
        }));
        this.subscriptions.push(s$);
        /** @type {?} */
        var s1$ = this.dg.dgs.updateEmptyStyle$.pipe(takeUntil(this.destroy$)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.updateCellEmptyStyle();
        }));
        this.subscriptions.push(s1$);
        /** @type {?} */
        var s2$ = this.dg.dfs.selectRow$.pipe(takeUntil(this.destroy$)).pipe(filter((/**
         * @param {?} r
         * @return {?}
         */
        function (r) {
            return r.id === _this.rowId;
        }))).subscribe((/**
         * @return {?}
         */
        function () {
            if (_this.dg.selectedRow && !_this.dg.selectedRow.dr) {
                /** @type {?} */
                var p = _this.getRowPosition();
                if (p === 'left') {
                    _this.dg.selectedRow.drl = _this;
                }
                else if (p === 'right') {
                    _this.dg.selectedRow.drr = _this;
                }
                else {
                    _this.dg.selectedRow.dr = _this;
                }
            }
        }));
        this.subscriptions.push(s2$);
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroy$.next();
        this.destroy$.complete();
        if (this.columnsChangedSubscription) {
            this.columnsChangedSubscription.unsubscribe();
            this.columnsChangedSubscription = null;
        }
        if (this.datasourceChangedSubscription) {
            this.datasourceChangedSubscription.unsubscribe();
            this.datasourceChangedSubscription = null;
        }
        if (this.subscriptions && this.subscriptions.length) {
            this.subscriptions.forEach((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.unsubscribe(); }));
            this.subscriptions = [];
        }
        if (this.form) {
            this.form = null;
        }
        this.cells = null;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    DatagridRowDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.rowData && !changes.rowData.isFirstChange()) {
            this.updateCellEmptyStyle();
        }
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.renderCustomStyle();
        this.updateCellEmptyStyle();
    };
    /**
     * @private
     * @return {?}
     */
    DatagridRowDirective.prototype.getRowPosition = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = this.el.nativeElement.id;
        if (id.indexOf('fixedleft') > -1) {
            return 'left';
        }
        else if (id.indexOf('fixedright') > -1) {
            return 'right';
        }
        else {
            return 'center';
        }
    };
    /**
     * @param {?=} rowData
     * @return {?}
     */
    DatagridRowDirective.prototype.renderCustomStyle = /**
     * @param {?=} rowData
     * @return {?}
     */
    function (rowData) {
        if (rowData === void 0) { rowData = null; }
        if (this.dg.rowStyler) {
            /** @type {?} */
            var _rd = rowData || this.rowData;
            /** @type {?} */
            var trStyle = this.dg.rowStyler(_rd, this.rowIndex);
            /** @type {?} */
            var tr = this.el.nativeElement;
            /** @type {?} */
            var _cls = Array.from(tr.classList).find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.indexOf(CUSTOM_ROW_CLS) > -1; }));
            if (_cls) {
                tr.classList.remove(_cls);
            }
            if (trStyle && Object.keys(trStyle).length) {
                /** @type {?} */
                var str = CUSTOM_ROW_CLS + this.dg.idService.encrypt(JSON.stringify(trStyle));
                this.dg.renderCustomStyle2(trStyle, this.el.nativeElement, 'f-datagrid-body .' + str);
                this.render.addClass(this.el.nativeElement, str);
            }
        }
    };
    // @HostListener('click', ['$event'])
    // @HostListener('click', ['$event'])
    /**
     * @param {?} event
     * @return {?}
     */
    DatagridRowDirective.prototype.onRowClick = 
    // @HostListener('click', ['$event'])
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /*
                if (event.target['className'] && event.target['className'].indexOf('checkbox-column') > -1) {
                    return;
                }
        
                if (!this.dg.enableSelectRow) {
                    return;
                }
        
                if (this.dg.disabled) {
                    return;
                }
        
                if (this.dg.currentCell && this.dg.currentCell.isEditing && this.rowId !== this.dg.currentCell.rowId ) {
                    return;
                }
        
        
                if (this.dg.disableRow) {
                    if (this.dg.disableRow(this.rowData, this.rowIndex)) {
                        event.stopPropagation();
                        return false;
                    }
                }
        
                // if (!this.dg.editable) {
                //     event.stopPropagation();
                // }
        
                const rowId = this.dfs.primaryId(this.rowData);
        
                if (!rowId) {
                    this.dg.writeConsole(`在第 ${this.rowIndex + 1} 行，主键字段[${this.dg.idField}]的值为 空，请检查相关数据。`);
                }
        
                const beforEventParam = {
                    rowIndex: this.rowIndex,
                    rowData: this.rowData,
                    gridInstance: this.dg
                };
        
                if (!event.shiftKey) {
                    this.dg.dgs.focusRowChanged.emit({
                        rowIndex: this.rowIndex,
                        rowData: this.rowData
                    });
                }
                const useNewSelectionMode = this.dg.sms.beforRowClick({ ...beforEventParam, e: event, id: rowId, dr: this });
                if (useNewSelectionMode) {
                    return;
                }
        
                if (!this.dfs.isRowSelected(rowId)) {
                    const canendedit = this.dg.endRowEdit();
        
                    if (!canendedit || canendedit.canEnd) {
                        this.dg.beforeSelect(beforEventParam).pipe( takeUntil(this.destroy$)).pipe(
                            delay(200)
                        ).subscribe((canSelect: boolean) => {
                            if (canSelect) {
                                this.dg.removeCellSelectedCls();
                                this.dfs.selectRow(this.rowIndex, this.rowData, {instance: this.dg});
                                if (this.dg.selectedRow) {
                                    this.dg.selectedRow.dr = this;
                                }
                                const trCLS = this.el.nativeElement.className;
                                if (trCLS.indexOf('f-datagrid-row-selected') === -1) {
                                    this.el.nativeElement.className = trCLS + ' f-datagrid-row-selected';
                                }
                                // this.drHover.setRowHoverCls(false);
                                // this.dg.selectChanged.emit(this.dg.selectedRow);
                                this.clickHandler.emit();
                            }
                            this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                            this.dg.dgs.setSelecedRow.emit({ selected: true, id: this.dfs.primaryId(this.rowData) });
                        });
                    }
                } else {
                    if (this.dg.selectedRow && !this.dg.selectedRow.dr) {
                        this.dg.selectedRow.dr = this;
                    }
        
                    if (!this.dg.keepSelect) {
                        this.dg.beforeUnselect(beforEventParam).pipe(
                            takeUntil(this.destroy$),
                        ).subscribe((canUnselect: boolean) => {
                            if (canUnselect) {
                                // this.dg.unSelect.emit(this.dg.selectedRow);
                                this.dfs.unSelectRow(this.rowIndex, this.rowData, {instance: this.dg});
        
                                const trCLS = this.el.nativeElement.className;
                                if (trCLS.indexOf('f-datagrid-row-selected') > -1) {
                                    this.el.nativeElement.className = trCLS.replace('f-datagrid-row-selected', '');
                                }
                            }
                            this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                            this.dg.dgs.setSelecedRow.emit();
                        });
                    } else {
                        this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
                    }
                }
                    */
        // this.dg.rowClick.emit({ data: this.rowData, grid: this.dg, dblclick: false });
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.initFormControl = /**
     * @return {?}
     */
    function () {
        this.form = this.fb.group({});
        this.createControl();
        this.form['bindingData'] = this.rowData;
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.createControl = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.dg && this.dg.flatColumns) {
            this.dg.flatColumns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) {
                if (!col.editor && !col.editorTemplate) {
                    return;
                }
                if (!_this.form.controls[col.field]) {
                    /** @type {?} */
                    var control = _this.createFormControl(col);
                    _this.form.addControl(col.field, control);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} col
     * @return {?}
     */
    DatagridRowDirective.prototype.createFormControl = /**
     * @private
     * @param {?} col
     * @return {?}
     */
    function (col) {
        return this.fb.control(Utils.getValue(col.field, this.rowData), {
            validators: col.editor ? this.bindValidations(col.editor.validators) : null
        });
    };
    /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    DatagridRowDirective.prototype.bindValidations = /**
     * @private
     * @param {?} validators
     * @return {?}
     */
    function (validators) {
        var _this = this;
        /** @type {?} */
        var validations = [];
        if (validators && validators.length) {
            validators.forEach((/**
             * @param {?} v
             * @return {?}
             */
            function (v) {
                /** @type {?} */
                var validation = null;
                switch (v.type) {
                    case 'required':
                        validation = Validators.required;
                        break;
                    case 'min':
                        validation = Validators.min(v.value);
                        break;
                    case 'max':
                        validation = Validators.max(v.value);
                        break;
                    case 'minLength':
                        validation = Validators.minLength(v.value);
                        break;
                    case 'maxLength':
                        validation = Validators.maxLength(v.value);
                        break;
                    case 'email':
                        validation = Validators.email;
                        break;
                    case 'requiredTrue':
                        validation = Validators.requiredTrue;
                        break;
                    case 'pattern':
                        validation = Validators.pattern(v.value);
                        break;
                }
                if (validation) {
                    validations.push(validation);
                }
                else {
                    if (_this.dg.validators && _this.dg.validators.length) {
                        /** @type {?} */
                        var vfn = _this.dg.validators.find((/**
                         * @param {?} vr
                         * @return {?}
                         */
                        function (vr) { return vr.name === v.type; }));
                        if (vfn) {
                            validation = vfn.value(_this.rowData);
                            validations.push(validation);
                        }
                    }
                }
            }));
        }
        return validations;
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.refresh = /**
     * @return {?}
     */
    function () {
        this.updateRowHeight();
        this.updateCellEmptyStyle();
    };
    /**
     * @return {?}
     */
    DatagridRowDirective.prototype.updateRowHeight = /**
     * @return {?}
     */
    function () {
        if (!this.dg.nowrap) {
            /** @type {?} */
            var centerTr = this.dgb.mainArea.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
            centerTr.style.height = 'auto';
            /** @type {?} */
            var trHeight = centerTr.offsetHeight;
            /** @type {?} */
            var leftTrDom = null;
            /** @type {?} */
            var rightTrDom = null;
            /** @type {?} */
            var heightSizeList = [trHeight];
            if (this.dgb) {
                if (this.dgb.fixedLeftEl) {
                    leftTrDom = this.dgb.fixedLeftEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
                    if (leftTrDom) {
                        leftTrDom.style.height = 'auto';
                        heightSizeList.push(leftTrDom.offsetHeight);
                    }
                }
                if (this.dgb.fixedRightEl) {
                    rightTrDom = this.dgb.fixedRightEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
                    if (rightTrDom) {
                        rightTrDom.style.height = 'auto';
                        heightSizeList.push(rightTrDom.offsetHeight);
                    }
                }
                /** @type {?} */
                var maxHeight = Math.max.apply(Math, tslib_1.__spread(heightSizeList));
                centerTr.style.height = maxHeight + "px";
                if (leftTrDom) {
                    leftTrDom.style.height = maxHeight + "px";
                }
                if (rightTrDom) {
                    rightTrDom.style.height = maxHeight + "px";
                }
                this.cd.markForCheck();
                this.dgb.updateCanvasHeight();
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    DatagridRowDirective.prototype.updateCellEmptyStyle = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.dg.enableEditCellStyle) {
            return;
        }
        /** @type {?} */
        var rowIsDisabled = false;
        if (this.dg.disableRow) {
            rowIsDisabled = this.dg.disableRow(this.rowData, this.rowIndex);
        }
        /** @type {?} */
        var updateCellEmptyText = (/**
         * @param {?} cells
         * @return {?}
         */
        function (cells) {
            if (cells.length) {
                for (var k = 0; k < cells.length; k++) {
                    /** @type {?} */
                    var field = cells[k].getAttribute('field');
                    if (field) {
                        /** @type {?} */
                        var col = _this.dfs.getColumn(field);
                        if (col) {
                            if (!col.editor) {
                                continue;
                            }
                            /** @type {?} */
                            var cls = col.align === 'right' ? 'allow-edit-cell-left' : 'allow-edit-cell';
                            /** @type {?} */
                            var emptyicon_cls = ALLOW_EDIT_CELL_HIGHLIGHT_CLS[col.editor.type];
                            /** @type {?} */
                            var span = cells[k].querySelector('.cell-text-box');
                            /** @type {?} */
                            var colVal = Utils.getValue(field, _this.rowData);
                            /** @type {?} */
                            var fmtVal = _this.dg.colFormatSer.format(colVal, _this.rowData, col.formatter);
                            if (!_this.dg.editable || rowIsDisabled || _this.dg.cellIsReadOnly(col, _this.rowData)) {
                                cells[k].className = cells[k].className.replace(cls, '');
                                cells[k].className = cells[k].className.replace(emptyicon_cls, '');
                                if (span) {
                                    if (span.className.indexOf('cell-empty') > -1) {
                                        span.className = span.className.replace('cell-empty', '');
                                    }
                                    if (colVal === '' || colVal === null || colVal === undefined) {
                                        span.innerHTML = '';
                                    }
                                    else {
                                        span.innerHTML = fmtVal;
                                    }
                                }
                            }
                            else {
                                if (span) {
                                    if (colVal === '' || colVal === null || colVal === undefined) {
                                        if (span.className.indexOf('cell-empty') === -1) {
                                            span.className = span.className + ' cell-empty';
                                        }
                                        span.innerHTML = Utils.getWhenEmptyText(col, _this.dg.localeService.localeId);
                                    }
                                    else {
                                        span.innerHTML = fmtVal;
                                    }
                                }
                                if (cells[k].className.indexOf('cell-readonly') > -1) {
                                    cells[k].className = cells[k].className.replace('cell-readonly', '');
                                }
                                if (cells[k].className.indexOf(cls) === -1) {
                                    _this.render.addClass(cells[k], cls);
                                }
                                if (cells[k].className.indexOf(emptyicon_cls) === -1) {
                                    _this.render.addClass(cells[k], emptyicon_cls);
                                }
                            }
                        }
                    }
                }
            }
        });
        // if (this.dgb.fixedLeftEl) {
        //     const leftTrDom = this.dgb.fixedLeftEl.nativeElement.querySelector('tr[index="' + this.rowIndex + '"]');
        //     if (leftTrDom) {
        //         updateCellEmptyText(leftTrDom.querySelectorAll('td[field]'));
        //     }
        // }
        /** @type {?} */
        var cells = this.el.nativeElement.querySelectorAll('td[field]:not([field="_datagrid-setting-control_"])');
        updateCellEmptyText(cells);
    };
    DatagridRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[grid-row]',
                    exportAs: 'gridRow'
                },] }
    ];
    /** @nocollapse */
    DatagridRowDirective.ctorParameters = function () { return [
        { type: DatagridComponent, decorators: [{ type: Inject, args: [forwardRef((/**
                         * @return {?}
                         */
                        function () { return DatagridComponent; })),] }] },
        { type: Injector },
        { type: FormBuilder },
        { type: ElementRef },
        { type: Renderer2 },
        { type: DatagridRowHoverDirective, decorators: [{ type: Optional }, { type: Self }] }
    ]; };
    DatagridRowDirective.propDecorators = {
        editable: [{ type: Input }],
        rowData: [{ type: Input, args: ['grid-row',] }],
        rowIndex: [{ type: Input }],
        clickHandler: [{ type: Output }],
        rowUpdated: [{ type: Output }],
        cells: [{ type: ContentChildren, args: [forwardRef((/**
                     * @return {?}
                     */
                    function () { return DatagridCellComponent; })), { descendants: true },] }]
    };
    return DatagridRowDirective;
}());
export { DatagridRowDirective };
if (false) {
    /** @type {?} */
    DatagridRowDirective.prototype.editable;
    /** @type {?} */
    DatagridRowDirective.prototype.rowData;
    /** @type {?} */
    DatagridRowDirective.prototype.rowIndex;
    /** @type {?} */
    DatagridRowDirective.prototype.clickHandler;
    /** @type {?} */
    DatagridRowDirective.prototype.rowUpdated;
    /** @type {?} */
    DatagridRowDirective.prototype.cells;
    /** @type {?} */
    DatagridRowDirective.prototype.form;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.dfs;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.documentRowDblclickEvent;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.dgb;
    /** @type {?} */
    DatagridRowDirective.prototype.cd;
    /** @type {?} */
    DatagridRowDirective.prototype.columnsChangedSubscription;
    /** @type {?} */
    DatagridRowDirective.prototype.datasourceChangedSubscription;
    /** @type {?} */
    DatagridRowDirective.prototype.subscriptions;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.destroy$;
    /** @type {?} */
    DatagridRowDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.fb;
    /** @type {?} */
    DatagridRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridRowDirective.prototype.render;
    /** @type {?} */
    DatagridRowDirective.prototype.drHover;
}
//# sourceMappingURL=data:application/json;base64,