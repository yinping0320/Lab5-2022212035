/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
var GroupFooterRowStylerDirective = /** @class */ (function () {
    function GroupFooterRowStylerDirective(el, render, inject, dg) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    GroupFooterRowStylerDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    GroupFooterRowStylerDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.buildCustomGroupFooterRowStyle(this.rowData);
    };
    /**
     * @private
     * @param {?} rowData
     * @return {?}
     */
    GroupFooterRowStylerDirective.prototype.buildCustomGroupFooterRowStyle = /**
     * @private
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        var _this = this;
        if (this.dg.groupFooterStyler) {
            /** @type {?} */
            var cs_1 = this.dg.dgs.getCustomStyle(this.dg.groupFooterStyler, [rowData]);
            if (cs_1) {
                this.dg.renderCustomCls(cs_1.cls, this.el.nativeElement);
                if (cs_1.style) {
                    Object.keys(cs_1.style).forEach((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        _this.el.nativeElement.style[n] = cs_1.style[n];
                    }));
                }
            }
        }
    };
    GroupFooterRowStylerDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[group-footer-row-styler]',
                },] }
    ];
    /** @nocollapse */
    GroupFooterRowStylerDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector },
        { type: DatagridComponent }
    ]; };
    GroupFooterRowStylerDirective.propDecorators = {
        column: [{ type: Input }],
        rowData: [{ type: Input, args: ['group-footer-row-styler',] }],
        rowIndex: [{ type: Input }]
    };
    return GroupFooterRowStylerDirective;
}());
export { GroupFooterRowStylerDirective };
if (false) {
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.column;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.rowData;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.rowIndex;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    GroupFooterRowStylerDirective.prototype.inject;
    /** @type {?} */
    GroupFooterRowStylerDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZ3JvdXAtZm9vdGVyLXN0eWxlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWRhdGFncmlkLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvYm9keS9kYXRhZ3JpZC1ncm91cC1mb290ZXItc3R5bGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQXlCLE1BQU0sZUFBZSxDQUFDO0FBQ3pHLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBRTdEO0lBUUksdUNBQW9CLEVBQWMsRUFBVSxNQUFpQixFQUFVLE1BQWdCLEVBQVMsRUFBcUI7UUFBakcsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFVO1FBQVMsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7SUFBSSxDQUFDOzs7O0lBRzFILGdEQUFROzs7SUFBUjtJQUNBLENBQUM7Ozs7SUFFRCx1REFBZTs7O0lBQWY7UUFDSSxJQUFJLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7OztJQUVPLHNFQUE4Qjs7Ozs7SUFBdEMsVUFBdUMsT0FBTztRQUE5QyxpQkFjQztRQVpHLElBQUksSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRTs7Z0JBRXJCLElBQUUsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzNFLElBQUksSUFBRSxFQUFFO2dCQUNKLElBQUksQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLElBQUUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxJQUFFLENBQUMsS0FBSyxFQUFFO29CQUNWLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU87Ozs7b0JBQUMsVUFBQSxDQUFDO3dCQUMzQixLQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDakQsQ0FBQyxFQUFDLENBQUM7aUJBQ047YUFDSjtTQUNKO0lBQ0wsQ0FBQzs7Z0JBaENKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsMkJBQTJCO2lCQUN4Qzs7OztnQkFMbUIsVUFBVTtnQkFBRSxTQUFTO2dCQUFFLFFBQVE7Z0JBQzFDLGlCQUFpQjs7O3lCQU1yQixLQUFLOzBCQUNMLEtBQUssU0FBQyx5QkFBeUI7MkJBQy9CLEtBQUs7O0lBMkJWLG9DQUFDO0NBQUEsQUFqQ0QsSUFpQ0M7U0E5QlksNkJBQTZCOzs7SUFDdEMsK0NBQXFCOztJQUNyQixnREFBK0M7O0lBQy9DLGlEQUF1Qjs7Ozs7SUFFWCwyQ0FBc0I7Ozs7O0lBQUUsK0NBQXlCOzs7OztJQUFFLCtDQUF3Qjs7SUFBRSwyQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIFJlbmRlcmVyMiwgSW5qZWN0b3IsIElucHV0LCBPbkluaXQsIEFmdGVyVmlld0luaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgRGF0YWdyaWRDb21wb25lbnQgfSBmcm9tICcuLi8uLi9kYXRhZ3JpZC5jb21wb25lbnQnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tncm91cC1mb290ZXItcm93LXN0eWxlcl0nLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgR3JvdXBGb290ZXJSb3dTdHlsZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG4gICAgQElucHV0KCkgY29sdW1uOiBhbnk7XHJcbiAgICBASW5wdXQoJ2dyb3VwLWZvb3Rlci1yb3ctc3R5bGVyJykgcm93RGF0YTogYW55O1xyXG4gICAgQElucHV0KCkgcm93SW5kZXg6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsOiBFbGVtZW50UmVmLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLCBwcml2YXRlIGluamVjdDogSW5qZWN0b3IsIHB1YmxpYyBkZzogRGF0YWdyaWRDb21wb25lbnQpIHsgfVxyXG5cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICAgICAgdGhpcy5idWlsZEN1c3RvbUdyb3VwRm9vdGVyUm93U3R5bGUodGhpcy5yb3dEYXRhKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGJ1aWxkQ3VzdG9tR3JvdXBGb290ZXJSb3dTdHlsZShyb3dEYXRhKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmRnLmdyb3VwRm9vdGVyU3R5bGVyKSB7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBjcyA9IHRoaXMuZGcuZGdzLmdldEN1c3RvbVN0eWxlKHRoaXMuZGcuZ3JvdXBGb290ZXJTdHlsZXIsIFtyb3dEYXRhXSk7XHJcbiAgICAgICAgICAgIGlmIChjcykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZy5yZW5kZXJDdXN0b21DbHMoY3MuY2xzLCB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNzLnN0eWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXMoY3Muc3R5bGUpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5zdHlsZVtuXSA9IGNzLnN0eWxlW25dO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==