/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injector, Renderer2, ElementRef } from '@angular/core';
import { CUSTOM_GROUP_ROW_CLS } from '../../types/constant';
import { DatagridComponent } from './../../datagrid.component';
var DatagridGroupRowDirective = /** @class */ (function () {
    function DatagridGroupRowDirective(injector, render, el, dg) {
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.dg = dg;
    }
    /**
     * @return {?}
     */
    DatagridGroupRowDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        setTimeout((/**
         * @return {?}
         */
        function () {
            if (_this.dg && _this.dg.groupStyler) {
                /** @type {?} */
                var tr = _this.el.nativeElement;
                /** @type {?} */
                var _cls = Array.from(tr.classList).find((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.indexOf(CUSTOM_GROUP_ROW_CLS) > -1; }));
                if (_cls) {
                    tr.classList.remove(_cls);
                }
                /** @type {?} */
                var styler = _this.dg.groupStyler(_this.groupRow);
                if (!styler) {
                    return;
                }
                if (!tr.id) {
                    tr.id = 'group-tr_' + _this.groupRow.id;
                }
                /** @type {?} */
                var str = CUSTOM_GROUP_ROW_CLS + _this.dg.idService.encrypt(JSON.stringify(styler));
                _this.render.addClass(tr, str);
                _this.dg.renderCustomStyle2(styler, tr, str);
                // this.dg.renderCustomStyle(styler, tr);
            }
        }));
    };
    DatagridGroupRowDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[group-row]',
                },] }
    ];
    /** @nocollapse */
    DatagridGroupRowDirective.ctorParameters = function () { return [
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatagridComponent }
    ]; };
    DatagridGroupRowDirective.propDecorators = {
        groupRow: [{ type: Input, args: ['group-row',] }]
    };
    return DatagridGroupRowDirective;
}());
export { DatagridGroupRowDirective };
if (false) {
    /** @type {?} */
    DatagridGroupRowDirective.prototype.groupRow;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DatagridGroupRowDirective.prototype.dg;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2JvZHkvZGF0YWdyaWQtZ3JvdXByb3cuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUMxRixPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUvRDtJQU1JLG1DQUFvQixRQUFrQixFQUFVLE1BQWlCLEVBQVUsRUFBYyxFQUFVLEVBQXFCO1FBQXBHLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFXO1FBQVUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLE9BQUUsR0FBRixFQUFFLENBQW1CO0lBRXhILENBQUM7Ozs7SUFFRCw0Q0FBUTs7O0lBQVI7UUFBQSxpQkEyQkM7UUExQkcsVUFBVTs7O1FBQUM7WUFDUCxJQUFJLEtBQUksQ0FBQyxFQUFFLElBQUksS0FBSSxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUU7O29CQUUxQixFQUFFLEdBQUcsS0FBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhOztvQkFDMUIsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQyxDQUFTLElBQUssT0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLG9CQUFvQixDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXBDLENBQW9DLEVBQUM7Z0JBQy9GLElBQUksSUFBSSxFQUFFO29CQUNOLEVBQUUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUM3Qjs7b0JBRUssTUFBTSxHQUFHLEtBQUksQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLEtBQUksQ0FBQyxRQUFRLENBQUM7Z0JBRWpELElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1QsT0FBTztpQkFDVjtnQkFFRCxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtvQkFDUixFQUFFLENBQUMsRUFBRSxHQUFHLFdBQVcsR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQztpQkFDMUM7O29CQUVLLEdBQUcsR0FBRyxvQkFBb0IsR0FBRyxLQUFJLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFcEYsS0FBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEdBQUcsQ0FBQyxDQUFDO2dCQUM5QixLQUFJLENBQUMsRUFBRSxDQUFDLGtCQUFrQixDQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUUsR0FBRyxDQUFDLENBQUM7Z0JBQzVDLHlDQUF5QzthQUM1QztRQUNMLENBQUMsRUFBQyxDQUFDO0lBQ1AsQ0FBQzs7Z0JBckNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtpQkFDMUI7Ozs7Z0JBTjBCLFFBQVE7Z0JBQUUsU0FBUztnQkFBRSxVQUFVO2dCQUVqRCxpQkFBaUI7OzsyQkFNckIsS0FBSyxTQUFDLFdBQVc7O0lBa0N0QixnQ0FBQztDQUFBLEFBdENELElBc0NDO1NBbkNZLHlCQUF5Qjs7O0lBQ2xDLDZDQUE2Qjs7Ozs7SUFFakIsNkNBQTBCOzs7OztJQUFFLDJDQUF5Qjs7Ozs7SUFBRSx1Q0FBc0I7Ozs7O0lBQUUsdUNBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCwgSW5qZWN0b3IsIFJlbmRlcmVyMiwgRWxlbWVudFJlZiwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENVU1RPTV9HUk9VUF9ST1dfQ0xTIH0gZnJvbSAnLi4vLi4vdHlwZXMvY29uc3RhbnQnO1xyXG5pbXBvcnQgeyBEYXRhZ3JpZENvbXBvbmVudCB9IGZyb20gJy4vLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZ3JvdXAtcm93XScsXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEYXRhZ3JpZEdyb3VwUm93RGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIEBJbnB1dCgnZ3JvdXAtcm93JykgZ3JvdXBSb3c7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsIHByaXZhdGUgcmVuZGVyOiBSZW5kZXJlcjIsIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgZGc6IERhdGFncmlkQ29tcG9uZW50KSB7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZyAmJiB0aGlzLmRnLmdyb3VwU3R5bGVyKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdHIgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfY2xzID0gQXJyYXkuZnJvbSh0ci5jbGFzc0xpc3QpLmZpbmQoKG46IHN0cmluZykgPT4gbi5pbmRleE9mKENVU1RPTV9HUk9VUF9ST1dfQ0xTKSA+IC0xKTtcclxuICAgICAgICAgICAgICAgIGlmIChfY2xzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHIuY2xhc3NMaXN0LnJlbW92ZShfY2xzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHlsZXIgPSB0aGlzLmRnLmdyb3VwU3R5bGVyKHRoaXMuZ3JvdXBSb3cpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICghc3R5bGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmICghdHIuaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ci5pZCA9ICdncm91cC10cl8nICsgdGhpcy5ncm91cFJvdy5pZDtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdHIgPSBDVVNUT01fR1JPVVBfUk9XX0NMUyArIHRoaXMuZGcuaWRTZXJ2aWNlLmVuY3J5cHQoSlNPTi5zdHJpbmdpZnkoc3R5bGVyKSk7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW5kZXIuYWRkQ2xhc3ModHIsIHN0cik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnJlbmRlckN1c3RvbVN0eWxlMihzdHlsZXIsIHRyLCBzdHIpO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcy5kZy5yZW5kZXJDdXN0b21TdHlsZShzdHlsZXIsIHRyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==