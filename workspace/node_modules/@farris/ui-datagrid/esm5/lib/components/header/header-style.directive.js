/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Renderer2, Injector, Input } from '@angular/core';
import { DatagridComponent } from '../../datagrid.component';
var HeaderStyleDirective = /** @class */ (function () {
    function HeaderStyleDirective(el, render, inject) {
        this.el = el;
        this.render = render;
        this.inject = inject;
        this.groupHeader = false;
        this.dg = null;
        this.dg = this.inject.get(DatagridComponent);
    }
    /**
     * @return {?}
     */
    HeaderStyleDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.renderCss2Element();
    };
    /**
     * @return {?}
     */
    HeaderStyleDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // 启用表头自提示
        if (this.column.halign && this.column.halign !== 'left') {
            /** @type {?} */
            var tipEl = this.el.nativeElement.querySelector('.farris-label-tips');
            if (tipEl && tipEl.parentElement && tipEl.parentElement.nodeName == 'DIV') {
                this.render.setStyle(tipEl.parentElement, 'width', '100%');
                if (this.column.halign === 'right') {
                    this.render.setStyle(tipEl.parentElement, 'justify-content', 'end');
                }
                else {
                    this.render.setStyle(tipEl.parentElement, 'justify-content', 'center');
                }
            }
            else {
                if (this.groupHeader) {
                    if (this.column.halign === 'right') {
                        this.render.setStyle(this.el.nativeElement, 'justify-content', 'end');
                    }
                    else {
                        this.render.setStyle(this.el.nativeElement, 'justify-content', 'center');
                    }
                }
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    HeaderStyleDirective.prototype.renderCss2Element = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.column && this.column.headerStyler) {
            /** @type {?} */
            var styler = this.column.headerStyler;
            /** @type {?} */
            var dom = this.el.nativeElement;
            /** @type {?} */
            var st = typeof this.column.headerStyler;
            if (st === 'string') {
                this.render.addClass(this.el.nativeElement, (/** @type {?} */ (styler)));
            }
            else if (st === 'function') {
                /** @type {?} */
                var r = ((/** @type {?} */ (this.column.headerStyler)))(this.column);
                if (r.cls) {
                    this.render.addClass(this.el.nativeElement, r.cls);
                }
                if (r.style) {
                    this.renderStyle(dom, r.style);
                }
            }
            else if (st === 'object' && Object.keys(st).length) {
                this.renderStyle(dom, styler);
            }
        }
    };
    /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    HeaderStyleDirective.prototype.renderStyle = /**
     * @private
     * @param {?} targetEl
     * @param {?} styleObj
     * @return {?}
     */
    function (targetEl, styleObj) {
        /** @type {?} */
        var clskey = this.dg.customStyleKey() + " td[field=\"" + this.column.field + "\"] span.f-datagrid-header-cell-title";
        this.dg.renderCustomStyle2({ style: styleObj }, targetEl, clskey);
        /** @type {?} */
        var tdClskey = this.dg.customStyleKey() + " td[field=\"" + this.column.field + "\"].f-datagrid-header-cell";
        this.dg.renderCustomStyle2({ style: styleObj }, targetEl, tdClskey);
        /** @type {?} */
        var bg = Object.keys(styleObj).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.toLowerCase().indexOf('background') > -1; }));
        if (bg && bg.length) {
            /** @type {?} */
            var _bgcolor = styleObj[bg[bg.length - 1]];
            /** @type {?} */
            var tdClskey2 = this.dg.customStyleKey() + " td[field=\"" + this.column.field + "\"] div.f-datagrid-header-cell-content::after";
            this.dg.renderCustomStyle2({ style: { 'background-color': _bgcolor } }, targetEl, tdClskey2);
        }
    };
    HeaderStyleDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[header-style]',
                    exportAs: 'HeaderStyler'
                },] }
    ];
    /** @nocollapse */
    HeaderStyleDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Injector }
    ]; };
    HeaderStyleDirective.propDecorators = {
        column: [{ type: Input, args: ['header-style',] }],
        groupHeader: [{ type: Input }]
    };
    return HeaderStyleDirective;
}());
export { HeaderStyleDirective };
if (false) {
    /** @type {?} */
    HeaderStyleDirective.prototype.column;
    /** @type {?} */
    HeaderStyleDirective.prototype.groupHeader;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    HeaderStyleDirective.prototype.inject;
}
//# sourceMappingURL=data:application/json;base64,