/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input } from '@angular/core';
import { dropHandlers, smoothDnD as SmoothDnDForHeader, constants } from '@farris/smooth-dnd';
import { DatagridComponent } from '../../datagrid.component';
import { DatagridHeaderComponent } from './datagrid-header.component';
import { DragDropColumnService } from './drag-drop-column.service';
var wrapperClass = constants.wrapperClass, animationClass = constants.animationClass;
SmoothDnDForHeader.dropHandler = dropHandlers.reactDropHandler().handler;
SmoothDnDForHeader.wrapChild = false;
/**
 * @record
 */
export function DragStartEndInfo() { }
if (false) {
    /** @type {?} */
    DragStartEndInfo.prototype.isSource;
    /** @type {?} */
    DragStartEndInfo.prototype.payload;
    /** @type {?} */
    DragStartEndInfo.prototype.willAcceptDrop;
}
var DragColumnDirective = /** @class */ (function () {
    function DragColumnDirective(ngzone, injector, render, el, header, dg, dndSer) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.header = header;
        this.dg = dg;
        this.dndSer = dndSer;
        this.enableDrag = true;
        this.groupName = '';
        this.options = {
            groupName: this.groupName,
            orientation: 'horizontal',
            behaviour: 'move',
            dragHandleSelector: '.drag-column-bar',
            dragClass: 'drag-column-moving',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            getChildPayload: this.getChildPayload.bind(this),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                if (typeof payload === 'number') {
                    return false;
                }
                if (sourceContainerOptions.groupName !== _this.groupName) {
                    return false;
                }
                return !_this.dg.isMultiHeader();
            }),
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDrop(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.enableDrag && !changes.enableDrag.isFirstChange()) {
            if (this.enableDrag) {
                this.initDnD();
            }
            else {
                this.disposeDnd();
            }
        }
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    DragColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        if (!this.dg.enableDragColumn) {
            return;
        }
        if (this.groupName === 'left' || this.groupName === 'right') {
            var _a = this.columnsGroup(), left = _a.left, right = _a.right;
            if (this.groupName === 'left' && !left.length) {
                return;
            }
            if (this.groupName === 'right' && (!right.length || (right.length === 1 && right[0].field === '_datagrid-setting-control_'))) {
                return;
            }
        }
        this.options.groupName = this.groupName;
        this.disposeDnd();
        if (this.enableDrag) {
            this.container = SmoothDnDForHeader(this.el.nativeElement, this.options);
            this.dndSer.backupColumns(this.header.columns);
        }
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    DragColumnDirective.prototype.getChildPayload = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        var _this = this;
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                index--;
            }
            if (this.dg.showLineNumber) {
                index--;
            }
        }
        /** @type {?} */
        var groupColumns = this.columnsGroup();
        if (this.groupName === 'left') {
            return groupColumns.left.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) { return _this.dg.columnIsVisible(n); }))[index];
        }
        else if (this.groupName === 'right') {
            return groupColumns.right.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) { return _this.dg.columnIsVisible(n); }))[index];
        }
        else {
            return groupColumns.middle.filter((/**
             * @param {?} n
             * @param {?} i
             * @return {?}
             */
            function (n, i) { return _this.dg.columnIsVisible(n); }))[index];
        }
    };
    /**
     * @param {?} dropResult
     * @return {?}
     */
    DragColumnDirective.prototype.onDropReady = /**
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    DragColumnDirective.prototype.onDrop = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        var _this = this;
        var addedIndex = dropResult.addedIndex, payload = dropResult.payload, removedIndex = dropResult.removedIndex;
        if (addedIndex === null) {
            return;
        }
        /** @type {?} */
        var groupColumns = this.columnsGroup();
        /** @type {?} */
        var cols = this.dg.columns[0];
        /** @type {?} */
        var currIndex = cols.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.field === payload.field; }));
        /** @type {?} */
        var newIndex = addedIndex;
        /** @type {?} */
        var moveColumn = (/**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            if (columns) {
                /** @type {?} */
                var targetColumn_1 = columns.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.visible || n.visible === undefined; }))[newIndex];
                if (targetColumn_1) {
                    /** @type {?} */
                    var realTagetIndex = cols.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.field === targetColumn_1.field; }));
                    _this.dg.columns[0] = _this.dndSer.moveItem(_this.dg.columns[0], realTagetIndex, currIndex);
                    return true;
                }
            }
            return false;
        });
        /** @type {?} */
        var columns = [];
        if (this.groupName === 'left') {
            if (this.dg.showCheckbox) {
                newIndex--;
            }
            if (this.dg.showLineNumber) {
                newIndex--;
            }
            columns = groupColumns.left;
        }
        else if (this.groupName === 'center') {
            columns = groupColumns.middle;
        }
        else if (this.groupName === 'right') {
            columns = groupColumns.right;
        }
        if (moveColumn(columns)) {
            this.dg.columnsChanged(false);
            if (this.dg.useControlPanel && this.dg.settingService) {
                this.dg.settingService.saveUserConfig(this.dg.id);
            }
            this.dg.columnMoved.emit({ newColumns: this.dg.columns, grid: this.dg });
        }
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DragColumnDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DragColumnDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
    };
    /**
     * @private
     * @return {?}
     */
    DragColumnDirective.prototype.columnsGroup = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var leftColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'left'; }));
        /** @type {?} */
        var rightColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed === 'right'; }));
        /** @type {?} */
        var middleColumns = this.dg.columns[0].filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.fixed !== 'right' && n.fixed !== 'left'; }));
        return {
            left: leftColumns,
            right: rightColumns,
            middle: middleColumns
        };
    };
    DragColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[drag-column]',
                    providers: [
                        DragDropColumnService
                    ]
                },] }
    ];
    /** @nocollapse */
    DragColumnDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatagridHeaderComponent },
        { type: DatagridComponent },
        { type: DragDropColumnService }
    ]; };
    DragColumnDirective.propDecorators = {
        enableDrag: [{ type: Input, args: ['drag-column',] }],
        groupName: [{ type: Input }],
        options: [{ type: Input }]
    };
    return DragColumnDirective;
}());
export { DragColumnDirective };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.container;
    /** @type {?} */
    DragColumnDirective.prototype.enableDrag;
    /** @type {?} */
    DragColumnDirective.prototype.groupName;
    /** @type {?} */
    DragColumnDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.header;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DragColumnDirective.prototype.dndSer;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtZHJhZy1jb2x1bW4uZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1kYXRhZ3JpZC8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2hlYWRlci9kYXRhZ3JpZC1kcmFnLWNvbHVtbi5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFpQixLQUFLLEVBQXVDLE1BQU0sZUFBZSxDQUFDO0FBQzlJLE9BQU8sRUFBRSxZQUFZLEVBQUUsU0FBUyxJQUFJLGtCQUFrQixFQUFnQyxTQUFTLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM1SCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0RSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUczRCxJQUFBLHFDQUFZLEVBQUUseUNBQWM7QUFDcEMsa0JBQWtCLENBQUMsV0FBVyxHQUFHLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLE9BQU8sQ0FBQztBQUN6RSxrQkFBa0IsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDOzs7O0FBRXJDLHNDQUlDOzs7SUFIRyxvQ0FBa0I7O0lBQ2xCLG1DQUFhOztJQUNiLDBDQUF3Qjs7QUFHNUI7SUE4REksNkJBQW9CLE1BQWMsRUFBVSxRQUFrQixFQUFVLE1BQWlCLEVBQ3JFLEVBQWMsRUFBVSxNQUErQixFQUFVLEVBQXFCLEVBQ3RGLE1BQTZCO1FBRmpELGlCQUVzRDtRQUZsQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVc7UUFDckUsT0FBRSxHQUFGLEVBQUUsQ0FBWTtRQUFVLFdBQU0s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QUEwQjs7Ozs7SUFBRSxxQ0FBeUI7Ozs7O0lBQzdFLGlDQUFzQjs7Ozs7SUFBRSxxQ0FBdUM7Ozs7O0lBQUUsaUNBQTZCOzs7OztJQUM5RixxQ0FBcUMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgRGlyZWN0aXZlLCBOZ1pvbmUsIEluamVjdG9yLCBSZW5kZXJlcjIsIEVsZW1lbnRSZWYsIEFmdGVyVmlld0luaXQsIElucHV0LCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBkcm9wSGFuZGxlcnMsIHNtb290aERuRCBhcyBTbW9vdGhEbkRGb3JIZWFkZXIsIERyb3BSZXN1bHQsIENvbnRhaW5lck9wdGlvbnMsIGNvbnN0YW50cyB9IGZyb20gJ0BmYXJyaXMvc21vb3RoLWRuZCc7XHJcbmltcG9ydCB7IERhdGFncmlkQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vZGF0YWdyaWQuY29tcG9uZW50JztcclxuaW1wb3J0IHsgRGF0YWdyaWRIZWFkZXJDb21wb25lbnQgfSBmcm9tICcuL2RhdGFncmlkLWhlYWRlci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBEcmFnRHJvcENvbHVtblNlcnZpY2UgfSBmcm9tICcuL2RyYWctZHJvcC1jb2x1bW4uc2VydmljZSc7XHJcblxyXG5cclxuY29uc3QgeyB3cmFwcGVyQ2xhc3MsIGFuaW1hdGlvbkNsYXNzIH0gPSBjb25zdGFudHM7XHJcblNtb290aERuREZvckhlYWRlci5kcm9wSGFuZGxlciA9IGRyb3BIYW5kbGVycy5yZWFjdERyb3BIYW5kbGVyKCkuaGFuZGxlcjtcclxuU21vb3RoRG5ERm9ySGVhZGVyLndyYXBDaGlsZCA9IGZhbHNlO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBEcmFnU3RhcnRFbmRJbmZvIHtcclxuICAgIGlzU291cmNlOiBib29sZWFuO1xyXG4gICAgcGF5bG9hZDogYW55O1xyXG4gICAgd2lsbEFjY2VwdERyb3A6IGJvb2xlYW47XHJcbn1cclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gICAgc2VsZWN0b3I6ICdbZHJhZy1jb2x1bW5dJyxcclxuICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgIERyYWdEcm9wQ29sdW1uU2VydmljZVxyXG4gICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgRHJhZ0NvbHVtbkRpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcclxuICAgIHByaXZhdGUgY29udGFpbmVyOiBhbnk7XHJcbiAgICBASW5wdXQoJ2RyYWctY29sdW1uJykgZW5hYmxlRHJhZyA9IHRydWU7XHJcbiAgICBASW5wdXQoKSBncm91cE5hbWUgPSAnJztcclxuXHJcbiAgICBASW5wdXQoKSBvcHRpb25zOiBDb250YWluZXJPcHRpb25zID0ge1xyXG4gICAgICAgIGdyb3VwTmFtZTogdGhpcy5ncm91cE5hbWUsXHJcbiAgICAgICAgb3JpZW50YXRpb246ICdob3Jpem9udGFsJyxcclxuICAgICAgICBiZWhhdmlvdXI6ICdtb3ZlJyxcclxuICAgICAgICBkcmFnSGFuZGxlU2VsZWN0b3I6ICcuZHJhZy1jb2x1bW4tYmFyJyxcclxuICAgICAgICBkcmFnQ2xhc3M6ICdkcmFnLWNvbHVtbi1tb3ZpbmcnLFxyXG4gICAgICAgIGRyb3BQbGFjZWhvbGRlcjoge1xyXG4gICAgICAgICAgICBjbGFzc05hbWU6ICdkcm9wLWdyb3VwLWZpZWxkJyxcclxuICAgICAgICB9LFxyXG4gICAgICAgIGdldEdob3N0UGFyZW50OiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5ib2R5O1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0Q2hpbGRQYXlsb2FkOiB0aGlzLmdldENoaWxkUGF5bG9hZC5iaW5kKHRoaXMpLFxyXG4gICAgICAgIHNob3VsZEFjY2VwdERyb3A6IChzb3VyY2VDb250YWluZXJPcHRpb25zLCBwYXlsb2FkKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGF5bG9hZCA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNvdXJjZUNvbnRhaW5lck9wdGlvbnMuZ3JvdXBOYW1lICE9PSB0aGlzLmdyb3VwTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMuZGcuaXNNdWx0aUhlYWRlcigpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25Ecm9wUmVhZHk6IChkcm9wUmVzdWx0OiBEcm9wUmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJvcFJlYWR5KGRyb3BSZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJvcDogKGRyb3BSZXN1bHQ6IERyb3BSZXN1bHQpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25Ecm9wKGRyb3BSZXN1bHQpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJhZ0VudGVyOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhZ0VudGVyKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgb25EcmFnU3RhcnQ6IChpbmZvOiBEcmFnU3RhcnRFbmRJbmZvKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMubmd6b25lLnJ1bigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uRHJhZ1N0YXJ0KGluZm8pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9uRHJhZ0VuZDogKGluZm86IERyYWdTdGFydEVuZEluZm8pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5uZ3pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub25EcmFnRW5kKGluZm8pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbmd6b25lOiBOZ1pvbmUsIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLCBwcml2YXRlIHJlbmRlcjogUmVuZGVyZXIyLFxyXG4gICAgICAgICAgICAgICAgcHJpdmF0ZSBlbDogRWxlbWVudFJlZiwgcHJpdmF0ZSBoZWFkZXI6IERhdGFncmlkSGVhZGVyQ29tcG9uZW50LCBwcml2YXRlIGRnOiBEYXRhZ3JpZENvbXBvbmVudCxcclxuICAgICAgICAgICAgICAgIHByaXZhdGUgZG5kU2VyOiBEcmFnRHJvcENvbHVtblNlcnZpY2UpIHsgfVxyXG5cclxuXHJcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZW5hYmxlRHJhZyAmJiAhY2hhbmdlcy5lbmFibGVEcmFnLmlzRmlyc3RDaGFuZ2UoKSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5lbmFibGVEcmFnKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmluaXREbkQoKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcG9zZURuZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcclxuICAgICAgICB0aGlzLmluaXREbkQoKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uRGVzdHJveSgpIHtcclxuICAgICAgICB0aGlzLmRpc3Bvc2VEbmQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGRpc3Bvc2VEbmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuY29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGFpbmVyLmRpc3Bvc2UoKTtcclxuICAgICAgICAgICAgdGhpcy5jb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXREbkQoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmRnLmVuYWJsZURyYWdDb2x1bW4pIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5ncm91cE5hbWUgPT09ICdsZWZ0JyB8fCB0aGlzLmdyb3VwTmFtZSA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICBjb25zdCB7IGxlZnQsIHJpZ2h0IH0gPSB0aGlzLmNvbHVtbnNHcm91cCgpO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuZ3JvdXBOYW1lID09PSAnbGVmdCcgJiYgIWxlZnQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwTmFtZSA9PT0gJ3JpZ2h0JyAmJiAoIXJpZ2h0Lmxlbmd0aCB8fCAocmlnaHQubGVuZ3RoID09PSAxICYmIHJpZ2h0WzBdLmZpZWxkID09PSAnX2RhdGFncmlkLXNldHRpbmctY29udHJvbF8nKSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5vcHRpb25zLmdyb3VwTmFtZSA9IHRoaXMuZ3JvdXBOYW1lO1xyXG4gICAgICAgIHRoaXMuZGlzcG9zZURuZCgpO1xyXG5cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZW5hYmxlRHJhZykge1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRhaW5lciA9IFNtb290aERuREZvckhlYWRlcihcclxuICAgICAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudCxcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9uc1xyXG4gICAgICAgICAgICApO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5kbmRTZXIuYmFja3VwQ29sdW1ucyh0aGlzLmhlYWRlci5jb2x1bW5zKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRDaGlsZFBheWxvYWQoaW5kZXgpIHtcclxuICAgICAgICBpZiAodGhpcy5ncm91cE5hbWUgPT09ICdsZWZ0Jykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kZy5zaG93Q2hlY2tib3gpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHRoaXMuZGcuc2hvd0xpbmVOdW1iZXIpIHtcclxuICAgICAgICAgICAgICAgIGluZGV4LS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGdyb3VwQ29sdW1ucyA9IHRoaXMuY29sdW1uc0dyb3VwKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwTmFtZSA9PT0gJ2xlZnQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBncm91cENvbHVtbnMubGVmdC5maWx0ZXIoKG4sIGkpID0+IHRoaXMuZGcuY29sdW1uSXNWaXNpYmxlKG4pKVtpbmRleF07XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmdyb3VwTmFtZSA9PT0gJ3JpZ2h0Jykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBDb2x1bW5zLnJpZ2h0LmZpbHRlcigobiwgaSkgPT4gdGhpcy5kZy5jb2x1bW5Jc1Zpc2libGUobikpW2luZGV4XTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZ3JvdXBDb2x1bW5zLm1pZGRsZS5maWx0ZXIoKG4sIGkpID0+IHRoaXMuZGcuY29sdW1uSXNWaXNpYmxlKG4pKVtpbmRleF07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIG9uRHJvcFJlYWR5KGRyb3BSZXN1bHQpIHtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9uRHJvcChkcm9wUmVzdWx0OiBEcm9wUmVzdWx0KSB7XHJcbiAgICAgICAgY29uc3QgeyBhZGRlZEluZGV4LCBwYXlsb2FkLCByZW1vdmVkSW5kZXggfSA9IGRyb3BSZXN1bHQ7XHJcbiAgICAgICAgaWYgKGFkZGVkSW5kZXggPT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZ3JvdXBDb2x1bW5zID0gdGhpcy5jb2x1bW5zR3JvdXAoKTtcclxuXHJcbiAgICAgICAgY29uc3QgY29scyA9IHRoaXMuZGcuY29sdW1uc1swXTtcclxuICAgICAgICBjb25zdCBjdXJySW5kZXggPSBjb2xzLmZpbmRJbmRleChuID0+IG4uZmllbGQgPT09IHBheWxvYWQuZmllbGQpO1xyXG5cclxuICAgICAgICBsZXQgbmV3SW5kZXggPSBhZGRlZEluZGV4O1xyXG5cclxuICAgICAgICBjb25zdCBtb3ZlQ29sdW1uID0gKGNvbHVtbnM6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoY29sdW1ucykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0Q29sdW1uID0gY29sdW1ucy5maWx0ZXIobiA9PiBuLnZpc2libGUgfHwgbi52aXNpYmxlID09PSB1bmRlZmluZWQpW25ld0luZGV4XTtcclxuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRDb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByZWFsVGFnZXRJbmRleCA9IGNvbHMuZmluZEluZGV4KG4gPT4gbi5maWVsZCA9PT0gdGFyZ2V0Q29sdW1uLmZpZWxkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRnLmNvbHVtbnNbMF0gPSB0aGlzLmRuZFNlci5tb3ZlSXRlbSh0aGlzLmRnLmNvbHVtbnNbMF0sIHJlYWxUYWdldEluZGV4LCBjdXJySW5kZXgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGxldCBjb2x1bW5zID0gW107XHJcbiAgICAgICAgaWYgKHRoaXMuZ3JvdXBOYW1lID09PSAnbGVmdCcpIHtcclxuICAgICAgICAgICAgaWYgKHRoaXMuZGcuc2hvd0NoZWNrYm94KSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleC0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnLnNob3dMaW5lTnVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdJbmRleC0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbHVtbnMgPSBncm91cENvbHVtbnMubGVmdDtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JvdXBOYW1lID09PSAnY2VudGVyJykge1xyXG4gICAgICAgICAgICBjb2x1bW5zID0gZ3JvdXBDb2x1bW5zLm1pZGRsZTtcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JvdXBOYW1lID09PSAncmlnaHQnKSB7XHJcbiAgICAgICAgICAgIGNvbHVtbnMgPSBncm91cENvbHVtbnMucmlnaHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAobW92ZUNvbHVtbihjb2x1bW5zKSkge1xyXG4gICAgICAgICAgICB0aGlzLmRnLmNvbHVtbnNDaGFuZ2VkKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmRnLnVzZUNvbnRyb2xQYW5lbCAmJiB0aGlzLmRnLnNldHRpbmdTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRnLnNldHRpbmdTZXJ2aWNlLnNhdmVVc2VyQ29uZmlnKHRoaXMuZGcuaWQpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRnLmNvbHVtbk1vdmVkLmVtaXQoeyBuZXdDb2x1bW5zOiB0aGlzLmRnLmNvbHVtbnMsIGdyaWQ6IHRoaXMuZGcgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnU3RhcnQoaW5mbykge1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb25EcmFnRW5kKGluZm8pIHtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBvbkRyYWdFbnRlcigpIHtcclxuICAgIH1cclxuXHJcblxyXG4gICAgcHJpdmF0ZSBjb2x1bW5zR3JvdXAoKSB7XHJcbiAgICAgICAgY29uc3QgbGVmdENvbHVtbnMgPSB0aGlzLmRnLmNvbHVtbnNbMF0uZmlsdGVyKG4gPT4gbi5maXhlZCA9PT0gJ2xlZnQnKTtcclxuICAgICAgICBjb25zdCByaWdodENvbHVtbnMgPSB0aGlzLmRnLmNvbHVtbnNbMF0uZmlsdGVyKG4gPT4gbi5maXhlZCA9PT0gJ3JpZ2h0Jyk7XHJcbiAgICAgICAgY29uc3QgbWlkZGxlQ29sdW1ucyA9IHRoaXMuZGcuY29sdW1uc1swXS5maWx0ZXIobiA9PiBuLmZpeGVkICE9PSAncmlnaHQnICYmIG4uZml4ZWQgIT09ICdsZWZ0Jyk7XHJcblxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGxlZnQ6IGxlZnRDb2x1bW5zLFxyXG4gICAgICAgICAgICByaWdodDogcmlnaHRDb2x1bW5zLFxyXG4gICAgICAgICAgICBtaWRkbGU6IG1pZGRsZUNvbHVtbnNcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcblxyXG4iXX0=