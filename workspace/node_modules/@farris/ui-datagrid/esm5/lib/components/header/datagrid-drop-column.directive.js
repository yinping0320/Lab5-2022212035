/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone, Injector, Renderer2, ElementRef, Input } from '@angular/core';
import { dropHandlers, smoothDnD, constants } from '@farris/smooth-dnd';
import { DatagridComponent } from './../../datagrid.component';
import { DragDropColumnService } from './drag-drop-column.service';
smoothDnD.dropHandler = dropHandlers.reactDropHandler().handler;
smoothDnD.wrapChild = false;
var wrapperClass = constants.wrapperClass, animationClass = constants.animationClass;
var DropColumnDirective = /** @class */ (function () {
    function DropColumnDirective(ngzone, injector, render, el, dg, dndSer) {
        var _this = this;
        this.ngzone = ngzone;
        this.injector = injector;
        this.render = render;
        this.el = el;
        this.dg = dg;
        this.dndSer = dndSer;
        this.options = {
            orientation: 'horizontal',
            behaviour: 'move',
            dragHandleSelector: '.group-field',
            dropPlaceholder: {
                className: 'drop-group-field',
            },
            getGhostParent: (/**
             * @return {?}
             */
            function () {
                return document.body;
            }),
            shouldAcceptDrop: (/**
             * @param {?} sourceContainerOptions
             * @param {?} payload
             * @return {?}
             */
            function (sourceContainerOptions, payload) {
                if (payload === undefined || payload === null) {
                    return false;
                }
                if (typeof payload === 'number') {
                    return true;
                }
                if (_this.getGroupFields().length < 3) {
                    return payload.allowGrouping === undefined || payload.allowGrouping;
                }
                return false;
            }),
            getChildPayload: (/**
             * @param {?} index
             * @return {?}
             */
            function (index) {
                return index;
            }),
            // dragClass: 'drag-column-moving',
            onDropReady: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDropReady(dropResult);
                }));
            }),
            onDrop: (/**
             * @param {?} dropResult
             * @return {?}
             */
            function (dropResult) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDrop(dropResult);
                }));
            }),
            onDragEnter: (/**
             * @return {?}
             */
            function () {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnter();
                }));
            }),
            onDragStart: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragStart(info);
                }));
            }),
            onDragEnd: (/**
             * @param {?} info
             * @return {?}
             */
            function (info) {
                _this.ngzone.run((/**
                 * @return {?}
                 */
                function () {
                    _this.onDragEnd(info);
                }));
            })
        };
    }
    /**
     * @return {?}
     */
    DropColumnDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initDnD();
    };
    /**
     * @return {?}
     */
    DropColumnDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.disposeDnd();
    };
    /**
     * @private
     * @return {?}
     */
    DropColumnDirective.prototype.disposeDnd = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.container) {
            this.container.dispose();
            this.container = null;
        }
    };
    /**
     * @private
     * @return {?}
     */
    DropColumnDirective.prototype.initDnD = /**
     * @private
     * @return {?}
     */
    function () {
        this.disposeDnd();
        if (this.dg.showRowGroupPanel) {
            this.container = smoothDnD(this.el.nativeElement, this.options);
        }
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    DropColumnDirective.prototype.onDropReady = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
    };
    /**
     * @private
     * @return {?}
     */
    DropColumnDirective.prototype.getGroupFields = /**
     * @private
     * @return {?}
     */
    function () {
        return this.dg.groupField ? this.dg.groupField.split(',') : [];
    };
    /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    DropColumnDirective.prototype.onDrop = /**
     * @private
     * @param {?} dropResult
     * @return {?}
     */
    function (dropResult) {
        var _this = this;
        var addedIndex = dropResult.addedIndex, payload = dropResult.payload, removedIndex = dropResult.removedIndex;
        if (addedIndex === null) {
            return;
        }
        /** @type {?} */
        var newGroupFields = this.getGroupFields();
        if (removedIndex === null) {
            if (!newGroupFields.some((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v === payload.field; }))) {
                // newGroupFields.splice(0, 0, payload.field);
                newGroupFields.push(payload.field);
            }
        }
        else {
            this.dndSer.moveItem(newGroupFields, addedIndex, removedIndex);
        }
        this.dg.groupField = newGroupFields.join(',');
        // this.dg.toggleVisibleColumn([this.dg.groupField], false);
        if (this.dg.useControlPanel && this.dg.settingService) {
            this.dg.checkSettingHttp();
            this.dg.settingService.saveUserConfig(this.dg.id).subscribe((/**
             * @return {?}
             */
            function () {
                _this.dg.columnsChanged();
            }));
        }
        else {
            this.dg.columnsChanged();
        }
        this.dg.groupFieldChange.emit({ newGroupField: this.dg.groupField, grid: this.dg });
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DropColumnDirective.prototype.onDragStart = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @param {?} info
     * @return {?}
     */
    DropColumnDirective.prototype.onDragEnd = /**
     * @private
     * @param {?} info
     * @return {?}
     */
    function (info) {
    };
    /**
     * @private
     * @return {?}
     */
    DropColumnDirective.prototype.onDragEnter = /**
     * @private
     * @return {?}
     */
    function () {
    };
    DropColumnDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[drop-column]',
                    providers: [
                        DragDropColumnService
                    ]
                },] }
    ];
    /** @nocollapse */
    DropColumnDirective.ctorParameters = function () { return [
        { type: NgZone },
        { type: Injector },
        { type: Renderer2 },
        { type: ElementRef },
        { type: DatagridComponent },
        { type: DragDropColumnService }
    ]; };
    DropColumnDirective.propDecorators = {
        options: [{ type: Input }]
    };
    return DropColumnDirective;
}());
export { DropColumnDirective };
if (false) {
    /** @type {?} */
    DropColumnDirective.prototype.options;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.container;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.ngzone;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.render;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.dg;
    /**
     * @type {?}
     * @private
     */
    DropColumnDirective.prototype.dndSer;
}
//# sourceMappingURL=data:application/json;base64,