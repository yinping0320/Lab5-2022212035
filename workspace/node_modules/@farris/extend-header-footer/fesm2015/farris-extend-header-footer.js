import { CommonModule } from '@angular/common';
import { ViewChangeModule } from '@farris/ui-view-change';
import { FResponseToolbarModule } from '@farris/ui-response-toolbar';
import { Subject } from 'rxjs';
import { Directive, TemplateRef, Input, Component, ContentChild, HostBinding, Output, EventEmitter, Pipe, SecurityContext, NgModule } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/page-header-content.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageHeaderContentDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEPageHeaderContentDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fePageHeaderContent]'
            },] }
];
/** @nocollapse */
FEPageHeaderContentDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEPageHeaderContentDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/page-header-down.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageHeaderDownDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEPageHeaderDownDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fePageHeaderDown]'
            },] }
];
/** @nocollapse */
FEPageHeaderDownDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEPageHeaderDownDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/page-header-title.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageHeaderTitleDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEPageHeaderTitleDirective.decorators = [
    { type: Directive, args: [{
                selector: '[fePageHeaderTitle]'
            },] }
];
/** @nocollapse */
FEPageHeaderTitleDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEPageHeaderTitleDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/modal-footer-up.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEModalFooterUpDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEModalFooterUpDirective.decorators = [
    { type: Directive, args: [{
                selector: '[feModalFooterUp]'
            },] }
];
/** @nocollapse */
FEModalFooterUpDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEModalFooterUpDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/modal-footer-left.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEModalFooterLeftDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEModalFooterLeftDirective.decorators = [
    { type: Directive, args: [{
                selector: '[feModalFooterLeft]'
            },] }
];
/** @nocollapse */
FEModalFooterLeftDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEModalFooterLeftDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/modal-footer-right.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEModalFooterRightDirective {
    /**
     * @param {?} templateRef
     */
    constructor(templateRef) {
        this.templateRef = templateRef;
    }
}
FEModalFooterRightDirective.decorators = [
    { type: Directive, args: [{
                selector: '[feModalFooterRight]'
            },] }
];
/** @nocollapse */
FEModalFooterRightDirective.ctorParameters = () => [
    { type: TemplateRef }
];
FEModalFooterRightDirective.propDecorators = {
    cls: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/modal-footer.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FEModalFooterDefault = {
    extend: '',
    // 扩展区域内容-位置上
    extendLeft: '',
    // 扩展区域内容-位置左
    extendRight: '',
    //扩展区域内容-位置右
    toolbarCls: 'col-7',
    //工具栏样式
    toolbarDatas: [],
    //工具栏数据
    toolbarBtnSize: "lg",
    //工具栏按钮尺寸
    toolbarPopDirection: "" //工具栏按钮弹出方向
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} allDatas
 * @param {?} config
 * @param {?} toolbarKey
 * @param {?} showType
 * @return {?}
 */
function formToolbarData(allDatas, config, toolbarKey, showType) {
    if (allDatas.length == 0) {
        // 工具数据
        return [];
    }
    else {
        // 获取可见数据
        if (!config.hasOwnProperty(showType)) {
            return [];
        }
        /** @type {?} */
        let showTypeToolbarDatas = config[showType][toolbarKey];
        if (!showTypeToolbarDatas || showTypeToolbarDatas.length == 0) {
            return [];
        }
        else {
            /** @type {?} */
            let findDatas = [];
            // 查找数据
            showTypeToolbarDatas.map((/**
             * @param {?} itemId
             * @return {?}
             */
            itemId => {
                /** @type {?} */
                let btnInfo = allDatas.find((/**
                 * @param {?} btnItem
                 * @return {?}
                 */
                btnItem => btnItem['id'] == itemId));
                if (btnInfo) {
                    findDatas.push(btnInfo);
                }
            }));
            return findDatas;
        }
    }
}
/** @type {?} */
const FExtendUtils = { formToolbarData };

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/modal-footer/modal-footer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEModalFooterComponent {
    constructor() {
        // 设置默认样式
        this.cls = true;
        this.realToolbarDatas = [];
        this._settings = Object.assign({}, FEModalFooterDefault);
        // 展示类型 modal 窗口，sidebar，空是 普通,
        this.showType = "modal";
        this.toolbarClickEvent = new EventEmitter();
        this.btnDisable = new Subject();
        this.btnVisible = new Subject();
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    set options(settings) {
        if (settings) {
            this._settings = Object.assign({}, FEModalFooterDefault, settings);
            this.realToolbarDatas = this._settings['toolbarDatas'];
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._settings;
    }
    // 按钮的禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnDisable(values) {
        this.btnDisable = values;
    }
    // 按钮的查看状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnVisible(values) {
        this.btnVisible = values;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 变化
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('toolbarAllDatas') || changes.hasOwnProperty('toolbarConfig') || changes.hasOwnProperty('showType')) {
            if (this.toolbarKey && this.toolbarConfig && this.toolbarAllDatas) {
                this.realToolbarDatas = [...FExtendUtils.formToolbarData(this.toolbarAllDatas, this.toolbarConfig, this.toolbarKey, this.showType)];
            }
        }
    }
    // 抛出事件
    /**
     * @param {?} ev
     * @return {?}
     */
    responseToolbarClickHandler(ev) {
        this.toolbarClickEvent.emit(ev);
    }
    // 显示内容
    /**
     * @return {?}
     */
    isFooterShow() {
        if (this.mfExtendDirective || this.mfLeftDirective || this.options['extendLeft'] || this.realToolbarDatas.length > 0 || this.mfRightDirective || this.options['extendRight']) {
            return true;
        }
        return false;
    }
}
FEModalFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-modal-footer',
                template: `
   <div class="fe-modal-footer-wrapper" [ngClass]="'showtype-'+showType" *ngIf="isFooterShow()">
    <ng-container *ngIf="mfExtendDirective&&mfExtendDirective.templateRef">
      <div class="f-top"  [ngClass]="mfExtendDirective.cls">
        <ng-template [ngTemplateOutlet]="mfExtendDirective.templateRef"></ng-template>
      </div>
    </ng-container>
    <div class="fe-modal-footer-base no-gutters">
      <ng-container *ngIf="mfLeftDirective&&mfLeftDirective.templateRef">
          <div class="f-left"  [ngClass]="mfLeftDirective.cls">
            <ng-template [ngTemplateOutlet]="mfLeftDirective.templateRef"></ng-template>
          </div>
      </ng-container> 
      <div class="f-left" *ngIf="!mfLeftDirective&&options['extendLeft']"  [innerHTML]="options['extendLeft']|feSafeHtml">
      </div>
      <ng-container *ngIf="realToolbarDatas.length>0">
          <f-response-toolbar class="f-toolbar ml-auto" [ngClass]="options['toolbarCls']" [datas]="realToolbarDatas"
              [btnState]="btnDisable" [btnVisible]="btnVisible" [buttonSize]="options['toolbarBtnSize']"
              (rtClickEvent)="responseToolbarClickHandler($event)" [popDirection]="options['toolbarPopDirection']">
          </f-response-toolbar>
      </ng-container>
      <ng-container *ngIf="mfRightDirective&&mfRightDirective.templateRef">
          <div class="f-right"  [ngClass]="mfRightDirective.cls">
            <ng-template [ngTemplateOutlet]="mfRightDirective.templateRef"></ng-template>
          </div>
      </ng-container> 
      <div class="f-right" *ngIf="!mfRightDirective&&options['extendRight']"  [innerHTML]="options['extendRight']|feSafeHtml">
      </div>
    </div>   
   </div>
  `,
                styles: [""]
            }] }
];
/** @nocollapse */
FEModalFooterComponent.ctorParameters = () => [];
FEModalFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.fe-cmp-modal-footer',] }],
    options: [{ type: Input }],
    toolbarAllDatas: [{ type: Input }],
    toolbarConfig: [{ type: Input }],
    toolbarKey: [{ type: Input }],
    showType: [{ type: Input }],
    mfExtendDirective: [{ type: ContentChild, args: [FEModalFooterUpDirective,] }],
    mfLeftDirective: [{ type: ContentChild, args: [FEModalFooterLeftDirective,] }],
    mfRightDirective: [{ type: ContentChild, args: [FEModalFooterRightDirective,] }],
    toolbarClickEvent: [{ type: Output }],
    toolbarBtnDisable: [{ type: Input }],
    toolbarBtnVisible: [{ type: Input }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/page-header.model.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const FEPageHeaderDefault = {
    mainTitle: '',
    // 主标题
    subTitle: '',
    // 副标题
    status: '',
    // 状态
    content: '',
    // 中间区域
    extend: '',
    // 扩展区域内容
    showIcon: true,
    //是否显示图标
    iconName: 'f-icon-page-title-record',
    //图标的名称
    iconCls: 'f-text-orna-bill',
    //图标的样式比如颜色、背景
    pgShow: false,
    //是否显示分页
    pgPreDisabled: true,
    //向前翻页是否禁用
    pgNextDisabled: false,
    //向后翻页是否禁用
    toolbarCls: 'col-6',
    //工具栏样式
    toolbarDatas: [],
    //工具栏数据
    toolbarBtnSize: "",
    //工具栏按钮尺寸
    toolbarPopDirection: "",
    //工具栏按钮弹出方向
    showViewChange: false,
    //是否显示视图方案
    viewDatas: [],
    //视图切换数据
    viewType: 'tile',
    // 视图切换类型
    viewDefaultType: '',
    // 默认视图状态
    viewGroupId: 'default',
    //视图切换groupId
    toolbarAllDatas: [],
    // 所有按钮相关数据
    toolbarConfig: null,
    //工具栏配置
    toolbarKey: "" //工具栏获取数据的依据
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/page-header/page-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEPageHeaderComponent {
    constructor() {
        this._settings = Object.assign({}, FEPageHeaderDefault);
        this.realToolbarDatas = [];
        // 展示类型
        this.showType = "modal";
        this.btnDisable = new Subject();
        this.btnVisible = new Subject();
        // 事件
        this.pgPreClickEvent = new EventEmitter();
        this.pgNextClickEvent = new EventEmitter();
        this.toolbarClickEvent = new EventEmitter();
        this.viewChangeEvent = new EventEmitter();
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    set options(settings) {
        if (settings) {
            this._settings = Object.assign({}, FEPageHeaderDefault, settings);
            this.realToolbarDatas = this._settings['toolbarDatas'];
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._settings;
    }
    // 按钮的禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnDisable(values) {
        this.btnDisable = values;
    }
    // 按钮的查看状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnVisible(values) {
        this.btnVisible = values;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 变化
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('toolbarAllDatas') || changes.hasOwnProperty('toolbarConfig') || changes.hasOwnProperty('showType')) {
            if (this.toolbarKey && this.toolbarConfig && this.toolbarAllDatas) {
                this.realToolbarDatas = [...FExtendUtils.formToolbarData(this.toolbarAllDatas, this.toolbarConfig, this.toolbarKey, this.showType)];
            }
        }
    }
    // 向上翻页
    /**
     * @param {?} ev
     * @return {?}
     */
    pgPreClickHandler(ev) {
        if (!this.options['pgPreDisabled']) {
            this.pgPreClickEvent.emit(ev);
        }
    }
    // 向下翻页
    /**
     * @param {?} ev
     * @return {?}
     */
    pgNextClickHandler(ev) {
        if (!this.options['pgNextDisabled']) {
            this.pgNextClickEvent.emit(ev);
        }
    }
    // 抛出事件
    /**
     * @param {?} ev
     * @return {?}
     */
    responseToolbarClickHandler(ev) {
        this.toolbarClickEvent.emit(ev);
    }
    // View改变
    /**
     * @param {?} ev
     * @return {?}
     */
    toolTypeChangeHandler(ev) {
        this.viewChangeEvent.emit(ev);
    }
}
FEPageHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-page-header',
                template: `
  <div class="f-page-header"  [ngClass]="'showtype-'+showType">
  <nav class="f-page-header-base">
      <ng-container *ngIf="hTitleDirective &&hTitleDirective.templateRef">
          <div class="f-title" [ngClass]="hTitleDirective.cls">
              <ng-template [ngTemplateOutlet]="hTitleDirective.templateRef"></ng-template>
          </div>
      </ng-container>
      <div class="f-title" *ngIf="!hTitleDirective">
          <span *ngIf="options['showIcon']" class="f-title-icon" [ngClass]="options['iconCls']">
              <i class="f-icon" [ngClass]="options['iconName']"></i>
          </span>
          <h4 class="f-title-text" [innerHTML]="options['mainTitle']|feSafeHtml"></h4>
          <h5 *ngIf="options['subTitle']" class="f-title-subtitle" [innerHTML]="options['subTitle']|feSafeHtml"></h5>
          <div *ngIf="options['status']" class="f-title-status" [innerHTML]="options['status']|feSafeHtml">
          </div>
          <div class="f-title-pagination" *ngIf="options['pgShow']">
              <span class="f-icon f-icon-arrow-w" [ngClass]="{'f-state-disabled':options['pgPreDisabled']}"
                  (click)="pgPreClickHandler($event)"></span>
              <span class="f-icon f-icon-arrow-e" [ngClass]="{'f-state-disabled':options['pgNextDisabled']}"
                  (click)="pgNextClickHandler($event)"></span>
          </div>
      </div>
      <ng-container *ngIf="hContentDirective &&hContentDirective.templateRef">
          <div class="f-content" [ngClass]="hContentDirective.cls">
              <ng-template [ngTemplateOutlet]="hContentDirective.templateRef"></ng-template>
          </div>
      </ng-container>
      <ng-container *ngIf="options['content']&&!hContentDirective" >
          <div class="f-content"  [innerHTML]="options['content']|feSafeHtml"></div>
      </ng-container>
      <ng-container *ngIf="realToolbarDatas.length>0">
          <f-response-toolbar class="f-toolbar ml-auto" [ngClass]="options['toolbarCls']" [datas]="realToolbarDatas"
          [btnState]="btnDisable" [btnVisible]="btnVisible"  [buttonSize]="options['toolbarBtnSize']=='default'?'':options['toolbarBtnSize']" [popDirection]="options['toolbarPopDirection']=='default'?'':options['toolbarPopDirection']"
              (rtClickEvent)="responseToolbarClickHandler($event)">
          </f-response-toolbar>
      </ng-container>
      <ng-container *ngIf="options['showViewChange']&&options['viewDatas'].length">
          <farris-view-change [toolbarData]="options['viewDatas']" class="f-btn-ml" [viewType]="options['viewType']"
              [defaultType]="options['viewDefaultType']" [viewGroupId]="options['viewGroupId']"
              (toolTypeChange)="toolTypeChangeHandler($event)"></farris-view-change>
      </ng-container>
  </nav>
  <ng-container *ngIf="hExtendDirective &&  hExtendDirective.templateRef">
      <div class="f-content" [ngClass]="hExtendDirective.cls">
          <ng-template [ngTemplateOutlet]="hExtendDirective.templateRef"></ng-template>
      </div>
  </ng-container>
  <div class="f-page-header-extend" *ngIf="options['extend']&&!hExtendDirective"  [innerHTML]="options['extend']|feSafeHtml">
  </div>
</div>
  `
            }] }
];
/** @nocollapse */
FEPageHeaderComponent.ctorParameters = () => [];
FEPageHeaderComponent.propDecorators = {
    options: [{ type: Input }],
    toolbarAllDatas: [{ type: Input }],
    toolbarConfig: [{ type: Input }],
    toolbarKey: [{ type: Input }],
    showType: [{ type: Input }],
    hContentDirective: [{ type: ContentChild, args: [FEPageHeaderContentDirective,] }],
    hExtendDirective: [{ type: ContentChild, args: [FEPageHeaderDownDirective,] }],
    hTitleDirective: [{ type: ContentChild, args: [FEPageHeaderTitleDirective,] }],
    toolbarBtnDisable: [{ type: Input }],
    toolbarBtnVisible: [{ type: Input }],
    pgPreClickEvent: [{ type: Output }],
    pgNextClickEvent: [{ type: Output }],
    toolbarClickEvent: [{ type: Output }],
    viewChangeEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/page-safe-html.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://angular.io/guide/security
class FESafeHtmlPipe {
    /**
     * @param {?} _sanitizer
     */
    constructor(_sanitizer) {
        this._sanitizer = _sanitizer;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    transform(value) {
        return this._sanitizer.sanitize(SecurityContext.HTML, this._sanitizer.bypassSecurityTrustHtml(value));
    }
}
FESafeHtmlPipe.decorators = [
    { type: Pipe, args: [{ name: 'feSafeHtml' },] }
];
/** @nocollapse */
FESafeHtmlPipe.ctorParameters = () => [
    { type: DomSanitizer }
];

/**
 * @fileoverview added by tsickle
 * Generated from: lib/extend-header-footer.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FEHeaderFooterModule {
}
FEHeaderFooterModule.decorators = [
    { type: NgModule, args: [{
                declarations: [FEModalFooterComponent, FEPageHeaderComponent, FESafeHtmlPipe, FEModalFooterUpDirective, FEModalFooterLeftDirective, FEModalFooterRightDirective, FEPageHeaderTitleDirective, FEPageHeaderContentDirective, FEPageHeaderDownDirective],
                imports: [
                    CommonModule,
                    FResponseToolbarModule,
                    ViewChangeModule
                ],
                exports: [FEModalFooterComponent, FEPageHeaderComponent, FEModalFooterUpDirective, FEModalFooterLeftDirective, FEModalFooterRightDirective, FEPageHeaderTitleDirective, FEPageHeaderContentDirective, FEPageHeaderDownDirective]
            },] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-extend-header-footer.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { FEPageHeaderContentDirective, FEPageHeaderDownDirective, FEPageHeaderTitleDirective, FEModalFooterUpDirective, FEModalFooterLeftDirective, FEModalFooterRightDirective, FEHeaderFooterModule, FESafeHtmlPipe, FEModalFooterComponent, FEPageHeaderComponent };

//# sourceMappingURL=farris-extend-header-footer.js.map