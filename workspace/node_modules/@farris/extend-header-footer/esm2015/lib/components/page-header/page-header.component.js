/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/page-header/page-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ContentChild } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { FEPageHeaderDefault } from '../../models/page-header.model';
import { FEPageHeaderContentDirective, FEPageHeaderDownDirective, FEPageHeaderTitleDirective } from '../../directives/index';
import { FExtendUtils } from '../../models/utils';
export class FEPageHeaderComponent {
    constructor() {
        this._settings = Object.assign({}, FEPageHeaderDefault);
        this.realToolbarDatas = [];
        // 展示类型
        this.showType = "modal";
        this.btnDisable = new Subject();
        this.btnVisible = new Subject();
        // 事件
        this.pgPreClickEvent = new EventEmitter();
        this.pgNextClickEvent = new EventEmitter();
        this.toolbarClickEvent = new EventEmitter();
        this.viewChangeEvent = new EventEmitter();
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    set options(settings) {
        if (settings) {
            this._settings = Object.assign({}, FEPageHeaderDefault, settings);
            this.realToolbarDatas = this._settings['toolbarDatas'];
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._settings;
    }
    // 按钮的禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnDisable(values) {
        this.btnDisable = values;
    }
    // 按钮的查看状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnVisible(values) {
        this.btnVisible = values;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 变化
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('toolbarAllDatas') || changes.hasOwnProperty('toolbarConfig') || changes.hasOwnProperty('showType')) {
            if (this.toolbarKey && this.toolbarConfig && this.toolbarAllDatas) {
                this.realToolbarDatas = [...FExtendUtils.formToolbarData(this.toolbarAllDatas, this.toolbarConfig, this.toolbarKey, this.showType)];
            }
        }
    }
    // 向上翻页
    /**
     * @param {?} ev
     * @return {?}
     */
    pgPreClickHandler(ev) {
        if (!this.options['pgPreDisabled']) {
            this.pgPreClickEvent.emit(ev);
        }
    }
    // 向下翻页
    /**
     * @param {?} ev
     * @return {?}
     */
    pgNextClickHandler(ev) {
        if (!this.options['pgNextDisabled']) {
            this.pgNextClickEvent.emit(ev);
        }
    }
    // 抛出事件
    /**
     * @param {?} ev
     * @return {?}
     */
    responseToolbarClickHandler(ev) {
        this.toolbarClickEvent.emit(ev);
    }
    // View改变
    /**
     * @param {?} ev
     * @return {?}
     */
    toolTypeChangeHandler(ev) {
        this.viewChangeEvent.emit(ev);
    }
}
FEPageHeaderComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-page-header',
                template: `
  <div class="f-page-header"  [ngClass]="'showtype-'+showType">
  <nav class="f-page-header-base">
      <ng-container *ngIf="hTitleDirective &&hTitleDirective.templateRef">
          <div class="f-title" [ngClass]="hTitleDirective.cls">
              <ng-template [ngTemplateOutlet]="hTitleDirective.templateRef"></ng-template>
          </div>
      </ng-container>
      <div class="f-title" *ngIf="!hTitleDirective">
          <span *ngIf="options['showIcon']" class="f-title-icon" [ngClass]="options['iconCls']">
              <i class="f-icon" [ngClass]="options['iconName']"></i>
          </span>
          <h4 class="f-title-text" [innerHTML]="options['mainTitle']|feSafeHtml"></h4>
          <h5 *ngIf="options['subTitle']" class="f-title-subtitle" [innerHTML]="options['subTitle']|feSafeHtml"></h5>
          <div *ngIf="options['status']" class="f-title-status" [innerHTML]="options['status']|feSafeHtml">
          </div>
          <div class="f-title-pagination" *ngIf="options['pgShow']">
              <span class="f-icon f-icon-arrow-w" [ngClass]="{'f-state-disabled':options['pgPreDisabled']}"
                  (click)="pgPreClickHandler($event)"></span>
              <span class="f-icon f-icon-arrow-e" [ngClass]="{'f-state-disabled':options['pgNextDisabled']}"
                  (click)="pgNextClickHandler($event)"></span>
          </div>
      </div>
      <ng-container *ngIf="hContentDirective &&hContentDirective.templateRef">
          <div class="f-content" [ngClass]="hContentDirective.cls">
              <ng-template [ngTemplateOutlet]="hContentDirective.templateRef"></ng-template>
          </div>
      </ng-container>
      <ng-container *ngIf="options['content']&&!hContentDirective" >
          <div class="f-content"  [innerHTML]="options['content']|feSafeHtml"></div>
      </ng-container>
      <ng-container *ngIf="realToolbarDatas.length>0">
          <f-response-toolbar class="f-toolbar ml-auto" [ngClass]="options['toolbarCls']" [datas]="realToolbarDatas"
          [btnState]="btnDisable" [btnVisible]="btnVisible"  [buttonSize]="options['toolbarBtnSize']=='default'?'':options['toolbarBtnSize']" [popDirection]="options['toolbarPopDirection']=='default'?'':options['toolbarPopDirection']"
              (rtClickEvent)="responseToolbarClickHandler($event)">
          </f-response-toolbar>
      </ng-container>
      <ng-container *ngIf="options['showViewChange']&&options['viewDatas'].length">
          <farris-view-change [toolbarData]="options['viewDatas']" class="f-btn-ml" [viewType]="options['viewType']"
              [defaultType]="options['viewDefaultType']" [viewGroupId]="options['viewGroupId']"
              (toolTypeChange)="toolTypeChangeHandler($event)"></farris-view-change>
      </ng-container>
  </nav>
  <ng-container *ngIf="hExtendDirective &&  hExtendDirective.templateRef">
      <div class="f-content" [ngClass]="hExtendDirective.cls">
          <ng-template [ngTemplateOutlet]="hExtendDirective.templateRef"></ng-template>
      </div>
  </ng-container>
  <div class="f-page-header-extend" *ngIf="options['extend']&&!hExtendDirective"  [innerHTML]="options['extend']|feSafeHtml">
  </div>
</div>
  `
            }] }
];
/** @nocollapse */
FEPageHeaderComponent.ctorParameters = () => [];
FEPageHeaderComponent.propDecorators = {
    options: [{ type: Input }],
    toolbarAllDatas: [{ type: Input }],
    toolbarConfig: [{ type: Input }],
    toolbarKey: [{ type: Input }],
    showType: [{ type: Input }],
    hContentDirective: [{ type: ContentChild, args: [FEPageHeaderContentDirective,] }],
    hExtendDirective: [{ type: ContentChild, args: [FEPageHeaderDownDirective,] }],
    hTitleDirective: [{ type: ContentChild, args: [FEPageHeaderTitleDirective,] }],
    toolbarBtnDisable: [{ type: Input }],
    toolbarBtnVisible: [{ type: Input }],
    pgPreClickEvent: [{ type: Output }],
    pgNextClickEvent: [{ type: Output }],
    toolbarClickEvent: [{ type: Output }],
    viewChangeEvent: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    FEPageHeaderComponent.prototype._settings;
    /** @type {?} */
    FEPageHeaderComponent.prototype.realToolbarDatas;
    /** @type {?} */
    FEPageHeaderComponent.prototype.toolbarAllDatas;
    /** @type {?} */
    FEPageHeaderComponent.prototype.toolbarConfig;
    /** @type {?} */
    FEPageHeaderComponent.prototype.toolbarKey;
    /** @type {?} */
    FEPageHeaderComponent.prototype.showType;
    /** @type {?} */
    FEPageHeaderComponent.prototype.hContentDirective;
    /** @type {?} */
    FEPageHeaderComponent.prototype.hExtendDirective;
    /** @type {?} */
    FEPageHeaderComponent.prototype.hTitleDirective;
    /** @type {?} */
    FEPageHeaderComponent.prototype.btnDisable;
    /** @type {?} */
    FEPageHeaderComponent.prototype.btnVisible;
    /** @type {?} */
    FEPageHeaderComponent.prototype.pgPreClickEvent;
    /** @type {?} */
    FEPageHeaderComponent.prototype.pgNextClickEvent;
    /** @type {?} */
    FEPageHeaderComponent.prototype.toolbarClickEvent;
    /** @type {?} */
    FEPageHeaderComponent.prototype.viewChangeEvent;
}
//# sourceMappingURL=data:application/json;base64,