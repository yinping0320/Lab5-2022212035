/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/modal-footer/modal-footer.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ContentChild, HostBinding, Output, EventEmitter } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { FEModalFooterDefault } from '../../models/modal-footer.model';
import { FEModalFooterUpDirective, FEModalFooterLeftDirective, FEModalFooterRightDirective } from '../../directives/index';
import { FExtendUtils } from '../../models/utils';
export class FEModalFooterComponent {
    constructor() {
        // 设置默认样式
        this.cls = true;
        this.realToolbarDatas = [];
        this._settings = Object.assign({}, FEModalFooterDefault);
        // 展示类型 modal 窗口，sidebar，空是 普通,
        this.showType = "modal";
        this.toolbarClickEvent = new EventEmitter();
        this.btnDisable = new Subject();
        this.btnVisible = new Subject();
    }
    /**
     * @param {?} settings
     * @return {?}
     */
    set options(settings) {
        if (settings) {
            this._settings = Object.assign({}, FEModalFooterDefault, settings);
            this.realToolbarDatas = this._settings['toolbarDatas'];
        }
    }
    /**
     * @return {?}
     */
    get options() {
        return this._settings;
    }
    // 按钮的禁用状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnDisable(values) {
        this.btnDisable = values;
    }
    // 按钮的查看状态
    /**
     * @param {?} values
     * @return {?}
     */
    set toolbarBtnVisible(values) {
        this.btnVisible = values;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    // 变化
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.hasOwnProperty('toolbarAllDatas') || changes.hasOwnProperty('toolbarConfig') || changes.hasOwnProperty('showType')) {
            if (this.toolbarKey && this.toolbarConfig && this.toolbarAllDatas) {
                this.realToolbarDatas = [...FExtendUtils.formToolbarData(this.toolbarAllDatas, this.toolbarConfig, this.toolbarKey, this.showType)];
            }
        }
    }
    // 抛出事件
    /**
     * @param {?} ev
     * @return {?}
     */
    responseToolbarClickHandler(ev) {
        this.toolbarClickEvent.emit(ev);
    }
    // 显示内容
    /**
     * @return {?}
     */
    isFooterShow() {
        if (this.mfExtendDirective || this.mfLeftDirective || this.options['extendLeft'] || this.realToolbarDatas.length > 0 || this.mfRightDirective || this.options['extendRight']) {
            return true;
        }
        return false;
    }
}
FEModalFooterComponent.decorators = [
    { type: Component, args: [{
                selector: 'fe-modal-footer',
                template: `
   <div class="fe-modal-footer-wrapper" [ngClass]="'showtype-'+showType" *ngIf="isFooterShow()">
    <ng-container *ngIf="mfExtendDirective&&mfExtendDirective.templateRef">
      <div class="f-top"  [ngClass]="mfExtendDirective.cls">
        <ng-template [ngTemplateOutlet]="mfExtendDirective.templateRef"></ng-template>
      </div>
    </ng-container>
    <div class="fe-modal-footer-base no-gutters">
      <ng-container *ngIf="mfLeftDirective&&mfLeftDirective.templateRef">
          <div class="f-left"  [ngClass]="mfLeftDirective.cls">
            <ng-template [ngTemplateOutlet]="mfLeftDirective.templateRef"></ng-template>
          </div>
      </ng-container> 
      <div class="f-left" *ngIf="!mfLeftDirective&&options['extendLeft']"  [innerHTML]="options['extendLeft']|feSafeHtml">
      </div>
      <ng-container *ngIf="realToolbarDatas.length>0">
          <f-response-toolbar class="f-toolbar ml-auto" [ngClass]="options['toolbarCls']" [datas]="realToolbarDatas"
              [btnState]="btnDisable" [btnVisible]="btnVisible" [buttonSize]="options['toolbarBtnSize']"
              (rtClickEvent)="responseToolbarClickHandler($event)" [popDirection]="options['toolbarPopDirection']">
          </f-response-toolbar>
      </ng-container>
      <ng-container *ngIf="mfRightDirective&&mfRightDirective.templateRef">
          <div class="f-right"  [ngClass]="mfRightDirective.cls">
            <ng-template [ngTemplateOutlet]="mfRightDirective.templateRef"></ng-template>
          </div>
      </ng-container> 
      <div class="f-right" *ngIf="!mfRightDirective&&options['extendRight']"  [innerHTML]="options['extendRight']|feSafeHtml">
      </div>
    </div>   
   </div>
  `,
                styles: [""]
            }] }
];
/** @nocollapse */
FEModalFooterComponent.ctorParameters = () => [];
FEModalFooterComponent.propDecorators = {
    cls: [{ type: HostBinding, args: ['class.fe-cmp-modal-footer',] }],
    options: [{ type: Input }],
    toolbarAllDatas: [{ type: Input }],
    toolbarConfig: [{ type: Input }],
    toolbarKey: [{ type: Input }],
    showType: [{ type: Input }],
    mfExtendDirective: [{ type: ContentChild, args: [FEModalFooterUpDirective,] }],
    mfLeftDirective: [{ type: ContentChild, args: [FEModalFooterLeftDirective,] }],
    mfRightDirective: [{ type: ContentChild, args: [FEModalFooterRightDirective,] }],
    toolbarClickEvent: [{ type: Output }],
    toolbarBtnDisable: [{ type: Input }],
    toolbarBtnVisible: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    FEModalFooterComponent.prototype.cls;
    /** @type {?} */
    FEModalFooterComponent.prototype.realToolbarDatas;
    /**
     * @type {?}
     * @private
     */
    FEModalFooterComponent.prototype._settings;
    /** @type {?} */
    FEModalFooterComponent.prototype.toolbarAllDatas;
    /** @type {?} */
    FEModalFooterComponent.prototype.toolbarConfig;
    /** @type {?} */
    FEModalFooterComponent.prototype.toolbarKey;
    /** @type {?} */
    FEModalFooterComponent.prototype.showType;
    /** @type {?} */
    FEModalFooterComponent.prototype.mfExtendDirective;
    /** @type {?} */
    FEModalFooterComponent.prototype.mfLeftDirective;
    /** @type {?} */
    FEModalFooterComponent.prototype.mfRightDirective;
    /** @type {?} */
    FEModalFooterComponent.prototype.toolbarClickEvent;
    /** @type {?} */
    FEModalFooterComponent.prototype.btnDisable;
    /** @type {?} */
    FEModalFooterComponent.prototype.btnVisible;
}
//# sourceMappingURL=data:application/json;base64,