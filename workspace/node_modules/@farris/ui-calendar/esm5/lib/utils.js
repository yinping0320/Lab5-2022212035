/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var hasOwnProperty = Object.prototype.hasOwnProperty;
/** @type {?} */
var isArray = Array.isArray;
/** @type {?} */
var keyList = Object.keys;
/** @type {?} */
var hasProp = Object.prototype.hasOwnProperty;
/*
Really simple clone utility. Only copies plain arrays, objects, and Dates. Transfers everything else as-is.
Wanted to use a third-party lib, but none did exactly this.
*/
/**
 * @param {?} input
 * @return {?}
 */
export function deepCopy(input) {
    if (Array.isArray(input)) {
        return input.map(deepCopy);
    }
    else if (input instanceof Date) {
        return new Date(input.valueOf());
    }
    else if (typeof input === 'object' && input) {
        // non-null object
        return mapHash(input, deepCopy);
    }
    else {
        // everything else (null, function, etc)
        return input;
    }
}
/**
 * @param {?} input
 * @param {?} func
 * @return {?}
 */
function mapHash(input, func) {
    /** @type {?} */
    var output = {};
    for (var key in input) {
        if (hasOwnProperty.call(input, key)) {
            output[key] = func(input[key], key);
        }
    }
    return output;
}
/**
 * @param {?} a
 * @param {?} b
 * @return {?}
 */
export function deepEqual(a, b) {
    if (a === b) {
        return true;
    }
    // tslint:disable-next-line: triple-equals
    if (a && b && typeof a == 'object' && typeof b == 'object') {
        /** @type {?} */
        var arrA = isArray(a);
        /** @type {?} */
        var arrB = isArray(b);
        /** @type {?} */
        var i = void 0;
        /** @type {?} */
        var length_1;
        /** @type {?} */
        var key = void 0;
        if (arrA && arrB) {
            length_1 = a.length;
            // tslint:disable-next-line: triple-equals
            if (length_1 != b.length) {
                return false;
            }
            for (i = length_1; i-- !== 0;) {
                if (!deepEqual(a[i], b[i])) {
                    return false;
                }
            }
            return true;
        }
        // tslint:disable-next-line: triple-equals
        if (arrA != arrB) {
            return false;
        }
        /** @type {?} */
        var dateA = a instanceof Date;
        /** @type {?} */
        var dateB = b instanceof Date;
        // tslint:disable-next-line: triple-equals
        if (dateA != dateB) {
            return false;
        }
        if (dateA && dateB) {
            // tslint:disable-next-line: triple-equals
            return a.getTime() == b.getTime();
        }
        /** @type {?} */
        var regexpA = a instanceof RegExp;
        /** @type {?} */
        var regexpB = b instanceof RegExp;
        // tslint:disable-next-line: triple-equals
        if (regexpA != regexpB) {
            return false;
        }
        if (regexpA && regexpB) {
            // tslint:disable-next-line: triple-equals
            return a.toString() == b.toString();
        }
        /** @type {?} */
        var keys = keyList(a);
        length_1 = keys.length;
        if (length_1 !== keyList(b).length) {
            return false;
        }
        for (i = length_1; i-- !== 0;) {
            if (!hasProp.call(b, keys[i])) {
                return false;
            }
        }
        for (i = length_1; i-- !== 0;) {
            key = keys[i];
            if (!deepEqual(a[key], b[key])) {
                return false;
            }
        }
        return true;
    }
    return a !== a && b !== b;
}
//# sourceMappingURL=data:application/json;base64,