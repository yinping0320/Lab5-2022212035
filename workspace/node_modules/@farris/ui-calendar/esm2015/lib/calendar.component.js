/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// import deepEqual from 'fast-deep-equal';
import { deepCopy, deepEqual } from "./utils";
import { Component, ElementRef, Input, Output, EventEmitter, ViewEncapsulation, ChangeDetectionStrategy, Injector } from "@angular/core";
import { Calendar } from "@fullcalendar/core";
import { INPUT_NAMES, INPUT_IS_DEEP, OUTPUT_NAMES } from "./calendar-options";
import { DefaultConfigService } from "./calendar.config.service";
import { Observable } from "rxjs";
import { FarrisComponentInstanceService } from '@farris/ui-common';
export class CalendarComponent {
    /**
     * @param {?} element
     * @param {?} configService
     * @param {?} injector
     */
    constructor(element, configService, injector) {
        this.element = element;
        this.configService = configService;
        this.injector = injector;
        // Determines what happens upon a day heading nav-link click.
        this.navLinkDayClick = new EventEmitter(); // ?: string | ((date: Date, jsEvent: Event) => void);
        // ?: string | ((date: Date, jsEvent: Event) => void);
        this.windowResize = new EventEmitter();
        this.dateClick = new EventEmitter();
        // 编辑事件
        this.eventClick = new EventEmitter();
        this.eventMouseEnter = new EventEmitter();
        this.eventMouseLeave = new EventEmitter();
        this.select = new EventEmitter();
        this.unselect = new EventEmitter();
        this.loading = new EventEmitter();
        this.eventPositioned = new EventEmitter();
        this.eventDragStart = new EventEmitter();
        this.eventDragStop = new EventEmitter();
        // 拖动事件
        this.eventDrop = new EventEmitter();
        this.eventResizeStart = new EventEmitter();
        this.eventResizeStop = new EventEmitter();
        this.eventResize = new EventEmitter();
        this.drop = new EventEmitter();
        this.eventReceive = new EventEmitter();
        this.eventLeave = new EventEmitter();
        // tslint:disable-next-line: variable-name
        this._destroyed = new EventEmitter();
        // TODO: make these inputs...
        this.viewSkeletonRender = new EventEmitter();
        this.viewSkeletonDestroy = new EventEmitter();
        this.datesRender = new EventEmitter();
        this.datesDestroy = new EventEmitter();
        this.dayRender = new EventEmitter();
        this.eventRender = new EventEmitter();
        this.eventDestroy = new EventEmitter();
        this.resourceRender = new EventEmitter();
        this.dirtyProps = {};
        this.deepCopies = {}; // holds frozen states
        this.farrisInstances = null;
        this.farrisInstances = this.injector.get(FarrisComponentInstanceService, null);
    }
    // 日程数据
    /**
     * @param {?} e
     * @return {?}
     */
    set events(e) {
        if (e instanceof Observable) {
            e.subscribe((/**
             * @param {?} val
             * @return {?}
             */
            (val) => {
                this._events = val;
            }));
        }
        else {
            this._events = e;
        }
    }
    /**
     * @return {?}
     */
    get events() {
        return this._events;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.calendar = new Calendar(this.element.nativeElement, Object.assign({}, this.configService.getDefaultConfig(), this.buildOptions()));
        this.calendar.render();
        if (this.element && this.farrisInstances) {
            this.farrisInstances.add(this.element.nativeElement, this);
        }
    }
    /**
     * @private
     * @return {?}
     */
    buildOptions() {
        /** @type {?} */
        const options = {};
        OUTPUT_NAMES.forEach((/**
         * @param {?} outputName
         * @return {?}
         */
        outputName => {
            options[outputName] = (/**
             * @param {...?} args
             * @return {?}
             */
            (...args) => {
                this[outputName].emit(...args);
            });
        }));
        // do after outputs, so that inputs with same name override
        INPUT_NAMES.forEach((/**
         * @param {?} inputName
         * @return {?}
         */
        inputName => {
            /** @type {?} */
            let inputVal = this[inputName];
            if (inputVal !== undefined) {
                // unfortunately FC chokes when some props are set to undefined
                if (inputName === "header") {
                    inputVal = Object.assign({}, this.configService.getDefaultConfig().header, inputVal);
                }
                if (this.deepChangeDetection && INPUT_IS_DEEP[inputName]) {
                    inputVal = deepCopy(inputVal);
                    this.deepCopies[inputName] = inputVal; // side effect!
                }
                options[inputName] = inputVal;
            }
        }));
        return options;
    }
    /*
      called before ngOnChanges, allows us to manually detect input changes.
      called much more often than ngOnChanges.
      */
    /**
     * @return {?}
     */
    ngDoCheck() {
        if (this.calendar && this.deepChangeDetection) {
            // not the initial render AND we do deep-mutation checks
            const { deepCopies } = this;
            for (const inputName in INPUT_IS_DEEP) {
                if (INPUT_IS_DEEP.hasOwnProperty(inputName)) {
                    /** @type {?} */
                    let inputVal = this[inputName];
                    if (inputVal !== undefined) {
                        // unfortunately FC chokes when some props are set to undefined
                        if (!deepEqual(inputVal, deepCopies[inputName])) {
                            /** @type {?} */
                            const copy = deepCopy(inputVal);
                            deepCopies[inputName] = copy;
                            this.dirtyProps[inputName] = copy;
                        }
                    }
                }
            }
        }
    }
    /*
            called with confirmed changes to input references
        */
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.calendar) {
            // not the initial render
            for (const inputName in changes) {
                if (changes.hasOwnProperty(inputName)) {
                    if (this.deepCopies[inputName] === undefined) {
                        // not already handled in ngDoCheck
                        // this.dirtyProps[inputName] =
                        //     changes[inputName].currentValue;
                        if (changes[inputName].currentValue instanceof
                            Observable) {
                            changes[inputName].currentValue.subscribe((/**
                             * @param {?} val
                             * @return {?}
                             */
                            (val) => {
                                this.dirtyProps[inputName] = val;
                            }));
                        }
                        else {
                            this.dirtyProps[inputName] =
                                changes[inputName].currentValue;
                        }
                    }
                }
            }
        }
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        const { dirtyProps } = this;
        if (Object.keys(dirtyProps).length > 0) {
            this.dirtyProps = {}; // clear first, in case the rerender causes new dirtiness
            this.calendar.mutateOptions(dirtyProps, [], false, deepEqual);
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.calendar) {
            this.calendar.destroy();
        }
        this.calendar = null;
    }
    /**
     * @return {?}
     */
    getApi() {
        return this.calendar;
    }
    /**
     * @return {?}
     */
    render() {
        this.calendar.render();
    }
}
CalendarComponent.decorators = [
    { type: Component, args: [{
                // tslint:disable-next-line: component-selector
                selector: "farris-calendar",
                template: "",
                changeDetection: ChangeDetectionStrategy.OnPush,
                encapsulation: ViewEncapsulation.None,
                styles: [""]
            }] }
];
/** @nocollapse */
CalendarComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: DefaultConfigService },
    { type: Injector }
];
CalendarComponent.propDecorators = {
    deepChangeDetection: [{ type: Input }],
    header: [{ type: Input }],
    footer: [{ type: Input }],
    customButtons: [{ type: Input }],
    buttonIcons: [{ type: Input }],
    themeSystem: [{ type: Input }],
    bootstrapFontAwesome: [{ type: Input }],
    firstDay: [{ type: Input }],
    dir: [{ type: Input }],
    weekends: [{ type: Input }],
    hiddenDays: [{ type: Input }],
    fixedWeekCount: [{ type: Input }],
    weekNumbers: [{ type: Input }],
    weekNumbersWithinDays: [{ type: Input }],
    weekNumberCalculation: [{ type: Input }],
    businessHours: [{ type: Input }],
    showNonCurrentDates: [{ type: Input }],
    height: [{ type: Input }],
    contentHeight: [{ type: Input }],
    aspectRatio: [{ type: Input }],
    handleWindowResize: [{ type: Input }],
    windowResizeDelay: [{ type: Input }],
    eventLimit: [{ type: Input }],
    eventLimitClick: [{ type: Input }],
    timeZone: [{ type: Input }],
    now: [{ type: Input }],
    defaultView: [{ type: Input }],
    allDaySlot: [{ type: Input }],
    allDayText: [{ type: Input }],
    slotDuration: [{ type: Input }],
    slotLabelFormat: [{ type: Input }],
    slotLabelInterval: [{ type: Input }],
    snapDuration: [{ type: Input }],
    scrollTime: [{ type: Input }],
    minTime: [{ type: Input }],
    maxTime: [{ type: Input }],
    slotEventOverlap: [{ type: Input }],
    listDayFormat: [{ type: Input }],
    listDayAltFormat: [{ type: Input }],
    noEventsMessage: [{ type: Input }],
    defaultDate: [{ type: Input }],
    nowIndicator: [{ type: Input }],
    visibleRange: [{ type: Input }],
    validRange: [{ type: Input }],
    dateIncrement: [{ type: Input }],
    dateAlignment: [{ type: Input }],
    duration: [{ type: Input }],
    dayCount: [{ type: Input }],
    locales: [{ type: Input }],
    locale: [{ type: Input }],
    eventTimeFormat: [{ type: Input }],
    columnHeader: [{ type: Input }],
    columnHeaderFormat: [{ type: Input }],
    columnHeaderText: [{ type: Input }],
    columnHeaderHtml: [{ type: Input }],
    titleFormat: [{ type: Input }],
    weekLabel: [{ type: Input }],
    displayEventTime: [{ type: Input }],
    displayEventEnd: [{ type: Input }],
    eventLimitText: [{ type: Input }],
    dayPopoverFormat: [{ type: Input }],
    navLinks: [{ type: Input }],
    navLinkWeekClick: [{ type: Input }],
    selectable: [{ type: Input }],
    selectMirror: [{ type: Input }],
    unselectAuto: [{ type: Input }],
    unselectCancel: [{ type: Input }],
    defaultAllDayEventDuration: [{ type: Input }],
    defaultTimedEventDuration: [{ type: Input }],
    cmdFormatter: [{ type: Input }],
    defaultRangeSeparator: [{ type: Input }],
    selectConstraint: [{ type: Input }],
    selectOverlap: [{ type: Input }],
    selectAllow: [{ type: Input }],
    selectMinDistance: [{ type: Input }],
    editable: [{ type: Input }],
    eventStartEditable: [{ type: Input }],
    eventDurationEditable: [{ type: Input }],
    eventConstraint: [{ type: Input }],
    eventOverlap: [{ type: Input }],
    eventAllow: [{ type: Input }],
    eventClassName: [{ type: Input }],
    eventClassNames: [{ type: Input }],
    eventBackgroundColor: [{ type: Input }],
    eventBorderColor: [{ type: Input }],
    eventTextColor: [{ type: Input }],
    eventColor: [{ type: Input }],
    events: [{ type: Input }],
    eventSources: [{ type: Input }],
    allDayDefault: [{ type: Input }],
    startParam: [{ type: Input }],
    endParam: [{ type: Input }],
    lazyFetching: [{ type: Input }],
    nextDayThreshold: [{ type: Input }],
    eventOrder: [{ type: Input }],
    rerenderDelay: [{ type: Input }],
    dragRevertDuration: [{ type: Input }],
    dragScroll: [{ type: Input }],
    longPressDelay: [{ type: Input }],
    eventLongPressDelay: [{ type: Input }],
    droppable: [{ type: Input }],
    dropAccept: [{ type: Input }],
    eventDataTransform: [{ type: Input }],
    allDayMaintainDuration: [{ type: Input }],
    eventResizableFromStart: [{ type: Input }],
    timeGridEventMinHeight: [{ type: Input }],
    allDayHtml: [{ type: Input }],
    eventDragMinDistance: [{ type: Input }],
    eventSourceFailure: [{ type: Input }],
    eventSourceSuccess: [{ type: Input }],
    forceEventDuration: [{ type: Input }],
    progressiveEventRendering: [{ type: Input }],
    selectLongPressDelay: [{ type: Input }],
    timeZoneParam: [{ type: Input }],
    titleRangeSeparator: [{ type: Input }],
    buttonText: [{ type: Input }],
    views: [{ type: Input }],
    plugins: [{ type: Input }],
    schedulerLicenseKey: [{ type: Input }],
    resources: [{ type: Input }],
    resourceLabelText: [{ type: Input }],
    resourceOrder: [{ type: Input }],
    filterResourcesWithEvents: [{ type: Input }],
    resourceText: [{ type: Input }],
    resourceGroupField: [{ type: Input }],
    resourceGroupText: [{ type: Input }],
    resourceAreaWidth: [{ type: Input }],
    resourceColumns: [{ type: Input }],
    resourcesInitiallyExpanded: [{ type: Input }],
    slotWidth: [{ type: Input }],
    datesAboveResources: [{ type: Input }],
    googleCalendarApiKey: [{ type: Input }],
    refetchResourcesOnNavigate: [{ type: Input }],
    eventResourceEditable: [{ type: Input }],
    navLinkDayClick: [{ type: Output }],
    windowResize: [{ type: Output }],
    dateClick: [{ type: Output }],
    eventClick: [{ type: Output }],
    eventMouseEnter: [{ type: Output }],
    eventMouseLeave: [{ type: Output }],
    select: [{ type: Output }],
    unselect: [{ type: Output }],
    loading: [{ type: Output }],
    eventPositioned: [{ type: Output }],
    eventDragStart: [{ type: Output }],
    eventDragStop: [{ type: Output }],
    eventDrop: [{ type: Output }],
    eventResizeStart: [{ type: Output }],
    eventResizeStop: [{ type: Output }],
    eventResize: [{ type: Output }],
    drop: [{ type: Output }],
    eventReceive: [{ type: Output }],
    eventLeave: [{ type: Output }],
    _destroyed: [{ type: Output }],
    viewSkeletonRender: [{ type: Output }],
    viewSkeletonDestroy: [{ type: Output }],
    datesRender: [{ type: Output }],
    datesDestroy: [{ type: Output }],
    dayRender: [{ type: Output }],
    eventRender: [{ type: Output }],
    eventDestroy: [{ type: Output }],
    resourceRender: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    CalendarComponent.prototype.deepChangeDetection;
    /** @type {?} */
    CalendarComponent.prototype.header;
    /** @type {?} */
    CalendarComponent.prototype.footer;
    /** @type {?} */
    CalendarComponent.prototype.customButtons;
    /** @type {?} */
    CalendarComponent.prototype.buttonIcons;
    /** @type {?} */
    CalendarComponent.prototype.themeSystem;
    /** @type {?} */
    CalendarComponent.prototype.bootstrapFontAwesome;
    /** @type {?} */
    CalendarComponent.prototype.firstDay;
    /** @type {?} */
    CalendarComponent.prototype.dir;
    /** @type {?} */
    CalendarComponent.prototype.weekends;
    /** @type {?} */
    CalendarComponent.prototype.hiddenDays;
    /** @type {?} */
    CalendarComponent.prototype.fixedWeekCount;
    /** @type {?} */
    CalendarComponent.prototype.weekNumbers;
    /** @type {?} */
    CalendarComponent.prototype.weekNumbersWithinDays;
    /** @type {?} */
    CalendarComponent.prototype.weekNumberCalculation;
    /** @type {?} */
    CalendarComponent.prototype.businessHours;
    /** @type {?} */
    CalendarComponent.prototype.showNonCurrentDates;
    /** @type {?} */
    CalendarComponent.prototype.height;
    /** @type {?} */
    CalendarComponent.prototype.contentHeight;
    /** @type {?} */
    CalendarComponent.prototype.aspectRatio;
    /** @type {?} */
    CalendarComponent.prototype.handleWindowResize;
    /** @type {?} */
    CalendarComponent.prototype.windowResizeDelay;
    /** @type {?} */
    CalendarComponent.prototype.eventLimit;
    /** @type {?} */
    CalendarComponent.prototype.eventLimitClick;
    /** @type {?} */
    CalendarComponent.prototype.timeZone;
    /** @type {?} */
    CalendarComponent.prototype.now;
    /** @type {?} */
    CalendarComponent.prototype.defaultView;
    /** @type {?} */
    CalendarComponent.prototype.allDaySlot;
    /** @type {?} */
    CalendarComponent.prototype.allDayText;
    /** @type {?} */
    CalendarComponent.prototype.slotDuration;
    /** @type {?} */
    CalendarComponent.prototype.slotLabelFormat;
    /** @type {?} */
    CalendarComponent.prototype.slotLabelInterval;
    /** @type {?} */
    CalendarComponent.prototype.snapDuration;
    /** @type {?} */
    CalendarComponent.prototype.scrollTime;
    /** @type {?} */
    CalendarComponent.prototype.minTime;
    /** @type {?} */
    CalendarComponent.prototype.maxTime;
    /** @type {?} */
    CalendarComponent.prototype.slotEventOverlap;
    /** @type {?} */
    CalendarComponent.prototype.listDayFormat;
    /** @type {?} */
    CalendarComponent.prototype.listDayAltFormat;
    /** @type {?} */
    CalendarComponent.prototype.noEventsMessage;
    /** @type {?} */
    CalendarComponent.prototype.defaultDate;
    /** @type {?} */
    CalendarComponent.prototype.nowIndicator;
    /** @type {?} */
    CalendarComponent.prototype.visibleRange;
    /** @type {?} */
    CalendarComponent.prototype.validRange;
    /** @type {?} */
    CalendarComponent.prototype.dateIncrement;
    /** @type {?} */
    CalendarComponent.prototype.dateAlignment;
    /** @type {?} */
    CalendarComponent.prototype.duration;
    /** @type {?} */
    CalendarComponent.prototype.dayCount;
    /** @type {?} */
    CalendarComponent.prototype.locales;
    /** @type {?} */
    CalendarComponent.prototype.locale;
    /** @type {?} */
    CalendarComponent.prototype.eventTimeFormat;
    /** @type {?} */
    CalendarComponent.prototype.columnHeader;
    /** @type {?} */
    CalendarComponent.prototype.columnHeaderFormat;
    /** @type {?} */
    CalendarComponent.prototype.columnHeaderText;
    /** @type {?} */
    CalendarComponent.prototype.columnHeaderHtml;
    /** @type {?} */
    CalendarComponent.prototype.titleFormat;
    /** @type {?} */
    CalendarComponent.prototype.weekLabel;
    /** @type {?} */
    CalendarComponent.prototype.displayEventTime;
    /** @type {?} */
    CalendarComponent.prototype.displayEventEnd;
    /** @type {?} */
    CalendarComponent.prototype.eventLimitText;
    /** @type {?} */
    CalendarComponent.prototype.dayPopoverFormat;
    /** @type {?} */
    CalendarComponent.prototype.navLinks;
    /** @type {?} */
    CalendarComponent.prototype.navLinkWeekClick;
    /** @type {?} */
    CalendarComponent.prototype.selectable;
    /** @type {?} */
    CalendarComponent.prototype.selectMirror;
    /** @type {?} */
    CalendarComponent.prototype.unselectAuto;
    /** @type {?} */
    CalendarComponent.prototype.unselectCancel;
    /** @type {?} */
    CalendarComponent.prototype.defaultAllDayEventDuration;
    /** @type {?} */
    CalendarComponent.prototype.defaultTimedEventDuration;
    /** @type {?} */
    CalendarComponent.prototype.cmdFormatter;
    /** @type {?} */
    CalendarComponent.prototype.defaultRangeSeparator;
    /** @type {?} */
    CalendarComponent.prototype.selectConstraint;
    /** @type {?} */
    CalendarComponent.prototype.selectOverlap;
    /** @type {?} */
    CalendarComponent.prototype.selectAllow;
    /** @type {?} */
    CalendarComponent.prototype.selectMinDistance;
    /** @type {?} */
    CalendarComponent.prototype.editable;
    /** @type {?} */
    CalendarComponent.prototype.eventStartEditable;
    /** @type {?} */
    CalendarComponent.prototype.eventDurationEditable;
    /** @type {?} */
    CalendarComponent.prototype.eventConstraint;
    /** @type {?} */
    CalendarComponent.prototype.eventOverlap;
    /** @type {?} */
    CalendarComponent.prototype.eventAllow;
    /** @type {?} */
    CalendarComponent.prototype.eventClassName;
    /** @type {?} */
    CalendarComponent.prototype.eventClassNames;
    /** @type {?} */
    CalendarComponent.prototype.eventBackgroundColor;
    /** @type {?} */
    CalendarComponent.prototype.eventBorderColor;
    /** @type {?} */
    CalendarComponent.prototype.eventTextColor;
    /** @type {?} */
    CalendarComponent.prototype.eventColor;
    /** @type {?} */
    CalendarComponent.prototype.eventSources;
    /** @type {?} */
    CalendarComponent.prototype.allDayDefault;
    /** @type {?} */
    CalendarComponent.prototype.startParam;
    /** @type {?} */
    CalendarComponent.prototype.endParam;
    /** @type {?} */
    CalendarComponent.prototype.lazyFetching;
    /** @type {?} */
    CalendarComponent.prototype.nextDayThreshold;
    /** @type {?} */
    CalendarComponent.prototype.eventOrder;
    /** @type {?} */
    CalendarComponent.prototype.rerenderDelay;
    /** @type {?} */
    CalendarComponent.prototype.dragRevertDuration;
    /** @type {?} */
    CalendarComponent.prototype.dragScroll;
    /** @type {?} */
    CalendarComponent.prototype.longPressDelay;
    /** @type {?} */
    CalendarComponent.prototype.eventLongPressDelay;
    /** @type {?} */
    CalendarComponent.prototype.droppable;
    /** @type {?} */
    CalendarComponent.prototype.dropAccept;
    /** @type {?} */
    CalendarComponent.prototype.eventDataTransform;
    /** @type {?} */
    CalendarComponent.prototype.allDayMaintainDuration;
    /** @type {?} */
    CalendarComponent.prototype.eventResizableFromStart;
    /** @type {?} */
    CalendarComponent.prototype.timeGridEventMinHeight;
    /** @type {?} */
    CalendarComponent.prototype.allDayHtml;
    /** @type {?} */
    CalendarComponent.prototype.eventDragMinDistance;
    /** @type {?} */
    CalendarComponent.prototype.eventSourceFailure;
    /** @type {?} */
    CalendarComponent.prototype.eventSourceSuccess;
    /** @type {?} */
    CalendarComponent.prototype.forceEventDuration;
    /** @type {?} */
    CalendarComponent.prototype.progressiveEventRendering;
    /** @type {?} */
    CalendarComponent.prototype.selectLongPressDelay;
    /** @type {?} */
    CalendarComponent.prototype.timeZoneParam;
    /** @type {?} */
    CalendarComponent.prototype.titleRangeSeparator;
    /** @type {?} */
    CalendarComponent.prototype.buttonText;
    /** @type {?} */
    CalendarComponent.prototype.views;
    /** @type {?} */
    CalendarComponent.prototype.plugins;
    /** @type {?} */
    CalendarComponent.prototype.schedulerLicenseKey;
    /** @type {?} */
    CalendarComponent.prototype.resources;
    /** @type {?} */
    CalendarComponent.prototype.resourceLabelText;
    /** @type {?} */
    CalendarComponent.prototype.resourceOrder;
    /** @type {?} */
    CalendarComponent.prototype.filterResourcesWithEvents;
    /** @type {?} */
    CalendarComponent.prototype.resourceText;
    /** @type {?} */
    CalendarComponent.prototype.resourceGroupField;
    /** @type {?} */
    CalendarComponent.prototype.resourceGroupText;
    /** @type {?} */
    CalendarComponent.prototype.resourceAreaWidth;
    /** @type {?} */
    CalendarComponent.prototype.resourceColumns;
    /** @type {?} */
    CalendarComponent.prototype.resourcesInitiallyExpanded;
    /** @type {?} */
    CalendarComponent.prototype.slotWidth;
    /** @type {?} */
    CalendarComponent.prototype.datesAboveResources;
    /** @type {?} */
    CalendarComponent.prototype.googleCalendarApiKey;
    /** @type {?} */
    CalendarComponent.prototype.refetchResourcesOnNavigate;
    /** @type {?} */
    CalendarComponent.prototype.eventResourceEditable;
    /** @type {?} */
    CalendarComponent.prototype.navLinkDayClick;
    /** @type {?} */
    CalendarComponent.prototype.windowResize;
    /** @type {?} */
    CalendarComponent.prototype.dateClick;
    /** @type {?} */
    CalendarComponent.prototype.eventClick;
    /** @type {?} */
    CalendarComponent.prototype.eventMouseEnter;
    /** @type {?} */
    CalendarComponent.prototype.eventMouseLeave;
    /** @type {?} */
    CalendarComponent.prototype.select;
    /** @type {?} */
    CalendarComponent.prototype.unselect;
    /** @type {?} */
    CalendarComponent.prototype.loading;
    /** @type {?} */
    CalendarComponent.prototype.eventPositioned;
    /** @type {?} */
    CalendarComponent.prototype.eventDragStart;
    /** @type {?} */
    CalendarComponent.prototype.eventDragStop;
    /** @type {?} */
    CalendarComponent.prototype.eventDrop;
    /** @type {?} */
    CalendarComponent.prototype.eventResizeStart;
    /** @type {?} */
    CalendarComponent.prototype.eventResizeStop;
    /** @type {?} */
    CalendarComponent.prototype.eventResize;
    /** @type {?} */
    CalendarComponent.prototype.drop;
    /** @type {?} */
    CalendarComponent.prototype.eventReceive;
    /** @type {?} */
    CalendarComponent.prototype.eventLeave;
    /** @type {?} */
    CalendarComponent.prototype._destroyed;
    /** @type {?} */
    CalendarComponent.prototype.viewSkeletonRender;
    /** @type {?} */
    CalendarComponent.prototype.viewSkeletonDestroy;
    /** @type {?} */
    CalendarComponent.prototype.datesRender;
    /** @type {?} */
    CalendarComponent.prototype.datesDestroy;
    /** @type {?} */
    CalendarComponent.prototype.dayRender;
    /** @type {?} */
    CalendarComponent.prototype.eventRender;
    /** @type {?} */
    CalendarComponent.prototype.eventDestroy;
    /** @type {?} */
    CalendarComponent.prototype.resourceRender;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.calendar;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.dirtyProps;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.deepCopies;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype._events;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.farrisInstances;
    /** @type {?} */
    CalendarComponent.prototype.element;
    /**
     * @type {?}
     * @private
     */
    CalendarComponent.prototype.configService;
    /** @type {?} */
    CalendarComponent.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,