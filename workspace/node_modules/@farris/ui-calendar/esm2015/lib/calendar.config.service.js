/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import dayGridPlugin from '@fullcalendar/daygrid';
import timeGrigPlugin from '@fullcalendar/timegrid';
import interactionPlugin from '@fullcalendar/interaction';
import { CalendarLocaleService } from './calendar.locale.service';
import * as i0 from "@angular/core";
import * as i1 from "./calendar.locale.service";
export class DefaultConfigService {
    /**
     * @param {?} localeService
     */
    constructor(localeService) {
        this.localeService = localeService;
        this.defaultConfig = {
            header: {
                left: 'prevYear,prev,next,nextYear today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
            },
            navLinks: true,
            // can click day/week names to navigate views
            editable: true,
            selectable: true,
            defaultView: 'dayGridMonth',
            eventLimit: true,
            // allow "more" link when too many events
            plugins: [dayGridPlugin, timeGrigPlugin, interactionPlugin]
        };
    }
    /**
     * @return {?}
     */
    getDefaultConfig() {
        return Object.assign(this.defaultConfig, this.localeService.getLocaleConfig());
        // return this.defaultConfig;
    }
}
DefaultConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
DefaultConfigService.ctorParameters = () => [
    { type: CalendarLocaleService }
];
/** @nocollapse */ DefaultConfigService.ngInjectableDef = i0.defineInjectable({ factory: function DefaultConfigService_Factory() { return new DefaultConfigService(i0.inject(i1.CalendarLocaleService)); }, token: DefaultConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    DefaultConfigService.prototype.defaultConfig;
    /**
     * @type {?}
     * @private
     */
    DefaultConfigService.prototype.localeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLWNhbGVuZGFyLyIsInNvdXJjZXMiOlsibGliL2NhbGVuZGFyLmNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sYUFBYSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sY0FBYyxNQUFNLHdCQUF3QixDQUFDO0FBQ3BELE9BQU8saUJBQWlCLE1BQU0sMkJBQTJCLENBQUM7QUFDMUQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7OztBQUloRSxNQUFNLE9BQU8sb0JBQW9COzs7O0lBQzdCLFlBQW9CLGFBQW9DO1FBQXBDLGtCQUFhLEdBQWIsYUFBYSxDQUF1QjtRQUNoRCxrQkFBYSxHQUFpQjtZQUNsQyxNQUFNLEVBQUU7Z0JBQ0osSUFBSSxFQUFFLG1DQUFtQztnQkFDekMsTUFBTSxFQUFFLE9BQU87Z0JBQ2YsS0FBSyxFQUFFLGdEQUFnRDthQUMxRDtZQUNELFFBQVEsRUFBRSxJQUFJOztZQUNkLFFBQVEsRUFBRSxJQUFJO1lBQ2QsVUFBVSxFQUFFLElBQUk7WUFDaEIsV0FBVyxFQUFFLGNBQWM7WUFDM0IsVUFBVSxFQUFFLElBQUk7O1lBQ2hCLE9BQU8sRUFBRSxDQUFDLGFBQWEsRUFBRSxjQUFjLEVBQUUsaUJBQWlCLENBQUM7U0FDOUQsQ0FBQztJQWJ5RCxDQUFDOzs7O0lBY3JELGdCQUFnQjtRQUNuQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBQUM7UUFDL0UsNkJBQTZCO0lBQ2pDLENBQUM7OztZQXJCSixVQUFVLFNBQUM7Z0JBQ1IsVUFBVSxFQUFFLE1BQU07YUFDckI7Ozs7WUFITyxxQkFBcUI7Ozs7Ozs7O0lBTXpCLDZDQVlFOzs7OztJQWJVLDZDQUE0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT3B0aW9uc0lucHV0IH0gZnJvbSAnQGZ1bGxjYWxlbmRhci9jb3JlJztcclxuaW1wb3J0IGRheUdyaWRQbHVnaW4gZnJvbSAnQGZ1bGxjYWxlbmRhci9kYXlncmlkJztcclxuaW1wb3J0IHRpbWVHcmlnUGx1Z2luIGZyb20gJ0BmdWxsY2FsZW5kYXIvdGltZWdyaWQnO1xyXG5pbXBvcnQgaW50ZXJhY3Rpb25QbHVnaW4gZnJvbSAnQGZ1bGxjYWxlbmRhci9pbnRlcmFjdGlvbic7XHJcbmltcG9ydCB7Q2FsZW5kYXJMb2NhbGVTZXJ2aWNlfSBmcm9tICcuL2NhbGVuZGFyLmxvY2FsZS5zZXJ2aWNlJztcclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBEZWZhdWx0Q29uZmlnU2VydmljZSB7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2FsZVNlcnZpY2U6IENhbGVuZGFyTG9jYWxlU2VydmljZSkge31cclxuICAgIHByaXZhdGUgZGVmYXVsdENvbmZpZzogT3B0aW9uc0lucHV0ID0ge1xyXG4gICAgICAgIGhlYWRlcjoge1xyXG4gICAgICAgICAgICBsZWZ0OiAncHJldlllYXIscHJldixuZXh0LG5leHRZZWFyIHRvZGF5JyxcclxuICAgICAgICAgICAgY2VudGVyOiAndGl0bGUnLFxyXG4gICAgICAgICAgICByaWdodDogJ2RheUdyaWRNb250aCx0aW1lR3JpZFdlZWssdGltZUdyaWREYXksbGlzdFdlZWsnXHJcbiAgICAgICAgfSxcclxuICAgICAgICBuYXZMaW5rczogdHJ1ZSwgLy8gY2FuIGNsaWNrIGRheS93ZWVrIG5hbWVzIHRvIG5hdmlnYXRlIHZpZXdzXHJcbiAgICAgICAgZWRpdGFibGU6IHRydWUsXHJcbiAgICAgICAgc2VsZWN0YWJsZTogdHJ1ZSxcclxuICAgICAgICBkZWZhdWx0VmlldzogJ2RheUdyaWRNb250aCcsXHJcbiAgICAgICAgZXZlbnRMaW1pdDogdHJ1ZSwgLy8gYWxsb3cgXCJtb3JlXCIgbGluayB3aGVuIHRvbyBtYW55IGV2ZW50c1xyXG4gICAgICAgIHBsdWdpbnM6IFtkYXlHcmlkUGx1Z2luLCB0aW1lR3JpZ1BsdWdpbiwgaW50ZXJhY3Rpb25QbHVnaW5dXHJcbiAgICB9O1xyXG4gICAgcHVibGljIGdldERlZmF1bHRDb25maWcoKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcy5kZWZhdWx0Q29uZmlnLCB0aGlzLmxvY2FsZVNlcnZpY2UuZ2V0TG9jYWxlQ29uZmlnKCkpO1xyXG4gICAgICAgIC8vIHJldHVybiB0aGlzLmRlZmF1bHRDb25maWc7XHJcbiAgICB9XHJcbn1cclxuIl19