(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@fullcalendar/core'), require('@fullcalendar/daygrid'), require('@fullcalendar/timegrid'), require('@fullcalendar/interaction'), require('rxjs'), require('@angular/core'), require('@farris/ui-locale'), require('@farris/ui-common')) :
    typeof define === 'function' && define.amd ? define('@farris/ui-calendar', ['exports', '@fullcalendar/core', '@fullcalendar/daygrid', '@fullcalendar/timegrid', '@fullcalendar/interaction', 'rxjs', '@angular/core', '@farris/ui-locale', '@farris/ui-common'], factory) :
    (factory((global.farris = global.farris || {}, global.farris['ui-calendar'] = {}),global.core,global.dayGridPlugin,global.timeGrigPlugin,global.interactionPlugin,global.rxjs,global.ng.core,global.i1,global.uiCommon));
}(this, (function (exports,core,dayGridPlugin,timeGrigPlugin,interactionPlugin,rxjs,i0,i1,uiCommon) { 'use strict';

    dayGridPlugin = dayGridPlugin && dayGridPlugin.hasOwnProperty('default') ? dayGridPlugin['default'] : dayGridPlugin;
    timeGrigPlugin = timeGrigPlugin && timeGrigPlugin.hasOwnProperty('default') ? timeGrigPlugin['default'] : timeGrigPlugin;
    interactionPlugin = interactionPlugin && interactionPlugin.hasOwnProperty('default') ? interactionPlugin['default'] : interactionPlugin;

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    /** @type {?} */
    var isArray = Array.isArray;
    /** @type {?} */
    var keyList = Object.keys;
    /** @type {?} */
    var hasProp = Object.prototype.hasOwnProperty;
    /*
    Really simple clone utility. Only copies plain arrays, objects, and Dates. Transfers everything else as-is.
    Wanted to use a third-party lib, but none did exactly this.
    */
    /**
     * @param {?} input
     * @return {?}
     */
    function deepCopy(input) {
        if (Array.isArray(input)) {
            return input.map(deepCopy);
        }
        else if (input instanceof Date) {
            return new Date(input.valueOf());
        }
        else if (typeof input === 'object' && input) {
            // non-null object
            return mapHash(input, deepCopy);
        }
        else {
            // everything else (null, function, etc)
            return input;
        }
    }
    /**
     * @param {?} input
     * @param {?} func
     * @return {?}
     */
    function mapHash(input, func) {
        /** @type {?} */
        var output = {};
        for (var key in input) {
            if (hasOwnProperty.call(input, key)) {
                output[key] = func(input[key], key);
            }
        }
        return output;
    }
    /**
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function deepEqual(a, b) {
        if (a === b) {
            return true;
        }
        // tslint:disable-next-line: triple-equals
        if (a && b && typeof a == 'object' && typeof b == 'object') {
            /** @type {?} */
            var arrA = isArray(a);
            /** @type {?} */
            var arrB = isArray(b);
            /** @type {?} */
            var i = void 0;
            /** @type {?} */
            var length_1;
            /** @type {?} */
            var key = void 0;
            if (arrA && arrB) {
                length_1 = a.length;
                // tslint:disable-next-line: triple-equals
                if (length_1 != b.length) {
                    return false;
                }
                for (i = length_1; i-- !== 0;) {
                    if (!deepEqual(a[i], b[i])) {
                        return false;
                    }
                }
                return true;
            }
            // tslint:disable-next-line: triple-equals
            if (arrA != arrB) {
                return false;
            }
            /** @type {?} */
            var dateA = a instanceof Date;
            /** @type {?} */
            var dateB = b instanceof Date;
            // tslint:disable-next-line: triple-equals
            if (dateA != dateB) {
                return false;
            }
            if (dateA && dateB) {
                // tslint:disable-next-line: triple-equals
                return a.getTime() == b.getTime();
            }
            /** @type {?} */
            var regexpA = a instanceof RegExp;
            /** @type {?} */
            var regexpB = b instanceof RegExp;
            // tslint:disable-next-line: triple-equals
            if (regexpA != regexpB) {
                return false;
            }
            if (regexpA && regexpB) {
                // tslint:disable-next-line: triple-equals
                return a.toString() == b.toString();
            }
            /** @type {?} */
            var keys = keyList(a);
            length_1 = keys.length;
            if (length_1 !== keyList(b).length) {
                return false;
            }
            for (i = length_1; i-- !== 0;) {
                if (!hasProp.call(b, keys[i])) {
                    return false;
                }
            }
            for (i = length_1; i-- !== 0;) {
                key = keys[i];
                if (!deepEqual(a[key], b[key])) {
                    return false;
                }
            }
            return true;
        }
        return a !== a && b !== b;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /*
    the docs point to this file as an index of options.
    when this files is moved, update the docs.
    */
    /** @type {?} */
    var INPUT_NAMES = [
        'header',
        'footer',
        'customButtons',
        'buttonIcons',
        'themeSystem',
        'bootstrapFontAwesome',
        'firstDay',
        'dir',
        'weekends',
        'hiddenDays',
        'fixedWeekCount',
        'weekNumbers',
        'weekNumbersWithinDays',
        'weekNumberCalculation',
        'businessHours',
        'showNonCurrentDates',
        'height',
        'contentHeight',
        'aspectRatio',
        'handleWindowResize',
        'windowResizeDelay',
        'eventLimit',
        'eventLimitClick',
        'timeZone',
        'now',
        'defaultView',
        'allDaySlot',
        'allDayText',
        'slotDuration',
        'slotLabelFormat',
        'slotLabelInterval',
        'snapDuration',
        'scrollTime',
        'minTime',
        'maxTime',
        'slotEventOverlap',
        'listDayFormat',
        'listDayAltFormat',
        'noEventsMessage',
        'defaultDate',
        'nowIndicator',
        'visibleRange',
        'validRange',
        'dateIncrement',
        'dateAlignment',
        'duration',
        'dayCount',
        'locales',
        'locale',
        'eventTimeFormat',
        'columnHeader',
        'columnHeaderFormat',
        'columnHeaderText',
        'columnHeaderHtml',
        'titleFormat',
        'weekLabel',
        'displayEventTime',
        'displayEventEnd',
        'eventLimitText',
        'dayPopoverFormat',
        'navLinks',
        'selectable',
        'selectMirror',
        'selectMinDistance',
        'unselectAuto',
        'unselectCancel',
        'defaultAllDayEventDuration',
        'defaultTimedEventDuration',
        'cmdFormatter',
        'defaultRangeSeparator',
        'selectConstraint',
        'selectOverlap',
        'selectAllow',
        'editable',
        'eventStartEditable',
        'eventDurationEditable',
        'eventConstraint',
        'eventOverlap',
        'eventAllow',
        'eventClassName',
        'eventClassNames',
        'eventBackgroundColor',
        'eventBorderColor',
        'eventTextColor',
        'eventColor',
        'events',
        'eventSources',
        'allDayDefault',
        'startParam',
        'endParam',
        'lazyFetching',
        'nextDayThreshold',
        'eventOrder',
        'rerenderDelay',
        'dragRevertDuration',
        'dragScroll',
        'longPressDelay',
        'eventLongPressDelay',
        'droppable',
        'dropAccept',
        'eventDataTransform',
        'allDayMaintainDuration',
        'eventResizableFromStart',
        'timeGridEventMinHeight',
        'allDayHtml',
        'eventDragMinDistance',
        'eventSourceFailure',
        'eventSourceSuccess',
        'forceEventDuration',
        'progressiveEventRendering',
        'selectLongPressDelay',
        'selectMinDistance',
        'timeZoneParam',
        'titleRangeSeparator',
        // compound OptionsInput...
        'buttonText',
        'views',
        'plugins',
        // scheduler...
        'schedulerLicenseKey',
        'resources',
        'resourceLabelText',
        'resourceOrder',
        'filterResourcesWithEvents',
        'resourceText',
        'resourceGroupField',
        'resourceGroupText',
        'resourceAreaWidth',
        'resourceColumns',
        'resourcesInitiallyExpanded',
        'slotWidth',
        'datesAboveResources',
        'googleCalendarApiKey',
        'refetchResourcesOnNavigate',
        'eventResourceEditable'
    ];
    /** @type {?} */
    var INPUT_IS_DEEP = {
        header: true,
        footer: true,
        events: true,
        eventSources: true,
        resources: true
    };
    /** @type {?} */
    var OUTPUT_NAMES = [
        'windowResize',
        'dateClick',
        'eventClick',
        'navLinkDayClick',
        'navLinkWeekClick',
        'eventMouseEnter',
        'eventMouseLeave',
        'select',
        'unselect',
        'loading',
        'eventPositioned',
        'eventDragStart',
        'eventDragStop',
        'eventDrop',
        'eventResizeStart',
        'eventResizeStop',
        'eventResize',
        'drop',
        'eventReceive',
        'eventLeave',
        '_destroyed',
        // TODO: make these inputs...
        'viewSkeletonRender',
        'viewSkeletonDestroy',
        'datesRender',
        'datesDestroy',
        'dayRender',
        'eventRender',
        'eventDestroy',
        'resourceRender'
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarLocaleService = /** @class */ (function () {
        function CalendarLocaleService(localeService) {
            this.localeService = localeService;
            this.localeConfig = {
                'ZH_CN': {
                    locale: 'zh-cn',
                    buttonText: {
                        today: '今天',
                        month: '月',
                        week: '周',
                        day: '天',
                        listWeek: '列表'
                    },
                    allDayText: '全天',
                    noEventsMessage: '没数据啊',
                    eventLimitText: '更多',
                    weekNumberTitle: '周',
                    firstDay: 1
                },
                'EN_US': {
                    locale: 'en'
                }
            };
        }
        /**
         * @return {?}
         */
        CalendarLocaleService.prototype.getLocaleConfig = /**
         * @return {?}
         */
            function () {
                /** @type {?} */
                var locale = this.localeService.getValue('locale');
                if (locale && this.localeConfig[locale]) {
                    return this.localeConfig[locale];
                }
                else {
                    return this.localeConfig.ZH_CN;
                }
            };
        CalendarLocaleService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        CalendarLocaleService.ctorParameters = function () {
            return [
                { type: i1.LocaleService }
            ];
        };
        /** @nocollapse */ CalendarLocaleService.ngInjectableDef = i0.defineInjectable({ factory: function CalendarLocaleService_Factory() { return new CalendarLocaleService(i0.inject(i1.LocaleService)); }, token: CalendarLocaleService, providedIn: "root" });
        return CalendarLocaleService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DefaultConfigService = /** @class */ (function () {
        function DefaultConfigService(localeService) {
            this.localeService = localeService;
            this.defaultConfig = {
                header: {
                    left: 'prevYear,prev,next,nextYear today',
                    center: 'title',
                    right: 'dayGridMonth,timeGridWeek,timeGridDay,listWeek'
                },
                navLinks: true,
                // can click day/week names to navigate views
                editable: true,
                selectable: true,
                defaultView: 'dayGridMonth',
                eventLimit: true,
                // allow "more" link when too many events
                plugins: [dayGridPlugin, timeGrigPlugin, interactionPlugin]
            };
        }
        /**
         * @return {?}
         */
        DefaultConfigService.prototype.getDefaultConfig = /**
         * @return {?}
         */
            function () {
                return Object.assign(this.defaultConfig, this.localeService.getLocaleConfig());
                // return this.defaultConfig;
            };
        DefaultConfigService.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        DefaultConfigService.ctorParameters = function () {
            return [
                { type: CalendarLocaleService }
            ];
        };
        /** @nocollapse */ DefaultConfigService.ngInjectableDef = i0.defineInjectable({ factory: function DefaultConfigService_Factory() { return new DefaultConfigService(i0.inject(CalendarLocaleService)); }, token: DefaultConfigService, providedIn: "root" });
        return DefaultConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarComponent = /** @class */ (function () {
        function CalendarComponent(element, configService, injector) {
            this.element = element;
            this.configService = configService;
            this.injector = injector;
            // Determines what happens upon a day heading nav-link click.
            this.navLinkDayClick = new i0.EventEmitter(); // ?: string | ((date: Date, jsEvent: Event) => void);
            // ?: string | ((date: Date, jsEvent: Event) => void);
            this.windowResize = new i0.EventEmitter();
            this.dateClick = new i0.EventEmitter();
            // 编辑事件
            this.eventClick = new i0.EventEmitter();
            this.eventMouseEnter = new i0.EventEmitter();
            this.eventMouseLeave = new i0.EventEmitter();
            this.select = new i0.EventEmitter();
            this.unselect = new i0.EventEmitter();
            this.loading = new i0.EventEmitter();
            this.eventPositioned = new i0.EventEmitter();
            this.eventDragStart = new i0.EventEmitter();
            this.eventDragStop = new i0.EventEmitter();
            // 拖动事件
            this.eventDrop = new i0.EventEmitter();
            this.eventResizeStart = new i0.EventEmitter();
            this.eventResizeStop = new i0.EventEmitter();
            this.eventResize = new i0.EventEmitter();
            this.drop = new i0.EventEmitter();
            this.eventReceive = new i0.EventEmitter();
            this.eventLeave = new i0.EventEmitter();
            // tslint:disable-next-line: variable-name
            this._destroyed = new i0.EventEmitter();
            // TODO: make these inputs...
            this.viewSkeletonRender = new i0.EventEmitter();
            this.viewSkeletonDestroy = new i0.EventEmitter();
            this.datesRender = new i0.EventEmitter();
            this.datesDestroy = new i0.EventEmitter();
            this.dayRender = new i0.EventEmitter();
            this.eventRender = new i0.EventEmitter();
            this.eventDestroy = new i0.EventEmitter();
            this.resourceRender = new i0.EventEmitter();
            this.dirtyProps = {};
            this.deepCopies = {}; // holds frozen states
            this.farrisInstances = null;
            this.farrisInstances = this.injector.get(uiCommon.FarrisComponentInstanceService, null);
        }
        Object.defineProperty(CalendarComponent.prototype, "events", {
            get: /**
             * @return {?}
             */ function () {
                return this._events;
            },
            // 日程数据
            set: 
            // 日程数据
            /**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                var _this = this;
                if (e instanceof rxjs.Observable) {
                    e.subscribe(( /**
                     * @param {?} val
                     * @return {?}
                     */function (val) {
                        _this._events = val;
                    }));
                }
                else {
                    this._events = e;
                }
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
            function () {
                this.calendar = new core.Calendar(this.element.nativeElement, Object.assign({}, this.configService.getDefaultConfig(), this.buildOptions()));
                this.calendar.render();
                if (this.element && this.farrisInstances) {
                    this.farrisInstances.add(this.element.nativeElement, this);
                }
            };
        /**
         * @private
         * @return {?}
         */
        CalendarComponent.prototype.buildOptions = /**
         * @private
         * @return {?}
         */
            function () {
                var _this = this;
                /** @type {?} */
                var options = {};
                OUTPUT_NAMES.forEach(( /**
                 * @param {?} outputName
                 * @return {?}
                 */function (outputName) {
                    options[outputName] = ( /**
                     * @param {...?} args
                     * @return {?}
                     */function () {
                        var args = [];
                        for (var _i = 0; _i < arguments.length; _i++) {
                            args[_i] = arguments[_i];
                        }
                        var _a;
                        (_a = _this[outputName]).emit.apply(_a, __spread(args));
                    });
                }));
                // do after outputs, so that inputs with same name override
                INPUT_NAMES.forEach(( /**
                 * @param {?} inputName
                 * @return {?}
                 */function (inputName) {
                    /** @type {?} */
                    var inputVal = _this[inputName];
                    if (inputVal !== undefined) {
                        // unfortunately FC chokes when some props are set to undefined
                        if (inputName === "header") {
                            inputVal = Object.assign({}, _this.configService.getDefaultConfig().header, inputVal);
                        }
                        if (_this.deepChangeDetection && INPUT_IS_DEEP[inputName]) {
                            inputVal = deepCopy(inputVal);
                            _this.deepCopies[inputName] = inputVal; // side effect!
                        }
                        options[inputName] = inputVal;
                    }
                }));
                return options;
            };
        /*
      called before ngOnChanges, allows us to manually detect input changes.
      called much more often than ngOnChanges.
      */
        /*
          called before ngOnChanges, allows us to manually detect input changes.
          called much more often than ngOnChanges.
          */
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngDoCheck = /*
          called before ngOnChanges, allows us to manually detect input changes.
          called much more often than ngOnChanges.
          */
            /**
             * @return {?}
             */
            function () {
                if (this.calendar && this.deepChangeDetection) {
                    // not the initial render AND we do deep-mutation checks
                    var deepCopies = this.deepCopies;
                    for (var inputName in INPUT_IS_DEEP) {
                        if (INPUT_IS_DEEP.hasOwnProperty(inputName)) {
                            /** @type {?} */
                            var inputVal = this[inputName];
                            if (inputVal !== undefined) {
                                // unfortunately FC chokes when some props are set to undefined
                                if (!deepEqual(inputVal, deepCopies[inputName])) {
                                    /** @type {?} */
                                    var copy = deepCopy(inputVal);
                                    deepCopies[inputName] = copy;
                                    this.dirtyProps[inputName] = copy;
                                }
                            }
                        }
                    }
                }
            };
        /*
            called with confirmed changes to input references
        */
        /*
                called with confirmed changes to input references
            */
        /**
         * @param {?} changes
         * @return {?}
         */
        CalendarComponent.prototype.ngOnChanges = /*
                called with confirmed changes to input references
            */
            /**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                var _this = this;
                if (this.calendar) {
                    var _loop_1 = function (inputName) {
                        if (changes.hasOwnProperty(inputName)) {
                            if (this_1.deepCopies[inputName] === undefined) {
                                // not already handled in ngDoCheck
                                // this.dirtyProps[inputName] =
                                //     changes[inputName].currentValue;
                                if (changes[inputName].currentValue instanceof
                                    rxjs.Observable) {
                                    changes[inputName].currentValue.subscribe(( /**
                                     * @param {?} val
                                     * @return {?}
                                     */function (val) {
                                        _this.dirtyProps[inputName] = val;
                                    }));
                                }
                                else {
                                    this_1.dirtyProps[inputName] =
                                        changes[inputName].currentValue;
                                }
                            }
                        }
                    };
                    var this_1 = this;
                    // not the initial render
                    for (var inputName in changes) {
                        _loop_1(inputName);
                    }
                }
            };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngAfterContentChecked = /**
         * @return {?}
         */
            function () {
                var dirtyProps = this.dirtyProps;
                if (Object.keys(dirtyProps).length > 0) {
                    this.dirtyProps = {}; // clear first, in case the rerender causes new dirtiness
                    this.calendar.mutateOptions(dirtyProps, [], false, deepEqual);
                }
            };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
            function () {
                if (this.calendar) {
                    this.calendar.destroy();
                }
                this.calendar = null;
            };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.getApi = /**
         * @return {?}
         */
            function () {
                return this.calendar;
            };
        /**
         * @return {?}
         */
        CalendarComponent.prototype.render = /**
         * @return {?}
         */
            function () {
                this.calendar.render();
            };
        CalendarComponent.decorators = [
            { type: i0.Component, args: [{
                        // tslint:disable-next-line: component-selector
                        selector: "farris-calendar",
                        template: "",
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        encapsulation: i0.ViewEncapsulation.None,
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        CalendarComponent.ctorParameters = function () {
            return [
                { type: i0.ElementRef },
                { type: DefaultConfigService },
                { type: i0.Injector }
            ];
        };
        CalendarComponent.propDecorators = {
            deepChangeDetection: [{ type: i0.Input }],
            header: [{ type: i0.Input }],
            footer: [{ type: i0.Input }],
            customButtons: [{ type: i0.Input }],
            buttonIcons: [{ type: i0.Input }],
            themeSystem: [{ type: i0.Input }],
            bootstrapFontAwesome: [{ type: i0.Input }],
            firstDay: [{ type: i0.Input }],
            dir: [{ type: i0.Input }],
            weekends: [{ type: i0.Input }],
            hiddenDays: [{ type: i0.Input }],
            fixedWeekCount: [{ type: i0.Input }],
            weekNumbers: [{ type: i0.Input }],
            weekNumbersWithinDays: [{ type: i0.Input }],
            weekNumberCalculation: [{ type: i0.Input }],
            businessHours: [{ type: i0.Input }],
            showNonCurrentDates: [{ type: i0.Input }],
            height: [{ type: i0.Input }],
            contentHeight: [{ type: i0.Input }],
            aspectRatio: [{ type: i0.Input }],
            handleWindowResize: [{ type: i0.Input }],
            windowResizeDelay: [{ type: i0.Input }],
            eventLimit: [{ type: i0.Input }],
            eventLimitClick: [{ type: i0.Input }],
            timeZone: [{ type: i0.Input }],
            now: [{ type: i0.Input }],
            defaultView: [{ type: i0.Input }],
            allDaySlot: [{ type: i0.Input }],
            allDayText: [{ type: i0.Input }],
            slotDuration: [{ type: i0.Input }],
            slotLabelFormat: [{ type: i0.Input }],
            slotLabelInterval: [{ type: i0.Input }],
            snapDuration: [{ type: i0.Input }],
            scrollTime: [{ type: i0.Input }],
            minTime: [{ type: i0.Input }],
            maxTime: [{ type: i0.Input }],
            slotEventOverlap: [{ type: i0.Input }],
            listDayFormat: [{ type: i0.Input }],
            listDayAltFormat: [{ type: i0.Input }],
            noEventsMessage: [{ type: i0.Input }],
            defaultDate: [{ type: i0.Input }],
            nowIndicator: [{ type: i0.Input }],
            visibleRange: [{ type: i0.Input }],
            validRange: [{ type: i0.Input }],
            dateIncrement: [{ type: i0.Input }],
            dateAlignment: [{ type: i0.Input }],
            duration: [{ type: i0.Input }],
            dayCount: [{ type: i0.Input }],
            locales: [{ type: i0.Input }],
            locale: [{ type: i0.Input }],
            eventTimeFormat: [{ type: i0.Input }],
            columnHeader: [{ type: i0.Input }],
            columnHeaderFormat: [{ type: i0.Input }],
            columnHeaderText: [{ type: i0.Input }],
            columnHeaderHtml: [{ type: i0.Input }],
            titleFormat: [{ type: i0.Input }],
            weekLabel: [{ type: i0.Input }],
            displayEventTime: [{ type: i0.Input }],
            displayEventEnd: [{ type: i0.Input }],
            eventLimitText: [{ type: i0.Input }],
            dayPopoverFormat: [{ type: i0.Input }],
            navLinks: [{ type: i0.Input }],
            navLinkWeekClick: [{ type: i0.Input }],
            selectable: [{ type: i0.Input }],
            selectMirror: [{ type: i0.Input }],
            unselectAuto: [{ type: i0.Input }],
            unselectCancel: [{ type: i0.Input }],
            defaultAllDayEventDuration: [{ type: i0.Input }],
            defaultTimedEventDuration: [{ type: i0.Input }],
            cmdFormatter: [{ type: i0.Input }],
            defaultRangeSeparator: [{ type: i0.Input }],
            selectConstraint: [{ type: i0.Input }],
            selectOverlap: [{ type: i0.Input }],
            selectAllow: [{ type: i0.Input }],
            selectMinDistance: [{ type: i0.Input }],
            editable: [{ type: i0.Input }],
            eventStartEditable: [{ type: i0.Input }],
            eventDurationEditable: [{ type: i0.Input }],
            eventConstraint: [{ type: i0.Input }],
            eventOverlap: [{ type: i0.Input }],
            eventAllow: [{ type: i0.Input }],
            eventClassName: [{ type: i0.Input }],
            eventClassNames: [{ type: i0.Input }],
            eventBackgroundColor: [{ type: i0.Input }],
            eventBorderColor: [{ type: i0.Input }],
            eventTextColor: [{ type: i0.Input }],
            eventColor: [{ type: i0.Input }],
            events: [{ type: i0.Input }],
            eventSources: [{ type: i0.Input }],
            allDayDefault: [{ type: i0.Input }],
            startParam: [{ type: i0.Input }],
            endParam: [{ type: i0.Input }],
            lazyFetching: [{ type: i0.Input }],
            nextDayThreshold: [{ type: i0.Input }],
            eventOrder: [{ type: i0.Input }],
            rerenderDelay: [{ type: i0.Input }],
            dragRevertDuration: [{ type: i0.Input }],
            dragScroll: [{ type: i0.Input }],
            longPressDelay: [{ type: i0.Input }],
            eventLongPressDelay: [{ type: i0.Input }],
            droppable: [{ type: i0.Input }],
            dropAccept: [{ type: i0.Input }],
            eventDataTransform: [{ type: i0.Input }],
            allDayMaintainDuration: [{ type: i0.Input }],
            eventResizableFromStart: [{ type: i0.Input }],
            timeGridEventMinHeight: [{ type: i0.Input }],
            allDayHtml: [{ type: i0.Input }],
            eventDragMinDistance: [{ type: i0.Input }],
            eventSourceFailure: [{ type: i0.Input }],
            eventSourceSuccess: [{ type: i0.Input }],
            forceEventDuration: [{ type: i0.Input }],
            progressiveEventRendering: [{ type: i0.Input }],
            selectLongPressDelay: [{ type: i0.Input }],
            timeZoneParam: [{ type: i0.Input }],
            titleRangeSeparator: [{ type: i0.Input }],
            buttonText: [{ type: i0.Input }],
            views: [{ type: i0.Input }],
            plugins: [{ type: i0.Input }],
            schedulerLicenseKey: [{ type: i0.Input }],
            resources: [{ type: i0.Input }],
            resourceLabelText: [{ type: i0.Input }],
            resourceOrder: [{ type: i0.Input }],
            filterResourcesWithEvents: [{ type: i0.Input }],
            resourceText: [{ type: i0.Input }],
            resourceGroupField: [{ type: i0.Input }],
            resourceGroupText: [{ type: i0.Input }],
            resourceAreaWidth: [{ type: i0.Input }],
            resourceColumns: [{ type: i0.Input }],
            resourcesInitiallyExpanded: [{ type: i0.Input }],
            slotWidth: [{ type: i0.Input }],
            datesAboveResources: [{ type: i0.Input }],
            googleCalendarApiKey: [{ type: i0.Input }],
            refetchResourcesOnNavigate: [{ type: i0.Input }],
            eventResourceEditable: [{ type: i0.Input }],
            navLinkDayClick: [{ type: i0.Output }],
            windowResize: [{ type: i0.Output }],
            dateClick: [{ type: i0.Output }],
            eventClick: [{ type: i0.Output }],
            eventMouseEnter: [{ type: i0.Output }],
            eventMouseLeave: [{ type: i0.Output }],
            select: [{ type: i0.Output }],
            unselect: [{ type: i0.Output }],
            loading: [{ type: i0.Output }],
            eventPositioned: [{ type: i0.Output }],
            eventDragStart: [{ type: i0.Output }],
            eventDragStop: [{ type: i0.Output }],
            eventDrop: [{ type: i0.Output }],
            eventResizeStart: [{ type: i0.Output }],
            eventResizeStop: [{ type: i0.Output }],
            eventResize: [{ type: i0.Output }],
            drop: [{ type: i0.Output }],
            eventReceive: [{ type: i0.Output }],
            eventLeave: [{ type: i0.Output }],
            _destroyed: [{ type: i0.Output }],
            viewSkeletonRender: [{ type: i0.Output }],
            viewSkeletonDestroy: [{ type: i0.Output }],
            datesRender: [{ type: i0.Output }],
            datesDestroy: [{ type: i0.Output }],
            dayRender: [{ type: i0.Output }],
            eventRender: [{ type: i0.Output }],
            eventDestroy: [{ type: i0.Output }],
            resourceRender: [{ type: i0.Output }]
        };
        return CalendarComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CalendarModule = /** @class */ (function () {
        function CalendarModule() {
        }
        CalendarModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [CalendarComponent],
                        imports: [
                            i1.LocaleModule,
                            uiCommon.FarrisCommonModule
                        ],
                        exports: [CalendarComponent]
                    },] }
        ];
        return CalendarModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.CalendarComponent = CalendarComponent;
    exports.CalendarModule = CalendarModule;
    exports.CalendarLocaleService = CalendarLocaleService;
    exports.DefaultConfigService = DefaultConfigService;
    exports.INPUT_NAMES = INPUT_NAMES;
    exports.INPUT_IS_DEEP = INPUT_IS_DEEP;
    exports.OUTPUT_NAMES = OUTPUT_NAMES;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=farris-ui-calendar.umd.js.map