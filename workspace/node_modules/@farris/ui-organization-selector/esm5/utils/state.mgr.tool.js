/**
 * @fileoverview added by tsickle
 * Generated from: utils/state.mgr.tool.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Subject } from 'rxjs';
var StateMgrTool = /** @class */ (function () {
    function StateMgrTool(http) {
        this.http = http;
        this.slSubject = new Subject();
    }
    Object.defineProperty(StateMgrTool.prototype, "selectionsSubject", {
        get: /**
         * @return {?}
         */
        function () {
            return this.slSubject.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} value
     * @param {?} changeType
     * @param {?=} from
     * @return {?}
     */
    StateMgrTool.prototype.emitSelections = /**
     * @param {?} value
     * @param {?} changeType
     * @param {?=} from
     * @return {?}
     */
    function (value, changeType, from) {
        if (from === void 0) { from = 'other'; }
        this.slSubject.next({
            value: value,
            changeType: changeType,
            from: from
        });
    };
    StateMgrTool.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    StateMgrTool.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return StateMgrTool;
}());
export { StateMgrTool };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StateMgrTool.prototype.slSubject;
    /**
     * @type {?}
     * @private
     */
    StateMgrTool.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUubWdyLnRvb2wuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLW9yZ2FuaXphdGlvbi1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbInV0aWxzL3N0YXRlLm1nci50b29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFlLE1BQU0sc0JBQXNCLENBQUM7QUFFL0QsT0FBTyxFQUFjLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUUzQztJQUtFLHNCQUNVLElBQWdCO1FBQWhCLFNBQUksR0FBSixJQUFJLENBQVk7UUFIbEIsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFTLENBQUM7SUFJckMsQ0FBQztJQUVMLHNCQUFJLDJDQUFpQjs7OztRQUFyQjtZQUNFLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN2QyxDQUFDOzs7T0FBQTs7Ozs7OztJQUVELHFDQUFjOzs7Ozs7SUFBZCxVQUFlLEtBQVUsRUFBRSxVQUFzQixFQUFFLElBQXNCO1FBQXRCLHFCQUFBLEVBQUEsY0FBc0I7UUFDdkUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7WUFDbEIsS0FBSyxPQUFBO1lBQ0wsVUFBVSxZQUFBO1lBQ1YsSUFBSSxNQUFBO1NBQ0wsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7Z0JBbkJGLFVBQVU7Ozs7Z0JBSkYsVUFBVTs7SUF5Qm5CLG1CQUFDO0NBQUEsQUFyQkQsSUFxQkM7U0FwQlksWUFBWTs7Ozs7O0lBRXZCLGlDQUF5Qzs7Ozs7SUFHdkMsNEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgQ2hhbmdlVHlwZSwgT3JnUmVxdWVzdFBhcmFtLCBQYXJhbSB9IGZyb20gJy4vaW5kZXgudHlwZSc7XHJcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuXHJcbkBJbmplY3RhYmxlKClcclxuZXhwb3J0IGNsYXNzIFN0YXRlTWdyVG9vbCB7XHJcblxyXG4gIHByaXZhdGUgc2xTdWJqZWN0ID0gbmV3IFN1YmplY3Q8UGFyYW0+KCk7XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50XHJcbiAgKSB7IH1cclxuXHJcbiAgZ2V0IHNlbGVjdGlvbnNTdWJqZWN0KCk6IE9ic2VydmFibGU8UGFyYW0+IHtcclxuICAgIHJldHVybiB0aGlzLnNsU3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIGVtaXRTZWxlY3Rpb25zKHZhbHVlOiBhbnksIGNoYW5nZVR5cGU6IENoYW5nZVR5cGUsIGZyb206IHN0cmluZyA9ICdvdGhlcicpIHtcclxuICAgIHRoaXMuc2xTdWJqZWN0Lm5leHQoe1xyXG4gICAgICB2YWx1ZSxcclxuICAgICAgY2hhbmdlVHlwZSxcclxuICAgICAgZnJvbVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=