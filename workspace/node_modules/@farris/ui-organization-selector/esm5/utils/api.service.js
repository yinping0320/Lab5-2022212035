/**
 * @fileoverview added by tsickle
 * Generated from: utils/api.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { of } from 'rxjs';
var ApiService = /** @class */ (function () {
    function ApiService(http) {
        this.http = http;
    }
    /**
      * 获取行政组织或系统用户
      * @returns observable
      */
    /**
     * 获取行政组织或系统用户
     * @param {?} param
     * @return {?} observable
     */
    ApiService.prototype.getOrganization = /**
     * 获取行政组织或系统用户
     * @param {?} param
     * @return {?} observable
     */
    function (param) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.absUrl + '/org', param, options);
    };
    /**
     * @param {?} absOrgType
     * @return {?}
     */
    ApiService.prototype.getOrgGroups = /**
     * @param {?} absOrgType
     * @return {?}
     */
    function (absOrgType) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.get(this.groupApiUrl + '/' + absOrgType, options);
    };
    /**
     * @param {?} groupId
     * @param {?} absOrgType
     * @return {?}
     */
    ApiService.prototype.getGroupMembers = /**
     * @param {?} groupId
     * @param {?} absOrgType
     * @return {?}
     */
    function (groupId, absOrgType) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        if (!groupId) {
            return of(null);
        }
        /** @type {?} */
        var url = this.groupApiUrl + '/' + groupId + '/absOrgType/' + absOrgType;
        return this.http.get(url, options);
    };
    /**
     * @param {?} groupInfo
     * @return {?}
     */
    ApiService.prototype.saveGroup = /**
     * @param {?} groupInfo
     * @return {?}
     */
    function (groupInfo) {
        /** @type {?} */
        var options = {
            headers: new HttpHeaders({
                'Content-Type': 'application/json',
            }),
        };
        return this.http.post(this.groupApiUrl, groupInfo, options);
    };
    ApiService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    ApiService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return ApiService;
}());
export { ApiService };
if (false) {
    /** @type {?} */
    ApiService.prototype.absUrl;
    /** @type {?} */
    ApiService.prototype.groupApiUrl;
    /**
     * @type {?}
     * @private
     */
    ApiService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL3VpLW9yZ2FuaXphdGlvbi1zZWxlY3Rvci8iLCJzb3VyY2VzIjpbInV0aWxzL2FwaS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRS9ELE9BQU8sRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFMUI7SUFLRSxvQkFDVSxJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQ3RCLENBQUM7SUFFTDs7O1FBR0k7Ozs7OztJQUNKLG9DQUFlOzs7OztJQUFmLFVBQWdCLEtBQXNCOztZQUM5QixPQUFPLEdBQUc7WUFDZCxPQUFPLEVBQUUsSUFBSSxXQUFXLENBQUM7Z0JBQ3ZCLGNBQWMsRUFBRSxrQkFBa0I7YUFDbkMsQ0FBQztTQUNIO1FBQ0QsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7Ozs7SUFFRCxpQ0FBWTs7OztJQUFaLFVBQWEsVUFBa0I7O1lBQ3ZCLE9BQU8sR0FBRztZQUNkLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQztnQkFDdkIsY0FBYyxFQUFFLGtCQUFrQjthQUNuQyxDQUFDO1NBQ0g7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7SUFFRCxvQ0FBZTs7Ozs7SUFBZixVQUFnQixPQUFlLEVBQUUsVUFBa0I7O1lBQzNDLE9BQU8sR0FBRztZQUNkLE9BQU8sRUFBRSxJQUFJLFdBQVcsQ0FBQztnQkFDdkIsY0FBYyxFQUFFLGtCQUFrQjthQUNuQyxDQUFDO1NBQ0g7UUFDRCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDakI7O1lBQ0ssR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLEdBQUcsR0FBRyxHQUFHLE9BQU8sR0FBRyxjQUFjLEdBQUcsVUFBVTtRQUMxRSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNyQyxDQUFDOzs7OztJQUVELDhCQUFTOzs7O0lBQVQsVUFBVSxTQUFnQzs7WUFDbEMsT0FBTyxHQUFHO1lBQ2QsT0FBTyxFQUFFLElBQUksV0FBVyxDQUFDO2dCQUN2QixjQUFjLEVBQUUsa0JBQWtCO2FBQ25DLENBQUM7U0FDSDtRQUNELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDOUQsQ0FBQzs7Z0JBbkRGLFVBQVU7Ozs7Z0JBSkYsVUFBVTs7SUF3RG5CLGlCQUFDO0NBQUEsQUFwREQsSUFvREM7U0FuRFksVUFBVTs7O0lBRXJCLDRCQUFlOztJQUNmLGlDQUFvQjs7Ozs7SUFFbEIsMEJBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50LCBIdHRwSGVhZGVycyB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcclxuaW1wb3J0IHsgT3JnUmVxdWVzdFBhcmFtLCBTYXZlR3JvdXBSZXFldXN0UGFyYW0gfSBmcm9tICcuL2luZGV4LnR5cGUnO1xyXG5pbXBvcnQgeyBvZiB9IGZyb20gJ3J4anMnO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgQXBpU2VydmljZSB7XHJcblxyXG4gIGFic1VybDogc3RyaW5nO1xyXG4gIGdyb3VwQXBpVXJsOiBzdHJpbmc7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnRcclxuICApIHsgfVxyXG5cclxuICAvKipcclxuICAgICog6I635Y+W6KGM5pS/57uE57uH5oiW57O757uf55So5oi3XHJcbiAgICAqIEByZXR1cm5zIG9ic2VydmFibGVcclxuICAgICovXHJcbiAgZ2V0T3JnYW5pemF0aW9uKHBhcmFtOiBPcmdSZXF1ZXN0UGFyYW0pIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XHJcbiAgICAgIGhlYWRlcnM6IG5ldyBIdHRwSGVhZGVycyh7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSksXHJcbiAgICB9O1xyXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5wb3N0KHRoaXMuYWJzVXJsICsgJy9vcmcnLCBwYXJhbSwgb3B0aW9ucyk7XHJcbiAgfVxyXG5cclxuICBnZXRPcmdHcm91cHMoYWJzT3JnVHlwZTogc3RyaW5nKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0pLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuZ3JvdXBBcGlVcmwgKyAnLycgKyBhYnNPcmdUeXBlLCBvcHRpb25zKTtcclxuICB9XHJcblxyXG4gIGdldEdyb3VwTWVtYmVycyhncm91cElkOiBzdHJpbmcsIGFic09yZ1R5cGU6IHN0cmluZykge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgaGVhZGVyczogbmV3IEh0dHBIZWFkZXJzKHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9KSxcclxuICAgIH07XHJcbiAgICBpZiAoIWdyb3VwSWQpIHtcclxuICAgICAgcmV0dXJuIG9mKG51bGwpO1xyXG4gICAgfVxyXG4gICAgY29uc3QgdXJsID0gdGhpcy5ncm91cEFwaVVybCArICcvJyArIGdyb3VwSWQgKyAnL2Fic09yZ1R5cGUvJyArIGFic09yZ1R5cGU7XHJcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwsIG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgc2F2ZUdyb3VwKGdyb3VwSW5mbzogU2F2ZUdyb3VwUmVxZXVzdFBhcmFtKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0ge1xyXG4gICAgICBoZWFkZXJzOiBuZXcgSHR0cEhlYWRlcnMoe1xyXG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXHJcbiAgICAgIH0pLFxyXG4gICAgfTtcclxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh0aGlzLmdyb3VwQXBpVXJsLCBncm91cEluZm8sIG9wdGlvbnMpO1xyXG4gIH1cclxufVxyXG4iXX0=