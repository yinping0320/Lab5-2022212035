/**
 * @fileoverview added by tsickle
 * Generated from: lib/grid-organization-selector/grid-organization-selector.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Injector, Renderer2, ViewChild } from '@angular/core';
import { CommonUtils, RuntimeStateService } from '@farris/ui-common';
import { GRID_EDITORS } from '@farris/ui-datagrid';
import { DatagridBaseEditorDirective } from '@farris/ui-datagrid-editors';
import * as _ from 'lodash-es';
import { isNull, isUndefined, omitBy, trim } from 'lodash-es';
/** @type {?} */
var organizationSelectorDefautOption = {
    absOrgType: 'System_organization',
    readonly: false,
    placeholder: '请选择',
    busNum: 'common',
    primaryField: 'orgId',
    displayField: 'name'
};
var GridOrganizationSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(GridOrganizationSelectorComponent, _super);
    function GridOrganizationSelectorComponent(render, el, rts, utils, injector) {
        var _this = _super.call(this, render, el, injector) || this;
        _this.rts = rts;
        _this.utils = utils;
        _this.lookupFieldMap = (/**
         * @param {?} helpData
         * @param {?} mapFields
         * @param {?} dataObj
         * @return {?}
         */
        function (helpData, mapFields, dataObj) {
            if (mapFields) {
                /** @type {?} */
                var helpFields = Object.keys(mapFields);
                helpFields.forEach((/**
                 * @param {?} helpField
                 * @return {?}
                 */
                function (helpField) {
                    /** @type {?} */
                    var val = '';
                    if (helpData) {
                        if (helpData instanceof Array) {
                            val = helpData.map((/**
                             * @param {?} data
                             * @return {?}
                             */
                            function (data) { return _this.utils.getValue(helpField, data); })).join(',');
                        }
                        else {
                            val = _this.utils.getValue(helpField, helpData);
                        }
                    }
                    mapFields[helpField].split(',').forEach((/**
                     * @param {?} ff
                     * @return {?}
                     */
                    function (ff) {
                        /** @type {?} */
                        var formField = trim(ff);
                        _this.utils.setValue(dataObj, formField, val);
                    }));
                }));
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        _super.prototype.ngOnInit.call(this);
        this.options = Object.assign({}, organizationSelectorDefautOption, omitBy(this.options, (/**
         * @param {?} itemValue
         * @return {?}
         */
        function (itemValue) { return isUndefined(itemValue) || isNull(itemValue); })));
        this.instance.selectedData = new EventEmitter();
        this.instance.clear = new EventEmitter();
    };
    /**
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.inputElement = this.el.nativeElement;
        _super.prototype.ngAfterViewInit.call(this);
        if (this.instance.ngControl &&
            this.instance.ngControl.formDirective &&
            this.instance.ngControl.formDirective.form &&
            this.instance.ngControl.formDirective.form.bindingData) {
            this.bindingData = this.instance.ngControl.formDirective.form.bindingData;
            this.bindingData.setValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.setValue(fieldPath.join('.'), _this.bindingData, true);
            });
            this.bindingData.getValue = (/**
             * @param {?} fieldPath
             * @return {?}
             */
            function (fieldPath) {
                return _this.utils.getValue(fieldPath.join('.'), _this.bindingData, true);
            });
        }
    };
    /**
     * @param {?} selectedRow
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.updateControlValue = /**
     * @param {?} selectedRow
     * @return {?}
     */
    function (selectedRow) {
        if (this.instance.mapFields && this.bindingData) {
            this.lookupFieldMap(selectedRow, this.instance.mapFields, this.bindingData);
        }
    };
    /**
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.inputClear = /**
     * @return {?}
     */
    function () {
        this.updateControlValue(null);
        this.instance.clear.emit();
        // 设计器上配置的清空事件
        if (this.options.inputClear) {
            this.options.inputClear();
        }
    };
    /**
     * @param {?} removedItem
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.tagRemoved = /**
     * @param {?} removedItem
     * @return {?}
     */
    function (removedItem) {
        var _this = this;
        /** @type {?} */
        var mapFields = this.instance.mapFields;
        /** @type {?} */
        var helpFields = Object.keys(mapFields);
        /** @type {?} */
        var bindingData = _.cloneDeep(this.bindingData);
        /** @type {?} */
        var selectedData = [];
        helpFields.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            /** @type {?} */
            var value = _this.utils.getValue(mapFields[key], bindingData);
            /** @type {?} */
            var vArr = value.split(',');
            vArr.splice(removedItem.deleteIndex, 1);
            vArr.forEach((/**
             * @param {?} v
             * @param {?} i
             * @return {?}
             */
            function (v, i) {
                if (!selectedData[i]) {
                    selectedData.push({ index: i });
                    selectedData[i][key] = v;
                }
                else {
                    selectedData[i][key] = v;
                }
            }));
            value = vArr.join(',');
            _this.utils.setValue(_this.bindingData, mapFields[key], value);
        }));
        if (selectedData.length) {
            this.instance.selectedData.emit(selectedData);
        }
        else {
            this.instance.clear.emit();
        }
        // 设计器上配置的删除单个标签事件
        if (this.options.tagRemoved) {
            this.options.tagRemoved(this.eventPrams(removedItem));
        }
    };
    /**
     * @param {?} changeData
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.selectionsChange = /**
     * @param {?} changeData
     * @return {?}
     */
    function (changeData) {
        /** @type {?} */
        var formedSelections = this.formSelectedRowData();
        this.updateControlValue(formedSelections);
        this.instance.selectedData.emit(formedSelections);
        // 设计器上配置的选中数据后事件
        if (this.options.selectionsChange) {
            this.options.selectionsChange(this.eventPrams(changeData));
        }
    };
    /**
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.formSelectedRowData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var selectedRowData = [];
        this.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            /** @type {?} */
            var defaultDisplayName = _this.instance.displayField ? item[_this.instance.displayField] : "" + item.name;
            /** @type {?} */
            var displayName = _this.instance.formatFn ? _this.instance.formatFn(item) : defaultDisplayName;
            selectedRowData.push(Object.assign({}, item, { displayName: displayName }));
        }));
        return selectedRowData.length ? selectedRowData : null;
    };
    /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    GridOrganizationSelectorComponent.prototype.eventPrams = /**
     * @private
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var p = this.eventParams($event);
        p['instance'] = this.instance;
        p['editor'] = this;
        return p;
    };
    GridOrganizationSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'grid-organization-selector',
                    template: "<div [formGroup]=\"group\" class=\"f-datagrid-cell-formgroup farris-group-auto\">\r\n    <farris-organization-selector #orgSelection style=\"width: 100%\"\r\n    [placeholder]=\"options.placeholder\" [readonly]=\"options.readonly\" [absOrgType]=\"options.absOrgType\"\r\n    [multiSelect]=\"options.multiSelect\"  [mapFields]=\"options.mapFields\" [formControlName]=\"column.field\" \r\n    [primaryField]=\"options.primaryField\" [displayField]=\"options.displayField\" [formatFn]=\"options.formatter\"\r\n    [layer]=\"options.expandLevel\" [enableHierarchicalLoading]=\"options.enableHierarchicalLoading\"\r\n    [cascadeCheck]=\"options.cascadeCheck\" [cascadeDown]=\"options.cascadeDown\" [cascadeUp]=\"options.cascadeUp\"\r\n    [showTabIds]=\"options.showTabIds\" [activeTabId]=\"options.activeTabId\" [busNum]=\"options.busNum\"\r\n    (inputClear)=\"inputClear()\" (selectionsChange)=\"selectionsChange($event)\" (tagRemoved)=\"tagRemoved($event)\">\r\n    </farris-organization-selector>\r\n</div>\r\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    GridOrganizationSelectorComponent.ctorParameters = function () { return [
        { type: Renderer2 },
        { type: ElementRef },
        { type: RuntimeStateService },
        { type: CommonUtils },
        { type: Injector }
    ]; };
    GridOrganizationSelectorComponent.propDecorators = {
        instance: [{ type: ViewChild, args: ['orgSelection',] }]
    };
    return GridOrganizationSelectorComponent;
}(DatagridBaseEditorDirective));
export { GridOrganizationSelectorComponent };
if (false) {
    /** @type {?} */
    GridOrganizationSelectorComponent.prototype.instance;
    /** @type {?} */
    GridOrganizationSelectorComponent.prototype.bindingData;
    /** @type {?} */
    GridOrganizationSelectorComponent.prototype.lookupFieldMap;
    /**
     * @type {?}
     * @private
     */
    GridOrganizationSelectorComponent.prototype.rts;
    /** @type {?} */
    GridOrganizationSelectorComponent.prototype.utils;
}
/** @type {?} */
export var OrganizationSelectorDataGridEditorProvider = { provide: GRID_EDITORS, useValue: { name: 'OrganizationSelector', value: GridOrganizationSelectorComponent }, multi: true };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC1vcmdhbml6YXRpb24tc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy91aS1vcmdhbml6YXRpb24tc2VsZWN0b3IvIiwic291cmNlcyI6WyJsaWIvZ3JpZC1vcmdhbml6YXRpb24tc2VsZWN0b3IvZ3JpZC1vcmdhbml6YXRpb24tc2VsZWN0b3IuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQXlCLFVBQVUsRUFBRSxZQUFZLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0gsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3JFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRSxPQUFPLEtBQUssQ0FBQyxNQUFNLFdBQVcsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLE1BQU0sV0FBVyxDQUFDOztJQUd4RCxnQ0FBZ0MsR0FBRztJQUN2QyxVQUFVLEVBQUUscUJBQXFCO0lBQ2pDLFFBQVEsRUFBRSxLQUFLO0lBQ2YsV0FBVyxFQUFFLEtBQUs7SUFDbEIsTUFBTSxFQUFFLFFBQVE7SUFDaEIsWUFBWSxFQUFFLE9BQU87SUFDckIsWUFBWSxFQUFFLE1BQU07Q0FDckI7QUFFRDtJQUt1RCw2REFBMkI7SUFNOUUsMkNBQ0ksTUFBaUIsRUFDakIsRUFBYyxFQUNOLEdBQXdCLEVBQ3pCLEtBQWtCLEVBQ3pCLFFBQWtCO1FBTHRCLFlBT0ksa0JBQU0sTUFBTSxFQUFFLEVBQUUsRUFBRSxRQUFRLENBQUMsU0FDOUI7UUFMVyxTQUFHLEdBQUgsR0FBRyxDQUFxQjtRQUN6QixXQUFLLEdBQUws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O1lBQ2pCLENBQUMsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztRQUNsQyxDQUFDLENBQUMsVUFBVSxDQUFDLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUM5QixDQUFDLENBQUMsUUFBUSxDQUFDLEdBQUcsSUFBSSxDQUFDO1FBQ25CLE9BQU8sQ0FBQyxDQUFDO0lBQ1gsQ0FBQzs7Z0JBbEpKLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsNEJBQTRCO29CQUN0QywrL0JBQTBEOztpQkFFM0Q7Ozs7Z0JBckI4RSxTQUFTO2dCQUE3QyxVQUFVO2dCQUMvQixtQkFBbUI7Z0JBQWhDLFdBQVc7Z0JBRGlELFFBQVE7OzsyQkF3QnhFLFNBQVMsU0FBQyxjQUFjOztJQTRJN0Isd0NBQUM7Q0FBQSxBQW5KRCxDQUt1RCwyQkFBMkIsR0E4SWpGO1NBOUlZLGlDQUFpQzs7O0lBRTFDLHFEQUFtSTs7SUFFbkksd0RBQWlCOztJQXNDakIsMkRBa0JDOzs7OztJQW5ERyxnREFBZ0M7O0lBQ2hDLGtEQUF5Qjs7O0FBc0lqQyxNQUFNLEtBQU8sMENBQTBDLEdBQUcsRUFBRSxPQUFPLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxFQUFFLElBQUksRUFBRSxzQkFBc0IsRUFBRSxLQUFLLEVBQUUsaUNBQWlDLEVBQUUsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIFJlbmRlcmVyMiwgVmlld0NoaWxkIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IENvbW1vblV0aWxzLCBSdW50aW1lU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQGZhcnJpcy91aS1jb21tb24nO1xyXG5pbXBvcnQgeyBHUklEX0VESVRPUlMgfSBmcm9tICdAZmFycmlzL3VpLWRhdGFncmlkJztcclxuaW1wb3J0IHsgRGF0YWdyaWRCYXNlRWRpdG9yRGlyZWN0aXZlIH0gZnJvbSAnQGZhcnJpcy91aS1kYXRhZ3JpZC1lZGl0b3JzJztcclxuaW1wb3J0ICogYXMgXyBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBpc051bGwsIGlzVW5kZWZpbmVkLCBvbWl0QnksIHRyaW0gfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQgeyBPcmdhbml6YXRpb25TZWxlY3RvckNvbXBvbmVudCB9IGZyb20gJy4uL29yZ2FuaXphdGlvbi1zZWxlY3Rvci5jb21wb25lbnQnO1xyXG5cclxuY29uc3Qgb3JnYW5pemF0aW9uU2VsZWN0b3JEZWZhdXRPcHRpb24gPSB7XHJcbiAgYWJzT3JnVHlwZTogJ1N5c3RlbV9vcmdhbml6YXRpb24nLFxyXG4gIHJlYWRvbmx5OiBmYWxzZSxcclxuICBwbGFjZWhvbGRlcjogJ+ivt+mAieaLqScsXHJcbiAgYnVzTnVtOiAnY29tbW9uJyxcclxuICBwcmltYXJ5RmllbGQ6ICdvcmdJZCcsXHJcbiAgZGlzcGxheUZpZWxkOiAnbmFtZSdcclxufTtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnZ3JpZC1vcmdhbml6YXRpb24tc2VsZWN0b3InLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9ncmlkLW9yZ2FuaXphdGlvbi1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vZ3JpZC1vcmdhbml6YXRpb24tc2VsZWN0b3IuY29tcG9uZW50LmNzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBHcmlkT3JnYW5pemF0aW9uU2VsZWN0b3JDb21wb25lbnQgZXh0ZW5kcyBEYXRhZ3JpZEJhc2VFZGl0b3JEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIEFmdGVyVmlld0luaXQge1xyXG5cclxuICAgIEBWaWV3Q2hpbGQoJ29yZ1NlbGVjdGlvbicpIGluc3RhbmNlOiBPcmdhbml6YXRpb25TZWxlY3RvckNvbXBvbmVudCAmIHsgY2xlYXI6IEV2ZW50RW1pdHRlcjxhbnk+OyBzZWxlY3RlZERhdGE6IEV2ZW50RW1pdHRlcjxhbnk+IH07XHJcblxyXG4gICAgYmluZGluZ0RhdGE6IGFueTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICByZW5kZXI6IFJlbmRlcmVyMixcclxuICAgICAgICBlbDogRWxlbWVudFJlZixcclxuICAgICAgICBwcml2YXRlIHJ0czogUnVudGltZVN0YXRlU2VydmljZSxcclxuICAgICAgICBwdWJsaWMgdXRpbHM6IENvbW1vblV0aWxzLFxyXG4gICAgICAgIGluamVjdG9yOiBJbmplY3RvclxyXG4gICAgKSB7XHJcbiAgICAgICAgc3VwZXIocmVuZGVyLCBlbCwgaW5qZWN0b3IpO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25Jbml0KCkge1xyXG4gICAgICAgIHN1cGVyLm5nT25Jbml0KCk7XHJcbiAgICAgICAgdGhpcy5vcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3JnYW5pemF0aW9uU2VsZWN0b3JEZWZhdXRPcHRpb24sIG9taXRCeSh0aGlzLm9wdGlvbnMsIChpdGVtVmFsdWUpID0+IGlzVW5kZWZpbmVkKGl0ZW1WYWx1ZSkgfHwgaXNOdWxsKGl0ZW1WYWx1ZSkpKTtcclxuICAgICAgICB0aGlzLmluc3RhbmNlLnNlbGVjdGVkRGF0YSA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UuY2xlYXIgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuICAgIH1cclxuXHJcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5pbnB1dEVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5uZ0NvbnRyb2wgJiZcclxuICAgICAgICAgIHRoaXMuaW5zdGFuY2UubmdDb250cm9sLmZvcm1EaXJlY3RpdmUgJiZcclxuICAgICAgICAgIHRoaXMuaW5zdGFuY2UubmdDb250cm9sLmZvcm1EaXJlY3RpdmUuZm9ybSAmJlxyXG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5uZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtLmJpbmRpbmdEYXRhXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICB0aGlzLmJpbmRpbmdEYXRhID0gdGhpcy5pbnN0YW5jZS5uZ0NvbnRyb2wuZm9ybURpcmVjdGl2ZS5mb3JtLmJpbmRpbmdEYXRhO1xyXG4gICAgICAgICAgdGhpcy5iaW5kaW5nRGF0YS5zZXRWYWx1ZSA9IChmaWVsZFBhdGgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXRpbHMuc2V0VmFsdWUoZmllbGRQYXRoLmpvaW4oJy4nKSwgdGhpcy5iaW5kaW5nRGF0YSwgdHJ1ZSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgICAgdGhpcy5iaW5kaW5nRGF0YS5nZXRWYWx1ZSA9IChmaWVsZFBhdGgpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudXRpbHMuZ2V0VmFsdWUoZmllbGRQYXRoLmpvaW4oJy4nKSwgdGhpcy5iaW5kaW5nRGF0YSwgdHJ1ZSk7XHJcbiAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBsb29rdXBGaWVsZE1hcCA9IChoZWxwRGF0YTogYW55LCBtYXBGaWVsZHM6IGFueSwgZGF0YU9iajogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKG1hcEZpZWxkcykge1xyXG4gICAgICAgICAgICBjb25zdCBoZWxwRmllbGRzID0gT2JqZWN0LmtleXMobWFwRmllbGRzKTtcclxuICAgICAgICAgICAgaGVscEZpZWxkcy5mb3JFYWNoKChoZWxwRmllbGQ6IGFueSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IHZhbCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgaWYgKGhlbHBEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhlbHBEYXRhIGluc3RhbmNlb2YgQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsID0gaGVscERhdGEubWFwKChkYXRhOiBhbnkpID0+IHsgcmV0dXJuIHRoaXMudXRpbHMuZ2V0VmFsdWUoaGVscEZpZWxkLCBkYXRhKTsgfSkuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbCA9IHRoaXMudXRpbHMuZ2V0VmFsdWUoaGVscEZpZWxkLCBoZWxwRGF0YSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWFwRmllbGRzW2hlbHBGaWVsZF0uc3BsaXQoJywnKS5mb3JFYWNoKChmZjogYW55KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybUZpZWxkID0gdHJpbShmZik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51dGlscy5zZXRWYWx1ZShkYXRhT2JqLCBmb3JtRmllbGQsIHZhbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZUNvbnRyb2xWYWx1ZShzZWxlY3RlZFJvdzogYW55KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdGFuY2UubWFwRmllbGRzICYmIHRoaXMuYmluZGluZ0RhdGEpIHtcclxuICAgICAgICAgICAgdGhpcy5sb29rdXBGaWVsZE1hcChzZWxlY3RlZFJvdywgdGhpcy5pbnN0YW5jZS5tYXBGaWVsZHMsIHRoaXMuYmluZGluZ0RhdGEpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpbnB1dENsZWFyKCkge1xyXG4gICAgICAgIHRoaXMudXBkYXRlQ29udHJvbFZhbHVlKG51bGwpO1xyXG4gICAgICAgIHRoaXMuaW5zdGFuY2UuY2xlYXIuZW1pdCgpO1xyXG4gICAgICAgIC8vIOiuvuiuoeWZqOS4iumFjee9rueahOa4heepuuS6i+S7tlxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuaW5wdXRDbGVhcikge1xyXG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMuaW5wdXRDbGVhcigpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB0YWdSZW1vdmVkKHJlbW92ZWRJdGVtOiB7XHJcbiAgICAgICAgZGVsZXRlSXRlbTogYW55LFxyXG4gICAgICAgIGRlbGV0ZUluZGV4OiBudW1iZXIsXHJcbiAgICAgICAgc2VsZWN0aW9uczogQXJyYXk8YW55PlxyXG4gICAgfSkge1xyXG4gICAgICAgIGNvbnN0IG1hcEZpZWxkcyA9IHRoaXMuaW5zdGFuY2UubWFwRmllbGRzO1xyXG4gICAgICAgIGNvbnN0IGhlbHBGaWVsZHMgPSBPYmplY3Qua2V5cyhtYXBGaWVsZHMpO1xyXG4gICAgICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gXy5jbG9uZURlZXAodGhpcy5iaW5kaW5nRGF0YSk7XHJcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWREYXRhID0gW107XHJcbiAgICBcclxuICAgICAgICBoZWxwRmllbGRzLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMudXRpbHMuZ2V0VmFsdWUobWFwRmllbGRzW2tleV0sIGJpbmRpbmdEYXRhKTtcclxuICAgICAgICAgIGNvbnN0IHZBcnIgPSB2YWx1ZS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgdkFyci5zcGxpY2UocmVtb3ZlZEl0ZW0uZGVsZXRlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgdkFyci5mb3JFYWNoKCh2LCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghc2VsZWN0ZWREYXRhW2ldKSB7XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWREYXRhLnB1c2goeyBpbmRleDogaSB9KTtcclxuICAgICAgICAgICAgICBzZWxlY3RlZERhdGFbaV1ba2V5XSA9IHY7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgc2VsZWN0ZWREYXRhW2ldW2tleV0gPSB2O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIHZhbHVlID0gdkFyci5qb2luKCcsJyk7XHJcbiAgICAgICAgICB0aGlzLnV0aWxzLnNldFZhbHVlKHRoaXMuYmluZGluZ0RhdGEsIG1hcEZpZWxkc1trZXldLCB2YWx1ZSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHNlbGVjdGVkRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMuaW5zdGFuY2Uuc2VsZWN0ZWREYXRhLmVtaXQoc2VsZWN0ZWREYXRhKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5pbnN0YW5jZS5jbGVhci5lbWl0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIOiuvuiuoeWZqOS4iumFjee9rueahOWIoOmZpOWNleS4quagh+etvuS6i+S7tlxyXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudGFnUmVtb3ZlZCkge1xyXG4gICAgICAgICAgdGhpcy5vcHRpb25zLnRhZ1JlbW92ZWQodGhpcy5ldmVudFByYW1zKHJlbW92ZWRJdGVtKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNlbGVjdGlvbnNDaGFuZ2UoY2hhbmdlRGF0YToge1xyXG4gICAgICAgIGluZm86IHN0cmluZyxcclxuICAgICAgICBkYXRhOiBBcnJheTxhbnk+XHJcbiAgICB9KSB7XHJcbiAgICAgIGNvbnN0IGZvcm1lZFNlbGVjdGlvbnMgPSB0aGlzLmZvcm1TZWxlY3RlZFJvd0RhdGEoKTtcclxuICAgICAgdGhpcy51cGRhdGVDb250cm9sVmFsdWUoZm9ybWVkU2VsZWN0aW9ucyk7XHJcbiAgICAgIHRoaXMuaW5zdGFuY2Uuc2VsZWN0ZWREYXRhLmVtaXQoZm9ybWVkU2VsZWN0aW9ucyk7XHJcbiAgICAgIC8vIOiuvuiuoeWZqOS4iumFjee9rueahOmAieS4reaVsOaNruWQjuS6i+S7tlxyXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnNlbGVjdGlvbnNDaGFuZ2UpIHtcclxuICAgICAgICB0aGlzLm9wdGlvbnMuc2VsZWN0aW9uc0NoYW5nZSh0aGlzLmV2ZW50UHJhbXMoY2hhbmdlRGF0YSkpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9ybVNlbGVjdGVkUm93RGF0YSgpIHtcclxuICAgICAgbGV0IHNlbGVjdGVkUm93RGF0YSA9IFtdO1xyXG4gICAgICB0aGlzLmluc3RhbmNlLnNlbGVjdGlvbnMuZm9yRWFjaCgoaXRlbSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGRlZmF1bHREaXNwbGF5TmFtZSA9IHRoaXMuaW5zdGFuY2UuZGlzcGxheUZpZWxkID8gaXRlbVt0aGlzLmluc3RhbmNlLmRpc3BsYXlGaWVsZF0gOiBgJHtpdGVtLm5hbWV9YDtcclxuICAgICAgICBjb25zdCBkaXNwbGF5TmFtZSA9IHRoaXMuaW5zdGFuY2UuZm9ybWF0Rm4gPyB0aGlzLmluc3RhbmNlLmZvcm1hdEZuKGl0ZW0pIDogZGVmYXVsdERpc3BsYXlOYW1lO1xyXG4gICAgICAgIHNlbGVjdGVkUm93RGF0YS5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGl0ZW0sIHsgZGlzcGxheU5hbWUgfSkpO1xyXG4gICAgICB9KVxyXG4gICAgICByZXR1cm4gc2VsZWN0ZWRSb3dEYXRhLmxlbmd0aCA/IHNlbGVjdGVkUm93RGF0YSA6IG51bGw7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBwcml2YXRlIGV2ZW50UHJhbXMoJGV2ZW50KTogYW55IHtcclxuICAgICAgY29uc3QgcCA9IHRoaXMuZXZlbnRQYXJhbXMoJGV2ZW50KTtcclxuICAgICAgcFsnaW5zdGFuY2UnXSA9IHRoaXMuaW5zdGFuY2U7XHJcbiAgICAgIHBbJ2VkaXRvciddID0gdGhpcztcclxuICAgICAgcmV0dXJuIHA7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCBPcmdhbml6YXRpb25TZWxlY3RvckRhdGFHcmlkRWRpdG9yUHJvdmlkZXIgPSB7IHByb3ZpZGU6IEdSSURfRURJVE9SUywgdXNlVmFsdWU6IHsgbmFtZTogJ09yZ2FuaXphdGlvblNlbGVjdG9yJywgdmFsdWU6IEdyaWRPcmdhbml6YXRpb25TZWxlY3RvckNvbXBvbmVudCB9LCBtdWx0aTogdHJ1ZSB9Il19