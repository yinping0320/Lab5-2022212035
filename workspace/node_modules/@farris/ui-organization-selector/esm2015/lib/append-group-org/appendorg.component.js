/**
 * @fileoverview added by tsickle
 * Generated from: lib/append-group-org/appendorg.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef, Injector, ViewChild, TemplateRef, HostBinding, NgZone } from '@angular/core';
import { ApiService } from '../../utils/api.service';
import * as _ from 'lodash-es';
import { of } from 'rxjs';
import { CommonUtil } from '../../utils/common.tool';
import { TreeTableComponent } from '@farris/ui-treetable';
import { MessagerService } from '@farris/ui-messager';
import { LoadingService } from '@farris/ui-loading';
import { LocaleService } from '@farris/ui-locale';
import { ORGANIZATION_SELECTOR_LOCALE } from '../../utils/locale';
export class AppendGroupOrgComponent {
    /**
     * @param {?} apiService
     * @param {?} cdr
     * @param {?} injector
     * @param {?} ngZone
     * @param {?} msgService
     */
    constructor(apiService, cdr, injector, ngZone, msgService) {
        this.apiService = apiService;
        this.cdr = cdr;
        this.injector = injector;
        this.ngZone = ngZone;
        this.msgService = msgService;
        this.baseCls = true;
        this.primaryField = 'orgId';
        this.pathLength = 4;
        this.originalTreeData = [];
        this.treeListData = [];
        this.treeTableCols = [];
        this.initLoad = true;
        this.loadingService = null;
        this.localeService = null;
        this.beforeClickNode = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (!this.enableHierarchicalLoading) {
                return of(true);
            }
            /*
            if (!this.multiSelect) {
                if (e.rowNode.isSelected) {
                    this.currentOrgs = [];
                } else {
                    this.currentOrgs = new Array(e.rowNode.node.data);
                }
                return of(false);
            }
            */
            // const param: OrgRequestParam = {
            //     absOrgType: this.absOrgType,
            //     notGetStopOrg: this.notGetStopOrg,
            //     getCurUser: false,
            //     parentID: e.rowNode.id,
            //     withAllSub: true,
            //     getOrgAllPath: true
            // };
            // return this.apiService.getOrganization(param).pipe(
            //     switchMap(
            //         (data: any) => {
            //             // if (data['data'].length > this.selectedLimit && !e.rowNode.isChecked) {
            //             //     this.msgService.show('warning', `亲，一次性选择了超过${this.selectedLimit}条数据~`, true);
            //             //     return of(false)
            //             // }
            //             // if (!e.rowNode.isChecked) {
            //             //     data.data.forEach(item => {
            //             //         if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.currentOrgs) === -1) {
            //             //             this.currentOrgs.push(item);
            //             //         }
            //             //     })
            //             // } else {
            //             //     this.currentOrgs.forEach((org, index) => {
            //             //         data.data.forEach(item => {
            //             //             if (org[this.primaryField] === item[this.primaryField]) {
            //             //                 this.currentOrgs.splice(index, 1);
            //             //             }
            //             //         });
            //             //     });
            //             // }
            //             // this.cdr.detectChanges();
            //             return of(true);
            //         }
            //     )
            // );
        });
        this.cdr = this.injector.get(ChangeDetectorRef);
        this.loadingService = this.injector.get(LoadingService, null);
        this.localeService = this.injector.get(LocaleService);
        if (!this.localeService.langData['organizationSelector']) {
            this.localeService.setLocaleData(ORGANIZATION_SELECTOR_LOCALE);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.treeTableCols = [
            { field: 'name', title: this.localeService.getValue("organizationSelector.organization.orgName"), template: this.orgName },
            { field: 'code', title: this.localeService.getValue("organizationSelector.organization.orgCode") }
        ];
        if (this.initLoad) {
            if (this.enableHierarchicalLoading) {
                this.hlAssembleData();
            }
            else {
                this.assembleData();
            }
            this.initLoad = false;
        }
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} e
     * @return {?}
     */
    changeSelections(e) {
        //this.multiSelect ? this.toggleChecked(e) : this.toggleSelected(e);
        this.toggleChecked(e);
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleChecked(e) {
        /** @type {?} */
        const checkeds = [];
        e && e.instance && e.instance.checkeds.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            checkeds.push(item.data);
        }));
        this.currentOrgs = _.cloneDeep(checkeds);
        if (this.currentOrgs.length == 0) {
            this.orgTree.clearCheckeds();
            this.orgTree.clearSelections();
            this.orgTree.detectChanges();
        }
    }
    /**
     * @param {?} e
     * @return {?}
     */
    toggleSelected(e) {
        /** @type {?} */
        const selected = [];
        e && e.instance && e.instance.selections.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            selected.push(item.data);
        }));
        this.currentOrgs = _.cloneDeep(selected);
        if (this.currentOrgs.length == 0) {
            this.orgTree.clearCheckeds();
            this.orgTree.clearSelections();
            this.orgTree.detectChanges();
        }
    }
    // 分层加载组织树
    /**
     * @return {?}
     */
    hlAssembleData() {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        /** @type {?} */
        const layerList = [];
        /** @type {?} */
        let layer = this.layer;
        while (layer > 0) {
            layerList.push(layer);
            layer -= 1;
        }
        param.layerList = layerList;
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.data) {
                return;
            }
            this.originalTreeData = res.data;
            if (res && res.curAbsUser && res.curAbsUser.orgAllPathInfo) {
                /** @type {?} */
                const curUserOrgPath = ((/** @type {?} */ (res.curAbsUser.orgAllPathInfo))).filter((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return !res.data.find((/**
                     * @param {?} data
                     * @return {?}
                     */
                    data => data[this.primaryField] == item[this.primaryField]));
                }));
                res.data = res.data.concat(curUserOrgPath || []);
            }
            this.treeListData = this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            this.orgTree.loadData(this.treeListData);
            //this.tickCheckedNodes();
            this.cdr.detectChanges();
            if (this.loadingService) {
                this.loadingService.close();
            }
        }));
    }
    // 全加载组织树
    /**
     * @return {?}
     */
    assembleData() {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            notGetStopOrg: this.notGetStopOrg,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (!res || !res.data) {
                return;
            }
            this.originalTreeData = res.data;
            this.treeListData = this.dataToTree(res.data, 1, res.curAbsUser.defaultOrgPath);
            this.orgTree.loadData(this.treeListData);
            // this.tickCheckedNodes();
            this.cdr.detectChanges();
            if (this.loadingService) {
                this.loadingService.close();
            }
        }));
    }
    // 确定组织是否在当前组织树内
    /**
     * @private
     * @param {?} treeListData
     * @param {?} item
     * @return {?}
     */
    inTreeList(treeListData, item) {
        for (let i = 0; i < treeListData.length; i++) {
            if (treeListData[i].id === item[this.primaryField]) {
                item.inTreeList = true;
                break;
            }
            if (treeListData[i].children.length) {
                this.inTreeList(treeListData[i].children, item);
            }
        }
    }
    // 在当前组织树内勾选所有已在群组内的组织
    /**
     * @private
     * @return {?}
     */
    tickCheckedNodes() {
        /** @type {?} */
        const ids = [];
        this.currentOrgs.forEach((/**
         * @param {?} item
         * @return {?}
         */
        item => {
            this.inTreeList(this.treeListData, item);
            if (!!item.inTreeList) {
                ids.push(item[this.primaryField]);
            }
        }));
        this.ngZone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            setTimeout((/**
             * @return {?}
             */
            () => {
                if (!ids.length) {
                    return;
                }
                if (this.multiSelect) {
                    this.orgTree.checkedNodes(ids, true, true);
                }
                else {
                    if (ids.length > 1) {
                        this.msgService.show('warning', this.localeService.getValue("organizationSelector.errorMessage.multiSelect"), true);
                        return;
                    }
                    this.orgTree.clearSelections();
                    this.orgTree.detectChanges();
                    this.orgTree.selectNode(ids.join());
                }
            }));
        }));
    }
    /**
     * 组织数据转换
     * @private
     * @param {?} plainSource 接口原始数据
     * @param {?} layer 层级
     * @param {?=} expandedPath
     * @return {?} 返回树形接口的数据
     */
    dataToTree(plainSource, layer, expandedPath = '') {
        /** @type {?} */
        const treeSource = this.dealData(plainSource, expandedPath ? expandedPath : '');
        // const parents = treeSource.filter(item => {
        //     return item.data.layer === layer;
        // });
        // this.treeData(parents, treeSource, 1);
        return treeSource;
    }
    /**
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    dealDataWhenExpandTreeNode(data, expandedPath = '') {
        /** @type {?} */
        const pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            let maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (let a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        /** @type {?} */
        const newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                /** @type {?} */
                const newsDataObj = {
                    data: {
                        orgId: item[this.primaryField],
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        layer: Number(item.layer),
                        orgAllPath: item.orgAllPath,
                        inFavorites: item.inFavorites
                    },
                    expanded: true,
                    children: []
                };
                // let expanded = [];
                // if (this.enableHierarchicalLoading) {
                //     this.nodeExpanded(newsDataObj, this.treeListData, expanded);
                // }
                // if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                //     newsDataObj.expanded = true;
                // } else {
                //     newsDataObj.expanded = false;
                //     if (this.enableHierarchicalLoading && item.isDetail === '0') {
                //         newsDataObj.leaf = false;
                //     }
                // }
                if (Number(item.layer) >= this.layer) {
                    newsDataObj.expanded = false;
                }
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                    newsDataObj.expanded = true;
                }
                if (this.enableHierarchicalLoading && item.isDetail === '0') {
                    newsDataObj.leaf = false;
                }
                newDatas.push(newsDataObj);
            }));
        }
        return newDatas;
    }
    // 预处理组织数据
    /**
     * @private
     * @param {?} data
     * @param {?=} expandedPath
     * @return {?}
     */
    dealData(data, expandedPath = '') {
        /** @type {?} */
        const pathList = [];
        if (expandedPath != '') {
            /** @type {?} */
            let maxLength = expandedPath.length / this.pathLength;
            if (this.enableHierarchicalLoading) {
                maxLength -= 1;
            }
            for (let a = 0; a < maxLength; a++) {
                pathList.push({ path: expandedPath.substring(0, 4 * (a + 1)) });
            }
        }
        /** @type {?} */
        const nodes = new Map();
        /** @type {?} */
        const newDatas = [];
        if (data.length) {
            data.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                // const newsDataObj: any = {
                //     data: {
                //         orgId: item[this.primaryField],
                //         name: item.name,
                //         path: item.path,
                //         code: item.code,
                //         layer: Number(item.layer),
                //         orgAllPath: item.orgAllPath,
                //         inFavorites: item.inFavorites
                //     },
                //     expanded: true,
                //     children: []
                // };
                // // let expanded = [];
                // // if (this.enableHierarchicalLoading) {
                // //     this.nodeExpanded(newsDataObj, this.treeListData, expanded);
                // // }
                // if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1) {
                //     newsDataObj.expanded = true;
                // } else {
                //     newsDataObj.expanded = false;
                //     if (this.enableHierarchicalLoading && item.isDetail === '0') {
                //         newsDataObj.leaf = false;
                //     }
                // }
                // // todo 分层加载需要
                // //if (this.enableHierarchicalLoading && item.isDetail === '0' && Number(item.layer) >= this.layer) {
                //     //newsDataObj.leaf = false;
                //    // newsDataObj.expanded = false;
                // //}
                // newDatas.push(newsDataObj);
                /** @type {?} */
                const path = item['path'];
                /** @type {?} */
                const parentPath = Number(item['layer']) > 1 ? ((/** @type {?} */ (item['path']))).slice(0, 4 * (Number(item['layer']) - 1)) : 'top';
                if (!nodes[path]) {
                    nodes[path] = { children: [] };
                }
                nodes[path] = {
                    data: {
                        orgId: item[this.primaryField],
                        name: item.name,
                        path: item.path,
                        code: item.code,
                        layer: Number(item.layer),
                        orgAllPath: item.orgAllPath,
                        inFavorites: item.inFavorites
                    },
                    expanded: true,
                    children: nodes[path]['children']
                };
                if (CommonUtil.findIndex(item.path, 'path', pathList) !== -1 || Number(item.layer) < this.layer) {
                    nodes[path]['expanded'] = true;
                }
                else {
                    nodes[path]['expanded'] = false;
                    if (this.enableHierarchicalLoading && item.isDetail === '0') {
                        nodes[path]['leaf'] = false;
                    }
                }
                // todo 分层加载需要
                //if (this.enableHierarchicalLoading && item.isDetail === '0' && Number(item.layer) >= this.layer) {
                //newsDataObj.leaf = false;
                // newsDataObj.expanded = false;
                //}
                if (parentPath == 'top') {
                    newDatas.push(nodes[path]);
                }
                else {
                    if (!nodes[parentPath]) {
                        nodes[parentPath] = { children: [] };
                    }
                    ((/** @type {?} */ (nodes[parentPath]['children']))).push(nodes[path]);
                }
            }));
        }
        return newDatas;
    }
    /**
     * 数据转换
     * @param {?} parents 父级节点信息
     * @param {?} treeSource 原始数据信息
     * @param {?} layer 层级
     * @return {?}
     */
    treeData(parents, treeSource, layer) {
        parents.forEach((/**
         * @param {?} parent
         * @return {?}
         */
        parent => {
            /** @type {?} */
            const parentPath = parent['data']['path'];
            /** @type {?} */
            const parentLayer = parent['data']['layer'];
            treeSource.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                if (item && item['data'] && item['data']['path']) {
                    /** @type {?} */
                    const itemPath = item['data']['path'];
                    /** @type {?} */
                    const itemLayer = item['data']['layer'];
                    /** @type {?} */
                    let targetPath;
                    if (itemPath && itemPath.length > parentPath.length) {
                        targetPath = itemPath.substr(0, Number(layer) * 4);
                    }
                    if (parentPath === targetPath && parentLayer === itemLayer - 1) {
                        parent['children'].push(item);
                    }
                    if (parentPath === targetPath) {
                        this.treeData([item], treeSource, Number(layer) + 1);
                    }
                }
            }));
        }));
    }
    // 监听组织树展开事件
    /**
     * @param {?} obj
     * @return {?}
     */
    listenTreeExpand(obj) {
        // 分层加载
        if (this.enableHierarchicalLoading && obj.children.length === 0) {
            this.getOrganizationByParentNode(obj);
        }
    }
    // 分层加载时，获取下级组织数据并为当前组织树添加子节点
    /**
     * @param {?} parentNode
     * @return {?}
     */
    getOrganizationByParentNode(parentNode) {
        if (this.loadingService) {
            this.loadingService.show();
        }
        /** @type {?} */
        const param = {
            absOrgType: this.absOrgType,
            parentID: parentNode.id,
            notGetStopOrg: this.notGetStopOrg,
            getCurUser: false,
            getOrgAllPath: true
        };
        this.apiService.getOrganization(param).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        (res) => {
            if (res && res.data) {
                /** @type {?} */
                const newDatas = [];
                res.data.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    if (CommonUtil.findIndex(item[this.primaryField], this.primaryField, this.originalTreeData) === -1) {
                        item.selectable = true;
                        this.originalTreeData.push(item);
                    }
                    newDatas.push(item);
                }));
                /** @type {?} */
                const nodes = this.dealDataWhenExpandTreeNode(newDatas);
                this.orgTree.appendChildren(nodes, parentNode);
                this.orgTree.detectChanges();
                //this.tickCheckedNodes();
                if (this.loadingService) {
                    this.loadingService.close();
                }
            }
        }));
    }
    // 返回已经该节点是否展开过
    /**
     * @private
     * @param {?} item
     * @param {?} arr
     * @param {?} expanded
     * @return {?}
     */
    nodeExpanded(item, arr, expanded) {
        for (let i = 0; i < arr.length; i++) {
            if (item.data.id === arr[i].data.id) {
                expanded[0] = arr[i].expanded;
            }
            else if (arr[i].children.length) {
                this.nodeExpanded(item, arr[i].children, expanded);
            }
        }
    }
    // 展开节点
    /**
     * @private
     * @param {?} treeData
     * @param {?} path
     * @param {?} layer
     * @return {?}
     */
    expandTreeNode(treeData, path, layer) {
        treeData.forEach((/**
         * @param {?} node
         * @return {?}
         */
        node => {
            if (path.includes(node.data.path)) {
                this.orgTree.expandNode(node.data.id);
            }
            if (node.data.layer < layer && node.children.length) {
                this.expandTreeNode(node.children, path, layer);
            }
        }));
    }
}
AppendGroupOrgComponent.decorators = [
    { type: Component, args: [{
                selector: 'append-group-org',
                template: "<!--\r\n<div style=\"background: #f9f9fc; display: flex; justify-content: space-between; border-bottom: 1px solid #EAEDF3\">\r\n    <span style=\"line-height: 22px;margin-left: 10px;font-weight: 600;color: #2a87ff;border-bottom: 2px solid #2a87ff;\r\n    padding: 8px 0;\">\u7EC4\u7EC7\u67B6\u6784</span>\r\n    <input-group style=\"width: 240px; margin: 6px 10px 6px 0;\"\r\n        [placeholder]=\"searchPlaceholder\" [(value)]=\"searchText\" [groupText]=\"groupIcon\" (enterHandle)=\"onSearch({pageIndex: 1})\"\r\n        (clickHahndle)=\"onSearch({pageIndex: 1})\" (keyup)=\"listenSearchText($event)\" (clear)=\"searchClear()\">\r\n    </input-group>\r\n</div>\r\n-->\r\n<farris-treetable #orgTree style=\"cursor:pointer\" [width]=\"'100%'\" [data]=\"treeListData\" [idField]=\"primaryField\"\r\n    [columns]=\"treeTableCols\" [singleSelect]=\"false\" [showBorder]=\"false\" [showCheckbox]=\"true\"\r\n    [showIcon]=\"false\" [showHeader]=\"true\" [fixedHeader]=\"true\" [disabled]=\"false\" [fit]=\"true\" [checkOnSelect]=\"true\" [selectOnCheck]=\"true\"\r\n    [striped]=\"true\" [cascadeCheck]=\"cascadeCheck\" [cascadeDown]=\"cascadeDown\" [cascadeUp]=\"cascadeUp\" [virtualized]=\"true\"\r\n    [keepSelect]=\"keepSelect\" [showCheckAll]=\"showCheckAll\" [onlySelectSelf]=\"true\"\r\n    (nodeChecked)=\"changeSelections($event)\" (nodeUnChecked)=\"changeSelections($event)\"\r\n    (nodeSelected)=\"changeSelections($event)\" (nodeUnSelect)=\"changeSelections($event)\"\r\n    (expand)=\"listenTreeExpand($event)\" class=\"fos-treetable\">\r\n</farris-treetable>\r\n\r\n<!-- \u7EC4\u7EC7\u6811\u6A21\u677F -->\r\n<ng-template #orgName let-ctx>\r\n    <span style=\"font-size: 13px;\" title=\"{{ctx.node.data.name}}\">{{ctx.node.data.name}}</span>\r\n</ng-template>",
                styles: [":host{height:100%;overflow:hidden;display:-webkit-box;display:flex;background:#fff;width:100%;border-radius:10px;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;border:1px solid #dee1ea}"]
            }] }
];
/** @nocollapse */
AppendGroupOrgComponent.ctorParameters = () => [
    { type: ApiService },
    { type: ChangeDetectorRef },
    { type: Injector },
    { type: NgZone },
    { type: MessagerService }
];
AppendGroupOrgComponent.propDecorators = {
    baseCls: [{ type: HostBinding, args: ['class.f-utils-fill-flex-column',] }],
    orgTree: [{ type: ViewChild, args: ['orgTree',] }],
    orgName: [{ type: ViewChild, args: ['orgName',] }],
    primaryField: [{ type: Input }],
    enableHierarchicalLoading: [{ type: Input }],
    notGetStopOrg: [{ type: Input }],
    layer: [{ type: Input }],
    multiSelect: [{ type: Input }],
    absOrgType: [{ type: Input }],
    cascadeCheck: [{ type: Input }],
    cascadeDown: [{ type: Input }],
    cascadeUp: [{ type: Input }],
    keepSelect: [{ type: Input }],
    showCheckAll: [{ type: Input }],
    selectedLimit: [{ type: Input }],
    pathLength: [{ type: Input }],
    virtualizedLoad: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    AppendGroupOrgComponent.prototype.baseCls;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.orgTree;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.orgName;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.primaryField;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.enableHierarchicalLoading;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.notGetStopOrg;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.layer;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.multiSelect;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.absOrgType;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeCheck;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeDown;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.cascadeUp;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.keepSelect;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.showCheckAll;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.selectedLimit;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.pathLength;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.virtualizedLoad;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.originalTreeData;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.treeListData;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.treeTableCols;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.currentOrgs;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.initLoad;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.localeService;
    /** @type {?} */
    AppendGroupOrgComponent.prototype.beforeClickNode;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.apiService;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.cdr;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AppendGroupOrgComponent.prototype.msgService;
}
//# sourceMappingURL=data:application/json;base64,