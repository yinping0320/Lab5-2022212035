/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-aggregation.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BindingList } from '@farris/mobile-devkit';
import { EntityTraversingService } from './entity-traversing.service';
/**
 * @record
 */
function SplitedPath() { }
if (false) {
    /** @type {?} */
    SplitedPath.prototype.listPath;
    /** @type {?} */
    SplitedPath.prototype.propPath;
}
/**
 * 实体聚合服务
 */
class EntityAggregationService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.traversingService = this.viewModelContext.injector.get(EntityTraversingService);
    }
    /**
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 获取path对应列表记录的条数
     * @param {?} path
     * @return {?}
     */
    count(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    }
    /**
     * 获取path对应字段的和
     * @param {?} path
     * @return {?}
     */
    sum(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const total = entityListData.reduce((/**
         * @param {?} accTotal
         * @param {?} entityData
         * @return {?}
         */
        (accTotal, entityData) => {
            /** @type {?} */
            let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }), 0);
        return total;
    }
    /**
     * 获取path对应字段的平均值
     * @param {?} path
     * @return {?}
     */
    avg(path) {
        /** @type {?} */
        const count = this.count(path);
        /** @type {?} */
        const total = this.sum(path);
        return count !== 0 ? total / count : 0;
    }
    /**
     * 获取path对应字段的最大值
     * @param {?} path
     * @return {?}
     */
    max(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const max = entityListData.reduce((/**
         * @param {?} accMax
         * @param {?} entityData
         * @return {?}
         */
        (accMax, entityData) => {
            /** @type {?} */
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }), null);
        return max ? max : 0;
    }
    /**
     * 获取path对应字段的最小值
     * @param {?} path
     * @return {?}
     */
    min(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const min = entityListData.reduce((/**
         * @param {?} accMin
         * @param {?} entityData
         * @return {?}
         */
        (accMin, entityData) => {
            /** @type {?} */
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }), null);
        return min ? min : 0;
    }
    /**
     * 获取属性值
     * @private
     * @param {?} entityData
     * @param {?} path
     * @return {?}
     */
    getPropValue(entityData, path) {
        /** @type {?} */
        let currentData = entityData;
        path.forEach((/**
         * @param {?} pathItem
         * @return {?}
         */
        (pathItem) => {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        }));
        return currentData;
    }
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @private
     * @param {?} path
     * @return {?} 形如 {parentListPath: [], propertyPath: []}
     */
    splitPath(path) {
        /** @type {?} */
        const listPath = path.concat([]);
        /** @type {?} */
        const propPath = [];
        /** @type {?} */
        let currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            /** @type {?} */
            const propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.traversingService;
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.viewModelContext;
}
export { EntityAggregationService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5LWFnZ3JlZ2F0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2VudGl0eS1zZXJ2aWNlcy9lbnRpdHktYWdncmVnYXRpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBaUMsV0FBVyxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDbkYsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7Ozs7QUFFdEUsMEJBR0M7OztJQUZDLCtCQUFtQjs7SUFDbkIsK0JBQW1COzs7OztBQU1yQixNQUFNLHdCQUF3Qjs7OztJQVE1QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNwRCxJQUFJLENBQUMsaUJBQWlCLEdBQUssSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQTBCLHVCQUF1QixDQUFDLENBQUM7SUFDbEgsQ0FBQzs7Ozs7SUFSRCxJQUFZLFdBQVc7UUFDckIsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0lBQzNDLENBQUM7Ozs7OztJQVdNLEtBQUssQ0FBQyxJQUFjOztjQUNuQixXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUM7O2NBQ2xDLGNBQWMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztRQUNyRixPQUFPLGNBQWMsQ0FBQyxNQUFNLENBQUM7SUFDL0IsQ0FBQzs7Ozs7O0lBS00sR0FBRyxDQUFDLElBQWM7O2NBQ2pCLFdBQVcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQzs7Y0FDbEMsY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsUUFBUSxD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Q0FBQztnQkFDbkIsT0FBTzthQUNSO1lBQ0QsV0FBVyxHQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN0QyxDQUFDLEVBQUMsQ0FBQztRQUVILE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Ozs7Ozs7SUFNTyxTQUFTLENBQUMsSUFBYzs7Y0FDeEIsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDOztjQUMxQixRQUFRLEdBQUcsRUFBRTs7WUFDZixXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDO1FBQ3JELE9BQU8sV0FBVyxZQUFZLFdBQVcsS0FBSyxJQUFJLEVBQUU7O2tCQUM1QyxZQUFZLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRTtZQUNuQyxJQUFJLENBQUMsWUFBWSxFQUFFO2dCQUNqQixPQUFPO2FBQ1I7WUFDRCxRQUFRLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQy9CLFdBQVcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsQ0FBQztTQUNuRDtRQUVELE9BQU87WUFDTCxRQUFRLEVBQUUsUUFBUTtZQUNsQixRQUFRLEVBQUUsUUFBUTtTQUNuQixDQUFDO0lBQ0osQ0FBQztDQUVGOzs7Ozs7SUFuSEMscURBQW1EOzs7OztJQUV2QyxvREFBMEM7O0FBbUh4RCxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQsIEJpbmRpbmdEYXRhLCBCaW5kaW5nTGlzdCB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWRldmtpdCc7XHJcbmltcG9ydCB7IEVudGl0eVRyYXZlcnNpbmdTZXJ2aWNlIH0gZnJvbSAnLi9lbnRpdHktdHJhdmVyc2luZy5zZXJ2aWNlJztcclxuXHJcbmludGVyZmFjZSBTcGxpdGVkUGF0aCB7XHJcbiAgbGlzdFBhdGg6IHN0cmluZ1tdO1xyXG4gIHByb3BQYXRoOiBzdHJpbmdbXTtcclxufVxyXG5cclxuLyoqXHJcbiAqIOWunuS9k+iBmuWQiOacjeWKoVxyXG4gKi9cclxuY2xhc3MgRW50aXR5QWdncmVnYXRpb25TZXJ2aWNlIHtcclxuXHJcbiAgcHJpdmF0ZSBnZXQgYmluZGluZ0RhdGEoKTogQmluZGluZ0RhdGEge1xyXG4gICAgcmV0dXJuIHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgdHJhdmVyc2luZ1NlcnZpY2U6IEVudGl0eVRyYXZlcnNpbmdTZXJ2aWNlO1xyXG5cclxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcclxuICAgIHRoaXMudHJhdmVyc2luZ1NlcnZpY2UgICA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3Rvci5nZXQ8RW50aXR5VHJhdmVyc2luZ1NlcnZpY2U+KEVudGl0eVRyYXZlcnNpbmdTZXJ2aWNlKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnBhdGjlr7nlupTliJfooajorrDlvZXnmoTmnaHmlbBcclxuICAgKi9cclxuICBwdWJsaWMgY291bnQocGF0aDogc3RyaW5nW10pOiBudW1iZXIge1xyXG4gICAgY29uc3Qgc3BsaXRlZFBhdGggPSB0aGlzLnNwbGl0UGF0aChwYXRoKTtcclxuICAgIGNvbnN0IGVudGl0eUxpc3REYXRhID0gdGhpcy50cmF2ZXJzaW5nU2VydmljZS5nZXRFbnRpdHlMaXN0RGF0YShzcGxpdGVkUGF0aC5saXN0UGF0aCk7XHJcbiAgICByZXR1cm4gZW50aXR5TGlzdERhdGEubGVuZ3RoO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WcGF0aOWvueW6lOWtl+auteeahOWSjFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdW0ocGF0aDogc3RyaW5nW10pIHtcclxuICAgIGNvbnN0IHNwbGl0ZWRQYXRoID0gdGhpcy5zcGxpdFBhdGgocGF0aCk7XHJcbiAgICBjb25zdCBlbnRpdHlMaXN0RGF0YSA9IHRoaXMudHJhdmVyc2luZ1NlcnZpY2UuZ2V0RW50aXR5TGlzdERhdGEoc3BsaXRlZFBhdGgubGlzdFBhdGgpO1xyXG5cclxuICAgIGNvbnN0IHRvdGFsID0gZW50aXR5TGlzdERhdGEucmVkdWNlKChhY2NUb3RhbDogbnVtYmVyLCBlbnRpdHlEYXRhOiBhbnkpID0+IHtcclxuICAgICAgbGV0IHByb3BWYWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5nZXRQcm9wVmFsdWUoZW50aXR5RGF0YSwgc3BsaXRlZFBhdGgucHJvcFBhdGgpKTtcclxuICAgICAgcHJvcFZhbHVlID0gaXNOYU4ocHJvcFZhbHVlKSA/IDAgOiBwcm9wVmFsdWU7XHJcbiAgICAgIGFjY1RvdGFsICs9IHByb3BWYWx1ZTtcclxuICAgICAgcmV0dXJuIGFjY1RvdGFsO1xyXG4gICAgfSwgMCk7XHJcbiAgICByZXR1cm4gdG90YWw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDojrflj5ZwYXRo5a+55bqU5a2X5q6155qE5bmz5Z2H5YC8XHJcbiAgICovXHJcbiAgcHVibGljIGF2ZyhwYXRoOiBzdHJpbmdbXSkge1xyXG4gICAgY29uc3QgY291bnQgPSB0aGlzLmNvdW50KHBhdGgpO1xyXG4gICAgY29uc3QgdG90YWwgPSB0aGlzLnN1bShwYXRoKTtcclxuICAgIHJldHVybiBjb3VudCAhPT0gMCA/IHRvdGFsIC8gY291bnQgOiAwO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6I635Y+WcGF0aOWvueW6lOWtl+auteeahOacgOWkp+WAvFxyXG4gICAqL1xyXG4gIHB1YmxpYyBtYXgocGF0aDogc3RyaW5nW10pOiBudW1iZXIge1xyXG4gICAgY29uc3Qgc3BsaXRlZFBhdGggPSB0aGlzLnNwbGl0UGF0aChwYXRoKTtcclxuICAgIGNvbnN0IGVudGl0eUxpc3REYXRhID0gdGhpcy50cmF2ZXJzaW5nU2VydmljZS5nZXRFbnRpdHlMaXN0RGF0YShzcGxpdGVkUGF0aC5saXN0UGF0aCk7XHJcblxyXG4gICAgY29uc3QgbWF4ID0gIGVudGl0eUxpc3REYXRhLnJlZHVjZSgoYWNjTWF4OiBudW1iZXIsIGVudGl0eURhdGE6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wVmFsdWUgPSBwYXJzZUZsb2F0KHRoaXMuZ2V0UHJvcFZhbHVlKGVudGl0eURhdGEsIHNwbGl0ZWRQYXRoLnByb3BQYXRoKSk7XHJcbiAgICAgIGlmIChpc05hTihwcm9wVmFsdWUpID09PSBmYWxzZSAmJiAoICFhY2NNYXggfHwgcHJvcFZhbHVlID4gYWNjTWF4KSkge1xyXG4gICAgICAgIGFjY01heCA9IHByb3BWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWNjTWF4O1xyXG4gICAgfSwgbnVsbCk7XHJcbiAgICByZXR1cm4gbWF4ID8gbWF4IDogMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlnBhdGjlr7nlupTlrZfmrrXnmoTmnIDlsI/lgLxcclxuICAgKi9cclxuICBwdWJsaWMgbWluKHBhdGg6IHN0cmluZ1tdKTogbnVtYmVyIHtcclxuICAgIGNvbnN0IHNwbGl0ZWRQYXRoID0gdGhpcy5zcGxpdFBhdGgocGF0aCk7XHJcbiAgICBjb25zdCBlbnRpdHlMaXN0RGF0YSA9IHRoaXMudHJhdmVyc2luZ1NlcnZpY2UuZ2V0RW50aXR5TGlzdERhdGEoc3BsaXRlZFBhdGgubGlzdFBhdGgpO1xyXG5cclxuICAgIGNvbnN0IG1pbiA9IGVudGl0eUxpc3REYXRhLnJlZHVjZSgoYWNjTWluOiBudW1iZXIsIGVudGl0eURhdGE6IGFueSkgPT4ge1xyXG4gICAgICBjb25zdCBwcm9wVmFsdWUgPSBwYXJzZUZsb2F0KHRoaXMuZ2V0UHJvcFZhbHVlKGVudGl0eURhdGEsIHNwbGl0ZWRQYXRoLnByb3BQYXRoKSk7XHJcbiAgICAgIGlmIChpc05hTihwcm9wVmFsdWUpID09PSBmYWxzZSAmJiAoICFhY2NNaW4gfHwgcHJvcFZhbHVlIDwgYWNjTWluKSkge1xyXG4gICAgICAgIGFjY01pbiA9IHByb3BWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWNjTWluO1xyXG4gICAgfSwgbnVsbCk7XHJcbiAgICByZXR1cm4gbWluID8gbWluIDogMDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluWxnuaAp+WAvFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0UHJvcFZhbHVlKGVudGl0eURhdGE6IGFueSwgcGF0aDogc3RyaW5nW10pIHtcclxuICAgIGxldCBjdXJyZW50RGF0YSA9IGVudGl0eURhdGE7XHJcbiAgICBwYXRoLmZvckVhY2goKHBhdGhJdGVtOiBzdHJpbmcpID0+IHtcclxuXHJcbiAgICAgIC8vIOaPkOWJjemAgOWHuueahOmDvemHjee9ruS4um51bGzvvIzkuLvopoHpkojlr7nlhbPogZTlr7nosaHmnKrotYvlgLzlnLrmma9cclxuICAgICAgaWYgKCFjdXJyZW50RGF0YSkge1xyXG4gICAgICAgIGN1cnJlbnREYXRhID0gbnVsbDtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY3VycmVudERhdGEgPSBjdXJyZW50RGF0YVtwYXRoSXRlbV07XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gY3VycmVudERhdGE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDliIbpmpTot6/lvoTvvIzliIbpmpTnrKbliJfooajot6/lvoTlkozlsZ7mgKfot6/lvoRcclxuICAgKiBAcmV0dXJuIOW9ouWmgiB7cGFyZW50TGlzdFBhdGg6IFtdLCBwcm9wZXJ0eVBhdGg6IFtdfVxyXG4gICAqL1xyXG4gIHByaXZhdGUgc3BsaXRQYXRoKHBhdGg6IHN0cmluZ1tdKTogU3BsaXRlZFBhdGgge1xyXG4gICAgY29uc3QgbGlzdFBhdGggPSBwYXRoLmNvbmNhdChbXSk7XHJcbiAgICBjb25zdCBwcm9wUGF0aCA9IFtdO1xyXG4gICAgbGV0IGN1cnJlbnROb2RlID0gdGhpcy5iaW5kaW5nRGF0YS5nZXRWYWx1ZShsaXN0UGF0aCk7XHJcbiAgICB3aGlsZSAoY3VycmVudE5vZGUgaW5zdGFuY2VvZiBCaW5kaW5nTGlzdCAhPT0gdHJ1ZSkge1xyXG4gICAgICBjb25zdCBwcm9wUGF0aEl0ZW0gPSBsaXN0UGF0aC5wb3AoKTtcclxuICAgICAgaWYgKCFwcm9wUGF0aEl0ZW0pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgcHJvcFBhdGgudW5zaGlmdChwcm9wUGF0aEl0ZW0pO1xyXG4gICAgICBjdXJyZW50Tm9kZSA9IHRoaXMuYmluZGluZ0RhdGEuZ2V0VmFsdWUobGlzdFBhdGgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB7XHJcbiAgICAgIGxpc3RQYXRoOiBsaXN0UGF0aCxcclxuICAgICAgcHJvcFBhdGg6IHByb3BQYXRoXHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEVudGl0eUFnZ3JlZ2F0aW9uU2VydmljZSB9O1xyXG4iXX0=