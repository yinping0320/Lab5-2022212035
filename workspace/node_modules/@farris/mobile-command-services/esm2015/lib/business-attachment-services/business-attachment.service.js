/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/business-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMPTY, forkJoin, of } from 'rxjs';
import { tap, switchMap, map, filter, take } from 'rxjs/operators';
// import { cloneDeep } from 'lodash-es';
import { BindingPathConverter, HttpMethods, DataChangeType } from '@farris/mobile-devkit';
import { AttachmentUtil } from './business-attachment.util';
/**
 * 附件服务
 */
class BusinessAttachmentService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     * @param {?} entityService
     * @param {?} removeDataService
     * @param {?} attachDataService
     */
    constructor(viewModelContext, entityService, removeDataService, attachDataService) {
        /**
         * 默认根目录
         */
        this.defaultRootDirId = 'default-root';
        this.viewModelContext = viewModelContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.removeDataService = removeDataService;
    }
    /**
     * 默认子目录
     * @private
     * @return {?}
     */
    get defaultParentDirName() {
        return this.viewModelContext.bindingData.list.currentId;
    }
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?} filters
     * @param {?} sorts
     * @return {?}
     */
    loadAttachmentRows(url, filters, sorts) {
        /** @type {?} */
        const attachContext = this.getAttachContext();
        /** @type {?} */
        const befRepository = ((/** @type {?} */ (this.viewModelContext.repository)));
        /** @type {?} */
        const sessionService = befRepository.sessionService;
        /** @type {?} */
        const apiProxy = befRepository.apiProxy;
        // 组织params
        /** @type {?} */
        const params = {};
        if (typeof filters === 'string') {
            filters = JSON.parse(filters);
        }
        if (typeof sorts === 'string') {
            sorts = JSON.parse(sorts);
        }
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filters || null,
            SortConditions: sorts || null,
            IsUsePagination: false,
            Pagination: {
                PageIndex: 1,
                PageSize: 0,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        const entityFilterString = JSON.stringify(entityFilter);
        params.entityFilter = entityFilterString;
        // 组织body
        /** @type {?} */
        const body = {
            dataChange: [],
            variableChange: null
        }
        // 赋值be的url
        ;
        // 赋值be的url
        befRepository.apiProxy.setAssociatedUrl(url);
        return this.waitForBeSession().pipe(switchMap((/**
         * @return {?}
         */
        () => {
            url = `${url}/extension/query`;
            /** @type {?} */
            const requestConfig = {
                headers: sessionService.extendRequestHeaders({}),
                params: params,
                body
            };
            /** @type {?} */
            const query$ = apiProxy.httpClient.request(HttpMethods.PUT, url, requestConfig).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                /** @type {?} */
                const attachListData = result.returnValue.result;
                // 赋值当前所有数据
                attachContext.setData(JSON.parse(JSON.stringify(attachListData)));
                // 赋值缓存起来
                attachContext.updateData(JSON.parse(JSON.stringify(attachListData)));
                return attachListData;
            })));
            return query$;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    waitForBeSession() {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (this.viewModelContext.repository));
        /** @type {?} */
        const sessionService = befRepository.sessionService;
        return sessionService.getBeSessionExisted().pipe(filter((/**
         * @param {?} beSessionExisted
         * @return {?}
         */
        (beSessionExisted) => {
            return beSessionExisted === true;
        })), take(1));
    }
    /**
     * 同步变更
     * @param {?} url
     * @return {?}
     */
    syncAttachmentRowChanges(url) {
        /** @type {?} */
        const attachContext = this.getAttachContext() || {};
        /** @type {?} */
        const changeDetails = AttachmentUtil.getChangeDetails(attachContext.oldListData, attachContext.listData);
        if (!changeDetails || changeDetails.length === 0) {
            return of(false);
        }
        /** @type {?} */
        const changedRowId = changeDetails[0].ChangeInfo.DataId;
        /** @type {?} */
        const requestInfo = {
            dataChange: changeDetails,
            variableChange: null
        };
        /** @type {?} */
        const requestConfig = {
            body: requestInfo
        };
        /** @type {?} */
        const apiProxy = ((/** @type {?} */ (this.viewModelContext.repository))).apiProxy;
        url = `${url}/extension/retrieve/${changedRowId}`;
        return apiProxy.request(HttpMethods.PUT, url, requestConfig, true).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const context = attachContext.context;
            /** @type {?} */
            const data = context.getData();
            // goBack之后  更新缓存后的值
            context.updateData(JSON.parse(JSON.stringify(data)));
            return e;
        })));
    }
    /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
        /** @type {?} */
        const result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
        return result$;
    }
    /**
     * 上传多个文件
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    uploadAndBatchAddRows(url, attachmentInfoFieldPath) {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        // 附件相关信息
        /** @type {?} */
        const rootDirId = commandContext.eventParams.rootId;
        /** @type {?} */
        const parentDirName = commandContext.eventParams.parentDirName;
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const context = commandContext.eventParams.context;
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        /** @type {?} */
        const uploadUrl = `${url}/service/batchuploadattachment`;
        return this.attachDataService.updateRows(uploadUrl, attachmentInfoFieldPath, attachmentInfos).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // 追加数据
            context.appendData(e);
            /** @type {?} */
            const dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            dataId => {
                // 添加标记
                this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Add });
            }));
            return e;
        })));
    }
    /**
     * 批量删除附件所在的行
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    removeAttachmentRows(url, attachmentInfoFieldPath) {
        /** @type {?} */
        const context = this['context'].eventParams.context;
        if (!attachmentInfoFieldPath) {
            return EMPTY;
        }
        /** @type {?} */
        const dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
        // 如果是主表
        if (attachmentInfoFieldPath.split('/').length <= 2) {
            /** @type {?} */
            const removeUrl = `${url}/extension/batchdelete`;
            return this.removeDataService.removeByBusinessIds(removeUrl, dataIds).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                dataIds.forEach((/**
                 * @param {?} dataId
                 * @return {?}
                 */
                dataId => {
                    context.removeDataById(dataId);
                    // 添加标记
                    this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Delete });
                }));
            })));
        }
        else {
            // 如果是子表
            /** @type {?} */
            const removeObservables = [];
            if (dataIds.length === 0) {
                alert('请选择要删除的文件');
            }
            /** @type {?} */
            const bindingListPath = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            (dataId) => {
                /** @type {?} */
                const removeObservable = this.removeDataService.removeByBusinessPathAndId(url, bindingListPath, dataId);
                removeObservables.push(removeObservable);
            }));
            return forkJoin(removeObservables).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                console.log(e);
                return e;
            })));
        }
    }
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    getUploadFileInfosFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        const uploadFileInfos = (/** @type {?} */ (commandContext.eventParams.data));
        if (!uploadFileInfos) {
            return [];
        }
        return uploadFileInfos;
    }
    /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} context
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getDataIdsToRemove(context, attachmentInfoFieldPath) {
        /** @type {?} */
        const attachIds = this.getAttachmentIdsToRemoveFromContext();
        /** @type {?} */
        const dataIds = [];
        attachIds.forEach((/**
         * @param {?} attachId
         * @return {?}
         */
        (attachId) => {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            /** @type {?} */
            const dataId = this.convertAttachmentIdToDataId(context, attachId, attachmentInfoFieldPath);
            dataIds.push(dataId);
        }));
        return dataIds;
    }
    /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    getAttachmentIdsToRemoveFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        return commandContext.eventParams.data.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        dataItem => {
            return Object.prototype.toString.call(dataItem) === '[object Object]' ? dataItem.metadataId : dataItem;
        }));
        // return commandContext.eventParams.data as string[];
    }
    /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} context
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    convertAttachmentIdToDataId(context, fileId, attachmentInfoFieldPath) {
        // 解析路径
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        /** @type {?} */
        const attachFieldName = attachInfoBindingPath.pop();
        /** @type {?} */
        const attachListBindingPath = attachInfoBindingPath;
        // 获取附件id数组
        // const entityListData = this.entityService.getEntityListData(attachListBindingPath);
        /** @type {?} */
        const entityListData = context.data;
        /** @type {?} */
        const targetEntityData = entityListData.find((/**
         * @param {?} entityData
         * @return {?}
         */
        (entityData) => {
            if (entityData[attachFieldName]) {
                /** @type {?} */
                const attachmentId = entityData[attachFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        }));
        return targetEntityData.id;
    }
    /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getBindingListPathWithAttachments(attachmentInfoFieldPath) {
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        attachInfoBindingPath.pop();
        /** @type {?} */
        const bindingListPath = attachInfoBindingPath;
        return '/' + bindingListPath.join('/');
    }
    /**
     * 获取附件组件上下文
     * @private
     * @return {?}
     */
    getAttachContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        const attachContext = commandContext && commandContext.eventParams ? commandContext.eventParams : {};
        return attachContext;
    }
}
if (false) {
    /**
     * 默认根目录
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.defaultRootDirId;
    /**
     * 视图模型
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.viewModelContext;
    /**
     * 附件数据服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.attachDataService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.entityService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.removeDataService;
}
export { BusinessAttachmentService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVzaW5lc3MtYXR0YWNobWVudC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9idXNpbmVzcy1hdHRhY2htZW50LXNlcnZpY2VzL2J1c2luZXNzLWF0dGFjaG1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBYyxLQUFLLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN2RCxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLGdCQUFnQixDQUFDOztBQUVuRSxPQUFPLEVBQzZCLG9CQUFvQixFQUNWLFdBQVcsRUFDdkQsY0FBYyxFQUNmLE1BQU0sdUJBQXVCLENBQUM7QUFHL0IsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDRCQUE0QixDQUFDOzs7O0FBUzVELE1BQU0seUJBQXlCOzs7Ozs7OztJQXFDN0IsWUFDRSxnQkFBa0MsRUFBRSxhQUE0QixFQUNoRSxpQkFBb0MsRUFBRSxpQkFBZ0Q7Ozs7UUFsQ2hGLHFCQUFnQixHQUFHLGNBQWMsQ0FBQztRQXFDeEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3pDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxpQkFBaUIsQ0FBQztRQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLGFBQWEsQ0FBQztRQUNuQyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsaUJBQWlCLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBcENELElBQVksb0JBQW9CO1FBQzlCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO0lBQzFELENBQUM7Ozs7Ozs7O0lBd0NNLGtCQUFrQixDQUFDLEdBQVcsRUFBRSxPQUFjLEVBQUUsS0FBWTs7Y0FF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aUJBQ2I7YUFDRjtRQUNILENBQUMsRUFBQztRQUVGLE9BQU8sZ0JBQWdCLENBQUMsRUFBRSxDQUFDO0lBQzdCLENBQUM7Ozs7Ozs7SUFLTyxpQ0FBaUMsQ0FBQyx1QkFBK0I7O2NBQ2pFLHFCQUFxQixHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLHVCQUF1QixDQUFDO1FBQzlGLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxDQUFDOztjQUN0QixlQUFlLEdBQUcscUJBQXFCO1FBQzdDLE9BQU8sR0FBRyxHQUFHLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDekMsQ0FBQzs7Ozs7O0lBS08sZ0JBQWdCOztjQUNoQixjQUFjLEdBQUcsbUJBQUEsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFrQjs7Y0FDbEQsYUFBYSxHQUFHLGNBQWMsSUFBSSxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQ3BHLE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7Q0FJRjs7Ozs7OztJQXRWQyxxREFBMEM7Ozs7OztJQVkxQyxxREFBMkM7Ozs7OztJQUszQyxzREFBeUQ7Ozs7OztJQUt6RCxrREFBcUM7Ozs7OztJQUtyQyxzREFBNkM7O0FBNlQvQyxPQUFPLEVBQUUseUJBQXlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIEVNUFRZLCBmb3JrSm9pbiwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgdGFwLCBzd2l0Y2hNYXAsIG1hcCwgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG4vLyBpbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gtZXMnO1xyXG5pbXBvcnQge1xyXG4gIFZpZXdNb2RlbENvbnRleHQsIENvbW1hbmRDb250ZXh0LCBCaW5kaW5nUGF0aENvbnZlcnRlcixcclxuICBIdHRwUmVxdWVzdENvbmZpZywgSHR0cFBhcmFtcywgSHR0cEhlYWRlcnMsIEh0dHBNZXRob2RzLFxyXG4gIERhdGFDaGFuZ2VUeXBlXHJcbn0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSwgUmVxdWVzdEluZm8gfSBmcm9tICdAZmFycmlzL21vYmlsZS1iZWYnO1xyXG5pbXBvcnQgeyBCdXNpbmVzc1VwbG9hZEZpbGVJbmZvIH0gZnJvbSAnLi90eXBlcyc7XHJcbmltcG9ydCB7IEF0dGFjaG1lbnRVdGlsIH0gZnJvbSAnLi9idXNpbmVzcy1hdHRhY2htZW50LnV0aWwnO1xyXG5pbXBvcnQgeyBCdXNpbmVzc0F0dGFjaG1lbnREYXRhU2VydmljZSB9IGZyb20gJy4vYnVzaW5lc3MtYXR0YWNobWVudC1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBFbnRpdHlTZXJ2aWNlIH0gZnJvbSAnLi4vZW50aXR5LXNlcnZpY2VzL2luZGV4JztcclxuaW1wb3J0IHsgUmVtb3ZlRGF0YVNlcnZpY2UgfSBmcm9tICcuLi9kYXRhLXNlcnZpY2VzL3JlbW92ZS1kYXRhLnNlcnZpY2UnO1xyXG5cclxuXHJcbi8qKlxyXG4gKiDpmYTku7bmnI3liqFcclxuICovXHJcbmNsYXNzIEJ1c2luZXNzQXR0YWNobWVudFNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDpu5jorqTmoLnnm67lvZVcclxuICAgKi9cclxuICBwcml2YXRlIGRlZmF1bHRSb290RGlySWQgPSAnZGVmYXVsdC1yb290JztcclxuXHJcbiAgLyoqXHJcbiAgICog6buY6K6k5a2Q55uu5b2VXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBnZXQgZGVmYXVsdFBhcmVudERpck5hbWUoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SWQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDop4blm77mqKHlnotcclxuICAgKi9cclxuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIOmZhOS7tuaVsOaNruacjeWKoVxyXG4gICAqL1xyXG4gIHByaXZhdGUgYXR0YWNoRGF0YVNlcnZpY2U6IEJ1c2luZXNzQXR0YWNobWVudERhdGFTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDlrp7kvZPmnI3liqFcclxuICAgKi9cclxuICBwcml2YXRlIGVudGl0eVNlcnZpY2U6IEVudGl0eVNlcnZpY2U7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWunuS9k+acjeWKoVxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVtb3ZlRGF0YVNlcnZpY2U6IFJlbW92ZURhdGFTZXJ2aWNlO1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQsIGVudGl0eVNlcnZpY2U6IEVudGl0eVNlcnZpY2UsXHJcbiAgICByZW1vdmVEYXRhU2VydmljZTogUmVtb3ZlRGF0YVNlcnZpY2UsIGF0dGFjaERhdGFTZXJ2aWNlOiBCdXNpbmVzc0F0dGFjaG1lbnREYXRhU2VydmljZSxcclxuICApIHtcclxuXHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gICAgdGhpcy5hdHRhY2hEYXRhU2VydmljZSA9IGF0dGFjaERhdGFTZXJ2aWNlO1xyXG4gICAgdGhpcy5lbnRpdHlTZXJ2aWNlID0gZW50aXR5U2VydmljZTtcclxuICAgIHRoaXMucmVtb3ZlRGF0YVNlcnZpY2UgPSByZW1vdmVEYXRhU2VydmljZTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDojrflj5bliJfooajmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgbG9hZEF0dGFjaG1lbnRSb3dzKHVybDogc3RyaW5nLCBmaWx0ZXJzOiBhbnlbXSwgc29ydHM6IGFueVtdKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHJcbiAgICBjb25zdCBhdHRhY2hDb250ZXh0ID0gdGhpcy5nZXRBdHRhY2hDb250ZXh0KCk7XHJcbiAgICBjb25zdCBiZWZSZXBvc2l0b3J5ID0gKHRoaXMudmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5IGFzIEJlZlJlcG9zaXRvcnk8YW55Pik7XHJcbiAgICBjb25zdCBzZXNzaW9uU2VydmljZSA9IGJlZlJlcG9zaXRvcnkuc2Vzc2lvblNlcnZpY2U7XHJcbiAgICBjb25zdCBhcGlQcm94eSA9IGJlZlJlcG9zaXRvcnkuYXBpUHJveHk7XHJcblxyXG4gICAgLy8g57uE57uHcGFyYW1zXHJcbiAgICBjb25zdCBwYXJhbXM6IEh0dHBQYXJhbXMgPSB7fTtcclxuICAgIGlmICh0eXBlb2YgZmlsdGVycyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZmlsdGVycyA9IEpTT04ucGFyc2UoZmlsdGVycyk7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHNvcnRzID09PSAnc3RyaW5nJykge1xyXG4gICAgICBzb3J0cyA9IEpTT04ucGFyc2Uoc29ydHMpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGVudGl0eUZpbHRlciA9IHtcclxuICAgICAgRmlsdGVyQ29uZGl0aW9uczogZmlsdGVycyB8fCBudWxsLFxyXG4gICAgICBTb3J0Q29uZGl0aW9uczogc29ydHMgfHwgbnVsbCxcclxuICAgICAgSXNVc2VQYWdpbmF0aW9uOiBmYWxzZSxcclxuICAgICAgUGFnaW5hdGlvbjoge1xyXG4gICAgICAgIFBhZ2VJbmRleDogMSxcclxuICAgICAgICBQYWdlU2l6ZTogMCxcclxuICAgICAgICBQYWdlQ291bnQ6IDAsXHJcbiAgICAgICAgVG90YWxDb3VudDogMFxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZW50aXR5RmlsdGVyU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoZW50aXR5RmlsdGVyKTtcclxuICAgIHBhcmFtcy5lbnRpdHlGaWx0ZXIgPSBlbnRpdHlGaWx0ZXJTdHJpbmc7XHJcblxyXG4gICAgLy8g57uE57uHYm9keVxyXG4gICAgY29uc3QgYm9keSA9IHtcclxuICAgICAgZGF0YUNoYW5nZTogW10sXHJcbiAgICAgIHZhcmlhYmxlQ2hhbmdlOiBudWxsXHJcbiAgICB9XHJcblxyXG4gICAgLy8g6LWL5YC8YmXnmoR1cmxcclxuICAgIGJlZlJlcG9zaXRvcnkuYXBpUHJveHkuc2V0QXNzb2NpYXRlZFVybCh1cmwpO1xyXG4gICAgcmV0dXJuIHRoaXMud2FpdEZvckJlU2Vzc2lvbigpLnBpcGUoc3dpdGNoTWFwKCgpID0+IHtcclxuICAgICAgdXJsID0gYCR7dXJsfS9leHRlbnNpb24vcXVlcnlgO1xyXG4gICAgICBjb25zdCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZyA9IHtcclxuICAgICAgICBoZWFkZXJzOiBzZXNzaW9uU2VydmljZS5leHRlbmRSZXF1ZXN0SGVhZGVycyh7fSksXHJcbiAgICAgICAgcGFyYW1zOiBwYXJhbXMsXHJcbiAgICAgICAgYm9keVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgY29uc3QgcXVlcnkkID0gYXBpUHJveHkuaHR0cENsaWVudC5yZXF1ZXN0KEh0dHBNZXRob2RzLlBVVCwgdXJsLCByZXF1ZXN0Q29uZmlnKS5waXBlKFxyXG4gICAgICAgIG1hcCgocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICBjb25zdCBhdHRhY2hMaXN0RGF0YSA9IHJlc3VsdC5yZXR1cm5WYWx1ZS5yZXN1bHQ7XHJcbiAgICAgICAgICAvLyDotYvlgLzlvZPliY3miYDmnInmlbDmja5cclxuICAgICAgICAgIGF0dGFjaENvbnRleHQuc2V0RGF0YShKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KGF0dGFjaExpc3REYXRhKSkpO1xyXG4gICAgICAgICAgLy8g6LWL5YC857yT5a2Y6LW35p2lXHJcbiAgICAgICAgICBhdHRhY2hDb250ZXh0LnVwZGF0ZURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShhdHRhY2hMaXN0RGF0YSkpKTtcclxuICAgICAgICAgIHJldHVybiBhdHRhY2hMaXN0RGF0YTtcclxuICAgICAgICB9KVxyXG4gICAgICApO1xyXG5cclxuICAgICAgcmV0dXJuIHF1ZXJ5JDtcclxuICAgIH0pKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgd2FpdEZvckJlU2Vzc2lvbigpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IGJlZlJlcG9zaXRvcnkgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQucmVwb3NpdG9yeSBhcyBCZWZSZXBvc2l0b3J5PGFueT47XHJcbiAgICBjb25zdCBzZXNzaW9uU2VydmljZSA9IGJlZlJlcG9zaXRvcnkuc2Vzc2lvblNlcnZpY2U7XHJcbiAgICByZXR1cm4gc2Vzc2lvblNlcnZpY2UuZ2V0QmVTZXNzaW9uRXhpc3RlZCgpLnBpcGUoXHJcbiAgICAgIGZpbHRlcigoYmVTZXNzaW9uRXhpc3RlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgIHJldHVybiBiZVNlc3Npb25FeGlzdGVkID09PSB0cnVlO1xyXG4gICAgICB9KSxcclxuICAgICAgdGFrZSgxKVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5ZCM5q2l5Y+Y5pu0XHJcbiAgICovXHJcbiAgcHVibGljIHN5bmNBdHRhY2htZW50Um93Q2hhbmdlcyh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBhdHRhY2hDb250ZXh0ID0gdGhpcy5nZXRBdHRhY2hDb250ZXh0KCkgfHwge307XHJcblxyXG4gICAgY29uc3QgY2hhbmdlRGV0YWlscyA9IEF0dGFjaG1lbnRVdGlsLmdldENoYW5nZURldGFpbHMoYXR0YWNoQ29udGV4dC5vbGRMaXN0RGF0YSwgYXR0YWNoQ29udGV4dC5saXN0RGF0YSk7XHJcbiAgICBpZiAoIWNoYW5nZURldGFpbHMgfHwgY2hhbmdlRGV0YWlscy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuIG9mKGZhbHNlKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGNoYW5nZWRSb3dJZCA9IGNoYW5nZURldGFpbHNbMF0uQ2hhbmdlSW5mby5EYXRhSWQ7XHJcbiAgICBjb25zdCByZXF1ZXN0SW5mbzogUmVxdWVzdEluZm8gPSB7XHJcbiAgICAgIGRhdGFDaGFuZ2U6IGNoYW5nZURldGFpbHMsXHJcbiAgICAgIHZhcmlhYmxlQ2hhbmdlOiBudWxsXHJcbiAgICB9XHJcbiAgICBjb25zdCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZyA9IHtcclxuICAgICAgYm9keTogcmVxdWVzdEluZm9cclxuICAgIH07XHJcblxyXG4gICAgY29uc3QgYXBpUHJveHkgPSAodGhpcy52aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnkgYXMgQmVmUmVwb3NpdG9yeTxhbnk+KS5hcGlQcm94eTtcclxuICAgIHVybCA9IGAke3VybH0vZXh0ZW5zaW9uL3JldHJpZXZlLyR7Y2hhbmdlZFJvd0lkfWA7XHJcbiAgICByZXR1cm4gYXBpUHJveHkucmVxdWVzdChIdHRwTWV0aG9kcy5QVVQsIHVybCwgcmVxdWVzdENvbmZpZywgdHJ1ZSkucGlwZShcclxuICAgICAgbWFwKChlKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY29udGV4dCA9IGF0dGFjaENvbnRleHQuY29udGV4dDtcclxuICAgICAgICBjb25zdCBkYXRhID0gY29udGV4dC5nZXREYXRhKCk7XHJcbiAgICAgICAgLy8gZ29CYWNr5LmL5ZCOICDmm7TmlrDnvJPlrZjlkI7nmoTlgLxcclxuICAgICAgICBjb250ZXh0LnVwZGF0ZURhdGEoSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShkYXRhKSkpO1xyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICog5LiK5Lyg5Y2V5Liq5paH5Lu2XHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnRJZFBhdGgg6ZmE5Lu25YaF56CB5a2X5q6155qE6Lev5b6E77yM5b2i5aaCL2F0dGFjaEluZm8vYXR0YWNobWVudElk77ybXHJcbiAgICogQHBhcmFtIGF0dGFjaG1lbnROYW1lUGF0aCDpmYTku7blkI3np7DlrZfmrrXnmoTot6/lvoRcclxuICAgKi9cclxuICBwdWJsaWMgdXBsb2FkQW5kVXBkYXRlUm93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcsIHJvb3REaXJJZD86IHN0cmluZywgcGFyZW50RGlyTmFtZT86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCByb290SWQgPSByb290RGlySWQgPyByb290RGlySWQgOiB0aGlzLmRlZmF1bHRSb290RGlySWQ7XHJcbiAgICBjb25zdCBmb3JtSWQgPSBwYXJlbnREaXJOYW1lID8gcGFyZW50RGlyTmFtZSA6IHRoaXMuZGVmYXVsdFBhcmVudERpck5hbWU7XHJcbiAgICBpZiAoIXJvb3RJZCB8fCAhZm9ybUlkKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcigncm9vdERpcklk5ZKMcGFyZW50RGlyTmFtZeS4jeiDveS4uuepuu+8jOivt+Whq+WGmScpO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGZpbGVJbmZvcyA9IHRoaXMuZ2V0VXBsb2FkRmlsZUluZm9zRnJvbUNvbnRleHQoKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJbmZvcyA9IEF0dGFjaG1lbnRVdGlsLmNvbnZlcnRUb0F0dGFjaG1lbnRJbmZvcyhmaWxlSW5mb3MpO1xyXG4gICAgaWYgKCFhdHRhY2htZW50SW5mb3MgfHwgYXR0YWNobWVudEluZm9zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBhbGVydCgn6K+35YWI5LiK5Lyg6ZmE5Lu2Jyk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmm7TmlrDmnI3liqHlmajnq69cclxuICAgIGNvbnNvbGUubG9nKCdzaG93IGxvYWRpbmcgLi4uJyk7XHJcbiAgICBjb25zdCBmaXJzdEF0dGFjaG1lbnRJbmZvID0gQXR0YWNobWVudFV0aWwuZ2V0Rmlyc3RBdHRhY2htZW50SW5mbyhhdHRhY2htZW50SW5mb3MpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHRoaXMuYXR0YWNoRGF0YVNlcnZpY2UudXBkYXRlUm93KGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoLCBmaXJzdEF0dGFjaG1lbnRJbmZvKS5waXBlKFxyXG4gICAgICB0YXAoKCkgPT4ge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdoaWRlIGxvYWRpbmcgLi4uJyk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIHJlc3VsdCQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkuIrkvKDlpJrkuKrmlofku7ZcclxuICAgKi9cclxuICBwdWJsaWMgdXBsb2FkQW5kQmF0Y2hBZGRSb3dzKHVybDogc3RyaW5nLCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aDogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IGNvbW1hbmRDb250ZXh0ID0gdGhpc1snY29udGV4dCddIGFzIENvbW1hbmRDb250ZXh0O1xyXG4gICAgLy8g6ZmE5Lu255u45YWz5L+h5oGvXHJcbiAgICBjb25zdCByb290RGlySWQgPSBjb21tYW5kQ29udGV4dC5ldmVudFBhcmFtcy5yb290SWQ7XHJcbiAgICBjb25zdCBwYXJlbnREaXJOYW1lID0gY29tbWFuZENvbnRleHQuZXZlbnRQYXJhbXMucGFyZW50RGlyTmFtZTtcclxuICAgIGNvbnN0IHJvb3RJZCA9IHJvb3REaXJJZCA/IHJvb3REaXJJZCA6IHRoaXMuZGVmYXVsdFJvb3REaXJJZDtcclxuICAgIGNvbnN0IGZvcm1JZCA9IHBhcmVudERpck5hbWUgPyBwYXJlbnREaXJOYW1lIDogdGhpcy5kZWZhdWx0UGFyZW50RGlyTmFtZTtcclxuICAgIGlmICghcm9vdElkIHx8ICFmb3JtSWQpIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyb290RGlySWTlkoxwYXJlbnREaXJOYW1l5LiN6IO95Li656m677yM6K+35aGr5YaZJyk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBjb250ZXh0ID0gY29tbWFuZENvbnRleHQuZXZlbnRQYXJhbXMuY29udGV4dDtcclxuICAgIGNvbnN0IGZpbGVJbmZvcyA9IHRoaXMuZ2V0VXBsb2FkRmlsZUluZm9zRnJvbUNvbnRleHQoKTtcclxuICAgIGNvbnN0IGF0dGFjaG1lbnRJbmZvcyA9IEF0dGFjaG1lbnRVdGlsLmNvbnZlcnRUb0F0dGFjaG1lbnRJbmZvcyhmaWxlSW5mb3MpO1xyXG4gICAgaWYgKCFhdHRhY2htZW50SW5mb3MgfHwgYXR0YWNobWVudEluZm9zLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICBhbGVydCgn6K+35YWI5LiK5Lyg6ZmE5Lu2Jyk7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIC8vIOabtOaWsOacjeWKoeWZqOerr1xyXG4gICAgY29uc3QgdXBsb2FkVXJsID0gYCR7dXJsfS9zZXJ2aWNlL2JhdGNodXBsb2FkYXR0YWNobWVudGA7XHJcbiAgICByZXR1cm4gdGhpcy5hdHRhY2hEYXRhU2VydmljZS51cGRhdGVSb3dzKHVwbG9hZFVybCwgYXR0YWNobWVudEluZm9GaWVsZFBhdGgsIGF0dGFjaG1lbnRJbmZvcykucGlwZShcclxuICAgICAgbWFwKGUgPT4ge1xyXG4gICAgICAgIC8vIOi/veWKoOaVsOaNrlxyXG4gICAgICAgIGNvbnRleHQuYXBwZW5kRGF0YShlKTtcclxuICAgICAgICBjb25zdCBkYXRhSWRzID0gdGhpcy5nZXREYXRhSWRzVG9SZW1vdmUoY29udGV4dCwgYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG5cclxuICAgICAgICBkYXRhSWRzLmZvckVhY2goZGF0YUlkID0+IHtcclxuICAgICAgICAgIC8vIOa3u+WKoOagh+iusFxyXG4gICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnkuZGF0YUNoYW5nZUhpc3RvcnkuYWRkQ2hhbmdlKHsgZlBhdGg6ICcnLCBkYXRhSWQ6IGRhdGFJZCwgY2hhbmdlVHlwZTogRGF0YUNoYW5nZVR5cGUuQWRkIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBlO1xyXG4gICAgICB9KVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOaJuemHj+WIoOmZpOmZhOS7tuaJgOWcqOeahOihjFxyXG4gICAqL1xyXG4gIHB1YmxpYyByZW1vdmVBdHRhY2htZW50Um93cyh1cmw6IHN0cmluZywgYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpc1snY29udGV4dCddLmV2ZW50UGFyYW1zLmNvbnRleHQ7XHJcbiAgICBpZiAoIWF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKSB7XHJcbiAgICAgIHJldHVybiBFTVBUWTtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGFJZHMgPSB0aGlzLmdldERhdGFJZHNUb1JlbW92ZShjb250ZXh0LCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICAvLyDlpoLmnpzmmK/kuLvooahcclxuICAgIGlmIChhdHRhY2htZW50SW5mb0ZpZWxkUGF0aC5zcGxpdCgnLycpLmxlbmd0aCA8PSAyKSB7XHJcbiAgICAgIGNvbnN0IHJlbW92ZVVybCA9IGAke3VybH0vZXh0ZW5zaW9uL2JhdGNoZGVsZXRlYDtcclxuICAgICAgcmV0dXJuIHRoaXMucmVtb3ZlRGF0YVNlcnZpY2UucmVtb3ZlQnlCdXNpbmVzc0lkcyhyZW1vdmVVcmwsIGRhdGFJZHMpLnBpcGUoXHJcbiAgICAgICAgbWFwKChlKSA9PiB7XHJcbiAgICAgICAgICBkYXRhSWRzLmZvckVhY2goZGF0YUlkID0+IHtcclxuICAgICAgICAgICAgY29udGV4dC5yZW1vdmVEYXRhQnlJZChkYXRhSWQpO1xyXG4gICAgICAgICAgICAvLyDmt7vliqDmoIforrBcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnkuZGF0YUNoYW5nZUhpc3RvcnkuYWRkQ2hhbmdlKHsgZlBhdGg6ICcnLCBkYXRhSWQ6IGRhdGFJZCwgY2hhbmdlVHlwZTogRGF0YUNoYW5nZVR5cGUuRGVsZXRlIH0pO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSlcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIC8vIOWmguaenOaYr+WtkOihqFxyXG4gICAgICBjb25zdCByZW1vdmVPYnNlcnZhYmxlczogT2JzZXJ2YWJsZTxhbnk+W10gPSBbXTtcclxuICAgICAgaWYgKGRhdGFJZHMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgYWxlcnQoJ+ivt+mAieaLqeimgeWIoOmZpOeahOaWh+S7ticpO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IGJpbmRpbmdMaXN0UGF0aCA9IHRoaXMuZ2V0QmluZGluZ0xpc3RQYXRoV2l0aEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoKTtcclxuICAgICAgZGF0YUlkcy5mb3JFYWNoKChkYXRhSWQ6IHN0cmluZykgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlbW92ZU9ic2VydmFibGUgPSB0aGlzLnJlbW92ZURhdGFTZXJ2aWNlLnJlbW92ZUJ5QnVzaW5lc3NQYXRoQW5kSWQodXJsLCBiaW5kaW5nTGlzdFBhdGgsIGRhdGFJZCk7XHJcbiAgICAgICAgcmVtb3ZlT2JzZXJ2YWJsZXMucHVzaChyZW1vdmVPYnNlcnZhYmxlKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBmb3JrSm9pbihyZW1vdmVPYnNlcnZhYmxlcykucGlwZShcclxuICAgICAgICBtYXAoKGUpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgICAgICAgcmV0dXJuIGU7XHJcbiAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gI3JlZ2lvbiDlt6Xlhbfmlrnms5VcclxuICAvKipcclxuICAgKiDku47kuIrkuIvmlofkuK3kuK3ojrflj5bmjqfku7bkvKDpgJLnmoTpmYTku7bkv6Hmga9cclxuICAgKi9cclxuICBwcml2YXRlIGdldFVwbG9hZEZpbGVJbmZvc0Zyb21Db250ZXh0KCk6IEJ1c2luZXNzVXBsb2FkRmlsZUluZm9bXSB7XHJcbiAgICBjb25zdCBjb21tYW5kQ29udGV4dCA9IHRoaXNbJ2NvbnRleHQnXSBhcyBDb21tYW5kQ29udGV4dDtcclxuICAgIGNvbnN0IHVwbG9hZEZpbGVJbmZvcyA9IGNvbW1hbmRDb250ZXh0LmV2ZW50UGFyYW1zLmRhdGEgYXMgQnVzaW5lc3NVcGxvYWRGaWxlSW5mb1tdO1xyXG4gICAgaWYgKCF1cGxvYWRGaWxlSW5mb3MpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHVwbG9hZEZpbGVJbmZvcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluimgeWIoOmZpOeahOmZhOS7tuWvueW6lOeahOaVsOaNrmlk5pWw57uEXHJcbiAgICovXHJcbiAgcHVibGljIGdldERhdGFJZHNUb1JlbW92ZShjb250ZXh0OiBhbnksIGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGF0dGFjaElkcyA9IHRoaXMuZ2V0QXR0YWNobWVudElkc1RvUmVtb3ZlRnJvbUNvbnRleHQoKTtcclxuICAgIGNvbnN0IGRhdGFJZHM6IHN0cmluZ1tdID0gW107XHJcbiAgICBhdHRhY2hJZHMuZm9yRWFjaCgoYXR0YWNoSWQ6IHN0cmluZykgPT4ge1xyXG5cclxuICAgICAgLy8g5LiK5Lyg5Yig6Zmk5ZKM6aKE6KeI5Yig6Zmk5Lyg6YCS6L+H5p2l55qEZmlsZUlk55qEa2V55Y+v6IO95LiN5LiA6Ie077yM6KaB5YGa5YW85a65XHJcbiAgICAgIGNvbnN0IGRhdGFJZCA9IHRoaXMuY29udmVydEF0dGFjaG1lbnRJZFRvRGF0YUlkKGNvbnRleHQsIGF0dGFjaElkLCBhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICAgIGRhdGFJZHMucHVzaChkYXRhSWQpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGF0YUlkcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS7juWRveS7pOS4iuS4i+aWh+S4reiOt+WPluimgeWIoOmZpOmZhOS7tmlkc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBnZXRBdHRhY2htZW50SWRzVG9SZW1vdmVGcm9tQ29udGV4dCgpIHtcclxuICAgIGNvbnN0IGNvbW1hbmRDb250ZXh0ID0gdGhpc1snY29udGV4dCddIGFzIENvbW1hbmRDb250ZXh0O1xyXG4gICAgcmV0dXJuIGNvbW1hbmRDb250ZXh0LmV2ZW50UGFyYW1zLmRhdGEubWFwKGRhdGFJdGVtID0+IHtcclxuICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkYXRhSXRlbSkgPT09ICdbb2JqZWN0IE9iamVjdF0nID8gZGF0YUl0ZW0ubWV0YWRhdGFJZCA6IGRhdGFJdGVtO1xyXG4gICAgfSk7XHJcbiAgICAvLyByZXR1cm4gY29tbWFuZENvbnRleHQuZXZlbnRQYXJhbXMuZGF0YSBhcyBzdHJpbmdbXTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOagueaNrui3r+W+hOiOt+WPlumZhOS7tuWtl+auteWAvOaVsOe7hFxyXG4gICAqIEBwYXJhbSBmaWVsZFBhdGgg5a2X5q616Lev5b6EXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBjb252ZXJ0QXR0YWNobWVudElkVG9EYXRhSWQoY29udGV4dDogYW55LCBmaWxlSWQ6IHN0cmluZywgYXR0YWNobWVudEluZm9GaWVsZFBhdGg6IHN0cmluZyk6IHN0cmluZyB7XHJcblxyXG4gICAgLy8g6Kej5p6Q6Lev5b6EXHJcbiAgICBjb25zdCBhdHRhY2hJbmZvQmluZGluZ1BhdGggPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYXR0YWNobWVudEluZm9GaWVsZFBhdGgpO1xyXG4gICAgY29uc3QgYXR0YWNoRmllbGROYW1lID0gYXR0YWNoSW5mb0JpbmRpbmdQYXRoLnBvcCgpO1xyXG4gICAgY29uc3QgYXR0YWNoTGlzdEJpbmRpbmdQYXRoID0gYXR0YWNoSW5mb0JpbmRpbmdQYXRoO1xyXG5cclxuICAgIC8vIOiOt+WPlumZhOS7tmlk5pWw57uEXHJcbiAgICAvLyBjb25zdCBlbnRpdHlMaXN0RGF0YSA9IHRoaXMuZW50aXR5U2VydmljZS5nZXRFbnRpdHlMaXN0RGF0YShhdHRhY2hMaXN0QmluZGluZ1BhdGgpO1xyXG4gICAgY29uc3QgZW50aXR5TGlzdERhdGEgPSBjb250ZXh0LmRhdGE7XHJcbiAgICBjb25zdCB0YXJnZXRFbnRpdHlEYXRhID0gZW50aXR5TGlzdERhdGEuZmluZCgoZW50aXR5RGF0YTogYW55KSA9PiB7XHJcbiAgICAgIGlmIChlbnRpdHlEYXRhW2F0dGFjaEZpZWxkTmFtZV0pIHtcclxuICAgICAgICBjb25zdCBhdHRhY2htZW50SWQgPSBlbnRpdHlEYXRhW2F0dGFjaEZpZWxkTmFtZV1bJ2F0dGFjaG1lbnRJZCddO1xyXG4gICAgICAgIGlmIChhdHRhY2htZW50SWQgPT09IGZpbGVJZCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gdGFyZ2V0RW50aXR5RGF0YS5pZDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPluW4pumZhOS7tueahEJpbmRpbmdMaXN055qEUGF0aFxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0QmluZGluZ0xpc3RQYXRoV2l0aEF0dGFjaG1lbnRzKGF0dGFjaG1lbnRJbmZvRmllbGRQYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGF0dGFjaEluZm9CaW5kaW5nUGF0aCA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShhdHRhY2htZW50SW5mb0ZpZWxkUGF0aCk7XHJcbiAgICBhdHRhY2hJbmZvQmluZGluZ1BhdGgucG9wKCk7XHJcbiAgICBjb25zdCBiaW5kaW5nTGlzdFBhdGggPSBhdHRhY2hJbmZvQmluZGluZ1BhdGg7XHJcbiAgICByZXR1cm4gJy8nICsgYmluZGluZ0xpc3RQYXRoLmpvaW4oJy8nKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlumZhOS7tue7hOS7tuS4iuS4i+aWh1xyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0QXR0YWNoQ29udGV4dCgpOiBhbnkge1xyXG4gICAgY29uc3QgY29tbWFuZENvbnRleHQgPSB0aGlzWydjb250ZXh0J10gYXMgQ29tbWFuZENvbnRleHQ7XHJcbiAgICBjb25zdCBhdHRhY2hDb250ZXh0ID0gY29tbWFuZENvbnRleHQgJiYgY29tbWFuZENvbnRleHQuZXZlbnRQYXJhbXMgPyBjb21tYW5kQ29udGV4dC5ldmVudFBhcmFtcyA6IHt9O1xyXG4gICAgcmV0dXJuIGF0dGFjaENvbnRleHQ7XHJcbiAgfVxyXG5cclxuICAvLyAjZW5kcmVnaW9uXHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBCdXNpbmVzc0F0dGFjaG1lbnRTZXJ2aWNlIH07XHJcbiJdfQ==