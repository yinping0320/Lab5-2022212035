/**
 * @fileoverview added by tsickle
 * Generated from: lib/exception-services/exception.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpUtil, HttpStatusType } from './http';
/**
 * 实体操作服务
 */
class ExceptionService {
    /**
     * 构造函数
     * @param {?} notifyService
     * @param {?} jsBridgeService
     */
    constructor(notifyService, jsBridgeService) {
        this.notifyService = notifyService;
        this.jsBridgeService = jsBridgeService;
    }
    /**
     * 显示异常信息
     * @param {?} error
     * @return {?}
     */
    show(error) {
        this.exception(error);
    }
    /**
     * 异常处理路由方法
     * @private
     * @param {?} error
     * @return {?}
     */
    exception(error) {
        // 针对session失效做特殊处理
        if (error.message && error.message.indexOf('401') !== -1) {
            this.notifyService.error('登录信息已失效请重新打开');
            setTimeout((/**
             * @return {?}
             */
            () => { this.jsBridgeService.closeWindow(); }), 2000);
            return;
        }
        if (error && error.response) {
            this.httpErrorHandler(error.response);
        }
    }
    /**
     * http请求异常处理器
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorHandler(httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        const statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                this.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    }
    /**
     * 服务器端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorInServer(httpError) {
        /** @type {?} */
        let error = httpError.data;
        if (typeof (error) === 'string') {
            try {
                error = JSON.parse(error);
            }
            catch (e) { }
        }
        if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
            this.notifyService.error(httpError.message);
            return;
        }
        /** @type {?} */
        const getNotifyServiceMethodName = this.getNotifyServiceMethodName(error.Level);
        this.notifyService[`${getNotifyServiceMethodName}`](error.Message);
    }
    /**
     * 客户端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorInClient(httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        const url = httpError.config && httpError.config.url && httpError.config.url;
        /** @type {?} */
        const status = httpError.status && httpError.status;
        this.notifyService.error(`${url} ${status}`);
    }
    /**
     * 获取异常处理策略
     * @param {?} exceptionLevel 异常等级
     * @return {?}
     */
    getNotifyServiceMethodName(exceptionLevel) {
        /** @type {?} */
        let exception;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exception = 'info';
                break;
            case 1 /* Warning */:
                exception = 'warning';
                break;
            case 2 /* Error */:
                exception = 'error';
                break;
            case 3 /* Fatal */:
                exception = 'fatal';
                break;
            default:
                // 默认异常等级是错误
                exception = 'error';
                break;
        }
        return exception;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.jsBridgeService;
}
export { ExceptionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhjZXB0aW9uLnNlcnZjaWUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2V4Y2VwdGlvbi1zZXJ2aWNlcy9leGNlcHRpb24uc2VydmNpZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSxRQUFRLEVBQUUsY0FBYyxFQUFFLE1BQU0sUUFBUSxDQUFDOzs7O0FBTWxELE1BQU0sZ0JBQWdCOzs7Ozs7SUFLcEIsWUFBb0IsYUFBNEIsRUFBVSxlQUFnQztRQUF0RSxrQkFBYSxHQUFiLGFBQWEsQ0FBZTtRQUFVLG9CQUFlLEdBQWYsZUFBZSxDQUFpQjtJQUMxRixDQUFDOzs7Ozs7SUFLRCxJQUFJLENBQUMsS0FBSztRQUNSLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEIsQ0FBQzs7Ozs7OztJQUtPLFNBQVMsQ0FBQyxLQUFVO1FBQzFCLG1CQUFtQjtRQUNuQixJQUFJLEtBQUssQ0FBQyxPQUFPLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7WUFDeEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDekMsVUFBVTs7O1lBQUMsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyxXQUFXLEVBQUUsQ0FBQSxDQUFDLENBQUMsR0FBRSxJQUFJLENBQUMsQ0FBQTtZQUM5RCxPQUFPO1NBQ1I7UUFDRCxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsUUFBUSxFQUFFO1lBQzNCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDdkM7SUFDSCxDQUFDOzs7Ozs7O0lBS08sZ0JBQWdCLENBQUMsU0FBUztRQUNoQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTztTQUNSOztjQUVLLFVBQVUsR0FBRyxRQUFRLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUUvRCxRQUFRLFVBQVUsRUFBRTtZQUNsQixLQUFLLGNBQWMsQ0FBQyxXQUFXO2dCQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2xDLE1BQU07WUFDUixLQUFLLGNBQWMsQ0FBQyxXQUFXO2dCQUM3QixJQUFJLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLENBQUM7Z0JBQ2xDLE1BQU07WUFDUjtnQkFDRSxNQUFNLElBQUksS0FBSyxDQUFDLDZEQUE2RCxDQUFDLENBQUM7U0FDbEY7SUFDSCxDQUFDOzs7Ozs7O0lBTU8saUJBQWlCLENBQUMsU0FBUzs7WUFDN0IsS0FBSyxHQUFHLFNBQVMsQ0FBQyxJQUFJO1FBQzFCLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUMvQixJQUFJO2dCQUNGLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2FBQzNCO1lBQUMsT0FBTyxDQUFDLEVBQUUsR0FBRztTQUNoQjtRQUNELElBQUksQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssSUFBSSxTQUFTLEVBQUUsRUFBRSxtQkFBbUI7WUFDbEYsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQzVDLE9BQU87U0FDUjs7Y0FFSywwQkFBMEIsR0FBVyxJQUFJLENBQUMsMEJBQTBCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUV2RixJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsMEJBQTBCLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7Ozs7O0lBS08saUJBQWlCLENBQUMsU0FBUztRQUNqQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTztTQUNSOztjQUNLLEdBQUcsR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsR0FBRzs7Y0FDdEUsTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLElBQUksU0FBUyxDQUFDLE1BQU07UUFDbkQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQztJQUMvQyxDQUFDOzs7Ozs7SUFPTSwwQkFBMEIsQ0FBQyxjQUFjOztZQUMxQyxTQUFTO1FBQ2IsUUFBUSxjQUFjLEVBQUU7WUFDdEI7Z0JBQ0UsU0FBUyxHQUFHLE1BQU0sQ0FBQztnQkFDbkIsTUFBTTtZQUNSO2dCQUNFLFNBQVMsR0FBRyxTQUFTLENBQUM7Z0JBQ3RCLE1BQU07WUFDUjtnQkFDRSxTQUFTLEdBQUcsT0FBTyxDQUFDO2dCQUNwQixNQUFNO1lBQ1I7Z0JBQ0UsU0FBUyxHQUFHLE9BQU8sQ0FBQztnQkFDcEIsTUFBTTtZQUNSO2dCQUNFLFlBQVk7Z0JBQ1osU0FBUyxHQUFHLE9BQU8sQ0FBQztnQkFDcEIsTUFBTTtTQUNUO1FBRUQsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztDQUNGOzs7Ozs7SUE1R2EseUNBQW9DOzs7OztJQUFFLDJDQUF3Qzs7QUE4RzVGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSUVycm9yU2VydmUgfSBmcm9tICdAZmFycmlzL21vYmlsZS1iZWYnO1xyXG5pbXBvcnQgeyBOb3RpZnlTZXJ2aWNlIH0gZnJvbSAnLi4vdWktc2VydmljZXMnO1xyXG5pbXBvcnQgeyBIdHRwVXRpbCwgSHR0cFN0YXR1c1R5cGUgfSBmcm9tICcuL2h0dHAnO1xyXG5pbXBvcnQgeyBFeGNlcHRpb25MZXZlbCB9IGZyb20gJy4vdHlwZXMnO1xyXG5pbXBvcnQgeyBKc0JyaWRnZVNlcnZpY2UgfSBmcm9tICcuLi9qcy1icmlkZ2Utc2VydmljZS9pbmRleCc7XHJcbi8qKlxyXG4gKiDlrp7kvZPmk43kvZzmnI3liqFcclxuICovXHJcbmNsYXNzIEV4Y2VwdGlvblNlcnZpY2UgaW1wbGVtZW50cyBJRXJyb3JTZXJ2ZSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOaehOmAoOWHveaVsFxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbm90aWZ5U2VydmljZTogTm90aWZ5U2VydmljZSwgcHJpdmF0ZSBqc0JyaWRnZVNlcnZpY2U6IEpzQnJpZGdlU2VydmljZSkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5pi+56S65byC5bi45L+h5oGvXHJcbiAgICovXHJcbiAgc2hvdyhlcnJvcikge1xyXG4gICAgdGhpcy5leGNlcHRpb24oZXJyb3IpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIOW8guW4uOWkhOeQhui3r+eUseaWueazlVxyXG4gKi9cclxuICBwcml2YXRlIGV4Y2VwdGlvbihlcnJvcjogYW55KSB7XHJcbiAgICAvLyDpkojlr7lzZXNzaW9u5aSx5pWI5YGa54m55q6K5aSE55CGXHJcbiAgICBpZiAoZXJyb3IubWVzc2FnZSAmJiBlcnJvci5tZXNzYWdlLmluZGV4T2YoJzQwMScpICE9PSAtMSkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+eZu+W9leS/oeaBr+W3suWkseaViOivt+mHjeaWsOaJk+W8gCcpO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy5qc0JyaWRnZVNlcnZpY2UuY2xvc2VXaW5kb3coKSB9LCAyMDAwKVxyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UpIHtcclxuICAgICAgdGhpcy5odHRwRXJyb3JIYW5kbGVyKGVycm9yLnJlc3BvbnNlKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiBodHRw6K+35rGC5byC5bi45aSE55CG5ZmoXHJcbiAqL1xyXG4gIHByaXZhdGUgaHR0cEVycm9ySGFuZGxlcihodHRwRXJyb3IpOiB2b2lkIHtcclxuICAgIGlmICghaHR0cEVycm9yKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBzdGF0dXNUeXBlID0gSHR0cFV0aWwuZ2V0SHR0cFN0YXR1c1R5cGUoaHR0cEVycm9yLnN0YXR1cyk7XHJcblxyXG4gICAgc3dpdGNoIChzdGF0dXNUeXBlKSB7XHJcbiAgICAgIGNhc2UgSHR0cFN0YXR1c1R5cGUuQ2xpZW50RXJyb3I6XHJcbiAgICAgICAgdGhpcy5odHRwRXJyb3JJbkNsaWVudChodHRwRXJyb3IpO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBjYXNlIEh0dHBTdGF0dXNUeXBlLlNlcnZlckVycm9yOlxyXG4gICAgICAgIHRoaXMuaHR0cEVycm9ySW5TZXJ2ZXIoaHR0cEVycm9yKTtcclxuICAgICAgICBicmVhaztcclxuICAgICAgZGVmYXVsdDpcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0dldCBpbnZhbGlkIHN0YXR1cyBjb2RlIHdoZW4gdXNpbmcgaHR0cEVycm9ySGFuZGxlciBtZXRob2QuJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAqIOacjeWKoeWZqOerr+W8guW4uOaPkOekuuW8ueahhlxyXG4gKi9cclxuICBwcml2YXRlIGh0dHBFcnJvckluU2VydmVyKGh0dHBFcnJvcik6IHZvaWQge1xyXG4gICAgbGV0IGVycm9yID0gaHR0cEVycm9yLmRhdGE7XHJcbiAgICBpZiAodHlwZW9mIChlcnJvcikgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgZXJyb3IgPSBKU09OLnBhcnNlKGVycm9yKTtcclxuICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICB9XHJcbiAgICBpZiAoIWVycm9yIHx8IGVycm9yLkxldmVsID09IG51bGwgfHwgZXJyb3IuTGV2ZWwgPT0gdW5kZWZpbmVkKSB7IC8vIOacquWwgeijhWVycm9y5oiW5pyq6K6+572u5byC5bi4562J57qnXHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcihodHRwRXJyb3IubWVzc2FnZSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBnZXROb3RpZnlTZXJ2aWNlTWV0aG9kTmFtZTogU3RyaW5nID0gdGhpcy5nZXROb3RpZnlTZXJ2aWNlTWV0aG9kTmFtZShlcnJvci5MZXZlbCk7XHJcblxyXG4gICAgdGhpcy5ub3RpZnlTZXJ2aWNlW2Ake2dldE5vdGlmeVNlcnZpY2VNZXRob2ROYW1lfWBdKGVycm9yLk1lc3NhZ2UpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5a6i5oi356uv5byC5bi45o+Q56S65by55qGGXHJcbiAgICovXHJcbiAgcHJpdmF0ZSBodHRwRXJyb3JJbkNsaWVudChodHRwRXJyb3IpOiB2b2lkIHtcclxuICAgIGlmICghaHR0cEVycm9yKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IHVybCA9IGh0dHBFcnJvci5jb25maWcgJiYgaHR0cEVycm9yLmNvbmZpZy51cmwgJiYgaHR0cEVycm9yLmNvbmZpZy51cmw7XHJcbiAgICBjb25zdCBzdGF0dXMgPSBodHRwRXJyb3Iuc3RhdHVzICYmIGh0dHBFcnJvci5zdGF0dXM7XHJcbiAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoYCR7dXJsfSAke3N0YXR1c31gKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICog6I635Y+W5byC5bi45aSE55CG562W55WlXHJcbiAqIEBwYXJhbSBleGNlcHRpb25MZXZlbCDlvILluLjnrYnnuqdcclxuICovXHJcbiAgcHVibGljIGdldE5vdGlmeVNlcnZpY2VNZXRob2ROYW1lKGV4Y2VwdGlvbkxldmVsKTogU3RyaW5nIHtcclxuICAgIGxldCBleGNlcHRpb247XHJcbiAgICBzd2l0Y2ggKGV4Y2VwdGlvbkxldmVsKSB7XHJcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuSW5mbzpcclxuICAgICAgICBleGNlcHRpb24gPSAnaW5mbyc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuV2FybmluZzpcclxuICAgICAgICBleGNlcHRpb24gPSAnd2FybmluZyc7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIGNhc2UgRXhjZXB0aW9uTGV2ZWwuRXJyb3I6XHJcbiAgICAgICAgZXhjZXB0aW9uID0gJ2Vycm9yJztcclxuICAgICAgICBicmVhaztcclxuICAgICAgY2FzZSBFeGNlcHRpb25MZXZlbC5GYXRhbDpcclxuICAgICAgICBleGNlcHRpb24gPSAnZmF0YWwnO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICBkZWZhdWx0OlxyXG4gICAgICAgIC8vIOm7mOiupOW8guW4uOetiee6p+aYr+mUmeivr1xyXG4gICAgICAgIGV4Y2VwdGlvbiA9ICdlcnJvcic7XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGV4Y2VwdGlvbjtcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCB7IEV4Y2VwdGlvblNlcnZpY2UgfTtcclxuIl19