/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/cloud-plus-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
class CloudPlusService {
    /**
     * @param {?=} options
     * @return {?}
     */
    playShortVideo(options) {
        throw new Error('Method not implemented.');
    }
    // 目前拍完返回报错
    /**
     * @param {?=} options
     * @return {?}
     */
    takePhoto(options = {
        quality: 75,
        encodingType: 0,
        targetWidth: 600,
        targetHeight: 600
    }) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data['originalData']) {
                subject.next(data['originalData']);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('takePhoto', data);
                subject.next([]);
                return;
            }
        });
        window['imp'].iCamera.open(options, callback, errorCallback);
        return subject;
    }
    /**
     * @return {?}
     */
    scanQRCode() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('二维码回调');
                subject.next(data);
            }
        });
        console.log('调用二维码');
        window['imp'].iBarCode.scan(callback);
        return subject;
    }
    /**
     * @return {?}
     */
    getLocation() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                const { latitude, longitude, addr, city, country, district, province, street, streetNum } = data;
                subject.next({
                    addr,
                    city,
                    country,
                    district,
                    province,
                    street,
                    streetNum,
                    lat: latitude,
                    lng: longitude,
                });
            }
        });
        window['imp'].iGps.getInfo(callback);
        return subject;
        // iphone 打印输出信息
        /**
         * {latitude:"36.662413",longitude:"117.129769"}
         */
        // 安卓
        /**
         *  回调函数
         *  输出结构 object
         *  errormessage:""
         *  result:Object {
         *  addr:'山东省济南市历下区经十路靠近浪潮'
         *  city:"济南"
         *  country:"中国"
         *  course:-1
         *  district:"历下区"
         *  lat:36.66254123263889
         *  lng:117.12974745008681
         *  province:"山东省"
         *  street:"经十路"
         *  streetNum:"1单元"
         * }
         *  status:true
         */
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        window['imp'].iDevice.sysInfo(callback);
        return subject;
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    sendSMS(number, content) {
        window['imp'].iSms.send(number, content);
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    openSendSMS(number, content) {
        window['imp'].iSms.open(number, content);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    tel(number) {
        window['imp'].iTel.dial(number);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectPictureFromAlbum(options = { maxNum: 9, mType: 0 }) {
        /** @type {?} */
        const defaults = {
            num: 9,
            quality: 75,
            destinationType: 0,
            encodingType: 1,
            targetWidth: 600,
            targetHeight: 600
        };
        defaults.num = options.maxNum;
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item.originalData;
                })));
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('selectPictureFromAlbum', data);
                subject.next([]);
            }
        });
        window['imp'].iCamera.select(Object.assign({}, defaults, options), callback, errorCallback);
        return subject;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    selectFileFromMobile(options = { maximum: 6, fileType: '.jpg|.png' }) {
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getBase64(path) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('getBase64', data);
                subject.next([]);
            }
        });
        window['imp'].iFile.getBase64(path, callback, errorCallback);
        return subject;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectFile(options = { maximum: 6 }) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length > 0) {
                /** @type {?} */
                const paths = [];
                /** @type {?} */
                let count = 0;
                data.forEach((/**
                 * @param {?} dataItem
                 * @return {?}
                 */
                dataItem => {
                    window['imp'].iFile.getBase64(dataItem.path, (/**
                     * @param {?} bs64
                     * @return {?}
                     */
                    function (bs64) {
                        paths.push({
                            name: data[count].name,
                            size: data[count].size,
                            base64: bs64
                        });
                        count++;
                        if (data.length === paths.length) {
                            // 防止触发多次next  一次性把所有数据抛出去
                            subject.next(paths);
                        }
                    }), (/**
                     * @param {?} errorMsg
                     * @return {?}
                     */
                    function (errorMsg) {
                        if (errorMsg) {
                            console.log('getBase64', errorMsg);
                            subject.next([]);
                        }
                    }));
                }));
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('selectFile', data);
                subject.next([]);
            }
        });
        window['imp'].iFile.select(Object.assign({}, options), callback, errorCallback);
        return subject;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    takeVideo(options) {
        /** @type {?} */
        let option = { id: options.id };
        if (options.quality) {
            if (options.quality <= 0.5) {
                option['fps'] = 30;
            }
            else if (options.quality <= 1) {
                option['fps'] = 60;
            }
        }
        else {
            option['fps'] = 30;
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('takeVideo', data);
                subject.next([]);
            }
        });
        window['imp'].iVideo.record(option, callback, errorCallback);
        return subject;
    }
    /**
     * @return {?}
     */
    closeWindow() {
        window['imp'].iWindow.close();
    }
    /**
     * @param {?} title
     * @return {?}
     */
    setTitles(title) {
        document.title = title;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadFile(options) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data.status !== 1) {
                console.log(data);
            }
            subject.next(true);
        });
        window['imp'].iFile.download(options, callback);
        return subject;
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    setOriginGoback(fn) {
        /** @type {?} */
        const isAGreaterThanB = (/**
         * @param {?} parameA
         * @param {?} parameB
         * @return {?}
         */
        (parameA, parameB) => {
            /** @type {?} */
            const length = parameA.length > parameB.length ? parameB.length : parameA.length;
            for (let i = 0; i < length; i++) {
                if (parseInt(parameB[i]) > parseInt(parameA[i])) {
                    return false;
                }
            }
            return true;
        });
        /** @type {?} */
        const setFunction = (/**
         * @return {?}
         */
        () => {
            if (fn) {
                window['imp'].iWindow.onBackKeyDown2(fn);
                isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.onTitleBackKeyDown2(fn);
            }
            else {
                window['imp'].iWindow.cancelBackKeyDown();
                isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.cancelTitleBackKeyDown();
            }
        });
        /** @type {?} */
        let minVersion = '4.8.21';
        /** @type {?} */
        let currentVersion = window['CURRENT_VERSION'];
        if (currentVersion) {
            setFunction();
        }
        else {
            window['imp'].iDevice.sysInfo((/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                /** @type {?} */
                const newVersion = info.appVersion.split('-');
                window['CURRENT_VERSION'] = newVersion[0];
                currentVersion = window['CURRENT_VERSION'];
                setFunction();
            }));
        }
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    pushOriginGoback(fn) {
        window['OriginGoback'] = window['OriginGoback'] || [];
        /** @type {?} */
        const OriginGoback = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const gobackFn = window['OriginGoback'].pop();
            if (gobackFn) {
                gobackFn();
            }
            else {
                window['imp'].iWindow.cancelBackKeyDown();
                window['imp'].iWindow.cancelTitleBackKeyDown();
                history.back();
            }
        });
        if (fn) {
            window['OriginGoback'].push(fn);
            window['imp'].iWindow.onBackKeyDown2(OriginGoback);
            window['imp'].iWindow.onTitleBackKeyDown2(OriginGoback);
        }
    }
    /**
     * @return {?}
     */
    popOriginGoback() {
        window['OriginGoback'].pop();
    }
}
export { CloudPlusService };
//# sourceMappingURL=data:application/json;base64,