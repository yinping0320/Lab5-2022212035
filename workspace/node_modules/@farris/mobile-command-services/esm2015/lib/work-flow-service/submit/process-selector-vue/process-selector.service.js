/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/submit/process-selector-vue/process-selector.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { StartProcessPayload, FlowNodeInfo } from '../../entity/start-process-payload';
import { SubmitApprove } from '@farris/mobile-business-ui';
export class ProcessSelectorService {
    /**
     * @param {?} taskService
     */
    constructor(taskService) {
        this.taskService = taskService;
        //候选下一环节
        this.processPlaceholder = '选择流程'; //选择流程placeholder
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [];
        //选择的下一环节ID，后续环节id的拼接
        this.selectedValues = ['clear'];
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject();
        this.processReadOnly = false; //选择流程框是否只读
        //选择流程框是否只读
        this.nodeReadOnly = true; //选择节点下拉框是否只读
    }
    //弹框实例
    /**
     * @param {?} param
     * @return {?}
     */
    setParam(param) {
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.startProcessSimulate(this.payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    startProcessSimulate(payload) {
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.destProcesses = response.procDefs.map((/**
             * @param {?} process
             * @return {?}
             */
            process => ({ id: process.procDefId, name: process.procDefName })));
            if (this.destProcesses.length === 1) {
                this.processReadOnly = true;
                this.selectedProcessId = response.procDefs[0].procDefId;
                this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    process: this.selectedProcessId,
                    processData: this.destProcesses,
                    processOc: this.selectProcessChange.bind(this),
                    processReadFlag: this.processReadOnly,
                    processHolder: this.processPlaceholder,
                    nextNodeReadFlag: this.nodeReadOnly,
                    submit: this.submit.bind(this),
                    cancel: this.back.bind(this)
                });
                this.response = response;
                this.setNextNode(response);
            }
            else {
                this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    processData: this.destProcesses,
                    processOc: this.selectProcessChange.bind(this),
                    processReadFlag: this.processReadOnly,
                    processHolder: this.processPlaceholder,
                    nextNodeReadFlag: this.nodeReadOnly,
                    submit: this.submit.bind(this),
                    cancel: this.back.bind(this)
                });
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    }
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    selectProcessChange(data) {
        this.clearHelp();
        this.clearNode();
        this.selectedProcessId = data;
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        // const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            // load.close();
            this.response = response;
            this.setNextNode(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            //load.close();
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该流程存在问题' });
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getsimulationPathsIndexData(data) {
        return this.destNodes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item.id === data));
    }
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.clearHelp();
        this.clearAssignInfos();
        this.selectedNodeId = data;
        this.vm.open({
            nextNode: this.selectedNodeId,
        });
        //const nodeNames = data.data.name.split('，');
        /** @type {?} */
        const index = this.getsimulationPathsIndexData(data);
        if (this.response.simulationPaths[index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        node => node.resolved === true))) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[index]);
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            let payload = new StartProcessPayload();
            payload.processDefinitionId = this.selectedProcessId;
            payload.dataId = this.payload.dataId;
            payload.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((/**
             * @param {?} nodeId
             * @param {?} index
             * @return {?}
             */
            (nodeId, index) => {
                /** @type {?} */
                let nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                //nextFlowNode.activityDefinitionName = nodeNames[index];
                payload.nextFlowNodes.push(nextFlowNode);
            }));
            //const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                //load.close();
                this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                //load.close();
                this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该节点存在问题' });
            }));
        }
    }
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    setNextNode(response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
         * @param {?} path
         * @return {?}
         */
        path => ({
            id: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId)).join('，'),
            name: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionName)).join('，')
        })));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        const defaultIndex = response.simulationPaths.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.default));
        if (defaultIndex > -1) {
            this.destNodes.length === 1 ? (this.nodeReadOnly = true) : (this.nodeReadOnly = false);
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
        }
        else {
            this.selectedNodeId = '';
            this.nodeReadOnly = false;
            this.nodePlaceholder = '请选择';
        }
        this.vm.open({
            nextNodeOc: this.selectNodeChange.bind(this),
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nextNodeHolder: this.nodePlaceholder
        });
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    setAssignInfo(simulationPaths) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        nodeId => {
            /** @type {?} */
            const node = simulationPaths.nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId === nodeId));
            if (node) {
                /** @type {?} */
                const selectedAssignees = node.selectedAssignees;
                /** @type {?} */
                let assigneeReadFlag = false;
                /** @type {?} */
                let assignee = '';
                /** @type {?} */
                let assigneeHolder = '请选择人员';
                if (selectedAssignees && selectedAssignees.length >= 1) {
                    assigneeReadFlag = true;
                    assigneeHolder = "";
                    selectedAssignees.forEach((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => {
                        assignee = assignee + user.name + ', ';
                    }));
                    assignee = assignee.slice(0, assignee.length - 2);
                }
                if (node.anonymous) {
                    assignee = node.anonymousText === '' ? '' : node.anonymousText && node.anonymousText;
                }
                this.assignInfos.push({
                    label: `${this.selectedNodeId && this.selectedNodeId.split('，').length > 1 ? node.activityDefinitionName : ''}办理人员`,
                    selectedAssignees,
                    assigneeReadFlag,
                    assignee,
                    assigneeHolder,
                    assigneeInfo: Object.assign({}, node.assigneeInfo, { assigneeUsers: { items: (node.assigneeInfo && node.assigneeInfo.assigneeUsers) || [] } }),
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
        }));
        this.vm.open({
            assigneeOc: this.assigneeOc.bind(this),
            assignInfos: this.assignInfos
        });
    }
    // 办理人员选择事件
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    assigneeOc(data, index) {
        this.assignInfos[index].assignees = data.items;
        this.selectedValues[index] = data.value;
        this.vm.open({
            selectedValues: this.selectedValues
        });
    }
    /**
     * @return {?}
     */
    clearHelp() {
        this.vm.open({
            selectedValues: ['clear']
        });
    }
    // 清空节点
    /**
     * @return {?}
     */
    clearNode() {
        this.selectedNodeId = '',
            this.destNodes = [],
            this.nodeReadOnly = true,
            this.nodePlaceholder = '',
            this.assignInfos = [];
        this.vm.open({
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nodePlaceholder: this.nodePlaceholder,
            assignInfos: this.assignInfos
        });
    }
    // 清空办理人员
    /**
     * @return {?}
     */
    clearAssignInfos() {
        this.assignInfos = [];
        this.vm.open({
            assignInfos: this.assignInfos
        });
    }
    /**
     * 取消页面弹框
     * @return {?}
     */
    back() {
        this.clearProcess();
        this.subject.next({ type: 'success', message: '' });
    }
    /**
     * @return {?}
     */
    submit() {
        if (!this.selectedProcessId) {
            this.subject.next({ type: 'error', message: '请选流程' });
            return;
        }
        if (!this.selectedNodeId) {
            this.subject.next({ type: 'error', message: '请选节点' });
            return;
        }
        if (this.assignInfos.filter((/**
         * @param {?} info
         * @return {?}
         */
        info => ((info.assigneeInfo && info.assigneeInfo.assigneeUsers.items.length) || info.selectedAssignees.length) && !info.assignees.length)).length) {
            this.subject.next({ type: 'error', message: '请选办理人员' });
            return;
        }
        /** @type {?} */
        const nodes = this.selectedNodeId.split('，');
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            let nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            };
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.taskService.startProcess(this.payload).subscribe((/**
         * @return {?}
         */
        () => {
            this.clearProcess();
            this.subject.next({ type: 'success', message: '提交成功' });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    clearProcess() {
        this.vm.close();
        this.vm = null;
        this.selectedProcessId = '';
        this.selectedNodeId = '';
        this.processReadOnly = false;
        this.nodeReadOnly = true;
    }
}
if (false) {
    /** @type {?} */
    ProcessSelectorService.prototype.destProcesses;
    /** @type {?} */
    ProcessSelectorService.prototype.destNodes;
    /** @type {?} */
    ProcessSelectorService.prototype.processPlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.nodePlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.response;
    /** @type {?} */
    ProcessSelectorService.prototype.assignInfos;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedProcessId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedNodeId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedValues;
    /** @type {?} */
    ProcessSelectorService.prototype.payload;
    /** @type {?} */
    ProcessSelectorService.prototype.subject;
    /** @type {?} */
    ProcessSelectorService.prototype.processReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.nodeReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorService.prototype.taskService;
}
//# sourceMappingURL=data:application/json;base64,