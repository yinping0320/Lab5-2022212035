/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/wf-task-handler.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { StartProcessPayload, CancelSubmitPayload } from './entity/start-process-payload';
/**
 * @record
 */
function Response() { }
if (false) {
    /** @type {?} */
    Response.prototype.type;
    /** @type {?} */
    Response.prototype.message;
}
;
export class WfTaskHandlerService {
    /**
     * @param {?} processSelectorService
     * @param {?} taskService
     * @param {?} loadingService
     * @param {?} notifyService
     */
    constructor(processSelectorService, taskService, loadingService, notifyService) {
        this.processSelectorService = processSelectorService;
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.subject = new Subject();
    }
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const subject = new Subject();
        this.processSelectorService.setParam(payload);
        this.processSelectorService.getSubject().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.type === 'success') {
                if (response.message) {
                    this.notifyService.success(response.message);
                    subject.next(true);
                }
            }
            else if (response.type === 'error') {
                subject.next(false);
                this.notifyService.error(response.message);
            }
        }), (/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }));
        return subject.asObservable();
    }
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    cancelSubmit(payload) {
        /** @type {?} */
        const subject = new Subject();
        this.loadingService.show();
        this.taskService.cancelSubmit(payload).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            subject.next(true);
            this.loadingService.hide();
            this.notifyService.success('取消提交成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            subject.next(false);
            this.loadingService.hide();
            this.notifyService.error(error && error.response && error.response.data && error.response.data.Message || '取消提交失败');
        }));
        return subject.asObservable();
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = dataId;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        /** @type {?} */
        const subject = new Subject();
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[i];
            startPayload.variables = { simulate: false };
            this.taskService.startProcess(startPayload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response.procDefs.length > 1 || response.nextFlowNodes.length > 1) { //存在多个流程，单独提交//多个节点，单独提交
                    failedNum++;
                }
                else {
                    successNum++;
                }
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(true); //全部执行完再返回
                    this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            () => {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(false); //全部执行完再返回
                    this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var cancelSubmitPayload = new CancelSubmitPayload();
            cancelSubmitPayload.dataId = dataIds[i];
            cancelSubmitPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelSubmitPayload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                successNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(true);
                    this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            () => {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(false);
                    this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = `${parentDataId},${childDataId}`;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = `${parentDataId},${childDataId}`;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 批量提交、取消提交提示信息
     * @private
     * @param {?} actionCode
     * @param {?} successNum
     * @param {?} failedNum
     * @return {?}
     */
    showBatchSubmitInfo(actionCode, successNum, failedNum) {
        if (successNum && !failedNum) { //批量全部成功
            actionCode === "submit" && this.notifyService.success('提交审批成功！');
            actionCode === "cancel" && this.notifyService.success('取消提交成功！');
        }
        if (successNum && failedNum) { //批量有成功有失败
            this.notifyService.warning(`操作成功${successNum}条，失败${failedNum}条!`);
        }
        if (!successNum && failedNum) { //批量全部失败
            actionCode === "submit" && this.notifyService.error('提交审批失败！');
            actionCode === "cancel" && this.notifyService.error('取消提交失败！');
        }
    }
}
if (false) {
    /** @type {?} */
    WfTaskHandlerService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.processSelectorService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.notifyService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2YtdGFzay1oYW5kbGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3dvcmstZmxvdy1zZXJ2aWNlL3dmLXRhc2staGFuZGxlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFjLE9BQU8sRUFBTSxNQUFNLE1BQU0sQ0FBQztBQUUvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQzs7OztBQUkxRix1QkFBb0Q7OztJQUEvQix3QkFBYTs7SUFBQywyQkFBZTs7QUFBRSxDQUFDO0FBRXJELE1BQU0sT0FBTyxvQkFBb0I7Ozs7Ozs7SUFJL0IsWUFDVSxzQkFBOEMsRUFDOUMsV0FBd0IsRUFDeEIsY0FBOEIsRUFDOUIsYUFBNEI7UUFINUIsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUF3QjtRQUM5QyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtRQUN4QixtQkFBYyxHQUFkLGNBQWMsQ0FBZ0I7UUFDOUIsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFOdEMsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFPLENBQUM7SUFPekIsQ0FBQzs7Ozs7O0lBTUwsWUFBWSxDQUFDLE9BQTRCOztjQUNqQyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUU7UUFDN0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUM5QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxFQUFFLENBQUMsU0FBUzs7OztRQUNoRCxDQUFDLFFBQWtCLEVBQUUsRUFBRTtZQUNyQixJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssU0FBUyxFQUFFO2dCQUMvQixJQUFJLFFBQVEsQ0FBQyxPQUFPLEVBQUU7b0JBQ3BCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsQ0FBQztvQkFDN0MsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQTtpQkFDbkI7YUFDRjtpQkFBTSxJQUFJLFFBQVEsQ0FBQyxJQUFJLEtBQUssT0FBTyxFQUFFO2dCQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO2dCQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDNUM7UUFDSCxDQUFDOzs7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLENBQUMsRUFBQyxDQUFBO1FBQ0osT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7OztJQU1ELFlBQVksQ0FBQyxPQUE0Qjs7Y0FDakMsT0FBTyxHQUFHLElBQUksT0FBTyxFQUFFO1FBQzdCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3BELE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDbkIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN2QyxDQUFDOzs7O1FBQUUsS0FBSyxDQUFDLEVBQUU7WUFDVCxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3BCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDM0IsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLFFBQVEsQ0FBQyxDQUFDO1FBQ3RILENBQUMsRUFBQyxDQUFBO1FBQ0YsT0FBTyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEMsQ0FBQzs7Ozs7OztJQU9ELG1CQUFtQixDQUFDLE1BQWMsRUFBRSxTQUFpQjtRQUNuRCxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1gsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDckMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZDLE9BQU87U0FDUjs7WUFDRyxtQkFBbUIsR0FBRyxJQUFJLG1CQUFtQixFQUFFO1FBQ25ELG1CQUFtQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7UUFDcEMsbUJBQW1CLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUMxQyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQztJQUNoRCxDQUFDOzs7Ozs7O0lBT0Qsc0JBQXNCLENBQUMsTUFBYyxFQUFFLFNBQWlCO1FBQ3RELElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDWCxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUNyQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSOztZQUNHLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLEVBQUU7UUFDbkQsbUJBQW1CLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUNwQyxtQkFBbUIsQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1FBQzFDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2hELENBQUM7Ozs7Ozs7SUFPRCx3QkFBd0IsQ0FBQyxPQUFpQixFQUFFLFNBQWlCO1FBQzNELElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRTtZQUNuQixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNsQyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSO1FBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTs7Z0JBQ3BCLFlBQVksR0FBRyxJQUFJLG1CQUFtQixFQUFFO1lBQzVDLFlBQVksQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDO1lBQ25DLFlBQVksQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2pDLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUN4Qzs7WUFFRyxVQUFVLEdBQVcsQ0FBQzs7WUFDdEIsU0FBUyxHQUFXLENBQUM7O2NBQ25CLE9BQU8sR0FBRyxJQUFJLE9BQU8sRUFBRTtRQUM3QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDbkMsWUFBWSxHQUFHLElBQUksbUJBQW1CLEVBQUU7WUFDNUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFDbkMsWUFBWSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDakMsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUM3QyxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxTQUFTOzs7O1lBQUMsQ0FBQyxRQUFhLEVBQUUsRUFBRTtnQkFDdEUsSUFBSSxRQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksUUFBUSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLEVBQUUsd0JBQXdCO29CQUMvRixTQUFTLEVBQUUsQ0FBQztpQkFDYjtxQkFBTTtvQkFDTCxVQUFVLEVBQUUsQ0FBQztpQkFDZDtnQkFDRCxJQUFJLFVBQVUsR0FBRyxTQUFTLEtBQUssT0FBTyxDQUFDLE1BQU0sRUFBRTtvQkFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBLFVBQVU7b0JBQzdCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2lCQUMzRDtZQUNILENBQUM7OztZQUFFLEdBQUcsRUFBRTtnQkFDTixTQUFTLEVBQUUsQ0FBQztnQkFDWixJQUFJLFVBQVUsR0FBRyxTQUFTLEtBQUssT0FBTyxDQUFDLE1BQU0sRUFBRTtvQkFDN0MsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDM0IsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFBLFVBQVU7b0JBQzlCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2lCQUMzRDtZQUNILENBQUMsRUFBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7O0lBUUQsMkJBQTJCLENBQUMsT0FBaUIsRUFBRSxTQUFpQjtRQUM5RCxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbkIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDbEMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZDLE9BQU87U0FDUjs7Y0FDSyxPQUFPLEdBQUcsSUFBSSxPQUFPLEVBQUU7O1lBQ3pCLFVBQVUsR0FBVyxDQUFDOztZQUN0QixTQUFTLEdBQVcsQ0FBQztRQUN6QixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRTNCLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFOztnQkFDbkMsbUJBQW1CLEdBQUcsSUFBSSxtQkFBbUIsRUFBRTtZQUNuRCxtQkFBbUIsQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3hDLG1CQUFtQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFDMUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTOzs7O1lBQUMsRUFBRSxDQUFDLEVBQUU7Z0JBQ2hFLFVBQVUsRUFBRSxDQUFDO2dCQUNiLElBQUksVUFBVSxHQUFHLFNBQVMsS0FBSyxPQUFPLENBQUMsTUFBTSxFQUFFO29CQUM3QyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO29CQUMzQixPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO29CQUNuQixJQUFJLENBQUMsbUJBQW1CLENBQUMsUUFBUSxFQUFFLFVBQVUsRUFBRSxTQUFTLENBQUMsQ0FBQztpQkFDM0Q7WUFDSCxDQUFDOzs7WUFBRSxHQUFHLEVBQUU7Z0JBQ04sU0FBUyxFQUFFLENBQUM7Z0JBQ1osSUFBSSxVQUFVLEdBQUcsU0FBUyxLQUFLLE9BQU8sQ0FBQyxNQUFNLEVBQUU7b0JBQzdDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7b0JBQzNCLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7b0JBQ3BCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsVUFBVSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2lCQUMzRDtZQUNILENBQUMsRUFBQyxDQUFBO1NBQ0g7UUFDRCxPQUFPLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoQyxDQUFDOzs7Ozs7OztJQVFELFdBQVcsQ0FBQyxZQUFvQixFQUFFLFdBQW1CLEVBQUUsU0FBaUI7UUFDdEUsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSOztZQUNHLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLEVBQUU7UUFDbkQsbUJBQW1CLENBQUMsTUFBTSxHQUFHLEdBQUcsWUFBWSxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQzlELG1CQUFtQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7Ozs7SUFRRCxpQkFBaUIsQ0FBQyxZQUFvQixFQUFFLFdBQW1CLEVBQUUsU0FBaUI7UUFDNUUsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNqQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSOztZQUNHLG1CQUFtQixHQUFHLElBQUksbUJBQW1CLEVBQUU7UUFDbkQsbUJBQW1CLENBQUMsTUFBTSxHQUFHLEdBQUcsWUFBWSxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQzlELG1CQUFtQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDMUMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLG1CQUFtQixDQUFDLENBQUM7SUFDaEQsQ0FBQzs7Ozs7Ozs7SUFRRCxnQkFBZ0IsQ0FBQyxZQUFvQixFQUFFLFlBQXNCLEVBQUUsU0FBaUI7UUFDOUUsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPO1NBQ1I7UUFDRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSOztjQUNLLE9BQU8sR0FBRyxZQUFZLENBQUMsR0FBRzs7OztRQUFDLFdBQVcsQ0FBQyxFQUFFLENBQUMsR0FBRyxZQUFZLElBQUksV0FBVyxFQUFFLEVBQUM7UUFDakYsT0FBTyxJQUFJLENBQUMsd0JBQXdCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQzNELENBQUM7Ozs7Ozs7O0lBUUQsc0JBQXNCLENBQUMsWUFBb0IsRUFBRSxZQUFzQixFQUFFLFNBQWlCO1FBQ3BGLElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUM7WUFDdkMsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNkLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3ZDLE9BQU87U0FDUjs7Y0FDSyxPQUFPLEdBQUcsWUFBWSxDQUFDLEdBQUc7Ozs7UUFBQyxXQUFXLENBQUMsRUFBRSxDQUFDLEdBQUcsWUFBWSxJQUFJLFdBQVcsRUFBRSxFQUFDO1FBQ2pGLE9BQU8sSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxTQUFTLENBQUMsQ0FBQztJQUM5RCxDQUFDOzs7Ozs7Ozs7SUFLTyxtQkFBbUIsQ0FBQyxVQUFrQixFQUFFLFVBQWtCLEVBQUUsU0FBaUI7UUFDbkYsSUFBSSxVQUFVLElBQUksQ0FBQyxTQUFTLEVBQUUsRUFBQyxRQUFRO1lBQ3JDLFVBQVUsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDakUsVUFBVSxLQUFLLFFBQVEsSUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNsRTtRQUNELElBQUksVUFBVSxJQUFJLFNBQVMsRUFBRSxFQUFDLFVBQVU7WUFDdEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsT0FBTyxVQUFVLE9BQU8sU0FBUyxJQUFJLENBQUMsQ0FBQztTQUNuRTtRQUNELElBQUksQ0FBQyxVQUFVLElBQUksU0FBUyxFQUFFLEVBQUMsUUFBUTtZQUNyQyxVQUFVLEtBQUssUUFBUSxJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9ELFVBQVUsS0FBSyxRQUFRLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDaEU7SUFDSCxDQUFDO0NBRUY7OztJQXRTQyx1Q0FBNkI7Ozs7O0lBRzNCLHNEQUFzRDs7Ozs7SUFDdEQsMkNBQWdDOzs7OztJQUNoQyw4Q0FBc0M7Ozs7O0lBQ3RDLDZDQUFvQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlL3Rhc2suc2VydmljZSc7XHJcbmltcG9ydCB7IFN0YXJ0UHJvY2Vzc1BheWxvYWQsIENhbmNlbFN1Ym1pdFBheWxvYWQgfSBmcm9tICcuL2VudGl0eS9zdGFydC1wcm9jZXNzLXBheWxvYWQnO1xyXG5pbXBvcnQgeyBQcm9jZXNzU2VsZWN0b3JTZXJ2aWNlIH0gZnJvbSAnLi9zdWJtaXQvcHJvY2Vzcy1zZWxlY3Rvci12dWUvcHJvY2Vzcy1zZWxlY3Rvci5zZXJ2aWNlJ1xyXG5cclxuaW1wb3J0IHsgTG9hZGluZ1NlcnZpY2UsIE5vdGlmeVNlcnZpY2UgfSBmcm9tICcuLi91aS1zZXJ2aWNlcy9pbmRleCc7XHJcbmludGVyZmFjZSBSZXNwb25zZSB7IHR5cGU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nIH07XHJcblxyXG5leHBvcnQgY2xhc3MgV2ZUYXNrSGFuZGxlclNlcnZpY2Uge1xyXG5cclxuICBzdWJqZWN0ID0gbmV3IFN1YmplY3Q8YW55PigpO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcHJvY2Vzc1NlbGVjdG9yU2VydmljZTogUHJvY2Vzc1NlbGVjdG9yU2VydmljZSxcclxuICAgIHByaXZhdGUgdGFza1NlcnZpY2U6IFRhc2tTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBsb2FkaW5nU2VydmljZTogTG9hZGluZ1NlcnZpY2UsXHJcbiAgICBwcml2YXRlIG5vdGlmeVNlcnZpY2U6IE5vdGlmeVNlcnZpY2VcclxuICApIHsgfVxyXG5cclxuICAvKipcclxuICAgKiDmj5DkuqTlrqHmiblcclxuICAgKiBAcGFyYW0gcGF5bG9hZCDkuIrkuIvmloflj4LmlbBcclxuICAgKi9cclxuICBzdGFydFByb2Nlc3MocGF5bG9hZDogU3RhcnRQcm9jZXNzUGF5bG9hZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBjb25zdCBzdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICAgIHRoaXMucHJvY2Vzc1NlbGVjdG9yU2VydmljZS5zZXRQYXJhbShwYXlsb2FkKTtcclxuICAgIHRoaXMucHJvY2Vzc1NlbGVjdG9yU2VydmljZS5nZXRTdWJqZWN0KCkuc3Vic2NyaWJlKFxyXG4gICAgICAocmVzcG9uc2U6IFJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnR5cGUgPT09ICdzdWNjZXNzJykge1xyXG4gICAgICAgICAgaWYgKHJlc3BvbnNlLm1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MocmVzcG9uc2UubWVzc2FnZSk7XHJcbiAgICAgICAgICAgIHN1YmplY3QubmV4dCh0cnVlKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSBpZiAocmVzcG9uc2UudHlwZSA9PT0gJ2Vycm9yJykge1xyXG4gICAgICAgICAgc3ViamVjdC5uZXh0KGZhbHNlKVxyXG4gICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKHJlc3BvbnNlLm1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgKCkgPT4ge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB9KVxyXG4gICAgcmV0dXJuIHN1YmplY3QuYXNPYnNlcnZhYmxlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5bmtojmj5DkuqRcclxuICAgKiBAcGF5bG9hZCBwYXlsb2FkIOWPguaVsFxyXG4gICAqL1xyXG4gIGNhbmNlbFN1Ym1pdChwYXlsb2FkOiBDYW5jZWxTdWJtaXRQYXlsb2FkKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGNvbnN0IHN1YmplY3QgPSBuZXcgU3ViamVjdCgpO1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICB0aGlzLnRhc2tTZXJ2aWNlLmNhbmNlbFN1Ym1pdChwYXlsb2FkKS5zdWJzY3JpYmUocmUgPT4ge1xyXG4gICAgICBzdWJqZWN0Lm5leHQodHJ1ZSk7XHJcbiAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2Vzcygn5Y+W5raI5o+Q5Lqk5oiQ5YqfJyk7XHJcbiAgICB9LCBlcnJvciA9PiB7XHJcbiAgICAgIHN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UuZGF0YSAmJiBlcnJvci5yZXNwb25zZS5kYXRhLk1lc3NhZ2UgfHwgJ+WPlua2iOaPkOS6pOWksei0pScpO1xyXG4gICAgfSlcclxuICAgIHJldHVybiBzdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIOaPkOS6pOWuoeaJuVxyXG4gKiBAcGFyYW0gZGF0YUlkIOihqOWNlWlkXHJcbiAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICovXHJcbiAgc3VibWl0V2l0aEJpekRlZktleShkYXRhSWQ6IHN0cmluZywgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFkYXRhSWQpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCfooajljZVpZOS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWJpekRlZktleSkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+WFpeWPo+WNleaNrklk5LiN6IO95Li656m6Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBzdGFydFByb2Nlc3NQYXlsb2FkID0gbmV3IFN0YXJ0UHJvY2Vzc1BheWxvYWQoKTtcclxuICAgIHN0YXJ0UHJvY2Vzc1BheWxvYWQuZGF0YUlkID0gZGF0YUlkO1xyXG4gICAgc3RhcnRQcm9jZXNzUGF5bG9hZC5iaXpEZWZLZXkgPSBiaXpEZWZLZXk7XHJcbiAgICByZXR1cm4gdGhpcy5zdGFydFByb2Nlc3Moc3RhcnRQcm9jZXNzUGF5bG9hZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlj5bmtojmj5DkuqTlrqHmiblcclxuICAgKiBAcGFyYW0gZGF0YUlkIOihqOWNlWlkXHJcbiAgICogQHBhcmFtIGJpekRlZktleSDlhaXlj6PljZXmja5pZFxyXG4gICAqL1xyXG4gIGNhbmNlbFN1Ym1pdFdpdGhEYXRhSWQoZGF0YUlkOiBzdHJpbmcsIGJpekRlZktleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghZGF0YUlkKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcign6KGo5Y2VaWTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFiaXpEZWZLZXkpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCflhaXlj6PljZXmja5JZOS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY2FuY2VsU3VibWl0UGF5bG9hZCA9IG5ldyBDYW5jZWxTdWJtaXRQYXlsb2FkKCk7XHJcbiAgICBjYW5jZWxTdWJtaXRQYXlsb2FkLmRhdGFJZCA9IGRhdGFJZDtcclxuICAgIGNhbmNlbFN1Ym1pdFBheWxvYWQuYml6RGVmS2V5ID0gYml6RGVmS2V5O1xyXG4gICAgcmV0dXJuIHRoaXMuY2FuY2VsU3VibWl0KGNhbmNlbFN1Ym1pdFBheWxvYWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5om56YeP5o+Q5Lqk5a6h5om5XHJcbiAgICogQHBhcmFtIGRhdGFJZHMg6KGo5Y2VSUTpm4blkIhcclxuICAgKiBAcGFyYW0gYml6RGVmS2V5IOWFpeWPo+WNleaNrmlkXHJcbiAgICovXHJcbiAgYmF0Y2hTdWJtaXRXaXRoQml6RGVmS2V5KGRhdGFJZHM6IHN0cmluZ1tdLCBiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoIWRhdGFJZHMpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCdkYXRhSWTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFkYXRhSWRzLmxlbmd0aCkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+ivt+mAieaLqeaVsOaNricpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWJpekRlZktleSkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+WFpeWPo+WNleaNrklE5LiN6IO95Li656m6Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChkYXRhSWRzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICB2YXIgc3RhcnRQYXlsb2FkID0gbmV3IFN0YXJ0UHJvY2Vzc1BheWxvYWQoKVxyXG4gICAgICBzdGFydFBheWxvYWQuYml6RGVmS2V5ID0gYml6RGVmS2V5O1xyXG4gICAgICBzdGFydFBheWxvYWQuZGF0YUlkID0gZGF0YUlkc1swXTtcclxuICAgICAgcmV0dXJuIHRoaXMuc3RhcnRQcm9jZXNzKHN0YXJ0UGF5bG9hZCk7XHJcbiAgICB9XHJcblxyXG4gICAgdmFyIHN1Y2Nlc3NOdW06IG51bWJlciA9IDA7XHJcbiAgICB2YXIgZmFpbGVkTnVtOiBudW1iZXIgPSAwO1xyXG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YUlkcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICB2YXIgc3RhcnRQYXlsb2FkID0gbmV3IFN0YXJ0UHJvY2Vzc1BheWxvYWQoKVxyXG4gICAgICBzdGFydFBheWxvYWQuYml6RGVmS2V5ID0gYml6RGVmS2V5O1xyXG4gICAgICBzdGFydFBheWxvYWQuZGF0YUlkID0gZGF0YUlkc1tpXTtcclxuICAgICAgc3RhcnRQYXlsb2FkLnZhcmlhYmxlcyA9IHsgc2ltdWxhdGU6IGZhbHNlIH07XHJcbiAgICAgIHRoaXMudGFza1NlcnZpY2Uuc3RhcnRQcm9jZXNzKHN0YXJ0UGF5bG9hZCkuc3Vic2NyaWJlKChyZXNwb25zZTogYW55KSA9PiB7XHJcbiAgICAgICAgaWYgKHJlc3BvbnNlLnByb2NEZWZzLmxlbmd0aCA+IDEgfHwgcmVzcG9uc2UubmV4dEZsb3dOb2Rlcy5sZW5ndGggPiAxKSB7IC8v5a2Y5Zyo5aSa5Liq5rWB56iL77yM5Y2V54us5o+Q5LqkLy/lpJrkuKroioLngrnvvIzljZXni6zmj5DkuqRcclxuICAgICAgICAgIGZhaWxlZE51bSsrO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBzdWNjZXNzTnVtKys7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChzdWNjZXNzTnVtICsgZmFpbGVkTnVtID09PSBkYXRhSWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgICBzdWJqZWN0Lm5leHQodHJ1ZSk7Ly/lhajpg6jmiafooYzlrozlho3ov5Tlm55cclxuICAgICAgICAgIHRoaXMuc2hvd0JhdGNoU3VibWl0SW5mbyhcInN1Ym1pdFwiLCBzdWNjZXNzTnVtLCBmYWlsZWROdW0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfSwgKCkgPT4ge1xyXG4gICAgICAgIGZhaWxlZE51bSsrO1xyXG4gICAgICAgIGlmIChzdWNjZXNzTnVtICsgZmFpbGVkTnVtID09PSBkYXRhSWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgICBzdWJqZWN0Lm5leHQoZmFsc2UpOy8v5YWo6YOo5omn6KGM5a6M5YaN6L+U5ZueXHJcbiAgICAgICAgICB0aGlzLnNob3dCYXRjaFN1Ym1pdEluZm8oXCJzdWJtaXRcIiwgc3VjY2Vzc051bSwgZmFpbGVkTnVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG5cclxuICAvKipcclxuICAgKiDmibnph4/lj5bmtojmj5DkuqTlrqHmiblcclxuICAgKiBAcGFyYW0gZGF0YUlkcyDooajljZVJROmbhuWQiFxyXG4gICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICAgKi9cclxuICBiYXRjaENhbmNlbFN1Ym1pdFdpdGhEYXRhSWQoZGF0YUlkczogc3RyaW5nW10sIGJpekRlZktleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghZGF0YUlkcykge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ2RhdGFJZOS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWRhdGFJZHMubGVuZ3RoKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcign6K+36YCJ5oup5pWw5o2uJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghYml6RGVmS2V5KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcign5YWl5Y+j5Y2V5o2uSUTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3ViamVjdCA9IG5ldyBTdWJqZWN0KCk7XHJcbiAgICB2YXIgc3VjY2Vzc051bTogbnVtYmVyID0gMDtcclxuICAgIHZhciBmYWlsZWROdW06IG51bWJlciA9IDA7XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuXHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGFJZHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgdmFyIGNhbmNlbFN1Ym1pdFBheWxvYWQgPSBuZXcgQ2FuY2VsU3VibWl0UGF5bG9hZCgpO1xyXG4gICAgICBjYW5jZWxTdWJtaXRQYXlsb2FkLmRhdGFJZCA9IGRhdGFJZHNbaV07XHJcbiAgICAgIGNhbmNlbFN1Ym1pdFBheWxvYWQuYml6RGVmS2V5ID0gYml6RGVmS2V5O1xyXG4gICAgICB0aGlzLnRhc2tTZXJ2aWNlLmNhbmNlbFN1Ym1pdChjYW5jZWxTdWJtaXRQYXlsb2FkKS5zdWJzY3JpYmUocmUgPT4ge1xyXG4gICAgICAgIHN1Y2Nlc3NOdW0rKztcclxuICAgICAgICBpZiAoc3VjY2Vzc051bSArIGZhaWxlZE51bSA9PT0gZGF0YUlkcy5sZW5ndGgpIHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgc3ViamVjdC5uZXh0KHRydWUpO1xyXG4gICAgICAgICAgdGhpcy5zaG93QmF0Y2hTdWJtaXRJbmZvKFwiY2FuY2VsXCIsIHN1Y2Nlc3NOdW0sIGZhaWxlZE51bSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LCAoKSA9PiB7XHJcbiAgICAgICAgZmFpbGVkTnVtKys7XHJcbiAgICAgICAgaWYgKHN1Y2Nlc3NOdW0gKyBmYWlsZWROdW0gPT09IGRhdGFJZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICAgIHN1YmplY3QubmV4dChmYWxzZSk7XHJcbiAgICAgICAgICB0aGlzLnNob3dCYXRjaFN1Ym1pdEluZm8oXCJjYW5jZWxcIiwgc3VjY2Vzc051bSwgZmFpbGVkTnVtKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgICByZXR1cm4gc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiDlrZDooajmj5DkuqTlrqHmiblcclxuICogQHBhcmFtIHBhcmVudERhdGFJZCDkuLvooahpZFxyXG4gKiBAcGFyYW0gY2hpbGREYXRhSWQg5a2Q6KGoaWRcclxuICogQHBhcmFtIGJpekRlZktleSDlhaXlj6PljZXmja5pZFxyXG4gKi9cclxuICBjaGlsZFN1Ym1pdChwYXJlbnREYXRhSWQ6IHN0cmluZywgY2hpbGREYXRhSWQ6IHN0cmluZywgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFwYXJlbnREYXRhSWQgfHwgIWNoaWxkRGF0YUlkKSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcignZGF0YUlk5LiN6IO95Li656m6Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICghYml6RGVmS2V5KSB7XHJcbiAgICAgIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcign5YWl5Y+j5Y2V5o2uSUTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgdmFyIHN0YXJ0UHJvY2Vzc1BheWxvYWQgPSBuZXcgU3RhcnRQcm9jZXNzUGF5bG9hZCgpO1xyXG4gICAgc3RhcnRQcm9jZXNzUGF5bG9hZC5kYXRhSWQgPSBgJHtwYXJlbnREYXRhSWR9LCR7Y2hpbGREYXRhSWR9YDtcclxuICAgIHN0YXJ0UHJvY2Vzc1BheWxvYWQuYml6RGVmS2V5ID0gYml6RGVmS2V5O1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRQcm9jZXNzKHN0YXJ0UHJvY2Vzc1BheWxvYWQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIOWtkOihqOWPlua2iOaPkOS6pOWuoeaJuVxyXG4gKiBAcGFyYW0gcGFyZW50RGF0YUlkIOS4u+ihqGlkXHJcbiAqIEBwYXJhbSBjaGlsZERhdGFJZCDlrZDooahpZFxyXG4gKiBAcGFyYW0gYml6RGVmS2V5IOWFpeWPo+WNleaNrmlkXHJcbiAqL1xyXG4gIGNoaWxkQ2FuY2VsU3VibWl0KHBhcmVudERhdGFJZDogc3RyaW5nLCBjaGlsZERhdGFJZDogc3RyaW5nLCBiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICBpZiAoIXBhcmVudERhdGFJZCB8fCAhY2hpbGREYXRhSWQpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCdkYXRhSWTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFiaXpEZWZLZXkpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCflhaXlj6PljZXmja5JROS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY2FuY2VsU3VibWl0UGF5bG9hZCA9IG5ldyBDYW5jZWxTdWJtaXRQYXlsb2FkKCk7XHJcbiAgICBjYW5jZWxTdWJtaXRQYXlsb2FkLmRhdGFJZCA9IGAke3BhcmVudERhdGFJZH0sJHtjaGlsZERhdGFJZH1gO1xyXG4gICAgY2FuY2VsU3VibWl0UGF5bG9hZC5iaXpEZWZLZXkgPSBiaXpEZWZLZXk7XHJcbiAgICByZXR1cm4gdGhpcy5jYW5jZWxTdWJtaXQoY2FuY2VsU3VibWl0UGF5bG9hZCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICog5a2Q6KGo5om56YeP5o+Q5Lqk5a6h5om5XHJcbiAqIEBwYXJhbSBwYXJlbnREYXRhSWQg5Li76KGoaWRcclxuICogQHBhcmFtIGNoaWxkRGF0YUlkcyDlrZDooahpZOmbhuWQiFxyXG4gKiBAcGFyYW0gYml6RGVmS2V5IOWFpeWPo+WNleaNrmlkXHJcbiAqL1xyXG4gIGNoaWxkQmF0Y2hTdWJtaXQocGFyZW50RGF0YUlkOiBzdHJpbmcsIGNoaWxkRGF0YUlkczogc3RyaW5nW10sIGJpekRlZktleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgIGlmICghcGFyZW50RGF0YUlkIHx8ICFjaGlsZERhdGFJZHMpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCdkYXRhSWTkuI3og73kuLrnqbonKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCFiaXpEZWZLZXkpIHtcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCflhaXlj6PljZXmja5JROS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBjb25zdCBkYXRhSWRzID0gY2hpbGREYXRhSWRzLm1hcChjaGlsZERhdGFJZCA9PiBgJHtwYXJlbnREYXRhSWR9LCR7Y2hpbGREYXRhSWR9YCk7XHJcbiAgICByZXR1cm4gdGhpcy5iYXRjaFN1Ym1pdFdpdGhCaXpEZWZLZXkoZGF0YUlkcywgYml6RGVmS2V5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiDlrZDooajmibnph4/lj5bmtojmj5DkuqTlrqHmiblcclxuICogQHBhcmFtIHBhcmVudERhdGFJZCDkuLvooahpZFxyXG4gKiBAcGFyYW0gY2hpbGREYXRhSWRzIOWtkOihqGlk6ZuG5ZCIXHJcbiAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICovXHJcbiAgY2hpbGRCYXRjaENhbmNlbFN1Ym1pdChwYXJlbnREYXRhSWQ6IHN0cmluZywgY2hpbGREYXRhSWRzOiBzdHJpbmdbXSwgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgaWYgKCFwYXJlbnREYXRhSWQgfHwgIWNoaWxkRGF0YUlkcykge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ2RhdGFJZOS4jeiDveS4uuepuicpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoIWJpekRlZktleSkge1xyXG4gICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+WFpeWPo+WNleaNrklE5LiN6IO95Li656m6Jyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGNvbnN0IGRhdGFJZHMgPSBjaGlsZERhdGFJZHMubWFwKGNoaWxkRGF0YUlkID0+IGAke3BhcmVudERhdGFJZH0sJHtjaGlsZERhdGFJZH1gKTtcclxuICAgIHJldHVybiB0aGlzLmJhdGNoQ2FuY2VsU3VibWl0V2l0aERhdGFJZChkYXRhSWRzLCBiaXpEZWZLZXkpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAqIOaJuemHj+aPkOS6pOOAgeWPlua2iOaPkOS6pOaPkOekuuS/oeaBr1xyXG4gKi9cclxuICBwcml2YXRlIHNob3dCYXRjaFN1Ym1pdEluZm8oYWN0aW9uQ29kZTogc3RyaW5nLCBzdWNjZXNzTnVtOiBudW1iZXIsIGZhaWxlZE51bTogbnVtYmVyKSB7XHJcbiAgICBpZiAoc3VjY2Vzc051bSAmJiAhZmFpbGVkTnVtKSB7Ly/mibnph4/lhajpg6jmiJDlip9cclxuICAgICAgYWN0aW9uQ29kZSA9PT0gXCJzdWJtaXRcIiAmJiB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2Vzcygn5o+Q5Lqk5a6h5om55oiQ5Yqf77yBJyk7XHJcbiAgICAgIGFjdGlvbkNvZGUgPT09IFwiY2FuY2VsXCIgJiYgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ+WPlua2iOaPkOS6pOaIkOWKn++8gScpO1xyXG4gICAgfVxyXG4gICAgaWYgKHN1Y2Nlc3NOdW0gJiYgZmFpbGVkTnVtKSB7Ly/mibnph4/mnInmiJDlip/mnInlpLHotKVcclxuICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLndhcm5pbmcoYOaTjeS9nOaIkOWKnyR7c3VjY2Vzc051bX3mnaHvvIzlpLHotKUke2ZhaWxlZE51bX3mnaEhYCk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXN1Y2Nlc3NOdW0gJiYgZmFpbGVkTnVtKSB7Ly/mibnph4/lhajpg6jlpLHotKVcclxuICAgICAgYWN0aW9uQ29kZSA9PT0gXCJzdWJtaXRcIiAmJiB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+aPkOS6pOWuoeaJueWksei0pe+8gScpO1xyXG4gICAgICBhY3Rpb25Db2RlID09PSBcImNhbmNlbFwiICYmIHRoaXMubm90aWZ5U2VydmljZS5lcnJvcign5Y+W5raI5o+Q5Lqk5aSx6LSl77yBJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iXX0=