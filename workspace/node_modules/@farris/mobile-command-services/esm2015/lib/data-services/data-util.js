/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/data-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据工具类
 * \@summary
 * 数据相关的工具方法临时放在这里
 */
class DataUtil {
    /**
     * 将BindingPath转换为EntityPath
     * @param {?} bindingPath
     * @param {?} viewModelContext
     * @return {?}
     */
    static convertBindingPathToEntityPath(bindingPath, viewModelContext) {
        /** @type {?} */
        const rid = viewModelContext.bindingData.list.currentId;
        // root表数据id
        /** @type {?} */
        let path = '/' + rid;
        /** @type {?} */
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            for (let index = 1; index < subPaths.length - 1; index++) {
                /** @type {?} */
                const subPath = subPaths[index];
                /** @type {?} */
                const subData = viewModelContext.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * @param {?} viewModelContext
     * @return {?}
     */
    static clearFromValidateType(viewModelContext) {
        /** @type {?} */
        const contexts = viewModelContext.appContext.viewModelContextManager.getContexts();
        /** @type {?} */
        const contextsChild = contexts.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => { return (item.parent && viewModelContext.id === item.parent.id); }));
        if (contextsChild.length >= 1) {
            contextsChild.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.form.resetFieldsValidate();
            }));
        }
    }
    /**
     * @param {?} parame
     * @return {?}
     */
    static stringTransformArray(parame) {
        if (this.parameIsThreeBoss(parame)) {
            return [];
        }
        else {
            return JSON.parse(parame);
        }
    }
    /**
     * 检测参数是否属于三大幻神 ''  undefined  null
     * @param {?} parame
     * @return {?}
     */
    static parameIsThreeBoss(parame) {
        if (parame === '' || parame === undefined || parame === null) {
            return true;
        }
        else {
            return false;
        }
    }
}
export { DataUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLXNlcnZpY2VzL2RhdGEtdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBT0EsTUFBTSxRQUFROzs7Ozs7O0lBS0wsTUFBTSxDQUFDLDhCQUE4QixDQUFDLFdBQW1CLEVBQUUsZ0JBQWtDOztjQUM1RixHQUFHLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTOzs7WUFDbkQsSUFBSSxHQUFHLEdBQUcsR0FBRyxHQUFHOztjQUVkLFFBQVEsR0FBRyxXQUFXLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUN2QyxJQUFJLFFBQVEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3ZCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxLQUFLLEVBQUUsRUFBRTs7c0JBQ2xELE9BQU8sR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDOztzQkFDekIsT0FBTyxHQUFHLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUM7Z0JBQ3JELElBQUksQ0FBQyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFO29CQUNsQyxNQUFNLEtBQUssQ0FBQyxpQkFBaUIsT0FBTyxtQkFBbUIsQ0FBQyxDQUFDO2lCQUMxRDtnQkFDRCxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO2FBQzVDO1NBQ0Y7UUFDRCxJQUFJLElBQUksR0FBRyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRTVDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMscUJBQXFCLENBQUMsZ0JBQWtDOztjQUM5RCxRQUFRLEdBQUcsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLFdBQVcsRUFBRTs7Y0FDNUUsYUFBYSxHQUFHLFFBQVEsQ0FBQyxNQUFNOzs7O1FBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQSxDQUFDLENBQUMsRUFBQztRQUNqSCxJQUFJLGFBQWEsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO1lBQzdCLGFBQWEsQ0FBQyxPQUFPOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQTtZQUNqQyxDQUFDLEVBQUMsQ0FBQTtTQUNIO0lBQ0gsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsb0JBQW9CLENBQUMsTUFBTTtRQUN2QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUNsQyxPQUFPLEVBQUUsQ0FBQTtTQUNWO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDM0I7SUFDSCxDQUFDOzs7Ozs7SUFLTSxNQUFNLENBQUMsaUJBQWlCLENBQUMsTUFBTTtRQUNwQyxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxNQUFNLEtBQUssSUFBSSxFQUFFO1lBQzVELE9BQU8sSUFBSSxDQUFBO1NBQ1o7YUFBTTtZQUNMLE9BQU8sS0FBSyxDQUFBO1NBQ2I7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuXHJcbi8qKlxyXG4gKiDmlbDmja7lt6XlhbfnsbtcclxuICogQHN1bW1hcnlcclxuICog5pWw5o2u55u45YWz55qE5bel5YW35pa55rOV5Li05pe25pS+5Zyo6L+Z6YeMXHJcbiAqL1xyXG5jbGFzcyBEYXRhVXRpbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOWwhkJpbmRpbmdQYXRo6L2s5o2i5Li6RW50aXR5UGF0aFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydEJpbmRpbmdQYXRoVG9FbnRpdHlQYXRoKGJpbmRpbmdQYXRoOiBzdHJpbmcsIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpOiBzdHJpbmcge1xyXG4gICAgY29uc3QgcmlkID0gdmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDsgLy8gcm9vdOihqOaVsOaNrmlkXHJcbiAgICBsZXQgcGF0aCA9ICcvJyArIHJpZDtcclxuXHJcbiAgICBjb25zdCBzdWJQYXRocyA9IGJpbmRpbmdQYXRoLnNwbGl0KCcvJyk7XHJcbiAgICBpZiAoc3ViUGF0aHMubGVuZ3RoID4gMCkge1xyXG4gICAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgc3ViUGF0aHMubGVuZ3RoIC0gMTsgaW5kZXgrKykge1xyXG4gICAgICAgIGNvbnN0IHN1YlBhdGggPSBzdWJQYXRoc1tpbmRleF07XHJcbiAgICAgICAgY29uc3Qgc3ViRGF0YSA9IHZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGFbc3ViUGF0aF07XHJcbiAgICAgICAgaWYgKCFzdWJEYXRhIHx8ICFzdWJEYXRhLmN1cnJlbnRJZCkge1xyXG4gICAgICAgICAgdGhyb3cgRXJyb3IoYOiOt+WPluWtkOihqOWujOaVtOi3r+W+hOWHuumUme+8jOaJvuS4jeWIsCR7c3ViRGF0YX3lr7nlupTnmoTlrZDooajvvIzmiJblr7nlupTlrZDooajmsqHmnInlvZPliY3ooYzjgIJgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcGF0aCArPSBgLyR7c3ViUGF0aH0vJHtzdWJEYXRhLmN1cnJlbnRJZH1gO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBwYXRoICs9ICcvJyArIHN1YlBhdGhzW3N1YlBhdGhzLmxlbmd0aCAtIDFdO1xyXG5cclxuICAgIHJldHVybiBwYXRoO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjbGVhckZyb21WYWxpZGF0ZVR5cGUodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCk6IHZvaWQge1xyXG4gICAgY29uc3QgY29udGV4dHMgPSB2aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQudmlld01vZGVsQ29udGV4dE1hbmFnZXIuZ2V0Q29udGV4dHMoKTtcclxuICAgIGNvbnN0IGNvbnRleHRzQ2hpbGQgPSBjb250ZXh0cy5maWx0ZXIoaXRlbSA9PiB7IHJldHVybiAoaXRlbS5wYXJlbnQgJiYgdmlld01vZGVsQ29udGV4dC5pZCA9PT0gaXRlbS5wYXJlbnQuaWQpIH0pXHJcbiAgICBpZiAoY29udGV4dHNDaGlsZC5sZW5ndGggPj0gMSkge1xyXG4gICAgICBjb250ZXh0c0NoaWxkLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgICAgaXRlbS5mb3JtLnJlc2V0RmllbGRzVmFsaWRhdGUoKVxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBzdHJpbmdUcmFuc2Zvcm1BcnJheShwYXJhbWUpOiBhbnlbXSB7XHJcbiAgICBpZiAodGhpcy5wYXJhbWVJc1RocmVlQm9zcyhwYXJhbWUpKSB7XHJcbiAgICAgIHJldHVybiBbXVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIEpTT04ucGFyc2UocGFyYW1lKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOajgOa1i+WPguaVsOaYr+WQpuWxnuS6juS4ieWkp+W5u+elniAnJyAgdW5kZWZpbmVkICBudWxsXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBwYXJhbWVJc1RocmVlQm9zcyhwYXJhbWUpIHtcclxuICAgIGlmIChwYXJhbWUgPT09ICcnIHx8IHBhcmFtZSA9PT0gdW5kZWZpbmVkIHx8IHBhcmFtZSA9PT0gbnVsbCkge1xyXG4gICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBEYXRhVXRpbCB9O1xyXG5cclxuIl19