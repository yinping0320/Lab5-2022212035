/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/approve.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMPTY } from 'rxjs';
import { NotifyService } from '../ui-services/index';
class ApproveService {
    /**
     * @param {?} wfTaskHandlerService
     * @param {?} viewModelContext
     */
    constructor(wfTaskHandlerService, viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.wfTaskHandlerService = wfTaskHandlerService;
        this.notifyService = this.getService(NotifyService);
    }
    /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    getService(token) {
        /** @type {?} */
        const injector = this.viewModelContext.injector;
        return injector.get(token);
    }
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param {?} bizBillID 业务单据Id
     * @param {?} bizDefKey 入口单据Id
     * @param {?=} options 上下文参数
     * @param {?=} variables 可选参数
     * @return {?}
     */
    submitApproveWithBizDefKeyUseControl(bizBillID, bizDefKey, options = {}, variables) {
        if (!bizBillID) {
            this.notifyService.error('业务单据Id不能为空');
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        /** @type {?} */
        const payload = Object.assign({ dataId: bizBillID, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    console.log('variables parse failed!');
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 取消审批(支持主表、子表)
     * 迁移web端（已废弃）请调用新的取消提交方法
     * @param {?} procInstId 流程实例Id
     * @return {?}
     */
    cancelSubmit(procInstId) {
        if (!procInstId) {
            this.notifyService.error('流程实例Id不能为空');
            return EMPTY;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ dataId: null, bizDefKey: null, procInstId });
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.submitWithBizDefKey(dataId, bizDefKey);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmitWithDataId(dataId, bizDefKey);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childSubmit(parentDataId, childDataId, bizDefKey);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childCancelSubmit(parentDataId, childDataId, bizDefKey);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchSubmit(parentDataId, childDataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.wfTaskHandlerService;
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.notifyService;
    /**
     * @type {?}
     * @protected
     */
    ApproveService.prototype.viewModelContext;
}
export { ApproveService };
//# sourceMappingURL=data:application/json;base64,