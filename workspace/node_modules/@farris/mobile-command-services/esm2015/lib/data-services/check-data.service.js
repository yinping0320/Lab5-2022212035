/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/check-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, EMPTY } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
import { DataUtil } from './data-util';
import { BefRepositoryUtil } from '@farris/mobile-bef';
import { HttpMethods } from '@farris/mobile-devkit';
/**
 * 数据检查服务
 */
class CheckDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 离开页面前检查数据变更
     * @return {?}
     */
    checkChangesBeforeLeave() {
        //const isEntitiesChanged = this.befRepository.entityManager.checkAllEntityChanges();
        // 实体数据没有变化，继续执行
        if (!BefRepositoryUtil.isExistUnsaveData(this.befRepository)) {
            return of(true);
        }
        return this.dialogService.confirm('存在未保存的变更，确认离开当前页面？').pipe(switchMap((/**
         * @param {?} ifLeave
         * @return {?}
         */
        (ifLeave) => {
            if (ifLeave === false) {
                return EMPTY;
            }
            else {
                this.loadingService.show();
                /** @type {?} */
                const cancel$ = this.befRepository.cancelEntityChanges();
                return cancel$.pipe(switchMap((/**
                 * @return {?}
                 */
                () => {
                    if (this.befRepository.apiProxy.associatedUrlMap.size >= 1) {
                        /** @type {?} */
                        const urls = [...this.befRepository.apiProxy.associatedUrlMap.keys()];
                        return this.befRepository.apiProxy.request(HttpMethods.POST, `${urls[0]}/service/cancel`);
                    }
                    else {
                        return of(true);
                    }
                })), tap((/**
                 * @return {?}
                 */
                () => {
                    this.loadingService.hide();
                })));
            }
        })));
    }
    /**
     * 子表离开页面前检查数据变更
     * @return {?}
     */
    checkChangesBeforeLeaveChild() {
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 继续判断
            /** @type {?} */
            const childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            const childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            const child = this.viewModelContext.uiState['$isAdd'].child;
            /** @type {?} */
            const subPaths = childPath.split('/');
            /** @type {?} */
            let currentChild;
            if (subPaths[0] && subPaths.length === 1) {
                currentChild = this.viewModelContext.bindingData[subPaths[0]];
            }
            if (!subPaths[0] && subPaths.length === 2) {
                currentChild = this.viewModelContext.bindingData[subPaths[1]];
            }
            if (subPaths.length > 2) {
                // 暂不处理从从表
                /** @type {?} */
                let childPath = '';
                if (subPaths[0]) {
                    childPath = subPaths[0];
                }
                for (let index = 1; index < subPaths.length; index++) {
                    childPath = childPath + subPaths[index];
                }
                currentChild = this.viewModelContext.bindingData[childPath];
            }
            /** @type {?} */
            const isChanged = this.checkForVariationBetweenTheTwo(currentChild, child);
            if (isChanged) {
                return of(true);
            }
            /** @type {?} */
            const entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId);
        }
        return of(true);
    }
    /**
     * @private
     * @param {?} newData
     * @param {?} oldData
     * @return {?}
     */
    checkForVariationBetweenTheTwo(newData, oldData) {
        /** @type {?} */
        const childKeys = Object.keys(oldData);
        /** @type {?} */
        let isChanged = false;
        for (let i = 0; i < childKeys.length; i++) {
            if (Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Object]' || Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Array]') {
                if (JSON.stringify(oldData[childKeys[i]]) !== JSON.stringify(newData[childKeys[i]])) {
                    return isChanged = true;
                }
            }
            else {
                if (oldData[childKeys[i]] !== newData[childKeys[i]]) {
                    return isChanged = true;
                }
            }
        }
        return isChanged;
    }
    /**
     * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    checkChangesBeforeLeaveAddOrEditChild(path) {
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 新增直接干掉
            /** @type {?} */
            const childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            const childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            const entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId).pipe(tap((/**
             * @return {?}
             */
            () => {
                this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            })));
        }
        else {
            // 编辑还原
            /** @type {?} */
            const childID = this.viewModelContext.bindingData[path]['id'];
            /** @type {?} */
            const id = this.viewModelContext.bindingData[path]['parentID'];
            /** @type {?} */
            const childEntityData = this.viewModelContext.uiState['$childEntity'];
            if (!childEntityData) {
                return of(true);
            }
            this.viewModelContext.repository.entityCollection.getEntityById(id)[path].get(childID).load(childEntityData);
            return of(true);
        }
    }
}
export { CheckDataService };
//# sourceMappingURL=data:application/json;base64,