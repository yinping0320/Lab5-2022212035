/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/remove-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of, EMPTY } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { DataUtil } from './data-util';
import { BaseDataService } from './base-data.service';
/**
 * 删除数据服务类
 */
export class RemoveDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 删除数据
     * @param {?} id
     * @return {?}
     */
    removeById(id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            if (this['context'] && this['context'].eventParams && this['context'].eventParams.swipecellClose) {
                this['context'].eventParams.swipecellClose();
            }
            return this.cancelChanges(id);
        })));
        return result$;
    }
    /**
     * 确认删除
     * @private
     * @param {?} id
     * @return {?}
     */
    cancelChanges(id) {
        this.loadingService.show();
        /** @type {?} */
        const remove$ = this.befRepository.removeEntityAndSaveById(id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.notifyService.success('删除成功');
            this.loadingService.hide();
        }), (/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.error('删除失败');
        })));
    }
    /**
     * 批量删除数据
     * @param {?} ids
     * @return {?}
     */
    removeByIds(ids) {
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            const selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        const multiRemove$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            this.loadingService.show();
            return this.befRepository.removeEntitiesByIds(ids);
        })));
        return multiRemove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('删除成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
            // this.exceptionService.show('删除失败', exception);
        })));
    }
    /**
     * 删除后代节点数据
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByPathAndId(path, id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            if (this['context'] && this['context'].eventParams && this['context'].eventParams.swipecellClose) {
                this['context'].eventParams.swipecellClose();
            }
            return this.removeByPathAndIdChanges(path, id);
        })));
        return result$;
    }
    /**
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByPathAndIdChanges(path, id) {
        this.loadingService.show();
        /** @type {?} */
        const entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
        /** @type {?} */
        const remove$ = this.befRepository.removeEntityByPath(entityPath, id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('删除成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.loadingService.hide();
            console.error(error);
        })));
    }
    /**
     * 批量删除后代节点数据
     * @param {?} path
     * @param {?} ids
     * @return {?}
     */
    removeByPathAndIds(path, ids) {
        throw new Error('Not Implemented');
    }
    /**
     * 业务附件批量删除数据
     * @param {?} url
     * @param {?} ids
     * @return {?}
     */
    removeByBusinessIds(url, ids) {
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            const selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const requestConfig = {
            params: params,
            body: {
                dataChange: [],
                variableChange: null
            }
        };
        return this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig, true);
        // this.loadingService.show();
        // const multiRemove$ = this.dialogService.confirm('是否删除').pipe(
        //   switchMap(val => {
        //     if (val === false) {
        //       return EMPTY;
        //     }
        //   }));
        // return multiRemove$.pipe(
        //   tap(
        //     () => {
        //       this.loadingService.hide();
        //     },
        //     (exception: any) => {
        //       this.loadingService.hide();
        //     }
        //   )
        // );
    }
    /**
     * 业务附件删除后代节点数据
     * @param {?} url
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByBusinessPathAndId(url, path, id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            return this.befRepository.apiProxy.request(HttpMethods.PUT, url);
        })));
        return result$;
    }
    /**
     * 子表清除编辑与新增标记
     * @return {?}
     */
    ClearStatusAfterchildCardSave() {
        this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
        this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
        return of(true);
    }
}
//# sourceMappingURL=data:application/json;base64,