/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/be-action.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
/**
 * BE动作调用服务
 */
class BeActionService extends BaseDataService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
        this.viewModelContext = viewModelContext;
    }
    /**
     * 执行自定义动作
     * @param {?} actionUrl
     * @param {?} httpMethod
     * @param {?=} httpHeaders
     * @param {?=} params
     * @param {?=} body
     * @return {?}
     */
    invokeAction(actionUrl, httpMethod, httpHeaders, params, body) {
        return this.innerInvokeAction(actionUrl, httpMethod, httpHeaders, params, body);
    }
    /**
     * 调用自定义动作
     * @private
     * @param {?} actionUrl
     * @param {?} method
     * @param {?=} headers
     * @param {?=} params
     * @param {?=} body
     * @return {?}
     */
    innerInvokeAction(actionUrl, method, headers, params, body) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const baseUrl = apiProxy.baseUrl;
        // 构造url
        /** @type {?} */
        const fullActionUrl = `${baseUrl}/service/${actionUrl}`;
        /** @type {?} */
        const requestConfig = {};
        // headers构造
        if (headers) {
            requestConfig.headers = headers;
        }
        // 查询参数
        if (params) {
            requestConfig.params = params;
        }
        // body构造
        if (body) {
            requestConfig.body = body;
        }
        this.loadingService.show();
        /** @type {?} */
        const result$ = apiProxy.request(method, fullActionUrl, requestConfig);
        return result$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.loadingService.hide();
            console.log(error);
        })));
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BeActionService.prototype.viewModelContext;
}
export { BeActionService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmUtYWN0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvYmUtYWN0aW9uLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHckMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLHFCQUFxQixDQUFDOzs7O0FBTXRELE1BQU0sZUFBZ0IsU0FBUSxlQUFlOzs7OztJQUszQyxZQUFzQixnQkFBa0M7UUFDdEQsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFESixxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO0lBRXhELENBQUM7Ozs7Ozs7Ozs7SUFLTSxZQUFZLENBQ2pCLFNBQWlCLEVBQUUsVUFBc0IsRUFBRSxXQUF5QixFQUFFLE1BQW1CLEVBQUUsSUFBVTtRQUVyRyxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbEYsQ0FBQzs7Ozs7Ozs7Ozs7SUFLTyxpQkFBaUIsQ0FDdkIsU0FBaUIsRUFBRSxNQUFrQixFQUFFLE9BQXFCLEVBQUUsTUFBbUIsRUFBRSxJQUFVOztjQUV2RixRQUFRLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxRQUFROztjQUN0QyxPQUFPLEdBQUcsUUFBUSxDQUFDLE9BQU87OztjQUcxQixhQUFhLEdBQUcsR0FBRyxPQUFPLFlBQVksU0FBUyxFQUFFOztjQUNqRCxhQUFhLEdBQXNCLEVBQ3hDO1FBRUQsWUFBWTtRQUNaLElBQUksT0FBTyxFQUFHO1lBQ1osYUFBYSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7U0FDakM7UUFFRCxPQUFPO1FBQ1AsSUFBSSxNQUFNLEVBQUU7WUFDVixhQUFhLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztTQUMvQjtRQUVELFNBQVM7UUFDVCxJQUFJLElBQUksRUFBRTtZQUNSLGFBQWEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO1NBQzNCO1FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQzs7Y0FDckIsT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLGFBQWEsRUFBRSxhQUFhLENBQUM7UUFDdEUsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixHQUFHOzs7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLENBQUM7Ozs7UUFDRCxDQUFDLEtBQVUsRUFBRSxFQUFFO1lBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JCLENBQUMsRUFDRixDQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7Ozs7OztJQXhEYSwyQ0FBNEM7O0FBMkQxRCxPQUFPLEVBQUUsZUFBZSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCwgSHR0cE1ldGhvZCwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXMsIEh0dHBSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgUmVzcG9uc2VJbmZvIH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtYmVmJztcclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XHJcblxyXG5cclxuLyoqXHJcbiAqIEJF5Yqo5L2c6LCD55So5pyN5YqhXHJcbiAqL1xyXG5jbGFzcyBCZUFjdGlvblNlcnZpY2UgZXh0ZW5kcyBCYXNlRGF0YVNlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDmnoTpgKDlh73mlbBcclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgc3VwZXIodmlld01vZGVsQ29udGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDmiafooYzoh6rlrprkuYnliqjkvZxcclxuICAgKi9cclxuICBwdWJsaWMgaW52b2tlQWN0aW9uKFxyXG4gICAgYWN0aW9uVXJsOiBzdHJpbmcsIGh0dHBNZXRob2Q6IEh0dHBNZXRob2QsIGh0dHBIZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMsIGJvZHk/OiBhbnlcclxuICApOiBPYnNlcnZhYmxlPFJlc3BvbnNlSW5mbz4ge1xyXG4gICAgcmV0dXJuIHRoaXMuaW5uZXJJbnZva2VBY3Rpb24oYWN0aW9uVXJsLCBodHRwTWV0aG9kLCBodHRwSGVhZGVycywgcGFyYW1zLCBib2R5KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiwg+eUqOiHquWumuS5ieWKqOS9nFxyXG4gICAqL1xyXG4gIHByaXZhdGUgaW5uZXJJbnZva2VBY3Rpb24oXHJcbiAgICBhY3Rpb25Vcmw6IHN0cmluZywgbWV0aG9kOiBIdHRwTWV0aG9kLCBoZWFkZXJzPzogSHR0cEhlYWRlcnMsIHBhcmFtcz86IEh0dHBQYXJhbXMsIGJvZHk/OiBhbnlcclxuICApOiBPYnNlcnZhYmxlPGFueT4gIHtcclxuICAgIGNvbnN0IGFwaVByb3h5ID0gdGhpcy5iZWZSZXBvc2l0b3J5LmFwaVByb3h5O1xyXG4gICAgY29uc3QgYmFzZVVybCA9IGFwaVByb3h5LmJhc2VVcmw7XHJcblxyXG4gICAgLy8g5p6E6YCgdXJsXHJcbiAgICBjb25zdCBmdWxsQWN0aW9uVXJsID0gYCR7YmFzZVVybH0vc2VydmljZS8ke2FjdGlvblVybH1gO1xyXG4gICAgY29uc3QgcmVxdWVzdENvbmZpZzogSHR0cFJlcXVlc3RDb25maWcgPSB7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIGhlYWRlcnPmnoTpgKBcclxuICAgIGlmIChoZWFkZXJzICkge1xyXG4gICAgICByZXF1ZXN0Q29uZmlnLmhlYWRlcnMgPSBoZWFkZXJzO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOafpeivouWPguaVsFxyXG4gICAgaWYgKHBhcmFtcykge1xyXG4gICAgICByZXF1ZXN0Q29uZmlnLnBhcmFtcyA9IHBhcmFtcztcclxuICAgIH1cclxuXHJcbiAgICAvLyBib2R55p6E6YCgXHJcbiAgICBpZiAoYm9keSkge1xyXG4gICAgICByZXF1ZXN0Q29uZmlnLmJvZHkgPSBib2R5O1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IGFwaVByb3h5LnJlcXVlc3QobWV0aG9kLCBmdWxsQWN0aW9uVXJsLCByZXF1ZXN0Q29uZmlnKTtcclxuICAgIHJldHVybiByZXN1bHQkLnBpcGUoXHJcbiAgICAgIHRhcChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChlcnJvcjogYW55KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKGVycm9yKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuZXhwb3J0IHsgQmVBY3Rpb25TZXJ2aWNlIH07XHJcblxyXG5cclxuIl19