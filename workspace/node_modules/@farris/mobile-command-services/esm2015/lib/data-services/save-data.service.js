/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/save-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { map, tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
export class SaveDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 保存数据
     * @return {?}
     */
    save() {
        this.loadingService.show();
        /** @type {?} */
        const save$ = this.befRepository.saveEntities();
        return save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
    /**
     * 子表保存
     * @return {?}
     */
    saveByPath() {
        this.loadingService.show();
        /** @type {?} */
        const currentRootId = this.viewModelContext.bindingData.list.currentId;
        /** @type {?} */
        const update$ = this.befRepository.updateEntityById(currentRootId);
        /** @type {?} */
        const result$ = update$.pipe(map((/**
         * @return {?}
         */
        () => {
            return true;
        })), tap((/**
         * @return {?}
         */
        () => {
            this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
            this.loadingService.hide();
            this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
        return result$;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvc2F2ZS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQWEsR0FBRyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRXJELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV0RCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxlQUFlOzs7O0lBRWxELFlBQVksZ0JBQWtDO1FBQzVDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBS00sSUFBSTtRQUNULElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7O2NBQ3JCLEtBQUssR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRTtRQUMvQyxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2YsR0FBRzs7O1FBQ0QsR0FBRyxFQUFFO1lBQ0gsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxDQUFDOzs7O1FBQ0QsQ0FBQyxTQUFjLEVBQUUsRUFBRTtZQUNqQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLENBQUMsRUFDRixDQUNGLENBQUM7SUFDSixDQUFDOzs7OztJQUtNLFVBQVU7UUFDZixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDOztjQUNyQixhQUFhLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUzs7Y0FDaEUsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDOztjQUM1RCxPQUFPLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FDMUIsR0FBRzs7O1FBQUMsR0FBRyxFQUFFO1lBQ1AsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLEVBQUMsRUFDRixHQUFHOzs7UUFDRCxHQUFHLEVBQUU7WUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyRSxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNCLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLENBQUM7Ozs7UUFDRCxDQUFDLFNBQWMsRUFBRSxFQUFFO1lBQ2pCLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDN0IsQ0FBQyxFQUNGLENBQ0Y7UUFDRCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCBtYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRW50aXR5LCBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQmFzZURhdGFTZXJ2aWNlIH0gZnJvbSAnLi9iYXNlLWRhdGEuc2VydmljZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgU2F2ZURhdGFTZXJ2aWNlIGV4dGVuZHMgQmFzZURhdGFTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3Iodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xyXG4gICAgc3VwZXIodmlld01vZGVsQ29udGV4dCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDkv53lrZjmlbDmja5cclxuICAgKi9cclxuICBwdWJsaWMgc2F2ZSgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgY29uc3Qgc2F2ZSQgPSB0aGlzLmJlZlJlcG9zaXRvcnkuc2F2ZUVudGl0aWVzKCk7XHJcbiAgICByZXR1cm4gc2F2ZSQucGlwZShcclxuICAgICAgdGFwKFxyXG4gICAgICAgICgpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ+S/neWtmOaIkOWKnycpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGV4Y2VwdGlvbjogYW55KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDlrZDooajkv53lrZhcclxuICAgKi9cclxuICBwdWJsaWMgc2F2ZUJ5UGF0aCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgY29uc3QgY3VycmVudFJvb3RJZCA9IHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJZDtcclxuICAgIGNvbnN0IHVwZGF0ZSQgPSB0aGlzLmJlZlJlcG9zaXRvcnkudXBkYXRlRW50aXR5QnlJZChjdXJyZW50Um9vdElkKTtcclxuICAgIGNvbnN0IHJlc3VsdCQgPSB1cGRhdGUkLnBpcGUoXHJcbiAgICAgIG1hcCgoKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH0pLFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGUuc2V0UHJvcGVydHlWYWx1ZSgnJGlzQWRkJywgbnVsbCk7XHJcbiAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCckY2hpbGRFbnRpdHknLCBudWxsKTtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLnN1Y2Nlc3MoJ+S/neWtmOaIkOWKnycpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgKGV4Y2VwdGlvbjogYW55KSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIClcclxuICAgICk7XHJcbiAgICByZXR1cm4gcmVzdWx0JDtcclxuICB9XHJcbn1cclxuIl19