/**
 * @fileoverview added by tsickle
 * Generated from: lib/router.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { tap, map } from 'rxjs/operators';
import { HttpClient } from '@farris/mobile-devkit';
/**
 * 路由服务
 */
class RouterService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     * @param {?} router
     * @param {?} jsBridgeService
     */
    constructor(viewModelContext, router, jsBridgeService) {
        this.jsBridgeService = jsBridgeService;
        this.viewModelContext = viewModelContext;
        this.router = router;
    }
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    navigate(path, queryParams = {}, backParams = {}, backPath) {
        if (!path)
            return;
        queryParams = this.ParamsFromStringToObject(queryParams);
        backParams = this.ParamsFromStringToObject(backParams);
        /** @type {?} */
        const pathIndex = this.sessionStorageSaveHistory(path, backPath, backParams)
        // 跨工程跳转
        ;
        // 跨工程跳转
        if (path && pathIndex >= 0) {
            /** @type {?} */
            let urlPath = this.splicePath(path, queryParams);
            window.location.href = urlPath;
            return false;
        }
        window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
        this.router.push({
            path: path,
            query: queryParams
        });
    }
    /**
     * @private
     * @param {?} pathIndex
     * @param {?} path
     * @return {?}
     */
    removeParams(pathIndex, path) {
        /** @type {?} */
        let end = path.search('\\?');
        if (end = -1) {
            end = path.length;
        }
        return path.slice(pathIndex, end);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getsessionStorageSaveHistoryKey(path) {
        /** @type {?} */
        const pathIndex = path.search('/apps');
        // 跨页面跳转离开
        if (path && pathIndex >= 0) {
            return this.removeParams(pathIndex, path);
        }
        return this.router.options.history.base + path;
    }
    /**
     * @private
     * @param {?} path
     * @param {?} backPath
     * @param {?} backParams
     * @return {?}
     */
    sessionStorageSaveHistory(path, backPath, backParams) {
        /** @type {?} */
        const pathIndex = path.search('/apps');
        /** @type {?} */
        const key = this.getsessionStorageSaveHistoryKey(path);
        /** @type {?} */
        let historyObject = {}
        //判断是否制定了目标页面得返回地址
        ;
        //判断是否制定了目标页面得返回地址
        if (backPath) {
            /** @type {?} */
            const backPathIndex = path.search('/apps');
            //指定返回路由为跨工程跳转
            if (backPathIndex >= 0) {
                historyObject = {
                    routerWay: 'href',
                    path: backPath,
                    query: backParams
                };
            }
            else {
                historyObject = {
                    routerWay: 'Router',
                    path: backPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
        else {
            /** @type {?} */
            let currentPath = this.router.currentRoute.value.path;
            // 跨页面跳转离开
            if (path && pathIndex >= 0) {
                //拼接当前路由
                currentPath = this.router.options.history.base + this.router.options.history.location;
                //记录当前路由
                historyObject = {
                    routerWay: 'href',
                    path: currentPath,
                    query: backParams
                };
            }
            else {
                // 路由方式跳转记录
                historyObject = {
                    routerWay: 'Router',
                    path: currentPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
    }
    /**
     * 带维度的路由跳转
     * @param {?} path
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    navigateForRtc(path, queryParams = {}, backParams = {}, backPath) {
        if (!queryParams || !queryParams.metadataId) {
            this.navigate(path, queryParams, backParams, backPath);
        }
        /** @type {?} */
        const rtcOptions = {
            metadataId: queryParams.metadataId,
            withDims: false,
            dim1: queryParams.dim1,
            dim2: queryParams.dim2
        };
        delete queryParams['metadataId'];
        delete queryParams['dim1'];
        delete queryParams['dim2'];
        /** @type {?} */
        const correctRtcOptions$ = this.correctRtcOptions(rtcOptions);
        /** @type {?} */
        const extendedPath$ = correctRtcOptions$.pipe(map((/**
         * @param {?} correctedRtcOptions
         * @return {?}
         */
        (correctedRtcOptions) => {
            return this.getExtendPath(path, correctedRtcOptions);
        })));
        /** @type {?} */
        const result$ = extendedPath$.pipe(tap((/**
         * @param {?} extendedPath
         * @return {?}
         */
        (extendedPath) => {
            this.navigate(extendedPath, queryParams, backParams);
        })));
        result$.subscribe();
    }
    /**
     * 纠正维度信息
     * \@summary
     * 1、非运行时定制表单，widthDims=false, 维度为空；
     * 2、运行时定制表单：维度值不存在时，则纠正为public；
     * @private
     * @param {?} rtcOptions
     * @return {?}
     */
    correctRtcOptions(rtcOptions) {
        /** @type {?} */
        const dim1 = rtcOptions.dim1 || 'public';
        /** @type {?} */
        const dim2 = rtcOptions.dim2 || 'public';
        /** @type {?} */
        const metadataId = rtcOptions.metadataId;
        /** @type {?} */
        const httpClient = this.viewModelContext.injector.get(HttpClient);
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/template/beforeNavigate';
        /** @type {?} */
        const body = {
            isRootMetadata: true,
            metadataId: metadataId,
            dim1: dim1,
            dim2: dim2,
        };
        /** @type {?} */
        const beforeNavigate$ = httpClient.post(url, body, null).pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const correctedRtcOptions = {
                metadataId: result.metadataId,
                withDims: result.withDims === 1 ? true : false,
                dim1: result.dim1,
                dim2: result.dim2
            };
            return correctedRtcOptions;
        })));
        return beforeNavigate$;
    }
    /**
     * 获取运行时定制表单地址
     * @private
     * @param {?} path
     * @param {?} rtcOptions
     * @return {?}
     */
    getExtendPath(path, rtcOptions) {
        if (rtcOptions.withDims === false) {
            return path;
        }
        /** @type {?} */
        const arrPath = path.split('index.html');
        /** @type {?} */
        const append = `${rtcOptions.dim1}/${rtcOptions.dim2}/index.html`.toLowerCase();
        /** @type {?} */
        const extendPath = arrPath.join(append);
        return extendPath;
    }
    /**
     * 拼接url路径
     * @private
     * @param {?} path 路径
     * @param {?} params 参数
     * @return {?}
     */
    splicePath(path, params) {
        /** @type {?} */
        let urlPath = path;
        /** @type {?} */
        const end = urlPath.search('\\?');
        if (end > -1) {
            urlPath = urlPath.slice(0, end);
        }
        /** @type {?} */
        const keys = Object.keys(params);
        if (keys.length > 0) {
            urlPath = urlPath + '?';
            keys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                urlPath = urlPath + element + '=' + params[`${element}`] + '&';
            }));
            urlPath = urlPath.slice(0, urlPath.length - 1);
        }
        return urlPath;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ParamsFromStringToObject(params) {
        if (Object.prototype.toString.call(params) === '[object Object]') {
            return params;
        }
        try {
            params = JSON.parse(params);
        }
        catch (error) {
            if (!params) {
                params = {};
            }
            else {
                params = {};
                console.error('路由传参params不是JSON串格式');
            }
        }
        if (Object.prototype.toString.call(params) !== '[object Object]') {
            return {};
        }
        return params;
    }
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @return {?}
     */
    navigateReplace(path, queryParams = {}) {
        if (typeof queryParams === 'string') {
            queryParams = JSON.parse(queryParams);
        }
        this.router.replace({
            path: path,
            query: queryParams
        });
    }
    /**
     * 后退
     * @param {?} params
     * @return {?}
     */
    goBack(params) {
        params = this.ParamsFromStringToObject(params);
        /** @type {?} */
        const currentPath = this.router.options.history.base + this.router.currentRoute.value.path;
        /** @type {?} */
        let need_go_back = sessionStorage.getItem(currentPath);
        if (!need_go_back) {
            if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
                return;
            }
            this.jsBridgeService.closeWindow();
            return;
        }
        /** @type {?} */
        const keys = Object.keys(params);
        need_go_back = JSON.parse(need_go_back);
        if (need_go_back && need_go_back['routerWay'] === 'Router') {
            /** @type {?} */
            let query = need_go_back['query'];
            if (keys.length > 0) {
                query = Object.assign({}, query, params);
            }
            this.router.push({
                query,
                path: need_go_back['path'],
            });
        }
        if (need_go_back && need_go_back['routerWay'] === 'href') {
            /** @type {?} */
            let query = need_go_back['query'];
            if (keys.length > 0) {
                query = Object.assign({}, query, params);
            }
            /** @type {?} */
            let path = need_go_back['path'];
            path = this.splicePath(path, query);
            window.location.href = path;
        }
    }
    /**
     * 映射路由状态
     * @return {?}
     */
    mappingToUIState() {
        /** @type {?} */
        const routerState = {
            params: this.router.currentRoute['value'].params,
            queryParams: this.router.currentRoute['value'].query
        };
        this.viewModelContext.uiState['routerState'] = routerState;
    }
}
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    RouterService.prototype.viewModelContext;
    /**
     * VueRouter实例
     * @type {?}
     * @private
     */
    RouterService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterService.prototype.jsBridgeService;
}
/**
 * Token
 * \@todo：临时方案，直接注入VueRouter实例。
 * @type {?}
 */
const ROUTER_INSTANCE_TOKEN = '@farris/mobile-command-services/ROUTER_INSTANCE_TOKEN';
export { RouterService, ROUTER_INSTANCE_TOKEN };
//# sourceMappingURL=data:application/json;base64,