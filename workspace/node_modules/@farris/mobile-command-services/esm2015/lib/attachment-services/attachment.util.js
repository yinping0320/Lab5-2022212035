/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件信息处理工具类
 */
class AttachmentUtil {
    /**
     * 转换为附件信息数组
     * @param {?} fileInfos
     * @return {?}
     */
    static convertToAttachmentInfos(fileInfos) {
        if (!fileInfos) {
            return [];
        }
        /** @type {?} */
        const attachmentInfos = fileInfos.map((/**
         * @param {?} fileInfo
         * @return {?}
         */
        (fileInfo) => {
            return this.convertToAttachmentInfo(fileInfo);
        }));
        return attachmentInfos;
    }
    /**
     * 转换为附件信息
     * @param {?} fileInfo
     * @return {?}
     */
    static convertToAttachmentInfo(fileInfo) {
        /** @type {?} */
        const attachmentInfo = {
            attachmentId: fileInfo.metadataId,
            fileName: fileInfo.fileName
        };
        return attachmentInfo;
    }
    /**
     * 获取附件列表中的第一个附件
     * @param {?} attachmentInfos
     * @return {?}
     */
    static getFirstAttachmentInfo(attachmentInfos) {
        if (!attachmentInfos || attachmentInfos.length === 0) {
            return;
        }
        /** @type {?} */
        const firstAttachmentInfo = attachmentInfos[0];
        return firstAttachmentInfo;
    }
    /**
     * 提取附件id数组
     * @param {?} attachmentInfos
     * @return {?}
     */
    static peekAttachmentIds(attachmentInfos) {
        if (!attachmentInfos) {
            attachmentInfos = [];
        }
        /** @type {?} */
        const attachmentIds = attachmentInfos.map((/**
         * @param {?} attachmentInfo
         * @return {?}
         */
        (attachmentInfo) => {
            return attachmentInfo.attachmentId;
        }));
        return attachmentIds;
    }
}
export { AttachmentUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXR0YWNobWVudC51dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9hdHRhY2htZW50LXNlcnZpY2VzL2F0dGFjaG1lbnQudXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUtBLE1BQU0sY0FBYzs7Ozs7O0lBS1gsTUFBTSxDQUFDLHdCQUF3QixDQUFDLFNBQTJCO1FBQ2hFLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFPLEVBQUUsQ0FBQztTQUNYOztjQUNLLGVBQWUsR0FBcUIsU0FBUyxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLFFBQXdCLEVBQUUsRUFBRTtZQUNuRixPQUFPLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUNoRCxDQUFDLEVBQUM7UUFDRixPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFLTSxNQUFNLENBQUMsdUJBQXVCLENBQUMsUUFBd0I7O2NBQ3RELGNBQWMsR0FBbUI7WUFDckMsWUFBWSxFQUFFLFFBQVEsQ0FBQyxVQUFVO1lBQ2pDLFFBQVEsRUFBRSxRQUFRLENBQUMsUUFBUTtTQUM1QjtRQUNELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUtNLE1BQU0sQ0FBQyxzQkFBc0IsQ0FBQyxlQUFpQztRQUNwRSxJQUFJLENBQUMsZUFBZSxJQUFJLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3BELE9BQU87U0FDUjs7Y0FDSyxtQkFBbUIsR0FBRyxlQUFlLENBQUMsQ0FBQyxDQUFDO1FBQzlDLE9BQU8sbUJBQW1CLENBQUM7SUFDN0IsQ0FBQzs7Ozs7O0lBS00sTUFBTSxDQUFDLGlCQUFpQixDQUFDLGVBQWlDO1FBQy9ELElBQUksQ0FBQyxlQUFlLEVBQUU7WUFDcEIsZUFBZSxHQUFHLEVBQUUsQ0FBQztTQUN0Qjs7Y0FDSyxhQUFhLEdBQUcsZUFBZSxDQUFDLEdBQUc7Ozs7UUFBQyxDQUFDLGNBQThCLEVBQUUsRUFBRTtZQUMzRSxPQUFPLGNBQWMsQ0FBQyxZQUFZLENBQUM7UUFDckMsQ0FBQyxFQUFDO1FBRUYsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVXBsb2FkRmlsZUluZm8sIEF0dGFjaG1lbnRJbmZvIH0gZnJvbSAnLi90eXBlcyc7XHJcblxyXG4vKipcclxuICog6ZmE5Lu25L+h5oGv5aSE55CG5bel5YW357G7XHJcbiAqL1xyXG5jbGFzcyBBdHRhY2htZW50VXRpbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4uumZhOS7tuS/oeaBr+aVsOe7hFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvQXR0YWNobWVudEluZm9zKGZpbGVJbmZvczogVXBsb2FkRmlsZUluZm9bXSk6IEF0dGFjaG1lbnRJbmZvW10ge1xyXG4gICAgaWYgKCFmaWxlSW5mb3MpIHtcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgY29uc3QgYXR0YWNobWVudEluZm9zOiBBdHRhY2htZW50SW5mb1tdID0gZmlsZUluZm9zLm1hcCgoZmlsZUluZm86IFVwbG9hZEZpbGVJbmZvKSA9PiB7XHJcbiAgICAgIHJldHVybiB0aGlzLmNvbnZlcnRUb0F0dGFjaG1lbnRJbmZvKGZpbGVJbmZvKTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGF0dGFjaG1lbnRJbmZvcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOi9rOaNouS4uumZhOS7tuS/oeaBr1xyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvQXR0YWNobWVudEluZm8oZmlsZUluZm86IFVwbG9hZEZpbGVJbmZvKTogQXR0YWNobWVudEluZm8ge1xyXG4gICAgY29uc3QgYXR0YWNobWVudEluZm86IEF0dGFjaG1lbnRJbmZvID0ge1xyXG4gICAgICBhdHRhY2htZW50SWQ6IGZpbGVJbmZvLm1ldGFkYXRhSWQsXHJcbiAgICAgIGZpbGVOYW1lOiBmaWxlSW5mby5maWxlTmFtZVxyXG4gICAgfTtcclxuICAgIHJldHVybiBhdHRhY2htZW50SW5mbztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiOt+WPlumZhOS7tuWIl+ihqOS4reeahOesrOS4gOS4qumZhOS7tlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdGF0aWMgZ2V0Rmlyc3RBdHRhY2htZW50SW5mbyhhdHRhY2htZW50SW5mb3M6IEF0dGFjaG1lbnRJbmZvW10pIHtcclxuICAgIGlmICghYXR0YWNobWVudEluZm9zIHx8IGF0dGFjaG1lbnRJbmZvcy5sZW5ndGggPT09IDApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZmlyc3RBdHRhY2htZW50SW5mbyA9IGF0dGFjaG1lbnRJbmZvc1swXTtcclxuICAgIHJldHVybiBmaXJzdEF0dGFjaG1lbnRJbmZvO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5o+Q5Y+W6ZmE5Lu2aWTmlbDnu4RcclxuICAgKi9cclxuICBwdWJsaWMgc3RhdGljIHBlZWtBdHRhY2htZW50SWRzKGF0dGFjaG1lbnRJbmZvczogQXR0YWNobWVudEluZm9bXSkge1xyXG4gICAgaWYgKCFhdHRhY2htZW50SW5mb3MpIHtcclxuICAgICAgYXR0YWNobWVudEluZm9zID0gW107XHJcbiAgICB9XHJcbiAgICBjb25zdCBhdHRhY2htZW50SWRzID0gYXR0YWNobWVudEluZm9zLm1hcCgoYXR0YWNobWVudEluZm86IEF0dGFjaG1lbnRJbmZvKSA9PiB7XHJcbiAgICAgIHJldHVybiBhdHRhY2htZW50SW5mby5hdHRhY2htZW50SWQ7XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4gYXR0YWNobWVudElkcztcclxuICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBBdHRhY2htZW50VXRpbCB9O1xyXG4iXX0=