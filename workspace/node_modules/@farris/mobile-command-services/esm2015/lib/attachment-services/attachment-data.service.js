/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { HttpMethods, BindingPathConverter, DataChangeType } from '@farris/mobile-devkit';
import { BefDataPathUtil } from '@farris/mobile-bef';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件数据服务
 */
class AttachmentDataService {
    /**
     * 实体仓库
     * @private
     * @return {?}
     */
    get befRepository() {
        return (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 绑定数据
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 更新附件信息
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    updateRow(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const updateUrl = `${apiProxy.baseUrl}/service/updateattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        /** @type {?} */
        const body = {
            updateAttachInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return this.syncAttachmentInfosToClient();
        })), tap((/**
         * @return {?}
         */
        () => {
            console.log('loading hide ...');
        })));
    }
    /**
     * 批量创建附件行数据
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfos
     * @return {?}
     */
    updateRows(attachmentInfoFieldPath, attachmentInfos) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const updateUrl = `${apiProxy.baseUrl}/service/batchuploadattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        /** @type {?} */
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        /** @type {?} */
        const body = {
            batchUploadInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return this.appendAttachmentInfosToClient(result, isRootEntity);
        })), tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
    }
    /**
     * 创建服务器端需要的更新信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentId = attachmentInfo.attachmentId;
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    }
    /**
     * 创建服务器端需要的批量新增附件信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    }
    /**
     * 同步服务器端最新信息到客户端
     * \@todo:
     * 1、主对象批量新增时不支持
     * @return {?}
     */
    syncAttachmentInfosToClient() {
        /** @type {?} */
        const rootDataId = this.bindingData.list.currentId;
        return this.befRepository.updateEntityById(rootDataId);
    }
    /**
     * 追击主表数据到客户端
     * @param {?} listData
     * @param {?} isRootEntity
     * @return {?}
     */
    appendAttachmentInfosToClient(listData, isRootEntity) {
        if (isRootEntity === true) {
            /** @type {?} */
            const entities = this.befRepository.buildEntities(listData);
            this.befRepository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            return this.syncAttachmentInfosToClient().pipe(map((/**
             * @return {?}
             */
            () => {
                this.befRepository.dataChangeHistory.addChange({ dataId: listData[0].id, changeType: DataChangeType.Add });
                return listData;
            })));
        }
    }
}
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    AttachmentDataService.prototype.viewModelContext;
}
export { AttachmentDataService };
//# sourceMappingURL=data:application/json;base64,