/**
 * @fileoverview added by tsickle
 * Generated from: lib/validator-services/validator.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMPTY, of, zip } from 'rxjs';
import { switchMap } from 'rxjs/operators';
/**
 * 数据服务基类
 */
class ValidatorServices {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 获取某个视图模型上得所有验证结果
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    validateFields(viewModelId) {
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
        }
        else {
            return this.viewModelContext.form.validateFields();
        }
    }
    /**
     * 处理某个视图模型上得所有验证结果
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    handleValidateFields(viewModelId) {
        /** @type {?} */
        let validateFieldsResults = [];
        if (viewModelId) {
            validateFieldsResults = this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
        }
        else {
            this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
             * @param {?} context
             * @return {?}
             */
            (context) => {
                validateFieldsResults = validateFieldsResults.concat(context.form.validateFields());
            }));
        }
        if (validateFieldsResults.length === 0) {
            return of(true);
        }
        return zip(...validateFieldsResults).pipe(switchMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            /** @type {?} */
            const index = value.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item['passing'] === false));
            if (index > -1) {
                return EMPTY;
            }
            else {
                return of(true);
            }
        })));
    }
    /**
     * 获取某个字段的验证结果
     * @param {?} name 字段名称
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    getFieldError(name, viewModelId) {
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.getFieldError(name);
        }
        else {
            return this.viewModelContext.form.getFieldError(name);
        }
    }
    /**
     * 重置一组校验状态 不传参数清除所有
     * @param {?=} fields name的数组
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    resetFieldsValidate(fields, viewModelId) {
        if (fields && typeof fields === 'string') {
            fields = JSON.parse(fields);
        }
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.resetFieldsValidate(fields);
        }
        else {
            this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
             * @param {?} context
             * @return {?}
             */
            (context) => {
                context.form.resetFieldsValidate(fields);
            }));
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidatorServices.prototype.viewModelContext;
}
export { ValidatorServices };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvci1zZXJ2aWNlcy92YWxpZGF0b3Iuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxLQUFLLEVBQWMsRUFBRSxFQUFFLEdBQUcsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7Ozs7QUFLM0MsTUFBTSxpQkFBaUI7Ozs7SUFFbkIsWUFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7SUFBSSxDQUFDOzs7Ozs7SUFNM0QsY0FBYyxDQUFDLFdBQW9CO1FBQy9CLElBQUksV0FBVyxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDckg7YUFBTTtZQUNILE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQztTQUN0RDtJQUNMLENBQUM7Ozs7OztJQU1ELG9CQUFvQixDQUFDLFdBQW9COztZQUNqQyxxQkFBcUIsR0FBRyxFQUFFO1FBQzlCLElBQUksV0FBVyxFQUFFO1lBQ2IscUJBQXFCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3RJO2FBQU07WUFDSCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPOzs7O1lBQUMsQ0FBQyxPQUF5QixFQUFFLEVBQUU7Z0JBQ3BKLHFCQUFxQixHQUFHLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUE7WUFDdkYsQ0FBQyxFQUFDLENBQUM7U0FDTjtRQUNELElBQUcscUJBQXFCLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBQztZQUNsQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNuQjtRQUNELE9BQU8sR0FBRyxDQUFDLEdBQUcscUJBQXFCLENBQUMsQ0FBQyxJQUFJLENBQ3JDLFNBQVM7Ozs7UUFBQyxDQUFDLEtBQUssRUFBQyxFQUFFOztrQkFDVCxLQUFLLEdBQUcsS0FBSyxDQUFDLFNBQVM7Ozs7WUFBQyxJQUFJLENBQUEsRUFBRSxDQUFBLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLEVBQUM7WUFDOUQsSUFBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUM7Z0JBQ1YsT0FBTyxLQUFLLENBQUE7YUFDZjtpQkFBSTtnQkFDRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUNuQjtRQUNMLENBQUMsRUFBQyxDQUNMLENBQUE7SUFDTCxDQUFDOzs7Ozs7O0lBT0QsYUFBYSxDQUFDLElBQVksRUFBRSxXQUFvQjtRQUM1QyxJQUFJLFdBQVcsRUFBRTtZQUNiLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN4SDthQUFNO1lBQ0gsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN6RDtJQUNMLENBQUM7Ozs7Ozs7SUFPRCxtQkFBbUIsQ0FBQyxNQUFpQixFQUFFLFdBQW9CO1FBQ3ZELElBQUksTUFBTSxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtZQUN0QyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUMvQjtRQUNELElBQUksV0FBVyxFQUFFO1lBQ2IsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7U0FDaEk7YUFBTTtZQUNILElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQyxDQUFDLE9BQU87Ozs7WUFBQyxDQUFDLE9BQXlCLEVBQUUsRUFBRTtnQkFDcEosT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUM3QyxDQUFDLEVBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztDQUVKOzs7Ozs7SUF6RWUsNkNBQTBDOztBQTJFMUQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgRU1QVFksIE9ic2VydmFibGUsIG9mLCB6aXAgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5cclxuLyoqXHJcbiAqIOaVsOaNruacjeWKoeWfuuexu1xyXG4gKi9cclxuY2xhc3MgVmFsaWRhdG9yU2VydmljZXMge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmn5DkuKrop4blm77mqKHlnovkuIrlvpfmiYDmnInpqozor4Hnu5PmnpxcclxuICAgICAqIEBwYXJhbSB2aWV3TW9kZWxJZCDop4blm77mqKHlnotpZFxyXG4gICAgICovXHJcbiAgICB2YWxpZGF0ZUZpZWxkcyh2aWV3TW9kZWxJZD86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh2aWV3TW9kZWxJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQudmlld01vZGVsQ29udGV4dE1hbmFnZXIuZ2V0Q29udGV4dEJ5SWQodmlld01vZGVsSWQpLmZvcm0udmFsaWRhdGVGaWVsZHMoKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3TW9kZWxDb250ZXh0LmZvcm0udmFsaWRhdGVGaWVsZHMoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlpITnkIbmn5DkuKrop4blm77mqKHlnovkuIrlvpfmiYDmnInpqozor4Hnu5PmnpxcclxuICAgICAqIEBwYXJhbSB2aWV3TW9kZWxJZCDop4blm77mqKHlnotpZFxyXG4gICAgICovXHJcbiAgICBoYW5kbGVWYWxpZGF0ZUZpZWxkcyh2aWV3TW9kZWxJZD86IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgbGV0IHZhbGlkYXRlRmllbGRzUmVzdWx0cyA9IFtdO1xyXG4gICAgICAgIGlmICh2aWV3TW9kZWxJZCkge1xyXG4gICAgICAgICAgICB2YWxpZGF0ZUZpZWxkc1Jlc3VsdHMgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuYXBwQ29udGV4dC52aWV3TW9kZWxDb250ZXh0TWFuYWdlci5nZXRDb250ZXh0QnlJZCh2aWV3TW9kZWxJZCkuZm9ybS52YWxpZGF0ZUZpZWxkcygpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudmlld01vZGVsQ29udGV4dC5hcHBDb250ZXh0LnZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLmdldFJvb3RDb250ZXh0QW5kUG9zdGVyaXR5QnlJZCh0aGlzLnZpZXdNb2RlbENvbnRleHQuaWQpLmZvckVhY2goKGNvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRlRmllbGRzUmVzdWx0cyA9IHZhbGlkYXRlRmllbGRzUmVzdWx0cy5jb25jYXQoY29udGV4dC5mb3JtLnZhbGlkYXRlRmllbGRzKCkpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih2YWxpZGF0ZUZpZWxkc1Jlc3VsdHMubGVuZ3RoID09PSAwKXtcclxuICAgICAgICAgICAgcmV0dXJuIG9mKHRydWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gemlwKC4uLnZhbGlkYXRlRmllbGRzUmVzdWx0cykucGlwZShcclxuICAgICAgICAgICAgc3dpdGNoTWFwKCh2YWx1ZSk9PntcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gdmFsdWUuZmluZEluZGV4KGl0ZW09Pml0ZW1bJ3Bhc3NpbmcnXSA9PT0gZmFsc2UpXHJcbiAgICAgICAgICAgICAgICBpZihpbmRleCA+IC0xKXtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRU1QVFlcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvZih0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDojrflj5bmn5DkuKrlrZfmrrXnmoTpqozor4Hnu5PmnpxcclxuICAgICAqIEBwYXJhbSBuYW1lIOWtl+auteWQjeensFxyXG4gICAgICogQHBhcmFtIHZpZXdNb2RlbElkIOinhuWbvuaooeWei2lkXHJcbiAgICAgKi9cclxuICAgIGdldEZpZWxkRXJyb3IobmFtZTogc3RyaW5nLCB2aWV3TW9kZWxJZD86IHN0cmluZykge1xyXG4gICAgICAgIGlmICh2aWV3TW9kZWxJZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQudmlld01vZGVsQ29udGV4dE1hbmFnZXIuZ2V0Q29udGV4dEJ5SWQodmlld01vZGVsSWQpLmZvcm0uZ2V0RmllbGRFcnJvcihuYW1lKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy52aWV3TW9kZWxDb250ZXh0LmZvcm0uZ2V0RmllbGRFcnJvcihuYW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDph43nva7kuIDnu4TmoKHpqoznirbmgIEg5LiN5Lyg5Y+C5pWw5riF6Zmk5omA5pyJXHJcbiAgICAgKiBAcGFyYW0gZmllbGRzIG5hbWXnmoTmlbDnu4RcclxuICAgICAqIEBwYXJhbSB2aWV3TW9kZWxJZCDop4blm77mqKHlnotpZFxyXG4gICAgICovXHJcbiAgICByZXNldEZpZWxkc1ZhbGlkYXRlKGZpZWxkcz86IHN0cmluZ1tdLCB2aWV3TW9kZWxJZD86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChmaWVsZHMgJiYgdHlwZW9mIGZpZWxkcyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgZmllbGRzID0gSlNPTi5wYXJzZShmaWVsZHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodmlld01vZGVsSWQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlld01vZGVsQ29udGV4dC5hcHBDb250ZXh0LnZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLmdldENvbnRleHRCeUlkKHZpZXdNb2RlbElkKS5mb3JtLnJlc2V0RmllbGRzVmFsaWRhdGUoZmllbGRzKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQuYXBwQ29udGV4dC52aWV3TW9kZWxDb250ZXh0TWFuYWdlci5nZXRSb290Q29udGV4dEFuZFBvc3Rlcml0eUJ5SWQodGhpcy52aWV3TW9kZWxDb250ZXh0LmlkKS5mb3JFYWNoKChjb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LmZvcm0ucmVzZXRGaWVsZHNWYWxpZGF0ZShmaWVsZHMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG59XHJcblxyXG5leHBvcnQgeyBWYWxpZGF0b3JTZXJ2aWNlcyB9O1xyXG4iXX0=