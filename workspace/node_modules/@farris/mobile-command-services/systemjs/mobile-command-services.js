System.register(['@farris/mobile-ui', 'rxjs', '@farris/mobile-business-ui', '@farris/mobile-devkit', 'rxjs/operators', '@farris/mobile-bef'], function (exports) {
    'use strict';
    var Loading, Toast, Notify, Dialog, from, EMPTY, of, zip, Subject, forkJoin, AttachmentPreview, SubmitApprove, BindingList, HttpMethods, HttpClient, BindingPathConverter, DataChangeType, HttpUtil$1, ViewModelContext, tap, switchMap, map, filter, take, BefRepositoryUtil, BefDataPathUtil, BE_ERROR_HANDLER__TOKEN, ChangeDetailType;
    return {
        setters: [function (module) {
            Loading = module.Loading;
            Toast = module.Toast;
            Notify = module.Notify;
            Dialog = module.Dialog;
        }, function (module) {
            from = module.from;
            EMPTY = module.EMPTY;
            of = module.of;
            zip = module.zip;
            Subject = module.Subject;
            forkJoin = module.forkJoin;
        }, function (module) {
            AttachmentPreview = module.AttachmentPreview;
            SubmitApprove = module.SubmitApprove;
        }, function (module) {
            BindingList = module.BindingList;
            HttpMethods = module.HttpMethods;
            HttpClient = module.HttpClient;
            BindingPathConverter = module.BindingPathConverter;
            DataChangeType = module.DataChangeType;
            HttpUtil$1 = module.HttpUtil;
            ViewModelContext = module.ViewModelContext;
        }, function (module) {
            tap = module.tap;
            switchMap = module.switchMap;
            map = module.map;
            filter = module.filter;
            take = module.take;
        }, function (module) {
            BefRepositoryUtil = module.BefRepositoryUtil;
            BefDataPathUtil = module.BefDataPathUtil;
            BE_ERROR_HANDLER__TOKEN = module.BE_ERROR_HANDLER__TOKEN;
            ChangeDetailType = module.ChangeDetailType;
        }],
        execute: function () {

            /*! *****************************************************************************
            Copyright (c) Microsoft Corporation.

            Permission to use, copy, modify, and/or distribute this software for any
            purpose with or without fee is hereby granted.

            THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
            REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
            AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
            INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
            LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
            OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
            PERFORMANCE OF THIS SOFTWARE.
            ***************************************************************************** */
            /* global Reflect, Promise */

            var extendStatics = function(d, b) {
                extendStatics = Object.setPrototypeOf ||
                    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
                    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
                return extendStatics(d, b);
            };

            function __extends(d, b) {
                extendStatics(d, b);
                function __() { this.constructor = d; }
                d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
            }

            var __assign = function() {
                __assign = Object.assign || function __assign(t) {
                    for (var s, i = 1, n = arguments.length; i < n; i++) {
                        s = arguments[i];
                        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
                    }
                    return t;
                };
                return __assign.apply(this, arguments);
            };

            function __read(o, n) {
                var m = typeof Symbol === "function" && o[Symbol.iterator];
                if (!m) return o;
                var i = m.call(o), r, ar = [], e;
                try {
                    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
                }
                catch (error) { e = { error: error }; }
                finally {
                    try {
                        if (r && !r.done && (m = i["return"])) m.call(i);
                    }
                    finally { if (e) throw e.error; }
                }
                return ar;
            }

            function __spread() {
                for (var ar = [], i = 0; i < arguments.length; i++)
                    ar = ar.concat(__read(arguments[i]));
                return ar;
            }

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/types/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/base.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据服务基类
             */
            var /**
             * 数据服务基类
             */
            BaseService = exports('BaseService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function BaseService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * 获取服务实例
                 */
                /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                BaseService.prototype.getService = /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var injector = this.viewModelContext.injector;
                    return injector.get(token);
                };
                return BaseService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/loading.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LoadingService = exports('LoadingService', /** @class */ (function () {
                function LoadingService() {
                    this.registerService();
                }
                /**
                 * 显示Loading
                 */
                /**
                 * 显示Loading
                 * @param {?=} message
                 * @param {?=} options
                 * @return {?}
                 */
                LoadingService.prototype.show = /**
                 * 显示Loading
                 * @param {?=} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Loading))).show(message, options);
                };
                /**
                 * 隐藏Loading
                 */
                /**
                 * 隐藏Loading
                 * @return {?}
                 */
                LoadingService.prototype.hide = /**
                 * 隐藏Loading
                 * @return {?}
                 */
                function () {
                    ((/** @type {?} */ (Loading))).hide();
                };
                /**
                 * 注册所有的LoadingService实例
                 */
                /**
                 * 注册所有的LoadingService实例
                 * @private
                 * @return {?}
                 */
                LoadingService.prototype.registerService = /**
                 * 注册所有的LoadingService实例
                 * @private
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var services = window['DEVKIT_LOADING_SERVICE'] || [];
                    services.push(this);
                    window['DEVKIT_LOADING_SERVICE'] = services;
                };
                return LoadingService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/toast.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 轻提示服务
             */
            var /**
             * 轻提示服务
             */
            ToastService = exports('ToastService', /** @class */ (function () {
                function ToastService() {
                }
                /**
                 * 消息提示
                 */
                /**
                 * 消息提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                ToastService.prototype.info = /**
                 * 消息提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Toast))).info(message, options);
                };
                /**
                 * 成功提示
                 */
                /**
                 * 成功提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                ToastService.prototype.success = /**
                 * 成功提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Toast))).success(message, options);
                };
                /**
                 * 警告提示
                 */
                /**
                 * 警告提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                ToastService.prototype.warning = /**
                 * 警告提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Toast))).warning(message, options);
                };
                /**
                 * 失败提示
                 */
                /**
                 * 失败提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                ToastService.prototype.error = /**
                 * 失败提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Toast))).error(message, options);
                };
                /**
                 * 自定义提示
                 */
                /**
                 * 自定义提示
                 * @param {?=} options
                 * @return {?}
                 */
                ToastService.prototype.show = /**
                 * 自定义提示
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    ((/** @type {?} */ (Toast)))(options);
                };
                return ToastService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/notify.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 消息提示服务
             * \@summary
             * 页面边缘滑出，自动消失，语气略强于Toast
             */
            var /**
             * 消息提示服务
             * \@summary
             * 页面边缘滑出，自动消失，语气略强于Toast
             */
            NotifyService = function (v) { return exports({ NotifyService: v, ɵd: v }), v; }(/** @class */ (function () {
                function NotifyService() {
                }
                /**
                 * 消息提示
                 */
                /**
                 * 消息提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                NotifyService.prototype.info = /**
                 * 消息提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Notify))).info(message, __assign({ duration: 1500 }, options));
                };
                /**
                 * 成功提示
                 */
                /**
                 * 成功提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                NotifyService.prototype.success = /**
                 * 成功提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Notify))).success(message, __assign({ duration: 1000 }, options));
                };
                /**
                 * 警告提示
                 */
                /**
                 * 警告提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                NotifyService.prototype.warning = /**
                 * 警告提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Notify))).warning(message, __assign({ duration: 1500 }, options));
                };
                /**
                 * 失败提示
                 */
                /**
                 * 失败提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                NotifyService.prototype.error = /**
                 * 失败提示
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    ((/** @type {?} */ (Notify))).error(message, __assign({ duration: 1500 }, options));
                };
                /**
                 * 自定义提醒
                 */
                /**
                 * 自定义提醒
                 * @param {?} options
                 * @return {?}
                 */
                NotifyService.prototype.show = /**
                 * 自定义提醒
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    ((/** @type {?} */ (Notify))).show(options);
                };
                return NotifyService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/dialog.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var DialogService = exports('DialogService', /** @class */ (function () {
                function DialogService() {
                }
                /**
                 * 提示对话框
                 * @summary
                 * type=info|success|warning|error
                 */
                /**
                 * 提示对话框
                 * \@summary
                 * type=info|success|warning|error
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                DialogService.prototype.alert = /**
                 * 提示对话框
                 * \@summary
                 * type=info|success|warning|error
                 * @param {?} message
                 * @param {?=} options
                 * @return {?}
                 */
                function (message, options) {
                    /** @type {?} */
                    var promise$ = new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        Dialog.alert(__assign({ title: '提醒', message: message, cancelText: '取消', confirmText: '确定', onConfirm: (/**
                             * @return {?}
                             */
                            function () { resolve(true); }), onCancel: (/**
                             * @return {?}
                             */
                            function () { resolve(false); }) }, options));
                    }));
                    return from(promise$);
                };
                /**
                 * 确认框对话框
                 */
                /**
                 * 确认框对话框
                 * @param {?} message
                 * @return {?}
                 */
                DialogService.prototype.confirm = /**
                 * 确认框对话框
                 * @param {?} message
                 * @return {?}
                 */
                function (message) {
                    /** @type {?} */
                    var confirmResult$ = this.confirmPromise(message);
                    return from(confirmResult$);
                };
                /**
                 * 自定义弹窗
                 */
                /**
                 * 自定义弹窗
                 * @param {?} options
                 * @return {?}
                 */
                DialogService.prototype.show = /**
                 * 自定义弹窗
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    this.confirmPromise(options);
                };
                /**
                 * 输入对话框
                 * @param title 标题
                 * @param options 配置信息
                 */
                /**
                 * 输入对话框
                 * @param {?} title 标题
                 * @param {?=} options 配置信息
                 * @return {?}
                 */
                DialogService.prototype.prompt = /**
                 * 输入对话框
                 * @param {?} title 标题
                 * @param {?=} options 配置信息
                 * @return {?}
                 */
                function (title, options) {
                    /** @type {?} */
                    var promise$ = new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        /** @type {?} */
                        var vm = Dialog.prompt(__assign({ title: title, confirmText: '确定', onConfirm: (/**
                             * @return {?}
                             */
                            function () {
                                resolve(vm.$data.promptText);
                            }), onCancel: (/**
                             * @return {?}
                             */
                            function () { resolve('取消'); }), onShow: (/**
                             * @return {?}
                             */
                            function () {
                                console.log('显示弹窗');
                            }) }, options));
                    }));
                    return from(promise$);
                };
                /**
                 * 使用Promise实例包装回调方法，以同步回调方法执行后结果
                 */
                /**
                 * 使用Promise实例包装回调方法，以同步回调方法执行后结果
                 * @private
                 * @param {?=} message
                 * @return {?}
                 */
                DialogService.prototype.confirmPromise = /**
                 * 使用Promise实例包装回调方法，以同步回调方法执行后结果
                 * @private
                 * @param {?=} message
                 * @return {?}
                 */
                function (message) {
                    return new Promise((/**
                     * @param {?} resolve
                     * @param {?} reject
                     * @return {?}
                     */
                    function (resolve, reject) {
                        Dialog.confirm({
                            message: message,
                            onConfirm: (/**
                             * @return {?}
                             */
                            function () { resolve(true); }),
                            onCancel: (/**
                             * @return {?}
                             */
                            function () { resolve(false); }),
                        });
                    }));
                };
                return DialogService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/attachment-preview.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var AttachmentPreviewService = exports('AttachmentPreviewService', /** @class */ (function () {
                function AttachmentPreviewService() {
                }
                /**
                 * 自定义弹窗
                 */
                /**
                 * 自定义弹窗
                 * @param {?} options
                 * @return {?}
                 */
                AttachmentPreviewService.prototype.show = /**
                 * 自定义弹窗
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    AttachmentPreview.show(options);
                };
                return AttachmentPreviewService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/entity-services/entity-traversing.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 实体遍历服务
             */
            var /**
             * 实体遍历服务
             */
            EntityTraversingService = exports('EntityTraversingService', /** @class */ (function () {
                function EntityTraversingService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                Object.defineProperty(EntityTraversingService.prototype, "bindingData", {
                    get: /**
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 获取值
                 */
                /**
                 * 获取值
                 * @param {?} path
                 * @return {?}
                 */
                EntityTraversingService.prototype.getPropValue = /**
                 * 获取值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.bindingData.getValue(path);
                };
                /**
                 * 获取实体数据
                 */
                /**
                 * 获取实体数据
                 * @param {?} path
                 * @return {?}
                 */
                EntityTraversingService.prototype.getEntityData = /**
                 * 获取实体数据
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var bindingObj;
                    /** @type {?} */
                    var bindingListOrObject = this.bindingData.getValue(path);
                    if (bindingListOrObject instanceof BindingList === true) {
                        bindingObj = bindingListOrObject.currentItem;
                    }
                    else {
                        bindingObj = bindingListOrObject;
                    }
                    return bindingObj.toJSON();
                };
                /**
                 * 获取实体列表数据
                 */
                /**
                 * 获取实体列表数据
                 * @param {?} path
                 * @return {?}
                 */
                EntityTraversingService.prototype.getEntityListData = /**
                 * 获取实体列表数据
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var bindingList = (/** @type {?} */ (this.bindingData.getValue(path)));
                    return bindingList.toJSON();
                };
                return EntityTraversingService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/entity-services/entity-manipulation.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var EntityManipulationService = exports('EntityManipulationService', /** @class */ (function () {
                function EntityManipulationService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                Object.defineProperty(EntityManipulationService.prototype, "bindingData", {
                    get: /**
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 设置path对应的字段值
                 */
                /**
                 * 设置path对应的字段值
                 * @param {?} path
                 * @param {?} value
                 * @return {?}
                 */
                EntityManipulationService.prototype.setPropValue = /**
                 * 设置path对应的字段值
                 * @param {?} path
                 * @param {?} value
                 * @return {?}
                 */
                function (path, value) {
                    // 实体层还没有封装，临时用BindingData相关方法代替
                    this.bindingData.setValue(path, value, true, true);
                };
                return EntityManipulationService;
            }()));
            /**
             * 实体聚合服务
             */
            var /**
             * 实体聚合服务
             */
            EntityAggregationService = exports('EntityAggregationService', /** @class */ (function () {
                function EntityAggregationService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.traversingService = this.viewModelContext.injector.get(EntityTraversingService);
                }
                Object.defineProperty(EntityAggregationService.prototype, "bindingData", {
                    get: /**
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 获取path对应列表记录的条数
                 */
                /**
                 * 获取path对应列表记录的条数
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.count = /**
                 * 获取path对应列表记录的条数
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var splitedPath = this.splitPath(path);
                    /** @type {?} */
                    var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
                    return entityListData.length;
                };
                /**
                 * 获取path对应字段的和
                 */
                /**
                 * 获取path对应字段的和
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.sum = /**
                 * 获取path对应字段的和
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    var _this = this;
                    /** @type {?} */
                    var splitedPath = this.splitPath(path);
                    /** @type {?} */
                    var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
                    /** @type {?} */
                    var total = entityListData.reduce((/**
                     * @param {?} accTotal
                     * @param {?} entityData
                     * @return {?}
                     */
                    function (accTotal, entityData) {
                        /** @type {?} */
                        var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                        propValue = isNaN(propValue) ? 0 : propValue;
                        accTotal += propValue;
                        return accTotal;
                    }), 0);
                    return total;
                };
                /**
                 * 获取path对应字段的平均值
                 */
                /**
                 * 获取path对应字段的平均值
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.avg = /**
                 * 获取path对应字段的平均值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var count = this.count(path);
                    /** @type {?} */
                    var total = this.sum(path);
                    return count !== 0 ? total / count : 0;
                };
                /**
                 * 获取path对应字段的最大值
                 */
                /**
                 * 获取path对应字段的最大值
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.max = /**
                 * 获取path对应字段的最大值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    var _this = this;
                    /** @type {?} */
                    var splitedPath = this.splitPath(path);
                    /** @type {?} */
                    var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
                    /** @type {?} */
                    var max = entityListData.reduce((/**
                     * @param {?} accMax
                     * @param {?} entityData
                     * @return {?}
                     */
                    function (accMax, entityData) {
                        /** @type {?} */
                        var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                        if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                            accMax = propValue;
                        }
                        return accMax;
                    }), null);
                    return max ? max : 0;
                };
                /**
                 * 获取path对应字段的最小值
                 */
                /**
                 * 获取path对应字段的最小值
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.min = /**
                 * 获取path对应字段的最小值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    var _this = this;
                    /** @type {?} */
                    var splitedPath = this.splitPath(path);
                    /** @type {?} */
                    var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
                    /** @type {?} */
                    var min = entityListData.reduce((/**
                     * @param {?} accMin
                     * @param {?} entityData
                     * @return {?}
                     */
                    function (accMin, entityData) {
                        /** @type {?} */
                        var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
                        if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                            accMin = propValue;
                        }
                        return accMin;
                    }), null);
                    return min ? min : 0;
                };
                /**
                 * 获取属性值
                 */
                /**
                 * 获取属性值
                 * @private
                 * @param {?} entityData
                 * @param {?} path
                 * @return {?}
                 */
                EntityAggregationService.prototype.getPropValue = /**
                 * 获取属性值
                 * @private
                 * @param {?} entityData
                 * @param {?} path
                 * @return {?}
                 */
                function (entityData, path) {
                    /** @type {?} */
                    var currentData = entityData;
                    path.forEach((/**
                     * @param {?} pathItem
                     * @return {?}
                     */
                    function (pathItem) {
                        // 提前退出的都重置为null，主要针对关联对象未赋值场景
                        if (!currentData) {
                            currentData = null;
                            return;
                        }
                        currentData = currentData[pathItem];
                    }));
                    return currentData;
                };
                /**
                 * 分隔路径，分隔符列表路径和属性路径
                 * @return 形如 {parentListPath: [], propertyPath: []}
                 */
                /**
                 * 分隔路径，分隔符列表路径和属性路径
                 * @private
                 * @param {?} path
                 * @return {?} 形如 {parentListPath: [], propertyPath: []}
                 */
                EntityAggregationService.prototype.splitPath = /**
                 * 分隔路径，分隔符列表路径和属性路径
                 * @private
                 * @param {?} path
                 * @return {?} 形如 {parentListPath: [], propertyPath: []}
                 */
                function (path) {
                    /** @type {?} */
                    var listPath = path.concat([]);
                    /** @type {?} */
                    var propPath = [];
                    /** @type {?} */
                    var currentNode = this.bindingData.getValue(listPath);
                    while (currentNode instanceof BindingList !== true) {
                        /** @type {?} */
                        var propPathItem = listPath.pop();
                        if (!propPathItem) {
                            return;
                        }
                        propPath.unshift(propPathItem);
                        currentNode = this.bindingData.getValue(listPath);
                    }
                    return {
                        listPath: listPath,
                        propPath: propPath
                    };
                };
                return EntityAggregationService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/entity-services/entity-list.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * EntityList服务
             * \@scope FrameComponent
             */
            var /**
             * EntityList服务
             * \@scope FrameComponent
             */
            EntityListService = exports('EntityListService', /** @class */ (function () {
                function EntityListService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                return EntityListService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/entity-services/entity.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 实体服务
             * \@scope FrameComponent
             */
            var /**
             * 实体服务
             * \@scope FrameComponent
             */
            EntityService = exports('EntityService', /** @class */ (function () {
                function EntityService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.traversingService = new EntityTraversingService(viewModelContext);
                    this.manipulationService = new EntityManipulationService(viewModelContext);
                    this.aggregationService = new EntityAggregationService(viewModelContext);
                }
                /**
                 * 获取path对应的属性值
                 */
                /**
                 * 获取path对应的属性值
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.getPropValue = /**
                 * 获取path对应的属性值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.traversingService.getPropValue(path);
                };
                /**
                 * 设置path对应的属性值
                 */
                /**
                 * 设置path对应的属性值
                 * @param {?} path
                 * @param {?} value
                 * @return {?}
                 */
                EntityService.prototype.setPropValue = /**
                 * 设置path对应的属性值
                 * @param {?} path
                 * @param {?} value
                 * @return {?}
                 */
                function (path, value) {
                    return this.manipulationService.setPropValue(path, value);
                };
                /**
                 * 设置path对应的Entity数据
                 */
                /**
                 * 设置path对应的Entity数据
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.getEntityData = /**
                 * 设置path对应的Entity数据
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.traversingService.getEntityData(path);
                };
                /**
                 * 设置path对应的EntityList数据
                 */
                /**
                 * 设置path对应的EntityList数据
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.getEntityListData = /**
                 * 设置path对应的EntityList数据
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.traversingService.getEntityListData(path);
                };
                /**
                 * 获取path对应EntityList记录数
                 */
                /**
                 * 获取path对应EntityList记录数
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.count = /**
                 * 获取path对应EntityList记录数
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.aggregationService.count(path);
                };
                /**
                 * 获取path对应属性的合计值
                 */
                /**
                 * 获取path对应属性的合计值
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.sum = /**
                 * 获取path对应属性的合计值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.aggregationService.sum(path);
                };
                /**
                 * 获取path对应属性的平均值
                 */
                /**
                 * 获取path对应属性的平均值
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.avg = /**
                 * 获取path对应属性的平均值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.aggregationService.avg(path);
                };
                /**
                 * 获取path对应属性的最大值
                 */
                /**
                 * 获取path对应属性的最大值
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.max = /**
                 * 获取path对应属性的最大值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.aggregationService.max(path);
                };
                /**
                 * 获取path对应属性的最小值
                 */
                /**
                 * 获取path对应属性的最小值
                 * @param {?} path
                 * @return {?}
                 */
                EntityService.prototype.min = /**
                 * 获取path对应属性的最小值
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    return this.aggregationService.min(path);
                };
                return EntityService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/entity-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/exception-services/http.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @enum {number} */
            var HttpStatusType = {
                Info: 1,
                Success: 2,
                Redirect: 3,
                ClientError: 4,
                ServerError: 5,
            };
            HttpStatusType[HttpStatusType.Info] = 'Info';
            HttpStatusType[HttpStatusType.Success] = 'Success';
            HttpStatusType[HttpStatusType.Redirect] = 'Redirect';
            HttpStatusType[HttpStatusType.ClientError] = 'ClientError';
            HttpStatusType[HttpStatusType.ServerError] = 'ServerError';
            /**
             * http通用类
             */
            var /**
             * http通用类
             */
            HttpUtil = /** @class */ (function () {
                function HttpUtil() {
                }
                /**
                 * 基于http状态码返回状态类型
                 * @param httpResponseSatus http请求返回状态码
                 * @returns null | HttpStatusType
                 */
                /**
                 * 基于http状态码返回状态类型
                 * @param {?} httpResponseSatus http请求返回状态码
                 * @return {?} null | HttpStatusType
                 */
                HttpUtil.getHttpStatusType = /**
                 * 基于http状态码返回状态类型
                 * @param {?} httpResponseSatus http请求返回状态码
                 * @return {?} null | HttpStatusType
                 */
                function (httpResponseSatus) {
                    if (!httpResponseSatus) {
                        return null;
                    }
                    /** @type {?} */
                    var statusType = null;
                    if (httpResponseSatus < 100 || httpResponseSatus > 600) {
                        statusType = null; // 不合理状态码
                    }
                    else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
                        statusType = HttpStatusType.Info;
                    }
                    else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
                        statusType = HttpStatusType.Success;
                    }
                    else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
                        statusType = HttpStatusType.Redirect;
                    }
                    else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
                        statusType = HttpStatusType.ClientError;
                    }
                    else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
                        statusType = HttpStatusType.ServerError;
                    }
                    return statusType;
                };
                return HttpUtil;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/exception-services/exception.servcie.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 实体操作服务
             */
            var /**
             * 实体操作服务
             */
            ExceptionService = exports('ExceptionService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function ExceptionService(notifyService, jsBridgeService) {
                    this.notifyService = notifyService;
                    this.jsBridgeService = jsBridgeService;
                }
                /**
                 * 显示异常信息
                 */
                /**
                 * 显示异常信息
                 * @param {?} error
                 * @return {?}
                 */
                ExceptionService.prototype.show = /**
                 * 显示异常信息
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    this.exception(error);
                };
                /**
               * 异常处理路由方法
               */
                /**
                 * 异常处理路由方法
                 * @private
                 * @param {?} error
                 * @return {?}
                 */
                ExceptionService.prototype.exception = /**
                 * 异常处理路由方法
                 * @private
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    var _this = this;
                    // 针对session失效做特殊处理
                    if (error.message && error.message.indexOf('401') !== -1) {
                        this.notifyService.error('登录信息已失效请重新打开');
                        setTimeout((/**
                         * @return {?}
                         */
                        function () { _this.jsBridgeService.closeWindow(); }), 2000);
                        return;
                    }
                    if (error && error.response) {
                        this.httpErrorHandler(error.response);
                    }
                };
                /**
               * http请求异常处理器
               */
                /**
                 * http请求异常处理器
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                ExceptionService.prototype.httpErrorHandler = /**
                 * http请求异常处理器
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                function (httpError) {
                    if (!httpError) {
                        return;
                    }
                    /** @type {?} */
                    var statusType = HttpUtil.getHttpStatusType(httpError.status);
                    switch (statusType) {
                        case HttpStatusType.ClientError:
                            this.httpErrorInClient(httpError);
                            break;
                        case HttpStatusType.ServerError:
                            this.httpErrorInServer(httpError);
                            break;
                        default:
                            throw new Error('Get invalid status code when using httpErrorHandler method.');
                    }
                };
                /**
               * 服务器端异常提示弹框
               */
                /**
                 * 服务器端异常提示弹框
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                ExceptionService.prototype.httpErrorInServer = /**
                 * 服务器端异常提示弹框
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                function (httpError) {
                    /** @type {?} */
                    var error = httpError.data;
                    if (typeof (error) === 'string') {
                        try {
                            error = JSON.parse(error);
                        }
                        catch (e) { }
                    }
                    if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
                        this.notifyService.error(httpError.message);
                        return;
                    }
                    /** @type {?} */
                    var getNotifyServiceMethodName = this.getNotifyServiceMethodName(error.Level);
                    this.notifyService["" + getNotifyServiceMethodName](error.Message);
                };
                /**
                 * 客户端异常提示弹框
                 */
                /**
                 * 客户端异常提示弹框
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                ExceptionService.prototype.httpErrorInClient = /**
                 * 客户端异常提示弹框
                 * @private
                 * @param {?} httpError
                 * @return {?}
                 */
                function (httpError) {
                    if (!httpError) {
                        return;
                    }
                    /** @type {?} */
                    var url = httpError.config && httpError.config.url && httpError.config.url;
                    /** @type {?} */
                    var status = httpError.status && httpError.status;
                    this.notifyService.error(url + " " + status);
                };
                /**
               * 获取异常处理策略
               * @param exceptionLevel 异常等级
               */
                /**
                 * 获取异常处理策略
                 * @param {?} exceptionLevel 异常等级
                 * @return {?}
                 */
                ExceptionService.prototype.getNotifyServiceMethodName = /**
                 * 获取异常处理策略
                 * @param {?} exceptionLevel 异常等级
                 * @return {?}
                 */
                function (exceptionLevel) {
                    /** @type {?} */
                    var exception;
                    switch (exceptionLevel) {
                        case 0 /* Info */:
                            exception = 'info';
                            break;
                        case 1 /* Warning */:
                            exception = 'warning';
                            break;
                        case 2 /* Error */:
                            exception = 'error';
                            break;
                        case 3 /* Fatal */:
                            exception = 'fatal';
                            break;
                        default:
                            // 默认异常等级是错误
                            exception = 'error';
                            break;
                    }
                    return exception;
                };
                return ExceptionService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/exception-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/base-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据服务基类
             */
            var /**
             * 数据服务基类
             */
            BaseDataService = exports('BaseDataService', /** @class */ (function () {
                function BaseDataService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.init();
                }
                /**
                 * @private
                 * @return {?}
                 */
                BaseDataService.prototype.init = /**
                 * @private
                 * @return {?}
                 */
                function () {
                    this.initServices();
                };
                /**
                 * @private
                 * @return {?}
                 */
                BaseDataService.prototype.initServices = /**
                 * @private
                 * @return {?}
                 */
                function () {
                    this.loadingService = this.getService(LoadingService);
                    this.toastService = this.getService(ToastService);
                    this.notifyService = this.getService(NotifyService);
                    this.dialogService = this.getService(DialogService);
                    this.exceptionService = this.getService(ExceptionService);
                    this.entityService = this.getService(EntityService);
                    this.befRepository = (/** @type {?} */ (this.viewModelContext.repository));
                };
                /**
                 * 获取服务实例
                 */
                /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                BaseDataService.prototype.getService = /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var injector = this.viewModelContext.injector;
                    return injector.get(token);
                };
                return BaseDataService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/data-util.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据工具类
             * \@summary
             * 数据相关的工具方法临时放在这里
             */
            var /**
             * 数据工具类
             * \@summary
             * 数据相关的工具方法临时放在这里
             */
            DataUtil = /** @class */ (function () {
                function DataUtil() {
                }
                /**
                 * 将BindingPath转换为EntityPath
                 */
                /**
                 * 将BindingPath转换为EntityPath
                 * @param {?} bindingPath
                 * @param {?} viewModelContext
                 * @return {?}
                 */
                DataUtil.convertBindingPathToEntityPath = /**
                 * 将BindingPath转换为EntityPath
                 * @param {?} bindingPath
                 * @param {?} viewModelContext
                 * @return {?}
                 */
                function (bindingPath, viewModelContext) {
                    /** @type {?} */
                    var rid = viewModelContext.bindingData.list.currentId;
                    // root表数据id
                    /** @type {?} */
                    var path = '/' + rid;
                    /** @type {?} */
                    var subPaths = bindingPath.split('/');
                    if (subPaths.length > 0) {
                        for (var index = 1; index < subPaths.length - 1; index++) {
                            /** @type {?} */
                            var subPath = subPaths[index];
                            /** @type {?} */
                            var subData = viewModelContext.bindingData[subPath];
                            if (!subData || !subData.currentId) {
                                throw Error("\u83B7\u53D6\u5B50\u8868\u5B8C\u6574\u8DEF\u5F84\u51FA\u9519\uFF0C\u627E\u4E0D\u5230" + subData + "\u5BF9\u5E94\u7684\u5B50\u8868\uFF0C\u6216\u5BF9\u5E94\u5B50\u8868\u6CA1\u6709\u5F53\u524D\u884C\u3002");
                            }
                            path += "/" + subPath + "/" + subData.currentId;
                        }
                    }
                    path += '/' + subPaths[subPaths.length - 1];
                    return path;
                };
                /**
                 * @param {?} viewModelContext
                 * @return {?}
                 */
                DataUtil.clearFromValidateType = /**
                 * @param {?} viewModelContext
                 * @return {?}
                 */
                function (viewModelContext) {
                    /** @type {?} */
                    var contexts = viewModelContext.appContext.viewModelContextManager.getContexts();
                    /** @type {?} */
                    var contextsChild = contexts.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return (item.parent && viewModelContext.id === item.parent.id); }));
                    if (contextsChild.length >= 1) {
                        contextsChild.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            item.form.resetFieldsValidate();
                        }));
                    }
                };
                /**
                 * @param {?} parame
                 * @return {?}
                 */
                DataUtil.stringTransformArray = /**
                 * @param {?} parame
                 * @return {?}
                 */
                function (parame) {
                    if (this.parameIsThreeBoss(parame)) {
                        return [];
                    }
                    else {
                        return JSON.parse(parame);
                    }
                };
                /**
                 * 检测参数是否属于三大幻神 ''  undefined  null
                 */
                /**
                 * 检测参数是否属于三大幻神 ''  undefined  null
                 * @param {?} parame
                 * @return {?}
                 */
                DataUtil.parameIsThreeBoss = /**
                 * 检测参数是否属于三大幻神 ''  undefined  null
                 * @param {?} parame
                 * @return {?}
                 */
                function (parame) {
                    if (parame === '' || parame === undefined || parame === null) {
                        return true;
                    }
                    else {
                        return false;
                    }
                };
                return DataUtil;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/load-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var LoadDataService = exports('LoadDataService', /** @class */ (function (_super) {
                __extends(LoadDataService, _super);
                function LoadDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 加载列表数据
                 */
                /**
                 * 加载列表数据
                 * @param {?} filters
                 * @param {?} sorts
                 * @param {?=} size
                 * @param {?=} index
                 * @return {?}
                 */
                LoadDataService.prototype.loadForList = /**
                 * 加载列表数据
                 * @param {?} filters
                 * @param {?} sorts
                 * @param {?=} size
                 * @param {?=} index
                 * @return {?}
                 */
                function (filters, sorts, size, index) {
                    var _this = this;
                    if (typeof filters === 'string') {
                        filters = DataUtil.stringTransformArray(filters);
                    }
                    if (typeof sorts === 'string') {
                        sorts = DataUtil.stringTransformArray(sorts);
                    }
                    var _a = this.viewModelContext.repository.paginationInfo || { pageSize: null, pageIndex: null }, pageSize = _a.pageSize, pageIndex = _a.pageIndex;
                    this.loadingService.show();
                    if (!size && !pageSize) {
                        pageSize = 20;
                    }
                    else if (size) {
                        pageSize = size;
                    }
                    if (!index && !pageIndex) {
                        pageIndex = 1;
                    }
                    else if (index) {
                        pageIndex = index;
                    }
                    if (pageIndex === 1) {
                        this.befRepository.entityCollection.clear();
                    }
                    /** @type {?} */
                    var query$ = this.befRepository.getEntities(filters, sorts, pageSize, pageIndex);
                    return query$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        var _a = _this.viewModelContext.repository.paginationInfo, pageIndex = _a.pageIndex, pageCount = _a.pageCount, totalCount = _a.totalCount;
                        if (pageIndex === pageCount || totalCount === 0) {
                            _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewFinished' });
                        }
                        else {
                            _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewUnFinished' });
                        }
                        _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'loadDataFinished' });
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                };
                /**
                 * 加载卡片数据
                 */
                /**
                 * 加载卡片数据
                 * @param {?} id
                 * @return {?}
                 */
                LoadDataService.prototype.loadForCard = /**
                 * 加载卡片数据
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    var _this = this;
                    DataUtil.clearFromValidateType(this.viewModelContext);
                    this.loadingService.show();
                    /** @type {?} */
                    var get$ = this.befRepository.getEntityById(id);
                    return get$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                };
                /**
               * 加载进入子表后，未作任何操作之前的数据
               * @param path 子表路径
               */
                /**
                 * 加载进入子表后，未作任何操作之前的数据
                 * @param {?} path 子表路径
                 * @return {?}
                 */
                LoadDataService.prototype.loadDataForChildCard = /**
                 * 加载进入子表后，未作任何操作之前的数据
                 * @param {?} path 子表路径
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var childID = this.viewModelContext.bindingData[path]['id'];
                    /** @type {?} */
                    var id = this.viewModelContext.bindingData[path]['parentID'];
                    /** @type {?} */
                    var entity = this.viewModelContext.repository.entityCollection.getEntityById(id);
                    /** @type {?} */
                    var childEntityAll = entity[path];
                    /** @type {?} */
                    var childEntityData = childEntityAll.get(childID).data;
                    this.viewModelContext.uiState.setPropertyValue('$childEntity', __assign({}, childEntityData));
                };
                return LoadDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/create-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 新增数据服务类
             */
            var /**
             * 新增数据服务类
             */
            CreateDataService = exports('CreateDataService', /** @class */ (function (_super) {
                __extends(CreateDataService, _super);
                function CreateDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 新增数据
                 */
                /**
                 * 新增数据
                 * @return {?}
                 */
                CreateDataService.prototype.create = /**
                 * 新增数据
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    this.befRepository.entityCollection.clear();
                    DataUtil.clearFromValidateType(this.viewModelContext);
                    this.loadingService.show();
                    /** @type {?} */
                    var create$ = this.befRepository.createEntity();
                    return create$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                };
                /**
                 * 新增后代节点
                 */
                /**
                 * 新增后代节点
                 * @param {?} path
                 * @return {?}
                 */
                CreateDataService.prototype.createByPath = /**
                 * 新增后代节点
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    var _this = this;
                    this.loadingService.show();
                    // 当前为新增
                    /** @type {?} */
                    var entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
                    /** @type {?} */
                    var append$ = this.befRepository.appendEntityByPath(entityPath);
                    /** @type {?} */
                    var result$ = append$.pipe(tap((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.viewModelContext.uiState.setPropertyValue('$isAdd', { status: true, id: e['id'], path: path, child: __assign({}, e.data) });
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                    return result$;
                };
                return CreateDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/edit-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var EditDataService = exports('EditDataService', /** @class */ (function (_super) {
                __extends(EditDataService, _super);
                function EditDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 编辑数据
                 */
                /**
                 * 编辑数据
                 * @param {?} id
                 * @return {?}
                 */
                EditDataService.prototype.edit = /**
                 * 编辑数据
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var edit$ = this.befRepository.editEntityById(id);
                    return edit$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                };
                return EditDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/update-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据更新服务
             */
            var /**
             * 数据更新服务
             */
            UpdateDataService = exports('UpdateDataService', /** @class */ (function (_super) {
                __extends(UpdateDataService, _super);
                function UpdateDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 编辑数据
                 */
                /**
                 * 编辑数据
                 * @param {?} id
                 * @return {?}
                 */
                UpdateDataService.prototype.update = /**
                 * 编辑数据
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var update$ = this.befRepository.updateEntityById(id);
                    /** @type {?} */
                    var result$ = update$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                        // this.exceptionService.show('更新失败', exception);
                    })));
                    return result$;
                };
                return UpdateDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/remove-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 删除数据服务类
             */
            var /**
             * 删除数据服务类
             */
            RemoveDataService = exports('RemoveDataService', /** @class */ (function (_super) {
                __extends(RemoveDataService, _super);
                function RemoveDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 删除数据
                 */
                /**
                 * 删除数据
                 * @param {?} id
                 * @return {?}
                 */
                RemoveDataService.prototype.removeById = /**
                 * 删除数据
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    var _this = this;
                    /** @type {?} */
                    var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        if (val === false) {
                            return EMPTY;
                        }
                        if (_this['context'] && _this['context'].eventParams && _this['context'].eventParams.swipecellClose) {
                            _this['context'].eventParams.swipecellClose();
                        }
                        return _this.cancelChanges(id);
                    })));
                    return result$;
                };
                /**
                 * 确认删除
                 * @param id
                 */
                /**
                 * 确认删除
                 * @private
                 * @param {?} id
                 * @return {?}
                 */
                RemoveDataService.prototype.cancelChanges = /**
                 * 确认删除
                 * @private
                 * @param {?} id
                 * @return {?}
                 */
                function (id) {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var remove$ = this.befRepository.removeEntityAndSaveById(id);
                    return remove$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.notifyService.success('删除成功');
                        _this.loadingService.hide();
                    }), (/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                        _this.notifyService.error('删除失败');
                    })));
                };
                /**
                 * 批量删除数据
                 */
                /**
                 * 批量删除数据
                 * @param {?} ids
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByIds = /**
                 * 批量删除数据
                 * @param {?} ids
                 * @return {?}
                 */
                function (ids) {
                    var _this = this;
                    // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
                    if (!ids) {
                        /** @type {?} */
                        var selectedItems = this['context'].eventParams;
                        ids = selectedItems.map((/**
                         * @param {?} selectedItem
                         * @return {?}
                         */
                        function (selectedItem) {
                            return selectedItem.id;
                        }));
                    }
                    /** @type {?} */
                    var multiRemove$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        if (val === false) {
                            return EMPTY;
                        }
                        _this.loadingService.show();
                        return _this.befRepository.removeEntitiesByIds(ids);
                    })));
                    return multiRemove$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                        _this.notifyService.success('删除成功');
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                        // this.exceptionService.show('删除失败', exception);
                    })));
                };
                /**
                 * 删除后代节点数据
                 */
                /**
                 * 删除后代节点数据
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByPathAndId = /**
                 * 删除后代节点数据
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                function (path, id) {
                    var _this = this;
                    /** @type {?} */
                    var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        if (val === false) {
                            return EMPTY;
                        }
                        if (_this['context'] && _this['context'].eventParams && _this['context'].eventParams.swipecellClose) {
                            _this['context'].eventParams.swipecellClose();
                        }
                        return _this.removeByPathAndIdChanges(path, id);
                    })));
                    return result$;
                };
                /**
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByPathAndIdChanges = /**
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                function (path, id) {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
                    /** @type {?} */
                    var remove$ = this.befRepository.removeEntityByPath(entityPath, id);
                    return remove$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                        _this.notifyService.success('删除成功');
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.loadingService.hide();
                        console.error(error);
                    })));
                };
                /**
                 * 批量删除后代节点数据
                 */
                /**
                 * 批量删除后代节点数据
                 * @param {?} path
                 * @param {?} ids
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByPathAndIds = /**
                 * 批量删除后代节点数据
                 * @param {?} path
                 * @param {?} ids
                 * @return {?}
                 */
                function (path, ids) {
                    throw new Error('Not Implemented');
                };
                /**
                 * 业务附件批量删除数据
                 */
                /**
                 * 业务附件批量删除数据
                 * @param {?} url
                 * @param {?} ids
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByBusinessIds = /**
                 * 业务附件批量删除数据
                 * @param {?} url
                 * @param {?} ids
                 * @return {?}
                 */
                function (url, ids) {
                    // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
                    if (!ids) {
                        /** @type {?} */
                        var selectedItems = this['context'].eventParams;
                        ids = selectedItems.map((/**
                         * @param {?} selectedItem
                         * @return {?}
                         */
                        function (selectedItem) {
                            return selectedItem.id;
                        }));
                    }
                    /** @type {?} */
                    var params = {
                        ids: ids.join(',')
                    };
                    /** @type {?} */
                    var requestConfig = {
                        params: params,
                        body: {
                            dataChange: [],
                            variableChange: null
                        }
                    };
                    return this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig, true);
                    // this.loadingService.show();
                    // const multiRemove$ = this.dialogService.confirm('是否删除').pipe(
                    //   switchMap(val => {
                    //     if (val === false) {
                    //       return EMPTY;
                    //     }
                    //   }));
                    // return multiRemove$.pipe(
                    //   tap(
                    //     () => {
                    //       this.loadingService.hide();
                    //     },
                    //     (exception: any) => {
                    //       this.loadingService.hide();
                    //     }
                    //   )
                    // );
                };
                /**
                 * 业务附件删除后代节点数据
                 */
                /**
                 * 业务附件删除后代节点数据
                 * @param {?} url
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                RemoveDataService.prototype.removeByBusinessPathAndId = /**
                 * 业务附件删除后代节点数据
                 * @param {?} url
                 * @param {?} path
                 * @param {?} id
                 * @return {?}
                 */
                function (url, path, id) {
                    var _this = this;
                    /** @type {?} */
                    var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        if (val === false) {
                            return EMPTY;
                        }
                        return _this.befRepository.apiProxy.request(HttpMethods.PUT, url);
                    })));
                    return result$;
                };
                /**
                 * 子表清除编辑与新增标记
                 * @returns
                 */
                /**
                 * 子表清除编辑与新增标记
                 * @return {?}
                 */
                RemoveDataService.prototype.ClearStatusAfterchildCardSave = /**
                 * 子表清除编辑与新增标记
                 * @return {?}
                 */
                function () {
                    this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
                    this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
                    return of(true);
                };
                return RemoveDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/save-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var SaveDataService = exports('SaveDataService', /** @class */ (function (_super) {
                __extends(SaveDataService, _super);
                function SaveDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 保存数据
                 */
                /**
                 * 保存数据
                 * @return {?}
                 */
                SaveDataService.prototype.save = /**
                 * 保存数据
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var save$ = this.befRepository.saveEntities();
                    return save$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                        _this.notifyService.success('保存成功');
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                };
                /**
                 * 子表保存
                 */
                /**
                 * 子表保存
                 * @return {?}
                 */
                SaveDataService.prototype.saveByPath = /**
                 * 子表保存
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var currentRootId = this.viewModelContext.bindingData.list.currentId;
                    /** @type {?} */
                    var update$ = this.befRepository.updateEntityById(currentRootId);
                    /** @type {?} */
                    var result$ = update$.pipe(map((/**
                     * @return {?}
                     */
                    function () {
                        return true;
                    })), tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
                        _this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
                        _this.loadingService.hide();
                        _this.notifyService.success('保存成功');
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                    })));
                    return result$;
                };
                return SaveDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/cancel-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CancelDataService = exports('CancelDataService', /** @class */ (function (_super) {
                __extends(CancelDataService, _super);
                function CancelDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 新增数据
                 */
                /**
                 * 新增数据
                 * @return {?}
                 */
                CancelDataService.prototype.cancel = /**
                 * 新增数据
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    this.loadingService.show();
                    /** @type {?} */
                    var cancel$ = this.befRepository.cancelEntityChanges();
                    return cancel$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} exception
                     * @return {?}
                     */
                    function (exception) {
                        _this.loadingService.hide();
                        // this.exceptionService.show('取消失败', exception);
                    })));
                };
                return CancelDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/be-action.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * BE动作调用服务
             */
            var /**
             * BE动作调用服务
             */
            BeActionService = exports('BeActionService', /** @class */ (function (_super) {
                __extends(BeActionService, _super);
                /**
                 * 构造函数
                 */
                function BeActionService(viewModelContext) {
                    var _this = _super.call(this, viewModelContext) || this;
                    _this.viewModelContext = viewModelContext;
                    return _this;
                }
                /**
                 * 执行自定义动作
                 */
                /**
                 * 执行自定义动作
                 * @param {?} actionUrl
                 * @param {?} httpMethod
                 * @param {?=} httpHeaders
                 * @param {?=} params
                 * @param {?=} body
                 * @return {?}
                 */
                BeActionService.prototype.invokeAction = /**
                 * 执行自定义动作
                 * @param {?} actionUrl
                 * @param {?} httpMethod
                 * @param {?=} httpHeaders
                 * @param {?=} params
                 * @param {?=} body
                 * @return {?}
                 */
                function (actionUrl, httpMethod, httpHeaders, params, body) {
                    return this.innerInvokeAction(actionUrl, httpMethod, httpHeaders, params, body);
                };
                /**
                 * 调用自定义动作
                 */
                /**
                 * 调用自定义动作
                 * @private
                 * @param {?} actionUrl
                 * @param {?} method
                 * @param {?=} headers
                 * @param {?=} params
                 * @param {?=} body
                 * @return {?}
                 */
                BeActionService.prototype.innerInvokeAction = /**
                 * 调用自定义动作
                 * @private
                 * @param {?} actionUrl
                 * @param {?} method
                 * @param {?=} headers
                 * @param {?=} params
                 * @param {?=} body
                 * @return {?}
                 */
                function (actionUrl, method, headers, params, body) {
                    var _this = this;
                    /** @type {?} */
                    var apiProxy = this.befRepository.apiProxy;
                    /** @type {?} */
                    var baseUrl = apiProxy.baseUrl;
                    // 构造url
                    /** @type {?} */
                    var fullActionUrl = baseUrl + "/service/" + actionUrl;
                    /** @type {?} */
                    var requestConfig = {};
                    // headers构造
                    if (headers) {
                        requestConfig.headers = headers;
                    }
                    // 查询参数
                    if (params) {
                        requestConfig.params = params;
                    }
                    // body构造
                    if (body) {
                        requestConfig.body = body;
                    }
                    this.loadingService.show();
                    /** @type {?} */
                    var result$ = apiProxy.request(method, fullActionUrl, requestConfig);
                    return result$.pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.loadingService.hide();
                        console.log(error);
                    })));
                };
                return BeActionService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/approve.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ApproveService = exports('ApproveService', /** @class */ (function () {
                function ApproveService(wfTaskHandlerService, viewModelContext) {
                    this.viewModelContext = viewModelContext;
                    this.wfTaskHandlerService = wfTaskHandlerService;
                    this.notifyService = this.getService(NotifyService);
                }
                /**
                 * 获取服务实例
                 */
                /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                ApproveService.prototype.getService = /**
                 * 获取服务实例
                 * @template T
                 * @param {?} token
                 * @return {?}
                 */
                function (token) {
                    /** @type {?} */
                    var injector = this.viewModelContext.injector;
                    return injector.get(token);
                };
                /**
                 * 提交审批(带入口单据使用wf控件)
                 * @param bizBillID 业务单据Id
                 * @param bizDefKey 入口单据Id
                 * @param options 上下文参数
                 * @param variables 可选参数
                 */
                /**
                 * 提交审批(带入口单据使用wf控件)
                 * @param {?} bizBillID 业务单据Id
                 * @param {?} bizDefKey 入口单据Id
                 * @param {?=} options 上下文参数
                 * @param {?=} variables 可选参数
                 * @return {?}
                 */
                ApproveService.prototype.submitApproveWithBizDefKeyUseControl = /**
                 * 提交审批(带入口单据使用wf控件)
                 * @param {?} bizBillID 业务单据Id
                 * @param {?} bizDefKey 入口单据Id
                 * @param {?=} options 上下文参数
                 * @param {?=} variables 可选参数
                 * @return {?}
                 */
                function (bizBillID, bizDefKey, options, variables) {
                    if (options === void 0) { options = {}; }
                    if (!bizBillID) {
                        this.notifyService.error('业务单据Id不能为空');
                        return EMPTY;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据Id不能为空');
                        return EMPTY;
                    }
                    if (!options || typeof options !== 'object') {
                        options = {};
                    }
                    /** @type {?} */
                    var payload = __assign({ dataId: bizBillID, bizDefKey: bizDefKey }, options);
                    // 处理variables参数
                    if (variables) {
                        if (variables.startsWith('{') && variables.endsWith('}')) {
                            try {
                                variables = JSON.parse(variables);
                            }
                            catch (_a) {
                                console.log('variables parse failed!');
                                variables = {};
                            }
                        }
                        payload.variables = variables;
                    }
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
                };
                /**
                 * 取消审批(支持主表、子表)
                 * 迁移web端（已废弃）请调用新的取消提交方法
                 * @param procInstId 流程实例Id
                 */
                /**
                 * 取消审批(支持主表、子表)
                 * 迁移web端（已废弃）请调用新的取消提交方法
                 * @param {?} procInstId 流程实例Id
                 * @return {?}
                 */
                ApproveService.prototype.cancelSubmit = /**
                 * 取消审批(支持主表、子表)
                 * 迁移web端（已废弃）请调用新的取消提交方法
                 * @param {?} procInstId 流程实例Id
                 * @return {?}
                 */
                function (procInstId) {
                    if (!procInstId) {
                        this.notifyService.error('流程实例Id不能为空');
                        return EMPTY;
                    }
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ dataId: null, bizDefKey: null, procInstId: procInstId });
                };
                /**
                 * 提交审批
                 * @param dataId 表单id
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.submitWithBizDefKey = /**
                 * 提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataId, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.submitWithBizDefKey(dataId, bizDefKey);
                };
                /**
                 * 取消提交审批
                 * @param dataId 表单id
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 取消提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.cancelSubmitWithDataId = /**
                 * 取消提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataId, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmitWithDataId(dataId, bizDefKey);
                };
                /**
                 * 批量提交审批
                 * @param dataIds 表单ID集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 批量提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.batchSubmitWithBizDefKey = /**
                 * 批量提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataIds, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.batchSubmitWithBizDefKey(dataIds, bizDefKey);
                };
                /**
                 * 批量取消提交审批
                 * @param dataIds 表单ID集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 批量取消提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.batchCancelSubmitWithDataId = /**
                 * 批量取消提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataIds, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.batchCancelSubmitWithDataId(dataIds, bizDefKey);
                };
                /**
                * 子表提交审批
                * @param parentDataId 主表id
                * @param childDataId 子表id
                * @param bizDefKey 入口单据id
                */
                /**
                 * 子表提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.childSubmit = /**
                 * 子表提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataId, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.childSubmit(parentDataId, childDataId, bizDefKey);
                };
                /**
                 * 子表取消提交审批
                 * @param parentDataId 主表id
                 * @param childDataId 子表id
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 子表取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.childCancelSubmit = /**
                 * 子表取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataId, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.childCancelSubmit(parentDataId, childDataId, bizDefKey);
                };
                /**
                 * 子表批量提交审批
                 * @param parentDataId 主表id
                 * @param childDataIds 子表id集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 子表批量提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.childBatchSubmit = /**
                 * 子表批量提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataIds, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchSubmit(parentDataId, childDataIds, bizDefKey);
                };
                /**
                 * 子表批量取消提交审批
                 * @param parentDataId 主表id
                 * @param childDataIds 子表id集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 子表批量取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                ApproveService.prototype.childBatchCancelSubmit = /**
                 * 子表批量取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataIds, bizDefKey) {
                    return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey);
                };
                return ApproveService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/check-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据检查服务
             */
            var /**
             * 数据检查服务
             */
            CheckDataService = exports('CheckDataService', /** @class */ (function (_super) {
                __extends(CheckDataService, _super);
                function CheckDataService(viewModelContext) {
                    return _super.call(this, viewModelContext) || this;
                }
                /**
                 * 离开页面前检查数据变更
                 */
                /**
                 * 离开页面前检查数据变更
                 * @return {?}
                 */
                CheckDataService.prototype.checkChangesBeforeLeave = /**
                 * 离开页面前检查数据变更
                 * @return {?}
                 */
                function () {
                    //const isEntitiesChanged = this.befRepository.entityManager.checkAllEntityChanges();
                    var _this = this;
                    // 实体数据没有变化，继续执行
                    if (!BefRepositoryUtil.isExistUnsaveData(this.befRepository)) {
                        return of(true);
                    }
                    return this.dialogService.confirm('存在未保存的变更，确认离开当前页面？').pipe(switchMap((/**
                     * @param {?} ifLeave
                     * @return {?}
                     */
                    function (ifLeave) {
                        if (ifLeave === false) {
                            return EMPTY;
                        }
                        else {
                            _this.loadingService.show();
                            /** @type {?} */
                            var cancel$ = _this.befRepository.cancelEntityChanges();
                            return cancel$.pipe(switchMap((/**
                             * @return {?}
                             */
                            function () {
                                if (_this.befRepository.apiProxy.associatedUrlMap.size >= 1) {
                                    /** @type {?} */
                                    var urls = __spread(_this.befRepository.apiProxy.associatedUrlMap.keys());
                                    return _this.befRepository.apiProxy.request(HttpMethods.POST, urls[0] + "/service/cancel");
                                }
                                else {
                                    return of(true);
                                }
                            })), tap((/**
                             * @return {?}
                             */
                            function () {
                                _this.loadingService.hide();
                            })));
                        }
                    })));
                };
                /**
                 * 子表离开页面前检查数据变更
                 */
                /**
                 * 子表离开页面前检查数据变更
                 * @return {?}
                 */
                CheckDataService.prototype.checkChangesBeforeLeaveChild = /**
                 * 子表离开页面前检查数据变更
                 * @return {?}
                 */
                function () {
                    // 新增状态
                    if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
                        // 继续判断
                        /** @type {?} */
                        var childId = this.viewModelContext.uiState['$isAdd'].id;
                        /** @type {?} */
                        var childPath = this.viewModelContext.uiState['$isAdd'].path;
                        /** @type {?} */
                        var child = this.viewModelContext.uiState['$isAdd'].child;
                        /** @type {?} */
                        var subPaths = childPath.split('/');
                        /** @type {?} */
                        var currentChild = void 0;
                        if (subPaths[0] && subPaths.length === 1) {
                            currentChild = this.viewModelContext.bindingData[subPaths[0]];
                        }
                        if (!subPaths[0] && subPaths.length === 2) {
                            currentChild = this.viewModelContext.bindingData[subPaths[1]];
                        }
                        if (subPaths.length > 2) {
                            // 暂不处理从从表
                            /** @type {?} */
                            var childPath_1 = '';
                            if (subPaths[0]) {
                                childPath_1 = subPaths[0];
                            }
                            for (var index = 1; index < subPaths.length; index++) {
                                childPath_1 = childPath_1 + subPaths[index];
                            }
                            currentChild = this.viewModelContext.bindingData[childPath_1];
                        }
                        /** @type {?} */
                        var isChanged = this.checkForVariationBetweenTheTwo(currentChild, child);
                        if (isChanged) {
                            return of(true);
                        }
                        /** @type {?} */
                        var entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
                        return this.befRepository.removeEntityByPath(entityPath, childId);
                    }
                    return of(true);
                };
                /**
                 * @private
                 * @param {?} newData
                 * @param {?} oldData
                 * @return {?}
                 */
                CheckDataService.prototype.checkForVariationBetweenTheTwo = /**
                 * @private
                 * @param {?} newData
                 * @param {?} oldData
                 * @return {?}
                 */
                function (newData, oldData) {
                    /** @type {?} */
                    var childKeys = Object.keys(oldData);
                    /** @type {?} */
                    var isChanged = false;
                    for (var i = 0; i < childKeys.length; i++) {
                        if (Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Object]' || Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Array]') {
                            if (JSON.stringify(oldData[childKeys[i]]) !== JSON.stringify(newData[childKeys[i]])) {
                                return isChanged = true;
                            }
                        }
                        else {
                            if (oldData[childKeys[i]] !== newData[childKeys[i]]) {
                                return isChanged = true;
                            }
                        }
                    }
                    return isChanged;
                };
                /**
                 * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
                 * @param path 子表路径
                 */
                /**
                 * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
                 * @param {?} path 子表路径
                 * @return {?}
                 */
                CheckDataService.prototype.checkChangesBeforeLeaveAddOrEditChild = /**
                 * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
                 * @param {?} path 子表路径
                 * @return {?}
                 */
                function (path) {
                    var _this = this;
                    // 新增状态
                    if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
                        // 新增直接干掉
                        /** @type {?} */
                        var childId = this.viewModelContext.uiState['$isAdd'].id;
                        /** @type {?} */
                        var childPath = this.viewModelContext.uiState['$isAdd'].path;
                        /** @type {?} */
                        var entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
                        return this.befRepository.removeEntityByPath(entityPath, childId).pipe(tap((/**
                         * @return {?}
                         */
                        function () {
                            _this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
                        })));
                    }
                    else {
                        // 编辑还原
                        /** @type {?} */
                        var childID = this.viewModelContext.bindingData[path]['id'];
                        /** @type {?} */
                        var id = this.viewModelContext.bindingData[path]['parentID'];
                        /** @type {?} */
                        var childEntityData = this.viewModelContext.uiState['$childEntity'];
                        if (!childEntityData) {
                            return of(true);
                        }
                        this.viewModelContext.repository.entityCollection.getEntityById(id)[path].get(childID).load(childEntityData);
                        return of(true);
                    }
                };
                return CheckDataService;
            }(BaseDataService)));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/data-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/router.servcie.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 路由服务
             */
            var /**
             * 路由服务
             */
            RouterService = exports('RouterService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function RouterService(viewModelContext, router, jsBridgeService) {
                    this.jsBridgeService = jsBridgeService;
                    this.viewModelContext = viewModelContext;
                    this.router = router;
                }
                /**
                 * 路由跳转
                 * @param path   路由路径
                 * @param params 路由参数
                 */
                /**
                 * 路由跳转
                 * @param {?} path   路由路径
                 * @param {?=} queryParams
                 * @param {?=} backParams
                 * @param {?=} backPath
                 * @return {?}
                 */
                RouterService.prototype.navigate = /**
                 * 路由跳转
                 * @param {?} path   路由路径
                 * @param {?=} queryParams
                 * @param {?=} backParams
                 * @param {?=} backPath
                 * @return {?}
                 */
                function (path, queryParams, backParams, backPath) {
                    if (queryParams === void 0) { queryParams = {}; }
                    if (backParams === void 0) { backParams = {}; }
                    if (!path)
                        return;
                    queryParams = this.ParamsFromStringToObject(queryParams);
                    backParams = this.ParamsFromStringToObject(backParams);
                    /** @type {?} */
                    var pathIndex = this.sessionStorageSaveHistory(path, backPath, backParams)
                    // 跨工程跳转
                    ;
                    // 跨工程跳转
                    if (path && pathIndex >= 0) {
                        /** @type {?} */
                        var urlPath = this.splicePath(path, queryParams);
                        window.location.href = urlPath;
                        return false;
                    }
                    window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
                    this.router.push({
                        path: path,
                        query: queryParams
                    });
                };
                /**
                 * @private
                 * @param {?} pathIndex
                 * @param {?} path
                 * @return {?}
                 */
                RouterService.prototype.removeParams = /**
                 * @private
                 * @param {?} pathIndex
                 * @param {?} path
                 * @return {?}
                 */
                function (pathIndex, path) {
                    /** @type {?} */
                    var end = path.search('\\?');
                    if (end = -1) {
                        end = path.length;
                    }
                    return path.slice(pathIndex, end);
                };
                /**
                 * @private
                 * @param {?} path
                 * @return {?}
                 */
                RouterService.prototype.getsessionStorageSaveHistoryKey = /**
                 * @private
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var pathIndex = path.search('/apps');
                    // 跨页面跳转离开
                    if (path && pathIndex >= 0) {
                        return this.removeParams(pathIndex, path);
                    }
                    return this.router.options.history.base + path;
                };
                /**
                 * @private
                 * @param {?} path
                 * @param {?} backPath
                 * @param {?} backParams
                 * @return {?}
                 */
                RouterService.prototype.sessionStorageSaveHistory = /**
                 * @private
                 * @param {?} path
                 * @param {?} backPath
                 * @param {?} backParams
                 * @return {?}
                 */
                function (path, backPath, backParams) {
                    /** @type {?} */
                    var pathIndex = path.search('/apps');
                    /** @type {?} */
                    var key = this.getsessionStorageSaveHistoryKey(path);
                    /** @type {?} */
                    var historyObject = {}
                    //判断是否制定了目标页面得返回地址
                    ;
                    //判断是否制定了目标页面得返回地址
                    if (backPath) {
                        /** @type {?} */
                        var backPathIndex = path.search('/apps');
                        //指定返回路由为跨工程跳转
                        if (backPathIndex >= 0) {
                            historyObject = {
                                routerWay: 'href',
                                path: backPath,
                                query: backParams
                            };
                        }
                        else {
                            historyObject = {
                                routerWay: 'Router',
                                path: backPath,
                                query: backParams
                            };
                        }
                        sessionStorage.setItem(key, JSON.stringify(historyObject));
                        return pathIndex;
                    }
                    else {
                        /** @type {?} */
                        var currentPath = this.router.currentRoute.value.path;
                        // 跨页面跳转离开
                        if (path && pathIndex >= 0) {
                            //拼接当前路由
                            currentPath = this.router.options.history.base + this.router.options.history.location;
                            //记录当前路由
                            historyObject = {
                                routerWay: 'href',
                                path: currentPath,
                                query: backParams
                            };
                        }
                        else {
                            // 路由方式跳转记录
                            historyObject = {
                                routerWay: 'Router',
                                path: currentPath,
                                query: backParams
                            };
                        }
                        sessionStorage.setItem(key, JSON.stringify(historyObject));
                        return pathIndex;
                    }
                };
                /**
                 * 带维度的路由跳转
                 */
                /**
                 * 带维度的路由跳转
                 * @param {?} path
                 * @param {?=} queryParams
                 * @param {?=} backParams
                 * @param {?=} backPath
                 * @return {?}
                 */
                RouterService.prototype.navigateForRtc = /**
                 * 带维度的路由跳转
                 * @param {?} path
                 * @param {?=} queryParams
                 * @param {?=} backParams
                 * @param {?=} backPath
                 * @return {?}
                 */
                function (path, queryParams, backParams, backPath) {
                    var _this = this;
                    if (queryParams === void 0) { queryParams = {}; }
                    if (backParams === void 0) { backParams = {}; }
                    if (!queryParams || !queryParams.metadataId) {
                        this.navigate(path, queryParams, backParams, backPath);
                    }
                    /** @type {?} */
                    var rtcOptions = {
                        metadataId: queryParams.metadataId,
                        withDims: false,
                        dim1: queryParams.dim1,
                        dim2: queryParams.dim2
                    };
                    delete queryParams['metadataId'];
                    delete queryParams['dim1'];
                    delete queryParams['dim2'];
                    /** @type {?} */
                    var correctRtcOptions$ = this.correctRtcOptions(rtcOptions);
                    /** @type {?} */
                    var extendedPath$ = correctRtcOptions$.pipe(map((/**
                     * @param {?} correctedRtcOptions
                     * @return {?}
                     */
                    function (correctedRtcOptions) {
                        return _this.getExtendPath(path, correctedRtcOptions);
                    })));
                    /** @type {?} */
                    var result$ = extendedPath$.pipe(tap((/**
                     * @param {?} extendedPath
                     * @return {?}
                     */
                    function (extendedPath) {
                        _this.navigate(extendedPath, queryParams, backParams);
                    })));
                    result$.subscribe();
                };
                /**
                 * 纠正维度信息
                 * @summary
                 * 1、非运行时定制表单，widthDims=false, 维度为空；
                 * 2、运行时定制表单：维度值不存在时，则纠正为public；
                 */
                /**
                 * 纠正维度信息
                 * \@summary
                 * 1、非运行时定制表单，widthDims=false, 维度为空；
                 * 2、运行时定制表单：维度值不存在时，则纠正为public；
                 * @private
                 * @param {?} rtcOptions
                 * @return {?}
                 */
                RouterService.prototype.correctRtcOptions = /**
                 * 纠正维度信息
                 * \@summary
                 * 1、非运行时定制表单，widthDims=false, 维度为空；
                 * 2、运行时定制表单：维度值不存在时，则纠正为public；
                 * @private
                 * @param {?} rtcOptions
                 * @return {?}
                 */
                function (rtcOptions) {
                    /** @type {?} */
                    var dim1 = rtcOptions.dim1 || 'public';
                    /** @type {?} */
                    var dim2 = rtcOptions.dim2 || 'public';
                    /** @type {?} */
                    var metadataId = rtcOptions.metadataId;
                    /** @type {?} */
                    var httpClient = this.viewModelContext.injector.get(HttpClient);
                    /** @type {?} */
                    var url = '/api/runtime/bcc/v1.0/template/beforeNavigate';
                    /** @type {?} */
                    var body = {
                        isRootMetadata: true,
                        metadataId: metadataId,
                        dim1: dim1,
                        dim2: dim2,
                    };
                    /** @type {?} */
                    var beforeNavigate$ = httpClient.post(url, body, null).pipe(map((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        /** @type {?} */
                        var correctedRtcOptions = {
                            metadataId: result.metadataId,
                            withDims: result.withDims === 1 ? true : false,
                            dim1: result.dim1,
                            dim2: result.dim2
                        };
                        return correctedRtcOptions;
                    })));
                    return beforeNavigate$;
                };
                /**
                 * 获取运行时定制表单地址
                 */
                /**
                 * 获取运行时定制表单地址
                 * @private
                 * @param {?} path
                 * @param {?} rtcOptions
                 * @return {?}
                 */
                RouterService.prototype.getExtendPath = /**
                 * 获取运行时定制表单地址
                 * @private
                 * @param {?} path
                 * @param {?} rtcOptions
                 * @return {?}
                 */
                function (path, rtcOptions) {
                    if (rtcOptions.withDims === false) {
                        return path;
                    }
                    /** @type {?} */
                    var arrPath = path.split('index.html');
                    /** @type {?} */
                    var append = (rtcOptions.dim1 + "/" + rtcOptions.dim2 + "/index.html").toLowerCase();
                    /** @type {?} */
                    var extendPath = arrPath.join(append);
                    return extendPath;
                };
                /**
                 * 拼接url路径
                 * @param path 路径
                 * @param params 参数
                 * @returns
                 */
                /**
                 * 拼接url路径
                 * @private
                 * @param {?} path 路径
                 * @param {?} params 参数
                 * @return {?}
                 */
                RouterService.prototype.splicePath = /**
                 * 拼接url路径
                 * @private
                 * @param {?} path 路径
                 * @param {?} params 参数
                 * @return {?}
                 */
                function (path, params) {
                    /** @type {?} */
                    var urlPath = path;
                    /** @type {?} */
                    var end = urlPath.search('\\?');
                    if (end > -1) {
                        urlPath = urlPath.slice(0, end);
                    }
                    /** @type {?} */
                    var keys = Object.keys(params);
                    if (keys.length > 0) {
                        urlPath = urlPath + '?';
                        keys.forEach((/**
                         * @param {?} element
                         * @return {?}
                         */
                        function (element) {
                            urlPath = urlPath + element + '=' + params["" + element] + '&';
                        }));
                        urlPath = urlPath.slice(0, urlPath.length - 1);
                    }
                    return urlPath;
                };
                /**
                 * @private
                 * @param {?} params
                 * @return {?}
                 */
                RouterService.prototype.ParamsFromStringToObject = /**
                 * @private
                 * @param {?} params
                 * @return {?}
                 */
                function (params) {
                    if (Object.prototype.toString.call(params) === '[object Object]') {
                        return params;
                    }
                    try {
                        params = JSON.parse(params);
                    }
                    catch (error) {
                        if (!params) {
                            params = {};
                        }
                        else {
                            params = {};
                            console.error('路由传参params不是JSON串格式');
                        }
                    }
                    if (Object.prototype.toString.call(params) !== '[object Object]') {
                        return {};
                    }
                    return params;
                };
                /**
               * 路由跳转
               * @param path   路由路径
               * @param params 路由参数
               */
                /**
                 * 路由跳转
                 * @param {?} path   路由路径
                 * @param {?=} queryParams
                 * @return {?}
                 */
                RouterService.prototype.navigateReplace = /**
                 * 路由跳转
                 * @param {?} path   路由路径
                 * @param {?=} queryParams
                 * @return {?}
                 */
                function (path, queryParams) {
                    if (queryParams === void 0) { queryParams = {}; }
                    if (typeof queryParams === 'string') {
                        queryParams = JSON.parse(queryParams);
                    }
                    this.router.replace({
                        path: path,
                        query: queryParams
                    });
                };
                /**
                 * 后退
                 */
                /**
                 * 后退
                 * @param {?} params
                 * @return {?}
                 */
                RouterService.prototype.goBack = /**
                 * 后退
                 * @param {?} params
                 * @return {?}
                 */
                function (params) {
                    params = this.ParamsFromStringToObject(params);
                    /** @type {?} */
                    var currentPath = this.router.options.history.base + this.router.currentRoute.value.path;
                    /** @type {?} */
                    var need_go_back = sessionStorage.getItem(currentPath);
                    if (!need_go_back) {
                        if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
                            return;
                        }
                        this.jsBridgeService.closeWindow();
                        return;
                    }
                    /** @type {?} */
                    var keys = Object.keys(params);
                    need_go_back = JSON.parse(need_go_back);
                    if (need_go_back && need_go_back['routerWay'] === 'Router') {
                        /** @type {?} */
                        var query = need_go_back['query'];
                        if (keys.length > 0) {
                            query = __assign({}, query, params);
                        }
                        this.router.push({
                            query: query,
                            path: need_go_back['path'],
                        });
                    }
                    if (need_go_back && need_go_back['routerWay'] === 'href') {
                        /** @type {?} */
                        var query = need_go_back['query'];
                        if (keys.length > 0) {
                            query = __assign({}, query, params);
                        }
                        /** @type {?} */
                        var path = need_go_back['path'];
                        path = this.splicePath(path, query);
                        window.location.href = path;
                    }
                };
                /**
                 * 映射路由状态
                 */
                /**
                 * 映射路由状态
                 * @return {?}
                 */
                RouterService.prototype.mappingToUIState = /**
                 * 映射路由状态
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var routerState = {
                        params: this.router.currentRoute['value'].params,
                        queryParams: this.router.currentRoute['value'].query
                    };
                    this.viewModelContext.uiState['routerState'] = routerState;
                };
                return RouterService;
            }()));
            /**
             * Token
             * \@todo：临时方案，直接注入VueRouter实例。
             * @type {?}
             */
            var ROUTER_INSTANCE_TOKEN = exports('ROUTER_INSTANCE_TOKEN', '@farris/mobile-command-services/ROUTER_INSTANCE_TOKEN');

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/validator-services/validator.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 数据服务基类
             */
            var /**
             * 数据服务基类
             */
            ValidatorServices = function (v) { return exports({ ValidatorServices: v, ɵe: v }), v; }(/** @class */ (function () {
                function ValidatorServices(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * 获取某个视图模型上得所有验证结果
                 * @param viewModelId 视图模型id
                 */
                /**
                 * 获取某个视图模型上得所有验证结果
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                ValidatorServices.prototype.validateFields = /**
                 * 获取某个视图模型上得所有验证结果
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                function (viewModelId) {
                    if (viewModelId) {
                        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
                    }
                    else {
                        return this.viewModelContext.form.validateFields();
                    }
                };
                /**
                 * 处理某个视图模型上得所有验证结果
                 * @param viewModelId 视图模型id
                 */
                /**
                 * 处理某个视图模型上得所有验证结果
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                ValidatorServices.prototype.handleValidateFields = /**
                 * 处理某个视图模型上得所有验证结果
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                function (viewModelId) {
                    /** @type {?} */
                    var validateFieldsResults = [];
                    if (viewModelId) {
                        validateFieldsResults = this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
                    }
                    else {
                        this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            validateFieldsResults = validateFieldsResults.concat(context.form.validateFields());
                        }));
                    }
                    if (validateFieldsResults.length === 0) {
                        return of(true);
                    }
                    return zip.apply(void 0, __spread(validateFieldsResults)).pipe(switchMap((/**
                     * @param {?} value
                     * @return {?}
                     */
                    function (value) {
                        /** @type {?} */
                        var index = value.findIndex((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item['passing'] === false; }));
                        if (index > -1) {
                            return EMPTY;
                        }
                        else {
                            return of(true);
                        }
                    })));
                };
                /**
                 * 获取某个字段的验证结果
                 * @param name 字段名称
                 * @param viewModelId 视图模型id
                 */
                /**
                 * 获取某个字段的验证结果
                 * @param {?} name 字段名称
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                ValidatorServices.prototype.getFieldError = /**
                 * 获取某个字段的验证结果
                 * @param {?} name 字段名称
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                function (name, viewModelId) {
                    if (viewModelId) {
                        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.getFieldError(name);
                    }
                    else {
                        return this.viewModelContext.form.getFieldError(name);
                    }
                };
                /**
                 * 重置一组校验状态 不传参数清除所有
                 * @param fields name的数组
                 * @param viewModelId 视图模型id
                 */
                /**
                 * 重置一组校验状态 不传参数清除所有
                 * @param {?=} fields name的数组
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                ValidatorServices.prototype.resetFieldsValidate = /**
                 * 重置一组校验状态 不传参数清除所有
                 * @param {?=} fields name的数组
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                function (fields, viewModelId) {
                    if (fields && typeof fields === 'string') {
                        fields = JSON.parse(fields);
                    }
                    if (viewModelId) {
                        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.resetFieldsValidate(fields);
                    }
                    else {
                        this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            context.form.resetFieldsValidate(fields);
                        }));
                    }
                };
                return ValidatorServices;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/validator-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/js-bridge-service/ccwork-service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CCworkService = /** @class */ (function () {
                function CCworkService() {
                }
                /**
                 * @param {?} callback
                 * @return {?}
                 */
                CCworkService.prototype.init = /**
                 * @param {?} callback
                 * @return {?}
                 */
                function (callback) {
                    window.top['iCityBridge'].init(callback);
                };
                /**
                 * {
                 * quality:图片质量，可选值high、mid、low, high为1920*1080；mid为720*540；low: 480*360，默认为mid
                 * mode:唤起模式，可选值both（仅支持iOS）、camera、album, 默认为camera;
                 * mark文字水印，字数最大值50
                 * }
                 * @param options Object
                 *
                 */
                /**
                 * {
                 * quality:图片质量，可选值high、mid、low, high为1920*1080；mid为720*540；low: 480*360，默认为mid
                 * mode:唤起模式，可选值both（仅支持iOS）、camera、album, 默认为camera;
                 * mark文字水印，字数最大值50
                 * }
                 * @param {?=} options Object
                 *
                 * @return {?}
                 */
                CCworkService.prototype.takePhoto = /**
                 * {
                 * quality:图片质量，可选值high、mid、low, high为1920*1080；mid为720*540；low: 480*360，默认为mid
                 * mode:唤起模式，可选值both（仅支持iOS）、camera、album, 默认为camera;
                 * mark文字水印，字数最大值50
                 * }
                 * @param {?=} options Object
                 *
                 * @return {?}
                 */
                function (options) {
                    if (options === void 0) { options = { quality: 'mid' }; }
                    // callback return object {errormessage:""，result:"base64格式"}
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data['result']);
                        }
                    });
                    window.top['iCityBridge'].ccworkGetPicsFromCameraAndAlbum(__assign({}, options), callback);
                    return subject;
                };
                /**
                 * path 如果不为空则从指定图片文件识别二维码,空就吊起相机
                 * filters 条码类型过滤列表，如QR、EAN13、EAN8
                 *
                 * @param options Object
                 *
                 */
                /**
                 * path 如果不为空则从指定图片文件识别二维码,空就吊起相机
                 * filters 条码类型过滤列表，如QR、EAN13、EAN8
                 *
                 * @return {?}
                 */
                CCworkService.prototype.scanQRCode = /**
                 * path 如果不为空则从指定图片文件识别二维码,空就吊起相机
                 * filters 条码类型过滤列表，如QR、EAN13、EAN8
                 *
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data['result']);
                        }
                    });
                    window.top['iCityBridge'].ccworkScanCode({}, callback);
                    return subject;
                };
                /**
                 * @return {?}
                 */
                CCworkService.prototype.getSysInfo = /**
                 * @return {?}
                 */
                function () {
                };
                /**
                 * @return {?}
                 */
                CCworkService.prototype.getLocation = /**
                 * @return {?}
                 */
                function () {
                    /**
                     *  回调函数
                     *  输出结构 object
                     *  errormessage:""
                     *  result:Object {
                     *  addr:'山东省济南市历下区经十路靠近浪潮'
                     *  city:"济南"
                     *  country:"中国"
                     *  course:-1
                     *  district:"历下区"
                     *  lat:36.66254123263889
                     *  lng:117.12974745008681
                     *  province:"山东省"
                     *  street:"经十路"
                     *  streetNum:"1单元"
                     * }
                     *  status:true
                     * @type {?}
                     */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data['result']);
                        }
                    });
                    window.top['iCityBridge'].ccworkGetLocation(callback);
                    return subject;
                };
                // TODO:云上协同选择文件
                // TODO:云上协同选择文件
                /**
                 * @return {?}
                 */
                CCworkService.prototype.selectFile = 
                // TODO:云上协同选择文件
                /**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var subject = new Subject();
                    subject.next([]);
                    return subject;
                };
                /**
                 *
                 * @param number string
                 * @param content string
                 */
                /**
                 *
                 * @param {?} number string
                 * @param {?} content string
                 * @return {?}
                 */
                CCworkService.prototype.sendSMS = /**
                 *
                 * @param {?} number string
                 * @param {?} content string
                 * @return {?}
                 */
                function (number, content) {
                    /** @type {?} */
                    var options = {
                        numbers: [number],
                        content: content
                    };
                    window.top['iCityBridge'].ccworkSendSms(options);
                };
                /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                CCworkService.prototype.openSendSMS = /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                function (number, content) {
                    window.top['iCityBridge'].sendSMS({ tel: number, msg: content });
                };
                /**
                 *
                 * @param number string
                 */
                /**
                 *
                 * @param {?} number string
                 * @return {?}
                 */
                CCworkService.prototype.tel = /**
                 *
                 * @param {?} number string
                 * @return {?}
                 */
                function (number) {
                    window.top['iCityBridge'].ringUp(number);
                };
                /**
                 *
                 * @param options
                 */
                /**
                 *
                 * @param {?=} options
                 * @return {?}
                 */
                CCworkService.prototype.selectPictureFromAlbum = /**
                 *
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    if (options === void 0) { options = { maxNum: 9, mType: 0 }; }
                    /**
                     * params object
                     *  { maxNum : number 9 最大可选数 默认9
                     *    mType: number 0 	选择模式，可选值0/1, 0:图片，1：视频;
                     * }
                     * @type {?}
                     */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data['result']);
                        }
                    });
                    window.top['iCityBridge'].ccworkGetPicsFromAlbum(options, callback);
                    return subject;
                    /**
                     *  object
                     *  errormessage:""
                     *  result:Array [
                     * base64
                     * ]
                     *  status:true
                     */
                };
                /**
                 *
                 * @param options
                 */
                /**
                 *
                 * @param {?} options
                 * @return {?}
                 */
                CCworkService.prototype.takeVideo = /**
                 *
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    /**
                     * params object
                     *  {
                     *  time : number 短视频时间（秒） 最大60s
                     *  quality: number 0 	视频质量 取值范围0~1
                     *  id :string 	视频id（视频名字）
                     * }
                     * @type {?}
                     */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data['result']);
                        }
                    });
                    window.top['iCityBridge'].ccworkTakeShortVideo(__assign({ time: 15 }, options), callback);
                    return subject;
                    /**
                     *  object
                     *  errormessage:""
                     *  result:Object {
                     *  value:'path'
                     * }
                     *  status:true
                     */
                };
                /**
                 * @return {?}
                 */
                CCworkService.prototype.closeWindow = /**
                 * @return {?}
                 */
                function () {
                    window.top['iCityBridge'].closeWebView();
                };
                /**
                 *
                 * @param title string
                 */
                /**
                 *
                 * @param {?} title string
                 * @return {?}
                 */
                CCworkService.prototype.setTitles = /**
                 *
                 * @param {?} title string
                 * @return {?}
                 */
                function (title) {
                    window.top['iCityBridge'].setTitle(title);
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                CCworkService.prototype.downloadFile = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    alert('暂不支持附件下载');
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                CCworkService.prototype.setOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    window.top['iCityBridge'].ccworkInterceptOriginGoback(!!fn, fn, (/**
                     * @return {?}
                     */
                    function () { }));
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                CCworkService.prototype.pushOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    window['OriginGoback'] = window['OriginGoback'] || [];
                    /** @type {?} */
                    var OriginGoback = (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var gobackFn = window['OriginGoback'].pop();
                        if (gobackFn) {
                            gobackFn();
                        }
                        else {
                            window.top['iCityBridge'].ccworkInterceptOriginGoback(false, (/**
                             * @return {?}
                             */
                            function () { }), (/**
                             * @return {?}
                             */
                            function () { }));
                            history.back();
                        }
                    });
                    if (fn) {
                        window['OriginGoback'].push(fn);
                        window.top['iCityBridge'].ccworkInterceptOriginGoback(true, OriginGoback, (/**
                         * @return {?}
                         */
                        function () { }));
                    }
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                CCworkService.prototype.popOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    window['OriginGoback'].pop();
                };
                /**
                 * @param {?} opt
                 * @return {?}
                 */
                CCworkService.prototype.playShortVideo = /**
                 * @param {?} opt
                 * @return {?}
                 */
                function (opt) {
                    window.top['iCityBridge'].ccworkPlayShortVideo(opt);
                };
                return CCworkService;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/js-bridge-service/cloud-plus-service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CloudPlusService = /** @class */ (function () {
                function CloudPlusService() {
                }
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                CloudPlusService.prototype.playShortVideo = /**
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    throw new Error('Method not implemented.');
                };
                // 目前拍完返回报错
                // 目前拍完返回报错
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                CloudPlusService.prototype.takePhoto = 
                // 目前拍完返回报错
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    if (options === void 0) { options = {
                        quality: 75,
                        encodingType: 0,
                        targetWidth: 600,
                        targetHeight: 600
                    }; }
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data && data['originalData']) {
                            subject.next(data['originalData']);
                        }
                    });
                    /** @type {?} */
                    var errorCallback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('takePhoto', data);
                            subject.next([]);
                            return;
                        }
                    });
                    window['imp'].iCamera.open(options, callback, errorCallback);
                    return subject;
                };
                /**
                 * @return {?}
                 */
                CloudPlusService.prototype.scanQRCode = /**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('二维码回调');
                            subject.next(data);
                        }
                    });
                    console.log('调用二维码');
                    window['imp'].iBarCode.scan(callback);
                    return subject;
                };
                /**
                 * @return {?}
                 */
                CloudPlusService.prototype.getLocation = /**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            var latitude = data.latitude, longitude = data.longitude, addr = data.addr, city = data.city, country = data.country, district = data.district, province = data.province, street = data.street, streetNum = data.streetNum;
                            subject.next({
                                addr: addr,
                                city: city,
                                country: country,
                                district: district,
                                province: province,
                                street: street,
                                streetNum: streetNum,
                                lat: latitude,
                                lng: longitude,
                            });
                        }
                    });
                    window['imp'].iGps.getInfo(callback);
                    return subject;
                    // iphone 打印输出信息
                    /**
                     * {latitude:"36.662413",longitude:"117.129769"}
                     */
                    // 安卓
                    /**
                     *  回调函数
                     *  输出结构 object
                     *  errormessage:""
                     *  result:Object {
                     *  addr:'山东省济南市历下区经十路靠近浪潮'
                     *  city:"济南"
                     *  country:"中国"
                     *  course:-1
                     *  district:"历下区"
                     *  lat:36.66254123263889
                     *  lng:117.12974745008681
                     *  province:"山东省"
                     *  street:"经十路"
                     *  streetNum:"1单元"
                     * }
                     *  status:true
                     */
                };
                /**
                 * @return {?}
                 */
                CloudPlusService.prototype.getSysInfo = /**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data);
                        }
                    });
                    window['imp'].iDevice.sysInfo(callback);
                    return subject;
                };
                /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                CloudPlusService.prototype.sendSMS = /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                function (number, content) {
                    window['imp'].iSms.send(number, content);
                };
                /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                CloudPlusService.prototype.openSendSMS = /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                function (number, content) {
                    window['imp'].iSms.open(number, content);
                };
                /**
                 * @param {?} number
                 * @return {?}
                 */
                CloudPlusService.prototype.tel = /**
                 * @param {?} number
                 * @return {?}
                 */
                function (number) {
                    window['imp'].iTel.dial(number);
                };
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                CloudPlusService.prototype.selectPictureFromAlbum = /**
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    if (options === void 0) { options = { maxNum: 9, mType: 0 }; }
                    /** @type {?} */
                    var defaults = {
                        num: 9,
                        quality: 75,
                        destinationType: 0,
                        encodingType: 1,
                        targetWidth: 600,
                        targetHeight: 600
                    };
                    defaults.num = options.maxNum;
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data.map((/**
                             * @param {?} item
                             * @return {?}
                             */
                            function (item) {
                                return item.originalData;
                            })));
                        }
                    });
                    /** @type {?} */
                    var errorCallback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('selectPictureFromAlbum', data);
                            subject.next([]);
                        }
                    });
                    window['imp'].iCamera.select(__assign({}, defaults, options), callback, errorCallback);
                    return subject;
                };
                /**
                 * @private
                 * @param {?=} options
                 * @return {?}
                 */
                CloudPlusService.prototype.selectFileFromMobile = /**
                 * @private
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                };
                /**
                 * @private
                 * @param {?} path
                 * @return {?}
                 */
                CloudPlusService.prototype.getBase64 = /**
                 * @private
                 * @param {?} path
                 * @return {?}
                 */
                function (path) {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data);
                        }
                    });
                    /** @type {?} */
                    var errorCallback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('getBase64', data);
                            subject.next([]);
                        }
                    });
                    window['imp'].iFile.getBase64(path, callback, errorCallback);
                    return subject;
                };
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                CloudPlusService.prototype.selectFile = /**
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    if (options === void 0) { options = { maximum: 6 }; }
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data && data.length > 0) {
                            /** @type {?} */
                            var paths_1 = [];
                            /** @type {?} */
                            var count_1 = 0;
                            data.forEach((/**
                             * @param {?} dataItem
                             * @return {?}
                             */
                            function (dataItem) {
                                window['imp'].iFile.getBase64(dataItem.path, (/**
                                 * @param {?} bs64
                                 * @return {?}
                                 */
                                function (bs64) {
                                    paths_1.push({
                                        name: data[count_1].name,
                                        size: data[count_1].size,
                                        base64: bs64
                                    });
                                    count_1++;
                                    if (data.length === paths_1.length) {
                                        // 防止触发多次next  一次性把所有数据抛出去
                                        subject.next(paths_1);
                                    }
                                }), (/**
                                 * @param {?} errorMsg
                                 * @return {?}
                                 */
                                function (errorMsg) {
                                    if (errorMsg) {
                                        console.log('getBase64', errorMsg);
                                        subject.next([]);
                                    }
                                }));
                            }));
                        }
                    });
                    /** @type {?} */
                    var errorCallback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('selectFile', data);
                            subject.next([]);
                        }
                    });
                    window['imp'].iFile.select(__assign({}, options), callback, errorCallback);
                    return subject;
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                CloudPlusService.prototype.takeVideo = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    /** @type {?} */
                    var option = { id: options.id };
                    if (options.quality) {
                        if (options.quality <= 0.5) {
                            option['fps'] = 30;
                        }
                        else if (options.quality <= 1) {
                            option['fps'] = 60;
                        }
                    }
                    else {
                        option['fps'] = 30;
                    }
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            subject.next(data);
                        }
                    });
                    /** @type {?} */
                    var errorCallback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data) {
                            console.log('takeVideo', data);
                            subject.next([]);
                        }
                    });
                    window['imp'].iVideo.record(option, callback, errorCallback);
                    return subject;
                };
                /**
                 * @return {?}
                 */
                CloudPlusService.prototype.closeWindow = /**
                 * @return {?}
                 */
                function () {
                    window['imp'].iWindow.close();
                };
                /**
                 * @param {?} title
                 * @return {?}
                 */
                CloudPlusService.prototype.setTitles = /**
                 * @param {?} title
                 * @return {?}
                 */
                function (title) {
                    document.title = title;
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                CloudPlusService.prototype.downloadFile = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var callback = (/**
                     * @param {?} data
                     * @return {?}
                     */
                    function (data) {
                        if (data.status !== 1) {
                            console.log(data);
                        }
                        subject.next(true);
                    });
                    window['imp'].iFile.download(options, callback);
                    return subject;
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                CloudPlusService.prototype.setOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    /** @type {?} */
                    var isAGreaterThanB = (/**
                     * @param {?} parameA
                     * @param {?} parameB
                     * @return {?}
                     */
                    function (parameA, parameB) {
                        /** @type {?} */
                        var length = parameA.length > parameB.length ? parameB.length : parameA.length;
                        for (var i = 0; i < length; i++) {
                            if (parseInt(parameB[i]) > parseInt(parameA[i])) {
                                return false;
                            }
                        }
                        return true;
                    });
                    /** @type {?} */
                    var setFunction = (/**
                     * @return {?}
                     */
                    function () {
                        if (fn) {
                            window['imp'].iWindow.onBackKeyDown2(fn);
                            isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.onTitleBackKeyDown2(fn);
                        }
                        else {
                            window['imp'].iWindow.cancelBackKeyDown();
                            isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.cancelTitleBackKeyDown();
                        }
                    });
                    /** @type {?} */
                    var minVersion = '4.8.21';
                    /** @type {?} */
                    var currentVersion = window['CURRENT_VERSION'];
                    if (currentVersion) {
                        setFunction();
                    }
                    else {
                        window['imp'].iDevice.sysInfo((/**
                         * @param {?} info
                         * @return {?}
                         */
                        function (info) {
                            /** @type {?} */
                            var newVersion = info.appVersion.split('-');
                            window['CURRENT_VERSION'] = newVersion[0];
                            currentVersion = window['CURRENT_VERSION'];
                            setFunction();
                        }));
                    }
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                CloudPlusService.prototype.pushOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    window['OriginGoback'] = window['OriginGoback'] || [];
                    /** @type {?} */
                    var OriginGoback = (/**
                     * @return {?}
                     */
                    function () {
                        /** @type {?} */
                        var gobackFn = window['OriginGoback'].pop();
                        if (gobackFn) {
                            gobackFn();
                        }
                        else {
                            window['imp'].iWindow.cancelBackKeyDown();
                            window['imp'].iWindow.cancelTitleBackKeyDown();
                            history.back();
                        }
                    });
                    if (fn) {
                        window['OriginGoback'].push(fn);
                        window['imp'].iWindow.onBackKeyDown2(OriginGoback);
                        window['imp'].iWindow.onTitleBackKeyDown2(OriginGoback);
                    }
                };
                /**
                 * @return {?}
                 */
                CloudPlusService.prototype.popOriginGoback = /**
                 * @return {?}
                 */
                function () {
                    window['OriginGoback'].pop();
                };
                return CloudPlusService;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/js-bridge-service/js-bridge-strategy-factory.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var JsBridgeStrategyFactory = /** @class */ (function () {
                function JsBridgeStrategyFactory() {
                }
                /**
                 * @return {?}
                 */
                JsBridgeStrategyFactory.prototype.create = /**
                 * @return {?}
                 */
                function () {
                    if (navigator.userAgent.toLowerCase().search('ccwork') !== -1) {
                        window.top['FARRIS_JSBridge'] = '云上协同';
                        return new CCworkService();
                    }
                    else if (navigator.userAgent.toLowerCase().search('emmcloud') !== -1) {
                        window.top['FARRIS_JSBridge'] = '云加';
                        return new CloudPlusService();
                    }
                    else {
                        window.top['FARRIS_JSBridge'] = '浏览器';
                        return new CloudPlusService();
                    }
                };
                return JsBridgeStrategyFactory;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/js-bridge-service/js-bridge-stratege.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var JsBridgeService = exports('JsBridgeService', /** @class */ (function () {
                function JsBridgeService() {
                    this.jsBridgeStrategyFactory = new JsBridgeStrategyFactory();
                    this.init();
                }
                /**
                 * @return {?}
                 */
                JsBridgeService.prototype.getSysInfo = /**
                 * @return {?}
                 */
                function () {
                    return this.getJsBridgeService(this.strategy.getSysInfo);
                };
                /**
                 * @private
                 * @return {?}
                 */
                JsBridgeService.prototype.init = /**
                 * @private
                 * @return {?}
                 */
                function () {
                    this.strategy = this.jsBridgeStrategyFactory.create();
                    window['JsBridgeService'] = this;
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                JsBridgeService.prototype.takePhoto = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    return this.getJsBridgeService(this.strategy.takePhoto, options);
                };
                /**
                 * @return {?}
                 */
                JsBridgeService.prototype.scanQRCode = /**
                 * @return {?}
                 */
                function () {
                    return this.getJsBridgeService(this.strategy.scanQRCode);
                };
                /**
                 * @return {?}
                 */
                JsBridgeService.prototype.getLocation = /**
                 * @return {?}
                 */
                function () {
                    return this.getJsBridgeService(this.strategy.getLocation);
                };
                /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                JsBridgeService.prototype.sendSMS = /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                function (number, content) {
                    return this.getJsBridgeService(this.strategy.sendSMS, number, content);
                };
                /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                JsBridgeService.prototype.openSendSMS = /**
                 * @param {?} number
                 * @param {?} content
                 * @return {?}
                 */
                function (number, content) {
                    return this.getJsBridgeService(this.strategy.openSendSMS, number, content);
                };
                /**
                 * @param {?} number
                 * @return {?}
                 */
                JsBridgeService.prototype.tel = /**
                 * @param {?} number
                 * @return {?}
                 */
                function (number) {
                    return this.getJsBridgeService(this.strategy.tel, number);
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                JsBridgeService.prototype.selectPictureFromAlbum = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    return this.getJsBridgeService(this.strategy.selectPictureFromAlbum, options);
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                JsBridgeService.prototype.takeVideo = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    return this.getJsBridgeService(this.strategy.takeVideo, options);
                };
                /**
                 * @return {?}
                 */
                JsBridgeService.prototype.closeWindow = /**
                 * @return {?}
                 */
                function () {
                    return this.getJsBridgeService(this.strategy.closeWindow);
                };
                /**
                 * @param {?} title
                 * @return {?}
                 */
                JsBridgeService.prototype.setTitles = /**
                 * @param {?} title
                 * @return {?}
                 */
                function (title) {
                    return this.getJsBridgeService(this.strategy.setTitles, title);
                };
                /**
                 * @param {?=} options
                 * @return {?}
                 */
                JsBridgeService.prototype.selectFile = /**
                 * @param {?=} options
                 * @return {?}
                 */
                function (options) {
                    return this.getJsBridgeService(this.strategy.selectFile, options);
                };
                /**
                 * @param {?} options
                 * @return {?}
                 */
                JsBridgeService.prototype.downloadFile = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    return this.getJsBridgeService(this.strategy.downloadFile, options);
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                JsBridgeService.prototype.setOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    return this.getJsBridgeService(this.strategy.setOriginGoback, fn);
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                JsBridgeService.prototype.pushOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    return this.getJsBridgeService(this.strategy.pushOriginGoback, fn);
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                JsBridgeService.prototype.popOriginGoback = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    return this.getJsBridgeService(this.strategy.popOriginGoback, fn);
                };
                /**
                 * @param {?=} fn
                 * @return {?}
                 */
                JsBridgeService.prototype.playShortVideo = /**
                 * @param {?=} fn
                 * @return {?}
                 */
                function (fn) {
                    return this.getJsBridgeService(this.strategy.playShortVideo, fn);
                };
                /**
                 * @private
                 * @param {?} method
                 * @param {...?} values
                 * @return {?}
                 */
                JsBridgeService.prototype.getJsBridgeService = /**
                 * @private
                 * @param {?} method
                 * @param {...?} values
                 * @return {?}
                 */
                function (method) {
                    var values = [];
                    for (var _i = 1; _i < arguments.length; _i++) {
                        values[_i - 1] = arguments[_i];
                    }
                    /** @type {?} */
                    var subject = new Subject();
                    // 已经存在方法实例即结束返回
                    if (window.top['FARRIS_JSBridge'] === '已加载') {
                        return method.apply(void 0, __spread(values));
                    }
                    // 判断是否为云上协同环境
                    if (window.top['FARRIS_JSBridge'] === '云上协同') {
                        if (window.top['iCityBridge']) {
                            return method.apply(void 0, __spread(values));
                        }
                        else {
                            /** @type {?} */
                            var ccwork = window.top.document.createElement("script");
                            ccwork.src = 'https://ccwork.oss.cn-north-3.inspurcloudoss.com/h5/ccworkJsbridge.js';
                            ccwork.onload = (/**
                             * @return {?}
                             */
                            function () {
                                window.top['iCityBridge'].init((/**
                                 * @return {?}
                                 */
                                function () {
                                    method.apply(void 0, __spread(values)).subscribe((/**
                                     * @param {?} e
                                     * @return {?}
                                     */
                                    function (e) { subject.next(e); }));
                                }));
                            });
                            window.top.document.head.appendChild(ccwork);
                        }
                    }
                    // 当前没有针对云+的判断，前置环境不满足即默认云+环境
                    if (window.top['FARRIS_JSBridge'] === '云加') {
                        System
                            .import('/platform/common/web/imp.js')
                            .then((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            window.top['FARRIS_JSBridge'] = '已加载';
                            method.apply(void 0, __spread(values)).subscribe((/**
                             * @param {?} e
                             * @return {?}
                             */
                            function (e) { subject.next(e); }));
                        }));
                    }
                    return subject;
                };
                return JsBridgeService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/js-bridge-service/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/history-back.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 帮助映射服务
             */
            var /**
             * 帮助映射服务
             */
            HistoryBackService = exports('HistoryBackService', /** @class */ (function () {
                function HistoryBackService() {
                }
                /**
                 * @return {?}
                 */
                HistoryBackService.prototype.init = /**
                 * @return {?}
                 */
                function () {
                    window['MOBILE_ORIGIN_BACK_ARRAY'] = window['MOBILE_ORIGIN_BACK_ARRAY'] || [];
                    window['MOBILE_ORIGIN_BACK'] = {
                        pushOriginGoback: /**
                         * @param {?} fn
                         * @return {?}
                         */
                        function (fn) {
                            window['MOBILE_ORIGIN_BACK_ARRAY'].push(fn);
                        },
                        popOriginGoback: /**
                         * @return {?}
                         */
                        function () {
                            window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                        },
                        reflushOriginGoback: /**
                         * @return {?}
                         */
                        function () {
                            window['MOBILE_ORIGIN_BACK_ARRAY'] = [];
                        }
                    };
                };
                /**
                 * @param {?} fn
                 * @return {?}
                 */
                HistoryBackService.prototype.pushOriginGoback = /**
                 * @param {?} fn
                 * @return {?}
                 */
                function (fn) {
                    window['MOBILE_ORIGIN_BACK_ARRAY'].push(fn);
                };
                /**
                 * @return {?}
                 */
                HistoryBackService.prototype.popOriginGoback = /**
                 * @return {?}
                 */
                function () {
                    window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                };
                /**
                 * @return {?}
                 */
                HistoryBackService.prototype.reflushOriginGoback = /**
                 * @return {?}
                 */
                function () {
                    window['MOBILE_ORIGIN_BACK_ARRAY'] = [];
                };
                /**
                 * @return {?}
                 */
                HistoryBackService.prototype.proxyBack = /**
                 * @return {?}
                 */
                function () {
                    if (!(navigator.userAgent.toLowerCase().search('emmcloud') !== -1)) {
                        return;
                    }
                    if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
                        setTimeout((/**
                         * @return {?}
                         */
                        function () {
                            window.top['detailBackBtnClickHandler'] = (/**
                             * @param {?} back
                             * @return {?}
                             */
                            function (back) {
                                /** @type {?} */
                                var gobackFn = window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                                if (gobackFn) {
                                    gobackFn();
                                    return false;
                                }
                                else {
                                    /** @type {?} */
                                    var key = location.pathname + location.hash.slice(0, location.hash.indexOf('?'));
                                    /** @type {?} */
                                    var need_go_back = sessionStorage.getItem(key);
                                    if (!need_go_back) {
                                        return true;
                                    }
                                    history.back();
                                    return false;
                                }
                            });
                        }), 0);
                    }
                    else {
                        /** @type {?} */
                        var _close = (/**
                         * @return {?}
                         */
                        function () {
                            /** @type {?} */
                            var gobackFn = window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                            if (gobackFn) {
                                gobackFn();
                            }
                            else {
                                history.back();
                            }
                        });
                        /** @type {?} */
                        var jsBridgeService = new JsBridgeService();
                        jsBridgeService.setOriginGoback(_close);
                    }
                };
                return HistoryBackService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/command.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /** @type {?} */
            var NOOP = 'noop';
            /**
             * 命令服务
             */
            var /**
             * 命令服务
             */
            CommandService = exports('CommandService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function CommandService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * 执行命令
                 * @param commandName 命令名称
                 * @param viewModelId 视图模型id
                 */
                /**
                 * 执行命令
                 * @param {?} commandName 命令名称
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                CommandService.prototype.execute = /**
                 * 执行命令
                 * @param {?} commandName 命令名称
                 * @param {?=} viewModelId 视图模型id
                 * @return {?}
                 */
                function (commandName, viewModelId) {
                    if (!commandName || commandName === '' || commandName === 'undefined') {
                        return EMPTY;
                    }
                    // 空操作
                    if (commandName.toLocaleLowerCase() === NOOP) {
                        return EMPTY;
                    }
                    /** @type {?} */
                    var viewModel = this.viewModelContext.viewModel;
                    if (viewModelId) {
                        /** @type {?} */
                        var appContext = this.viewModelContext.appContext;
                        /** @type {?} */
                        var targetViewModelContext = appContext.viewModelContextManager.getContextById(viewModelId);
                        viewModel = targetViewModelContext.viewModel;
                    }
                    return viewModel[commandName]();
                };
                return CommandService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/state-machine.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 状态机服务
             */
            var /**
             * 状态机服务
             */
            StateMachineService = exports('StateMachineService', /** @class */ (function () {
                function StateMachineService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * 执行状态迁移动作
                 */
                /**
                 * 执行状态迁移动作
                 * @param {?} action
                 * @return {?}
                 */
                StateMachineService.prototype.executeAction = /**
                 * 执行状态迁移动作
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    if (!action) {
                        return EMPTY;
                    }
                    if (typeof this.viewModelContext.stateMachine[action] !== 'function') {
                        return EMPTY;
                    }
                    this.viewModelContext.stateMachine[action]();
                };
                return StateMachineService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ui-state.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * UI状态机服务
             */
            var /**
             * UI状态机服务
             */
            UIStateService = exports('UIStateService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function UIStateService() {
                }
                return UIStateService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/vo-variable.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * VO变量访问服务
             */
            var /**
             * VO变量访问服务
             */
            VoVariableService = exports('VoVariableService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function VoVariableService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                /**
                 * 设置变量值
                 */
                /**
                 * 设置变量值
                 * @param {?} name
                 * @param {?} value
                 * @return {?}
                 */
                VoVariableService.prototype.setValue = /**
                 * 设置变量值
                 * @param {?} name
                 * @param {?} value
                 * @return {?}
                 */
                function (name, value) {
                    /** @type {?} */
                    var befRepository = (/** @type {?} */ (this.viewModelContext.repository));
                    befRepository.variableManager.setValue(name, value);
                };
                /**
                 * 获取变量值
                 */
                /**
                 * 获取变量值
                 * @param {?} name
                 * @return {?}
                 */
                VoVariableService.prototype.getValue = /**
                 * 获取变量值
                 * @param {?} name
                 * @return {?}
                 */
                function (name) {
                    /** @type {?} */
                    var befRepository = (/** @type {?} */ (this.viewModelContext.repository));
                    befRepository.variableManager.getValue(name);
                };
                return VoVariableService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/attachment-services/attachment.util.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件信息处理工具类
             */
            var /**
             * 附件信息处理工具类
             */
            AttachmentUtil = /** @class */ (function () {
                function AttachmentUtil() {
                }
                /**
                 * 转换为附件信息数组
                 */
                /**
                 * 转换为附件信息数组
                 * @param {?} fileInfos
                 * @return {?}
                 */
                AttachmentUtil.convertToAttachmentInfos = /**
                 * 转换为附件信息数组
                 * @param {?} fileInfos
                 * @return {?}
                 */
                function (fileInfos) {
                    var _this = this;
                    if (!fileInfos) {
                        return [];
                    }
                    /** @type {?} */
                    var attachmentInfos = fileInfos.map((/**
                     * @param {?} fileInfo
                     * @return {?}
                     */
                    function (fileInfo) {
                        return _this.convertToAttachmentInfo(fileInfo);
                    }));
                    return attachmentInfos;
                };
                /**
                 * 转换为附件信息
                 */
                /**
                 * 转换为附件信息
                 * @param {?} fileInfo
                 * @return {?}
                 */
                AttachmentUtil.convertToAttachmentInfo = /**
                 * 转换为附件信息
                 * @param {?} fileInfo
                 * @return {?}
                 */
                function (fileInfo) {
                    /** @type {?} */
                    var attachmentInfo = {
                        attachmentId: fileInfo.metadataId,
                        fileName: fileInfo.fileName
                    };
                    return attachmentInfo;
                };
                /**
                 * 获取附件列表中的第一个附件
                 */
                /**
                 * 获取附件列表中的第一个附件
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                AttachmentUtil.getFirstAttachmentInfo = /**
                 * 获取附件列表中的第一个附件
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (attachmentInfos) {
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var firstAttachmentInfo = attachmentInfos[0];
                    return firstAttachmentInfo;
                };
                /**
                 * 提取附件id数组
                 */
                /**
                 * 提取附件id数组
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                AttachmentUtil.peekAttachmentIds = /**
                 * 提取附件id数组
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (attachmentInfos) {
                    if (!attachmentInfos) {
                        attachmentInfos = [];
                    }
                    /** @type {?} */
                    var attachmentIds = attachmentInfos.map((/**
                     * @param {?} attachmentInfo
                     * @return {?}
                     */
                    function (attachmentInfo) {
                        return attachmentInfo.attachmentId;
                    }));
                    return attachmentIds;
                };
                return AttachmentUtil;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/attachment-services/attachment-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件数据服务
             */
            var /**
             * 附件数据服务
             */
            AttachmentDataService = exports('AttachmentDataService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function AttachmentDataService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                Object.defineProperty(AttachmentDataService.prototype, "befRepository", {
                    /**
                     * 实体仓库
                     */
                    get: /**
                     * 实体仓库
                     * @private
                     * @return {?}
                     */
                    function () {
                        return (/** @type {?} */ (this.viewModelContext.repository));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(AttachmentDataService.prototype, "bindingData", {
                    /**
                     * 绑定数据
                     */
                    get: /**
                     * 绑定数据
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 更新附件信息
                 */
                /**
                 * 更新附件信息
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                AttachmentDataService.prototype.updateRow = /**
                 * 更新附件信息
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    var _this = this;
                    /** @type {?} */
                    var apiProxy = this.befRepository.apiProxy;
                    /** @type {?} */
                    var updateUrl = apiProxy.baseUrl + "/service/updateattachment";
                    /** @type {?} */
                    var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
                    /** @type {?} */
                    var body = {
                        updateAttachInfo: serverAttachInfo
                    };
                    /** @type {?} */
                    var requestConfig = {
                        body: body
                    };
                    console.log('loading show ...');
                    return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        return _this.syncAttachmentInfosToClient();
                    })), tap((/**
                     * @return {?}
                     */
                    function () {
                        console.log('loading hide ...');
                    })));
                };
                /**
                 * 批量创建附件行数据
                 */
                /**
                 * 批量创建附件行数据
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                AttachmentDataService.prototype.updateRows = /**
                 * 批量创建附件行数据
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfos) {
                    var _this = this;
                    /** @type {?} */
                    var apiProxy = this.befRepository.apiProxy;
                    /** @type {?} */
                    var updateUrl = apiProxy.baseUrl + "/service/batchuploadattachment";
                    /** @type {?} */
                    var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
                    /** @type {?} */
                    var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
                    /** @type {?} */
                    var body = {
                        batchUploadInfo: serverAttachInfo
                    };
                    /** @type {?} */
                    var requestConfig = {
                        body: body
                    };
                    console.log('loading show ...');
                    return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        return _this.appendAttachmentInfosToClient(result, isRootEntity);
                    })), tap((/**
                     * @return {?}
                     */
                    function () {
                        console.log('hide loading ...');
                    })));
                };
                /**
                 * 创建服务器端需要的更新信息
                 */
                /**
                 * 创建服务器端需要的更新信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                AttachmentDataService.prototype.createUpdateAttachInfo = /**
                 * 创建服务器端需要的更新信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    /** @type {?} */
                    var attachmentId = attachmentInfo.attachmentId;
                    /** @type {?} */
                    var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    parentBindingPathArray.pop();
                    /** @type {?} */
                    var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var serverAttachInfo = {
                        NodeCodes: nodeCodes,
                        HiretryIds: hiretryIds,
                        AttachmentIds: [attachmentId],
                        AttachmentId: attachmentId
                    };
                    return serverAttachInfo;
                };
                /**
                 * 创建服务器端需要的批量新增附件信息
                 */
                /**
                 * 创建服务器端需要的批量新增附件信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                AttachmentDataService.prototype.createBatchCreateAttachInfo = /**
                 * 创建服务器端需要的批量新增附件信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    /** @type {?} */
                    var attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
                    /** @type {?} */
                    var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    parentBindingPathArray.pop();
                    /** @type {?} */
                    var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var serverAttachInfo = {
                        NodeCodes: nodeCodes,
                        HiretryIds: hiretryIds,
                        AttachmentIds: attachmentIds,
                        AttachmentId: null
                    };
                    return serverAttachInfo;
                };
                /**
                 * 同步服务器端最新信息到客户端
                 * @todo:
                 * 1、主对象批量新增时不支持
                 */
                /**
                 * 同步服务器端最新信息到客户端
                 * \@todo:
                 * 1、主对象批量新增时不支持
                 * @return {?}
                 */
                AttachmentDataService.prototype.syncAttachmentInfosToClient = /**
                 * 同步服务器端最新信息到客户端
                 * \@todo:
                 * 1、主对象批量新增时不支持
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var rootDataId = this.bindingData.list.currentId;
                    return this.befRepository.updateEntityById(rootDataId);
                };
                /**
                 * 追击主表数据到客户端
                 */
                /**
                 * 追击主表数据到客户端
                 * @param {?} listData
                 * @param {?} isRootEntity
                 * @return {?}
                 */
                AttachmentDataService.prototype.appendAttachmentInfosToClient = /**
                 * 追击主表数据到客户端
                 * @param {?} listData
                 * @param {?} isRootEntity
                 * @return {?}
                 */
                function (listData, isRootEntity) {
                    var _this = this;
                    if (isRootEntity === true) {
                        /** @type {?} */
                        var entities = this.befRepository.buildEntities(listData);
                        this.befRepository.entityCollection.addEntities(entities);
                        return of(listData);
                    }
                    else {
                        return this.syncAttachmentInfosToClient().pipe(map((/**
                         * @return {?}
                         */
                        function () {
                            _this.befRepository.dataChangeHistory.addChange({ dataId: listData[0].id, changeType: DataChangeType.Add });
                            return listData;
                        })));
                    }
                };
                return AttachmentDataService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/attachment-services/attachment.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件服务
             */
            var /**
             * 附件服务
             */
            AttachmentService = exports('AttachmentService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function AttachmentService(viewModelContext, entityService, removeDataService, attachDataService) {
                    /**
                     * 默认根目录
                     */
                    this.defaultRootDirId = 'default-root';
                    this.viewModelContext = viewModelContext;
                    this.attachDataService = attachDataService;
                    this.entityService = entityService;
                    this.removeDataService = removeDataService;
                }
                Object.defineProperty(AttachmentService.prototype, "defaultParentDirName", {
                    /**
                     * 默认子目录
                     */
                    get: /**
                     * 默认子目录
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData.list.currentId;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 上传单个文件
                 * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
                 * @param attachmentNamePath 附件名称字段的路径
                 */
                /**
                 * 上传单个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                AttachmentService.prototype.uploadAndUpdateRow = /**
                 * 上传单个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, rootDirId, parentDirName) {
                    /** @type {?} */
                    var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
                    /** @type {?} */
                    var formId = parentDirName ? parentDirName : this.defaultParentDirName;
                    if (!rootId || !formId) {
                        throw new Error('rootDirId和parentDirName不能为空，请填写');
                    }
                    /** @type {?} */
                    var fileInfos = this.getUploadFileInfosFromContext();
                    /** @type {?} */
                    var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        alert('请先上传附件');
                        return EMPTY;
                    }
                    // 更新服务器端
                    console.log('show loading ...');
                    /** @type {?} */
                    var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
                    /** @type {?} */
                    var result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        console.log('hide loading ...');
                    })));
                    return result$;
                };
                /**
                 * 上传多个文件
                 */
                /**
                 * 上传多个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                AttachmentService.prototype.uploadAndBatchAddRows = /**
                 * 上传多个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, rootDirId, parentDirName) {
                    /** @type {?} */
                    var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
                    /** @type {?} */
                    var formId = parentDirName ? parentDirName : this.defaultParentDirName;
                    if (!rootId || !formId) {
                        throw new Error('rootDirId和parentDirName不能为空，请填写');
                    }
                    /** @type {?} */
                    var fileInfos = this.getUploadFileInfosFromContext();
                    /** @type {?} */
                    var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        alert('请先上传附件');
                        return EMPTY;
                    }
                    // 更新服务器端
                    console.log('show loading ...');
                    /** @type {?} */
                    var result$ = this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos).pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        console.log('hide loading ...');
                    })));
                    return result$;
                };
                /**
                 * 批量删除附件所在的行
                 */
                /**
                 * 批量删除附件所在的行
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                AttachmentService.prototype.removeAttachmentRows = /**
                 * 批量删除附件所在的行
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (attachmentInfoFieldPath) {
                    var _this = this;
                    if (!attachmentInfoFieldPath) {
                        return EMPTY;
                    }
                    /** @type {?} */
                    var dataIds = this.getDataIdsToRemove(attachmentInfoFieldPath);
                    //如果是主表
                    if (attachmentInfoFieldPath.split('/').length <= 2) {
                        return this.removeDataService.removeByIds(dataIds);
                    }
                    // 如果是子表
                    else {
                        /** @type {?} */
                        var removeObservables_1 = [];
                        if (dataIds.length === 0) {
                            alert('请选择要删除的文件');
                        }
                        /** @type {?} */
                        var bindingListPath_1 = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
                        dataIds.forEach((/**
                         * @param {?} dataId
                         * @return {?}
                         */
                        function (dataId) {
                            /** @type {?} */
                            var removeObservable = _this.removeDataService.removeByPathAndId(bindingListPath_1, dataId);
                            removeObservables_1.push(removeObservable);
                        }));
                        return forkJoin(removeObservables_1);
                    }
                };
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 */
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 * @private
                 * @return {?}
                 */
                AttachmentService.prototype.getUploadFileInfosFromContext = 
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 * @private
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    /** @type {?} */
                    var uploadFileInfos = (/** @type {?} */ (commandContext.eventParams));
                    if (!uploadFileInfos) {
                        return [];
                    }
                    return uploadFileInfos;
                };
                /**
                 * 获取要删除的附件对应的数据id数组
                 */
                /**
                 * 获取要删除的附件对应的数据id数组
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                AttachmentService.prototype.getDataIdsToRemove = /**
                 * 获取要删除的附件对应的数据id数组
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (attachmentInfoFieldPath) {
                    var _this = this;
                    /** @type {?} */
                    var attachIds = this.getAttachmentIdsToRemoveFromContext();
                    /** @type {?} */
                    var dataIds = [];
                    attachIds.forEach((/**
                     * @param {?} attachId
                     * @return {?}
                     */
                    function (attachId) {
                        // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
                        /** @type {?} */
                        var dataId = _this.convertAttachmentIdToDataId(attachId, attachmentInfoFieldPath);
                        dataIds.push(dataId);
                    }));
                    return dataIds;
                };
                /**
                 * 从命令上下文中获取要删除附件ids
                 */
                /**
                 * 从命令上下文中获取要删除附件ids
                 * @return {?}
                 */
                AttachmentService.prototype.getAttachmentIdsToRemoveFromContext = /**
                 * 从命令上下文中获取要删除附件ids
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    return (/** @type {?} */ (commandContext.eventParams));
                };
                /**
                 * 根据路径获取附件字段值数组
                 * @param fieldPath 字段路径
                 */
                /**
                 * 根据路径获取附件字段值数组
                 * @private
                 * @param {?} fileId
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                AttachmentService.prototype.convertAttachmentIdToDataId = /**
                 * 根据路径获取附件字段值数组
                 * @private
                 * @param {?} fileId
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (fileId, attachmentInfoFieldPath) {
                    // 解析路径
                    /** @type {?} */
                    var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    /** @type {?} */
                    var attachFieldName = attachInfoBindingPath.pop();
                    /** @type {?} */
                    var attachListBindingPath = attachInfoBindingPath;
                    // 获取附件id数组
                    /** @type {?} */
                    var entityListData = this.entityService.getEntityListData(attachListBindingPath);
                    /** @type {?} */
                    var targetEntityData = entityListData.find((/**
                     * @param {?} entityData
                     * @return {?}
                     */
                    function (entityData) {
                        if (entityData[attachFieldName]) {
                            /** @type {?} */
                            var attachmentId = entityData[attachFieldName]['attachmentId'];
                            if (attachmentId === fileId) {
                                return true;
                            }
                        }
                    }));
                    return targetEntityData.id;
                };
                /**
                 * 获取带附件的BindingList的Path
                 */
                /**
                 * 获取带附件的BindingList的Path
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                AttachmentService.prototype.getBindingListPathWithAttachments = /**
                 * 获取带附件的BindingList的Path
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (attachmentInfoFieldPath) {
                    /** @type {?} */
                    var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    attachInfoBindingPath.pop();
                    /** @type {?} */
                    var bindingListPath = attachInfoBindingPath;
                    return '/' + bindingListPath.join('/');
                };
                return AttachmentService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/attachment-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ccwork-service/ccwork.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var CcWorkService = exports('CcWorkService', /** @class */ (function () {
                // public location$ = new Subject();
                function CcWorkService() {
                }
                /**
                 * 云上协同关闭页面
                 */
                /**
                 * 云上协同关闭页面
                 * @return {?}
                 */
                CcWorkService.prototype.closeCcWorkWebView = /**
                 * 云上协同关闭页面
                 * @return {?}
                 */
                function () {
                    window['iCityBridge'].closeWebView();
                };
                /**
                 * 云上协同隐藏标题栏
                 */
                /**
                 * 云上协同隐藏标题栏
                 * @return {?}
                 */
                CcWorkService.prototype.hideCcWorkNaviBar = /**
                 * 云上协同隐藏标题栏
                 * @return {?}
                 */
                function () {
                    window['iCityBridge'].hideTitleBar();
                };
                /**
                 *  云上协同更改标题栏
                 */
                /**
                 *  云上协同更改标题栏
                 * @param {?} title
                 * @return {?}
                 */
                CcWorkService.prototype.setTitle = /**
                 *  云上协同更改标题栏
                 * @param {?} title
                 * @return {?}
                 */
                function (title) {
                    window['iCityBridge'].setTitle(title);
                };
                /**
                 * 获取当前位置
                 * @param callBack(data) 回调函数
                 */
                /**
                 * 获取当前位置
                 * @param {?} callBack
                 * @return {?}
                 */
                CcWorkService.prototype.getLocation = /**
                 * 获取当前位置
                 * @param {?} callBack
                 * @return {?}
                 */
                function (callBack) {
                    if (window['iCityBridge']) {
                        window['iCityBridge'].ccworkGetLocation(callBack);
                    }
                };
                /**
                 * 获取二维码
                 * @param callBack(data) 回调函数
                 * @param params 配置项
                 */
                /**
                 * 获取二维码
                 * @param {?} callBack
                 * @param {?=} params 配置项
                 * @return {?}
                 */
                CcWorkService.prototype.scanCode = /**
                 * 获取二维码
                 * @param {?} callBack
                 * @param {?=} params 配置项
                 * @return {?}
                 */
                function (callBack, params) {
                    if (params === void 0) { params = {}; }
                    if (window['iCityBridge']) {
                        /** @type {?} */
                        var paramsObj = __assign({ filters: [
                                'QR', 'EAN13', 'EAN8'
                            ], path: '' }, params);
                        window['iCityBridge'].ccworkScanCode(paramsObj, callBack);
                    }
                };
                /**
                 * 云上协同调用拨号
                 * @param phoneNumber 手机号
                 * @param callBack(data) 回调函数
                 */
                /**
                 * 云上协同调用拨号
                 * @param {?} phoneNumber 手机号
                 * @param {?} callback
                 * @return {?}
                 */
                CcWorkService.prototype.callPhone = /**
                 * 云上协同调用拨号
                 * @param {?} phoneNumber 手机号
                 * @param {?} callback
                 * @return {?}
                 */
                function (phoneNumber, callback) {
                    if (window['iCityBridge']) {
                        /** @type {?} */
                        var params = {
                            number: phoneNumber
                        };
                        window['iCityBridge'].ccworkCallPhone(params, callback);
                    }
                };
                /**
                 * 从相机和相册中获取照片
                 * @param params
                 * @param callback
                 */
                /**
                 * 从相机和相册中获取照片
                 * @param {?} params
                 * @param {?} callback
                 * @return {?}
                 */
                CcWorkService.prototype.getPicsFromCameraAndAlbum = /**
                 * 从相机和相册中获取照片
                 * @param {?} params
                 * @param {?} callback
                 * @return {?}
                 */
                function (params, callback) {
                    if (window['iCityBridge']) {
                        window['iCityBridge'].ccworkGetPicsFromCameraAndAlbum(params, callback);
                    }
                };
                return CcWorkService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/ccwork-service/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/map-services/map.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var MapService = function (v) { return exports({ MapService: v, ɵf: v }), v; }(/** @class */ (function () {
                function MapService() {
                }
                /**
                 * @param {?} options
                 * @return {?}
                 */
                MapService.prototype.getStaticMap = /**
                 * @param {?} options
                 * @return {?}
                 */
                function (options) {
                    if (!options) {
                        return;
                    }
                    // location是必填的
                    if (!options.location) {
                        return;
                    }
                    if (!options.key) {
                        // 默认key
                        options.key = 'e01c849062d312e0cbeb2beb1f28ef71';
                    }
                    if (!options.zoom) {
                        options.zoom = 10;
                    }
                    if (!options.size) {
                        options.size = {
                            width: 400,
                            height: 400
                        };
                    }
                    /** @type {?} */
                    var markers = options.markers;
                    /** @type {?} */
                    var markersStr = '';
                    if (markers && markers.length) {
                        // 地图标记
                        markersStr = markers.reduce((/**
                         * @param {?} total
                         * @param {?} next
                         * @param {?} index
                         * @return {?}
                         */
                        function (total, next, index) {
                            total += (next.longtitude + ',' + next.latitude + ';');
                            return total;
                        }), '');
                        if (!options.markerSize) {
                            options.markerSize = 'mid';
                        }
                        if (!options.markerColor) {
                            /* 默认红色 */
                            options.markerColor = '';
                        }
                        if (markersStr) {
                            markersStr = "&markers=" + options.markerSize + "," + options.markerColor + ",A:" + markersStr.substring(0, markersStr.length - 1);
                        }
                    }
                    /** @type {?} */
                    var longitude = options.location.longtitude;
                    /** @type {?} */
                    var latitude = options.location.latitude;
                    // 处理location的小数点后几位  最长保留6位
                    /** @type {?} */
                    var longitudeStr = longitude.toString();
                    /** @type {?} */
                    var latitudeStr = latitude.toString();
                    if (longitudeStr.substring(longitudeStr.indexOf('.') + 1).length > 6) {
                        longitude = longitude.toFixed(6);
                    }
                    if (latitudeStr.substring(latitudeStr.indexOf('.') + 1).length > 6) {
                        latitude = latitude.toFixed(6);
                    }
                    return 'https://restapi.amap.com/v3/staticmap' +
                        '?location=' + longitude + ',' + latitude +
                        '&zoom=' + options.zoom +
                        '&size=' + options.size.width + '*' + options.size.height +
                        markersStr +
                        '&key=' + options.key;
                };
                return MapService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/business-attachment-services/business-attachment.util.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件信息处理工具类
             */
            var /**
             * 附件信息处理工具类
             */
            AttachmentUtil$1 = /** @class */ (function () {
                function AttachmentUtil() {
                }
                /**
                 * 转换为附件信息数组
                 */
                /**
                 * 转换为附件信息数组
                 * @param {?} fileInfos
                 * @return {?}
                 */
                AttachmentUtil.convertToAttachmentInfos = /**
                 * 转换为附件信息数组
                 * @param {?} fileInfos
                 * @return {?}
                 */
                function (fileInfos) {
                    var _this = this;
                    if (!fileInfos) {
                        return [];
                    }
                    /** @type {?} */
                    var attachmentInfos = fileInfos.map((/**
                     * @param {?} fileInfo
                     * @return {?}
                     */
                    function (fileInfo) {
                        return _this.convertToAttachmentInfo(fileInfo);
                    }));
                    return attachmentInfos;
                };
                /**
                 * 转换为附件信息
                 */
                /**
                 * 转换为附件信息
                 * @param {?} fileInfo
                 * @return {?}
                 */
                AttachmentUtil.convertToAttachmentInfo = /**
                 * 转换为附件信息
                 * @param {?} fileInfo
                 * @return {?}
                 */
                function (fileInfo) {
                    /** @type {?} */
                    var attachmentInfo = {
                        attachmentId: fileInfo.metadataId,
                        fileName: fileInfo.fileName
                    };
                    return attachmentInfo;
                };
                /**
                 * 获取附件列表中的第一个附件
                 */
                /**
                 * 获取附件列表中的第一个附件
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                AttachmentUtil.getFirstAttachmentInfo = /**
                 * 获取附件列表中的第一个附件
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (attachmentInfos) {
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        return;
                    }
                    /** @type {?} */
                    var firstBusinessAttachmentInfo = attachmentInfos[0];
                    return firstBusinessAttachmentInfo;
                };
                /**
                 * 提取附件id数组
                 */
                /**
                 * 提取附件id数组
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                AttachmentUtil.peekAttachmentIds = /**
                 * 提取附件id数组
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (attachmentInfos) {
                    if (!attachmentInfos) {
                        attachmentInfos = [];
                    }
                    /** @type {?} */
                    var attachmentIds = attachmentInfos.map((/**
                     * @param {?} attachmentInfo
                     * @return {?}
                     */
                    function (attachmentInfo) {
                        return attachmentInfo.attachmentId;
                    }));
                    return attachmentIds;
                };
                /**
                 * 批量获取变更
                 */
                /**
                 * 批量获取变更
                 * @param {?} oldListData
                 * @param {?} newListData
                 * @return {?}
                 */
                AttachmentUtil.getChangeDetails = /**
                 * 批量获取变更
                 * @param {?} oldListData
                 * @param {?} newListData
                 * @return {?}
                 */
                function (oldListData, newListData) {
                    var _this = this;
                    /** @type {?} */
                    var changeDetails = [];
                    newListData.forEach((/**
                     * @param {?} newData
                     * @return {?}
                     */
                    function (newData) {
                        /** @type {?} */
                        var oldData = oldListData.find((/**
                         * @param {?} oldData
                         * @return {?}
                         */
                        function (oldData) {
                            return oldData['id'] === newData['id'];
                        }));
                        if (!oldData) {
                            oldData = {};
                        }
                        /** @type {?} */
                        var changeDetail = _this.getChangeDetail(oldData, newData);
                        if (changeDetail) {
                            changeDetails.push(changeDetail);
                        }
                    }));
                    return changeDetails;
                };
                /**
                 * 获取变更集
                 */
                /**
                 * 获取变更集
                 * @param {?} oldData
                 * @param {?} newData
                 * @return {?}
                 */
                AttachmentUtil.getChangeDetail = /**
                 * 获取变更集
                 * @param {?} oldData
                 * @param {?} newData
                 * @return {?}
                 */
                function (oldData, newData) {
                    /** @type {?} */
                    var changeDetail = {
                        ChangeType: ChangeDetailType.Modify,
                        ChangeInfo: {
                            DataId: newData['id']
                        }
                    };
                    /** @type {?} */
                    var isChanged = false;
                    Object.keys(newData).forEach((/**
                     * @param {?} propName
                     * @return {?}
                     */
                    function (propName) {
                        // 移除不必要的属性的比较
                        if (propName === 'id' || propName === 'nodeCode' || propName === 'childs') {
                            return;
                        }
                        /** @type {?} */
                        var oldValue = oldData[propName];
                        /** @type {?} */
                        var newValue = newData[propName];
                        if (oldValue === undefined && typeof newValue === 'object') {
                            return;
                        }
                        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
                            changeDetail.ChangeInfo[propName] = newValue;
                            isChanged = true;
                        }
                    }));
                    return isChanged ? changeDetail : null;
                };
                return AttachmentUtil;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/business-attachment-services/business-attachment-data.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件数据服务
             */
            var /**
             * 附件数据服务
             */
            BusinessAttachmentDataService = exports('BusinessAttachmentDataService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function BusinessAttachmentDataService(viewModelContext) {
                    this.viewModelContext = viewModelContext;
                }
                Object.defineProperty(BusinessAttachmentDataService.prototype, "befReposi", {
                    /**
                     * 实体仓库
                     */
                    get: /**
                     * 实体仓库
                     * @return {?}
                     */
                    function () {
                        return (/** @type {?} */ (this.viewModelContext.repository));
                    },
                    enumerable: true,
                    configurable: true
                });
                Object.defineProperty(BusinessAttachmentDataService.prototype, "bindingData", {
                    /**
                     * 绑定数据
                     */
                    get: /**
                     * 绑定数据
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.getAllBeSessions = /**
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var beSessionsJson = window.sessionStorage.getItem("BE_SESSION_ID");
                    if (!beSessionsJson) {
                        return {};
                    }
                    /** @type {?} */
                    var frmSessionId = this.getUserSessionId();
                    /** @type {?} */
                    var beSessions = JSON.parse(beSessionsJson);
                    /** @type {?} */
                    var beSessionKey = frmSessionId + "_/api/gsp/common/v1.0/testForm_mfrm";
                    return beSessions[beSessionKey];
                };
                /**
                 * 获取用户SessionId
                 */
                /**
                 * 获取用户SessionId
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.getUserSessionId = /**
                 * 获取用户SessionId
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var userSessionId = window.localStorage.getItem("sessionId");
                    return userSessionId;
                };
                /**
                 * 扩展BeSessionId相关头信息
                 */
                /**
                 * 扩展BeSessionId相关头信息
                 * @param {?} headers
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.handleRequestHeaders = /**
                 * 扩展BeSessionId相关头信息
                 * @param {?} headers
                 * @return {?}
                 */
                function (headers) {
                    /** @type {?} */
                    var frmSessionId = this.getUserSessionId();
                    /** @type {?} */
                    var beSessionId = this.getAllBeSessions();
                    if (frmSessionId) {
                        headers = HttpUtil$1.appendHeader(headers, "X-CAF-Runtime-CommonVariable", frmSessionId);
                    }
                    if (beSessionId) {
                        headers = HttpUtil$1.appendHeader(headers, "X-CAF-Runtime-Context", beSessionId);
                        headers = HttpUtil$1.appendHeader(headers, "SessionId", beSessionId);
                    }
                    headers = HttpUtil$1.appendHeader(headers, 'Content-Type', 'application/json');
                    return headers;
                };
                /**
                 * @param {?} url
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.extendQueryData = /**
                 * @param {?} url
                 * @return {?}
                 */
                function (url) {
                    /** @type {?} */
                    var entityFilter = {
                        FilterConditions: [],
                        SortConditions: [],
                        IsUsePagination: false,
                        Pagination: {
                            PageIndex: 1,
                            PageSize: 5,
                            PageCount: 0,
                            TotalCount: 0
                        }
                    };
                    /** @type {?} */
                    var entityFilterString = JSON.stringify(entityFilter);
                    /** @type {?} */
                    var params = {
                        entityFilter: entityFilterString
                    };
                    // const url = `/api/gsp/common/v1.0/attachmentform_mfrm/extension/query`;
                    // 拓展header
                    // const headers = this.handleRequestHeaders({});
                    // 拓展body
                    /** @type {?} */
                    var requestConfig = { params: params };
                    return this.befReposi.apiProxy.request(HttpMethods.PUT, url, requestConfig);
                };
                /**
                 * 更新附件信息
                 */
                /**
                 * 更新附件信息
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.updateRow = /**
                 * 更新附件信息
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    /** @type {?} */
                    var apiProxy = this.befReposi.apiProxy;
                    /** @type {?} */
                    var updateUrl = apiProxy.baseUrl + "/service/updateattachment";
                    /** @type {?} */
                    var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
                    /** @type {?} */
                    var body = {
                        updateAttachInfo: serverAttachInfo
                    };
                    /** @type {?} */
                    var requestConfig = {
                        body: body
                    };
                    return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig);
                };
                /**
                 * 批量创建附件行数据
                 */
                /**
                 * 批量创建附件行数据
                 * @param {?} updateUrl
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.updateRows = /**
                 * 批量创建附件行数据
                 * @param {?} updateUrl
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfos
                 * @return {?}
                 */
                function (updateUrl, attachmentInfoFieldPath, attachmentInfos) {
                    /** @type {?} */
                    var apiProxy = this.befReposi.apiProxy;
                    // const updateUrl = `${apiProxy.baseUrl}/service/batchuploadattachment`;
                    /** @type {?} */
                    var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
                    /** @type {?} */
                    serverAttachInfo.NodeCodes.length === 0;
                    /** @type {?} */
                    var body = {
                        batchUploadInfo: serverAttachInfo
                    };
                    /** @type {?} */
                    var requestConfig = {
                        body: body
                    };
                    return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig, true);
                };
                /**
                 * 创建服务器端需要的更新信息
                 */
                /**
                 * 创建服务器端需要的更新信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.createUpdateAttachInfo = /**
                 * 创建服务器端需要的更新信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    /** @type {?} */
                    var attachmentId = attachmentInfo.attachmentId;
                    /** @type {?} */
                    var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    parentBindingPathArray.pop();
                    /** @type {?} */
                    var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var serverAttachInfo = {
                        NodeCodes: nodeCodes,
                        HiretryIds: hiretryIds,
                        AttachmentIds: [attachmentId],
                        AttachmentId: attachmentId
                    };
                    return serverAttachInfo;
                };
                /**
                 * 创建服务器端需要的批量新增附件信息
                 */
                /**
                 * 创建服务器端需要的批量新增附件信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.createBatchCreateAttachInfo = /**
                 * 创建服务器端需要的批量新增附件信息
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @param {?} attachmentInfo
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, attachmentInfo) {
                    /** @type {?} */
                    var attachmentIds = AttachmentUtil$1.peekAttachmentIds(attachmentInfo);
                    /** @type {?} */
                    var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    parentBindingPathArray.pop();
                    /** @type {?} */
                    var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
                    /** @type {?} */
                    var serverAttachInfo = {
                        NodeCodes: nodeCodes,
                        HiretryIds: hiretryIds,
                        AttachmentIds: attachmentIds,
                        AttachmentId: null
                    };
                    return serverAttachInfo;
                };
                /**
                 * 同步服务器端最新信息到客户端
                 * @todo:
                 * 1、主对象批量新增时不支持
                 */
                /**
                 * 同步服务器端最新信息到客户端
                 * \@todo:
                 * 1、主对象批量新增时不支持
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.syncAttachmentInfosToClient = /**
                 * 同步服务器端最新信息到客户端
                 * \@todo:
                 * 1、主对象批量新增时不支持
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var rootDataId = this.bindingData.list.currentId;
                    return this.befReposi.updateEntityById(rootDataId);
                };
                /**
                 * 追击主表数据到客户端
                 */
                /**
                 * 追击主表数据到客户端
                 * @param {?} listData
                 * @param {?} isRootEntity
                 * @return {?}
                 */
                BusinessAttachmentDataService.prototype.appendAttachmentInfosToClient = /**
                 * 追击主表数据到客户端
                 * @param {?} listData
                 * @param {?} isRootEntity
                 * @return {?}
                 */
                function (listData, isRootEntity) {
                    if (isRootEntity === true) {
                        /** @type {?} */
                        var entities = this.befReposi.buildEntities(listData);
                        this.befReposi.entityCollection.addEntities(entities);
                        return of(listData);
                    }
                    else {
                        return this.syncAttachmentInfosToClient().pipe(map((/**
                         * @return {?}
                         */
                        function () {
                            return listData;
                        })));
                    }
                };
                return BusinessAttachmentDataService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/business-attachment-services/business-attachment.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 附件服务
             */
            var /**
             * 附件服务
             */
            BusinessAttachmentService = exports('BusinessAttachmentService', /** @class */ (function () {
                /**
                 * 构造函数
                 */
                function BusinessAttachmentService(viewModelContext, entityService, removeDataService, attachDataService) {
                    /**
                     * 默认根目录
                     */
                    this.defaultRootDirId = 'default-root';
                    this.viewModelContext = viewModelContext;
                    this.attachDataService = attachDataService;
                    this.entityService = entityService;
                    this.removeDataService = removeDataService;
                }
                Object.defineProperty(BusinessAttachmentService.prototype, "defaultParentDirName", {
                    /**
                     * 默认子目录
                     */
                    get: /**
                     * 默认子目录
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this.viewModelContext.bindingData.list.currentId;
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 * 获取列表数据
                 */
                /**
                 * 获取列表数据
                 * @param {?} url
                 * @param {?} filters
                 * @param {?} sorts
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.loadAttachmentRows = /**
                 * 获取列表数据
                 * @param {?} url
                 * @param {?} filters
                 * @param {?} sorts
                 * @return {?}
                 */
                function (url, filters, sorts) {
                    /** @type {?} */
                    var attachContext = this.getAttachContext();
                    /** @type {?} */
                    var befRepository = ((/** @type {?} */ (this.viewModelContext.repository)));
                    /** @type {?} */
                    var sessionService = befRepository.sessionService;
                    /** @type {?} */
                    var apiProxy = befRepository.apiProxy;
                    // 组织params
                    /** @type {?} */
                    var params = {};
                    if (typeof filters === 'string') {
                        filters = JSON.parse(filters);
                    }
                    if (typeof sorts === 'string') {
                        sorts = JSON.parse(sorts);
                    }
                    /** @type {?} */
                    var entityFilter = {
                        FilterConditions: filters || null,
                        SortConditions: sorts || null,
                        IsUsePagination: false,
                        Pagination: {
                            PageIndex: 1,
                            PageSize: 0,
                            PageCount: 0,
                            TotalCount: 0
                        }
                    };
                    /** @type {?} */
                    var entityFilterString = JSON.stringify(entityFilter);
                    params.entityFilter = entityFilterString;
                    // 组织body
                    /** @type {?} */
                    var body = {
                        dataChange: [],
                        variableChange: null
                    }
                    // 赋值be的url
                    ;
                    // 赋值be的url
                    befRepository.apiProxy.setAssociatedUrl(url);
                    return this.waitForBeSession().pipe(switchMap((/**
                     * @return {?}
                     */
                    function () {
                        url = url + "/extension/query";
                        /** @type {?} */
                        var requestConfig = {
                            headers: sessionService.extendRequestHeaders({}),
                            params: params,
                            body: body
                        };
                        /** @type {?} */
                        var query$ = apiProxy.httpClient.request(HttpMethods.PUT, url, requestConfig).pipe(map((/**
                         * @param {?} result
                         * @return {?}
                         */
                        function (result) {
                            /** @type {?} */
                            var attachListData = result.returnValue.result;
                            // 赋值当前所有数据
                            attachContext.setData(JSON.parse(JSON.stringify(attachListData)));
                            // 赋值缓存起来
                            attachContext.updateData(JSON.parse(JSON.stringify(attachListData)));
                            return attachListData;
                        })));
                        return query$;
                    })));
                };
                /**
                 * @private
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.waitForBeSession = /**
                 * @private
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var befRepository = (/** @type {?} */ (this.viewModelContext.repository));
                    /** @type {?} */
                    var sessionService = befRepository.sessionService;
                    return sessionService.getBeSessionExisted().pipe(filter((/**
                     * @param {?} beSessionExisted
                     * @return {?}
                     */
                    function (beSessionExisted) {
                        return beSessionExisted === true;
                    })), take(1));
                };
                /**
                 * 同步变更
                 */
                /**
                 * 同步变更
                 * @param {?} url
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.syncAttachmentRowChanges = /**
                 * 同步变更
                 * @param {?} url
                 * @return {?}
                 */
                function (url) {
                    /** @type {?} */
                    var attachContext = this.getAttachContext() || {};
                    /** @type {?} */
                    var changeDetails = AttachmentUtil$1.getChangeDetails(attachContext.oldListData, attachContext.listData);
                    if (!changeDetails || changeDetails.length === 0) {
                        return of(false);
                    }
                    /** @type {?} */
                    var changedRowId = changeDetails[0].ChangeInfo.DataId;
                    /** @type {?} */
                    var requestInfo = {
                        dataChange: changeDetails,
                        variableChange: null
                    };
                    /** @type {?} */
                    var requestConfig = {
                        body: requestInfo
                    };
                    /** @type {?} */
                    var apiProxy = ((/** @type {?} */ (this.viewModelContext.repository))).apiProxy;
                    url = url + "/extension/retrieve/" + changedRowId;
                    return apiProxy.request(HttpMethods.PUT, url, requestConfig, true).pipe(map((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        /** @type {?} */
                        var context = attachContext.context;
                        /** @type {?} */
                        var data = context.getData();
                        // goBack之后  更新缓存后的值
                        context.updateData(JSON.parse(JSON.stringify(data)));
                        return e;
                    })));
                };
                /**
                 * 上传单个文件
                 * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
                 * @param attachmentNamePath 附件名称字段的路径
                 */
                /**
                 * 上传单个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.uploadAndUpdateRow = /**
                 * 上传单个文件
                 * @param {?} attachmentInfoFieldPath
                 * @param {?=} rootDirId
                 * @param {?=} parentDirName
                 * @return {?}
                 */
                function (attachmentInfoFieldPath, rootDirId, parentDirName) {
                    /** @type {?} */
                    var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
                    /** @type {?} */
                    var formId = parentDirName ? parentDirName : this.defaultParentDirName;
                    if (!rootId || !formId) {
                        throw new Error('rootDirId和parentDirName不能为空，请填写');
                    }
                    /** @type {?} */
                    var fileInfos = this.getUploadFileInfosFromContext();
                    /** @type {?} */
                    var attachmentInfos = AttachmentUtil$1.convertToAttachmentInfos(fileInfos);
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        alert('请先上传附件');
                        return EMPTY;
                    }
                    // 更新服务器端
                    console.log('show loading ...');
                    /** @type {?} */
                    var firstAttachmentInfo = AttachmentUtil$1.getFirstAttachmentInfo(attachmentInfos);
                    /** @type {?} */
                    var result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        console.log('hide loading ...');
                    })));
                    return result$;
                };
                /**
                 * 上传多个文件
                 */
                /**
                 * 上传多个文件
                 * @param {?} url
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.uploadAndBatchAddRows = /**
                 * 上传多个文件
                 * @param {?} url
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (url, attachmentInfoFieldPath) {
                    var _this = this;
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    // 附件相关信息
                    /** @type {?} */
                    var rootDirId = commandContext.eventParams.rootId;
                    /** @type {?} */
                    var parentDirName = commandContext.eventParams.parentDirName;
                    /** @type {?} */
                    var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
                    /** @type {?} */
                    var formId = parentDirName ? parentDirName : this.defaultParentDirName;
                    if (!rootId || !formId) {
                        throw new Error('rootDirId和parentDirName不能为空，请填写');
                    }
                    /** @type {?} */
                    var context = commandContext.eventParams.context;
                    /** @type {?} */
                    var fileInfos = this.getUploadFileInfosFromContext();
                    /** @type {?} */
                    var attachmentInfos = AttachmentUtil$1.convertToAttachmentInfos(fileInfos);
                    if (!attachmentInfos || attachmentInfos.length === 0) {
                        alert('请先上传附件');
                        return EMPTY;
                    }
                    // 更新服务器端
                    /** @type {?} */
                    var uploadUrl = url + "/service/batchuploadattachment";
                    return this.attachDataService.updateRows(uploadUrl, attachmentInfoFieldPath, attachmentInfos).pipe(map((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        // 追加数据
                        context.appendData(e);
                        /** @type {?} */
                        var dataIds = _this.getDataIdsToRemove(context, attachmentInfoFieldPath);
                        dataIds.forEach((/**
                         * @param {?} dataId
                         * @return {?}
                         */
                        function (dataId) {
                            // 添加标记
                            _this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Add });
                        }));
                        return e;
                    })));
                };
                /**
                 * 批量删除附件所在的行
                 */
                /**
                 * 批量删除附件所在的行
                 * @param {?} url
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.removeAttachmentRows = /**
                 * 批量删除附件所在的行
                 * @param {?} url
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (url, attachmentInfoFieldPath) {
                    var _this = this;
                    /** @type {?} */
                    var context = this['context'].eventParams.context;
                    if (!attachmentInfoFieldPath) {
                        return EMPTY;
                    }
                    /** @type {?} */
                    var dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
                    // 如果是主表
                    if (attachmentInfoFieldPath.split('/').length <= 2) {
                        /** @type {?} */
                        var removeUrl = url + "/extension/batchdelete";
                        return this.removeDataService.removeByBusinessIds(removeUrl, dataIds).pipe(map((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            dataIds.forEach((/**
                             * @param {?} dataId
                             * @return {?}
                             */
                            function (dataId) {
                                context.removeDataById(dataId);
                                // 添加标记
                                _this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Delete });
                            }));
                        })));
                    }
                    else {
                        // 如果是子表
                        /** @type {?} */
                        var removeObservables_1 = [];
                        if (dataIds.length === 0) {
                            alert('请选择要删除的文件');
                        }
                        /** @type {?} */
                        var bindingListPath_1 = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
                        dataIds.forEach((/**
                         * @param {?} dataId
                         * @return {?}
                         */
                        function (dataId) {
                            /** @type {?} */
                            var removeObservable = _this.removeDataService.removeByBusinessPathAndId(url, bindingListPath_1, dataId);
                            removeObservables_1.push(removeObservable);
                        }));
                        return forkJoin(removeObservables_1).pipe(map((/**
                         * @param {?} e
                         * @return {?}
                         */
                        function (e) {
                            console.log(e);
                            return e;
                        })));
                    }
                };
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 */
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 * @private
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.getUploadFileInfosFromContext = 
                // #region 工具方法
                /**
                 * 从上下文中中获取控件传递的附件信息
                 * @private
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    /** @type {?} */
                    var uploadFileInfos = (/** @type {?} */ (commandContext.eventParams.data));
                    if (!uploadFileInfos) {
                        return [];
                    }
                    return uploadFileInfos;
                };
                /**
                 * 获取要删除的附件对应的数据id数组
                 */
                /**
                 * 获取要删除的附件对应的数据id数组
                 * @param {?} context
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.getDataIdsToRemove = /**
                 * 获取要删除的附件对应的数据id数组
                 * @param {?} context
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (context, attachmentInfoFieldPath) {
                    var _this = this;
                    /** @type {?} */
                    var attachIds = this.getAttachmentIdsToRemoveFromContext();
                    /** @type {?} */
                    var dataIds = [];
                    attachIds.forEach((/**
                     * @param {?} attachId
                     * @return {?}
                     */
                    function (attachId) {
                        // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
                        /** @type {?} */
                        var dataId = _this.convertAttachmentIdToDataId(context, attachId, attachmentInfoFieldPath);
                        dataIds.push(dataId);
                    }));
                    return dataIds;
                };
                /**
                 * 从命令上下文中获取要删除附件ids
                 */
                /**
                 * 从命令上下文中获取要删除附件ids
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.getAttachmentIdsToRemoveFromContext = /**
                 * 从命令上下文中获取要删除附件ids
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    return commandContext.eventParams.data.map((/**
                     * @param {?} dataItem
                     * @return {?}
                     */
                    function (dataItem) {
                        return Object.prototype.toString.call(dataItem) === '[object Object]' ? dataItem.metadataId : dataItem;
                    }));
                    // return commandContext.eventParams.data as string[];
                };
                /**
                 * 根据路径获取附件字段值数组
                 * @param fieldPath 字段路径
                 */
                /**
                 * 根据路径获取附件字段值数组
                 * @private
                 * @param {?} context
                 * @param {?} fileId
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.convertAttachmentIdToDataId = /**
                 * 根据路径获取附件字段值数组
                 * @private
                 * @param {?} context
                 * @param {?} fileId
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (context, fileId, attachmentInfoFieldPath) {
                    // 解析路径
                    /** @type {?} */
                    var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    /** @type {?} */
                    var attachFieldName = attachInfoBindingPath.pop();
                    // 获取附件id数组
                    // const entityListData = this.entityService.getEntityListData(attachListBindingPath);
                    /** @type {?} */
                    var entityListData = context.data;
                    /** @type {?} */
                    var targetEntityData = entityListData.find((/**
                     * @param {?} entityData
                     * @return {?}
                     */
                    function (entityData) {
                        if (entityData[attachFieldName]) {
                            /** @type {?} */
                            var attachmentId = entityData[attachFieldName]['attachmentId'];
                            if (attachmentId === fileId) {
                                return true;
                            }
                        }
                    }));
                    return targetEntityData.id;
                };
                /**
                 * 获取带附件的BindingList的Path
                 */
                /**
                 * 获取带附件的BindingList的Path
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.getBindingListPathWithAttachments = /**
                 * 获取带附件的BindingList的Path
                 * @private
                 * @param {?} attachmentInfoFieldPath
                 * @return {?}
                 */
                function (attachmentInfoFieldPath) {
                    /** @type {?} */
                    var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
                    attachInfoBindingPath.pop();
                    /** @type {?} */
                    var bindingListPath = attachInfoBindingPath;
                    return '/' + bindingListPath.join('/');
                };
                /**
                 * 获取附件组件上下文
                 */
                /**
                 * 获取附件组件上下文
                 * @private
                 * @return {?}
                 */
                BusinessAttachmentService.prototype.getAttachContext = /**
                 * 获取附件组件上下文
                 * @private
                 * @return {?}
                 */
                function () {
                    /** @type {?} */
                    var commandContext = (/** @type {?} */ (this['context']));
                    /** @type {?} */
                    var attachContext = commandContext && commandContext.eventParams ? commandContext.eventParams : {};
                    return attachContext;
                };
                return BusinessAttachmentService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/business-attachment-services/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/discussion-group-service/discussion-group.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var DiscussionGroupService = exports('DiscussionGroupService', /** @class */ (function () {
                function DiscussionGroupService(httpSvc, viewModelContext, loadingService) {
                    this.httpSvc = httpSvc;
                    this.viewModelContext = viewModelContext;
                    this.loadingService = loadingService;
                }
                Object.defineProperty(DiscussionGroupService.prototype, "params", {
                    get: /**
                     * @private
                     * @return {?}
                     */
                    function () {
                        return this['context'] && this['context']['eventParams'] || {};
                    },
                    enumerable: true,
                    configurable: true
                });
                /**
                 *
                 * @param id 表单id
                 * @param summary 消息描述
                 * @param configId 消息配置id
                 * @param text 评论内容
                 * @param visibility 是否所有人可见(移动暂未支持)
                 * @param parentId 是否是回复信息
                 * @returns
                 */
                /**
                 *
                 * @param {?=} id 表单id
                 * @param {?=} summary 消息描述
                 * @param {?=} configId 消息配置id
                 * @param {?=} text 评论内容
                 * @param {?=} visibility 是否所有人可见(移动暂未支持)
                 * @param {?=} parentId 是否是回复信息
                 * @return {?}
                 */
                DiscussionGroupService.prototype.addComment = /**
                 *
                 * @param {?=} id 表单id
                 * @param {?=} summary 消息描述
                 * @param {?=} configId 消息配置id
                 * @param {?=} text 评论内容
                 * @param {?=} visibility 是否所有人可见(移动暂未支持)
                 * @param {?=} parentId 是否是回复信息
                 * @return {?}
                 */
                function (id, summary, configId, text, visibility, parentId) {
                    var _this = this;
                    id = id || this.viewModelContext && this.viewModelContext.bindingData.list.currentId || null;
                    if (!id) {
                        return EMPTY;
                    }
                    /** @type {?} */
                    var url = '/api/runtime/comment/v1.0/bill-comment/comment';
                    /** @type {?} */
                    var body = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
                    this.loadingService.show();
                    return this.httpSvc.post(url, body, {}).pipe(tap((/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    })));
                };
                /**
                 * @private
                 * @param {?} id
                 * @param {?} text
                 * @param {?} parentId
                 * @param {?} summary
                 * @param {?} visibility
                 * @param {?} configId
                 * @return {?}
                 */
                DiscussionGroupService.prototype.buildAddCommentParam = /**
                 * @private
                 * @param {?} id
                 * @param {?} text
                 * @param {?} parentId
                 * @param {?} summary
                 * @param {?} visibility
                 * @param {?} configId
                 * @return {?}
                 */
                function (id, text, parentId, summary, visibility, configId) {
                    if (typeof text === 'undefined') {
                        text = this.params.text;
                    }
                    if (typeof parentId === 'undefined') {
                        parentId = this.params.replyUser && this.params.replyUser.id;
                    }
                    if (typeof visibility === 'undefined') {
                        visibility = this.params.visibility || 'ALL';
                    }
                    return {
                        'bill': {
                            'billId': id,
                            'configId': configId,
                            'summary': summary
                        },
                        'comment': {
                            'billId': id,
                            'configId': configId,
                            'parentId': parentId || null,
                            'text': text,
                            'visibility': visibility
                        }
                    };
                };
                /**
                 *
                 * @param id 表单id
                 * @param configId 消息配置id
                 * @param pageIndex
                 * @param pageSize
                 * @returns
                 */
                /**
                 *
                 * @param {?} id 表单id
                 * @param {?} configId 消息配置id
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                DiscussionGroupService.prototype.queryComments = /**
                 *
                 * @param {?} id 表单id
                 * @param {?} configId 消息配置id
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                function (id, configId, pageIndex, pageSize) {
                    var _this = this;
                    id = id || this.viewModelContext && this.viewModelContext.bindingData.list.currentId || null;
                    if (!id) {
                        return EMPTY;
                    }
                    /** @type {?} */
                    var url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
                    this.loadingService.show();
                    return this.httpSvc.get(url, {}).pipe(tap((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.loadingService.hide();
                        _this.viewModelContext.uiState.setPropertyValue('discussionListData', e);
                    })));
                };
                /**
                 * @private
                 * @param {?} id
                 * @param {?} pageIndex
                 * @param {?} pageSize
                 * @param {?} configId
                 * @return {?}
                 */
                DiscussionGroupService.prototype.buildQueryCommentsUrl = /**
                 * @private
                 * @param {?} id
                 * @param {?} pageIndex
                 * @param {?} pageSize
                 * @param {?} configId
                 * @return {?}
                 */
                function (id, pageIndex, pageSize, configId) {
                    if (typeof pageIndex === 'undefined' || pageIndex === null) {
                        pageIndex = this.params.pageIndex || 0;
                    }
                    if (typeof pageSize === 'undefined' || pageSize === null) {
                        pageSize = this.params.pageSize || 999;
                    }
                    return "/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=" + configId + "&billId=" + id + "&pageSize=" + pageSize + "&pageIndex=" + pageIndex;
                };
                /**
                 * 回复赋值
                 */
                /**
                 * 回复赋值
                 * @return {?}
                 */
                DiscussionGroupService.prototype.setReplyUser = /**
                 * 回复赋值
                 * @return {?}
                 */
                function () {
                    this.viewModelContext.uiState.setPropertyValue('replyUser', this.params);
                };
                /**
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                DiscussionGroupService.prototype.queryFrequentAtUsers = /**
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                function (pageIndex, pageSize) {
                    var _this = this;
                    /** @type {?} */
                    var params = [];
                    params.push("pageSize=" + (pageSize || 20));
                    params.push("pageIndex=" + (pageIndex || 0));
                    /** @type {?} */
                    var url = "/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?" + params.join('&');
                    this.loadingService.show();
                    return this.httpSvc.get(url, {}).pipe(tap((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.loadingService.hide();
                        /** @type {?} */
                        var personnelsData = {
                            pageInfo: {
                                pageSize: e.pageSize,
                                pageIndex: e.pageIndex
                            },
                            total: e.totalCount,
                            items: e.users
                        };
                        _this.viewModelContext.uiState.setPropertyValue('personnelsData', personnelsData);
                    })));
                };
                /**
                 * @param {?=} user
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                DiscussionGroupService.prototype.queryAtUsers = /**
                 * @param {?=} user
                 * @param {?=} pageIndex
                 * @param {?=} pageSize
                 * @return {?}
                 */
                function (user, pageIndex, pageSize) {
                    var _this = this;
                    /** @type {?} */
                    var params = [];
                    if (user) {
                        params.push("param=" + user);
                    }
                    params.push("pageSize=" + (pageSize || 100));
                    params.push("pageIndex=" + (pageIndex || 0));
                    /** @type {?} */
                    var url = "/api/runtime/comment/v1.0/bill-comment/atUser?" + params.join('&');
                    this.loadingService.show();
                    return this.httpSvc.get(url, {}).pipe(tap((/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.loadingService.hide();
                        /** @type {?} */
                        var personnelsData = {
                            pageInfo: {
                                pageSize: e.pageSize,
                                pageIndex: e.pageIndex
                            },
                            total: e.totalCount,
                            items: e.users
                        };
                        _this.viewModelContext.uiState.setPropertyValue('personnelsData', personnelsData);
                    })));
                };
                return DiscussionGroupService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/discussion-group-service/index.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/work-flow-service/service/task.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var TaskService = exports('ɵc', /** @class */ (function () {
                function TaskService(httpSvc) {
                    this.httpSvc = httpSvc;
                }
                /**
                 * @param {?} error
                 * @param {?=} actionCode
                 * @return {?}
                 */
                TaskService.prototype.error = /**
                 * @param {?} error
                 * @param {?=} actionCode
                 * @return {?}
                 */
                function (error, actionCode) {
                    if (error && error.error && error.error.Message) {
                        /** @type {?} */
                        var message = error.error.Message;
                        if (actionCode) {
                            message = actionCode + "操作失败:" + message;
                        }
                        return message;
                    }
                };
                /**
                 * 启动流程预解析
                 * @param payload API所需的上下文参数
                 */
                /**
                 * 启动流程预解析
                 * @param {?} payload API所需的上下文参数
                 * @return {?}
                 */
                TaskService.prototype.startProcessSimulate = /**
                 * 启动流程预解析
                 * @param {?} payload API所需的上下文参数
                 * @return {?}
                 */
                function (payload) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/startProcess-simulation";
                    return this.httpSvc.post(url, payload, {});
                };
                /**
                 * 启动流程接口
                 * @param payload API所需的上下文参数
                 */
                /**
                 * 启动流程接口
                 * @param {?} payload API所需的上下文参数
                 * @return {?}
                 */
                TaskService.prototype.startProcess = /**
                 * 启动流程接口
                 * @param {?} payload API所需的上下文参数
                 * @return {?}
                 */
                function (payload) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/startProcess";
                    return this.httpSvc.post(url, payload, {});
                };
                /**
                 * 取消提交
                 * @param param 参数
                 */
                /**
                 * 取消提交
                 * @param {?} param 参数
                 * @return {?}
                 */
                TaskService.prototype.cancelSubmit = /**
                 * 取消提交
                 * @param {?} param 参数
                 * @return {?}
                 */
                function (param) {
                    /** @type {?} */
                    var url = "/api/runtime/wf/v1.0/processInstances/cancelSubmit";
                    return this.httpSvc.post(url, param, {});
                };
                return TaskService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/work-flow-service/entity/start-process-payload.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 提交审批上下文参数
             */
            var /**
             * 提交审批上下文参数
             */
            StartProcessPayload = /** @class */ (function () {
                function StartProcessPayload() {
                }
                return StartProcessPayload;
            }());
            var FlowNodeInfo = /** @class */ (function () {
                function FlowNodeInfo() {
                }
                return FlowNodeInfo;
            }());
            var CancelSubmitPayload = /** @class */ (function () {
                function CancelSubmitPayload() {
                }
                return CancelSubmitPayload;
            }());

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/work-flow-service/submit/process-selector-vue/process-selector.service.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            var ProcessSelectorService = exports('ɵb', /** @class */ (function () {
                function ProcessSelectorService(taskService) {
                    this.taskService = taskService;
                    //候选下一环节
                    this.processPlaceholder = '选择流程'; //选择流程placeholder
                    //保存模拟流程后返回的内容，选择节点时使用
                    this.assignInfos = [];
                    //选择的下一环节ID，后续环节id的拼接
                    this.selectedValues = ['clear'];
                    this.payload = new StartProcessPayload; //保存表单上传来的payload
                    //保存表单上传来的payload
                    this.subject = new Subject();
                    this.processReadOnly = false; //选择流程框是否只读
                    //选择流程框是否只读
                    this.nodeReadOnly = true; //选择节点下拉框是否只读
                }
                //弹框实例
                /**
                 * @param {?} param
                 * @return {?}
                 */
                ProcessSelectorService.prototype.setParam = 
                //弹框实例
                /**
                 * @param {?} param
                 * @return {?}
                 */
                function (param) {
                    this.payload.id = param.id;
                    this.payload.processDefinitionId = param.processDefinitionId;
                    this.payload.processDefinitionKey = param.processDefinitionKey;
                    this.payload.bizDefKey = param.bizDefKey;
                    this.payload.dataModelId = param.dataModelId;
                    this.payload.dataId = param.dataId;
                    this.payload.name = param.name;
                    this.payload.startUserId = param.startUserId;
                    this.payload.nextFlowNodes = [];
                    this.startProcessSimulate(this.payload);
                };
                /**
                 * @param {?} payload
                 * @return {?}
                 */
                ProcessSelectorService.prototype.startProcessSimulate = /**
                 * @param {?} payload
                 * @return {?}
                 */
                function (payload) {
                    var _this = this;
                    this.taskService.startProcessSimulate(payload).subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        _this.destProcesses = response.procDefs.map((/**
                         * @param {?} process
                         * @return {?}
                         */
                        function (process) { return ({ id: process.procDefId, name: process.procDefName }); }));
                        if (_this.destProcesses.length === 1) {
                            _this.processReadOnly = true;
                            _this.selectedProcessId = response.procDefs[0].procDefId;
                            _this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                                process: _this.selectedProcessId,
                                processData: _this.destProcesses,
                                processOc: _this.selectProcessChange.bind(_this),
                                processReadFlag: _this.processReadOnly,
                                processHolder: _this.processPlaceholder,
                                nextNodeReadFlag: _this.nodeReadOnly,
                                submit: _this.submit.bind(_this),
                                cancel: _this.back.bind(_this)
                            });
                            _this.response = response;
                            _this.setNextNode(response);
                        }
                        else {
                            _this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                                processData: _this.destProcesses,
                                processOc: _this.selectProcessChange.bind(_this),
                                processReadFlag: _this.processReadOnly,
                                processHolder: _this.processPlaceholder,
                                nextNodeReadFlag: _this.nodeReadOnly,
                                submit: _this.submit.bind(_this),
                                cancel: _this.back.bind(_this)
                            });
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
                    }));
                };
                /**
               * 选择某个流程后
               * @param data
               */
                /**
                 * 选择某个流程后
                 * @param {?} data
                 * @return {?}
                 */
                ProcessSelectorService.prototype.selectProcessChange = /**
                 * 选择某个流程后
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    var _this = this;
                    this.clearHelp();
                    this.clearNode();
                    this.selectedProcessId = data;
                    /** @type {?} */
                    var payload = new StartProcessPayload();
                    payload.processDefinitionId = this.selectedProcessId;
                    payload.dataId = this.payload.dataId;
                    // const load = this.loadingService.show();
                    this.taskService.startProcessSimulate(payload).subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        // load.close();
                        _this.response = response;
                        _this.setNextNode(response);
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        //load.close();
                        _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该流程存在问题' });
                    }));
                };
                /**
                 * @param {?} data
                 * @return {?}
                 */
                ProcessSelectorService.prototype.getsimulationPathsIndexData = /**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    return this.destNodes.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.id === data; }));
                };
                /**
               * 选择节点后事件
               */
                /**
                 * 选择节点后事件
                 * @param {?} data
                 * @return {?}
                 */
                ProcessSelectorService.prototype.selectNodeChange = /**
                 * 选择节点后事件
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    var _this = this;
                    this.clearHelp();
                    this.clearAssignInfos();
                    this.selectedNodeId = data;
                    this.vm.open({
                        nextNode: this.selectedNodeId,
                    });
                    //const nodeNames = data.data.name.split('，');
                    /** @type {?} */
                    var index = this.getsimulationPathsIndexData(data);
                    if (this.response.simulationPaths[index].nodeInfoList.every((/**
                     * @param {?} node
                     * @return {?}
                     */
                    function (node) { return node.resolved === true; }))) { //已预解析参与者
                        this.setAssignInfo(this.response.simulationPaths[index]);
                    }
                    else { //未预解析参与者
                        //未预解析参与者
                        /** @type {?} */
                        var payload_1 = new StartProcessPayload();
                        payload_1.processDefinitionId = this.selectedProcessId;
                        payload_1.dataId = this.payload.dataId;
                        payload_1.nextFlowNodes = [];
                        this.selectedNodeId.split('，').forEach((/**
                         * @param {?} nodeId
                         * @param {?} index
                         * @return {?}
                         */
                        function (nodeId, index) {
                            /** @type {?} */
                            var nextFlowNode = new FlowNodeInfo();
                            nextFlowNode.activityDefinitionId = nodeId;
                            //nextFlowNode.activityDefinitionName = nodeNames[index];
                            payload_1.nextFlowNodes.push(nextFlowNode);
                        }));
                        //const load = this.loadingService.show();
                        this.taskService.startProcessSimulate(payload_1).subscribe((/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            //load.close();
                            _this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
                        }), (/**
                         * @param {?} error
                         * @return {?}
                         */
                        function (error) {
                            //load.close();
                            _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该节点存在问题' });
                        }));
                    }
                };
                /**
               * 设置下一环节
               */
                /**
                 * 设置下一环节
                 * @private
                 * @param {?} response
                 * @return {?}
                 */
                ProcessSelectorService.prototype.setNextNode = /**
                 * 设置下一环节
                 * @private
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
                     * @param {?} path
                     * @return {?}
                     */
                    function (path) { return ({
                        id: path.nodeInfoList.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) { return node.activityDefinitionId; })).join('，'),
                        name: path.nodeInfoList.map((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) { return node.activityDefinitionName; })).join('，')
                    }); }));
                    //处理默认分支，无默认分支返回-1
                    /** @type {?} */
                    var defaultIndex = response.simulationPaths.findIndex((/**
                     * @param {?} a
                     * @return {?}
                     */
                    function (a) { return a.default; }));
                    if (defaultIndex > -1) {
                        this.destNodes.length === 1 ? (this.nodeReadOnly = true) : (this.nodeReadOnly = false);
                        this.selectedNodeId = this.destNodes[defaultIndex].id;
                        this.setAssignInfo(response.simulationPaths[defaultIndex]);
                    }
                    else {
                        this.selectedNodeId = '';
                        this.nodeReadOnly = false;
                        this.nodePlaceholder = '请选择';
                    }
                    this.vm.open({
                        nextNodeOc: this.selectNodeChange.bind(this),
                        nextNode: this.selectedNodeId,
                        nextNodeData: this.destNodes,
                        nextNodeReadFlag: this.nodeReadOnly,
                        nextNodeHolder: this.nodePlaceholder
                    });
                };
                /**
                 * 设置当前指派信息帮助参数
                 */
                /**
                 * 设置当前指派信息帮助参数
                 * @private
                 * @param {?} simulationPaths
                 * @return {?}
                 */
                ProcessSelectorService.prototype.setAssignInfo = /**
                 * 设置当前指派信息帮助参数
                 * @private
                 * @param {?} simulationPaths
                 * @return {?}
                 */
                function (simulationPaths) {
                    var _this = this;
                    this.assignInfos = [];
                    this.selectedNodeId.split('，').forEach((/**
                     * @param {?} nodeId
                     * @return {?}
                     */
                    function (nodeId) {
                        /** @type {?} */
                        var node = simulationPaths.nodeInfoList.find((/**
                         * @param {?} node
                         * @return {?}
                         */
                        function (node) { return node.activityDefinitionId === nodeId; }));
                        if (node) {
                            /** @type {?} */
                            var selectedAssignees = node.selectedAssignees;
                            /** @type {?} */
                            var assigneeReadFlag = false;
                            /** @type {?} */
                            var assignee_1 = '';
                            /** @type {?} */
                            var assigneeHolder = '请选择人员';
                            if (selectedAssignees && selectedAssignees.length >= 1) {
                                assigneeReadFlag = true;
                                assigneeHolder = "";
                                selectedAssignees.forEach((/**
                                 * @param {?} user
                                 * @return {?}
                                 */
                                function (user) {
                                    assignee_1 = assignee_1 + user.name + ', ';
                                }));
                                assignee_1 = assignee_1.slice(0, assignee_1.length - 2);
                            }
                            if (node.anonymous) {
                                assignee_1 = node.anonymousText === '' ? '' : node.anonymousText && node.anonymousText;
                            }
                            _this.assignInfos.push({
                                label: (_this.selectedNodeId && _this.selectedNodeId.split('，').length > 1 ? node.activityDefinitionName : '') + "\u529E\u7406\u4EBA\u5458",
                                selectedAssignees: selectedAssignees,
                                assigneeReadFlag: assigneeReadFlag,
                                assignee: assignee_1,
                                assigneeHolder: assigneeHolder,
                                assigneeInfo: __assign({}, node.assigneeInfo, { assigneeUsers: { items: (node.assigneeInfo && node.assigneeInfo.assigneeUsers) || [] } }),
                                assignees: node.selectedAssignees.map((/**
                                 * @param {?} user
                                 * @return {?}
                                 */
                                function (user) { return { id: user.id, name: user.name }; })),
                                activityName: node.activityDefinitionName,
                                dependency: node.dependency,
                                anonymous: node.anonymous,
                                anonymousText: node.anonymousText
                            });
                        }
                        else {
                            _this.assignInfos.push({
                                selectedAssignees: [],
                                assigneeInfo: null,
                                assignees: [],
                                activityName: '',
                                dependency: '',
                                anonymous: node.anonymous,
                                anonymousText: node.anonymousText
                            });
                        }
                    }));
                    this.vm.open({
                        assigneeOc: this.assigneeOc.bind(this),
                        assignInfos: this.assignInfos
                    });
                };
                // 办理人员选择事件
                // 办理人员选择事件
                /**
                 * @param {?} data
                 * @param {?} index
                 * @return {?}
                 */
                ProcessSelectorService.prototype.assigneeOc = 
                // 办理人员选择事件
                /**
                 * @param {?} data
                 * @param {?} index
                 * @return {?}
                 */
                function (data, index) {
                    this.assignInfos[index].assignees = data.items;
                    this.selectedValues[index] = data.value;
                    this.vm.open({
                        selectedValues: this.selectedValues
                    });
                };
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.clearHelp = /**
                 * @return {?}
                 */
                function () {
                    this.vm.open({
                        selectedValues: ['clear']
                    });
                };
                // 清空节点
                // 清空节点
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.clearNode = 
                // 清空节点
                /**
                 * @return {?}
                 */
                function () {
                    this.selectedNodeId = '',
                        this.destNodes = [],
                        this.nodeReadOnly = true,
                        this.nodePlaceholder = '',
                        this.assignInfos = [];
                    this.vm.open({
                        nextNode: this.selectedNodeId,
                        nextNodeData: this.destNodes,
                        nextNodeReadFlag: this.nodeReadOnly,
                        nodePlaceholder: this.nodePlaceholder,
                        assignInfos: this.assignInfos
                    });
                };
                // 清空办理人员
                // 清空办理人员
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.clearAssignInfos = 
                // 清空办理人员
                /**
                 * @return {?}
                 */
                function () {
                    this.assignInfos = [];
                    this.vm.open({
                        assignInfos: this.assignInfos
                    });
                };
                /**
                 * 取消页面弹框
                 */
                /**
                 * 取消页面弹框
                 * @return {?}
                 */
                ProcessSelectorService.prototype.back = /**
                 * 取消页面弹框
                 * @return {?}
                 */
                function () {
                    this.clearProcess();
                    this.subject.next({ type: 'success', message: '' });
                };
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.submit = /**
                 * @return {?}
                 */
                function () {
                    var _this = this;
                    if (!this.selectedProcessId) {
                        this.subject.next({ type: 'error', message: '请选流程' });
                        return;
                    }
                    if (!this.selectedNodeId) {
                        this.subject.next({ type: 'error', message: '请选节点' });
                        return;
                    }
                    if (this.assignInfos.filter((/**
                     * @param {?} info
                     * @return {?}
                     */
                    function (info) { return ((info.assigneeInfo && info.assigneeInfo.assigneeUsers.items.length) || info.selectedAssignees.length) && !info.assignees.length; })).length) {
                        this.subject.next({ type: 'error', message: '请选办理人员' });
                        return;
                    }
                    /** @type {?} */
                    var nodes = this.selectedNodeId.split('，');
                    for (var i = 0; i < nodes.length; i++) {
                        /** @type {?} */
                        var nextFlowNode = {
                            activityDefinitionId: nodes[i],
                            activityDefinitionName: this.assignInfos[i].activityName,
                            dependency: this.assignInfos[i].dependency,
                            selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                            assigneeInfo: null,
                            resolved: false,
                            anonymous: false,
                            anonymousText: ''
                        };
                        this.payload.nextFlowNodes.push(nextFlowNode);
                    }
                    this.payload.processDefinitionId = this.selectedProcessId;
                    this.taskService.startProcess(this.payload).subscribe((/**
                     * @return {?}
                     */
                    function () {
                        _this.clearProcess();
                        _this.subject.next({ type: 'success', message: '提交成功' });
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
                    }));
                };
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.getSubject = /**
                 * @return {?}
                 */
                function () {
                    return this.subject.asObservable();
                };
                /**
                 * @return {?}
                 */
                ProcessSelectorService.prototype.clearProcess = /**
                 * @return {?}
                 */
                function () {
                    this.vm.close();
                    this.vm = null;
                    this.selectedProcessId = '';
                    this.selectedNodeId = '';
                    this.processReadOnly = false;
                    this.nodeReadOnly = true;
                };
                return ProcessSelectorService;
            }()));
            var WfTaskHandlerService = exports('ɵa', /** @class */ (function () {
                function WfTaskHandlerService(processSelectorService, taskService, loadingService, notifyService) {
                    this.processSelectorService = processSelectorService;
                    this.taskService = taskService;
                    this.loadingService = loadingService;
                    this.notifyService = notifyService;
                    this.subject = new Subject();
                }
                /**
                 * 提交审批
                 * @param payload 上下文参数
                 */
                /**
                 * 提交审批
                 * @param {?} payload 上下文参数
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.startProcess = /**
                 * 提交审批
                 * @param {?} payload 上下文参数
                 * @return {?}
                 */
                function (payload) {
                    var _this = this;
                    /** @type {?} */
                    var subject = new Subject();
                    this.processSelectorService.setParam(payload);
                    this.processSelectorService.getSubject().subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        if (response.type === 'success') {
                            if (response.message) {
                                _this.notifyService.success(response.message);
                                subject.next(true);
                            }
                        }
                        else if (response.type === 'error') {
                            subject.next(false);
                            _this.notifyService.error(response.message);
                        }
                    }), (/**
                     * @return {?}
                     */
                    function () {
                        _this.loadingService.hide();
                    }));
                    return subject.asObservable();
                };
                /**
                 * 取消提交
                 * @payload payload 参数
                 */
                /**
                 * 取消提交
                 * \@payload payload 参数
                 * @param {?} payload
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.cancelSubmit = /**
                 * 取消提交
                 * \@payload payload 参数
                 * @param {?} payload
                 * @return {?}
                 */
                function (payload) {
                    var _this = this;
                    /** @type {?} */
                    var subject = new Subject();
                    this.loadingService.show();
                    this.taskService.cancelSubmit(payload).subscribe((/**
                     * @param {?} re
                     * @return {?}
                     */
                    function (re) {
                        subject.next(true);
                        _this.loadingService.hide();
                        _this.notifyService.success('取消提交成功');
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        subject.next(false);
                        _this.loadingService.hide();
                        _this.notifyService.error(error && error.response && error.response.data && error.response.data.Message || '取消提交失败');
                    }));
                    return subject.asObservable();
                };
                /**
               * 提交审批
               * @param dataId 表单id
               * @param bizDefKey 入口单据id
               */
                /**
                 * 提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.submitWithBizDefKey = /**
                 * 提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataId, bizDefKey) {
                    if (!dataId) {
                        this.notifyService.error('表单id不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据Id不能为空');
                        return;
                    }
                    /** @type {?} */
                    var startProcessPayload = new StartProcessPayload();
                    startProcessPayload.dataId = dataId;
                    startProcessPayload.bizDefKey = bizDefKey;
                    return this.startProcess(startProcessPayload);
                };
                /**
                 * 取消提交审批
                 * @param dataId 表单id
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 取消提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.cancelSubmitWithDataId = /**
                 * 取消提交审批
                 * @param {?} dataId 表单id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataId, bizDefKey) {
                    if (!dataId) {
                        this.notifyService.error('表单id不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据Id不能为空');
                        return;
                    }
                    /** @type {?} */
                    var cancelSubmitPayload = new CancelSubmitPayload();
                    cancelSubmitPayload.dataId = dataId;
                    cancelSubmitPayload.bizDefKey = bizDefKey;
                    return this.cancelSubmit(cancelSubmitPayload);
                };
                /**
                 * 批量提交审批
                 * @param dataIds 表单ID集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 批量提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.batchSubmitWithBizDefKey = /**
                 * 批量提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataIds, bizDefKey) {
                    var _this = this;
                    if (!dataIds) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!dataIds.length) {
                        this.notifyService.error('请选择数据');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    if (dataIds.length === 1) {
                        /** @type {?} */
                        var startPayload = new StartProcessPayload();
                        startPayload.bizDefKey = bizDefKey;
                        startPayload.dataId = dataIds[0];
                        return this.startProcess(startPayload);
                    }
                    /** @type {?} */
                    var successNum = 0;
                    /** @type {?} */
                    var failedNum = 0;
                    /** @type {?} */
                    var subject = new Subject();
                    this.loadingService.show();
                    for (var i = 0; i < dataIds.length; i++) {
                        /** @type {?} */
                        var startPayload = new StartProcessPayload();
                        startPayload.bizDefKey = bizDefKey;
                        startPayload.dataId = dataIds[i];
                        startPayload.variables = { simulate: false };
                        this.taskService.startProcess(startPayload).subscribe((/**
                         * @param {?} response
                         * @return {?}
                         */
                        function (response) {
                            if (response.procDefs.length > 1 || response.nextFlowNodes.length > 1) { //存在多个流程，单独提交//多个节点，单独提交
                                failedNum++;
                            }
                            else {
                                successNum++;
                            }
                            if (successNum + failedNum === dataIds.length) {
                                _this.loadingService.hide();
                                subject.next(true); //全部执行完再返回
                                _this.showBatchSubmitInfo("submit", successNum, failedNum);
                            }
                        }), (/**
                         * @return {?}
                         */
                        function () {
                            failedNum++;
                            if (successNum + failedNum === dataIds.length) {
                                _this.loadingService.hide();
                                subject.next(false); //全部执行完再返回
                                _this.showBatchSubmitInfo("submit", successNum, failedNum);
                            }
                        }));
                    }
                    return subject.asObservable();
                };
                /**
                 * 批量取消提交审批
                 * @param dataIds 表单ID集合
                 * @param bizDefKey 入口单据id
                 */
                /**
                 * 批量取消提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.batchCancelSubmitWithDataId = /**
                 * 批量取消提交审批
                 * @param {?} dataIds 表单ID集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (dataIds, bizDefKey) {
                    var _this = this;
                    if (!dataIds) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!dataIds.length) {
                        this.notifyService.error('请选择数据');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    /** @type {?} */
                    var subject = new Subject();
                    /** @type {?} */
                    var successNum = 0;
                    /** @type {?} */
                    var failedNum = 0;
                    this.loadingService.show();
                    for (var i = 0; i < dataIds.length; i++) {
                        /** @type {?} */
                        var cancelSubmitPayload = new CancelSubmitPayload();
                        cancelSubmitPayload.dataId = dataIds[i];
                        cancelSubmitPayload.bizDefKey = bizDefKey;
                        this.taskService.cancelSubmit(cancelSubmitPayload).subscribe((/**
                         * @param {?} re
                         * @return {?}
                         */
                        function (re) {
                            successNum++;
                            if (successNum + failedNum === dataIds.length) {
                                _this.loadingService.hide();
                                subject.next(true);
                                _this.showBatchSubmitInfo("cancel", successNum, failedNum);
                            }
                        }), (/**
                         * @return {?}
                         */
                        function () {
                            failedNum++;
                            if (successNum + failedNum === dataIds.length) {
                                _this.loadingService.hide();
                                subject.next(false);
                                _this.showBatchSubmitInfo("cancel", successNum, failedNum);
                            }
                        }));
                    }
                    return subject.asObservable();
                };
                /**
               * 子表提交审批
               * @param parentDataId 主表id
               * @param childDataId 子表id
               * @param bizDefKey 入口单据id
               */
                /**
                 * 子表提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.childSubmit = /**
                 * 子表提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataId, bizDefKey) {
                    if (!parentDataId || !childDataId) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    /** @type {?} */
                    var startProcessPayload = new StartProcessPayload();
                    startProcessPayload.dataId = parentDataId + "," + childDataId;
                    startProcessPayload.bizDefKey = bizDefKey;
                    return this.startProcess(startProcessPayload);
                };
                /**
               * 子表取消提交审批
               * @param parentDataId 主表id
               * @param childDataId 子表id
               * @param bizDefKey 入口单据id
               */
                /**
                 * 子表取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.childCancelSubmit = /**
                 * 子表取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataId 子表id
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataId, bizDefKey) {
                    if (!parentDataId || !childDataId) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    /** @type {?} */
                    var cancelSubmitPayload = new CancelSubmitPayload();
                    cancelSubmitPayload.dataId = parentDataId + "," + childDataId;
                    cancelSubmitPayload.bizDefKey = bizDefKey;
                    return this.cancelSubmit(cancelSubmitPayload);
                };
                /**
               * 子表批量提交审批
               * @param parentDataId 主表id
               * @param childDataIds 子表id集合
               * @param bizDefKey 入口单据id
               */
                /**
                 * 子表批量提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.childBatchSubmit = /**
                 * 子表批量提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataIds, bizDefKey) {
                    if (!parentDataId || !childDataIds) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    /** @type {?} */
                    var dataIds = childDataIds.map((/**
                     * @param {?} childDataId
                     * @return {?}
                     */
                    function (childDataId) { return parentDataId + "," + childDataId; }));
                    return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
                };
                /**
               * 子表批量取消提交审批
               * @param parentDataId 主表id
               * @param childDataIds 子表id集合
               * @param bizDefKey 入口单据id
               */
                /**
                 * 子表批量取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.childBatchCancelSubmit = /**
                 * 子表批量取消提交审批
                 * @param {?} parentDataId 主表id
                 * @param {?} childDataIds 子表id集合
                 * @param {?} bizDefKey 入口单据id
                 * @return {?}
                 */
                function (parentDataId, childDataIds, bizDefKey) {
                    if (!parentDataId || !childDataIds) {
                        this.notifyService.error('dataId不能为空');
                        return;
                    }
                    if (!bizDefKey) {
                        this.notifyService.error('入口单据ID不能为空');
                        return;
                    }
                    /** @type {?} */
                    var dataIds = childDataIds.map((/**
                     * @param {?} childDataId
                     * @return {?}
                     */
                    function (childDataId) { return parentDataId + "," + childDataId; }));
                    return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
                };
                /**
               * 批量提交、取消提交提示信息
               */
                /**
                 * 批量提交、取消提交提示信息
                 * @private
                 * @param {?} actionCode
                 * @param {?} successNum
                 * @param {?} failedNum
                 * @return {?}
                 */
                WfTaskHandlerService.prototype.showBatchSubmitInfo = /**
                 * 批量提交、取消提交提示信息
                 * @private
                 * @param {?} actionCode
                 * @param {?} successNum
                 * @param {?} failedNum
                 * @return {?}
                 */
                function (actionCode, successNum, failedNum) {
                    if (successNum && !failedNum) { //批量全部成功
                        actionCode === "submit" && this.notifyService.success('提交审批成功！');
                        actionCode === "cancel" && this.notifyService.success('取消提交成功！');
                    }
                    if (successNum && failedNum) { //批量有成功有失败
                        this.notifyService.warning("\u64CD\u4F5C\u6210\u529F" + successNum + "\u6761\uFF0C\u5931\u8D25" + failedNum + "\u6761!");
                    }
                    if (!successNum && failedNum) { //批量全部失败
                        actionCode === "submit" && this.notifyService.error('提交审批失败！');
                        actionCode === "cancel" && this.notifyService.error('取消提交失败！');
                    }
                };
                return WfTaskHandlerService;
            }()));

            /**
             * @fileoverview added by tsickle
             * Generated from: lib/providers.ts
             * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
             */
            /**
             * 应用级Providers
             * @type {?}
             */
            var COMMAND_SERVICES_APP_PROVIDERS = exports('COMMAND_SERVICES_APP_PROVIDERS', [
                { provide: LoadingService, useClass: LoadingService, deps: [] },
                { provide: ToastService, useClass: ToastService, deps: [] },
                { provide: NotifyService, useClass: NotifyService, deps: [] },
                { provide: DialogService, useClass: DialogService, deps: [] },
                { provide: ExceptionService, useClass: ExceptionService, deps: [] },
                { provide: JsBridgeService, useClass: JsBridgeService, deps: [] },
                { provide: BE_ERROR_HANDLER__TOKEN, useClass: ExceptionService, deps: [NotifyService, JsBridgeService] },
            ]);
            /**
             * 视图模型级Providers
             * @type {?}
             */
            var COMMAND_SERVICES_VIEWMODEL_PROVIDERS = exports('COMMAND_SERVICES_VIEWMODEL_PROVIDERS', [
                { provide: RouterService, useClass: RouterService, deps: [ViewModelContext, ROUTER_INSTANCE_TOKEN, JsBridgeService] },
                { provide: CommandService, useClass: CommandService, deps: [ViewModelContext] },
                { provide: EntityService, useClass: EntityService, deps: [ViewModelContext] },
                { provide: StateMachineService, useClass: StateMachineService, deps: [ViewModelContext] },
                { provide: UIStateService, useClass: UIStateService, deps: [ViewModelContext] },
                { provide: VoVariableService, useClass: VoVariableService, deps: [ViewModelContext] },
                { provide: EntityTraversingService, useClass: EntityTraversingService, deps: [ViewModelContext] },
                { provide: EntityManipulationService, useClass: EntityManipulationService, deps: [ViewModelContext] },
                { provide: EntityAggregationService, useClass: EntityAggregationService, deps: [ViewModelContext] },
                { provide: EntityService, useClass: EntityService, deps: [ViewModelContext] },
                { provide: EntityListService, useClass: EntityListService, deps: [ViewModelContext] },
                { provide: LoadDataService, useClass: LoadDataService, deps: [ViewModelContext] },
                { provide: CreateDataService, useClass: CreateDataService, deps: [ViewModelContext] },
                { provide: EditDataService, useClass: EditDataService, deps: [ViewModelContext] },
                { provide: UpdateDataService, useClass: UpdateDataService, deps: [ViewModelContext] },
                { provide: RemoveDataService, useClass: RemoveDataService, deps: [ViewModelContext] },
                { provide: SaveDataService, useClass: SaveDataService, deps: [ViewModelContext] },
                { provide: CancelDataService, useClass: CancelDataService, deps: [ViewModelContext] },
                { provide: BeActionService, useClass: BeActionService, deps: [ViewModelContext] },
                { provide: CheckDataService, useClass: CheckDataService, deps: [ViewModelContext] },
                { provide: ValidatorServices, useClass: ValidatorServices, deps: [ViewModelContext] },
                { provide: TaskService, useClass: TaskService, deps: [HttpClient] },
                { provide: ProcessSelectorService, useClass: ProcessSelectorService, deps: [TaskService] },
                {
                    provide: WfTaskHandlerService, useClass: WfTaskHandlerService,
                    deps: [ProcessSelectorService, TaskService, LoadingService, NotifyService]
                },
                { provide: ApproveService, useClass: ApproveService, deps: [WfTaskHandlerService, ViewModelContext] },
                { provide: AttachmentDataService, useClass: AttachmentDataService, deps: [ViewModelContext] },
                { provide: BusinessAttachmentDataService, useClass: BusinessAttachmentDataService, deps: [ViewModelContext] },
                {
                    provide: AttachmentService, useClass: AttachmentService,
                    deps: [ViewModelContext, EntityService, RemoveDataService, AttachmentDataService]
                },
                {
                    provide: BusinessAttachmentService, useClass: BusinessAttachmentService,
                    deps: [ViewModelContext, EntityService, RemoveDataService, BusinessAttachmentDataService]
                },
                { provide: CcWorkService, useClass: CcWorkService, deps: [ViewModelContext] },
                { provide: MapService, useClass: MapService, deps: [ViewModelContext] },
                { provide: AttachmentPreviewService, useClass: AttachmentPreviewService, deps: [ViewModelContext] },
                { provide: DiscussionGroupService, useClass: DiscussionGroupService, deps: [HttpClient, ViewModelContext, LoadingService] }
            ]);

        }
    };
});
