import { ViewModelContext, HttpClient } from '@farris/mobile-devkit';
import { LoadingService, ToastService, NotifyService, DialogService } from './ui-services/index';
import { ExceptionService } from './exception-services/index';
import { RouterService } from './router.servcie';
import { CommandService } from './command.service';
import { StateMachineService } from './state-machine.service';
import { UIStateService } from './ui-state.service';
import { VoVariableService } from './vo-variable.service';
import { EntityTraversingService, EntityManipulationService, EntityAggregationService, EntityService, EntityListService } from './entity-services/index';
import { LoadDataService, CreateDataService, EditDataService, UpdateDataService, CheckDataService, RemoveDataService, SaveDataService, CancelDataService, BeActionService, ApproveService } from './data-services/index';
import { AttachmentDataService, AttachmentService } from './attachment-services/index';
import { BusinessAttachmentDataService, BusinessAttachmentService } from './business-attachment-services/index';
import { TaskService } from './work-flow-service/service/task.service';
import { ProcessSelectorService } from './work-flow-service/submit/process-selector-vue/process-selector.service';
import { WfTaskHandlerService } from './work-flow-service/wf-task-handler.service';
import { ValidatorServices } from './validator-services';
import { JsBridgeService } from './js-bridge-service/index';
import { DiscussionGroupService } from './discussion-group-service/index';
/**
 * 应用级Providers
 */
declare const COMMAND_SERVICES_APP_PROVIDERS: ({
    provide: typeof LoadingService;
    useClass: typeof LoadingService;
    deps: any[];
} | {
    provide: typeof ToastService;
    useClass: typeof ToastService;
    deps: any[];
} | {
    provide: typeof DialogService;
    useClass: typeof DialogService;
    deps: any[];
} | {
    provide: typeof ExceptionService;
    useClass: typeof ExceptionService;
    deps: any[];
} | {
    provide: typeof JsBridgeService;
    useClass: typeof JsBridgeService;
    deps: any[];
} | {
    provide: import("@farris/mobile-devkit").InjectionToken<import("@farris/mobile-bef").IErrorServe>;
    useClass: typeof ExceptionService;
    deps: (typeof NotifyService | typeof JsBridgeService)[];
})[];
/**
 * 视图模型级Providers
 */
declare const COMMAND_SERVICES_VIEWMODEL_PROVIDERS: ({
    provide: typeof RouterService;
    useClass: typeof RouterService;
    deps: (string | typeof ViewModelContext | typeof JsBridgeService)[];
} | {
    provide: typeof CommandService;
    useClass: typeof CommandService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EntityService;
    useClass: typeof EntityService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof StateMachineService;
    useClass: typeof StateMachineService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof UIStateService;
    useClass: typeof UIStateService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof VoVariableService;
    useClass: typeof VoVariableService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EntityTraversingService;
    useClass: typeof EntityTraversingService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EntityManipulationService;
    useClass: typeof EntityManipulationService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EntityAggregationService;
    useClass: typeof EntityAggregationService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EntityListService;
    useClass: typeof EntityListService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof LoadDataService;
    useClass: typeof LoadDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof CreateDataService;
    useClass: typeof CreateDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof EditDataService;
    useClass: typeof EditDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof UpdateDataService;
    useClass: typeof UpdateDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof RemoveDataService;
    useClass: typeof RemoveDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof SaveDataService;
    useClass: typeof SaveDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof CancelDataService;
    useClass: typeof CancelDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof BeActionService;
    useClass: typeof BeActionService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof CheckDataService;
    useClass: typeof CheckDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof ValidatorServices;
    useClass: typeof ValidatorServices;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof TaskService;
    useClass: typeof TaskService;
    deps: (typeof HttpClient)[];
} | {
    provide: typeof ProcessSelectorService;
    useClass: typeof ProcessSelectorService;
    deps: (typeof TaskService)[];
} | {
    provide: typeof WfTaskHandlerService;
    useClass: typeof WfTaskHandlerService;
    deps: (typeof LoadingService | typeof NotifyService | typeof TaskService | typeof ProcessSelectorService)[];
} | {
    provide: typeof ApproveService;
    useClass: typeof ApproveService;
    deps: (typeof ViewModelContext | typeof WfTaskHandlerService)[];
} | {
    provide: typeof AttachmentDataService;
    useClass: typeof AttachmentDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof BusinessAttachmentDataService;
    useClass: typeof BusinessAttachmentDataService;
    deps: (typeof ViewModelContext)[];
} | {
    provide: typeof AttachmentService;
    useClass: typeof AttachmentService;
    deps: (typeof ViewModelContext | typeof EntityService | typeof RemoveDataService | typeof AttachmentDataService)[];
} | {
    provide: typeof BusinessAttachmentService;
    useClass: typeof BusinessAttachmentService;
    deps: (typeof ViewModelContext | typeof EntityService | typeof RemoveDataService | typeof BusinessAttachmentDataService)[];
} | {
    provide: typeof DiscussionGroupService;
    useClass: typeof DiscussionGroupService;
    deps: (typeof HttpClient | typeof ViewModelContext | typeof LoadingService)[];
})[];
export { COMMAND_SERVICES_APP_PROVIDERS, COMMAND_SERVICES_VIEWMODEL_PROVIDERS };
