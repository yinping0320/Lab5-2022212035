import { Subject } from 'rxjs';
import { StartProcessPayload } from '../../entity/start-process-payload';
import { SimulateResponse } from '../../entity/simulate-response';
import { TaskService } from '../../service/task.service';
export declare class ProcessSelectorService {
    private taskService;
    constructor(taskService: TaskService);
    destProcesses: {
        id: string;
        name: string;
    }[];
    destNodes: {
        id: string;
        name: string;
    }[];
    processPlaceholder: string;
    nodePlaceholder: string;
    response: SimulateResponse;
    assignInfos: any[];
    selectedProcessId: string;
    selectedNodeId: string;
    selectedValues: string[];
    payload: StartProcessPayload;
    subject: Subject<unknown>;
    processReadOnly: boolean;
    nodeReadOnly: boolean;
    vm: any;
    setParam(param: StartProcessPayload): void;
    startProcessSimulate(payload: StartProcessPayload): void;
    /**
   * 选择某个流程后
   * @param data
   */
    selectProcessChange(data: any): void;
    getsimulationPathsIndexData(data: any): number;
    /**
   * 选择节点后事件
   */
    selectNodeChange(data: any): void;
    /**
   * 设置下一环节
   */
    private setNextNode;
    /**
     * 设置当前指派信息帮助参数
     */
    private setAssignInfo;
    assigneeOc(data: any, index: number): void;
    clearHelp(): void;
    clearNode(): void;
    clearAssignInfos(): void;
    /**
     * 取消页面弹框
     */
    back(): void;
    submit(): void;
    getSubject(): import("rxjs").Observable<unknown>;
    clearProcess(): void;
}
