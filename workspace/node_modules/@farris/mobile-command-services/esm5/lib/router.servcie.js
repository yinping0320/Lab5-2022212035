/**
 * @fileoverview added by tsickle
 * Generated from: lib/router.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { tap, map } from 'rxjs/operators';
import { HttpClient } from '@farris/mobile-devkit';
/**
 * 路由服务
 */
var /**
 * 路由服务
 */
RouterService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function RouterService(viewModelContext, router, jsBridgeService) {
        this.jsBridgeService = jsBridgeService;
        this.viewModelContext = viewModelContext;
        this.router = router;
    }
    /**
     * 路由跳转
     * @param path   路由路径
     * @param params 路由参数
     */
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    RouterService.prototype.navigate = /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    function (path, queryParams, backParams, backPath) {
        if (queryParams === void 0) { queryParams = {}; }
        if (backParams === void 0) { backParams = {}; }
        if (!path)
            return;
        queryParams = this.ParamsFromStringToObject(queryParams);
        backParams = this.ParamsFromStringToObject(backParams);
        /** @type {?} */
        var pathIndex = this.sessionStorageSaveHistory(path, backPath, backParams)
        // 跨工程跳转
        ;
        // 跨工程跳转
        if (path && pathIndex >= 0) {
            /** @type {?} */
            var urlPath = this.splicePath(path, queryParams);
            window.location.href = urlPath;
            return false;
        }
        window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
        this.router.push({
            path: path,
            query: queryParams
        });
    };
    /**
     * @private
     * @param {?} pathIndex
     * @param {?} path
     * @return {?}
     */
    RouterService.prototype.removeParams = /**
     * @private
     * @param {?} pathIndex
     * @param {?} path
     * @return {?}
     */
    function (pathIndex, path) {
        /** @type {?} */
        var end = path.search('\\?');
        if (end = -1) {
            end = path.length;
        }
        return path.slice(pathIndex, end);
    };
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    RouterService.prototype.getsessionStorageSaveHistoryKey = /**
     * @private
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var pathIndex = path.search('/apps');
        // 跨页面跳转离开
        if (path && pathIndex >= 0) {
            return this.removeParams(pathIndex, path);
        }
        return this.router.options.history.base + path;
    };
    /**
     * @private
     * @param {?} path
     * @param {?} backPath
     * @param {?} backParams
     * @return {?}
     */
    RouterService.prototype.sessionStorageSaveHistory = /**
     * @private
     * @param {?} path
     * @param {?} backPath
     * @param {?} backParams
     * @return {?}
     */
    function (path, backPath, backParams) {
        /** @type {?} */
        var pathIndex = path.search('/apps');
        /** @type {?} */
        var key = this.getsessionStorageSaveHistoryKey(path);
        /** @type {?} */
        var historyObject = {}
        //判断是否制定了目标页面得返回地址
        ;
        //判断是否制定了目标页面得返回地址
        if (backPath) {
            /** @type {?} */
            var backPathIndex = path.search('/apps');
            //指定返回路由为跨工程跳转
            if (backPathIndex >= 0) {
                historyObject = {
                    routerWay: 'href',
                    path: backPath,
                    query: backParams
                };
            }
            else {
                historyObject = {
                    routerWay: 'Router',
                    path: backPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
        else {
            /** @type {?} */
            var currentPath = this.router.currentRoute.value.path;
            // 跨页面跳转离开
            if (path && pathIndex >= 0) {
                //拼接当前路由
                currentPath = this.router.options.history.base + this.router.options.history.location;
                //记录当前路由
                historyObject = {
                    routerWay: 'href',
                    path: currentPath,
                    query: backParams
                };
            }
            else {
                // 路由方式跳转记录
                historyObject = {
                    routerWay: 'Router',
                    path: currentPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
    };
    /**
     * 带维度的路由跳转
     */
    /**
     * 带维度的路由跳转
     * @param {?} path
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    RouterService.prototype.navigateForRtc = /**
     * 带维度的路由跳转
     * @param {?} path
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    function (path, queryParams, backParams, backPath) {
        var _this = this;
        if (queryParams === void 0) { queryParams = {}; }
        if (backParams === void 0) { backParams = {}; }
        if (!queryParams || !queryParams.metadataId) {
            this.navigate(path, queryParams, backParams, backPath);
        }
        /** @type {?} */
        var rtcOptions = {
            metadataId: queryParams.metadataId,
            withDims: false,
            dim1: queryParams.dim1,
            dim2: queryParams.dim2
        };
        delete queryParams['metadataId'];
        delete queryParams['dim1'];
        delete queryParams['dim2'];
        /** @type {?} */
        var correctRtcOptions$ = this.correctRtcOptions(rtcOptions);
        /** @type {?} */
        var extendedPath$ = correctRtcOptions$.pipe(map((/**
         * @param {?} correctedRtcOptions
         * @return {?}
         */
        function (correctedRtcOptions) {
            return _this.getExtendPath(path, correctedRtcOptions);
        })));
        /** @type {?} */
        var result$ = extendedPath$.pipe(tap((/**
         * @param {?} extendedPath
         * @return {?}
         */
        function (extendedPath) {
            _this.navigate(extendedPath, queryParams, backParams);
        })));
        result$.subscribe();
    };
    /**
     * 纠正维度信息
     * @summary
     * 1、非运行时定制表单，widthDims=false, 维度为空；
     * 2、运行时定制表单：维度值不存在时，则纠正为public；
     */
    /**
     * 纠正维度信息
     * \@summary
     * 1、非运行时定制表单，widthDims=false, 维度为空；
     * 2、运行时定制表单：维度值不存在时，则纠正为public；
     * @private
     * @param {?} rtcOptions
     * @return {?}
     */
    RouterService.prototype.correctRtcOptions = /**
     * 纠正维度信息
     * \@summary
     * 1、非运行时定制表单，widthDims=false, 维度为空；
     * 2、运行时定制表单：维度值不存在时，则纠正为public；
     * @private
     * @param {?} rtcOptions
     * @return {?}
     */
    function (rtcOptions) {
        /** @type {?} */
        var dim1 = rtcOptions.dim1 || 'public';
        /** @type {?} */
        var dim2 = rtcOptions.dim2 || 'public';
        /** @type {?} */
        var metadataId = rtcOptions.metadataId;
        /** @type {?} */
        var httpClient = this.viewModelContext.injector.get(HttpClient);
        /** @type {?} */
        var url = '/api/runtime/bcc/v1.0/template/beforeNavigate';
        /** @type {?} */
        var body = {
            isRootMetadata: true,
            metadataId: metadataId,
            dim1: dim1,
            dim2: dim2,
        };
        /** @type {?} */
        var beforeNavigate$ = httpClient.post(url, body, null).pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            /** @type {?} */
            var correctedRtcOptions = {
                metadataId: result.metadataId,
                withDims: result.withDims === 1 ? true : false,
                dim1: result.dim1,
                dim2: result.dim2
            };
            return correctedRtcOptions;
        })));
        return beforeNavigate$;
    };
    /**
     * 获取运行时定制表单地址
     */
    /**
     * 获取运行时定制表单地址
     * @private
     * @param {?} path
     * @param {?} rtcOptions
     * @return {?}
     */
    RouterService.prototype.getExtendPath = /**
     * 获取运行时定制表单地址
     * @private
     * @param {?} path
     * @param {?} rtcOptions
     * @return {?}
     */
    function (path, rtcOptions) {
        if (rtcOptions.withDims === false) {
            return path;
        }
        /** @type {?} */
        var arrPath = path.split('index.html');
        /** @type {?} */
        var append = (rtcOptions.dim1 + "/" + rtcOptions.dim2 + "/index.html").toLowerCase();
        /** @type {?} */
        var extendPath = arrPath.join(append);
        return extendPath;
    };
    /**
     * 拼接url路径
     * @param path 路径
     * @param params 参数
     * @returns
     */
    /**
     * 拼接url路径
     * @private
     * @param {?} path 路径
     * @param {?} params 参数
     * @return {?}
     */
    RouterService.prototype.splicePath = /**
     * 拼接url路径
     * @private
     * @param {?} path 路径
     * @param {?} params 参数
     * @return {?}
     */
    function (path, params) {
        /** @type {?} */
        var urlPath = path;
        /** @type {?} */
        var end = urlPath.search('\\?');
        if (end > -1) {
            urlPath = urlPath.slice(0, end);
        }
        /** @type {?} */
        var keys = Object.keys(params);
        if (keys.length > 0) {
            urlPath = urlPath + '?';
            keys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                urlPath = urlPath + element + '=' + params["" + element] + '&';
            }));
            urlPath = urlPath.slice(0, urlPath.length - 1);
        }
        return urlPath;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    RouterService.prototype.ParamsFromStringToObject = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        if (Object.prototype.toString.call(params) === '[object Object]') {
            return params;
        }
        try {
            params = JSON.parse(params);
        }
        catch (error) {
            if (!params) {
                params = {};
            }
            else {
                params = {};
                console.error('路由传参params不是JSON串格式');
            }
        }
        if (Object.prototype.toString.call(params) !== '[object Object]') {
            return {};
        }
        return params;
    };
    /**
   * 路由跳转
   * @param path   路由路径
   * @param params 路由参数
   */
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @return {?}
     */
    RouterService.prototype.navigateReplace = /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @return {?}
     */
    function (path, queryParams) {
        if (queryParams === void 0) { queryParams = {}; }
        if (typeof queryParams === 'string') {
            queryParams = JSON.parse(queryParams);
        }
        this.router.replace({
            path: path,
            query: queryParams
        });
    };
    /**
     * 后退
     */
    /**
     * 后退
     * @param {?} params
     * @return {?}
     */
    RouterService.prototype.goBack = /**
     * 后退
     * @param {?} params
     * @return {?}
     */
    function (params) {
        params = this.ParamsFromStringToObject(params);
        /** @type {?} */
        var currentPath = this.router.options.history.base + this.router.currentRoute.value.path;
        /** @type {?} */
        var need_go_back = sessionStorage.getItem(currentPath);
        if (!need_go_back) {
            if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
                return;
            }
            this.jsBridgeService.closeWindow();
            return;
        }
        /** @type {?} */
        var keys = Object.keys(params);
        need_go_back = JSON.parse(need_go_back);
        if (need_go_back && need_go_back['routerWay'] === 'Router') {
            /** @type {?} */
            var query = need_go_back['query'];
            if (keys.length > 0) {
                query = tslib_1.__assign({}, query, params);
            }
            this.router.push({
                query: query,
                path: need_go_back['path'],
            });
        }
        if (need_go_back && need_go_back['routerWay'] === 'href') {
            /** @type {?} */
            var query = need_go_back['query'];
            if (keys.length > 0) {
                query = tslib_1.__assign({}, query, params);
            }
            /** @type {?} */
            var path = need_go_back['path'];
            path = this.splicePath(path, query);
            window.location.href = path;
        }
    };
    /**
     * 映射路由状态
     */
    /**
     * 映射路由状态
     * @return {?}
     */
    RouterService.prototype.mappingToUIState = /**
     * 映射路由状态
     * @return {?}
     */
    function () {
        /** @type {?} */
        var routerState = {
            params: this.router.currentRoute['value'].params,
            queryParams: this.router.currentRoute['value'].query
        };
        this.viewModelContext.uiState['routerState'] = routerState;
    };
    return RouterService;
}());
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    RouterService.prototype.viewModelContext;
    /**
     * VueRouter实例
     * @type {?}
     * @private
     */
    RouterService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterService.prototype.jsBridgeService;
}
/**
 * Token
 * \@todo：临时方案，直接注入VueRouter实例。
 * @type {?}
 */
var ROUTER_INSTANCE_TOKEN = '@farris/mobile-command-services/ROUTER_INSTANCE_TOKEN';
export { RouterService, ROUTER_INSTANCE_TOKEN };
//# sourceMappingURL=data:application/json;base64,