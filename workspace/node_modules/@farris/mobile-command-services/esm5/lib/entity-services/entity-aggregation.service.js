/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-aggregation.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { BindingList } from '@farris/mobile-devkit';
import { EntityTraversingService } from './entity-traversing.service';
/**
 * @record
 */
function SplitedPath() { }
if (false) {
    /** @type {?} */
    SplitedPath.prototype.listPath;
    /** @type {?} */
    SplitedPath.prototype.propPath;
}
/**
 * 实体聚合服务
 */
var /**
 * 实体聚合服务
 */
EntityAggregationService = /** @class */ (function () {
    function EntityAggregationService(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.traversingService = this.viewModelContext.injector.get(EntityTraversingService);
    }
    Object.defineProperty(EntityAggregationService.prototype, "bindingData", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return this.viewModelContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取path对应列表记录的条数
     */
    /**
     * 获取path对应列表记录的条数
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.count = /**
     * 获取path对应列表记录的条数
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var splitedPath = this.splitPath(path);
        /** @type {?} */
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    };
    /**
     * 获取path对应字段的和
     */
    /**
     * 获取path对应字段的和
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.sum = /**
     * 获取path对应字段的和
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        /** @type {?} */
        var splitedPath = this.splitPath(path);
        /** @type {?} */
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        var total = entityListData.reduce((/**
         * @param {?} accTotal
         * @param {?} entityData
         * @return {?}
         */
        function (accTotal, entityData) {
            /** @type {?} */
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }), 0);
        return total;
    };
    /**
     * 获取path对应字段的平均值
     */
    /**
     * 获取path对应字段的平均值
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.avg = /**
     * 获取path对应字段的平均值
     * @param {?} path
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var count = this.count(path);
        /** @type {?} */
        var total = this.sum(path);
        return count !== 0 ? total / count : 0;
    };
    /**
     * 获取path对应字段的最大值
     */
    /**
     * 获取path对应字段的最大值
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.max = /**
     * 获取path对应字段的最大值
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        /** @type {?} */
        var splitedPath = this.splitPath(path);
        /** @type {?} */
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        var max = entityListData.reduce((/**
         * @param {?} accMax
         * @param {?} entityData
         * @return {?}
         */
        function (accMax, entityData) {
            /** @type {?} */
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }), null);
        return max ? max : 0;
    };
    /**
     * 获取path对应字段的最小值
     */
    /**
     * 获取path对应字段的最小值
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.min = /**
     * 获取path对应字段的最小值
     * @param {?} path
     * @return {?}
     */
    function (path) {
        var _this = this;
        /** @type {?} */
        var splitedPath = this.splitPath(path);
        /** @type {?} */
        var entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        var min = entityListData.reduce((/**
         * @param {?} accMin
         * @param {?} entityData
         * @return {?}
         */
        function (accMin, entityData) {
            /** @type {?} */
            var propValue = parseFloat(_this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }), null);
        return min ? min : 0;
    };
    /**
     * 获取属性值
     */
    /**
     * 获取属性值
     * @private
     * @param {?} entityData
     * @param {?} path
     * @return {?}
     */
    EntityAggregationService.prototype.getPropValue = /**
     * 获取属性值
     * @private
     * @param {?} entityData
     * @param {?} path
     * @return {?}
     */
    function (entityData, path) {
        /** @type {?} */
        var currentData = entityData;
        path.forEach((/**
         * @param {?} pathItem
         * @return {?}
         */
        function (pathItem) {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        }));
        return currentData;
    };
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @return 形如 {parentListPath: [], propertyPath: []}
     */
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @private
     * @param {?} path
     * @return {?} 形如 {parentListPath: [], propertyPath: []}
     */
    EntityAggregationService.prototype.splitPath = /**
     * 分隔路径，分隔符列表路径和属性路径
     * @private
     * @param {?} path
     * @return {?} 形如 {parentListPath: [], propertyPath: []}
     */
    function (path) {
        /** @type {?} */
        var listPath = path.concat([]);
        /** @type {?} */
        var propPath = [];
        /** @type {?} */
        var currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            /** @type {?} */
            var propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    };
    return EntityAggregationService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.traversingService;
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.viewModelContext;
}
export { EntityAggregationService };
//# sourceMappingURL=data:application/json;base64,