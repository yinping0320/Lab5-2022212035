/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/check-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of, EMPTY } from 'rxjs';
import { switchMap, tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
import { DataUtil } from './data-util';
import { BefRepositoryUtil } from '@farris/mobile-bef';
import { HttpMethods } from '@farris/mobile-devkit';
/**
 * 数据检查服务
 */
var /**
 * 数据检查服务
 */
CheckDataService = /** @class */ (function (_super) {
    tslib_1.__extends(CheckDataService, _super);
    function CheckDataService(viewModelContext) {
        return _super.call(this, viewModelContext) || this;
    }
    /**
     * 离开页面前检查数据变更
     */
    /**
     * 离开页面前检查数据变更
     * @return {?}
     */
    CheckDataService.prototype.checkChangesBeforeLeave = /**
     * 离开页面前检查数据变更
     * @return {?}
     */
    function () {
        //const isEntitiesChanged = this.befRepository.entityManager.checkAllEntityChanges();
        var _this = this;
        // 实体数据没有变化，继续执行
        if (!BefRepositoryUtil.isExistUnsaveData(this.befRepository)) {
            return of(true);
        }
        return this.dialogService.confirm('存在未保存的变更，确认离开当前页面？').pipe(switchMap((/**
         * @param {?} ifLeave
         * @return {?}
         */
        function (ifLeave) {
            if (ifLeave === false) {
                return EMPTY;
            }
            else {
                _this.loadingService.show();
                /** @type {?} */
                var cancel$ = _this.befRepository.cancelEntityChanges();
                return cancel$.pipe(switchMap((/**
                 * @return {?}
                 */
                function () {
                    if (_this.befRepository.apiProxy.associatedUrlMap.size >= 1) {
                        /** @type {?} */
                        var urls = tslib_1.__spread(_this.befRepository.apiProxy.associatedUrlMap.keys());
                        return _this.befRepository.apiProxy.request(HttpMethods.POST, urls[0] + "/service/cancel");
                    }
                    else {
                        return of(true);
                    }
                })), tap((/**
                 * @return {?}
                 */
                function () {
                    _this.loadingService.hide();
                })));
            }
        })));
    };
    /**
     * 子表离开页面前检查数据变更
     */
    /**
     * 子表离开页面前检查数据变更
     * @return {?}
     */
    CheckDataService.prototype.checkChangesBeforeLeaveChild = /**
     * 子表离开页面前检查数据变更
     * @return {?}
     */
    function () {
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 继续判断
            /** @type {?} */
            var childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            var childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            var child = this.viewModelContext.uiState['$isAdd'].child;
            /** @type {?} */
            var subPaths = childPath.split('/');
            /** @type {?} */
            var currentChild = void 0;
            if (subPaths[0] && subPaths.length === 1) {
                currentChild = this.viewModelContext.bindingData[subPaths[0]];
            }
            if (!subPaths[0] && subPaths.length === 2) {
                currentChild = this.viewModelContext.bindingData[subPaths[1]];
            }
            if (subPaths.length > 2) {
                // 暂不处理从从表
                /** @type {?} */
                var childPath_1 = '';
                if (subPaths[0]) {
                    childPath_1 = subPaths[0];
                }
                for (var index = 1; index < subPaths.length; index++) {
                    childPath_1 = childPath_1 + subPaths[index];
                }
                currentChild = this.viewModelContext.bindingData[childPath_1];
            }
            /** @type {?} */
            var isChanged = this.checkForVariationBetweenTheTwo(currentChild, child);
            if (isChanged) {
                return of(true);
            }
            /** @type {?} */
            var entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId);
        }
        return of(true);
    };
    /**
     * @private
     * @param {?} newData
     * @param {?} oldData
     * @return {?}
     */
    CheckDataService.prototype.checkForVariationBetweenTheTwo = /**
     * @private
     * @param {?} newData
     * @param {?} oldData
     * @return {?}
     */
    function (newData, oldData) {
        /** @type {?} */
        var childKeys = Object.keys(oldData);
        /** @type {?} */
        var isChanged = false;
        for (var i = 0; i < childKeys.length; i++) {
            if (Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Object]' || Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Array]') {
                if (JSON.stringify(oldData[childKeys[i]]) !== JSON.stringify(newData[childKeys[i]])) {
                    return isChanged = true;
                }
            }
            else {
                if (oldData[childKeys[i]] !== newData[childKeys[i]]) {
                    return isChanged = true;
                }
            }
        }
        return isChanged;
    };
    /**
     * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
     * @param path 子表路径
     */
    /**
     * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    CheckDataService.prototype.checkChangesBeforeLeaveAddOrEditChild = /**
     * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    function (path) {
        var _this = this;
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 新增直接干掉
            /** @type {?} */
            var childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            var childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            var entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId).pipe(tap((/**
             * @return {?}
             */
            function () {
                _this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            })));
        }
        else {
            // 编辑还原
            /** @type {?} */
            var childID = this.viewModelContext.bindingData[path]['id'];
            /** @type {?} */
            var id = this.viewModelContext.bindingData[path]['parentID'];
            /** @type {?} */
            var childEntityData = this.viewModelContext.uiState['$childEntity'];
            if (!childEntityData) {
                return of(true);
            }
            this.viewModelContext.repository.entityCollection.getEntityById(id)[path].get(childID).load(childEntityData);
            return of(true);
        }
    };
    return CheckDataService;
}(BaseDataService));
export { CheckDataService };
//# sourceMappingURL=data:application/json;base64,