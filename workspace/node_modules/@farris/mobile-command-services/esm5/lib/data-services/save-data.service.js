/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/save-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { map, tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
var SaveDataService = /** @class */ (function (_super) {
    tslib_1.__extends(SaveDataService, _super);
    function SaveDataService(viewModelContext) {
        return _super.call(this, viewModelContext) || this;
    }
    /**
     * 保存数据
     */
    /**
     * 保存数据
     * @return {?}
     */
    SaveDataService.prototype.save = /**
     * 保存数据
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var save$ = this.befRepository.saveEntities();
        return save$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
            _this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        function (exception) {
            _this.loadingService.hide();
        })));
    };
    /**
     * 子表保存
     */
    /**
     * 子表保存
     * @return {?}
     */
    SaveDataService.prototype.saveByPath = /**
     * 子表保存
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var currentRootId = this.viewModelContext.bindingData.list.currentId;
        /** @type {?} */
        var update$ = this.befRepository.updateEntityById(currentRootId);
        /** @type {?} */
        var result$ = update$.pipe(map((/**
         * @return {?}
         */
        function () {
            return true;
        })), tap((/**
         * @return {?}
         */
        function () {
            _this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            _this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
            _this.loadingService.hide();
            _this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        function (exception) {
            _this.loadingService.hide();
        })));
        return result$;
    };
    return SaveDataService;
}(BaseDataService));
export { SaveDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2F2ZS1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvc2F2ZS1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFhLEdBQUcsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFdEQ7SUFBcUMsMkNBQWU7SUFFbEQseUJBQVksZ0JBQWtDO2VBQzVDLGtCQUFNLGdCQUFnQixDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRzs7Ozs7SUFDSSw4QkFBSTs7OztJQUFYO1FBQUEsaUJBY0M7UUFiQyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDOztZQUNyQixLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLEVBQUU7UUFDL0MsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUNmLEdBQUc7OztRQUNEO1lBQ0UsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUMzQixLQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNyQyxDQUFDOzs7O1FBQ0QsVUFBQyxTQUFjO1lBQ2IsS0FBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUM3QixDQUFDLEVBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHOzs7OztJQUNJLG9DQUFVOzs7O0lBQWpCO1FBQUEsaUJBcUJDO1FBcEJDLElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7O1lBQ3JCLGFBQWEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxTQUFTOztZQUNoRSxPQUFPLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLENBQUM7O1lBQzVELE9BQU8sR0FBRyxPQUFPLENBQUMsSUFBSSxDQUMxQixHQUFHOzs7UUFBQztZQUNGLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQyxFQUFDLEVBQ0YsR0FBRzs7O1FBQ0Q7WUFDRSxLQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUMvRCxLQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUNyRSxLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQzNCLEtBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLENBQUM7Ozs7UUFDRCxVQUFDLFNBQWM7WUFDYixLQUFJLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQzdCLENBQUMsRUFDRixDQUNGO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUNILHNCQUFDO0FBQUQsQ0FBQyxBQWxERCxDQUFxQyxlQUFlLEdBa0RuRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIG9mLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAsIG1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBFbnRpdHksIFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBCYXNlRGF0YVNlcnZpY2UgfSBmcm9tICcuL2Jhc2UtZGF0YS5zZXJ2aWNlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTYXZlRGF0YVNlcnZpY2UgZXh0ZW5kcyBCYXNlRGF0YVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICBzdXBlcih2aWV3TW9kZWxDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS/neWtmOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzYXZlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICBjb25zdCBzYXZlJCA9IHRoaXMuYmVmUmVwb3NpdG9yeS5zYXZlRW50aXRpZXMoKTtcclxuICAgIHJldHVybiBzYXZlJC5waXBlKFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2Vzcygn5L+d5a2Y5oiQ5YqfJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXhjZXB0aW9uOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWtkOihqOS/neWtmFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzYXZlQnlQYXRoKCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xyXG4gICAgdGhpcy5sb2FkaW5nU2VydmljZS5zaG93KCk7XHJcbiAgICBjb25zdCBjdXJyZW50Um9vdElkID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmJpbmRpbmdEYXRhLmxpc3QuY3VycmVudElkO1xyXG4gICAgY29uc3QgdXBkYXRlJCA9IHRoaXMuYmVmUmVwb3NpdG9yeS51cGRhdGVFbnRpdHlCeUlkKGN1cnJlbnRSb290SWQpO1xyXG4gICAgY29uc3QgcmVzdWx0JCA9IHVwZGF0ZSQucGlwZShcclxuICAgICAgbWFwKCgpID0+IHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfSksXHJcbiAgICAgIHRhcChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCckaXNBZGQnLCBudWxsKTtcclxuICAgICAgICAgIHRoaXMudmlld01vZGVsQ29udGV4dC51aVN0YXRlLnNldFByb3BlcnR5VmFsdWUoJyRjaGlsZEVudGl0eScsIG51bGwpO1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2Uuc3VjY2Vzcygn5L+d5a2Y5oiQ5YqfJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXhjZXB0aW9uOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICAgIHJldHVybiByZXN1bHQkO1xyXG4gIH1cclxufVxyXG4iXX0=