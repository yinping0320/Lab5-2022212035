/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/load-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { tap } from 'rxjs/operators';
import { BaseDataService } from './base-data.service';
import { DataUtil } from './data-util';
var LoadDataService = /** @class */ (function (_super) {
    tslib_1.__extends(LoadDataService, _super);
    function LoadDataService(viewModelContext) {
        return _super.call(this, viewModelContext) || this;
    }
    /**
     * 加载列表数据
     */
    /**
     * 加载列表数据
     * @param {?} filters
     * @param {?} sorts
     * @param {?=} size
     * @param {?=} index
     * @return {?}
     */
    LoadDataService.prototype.loadForList = /**
     * 加载列表数据
     * @param {?} filters
     * @param {?} sorts
     * @param {?=} size
     * @param {?=} index
     * @return {?}
     */
    function (filters, sorts, size, index) {
        var _this = this;
        if (typeof filters === 'string') {
            filters = DataUtil.stringTransformArray(filters);
        }
        if (typeof sorts === 'string') {
            sorts = DataUtil.stringTransformArray(sorts);
        }
        var _a = this.viewModelContext.repository.paginationInfo || { pageSize: null, pageIndex: null }, pageSize = _a.pageSize, pageIndex = _a.pageIndex;
        this.loadingService.show();
        if (!size && !pageSize) {
            pageSize = 20;
        }
        else if (size) {
            pageSize = size;
        }
        if (!index && !pageIndex) {
            pageIndex = 1;
        }
        else if (index) {
            pageIndex = index;
        }
        if (pageIndex === 1) {
            this.befRepository.entityCollection.clear();
        }
        /** @type {?} */
        var query$ = this.befRepository.getEntities(filters, sorts, pageSize, pageIndex);
        return query$.pipe(tap((/**
         * @return {?}
         */
        function () {
            var _a = _this.viewModelContext.repository.paginationInfo, pageIndex = _a.pageIndex, pageCount = _a.pageCount, totalCount = _a.totalCount;
            if (pageIndex === pageCount || totalCount === 0) {
                _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewFinished' });
            }
            else {
                _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewUnFinished' });
            }
            _this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'loadDataFinished' });
            _this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        function (exception) {
            _this.loadingService.hide();
        })));
    };
    /**
     * 加载卡片数据
     */
    /**
     * 加载卡片数据
     * @param {?} id
     * @return {?}
     */
    LoadDataService.prototype.loadForCard = /**
     * 加载卡片数据
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        DataUtil.clearFromValidateType(this.viewModelContext);
        this.loadingService.show();
        /** @type {?} */
        var get$ = this.befRepository.getEntityById(id);
        return get$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        function (exception) {
            _this.loadingService.hide();
        })));
    };
    /**
   * 加载进入子表后，未作任何操作之前的数据
   * @param path 子表路径
   */
    /**
     * 加载进入子表后，未作任何操作之前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    LoadDataService.prototype.loadDataForChildCard = /**
     * 加载进入子表后，未作任何操作之前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    function (path) {
        /** @type {?} */
        var childID = this.viewModelContext.bindingData[path]['id'];
        /** @type {?} */
        var id = this.viewModelContext.bindingData[path]['parentID'];
        /** @type {?} */
        var entity = this.viewModelContext.repository.entityCollection.getEntityById(id);
        /** @type {?} */
        var childEntityAll = entity[path];
        /** @type {?} */
        var childEntityData = childEntityAll.get(childID).data;
        this.viewModelContext.uiState.setPropertyValue('$childEntity', tslib_1.__assign({}, childEntityData));
    };
    return LoadDataService;
}(BaseDataService));
export { LoadDataService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZC1kYXRhLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL2RhdGEtc2VydmljZXMvbG9hZC1kYXRhLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQ0EsT0FBTyxFQUFhLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBR2hELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDO0lBQXFDLDJDQUFlO0lBRWxELHlCQUFZLGdCQUFrQztlQUM1QyxrQkFBTSxnQkFBZ0IsQ0FBQztJQUN6QixDQUFDO0lBRUQ7O09BRUc7Ozs7Ozs7OztJQUNJLHFDQUFXOzs7Ozs7OztJQUFsQixVQUFtQixPQUFjLEVBQUUsS0FBWSxFQUFFLElBQWEsRUFBRSxLQUFjO1FBQTlFLGlCQTRDQztRQTNDQyxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUMvQixPQUFPLEdBQUcsUUFBUSxDQUFDLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQ2xEO1FBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsS0FBSyxHQUFHLFFBQVEsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QztRQUNHLElBQUEsMkZBQWdILEVBQTlHLHNCQUFRLEVBQUUsd0JBQW9HO1FBQ3BILElBQUksQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLENBQUM7UUFFM0IsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUN0QixRQUFRLEdBQUcsRUFBRSxDQUFDO1NBQ2Y7YUFBTSxJQUFJLElBQUksRUFBRTtZQUNmLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FDakI7UUFFRCxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsU0FB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dmFibGUsIG9mLCBFTVBUWSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBzd2l0Y2hNYXAsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgRW50aXR5LCBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQmVmUmVwb3NpdG9yeSB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLWJlZic7XHJcbmltcG9ydCB7IEJhc2VEYXRhU2VydmljZSB9IGZyb20gJy4vYmFzZS1kYXRhLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBEYXRhVXRpbCB9IGZyb20gJy4vZGF0YS11dGlsJztcclxuXHJcbmV4cG9ydCBjbGFzcyBMb2FkRGF0YVNlcnZpY2UgZXh0ZW5kcyBCYXNlRGF0YVNlcnZpY2Uge1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICBzdXBlcih2aWV3TW9kZWxDb250ZXh0KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOWKoOi9veWIl+ihqOaVsOaNrlxyXG4gICAqL1xyXG4gIHB1YmxpYyBsb2FkRm9yTGlzdChmaWx0ZXJzOiBhbnlbXSwgc29ydHM6IGFueVtdLCBzaXplPzogbnVtYmVyLCBpbmRleD86IG51bWJlcik6IE9ic2VydmFibGU8RW50aXR5W10+IHtcclxuICAgIGlmICh0eXBlb2YgZmlsdGVycyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgZmlsdGVycyA9IERhdGFVdGlsLnN0cmluZ1RyYW5zZm9ybUFycmF5KGZpbHRlcnMpO1xyXG4gICAgfVxyXG4gICAgaWYgKHR5cGVvZiBzb3J0cyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgc29ydHMgPSBEYXRhVXRpbC5zdHJpbmdUcmFuc2Zvcm1BcnJheShzb3J0cyk7XHJcbiAgICB9XHJcbiAgICBsZXQgeyBwYWdlU2l6ZSwgcGFnZUluZGV4IH0gPSB0aGlzLnZpZXdNb2RlbENvbnRleHQucmVwb3NpdG9yeS5wYWdpbmF0aW9uSW5mbyB8fCB7IHBhZ2VTaXplOiBudWxsLCBwYWdlSW5kZXg6IG51bGwgfTtcclxuICAgIHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG5cclxuICAgIGlmICghc2l6ZSAmJiAhcGFnZVNpemUpIHtcclxuICAgICAgcGFnZVNpemUgPSAyMDtcclxuICAgIH0gZWxzZSBpZiAoc2l6ZSkge1xyXG4gICAgICBwYWdlU2l6ZSA9IHNpemU7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCFpbmRleCAmJiAhcGFnZUluZGV4KSB7XHJcbiAgICAgIHBhZ2VJbmRleCA9IDE7XHJcbiAgICB9IGVsc2UgaWYgKGluZGV4KSB7XHJcbiAgICAgIHBhZ2VJbmRleCA9IGluZGV4O1xyXG4gICAgfVxyXG5cclxuICAgIGlmIChwYWdlSW5kZXggPT09IDEpIHtcclxuICAgICAgdGhpcy5iZWZSZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uY2xlYXIoKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBxdWVyeSQgPSB0aGlzLmJlZlJlcG9zaXRvcnkuZ2V0RW50aXRpZXMoZmlsdGVycywgc29ydHMsIHBhZ2VTaXplLCBwYWdlSW5kZXgpO1xyXG4gICAgcmV0dXJuIHF1ZXJ5JC5waXBlKFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgbGV0IHsgcGFnZUluZGV4LCBwYWdlQ291bnQsIHRvdGFsQ291bnQgfSA9IHRoaXMudmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5LnBhZ2luYXRpb25JbmZvO1xyXG4gICAgICAgICAgaWYgKHBhZ2VJbmRleCA9PT0gcGFnZUNvdW50IHx8IHRvdGFsQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQuZXZlbnRCdXMudHJpZ2dlckV2ZW50KHsgdHlwZTogJ2xpc3R2aWV3RmluaXNoZWQnIH0pXHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQuYXBwQ29udGV4dC5ldmVudEJ1cy50cmlnZ2VyRXZlbnQoeyB0eXBlOiAnbGlzdHZpZXdVbkZpbmlzaGVkJyB9KVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQuZXZlbnRCdXMudHJpZ2dlckV2ZW50KHsgdHlwZTogJ2xvYWREYXRhRmluaXNoZWQnIH0pXHJcbiAgICAgICAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLmhpZGUoKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIChleGNlcHRpb246IGFueSkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Yqg6L295Y2h54mH5pWw5o2uXHJcbiAgICovXHJcbiAgcHVibGljIGxvYWRGb3JDYXJkKGlkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPEVudGl0eT4ge1xyXG4gICAgRGF0YVV0aWwuY2xlYXJGcm9tVmFsaWRhdGVUeXBlKHRoaXMudmlld01vZGVsQ29udGV4dCk7XHJcbiAgICB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgIGNvbnN0IGdldCQgPSB0aGlzLmJlZlJlcG9zaXRvcnkuZ2V0RW50aXR5QnlJZChpZCk7XHJcbiAgICByZXR1cm4gZ2V0JC5waXBlKFxyXG4gICAgICB0YXAoXHJcbiAgICAgICAgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5sb2FkaW5nU2VydmljZS5oaWRlKCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICAoZXhjZXB0aW9uOiBhbnkpID0+IHtcclxuICAgICAgICAgIHRoaXMubG9hZGluZ1NlcnZpY2UuaGlkZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiDliqDovb3ov5vlhaXlrZDooajlkI7vvIzmnKrkvZzku7vkvZXmk43kvZzkuYvliY3nmoTmlbDmja5cclxuICogQHBhcmFtIHBhdGgg5a2Q6KGo6Lev5b6EXHJcbiAqL1xyXG4gIHB1YmxpYyBsb2FkRGF0YUZvckNoaWxkQ2FyZChwYXRoOiBzdHJpbmcpIHtcclxuICAgIGNvbnN0IGNoaWxkSUQgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuYmluZGluZ0RhdGFbcGF0aF1bJ2lkJ107XHJcbiAgICBjb25zdCBpZCA9IHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YVtwYXRoXVsncGFyZW50SUQnXTtcclxuICAgIGNvbnN0IGVudGl0eSA9IHRoaXMudmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChpZClcclxuICAgIGNvbnN0IGNoaWxkRW50aXR5QWxsID0gZW50aXR5W3BhdGhdO1xyXG4gICAgY29uc3QgY2hpbGRFbnRpdHlEYXRhID0gY2hpbGRFbnRpdHlBbGwuZ2V0KGNoaWxkSUQpLmRhdGE7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZS5zZXRQcm9wZXJ0eVZhbHVlKCckY2hpbGRFbnRpdHknLCB7IC4uLmNoaWxkRW50aXR5RGF0YSB9KTtcclxuICB9XHJcbn1cclxuIl19