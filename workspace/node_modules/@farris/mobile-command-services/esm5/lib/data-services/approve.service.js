/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/approve.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EMPTY } from 'rxjs';
import { NotifyService } from '../ui-services/index';
var ApproveService = /** @class */ (function () {
    function ApproveService(wfTaskHandlerService, viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.wfTaskHandlerService = wfTaskHandlerService;
        this.notifyService = this.getService(NotifyService);
    }
    /**
     * 获取服务实例
     */
    /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    ApproveService.prototype.getService = /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    function (token) {
        /** @type {?} */
        var injector = this.viewModelContext.injector;
        return injector.get(token);
    };
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param bizBillID 业务单据Id
     * @param bizDefKey 入口单据Id
     * @param options 上下文参数
     * @param variables 可选参数
     */
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param {?} bizBillID 业务单据Id
     * @param {?} bizDefKey 入口单据Id
     * @param {?=} options 上下文参数
     * @param {?=} variables 可选参数
     * @return {?}
     */
    ApproveService.prototype.submitApproveWithBizDefKeyUseControl = /**
     * 提交审批(带入口单据使用wf控件)
     * @param {?} bizBillID 业务单据Id
     * @param {?} bizDefKey 入口单据Id
     * @param {?=} options 上下文参数
     * @param {?=} variables 可选参数
     * @return {?}
     */
    function (bizBillID, bizDefKey, options, variables) {
        if (options === void 0) { options = {}; }
        if (!bizBillID) {
            this.notifyService.error('业务单据Id不能为空');
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        /** @type {?} */
        var payload = tslib_1.__assign({ dataId: bizBillID, bizDefKey: bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    console.log('variables parse failed!');
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    };
    /**
     * 取消审批(支持主表、子表)
     * 迁移web端（已废弃）请调用新的取消提交方法
     * @param procInstId 流程实例Id
     */
    /**
     * 取消审批(支持主表、子表)
     * 迁移web端（已废弃）请调用新的取消提交方法
     * @param {?} procInstId 流程实例Id
     * @return {?}
     */
    ApproveService.prototype.cancelSubmit = /**
     * 取消审批(支持主表、子表)
     * 迁移web端（已废弃）请调用新的取消提交方法
     * @param {?} procInstId 流程实例Id
     * @return {?}
     */
    function (procInstId) {
        if (!procInstId) {
            this.notifyService.error('流程实例Id不能为空');
            return EMPTY;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ dataId: null, bizDefKey: null, procInstId: procInstId });
    };
    /**
     * 提交审批
     * @param dataId 表单id
     * @param bizDefKey 入口单据id
     */
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.submitWithBizDefKey = /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.submitWithBizDefKey(dataId, bizDefKey);
    };
    /**
     * 取消提交审批
     * @param dataId 表单id
     * @param bizDefKey 入口单据id
     */
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.cancelSubmitWithDataId = /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmitWithDataId(dataId, bizDefKey);
    };
    /**
     * 批量提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.batchSubmitWithBizDefKey = /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    };
    /**
     * 批量取消提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.batchCancelSubmitWithDataId = /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    };
    /**
    * 子表提交审批
    * @param parentDataId 主表id
    * @param childDataId 子表id
    * @param bizDefKey 入口单据id
    */
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.childSubmit = /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childSubmit(parentDataId, childDataId, bizDefKey);
    };
    /**
     * 子表取消提交审批
     * @param parentDataId 主表id
     * @param childDataId 子表id
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.childCancelSubmit = /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childCancelSubmit(parentDataId, childDataId, bizDefKey);
    };
    /**
     * 子表批量提交审批
     * @param parentDataId 主表id
     * @param childDataIds 子表id集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.childBatchSubmit = /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchSubmit(parentDataId, childDataIds, bizDefKey);
    };
    /**
     * 子表批量取消提交审批
     * @param parentDataId 主表id
     * @param childDataIds 子表id集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    ApproveService.prototype.childBatchCancelSubmit = /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey);
    };
    return ApproveService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.wfTaskHandlerService;
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.notifyService;
    /**
     * @type {?}
     * @protected
     */
    ApproveService.prototype.viewModelContext;
}
export { ApproveService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwcm92ZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi9kYXRhLXNlcnZpY2VzL2FwcHJvdmUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQWtCLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUc3QyxPQUFPLEVBQWtCLGFBQWEsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRXJFO0lBTUksd0JBQVksb0JBQTBDLEVBQVksZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDaEcsSUFBSSxDQUFDLG9CQUFvQixHQUFHLG9CQUFvQixDQUFDO1FBQ2pELElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBZ0IsYUFBYSxDQUFDLENBQUM7SUFDdkUsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0gsbUNBQVU7Ozs7OztJQUFWLFVBQWMsS0FBVTs7WUFDZCxRQUFRLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVE7UUFDL0MsT0FBTyxRQUFRLENBQUMsR0FBRyxDQUFJLEtBQUssQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7Ozs7O09BTUc7Ozs7Ozs7OztJQUNJLDZEQUFvQzs7Ozs7Ozs7SUFBM0MsVUFBNEMsU0FBaUIsRUFBRSxTQUFpQixFQUFFLE9BQWlCLEVBQUUsU0FBZTtRQUFsQyx3QkFBQSxFQUFBLFlBQWlCO1FBQy9GLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPLEtBQUssQ0FBQztTQUNoQjtRQUNELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDWixJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUN2QyxPQUFPLEtBQUssQ0FB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MUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGlCQUFpQixDQUFDLFlBQVksRUFBRSxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNILHlDQUFnQjs7Ozs7OztJQUFoQixVQUFpQixZQUFvQixFQUFFLFlBQXNCLEVBQUUsU0FBaUI7UUFDNUUsT0FBTyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLGdCQUFnQixDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDMUgsQ0FBQztJQUVEOzs7OztPQUtHOzs7Ozs7OztJQUNILCtDQUFzQjs7Ozs7OztJQUF0QixVQUF1QixZQUFvQixFQUFFLFlBQXNCLEVBQUUsU0FBaUI7UUFDbEYsT0FBTyxJQUFJLENBQUMsb0JBQW9CLElBQUksSUFBSSxDQUFDLG9CQUFvQixDQUFDLHNCQUFzQixDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDaEksQ0FBQztJQUVMLHFCQUFDO0FBQUQsQ0FBQyxBQW5KRCxJQW1KQzs7Ozs7O0lBakpHLDhDQUFtRDs7Ozs7SUFFbkQsdUNBQXFDOzs7OztJQUVtQiwwQ0FBNEM7O0FBK0l4RyxPQUFPLEVBQUUsY0FBYyxFQUFFLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiwgRU1QVFkgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgc3dpdGNoTWFwLCB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICdAZmFycmlzL21vYmlsZS1kZXZraXQnO1xyXG5pbXBvcnQgeyBMb2FkaW5nU2VydmljZSwgTm90aWZ5U2VydmljZSB9IGZyb20gJy4uL3VpLXNlcnZpY2VzL2luZGV4JztcclxuaW1wb3J0IHsgV2ZUYXNrSGFuZGxlclNlcnZpY2UgfSBmcm9tICcuLi93b3JrLWZsb3ctc2VydmljZS93Zi10YXNrLWhhbmRsZXIuc2VydmljZSdcclxuY2xhc3MgQXBwcm92ZVNlcnZpY2Uge1xyXG5cclxuICAgIHByaXZhdGUgd2ZUYXNrSGFuZGxlclNlcnZpY2U6IFdmVGFza0hhbmRsZXJTZXJ2aWNlO1xyXG5cclxuICAgIHByaXZhdGUgbm90aWZ5U2VydmljZTogTm90aWZ5U2VydmljZTtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcih3ZlRhc2tIYW5kbGVyU2VydmljZTogV2ZUYXNrSGFuZGxlclNlcnZpY2UsIHByb3RlY3RlZCB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICAgICAgdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZSA9IHdmVGFza0hhbmRsZXJTZXJ2aWNlO1xyXG4gICAgICAgIHRoaXMubm90aWZ5U2VydmljZSA9IHRoaXMuZ2V0U2VydmljZTxOb3RpZnlTZXJ2aWNlPihOb3RpZnlTZXJ2aWNlKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOiOt+WPluacjeWKoeWunuS+i1xyXG4gICAgICovXHJcbiAgICBnZXRTZXJ2aWNlPFQ+KHRva2VuOiBhbnkpOiBUIHtcclxuICAgICAgICBjb25zdCBpbmplY3RvciA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3RvcjtcclxuICAgICAgICByZXR1cm4gaW5qZWN0b3IuZ2V0PFQ+KHRva2VuKTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaPkOS6pOWuoeaJuSjluKblhaXlj6PljZXmja7kvb/nlKh3ZuaOp+S7tilcclxuICAgICAqIEBwYXJhbSBiaXpCaWxsSUQg5Lia5Yqh5Y2V5o2uSWRcclxuICAgICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uSWRcclxuICAgICAqIEBwYXJhbSBvcHRpb25zIOS4iuS4i+aWh+WPguaVsFxyXG4gICAgICogQHBhcmFtIHZhcmlhYmxlcyDlj6/pgInlj4LmlbBcclxuICAgICAqL1xyXG4gICAgcHVibGljIHN1Ym1pdEFwcHJvdmVXaXRoQml6RGVmS2V5VXNlQ29udHJvbChiaXpCaWxsSUQ6IHN0cmluZywgYml6RGVmS2V5OiBzdHJpbmcsIG9wdGlvbnM6IGFueSA9IHt9LCB2YXJpYWJsZXM/OiBhbnkpIHtcclxuICAgICAgICBpZiAoIWJpekJpbGxJRCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+S4muWKoeWNleaNrklk5LiN6IO95Li656m6Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFiaXpEZWZLZXkpIHtcclxuICAgICAgICAgICAgdGhpcy5ub3RpZnlTZXJ2aWNlLmVycm9yKCflhaXlj6PljZXmja5JZOS4jeiDveS4uuepuicpO1xyXG4gICAgICAgICAgICByZXR1cm4gRU1QVFk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghb3B0aW9ucyB8fCB0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBwYXlsb2FkOiBhbnkgPSB7XHJcbiAgICAgICAgICAgIGRhdGFJZDogYml6QmlsbElELFxyXG4gICAgICAgICAgICBiaXpEZWZLZXksXHJcbiAgICAgICAgICAgIC4uLm9wdGlvbnNcclxuICAgICAgICB9O1xyXG4gICAgICAgIC8vIOWkhOeQhnZhcmlhYmxlc+WPguaVsFxyXG4gICAgICAgIGlmICh2YXJpYWJsZXMpIHtcclxuICAgICAgICAgICAgaWYgKHZhcmlhYmxlcy5zdGFydHNXaXRoKCd7JykgJiYgdmFyaWFibGVzLmVuZHNXaXRoKCd9JykpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzID0gSlNPTi5wYXJzZSh2YXJpYWJsZXMpO1xyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3ZhcmlhYmxlcyBwYXJzZSBmYWlsZWQhJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGVzID0ge307XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGF5bG9hZC52YXJpYWJsZXMgPSB2YXJpYWJsZXM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlICYmIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2Uuc3RhcnRQcm9jZXNzKHBheWxvYWQpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI5a6h5om5KOaUr+aMgeS4u+ihqOOAgeWtkOihqClcclxuICAgICAqIOi/geenu3dlYuerr++8iOW3suW6n+W8g++8ieivt+iwg+eUqOaWsOeahOWPlua2iOaPkOS6pOaWueazlVxyXG4gICAgICogQHBhcmFtIHByb2NJbnN0SWQg5rWB56iL5a6e5L6LSWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbmNlbFN1Ym1pdChwcm9jSW5zdElkOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGlmICghcHJvY0luc3RJZCkge1xyXG4gICAgICAgICAgICB0aGlzLm5vdGlmeVNlcnZpY2UuZXJyb3IoJ+a1geeoi+WunuS+i0lk5LiN6IO95Li656m6Jyk7XHJcbiAgICAgICAgICAgIHJldHVybiBFTVBUWTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UgJiYgdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZS5jYW5jZWxTdWJtaXQoeyBkYXRhSWQ6IG51bGwsIGJpekRlZktleTogbnVsbCwgcHJvY0luc3RJZCB9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaPkOS6pOWuoeaJuVxyXG4gICAgICogQHBhcmFtIGRhdGFJZCDooajljZVpZFxyXG4gICAgICogQHBhcmFtIGJpekRlZktleSDlhaXlj6PljZXmja5pZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3VibWl0V2l0aEJpekRlZktleShkYXRhSWQ6IHN0cmluZywgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlICYmIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2Uuc3VibWl0V2l0aEJpekRlZktleShkYXRhSWQsIGJpekRlZktleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlj5bmtojmj5DkuqTlrqHmiblcclxuICAgICAqIEBwYXJhbSBkYXRhSWQg6KGo5Y2VaWRcclxuICAgICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICAgICAqL1xyXG4gICAgcHVibGljIGNhbmNlbFN1Ym1pdFdpdGhEYXRhSWQoZGF0YUlkOiBzdHJpbmcsIGJpekRlZktleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZSAmJiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlLmNhbmNlbFN1Ym1pdFdpdGhEYXRhSWQoZGF0YUlkLCBiaXpEZWZLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5om56YeP5o+Q5Lqk5a6h5om5XHJcbiAgICAgKiBAcGFyYW0gZGF0YUlkcyDooajljZVJROmbhuWQiFxyXG4gICAgICogQHBhcmFtIGJpekRlZktleSDlhaXlj6PljZXmja5pZFxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYmF0Y2hTdWJtaXRXaXRoQml6RGVmS2V5KGRhdGFJZHM6IHN0cmluZ1tdLCBiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UgJiYgdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZS5iYXRjaFN1Ym1pdFdpdGhCaXpEZWZLZXkoZGF0YUlkcywgYml6RGVmS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOaJuemHj+WPlua2iOaPkOS6pOWuoeaJuVxyXG4gICAgICogQHBhcmFtIGRhdGFJZHMg6KGo5Y2VSUTpm4blkIhcclxuICAgICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICAgICAqL1xyXG4gICAgYmF0Y2hDYW5jZWxTdWJtaXRXaXRoRGF0YUlkKGRhdGFJZHM6IHN0cmluZ1tdLCBiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UgJiYgdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZS5iYXRjaENhbmNlbFN1Ym1pdFdpdGhEYXRhSWQoZGF0YUlkcywgYml6RGVmS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICog5a2Q6KGo5o+Q5Lqk5a6h5om5XHJcbiAgICAqIEBwYXJhbSBwYXJlbnREYXRhSWQg5Li76KGoaWRcclxuICAgICogQHBhcmFtIGNoaWxkRGF0YUlkIOWtkOihqGlkXHJcbiAgICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICAgICovXHJcbiAgICBjaGlsZFN1Ym1pdChwYXJlbnREYXRhSWQ6IHN0cmluZywgY2hpbGREYXRhSWQ6IHN0cmluZywgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlICYmIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UuY2hpbGRTdWJtaXQocGFyZW50RGF0YUlkLCBjaGlsZERhdGFJZCwgYml6RGVmS2V5KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWtkOihqOWPlua2iOaPkOS6pOWuoeaJuVxyXG4gICAgICogQHBhcmFtIHBhcmVudERhdGFJZCDkuLvooahpZFxyXG4gICAgICogQHBhcmFtIGNoaWxkRGF0YUlkIOWtkOihqGlkXHJcbiAgICAgKiBAcGFyYW0gYml6RGVmS2V5IOWFpeWPo+WNleaNrmlkXHJcbiAgICAgKi9cclxuICAgIGNoaWxkQ2FuY2VsU3VibWl0KHBhcmVudERhdGFJZDogc3RyaW5nLCBjaGlsZERhdGFJZDogc3RyaW5nLCBiaXpEZWZLZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UgJiYgdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZS5jaGlsZENhbmNlbFN1Ym1pdChwYXJlbnREYXRhSWQsIGNoaWxkRGF0YUlkLCBiaXpEZWZLZXkpO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5a2Q6KGo5om56YeP5o+Q5Lqk5a6h5om5XHJcbiAgICAgKiBAcGFyYW0gcGFyZW50RGF0YUlkIOS4u+ihqGlkXHJcbiAgICAgKiBAcGFyYW0gY2hpbGREYXRhSWRzIOWtkOihqGlk6ZuG5ZCIXHJcbiAgICAgKiBAcGFyYW0gYml6RGVmS2V5IOWFpeWPo+WNleaNrmlkXHJcbiAgICAgKi9cclxuICAgIGNoaWxkQmF0Y2hTdWJtaXQocGFyZW50RGF0YUlkOiBzdHJpbmcsIGNoaWxkRGF0YUlkczogc3RyaW5nW10sIGJpekRlZktleTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gdGhpcy53ZlRhc2tIYW5kbGVyU2VydmljZSAmJiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlLmNoaWxkQmF0Y2hTdWJtaXQocGFyZW50RGF0YUlkLCBjaGlsZERhdGFJZHMsIGJpekRlZktleSk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiDlrZDooajmibnph4/lj5bmtojmj5DkuqTlrqHmiblcclxuICAgICAqIEBwYXJhbSBwYXJlbnREYXRhSWQg5Li76KGoaWRcclxuICAgICAqIEBwYXJhbSBjaGlsZERhdGFJZHMg5a2Q6KGoaWTpm4blkIhcclxuICAgICAqIEBwYXJhbSBiaXpEZWZLZXkg5YWl5Y+j5Y2V5o2uaWRcclxuICAgICAqL1xyXG4gICAgY2hpbGRCYXRjaENhbmNlbFN1Ym1pdChwYXJlbnREYXRhSWQ6IHN0cmluZywgY2hpbGREYXRhSWRzOiBzdHJpbmdbXSwgYml6RGVmS2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndmVGFza0hhbmRsZXJTZXJ2aWNlICYmIHRoaXMud2ZUYXNrSGFuZGxlclNlcnZpY2UuY2hpbGRCYXRjaENhbmNlbFN1Ym1pdChwYXJlbnREYXRhSWQsIGNoaWxkRGF0YUlkcywgYml6RGVmS2V5KTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCB7IEFwcHJvdmVTZXJ2aWNlIH0iXX0=