/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/remove-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { of, EMPTY } from 'rxjs';
import { tap, switchMap } from 'rxjs/operators';
import { HttpMethods } from '@farris/mobile-devkit';
import { DataUtil } from './data-util';
import { BaseDataService } from './base-data.service';
/**
 * 删除数据服务类
 */
var /**
 * 删除数据服务类
 */
RemoveDataService = /** @class */ (function (_super) {
    tslib_1.__extends(RemoveDataService, _super);
    function RemoveDataService(viewModelContext) {
        return _super.call(this, viewModelContext) || this;
    }
    /**
     * 删除数据
     */
    /**
     * 删除数据
     * @param {?} id
     * @return {?}
     */
    RemoveDataService.prototype.removeById = /**
     * 删除数据
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        /** @type {?} */
        var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === false) {
                return EMPTY;
            }
            if (_this['context'] && _this['context'].eventParams && _this['context'].eventParams.swipecellClose) {
                _this['context'].eventParams.swipecellClose();
            }
            return _this.cancelChanges(id);
        })));
        return result$;
    };
    /**
     * 确认删除
     * @param id
     */
    /**
     * 确认删除
     * @private
     * @param {?} id
     * @return {?}
     */
    RemoveDataService.prototype.cancelChanges = /**
     * 确认删除
     * @private
     * @param {?} id
     * @return {?}
     */
    function (id) {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var remove$ = this.befRepository.removeEntityAndSaveById(id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.notifyService.success('删除成功');
            _this.loadingService.hide();
        }), (/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
            _this.notifyService.error('删除失败');
        })));
    };
    /**
     * 批量删除数据
     */
    /**
     * 批量删除数据
     * @param {?} ids
     * @return {?}
     */
    RemoveDataService.prototype.removeByIds = /**
     * 批量删除数据
     * @param {?} ids
     * @return {?}
     */
    function (ids) {
        var _this = this;
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            var selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            function (selectedItem) {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        var multiRemove$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === false) {
                return EMPTY;
            }
            _this.loadingService.show();
            return _this.befRepository.removeEntitiesByIds(ids);
        })));
        return multiRemove$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
            _this.notifyService.success('删除成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        function (exception) {
            _this.loadingService.hide();
            // this.exceptionService.show('删除失败', exception);
        })));
    };
    /**
     * 删除后代节点数据
     */
    /**
     * 删除后代节点数据
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    RemoveDataService.prototype.removeByPathAndId = /**
     * 删除后代节点数据
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (path, id) {
        var _this = this;
        /** @type {?} */
        var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === false) {
                return EMPTY;
            }
            if (_this['context'] && _this['context'].eventParams && _this['context'].eventParams.swipecellClose) {
                _this['context'].eventParams.swipecellClose();
            }
            return _this.removeByPathAndIdChanges(path, id);
        })));
        return result$;
    };
    /**
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    RemoveDataService.prototype.removeByPathAndIdChanges = /**
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (path, id) {
        var _this = this;
        this.loadingService.show();
        /** @type {?} */
        var entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
        /** @type {?} */
        var remove$ = this.befRepository.removeEntityByPath(entityPath, id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
            _this.notifyService.success('删除成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loadingService.hide();
            console.error(error);
        })));
    };
    /**
     * 批量删除后代节点数据
     */
    /**
     * 批量删除后代节点数据
     * @param {?} path
     * @param {?} ids
     * @return {?}
     */
    RemoveDataService.prototype.removeByPathAndIds = /**
     * 批量删除后代节点数据
     * @param {?} path
     * @param {?} ids
     * @return {?}
     */
    function (path, ids) {
        throw new Error('Not Implemented');
    };
    /**
     * 业务附件批量删除数据
     */
    /**
     * 业务附件批量删除数据
     * @param {?} url
     * @param {?} ids
     * @return {?}
     */
    RemoveDataService.prototype.removeByBusinessIds = /**
     * 业务附件批量删除数据
     * @param {?} url
     * @param {?} ids
     * @return {?}
     */
    function (url, ids) {
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            var selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            function (selectedItem) {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        var params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        var requestConfig = {
            params: params,
            body: {
                dataChange: [],
                variableChange: null
            }
        };
        return this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig, true);
        // this.loadingService.show();
        // const multiRemove$ = this.dialogService.confirm('是否删除').pipe(
        //   switchMap(val => {
        //     if (val === false) {
        //       return EMPTY;
        //     }
        //   }));
        // return multiRemove$.pipe(
        //   tap(
        //     () => {
        //       this.loadingService.hide();
        //     },
        //     (exception: any) => {
        //       this.loadingService.hide();
        //     }
        //   )
        // );
    };
    /**
     * 业务附件删除后代节点数据
     */
    /**
     * 业务附件删除后代节点数据
     * @param {?} url
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    RemoveDataService.prototype.removeByBusinessPathAndId = /**
     * 业务附件删除后代节点数据
     * @param {?} url
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    function (url, path, id) {
        var _this = this;
        /** @type {?} */
        var result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (val === false) {
                return EMPTY;
            }
            return _this.befRepository.apiProxy.request(HttpMethods.PUT, url);
        })));
        return result$;
    };
    /**
     * 子表清除编辑与新增标记
     * @returns
     */
    /**
     * 子表清除编辑与新增标记
     * @return {?}
     */
    RemoveDataService.prototype.ClearStatusAfterchildCardSave = /**
     * 子表清除编辑与新增标记
     * @return {?}
     */
    function () {
        this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
        this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
        return of(true);
    };
    return RemoveDataService;
}(BaseDataService));
/**
 * 删除数据服务类
 */
export { RemoveDataService };
//# sourceMappingURL=data:application/json;base64,