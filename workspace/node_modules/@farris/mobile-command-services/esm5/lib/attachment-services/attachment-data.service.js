/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { of } from 'rxjs';
import { tap, switchMap, map } from 'rxjs/operators';
import { HttpMethods, BindingPathConverter, DataChangeType } from '@farris/mobile-devkit';
import { BefDataPathUtil } from '@farris/mobile-bef';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件数据服务
 */
var /**
 * 附件数据服务
 */
AttachmentDataService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function AttachmentDataService(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    Object.defineProperty(AttachmentDataService.prototype, "befRepository", {
        /**
         * 实体仓库
         */
        get: /**
         * 实体仓库
         * @private
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this.viewModelContext.repository));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AttachmentDataService.prototype, "bindingData", {
        /**
         * 绑定数据
         */
        get: /**
         * 绑定数据
         * @private
         * @return {?}
         */
        function () {
            return this.viewModelContext.bindingData;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 更新附件信息
     */
    /**
     * 更新附件信息
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    AttachmentDataService.prototype.updateRow = /**
     * 更新附件信息
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    function (attachmentInfoFieldPath, attachmentInfo) {
        var _this = this;
        /** @type {?} */
        var apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        var updateUrl = apiProxy.baseUrl + "/service/updateattachment";
        /** @type {?} */
        var serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        /** @type {?} */
        var body = {
            updateAttachInfo: serverAttachInfo
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return _this.syncAttachmentInfosToClient();
        })), tap((/**
         * @return {?}
         */
        function () {
            console.log('loading hide ...');
        })));
    };
    /**
     * 批量创建附件行数据
     */
    /**
     * 批量创建附件行数据
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfos
     * @return {?}
     */
    AttachmentDataService.prototype.updateRows = /**
     * 批量创建附件行数据
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfos
     * @return {?}
     */
    function (attachmentInfoFieldPath, attachmentInfos) {
        var _this = this;
        /** @type {?} */
        var apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        var updateUrl = apiProxy.baseUrl + "/service/batchuploadattachment";
        /** @type {?} */
        var serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        /** @type {?} */
        var isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        /** @type {?} */
        var body = {
            batchUploadInfo: serverAttachInfo
        };
        /** @type {?} */
        var requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return _this.appendAttachmentInfosToClient(result, isRootEntity);
        })), tap((/**
         * @return {?}
         */
        function () {
            console.log('hide loading ...');
        })));
    };
    /**
     * 创建服务器端需要的更新信息
     */
    /**
     * 创建服务器端需要的更新信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    AttachmentDataService.prototype.createUpdateAttachInfo = /**
     * 创建服务器端需要的更新信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    function (attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        var attachmentId = attachmentInfo.attachmentId;
        /** @type {?} */
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        var hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    };
    /**
     * 创建服务器端需要的批量新增附件信息
     */
    /**
     * 创建服务器端需要的批量新增附件信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    AttachmentDataService.prototype.createBatchCreateAttachInfo = /**
     * 创建服务器端需要的批量新增附件信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    function (attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        var attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        /** @type {?} */
        var parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        var nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        var hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        var serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    };
    /**
     * 同步服务器端最新信息到客户端
     * @todo:
     * 1、主对象批量新增时不支持
     */
    /**
     * 同步服务器端最新信息到客户端
     * \@todo:
     * 1、主对象批量新增时不支持
     * @return {?}
     */
    AttachmentDataService.prototype.syncAttachmentInfosToClient = /**
     * 同步服务器端最新信息到客户端
     * \@todo:
     * 1、主对象批量新增时不支持
     * @return {?}
     */
    function () {
        /** @type {?} */
        var rootDataId = this.bindingData.list.currentId;
        return this.befRepository.updateEntityById(rootDataId);
    };
    /**
     * 追击主表数据到客户端
     */
    /**
     * 追击主表数据到客户端
     * @param {?} listData
     * @param {?} isRootEntity
     * @return {?}
     */
    AttachmentDataService.prototype.appendAttachmentInfosToClient = /**
     * 追击主表数据到客户端
     * @param {?} listData
     * @param {?} isRootEntity
     * @return {?}
     */
    function (listData, isRootEntity) {
        var _this = this;
        if (isRootEntity === true) {
            /** @type {?} */
            var entities = this.befRepository.buildEntities(listData);
            this.befRepository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            return this.syncAttachmentInfosToClient().pipe(map((/**
             * @return {?}
             */
            function () {
                _this.befRepository.dataChangeHistory.addChange({ dataId: listData[0].id, changeType: DataChangeType.Add });
                return listData;
            })));
        }
    };
    return AttachmentDataService;
}());
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    AttachmentDataService.prototype.viewModelContext;
}
export { AttachmentDataService };
//# sourceMappingURL=data:application/json;base64,