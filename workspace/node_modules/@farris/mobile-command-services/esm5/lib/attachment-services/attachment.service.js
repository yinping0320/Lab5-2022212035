/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMPTY, forkJoin } from 'rxjs';
import { tap } from 'rxjs/operators';
import { BindingPathConverter } from '@farris/mobile-devkit';
import { AttachmentUtil } from './attachment.util';
/**
 * 附件服务
 */
var /**
 * 附件服务
 */
AttachmentService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function AttachmentService(viewModelContext, entityService, removeDataService, attachDataService) {
        /**
         * 默认根目录
         */
        this.defaultRootDirId = 'default-root';
        this.viewModelContext = viewModelContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.removeDataService = removeDataService;
    }
    Object.defineProperty(AttachmentService.prototype, "defaultParentDirName", {
        /**
         * 默认子目录
         */
        get: /**
         * 默认子目录
         * @private
         * @return {?}
         */
        function () {
            return this.viewModelContext.bindingData.list.currentId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    AttachmentService.prototype.uploadAndUpdateRow = /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    function (attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        var fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
        /** @type {?} */
        var result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
         * @return {?}
         */
        function () {
            console.log('hide loading ...');
        })));
        return result$;
    };
    /**
     * 上传多个文件
     */
    /**
     * 上传多个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    AttachmentService.prototype.uploadAndBatchAddRows = /**
     * 上传多个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    function (attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        var fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        var result$ = this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos).pipe(tap((/**
         * @return {?}
         */
        function () {
            console.log('hide loading ...');
        })));
        return result$;
    };
    /**
     * 批量删除附件所在的行
     */
    /**
     * 批量删除附件所在的行
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    AttachmentService.prototype.removeAttachmentRows = /**
     * 批量删除附件所在的行
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (attachmentInfoFieldPath) {
        var _this = this;
        if (!attachmentInfoFieldPath) {
            return EMPTY;
        }
        /** @type {?} */
        var dataIds = this.getDataIdsToRemove(attachmentInfoFieldPath);
        //如果是主表
        if (attachmentInfoFieldPath.split('/').length <= 2) {
            return this.removeDataService.removeByIds(dataIds);
        }
        // 如果是子表
        else {
            /** @type {?} */
            var removeObservables_1 = [];
            if (dataIds.length === 0) {
                alert('请选择要删除的文件');
            }
            /** @type {?} */
            var bindingListPath_1 = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            function (dataId) {
                /** @type {?} */
                var removeObservable = _this.removeDataService.removeByPathAndId(bindingListPath_1, dataId);
                removeObservables_1.push(removeObservable);
            }));
            return forkJoin(removeObservables_1);
        }
    };
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     */
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    AttachmentService.prototype.getUploadFileInfosFromContext = 
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        var uploadFileInfos = (/** @type {?} */ (commandContext.eventParams));
        if (!uploadFileInfos) {
            return [];
        }
        return uploadFileInfos;
    };
    /**
     * 获取要删除的附件对应的数据id数组
     */
    /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    AttachmentService.prototype.getDataIdsToRemove = /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (attachmentInfoFieldPath) {
        var _this = this;
        /** @type {?} */
        var attachIds = this.getAttachmentIdsToRemoveFromContext();
        /** @type {?} */
        var dataIds = [];
        attachIds.forEach((/**
         * @param {?} attachId
         * @return {?}
         */
        function (attachId) {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            /** @type {?} */
            var dataId = _this.convertAttachmentIdToDataId(attachId, attachmentInfoFieldPath);
            dataIds.push(dataId);
        }));
        return dataIds;
    };
    /**
     * 从命令上下文中获取要删除附件ids
     */
    /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    AttachmentService.prototype.getAttachmentIdsToRemoveFromContext = /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        return (/** @type {?} */ (commandContext.eventParams));
    };
    /**
     * 根据路径获取附件字段值数组
     * @param fieldPath 字段路径
     */
    /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    AttachmentService.prototype.convertAttachmentIdToDataId = /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (fileId, attachmentInfoFieldPath) {
        // 解析路径
        /** @type {?} */
        var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        /** @type {?} */
        var attachFieldName = attachInfoBindingPath.pop();
        /** @type {?} */
        var attachListBindingPath = attachInfoBindingPath;
        // 获取附件id数组
        /** @type {?} */
        var entityListData = this.entityService.getEntityListData(attachListBindingPath);
        /** @type {?} */
        var targetEntityData = entityListData.find((/**
         * @param {?} entityData
         * @return {?}
         */
        function (entityData) {
            if (entityData[attachFieldName]) {
                /** @type {?} */
                var attachmentId = entityData[attachFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        }));
        return targetEntityData.id;
    };
    /**
     * 获取带附件的BindingList的Path
     */
    /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    AttachmentService.prototype.getBindingListPathWithAttachments = /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (attachmentInfoFieldPath) {
        /** @type {?} */
        var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        attachInfoBindingPath.pop();
        /** @type {?} */
        var bindingListPath = attachInfoBindingPath;
        return '/' + bindingListPath.join('/');
    };
    return AttachmentService;
}());
if (false) {
    /**
     * 默认根目录
     * @type {?}
     * @private
     */
    AttachmentService.prototype.defaultRootDirId;
    /**
     * 视图模型
     * @type {?}
     * @private
     */
    AttachmentService.prototype.viewModelContext;
    /**
     * 附件数据服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.attachDataService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.entityService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.removeDataService;
}
export { AttachmentService };
//# sourceMappingURL=data:application/json;base64,