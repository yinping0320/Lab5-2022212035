/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/wf-task-handler.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { StartProcessPayload, CancelSubmitPayload } from './entity/start-process-payload';
/**
 * @record
 */
function Response() { }
if (false) {
    /** @type {?} */
    Response.prototype.type;
    /** @type {?} */
    Response.prototype.message;
}
;
var WfTaskHandlerService = /** @class */ (function () {
    function WfTaskHandlerService(processSelectorService, taskService, loadingService, notifyService) {
        this.processSelectorService = processSelectorService;
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.subject = new Subject();
    }
    /**
     * 提交审批
     * @param payload 上下文参数
     */
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?}
     */
    WfTaskHandlerService.prototype.startProcess = /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?}
     */
    function (payload) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        this.processSelectorService.setParam(payload);
        this.processSelectorService.getSubject().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.type === 'success') {
                if (response.message) {
                    _this.notifyService.success(response.message);
                    subject.next(true);
                }
            }
            else if (response.type === 'error') {
                subject.next(false);
                _this.notifyService.error(response.message);
            }
        }), (/**
         * @return {?}
         */
        function () {
            _this.loadingService.hide();
        }));
        return subject.asObservable();
    };
    /**
     * 取消提交
     * @payload payload 参数
     */
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    WfTaskHandlerService.prototype.cancelSubmit = /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var _this = this;
        /** @type {?} */
        var subject = new Subject();
        this.loadingService.show();
        this.taskService.cancelSubmit(payload).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        function (re) {
            subject.next(true);
            _this.loadingService.hide();
            _this.notifyService.success('取消提交成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            subject.next(false);
            _this.loadingService.hide();
            _this.notifyService.error(error && error.response && error.response.data && error.response.data.Message || '取消提交失败');
        }));
        return subject.asObservable();
    };
    /**
   * 提交审批
   * @param dataId 表单id
   * @param bizDefKey 入口单据id
   */
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.submitWithBizDefKey = /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = dataId;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    };
    /**
     * 取消提交审批
     * @param dataId 表单id
     * @param bizDefKey 入口单据id
     */
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.cancelSubmitWithDataId = /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    };
    /**
     * 批量提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchSubmitWithBizDefKey = /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        var _this = this;
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        /** @type {?} */
        var subject = new Subject();
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[i];
            startPayload.variables = { simulate: false };
            this.taskService.startProcess(startPayload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.procDefs.length > 1 || response.nextFlowNodes.length > 1) { //存在多个流程，单独提交//多个节点，单独提交
                    failedNum++;
                }
                else {
                    successNum++;
                }
                if (successNum + failedNum === dataIds.length) {
                    _this.loadingService.hide();
                    subject.next(true); //全部执行完再返回
                    _this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            function () {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    _this.loadingService.hide();
                    subject.next(false); //全部执行完再返回
                    _this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    };
    /**
     * 批量取消提交审批
     * @param dataIds 表单ID集合
     * @param bizDefKey 入口单据id
     */
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.batchCancelSubmitWithDataId = /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (dataIds, bizDefKey) {
        var _this = this;
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var subject = new Subject();
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var cancelSubmitPayload = new CancelSubmitPayload();
            cancelSubmitPayload.dataId = dataIds[i];
            cancelSubmitPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelSubmitPayload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            function (re) {
                successNum++;
                if (successNum + failedNum === dataIds.length) {
                    _this.loadingService.hide();
                    subject.next(true);
                    _this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            function () {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    _this.loadingService.hide();
                    subject.next(false);
                    _this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    };
    /**
   * 子表提交审批
   * @param parentDataId 主表id
   * @param childDataId 子表id
   * @param bizDefKey 入口单据id
   */
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childSubmit = /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = parentDataId + "," + childDataId;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    };
    /**
   * 子表取消提交审批
   * @param parentDataId 主表id
   * @param childDataId 子表id
   * @param bizDefKey 入口单据id
   */
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childCancelSubmit = /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = parentDataId + "," + childDataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    };
    /**
   * 子表批量提交审批
   * @param parentDataId 主表id
   * @param childDataIds 子表id集合
   * @param bizDefKey 入口单据id
   */
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childBatchSubmit = /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        function (childDataId) { return parentDataId + "," + childDataId; }));
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    };
    /**
   * 子表批量取消提交审批
   * @param parentDataId 主表id
   * @param childDataIds 子表id集合
   * @param bizDefKey 入口单据id
   */
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    WfTaskHandlerService.prototype.childBatchCancelSubmit = /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    function (parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        function (childDataId) { return parentDataId + "," + childDataId; }));
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    };
    /**
   * 批量提交、取消提交提示信息
   */
    /**
     * 批量提交、取消提交提示信息
     * @private
     * @param {?} actionCode
     * @param {?} successNum
     * @param {?} failedNum
     * @return {?}
     */
    WfTaskHandlerService.prototype.showBatchSubmitInfo = /**
     * 批量提交、取消提交提示信息
     * @private
     * @param {?} actionCode
     * @param {?} successNum
     * @param {?} failedNum
     * @return {?}
     */
    function (actionCode, successNum, failedNum) {
        if (successNum && !failedNum) { //批量全部成功
            actionCode === "submit" && this.notifyService.success('提交审批成功！');
            actionCode === "cancel" && this.notifyService.success('取消提交成功！');
        }
        if (successNum && failedNum) { //批量有成功有失败
            this.notifyService.warning("\u64CD\u4F5C\u6210\u529F" + successNum + "\u6761\uFF0C\u5931\u8D25" + failedNum + "\u6761!");
        }
        if (!successNum && failedNum) { //批量全部失败
            actionCode === "submit" && this.notifyService.error('提交审批失败！');
            actionCode === "cancel" && this.notifyService.error('取消提交失败！');
        }
    };
    return WfTaskHandlerService;
}());
export { WfTaskHandlerService };
if (false) {
    /** @type {?} */
    WfTaskHandlerService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.processSelectorService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.notifyService;
}
//# sourceMappingURL=data:application/json;base64,