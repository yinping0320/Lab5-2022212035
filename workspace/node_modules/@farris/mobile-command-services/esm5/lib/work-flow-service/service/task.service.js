/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/service/task.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TaskService = /** @class */ (function () {
    function TaskService(httpSvc) {
        this.httpSvc = httpSvc;
    }
    /**
     * @param {?} error
     * @param {?=} actionCode
     * @return {?}
     */
    TaskService.prototype.error = /**
     * @param {?} error
     * @param {?=} actionCode
     * @return {?}
     */
    function (error, actionCode) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            if (actionCode) {
                message = actionCode + "操作失败:" + message;
            }
            return message;
        }
    };
    /**
     * 启动流程预解析
     * @param payload API所需的上下文参数
     */
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    TaskService.prototype.startProcessSimulate = /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/startProcess-simulation";
        return this.httpSvc.post(url, payload, {});
    };
    /**
     * 启动流程接口
     * @param payload API所需的上下文参数
     */
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    TaskService.prototype.startProcess = /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    function (payload) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/startProcess";
        return this.httpSvc.post(url, payload, {});
    };
    /**
     * 取消提交
     * @param param 参数
     */
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    TaskService.prototype.cancelSubmit = /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    function (param) {
        /** @type {?} */
        var url = "/api/runtime/wf/v1.0/processInstances/cancelSubmit";
        return this.httpSvc.post(url, param, {});
    };
    return TaskService;
}());
export { TaskService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.httpSvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFzay5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi93b3JrLWZsb3ctc2VydmljZS9zZXJ2aWNlL3Rhc2suc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQU1BO0lBRUkscUJBQ1ksT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtJQUMzQixDQUFDOzs7Ozs7SUFFTCwyQkFBSzs7Ozs7SUFBTCxVQUFNLEtBQVUsRUFBRSxVQUFtQjtRQUNqQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFOztnQkFDekMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTztZQUNqQyxJQUFJLFVBQVUsRUFBRTtnQkFDWixPQUFPLEdBQUcsVUFBVSxHQUFHLE9BQU8sR0FBRyxPQUFPLENBQUM7YUFDNUM7WUFDRCxPQUFPLE9BQU8sQ0FBQztTQUNsQjtJQUNMLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILDBDQUFvQjs7Ozs7SUFBcEIsVUFBcUIsT0FBWTs7WUFDdkIsR0FBRyxHQUFHLCtEQUErRDtRQUMzRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDL0MsQ0FBQztJQUVEOzs7T0FHRzs7Ozs7O0lBQ0gsa0NBQVk7Ozs7O0lBQVosVUFBYSxPQUFZOztZQUNmLEdBQUcsR0FBRyxvREFBb0Q7UUFDaEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFRDs7O09BR0c7Ozs7OztJQUNILGtDQUFZOzs7OztJQUFaLFVBQWEsS0FBMEI7O1lBQzdCLEdBQUcsR0FBRyxvREFBb0Q7UUFDaEUsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFTCxrQkFBQztBQUFELENBQUMsQUEzQ0QsSUEyQ0M7Ozs7Ozs7SUF4Q08sOEJBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtZGV2a2l0JztcclxuaW1wb3J0IHsgQ2FuY2VsU3VibWl0UGF5bG9hZCB9IGZyb20gJy4uL2VudGl0eS9zdGFydC1wcm9jZXNzLXBheWxvYWQnO1xyXG5cclxuXHJcblxyXG5leHBvcnQgY2xhc3MgVGFza1NlcnZpY2Uge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIHByaXZhdGUgaHR0cFN2YzogSHR0cENsaWVudCxcclxuICAgICkgeyB9XHJcblxyXG4gICAgZXJyb3IoZXJyb3I6IGFueSwgYWN0aW9uQ29kZT86IHN0cmluZykge1xyXG4gICAgICAgIGlmIChlcnJvciAmJiBlcnJvci5lcnJvciAmJiBlcnJvci5lcnJvci5NZXNzYWdlKSB7XHJcbiAgICAgICAgICAgIHZhciBtZXNzYWdlID0gZXJyb3IuZXJyb3IuTWVzc2FnZTtcclxuICAgICAgICAgICAgaWYgKGFjdGlvbkNvZGUpIHtcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBhY3Rpb25Db2RlICsgXCLmk43kvZzlpLHotKU6XCIgKyBtZXNzYWdlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWQr+WKqOa1geeoi+mihOino+aekFxyXG4gICAgICogQHBhcmFtIHBheWxvYWQgQVBJ5omA6ZyA55qE5LiK5LiL5paH5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0UHJvY2Vzc1NpbXVsYXRlKHBheWxvYWQ6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL3Byb2Nlc3NJbnN0YW5jZXMvc3RhcnRQcm9jZXNzLXNpbXVsYXRpb25gO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmh0dHBTdmMucG9zdCh1cmwsIHBheWxvYWQsIHt9KTtcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIOWQr+WKqOa1geeoi+aOpeWPo1xyXG4gICAgICogQHBhcmFtIHBheWxvYWQgQVBJ5omA6ZyA55qE5LiK5LiL5paH5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIHN0YXJ0UHJvY2VzcyhwYXlsb2FkOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IGAvYXBpL3J1bnRpbWUvd2YvdjEuMC9wcm9jZXNzSW5zdGFuY2VzL3N0YXJ0UHJvY2Vzc2A7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cFN2Yy5wb3N0KHVybCwgcGF5bG9hZCwge30pO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICog5Y+W5raI5o+Q5LqkXHJcbiAgICAgKiBAcGFyYW0gcGFyYW0g5Y+C5pWwXHJcbiAgICAgKi9cclxuICAgIGNhbmNlbFN1Ym1pdChwYXJhbTogQ2FuY2VsU3VibWl0UGF5bG9hZCk6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYC9hcGkvcnVudGltZS93Zi92MS4wL3Byb2Nlc3NJbnN0YW5jZXMvY2FuY2VsU3VibWl0YDtcclxuICAgICAgICByZXR1cm4gdGhpcy5odHRwU3ZjLnBvc3QodXJsLCBwYXJhbSwge30pO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=