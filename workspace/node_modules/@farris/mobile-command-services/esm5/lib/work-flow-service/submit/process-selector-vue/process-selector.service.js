/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/submit/process-selector-vue/process-selector.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Subject } from 'rxjs';
import { StartProcessPayload, FlowNodeInfo } from '../../entity/start-process-payload';
import { SubmitApprove } from '@farris/mobile-business-ui';
var ProcessSelectorService = /** @class */ (function () {
    function ProcessSelectorService(taskService) {
        this.taskService = taskService;
        //候选下一环节
        this.processPlaceholder = '选择流程'; //选择流程placeholder
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [];
        //选择的下一环节ID，后续环节id的拼接
        this.selectedValues = ['clear'];
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject();
        this.processReadOnly = false; //选择流程框是否只读
        //选择流程框是否只读
        this.nodeReadOnly = true; //选择节点下拉框是否只读
    }
    //弹框实例
    /**
     * @param {?} param
     * @return {?}
     */
    ProcessSelectorService.prototype.setParam = 
    //弹框实例
    /**
     * @param {?} param
     * @return {?}
     */
    function (param) {
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.startProcessSimulate(this.payload);
    };
    /**
     * @param {?} payload
     * @return {?}
     */
    ProcessSelectorService.prototype.startProcessSimulate = /**
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var _this = this;
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.destProcesses = response.procDefs.map((/**
             * @param {?} process
             * @return {?}
             */
            function (process) { return ({ id: process.procDefId, name: process.procDefName }); }));
            if (_this.destProcesses.length === 1) {
                _this.processReadOnly = true;
                _this.selectedProcessId = response.procDefs[0].procDefId;
                _this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    process: _this.selectedProcessId,
                    processData: _this.destProcesses,
                    processOc: _this.selectProcessChange.bind(_this),
                    processReadFlag: _this.processReadOnly,
                    processHolder: _this.processPlaceholder,
                    nextNodeReadFlag: _this.nodeReadOnly,
                    submit: _this.submit.bind(_this),
                    cancel: _this.back.bind(_this)
                });
                _this.response = response;
                _this.setNextNode(response);
            }
            else {
                _this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    processData: _this.destProcesses,
                    processOc: _this.selectProcessChange.bind(_this),
                    processReadFlag: _this.processReadOnly,
                    processHolder: _this.processPlaceholder,
                    nextNodeReadFlag: _this.nodeReadOnly,
                    submit: _this.submit.bind(_this),
                    cancel: _this.back.bind(_this)
                });
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    };
    /**
   * 选择某个流程后
   * @param data
   */
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorService.prototype.selectProcessChange = /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.clearHelp();
        this.clearNode();
        this.selectedProcessId = data;
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        // const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            // load.close();
            _this.response = response;
            _this.setNextNode(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            //load.close();
            _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该流程存在问题' });
        }));
    };
    /**
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorService.prototype.getsimulationPathsIndexData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        return this.destNodes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        function (item) { return item.id === data; }));
    };
    /**
   * 选择节点后事件
   */
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    ProcessSelectorService.prototype.selectNodeChange = /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        this.clearHelp();
        this.clearAssignInfos();
        this.selectedNodeId = data;
        this.vm.open({
            nextNode: this.selectedNodeId,
        });
        //const nodeNames = data.data.name.split('，');
        /** @type {?} */
        var index = this.getsimulationPathsIndexData(data);
        if (this.response.simulationPaths[index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        function (node) { return node.resolved === true; }))) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[index]);
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            var payload_1 = new StartProcessPayload();
            payload_1.processDefinitionId = this.selectedProcessId;
            payload_1.dataId = this.payload.dataId;
            payload_1.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((/**
             * @param {?} nodeId
             * @param {?} index
             * @return {?}
             */
            function (nodeId, index) {
                /** @type {?} */
                var nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                //nextFlowNode.activityDefinitionName = nodeNames[index];
                payload_1.nextFlowNodes.push(nextFlowNode);
            }));
            //const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload_1).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                //load.close();
                _this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                //load.close();
                _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该节点存在问题' });
            }));
        }
    };
    /**
   * 设置下一环节
   */
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    ProcessSelectorService.prototype.setNextNode = /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    function (response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
         * @param {?} path
         * @return {?}
         */
        function (path) { return ({
            id: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionId; })).join('，'),
            name: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionName; })).join('，')
        }); }));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        var defaultIndex = response.simulationPaths.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        function (a) { return a.default; }));
        if (defaultIndex > -1) {
            this.destNodes.length === 1 ? (this.nodeReadOnly = true) : (this.nodeReadOnly = false);
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
        }
        else {
            this.selectedNodeId = '';
            this.nodeReadOnly = false;
            this.nodePlaceholder = '请选择';
        }
        this.vm.open({
            nextNodeOc: this.selectNodeChange.bind(this),
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nextNodeHolder: this.nodePlaceholder
        });
    };
    /**
     * 设置当前指派信息帮助参数
     */
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    ProcessSelectorService.prototype.setAssignInfo = /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    function (simulationPaths) {
        var _this = this;
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        function (nodeId) {
            /** @type {?} */
            var node = simulationPaths.nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            function (node) { return node.activityDefinitionId === nodeId; }));
            if (node) {
                /** @type {?} */
                var selectedAssignees = node.selectedAssignees;
                /** @type {?} */
                var assigneeReadFlag = false;
                /** @type {?} */
                var assignee_1 = '';
                /** @type {?} */
                var assigneeHolder = '请选择人员';
                if (selectedAssignees && selectedAssignees.length >= 1) {
                    assigneeReadFlag = true;
                    assigneeHolder = "";
                    selectedAssignees.forEach((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) {
                        assignee_1 = assignee_1 + user.name + ', ';
                    }));
                    assignee_1 = assignee_1.slice(0, assignee_1.length - 2);
                }
                if (node.anonymous) {
                    assignee_1 = node.anonymousText === '' ? '' : node.anonymousText && node.anonymousText;
                }
                _this.assignInfos.push({
                    label: (_this.selectedNodeId && _this.selectedNodeId.split('，').length > 1 ? node.activityDefinitionName : '') + "\u529E\u7406\u4EBA\u5458",
                    selectedAssignees: selectedAssignees,
                    assigneeReadFlag: assigneeReadFlag,
                    assignee: assignee_1,
                    assigneeHolder: assigneeHolder,
                    assigneeInfo: tslib_1.__assign({}, node.assigneeInfo, { assigneeUsers: { items: (node.assigneeInfo && node.assigneeInfo.assigneeUsers) || [] } }),
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    function (user) { return { id: user.id, name: user.name }; })),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
            else {
                _this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
        }));
        this.vm.open({
            assigneeOc: this.assigneeOc.bind(this),
            assignInfos: this.assignInfos
        });
    };
    // 办理人员选择事件
    // 办理人员选择事件
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    ProcessSelectorService.prototype.assigneeOc = 
    // 办理人员选择事件
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    function (data, index) {
        this.assignInfos[index].assignees = data.items;
        this.selectedValues[index] = data.value;
        this.vm.open({
            selectedValues: this.selectedValues
        });
    };
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.clearHelp = /**
     * @return {?}
     */
    function () {
        this.vm.open({
            selectedValues: ['clear']
        });
    };
    // 清空节点
    // 清空节点
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.clearNode = 
    // 清空节点
    /**
     * @return {?}
     */
    function () {
        this.selectedNodeId = '',
            this.destNodes = [],
            this.nodeReadOnly = true,
            this.nodePlaceholder = '',
            this.assignInfos = [];
        this.vm.open({
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nodePlaceholder: this.nodePlaceholder,
            assignInfos: this.assignInfos
        });
    };
    // 清空办理人员
    // 清空办理人员
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.clearAssignInfos = 
    // 清空办理人员
    /**
     * @return {?}
     */
    function () {
        this.assignInfos = [];
        this.vm.open({
            assignInfos: this.assignInfos
        });
    };
    /**
     * 取消页面弹框
     */
    /**
     * 取消页面弹框
     * @return {?}
     */
    ProcessSelectorService.prototype.back = /**
     * 取消页面弹框
     * @return {?}
     */
    function () {
        this.clearProcess();
        this.subject.next({ type: 'success', message: '' });
    };
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.submit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.selectedProcessId) {
            this.subject.next({ type: 'error', message: '请选流程' });
            return;
        }
        if (!this.selectedNodeId) {
            this.subject.next({ type: 'error', message: '请选节点' });
            return;
        }
        if (this.assignInfos.filter((/**
         * @param {?} info
         * @return {?}
         */
        function (info) { return ((info.assigneeInfo && info.assigneeInfo.assigneeUsers.items.length) || info.selectedAssignees.length) && !info.assignees.length; })).length) {
            this.subject.next({ type: 'error', message: '请选办理人员' });
            return;
        }
        /** @type {?} */
        var nodes = this.selectedNodeId.split('，');
        for (var i = 0; i < nodes.length; i++) {
            /** @type {?} */
            var nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            };
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.taskService.startProcess(this.payload).subscribe((/**
         * @return {?}
         */
        function () {
            _this.clearProcess();
            _this.subject.next({ type: 'success', message: '提交成功' });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    };
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.getSubject = /**
     * @return {?}
     */
    function () {
        return this.subject.asObservable();
    };
    /**
     * @return {?}
     */
    ProcessSelectorService.prototype.clearProcess = /**
     * @return {?}
     */
    function () {
        this.vm.close();
        this.vm = null;
        this.selectedProcessId = '';
        this.selectedNodeId = '';
        this.processReadOnly = false;
        this.nodeReadOnly = true;
    };
    return ProcessSelectorService;
}());
export { ProcessSelectorService };
if (false) {
    /** @type {?} */
    ProcessSelectorService.prototype.destProcesses;
    /** @type {?} */
    ProcessSelectorService.prototype.destNodes;
    /** @type {?} */
    ProcessSelectorService.prototype.processPlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.nodePlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.response;
    /** @type {?} */
    ProcessSelectorService.prototype.assignInfos;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedProcessId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedNodeId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedValues;
    /** @type {?} */
    ProcessSelectorService.prototype.payload;
    /** @type {?} */
    ProcessSelectorService.prototype.subject;
    /** @type {?} */
    ProcessSelectorService.prototype.processReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.nodeReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorService.prototype.taskService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1zZWxlY3Rvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtY29tbWFuZC1zZXJ2aWNlcy8iLCJzb3VyY2VzIjpbImxpYi93b3JrLWZsb3ctc2VydmljZS9zdWJtaXQvcHJvY2Vzcy1zZWxlY3Rvci12dWUvcHJvY2Vzcy1zZWxlY3Rvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUNBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0IsT0FBTyxFQUFFLG1CQUFtQixFQUFFLFlBQVksRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBSXZGLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUczRDtJQUVFLGdDQUNVLFdBQXdCO1FBQXhCLGdCQUFXLEdBQVgsV0FBVyxDQUFhOztRQU1sQyx1QkFBa0IsR0FBVyxNQUFNLENBQUMsQ0FBQSxpQkFBaUI7O1FBSXJELGdCQUFXLEdBQUcsRUFBRSxDQUFDOztRQUtqQixtQkFBYyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7UUFFM0IsWUFBTyxHQUFHLElBQUksbUJBQW1CLENBQUMsQ0FBQSxpQkFBaUI7O1FBQ25ELFlBQU8sR0FBRyxJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3hCLG9CQUFlLEdBQVksS0FBSyxDQUFDLENBQUEsV0FBVzs7UUFDNUMsaUJBQVksR0FBWSxJQUFJLENBQUMsQ0FBQSxhQUFhO0lBbkJ0QyxDQUFDOzs7Ozs7SUF1QkwseUNBQVE7Ozs7OztJQUFSLFVBQVMsS0FBMEI7UUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLG1CQUFtQixHQUFHLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQztRQUM3RCxJQUFJLENBQUMsT0FBTyxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxvQkFBb0IsQ0FB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QUFJLENBQUM7SUFDMUIsQ0FBQztJQUNILDZCQUFDO0FBQUQsQ0FBQyxBQWxVRCxJQWtVQzs7OztJQTVUQywrQ0FBOEM7O0lBQzlDLDJDQUEwQzs7SUFFMUMsb0RBQW9DOztJQUNwQyxpREFBd0I7O0lBQ3hCLDBDQUEyQjs7SUFFM0IsNkNBQWlCOztJQUVqQixtREFBMEI7O0lBQzFCLGdEQUF1Qjs7SUFFdkIsZ0RBQTJCOztJQUUzQix5Q0FBa0M7O0lBQ2xDLHlDQUF3Qjs7SUFDeEIsaURBQWlDOztJQUNqQyw4Q0FBNkI7O0lBRTdCLG9DQUFROzs7OztJQXRCTiw2Q0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgU3RhcnRQcm9jZXNzUGF5bG9hZCwgRmxvd05vZGVJbmZvIH0gZnJvbSAnLi4vLi4vZW50aXR5L3N0YXJ0LXByb2Nlc3MtcGF5bG9hZCc7XHJcbmltcG9ydCB7IFNpbXVsYXRlUmVzcG9uc2UsIFNpbXVsYXRpb25QYXRoIH0gZnJvbSAnLi4vLi4vZW50aXR5L3NpbXVsYXRlLXJlc3BvbnNlJztcclxuXHJcbmltcG9ydCB7IFRhc2tTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2VydmljZS90YXNrLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBTdWJtaXRBcHByb3ZlIH0gZnJvbSAnQGZhcnJpcy9tb2JpbGUtYnVzaW5lc3MtdWknO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBQcm9jZXNzU2VsZWN0b3JTZXJ2aWNlIHtcclxuXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwcml2YXRlIHRhc2tTZXJ2aWNlOiBUYXNrU2VydmljZVxyXG4gICkgeyB9XHJcblxyXG4gIGRlc3RQcm9jZXNzZXM6IHsgaWQ6IHN0cmluZywgbmFtZTogc3RyaW5nIH1bXTsvL+WAmemAiea1geeoi1xyXG4gIGRlc3ROb2RlczogeyBpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcgfVtdOy8v5YCZ6YCJ5LiL5LiA546v6IqCXHJcblxyXG4gIHByb2Nlc3NQbGFjZWhvbGRlcjogc3RyaW5nID0gJ+mAieaLqea1geeoiyc7Ly/pgInmi6nmtYHnqItwbGFjZWhvbGRlclxyXG4gIG5vZGVQbGFjZWhvbGRlcjogc3RyaW5nOy8v6YCJ5oup5LiL5LiA546v6IqCcGxhY2Vob2xkZXJcclxuICByZXNwb25zZTogU2ltdWxhdGVSZXNwb25zZTsvL+S/neWtmOaooeaLn+a1geeoi+WQjui/lOWbnueahOWGheWuue+8jOmAieaLqeiKgueCueaXtuS9v+eUqFxyXG5cclxuICBhc3NpZ25JbmZvcyA9IFtdO1xyXG5cclxuICBzZWxlY3RlZFByb2Nlc3NJZDogc3RyaW5nOy8v6YCJ5oup55qE5rWB56iL5a6a5LmJSURcclxuICBzZWxlY3RlZE5vZGVJZDogc3RyaW5nOyAvL+mAieaLqeeahOS4i+S4gOeOr+iKgklE77yM5ZCO57ut546v6IqCaWTnmoTmi7zmjqVcclxuXHJcbiAgc2VsZWN0ZWRWYWx1ZXMgPSBbJ2NsZWFyJ107XHJcblxyXG4gIHBheWxvYWQgPSBuZXcgU3RhcnRQcm9jZXNzUGF5bG9hZDsvL+S/neWtmOihqOWNleS4iuS8oOadpeeahHBheWxvYWRcclxuICBzdWJqZWN0ID0gbmV3IFN1YmplY3QoKTtcclxuICBwcm9jZXNzUmVhZE9ubHk6IGJvb2xlYW4gPSBmYWxzZTsvL+mAieaLqea1geeoi+ahhuaYr+WQpuWPquivu1xyXG4gIG5vZGVSZWFkT25seTogYm9vbGVhbiA9IHRydWU7Ly/pgInmi6noioLngrnkuIvmi4nmoYbmmK/lkKblj6ror7tcclxuXHJcbiAgdm06IGFueTsvL+W8ueahhuWunuS+i1xyXG5cclxuICBzZXRQYXJhbShwYXJhbTogU3RhcnRQcm9jZXNzUGF5bG9hZCkge1xyXG4gICAgdGhpcy5wYXlsb2FkLmlkID0gcGFyYW0uaWQ7XHJcbiAgICB0aGlzLnBheWxvYWQucHJvY2Vzc0RlZmluaXRpb25JZCA9IHBhcmFtLnByb2Nlc3NEZWZpbml0aW9uSWQ7XHJcbiAgICB0aGlzLnBheWxvYWQucHJvY2Vzc0RlZmluaXRpb25LZXkgPSBwYXJhbS5wcm9jZXNzRGVmaW5pdGlvbktleTtcclxuICAgIHRoaXMucGF5bG9hZC5iaXpEZWZLZXkgPSBwYXJhbS5iaXpEZWZLZXk7XHJcbiAgICB0aGlzLnBheWxvYWQuZGF0YU1vZGVsSWQgPSBwYXJhbS5kYXRhTW9kZWxJZDtcclxuICAgIHRoaXMucGF5bG9hZC5kYXRhSWQgPSBwYXJhbS5kYXRhSWQ7XHJcbiAgICB0aGlzLnBheWxvYWQubmFtZSA9IHBhcmFtLm5hbWU7XHJcbiAgICB0aGlzLnBheWxvYWQuc3RhcnRVc2VySWQgPSBwYXJhbS5zdGFydFVzZXJJZDtcclxuICAgIHRoaXMucGF5bG9hZC5uZXh0Rmxvd05vZGVzID0gW107XHJcbiAgICB0aGlzLnN0YXJ0UHJvY2Vzc1NpbXVsYXRlKHRoaXMucGF5bG9hZCk7XHJcbiAgfVxyXG5cclxuICBzdGFydFByb2Nlc3NTaW11bGF0ZShwYXlsb2FkOiBTdGFydFByb2Nlc3NQYXlsb2FkKSB7XHJcbiAgICB0aGlzLnRhc2tTZXJ2aWNlLnN0YXJ0UHJvY2Vzc1NpbXVsYXRlKHBheWxvYWQpLnN1YnNjcmliZSgocmVzcG9uc2U6IFNpbXVsYXRlUmVzcG9uc2UpID0+IHtcclxuICAgICAgdGhpcy5kZXN0UHJvY2Vzc2VzID0gcmVzcG9uc2UucHJvY0RlZnMubWFwKHByb2Nlc3MgPT4gKHsgaWQ6IHByb2Nlc3MucHJvY0RlZklkLCBuYW1lOiBwcm9jZXNzLnByb2NEZWZOYW1lIH0pKTtcclxuICAgICAgaWYgKHRoaXMuZGVzdFByb2Nlc3Nlcy5sZW5ndGggPT09IDEpIHtcclxuICAgICAgICB0aGlzLnByb2Nlc3NSZWFkT25seSA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZFByb2Nlc3NJZCA9IHJlc3BvbnNlLnByb2NEZWZzWzBdLnByb2NEZWZJZDtcclxuICAgICAgICB0aGlzLnZtID0gKFN1Ym1pdEFwcHJvdmUgYXMgYW55KS5jb25maXJtKFxyXG4gICAgICAgICAge1xyXG4gICAgICAgICAgICBwcm9jZXNzOiB0aGlzLnNlbGVjdGVkUHJvY2Vzc0lkLFxyXG4gICAgICAgICAgICBwcm9jZXNzRGF0YTogdGhpcy5kZXN0UHJvY2Vzc2VzLFxyXG4gICAgICAgICAgICBwcm9jZXNzT2M6IHRoaXMuc2VsZWN0UHJvY2Vzc0NoYW5nZS5iaW5kKHRoaXMpLFxyXG4gICAgICAgICAgICBwcm9jZXNzUmVhZEZsYWc6IHRoaXMucHJvY2Vzc1JlYWRPbmx5LFxyXG4gICAgICAgICAgICBwcm9jZXNzSG9sZGVyOiB0aGlzLnByb2Nlc3NQbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgbmV4dE5vZGVSZWFkRmxhZzogdGhpcy5ub2RlUmVhZE9ubHksXHJcbiAgICAgICAgICAgIHN1Ym1pdDogdGhpcy5zdWJtaXQuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgY2FuY2VsOiB0aGlzLmJhY2suYmluZCh0aGlzKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIClcclxuICAgICAgICB0aGlzLnJlc3BvbnNlID0gcmVzcG9uc2U7XHJcbiAgICAgICAgdGhpcy5zZXROZXh0Tm9kZShyZXNwb25zZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy52bSA9IChTdWJtaXRBcHByb3ZlIGFzIGFueSkuY29uZmlybShcclxuICAgICAgICAgIHtcclxuICAgICAgICAgICAgcHJvY2Vzc0RhdGE6IHRoaXMuZGVzdFByb2Nlc3NlcyxcclxuICAgICAgICAgICAgcHJvY2Vzc09jOiB0aGlzLnNlbGVjdFByb2Nlc3NDaGFuZ2UuYmluZCh0aGlzKSxcclxuICAgICAgICAgICAgcHJvY2Vzc1JlYWRGbGFnOiB0aGlzLnByb2Nlc3NSZWFkT25seSxcclxuICAgICAgICAgICAgcHJvY2Vzc0hvbGRlcjogdGhpcy5wcm9jZXNzUGxhY2Vob2xkZXIsXHJcbiAgICAgICAgICAgIG5leHROb2RlUmVhZEZsYWc6IHRoaXMubm9kZVJlYWRPbmx5LFxyXG4gICAgICAgICAgICBzdWJtaXQ6IHRoaXMuc3VibWl0LmJpbmQodGhpcyksXHJcbiAgICAgICAgICAgIGNhbmNlbDogdGhpcy5iYWNrLmJpbmQodGhpcylcclxuICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgIH1cclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlOiBlcnJvciAmJiBlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhICYmIGVycm9yLnJlc3BvbnNlLmRhdGEuTWVzc2FnZSB8fCAn5o+Q5Lqk5aSx6LSlJyB9KTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvKipcclxuICog6YCJ5oup5p+Q5Liq5rWB56iL5ZCOXHJcbiAqIEBwYXJhbSBkYXRhXHJcbiAqL1xyXG4gIHNlbGVjdFByb2Nlc3NDaGFuZ2UoZGF0YTogYW55KSB7XHJcbiAgICB0aGlzLmNsZWFySGVscCgpO1xyXG4gICAgdGhpcy5jbGVhck5vZGUoKTtcclxuICAgIHRoaXMuc2VsZWN0ZWRQcm9jZXNzSWQgPSBkYXRhO1xyXG5cclxuICAgIHZhciBwYXlsb2FkID0gbmV3IFN0YXJ0UHJvY2Vzc1BheWxvYWQoKTtcclxuICAgIHBheWxvYWQucHJvY2Vzc0RlZmluaXRpb25JZCA9IHRoaXMuc2VsZWN0ZWRQcm9jZXNzSWQ7XHJcbiAgICBwYXlsb2FkLmRhdGFJZCA9IHRoaXMucGF5bG9hZC5kYXRhSWQ7XHJcblxyXG4gICAgLy8gY29uc3QgbG9hZCA9IHRoaXMubG9hZGluZ1NlcnZpY2Uuc2hvdygpO1xyXG4gICAgdGhpcy50YXNrU2VydmljZS5zdGFydFByb2Nlc3NTaW11bGF0ZShwYXlsb2FkKS5zdWJzY3JpYmUoKHJlc3BvbnNlOiBTaW11bGF0ZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgIC8vIGxvYWQuY2xvc2UoKTtcclxuICAgICAgdGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlO1xyXG4gICAgICB0aGlzLnNldE5leHROb2RlKHJlc3BvbnNlKTtcclxuICAgIH0sIGVycm9yID0+IHtcclxuICAgICAgLy9sb2FkLmNsb3NlKCk7XHJcbiAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHsgdHlwZTogJ2Vycm9yJywgbWVzc2FnZTogZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UuZGF0YSAmJiBlcnJvci5yZXNwb25zZS5kYXRhLk1lc3NhZ2UgfHwgJ+ivpea1geeoi+WtmOWcqOmXrumimCcgfSk7XHJcbiAgICB9KVxyXG4gIH1cclxuXHJcblxyXG4gIGdldHNpbXVsYXRpb25QYXRoc0luZGV4RGF0YShkYXRhKSB7XHJcbiAgICByZXR1cm4gdGhpcy5kZXN0Tm9kZXMuZmluZEluZGV4KGl0ZW0gPT4gaXRlbS5pZCA9PT0gZGF0YSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gKiDpgInmi6noioLngrnlkI7kuovku7ZcclxuICovXHJcbiAgc2VsZWN0Tm9kZUNoYW5nZShkYXRhOiBhbnkpIHtcclxuICAgIHRoaXMuY2xlYXJIZWxwKCk7XHJcbiAgICB0aGlzLmNsZWFyQXNzaWduSW5mb3MoKTtcclxuICAgIHRoaXMuc2VsZWN0ZWROb2RlSWQgPSBkYXRhO1xyXG4gICAgdGhpcy52bS5vcGVuKHtcclxuICAgICAgbmV4dE5vZGU6IHRoaXMuc2VsZWN0ZWROb2RlSWQsXHJcbiAgICB9KVxyXG4gICAgLy9jb25zdCBub2RlTmFtZXMgPSBkYXRhLmRhdGEubmFtZS5zcGxpdCgn77yMJyk7XHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMuZ2V0c2ltdWxhdGlvblBhdGhzSW5kZXhEYXRhKGRhdGEpO1xyXG4gICAgaWYgKHRoaXMucmVzcG9uc2Uuc2ltdWxhdGlvblBhdGhzW2luZGV4XS5ub2RlSW5mb0xpc3QuZXZlcnkobm9kZSA9PiBub2RlLnJlc29sdmVkID09PSB0cnVlKSkgey8v5bey6aKE6Kej5p6Q5Y+C5LiO6ICFXHJcbiAgICAgIHRoaXMuc2V0QXNzaWduSW5mbyh0aGlzLnJlc3BvbnNlLnNpbXVsYXRpb25QYXRoc1tpbmRleF0pO1xyXG4gICAgfSBlbHNlIHsvL+acqumihOino+aekOWPguS4juiAhVxyXG4gICAgICBsZXQgcGF5bG9hZCA9IG5ldyBTdGFydFByb2Nlc3NQYXlsb2FkKCk7XHJcbiAgICAgIHBheWxvYWQucHJvY2Vzc0RlZmluaXRpb25JZCA9IHRoaXMuc2VsZWN0ZWRQcm9jZXNzSWQ7XHJcbiAgICAgIHBheWxvYWQuZGF0YUlkID0gdGhpcy5wYXlsb2FkLmRhdGFJZDtcclxuICAgICAgcGF5bG9hZC5uZXh0Rmxvd05vZGVzID0gW107XHJcblxyXG4gICAgICB0aGlzLnNlbGVjdGVkTm9kZUlkLnNwbGl0KCfvvIwnKS5mb3JFYWNoKChub2RlSWQsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgbGV0IG5leHRGbG93Tm9kZSA9IG5ldyBGbG93Tm9kZUluZm8oKTtcclxuICAgICAgICBuZXh0Rmxvd05vZGUuYWN0aXZpdHlEZWZpbml0aW9uSWQgPSBub2RlSWQ7XHJcbiAgICAgICAgLy9uZXh0Rmxvd05vZGUuYWN0aXZpdHlEZWZpbml0aW9uTmFtZSA9IG5vZGVOYW1lc1tpbmRleF07XHJcbiAgICAgICAgcGF5bG9hZC5uZXh0Rmxvd05vZGVzLnB1c2gobmV4dEZsb3dOb2RlKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgICAvL2NvbnN0IGxvYWQgPSB0aGlzLmxvYWRpbmdTZXJ2aWNlLnNob3coKTtcclxuICAgICAgdGhpcy50YXNrU2VydmljZS5zdGFydFByb2Nlc3NTaW11bGF0ZShwYXlsb2FkKS5zdWJzY3JpYmUoKHJlc3BvbnNlOiBTaW11bGF0ZVJlc3BvbnNlKSA9PiB7XHJcbiAgICAgICAgLy9sb2FkLmNsb3NlKCk7XHJcbiAgICAgICAgdGhpcy5zZXRBc3NpZ25JbmZvKHJlc3BvbnNlLnNpbXVsYXRpb25QYXRoc1swXSk7Ly/pgInmi6nnmoTkuIvkuIDnjq/oioLlupTor6XlnKjlkIzkuIDmnaHot6/lvoTkuIrvvIzmlYXlj5ZzaW11bGF0aW9uUGF0aHNbMF1cclxuICAgICAgfSwgZXJyb3IgPT4ge1xyXG4gICAgICAgIC8vbG9hZC5jbG9zZSgpO1xyXG4gICAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHsgdHlwZTogJ2Vycm9yJywgbWVzc2FnZTogZXJyb3IgJiYgZXJyb3IucmVzcG9uc2UgJiYgZXJyb3IucmVzcG9uc2UuZGF0YSAmJiBlcnJvci5yZXNwb25zZS5kYXRhLk1lc3NhZ2UgfHwgJ+ivpeiKgueCueWtmOWcqOmXrumimCcgfSk7XHJcbiAgICAgIH0pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICog6K6+572u5LiL5LiA546v6IqCXHJcbiAqL1xyXG4gIHByaXZhdGUgc2V0TmV4dE5vZGUocmVzcG9uc2U6IFNpbXVsYXRlUmVzcG9uc2UpIHtcclxuICAgIHRoaXMuZGVzdE5vZGVzID0gcmVzcG9uc2Uuc2ltdWxhdGlvblBhdGhzICYmIHJlc3BvbnNlLnNpbXVsYXRpb25QYXRocy5tYXAocGF0aCA9PiAoe1xyXG4gICAgICBpZDogcGF0aC5ub2RlSW5mb0xpc3QubWFwKG5vZGUgPT4gbm9kZS5hY3Rpdml0eURlZmluaXRpb25JZCkuam9pbign77yMJyksXHJcbiAgICAgIG5hbWU6IHBhdGgubm9kZUluZm9MaXN0Lm1hcChub2RlID0+IG5vZGUuYWN0aXZpdHlEZWZpbml0aW9uTmFtZSkuam9pbign77yMJylcclxuICAgIH0pKTtcclxuICAgIC8v5aSE55CG6buY6K6k5YiG5pSv77yM5peg6buY6K6k5YiG5pSv6L+U5ZueLTFcclxuICAgIGNvbnN0IGRlZmF1bHRJbmRleCA9IHJlc3BvbnNlLnNpbXVsYXRpb25QYXRocy5maW5kSW5kZXgoYSA9PiBhLmRlZmF1bHQpO1xyXG4gICAgaWYgKGRlZmF1bHRJbmRleCA+IC0xKSB7XHJcbiAgICAgIHRoaXMuZGVzdE5vZGVzLmxlbmd0aCA9PT0gMSA/ICh0aGlzLm5vZGVSZWFkT25seSA9IHRydWUpIDogKHRoaXMubm9kZVJlYWRPbmx5ID0gZmFsc2UpO1xyXG4gICAgICB0aGlzLnNlbGVjdGVkTm9kZUlkID0gdGhpcy5kZXN0Tm9kZXNbZGVmYXVsdEluZGV4XS5pZDtcclxuICAgICAgdGhpcy5zZXRBc3NpZ25JbmZvKHJlc3BvbnNlLnNpbXVsYXRpb25QYXRoc1tkZWZhdWx0SW5kZXhdKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc2VsZWN0ZWROb2RlSWQgPSAnJztcclxuICAgICAgdGhpcy5ub2RlUmVhZE9ubHkgPSBmYWxzZTtcclxuICAgICAgdGhpcy5ub2RlUGxhY2Vob2xkZXIgPSAn6K+36YCJ5oupJztcclxuICAgIH1cclxuICAgIHRoaXMudm0ub3Blbih7XHJcbiAgICAgIG5leHROb2RlT2M6IHRoaXMuc2VsZWN0Tm9kZUNoYW5nZS5iaW5kKHRoaXMpLFxyXG4gICAgICBuZXh0Tm9kZTogdGhpcy5zZWxlY3RlZE5vZGVJZCxcclxuICAgICAgbmV4dE5vZGVEYXRhOiB0aGlzLmRlc3ROb2RlcyxcclxuICAgICAgbmV4dE5vZGVSZWFkRmxhZzogdGhpcy5ub2RlUmVhZE9ubHksXHJcbiAgICAgIG5leHROb2RlSG9sZGVyOiB0aGlzLm5vZGVQbGFjZWhvbGRlclxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiuvue9ruW9k+WJjeaMh+a0vuS/oeaBr+W4ruWKqeWPguaVsFxyXG4gICAqL1xyXG4gIHByaXZhdGUgc2V0QXNzaWduSW5mbyhzaW11bGF0aW9uUGF0aHM6IFNpbXVsYXRpb25QYXRoKSB7XHJcbiAgICB0aGlzLmFzc2lnbkluZm9zID0gW107XHJcbiAgICB0aGlzLnNlbGVjdGVkTm9kZUlkLnNwbGl0KCfvvIwnKS5mb3JFYWNoKG5vZGVJZCA9PiB7XHJcbiAgICAgIGNvbnN0IG5vZGUgPSBzaW11bGF0aW9uUGF0aHMubm9kZUluZm9MaXN0LmZpbmQobm9kZSA9PiBub2RlLmFjdGl2aXR5RGVmaW5pdGlvbklkID09PSBub2RlSWQpO1xyXG4gICAgICBpZiAobm9kZSkge1xyXG4gICAgICAgIGNvbnN0IHNlbGVjdGVkQXNzaWduZWVzID0gbm9kZS5zZWxlY3RlZEFzc2lnbmVlcztcclxuICAgICAgICBsZXQgYXNzaWduZWVSZWFkRmxhZyA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBhc3NpZ25lZSA9ICcnO1xyXG4gICAgICAgIGxldCBhc3NpZ25lZUhvbGRlciA9ICfor7fpgInmi6nkurrlkZgnO1xyXG4gICAgICAgIGlmIChzZWxlY3RlZEFzc2lnbmVlcyAmJiBzZWxlY3RlZEFzc2lnbmVlcy5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgYXNzaWduZWVSZWFkRmxhZyA9IHRydWU7XHJcbiAgICAgICAgICBhc3NpZ25lZUhvbGRlciA9IFwiXCI7XHJcbiAgICAgICAgICBzZWxlY3RlZEFzc2lnbmVlcy5mb3JFYWNoKHVzZXIgPT4ge1xyXG4gICAgICAgICAgICBhc3NpZ25lZSA9IGFzc2lnbmVlICsgdXNlci5uYW1lICsgJywgJztcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICBhc3NpZ25lZSA9IGFzc2lnbmVlLnNsaWNlKDAsIGFzc2lnbmVlLmxlbmd0aCAtIDIpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChub2RlLmFub255bW91cykge1xyXG4gICAgICAgICAgYXNzaWduZWUgPSBub2RlLmFub255bW91c1RleHQgPT09ICcnID8gJycgOiBub2RlLmFub255bW91c1RleHQgJiYgbm9kZS5hbm9ueW1vdXNUZXh0XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYXNzaWduSW5mb3MucHVzaCh7XHJcbiAgICAgICAgICBsYWJlbDogYCR7dGhpcy5zZWxlY3RlZE5vZGVJZCAmJiB0aGlzLnNlbGVjdGVkTm9kZUlkLnNwbGl0KCfvvIwnKS5sZW5ndGggPiAxID8gbm9kZS5hY3Rpdml0eURlZmluaXRpb25OYW1lIDogJyd95Yqe55CG5Lq65ZGYYCxcclxuICAgICAgICAgIHNlbGVjdGVkQXNzaWduZWVzLFxyXG4gICAgICAgICAgYXNzaWduZWVSZWFkRmxhZyxcclxuICAgICAgICAgIGFzc2lnbmVlLFxyXG4gICAgICAgICAgYXNzaWduZWVIb2xkZXIsXHJcbiAgICAgICAgICBhc3NpZ25lZUluZm86IHsgLi4ubm9kZS5hc3NpZ25lZUluZm8sIGFzc2lnbmVlVXNlcnM6IHsgaXRlbXM6IChub2RlLmFzc2lnbmVlSW5mbyAmJiBub2RlLmFzc2lnbmVlSW5mby5hc3NpZ25lZVVzZXJzKSB8fCBbXSB9IH0sXHJcbiAgICAgICAgICBhc3NpZ25lZXM6IG5vZGUuc2VsZWN0ZWRBc3NpZ25lZXMubWFwKHVzZXIgPT4geyByZXR1cm4geyBpZDogdXNlci5pZCwgbmFtZTogdXNlci5uYW1lIH0gfSksXHJcbiAgICAgICAgICBhY3Rpdml0eU5hbWU6IG5vZGUuYWN0aXZpdHlEZWZpbml0aW9uTmFtZSxcclxuICAgICAgICAgIGRlcGVuZGVuY3k6IG5vZGUuZGVwZW5kZW5jeSxcclxuICAgICAgICAgIGFub255bW91czogbm9kZS5hbm9ueW1vdXMsXHJcbiAgICAgICAgICBhbm9ueW1vdXNUZXh0OiBub2RlLmFub255bW91c1RleHRcclxuICAgICAgICB9KVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYXNzaWduSW5mb3MucHVzaCh7XHJcbiAgICAgICAgICBzZWxlY3RlZEFzc2lnbmVlczogW10sXHJcbiAgICAgICAgICBhc3NpZ25lZUluZm86IG51bGwsXHJcbiAgICAgICAgICBhc3NpZ25lZXM6IFtdLFxyXG4gICAgICAgICAgYWN0aXZpdHlOYW1lOiAnJyxcclxuICAgICAgICAgIGRlcGVuZGVuY3k6ICcnLFxyXG4gICAgICAgICAgYW5vbnltb3VzOiBub2RlLmFub255bW91cyxcclxuICAgICAgICAgIGFub255bW91c1RleHQ6IG5vZGUuYW5vbnltb3VzVGV4dFxyXG4gICAgICAgIH0pXHJcbiAgICAgIH1cclxuICAgIH0pXHJcbiAgICB0aGlzLnZtLm9wZW4oe1xyXG4gICAgICBhc3NpZ25lZU9jOiB0aGlzLmFzc2lnbmVlT2MuYmluZCh0aGlzKSxcclxuICAgICAgYXNzaWduSW5mb3M6IHRoaXMuYXNzaWduSW5mb3NcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICAvLyDlip7nkIbkurrlkZjpgInmi6nkuovku7ZcclxuICBhc3NpZ25lZU9jKGRhdGE6IGFueSwgaW5kZXg6IG51bWJlcikge1xyXG4gICAgdGhpcy5hc3NpZ25JbmZvc1tpbmRleF0uYXNzaWduZWVzID0gZGF0YS5pdGVtcztcclxuICAgIHRoaXMuc2VsZWN0ZWRWYWx1ZXNbaW5kZXhdID0gZGF0YS52YWx1ZTtcclxuICAgIHRoaXMudm0ub3Blbih7XHJcbiAgICAgIHNlbGVjdGVkVmFsdWVzOiB0aGlzLnNlbGVjdGVkVmFsdWVzXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgY2xlYXJIZWxwKCkge1xyXG4gICAgdGhpcy52bS5vcGVuKHtcclxuICAgICAgc2VsZWN0ZWRWYWx1ZXM6IFsnY2xlYXInXVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8vIOa4heepuuiKgueCuVxyXG4gIGNsZWFyTm9kZSgpIHtcclxuICAgIHRoaXMuc2VsZWN0ZWROb2RlSWQgPSAnJyxcclxuICAgICAgdGhpcy5kZXN0Tm9kZXMgPSBbXSxcclxuICAgICAgdGhpcy5ub2RlUmVhZE9ubHkgPSB0cnVlLFxyXG4gICAgICB0aGlzLm5vZGVQbGFjZWhvbGRlciA9ICcnLFxyXG4gICAgICB0aGlzLmFzc2lnbkluZm9zID0gW107XHJcbiAgICB0aGlzLnZtLm9wZW4oe1xyXG4gICAgICBuZXh0Tm9kZTogdGhpcy5zZWxlY3RlZE5vZGVJZCxcclxuICAgICAgbmV4dE5vZGVEYXRhOiB0aGlzLmRlc3ROb2RlcyxcclxuICAgICAgbmV4dE5vZGVSZWFkRmxhZzogdGhpcy5ub2RlUmVhZE9ubHksXHJcbiAgICAgIG5vZGVQbGFjZWhvbGRlcjogdGhpcy5ub2RlUGxhY2Vob2xkZXIsXHJcbiAgICAgIGFzc2lnbkluZm9zOiB0aGlzLmFzc2lnbkluZm9zXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLy8g5riF56m65Yqe55CG5Lq65ZGYXHJcbiAgY2xlYXJBc3NpZ25JbmZvcygpIHtcclxuICAgIHRoaXMuYXNzaWduSW5mb3MgPSBbXTtcclxuICAgIHRoaXMudm0ub3Blbih7XHJcbiAgICAgIGFzc2lnbkluZm9zOiB0aGlzLmFzc2lnbkluZm9zXHJcbiAgICB9KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog5Y+W5raI6aG16Z2i5by55qGGXHJcbiAgICovXHJcbiAgYmFjaygpIHtcclxuICAgIHRoaXMuY2xlYXJQcm9jZXNzKCk7XHJcbiAgICB0aGlzLnN1YmplY3QubmV4dCh7IHR5cGU6ICdzdWNjZXNzJywgbWVzc2FnZTogJycgfSk7XHJcbiAgfVxyXG5cclxuICBzdWJtaXQoKSB7XHJcbiAgICBpZiAoIXRoaXMuc2VsZWN0ZWRQcm9jZXNzSWQpIHtcclxuICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlOiAn6K+36YCJ5rWB56iLJyB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLnNlbGVjdGVkTm9kZUlkKSB7XHJcbiAgICAgIHRoaXMuc3ViamVjdC5uZXh0KHsgdHlwZTogJ2Vycm9yJywgbWVzc2FnZTogJ+ivt+mAieiKgueCuScgfSk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmFzc2lnbkluZm9zLmZpbHRlcihpbmZvID0+ICgoaW5mby5hc3NpZ25lZUluZm8gJiYgaW5mby5hc3NpZ25lZUluZm8uYXNzaWduZWVVc2Vycy5pdGVtcy5sZW5ndGgpIHx8IGluZm8uc2VsZWN0ZWRBc3NpZ25lZXMubGVuZ3RoKSAmJiAhaW5mby5hc3NpZ25lZXMubGVuZ3RoKS5sZW5ndGgpIHtcclxuICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlOiAn6K+36YCJ5Yqe55CG5Lq65ZGYJyB9KTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgbm9kZXM6IHN0cmluZ1tdID0gdGhpcy5zZWxlY3RlZE5vZGVJZC5zcGxpdCgn77yMJyk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGxldCBuZXh0Rmxvd05vZGU6IEZsb3dOb2RlSW5mbyA9IHtcclxuICAgICAgICBhY3Rpdml0eURlZmluaXRpb25JZDogbm9kZXNbaV0sXHJcbiAgICAgICAgYWN0aXZpdHlEZWZpbml0aW9uTmFtZTogdGhpcy5hc3NpZ25JbmZvc1tpXS5hY3Rpdml0eU5hbWUsXHJcbiAgICAgICAgZGVwZW5kZW5jeTogdGhpcy5hc3NpZ25JbmZvc1tpXS5kZXBlbmRlbmN5LFxyXG4gICAgICAgIHNlbGVjdGVkQXNzaWduZWVzOiB0aGlzLmFzc2lnbkluZm9zW2ldLmFzc2lnbmVlSW5mbyA/IHRoaXMuYXNzaWduSW5mb3NbaV0uYXNzaWduZWVzIDogW10sXHJcbiAgICAgICAgYXNzaWduZWVJbmZvOiBudWxsLFxyXG4gICAgICAgIHJlc29sdmVkOiBmYWxzZSxcclxuICAgICAgICBhbm9ueW1vdXM6IGZhbHNlLFxyXG4gICAgICAgIGFub255bW91c1RleHQ6ICcnXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5wYXlsb2FkLm5leHRGbG93Tm9kZXMucHVzaChuZXh0Rmxvd05vZGUpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5wYXlsb2FkLnByb2Nlc3NEZWZpbml0aW9uSWQgPSB0aGlzLnNlbGVjdGVkUHJvY2Vzc0lkO1xyXG4gICAgdGhpcy50YXNrU2VydmljZS5zdGFydFByb2Nlc3ModGhpcy5wYXlsb2FkKS5zdWJzY3JpYmUoKCkgPT4ge1xyXG4gICAgICB0aGlzLmNsZWFyUHJvY2VzcygpO1xyXG4gICAgICB0aGlzLnN1YmplY3QubmV4dCh7IHR5cGU6ICdzdWNjZXNzJywgbWVzc2FnZTogJ+aPkOS6pOaIkOWKnycgfSk7XHJcbiAgICB9LCAoZXJyb3IpID0+IHtcclxuICAgICAgdGhpcy5zdWJqZWN0Lm5leHQoeyB0eXBlOiAnZXJyb3InLCBtZXNzYWdlOiBlcnJvciAmJiBlcnJvci5yZXNwb25zZSAmJiBlcnJvci5yZXNwb25zZS5kYXRhICYmIGVycm9yLnJlc3BvbnNlLmRhdGEuTWVzc2FnZSB8fCAn5o+Q5Lqk5aSx6LSlJyB9KTtcclxuICAgIH0pXHJcbiAgfVxyXG5cclxuICBnZXRTdWJqZWN0KCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3ViamVjdC5hc09ic2VydmFibGUoKTtcclxuICB9XHJcblxyXG4gIGNsZWFyUHJvY2VzcygpIHtcclxuICAgIHRoaXMudm0uY2xvc2UoKTtcclxuICAgIHRoaXMudm0gPSBudWxsO1xyXG4gICAgdGhpcy5zZWxlY3RlZFByb2Nlc3NJZCA9ICcnXHJcbiAgICB0aGlzLnNlbGVjdGVkTm9kZUlkID0gJydcclxuICAgIHRoaXMucHJvY2Vzc1JlYWRPbmx5ID0gZmFsc2U7XHJcbiAgICB0aGlzLm5vZGVSZWFkT25seT0gdHJ1ZTtcclxuICB9XHJcbn1cclxuIl19