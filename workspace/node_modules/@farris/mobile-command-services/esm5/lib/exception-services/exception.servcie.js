/**
 * @fileoverview added by tsickle
 * Generated from: lib/exception-services/exception.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HttpUtil, HttpStatusType } from './http';
/**
 * 实体操作服务
 */
var /**
 * 实体操作服务
 */
ExceptionService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function ExceptionService(notifyService, jsBridgeService) {
        this.notifyService = notifyService;
        this.jsBridgeService = jsBridgeService;
    }
    /**
     * 显示异常信息
     */
    /**
     * 显示异常信息
     * @param {?} error
     * @return {?}
     */
    ExceptionService.prototype.show = /**
     * 显示异常信息
     * @param {?} error
     * @return {?}
     */
    function (error) {
        this.exception(error);
    };
    /**
   * 异常处理路由方法
   */
    /**
     * 异常处理路由方法
     * @private
     * @param {?} error
     * @return {?}
     */
    ExceptionService.prototype.exception = /**
     * 异常处理路由方法
     * @private
     * @param {?} error
     * @return {?}
     */
    function (error) {
        var _this = this;
        // 针对session失效做特殊处理
        if (error.message && error.message.indexOf('401') !== -1) {
            this.notifyService.error('登录信息已失效请重新打开');
            setTimeout((/**
             * @return {?}
             */
            function () { _this.jsBridgeService.closeWindow(); }), 2000);
            return;
        }
        if (error && error.response) {
            this.httpErrorHandler(error.response);
        }
    };
    /**
   * http请求异常处理器
   */
    /**
     * http请求异常处理器
     * @private
     * @param {?} httpError
     * @return {?}
     */
    ExceptionService.prototype.httpErrorHandler = /**
     * http请求异常处理器
     * @private
     * @param {?} httpError
     * @return {?}
     */
    function (httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        var statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                this.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    };
    /**
   * 服务器端异常提示弹框
   */
    /**
     * 服务器端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    ExceptionService.prototype.httpErrorInServer = /**
     * 服务器端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    function (httpError) {
        /** @type {?} */
        var error = httpError.data;
        if (typeof (error) === 'string') {
            try {
                error = JSON.parse(error);
            }
            catch (e) { }
        }
        if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
            this.notifyService.error(httpError.message);
            return;
        }
        /** @type {?} */
        var getNotifyServiceMethodName = this.getNotifyServiceMethodName(error.Level);
        this.notifyService["" + getNotifyServiceMethodName](error.Message);
    };
    /**
     * 客户端异常提示弹框
     */
    /**
     * 客户端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    ExceptionService.prototype.httpErrorInClient = /**
     * 客户端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    function (httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        var url = httpError.config && httpError.config.url && httpError.config.url;
        /** @type {?} */
        var status = httpError.status && httpError.status;
        this.notifyService.error(url + " " + status);
    };
    /**
   * 获取异常处理策略
   * @param exceptionLevel 异常等级
   */
    /**
     * 获取异常处理策略
     * @param {?} exceptionLevel 异常等级
     * @return {?}
     */
    ExceptionService.prototype.getNotifyServiceMethodName = /**
     * 获取异常处理策略
     * @param {?} exceptionLevel 异常等级
     * @return {?}
     */
    function (exceptionLevel) {
        /** @type {?} */
        var exception;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exception = 'info';
                break;
            case 1 /* Warning */:
                exception = 'warning';
                break;
            case 2 /* Error */:
                exception = 'error';
                break;
            case 3 /* Fatal */:
                exception = 'fatal';
                break;
            default:
                // 默认异常等级是错误
                exception = 'error';
                break;
        }
        return exception;
    };
    return ExceptionService;
}());
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.jsBridgeService;
}
export { ExceptionService };
//# sourceMappingURL=data:application/json;base64,