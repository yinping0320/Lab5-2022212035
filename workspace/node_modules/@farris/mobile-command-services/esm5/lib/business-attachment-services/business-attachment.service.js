/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/business-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { EMPTY, forkJoin, of } from 'rxjs';
import { tap, switchMap, map, filter, take } from 'rxjs/operators';
// import { cloneDeep } from 'lodash-es';
import { BindingPathConverter, HttpMethods, DataChangeType } from '@farris/mobile-devkit';
import { AttachmentUtil } from './business-attachment.util';
/**
 * 附件服务
 */
var /**
 * 附件服务
 */
BusinessAttachmentService = /** @class */ (function () {
    /**
     * 构造函数
     */
    function BusinessAttachmentService(viewModelContext, entityService, removeDataService, attachDataService) {
        /**
         * 默认根目录
         */
        this.defaultRootDirId = 'default-root';
        this.viewModelContext = viewModelContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.removeDataService = removeDataService;
    }
    Object.defineProperty(BusinessAttachmentService.prototype, "defaultParentDirName", {
        /**
         * 默认子目录
         */
        get: /**
         * 默认子目录
         * @private
         * @return {?}
         */
        function () {
            return this.viewModelContext.bindingData.list.currentId;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 获取列表数据
     */
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?} filters
     * @param {?} sorts
     * @return {?}
     */
    BusinessAttachmentService.prototype.loadAttachmentRows = /**
     * 获取列表数据
     * @param {?} url
     * @param {?} filters
     * @param {?} sorts
     * @return {?}
     */
    function (url, filters, sorts) {
        /** @type {?} */
        var attachContext = this.getAttachContext();
        /** @type {?} */
        var befRepository = ((/** @type {?} */ (this.viewModelContext.repository)));
        /** @type {?} */
        var sessionService = befRepository.sessionService;
        /** @type {?} */
        var apiProxy = befRepository.apiProxy;
        // 组织params
        /** @type {?} */
        var params = {};
        if (typeof filters === 'string') {
            filters = JSON.parse(filters);
        }
        if (typeof sorts === 'string') {
            sorts = JSON.parse(sorts);
        }
        /** @type {?} */
        var entityFilter = {
            FilterConditions: filters || null,
            SortConditions: sorts || null,
            IsUsePagination: false,
            Pagination: {
                PageIndex: 1,
                PageSize: 0,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        var entityFilterString = JSON.stringify(entityFilter);
        params.entityFilter = entityFilterString;
        // 组织body
        /** @type {?} */
        var body = {
            dataChange: [],
            variableChange: null
        }
        // 赋值be的url
        ;
        // 赋值be的url
        befRepository.apiProxy.setAssociatedUrl(url);
        return this.waitForBeSession().pipe(switchMap((/**
         * @return {?}
         */
        function () {
            url = url + "/extension/query";
            /** @type {?} */
            var requestConfig = {
                headers: sessionService.extendRequestHeaders({}),
                params: params,
                body: body
            };
            /** @type {?} */
            var query$ = apiProxy.httpClient.request(HttpMethods.PUT, url, requestConfig).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                /** @type {?} */
                var attachListData = result.returnValue.result;
                // 赋值当前所有数据
                attachContext.setData(JSON.parse(JSON.stringify(attachListData)));
                // 赋值缓存起来
                attachContext.updateData(JSON.parse(JSON.stringify(attachListData)));
                return attachListData;
            })));
            return query$;
        })));
    };
    /**
     * @private
     * @return {?}
     */
    BusinessAttachmentService.prototype.waitForBeSession = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var befRepository = (/** @type {?} */ (this.viewModelContext.repository));
        /** @type {?} */
        var sessionService = befRepository.sessionService;
        return sessionService.getBeSessionExisted().pipe(filter((/**
         * @param {?} beSessionExisted
         * @return {?}
         */
        function (beSessionExisted) {
            return beSessionExisted === true;
        })), take(1));
    };
    /**
     * 同步变更
     */
    /**
     * 同步变更
     * @param {?} url
     * @return {?}
     */
    BusinessAttachmentService.prototype.syncAttachmentRowChanges = /**
     * 同步变更
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var attachContext = this.getAttachContext() || {};
        /** @type {?} */
        var changeDetails = AttachmentUtil.getChangeDetails(attachContext.oldListData, attachContext.listData);
        if (!changeDetails || changeDetails.length === 0) {
            return of(false);
        }
        /** @type {?} */
        var changedRowId = changeDetails[0].ChangeInfo.DataId;
        /** @type {?} */
        var requestInfo = {
            dataChange: changeDetails,
            variableChange: null
        };
        /** @type {?} */
        var requestConfig = {
            body: requestInfo
        };
        /** @type {?} */
        var apiProxy = ((/** @type {?} */ (this.viewModelContext.repository))).apiProxy;
        url = url + "/extension/retrieve/" + changedRowId;
        return apiProxy.request(HttpMethods.PUT, url, requestConfig, true).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var context = attachContext.context;
            /** @type {?} */
            var data = context.getData();
            // goBack之后  更新缓存后的值
            context.updateData(JSON.parse(JSON.stringify(data)));
            return e;
        })));
    };
    /**
     * 上传单个文件
     * @param attachmentIdPath 附件内码字段的路径，形如/attachInfo/attachmentId；
     * @param attachmentNamePath 附件名称字段的路径
     */
    /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    BusinessAttachmentService.prototype.uploadAndUpdateRow = /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    function (attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        var fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        var firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
        /** @type {?} */
        var result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
         * @return {?}
         */
        function () {
            console.log('hide loading ...');
        })));
        return result$;
    };
    /**
     * 上传多个文件
     */
    /**
     * 上传多个文件
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    BusinessAttachmentService.prototype.uploadAndBatchAddRows = /**
     * 上传多个文件
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (url, attachmentInfoFieldPath) {
        var _this = this;
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        // 附件相关信息
        /** @type {?} */
        var rootDirId = commandContext.eventParams.rootId;
        /** @type {?} */
        var parentDirName = commandContext.eventParams.parentDirName;
        /** @type {?} */
        var rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        var formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        var context = commandContext.eventParams.context;
        /** @type {?} */
        var fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        var attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        /** @type {?} */
        var uploadUrl = url + "/service/batchuploadattachment";
        return this.attachDataService.updateRows(uploadUrl, attachmentInfoFieldPath, attachmentInfos).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            // 追加数据
            context.appendData(e);
            /** @type {?} */
            var dataIds = _this.getDataIdsToRemove(context, attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            function (dataId) {
                // 添加标记
                _this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Add });
            }));
            return e;
        })));
    };
    /**
     * 批量删除附件所在的行
     */
    /**
     * 批量删除附件所在的行
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    BusinessAttachmentService.prototype.removeAttachmentRows = /**
     * 批量删除附件所在的行
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (url, attachmentInfoFieldPath) {
        var _this = this;
        /** @type {?} */
        var context = this['context'].eventParams.context;
        if (!attachmentInfoFieldPath) {
            return EMPTY;
        }
        /** @type {?} */
        var dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
        // 如果是主表
        if (attachmentInfoFieldPath.split('/').length <= 2) {
            /** @type {?} */
            var removeUrl = url + "/extension/batchdelete";
            return this.removeDataService.removeByBusinessIds(removeUrl, dataIds).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                dataIds.forEach((/**
                 * @param {?} dataId
                 * @return {?}
                 */
                function (dataId) {
                    context.removeDataById(dataId);
                    // 添加标记
                    _this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Delete });
                }));
            })));
        }
        else {
            // 如果是子表
            /** @type {?} */
            var removeObservables_1 = [];
            if (dataIds.length === 0) {
                alert('请选择要删除的文件');
            }
            /** @type {?} */
            var bindingListPath_1 = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            function (dataId) {
                /** @type {?} */
                var removeObservable = _this.removeDataService.removeByBusinessPathAndId(url, bindingListPath_1, dataId);
                removeObservables_1.push(removeObservable);
            }));
            return forkJoin(removeObservables_1).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                console.log(e);
                return e;
            })));
        }
    };
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     */
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    BusinessAttachmentService.prototype.getUploadFileInfosFromContext = 
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        var uploadFileInfos = (/** @type {?} */ (commandContext.eventParams.data));
        if (!uploadFileInfos) {
            return [];
        }
        return uploadFileInfos;
    };
    /**
     * 获取要删除的附件对应的数据id数组
     */
    /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} context
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    BusinessAttachmentService.prototype.getDataIdsToRemove = /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} context
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (context, attachmentInfoFieldPath) {
        var _this = this;
        /** @type {?} */
        var attachIds = this.getAttachmentIdsToRemoveFromContext();
        /** @type {?} */
        var dataIds = [];
        attachIds.forEach((/**
         * @param {?} attachId
         * @return {?}
         */
        function (attachId) {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            /** @type {?} */
            var dataId = _this.convertAttachmentIdToDataId(context, attachId, attachmentInfoFieldPath);
            dataIds.push(dataId);
        }));
        return dataIds;
    };
    /**
     * 从命令上下文中获取要删除附件ids
     */
    /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    BusinessAttachmentService.prototype.getAttachmentIdsToRemoveFromContext = /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        return commandContext.eventParams.data.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        function (dataItem) {
            return Object.prototype.toString.call(dataItem) === '[object Object]' ? dataItem.metadataId : dataItem;
        }));
        // return commandContext.eventParams.data as string[];
    };
    /**
     * 根据路径获取附件字段值数组
     * @param fieldPath 字段路径
     */
    /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} context
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    BusinessAttachmentService.prototype.convertAttachmentIdToDataId = /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} context
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (context, fileId, attachmentInfoFieldPath) {
        // 解析路径
        /** @type {?} */
        var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        /** @type {?} */
        var attachFieldName = attachInfoBindingPath.pop();
        /** @type {?} */
        var attachListBindingPath = attachInfoBindingPath;
        // 获取附件id数组
        // const entityListData = this.entityService.getEntityListData(attachListBindingPath);
        /** @type {?} */
        var entityListData = context.data;
        /** @type {?} */
        var targetEntityData = entityListData.find((/**
         * @param {?} entityData
         * @return {?}
         */
        function (entityData) {
            if (entityData[attachFieldName]) {
                /** @type {?} */
                var attachmentId = entityData[attachFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        }));
        return targetEntityData.id;
    };
    /**
     * 获取带附件的BindingList的Path
     */
    /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    BusinessAttachmentService.prototype.getBindingListPathWithAttachments = /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    function (attachmentInfoFieldPath) {
        /** @type {?} */
        var attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        attachInfoBindingPath.pop();
        /** @type {?} */
        var bindingListPath = attachInfoBindingPath;
        return '/' + bindingListPath.join('/');
    };
    /**
     * 获取附件组件上下文
     */
    /**
     * 获取附件组件上下文
     * @private
     * @return {?}
     */
    BusinessAttachmentService.prototype.getAttachContext = /**
     * 获取附件组件上下文
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        var attachContext = commandContext && commandContext.eventParams ? commandContext.eventParams : {};
        return attachContext;
    };
    return BusinessAttachmentService;
}());
if (false) {
    /**
     * 默认根目录
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.defaultRootDirId;
    /**
     * 视图模型
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.viewModelContext;
    /**
     * 附件数据服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.attachDataService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.entityService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.removeDataService;
}
export { BusinessAttachmentService };
//# sourceMappingURL=data:application/json;base64,