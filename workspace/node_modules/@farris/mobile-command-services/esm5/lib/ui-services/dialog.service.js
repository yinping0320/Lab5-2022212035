/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { from } from 'rxjs';
import { Dialog } from '@farris/mobile-ui';
var DialogService = /** @class */ (function () {
    function DialogService() {
    }
    /**
     * 提示对话框
     * @summary
     * type=info|success|warning|error
     */
    /**
     * 提示对话框
     * \@summary
     * type=info|success|warning|error
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    DialogService.prototype.alert = /**
     * 提示对话框
     * \@summary
     * type=info|success|warning|error
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    function (message, options) {
        /** @type {?} */
        var promise$ = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            Dialog.alert(tslib_1.__assign({ title: '提醒', message: message, cancelText: '取消', confirmText: '确定', onConfirm: (/**
                 * @return {?}
                 */
                function () { resolve(true); }), onCancel: (/**
                 * @return {?}
                 */
                function () { resolve(false); }) }, options));
        }));
        return from(promise$);
    };
    /**
     * 确认框对话框
     */
    /**
     * 确认框对话框
     * @param {?} message
     * @return {?}
     */
    DialogService.prototype.confirm = /**
     * 确认框对话框
     * @param {?} message
     * @return {?}
     */
    function (message) {
        /** @type {?} */
        var confirmResult$ = this.confirmPromise(message);
        return from(confirmResult$);
    };
    /**
     * 自定义弹窗
     */
    /**
     * 自定义弹窗
     * @param {?} options
     * @return {?}
     */
    DialogService.prototype.show = /**
     * 自定义弹窗
     * @param {?} options
     * @return {?}
     */
    function (options) {
        this.confirmPromise(options);
    };
    /**
     * 输入对话框
     * @param title 标题
     * @param options 配置信息
     */
    /**
     * 输入对话框
     * @param {?} title 标题
     * @param {?=} options 配置信息
     * @return {?}
     */
    DialogService.prototype.prompt = /**
     * 输入对话框
     * @param {?} title 标题
     * @param {?=} options 配置信息
     * @return {?}
     */
    function (title, options) {
        /** @type {?} */
        var promise$ = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            /** @type {?} */
            var vm = Dialog.prompt(tslib_1.__assign({ title: title, confirmText: '确定', onConfirm: (/**
                 * @return {?}
                 */
                function () {
                    resolve(vm.$data.promptText);
                }), onCancel: (/**
                 * @return {?}
                 */
                function () { resolve('取消'); }), onShow: (/**
                 * @return {?}
                 */
                function () {
                    console.log('显示弹窗');
                }) }, options));
        }));
        return from(promise$);
    };
    /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     */
    /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     * @private
     * @param {?=} message
     * @return {?}
     */
    DialogService.prototype.confirmPromise = /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     * @private
     * @param {?=} message
     * @return {?}
     */
    function (message) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        function (resolve, reject) {
            Dialog.confirm({
                message: message,
                onConfirm: (/**
                 * @return {?}
                 */
                function () { resolve(true); }),
                onCancel: (/**
                 * @return {?}
                 */
                function () { resolve(false); }),
            });
        }));
    };
    return DialogService;
}());
export { DialogService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1jb21tYW5kLXNlcnZpY2VzLyIsInNvdXJjZXMiOlsibGliL3VpLXNlcnZpY2VzL2RpYWxvZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLE9BQU8sRUFBYyxJQUFJLEVBQVMsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTNDO0lBQUE7SUF3RUEsQ0FBQztJQXRFQzs7OztPQUlHOzs7Ozs7Ozs7SUFDSCw2QkFBSzs7Ozs7Ozs7SUFBTCxVQUFNLE9BQWUsRUFBRSxPQUFhOztZQUM1QixRQUFRLEdBQXFCLElBQUksT0FBTzs7Ozs7UUFBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQzdELE1BQU0sQ0FBQyxLQUFLLG9CQUNWLEtBQUssRUFBRSxJQUFJLEVBQ1gsT0FBTyxFQUFFLE9BQU8sRUFDaEIsVUFBVSxFQUFFLElBQUksRUFDaEIsV0FBVyxFQUFFLElBQUksRUFDakIsU0FBUzs7O2dCQUFFLGNBQVEsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFBLENBQUMsQ0FBQyxHQUNsQyxRQUFROzs7Z0JBQUUsY0FBUSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUEsQ0FBQyxDQUFDLEtBQy9CLE9BQU8sRUFDVixDQUFDO1FBQ0wsQ0FBQyxFQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7SUFDSCwrQkFBTzs7Ozs7SUFBUCxVQUFRLE9BQWU7O1lBQ2YsY0FBYyxHQUFxQixJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQztRQUNyRSxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM5QixDQUFDO0lBRUQ7O09BRUc7Ozs7OztJQUNILDRCQUFJOzs7OztJQUFKLFVBQUssT0FBWTtRQUNmLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQztJQUVEOzs7O09BSUc7Ozs7Ozs7SUFDSCw4QkFBTTs7Ozs7O0lBQU4sVUFBTyxLQUFhLEVBQUUsT0FBYTs7WUFDM0IsUUFBUSxHQUFvQixJQUFJLE9BQU87Ozs7O1FBQUMsVUFBQyxPQUFPLEVBQUUsTUFBTTs7Z0JBQ3RELEVBQUUsR0FBRyxNQUFNLENBQUMsTUFBTSxvQkFDdEIsS0FBSyxFQUFFLEtBQUssRUFDWixXQUFXLEVBQUUsSUFBSSxFQUNqQixTQUFTOzs7Z0JBQUU7b0JBQ1QsT0FBTyxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9CLENBQUMsR0FDRCxRQUFROzs7Z0JBQUUsY0FBUSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQ2xDLE1BQU07OztnQkFBRTtvQkFDTixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO2dCQUN0QixDQUFDLEtBQ0UsT0FBTyxFQUNWO1FBQ0osQ0FBQyxFQUFDO1FBQ0YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDeEIsQ0FBQztJQUVEOztPQUVHOzs7Ozs7O0lBQ0ssc0NBQWM7Ozs7OztJQUF0QixVQUF1QixPQUFnQjtRQUNyQyxPQUFPLElBQUksT0FBTzs7Ozs7UUFBQyxVQUFDLE9BQU8sRUFBRSxNQUFNO1lBQ2pDLE1BQU0sQ0FBQyxPQUFPLENBQUM7Z0JBQ2IsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLFNBQVM7OztnQkFBRSxjQUFRLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtnQkFDbkMsUUFBUTs7O2dCQUFFLGNBQVEsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO2FBQ3BDLENBQUMsQ0FBQTtRQUNKLENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQztJQUNILG9CQUFDO0FBQUQsQ0FBQyxBQXhFRCxJQXdFQztBQUVELE9BQU8sRUFBRSxhQUFhLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIGZyb20sIEVNUFRZIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IERpYWxvZyB9IGZyb20gJ0BmYXJyaXMvbW9iaWxlLXVpJztcclxuXHJcbmNsYXNzIERpYWxvZ1NlcnZpY2Uge1xyXG5cclxuICAvKipcclxuICAgKiDmj5DnpLrlr7nor53moYZcclxuICAgKiBAc3VtbWFyeVxyXG4gICAqIHR5cGU9aW5mb3xzdWNjZXNzfHdhcm5pbmd8ZXJyb3JcclxuICAgKi9cclxuICBhbGVydChtZXNzYWdlOiBzdHJpbmcsIG9wdGlvbnM/OiBhbnkpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IHByb21pc2UkOiBQcm9taXNlPGJvb2xlYW4+ID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICBEaWFsb2cuYWxlcnQoe1xyXG4gICAgICAgIHRpdGxlOiAn5o+Q6YaSJyxcclxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICAgIGNhbmNlbFRleHQ6ICflj5bmtognLFxyXG4gICAgICAgIGNvbmZpcm1UZXh0OiAn56Gu5a6aJyxcclxuICAgICAgICBvbkNvbmZpcm06ICgpID0+IHsgcmVzb2x2ZSh0cnVlKSB9LFxyXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7IHJlc29sdmUoZmFsc2UpIH0sXHJcbiAgICAgICAgLi4ub3B0aW9uc1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIGZyb20ocHJvbWlzZSQpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog56Gu6K6k5qGG5a+56K+d5qGGXHJcbiAgICovXHJcbiAgY29uZmlybShtZXNzYWdlOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IGNvbmZpcm1SZXN1bHQkOiBQcm9taXNlPGJvb2xlYW4+ID0gdGhpcy5jb25maXJtUHJvbWlzZShtZXNzYWdlKTtcclxuICAgIHJldHVybiBmcm9tKGNvbmZpcm1SZXN1bHQkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOiHquWumuS5ieW8ueeql1xyXG4gICAqL1xyXG4gIHNob3cob3B0aW9uczogYW55KTogdm9pZCB7XHJcbiAgICB0aGlzLmNvbmZpcm1Qcm9taXNlKG9wdGlvbnMpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICog6L6T5YWl5a+56K+d5qGGXHJcbiAgICogQHBhcmFtIHRpdGxlIOagh+mimFxyXG4gICAqIEBwYXJhbSBvcHRpb25zIOmFjee9ruS/oeaBr1xyXG4gICAqL1xyXG4gIHByb21wdCh0aXRsZTogc3RyaW5nLCBvcHRpb25zPzogYW55KTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcclxuICAgIGNvbnN0IHByb21pc2UkOiBQcm9taXNlPHN0cmluZz4gPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIGNvbnN0IHZtID0gRGlhbG9nLnByb21wdCh7XHJcbiAgICAgICAgdGl0bGU6IHRpdGxlLFxyXG4gICAgICAgIGNvbmZpcm1UZXh0OiAn56Gu5a6aJyxcclxuICAgICAgICBvbkNvbmZpcm06ICgpID0+IHtcclxuICAgICAgICAgIHJlc29sdmUodm0uJGRhdGEucHJvbXB0VGV4dCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkNhbmNlbDogKCkgPT4geyByZXNvbHZlKCflj5bmtognKTsgfSxcclxuICAgICAgICBvblNob3c6ICgpID0+IHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCfmmL7npLrlvLnnqpcnKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIC4uLm9wdGlvbnNcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBmcm9tKHByb21pc2UkKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOS9v+eUqFByb21pc2Xlrp7kvovljIXoo4Xlm57osIPmlrnms5XvvIzku6XlkIzmraXlm57osIPmlrnms5XmiafooYzlkI7nu5PmnpxcclxuICAgKi9cclxuICBwcml2YXRlIGNvbmZpcm1Qcm9taXNlKG1lc3NhZ2U/OiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XHJcbiAgICAgIERpYWxvZy5jb25maXJtKHtcclxuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxyXG4gICAgICAgIG9uQ29uZmlybTogKCkgPT4geyByZXNvbHZlKHRydWUpOyB9LFxyXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB7IHJlc29sdmUoZmFsc2UpOyB9LFxyXG4gICAgICB9KVxyXG4gICAgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5leHBvcnQgeyBEaWFsb2dTZXJ2aWNlIH07XHJcbiJdfQ==