import { Loading, Toast, Notify, Dialog } from '@farris/mobile-ui';
import { from, EMPTY, of, zip, Subject, forkJoin } from 'rxjs';
import { AttachmentPreview, SubmitApprove } from '@farris/mobile-business-ui';
import { BindingList, HttpMethods, HttpClient, BindingPathConverter, DataChangeType, HttpUtil as HttpUtil$1, ViewModelContext } from '@farris/mobile-devkit';
import { tap, switchMap, map, filter, take } from 'rxjs/operators';
import { BefRepositoryUtil, BefDataPathUtil, ChangeDetailType, BE_ERROR_HANDLER__TOKEN } from '@farris/mobile-bef';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/rtc-type.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BeforeNavigate接口请求参数
 * @record
 */
function BeforeNavigateRequestBody() { }
if (false) {
    /**
     * 是否是根元数据
     * \@summary
     * 1、 根元数据：metadataId传递基础表单id；
     * 2、非根元数据：metadataId传递扩展表单id；
     * @type {?}
     */
    BeforeNavigateRequestBody.prototype.isRootMetadata;
    /**
     * 元数据id
     * @type {?}
     */
    BeforeNavigateRequestBody.prototype.metadataId;
    /**
     * 维度1
     * @type {?}
     */
    BeforeNavigateRequestBody.prototype.dim1;
    /**
     * 维度2
     * @type {?}
     */
    BeforeNavigateRequestBody.prototype.dim2;
}
/**
 * BeforeNavigate接口返回结果
 * @record
 */
function BeforeNavigateReponseBody() { }
if (false) {
    /**
     * 元数据id
     * @type {?}
     */
    BeforeNavigateReponseBody.prototype.metadataId;
    /**
     * 是否有维度信息
     * \@summary
     * 有维度：返回1；
     * 没有维度：返回0；
     * @type {?}
     */
    BeforeNavigateReponseBody.prototype.withDims;
    /**
     * 维度1
     * @type {?}
     */
    BeforeNavigateReponseBody.prototype.dim1;
    /**
     * 维度2
     * @type {?}
     */
    BeforeNavigateReponseBody.prototype.dim2;
}
/**
 * 运行时定制参数
 * @record
 */
function RtcOptions() { }
if (false) {
    /**
     * 表单元数据id
     * @type {?}
     */
    RtcOptions.prototype.metadataId;
    /**
     * 是否存在维度信息
     * @type {?}
     */
    RtcOptions.prototype.withDims;
    /**
     * 维度1
     * @type {?}
     */
    RtcOptions.prototype.dim1;
    /**
     * 维度2
     * @type {?}
     */
    RtcOptions.prototype.dim2;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/types/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/base.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据服务基类
 */
class BaseService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    getService(token) {
        /** @type {?} */
        const injector = this.viewModelContext.injector;
        return injector.get(token);
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/loading.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadingService {
    constructor() {
        this.registerService();
    }
    /**
     * 显示Loading
     * @param {?=} message
     * @param {?=} options
     * @return {?}
     */
    show(message, options) {
        ((/** @type {?} */ (Loading))).show(message, options);
    }
    /**
     * 隐藏Loading
     * @return {?}
     */
    hide() {
        ((/** @type {?} */ (Loading))).hide();
    }
    /**
     * 注册所有的LoadingService实例
     * @private
     * @return {?}
     */
    registerService() {
        /** @type {?} */
        const services = window['DEVKIT_LOADING_SERVICE'] || [];
        services.push(this);
        window['DEVKIT_LOADING_SERVICE'] = services;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/toast.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 轻提示服务
 */
class ToastService {
    /**
     * 消息提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    info(message, options) {
        ((/** @type {?} */ (Toast))).info(message, options);
    }
    /**
     * 成功提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    success(message, options) {
        ((/** @type {?} */ (Toast))).success(message, options);
    }
    /**
     * 警告提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    warning(message, options) {
        ((/** @type {?} */ (Toast))).warning(message, options);
    }
    /**
     * 失败提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    error(message, options) {
        ((/** @type {?} */ (Toast))).error(message, options);
    }
    /**
     * 自定义提示
     * @param {?=} options
     * @return {?}
     */
    show(options) {
        ((/** @type {?} */ (Toast)))(options);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/notify.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 消息提示服务
 * \@summary
 * 页面边缘滑出，自动消失，语气略强于Toast
 */
class NotifyService {
    /**
     * 消息提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    info(message, options) {
        ((/** @type {?} */ (Notify))).info(message, Object.assign({ duration: 1500 }, options));
    }
    /**
     * 成功提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    success(message, options) {
        ((/** @type {?} */ (Notify))).success(message, Object.assign({ duration: 1000 }, options));
    }
    /**
     * 警告提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    warning(message, options) {
        ((/** @type {?} */ (Notify))).warning(message, Object.assign({ duration: 1500 }, options));
    }
    /**
     * 失败提示
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    error(message, options) {
        ((/** @type {?} */ (Notify))).error(message, Object.assign({ duration: 1500 }, options));
    }
    /**
     * 自定义提醒
     * @param {?} options
     * @return {?}
     */
    show(options) {
        ((/** @type {?} */ (Notify))).show(options);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DialogService {
    /**
     * 提示对话框
     * \@summary
     * type=info|success|warning|error
     * @param {?} message
     * @param {?=} options
     * @return {?}
     */
    alert(message, options) {
        /** @type {?} */
        const promise$ = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            Dialog.alert(Object.assign({ title: '提醒', message: message, cancelText: '取消', confirmText: '确定', onConfirm: (/**
                 * @return {?}
                 */
                () => { resolve(true); }), onCancel: (/**
                 * @return {?}
                 */
                () => { resolve(false); }) }, options));
        }));
        return from(promise$);
    }
    /**
     * 确认框对话框
     * @param {?} message
     * @return {?}
     */
    confirm(message) {
        /** @type {?} */
        const confirmResult$ = this.confirmPromise(message);
        return from(confirmResult$);
    }
    /**
     * 自定义弹窗
     * @param {?} options
     * @return {?}
     */
    show(options) {
        this.confirmPromise(options);
    }
    /**
     * 输入对话框
     * @param {?} title 标题
     * @param {?=} options 配置信息
     * @return {?}
     */
    prompt(title, options) {
        /** @type {?} */
        const promise$ = new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            /** @type {?} */
            const vm = Dialog.prompt(Object.assign({ title: title, confirmText: '确定', onConfirm: (/**
                 * @return {?}
                 */
                () => {
                    resolve(vm.$data.promptText);
                }), onCancel: (/**
                 * @return {?}
                 */
                () => { resolve('取消'); }), onShow: (/**
                 * @return {?}
                 */
                () => {
                    console.log('显示弹窗');
                }) }, options));
        }));
        return from(promise$);
    }
    /**
     * 使用Promise实例包装回调方法，以同步回调方法执行后结果
     * @private
     * @param {?=} message
     * @return {?}
     */
    confirmPromise(message) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            Dialog.confirm({
                message: message,
                onConfirm: (/**
                 * @return {?}
                 */
                () => { resolve(true); }),
                onCancel: (/**
                 * @return {?}
                 */
                () => { resolve(false); }),
            });
        }));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/attachment-preview.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class AttachmentPreviewService {
    /**
     * 自定义弹窗
     * @param {?} options
     * @return {?}
     */
    show(options) {
        AttachmentPreview.show(options);
    }
}
/**
 * @record
 */
function IPreview() { }
if (false) {
    /** @type {?} */
    IPreview.prototype.title;
    /** @type {?|undefined} */
    IPreview.prototype.attachmentId;
    /** @type {?|undefined} */
    IPreview.prototype.rootId;
    /** @type {?|undefined} */
    IPreview.prototype.path;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-traversing.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体遍历服务
 */
class EntityTraversingService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 获取值
     * @param {?} path
     * @return {?}
     */
    getPropValue(path) {
        return this.bindingData.getValue(path);
    }
    /**
     * 获取实体数据
     * @param {?} path
     * @return {?}
     */
    getEntityData(path) {
        /** @type {?} */
        let bindingObj;
        /** @type {?} */
        const bindingListOrObject = this.bindingData.getValue(path);
        if (bindingListOrObject instanceof BindingList === true) {
            bindingObj = bindingListOrObject.currentItem;
        }
        else {
            bindingObj = bindingListOrObject;
        }
        return bindingObj.toJSON();
    }
    /**
     * 获取实体列表数据
     * @param {?} path
     * @return {?}
     */
    getEntityListData(path) {
        /** @type {?} */
        const bindingList = (/** @type {?} */ (this.bindingData.getValue(path)));
        return bindingList.toJSON();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityTraversingService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-manipulation.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EntityManipulationService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 设置path对应的字段值
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    setPropValue(path, value) {
        // 实体层还没有封装，临时用BindingData相关方法代替
        this.bindingData.setValue(path, value, true, true);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityManipulationService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-aggregation.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SplitedPath() { }
if (false) {
    /** @type {?} */
    SplitedPath.prototype.listPath;
    /** @type {?} */
    SplitedPath.prototype.propPath;
}
/**
 * 实体聚合服务
 */
class EntityAggregationService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.traversingService = this.viewModelContext.injector.get(EntityTraversingService);
    }
    /**
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 获取path对应列表记录的条数
     * @param {?} path
     * @return {?}
     */
    count(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        return entityListData.length;
    }
    /**
     * 获取path对应字段的和
     * @param {?} path
     * @return {?}
     */
    sum(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const total = entityListData.reduce((/**
         * @param {?} accTotal
         * @param {?} entityData
         * @return {?}
         */
        (accTotal, entityData) => {
            /** @type {?} */
            let propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            propValue = isNaN(propValue) ? 0 : propValue;
            accTotal += propValue;
            return accTotal;
        }), 0);
        return total;
    }
    /**
     * 获取path对应字段的平均值
     * @param {?} path
     * @return {?}
     */
    avg(path) {
        /** @type {?} */
        const count = this.count(path);
        /** @type {?} */
        const total = this.sum(path);
        return count !== 0 ? total / count : 0;
    }
    /**
     * 获取path对应字段的最大值
     * @param {?} path
     * @return {?}
     */
    max(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const max = entityListData.reduce((/**
         * @param {?} accMax
         * @param {?} entityData
         * @return {?}
         */
        (accMax, entityData) => {
            /** @type {?} */
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMax || propValue > accMax)) {
                accMax = propValue;
            }
            return accMax;
        }), null);
        return max ? max : 0;
    }
    /**
     * 获取path对应字段的最小值
     * @param {?} path
     * @return {?}
     */
    min(path) {
        /** @type {?} */
        const splitedPath = this.splitPath(path);
        /** @type {?} */
        const entityListData = this.traversingService.getEntityListData(splitedPath.listPath);
        /** @type {?} */
        const min = entityListData.reduce((/**
         * @param {?} accMin
         * @param {?} entityData
         * @return {?}
         */
        (accMin, entityData) => {
            /** @type {?} */
            const propValue = parseFloat(this.getPropValue(entityData, splitedPath.propPath));
            if (isNaN(propValue) === false && (!accMin || propValue < accMin)) {
                accMin = propValue;
            }
            return accMin;
        }), null);
        return min ? min : 0;
    }
    /**
     * 获取属性值
     * @private
     * @param {?} entityData
     * @param {?} path
     * @return {?}
     */
    getPropValue(entityData, path) {
        /** @type {?} */
        let currentData = entityData;
        path.forEach((/**
         * @param {?} pathItem
         * @return {?}
         */
        (pathItem) => {
            // 提前退出的都重置为null，主要针对关联对象未赋值场景
            if (!currentData) {
                currentData = null;
                return;
            }
            currentData = currentData[pathItem];
        }));
        return currentData;
    }
    /**
     * 分隔路径，分隔符列表路径和属性路径
     * @private
     * @param {?} path
     * @return {?} 形如 {parentListPath: [], propertyPath: []}
     */
    splitPath(path) {
        /** @type {?} */
        const listPath = path.concat([]);
        /** @type {?} */
        const propPath = [];
        /** @type {?} */
        let currentNode = this.bindingData.getValue(listPath);
        while (currentNode instanceof BindingList !== true) {
            /** @type {?} */
            const propPathItem = listPath.pop();
            if (!propPathItem) {
                return;
            }
            propPath.unshift(propPathItem);
            currentNode = this.bindingData.getValue(listPath);
        }
        return {
            listPath: listPath,
            propPath: propPath
        };
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.traversingService;
    /**
     * @type {?}
     * @private
     */
    EntityAggregationService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity-list.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * EntityList服务
 * \@scope FrameComponent
 */
class EntityListService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityListService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/entity.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体服务
 * \@scope FrameComponent
 */
class EntityService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.traversingService = new EntityTraversingService(viewModelContext);
        this.manipulationService = new EntityManipulationService(viewModelContext);
        this.aggregationService = new EntityAggregationService(viewModelContext);
    }
    /**
     * 获取path对应的属性值
     * @param {?} path
     * @return {?}
     */
    getPropValue(path) {
        return this.traversingService.getPropValue(path);
    }
    /**
     * 设置path对应的属性值
     * @param {?} path
     * @param {?} value
     * @return {?}
     */
    setPropValue(path, value) {
        return this.manipulationService.setPropValue(path, value);
    }
    /**
     * 设置path对应的Entity数据
     * @param {?} path
     * @return {?}
     */
    getEntityData(path) {
        return this.traversingService.getEntityData(path);
    }
    /**
     * 设置path对应的EntityList数据
     * @param {?} path
     * @return {?}
     */
    getEntityListData(path) {
        return this.traversingService.getEntityListData(path);
    }
    /**
     * 获取path对应EntityList记录数
     * @param {?} path
     * @return {?}
     */
    count(path) {
        return this.aggregationService.count(path);
    }
    /**
     * 获取path对应属性的合计值
     * @param {?} path
     * @return {?}
     */
    sum(path) {
        return this.aggregationService.sum(path);
    }
    /**
     * 获取path对应属性的平均值
     * @param {?} path
     * @return {?}
     */
    avg(path) {
        return this.aggregationService.avg(path);
    }
    /**
     * 获取path对应属性的最大值
     * @param {?} path
     * @return {?}
     */
    max(path) {
        return this.aggregationService.max(path);
    }
    /**
     * 获取path对应属性的最小值
     * @param {?} path
     * @return {?}
     */
    min(path) {
        return this.aggregationService.min(path);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    EntityService.prototype.traversingService;
    /**
     * @type {?}
     * @private
     */
    EntityService.prototype.manipulationService;
    /**
     * @type {?}
     * @private
     */
    EntityService.prototype.aggregationService;
    /**
     * @type {?}
     * @private
     */
    EntityService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/entity-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/exception-services/http.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
const HttpStatusType = {
    Info: 1,
    Success: 2,
    Redirect: 3,
    ClientError: 4,
    ServerError: 5,
};
HttpStatusType[HttpStatusType.Info] = 'Info';
HttpStatusType[HttpStatusType.Success] = 'Success';
HttpStatusType[HttpStatusType.Redirect] = 'Redirect';
HttpStatusType[HttpStatusType.ClientError] = 'ClientError';
HttpStatusType[HttpStatusType.ServerError] = 'ServerError';
/**
 * http通用类
 */
class HttpUtil {
    /**
     * 基于http状态码返回状态类型
     * @param {?} httpResponseSatus http请求返回状态码
     * @return {?} null | HttpStatusType
     */
    static getHttpStatusType(httpResponseSatus) {
        if (!httpResponseSatus) {
            return null;
        }
        /** @type {?} */
        let statusType = null;
        if (httpResponseSatus < 100 || httpResponseSatus > 600) {
            statusType = null; // 不合理状态码
        }
        else if (httpResponseSatus >= 100 && httpResponseSatus < 200) {
            statusType = HttpStatusType.Info;
        }
        else if (httpResponseSatus >= 200 && httpResponseSatus < 300) {
            statusType = HttpStatusType.Success;
        }
        else if (httpResponseSatus >= 300 && httpResponseSatus < 400) {
            statusType = HttpStatusType.Redirect;
        }
        else if (httpResponseSatus >= 400 && httpResponseSatus < 500) {
            statusType = HttpStatusType.ClientError;
        }
        else if (httpResponseSatus >= 500 && httpResponseSatus < 600) {
            statusType = HttpStatusType.ServerError;
        }
        return statusType;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/exception-services/exception.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 实体操作服务
 */
class ExceptionService {
    /**
     * 构造函数
     * @param {?} notifyService
     * @param {?} jsBridgeService
     */
    constructor(notifyService, jsBridgeService) {
        this.notifyService = notifyService;
        this.jsBridgeService = jsBridgeService;
    }
    /**
     * 显示异常信息
     * @param {?} error
     * @return {?}
     */
    show(error) {
        this.exception(error);
    }
    /**
     * 异常处理路由方法
     * @private
     * @param {?} error
     * @return {?}
     */
    exception(error) {
        // 针对session失效做特殊处理
        if (error.message && error.message.indexOf('401') !== -1) {
            this.notifyService.error('登录信息已失效请重新打开');
            setTimeout((/**
             * @return {?}
             */
            () => { this.jsBridgeService.closeWindow(); }), 2000);
            return;
        }
        if (error && error.response) {
            this.httpErrorHandler(error.response);
        }
    }
    /**
     * http请求异常处理器
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorHandler(httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        const statusType = HttpUtil.getHttpStatusType(httpError.status);
        switch (statusType) {
            case HttpStatusType.ClientError:
                this.httpErrorInClient(httpError);
                break;
            case HttpStatusType.ServerError:
                this.httpErrorInServer(httpError);
                break;
            default:
                throw new Error('Get invalid status code when using httpErrorHandler method.');
        }
    }
    /**
     * 服务器端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorInServer(httpError) {
        /** @type {?} */
        let error = httpError.data;
        if (typeof (error) === 'string') {
            try {
                error = JSON.parse(error);
            }
            catch (e) { }
        }
        if (!error || error.Level == null || error.Level == undefined) { // 未封装error或未设置异常等级
            this.notifyService.error(httpError.message);
            return;
        }
        /** @type {?} */
        const getNotifyServiceMethodName = this.getNotifyServiceMethodName(error.Level);
        this.notifyService[`${getNotifyServiceMethodName}`](error.Message);
    }
    /**
     * 客户端异常提示弹框
     * @private
     * @param {?} httpError
     * @return {?}
     */
    httpErrorInClient(httpError) {
        if (!httpError) {
            return;
        }
        /** @type {?} */
        const url = httpError.config && httpError.config.url && httpError.config.url;
        /** @type {?} */
        const status = httpError.status && httpError.status;
        this.notifyService.error(`${url} ${status}`);
    }
    /**
     * 获取异常处理策略
     * @param {?} exceptionLevel 异常等级
     * @return {?}
     */
    getNotifyServiceMethodName(exceptionLevel) {
        /** @type {?} */
        let exception;
        switch (exceptionLevel) {
            case 0 /* Info */:
                exception = 'info';
                break;
            case 1 /* Warning */:
                exception = 'warning';
                break;
            case 2 /* Error */:
                exception = 'error';
                break;
            case 3 /* Fatal */:
                exception = 'fatal';
                break;
            default:
                // 默认异常等级是错误
                exception = 'error';
                break;
        }
        return exception;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.notifyService;
    /**
     * @type {?}
     * @private
     */
    ExceptionService.prototype.jsBridgeService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/exception-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/base-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据服务基类
 */
class BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.init();
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.initServices();
    }
    /**
     * @private
     * @return {?}
     */
    initServices() {
        this.loadingService = this.getService(LoadingService);
        this.toastService = this.getService(ToastService);
        this.notifyService = this.getService(NotifyService);
        this.dialogService = this.getService(DialogService);
        this.exceptionService = this.getService(ExceptionService);
        this.entityService = this.getService(EntityService);
        this.befRepository = (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    getService(token) {
        /** @type {?} */
        const injector = this.viewModelContext.injector;
        return injector.get(token);
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.loadingService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.toastService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.notifyService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.dialogService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.exceptionService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.befRepository;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.entityService;
    /**
     * @type {?}
     * @protected
     */
    BaseDataService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/data-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据工具类
 * \@summary
 * 数据相关的工具方法临时放在这里
 */
class DataUtil {
    /**
     * 将BindingPath转换为EntityPath
     * @param {?} bindingPath
     * @param {?} viewModelContext
     * @return {?}
     */
    static convertBindingPathToEntityPath(bindingPath, viewModelContext) {
        /** @type {?} */
        const rid = viewModelContext.bindingData.list.currentId;
        // root表数据id
        /** @type {?} */
        let path = '/' + rid;
        /** @type {?} */
        const subPaths = bindingPath.split('/');
        if (subPaths.length > 0) {
            for (let index = 1; index < subPaths.length - 1; index++) {
                /** @type {?} */
                const subPath = subPaths[index];
                /** @type {?} */
                const subData = viewModelContext.bindingData[subPath];
                if (!subData || !subData.currentId) {
                    throw Error(`获取子表完整路径出错，找不到${subData}对应的子表，或对应子表没有当前行。`);
                }
                path += `/${subPath}/${subData.currentId}`;
            }
        }
        path += '/' + subPaths[subPaths.length - 1];
        return path;
    }
    /**
     * @param {?} viewModelContext
     * @return {?}
     */
    static clearFromValidateType(viewModelContext) {
        /** @type {?} */
        const contexts = viewModelContext.appContext.viewModelContextManager.getContexts();
        /** @type {?} */
        const contextsChild = contexts.filter((/**
         * @param {?} item
         * @return {?}
         */
        item => { return (item.parent && viewModelContext.id === item.parent.id); }));
        if (contextsChild.length >= 1) {
            contextsChild.forEach((/**
             * @param {?} item
             * @return {?}
             */
            item => {
                item.form.resetFieldsValidate();
            }));
        }
    }
    /**
     * @param {?} parame
     * @return {?}
     */
    static stringTransformArray(parame) {
        if (this.parameIsThreeBoss(parame)) {
            return [];
        }
        else {
            return JSON.parse(parame);
        }
    }
    /**
     * 检测参数是否属于三大幻神 ''  undefined  null
     * @param {?} parame
     * @return {?}
     */
    static parameIsThreeBoss(parame) {
        if (parame === '' || parame === undefined || parame === null) {
            return true;
        }
        else {
            return false;
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/load-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class LoadDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 加载列表数据
     * @param {?} filters
     * @param {?} sorts
     * @param {?=} size
     * @param {?=} index
     * @return {?}
     */
    loadForList(filters, sorts, size, index) {
        if (typeof filters === 'string') {
            filters = DataUtil.stringTransformArray(filters);
        }
        if (typeof sorts === 'string') {
            sorts = DataUtil.stringTransformArray(sorts);
        }
        let { pageSize, pageIndex } = this.viewModelContext.repository.paginationInfo || { pageSize: null, pageIndex: null };
        this.loadingService.show();
        if (!size && !pageSize) {
            pageSize = 20;
        }
        else if (size) {
            pageSize = size;
        }
        if (!index && !pageIndex) {
            pageIndex = 1;
        }
        else if (index) {
            pageIndex = index;
        }
        if (pageIndex === 1) {
            this.befRepository.entityCollection.clear();
        }
        /** @type {?} */
        const query$ = this.befRepository.getEntities(filters, sorts, pageSize, pageIndex);
        return query$.pipe(tap((/**
         * @return {?}
         */
        () => {
            let { pageIndex, pageCount, totalCount } = this.viewModelContext.repository.paginationInfo;
            if (pageIndex === pageCount || totalCount === 0) {
                this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewFinished' });
            }
            else {
                this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'listviewUnFinished' });
            }
            this.viewModelContext.appContext.eventBus.triggerEvent({ type: 'loadDataFinished' });
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
    /**
     * 加载卡片数据
     * @param {?} id
     * @return {?}
     */
    loadForCard(id) {
        DataUtil.clearFromValidateType(this.viewModelContext);
        this.loadingService.show();
        /** @type {?} */
        const get$ = this.befRepository.getEntityById(id);
        return get$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
    /**
     * 加载进入子表后，未作任何操作之前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    loadDataForChildCard(path) {
        /** @type {?} */
        const childID = this.viewModelContext.bindingData[path]['id'];
        /** @type {?} */
        const id = this.viewModelContext.bindingData[path]['parentID'];
        /** @type {?} */
        const entity = this.viewModelContext.repository.entityCollection.getEntityById(id);
        /** @type {?} */
        const childEntityAll = entity[path];
        /** @type {?} */
        const childEntityData = childEntityAll.get(childID).data;
        this.viewModelContext.uiState.setPropertyValue('$childEntity', Object.assign({}, childEntityData));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/create-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 新增数据服务类
 */
class CreateDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 新增数据
     * @return {?}
     */
    create() {
        this.befRepository.entityCollection.clear();
        DataUtil.clearFromValidateType(this.viewModelContext);
        this.loadingService.show();
        /** @type {?} */
        const create$ = this.befRepository.createEntity();
        return create$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
    /**
     * 新增后代节点
     * @param {?} path
     * @return {?}
     */
    createByPath(path) {
        this.loadingService.show();
        // 当前为新增
        /** @type {?} */
        const entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
        /** @type {?} */
        const append$ = this.befRepository.appendEntityByPath(entityPath);
        /** @type {?} */
        const result$ = append$.pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.viewModelContext.uiState.setPropertyValue('$isAdd', { status: true, id: e['id'], path, child: Object.assign({}, e.data) });
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
        return result$;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/edit-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class EditDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 编辑数据
     * @param {?} id
     * @return {?}
     */
    edit(id) {
        this.loadingService.show();
        /** @type {?} */
        const edit$ = this.befRepository.editEntityById(id);
        return edit$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/update-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据更新服务
 */
class UpdateDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 编辑数据
     * @param {?} id
     * @return {?}
     */
    update(id) {
        this.loadingService.show();
        /** @type {?} */
        const update$ = this.befRepository.updateEntityById(id);
        /** @type {?} */
        const result$ = update$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
            // this.exceptionService.show('更新失败', exception);
        })));
        return result$;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/remove-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 删除数据服务类
 */
class RemoveDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 删除数据
     * @param {?} id
     * @return {?}
     */
    removeById(id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            if (this['context'] && this['context'].eventParams && this['context'].eventParams.swipecellClose) {
                this['context'].eventParams.swipecellClose();
            }
            return this.cancelChanges(id);
        })));
        return result$;
    }
    /**
     * 确认删除
     * @private
     * @param {?} id
     * @return {?}
     */
    cancelChanges(id) {
        this.loadingService.show();
        /** @type {?} */
        const remove$ = this.befRepository.removeEntityAndSaveById(id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.notifyService.success('删除成功');
            this.loadingService.hide();
        }), (/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.error('删除失败');
        })));
    }
    /**
     * 批量删除数据
     * @param {?} ids
     * @return {?}
     */
    removeByIds(ids) {
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            const selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        const multiRemove$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            this.loadingService.show();
            return this.befRepository.removeEntitiesByIds(ids);
        })));
        return multiRemove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('删除成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
            // this.exceptionService.show('删除失败', exception);
        })));
    }
    /**
     * 删除后代节点数据
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByPathAndId(path, id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            if (this['context'] && this['context'].eventParams && this['context'].eventParams.swipecellClose) {
                this['context'].eventParams.swipecellClose();
            }
            return this.removeByPathAndIdChanges(path, id);
        })));
        return result$;
    }
    /**
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByPathAndIdChanges(path, id) {
        this.loadingService.show();
        /** @type {?} */
        const entityPath = DataUtil.convertBindingPathToEntityPath(path, this.viewModelContext);
        /** @type {?} */
        const remove$ = this.befRepository.removeEntityByPath(entityPath, id);
        return remove$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('删除成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.loadingService.hide();
            console.error(error);
        })));
    }
    /**
     * 批量删除后代节点数据
     * @param {?} path
     * @param {?} ids
     * @return {?}
     */
    removeByPathAndIds(path, ids) {
        throw new Error('Not Implemented');
    }
    /**
     * 业务附件批量删除数据
     * @param {?} url
     * @param {?} ids
     * @return {?}
     */
    removeByBusinessIds(url, ids) {
        // 由于ListView尚未和UIState集成，无法直接获取ids，临时从事件参数中获取
        if (!ids) {
            /** @type {?} */
            const selectedItems = this['context'].eventParams;
            ids = selectedItems.map((/**
             * @param {?} selectedItem
             * @return {?}
             */
            (selectedItem) => {
                return selectedItem.id;
            }));
        }
        /** @type {?} */
        const params = {
            ids: ids.join(',')
        };
        /** @type {?} */
        const requestConfig = {
            params: params,
            body: {
                dataChange: [],
                variableChange: null
            }
        };
        return this.befRepository.apiProxy.request(HttpMethods.PUT, url, requestConfig, true);
        // this.loadingService.show();
        // const multiRemove$ = this.dialogService.confirm('是否删除').pipe(
        //   switchMap(val => {
        //     if (val === false) {
        //       return EMPTY;
        //     }
        //   }));
        // return multiRemove$.pipe(
        //   tap(
        //     () => {
        //       this.loadingService.hide();
        //     },
        //     (exception: any) => {
        //       this.loadingService.hide();
        //     }
        //   )
        // );
    }
    /**
     * 业务附件删除后代节点数据
     * @param {?} url
     * @param {?} path
     * @param {?} id
     * @return {?}
     */
    removeByBusinessPathAndId(url, path, id) {
        /** @type {?} */
        const result$ = this.dialogService.confirm('是否删除').pipe(switchMap((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            if (val === false) {
                return EMPTY;
            }
            return this.befRepository.apiProxy.request(HttpMethods.PUT, url);
        })));
        return result$;
    }
    /**
     * 子表清除编辑与新增标记
     * @return {?}
     */
    ClearStatusAfterchildCardSave() {
        this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
        this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
        return of(true);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/save-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SaveDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 保存数据
     * @return {?}
     */
    save() {
        this.loadingService.show();
        /** @type {?} */
        const save$ = this.befRepository.saveEntities();
        return save$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
            this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
    }
    /**
     * 子表保存
     * @return {?}
     */
    saveByPath() {
        this.loadingService.show();
        /** @type {?} */
        const currentRootId = this.viewModelContext.bindingData.list.currentId;
        /** @type {?} */
        const update$ = this.befRepository.updateEntityById(currentRootId);
        /** @type {?} */
        const result$ = update$.pipe(map((/**
         * @return {?}
         */
        () => {
            return true;
        })), tap((/**
         * @return {?}
         */
        () => {
            this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            this.viewModelContext.uiState.setPropertyValue('$childEntity', null);
            this.loadingService.hide();
            this.notifyService.success('保存成功');
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
        })));
        return result$;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/cancel-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CancelDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 新增数据
     * @return {?}
     */
    cancel() {
        this.loadingService.show();
        /** @type {?} */
        const cancel$ = this.befRepository.cancelEntityChanges();
        return cancel$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} exception
         * @return {?}
         */
        (exception) => {
            this.loadingService.hide();
            // this.exceptionService.show('取消失败', exception);
        })));
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/be-action.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * BE动作调用服务
 */
class BeActionService extends BaseDataService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
        this.viewModelContext = viewModelContext;
    }
    /**
     * 执行自定义动作
     * @param {?} actionUrl
     * @param {?} httpMethod
     * @param {?=} httpHeaders
     * @param {?=} params
     * @param {?=} body
     * @return {?}
     */
    invokeAction(actionUrl, httpMethod, httpHeaders, params, body) {
        return this.innerInvokeAction(actionUrl, httpMethod, httpHeaders, params, body);
    }
    /**
     * 调用自定义动作
     * @private
     * @param {?} actionUrl
     * @param {?} method
     * @param {?=} headers
     * @param {?=} params
     * @param {?=} body
     * @return {?}
     */
    innerInvokeAction(actionUrl, method, headers, params, body) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const baseUrl = apiProxy.baseUrl;
        // 构造url
        /** @type {?} */
        const fullActionUrl = `${baseUrl}/service/${actionUrl}`;
        /** @type {?} */
        const requestConfig = {};
        // headers构造
        if (headers) {
            requestConfig.headers = headers;
        }
        // 查询参数
        if (params) {
            requestConfig.params = params;
        }
        // body构造
        if (body) {
            requestConfig.body = body;
        }
        this.loadingService.show();
        /** @type {?} */
        const result$ = apiProxy.request(method, fullActionUrl, requestConfig);
        return result$.pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.loadingService.hide();
            console.log(error);
        })));
    }
}
if (false) {
    /**
     * @type {?}
     * @protected
     */
    BeActionService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/approve.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ApproveService {
    /**
     * @param {?} wfTaskHandlerService
     * @param {?} viewModelContext
     */
    constructor(wfTaskHandlerService, viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.wfTaskHandlerService = wfTaskHandlerService;
        this.notifyService = this.getService(NotifyService);
    }
    /**
     * 获取服务实例
     * @template T
     * @param {?} token
     * @return {?}
     */
    getService(token) {
        /** @type {?} */
        const injector = this.viewModelContext.injector;
        return injector.get(token);
    }
    /**
     * 提交审批(带入口单据使用wf控件)
     * @param {?} bizBillID 业务单据Id
     * @param {?} bizDefKey 入口单据Id
     * @param {?=} options 上下文参数
     * @param {?=} variables 可选参数
     * @return {?}
     */
    submitApproveWithBizDefKeyUseControl(bizBillID, bizDefKey, options = {}, variables) {
        if (!bizBillID) {
            this.notifyService.error('业务单据Id不能为空');
            return EMPTY;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return EMPTY;
        }
        if (!options || typeof options !== 'object') {
            options = {};
        }
        /** @type {?} */
        const payload = Object.assign({ dataId: bizBillID, bizDefKey }, options);
        // 处理variables参数
        if (variables) {
            if (variables.startsWith('{') && variables.endsWith('}')) {
                try {
                    variables = JSON.parse(variables);
                }
                catch (_a) {
                    console.log('variables parse failed!');
                    variables = {};
                }
            }
            payload.variables = variables;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.startProcess(payload);
    }
    /**
     * 取消审批(支持主表、子表)
     * 迁移web端（已废弃）请调用新的取消提交方法
     * @param {?} procInstId 流程实例Id
     * @return {?}
     */
    cancelSubmit(procInstId) {
        if (!procInstId) {
            this.notifyService.error('流程实例Id不能为空');
            return EMPTY;
        }
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmit({ dataId: null, bizDefKey: null, procInstId });
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.submitWithBizDefKey(dataId, bizDefKey);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.cancelSubmitWithDataId(dataId, bizDefKey);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childSubmit(parentDataId, childDataId, bizDefKey);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childCancelSubmit(parentDataId, childDataId, bizDefKey);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchSubmit(parentDataId, childDataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        return this.wfTaskHandlerService && this.wfTaskHandlerService.childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.wfTaskHandlerService;
    /**
     * @type {?}
     * @private
     */
    ApproveService.prototype.notifyService;
    /**
     * @type {?}
     * @protected
     */
    ApproveService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/check-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据检查服务
 */
class CheckDataService extends BaseDataService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        super(viewModelContext);
    }
    /**
     * 离开页面前检查数据变更
     * @return {?}
     */
    checkChangesBeforeLeave() {
        //const isEntitiesChanged = this.befRepository.entityManager.checkAllEntityChanges();
        // 实体数据没有变化，继续执行
        if (!BefRepositoryUtil.isExistUnsaveData(this.befRepository)) {
            return of(true);
        }
        return this.dialogService.confirm('存在未保存的变更，确认离开当前页面？').pipe(switchMap((/**
         * @param {?} ifLeave
         * @return {?}
         */
        (ifLeave) => {
            if (ifLeave === false) {
                return EMPTY;
            }
            else {
                this.loadingService.show();
                /** @type {?} */
                const cancel$ = this.befRepository.cancelEntityChanges();
                return cancel$.pipe(switchMap((/**
                 * @return {?}
                 */
                () => {
                    if (this.befRepository.apiProxy.associatedUrlMap.size >= 1) {
                        /** @type {?} */
                        const urls = [...this.befRepository.apiProxy.associatedUrlMap.keys()];
                        return this.befRepository.apiProxy.request(HttpMethods.POST, `${urls[0]}/service/cancel`);
                    }
                    else {
                        return of(true);
                    }
                })), tap((/**
                 * @return {?}
                 */
                () => {
                    this.loadingService.hide();
                })));
            }
        })));
    }
    /**
     * 子表离开页面前检查数据变更
     * @return {?}
     */
    checkChangesBeforeLeaveChild() {
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 继续判断
            /** @type {?} */
            const childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            const childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            const child = this.viewModelContext.uiState['$isAdd'].child;
            /** @type {?} */
            const subPaths = childPath.split('/');
            /** @type {?} */
            let currentChild;
            if (subPaths[0] && subPaths.length === 1) {
                currentChild = this.viewModelContext.bindingData[subPaths[0]];
            }
            if (!subPaths[0] && subPaths.length === 2) {
                currentChild = this.viewModelContext.bindingData[subPaths[1]];
            }
            if (subPaths.length > 2) {
                // 暂不处理从从表
                /** @type {?} */
                let childPath = '';
                if (subPaths[0]) {
                    childPath = subPaths[0];
                }
                for (let index = 1; index < subPaths.length; index++) {
                    childPath = childPath + subPaths[index];
                }
                currentChild = this.viewModelContext.bindingData[childPath];
            }
            /** @type {?} */
            const isChanged = this.checkForVariationBetweenTheTwo(currentChild, child);
            if (isChanged) {
                return of(true);
            }
            /** @type {?} */
            const entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId);
        }
        return of(true);
    }
    /**
     * @private
     * @param {?} newData
     * @param {?} oldData
     * @return {?}
     */
    checkForVariationBetweenTheTwo(newData, oldData) {
        /** @type {?} */
        const childKeys = Object.keys(oldData);
        /** @type {?} */
        let isChanged = false;
        for (let i = 0; i < childKeys.length; i++) {
            if (Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Object]' || Object.prototype.toString.call(oldData[childKeys[i]]) === '[object Array]') {
                if (JSON.stringify(oldData[childKeys[i]]) !== JSON.stringify(newData[childKeys[i]])) {
                    return isChanged = true;
                }
            }
            else {
                if (oldData[childKeys[i]] !== newData[childKeys[i]]) {
                    return isChanged = true;
                }
            }
        }
        return isChanged;
    }
    /**
     * 进入子表编辑或者新增点击返回都会复原进入子表前的数据
     * @param {?} path 子表路径
     * @return {?}
     */
    checkChangesBeforeLeaveAddOrEditChild(path) {
        // 新增状态
        if (this.viewModelContext.uiState['$isAdd'] && this.viewModelContext.uiState['$isAdd'].status === true) {
            // 新增直接干掉
            /** @type {?} */
            const childId = this.viewModelContext.uiState['$isAdd'].id;
            /** @type {?} */
            const childPath = this.viewModelContext.uiState['$isAdd'].path;
            /** @type {?} */
            const entityPath = DataUtil.convertBindingPathToEntityPath(childPath, this.viewModelContext);
            return this.befRepository.removeEntityByPath(entityPath, childId).pipe(tap((/**
             * @return {?}
             */
            () => {
                this.viewModelContext.uiState.setPropertyValue('$isAdd', null);
            })));
        }
        else {
            // 编辑还原
            /** @type {?} */
            const childID = this.viewModelContext.bindingData[path]['id'];
            /** @type {?} */
            const id = this.viewModelContext.bindingData[path]['parentID'];
            /** @type {?} */
            const childEntityData = this.viewModelContext.uiState['$childEntity'];
            if (!childEntityData) {
                return of(true);
            }
            this.viewModelContext.repository.entityCollection.getEntityById(id)[path].get(childID).load(childEntityData);
            return of(true);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/data-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/router.servcie.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 路由服务
 */
class RouterService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     * @param {?} router
     * @param {?} jsBridgeService
     */
    constructor(viewModelContext, router, jsBridgeService) {
        this.jsBridgeService = jsBridgeService;
        this.viewModelContext = viewModelContext;
        this.router = router;
    }
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    navigate(path, queryParams = {}, backParams = {}, backPath) {
        if (!path)
            return;
        queryParams = this.ParamsFromStringToObject(queryParams);
        backParams = this.ParamsFromStringToObject(backParams);
        /** @type {?} */
        const pathIndex = this.sessionStorageSaveHistory(path, backPath, backParams)
        // 跨工程跳转
        ;
        // 跨工程跳转
        if (path && pathIndex >= 0) {
            /** @type {?} */
            let urlPath = this.splicePath(path, queryParams);
            window.location.href = urlPath;
            return false;
        }
        window['MOBILE_ORIGIN_BACK'] && window['MOBILE_ORIGIN_BACK'].reflushOriginGoback();
        this.router.push({
            path: path,
            query: queryParams
        });
    }
    /**
     * @private
     * @param {?} pathIndex
     * @param {?} path
     * @return {?}
     */
    removeParams(pathIndex, path) {
        /** @type {?} */
        let end = path.search('\\?');
        if (end = -1) {
            end = path.length;
        }
        return path.slice(pathIndex, end);
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getsessionStorageSaveHistoryKey(path) {
        /** @type {?} */
        const pathIndex = path.search('/apps');
        // 跨页面跳转离开
        if (path && pathIndex >= 0) {
            return this.removeParams(pathIndex, path);
        }
        return this.router.options.history.base + path;
    }
    /**
     * @private
     * @param {?} path
     * @param {?} backPath
     * @param {?} backParams
     * @return {?}
     */
    sessionStorageSaveHistory(path, backPath, backParams) {
        /** @type {?} */
        const pathIndex = path.search('/apps');
        /** @type {?} */
        const key = this.getsessionStorageSaveHistoryKey(path);
        /** @type {?} */
        let historyObject = {}
        //判断是否制定了目标页面得返回地址
        ;
        //判断是否制定了目标页面得返回地址
        if (backPath) {
            /** @type {?} */
            const backPathIndex = path.search('/apps');
            //指定返回路由为跨工程跳转
            if (backPathIndex >= 0) {
                historyObject = {
                    routerWay: 'href',
                    path: backPath,
                    query: backParams
                };
            }
            else {
                historyObject = {
                    routerWay: 'Router',
                    path: backPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
        else {
            /** @type {?} */
            let currentPath = this.router.currentRoute.value.path;
            // 跨页面跳转离开
            if (path && pathIndex >= 0) {
                //拼接当前路由
                currentPath = this.router.options.history.base + this.router.options.history.location;
                //记录当前路由
                historyObject = {
                    routerWay: 'href',
                    path: currentPath,
                    query: backParams
                };
            }
            else {
                // 路由方式跳转记录
                historyObject = {
                    routerWay: 'Router',
                    path: currentPath,
                    query: backParams
                };
            }
            sessionStorage.setItem(key, JSON.stringify(historyObject));
            return pathIndex;
        }
    }
    /**
     * 带维度的路由跳转
     * @param {?} path
     * @param {?=} queryParams
     * @param {?=} backParams
     * @param {?=} backPath
     * @return {?}
     */
    navigateForRtc(path, queryParams = {}, backParams = {}, backPath) {
        if (!queryParams || !queryParams.metadataId) {
            this.navigate(path, queryParams, backParams, backPath);
        }
        /** @type {?} */
        const rtcOptions = {
            metadataId: queryParams.metadataId,
            withDims: false,
            dim1: queryParams.dim1,
            dim2: queryParams.dim2
        };
        delete queryParams['metadataId'];
        delete queryParams['dim1'];
        delete queryParams['dim2'];
        /** @type {?} */
        const correctRtcOptions$ = this.correctRtcOptions(rtcOptions);
        /** @type {?} */
        const extendedPath$ = correctRtcOptions$.pipe(map((/**
         * @param {?} correctedRtcOptions
         * @return {?}
         */
        (correctedRtcOptions) => {
            return this.getExtendPath(path, correctedRtcOptions);
        })));
        /** @type {?} */
        const result$ = extendedPath$.pipe(tap((/**
         * @param {?} extendedPath
         * @return {?}
         */
        (extendedPath) => {
            this.navigate(extendedPath, queryParams, backParams);
        })));
        result$.subscribe();
    }
    /**
     * 纠正维度信息
     * \@summary
     * 1、非运行时定制表单，widthDims=false, 维度为空；
     * 2、运行时定制表单：维度值不存在时，则纠正为public；
     * @private
     * @param {?} rtcOptions
     * @return {?}
     */
    correctRtcOptions(rtcOptions) {
        /** @type {?} */
        const dim1 = rtcOptions.dim1 || 'public';
        /** @type {?} */
        const dim2 = rtcOptions.dim2 || 'public';
        /** @type {?} */
        const metadataId = rtcOptions.metadataId;
        /** @type {?} */
        const httpClient = this.viewModelContext.injector.get(HttpClient);
        /** @type {?} */
        const url = '/api/runtime/bcc/v1.0/template/beforeNavigate';
        /** @type {?} */
        const body = {
            isRootMetadata: true,
            metadataId: metadataId,
            dim1: dim1,
            dim2: dim2,
        };
        /** @type {?} */
        const beforeNavigate$ = httpClient.post(url, body, null).pipe(map((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            /** @type {?} */
            const correctedRtcOptions = {
                metadataId: result.metadataId,
                withDims: result.withDims === 1 ? true : false,
                dim1: result.dim1,
                dim2: result.dim2
            };
            return correctedRtcOptions;
        })));
        return beforeNavigate$;
    }
    /**
     * 获取运行时定制表单地址
     * @private
     * @param {?} path
     * @param {?} rtcOptions
     * @return {?}
     */
    getExtendPath(path, rtcOptions) {
        if (rtcOptions.withDims === false) {
            return path;
        }
        /** @type {?} */
        const arrPath = path.split('index.html');
        /** @type {?} */
        const append = `${rtcOptions.dim1}/${rtcOptions.dim2}/index.html`.toLowerCase();
        /** @type {?} */
        const extendPath = arrPath.join(append);
        return extendPath;
    }
    /**
     * 拼接url路径
     * @private
     * @param {?} path 路径
     * @param {?} params 参数
     * @return {?}
     */
    splicePath(path, params) {
        /** @type {?} */
        let urlPath = path;
        /** @type {?} */
        const end = urlPath.search('\\?');
        if (end > -1) {
            urlPath = urlPath.slice(0, end);
        }
        /** @type {?} */
        const keys = Object.keys(params);
        if (keys.length > 0) {
            urlPath = urlPath + '?';
            keys.forEach((/**
             * @param {?} element
             * @return {?}
             */
            element => {
                urlPath = urlPath + element + '=' + params[`${element}`] + '&';
            }));
            urlPath = urlPath.slice(0, urlPath.length - 1);
        }
        return urlPath;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    ParamsFromStringToObject(params) {
        if (Object.prototype.toString.call(params) === '[object Object]') {
            return params;
        }
        try {
            params = JSON.parse(params);
        }
        catch (error) {
            if (!params) {
                params = {};
            }
            else {
                params = {};
                console.error('路由传参params不是JSON串格式');
            }
        }
        if (Object.prototype.toString.call(params) !== '[object Object]') {
            return {};
        }
        return params;
    }
    /**
     * 路由跳转
     * @param {?} path   路由路径
     * @param {?=} queryParams
     * @return {?}
     */
    navigateReplace(path, queryParams = {}) {
        if (typeof queryParams === 'string') {
            queryParams = JSON.parse(queryParams);
        }
        this.router.replace({
            path: path,
            query: queryParams
        });
    }
    /**
     * 后退
     * @param {?} params
     * @return {?}
     */
    goBack(params) {
        params = this.ParamsFromStringToObject(params);
        /** @type {?} */
        const currentPath = this.router.options.history.base + this.router.currentRoute.value.path;
        /** @type {?} */
        let need_go_back = sessionStorage.getItem(currentPath);
        if (!need_go_back) {
            if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
                return;
            }
            this.jsBridgeService.closeWindow();
            return;
        }
        /** @type {?} */
        const keys = Object.keys(params);
        need_go_back = JSON.parse(need_go_back);
        if (need_go_back && need_go_back['routerWay'] === 'Router') {
            /** @type {?} */
            let query = need_go_back['query'];
            if (keys.length > 0) {
                query = Object.assign({}, query, params);
            }
            this.router.push({
                query,
                path: need_go_back['path'],
            });
        }
        if (need_go_back && need_go_back['routerWay'] === 'href') {
            /** @type {?} */
            let query = need_go_back['query'];
            if (keys.length > 0) {
                query = Object.assign({}, query, params);
            }
            /** @type {?} */
            let path = need_go_back['path'];
            path = this.splicePath(path, query);
            window.location.href = path;
        }
    }
    /**
     * 映射路由状态
     * @return {?}
     */
    mappingToUIState() {
        /** @type {?} */
        const routerState = {
            params: this.router.currentRoute['value'].params,
            queryParams: this.router.currentRoute['value'].query
        };
        this.viewModelContext.uiState['routerState'] = routerState;
    }
}
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    RouterService.prototype.viewModelContext;
    /**
     * VueRouter实例
     * @type {?}
     * @private
     */
    RouterService.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RouterService.prototype.jsBridgeService;
}
/**
 * Token
 * \@todo：临时方案，直接注入VueRouter实例。
 * @type {?}
 */
const ROUTER_INSTANCE_TOKEN = '@farris/mobile-command-services/ROUTER_INSTANCE_TOKEN';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validator-services/validator.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 数据服务基类
 */
class ValidatorServices {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 获取某个视图模型上得所有验证结果
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    validateFields(viewModelId) {
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
        }
        else {
            return this.viewModelContext.form.validateFields();
        }
    }
    /**
     * 处理某个视图模型上得所有验证结果
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    handleValidateFields(viewModelId) {
        /** @type {?} */
        let validateFieldsResults = [];
        if (viewModelId) {
            validateFieldsResults = this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.validateFields();
        }
        else {
            this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
             * @param {?} context
             * @return {?}
             */
            (context) => {
                validateFieldsResults = validateFieldsResults.concat(context.form.validateFields());
            }));
        }
        if (validateFieldsResults.length === 0) {
            return of(true);
        }
        return zip(...validateFieldsResults).pipe(switchMap((/**
         * @param {?} value
         * @return {?}
         */
        (value) => {
            /** @type {?} */
            const index = value.findIndex((/**
             * @param {?} item
             * @return {?}
             */
            item => item['passing'] === false));
            if (index > -1) {
                return EMPTY;
            }
            else {
                return of(true);
            }
        })));
    }
    /**
     * 获取某个字段的验证结果
     * @param {?} name 字段名称
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    getFieldError(name, viewModelId) {
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.getFieldError(name);
        }
        else {
            return this.viewModelContext.form.getFieldError(name);
        }
    }
    /**
     * 重置一组校验状态 不传参数清除所有
     * @param {?=} fields name的数组
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    resetFieldsValidate(fields, viewModelId) {
        if (fields && typeof fields === 'string') {
            fields = JSON.parse(fields);
        }
        if (viewModelId) {
            return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId).form.resetFieldsValidate(fields);
        }
        else {
            this.viewModelContext.appContext.viewModelContextManager.getRootContextAndPosterityById(this.viewModelContext.id).forEach((/**
             * @param {?} context
             * @return {?}
             */
            (context) => {
                context.form.resetFieldsValidate(fields);
            }));
        }
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    ValidatorServices.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validator-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/ccwork-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CCworkService {
    /**
     * @param {?} callback
     * @return {?}
     */
    init(callback) {
        window.top['iCityBridge'].init(callback);
    }
    /**
     * {
     * quality:图片质量，可选值high、mid、low, high为1920*1080；mid为720*540；low: 480*360，默认为mid
     * mode:唤起模式，可选值both（仅支持iOS）、camera、album, 默认为camera;
     * mark文字水印，字数最大值50
     * }
     * @param {?=} options Object
     *
     * @return {?}
     */
    takePhoto(options = { quality: 'mid' }) {
        // callback return object {errormessage:""，result:"base64格式"}
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data['result']);
            }
        });
        window.top['iCityBridge'].ccworkGetPicsFromCameraAndAlbum(Object.assign({}, options), callback);
        return subject;
    }
    /**
     * path 如果不为空则从指定图片文件识别二维码,空就吊起相机
     * filters 条码类型过滤列表，如QR、EAN13、EAN8
     *
     * @return {?}
     */
    scanQRCode() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data['result']);
            }
        });
        window.top['iCityBridge'].ccworkScanCode({}, callback);
        return subject;
    }
    /**
     * @return {?}
     */
    getSysInfo() {
    }
    /**
     * @return {?}
     */
    getLocation() {
        /**
         *  回调函数
         *  输出结构 object
         *  errormessage:""
         *  result:Object {
         *  addr:'山东省济南市历下区经十路靠近浪潮'
         *  city:"济南"
         *  country:"中国"
         *  course:-1
         *  district:"历下区"
         *  lat:36.66254123263889
         *  lng:117.12974745008681
         *  province:"山东省"
         *  street:"经十路"
         *  streetNum:"1单元"
         * }
         *  status:true
         * @type {?}
         */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data['result']);
            }
        });
        window.top['iCityBridge'].ccworkGetLocation(callback);
        return subject;
    }
    // TODO:云上协同选择文件
    /**
     * @return {?}
     */
    selectFile() {
        /** @type {?} */
        const subject = new Subject();
        subject.next([]);
        return subject;
    }
    /**
     *
     * @param {?} number string
     * @param {?} content string
     * @return {?}
     */
    sendSMS(number, content) {
        /** @type {?} */
        const options = {
            numbers: [number],
            content
        };
        window.top['iCityBridge'].ccworkSendSms(options);
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    openSendSMS(number, content) {
        window.top['iCityBridge'].sendSMS({ tel: number, msg: content });
    }
    /**
     *
     * @param {?} number string
     * @return {?}
     */
    tel(number) {
        window.top['iCityBridge'].ringUp(number);
    }
    /**
     *
     * @param {?=} options
     * @return {?}
     */
    selectPictureFromAlbum(options = { maxNum: 9, mType: 0 }) {
        /**
         * params object
         *  { maxNum : number 9 最大可选数 默认9
         *    mType: number 0 	选择模式，可选值0/1, 0:图片，1：视频;
         * }
         * @type {?}
         */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data['result']);
            }
        });
        window.top['iCityBridge'].ccworkGetPicsFromAlbum(options, callback);
        return subject;
        /**
         *  object
         *  errormessage:""
         *  result:Array [
         * base64
         * ]
         *  status:true
         */
    }
    /**
     *
     * @param {?} options
     * @return {?}
     */
    takeVideo(options) {
        /**
         * params object
         *  {
         *  time : number 短视频时间（秒） 最大60s
         *  quality: number 0 	视频质量 取值范围0~1
         *  id :string 	视频id（视频名字）
         * }
         * @type {?}
         */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data['result']);
            }
        });
        window.top['iCityBridge'].ccworkTakeShortVideo(Object.assign({ time: 15 }, options), callback);
        return subject;
        /**
         *  object
         *  errormessage:""
         *  result:Object {
         *  value:'path'
         * }
         *  status:true
         */
    }
    /**
     * @return {?}
     */
    closeWindow() {
        window.top['iCityBridge'].closeWebView();
    }
    /**
     *
     * @param {?} title string
     * @return {?}
     */
    setTitles(title) {
        window.top['iCityBridge'].setTitle(title);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadFile(options) {
        alert('暂不支持附件下载');
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    setOriginGoback(fn) {
        window.top['iCityBridge'].ccworkInterceptOriginGoback(!!fn, fn, (/**
         * @return {?}
         */
        () => { }));
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    pushOriginGoback(fn) {
        window['OriginGoback'] = window['OriginGoback'] || [];
        /** @type {?} */
        const OriginGoback = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const gobackFn = window['OriginGoback'].pop();
            if (gobackFn) {
                gobackFn();
            }
            else {
                window.top['iCityBridge'].ccworkInterceptOriginGoback(false, (/**
                 * @return {?}
                 */
                () => { }), (/**
                 * @return {?}
                 */
                () => { }));
                history.back();
            }
        });
        if (fn) {
            window['OriginGoback'].push(fn);
            window.top['iCityBridge'].ccworkInterceptOriginGoback(true, OriginGoback, (/**
             * @return {?}
             */
            () => { }));
        }
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    popOriginGoback(fn) {
        window['OriginGoback'].pop();
    }
    /**
     * @param {?} opt
     * @return {?}
     */
    playShortVideo(opt) {
        window.top['iCityBridge'].ccworkPlayShortVideo(opt);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/cloud-plus-service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CloudPlusService {
    /**
     * @param {?=} options
     * @return {?}
     */
    playShortVideo(options) {
        throw new Error('Method not implemented.');
    }
    // 目前拍完返回报错
    /**
     * @param {?=} options
     * @return {?}
     */
    takePhoto(options = {
        quality: 75,
        encodingType: 0,
        targetWidth: 600,
        targetHeight: 600
    }) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data['originalData']) {
                subject.next(data['originalData']);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('takePhoto', data);
                subject.next([]);
                return;
            }
        });
        window['imp'].iCamera.open(options, callback, errorCallback);
        return subject;
    }
    /**
     * @return {?}
     */
    scanQRCode() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('二维码回调');
                subject.next(data);
            }
        });
        console.log('调用二维码');
        window['imp'].iBarCode.scan(callback);
        return subject;
    }
    /**
     * @return {?}
     */
    getLocation() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                const { latitude, longitude, addr, city, country, district, province, street, streetNum } = data;
                subject.next({
                    addr,
                    city,
                    country,
                    district,
                    province,
                    street,
                    streetNum,
                    lat: latitude,
                    lng: longitude,
                });
            }
        });
        window['imp'].iGps.getInfo(callback);
        return subject;
        // iphone 打印输出信息
        /**
         * {latitude:"36.662413",longitude:"117.129769"}
         */
        // 安卓
        /**
         *  回调函数
         *  输出结构 object
         *  errormessage:""
         *  result:Object {
         *  addr:'山东省济南市历下区经十路靠近浪潮'
         *  city:"济南"
         *  country:"中国"
         *  course:-1
         *  district:"历下区"
         *  lat:36.66254123263889
         *  lng:117.12974745008681
         *  province:"山东省"
         *  street:"经十路"
         *  streetNum:"1单元"
         * }
         *  status:true
         */
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        window['imp'].iDevice.sysInfo(callback);
        return subject;
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    sendSMS(number, content) {
        window['imp'].iSms.send(number, content);
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    openSendSMS(number, content) {
        window['imp'].iSms.open(number, content);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    tel(number) {
        window['imp'].iTel.dial(number);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectPictureFromAlbum(options = { maxNum: 9, mType: 0 }) {
        /** @type {?} */
        const defaults = {
            num: 9,
            quality: 75,
            destinationType: 0,
            encodingType: 1,
            targetWidth: 600,
            targetHeight: 600
        };
        defaults.num = options.maxNum;
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => {
                    return item.originalData;
                })));
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('selectPictureFromAlbum', data);
                subject.next([]);
            }
        });
        window['imp'].iCamera.select(Object.assign({}, defaults, options), callback, errorCallback);
        return subject;
    }
    /**
     * @private
     * @param {?=} options
     * @return {?}
     */
    selectFileFromMobile(options = { maximum: 6, fileType: '.jpg|.png' }) {
    }
    /**
     * @private
     * @param {?} path
     * @return {?}
     */
    getBase64(path) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('getBase64', data);
                subject.next([]);
            }
        });
        window['imp'].iFile.getBase64(path, callback, errorCallback);
        return subject;
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectFile(options = { maximum: 6 }) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data && data.length > 0) {
                /** @type {?} */
                const paths = [];
                /** @type {?} */
                let count = 0;
                data.forEach((/**
                 * @param {?} dataItem
                 * @return {?}
                 */
                dataItem => {
                    window['imp'].iFile.getBase64(dataItem.path, (/**
                     * @param {?} bs64
                     * @return {?}
                     */
                    function (bs64) {
                        paths.push({
                            name: data[count].name,
                            size: data[count].size,
                            base64: bs64
                        });
                        count++;
                        if (data.length === paths.length) {
                            // 防止触发多次next  一次性把所有数据抛出去
                            subject.next(paths);
                        }
                    }), (/**
                     * @param {?} errorMsg
                     * @return {?}
                     */
                    function (errorMsg) {
                        if (errorMsg) {
                            console.log('getBase64', errorMsg);
                            subject.next([]);
                        }
                    }));
                }));
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('selectFile', data);
                subject.next([]);
            }
        });
        window['imp'].iFile.select(Object.assign({}, options), callback, errorCallback);
        return subject;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    takeVideo(options) {
        /** @type {?} */
        let option = { id: options.id };
        if (options.quality) {
            if (options.quality <= 0.5) {
                option['fps'] = 30;
            }
            else if (options.quality <= 1) {
                option['fps'] = 60;
            }
        }
        else {
            option['fps'] = 30;
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                subject.next(data);
            }
        });
        /** @type {?} */
        const errorCallback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data) {
                console.log('takeVideo', data);
                subject.next([]);
            }
        });
        window['imp'].iVideo.record(option, callback, errorCallback);
        return subject;
    }
    /**
     * @return {?}
     */
    closeWindow() {
        window['imp'].iWindow.close();
    }
    /**
     * @param {?} title
     * @return {?}
     */
    setTitles(title) {
        document.title = title;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadFile(options) {
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        const callback = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            if (data.status !== 1) {
                console.log(data);
            }
            subject.next(true);
        });
        window['imp'].iFile.download(options, callback);
        return subject;
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    setOriginGoback(fn) {
        /** @type {?} */
        const isAGreaterThanB = (/**
         * @param {?} parameA
         * @param {?} parameB
         * @return {?}
         */
        (parameA, parameB) => {
            /** @type {?} */
            const length = parameA.length > parameB.length ? parameB.length : parameA.length;
            for (let i = 0; i < length; i++) {
                if (parseInt(parameB[i]) > parseInt(parameA[i])) {
                    return false;
                }
            }
            return true;
        });
        /** @type {?} */
        const setFunction = (/**
         * @return {?}
         */
        () => {
            if (fn) {
                window['imp'].iWindow.onBackKeyDown2(fn);
                isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.onTitleBackKeyDown2(fn);
            }
            else {
                window['imp'].iWindow.cancelBackKeyDown();
                isAGreaterThanB(currentVersion.split('.'), minVersion.split('.')) && window['imp'].iWindow.cancelTitleBackKeyDown();
            }
        });
        /** @type {?} */
        let minVersion = '4.8.21';
        /** @type {?} */
        let currentVersion = window['CURRENT_VERSION'];
        if (currentVersion) {
            setFunction();
        }
        else {
            window['imp'].iDevice.sysInfo((/**
             * @param {?} info
             * @return {?}
             */
            (info) => {
                /** @type {?} */
                const newVersion = info.appVersion.split('-');
                window['CURRENT_VERSION'] = newVersion[0];
                currentVersion = window['CURRENT_VERSION'];
                setFunction();
            }));
        }
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    pushOriginGoback(fn) {
        window['OriginGoback'] = window['OriginGoback'] || [];
        /** @type {?} */
        const OriginGoback = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const gobackFn = window['OriginGoback'].pop();
            if (gobackFn) {
                gobackFn();
            }
            else {
                window['imp'].iWindow.cancelBackKeyDown();
                window['imp'].iWindow.cancelTitleBackKeyDown();
                history.back();
            }
        });
        if (fn) {
            window['OriginGoback'].push(fn);
            window['imp'].iWindow.onBackKeyDown2(OriginGoback);
            window['imp'].iWindow.onTitleBackKeyDown2(OriginGoback);
        }
    }
    /**
     * @return {?}
     */
    popOriginGoback() {
        window['OriginGoback'].pop();
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/js-bridge-strategy-factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JsBridgeStrategyFactory {
    /**
     * @return {?}
     */
    create() {
        if (navigator.userAgent.toLowerCase().search('ccwork') !== -1) {
            window.top['FARRIS_JSBridge'] = '云上协同';
            return new CCworkService();
        }
        else if (navigator.userAgent.toLowerCase().search('emmcloud') !== -1) {
            window.top['FARRIS_JSBridge'] = '云加';
            return new CloudPlusService();
        }
        else {
            window.top['FARRIS_JSBridge'] = '浏览器';
            return new CloudPlusService();
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/js-bridge-stratege.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class JsBridgeService {
    constructor() {
        this.jsBridgeStrategyFactory = new JsBridgeStrategyFactory();
        this.init();
    }
    /**
     * @return {?}
     */
    getSysInfo() {
        return this.getJsBridgeService(this.strategy.getSysInfo);
    }
    /**
     * @private
     * @return {?}
     */
    init() {
        this.strategy = this.jsBridgeStrategyFactory.create();
        window['JsBridgeService'] = this;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    takePhoto(options) {
        return this.getJsBridgeService(this.strategy.takePhoto, options);
    }
    /**
     * @return {?}
     */
    scanQRCode() {
        return this.getJsBridgeService(this.strategy.scanQRCode);
    }
    /**
     * @return {?}
     */
    getLocation() {
        return this.getJsBridgeService(this.strategy.getLocation);
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    sendSMS(number, content) {
        return this.getJsBridgeService(this.strategy.sendSMS, number, content);
    }
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    openSendSMS(number, content) {
        return this.getJsBridgeService(this.strategy.openSendSMS, number, content);
    }
    /**
     * @param {?} number
     * @return {?}
     */
    tel(number) {
        return this.getJsBridgeService(this.strategy.tel, number);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    selectPictureFromAlbum(options) {
        return this.getJsBridgeService(this.strategy.selectPictureFromAlbum, options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    takeVideo(options) {
        return this.getJsBridgeService(this.strategy.takeVideo, options);
    }
    /**
     * @return {?}
     */
    closeWindow() {
        return this.getJsBridgeService(this.strategy.closeWindow);
    }
    /**
     * @param {?} title
     * @return {?}
     */
    setTitles(title) {
        return this.getJsBridgeService(this.strategy.setTitles, title);
    }
    /**
     * @param {?=} options
     * @return {?}
     */
    selectFile(options) {
        return this.getJsBridgeService(this.strategy.selectFile, options);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    downloadFile(options) {
        return this.getJsBridgeService(this.strategy.downloadFile, options);
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    setOriginGoback(fn) {
        return this.getJsBridgeService(this.strategy.setOriginGoback, fn);
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    pushOriginGoback(fn) {
        return this.getJsBridgeService(this.strategy.pushOriginGoback, fn);
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    popOriginGoback(fn) {
        return this.getJsBridgeService(this.strategy.popOriginGoback, fn);
    }
    /**
     * @param {?=} fn
     * @return {?}
     */
    playShortVideo(fn) {
        return this.getJsBridgeService(this.strategy.playShortVideo, fn);
    }
    /**
     * @private
     * @param {?} method
     * @param {...?} values
     * @return {?}
     */
    getJsBridgeService(method, ...values) {
        /** @type {?} */
        const subject = new Subject();
        // 已经存在方法实例即结束返回
        if (window.top['FARRIS_JSBridge'] === '已加载') {
            return method(...values);
        }
        // 判断是否为云上协同环境
        if (window.top['FARRIS_JSBridge'] === '云上协同') {
            if (window.top['iCityBridge']) {
                return method(...values);
            }
            else {
                /** @type {?} */
                var ccwork = window.top.document.createElement("script");
                ccwork.src = 'https://ccwork.oss.cn-north-3.inspurcloudoss.com/h5/ccworkJsbridge.js';
                ccwork.onload = (/**
                 * @return {?}
                 */
                function () {
                    window.top['iCityBridge'].init((/**
                     * @return {?}
                     */
                    () => {
                        method(...values).subscribe((/**
                         * @param {?} e
                         * @return {?}
                         */
                        (e) => { subject.next(e); }));
                    }));
                });
                window.top.document.head.appendChild(ccwork);
            }
        }
        // 当前没有针对云+的判断，前置环境不满足即默认云+环境
        if (window.top['FARRIS_JSBridge'] === '云加') {
            System
                .import('/platform/common/web/imp.js')
                .then((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                window.top['FARRIS_JSBridge'] = '已加载';
                method(...values).subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => { subject.next(e); }));
            }));
        }
        return subject;
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    JsBridgeService.prototype.strategy;
    /**
     * @type {?}
     * @private
     */
    JsBridgeService.prototype.jsBridgeStrategyFactory;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/decorators.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function IJsBridgeStrategy() { }
if (false) {
    /**
     * @param {?} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.takePhoto = function (options) { };
    /**
     * @return {?}
     */
    IJsBridgeStrategy.prototype.scanQRCode = function () { };
    /**
     * @return {?}
     */
    IJsBridgeStrategy.prototype.getLocation = function () { };
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    IJsBridgeStrategy.prototype.sendSMS = function (number, content) { };
    /**
     * @param {?} number
     * @param {?} content
     * @return {?}
     */
    IJsBridgeStrategy.prototype.openSendSMS = function (number, content) { };
    /**
     * @param {?} number
     * @return {?}
     */
    IJsBridgeStrategy.prototype.tel = function (number) { };
    /**
     * @param {?} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.selectPictureFromAlbum = function (options) { };
    /**
     * @param {?} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.takeVideo = function (options) { };
    /**
     * @return {?}
     */
    IJsBridgeStrategy.prototype.closeWindow = function () { };
    /**
     * @param {?} title
     * @return {?}
     */
    IJsBridgeStrategy.prototype.setTitles = function (title) { };
    /**
     * @param {?=} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.selectFile = function (options) { };
    /**
     * @param {?} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.downloadFile = function (options) { };
    /**
     * @return {?}
     */
    IJsBridgeStrategy.prototype.getSysInfo = function () { };
    /**
     * @param {?=} fn
     * @return {?}
     */
    IJsBridgeStrategy.prototype.setOriginGoback = function (fn) { };
    /**
     * @param {?=} fn
     * @return {?}
     */
    IJsBridgeStrategy.prototype.pushOriginGoback = function (fn) { };
    /**
     * @param {?=} fn
     * @return {?}
     */
    IJsBridgeStrategy.prototype.popOriginGoback = function (fn) { };
    /**
     * @param {?=} options
     * @return {?}
     */
    IJsBridgeStrategy.prototype.playShortVideo = function (options) { };
}
/**
 * @record
 */
function PhotoOptions() { }
if (false) {
    /** @type {?} */
    PhotoOptions.prototype.quality;
    /** @type {?|undefined} */
    PhotoOptions.prototype.encodingType;
    /** @type {?|undefined} */
    PhotoOptions.prototype.targetWidth;
    /** @type {?|undefined} */
    PhotoOptions.prototype.targetHeight;
    /** @type {?|undefined} */
    PhotoOptions.prototype.waterMark;
}
/**
 * @record
 */
function WaterMark() { }
if (false) {
    /** @type {?} */
    WaterMark.prototype.content;
    /** @type {?} */
    WaterMark.prototype.color;
    /** @type {?} */
    WaterMark.prototype.background;
    /** @type {?} */
    WaterMark.prototype.algin;
    /** @type {?} */
    WaterMark.prototype.valign;
}
/**
 * @record
 */
function PictureOptions() { }
if (false) {
    /** @type {?} */
    PictureOptions.prototype.maxNum;
    /** @type {?} */
    PictureOptions.prototype.mType;
    /** @type {?|undefined} */
    PictureOptions.prototype.quality;
}
/**
 * @record
 */
function VidepOptions() { }
if (false) {
    /** @type {?} */
    VidepOptions.prototype.id;
    /** @type {?|undefined} */
    VidepOptions.prototype.quality;
}
/**
 * @record
 */
function LocationInfo() { }
if (false) {
    /** @type {?} */
    LocationInfo.prototype.addr;
    /** @type {?} */
    LocationInfo.prototype.city;
    /** @type {?} */
    LocationInfo.prototype.country;
    /** @type {?|undefined} */
    LocationInfo.prototype.course;
    /** @type {?} */
    LocationInfo.prototype.district;
    /** @type {?} */
    LocationInfo.prototype.lat;
    /** @type {?} */
    LocationInfo.prototype.lng;
    /** @type {?} */
    LocationInfo.prototype.province;
    /** @type {?} */
    LocationInfo.prototype.street;
    /** @type {?} */
    LocationInfo.prototype.streetNum;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/js-bridge-service/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/history-back.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 帮助映射服务
 */
class HistoryBackService {
    constructor() {
    }
    /**
     * @return {?}
     */
    init() {
        window['MOBILE_ORIGIN_BACK_ARRAY'] = window['MOBILE_ORIGIN_BACK_ARRAY'] || [];
        window['MOBILE_ORIGIN_BACK'] = {
            /**
             * @param {?} fn
             * @return {?}
             */
            pushOriginGoback(fn) {
                window['MOBILE_ORIGIN_BACK_ARRAY'].push(fn);
            },
            /**
             * @return {?}
             */
            popOriginGoback() {
                window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
            },
            /**
             * @return {?}
             */
            reflushOriginGoback() {
                window['MOBILE_ORIGIN_BACK_ARRAY'] = [];
            }
        };
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    pushOriginGoback(fn) {
        window['MOBILE_ORIGIN_BACK_ARRAY'].push(fn);
    }
    /**
     * @return {?}
     */
    popOriginGoback() {
        window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
    }
    /**
     * @return {?}
     */
    reflushOriginGoback() {
        window['MOBILE_ORIGIN_BACK_ARRAY'] = [];
    }
    /**
     * @return {?}
     */
    proxyBack() {
        if (!(navigator.userAgent.toLowerCase().search('emmcloud') !== -1)) {
            return;
        }
        if (window.top.location.pathname.indexOf('mobiletaskcenter') > -1) {
            setTimeout((/**
             * @return {?}
             */
            () => {
                window.top['detailBackBtnClickHandler'] = (/**
                 * @param {?} back
                 * @return {?}
                 */
                (back) => {
                    /** @type {?} */
                    const gobackFn = window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                    if (gobackFn) {
                        gobackFn();
                        return false;
                    }
                    else {
                        /** @type {?} */
                        const key = location.pathname + location.hash.slice(0, location.hash.indexOf('?'));
                        /** @type {?} */
                        let need_go_back = sessionStorage.getItem(key);
                        if (!need_go_back) {
                            return true;
                        }
                        history.back();
                        return false;
                    }
                });
            }), 0);
        }
        else {
            /** @type {?} */
            const _close = (/**
             * @return {?}
             */
            () => {
                /** @type {?} */
                const gobackFn = window['MOBILE_ORIGIN_BACK_ARRAY'].pop();
                if (gobackFn) {
                    gobackFn();
                }
                else {
                    history.back();
                }
            });
            /** @type {?} */
            const jsBridgeService = new JsBridgeService();
            jsBridgeService.setOriginGoback(_close);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/command.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const NOOP = 'noop';
/**
 * 命令服务
 */
class CommandService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 执行命令
     * @param {?} commandName 命令名称
     * @param {?=} viewModelId 视图模型id
     * @return {?}
     */
    execute(commandName, viewModelId) {
        if (!commandName || commandName === '' || commandName === 'undefined') {
            return EMPTY;
        }
        // 空操作
        if (commandName.toLocaleLowerCase() === NOOP) {
            return EMPTY;
        }
        /** @type {?} */
        let viewModel = this.viewModelContext.viewModel;
        if (viewModelId) {
            /** @type {?} */
            const appContext = this.viewModelContext.appContext;
            /** @type {?} */
            const targetViewModelContext = appContext.viewModelContextManager.getContextById(viewModelId);
            viewModel = targetViewModelContext.viewModel;
        }
        return viewModel[commandName]();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    CommandService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/state-machine.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 状态机服务
 */
class StateMachineService {
    /**
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 执行状态迁移动作
     * @param {?} action
     * @return {?}
     */
    executeAction(action) {
        if (!action) {
            return EMPTY;
        }
        if (typeof this.viewModelContext.stateMachine[action] !== 'function') {
            return EMPTY;
        }
        this.viewModelContext.stateMachine[action]();
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    StateMachineService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ui-state.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * UI状态机服务
 */
class UIStateService {
    /**
     * 构造函数
     */
    constructor() {
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/vo-variable.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * VO变量访问服务
 */
class VoVariableService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 设置变量值
     * @param {?} name
     * @param {?} value
     * @return {?}
     */
    setValue(name, value) {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (this.viewModelContext.repository));
        befRepository.variableManager.setValue(name, value);
    }
    /**
     * 获取变量值
     * @param {?} name
     * @return {?}
     */
    getValue(name) {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (this.viewModelContext.repository));
        befRepository.variableManager.getValue(name);
    }
}
if (false) {
    /**
     * 视图对象上下文
     * @type {?}
     * @private
     */
    VoVariableService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 上传控件的返回结果（该结构应该放在UI层，临时放在这里）
 * @record
 */
function UploadFileInfo() { }
if (false) {
    /** @type {?} */
    UploadFileInfo.prototype.metadataId;
    /** @type {?} */
    UploadFileInfo.prototype.fileName;
}
/**
 * 附件信息定义
 * @record
 */
function AttachmentInfo() { }
if (false) {
    /**
     * 附件id
     * @type {?}
     */
    AttachmentInfo.prototype.attachmentId;
    /**
     * 附件名称
     * @type {?}
     */
    AttachmentInfo.prototype.fileName;
}
/**
 * 服务器端所需的附件信息定义
 * @record
 */
function ServerAttachmentInfo() { }
if (false) {
    /**
     * 表名路径
     * @type {?}
     */
    ServerAttachmentInfo.prototype.NodeCodes;
    /**
     * 主键路径
     * @type {?}
     */
    ServerAttachmentInfo.prototype.HiretryIds;
    /**
     * 附件id数组（批量新增时使用）
     * @type {?|undefined}
     */
    ServerAttachmentInfo.prototype.AttachmentIds;
    /**
     * 附件id（更新时使用）
     * @type {?|undefined}
     */
    ServerAttachmentInfo.prototype.AttachmentId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件信息处理工具类
 */
class AttachmentUtil {
    /**
     * 转换为附件信息数组
     * @param {?} fileInfos
     * @return {?}
     */
    static convertToAttachmentInfos(fileInfos) {
        if (!fileInfos) {
            return [];
        }
        /** @type {?} */
        const attachmentInfos = fileInfos.map((/**
         * @param {?} fileInfo
         * @return {?}
         */
        (fileInfo) => {
            return this.convertToAttachmentInfo(fileInfo);
        }));
        return attachmentInfos;
    }
    /**
     * 转换为附件信息
     * @param {?} fileInfo
     * @return {?}
     */
    static convertToAttachmentInfo(fileInfo) {
        /** @type {?} */
        const attachmentInfo = {
            attachmentId: fileInfo.metadataId,
            fileName: fileInfo.fileName
        };
        return attachmentInfo;
    }
    /**
     * 获取附件列表中的第一个附件
     * @param {?} attachmentInfos
     * @return {?}
     */
    static getFirstAttachmentInfo(attachmentInfos) {
        if (!attachmentInfos || attachmentInfos.length === 0) {
            return;
        }
        /** @type {?} */
        const firstAttachmentInfo = attachmentInfos[0];
        return firstAttachmentInfo;
    }
    /**
     * 提取附件id数组
     * @param {?} attachmentInfos
     * @return {?}
     */
    static peekAttachmentIds(attachmentInfos) {
        if (!attachmentInfos) {
            attachmentInfos = [];
        }
        /** @type {?} */
        const attachmentIds = attachmentInfos.map((/**
         * @param {?} attachmentInfo
         * @return {?}
         */
        (attachmentInfo) => {
            return attachmentInfo.attachmentId;
        }));
        return attachmentIds;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件数据服务
 */
class AttachmentDataService {
    /**
     * 实体仓库
     * @private
     * @return {?}
     */
    get befRepository() {
        return (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 绑定数据
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 更新附件信息
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    updateRow(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const updateUrl = `${apiProxy.baseUrl}/service/updateattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        /** @type {?} */
        const body = {
            updateAttachInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return this.syncAttachmentInfosToClient();
        })), tap((/**
         * @return {?}
         */
        () => {
            console.log('loading hide ...');
        })));
    }
    /**
     * 批量创建附件行数据
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfos
     * @return {?}
     */
    updateRows(attachmentInfoFieldPath, attachmentInfos) {
        /** @type {?} */
        const apiProxy = this.befRepository.apiProxy;
        /** @type {?} */
        const updateUrl = `${apiProxy.baseUrl}/service/batchuploadattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        /** @type {?} */
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        /** @type {?} */
        const body = {
            batchUploadInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        console.log('loading show ...');
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig).pipe(switchMap((/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            return this.appendAttachmentInfosToClient(result, isRootEntity);
        })), tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
    }
    /**
     * 创建服务器端需要的更新信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentId = attachmentInfo.attachmentId;
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    }
    /**
     * 创建服务器端需要的批量新增附件信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentIds = AttachmentUtil.peekAttachmentIds(attachmentInfo);
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    }
    /**
     * 同步服务器端最新信息到客户端
     * \@todo:
     * 1、主对象批量新增时不支持
     * @return {?}
     */
    syncAttachmentInfosToClient() {
        /** @type {?} */
        const rootDataId = this.bindingData.list.currentId;
        return this.befRepository.updateEntityById(rootDataId);
    }
    /**
     * 追击主表数据到客户端
     * @param {?} listData
     * @param {?} isRootEntity
     * @return {?}
     */
    appendAttachmentInfosToClient(listData, isRootEntity) {
        if (isRootEntity === true) {
            /** @type {?} */
            const entities = this.befRepository.buildEntities(listData);
            this.befRepository.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            return this.syncAttachmentInfosToClient().pipe(map((/**
             * @return {?}
             */
            () => {
                this.befRepository.dataChangeHistory.addChange({ dataId: listData[0].id, changeType: DataChangeType.Add });
                return listData;
            })));
        }
    }
}
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     * @private
     */
    AttachmentDataService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件服务
 */
class AttachmentService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     * @param {?} entityService
     * @param {?} removeDataService
     * @param {?} attachDataService
     */
    constructor(viewModelContext, entityService, removeDataService, attachDataService) {
        /**
         * 默认根目录
         */
        this.defaultRootDirId = 'default-root';
        this.viewModelContext = viewModelContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.removeDataService = removeDataService;
    }
    /**
     * 默认子目录
     * @private
     * @return {?}
     */
    get defaultParentDirName() {
        return this.viewModelContext.bindingData.list.currentId;
    }
    /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        const firstAttachmentInfo = AttachmentUtil.getFirstAttachmentInfo(attachmentInfos);
        /** @type {?} */
        const result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
        return result$;
    }
    /**
     * 上传多个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    uploadAndBatchAddRows(attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        const result$ = this.attachDataService.updateRows(attachmentInfoFieldPath, attachmentInfos).pipe(tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
        return result$;
    }
    /**
     * 批量删除附件所在的行
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    removeAttachmentRows(attachmentInfoFieldPath) {
        if (!attachmentInfoFieldPath) {
            return EMPTY;
        }
        /** @type {?} */
        const dataIds = this.getDataIdsToRemove(attachmentInfoFieldPath);
        //如果是主表
        if (attachmentInfoFieldPath.split('/').length <= 2) {
            return this.removeDataService.removeByIds(dataIds);
        }
        // 如果是子表
        else {
            /** @type {?} */
            const removeObservables = [];
            if (dataIds.length === 0) {
                alert('请选择要删除的文件');
            }
            /** @type {?} */
            const bindingListPath = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            (dataId) => {
                /** @type {?} */
                const removeObservable = this.removeDataService.removeByPathAndId(bindingListPath, dataId);
                removeObservables.push(removeObservable);
            }));
            return forkJoin(removeObservables);
        }
    }
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    getUploadFileInfosFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        const uploadFileInfos = (/** @type {?} */ (commandContext.eventParams));
        if (!uploadFileInfos) {
            return [];
        }
        return uploadFileInfos;
    }
    /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getDataIdsToRemove(attachmentInfoFieldPath) {
        /** @type {?} */
        const attachIds = this.getAttachmentIdsToRemoveFromContext();
        /** @type {?} */
        const dataIds = [];
        attachIds.forEach((/**
         * @param {?} attachId
         * @return {?}
         */
        (attachId) => {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            /** @type {?} */
            const dataId = this.convertAttachmentIdToDataId(attachId, attachmentInfoFieldPath);
            dataIds.push(dataId);
        }));
        return dataIds;
    }
    /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    getAttachmentIdsToRemoveFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        return (/** @type {?} */ (commandContext.eventParams));
    }
    /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    convertAttachmentIdToDataId(fileId, attachmentInfoFieldPath) {
        // 解析路径
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        /** @type {?} */
        const attachFieldName = attachInfoBindingPath.pop();
        /** @type {?} */
        const attachListBindingPath = attachInfoBindingPath;
        // 获取附件id数组
        /** @type {?} */
        const entityListData = this.entityService.getEntityListData(attachListBindingPath);
        /** @type {?} */
        const targetEntityData = entityListData.find((/**
         * @param {?} entityData
         * @return {?}
         */
        (entityData) => {
            if (entityData[attachFieldName]) {
                /** @type {?} */
                const attachmentId = entityData[attachFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        }));
        return targetEntityData.id;
    }
    /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getBindingListPathWithAttachments(attachmentInfoFieldPath) {
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        attachInfoBindingPath.pop();
        /** @type {?} */
        const bindingListPath = attachInfoBindingPath;
        return '/' + bindingListPath.join('/');
    }
}
if (false) {
    /**
     * 默认根目录
     * @type {?}
     * @private
     */
    AttachmentService.prototype.defaultRootDirId;
    /**
     * 视图模型
     * @type {?}
     * @private
     */
    AttachmentService.prototype.viewModelContext;
    /**
     * 附件数据服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.attachDataService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.entityService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    AttachmentService.prototype.removeDataService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/attachment-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ccwork-service/ccwork.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CcWorkService {
    // public location$ = new Subject();
    constructor() {
    }
    /**
     * 云上协同关闭页面
     * @return {?}
     */
    closeCcWorkWebView() {
        window['iCityBridge'].closeWebView();
    }
    /**
     * 云上协同隐藏标题栏
     * @return {?}
     */
    hideCcWorkNaviBar() {
        window['iCityBridge'].hideTitleBar();
    }
    /**
     *  云上协同更改标题栏
     * @param {?} title
     * @return {?}
     */
    setTitle(title) {
        window['iCityBridge'].setTitle(title);
    }
    /**
     * 获取当前位置
     * @param {?} callBack
     * @return {?}
     */
    getLocation(callBack) {
        if (window['iCityBridge']) {
            window['iCityBridge'].ccworkGetLocation(callBack);
        }
    }
    /**
     * 获取二维码
     * @param {?} callBack
     * @param {?=} params 配置项
     * @return {?}
     */
    scanCode(callBack, params = {}) {
        if (window['iCityBridge']) {
            /** @type {?} */
            const paramsObj = Object.assign({ filters: [
                    'QR', 'EAN13', 'EAN8'
                ], path: '' }, params);
            window['iCityBridge'].ccworkScanCode(paramsObj, callBack);
        }
    }
    /**
     * 云上协同调用拨号
     * @param {?} phoneNumber 手机号
     * @param {?} callback
     * @return {?}
     */
    callPhone(phoneNumber, callback) {
        if (window['iCityBridge']) {
            /** @type {?} */
            const params = {
                number: phoneNumber
            };
            window['iCityBridge'].ccworkCallPhone(params, callback);
        }
    }
    /**
     * 从相机和相册中获取照片
     * @param {?} params
     * @param {?} callback
     * @return {?}
     */
    getPicsFromCameraAndAlbum(params, callback) {
        if (window['iCityBridge']) {
            window['iCityBridge'].ccworkGetPicsFromCameraAndAlbum(params, callback);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/ccwork-service/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map-services/map.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class MapService {
    constructor() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    getStaticMap(options) {
        if (!options) {
            return;
        }
        // location是必填的
        if (!options.location) {
            return;
        }
        if (!options.key) {
            // 默认key
            options.key = 'e01c849062d312e0cbeb2beb1f28ef71';
        }
        if (!options.zoom) {
            options.zoom = 10;
        }
        if (!options.size) {
            options.size = {
                width: 400,
                height: 400
            };
        }
        /** @type {?} */
        const markers = options.markers;
        /** @type {?} */
        let markersStr = '';
        if (markers && markers.length) {
            // 地图标记
            markersStr = markers.reduce((/**
             * @param {?} total
             * @param {?} next
             * @param {?} index
             * @return {?}
             */
            (total, next, index) => {
                total += (next.longtitude + ',' + next.latitude + ';');
                return total;
            }), '');
            if (!options.markerSize) {
                options.markerSize = 'mid';
            }
            if (!options.markerColor) {
                /* 默认红色 */
                options.markerColor = '';
            }
            if (markersStr) {
                markersStr = `&markers=${options.markerSize},${options.markerColor},A:${markersStr.substring(0, markersStr.length - 1)}`;
            }
        }
        /** @type {?} */
        let longitude = options.location.longtitude;
        /** @type {?} */
        let latitude = options.location.latitude;
        // 处理location的小数点后几位  最长保留6位
        /** @type {?} */
        const longitudeStr = longitude.toString();
        /** @type {?} */
        const latitudeStr = latitude.toString();
        if (longitudeStr.substring(longitudeStr.indexOf('.') + 1).length > 6) {
            longitude = longitude.toFixed(6);
        }
        if (latitudeStr.substring(latitudeStr.indexOf('.') + 1).length > 6) {
            latitude = latitude.toFixed(6);
        }
        return 'https://restapi.amap.com/v3/staticmap' +
            '?location=' + longitude + ',' + latitude +
            '&zoom=' + options.zoom +
            '&size=' + options.size.width + '*' + options.size.height +
            markersStr +
            '&key=' + options.key;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/map-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/types.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 上传控件的返回结果（该结构应该放在UI层，临时放在这里）
 * @record
 */
function BusinessUploadFileInfo() { }
if (false) {
    /** @type {?} */
    BusinessUploadFileInfo.prototype.metadataId;
    /** @type {?} */
    BusinessUploadFileInfo.prototype.fileName;
}
/**
 * 附件信息定义
 * @record
 */
function BusinessAttachmentInfo() { }
if (false) {
    /**
     * 附件id
     * @type {?}
     */
    BusinessAttachmentInfo.prototype.attachmentId;
    /**
     * 附件名称
     * @type {?}
     */
    BusinessAttachmentInfo.prototype.fileName;
}
/**
 * 服务器端所需的附件信息定义
 * @record
 */
function BusinessServerAttachmentInfo() { }
if (false) {
    /**
     * 表名路径
     * @type {?}
     */
    BusinessServerAttachmentInfo.prototype.NodeCodes;
    /**
     * 主键路径
     * @type {?}
     */
    BusinessServerAttachmentInfo.prototype.HiretryIds;
    /**
     * 附件id数组（批量新增时使用）
     * @type {?|undefined}
     */
    BusinessServerAttachmentInfo.prototype.AttachmentIds;
    /**
     * 附件id（更新时使用）
     * @type {?|undefined}
     */
    BusinessServerAttachmentInfo.prototype.AttachmentId;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/business-attachment.util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件信息处理工具类
 */
class AttachmentUtil$1 {
    /**
     * 转换为附件信息数组
     * @param {?} fileInfos
     * @return {?}
     */
    static convertToAttachmentInfos(fileInfos) {
        if (!fileInfos) {
            return [];
        }
        /** @type {?} */
        const attachmentInfos = fileInfos.map((/**
         * @param {?} fileInfo
         * @return {?}
         */
        (fileInfo) => {
            return this.convertToAttachmentInfo(fileInfo);
        }));
        return attachmentInfos;
    }
    /**
     * 转换为附件信息
     * @param {?} fileInfo
     * @return {?}
     */
    static convertToAttachmentInfo(fileInfo) {
        /** @type {?} */
        const attachmentInfo = {
            attachmentId: fileInfo.metadataId,
            fileName: fileInfo.fileName
        };
        return attachmentInfo;
    }
    /**
     * 获取附件列表中的第一个附件
     * @param {?} attachmentInfos
     * @return {?}
     */
    static getFirstAttachmentInfo(attachmentInfos) {
        if (!attachmentInfos || attachmentInfos.length === 0) {
            return;
        }
        /** @type {?} */
        const firstBusinessAttachmentInfo = attachmentInfos[0];
        return firstBusinessAttachmentInfo;
    }
    /**
     * 提取附件id数组
     * @param {?} attachmentInfos
     * @return {?}
     */
    static peekAttachmentIds(attachmentInfos) {
        if (!attachmentInfos) {
            attachmentInfos = [];
        }
        /** @type {?} */
        const attachmentIds = attachmentInfos.map((/**
         * @param {?} attachmentInfo
         * @return {?}
         */
        (attachmentInfo) => {
            return attachmentInfo.attachmentId;
        }));
        return attachmentIds;
    }
    /**
     * 批量获取变更
     * @param {?} oldListData
     * @param {?} newListData
     * @return {?}
     */
    static getChangeDetails(oldListData, newListData) {
        /** @type {?} */
        const changeDetails = [];
        newListData.forEach((/**
         * @param {?} newData
         * @return {?}
         */
        (newData) => {
            /** @type {?} */
            let oldData = oldListData.find((/**
             * @param {?} oldData
             * @return {?}
             */
            (oldData) => {
                return oldData['id'] === newData['id'];
            }));
            if (!oldData) {
                oldData = {};
            }
            /** @type {?} */
            const changeDetail = this.getChangeDetail(oldData, newData);
            if (changeDetail) {
                changeDetails.push(changeDetail);
            }
        }));
        return changeDetails;
    }
    /**
     * 获取变更集
     * @param {?} oldData
     * @param {?} newData
     * @return {?}
     */
    static getChangeDetail(oldData, newData) {
        /** @type {?} */
        const changeDetail = {
            ChangeType: ChangeDetailType.Modify,
            ChangeInfo: {
                DataId: newData['id']
            }
        };
        /** @type {?} */
        let isChanged = false;
        Object.keys(newData).forEach((/**
         * @param {?} propName
         * @return {?}
         */
        (propName) => {
            // 移除不必要的属性的比较
            if (propName === 'id' || propName === 'nodeCode' || propName === 'childs') {
                return;
            }
            /** @type {?} */
            const oldValue = oldData[propName];
            /** @type {?} */
            const newValue = newData[propName];
            if (oldValue === undefined && typeof newValue === 'object') {
                return;
            }
            if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
                changeDetail.ChangeInfo[propName] = newValue;
                isChanged = true;
            }
        }));
        return isChanged ? changeDetail : null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/business-attachment-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件数据服务
 */
class BusinessAttachmentDataService {
    /**
     * 实体仓库
     * @return {?}
     */
    get befReposi() {
        return (/** @type {?} */ (this.viewModelContext.repository));
    }
    /**
     * 绑定数据
     * @private
     * @return {?}
     */
    get bindingData() {
        return this.viewModelContext.bindingData;
    }
    /**
     * 构造函数
     * @param {?} viewModelContext
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * @return {?}
     */
    getAllBeSessions() {
        /** @type {?} */
        const beSessionsJson = window.sessionStorage.getItem("BE_SESSION_ID");
        if (!beSessionsJson) {
            return {};
        }
        /** @type {?} */
        const frmSessionId = this.getUserSessionId();
        /** @type {?} */
        const beSessions = JSON.parse(beSessionsJson);
        /** @type {?} */
        const beSessionKey = `${frmSessionId}_/api/gsp/common/v1.0/testForm_mfrm`;
        return beSessions[beSessionKey];
    }
    /**
     * 获取用户SessionId
     * @return {?}
     */
    getUserSessionId() {
        /** @type {?} */
        const userSessionId = window.localStorage.getItem("sessionId");
        return userSessionId;
    }
    /**
     * 扩展BeSessionId相关头信息
     * @param {?} headers
     * @return {?}
     */
    handleRequestHeaders(headers) {
        /** @type {?} */
        const frmSessionId = this.getUserSessionId();
        /** @type {?} */
        const beSessionId = this.getAllBeSessions();
        if (frmSessionId) {
            headers = HttpUtil$1.appendHeader(headers, "X-CAF-Runtime-CommonVariable", frmSessionId);
        }
        if (beSessionId) {
            headers = HttpUtil$1.appendHeader(headers, "X-CAF-Runtime-Context", beSessionId);
            headers = HttpUtil$1.appendHeader(headers, "SessionId", beSessionId);
        }
        headers = HttpUtil$1.appendHeader(headers, 'Content-Type', 'application/json');
        return headers;
    }
    /**
     * @param {?} url
     * @return {?}
     */
    extendQueryData(url) {
        /** @type {?} */
        const entityFilter = {
            FilterConditions: [],
            SortConditions: [],
            IsUsePagination: false,
            Pagination: {
                PageIndex: 1,
                PageSize: 5,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        const entityFilterString = JSON.stringify(entityFilter);
        /** @type {?} */
        const params = {
            entityFilter: entityFilterString
        };
        // const url = `/api/gsp/common/v1.0/attachmentform_mfrm/extension/query`;
        // 拓展header
        // const headers = this.handleRequestHeaders({});
        // 拓展body
        /** @type {?} */
        const requestConfig = { params };
        return this.befReposi.apiProxy.request(HttpMethods.PUT, url, requestConfig);
    }
    /**
     * 更新附件信息
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    updateRow(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const apiProxy = this.befReposi.apiProxy;
        /** @type {?} */
        const updateUrl = `${apiProxy.baseUrl}/service/updateattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo);
        /** @type {?} */
        const body = {
            updateAttachInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig);
    }
    /**
     * 批量创建附件行数据
     * @param {?} updateUrl
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfos
     * @return {?}
     */
    updateRows(updateUrl, attachmentInfoFieldPath, attachmentInfos) {
        /** @type {?} */
        const apiProxy = this.befReposi.apiProxy;
        // const updateUrl = `${apiProxy.baseUrl}/service/batchuploadattachment`;
        /** @type {?} */
        const serverAttachInfo = this.createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfos);
        /** @type {?} */
        const isRootEntity = serverAttachInfo.NodeCodes.length === 0;
        /** @type {?} */
        const body = {
            batchUploadInfo: serverAttachInfo
        };
        /** @type {?} */
        const requestConfig = {
            body: body
        };
        return apiProxy.request(HttpMethods.PUT, updateUrl, requestConfig, true);
    }
    /**
     * 创建服务器端需要的更新信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createUpdateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentId = attachmentInfo.attachmentId;
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForUpdate(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: [attachmentId],
            AttachmentId: attachmentId
        };
        return serverAttachInfo;
    }
    /**
     * 创建服务器端需要的批量新增附件信息
     * @private
     * @param {?} attachmentInfoFieldPath
     * @param {?} attachmentInfo
     * @return {?}
     */
    createBatchCreateAttachInfo(attachmentInfoFieldPath, attachmentInfo) {
        /** @type {?} */
        const attachmentIds = AttachmentUtil$1.peekAttachmentIds(attachmentInfo);
        /** @type {?} */
        const parentBindingPathArray = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        parentBindingPathArray.pop();
        /** @type {?} */
        const nodeCodes = BefDataPathUtil.convertToObjectCodes(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const hiretryIds = BefDataPathUtil.convertToDataIdsForAdd(parentBindingPathArray, this.bindingData);
        /** @type {?} */
        const serverAttachInfo = {
            NodeCodes: nodeCodes,
            HiretryIds: hiretryIds,
            AttachmentIds: attachmentIds,
            AttachmentId: null
        };
        return serverAttachInfo;
    }
    /**
     * 同步服务器端最新信息到客户端
     * \@todo:
     * 1、主对象批量新增时不支持
     * @return {?}
     */
    syncAttachmentInfosToClient() {
        /** @type {?} */
        const rootDataId = this.bindingData.list.currentId;
        return this.befReposi.updateEntityById(rootDataId);
    }
    /**
     * 追击主表数据到客户端
     * @param {?} listData
     * @param {?} isRootEntity
     * @return {?}
     */
    appendAttachmentInfosToClient(listData, isRootEntity) {
        if (isRootEntity === true) {
            /** @type {?} */
            const entities = this.befReposi.buildEntities(listData);
            this.befReposi.entityCollection.addEntities(entities);
            return of(listData);
        }
        else {
            return this.syncAttachmentInfosToClient().pipe(map((/**
             * @return {?}
             */
            () => {
                return listData;
            })));
        }
    }
}
if (false) {
    /**
     * ViewModel上下文
     * @type {?}
     */
    BusinessAttachmentDataService.prototype.viewModelContext;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/business-attachment.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 附件服务
 */
class BusinessAttachmentService {
    /**
     * 构造函数
     * @param {?} viewModelContext
     * @param {?} entityService
     * @param {?} removeDataService
     * @param {?} attachDataService
     */
    constructor(viewModelContext, entityService, removeDataService, attachDataService) {
        /**
         * 默认根目录
         */
        this.defaultRootDirId = 'default-root';
        this.viewModelContext = viewModelContext;
        this.attachDataService = attachDataService;
        this.entityService = entityService;
        this.removeDataService = removeDataService;
    }
    /**
     * 默认子目录
     * @private
     * @return {?}
     */
    get defaultParentDirName() {
        return this.viewModelContext.bindingData.list.currentId;
    }
    /**
     * 获取列表数据
     * @param {?} url
     * @param {?} filters
     * @param {?} sorts
     * @return {?}
     */
    loadAttachmentRows(url, filters, sorts) {
        /** @type {?} */
        const attachContext = this.getAttachContext();
        /** @type {?} */
        const befRepository = ((/** @type {?} */ (this.viewModelContext.repository)));
        /** @type {?} */
        const sessionService = befRepository.sessionService;
        /** @type {?} */
        const apiProxy = befRepository.apiProxy;
        // 组织params
        /** @type {?} */
        const params = {};
        if (typeof filters === 'string') {
            filters = JSON.parse(filters);
        }
        if (typeof sorts === 'string') {
            sorts = JSON.parse(sorts);
        }
        /** @type {?} */
        const entityFilter = {
            FilterConditions: filters || null,
            SortConditions: sorts || null,
            IsUsePagination: false,
            Pagination: {
                PageIndex: 1,
                PageSize: 0,
                PageCount: 0,
                TotalCount: 0
            }
        };
        /** @type {?} */
        const entityFilterString = JSON.stringify(entityFilter);
        params.entityFilter = entityFilterString;
        // 组织body
        /** @type {?} */
        const body = {
            dataChange: [],
            variableChange: null
        }
        // 赋值be的url
        ;
        // 赋值be的url
        befRepository.apiProxy.setAssociatedUrl(url);
        return this.waitForBeSession().pipe(switchMap((/**
         * @return {?}
         */
        () => {
            url = `${url}/extension/query`;
            /** @type {?} */
            const requestConfig = {
                headers: sessionService.extendRequestHeaders({}),
                params: params,
                body
            };
            /** @type {?} */
            const query$ = apiProxy.httpClient.request(HttpMethods.PUT, url, requestConfig).pipe(map((/**
             * @param {?} result
             * @return {?}
             */
            (result) => {
                /** @type {?} */
                const attachListData = result.returnValue.result;
                // 赋值当前所有数据
                attachContext.setData(JSON.parse(JSON.stringify(attachListData)));
                // 赋值缓存起来
                attachContext.updateData(JSON.parse(JSON.stringify(attachListData)));
                return attachListData;
            })));
            return query$;
        })));
    }
    /**
     * @private
     * @return {?}
     */
    waitForBeSession() {
        /** @type {?} */
        const befRepository = (/** @type {?} */ (this.viewModelContext.repository));
        /** @type {?} */
        const sessionService = befRepository.sessionService;
        return sessionService.getBeSessionExisted().pipe(filter((/**
         * @param {?} beSessionExisted
         * @return {?}
         */
        (beSessionExisted) => {
            return beSessionExisted === true;
        })), take(1));
    }
    /**
     * 同步变更
     * @param {?} url
     * @return {?}
     */
    syncAttachmentRowChanges(url) {
        /** @type {?} */
        const attachContext = this.getAttachContext() || {};
        /** @type {?} */
        const changeDetails = AttachmentUtil$1.getChangeDetails(attachContext.oldListData, attachContext.listData);
        if (!changeDetails || changeDetails.length === 0) {
            return of(false);
        }
        /** @type {?} */
        const changedRowId = changeDetails[0].ChangeInfo.DataId;
        /** @type {?} */
        const requestInfo = {
            dataChange: changeDetails,
            variableChange: null
        };
        /** @type {?} */
        const requestConfig = {
            body: requestInfo
        };
        /** @type {?} */
        const apiProxy = ((/** @type {?} */ (this.viewModelContext.repository))).apiProxy;
        url = `${url}/extension/retrieve/${changedRowId}`;
        return apiProxy.request(HttpMethods.PUT, url, requestConfig, true).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            /** @type {?} */
            const context = attachContext.context;
            /** @type {?} */
            const data = context.getData();
            // goBack之后  更新缓存后的值
            context.updateData(JSON.parse(JSON.stringify(data)));
            return e;
        })));
    }
    /**
     * 上传单个文件
     * @param {?} attachmentInfoFieldPath
     * @param {?=} rootDirId
     * @param {?=} parentDirName
     * @return {?}
     */
    uploadAndUpdateRow(attachmentInfoFieldPath, rootDirId, parentDirName) {
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil$1.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        console.log('show loading ...');
        /** @type {?} */
        const firstAttachmentInfo = AttachmentUtil$1.getFirstAttachmentInfo(attachmentInfos);
        /** @type {?} */
        const result$ = this.attachDataService.updateRow(attachmentInfoFieldPath, firstAttachmentInfo).pipe(tap((/**
         * @return {?}
         */
        () => {
            console.log('hide loading ...');
        })));
        return result$;
    }
    /**
     * 上传多个文件
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    uploadAndBatchAddRows(url, attachmentInfoFieldPath) {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        // 附件相关信息
        /** @type {?} */
        const rootDirId = commandContext.eventParams.rootId;
        /** @type {?} */
        const parentDirName = commandContext.eventParams.parentDirName;
        /** @type {?} */
        const rootId = rootDirId ? rootDirId : this.defaultRootDirId;
        /** @type {?} */
        const formId = parentDirName ? parentDirName : this.defaultParentDirName;
        if (!rootId || !formId) {
            throw new Error('rootDirId和parentDirName不能为空，请填写');
        }
        /** @type {?} */
        const context = commandContext.eventParams.context;
        /** @type {?} */
        const fileInfos = this.getUploadFileInfosFromContext();
        /** @type {?} */
        const attachmentInfos = AttachmentUtil$1.convertToAttachmentInfos(fileInfos);
        if (!attachmentInfos || attachmentInfos.length === 0) {
            alert('请先上传附件');
            return EMPTY;
        }
        // 更新服务器端
        /** @type {?} */
        const uploadUrl = `${url}/service/batchuploadattachment`;
        return this.attachDataService.updateRows(uploadUrl, attachmentInfoFieldPath, attachmentInfos).pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        e => {
            // 追加数据
            context.appendData(e);
            /** @type {?} */
            const dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            dataId => {
                // 添加标记
                this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Add });
            }));
            return e;
        })));
    }
    /**
     * 批量删除附件所在的行
     * @param {?} url
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    removeAttachmentRows(url, attachmentInfoFieldPath) {
        /** @type {?} */
        const context = this['context'].eventParams.context;
        if (!attachmentInfoFieldPath) {
            return EMPTY;
        }
        /** @type {?} */
        const dataIds = this.getDataIdsToRemove(context, attachmentInfoFieldPath);
        // 如果是主表
        if (attachmentInfoFieldPath.split('/').length <= 2) {
            /** @type {?} */
            const removeUrl = `${url}/extension/batchdelete`;
            return this.removeDataService.removeByBusinessIds(removeUrl, dataIds).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                dataIds.forEach((/**
                 * @param {?} dataId
                 * @return {?}
                 */
                dataId => {
                    context.removeDataById(dataId);
                    // 添加标记
                    this.viewModelContext.repository.dataChangeHistory.addChange({ fPath: '', dataId: dataId, changeType: DataChangeType.Delete });
                }));
            })));
        }
        else {
            // 如果是子表
            /** @type {?} */
            const removeObservables = [];
            if (dataIds.length === 0) {
                alert('请选择要删除的文件');
            }
            /** @type {?} */
            const bindingListPath = this.getBindingListPathWithAttachments(attachmentInfoFieldPath);
            dataIds.forEach((/**
             * @param {?} dataId
             * @return {?}
             */
            (dataId) => {
                /** @type {?} */
                const removeObservable = this.removeDataService.removeByBusinessPathAndId(url, bindingListPath, dataId);
                removeObservables.push(removeObservable);
            }));
            return forkJoin(removeObservables).pipe(map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                console.log(e);
                return e;
            })));
        }
    }
    // #region 工具方法
    /**
     * 从上下文中中获取控件传递的附件信息
     * @private
     * @return {?}
     */
    getUploadFileInfosFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        const uploadFileInfos = (/** @type {?} */ (commandContext.eventParams.data));
        if (!uploadFileInfos) {
            return [];
        }
        return uploadFileInfos;
    }
    /**
     * 获取要删除的附件对应的数据id数组
     * @param {?} context
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getDataIdsToRemove(context, attachmentInfoFieldPath) {
        /** @type {?} */
        const attachIds = this.getAttachmentIdsToRemoveFromContext();
        /** @type {?} */
        const dataIds = [];
        attachIds.forEach((/**
         * @param {?} attachId
         * @return {?}
         */
        (attachId) => {
            // 上传删除和预览删除传递过来的fileId的key可能不一致，要做兼容
            /** @type {?} */
            const dataId = this.convertAttachmentIdToDataId(context, attachId, attachmentInfoFieldPath);
            dataIds.push(dataId);
        }));
        return dataIds;
    }
    /**
     * 从命令上下文中获取要删除附件ids
     * @return {?}
     */
    getAttachmentIdsToRemoveFromContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        return commandContext.eventParams.data.map((/**
         * @param {?} dataItem
         * @return {?}
         */
        dataItem => {
            return Object.prototype.toString.call(dataItem) === '[object Object]' ? dataItem.metadataId : dataItem;
        }));
        // return commandContext.eventParams.data as string[];
    }
    /**
     * 根据路径获取附件字段值数组
     * @private
     * @param {?} context
     * @param {?} fileId
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    convertAttachmentIdToDataId(context, fileId, attachmentInfoFieldPath) {
        // 解析路径
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        /** @type {?} */
        const attachFieldName = attachInfoBindingPath.pop();
        /** @type {?} */
        const attachListBindingPath = attachInfoBindingPath;
        // 获取附件id数组
        // const entityListData = this.entityService.getEntityListData(attachListBindingPath);
        /** @type {?} */
        const entityListData = context.data;
        /** @type {?} */
        const targetEntityData = entityListData.find((/**
         * @param {?} entityData
         * @return {?}
         */
        (entityData) => {
            if (entityData[attachFieldName]) {
                /** @type {?} */
                const attachmentId = entityData[attachFieldName]['attachmentId'];
                if (attachmentId === fileId) {
                    return true;
                }
            }
        }));
        return targetEntityData.id;
    }
    /**
     * 获取带附件的BindingList的Path
     * @private
     * @param {?} attachmentInfoFieldPath
     * @return {?}
     */
    getBindingListPathWithAttachments(attachmentInfoFieldPath) {
        /** @type {?} */
        const attachInfoBindingPath = BindingPathConverter.toBindingPathArray(attachmentInfoFieldPath);
        attachInfoBindingPath.pop();
        /** @type {?} */
        const bindingListPath = attachInfoBindingPath;
        return '/' + bindingListPath.join('/');
    }
    /**
     * 获取附件组件上下文
     * @private
     * @return {?}
     */
    getAttachContext() {
        /** @type {?} */
        const commandContext = (/** @type {?} */ (this['context']));
        /** @type {?} */
        const attachContext = commandContext && commandContext.eventParams ? commandContext.eventParams : {};
        return attachContext;
    }
}
if (false) {
    /**
     * 默认根目录
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.defaultRootDirId;
    /**
     * 视图模型
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.viewModelContext;
    /**
     * 附件数据服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.attachDataService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.entityService;
    /**
     * 实体服务
     * @type {?}
     * @private
     */
    BusinessAttachmentService.prototype.removeDataService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/business-attachment-services/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/discussion-group-service/discussion-group.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DiscussionGroupService {
    /**
     * @param {?} httpSvc
     * @param {?} viewModelContext
     * @param {?} loadingService
     */
    constructor(httpSvc, viewModelContext, loadingService) {
        this.httpSvc = httpSvc;
        this.viewModelContext = viewModelContext;
        this.loadingService = loadingService;
    }
    /**
     * @private
     * @return {?}
     */
    get params() {
        return this['context'] && this['context']['eventParams'] || {};
    }
    /**
     *
     * @param {?=} id 表单id
     * @param {?=} summary 消息描述
     * @param {?=} configId 消息配置id
     * @param {?=} text 评论内容
     * @param {?=} visibility 是否所有人可见(移动暂未支持)
     * @param {?=} parentId 是否是回复信息
     * @return {?}
     */
    addComment(id, summary, configId, text, visibility, parentId) {
        id = id || this.viewModelContext && this.viewModelContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        /** @type {?} */
        const url = '/api/runtime/comment/v1.0/bill-comment/comment';
        /** @type {?} */
        const body = this.buildAddCommentParam(id, text, parentId, summary, visibility, configId);
        this.loadingService.show();
        return this.httpSvc.post(url, body, {}).pipe(tap((/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        })));
    }
    /**
     * @private
     * @param {?} id
     * @param {?} text
     * @param {?} parentId
     * @param {?} summary
     * @param {?} visibility
     * @param {?} configId
     * @return {?}
     */
    buildAddCommentParam(id, text, parentId, summary, visibility, configId) {
        if (typeof text === 'undefined') {
            text = this.params.text;
        }
        if (typeof parentId === 'undefined') {
            parentId = this.params.replyUser && this.params.replyUser.id;
        }
        if (typeof visibility === 'undefined') {
            visibility = this.params.visibility || 'ALL';
        }
        return {
            'bill': {
                'billId': id,
                'configId': configId,
                'summary': summary
            },
            'comment': {
                'billId': id,
                'configId': configId,
                'parentId': parentId || null,
                'text': text,
                'visibility': visibility
            }
        };
    }
    /**
     *
     * @param {?} id 表单id
     * @param {?} configId 消息配置id
     * @param {?=} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    queryComments(id, configId, pageIndex, pageSize) {
        id = id || this.viewModelContext && this.viewModelContext.bindingData.list.currentId || null;
        if (!id) {
            return EMPTY;
        }
        /** @type {?} */
        const url = this.buildQueryCommentsUrl(id, pageIndex, pageSize, configId);
        this.loadingService.show();
        return this.httpSvc.get(url, {}).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.loadingService.hide();
            this.viewModelContext.uiState.setPropertyValue('discussionListData', e);
        })));
    }
    /**
     * @private
     * @param {?} id
     * @param {?} pageIndex
     * @param {?} pageSize
     * @param {?} configId
     * @return {?}
     */
    buildQueryCommentsUrl(id, pageIndex, pageSize, configId) {
        if (typeof pageIndex === 'undefined' || pageIndex === null) {
            pageIndex = this.params.pageIndex || 0;
        }
        if (typeof pageSize === 'undefined' || pageSize === null) {
            pageSize = this.params.pageSize || 999;
        }
        return `/api/runtime/comment/v1.0/bill-comment/comment/byBill?configId=${configId}&billId=${id}&pageSize=${pageSize}&pageIndex=${pageIndex}`;
    }
    /**
     * 回复赋值
     * @return {?}
     */
    setReplyUser() {
        this.viewModelContext.uiState.setPropertyValue('replyUser', this.params);
    }
    /**
     * @param {?=} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    queryFrequentAtUsers(pageIndex, pageSize) {
        /** @type {?} */
        const params = [];
        params.push(`pageSize=${pageSize || 20}`);
        params.push(`pageIndex=${pageIndex || 0}`);
        /** @type {?} */
        const url = `/api/runtime/comment/v1.0/bill-comment/frequentAtUsers?${params.join('&')}`;
        this.loadingService.show();
        return this.httpSvc.get(url, {}).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.loadingService.hide();
            /** @type {?} */
            const personnelsData = {
                pageInfo: {
                    pageSize: e.pageSize,
                    pageIndex: e.pageIndex
                },
                total: e.totalCount,
                items: e.users
            };
            this.viewModelContext.uiState.setPropertyValue('personnelsData', personnelsData);
        })));
    }
    /**
     * @param {?=} user
     * @param {?=} pageIndex
     * @param {?=} pageSize
     * @return {?}
     */
    queryAtUsers(user, pageIndex, pageSize) {
        /** @type {?} */
        const params = [];
        if (user) {
            params.push(`param=${user}`);
        }
        params.push(`pageSize=${pageSize || 100}`);
        params.push(`pageIndex=${pageIndex || 0}`);
        /** @type {?} */
        const url = `/api/runtime/comment/v1.0/bill-comment/atUser?${params.join('&')}`;
        this.loadingService.show();
        return this.httpSvc.get(url, {}).pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.loadingService.hide();
            /** @type {?} */
            const personnelsData = {
                pageInfo: {
                    pageSize: e.pageSize,
                    pageIndex: e.pageIndex
                },
                total: e.totalCount,
                items: e.users
            };
            this.viewModelContext.uiState.setPropertyValue('personnelsData', personnelsData);
        })));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    DiscussionGroupService.prototype.httpSvc;
    /**
     * @type {?}
     * @private
     */
    DiscussionGroupService.prototype.viewModelContext;
    /**
     * @type {?}
     * @private
     */
    DiscussionGroupService.prototype.loadingService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/discussion-group-service/index.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/service/task.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TaskService {
    /**
     * @param {?} httpSvc
     */
    constructor(httpSvc) {
        this.httpSvc = httpSvc;
    }
    /**
     * @param {?} error
     * @param {?=} actionCode
     * @return {?}
     */
    error(error, actionCode) {
        if (error && error.error && error.error.Message) {
            /** @type {?} */
            var message = error.error.Message;
            if (actionCode) {
                message = actionCode + "操作失败:" + message;
            }
            return message;
        }
    }
    /**
     * 启动流程预解析
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcessSimulate(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess-simulation`;
        return this.httpSvc.post(url, payload, {});
    }
    /**
     * 启动流程接口
     * @param {?} payload API所需的上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/startProcess`;
        return this.httpSvc.post(url, payload, {});
    }
    /**
     * 取消提交
     * @param {?} param 参数
     * @return {?}
     */
    cancelSubmit(param) {
        /** @type {?} */
        const url = `/api/runtime/wf/v1.0/processInstances/cancelSubmit`;
        return this.httpSvc.post(url, param, {});
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    TaskService.prototype.httpSvc;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/entity/start-process-payload.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 提交审批上下文参数
 */
class StartProcessPayload {
}
if (false) {
    /**
     * 随机生成的ID 无意义
     * @type {?}
     */
    StartProcessPayload.prototype.id;
    /**
     * 流程定义ID
     * @type {?}
     */
    StartProcessPayload.prototype.processDefinitionId;
    /**
     * 流程定义Key
     * @type {?}
     */
    StartProcessPayload.prototype.processDefinitionKey;
    /**
     * 入口单据ID
     * @type {?}
     */
    StartProcessPayload.prototype.bizDefKey;
    /**
     * 数据模型ID（BE上的节点ID）
     * @type {?}
     */
    StartProcessPayload.prototype.dataModelId;
    /**
     * 单据内码
     * @type {?}
     */
    StartProcessPayload.prototype.dataId;
    /**
     * 流程实例名称，可空
     * @type {?}
     */
    StartProcessPayload.prototype.name;
    /**
     * 流程发起人
     * @type {?}
     */
    StartProcessPayload.prototype.startUserId;
    /**
     * 下一环节
     * @type {?}
     */
    StartProcessPayload.prototype.nextFlowNodes;
    /**
     * 参数
     * @type {?}
     */
    StartProcessPayload.prototype.variables;
}
class FlowNodeInfo {
}
if (false) {
    /** @type {?} */
    FlowNodeInfo.prototype.activityDefinitionId;
    /** @type {?} */
    FlowNodeInfo.prototype.activityDefinitionName;
    /** @type {?} */
    FlowNodeInfo.prototype.dependency;
    /** @type {?} */
    FlowNodeInfo.prototype.selectedAssignees;
    /** @type {?} */
    FlowNodeInfo.prototype.assigneeInfo;
    /** @type {?} */
    FlowNodeInfo.prototype.resolved;
    /** @type {?} */
    FlowNodeInfo.prototype.anonymous;
    /** @type {?} */
    FlowNodeInfo.prototype.anonymousText;
}
class Assignee {
}
if (false) {
    /** @type {?} */
    Assignee.prototype.id;
    /** @type {?} */
    Assignee.prototype.name;
}
class CancelSubmitPayload {
}
if (false) {
    /** @type {?} */
    CancelSubmitPayload.prototype.procInstId;
    /** @type {?} */
    CancelSubmitPayload.prototype.dataId;
    /** @type {?} */
    CancelSubmitPayload.prototype.bizDefKey;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/submit/process-selector-vue/process-selector.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class ProcessSelectorService {
    /**
     * @param {?} taskService
     */
    constructor(taskService) {
        this.taskService = taskService;
        //候选下一环节
        this.processPlaceholder = '选择流程'; //选择流程placeholder
        //保存模拟流程后返回的内容，选择节点时使用
        this.assignInfos = [];
        //选择的下一环节ID，后续环节id的拼接
        this.selectedValues = ['clear'];
        this.payload = new StartProcessPayload; //保存表单上传来的payload
        //保存表单上传来的payload
        this.subject = new Subject();
        this.processReadOnly = false; //选择流程框是否只读
        //选择流程框是否只读
        this.nodeReadOnly = true; //选择节点下拉框是否只读
    }
    //弹框实例
    /**
     * @param {?} param
     * @return {?}
     */
    setParam(param) {
        this.payload.id = param.id;
        this.payload.processDefinitionId = param.processDefinitionId;
        this.payload.processDefinitionKey = param.processDefinitionKey;
        this.payload.bizDefKey = param.bizDefKey;
        this.payload.dataModelId = param.dataModelId;
        this.payload.dataId = param.dataId;
        this.payload.name = param.name;
        this.payload.startUserId = param.startUserId;
        this.payload.nextFlowNodes = [];
        this.startProcessSimulate(this.payload);
    }
    /**
     * @param {?} payload
     * @return {?}
     */
    startProcessSimulate(payload) {
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            this.destProcesses = response.procDefs.map((/**
             * @param {?} process
             * @return {?}
             */
            process => ({ id: process.procDefId, name: process.procDefName })));
            if (this.destProcesses.length === 1) {
                this.processReadOnly = true;
                this.selectedProcessId = response.procDefs[0].procDefId;
                this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    process: this.selectedProcessId,
                    processData: this.destProcesses,
                    processOc: this.selectProcessChange.bind(this),
                    processReadFlag: this.processReadOnly,
                    processHolder: this.processPlaceholder,
                    nextNodeReadFlag: this.nodeReadOnly,
                    submit: this.submit.bind(this),
                    cancel: this.back.bind(this)
                });
                this.response = response;
                this.setNextNode(response);
            }
            else {
                this.vm = ((/** @type {?} */ (SubmitApprove))).confirm({
                    processData: this.destProcesses,
                    processOc: this.selectProcessChange.bind(this),
                    processReadFlag: this.processReadOnly,
                    processHolder: this.processPlaceholder,
                    nextNodeReadFlag: this.nodeReadOnly,
                    submit: this.submit.bind(this),
                    cancel: this.back.bind(this)
                });
            }
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    }
    /**
     * 选择某个流程后
     * @param {?} data
     * @return {?}
     */
    selectProcessChange(data) {
        this.clearHelp();
        this.clearNode();
        this.selectedProcessId = data;
        /** @type {?} */
        var payload = new StartProcessPayload();
        payload.processDefinitionId = this.selectedProcessId;
        payload.dataId = this.payload.dataId;
        // const load = this.loadingService.show();
        this.taskService.startProcessSimulate(payload).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            // load.close();
            this.response = response;
            this.setNextNode(response);
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            //load.close();
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该流程存在问题' });
        }));
    }
    /**
     * @param {?} data
     * @return {?}
     */
    getsimulationPathsIndexData(data) {
        return this.destNodes.findIndex((/**
         * @param {?} item
         * @return {?}
         */
        item => item.id === data));
    }
    /**
     * 选择节点后事件
     * @param {?} data
     * @return {?}
     */
    selectNodeChange(data) {
        this.clearHelp();
        this.clearAssignInfos();
        this.selectedNodeId = data;
        this.vm.open({
            nextNode: this.selectedNodeId,
        });
        //const nodeNames = data.data.name.split('，');
        /** @type {?} */
        const index = this.getsimulationPathsIndexData(data);
        if (this.response.simulationPaths[index].nodeInfoList.every((/**
         * @param {?} node
         * @return {?}
         */
        node => node.resolved === true))) { //已预解析参与者
            this.setAssignInfo(this.response.simulationPaths[index]);
        }
        else { //未预解析参与者
            //未预解析参与者
            /** @type {?} */
            let payload = new StartProcessPayload();
            payload.processDefinitionId = this.selectedProcessId;
            payload.dataId = this.payload.dataId;
            payload.nextFlowNodes = [];
            this.selectedNodeId.split('，').forEach((/**
             * @param {?} nodeId
             * @param {?} index
             * @return {?}
             */
            (nodeId, index) => {
                /** @type {?} */
                let nextFlowNode = new FlowNodeInfo();
                nextFlowNode.activityDefinitionId = nodeId;
                //nextFlowNode.activityDefinitionName = nodeNames[index];
                payload.nextFlowNodes.push(nextFlowNode);
            }));
            //const load = this.loadingService.show();
            this.taskService.startProcessSimulate(payload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                //load.close();
                this.setAssignInfo(response.simulationPaths[0]); //选择的下一环节应该在同一条路径上，故取simulationPaths[0]
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                //load.close();
                this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '该节点存在问题' });
            }));
        }
    }
    /**
     * 设置下一环节
     * @private
     * @param {?} response
     * @return {?}
     */
    setNextNode(response) {
        this.destNodes = response.simulationPaths && response.simulationPaths.map((/**
         * @param {?} path
         * @return {?}
         */
        path => ({
            id: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId)).join('，'),
            name: path.nodeInfoList.map((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionName)).join('，')
        })));
        //处理默认分支，无默认分支返回-1
        /** @type {?} */
        const defaultIndex = response.simulationPaths.findIndex((/**
         * @param {?} a
         * @return {?}
         */
        a => a.default));
        if (defaultIndex > -1) {
            this.destNodes.length === 1 ? (this.nodeReadOnly = true) : (this.nodeReadOnly = false);
            this.selectedNodeId = this.destNodes[defaultIndex].id;
            this.setAssignInfo(response.simulationPaths[defaultIndex]);
        }
        else {
            this.selectedNodeId = '';
            this.nodeReadOnly = false;
            this.nodePlaceholder = '请选择';
        }
        this.vm.open({
            nextNodeOc: this.selectNodeChange.bind(this),
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nextNodeHolder: this.nodePlaceholder
        });
    }
    /**
     * 设置当前指派信息帮助参数
     * @private
     * @param {?} simulationPaths
     * @return {?}
     */
    setAssignInfo(simulationPaths) {
        this.assignInfos = [];
        this.selectedNodeId.split('，').forEach((/**
         * @param {?} nodeId
         * @return {?}
         */
        nodeId => {
            /** @type {?} */
            const node = simulationPaths.nodeInfoList.find((/**
             * @param {?} node
             * @return {?}
             */
            node => node.activityDefinitionId === nodeId));
            if (node) {
                /** @type {?} */
                const selectedAssignees = node.selectedAssignees;
                /** @type {?} */
                let assigneeReadFlag = false;
                /** @type {?} */
                let assignee = '';
                /** @type {?} */
                let assigneeHolder = '请选择人员';
                if (selectedAssignees && selectedAssignees.length >= 1) {
                    assigneeReadFlag = true;
                    assigneeHolder = "";
                    selectedAssignees.forEach((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => {
                        assignee = assignee + user.name + ', ';
                    }));
                    assignee = assignee.slice(0, assignee.length - 2);
                }
                if (node.anonymous) {
                    assignee = node.anonymousText === '' ? '' : node.anonymousText && node.anonymousText;
                }
                this.assignInfos.push({
                    label: `${this.selectedNodeId && this.selectedNodeId.split('，').length > 1 ? node.activityDefinitionName : ''}办理人员`,
                    selectedAssignees,
                    assigneeReadFlag,
                    assignee,
                    assigneeHolder,
                    assigneeInfo: Object.assign({}, node.assigneeInfo, { assigneeUsers: { items: (node.assigneeInfo && node.assigneeInfo.assigneeUsers) || [] } }),
                    assignees: node.selectedAssignees.map((/**
                     * @param {?} user
                     * @return {?}
                     */
                    user => { return { id: user.id, name: user.name }; })),
                    activityName: node.activityDefinitionName,
                    dependency: node.dependency,
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
            else {
                this.assignInfos.push({
                    selectedAssignees: [],
                    assigneeInfo: null,
                    assignees: [],
                    activityName: '',
                    dependency: '',
                    anonymous: node.anonymous,
                    anonymousText: node.anonymousText
                });
            }
        }));
        this.vm.open({
            assigneeOc: this.assigneeOc.bind(this),
            assignInfos: this.assignInfos
        });
    }
    // 办理人员选择事件
    /**
     * @param {?} data
     * @param {?} index
     * @return {?}
     */
    assigneeOc(data, index) {
        this.assignInfos[index].assignees = data.items;
        this.selectedValues[index] = data.value;
        this.vm.open({
            selectedValues: this.selectedValues
        });
    }
    /**
     * @return {?}
     */
    clearHelp() {
        this.vm.open({
            selectedValues: ['clear']
        });
    }
    // 清空节点
    /**
     * @return {?}
     */
    clearNode() {
        this.selectedNodeId = '',
            this.destNodes = [],
            this.nodeReadOnly = true,
            this.nodePlaceholder = '',
            this.assignInfos = [];
        this.vm.open({
            nextNode: this.selectedNodeId,
            nextNodeData: this.destNodes,
            nextNodeReadFlag: this.nodeReadOnly,
            nodePlaceholder: this.nodePlaceholder,
            assignInfos: this.assignInfos
        });
    }
    // 清空办理人员
    /**
     * @return {?}
     */
    clearAssignInfos() {
        this.assignInfos = [];
        this.vm.open({
            assignInfos: this.assignInfos
        });
    }
    /**
     * 取消页面弹框
     * @return {?}
     */
    back() {
        this.clearProcess();
        this.subject.next({ type: 'success', message: '' });
    }
    /**
     * @return {?}
     */
    submit() {
        if (!this.selectedProcessId) {
            this.subject.next({ type: 'error', message: '请选流程' });
            return;
        }
        if (!this.selectedNodeId) {
            this.subject.next({ type: 'error', message: '请选节点' });
            return;
        }
        if (this.assignInfos.filter((/**
         * @param {?} info
         * @return {?}
         */
        info => ((info.assigneeInfo && info.assigneeInfo.assigneeUsers.items.length) || info.selectedAssignees.length) && !info.assignees.length)).length) {
            this.subject.next({ type: 'error', message: '请选办理人员' });
            return;
        }
        /** @type {?} */
        const nodes = this.selectedNodeId.split('，');
        for (let i = 0; i < nodes.length; i++) {
            /** @type {?} */
            let nextFlowNode = {
                activityDefinitionId: nodes[i],
                activityDefinitionName: this.assignInfos[i].activityName,
                dependency: this.assignInfos[i].dependency,
                selectedAssignees: this.assignInfos[i].assigneeInfo ? this.assignInfos[i].assignees : [],
                assigneeInfo: null,
                resolved: false,
                anonymous: false,
                anonymousText: ''
            };
            this.payload.nextFlowNodes.push(nextFlowNode);
        }
        this.payload.processDefinitionId = this.selectedProcessId;
        this.taskService.startProcess(this.payload).subscribe((/**
         * @return {?}
         */
        () => {
            this.clearProcess();
            this.subject.next({ type: 'success', message: '提交成功' });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        (error) => {
            this.subject.next({ type: 'error', message: error && error.response && error.response.data && error.response.data.Message || '提交失败' });
        }));
    }
    /**
     * @return {?}
     */
    getSubject() {
        return this.subject.asObservable();
    }
    /**
     * @return {?}
     */
    clearProcess() {
        this.vm.close();
        this.vm = null;
        this.selectedProcessId = '';
        this.selectedNodeId = '';
        this.processReadOnly = false;
        this.nodeReadOnly = true;
    }
}
if (false) {
    /** @type {?} */
    ProcessSelectorService.prototype.destProcesses;
    /** @type {?} */
    ProcessSelectorService.prototype.destNodes;
    /** @type {?} */
    ProcessSelectorService.prototype.processPlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.nodePlaceholder;
    /** @type {?} */
    ProcessSelectorService.prototype.response;
    /** @type {?} */
    ProcessSelectorService.prototype.assignInfos;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedProcessId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedNodeId;
    /** @type {?} */
    ProcessSelectorService.prototype.selectedValues;
    /** @type {?} */
    ProcessSelectorService.prototype.payload;
    /** @type {?} */
    ProcessSelectorService.prototype.subject;
    /** @type {?} */
    ProcessSelectorService.prototype.processReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.nodeReadOnly;
    /** @type {?} */
    ProcessSelectorService.prototype.vm;
    /**
     * @type {?}
     * @private
     */
    ProcessSelectorService.prototype.taskService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/work-flow-service/wf-task-handler.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Response() { }
if (false) {
    /** @type {?} */
    Response.prototype.type;
    /** @type {?} */
    Response.prototype.message;
}
;
class WfTaskHandlerService {
    /**
     * @param {?} processSelectorService
     * @param {?} taskService
     * @param {?} loadingService
     * @param {?} notifyService
     */
    constructor(processSelectorService, taskService, loadingService, notifyService) {
        this.processSelectorService = processSelectorService;
        this.taskService = taskService;
        this.loadingService = loadingService;
        this.notifyService = notifyService;
        this.subject = new Subject();
    }
    /**
     * 提交审批
     * @param {?} payload 上下文参数
     * @return {?}
     */
    startProcess(payload) {
        /** @type {?} */
        const subject = new Subject();
        this.processSelectorService.setParam(payload);
        this.processSelectorService.getSubject().subscribe((/**
         * @param {?} response
         * @return {?}
         */
        (response) => {
            if (response.type === 'success') {
                if (response.message) {
                    this.notifyService.success(response.message);
                    subject.next(true);
                }
            }
            else if (response.type === 'error') {
                subject.next(false);
                this.notifyService.error(response.message);
            }
        }), (/**
         * @return {?}
         */
        () => {
            this.loadingService.hide();
        }));
        return subject.asObservable();
    }
    /**
     * 取消提交
     * \@payload payload 参数
     * @param {?} payload
     * @return {?}
     */
    cancelSubmit(payload) {
        /** @type {?} */
        const subject = new Subject();
        this.loadingService.show();
        this.taskService.cancelSubmit(payload).subscribe((/**
         * @param {?} re
         * @return {?}
         */
        re => {
            subject.next(true);
            this.loadingService.hide();
            this.notifyService.success('取消提交成功');
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => {
            subject.next(false);
            this.loadingService.hide();
            this.notifyService.error(error && error.response && error.response.data && error.response.data.Message || '取消提交失败');
        }));
        return subject.asObservable();
    }
    /**
     * 提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    submitWithBizDefKey(dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = dataId;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 取消提交审批
     * @param {?} dataId 表单id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    cancelSubmitWithDataId(dataId, bizDefKey) {
        if (!dataId) {
            this.notifyService.error('表单id不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据Id不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = dataId;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 批量提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchSubmitWithBizDefKey(dataIds, bizDefKey) {
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        if (dataIds.length === 1) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[0];
            return this.startProcess(startPayload);
        }
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        /** @type {?} */
        const subject = new Subject();
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var startPayload = new StartProcessPayload();
            startPayload.bizDefKey = bizDefKey;
            startPayload.dataId = dataIds[i];
            startPayload.variables = { simulate: false };
            this.taskService.startProcess(startPayload).subscribe((/**
             * @param {?} response
             * @return {?}
             */
            (response) => {
                if (response.procDefs.length > 1 || response.nextFlowNodes.length > 1) { //存在多个流程，单独提交//多个节点，单独提交
                    failedNum++;
                }
                else {
                    successNum++;
                }
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(true); //全部执行完再返回
                    this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            () => {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(false); //全部执行完再返回
                    this.showBatchSubmitInfo("submit", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 批量取消提交审批
     * @param {?} dataIds 表单ID集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    batchCancelSubmitWithDataId(dataIds, bizDefKey) {
        if (!dataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!dataIds.length) {
            this.notifyService.error('请选择数据');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const subject = new Subject();
        /** @type {?} */
        var successNum = 0;
        /** @type {?} */
        var failedNum = 0;
        this.loadingService.show();
        for (var i = 0; i < dataIds.length; i++) {
            /** @type {?} */
            var cancelSubmitPayload = new CancelSubmitPayload();
            cancelSubmitPayload.dataId = dataIds[i];
            cancelSubmitPayload.bizDefKey = bizDefKey;
            this.taskService.cancelSubmit(cancelSubmitPayload).subscribe((/**
             * @param {?} re
             * @return {?}
             */
            re => {
                successNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(true);
                    this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }), (/**
             * @return {?}
             */
            () => {
                failedNum++;
                if (successNum + failedNum === dataIds.length) {
                    this.loadingService.hide();
                    subject.next(false);
                    this.showBatchSubmitInfo("cancel", successNum, failedNum);
                }
            }));
        }
        return subject.asObservable();
    }
    /**
     * 子表提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var startProcessPayload = new StartProcessPayload();
        startProcessPayload.dataId = `${parentDataId},${childDataId}`;
        startProcessPayload.bizDefKey = bizDefKey;
        return this.startProcess(startProcessPayload);
    }
    /**
     * 子表取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataId 子表id
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childCancelSubmit(parentDataId, childDataId, bizDefKey) {
        if (!parentDataId || !childDataId) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        var cancelSubmitPayload = new CancelSubmitPayload();
        cancelSubmitPayload.dataId = `${parentDataId},${childDataId}`;
        cancelSubmitPayload.bizDefKey = bizDefKey;
        return this.cancelSubmit(cancelSubmitPayload);
    }
    /**
     * 子表批量提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchSubmitWithBizDefKey(dataIds, bizDefKey);
    }
    /**
     * 子表批量取消提交审批
     * @param {?} parentDataId 主表id
     * @param {?} childDataIds 子表id集合
     * @param {?} bizDefKey 入口单据id
     * @return {?}
     */
    childBatchCancelSubmit(parentDataId, childDataIds, bizDefKey) {
        if (!parentDataId || !childDataIds) {
            this.notifyService.error('dataId不能为空');
            return;
        }
        if (!bizDefKey) {
            this.notifyService.error('入口单据ID不能为空');
            return;
        }
        /** @type {?} */
        const dataIds = childDataIds.map((/**
         * @param {?} childDataId
         * @return {?}
         */
        childDataId => `${parentDataId},${childDataId}`));
        return this.batchCancelSubmitWithDataId(dataIds, bizDefKey);
    }
    /**
     * 批量提交、取消提交提示信息
     * @private
     * @param {?} actionCode
     * @param {?} successNum
     * @param {?} failedNum
     * @return {?}
     */
    showBatchSubmitInfo(actionCode, successNum, failedNum) {
        if (successNum && !failedNum) { //批量全部成功
            actionCode === "submit" && this.notifyService.success('提交审批成功！');
            actionCode === "cancel" && this.notifyService.success('取消提交成功！');
        }
        if (successNum && failedNum) { //批量有成功有失败
            this.notifyService.warning(`操作成功${successNum}条，失败${failedNum}条!`);
        }
        if (!successNum && failedNum) { //批量全部失败
            actionCode === "submit" && this.notifyService.error('提交审批失败！');
            actionCode === "cancel" && this.notifyService.error('取消提交失败！');
        }
    }
}
if (false) {
    /** @type {?} */
    WfTaskHandlerService.prototype.subject;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.processSelectorService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.taskService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.loadingService;
    /**
     * @type {?}
     * @private
     */
    WfTaskHandlerService.prototype.notifyService;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/providers.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * 应用级Providers
 * @type {?}
 */
const COMMAND_SERVICES_APP_PROVIDERS = [
    { provide: LoadingService, useClass: LoadingService, deps: [] },
    { provide: ToastService, useClass: ToastService, deps: [] },
    { provide: NotifyService, useClass: NotifyService, deps: [] },
    { provide: DialogService, useClass: DialogService, deps: [] },
    { provide: ExceptionService, useClass: ExceptionService, deps: [] },
    { provide: JsBridgeService, useClass: JsBridgeService, deps: [] },
    { provide: BE_ERROR_HANDLER__TOKEN, useClass: ExceptionService, deps: [NotifyService, JsBridgeService] },
];
/**
 * 视图模型级Providers
 * @type {?}
 */
const COMMAND_SERVICES_VIEWMODEL_PROVIDERS = [
    { provide: RouterService, useClass: RouterService, deps: [ViewModelContext, ROUTER_INSTANCE_TOKEN, JsBridgeService] },
    { provide: CommandService, useClass: CommandService, deps: [ViewModelContext] },
    { provide: EntityService, useClass: EntityService, deps: [ViewModelContext] },
    { provide: StateMachineService, useClass: StateMachineService, deps: [ViewModelContext] },
    { provide: UIStateService, useClass: UIStateService, deps: [ViewModelContext] },
    { provide: VoVariableService, useClass: VoVariableService, deps: [ViewModelContext] },
    { provide: EntityTraversingService, useClass: EntityTraversingService, deps: [ViewModelContext] },
    { provide: EntityManipulationService, useClass: EntityManipulationService, deps: [ViewModelContext] },
    { provide: EntityAggregationService, useClass: EntityAggregationService, deps: [ViewModelContext] },
    { provide: EntityService, useClass: EntityService, deps: [ViewModelContext] },
    { provide: EntityListService, useClass: EntityListService, deps: [ViewModelContext] },
    { provide: LoadDataService, useClass: LoadDataService, deps: [ViewModelContext] },
    { provide: CreateDataService, useClass: CreateDataService, deps: [ViewModelContext] },
    { provide: EditDataService, useClass: EditDataService, deps: [ViewModelContext] },
    { provide: UpdateDataService, useClass: UpdateDataService, deps: [ViewModelContext] },
    { provide: RemoveDataService, useClass: RemoveDataService, deps: [ViewModelContext] },
    { provide: SaveDataService, useClass: SaveDataService, deps: [ViewModelContext] },
    { provide: CancelDataService, useClass: CancelDataService, deps: [ViewModelContext] },
    { provide: BeActionService, useClass: BeActionService, deps: [ViewModelContext] },
    { provide: CheckDataService, useClass: CheckDataService, deps: [ViewModelContext] },
    { provide: ValidatorServices, useClass: ValidatorServices, deps: [ViewModelContext] },
    { provide: TaskService, useClass: TaskService, deps: [HttpClient] },
    { provide: ProcessSelectorService, useClass: ProcessSelectorService, deps: [TaskService] },
    {
        provide: WfTaskHandlerService, useClass: WfTaskHandlerService,
        deps: [ProcessSelectorService, TaskService, LoadingService, NotifyService]
    },
    { provide: ApproveService, useClass: ApproveService, deps: [WfTaskHandlerService, ViewModelContext] },
    { provide: AttachmentDataService, useClass: AttachmentDataService, deps: [ViewModelContext] },
    { provide: BusinessAttachmentDataService, useClass: BusinessAttachmentDataService, deps: [ViewModelContext] },
    {
        provide: AttachmentService, useClass: AttachmentService,
        deps: [ViewModelContext, EntityService, RemoveDataService, AttachmentDataService]
    },
    {
        provide: BusinessAttachmentService, useClass: BusinessAttachmentService,
        deps: [ViewModelContext, EntityService, RemoveDataService, BusinessAttachmentDataService]
    },
    { provide: CcWorkService, useClass: CcWorkService, deps: [ViewModelContext] },
    { provide: MapService, useClass: MapService, deps: [ViewModelContext] },
    { provide: AttachmentPreviewService, useClass: AttachmentPreviewService, deps: [ViewModelContext] },
    { provide: DiscussionGroupService, useClass: DiscussionGroupService, deps: [HttpClient, ViewModelContext, LoadingService] }
];

/**
 * @fileoverview added by tsickle
 * Generated from: public-api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: farris-mobile-command-services.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { ApproveService, AttachmentDataService, AttachmentPreviewService, AttachmentService, BaseDataService, BaseService, BeActionService, BusinessAttachmentDataService, BusinessAttachmentService, COMMAND_SERVICES_APP_PROVIDERS, COMMAND_SERVICES_VIEWMODEL_PROVIDERS, CancelDataService, CcWorkService, CheckDataService, CommandService, CreateDataService, DialogService, DiscussionGroupService, EditDataService, EntityAggregationService, EntityListService, EntityManipulationService, EntityService, EntityTraversingService, ExceptionService, HistoryBackService, JsBridgeService, LoadDataService, LoadingService, MapService, NotifyService, ROUTER_INSTANCE_TOKEN, RemoveDataService, RouterService, SaveDataService, StateMachineService, ToastService, UIStateService, UpdateDataService, ValidatorServices, VoVariableService, WfTaskHandlerService as ɵa, ProcessSelectorService as ɵb, TaskService as ɵc, NotifyService as ɵd, ValidatorServices as ɵe, MapService as ɵf };
//# sourceMappingURL=farris-mobile-command-services.js.map
