(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@farris/ui-modal'), require('@angular/core'), require('@farris/ui-treetable'), require('@farris/ui-messager'), require('lodash-es'), require('@angular/forms'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@farris/header-group-editor', ['exports', '@farris/ui-modal', '@angular/core', '@farris/ui-treetable', '@farris/ui-messager', 'lodash-es', '@angular/forms', '@angular/common'], factory) :
    (global = global || self, factory((global.farris = global.farris || {}, global.farris['header-group-editor'] = {}), global.uiModal, global.ng.core, global.uiTreetable, global.uiMessager, global.lodashEs, global.ng.forms, global.ng.common));
}(this, function (exports, uiModal, core, uiTreetable, uiMessager, lodashEs, forms, common) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SelectColumnsComponent = /** @class */ (function () {
        function SelectColumnsComponent(cd) {
            this.cd = cd;
            this.fields = [];
            this.checkeds = [];
            this.uncheckeds = [];
            this.childs = [];
            this.checkedPropertyName = '__checked__';
            // 候选列
            this.hxl = [];
        }
        /**
         * @return {?}
         */
        SelectColumnsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.initCheckedProperty();
            this.childs = Array.from(this.checkeds);
            if (this.groupEditorRef) {
                this.hxl = this.groupEditorRef.getHouXuanLie();
                if (this.hxl.length) {
                    this.hxl = this.hxl.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data; }));
                }
            }
        };
        /**
         * @private
         * @return {?}
         */
        SelectColumnsComponent.prototype.initCheckedProperty = /**
         * @private
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.checkeds) {
                this.checkeds = [];
                this.fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    f[_this.checkedPropertyName] = false;
                }));
            }
            else {
                this.fields.forEach((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) {
                    f[_this.checkedPropertyName] = _this.isChecked(f);
                }));
            }
        };
        /**
         * @param {?} f
         * @return {?}
         */
        SelectColumnsComponent.prototype.checkedCols = /**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            var _this = this;
            if (this.isDisabled(f)) {
                return;
            }
            /** @type {?} */
            var checked = this.isChecked(f);
            f[this.checkedPropertyName] = !checked;
            /** @type {?} */
            var _fields = this.fields.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !_this.isDisabled(n); }));
            this.checkeds = _fields.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n[_this.checkedPropertyName]; }));
            this.uncheckeds = _fields.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !n[_this.checkedPropertyName]; }));
            this.cd.detectChanges();
        };
        /**
         * @param {?} f
         * @return {?}
         */
        SelectColumnsComponent.prototype.isChecked = /**
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var chk = false;
            if (this.checkeds && this.checkeds.length) {
                chk = this.checkeds.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.id === f.id; })) > -1;
            }
            return chk;
        };
        /** 在其他分组中的列，禁用选择
         * 仅当前分组中的列及候选列中的项可以选择
         */
        /**
         * 在其他分组中的列，禁用选择
         * 仅当前分组中的列及候选列中的项可以选择
         * @param {?} f
         * @return {?}
         */
        SelectColumnsComponent.prototype.isDisabled = /**
         * 在其他分组中的列，禁用选择
         * 仅当前分组中的列及候选列中的项可以选择
         * @param {?} f
         * @return {?}
         */
        function (f) {
            /** @type {?} */
            var items = this.childs;
            if (this.hxl && this.hxl.length) {
                items = items.concat(this.hxl);
            }
            return !(items.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === f.id; })) > -1);
        };
        SelectColumnsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'select-columns',
                        template: "\n    <div style=\"margin: 10px 20px\" class=\"row\">\n        <div class=\"custom-control custom-checkbox col-4\" *ngFor=\"let f of fields\">\n            <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(f)\" [disabled]=\"isDisabled(f)\">\n            <label class=\"custom-control-label\" (click)=\"checkedCols(f)\" >{{ f.caption }}</label>\n        </div>\n    </div>\n    "
                    }] }
        ];
        /** @nocollapse */
        SelectColumnsComponent.ctorParameters = function () { return [
            { type: core.ChangeDetectorRef }
        ]; };
        SelectColumnsComponent.propDecorators = {
            fields: [{ type: core.Input }]
        };
        return SelectColumnsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GroupHeaderFormComponent = /** @class */ (function () {
        function GroupHeaderFormComponent() {
        }
        /**
         * @return {?}
         */
        GroupHeaderFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        GroupHeaderFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'group-header-form',
                        template: "\n        <input type=\"text\" [(ngModel)]=\"title\" style=\" margin: 10px; width: 280px; margin-top: 30px;\">\n    "
                    }] }
        ];
        /** @nocollapse */
        GroupHeaderFormComponent.ctorParameters = function () { return []; };
        GroupHeaderFormComponent.propDecorators = {
            title: [{ type: core.Input }]
        };
        return GroupHeaderFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HeaderGroupEditorComponent = /** @class */ (function () {
        function HeaderGroupEditorComponent(injector, modalService) {
            this.injector = injector;
            this.modalService = modalService;
            this.idField = 'id';
            this.treeData = [];
            this.selectedNode = new core.EventEmitter();
            // preview group columns
            this.groupCols = [];
            this.HOU_XUN_LIE_ID = '__HOU_XUN_LIE_ID__';
        }
        /**
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!this.treeData || !this.treeData.length) {
                this.initTreeData();
            }
            else {
                // 多表头中现存的字段ID集合
                /** @type {?} */
                var currentFieldIds_1 = this.treeData.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.fieldRef; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.fieldRef; }));
                // 新增的字段
                /** @type {?} */
                var newFields = this.fields.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return !currentFieldIds_1.includes(n.id); }));
                // 新增候选字段
                if (newFields && newFields.length) {
                    this.treeData = this.treeData.concat(newFields.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return {
                            fieldRef: n.id,
                            parent: '__HOU_XUN_LIE_ID__',
                            level: 1
                        };
                    })));
                }
                this.treeData = this.treeData.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    if (n.fieldRef) {
                        /** @type {?} */
                        var f = _this.fields.find((/**
                         * @param {?} m
                         * @return {?}
                         */
                        function (m) { return m.id === n.fieldRef; }));
                        if (f) {
                            return __assign({}, f, { parent: n.parent });
                        }
                    }
                    else {
                        return n;
                    }
                })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                this.treeData = this.convert2TreeNodes(this.treeData);
            }
            this.tt.removed.subscribe((/**
             * @param {?} rowNode
             * @return {?}
             */
            function (rowNode) {
                if (!rowNode.node.data.groupHeader) {
                    /** @type {?} */
                    var hxl = _this.getHxl();
                    if (!rowNode.parent) {
                        _this.treeData = _this.treeData.filter((/**
                         * @param {?} n
                         * @return {?}
                         */
                        function (n) { return n.data.id !== rowNode.id; }));
                    }
                    _this.tt.append(rowNode.node.data, hxl.node);
                }
            }));
        };
        /**
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.initTreeData = /**
         * @return {?}
         */
        function () {
            this.treeData = [{
                    data: { id: 'groupHeader_1', caption: '分组表头1', halign: 'left', groupHeader: true },
                    children: this.fields.map((/**
                     * @param {?} n
                     * @param {?} i
                     * @return {?}
                     */
                    function (n, i) {
                        n['index'] = i;
                        return {
                            data: n,
                            children: [],
                            visible: true
                        };
                    })),
                    expanded: true, visible: true
                }, {
                    data: { id: this.HOU_XUN_LIE_ID, caption: '(候选列)', houxunquNode: true },
                    children: [],
                    expanded: true
                }];
        };
        /**
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.getHxl = /**
         * @return {?}
         */
        function () {
            return this.tt.findRowNode(this.HOU_XUN_LIE_ID);
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.onMouseEnter = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'inline-block';
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.onMouseLeave = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'none';
        };
        // 移除列
        // 移除列
        /**
         * @param {?} event
         * @param {?} rowData
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.removeColumn = 
        // 移除列
        /**
         * @param {?} event
         * @param {?} rowData
         * @return {?}
         */
        function (event, rowData) {
            this.tt.remove(rowData.id);
        };
        // 编辑分组列
        // 编辑分组列
        /**
         * @param {?} rowData
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.editGroupName = 
        // 编辑分组列
        /**
         * @param {?} rowData
         * @return {?}
         */
        function (rowData) {
            /** @type {?} */
            var modalRef = this.showDialog((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var ghfRef = (/** @type {?} */ (modalRef.content));
                if (ghfRef.title) {
                    rowData.caption = ghfRef.title;
                    modalRef.close();
                }
                else {
                    alert('请输入名称！否则点取消。');
                }
            }));
            modalRef.content.title = rowData.caption;
        };
        /**
         * @private
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.generateGroupHeaderId = /**
         * @private
         * @return {?}
         */
        function () {
            return "groupHeader_" + new Date().getTime();
        };
        // 新增分组
        // 新增分组
        /**
         * @param {?} event
         * @param {?} rn
         * @param {?=} child
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.addNewGroup = 
        // 新增分组
        /**
         * @param {?} event
         * @param {?} rn
         * @param {?=} child
         * @return {?}
         */
        function (event, rn, child) {
            var _this = this;
            if (child === void 0) { child = false; }
            /** @type {?} */
            var modalRef = this.showDialog((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var ghfRef = (/** @type {?} */ (modalRef.content));
                if (ghfRef.title) {
                    if (!rn) {
                        _this.treeData.splice(0, 0, {
                            data: {
                                id: _this.generateGroupHeaderId(), halign: 'left',
                                caption: ghfRef.title, groupHeader: true
                            },
                            icon: 'f-icon f-icon-aggregate-fields',
                            children: []
                        });
                        _this.tt.updateSerializedValue();
                    }
                    else {
                        _this.createNewGroupHeader(rn, ghfRef.title, child);
                    }
                    modalRef.close();
                }
                else {
                    alert('请输入名称！否则点取消。');
                }
            }));
        };
        /**
         * @param {?} event
         * @param {?} col
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.setColumn2Group = /**
         * @param {?} event
         * @param {?} col
         * @return {?}
         */
        function (event, col) {
            /** @type {?} */
            var i = this.treeData.length - 1;
            this.treeData.splice(i, 0, { data: col, children: [] });
            /** @type {?} */
            var hxl = this.treeData.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.houxunquNode; }));
            hxl.children = hxl.children.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id !== col.id; }));
            this.tt.updateSerializedValue();
        };
        // 删除分组
        // 删除分组
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.removeGroup = 
        // 删除分组
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            /** @type {?} */
            var childs = this.tt.serializedValue.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.parents.indexOf(rowNode.id) > -1 && !n.node.data.groupHeader; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.node; }));
            this.treeData = this.treeData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id !== rowNode.id; }));
            this.tt.remove(rowNode.id);
            this.tt.appendChildren(childs, this.getHxl().node);
        };
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.setColumns = /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            var _this = this;
            /** @type {?} */
            var childs = rowNode.node.children ? rowNode.node.children.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data; })) : [];
            /** @type {?} */
            var modalRef = this.showSelectColumnsDialog((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var scRef = (/** @type {?} */ (modalRef.content));
                /** @type {?} */
                var needAppendNodes = scRef.checkeds;
                /** @type {?} */
                var hxl = _this.tt.findRowNode(_this.HOU_XUN_LIE_ID);
                hxl.node.children = (hxl.node.children || []).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return needAppendNodes.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === n.id; })) === -1; }));
                rowNode.node.children = rowNode.node.children || [];
                needAppendNodes = needAppendNodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return rowNode.node.children.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === n.id; })) === -1; }));
                if (needAppendNodes && needAppendNodes.length) {
                    _this.tt.appendChildren(needAppendNodes.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return {
                            data: n,
                            children: [],
                            expanded: true
                        };
                    })), rowNode.node);
                    _this.tt.expandNode(rowNode.id);
                }
                if (scRef.uncheckeds && scRef.uncheckeds.length) {
                    // hxl.node.children =  [];
                    /** @type {?} */
                    var hxlCols = scRef.uncheckeds.map((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) {
                        return {
                            data: n,
                            children: []
                        };
                    }));
                    hxl.node.children = hxl.node.children.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return scRef.uncheckeds.findIndex((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.id === n.id; })) === -1; }));
                    _this.tt.appendChildren(hxlCols, hxl.node);
                }
                modalRef.close();
            }), childs);
        };
        /**
         * @param {?=} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.hasGroupHeader = /**
         * @param {?=} rowNode
         * @return {?}
         */
        function (rowNode) {
            if (rowNode === void 0) { rowNode = null; }
            if (!rowNode) {
                return this.treeData.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.groupHeader; })).length;
            }
            else {
                return rowNode.node.children.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data.groupHeader; })).length;
            }
        };
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.moveUp = /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            /** @type {?} */
            var data = this.treeData;
            if (rowNode.parent) {
                data = rowNode.parent.children;
            }
            /** @type {?} */
            var index = data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id === rowNode.id; }));
            if (index !== 0) {
                /** @type {?} */
                var tempArr = data.splice(index, 1);
                data.splice.apply(data, __spread([index - 1, 0], tempArr));
                this.tt.updateSerializedValue();
            }
        };
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.moveDown = /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            /** @type {?} */
            var data = this.treeData;
            if (rowNode.parent) {
                data = rowNode.parent.children;
            }
            /** @type {?} */
            var index = data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id === rowNode.id; }));
            /** @type {?} */
            var len = data.length;
            if (index !== len - 2) {
                /** @type {?} */
                var tempArr = data.splice(index, 1);
                data.splice.apply(data, __spread([index + 1, 0], tempArr));
                this.tt.updateSerializedValue();
            }
            else {
                this.moveBottom(event, rowNode);
            }
        };
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.moveTop = /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            /** @type {?} */
            var data = this.treeData;
            if (rowNode.parent) {
                data = rowNode.parent.children;
            }
            /** @type {?} */
            var index = data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id === rowNode.id; }));
            data.unshift(rowNode.node);
            data.splice(index + 1, 1);
            this.tt.updateSerializedValue();
        };
        /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.moveBottom = /**
         * @param {?} event
         * @param {?} rowNode
         * @return {?}
         */
        function (event, rowNode) {
            /** @type {?} */
            var data = this.treeData;
            if (rowNode.parent) {
                data = rowNode.parent.children;
            }
            /** @type {?} */
            var index = data.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.id === rowNode.id; }));
            data.push(rowNode.node);
            data.splice(index, 1);
            if (!rowNode.parent) {
                this.moveUp(event, rowNode);
            }
            else {
                this.tt.updateSerializedValue();
            }
        };
        /** 获取候选列 */
        /**
         * 获取候选列
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.getHouXuanLie = /**
         * 获取候选列
         * @return {?}
         */
        function () {
            return this.treeData.find((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.houxunquNode; })).children;
        };
        /**
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.getAllNodes = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var hxl = this.getHouXuanLie();
            return this.tt.serializedValue.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                return !n.node.data.houxunquNode && hxl.findIndex((/**
                 * @param {?} k
                 * @return {?}
                 */
                function (k) { return k.data.id === n.id; })) === -1;
            }));
        };
        /**
         * @private
         * @param {?} data
         * @param {?=} parentId
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.convert2TreeNodes = /**
         * @private
         * @param {?} data
         * @param {?=} parentId
         * @return {?}
         */
        function (data, parentId) {
            var _this = this;
            if (parentId === void 0) { parentId = null; }
            if (data.length) {
                /** @type {?} */
                var nodes = data.filter((/**
                 * @param {?} v
                 * @return {?}
                 */
                function (v) { return v.parent === parentId; })).filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n; }));
                return nodes.map((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    /** @type {?} */
                    var node = {
                        data: item,
                        children: [],
                        expanded: true
                    };
                    node.children = _this.convert2TreeNodes(data, item.id);
                    if (node.data.groupHeader && node.children.length === 0) {
                        node.icon = 'f-icon f-icon-aggregate-fields';
                    }
                    return node;
                }));
            }
            return [];
        };
        /**
         * @private
         * @param {?} nodes
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.flatNodes = /**
         * @private
         * @param {?} nodes
         * @return {?}
         */
        function (nodes) {
            var _this = this;
            /** @type {?} */
            var r = {};
            nodes.forEach((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                r[e.data['id']] = e.data;
                if (e.children && e.children.length) {
                    r = Object.assign(r, _this.flatNodes(e.children));
                }
            }));
            return r;
        };
        /**
         * @param {?} treeNodes
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.convert2Array = /**
         * @param {?} treeNodes
         * @return {?}
         */
        function (treeNodes) {
            /** @type {?} */
            var r = [];
            /** @type {?} */
            var maxBy = (/**
             * @param {?} arr
             * @param {?} fn
             * @return {?}
             */
            function (arr, fn) { return Math.max.apply(Math, __spread(arr.map(typeof fn === 'function' ? fn : (/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return val[fn]; })))); });
            /** @type {?} */
            var maxlevel = maxBy(treeNodes, (/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.level; }));
            var _loop_1 = function (i) {
                r.push(treeNodes.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.level === i; })).map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    /** @type {?} */
                    var data = n.node.data;
                    return {
                        colspan: (n.node.children ? treeNodes.filter((/**
                         * @param {?} k
                         * @return {?}
                         */
                        function (k) { return k.parents.indexOf(n.id) > -1 && k.id.indexOf('groupHeader_') == -1; })).length : 1) || 1,
                        rowspan: (n.node.children && n.node.children.length > 0) ? 1 : (maxlevel - n.level + 1),
                        title: data.caption,
                        field: data.dataField,
                        width: (data.size ? data.size.width : 100),
                        halign: data.halign,
                        align: data.align,
                        id: n.id
                    };
                })));
            };
            for (var i = 0; i <= maxlevel; i++) {
                _loop_1(i);
            }
            return r;
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.onTreeSelected = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.selectedNode.emit($event.node);
        };
        /**
         * @private
         * @param {?} rn
         * @param {?} title
         * @param {?=} child
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.createNewGroupHeader = /**
         * @private
         * @param {?} rn
         * @param {?} title
         * @param {?=} child
         * @return {?}
         */
        function (rn, title, child) {
            if (child === void 0) { child = false; }
            /** @type {?} */
            var ghid = this.generateGroupHeaderId();
            /** @type {?} */
            var data = { id: ghid, caption: title, groupHeader: true, halign: 'left' };
            /** @type {?} */
            var gh = {
                data: data,
                children: [],
                expanded: true,
                visible: true,
                icon: 'f-icon f-icon-aggregate-fields',
            };
            if (!child) {
                if (!rn.parent) {
                    /** @type {?} */
                    var i = this.treeData.findIndex((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data.id === rn.id; })) + 1;
                    this.treeData.splice(i, 0, gh);
                    this.treeData = this.treeData.slice();
                }
                else {
                    this.tt.appendChildren([gh], rn.parent);
                }
            }
            else {
                this.tt.appendChildren([gh], rn.node);
            }
        };
        /**
         * @private
         * @param {?} okCallback
         * @param {?} childs
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.showSelectColumnsDialog = /**
         * @private
         * @param {?} okCallback
         * @param {?} childs
         * @return {?}
         */
        function (okCallback, childs) {
            /** @type {?} */
            var modalRef = this.modalService.show(SelectColumnsComponent, {
                title: '设置分组列',
                width: 500,
                height: 300,
                showMaxButton: false,
                resizable: false,
                initialState: {
                    fields: this.fields,
                    checkeds: childs,
                    groupEditorRef: this
                },
                buttons: [
                    {
                        text: '确定',
                        cls: 'btn btn-primary',
                        handle: okCallback
                    },
                    {
                        text: '取消',
                        cls: 'btn btn-secondary',
                        handle: (/**
                         * @return {?}
                         */
                        function () {
                            modalRef.close();
                        })
                    }
                ]
            });
            return modalRef;
        };
        /**
         * @private
         * @param {?} okCallback
         * @return {?}
         */
        HeaderGroupEditorComponent.prototype.showDialog = /**
         * @private
         * @param {?} okCallback
         * @return {?}
         */
        function (okCallback) {
            /** @type {?} */
            var modalRef = this.modalService.show(GroupHeaderFormComponent, {
                title: '分组列名称',
                width: 300,
                height: 200,
                showMaxButton: false,
                resizable: false,
                initialState: {
                    title: '分组表头'
                },
                buttons: [
                    {
                        text: '确定',
                        cls: 'btn btn-primary',
                        handle: okCallback
                    },
                    {
                        text: '取消',
                        cls: 'btn btn-secondary',
                        handle: (/**
                         * @return {?}
                         */
                        function () {
                            modalRef.close();
                        })
                    }
                ]
            });
            return modalRef;
        };
        HeaderGroupEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'header-group-editor',
                        template: "\r\n\r\n\r\n<farris-treetable #tt [data]=\"treeData\" [idField]=\"idField\" [striped]=\"false\"\r\n(nodeSelected)=\"onTreeSelected($event)\"\r\n[singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n[collapseIcon]=\"'f-icon f-icon-file-folder-close'\" [expandIcon]=\"'f-icon f-icon-file-folder-open'\"\r\n>\r\n    <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\" >\r\n        <tr #row=\"row\" [selectRow]=\"rowNode\" [dblclick]=\"true\" (mouseenter)=\"onMouseEnter($event)\"\r\n                [selectRowDisabled]=\"rowData['houxunquNode']\"\r\n             (mouseleave)=\"onMouseLeave($event)\">\r\n            <td style=\"border: 0;\" [style.color]=\"row.selectRowDisabled? '#a6a6a6': '#333'\" [style.height.px]=\"34\" [style.lingHeight.px]=\"34\">\r\n                <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                <span style=\"vertical-align: middle;\">{{ rowData['caption'] }}</span>\r\n                <div class=\"rbtn\" style=\" float: right;  display:none; cursor: pointer\" >\r\n                    <!-- \u81EA\u5B9A\u4E49\u8868\u5934 -->\r\n                    <ng-container  *ngIf=\"rowData['groupHeader']\">\r\n                        <move-buttons [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" title=\"\u589E\u52A0\u540C\u7EA7\" (click)=\"addNewGroup($event, rowNode)\">\r\n                            <span class=\"f-icon f-icon-plus\"></span>\r\n                        </button>\r\n                        <button class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" title=\"\u589E\u52A0\u4E0B\u7EA7\" (click)=\"addNewGroup($event, rowNode, true)\">\r\n                            <span class=\"f-icon f-icon-plus-outline\"></span>\r\n                        </button>\r\n                        \r\n                        <!-- <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\"  (click)=\"editGroupName(rowData)\" title=\"\u4FEE\u6539\">\r\n                            <span class=\"f-icon f-icon-edit\"></span>\r\n                        </button> -->\r\n\r\n                        <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" (click)=\"setColumns($event, rowNode)\" title=\"\u5217\u8BBE\u7F6E\">\r\n                            <span class=\"f-icon f-icon-table-insert\"></span>\r\n                        </button>\r\n\r\n                        <button class=\"btn btn-light\" style=\"padding: 2px 5px\" title=\"\u5220\u9664\u5206\u7EC4\" (click)=\"removeGroup($event, rowNode)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                        \r\n                    </ng-container>\r\n\r\n                    <!-- \u6570\u636E\u5B57\u6BB5\u8868\u5934 -->\r\n                    <ng-container *ngIf=\"!rowNode.parent && !rowData['houxunquNode'] && !rowData['groupHeader']\">\r\n                        <move-buttons  [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button class=\"btn btn-light\"  style=\"padding: 2px 5px\" title=\"\u5C06\u6B64\u5B57\u6BB5\u5728\u6B64\u5206\u7EC4\u4E2D\u79FB\u9664\" (click)=\"removeColumn($event, rowData)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                    </ng-container>\r\n                    \r\n                    <!-- \u5019\u9009\u5217\u4E2D\u6309\u94AE -->\r\n                    <button title=\"\u589E\u52A0\u8868\u5934\" class=\"btn btn-light\"  style=\"padding: 2px 5px\" *ngIf=\"rowData['houxunquNode']\" (click)=\"addNewGroup($event, null)\">\r\n                        <span class=\"f-icon f-icon-plus\"></span>\r\n                    </button>\r\n\r\n                    <button class=\"btn btn-light\" title=\"\u8BBE\u4E3A\u8868\u5934\" style=\"padding: 2px 5px\" *ngIf=\"rowNode.parent && rowNode.parent.data['houxunquNode']\" (click)=\"setColumn2Group($event, rowData)\">\r\n                        <span class=\"f-icon f-icon-table-row-insert-above\"></span>\r\n                    </button>\r\n\r\n                    <!-- \u8868\u5934\u4E2D\u5B57\u6BB5\u6309\u94AE -->\r\n                    <ng-container *ngIf=\"!rowData['groupHeader'] && rowNode.parent && !rowNode.parent.data['houxunquNode']\">\r\n                        <move-buttons  [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button class=\"btn btn-light\"  style=\"padding: 2px 5px\" title=\"\u5C06\u6B64\u5B57\u6BB5\u5728\u6B64\u5206\u7EC4\u4E2D\u79FB\u9664\" (click)=\"removeColumn($event, rowData)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                    </ng-container>\r\n                </div>\r\n\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n</farris-treetable>\r\n",
                        encapsulation: core.ViewEncapsulation.None,
                        styles: ["\n    .farris-treetable .farris-treetable-tbody td .treetable-toggler {\n        vertical-align: middle;\n    }\n    .farris-treetable .farris-treetable-tbody td .treenode-icon {\n        margin-right: 2px\n    }\n    "]
                    }] }
        ];
        /** @nocollapse */
        HeaderGroupEditorComponent.ctorParameters = function () { return [
            { type: core.Injector },
            { type: uiModal.BsModalService }
        ]; };
        HeaderGroupEditorComponent.propDecorators = {
            fields: [{ type: core.Input }],
            idField: [{ type: core.Input }],
            treeData: [{ type: core.Input }],
            tt: [{ type: core.ViewChild, args: ['tt',] }],
            selectedNode: [{ type: core.Output }]
        };
        return HeaderGroupEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ColumnGroupEditorComponent = /** @class */ (function () {
        function ColumnGroupEditorComponent(render, messagerSer, injector, modalSer) {
            this.render = render;
            this.messagerSer = messagerSer;
            this.injector = injector;
            this.modalSer = modalSer;
            this.editorParams = {};
            this.cls = 'f-utils-absolute-all';
            this.closeModal = new core.EventEmitter();
            // 模态框确定后关闭，并传递参数
            this.submitModal = new core.EventEmitter();
            this.previewGroupColumns = [];
            this.columnsCode = [];
            this.btnTopActive = true;
            this.btnBottomActive = true;
            this.isOpen = false;
            this.fieldInfo = {};
            this.modalConfig = {
                title: '多表头编辑器',
                width: 700,
                height: 500,
                showButtons: true
            };
        }
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            if (!this.fields || !this.fields.length) {
                if (this.editorParams && this.editorParams.fields && this.editorParams.fields.length) {
                    this.fields = this.editorParams.fields;
                }
                else {
                    console.warn('Pleasy Set Datagrid\'s fields Give it 2 me.');
                }
            }
        };
        /**
         * @param {?} $event
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.onTreenodeSelect = /**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            this.fieldInfo = $event.data;
        };
        /**
         * @private
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.setPreviewColumns = /**
         * @private
         * @return {?}
         */
        function () {
            /** @type {?} */
            var treeNodes = this.hge.getAllNodes();
            this.previewGroupColumns = this.hge.convert2Array(treeNodes);
        };
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.showPreview = /**
         * @return {?}
         */
        function () {
            this.setPreviewColumns();
            if (!this.isOpen) {
                this.isOpen = true;
            }
        };
        /**
         * @param {?=} event
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.closePreview = /**
         * @param {?=} event
         * @return {?}
         */
        function (event) {
            this.isOpen = false;
            if (event) {
                event.stopPropagation();
            }
        };
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.resetGroupColumns = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.messagerSer.question('表头分组重置后需要重新设置。确定要重置为初始状态吗？', (/**
             * @return {?}
             */
            function () {
                _this.hge.initTreeData();
            }));
        };
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.cancle = /**
         * @return {?}
         */
        function () {
            this.closeModal.emit();
        };
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.ok = /**
         * @return {?}
         */
        function () {
            this.setPreviewColumns();
            /** @type {?} */
            var flatgroupcols = lodashEs.flatten(this.previewGroupColumns);
            /** @type {?} */
            var value = this.hge.tt.serializedValue.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var parent = n.parent ? n.parent.data.id : null;
                if (n.node.data.groupHeader || n.node.data.houxunquNode) {
                    /** @type {?} */
                    var _col = flatgroupcols.find((/**
                     * @param {?} c
                     * @return {?}
                     */
                    function (c) { return c.id === n.id; }));
                    /** @type {?} */
                    var item = __assign({}, n.node.data, { parent: parent, level: n.level });
                    if (_col) {
                        return Object.assign(item, { rowspan: _col ? _col.rowspan : 1,
                            colspan: _col ? _col.colspan : 1 });
                    }
                    return item;
                }
                else {
                    return {
                        fieldRef: n.node.data.id,
                        parent: parent,
                        level: n.level
                    };
                }
            }));
            this.submitModal.emit({ value: value });
        };
        /**
         * @return {?}
         */
        ColumnGroupEditorComponent.prototype.showCode = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var treeNodes = this.hge.getAllNodes();
            this.columnsCode = this.hge.convert2Array(treeNodes);
            this.modalSer.show(this.codeTemplate, {
                title: '表头分组代码',
                width: 500, height: 400,
                resizable: false,
                showMaxButton: false,
                showButtons: false
            });
        };
        ColumnGroupEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'column-group-editor',
                        template: "\r\n<div class=\"d-flex flex-column\" style=\"height: 100%\">\r\n        <div region=\"north\" class=\"north\" style=\"height: 40px;min-height: 40px;border-bottom: 1px solid #c8c8c8; line-height: 36px;\">\r\n            <button class=\"btn btn-primary mr-1 ml-2\" (click)=\"resetGroupColumns()\">\r\n                <span class=\"f-icon f-icon-reset-sm mr-1\"></span>\u91CD\u7F6E\r\n            </button>\r\n            <button class=\"btn btn-primary mr-1\" (click)=\"showPreview()\">\r\n                <span class=\"f-icon f-icon-preview  mr-1\"></span>\u6548\u679C\u9884\u89C8\r\n            </button>\r\n            <button class=\"btn btn-primary\" (click)=\"showCode()\">\r\n                <span class=\"f-icon f-icon-source-code mr-1\"></span>\u83B7\u53D6\u4EE3\u7801\r\n            </button>\r\n        </div>\r\n        <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;height: 100%;\">\r\n            <div class=\"d-flex flex-row flex-fill\" style=\"height: 100%\" >\r\n                <div region=\"center\" class=\"center flex-fill\" style=\"overflow:auto;\">\r\n                    <header-group-editor #hge [fields]=\"fields\" [treeData]=\"value\" (selectedNode)=\"onTreenodeSelect($event)\"></header-group-editor>\r\n                </div>\r\n                <div region=\"east\" class=\"east property-column\">\r\n\r\n                    <div style=\"padding: 10px\">\r\n                            <div class=\"farris-group-wrap\">\r\n                                <div class=\"form-group farris-form-group\">\r\n                                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                        <span class=\"farris-label-text\">\u8868\u5934\u540D\u79F0</span>\r\n                                    </label>\r\n                                    <div class=\"farris-input-wrap\">\r\n                                        <input type=\"input\" [disabled]=\"!fieldInfo.groupHeader\" class=\"form-control\" [(ngModel)]=\"fieldInfo.caption\">\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"farris-group-wrap\" *ngIf=\"fieldInfo.groupHeader\">\r\n                                <div class=\"form-group farris-form-group\">\r\n                                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                        <span class=\"farris-label-text\">\u8868\u5934\u5BF9\u9F50\u65B9\u5F0F</span>\r\n                                    </label>\r\n                                    <div class=\"farris-input-wrap\">\r\n                                        <select class=\"form-control\" [(ngModel)]=\"fieldInfo.halign\">\r\n                                            <option value=\"left\">\u5DE6\u5BF9\u9F50</option>\r\n                                            <option value=\"center\">\u5C45\u4E2D\u5BF9\u9F50</option>\r\n                                            <option value=\"right\">\u53F3\u5BF9\u9F50</option>\r\n                                        </select>\r\n                                        <!-- <select class=\"form-control\" *ngIf=\"!fieldInfo.groupHeader\" [(ngModel)]=\"fieldInfo.hAlign\">\r\n                                            <option value=\"left\">\u5DE6\u5BF9\u9F50</option>\r\n                                            <option value=\"center\">\u5C45\u4E2D\u5BF9\u9F50</option>\r\n                                            <option value=\"right\">\u53F3\u5BF9\u9F50</option>\r\n                                        </select> -->\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                     \r\n                             <!-- <div class=\"farris-group-wrap\">\r\n                                <div class=\"form-group farris-form-group\">\r\n                                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                        <span class=\"farris-label-text\">\u6570\u636E\u5BF9\u9F50\u65B9\u5F0F</span>\r\n                                    </label>\r\n                                    <div class=\"farris-input-wrap\">\r\n                                        <select class=\"form-control\" [(ngModel)]=\"fieldInfo.align\">\r\n                                            <option value=\"left\">\u5DE6\u5BF9\u9F50</option>\r\n                                            <option value=\"center\">\u5C45\u4E2D\u5BF9\u9F50</option>\r\n                                            <option value=\"right\">\u53F3\u5BF9\u9F50</option>\r\n                                        </select>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            <div class=\"farris-group-wrap\">\r\n                                <div class=\"form-group farris-form-group\">\r\n                                    <label for=\"hpinput01\" class=\"col-form-label\">\r\n                                        <span class=\"farris-label-text\">\u5BBD\u5EA6</span>\r\n                                    </label>\r\n                                    <div class=\"farris-input-wrap\">\r\n                                        <input type=\"input\" class=\"form-control\" [(ngModel)]=\"fieldInfo.size\">\r\n                                    </div>\r\n                                </div>\r\n                            </div> -->\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n       \r\n        <div region=\"south\" class=\"south\" [class.preview-open]=\"isOpen\" #preview>\r\n\r\n            <div class=\"d-flex flex-column flex-fill\" style=\"height: 100%;\">\r\n                <div region=\"north\" class=\"north preview-title\" (click)=\"isOpen = !isOpen\">\r\n                   <span class=\"text\" >\u6548\u679C\u9884\u89C8</span> \r\n                   <div class=\"close-btn\" (click)=\"closePreview($event)\">\r\n                        <span class=\"f-icon f-icon-close\"></span>\r\n                   </div>\r\n                </div>\r\n                <div region=\"center\" class=\"center flex-fill preview-container\">\r\n                    <table>\r\n\r\n                        <tr  *ngFor=\"let cls of previewGroupColumns\" style=\"height: 36px\">\r\n                            <ng-container *ngFor=\"let c of cls\">\r\n                                <ng-container *ngIf=\"c.colspan > 1\">\r\n                                    <td [attr.colspan]=\"c.colspan\" [attr.align]=\"c.halign || 'left'\">{{ c.title }}</td>\r\n                                </ng-container>\r\n\r\n                                <ng-container *ngIf=\"c.colspan == 1\">\r\n                                    <td [style.width.px]=\"c.width\"  [attr.align]=\"c.halign || 'left'\" [attr.rowspan]=\"c.rowspan || 1\">{{ c.title }}</td>\r\n                                </ng-container>\r\n                            </ng-container>\r\n                        </tr>\r\n                        \r\n\r\n                    </table>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n       \r\n</div>\r\n\r\n<ng-template #dlgFooter>\r\n    <div class=\"btns\">\r\n        <button  type=\"button\"  class=\"btn btn-primary btn-lg px-3\" (click)=\"ok()\" > \u786E\u5B9A </button>\r\n        &nbsp;&nbsp;\r\n        <button type=\"button\" class=\"btn btn-secondary btn-lg px-3\" (click)=\"cancle()\" > \u53D6\u6D88 </button> \r\n    </div>\r\n</ng-template>\r\n\r\n<ng-template #code>\r\n<textarea name=\"group-columns-code\" class=\"form-control\" rows=17>\r\n{{ columnsCode | json }}\r\n</textarea>\r\n</ng-template>\r\n\r\n\r\n",
                        styles: ["\n        .center::-webkit-scrollbar { width: 5px; height: 5px}\n        .south::-webkit-scrollbar { width: 5px; height: 5px }\n        .south {\n            height: 40px;\n            min-height: 40px;\n            overflow: hidden;\n            border-top: 1px solid #c8c8c8;\n            background: #F3F8FF;\n            transition: height 0.5s;\n            flex-shrink: 0!important;;\n        }\n        .preview-open {\n            height: 300px;\n        }\n        .preview-container {\n            flex-shrink: 0!important;overflow:auto\n        }\n        .preview-title {\n            height:36px;min-height: 36px; background: #F3F8FF; cursor:pointer;\n        }\n        .preview-title .text {\n            line-height: 36px;font-size: 16px;padding-left: 10px;\n        }\n        .preview-title button {\n            float: right;\n            line-height: 40px;\n            margin-right: 10px;\n        }\n        .preview-container table{\n            width: max-content; margin: 5px; background-color: #efefef; border-color: #adadad;\n        }\n        .preview-container table td{border: 1px solid #c2c2c2;}\n\n        .east.property-column {\n            width: 300px; min-width:260px;border-left: 1px solid #c8c8c8;overflow: auto;background:#F3F8FF\n        }\n        .close-btn {\n            display: inline-block;\n            float: right;\n            line-height: 36px;\n            margin-right: 10px;\n            width: 36px;\n            color: #ccc;\n            text-align: center;\n        }\n        .close-btn:hover {\n            color: red;\n        }\n        "]
                    }] }
        ];
        /** @nocollapse */
        ColumnGroupEditorComponent.ctorParameters = function () { return [
            { type: core.Renderer2 },
            { type: uiMessager.MessagerService },
            { type: core.Injector },
            { type: uiModal.BsModalService }
        ]; };
        ColumnGroupEditorComponent.propDecorators = {
            editorParams: [{ type: core.Input }],
            fields: [{ type: core.Input }],
            value: [{ type: core.Input }],
            cls: [{ type: core.HostBinding, args: ['class',] }],
            closeModal: [{ type: core.Output }],
            submitModal: [{ type: core.Output }],
            hge: [{ type: core.ViewChild, args: ['hge',] }],
            modalFooter: [{ type: core.ViewChild, args: ['dlgFooter',] }],
            previewEl: [{ type: core.ViewChild, args: ['preview',] }],
            codeTemplate: [{ type: core.ViewChild, args: ['code',] }]
        };
        return ColumnGroupEditorComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HeaderGroupEditorService = /** @class */ (function () {
        function HeaderGroupEditorService() {
        }
        HeaderGroupEditorService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        HeaderGroupEditorService.ctorParameters = function () { return []; };
        /** @nocollapse */ HeaderGroupEditorService.ngInjectableDef = core.defineInjectable({ factory: function HeaderGroupEditorService_Factory() { return new HeaderGroupEditorService(); }, token: HeaderGroupEditorService, providedIn: "root" });
        return HeaderGroupEditorService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MoveButtonsComponent = /** @class */ (function () {
        function MoveButtonsComponent(hge) {
            this.hge = hge;
        }
        /**
         * @return {?}
         */
        MoveButtonsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () { };
        MoveButtonsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'move-buttons',
                        template: "\n    <button class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" (click)=\"hge.moveTop($event, rowNode)\" title=\"\u7F6E\u9876\">\n        <span class=\"f-icon f-icon-roofing\"></span>\n    </button>\n    <button class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" (click)=\"hge.moveUp($event, rowNode)\" title=\"\u4E0A\u79FB\">\n        <span class=\"f-icon f-icon-arrow-chevron-up\"></span>\n    </button>\n    <button class=\"btn btn-light mr-1\"  style=\"padding: 2px 5px\" (click)=\"hge.moveDown($event, rowNode)\" title=\"\u4E0B\u79FB\">\n        <span class=\"f-icon f-icon-arrow-chevron-down\"></span>\n    </button>\n    <button class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" (click)=\"hge.moveBottom($event, rowNode)\" title=\"\u7F6E\u5E95\">\n        <span class=\"f-icon f-icon-bottomsetting\"></span>\n    </button>\n    "
                    }] }
        ];
        /** @nocollapse */
        MoveButtonsComponent.ctorParameters = function () { return [
            { type: HeaderGroupEditorComponent }
        ]; };
        MoveButtonsComponent.propDecorators = {
            rowNode: [{ type: core.Input }]
        };
        return MoveButtonsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var HeaderGroupEditorModule = /** @class */ (function () {
        function HeaderGroupEditorModule() {
        }
        HeaderGroupEditorModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            HeaderGroupEditorComponent,
                            GroupHeaderFormComponent,
                            SelectColumnsComponent,
                            ColumnGroupEditorComponent,
                            MoveButtonsComponent
                        ],
                        imports: [
                            common.CommonModule,
                            forms.FormsModule,
                            uiMessager.MessagerModule.forRoot(),
                            uiTreetable.TreeTableModule,
                            uiModal.ModalModule.forRoot()
                        ],
                        entryComponents: [
                            GroupHeaderFormComponent,
                            SelectColumnsComponent
                        ],
                        exports: [HeaderGroupEditorComponent, ColumnGroupEditorComponent]
                    },] }
        ];
        return HeaderGroupEditorModule;
    }());

    exports.ColumnGroupEditorComponent = ColumnGroupEditorComponent;
    exports.GroupHeaderFormComponent = GroupHeaderFormComponent;
    exports.HeaderGroupEditorComponent = HeaderGroupEditorComponent;
    exports.HeaderGroupEditorModule = HeaderGroupEditorModule;
    exports.HeaderGroupEditorService = HeaderGroupEditorService;
    exports.MoveButtonsComponent = MoveButtonsComponent;
    exports.SelectColumnsComponent = SelectColumnsComponent;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=farris-header-group-editor.umd.js.map
