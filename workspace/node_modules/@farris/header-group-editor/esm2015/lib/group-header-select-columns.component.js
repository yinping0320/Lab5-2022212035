/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef } from '@angular/core';
export class SelectColumnsComponent {
    /**
     * @param {?} cd
     */
    constructor(cd) {
        this.cd = cd;
        this.fields = [];
        this.checkeds = [];
        this.uncheckeds = [];
        this.childs = [];
        this.checkedPropertyName = '__checked__';
        // 候选列
        this.hxl = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.initCheckedProperty();
        this.childs = Array.from(this.checkeds);
        if (this.groupEditorRef) {
            this.hxl = this.groupEditorRef.getHouXuanLie();
            if (this.hxl.length) {
                this.hxl = this.hxl.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                n => n.data));
            }
        }
    }
    /**
     * @private
     * @return {?}
     */
    initCheckedProperty() {
        if (!this.checkeds) {
            this.checkeds = [];
            this.fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f[this.checkedPropertyName] = false;
            }));
        }
        else {
            this.fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            f => {
                f[this.checkedPropertyName] = this.isChecked(f);
            }));
        }
    }
    /**
     * @param {?} f
     * @return {?}
     */
    checkedCols(f) {
        if (this.isDisabled(f)) {
            return;
        }
        /** @type {?} */
        const checked = this.isChecked(f);
        f[this.checkedPropertyName] = !checked;
        /** @type {?} */
        const _fields = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !this.isDisabled(n)));
        this.checkeds = _fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => n[this.checkedPropertyName]));
        this.uncheckeds = _fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        n => !n[this.checkedPropertyName]));
        this.cd.detectChanges();
    }
    /**
     * @param {?} f
     * @return {?}
     */
    isChecked(f) {
        /** @type {?} */
        let chk = false;
        if (this.checkeds && this.checkeds.length) {
            chk = this.checkeds.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            n => n.id === f.id)) > -1;
        }
        return chk;
    }
    /**
     * 在其他分组中的列，禁用选择
     * 仅当前分组中的列及候选列中的项可以选择
     * @param {?} f
     * @return {?}
     */
    isDisabled(f) {
        /** @type {?} */
        let items = this.childs;
        if (this.hxl && this.hxl.length) {
            items = items.concat(this.hxl);
        }
        return !(items.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        n => n.id === f.id)) > -1);
    }
}
SelectColumnsComponent.decorators = [
    { type: Component, args: [{
                selector: 'select-columns',
                template: `
    <div style="margin: 10px 20px" class="row">
        <div class="custom-control custom-checkbox col-4" *ngFor="let f of fields">
            <input type="checkbox" class="custom-control-input" [checked]="isChecked(f)" [disabled]="isDisabled(f)">
            <label class="custom-control-label" (click)="checkedCols(f)" >{{ f.caption }}</label>
        </div>
    </div>
    `
            }] }
];
/** @nocollapse */
SelectColumnsComponent.ctorParameters = () => [
    { type: ChangeDetectorRef }
];
SelectColumnsComponent.propDecorators = {
    fields: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    SelectColumnsComponent.prototype.fields;
    /** @type {?} */
    SelectColumnsComponent.prototype.checkeds;
    /** @type {?} */
    SelectColumnsComponent.prototype.uncheckeds;
    /** @type {?} */
    SelectColumnsComponent.prototype.childs;
    /** @type {?} */
    SelectColumnsComponent.prototype.groupEditorRef;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.checkedPropertyName;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.hxl;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtaGVhZGVyLXNlbGVjdC1jb2x1bW5zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaGVhZGVyLWdyb3VwLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9ncm91cC1oZWFkZXItc2VsZWN0LWNvbHVtbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQWE1RSxNQUFNLE9BQU8sc0JBQXNCOzs7O0lBVS9CLFlBQW9CLEVBQXFCO1FBQXJCLE9BQUUsR0FBRixFQUFFLENBQW1CO1FBVGhDLFdBQU0sR0FBRyxFQUFFLENBQUM7UUFFckIsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLGVBQVUsR0FBRyxFQUFFLENBQUM7UUFDaEIsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUVKLHdCQUFtQixHQUFHLGFBQWEsQ0FBQzs7UUFFcEMsUUFBRyxHQUFHLEVBQUUsQ0FBQztJQUM0QixDQUFDOzs7O0lBRTlDLFFBQVE7UUFDSixJQUFJLENBQUMsbUJBQW1CLEVBQUUsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhDLElBQUksSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNyQixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxFQUFFLENBQUM7WUFDL0MsSUFBSSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRTtnQkFDakIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUc7Ozs7Z0JBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFDLENBQUM7YUFDeEM7U0FDSjtJQUNMLENBQUM7Ozs7O0lBRU8sbUJBQW1CO1FBQ3ZCLElB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cm91cEVkaXRvckNvbXBvbmVudCB9IGZyb20gJy4vaGVhZGVyLWdyb3VwLWVkaXRvci5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBDb21wb25lbnQsIE9uSW5pdCwgSW5wdXQsIENoYW5nZURldGVjdG9yUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICAgIHNlbGVjdG9yOiAnc2VsZWN0LWNvbHVtbnMnLFxyXG4gICAgdGVtcGxhdGU6IGBcclxuICAgIDxkaXYgc3R5bGU9XCJtYXJnaW46IDEwcHggMjBweFwiIGNsYXNzPVwicm93XCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImN1c3RvbS1jb250cm9sIGN1c3RvbS1jaGVja2JveCBjb2wtNFwiICpuZ0Zvcj1cImxldCBmIG9mIGZpZWxkc1wiPlxyXG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgY2xhc3M9XCJjdXN0b20tY29udHJvbC1pbnB1dFwiIFtjaGVja2VkXT1cImlzQ2hlY2tlZChmKVwiIFtkaXNhYmxlZF09XCJpc0Rpc2FibGVkKGYpXCI+XHJcbiAgICAgICAgICAgIDxsYWJlbCBjbGFzcz1cImN1c3RvbS1jb250cm9sLWxhYmVsXCIgKGNsaWNrKT1cImNoZWNrZWRDb2xzKGYpXCIgPnt7IGYuY2FwdGlvbiB9fTwvbGFiZWw+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICA8L2Rpdj5cclxuICAgIGBcclxufSlcclxuZXhwb3J0IGNsYXNzIFNlbGVjdENvbHVtbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xyXG4gICAgQElucHV0KCkgZmllbGRzID0gW107XHJcblxyXG4gICAgY2hlY2tlZHMgPSBbXTtcclxuICAgIHVuY2hlY2tlZHMgPSBbXTtcclxuICAgIGNoaWxkcyA9IFtdO1xyXG4gICAgZ3JvdXBFZGl0b3JSZWY6IEhlYWRlckdyb3VwRWRpdG9yQ29tcG9uZW50O1xyXG4gICAgcHJpdmF0ZSBjaGVja2VkUHJvcGVydHlOYW1lID0gJ19fY2hlY2tlZF9fJztcclxuICAgIC8vIOWAmemAieWIl1xyXG4gICAgcHJpdmF0ZSBoeGwgPSBbXTtcclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgY2Q6IENoYW5nZURldGVjdG9yUmVmKSB7IH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLmluaXRDaGVja2VkUHJvcGVydHkoKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGlsZHMgPSBBcnJheS5mcm9tKHRoaXMuY2hlY2tlZHMpO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5ncm91cEVkaXRvclJlZikge1xyXG4gICAgICAgICAgICB0aGlzLmh4bCA9IHRoaXMuZ3JvdXBFZGl0b3JSZWYuZ2V0SG91WHVhbkxpZSgpO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5oeGwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmh4bCA9IHRoaXMuaHhsLm1hcChuID0+IG4uZGF0YSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0Q2hlY2tlZFByb3BlcnR5KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5jaGVja2Vkcykge1xyXG4gICAgICAgICAgICB0aGlzLmNoZWNrZWRzID0gW107XHJcbiAgICAgICAgICAgIHRoaXMuZmllbGRzLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgICAgICBmW3RoaXMuY2hlY2tlZFByb3BlcnR5TmFtZV0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgIGZbdGhpcy5jaGVja2VkUHJvcGVydHlOYW1lXSA9IHRoaXMuaXNDaGVja2VkKGYpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgY2hlY2tlZENvbHMoZikge1xyXG5cclxuICAgICAgICBpZiAodGhpcy5pc0Rpc2FibGVkKGYpKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrZWQgPSB0aGlzLmlzQ2hlY2tlZChmKTtcclxuICAgICAgICBmW3RoaXMuY2hlY2tlZFByb3BlcnR5TmFtZV0gPSAhY2hlY2tlZDtcclxuXHJcbiAgICAgICAgY29uc3QgX2ZpZWxkcyA9IHRoaXMuZmllbGRzLmZpbHRlcihuID0+ICF0aGlzLmlzRGlzYWJsZWQobikpO1xyXG5cclxuICAgICAgICB0aGlzLmNoZWNrZWRzID0gX2ZpZWxkcy5maWx0ZXIobiA9PiBuW3RoaXMuY2hlY2tlZFByb3BlcnR5TmFtZV0pO1xyXG4gICAgICAgIHRoaXMudW5jaGVja2VkcyA9IF9maWVsZHMuZmlsdGVyKG4gPT4gIW5bdGhpcy5jaGVja2VkUHJvcGVydHlOYW1lXSApO1xyXG5cclxuICAgICAgICB0aGlzLmNkLmRldGVjdENoYW5nZXMoKTtcclxuICAgIH1cclxuXHJcbiAgICBpc0NoZWNrZWQoZikge1xyXG4gICAgICAgIGxldCBjaGsgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5jaGVja2VkcyAmJiB0aGlzLmNoZWNrZWRzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBjaGsgPSB0aGlzLmNoZWNrZWRzLmZpbmRJbmRleChuID0+IG4uaWQgPT09IGYuaWQpID4gLTE7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gY2hrO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiDlnKjlhbbku5bliIbnu4TkuK3nmoTliJfvvIznpoHnlKjpgInmi6lcclxuICAgICAqIOS7heW9k+WJjeWIhue7hOS4reeahOWIl+WPiuWAmemAieWIl+S4reeahOmhueWPr+S7pemAieaLqVxyXG4gICAgICovXHJcbiAgICBpc0Rpc2FibGVkKGYpIHtcclxuICAgICAgICBsZXQgaXRlbXMgPSB0aGlzLmNoaWxkcztcclxuICAgICAgICBpZiAodGhpcy5oeGwgJiYgdGhpcy5oeGwubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGl0ZW1zID0gaXRlbXMuY29uY2F0KHRoaXMuaHhsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiAhKGl0ZW1zLmZpbmRJbmRleChuID0+IG4uaWQgPT09IGYuaWQpID4gLTEpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==