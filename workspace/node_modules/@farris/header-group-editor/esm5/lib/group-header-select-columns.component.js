/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ChangeDetectorRef } from '@angular/core';
var SelectColumnsComponent = /** @class */ (function () {
    function SelectColumnsComponent(cd) {
        this.cd = cd;
        this.fields = [];
        this.checkeds = [];
        this.uncheckeds = [];
        this.childs = [];
        this.checkedPropertyName = '__checked__';
        // 候选列
        this.hxl = [];
    }
    /**
     * @return {?}
     */
    SelectColumnsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.initCheckedProperty();
        this.childs = Array.from(this.checkeds);
        if (this.groupEditorRef) {
            this.hxl = this.groupEditorRef.getHouXuanLie();
            if (this.hxl.length) {
                this.hxl = this.hxl.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data; }));
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    SelectColumnsComponent.prototype.initCheckedProperty = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.checkeds) {
            this.checkeds = [];
            this.fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                f[_this.checkedPropertyName] = false;
            }));
        }
        else {
            this.fields.forEach((/**
             * @param {?} f
             * @return {?}
             */
            function (f) {
                f[_this.checkedPropertyName] = _this.isChecked(f);
            }));
        }
    };
    /**
     * @param {?} f
     * @return {?}
     */
    SelectColumnsComponent.prototype.checkedCols = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        var _this = this;
        if (this.isDisabled(f)) {
            return;
        }
        /** @type {?} */
        var checked = this.isChecked(f);
        f[this.checkedPropertyName] = !checked;
        /** @type {?} */
        var _fields = this.fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !_this.isDisabled(n); }));
        this.checkeds = _fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n[_this.checkedPropertyName]; }));
        this.uncheckeds = _fields.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return !n[_this.checkedPropertyName]; }));
        this.cd.detectChanges();
    };
    /**
     * @param {?} f
     * @return {?}
     */
    SelectColumnsComponent.prototype.isChecked = /**
     * @param {?} f
     * @return {?}
     */
    function (f) {
        /** @type {?} */
        var chk = false;
        if (this.checkeds && this.checkeds.length) {
            chk = this.checkeds.findIndex((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.id === f.id; })) > -1;
        }
        return chk;
    };
    /** 在其他分组中的列，禁用选择
     * 仅当前分组中的列及候选列中的项可以选择
     */
    /**
     * 在其他分组中的列，禁用选择
     * 仅当前分组中的列及候选列中的项可以选择
     * @param {?} f
     * @return {?}
     */
    SelectColumnsComponent.prototype.isDisabled = /**
     * 在其他分组中的列，禁用选择
     * 仅当前分组中的列及候选列中的项可以选择
     * @param {?} f
     * @return {?}
     */
    function (f) {
        /** @type {?} */
        var items = this.childs;
        if (this.hxl && this.hxl.length) {
            items = items.concat(this.hxl);
        }
        return !(items.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.id === f.id; })) > -1);
    };
    SelectColumnsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'select-columns',
                    template: "\n    <div style=\"margin: 10px 20px\" class=\"row\">\n        <div class=\"custom-control custom-checkbox col-4\" *ngFor=\"let f of fields\">\n            <input type=\"checkbox\" class=\"custom-control-input\" [checked]=\"isChecked(f)\" [disabled]=\"isDisabled(f)\">\n            <label class=\"custom-control-label\" (click)=\"checkedCols(f)\" >{{ f.caption }}</label>\n        </div>\n    </div>\n    "
                }] }
    ];
    /** @nocollapse */
    SelectColumnsComponent.ctorParameters = function () { return [
        { type: ChangeDetectorRef }
    ]; };
    SelectColumnsComponent.propDecorators = {
        fields: [{ type: Input }]
    };
    return SelectColumnsComponent;
}());
export { SelectColumnsComponent };
if (false) {
    /** @type {?} */
    SelectColumnsComponent.prototype.fields;
    /** @type {?} */
    SelectColumnsComponent.prototype.checkeds;
    /** @type {?} */
    SelectColumnsComponent.prototype.uncheckeds;
    /** @type {?} */
    SelectColumnsComponent.prototype.childs;
    /** @type {?} */
    SelectColumnsComponent.prototype.groupEditorRef;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.checkedPropertyName;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.hxl;
    /**
     * @type {?}
     * @private
     */
    SelectColumnsComponent.prototype.cd;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXAtaGVhZGVyLXNlbGVjdC1jb2x1bW5zLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvaGVhZGVyLWdyb3VwLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9ncm91cC1oZWFkZXItc2VsZWN0LWNvbHVtbnMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUU1RTtJQXFCSSxnQ0FBb0IsRUFBcUI7UUFBckIsT0FBRSxHQUFGLEVBQUUsQ0FBbUI7UUFUaEMsV0FBTSxHQUFHLEVBQUUsQ0FBQztRQUVyQixhQUFRLEdBQUcsRUFBRSxDQUFDO1FBQ2QsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNoQixXQUFNLEdBQUcsRUFBRSxDQUFDO1FBRUosd0JBQW1CLEdBQUcsYUFBYSxDQUFDOztRQUVwQyxRQUFHLEdBQUcsRUFBRSxDQUFDO0lBQzRCLENBQUM7Ozs7SUFFOUMseUNBQVE7OztJQUFSO1FBQ0ksSUFBSSxDQUFDLG1CQUFtQixFQUFFLENBQUM7UUFFM0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUV4QyxJQUFJLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDckIsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLGFBQWEsRUFBRSxDQUFDO1lBQy9DLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUU7Z0JBQ2pCLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHOzs7O2dCQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksRUFBTixDQUFNLEVBQUMsQ0FBQzthQUN4QztTQUNKO0lBQ0wsQ0FBQzs7Ozs7SUFFTyxvREFBbUI7Ozs7SUFBM0I7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Qjs7O0lBQy9CLHdDQUFxQjs7SUFFckIsMENBQWM7O0lBQ2QsNENBQWdCOztJQUNoQix3Q0FBWTs7SUFDWixnREFBMkM7Ozs7O0lBQzNDLHFEQUE0Qzs7Ozs7SUFFNUMscUNBQWlCOzs7OztJQUNMLG9DQUE2QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEhlYWRlckdyb3VwRWRpdG9yQ29tcG9uZW50IH0gZnJvbSAnLi9oZWFkZXItZ3JvdXAtZWRpdG9yLmNvbXBvbmVudCc7XHJcbmltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0LCBJbnB1dCwgQ2hhbmdlRGV0ZWN0b3JSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6ICdzZWxlY3QtY29sdW1ucycsXHJcbiAgICB0ZW1wbGF0ZTogYFxyXG4gICAgPGRpdiBzdHlsZT1cIm1hcmdpbjogMTBweCAyMHB4XCIgY2xhc3M9XCJyb3dcIj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wgY3VzdG9tLWNoZWNrYm94IGNvbC00XCIgKm5nRm9yPVwibGV0IGYgb2YgZmllbGRzXCI+XHJcbiAgICAgICAgICAgIDxpbnB1dCB0eXBlPVwiY2hlY2tib3hcIiBjbGFzcz1cImN1c3RvbS1jb250cm9sLWlucHV0XCIgW2NoZWNrZWRdPVwiaXNDaGVja2VkKGYpXCIgW2Rpc2FibGVkXT1cImlzRGlzYWJsZWQoZilcIj5cclxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwiY3VzdG9tLWNvbnRyb2wtbGFiZWxcIiAoY2xpY2spPVwiY2hlY2tlZENvbHMoZilcIiA+e3sgZi5jYXB0aW9uIH19PC9sYWJlbD5cclxuICAgICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PlxyXG4gICAgYFxyXG59KVxyXG5leHBvcnQgY2xhc3MgU2VsZWN0Q29sdW1uc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XHJcbiAgICBASW5wdXQoKSBmaWVsZHMgPSBbXTtcclxuXHJcbiAgICBjaGVja2VkcyA9IFtdO1xyXG4gICAgdW5jaGVja2VkcyA9IFtdO1xyXG4gICAgY2hpbGRzID0gW107XHJcbiAgICBncm91cEVkaXRvclJlZjogSGVhZGVyR3JvdXBFZGl0b3JDb21wb25lbnQ7XHJcbiAgICBwcml2YXRlIGNoZWNrZWRQcm9wZXJ0eU5hbWUgPSAnX19jaGVja2VkX18nO1xyXG4gICAgLy8g5YCZ6YCJ5YiXXHJcbiAgICBwcml2YXRlIGh4bCA9IFtdO1xyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpIHsgfVxyXG5cclxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuaW5pdENoZWNrZWRQcm9wZXJ0eSgpO1xyXG5cclxuICAgICAgICB0aGlzLmNoaWxkcyA9IEFycmF5LmZyb20odGhpcy5jaGVja2Vkcyk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmdyb3VwRWRpdG9yUmVmKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaHhsID0gdGhpcy5ncm91cEVkaXRvclJlZi5nZXRIb3VYdWFuTGllKCk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmh4bC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaHhsID0gdGhpcy5oeGwubWFwKG4gPT4gbi5kYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGluaXRDaGVja2VkUHJvcGVydHkoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmNoZWNrZWRzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hlY2tlZHMgPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5maWVsZHMuZm9yRWFjaChmID0+IHtcclxuICAgICAgICAgICAgICAgIGZbdGhpcy5jaGVja2VkUHJvcGVydHlOYW1lXSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmZpZWxkcy5mb3JFYWNoKGYgPT4ge1xyXG4gICAgICAgICAgICAgICAgZlt0aGlzLmNoZWNrZWRQcm9wZXJ0eU5hbWVdID0gdGhpcy5pc0NoZWNrZWQoZik7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBjaGVja2VkQ29scyhmKSB7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmlzRGlzYWJsZWQoZikpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgY2hlY2tlZCA9IHRoaXMuaXNDaGVja2VkKGYpO1xyXG4gICAgICAgIGZbdGhpcy5jaGVja2VkUHJvcGVydHlOYW1lXSA9ICFjaGVja2VkO1xyXG5cclxuICAgICAgICBjb25zdCBfZmllbGRzID0gdGhpcy5maWVsZHMuZmlsdGVyKG4gPT4gIXRoaXMuaXNEaXNhYmxlZChuKSk7XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tlZHMgPSBfZmllbGRzLmZpbHRlcihuID0+IG5bdGhpcy5jaGVja2VkUHJvcGVydHlOYW1lXSk7XHJcbiAgICAgICAgdGhpcy51bmNoZWNrZWRzID0gX2ZpZWxkcy5maWx0ZXIobiA9PiAhblt0aGlzLmNoZWNrZWRQcm9wZXJ0eU5hbWVdICk7XHJcblxyXG4gICAgICAgIHRoaXMuY2QuZGV0ZWN0Q2hhbmdlcygpO1xyXG4gICAgfVxyXG5cclxuICAgIGlzQ2hlY2tlZChmKSB7XHJcbiAgICAgICAgbGV0IGNoayA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0aGlzLmNoZWNrZWRzICYmIHRoaXMuY2hlY2tlZHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGNoayA9IHRoaXMuY2hlY2tlZHMuZmluZEluZGV4KG4gPT4gbi5pZCA9PT0gZi5pZCkgPiAtMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBjaGs7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqIOWcqOWFtuS7luWIhue7hOS4reeahOWIl++8jOemgeeUqOmAieaLqVxyXG4gICAgICog5LuF5b2T5YmN5YiG57uE5Lit55qE5YiX5Y+K5YCZ6YCJ5YiX5Lit55qE6aG55Y+v5Lul6YCJ5oupXHJcbiAgICAgKi9cclxuICAgIGlzRGlzYWJsZWQoZikge1xyXG4gICAgICAgIGxldCBpdGVtcyA9IHRoaXMuY2hpbGRzO1xyXG4gICAgICAgIGlmICh0aGlzLmh4bCAmJiB0aGlzLmh4bC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaXRlbXMgPSBpdGVtcy5jb25jYXQodGhpcy5oeGwpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICEoaXRlbXMuZmluZEluZGV4KG4gPT4gbi5pZCA9PT0gZi5pZCkgPiAtMSk7XHJcbiAgICB9XHJcbn1cclxuIl19