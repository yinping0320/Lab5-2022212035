/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { SelectColumnsComponent } from './group-header-select-columns.component';
import { Component, Input, ViewChild, Injector, Output, EventEmitter, ViewEncapsulation } from '@angular/core';
import { TreeTableComponent } from '@farris/ui-treetable';
import { BsModalService } from '@farris/ui-modal';
import { GroupHeaderFormComponent } from './group-header-form.component';
var HeaderGroupEditorComponent = /** @class */ (function () {
    function HeaderGroupEditorComponent(injector, modalService) {
        this.injector = injector;
        this.modalService = modalService;
        this.idField = 'id';
        this.treeData = [];
        this.selectedNode = new EventEmitter();
        // preview group columns
        this.groupCols = [];
        this.HOU_XUN_LIE_ID = '__HOU_XUN_LIE_ID__';
    }
    /**
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (!this.treeData || !this.treeData.length) {
            this.initTreeData();
        }
        else {
            // 多表头中现存的字段ID集合
            /** @type {?} */
            var currentFieldIds_1 = this.treeData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fieldRef; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.fieldRef; }));
            // 新增的字段
            /** @type {?} */
            var newFields = this.fields.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return !currentFieldIds_1.includes(n.id); }));
            // 新增候选字段
            if (newFields && newFields.length) {
                this.treeData = this.treeData.concat(newFields.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        fieldRef: n.id,
                        parent: '__HOU_XUN_LIE_ID__',
                        level: 1
                    };
                })));
            }
            this.treeData = this.treeData.map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                if (n.fieldRef) {
                    /** @type {?} */
                    var f = _this.fields.find((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) { return m.id === n.fieldRef; }));
                    if (f) {
                        return tslib_1.__assign({}, f, { parent: n.parent });
                    }
                }
                else {
                    return n;
                }
            })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
            this.treeData = this.convert2TreeNodes(this.treeData);
        }
        this.tt.removed.subscribe((/**
         * @param {?} rowNode
         * @return {?}
         */
        function (rowNode) {
            if (!rowNode.node.data.groupHeader) {
                /** @type {?} */
                var hxl = _this.getHxl();
                if (!rowNode.parent) {
                    _this.treeData = _this.treeData.filter((/**
                     * @param {?} n
                     * @return {?}
                     */
                    function (n) { return n.data.id !== rowNode.id; }));
                }
                _this.tt.append(rowNode.node.data, hxl.node);
            }
        }));
    };
    /**
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.initTreeData = /**
     * @return {?}
     */
    function () {
        this.treeData = [{
                data: { id: 'groupHeader_1', caption: '分组表头1', halign: 'left', groupHeader: true },
                children: this.fields.map((/**
                 * @param {?} n
                 * @param {?} i
                 * @return {?}
                 */
                function (n, i) {
                    n['index'] = i;
                    return {
                        data: n,
                        children: [],
                        visible: true
                    };
                })),
                expanded: true, visible: true
            }, {
                data: { id: this.HOU_XUN_LIE_ID, caption: '(候选列)', houxunquNode: true },
                children: [],
                expanded: true
            }];
    };
    /**
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.getHxl = /**
     * @return {?}
     */
    function () {
        return this.tt.findRowNode(this.HOU_XUN_LIE_ID);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.onMouseEnter = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'inline-block';
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.onMouseLeave = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        ((/** @type {?} */ ($event.target))).querySelector('.rbtn').style.display = 'none';
    };
    // 移除列
    // 移除列
    /**
     * @param {?} event
     * @param {?} rowData
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.removeColumn = 
    // 移除列
    /**
     * @param {?} event
     * @param {?} rowData
     * @return {?}
     */
    function (event, rowData) {
        this.tt.remove(rowData.id);
    };
    // 编辑分组列
    // 编辑分组列
    /**
     * @param {?} rowData
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.editGroupName = 
    // 编辑分组列
    /**
     * @param {?} rowData
     * @return {?}
     */
    function (rowData) {
        /** @type {?} */
        var modalRef = this.showDialog((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                rowData.caption = ghfRef.title;
                modalRef.close();
            }
            else {
                alert('请输入名称！否则点取消。');
            }
        }));
        modalRef.content.title = rowData.caption;
    };
    /**
     * @private
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.generateGroupHeaderId = /**
     * @private
     * @return {?}
     */
    function () {
        return "groupHeader_" + new Date().getTime();
    };
    // 新增分组
    // 新增分组
    /**
     * @param {?} event
     * @param {?} rn
     * @param {?=} child
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.addNewGroup = 
    // 新增分组
    /**
     * @param {?} event
     * @param {?} rn
     * @param {?=} child
     * @return {?}
     */
    function (event, rn, child) {
        var _this = this;
        if (child === void 0) { child = false; }
        /** @type {?} */
        var modalRef = this.showDialog((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var ghfRef = (/** @type {?} */ (modalRef.content));
            if (ghfRef.title) {
                if (!rn) {
                    _this.treeData.splice(0, 0, {
                        data: {
                            id: _this.generateGroupHeaderId(), halign: 'left',
                            caption: ghfRef.title, groupHeader: true
                        },
                        icon: 'f-icon f-icon-aggregate-fields',
                        children: []
                    });
                    _this.tt.updateSerializedValue();
                }
                else {
                    _this.createNewGroupHeader(rn, ghfRef.title, child);
                }
                modalRef.close();
            }
            else {
                alert('请输入名称！否则点取消。');
            }
        }));
    };
    /**
     * @param {?} event
     * @param {?} col
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.setColumn2Group = /**
     * @param {?} event
     * @param {?} col
     * @return {?}
     */
    function (event, col) {
        /** @type {?} */
        var i = this.treeData.length - 1;
        this.treeData.splice(i, 0, { data: col, children: [] });
        /** @type {?} */
        var hxl = this.treeData.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.houxunquNode; }));
        hxl.children = hxl.children.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id !== col.id; }));
        this.tt.updateSerializedValue();
    };
    // 删除分组
    // 删除分组
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.removeGroup = 
    // 删除分组
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        /** @type {?} */
        var childs = this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.parents.indexOf(rowNode.id) > -1 && !n.node.data.groupHeader; })).map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.node; }));
        this.treeData = this.treeData.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id !== rowNode.id; }));
        this.tt.remove(rowNode.id);
        this.tt.appendChildren(childs, this.getHxl().node);
    };
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.setColumns = /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        var _this = this;
        /** @type {?} */
        var childs = rowNode.node.children ? rowNode.node.children.map((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data; })) : [];
        /** @type {?} */
        var modalRef = this.showSelectColumnsDialog((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var scRef = (/** @type {?} */ (modalRef.content));
            /** @type {?} */
            var needAppendNodes = scRef.checkeds;
            /** @type {?} */
            var hxl = _this.tt.findRowNode(_this.HOU_XUN_LIE_ID);
            hxl.node.children = (hxl.node.children || []).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return needAppendNodes.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === n.id; })) === -1; }));
            rowNode.node.children = rowNode.node.children || [];
            needAppendNodes = needAppendNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return rowNode.node.children.findIndex((/**
             * @param {?} c
             * @return {?}
             */
            function (c) { return c.id === n.id; })) === -1; }));
            if (needAppendNodes && needAppendNodes.length) {
                _this.tt.appendChildren(needAppendNodes.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        data: n,
                        children: [],
                        expanded: true
                    };
                })), rowNode.node);
                _this.tt.expandNode(rowNode.id);
            }
            if (scRef.uncheckeds && scRef.uncheckeds.length) {
                // hxl.node.children =  [];
                /** @type {?} */
                var hxlCols = scRef.uncheckeds.map((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) {
                    return {
                        data: n,
                        children: []
                    };
                }));
                hxl.node.children = hxl.node.children.filter((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return scRef.uncheckeds.findIndex((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) { return c.id === n.id; })) === -1; }));
                _this.tt.appendChildren(hxlCols, hxl.node);
            }
            modalRef.close();
        }), childs);
    };
    /**
     * @param {?=} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.hasGroupHeader = /**
     * @param {?=} rowNode
     * @return {?}
     */
    function (rowNode) {
        if (rowNode === void 0) { rowNode = null; }
        if (!rowNode) {
            return this.treeData.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.groupHeader; })).length;
        }
        else {
            return rowNode.node.children.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.data.groupHeader; })).length;
        }
    };
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.moveUp = /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        /** @type {?} */
        var data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        var index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id === rowNode.id; }));
        if (index !== 0) {
            /** @type {?} */
            var tempArr = data.splice(index, 1);
            data.splice.apply(data, tslib_1.__spread([index - 1, 0], tempArr));
            this.tt.updateSerializedValue();
        }
    };
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.moveDown = /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        /** @type {?} */
        var data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        var index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id === rowNode.id; }));
        /** @type {?} */
        var len = data.length;
        if (index !== len - 2) {
            /** @type {?} */
            var tempArr = data.splice(index, 1);
            data.splice.apply(data, tslib_1.__spread([index + 1, 0], tempArr));
            this.tt.updateSerializedValue();
        }
        else {
            this.moveBottom(event, rowNode);
        }
    };
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.moveTop = /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        /** @type {?} */
        var data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        var index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id === rowNode.id; }));
        data.unshift(rowNode.node);
        data.splice(index + 1, 1);
        this.tt.updateSerializedValue();
    };
    /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.moveBottom = /**
     * @param {?} event
     * @param {?} rowNode
     * @return {?}
     */
    function (event, rowNode) {
        /** @type {?} */
        var data = this.treeData;
        if (rowNode.parent) {
            data = rowNode.parent.children;
        }
        /** @type {?} */
        var index = data.findIndex((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.id === rowNode.id; }));
        data.push(rowNode.node);
        data.splice(index, 1);
        if (!rowNode.parent) {
            this.moveUp(event, rowNode);
        }
        else {
            this.tt.updateSerializedValue();
        }
    };
    /** 获取候选列 */
    /**
     * 获取候选列
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.getHouXuanLie = /**
     * 获取候选列
     * @return {?}
     */
    function () {
        return this.treeData.find((/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.houxunquNode; })).children;
    };
    /**
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.getAllNodes = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var hxl = this.getHouXuanLie();
        return this.tt.serializedValue.filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return !n.node.data.houxunquNode && hxl.findIndex((/**
             * @param {?} k
             * @return {?}
             */
            function (k) { return k.data.id === n.id; })) === -1;
        }));
    };
    /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.convert2TreeNodes = /**
     * @private
     * @param {?} data
     * @param {?=} parentId
     * @return {?}
     */
    function (data, parentId) {
        var _this = this;
        if (parentId === void 0) { parentId = null; }
        if (data.length) {
            /** @type {?} */
            var nodes = data.filter((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return v.parent === parentId; })).filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n; }));
            return nodes.map((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                /** @type {?} */
                var node = {
                    data: item,
                    children: [],
                    expanded: true
                };
                node.children = _this.convert2TreeNodes(data, item.id);
                if (node.data.groupHeader && node.children.length === 0) {
                    node.icon = 'f-icon f-icon-aggregate-fields';
                }
                return node;
            }));
        }
        return [];
    };
    /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.flatNodes = /**
     * @private
     * @param {?} nodes
     * @return {?}
     */
    function (nodes) {
        var _this = this;
        /** @type {?} */
        var r = {};
        nodes.forEach((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            r[e.data['id']] = e.data;
            if (e.children && e.children.length) {
                r = Object.assign(r, _this.flatNodes(e.children));
            }
        }));
        return r;
    };
    /**
     * @param {?} treeNodes
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.convert2Array = /**
     * @param {?} treeNodes
     * @return {?}
     */
    function (treeNodes) {
        /** @type {?} */
        var r = [];
        /** @type {?} */
        var maxBy = (/**
         * @param {?} arr
         * @param {?} fn
         * @return {?}
         */
        function (arr, fn) { return Math.max.apply(Math, tslib_1.__spread(arr.map(typeof fn === 'function' ? fn : (/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return val[fn]; })))); });
        /** @type {?} */
        var maxlevel = maxBy(treeNodes, (/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.level; }));
        var _loop_1 = function (i) {
            r.push(treeNodes.filter((/**
             * @param {?} n
             * @return {?}
             */
            function (n) { return n.level === i; })).map((/**
             * @param {?} n
             * @return {?}
             */
            function (n) {
                /** @type {?} */
                var data = n.node.data;
                return {
                    colspan: (n.node.children ? treeNodes.filter((/**
                     * @param {?} k
                     * @return {?}
                     */
                    function (k) { return k.parents.indexOf(n.id) > -1 && k.id.indexOf('groupHeader_') == -1; })).length : 1) || 1,
                    rowspan: (n.node.children && n.node.children.length > 0) ? 1 : (maxlevel - n.level + 1),
                    title: data.caption,
                    field: data.dataField,
                    width: (data.size ? data.size.width : 100),
                    halign: data.halign,
                    align: data.align,
                    id: n.id
                };
            })));
        };
        for (var i = 0; i <= maxlevel; i++) {
            _loop_1(i);
        }
        return r;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.onTreeSelected = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.selectedNode.emit($event.node);
    };
    /**
     * @private
     * @param {?} rn
     * @param {?} title
     * @param {?=} child
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.createNewGroupHeader = /**
     * @private
     * @param {?} rn
     * @param {?} title
     * @param {?=} child
     * @return {?}
     */
    function (rn, title, child) {
        if (child === void 0) { child = false; }
        /** @type {?} */
        var ghid = this.generateGroupHeaderId();
        /** @type {?} */
        var data = { id: ghid, caption: title, groupHeader: true, halign: 'left' };
        /** @type {?} */
        var gh = {
            data: data,
            children: [],
            expanded: true,
            visible: true,
            icon: 'f-icon f-icon-aggregate-fields',
        };
        if (!child) {
            if (!rn.parent) {
                /** @type {?} */
                var i = this.treeData.findIndex((/**
                 * @param {?} n
                 * @return {?}
                 */
                function (n) { return n.data.id === rn.id; })) + 1;
                this.treeData.splice(i, 0, gh);
                this.treeData = this.treeData.slice();
            }
            else {
                this.tt.appendChildren([gh], rn.parent);
            }
        }
        else {
            this.tt.appendChildren([gh], rn.node);
        }
    };
    /**
     * @private
     * @param {?} okCallback
     * @param {?} childs
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.showSelectColumnsDialog = /**
     * @private
     * @param {?} okCallback
     * @param {?} childs
     * @return {?}
     */
    function (okCallback, childs) {
        /** @type {?} */
        var modalRef = this.modalService.show(SelectColumnsComponent, {
            title: '设置分组列',
            width: 500,
            height: 300,
            showMaxButton: false,
            resizable: false,
            initialState: {
                fields: this.fields,
                checkeds: childs,
                groupEditorRef: this
            },
            buttons: [
                {
                    text: '确定',
                    cls: 'btn btn-primary',
                    handle: okCallback
                },
                {
                    text: '取消',
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                    })
                }
            ]
        });
        return modalRef;
    };
    /**
     * @private
     * @param {?} okCallback
     * @return {?}
     */
    HeaderGroupEditorComponent.prototype.showDialog = /**
     * @private
     * @param {?} okCallback
     * @return {?}
     */
    function (okCallback) {
        /** @type {?} */
        var modalRef = this.modalService.show(GroupHeaderFormComponent, {
            title: '分组列名称',
            width: 300,
            height: 200,
            showMaxButton: false,
            resizable: false,
            initialState: {
                title: '分组表头'
            },
            buttons: [
                {
                    text: '确定',
                    cls: 'btn btn-primary',
                    handle: okCallback
                },
                {
                    text: '取消',
                    cls: 'btn btn-secondary',
                    handle: (/**
                     * @return {?}
                     */
                    function () {
                        modalRef.close();
                    })
                }
            ]
        });
        return modalRef;
    };
    HeaderGroupEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'header-group-editor',
                    template: "\r\n\r\n\r\n<farris-treetable #tt [data]=\"treeData\" [idField]=\"idField\" [striped]=\"false\"\r\n(nodeSelected)=\"onTreeSelected($event)\"\r\n[singleSelect]=\"true\" [showIcon]=\"true\" [showFilterBar]=\"false\" [selectOnCheck]=\"true\" [checkOnSelect]=\"true\"\r\n[collapseIcon]=\"'f-icon f-icon-file-folder-close'\" [expandIcon]=\"'f-icon f-icon-file-folder-open'\"\r\n>\r\n    <ng-template farrisTemplate=\"body\" let-rowNode let-treeNode=\"node\" let-rowData=\"rowData\" >\r\n        <tr #row=\"row\" [selectRow]=\"rowNode\" [dblclick]=\"true\" (mouseenter)=\"onMouseEnter($event)\"\r\n                [selectRowDisabled]=\"rowData['houxunquNode']\"\r\n             (mouseleave)=\"onMouseLeave($event)\">\r\n            <td style=\"border: 0;\" [style.color]=\"row.selectRowDisabled? '#a6a6a6': '#333'\" [style.height.px]=\"34\" [style.lingHeight.px]=\"34\">\r\n                <farris-treeTableToggler [rowNode]=\"rowNode\"></farris-treeTableToggler>\r\n                <span style=\"vertical-align: middle;\">{{ rowData['caption'] }}</span>\r\n                <div class=\"rbtn\" style=\" float: right;  display:none; cursor: pointer\" >\r\n                    <!-- \u81EA\u5B9A\u4E49\u8868\u5934 -->\r\n                    <ng-container  *ngIf=\"rowData['groupHeader']\">\r\n                        <move-buttons [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" title=\"\u589E\u52A0\u540C\u7EA7\" (click)=\"addNewGroup($event, rowNode)\">\r\n                            <span class=\"f-icon f-icon-plus\"></span>\r\n                        </button>\r\n                        <button class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" title=\"\u589E\u52A0\u4E0B\u7EA7\" (click)=\"addNewGroup($event, rowNode, true)\">\r\n                            <span class=\"f-icon f-icon-plus-outline\"></span>\r\n                        </button>\r\n                        \r\n                        <!-- <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\"  (click)=\"editGroupName(rowData)\" title=\"\u4FEE\u6539\">\r\n                            <span class=\"f-icon f-icon-edit\"></span>\r\n                        </button> -->\r\n\r\n                        <button  class=\"btn btn-light mr-1\" style=\"padding: 2px 5px\" (click)=\"setColumns($event, rowNode)\" title=\"\u5217\u8BBE\u7F6E\">\r\n                            <span class=\"f-icon f-icon-table-insert\"></span>\r\n                        </button>\r\n\r\n                        <button class=\"btn btn-light\" style=\"padding: 2px 5px\" title=\"\u5220\u9664\u5206\u7EC4\" (click)=\"removeGroup($event, rowNode)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                        \r\n                    </ng-container>\r\n\r\n                    <!-- \u6570\u636E\u5B57\u6BB5\u8868\u5934 -->\r\n                    <ng-container *ngIf=\"!rowNode.parent && !rowData['houxunquNode'] && !rowData['groupHeader']\">\r\n                        <move-buttons  [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button class=\"btn btn-light\"  style=\"padding: 2px 5px\" title=\"\u5C06\u6B64\u5B57\u6BB5\u5728\u6B64\u5206\u7EC4\u4E2D\u79FB\u9664\" (click)=\"removeColumn($event, rowData)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                    </ng-container>\r\n                    \r\n                    <!-- \u5019\u9009\u5217\u4E2D\u6309\u94AE -->\r\n                    <button title=\"\u589E\u52A0\u8868\u5934\" class=\"btn btn-light\"  style=\"padding: 2px 5px\" *ngIf=\"rowData['houxunquNode']\" (click)=\"addNewGroup($event, null)\">\r\n                        <span class=\"f-icon f-icon-plus\"></span>\r\n                    </button>\r\n\r\n                    <button class=\"btn btn-light\" title=\"\u8BBE\u4E3A\u8868\u5934\" style=\"padding: 2px 5px\" *ngIf=\"rowNode.parent && rowNode.parent.data['houxunquNode']\" (click)=\"setColumn2Group($event, rowData)\">\r\n                        <span class=\"f-icon f-icon-table-row-insert-above\"></span>\r\n                    </button>\r\n\r\n                    <!-- \u8868\u5934\u4E2D\u5B57\u6BB5\u6309\u94AE -->\r\n                    <ng-container *ngIf=\"!rowData['groupHeader'] && rowNode.parent && !rowNode.parent.data['houxunquNode']\">\r\n                        <move-buttons  [rowNode]=\"rowNode\"></move-buttons>\r\n                        <button class=\"btn btn-light\"  style=\"padding: 2px 5px\" title=\"\u5C06\u6B64\u5B57\u6BB5\u5728\u6B64\u5206\u7EC4\u4E2D\u79FB\u9664\" (click)=\"removeColumn($event, rowData)\">\r\n                            <span class=\"f-icon f-icon-x\"></span>\r\n                        </button>\r\n                    </ng-container>\r\n                </div>\r\n\r\n            </td>\r\n        </tr>\r\n    </ng-template>\r\n</farris-treetable>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    styles: ["\n    .farris-treetable .farris-treetable-tbody td .treetable-toggler {\n        vertical-align: middle;\n    }\n    .farris-treetable .farris-treetable-tbody td .treenode-icon {\n        margin-right: 2px\n    }\n    "]
                }] }
    ];
    /** @nocollapse */
    HeaderGroupEditorComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: BsModalService }
    ]; };
    HeaderGroupEditorComponent.propDecorators = {
        fields: [{ type: Input }],
        idField: [{ type: Input }],
        treeData: [{ type: Input }],
        tt: [{ type: ViewChild, args: ['tt',] }],
        selectedNode: [{ type: Output }]
    };
    return HeaderGroupEditorComponent;
}());
export { HeaderGroupEditorComponent };
if (false) {
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.fields;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.idField;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.treeData;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.tt;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.selectedNode;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.groupCols;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.HOU_XUN_LIE_ID;
    /** @type {?} */
    HeaderGroupEditorComponent.prototype.injector;
    /**
     * @type {?}
     * @private
     */
    HeaderGroupEditorComponent.prototype.modalService;
}
//# sourceMappingURL=data:application/json;base64,