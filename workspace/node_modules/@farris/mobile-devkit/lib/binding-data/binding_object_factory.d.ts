/**
 * 绑定对象工厂相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { BindingProperty } from './binding_property';
import { BindingObject } from './binding_object';
/**
 * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。
 *
 * **扩展属性处理**
 *
 * 对于要扩展的属性（BindingProperty）有三种处理：
 * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；
 * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；
 * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；
 *
 * **示例代码**
 *
 * ```ts
 *  const empProperties = PropertyUtil.getProperties(EmpEntity);
 * const empBindingObject = BindingObjectFactory.create(properties);
 * ```
 */
declare class BindingObjectFactory {
    /**
     * 创建BindingObject实例
     * @param properties 要扩展的属性集合
     * @returns 带扩展属性的空BindingObject对象
     * @
     */
    static create(properties: BindingProperty[]): BindingObject;
    static createDynamicBindingObject(data: any): BindingObject;
    /**
     * 扩展属性绑定对象的属性
     * @param object     要扩展的绑定对象
     * @param properties 绑定属性集合
     */
    static extendProperties(object: BindingObject, properties: BindingProperty[]): void;
    /**
     * 扩展列表类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 列表类型的绑定属性集合
     */
    static extendListProperty(object: BindingObject, property: BindingProperty): void;
    /**
     * 扩展对象类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 对象类型的绑定属性集合
     */
    static extendObjectProperty(object: BindingObject, property: BindingProperty): void;
    static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void;
    static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject): void;
    /**
     * 扩展简单类型的绑定属性
     * @param object     要扩展的绑定对象
     * @param properties 简单类型的绑定属性集合
     */
    static extendPlainProperty(object: BindingObject, property: BindingProperty): void;
}
export { BindingObjectFactory };
