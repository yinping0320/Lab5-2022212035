/**
 * 绑定数据相关定义
 * @author Witt<jiwt@inspur.com>
 * @todo
 * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；
 * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。
 */
import { Subject } from 'rxjs';
import { DataTypeInfo } from '../entity/entity-type-info/index';
import { Repository } from '../repository/index';
import { ViewModelContext } from '../view-model/index';
import { Change } from './changes';
import { BindingProperty } from './binding_property';
import { BindingList } from './binding_list';
import { InvokeOnValueChange } from './binding_object';
/**
 * BindingData
 */
declare class BindingData {
    private viewModelContext;
    /**
     * 数据类型描述
     */
    dataTypeInfo: DataTypeInfo;
    /**
     * 绑定该路径
     */
    readonly bindingPath: string;
    /**
     * 可绑定的属性描述
     */
    properties: BindingProperty[];
    /**
     * 数据列表
     */
    list: BindingList;
    private paginationInfo;
    pagingInfo: any;
    /**
     * 设置分页信息
     * @param skip 跳过
     * @param take 获取
     * @param bindingPath 路径
     */
    setPagingInfo(skip: number, take: number, bindingPath: string): void;
    private firePagingChangeEvent;
    /**
     * 变更集
     */
    readonly changes: Subject<Change>;
    /**
     * 值变化执行器工厂，根据路径产生执行器
     */
    private valueChangeInvokerFactory;
    /**
     * 设置值变化执行器工厂
     * @param value 值变化执行器工厂
     */
    setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange): void;
    /**
     * 初始化（已废弃）
     */
    init(repository: Repository<any>, bindingPath: string): void;
    /**
     * 根据Repository对BindingData进行初始化
     */
    initByRepository(repository: Repository<any>, viewModelContext: ViewModelContext): void;
    /**
     * 初始化
     */
    initByBindingList(bindingList: BindingList, viewModelContext: ViewModelContext, dataTypeInfo: DataTypeInfo): void;
    /**
     * 获取paths对应的属性值
     * @param  paths 属性路径数组
     * @returns 属性值
     */
    getValue(paths: string[]): any;
    /**
     * 根据paths设置属性值
     * @param paths 属性路径数组
     * @param value 属性值
     * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。
     * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。
     */
    setValue(paths: string[], value: any, emitEventToView?: boolean, emitEventToEntity?: boolean): void;
    /**
     * 根据paths清空属性值
     */
    clearValue(paths: string[], emitEventToView?: boolean, emitEventToEntity?: boolean): void;
    /**
     * 获取当前列表
     */
    getList(): any;
    /**
     * 获取当前对象
     */
    getObject(): any;
    /**
     * 绑定路径（仅路径部分，不包括属性）
     * @param bindingPath 绑定路径
     */
    getPath(bindingPath?: string[]): string[];
    /**
     * 通过绑定路径获取属性初始值
     * @param paths 绑定路径
     */
    private getInitValueByPaths;
    /**
     * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。
     * @param properties 关联实体的属性集合
     */
    private extendProperties;
}
export { BindingData };
