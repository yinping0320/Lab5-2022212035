import { Subject } from 'rxjs';
import { Change } from './changes';
import { BindingObject } from './binding_object';
import { BindingProperty } from './binding_property';
/**
 * BindingList是一个BindingObject集合
 */
declare class BindingList {
    /**
     * immutable的BindingObject列表
     */
    private innerList;
    private emptyCurrentItem;
    /**
     * 关联实体的属性集合
     */
    properties: BindingProperty[];
    /**
     * 主键名
     */
    primaryKey: string;
    /**
     * 父对象
     */
    parent: BindingObject;
    /**
     * 变更流
     */
    changes: Subject<Change>;
    /**
     * 当前行对应的绑定对象的内码
     */
    currentId: string;
    /**
     * 分页信息
     */
    _paginationInfo: any;
    paginationInfo: any;
    /**
     * 获取页码
     */
    readonly pageIndex: any;
    /**
     * 获取分页大小
     */
    readonly pageSize: any;
    /**
     * 获取数据总项数
     */
    readonly total: any;
    /**
     * 获取跳过的数据条数
     */
    readonly skip: number;
    /**
     * 前台设置分页信息
     * @param skip skip
     * @param take take
     */
    setPaginationInfo(skip: number, take: number): void;
    /**
     * 当前行对应的绑定对象
     * 如果currentId为null，则创建一个空结构，防止绑定报错；
     */
    readonly currentItem: BindingObject;
    /**
     * 绑定对象的数量
     */
    readonly length: number;
    /**
     * 构造函数
     */
    constructor(properties: BindingProperty[]);
    /**
     * 添加[Symbol.iterator]，使之能通过for of遍历
     */
    [Symbol.iterator](): {
        next: () => {
            done: boolean;
            value: BindingObject;
        };
    };
    /**
     * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。
     * @param objects 要加载绑定对象数组
     */
    load(objects: BindingObject[], entityCreate?: boolean): void;
    /**
     * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。
     * @param objects 要加载绑定对象数组
     */
    append(objects: BindingObject[], isCloned?: boolean): void;
    /**
     * 增加数据
     * @param objects 实体
     * @description 增加实体数据，但不切换当前行
     */
    addData(objects: BindingObject[]): void;
    insert(object: BindingObject, position?: 1 | -1): void;
    /**
     * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。
     * @param object 绑定对象
     */
    add(object: BindingObject): void;
    /**
     * 删除主键值数组对应的绑定对象。
     * @param ids 主键值数组
     */
    removeByIds(ids: Array<string>): void;
    /**
     * 删除数据（不切换当前行）
     * @param ids ids
     */
    removeDataByIds(ids: Array<string>): void;
    /**
     * 清空
     */
    clear(): void;
    /**
     * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。
     * - 如果被删除的行是最后1行，则上移1行；
     * - 其他情况，下移1行。
     */
    getCurrentIdBeforeDeleting(): string;
    /**
     * 根据主键值获取对应绑定对象
     * @param   id 要查找的主键值
     * @returns 找到时返回对应BindingObject， 找不到时返回null
     */
    findById(id: string): BindingObject | null;
    /**
     * 将主键值为id的绑定对象设置为当前行
     * @param  id        要设置的主键值
     * @param  emitEvent 是否发送当前行变更事件
     */
    setCurrentId(id: string, emitEvent?: boolean, emitGlobalEvent?: boolean): void;
    /**
     * 根据主键值为id的绑定对象的索引
     * @param id 主键值
     * @returns 找到时返回对应的index，找不到时返回-1
     */
    getIndexById(id: string): number;
    /**
     * 根据索引位置获取对应绑定对象的主键值
     * @reutrn 找到时返回对应主键值，找不到返回null
     */
    getIdByIndex(index: number): string;
    /**
     * 转换为BindingObject数组
     */
    toArray(): BindingObject[];
    /**
     * 交互数据位置
     * @param id1 id1
     * @param id2 id2
     */
    swapById(id1: any, id2: any): void;
    /**
     * 转换为JSON对象
     * @returns 普通对象数组
     */
    toJSON(options?: any): any[];
    /**
     * 获取分页信息
     * @param path 路径
     * @param defaultValue 默认值
     */
    getPaginationConfigByPath(path: string, defaultValue?: any): any;
    /**
     * 对bindingList就行排序
     * @param string 排序字段
     * @param directions 排序规则字段
     * @param options 参数
     */
    sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: {
        [prop: string]: any;
    }): void;
    private getValue;
}
export { BindingList };
