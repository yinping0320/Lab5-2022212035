/**
 * BindingObject相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Subject, Observable } from 'rxjs';
import { Change, ViewChange } from './changes';
import { BindingProperty } from './binding_property';
import { BindingList } from './binding_list';
interface InvokeOnValueChange {
    (preValue: any, value: any, entityChanged: boolean): Observable<boolean>;
}
/**
 * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。
 */
declare class BindingObject {
    /**
     * immutable值对象
     */
    private innerValues;
    /**
     * 父对象或父列表
     */
    parent: BindingList | BindingObject;
    /**
     * 实体引起的变更
     */
    changes: Subject<Change>;
    /**
     * 界面层引起的变更流
     */
    viewChanges: Subject<ViewChange>;
    /**
     *  属性集合
     */
    properties: BindingProperty[];
    /**
     * 主键名
     */
    primaryKey: string;
    /**
     * 主键值
     */
    readonly primaryKeyValue: any;
    /**
     * 标识是否提交过
     */
    isShowValidationMsg: boolean;
    /**
     * 以{ [propertyName]: FormControl }的形式存放每条数据的control
     */
    controlMap: any;
    /**
     * 设置是否提交过
     */
    setShowValidationMsg(flag: boolean): void;
    /**
     * 构造函数
     * @param properties 属性集合
     */
    constructor(properties: BindingProperty[]);
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    getValue(propertyName: string): any;
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    setValue(propertyName: string, propertyValue: any, emitEventToView?: boolean, emitEventToEntity?: boolean, errors?: any, invokeOnValueChange?: InvokeOnValueChange): void;
    /**
     * 将BindingObject实例转换成JSON对象
     */
    toJSON(options?: any): any;
}
export { BindingObject, InvokeOnValueChange };
