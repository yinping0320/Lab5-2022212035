import { Observable, Subject } from 'rxjs';
import { PrimitivePropMetadata } from './metadata/index';
import { Modification, ChangeSet } from '../changeset/index';
/**
 * @author Lucas Huang
 * 实体抽象基类，所有实体必须扩展自Entity
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *    userId: string;
 *    userName: string;
 *
 *    constructor(data: any){
 *        super(data);
 *    }
 * }
 * ```
 */
export declare abstract class Entity {
    /**
     * 验证错误集合
     */
    private validErrors;
    /**
     * 增量变更集合
     */
    protected changeSet: ChangeSet;
    /**
     * 是否正在验证
     */
    protected isValidating: boolean;
    /**
     * 新数据
     */
    protected newData: any;
    /**
     * 变更流
     */
    valueChanged: Subject<Modification>;
    /**
     * 属性值改变时触发
     *
     * ### 使用示例
     * ```
     *  const entity = new UserEntity(data);
     *  entity.onValueChanged.subscribe((data: Modification) => {
     *      console.log(data);
     *  })
     *
     * ```
     *
     * @event
     */
    onValueChanged: Observable<Modification>;
    /**
     * 返回JSON格式的数据
     */
    readonly data: any;
    /**
     * 验证错误集合
     */
    readonly errors: {};
    /**
     * 实体变更集
     */
    readonly changes: Modification[];
    /**
     * 是否变更
     */
    hasChange: boolean;
    /**
     * 实体主键元数据
     */
    readonly primaryProperty: PrimitivePropMetadata;
    /**
     * 主键
     * @todo
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    readonly primaryKey: string;
    /**
     * 实体主键值
     * 1、没有主键时返回''不合理，应该返回undefined
     */
    readonly primaryValue: string;
    /**
     * @param data JSON数据
     */
    constructor(data: any);
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    setChanges(value: Modification): void;
    getPaths(): {
        path: any[];
        isUdt: boolean;
        isGrid: boolean;
    };
    /**
     * 加载数据
     * @param data 新数据
     */
    load(data: any): void;
    /**
     * 转换为JSON
     */
    toJSON(): {};
    /**
     * 初始化实体
     */
    private initialize;
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    protected createPath(propertyName: string): string[];
    /**
     * 属性字段初始化
     * @param ngFields 属性字段元数据
     */
    private initializeNormalField;
    /**
     * 初始化列表类型的元数据
     * @param ngListMetadata 列表类型元数据
     */
    private initializeList;
    /**
     * 初始化子对象
     * @param ngObjectMetadata 子对象元数据
     */
    private initializeObject;
    private initializeDynamic;
    /**
     * 加载简单字段值
     * @todo 临时用修改的方式模拟
     */
    protected loadFields(data: any): void;
    /**
     * 加载子列表数据
     * @param data 数据
     */
    protected loadLists(data: any): void;
    private loadObjects;
    protected loadDynamicObjects(data: any): void;
    /**
     * 发送值变更
     */
    private emitValueChange;
    /**
     * 获取属性值
     */
    private getPropValue;
    /**
     * 设置属性值
     */
    private setPropValue;
    /**
     * 检查属性值是否发生变化
     */
    private isPropValueChanged;
    /**
     * 多语录入字段的值是否为空
     */
    private isEmptyMultiLangPropValue;
}
