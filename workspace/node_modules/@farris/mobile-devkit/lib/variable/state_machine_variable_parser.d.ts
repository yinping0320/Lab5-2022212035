import { VariableParser } from './variable_parser';
/**
 * 状态机变量解析
 * @summary
 *
 * 解析策略：
 * 1、不带frameId，从顶层StateMachine中解析
 * {STATEMACHINE~/states/key}
 * {STATEMACHINE~/renderStates/key}
 *
 * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析
 * {STATEMACHINE~/frameId/states/key}
 * {STATEMACHINE~/frameId/renderStates/key}
 *
 * 存在的问题：
 * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；
 * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；
 * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。
 */
declare class StateMachineVariableParser implements VariableParser {
    /**
     * 构造函数
     */
    constructor();
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    parse(expression: string, context: any): any;
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    private extractPaths;
    /**
     * 获取对应的值
     */
    private getValue;
    /**
     * 解析path，并获取对应的StateMachine实例
     */
    private getTargetStateMachine;
    /**
     * 将Path解析为格式化的Path对象
     */
    private getPathObj;
    /**
     * 分隔Path
     */
    private splitPath;
}
export { StateMachineVariableParser };
