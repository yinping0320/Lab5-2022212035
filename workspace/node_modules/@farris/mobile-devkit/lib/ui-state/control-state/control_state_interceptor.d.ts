import { Observable } from "rxjs";
import { ViewModelContext } from "../../view-model";
import { ControlStatePropMetadata } from "../control_decorators";
interface ControlStateInterceptor {
    /**
     * 初始化
     */
    init(initContext: InitContext): Observable<any>;
    /**
     * 控件状态拦截
     * @param interceptContext
     */
    intercept(interceptContext: InterceptContext): void;
}
/**
 * 命令处理器扩展注入Token
 */
declare const CONTROL_STATE_INTERCEPTOR_TOKEN: import("../../core").InjectionToken<any>;
declare class InitContext {
    processContext: ProcessContext;
}
declare class InterceptContext {
    type: string;
    value: any;
    controlState: ControlStatePropMetadata;
    viewModelContext: ViewModelContext;
    processContext: ProcessContext;
}
declare class ProcessContext {
    isInWf: boolean;
    uiStateInProcess: string;
    formConfigId: string;
}
export { ControlStateInterceptor, InitContext, InterceptContext, ProcessContext, CONTROL_STATE_INTERCEPTOR_TOKEN };
