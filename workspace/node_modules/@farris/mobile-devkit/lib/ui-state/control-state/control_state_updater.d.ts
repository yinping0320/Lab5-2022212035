import { ViewModelContext } from "../../view-model";
import { Observable } from "rxjs";
export declare class ControlStateUpdater {
    private viewModelContext;
    private controlStateInterceptorService;
    private controlFields;
    private variableNames;
    constructor(viewModelContext: ViewModelContext);
    /**
     * 初始化
     * @returns
     */
    init(): Observable<any>;
    /**
     * 更新【描述控件状态】的变量
     * @param changes 监听到的变化
     */
    updateControlState(changes: {
        lintenerType: any;
        change: any;
    }): void;
    /**
     * 更新前事件
     * @param changes
     * @returns
     */
    private beforeUpdate;
    /**
     * 更新
     * @param changes 监听到的变化
     * @param fieldMetadata 变量的元数据
     * @param variableName 变量名
     * @param propertyName 控件的属性名
     * @returns
     */
    private update;
    /**
     * 是否需要新
     * @param originalValue
     * @returns
     */
    private needUpdate;
    /**
     * 计算变量的值
     * @param originalValue
     * @returns
     */
    private computeOriginalValue;
    /**
     * 计算
     * @param expr 变量
     * @param contexts 上下文
     * @returns
     */
    private eval;
    /**
     * 更新变量后，需要进行的操作
     * @param propertyName
     * @param interceptContext
     */
    private afterUpdate;
    /**
     * 更新必填状态
     * @param fieldMetadata
     * @param interceptContext
     * @returns
     */
    private updateRequired;
}
