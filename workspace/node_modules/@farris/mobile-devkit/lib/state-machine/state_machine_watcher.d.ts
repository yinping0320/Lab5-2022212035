import { StateMachine } from './state_machine';
import { ViewModelContext } from '../view-model/index';
/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
export declare class StateMachineWatcher {
    stateMachine: StateMachine;
    /**
     * 当前ViewModel上下文
     */
    private viewModelContext;
    /**
     * viewModel=>UIStatePahts字典
     */
    private viewModelContextAndUIStatePathsMap;
    /**
     * viewModel=>DataStatePahts字典
     */
    private viewModelContextAndDataStatePathsMap;
    /**
     * 所有UIStatePath数组
     */
    private uiStatePathList;
    /**
     * 所有DataStatePath数组
     */
    private dataStatePathList;
    constructor(stateMachine: StateMachine);
    /**
     * 初始化
     * @param viewModelContext 当前视图上下文
     */
    init(viewModelContext: ViewModelContext): void;
    /**
     * 返回表达式中ViewModelId对应的ViewModelContext
     */
    getViewModelContext(expression: any): ViewModelContext;
    /**
     * 监听UIState变更
     * @param viewModelContext ViewModel上下文
     * @param expression UIState表达式
     */
    subscribeUIStateChange(viewModelContext: ViewModelContext, expression: any): void;
    /**
     * 监听实体变更
     */
    subscribeEntityChange(viewModelContext: ViewModelContext, expression: any): void;
    /**
     * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）
     * @param expression 变量表达式
     */
    private getStatePath;
    /**
     * 判断是否监听范围内的变更路径
     */
    isAccordingPath(dataStatePaths: any, dataStatePath: string): boolean;
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     * @param expression 变量表达式
     */
    private extractPaths;
}
