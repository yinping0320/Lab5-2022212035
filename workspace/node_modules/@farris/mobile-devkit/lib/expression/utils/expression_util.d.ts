import { BindingData } from "../../binding-data/index";
import { DataTypeInfo } from "../../entity/index";
export declare class ExpressionUtil {
    static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[];
    /**
     * 将voCode转换为前端nodeCode
     * @param entityExpression like Entity.Child.p1
     * @returns
     */
    static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[];
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths?: string[]): void;
    /**
     * 获取指定绑定路径的当前行数据
     * @param paths 绑定路径
     * @param bindingData
     * @returns
     */
    static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | {
        [prop: string]: any;
    };
    /**
     * 从实体路径中获取级数最大的从表或从从表
     * @param paths
     * @returns
     */
    static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[];
    /**
     * 从路径中获取绑定路径
     * @param paths 路径
     * @param entityTypeInfo entityTypeInfo
     * @returns
     */
    static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo): string[];
    static getEntityPath(path: string[]): string[];
}
