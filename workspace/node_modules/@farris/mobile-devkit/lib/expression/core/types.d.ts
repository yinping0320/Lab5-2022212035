import { AppContext } from '../../app/index';
export declare const BigNumberType = "BigNumber";
/**
 * 后端消息
 */
export declare namespace BackEndMessage {
    /**
     * 消息级别
     */
    enum Level {
        Error = "Error",
        Info = "Info",
        Warning = "Warning"
    }
    /**
     * 后端消息对象
     */
    interface IMessage {
        context: IMessageContext;
        bizMessages: IBizMessage[];
    }
    /**
     * 消息位置
     */
    interface ILocation {
        /**
         * 表名
         */
        nodeCode: string;
        /**
         * 对应的行
         */
        rows?: string[];
        /**
         * 对应的列
         */
        columns?: string[];
    }
    /**
     * 消息结构
     */
    interface IBizMessage {
        /**
         * 消息位置
         */
        location?: ILocation;
        /**
         * 消息内容
         */
        message: string;
        /**
         * 消息级别
         */
        level: Level;
    }
    /**
     * 消息上下文
     */
    interface IMessageContext {
        ns: string;
        appContext: AppContext;
    }
    /**
     * 消息
     * @description 接口执行成功，但有info/warning级别的消息
     */
    class Message implements IMessage {
        context: IMessageContext;
        bizMessages: IBizMessage[];
        constructor(bizMessages: IBizMessage[], context: IMessageContext);
    }
    /**
     * 消息处理程序
     */
    interface IBackEndMessageHandler {
        handle(message: IMessage, context?: any): any;
    }
}
export interface IMessageService {
    /**
     * 提示
     * @param message
     */
    info(message: string): any;
    /**
     * 错误
     * @param message
     */
    error(message: string): any;
    /**
     * 警告
     * @param message
     */
    warning(message: string): any;
}
export interface INotifyService {
    /**
     * 提示
     * @param message
     * @param options
     */
    info(message: string, options?: {
        [prop: string]: any;
    }): any;
    /**
     *
     * @param content 成功提示
     * @param options
     */
    success(content: string, options?: {
        [prop: string]: any;
    }): any;
    /**
     * 警告提示
     * @param content
     */
    warning(content: string): any;
    /**
     * 错误提示
     * @param content
     * @param options
     */
    error(content: string, options?: {
        [prop: string]: any;
    }): any;
}
