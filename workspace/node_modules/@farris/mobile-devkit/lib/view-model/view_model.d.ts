import { Injector } from '../core/index';
import { Entity } from '../entity/index';
import { Repository } from '../repository/index';
import { CommandBus } from '../command/index';
import { BindingData } from '../binding-data/index';
import { UIState } from '../ui-state/index';
import { StateMachine } from '../state-machine/index';
import { Form } from '../form/index';
import { ViewModelContext } from './view_model_context';
import { CommandMethodMetadata, Keybinding } from './decorators';
import { ExpressionEngineImpl, ExpressionManager, ExpressionResult } from '../expression/index';
import { ControlsProxy } from '../control-proxy';
declare abstract class ViewModel {
    /**
     * 命令元数据集合
     */
    ngCommands: {
        [propName: string]: CommandMethodMetadata;
    };
    /**
     * 扩展命令
     */
    extendCommands: Map<string, any>;
    /**
     * 名称
     */
    id: string;
    /**
     * 注入器
     */
    injector: Injector;
    /**
     * 视图模型上下文
     */
    context: ViewModelContext;
    /**
     * 数据仓库
     */
    repository: Repository<Entity>;
    /**
     * 绑定路径
     */
    bindingPath: string;
    /**
     * 数据状态
     */
    bindingData: BindingData;
    /**
     * UI状态
     */
    uiState: UIState;
    /**
     * 状态机
     */
    stateMachine: StateMachine;
    /**
     * 表单
     */
    form: Form;
    /**
     * 命令总线
     */
    commandBus: CommandBus;
    /**
     * 快捷键映射
     */
    keybindingMap: Map<string, Keybinding>;
    /**
     * 控件实例代理
     */
    controlsProxy: ControlsProxy;
    /**
     * 值变化前监听器
     */
    private entityValueChangingListeners;
    /**
     * 值变化后监听器
     */
    private entityValueChangedListeners;
    expressionEngineImpl: ExpressionEngineImpl;
    expressionManager: ExpressionManager;
    expressionResult: ExpressionResult;
    /**
     * 构造函数
     */
    constructor(injector: Injector, id: string);
    /**
     * 初始化
     */
    init(): void;
    config(): void;
    initControlsProxy(): void;
    private initRepository;
    private initContext;
    initExpression(): void;
    private initBindingData;
    private initUIState;
    private intiStateMachine;
    private initForm;
    private initCommandBus;
    private extendCommandMethods;
    /**
     * 注册扩展命令方法
     */
    registerExtendCommand(commandName: string, commandHandler: any): void;
    private registerWithParent;
    /**
     * 关闭老的BeSession
     */
    private closeOldBeSession;
    /**
   * 从Form获取监听器
   */
    private initListeners;
}
export { ViewModel };
