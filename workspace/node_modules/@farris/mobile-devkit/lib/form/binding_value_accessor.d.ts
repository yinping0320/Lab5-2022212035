import { BindingData } from '../binding-data/index';
import { UIState } from '../ui-state/index';
import { ViewModelContext } from '../view-model/index';
import { BindingType } from './types';
import { BindingValueConverter } from './binding_value_converter';
/**
 * 绑定值访问器接口
 */
interface BindingValueAccessor {
    getValue(): any;
    setValue(controlValue: any): void;
}
/**
 * Entity值访问器
 */
declare class EntityBindingValueAccessor implements BindingValueAccessor {
    private bindingData;
    private bindingPathSegments;
    private valueConverter;
    constructor(bindingData: BindingData, bindingPath: string, valueConverter: BindingValueConverter);
    getValue(): any;
    setValue(controlValue: any): void;
    private getBindingPathSegments;
    /**
     * 是否是DateConverter
     */
    private isDateConverter;
}
/**
 * UIState值访问器
 */
declare class UIStateBindingValueAccessor implements BindingValueAccessor {
    private uiState;
    private bindingPathSegments;
    constructor(uiState: UIState, bindingPath: string, valueConverter: BindingValueConverter);
    getValue(): any;
    setValue(controlValue: any): void;
    private getUiStateBindingPath;
}
/**
 * 绑定值访问器工厂
 */
declare class BindingValueAccessorFactory {
    static create(bindingType: BindingType, bindingBindingPath: string, bindingValueConverter: any, viewModelContext: ViewModelContext): EntityBindingValueAccessor | UIStateBindingValueAccessor;
}
export { BindingValueAccessor, EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };
