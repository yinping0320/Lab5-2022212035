{"version":3,"file":"farris-mobile-devkit.umd.js","sources":["../../../node_modules/tslib/tslib.es6.js","ng://@farris/mobile-devkit/lib/core/types.ts","ng://@farris/mobile-devkit/lib/core/di/types.ts","ng://@farris/mobile-devkit/lib/core/di/consts.ts","ng://@farris/mobile-devkit/lib/core/di/utils.ts","ng://@farris/mobile-devkit/lib/core/di/injectable_def.ts","ng://@farris/mobile-devkit/lib/core/di/injection_token.ts","ng://@farris/mobile-devkit/lib/core/di/injector.ts","ng://@farris/mobile-devkit/lib/core/di/null_injector.ts","ng://@farris/mobile-devkit/lib/core/di/forward_ref.ts","ng://@farris/mobile-devkit/lib/core/di/static_injector.ts","ng://@farris/mobile-devkit/lib/core/di/injector_creator.ts","ng://@farris/mobile-devkit/lib/core/metadata/decorator.ts","ng://@farris/mobile-devkit/lib/core/metadata/metadata_util.ts","ng://@farris/mobile-devkit/lib/http/types.ts","ng://@farris/mobile-devkit/lib/http/http-util.ts","ng://@farris/mobile-devkit/lib/http/http-client.ts","ng://@farris/mobile-devkit/lib/http/index.ts","ng://@farris/mobile-devkit/lib/changeset/types.ts","ng://@farris/mobile-devkit/lib/changeset/change_set.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_node.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_prop_info.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_primitive.ts","ng://@farris/mobile-devkit/lib/utils/string_uitl.ts","ng://@farris/mobile-devkit/lib/utils/number_uitl.ts","ng://@farris/mobile-devkit/lib/utils/bool_util.ts","ng://@farris/mobile-devkit/lib/utils/enum_util.ts","ng://@farris/mobile-devkit/lib/utils/date_util.ts","ng://@farris/mobile-devkit/lib/utils/array_util.ts","ng://@farris/mobile-devkit/lib/utils/object_util.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/binding_path_traverser.ts","ng://@farris/mobile-devkit/lib/binding-data/changes.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_property.ts","ng://@farris/mobile-devkit/lib/binding-data/property_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_object_factory.ts","ng://@farris/mobile-devkit/lib/binding-data/entity_util.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_list.ts","ng://@farris/mobile-devkit/lib/binding-data/binding_data_factory.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/entity_path_comparer.ts","ng://@farris/mobile-devkit/lib/utils/data-path/form_path_converter.ts","ng://@farris/mobile-devkit/lib/utils/data-path/index.ts","ng://@farris/mobile-devkit/lib/utils/data-path-util.ts","ng://@farris/mobile-devkit/lib/utils/guid.ts","ng://@farris/mobile-devkit/lib/utils/is-observable.ts","ng://@farris/mobile-devkit/lib/utils/env.util.ts","ng://@farris/mobile-devkit/lib/utils/url_util.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_meatadata_object.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_dynamic.ts","ng://@farris/mobile-devkit/lib/entity/metadata/prop_metadata_list.ts","ng://@farris/mobile-devkit/lib/entity/metadata/entity_decorator.ts","ng://@farris/mobile-devkit/lib/entity/metadata/field_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/metadata/entity_metadata_util.ts","ng://@farris/mobile-devkit/lib/entity/entity-type-info/data_type_info.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/data_path_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity-path/index.ts","ng://@farris/mobile-devkit/lib/entity/types.ts","ng://@farris/mobile-devkit/lib/entity/entity_creator.ts","ng://@farris/mobile-devkit/lib/entity/entity_list.ts","ng://@farris/mobile-devkit/lib/entity/entity_factory.ts","ng://@farris/mobile-devkit/lib/entity/entity.ts","ng://@farris/mobile-devkit/lib/entity/dynamic_entity.ts","ng://@farris/mobile-devkit/lib/repository/decorators.ts","ng://@farris/mobile-devkit/lib/repository/entity_collection.ts","ng://@farris/mobile-devkit/lib/repository/entity_manager.ts","ng://@farris/mobile-devkit/lib/repository/pagination_manager.ts","ng://@farris/mobile-devkit/lib/repository/data_change_history.ts","ng://@farris/mobile-devkit/lib/repository/repository.ts","ng://@farris/mobile-devkit/lib/repository/default_repository.ts","ng://@farris/mobile-devkit/lib/command/decorators.ts","ng://@farris/mobile-devkit/lib/command/flow/task_node.ts","ng://@farris/mobile-devkit/lib/variable/variable_parser.ts","ng://@farris/mobile-devkit/lib/app/types.ts","ng://@farris/mobile-devkit/lib/app/binding_data_manager.ts","ng://@farris/mobile-devkit/lib/app/repository_mananger.ts","ng://@farris/mobile-devkit/lib/app/view_model_contex_manager.ts","ng://@farris/mobile-devkit/lib/context/context.ts","ng://@farris/mobile-devkit/lib/app/tokens.ts","ng://@farris/mobile-devkit/lib/app/app_context.ts","ng://@farris/mobile-devkit/lib/view-model/view_model_context.ts","ng://@farris/mobile-devkit/lib/ui-state/control_decorators.ts","ng://@farris/mobile-devkit/lib/ui-state/decorators.ts","ng://@farris/mobile-devkit/lib/ui-state/uistate_metadata_util.ts","ng://@farris/mobile-devkit/lib/ui-state/control-state/control_state_interceptor.ts","ng://@farris/mobile-devkit/lib/ui-state/control-state/control_state_interceptor.service.ts","ng://@farris/mobile-devkit/lib/ui-state/control-state/control_state_updater.ts","ng://@farris/mobile-devkit/lib/ui-state/control-state/control_state_listener.ts","ng://@farris/mobile-devkit/lib/ui-state/ui_state.ts","ng://@farris/mobile-devkit/lib/state-machine/types.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/render_state_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/metadata/action_metadata.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_context.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine_watcher.ts","ng://@farris/mobile-devkit/lib/state-machine/state_machine.ts","ng://@farris/mobile-devkit/lib/form/types.ts","ng://@farris/mobile-devkit/lib/form/binding_value_converter.ts","ng://@farris/mobile-devkit/lib/form/binding_value_accessor.ts","ng://@farris/mobile-devkit/lib/form/decorators.ts","ng://@farris/mobile-devkit/lib/validator/validator.ts","ng://@farris/mobile-devkit/lib/form/form_control.ts","ng://@farris/mobile-devkit/lib/form/form.ts","ng://@farris/mobile-devkit/lib/view-model/decorators.ts","ng://@farris/mobile-devkit/lib/expression/resolver/types.ts","ng://@farris/mobile-devkit/lib/expression/resolver/resolver_registry.ts","ng://@farris/mobile-devkit/lib/expression/resolver/entity_dependency_resolver.ts","ng://@farris/mobile-devkit/lib/expression/resolver/state_dependency_resolver.ts","ng://@farris/mobile-devkit/lib/expression/resolver/comment_dependency_resolver.ts","ng://@farris/mobile-devkit/lib/expression/resolver/resolve_service.ts","ng://@farris/mobile-devkit/lib/expression/utils/expression_util.ts","ng://@farris/mobile-devkit/lib/expression/core/core.ts","ng://@farris/mobile-devkit/lib/expression/core/tokens.ts","ng://@farris/mobile-devkit/lib/expression/core/types.ts","ng://@farris/mobile-devkit/lib/expression/effector/tokens.ts","ng://@farris/mobile-devkit/lib/expression/effector/repository_effector.ts","ng://@farris/mobile-devkit/lib/expression/effector/uistate_effector.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_registry.ts","ng://@farris/mobile-devkit/lib/expression/expression/types.ts","ng://@farris/mobile-devkit/lib/expression/listener/tokens.ts","ng://@farris/mobile-devkit/lib/expression/listener/change_listener.ts","ng://@farris/mobile-devkit/lib/expression/listener/ui_state_change_listener.ts","ng://@farris/mobile-devkit/lib/expression/listener/repository_change_listener.ts","ng://@farris/mobile-devkit/lib/expression/listener/listener_registry.ts","ng://@farris/mobile-devkit/lib/expression/listener/binding_data_change_listener.ts","ng://@farris/mobile-devkit/lib/expression/listener/listeners.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_event_emitter.ts","ng://@farris/mobile-devkit/lib/i18n/translate_token.ts","ng://@farris/mobile-devkit/lib/expression/manifest/tokens.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_registry.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_executor.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/entity_value_changed_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_manager.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/state_value_changed_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/repository_add_entity_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/repository_remove_entity_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/repository_load_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/entity_update_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/binding_data_append_object_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/binding_data_value_change_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/binding_data_remove_object_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/binding_data_load_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/binding_data_selection_changed_event_handler.ts","ng://@farris/mobile-devkit/lib/expression/expression/tokens.ts","ng://@farris/mobile-devkit/lib/expression/event-handler/event_handler_registry.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_engine_impl.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_result.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_manager.ts","ng://@farris/mobile-devkit/lib/expression/expression/expression_result_factory.ts","ng://@farris/mobile-devkit/lib/expression/effector/util.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_readonly.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_validate.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_required.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_visible.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_dependency.ts","ng://@farris/mobile-devkit/lib/expression/effector/effector_factory.ts","ng://@farris/mobile-devkit/lib/expression/providers.ts","ng://@farris/mobile-devkit/lib/control-proxy/control-proxy.ts","ng://@farris/mobile-devkit/lib/view-model/view_model.ts","ng://@farris/mobile-devkit/lib/view-model/types.ts","ng://@farris/mobile-devkit/lib/app/app_eventBus.ts","ng://@farris/mobile-devkit/lib/app/providers.ts","ng://@farris/mobile-devkit/lib/ui-state/control-state/providers.ts","ng://@farris/mobile-devkit/lib/app/app.ts","ng://@farris/mobile-devkit/lib/variable/parse_util.ts","ng://@farris/mobile-devkit/lib/variable/data_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/ui_state_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/state_machine_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/command_variable_parser.ts","ng://@farris/mobile-devkit/lib/variable/variable_parse_service.ts","ng://@farris/mobile-devkit/lib/variable/providers.ts","ng://@farris/mobile-devkit/lib/command/flow/task_link.ts","ng://@farris/mobile-devkit/lib/command/flow/task_flow.ts","ng://@farris/mobile-devkit/lib/command/command_context.ts","ng://@farris/mobile-devkit/lib/command/command_handler.ts","ng://@farris/mobile-devkit/lib/command/command_handler_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender.ts","ng://@farris/mobile-devkit/lib/command/command_handler_extender_registry.ts","ng://@farris/mobile-devkit/lib/command/command_handler_factory.ts","ng://@farris/mobile-devkit/lib/command/command_bus.ts","ng://@farris/mobile-devkit/lib/command/providers.ts","ng://@farris/mobile-devkit/lib/exception/tokens.ts"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","\nexport interface Type<T> extends Function {\n    new(...args: any[]): T;\n}\n\nexport const Type = Function;\n\n\n\n// export type ClassType = new (...args: any[]) => any;\n\nexport interface Pagination {\n    pageSize: number;\n    pageIndex: number;\n    total: number;\n}\n\nexport interface Pagination {\n    pageSize: number;\n    pageIndex: number;\n    total: number;\n}\n\n\nexport interface ResultData {\n    data?: any[];\n    pagination?: Pagination;\n}\n\nexport enum DataChangeType { Add, Delete, Edit, Append }\n\nexport interface DataChange {\n    /**\n     * 变更路径，主要针对带从表的情况\n     */\n    fpath?: string;\n    dataId: string;\n    changeType: DataChangeType;\n    [prop: string]: any;\n}\n","import { Type } from '../types';\n\nexport function isType(v: any): v is Type<any> {\n  return typeof v === 'function';\n}\n\n\n\nexport interface AbstractType<T> extends Function {\n  prototype: T;\n}\n\n\nexport enum InjectFlags {\n\n  Default = 0b0000,\n\n  Self = 0b0001,\n\n  SkipSelf = 0b0010,\n\n  Optional = 0b0100,\n}\n\n\nexport const enum OptionFlags {\n  Optional = 1 << 0,\n  CheckSelf = 1 << 1,\n  CheckParent = 1 << 2,\n  Default = CheckSelf | CheckParent\n}\n\n\nexport interface Record {\n\n  fn: Function;\n\n  useNew: boolean;\n\n  deps: DependencyRecord[];\n\n  value: any;\n\n}\n\n\nexport interface DependencyRecord {\n\n  token: any;\n\n  options: number;\n}\n\n\n","export const EMPTY = [] as any[];\n\nexport const IDENT = function<T>(value: T): T {\n  return value;\n};\n\nexport const CIRCULAR = IDENT;\n\nexport const MULTI_PROVIDER_FN = function(): any[] {\n  return Array.prototype.slice.call(arguments);\n};\n\nexport const NEW_LINE = /\\n/gm;\n\nexport const NO_NEW_LINE = 'ɵ';\n\nconst _THROW_IF_NOT_FOUND = {};\n\nexport const THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;\n\nexport const NG_TEMP_TOKEN_PATH = 'ngTempTokenPath';\n","import { NO_NEW_LINE, NEW_LINE } from './consts';\n\nexport function stringify(token: any): string {\n  if (typeof token === 'string') {\n    return token;\n  }\n\n  if (Array.isArray(token)) {\n    return '[' + token.map(stringify).join(', ') + ']';\n  }\n\n  if (token == null) {\n    return '' + token;\n  }\n\n  if (token.overriddenName) {\n    return `${token.overriddenName}`;\n  }\n\n  if (token.name) {\n    return `${token.name}`;\n  }\n\n  const res = token.toString();\n\n  if (res == null) {\n    return '' + res;\n  }\n\n  const newLineIndex = res.indexOf('\\n');\n  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);\n}\n\n\nexport function getClosureSafeProperty<T>(objWithPropertyToExtract: T): string {\n  for (const key in objWithPropertyToExtract) {\n    if (objWithPropertyToExtract[key] === getClosureSafeProperty as any) {\n      return key;\n    }\n  }\n  throw Error('Could not find renamed property on target object.');\n}\n\n\nexport function formatError(\n  text: string,\n  obj: any,\n  injectorErrorName: string,\n  source: string|null = null\n): string {\n  text = text && text.charAt(0) === '\\n' && text.charAt(1) == NO_NEW_LINE ? text.substr(2) : text;\n  let context = stringify(obj);\n  if (Array.isArray(obj)) {\n    context = obj.map(stringify).join(' -> ');\n  } else if (typeof obj === 'object') {\n    const parts = [] as string[];\n    for (const key in obj) {\n      if (obj.hasOwnProperty(key)) {\n        const value = obj[key];\n        parts.push(\n            key + ':' + (typeof value === 'string' ? JSON.stringify(value) : stringify(value)));\n      }\n    }\n    context = `{${parts.join(', ')}}`;\n  }\n  return `${injectorErrorName}${source ? '(' + source + ')' : ''}[${context}]: ${\n      text.replace(NEW_LINE, '\\n  ')}`;\n}\n\n\nexport function staticError(text: string, obj: any): Error {\n  return new Error(formatError(text, obj, 'StaticInjectorError'));\n}\n","import { Type } from '../types';\nimport { getClosureSafeProperty } from './utils';\n\n\nexport interface InjectorType<T> extends Type<T> {\n  ɵinj: never;\n}\n\nexport interface ɵɵInjectableDef<T> {\n  providedIn: InjectorType<any>|'root'|'platform'|'any'|null;\n  token: unknown;\n  factory: (t?: Type<any>) => T;\n  value: T|undefined;\n}\n\n\nexport function ɵɵdefineInjectable<T>(opts: {\n  token: unknown,\n  providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T,\n}): never {\n  return ({\n    token: opts.token,\n    providedIn: opts.providedIn as any || null,\n    factory: opts.factory,\n    value: undefined,\n  } as ɵɵInjectableDef<T>) as never;\n}\n\n\nexport const NG_PROV_DEF       = getClosureSafeProperty({ɵprov: getClosureSafeProperty});\nexport const NG_INJ_DEF        = getClosureSafeProperty({ɵinj: getClosureSafeProperty});\nexport const NG_INJECTABLE_DEF = getClosureSafeProperty({ngInjectableDef: getClosureSafeProperty});\n\nexport function getOwnDefinition<T>(type: any, def: ɵɵInjectableDef<T>): ɵɵInjectableDef<T>|null {\n  return def && def.token === type ? def : null;\n}\n\nexport function getInjectableDef<T>(type: any): ɵɵInjectableDef<T>|null {\n  return getOwnDefinition(type, type[NG_PROV_DEF]) ||\n      getOwnDefinition(type, type[NG_INJECTABLE_DEF]);\n}\n","import { Type } from '../types';\nimport { ɵɵdefineInjectable } from './injectable_def';\n\n\nexport class InjectionToken<T> {\n\n  readonly ngMetadataName = 'InjectionToken';\n\n  readonly ɵprov: never|undefined;\n\n  constructor(\n    protected _desc: string,\n    options?: { providedIn?: Type<any>|'root'|'platform'|'any'|null, factory: () => T }\n  ) {\n\n    this.ɵprov = undefined;\n    if (typeof options === 'number') {\n      (this as any).__NG_ELEMENT_ID__ = options;\n    } else if (options !== undefined) {\n      this.ɵprov = ɵɵdefineInjectable({\n        token: this,\n        providedIn: options.providedIn || 'root',\n        factory: options.factory,\n      });\n    }\n  }\n\n  toString(): string {\n    return `InjectionToken ${this._desc}`;\n  }\n}\n\nexport function createInjectionToken(token: any): InjectionToken<any> {\n  return new InjectionToken<any>(token);\n}\n","import { Type } from '../types';\nimport { AbstractType, InjectFlags } from './types';\nimport { InjectionToken } from './injection_token';\n\n/**\n * 注入器抽象类\n */\nexport abstract class Injector {\n\n  abstract get<T>(\n      token: Type<T>|InjectionToken<T>|AbstractType<T>,\n      notFoundValue?: T,\n      flags?: InjectFlags\n  ): T;\n\n  abstract get(token: any, notFoundValue?: any): any;\n\n}\n","import { stringify } from './utils';\nimport { THROW_IF_NOT_FOUND } from './consts';\nimport { Injector } from './injector';\n\n\nexport class NullInjector implements Injector {\n\n  get(token: any, notFoundValue: any = THROW_IF_NOT_FOUND): any {\n    if (notFoundValue === THROW_IF_NOT_FOUND) {\n      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);\n      error.name = 'NullInjectorError';\n      throw error;\n    }\n    return notFoundValue;\n  }\n\n}\n\n\nexport const NULL_INJECTOR: Injector = new NullInjector();\n","import { Type } from '../types';\nimport { stringify, getClosureSafeProperty } from './utils';\n\nconst __forward_ref__ = getClosureSafeProperty({__forward_ref__: getClosureSafeProperty});\n\nexport function resolveForwardRef<T>(type: T): T {\n  return isForwardRef(type) ? type() : type;\n}\n\nexport interface ForwardRefFn {\n  (): any;\n}\n\nexport function forwardRef(forwardRefFn: ForwardRefFn): Type<any> {\n  (forwardRefFn as any).__forward_ref__ = forwardRef;\n  (forwardRefFn as any).toString = function() {\n    return stringify(this());\n  };\n  return (forwardRefFn as any as Type<any>);\n}\n\nexport function isForwardRef(fn: any): fn is() => any {\n  return typeof fn === 'function' && fn.hasOwnProperty(__forward_ref__) &&\n      fn.__forward_ref__ === forwardRef;\n}\n","import { Type } from '../types';\nimport { InjectFlags, OptionFlags, Record, DependencyRecord } from './types';\nimport { IDENT, EMPTY, CIRCULAR, MULTI_PROVIDER_FN, NO_NEW_LINE, NEW_LINE, NG_TEMP_TOKEN_PATH } from './consts';\nimport { stringify, getClosureSafeProperty, formatError, staticError } from './utils';\nimport { Injector } from './injector';\nimport { NULL_INJECTOR, NullInjector} from './null_injector';\nimport {\n  ValueProvider, StaticClassProvider, ConstructorProvider,  ExistingProvider, FactoryProvider,\n  StaticProvider, SupportedProvider,\n} from './providers';\nimport { InjectionToken } from './injection_token';\nimport { getInjectableDef } from './injectable_def';\nimport { resolveForwardRef } from './forward_ref';\nimport { THROW_IF_NOT_FOUND, } from './consts';\n\n\nexport const INJECTOR = new InjectionToken<Injector>('INJECTOR', -1 as any);\n\nexport const USE_VALUE =  getClosureSafeProperty<ValueProvider>({provide: String, useValue: getClosureSafeProperty});\n\nlet _currentInjector: Injector|undefined|null = undefined;\n\nexport function setCurrentInjector(injector: Injector|null|undefined): Injector|undefined|null {\n  const former = _currentInjector;\n  _currentInjector = injector;\n  return former;\n}\n\n\nexport class StaticInjector implements Injector {\n\n  readonly parent: Injector;\n\n  readonly source: string|null;\n\n  readonly scope: string|null;\n\n  private _records: Map<any, Record|null>;\n\n  constructor(\n    providers: StaticProvider[],\n    parent: Injector = NULL_INJECTOR,\n    source: string|null = null\n  ) {\n    parent = parent ? parent : NULL_INJECTOR;\n    this.parent = parent;\n    this.source = source;\n    const records = this._records = new Map<any, Record>();\n\n    records.set(Injector, {token: Injector, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\n    records.set(INJECTOR, {token: INJECTOR, fn: IDENT, deps: EMPTY, value: this, useNew: false} as Record);\n    this.scope = recursivelyProcessProviders(records, providers);\n  }\n\n  get<T>(token: Type<T>|InjectionToken<T>, notFoundValue?: T, flags?: InjectFlags): T;\n  get(token: any, notFoundValue?: any): any;\n  get(token: any, notFoundValue?: any, flags: InjectFlags = InjectFlags.Default): any {\n    const records = this._records;\n    let record = records.get(token);\n    if (record === undefined) {\n      const injectableDef = getInjectableDef(token);\n      if (injectableDef) {\n        const providedIn = injectableDef && injectableDef.providedIn;\n        if (providedIn === 'any' || providedIn != null && providedIn === this.scope) {\n          records.set(\n            token,\n            record = resolveProvider({provide: token, useFactory: injectableDef.factory, deps: EMPTY})\n          );\n        }\n      }\n      if (record === undefined) {\n        records.set(token, null);\n      }\n    }\n    const lastInjector = setCurrentInjector(this);\n    try {\n      return tryResolveToken(token, record, records, this.parent, notFoundValue, flags);\n    } catch (e) {\n      throw e;\n    } finally {\n      setCurrentInjector(lastInjector);\n    }\n  }\n\n  toString() {\n    const tokens = [] as string[];\n    const  records = this._records;\n    records.forEach((v, token) => tokens.push(stringify(token)));\n    return `StaticInjector[${tokens.join(', ')}]`;\n  }\n}\n\n\nfunction multiProviderMixError(token: any) {\n  return staticError('Cannot mix multi providers and regular providers', token);\n}\n\nexport const INJECTOR_SCOPE = new InjectionToken<'root'|'platform'|null>('Set Injector scope.');\n\n\n/**\n * 递归处理Provider\n */\nfunction recursivelyProcessProviders(records: Map<any, Record>, provider: StaticProvider): string | null {\n  let scope: string|null = null;\n  if (provider) {\n    provider = resolveForwardRef(provider);\n    if (Array.isArray(provider)) {\n\n      for (let i = 0; i < provider.length; i++) {\n        scope = recursivelyProcessProviders(records, provider[i]) || scope;\n      }\n    } else if (typeof provider === 'function') {\n\n      throw staticError('Function/Class not supported', provider);\n    } else if (provider && typeof provider === 'object' && provider.provide) {\n\n      let token = resolveForwardRef(provider.provide);\n      const resolvedProvider = resolveProvider(provider);\n\n      // multi\n      if (provider.multi === true) {\n        let multiProvider: Record|undefined = records.get(token);\n        if (multiProvider) {\n          if (multiProvider.fn !== MULTI_PROVIDER_FN) {\n            throw multiProviderMixError(token);\n          }\n        } else {\n          records.set(token, multiProvider = {\n            token: provider.provide,\n            deps: [],\n            useNew: false,\n            fn: MULTI_PROVIDER_FN,\n            value: EMPTY\n          } as Record);\n        }\n        token = provider;\n        multiProvider.deps.push({token, options: OptionFlags.Default});\n      }\n\n      const record = records.get(token);\n      if (record && record.fn === MULTI_PROVIDER_FN) {\n        throw multiProviderMixError(token);\n      }\n      if (token === INJECTOR_SCOPE) {\n        scope = resolvedProvider.value;\n      }\n      records.set(token, resolvedProvider);\n    } else {\n      throw staticError('Unexpected provider', provider);\n    }\n  }\n  return scope;\n}\n\nfunction resolveProvider(provider: SupportedProvider): Record {\n  const deps = computeDeps(provider);\n  let fn: Function = IDENT;\n  let value: any = EMPTY;\n  let useNew: boolean = false;\n  const provide = resolveForwardRef(provider.provide);\n\n  if (USE_VALUE in provider) {\n\n    value = (provider as ValueProvider).useValue;\n  } else if ((provider as FactoryProvider).useFactory) {\n\n    fn = (provider as FactoryProvider).useFactory;\n  } else if ((provider as ExistingProvider).useExisting) {\n\n    // Just use IDENT\n  } else if ((provider as StaticClassProvider).useClass) {\n\n    // 静态类型\n    useNew = true;\n    fn = resolveForwardRef((provider as StaticClassProvider).useClass);\n  } else if (typeof provide === 'function') {\n\n    // 构造函数\n    useNew = true;\n    fn = provide;\n  } else {\n    throw staticError(\n        'StaticProvider does not have [useValue|useFactory|useExisting|useClass] or [provide] is not newable',\n        provider);\n  }\n  return {deps, fn, useNew, value};\n}\n\n/**\n * 计算依赖\n */\nfunction computeDeps(provider: StaticProvider): DependencyRecord[] {\n  let deps: DependencyRecord[] = EMPTY;\n  const providerDeps: any[] = (provider as ExistingProvider & StaticClassProvider & ConstructorProvider).deps;\n\n  if (providerDeps && providerDeps.length) {\n    deps = [];\n    for (let i = 0; i < providerDeps.length; i++) {\n      const options = OptionFlags.Default;\n      const token = resolveForwardRef(providerDeps[i]);\n      deps.push({token, options});\n    }\n  } else if ((provider as ExistingProvider).useExisting) {\n    const token = resolveForwardRef((provider as ExistingProvider).useExisting);\n    deps = [{token, options: OptionFlags.Default}];\n  } else if (!providerDeps && !(USE_VALUE in provider)) {\n    // useValue & useExisting are the only ones which are exempt from deps all others need it.\n    throw staticError('\\'deps\\' required', provider);\n  }\n  return deps;\n}\n\n\nfunction tryResolveToken(\n  token: any,\n  record: Record|undefined|null,\n  records: Map<any, Record|null>,\n  parent: Injector,\n  notFoundValue: any,\n  flags: InjectFlags\n): any {\n  try {\n    return resolveToken(token, record, records, parent, notFoundValue, flags);\n  } catch (e) {\n    if (!(e instanceof Error)) {\n      e = new Error(e);\n    }\n    const path: any[] = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];\n    path.unshift(token);\n\n    // 清空循环引用的值\n    if (record && record.value === CIRCULAR) {\n      record.value = EMPTY;\n    }\n    throw e;\n  }\n}\n\n\nfunction resolveToken(\n  token: any,\n  record: Record|undefined|null,\n  records: Map<any, Record|null>,\n  parent: Injector,\n  notFoundValue: any,\n  flags: InjectFlags\n): any {\n\n  let value;\n  if (record && !(flags & InjectFlags.SkipSelf)) {\n    value = record.value;\n    if (value === CIRCULAR) {\n      throw Error(NO_NEW_LINE + 'Circular dependency');\n    } else if (value === EMPTY) {\n      record.value = CIRCULAR;\n      const useNew = record.useNew;\n      const fn = record.fn;\n      const depRecords = record.deps;\n      let deps = EMPTY;\n      if (depRecords.length) {\n        deps = [];\n        for (let i = 0; i < depRecords.length; i++) {\n          const depRecord: DependencyRecord = depRecords[i];\n          const options = depRecord.options;\n          const childRecord = options & OptionFlags.CheckSelf ? records.get(depRecord.token) : undefined;\n          deps.push(\n            tryResolveToken(\n              depRecord.token,\n              childRecord,\n              records,\n              !childRecord && !(options & OptionFlags.CheckParent) ? NULL_INJECTOR : parent,\n              options & OptionFlags.Optional ? null : THROW_IF_NOT_FOUND,\n              InjectFlags.Default\n            )\n          );\n        }\n      }\n      record.value = value = useNew ? new (fn as any)(...deps) : fn.apply(undefined, deps);\n    }\n  } else if (!(flags & InjectFlags.Self)) {\n\n    value = parent.get(token, notFoundValue, InjectFlags.Default);\n  } else if (!(flags & InjectFlags.Optional)) {\n\n    value = NULL_INJECTOR.get(token, notFoundValue);\n  } else {\n\n    value = NULL_INJECTOR.get(token, typeof notFoundValue !== 'undefined' ? notFoundValue : null);\n  }\n  return value;\n}\n","import { Injector } from './injector';\nimport { StaticInjector } from './static_injector';\nimport { StaticProvider } from './providers';\n\nexport function INJECTOR_IMPL__PRE_R3__(providers: StaticProvider[], parent: Injector|undefined, name: string) {\n  return new StaticInjector(providers, parent, name);\n}\n\nexport const INJECTOR_IMPL = INJECTOR_IMPL__PRE_R3__;\n\nexport function createInjector(\n  options: StaticProvider[] | {providers: StaticProvider[], parent?: Injector, name?: string},\n  parent?: Injector\n): Injector {\n  if (Array.isArray(options)) {\n    return INJECTOR_IMPL(options, parent, '');\n  } else {\n    return INJECTOR_IMPL(options.providers, options.parent, options.name || '');\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n// import { Type } from '@angular/core';\nimport { Type } from '../types';\n\n/**\n * An interface implemented by all Angular formType decorators, which allows them to be used as ES7\n * decorators as well as\n * Angular DSL syntax.\n *\n * ES7 syntax:\n *\n * ```\n * @ng.Component({...})\n * class MyClass {...}\n * ```\n *\n */\nexport interface TypeDecorator {\n    /**\n     * Invoke as ES7 decorator.\n     */\n    <T extends Type<any>>(type: T): T;\n\n    // Make TypeDecorator assignable to built-in ParameterDecorator formType.\n    // ParameterDecorator is declared in lib.d.ts as a `declare formType`\n    // so we cannot declare this interface as a subtype.\n    // see https://github.com/angular/angular/issues/3379#issuecomment-126169417\n    (target: Object, propertyKey?: string | symbol, parameterIndex?: number): void;\n}\n\nexport const ANNOTATIONS = '__annotations__';\nexport const PARAMETERS = '__parameters__';\nexport const PROP_METADATA = '__prop__metadata__';\n\n\n\n\n/**\n * @suppress {globalThis}\n */\nexport function makeDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any,\n    chainFn?: (fn: Function) => void,\n    typeFn?: (type: Type<any>, ...args: any[]) => void): {\n        new(...args: any[]): any;\n        (...args: any[]): any;\n        (...args: any[]): (cls: any) => any;\n    } {\n    const metaCtor = makeMetadataCtor(props);\n\n    function DecoratorFactory(...args: any[]): (cls: any) => any {\n        if (this instanceof DecoratorFactory) {\n            metaCtor.call(this, ...args);\n            return this;\n        }\n\n        const annotationInstance = new (<any>DecoratorFactory)(...args);\n        const typeDecorator: TypeDecorator = <TypeDecorator>function createTypeDecorator(cls: Type<any>) {\n            typeFn && typeFn(cls, ...args);\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const annotations = cls.hasOwnProperty(ANNOTATIONS) ?\n                (cls as any)[ANNOTATIONS] :\n                Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];\n            annotations.push(annotationInstance);\n            return cls;\n        };\n        if (chainFn) { chainFn(typeDecorator); }\n        return typeDecorator;\n    }\n\n    if (parentClass) {\n        DecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    DecoratorFactory.prototype.ngMetadataName = name;\n    (<any>DecoratorFactory).annotationCls = DecoratorFactory;\n    return DecoratorFactory as any;\n}\n\nfunction makeMetadataCtor(props?: (...args: any[]) => any): any {\n    return function ctor(...args: any[]) {\n        if (props) {\n            const values = props(...args);\n            // tslint:disable-next-line:forin\n            for (const propName in values) {\n                this[propName] = values[propName];\n            }\n        }\n    };\n}\n\n\n\n\n\nexport function makeParamDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n    const metaCtor = makeMetadataCtor(props);\n    function ParamDecoratorFactory(...args: any[]): any {\n        if (this instanceof ParamDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n        const annotationInstance = new (<any>ParamDecoratorFactory)(...args);\n\n        (<any>ParamDecorator).annotation = annotationInstance;\n        return ParamDecorator;\n\n        function ParamDecorator(cls: any, unusedKey: any, index: number): any {\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const parameters = cls.hasOwnProperty(PARAMETERS) ?\n                (cls as any)[PARAMETERS] :\n                Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];\n\n            // there might be gaps if some in between parameters do not have annotations.\n            // we pad with nulls.\n            while (parameters.length <= index) {\n                parameters.push(null);\n            }\n\n            (parameters[index] = parameters[index] || []).push(annotationInstance);\n            return cls;\n        }\n    }\n    if (parentClass) {\n        ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n    ParamDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>ParamDecoratorFactory).annotationCls = ParamDecoratorFactory;\n    return ParamDecoratorFactory;\n}\n\n\n\n\nexport function makePropDecorator(\n    name: string, props?: (...args: any[]) => any, parentClass?: any): any {\n    const metaCtor = makeMetadataCtor(props);\n\n    function PropDecoratorFactory(...args: any[]): any {\n        if (this instanceof PropDecoratorFactory) {\n            metaCtor.apply(this, args);\n            return this;\n        }\n\n        const decoratorInstance = new (<any>PropDecoratorFactory)(...args);\n\n        // tslint:disable-next-line:no-shadowed-variable\n        return function PropDecorator(target: any, name: string) {\n            const constructor = target.constructor;\n            // Use of Object.defineProperty is important since it creates non-enumerable property which\n            // prevents the property is copied during subclassing.\n            const meta = constructor.hasOwnProperty(PROP_METADATA) ?\n                (constructor as any)[PROP_METADATA] :\n                Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];\n            meta[name] = meta.hasOwnProperty(name) && meta[name] || [];\n            meta[name].unshift(decoratorInstance);\n        };\n    }\n\n    if (parentClass) {\n        PropDecoratorFactory.prototype = Object.create(parentClass.prototype);\n    }\n\n    PropDecoratorFactory.prototype.ngMetadataName = name;\n    (<any>PropDecoratorFactory).annotationCls = PropDecoratorFactory;\n    return PropDecoratorFactory;\n}\n","import { ANNOTATIONS, PROP_METADATA } from './decorator';\nimport { Translate } from '../../i18n/index';\n\n/**\n * 元数据解析\n * 约束：\n * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；\n * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加\n */\nclass MetadataUtil {\n\n  // ----------------------------------------\n  // 类型元数据\n  // ----------------------------------------\n\n  /**\n   * 获取类元数据\n   * 返回结果形如：\n   * [\n   *   Injectable\n   *   NgViewModel\n   *   NgViewModel\n   * ]\n   */\n  static getClassMetadatas(constructor: any): any[] {\n    const metadatas = constructor[ANNOTATIONS];\n    return metadatas;\n  }\n\n  /**\n   * 获取某个class上的某种装饰器\n   * 返回结果：NgViewModel\n   */\n  static getClassMetadataByName(constructor: any, metadataName: string): any {\n    const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);\n    return metadata;\n  }\n\n  static getClassMetadataByNameWithTranslate(\n    constructor: any, metadataName: string,\n    translateService?: Translate, keysToTranslate?: string[]): any {\n    const allClassMetadatas = this.getClassMetadatas(constructor);\n    if (!allClassMetadatas) {\n      return null;\n    }\n    const metadata = allClassMetadatas.find((classMetadata: any) => {\n      return classMetadata.ngMetadataName === metadataName;\n    });\n    if (metadata && translateService && keysToTranslate) {\n      keysToTranslate.forEach((metadataPropKey) => {\n        const propertyVariable: string = metadata[metadataPropKey];\n        if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\n          const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\n          metadata[metadataPropKey] = translateService.transform(translateKey, null);\n        }\n      });\n    }\n    return metadata;\n  }\n\n  // ----------------------------------------\n  // 属性元数据\n  // ----------------------------------------\n\n  /**\n   * 获取所有属性的所有元数据\n   * 返回格式：\n   * {\n   *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],\n   *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]\n   * }\n   */\n  static getPropsMetadatas(constructor: any): any {\n    const allPropMetadatas = constructor[PROP_METADATA];\n    return allPropMetadatas;\n  }\n\n  /**\n   * 获取所有属性的某一类型的元数据\n   * 如果同一属性\n   * 返回结果：\n   * {\n   *    propName1: NgDefaultValue,\n   *    propName2: NgDefaultValue\n   * }\n   */\n  static getPropsMetadatasByName(constructor: any, metadataName: string): { [propName: string]: any } {\n    const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);\n    return metadatas;\n  }\n\n  static getPropsMetadatasByNameWithTranslate(\n    constructor: any, metadataName: string,\n    translateService?: Translate, keysToTranslate?: string[]): { [propName: string]: any } {\n    const metadatas = {};\n    // 读取构造函数中存储的类属性注解。\n    const allPropMetadatas = this.getPropsMetadatas(constructor);\n    if (!allPropMetadatas) {\n      return metadatas;\n    }\n    // 遍历所有属性提取注解信息。\n    Object.keys(allPropMetadatas).forEach((propName: string) => {\n      // 提取当前属性注解对象\n      const propMetadatas: any[] = allPropMetadatas[propName];\n      // 提取指定类型的注解项\n      const metadata = propMetadatas.find((propMetadata: any) => {\n        return propMetadata.ngMetadataName === metadataName;\n      });\n      if (translateService && keysToTranslate) {\n        keysToTranslate.forEach((metadataPropKey) => {\n          const propertyVariable: string = metadata[metadataPropKey];\n          if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {\n            const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();\n            metadata[metadataPropKey] = translateService.transform(translateKey, null);\n          }\n        });\n      }\n      if (metadata) {\n        metadatas[propName] = metadata;\n      }\n    });\n\n    return metadatas;\n  }\n\n  /**\n   * 获取某个属性的所有元数据\n   * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]\n   */\n  static getPropMetadatasByName(constructor: any, propName: string): any[] {\n    // 暂不实现\n    return null;\n  }\n\n  /**\n   * 获取某个属性的某种元数据\n   * 返回格式：NgDefaultValue\n   */\n  static getPropMetadataByName(constructor: any, propName: string, metadataName: string): any {\n    // 暂不实现\n    return null;\n  }\n\n\n  // ----------------------------------------\n  // 参数元数据\n  // ----------------------------------------\n\n}\n\nexport { MetadataUtil };\n","/**\n * 请求头信息\n */\ninterface HttpHeaders {\n  [key: string]: string;\n}\n\n/**\n * Http参数\n */\ninterface HttpParams {\n  [key: string]: string;\n}\n\n/**\n * 请求方法\n */\ntype HttpMethod = | 'GET' | 'DELETE' | 'HEAD' | 'OPTIONS' | 'POST' | 'PUT' | 'PATCH' | 'LINK' | 'UNLINK';\n\n/**\n * HttpMethods\n */\nclass HttpMethods {\n  public static GET: HttpMethod     = 'GET';\n  public static DELETE: HttpMethod  = 'DELETE';\n  public static HEAD: HttpMethod    = 'HEAD';\n  public static OPTIONS: HttpMethod = 'OPTIONS';\n  public static POST: HttpMethod    = 'POST';\n  public static PUT: HttpMethod     = 'PUT';\n  public static PATCH: HttpMethod   = 'PATCH';\n  public static LINK: HttpMethod    = 'LINK';\n  public static UNLINK: HttpMethod  = 'UNLINK';\n}\n\n\n/**\n * 返回值类型\n */\ntype HttpResponseType = | 'arraybuffer' | 'blob' | 'document' | 'json' | 'text' | 'stream';\n\n/**\n * 返回值处理类型\n */\ntype ObserveType = 'body' | 'response';\n\n/**\n * Http响应信息\n */\ninterface HttpResponse {\n  headers: {[key: string]: string};\n  body: any;\n  status: number;\n  statusText: string;\n}\n\n/**\n * Http请求配置\n */\ninterface HttpRequestConfig {\n  params?: HttpParams;\n  body?: any;\n  headers?: HttpHeaders;\n  responseType?: HttpResponseType;\n  observe?: 'body' | 'response';\n}\n\n\nexport { HttpHeaders, HttpParams, HttpMethod, HttpMethods, ObserveType, HttpResponseType, HttpRequestConfig, HttpResponse };\n","import { AxiosInstance, AxiosRequestConfig, AxiosResponse} from 'axios';\nimport { HttpMethod, HttpHeaders, HttpResponse, HttpRequestConfig } from './types';\n\nclass HttpUtil {\n\n  /**\n   * 追加Header\n   */\n  public static appendHeader(headers: HttpHeaders, key: string, value: string): HttpHeaders {\n    headers = Object.assign({}, headers, {[key]: value});\n    return headers;\n  }\n\n  /**\n   * 向RequestConfig中追加body\n   */\n  public static appendBodyToRequestConfig(body: any, requestConfig: HttpRequestConfig) {\n    if (!requestConfig) {\n      requestConfig = {};\n    }\n    requestConfig = Object.assign({}, requestConfig, { body: body});\n\n    return requestConfig;\n  }\n\n  /**\n   * 构造AxiosReqeustConfig\n   */\n  public static buildAxiosRequestConfig(method: HttpMethod, url: string, requestConfig: HttpRequestConfig): AxiosRequestConfig {\n    requestConfig = requestConfig || {};\n\n    const axiosRequestConfig: AxiosRequestConfig = {\n      url: url,\n      method: method,\n      params:  requestConfig.params || null,\n      headers: requestConfig.headers || null,\n      responseType: requestConfig.responseType || 'json',\n      data: requestConfig.body || null\n    };\n    return axiosRequestConfig;\n  }\n\n  /**\n   * 构造Http响应信息\n   */\n  public static buildHttpResponse(axiosResponse: AxiosResponse ) {\n    const httpResponse: HttpResponse = {\n      body: axiosResponse.data,\n      headers: axiosResponse.headers,\n      status: axiosResponse.status,\n      statusText: axiosResponse.statusText\n    };\n    return httpResponse;\n  }\n\n}\n\nexport { HttpUtil };\n","import { Observable, from, of } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\nimport axios from 'axios';\nimport { AxiosInstance, AxiosResponse} from 'axios';\nimport { HttpMethod, HttpRequestConfig } from './types';\nimport { HttpUtil } from './http-util';\n\n/**\n * HttpClient\n */\nclass HttpClient {\n\n  /**\n   * axios实例\n   */\n  private axiosInstance: AxiosInstance;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.axiosInstance = axios.create();\n  }\n\n  /**\n   * 发送GET请求\n   */\n  public get(url: string, requestConfig: HttpRequestConfig): Observable<any> {\n    return this.request('GET', url, requestConfig);\n  }\n\n  /**\n   * 发送POST请求\n   */\n  public post(url: string, body: any, requestConfig: HttpRequestConfig) {\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\n    return this.request('POST', url, requestConfig);\n  }\n\n  /**\n   * 发送PUT请求\n   */\n  public put(url: string, body: any, requestConfig: HttpRequestConfig) {\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\n    return this.request('PUT', url, requestConfig);\n  }\n\n  /**\n   * 发送PATCH请求\n   */\n  public patch(url: string, body: any, requestConfig: HttpRequestConfig) {\n    requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);\n    return this.request('PATCH', url, requestConfig);\n  }\n\n  /**\n   * 发送DELETE请求\n   */\n  public delete(url: string, requestConfig: HttpRequestConfig) {\n    return this.request('DELETE', url, requestConfig);\n  }\n\n  /**\n   * 发送请求\n   */\n  request( method: HttpMethod, url: string, requestConfig: HttpRequestConfig): Observable<any> {\n    const request$ = of(true).pipe(\n      switchMap(() => {\n        const axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);\n        return from(this.axiosInstance.request(axiosRequestConfig));\n      })\n    );\n    return request$.pipe(\n      map((axiosResponse: AxiosResponse) => {\n        const httpResponse = HttpUtil.buildHttpResponse(axiosResponse);\n        return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;\n      })\n    );\n  }\n\n}\n\nexport { HttpClient };\n","export * from './types';\nexport * from './http-util';\nexport * from './http-client';\n\nimport { StaticProvider } from '../core/index';\nimport { HttpClient } from './http-client';\n\nconst HTTP_PROVIDERS: StaticProvider[] = [\n  { provide: HttpClient, useClass: HttpClient, deps: [] }\n];\n\nexport { HTTP_PROVIDERS };\n\n\n","/**\n * 变更记录\n */\nexport class Modification {\n\n  /**\n   * 实体变更路径。如：[1, 'name']\n   * 说明： 1 为实体主键ID， name 为属性名称\n   */\n  path?: string[];\n\n  /**\n   * 原值\n   */\n  preValue?: any;\n\n  /**\n   * 变更后的新值\n   *\n   * value 值类型会根据 type(变更类型)的不同而不同，当type 为以下类型时：\n   * - Add: value的值为json 对象\n   * - ValueChange: value的值为string\\number\\boolean等简单数据\n   * - Remove: value的值为键值对{[key:string]: value} key为主键字段\n   *\n   */\n  value: any;\n\n  /**\n   * 变更类型\n   */\n  type: ModifyType;\n\n  /**\n   * 数据是否通过验证\n   */\n  isValid?: boolean;\n\n  /**\n   * 数据验证结果\n   */\n  errors?: { [type: string]: string };\n\n  /**\n   * 插入位置\n   */\n  position?: 1 | -1;\n\n  /**\n   * 变更集的值\n   */\n  changeSetValue?: any;\n  /**\n   * 重置数据\n   */\n  isReset?: boolean;\n  entityCreate?: boolean;\n\n  /**\n   * 构造函数\n   * @param value 新值\n   * @param modifyType 变更类型\n   * @param path 变更路径\n   * @param preValue 旧值\n   */\n  constructor(value: any, modifyType: ModifyType, path?: string[], preValue?: any, position?: 1 | -1) {\n    this.type = modifyType;\n    this.value = value;\n    this.preValue = preValue;\n    this.path = path;\n    this.position = position;\n  }\n}\n\n/**\n * 变更类型\n */\nexport enum ModifyType {\n\n  /**\n   * 添加\n   */\n  Add = 'ADD',\n  /**\n   * 添加数据\n   */\n  AddData = 'AddData',\n  /**\n   * 克隆数据\n   */\n  Clone = 'CLONE',\n  /**\n   * 删除\n   */\n  Remove = 'REMOVE',\n  RemoveData = 'RemoveData',\n\n  /**\n   * 修改\n   */\n  ValueChange = 'VALUE_CHANGE',\n\n  /**\n   * 加载\n   */\n  Load = 'LOAD',\n\n  /**\n   * 未改变\n   */\n  UnChanged = 'UNCHANGED',\n\n  /**\n   * 分页信息变更\n   */\n  PaginationInfoChange = \"PAGINATION_INFO_CHANGE\",\n\n  /**\n   * 插入\n   */\n  Insert = 'Insert',\n\n  /**\n   * 更新实体\n   */\n  Update = 'UPDATE'\n}\n","/*\n * @Author: Lucus, Witt\n * @Date: 2018-10-30 15:53:59\n * @Last Modified by: Witt\n * @Last Modified time: 2018-11-08 17:25:08\n */\n\nimport { Modification, ModifyType } from './types';\n\nfunction isEqual(value: any, other: any) {\n  return JSON.stringify(value) ===  JSON.stringify(other);\n}\n\n/**\n * 实体数据变更集\n */\nclass ChangeSet {\n\n  /**\n   * 变更集合\n   */\n  protected modifications: Modification[] = [];\n\n  /**\n   *  获取所有的变更记录\n   */\n  public get changes(): Modification[] {\n    return this.modifications;\n  }\n\n  /**\n   * 将变更集添加到集合中\n   * ### 使用示例\n   * ```\n   * const changeSet = new ChangeSet();\n   * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');\n   * changeSet.append(modify)\n   * ```\n   * @param changeItem 变更数据\n   */\n  public append(modification: Modification) {\n    switch (modification.type) {\n      case ModifyType.ValueChange:\n        this.appendValueChangeModification(modification);\n        break;\n      case ModifyType.Add:\n      case ModifyType.Insert:\n      case ModifyType.Clone:\n        this.appendAddModification(modification);\n        break;\n      case ModifyType.Remove:\n        this.appendRemoveModification(modification);\n        break;\n      case ModifyType.Load:\n        break;\n      default:\n        throw new Error('不支持此类型的变更');\n    }\n  }\n\n  /**\n   * 添加值变化变更\n   */\n  private appendValueChangeModification(modification: Modification) {\n    const value = modification.value;\n\n    const existedModification = this.findModifyItemsPath(modification.path);\n    if (existedModification) {\n\n      // 如果存在相同路径的ValueChange类型的变更集，则更新值；\n      existedModification.value = value;\n    } else {\n      const existedAddModification = this.findNewAddItemsPath(modification.path);\n      if (existedAddModification) {\n\n        // @todo：\n        // 1、此处逻辑有问题，value是个字符串，不能直接assign；\n        // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。\n        // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；\n        existedAddModification.value = Object.assign({}, existedAddModification.value, value);\n      } else {\n\n        // 其他情况，新增一条ValueChange变更。\n        this.modifications.push(modification);\n      }\n    }\n  }\n\n  /**\n   * 添加新增变更\n   */\n  private appendAddModification(modification: Modification) {\n    const value = modification.value;\n\n    const existedModification = this.findNewAddItemsPath(modification.path);\n    if (existedModification) {\n\n      // 1、如果已经存在相同路径的Add变更，则合并Value。\n      existedModification.value = existedModification.value.concat(value);\n    } else {\n\n      // 2、如果没有，则新增一条Add变更。\n      this.modifications.push(modification);\n    }\n  }\n\n  /**\n   * 添加删除变更\n   */\n  private appendRemoveModification(modification: Modification) {\n\n    const path = modification.path;\n    const primaryKey = Object.keys(modification.value)[0];\n    const primaryKeyValue = modification.value[primaryKey];\n\n    // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；\n    // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）\n    this.modifications.forEach((addModification: Modification) => {\n\n      // 只处理新增变更\n      if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {\n        return;\n      }\n\n      // @todo 只考虑主从结构，再深的层次暂不考虑\n      if (isEqual(addModification.path, path) === false) {\n        return;\n      }\n\n      // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除\n      addModification.value = addModification.value.filter((addDataItem: any) => {\n        return addDataItem[primaryKey] !== primaryKeyValue;\n      });\n    });\n\n    // 2、移除对应的修改变更\n    const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);\n    this.modifications = this.modifications.filter((valueModification: Modification) => {\n      if (valueModification.type !== ModifyType.ValueChange) {\n        return true;\n      }\n      const valueChangePath = Array.from(valueModification.path);\n      valueChangePath.pop();\n\n      // 路径相同进行移除\n      const isToRemove = isEqual(valueChangePath, fullRemovePath);\n      return !isToRemove;\n    });\n\n    // 先删除下级删除变更，再插入\n    // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景\n    this.removeDescendantRemoveModifications(modification);\n    this.modifications.push(modification);\n  }\n\n  /**\n   * 清空变更集合\n   */\n  public clear() {\n    this.modifications = [];\n  }\n\n\n  /**\n   * 根据path获取Add类型的变更记录\n   * @param path 变更路径\n   */\n  private findNewAddItemsPath(path: any[]) {\n    return this.modifications.find((value, index) => {\n      return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);\n    });\n  }\n\n  /**\n   * 根据path获取ValueChange类型的变更记录\n   * @param path 变更路径\n   */\n  private findModifyItemsPath(path: any[]) {\n    return this.modifications.find((value, index) => {\n      return isEqual(path, value.path) && value.type === ModifyType.ValueChange;\n    });\n  }\n\n  /**\n   * 删除后代（包括自己）所有的删除变更\n   * @todo：临时做一个最小化修改\n   */\n  private removeDescendantRemoveModifications(parentRemoveModification: Modification): void {\n\n    const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);\n\n    // 删除后代修改变更\n    this.modifications = this.modifications.filter((modification: Modification) => {\n      if (modification.type !== ModifyType.Remove) {\n        return true;\n      }\n      const descendantPathWithId = this.createRemovePathWithId(modification);\n      const isDescendant =  this.isDescendantPath(parentPathWithId, descendantPathWithId);\n      return !isDescendant;\n    });\n  }\n\n  /**\n   * 获取删除路径的完整格式\n   * @summary\n   * 1、目前删除变更的路径标记到父集合；\n   * 2、为了方便比较，将被删除的数据id加入到路径中\n   */\n  private createRemovePathWithId(modification: Modification) {\n    const path = modification.path;\n    const primaryKey = Object.keys(modification.value)[0];\n    const primaryKeyValue = modification.value[primaryKey];\n    const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);\n    return pathWithId;\n  }\n\n  /**\n   * 判断是否是后代节点路径\n   * @param parentPath 父节点路径\n   * @param descendantPath 后代节点\n   */\n  private isDescendantPath(parentPath: string[], descendantPath: string[]) {\n    if (parentPath.length > descendantPath.length) {\n      return false;\n    }\n\n    let isDescendantPath = true;\n    parentPath.forEach((parentPathItem: string, parentPathItemIndex: number) => {\n      if (parentPathItem !== descendantPath[parentPathItemIndex]) {\n        isDescendantPath = false;\n        return;\n      }\n    });\n\n    return isDescendantPath;\n  }\n\n}\n\nexport { ChangeSet };\n\n","/*\n * @Author: Witt\n * @Date: 2018-12-27 09:25:38\n * @Last Modified by: Witt\n * @Last Modified time: 2018-12-27 09:39:10\n */\n\n\n/**\n * 路径类型\n */\nenum DataPathNodeType {\n\n  /**\n   * 标记该节点是一个实体主键值，用来在列表上定位一个实体\n   */\n  DataId   = 'DataId',\n\n  /**\n   * 标记该节点是一个属性名，用来在对象上定位一个属性\n   */\n  PropName = 'PropName',\n}\n\n\n/**\n * 路径节点\n */\nclass DataPathNode {\n\n  /**\n   * 上一节点\n   */\n  prev: DataPathNode;\n\n  /**\n   * 下一节点\n   */\n  next: DataPathNode;\n\n  /**\n   * 节点类型\n   */\n  type: DataPathNodeType;\n\n  /**\n   * 路径数据\n   * 对于List类型：  value是主键值，用于指明具体是哪一行；\n   * 对于Object类型：value是属性名，用于指明具体哪一属性。\n   */\n  value: any;\n\n  /**\n   * 构造函数\n   */\n  constructor(type: DataPathNodeType, data: any) {\n    this.type = type;\n    this.value = data;\n\n    this.prev = null;\n    this.next = null;\n  }\n}\n\n\nexport { DataPathNodeType, DataPathNode };\n","/*\n * @Author: Witt\n * @Date: 2018-12-27 09:26:41\n * @Last Modified by: Witt\n * @Last Modified time: 2019-01-15 22:00:45\n */\n\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\n/**\n * 变更路径（简单双向列表）\n */\nclass DataPath {\n\n  /**\n   * 头节点\n   */\n  public head: DataPathNode;\n\n  /**\n   * 长度\n   */\n  public length: number;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.head = new DataPathNode(null, null);\n    this.length = 0;\n  }\n\n  /**\n   * 添加一个节点到头部\n   */\n  public unshift(type: DataPathNodeType, data: any) {\n    const newNode = new DataPathNode(type, data);\n    newNode.next = this.head.next;\n    newNode.prev = this.head;\n\n    this.head.next = newNode;\n    if (newNode.next) {\n      newNode.next.prev = newNode;\n    }\n\n    this.length++;\n  }\n\n  /**\n   * 在链表最后追加一个节点\n   */\n  public push(type: DataPathNodeType, data: any) {\n    const tailNode = this.getTail();\n    const newNode = new DataPathNode(type, data);\n    tailNode.next = newNode;\n    this.length++;\n  }\n\n  /**\n   * 获取链表尾部节点\n   */\n  public getTail(): DataPathNode {\n    let lastNode = this.head;\n    while (lastNode.next) {\n      lastNode = lastNode.next;\n    }\n    return lastNode;\n  }\n\n  /**\n   * 转换为数组格式\n   */\n  public toArray() {\n    const pathArray = [];\n    let currentNode = this.head.next;\n    while (currentNode) {\n      pathArray.push(`${currentNode.type}:${currentNode.value}`) ;\n      currentNode = currentNode.next;\n    }\n    return pathArray;\n  }\n\n  /**\n   * 转换为字符串格式\n   */\n  public toString() {\n    const pathArray = this.toArray();\n    const pathString = pathArray.join(', ');\n    return `[${pathString}]`;\n  }\n\n  /**\n   * 拷贝\n   */\n  public clone(): DataPath {\n    const newDataPath = new DataPath();\n    let curDataNode = this.head.next;\n    while (curDataNode) {\n      newDataPath.push(curDataNode.type, curDataNode.value);\n      curDataNode = curDataNode.next;\n    }\n    return newDataPath;\n  }\n}\n\nexport { DataPath };\n","/*\n * @Author: Witt\n * @Date: 2019-08-14 14:11:51\n * @Last Modified by: Witt\n * @Last Modified time: 2019-08-14 16:11:51\n */\n\nimport { DataTypeInfo } from './data_type_info';\n\n\n/**\n * 实体属性分组\n */\nenum DataPropGroup {\n\n  /**\n   * 简单类型\n   */\n  Primitive = 'Primitive',\n\n  /**\n   * 实体类型\n   */\n  Object = 'Object',\n\n  /**\n   * 动态实体类型\n   */\n  Dynamic = 'Dynamic',\n\n  /**\n   * 列表类型\n   */\n  List = 'List'\n\n}\n\n\n/**\n * 实体属性信息\n */\nclass DataPropInfo {\n\n  /**\n   * 属性类型\n   */\n  public group: DataPropGroup;\n\n  /**\n   * 属性名称\n   */\n  public name: string;\n\n  /**\n   * 影射名称\n   */\n  public mapping: string;\n\n  /**\n   * 属性类型描述\n   */\n  public typeInfo: DataTypeInfo;\n\n  /**\n   * 元数据信息\n   * @todo\n   * 1、EntityPropInfo不应该认识元数据描述，不能强识别元数据上的属性；\n   * 2、将来元数据可能有多套，每一套有自己的解析 元数据解析框架还没有做，所以临时处理，不对暴露\n   */\n  public metadataInfo?: any;\n}\n\nexport {DataPropGroup, DataPropInfo };\n","import 'reflect-metadata';\nimport { makePropDecorator } from '../../core/index';\nimport { ClassType } from '../types';\nimport { PropMetadata } from './prop_meatadata';\n\n/**\n * 简单属性元数据\n */\nexport interface PrimitivePropMetadata extends PropMetadata {\n\n  /**\n   * 属性名称\n   */\n  property?: string;\n\n  /**\n   * 字段名称\n   */\n  dataField?: string;\n\n  /**\n   * 原始字段名称\n   */\n  originalDataField?: string;\n\n  /**\n   * 原始字段类型\n   */\n  originalDataFieldType?: string;\n\n  /**\n   * 是否为主键\n   */\n  primary?: boolean;\n\n  /**\n   * 是否为外键\n   */\n  foreign?: boolean;\n\n  /**\n   * 默认值\n   */\n  defaultValue?: any;\n\n  /**\n   * 验证规则\n   */\n  validRules?: any[];\n\n  /**\n   * 初始值，用于字段清空后\n   */\n  initValue?: any;\n\n  /**\n   * 启用多语录入\n   */\n  enableMultiLangInput?: boolean;\n}\n\n\n/**\n * 元数据名称\n */\nexport const PRIMITIVE_PROP_META = 'PrimitivePropMeta';\n\n\n/**\n * 【简单属性装饰器工厂】接口\n * @summary\n * 类型可以为：NgFieldProperty、string、ClassType\n * 当为string 时，则设其映射字段；\n * 当为ClassType时，则设置集合中的记录类型\n */\nexport interface PrimitivePropMetaDecorator {\n\n  (obj: PrimitivePropMetadata | string | ClassType): any;\n\n  (obj?: PrimitivePropMetadata | string | boolean): any;\n\n  new(obj?: PrimitivePropMetadata | string | boolean): any;\n}\n\n\n/**\n * 【简单属性装饰器工厂】的工厂\n */\nfunction makePrimitivePropMetaDecorator(options?: PrimitivePropMetadata | string | boolean): any {\n\n  let metadata: PrimitivePropMetadata = {\n    primary: false,\n    foreign: false\n  };\n\n  if (options) {\n    const paramType = typeof options;\n    switch (paramType) {\n      case 'boolean':\n        metadata.primary = Boolean(options);\n        break;\n      case 'string':\n        metadata.dataField = String(options);\n        break;\n      case 'object':\n        metadata = Object.assign(metadata, options);\n        break;\n    }\n  }\n  return metadata;\n}\n\n\n/**\n * 简单属性装饰器工厂\n */\nexport const PrimitivePropMeta: PrimitivePropMetaDecorator = makePropDecorator(PRIMITIVE_PROP_META, makePrimitivePropMetaDecorator);\n","class StringUtil {\n\n  /**\n     * 字符串格式化\n     */\n  public static format(value: string, options) {\n    const { maxLenght, prefix = '', suffix = '', ellipsis = '...' } = options;\n    if (!maxLenght) return value;\n    if (!value) return value;\n    if (maxLenght && value.length > maxLenght) {\n      value = value.slice(0, maxLenght)\n      return prefix + value + suffix + ellipsis;\n    }\n    return prefix + value + suffix;\n  }\n\n  public static filterSearchValue(value: any, options) {\n    if (value == undefined || value == null || value == '') {\n      return value;\n    }\n    value = value.trim();\n    if (options == undefined || options == null || options == '') {\n      value = value.replace(/[<>&\"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' }[c]; });\n      return value;\n    }\n    if (options && options.text == \"\") {\n      value = value.replace(/[<>&\"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' }[c]; });\n      return \"<p>\" + value + \"</p>\";\n    }\n    if (typeof options === 'string') {\n      const re = new RegExp(`${options}`, 'g');\n      let newStr = value.replace(re, `##s1p1##${options}##s2p2##`);\n      newStr = newStr.replace(/[<>&\"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' }[c]; });\n      newStr = newStr.replace(/##s1p1##/g, '<span style=\"color:red\">');\n      newStr = newStr.replace(/##s2p2##/g, \"</span>\");\n      return `<p>${newStr}</p>`;\n    }\n    if (typeof options === 'object') {\n      const { text, style } = options;\n      const re = new RegExp(`${text}`, 'g');\n      let newStr = value.replace(re, \"##s1p1##\" + style + \"##s2p2##\" + text + \"##s3p3##\");\n      newStr = newStr.replace(/[<>&\"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '\"': '&quot;' }[c]; });\n      newStr = newStr.replace(/##s1p1##/g, \"<span style=\\\"\");\n      newStr = newStr.replace(/##s2p2##/g, \"\\\">\");\n      newStr = newStr.replace(/##s3p3##/g, \"</span>\");\n      return `<p>${newStr}</p>`;\n    }\n  }\n}\n\nexport { StringUtil };\n","class NumberUtil {\n\n  /**\n     * 数字格式化\n     * {\n     *   precision: 2,\n     *   decimal: true,\n     *   thousand: ','\n     *   prefix: '',\n     *   suffix: ''\n     * }\n     */\n  public static format(value, options) {\n\n    // 参数处理\n    let decimals = (options.precision || options.precision === 0) ? options.precision : 2;\n    let decimalPoint = options.decimal || '.';\n    let thousandsSep = options.thousand || '';\n    let prefix = options.prefix || '';\n    let suffix = options.suffix || '';\n\n    let prefixType = options.prefixType;\n    if (prefixType == \"dynamic\" && options.prefix) {\n      // 表示前缀为一个函数  那么执行函数定义\n      let prefixFunc = new Function(\"return \" + options.prefix);\n      prefix = prefixFunc()(options.sourceData);\n    }\n\n    value = (value + '').replace(/[^0-9+-Ee.]/g, '');\n    let s;\n\n    // 处理精度\n    let toFixedFix = function (n, prec) {\n      var k = Math.pow(10, prec);\n      return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;\n    };\n    s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');\n\n    // 处理千分位\n    if (thousandsSep) {\n      let pattern = /(-?\\d+)(\\d{3})/;\n      while (pattern.test(s[0])) {\n        s[0] = s[0].replace(pattern, \"$1\" + thousandsSep + \"$2\");\n      }\n      if ((s[1] || '').length < decimals) {\n        s[1] = s[1] || '';\n        s[1] += new Array(decimals - s[1].length + 1).join('0');\n      }\n    }\n\n    let formatedValue = s.join(decimalPoint);\n    formatedValue = `${prefix}${formatedValue}${suffix}`;\n    return formatedValue;\n  }\n\n}\n\nexport { NumberUtil };","/**\n * 布尔工具类\n */\nclass BoolUtil {\n  \n  /**\n   * 布尔值格式化\n  */\n  public static  format(value, options) {\n    if (value === true) {\n      return '是';\n    } else {\n      return '否';\n    }\n  }\n}\n\nexport { BoolUtil };\n\n\n","class EnumUtil {\n\n  /**\n   * 枚举格式化\n   * {\n   *  enumData: [\n   *    {value: 'value1', name: 'name1'},\n   *    {value: 'value2', name: 'name2'}\n   *  ]\n   * }\n   */\n  static format(value, options) {\n    const separator = options.separator;\n    const enumOptions = options.enumData;\n    let valueArry = []\n    if (value && separator) {\n      valueArry = value.split(separator);\n    }\n    if (valueArry.length > 1) {\n      const nameArry = valueArry.map(item => {\n        const targetEnumOption = enumOptions.find((enumOption) => {\n          return enumOption.value === item;\n        })\n        if (!targetEnumOption) {\n          console.error(`找不到${item}对应的枚举选项`);\n          return item;\n        }\n        return targetEnumOption.name;\n      })\n      return nameArry.join(separator);\n    }\n    const targetEnumOption = enumOptions.find((enumOption) => {\n      return enumOption.value === value;\n    });\n\n    if (!targetEnumOption) {\n      console.error(`找不到${value}对应的枚举选项`);\n      return value;\n    }\n\n    return targetEnumOption.name;\n  }\n}\n\nexport { EnumUtil };\n\n","import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';\nimport dayjs from 'dayjs';\nimport IsBetween from 'dayjs/plugin/IsBetween';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport Calendar from 'dayjs/plugin/calendar';\nimport 'dayjs/locale/zh-cn';\ndayjs.locale('zh-cn');\n/**\n * 日期处理类\n */\nclass DateUtil {\n\n  /**\n   * 空日期字符串（N版）\n   * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除\n   */\n  // static emptyDateTimeString = '0001-01-01T00:00:00';\n  static emptyDateTimeString = null;\n\n  /**\n   * 默认空日期字符串（ISO标准格式）\n   */\n  // static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';\n  static emptyISODateTimeString = null;\n\n  /**\n   * 默认日期听格式\n   */\n  static defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;\n\n  static defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';\n\n  static defaultDateFormat = 'yyyy-MM-dd';\n\n  static defaultTimeFormat = 'HH:mm:ss';\n\n  /**\n   * 将日期（或日期字符串）转换为完整的的ISO格式的字符串\n   */\n  static formatISO(dateOrDateString: string | Date): string {\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\n      return this.emptyISODateTimeString;\n    }\n    const dateObj = this.parse(dateOrDateString);\n    return format(dateObj, this.defaultISOFormat);\n  }\n\n  /**\n   * 将日期（或日期字符串）转换为指定格式的字符串\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\n   * @param dateFormat 日期格式字符串\n   */\n  static format(dateOrDateString: string | Date, dateFormat?: string): string {\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\n      return this.emptyISODateTimeString;\n    }\n    const dateObj = this.parse(dateOrDateString);\n    dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;\n    return format(dateObj, dateFormat);\n  }\n\n  static dateShow(dateOrDateString: string | Date, type: string) {\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\n      return this.emptyISODateTimeString;\n    }\n    if (!type || \"\" === type) {\n      return;\n    }\n    return this[type] && this[type](dateOrDateString)\n  }\n\n  static dateOperation(dateOrDateString: string | Date, options) {\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\n      return this.emptyISODateTimeString;\n    }\n    const { type = \"\", option } = options;\n    if (!type || \"\" === type) {\n      return;\n    }\n    if ('isSame' === type) {\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\n    }\n    if ('isBefore' === type) {\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\n    }\n    if ('isAfter' === type) {\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity'])\n    }\n    if ('isBetween' === type ) {\n      return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains'])\n    }\n    if (!option) {\n      return this[type] && this[type](dateOrDateString)\n    }\n    return this[type] && this[type](dateOrDateString, option)\n  }\n\n\n\n  static relativeTime(dateOrDateString: string | Date, option) {\n    dayjs.extend(relativeTime)\n    const dateObj = dayjs(dateOrDateString);\n    if (!option) {\n      return dayjs(dateObj).fromNow()\n    }\n    return dayjs(dateObj).fromNow(option)\n  }\n\n  static isToday(dateOrDateString: string | Date) {\n    const todayDate = new Date();\n    const dateObj = dayjs(dateOrDateString);\n    return this.isSame(dateObj, todayDate, 'date');\n  }\n\n  static calendar(dateOrDateString: string | Date, option) {\n    const dateObj = dayjs(dateOrDateString);\n    dayjs.extend(Calendar)\n    if (option) {\n      return dayjs().calendar(dateObj, { ...option })\n    }\n    return dayjs().calendar(dateObj, {\n      sameDay: '[今天] HH:mm',\n      nextDay: '[明天] HH:mm',\n      lastDay: '[昨天] HH:mm',\n      sameElse: 'YYYY-MM-DD'\n    })\n  }\n\n\n  /**\n   * 创建日期\n   * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串\n   */\n  static parse(dateOrDateString: string | Date): Date {\n    if (this.isEmptyDateOrDateString(dateOrDateString) === true) {\n      return null;\n    }\n\n    if (this.isDate(dateOrDateString) === true) {\n      return dateOrDateString as Date;\n    }\n\n    return parseISO(dateOrDateString as string);\n  }\n\n  /**\n   * 是否是日期对象\n   */\n  static isDate(date: any): boolean {\n    return isDate(date);\n  }\n\n  /**\n   * 是否是空日期或者空日期字符串\n   * @param dateOrDateString 日期或日期字符串\n   */\n  static isEmptyDateOrDateString(dateOrDateString: string | Date) {\n    if (this.isDate(dateOrDateString) === true) {\n      return this.isEmptyDate(dateOrDateString as Date);\n    }\n    return this.isEmptyDateString(dateOrDateString as string);\n  }\n\n  /**\n   * 是否为空日期字符串\n   * @param date 日期对象\n   */\n  static isEmptyDate(date: Date) {\n    if (!date) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 是否是空日期字符串\n   * @param dateString 日期字符串\n   */\n  static isEmptyDateString(dateString: string) {\n    if (!dateString || dateString.startsWith('0001-01-01') === true) {\n      return true;\n    }\n    return false;\n  }\n\n  /**\n   * 两个日期是否相等\n   * @param dateOrDateString1 日期对象或字符串\n   * @param dateOrDateString1 日期对象或字符串\n   * @return 相等返回true，否则返回false\n   */\n  static isEqual(dateOrDateString1: string | Date, dateOrDateString2: string | Date): boolean {\n    const dateObj1 = this.parse(dateOrDateString1);\n    const dateObj2 = this.parse(dateOrDateString2);\n    if (dateObj1 === dateObj2) {\n      return true;\n    }\n    return isEqual(dateObj1, dateObj2);\n  }\n\n  /**\n   * 两个日期是否相等\n   * @param dateOrDateString1 日期对象或字符串\n   * @param dateOrDateString1 日期对象或字符串\n   * @return 返回-1、0、1\n   */\n  static compare(dateOrDateString1: string | Date, dateOrDateString2: string | Date) {\n    const dateObj1 = this.parse(dateOrDateString1);\n    const dateObj2 = this.parse(dateOrDateString2);\n    if (this.isEqual(dateObj1, dateObj2) === true) {\n      return 0;\n    }\n\n    // 处理解析后为null的场景，null比所有有效日期小\n    if (!dateObj1 && this.isDate(dateObj2) === true) {\n      return -1;\n    }\n    if (!dateObj2 && this.isDate(dateObj1) === true) {\n      return 1;\n    }\n\n    return compareAsc(dateObj1, dateObj2);\n  }\n\n\n  /**\n   * \n   * @param currentDate 当前日期\n   * @param targetDate 目标日期\n   * @param type 比较类型 date\tD\t天00:00 day\td\t星期00:00 month\tM\t月第一天00:00 year\ty\t1月1日00点 week\tw\t周第一天00:00hour\th\t00:00:00minute\tm\t00:00second\ts\t00millisecond\tms\t0\n   * @returns \n   */\n  static isSame(currentDate, targetDate, type?) {\n    if (type) {\n      return dayjs(currentDate).isSame(dayjs(targetDate), type)\n    }\n    return dayjs(currentDate).isSame(dayjs(targetDate));\n  }\n\n  /**\n   * \n   * @param currentDate 当前日期\n   * @param targetDate 目标日期\n   * @returns boolean\n   */\n  static isBefore(currentDate, targetDate, type?) {\n    if (type) {\n      return dayjs(currentDate).isBefore(dayjs(targetDate), type)\n    }\n    return dayjs(currentDate).isBefore(dayjs(targetDate));\n  }\n\n  /**\n * \n * @param currentDate 当前日期\n * @param targetDate 目标日期\n * @returns boolean\n */\n  static isAfter(currentDate, targetDate, type?) {\n    if (type) {\n      return dayjs(currentDate).isAfter(dayjs(targetDate), type)\n    }\n    return dayjs(currentDate).isAfter(dayjs(targetDate));\n  }\n\n\n  /**\n   * \n   * @param currentDate \n   * @param targetDate1 \n   * @param targetDate2 \n   * @returns \n   */\n  static isBetween(currentDate, targetDate1, targetDate2, type, contains) {\n    dayjs.extend(IsBetween)\n    if (type) {\n      return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);\n    }\n    return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);\n  }\n}\n\nexport { DateUtil };\n\n","class ArrayUtil {\n\n  /**\n   * 从数组中删除一项\n   */\n  public static remove(arr: any[], itemToRemove: any): void {\n    const indexToRemove = arr.findIndex((item: any) => {\n      return item === itemToRemove;\n    });\n    this.removeByIndex(arr, indexToRemove);\n  }\n  \n  /**\n   * 从数组中删除indexToRemove对应的项\n   * @param index \n   */\n  public static removeByIndex(arr: any[], indexToRemove: number) {\n    if (!arr || arr[indexToRemove] !== undefined) {\n      \n    }\n    arr.splice(indexToRemove, 1);\n  }\n\n\n}\n\nexport { ArrayUtil };","class ObjectUtil {\n\n  /**\n   * 检查是否是简单对象\n   */\n  public static isPlainObject(value): boolean {\n    if (!(typeof value === 'object' && value !== null) || Object.prototype.toString.call({}) !== '[object Object]') {\n      return false;\n    }\n    if (Object.getPrototypeOf(value) === null) {\n      return true;\n    }\n    let proto = value;\n    while (Object.getPrototypeOf(proto) !== null) {\n      proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(value) === proto;\n  }\n}\n\nexport { ObjectUtil };\n","/**\n * 数据路径处理\n */\nclass BindingPathConverter {\n\n  /**\n   * (BindingPathString | BindingPathArray) => BindingPathArray\n   * @param bindingPath BindingPath的字符串或者数组格式\n   * @return BindingPath数组\n   */\n  public static toBindingPathArray(bindingPath: string | string[]): string[] {\n    let bindingPathArray: string[];\n    if (typeof bindingPath === 'string') {\n      bindingPathArray = bindingPath.split('/').filter((part: string) => {\n        return part !== '';\n      });\n      return bindingPathArray;\n    } else {\n      bindingPathArray = bindingPath.concat([]);\n    }\n\n    return bindingPathArray;\n  }\n\n  /**\n   * BindingPathArray => BindingPathString\n   */\n  public static toBindingPathString(bindingPathArray: string[]): string {\n    return '/' + bindingPathArray.join('/');\n  }\n}\n\nexport { BindingPathConverter };\n","import { BindingPathConverter } from './binding_path_converter';\n\n/**\n * BindingPath比较器\n */\nclass BindingPathComparer {\n\n  /**\n   * 是否相等\n   */\n  public static isEqual(srcPath: string | string[], dstPath: string | string[]) {\n    const srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);\n    const dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);\n\n    const isEqual = srcPathArray.every((srcPathItem: string, srcPathIndex: number) => {\n      return srcPathItem === dstPathArray[srcPathIndex];\n    });\n\n    return isEqual;\n  }\n\n  /**\n   * 是否是父路径\n   */\n  public static isParent(childPath: string | string[], parentPath: string | string[]): boolean {\n\n    const childPathArray  = BindingPathConverter.toBindingPathArray(childPath);\n    const parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);\n\n    // 长度差1个\n    if (childPathArray.length !== parentPathArray.length + 1) {\n      return;\n    }\n\n    return this.isAncestor(childPath, parentPath);\n  }\n\n  /**\n   * 是否是祖先路径\n   */\n  public static isAncestor(descendantPath: string | string[], ancestorPath: string | string[]): boolean {\n    const descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);\n    const ancestorPathArray   = BindingPathConverter.toBindingPathArray(ancestorPath);\n\n    if (descendantPath.length <= ancestorPathArray.length) {\n      return false;\n    }\n\n    const isAncestor = ancestorPathArray.every((ancestorPathItem: string, ancestorPathIndex: number) => {\n      return ancestorPathItem === descendantPathArray[ancestorPathIndex];\n    });\n\n    return isAncestor;\n  }\n\n}\n\nexport { BindingPathComparer };\n","import { BindingPathConverter } from './binding_path_converter';\n\n/**\n * BindingPath遍历器\n */\nclass BindingPathTraverser {\n\n  /**\n   * 获取叶子节点的Path\n   */\n  public static getLeafPathString(bindingPath: string | string[]): string {\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\n    return bindingPathArray.pop();\n  }\n\n  /**\n   * 获取父路径\n   */\n  public static getParentPathString(bindingPath: string | string[]): string {\n    const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPath);\n    bindingPathArray.pop();\n    return '/' + bindingPathArray.join('/');\n  }\n}\n\nexport { BindingPathTraverser };\n","/**\n * 变更相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\n/**\n * 绑定数据变更\n */\nexport interface Change {\n\n  /**\n   * 变更类型\n   */\n  type: ChangeType;\n\n  /**\n   * 变更路径\n   */\n  path: string[];\n\n  /**\n   * 变更后的值\n   */\n  value?: any;\n\n  /**\n   * 变更前的值\n   */\n  preValue?: any;\n\n  /**\n   * 错误信息\n   */\n  errors?: any;\n\n  /**\n   * 验证后回调，会将验证结果传入\n   */\n  cb?: Function;\n\n  /**\n   * 是否提交过，为true时开启输入时验证\n   */\n  isSubmitted?: boolean;\n\n  /**\n   * 在grid中使用，如果存在id，则将errors在form中以\n   * {\n   *  [id]: errors\n   * }\n   * 的形式保存一份\n   */\n  id?: string;\n\n  isUdt?: boolean;\n\n  isGrid?: boolean;\n  create?: boolean;\n  [prop: string]: any;\n}\n\n/**\n * 绑定数据变更类型\n */\nexport enum ChangeType {\n  Load = 'Load',\n  Append = 'Append',\n  Remove = 'Remove',\n  Swap = 'Swap',\n  SelectionChanged = 'SelectionChanged',\n  ValueChanged = 'ValueChanged',\n  UpdateErrors = 'UpdateErrors',\n  GlobalSelectionChanged = 'GlobalSelectionChanged',\n  /**\n   * 分页信息变化\n   */\n  PaginationInfoChange = 'PaginationInfoChange',\n}\n\n/**\n * 视图变更\n */\nexport interface ViewChange {\n  type: ViewChangeType;\n  path: string[];\n  value: any;\n  preValue?: any;\n  [prop: string]: any;\n}\n\n/**\n * 视图变更类型\n */\nexport enum ViewChangeType {\n  ValueChanged\n}\n\n/**\n * Form值变化事件\n */\nexport interface FormValueChange {\n  path: string[]; // 字段路径\n  value: any; // 新值\n  preValue?: any; // 旧值\n  command: string; // 监听命令\n  entityChanged: boolean; // 实体是否已改变\n}\n\n/**\n * 实体值变化事件\n */\nexport interface EntityValueChange {\n  paths: string[]; // 字段路径\n  value: any; // 新值\n  preValue?: any; // 旧值\n  changed: boolean; // 实体是否已改变\n  [prop: string]: any;\n}","/**\n * 绑定属性相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\n/**\n * 属性类型\n */\nexport enum BindingPropertyType {\n\n  /**\n   * 简单类型\n   */\n  Plain  = 'Plain',\n\n  /**\n   * 对象类型\n   */\n  Object = 'Object',\n\n  /**\n   * 列表类型\n   */\n  List   = 'List',\n\n  /**\n   * 动态类型\n   */\n  Dynamic = 'Dynamic'\n}\n\n\n/**\n * 绑定属性\n */\nexport interface BindingProperty {\n\n  /**\n   * 属性名称\n   */\n  name: string;\n\n  /**\n   * 属性类型\n   */\n  type: BindingPropertyType;\n\n  /**\n   * 对应实体类型，当属性类型为Object、List类型时，设置该属性。\n   */\n  entityType?: any;\n\n  /**\n   * 是否为主键\n   */\n  isPrimaryKey?: boolean;\n\n  /**\n   * 启用多语录入\n   */\n  enableMultiLangInput?: boolean;\n\n}\n","import {Type} from '../core/index';\nimport { Entity, FieldMetadataUtil } from '../entity/index';\nimport { BindingProperty, BindingPropertyType } from './binding_property';\n\n/**\n * 属性工具类\n */\nclass PropertyUtil {\n\n  /**\n   * 获取实体上的属性集合，并将他们转换成BindingProperty集合\n   * @param  entityType 实体类型\n   * @returns 绑定属性集合\n   */\n  static getProperties(entityType: Type<Entity>): BindingProperty[] {\n    const properties = [];\n\n    // Plain\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\n    Object.keys(ngFieldProperties).forEach((propertyName: string) => {\n      const ngFieldProperty = ngFieldProperties[propertyName];\n      properties.push({\n        name: propertyName,\n        type: BindingPropertyType.Plain,\n        isPrimaryKey: ngFieldProperty.primary,\n        isForeignKey: ngFieldProperty.foreign,\n        enableMultiLangInput: ngFieldProperty.enableMultiLangInput\n      });\n    });\n\n    // Object\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\n    Object.keys(ngObjectProperties).forEach((propertyName: string) => {\n      const ngObjectProperty = ngObjectProperties[propertyName];\n      properties.push({\n        name: propertyName,\n        type: BindingPropertyType.Object,\n        entityType: ngObjectProperty.type\n      });\n    });\n\n    // List\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\n    Object.keys(ngListProperties).forEach((propertyName: string) => {\n      const ngListProperty = ngListProperties[propertyName];\n      properties.push({\n        name: propertyName,\n        type: BindingPropertyType.List,\n        entityType: ngListProperty.type\n      });\n    });\n\n    // Dynamics\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\n    Object.keys(ngDynamicProperties).forEach((propertyName: string) => {\n      const ngDynamicProperty = ngDynamicProperties[propertyName];\n      properties.push({\n        name: propertyName,\n        type: BindingPropertyType.Dynamic,\n        entityType: ngDynamicProperty.type\n      });\n    });\n\n    return properties;\n  }\n\n  static getDynamicProperties(dynamicData: any): BindingProperty[] {\n    const properties = [];\n    Object.keys(dynamicData).forEach((propertyName: string) => {\n      if (dynamicData.hasOwnProperty(propertyName)) {\n        if (dynamicData[propertyName] instanceof Object) {\n          properties.push({\n            name: propertyName,\n            type: BindingPropertyType.Dynamic,\n            entityType: null\n          });\n        } else {\n          properties.push({\n            name: propertyName,\n            type: BindingPropertyType.Plain,\n            isPrimaryKey: false,\n            isForeignKey: false\n          });\n        }\n      }\n    });\n    return properties;\n  }\n  /**\n   * 根据属性名获取属性\n   */\n  static getPropertyByName(properties: BindingProperty[], propertyName: string): BindingProperty {\n    const targetProperty =  properties.find((property: BindingProperty) => {\n      return property.name === propertyName;\n    });\n    return targetProperty;\n  }\n\n  /**\n   * 获取实体主键名\n   * @param properties 属性集合\n   * @returns 主键名\n   */\n  static getPrimaryKey(properties: BindingProperty[]): string {\n\n    // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查\n    const primaryProperty = properties.find((property: BindingProperty) => {\n      return property.isPrimaryKey === true;\n    });\n    return primaryProperty ? primaryProperty.name : '';\n  }\n\n}\n\nexport { PropertyUtil };\n","/**\n * BindingObject相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { Subject, Observable, of } from 'rxjs';\n\nimport { Change, ChangeType, ViewChange, ViewChangeType } from './changes';\nimport { BindingProperty, BindingPropertyType } from './binding_property';\nimport { BindingList } from './binding_list';\nimport { PropertyUtil } from './property_util';\n\ninterface InvokeOnValueChange {\n  (preValue, value, entityChanged: boolean): Observable<boolean>;\n}\n\n/**\n * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。\n */\nclass BindingObject {\n\n  /**\n   * immutable值对象\n   */\n  private innerValues: Map<string, any>;\n\n  /**\n   * 父对象或父列表\n   */\n  public parent: BindingList | BindingObject;\n\n  /**\n   * 实体引起的变更\n   */\n  public changes: Subject<Change>;\n\n  /**\n   * 界面层引起的变更流\n   */\n  public viewChanges: Subject<ViewChange>;\n\n  /**\n   *  属性集合\n   */\n  public properties: BindingProperty[];\n\n  /**\n   * 主键名\n   */\n  public primaryKey: string;\n\n  /**\n   * 主键值\n   */\n  public get primaryKeyValue() {\n    return this.primaryKey ? this.getValue(this.primaryKey) : '';\n  }\n\n  /**\n   * 标识是否提交过\n   */\n  public isShowValidationMsg = false;\n\n  /**\n   * 以{ [propertyName]: FormControl }的形式存放每条数据的control\n   */\n  public controlMap: any = {};\n\n  /**\n   * 设置是否提交过\n   */\n  public setShowValidationMsg(flag: boolean) {\n    this.isShowValidationMsg = flag;\n  }\n\n\n  /**\n   * 构造函数\n   * @param properties 属性集合\n   */\n  constructor(properties: BindingProperty[]) {\n    this.properties = properties;\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\n\n    this.innerValues = new Map<string, any>();\n    this.changes = new Subject<Change>();\n    this.viewChanges = new Subject<ViewChange>();\n  }\n\n  /**\n   * 根据属性名获取属性值\n   * @param   propertyName 属性名\n   * @returns 属性值\n   */\n  public getValue(propertyName: string): any {\n    return this.innerValues.get(propertyName);\n  }\n\n  /**\n   * 设置属性值\n   * @param propertyName        属性名\n   * @param propertyValue       属性值\n   * @param emitEventToView     是否通知View层去更新界面，默认为false\n   * @param emitEventToEntity   是否通知Entity层去更新值，默认为false\n   * @param errors              错误消息\n   * @param invokeOnValueChange 值变化事件执行句柄\n   */\n  public setValue(\n    propertyName: string, propertyValue: any,\n    emitEventToView: boolean = false, emitEventToEntity: boolean = false,\n    errors?: any, invokeOnValueChange?: InvokeOnValueChange\n  ): void {\n\n    const oldPropertyValue = this.getValue(propertyName);\n\n    // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue\n    if (oldPropertyValue === propertyValue) {\n      return;\n    }\n\n    if (!invokeOnValueChange || oldPropertyValue === propertyValue) {\n      // 设定缺省\n      invokeOnValueChange = function (preValue, value, entityChanged: boolean) {\n        return of(true);\n      };\n    }\n\n    if (emitEventToEntity === true) {\n      // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；\n      // if(!this.innerValues.has(propertyName)) {\n      //   return;\n      // }\n      // 执行实体值变化前事件\n      invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe((result) => {\n        if (result) {\n          // 如果成功，执行变化，并通知实体变化\n          this.innerValues = this.innerValues.set(propertyName, propertyValue);\n          const viewChange = {\n            type: ViewChangeType.ValueChanged,\n            path: [propertyName],\n            value: propertyValue,\n            errors: errors\n          };\n          this.viewChanges.next(viewChange);\n          // 如果需要通知视图，通知视图相应修改\n          if (emitEventToView === true) {\n            this.changes.next({\n              type: ChangeType.ValueChanged,\n              path: [propertyName],\n              value: propertyValue,\n              id: this.primaryKeyValue,\n              errors: errors\n            });\n          }\n          // 执行实体值变化后事件\n          invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\n        } else {\n          // 如果失败，不再通知实体变化\n          // 并执行界面回滚操作\n          this.changes.next({\n            type: ChangeType.ValueChanged,\n            path: [propertyName],\n            value: oldPropertyValue,\n            id: this.primaryKeyValue,\n            errors: errors\n          });\n        }\n      });\n    } else {\n      // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件\n      this.innerValues = this.innerValues.set(propertyName, propertyValue);\n      if (emitEventToView === true) {\n        this.changes.next({\n          type: ChangeType.ValueChanged,\n          path: [propertyName],\n          value: propertyValue,\n          id: this.primaryKeyValue,\n          errors: errors\n        });\n      }\n      // 执行实体值变化后事件\n      invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();\n    }\n  }\n\n  /**\n   * 将BindingObject实例转换成JSON对象\n   */\n  public toJSON(options?: any): any {\n    const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\n    const result = {};\n    this.properties.forEach((property: BindingProperty) => {\n      const propName = property.name;\n      if (property.type === BindingPropertyType.List) {\n        const list: BindingList = this[propName];\n        result[propName] = list.toJSON(options);\n      } else if (property.type === BindingPropertyType.Object) {\n        const object: BindingObject = this[propName];\n        result[propName] = object.toJSON(options);\n      } else if (property.type === BindingPropertyType.Dynamic) {\n        const object: BindingObject = this[propName];\n        result[propName] = object.toJSON(options);\n      } else {\n\n        // 1、对于多语录入字段；\n        // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。\n        if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {\n          const multiLangValueObj = this.getValue(propName);\n          if (multiLangValueObj) {\n            result[propName] = multiLangValueObj[langCode];\n          } else {\n            result[propName] = multiLangValueObj;\n          }\n        } else {\n          result[propName] = this.getValue(propName);\n        }\n      }\n    });\n\n    return result;\n  }\n}\n\nexport { BindingObject, InvokeOnValueChange };\n","/**\n * 绑定列表工厂相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { BindingList } from './binding_list';\nimport { BindingProperty } from './binding_property';\n\n/**\n * BindingList工厂用于创建一个空的BindingList对象，并将当前行的属性影射到BindingList对象上。\n *\n * **示例代码**\n * ```ts\n * const deptProperties: BindingProperty[] = PropertyUtil.getProperties(DeptEntity);\n * const deptList = BindingListFactory.create(deptProperties);\n * ```\n */\nclass BindingListFactory {\n\n  /**\n   * 创建BindingList实例，并扩展其属性\n   * @param bindingProperties 绑定属性集合\n   */\n  static create(bindingProperties: BindingProperty[]): BindingList {\n    const bindingList = new BindingList(bindingProperties);\n    this.extendProperties(bindingList, bindingProperties);\n    return bindingList;\n  }\n\n  /**\n   * 扩展BindingList属性，将当前行上的属性映射到列表上\n   * @param bindingList       要扩展的绑定列表\n   * @param bindingProperties 绑定属性集合\n   */\n  static extendProperties(bindingList: BindingList, bindingProperties: BindingProperty[]) {\n\n    bindingProperties.forEach((bindingProperty: BindingProperty) => {\n      const propertyName = bindingProperty.name;\n      Object.defineProperty(bindingList, propertyName, {\n        get: () => {\n          return bindingList.currentItem[propertyName];\n        }\n      });\n    });\n  }\n}\n\nexport { BindingListFactory };\n\n","/**\n * 绑定对象工厂相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { Change } from './changes';\nimport { PropertyUtil } from './property_util';\nimport { BindingProperty, BindingPropertyType } from './binding_property';\nimport { BindingObject } from './binding_object';\nimport { BindingListFactory } from './binding_list_factory';\n\n/**\n * BindingObject工厂用于创建一个空的BindingObject对象，并对其属性进行扩展。\n *\n * **扩展属性处理**\n *\n * 对于要扩展的属性（BindingProperty）有三种处理：\n * - 普通属性：初始化为一个undefined，并包装get、set方法，通过set方法监听变更；\n * - 对象属性：初始化为一个空的BindingObject对象，并监听子对象的变更；\n * - 列表属性：初始化为一个空的BindingList对象，并监听子列表的变更；\n *\n * **示例代码**\n *\n * ```ts\n *  const empProperties = PropertyUtil.getProperties(EmpEntity);\n * const empBindingObject = BindingObjectFactory.create(properties);\n * ```\n */\nclass BindingObjectFactory {\n\n  /**\n   * 创建BindingObject实例\n   * @param properties 要扩展的属性集合\n   * @returns 带扩展属性的空BindingObject对象\n   * @\n   */\n  static create(properties: BindingProperty[]): BindingObject {\n    const object = new BindingObject(properties);\n    this.extendProperties(object, properties);\n    return object;\n  }\n\n  static createDynamicBindingObject(data: any): BindingObject {\n    const properties = PropertyUtil.getDynamicProperties(data);\n    const object = new BindingObject(properties);\n    this.extendProperties(object, properties);\n    return object;\n  }\n\n  /**\n   * 扩展属性绑定对象的属性\n   * @param object     要扩展的绑定对象\n   * @param properties 绑定属性集合\n   */\n  static extendProperties(object: BindingObject, properties: BindingProperty[]): void {\n\n    // 扩展BindingObject属性\n    properties.forEach((property: BindingProperty) => {\n      if (property.type === BindingPropertyType.List) {\n        this.extendListProperty(object, property);\n      } else if (property.type === BindingPropertyType.Object) {\n        this.extendObjectProperty(object, property);\n      } else if (property.type === BindingPropertyType.Dynamic) {\n        this.extendDynamicObjectProperty(object, property);\n      } else {\n        this.extendPlainProperty(object, property);\n      }\n    });\n  }\n\n  /**\n   * 扩展列表类型的绑定属性\n   * @param object     要扩展的绑定对象\n   * @param properties 列表类型的绑定属性集合\n   */\n  static extendListProperty(object: BindingObject, property: BindingProperty): void {\n    const propertyName = property.name;\n    const childListProperties = PropertyUtil.getProperties(property.entityType);\n    const childList = BindingListFactory.create(childListProperties);\n\n    // 指定子List的parent、监听子List的changes事件\n    childList.parent = object;\n    childList.changes.subscribe((change: Change) => {\n      change.path.unshift(propertyName);\n      object.changes.next(change);\n    });\n\n    // 将子的BindingList实例赋值给当前属性\n    Object.defineProperty(object, propertyName, {\n      value: childList\n    });\n  }\n\n  /**\n   * 扩展对象类型的绑定属性\n   * @param object     要扩展的绑定对象\n   * @param properties 对象类型的绑定属性集合\n   */\n  static extendObjectProperty(object: BindingObject, property: BindingProperty): void {\n    const propertyName = property.name;\n    const childObjectProperties = PropertyUtil.getProperties(property.entityType);\n    const childObject = this.create(childObjectProperties);\n\n    // 指定子Object的parent、监听子Object的changes事件\n    childObject.parent = object;\n    childObject.changes.subscribe((change: Change) => {\n      change.path.unshift(propertyName);\n      object.changes.next(change);\n    });\n\n    Object.defineProperty(object, propertyName, {\n      value: childObject\n    });\n  }\n\n  static extendDynamicObjectProperty(object: BindingObject, property: BindingProperty): void {\n    const propertyName = property.name;\n    object[propertyName] = null;\n  }\n\n  static attachDynamicObjectProperty(object: BindingObject, propertyName: string, dynamicObject: BindingObject) {\n    dynamicObject.parent = object;\n    dynamicObject.changes.subscribe((change: Change) => {\n      change.path.unshift(propertyName);\n      object.changes.next(change);\n    });\n    Object.defineProperty(object, propertyName, {\n      value: dynamicObject\n    });\n  }\n\n  /**\n   * 扩展简单类型的绑定属性\n   * @param object     要扩展的绑定对象\n   * @param properties 简单类型的绑定属性集合\n   */\n  static extendPlainProperty(object: BindingObject, property: BindingProperty): void {\n    const propertyName = property.name;\n    Object.defineProperty(object, propertyName, {\n      get: () => {\n        return object.getValue(propertyName);\n      },\n      set: (value: any) => {\n        const oldValue = object.getValue(propertyName);\n        if (value === oldValue) {\n          return;\n        }\n        object.setValue(propertyName, value, true, true);\n      }\n    });\n  }\n\n}\n\nexport { BindingObjectFactory };\n","import { Repository } from '../repository/index';\nimport { Entity, EntityList, PARENT_CLASS, FieldMetadataUtil } from '../entity/index';\nimport { Modification, ModifyType } from '../changeset/index';\nimport { ViewChange, Change, ChangeType } from './changes';\nimport { BindingList } from './binding_list';\nimport { BindingObject } from './binding_object';\nimport { BindingProperty, BindingPropertyType } from './binding_property';\nimport { BindingObjectFactory } from './binding_object_factory';\nimport { Pagination } from '../core/index';\nimport { BindingData } from './binding_data';\n\n/**\n * 实体操作工具类\n */\nclass EntityUtil {\n\n  /**\n   * 将entity的数据加载到bindingObject中，并保持两者同步。\n   * @param entity        实体对象\n   * @param bindingObject 绑定对象\n   */\n  static loadEntity(entity: Entity, bindingObject: BindingObject) {\n\n    // 遍历bindingObject的properties进行赋值\n    bindingObject.properties.forEach((property: BindingProperty) => {\n      const propertyName = property.name;\n      if (property.type === BindingPropertyType.List) {\n        this.loadEntityList(entity[propertyName] || entity[PARENT_CLASS], bindingObject[propertyName]);\n      } else if (property.type === BindingPropertyType.Object) {\n        if (entity && entity[propertyName]) {\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\n        }\n      } else if (property.type === BindingPropertyType.Dynamic) {\n        if (entity && entity[propertyName]) {\n          const dynamicObject = BindingObjectFactory.createDynamicBindingObject(entity[propertyName].data);\n          BindingObjectFactory.attachDynamicObjectProperty(bindingObject, propertyName, dynamicObject);\n          this.loadEntity(entity[propertyName], bindingObject[propertyName]);\n        }\n      } else {\n        bindingObject.setValue(propertyName, entity[propertyName], false, false);\n      }\n    });\n\n    this.setUpEntityPipeline(entity, bindingObject);\n  }\n\n  /**\n   * 建立entity和bindingObject之间的关联\n   * @param entity        实体对象\n   * @param bindingObject 绑定对象\n   */\n  static setUpEntityPipeline(entity: Entity, bindingObject: BindingObject) {\n\n    // 监听entity变更\n    entity.onValueChanged.subscribe((modification: Modification) => {\n      if (modification.type !== ModifyType.ValueChange || modification.path.length === 0) {\n        return;\n      }\n      const propertyName = modification.path[modification.path.length - 1];\n      const primaryKeyPath = modification.path[modification.path.length - 2];\n\n      // 验证主键是否匹配\n      // 存在主键并且主键不是id时才检查（值对象、关联对象不检查）\n      if (bindingObject.primaryKey && bindingObject.primaryKey === 'id') {\n        const primaryKey = bindingObject.primaryKey;\n        const primaryKeyValue = bindingObject.getValue(primaryKey);\n        if (primaryKeyPath !== `${primaryKey}:${primaryKeyValue}`) {\n          return;\n        }\n      }\n\n      // 值没有发生变化，不再设置\n      // TODO: 通过bindingObject修改entity属性值时，entity总会触发一个变更回来，如果不截获这个重复的变更，会导致重复或死循环\n      if (bindingObject.getValue(propertyName) === modification.value) {\n        return;\n      }\n      bindingObject.setValue(propertyName, modification.value, true, false, modification.errors);\n    });\n\n    // 监听bindingObject变更\n    bindingObject.viewChanges.subscribe((viewChange: ViewChange) => {\n      const value = viewChange.value;\n      const propertyName = viewChange.path[0];\n\n      let pathPrefix = '';\n      const pathData = entity.getPaths();\n      const paths = pathData.path;\n      let id = bindingObject['id'];\n      if (pathData.isUdt) {\n        // grid中udt没有id，从父级中取出id，以便存放验证信息\n        const getParentId = (target: any) => {\n          let parentId = '';\n          const findId = (item: any) => {\n            if (item && item && item['id']) {\n              parentId = item['id'];\n              return;\n            } else if (item['parent']) {\n              findId(item['parent']);\n            }\n          };\n          findId(target);\n          return parentId;\n        };\n        id = getParentId(bindingObject);\n        if (pathData.isGrid) {\n          // grid 将从表主字段去除\n          paths.shift();\n        }\n        if (paths.length) {\n          pathPrefix = paths.join('.') + '.';\n        }\n      }\n\n      // 不是主键值字段时，要先检查主键是否存在，并且主键是否相等（防止后代变更冒泡上来）\n      // 非主键属性变更时，要先检查主键是否匹配（如果主键也修改了，要求先修改主键再修改其他值）\n      if (bindingObject.primaryKey) {\n        const primaryKey = bindingObject.primaryKey;\n        if (propertyName !== primaryKey) {\n          if (!entity[primaryKey] || entity[primaryKey] !== bindingObject[primaryKey]) {\n            return;\n          }\n        }\n      }\n\n      // 如果BindingObject上的属性值和Entity上对应属性值一样，则不再设置\n      if (entity[propertyName] === value) {\n        return;\n      }\n\n      // 调用表单验证,通过后调用实体验证\n      // bingdingObject变化后，先调用实体上的验证，通过后再设置实体的变动\n      entity[propertyName] = value;\n    });\n  }\n\n  /**\n   * 将entityList中的Entity对象转换为BindingObject对象，加载到bindingList中，并保持entityList和bindingList同步。\n   * @param entityList  实体列表\n   * @param bindingList 绑定列表\n   */\n  static loadEntityList(entityList: EntityList<any>, bindingList: BindingList) {\n    this.loadEntities(entityList.items, bindingList);\n\n    this.setUpEntityListPipeline(entityList, bindingList);\n  }\n\n  /**\n   * 建立entityList和bindingList之间的关联\n   * @param entityList  实体列表\n   * @param bindingList 绑定列表\n   */\n  static setUpEntityListPipeline(entityList: EntityList<any>, bindingList: BindingList) {\n\n    entityList.onListChanged.subscribe((modification: Modification) => {\n      switch (modification.type) {\n        // 添加实体\n        case ModifyType.Add:\n        case ModifyType.Clone:\n          {\n            const entitiesToAdd = <Entity[]>modification.value;\n            if (entitiesToAdd.length === 0) {\n              return;\n            }\n            // 检查父id是否一致，冒泡导致的变更不处理\n            const paths = modification.path;\n            const parentPath = paths[paths.length - 2];\n            const parentId = bindingList.parent.primaryKeyValue;\n            if (parentPath.indexOf(parentId) === -1) {\n              return;\n            }\n\n            this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\n          }\n          break;\n        case ModifyType.Insert:\n          {\n            // 检查父id是否一致，冒泡导致的变更不处理\n            const paths = modification.path;\n            const parentPath = paths[paths.length - 2];\n            const parentId = bindingList.parent.primaryKeyValue;\n            const position = modification.position;\n            if (parentPath.indexOf(parentId) === -1) {\n              return;\n            }\n            this.insertEntity(modification.value[0], bindingList, position);\n          }\n          break;\n        // 删除实体\n        case ModifyType.Remove:\n          {\n            // 删除实体（value格式待商榷，目前value的格式为 { primaryKey: primaryValue}）\n            const id = modification.value[bindingList.primaryKey];\n            bindingList.removeByIds([id]);\n            // this.removeEntities(<Entity[]>modification.value, bindingList);\n          }\n          break;\n\n        // 加载实体\n        case ModifyType.Load:\n          const entities = modification.value;\n          this.loadEntities(entities, bindingList);\n          break;\n        default:\n          break;\n      }\n    });\n  }\n\n  /**\n   * 监听repository变化，保持repository和bindingList同步。\n   * @param repository  实体仓库\n   * @param bindingList 绑定列表\n   */\n  static loadRepository(repository: Repository<any>, bindingList: BindingList) {\n\n    // 初次加载\n    const entities = Array.from(repository.entityCollection.toArray());\n    this.loadEntities(entities, bindingList);\n\n    // 监听变化\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\n      switch (modification.type) {\n        case ModifyType.Load:\n          this.loadEntities(<Entity[]>modification.value, bindingList, modification.entityCreate);\n          break;\n        case ModifyType.Add:\n        case ModifyType.Clone:\n          this.appendEntities(<Entity[]>modification.value, bindingList, modification.type === ModifyType.Clone);\n          break;\n        case ModifyType.AddData:\n          this.addData(<Entity[]>modification.value, bindingList);\n          break;\n        case ModifyType.Insert:\n          this.insertEntity(modification.value, bindingList, modification.position);\n          break;\n        case ModifyType.Remove:\n          this.removeEntities(<Entity[]>modification.value, bindingList);\n          break;\n        case ModifyType.RemoveData:\n          this.removeData(<Entity[]>modification.value, bindingList);\n          break;\n        case ModifyType.PaginationInfoChange:\n          bindingList.paginationInfo = <Pagination>modification.value;\n          break;\n        default:\n          break;\n      }\n    });\n\n    // 监听BindingList数据变化\n    bindingList.changes.subscribe((change: Change) => {\n      if (change.type === ChangeType.PaginationInfoChange) {\n        const entityCollection = repository.entityCollection;\n        // const entityTypeName = entityCollection.entityTypeName;\n        // const original = entityCollection.paginationInfo[entityTypeName];\n        // const entityPaginationInfo = Object.assign({}, original, change.value);\n        entityCollection.paginationInfo = Object.assign({}, entityCollection.paginationInfo, change.value);\n      }\n    });\n  }\n\n  /**\n   * 将entities中的Entity对象转换为BindingObject对象，并加载到bindingList中\n   * @param entities    实体数组\n   * @param bindingList 绑定列表\n   */\n  static loadEntities(entities: Entity[], bindingList: BindingList, entityCreate: boolean = false) {\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\n    bindingList.load(bindingObjects, entityCreate);\n  }\n\n  /**\n   * 将entities中的Entity对象转换为BIndingObject对象，并追加到bindingList中\n   * @param entities    实体数组\n   * @param bindingList 绑定列表\n   */\n  static appendEntities(entities: Entity[], bindingList: BindingList, isCloned: boolean = false) {\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\n    bindingList.append(bindingObjects, isCloned);\n  }\n  /**\n   * 增加实体数据（不切换当前行）\n   * @param entities \n   * @param bindingList \n   */\n  static addData(entities: Entity[], bindingList: BindingList) {\n    const bindingObjects = this.createBindingObjects(entities, bindingList);\n    bindingList.addData(bindingObjects);\n  }\n  static insertEntity(entity: Entity, bindingList: BindingList, position: -1 | 1) {\n    const bindingObject = this.createBindingObject(entity, bindingList);\n    bindingList.insert(bindingObject, position);\n  }\n  /**\n   * 从bindingList移除entities对应的BindingObject对象\n   * @param entities    实体数组\n   * @param bindingList 绑定列表\n   */\n  static removeEntities(entities: Entity[], bindingList: BindingList) {\n    if (entities === null || entities.length === 0) {\n      return;\n    }\n\n    // 归集要删除的id数组\n    const primaryKey = bindingList.primaryKey;\n    const ids = [];\n    entities.forEach((entity: Entity) => {\n      ids.push(entity[primaryKey]);\n    });\n    bindingList.removeByIds(ids);\n  }\n  static removeData(entities: Entity[], bindingList: BindingList) {\n    if (entities === null || entities.length === 0) {\n      return;\n    }\n    // 归集要删除的id数组\n    const primaryKey = bindingList.primaryKey;\n    const ids = [];\n    entities.forEach((entity: Entity) => {\n      ids.push(entity[primaryKey]);\n    });\n    bindingList.removeDataByIds(ids);\n  }\n  /**\n   * 将entities中的Entity对象转换为BindingObject对象\n   * @param entities    实体数组\n   * @param bindingList 绑定列表\n   */\n  static createBindingObjects(entities: Entity[], bindingList: BindingList) {\n\n    if (entities === null || entities.length === 0) {\n      return [];\n    }\n\n    const bindingObjects = [];\n    entities.forEach((entity: Entity) => {\n      const bindingObject = BindingObjectFactory.create(bindingList.properties);\n      bindingObject['_ENTITY_'] = entity;\n      this.loadEntity(entity, bindingObject);\n\n      // // 为bindingObject设置默认值initialData属性\n      // if (entity['initialData']) {\n      //   bindingObject['initialData'] = entity['initialData'];\n      // }\n\n      bindingObjects.push(bindingObject);\n    });\n    return bindingObjects;\n  }\n  static createBindingObject(entity: Entity, bindingList: BindingList) {\n    const bindingObject = BindingObjectFactory.create(bindingList.properties);\n    this.loadEntity(entity, bindingObject);\n    return bindingObject;\n  }\n  public static watchReposiroty(repository: Repository<any>, bindingData: BindingData) {\n    // reposiroty => bindingData\n    repository.entityCollectionChange.subscribe((modification: Modification) => {\n      switch (modification.type) {\n        case ModifyType.PaginationInfoChange:\n          bindingData.pagingInfo = modification.value;\n          break;\n        default:\n          break;\n      }\n    });\n  }\n  /**\n   * 查找属性的类型\n   * @param entityType 实体类型\n   * @param targetPropName 属性名称\n   * @return 属性信息，包含属性类型（NgField、NgObject、NgList）和属性对应的实体类型（当NgField类型时为null）\n   */\n  static getPropInfo(entityType: any, targetPropName: string): { propType: string, propEntityType: any } {\n\n    let propType: string;\n    let propEntityType: any;\n\n    // NgField\n    const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);\n    Object.keys(ngFieldProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        propType = 'NgField';\n        propEntityType = null;\n      }\n    });\n\n    // NgObject\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        propType = 'NgObject';\n        propEntityType = ngObjectProperties[propName].type;\n      }\n    });\n\n    // NgList\n    const ngListProperties = FieldMetadataUtil.getNgList(entityType);\n    Object.keys(ngListProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        propType = 'NgList';\n        propEntityType = ngListProperties[propName].type;\n      }\n    });\n\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        propType = 'NgDynamic';\n        propEntityType = ngDynamicProperties[propName].type;\n      }\n    });\n\n    return { propType, propEntityType };\n  }\n\n  /**\n   * 获取实体的主键名\n   * @param entityType 实体类型\n   */\n  static getPrimaryKey(entityType: any) {\n    const primaryNgFiledProp = FieldMetadataUtil.getPrimaryFieldMetadata(entityType);\n    if (primaryNgFiledProp) {\n      return primaryNgFiledProp.dataField;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * 是否为对象属性\n   */\n  static isObjectProp(entityType: any, targetPropName: string,) {\n    let isObjectProp = false;\n    const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);\n    Object.keys(ngObjectProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        isObjectProp = true;\n      }\n    });\n    return isObjectProp;\n  }\n\n  /**\n   * 检查是否是动态列属性\n   */\n  static isDynamicProp(entityType: any, targetPropName: string) {\n    let isDynamicProp = false;\n    const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\n      if (propName === targetPropName) {\n        isDynamicProp = true;\n      }\n    });\n    return isDynamicProp;\n  }\n\n  /**\n   * 为实体增加initialData属性\n   * @param entity 实体实例\n   * @param initialData 默认值对象\n   */\n  static appendInitialData(entity, initialData) {\n    const data = Object.assign({}, initialData);\n    delete data.id;\n    delete data.parentID;\n    entity['initialData'] = data;\n  }\n}\n\nexport { EntityUtil };\n","// tslint:disable: max-line-length member-ordering\n/**\n * 绑定数据相关定义\n * @author Witt<jiwt@inspur.com>\n * @todo\n * 1、全局的BindingData和局部的BindingData应该拆成两个类，两个类之间是装饰关系；；\n * 2、为了保持兼容，减少改动量，暂时放在一起，待进一步重构。\n */\n\nimport { Subject } from 'rxjs';\n\nimport { DataTypeInfo } from '../entity/entity-type-info/index';\nimport { Repository } from '../repository/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { Change, ChangeType } from './changes';\nimport { BindingProperty } from './binding_property';\nimport { BindingList } from './binding_list';\nimport { BindingListFactory } from './binding_list_factory';\nimport { PropertyUtil } from './property_util';\nimport { EntityUtil } from './entity_util';\nimport { InvokeOnValueChange } from './binding_object';\n\n/**\n * BindingData\n */\n\nclass BindingData {\n\n  private viewModelContext: ViewModelContext;\n\n  /**\n   * 数据类型描述\n   */\n  public dataTypeInfo: DataTypeInfo;\n\n  /**\n   * 绑定该路径\n   */\n  public get bindingPath(): string {\n    if (this.viewModelContext && this.viewModelContext.viewModel.bindingPath) {\n      return this.viewModelContext.viewModel.bindingPath;\n    }\n    return '/';\n  }\n\n  /**\n   * 可绑定的属性描述\n   */\n  public properties: BindingProperty[];\n\n  /**\n   * 数据列表\n   */\n  public list: BindingList;\n  private paginationInfo = null;\n\n  public set pagingInfo(pagingInfo: any) {\n    this.paginationInfo = pagingInfo;\n    this.firePagingChangeEvent();\n  }\n\n  public get pagingInfo() {\n    return this.paginationInfo;\n  }\n  /**\n   * 设置分页信息\n   * @param skip 跳过\n   * @param take 获取\n   * @param bindingPath 路径\n   */\n  public setPagingInfo(skip: number, take: number, bindingPath: string) {\n    if (bindingPath.length < 1 || bindingPath === '/') {\n      this.paginationInfo = Object.assign(this.paginationInfo, { pageSize: take, pageIndex: skip / take + 1 });\n    } else {\n      let pagingInfo = this.paginationInfo || {};\n      const bindingPaths = bindingPath.substr(1).split('/').filter(item => !!item && item.length > 0).map(item => item.substring(0, item.length - 1));\n      bindingPaths.forEach(path => {\n        if (!pagingInfo.hasOwnProperty(path)) {\n          pagingInfo[path] = {};\n        }\n        pagingInfo = pagingInfo[path];\n      });\n      pagingInfo.pageIndex = ((skip / take) || 0) + 1;\n      pagingInfo.pageSize = take || 0;\n    }\n    this.firePagingChangeEvent();\n  }\n  private firePagingChangeEvent() {\n    this.list.changes.next({\n      type: ChangeType.PaginationInfoChange,\n      path: [],\n      value: this.paginationInfo\n    });\n  }\n  /**\n   * 变更集\n   */\n  public get changes(): Subject<Change> {\n    return this.list.changes;\n  }\n\n  /**\n   * 值变化执行器工厂，根据路径产生执行器\n   */\n  private valueChangeInvokerFactory: (paths: string[]) => InvokeOnValueChange;\n\n  /**\n   * 设置值变化执行器工厂\n   * @param value 值变化执行器工厂\n   */\n  public setValueChangeInvokerFactory(value: (paths: string[]) => InvokeOnValueChange) {\n    this.valueChangeInvokerFactory = value;\n  }\n\n  /**\n   * 初始化（已废弃）\n   */\n  public init(repository: Repository<any>, bindingPath: string) {\n    this.initByRepository(repository, null);\n  }\n\n  /**\n   * 根据Repository对BindingData进行初始化\n   */\n  public initByRepository(repository: Repository<any>, viewModelContext: ViewModelContext) {\n    this.viewModelContext = viewModelContext;\n\n    this.properties = PropertyUtil.getProperties(repository.entityType);\n    this.list = BindingListFactory.create(this.properties);\n    // 从repository初始化bindingData\n    this.pagingInfo = repository.entityCollection.paginationInfo;\n\n    // @todo\n    // BindingData不应该知道Repository，加载数据、建立关联关系的过程应该转移到外边\n    EntityUtil.loadRepository(repository, this.list);\n    this.dataTypeInfo = repository.entityTypeInfo;\n\n    this.extendProperties(this.properties);\n  }\n\n  /**\n   * 初始化\n   */\n  public initByBindingList(bindingList: BindingList,  viewModelContext: ViewModelContext, dataTypeInfo: DataTypeInfo) {\n    this.list = bindingList;\n    this.viewModelContext = viewModelContext;\n    this.dataTypeInfo = dataTypeInfo;\n    this.extendProperties(this.list.properties);\n  }\n\n  /**\n   * 获取paths对应的属性值\n   * @param  paths 属性路径数组\n   * @returns 属性值\n   */\n  public getValue(paths: string[]) {\n    let target: any = this.list;\n    paths.forEach((path: string) => {\n      if (target) {\n        target = target[path];\n      }\n    });\n    return target;\n  }\n\n  /**\n   * 根据paths设置属性值\n   * @param paths 属性路径数组\n   * @param value 属性值\n   * @param emitEventToView 如果设置为true，则发送事件通知订阅它的组件、指令去更新界面，默认为false。\n   * @param emitEventToEntity 如果设置为true，则同步去更新Entity上对应的字段，默认为true。\n   */\n  public setValue(paths: string[], value: any, emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\n\n    if (!paths || paths.length === 0) {\n      throw Error('路径不能为空');\n    }\n    const parentPaths = paths.slice(0, paths.length - 1);\n    const propName = paths[paths.length - 1];\n\n    let parent = this.getValue(parentPaths);\n    if (!parent) {\n      throw Error('找不到要设置的对象');\n    }\n    if (parent instanceof BindingData) {\n      parent = parent.list.currentItem;\n    } else if (parent instanceof BindingList) {\n      parent = parent.currentItem;\n    }\n    if (!!this.valueChangeInvokerFactory) {\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity, null, this.valueChangeInvokerFactory(paths));\n    } else {\n      parent.setValue(propName, value, emitEventToView, emitEventToEntity);\n    }\n  }\n\n  /**\n   * 根据paths清空属性值\n   */\n  public clearValue(paths: string[], emitEventToView: boolean = false, emitEventToEntity: boolean = true) {\n    let initValue: any;\n    const propInfo = this.dataTypeInfo.getPropInfoByPath(paths);\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\n      initValue = propInfo.metadataInfo.initValue;\n    } else {\n\n      // 原来的帮助映射中，强行纠正了数值的情况，保持一致\n      const oldValue = this.getValue(paths);\n      if (typeof oldValue === 'number') {\n        initValue = 0;\n      } else {\n        initValue = '';\n      }\n    }\n    this.setValue(paths, initValue, emitEventToView, emitEventToEntity);\n  }\n\n  /**\n   * 获取当前列表\n   */\n  public getList() {\n\n    if (!this.bindingPath || this.bindingPath === '/') {\n      return this.list;\n    }\n\n    const bindingPath = this.bindingPath.substr(1);\n    const bindingPathArray = bindingPath.split('/').filter((part: string) => {\n      return part !== '';\n    });\n    return this.getValue(bindingPathArray);\n  }\n\n  /**\n   * 获取当前对象\n   */\n  public getObject() {\n    const bindingList = this.getList();\n    return bindingList.currentItem;\n  }\n  /**\n   * 绑定路径（仅路径部分，不包括属性）\n   * @param bindingPath 绑定路径\n   */\n  public getPath(bindingPath?: string[]) {\n    const bindingPaths = bindingPath.filter(p => p);\n    const path = [`${this.list.primaryKey}:${this.list.currentId}`];\n\n    bindingPaths.forEach((item: string) => {\n      path.push(item);\n      const list = this[item] as BindingList;\n      if (list) {\n        path.push(`${list.primaryKey}:${list.currentId}`);\n      }\n    });\n    return path;\n  }\n  /**\n   * 通过绑定路径获取属性初始值\n   * @param paths 绑定路径\n   */\n  private getInitValueByPaths(paths: Array<string>) {\n    let initValue: any;\n    const propInfo = this.dataTypeInfo && this.dataTypeInfo.getPropInfoByPath(paths) || null;\n    if (propInfo && propInfo.metadataInfo && propInfo.metadataInfo.initValue !== undefined) {\n      initValue = propInfo.metadataInfo.initValue;\n    }\n    return initValue;\n  }\n  /**\n   * 扩展BindingData属性，映射BindingData所持有的绑定列表当前行的属性，减少绑定层级。\n   * @param properties 关联实体的属性集合\n   */\n  private extendProperties(properties: BindingProperty[]) {\n    properties.forEach((property: BindingProperty) => {\n      const propName = property.name;\n      Object.defineProperty(this, propName, {\n        get: () => {\n          return this.list.currentItem[propName];\n        },\n        set: (value: any) => {\n          this.list.currentItem[propName] = value;\n        }\n      });\n    });\n  }\n}\n\nexport { BindingData };\n","import { Subject } from 'rxjs';\n\nimport { ArrayUtil } from '../utils/index';\nimport { Change, ChangeType } from './changes';\nimport { BindingData } from './binding_data';\nimport { BindingObject } from './binding_object';\nimport { BindingProperty } from './binding_property';\nimport { BindingObjectFactory } from './binding_object_factory';\nimport { PropertyUtil } from './property_util';\n\n/**\n * BindingList是一个BindingObject集合\n */\nclass BindingList {\n\n  /**\n   * immutable的BindingObject列表\n   */\n  private innerList: BindingObject[];\n\n  private emptyCurrentItem: BindingObject;\n\n  /**\n   * 关联实体的属性集合\n   */\n  public properties: BindingProperty[];\n\n  /**\n   * 主键名\n   */\n  public primaryKey: string;\n\n  /**\n   * 父对象\n   */\n  public parent: BindingObject;\n\n  /**\n   * 变更流\n   */\n  public changes: Subject<Change>;\n\n  /**\n   * 当前行对应的绑定对象的内码\n   */\n  public currentId: string;\n\n  //#region 分页相关\n\n  /**\n   * 分页信息\n   */\n  public _paginationInfo: any = null;\n\n  set paginationInfo(sPaginationInfo: any) {\n    this._paginationInfo = sPaginationInfo;\n    if (this._paginationInfo === sPaginationInfo) {\n      return;\n    }\n    this.changes.next({\n      type: ChangeType.PaginationInfoChange,\n      path: [],\n      value: this._paginationInfo\n    });\n  }\n\n  get paginationInfo(): any {\n    return this._paginationInfo;\n  }\n  /**\n   * 获取页码\n   */\n  get pageIndex() {\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageIndex\")) {\n      return this.paginationInfo.pageIndex;\n    }\n    return 1;\n  }\n  /**\n   * 获取分页大小\n   */\n  get pageSize() {\n    if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty(\"pageSize\")) {\n      return this.paginationInfo.pageSize;\n    }\n    return 0;\n  }\n\n  /**\n   * 获取数据总项数\n   */\n  get total() {\n    if (!!this.paginationInfo) {\n      return this.paginationInfo.total || this.paginationInfo.totalCount;\n    }\n    return 0;\n  }\n  /**\n   * 获取跳过的数据条数\n   */\n  get skip() {\n    const pageIndex = this.pageIndex;\n    const pageSize = this.pageSize;\n    return (pageIndex - 1) * pageSize;\n  }\n\n  /**\n   * 前台设置分页信息\n   * @param skip skip\n   * @param take take\n   */\n  public setPaginationInfo(skip: number, take: number) {\n    this.paginationInfo = Object.assign({}, this.paginationInfo, {\n      pageSize: take,\n      pageIndex: skip / take + 1\n    });\n    /*this.changes.next({\n      type: ChangeType.PaginationInfoChange,\n      path: [],\n      value: this.paginationInfo\n    });*/\n  }\n  //#endregion\n\n\n\n  /**\n   * 当前行对应的绑定对象\n   * 如果currentId为null，则创建一个空结构，防止绑定报错；\n   */\n  public get currentItem(): BindingObject {\n    const currentItem = this.findById(this.currentId);\n    if (!currentItem) {\n      if (!this.emptyCurrentItem) {\n        this.emptyCurrentItem = BindingObjectFactory.create(this.properties);\n      }\n      return this.emptyCurrentItem;\n    }\n    return currentItem;\n  }\n\n  /**\n   * 绑定对象的数量\n   */\n  public get length(): number {\n    return this.innerList.length;\n  }\n\n  /**\n   * 构造函数\n   */\n  constructor(properties: BindingProperty[]) {\n    this.properties = properties;\n    this.primaryKey = PropertyUtil.getPrimaryKey(properties);\n\n    this.changes = new Subject<Change>();\n    this.innerList = [];\n    this.currentId = null;\n  }\n\n  /**\n   * 添加[Symbol.iterator]，使之能通过for of遍历\n   */\n  [Symbol.iterator]() {\n    const self = this;\n    let index = -1;\n    const size = this.innerList.length;\n\n    return {\n      next: function () {\n        index++;\n        if (index < size) {\n          return {\n            done: false,\n            value: self.innerList[index]\n          };\n        }\n        return { done: true, value: undefined };\n      }\n    };\n  }\n\n  /**\n   * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。\n   * @param objects 要加载绑定对象数组\n   */\n  public load(objects: BindingObject[], entityCreate: boolean = false): void {\n\n    // 重置列表\n    this.innerList = [];\n\n    if (objects.length !== 0) {\n      // 加载数据\n      objects.forEach((object: BindingObject) => {\n        this.add(object);\n      });\n\n      // 设置默认当前行\n      const currentItem = this.findById(this.currentId);\n      if (!currentItem) {\n        const firstId = objects[0][this.primaryKey];\n        this.setCurrentId(firstId, false, false);\n      }\n    } else {\n      this.currentId = null;\n    }\n\n    const change: Change = {\n      type: ChangeType.Load,\n      path: [],\n      value: objects\n    };\n    change.create = entityCreate;\n\n    // 触发事件\n    this.changes.next(change);\n  }\n\n  /**\n   * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。\n   * @param objects 要加载绑定对象数组\n   */\n  public append(objects: BindingObject[], isCloned: boolean = false): void {\n\n    if (objects.length === 0) {\n      return;\n    }\n\n    // 加载BindingObject\n    objects.forEach((object: BindingObject) => {\n      this.add(object);\n    });\n\n    // 当前行为新追加的最后1行\n    const lastId = objects[objects.length - 1][this.primaryKey];\n    this.setCurrentId(lastId, true, true);\n\n    // 触发事件\n    const change: Change = {\n      type: ChangeType.Append,\n      path: [],\n      value: objects\n    };\n    if (isCloned) {\n      change.isCloned = true;\n    }\n    this.changes.next(change);\n  }\n  /**\n   * 增加数据\n   * @param objects 实体\n   * @description 增加实体数据，但不切换当前行\n   */\n  public addData(objects: BindingObject[]): void {\n    if (objects.length === 0) {\n      return;\n    }\n    // 加载BindingObject\n    objects.forEach((object: BindingObject) => {\n      this.add(object);\n    });\n    // 触发事件\n    this.changes.next({\n      type: ChangeType.Append,\n      path: [],\n      value: objects\n    });\n  }\n  public insert(object: BindingObject, position?: 1 | -1) {\n    // const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);\n    // // 加载BindingObject\n    // if (position === 1) {\n    //   this.innerList = this.innerList.insert(currentIndex + 1, object);\n    // } else if (position === -1) {\n    //   this.innerList = this.innerList.insert(currentIndex, object);\n    // } else {\n    //   this.innerList = this.innerList.push(object);\n    // }\n    // object.parent = this;\n    // // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\n    // object.changes.subscribe((change: Change) => {\n    //   this.changes.next(change);\n    // });\n\n    // this.setCurrentId(object.primaryKeyValue, true, true);\n\n    // // 触发事件\n    // this.changes.next({\n    //   type: ChangeType.Append,\n    //   path: [],\n    //   value: object\n    // });\n  }\n  /**\n   * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。\n   * @param object 绑定对象\n   */\n  public add(object: BindingObject) {\n    this.innerList.push(object);\n    object.parent = this;\n\n    // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径\n    object.changes.subscribe((change: Change) => {\n      this.changes.next(change);\n    });\n  }\n\n  /**\n   * 删除主键值数组对应的绑定对象。\n   * @param ids 主键值数组\n   */\n  public removeByIds(ids: Array<string>): void {\n    if (!ids || ids.length === 0) {\n      return;\n    }\n\n    let nextCurrentId = this.currentId;\n    ids.forEach((id: string) => {\n\n      // 如果当前行被删除，计算下一当前行\n      if (id === nextCurrentId) {\n        nextCurrentId = this.getCurrentIdBeforeDeleting();\n      }\n\n      // 删除对象，找不到时跳过\n      const index = this.getIndexById(id);\n      if (index === -1) {\n        return;\n      }\n      ArrayUtil.removeByIndex(this.innerList, index);\n    });\n\n    // 重新设置当前行\n    if (this.innerList.length === 0) {\n      this.currentId = null;\n    } else {\n      this.setCurrentId(nextCurrentId, false, false);\n    }\n\n    // 出发行删除事件\n    this.changes.next({\n      type: ChangeType.Remove,\n      path: [],\n      value: ids\n    });\n  }\n  /**\n   * 删除数据（不切换当前行）\n   * @param ids ids\n   */\n  public removeDataByIds(ids: Array<string>): void {\n    // if (!ids || ids.length === 0) {\n    //   return;\n    // }\n\n    // ids.forEach((id: string) => {\n    //   // 删除对象，找不到时跳过\n    //   const index = this.getIndexById(id);\n    //   if (index === -1) {\n    //     return;\n    //   }\n    //   this.innerList = this.innerList.delete(index);\n    // });\n\n    // // 出发行删除事件\n    // this.changes.next({\n    //   type: ChangeType.Remove,\n    //   path: [],\n    //   value: ids\n    // });\n  }\n  /**\n   * 清空\n   */\n  public clear() {\n    this.innerList = [];\n    this.currentId = null;\n    this.changes.next({\n      type: ChangeType.Remove,\n      path: [],\n      value: []\n    });\n  }\n\n  /**\n   * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。\n   * - 如果被删除的行是最后1行，则上移1行；\n   * - 其他情况，下移1行。\n   */\n  public getCurrentIdBeforeDeleting(): string {\n    let nextIndex = -1;\n    const currentIndex = this.getIndexById(this.currentId);\n    if (currentIndex === this.length - 1) {\n      nextIndex = currentIndex - 1;\n    } else {\n      nextIndex = currentIndex + 1;\n    }\n    return this.getIdByIndex(nextIndex);\n  }\n\n  /**\n   * 根据主键值获取对应绑定对象\n   * @param   id 要查找的主键值\n   * @returns 找到时返回对应BindingObject， 找不到时返回null\n   */\n  public findById(id: string): BindingObject | null {\n    let target: BindingObject;\n    target = this.innerList.find((item) => {\n      return item.getValue(this.primaryKey) === id;\n    });\n    return target === undefined ? null : target;\n  }\n\n  /**\n   * 将主键值为id的绑定对象设置为当前行\n   * @param  id        要设置的主键值\n   * @param  emitEvent 是否发送当前行变更事件\n   */\n  public setCurrentId(id: string, emitEvent: boolean = true, emitGlobalEvent: boolean = true): void {\n    if (this.currentId === id) {\n      return;\n    }\n\n    // 不存在时设置为null\n    // const currentObj = this.findById(id);\n    // if (!currentObj) {\n    //   this.currentId = null;\n    // } else {\n    //   this.currentId = id;\n    // }\n\n    // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。\n    const currentObj = this.findById(id);\n    if (!currentObj) {\n      return;\n    }\n    this.currentId = id;\n\n    // 发出行切换事件\n    if (emitEvent === true) {\n      this.changes.next({\n        type: ChangeType.SelectionChanged,\n        path: [],\n        value: this.currentItem\n      });\n    }\n\n    // 是否发送全局的行切换事件\n    if (emitGlobalEvent === true) {\n      this.changes.next({\n        type: ChangeType.GlobalSelectionChanged,\n        path: [],\n        value: this.currentItem\n      });\n    }\n  }\n\n  /**\n   * 根据主键值为id的绑定对象的索引\n   * @param id 主键值\n   * @returns 找到时返回对应的index，找不到时返回-1\n   */\n  public getIndexById(id: string): number {\n    return this.innerList.findIndex((obj: BindingObject) => {\n      return obj[this.primaryKey] === id;\n    });\n  }\n\n  /**\n   * 根据索引位置获取对应绑定对象的主键值\n   * @reutrn 找到时返回对应主键值，找不到返回null\n   */\n  public getIdByIndex(index: number): string {\n\n    if (index < 0 || index > this.length) {\n      return null;\n    }\n\n    const obj = this.innerList[index];\n    if (!obj) {\n      return null;\n    }\n\n    return obj[this.primaryKey];\n  }\n\n  /**\n   * 转换为BindingObject数组\n   */\n  public toArray(): BindingObject[] {\n    return this.innerList.concat([]);\n  }\n  /**\n   * 交互数据位置\n   * @param id1 id1\n   * @param id2 id2\n   */\n  public swapById(id1: any, id2: any) {\n    // const item1 = this.innerList.find(element => element.primaryKeyValue === id1);\n    // const item2 = this.innerList.find(element => element.primaryKeyValue === id2);\n    // this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {\n    //   if (bindingObject.primaryKeyValue === id1) {\n    //     return item2;\n    //   } else if (bindingObject.primaryKeyValue === id2) {\n    //     return item1;\n    //   } else return bindingObject;\n    // }).toList();\n    // this.changes.next({\n    //   type: ChangeType.Swap,\n    //   path: []\n    // });\n  }\n  /**\n   * 转换为JSON对象\n   * @returns 普通对象数组\n   */\n  public toJSON(options?: any): any[] {\n    const result = [];\n    this.innerList.forEach((obj: BindingObject) => {\n      result.push(obj.toJSON(options));\n    });\n    return result;\n  }\n\n  /**\n   * 获取分页信息\n   * @param path 路径\n   * @param defaultValue 默认值\n   */\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\n    if (!path || path === '/') {\n      return this.paginationInfo;\n    }\n    if (typeof path !== 'string') {\n      throw new Error('路径必须为字符串！');\n    }\n    path = path.substring(1);\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\n    let config = this.paginationInfo;\n    paths.forEach(item => {\n      if (config && config.hasOwnProperty(item)) {\n        config = config[item];\n      } else {\n        config = null;\n      }\n    });\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\n  }\n\n  /**\n   * 对bindingList就行排序\n   * @param string 排序字段\n   * @param directions 排序规则字段\n   * @param options 参数\n   */\n  public sortBy(fields: string | Array<string>, directions: string | Array<string>, options?: { [prop: string]: any }) {\n    if (!fields || fields.length < 1 || !directions || directions.length < 1) {\n      throw new Error('sortBy:argument error');\n    }\n    // 默认升序\n    const arrFields: Array<string> = typeof fields === 'string' ? fields.split(',') : fields || [];\n    const arrDirections: Array<string> = typeof directions === 'string' ? directions.split(',') : directions || [];\n    // 排序字段和排序方式应一致\n    if (arrFields.length !== arrDirections.length || arrFields.length < 1) {\n      throw new Error('sortBy:fields and directions not match');\n    }\n    // nage,age,total\n    const comparator = (props: Array<string>, orders: Array<string>) => (item1: BindingObject, item2: BindingObject) => {\n      for (const prop of props) {\n        const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;\n        if (item1.getValue(prop) > item2.getValue(prop)) { return order * 1; }\n        if (item1.getValue(prop) < item2.getValue(prop)) { return order * -1; }\n      }\n      return 0;\n    };\n    this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));\n  }\n\n  private getValue(target: any, propName: string, isMultiLangProp: boolean = false, currentLanguage: string = 'zh-CHS') {\n    if (target instanceof BindingList) {\n      target = target.currentItem;\n    } else if (target instanceof BindingData) {\n      target = target.list.currentItem;\n    }\n    let result = null;\n    if (propName.indexOf('.') === -1) {\n      result = target[propName];\n    } else {\n      const props = propName.split('.');\n      for (const prop of props) {\n        target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);\n      }\n    }\n    if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {\n      return result[currentLanguage];\n    } else {\n      return result;\n    }\n  }\n}\n\nexport { BindingList };\n","import { Entity } from '../entity/index';\nimport { Repository, EntityManager } from '../repository/index';\nimport { PropertyUtil as BindingPropertyUtil } from './property_util';\nimport { EntityUtil as EntityLoadUtil } from './entity_util';\nimport { BindingListFactory } from './binding_list_factory';\nimport { BindingData } from './binding_data';\n\n\nclass BindingDataFactory {\n\n  /**\n   * 根据Repository创建一个BindingData\n   */\n  public static createFromRepository(repository: Repository<Entity>, bindingPath: string): BindingData {\n    const bindingData = new BindingData();\n    const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);\n    const bindingList = BindingListFactory.create(bindingProperties);\n    bindingData.initByBindingList(bindingList, null, repository.entityTypeInfo);\n    EntityLoadUtil.loadRepository(repository, bindingList);\n\n    // 从repository初始化bindingData\n    bindingData.pagingInfo = repository.entityCollection.paginationInfo;\n    return bindingData;\n  }\n\n  /**\n   * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）\n   * @internal\n   * @summary\n   * 1、该方法暂时仅供内部单元测试使用；\n   * 2、该方法暂时只创建BindingData，不建立双向关联\n   */\n  public static createFromEntityManager(entityManager: EntityManager<Entity>, bindingPath: string): BindingData {\n    const bindingData = new BindingData();\n    const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);\n    const bindingList = BindingListFactory.create(bindingProperties);\n    bindingData.initByBindingList(bindingList, null, entityManager.entityCollection.entityTypeInfo);\n\n    // 初始化数据\n    const entities: Entity[] = entityManager.getEntitiesByPath([]);\n    EntityLoadUtil.loadEntities(entities, bindingList);\n\n    return bindingData;\n  }\n\n  /**\n   * 根据已经存在的BindingData创建一个新的BindingData\n   */\n  public static createFromExistingBindingData(existingBindingData: BindingData, bindingPath: string) {\n    const bindingData = new BindingData();\n    bindingData.initByBindingList(existingBindingData.list, null, bindingData.dataTypeInfo);\n    return bindingData;\n  }\n}\n\nexport { BindingDataFactory };\n","import {\n  BindingData, BindingPropertyType, PropertyUtil\n} from '../../binding-data/index';\nimport { BindingPathConverter } from './binding_path_converter';\n\n/**\n * EntityPath转换器\n */\nclass EntityPathConverter {\n\n  /**\n   * 转换为Entity可识别的路径\n   * 根：[]\n   * 主表：['id:xxx', 'name'],\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\n   */\n  public static toEntityPathArray(bindingPathString: string, bindingData: BindingData): string[] {\n    const bindingPathArray: string[] = BindingPathConverter.toBindingPathArray(bindingPathString);\n    const entityPathArray: string[] = [];\n\n    if (bindingPathArray.length === 0) {\n      return entityPathArray;\n    }\n\n    // 根节点\n    let currentBindingObject = bindingData.list.currentItem;\n    entityPathArray.push(\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n    );\n\n    bindingPathArray.forEach((propName: string) => {\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\n      switch (propInfo.type) {\n        case BindingPropertyType.Plain:\n          entityPathArray.push(propName);\n          break;\n        case BindingPropertyType.Object:\n          currentBindingObject = currentBindingObject[propName];\n          entityPathArray.push(propName);\n          entityPathArray.push(\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n          );\n          break;\n        case BindingPropertyType.List:\n          const currentBindingList = currentBindingObject[propName];\n          currentBindingObject = currentBindingList.currentItem;\n          entityPathArray.push(propName);\n          entityPathArray.push(\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n          );\n          break;\n        default:\n            break;\n      }\n    });\n\n    return entityPathArray;\n  }\n\n  /**\n   * 创建路径中的主键部分\n   */\n  public static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\n    return `${primaryKey}:${primaryKeyValue}`;\n  }\n\n}\n\nexport { EntityPathConverter };\n","\n/**\n * 实体路径比较器\n */\nclass EntityPathComparer {\n}\n\nexport { EntityPathComparer };\n","\n/**\n * 表单路径转换类\n */\nclass FormPathConverter {\n\n  /**\n   * ControlPathString => BingingPathArray\n   * @params controlPath FormControl对应的数据绑定路径（BindingData的bindingPaht + FormControl的binding）\n   * @return BindingPath数组\n   */\n  public static toBindingPathArray(formPahtString: string): string[] {\n    const bindingPathArray = formPahtString.split('.').filter((part: string) => {\n      return part !== '';\n    });\n    return bindingPathArray;\n  }\n}\n\nexport { FormPathConverter };\n","/**\n * 数据路径转换、比较等工具类\n * @summary\n * ----------------------------------------\n * 术语：\n * BindingPath：数组形式；\n * BindingPathString：BindingPath的字符串形式，用/分隔；\n * ControlPathString：BindingPath的字符串形式，用.分隔；\n *\n * EntityPath：数组形式；\n * EntityPathString：EntityPath的字符串形式，使用/分隔；\n * ----------------------------------------\n */\n\n/**\n * 路径处理工具类\n * @summary\n * --------------------------------------------------------------------------------\n * 路径现状\n *\n * 字符串格式\n * 1、BindingPath（/edus/grades/id）：主要用于表达式解析；\n * 2、ControlPath（edus.grades.id）： 主要用于FormControl的binding；\n * 3、RestPath（/empId/edus/eduId/grades/gradeId）：主要用于创建Rest\n * 数组格式：\n * 1、BindingPathArray（['edus', 'grades', 'id']）：BindingData模块中使用；\n * 2、EntityPathArray（['id:empId', 'edus', 'id:eduId', 'id']）：Entity模块中使用；\n * --------------------------------------------------------------------------------\n * 转换原则\n * 1、除了该工具类，不允许再出现路径转换、比较的方法；\n * 2、如果有特殊情况，先在该类中实现对应的方法；\n * 1、对于BindingPath、ControlPath统一转换成BingdingPathArray比较\n * 2、对于EntityPath统一转换成EntityPathArray进行比较；\n * --------------------------------------------------------------------------------\n * @todo\n * 1909中使用统一的数据结构（双向链表）进行存储，来解决目前混乱的情况\n */\n\n export * from './binding_path_converter';\n export * from './binding_path_comparer';\n export * from './binding_path_traverser';\n export * from './entity_path_converter';\n export * from './entity_path_comparer';\n export * from './form_path_converter';\n","import { BindingData, BindingPropertyType, PropertyUtil } from '../binding-data/index';\n/**\n * 路径处理工具类（处理/PathNode1/PathNode2/...格式的路径）\n */\nclass DataPathUtil {\n\n  /**\n   * 转换成BindingData可识别的路径\n   */\n  public static convertToBindingPathArray(path: string): string[] {\n    const bindingPathArray = path.split('/').filter((part: string) => {\n      return part !== '';\n    });\n    return bindingPathArray;\n  }\n\n  /**\n   * 转换为Entity可识别的路径\n   * 根：[]\n   * 主表：['id:xxx', 'name'],\n   * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']\n   * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']\n   * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],\n   * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']\n   */\n  public static convertToEntityPathArray(path: string, bindingData: BindingData): string[] {\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\n    const entityPathArray: string[] = [];\n\n    if (bindingPathArray.length === 0) {\n      return entityPathArray;\n    }\n\n    // 根节点\n    let currentBindingObject = bindingData.list.currentItem;\n    entityPathArray.push(\n      this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n    );\n\n    bindingPathArray.forEach((propName: string) => {\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\n      switch (propInfo.type) {\n        case BindingPropertyType.Plain:\n          entityPathArray.push(propName);\n          break;\n        case BindingPropertyType.Object:\n          currentBindingObject = currentBindingObject[propName];\n          entityPathArray.push(propName);\n          entityPathArray.push(\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n          );\n          break;\n        case BindingPropertyType.List:\n          const currentBindingList = currentBindingObject[propName];\n          currentBindingObject = currentBindingList.currentItem;\n          entityPathArray.push(propName);\n          entityPathArray.push(\n            this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue)\n          );\n          break;\n        default:\n            break;\n      }\n    });\n\n    return entityPathArray;\n  }\n\n  /**\n   * 转换为RestUrl里的路径\n   *\n   * 返回结果：\n   * 主表（/）：/\n   * 从表（/jiwtEdus）：/xxx/jiwtEdus\n   * 从从表（/jiwtEdus/jiwtGrades）： /xxx/jiwtEdus/xxx/jiwtGrades\n   */\n  public static convertToRestUrl(path: string, bindingData: BindingData): string {\n    const bindingPathArray: string[] = this.convertToBindingPathArray(path);\n    const restPathArray: string[] = [];\n\n    let currentBindingObject = bindingData.list.currentItem;\n    restPathArray.push(currentBindingObject.primaryKeyValue);\n\n    bindingPathArray.forEach((propName: string) => {\n      const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);\n      if (propInfo.type !== BindingPropertyType.List) {\n        throw new Error(`${propInfo.name}不是子表对应的属性`);\n      }\n      const currentBindingList = currentBindingObject[propName];\n      currentBindingObject = currentBindingList.currentItem;\n      restPathArray.push(propName);\n      restPathArray.push(currentBindingObject.primaryKeyValue);\n    });\n\n    // 移除最后一个主键\n    restPathArray.pop();\n    return '/' + restPathArray.join('/');\n  }\n\n  /**\n   * 获取叶子节点的Path\n   */\n  public static getLeafPath(path: string): string {\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\n    return pathArray.pop();\n  }\n\n  /**\n   * 获取父路径\n   */\n  public static getParentPath(path: string): string {\n    const pathArray = DataPathUtil.convertToBindingPathArray(path);\n    pathArray.pop();\n    return '/' + pathArray.join('/');\n  }\n\n  /**\n   * 创建路径中的主键部分\n   */\n  private static createPrimaryKeyPath(primaryKey: string, primaryKeyValue: string) {\n    return `${primaryKey}:${primaryKeyValue}`;\n  }\n}\n\nexport { DataPathUtil };\n","// tslint:disable: max-line-length\n/**\n * GUID创建服务\n * @scope 静态类没有提供Provider\n */\nexport class Guid {\n\n    private constructor(guid: string) {\n        if (!guid) { throw new TypeError('Invalid argument; `value` has no value.'); }\n\n        this.value = Guid.EMPTY;\n\n        if (guid && Guid.isGuid(guid)) {\n            this.value = guid;\n        }\n    }\n\n\n    public static validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\n\n    public static EMPTY = '00000000-0000-0000-0000-000000000000';\n\n    private value: string;\n\n    public static isGuid(guid: any) {\n        const value: string = guid.toString();\n        return guid && (guid instanceof Guid || Guid.validator.test(value));\n    }\n\n    public static create(): Guid {\n        return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-'));\n    }\n\n    public static createEmpty(): Guid {\n        return new Guid('emptyguid');\n    }\n\n    public static parse(guid: string): Guid {\n        return new Guid(guid);\n    }\n\n    public static raw(): string {\n        return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join('-');\n    }\n\n    private static gen(count: number) {\n        let out = '';\n        for (let i = 0; i < count; i++) {\n            // tslint:disable-next-line:no-bitwise\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\n        }\n        return out;\n    }\n\n    public equals(other: Guid): boolean {\n        // Comparing string `value` against provided `guid` will auto-call\n        // toString on `guid` for comparison\n        return Guid.isGuid(other) && this.value === other.toString();\n    }\n\n    public isEmpty(): boolean {\n        return this.value === Guid.EMPTY;\n    }\n\n    public toString(): string {\n        return this.value;\n    }\n\n    public toJSON(): any {\n        return {\n            value: this.value,\n        };\n    }\n}\n","/*\n * @Author: aalizzwell \n * @Date: 2019-10-25 13:30:52 \n * @Last Modified by:   aalizzwell \n * @Last Modified time: 2019-10-25 13:30:52 \n */\nimport { Observable } from 'rxjs';\n\nconst isObservable = (value) => {\n    if (!value) {\n        return false;\n    }\n    if (value[Symbol.observable] && value === value[Symbol.observable]()) {\n        return true;\n    }\n    if (value['@@observable'] && value === value['@@observable']()) {\n        return true;\n    }\n    if (value instanceof Observable) {\n        return true;\n    }\n    return false;\n}\nexport { isObservable }\n","/**\n * 环境工具类\n */\nclass EnvUtil {\n\n  /**\n   * 是否在任务中心中运行\n   */\n  public static isInWf(): boolean {\n    const url = window.top.location.pathname;\n    if (url.indexOf('wf/webapp/apptaskcenter') !== -1 || url.indexOf('wf/webapp/mobiletaskcenter') !== -1 || url.indexOf('wf/webapp/proc-center-mobile') !== -1) {\n      return true;\n    }\n\n    return false;\n  }\n}\n\nexport { EnvUtil }","\n/**\n * Url工具类\n */\nclass UrlUtil {\n\n  /**\n   * 获取参数对象\n   */\n  public static getParams(url: string): any {\n    const urlParts = url.split('?');\n    if (urlParts.length < 2) {\n      return null;\n    }\n\n    const params = {};\n    const paramsString = urlParts[1];\n    const keyValueStrings = paramsString.split('&');\n    keyValueStrings.forEach((keyValueString: string) => {\n      if (!keyValueString) {\n        return;\n      }\n      const keyValue = keyValueString.split('=');\n      if (keyValue.length < 2) {\n        return;\n      }\n      params[keyValue[0]] = keyValue[1];\n    });\n\n    return params;\n  }\n}\n\nexport { UrlUtil };","import { makePropDecorator } from '../../core/index';\nimport { ObjectUtil } from '../../utils/index';\nimport { ClassType } from '../types';\nimport { PropMetadata } from './prop_meatadata';\n\n/**\n * 【对象属性元数据】接口\n */\nexport interface ObjectPropMetadata extends PropMetadata {\n\n  /**\n   * 映射字段\n   */\n  dataField?: string;\n\n  /**\n   * 原始字段名称\n   */\n  originalDataField?: string;\n\n  /**\n   * 表名\n   */\n  tableName?: string;\n\n  /**\n   * 引用实体类型\n   */\n  type?: ClassType;\n\n  /**\n   * 树分级类型(分级码=path 父路径=parent) \n   */\n  hierarchyType?: string;\n}\n\n\n/**\n * 【对象属性元数据】名称\n */\nexport const OBJECT_PROP_META = 'ObjectPropMeta';\n\n\n/**\n * 【对象属性元数据装饰器工厂】接口\n * @summaryh\n * obj 参数obj的值类型可以为 NgObjectProperty、string、ClassType\n * 当为string 时，则设其映射字段；\n * 当为ClassType时，则设置集合中的记录类型\n */\nexport interface ObjectPropMetaDecorator {\n\n  (obj: ObjectPropMetadata | string | ClassType): any;\n\n  new(obj: ObjectPropMetadata | string | ClassType): any;\n}\n\n\n/**\n * 【对象属性元数据装饰器工厂】的工厂\n */\nfunction makeObjectPropMetaDecorator(options: ObjectPropMetadata | string | ClassType): any {\n  if (ObjectUtil.isPlainObject(options)) {\n    return options;\n  }\n\n  const type = typeof options;\n  if (type === 'string') {\n    return {\n      dataField: options\n    };\n  }\n\n  if (type === 'function') {\n    return {\n      type: options\n    };\n  }\n}\n\n\n/**\n * 对象属性元数据装饰器工厂\n */\nexport const ObjectPropMeta: ObjectPropMetaDecorator = makePropDecorator(OBJECT_PROP_META, makeObjectPropMetaDecorator);\n","import { makePropDecorator } from '../../core/index';\nimport { ObjectUtil } from '../../utils/index';\nimport { ClassType } from '../types';\nimport { PropMetadata } from './prop_meatadata';\n\n\n/**\n * 【动态对象元数据】接口\n */\nexport interface DynamicPropMetadata extends PropMetadata {\n\n  /**\n   * 映射字段\n   */\n  dataField?: string;\n\n  /**\n   * 原始字段名称\n   */\n  originalDataField?: string;\n\n  /**\n   * 表名\n   */\n  tableName?: string;\n\n  /**\n   * 引用实体类型\n   */\n  type?: ClassType;\n}\n\n\n/**\n * 【动态对象元数据装饰器】名称\n */\nexport const DYNAMIC_PROP_META = 'DynamicPropMeta';\n\n\n/**\n * 【动态对象元数据装饰器工厂】接口\n */\nexport interface DynamicPropMetaDecorator {\n\n  (obj: DynamicPropMetadata | string | ClassType): any;\n\n  new(obj: DynamicPropMetadata | string | ClassType): any;\n}\n\n\n/**\n * 【动态对象元数据装饰器工厂】的工厂\n */\nfunction makeDynamicPropMetaDecorator(options: DynamicPropMetadata | string | ClassType): any {\n  if (ObjectUtil.isPlainObject(options)) {\n    return options;\n  }\n\n  const type = typeof options;\n  if (type === 'string') {\n    return {\n      dataField: options\n    };\n  }\n\n  if (type === 'function') {\n    return {\n      type: options\n    };\n  }\n}\n\n\n/**\n * 实体属性注解\n */\nexport const DynamicPropMeta: DynamicPropMetaDecorator = makePropDecorator(DYNAMIC_PROP_META, makeDynamicPropMetaDecorator);","import { makePropDecorator } from '../../core/index';\nimport { ObjectUtil } from '../../utils/index';\nimport { ClassType } from '../types';\nimport { PropMetadata } from './prop_meatadata';\n\n\n/**\n * 列表属性元数据\n */\nexport interface ListPropMetadata extends PropMetadata {\n\n  /**\n   * 表名\n   */\n  tableName?: string;\n\n  /**\n   * 字段名称\n   */\n  dataField?: string;\n\n  /**\n   * 原始字段名称\n   */\n  originalDataField?: string;\n\n  /**\n   * 实体类型\n   */\n  type?: any;\n}\n\n\n/**\n * 【列表属性元数据】名称\n */\nexport const LIST_PROP_META = 'ListPropMeta';\n\n\n/**\n * 【列表属性元数据装饰器工厂】接口\n */\nexport interface ListPropMetaDecorator {\n\n  (obj: ListPropMetadata | string | ClassType): any;\n\n  new(obj: ListPropMetadata | string | ClassType): any;\n\n}\n\n/**\n * 【列表属性元数据装饰器工厂】的工厂\n */\nfunction makeListPropMetaDecorator(options: ListPropMetadata | string | ClassType): any {\n  if (ObjectUtil.isPlainObject(options)) {\n    return options;\n  }\n\n  const type = typeof options;\n  if (type === 'string') {\n    return {\n      dataField: options\n    };\n  }\n\n  if (type === 'function') {\n    return {\n      type: options\n    };\n  }\n}\n\n\n/**\n * 列表属性装饰器工厂\n */\nexport const ListPropMeta: ListPropMetaDecorator = makePropDecorator(LIST_PROP_META, makeListPropMetaDecorator);\n","import { makeDecorator } from '../../core/index';\n\nexport const ENTITY_META = 'EntityMeta';\n\n/**\n * 实体描述\n */\nexport interface EntityMetadata{\n\n  /**\n   * 原始编号,对应schema中的code\n   */\n  originalCode: string;\n\n  /**\n   * 后端转换完之后的编号,对应schema中的label\n   */\n  nodeCode: string;\n}\n\n/**\n * 实体装饰器\n */\nexport interface EntityMetaDecorator {\n  (obj?: EntityMetadata): any;\n  new(obj?: EntityMetadata): any;\n}\n\n/**\n * 实体装饰器\n */\nexport function EntityMeta(options: EntityMetadata){\n  const decoratorFactory = makeDecorator(ENTITY_META, (obj: EntityMetadata) => obj);\n  return decoratorFactory(options);\n}","import { MetadataUtil } from '../../core/index';\nimport {\n  PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META,\n  PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata\n} from './field_decorator';\n\n/**\n * 属性注解器通用方法\n */\nexport class FieldMetadataUtil {\n  /**\n   * 获取实体所有的简单属性元数据\n   * @param target 实体类型\n   * @returns 形如：{[propName: string]: NgObjectProperty}\n   */\n  static getNgFields(target: any): { [propName: string]: PrimitivePropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);\n  }\n\n  /**\n   * 获取某个简单属性的元数据\n   */\n  static getNgField(target: any, propName: string): PrimitivePropMetadata {\n    const ngFields = this.getNgFields(target);\n    const ngField = ngFields[propName] as PrimitivePropMetadata;\n    return ngField;\n  }\n\n  /**\n   * 获取实体属性在原始数据中的属性名\n   */\n  static getDataField(target: any, propName: string) {\n    const ngField = this.getNgField(target, propName);\n    return ngField.dataField || propName;\n  }\n\n  /**\n   * 获取标注为NgObject的属性的元数据\n   * @param target 实体类型\n   * @returns 形如：{[propName: string]: NgObjectProperty}\n   */\n  static getNgObjects(target: any): { [propName: string]: ObjectPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);\n  }\n\n  static getNgDynamic(target: any): { [propName: string]: ObjectPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);\n  }\n\n  /**\n   * 获取标注为NgList的属性的元数据\n   * @param target 实体类型\n   * @returns 形如：{[propName: string]: NgListProperty}\n   */\n  static getNgList(target: any): { [propName: string]: ListPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);\n  }\n\n  /**\n   * 获取实体标注为主键的属性元数据\n   * @param target 实体类型\n   */\n  static getPrimaryFieldMetadata(target: any): PrimitivePropMetadata | undefined {\n    const ngFieldObj = FieldMetadataUtil.getNgFields(target);\n    const primaryKey = Object.keys(ngFieldObj).find((prop: string) => {\n      return ngFieldObj[prop].primary;\n    });\n\n    if (primaryKey) {\n      const propMeta = ngFieldObj[primaryKey];\n      propMeta.property = primaryKey;\n      if (!propMeta.dataField) {\n        propMeta.dataField = primaryKey;\n      }\n\n      return propMeta;\n    }\n    return undefined;\n  }\n\n  /**\n   * 获取主键名称，没有主键时返回空字符串\n   */\n  static getPrimaryKey(entityType: any) {\n    const primaryNgField = this.getPrimaryFieldMetadata(entityType);\n    if (!primaryNgField) {\n      return '';\n    }\n    return primaryNgField.property;\n  }\n\n}\n","import { Type } from '../../core/index';\nimport { MetadataUtil } from '../../core/index';\nimport { Entity } from '../entity';\n\nimport { EntityMetadata, ENTITY_META } from './entity_decorator';\nimport {\n  PropMetadata, PRIMITIVE_PROP_META, PrimitivePropMetadata, OBJECT_PROP_META, ObjectPropMetadata,\n  DYNAMIC_PROP_META, DynamicPropMetadata, LIST_PROP_META,    ListPropMetadata\n} from './field_decorator';\n\n/**\n * 实体元数据工具类\n */\nexport class EntityMetadataUtil {\n\n  /**\n   * 获取所有属性\n   * @todo：封装根据基类获取所有元数据的方法，解决重复代码\n   */\n  static getAllNgProperties(entityType: Type<Entity>): { [propName: string]: PropMetadata } {\n    const ngPlainProperties = this.getNgFieldProperties(entityType);\n    const ngEntityProperties = this.getNgObjectProperties(entityType);\n    const ngDynamicProperties = this.getNgDynamicProperties(entityType);\n    const ngEntityListProperties = this.getNgObjectProperties(entityType);\n\n    return Object.assign({},\n      ngPlainProperties,   ngEntityProperties,\n      ngDynamicProperties, ngEntityListProperties\n    );\n  }\n  \n  /**\n   * 获取EnttiyClassMetadata\n   */\n  static getNgEntityMatadata(entityType: any): EntityMetadata{\n    return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, ENTITY_META);\n  }\n\n\n  /**\n   * 获取PrimitivePropMetadata的属性元数据\n   */\n  static getNgFieldProperties(entityType: any): { [propName: string]: PrimitivePropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);\n  }\n\n  /**\n   * 获取ObjectPropMetadata属性元数据\n   */\n  static getNgObjectProperties(entityType: any): { [propName: string]: ObjectPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);\n  }\n\n  /**\n   * 获取DynamicPropMetadata属性元数据\n   */\n  static getNgDynamicProperties(entityType: any): { [propName: string]: DynamicPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);\n  }\n\n  /**\n   * 获取ListPropMetadata属性元数据\n   */\n  static getNgListProperties(entityType: any): { [propName: string]: ListPropMetadata } {\n    return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);\n  }\n\n  /**\n   * 获取主键属性元数据\n   */\n  static getPrimaryKeyProperty(entityType: Type<Entity>): PrimitivePropMetadata {\n    let primaryKeyProperty;\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\n      if (ngProperty.primary === true) {\n        primaryKeyProperty = ngProperty;\n      }\n    });\n\n    return primaryKeyProperty;\n  }\n}\n","/*\n * @Author: Witt\n * @Date: 2018-12-07 09:05:09\n * @Last Modified by: Witt\n * @Last Modified time: 2018-12-27 20:35:02\n */\n\nimport { Type } from '../../core/types';\nimport {\n  EntityMetadata, PropMetadata, PrimitivePropMetadata, ObjectPropMetadata, DynamicPropMetadata, ListPropMetadata,\n  EntityMetadataUtil\n} from '../metadata/index';\nimport { DataPropGroup, DataPropInfo } from './data_prop_info';\n\n/**\n * 实体类型信息\n * @todo：\n * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；\n * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。\n */\nclass DataTypeInfo {\n\n  /**\n   * 实体描述元数据\n   */\n  public entityInfo: EntityMetadata;\n\n  /**\n   * 数据类型\n   */\n  public type: Type<any>;\n\n  /**\n   * 属性集合\n   */\n  public propInfoMap: Map<string, DataPropInfo>;\n\n  /**\n   * 主键\n   */\n  public primaryKey: string;\n\n  /**\n   * 外键\n   */\n  public foreignKey: string;\n\n  /**\n   * 是否为值对象\n   */\n  public get isValueObject() {\n    return !this.primaryKey;\n  }\n\n  /**\n   * 构造函数\n   * @todo：不应该识别\n   */\n  constructor(type: any) {\n    this.type = type;\n    this.primaryKey = '';\n    this.foreignKey = '';\n    this.propInfoMap = new Map<string, DataPropInfo>();\n    this.collectEntityInfos();\n    this.collectPropInfos();\n  }\n\n  /**\n   * 获取全部属性信息\n   */\n  public getPropInfos(): DataPropInfo[] {\n    return Array.from(this.propInfoMap.values());\n  }\n\n  /**\n   * 获取全部属性的名称\n   */\n  public getPropNames(): string[] {\n    const propNames = [];\n    const propInfos = this.getPropInfos();\n    propInfos.forEach((propInfo) => {\n      propNames.push(propInfo.name);\n    });\n    return propNames;\n  }\n\n  /**\n   * 根据group获取属性信息数组\n   */\n  public getPropInfosByGroup(group: DataPropGroup): DataPropInfo[] {\n    const allPropInfos = Array.from(this.propInfoMap.values());\n    const propInfos = allPropInfos.filter((propInfo: DataPropInfo) => {\n      return propInfo.group === group;\n    });\n    return propInfos;\n  }\n\n  /**\n   * 根据group获取属性名称数组\n   * @param group 属性分组\n   */\n  public getPropNamesByGroup(group: DataPropGroup): string[] {\n    const propNames = [];\n    const propInfos = this.getPropInfosByGroup(group);\n    propInfos.forEach((propInfo) => {\n      propNames.push(propInfo.name);\n    });\n    return propNames;\n  }\n\n  /**\n   * 根据propName获取属性信息\n   */\n  public getPropInfoByName(propName: string): DataPropInfo {\n    if (this.propInfoMap.has(propName)) {\n      return this.propInfoMap.get(propName);\n    }\n    return null;\n  }\n\n  /**\n   * 根据path获取属性信息\n   */\n  public getPropInfoByPath(path: string[]): DataPropInfo {\n\n    // 先复制，防止shift方法产生污染\n    const arrPath = path.concat([]);\n    if (arrPath.length === 0) {\n      throw Error(`属性路径不能为空`);\n    }\n\n    // 循环查找\n    let typeInfo = this;\n    let propInfo = null;\n    while (typeInfo && arrPath.length > 0) {\n\n      const propName = arrPath.shift();\n      propInfo = typeInfo.getPropInfoByName(propName);\n      if (!propInfo) {\n        throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);\n      }\n      typeInfo = propInfo.typeInfo;\n\n      // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)\n      if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {\n        propInfo = null;\n        typeInfo = null;\n      }\n    }\n\n    return propInfo;\n  }\n\n  /**\n   * 根据path获取对应属性的TypeInfo\n   */\n  public getTypeInfoByPath(path: string[]): DataTypeInfo {\n\n    // 空数组时返回\n    if (path.length === 0) {\n      return this;\n    }\n\n    // 获取对应属性信息\n    const propInfo = this.getPropInfoByPath(path);\n    if (!propInfo.typeInfo) {\n      throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);\n    }\n\n    return propInfo.typeInfo;\n  }\n\n  /**\n   * 获取主键的属性信息\n   */\n  public getPrimaryKeyPropInfo(): DataPropInfo {\n    return this.getPropInfoByName(this.primaryKey);\n  }\n\n  /**\n   * 根据name获取影射名\n   */\n  public getPropMappingByName(name: string): string {\n    const propInfo = this.getPropInfoByName(name);\n    if (!propInfo) {\n      return '';\n    }\n    return propInfo.mapping;\n  }\n\n  /**\n   * 根据path获取映射名\n   */\n  public getPropMappingByPath(path: string[]): string {\n    const propInfo = this.getPropInfoByPath(path);\n    if (!propInfo) {\n      return '';\n    }\n    return propInfo.mapping;\n  }\n\n  /**\n   * 检查属性是否属于特定的分组\n   */\n  public checkPropGroup(propName: string, propGroup: DataPropGroup): boolean {\n    const propInfo = this.getPropInfoByName(propName);\n    if (propInfo && propInfo.group === propGroup) {\n      return true;\n    }\n    return false;\n  }\n\n\n  /**\n   * --------------------------------------------------------------------------------\n   * 属性元数据 => 属性描述信息\n   * --------------------------------------------------------------------------------\n   */\n\n  private collectEntityInfos() {\n    const entityMetadata = EntityMetadataUtil.getNgEntityMatadata(this.type);\n    this.entityInfo = entityMetadata;\n  }\n\n  /**\n   * 搜集所有属性信息\n   * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。\n   */\n  private collectPropInfos() {\n\n    // 简单属性\n    const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);\n    Object.keys(ngPlainProperties).forEach((propName: string) => {\n      const ngProperty = ngPlainProperties[propName] as PrimitivePropMetadata;\n      if (ngProperty.primary === true) {\n        this.primaryKey = propName;\n      }\n      if (ngProperty.foreign === true) {\n        this.foreignKey = propName;\n      }\n      this.addPropInfo(DataPropGroup.Primitive, propName, ngProperty.dataField, null, ngProperty);\n    });\n\n    // 实体属性\n    const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);\n    Object.keys(ngEntityProperties).forEach((propName: string) => {\n      const ngProperty = ngEntityProperties[propName] as ObjectPropMetadata;\n      this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);\n    });\n\n    // 动态实体属性\n    const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);\n    Object.keys(ngDynamicProperties).forEach((propName: string) => {\n      const ngProperty = ngDynamicProperties[propName] as DynamicPropMetadata;\n      this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);\n    });\n\n    // 实体列表属性\n    const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);\n    Object.keys(ngEntityListProperties).forEach((propName: string) => {\n      const ngProperty = ngEntityListProperties[propName] as ListPropMetadata;\n      this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);\n    });\n  }\n\n  /**\n   * 添加属性信息\n   */\n  private addPropInfo(group: DataPropGroup, name: string, mapping: string, type: Type<any>, metadataInfo: PropMetadata) {\n\n    // 没有设置影射时，用属性名充当影射\n    mapping = mapping ? mapping : name;\n    let typeInfo = null;\n    if (type) {\n      typeInfo = new DataTypeInfo(type);\n    }\n    const propInfo = { group, name, mapping, typeInfo, metadataInfo };\n    this.propInfoMap.set(name, propInfo);\n  }\n\n}\n\nexport { DataTypeInfo };\n","\nimport { DataTypeInfo, DataPropGroup  } from '../entity-type-info/index';\nimport { Entity  } from '../index';\nimport { Repository, EntityManager } from '../../repository/index';\nimport { BindingData } from '../../binding-data/index';\nimport { DataPathNode, DataPathNodeType } from './data_path_node';\nimport { DataPath } from './data_path';\n\n/**\n * 数据Path工厂类\n */\nclass DataPathCreator {\n\n  /**\n   * 将长路径数组或字符串转换为\n   * @param fullPathArrayOrString 路径数组或字符串\n   * @param repository 实体仓库\n   * @summary\n   * 1、长路径格式说明参考：data-path.md\n   */\n  public static createByLongPathFromRoot(fullPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>): DataPath {\n    const dataPath = new DataPath();\n    const fullPathArray = fullPathArrayOrString as string[];\n    if (!fullPathArray || fullPathArray.length === 0) {\n      return dataPath;\n    }\n\n    let currentNodeInfo = {\n      nodeValue: fullPathArray.shift(),\n      nodeType: DataPathNodeType.DataId,\n      entityTypeInfo: new DataTypeInfo(entityManager.entityType)\n    };\n    while (currentNodeInfo) {\n      dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);\n\n      // 处理下一个节点\n      const nextNodeValue = fullPathArray.shift();\n      if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {\n        break;\n      }\n      currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);\n    }\n\n    return dataPath;\n  }\n\n  /**\n   * 获取下一个路径节点的信息\n   * @param parentNodeInfo 当前路径节点信息\n   * @param nextNodeValue 下一个路径节点的值\n   * @summary\n   * 1、这个递归写的很绕，说明数据结构设计不合理；\n   * 2、多个因素混用了一个结构；\n   */\n  private static getNextPathNodeInfo(parentNodeInfo: any, nextNodeValue: string): any {\n\n    const parentNodeValue = parentNodeInfo.nodeValue;\n    const parentNodeType = parentNodeInfo.nodeType;\n    const parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;\n\n    if (!nextNodeValue || !parentEntityTypeInfo) {\n      return null;\n    }\n\n    const nextPathNodeInfo = {\n      nodeValue: nextNodeValue,\n      nodeType: null,\n      entityTypeInfo: null\n    };\n\n\n    // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变\n    if (parentNodeType === DataPathNodeType.DataId) {\n      nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\n      nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;\n    } else {\n\n      // DataNodeType=Object：必然对应一个属性信息\n      const nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);\n      if (nextPropInfo.group === DataPropGroup.List) {\n\n        // EntityPropGroup=EntityList：下一个节点是List类型。\n        nextPathNodeInfo.nodeType = DataPathNodeType.DataId;\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;\n      } else {\n\n        // EntityPropGroup=Entity：       下级entityTypeInfo为\n        // EntityPropGroup=Dynamic|Plain：null\n        nextPathNodeInfo.nodeType = DataPathNodeType.PropName;\n        nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;\n      }\n    }\n\n    return nextPathNodeInfo;\n  }\n\n  /**\n   * @param fullPathArrayOrString 路径数组或字符串\n   * @param repository 实体仓库\n   * @summary\n   * 1、长路径格式说明参考：data-path.md\n   * 2、shortPathArrayOrString暂时只支持字符串数组\n   */\n  public static createByShortPathFromRoot(\n    shortPathArrayOrString: string[] | string, entityManager: EntityManager<Entity>, bindingData: BindingData\n  ): DataPath {\n\n    const dataPath = new DataPath();\n    const shortPathArray: string[] = shortPathArrayOrString as string[];\n\n    // 根节点\n    let currentBindingObject = bindingData.list.currentItem;\n    let currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);\n    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\n\n    // 遍历下级节点\n    shortPathArray.forEach((propName: string) => {\n      const propInfo = currentEntityTypeInfo.getPropInfoByName(propName);\n      switch (propInfo.group) {\n        case DataPropGroup.Primitive:\n          dataPath.push(DataPathNodeType.PropName, propName);\n          break;\n        case DataPropGroup.Object:\n          currentBindingObject = currentBindingObject[propName];\n          currentEntityTypeInfo = propInfo.typeInfo;\n          dataPath.push(DataPathNodeType.PropName, propName);\n\n          break;\n        case DataPropGroup.List:\n          const currentBindingList = currentBindingObject[propName];\n          currentBindingObject = currentBindingList.currentItem;\n          currentEntityTypeInfo = propInfo.typeInfo;\n\n          dataPath.push(DataPathNodeType.PropName, propName);\n          dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);\n          break;\n        default:\n            break;\n      }\n    });\n\n    return dataPath;\n  }\n\n}\n\nexport { DataPathCreator };\n","/**\n * 获取path对应的实体\n * @summary\n * 关于path的格式如下：\n * - 主表：[parentId]\n * - 主表关联: [parentId, assoInfo]\n * - 从表: [parentId, child1s, child1Id]\n * - 从表关联：[parentId, child1s, child1Id, assoInfo]\n * - 从从表: [parentId, child1s, child1Id, grand11s, grand11Id]\n * - 从从表关联：[parentId, child1s, child1Id, grand11s, grand11Id, assoInfo]\n */\n\n\n\nexport * from './data_path_node';\nexport * from './data_path';\nexport * from './data_path_creator';\n","export const PARENT_PATH = '__PARENT_PATH__';\nexport const PARENT_CLASS = '__PARENT__';\n\nexport type ClassType = new (...args: any[]) => any;\n\nexport interface Dynamic {\n  loadDynamicData(dynamicData: any): void;\n}\n","import { Type } from '../core/index';\nimport { Entity } from './entity';\n\n/**\n * 创建实体\n * @param entityType 实体类型\n * @param entityData 实体数据\n */\nexport function createEntity<T extends Entity>(entityType: Type<any>, entityData: any): T {\n  const entity = new entityType(entityData);\n  return entity;\n}\n\n/**\n * 批量创建实体\n * @param entityType     实体类型\n * @param entityListData 实体数据数组\n */\nexport function createEntities<T extends Entity>(entityType: Type<any>, entityListData: any): T[] {\n  const entities: T[] = [];\n  entityListData.forEach((entityData: any) => {\n    const entity = createEntity<T>(entityType, entityData);\n    entities.push(entity);\n  });\n  return entities;\n}\n\n/**\n * 已弃用：请使用createEntity方法代替。\n */\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\n  const entity = new T(data);\n  return entity;\n}\n\n\n\n","import { Subject } from 'rxjs';\nimport { ChangeSet } from '../changeset/change_set';\nimport { Modification, ModifyType } from '../changeset/types';\nimport { Entity } from './entity';\nimport { EntityFactory } from './entity_creator';\nimport { PARENT_CLASS, PARENT_PATH, ClassType } from './types';\n\nexport interface IList<T> {\n  [index: number]: T;\n}\n/**\n * 实体集合列表\n */\nexport class EntityList<T extends Entity> implements IList<T>, Iterable<T> {\n  public __type__ = 'EntityList';\n\n  // #region 私有属性\n  private originalData: any[] = [];\n  /**\n   * 已废弃：请勿使用\n   */\n  private rawData: T[];\n\n  /**\n   * 已废弃：请勿使用\n   */\n  private listChanged = new Subject<Modification>();\n\n  /**\n   * 已废弃：请勿使用\n   */\n  private changeSet = new ChangeSet();\n  // #endregion\n\n\n  // #region 公有属性\n\n  /**\n   * 集合改变时触发(新增、行记录修改、删除)\n   * @event\n   */\n  public onListChanged = this.listChanged.asObservable();\n\n  /**\n   * 获取项集合\n   */\n  public get items(): T[] {\n    return this.rawData;\n  }\n\n  /**\n   * 列表变更集\n   */\n  public get changes() {\n    return this.changeSet.changes;\n  }\n\n  /**\n   * 获取指定索引处的值\n   */\n  [index: number]: T;\n\n  /**\n   * 迭代器\n   */\n  *[Symbol.iterator](): Iterator<T> {\n    yield* this.items;\n  }\n\n  // #endregion\n\n\n  /**\n   * @param data JSON数据集合\n   * @param type 集合中的实体类型\n   */\n  constructor(data?: any[], type?: ClassType) {\n    this.clear();\n    if (data) {\n      // this.loadEntities(data);\n      data.forEach(item => {\n        this.initEntity(EntityFactory(type, item));\n      });\n    }\n  }\n\n\n  // #region 公有方法\n\n  /** 加载实体列表 */\n  public loadEntities(entities: T[]) {\n    this.clear();\n\n    entities.forEach(entity => {\n      this.initEntity(entity);\n    });\n\n    // 发送Load变更\n    const changeItem = {\n      path: [],\n      value: entities,\n      preValue: undefined,\n      type: ModifyType.Load,\n      target: this\n    };\n    this.setChanges(changeItem);\n  }\n  /**\n   * 清空\n   */\n  public clear() {\n    this.rawData = [];\n    this.originalData = [];\n  }\n\n  /**\n   * 添加实体对象到集合中，并返回新加的对象\n   * @param entity 实体对象\n   * @param isCloned 克隆\n   */\n  public appendNew(entity: T, isCloned: boolean = false): T {\n    const newEntity = this.initEntity(entity, true);\n    // 新增变更\n    const changeItem = {\n      path: [],\n      value: [newEntity],\n      preValue: undefined,\n      type: ModifyType.Add\n    };\n\n    if (isCloned === true) {\n      changeItem.type = ModifyType.Clone;\n    }\n\n    this.setChanges(changeItem);\n    return newEntity;\n  }\n  /**\n   * 在指定位置插入实体\n   * @param entity 实体\n   * @param position 插入位置\n   */\n  public insert(entity: T, position?: 1 | -1): T {\n    const newEntity = this.initEntity(entity, true);\n\n    // 新增变更\n    const changeItem = {\n      path: [],\n      value: [newEntity],\n      preValue: undefined,\n      type: ModifyType.Insert,\n      position: position,\n    };\n\n    this.setChanges(changeItem);\n    return newEntity;\n  }\n  /**\n   * 追加实体\n   */\n  public appendEntity(entity: T): void {\n    const newEntity = this.initEntity(entity);\n\n    // 新增变更\n    const changeItem = {\n      path: [],\n      value: [newEntity],\n      preValue: undefined,\n      type: ModifyType.Add\n    };\n\n    this.setChanges(changeItem);\n  }\n\n  /**\n   * 批量追加实体\n   */\n  public appendEntities(entities: T[]): void {\n    const newEntites = entities.map((entity: T) => {\n      return this.initEntity(entity);\n    });\n    const changeItem = {\n      path: [],\n      value: newEntites,\n      preValue: undefined,\n      type: ModifyType.Add\n    };\n\n    this.setChanges(changeItem);\n  }\n\n  /**\n   * 删除指定主键ID 的实体对象，返回布尔，true 删除成功，false 删除失败\n   * @param primaryId 主键ID\n   */\n  public remove(primaryId: string): boolean {\n    const total = this.count();\n    const indexToRemove = this.rawData.findIndex((entity: Entity) => {\n      return entity.primaryValue === primaryId;\n    });\n    if (indexToRemove === -1) {\n      return false;\n    }\n    const entityToRemove = this.rawData[indexToRemove];\n    this.rawData.splice(indexToRemove, 1);\n\n    // 删除变更\n    const changeItem = {\n      path: [],\n      value: { [entityToRemove.primaryProperty.dataField]: primaryId },\n      preValue: undefined,\n      type: ModifyType.Remove\n    };\n\n    this.updateIndex(total);\n    this.setChanges(changeItem);\n\n    return true;\n  }\n\n  /**\n   * 从集合中获取指定ID值的实体对象\n   * @param id 主键值\n   */\n  public get(id: string) {\n    return this.items.find(item => {\n      return item.primaryValue === id;\n    });\n  }\n\n  /**\n   * 将变更记录添加到集合变更集中\n   * @param value 变更记录\n   */\n  public setChanges(modinfo: Modification) {\n    // 向app层发送的变更\n    this.listChanged.next(modinfo);\n\n    // 构造向changeSet中添加的chagne\n    const change = Object.assign({}, modinfo);\n    if ((modinfo.type === ModifyType.Add || modinfo.type === ModifyType.Insert || modinfo.type === ModifyType.Clone) && modinfo.value[0] instanceof Entity) {\n      change.value = [modinfo.value[0].data];\n    }\n    this.changeSet.append(change);\n  }\n\n  /** 集合总记录数 */\n  public count() {\n    return this.items.length;\n  }\n\n  /**\n   * 获取实体对象的索引值\n   */\n  public indexOf(entity: T): number {\n    return this.items.indexOf(entity);\n  }\n\n  /**\n   * 计算集合中某个属性的总和\n   * @param propertyName 属性名称\n   */\n  public sum(propertyName: string): number {\n    if (this.count() === 0) {\n      return 0;\n    }\n    return this.items.reduce((val, curr: T) => {\n      return val + curr[propertyName];\n    }, 0);\n  }\n\n  /**\n   * 已废弃：请使用toJSON方法代替\n   * @deprecated\n   */\n  public toJson() {\n    return this.rawData;\n  }\n\n  /**\n   * 转换为JSON格式\n   */\n  public toJSON(): any[] {\n    const result = [];\n    this.items.forEach((entity: Entity) => {\n      result.push(entity.toJSON());\n    });\n    return result;\n  }\n\n  public toArray(): T[] {\n    return this.items;\n  }\n\n  // #endregion\n\n\n  // #region 私有方法\n\n  /**\n   * 实体初始化\n   * @param entity 实体\n   */\n  private initEntity(entity: T, isNewEntity: boolean = false): T {\n    entity[PARENT_CLASS] = this;\n    entity[PARENT_PATH] = this[PARENT_PATH];\n    entity.onValueChanged.subscribe((v: Modification) => {\n      const path = v.path;\n      const value = v.value;\n      const preValue = v.preValue;\n      const operator = v.type;\n      const subChanges = { path, value, preValue, type: operator };\n      if (v.changeSetValue !== undefined) {\n        subChanges['changeSetValue'] = v.changeSetValue;\n      }\n      this.setChanges(subChanges);\n    });\n    // TODO: 添加数据验证逻辑代码\n    const newLength = this.rawData.push(entity);\n    this[newLength - 1] = entity;\n    if (!isNewEntity) {\n      this.originalData.push(entity.toJSON());\n    }\n    return entity;\n  }\n\n  /**\n   * 更新索引\n   * @param total 总记录数\n   */\n  private updateIndex(total: number) {\n    for (let i = 0; i < total; i++) {\n      delete this[i];\n    }\n    this.rawData.forEach((entity, index) => {\n      this[index] = entity;\n    });\n  }\n\n  /**\n   * 获取属性名称\n   */\n  private getPropertyName() {\n    const path = this[PARENT_PATH];\n    if (path && path.length) {\n      const name = path[path.length - 1];\n      return name;\n    }\n    return undefined;\n  }\n\n  // #endregion\n\n}\n","import { Entity } from './entity';\n\nexport function EntityFactory<T extends Entity>(T: new (...args: any[]) => any, data: any): T {\n    const entity = new T(data);\n    return entity;\n}\n","import { Observable, Subject, from, of } from 'rxjs';\nimport { scan, map, tap } from 'rxjs/operators';\nimport { PrimitivePropMetadata, ListPropMetadata, ObjectPropMetadata, DynamicPropMetadata, FieldMetadataUtil } from './metadata/index';;\nimport { Modification, ModifyType, ChangeSet } from '../changeset/index';\nimport { PARENT_PATH, PARENT_CLASS, Dynamic } from './types';\nimport { EntityList } from './entity_list';\nimport { EntityFactory } from './entity_factory';\n\n/**\n * @author Lucas Huang\n * 实体抽象基类，所有实体必须扩展自Entity\n *\n * ### 使用示例\n * ```\n * export class UserEntity extends Entity {\n *    userId: string;\n *    userName: string;\n *\n *    constructor(data: any){\n *        super(data);\n *    }\n * }\n * ```\n */\nexport abstract class Entity {\n\n\n  // #region 私有、保护属性\n\n  /**\n   * 验证错误集合\n   */\n  private validErrors = {};\n\n  /**\n   * 增量变更集合\n   */\n  protected changeSet = new ChangeSet();\n\n  /**\n   * 是否正在验证\n   */\n  protected isValidating = false;\n\n  /**\n   * 新数据\n   */\n  protected newData = undefined;\n\n  // #endregion\n\n\n  // #region 公有属性\n\n  /**\n   * 变更流\n   */\n  public valueChanged = new Subject<Modification>();\n\n  /**\n   * 属性值改变时触发\n   *\n   * ### 使用示例\n   * ```\n   *  const entity = new UserEntity(data);\n   *  entity.onValueChanged.subscribe((data: Modification) => {\n   *      console.log(data);\n   *  })\n   *\n   * ```\n   *\n   * @event\n   */\n  public onValueChanged = this.valueChanged.asObservable();\n\n  /**\n   * 返回JSON格式的数据\n   */\n  public get data(): any {\n    return this.newData;\n  }\n\n  /**\n   * 验证错误集合\n   */\n  public get errors() {\n    return this.validErrors;\n  }\n\n  /**\n   * 实体变更集\n   */\n  public get changes(): Modification[] {\n    return this.changeSet.changes;\n  }\n\n  /**\n   * 是否变更\n   */\n  public hasChange = false;\n\n  /**\n   * 实体主键元数据\n   */\n  public get primaryProperty(): PrimitivePropMetadata {\n    return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);\n  }\n\n  /**\n   * 主键\n   * @todo\n   * 1、没有主键时返回''不合理，应该返回undefined\n   */\n  public get primaryKey(): string {\n    if (this.primaryProperty) {\n      return this.primaryProperty.property;\n    } else {\n      return '';\n    }\n  }\n\n  /**\n   * 实体主键值\n   * 1、没有主键时返回''不合理，应该返回undefined\n   */\n  public get primaryValue(): string {\n    if (this.primaryKey) {\n      // return this[this.primaryProperty.property].toString();\n      const primaryValue = this[this.primaryProperty.property];\n      return primaryValue ? primaryValue : '';\n    } else {\n      return '';\n    }\n  }\n\n  // #endregion\n\n\n  /**\n   * @param data JSON数据\n   */\n  constructor(data: any) {\n    this.newData = Object.assign({}, data);\n    this.onValueChanged = this.valueChanged;\n    this.initialize();\n  }\n\n\n  // #region 公有方法\n\n  /**\n   * 将变更记录保存至变更集中\n   * @param value 变更记录\n   */\n  public setChanges(value: Modification): void {\n    const propertyName = value.path[value.path.length - 1];\n    // 增加实体变化后增加标志，加载数据或者重新加载不做标记\n    if (value.type !== ModifyType.Load) { this.hasChange = true; }\n\n    // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。\n    // this.newData = Object.assign(this.newData, { [propertyName]: value.value });\n    this.valueChanged.next(value);\n    this.changeSet.append(value);\n  }\n\n  public getPaths() {\n    const pathObj = {\n      path: [],\n      isUdt: false,\n      isGrid: false\n    };\n    const handleParent = item => {\n      const parentPaths = item[PARENT_PATH];\n      if (parentPaths) {\n        const prop = parentPaths[parentPaths.length - 1];\n        // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段\n        if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {\n          pathObj.isUdt = true;\n        }\n        // 存在类型为ngList，则判断为grid\n        if (item[PARENT_CLASS] && item instanceof EntityList === true) {\n          pathObj.isGrid = true;\n        }\n        pathObj.path.push(prop);\n      }\n      if (item[PARENT_CLASS] && item instanceof EntityList === true) {\n        handleParent(item[PARENT_CLASS]);\n      }\n    };\n    handleParent(this);\n    pathObj.path = pathObj.path.reverse();\n    return pathObj;\n  }\n\n  /**\n   * 加载数据\n   * @param data 新数据\n   */\n  public load(data: any) {\n    if (!data) {\n      data = {};\n    }\n\n    this.loadFields(data);\n    this.loadLists(data);\n    this.loadObjects(data);\n\n    this.loadDynamicObjects(data);\n    this.newData = Object.assign({}, data);\n  }\n\n  /**\n   * 转换为JSON\n   */\n  public toJSON() {\n    const result = {};\n\n    // 简单属性\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\n    Object.keys(ngFields).forEach((propName: string) => {\n      const ngField = ngFields[propName];\n      const dataField = ngField.dataField || propName;\n      result[dataField] = this[propName];\n    });\n\n    // 对象属性\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\n    Object.keys(ngObjects).forEach((propName: string) => {\n      const ngObject = ngObjects[propName];\n      const dataField = ngObject.dataField || propName;\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\n    });\n\n    // 动态属性\n    const ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);\n    Object.keys(ngDynamics).forEach((propName: string) => {\n      const ngDynamic = ngDynamics[propName];\n      const dataField = ngDynamic.dataField || propName;\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\n    });\n\n    // 列表属性\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\n    Object.keys(ngLists).forEach((propName: string) => {\n      const ngList = ngLists[propName];\n      const dataField = ngList.dataField || propName;\n      result[dataField] = this[propName] ? this[propName].toJSON() : {};\n    });\n\n    return result;\n  }\n\n  // #endregion\n\n\n  //#region 实体初始化相关private方法\n\n  /**\n   * 初始化实体\n   */\n  private initialize() {\n    const constructor = this.constructor;\n\n    const ngFields = FieldMetadataUtil.getNgFields(constructor);\n    const ngObjects = FieldMetadataUtil.getNgObjects(constructor);\n    const ngLists = FieldMetadataUtil.getNgList(constructor);\n    const ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);\n\n    this.initializeNormalField(ngFields);\n    this.initializeList(ngLists);\n    this.initializeObject(ngObjects);\n    this.initializeDynamic(ngDynamic);\n  }\n\n  /**\n   * 创建path\n   * @param propertyName 属性名称\n   */\n  protected createPath(propertyName: string): string[] {\n    const primaryFieldMetadata = this.primaryProperty;\n    if (primaryFieldMetadata) {\n      const primaryDataField = primaryFieldMetadata.dataField;\n      return [primaryDataField + ':' + this.primaryValue, propertyName];\n    } else {\n      return [':', propertyName];\n    }\n  }\n\n  /**\n   * 属性字段初始化\n   * @param ngFields 属性字段元数据\n   */\n  private initializeNormalField(ngFields: { [key: string]: PrimitivePropMetadata }): void {\n    Object.keys(ngFields).forEach(propName => {\n      const ngField = ngFields[propName] as PrimitivePropMetadata;\n      const dataField = ngField.dataField || propName;\n\n      if (delete this[propName]) {\n        Object.defineProperty(this, propName, {\n          get: function () {\n            return this.getPropValue(propName, ngField);\n          },\n          set: function (newPropValue) {\n\n            // 影响清空关联字段的主键值，移除此逻辑\n            // // 有主键的实体，不允许给实体赋空值\n            // if (this.primaryKey && this.primaryKey === propName && !newPropValue) {\n            //   return;\n            // }\n\n            // 有主键的实体，必须先给主键赋值，否则其他字段不允许赋值\n            if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue) {\n              return;\n            }\n\n            // 值相同时不触发变更。\n            const oldPropValue = this.getPropValue(propName, ngField);\n            if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {\n              return;\n            }\n            this.setPropValue(propName, ngField, newPropValue);\n            this.emitValueChange(propName, ngField, newPropValue, oldPropValue);\n          },\n          configurable: true\n        });\n      }\n    });\n  }\n\n  /**\n   * 初始化列表类型的元数据\n   * @param ngListMetadata 列表类型元数据\n   */\n  private initializeList(ngListMetadata: { [key: string]: ListPropMetadata }): void {\n    Object.keys(ngListMetadata).forEach(propertyName => {\n      const fieldMetadata = ngListMetadata[propertyName] as ListPropMetadata;\n      const path = this.createPath(propertyName);\n      const dataField = fieldMetadata.dataField || propertyName;\n      const val = this.data[dataField];\n\n      const entityList = new EntityList<typeof fieldMetadata.type>();\n      entityList[PARENT_CLASS] = this;\n      entityList[PARENT_PATH] = path;\n\n      if (val) {\n        const entities = val.map(v => EntityFactory<typeof fieldMetadata.type>(fieldMetadata.type, v));\n        entityList.loadEntities(entities);\n      }\n\n      entityList.onListChanged.subscribe(value => {\n        if (value) {\n          if (entityList[PARENT_PATH][0] !== value.path[0]) {\n            value.path = entityList[PARENT_PATH].concat(value.path);\n          }\n          this.setChanges(value);\n        }\n      });\n      this[propertyName] = entityList;\n    });\n  }\n  /**\n   * 初始化子对象\n   * @param ngObjectMetadata 子对象元数据\n   */\n  private initializeObject(ngObjectMetadata: { [key: string]: ObjectPropMetadata }) {\n    Object.keys(ngObjectMetadata).forEach(propertyName => {\n      const fieldMetadata = ngObjectMetadata[propertyName] as ObjectPropMetadata;\n      const path = this.createPath(propertyName);\n      const dataField = fieldMetadata.dataField || propertyName;\n\n      // val不存在时，用空对象代替\n      const val = this.data[dataField] || {};\n\n      const createEntityFromJsonData = (value: any) => {\n        let instance;\n        if (value instanceof fieldMetadata.type) {\n          instance = value;\n        } else {\n          instance = EntityFactory(fieldMetadata.type, value);\n        }\n        instance[PARENT_CLASS] = this;\n        instance[PARENT_PATH] = path;\n\n        instance.onValueChanged.subscribe(changes => {\n          if (changes) {\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\n            this.setChanges(changes);\n          }\n        });\n\n        return instance;\n      };\n\n      // 如果没有值用一个空对象代替\n      let childEntity = createEntityFromJsonData(val);\n      if (delete this[propertyName]) {\n        Object.defineProperty(this, propertyName, {\n          get: () => {\n            return childEntity;\n          },\n          set: function (value: any) {\n            const modifyInfo = {\n              path: childEntity[PARENT_PATH],\n              value: value.data,\n              preValue: this[propertyName].data,\n              type: ModifyType.ValueChange\n            };\n            childEntity = createEntityFromJsonData(value);\n            this.setChanges(modifyInfo);\n          },\n          configurable: true\n        });\n      }\n    });\n  }\n\n  private initializeDynamic(ngDynamicMetadata: { [key: string]: DynamicPropMetadata }) {\n    Object.keys(ngDynamicMetadata).forEach(propertyName => {\n      const fieldMetadata = ngDynamicMetadata[propertyName] as DynamicPropMetadata;\n      const path = this.createPath(propertyName);\n      const dataField = fieldMetadata.dataField || propertyName;\n\n      const originalData = this.data[dataField] || {};\n\n      const createEntityFromJsonData = (value: any) => {\n        let instance;\n        if (value instanceof fieldMetadata.type) {\n          instance = value;\n        } else {\n          instance = EntityFactory(fieldMetadata.type, value);\n        }\n        instance[PARENT_CLASS] = this;\n        instance[PARENT_PATH] = path;\n\n        instance.onValueChanged.subscribe(changes => {\n          if (changes) {\n            changes.path = (this[PARENT_PATH] || []).concat(changes.path);\n            this.setChanges(changes);\n          }\n        });\n\n        return instance;\n      };\n\n      let dynamicEntity = createEntityFromJsonData(originalData);\n      if (delete this[propertyName]) {\n        Object.defineProperty(this, propertyName, {\n          get: function () {\n            return dynamicEntity;\n          },\n          set: function (value) {\n            const modifyInfo = {\n              path: dynamicEntity[PARENT_PATH],\n              value: value.data,\n              preValue: this[propertyName].data,\n              type: ModifyType.ValueChange\n            };\n            dynamicEntity = createEntityFromJsonData(value);\n            this.setChanges(modifyInfo);\n          },\n          configurable: true\n        });\n      }\n    });\n  }\n\n  //#endregion\n\n\n  // #region 加载实体数据相关private、projected方法\n\n  /**\n   * 加载简单字段值\n   * @todo 临时用修改的方式模拟\n   */\n  protected loadFields(data: any) {\n    const ngFields = FieldMetadataUtil.getNgFields(this.constructor);\n    Object.keys(ngFields).forEach((propName: string) => {\n      const ngField = ngFields[propName];\n      const dataField = ngField.dataField || propName;\n      // if (ngField.primary === false) {\n      //   this[propName] = data[dataField];\n      // }\n      this[propName] = data[dataField];\n    });\n  }\n\n  /**\n   * 加载子列表数据\n   * @param data 数据\n   */\n  protected loadLists(data: any) {\n    const ngLists = FieldMetadataUtil.getNgList(this.constructor);\n    Object.keys(ngLists).forEach((propName: string) => {\n      const ngList = ngLists[propName];\n      const dataField = ngList.dataField || propName;\n      const entityType = ngList.type;\n\n      // 创建实体\n      const listData = data[dataField];\n      if (listData) {\n        const entities = listData.map((entityData: any) => {\n          return EntityFactory<typeof entityType>(entityType, entityData);\n        });\n        this[propName].loadEntities(entities);\n      } else {\n        this[propName].loadEntities([]);\n      }\n    });\n  }\n\n  private loadObjects(data: any) {\n    const ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);\n    Object.keys(ngObjects).forEach((propName: string) => {\n      const ngObject = ngObjects[propName];\n      const dataField = ngObject.dataField || propName;\n      const objectData = data[dataField];\n      const entity = this[propName] as Entity;\n      if (!entity || !objectData) {\n        return;\n      }\n      entity.load(objectData);\n    });\n  }\n\n  protected loadDynamicObjects(data: any) {\n    const ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);\n    Object.keys(ngDynamicObjects).forEach((propName: string) => {\n      const ngDynamicObject = ngDynamicObjects[propName];\n      const dataField = ngDynamicObject.dataField || propName;\n\n      const dynamicData = data[dataField] || {};\n      const dynamicEntity = this[propName] as Dynamic;\n      if (!dynamicEntity) {\n        return;\n      }\n      dynamicEntity.loadDynamicData(dynamicData);\n    });\n  }\n\n  // #endregion\n\n  // #region 私有工具方法\n\n\n  /**\n   * 发送值变更\n   */\n  private emitValueChange(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any): void {\n    const change = {\n      path: this.createPath(propName),\n      value: newPropValue,\n      preValue: oldPropValue,\n      type: ModifyType.ValueChange\n    };\n\n    if (this[PARENT_PATH]) {\n      change.path = this[PARENT_PATH].concat(change.path);\n    }\n    this.setChanges(change);\n  }\n\n  /**\n   * 获取属性值\n   */\n  private getPropValue(propName: string, propMetadata: PrimitivePropMetadata) {\n    const dataField = propMetadata.dataField || propName;\n    const value = this.data[dataField];\n\n    // 对多语录入字段，query不返回问题进行兼容\n    if (propMetadata.enableMultiLangInput === true && !value) {\n      const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';\n      const originDataField = dataField.replace('_MULTILANGUAGE', '');\n      return {\n        [langCode]: this.data[originDataField]\n      };\n    }\n    return value;\n  }\n\n  /**\n   * 设置属性值\n   */\n  private setPropValue(propName: string, propMetadata: PrimitivePropMetadata, propValue: any) {\n    const dataField = propMetadata.dataField || propName;\n    this.data[dataField] = propValue;\n  }\n\n  /**\n   * 检查属性值是否发生变化\n   */\n  private isPropValueChanged(propName: string, propMetadata: PrimitivePropMetadata, newPropValue: any, oldPropValue: any) {\n    if (propMetadata.enableMultiLangInput === true) {\n      if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {\n        return false;\n      }\n      return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);\n    } else {\n      return newPropValue !== oldPropValue;\n    }\n  }\n\n  /**\n   * 多语录入字段的值是否为空\n   */\n  private isEmptyMultiLangPropValue(value: any) {\n    return !value || Object.keys(value).length === 0;\n  }\n\n  // #endregion\n}\n","import { ModifyType, Modification } from '../changeset/types';\nimport { PARENT_PATH, Dynamic, PARENT_CLASS } from './types';\nimport { Entity } from './entity';\n\n/**\n * 支持动态字段集合的动态实体\n */\nexport class DynamicEntity extends Entity implements Dynamic {\n\n  /**\n   * 是否是嵌套的动态实体\n   */\n  public get IsNested(): boolean {\n    return this[PARENT_CLASS] instanceof DynamicEntity;\n  }\n\n  /**\n   * @param data JSON数据\n   */\n  constructor(data: any) {\n    super(data);\n    this.loadDynamicData(data);\n  }\n\n  public loadDynamicData(dynamicData: any) {\n    this.initializeDynamicField(dynamicData);\n    // super.loadFields(dynamicData);\n  }\n\n  /**\n   * 初始化动态数据\n   * @param dynamicData 动态数据\n   */\n  private initializeDynamicField(dynamicData: any): void {\n    // 遍历动态数据的key，创建动态实体属性。\n    Object.keys(dynamicData).forEach(propertyName => {\n\n      // 如果属性已经存在，先删除\n      if (this[propertyName]) {\n        delete this[propertyName];\n      }\n\n      const dataField = propertyName;\n      if (dynamicData[propertyName] instanceof Object) {\n        const path = this.createPath(propertyName);\n        let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);\n        Object.defineProperty(this, propertyName, {\n          get: function() {\n            return dynamicEntity;\n          },\n          set: function(value) {\n            const modifyInfo = {\n              path: dynamicEntity[PARENT_PATH],\n              value: value.data,\n              preValue: this[propertyName].data,\n              type: ModifyType.ValueChange\n            };\n            dynamicEntity = this.createDynamicEntityFromJsonData(value, path);\n            this.setChanges(modifyInfo);\n          },\n          configurable: true\n        });\n      } else {\n        Object.defineProperty(this, propertyName, {\n          // 定义返回数据方法。\n          get: function() {\n            // 从初始数据返回字段值。\n            return this.data[dataField];\n          },\n          set: function(value) {\n            // 值相同时不触发变更。\n            const oldValue = this.data[dataField];\n            if (oldValue === value) {\n              return;\n            }\n            // 更新元数据数据。\n            this.data[dataField] = value;\n            // 变更集\n            const changes = {\n              type: ModifyType.ValueChange,\n              path: this.createPath(propertyName),\n              value: value,\n              preValue: oldValue\n            };\n\n            if (this[PARENT_PATH]) {\n              changes.path = this[PARENT_PATH].concat(changes.path);\n            }\n            this.setChanges(changes);\n          },\n          configurable: true\n        });\n      }\n    });\n  }\n\n  private createDynamicEntityFromJsonData(value: any, parentPath: string[]) {\n    let instance: DynamicEntity;\n    if (value instanceof DynamicEntity) {\n      instance = value;\n    } else {\n      instance = new DynamicEntity(value);\n    }\n    instance[PARENT_CLASS] = this;\n    instance[PARENT_PATH] = parentPath;\n    instance.onValueChanged.subscribe(changes => {\n      if (changes) {\n        changes.path = (this[PARENT_PATH] || []).concat(changes.path);\n        this.setChanges(changes);\n      }\n    });\n\n    return instance;\n  }\n\n  /**\n   * 将变更记录保存至变更集中\n   * @param value 变更记录\n   * @todo\n   * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；\n   * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。\n   */\n  setChanges(value: Modification): void {\n    const propertyName = value.path[value.path.length - 1];\n    const preValue = Object.assign({}, this.data);\n    this.newData = Object.assign(this.newData, { [propertyName]: value.value });\n    let parentPath = value.path;\n    if (value.path.length > 2) {\n      parentPath = value.path.slice(0, value.path.length - 2);\n    }\n\n    // 统一不使用构造函数（保持和其他位置对Modification的构造一致）\n    // const parentModification = new Modification(this.data, value.type, parentPath, preValue);\n    const parentModification: Modification = {\n      path: parentPath,\n      value: this.data,\n      preValue: preValue,\n      type: value.type\n    };\n\n    this.valueChanged.next(parentModification);\n    this.changeSet.append(value);\n  }\n\n  /**\n   * toJSON\n   */\n  public toJSON() {\n    return this.data;\n  }\n}\n","import { Type, makeDecorator } from '../core/index';\n\n/**\n * REPOSITORY_META\n */\nexport const REPOSITORY_META = 'RepositoryMeta';\n\n\n/**\n * RepositoryMeta\n */\nexport interface RepositoryMeta {\n\n  /**\n   * 实体类型\n   */\n  entityType: Type<any>;\n}\n\n\n/**\n * RepositoryMetaDecorator\n */\nexport interface RepositoryMetaDecorator {\n  (obj?: RepositoryMeta): any;\n  new (obj?: RepositoryMeta): any;\n}\n\n\n/**\n * RepositoryMeta\n */\nexport function RepositoryMeta(options: RepositoryMeta) {\n  const decoratorFactory = makeDecorator(\n    REPOSITORY_META,\n    (obj: RepositoryMeta) => obj\n  );\n  return decoratorFactory(options);\n}\n","/*\n * @Author: Witt\n * @Date: 2018-10-01 19:36:51\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-09-03 19:46:42\n */\nimport { Type } from '../core/index';\nimport { Modification, ModifyType } from '../changeset/index';\nimport { Subject } from 'rxjs';\nimport { Entity, FieldMetadataUtil, EntityList } from '../entity/index';\nimport { DataTypeInfo } from '../entity/index';\n\n// tslint:disable: no-bitwise\n/**\n * 实体集合\n * @todo：应该用EntityList代替。\n */\nclass EntityCollection<T extends Entity> {\n\n  /**\n   * 内部实体Set\n   */\n  private innerEntitySet: Set<T>;\n\n  /**\n   * 内部实体Map\n   */\n  private innerEntityMap: Map<string, T>;\n\n\n  /**\n   * Entity集合变更流\n   */\n  public collectionChanged: Subject<Modification>;\n\n  /**\n   * 内部实体变更\n   */\n  public changes: Subject<Modification>;\n\n  /**\n   * 实体类型\n   */\n  public readonly entityType: Type<T>;\n\n  /**\n   * 实体主键\n   */\n  public readonly primaryKey: string;\n\n  /**\n   * 实体当前分页信息\n   */\n  public paginationInfo: any;\n\n  /**\n   * 实体类型描述\n   */\n  public entityTypeInfo: DataTypeInfo;\n\n\n  /**\n   * 构造函数\n   */\n  constructor(entityType: Type<T>) {\n    this.innerEntitySet = new Set<T>();\n    this.innerEntityMap = new Map<string, T>();\n    this.collectionChanged = new Subject<Modification>();\n    this.changes = new Subject<Modification>();\n\n    this.entityType = entityType;\n    this.primaryKey = FieldMetadataUtil.getPrimaryKey(this.entityType);\n  }\n\n  /**\n   * 实体数量\n   */\n  public count(): number {\n    return this.innerEntitySet.size;\n  }\n\n  public get entityTypeName() {\n    return this.entityType.name;\n  }\n  /**\n   * 是否包含指定主键值的实体\n   * @param id 主键值\n   */\n  public has(id: string): boolean {\n    return this.innerEntityMap.has(id);\n  }\n\n  /**\n   * 清空全部实体\n   */\n  public clear() {\n    this.innerEntityMap.clear();\n    this.innerEntitySet.clear();\n    this.notifyCollectionChanged(new Modification([], ModifyType.Load));\n  }\n  /**\n   * 清空全部实体\n   * @param isReset 是否为重置实体操作\n   */\n  public reset() {\n    this.innerEntityMap.clear();\n    this.innerEntitySet.clear();\n    const modification = new Modification([], ModifyType.Load);\n    modification.isReset = true;\n    this.notifyCollectionChanged(modification);\n  }\n  /**\n   * 转换为实体数组\n   */\n  public toArray(): Entity[] {\n    return Array.from(this.innerEntitySet);\n  }\n\n  /**\n   * 转换为JSON数组\n   */\n  public toJSON(): any[] {\n    const result = [];\n    const entities = this.toArray();\n    entities.forEach((entity: Entity) => {\n      result.push(entity.toJSON());\n    });\n    return result;\n  }\n\n  /**\n   * 批量加载实体\n   */\n  public loadEntities(entities: any[], entityCreate: boolean = false) {\n\n    this.innerEntityMap.clear();\n    this.innerEntitySet.clear();\n\n    entities.forEach(entity => {\n      this.innerEntitySet.add(entity);\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\n      this.listenEntityChangeEvent(entity);\n    });\n    const modification = new Modification(entities, ModifyType.Load);\n    modification.entityCreate = entityCreate;\n    this.notifyCollectionChanged(modification);\n\n  }\n\n  /**\n   * 追加实体\n   * @param entity 要追加的实体\n   * @param isCloned 实体是否是克隆的\n   */\n  public addEntity(entity: T,  isCloned: boolean = false) {\n    this.verifyEntityToAdd(entity);\n    this.innerEntitySet.add(entity);\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\n    this.listenEntityChangeEvent(entity);\n    const modifyType = isCloned ? ModifyType.Clone : ModifyType.Add;\n    this.notifyCollectionChanged(new Modification([entity], modifyType));\n  }\n  /**\n   * 在当前行前或后插入数据\n   * @param entity 实体\n   * @param position 位置\n   */\n  public insertEntity(entity: any, position: 1 | -1) {\n    this.verifyEntityToAdd(entity);\n    this.innerEntitySet.add(entity);\n    this.innerEntityMap.set(entity[this.primaryKey], entity);\n    this.listenEntityChangeEvent(entity);\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Insert, null, null, position));\n  }\n  /**\n   * 更新实体\n   * @param entity entity\n   * @param entityData 实体数据\n   */\n  public updateEntity(entity: any, entityData: any) {\n    entity.load(entityData);\n    this.notifyCollectionChanged(new Modification(entity, ModifyType.Update, null, null));\n  }\n  /**\n   * 批量追加实体\n   * @param entities 要加载的实体数组\n   */\n  public addEntities(entities: T[]) {\n    if (!entities) {\n      return;\n    }\n    const entitiesToAdd: T[] = [];\n    entities.forEach(entity => {\n      this.verifyEntityToAdd(entity);\n      entitiesToAdd.push(entity);\n    });\n    entitiesToAdd.forEach(entity => {\n      this.innerEntitySet.add(entity);\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\n      this.listenEntityChangeEvent(entity);\n    });\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.Add));\n  }\n  /**\n   * 添加实体（不切换当前行）\n   * @param entities 实体\n   */\n  public addData(entities: any[]) {\n    if (!entities) {\n      return;\n    }\n    const entitiesToAdd: any[] = [];\n    entities.forEach(entity => {\n      this.verifyEntityToAdd(entity);\n      entitiesToAdd.push(entity);\n    });\n    entitiesToAdd.forEach(entity => {\n      this.innerEntitySet.add(entity);\n      this.innerEntityMap.set(entity[this.primaryKey], entity);\n      this.listenEntityChangeEvent(entity);\n    });\n    this.notifyCollectionChanged(new Modification(entitiesToAdd, ModifyType.AddData));\n  }\n\n\n  /**\n   * 根据主键值获取实体\n   */\n  getEntityById(identity: string): T {\n    if (this.innerEntityMap.has(identity) === false) {\n      return null;\n    }\n    const entity = this.innerEntityMap.get(identity);\n    return entity;\n  }\n\n  /**\n   * 根据路径获取实体\n   */\n  getEntityByPath(pathArray: string[]): any {\n    const rootEntityId = pathArray[0].split(':')[1];\n\n    let parentNode: any = this.getEntityById(rootEntityId);\n    for (let i = 1; i < pathArray.length && parentNode; i = i + 1) {\n      const currentPath = pathArray[i];\n      if (parentNode instanceof Entity) {\n\n        // @todo：强识了别冒号\n        if (currentPath.indexOf(':') === -1) {\n          parentNode = parentNode[pathArray[i]];\n        }\n      } else {\n        parentNode = parentNode.get(pathArray[i].split(':')[1]);\n      }\n    }\n\n    return parentNode;\n  }\n  /**\n   * id:1/a/id:2/c\n   * @param pathArray 路径数组\n   */\n  public getEntitiesByPath(pathArray: string[]) {\n    const rootEntityId = pathArray[0].split(':')[1];\n    let entity: any = this.getEntityById(rootEntityId);\n    for (let i = 1; i < pathArray.length && entity; i += 2) {\n      const path = pathArray[i];\n      entity = entity[path];\n      if (!(entity instanceof EntityList)) {\n        throw new Error('路径格式错误');\n      }\n      if ((i + 1) < pathArray.length) {\n        const id = pathArray[i + 1].split(':')[1];\n        entity = entity.get(id);\n      }\n    }\n    return entity;\n  }\n  /**\n   * 返回符合指定条件的实体集合\n   * @param predicate 条件谓词\n   */\n  getEntities(predicate: (value: T, index: number, array: T[]) => T): T[] {\n    const entities: T[] = Array.from(this.innerEntitySet);\n    const matchedEntities = entities.filter(predicate);\n    return matchedEntities;\n  }\n\n  /**\n   * 获取全部实体\n   */\n  getAllEntities(): T[] {\n    return Array.from(this.innerEntitySet);\n  }\n\n  /**\n   * 根据主键值删除对应实体\n   * @param identity 主键值\n   */\n  removeEntityById(identity: string): T {\n    this.verifyEntityToRemove(identity);\n    const entityToRemove = this.innerEntityMap.get(identity);\n    this.innerEntityMap.delete(identity);\n    this.innerEntitySet.delete(entityToRemove);\n    this.notifyCollectionChanged(new Modification([entityToRemove], ModifyType.Remove));\n    return entityToRemove;\n  }\n\n  removeEntitiesByIds(id: string) {\n  }\n\n  /**\n   * 删除符合条件的实体集合\n   */\n  public removeEntities(predicate: (value: T, index: number, array: T[]) => any): T[] {\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\n    entitiesToRemove.forEach(entityToRemove => {\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\n      this.innerEntitySet.delete(entityToRemove);\n    });\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.Remove));\n    return entitiesToRemove;\n  }\n  /**\n   * 移除数据（不切换当前行）\n   * @param predicate 过滤函数\n   */\n  public removeData(predicate: (value: any, index: number, array: any[]) => any): any[] {\n    const entitiesToRemove = Array.from(this.innerEntitySet).filter(predicate);\n    entitiesToRemove.forEach(entityToRemove => {\n      this.innerEntityMap.delete(entityToRemove[this.primaryKey]);\n      this.innerEntitySet.delete(entityToRemove);\n    });\n    this.notifyCollectionChanged(new Modification(entitiesToRemove, ModifyType.RemoveData));\n    return entitiesToRemove;\n  }\n  /**\n   * 重置子表数据\n   * @param paths 路径\n   * 路径格式 ['id:provinceId','id:cityMDMs','zoneMDMs']\n   * @description path参数格式\n   * ```json\n   * [\n   * \"id:b5ed23ca-88d9-4377-98ec-92f35c1325f1\",\n   * \"cityMDMs\",\n   * \"id:373706af-622f-4aea-a006-dddbffd7bda3\",\n   * \"zoneMDMs\"\n   * ]\n   * ```\n   * @param entities 实体数组\n   */\n  public resetEntities(paths: string[], entities: T[]) {\n    if (paths[0].indexOf(':') === -1) {\n      throw new Error('路径格式错误');\n    }\n    // paths里面第一个一定是id\n    const entityInfo: string[] = paths[0].split(':');\n    const [entityPrimaryKey, entityId] = entityInfo;\n    let entity: T = null;\n    for (const element of this.innerEntitySet) {\n      if (element[entityPrimaryKey] === entityId) {\n        entity = element;\n        break;\n      }\n    }\n    // for (let index = 0; index < this.innerEntitySet; index++) {\n    //   const element: T = this.innerEntitySet[index];\n    //   if (element[entityPrimaryKey] === entityId) {\n    //     entity = element;\n    //     break;\n    //   }\n    // }\n    if (!entity) {\n      throw new Error(`找不到${entityPrimaryKey}为${entityId}的实体`);\n    }\n    let data: any = entity;\n    paths.slice(1).forEach(path => {\n      data = data[path];\n    });\n    const entityList = data as EntityList<T>;\n    entityList.clear();\n    entityList.loadEntities(entities);\n  }\n\n  /**\n   * 验证实体是否能够添加\n   */\n  private verifyEntityToAdd(entity: T): boolean {\n    if (this.has(entity[this.primaryKey])) {\n      this.innerEntitySet.delete(this.innerEntityMap.get(entity[this.primaryKey]));\n      this.innerEntityMap.delete(entity[this.primaryKey]);\n      // throw new Error(`The repository already had an item with the save identity of '${entity[this.primaryKey]}'`);\n    }\n    return true;\n  }\n\n  /**\n   * 验证实体是否能移除\n   */\n  private verifyEntityToRemove(identity: string): boolean {\n    if (!this.has(identity)) {\n      throw new Error(`The entity with identity of '${identity} dose not exsit.'`);\n    }\n    return true;\n  }\n\n  /**\n   * 实体集合变更流\n   */\n  private notifyCollectionChanged(modification: Modification) {\n    this.collectionChanged.next(modification);\n  }\n\n  //#region 分页\n\n  /**\n   * 设置分页大小\n   */\n  set pageSize(pageSize: number) {\n    if (typeof (pageSize) !== 'number' || pageSize < 0) {\n      throw new Error('Invalid parameter:pageSize');\n    }\n\n    const original = this.paginationInfo;\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageSize });\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\n    // this.notifyCollectionChanged(new Modification(this.paginationInfo[this.entityTypeName], ModifyType.PaginationInfoChange));\n    this.paginationInfo = Object.assign({}, original, { pageSize });\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\n  }\n  /**\n   * 获取分页大小\n   * @description 如果用户未指定分页大小则默认为0，即获取所有数据\n   */\n  get pageSize(): number {\n    if (!!this.paginationInfo) {\n      return this.paginationInfo.pageSize || 0;\n    }\n    return 0;\n  }\n  /**\n   * 设置数据总条数\n   */\n  set totalCount(total: number) {\n    if (typeof (total) !== 'number' || total < 0) {\n      throw new Error('Invalid parameter:total');\n    }\n\n    const original = this.paginationInfo;\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { total });\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\n    this.paginationInfo = Object.assign({}, original, { total });\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\n  }\n  /**\n   * 获取数据总条数\n   */\n  get totalCount(): number {\n    if (!!this.paginationInfo) {\n      return this.paginationInfo.total || 0;\n    }\n    return 0;\n  }\n  /**\n   * 设置当前页码\n   */\n  set pageIndex(pageIndex: number) {\n    if (typeof (pageIndex) !== 'number' || pageIndex < 0) {\n      throw new Error('Invalid parameter:pageIndex');\n    }\n\n    const original = this.paginationInfo;\n    // const entityPaginationInfo = Object.assign({}, original[this.entityTypeName], { pageIndex });\n    // this.paginationInfo = Object.assign({}, original, { [this.entityTypeName]: entityPaginationInfo });\n    this.paginationInfo = Object.assign({}, original, { pageIndex });\n    this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\n  }\n  /**\n   * 获取当前页码\n   */\n  get pageIndex(): number {\n    if (!!this.paginationInfo) {\n      return this.paginationInfo.pageIndex || 1;\n    }\n    return 1;\n  }\n  /**\n   * 更新分页信息\n   * @param path 绑定路径\n   * @param pageInfo 分页信息\n   */\n  public updatePaginationInfoByPath(path: string, pageInfo: { pageIndex: any, pageSize: any, totalCount: any, [prop: string]: any }) {\n    const original = this.paginationInfo;\n    const { pageIndex, pageSize, totalCount: total } = pageInfo;\n    const paginationInfo = Object.assign({}, original, { pageIndex, pageSize, total });\n    this.setPaginationConfigByPath(path, paginationInfo);\n  }\n  /**\n   * 根据路径获取分页大小\n   * @param path 路径\n   */\n  public getPaginationConfigByPath(path: string, defaultValue?: any) {\n    if (!path || path === '/') {\n      return this.paginationInfo;\n    }\n    if (typeof path !== 'string') {\n      throw new Error('路径必须为字符串！');\n    }\n    path = path.substring(1);\n    const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());\n    let config = this.paginationInfo;\n    paths.forEach(item => {\n      if (config && config.hasOwnProperty(item)) {\n        config = config[item];\n      } else {\n        config = null;\n      }\n    });\n    return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\n  }\n  /**\n   * 设置分页信息\n   * @param path 路径\n   * @param value 值\n   */\n  public setPaginationConfigByPath(path: string | Array<any>, value: any) {\n    const original = JSON.stringify(this.paginationInfo);\n    if (!path || path === '/') {\n      this.paginationInfo = value;\n    } else {\n      if (!Array.isArray(path)) {\n        path = path.toString().match(/[^/[\\]]+/g) || [];\n      }\n      path.slice(0, -1).reduce((prev, current, index) =>\n        Object(prev[current]) === prev[current]\n          ? prev[current]\n          : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\n            ? []\n            : {},\n        this.paginationInfo)[path[path.length - 1]] = value;\n    }\n\n    if (JSON.stringify(this.paginationInfo) !== original) {\n      this.notifyCollectionChanged(new Modification(this.paginationInfo, ModifyType.PaginationInfoChange));\n    }\n    return this.paginationInfo;\n  }\n  //#endregion\n\n  /**\n   * 监听实体变更\n   */\n  private listenEntityChangeEvent(entity: Entity) {\n    if (entity) {\n      entity.onValueChanged.subscribe((change: Modification) => this.changes.next(change));\n    }\n  }\n\n}\n\nexport { EntityCollection };\n","/*\n * @Author: Witt\n * @Date: 2019-03-07 17:24:38\n * @Last Modified by:   Witt\n * @Last Modified time: 2019-03-11 19:50:38\n */\n\nimport { Type } from '../core/index';\nimport { Entity, EntityList, createEntity, createEntities } from '../entity/index';\nimport { EntityCollection } from './entity_collection';\nimport { DataPath, DataPathCreator, DataPathNodeType, DataTypeInfo } from '../entity/index';\nimport { EntityUtil } from '../binding-data/entity_util';\n\n\n/**\n * 实体管理类\n */\nclass EntityManager<T extends Entity> {\n\n  /**\n   * 实体类型\n   */\n  public entityType: Type<Entity>;\n\n  /**\n   * 实体集合\n   */\n  public entityCollection: EntityCollection<Entity>;\n\n  /**\n   * 构造函数\n   */\n  constructor(entityCollection: EntityCollection<T>) {\n    this.entityCollection = entityCollection;\n    this.entityType = entityCollection.entityType;\n  }\n\n\n  // #region 创建实体相关方法\n\n  /**\n   * 创建实体\n   */\n  public createEntity(entityData: any): T {\n    const entity = createEntity<T>(this.entityType, entityData);\n    return entity;\n  }\n\n  /**\n   * 批量创建实体\n   */\n  public createEntities(entityListData: any[], entityType: any): T[] {\n    const entities: T[] = createEntities<T>(this.entityType, entityListData);\n    return entities;\n  }\n  /**\n   * 批量创建下级实体\n   * @param fPath fpath\n   * @param entityListData 实体数据\n   */\n  public createEntitiesByPath(fPath: string, entityListData: any[]) {\n    const subPaths = fPath.split('/');\n    if (subPaths.length < 3) {\n      throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);\n    }\n    if (entityListData.length < 1) {\n      return [];\n    }\n    let childEntityList: EntityList<any>;\n    let propInfo: { propType: string, propEntityType: any };\n    let propName: string;\n    for (let i = 2; i < subPaths.length; i = i + 2) {\n      const fid = subPaths[i - 1];\n      propName = subPaths[i];\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\n      childEntityList = parentEntity[propName];\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\n      if (!childEntityList) {\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);\n      }\n    }\n    const entities = entityListData.map(entityData => {\n      return createEntity<Entity>(propInfo.propEntityType, entityData);\n    });\n    return entities;\n  }\n  // #endregion\n\n\n  // #region 获取实体、实体数组相关方法\n\n  /**\n   * 获取path对应的实体\n   */\n  public getEntityByPath(path: string[]): Entity {\n    const entity = this.getEntityNodeByPath(path) as Entity;\n    return entity;\n  }\n\n  /**\n   * 获取path对应的实体\n   */\n  public getEntitiesByPath(path: string[]): Entity[] {\n    const entityCollectionOrList = this.getEntityNodeByPath(path) as EntityCollection<Entity> | EntityList<Entity>;\n    let entities: Entity[];\n    if (entityCollectionOrList instanceof EntityCollection === true) {\n      entities = (entityCollectionOrList as EntityCollection<Entity>).toArray();\n    } else {\n      entities = (entityCollectionOrList as EntityList<Entity>).toArray();\n    }\n    return entities;\n  }\n\n  /**\n   * 获取实体节点\n   * @param path 节点路径\n   */\n  public getEntityNodeByPath(path: string[]): EntityCollection<Entity> | EntityList<Entity> | Entity {\n    const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);\n    let entityNode: any = this.entityCollection;\n    let pathNode = dataPath.head.next;\n    while (pathNode) {\n      if (pathNode.type === DataPathNodeType.DataId) {\n        if (entityNode instanceof EntityCollection === true) {\n          entityNode = (entityNode as EntityCollection<Entity>).getEntityById(pathNode.value);\n        } else {\n          entityNode = (entityNode as EntityList<Entity>).get(pathNode.value);\n        }\n      } else {\n        entityNode = entityNode[pathNode.value];\n      }\n      if (!entityNode) {\n        throw new Error(`找不到${pathNode.value}对应的数据节点`);\n      }\n      pathNode = pathNode.next;\n    }\n    return entityNode;\n  }\n  // #endregion\n\n\n  // #region 获取、设置属性值\n\n  /**\n   * 获取path对应的实体属性值\n   */\n  public getPropValueByPath(path: string[]): any {\n    const propName = path.pop();\n    const entity = this.getEntityByPath(path);\n    return entity[propName];\n  }\n\n  /**\n   * 设置path对应实体的属性值\n   */\n  public setPropValueByPath(path: string[], propValue: any): void {\n    const propName = path.pop();\n    const entity = this.getEntityByPath(path);\n    entity[propName] = propValue;\n  }\n\n  // #endregion\n\n\n  // #region 插入实体\n\n  /**\n   * 在path对应实体前插入实体\n   */\n  public insertEntityBeforeByPath(fpath: string[]) {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * 在path对应实体前批量插入实体\n   */\n  public insertEntitiesBeforeByPath() {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * 在path对应实体前插入实体\n   */\n  public insertEntityAfterByPath() {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * 在path对应实体前批量插入实体\n   */\n  public insertEntitiesAfterByPath() {\n    throw new Error('Not Implemented');\n  }\n\n  // #endregion\n\n\n  // #region 追加实体\n\n  /**\n   * 在path对应的实体集合中追加1个实体\n   */\n  // public appendEntityByPath(fpath: string[], entity: Entity): void {\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\n  //     entityCollection.addEntity(entity);\n  //   } else {\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\n  //     entityList.appendEntity(entity);\n  //   }\n  // }\n\n  /**\n   * 根据path获取实体集合\n   * @param fpath 路径\n   * @param entityData 实体数据\n   * @param initialData[可选] 默认值\n   */\n  public appendEntityByPath(fpath: string, entityData: any, initialData?: any, isCloned: boolean = false): Entity {\n    const subPaths = fpath.split('/');\n    if (subPaths.length < 3) {\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\n    }\n\n    let childEntityList: EntityList<any>;\n    let propInfo: { propType: string, propEntityType: any };\n    let propName: string;\n    for (let i = 2; i < subPaths.length; i = i + 2) {\n      const fid = subPaths[i - 1];\n      propName = subPaths[i];\n\n      // todo: EntityCollection重构之后这里无需差异处理\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\n      childEntityList = parentEntity[propName];\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\n      if (!childEntityList) {\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\n      }\n    }\n\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\n    if (initialData) {\n      EntityUtil.appendInitialData(childEntity, initialData);\n    }\n    childEntityList.appendNew(childEntity, isCloned);\n    return childEntity;\n  }\n  /**\n   * 在指定位置插入实体\n   * @param fpath 父路径\n   * @param entityData 实体数据\n   * @param initialData 初始数据\n   * @param position 插入位置\n   */\n  public insertEntityByPath(fpath: string, entityData: any, initialData?: any, position?: 1 | -1) {\n    const subPaths = fpath.split('/');\n    if (subPaths.length < 3) {\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\n    }\n\n    let childEntityList: EntityList<any>;\n    let propInfo: { propType: string, propEntityType: any };\n    let propName: string;\n    for (let i = 2; i < subPaths.length; i = i + 2) {\n      const fid = subPaths[i - 1];\n      propName = subPaths[i];\n\n      // todo: EntityCollection重构之后这里无需差异处理\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\n      childEntityList = parentEntity[propName];\n      const entityType = propInfo ? propInfo.propEntityType : this.entityType;\n      propInfo = EntityUtil.getPropInfo(entityType, propName);\n      if (!childEntityList) {\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\n      }\n    }\n\n    // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);\n    const childEntity = createEntity<Entity>(propInfo.propEntityType, entityData);\n    // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值\n    if (initialData) {\n      EntityUtil.appendInitialData(childEntity, initialData);\n    }\n    childEntityList.insert(childEntity, position);\n    return childEntity;\n  }\n  /**\n   * 在path对应的实体集合中追加多个实体\n   */\n  public appendEntitiesByPath(fpath: string[], entities: Entity[]) {\n    const entityCollectionOrList = this.getEntityNodeByPath(fpath);\n    if (entityCollectionOrList instanceof EntityCollection === true) {\n      const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\n      entityCollection.addEntities(entities);\n    } else {\n      const entityList = (entityCollectionOrList as EntityList<Entity>);\n      entityList.appendEntities(entities);\n    }\n  }\n\n  // #endregion\n\n\n  // #region 删除实体\n\n  /**\n   * 从fapth对应的实体集合中删除id对应的实体\n   */\n  // public removeEntityByPath(fpath: string[], id: string): void {\n  //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);\n  //   if (entityCollectionOrList instanceof EntityCollection === true) {\n  //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\n  //     entityCollection.removeEntityById(id);\n  //   } else {\n  //     const entityList = (entityCollectionOrList as EntityList<Entity>);\n  //     entityList.remove(id);\n  //   }\n  // }\n\n  /**\n   * 根据path获取实体集合\n   * @param fpath path\n   */\n  public removeEntityByPath(fpath: string, id: string) {\n    const subPaths = fpath.split('/');\n    if (subPaths.length < 3) {\n      throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);\n    }\n    let childEntityList: EntityList<any>;\n    for (let i = 2; i < subPaths.length; i = i + 2) {\n      const fid = subPaths[i - 1];\n      const propName = subPaths[i];\n      const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);\n      childEntityList = parentEntity[propName];\n      if (!childEntityList) {\n        throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);\n      }\n    }\n\n    childEntityList.remove(id);\n  }\n\n  /**\n   * 从fapth对应的实体集合中删除ids对应的实体\n   */\n  public removeEntitiesByPath(fpath: string[], ids: string[]): void {\n    // const entityCollectionOrList = this.getEntityNodeByPath(fpath);\n    // if (entityCollectionOrList instanceof EntityCollection === true) {\n    //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;\n    //   entityCollection.removeEntitiesByIds(ids);\n    // } else {\n    //   const entityList = (entityCollectionOrList as EntityList<Entity>);\n    //   entityList.remove(ids);\n    // }\n    throw new Error('Not Implemented');\n  }\n  // #endregion\n\n\n  // #region 清空变更集相关方法\n\n  /**\n   * 清空所有实体的变更集\n   */\n  public clearAllEntityChanges() {\n    const entities = this.entityCollection.toArray();\n    entities.forEach((entity: Entity) => {\n      entity.changes.splice(0, entity.changes.length);\n    });\n  }\n\n  public resetAllEntityChangeMark() {\n    const entities = this.entityCollection.toArray();\n    entities.forEach((entity: Entity) => {\n      entity.hasChange = false;\n    });\n  }\n\n  /**\n   * 清空id指定的实体变更集\n   */\n  public clearEntityChangesById(id: string): void {\n    const entity = this.entityCollection.getEntityById(id);\n    if (!entity) {\n      return;\n    }\n    entity.changes.splice(0, entity.changes.length);\n  }\n\n  /**\n   * 清空ids数组中指定的实体的变更集\n   */\n  public clearEntityChangesByIds(ids: string[]): void {\n    if (!ids || ids.length < 0) {\n      return;\n    }\n\n    ids.forEach((id: string) => {\n      this.clearEntityChangesById(id);\n    });\n  }\n\n  // #endregion\n\n\n  // #region 变更集检查相关方法\n\n  /**\n   * 检查所有的实体，是否有未提交的变更\n   */\n  public checkAllEntityChanges(): boolean {\n\n    const entities = this.entityCollection.toArray();\n    const hasChanges = entities.some((entity: Entity) => {\n      if (entity.changes.length > 0) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return hasChanges;\n  }\n\n  /**\n   * 检查id对应的实体，是否有未提交的变更\n   */\n  public checkEntityChangesById(id: string): boolean {\n    const entity = this.entityCollection.getEntityById(id);\n    if (!entity) {\n      return false;\n    }\n    return entity.changes.length > 0;\n  }\n\n  // #endregion\n\n\n  // #region 不规范方法，待废弃\n\n  /**\n   * 待废弃\n   * @deprecated\n   */\n  public clearEntityChangesByArray(idArray: string[]): void {\n    this.clearEntityChangesByIds(idArray);\n  }\n\n  // #endregion\n\n}\n\nexport { EntityManager };\n","import { Type  } from '../core/index';\nimport { Entity, FieldMetadataUtil } from '../entity/index';\n// tslint:disable: no-bitwise\n\nexport class PaginationManager<T extends Entity> {\n\n    constructor(private entityType: Type<T>, private paginationConfig: any) {\n        if (this.paginationConfig === null || this.paginationConfig === undefined) {\n            this.paginationConfig = this.getNgListProperties();\n        }\n        // 兼容老表单，将之前的主表分页信息展开到分页配置根中\n        this.expandMainEntityConfig();\n        this.deleteMainEntityConfig();\n    }\n    /**\n     * 主表分页信息展开到分页配置根中\n     */\n    private expandMainEntityConfig() {\n        const entityName = this.entityType.name;\n        if (this.paginationConfig.hasOwnProperty(entityName)) {\n            const entityConfig = this.paginationConfig[entityName];\n            this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);\n        }\n    }\n    /**\n     * 删除主表实体配置信息\n     */\n    private deleteMainEntityConfig() {\n        delete this.paginationConfig[this.entityType.name];\n    }\n    /**\n     * 获取分页信息\n     */\n    public get pagination() {\n        return this.paginationConfig;\n    }\n    /**\n     * 获取分页信息\n     * @param path 路径\n     * @param defaultValue 默认值\n     */\n    public getPaginationConfigByPath(path: string, defaultValue?: any) {\n        if (!path || path === '/') {\n            return this.paginationConfig;\n        }\n        if (typeof path !== 'string') {\n            throw new Error('路径必须为字符串！');\n        }\n        path = path.substring(1);\n        const paths = path.split('/').filter(item => !!item && item.trim().length > 0);\n        let config = this.paginationConfig;\n        paths.forEach(item => {\n            if (config && config.hasOwnProperty(item)) {\n                config = config[item];\n            } else {\n                config = null;\n            }\n        });\n        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;\n    }\n    /**\n     * 设置分页信息\n     * @param path 路径\n     * @param value 值\n     */\n    public setPaginationConfigByPath(path: string | Array<any>, value: any) {\n        if (!Array.isArray(path)) {\n            path = path.toString().match(/[^/[\\]]+/g) || [];\n        }\n        path.slice(0, -1).reduce((prev, current, index) =>\n            Object(prev[current]) === prev[current]\n                ? prev[current]\n                : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]\n                    ? []\n                    : {},\n            this.paginationConfig)[path[path.length - 1]] = value;\n        return this.paginationConfig;\n    }\n\n    /**\n     * 递归获取当前实体的所有NgList属性\n     * @param defaultPageSize defaultPageSize\n     */\n    private getNgListProperties(defaultPageSize: number = 0) {\n\n        const getChilds = (objectType: Type<Entity>) => {\n            const listProperties = FieldMetadataUtil.getNgList(objectType);\n            let result = {};\n            if (Object.keys(listProperties).length < 1) {\n                return result;\n            }\n\n            Object.keys(listProperties).forEach(prop => {\n                let itemTypeName = listProperties[prop].dataField;\n                // 去掉尾部的s\n                if (itemTypeName.endsWith('s')) {\n                    itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);\n                }\n                result[itemTypeName] = {\n                    pageSize: defaultPageSize\n                };\n                const child = getChilds(listProperties[prop].type);\n                if (child !== null && Object.keys(child).length > 0) {\n                    result = Object.assign({}, result, child);\n                }\n            });\n            return result;\n        };\n        const childs = getChilds(this.entityType);\n        const root = Object.assign({}, { pageSize: defaultPageSize }, childs);\n        return root;\n    }\n\n}\n","import { DataChange, DataChangeType } from '../core';\n\nclass DataChangeHistory {\n    private history: Array<DataChange>;\n    private cacheData: Array<DataChange>;\n\n    constructor() {\n        this.history = [];\n        this.cacheData = [];\n    }\n    public addChange(dataChange: DataChange) {\n        const changeType = DataChangeType[dataChange.changeType];\n        this[`on${changeType}Data`](dataChange);\n    }\n    public addChanges(dataChange: DataChange[]) {\n        dataChange.forEach(change => this.addChange(change));\n    }\n    public clear() {\n        this.history.splice(0, this.history.length);\n    }\n    public clearByIds(ids: string[]) {\n        this.history = this.history.filter(item => {\n            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {\n                for (const id of ids) {\n                    const include = item.fpath.split('/').includes(id);\n                    return !include;\n                }\n            } else {\n                return !ids.includes(item.dataId);\n            }\n        });\n    }\n    public isChanged() {\n        return this.history.length > 0;\n    }\n    public clearCache() {\n        this.cacheData.splice(0, this.cacheData.length);\n    }\n    public getCacheData() {\n        return this.cacheData;\n    }\n    private onAddData(dataChange: DataChange) {\n        this.history.push(dataChange);\n    }\n    private onEditData(dataChange: DataChange) {\n        this.cacheData.push(dataChange);\n    }\n    private onAppendData(dataChange: DataChange) {\n        this.history.push(dataChange);\n        this.cacheData.push(dataChange);\n    }\n    private onDeleteData(dataChange: DataChange) {\n        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);\n        if (index >= 0) {\n            this.history.splice(index, 1);\n        } else {\n            this.history.push(dataChange);\n        }\n    }\n}\nexport { DataChangeHistory };\n","/*\n * @Author: Witt\n * @Date: 2018-10-12 15:37:11\n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-09-03 19:10:44\n * @todo 待优化问题\n * 1、apiUrl是否应该在基类中，子类中的api如何传递给基类；\n */\n\nimport { Type } from '../core/index';\nimport { Observable, Subject } from 'rxjs';\n\nimport { DataTypeInfo } from '../entity/index';\nimport { Guid } from '../utils/index';\nimport { Modification } from '../changeset/index';\nimport { MetadataUtil } from '../core/index';\nimport { Entity, createEntity, createEntities, FieldMetadataUtil } from '../entity/index';\nimport { RepositoryMeta } from './decorators';\nimport { EntityCollection } from './entity_collection';\nimport { PaginationManager } from './pagination_manager';\nimport { DataChangeHistory } from './data_change_history';\n\nexport abstract class Repository<T extends Entity> {\n\n  /**\n   * 名称\n   */\n  abstract name: string;\n\n  /**\n   * 实体类型\n   */\n  public entityType: Type<T>;\n\n  /**\n   * 实体类型信息\n   */\n  public entityTypeInfo: DataTypeInfo;\n\n  /**\n   * 实体集合\n   */\n  public entityCollection: EntityCollection<T>;\n\n  /**\n   * 用户分页配置信息\n   */\n  public paginationInfo: any = null;\n\n  /**\n   * 数据变更历史\n   * @summary\n   * 仅针对主表增加、从表删除\n   */\n  public dataChangeHistory: DataChangeHistory;\n\n\n  /**\n   * 分页管理器\n   */\n  public paginationManager: PaginationManager<T>;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n  }\n\n  protected init() {\n    this.entityTypeInfo = new DataTypeInfo(this.entityType);\n    this.entityCollection = new EntityCollection<T>(this.entityType);\n    this.entityCollection.entityTypeInfo = this.entityTypeInfo;\n    this.dataChangeHistory = new DataChangeHistory();\n  }\n\n  public get changes(): Subject<Modification> {\n    return this.entityCollection.changes;\n  }\n\n  /**\n   * 实体主键\n   */\n  public get primaryKey(): string {\n    return this.entityCollection.primaryKey;\n  }\n\n  /**\n   * 实体变更集合\n   */\n  public get entityCollectionChange(): Subject<Modification> {\n    return this.entityCollection.collectionChanged;\n  }\n\n  /**\n   * 重置状态\n   */\n  public reset(): void {\n    this.entityCollection.clear();\n  }\n\n  /**\n   * 创建实体\n   */\n  public buildEntity(data: any): T {\n    const entity = createEntity<T>(this.entityType, data);\n    return entity;\n  }\n\n  /**\n   * 批量创建实体\n   */\n  public buildEntities(listData: any[]): T[] {\n    const entities: T[] = createEntities<T>(this.entityType, listData);\n    return entities;\n  }\n\n  /**\n   * 初始化分页配置\n   * @param config 用户分页配置\n   */\n  setPaginationConfig(config: any) {\n    this.paginationManager = new PaginationManager(this.entityType, config);\n    const { pageSize = 0 } = this.paginationManager.getPaginationConfigByPath('/') || {};\n    // tslint:disable-next-line: max-line-length\n    this.entityCollection.paginationInfo = Object.assign({ pageSize }, this.entityCollection.paginationInfo, this.paginationManager.pagination);\n\n    // 无需再单独设置一次pageSize，减少一次变更\n    // this.entityCollection.pageSize = pageSize;\n  }\n\n  /**\n   * 设置分页\n   */\n  public setPaginationInfo(paginationInfo: any) {\n    this.paginationInfo = { ...this.paginationInfo, ...paginationInfo };\n  }\n  \n}\n","import { Entity } from '../entity/index';\nimport { Repository } from './repository';\nimport { EntityManager } from './entity_manager';\n\n/**\n * 空Repository实现\n */\nabstract class DefaultRepository<T extends Entity> extends Repository<T> {\n\n  /**\n   * 名称\n   */\n  abstract name: string;\n\n  /**\n   * 实体管理器\n   */\n  public entityManager: EntityManager<T>;\n\n  constructor() {\n    super();\n  }\n\n  init() {\n    super.init();\n    this.entityManager = new EntityManager(this.entityCollection);\n  }\n}\n\nexport { DefaultRepository };\n","import { TypeDecorator, makeDecorator, makePropDecorator } from '../core/index';\n\n/**\n * ----------------------------------------\n * CommandHandlerMeta\n * ----------------------------------------\n */\n\n/**\n * 命令处理描述\n */\nexport interface CommandHandlerMetadata {\n\n  /**\n   * 要处理的名称\n   */\n  commandName: string;\n}\n\n\n/**\n * 命令处理装饰器名称\n */\nexport const COMMAND_HANDLER_META = 'CommandHandlerMeta';\n\n\n/**\n * 命令处理装饰器接口\n */\nexport interface CommandHandlerMetaDecorator {\n  (handler?: CommandHandlerMetadata): TypeDecorator;\n  new(handler?: CommandHandlerMetadata): CommandHandlerMetadata;\n}\n\n\n/**\n * 命令处理装饰器工厂\n */\n\nexport function CommandHandlerMeta(options: CommandHandlerMetadata) {\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_META, (handler: CommandHandlerMetadata) => handler);\n  return decoratorFactory(options);\n}\n\n\n/**\n * ----------------------------------------\n * CommandExtenderMeta\n * ----------------------------------------\n */\n\n/**\n * 命令处理扩展描述\n */\nexport interface CommandHandlerExtenderMetadata {\n  commandName: string;\n}\n\n\n/**\n * 命令处理扩展装饰器名称\n */\nexport const COMMAND_HANDLER_EXTENDER_META = 'CommandHandlerExtenderMeta';\n\n\n/**\n * 命令处理扩展装饰器接口\n */\nexport interface CommandHandlerExtenderMetaDecorator {\n  (extender?: CommandHandlerExtenderMetadata): TypeDecorator;\n  new(extender?: CommandHandlerExtenderMetadata): CommandHandlerExtenderMetadata;\n}\n\n/**\n * 命令处理扩展装饰器工厂\n */\nexport function CommandHandlerExtenderMeta(options: CommandHandlerExtenderMetadata) {\n  const decoratorFactory = makeDecorator(COMMAND_HANDLER_EXTENDER_META, (extender: CommandHandlerExtenderMetadata) => extender);\n  return decoratorFactory(options);\n}\n","import { Observable, of } from 'rxjs';\nimport { CommandContext } from '../command_context';\nimport { isObservable } from '../../utils/index';\n\n/**\n * 任务函数\n */\ntype TaskFunc = (context: CommandContext) => any;\n\n\n/**\n * 任务节点\n */\nclass TaskNode {\n\n  /**\n   * 任务名称\n   */\n  name: string;\n\n  /**\n   * 任务函数\n   */\n  func: TaskFunc;\n\n  /**\n   * 构造函数\n   */\n  constructor(name: string, func: TaskFunc) {\n    this.name = name;\n    this.func = func;\n  }\n\n  /**\n   * 执行任务函数\n   */\n  execute(context: CommandContext): Observable<any> {\n    const result = this.func(context);\n    const result$ = isObservable(result) ? result : of(result);\n    return result$;\n  }\n}\n\nexport { TaskFunc, TaskNode };\n","/**\n * session变量解析\n * @author Witt <jiwt@inspur.com>\n */\nimport { createInjectionToken } from '../core/index';\n\n/**\n * 变量解析接口\n */\ninterface VariableParser {\n  parse(expression: string, context: any): any;\n}\n\nconst VARIABLE_PARSERS = createInjectionToken('@farris/devkit VARIABLE_PARSERS');\n\nexport { VariableParser, VARIABLE_PARSERS };\n","import { StaticProvider } from '../core/index';\n\nclass AppOptions {\n\n  /**\n   * 应用id\n   */\n  id: string;\n\n  /**\n   * 应用providers\n   */\n  providers: StaticProvider[];\n\n}\n\nexport { AppOptions };\n","/*\n * @Author: Witt\n * @Date: 2018-12-29 10:46:01\n * @Last Modified by: Witt\n * @Last Modified time: 2018-12-30 17:56:02\n */\n\nimport { BindingData } from '../binding-data';\n\n/**\n * BindingData管理类\n */\nclass BindingDataManager {\n\n  /**\n   * BindingDataMap\n   */\n  private bindingDataMap: Map<string, BindingData>;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.bindingDataMap = new Map<string, BindingData>();\n  }\n\n  /**\n   * 获取BindingDataMap\n   */\n  public getBindingDataMap(): Map<string, BindingData> {\n    return this.bindingDataMap;\n  }\n\n  /**\n   * 根据name获取BindingData\n   * @return 找不到时返回undefined\n   */\n  public getBindingDataByName(name: string): BindingData {\n    return this.bindingDataMap.get(name);\n  }\n\n  /**\n   * 初始化全局的BindingData\n   */\n  public regBindingData(name: string, bindingData: BindingData): void {\n    this.bindingDataMap.set(name, bindingData);\n  }\n\n  /**\n   * 是否Repository已经存在\n   */\n  public ifBindingDataExits(name: string) {\n    const bindingData = this.getBindingDataByName(name);\n    return bindingData ? true : false;\n  }\n\n}\n\nexport { BindingDataManager };\n","/*\n * @Author: Witt\n * @Date: 2018-12-29 10:46:01\n * @Last Modified by: Witt\n * @Last Modified time: 2018-12-30 18:06:11\n */\n\nimport { Repository } from '../repository/index';\nimport { Entity } from '../entity/index';\n\n/**\n * Repository管理类\n */\nclass RepositoryManager {\n\n  /**\n   * repositoryMap\n   */\n  private repositoryMap: Map<string, Repository<Entity>>;\n\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.repositoryMap = new Map<string, Repository<Entity>>();\n  }\n\n  /**\n   * 注册Repository\n   */\n  public regRepository(name: string, repository: Repository<Entity>): void {\n    this.repositoryMap.set(name, repository);\n  }\n\n  /**\n   * 获取RepositoryMap\n   * @internal\n   */\n  public getRepositoryMap(): Map<string, Repository<Entity>> {\n    return this.repositoryMap;\n  }\n\n  /**\n   * 获取Repository数组\n   */\n  public getRepositories(): Repository<Entity>[] {\n    return Array.from(this.repositoryMap.values());\n  }\n\n  /**\n   * 根据name获取Repository\n   */\n  public getRepositoryByName(name: string): Repository<Entity> {\n    return this.repositoryMap.get(name);\n  }\n\n  /**\n   * 是否Repository已经存在\n   */\n  public ifRepositoryExits(name: string) {\n    const repository = this.getRepositoryByName(name);\n    return repository ? true : false;\n  }\n\n}\n\nexport { RepositoryManager };\n","import { ViewModelContext } from '../view-model/index';\n\n/**\n * ViewModelContext管理类\n */\nclass ViewModelContextManager {\n\n  /**\n   * Context字典\n   */\n  private contextMap: Map<string, ViewModelContext>;\n\n  /**\n   * Context集合\n   */\n  private contextSet: Set<ViewModelContext>;\n\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.contextMap = new Map<string, ViewModelContext>();\n    this.contextSet = new Set<ViewModelContext>();\n  }\n\n  /**\n   * 注册Context\n   */\n  public regContext(viewModelContext: ViewModelContext): void {\n    const id = viewModelContext.id;\n    if (this.contextMap.has(id) === true) {\n      // throw Error(`id为${id}的ViewModelContext已经存在`);\n      // 临时处理，方式报错。\n      this.unregContext(viewModelContext);\n    }\n\n    this.contextMap.set(id, viewModelContext);\n    this.contextSet.add(viewModelContext);\n  }\n\n  /**\n   * 取消注册\n   */\n  public unregContext(context: ViewModelContext): void {\n    const id = context.id;\n    this.contextMap.delete(id);\n    this.contextSet.delete(context);\n  }\n\n  /**\n   * 获取ContextMap\n   */\n  public getContextMap() {\n    return this.contextMap;\n  }\n\n  /**\n   * 获取全部Context\n   */\n  public getContexts(): ViewModelContext[] {\n    return Array.from(this.contextSet);\n  }\n\n  /**\n   * 根据命名控件获取上下文集合\n   */\n  public getContextsByNamespace(namespace: string) {\n    return this.getContexts();\n  }\n\n  /**\n   * 根据id获取Context\n   */\n  public getContextById(id: string): ViewModelContext {\n    const targetContext = this.contextMap.get(id);\n    return targetContext;\n  }\n\n  /**\n   * 获取根Context\n   */\n  public getRootContext(): ViewModelContext {\n    const contexts = this.getContexts();\n    const rootContext = contexts.find((context: ViewModelContext) => {\n      return context.parent === null;\n    });\n    return rootContext;\n  }\n\n  /**\n   * 获取传入视图模型id的root及root的下一代集合数组\n   */\n  public getRootContextAndPosterityById(viewModelId): ViewModelContext[] {\n    const targetContext = this.getContextById(viewModelId);\n    const contexts = this.getContexts();\n    let contextsGroup = [];\n    // 1.找到ROOT\n    const RootId = this.getContextsGroupRoot(targetContext);\n    // 2.可直接遍历拿到所有直系后代 (目前只有两层结构直接获取下一代)\n    contexts.map((context: ViewModelContext) => {\n      if (context.parent && context.parent.id === RootId) {\n        contextsGroup.push(context);\n      }\n    });\n    contextsGroup.push(this.getContextById(RootId));\n    return contextsGroup;\n  }\n\n  private getContextsGroupRoot(context: ViewModelContext) {\n    if (context.parent) {\n      return this.getContextsGroupRoot(context.parent);\n    } else {\n      return context.id\n    }\n  }\n}\n\nexport { ViewModelContextManager };\n","class Context {\n\n  /**\n   * 上下文变量\n   */\n  params: Map<string, any> = new Map<string, any>();\n\n  /**\n   * 获取变量\n   */\n  getParam(key: string): any {\n    return this.params.get(key);\n  }\n\n  /**\n   * 设置变量\n   */\n  setParam(key: string, value: any) {\n    this.params.set(key, value);\n  }\n}\n\nexport { Context };\n","import { InjectionToken } from '../core/index';\n\n/**\n * 表单模块路径\n */\nexport const VALIDATION_RULE_TOKEN = new InjectionToken('@Farris validation rule');\n","/**\n * 应用上下文\n * @author Witt<jiwt@inspur.com>\n * @todo\n * 1、parnet和AppContextManager是否必要？按理说就是应该隔离上下文，表单之间通过事件通讯进行交互；\n */\nimport { Injector } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { Context } from '../context/index';\nimport { BindingDataFactory } from '../binding-data';\nimport { ViewModelContextManager } from './view_model_contex_manager';\nimport { RepositoryManager } from './repository_mananger';\nimport { BindingDataManager } from './binding_data_manager';\nimport { AppEventBus } from './app_eventBus';\nimport { VALIDATION_RULE_TOKEN } from './tokens'\nclass AppContext extends Context {\n\n  /**\n   * 构造函数\n   */\n  constructor(\n    public injector: Injector,\n    public eventBus: AppEventBus,\n    public repositoryManager: RepositoryManager,\n    public bindingDataManager: BindingDataManager,\n    public viewModelContextManager: ViewModelContextManager,\n    public validationManager = {},\n    public validationRule\n  ) {\n    super();\n    this.validationRule = injector.get(VALIDATION_RULE_TOKEN, []);\n  }\n\n  /**\n   * 注册FrameContext\n   */\n  public regViewModelContext(viewModelContext: ViewModelContext): void {\n\n    const repository = viewModelContext.repository;\n    const repositoryName = repository.name;\n\n    // Repository\n    if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {\n      this.repositoryManager.regRepository(repositoryName, repository);\n    }\n\n    // BindingData\n    if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {\n      const bindingData = BindingDataFactory.createFromRepository(repository, '/');\n      this.bindingDataManager.regBindingData(repositoryName, bindingData);\n    }\n\n    // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景\n    this.viewModelContextManager.regContext(viewModelContext);\n  }\n\n}\n\nexport { AppContext };\n","import { Injector, InjectFlags } from '../core/index';\nimport { Context } from '../context/index';\nimport { AppContext } from '../app/index';\nimport { Entity } from '../entity/index';\nimport { Repository } from '../repository/index';\nimport { BindingData } from '../binding-data/index';\nimport { UIState } from '../ui-state/index';\nimport { StateMachine } from '../state-machine/index';\nimport { Form } from '../form/index';\nimport { ViewModel } from '../view-model/index';\nimport { CommandBus } from '../command/index';\nimport {\n  ExpressionEngineImpl, ExpressionManager, ExpressionResult, ExpressionResultFactory\n} from '../expression/index';\nimport { ControlsProxy } from '../control-proxy';\n\n/**\n * 视图模型上下文\n */\nclass ViewModelContext {\n\n  private innerViewModel: ViewModel;\n\n  public appContext: AppContext;\n\n  public root: ViewModelContext;\n\n  public parent: ViewModelContext;\n\n  public id: string;\n\n  constructor() {\n  }\n\n  public init(viewModel): void {\n    this.innerViewModel = viewModel;\n    this.id = this.innerViewModel.id;\n    this.appContext = viewModel.injector.get(AppContext);\n    this.regToTree();\n    this.regToAppContext();\n  }\n\n  public regToTree() {\n    const parentInjector = this.innerViewModel.injector.get<Injector>(Injector, null, InjectFlags.SkipSelf);\n    if (parentInjector)  {\n      this.parent = parentInjector.get(ViewModelContext, null);\n      this.root = this.parent ? this.parent.root : this;\n    } else {\n      this.parent = null;\n      this.root = this;\n    }\n  }\n\n  public regToAppContext() {\n    this.appContext.regViewModelContext(this);\n  }\n\n  public get viewModel(): ViewModel {\n    return this.innerViewModel;\n  }\n\n  public get injector(): Injector {\n    return this.innerViewModel.injector;\n  }\n\n  public get repository(): Repository<Entity> {\n    return this.innerViewModel.repository;\n  }\n\n  public get bindingData(): BindingData {\n    return this.innerViewModel.bindingData;\n  }\n\n  public get uiState(): UIState {\n    return this.innerViewModel.uiState;\n  }\n\n  public get stateMachine(): StateMachine {\n    return this.innerViewModel.stateMachine;\n  }\n\n  public get form(): Form {\n    return this.innerViewModel.form;\n  }\n\n  public get commandBus(): CommandBus {\n    return this.innerViewModel.commandBus;\n  }\n\n  public get expressionEngineImpl(): ExpressionEngineImpl {\n    return this.innerViewModel.expressionEngineImpl;\n  }\n\n  public get expressionManager(): ExpressionManager {\n    return this.innerViewModel.expressionManager;\n  };\n\n  public get expressionResult(): ExpressionResult {\n    return this.innerViewModel.expressionResult;\n  };\n\n  public get controlsProxy(): ControlsProxy {\n    return this.innerViewModel.controlsProxy;\n  };\n\n  public getVirtualRootFrameContext() {\n    let formFrameContext = this;\n    // let parent = this.parent;\n    // while (parent) {\n    //   // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext\n    //   if (parent.namespace === this.namespace) {\n    //     formFrameContext = parent;\n    //     parent = parent.parent;\n    //   } else {\n    //     break;\n    //   }\n    // }\n    return formFrameContext;\n  }\n\n  /**\n   * 注册扩展命令\n   */\n  public registerExtendCommand(commandName: string, commandHandler: any) {\n    this.viewModel.registerExtendCommand(commandName, commandHandler);\n  }\n\n}\n\nexport { ViewModelContext };\n","import { makePropDecorator } from '../core/index';\n\n/**\n * UIState属性元数据接口\n */\nexport interface ControlStatePropMetadata{\n\n  /**\n   * 组件的信息\n   */\n  controlInfo?: ControlInfo;\n\n  /**\n   * 状态名称\n   */\n  stateName?: string;\n\n  /**\n   * 原始值\n   */\n  originalValue?: any;\n\n}\n\nclass ControlInfo  {\n  //内码\n  id: string;\n\n  //类型\n  type?: string;\n\n  //是否在尾部\n  isInFooter?:boolean;\n\n  //绑定字段路径\n  bindingPath?: string;\n\n  //特性,position\n  features?:any;\n\n}\n\n/**\n * UIState属性元数据名称\n */\nexport const CONTROLSTATE_PROP_META = 'ControlStatePropMeta';\n\n/**\n * UIState属性元数据装饰器工厂接口\n */\nexport interface ControlStatePropMetaDecorator {\n  (obj?: ControlStatePropMetadata): any;\n  new(obj?: ControlStatePropMetadata): any;\n}\n\n/**\n * UIState属性元数据装饰器工厂\n */\nexport const ControlStatePropMeta: ControlStatePropMetaDecorator =\n  makePropDecorator(CONTROLSTATE_PROP_META, (obj?: ControlStatePropMetadata) => obj);\n\n\n","import { makePropDecorator } from '../core/index';\n\n/**\n * UIState属性元数据接口\n */\nexport interface UIStatePropMetadata {\n\n  /**\n   * 组件的ID\n   */\n  componentId?: string;\n\n  /**\n   * 状态名称\n   */\n  stateName?: string;\n  \n}\n\n/**\n * UIState属性元数据名称\n */\nexport const UISTATE_PROP_META = 'UIStatePropMeta';\n\n/**\n * UIState属性元数据装饰器工厂接口\n */\nexport interface UIStatePropMetaDecorator {\n  (obj?: UIStatePropMetadata): any;\n  new(obj?: UIStatePropMetadata): any;\n}\n\n/**\n * UIState属性元数据装饰器工厂\n */\nexport const UIStatePropMeta: UIStatePropMetaDecorator =\n  makePropDecorator(UISTATE_PROP_META, (obj?: UIStatePropMetadata) => obj);\n\n\n","import { MetadataUtil } from '../core/index';\nimport { CONTROLSTATE_PROP_META, ControlStatePropMetadata } from './control_decorators';\nimport { UISTATE_PROP_META, UIStatePropMetadata } from './decorators';\n\nexport class UIStateMetadataUtil {\n\n  /**\n   * 获取NgUIState的属性元数据\n   * @param \n   * @returns 属性元数据对象\n   * @example\n   * 返回格式：\n   * {\n   *    '属性名称': <NgUIStateProperty>{ ...}\n   * }\n   */\n  static getUIFields(target: Function): {[propName: string]: UIStatePropMetadata} {\n      return MetadataUtil.getPropsMetadatasByName(target, UISTATE_PROP_META);\n  }\n\n  static getControlFields(target: Function): {[propName: string]: ControlStatePropMetadata} {\n    return MetadataUtil.getPropsMetadatasByName(target, CONTROLSTATE_PROP_META);\n}\n}","import { Observable } from \"rxjs\";\r\nimport { createInjectionToken } from \"../../core\";\r\nimport { ViewModelContext } from \"../../view-model\";\r\nimport { ControlStatePropMetadata } from \"../control_decorators\";\r\n\r\ninterface ControlStateInterceptor{\r\n    /**\r\n     * 初始化\r\n     */\r\n    init(initContext:InitContext):Observable<any>;\r\n    \r\n    /**\r\n     * 控件状态拦截\r\n     * @param interceptContext\r\n     */\r\n    intercept(interceptContext:InterceptContext):void;\r\n}\r\n\r\n/**\r\n * 命令处理器扩展注入Token\r\n */\r\nconst CONTROL_STATE_INTERCEPTOR_TOKEN = createInjectionToken('@farris/devkit CONTROL_STATE_INTERCEPTOR_TOKEN');\r\n\r\nclass InitContext  {\r\n    //流程上下文\r\n    processContext:ProcessContext\r\n}\r\n\r\n\r\nclass InterceptContext {\r\n    //类型\r\n    type: string;\r\n\r\n    //属性值\r\n    value:any;\r\n\r\n    //控件变量的信息\r\n    controlState:ControlStatePropMetadata\r\n\r\n    //视图模型\r\n    viewModelContext:ViewModelContext;\r\n\r\n    //流程上下文\r\n    processContext:ProcessContext;\r\n}\r\n\r\nclass ProcessContext  {\r\n    //是否在流程中\r\n    isInWf:boolean;\r\n\r\n    //流程页面状态\r\n    uiStateInProcess:string\r\n\r\n    //表单配置\r\n    formConfigId:string\r\n}\r\n\r\nexport {ControlStateInterceptor,InitContext,InterceptContext,ProcessContext,CONTROL_STATE_INTERCEPTOR_TOKEN}","import { shareReplay } from \"rxjs/operators\";\r\nimport { InjectFlags, Injector } from \"../../core\";\r\nimport { CONTROL_STATE_INTERCEPTOR_TOKEN, InterceptContext, ControlStateInterceptor, InitContext, ProcessContext } from \"./control_state_interceptor\";\r\nimport { Observable, forkJoin, isObservable, of } from \"rxjs\";\r\nimport { EnvUtil, UrlUtil} from \"../../utils\";\r\n\r\n/**\r\n * 状态拦截器服务\r\n */\r\nexport class ControlStateInterceptorService{\r\n\r\n    //控件状态拦截器\r\n    private controlInterceptors: ControlStateInterceptor[] = [];\r\n    private result:Observable<any>;\r\n\r\n    private processContext: ProcessContext;\r\n\r\n    constructor(private injector: Injector){\r\n        this.controlInterceptors = this.injector.get(CONTROL_STATE_INTERCEPTOR_TOKEN, null, InjectFlags.Optional);\r\n    }\r\n\r\n    public init():Observable<any>{\r\n        if(this.result){\r\n            return this.result;\r\n        }\r\n\r\n        const inits = [];\r\n        const initContext = new InitContext();\r\n        const processContext = this.getProcessContext();\r\n        initContext.processContext = this.processContext = processContext;\r\n\r\n        for(const controlInterceptor of this.controlInterceptors){\r\n            if(controlInterceptor.init && typeof controlInterceptor.init === 'function'){\r\n                const initFunc = controlInterceptor.init(initContext);\r\n                const $result = isObservable(initFunc) ? initFunc : of(initFunc);\r\n                inits.push($result);\r\n            }\r\n        }\r\n\r\n        return this.result = forkJoin(inits).pipe(shareReplay(1));\r\n    }\r\n\r\n    public intercept(interceptContext:InterceptContext) {\r\n        interceptContext.processContext  = this.processContext;\r\n        for(const controlInterceptor of this.controlInterceptors){\r\n            controlInterceptor.intercept(interceptContext);\r\n        }\r\n    }\r\n\r\n    private getProcessContext():ProcessContext{\r\n        const processContext = new  ProcessContext();\r\n        const isInWf = EnvUtil.isInWf();\r\n        processContext.isInWf = isInWf;\r\n        if (isInWf === false) {\r\n            return processContext\r\n        }\r\n\r\n        const iframe = window.parent.document.querySelector('iframe');\r\n        if (!iframe || !iframe.src) {\r\n            return processContext\r\n        }\r\n\r\n        const queryParams = UrlUtil.getParams(iframe.src);\r\n        if (!queryParams) {\r\n            return processContext\r\n        }\r\n\r\n        processContext.uiStateInProcess = queryParams.UIStateInProcess;\r\n        processContext.formConfigId = queryParams.formConfigId;\r\n\r\n        return processContext\r\n    }\r\n    \r\n\r\n}\r\n\r\n","\r\nimport { ViewModelContext } from \"../../view-model\";\r\nimport { ControlStatePropMetadata } from \"../control_decorators\";\r\nimport { UIStateMetadataUtil } from \"../uistate_metadata_util\";\r\nimport { ControlStateInterceptorService } from \"./control_state_interceptor.service\";\r\nimport { FormControl } from \"../../form\";\r\nimport { Observable } from \"rxjs\";\r\nimport { InterceptContext } from \"./control_state_interceptor\";\r\n\r\nexport class ControlStateUpdater {\r\n\r\n    //视图模型上下文\r\n    private viewModelContext: ViewModelContext;\r\n\r\n    //拦截器服务\r\n    private controlStateInterceptorService: ControlStateInterceptorService;\r\n\r\n    //描述控件状态的变量\r\n    private controlFields: {[propName: string]: ControlStatePropMetadata};\r\n\r\n    //【描述控件状态】的变量信息\r\n    private variableNames:any[];\r\n\r\n\r\n    constructor(viewModelContext: ViewModelContext) {\r\n        this.viewModelContext = viewModelContext;\r\n        this.controlStateInterceptorService = viewModelContext.injector.get(ControlStateInterceptorService);\r\n    }\r\n\r\n    /**\r\n     * 初始化\r\n     * @returns \r\n     */\r\n    public init():Observable<any>{\r\n        return this.controlStateInterceptorService.init();\r\n    }\r\n\r\n    /**\r\n     * 更新【描述控件状态】的变量\r\n     * @param changes 监听到的变化\r\n     */\r\n    public updateControlState(changes:{ lintenerType, change }) {\r\n        //1.获取【描述控件状态】的变量，并缓存\r\n        if(!this.controlFields){\r\n            const uiState = this.viewModelContext.uiState;\r\n            this.controlFields = UIStateMetadataUtil.getControlFields(uiState.constructor);\r\n            this.variableNames = Object.keys(this.controlFields)\r\n        }\r\n\r\n        //2.更新前事件\r\n        if(!this.beforeUpdate(changes)){\r\n            return;\r\n        }\r\n\r\n        //3.遍历变量，进行更新\r\n        this.variableNames.forEach(variableName => {\r\n            const fieldMetadata = this.controlFields[variableName] as ControlStatePropMetadata;\r\n            //遍历默认值\r\n            Object.keys(fieldMetadata.originalValue).forEach(propertyName => {\r\n                //更新\r\n                this.update(changes,fieldMetadata,variableName,propertyName)\r\n                \r\n            })\r\n        });\r\n    }\r\n\r\n    /**\r\n     * 更新前事件\r\n     * @param changes \r\n     * @returns \r\n     */\r\n    private beforeUpdate(changes:{ lintenerType, change }):boolean{\r\n        //1.没有【控件状态变量】，无需更新\r\n        if(!this.variableNames){\r\n            return false;\r\n        }\r\n\r\n        const { lintenerType, change } = changes;\r\n        //2.【控件状态变量】变化时，不做处理。否则会造成循环调用\r\n        if(lintenerType === 'uiState' && this.variableNames.includes(change.field)){\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * 更新\r\n     * @param changes 监听到的变化\r\n     * @param fieldMetadata 变量的元数据\r\n     * @param variableName 变量名\r\n     * @param propertyName 控件的属性名\r\n     * @returns \r\n     */\r\n    private update(changes:{ lintenerType, change },fieldMetadata:ControlStatePropMetadata,variableName:string,propertyName:string){\r\n        let propertyValue:{type,value} = fieldMetadata.originalValue[propertyName];\r\n\r\n        //1.是否需要更新\r\n        if(!this.needUpdate(propertyValue,changes)){\r\n            return;\r\n        }\r\n\r\n        //2.计算原始值\r\n        let value = this.computeOriginalValue(propertyValue);\r\n\r\n        //3.拦截器处理\r\n        const interceptContext = new InterceptContext();\r\n        interceptContext.controlState = fieldMetadata\r\n        interceptContext.value = value;\r\n        interceptContext.type = propertyName;\r\n        interceptContext.viewModelContext = this.viewModelContext;\r\n\r\n        if (this.controlStateInterceptorService) {\r\n            this.controlStateInterceptorService.intercept(interceptContext);\r\n        }\r\n\r\n        //4.更新状态\r\n        const uiState = this.viewModelContext.uiState;\r\n        if (!uiState[variableName]) {\r\n            uiState[variableName] = {};\r\n        }\r\n        uiState[variableName] = { ...uiState[variableName], [propertyName]: interceptContext.value };\r\n\r\n        //5.更新后事件\r\n        this.afterUpdate(propertyName,interceptContext);\r\n    }\r\n\r\n    /**\r\n     * 是否需要新\r\n     * @param originalValue \r\n     * @returns \r\n     */\r\n    private needUpdate(originalValue: { type, value:any },changes:{ lintenerType, change }):boolean{\r\n        const { type, value } = originalValue;\r\n        const { lintenerType, change } = changes;\r\n\r\n        //1.第一次更新全部\r\n        if(lintenerType === 'firstUpdate'){\r\n            return true;\r\n        }\r\n        \r\n        //2.固定值类型：只在第一次更新，后续不需要更新\r\n        if(type === 'constant'){\r\n            return false;\r\n        }\r\n\r\n        //3.value为空，也是固定值,也不需要更新\r\n        if(!value){\r\n            return false;\r\n        }\r\n\r\n        //4.表达式类型：监听到表达式变化，直接更新表达式变量\r\n        if(type === 'expression' && lintenerType === 'expression'){\r\n            return true;\r\n        }\r\n\r\n        //5.根据监听到变化的类型判断\r\n        switch(lintenerType){\r\n            case 'bindingData':{\r\n                if(change && change.path && change.path.length > 0){\r\n                    if(value.includes(change.path[0])){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n                }\r\n                break;\r\n            }\r\n            case 'uiState':{\r\n                if(change && change.field){\r\n                    if(value.includes(change.field)){\r\n                        return true;\r\n                    }else{\r\n                        return false;\r\n                    }\r\n\r\n                }\r\n                break;  \r\n            }\r\n            case 'stateMachine':{\r\n                if(value.includes('stateMachine')){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n                break;    \r\n            }\r\n            case 'form':{\r\n                if(value.includes('form')){\r\n                    return true;\r\n                }else{\r\n                    return false;\r\n                }\r\n                break;    \r\n            }\r\n\r\n        }\r\n        return true;\r\n    }\r\n\r\n\r\n    /**\r\n     * 计算变量的值\r\n     * @param originalValue \r\n     * @returns \r\n     */\r\n    private computeOriginalValue(originalValue: { type, value }): any {\r\n        let value = originalValue.value;\r\n        const type = originalValue.type;\r\n\r\n        if(value && typeof value === 'string' && type !=='constant'){\r\n            const context = {\r\n                bindingData:this.viewModelContext.bindingData.list.currentItem.toJSON(),\r\n                entityListData:this.viewModelContext.bindingData.getList().toJSON(),\r\n                currentEntityData:this.viewModelContext.bindingData.getObject().toJSON(),\r\n                uiState:this.viewModelContext.uiState,\r\n                form:this.viewModelContext.viewModel.form,\r\n                stateMachine:this.viewModelContext.stateMachine.renderStates,\r\n            }\r\n            return this.eval(value, context);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * 计算\r\n     * @param expr 变量\r\n     * @param contexts 上下文\r\n     * @returns \r\n     */\r\n    private eval(expr: string, contexts) {\r\n        expr = `return ${expr}`;\r\n        const scopeNames = Object.getOwnPropertyNames(contexts);\r\n        const scopeVariable = `__scope__${new Date().valueOf()}`;\r\n        return new Function(scopeVariable, `\r\n          ${scopeNames.map((key: string) => `var ${key} = ${scopeVariable}['${key}'];`).join('\\r\\n')}\r\n          return function () {\r\n            try{  \\n${expr}\\n }catch(e){console.error(e);}\r\n          };`)(contexts)();\r\n      }\r\n\r\n\r\n    /**\r\n     * 更新变量后，需要进行的操作\r\n     * @param propertyName \r\n     * @param interceptContext \r\n     */\r\n    private afterUpdate(propertyName,interceptContext:InterceptContext){\r\n        //1.必填处理\r\n        if(propertyName === 'required'){\r\n            this.updateRequired(interceptContext);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * 更新必填状态\r\n     * @param fieldMetadata \r\n     * @param interceptContext \r\n     * @returns \r\n     */\r\n    private updateRequired(interceptContext:InterceptContext){\r\n        const bindingPath = interceptContext.controlState.controlInfo.bindingPath;\r\n        if(!bindingPath){\r\n            return;\r\n        }\r\n        const form = this.viewModelContext.form;\r\n        const formControl = form.getFormValueByBindPath(bindingPath);\r\n        let form_name = formControl.form_name as FormControl;\r\n        if (!form_name || Object.keys(form_name).length === 0) {\r\n          return;\r\n        }\r\n        \r\n        const validators = [{ \"type\": \"required\", \"constraints\": [true], message:  '必填' }];\r\n        if (interceptContext.value === true) {\r\n          form.addValidate(formControl.bindingPath, formControl.name);\r\n          form_name.pushValidatorFnforRequired(validators, true)\r\n          form_name.required = true;\r\n        } else if (interceptContext.value === false) {\r\n          if (form_name.getValidatorFn() && form_name.getValidatorFn().length >= 1) {\r\n            form_name.required = false\r\n            //去除必填\r\n            form_name.resetValidatorFnforRequired();\r\n            if (form_name.validationResult && form_name.validationResult.type === 'required') {\r\n              form_name.validationResult = { passing: true, message: '' };\r\n            }\r\n          }\r\n        }\r\n    }\r\n\r\n}","import { Subscription } from \"rxjs\";\r\nimport { Change, ChangeType } from \"../../binding-data\";\r\nimport { ViewModelContext } from \"../../view-model\";\r\nimport { ControlStateUpdater } from \"./control_state_updater\";\r\nimport { UIStateObservableParam } from \"../ui_state\";\r\n\r\nexport class ControlStateListener {\r\n\r\n  //监听订阅集合\r\n  private subscriptionsMap: Map<string, Subscription> = new Map<string, Subscription>();\r\n\r\n  //视图模型上下文\r\n  private viewModelContext: ViewModelContext;\r\n\r\n  //更新器\r\n  private controlStateUpdater:ControlStateUpdater;\r\n\r\n  constructor(viewModelContext: ViewModelContext) {\r\n    this.viewModelContext = viewModelContext;\r\n    this.controlStateUpdater = viewModelContext.injector.get(ControlStateUpdater);\r\n    \r\n\r\n    //更新器初始化完成后，注册监听,主动触发一次更新\r\n    this.controlStateUpdater.init().subscribe(res=>{\r\n      this.register();\r\n\r\n      const changes = {\r\n        lintenerType:'firstUpdate',\r\n        change:null\r\n      }\r\n      this.controlStateUpdater.updateControlState(changes);\r\n    })\r\n\r\n  }\r\n\r\n  /**\r\n   *注册监听\r\n   */\r\n  private register(){\r\n    this.registerBindingDataLintener();\r\n    this.registerUIStateLintener();\r\n    this.registerStateMachineLintener();\r\n    this.registerFormLintener();\r\n  }\r\n\r\n  /**\r\n   * 监听BindingData变化\r\n   */\r\n  private registerBindingDataLintener() {\r\n    const stateName = 'bindingData';\r\n    if (this.subscriptionsMap.has(stateName) === false) {\r\n      const subscription = this.viewModelContext.bindingData.changes.subscribe((change: Change) => {\r\n        if (change.type === ChangeType.Load) {\r\n          return;\r\n        }\r\n        this.controlStateUpdater.updateControlState({\r\n          lintenerType:'bindingData',\r\n          change\r\n        });\r\n      });\r\n      this.subscriptionsMap.set(stateName, subscription);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 监听UIState变化\r\n   */\r\n  private registerUIStateLintener() {\r\n    const stateName = 'uiState';\r\n    if (this.subscriptionsMap.has(stateName) === false) {\r\n      const subscription = this.viewModelContext.uiState.changes.subscribe((change: UIStateObservableParam) => {\r\n        this.controlStateUpdater.updateControlState({\r\n          lintenerType:'uiState',\r\n          change\r\n        });\r\n      });\r\n      this.subscriptionsMap.set(stateName, subscription);\r\n    }\r\n  }\r\n\r\n  \r\n  /**\r\n   * 监听StateMachine变化\r\n   */\r\n  private registerStateMachineLintener() {\r\n    const stateName = 'stateMachine';\r\n    if (this.subscriptionsMap.has(stateName) === false && this.viewModelContext.stateMachine) {\r\n      const subscription = this.viewModelContext.stateMachine.stateChange.subscribe((change: string) => {\r\n        this.controlStateUpdater.updateControlState({\r\n          lintenerType:'stateMachine',\r\n          change\r\n        });\r\n      });\r\n      this.subscriptionsMap.set(stateName, subscription);\r\n    }\r\n  }\r\n\r\n  \r\n  /**\r\n   * 监听Form变化\r\n   */\r\n  private registerFormLintener() {\r\n    const stateName = 'form';\r\n    if (this.subscriptionsMap.has(stateName) === false) {\r\n      const subscription = this.viewModelContext.form.changes.subscribe((change: any) => {\r\n        if (change && change.type === 'validateFieldsFinished') {\r\n          this.controlStateUpdater.updateControlState({\r\n            lintenerType:'expression',\r\n            change\r\n          });\r\n        } else{\r\n          this.controlStateUpdater.updateControlState({\r\n            lintenerType:'form',\r\n            change\r\n          });\r\n        }\r\n\r\n      });\r\n      this.subscriptionsMap.set(stateName, subscription);\r\n    }\r\n  }\r\n  \r\n}","/*\n * @Author: Witt\n * @Date: 2018-11-17 13:38:23\n * @Last Modified by: Witt\n * @Last Modified time: 2018-11-17 13:38:50\n * @todo：临时删除原有功能，待重构\n */\n\nimport { Subject } from 'rxjs';\nimport { UIStateMetadataUtil } from './uistate_metadata_util';\nimport { UIStatePropMetadata } from './decorators';\nimport { ControlStatePropMetadata } from './control_decorators';\nimport { ControlStateListener } from './control-state/control_state_listener';\n\nexport interface UIStateObservableParam {\n  field: string;\n  value: any;\n}\n\n\n/**\n * UI状态\n */\nexport class UIState {\n\n  innerData: {};\n\n  // 监听变化\n  changes: Subject<UIStateObservableParam>;\n  public controlStateListener:ControlStateListener;\n\n  constructor() {\n    this.changes = new Subject<UIStateObservableParam>();\n\n    this.innerData = Object.assign({});\n    this._init();\n  }\n\n  _init() {\n    const construct = this.constructor;\n    const uiFields = UIStateMetadataUtil.getUIFields(construct);\n    const controlFields = UIStateMetadataUtil.getControlFields(construct);\n\n    this.initializeUIField(uiFields);\n    this.initializeControlField(controlFields);\n  }\n\n  //注册监听\n  config(viewModelContext){\n    const construct = this.constructor;\n    const controlFields = UIStateMetadataUtil.getControlFields(construct);\n\n    if(controlFields && Object.keys(controlFields).length > 0){\n      this.controlStateListener = viewModelContext.injector.get(ControlStateListener);\n\n    }\n  }\n\n  private initializeUIField(uiFieldMetadata: { [key: string]: UIStatePropMetadata }): void {\n    Object.keys(uiFieldMetadata).forEach(propertyName => {\n      const fieldMetadata = uiFieldMetadata[propertyName] as UIStatePropMetadata;\n      const uiField = fieldMetadata.stateName || propertyName;\n\n      if (delete this[propertyName]) {\n        this.defineProperty(propertyName, uiField);\n      }\n    });\n  }\n\n  private initializeControlField(controlFieldMetadata: { [key: string]: ControlStatePropMetadata }): void {\n    Object.keys(controlFieldMetadata).forEach(propertyName => {\n      const fieldMetadata = controlFieldMetadata[propertyName] as ControlStatePropMetadata;\n      const uiField = fieldMetadata.stateName || propertyName;\n\n      if (delete this[propertyName]) {\n        this.defineProperty(propertyName, uiField);\n      }\n    });\n  }\n\n  public isExistProperty(propertyName: any) {\n    if (this.innerData.hasOwnProperty(propertyName) || this.hasOwnProperty(propertyName)) {\n      return true;\n    }\n    return false;\n  }\n\n  private defineProperty(propertyName: any, field: any = null) {\n    Object.defineProperty(this, propertyName, {\n      get: function () {\n        return field !== null ? this.innerData[field] : this.innerData[propertyName];\n      },\n      set: function (value) {\n        // 值相同时不触发变更\n        const oldValue = field !== null ? this.innerData[field] : this.innerData[propertyName];\n        if (oldValue === value) {\n          return;\n        }\n        if (field !== null) {\n          this.innerData[field] = value;\n        } else {\n          this.innerData[propertyName] = value;\n        }\n        this.changes.next({\n          field: propertyName,\n          value: value\n        });\n      }\n    });\n  }\n\n  public setPropertyValue(propertyName: any, value: any) {\n    if (propertyName === '' || propertyName === undefined) {\n      return;\n    }\n    if (!this.isExistProperty(propertyName)) {\n      this.defineProperty(propertyName);\n    }\n    this[propertyName] = value;\n  }\n}\n","import { StateMachineContext } from './state_machine_context';\n\n/**\n * --------------------------------------------------------------------------------\n * State相关\n * --------------------------------------------------------------------------------\n */\n\n/**\n * 基本状态：表单的基本状态，通过State的运算确定RenderState的值，进而控制页面控件的状态。\n */\nexport class State {\n\n  /**\n   * 构造函数\n   * @param name 状态名称\n   */\n  constructor(public name: string) {\n  }\n}\n\n/**\n * 基本状态字典, 形如\n * {\n *  stateName1: stateInstance1,\n *  stateName2: stateInstance2,\n *  ...\n * }\n */\nexport interface StateDictionary {\n    [index: string]: State;\n}\n\n\n/**\n * --------------------------------------------------------------------------------\n * RenderState相关\n * --------------------------------------------------------------------------------\n */\n\n/**\n * 渲染状态，该状态用于和界面UI绑定\n */\nexport type RenderState = boolean;\n\n/**\n * 初始渲染状态\n */\nexport const initialUIState: RenderState = false;\n\n/**\n * 渲染状态字典，形如：\n * {\n *  renderStateName1: true,\n *  renderStateName1: false,\n *  ...\n * }\n */\nexport interface RenderStateDictionary {\n  [index: string]: RenderState;\n}\n\n\n/**\n * 渲染方法\n * 该方法接收一个StateMachineContext类型的上下文，\n * 通过对上下文中指定的当前状态的计算，确定对应渲染状态的值，该方法返回一个RenderState类型的值（即布尔类型）\n */\nexport type Render = (context: StateMachineContext) => RenderState;\n\n/**\n * 渲染方法字典\n * {\n *  renderStateName1: render1,\n *  renderStateName1: render2,\n *  ...\n * }\n */\nexport interface RenderDictionary {\n  [index: string]: Render;\n}\n\n\n/**\n * --------------------------------------------------------------------------------\n * Action相关\n * --------------------------------------------------------------------------------\n */\n\n/**\n * 状态机动作\n */\nexport type Action = () => any;\n\n/**\n * 状态机行为约束条件\n */\n// export interface Precondition {\n// }\n\n\n/**\n * --------------------------------------------------------------------------------\n * Effect相关\n * --------------------------------------------------------------------------------\n */\n\n/**\n * 行为效果，表示状态机发起某行为后引起的界面变化效果\n */\nexport interface EffectHandlerOption {\n\n  /**\n   * 效果类型\n   */\n  type: string;\n\n  /**\n   * 效果实现\n   */\n  effect: any;\n}\n\n/**\n * 状态机界面效果\n */\nexport interface Effect {\n\n  /**\n   * 行为约束条件集合\n   */\n  preconditions?: any[];\n\n  /**\n   * 发生某行为后引起的界面变化效果\n   */\n  handlers?: EffectHandlerOption[];\n}\n\n/**\n * 状态机效果字典\n */\nexport interface EffectDictianry {\n    [index: string]: Effect;\n}\n\n\n","import { makePropDecorator } from '../../core/index';\n\n/**\n * 页面状态元数据\n */\nexport interface StatePropMetadata {\n\n  /**\n   * 初始状态\n   */\n  initialState?: boolean;\n}\n\n\n/**\n * 状态元数据名称\n */\nexport const STATE_PROP_META = 'StatePropMeta';\n\n\n/**\n * 页面状态元数据装饰器工厂接口\n */\nexport interface StatePropMetaDecorator {\n  (obj?: StatePropMetadata): any;\n  new(obj?: StatePropMetadata): any;\n}\n\n/**\n * 页面状态元数据装饰器工厂\n */\nexport const StatePropMeta: StatePropMetaDecorator =\n  makePropDecorator(STATE_PROP_META, (obj?: StatePropMetadata) => obj);\n","import { makePropDecorator } from '../../core/index';\nimport { Render } from '../types';\n\n/**\n * 组件状态元数据\n */\nexport interface RenderStatePropMetadata {\n  render: Render;\n}\n\n\n/**\n * 组件状态元数据名称\n */\nexport const RENDER_STATE_PROP_META = 'RenderStatePropMeta';\n\n\n/**\n * 组件状态元数据工厂接口\n */\nexport interface RenderStatePropMetaDecorator {\n  (obj?: RenderStatePropMetadata): any;\n  new(obj?: RenderStatePropMetadata): any;\n}\n\n/**\n * 组件状态元数据工厂\n */\nexport const RenderStatePropMeta: RenderStatePropMetaDecorator =\n  makePropDecorator(RENDER_STATE_PROP_META, (obj: RenderStatePropMetadata) => obj);","import { makePropDecorator } from '../../core/index';\n\n/**\n * 迁移动作\n */\nexport interface ActionMethodMetadata {\n  precondition?: any[];\n  transitTo: string;\n}\n\n\n/**\n * 动作方法元数据名称\n */\nexport const ACTION_METHOD_META = 'ActionMethodMeta';\n\n\n/**\n * 迁移动作元数据装饰工厂接口\n */\nexport interface ActionMethodMetaDecorator {\n  (obj?: ActionMethodMetadata): any;\n  new(obj?: ActionMethodMetadata): any;\n}\n\n/**\n * 迁移动作元数据装饰工厂\n */\nexport const ActionMethodMeta: ActionMethodMetaDecorator =\n  makePropDecorator(ACTION_METHOD_META, (action: ActionMethodMetadata) => action);","import { StateMachine } from './state_machine';\nimport { State } from './types';\nimport { Context } from '../context/context';\nimport { VariableParseService } from '../variable/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { StateMachineWatcher } from './state_machine_watcher';\n\n/**\n * 状态机上下文\n */\nexport class StateMachineContext {\n\n  /**\n   * 当前状态名称\n   */\n  public state: string;\n\n  /**\n   * 父Context\n   */\n  public parent: Context;\n\n  /**\n   * 变量解析器\n   */\n  public parser: any;\n\n  /**\n   * ViewModel上下文\n   */\n  public viewModelContext: ViewModelContext;\n\n  /**\n   * 状态机事件监听\n   */\n  public stateMachineWatcher: StateMachineWatcher;\n\n  /**\n   * 构造函数\n   * @param stateMachine 状态机实例\n   * @param initialState 初始状态\n   */\n  constructor(public stateMachine: StateMachine, initialState: State) {\n    this.state = initialState.name;\n  }\n\n  /**\n   * 初始化\n   */\n  public init(frameContext: ViewModelContext) {\n    this.viewModelContext = frameContext;\n    this.parser = this.viewModelContext.injector.get(VariableParseService);\n    this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;\n  }\n\n  /**\n   * 状态迁移\n   * @param stateName 下一状态的名称\n   */\n  public transitTo(stateName: string) {\n    const nextState = this.stateMachine.states[stateName];\n    if (nextState) {\n      this.state = nextState.name;\n      this.stateMachine.render();\n    }\n  }\n\n  /**\n   * 获取expression对应的UIState值\n   * @param expression UIState表达式\n   */\n  public getUIState(expression: string): any {\n    if (!expression) {\n      return;\n    }\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\n    if (!viewModelContext) {\n      return;\n    }\n\n    this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);\n\n    if (this.parser) {\n      const value = this.parser.parse(expression, viewModelContext);\n      if (value === null) {\n        return null;\n      }\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\n        return null;\n      }\n      return value;\n    } else {\n      throw new Error('未初始化变量解析器。');\n    }\n  }\n\n  /**\n   * 获取数据的值\n   */\n  public getData(expression: string): any {\n    if (!expression) {\n      return;\n    }\n    const viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);\n    if (!viewModelContext) {\n      return;\n    }\n\n    this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);\n\n    if (this.parser) {\n      const value = this.parser.parse(expression, viewModelContext);\n      if (value === null) {\n        return null;\n      }\n      if (typeof value === 'object' && Object.keys(value).length === 0) {\n        return null;\n      }\n      return value;\n    } else {\n      throw new Error('未初始化变量解析器。');\n    }\n  }\n}\n","import { StateMachine } from './state_machine';\nimport { ViewModelContext } from '../view-model/index';\nimport { Change } from '../binding-data/changes';\n\n\n/**\n * 状态机事件，监听uistate的变化和entity的变化\n */\nexport class StateMachineWatcher {\n\n  /**\n   * 当前ViewModel上下文\n   */\n  private viewModelContext: ViewModelContext;\n\n  /**\n   * viewModel=>UIStatePahts字典\n   */\n  private viewModelContextAndUIStatePathsMap: Map<ViewModelContext, Array<string>>;\n\n  /**\n   * viewModel=>DataStatePahts字典\n   */\n  private viewModelContextAndDataStatePathsMap: Map<ViewModelContext, Array<string>>;\n\n  /**\n   * 所有UIStatePath数组\n   */\n  private uiStatePathList: Array<string> = [];\n\n  /**\n   * 所有DataStatePath数组\n   */\n  private dataStatePathList: Array<string> = [];\n\n  constructor(public stateMachine: StateMachine) {\n    this.viewModelContextAndUIStatePathsMap = new Map<ViewModelContext, any>();\n    this.viewModelContextAndDataStatePathsMap = new Map<ViewModelContext, any>();\n  }\n\n  /**\n   * 初始化\n   * @param viewModelContext 当前视图上下文\n   */\n  public init(viewModelContext: ViewModelContext) {\n    this.viewModelContext = viewModelContext;\n  }\n\n  /**\n   * 返回表达式中ViewModelId对应的ViewModelContext\n   */\n  public getViewModelContext(expression: any): ViewModelContext {\n    const viewModelId = this.extractPaths(expression).split('/')[1];\n    return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);\n  }\n\n  /**\n   * 监听UIState变更\n   * @param viewModelContext ViewModel上下文\n   * @param expression UIState表达式\n   */\n  public subscribeUIStateChange(viewModelContext: ViewModelContext, expression: any) {\n    const uiStatePath = this.getStatePath(expression);\n\n    if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {\n      this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);\n      viewModelContext.uiState.changes.subscribe((uiStateChange) => {\n        const uiStatePathList = this.viewModelContextAndUIStatePathsMap.get(viewModelContext);\n        if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {\n          this.stateMachine.render();\n        }\n      });\n    }\n\n    if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {\n      this.uiStatePathList.push(uiStatePath);\n    }\n  }\n\n  /**\n   * 监听实体变更\n   */\n  public subscribeEntityChange(viewModelContext: ViewModelContext, expression: any) {\n\n    if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {\n      this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);\n      viewModelContext.bindingData.changes.subscribe((change: Change) => {\n\n        if (change.type === 'Load' || change.type === 'SelectionChanged') {\n          this.stateMachine.render();\n        }\n\n        const dataPathList = this.viewModelContextAndDataStatePathsMap.get(viewModelContext);\n        if (change.path.join() && this.isAccordingPath(dataPathList, change.path.join('/'))) {\n          this.stateMachine.render();\n        }\n      });\n    }\n\n    if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {\n      this.dataStatePathList.push(expression);\n    }\n  }\n\n  /**\n   * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）\n   * @param expression 变量表达式\n   */\n  private getStatePath(expression: any) {\n    return this.extractPaths(expression).split('/')[2];\n  }\n\n  /**\n   * 判断是否监听范围内的变更路径\n   */\n  public isAccordingPath(dataStatePaths: any, dataStatePath: string) {\n    const targetPath = dataStatePaths.find((item) => {\n      return item.indexOf(dataStatePath) > -1;\n    });\n\n    return targetPath === undefined ? false : true;\n  }\n\n  /**\n   * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除\n   * @param expression 变量表达式\n   */\n  private extractPaths(expression: string): string {\n    let path: string;\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\n    const dataVariables = expression.match(DATA_PATTERN_G);\n    if (uiStateVariables !== null) {\n      const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\n      uiStateVariables.forEach((uiStateVariable: string) => {\n        const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\n        if (pathMatches != null && pathMatches.length === 2) {\n          path = pathMatches[1];\n        }\n      });\n    }\n    if (dataVariables !== null) {\n      const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\n      dataVariables.forEach((dataVariable: string) => {\n        const pathMatches = dataVariable.match(DATA_PATTERN);\n        if (pathMatches != null && pathMatches.length === 2) {\n          path = pathMatches[1];\n        }\n      });\n    }\n    return path;\n  }\n}","import { BehaviorSubject } from 'rxjs';\nimport { MetadataUtil } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\n\nimport { State, initialUIState, StateDictionary, RenderStateDictionary, RenderDictionary } from './types';\nimport {\n  StatePropMetadata, ActionMethodMetadata, RenderStatePropMetadata,\n  STATE_PROP_META, RENDER_STATE_PROP_META, ACTION_METHOD_META\n} from './decorators';\nimport { StateMachineContext } from './state_machine_context';\nimport { StateMachineWatcher } from './state_machine_watcher';\n\n/**\n * 状态机\n */\nexport class StateMachine {\n\n  /**\n   * 初始状态\n   */\n  private initialState: State;\n\n  /**\n   * 状态字典\n   */\n  public states: StateDictionary;\n\n  /**\n   * 渲染状态字典\n   */\n  public renderStates: RenderStateDictionary;\n\n  /**\n   * 渲染器字典\n   */\n  public renders: RenderDictionary;\n\n  /**\n   * 状态机上下文\n   */\n  public context: StateMachineContext;\n\n  /**\n   * 状态变更\n   */\n  public stateChange: BehaviorSubject<string>;\n\n  /**\n   * ViewModel上下文\n   */\n  public viewModelContext: ViewModelContext;\n\n  /**\n   * 状态机事件监听\n   */\n  public stateMachineWatcher: StateMachineWatcher;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.renderStates = {};\n    this.handlePropMetadatas();\n    this.stateChange = new BehaviorSubject<any>(false);\n    this.context = new StateMachineContext(this, this.initialState);\n    this.stateMachineWatcher = new StateMachineWatcher(this);\n  }\n\n  /**\n   * 初始化状态机\n   * @param viewModelContext ViewModel上下文\n   * @summary\n   * 状态机变更，为了在绑定数据之后执行状态机的操作，把render方法延后执行。\n   */\n  public init(viewModelContext: ViewModelContext) {\n    this.viewModelContext = viewModelContext;\n    this.context.init(this.viewModelContext);\n    this.stateMachineWatcher.init(this.viewModelContext);\n    this.render();\n  }\n\n  /**\n   * 批量处理属性元数据\n   */\n  private handlePropMetadatas() {\n    const propsMetadatas = MetadataUtil.getPropsMetadatas(this.constructor);\n\n    // 遍历所有属性装饰器，并调用相应的build方法\n    if (propsMetadatas) {\n      Object.keys(propsMetadatas).forEach((propName: string) => {\n        const propMetadatas = propsMetadatas[propName];\n        propMetadatas.forEach(propMetadata => {\n          this.handlePropMetadata(propName, propMetadata);\n        });\n      });\n    }\n\n    if (!this.initialState) {\n      throw new Error('请在StatePropMeta注解中指定状态机的初始状态。');\n    }\n  }\n  \n  /**\n   * 处理属性元数据\n   */\n  private handlePropMetadata(propName: string, propMetadata: any) {\n    const ngMetadataName =  propMetadata.ngMetadataName;\n    switch(ngMetadataName) {\n      case STATE_PROP_META:\n        this.buildState(propName, propMetadata);\n        break;\n      case RENDER_STATE_PROP_META:\n        this.buildRenderState(propName, propMetadata);\n        break;\n      case ACTION_METHOD_META:\n        this.buildAction(propName, propMetadata);\n        break;\n      default:\n        break;\n    }\n  }\n\n  /**\n   * 包装State\n   * @param stateName 状态名称\n   * @param ngState   状态对象\n   */\n  private buildState(stateName: string, ngState: StatePropMetadata) {\n    this.states = this.states || {};\n    this[stateName] = new State(stateName);\n    this.states[stateName] = this[stateName];\n    if (ngState.initialState) {\n      this.initialState = this[stateName];\n    }\n  }\n\n  /**\n   * 包装RenderState\n   * @param renderStateName 渲染状态名称\n   * @param ngRenderState   渲染状态元数据\n   */\n  private buildRenderState(renderStateName: string, ngRenderState: RenderStatePropMetadata) {\n    this.renderStates = this.renderStates || {};\n    this[renderStateName] = initialUIState;\n    this.renderStates[renderStateName] = this[renderStateName];\n\n    // 将renderState上指定的render加入到renders中\n    this.renders = this.renders || {};\n    this.renders[renderStateName] = ngRenderState.render;\n  }\n\n  /**\n   * 包装Action\n   * @param actionName 动作名称\n   * @param ngAction 动作元数据\n   */\n  private buildAction(actionName: string, ngAction: ActionMethodMetadata) {\n    this[actionName] = () => {\n      const nextStateName = ngAction.transitTo;\n      const nextState: State = this.states[nextStateName];\n      this.context.transitTo(nextState.name);\n      this.render();\n    };\n  }\n\n  /**\n   * 重新计算所有渲染状态的值\n   * @sumamry\n   * 当 state切换的时候，调用遍历所有的render方法，更改renderState\n   */\n  render() {\n    for (const renderStateName in this.renderStates) {\n\n      if (this.renderStates.hasOwnProperty(renderStateName) === false) {\n        continue;\n      }\n\n      // 执行RenderState的render方法，更新renderState\n      const stateRender = this.renders[renderStateName];\n      if (!stateRender) {\n        continue;\n      }\n\n      this.renderStates[renderStateName] = stateRender(this.context);\n      this[renderStateName] = this.renderStates[renderStateName];\n    }\n    this.stateChange.next(this.context.state);\n  }\n}\n","enum BindingType {\n\n  /**\n   * 实体状态\n   */\n  EntityState = 'EntityState',\n\n  /**\n   * UI状态\n   */\n  UIState     = 'UIState'\n}\n\nexport { BindingType };\n","import { DateUtil } from '../utils/index';\n\n/**\n * 绑定值转换器\n */\ninterface BindingValueConverter {\n\n  /**\n   * 将ControlValue转换为StateValue值\n   */\n  convertFrom(controlValue: any): any;\n\n  /**\n   * 将StateValue转换为ControlValue\n   */\n  convertTo(stateValue: any): any;\n}\n\n\n/**\n * 日期字符串转换器\n */\nclass DateStringValueConverter implements BindingValueConverter {\n\n  public convertFrom(dateObj: Date): string {\n    return  DateUtil.formatISO(dateObj);\n  }\n\n  public convertTo(dateString): Date {\n    return DateUtil.parse(dateString);\n  }\n}\n\n\n/**\n * 数组字符串转换器\n */\nclass ArrayStringValueConverter implements BindingValueConverter  {\n\n  public convertFrom(arr: any[]): string {\n    return  arr.join(',');\n  }\n\n  public convertTo(arrString): any[] {\n    return arrString.split(',');\n  }\n\n}\n\nexport { BindingValueConverter, DateStringValueConverter, ArrayStringValueConverter };\n\n\n\n","import { BindingData } from '../binding-data/index';\nimport { UIState } from '../ui-state/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { BindingPathConverter, DateUtil } from '../utils/index';\n\nimport { BindingType } from './types';\nimport { BindingValueConverter } from './binding_value_converter';\n\n/**\n * 绑定值访问器接口\n */\ninterface BindingValueAccessor {\n\n  getValue(): any;\n\n  setValue(controlValue: any): void;\n}\n\n/**\n * Entity值访问器\n */\nclass EntityBindingValueAccessor implements BindingValueAccessor {\n\n  private bindingData: BindingData;\n\n  private bindingPathSegments: string[];\n\n  private valueConverter: BindingValueConverter;\n\n  constructor(bindingData: BindingData, bindingPath: string, valueConverter: BindingValueConverter) {\n    this.bindingData = bindingData;\n    this.bindingPathSegments = this.getBindingPathSegments(bindingPath);\n    this.valueConverter = valueConverter;\n  }\n\n  public getValue(): any {\n    const stateValue = this.bindingData.getValue(this.bindingPathSegments);\n    const controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;\n    return controlValue;\n  }\n\n  public setValue(controlValue: any): void {\n    const oldStateValue = this.bindingData.getValue(this.bindingPathSegments);\n    const stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;\n\n    if (this.isDateConverter(this.valueConverter) === true) {\n      if (DateUtil.isEqual(oldStateValue, stateValue) === true) {\n        return;\n      }\n    }\n\n    this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);\n  }\n\n  private getBindingPathSegments(bindingPath: string) {\n    const parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);\n    bindingPath = bindingPath.replace(/\\./g, '\\/');\n    const bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);\n    return parentPathSegments.concat(bindingPathSegments);\n  }\n\n  /**\n   * 是否是DateConverter\n   */\n  private isDateConverter(converter: BindingValueConverter): boolean {\n    let isDateConverter = false;\n    if (converter && converter.hasOwnProperty('format') === true) {\n      isDateConverter = true;\n    }\n    return isDateConverter;\n  }\n}\n\n/**\n * UIState值访问器\n */\nclass UIStateBindingValueAccessor implements BindingValueAccessor {\n\n  private uiState: UIState;\n\n  private bindingPathSegments: string[];\n\n\n  constructor(uiState: UIState, bindingPath: string, valueConverter: BindingValueConverter) {\n    this.uiState = uiState;\n    this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);\n  }\n\n  public getValue(): any {\n    let stateValue;\n    let obj = this.uiState;\n    this.bindingPathSegments.forEach(item => {\n      stateValue = obj[item];\n      obj = stateValue\n    })\n    return stateValue;\n  }\n\n  public setValue(controlValue: any): void {\n    const length = this.bindingPathSegments.length;\n    if (length === 1) {\n      this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);\n    } else {\n      let obj;\n      for(let i = length-1 ; i > 0 ; i--){\n        obj = {[this.bindingPathSegments[i]]: controlValue};\n        controlValue = obj;\n      }\n      this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);\n    }\n  }\n\n  // UISTATE获取路径\n  private getUiStateBindingPath(bindingPath: string) {\n    const index = bindingPath.search('/');\n    if (index !== -1) {\n      return bindingPath.split('/')\n    } else {\n      return [bindingPath]\n    }\n  }\n}\n\n/**\n * 绑定值访问器工厂\n */\nclass BindingValueAccessorFactory {\n\n  static create(bindingType: BindingType, bindingBindingPath: string, bindingValueConverter, viewModelContext: ViewModelContext) {\n    switch (bindingType) {\n      case BindingType.EntityState:\n        const bindingData = viewModelContext.bindingData;\n        return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);\n      case BindingType.UIState:\n        const uiState = viewModelContext.uiState;\n        return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);\n      default:\n        throw new Error('Not Supported');\n    }\n  }\n}\n\nexport { BindingValueAccessor, EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };\n","\nimport { makePropDecorator } from '../core/index';\nimport { BindingType } from './types';\nimport { BindingValueConverter } from './binding_value_converter';\nimport { ValidationRule } from '../validator';\n\n/**\n * FormControl元数据名称\n */\nexport const FORM_CONTROL_PROP_META = 'FormControlPropMeta';\n\n\n/**\n * FormControl元数据\n */\nexport interface FormControlMetadata {\n\n  /**\n   * 控件名称\n   */\n  name?: string;\n\n  /**\n   * 绑定字段路径\n   */\n  bindingType?: BindingType;\n\n  /**\n   * 绑定路径\n   */\n  bindingPath?: string;\n\n  /**\n   * 值转换器\n   */\n  valueConverter?: BindingValueConverter;\n\n    /**\n   * 值改变前监听器\n   */\n  valueChanging?: string;\n  /**\n   * 值改变后监听器\n   */\n  valueChanged?: string;\n  /**\n    * 验证规则\n    */\n  validRules?:  ValidationRule[] ;\n}\n\n/**\n * 表单控件装饰器\n */\nexport interface FormControlPropMetaDecorator {\n  (obj?: FormControlMetadata): any;\n  new(obj?: FormControlMetadata): any;\n}\n\n/**\n * FormControl装饰器工厂\n */\nexport const FormControlPropMeta: FormControlPropMetaDecorator =\n  makePropDecorator(FORM_CONTROL_PROP_META, (obj: FormControlMetadata) => obj);\n","import { from, Observable, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\nimport { ValidationRule } from './types';\nimport { DateUtil } from '../utils/date_util';\nimport { isObservable } from '../utils/is-observable';\nimport { VariableParseService } from '../variable/index';\n\n/**\n * 验证器工厂\n */\nclass ValidatorFactory {\n    /**\n     * 创建适配器\n     */\n    static create(validRules: ValidationRule | ValidationRule[]): any {\n        let validatorFn = [];\n        if (Array.isArray(validRules) && validRules.length > 1) {\n            validRules.forEach((validRule: ValidationRule) => {\n                validatorFn.push(this.initValidRuleFn(validRule))\n            })\n        } else if (Array.isArray(validRules) && validRules.length === 1) {\n            validatorFn.push(this.initValidRuleFn(validRules[0]))\n        } else {\n            validatorFn.push(this.initValidRuleFn(validRules as ValidationRule))\n        }\n        return validatorFn;\n    }\n\n    private static initValidRuleFn(validRule: ValidationRule): any {\n        const { type, constraints, message } = validRule;\n        switch (type) {\n            case 'required':\n                return (v, context) => {\n                    if (constraints[0] !== true) {\n                        const parseService = context.injector.get(VariableParseService);\n                        const parsedArgs = parseService.parse(constraints[0], context);\n                        if (parsedArgs === true) {\n                            if (null === v || undefined === v || '' === v) {\n                                return { type, passing: false, message: message || '必填' }\n                            } else {\n                                return { type, passing: true, message: '' }\n                            }\n                        }\n                    }\n\n                    if (constraints[0] === true) {\n                        if (null === v || undefined === v || '' === v) {\n                            return { type, passing: false, message: message || '必填' }\n                        } else {\n                            return { type, passing: true, message: '' }\n                        }\n                    }\n\n                    return { type, passing: true, message: '' }\n                }\n            case 'NumberMaxValue':\n            case 'numberMaxValue':\n                return (v) => {\n                    if (typeof v !== 'number') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0] || 0 == constraints[0]) {\n                        if (v <= parseFloat(constraints[0])) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入值不能大于${constraints[0]}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'NumberMinValue':\n            case 'numberMinValue':\n                return (v) => {\n                    if (typeof v !== 'number') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0] || 0 == constraints[0]) {\n                        if (v >= parseFloat(constraints[0])) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入值不能小于${constraints[0]}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'DateMaxValue':\n            case 'dateMaxValue':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0]) {\n                        let condition = constraints[0];\n                        if (condition.length == 21) {\n                            condition = condition.slice(1, 20)\n                        }\n                        if (DateUtil.isBefore(v, condition) || DateUtil.isSame(v, condition)) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入日期不能大于${condition}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'DateMinValue':\n            case 'dateMinValue':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0]) {\n                        let condition = constraints[0];\n                        if (condition.length == 21) {\n                            condition = condition.slice(1, 20)\n                        }\n                        if (DateUtil.isAfter(v, condition) || DateUtil.isSame(v, condition)) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入日期不能小于${condition}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'StringMaxLength':\n            case 'stringMaxLength':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0]) {\n                        if (v.length <= constraints[0]) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入值长度不能大于${constraints[0]}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'StringMinLength':\n            case 'stringMinLength':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    if (constraints[0]) {\n                        if (v.length >= constraints[0]) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message: message || `输入值长度不能小于${constraints[0]}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'regex':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    let constraintsTemp = [];\n                    if (typeof constraints[0] === 'string') {\n                        constraintsTemp = constraints[0].split(',');\n                    }\n                    for (let i = 0; i < constraintsTemp.length; i++) {\n                        if (constraintsTemp[i] === '') {\n                            return\n                        }\n                        const re = new RegExp(constraintsTemp[i]);\n                        if (re.test(v)) {\n                            return { passing: false, message: message || `存在不可输入项${constraintsTemp[i]}` }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'regexp':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: true, message: '' }\n                    }\n                    const re = new RegExp(constraints[0]);\n                    if (!re.test(v)) {\n                        return { passing: false, message: message || `请输入正确格式` }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'mobile':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: false, message: message || `请输入正确的手机号格式` }\n                    }\n                    const regexStr = constraints[0] === true ? /^1[0-9]{10}$/ : constraints[0];\n                    const re = new RegExp(regexStr);\n                    if (!re.test(v)) {\n                        return { passing: false, message: message || `请输入正确的手机号格式` }\n                    } else {\n                        return { passing: true, message: '' }\n                    }\n                }\n            case 'email':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: false, message: message || `请输入正确的邮箱格式` }\n                    }\n                    const regexStr = constraints[0] === true ? /^[A-Za-z0-9\\u4e00-\\u9fa5]+@[a-zA-Z0-9_-]+(\\.[a-zA-Z0-9_-]+)+$/ : constraints[0];\n                    const re = new RegExp(regexStr);\n                    if (!re.test(v)) {\n                        return { passing: false, message: message || `请输入正确的邮箱格式` }\n                    } else {\n                        return { passing: true, message: '' }\n                    }\n                }\n            case 'idCard':\n                return (v) => {\n                    if (v === null || v === undefined || v === '') {\n                        return { passing: false, message: message || `请输入正确的身份证格式` }\n                    }\n                    const regexStr = constraints[0] === true ? /^[1-9]\\d{5}(18|19|([23]\\d))\\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/ : constraints[0];\n                    const re = new RegExp(regexStr);\n                    if (!re.test(v)) {\n                        return { passing: false, message: message || `请输入正确的身份证格式` }\n                    } else {\n                        return { passing: true, message: '' }\n                    }\n                }\n            case 'customFunction':\n                return (v, context) => {\n                    if (typeof constraints[0] === 'function') {\n                        const message = constraints[0](v, context);\n                        if (!message) {\n                            return { passing: true, message: '' }\n                        } else {\n                            return { passing: false, message }\n                        }\n                    }\n                    return { passing: true, message: '' }\n                }\n            case 'expression':\n                return (value, viewModelContext, options = {}) => {\n                    const result = viewModelContext.expressionManager.validate(constraints[0], options);\n                    if (result === false) {\n                        return { passing: false, message }\n                    } else {\n                        return { passing: true, message: '' }\n                    }\n                }\n            case 'requiredExpression':\n                return (v, viewModelContext, options = {}) => {\n                    const result = viewModelContext.expressionManager.validate(constraints[0], options);\n                    if (result === true) {\n                        if (null === v || undefined === v || '' === v) {\n                            return { type, passing: false, message: message || '必填' }\n                        } else {\n                            return { type, passing: true, message: '' }\n                        }\n                    } else {\n                        return { passing: true, message: '' }\n                    }\n                }\n            case 'asyncCustomFunction':\n                return (v, context) => {\n                    if (typeof constraints[0] === 'function') {\n                        const $message = from(constraints[0](v, context));\n                        return $message.pipe(\n                            switchMap(\n                                (message) => {\n                                    if (!message) {\n                                        return of({ passing: true, message: '' })\n                                    } else {\n                                        return of({ passing: false, message })\n                                    }\n                                }\n                            )\n                        )\n\n                    }\n                    return { passing: true, message: '' }\n                }\n            default:\n                return () => {\n                    return { passing: true, message: '' }\n                }\n        }\n\n    }\n\n    /**\n     * 支持异步自定义函数\n     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果\n     * 遍历完成没有错误则返回校验通过结果\n     * @param validatorFn 校验方法\n     * @param value 当前值\n     */\n    static executeValidator(validatorFn, value, context?, options?): Observable<any> {\n        let validationResult = of({ passing: true, message: '' });\n        for (let i = 0; i < validatorFn.length; i++) {\n            let result = validatorFn[i](value, context, options);\n            if (isObservable(result)) {\n                validationResult = result;\n                break;\n            }\n            if (result['passing'] === false) {\n                return of(result);\n            }\n        }\n        return validationResult;\n    }\n\n    /**\n     * 不支持异步自定义函数\n     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果\n     * 遍历完成没有错误则返回校验通过结果\n     * @param validatorFn 校验方法\n     * @param value 当前值\n     */\n    static noSupportAsynExecuteValidator(validatorFn, value, context?, options?) {\n        for (let i = 0; i < validatorFn.length; i++) {\n            let validationResult = validatorFn[i](value, context, options);\n            if (isObservable(validationResult)) {\n                break;\n            }\n            if (validationResult['passing'] === false) {\n                return validationResult;\n            }\n        }\n        return { passing: true, message: '' };\n    }\n\n}\n\nexport { ValidatorFactory };","import { ViewModelContext } from '../view-model/index';\nimport { BindingType } from './types';\nimport { BindingValueConverter } from './binding_value_converter';\nimport { BindingValueAccessor, BindingValueAccessorFactory } from './binding_value_accessor';\nimport { ValidationRule, ValidatorFactory } from '../validator/index'\n\n/**\n * 表单控件配置\n */\ninterface FormControlConfig {\n  name: string;\n  bindingType: BindingType;\n  bindingPath: string;\n  valueConverter?: BindingValueConverter;\n  valueChanging?: string;\n  valueChanged?: string;\n  validRules?: ValidationRule[];\n}\n\n/**\n * FormControl定义\n */\nclass FormControl {\n\n\n  private valueAccessor: BindingValueAccessor;\n\n  private validatorFn = [];\n\n  validationResult: any;\n\n  required = false;\n\n  private requiredExpressionFlag = false;\n  private validateExpressionFlag = false;\n\n  readonly = false;\n\n  visible = true;\n\n  // 初始验证规则\n  private validRules = [];\n\n  // 记忆验证表达式的规则\n  private validRules_validates = [];\n\n  constructor(config: FormControlConfig, viewModelContext: ViewModelContext) {\n    this.valueAccessor = BindingValueAccessorFactory.create(\n      config.bindingType,\n      config.bindingPath,\n      config.valueConverter,\n      viewModelContext\n    );\n    this.validRules = [];\n    if (config.validRules) {\n      this.validRules = config.validRules;\n      this.setValidatorFn(config.validRules)\n    }\n  }\n\n  public get value() {\n    return this.valueAccessor.getValue();\n  }\n\n  public set value(val) {\n    this.valueAccessor.setValue(val);\n  }\n\n  public getValidRules() {\n    return this.validRules;\n  }\n\n  public setValidatorFn(validRules) {\n    this.validatorFn = ValidatorFactory.create(validRules)\n  }\n\n  public pushValidatorFnforValidate(validRules, flag) {\n    if (flag && this.validateExpressionFlag) {\n      return\n    }\n    this.validateExpressionFlag = flag;\n    this.validRules_validates = validRules;\n    this.validatorFn = this.validatorFn.concat(ValidatorFactory.create(validRules));\n  }\n\n  public pushValidatorFnforRequired(validRules, flag) {\n    if (flag && this.requiredExpressionFlag) {\n      return\n    }\n    this.requiredExpressionFlag = flag;\n    this.validatorFn = this.validatorFn.concat(ValidatorFactory.create(validRules));\n  }\n\n  public resetValidatorFnforRequired() {\n    this.requiredExpressionFlag = false;\n    this.validatorFn = ValidatorFactory.create(this.validRules.concat(this.validRules_validates))\n  }\n\n  public getValidatorFn() {\n    return this.validatorFn;\n  }\n\n}\n\nexport { FormControlConfig, FormControl };\n","import { MetadataUtil } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { FormControlConfig, FormControl } from './form_control';\nimport { FormControlMetadata, FORM_CONTROL_PROP_META } from './decorators';\nimport { of, Subject } from 'rxjs';\nimport { ValidatorFactory } from '../validator'\nimport { map, tap } from 'rxjs/operators';\n\n/**\n * Form抽象类\n */\nabstract class Form {\n\n  /**\n   * 表单控件配置\n   */\n  private formControlConfigs: FormControlConfig[];\n\n  /**\n   * ViewModel上下文\n   */\n  private viewModelContext: ViewModelContext;\n\n  private validateformControls: string[];\n\n  private validateformControlPathMap: Map<string, string>;\n\n  public changes: Subject<any>;\n\n  /**\n   * 构造函数\n   */\n  constructor(viewModelContext: ViewModelContext) {\n    this.viewModelContext = viewModelContext;\n    this.formControlConfigs = [];\n    this.validateformControls = [];\n    this.validateformControlPathMap = new Map;\n    this.changes = new Subject();\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {\n    this.collectMetadatas();\n    this.createFormControls();\n  }\n\n  /**\n   * 使用不包含绝对路径的/或者/子表/的路径信息获取对应的formControlConfig的name属性与bindingPath并且返回该路径的formControl\n   * @param path 路径信息 \n   * @returns  \n   */\n  getFormValueByBindPath(path) {\n    let formControl = {\n      form_name: {},\n      name: '',\n      bindingPath: ''\n    };\n    path = path.replace(/\\//g, '.')\n    if (this.formControlConfigs.length === 0) return formControl;\n    this.formControlConfigs.forEach((formControlConfig: FormControlConfig) => {\n      if (formControlConfig.bindingPath === path) {\n        formControl.form_name = this[formControlConfig.name];\n        formControl.name = formControlConfig.name;\n        formControl.bindingPath = formControlConfig.bindingPath;\n      }\n    })\n    return formControl;\n  }\n  /**\n   * \n   * @returns 获取当前表单上的存在校验字段的集合\n   */\n  getValidateformControls() {\n    return this.validateformControls;\n  }\n\n  setValidateformControls(name) {\n\n    if (this.validateformControls && this.validateformControls.length === 0) {\n      this.validateformControls.push(name)\n    }\n\n    if (this.validateformControls && this.validateformControls.length >= 1) {\n      const index = this.validateformControls.findIndex(item => item == name);\n      if (index === -1) {\n        this.validateformControls.push(name)\n      }\n    }\n\n    if (!Array.isArray(this.validateformControls)) {\n      this.validateformControls = [name]\n    }\n  }\n\n  getValidateformControlPathMap() {\n    return this.validateformControlPathMap;\n  }\n\n  setValidateformControlPathMap(name, value) {\n    if (!this.validateformControlPathMap.has(name)) {\n      this.validateformControlPathMap.set(name, value)\n    }\n  }\n\n  /**\n   * 使用formControlConfig的bindingPath路径信息与对应formControlConfig的name信息储存起来作为验证信息在form上的记录\n   * @param path formControlConfig的bindingPath路径信息\n   * @param name 对应formContro的name信息\n   */\n  addValidate(path, name) {\n    let bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\\//g, '.');\n    if (bindingPath) { bindingPath = bindingPath + '.' };\n    this.setValidateformControlPathMap(bindingPath + path, name);\n    this.setValidateformControls(name)\n  }\n\n\n  /**\n   * 全部校验 \n   *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回\n   */\n  validateFields() {\n    let validationResult = [];\n    if (this.validateformControls.length === 0) { return validationResult; }\n    this.validateformControls.forEach((formControl) => {\n      const result$ = ValidatorFactory.executeValidator(this[formControl]['validatorFn'], this[formControl]['value'], this.viewModelContext).pipe(\n        tap(\n          (message) => {\n            this[formControl]['validationResult'] = message;\n            !message['passing'] && this.changes.next({ type: 'validateFieldsFinished' })\n          }\n        )\n      )\n      validationResult.push(result$)\n    });\n    return validationResult;\n  }\n\n  /**\n   * 不支持自定义异步全部校验 \n   *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回\n   */\n  noSupportAsynValidateFields() {\n    let validationResult = [];\n    if (this.validateformControls.length === 0) { return validationResult; }\n    this.validateformControls.forEach((formControl) => {\n      if (!this[formControl]['validationResult']) {\n        this[formControl]['validationResult'] = ValidatorFactory.noSupportAsynExecuteValidator(this[formControl]['validatorFn'], this[formControl]['value'], this.viewModelContext);\n      }\n      !this[formControl]['validationResult'].passing && validationResult.push(this[formControl])\n    });\n    this.changes.next({ type: 'validateFieldsFinished' })\n    return validationResult;\n  }\n\n  /**\n   * 获取某一个得校验错误信息\n   * @param name 属性名称\n   */\n  getFieldError(name: string) {\n    if (this.validateformControls.length === 0) {\n      return {}\n    }\n    const index = this.validateformControls.findIndex((item) => {\n      return item === name\n    });\n    if (index === -1) {\n      return {}\n    } else {\n      const result$ = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value'], this.viewModelContext).pipe(\n        tap(\n          (message) => {\n            this[name]['validationResult'] = message;\n            !message['passing'] && this.changes.next({ type: 'validateFieldsFinished' })\n          }\n        )\n      )\n      return result$;\n    }\n  }\n\n  /**\n * 根据form元数据中的path获取某一个得校验错误信息\n * @param path 属性名称数组\n */\n  getFieldErrorByPath(path: string[]) {\n    if (this.validateformControls.length === 0) {\n      return {}\n    }\n    let pathName = path[0]\n    if (path && path.length >= 2) {\n      pathName = path.join('.');\n    }\n    const index = this.validateformControlPathMap.has(pathName);\n    if (!index) {\n      return {}\n    } else {\n      ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value'], this.viewModelContext).subscribe(\n        (message) => {\n          this[this.validateformControlPathMap.get(pathName)]['validationResult'] = message;\n          this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });\n        }\n      )\n      return this[this.validateformControlPathMap.get(pathName)]['validationResult'];\n    }\n  }\n\n  /**\n   * 清除一组字段验证状态\n   * @param fields 字段的数组\n   */\n  resetFieldsValidate(fields?: string[]) {\n    if (this.validateformControls.length === 0) {\n      return true;\n    } else {\n      if (fields && fields.length > 0) {\n        const sb = new Set(fields);\n        // 交集\n        const intersect = this.validateformControls.filter(x => sb.has(x));\n        // 遍历清空所有校验结果数据\n        intersect.forEach(item => {\n          this[item]['validationResult'] = undefined;\n        })\n      } else {\n        // 没传数据全部清除\n        this.validateformControls.forEach(item => {\n          this[item]['validationResult'] = undefined;\n        })\n      }\n      this.changes.next({ type: 'validateFieldsFinished' })\n    }\n  }\n\n  /**\n   * 创建FormControls\n   */\n  private createFormControls() {\n    this.formControlConfigs.forEach((formControlConfig: FormControlConfig) => {\n      const name = formControlConfig.name;\n      const formControl = new FormControl(formControlConfig, this.viewModelContext);\n      this[name] = formControl;\n    });\n  }\n\n  /**\n   * 收集元数据\n   */\n  private collectMetadatas() {\n    const formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);\n    let bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\\//g, '.');\n    const validationManager = this.viewModelContext.appContext['validationManager'];\n    if (bindingPath) { bindingPath = bindingPath + '.' };\n    Object.keys(formControlMetadatas).forEach((name: string) => {\n      const formControlMetadata = formControlMetadatas[name] as FormControlMetadata;\n      let validRules = null;\n      if (formControlMetadata.validRules) {\n        this.validateformControls.push(name);\n        this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);\n        validRules = formControlMetadata.validRules;\n      }\n      const key = ('/'+bindingPath+formControlMetadata.bindingPath).replace(/\\./g, '/')\n      if(validationManager[key]){\n        if(!validRules){\n          this.validateformControls.push(name);\n          this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);\n          validRules = Object.values(validationManager[key]);\n        }else{\n          validRules = validRules.concat(Object.values(validationManager[key]))\n        }\n      }\n      const formControlConfig: FormControlConfig = {\n        name: name,\n        bindingType: formControlMetadata.bindingType,\n        bindingPath: formControlMetadata.bindingPath,\n        valueConverter: formControlMetadata.valueConverter,\n        valueChanging: formControlMetadata.valueChanging,\n        valueChanged: formControlMetadata.valueChanged,\n        validRules: validRules\n      };\n      this.formControlConfigs.push(formControlConfig);\n    });\n  }\n\n  public getEntityValueChangingListeners(): { [property: string]: string } {\n    const listeners = {};\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\n      if (formControl.valueChanging) {\n        listeners[formControl.bindingPath] = formControl.valueChanging;\n      }\n    });\n    return listeners;\n  }\n\n  public getEntityValueChangedListeners(): { [property: string]: string } {\n    const listeners = {};\n    this.formControlConfigs.forEach((formControl: FormControlConfig) => {\n      if (formControl.valueChanged) {\n        listeners[formControl.bindingPath] = formControl.valueChanged;\n      }\n    });\n    return listeners;\n  }\n}\n\nexport { Form };\n","import { makePropDecorator } from '../core/index';\nimport { CommandParams, ParamDescriptions,  } from '../command/index';\n\n/**\n * 快捷键\n */\nexport interface Keybinding {\n  readonly ctrlKey: boolean;\n  readonly shiftKey: boolean;\n  readonly altKey: boolean;\n  readonly metaKey?: boolean;\n  readonly key: string;\n}\n\n/**\n * 命令描述\n */\nexport interface CommandMethodMetadata {\n\n  /**\n   * 命令名称\n   */\n  name: string;\n\n  /**\n   * 命令参数\n   */\n  params?: CommandParams;\n\n  /**\n   * 框架id\n   * 通过frameId确定命令执行的上下文，不指定则默认为当前Frame。\n   */\n  frameId?: string;\n\n  /**\n   * 参数描述，目前描述类型，后续可兼容精度等其他信息。\n   */\n  paramDescriptions?: ParamDescriptions;\n\n  /**\n   * 快捷键绑定\n   */\n  keyBinding?: Keybinding;\n}\n\n\n/**\n * 命令装饰器名称\n */\nexport const COMMAND_METHOD_META = 'CommandMethodMeta';\n\n/**\n * 命令装饰接口\n */\nexport interface CommandMethodMetaDecorator {\n  (ngCommand?: CommandMethodMetadata): any;\n  new(ngCommand?: CommandMethodMetadata): any;\n}\n\n/**\n * 命令装饰器工厂\n */\nexport const CommandMethodMeta: CommandMethodMetaDecorator =\n  makePropDecorator(COMMAND_METHOD_META, (obj: CommandMethodMetadata) => obj);\n","import { InjectionToken } from '../../core/index';\n\nexport interface IResolver {\n  resolve(expr: string): string[];\n}\nexport const RESOLVER_TOKEN = new InjectionToken('@farris_resolver_token');\nexport const ENTITY_TEMPLATE = 'ENTITY~';\nexport const STATE_TEMPLATE = 'STATE~';\nexport const GROUP_FUNCTIONS = ['SumByProp', 'CountByProp', 'AvgByProp', 'MaxByProp', 'MinByProp', 'IsExistRecord', 'ListContains', 'ListGreaterThan', 'ListLessThan', 'ListStartWith', 'ListEndWith'];","import { IResolver, RESOLVER_TOKEN } from './types';\nimport { ViewModelContext } from '../../view-model/index';\n\nexport class ResolverRegistry{\n\n  public resolvers: Array<IResolver>\n\n  constructor(private viewModelContext: ViewModelContext){\n    this.resolvers = this.viewModelContext.injector.get(RESOLVER_TOKEN, []) as Array<IResolver>;\n  }\n}","import { DataTypeInfo } from '../../entity/index';\nimport { Repository } from '../../repository/index';\nimport { ExpressionUtil } from '../utils/expression_util';\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS, IResolver } from './types';\nimport { ViewModelContext } from '../../view-model/index';\n\n\nexport class EntityDependencyResolver implements IResolver {\n\n  private repository: Repository<any>;\n\n  private entityTypeInfo: DataTypeInfo;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.repository = this.viewModelContext.repository;\n    this.entityTypeInfo = this.repository.entityTypeInfo;\n  }\n\n  /**\n   * 解析用户表达式中的实体依赖\n   * @param expr 用户配置的完整表达式\n   * @returns \n   */\n  public resolve(expr: string): string[] {\n    const groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);\n    const entityDependencies = this.getEntityDependency(expr);\n    // 去除错误的到子表的依赖\n    if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {\n      groupFunctionDependencies.forEach((dep: string) => {\n        const index = entityDependencies.findIndex(item => dep.startsWith(item));\n        if (index !== -1) {\n          entityDependencies.splice(index, 1);\n        }\n      });\n    }\n    // 去重\n    const merged = [...groupFunctionDependencies, ...entityDependencies];\n    const deps = [...new Set(merged)];\n    return deps;\n  }\n  /**\n   * 获取合法的实体属性表达式\n   * @param entityPropertyExpression 实体属性表达式\n   * @returns \n   */\n  private getValidEntityPropertyExpression(entityPropertyExpression: string): string[] {\n    const propPaths = entityPropertyExpression.split('.');\n    let propInfo = null;\n    try {\n      propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);\n    } catch (e) { }\n    if (!propInfo) {\n      if (propPaths.length > 1) {\n        propPaths.pop();\n        return this.getValidEntityPropertyExpression(propPaths.join('.'));\n      } else {\n        return null;\n      }\n    } else {\n      return entityPropertyExpression.split('.');\n    }\n  }\n  /**\n   * 获取所有实体依赖\n   * @param expr 表达式字符串\n   * @returns \n   */\n  private getEntityDependency(expr: string): string[] {\n    const deps = [];\n    if (this.entityTypeInfo) {\n      // 使用正则匹配出所有实体\n      const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${this.entityTypeInfo.entityInfo.nodeCode}|${this.entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\n        entityPropertyExpressions.forEach((item: string) => {\n          if (item.indexOf('.') === -1) {\n            console.warn(`无效的实体表达式:${item}`);\n            return;\n          }\n          // 去空格\n          item = item.trim().replace(/\\\"/g, '');\n          const paths = ExpressionUtil.convertToNodeCode(item, this.repository.entityTypeInfo);\n          item = paths.join('.');\n          // 截去主实体及点\n          item = item.substr(item.indexOf('.') + 1);\n          const dep = this.getValidEntityPropertyExpression(item);\n          if (dep && Array.isArray(dep) && dep.length > 0) {\n            // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据\n            dep.splice(0, 0, ENTITY_TEMPLATE);\n            deps.push(dep.join('/'));\n          }\n        });\n      }\n    } else {\n      console.warn(`获取实体类型信息失败，请重新编译改表单。`);\n    }\n    return deps;\n  }\n\n}","import { ViewModelContext } from '../../view-model/index';\nimport { IResolver } from \"./types\";\n\nconst CONTEXT_FUNCTIONS = ['GetContextParameter', 'GetSessionValue'];\n\nexport class StateDependencyResolver implements IResolver {\n\n  constructor(private viewModelContext: ViewModelContext) {\n  }\n\n  public resolve(expr: string): string[] {\n    const deps = [];\n    const regex = new RegExp(`DefaultFunction\\\\.(${CONTEXT_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, 'g');\n    const contextFunctions: RegExpMatchArray = expr.match(regex);\n    if (contextFunctions && contextFunctions.length > 0) {\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\n      contextFunctions.forEach((groupFunction: string) => {\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\n        if (argumentMatchResult.length === 2) {\n          const argument = argumentMatchResult[1].trim().replace(/\\\"/g,'');\n          const dep = ['STATE~'];\n          dep.push(argument);\n          deps.push(dep.join('/'));\n        }\n      });\n    }\n    return deps;\n  }\n\n}","import { IResolver } from \"./types\";\n\n/**\n * 用户自定义参数解析器\n */\nexport class CommentDependencyResolver implements IResolver {\n\n  public resolve(expr: string): string[] {\n    const dependencies = [];\n    if (!expr || expr.length < 1) {\n      return dependencies;\n    }\n    const defineRegex = /\\/\\*\\*\\s*__define__\\((.*)\\)\\s*\\*\\//;\n    const defineMatchArray: RegExpMatchArray = expr.match(defineRegex);\n    if (defineMatchArray && defineMatchArray.length === 2) {\n      const defineString: string = defineMatchArray[1].trim();\n      let defineObject = null;\n      try {\n        defineObject = JSON.parse(defineString);\n      } catch (e) { console.warn(`自定义依赖解析失败：${defineString}`); }\n      if (defineObject && defineObject.hasOwnProperty('deps') && Array.isArray(defineObject['deps'])) {\n        dependencies.push(...defineObject['deps']);\n      }\n    }\n    return dependencies;\n  }\n\n}","import { CommentDependencyResolver } from \"./comment_dependency_resolver\";\nimport { ResolverRegistry } from \"./resolver_registry\";\nimport { IResolver } from \"./types\";\nimport { ViewModelContext } from '../../view-model/index';\n\nexport class ResolveService {\n\n  private resolverRegistry: ResolverRegistry;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.resolverRegistry = this.viewModelContext.injector.get<ResolverRegistry>(ResolverRegistry);\n  }\n\n  public resolve(expression: string) {\n    const deps: string[] = [];\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {\n      return;\n    }\n    // 优先使用用户自定义的依赖\n    const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver: IResolver) => resolver instanceof CommentDependencyResolver);\n    if (commentDependencyResolver) {\n      const commentDependencies = commentDependencyResolver.resolve(expression);\n      if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {\n        deps.push(...commentDependencies);\n      }\n    }\n    // 如果用户已经自定义了依赖，则不再计算\n    if (deps && deps.length > 0) {\n      return;\n    }\n    this.resolverRegistry.resolvers.forEach((resolver: IResolver) => {\n      // 再解析一次也可以，返回的依然是空数组\n      if (resolver instanceof CommentDependencyResolver) {\n        return;\n      }\n      const dependency = resolver.resolve(expression);\n      if (dependency && dependency.length > 0) {\n        deps.push(...dependency);\n      }\n    });\n    // 去重\n    return [...new Set(deps)];\n  }\n\n}","import { BindingData, BindingList } from \"../../binding-data/index\";\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../../entity/index\";\nimport { ENTITY_TEMPLATE, GROUP_FUNCTIONS } from \"../resolver/index\";\n\nexport class ExpressionUtil {\n  public static getGroupFunctionDependency(expr: string, entityTypeInfo: DataTypeInfo): string[] {\n    const deps = [];\n    // 获取聚合函数依赖项\n    const groupFunctionRegex = new RegExp(`DefaultFunction\\\\.(${GROUP_FUNCTIONS.join('|')})\\\\s*\\\\([^\\\\r\\\\n\\\\)]*\\\\)`, \"g\");\n    const groupFunctions: RegExpMatchArray = expr.match(groupFunctionRegex);\n    if (groupFunctions && groupFunctions.length > 0) {\n      // todo: 使用正则匹配时可能会因为参数中有逗号导致问题，后续使用ast解析\n      const argumentsRegex = /\\(([^\\r\\n\\)]*)\\)/;\n      groupFunctions.forEach((groupFunction: string) => {\n        const argumentMatchResult = groupFunction.match(argumentsRegex);\n        if (argumentMatchResult.length === 2) {\n          const argument = argumentMatchResult[1];\n          const args = argument.split(',').map(p => p.replace(/\\\"/g, ''));\n          if (args && args.length === 2) {\n            let item: any = args.join('.');\n            item = this.convertToNodeCode(item, entityTypeInfo).join('.');\n            item = item.substr(item.indexOf('.') + 1);\n            const dep = item.split('.');\n            dep.splice(0, 0, ENTITY_TEMPLATE);\n            deps.push(dep.join('/'));\n          } else {\n            throw new Error(`无法解析参数： ${JSON.stringify(argument)}`);\n          }\n        }\n      });\n    }\n    return deps;\n  }\n  /**\n   * 将voCode转换为前端nodeCode\n   * @param entityExpression like Entity.Child.p1\n   * @returns \n   */\n  public static convertToNodeCode(entityExpression: string, entityTypeInfo: DataTypeInfo): string[] {\n    // UserEntity.storys.p1\n    const nodeCodes = [];\n    if (entityTypeInfo && entityExpression.includes('.')) {\n      const entityExpressions = entityExpression.split('.') || [];\n      let dataTypeInfo = entityTypeInfo;\n      for (let index = 0; index < entityExpressions.length; index++) {\n        const prop = entityExpressions[index];\n        if (dataTypeInfo && dataTypeInfo.entityInfo && dataTypeInfo.entityInfo.nodeCode === prop || dataTypeInfo.entityInfo.originalCode === prop) {\n          // 第一个是主表code，不能转nodeCode\n          if (index === 0) {\n            nodeCodes.push(dataTypeInfo.entityInfo.originalCode);\n          } else {\n            nodeCodes.push(dataTypeInfo.entityInfo.nodeCode);\n          }\n\n          // 下一级可能为子表、对象或属性\n          const nextNodeCode = entityExpressions[index + 1];\n          if (!nextNodeCode) {\n            break;\n          }\n          const nextNodeCodePropInfo = dataTypeInfo.getPropInfoByName(nextNodeCode);\n          if (!nextNodeCodePropInfo) {\n            break;\n          }\n          // 下一级为子表或对象\n          if (nextNodeCodePropInfo.typeInfo) {\n            dataTypeInfo = nextNodeCodePropInfo.typeInfo;\n          }\n        } else if (dataTypeInfo && dataTypeInfo.getPropInfoByName(prop)) {\n          const dataPropInfo = dataTypeInfo.getPropInfoByName(prop);\n          nodeCodes.push(dataPropInfo.name);\n        } else {\n          //throw new Error(`错误的属性参数 ${entityExpression}`);\n          break;\n        }\n      }\n    }\n    return nodeCodes;\n  }\n  /**\n   * 找到元数据中所有实体路径\n   * @param dataTypeInfo \n   * @param results \n   * @param paths \n   */\n  public static getChildrenEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\n    if (list && list.length > 0) {\n      list.forEach((dataPropInfo: DataPropInfo) => {\n        if (paths.length === 0) {\n          results.push([dataPropInfo.name]);\n        }\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\n        if (childrens && childrens.length > 0) {\n          paths.push(dataPropInfo.name);\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\n            this.getChildrenEntityPaths(dataPropInfo.typeInfo, results, paths);\n          });\n        } else {\n          if (paths.length !== 0) {\n            paths.push(dataPropInfo.name);\n            results.push([...paths]);\n          }\n          paths.length = 0;\n        }\n      });\n    } else {\n      if (paths.length > 0) {\n        paths.push(dataTypeInfo.entityInfo.nodeCode);\n        results.push([...paths]);\n      }\n      paths.length = 0;\n    }\n  }\n  /**\n   * 获取指定绑定路径的当前行数据\n   * @param paths 绑定路径\n   * @param bindingData \n   * @returns \n   */\n  public static getCurrentRowByPaths(paths: string[], bindingData: BindingData): null | { [prop: string]: any } {\n    let result = null;\n    const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\n    if (bindingList && bindingList.length > 0) {\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\n      // 使用事件中的主键\n      // 主表或下级表新增，此时事件行就是当前行，无需处理\n      if (primaryValue) {\n        const bindingObject = bindingList.findById(primaryValue);\n        if (bindingObject) {\n          result = bindingObject.toJSON();\n        }\n      }\n    }\n    return result;\n  }\n  /**\n   * 从实体路径中获取级数最大的从表或从从表\n   * @param paths \n   * @returns \n   */\n  public static getAvailableChildrenPathsFromEntityPaths(paths: string[], entityTypeInfo: DataTypeInfo): string[] {\n    let nodeCodes = [];\n    paths = [...paths];\n    while (paths.length > 0) {\n      const dataPropInfo = entityTypeInfo.getPropInfoByPath(paths);\n      if (dataPropInfo.group === 'List') {\n        nodeCodes = paths;\n        break;\n      }\n      paths.pop();\n    }\n    return nodeCodes;\n  }\n  /**\n   * 从路径中获取绑定路径\n   * @param paths 路径\n   * @param entityTypeInfo entityTypeInfo\n   * @returns \n   */\n  public static getBindingPath(paths: string[], entityTypeInfo: DataTypeInfo) {\n    paths = this.getEntityPath(paths);\n    const entityPaths = this.getAvailableChildrenPathsFromEntityPaths(paths, entityTypeInfo);\n    return entityPaths;\n  }\n  public static getEntityPath(path: string[]): string[] {\n    const paths = path.filter((value: string, index: number) => {\n      if (index % 2 === 0 && value.includes(':')) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n    return paths;\n  }\n}","export class Core {\n  public static warn(message?: any, ...optionalParams: any[]) {\n    this.logable() && console && console.warn(message, ...optionalParams);\n  }\n  public static error(message?: any, ...optionalParams: any[]) {\n    this.logable() && console && console.error(message, ...optionalParams);\n  }\n  public static log(message?: any, ...optionalParams: any[]) {\n    this.logable() && console && console.log(message, ...optionalParams);\n  }\n  private static logable(): boolean {\n    return window && window.localStorage && window.localStorage.getItem('__DEVKIT_LOGABLE__') === 'true' || false;\n  }\n}","import { InjectionToken } from '../../core/index';\nimport { IMessageService, INotifyService } from './types';\n\nexport const FORM_PATH_TOKEN = new InjectionToken<string>('@farris/devkit form path token');\n\nexport const BACK_END_MESSAGE_HANDLER_TOKEN = new InjectionToken<string>('@farris/devkit_back_end_message_handler');\nexport const MESSAGE_SERVICE_TOKEN = new InjectionToken<IMessageService>('@farris/message_service_token');\nexport const NOTIFY_SERVICE_TOKEN = new InjectionToken<INotifyService>('@farris/notify_service_token');\n\n\nexport const NAMESPACE = new InjectionToken<string>('@farris/devkit NAMESPACE');","import { AppContext } from '../../app/index';\n\n// export type ClassType = new (...args: any[]) => any;\nexport const BigNumberType = 'BigNumber';\n\n/**\n * 后端消息\n */\n// tslint:disable-next-line: no-namespace\nexport namespace BackEndMessage {\n  /**\n   * 消息级别\n   */\n  export enum Level {\n    Error = 'Error',\n    Info = 'Info',\n    Warning = 'Warning'\n  }\n  /**\n   * 后端消息对象\n   */\n  export interface IMessage {\n    context: IMessageContext;\n    bizMessages: IBizMessage[];\n  }\n  /**\n   * 消息位置\n   */\n  export interface ILocation {\n    /**\n     * 表名\n     */\n    nodeCode: string;\n    /**\n     * 对应的行\n     */\n    rows?: string[];\n    /**\n     * 对应的列\n     */\n    columns?: string[];\n  }\n  /**\n   * 消息结构\n   */\n  export interface IBizMessage {\n    /**\n     * 消息位置\n     */\n    location?: ILocation;\n    /**\n     * 消息内容\n     */\n    message: string;\n    /**\n     * 消息级别\n     */\n    level: Level;\n  }\n  /**\n   * 消息上下文\n   */\n  export interface IMessageContext {\n    ns: string;\n    appContext: AppContext;\n  }\n  /**\n   * 消息\n   * @description 接口执行成功，但有info/warning级别的消息\n   */\n  export class Message implements IMessage {\n    public context: IMessageContext;\n    public bizMessages: IBizMessage[];\n    constructor(bizMessages: IBizMessage[], context: IMessageContext) {\n      this.bizMessages = bizMessages;\n      this.context = context;\n    }\n  }\n  /**\n   * 消息处理程序\n   */\n  export interface IBackEndMessageHandler {\n    handle(message: IMessage, context?: any);\n  }\n}\n\nexport interface IMessageService {\n  /**\n   * 提示\n   * @param message \n   */\n  info(message: string);\n  /**\n   * 错误\n   * @param message \n   */\n  error(message: string);\n  /**\n   * 警告\n   * @param message \n   */\n  warning(message: string);\n}\n\nexport interface INotifyService {\n  /**\n   * 提示\n   * @param message \n   * @param options \n   */\n  info(message: string, options?: { [prop: string]: any });\n  /**\n   * \n   * @param content 成功提示\n   * @param options \n   */\n  success(content: string, options?: { [prop: string]: any });\n  /**\n   * 警告提示\n   * @param content \n   */\n  warning(content: string);\n  /**\n   * 错误提示\n   * @param content \n   * @param options \n   */\n  error(content: string, options?: { [prop: string]: any });\n}","import { InjectionToken } from '../../core/index';\nimport { Expression } from '../expression/index';\n\nexport const EFFECTOR_TOKEN = new InjectionToken('@farris/effector_token');\n\n","import { BindingData } from '../../binding-data/index';\nimport { Entity, EntityList } from '../../entity/index';\nimport { Repository } from '../../repository/index';\nimport { ViewModelContext } from '../../view-model/index';\nimport { Expression } from '../expression/index';\nimport { NAMESPACE } from '../core/index';\n\n/**\n * 实体副作用器\n * @description 将表达式计算结果赋值给实体属性\n */\nexport class RepositoryEffector implements Expression.Effector {\n\n  public ns: string;\n\n  private repository: Repository<Entity>\n\n  private bindingData: BindingData;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    this.repository = this.viewModelContext.repository;\n    this.bindingData = this.viewModelContext.bindingData;\n  }\n\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\n    if (!options || !options.path) {\n      throw new Error('repository effector 需要指定行信息。');\n    }\n    const propertyPath = options.path;\n    const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;\n    let entity = this.repository.entityCollection.getEntityById(rowId);\n    if (rowId && !entity) {\n      console.error(`找不到id：${rowId}对应的实体！`);\n      return;\n    }\n    // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]\n    const propName = propertyPath.pop();\n    let object: any = entity;\n    for (let index = 1; index < propertyPath.length; index++) {\n      const propertyName = propertyPath[index];\n      if (object instanceof EntityList) {\n        object = object.get(propertyName);\n      } else {\n        object = object[propertyName];\n      }\n    }\n    if (object) {\n      if (object[propName] !== value) {\n        object[propName] = value;\n      }\n    } else {\n      console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);\n    }\n  }\n}","import { UIState } from '../../ui-state/index';\nimport { ViewModelContext } from '../../view-model/index';\nimport { Expression } from '../expression/index';\nimport { NAMESPACE } from '../core/index';\n\n\nexport class UIStateEffector implements Expression.Effector {\n\n  public ns: string;\n\n  private uiState: UIState;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    this.uiState = this.viewModelContext.uiState;\n  }\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\n    this.uiState.setPropertyValue(path, value);\n  }\n}","import { ViewModelContext } from '../../view-model/index';\nimport { Expression } from '../expression/index';\nimport { EFFECTOR_TOKEN } from './tokens';\n\nexport class EffectorRegistry {\n\n  public effectors: Array<Expression.Effector>\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.effectors = this.viewModelContext.injector.get(EFFECTOR_TOKEN) as Array<Expression.Effector>;\n  }\n\n}\n","import { Observable } from 'rxjs';\n\n// tslint:disable-next-line: no-namespace\nexport namespace Expression {\n  /**\n   * 表达式对象\n   */\n  export interface ExpressionObject {\n    /**\n     * 表达式唯一标识\n     */\n    id?: string;\n    /**\n     * 表达式绑定的路径\n     */\n    path: string;\n    /**\n     * 表达式绑定类型State|Entity\n     */\n    bindingType: ExpressionBindingType;\n    /**\n     * 表达式类型\n     */\n    type: ExpressionType;\n    /**\n     * 表达式\n     */\n    expression: string;\n    /**\n     * 表达式依赖\n     */\n    deps: Array<string>;\n    /**\n     * 表达式namespace\n     */\n    ns: string;\n    /**\n     * 表达式计算结果\n     */\n    result?: any;\n    /**\n     * 结果作用路径\n     */\n    effectPaths?: string[],\n    /**\n     * 提示信息\n     */\n    message?: string;\n    /**\n     * 提示消息类型\n     */\n    messageType?: 'error' | 'info' | 'warning';\n    /**\n     * \n     */\n    factory?: any;\n\n    /**\n     * 视图模型id\n     */\n    viewModelId?: string;\n\n    /**\n     * 事件类型\n     */\n    eventType?: EventType\n  }\n\n  /**\n   * 自定义上下文 \n   */\n  export interface ICustomContext {\n    currentRows?: Array<ICurrentRow>,\n    contexts?: { [prop: string]: any },\n    patch?: { [prop: string]: any }\n  }\n\n  /**\n   * 当前行描述\n   */\n  export interface ICurrentRow {\n    bindingPath: string;\n    primaryValue: string;\n  }\n\n  /**\n   * 表达式赋值器\n   * @deprecated deprecated，never use\n   */\n  export interface Assigner {\n    assign(expressionObject: ExpressionObject);\n  }\n  /**\n   * 表达式执行器\n   */\n  export interface IExecutor {\n    compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any;\n  }\n  /**\n   * 表达式绑定字段类型（表达式绑定到实体、UIState?）\n   */\n  export enum ExpressionBindingType {\n    State = 'State',\n    Field = 'Field'\n  }\n  /**\n   * 表达式类型\n   */\n  export enum ExpressionType {\n    /**\n     * 必填表达式\n     */\n    Required = 'require',\n    /**\n     * 只读表达式\n     */\n    Readonly = 'readonly',\n    /**\n     * 计算表达式\n     */\n    Compute = 'compute',\n    /**\n     * 依赖表达式\n     */\n    Dependency = 'dependency',\n    /**\n     * 是否可见\n     */\n    Visible = 'visible',\n    /**\n     * 关联表达式\n     */\n    Relative = 'relative',\n    /**\n     * 校验表达式\n     */\n    Validate = 'validate',\n    /**\n     * 帮助前\n     */\n    DataPicking = 'dataPicking'\n  }\n  /**\n   * 事件类型\n   */\n  export enum EventType {\n    ValueChanged = 'VALUE_CHANGED',\n    SelectionChanged = 'SELECTION_CHANGED',\n    Load = 'Load',\n    Append = 'Append',\n    Remove = 'Remove',\n    Update = 'Update',\n  }\n  export enum EventSource {\n    Field = 'Field',\n    State = 'State',\n    BindingData = 'BindingData',\n    Repository = 'Repository'\n  }\n  /**\n   * 事件参数\n   */\n  export interface EventArgs {\n    /**\n     * namespace\n     */\n    ns: string;\n    /**\n     * 变更路径\n     */\n    path: Array<string>;\n    /**\n     * 变更类型\n     */\n    type?: EventType;\n    /**\n     * 变更来源\n     */\n    source: EventSource;\n    /**\n     * 变更后的值\n     */\n    value?: any;\n    /**\n     * 上下文\n     */\n    context?: any;\n    /**\n     * frameId\n     */\n    frameId?: string;\n    /**\n     * 事件数据上下文\n     */\n    entity?: any;\n    id?: any;\n  }\n  /**\n   * 监听器\n   */\n  export interface Listener {\n    onEvent: Observable<EventArgs>;\n  }\n  /**\n   * 作用器\n   */\n  export interface Effector {\n    /**\n     * namespace\n     */\n    ns: string;\n    /**\n     * 作用\n     * @param expressionObject \n     */\n    effect(path: string, value: any, options: EffectOptions);\n  }\n  export interface EffectOptions {\n    /**\n     * 指定行\n     */\n    path?: string[];\n    /**\n     * frameId\n     */\n    frameId?: string;\n    /**\n     * 消息\n     */\n    message?: string;\n    /**\n     * 消息提示类型\n     */\n    messageType?: MessageType | 'error' | 'info' | 'warning';\n    /**\n     * 表达式id\n     */\n    expressionId?: string;\n\n    viewModelId?: string;\n\n    eventType?: EventType;\n  }\n  export enum MessageType {\n    error = 'error',\n    info = 'info',\n    warning = 'warning'\n  }\n  /**\n   * 事件处理器\n   */\n  export interface IEventHandler {\n    handleEvent(event: EventArgs, expressionObjects: Expression.ExpressionObject[]);\n    filter(event: Expression.EventArgs);\n    perform(expressionObject: Expression.ExpressionObject, context: any);\n    effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void;\n  }\n  export enum EffectPath {\n    currentRow = 0\n  }\n  /**\n   * 表达式校验结果\n   */\n  export interface IValidateResult {\n    expressionId: string;\n    path: string[];\n    result: any;\n  }\n  /**\n   * 表达式计算上下文构造器选项\n   */\n  export interface IBuilderOptions {\n\n  }\n  export const MESSAGE = {\n    'zh-CHS': {\n      require: `请输入'$property'`,\n      validate: `'$property'校验不通过`\n    },\n    en: {\n      require: `Please input '$property'`,\n      validate: `'$property' calibration failed`\n    },\n    'zh-CHT': {\n      require: `請輸入'$property'`,\n      validate: `'$property'校驗不通過`\n    }\n  };\n  export const DEPENDENCY_SPLITER = '/';\n}","import { InjectionToken } from '../../core/index';\nimport { Expression } from '../expression/index';\n\ntype Listener = Expression.Listener;\n\nexport const LISTENER_TOKEN = new InjectionToken('@Farris listener');","import { Observable, Subject } from \"rxjs\";\nimport { Change } from \"../../binding-data/index\";\nimport { Modification } from \"../../changeset/index\";\nimport { DataPropGroup, DataPropInfo, DataTypeInfo } from \"../../entity/index\";\nimport { Expression } from '../expression/index';\nimport { UIStateObservableParam } from \"../../ui-state/index\";\n\ntype EventArgs = Expression.EventArgs;\ntype Listener = Expression.Listener;\n\n/**\n * 变更监听器\n */\nexport abstract class ChangeListener implements Listener {\n  protected subject: Subject<EventArgs> = new Subject<EventArgs>();\n  public get onEvent(): Observable<EventArgs> {\n    return this.subject;\n  }\n  abstract buildEventPath(change: Change | Modification |UIStateObservableParam): string[];\n  /**\n   * 找到元数据中所有实体路径\n   * @param dataTypeInfo \n   * @param results \n   * @param paths \n   */\n  public findEntityPaths(dataTypeInfo: DataTypeInfo, results: any[], paths: string[] = []) {\n    const list: DataPropInfo[] = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);\n    if (list && list.length > 0) {\n      list.forEach((dataPropInfo: DataPropInfo) => {\n        paths.push(dataPropInfo.name);\n        const childrens: DataPropInfo[] = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);\n        if (childrens && childrens.length > 0) {\n          childrens.forEach((dataPropInfo: DataPropInfo) => {\n            this.findEntityPaths(dataPropInfo.typeInfo, results, paths);\n          });\n        } else {\n          results.push(paths);\n        }\n      });\n    } else if (paths && paths.length > 0) {\n      results.push(paths);\n    }\n  }\n}","import { Injector } from '../../core/index';\nimport { UIState, UIStateObservableParam } from '../../ui-state/index';\nimport { ChangeListener } from './change_listener';\nimport { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/view_model_context';\nimport { NAMESPACE } from '../core/index';\ntype EventArgs = Expression.EventArgs;\n\n\n/**\n * 监听UIState变更\n */\nclass UIStateChangeListener extends ChangeListener {\n\n  /**\n   * 上下文\n   */\n  private viewModelContext: ViewModelContext;\n\n  /**\n   * 视图模型id\n   */\n  private frameId: string;\n\n  /**\n   * 命名空间\n   */\n  private namespace;\n\n  /**\n   * UIState\n   */\n  private uiState: UIState;\n\n  /**\n   * 构造函数\n   */\n  constructor(viewModelContext: ViewModelContext) {\n    super();\n\n    this.viewModelContext = viewModelContext;\n    this.frameId = this.viewModelContext.id;\n    this.uiState = this.viewModelContext.uiState;\n    this.namespace = this.viewModelContext.injector.get(NAMESPACE, null);\n\n    this.registerEvent();\n  }\n\n  public buildEventPath(change: UIStateObservableParam): string[] {\n    return null;\n  }\n\n  private registerEvent() {\n    if (this.uiState && this.uiState.changes) {\n      this.uiState.changes.subscribe((change: UIStateObservableParam) => {\n        const modification: EventArgs = {\n          ns: this.namespace,\n          path: [change.field],\n          type: Expression.EventType.ValueChanged,\n          value: change.value,\n          source: Expression.EventSource.State,\n          frameId: this.frameId\n        };\n        // console.log(\"UIStateChangeListener\", modification);\n        this.subject.next(modification);\n      });\n    }\n  }\n\n}\nexport { UIStateChangeListener };\n","import { Modification, ModifyType } from '../../changeset/index';\nimport { Entity } from '../../entity/index';\nimport { Repository } from '../../repository/index';\nimport { ChangeListener } from './change_listener';\nimport { Expression } from '../expression/index';\nimport { BindingData } from '../../binding-data/index';\nimport { NAMESPACE } from '../core/index';\nimport { ViewModelContext } from '../../view-model/index';\n\ntype EventArgs = Expression.EventArgs;\nconst EventType = Expression.EventType;\n\nclass RepositoryChangeListener extends ChangeListener {\n\n  private namespace: string;\n\n  private repository: Repository<Entity>;\n\n  private bindingData: BindingData;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    super();\n    \n    this.namespace = this.viewModelContext.injector.get(NAMESPACE, null);\n    this.repository = this.viewModelContext.repository;\n    this.bindingData = this.viewModelContext.bindingData;\n    this.registerEvent();\n  }\n\n  private registerEvent() {\n    if (this.repository && this.repository.changes) {\n      this.repository.changes.subscribe((change: Modification) => {\n        let eventType = this.convertEventType(change);\n        if (!eventType) {\n          return;\n        }\n        const path = this.buildEventPath(change);\n        const modification: EventArgs = {\n          ns: this.namespace,\n          type: eventType,\n          path: path,\n          value: change.value,\n          source: Expression.EventSource.Field,\n        };\n        // console.log(\"RepositoryChangeListener\", modification);\n        this.subject.next(modification);\n      });\n    }\n    // repository只监听值变化事件\n    if (this.repository && this.repository.entityCollectionChange) {\n      this.repository.entityCollectionChange.subscribe((change: Modification) => {\n        let eventType = this.convertEventType(change);\n        if (!eventType) {\n          return;\n        }\n        const path = this.buildEventPath(change);\n        const modification: EventArgs = {\n          ns: this.namespace,\n          type: eventType,\n          path: path,\n          value: change.value,\n          source: Expression.EventSource.Repository,\n        };\n        this.subject.next(modification);\n      });\n    }\n  }\n\n  /**\n   * 构建事件路径参数\n   * @param event event\n   * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]\n   * @returns \n   */\n  public buildEventPath(event: Modification): string[] {\n    const paths = event.path;\n    let result = [];\n    if (!paths || paths.length < 1) {\n      // 主表新增时path为空\n      return result;\n    }\n    // 过滤掉udt的冒号，关联字段的id\n    result = paths.filter((path: string, index: number) => {\n      if (index % 2 === 0 && path.includes(':')) {\n        if (path === ':') {\n          return false;\n        }\n        const primaryKey = path.split(':')[0];\n        if (primaryKey !== this.repository.primaryKey) {\n          return false;\n        }\n      }\n      return true;\n    });\n    // 移除路径中的id字符串\n    // result = paths.map((path: string, index: number) => {\n    //   if (path.includes(':') && index % 2 === 0) {\n    //     return path.split(':')[1];\n    //   }\n    //   return path;\n    // });\n    // 此时result中不应该有冒号\n    return result;\n  }\n\n  private convertEventType(change: Modification): Expression.EventType {\n    let eventType = null;\n    if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {\n      // eventType = Expression.EventType.Append;\n      // 不处理新增\n    } else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {\n      // eventType = Expression.EventType.Remove;\n    } else if (change.type === ModifyType.Load) {\n      // eventType = Expression.EventType.Load;\n    } else if (change.type === ModifyType.ValueChange) {\n      //eventType = Expression.EventType.ValueChanged;\n      // 不处理值变化\n    } else if (change.type === ModifyType.Update) {\n      eventType = Expression.EventType.Update\n    }\n    return eventType;\n  }\n}\n\nexport { RepositoryChangeListener }","\nimport { ViewModelContext } from '../../view-model/index';\nimport { LISTENER_TOKEN } from './tokens';\nimport { Expression } from '../expression/index';\ntype Listener = Expression.Listener;\n\nclass ListenerRegistry {\n\n  /**\n   * 监听器集合\n   */\n  public listeners: Array<Listener>\n\n  /**\n   * 构造函数\n   */\n  constructor(private viewModelContext: ViewModelContext) {\n    this.listeners = this.viewModelContext.injector.get(LISTENER_TOKEN) as Array<Listener>;\n  }\n}\nexport { ListenerRegistry };\n","import { BindingData, BindingList, Change, ChangeType } from '../../binding-data/index';\nimport { ChangeListener } from './change_listener';\nimport { Expression } from '../expression/index';\nimport { NAMESPACE } from '../core/index';\nimport { Repository } from '../../repository/index';\nimport { ViewModelContext } from '../../view-model/index';\n\n\ntype EventArgs = Expression.EventArgs;\nconst EventType = Expression.EventType;\n/**\n * 监听bindingList变更\n * @description 主要用于监听行切换等事件\n */\nclass BindingDataChangeListener extends ChangeListener {\n\n  /**\n   * 命名空间\n   */\n  private namespace;\n\n  /**\n   * 实体仓库\n   */\n  private repository: Repository<any> = null;\n\n  /**\n   * 绑定数据\n   */\n  private bindingData: BindingData\n  \n  /**\n   * 构造函数\n   */\n  constructor(private viewModelContext: ViewModelContext) {\n    super();\n    this.namespace = this.viewModelContext.injector.get(NAMESPACE, '');\n    this.repository = this.viewModelContext.repository;\n    this.bindingData = this.viewModelContext.bindingData;\n\n    this.registerEvent();\n  }\n\n  /**\n   * 注册值变化事件\n   */\n  private registerEvent() {\n    if (this.bindingData && this.bindingData.changes && typeof this.bindingData.changes.subscribe === 'function') {\n      this.bindingData.changes.subscribe((change: Change) => {\n        if (change.type === ChangeType.Append || change.type === ChangeType.ValueChanged || change.type === ChangeType.Remove || change.type === ChangeType.Load || change.type === ChangeType.SelectionChanged) {\n          let eventType = null;\n          if (change.type === ChangeType.Append) {\n            eventType = EventType.Append;\n          } else if (change.type === ChangeType.ValueChanged) {\n            eventType = EventType.ValueChanged;\n          } else if (change.type === ChangeType.Remove) {\n            eventType = EventType.Remove;\n          } else if (change.type === ChangeType.Load) {\n            // 主表新增\n            if (change.create === true) {\n              eventType = EventType.Append;\n            } else {\n              eventType = EventType.Load;\n            }\n          } else if (change.type === ChangeType.SelectionChanged) {\n            eventType = EventType.SelectionChanged\n          }\n          const path = this.buildEventPath(change);\n          const modification: EventArgs = {\n            ns: this.namespace,\n            path: path,\n            type: eventType,\n            source: Expression.EventSource.BindingData,\n            value: change.value,\n            id: change.id\n          };\n          // console.log(\"BindingDataChangeListener\", modification);\n          this.subject.next(modification);\n        }\n      });\n    }\n  }\n\n  public buildEventPath(change: Change): string[] {\n    const path = change.path;\n    const paths = [];\n    // if (!path || path.length < 1) {\n    //   return paths;\n    // }\n    const primaryValue = this.bindingData.list.currentItem.primaryKeyValue;\n    if (primaryValue) {\n      if (!(change.type === ChangeType.Load && change.path.length === 0)) {\n        paths.push(`${this.bindingData.list.primaryKey}:${primaryValue}`);\n      }\n    }\n    const currentPath = [];\n    for (let index = 0; index < path.length; index++) {\n      const propertyName = path[index];\n      currentPath.push(propertyName);\n      const item = this.bindingData.getValue(currentPath);\n      paths.push(propertyName);\n      if (item instanceof BindingList) {\n        if (currentPath.length < path.length) {\n          const bindingList = item as BindingList;\n          let currentId = bindingList.currentItem.primaryKeyValue;\n          if (index === path.length - 2 && change.id) {\n            currentId = change.id;\n          }\n          paths.push(`${this.bindingData.list.primaryKey}:${currentId}`);\n        }\n      }\n    }\n    return paths;\n  }\n}\nexport { BindingDataChangeListener };\n","import { Observable, Subject } from 'rxjs';\nimport { ListenerRegistry } from './listener_registry';\nimport { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index';\n\ntype EventArgs = Expression.EventArgs;\ntype Listener = Expression.Listener;\n\n/**\n * 监听器\n * @description 监听bindingList、UIState变更\n */\nclass Listeners {\n\n  private registry: ListenerRegistry\n\n  private subject: Subject<EventArgs> = new Subject<EventArgs>();\n\n  public get onEvent(): Observable<EventArgs> {\n    return this.subject;\n  }\n\n  /**\n   * 构造函数\n   */\n  constructor(private viewModelContext: ViewModelContext) {\n    this.registry = this.viewModelContext.injector.get(ListenerRegistry, null);\n    this.regist();\n  }\n\n  /**\n   * 注册Listender\n   */\n  private regist() {\n    const listeners = this.registry && this.registry.listeners || [];\n    if (listeners && listeners.length > 0) {\n      listeners.forEach((listener: Listener) => {\n        listener.onEvent.subscribe((modification: EventArgs) => {\n          this.subject.next(modification);\n        });\n      });\n    }\n  }\n}\nexport { Listeners };\n","import { BehaviorSubject, Observable } from \"rxjs\";\nimport { ViewModelContext } from '../../view-model/index';\n\nimport { Listeners } from \"../listener/index\";\nimport { Expression } from \"./types\";\n\n/**\n * 事件监听器主要有以下几种类型的事件：\n * 1、值变化\n * 2、行切换\n *    行切换使用场景为需要为数据计算依赖当前行时\n * 3、数据加载\n */\nexport class ExpressionEventEmitter {\n\n  private onEvent: BehaviorSubject<Array<Expression.EventArgs>>;\n\n  private events: Array<Expression.EventArgs>;\n\n  private listeners: Listeners;\n\n  constructor(private viewModelContext: ViewModelContext) {\n\n    this.listeners = this.viewModelContext.injector.get(Listeners);\n\n    this.events = new Array<Expression.EventArgs>();\n    this.listeners.onEvent.subscribe((eventArgs: Expression.EventArgs) => {\n      if (this.onEvent && this.onEvent.observers.length > 0) {\n        let events = [];\n        if (this.events.length > 0) {\n          events = [...this.events];\n        }\n        events.push(eventArgs);\n        this.onEvent.next(events);\n        this.events = [];\n      } else {\n        this.events.push(eventArgs);\n      }\n    });\n  }\n  public attach(): Observable<Array<Expression.EventArgs>> {\n    if (!this.onEvent) {\n      this.onEvent = new BehaviorSubject<Array<Expression.EventArgs>>(this.events);\n    }\n    return this.onEvent.asObservable();\n  }\n}","import { createInjectionToken} from '../core/index';\nimport { Translate } from './translate';\n\nexport const TranslateToken = createInjectionToken('@farris/devkit TranslateToken');\n","import { InjectionToken } from '../../core/index';\nimport { IFormExpressionManifestService, IFormManifestService } from \"./types\";\n\nexport const FORM_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormManifestService>('@farris/form_manifest_service');\nexport const FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN = new InjectionToken<IFormExpressionManifestService>('@farris/form_expression_manifest_service');\n","import { Injector } from \"../../core/index\";\nimport { Observable, of } from \"rxjs\";\nimport { catchError, switchMap } from \"rxjs/operators\";\nimport { Translate, TranslateToken } from \"../../i18n/index\";\nimport { Repository } from '../../repository/index';\nimport { ViewModelContext, ViewModel } from \"../../view-model/index\";\nimport { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, IFormExpressionManifestService } from \"../manifest/index\";\nimport { Expression } from './types';\nimport { AppContext } from '../../app'\nimport { ValidatorFactory } from '../../validator'\nexport class ExpressionRegistry {\n\n  private injector: Injector;\n\n  private _expressions: Expression.ExpressionObject[] = null;\n\n  private formExpressionManifestService: IFormExpressionManifestService;\n\n  private translate: Translate;\n\n  constructor(private viewModelContext: ViewModelContext) {\n\n    this.injector = this.viewModelContext.injector;\n    this.formExpressionManifestService = this.injector.get(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, null);\n    this.translate = this.injector.get(TranslateToken, null);\n  }\n\n  /**\n   * 加载表达式文件\n   */\n  public load(): Observable<Expression.ExpressionObject[]> {\n    return this.formExpressionManifestService.load().pipe(\n      switchMap((describe: Array<any>) => {\n        const expressions = this.setExpressions(describe);\n\tthis.cleanSpecialCharacters();\n        return of(expressions);\n      }),\n      catchError((e) => {\n        return of([]);\n      })\n    );\n  }\n\n  public setExpressions(describe) {\n    const expressions: Array<Expression.ExpressionObject> = [];\n    const exprs = Array.from(describe);\n    const appContext = this.viewModelContext.injector.get<AppContext>(AppContext);\n    exprs.forEach((expr: any) => {\n      expr.expressions.forEach((expression: any) => {\n        const expressionObject: Expression.ExpressionObject = {\n          id: expression.id,\n          ns: expr.ns,\n          viewModelId: expr.viewModelId,\n          path: expr.path,\n          bindingType: expr.type,\n          type: expression.type,\n          expression: expression.value || expression.expr || '',\n          message: expression.message || null,\n          messageType: expression.messageType || null,\n          deps: []\n        };\n        if (expression.type === Expression.ExpressionType.Required) {\n          const b = { type: \"requiredExpression\", constraints: [expression.id], message: expression.message }\n          appContext.validationManager[expr.path] = { ...(appContext.validationManager[expr.path] || {}), [expression.id]: b }\n        }\n        if (expression.type === Expression.ExpressionType.Validate) {\n          const b = { type: \"expression\", constraints: [expression.id], message: expression.message }\n          appContext.validationManager[expr.path] = { ...(appContext.validationManager[expr.path] || {}), [expression.id]: b }\n        }\n        if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate)) {\n          if (!expression.message) {\n            expressionObject.message = this.getExpressionMessage(expression.type);\n          }\n          if (!expression.messageType) {\n            expressionObject.messageType = 'error';\n          }\n        }\n        if (expressionObject.message) {\n          this.transform(expressionObject);\n        }\n        expressions.push(expressionObject);\n      });\n    });\n\n    this._expressions = expressions;\n    return expressions;\n  }\n\n  /**\n   * 获取所有表达式\n   */\n  public get expressions(): Observable<Expression.ExpressionObject[]> {\n    if (this._expressions) {\n      return of(this._expressions);\n    }\n\n    // 短路，实现功能\n    if (window['__expressions__']) {\n      this.setExpressions(window['__expressions__']);\n      return of(this._expressions);\n    }\n\n    return this.load();\n  }\n  /**\n   * 根据表达式id获取对应的表达式对象\n   * @param id 表达式id\n   * @returns \n   */\n  public getExpressionById(id: string): Expression.ExpressionObject {\n    if (!this._expressions || this._expressions.length < 1) {\n      return null;\n    }\n    return this._expressions.find((expressionObject: Expression.ExpressionObject) => expressionObject.id === id);\n  }\n  private getExpressionMessage(expressionType: Expression.ExpressionType, defaultValue?: string) {\n    if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required)) {\n      return null;\n    }\n    if (!this.translate) {\n      return defaultValue;\n    }\n    const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';\n    return Expression.MESSAGE[currentLanguage][expressionType];\n  }\n  private transform(expressionObject: Expression.ExpressionObject) {\n    if (!this.translate) {\n      return;\n    }\n    if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {\n      expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);\n    }\n  }\n  private cleanSpecialCharacters() {\n    if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {\n      return;\n    }\n    const repository: Repository<any> = this.viewModelContext.repository;\n    if (!repository) {\n      return;\n    }\n    const entityTypeInfo = repository.entityTypeInfo;\n    const regex = new RegExp(`[\\\\'\\\\\"]?\\\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\\\.\\\\[\\\\]a-zA-Z0-9_]+\\\\s*[\\\\'\\\\\"]?`, 'g');\n    this._expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n      const expr = expressionObject.expression;\n      const entityPropertyExpressions: RegExpMatchArray = expr.match(regex);\n      if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {\n        // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表\n        entityPropertyExpressions.forEach((item: string) => {\n          if (item.indexOf('.') === -1) {\n            console.warn(`无效的实体表达式:${item}`);\n            return;\n          }\n          // 去数组\n          if (/\\[\\d\\]/g.test(item)) {\n            const replacer = item.replace(/\\[\\d\\]/g, '');\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\n          }\n          // 去星号\n          if(/\\*/g.test(item)){\n            const replacer = item.replace(/\\*/g, '');\n            expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);\n          }\n        });\n      }\n    });\n  }\n  private replaceAll(originalValue: string, search: string, replacer: string) {\n    return originalValue.split(search).join(replacer);\n  }\n}","import { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from \"@farris/expression-engine\";\nimport { ViewModelContext, ViewModel } from \"../../view-model/index\";\nimport { Expression } from \"./types\";\n\nexport class ExpressionExecutor implements Expression.IExecutor {\n  /**\n   * 编译执行\n   * @param expression \n   * @param context \n   * @returns \n   */\n  public compile(expressionObject: Expression.ExpressionObject, context?: { [prop: string]: any }): any {\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\n      throw new Error('上下文必须为对象！');\n    }\n    const expressionContext = this.buildContext(context);\n    if (!expressionObject.factory) {\n      const expression = new ExpressionEngineExpression(expressionObject.expression, expressionContext);\n      expressionObject.factory = expression.compile();\n    }\n    const expression: ExpressionEngineExpression = expressionObject.factory;\n    return expression.eval(expressionContext);\n  }\n  /**\n   * 解析\n   * @param expression \n   * @param context \n   * @returns \n   */\n  public eval(expression: string, context?: { [prop: string]: any }) {\n    if (Object.prototype.toString.call(context) !== '[object Object]') {\n      throw new Error('上下文必须为对象！');\n    }\n    const expressionContext = this.buildContext(context);\n    const expressionEngine = new ExpressionEngine(expressionContext);\n    return expressionEngine.eval(expression);\n  }\n  /**\n   * 构造表达式上下文\n   * @param context \n   * @returns \n   */\n  private buildContext(context: { [prop: string]: any }): ExpressionContext {\n    const expressionContext = new ExpressionContext();\n    if (context && Object.keys(context).length > 0) {\n      Object.keys(context).forEach((key: string) => {\n        expressionContext.set(key, context[key]);\n      });\n    }\n    return expressionContext;\n  }\n}","import { Injector } from '../../core/index';\nimport { AppContext } from '../../app/index';\nimport { BindingData, BindingList, BindingObject } from '../../binding-data/index';\nimport { DataPropInfo, Entity, EntityList } from '../../entity/index';\nimport { EffectorFactory } from '../effector/index';\nimport { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';\nimport { Repository } from '../../repository/index';\nimport { ViewModelContext } from '../../view-model/index';\nimport { ExpressionUtil } from '../utils/expression_util';\n\nexport abstract class EventHandler implements Expression.IEventHandler {\n\n  protected injector: Injector;\n\n  protected repository: Repository<any>;\n\n  protected bindingData: BindingData;\n\n  protected expressionRegistry: ExpressionRegistry;\n\n  protected effectorFactory: EffectorFactory;\n\n  protected expressionExecutor: ExpressionExecutor;\n\n  protected expressionResult: ExpressionResult;\n\n  constructor(protected frameContext: ViewModelContext) {\n    this.injector = frameContext.injector;\n    this.repository = frameContext.repository;\n    this.bindingData = frameContext.bindingData;\n    this.expressionRegistry = this.injector.get(ExpressionRegistry, null);\n    this.effectorFactory = this.injector.get(EffectorFactory, null);\n    this.expressionExecutor = this.injector.get(ExpressionExecutor);\n    this.expressionResult = this.injector.get(ExpressionResult, null);\n\n  }\n\n  public expressionObjects: Expression.ExpressionObject[];\n\n  public handleEvent(event: Expression.EventArgs, expressionObjects: Expression.ExpressionObject[]) {\n    event = Object.assign({}, event);\n    this.expressionObjects = expressionObjects;\n    this.dispatch(event);\n  }\n\n  //#region 抽象函数\n  /**\n   * 获取相关表达式\n   * @param event event\n   */\n  public abstract filter(event: Expression.EventArgs);\n  /**\n   * 发布事件\n   * @param expressionObject 表达式对象\n   * @param event 事件\n   */\n  public abstract dispatch(event: Expression.EventArgs): void;\n  //#endregion\n\n  //#region 属性\n\n  /**\n   * 主表主键值\n   */\n  protected get primaryValue() {\n    return this.bindingData.list.currentItem.primaryKeyValue;\n  }\n  /**\n   * 获取主实体原始字段名\n   */\n  protected get entityOriginalNodeCode(): string {\n    return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;\n  }\n\n  //#endregion\n\n  //#region 表达式核心\n  /**\n   * 执行表达式计算\n   * @param expression 表达式\n   * @param context 上下文\n   * @returns any\n   */\n  public perform(expressionObject: Expression.ExpressionObject, context: any) {\n    return this.expressionExecutor.compile(expressionObject, context);\n  }\n  /**\n   * 副作用\n   * @param event event\n   * @param expressionObject expressionObject\n   */\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\n    const effectTo = expressionObject.bindingType;\n    const effector = this.effectorFactory.getEffector(expressionObject);\n    if (!effector) {\n      // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);\n      return;\n    }\n    if (effectTo === Expression.ExpressionBindingType.Field) {\n      const effectPaths = expressionObject.effectPaths || [];\n      if (effectPaths.length > 0) {\n        effectPaths.forEach((path: string) => {\n          const effectPath = path.split('/');\n          const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };\n          effector.effect(expressionObject.path, expressionObject.result, effectOptions);\n        });\n      } else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {\n        const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };\n        effector.effect(expressionObject.path, expressionObject.result, effectOptions);\n      }\n    } else {\n      throw new Error('not supported！');\n    }\n  }\n\n  //#endregion\n\n  //#region util\n\n  protected isValidateOrRequiredExpression(expressionObject: Expression.ExpressionObject) {\n    return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);\n  }\n  /**\n   * 以事件参数为依据构建实体路径\n   * @param event event\n   * @returns \n   */\n  protected getEntityPathFromEvent(event: Expression.EventArgs): string[] {\n    event = JSON.parse(JSON.stringify(event));\n    if (!event || !event.path || event.path.length < 1) {\n      return [];\n    }\n    const paths = event.path;\n    return this.getEntityPath(paths);\n  }\n  /**\n   * 获取事件路径中的实体路径\n   * @param path path\n   * @returns \n   */\n  protected getEntityPath(path: string[]): string[] {\n    const paths = path.filter((value: string, index: number) => {\n      if (index % 2 === 0 && value.includes(':')) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n    return paths;\n  }\n  /**\n   * 构造实体路径\n   * @param path path\n   * @description 删除路径中的id字段\n   * @returns \n   */\n  protected buildEntityPath(path: string[]): string[] {\n    const paths = path.filter((value: string, index: number) => {\n      if (index % 2 === 0 && value.includes(':')) {\n        return false;\n      } else {\n        return true;\n      }\n    });\n    return paths;\n  }\n  /**\n   * 清理事件路径中的id主键标识\n   * @param path path\n   * @returns \n   */\n  protected cleanEventPath(path: string[]) {\n    path = path.filter(p => {\n      if (p && p !== ':') {\n        return true;\n      } else {\n        return false;\n      }\n    });\n    return path.map((item: string) => {\n      if (item.includes(':')) {\n        return item.split(':')[1];\n      } else {\n        return item;\n      }\n    });\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  protected getCurrentRowByPaths(paths: string[]): null | { [prop: string]: any } {\n    let result = null;\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\n    if (bindingList && bindingList.length > 0) {\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\n      if (primaryValue) {\n        const bindingObject = bindingList.findById(primaryValue);\n        if (bindingObject) {\n          result = bindingObject.toJSON();\n        }\n      }\n    }\n    return result;\n  }\n  /**\n   * 获取事件路径中指定子表的事件行\n   * @param path \n   * @param tableCode \n   * @returns \n   */\n  protected getEventId(path: string[], tableCode: string) {\n    if (!path || path.length < 1) {\n      throw new Error('invalid path!');\n    }\n    const propertyIndex = path.findIndex(p => p === tableCode);\n    if (propertyIndex === -1) {\n      return null;\n    }\n    const idIndex = propertyIndex + 1;\n    if (idIndex > path.length - 1) {\n      throw new Error('invalid propertyName or path');\n    }\n    const id = path[idIndex];\n    if (id.indexOf(':') === -1) {\n      throw new Error('compute error.');\n    }\n    return id.split(':')[1];\n  }\n  //#endregion\n\n\n  //#region  构造上下文\n\n  /**\n   * 构造变量上下文\n   * @param event \n   * @returns \n   */\n  public buildStateContext(event: Expression.EventArgs) {\n    const ns = event.ns;\n    const appContext = this.injector.get<AppContext>(AppContext, null);\n    const frameContexts = appContext.viewModelContextManager.getContextsByNamespace(ns);\n    const result = {};\n    if (frameContexts && frameContexts.length > 0) {\n      const anonymousFrameContext = frameContexts[0];\n      const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();\n      if (rootFrameContext) {\n        const uiState = rootFrameContext.viewModel.uiState;\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\n        propertyNames.forEach((prop: string) => {\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\n            result[prop] = uiState[prop];\n          }\n        });\n      }\n    }\n    return result;\n  }\n  /**\n   * 获取事件实体\n   * @param event \n   * @returns \n   */\n  public buildEntityContext(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows?: Array<Expression.ICurrentRow>) {\n    const expressionBindingType = expressionObject.bindingType;\n    if (expressionBindingType === Expression.ExpressionBindingType.Field) {\n      const entityTypeInfo = this.repository.entityTypeInfo;\n      const childrenEntityPaths = [];\n      ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\n      // 获取当前行\n      const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;\n      const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;\n      let entity = this.bindingData.list.findById(primaryValue);\n      if (!entity) {\n        return null;\n      }\n      const object = entity.toJSON();\n      object['__type__'] = 'Entity';\n      if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\n        return object;\n      }\n      childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);\n      // 找到所有子表\n      childrenEntityPaths.forEach((paths: string[]) => {\n        const bindingList = this.bindingData.getValue(paths) as BindingList;\n        let currentRowId = bindingList.currentId;\n        const propertyName = paths[paths.length - 1];\n        // parent 为entity或entitylist或null\n        const parent = paths.slice(0, paths.length - 1).reduce((object: any, path: string) => {\n          return object && object[path] || null;\n        }, object);\n        if (!parent) {\n          return;\n        }\n        const data = parent;\n        let node: any = null;\n        if (!currentRowId) {\n          // 当前表没有数据\n          node = { __items__: [], __type__: 'List' };\n          node.length = () => node.__items__.length;\n        } else {\n          // 纠正当前行\n          if (currentRows && currentRows.length > 0) {\n            // 是否指定了当前行\n            const userAssignCurrentRow = currentRows.find(row => {\n              const bindingPaths = row.bindingPath.split('/').filter(p => p);\n              return bindingPaths.join('/') === paths.join('/');\n            });\n            if (userAssignCurrentRow) {\n              currentRowId = userAssignCurrentRow.primaryValue;\n            }\n          }\n          // 子表当前行\n          const row = bindingList.findById(currentRowId);\n          // 找到子表当前行的上级\n          const list = parent[propertyName];\n          node = { __items__: [], ...row && row.toJSON() || {}, __type__: 'List' };\n          node.length = () => node.__items__.length;\n\n          if (list && Array.isArray(list)) {\n            node.__items__ = [].concat(list);\n          }\n        }\n        data[propertyName] = node;\n      });\n      return object;\n    } else if (expressionBindingType === Expression.ExpressionBindingType.State) {\n      // todo: 支持状态表达式\n    } else {\n      return null;\n    }\n  }\n  /**\n   * 构造表达式计算上下文\n   * @param expressionObject 表达式\n   * @param event 事件\n   * @param entityContext 实体上下文\n   * @param currentRows 当前行\n   * @returns \n   */\n  public buildContext(expressionObject: Expression.ExpressionObject, event: Expression.EventArgs, entityContext?: any, currentRows?: Array<Expression.ICurrentRow>): any {\n    let context = [];\n    if (entityContext) {\n      context.push(entityContext);\n    } else {\n      const entity = this.buildEntityContext(event, expressionObject, currentRows);\n      context.push(entity);\n    }\n    const stateContext = this.buildStateContext(event);\n    const entityCode = this.entityOriginalNodeCode;\n    let entity = null;\n    if (context.length === 1) {\n      entity = context.pop();\n    } else {\n      entity = context[0];\n      if (!entity['__type__']) {\n        entity['__type__'] = 'Entity';\n      }\n      entity['__items__'] = context;\n    }\n    return {\n      [entityCode]: entity,\n      ...stateContext,\n      frameContext: this.frameContext,\n      bindingData: this.bindingData,\n      repository: this.repository\n    };\n  }\n  //#endregion\n  /**\n   * 构造副作用路径\n   * @param event \n   * @param expressionObject \n   * @returns \n   */\n  protected buildEffectPath(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): string[] {\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\n    const primaryValue = event.path[0] && event.path[0].split(':')[1];\n    if (!primaryValue) {\n      throw new Error('Invalid event path!');\n    }\n    if (expressionPaths.length === 1) {\n      // 主表简单字段\n      return [primaryValue, expressionPaths.pop()];\n    } else {\n      const result = [primaryValue];\n      for (let index = 0; index < expressionPaths.length; index++) {\n        const propertyName = expressionPaths[index];\n        result.push(propertyName);\n        const currentPaths = expressionPaths.slice(0, index + 1);\n        const propertyInfo: DataPropInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);\n        if (propertyInfo.group === 'List') {\n          let id = this.getEventId(event.path, propertyInfo.name) || null;\n          // 事件和表达式不是同一个表\n          if (!id) {\n            const bindingList = this.bindingData.getValue(currentPaths) as BindingList;\n            if (bindingList) {\n              id = bindingList.currentId;\n            }\n          }\n          result.push(id);\n        }\n      }\n      return result;\n    }\n  }\n\n  //#region 辅助方法\n  protected getPathInfo(path: string): { path: string, propertyName: string, paths: string[], propertyNames: string[] } {\n    const paths = path.split('/').filter(p => p);\n    // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）\n    const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\n    const propertyName = paths.slice(entityPath.length).join('/');\n    return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };\n  }\n  /**\n   * get table paths from event paths\n   * @param paths event paths\n   * @returns \n   */\n  protected getTablePathsFromEventPaths(paths: string[]) {\n    paths = this.getEntityPath(paths);\n    const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\n    return entityPaths;\n  }\n  /**\n   * get property paths from event paths\n   * @param paths event paths\n   * @returns \n   */\n  protected getPropertyPathsFromEventPaths(paths: string[]) {\n    paths = this.getEntityPath(paths);\n    const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);\n    return paths.slice(tablePaths.length);\n  }\n  /**\n   * 分析事件和表达式的关系\n   */\n  protected analysis(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject) {\n    const expressionPathInfo = this.getPathInfo(expressionObject.path);\n    const eventPaths = this.getEntityPath(event.path.slice(0));\n    const eventPathInfo = this.getPathInfo(eventPaths.join('/'));\n    if (!expressionPathInfo || !eventPathInfo) {\n      console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);\n      return null;\n    }\n    const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);\n    const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);\n    const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);\n    const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);\n    const result = {\n      distance: undefined,\n      eventFromChildren: undefined,\n      eventFromParent: undefined,\n      expressionTablePaths,\n      expressionPropertyNames,\n      eventTablePaths,\n      eventPropertyNames,\n      isSameTable: false\n    };\n    result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);\n    if (result.distance === 1) {\n      result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));\n      result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));\n    }\n    result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');\n    return result;\n  }\n\n  protected buildCurrentRows(tablePaths: string[], fullPaths: string[]) {\n    const currentRows = new Array<Expression.ICurrentRow>();\n    if (!tablePaths || tablePaths.length < 1) {\n      currentRows.push({\n        bindingPath: '/',\n        primaryValue: fullPaths[0]\n      });\n    } else {\n      const paths = [];\n      tablePaths.forEach((path: string, index: number) => {\n        if (index === 0) {\n          currentRows.push({\n            bindingPath: '/',\n            primaryValue: fullPaths[0]\n          });\n        }\n        paths.push(path);\n        const primaryValue = fullPaths[index * 2 + 2];\n        currentRows.push({\n          bindingPath: paths.join('/'),\n          primaryValue: primaryValue\n        });\n      });\n    }\n    return currentRows;\n  }\n  //#endregion\n}","import { DataPropInfo,Entity, EntityList } from '../../entity/index';\nimport { Expression } from '../expression/index';\nimport { ENTITY_TEMPLATE } from '../resolver/index';\nimport { EventHandler } from './event_handler';\n/**\n * 实体值变化处理器\n */\nexport class EntityValueChangedEventHandler extends EventHandler {\n\n  /**\n   * 获取相关表达式\n   * @param event event\n   */\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\n    return null;\n  }\n\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n  }\n\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { Expression } from \"../expression/index\";\n\nexport class EffectorManager {\n  /**\n   * 批量副作用\n   * @param effector effector\n   * @param expressionObject 表达式\n   * @param paths 作用路径\n   * @returns \n   */\n  public static effect(effector: Expression.Effector, expressionObject: Expression.ExpressionObject, paths: any[][]) {\n    if (!paths || paths.length < 1) {\n      return;\n    }\n    paths.forEach((path: any[]) => {\n      const effectOptions: Expression.EffectOptions = { path, message: expressionObject.message, expressionId: expressionObject.id, viewModelId: expressionObject.viewModelId, eventType: expressionObject.eventType };\n      effector.effect(expressionObject.path, expressionObject.result, effectOptions);\n    });\n  }\n}","import { InjectionToken } from '../../core/index';\nimport { EffectorManager } from \"../effector/effector_manager\";\nimport { Entity, EntityList } from \"../../entity/index\";\nimport { Expression } from \"../expression/index\";\nimport { STATE_TEMPLATE } from \"../resolver/index\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class StateValueChangedEventHandler extends EventHandler {\n\n  /**\n   * 获取相关表达式\n   * @param event event\n   */\n  public filter(event: Expression.EventArgs) {\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        const deps = expressionObject.deps;\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\n          return false;\n        }\n        const changePaths = this.cleanEventPath(event.path);\n        changePaths.splice(0, 0, STATE_TEMPLATE);\n        const eventPath = changePaths.join('/');\n        if (deps.includes(eventPath)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n    }\n    return null;\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        // const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 副作用\n   * @param event event\n   * @param expressionObject expressionObject\n   */\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\n    const effector = this.effectorFactory.getEffector(expressionObject);\n    const bindingType = expressionObject.bindingType;\n\n    if (bindingType === Expression.ExpressionBindingType.State) {\n      // 如果表达式作用于uistate\n      effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message, eventType: event.type, viewModelId: expressionObject.viewModelId });\n    } else if (bindingType === Expression.ExpressionBindingType.Field) {\n      // 表达式作用于实体属性\n      const expressionPathInfo = this.getPathInfo(expressionObject.path);\n      const bindingPaths = expressionPathInfo.paths;\n      const entities = this.repository.entityCollection.getAllEntities();\n\n      this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows: Expression.ICurrentRow[], paths: string[]) => {\n        this.output(event, expressionObject, currentRows, effector, [paths])\n      });\n    }\n  }\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\n    const context = this.buildContext(expressionObject, event, null, currentRows);\n    const value = this.perform(expressionObject, context);\n    if (value === undefined) {\n      return;\n    }\n    expressionObject.result = value;\n    if (expressionObject.id) {\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\n    }\n    EffectorManager.effect(effector, expressionObject, paths);\n  }\n  private effectRows(entities: Entity[], bindingPaths: string[], propertyNames: string[], callback: (currentRows: Expression.ICurrentRow[], paths: string[]) => void, currentRows: Expression.ICurrentRow[] = [], prevPaths: string[] = [], paths: string[] = []) {\n    if (!bindingPaths || bindingPaths.length < 1) {\n      entities.forEach((entity: Entity) => {\n        if (!entity || !entity.primaryValue) {\n          return;\n        }\n        const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);\n        const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);\n        callback(currentCurrentRows, currentPaths);\n      });\n      currentRows.length = 0;\n      paths.length = 0;\n    } else {\n      let flag = false;\n      let nextPrevPaths = prevPaths;\n      entities.forEach((entity: Entity) => {\n        const prop = bindingPaths[0];\n        const entityList = entity[prop] as EntityList<Entity>;\n        if (!entityList || entityList.count() < 1) {\n          return;\n        }\n        currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });\n        paths.push(entity.primaryValue);\n        paths.push(prop);\n        if (flag === false) {\n          flag = true;\n          nextPrevPaths.push(prop);\n        }\n        const nextBindingPaths = bindingPaths.slice(1);\n        this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);\n      });\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): { [prop: string]: any; } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { Entity } from \"../../entity/index\";\nimport { Expression } from \"../expression\";\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class RepositoryAddEntityEventHandler extends EventHandler {\n  /**\n   * 获取相关表达式\n   * @param event event\n   * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段\n   */\n  public filter(event: Expression.EventArgs) {\n    return null;\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event,expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { InjectionToken } from '../../core/index';\nimport { BindingList } from \"../../binding-data/index\";\nimport { Expression } from \"../expression\";\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\nimport { ExpressionUtil } from \"../utils/expression_util\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class RepositoryRemoveEntityEventHandler extends EventHandler {\n  /**\n   * 获取相关表达式\n   * @param event event\n   */\n  public filter(event: Expression.EventArgs) {\n    return null;\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n  }\n}","import { EventHandler } from \"./event_handler\";\nimport { Expression } from \"../expression/index\";\n\nexport class RepositoryLoadEventHandler extends EventHandler {\n  public filter(event: Expression.EventArgs) {\n    return null;\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event,expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined&& !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        } else {\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { BindingList } from \"../../binding-data/index\";\nimport { Expression } from \"../expression/index\";\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\nimport { ExpressionUtil } from \"../utils/expression_util\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class EntityUpdateEventHandler extends EventHandler {\n\n  public filter(event: Expression.EventArgs) {\n    return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n      // 重新加载实体时不计算计算表达式，只处理只读、必填等\n      if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {\n        return false;\n      }\n      const result = this.analysis(event, expressionObject);\n      if (!result) {\n        return false;\n      }\n      // 必须是主表表达式\n      if (result.expressionTablePaths.length !== 0) {\n        return false;\n      }\n      const index = expressionObject.deps.findIndex((dep: string) => {\n        if (!dep.startsWith(ENTITY_TEMPLATE)) {\n          return false;\n        }\n        const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\n        const depPathInfo = this.getPathInfo(deps.join('/'));\n        if (!depPathInfo) {\n          return false;\n        }\n        if (depPathInfo.paths.length !== 0) {\n          return false;\n        }\n        return true;\n      });\n      return index === -1 ? false : true;\n    });\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        } else {\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs) {\n    let result = null;\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\n    const eventEntityPath = this.getEntityPath(event.path);\n    if (bindingList && bindingList.length > 0) {\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\n      // 使用事件中的主键\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\n        primaryValue = event.id || null;\n        if (!primaryValue) {\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\n        }\n      }\n      if (primaryValue) {\n        const bindingObject = bindingList.findById(primaryValue);\n        if (bindingObject) {\n          result = bindingObject.toJSON();\n        }\n      }\n    }\n    return result;\n  }\n}","import { BindingList, BindingObject } from \"../../binding-data/index\";\nimport { EffectorManager } from \"../effector/effector_manager\";\nimport { Expression } from \"../expression/index\";\nimport { ENTITY_TEMPLATE, STATE_TEMPLATE } from \"../resolver/index\";\nimport { ExpressionUtil } from \"../utils\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class BindingDataAppendObjectEventHandler extends EventHandler {\n  /**\n   * 过滤出需要计算的表达式\n   * @param event event\n   * @returns \n   */\n  public filter(event: Expression.EventArgs): Expression.ExpressionObject[] {\n    // event.path like [\"id:7dd77e50-ebed-4639-b483-d12004603640\", \"formEEUR1E1s\"] or undefined or []\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      // const fullEventPath = event.path || [];\n      // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方\n      // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性\n      const groupExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\n          return false;\n        }\n        const eventTablePaths = this.buildEntityPath(event.path);\n        const info = this.analysis(event, expressionObject);\n        if (!info) {\n          return false;\n        }\n        // const eventEntityPath = this.buildEntityPath(event.path);\n        // 主表新增\n        if (eventTablePaths.length === 0) {\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\n            // 认为主表新增时不需要处理聚合函数\n            return false;\n          }\n        }\n        // 从表或从从表新增\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\n        // 仅处理上级表达式\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\n          return false;\n        }\n        // 不支持跨表\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\n          return false;\n        }\n        const index = expressionObject.deps.findIndex((dep: string) => {\n          // 依赖\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\n            return false;\n          }\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\n            return true;\n          }\n          return false;\n        });\n        return index === -1 ? false : true;\n      });\n      const eventTablePaths = this.buildEntityPath(event.path);\n      // 事件表中表达式（事件表本身的表达式）\n      const relativeExpressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式\n        if (expressionObject.ns !== event.ns) {\n          return false;\n        }\n        const expressionPathInfo = this.getPathInfo(expressionObject.path);\n        // 过滤掉非当前表的表达式\n        if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\n          return false;\n        }\n        // 没有依赖的表达式\n        if (!expressionObject.deps || expressionObject.deps.length < 1) {\n          return true;\n        }\n        // 仅依赖State\n        const onlyDependOnState = expressionObject.deps.every((dep: string) => dep.startsWith(STATE_TEMPLATE));\n        // 仅依赖当前表或上级表\n        // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {\n        //   if (!dep.startsWith(ENTITY_TEMPLATE)) {\n        //     return false;\n        //   }\n        //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);\n        //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\n        //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;\n        // });\n        // if (onlyDependOnState || onlyDependOnCurrentTable) {\n        //   return true;\n        // }\n        if (onlyDependOnState) {\n          return true;\n        }\n        const result = this.analysis(event, expressionObject);\n        if (result && result.distance === 0 && result.isSameTable) {\n          return true;\n        }\n        // 事件表表达式，但依赖下级表的未计算\n        return false;\n      });\n      return groupExpressions.concat(relativeExpressions);\n    }\n    return null;\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        } else {\n          console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n  /**\n   * 新增副作用器\n   * @param event event\n   * @param expressionObject 表达式\n   * @returns \n   */\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\n    const effectTo = expressionObject.bindingType;\n    const eventPath = this.cleanEventPath(event.path);\n    const effector = this.effectorFactory.getEffector(expressionObject);\n    if (!effector) {\n      return;\n    }\n    const info = this.analysis(event, expressionObject);\n    if (!info) {\n      console.warn(`[BindingDataAppendObjectEventHandler][analysis]获取路径信息失败。`);\n      return;\n    }\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\n    if (effectTo === Expression.ExpressionBindingType.Field) {\n      const paths: any[][] = [];\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\n      // 新增场景仅需要计算事件表及事件表上面的表\n      if (info.distance === 0) {\n        if (!info.isSameTable) {\n          return;\n        }\n        // 表达式和事件在同一个表\n        const prevPaths = eventPath.slice(0);\n        if (eventPath.length === 1) {\n          // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径\n          if (event.value && Array.isArray(event.value)) {\n            event.value.forEach((bindingObject: BindingObject) => {\n              paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));\n            });\n          } else {\n            const path = prevPaths.concat(propertyPaths);\n            paths.push(path);\n          }\n        } else {\n          // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键\n          if (event.value && Array.isArray(event.value)) {\n            event.value.forEach((bindingObject: BindingObject) => {\n              paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));\n            });\n          } else {\n            const bindingList = this.bindingData.getValue(info.eventTablePaths) as BindingList;\n            if (bindingList && bindingList.currentId) {\n              paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));\n            }\n          }\n        }\n      } else {\n        // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据\n        if (info.eventFromParent === true) {\n          // 在过滤时这种情况的应该就排除掉了\n          console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);\n          return;\n        } else if (info.eventFromChildren === true) {\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\n          const path = prevPaths.concat(propertyPaths);\n          paths.push(path);\n        } else {\n          console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);\n          return;\n        }\n      }\n      paths.forEach((path: any[]) => {\n        const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);\n        this.output(event, expressionObject, currentRows, effector, [path]);\n      });\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\n      console.error('not supported！');\n    }\n  }\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\n    const context = this.buildContext(expressionObject, event, null, currentRows);\n    const value = this.perform(expressionObject, context);\n    if (value === undefined) {\n      return;\n    }\n    expressionObject.result = value;\n    if (expressionObject.id) {\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\n    }\n    EffectorManager.effect(effector, { eventType: event.type, ...expressionObject }, paths);\n  }\n}","import { EffectorManager } from '../effector/effector_manager';\nimport { BindingList } from '../../binding-data/index';\nimport { DataPropInfo } from '../../entity/index';\nimport { Entity, EntityList } from '../../entity/index';\nimport { Expression } from '../expression/index';\nimport { ENTITY_TEMPLATE } from '../resolver/index';\nimport { ExpressionUtil } from '../utils/expression_util';\nimport { EventHandler } from './event_handler';\n\nexport class BindingDataValueChangeEventHandler extends EventHandler {\n\n  public filter(event: Expression.EventArgs) {\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        const deps = expressionObject.deps;\n        if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {\n          return false;\n        }\n        const eventEntityPaths = this.getEntityPath(event.path);\n        eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);\n        return deps.includes(eventEntityPaths.join('/'));\n      });\n    }\n    return null;\n  }\n\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n\n  /**\n   * 输出副作用\n   * @param event event\n   * @param expressionObject 表达式\n   * @returns \n   */\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\n    // 首先计算当前表达式和事件会影响那些路径\n    const effector = this.effectorFactory.getEffector(expressionObject);\n    if (!effector) {\n      return;\n    }\n    const result = this.analysis(event, expressionObject);\n    if (!result) {\n      return;\n    }\n    const eventPaths = this.cleanEventPath(event.path);\n    const paths: any[][] = [];\n    if (result.distance === 0) {\n      // 值变化之后影响到了一个表内字段或影响到了同级表字段\n      if (result.isSameTable === false) {\n        // 同级表跳过\n        console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\n        return;\n      }\n      const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\n      const path = prevPaths.concat(result.expressionPropertyNames);\n      const currentRows = this.buildCurrentRows(result.eventTablePaths, path);\n      paths.push(path);\n      this.output(event, expressionObject, currentRows, effector, paths);\n    } else {\n      if (result.eventFromChildren === true) {\n        if (result.distance > 1) {\n          return;\n        }\n        // 下级表值变化影响到了上级表的表达式\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);\n        const path = prevPaths.concat(result.expressionPropertyNames);\n        paths.push(path);\n        const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);\n        this.output(event, expressionObject, currentRows, effector, paths);\n      } else if (result.eventFromParent === true) {\n        if (result.distance > 1) {\n          console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);\n          return;\n        }\n        // 上级表值变化影响到了下级表的表达式\n        const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);\n        // 添加下级表nodecode到路径中\n        prevPaths.push(result.expressionTablePaths.slice(0).pop());\n        // 遍历子表\n        const bindingPaths = result.expressionTablePaths;\n        const primaryKeyValue = eventPaths[0];\n        if (!primaryKeyValue) {\n          return;\n        }\n        let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);\n        // prevPaths like [1,c,1.1,cc]\n        for (let index = 1; index < prevPaths.length; index++) {\n          const propertyName = prevPaths[index];\n          if (object instanceof EntityList) {\n            object = object.get(propertyName);\n          } else {\n            object = object[propertyName];\n          }\n        }\n        const list = object;\n        if (list && list instanceof EntityList && list.count() > 0) {\n          for (let entity of list) {\n            if (entity && entity.primaryValue) {\n              const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);\n              const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);\n              this.output(event, expressionObject, currentRows, effector, [path]);\n            }\n          }\n        }\n      } else {\n        // 跨表\n      }\n    }\n  }\n  public output(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject, currentRows: Expression.ICurrentRow[], effector: Expression.Effector, paths: any[][]) {\n    const context = this.buildContext(expressionObject, event, null, currentRows);\n    const value = this.perform(expressionObject, context);\n    if (value === undefined) {\n      return;\n    }\n    expressionObject.result = value;\n    if (expressionObject.id) {\n      this.expressionResult.set(expressionObject.id, expressionObject.result);\n    }\n    EffectorManager.effect(effector, expressionObject, paths);\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    event = JSON.parse(JSON.stringify(event));\n    let result = null;\n    const bindingList: BindingList = this.bindingData.getValue(paths) as BindingList;\n    const eventEntityPath = this.getEntityPath(event.path);\n    if (bindingList && bindingList.length > 0) {\n      let primaryValue = bindingList.currentItem.primaryKeyValue || null;\n      // 使用事件中的主键\n      const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);\n      if (childrenPaths && childrenPaths.toString() === paths.toString()) {\n        // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id\n        primaryValue = event.id || null;\n        if (!primaryValue) {\n          primaryValue = this.getEventId(event.path, paths[paths.length - 1]);\n        }\n      }\n      if (primaryValue) {\n        const bindingObject = bindingList.findById(primaryValue);\n        if (bindingObject) {\n          result = bindingObject.toJSON();\n        }\n      }\n    }\n    return result;\n  }\n}","import { EffectorManager } from \"../effector/effector_manager\";\nimport { Expression } from \"../expression\";\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\nimport { ExpressionUtil } from \"../utils/expression_util\";\nimport { EventHandler } from \"./event_handler\";\n\n/**\n * 删除数据时需要计算的表达式\n * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）\n */\nexport class BindingDataRemoveObjectEventHandler extends EventHandler {\n\n  /**\n   * 过滤出需要计算的表达式\n   * @param event event\n   * @returns \n   */\n  public filter(event: Expression.EventArgs) {\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      // 找到聚合相关表达式\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {\n          return false;\n        }\n        const info = this.analysis(event, expressionObject);\n        if (!info) {\n          return false;\n        }\n        // event.path like [id:xxxx] or [id:xxxx,子表s]\n        const eventTablePaths = this.buildEntityPath(event.path);\n        // 主表删除\n        if (eventTablePaths.length === 0) {\n          if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {\n            return false;\n          }\n        }\n        // 从表或从从表删除\n        eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);\n        // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增\n        // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']\n        // 仅处理上级表达式\n        if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {\n          return false;\n        }\n        // 不支持跨表\n        if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\n          return false;\n        }\n        const index = expressionObject.deps.findIndex((dep: string) => {\n          // 依赖\n          if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {\n            return false;\n          }\n          const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);\n          const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));\n          if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {\n            return true;\n          }\n          return false;\n        });\n        return index === -1 ? false : true;\n      });\n      return expressions;\n    }\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 删除副作用器\n   * @param event event\n   * @param expressionObject 表达式\n   * @returns \n   */\n  public effect(event: Expression.EventArgs, expressionObject: Expression.ExpressionObject): void {\n    const effectTo = expressionObject.bindingType;\n    const eventPath = this.cleanEventPath(event.path);\n    const effector = this.effectorFactory.getEffector(expressionObject);\n    if (!effector) {\n      return;\n    }\n    const info = this.analysis(event, expressionObject);\n    if (!info) {\n      console.warn(`[BindingDataRemoveObjectEventHandler][analysis]获取路径信息失败。`);\n      return;\n    }\n    const expressionPaths = expressionObject.path.split('/').filter(p => p);\n    if (effectTo === Expression.ExpressionBindingType.Field) {\n      const paths: any[][] = [];\n      const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);\n      // 删除场景仅需要计算事件表上面的表\n      if (info.distance !== 0) {\n        // 表达式和事件不在同一个表，即下级表删除了一批数据\n        if (info.eventFromParent === true) {\n          // 在过滤时这种情况的应该就排除掉了\n          console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);\n          return;\n        } else if (info.eventFromChildren === true) {\n          const prevPaths = eventPath.slice(0, eventPath.length - 1);\n          const path = prevPaths.concat(propertyPaths);\n          paths.push(path);\n        } else {\n          console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);\n          return;\n        }\n      }\n      EffectorManager.effect(effector, expressionObject, paths);\n    } else if (effectTo === Expression.ExpressionBindingType.State) {\n      console.error('not supported！');\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { Expression } from \"../expression/index\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class BindingDataLoadEventHandler extends EventHandler {\n  public filter(event: Expression.EventArgs) {\n    // 过滤第一次空load\n    if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {\n      return null;\n    }\n    // 数据加载完成后需要计算当前绑定路径下的只读、必填、校验表达式\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      const expressions = this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate )) {\n          return false;\n        }\n        const result = this.analysis(event, expressionObject);\n        if (!result) {\n          return false;\n        }\n        return result.distance === 0 && result.isSameTable;\n      });\n      return expressions;\n    } else {\n      return null;\n    }\n  }\n  /**\n   * 发布事件\n   * @param event event\n   */\n  public dispatch(event: Expression.EventArgs) {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n  /**\n   * 获取子表事件行\n   * @param paths \n   * @param event \n   * @returns \n   */\n  public getCurrentRowByEvent(paths: string[], event: Expression.EventArgs): null | { [prop: string]: any } {\n    return this.getCurrentRowByPaths(paths);\n  }\n}","import { Expression } from \"../expression/index\";\nimport { ENTITY_TEMPLATE } from \"../resolver/index\";\nimport { EventHandler } from \"./event_handler\";\n\nexport class BindingDataSelectionChangedEventHandler extends EventHandler {\n\n  /**\n   * 过滤出需要计算的表达式\n   * @param event event\n   * @returns \n   */\n  public filter(event: Expression.EventArgs) {\n    if (this.expressionObjects && this.expressionObjects.length > 0) {\n      return this.expressionObjects.filter((expressionObject: Expression.ExpressionObject) => {\n        const deps = expressionObject.deps;\n        // 没有依赖的表达式不需要关注\n        if (!deps || deps.length < 1) {\n          return false;\n        }\n        // 不依赖实体的表达式不需要关注\n        let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));\n        if (index === -1) {\n          return false;\n        }\n        const result = this.analysis(event, expressionObject);\n        if (!result) {\n          return false;\n        }\n        // 只关注从表行切换\n        if (result.eventTablePaths.length !== 1) {\n          return false;\n        }\n        // 只关注从从表表达式\n        if (result.expressionTablePaths.length !== 2) {\n          return false;\n        }\n        // 只关注事件直接下级的表达式，跨表的不需要关注\n        if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {\n          return false;\n        }\n        // 从从表表达式需要依赖上级表\n        index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));\n        if (index === -1) {\n          return false;\n        }\n        return true;\n      });\n    }\n    return null;\n  }\n  public dispatch(event: Expression.EventArgs): void {\n    const expressions = this.filter(event);\n    if (expressions && expressions.length > 0) {\n      expressions.forEach((expressionObject: Expression.ExpressionObject) => {\n        const entityContext = this.buildEntityContext(event, expressionObject);\n        const context = this.buildContext(expressionObject, event, entityContext);\n        const result = this.perform(expressionObject, context);\n        if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {\n          return;\n        }\n        expressionObject.result = result;\n        if (expressionObject.id) {\n          this.expressionResult.set(expressionObject.id, expressionObject.result);\n        }\n        this.effect(event, expressionObject);\n      });\n    }\n  }\n}","import { InjectionToken } from '../../core/index';\nimport { Expression } from './types';\n\n/**\n * 表单模块路径\n */\nexport const ASSIGNER_TOKEN = new InjectionToken('@Farris expression assigner');\nexport const EVENT_HANDLER_TOKEN = new InjectionToken('@Farris_event_handler');","import { Expression } from \"../expression/index\";\nimport { EVENT_HANDLER_TOKEN } from \"../expression/tokens\";\nimport { RepositoryAddEntityEventHandler } from \"./repository_add_entity_event_handler\";\nimport { RepositoryRemoveEntityEventHandler } from \"./repository_remove_entity_event_handler\";\nimport { EntityValueChangedEventHandler } from \"./entity_value_changed_event_handler\";\nimport { StateValueChangedEventHandler } from \"./state_value_changed_event_handler\";\nimport { EntityUpdateEventHandler } from \"./entity_update_event_handler\";\nimport { RepositoryLoadEventHandler } from \"./repository_load_event_handler\";\nimport { BindingDataAppendObjectEventHandler } from \"./binding_data_append_object_event_handler\";\nimport { BindingDataValueChangeEventHandler } from \"./binding_data_value_change_event_handler\";\nimport { BindingDataRemoveObjectEventHandler } from \"./binding_data_remove_object_event_handler\";\nimport { BindingDataLoadEventHandler } from \"./binding_data_load_event_handler\";\nimport { BindingDataSelectionChangedEventHandler } from \"./binding_data_selection_changed_event_handler\";\nimport { ViewModelContext } from '../../view-model/index';\n\nexport class EventHandlerRegistry {\n\n  public handlers: Expression.IEventHandler[];\n\n  constructor(protected viewModelContext: ViewModelContext) {\n    this.handlers = this.viewModelContext.injector.get(EVENT_HANDLER_TOKEN) as Expression.IEventHandler[];\n  }\n\n  /**\n   * 实体值变化处理器\n   */\n  public get entityValueChangedEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityValueChangedEventHandler);\n  }\n  /**\n   * 状态值变化处理器\n   */\n  public get stateValueChangedEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof StateValueChangedEventHandler);\n  }\n  public get repositoryAddEntityEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryAddEntityEventHandler);\n  }\n  public get repositoryRemoveEntityEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryRemoveEntityEventHandler);\n  }\n  public get entityUpdateEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof EntityUpdateEventHandler);\n  }\n  public get repositoryLoadEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof RepositoryLoadEventHandler);\n  }\n  public get bindingDataAppendEntityEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataAppendObjectEventHandler);\n  }\n  public get bindingDataValueChangeEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataValueChangeEventHandler);\n  }\n  public get bindingDataRemoveObjectEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataRemoveObjectEventHandler);\n  }\n  public get bindingDataLoadEventHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataLoadEventHandler);\n  }\n  public get bindingDataSelectionChangedHandler() {\n    return this.handlers && this.handlers.find((handler: Expression.IEventHandler) => handler instanceof BindingDataSelectionChangedEventHandler);\n  }\n}","import { Injector } from \"../../core/index\";\nimport { ViewModelContext } from '../../view-model/index';\n\nimport { Core } from '../core/index';\nimport { ResolverRegistry, ResolveService } from \"../resolver/index\";\nimport { EventHandlerRegistry } from \"../event-handler/index\";\n\nimport { ExpressionRegistry } from \"./expression_registry\";\nimport { ExpressionEventEmitter } from \"./expression_event_emitter\";\nimport { Expression } from './types';\n\nexport class ExpressionEngineImpl {\n\n  private expressionObjects: Array<Expression.ExpressionObject> = new Array<Expression.ExpressionObject>();\n\n  private injector: Injector;\n\n  private expressionRegistry: ExpressionRegistry;\n\n  private expressionEventEmitter: ExpressionEventEmitter;\n\n  private resolverRegistry: ResolverRegistry;\n\n  private eventHandlerRegistry: EventHandlerRegistry;\n\n  private resolveService: ResolveService;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.injector = this.viewModelContext.injector;\n    this.expressionRegistry = this.injector.get(ExpressionRegistry);\n    this.expressionEventEmitter = this.injector.get(ExpressionEventEmitter);\n    this.resolverRegistry = this.injector.get(ResolverRegistry);\n    this.eventHandlerRegistry = this.injector.get(EventHandlerRegistry);\n    this.resolveService = this.injector.get(ResolveService);\n\n    this.expressionRegistry.expressions.subscribe((exprs: Expression.ExpressionObject[]) => {\n      if (exprs && exprs.length > 0) {\n        this.expressionObjects = exprs;\n        // 解析表达式依赖\n        this.resolveDependency();\n      }\n      this.attachEvent();\n    });\n  }\n\n  private attachEvent() {\n    this.expressionEventEmitter.attach().subscribe((events: Expression.EventArgs[]) => {\n      if (!events || events.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1) {\n        return;\n      }\n      events.forEach((event: Expression.EventArgs) => {\n        const handler = this.getEventHandler(event);\n        if (handler) {\n          handler.handleEvent(event, this.expressionObjects);\n        } else {\n          Core.warn(`没有对应的事件处理器,event=${event.type}`);\n        }\n      });\n    });\n  }\n  /**\n   * 解析表达式依赖\n   * @returns \n   */\n  private resolveDependency() {\n    if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1 || !this.expressionObjects || this.expressionObjects.length < 1 || !Array.isArray(this.expressionObjects)) {\n      return;\n    }\n    this.expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\n      const expression = expressionObject.expression;\n      const dependencies = this.resolveService.resolve(expression);\n      expressionObject.deps = dependencies;\n    });\n  }\n  /**\n   * 获取表达式事件处理器\n   * @param event event\n   * @returns \n   */\n  private getEventHandler(event: Expression.EventArgs): Expression.IEventHandler {\n    if (event.type === Expression.EventType.ValueChanged) {\n      // 实体值变化\n      if (event.source === Expression.EventSource.BindingData) {\n        return this.eventHandlerRegistry.bindingDataValueChangeEventHandler;\n      } else if (event.source === Expression.EventSource.Field) {\n        return this.eventHandlerRegistry.entityValueChangedEventHandler;\n      } else if (event.source === Expression.EventSource.State) {\n        return this.eventHandlerRegistry.stateValueChangedEventHandler;\n      }\n    } else if (event.type === Expression.EventType.Append) {\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\n        return this.eventHandlerRegistry.repositoryAddEntityEventHandler;\n      } else if (event.source === Expression.EventSource.BindingData) {\n        return this.eventHandlerRegistry.bindingDataAppendEntityEventHandler;\n      }\n    } else if (event.type === Expression.EventType.Remove) {\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\n        return this.eventHandlerRegistry.repositoryRemoveEntityEventHandler;\n      } else if (event.source === Expression.EventSource.BindingData) {\n        return this.eventHandlerRegistry.bindingDataRemoveObjectEventHandler;\n      }\n    } else if (event.type === Expression.EventType.Update) {\n      if (event.source === Expression.EventSource.Repository) {\n        return this.eventHandlerRegistry.entityUpdateEventHandler;\n      }\n    } else if (event.type === Expression.EventType.Load) {\n      if (event.source === Expression.EventSource.Repository || event.source === Expression.EventSource.Field) {\n        return this.eventHandlerRegistry.repositoryLoadEventHandler;\n      } else if (event.source === Expression.EventSource.BindingData) {\n        return this.eventHandlerRegistry.bindingDataLoadEventHandler;\n      }\n    } else if (event.type === Expression.EventType.SelectionChanged) {\n      if (event.source === Expression.EventSource.BindingData) {\n        return this.eventHandlerRegistry.bindingDataSelectionChangedHandler;\n      }\n    }\n    return null;\n  }\n}\n","import { Injector } from \"../../core/index\";\nimport { ViewModelContext } from \"../../view-model/index\";\n\n/**\n * 表达式计算结果\n */\nexport class ExpressionResult {\n\n  constructor(private viewModelContext: ViewModelContext) {\n  }\n\n  /**\n   * 更新表达式的值\n   * @param expressionId 表达式id\n   * @param result \n   */\n  public set(expressionId: string, result: any) {\n    this[expressionId] = result;\n  }\n}","import { EMPTY, Observable, of } from \"rxjs\";\nimport { Injector } from '../../core/index';\n\nimport { AppContext } from \"../../app/index\";\nimport { Entity, EntityList } from \"../../entity/index\";\nimport { Repository } from \"../../repository/index\";\nimport { BindingData, BindingList, BindingObject } from \"../../binding-data/index\";\nimport { ViewModelContext, ViewModel } from \"../../view-model/index\";\n\nimport { IMessageService, INotifyService, MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from \"../core/index\";\nimport { ENTITY_TEMPLATE, ResolveService } from \"../resolver/index\";\nimport { ExpressionUtil } from \"../utils/expression_util\";\n\nimport { ExpressionExecutor } from \"./expression_executor\";\nimport { ExpressionRegistry } from \"./expression_registry\";\nimport { Expression } from './types';\nimport { ExpressionResult } from \"./expression_result\";\n\n\nexport class ExpressionManager {\n\n  private injector: Injector;\n\n  private resolveService: ResolveService;\n\n  private expressionExecutor: ExpressionExecutor;\n\n  private expressionRegistry: ExpressionRegistry;\n\n  private expressionResult: ExpressionResult;\n\n  private messageService: IMessageService;\n\n  private notifyService: INotifyService;\n\n  constructor(private frameContext: ViewModelContext) {\n    this.injector = this.frameContext.injector;\n    this.resolveService = this.injector.get(ResolveService);\n    this.expressionExecutor = this.injector.get(ExpressionExecutor);\n    this.expressionRegistry = this.injector.get(ExpressionRegistry);\n    this.expressionResult = this.injector.get(ExpressionResult);\n    this.messageService = this.injector.get(MESSAGE_SERVICE_TOKEN, null);\n    this.notifyService = this.injector.get(NOTIFY_SERVICE_TOKEN, null);\n  }\n\n  /**\n   * 根据表达式id进行计算\n   * @param expressionId 表达式id\n   * @param viewModel viewModel\n   * @param rowData rowData\n   * @returns \n   */\n  public eval(expressionId: string, viewModel?: ViewModel, rowData?: any) {\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\n    if (expressionObject) {\n      const customContext: Expression.ICustomContext = {};\n      const bindingPath = viewModel && viewModel.bindingPath || null;\n      if (bindingPath && rowData) {\n        const bindingPaths = bindingPath.split('/').filter(p => p);\n        const bindingList = this.frameContext.bindingData.getValue(bindingPaths) as BindingList;\n        let primaryKey = 'id';\n        if (bindingList) {\n          primaryKey = bindingList.primaryKey;\n        }\n        const primaryValue = rowData[primaryKey];\n        if (primaryValue) {\n          customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue }];\n        }\n      }\n      const result = this.execute(expressionObject.expression, customContext);\n      this.expressionResult.set(expressionId, result);\n      return result;\n    } else {\n      // console.warn('ExpressionManager 执行失败，未获取到表达式!');\n    }\n    return undefined;\n  }\n  public validate(expressionId: string, options: any) {\n    const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\n    if (expressionObject) {\n      const patch = options && options.patch || null;\n      const customContext: Expression.ICustomContext = {};\n      if (patch) {\n        customContext.patch = patch;\n      }\n      const currentRow = options.currentRow || null;\n      if (currentRow) {\n        customContext.currentRows = customContext.currentRows || [];\n        customContext.currentRows.push(currentRow);\n      }\n      const result = this.execute(expressionObject.expression, customContext);\n      this.expressionResult.set(expressionId, result);\n      return result;\n    } else {\n      console.warn('ExpressionManager 执行失败，未获取到表达式!');\n    }\n    return undefined;\n  }\n  /**\n   * 帮助前封装\n   * @param event \n   */\n  public onDataPicking(configs: { expressionId: string }) {\n    const expressionId = configs && configs.expressionId || null;\n    if (!expressionId) {\n      console.warn(`ExpressionManager 相关表达式设置错误，没有表达式编号。`);\n      return of(true);\n    }\n    const result = this.eval(expressionId);\n    if (!result) {\n      const expressionObject = this.expressionRegistry.getExpressionById(expressionId);\n      if (!expressionObject) {\n        console.warn(`ExpressionManager 无法找到对应的表达式${expressionId}`);\n        return of(true);\n      }\n      const messageType = expressionObject.messageType || Expression.MessageType.warning;\n      const message = expressionObject.message;\n      if (message) {\n        this.notifyService[messageType](message, { hideTitle: true });\n      }\n      return EMPTY;\n    }\n    return of(result);\n  }\n  /**\n   * 执行表达式计算\n   * @param expression 表达式\n   * @param customContext 自定义上下文\n   * @returns \n   */\n  private execute(expression: string, customContext?: Expression.ICustomContext): any {\n    const deps = this.resolveService.resolve(expression);\n    const groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);\n    const entityContext = this.buildEntityContext(deps, groupDependencies, customContext);\n    const stateContext = this.buildStateContext();\n    const data = customContext && customContext.contexts || null;\n    const context = {\n      [this.entityOriginalNodeCode]: entityContext,\n      ...stateContext,\n      frameContext: this.frameContext,\n      bindingData: this.frameContext.bindingData,\n      repository: this.frameContext.repository,\n      ...data\n    }\n    if (!entityContext) {\n      return undefined;\n    }\n    return this.expressionExecutor.eval(expression, context);\n  }\n  /**\n   * 执行表达式（返回可观察对象）\n   * @param expression 表达式\n   * @param customContext 自定义上下文\n   * @returns \n   */\n  private executeAsync(expression: string, customContext?: Expression.ICustomContext): Observable<any> {\n    const result = this.execute(expression, customContext);\n    return of(result);\n  }\n  /**\n   * 构造实体上下文\n   * @param deps \n   * @param groupDependencies \n   * @param context \n   * @returns \n   */\n  private buildEntityContext(deps: string[], groupDependencies: string[], context?: Expression.ICustomContext) {\n\n    const currentRows = context && context.currentRows || null;\n    const index = deps.findIndex((dep: string) => {\n      const isEntityDependency = this.isEntityDependency(dep);\n      // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系\n      // 表达式依赖了实体\n      if (isEntityDependency) {\n        const isGroupDependency = groupDependencies.findIndex(item => item === dep) !== -1;\n        // 是聚合依赖\n        if (isGroupDependency) {\n          const dependencyLength = dep.split('/').filter(p => p).length - 1;\n          if (dependencyLength === 1) {\n            // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。\n            return true;\n          } else {\n            // 聚合了子表字段，只需要传递当前实体\n            return false;\n          }\n        } else {\n          // 当前依赖不是聚合，只需要传递当前实体\n          return false;\n        }\n      }\n      return false;\n    })\n    const isGroupdMainEntity = index !== -1;\n\n    const options = {};\n    if (currentRows && currentRows.length > 0) {\n      currentRows.forEach((currentRow: Expression.ICurrentRow) => {\n        options[currentRow.bindingPath || '/'] = currentRow.primaryValue;\n      });\n    }\n    const entity = this.getEntity(options);\n    const patch = context && context.patch || null;\n    if (!entity) {\n      return null;\n    }\n    if (patch && Object.keys(patch).length > 0) {\n      Object.keys(patch).forEach((key: string) => {\n        const paths = key.split('/').filter(p => p);\n        const value = patch[key];\n        this.setValue(entity, paths, value);\n      });\n    }\n    if (isGroupdMainEntity) {\n      const collection = this.frameContext.repository.entityCollection.toJSON();\n      entity['__type__'] = 'List';\n      entity['__items__'] = collection;\n    }\n    return entity;\n  }\n  private setValue(target: any, paths: string[], value: any) {\n    if (paths.length === 1) {\n      target[paths[0]] = value;\n    } else {\n      const propertyName = paths.pop();\n      const result = paths.reduce((object: any, path: string) => {\n        return object && object[path];\n      }, target);\n      result[propertyName] = value;\n    }\n  }\n  /**\n   * 是否为实体依赖\n   * @param dep \n   * @returns \n   */\n  private isEntityDependency(dep: string) {\n    return dep.startsWith(ENTITY_TEMPLATE);\n  }\n  /**\n   * 获取实体\n   * @param options \n   * @returns \n   */\n  public getEntity(options: { [bindingPath: string]: string }) {\n    const entityTypeInfo = this.frameContext.repository.entityTypeInfo;\n    const bindingData = this.frameContext.bindingData;\n    const childrenEntityPaths = [];\n\n    let entity = null;\n    if (options['/']) {\n      // 修正主表\n      entity = this.frameContext.bindingData.list.findById(options['/']);\n      if (entity) {\n        entity = entity.toJSON();\n      }\n    } else {\n      entity = this.frameContext.bindingData.list.currentItem.toJSON();\n    }\n    if (!entity) {\n      return null;\n    }\n    ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);\n    entity['__type__'] = 'Entity';\n    if (!childrenEntityPaths || childrenEntityPaths.length < 1) {\n      return entity;\n    }\n    // 找到所有子表\n    childrenEntityPaths.forEach((paths: string[]) => {\n      let row = null;\n      if (options && options[paths.join('/')]) {\n        // 不应该使用bindingData，这样就默认使用了当前行\n        const bindingList: BindingList = bindingData.getValue(paths) as BindingList;\n        const currentRowId = options[paths.join('/')];\n        let currentRow: BindingObject = null;\n        if (currentRowId !== bindingList.currentId) {\n          currentRow = bindingList.findById(currentRowId);\n        } else {\n          currentRow = bindingList.currentItem;\n        }\n\n        if (currentRow && currentRow.primaryKeyValue) {\n          row = currentRow.toJSON();\n        }\n      } else {\n        // 如果上级表已经切换了当前行，那么下级表也应该切换\n        const parentTableCurrentRowChanged = options && !!Object.keys(options).find(path => {\n          const fullPath = path.split('/').join('/');\n          return paths.join('/').startsWith(fullPath);\n        }) || false;\n        if (parentTableCurrentRowChanged) {\n          const primaryValue = options && options['/'] || bindingData.list.currentId;\n          const entity = this.frameContext.repository.entityCollection.getEntityById(primaryValue);\n          const fullPaths = [];\n          const data = paths.reduce((object, path) => {\n            fullPaths.push(path);\n            const item = object && object[path] as EntityList<Entity>;\n            if (item) {\n              const currentRowId = options && options[fullPaths.join('/')] || item.items[0] && item.items[0].primaryValue || null;\n              if (currentRowId) {\n                const currentRow = item.get(currentRowId);\n                return currentRow || null;\n              }\n            }\n            return null;\n          }, entity) as Entity;\n          if (data) {\n            row = data.toJSON();\n          } else {\n            row = {};\n          }\n        } else {\n          row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);\n        }\n      }\n      const propertyName = paths.pop();\n      let parent = paths.reduce((object: any, path: string) => {\n        return object && object[path] || null;\n      }, entity);\n      const list = parent[propertyName];\n      const node: any = { __items__: [], ...row && row || {}, __type__: 'List' };\n      node.length = () => node.__items__.length;\n      if (list && Array.isArray(list)) {\n        node.__items__ = [].concat(list);\n      }\n      parent[propertyName] = node;\n    });\n    return entity;\n  }\n  /**\n   * 获取主实体原始字段名\n   */\n  protected get entityOriginalNodeCode(): string {\n    const repository = this.injector.get(Repository);\n    return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;\n  }\n  /**\n   * 构造变量上下文\n   * @param event \n   * @returns \n   */\n  public buildStateContext() {\n    const result = {};\n    if (this.frameContext) {\n      const rootFrameContext = this.frameContext.getVirtualRootFrameContext();\n      if (rootFrameContext) {\n        const uiState = rootFrameContext.viewModel.uiState;\n        const propertyNames = Object.getOwnPropertyNames(uiState) || [];\n        propertyNames.forEach((prop: string) => {\n          if (prop.match(/^[a-zA-Z0-9_\\$]+$/g) !== null) {\n            result[prop] = uiState[prop];\n          }\n        });\n      }\n    }\n    return result;\n  }\n}","import { Injector } from \"../../core/index\";\nimport { ExpressionManager } from \"./expression_manager\";;\nimport { ExpressionRegistry } from \"./expression_registry\";\nimport { ExpressionResult } from \"./expression_result\"\nimport { Expression } from \"./types\";\nimport { ViewModelContext, ViewModel } from \"../../view-model/index\";\n\nexport class ExpressionResultFactory {\n\n  private injector: Injector;\n\n  private expressionRegistry: ExpressionRegistry;\n\n  private expressionManager: ExpressionManager;\n\n  private expressionResult: ExpressionResult\n\n  constructor(private viewModelContext: ViewModelContext) {\n\n    this.injector = this.viewModelContext.injector;\n    this.expressionRegistry = this.injector.get(ExpressionRegistry);\n    this.expressionManager = this.injector.get(ExpressionManager);\n    this.expressionResult = this.injector.get(ExpressionResult);\n\n\n    this.registeEvent();\n  }\n  private registeEvent() {\n    this.expressionRegistry.expressions.subscribe((expressionObjects: Expression.ExpressionObject[]) => {\n      // 加载完表达式之后做一次计算\n      expressionObjects.forEach((expressionObject: Expression.ExpressionObject) => {\n        if (expressionObject.deps && expressionObject.deps.length > 0) {\n          return;\n        }\n        const result = this.expressionManager.eval(expressionObject.id);\n        this.expressionResult[expressionObject.id] = result;\n      });\n    });\n  }\n}","import { ViewModelContext } from '../../view-model/index'\n\nexport class EffectUtil {\n    static getFormValueByPath(path, viewModel: ViewModelContext) {\n        if (!viewModel) return null;\n        if (!path) return null;\n        if (!viewModel.bindingData) return null;\n        // 主表\n        if (viewModel.bindingData.bindingPath === '/') {\n            return viewModel.form.getFormValueByBindPath(path)\n        }\n        // 子表\n        if (viewModel.bindingData.bindingPath && viewModel.bindingData.bindingPath.length > 1) {\n            const idnex = path.indexOf(viewModel.bindingData.bindingPath);\n            if (idnex == 0) {\n                path = path.replace(viewModel.bindingData.bindingPath + '/', '');\n                return viewModel.form.getFormValueByBindPath(path)\n            }\n        }\n        return null\n    }\n}","import { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index'\nimport { NAMESPACE } from '../core/index';\nimport { EffectUtil } from './util';\n\nexport class ReadonlyEffector implements Expression.Effector {\n    public ns: string;\n\n    constructor(private viewModelContext: ViewModelContext) {\n        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    }\n    public effect(path: string, value: any, options: Expression.EffectOptions) {\n        let viewModelContext: ViewModelContext;\n        if (options.viewModelId) {\n            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId)\n        } else {\n            return\n        }\n        if (!viewModelContext) return;\n        if (!viewModelContext.form) return;\n        const form_anme = EffectUtil.getFormValueByPath(path, viewModelContext).form_name;\n        if (!form_anme) { return; }\n        if (value === true) {\n            form_anme['readonly'] = true;\n        } else {\n            form_anme['readonly'] = false;\n        }\n        viewModelContext.form.changes.next({ type: 'validateFieldsFinished' })\n    }\n}\n","import { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index'\nimport { NAMESPACE } from '../core/index';\nimport { FormControl } from '../../form'\nimport { EffectUtil } from './util';\n\nexport class ValidateEffector implements Expression.Effector {\n    public ns: string;\n\n    constructor(private viewModelContext: ViewModelContext) {\n        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    }\n    public effect(path: string, value: any, options: Expression.EffectOptions) {\n        //根据路径寻找字段\n        let viewModelContext: ViewModelContext;\n        if (options.viewModelId) {\n            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId)\n        } else {\n            return\n        }\n        if (!viewModelContext) return;\n        if (!viewModelContext.form) return;\n        const formControl = EffectUtil.getFormValueByPath(path, viewModelContext);\n        const form_name = formControl.form_name as FormControl;\n        if (!form_name) {\n            return\n        }\n        // 只认false  为flase认为验证不过\n        if (value === false && options.eventType !== Expression.EventType.Append && options.eventType !== Expression.EventType.Load) {\n            form_name.validationResult = { passing: !value, message: options.message };\n        } else if (value === true) {\n            form_name.validationResult = { passing: true, message: '' }\n        }\n        const validators = [{ \"type\": \"expression\", \"constraints\": [options.expressionId], message: options.message }];\n        viewModelContext.form.addValidate(formControl.bindingPath, formControl.name);\n        form_name.pushValidatorFnforValidate(validators, true);\n    }\n}\n","import { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index'\nimport { FormControl } from '../../form'\nimport { NAMESPACE } from '../core/index';\nimport { EffectUtil } from './util';\n\nexport class RequiredEffector implements Expression.Effector {\n  public ns: string;\n\n  constructor(private viewModelContext: ViewModelContext) {\n    this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n  }\n  public effect(path: string, value: any, options: Expression.EffectOptions) {\n    let viewModelContext: ViewModelContext;\n    if (options.viewModelId) {\n      viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId)\n    } else {\n      return\n    }\n    if (!viewModelContext) return;\n    if (!viewModelContext.form) return;\n    const formControl = EffectUtil.getFormValueByPath(path, viewModelContext);\n    let form_name = formControl.form_name as FormControl;\n    if (!form_name) {\n      return\n    }\n    const validators = [{ \"type\": \"required\", \"constraints\": [true], message: options.message || '必填' }];\n    if (value === true) {\n      viewModelContext.form.addValidate(formControl.bindingPath, formControl.name);\n      form_name.pushValidatorFnforRequired(validators, true);\n      form_name.required = true;\n\n    } else if (value === false) {\n      form_name.required = false\n      if (form_name.getValidatorFn() && form_name.getValidatorFn().length >= 1) {\n        //去除必填\n        form_name.resetValidatorFnforRequired();\n        if (form_name.validationResult && form_name.validationResult.type === 'required') {\n          form_name.validationResult = { passing: true, message: '' };\n        }\n      }\n    }\n    viewModelContext.form.changes.next({ type: 'validateFieldsFinished'})\n  }\n}\n","import { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index'\nimport { NAMESPACE } from '../core/index';\nimport { EffectUtil } from './util';\n\nexport class VisibleEffector implements Expression.Effector {\n    public ns: string;\n\n    constructor(private viewModelContext: ViewModelContext) {\n        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    }\n    public effect(path: string, value: any, options: Expression.EffectOptions) {\n        let viewModelContext: ViewModelContext;\n        if (options.viewModelId) {\n            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId)\n        } else {\n            return\n        }\n        if (!viewModelContext) return;\n        if (!viewModelContext.form) return;\n        const form_anme = EffectUtil.getFormValueByPath(path, viewModelContext).form_name;\n        if (!form_anme) { return; }\n        if (value === true) {\n            form_anme['visible'] = true;\n        } else {\n            form_anme['visible'] = false;\n        }\n        viewModelContext.form.changes.next({ type: 'validateFieldsFinished' })\n    }\n}\n","import { Expression } from '../expression/index';\nimport { ViewModelContext } from '../../view-model/index'\nimport { FormControl } from '../../form'\nimport { NAMESPACE } from '../core/index';\nimport { EffectUtil } from './util';\n\nexport class DependencyEffector implements Expression.Effector {\n    public ns: string;\n\n    constructor(private viewModelContext: ViewModelContext) {\n        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');\n    }\n    public effect(path: string, value: any, options: Expression.EffectOptions) {\n        let viewModelContext: ViewModelContext;\n        if (options.viewModelId) {\n            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId)\n        } else {\n            return\n        }\n        if (!viewModelContext.form) return;\n        const formControl = EffectUtil.getFormValueByPath(path, viewModelContext);\n        let form_name = formControl.form_name as FormControl;\n        if (!form_name) {\n            return\n        }\n        if (value === true) {\n            form_name.value = null;\n            form_name.validationResult = { passing: value, message: '' };\n        }\n    }\n}\n","import { Injector } from '../../core/index';\nimport { ViewModelContext } from '../../view-model/index';\nimport { Expression } from '../expression/index';\nimport { EffectorRegistry } from './effector_registry';\nimport { RepositoryEffector } from './repository_effector';\nimport { UIStateEffector } from './uistate_effector';\nimport { ReadonlyEffector } from './effector_readonly';\nimport { ValidateEffector } from './effector_validate';\nimport { RequiredEffector } from './effector_required';\nimport { VisibleEffector } from './effector_visible';\nimport { DependencyEffector } from './effector_dependency';\n\nexport class EffectorFactory {\n\n  private injector: Injector;\n\n  private effectorRegistry: EffectorRegistry\n\n  constructor(protected viewModelContext: ViewModelContext) {\n    this.injector = this.viewModelContext.injector;\n    this.effectorRegistry = this.injector.get(EffectorRegistry);\n  }\n\n  public getEffector(expressionObject: Expression.ExpressionObject) {\n    const path = expressionObject.path;\n    const ns = expressionObject.ns;\n    const bindingType = expressionObject.bindingType;\n    const type = expressionObject.type;\n    const nsEffectors = this.effectorRegistry.effectors.filter((effector: Expression.Effector) => effector.ns == ns);\n\n    // 计算表达式\n    if (type === Expression.ExpressionType.Compute) {\n      if (bindingType === Expression.ExpressionBindingType.Field) {\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof RepositoryEffector);\n      } else if (bindingType === Expression.ExpressionBindingType.State) {\n        return nsEffectors.find((effector: Expression.Effector) => effector instanceof UIStateEffector);\n      } else {\n        throw new Error(`不支持的绑定字段类型：${bindingType}`);\n      }\n    } else if (type === Expression.ExpressionType.Readonly) {\n      // 只读表达式\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ReadonlyEffector);\n    } else if (type === Expression.ExpressionType.Dependency) {\n      // 依赖表达式\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof DependencyEffector);\n    } else if (type === Expression.ExpressionType.Relative) {\n      // 关联表达式\n      // return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);\n    } else if (type === Expression.ExpressionType.Validate) {\n      // 校验表达式\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof ValidateEffector);\n    } else if (type === Expression.ExpressionType.Required) {\n      // 必填表达式\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof RequiredEffector);\n    } else if (type === Expression.ExpressionType.Visible) {\n      // 显隐表达式\n      return nsEffectors.find((effector: Expression.Effector) => effector instanceof VisibleEffector);\n    } else {\n      // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);\n      return null;\n    }\n  }\n\n}\n","import { StaticProvider } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\n\nimport {\n  EntityDependencyResolver, StateDependencyResolver, ResolverRegistry,\n  CommentDependencyResolver, RESOLVER_TOKEN, ResolveService\n} from './resolver/index';\nimport {\n  RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener\n} from './listener/index';\nimport {\n  RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler,\n  StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler,\n  BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataSelectionChangedEventHandler,\n  BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry\n} from './event-handler/index';\nimport { RepositoryEffector, UIStateEffector,VisibleEffector,DependencyEffector,ValidateEffector,RequiredEffector,ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN } from './effector/index';\n\nimport {\n  ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor,\n  ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory\n} from './expression/index';\n\n/**\n * Resolver\n */\nconst VIEW_MODEL_EXPRESSION_RESOLVER_PROVIDERS: StaticProvider[] = [\n  { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true, deps: [ViewModelContext] },\n  { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true, deps: [ViewModelContext] },\n  { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true, deps: [ViewModelContext] },\n];\n\n/**\n * ChangeListener\n */\nconst VIEW_MODEL_EXPRESSION_LISTENER_PROVIDERS: StaticProvider[] = [\n  { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true, deps: [ViewModelContext] },\n  { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true, deps: [ViewModelContext] },\n  { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true, deps: [ViewModelContext] }\n];\n\n/**\n * EventHandler\n */\nconst VIEW_MODEL_EXPRESSION_EVENT_HANDLER_PROVIDERS: StaticProvider[] = [\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true, deps: [ViewModelContext] },\n  { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true, deps: [ViewModelContext] },\n];\n\n/**\n * Effector\n */\nconst VIEW_MODEL_EXPRESSION_EFFECTOR_PROVIDERS: StaticProvider[] = [\n  { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true, deps: [ViewModelContext] },\n  { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true, deps: [ViewModelContext] }\n];\n\nconst VIEW_MODEL_EXPRESSION_PROVIDERS: StaticProvider[] = [\n  { provide: ResolverRegistry, useClass: ResolverRegistry, deps: [ViewModelContext] },\n  { provide: ResolveService, useClass: ResolveService, deps: [ViewModelContext] },\n  { provide: ListenerRegistry, useClass: ListenerRegistry, deps: [ViewModelContext] },\n  { provide: Listeners, useClass: Listeners, deps: [ViewModelContext] },\n  { provide: EventHandlerRegistry, useClass: EventHandlerRegistry, deps: [ViewModelContext] },\n  { provide: EffectorRegistry, useClass: EffectorRegistry, deps: [ViewModelContext] },\n  { provide: EffectorFactory, useClass: EffectorFactory, deps: [ViewModelContext] },\n  { provide: ExpressionRegistry, useClass: ExpressionRegistry, deps: [ViewModelContext] },\n  { provide: ExpressionEventEmitter, useClass: ExpressionEventEmitter, deps: [ViewModelContext] },\n  { provide: ExpressionExecutor, useClass: ExpressionExecutor, deps: [ViewModelContext] },\n  { provide: ExpressionManager, useClass: ExpressionManager, deps: [ViewModelContext] },\n  { provide: ExpressionResult, useClass: ExpressionResult, deps: [ViewModelContext] },\n  { provide: ExpressionResultFactory, useClass: ExpressionResultFactory, deps: [ViewModelContext] },\n  { provide: ExpressionEngineImpl, useClass: ExpressionEngineImpl, deps: [ViewModelContext] },\n  ...VIEW_MODEL_EXPRESSION_RESOLVER_PROVIDERS,\n  ...VIEW_MODEL_EXPRESSION_LISTENER_PROVIDERS,\n  ...VIEW_MODEL_EXPRESSION_EVENT_HANDLER_PROVIDERS,\n  ...VIEW_MODEL_EXPRESSION_EFFECTOR_PROVIDERS\n];\n\nexport { VIEW_MODEL_EXPRESSION_PROVIDERS };\n","class ControlsProxy {\n    private controlsProxyMap: Map<string, any>;\n\n    constructor() {\n        this.controlsProxyMap = new Map()\n    }\n\n    public setControlProxy(key: string, value: any) {\n        this.controlsProxyMap.set(key, value);\n    }\n\n    public getControlProxy(key: string) {\n        return this.controlsProxyMap.get(key);\n    }\n\n}\n\nexport { ControlsProxy }","import { MetadataUtil } from '../core/index';\nimport { Injector } from '../core/index';\nimport { Entity } from '../entity/index';\nimport { Repository } from '../repository/index';\nimport { Command, CommandBus } from '../command/index';\nimport { BindingData, EntityValueChange, InvokeOnValueChange } from '../binding-data/index';\nimport { UIState } from '../ui-state/index';\nimport { StateMachine } from '../state-machine/index';\nimport { Form } from '../form/index';\nimport { ViewModelContext } from './view_model_context';\n\nimport { COMMAND_METHOD_META, CommandMethodMetadata, Keybinding } from './decorators';\nimport { EMPTY, from, Observable, of } from 'rxjs';\nimport { concatMap, every, tap } from 'rxjs/operators';\n\nimport {\n  ExpressionEngineImpl, ExpressionManager, ExpressionResult, ExpressionResultFactory\n} from '../expression/index';\nimport { ControlsProxy } from '../control-proxy';\n\nabstract class ViewModel {\n\n  /**\n   * 命令元数据集合\n   */\n  public ngCommands: { [propName: string]: CommandMethodMetadata };\n\n  /**\n   * 扩展命令\n   */\n  public extendCommands: Map<string, any> = new Map<string, any>();\n\n  /**\n   * 名称\n   */\n  public id: string;\n\n  /**\n   * 注入器\n   */\n  public injector: Injector;\n\n  /**\n   * 视图模型上下文\n   */\n  public context: ViewModelContext;\n\n  /**\n   * 数据仓库\n   */\n  public repository: Repository<Entity>;\n\n  /**\n   * 绑定路径\n   */\n  public bindingPath: string;\n\n  /**\n   * 数据状态\n   */\n  public bindingData: BindingData;\n\n  /**\n   * UI状态\n   */\n  public uiState: UIState;\n\n  /**\n   * 状态机\n   */\n  public stateMachine: StateMachine;\n\n  /**\n   * 表单\n   */\n  public form: Form;\n\n  /**\n   * 命令总线\n   */\n  public commandBus: CommandBus;\n\n  /**\n   * 快捷键映射\n   */\n  public keybindingMap: Map<string, Keybinding>;\n\n  /** \n   * 控件实例代理\n   */\n  public controlsProxy : ControlsProxy;\n\n\n  /**\n   * 值变化前监听器\n   */\n  private entityValueChangingListeners: Map<string, string>;\n\n  /**\n   * 值变化后监听器\n   */\n  private entityValueChangedListeners: Map<string, string>;\n\n\n\n  public expressionEngineImpl: ExpressionEngineImpl;\n  public expressionManager: ExpressionManager;\n  public expressionResult: ExpressionResult;\n\n\n  /**\n   * 构造函数\n   */\n  public constructor(injector: Injector, id: string) {\n    this.injector = injector;\n    this.id = id;\n  }\n\n  /**\n   * 初始化\n   */\n  public init() {\n    this.initRepository();\n    this.initContext();\n    this.initBindingData();\n    this.initUIState();\n    this.intiStateMachine();\n    this.initForm();\n    this.initCommandBus();\n    this.registerWithParent();\n    this.initListeners();\n    this.closeOldBeSession();\n    this.initExpression();\n    this.initControlsProxy();\n    this.config();\n  }\n  \n  config(){\n    this.uiState.config(this.context);\n  }\n\n  initControlsProxy(){\n    this.controlsProxy = this.injector.get(ControlsProxy);\n  }\n\n  private initRepository() {\n    this.repository = this.injector.get(Repository);\n  }\n\n  private initContext() {\n    this.context = this.injector.get<ViewModelContext>(ViewModelContext);\n    this.context.init(this);\n  }\n\n  public initExpression() {\n\n    const appContext = this.context.appContext;\n    const allViewModelContexts = appContext.viewModelContextManager.getContexts();\n    const existedViewModelContext = allViewModelContexts.find((viewModelContext: any) => {\n      if (viewModelContext.expressionEngineImpl) {\n        return true;\n      } else {\n        return false;\n      }\n    });\n\n    if (existedViewModelContext) {\n      this.expressionEngineImpl = existedViewModelContext.expressionEngineImpl;\n      this.expressionManager = existedViewModelContext.expressionManager;\n      this.expressionResult = existedViewModelContext.expressionResult;\n      return;\n    }  \n\n    this.expressionEngineImpl = this.injector.get<ExpressionEngineImpl>(ExpressionEngineImpl, null);\n    this.expressionManager = this.injector.get<ExpressionManager>(ExpressionManager, null);\n    const expressionResultFactory = this.injector.get<ExpressionResultFactory>(ExpressionResultFactory, null);\n    this.expressionResult = this.injector.get<ExpressionResult>(ExpressionResult, null);\n  }\n\n  private initBindingData() {\n    this.bindingData = this.context.injector.get(BindingData);\n    this.entityValueChangingListeners = new Map<string, string>();\n    this.entityValueChangedListeners = new Map<string, string>();\n    if (this.bindingData) {\n      this.bindingData.setValueChangeInvokerFactory((paths: string[]): InvokeOnValueChange => {\n        return (preValue, value, entityChanged: boolean, primaryValue?: any): Observable<boolean> => {\n          const plainPath = '/' + paths.join('/');\n          let command: string;\n          if (entityChanged === false) {\n            command = this.entityValueChangingListeners[plainPath];\n          } else {\n            command = this.entityValueChangedListeners[plainPath];\n          }\n\n          if (!!command) {\n            const change: EntityValueChange = {\n              paths: paths,\n              preValue: preValue,\n              value: value,\n              changed: entityChanged\n            };\n            const commands = command.split(';').filter(p => p);\n            let valueChangeSuccess = true;\n            return from(commands).pipe(\n              concatMap(item => {\n                if (!valueChangeSuccess) {\n                  return EMPTY;\n                }\n                return this[item](change).pipe(\n                  tap((result: any) => {\n                    valueChangeSuccess = result;\n                  })\n                );\n              }),\n              every((result: any) => result)\n            );\n          } else {\n            return of(true);\n          }\n        };\n\n      });\n    }\n\n    const repositoryName = this.repository.name;\n    const bindingDataManager = this.context.appContext.bindingDataManager;\n    const repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);\n    this.bindingData.initByBindingList(repositoryBindingData.list, this.context, repositoryBindingData.dataTypeInfo);\n  }\n\n  private initUIState() {\n    this.uiState = this.injector.get(UIState);\n  }\n\n  private intiStateMachine() {\n    this.stateMachine = this.injector.get(StateMachine, null);\n    if (!this.stateMachine) {\n      return;\n    }\n    this.stateMachine.init(this.context);\n  }\n\n  private initForm() {\n    this.form = this.injector.get(Form, null);\n    this.form.init();\n  }\n\n  private initCommandBus() {\n    this.commandBus = this.injector.get(CommandBus);\n    this.extendCommandMethods();\n  }\n\n  private extendCommandMethods() {\n    this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);\n    this.keybindingMap = new Map<string, Keybinding>();\n\n    Object.keys(this.ngCommands).forEach((propName: string) => {\n      const ngCommand: CommandMethodMetadata = this.ngCommands[propName];\n\n      Object.defineProperty(this, propName, {\n        value: (eventParams: any) => {\n          const command: Command = {\n            name: ngCommand.name,\n            params: ngCommand.params,\n            paramDescriptions: ngCommand.paramDescriptions,\n            eventParam: eventParams || null\n          };\n          return this.commandBus.dispatch(command);\n        }\n      });\n\n      if (ngCommand.keyBinding) {\n        this.keybindingMap.set(propName, ngCommand.keyBinding);\n      }\n    });\n  }\n\n  /**\n   * 注册扩展命令方法\n   */\n  public registerExtendCommand(commandName: string, commandHandler: any) {\n    Object.defineProperty(this, commandName, {\n      value: (eventParams: any) => {\n        return commandHandler(eventParams, this.context);\n      }\n    });\n    this.extendCommands.set(commandName, commandHandler);\n  }\n\n  private registerWithParent() {\n    const parentContext = this.context.parent;\n    if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {\n      return;\n    }\n\n    const parentViewModel = parentContext.viewModel;\n    const className = this.constructor.name;\n    const propName = parentViewModel['childViewModels'][className];\n    parentViewModel[propName] = this;\n  }\n\n  /**\n   * 关闭老的BeSession\n   */\n  private closeOldBeSession() {\n    const allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();\n    if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {\n      this.context.repository.reset();\n    }\n  }\n\n  /**\n * 从Form获取监听器\n */\n  private initListeners() {\n    const extractPath = (bindingBasePath: string, bindingPath: string): string => {\n      return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');\n    };\n\n    if (this.form) {\n      const valueChangingListeners = this.form.getEntityValueChangingListeners();\n      Object.keys(valueChangingListeners).forEach((bindingPath) => {\n        const plainPath = extractPath(this.bindingPath, bindingPath);\n        this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];\n      });\n\n      const valueChangedListeners = this.form.getEntityValueChangedListeners();\n      Object.keys(valueChangedListeners).forEach((bindingPath) => {\n        const plainPath = extractPath(this.bindingPath, bindingPath);\n        this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];\n      });\n    }\n  }\n\n}\n\nexport { ViewModel };\n","import { StaticProvider } from '../core/index';\nimport { ViewModel } from './view_model';\n\nclass ViewModelOptions {\n\n  id: string;\n\n  /**\n   * 应用providers\n   */\n  providers: StaticProvider[];\n\n  /**\n   * 父ViewModel\n   */\n  parent?: ViewModel;\n\n}\n\nexport { ViewModelOptions };\n","import { Subject, Subscription } from 'rxjs';\n\nclass AppEventBus {\n  /**\n* eventBus\n*/\n  private eventBus: Subject<any>;\n\n  private subscriptionsMap: Map<string, Subscription>;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n    this.eventBus = new Subject();\n    this.subscriptionsMap = new Map<string, Subscription>();\n  }\n\n  triggerEvent(event: any) {\n    this.eventBus.next(event);\n  }\n\n  subscribe(componentId: string, func: Function, funcError?: Function) {\n    if (this.subscriptionsMap.has(componentId) === false) {\n      const subscription = this.eventBus.subscribe(\n        (value) => func(value),\n        (value) => funcError(value)\n      )\n      this.subscriptionsMap.set(componentId, subscription);\n    }\n  }\n  \n  unsubscribe(componentId: string) {\n    if (this.subscriptionsMap.has(componentId) === true) {\n      this.subscriptionsMap.get(componentId).unsubscribe();\n      this.subscriptionsMap.delete(componentId);\n    }\n  }\n\n  /**\n   * 清除注册得指定key名监听器\n   * @param keyStr 监听器key 默认值为listview上注册得\n   * @returns \n   */\n  unsubscribeAllListview(keyStr:string = '-listview-extend'){\n    if(this.subscriptionsMap.size == 0){ return }\n    // @ts-ignore: Unreachable code error\n    for (let key of this.subscriptionsMap.keys()) {\n      if(key.indexOf(keyStr)>0){\n        this.subscriptionsMap.get(key).unsubscribe();\n        this.subscriptionsMap.delete(key);\n      }\n    }\n  }\n}\n\nexport { AppEventBus };","import { StaticProvider, Injector } from '../core/index';\nimport { BindingDataManager } from './binding_data_manager';\nimport { RepositoryManager } from './repository_mananger';\nimport { ViewModelContextManager } from './view_model_contex_manager';\nimport { AppContext } from './app_context';\nimport { AppEventBus } from './app_eventBus';\n\nconst APP_BASE_PROVIDERS: StaticProvider[] = [\n  { provide: AppEventBus, useClass: AppEventBus, deps: [] },\n  { provide: BindingDataManager, useClass: BindingDataManager, deps: [] },\n  { provide: RepositoryManager, useClass: RepositoryManager, deps: [] },\n  { provide: ViewModelContextManager, useClass: ViewModelContextManager, deps: [] },\n  {\n    provide: AppContext, useClass: AppContext,\n    deps: [Injector, AppEventBus, RepositoryManager, BindingDataManager, ViewModelContextManager]\n  }\n];\n\nexport { APP_BASE_PROVIDERS };\n","import { Injector, StaticProvider } from \"../../core\";\nimport { ViewModelContext } from \"../../view-model\";\nimport { ControlStateInterceptorService } from \"./control_state_interceptor.service\";\nimport { ControlStateListener } from \"./control_state_listener\";\nimport { ControlStateUpdater } from \"./control_state_updater\";\n\n\nconst APP_CONTROL_STATE_PROVIDERS: StaticProvider[] = [\n  { provide: ControlStateInterceptorService, useClass: ControlStateInterceptorService, deps: [Injector] }\n\n];\n\nconst VIEW_MODEL_CONTROL_STATE_PROVIDERS: StaticProvider[] = [\n  { provide: ControlStateListener, useClass: ControlStateListener, deps: [ViewModelContext] },\n  { provide: ControlStateUpdater, useClass: ControlStateUpdater, deps: [ViewModelContext] }\n\n];\n\nexport { APP_CONTROL_STATE_PROVIDERS,VIEW_MODEL_CONTROL_STATE_PROVIDERS };\n","import { StaticProvider, Injector, createInjector} from '../core/index';\nimport { AppContext } from './app_context';\nimport { ViewModelContext, ViewModel, ViewModelOptions } from '../view-model/index';\n\nimport { APP_BASE_PROVIDERS } from './providers';\nimport { APP_VARIABLE_PROVIDERS } from '../variable/index';\nimport { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';\nimport { HTTP_PROVIDERS } from '../http/index';\n\nimport { VIEW_MODEL_EXPRESSION_PROVIDERS } from '../expression/index';\nimport { ControlsProxy } from '../control-proxy';\nimport { APP_CONTROL_STATE_PROVIDERS, VIEW_MODEL_CONTROL_STATE_PROVIDERS } from '../ui-state/control-state/providers';\n\n\nclass App {\n\n  public context: AppContext;\n\n  /**\n   * 构造函数\n   */\n  constructor(options: any) {\n\n    options.providers = options.providers || [];\n    const appProviders = [\n      ...APP_BASE_PROVIDERS,\n      ...APP_VARIABLE_PROVIDERS,\n      ...HTTP_PROVIDERS,\n      ...APP_CONTROL_STATE_PROVIDERS,\n      ...options.providers\n    ];\n    const appInjector = createInjector(appProviders);\n    this.context = appInjector.get(AppContext);\n  }\n\n  /**\n   * 启用ViewModel\n   */\n  createViewModel(options: ViewModelOptions): ViewModel {\n\n    const providers = options.providers || [];\n    const parent = options.parent || null;\n\n    const mergedProviders: StaticProvider[] = [\n      { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },\n      { provide: ControlsProxy, useClass: ControlsProxy, deps: [] },\n      ...VIEW_MODEL_COMMAND_PROVIDERS,\n      ...VIEW_MODEL_EXPRESSION_PROVIDERS,\n      ...VIEW_MODEL_CONTROL_STATE_PROVIDERS,\n      ...providers\n    ];\n\n    const parentInjector = parent ? parent.injector : this.context.injector;\n    const injector = createInjector(mergedProviders, parentInjector);\n    const viewModel = injector.get<ViewModel>(ViewModel);\n    viewModel.init();\n    return viewModel;\n  }\n\n}\n\nexport { App };\n","/*\n * StateMachine变量解析\n * @Author: Witt\n * @Date: 2018-12-04 17:09:42\n * @Last Modified by: Witt\n * @Last Modified time: 2019-10-30 11:07:10\n */\n\nimport { AppContext } from '../app/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { CommandContext } from '../command/index';\n\n/**\n * 解析辅助工具类\n */\nclass ParseUtil {\n\n  /**\n   * 获取应用上下文\n   */\n  static getAppContext(context: any): AppContext {\n    if (context instanceof CommandContext) {\n      return context.viewModelContext.appContext;\n    } else if (context instanceof ViewModelContext) {\n      return context.appContext;\n    } else  if (context instanceof AppContext) {\n      return context;\n    } else {\n      throw new Error('上下文中找不到AppContext，请检查！');\n    }\n  }\n\n  /**\n   * 获取当前Frame的Context\n   */\n  static getFrameContext(context: any): ViewModelContext {\n    if (context instanceof CommandContext) {\n      return context.viewModelContext;\n    } else if (context instanceof ViewModelContext) {\n      return context;\n    } else {\n      throw new Error('上下文中找不到FrameContext，请检查！');\n    }\n\n  }\n\n  /**\n   * 获取根Frame的Context\n   */\n  static getRootFrameContext(context: any): ViewModelContext {\n    const frameContext = this.getFrameContext(context);\n    return frameContext.root;\n  }\n\n  /**\n   * 根据frameId获取FrameContext\n   */\n  static getFrameContextById(context: any, frameId: string): ViewModelContext {\n    const appContext = this.getAppContext(context);\n    return appContext.viewModelContextManager.getContextById(frameId);\n  }\n}\n\nexport { ParseUtil };\n","/**\n * 数据源变量解析\n * @author Witt <jiwt@inspur.com>\n */\nimport { AppContext } from '../app/index';\nimport { VariableParser } from './variable_parser';\nimport { ParseUtil } from './parse_util';\n\n/**\n * 数据变量解析\n */\nclass DataVariableParser implements VariableParser {\n\n  /**\n   * 解析变量\n   * @param expression 表达式\n   * @param context 上下文\n   */\n  parse(expression: string, context: any): any {\n    const appContext = ParseUtil.getAppContext(context);\n    const paths: string[] = this.extractPaths(expression);\n\n    // 1、单个的表达式：直接求值\n    if (paths.length === 1 && expression === `{DATA~${paths[0]}}`) {\n      return this.getValue(paths[0], appContext);\n    }\n\n    // 2、其他情况：字符串替换\n    paths.forEach( (path: string) => {\n      const searchValue = `{DATA~${path}}`;\n      const replaceValue = this.getValue(path, appContext);\n      expression = expression.replace(searchValue, replaceValue);\n    });\n\n    return  expression;\n  }\n\n  /**\n   * 提取路径\n   */\n  private extractPaths(expression: string) {\n    const paths: string[]  = [];\n\n    // 查找所有的uiState变量字符串\n    const DATA_PATTERN_G = /\\{DATA~(\\S+?)\\}/g;\n    const dataVariables = expression.match(DATA_PATTERN_G);\n    if (dataVariables === null) {\n      return [];\n    }\n\n    // 提取后边的路径\n    const DATA_PATTERN = /\\{DATA~(\\S+?)\\}/;\n    dataVariables.forEach( dataVariable =>  {\n      const pathMatches = dataVariable.match(DATA_PATTERN);\n      if (pathMatches != null && pathMatches.length === 2) {\n        paths.push(pathMatches[1]);\n      }\n    });\n    return paths;\n  }\n\n  /**\n   * 获取值\n   * @param path 路径：/\n   */\n  private getValue(path: string, appContext: AppContext): any {\n    const parts = path.split('/').filter((part: string) => {\n      return part !== '';\n    });\n\n    const frameContext = appContext.viewModelContextManager.getContextById(parts[0]);\n    if (!frameContext) {\n      throw new Error(`${path}不正确，请检查！`);\n    }\n\n    const bindingData  = frameContext.bindingData;\n    if (!bindingData) {\n      throw new Error(`${path}不正确，请检查！`);\n    }\n    return bindingData.getValue(parts.slice(1));\n  }\n\n\n}\n\nexport { DataVariableParser };\n","/**\n * session变量解析\n * @author Witt <jiwt@inspur.com>\n */\n\nimport { VariableParser } from './variable_parser';\nimport { AppContext } from '../app/index';\nimport { ParseUtil } from './parse_util';\n\n/**\n * 数据变量解析\n */\nclass UIStateVariableParser implements VariableParser {\n\n  /**\n   * 解析变量\n   * @param expression 形如：/frameId/stateName\n   * @param context 上下文\n   */\n  public parse(expression: string, context: any): any {\n\n    const appContext = ParseUtil.getAppContext(context);\n    const paths = this.extractPaths(expression);\n\n    // 1、单个的表达式：直接求值\n    if (paths.length === 1 && expression === `{UISTATE~${paths[0]}}`) {\n      return this.getUIState(paths[0], appContext);\n    }\n\n    // 2、其他情况：字符串替换\n    paths.forEach(path => {\n      const searchValue = `{UISTATE~${path}}`;\n      const replaceValue = this.getUIState(path, appContext);\n      expression = expression.replace(searchValue, replaceValue);\n    });\n\n    return expression;\n  }\n\n  /**\n   * 提取路径\n   * 变量格式：{}\n   */\n  private extractPaths(expression: string): string[] {\n    const paths: string[] = [];\n\n    // 查找所有的uiState变量字符串\n    const UI_STATE_PATTERN_G = /\\{UISTATE~(\\S+?)\\}/g;\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\n    if (uiStateVariables === null) {\n      return [];\n    }\n\n    // 提取后边的路径\n    const UI_STATE_PATTERN = /\\{UISTATE~(\\S+?)\\}/;\n    uiStateVariables.forEach((uiStateVariable: string) => {\n      const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);\n      if (pathMatches != null && pathMatches.length === 2) {\n        paths.push(pathMatches[1]);\n      }\n    });\n\n    return paths;\n  }\n\n  /**\n   * 获取UIState\n   */\n  private getUIState(path: string, appContext: AppContext) {\n    const parts = path.split('/').filter((part: string) => {\n      return part !== '';\n    });\n    const [frameId, stateName] = parts;\n    const frameContext = appContext.viewModelContextManager.getContextById(frameId);\n    let state = frameContext.uiState[stateName];\n    if (state && state.constructor.toString().startsWith('function Date()')) {\n      return this.formatDate(state);\n    }\n    for (let i = 2; i < parts.length; i++) {\n      state = state[parts[i]];\n\n      // 复杂对象一层层查找下去，如果某一层不存在，结果可以是undefined，但是要直接返回undefined避免报错。\n      if (!state) {\n        return state;\n      }\n    }\n    return state;\n  }\n\n  /**\n   * @todo：待删除\n   */\n  private formatDate(value: Date): string {\n    if (!value) {\n      return '';\n    }\n\n    // 年\n    const year = value.getFullYear();\n\n    // 月\n    let month = (value.getMonth() + 1).toString();\n    month = month.length === 1 ? ('0' + month) : month;\n\n    // 日\n    let day = value.getDate().toString();\n    day = day.length === 1 ? ('0' + day) : day;\n    return `${year}-${month}-${day}`;\n  }\n}\n\nexport { UIStateVariableParser };\n","/*\n * StateMachine变量解析\n * @Author: Witt\n * @Date: 2018-12-04 17:09:42\n * @Last Modified by: Witt\n * @Last Modified time: 2019-10-30 11:07:10\n */\nimport { ViewModelContext } from '../view-model/index';\nimport { StateMachine } from '../state-machine/index';\nimport { VariableParser } from './variable_parser';\nimport { ParseUtil } from './parse_util';\n\n/**\n * 状态机变量解析\n * @summary\n *\n * 解析策略：\n * 1、不带frameId，从顶层StateMachine中解析\n * {STATEMACHINE~/states/key}\n * {STATEMACHINE~/renderStates/key}\n *\n * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析\n * {STATEMACHINE~/frameId/states/key}\n * {STATEMACHINE~/frameId/renderStates/key}\n *\n * 存在的问题：\n * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；\n * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；\n * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。\n */\nclass StateMachineVariableParser implements VariableParser {\n\n  /**\n   * 构造函数\n   */\n  public constructor() {\n  }\n\n  /**\n   * 解析变量\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\n   * @param context 上下文\n   */\n  public parse(expression: string, context: any): any {\n    const paths = this.extractPaths(expression);\n\n    // 1、单个的表达式：直接求值\n    if (paths.length === 1 && expression === `{STATEMACHINE~${paths[0]}}`) {\n      return this.getValue(paths[0], context);\n    }\n\n    // 2、其他情况：字符串替换\n    paths.forEach( path => {\n      const searchValue = `{STATEMACHINE~${path}}`;\n      const replaceValue = this.getValue(path, context);\n      expression = expression.replace(searchValue, replaceValue);\n    });\n\n    return  expression;\n  }\n\n  /**\n   * 提取Session变量名\n   * 变量格式：{}\n   */\n  private extractPaths(expression: string): string[] {\n    const paths: string[]  = [];\n\n    // 查找所有的StateMachine变量字符串\n    const STATE_MACHINE_PATTERN_G = /\\{STATEMACHINE~(\\S+?)\\}/g;\n    const stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);\n    if (stateMachineVariables === null) {\n      return [];\n    }\n\n    // 提取后边的路径\n    const STATE_MACHINE_PATTERN = /\\{STATEMACHINE~(\\S+?)\\}/;\n    stateMachineVariables.forEach( sessionVariable =>  {\n      const pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);\n      if (pathMatches != null && pathMatches.length === 2) {\n        paths.push(pathMatches[1]);\n      }\n    });\n\n    return paths;\n  }\n\n  /**\n   * 获取对应的值\n   */\n  private getValue(path: string, context: any): any {\n\n    const pathObj = this.getPathObj(path);\n    const stateMachine = this.getTargetStateMachine(pathObj.frameId, context);\n\n    if (pathObj.type === 'currentState') {\n      return stateMachine.context.state;\n    } else if (pathObj.type === 'renderStates') {\n      return stateMachine[pathObj.name] as boolean;\n    } else {\n      throw new Error(`不支类型为${pathObj.type}的状态机变量`);\n    }\n  }\n\n  /**\n   * 解析path，并获取对应的StateMachine实例\n   */\n  private getTargetStateMachine(frameId: string, context): StateMachine {\n    let targetFrameContext: ViewModelContext;\n    if (frameId) {\n      targetFrameContext = ParseUtil.getFrameContextById(context, frameId);\n    } else {\n      targetFrameContext = ParseUtil.getRootFrameContext(context);\n    }\n\n    if (!targetFrameContext || !targetFrameContext.stateMachine) {\n      throw new Error('找不到对应的状态机实例，请检查！');\n    }\n    return targetFrameContext.stateMachine;\n  }\n\n  /**\n   * 将Path解析为格式化的Path对象\n   */\n  private getPathObj(path: string): any {\n    let parsedPathObj: any;\n    const parts = this.splitPath(path);\n\n    if (parts[0] === 'currentState' || parts[0] === 'renderStates') {\n      parsedPathObj = {\n        frameId: '',\n        type: parts[0],\n        name: parts[1]\n      };\n    } else {\n      parsedPathObj = {\n        frameId: parts[0],\n        type: parts[1],\n        name: parts[2]\n      };\n    }\n\n    return parsedPathObj;\n  }\n\n  /**\n   * 分隔Path\n   */\n  private splitPath(path: string): string[] {\n    const parts = path.split('/').filter((part: string) => {\n      return part !== '';\n    });\n    return parts;\n  }\n\n}\n\nexport { StateMachineVariableParser };\n","/**\n * session变量解析\n * @author Witt <jiwt@inspur.com>\n */\n\nimport { CommandContext } from '../command/index';\nimport { VariableParser } from './variable_parser';\n\n/**\n * 命令变量解析\n * {COMMAND~/params/key}\n * {COMMAND~/results/taskName}\n */\nclass CommandVariableParser implements VariableParser {\n\n  /**\n   * 构造函数\n   */\n  public constructor() {\n  }\n\n  /**\n   * 解析变量\n   * @param expression 变量：格式形如：/frameId/componentId/stateName\n   * @param context 上下文\n   */\n  public parse(expression: string, context: any): any {\n    const paths = this.extractPaths(expression);\n\n    // 1、单个的表达式：直接求值\n    if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {\n      return this.getValue(paths[0], context);\n    }\n\n    // 2、其他情况：字符串替换\n    paths.forEach( path => {\n      const searchValue = `{COMMAND~${path}}`;\n      const replaceValue = this.getValue(path, context);\n      expression = expression.replace(searchValue, replaceValue);\n    });\n\n    return  expression;\n  }\n\n  /**\n   * 提取Session变量名\n   * 变量格式：{}\n   */\n  private extractPaths(expression: string): string[] {\n    const paths: string[]  = [];\n\n    // 查找所有的uiState变量字符串\n    const UI_STATE_PATTERN_G = /\\{COMMAND~(\\S+?)\\}/g;\n    const uiStateVariables = expression.match(UI_STATE_PATTERN_G);\n    if (uiStateVariables === null) {\n      return [];\n    }\n\n    // 提取后边的路径\n    const UI_STATE_PATTERN = /\\{COMMAND~(\\S+?)\\}/;\n    uiStateVariables.forEach( sessionVariable =>  {\n      const pathMatches = sessionVariable.match(UI_STATE_PATTERN);\n      if (pathMatches != null && pathMatches.length === 2) {\n        paths.push(pathMatches[1]);\n      }\n    });\n\n    return paths;\n  }\n\n  /**\n   * 获取UIState\n   */\n  private getValue(path: string, context: any) {\n    if (context instanceof CommandContext === false) {\n      throw new Error('当前上下文不支持COMMAND变量，请检查！');\n    }\n    const parts = path.split('/').filter((part: string) => {\n      return part !== '';\n    });\n\n    const [type, name] = parts;\n    if (type === 'params') {\n      return context.command.params[name];\n    } else if (type === 'results') {\n      return context.results[name];\n    }\n  }\n}\n\nexport { CommandVariableParser };\n","/**\n * 变量解析服务\n * @author Witt<jiwt@inspur.com>\n */\nimport { VariableParser, VARIABLE_PARSERS } from './variable_parser';\nimport { Injector  } from '../core/index';\n\n\n/**\n * 变量解析服务\n * 职责：\n * 1、解析字符串中的变量，并替换成相应的值；\n * 2、对表达式进行求值。\n *\n * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？\n */\nclass VariableParseService {\n\n  /**\n   * 解析器集合\n   */\n  private parsers: VariableParser[];\n\n  /**\n   * 构造变量解析服务\n   * @param parsers 解析器集合\n   */\n  constructor(parsers: VariableParser[]) {\n    this.parsers = parsers;\n  }\n\n  /**\n   * 解析表达式\n   * @param expression 表达式\n   * @param context 上下文\n   */\n  public parse(target: any, context?: any): any {\n    if (typeof target === 'string' && target.length > 0) {\n\n      // 字符串，直接解析\n      return this.parseExpression(target, context);\n\n    } else if (Array.isArray(target)) {\n\n      // 遍历数组\n      target.forEach((item, itemIndex) =>  {\n        if (typeof item === 'string') {\n          target[itemIndex] = this.parseExpression(item, context);\n        } else {\n          target[itemIndex] = this.parse(item, context);\n        }\n      });\n\n    } else if (typeof target === 'object' && target !== null) {\n\n      // 遍历对象可枚举属性\n      const keys = Object.keys(target);\n      keys.forEach(key => {\n        if (typeof target[key] === 'string') {\n          target[key] = this.parseExpression(target[key], context);\n        } else {\n          target[key] = this.parse(target[key], context);\n        }\n      });\n    }\n\n    return target;\n  }\n\n  /**\n   * 表达式求值\n   */\n  public evaluate(expression: string, context?: any): any {\n    const parsedExpression = this.parse(expression, context);\n    return (new Function('return ' + parsedExpression))();\n  }\n\n  /**\n   * 解析表达式\n   * @param expression 表达式\n   * @param context 上下文\n   */\n  private parseExpression(expression: string, context: any): string {\n\n    // 空串直接返回\n    if (expression === '') {\n      return '';\n    }\n\n    this.parsers.forEach(parser => {\n      if (typeof expression === 'string') {\n        expression = parser.parse(expression, context);\n      }\n    });\n    return expression;\n  }\n}\n\nexport { VariableParseService };\n","import { StaticProvider } from '../core/index';\nimport { VARIABLE_PARSERS } from './variable_parser';\nimport { DataVariableParser } from './data_variable_parser';\nimport { UIStateVariableParser } from './ui_state_variable_parser';\nimport { StateMachineVariableParser } from './state_machine_variable_parser';\nimport { CommandVariableParser } from './command_variable_parser';\nimport { VariableParseService } from './variable_parse_service';\n\nconst APP_VARIABLE_PROVIDERS: StaticProvider[] = [\n  { provide: VARIABLE_PARSERS,     useClass: DataVariableParser,         multi: true, deps: [] },\n  { provide: VARIABLE_PARSERS,     useClass: UIStateVariableParser,      multi: true,  deps: [] },\n  { provide: VARIABLE_PARSERS,     useClass: StateMachineVariableParser, multi: true,  deps: [] },\n  { provide: VARIABLE_PARSERS,     useClass: CommandVariableParser,      multi: true,  deps: [] },\n  { provide: VariableParseService, useClass: VariableParseService,       deps: [VARIABLE_PARSERS] },\n];\n\nexport { APP_VARIABLE_PROVIDERS };\n","/* eslint-disable no-case-declarations */\nimport { VariableParseService } from '../../variable/index';\nimport { CommandContext } from '../command_context';\nimport { Injector } from '../../core/index';\n\n/**\n * 任务函数\n * @params result 上一步执行结果\n * @params context 执行上下文\n */\ntype LinkFunc = (context: CommandContext) => boolean;\n\n/**\n * 任务链接\n */\nclass TaskLink {\n\n  /**\n   * 源任务\n   */\n  from: string;\n\n  /**\n   * 目标任务\n   */\n  to: string;\n\n  /**\n   * 执行条件\n   * 1、表达式；\n   * 2、布尔值；\n   * 3、函数\n   */\n  condition: string | boolean| LinkFunc;\n\n  /**\n   * 构造函数\n   */\n  constructor(from: string, to: string, condition: string | boolean| LinkFunc) {\n    this.from = from;\n    this.to   = to;\n    this.condition = condition;\n  }\n\n  /**\n   * 是否能够\n   */\n  public canLink(context: CommandContext): boolean {\n    const type = typeof this.condition;\n    let canLink;\n    switch (type) {\n      case 'boolean':\n        canLink = this.condition as boolean;\n        break;\n      case 'function':\n        canLink = (this.condition as LinkFunc)(context);\n        break;\n      case 'string':\n        const parseService = context.viewModelContext.injector.get(VariableParseService);\n        canLink = parseService.evaluate(this.condition as string, context);\n        break;\n      default:\n        canLink = false;\n        break;\n    }\n    return canLink;\n  }\n}\n\nexport { LinkFunc, TaskLink };\n","/*\n * @Author: Witt\n * @Date: 2018-10-17 14:13:40\n * @Last Modified by: Witt\n * @Last Modified time: 2018-10-17 16:08:34\n */\n\nimport { TaskFunc, TaskNode } from './task_node';\nimport { LinkFunc, TaskLink } from './task_link';\nimport { CommandContext } from '../command_context';\n\n/**\n * 任务执行流程\n */\nclass TaskFlow {\n\n  /**\n   * 节点集合\n   */\n  private nodes: TaskNode[] = [];\n\n  /**\n   * 边集合\n   */\n  private links: TaskLink[] = [];\n\n\n  // #region 节点操作\n\n  /**\n   * 添加节点\n   */\n  public addNode(name: string, func: TaskFunc): void {\n    const node = new TaskNode(name, func);\n    this.nodes.push(node);\n  }\n\n\n  /**\n   * 批量添加链接\n   */\n  public addNodes(nodes: TaskNode[]) {\n    this.nodes = this.nodes.concat(nodes);\n  }\n\n  /**\n   * 在目标节点之前插入一个节点\n   * @param target 目标节点名称\n   * @param name 名称\n   * @param func 函数\n   */\n  public insertNode(target: string, name: string, func: TaskFunc): void {\n    const index = this.findNodeIndex(target);\n    const node = this.createNode(name, func);\n    this.nodes.splice(index, 0, node);\n  }\n\n  /**\n   * 在目标节点之前插入一个节点\n   */\n  public appendNode(target: string, name: string, func: TaskFunc) {\n    const index = this.findNodeIndex(target) + 1;\n    const node = this.createNode(name, func);\n    this.nodes.splice(index, 0, node);\n  }\n\n  /**\n   * 获取节点索引\n   * @param name 名称\n   */\n  private findNodeIndex(name: string): number {\n    return this.nodes.findIndex((node: TaskNode) => {\n      return node.name === name;\n    });\n  }\n\n  /**\n   * 创建任务节点\n   * @param name 名称\n   * @param func 函数\n   */\n  private createNode(name: string, func: TaskFunc): TaskNode {\n    const node = new TaskNode(name, func);\n    return node;\n  }\n\n  // #endregion\n\n\n  // #region 链接操作\n\n  /**\n   * 添加链接\n   * @param name 名称\n   * @param func 函数\n   */\n  public addLink(from: string, to: string, condition: string | boolean) {\n    const link = this.createLink(from, to, condition);\n    this.links.push(link);\n  }\n\n  /**\n   * 批量添加链接\n   */\n  public addLinks(links: TaskLink[]) {\n    this.links = this.links.concat(links);\n  }\n\n  /**\n   * 创建链接\n   */\n  private createLink(from: string, to: string, condition: string | boolean) {\n    const link = new TaskLink(from, to, condition);\n    return link;\n  }\n\n  // #endregion\n\n\n  // #region 流程控制\n  /**\n   * 获取下一个节点\n   * @param from    源节点名称\n   * @param context 上下文\n   */\n  getNext(from?: string, context?: CommandContext): TaskNode {\n    if (!from) {\n      return this.nodes.shift();\n    }\n\n    // 符合满足条件的边\n    const nextLink = this.links.find((link: TaskLink) => {\n      return link.from === from && link.canLink(context);\n    });\n    if (!nextLink) {\n      return;\n    }\n\n    return this.nodes.find((node: TaskNode) => {\n      return node.name === nextLink.to;\n    });\n  }\n\n  // #endregion\n\n  // #region 其他方法\n\n  /**\n   * 克隆任务流\n   */\n  clone() {\n    const taskFlow = new TaskFlow();\n    taskFlow.addNodes(this.nodes);\n    taskFlow.addLinks(this.links);\n    return taskFlow;\n  }\n\n  // #endregion\n}\n\nexport { TaskFlow };\n","import { ViewModelContext } from '../view-model/index';\nimport { Command } from './command';\n\n/**\n * Command上下文\n */\nclass CommandContext {\n\n  /**\n   * 命令实例\n   */\n  command: Command;\n\n  /**\n   * 组件上下文\n   */\n  viewModelContext: ViewModelContext;\n\n  /**\n   * 执行结果\n   */\n  results: {[taskName: string]: any} = {};\n\n  /**\n   * 最新的执行结果\n   */\n  latestResult: any;\n\n  /**\n   * 事件参数\n   */\n  eventParams: any;\n\n  /**\n   * 构造函数\n   * @param command 命令\n   * @param viewModelContext 视图模型上下文\n   */\n  constructor(command: Command, viewModelContext: ViewModelContext) {\n    this.command = command;\n    this.viewModelContext = viewModelContext;\n  }\n\n}\n\nexport { CommandContext };\n","import { Observable, Subject, BehaviorSubject } from 'rxjs';\nimport { concatMap, map, takeLast, take, timeout, throwIfEmpty } from 'rxjs/operators';\n\nimport { createInjectionToken, Injector } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { VariableParseService } from '../variable/index';\n\nimport { Command, CommandParams, ParamDescriptions } from './command';\nimport { CommandContext } from './command_context';\nimport { TaskFunc, TaskFlow } from './flow/index';\n\n\n/**\n * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。\n */\nabstract class CommandHandler {\n\n  /**\n   * 任务流程图\n   */\n  private taskFlow: TaskFlow;\n\n  /**\n   * 上下文\n   */\n  protected viewModelContext: ViewModelContext;\n\n  /**\n   * 变量解析服务\n   */\n  protected parseService: VariableParseService;\n\n  /**\n   * 构造函数\n   */\n  constructor() {\n  }\n\n  /**\n   * 构造执行流程\n   */\n  abstract schedule();\n\n  /**\n   * 初始化\n   */\n  public init(viewModelContext: ViewModelContext) {\n    this.viewModelContext = viewModelContext;\n    this.parseService = viewModelContext.injector.get(VariableParseService);\n    this.taskFlow = new TaskFlow();\n\n    this.schedule();\n  }\n\n  /**\n   * 执行任务\n   * @param command 要执行的命令\n   * @return 最后一个任务的执行结果\n   * @todo：按功能拆分小函数\n   */\n  public execute(command: Command): Observable<any> {\n    const lastTaskResult$ = new Subject();\n    const taskFlow = this.taskFlow.clone();\n\n    // setTimeout暂时不能去掉的原因：\n    // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；\n    // 2、关闭前命令需要延迟执行。\n    setTimeout(() => {\n\n      // 1、解析参数\n      // 避免解析变量时修改了原始的command\n      const { eventParam = null } = {\n        ...command\n      };\n      delete command.eventParam;\n      const commandToExecute = JSON.parse(JSON.stringify(command));\n      commandToExecute.params = this.parseService.parse(commandToExecute.params, this.viewModelContext);\n      command.eventParam = eventParam;\n      commandToExecute.eventParam = eventParam;\n\n      // 2、串联任务流\n      const initContext = new CommandContext(commandToExecute, this.viewModelContext);\n      initContext.eventParams = command.eventParam || null;\n      const context$ = new BehaviorSubject<CommandContext>(initContext);\n      let currentTask = taskFlow.getNext('', initContext);\n      const highOrder$ = context$.pipe(\n        concatMap((context: CommandContext) => {\n          const result$ = currentTask.execute(context);\n          return result$.pipe(\n            take(1),\n            map((result: any) => {\n\n              // 写入执行结果\n              context.results[currentTask.name] = result;\n              context.latestResult = result;\n              currentTask = taskFlow.getNext(currentTask.name, context);\n\n              // 操作控制流\n              if (currentTask) {\n                context$.next(context);\n              } else {\n                context$.complete();\n              }\n\n              // 将结果流转换为context流\n              return context;\n            }),\n            throwIfEmpty(() => {\n              context$.complete();\n            })\n          );\n        })\n      );\n\n      // 3、执行合并后的任务流\n      highOrder$.pipe(\n        takeLast(1)\n      ).subscribe({\n        next: (context: CommandContext) => {\n          lastTaskResult$.next(context.latestResult);\n        },\n        error: (error: any) => {\n          this.displayError(error);\n          lastTaskResult$.error(error);\n        },\n        complete: () => {\n          lastTaskResult$.complete();\n        },\n      });\n\n    }, 0);\n\n    return lastTaskResult$;\n  }\n\n  /**\n   * 显示错误信息\n   */\n  private displayError(error: any) {\n    if (!console || !console.error) {\n      return;\n    }\n    if (!error) {\n      error = 'unknown error';\n    }\n    console.error(error);\n  }\n\n  /**\n   * 添加任务，只有子类可以添加任务，外部不能访问\n   * @param name  任务名称\n   * @param func 任务函数\n   */\n  protected addTask(name: string, func: TaskFunc) {\n    this.taskFlow.addNode(name, func);\n  }\n\n  /**\n   * 添加任务，只有子类可以添加任务，外部不能访问\n   * @param name  任务名称\n   * @param func 任务函数\n   */\n  protected addLink(from: string, to: string, condition: string | boolean) {\n    this.taskFlow.addLink(from, to, condition);\n  }\n\n  /**\n   * 插入任务\n   * @param  name 要扩展的任务名称\n   * @param  func 扩展函数\n   */\n  public insertTask(target: string, name: string, func: TaskFunc) {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * 插入任务\n   * @param  name 要扩展的任务名称\n   * @param  func 扩展函数\n   */\n  public afterTask(target: string, name: string, func: TaskFunc) {\n    throw new Error('Not Implemented');\n  }\n\n  /**\n   * 替换任务\n   * @param  name 要替换的任务名称\n   * @param  func 替换函数\n   */\n  public replaceTask(name: string, func: TaskFunc) {\n    throw new Error('Not Implement');\n  }\n\n  /**\n   * 调用方法\n   */\n  public invoke(serviceInstance: any, method: string, args: any[], context: CommandContext) {\n    this.setContextToServiceInstance(serviceInstance, context);\n    const parsedArgs = this.parseService.parse(args, context);\n    return serviceInstance[method](...parsedArgs);\n  }\n\n  /**\n   * 为服务设置命令上下文\n   * @todo\n   * 通过这种方式存在很大问题：\n   * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；\n   * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。\n   * 建议解决方案：\n   * 1、将context修改为某个特殊属性名；\n   * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，\n   *    这就要求需要使用context的服务需要是实现一个IContext接口。\n   */\n  private setContextToServiceInstance(serviceInstance: any, context: CommandContext) {\n\n    // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖\n    const serviceContext = serviceInstance.context;\n    if (serviceContext && (serviceContext instanceof CommandContext === false)) {\n      return;\n    }\n\n    serviceInstance.context = context;\n  }\n}\n\n/**\n * 命令处理器注入Token\n */\nconst COMMAND_HANDLERS_TOKEN = createInjectionToken('@Farris/devkit COMMAND_HANDLERS_TOKEN');\n\nexport { CommandHandler, COMMAND_HANDLERS_TOKEN };\n","/**\n * 命令处理注册器相关定义\n * @author Witt<jiwt@inspur.com>\n */\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\nimport { COMMAND_HANDLER_META, CommandHandlerMetadata } from './decorators';\nimport { COMMAND_HANDLERS_TOKEN, CommandHandler } from './command_handler';\n\n/**\n * 命令处理注册器\n */\nclass CommandHandlerRegistry {\n\n  /**\n   * CommandHandler Map\n   */\n  private handlerMap: Map<string, CommandHandler>;\n\n  /**\n   * 构造函数\n   * @param handlers 命令处理实例数组\n   */\n  constructor(private injector: Injector) {\n    const handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);\n    this.handlerMap = new Map<string, CommandHandler>();\n    if (handlers) {\n      handlers.forEach((handler: CommandHandler) => {\n        this.regist(handler);\n      });\n    }\n  }\n\n  /**\n   * 添加命令处理\n   * @param  commandName    命令名称\n   * @param  commandHandler 命令处理实例\n   */\n  public set(commandName: string, commandHandler: CommandHandler) {\n    if (this.handlerMap.has(commandName)) {\n      throw new Error(commandName + '对应的CommandHandler已经存在');\n    }\n    this.handlerMap.set(commandName, commandHandler);\n  }\n\n  /**\n   * 获取命令处理\n   * @param   commandName 命令名称\n   * @returns 命令处理实例\n   */\n  public get(commandName: string): CommandHandler {\n    if (this.handlerMap.has(commandName) === false) {\n      throw new Error('找不到' + commandName + '对应的CommandHandler');\n    }\n    return this.handlerMap.get(commandName);\n  }\n\n  /**\n   * 注册命令处理\n   * @param handlers 命令处理实例\n   */\n  public regist(commandHandler: CommandHandler) {\n\n    // 根据metadata获取对应的Command名称\n    const handlerMetadata: CommandHandlerMetadata =\n      MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);\n    if (!handlerMetadata) {\n      throw new Error('CommandHandler必须指定要处理的命令名称');\n    }\n    const commandName = handlerMetadata.commandName;\n    this.set(commandName, commandHandler);\n  }\n\n}\n\nexport { CommandHandlerRegistry };\n","/**\n * 命令处理扩展相关\n * @author Witt<jiwt@inspur.com>\n */\nimport { createInjectionToken, Injector } from '../core/index';\nimport { CommandHandler } from './command_handler';\n\n\nabstract class CommandHandlerExtender {\n\n  /**\n   * 扩展方法\n   * @param handler 要扩展的命令处理器\n   */\n  abstract extend(handler: CommandHandler): CommandHandler;\n\n}\n\n\n/**\n * 命令处理器扩展注入Token\n */\nconst COMMAND_HANDLER_EXTENDERS_TOKEN = createInjectionToken('@farris/devkit COMMAND_HANDLER_EXTENDERS_TOKEN');\n\nexport { CommandHandlerExtender, COMMAND_HANDLER_EXTENDERS_TOKEN };\n","/**\n * 命令处理扩展注册器相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { MetadataUtil, Injector, InjectFlags } from '../core/index';\nimport { COMMAND_HANDLER_EXTENDER_META, CommandHandlerExtenderMetadata } from './decorators';\nimport { COMMAND_HANDLER_EXTENDERS_TOKEN, CommandHandlerExtender } from './command_handler_extender';\n\n/**\n * 命令处理扩展注册器\n */\nclass CommandHandlerExtenderRegistry {\n\n  /**\n   * CommandHandlerExtender实例Map\n   * - key：命令名称\n   * - value：命令扩展实例\n   */\n  private extendersMap: Map<string, CommandHandlerExtender[]>;\n\n  /**\n   * 构造函数\n   * @param extenders 命令扩展实例数组\n   */\n  constructor(private injector: Injector) {\n    const extenders = this.injector.get(COMMAND_HANDLER_EXTENDERS_TOKEN, null, InjectFlags.Optional);\n    this.extendersMap = new Map<string, CommandHandlerExtender[]>();\n    if (extenders) {\n      extenders.forEach((extender: CommandHandlerExtender) => {\n        this.regist(extender);\n      });\n    }\n  }\n\n  /**\n   * 获取命令扩展实例数组\n   * @param   commandName 命令名称\n   * @returns 命令处理扩展实例数组\n   */\n  get(commandName: string): CommandHandlerExtender[] {\n    if (this.extendersMap.has(commandName) === false) {\n      return [];\n    }\n    return this.extendersMap.get(commandName);\n  }\n\n  /**\n   * 添加命令扩展\n   * @param commandName Command名称\n   * @param extender    CommandHandlerExtender实例\n   * @return void\n   */\n  set(commandName: string, extender: CommandHandlerExtender) {\n    if (this.extendersMap.has(commandName)) {\n\n      // 如果commandName对应的扩展已经存在，则在扩展数组中追加\n      this.extendersMap.get(commandName).push(extender);\n    } else {\n\n      // 如果不存在，则创建新的扩展数组，并追加\n      this.extendersMap.set(commandName, [extender]);\n    }\n  }\n\n  /**\n   * 注册命令扩展\n   * @param extender CommandHandlerExtender实例\n   */\n  regist(extender: CommandHandlerExtender) {\n\n    // 通过元数据获取要扩展的Comamnd名称\n    const extenderMetadata: CommandHandlerExtenderMetadata =\n      MetadataUtil.getClassMetadataByName(extender.constructor, COMMAND_HANDLER_EXTENDER_META);\n    if (!extenderMetadata) {\n      throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');\n    }\n    const commandName = extenderMetadata.commandName;\n\n    // 添加到Map中\n    this.set(commandName, extender);\n  }\n\n}\n\nexport { CommandHandlerExtenderRegistry };\n","/**\n * 命令处理器工厂相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { ViewModelContext } from '../view-model/index';\nimport { CommandHandler } from './command_handler';\nimport { CommandHandlerRegistry } from './command_handler_registry';\nimport { CommandHandlerExtender } from './command_handler_extender';\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\n\n/**\n * 命令处理器工厂\n */\nclass CommandHandlerFactory {\n  /**\n   * 构造函数\n   * @param handlerRegistry  命令处理注册器\n   * @param extenderRegistry 命令处理扩展注册器\n   */\n  constructor(\n    private handlerRegistry: CommandHandlerRegistry,\n    private extenderRegistry: CommandHandlerExtenderRegistry,\n    private viewModelContext: ViewModelContext\n  ) {\n  }\n\n  /**\n   * 创建命令处理器\n   * @param   commandName 命令名称\n   * @returns 对应的命令处理器实例\n   */\n  public create(commandName: string): CommandHandler {\n    const rawHandler = this.handlerRegistry.get(commandName);\n    rawHandler.init(this.viewModelContext);\n    const extenders  = this.extenderRegistry.get(commandName);\n\n    // 遍历extenders，依次对handler进行扩展\n    return extenders.reduce((handler: CommandHandler, extender: CommandHandlerExtender) => {\n      return extender.extend(handler);\n    }, rawHandler);\n  }\n\n}\n\nexport { CommandHandlerFactory };\n","/**\n * CommandBus相关定义\n * @author Witt<jiwt@inspur.com>\n */\n\nimport { Observable, BehaviorSubject, Subject } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Injector } from '../core/index';\nimport { Command } from './command';\nimport { CommandHandlerFactory } from './command_handler_factory';\nimport { CommandHandlerRegistry } from './command_handler_registry';\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\n\n\n/**\n * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。\n */\nclass CommandBus {\n\n  /**\n   * handler工厂\n   */\n  private handlerFactory: CommandHandlerFactory;\n\n  /**\n   * 正在执行的命令数量流（请勿使用，后果自负）\n   */\n  public executingCommandCount$: BehaviorSubject<number>;\n\n  /**\n   * 正在执行的命令数量\n   */\n  private executingCommands: Command[];\n\n  /**\n   * 构造函数\n   */\n  public constructor(handlerFactory: CommandHandlerFactory) {\n    this.handlerFactory = handlerFactory;\n    this.executingCommands = [];\n    this.executingCommandCount$ = new BehaviorSubject<number>(this.executingCommands.length);\n  }\n\n  /**\n   * 派发命令\n   * @param command 要派发的命令\n   */\n  public dispatch(command: Command): Observable<any> {\n    const commandResult$ = new Subject();\n    this.executeCommand(command).subscribe({\n        next: (lastTaskResult: any) => {\n          commandResult$.next(lastTaskResult);\n          commandResult$.complete();\n        },\n        complete: () => {\n          commandResult$.complete();\n          this.removeCommandFromExecutingQueue(command);\n        },\n        error: (error: any)  => {\n          commandResult$.error(error);\n          this.removeCommandFromExecutingQueue(command);\n        }\n      });\n    return commandResult$;\n  }\n\n  /**\n   * 执行命令并返回最后一个任务的执行结果流\n   */\n  private executeCommand(command: Command): Observable<any> {\n    this.addCommandToExecutingQueue(command);\n    const commandName = command.name;\n    const handler = this.handlerFactory.create(commandName);\n    const lastTaskResult$ = handler.execute(command);\n    return lastTaskResult$;\n  }\n\n\n  /**\n   * 添加到执行队列\n   */\n  private addCommandToExecutingQueue(command: Command) {\n    this.executingCommands.push(command);\n    this.executingCommandCount$.next(this.executingCommands.length);\n  }\n\n  /**\n   * 从执行队列中移除\n   */\n  private removeCommandFromExecutingQueue(command: Command) {\n    this.executingCommands = this.executingCommands.filter((executingCommand: Command) => {\n      return executingCommand !== command;\n    });\n    this.executingCommandCount$.next(this.executingCommands.length);\n  }\n\n}\n\nexport { CommandBus };\n","import { StaticProvider, Injector } from '../core/index';\nimport { ViewModelContext } from '../view-model/index';\nimport { CommandHandlerRegistry } from './command_handler_registry';\nimport { CommandHandlerExtenderRegistry } from './command_handler_extender_registry';\nimport { CommandHandlerFactory } from './command_handler_factory';\nimport { CommandBus } from './command_bus';\n\nconst VIEW_MODEL_COMMAND_PROVIDERS: StaticProvider[] = [\n  {\n    provide: CommandHandlerRegistry,\n    useClass: CommandHandlerRegistry,\n    deps: [ Injector ]\n  },\n  {\n    provide: CommandHandlerExtenderRegistry,\n    useClass: CommandHandlerExtenderRegistry,\n    deps: [ Injector ]\n  },\n  {\n    provide: CommandHandlerFactory,\n    useClass: CommandHandlerFactory,\n    deps: [ CommandHandlerRegistry, CommandHandlerExtenderRegistry, ViewModelContext ]\n  },\n  {\n    provide: CommandBus,\n    useClass: CommandBus,\n    deps: [ CommandHandlerFactory ]\n  }\n];\n\nexport { VIEW_MODEL_COMMAND_PROVIDERS };\n","/*\n * @Author: aalizzwell \n * @Date: 2019-05-30 11:08:18 \n * @Last Modified by: aalizzwell\n * @Last Modified time: 2019-06-01 17:10:04\n */\n\nimport { IExceptionHandler } from './types';\nexport const EXCEPTION_HANDLER = '@farris/devkit ExceptionHandler';"],"names":["DataChangeType","InjectFlags","of","switchMap","from","map","ModifyType","DataPathNodeType","DataPropGroup","format","parseISO","isDate","isEqual","compareAsc","ChangeType","ViewChangeType","BindingPropertyType","Subject","tslib_1.__values","BindingPropertyUtil","EntityLoadUtil","Observable","EntityFactory","tslib_1.__extends","isObservable","forkJoin","shareReplay","BehaviorSubject","BindingType","tap","BackEndMessage","Expression","EventType","catchError","ExpressionEngineExpression","expressionEngine","ExpressionEngine","ExpressionContext","EMPTY","concatMap","every","take","throwIfEmpty","takeLast"],"mappings":"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"}