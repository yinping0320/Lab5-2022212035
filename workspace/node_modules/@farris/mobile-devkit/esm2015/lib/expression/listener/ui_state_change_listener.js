import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../core/index';
/**
 * 监听UIState变更
 */
class UIStateChangeListener extends ChangeListener {
    /**
     * 构造函数
     */
    constructor(viewModelContext) {
        super();
        this.viewModelContext = viewModelContext;
        this.frameId = this.viewModelContext.id;
        this.uiState = this.viewModelContext.uiState;
        this.namespace = this.viewModelContext.injector.get(NAMESPACE, null);
        this.registerEvent();
    }
    buildEventPath(change) {
        return null;
    }
    registerEvent() {
        if (this.uiState && this.uiState.changes) {
            this.uiState.changes.subscribe((change) => {
                const modification = {
                    ns: this.namespace,
                    path: [change.field],
                    type: Expression.EventType.ValueChanged,
                    value: change.value,
                    source: Expression.EventSource.State,
                    frameId: this.frameId
                };
                // console.log("UIStateChangeListener", modification);
                this.subject.next(modification);
            });
        }
    }
}
export { UIStateChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vbGlzdGVuZXIvdWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNuRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFakQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUkxQzs7R0FFRztBQUNILE1BQU0scUJBQXNCLFNBQVEsY0FBYztJQXNCaEQ7O09BRUc7SUFDSCxZQUFZLGdCQUFrQztRQUM1QyxLQUFLLEVBQUUsQ0FBQztRQUVSLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBQzdDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXJFLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sY0FBYyxDQUFDLE1BQThCO1FBQ2xELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVPLGFBQWE7UUFDbkIsSUFBSSxJQUFJLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFO1lBQ3hDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE1BQThCLEVBQUUsRUFBRTtnQkFDaEUsTUFBTSxZQUFZLEdBQWM7b0JBQzlCLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUztvQkFDbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDcEIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWTtvQkFDdkMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO29CQUNuQixNQUFNLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLO29CQUNwQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU87aUJBQ3RCLENBQUM7Z0JBQ0Ysc0RBQXNEO2dCQUN0RCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztDQUVGO0FBQ0QsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgVUlTdGF0ZSwgVUlTdGF0ZU9ic2VydmFibGVQYXJhbSB9IGZyb20gJy4uLy4uL3VpLXN0YXRlL2luZGV4JztcbmltcG9ydCB7IENoYW5nZUxpc3RlbmVyIH0gZnJvbSAnLi9jaGFuZ2VfbGlzdGVuZXInO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uLy4uL3ZpZXctbW9kZWwvdmlld19tb2RlbF9jb250ZXh0JztcbmltcG9ydCB7IE5BTUVTUEFDRSB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xudHlwZSBFdmVudEFyZ3MgPSBFeHByZXNzaW9uLkV2ZW50QXJncztcblxuXG4vKipcbiAqIOebkeWQrFVJU3RhdGXlj5jmm7RcbiAqL1xuY2xhc3MgVUlTdGF0ZUNoYW5nZUxpc3RlbmVyIGV4dGVuZHMgQ2hhbmdlTGlzdGVuZXIge1xuXG4gIC8qKlxuICAgKiDkuIrkuIvmlodcbiAgICovXG4gIHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dDtcblxuICAvKipcbiAgICog6KeG5Zu+5qih5Z6LaWRcbiAgICovXG4gIHByaXZhdGUgZnJhbWVJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiDlkb3lkI3nqbrpl7RcbiAgICovXG4gIHByaXZhdGUgbmFtZXNwYWNlO1xuXG4gIC8qKlxuICAgKiBVSVN0YXRlXG4gICAqL1xuICBwcml2YXRlIHVpU3RhdGU6IFVJU3RhdGU7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3Iodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xuICAgIHRoaXMuZnJhbWVJZCA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pZDtcbiAgICB0aGlzLnVpU3RhdGUgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQudWlTdGF0ZTtcbiAgICB0aGlzLm5hbWVzcGFjZSA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3Rvci5nZXQoTkFNRVNQQUNFLCBudWxsKTtcblxuICAgIHRoaXMucmVnaXN0ZXJFdmVudCgpO1xuICB9XG5cbiAgcHVibGljIGJ1aWxkRXZlbnRQYXRoKGNoYW5nZTogVUlTdGF0ZU9ic2VydmFibGVQYXJhbSk6IHN0cmluZ1tdIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHByaXZhdGUgcmVnaXN0ZXJFdmVudCgpIHtcbiAgICBpZiAodGhpcy51aVN0YXRlICYmIHRoaXMudWlTdGF0ZS5jaGFuZ2VzKSB7XG4gICAgICB0aGlzLnVpU3RhdGUuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogVUlTdGF0ZU9ic2VydmFibGVQYXJhbSkgPT4ge1xuICAgICAgICBjb25zdCBtb2RpZmljYXRpb246IEV2ZW50QXJncyA9IHtcbiAgICAgICAgICBuczogdGhpcy5uYW1lc3BhY2UsXG4gICAgICAgICAgcGF0aDogW2NoYW5nZS5maWVsZF0sXG4gICAgICAgICAgdHlwZTogRXhwcmVzc2lvbi5FdmVudFR5cGUuVmFsdWVDaGFuZ2VkLFxuICAgICAgICAgIHZhbHVlOiBjaGFuZ2UudmFsdWUsXG4gICAgICAgICAgc291cmNlOiBFeHByZXNzaW9uLkV2ZW50U291cmNlLlN0YXRlLFxuICAgICAgICAgIGZyYW1lSWQ6IHRoaXMuZnJhbWVJZFxuICAgICAgICB9O1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlVJU3RhdGVDaGFuZ2VMaXN0ZW5lclwiLCBtb2RpZmljYXRpb24pO1xuICAgICAgICB0aGlzLnN1YmplY3QubmV4dChtb2RpZmljYXRpb24pO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbn1cbmV4cG9ydCB7IFVJU3RhdGVDaGFuZ2VMaXN0ZW5lciB9O1xuIl19