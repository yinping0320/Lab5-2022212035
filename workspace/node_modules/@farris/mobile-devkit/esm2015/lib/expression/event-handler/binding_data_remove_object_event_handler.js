import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
/**
 * 删除数据时需要计算的表达式
 * 1、依赖被删除数据表的上级表达式（不考虑同表内的聚合依赖）
 */
export class BindingDataRemoveObjectEventHandler extends EventHandler {
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    filter(event) {
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            // 找到聚合相关表达式
            const expressions = this.expressionObjects.filter((expressionObject) => {
                if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                    return false;
                }
                const info = this.analysis(event, expressionObject);
                if (!info) {
                    return false;
                }
                // event.path like [id:xxxx] or [id:xxxx,子表s]
                const eventTablePaths = this.buildEntityPath(event.path);
                // 主表删除
                if (eventTablePaths.length === 0) {
                    if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {
                        return false;
                    }
                }
                // 从表或从从表删除
                eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                // 仅处理上级表达式
                if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                    return false;
                }
                // 不支持跨表
                if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                    return false;
                }
                const index = expressionObject.deps.findIndex((dep) => {
                    // 依赖
                    if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);
                    const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                    if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {
                        return true;
                    }
                    return false;
                });
                return index === -1 ? false : true;
            });
            return expressions;
        }
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 删除副作用器
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    effect(event, expressionObject) {
        const effectTo = expressionObject.bindingType;
        const eventPath = this.cleanEventPath(event.path);
        const effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        const info = this.analysis(event, expressionObject);
        if (!info) {
            console.warn(`[BindingDataRemoveObjectEventHandler][analysis]获取路径信息失败。`);
            return;
        }
        const expressionPaths = expressionObject.path.split('/').filter(p => p);
        if (effectTo === Expression.ExpressionBindingType.Field) {
            const paths = [];
            const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);
            // 删除场景仅需要计算事件表上面的表
            if (info.distance !== 0) {
                // 表达式和事件不在同一个表，即下级表删除了一批数据
                if (info.eventFromParent === true) {
                    // 在过滤时这种情况的应该就排除掉了
                    console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);
                    return;
                }
                else if (info.eventFromChildren === true) {
                    const prevPaths = eventPath.slice(0, eventPath.length - 1);
                    const path = prevPaths.concat(propertyPaths);
                    paths.push(path);
                }
                else {
                    console.warn(`[BindingDataRemoveObjectEventHandler][effect_error]`);
                    return;
                }
            }
            EffectorManager.effect(effector, expressionObject, paths);
        }
        else if (effectTo === Expression.ExpressionBindingType.State) {
            console.error('not supported！');
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
//# sourceMappingURL=data:application/json;base64,