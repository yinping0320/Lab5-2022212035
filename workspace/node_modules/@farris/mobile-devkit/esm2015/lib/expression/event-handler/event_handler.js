import { AppContext } from '../../app/index';
import { EffectorFactory } from '../effector/index';
import { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';
import { ExpressionUtil } from '../utils/expression_util';
export class EventHandler {
    constructor(frameContext) {
        this.frameContext = frameContext;
        this.injector = frameContext.injector;
        this.repository = frameContext.repository;
        this.bindingData = frameContext.bindingData;
        this.expressionRegistry = this.injector.get(ExpressionRegistry, null);
        this.effectorFactory = this.injector.get(EffectorFactory, null);
        this.expressionExecutor = this.injector.get(ExpressionExecutor);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    }
    handleEvent(event, expressionObjects) {
        event = Object.assign({}, event);
        this.expressionObjects = expressionObjects;
        this.dispatch(event);
    }
    //#endregion
    //#region 属性
    /**
     * 主表主键值
     */
    get primaryValue() {
        return this.bindingData.list.currentItem.primaryKeyValue;
    }
    /**
     * 获取主实体原始字段名
     */
    get entityOriginalNodeCode() {
        return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;
    }
    //#endregion
    //#region 表达式核心
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param context 上下文
     * @returns any
     */
    perform(expressionObject, context) {
        return this.expressionExecutor.compile(expressionObject, context);
    }
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    effect(event, expressionObject) {
        const effectTo = expressionObject.bindingType;
        const effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);
            return;
        }
        if (effectTo === Expression.ExpressionBindingType.Field) {
            const effectPaths = expressionObject.effectPaths || [];
            if (effectPaths.length > 0) {
                effectPaths.forEach((path) => {
                    const effectPath = path.split('/');
                    const effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };
                    effector.effect(expressionObject.path, expressionObject.result, effectOptions);
                });
            }
            else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {
                const effectOptions = { message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };
                effector.effect(expressionObject.path, expressionObject.result, effectOptions);
            }
        }
        else {
            throw new Error('not supported！');
        }
    }
    //#endregion
    //#region util
    isValidateOrRequiredExpression(expressionObject) {
        return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);
    }
    /**
     * 以事件参数为依据构建实体路径
     * @param event event
     * @returns
     */
    getEntityPathFromEvent(event) {
        event = JSON.parse(JSON.stringify(event));
        if (!event || !event.path || event.path.length < 1) {
            return [];
        }
        const paths = event.path;
        return this.getEntityPath(paths);
    }
    /**
     * 获取事件路径中的实体路径
     * @param path path
     * @returns
     */
    getEntityPath(path) {
        const paths = path.filter((value, index) => {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    }
    /**
     * 构造实体路径
     * @param path path
     * @description 删除路径中的id字段
     * @returns
     */
    buildEntityPath(path) {
        const paths = path.filter((value, index) => {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    }
    /**
     * 清理事件路径中的id主键标识
     * @param path path
     * @returns
     */
    cleanEventPath(path) {
        path = path.filter(p => {
            if (p && p !== ':') {
                return true;
            }
            else {
                return false;
            }
        });
        return path.map((item) => {
            if (item.includes(':')) {
                return item.split(':')[1];
            }
            else {
                return item;
            }
        });
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByPaths(paths) {
        let result = null;
        const bindingList = this.bindingData.getValue(paths);
        if (bindingList && bindingList.length > 0) {
            let primaryValue = bindingList.currentItem.primaryKeyValue || null;
            if (primaryValue) {
                const bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    }
    /**
     * 获取事件路径中指定子表的事件行
     * @param path
     * @param tableCode
     * @returns
     */
    getEventId(path, tableCode) {
        if (!path || path.length < 1) {
            throw new Error('invalid path!');
        }
        const propertyIndex = path.findIndex(p => p === tableCode);
        if (propertyIndex === -1) {
            return null;
        }
        const idIndex = propertyIndex + 1;
        if (idIndex > path.length - 1) {
            throw new Error('invalid propertyName or path');
        }
        const id = path[idIndex];
        if (id.indexOf(':') === -1) {
            throw new Error('compute error.');
        }
        return id.split(':')[1];
    }
    //#endregion
    //#region  构造上下文
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    buildStateContext(event) {
        const ns = event.ns;
        const appContext = this.injector.get(AppContext, null);
        const frameContexts = appContext.viewModelContextManager.getContextsByNamespace(ns);
        const result = {};
        if (frameContexts && frameContexts.length > 0) {
            const anonymousFrameContext = frameContexts[0];
            const rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                const uiState = rootFrameContext.viewModel.uiState;
                const propertyNames = Object.getOwnPropertyNames(uiState) || [];
                propertyNames.forEach((prop) => {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState[prop];
                    }
                });
            }
        }
        return result;
    }
    /**
     * 获取事件实体
     * @param event
     * @returns
     */
    buildEntityContext(event, expressionObject, currentRows) {
        const expressionBindingType = expressionObject.bindingType;
        if (expressionBindingType === Expression.ExpressionBindingType.Field) {
            const entityTypeInfo = this.repository.entityTypeInfo;
            const childrenEntityPaths = [];
            ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
            // 获取当前行
            const row = currentRows && currentRows.find(row => row.bindingPath === '' || row.bindingPath === '/') || null;
            const primaryValue = row && row.primaryValue || this.bindingData.list.currentId;
            let entity = this.bindingData.list.findById(primaryValue);
            if (!entity) {
                return null;
            }
            const object = entity.toJSON();
            object['__type__'] = 'Entity';
            if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                return object;
            }
            childrenEntityPaths.sort((v1, v2) => v1.length - v2.length);
            // 找到所有子表
            childrenEntityPaths.forEach((paths) => {
                const bindingList = this.bindingData.getValue(paths);
                let currentRowId = bindingList.currentId;
                const propertyName = paths[paths.length - 1];
                // parent 为entity或entitylist或null
                const parent = paths.slice(0, paths.length - 1).reduce((object, path) => {
                    return object && object[path] || null;
                }, object);
                if (!parent) {
                    return;
                }
                const data = parent;
                let node = null;
                if (!currentRowId) {
                    // 当前表没有数据
                    node = { __items__: [], __type__: 'List' };
                    node.length = () => node.__items__.length;
                }
                else {
                    // 纠正当前行
                    if (currentRows && currentRows.length > 0) {
                        // 是否指定了当前行
                        const userAssignCurrentRow = currentRows.find(row => {
                            const bindingPaths = row.bindingPath.split('/').filter(p => p);
                            return bindingPaths.join('/') === paths.join('/');
                        });
                        if (userAssignCurrentRow) {
                            currentRowId = userAssignCurrentRow.primaryValue;
                        }
                    }
                    // 子表当前行
                    const row = bindingList.findById(currentRowId);
                    // 找到子表当前行的上级
                    const list = parent[propertyName];
                    node = Object.assign({ __items__: [] }, row && row.toJSON() || {}, { __type__: 'List' });
                    node.length = () => node.__items__.length;
                    if (list && Array.isArray(list)) {
                        node.__items__ = [].concat(list);
                    }
                }
                data[propertyName] = node;
            });
            return object;
        }
        else if (expressionBindingType === Expression.ExpressionBindingType.State) {
            // todo: 支持状态表达式
        }
        else {
            return null;
        }
    }
    /**
     * 构造表达式计算上下文
     * @param expressionObject 表达式
     * @param event 事件
     * @param entityContext 实体上下文
     * @param currentRows 当前行
     * @returns
     */
    buildContext(expressionObject, event, entityContext, currentRows) {
        let context = [];
        if (entityContext) {
            context.push(entityContext);
        }
        else {
            const entity = this.buildEntityContext(event, expressionObject, currentRows);
            context.push(entity);
        }
        const stateContext = this.buildStateContext(event);
        const entityCode = this.entityOriginalNodeCode;
        let entity = null;
        if (context.length === 1) {
            entity = context.pop();
        }
        else {
            entity = context[0];
            if (!entity['__type__']) {
                entity['__type__'] = 'Entity';
            }
            entity['__items__'] = context;
        }
        return Object.assign({ [entityCode]: entity }, stateContext, { frameContext: this.frameContext, bindingData: this.bindingData, repository: this.repository });
    }
    //#endregion
    /**
     * 构造副作用路径
     * @param event
     * @param expressionObject
     * @returns
     */
    buildEffectPath(event, expressionObject) {
        const expressionPaths = expressionObject.path.split('/').filter(p => p);
        const primaryValue = event.path[0] && event.path[0].split(':')[1];
        if (!primaryValue) {
            throw new Error('Invalid event path!');
        }
        if (expressionPaths.length === 1) {
            // 主表简单字段
            return [primaryValue, expressionPaths.pop()];
        }
        else {
            const result = [primaryValue];
            for (let index = 0; index < expressionPaths.length; index++) {
                const propertyName = expressionPaths[index];
                result.push(propertyName);
                const currentPaths = expressionPaths.slice(0, index + 1);
                const propertyInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);
                if (propertyInfo.group === 'List') {
                    let id = this.getEventId(event.path, propertyInfo.name) || null;
                    // 事件和表达式不是同一个表
                    if (!id) {
                        const bindingList = this.bindingData.getValue(currentPaths);
                        if (bindingList) {
                            id = bindingList.currentId;
                        }
                    }
                    result.push(id);
                }
            }
            return result;
        }
    }
    //#region 辅助方法
    getPathInfo(path) {
        const paths = path.split('/').filter(p => p);
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        const entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        const propertyName = paths.slice(entityPath.length).join('/');
        return { path: entityPath.join('/'), propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(p => p) };
    }
    /**
     * get table paths from event paths
     * @param paths event paths
     * @returns
     */
    getTablePathsFromEventPaths(paths) {
        paths = this.getEntityPath(paths);
        const entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return entityPaths;
    }
    /**
     * get property paths from event paths
     * @param paths event paths
     * @returns
     */
    getPropertyPathsFromEventPaths(paths) {
        paths = this.getEntityPath(paths);
        const tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return paths.slice(tablePaths.length);
    }
    /**
     * 分析事件和表达式的关系
     */
    analysis(event, expressionObject) {
        const expressionPathInfo = this.getPathInfo(expressionObject.path);
        const eventPaths = this.getEntityPath(event.path.slice(0));
        const eventPathInfo = this.getPathInfo(eventPaths.join('/'));
        if (!expressionPathInfo || !eventPathInfo) {
            console.warn(`表达式路径或事件路径错误，获取路径信息失败。`);
            return null;
        }
        const expressionTablePaths = expressionPathInfo.path.split('/').filter(p => p);
        const expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(p => p);
        const eventTablePaths = eventPathInfo.path.split('/').filter(p => p);
        const eventPropertyNames = eventPathInfo.propertyName.split('/').filter(p => p);
        const result = {
            distance: undefined,
            eventFromChildren: undefined,
            eventFromParent: undefined,
            expressionTablePaths,
            expressionPropertyNames,
            eventTablePaths,
            eventPropertyNames,
            isSameTable: false
        };
        result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);
        if (result.distance === 1) {
            result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));
            result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));
        }
        result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');
        return result;
    }
    buildCurrentRows(tablePaths, fullPaths) {
        const currentRows = new Array();
        if (!tablePaths || tablePaths.length < 1) {
            currentRows.push({
                bindingPath: '/',
                primaryValue: fullPaths[0]
            });
        }
        else {
            const paths = [];
            tablePaths.forEach((path, index) => {
                if (index === 0) {
                    currentRows.push({
                        bindingPath: '/',
                        primaryValue: fullPaths[0]
                    });
                }
                paths.push(path);
                const primaryValue = fullPaths[index * 2 + 2];
                currentRows.push({
                    bindingPath: paths.join('/'),
                    primaryValue: primaryValue
                });
            });
        }
        return currentRows;
    }
}
//# sourceMappingURL=data:application/json;base64,