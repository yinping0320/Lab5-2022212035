import { Expression } from "../expression/index";
import { EventHandler } from "./event_handler";
export class BindingDataLoadEventHandler extends EventHandler {
    filter(event) {
        // 过滤第一次空load
        if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {
            return null;
        }
        // 数据加载完成后需要计算当前绑定路径下的只读、必填、校验表达式
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            const expressions = this.expressionObjects.filter((expressionObject) => {
                if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {
                    return false;
                }
                const result = this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                return result.distance === 0 && result.isSameTable;
            });
            return expressions;
        }
        else {
            return null;
        }
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2V2ZW50LWhhbmRsZXIvYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DLE1BQU0sT0FBTywyQkFBNEIsU0FBUSxZQUFZO0lBQ3BELE1BQU0sQ0FBQyxLQUEyQjtRQUN2QyxhQUFhO1FBQ2IsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNySCxPQUFPLElBQUksQ0FBQztTQUNiO1FBQ0QsaUNBQWlDO1FBQ2pDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9ELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBNkMsRUFBRSxFQUFFO2dCQUNsRyxJQUFJLGdCQUFnQixDQUFDLEVBQUUsS0FBSyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxJQUFJLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLElBQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFFLEVBQUU7b0JBQ3RTLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsT0FBTyxNQUFNLENBQUMsUUFBUSxLQUFLLENBQUMsSUFBSSxNQUFNLENBQUMsV0FBVyxDQUFDO1lBQ3JELENBQUMsQ0FBQyxDQUFDO1lBQ0gsT0FBTyxXQUFXLENBQUM7U0FDcEI7YUFBTTtZQUNMLE9BQU8sSUFBSSxDQUFDO1NBQ2I7SUFDSCxDQUFDO0lBQ0Q7OztPQUdHO0lBQ0ksUUFBUSxDQUFDLEtBQTJCO1FBQ3pDLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDLGdCQUE2QyxFQUFFLEVBQUU7Z0JBQ3BFLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdkUsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzFFLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO29CQUNsRixPQUFPO2lCQUNSO2dCQUNELGdCQUFnQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2pDLElBQUksZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUN2QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekU7Z0JBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksb0JBQW9CLENBQUMsS0FBZSxFQUFFLEtBQTJCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvbi9pbmRleFwiO1xuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgQmluZGluZ0RhdGFMb2FkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICAvLyDov4fmu6TnrKzkuIDmrKHnqbpsb2FkXG4gICAgaWYgKCghZXZlbnQucGF0aCB8fCBldmVudC5wYXRoLmxlbmd0aCA9PT0gMCkgJiYgZXZlbnQudmFsdWUgJiYgQXJyYXkuaXNBcnJheShldmVudC52YWx1ZSkgJiYgZXZlbnQudmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgLy8g5pWw5o2u5Yqg6L295a6M5oiQ5ZCO6ZyA6KaB6K6h566X5b2T5YmN57uR5a6a6Lev5b6E5LiL55qE5Y+q6K+744CB5b+F5aGr44CB5qCh6aqM6KGo6L6+5byPXG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbk9iamVjdHMgJiYgdGhpcy5leHByZXNzaW9uT2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZXhwcmVzc2lvbk9iamVjdHMuZmlsdGVyKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcbiAgICAgICAgaWYgKGV4cHJlc3Npb25PYmplY3QubnMgIT09IGV2ZW50Lm5zIHx8IChleHByZXNzaW9uT2JqZWN0LnR5cGUgIT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVhZG9ubHkgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlICE9PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZpc2libGUgJiYgZXhwcmVzc2lvbk9iamVjdC50eXBlICE9PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSAhPT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZSApKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYW5hbHlzaXMoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0LmRpc3RhbmNlID09PSAwICYmIHJlc3VsdC5pc1NhbWVUYWJsZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGV4cHJlc3Npb25zO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIOWPkeW4g+S6i+S7tlxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcbiAgICovXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmlsdGVyKGV2ZW50KTtcbiAgICBpZiAoZXhwcmVzc2lvbnMgJiYgZXhwcmVzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRleHQgPSB0aGlzLmJ1aWxkRW50aXR5Q29udGV4dChldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChleHByZXNzaW9uT2JqZWN0LCBldmVudCwgZW50aXR5Q29udGV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkICYmICF0aGlzLmlzVmFsaWRhdGVPclJlcXVpcmVkRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0KSkge1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCA9IHJlc3VsdDtcbiAgICAgICAgaWYgKGV4cHJlc3Npb25PYmplY3QuaWQpIHtcbiAgICAgICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVmZmVjdChldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIOiOt+WPluWtkOihqOS6i+S7tuihjFxuICAgKiBAcGFyYW0gcGF0aHMgXG4gICAqIEBwYXJhbSBldmVudCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwdWJsaWMgZ2V0Q3VycmVudFJvd0J5RXZlbnQocGF0aHM6IHN0cmluZ1tdLCBldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpOiBudWxsIHwgeyBbcHJvcDogc3RyaW5nXTogYW55IH0ge1xuICAgIHJldHVybiB0aGlzLmdldEN1cnJlbnRSb3dCeVBhdGhzKHBhdGhzKTtcbiAgfVxufSJdfQ==