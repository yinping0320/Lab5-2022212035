import { EffectorManager } from '../effector/effector_manager';
import { EntityList } from '../../entity/index';
import { ENTITY_TEMPLATE } from '../resolver/index';
import { ExpressionUtil } from '../utils/expression_util';
import { EventHandler } from './event_handler';
export class BindingDataValueChangeEventHandler extends EventHandler {
    filter(event) {
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter((expressionObject) => {
                const deps = expressionObject.deps;
                if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                    return false;
                }
                const eventEntityPaths = this.getEntityPath(event.path);
                eventEntityPaths.splice(0, 0, ENTITY_TEMPLATE);
                return deps.includes(eventEntityPaths.join('/'));
            });
        }
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 输出副作用
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    effect(event, expressionObject) {
        // 首先计算当前表达式和事件会影响那些路径
        const effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        const result = this.analysis(event, expressionObject);
        if (!result) {
            return;
        }
        const eventPaths = this.cleanEventPath(event.path);
        const paths = [];
        if (result.distance === 0) {
            // 值变化之后影响到了一个表内字段或影响到了同级表字段
            if (result.isSameTable === false) {
                // 同级表跳过
                console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);
                return;
            }
            const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
            const path = prevPaths.concat(result.expressionPropertyNames);
            const currentRows = this.buildCurrentRows(result.eventTablePaths, path);
            paths.push(path);
            this.output(event, expressionObject, currentRows, effector, paths);
        }
        else {
            if (result.eventFromChildren === true) {
                if (result.distance > 1) {
                    return;
                }
                // 下级表值变化影响到了上级表的表达式
                const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length - 2);
                const path = prevPaths.concat(result.expressionPropertyNames);
                paths.push(path);
                const currentRows = this.buildCurrentRows(result.eventTablePaths, eventPaths);
                this.output(event, expressionObject, currentRows, effector, paths);
            }
            else if (result.eventFromParent === true) {
                if (result.distance > 1) {
                    console.warn(`[BindingDataValueChangeEventHandler]不支持多对多关系。`);
                    return;
                }
                // 上级表值变化影响到了下级表的表达式
                const prevPaths = eventPaths.slice(0, eventPaths.length - result.eventPropertyNames.length);
                // 添加下级表nodecode到路径中
                prevPaths.push(result.expressionTablePaths.slice(0).pop());
                // 遍历子表
                const bindingPaths = result.expressionTablePaths;
                const primaryKeyValue = eventPaths[0];
                if (!primaryKeyValue) {
                    return;
                }
                let object = this.frameContext.repository.entityCollection.getEntityById(primaryKeyValue);
                // prevPaths like [1,c,1.1,cc]
                for (let index = 1; index < prevPaths.length; index++) {
                    const propertyName = prevPaths[index];
                    if (object instanceof EntityList) {
                        object = object.get(propertyName);
                    }
                    else {
                        object = object[propertyName];
                    }
                }
                const list = object;
                if (list && list instanceof EntityList && list.count() > 0) {
                    for (let entity of list) {
                        if (entity && entity.primaryValue) {
                            const path = prevPaths.concat([entity.primaryValue]).concat(result.expressionPropertyNames);
                            const currentRows = this.buildCurrentRows(result.expressionTablePaths, path);
                            this.output(event, expressionObject, currentRows, effector, [path]);
                        }
                    }
                }
            }
            else {
                // 跨表
            }
        }
    }
    output(event, expressionObject, currentRows, effector, paths) {
        const context = this.buildContext(expressionObject, event, null, currentRows);
        const value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        event = JSON.parse(JSON.stringify(event));
        let result = null;
        const bindingList = this.bindingData.getValue(paths);
        const eventEntityPath = this.getEntityPath(event.path);
        if (bindingList && bindingList.length > 0) {
            let primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            const childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
            if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                primaryValue = event.id || null;
                if (!primaryValue) {
                    primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                }
            }
            if (primaryValue) {
                const bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    }
}
//# sourceMappingURL=data:application/json;base64,