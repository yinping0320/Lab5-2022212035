import { EventHandler } from "./event_handler";
export class RepositoryAddEntityEventHandler extends EventHandler {
    /**
     * 获取相关表达式
     * @param event event
     * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段
     */
    filter(event) {
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9hZGRfZW50aXR5X2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfYWRkX2VudGl0eV9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQyxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsWUFBWTtJQUMvRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLEtBQTJCO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUNEOzs7T0FHRztJQUNJLFFBQVEsQ0FBQyxLQUEyQjtRQUN6QyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQyxnQkFBNkMsRUFBRSxFQUFFO2dCQUNwRSxNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsS0FBSyxFQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RFLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxDQUFDO2dCQUMxRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUN2RCxJQUFJLE1BQU0sS0FBSyxTQUFTLElBQUcsQ0FBQyxJQUFJLENBQUMsOEJBQThCLENBQUMsZ0JBQWdCLENBQUMsRUFBRTtvQkFDakYsT0FBTztpQkFDUjtnQkFDRCxnQkFBZ0IsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO2dCQUNqQyxJQUFJLGdCQUFnQixDQUFDLEVBQUUsRUFBRTtvQkFDdkIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ3pFO2dCQUNELElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdkMsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLG9CQUFvQixDQUFDLEtBQWUsRUFBRSxLQUEyQjtRQUN0RSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tIFwiLi4vLi4vZW50aXR5L2luZGV4XCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb25cIjtcbmltcG9ydCB7IEVOVElUWV9URU1QTEFURSB9IGZyb20gXCIuLi9yZXNvbHZlci9pbmRleFwiO1xuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgUmVwb3NpdG9yeUFkZEVudGl0eUV2ZW50SGFuZGxlciBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gIC8qKlxuICAgKiDojrflj5bnm7jlhbPooajovr7lvI9cbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XG4gICAqIEBkZXNjcmlwdGlvbiDkuI3mlK/mjIHkuLvooajnm7TmjqXkvp3otZblrZDooajlsZ7mgKfnmoTmg4XlhrXvvIzlj6rog73ogZrlkIjlrZDooajnmoTlrZfmrrVcbiAgICovXG4gIHB1YmxpYyBmaWx0ZXIoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgLyoqXG4gICAqIOWPkeW4g+S6i+S7tlxuICAgKiBAcGFyYW0gZXZlbnQgZXZlbnRcbiAgICovXG4gIHB1YmxpYyBkaXNwYXRjaChldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuZmlsdGVyKGV2ZW50KTtcbiAgICBpZiAoZXhwcmVzc2lvbnMgJiYgZXhwcmVzc2lvbnMubGVuZ3RoID4gMCkge1xuICAgICAgZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGVudGl0eUNvbnRleHQgPSB0aGlzLmJ1aWxkRW50aXR5Q29udGV4dChldmVudCxleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtKGV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQmJiAhdGhpcy5pc1ZhbGlkYXRlT3JSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uUmVzdWx0LnNldChleHByZXNzaW9uT2JqZWN0LmlkLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDojrflj5blrZDooajkuovku7booYxcbiAgICogQHBhcmFtIHBhdGhzIFxuICAgKiBAcGFyYW0gZXZlbnQgXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHVibGljIGdldEN1cnJlbnRSb3dCeUV2ZW50KHBhdGhzOiBzdHJpbmdbXSwgZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKTogbnVsbCB8IHsgW3Byb3A6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50Um93QnlQYXRocyhwYXRocyk7XG4gIH1cbn0iXX0=