import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE, STATE_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
export class BindingDataAppendObjectEventHandler extends EventHandler {
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    filter(event) {
        // event.path like ["id:7dd77e50-ebed-4639-b483-d12004603640", "formEEUR1E1s"] or undefined or []
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            // const fullEventPath = event.path || [];
            // 找到聚合相关表达式(依赖新增表的表达式),聚合的前提是表达式path位于事件路径的上方
            // 给实体属性或vo变量设置了聚合相关的表达式，此时表达式依赖中路径到子表属性
            const groupExpressions = this.expressionObjects.filter((expressionObject) => {
                if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length < 1) {
                    return false;
                }
                const eventTablePaths = this.buildEntityPath(event.path);
                const info = this.analysis(event, expressionObject);
                if (!info) {
                    return false;
                }
                // const eventEntityPath = this.buildEntityPath(event.path);
                // 主表新增
                if (eventTablePaths.length === 0) {
                    if (expressionObject.bindingType === Expression.ExpressionBindingType.Field) {
                        // 认为主表新增时不需要处理聚合函数
                        return false;
                    }
                }
                // 从表或从从表新增
                eventTablePaths.splice(0, 0, ENTITY_TEMPLATE);
                // eventEntityPath like ['ENTITY~','formEEUR1E1s'] // 从表新增
                // deps like ['ENTITY~/formEEUR1E1s/udt/udt_field','ENTITY~/formEEUR1E1s/ref/ref_udt/ref_udt_field']
                // 仅处理上级表达式
                if (info.eventTablePaths.length - 1 !== info.expressionTablePaths.length) {
                    return false;
                }
                // 不支持跨表
                if (!info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(info.expressionTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                    return false;
                }
                const index = expressionObject.deps.findIndex((dep) => {
                    // 依赖
                    if (!dep.startsWith(eventTablePaths.join(Expression.DEPENDENCY_SPLITER))) {
                        return false;
                    }
                    const deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(p => p).slice(1);
                    const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                    if (dependPathInfo && dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === info.eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {
                        return true;
                    }
                    return false;
                });
                return index === -1 ? false : true;
            });
            const eventTablePaths = this.buildEntityPath(event.path);
            // 事件表中表达式（事件表本身的表达式）
            const relativeExpressions = this.expressionObjects.filter((expressionObject) => {
                // expressionObject.bindingType !== Expression.ExpressionBindingType.Field 暂不支持State表达式
                if (expressionObject.ns !== event.ns) {
                    return false;
                }
                const expressionPathInfo = this.getPathInfo(expressionObject.path);
                // 过滤掉非当前表的表达式
                if (expressionPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) !== eventTablePaths.join(Expression.DEPENDENCY_SPLITER)) {
                    return false;
                }
                // 没有依赖的表达式
                if (!expressionObject.deps || expressionObject.deps.length < 1) {
                    return true;
                }
                // 仅依赖State
                const onlyDependOnState = expressionObject.deps.every((dep) => dep.startsWith(STATE_TEMPLATE));
                // 仅依赖当前表或上级表
                // const onlyDependOnCurrentTable = expressionObject.deps.every((dep: string) => {
                //   if (!dep.startsWith(ENTITY_TEMPLATE)) {
                //     return false;
                //   }
                //   const deps = dep.split(Expression.DEPENDENCY_SPLITER).slice(1);
                //   const dependPathInfo = this.getPathInfo(deps.join(Expression.DEPENDENCY_SPLITER));
                //   return dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER) === eventTablePaths.join(Expression.DEPENDENCY_SPLITER) || eventTablePaths.join(Expression.DEPENDENCY_SPLITER).startsWith(dependPathInfo.paths.join(Expression.DEPENDENCY_SPLITER)) && dependPathInfo.paths.length + 1 == eventTablePaths.length;
                // });
                // if (onlyDependOnState || onlyDependOnCurrentTable) {
                //   return true;
                // }
                if (onlyDependOnState) {
                    return true;
                }
                const result = this.analysis(event, expressionObject);
                if (result && result.distance === 0 && result.isSameTable) {
                    return true;
                }
                // 事件表表达式，但依赖下级表的未计算
                return false;
            });
            return groupExpressions.concat(relativeExpressions);
        }
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                    console.warn(`EventHandler 表达式未设置唯一标识，无法更新表达式值。`);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
    /**
     * 新增副作用器
     * @param event event
     * @param expressionObject 表达式
     * @returns
     */
    effect(event, expressionObject) {
        const effectTo = expressionObject.bindingType;
        const eventPath = this.cleanEventPath(event.path);
        const effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            return;
        }
        const info = this.analysis(event, expressionObject);
        if (!info) {
            console.warn(`[BindingDataAppendObjectEventHandler][analysis]获取路径信息失败。`);
            return;
        }
        const expressionPaths = expressionObject.path.split('/').filter(p => p);
        if (effectTo === Expression.ExpressionBindingType.Field) {
            const paths = [];
            const propertyPaths = expressionPaths.slice(info.expressionTablePaths.length);
            // 新增场景仅需要计算事件表及事件表上面的表
            if (info.distance === 0) {
                if (!info.isSameTable) {
                    return;
                }
                // 表达式和事件在同一个表
                const prevPaths = eventPath.slice(0);
                if (eventPath.length === 1) {
                    // 主表新增，此时事件路径中有主键，直接拼接属性就是完整路径
                    if (event.value && Array.isArray(event.value)) {
                        event.value.forEach((bindingObject) => {
                            paths.push([bindingObject.primaryKeyValue].concat(propertyPaths));
                        });
                    }
                    else {
                        const path = prevPaths.concat(propertyPaths);
                        paths.push(path);
                    }
                }
                else {
                    // 从表或从从表新增，此时事件路径中缺少最后一个层级的主键
                    if (event.value && Array.isArray(event.value)) {
                        event.value.forEach((bindingObject) => {
                            paths.push(prevPaths.concat([bindingObject.primaryKeyValue]).concat(propertyPaths));
                        });
                    }
                    else {
                        const bindingList = this.bindingData.getValue(info.eventTablePaths);
                        if (bindingList && bindingList.currentId) {
                            paths.push(prevPaths.concat(bindingList.currentId).concat(propertyPaths));
                        }
                    }
                }
            }
            else {
                // 表达式和事件不在同一个表，即下级表新增或批量新增了一批数据
                if (info.eventFromParent === true) {
                    // 在过滤时这种情况的应该就排除掉了
                    console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);
                    return;
                }
                else if (info.eventFromChildren === true) {
                    const prevPaths = eventPath.slice(0, eventPath.length - 1);
                    const path = prevPaths.concat(propertyPaths);
                    paths.push(path);
                }
                else {
                    console.warn(`[BindingDataAppendObjectEventHandler][effect_error]`);
                    return;
                }
            }
            paths.forEach((path) => {
                const currentRows = this.buildCurrentRows(info.expressionTablePaths, path);
                this.output(event, expressionObject, currentRows, effector, [path]);
            });
        }
        else if (effectTo === Expression.ExpressionBindingType.State) {
            console.error('not supported！');
        }
    }
    output(event, expressionObject, currentRows, effector, paths) {
        const context = this.buildContext(expressionObject, event, null, currentRows);
        const value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, Object.assign({ eventType: event.type }, expressionObject), paths);
    }
}
//# sourceMappingURL=data:application/json;base64,