import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression/index";
import { STATE_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
export class StateValueChangedEventHandler extends EventHandler {
    /**
     * 获取相关表达式
     * @param event event
     */
    filter(event) {
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter((expressionObject) => {
                const deps = expressionObject.deps;
                if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                    return false;
                }
                const changePaths = this.cleanEventPath(event.path);
                changePaths.splice(0, 0, STATE_TEMPLATE);
                const eventPath = changePaths.join('/');
                if (deps.includes(eventPath)) {
                    return true;
                }
                else {
                    return false;
                }
            });
        }
        return null;
    }
    /**
     * 发布事件
     * @param event event
     */
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                // const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    effect(event, expressionObject) {
        const effector = this.effectorFactory.getEffector(expressionObject);
        const bindingType = expressionObject.bindingType;
        if (bindingType === Expression.ExpressionBindingType.State) {
            // 如果表达式作用于uistate
            effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message, eventType: event.type, viewModelId: expressionObject.viewModelId });
        }
        else if (bindingType === Expression.ExpressionBindingType.Field) {
            // 表达式作用于实体属性
            const expressionPathInfo = this.getPathInfo(expressionObject.path);
            const bindingPaths = expressionPathInfo.paths;
            const entities = this.repository.entityCollection.getAllEntities();
            this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, (currentRows, paths) => {
                this.output(event, expressionObject, currentRows, effector, [paths]);
            });
        }
    }
    output(event, expressionObject, currentRows, effector, paths) {
        const context = this.buildContext(expressionObject, event, null, currentRows);
        const value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    }
    effectRows(entities, bindingPaths, propertyNames, callback, currentRows = [], prevPaths = [], paths = []) {
        if (!bindingPaths || bindingPaths.length < 1) {
            entities.forEach((entity) => {
                if (!entity || !entity.primaryValue) {
                    return;
                }
                const currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);
                const currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);
                callback(currentCurrentRows, currentPaths);
            });
            currentRows.length = 0;
            paths.length = 0;
        }
        else {
            let flag = false;
            let nextPrevPaths = prevPaths;
            entities.forEach((entity) => {
                const prop = bindingPaths[0];
                const entityList = entity[prop];
                if (!entityList || entityList.count() < 1) {
                    return;
                }
                currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });
                paths.push(entity.primaryValue);
                paths.push(prop);
                if (flag === false) {
                    flag = true;
                    nextPrevPaths.push(prop);
                }
                const nextBindingPaths = bindingPaths.slice(1);
                this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths, paths);
            });
        }
    }
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    getCurrentRowByEvent(paths, event) {
        return this.getCurrentRowByPaths(paths);
    }
}
//# sourceMappingURL=data:application/json;base64,