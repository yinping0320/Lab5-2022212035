import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
export class BindingDataSelectionChangedEventHandler extends EventHandler {
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    filter(event) {
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter((expressionObject) => {
                const deps = expressionObject.deps;
                // 没有依赖的表达式不需要关注
                if (!deps || deps.length < 1) {
                    return false;
                }
                // 不依赖实体的表达式不需要关注
                let index = deps.findIndex(dep => dep.startsWith(ENTITY_TEMPLATE));
                if (index === -1) {
                    return false;
                }
                const result = this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 只关注从表行切换
                if (result.eventTablePaths.length !== 1) {
                    return false;
                }
                // 只关注从从表表达式
                if (result.expressionTablePaths.length !== 2) {
                    return false;
                }
                // 只关注事件直接下级的表达式，跨表的不需要关注
                if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {
                    return false;
                }
                // 从从表表达式需要依赖上级表
                index = deps.findIndex(dep => dep.startsWith(`${ENTITY_TEMPLATE}/${result.eventTablePaths[0]}`));
                if (index === -1) {
                    return false;
                }
                return true;
            });
        }
        return null;
    }
    dispatch(event) {
        const expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach((expressionObject) => {
                const entityContext = this.buildEntityContext(event, expressionObject);
                const context = this.buildContext(expressionObject, event, entityContext);
                const result = this.perform(expressionObject, context);
                if (result === undefined && !this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                this.effect(event, expressionObject);
            });
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX3NlbGVjdGlvbl9jaGFuZ2VkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9ldmVudC1oYW5kbGVyL2JpbmRpbmdfZGF0YV9zZWxlY3Rpb25fY2hhbmdlZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUNwRCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsTUFBTSxPQUFPLHVDQUF3QyxTQUFRLFlBQVk7SUFFdkU7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQyxLQUEyQjtRQUN2QyxJQUFJLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMvRCxPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBNkMsRUFBRSxFQUFFO2dCQUNyRixNQUFNLElBQUksR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUM7Z0JBQ25DLGdCQUFnQjtnQkFDaEIsSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtvQkFDNUIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsaUJBQWlCO2dCQUNqQixJQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO2dCQUNuRSxJQUFJLEtBQUssS0FBSyxDQUFDLENBQUMsRUFBRTtvQkFDaEIsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEQsSUFBSSxDQUFDLE1BQU0sRUFBRTtvQkFDWCxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxXQUFXO2dCQUNYLElBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUN2QyxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxZQUFZO2dCQUNaLElBQUksTUFBTSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7b0JBQzVDLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELHlCQUF5QjtnQkFDekIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7b0JBQ3ZGLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELGdCQUFnQjtnQkFDaEIsS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLEdBQUcsZUFBZSxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQ2pHLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUNoQixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTSxRQUFRLENBQUMsS0FBMkI7UUFDekMsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QyxJQUFJLFdBQVcsSUFBSSxXQUFXLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN6QyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUMsZ0JBQTZDLEVBQUUsRUFBRTtnQkFDcEUsTUFBTSxhQUFhLEdBQUcsSUFBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2RSxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2xGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDakMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN6RTtnQkFDRCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcbmltcG9ydCB7IEVOVElUWV9URU1QTEFURSB9IGZyb20gXCIuLi9yZXNvbHZlci9pbmRleFwiO1xuaW1wb3J0IHsgRXZlbnRIYW5kbGVyIH0gZnJvbSBcIi4vZXZlbnRfaGFuZGxlclwiO1xuXG5leHBvcnQgY2xhc3MgQmluZGluZ0RhdGFTZWxlY3Rpb25DaGFuZ2VkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcblxuICAvKipcbiAgICog6L+H5ruk5Ye66ZyA6KaB6K6h566X55qE6KGo6L6+5byPXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBmaWx0ZXIoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XG4gICAgaWYgKHRoaXMuZXhwcmVzc2lvbk9iamVjdHMgJiYgdGhpcy5leHByZXNzaW9uT2JqZWN0cy5sZW5ndGggPiAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uT2JqZWN0cy5maWx0ZXIoKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBkZXBzID0gZXhwcmVzc2lvbk9iamVjdC5kZXBzO1xuICAgICAgICAvLyDmsqHmnInkvp3otZbnmoTooajovr7lvI/kuI3pnIDopoHlhbPms6hcbiAgICAgICAgaWYgKCFkZXBzIHx8IGRlcHMubGVuZ3RoIDwgMSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyDkuI3kvp3otZblrp7kvZPnmoTooajovr7lvI/kuI3pnIDopoHlhbPms6hcbiAgICAgICAgbGV0IGluZGV4ID0gZGVwcy5maW5kSW5kZXgoZGVwID0+IGRlcC5zdGFydHNXaXRoKEVOVElUWV9URU1QTEFURSkpO1xuICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMuYW5hbHlzaXMoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlj6rlhbPms6jku47ooajooYzliIfmjaJcbiAgICAgICAgaWYgKHJlc3VsdC5ldmVudFRhYmxlUGF0aHMubGVuZ3RoICE9PSAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWPquWFs+azqOS7juS7juihqOihqOi+vuW8j1xuICAgICAgICBpZiAocmVzdWx0LmV4cHJlc3Npb25UYWJsZVBhdGhzLmxlbmd0aCAhPT0gMikge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICAvLyDlj6rlhbPms6jkuovku7bnm7TmjqXkuIvnuqfnmoTooajovr7lvI/vvIzot6jooajnmoTkuI3pnIDopoHlhbPms6hcbiAgICAgICAgaWYgKCFyZXN1bHQuZXhwcmVzc2lvblRhYmxlUGF0aHMuam9pbignLycpLnN0YXJ0c1dpdGgocmVzdWx0LmV2ZW50VGFibGVQYXRocy5qb2luKCcvJykpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIOS7juS7juihqOihqOi+vuW8j+mcgOimgeS+nei1luS4iue6p+ihqFxuICAgICAgICBpbmRleCA9IGRlcHMuZmluZEluZGV4KGRlcCA9PiBkZXAuc3RhcnRzV2l0aChgJHtFTlRJVFlfVEVNUExBVEV9LyR7cmVzdWx0LmV2ZW50VGFibGVQYXRoc1swXX1gKSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IHZvaWQge1xuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xuICAgIGlmIChleHByZXNzaW9ucyAmJiBleHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtKGV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xuICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdC5zZXQoZXhwcmVzc2lvbk9iamVjdC5pZCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWZmZWN0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxufSJdfQ==