import { CommentDependencyResolver } from "./comment_dependency_resolver";
import { ResolverRegistry } from "./resolver_registry";
export class ResolveService {
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.resolverRegistry = this.viewModelContext.injector.get(ResolverRegistry);
    }
    resolve(expression) {
        const deps = [];
        if (!this.resolverRegistry || !this.resolverRegistry.resolvers || this.resolverRegistry.resolvers.length < 1) {
            return;
        }
        // 优先使用用户自定义的依赖
        const commentDependencyResolver = this.resolverRegistry.resolvers.find((resolver) => resolver instanceof CommentDependencyResolver);
        if (commentDependencyResolver) {
            const commentDependencies = commentDependencyResolver.resolve(expression);
            if (commentDependencies && Array.isArray(commentDependencies) && commentDependencies.length > 0) {
                deps.push(...commentDependencies);
            }
        }
        // 如果用户已经自定义了依赖，则不再计算
        if (deps && deps.length > 0) {
            return;
        }
        this.resolverRegistry.resolvers.forEach((resolver) => {
            // 再解析一次也可以，返回的依然是空数组
            if (resolver instanceof CommentDependencyResolver) {
                return;
            }
            const dependency = resolver.resolve(expression);
            if (dependency && dependency.length > 0) {
                deps.push(...dependency);
            }
        });
        // 去重
        return [...new Set(deps)];
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb2x2ZV9zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vcmVzb2x2ZXIvcmVzb2x2ZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSx5QkFBeUIsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBSXZELE1BQU0sT0FBTyxjQUFjO0lBSXpCLFlBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ3BELElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBbUIsZ0JBQWdCLENBQUMsQ0FBQztJQUNqRyxDQUFDO0lBRU0sT0FBTyxDQUFDLFVBQWtCO1FBQy9CLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDNUcsT0FBTztTQUNSO1FBQ0QsZUFBZTtRQUNmLE1BQU0seUJBQXlCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxRQUFtQixFQUFFLEVBQUUsQ0FBQyxRQUFRLFlBQVkseUJBQXlCLENBQUMsQ0FBQztRQUMvSSxJQUFJLHlCQUF5QixFQUFFO1lBQzdCLE1BQU0sbUJBQW1CLEdBQUcseUJBQXlCLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQzFFLElBQUksbUJBQW1CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLG1CQUFtQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7Z0JBQy9GLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDO2FBQ25DO1NBQ0Y7UUFDRCxxQkFBcUI7UUFDckIsSUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDM0IsT0FBTztTQUNSO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFtQixFQUFFLEVBQUU7WUFDOUQscUJBQXFCO1lBQ3JCLElBQUksUUFBUSxZQUFZLHlCQUF5QixFQUFFO2dCQUNqRCxPQUFPO2FBQ1I7WUFDRCxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ2hELElBQUksVUFBVSxJQUFJLFVBQVUsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUN2QyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7YUFDMUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILEtBQUs7UUFDTCxPQUFPLENBQUMsR0FBRyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQzVCLENBQUM7Q0FFRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbW1lbnREZXBlbmRlbmN5UmVzb2x2ZXIgfSBmcm9tIFwiLi9jb21tZW50X2RlcGVuZGVuY3lfcmVzb2x2ZXJcIjtcbmltcG9ydCB7IFJlc29sdmVyUmVnaXN0cnkgfSBmcm9tIFwiLi9yZXNvbHZlcl9yZWdpc3RyeVwiO1xuaW1wb3J0IHsgSVJlc29sdmVyIH0gZnJvbSBcIi4vdHlwZXNcIjtcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi8uLi92aWV3LW1vZGVsL2luZGV4JztcblxuZXhwb3J0IGNsYXNzIFJlc29sdmVTZXJ2aWNlIHtcblxuICBwcml2YXRlIHJlc29sdmVyUmVnaXN0cnk6IFJlc29sdmVyUmVnaXN0cnk7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XG4gICAgdGhpcy5yZXNvbHZlclJlZ2lzdHJ5ID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmluamVjdG9yLmdldDxSZXNvbHZlclJlZ2lzdHJ5PihSZXNvbHZlclJlZ2lzdHJ5KTtcbiAgfVxuXG4gIHB1YmxpYyByZXNvbHZlKGV4cHJlc3Npb246IHN0cmluZykge1xuICAgIGNvbnN0IGRlcHM6IHN0cmluZ1tdID0gW107XG4gICAgaWYgKCF0aGlzLnJlc29sdmVyUmVnaXN0cnkgfHwgIXRoaXMucmVzb2x2ZXJSZWdpc3RyeS5yZXNvbHZlcnMgfHwgdGhpcy5yZXNvbHZlclJlZ2lzdHJ5LnJlc29sdmVycy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIOS8mOWFiOS9v+eUqOeUqOaIt+iHquWumuS5ieeahOS+nei1llxuICAgIGNvbnN0IGNvbW1lbnREZXBlbmRlbmN5UmVzb2x2ZXIgPSB0aGlzLnJlc29sdmVyUmVnaXN0cnkucmVzb2x2ZXJzLmZpbmQoKHJlc29sdmVyOiBJUmVzb2x2ZXIpID0+IHJlc29sdmVyIGluc3RhbmNlb2YgQ29tbWVudERlcGVuZGVuY3lSZXNvbHZlcik7XG4gICAgaWYgKGNvbW1lbnREZXBlbmRlbmN5UmVzb2x2ZXIpIHtcbiAgICAgIGNvbnN0IGNvbW1lbnREZXBlbmRlbmNpZXMgPSBjb21tZW50RGVwZW5kZW5jeVJlc29sdmVyLnJlc29sdmUoZXhwcmVzc2lvbik7XG4gICAgICBpZiAoY29tbWVudERlcGVuZGVuY2llcyAmJiBBcnJheS5pc0FycmF5KGNvbW1lbnREZXBlbmRlbmNpZXMpICYmIGNvbW1lbnREZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICBkZXBzLnB1c2goLi4uY29tbWVudERlcGVuZGVuY2llcyk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIOWmguaenOeUqOaIt+W3sue7j+iHquWumuS5ieS6huS+nei1lu+8jOWImeS4jeWGjeiuoeeul1xuICAgIGlmIChkZXBzICYmIGRlcHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLnJlc29sdmVyUmVnaXN0cnkucmVzb2x2ZXJzLmZvckVhY2goKHJlc29sdmVyOiBJUmVzb2x2ZXIpID0+IHtcbiAgICAgIC8vIOWGjeino+aekOS4gOasoeS5n+WPr+S7pe+8jOi/lOWbnueahOS+neeEtuaYr+epuuaVsOe7hFxuICAgICAgaWYgKHJlc29sdmVyIGluc3RhbmNlb2YgQ29tbWVudERlcGVuZGVuY3lSZXNvbHZlcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBkZXBlbmRlbmN5ID0gcmVzb2x2ZXIucmVzb2x2ZShleHByZXNzaW9uKTtcbiAgICAgIGlmIChkZXBlbmRlbmN5ICYmIGRlcGVuZGVuY3kubGVuZ3RoID4gMCkge1xuICAgICAgICBkZXBzLnB1c2goLi4uZGVwZW5kZW5jeSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8g5Y676YeNXG4gICAgcmV0dXJuIFsuLi5uZXcgU2V0KGRlcHMpXTtcbiAgfVxuXG59Il19