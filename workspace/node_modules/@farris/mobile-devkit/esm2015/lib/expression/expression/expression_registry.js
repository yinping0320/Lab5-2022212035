import { of } from "rxjs";
import { catchError, switchMap } from "rxjs/operators";
import { TranslateToken } from "../../i18n/index";
import { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from "../manifest/index";
import { Expression } from './types';
import { AppContext } from '../../app';
export class ExpressionRegistry {
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this._expressions = null;
        this.injector = this.viewModelContext.injector;
        this.formExpressionManifestService = this.injector.get(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, null);
        this.translate = this.injector.get(TranslateToken, null);
    }
    /**
     * 加载表达式文件
     */
    load() {
        return this.formExpressionManifestService.load().pipe(switchMap((describe) => {
            const expressions = this.setExpressions(describe);
            this.cleanSpecialCharacters();
            return of(expressions);
        }), catchError((e) => {
            return of([]);
        }));
    }
    setExpressions(describe) {
        const expressions = [];
        const exprs = Array.from(describe);
        const appContext = this.viewModelContext.injector.get(AppContext);
        exprs.forEach((expr) => {
            expr.expressions.forEach((expression) => {
                const expressionObject = {
                    id: expression.id,
                    ns: expr.ns,
                    viewModelId: expr.viewModelId,
                    path: expr.path,
                    bindingType: expr.type,
                    type: expression.type,
                    expression: expression.value || expression.expr || '',
                    message: expression.message || null,
                    messageType: expression.messageType || null,
                    deps: []
                };
                if (expression.type === Expression.ExpressionType.Required) {
                    const b = { type: "requiredExpression", constraints: [expression.id], message: expression.message };
                    appContext.validationManager[expr.path] = Object.assign({}, (appContext.validationManager[expr.path] || {}), { [expression.id]: b });
                }
                if (expression.type === Expression.ExpressionType.Validate) {
                    const b = { type: "expression", constraints: [expression.id], message: expression.message };
                    appContext.validationManager[expr.path] = Object.assign({}, (appContext.validationManager[expr.path] || {}), { [expression.id]: b });
                }
                if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate)) {
                    if (!expression.message) {
                        expressionObject.message = this.getExpressionMessage(expression.type);
                    }
                    if (!expression.messageType) {
                        expressionObject.messageType = 'error';
                    }
                }
                if (expressionObject.message) {
                    this.transform(expressionObject);
                }
                expressions.push(expressionObject);
            });
        });
        this._expressions = expressions;
        return expressions;
    }
    /**
     * 获取所有表达式
     */
    get expressions() {
        if (this._expressions) {
            return of(this._expressions);
        }
        // 短路，实现功能
        if (window['__expressions__']) {
            this.setExpressions(window['__expressions__']);
            return of(this._expressions);
        }
        return this.load();
    }
    /**
     * 根据表达式id获取对应的表达式对象
     * @param id 表达式id
     * @returns
     */
    getExpressionById(id) {
        if (!this._expressions || this._expressions.length < 1) {
            return null;
        }
        return this._expressions.find((expressionObject) => expressionObject.id === id);
    }
    getExpressionMessage(expressionType, defaultValue) {
        if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required)) {
            return null;
        }
        if (!this.translate) {
            return defaultValue;
        }
        const currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        return Expression.MESSAGE[currentLanguage][expressionType];
    }
    transform(expressionObject) {
        if (!this.translate) {
            return;
        }
        if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {
            expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);
        }
    }
    cleanSpecialCharacters() {
        if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {
            return;
        }
        const repository = this.viewModelContext.repository;
        if (!repository) {
            return;
        }
        const entityTypeInfo = repository.entityTypeInfo;
        const regex = new RegExp(`[\\'\\"]?\\s*(${entityTypeInfo.entityInfo.nodeCode}|${entityTypeInfo.entityInfo.originalCode})[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\"]?`, 'g');
        this._expressions.forEach((expressionObject) => {
            const expr = expressionObject.expression;
            const entityPropertyExpressions = expr.match(regex);
            if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                entityPropertyExpressions.forEach((item) => {
                    if (item.indexOf('.') === -1) {
                        console.warn(`无效的实体表达式:${item}`);
                        return;
                    }
                    // 去数组
                    if (/\[\d\]/g.test(item)) {
                        const replacer = item.replace(/\[\d\]/g, '');
                        expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);
                    }
                    // 去星号
                    if (/\*/g.test(item)) {
                        const replacer = item.replace(/\*/g, '');
                        expressionObject.expression = this.replaceAll(expressionObject.expression, item, replacer);
                    }
                });
            }
        });
    }
    replaceAll(originalValue, search, replacer) {
        return originalValue.split(search).join(replacer);
    }
}
//# sourceMappingURL=data:application/json;base64,