// tslint:disable-next-line: no-namespace
export var Expression;
(function (Expression) {
    /**
     * 表达式绑定字段类型（表达式绑定到实体、UIState?）
     */
    let ExpressionBindingType;
    (function (ExpressionBindingType) {
        ExpressionBindingType["State"] = "State";
        ExpressionBindingType["Field"] = "Field";
    })(ExpressionBindingType = Expression.ExpressionBindingType || (Expression.ExpressionBindingType = {}));
    /**
     * 表达式类型
     */
    let ExpressionType;
    (function (ExpressionType) {
        /**
         * 必填表达式
         */
        ExpressionType["Required"] = "require";
        /**
         * 只读表达式
         */
        ExpressionType["Readonly"] = "readonly";
        /**
         * 计算表达式
         */
        ExpressionType["Compute"] = "compute";
        /**
         * 依赖表达式
         */
        ExpressionType["Dependency"] = "dependency";
        /**
         * 是否可见
         */
        ExpressionType["Visible"] = "visible";
        /**
         * 关联表达式
         */
        ExpressionType["Relative"] = "relative";
        /**
         * 校验表达式
         */
        ExpressionType["Validate"] = "validate";
        /**
         * 帮助前
         */
        ExpressionType["DataPicking"] = "dataPicking";
    })(ExpressionType = Expression.ExpressionType || (Expression.ExpressionType = {}));
    /**
     * 事件类型
     */
    let EventType;
    (function (EventType) {
        EventType["ValueChanged"] = "VALUE_CHANGED";
        EventType["SelectionChanged"] = "SELECTION_CHANGED";
        EventType["Load"] = "Load";
        EventType["Append"] = "Append";
        EventType["Remove"] = "Remove";
        EventType["Update"] = "Update";
    })(EventType = Expression.EventType || (Expression.EventType = {}));
    let EventSource;
    (function (EventSource) {
        EventSource["Field"] = "Field";
        EventSource["State"] = "State";
        EventSource["BindingData"] = "BindingData";
        EventSource["Repository"] = "Repository";
    })(EventSource = Expression.EventSource || (Expression.EventSource = {}));
    let MessageType;
    (function (MessageType) {
        MessageType["error"] = "error";
        MessageType["info"] = "info";
        MessageType["warning"] = "warning";
    })(MessageType = Expression.MessageType || (Expression.MessageType = {}));
    let EffectPath;
    (function (EffectPath) {
        EffectPath[EffectPath["currentRow"] = 0] = "currentRow";
    })(EffectPath = Expression.EffectPath || (Expression.EffectPath = {}));
    Expression.MESSAGE = {
        'zh-CHS': {
            require: `请输入'$property'`,
            validate: `'$property'校验不通过`
        },
        en: {
            require: `Please input '$property'`,
            validate: `'$property' calibration failed`
        },
        'zh-CHT': {
            require: `請輸入'$property'`,
            validate: `'$property'校驗不通過`
        }
    };
    Expression.DEPENDENCY_SPLITER = '/';
})(Expression || (Expression = {}));
//# sourceMappingURL=data:application/json;base64,