import { NAMESPACE } from '../core/index';
import { EffectUtil } from './util';
export class RequiredEffector {
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');
    }
    effect(path, value, options) {
        let viewModelContext;
        if (options.viewModelId) {
            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId);
        }
        else {
            return;
        }
        if (!viewModelContext)
            return;
        if (!viewModelContext.form)
            return;
        const formControl = EffectUtil.getFormValueByPath(path, viewModelContext);
        let form_name = formControl.form_name;
        if (!form_name) {
            return;
        }
        const validators = [{ "type": "required", "constraints": [true], message: options.message || '必填' }];
        if (value === true) {
            viewModelContext.form.addValidate(formControl.bindingPath, formControl.name);
            form_name.pushValidatorFnforRequired(validators, true);
            form_name.required = true;
        }
        else if (value === false) {
            form_name.required = false;
            if (form_name.getValidatorFn() && form_name.getValidatorFn().length >= 1) {
                //去除必填
                form_name.resetValidatorFnforRequired();
                if (form_name.validationResult && form_name.validationResult.type === 'required') {
                    form_name.validationResult = { passing: true, message: '' };
                }
            }
        }
        viewModelContext.form.changes.next({ type: 'validateFieldsFinished' });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0b3JfcmVxdWlyZWQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9lZmZlY3Rvci9lZmZlY3Rvcl9yZXF1aXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFcEMsTUFBTSxPQUFPLGdCQUFnQjtJQUczQixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNwRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBQ00sTUFBTSxDQUFDLElBQVksRUFBRSxLQUFVLEVBQUUsT0FBaUM7UUFDdkUsSUFBSSxnQkFBa0MsQ0FBQztRQUN2QyxJQUFJLE9BQU8sQ0FBQyxXQUFXLEVBQUU7WUFDdkIsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1NBQ2hIO2FBQU07WUFDTCxPQUFNO1NBQ1A7UUFDRCxJQUFJLENBQUMsZ0JBQWdCO1lBQUUsT0FBTztRQUM5QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSTtZQUFFLE9BQU87UUFDbkMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLGtCQUFrQixDQUFDLElBQUksRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQzFFLElBQUksU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUF3QixDQUFDO1FBQ3JELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZCxPQUFNO1NBQ1A7UUFDRCxNQUFNLFVBQVUsR0FBRyxDQUFDLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsQ0FBQyxJQUFJLENBQUMsRUFBRSxPQUFPLEVBQUUsT0FBTyxDQUFDLE9BQU8sSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3JHLElBQUksS0FBSyxLQUFLLElBQUksRUFBRTtZQUNsQixnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzdFLFNBQVMsQ0FBQywwQkFBMEIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDdkQsU0FBUyxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7U0FFM0I7YUFBTSxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDMUIsU0FBUyxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUE7WUFDMUIsSUFBSSxTQUFTLENBQUMsY0FBYyxFQUFFLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxDQUFDLE1BQU0sSUFBSSxDQUFDLEVBQUU7Z0JBQ3hFLE1BQU07Z0JBQ04sU0FBUyxDQUFDLDJCQUEyQixFQUFFLENBQUM7Z0JBQ3hDLElBQUksU0FBUyxDQUFDLGdCQUFnQixJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxFQUFFO29CQUNoRixTQUFTLENBQUMsZ0JBQWdCLEdBQUcsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztpQkFDN0Q7YUFDRjtTQUNGO1FBQ0QsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxJQUFJLEVBQUUsd0JBQXdCLEVBQUMsQ0FBQyxDQUFBO0lBQ3ZFLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi8uLi92aWV3LW1vZGVsL2luZGV4J1xuaW1wb3J0IHsgRm9ybUNvbnRyb2wgfSBmcm9tICcuLi8uLi9mb3JtJ1xuaW1wb3J0IHsgTkFNRVNQQUNFIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBFZmZlY3RVdGlsIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGNsYXNzIFJlcXVpcmVkRWZmZWN0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uLkVmZmVjdG9yIHtcbiAgcHVibGljIG5zOiBzdHJpbmc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XG4gICAgdGhpcy5ucyA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3Rvci5nZXQoTkFNRVNQQUNFLCAnJyk7XG4gIH1cbiAgcHVibGljIGVmZmVjdChwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnksIG9wdGlvbnM6IEV4cHJlc3Npb24uRWZmZWN0T3B0aW9ucykge1xuICAgIGxldCB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xuICAgIGlmIChvcHRpb25zLnZpZXdNb2RlbElkKSB7XG4gICAgICB2aWV3TW9kZWxDb250ZXh0ID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmFwcENvbnRleHQudmlld01vZGVsQ29udGV4dE1hbmFnZXIuZ2V0Q29udGV4dEJ5SWQob3B0aW9ucy52aWV3TW9kZWxJZClcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghdmlld01vZGVsQ29udGV4dCkgcmV0dXJuO1xuICAgIGlmICghdmlld01vZGVsQ29udGV4dC5mb3JtKSByZXR1cm47XG4gICAgY29uc3QgZm9ybUNvbnRyb2wgPSBFZmZlY3RVdGlsLmdldEZvcm1WYWx1ZUJ5UGF0aChwYXRoLCB2aWV3TW9kZWxDb250ZXh0KTtcbiAgICBsZXQgZm9ybV9uYW1lID0gZm9ybUNvbnRyb2wuZm9ybV9uYW1lIGFzIEZvcm1Db250cm9sO1xuICAgIGlmICghZm9ybV9uYW1lKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgdmFsaWRhdG9ycyA9IFt7IFwidHlwZVwiOiBcInJlcXVpcmVkXCIsIFwiY29uc3RyYWludHNcIjogW3RydWVdLCBtZXNzYWdlOiBvcHRpb25zLm1lc3NhZ2UgfHwgJ+W/heWhqycgfV07XG4gICAgaWYgKHZhbHVlID09PSB0cnVlKSB7XG4gICAgICB2aWV3TW9kZWxDb250ZXh0LmZvcm0uYWRkVmFsaWRhdGUoZm9ybUNvbnRyb2wuYmluZGluZ1BhdGgsIGZvcm1Db250cm9sLm5hbWUpO1xuICAgICAgZm9ybV9uYW1lLnB1c2hWYWxpZGF0b3JGbmZvclJlcXVpcmVkKHZhbGlkYXRvcnMsIHRydWUpO1xuICAgICAgZm9ybV9uYW1lLnJlcXVpcmVkID0gdHJ1ZTtcblxuICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IGZhbHNlKSB7XG4gICAgICBmb3JtX25hbWUucmVxdWlyZWQgPSBmYWxzZVxuICAgICAgaWYgKGZvcm1fbmFtZS5nZXRWYWxpZGF0b3JGbigpICYmIGZvcm1fbmFtZS5nZXRWYWxpZGF0b3JGbigpLmxlbmd0aCA+PSAxKSB7XG4gICAgICAgIC8v5Y676Zmk5b+F5aGrXG4gICAgICAgIGZvcm1fbmFtZS5yZXNldFZhbGlkYXRvckZuZm9yUmVxdWlyZWQoKTtcbiAgICAgICAgaWYgKGZvcm1fbmFtZS52YWxpZGF0aW9uUmVzdWx0ICYmIGZvcm1fbmFtZS52YWxpZGF0aW9uUmVzdWx0LnR5cGUgPT09ICdyZXF1aXJlZCcpIHtcbiAgICAgICAgICBmb3JtX25hbWUudmFsaWRhdGlvblJlc3VsdCA9IHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2aWV3TW9kZWxDb250ZXh0LmZvcm0uY2hhbmdlcy5uZXh0KHsgdHlwZTogJ3ZhbGlkYXRlRmllbGRzRmluaXNoZWQnfSlcbiAgfVxufVxuIl19