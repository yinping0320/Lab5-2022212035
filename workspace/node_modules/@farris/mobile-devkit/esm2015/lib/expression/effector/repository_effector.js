import { EntityList } from '../../entity/index';
import { NAMESPACE } from '../core/index';
/**
 * 实体副作用器
 * @description 将表达式计算结果赋值给实体属性
 */
export class RepositoryEffector {
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');
        this.repository = this.viewModelContext.repository;
        this.bindingData = this.viewModelContext.bindingData;
    }
    effect(path, value, options) {
        if (!options || !options.path) {
            throw new Error('repository effector 需要指定行信息。');
        }
        const propertyPath = options.path;
        const rowId = propertyPath[0] || this.bindingData.list.currentItem.primaryKeyValue;
        let entity = this.repository.entityCollection.getEntityById(rowId);
        if (rowId && !entity) {
            console.error(`找不到id：${rowId}对应的实体！`);
            return;
        }
        // propertyPath like : [1, child1s, 1.1, child2s, 1.1.1,propName] or [1,udt,propName] or [1,prop]
        const propName = propertyPath.pop();
        let object = entity;
        for (let index = 1; index < propertyPath.length; index++) {
            const propertyName = propertyPath[index];
            if (object instanceof EntityList) {
                object = object.get(propertyName);
            }
            else {
                object = object[propertyName];
            }
        }
        if (object) {
            if (object[propName] !== value) {
                object[propName] = value;
            }
        }
        else {
            console.error(`找不到实体对应的路径：${propertyPath.push(propName)}`);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9lZmZlY3Rvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2VmZmVjdG9yL3JlcG9zaXRvcnlfZWZmZWN0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFVLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBSXhELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFMUM7OztHQUdHO0FBQ0gsTUFBTSxPQUFPLGtCQUFrQjtJQVE3QixZQUFvQixnQkFBa0M7UUFBbEMscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtRQUNwRCxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUM1RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7UUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO0lBQ3ZELENBQUM7SUFFTSxNQUFNLENBQUMsSUFBWSxFQUFFLEtBQVUsRUFBRSxPQUFpQztRQUN2RSxJQUFJLENBQUMsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRTtZQUM3QixNQUFNLElBQUksS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7U0FDakQ7UUFDRCxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ2xDLE1BQU0sS0FBSyxHQUFHLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsZUFBZSxDQUFDO1FBQ25GLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25FLElBQUksS0FBSyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsU0FBUyxLQUFLLFFBQVEsQ0FBQyxDQUFDO1lBQ3RDLE9BQU87U0FDUjtRQUNELGlHQUFpRztRQUNqRyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsR0FBRyxFQUFFLENBQUM7UUFDcEMsSUFBSSxNQUFNLEdBQVEsTUFBTSxDQUFDO1FBQ3pCLEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLEtBQUssR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3hELE1BQU0sWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sWUFBWSxVQUFVLEVBQUU7Z0JBQ2hDLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDO2FBQ25DO2lCQUFNO2dCQUNMLE1BQU0sR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7YUFDL0I7U0FDRjtRQUNELElBQUksTUFBTSxFQUFFO1lBQ1YsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssS0FBSyxFQUFFO2dCQUM5QixNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsS0FBSyxDQUFDO2FBQzFCO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztTQUM1RDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJpbmRpbmdEYXRhIH0gZnJvbSAnLi4vLi4vYmluZGluZy1kYXRhL2luZGV4JztcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCB9IGZyb20gJy4uLy4uL2VudGl0eS9pbmRleCc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yeS9pbmRleCc7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnLi4vLi4vdmlldy1tb2RlbC9pbmRleCc7XG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XG5pbXBvcnQgeyBOQU1FU1BBQ0UgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcblxuLyoqXG4gKiDlrp7kvZPlia/kvZznlKjlmahcbiAqIEBkZXNjcmlwdGlvbiDlsIbooajovr7lvI/orqHnrpfnu5PmnpzotYvlgLznu5nlrp7kvZPlsZ7mgKdcbiAqL1xuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlFZmZlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uRWZmZWN0b3Ige1xuXG4gIHB1YmxpYyBuczogc3RyaW5nO1xuXG4gIHByaXZhdGUgcmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+XG5cbiAgcHJpdmF0ZSBiaW5kaW5nRGF0YTogQmluZGluZ0RhdGE7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XG4gICAgdGhpcy5ucyA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3Rvci5nZXQoTkFNRVNQQUNFLCAnJyk7XG4gICAgdGhpcy5yZXBvc2l0b3J5ID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnk7XG4gICAgdGhpcy5iaW5kaW5nRGF0YSA9IHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YTtcbiAgfVxuXG4gIHB1YmxpYyBlZmZlY3QocGF0aDogc3RyaW5nLCB2YWx1ZTogYW55LCBvcHRpb25zOiBFeHByZXNzaW9uLkVmZmVjdE9wdGlvbnMpIHtcbiAgICBpZiAoIW9wdGlvbnMgfHwgIW9wdGlvbnMucGF0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdyZXBvc2l0b3J5IGVmZmVjdG9yIOmcgOimgeaMh+WumuihjOS/oeaBr+OAgicpO1xuICAgIH1cbiAgICBjb25zdCBwcm9wZXJ0eVBhdGggPSBvcHRpb25zLnBhdGg7XG4gICAgY29uc3Qgcm93SWQgPSBwcm9wZXJ0eVBhdGhbMF0gfHwgdGhpcy5iaW5kaW5nRGF0YS5saXN0LmN1cnJlbnRJdGVtLnByaW1hcnlLZXlWYWx1ZTtcbiAgICBsZXQgZW50aXR5ID0gdGhpcy5yZXBvc2l0b3J5LmVudGl0eUNvbGxlY3Rpb24uZ2V0RW50aXR5QnlJZChyb3dJZCk7XG4gICAgaWYgKHJvd0lkICYmICFlbnRpdHkpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYOaJvuS4jeWIsGlk77yaJHtyb3dJZH3lr7nlupTnmoTlrp7kvZPvvIFgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gcHJvcGVydHlQYXRoIGxpa2UgOiBbMSwgY2hpbGQxcywgMS4xLCBjaGlsZDJzLCAxLjEuMSxwcm9wTmFtZV0gb3IgWzEsdWR0LHByb3BOYW1lXSBvciBbMSxwcm9wXVxuICAgIGNvbnN0IHByb3BOYW1lID0gcHJvcGVydHlQYXRoLnBvcCgpO1xuICAgIGxldCBvYmplY3Q6IGFueSA9IGVudGl0eTtcbiAgICBmb3IgKGxldCBpbmRleCA9IDE7IGluZGV4IDwgcHJvcGVydHlQYXRoLmxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgY29uc3QgcHJvcGVydHlOYW1lID0gcHJvcGVydHlQYXRoW2luZGV4XTtcbiAgICAgIGlmIChvYmplY3QgaW5zdGFuY2VvZiBFbnRpdHlMaXN0KSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdC5nZXQocHJvcGVydHlOYW1lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9iamVjdCA9IG9iamVjdFtwcm9wZXJ0eU5hbWVdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAob2JqZWN0KSB7XG4gICAgICBpZiAob2JqZWN0W3Byb3BOYW1lXSAhPT0gdmFsdWUpIHtcbiAgICAgICAgb2JqZWN0W3Byb3BOYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zb2xlLmVycm9yKGDmib7kuI3liLDlrp7kvZPlr7nlupTnmoTot6/lvoTvvJoke3Byb3BlcnR5UGF0aC5wdXNoKHByb3BOYW1lKX1gKTtcbiAgICB9XG4gIH1cbn0iXX0=