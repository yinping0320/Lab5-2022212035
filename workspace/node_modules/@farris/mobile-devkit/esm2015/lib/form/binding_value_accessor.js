import { BindingPathConverter, DateUtil } from '../utils/index';
import { BindingType } from './types';
/**
 * Entity值访问器
 */
class EntityBindingValueAccessor {
    constructor(bindingData, bindingPath, valueConverter) {
        this.bindingData = bindingData;
        this.bindingPathSegments = this.getBindingPathSegments(bindingPath);
        this.valueConverter = valueConverter;
    }
    getValue() {
        const stateValue = this.bindingData.getValue(this.bindingPathSegments);
        const controlValue = this.valueConverter ? this.valueConverter.convertTo(stateValue) : stateValue;
        return controlValue;
    }
    setValue(controlValue) {
        const oldStateValue = this.bindingData.getValue(this.bindingPathSegments);
        const stateValue = this.valueConverter ? this.valueConverter.convertFrom(controlValue) : controlValue;
        if (this.isDateConverter(this.valueConverter) === true) {
            if (DateUtil.isEqual(oldStateValue, stateValue) === true) {
                return;
            }
        }
        this.bindingData.setValue(this.bindingPathSegments, stateValue, true, true);
    }
    getBindingPathSegments(bindingPath) {
        const parentPathSegments = BindingPathConverter.toBindingPathArray(this.bindingData.bindingPath);
        bindingPath = bindingPath.replace(/\./g, '\/');
        const bindingPathSegments = BindingPathConverter.toBindingPathArray(bindingPath);
        return parentPathSegments.concat(bindingPathSegments);
    }
    /**
     * 是否是DateConverter
     */
    isDateConverter(converter) {
        let isDateConverter = false;
        if (converter && converter.hasOwnProperty('format') === true) {
            isDateConverter = true;
        }
        return isDateConverter;
    }
}
/**
 * UIState值访问器
 */
class UIStateBindingValueAccessor {
    constructor(uiState, bindingPath, valueConverter) {
        this.uiState = uiState;
        this.bindingPathSegments = this.getUiStateBindingPath(bindingPath);
    }
    getValue() {
        let stateValue;
        let obj = this.uiState;
        this.bindingPathSegments.forEach(item => {
            stateValue = obj[item];
            obj = stateValue;
        });
        return stateValue;
    }
    setValue(controlValue) {
        const length = this.bindingPathSegments.length;
        if (length === 1) {
            this.uiState.setPropertyValue(this.bindingPathSegments, controlValue);
        }
        else {
            let obj;
            for (let i = length - 1; i > 0; i--) {
                obj = { [this.bindingPathSegments[i]]: controlValue };
                controlValue = obj;
            }
            this.uiState.setPropertyValue(this.bindingPathSegments[0], obj);
        }
    }
    // UISTATE获取路径
    getUiStateBindingPath(bindingPath) {
        const index = bindingPath.search('/');
        if (index !== -1) {
            return bindingPath.split('/');
        }
        else {
            return [bindingPath];
        }
    }
}
/**
 * 绑定值访问器工厂
 */
class BindingValueAccessorFactory {
    static create(bindingType, bindingBindingPath, bindingValueConverter, viewModelContext) {
        switch (bindingType) {
            case BindingType.EntityState:
                const bindingData = viewModelContext.bindingData;
                return new EntityBindingValueAccessor(bindingData, bindingBindingPath, bindingValueConverter);
            case BindingType.UIState:
                const uiState = viewModelContext.uiState;
                return new UIStateBindingValueAccessor(uiState, bindingBindingPath, bindingValueConverter);
            default:
                throw new Error('Not Supported');
        }
    }
}
export { EntityBindingValueAccessor, UIStateBindingValueAccessor, BindingValueAccessorFactory };
//# sourceMappingURL=data:application/json;base64,