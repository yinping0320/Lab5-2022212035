import { MetadataUtil } from '../core/index';
import { FormControl } from './form_control';
import { FORM_CONTROL_PROP_META } from './decorators';
import { Subject } from 'rxjs';
import { ValidatorFactory } from '../validator';
import { tap } from 'rxjs/operators';
/**
 * Form抽象类
 */
class Form {
    /**
     * 构造函数
     */
    constructor(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.formControlConfigs = [];
        this.validateformControls = [];
        this.validateformControlPathMap = new Map;
        this.changes = new Subject();
    }
    /**
     * 初始化
     */
    init() {
        this.collectMetadatas();
        this.createFormControls();
    }
    /**
     * 使用不包含绝对路径的/或者/子表/的路径信息获取对应的formControlConfig的name属性与bindingPath并且返回该路径的formControl
     * @param path 路径信息
     * @returns
     */
    getFormValueByBindPath(path) {
        let formControl = {
            form_name: {},
            name: '',
            bindingPath: ''
        };
        path = path.replace(/\//g, '.');
        if (this.formControlConfigs.length === 0)
            return formControl;
        this.formControlConfigs.forEach((formControlConfig) => {
            if (formControlConfig.bindingPath === path) {
                formControl.form_name = this[formControlConfig.name];
                formControl.name = formControlConfig.name;
                formControl.bindingPath = formControlConfig.bindingPath;
            }
        });
        return formControl;
    }
    /**
     *
     * @returns 获取当前表单上的存在校验字段的集合
     */
    getValidateformControls() {
        return this.validateformControls;
    }
    setValidateformControls(name) {
        if (this.validateformControls && this.validateformControls.length === 0) {
            this.validateformControls.push(name);
        }
        if (this.validateformControls && this.validateformControls.length >= 1) {
            const index = this.validateformControls.findIndex(item => item == name);
            if (index === -1) {
                this.validateformControls.push(name);
            }
        }
        if (!Array.isArray(this.validateformControls)) {
            this.validateformControls = [name];
        }
    }
    getValidateformControlPathMap() {
        return this.validateformControlPathMap;
    }
    setValidateformControlPathMap(name, value) {
        if (!this.validateformControlPathMap.has(name)) {
            this.validateformControlPathMap.set(name, value);
        }
    }
    /**
     * 使用formControlConfig的bindingPath路径信息与对应formControlConfig的name信息储存起来作为验证信息在form上的记录
     * @param path formControlConfig的bindingPath路径信息
     * @param name 对应formContro的name信息
     */
    addValidate(path, name) {
        let bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\//g, '.');
        if (bindingPath) {
            bindingPath = bindingPath + '.';
        }
        ;
        this.setValidateformControlPathMap(bindingPath + path, name);
        this.setValidateformControls(name);
    }
    /**
     * 全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    validateFields() {
        let validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach((formControl) => {
            const result$ = ValidatorFactory.executeValidator(this[formControl]['validatorFn'], this[formControl]['value'], this.viewModelContext).pipe(tap((message) => {
                this[formControl]['validationResult'] = message;
                !message['passing'] && this.changes.next({ type: 'validateFieldsFinished' });
            }));
            validationResult.push(result$);
        });
        return validationResult;
    }
    /**
     * 不支持自定义异步全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    noSupportAsynValidateFields() {
        let validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach((formControl) => {
            if (!this[formControl]['validationResult']) {
                this[formControl]['validationResult'] = ValidatorFactory.noSupportAsynExecuteValidator(this[formControl]['validatorFn'], this[formControl]['value'], this.viewModelContext);
            }
            !this[formControl]['validationResult'].passing && validationResult.push(this[formControl]);
        });
        this.changes.next({ type: 'validateFieldsFinished' });
        return validationResult;
    }
    /**
     * 获取某一个得校验错误信息
     * @param name 属性名称
     */
    getFieldError(name) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        const index = this.validateformControls.findIndex((item) => {
            return item === name;
        });
        if (index === -1) {
            return {};
        }
        else {
            const result$ = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value'], this.viewModelContext).pipe(tap((message) => {
                this[name]['validationResult'] = message;
                !message['passing'] && this.changes.next({ type: 'validateFieldsFinished' });
            }));
            return result$;
        }
    }
    /**
   * 根据form元数据中的path获取某一个得校验错误信息
   * @param path 属性名称数组
   */
    getFieldErrorByPath(path) {
        if (this.validateformControls.length === 0) {
            return {};
        }
        let pathName = path[0];
        if (path && path.length >= 2) {
            pathName = path.join('.');
        }
        const index = this.validateformControlPathMap.has(pathName);
        if (!index) {
            return {};
        }
        else {
            ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value'], this.viewModelContext).subscribe((message) => {
                this[this.validateformControlPathMap.get(pathName)]['validationResult'] = message;
                this.changes.next({ type: 'validateFieldsFinished', value: this.validateformControlPathMap.get(pathName) });
            });
            return this[this.validateformControlPathMap.get(pathName)]['validationResult'];
        }
    }
    /**
     * 清除一组字段验证状态
     * @param fields 字段的数组
     */
    resetFieldsValidate(fields) {
        if (this.validateformControls.length === 0) {
            return true;
        }
        else {
            if (fields && fields.length > 0) {
                const sb = new Set(fields);
                // 交集
                const intersect = this.validateformControls.filter(x => sb.has(x));
                // 遍历清空所有校验结果数据
                intersect.forEach(item => {
                    this[item]['validationResult'] = undefined;
                });
            }
            else {
                // 没传数据全部清除
                this.validateformControls.forEach(item => {
                    this[item]['validationResult'] = undefined;
                });
            }
            this.changes.next({ type: 'validateFieldsFinished' });
        }
    }
    /**
     * 创建FormControls
     */
    createFormControls() {
        this.formControlConfigs.forEach((formControlConfig) => {
            const name = formControlConfig.name;
            const formControl = new FormControl(formControlConfig, this.viewModelContext);
            this[name] = formControl;
        });
    }
    /**
     * 收集元数据
     */
    collectMetadatas() {
        const formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);
        let bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\//g, '.');
        const validationManager = this.viewModelContext.appContext['validationManager'];
        if (bindingPath) {
            bindingPath = bindingPath + '.';
        }
        ;
        Object.keys(formControlMetadatas).forEach((name) => {
            const formControlMetadata = formControlMetadatas[name];
            let validRules = null;
            if (formControlMetadata.validRules) {
                this.validateformControls.push(name);
                this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);
                validRules = formControlMetadata.validRules;
            }
            const key = ('/' + bindingPath + formControlMetadata.bindingPath).replace(/\./g, '/');
            if (validationManager[key]) {
                if (!validRules) {
                    this.validateformControls.push(name);
                    this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);
                    validRules = Object.values(validationManager[key]);
                }
                else {
                    validRules = validRules.concat(Object.values(validationManager[key]));
                }
            }
            const formControlConfig = {
                name: name,
                bindingType: formControlMetadata.bindingType,
                bindingPath: formControlMetadata.bindingPath,
                valueConverter: formControlMetadata.valueConverter,
                valueChanging: formControlMetadata.valueChanging,
                valueChanged: formControlMetadata.valueChanged,
                validRules: validRules
            };
            this.formControlConfigs.push(formControlConfig);
        });
    }
    getEntityValueChangingListeners() {
        const listeners = {};
        this.formControlConfigs.forEach((formControl) => {
            if (formControl.valueChanging) {
                listeners[formControl.bindingPath] = formControl.valueChanging;
            }
        });
        return listeners;
    }
    getEntityValueChangedListeners() {
        const listeners = {};
        this.formControlConfigs.forEach((formControl) => {
            if (formControl.valueChanged) {
                listeners[formControl.bindingPath] = formControl.valueChanged;
            }
        });
        return listeners;
    }
}
export { Form };
//# sourceMappingURL=data:application/json;base64,