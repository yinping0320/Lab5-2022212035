import { MetadataUtil } from '../../core/index';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 属性注解器通用方法
 */
export class FieldMetadataUtil {
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgFields(target) {
        return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);
    }
    /**
     * 获取某个简单属性的元数据
     */
    static getNgField(target, propName) {
        const ngFields = this.getNgFields(target);
        const ngField = ngFields[propName];
        return ngField;
    }
    /**
     * 获取实体属性在原始数据中的属性名
     */
    static getDataField(target, propName) {
        const ngField = this.getNgField(target, propName);
        return ngField.dataField || propName;
    }
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    static getNgObjects(target) {
        return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);
    }
    static getNgDynamic(target) {
        return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);
    }
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    static getNgList(target) {
        return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);
    }
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    static getPrimaryFieldMetadata(target) {
        const ngFieldObj = FieldMetadataUtil.getNgFields(target);
        const primaryKey = Object.keys(ngFieldObj).find((prop) => {
            return ngFieldObj[prop].primary;
        });
        if (primaryKey) {
            const propMeta = ngFieldObj[primaryKey];
            propMeta.property = primaryKey;
            if (!propMeta.dataField) {
                propMeta.dataField = primaryKey;
            }
            return propMeta;
        }
        return undefined;
    }
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    static getPrimaryKey(entityType) {
        const primaryNgField = this.getPrimaryFieldMetadata(entityType);
        if (!primaryNgField) {
            return '';
        }
        return primaryNgField.property;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRfbWV0YWRhdGFfdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvbWV0YWRhdGEvZmllbGRfbWV0YWRhdGFfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUNMLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFFekUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQjs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFDNUI7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBVztRQUM1QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsVUFBVSxDQUFDLE1BQVcsRUFBRSxRQUFnQjtRQUM3QyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQzFDLE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxRQUFRLENBQTBCLENBQUM7UUFDNUQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFXLEVBQUUsUUFBZ0I7UUFDL0MsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDbEQsT0FBTyxPQUFPLENBQUMsU0FBUyxJQUFJLFFBQVEsQ0FBQztJQUN2QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxZQUFZLENBQUMsTUFBVztRQUM3QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsTUFBTSxDQUFDLFlBQVksQ0FBQyxNQUFXO1FBQzdCLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7SUFFRDs7OztPQUlHO0lBQ0gsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFXO1FBQzFCLE9BQU8sWUFBWSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxjQUFjLENBQUMsQ0FBQztJQUN0RSxDQUFDO0lBRUQ7OztPQUdHO0lBQ0gsTUFBTSxDQUFDLHVCQUF1QixDQUFDLE1BQVc7UUFDeEMsTUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3pELE1BQU0sVUFBVSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDL0QsT0FBTyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBSSxVQUFVLEVBQUU7WUFDZCxNQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7WUFDeEMsUUFBUSxDQUFDLFFBQVEsR0FBRyxVQUFVLENBQUM7WUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZCLFFBQVEsQ0FBQyxTQUFTLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1lBRUQsT0FBTyxRQUFRLENBQUM7U0FDakI7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsYUFBYSxDQUFDLFVBQWU7UUFDbEMsTUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDbkIsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUNELE9BQU8sY0FBYyxDQUFDLFFBQVEsQ0FBQztJQUNqQyxDQUFDO0NBRUYiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcbmltcG9ydCB7XG4gIFBSSU1JVElWRV9QUk9QX01FVEEsIE9CSkVDVF9QUk9QX01FVEEsIERZTkFNSUNfUFJPUF9NRVRBLCBMSVNUX1BST1BfTUVUQSxcbiAgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBPYmplY3RQcm9wTWV0YWRhdGEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIExpc3RQcm9wTWV0YWRhdGFcbn0gZnJvbSAnLi9maWVsZF9kZWNvcmF0b3InO1xuXG4vKipcbiAqIOWxnuaAp+azqOino+WZqOmAmueUqOaWueazlVxuICovXG5leHBvcnQgY2xhc3MgRmllbGRNZXRhZGF0YVV0aWwge1xuICAvKipcbiAgICog6I635Y+W5a6e5L2T5omA5pyJ55qE566A5Y2V5bGe5oCn5YWD5pWw5o2uXG4gICAqIEBwYXJhbSB0YXJnZXQg5a6e5L2T57G75Z6LXG4gICAqIEByZXR1cm5zIOW9ouWmgu+8mntbcHJvcE5hbWU6IHN0cmluZ106IE5nT2JqZWN0UHJvcGVydHl9XG4gICAqL1xuICBzdGF0aWMgZ2V0TmdGaWVsZHModGFyZ2V0OiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIH0ge1xuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUodGFyZ2V0LCBQUklNSVRJVkVfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmn5DkuKrnroDljZXlsZ7mgKfnmoTlhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ0ZpZWxkKHRhcmdldDogYW55LCBwcm9wTmFtZTogc3RyaW5nKTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIHtcbiAgICBjb25zdCBuZ0ZpZWxkcyA9IHRoaXMuZ2V0TmdGaWVsZHModGFyZ2V0KTtcbiAgICBjb25zdCBuZ0ZpZWxkID0gbmdGaWVsZHNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcbiAgICByZXR1cm4gbmdGaWVsZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blrp7kvZPlsZ7mgKflnKjljp/lp4vmlbDmja7kuK3nmoTlsZ7mgKflkI1cbiAgICovXG4gIHN0YXRpYyBnZXREYXRhRmllbGQodGFyZ2V0OiBhbnksIHByb3BOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZ0ZpZWxkID0gdGhpcy5nZXROZ0ZpZWxkKHRhcmdldCwgcHJvcE5hbWUpO1xuICAgIHJldHVybiBuZ0ZpZWxkLmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmoIfms6jkuLpOZ09iamVjdOeahOWxnuaAp+eahOWFg+aVsOaNrlxuICAgKiBAcGFyYW0gdGFyZ2V0IOWunuS9k+exu+Wei1xuICAgKiBAcmV0dXJucyDlvaLlpoLvvJp7W3Byb3BOYW1lOiBzdHJpbmddOiBOZ09iamVjdFByb3BlcnR5fVxuICAgKi9cbiAgc3RhdGljIGdldE5nT2JqZWN0cyh0YXJnZXQ6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIE9CSkVDVF9QUk9QX01FVEEpO1xuICB9XG5cbiAgc3RhdGljIGdldE5nRHluYW1pYyh0YXJnZXQ6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIERZTkFNSUNfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmoIfms6jkuLpOZ0xpc3TnmoTlsZ7mgKfnmoTlhYPmlbDmja5cbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcbiAgICogQHJldHVybnMg5b2i5aaC77yae1twcm9wTmFtZTogc3RyaW5nXTogTmdMaXN0UHJvcGVydHl9XG4gICAqL1xuICBzdGF0aWMgZ2V0TmdMaXN0KHRhcmdldDogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IExpc3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIExJU1RfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blrp7kvZPmoIfms6jkuLrkuLvplK7nmoTlsZ7mgKflhYPmlbDmja5cbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcbiAgICovXG4gIHN0YXRpYyBnZXRQcmltYXJ5RmllbGRNZXRhZGF0YSh0YXJnZXQ6IGFueSk6IFByaW1pdGl2ZVByb3BNZXRhZGF0YSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbmdGaWVsZE9iaiA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nRmllbGRzKHRhcmdldCk7XG4gICAgY29uc3QgcHJpbWFyeUtleSA9IE9iamVjdC5rZXlzKG5nRmllbGRPYmopLmZpbmQoKHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuIG5nRmllbGRPYmpbcHJvcF0ucHJpbWFyeTtcbiAgICB9KTtcblxuICAgIGlmIChwcmltYXJ5S2V5KSB7XG4gICAgICBjb25zdCBwcm9wTWV0YSA9IG5nRmllbGRPYmpbcHJpbWFyeUtleV07XG4gICAgICBwcm9wTWV0YS5wcm9wZXJ0eSA9IHByaW1hcnlLZXk7XG4gICAgICBpZiAoIXByb3BNZXRhLmRhdGFGaWVsZCkge1xuICAgICAgICBwcm9wTWV0YS5kYXRhRmllbGQgPSBwcmltYXJ5S2V5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcE1ldGE7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5Li76ZSu5ZCN56ew77yM5rKh5pyJ5Li76ZSu5pe26L+U5Zue56m65a2X56ym5LiyXG4gICAqL1xuICBzdGF0aWMgZ2V0UHJpbWFyeUtleShlbnRpdHlUeXBlOiBhbnkpIHtcbiAgICBjb25zdCBwcmltYXJ5TmdGaWVsZCA9IHRoaXMuZ2V0UHJpbWFyeUZpZWxkTWV0YWRhdGEoZW50aXR5VHlwZSk7XG4gICAgaWYgKCFwcmltYXJ5TmdGaWVsZCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbWFyeU5nRmllbGQucHJvcGVydHk7XG4gIH1cblxufVxuIl19