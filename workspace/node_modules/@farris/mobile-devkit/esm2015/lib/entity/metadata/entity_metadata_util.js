import { MetadataUtil } from '../../core/index';
import { ENTITY_META } from './entity_decorator';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 实体元数据工具类
 */
export class EntityMetadataUtil {
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    static getAllNgProperties(entityType) {
        const ngPlainProperties = this.getNgFieldProperties(entityType);
        const ngEntityProperties = this.getNgObjectProperties(entityType);
        const ngDynamicProperties = this.getNgDynamicProperties(entityType);
        const ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    }
    /**
     * 获取EnttiyClassMetadata
     */
    static getNgEntityMatadata(entityType) {
        return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, ENTITY_META);
    }
    /**
     * 获取PrimitivePropMetadata的属性元数据
     */
    static getNgFieldProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);
    }
    /**
     * 获取ObjectPropMetadata属性元数据
     */
    static getNgObjectProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);
    }
    /**
     * 获取DynamicPropMetadata属性元数据
     */
    static getNgDynamicProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);
    }
    /**
     * 获取ListPropMetadata属性元数据
     */
    static getNgListProperties(entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);
    }
    /**
     * 获取主键属性元数据
     */
    static getPrimaryKeyProperty(entityType) {
        let primaryKeyProperty;
        const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach((propName) => {
            const ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L21ldGFkYXRhL2VudGl0eV9tZXRhZGF0YV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRCxPQUFPLEVBQWtCLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pFLE9BQU8sRUFDUyxtQkFBbUIsRUFBeUIsZ0JBQWdCLEVBQzFFLGlCQUFpQixFQUF1QixjQUFjLEVBQ3ZELE1BQU0sbUJBQW1CLENBQUM7QUFFM0I7O0dBRUc7QUFDSCxNQUFNLE9BQU8sa0JBQWtCO0lBRTdCOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxVQUF3QjtRQUNoRCxNQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNoRSxNQUFNLGtCQUFrQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNsRSxNQUFNLG1CQUFtQixHQUFHLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNwRSxNQUFNLHNCQUFzQixHQUFHLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RSxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUNyQixpQkFBaUIsRUFBSSxrQkFBa0IsRUFDdkMsbUJBQW1CLEVBQUUsc0JBQXNCLENBQzVDLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSCxNQUFNLENBQUMsbUJBQW1CLENBQUMsVUFBZTtRQUN4QyxPQUFPLFlBQVksQ0FBQyxtQ0FBbUMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbkYsQ0FBQztJQUdEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQWU7UUFDekMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLG1CQUFtQixDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFVBQWU7UUFDMUMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLHNCQUFzQixDQUFDLFVBQWU7UUFDM0MsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGlCQUFpQixDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVEOztPQUVHO0lBQ0gsTUFBTSxDQUFDLG1CQUFtQixDQUFDLFVBQWU7UUFDeEMsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsVUFBVSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQzFFLENBQUM7SUFFRDs7T0FFRztJQUNILE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxVQUF3QjtRQUNuRCxJQUFJLGtCQUFrQixDQUFDO1FBQ3ZCLE1BQU0saUJBQWlCLEdBQUcsa0JBQWtCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDOUUsTUFBTSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUMxRCxNQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxRQUFRLENBQTBCLENBQUM7WUFDeEUsSUFBSSxVQUFVLENBQUMsT0FBTyxLQUFLLElBQUksRUFBRTtnQkFDL0Isa0JBQWtCLEdBQUcsVUFBVSxDQUFDO2FBQ2pDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFR5cGUgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IE1ldGFkYXRhVXRpbCB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5JztcblxuaW1wb3J0IHsgRW50aXR5TWV0YWRhdGEsIEVOVElUWV9NRVRBIH0gZnJvbSAnLi9lbnRpdHlfZGVjb3JhdG9yJztcbmltcG9ydCB7XG4gIFByb3BNZXRhZGF0YSwgUFJJTUlUSVZFX1BST1BfTUVUQSwgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBPQkpFQ1RfUFJPUF9NRVRBLCBPYmplY3RQcm9wTWV0YWRhdGEsXG4gIERZTkFNSUNfUFJPUF9NRVRBLCBEeW5hbWljUHJvcE1ldGFkYXRhLCBMSVNUX1BST1BfTUVUQSwgICAgTGlzdFByb3BNZXRhZGF0YVxufSBmcm9tICcuL2ZpZWxkX2RlY29yYXRvcic7XG5cbi8qKlxuICog5a6e5L2T5YWD5pWw5o2u5bel5YW357G7XG4gKi9cbmV4cG9ydCBjbGFzcyBFbnRpdHlNZXRhZGF0YVV0aWwge1xuXG4gIC8qKlxuICAgKiDojrflj5bmiYDmnInlsZ7mgKdcbiAgICogQHRvZG/vvJrlsIHoo4XmoLnmja7ln7rnsbvojrflj5bmiYDmnInlhYPmlbDmja7nmoTmlrnms5XvvIzop6PlhrPph43lpI3ku6PnoIFcbiAgICovXG4gIHN0YXRpYyBnZXRBbGxOZ1Byb3BlcnRpZXMoZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IFByb3BNZXRhZGF0YSB9IHtcbiAgICBjb25zdCBuZ1BsYWluUHJvcGVydGllcyA9IHRoaXMuZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XG4gICAgY29uc3QgbmdFbnRpdHlQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XG4gICAgY29uc3QgbmdEeW5hbWljUHJvcGVydGllcyA9IHRoaXMuZ2V0TmdEeW5hbWljUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcbiAgICBjb25zdCBuZ0VudGl0eUxpc3RQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7fSxcbiAgICAgIG5nUGxhaW5Qcm9wZXJ0aWVzLCAgIG5nRW50aXR5UHJvcGVydGllcyxcbiAgICAgIG5nRHluYW1pY1Byb3BlcnRpZXMsIG5nRW50aXR5TGlzdFByb3BlcnRpZXNcbiAgICApO1xuICB9XG4gIFxuICAvKipcbiAgICog6I635Y+WRW50dGl5Q2xhc3NNZXRhZGF0YVxuICAgKi9cbiAgc3RhdGljIGdldE5nRW50aXR5TWF0YWRhdGEoZW50aXR5VHlwZTogYW55KTogRW50aXR5TWV0YWRhdGF7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRDbGFzc01ldGFkYXRhQnlOYW1lV2l0aFRyYW5zbGF0ZShlbnRpdHlUeXBlLCBFTlRJVFlfTUVUQSk7XG4gIH1cblxuXG4gIC8qKlxuICAgKiDojrflj5ZQcmltaXRpdmVQcm9wTWV0YWRhdGHnmoTlsZ7mgKflhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIH0ge1xuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgUFJJTUlUSVZFX1BST1BfTUVUQSk7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+WT2JqZWN0UHJvcE1ldGFkYXRh5bGe5oCn5YWD5pWw5o2uXG4gICAqL1xuICBzdGF0aWMgZ2V0TmdPYmplY3RQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZShlbnRpdHlUeXBlLCBPQkpFQ1RfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5ZEeW5hbWljUHJvcE1ldGFkYXRh5bGe5oCn5YWD5pWw5o2uXG4gICAqL1xuICBzdGF0aWMgZ2V0TmdEeW5hbWljUHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogRHluYW1pY1Byb3BNZXRhZGF0YSB9IHtcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIERZTkFNSUNfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5ZMaXN0UHJvcE1ldGFkYXRh5bGe5oCn5YWD5pWw5o2uXG4gICAqL1xuICBzdGF0aWMgZ2V0TmdMaXN0UHJvcGVydGllcyhlbnRpdHlUeXBlOiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogTGlzdFByb3BNZXRhZGF0YSB9IHtcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIExJU1RfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bkuLvplK7lsZ7mgKflhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXRQcmltYXJ5S2V5UHJvcGVydHkoZW50aXR5VHlwZTogVHlwZTxFbnRpdHk+KTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIHtcbiAgICBsZXQgcHJpbWFyeUtleVByb3BlcnR5O1xuICAgIGNvbnN0IG5nUGxhaW5Qcm9wZXJ0aWVzID0gRW50aXR5TWV0YWRhdGFVdGlsLmdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xuICAgIE9iamVjdC5rZXlzKG5nUGxhaW5Qcm9wZXJ0aWVzKS5mb3JFYWNoKChwcm9wTmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICBjb25zdCBuZ1Byb3BlcnR5ID0gbmdQbGFpblByb3BlcnRpZXNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcbiAgICAgIGlmIChuZ1Byb3BlcnR5LnByaW1hcnkgPT09IHRydWUpIHtcbiAgICAgICAgcHJpbWFyeUtleVByb3BlcnR5ID0gbmdQcm9wZXJ0eTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiBwcmltYXJ5S2V5UHJvcGVydHk7XG4gIH1cbn1cbiJdfQ==