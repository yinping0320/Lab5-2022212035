/*
 * @Author: Witt
 * @Date: 2018-12-27 09:26:41
 * @Last Modified by: Witt
 * @Last Modified time: 2019-01-15 22:00:45
 */
import { DataPathNode } from './data_path_node';
/**
 * 变更路径（简单双向列表）
 */
class DataPath {
    /**
     * 构造函数
     */
    constructor() {
        this.head = new DataPathNode(null, null);
        this.length = 0;
    }
    /**
     * 添加一个节点到头部
     */
    unshift(type, data) {
        const newNode = new DataPathNode(type, data);
        newNode.next = this.head.next;
        newNode.prev = this.head;
        this.head.next = newNode;
        if (newNode.next) {
            newNode.next.prev = newNode;
        }
        this.length++;
    }
    /**
     * 在链表最后追加一个节点
     */
    push(type, data) {
        const tailNode = this.getTail();
        const newNode = new DataPathNode(type, data);
        tailNode.next = newNode;
        this.length++;
    }
    /**
     * 获取链表尾部节点
     */
    getTail() {
        let lastNode = this.head;
        while (lastNode.next) {
            lastNode = lastNode.next;
        }
        return lastNode;
    }
    /**
     * 转换为数组格式
     */
    toArray() {
        const pathArray = [];
        let currentNode = this.head.next;
        while (currentNode) {
            pathArray.push(`${currentNode.type}:${currentNode.value}`);
            currentNode = currentNode.next;
        }
        return pathArray;
    }
    /**
     * 转换为字符串格式
     */
    toString() {
        const pathArray = this.toArray();
        const pathString = pathArray.join(', ');
        return `[${pathString}]`;
    }
    /**
     * 拷贝
     */
    clone() {
        const newDataPath = new DataPath();
        let curDataNode = this.head.next;
        while (curDataNode) {
            newDataPath.push(curDataNode.type, curDataNode.value);
            curDataNode = curDataNode.next;
        }
        return newDataPath;
    }
}
export { DataPath };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9wYXRoLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2VudGl0eS9lbnRpdHktcGF0aC9kYXRhX3BhdGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7O0dBS0c7QUFFSCxPQUFPLEVBQUUsWUFBWSxFQUFvQixNQUFNLGtCQUFrQixDQUFDO0FBQ2xFOztHQUVHO0FBQ0gsTUFBTSxRQUFRO0lBWVo7O09BRUc7SUFDSDtRQUNFLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBQ2xCLENBQUM7SUFFRDs7T0FFRztJQUNJLE9BQU8sQ0FBQyxJQUFzQixFQUFFLElBQVM7UUFDOUMsTUFBTSxPQUFPLEdBQUcsSUFBSSxZQUFZLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQzdDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDOUIsT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBRXpCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUN6QixJQUFJLE9BQU8sQ0FBQyxJQUFJLEVBQUU7WUFDaEIsT0FBTyxDQUFDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDO1NBQzdCO1FBRUQsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ2hCLENBQUM7SUFFRDs7T0FFRztJQUNJLElBQUksQ0FBQyxJQUFzQixFQUFFLElBQVM7UUFDM0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQ2hDLE1BQU0sT0FBTyxHQUFHLElBQUksWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM3QyxRQUFRLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUN4QixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDaEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDekIsT0FBTyxRQUFRLENBQUMsSUFBSSxFQUFFO1lBQ3BCLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDO1NBQzFCO1FBQ0QsT0FBTyxRQUFRLENBQUM7SUFDbEIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksT0FBTztRQUNaLE1BQU0sU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLFdBQVcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztRQUNqQyxPQUFPLFdBQVcsRUFBRTtZQUNsQixTQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsV0FBVyxDQUFDLElBQUksSUFBSSxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBRTtZQUM1RCxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztTQUNoQztRQUNELE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7SUFFRDs7T0FFRztJQUNJLFFBQVE7UUFDYixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7UUFDakMsTUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUN4QyxPQUFPLElBQUksVUFBVSxHQUFHLENBQUM7SUFDM0IsQ0FBQztJQUVEOztPQUVHO0lBQ0ksS0FBSztRQUNWLE1BQU0sV0FBVyxHQUFHLElBQUksUUFBUSxFQUFFLENBQUM7UUFDbkMsSUFBSSxXQUFXLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDakMsT0FBTyxXQUFXLEVBQUU7WUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN0RCxXQUFXLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQztTQUNoQztRQUNELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxRQUFRLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBAQXV0aG9yOiBXaXR0XG4gKiBARGF0ZTogMjAxOC0xMi0yNyAwOToyNjo0MVxuICogQExhc3QgTW9kaWZpZWQgYnk6IFdpdHRcbiAqIEBMYXN0IE1vZGlmaWVkIHRpbWU6IDIwMTktMDEtMTUgMjI6MDA6NDVcbiAqL1xuXG5pbXBvcnQgeyBEYXRhUGF0aE5vZGUsIERhdGFQYXRoTm9kZVR5cGUgfSBmcm9tICcuL2RhdGFfcGF0aF9ub2RlJztcbi8qKlxuICog5Y+Y5pu06Lev5b6E77yI566A5Y2V5Y+M5ZCR5YiX6KGo77yJXG4gKi9cbmNsYXNzIERhdGFQYXRoIHtcblxuICAvKipcbiAgICog5aS06IqC54K5XG4gICAqL1xuICBwdWJsaWMgaGVhZDogRGF0YVBhdGhOb2RlO1xuXG4gIC8qKlxuICAgKiDplb/luqZcbiAgICovXG4gIHB1YmxpYyBsZW5ndGg6IG51bWJlcjtcblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmhlYWQgPSBuZXcgRGF0YVBhdGhOb2RlKG51bGwsIG51bGwpO1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmt7vliqDkuIDkuKroioLngrnliLDlpLTpg6hcbiAgICovXG4gIHB1YmxpYyB1bnNoaWZ0KHR5cGU6IERhdGFQYXRoTm9kZVR5cGUsIGRhdGE6IGFueSkge1xuICAgIGNvbnN0IG5ld05vZGUgPSBuZXcgRGF0YVBhdGhOb2RlKHR5cGUsIGRhdGEpO1xuICAgIG5ld05vZGUubmV4dCA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIG5ld05vZGUucHJldiA9IHRoaXMuaGVhZDtcblxuICAgIHRoaXMuaGVhZC5uZXh0ID0gbmV3Tm9kZTtcbiAgICBpZiAobmV3Tm9kZS5uZXh0KSB7XG4gICAgICBuZXdOb2RlLm5leHQucHJldiA9IG5ld05vZGU7XG4gICAgfVxuXG4gICAgdGhpcy5sZW5ndGgrKztcbiAgfVxuXG4gIC8qKlxuICAgKiDlnKjpk77ooajmnIDlkI7ov73liqDkuIDkuKroioLngrlcbiAgICovXG4gIHB1YmxpYyBwdXNoKHR5cGU6IERhdGFQYXRoTm9kZVR5cGUsIGRhdGE6IGFueSkge1xuICAgIGNvbnN0IHRhaWxOb2RlID0gdGhpcy5nZXRUYWlsKCk7XG4gICAgY29uc3QgbmV3Tm9kZSA9IG5ldyBEYXRhUGF0aE5vZGUodHlwZSwgZGF0YSk7XG4gICAgdGFpbE5vZGUubmV4dCA9IG5ld05vZGU7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bpk77ooajlsL7pg6joioLngrlcbiAgICovXG4gIHB1YmxpYyBnZXRUYWlsKCk6IERhdGFQYXRoTm9kZSB7XG4gICAgbGV0IGxhc3ROb2RlID0gdGhpcy5oZWFkO1xuICAgIHdoaWxlIChsYXN0Tm9kZS5uZXh0KSB7XG4gICAgICBsYXN0Tm9kZSA9IGxhc3ROb2RlLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBsYXN0Tm9kZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDovazmjaLkuLrmlbDnu4TmoLzlvI9cbiAgICovXG4gIHB1YmxpYyB0b0FycmF5KCkge1xuICAgIGNvbnN0IHBhdGhBcnJheSA9IFtdO1xuICAgIGxldCBjdXJyZW50Tm9kZSA9IHRoaXMuaGVhZC5uZXh0O1xuICAgIHdoaWxlIChjdXJyZW50Tm9kZSkge1xuICAgICAgcGF0aEFycmF5LnB1c2goYCR7Y3VycmVudE5vZGUudHlwZX06JHtjdXJyZW50Tm9kZS52YWx1ZX1gKSA7XG4gICAgICBjdXJyZW50Tm9kZSA9IGN1cnJlbnROb2RlLm5leHQ7XG4gICAgfVxuICAgIHJldHVybiBwYXRoQXJyYXk7XG4gIH1cblxuICAvKipcbiAgICog6L2s5o2i5Li65a2X56ym5Liy5qC85byPXG4gICAqL1xuICBwdWJsaWMgdG9TdHJpbmcoKSB7XG4gICAgY29uc3QgcGF0aEFycmF5ID0gdGhpcy50b0FycmF5KCk7XG4gICAgY29uc3QgcGF0aFN0cmluZyA9IHBhdGhBcnJheS5qb2luKCcsICcpO1xuICAgIHJldHVybiBgWyR7cGF0aFN0cmluZ31dYDtcbiAgfVxuXG4gIC8qKlxuICAgKiDmi7fotJ1cbiAgICovXG4gIHB1YmxpYyBjbG9uZSgpOiBEYXRhUGF0aCB7XG4gICAgY29uc3QgbmV3RGF0YVBhdGggPSBuZXcgRGF0YVBhdGgoKTtcbiAgICBsZXQgY3VyRGF0YU5vZGUgPSB0aGlzLmhlYWQubmV4dDtcbiAgICB3aGlsZSAoY3VyRGF0YU5vZGUpIHtcbiAgICAgIG5ld0RhdGFQYXRoLnB1c2goY3VyRGF0YU5vZGUudHlwZSwgY3VyRGF0YU5vZGUudmFsdWUpO1xuICAgICAgY3VyRGF0YU5vZGUgPSBjdXJEYXRhTm9kZS5uZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbmV3RGF0YVBhdGg7XG4gIH1cbn1cblxuZXhwb3J0IHsgRGF0YVBhdGggfTtcbiJdfQ==