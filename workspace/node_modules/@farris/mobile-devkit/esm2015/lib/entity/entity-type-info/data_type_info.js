/*
 * @Author: Witt
 * @Date: 2018-12-07 09:05:09
 * @Last Modified by: Witt
 * @Last Modified time: 2018-12-27 20:35:02
 */
import { EntityMetadataUtil } from '../metadata/index';
import { DataPropGroup } from './data_prop_info';
/**
 * 实体类型信息
 * @todo：
 * 1、构造时不应该识别Entity模块的东西，应该是更抽象的；
 * 2、构造函数应该接收一个Builder接口，由Entity或者其他实现层来实现这个接口。
 */
class DataTypeInfo {
    /**
     * 是否为值对象
     */
    get isValueObject() {
        return !this.primaryKey;
    }
    /**
     * 构造函数
     * @todo：不应该识别
     */
    constructor(type) {
        this.type = type;
        this.primaryKey = '';
        this.foreignKey = '';
        this.propInfoMap = new Map();
        this.collectEntityInfos();
        this.collectPropInfos();
    }
    /**
     * 获取全部属性信息
     */
    getPropInfos() {
        return Array.from(this.propInfoMap.values());
    }
    /**
     * 获取全部属性的名称
     */
    getPropNames() {
        const propNames = [];
        const propInfos = this.getPropInfos();
        propInfos.forEach((propInfo) => {
            propNames.push(propInfo.name);
        });
        return propNames;
    }
    /**
     * 根据group获取属性信息数组
     */
    getPropInfosByGroup(group) {
        const allPropInfos = Array.from(this.propInfoMap.values());
        const propInfos = allPropInfos.filter((propInfo) => {
            return propInfo.group === group;
        });
        return propInfos;
    }
    /**
     * 根据group获取属性名称数组
     * @param group 属性分组
     */
    getPropNamesByGroup(group) {
        const propNames = [];
        const propInfos = this.getPropInfosByGroup(group);
        propInfos.forEach((propInfo) => {
            propNames.push(propInfo.name);
        });
        return propNames;
    }
    /**
     * 根据propName获取属性信息
     */
    getPropInfoByName(propName) {
        if (this.propInfoMap.has(propName)) {
            return this.propInfoMap.get(propName);
        }
        return null;
    }
    /**
     * 根据path获取属性信息
     */
    getPropInfoByPath(path) {
        // 先复制，防止shift方法产生污染
        const arrPath = path.concat([]);
        if (arrPath.length === 0) {
            throw Error(`属性路径不能为空`);
        }
        // 循环查找
        let typeInfo = this;
        let propInfo = null;
        while (typeInfo && arrPath.length > 0) {
            const propName = arrPath.shift();
            propInfo = typeInfo.getPropInfoByName(propName);
            if (!propInfo) {
                throw Error(`路径${path}中存在不正确的节点${propName}，请检查`);
            }
            typeInfo = propInfo.typeInfo;
            // 如果是动态列，并且路径数组里还有属性，统一设置为null(动态列不再描述属性信息)
            if (propInfo.group === DataPropGroup.Dynamic && arrPath.length > 0) {
                propInfo = null;
                typeInfo = null;
            }
        }
        return propInfo;
    }
    /**
     * 根据path获取对应属性的TypeInfo
     */
    getTypeInfoByPath(path) {
        // 空数组时返回
        if (path.length === 0) {
            return this;
        }
        // 获取对应属性信息
        const propInfo = this.getPropInfoByPath(path);
        if (!propInfo.typeInfo) {
            throw Error(`路径${path}无法定位到一个EntityTypeInfo，请检查`);
        }
        return propInfo.typeInfo;
    }
    /**
     * 获取主键的属性信息
     */
    getPrimaryKeyPropInfo() {
        return this.getPropInfoByName(this.primaryKey);
    }
    /**
     * 根据name获取影射名
     */
    getPropMappingByName(name) {
        const propInfo = this.getPropInfoByName(name);
        if (!propInfo) {
            return '';
        }
        return propInfo.mapping;
    }
    /**
     * 根据path获取映射名
     */
    getPropMappingByPath(path) {
        const propInfo = this.getPropInfoByPath(path);
        if (!propInfo) {
            return '';
        }
        return propInfo.mapping;
    }
    /**
     * 检查属性是否属于特定的分组
     */
    checkPropGroup(propName, propGroup) {
        const propInfo = this.getPropInfoByName(propName);
        if (propInfo && propInfo.group === propGroup) {
            return true;
        }
        return false;
    }
    /**
     * --------------------------------------------------------------------------------
     * 属性元数据 => 属性描述信息
     * --------------------------------------------------------------------------------
     */
    collectEntityInfos() {
        const entityMetadata = EntityMetadataUtil.getNgEntityMatadata(this.type);
        this.entityInfo = entityMetadata;
    }
    /**
     * 搜集所有属性信息
     * @todo：消除重复代码，ts不支持interface类型检测，暂时通过遍历实现。
     */
    collectPropInfos() {
        // 简单属性
        const ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(this.type);
        Object.keys(ngPlainProperties).forEach((propName) => {
            const ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                this.primaryKey = propName;
            }
            if (ngProperty.foreign === true) {
                this.foreignKey = propName;
            }
            this.addPropInfo(DataPropGroup.Primitive, propName, ngProperty.dataField, null, ngProperty);
        });
        // 实体属性
        const ngEntityProperties = EntityMetadataUtil.getNgObjectProperties(this.type);
        Object.keys(ngEntityProperties).forEach((propName) => {
            const ngProperty = ngEntityProperties[propName];
            this.addPropInfo(DataPropGroup.Object, propName, ngProperty.dataField, ngProperty.type, ngProperty);
        });
        // 动态实体属性
        const ngDynamicProperties = EntityMetadataUtil.getNgDynamicProperties(this.type);
        Object.keys(ngDynamicProperties).forEach((propName) => {
            const ngProperty = ngDynamicProperties[propName];
            this.addPropInfo(DataPropGroup.Dynamic, propName, ngProperty.dataField, null, ngProperty);
        });
        // 实体列表属性
        const ngEntityListProperties = EntityMetadataUtil.getNgListProperties(this.type);
        Object.keys(ngEntityListProperties).forEach((propName) => {
            const ngProperty = ngEntityListProperties[propName];
            this.addPropInfo(DataPropGroup.List, propName, ngProperty.dataField, ngProperty.type, ngProperty);
        });
    }
    /**
     * 添加属性信息
     */
    addPropInfo(group, name, mapping, type, metadataInfo) {
        // 没有设置影射时，用属性名充当影射
        mapping = mapping ? mapping : name;
        let typeInfo = null;
        if (type) {
            typeInfo = new DataTypeInfo(type);
        }
        const propInfo = { group, name, mapping, typeInfo, metadataInfo };
        this.propInfoMap.set(name, propInfo);
    }
}
export { DataTypeInfo };
//# sourceMappingURL=data:application/json;base64,