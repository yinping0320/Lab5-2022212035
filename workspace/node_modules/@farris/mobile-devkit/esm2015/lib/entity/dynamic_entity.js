import { ModifyType } from '../changeset/types';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { Entity } from './entity';
/**
 * 支持动态字段集合的动态实体
 */
export class DynamicEntity extends Entity {
    /**
     * 是否是嵌套的动态实体
     */
    get IsNested() {
        return this[PARENT_CLASS] instanceof DynamicEntity;
    }
    /**
     * @param data JSON数据
     */
    constructor(data) {
        super(data);
        this.loadDynamicData(data);
    }
    loadDynamicData(dynamicData) {
        this.initializeDynamicField(dynamicData);
        // super.loadFields(dynamicData);
    }
    /**
     * 初始化动态数据
     * @param dynamicData 动态数据
     */
    initializeDynamicField(dynamicData) {
        // 遍历动态数据的key，创建动态实体属性。
        Object.keys(dynamicData).forEach(propertyName => {
            // 如果属性已经存在，先删除
            if (this[propertyName]) {
                delete this[propertyName];
            }
            const dataField = propertyName;
            if (dynamicData[propertyName] instanceof Object) {
                const path = this.createPath(propertyName);
                let dynamicEntity = this.createDynamicEntityFromJsonData(dynamicData[propertyName], path);
                Object.defineProperty(this, propertyName, {
                    get: function () {
                        return dynamicEntity;
                    },
                    set: function (value) {
                        const modifyInfo = {
                            path: dynamicEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        dynamicEntity = this.createDynamicEntityFromJsonData(value, path);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
            else {
                Object.defineProperty(this, propertyName, {
                    // 定义返回数据方法。
                    get: function () {
                        // 从初始数据返回字段值。
                        return this.data[dataField];
                    },
                    set: function (value) {
                        // 值相同时不触发变更。
                        const oldValue = this.data[dataField];
                        if (oldValue === value) {
                            return;
                        }
                        // 更新元数据数据。
                        this.data[dataField] = value;
                        // 变更集
                        const changes = {
                            type: ModifyType.ValueChange,
                            path: this.createPath(propertyName),
                            value: value,
                            preValue: oldValue
                        };
                        if (this[PARENT_PATH]) {
                            changes.path = this[PARENT_PATH].concat(changes.path);
                        }
                        this.setChanges(changes);
                    },
                    configurable: true
                });
            }
        });
    }
    createDynamicEntityFromJsonData(value, parentPath) {
        let instance;
        if (value instanceof DynamicEntity) {
            instance = value;
        }
        else {
            instance = new DynamicEntity(value);
        }
        instance[PARENT_CLASS] = this;
        instance[PARENT_PATH] = parentPath;
        instance.onValueChanged.subscribe(changes => {
            if (changes) {
                changes.path = (this[PARENT_PATH] || []).concat(changes.path);
                this.setChanges(changes);
            }
        });
        return instance;
    }
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     * @todo
     * 1、preValue的处理有问题，下级传递上来的变更这样可以，根DyanmicaEntity上的，data已经发生变化，prevalue和value是一样了；
     * 2、当value是下级冒泡上来的，需要根据value去更新当前层级的data，该逻辑不应该放在setChagnes，待修改。
     */
    setChanges(value) {
        const propertyName = value.path[value.path.length - 1];
        const preValue = Object.assign({}, this.data);
        this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        let parentPath = value.path;
        if (value.path.length > 2) {
            parentPath = value.path.slice(0, value.path.length - 2);
        }
        // 统一不使用构造函数（保持和其他位置对Modification的构造一致）
        // const parentModification = new Modification(this.data, value.type, parentPath, preValue);
        const parentModification = {
            path: parentPath,
            value: this.data,
            preValue: preValue,
            type: value.type
        };
        this.valueChanged.next(parentModification);
        this.changeSet.append(value);
    }
    /**
     * toJSON
     */
    toJSON() {
        return this.data;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pY19lbnRpdHkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L2R5bmFtaWNfZW50aXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQWdCLE1BQU0sb0JBQW9CLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBVyxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDN0QsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUVsQzs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFjLFNBQVEsTUFBTTtJQUV2Qzs7T0FFRztJQUNILElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsWUFBWSxhQUFhLENBQUM7SUFDckQsQ0FBQztJQUVEOztPQUVHO0lBQ0gsWUFBWSxJQUFTO1FBQ25CLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNaLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDN0IsQ0FBQztJQUVNLGVBQWUsQ0FBQyxXQUFnQjtRQUNyQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDekMsaUNBQWlDO0lBQ25DLENBQUM7SUFFRDs7O09BR0c7SUFDSyxzQkFBc0IsQ0FBQyxXQUFnQjtRQUM3Qyx1QkFBdUI7UUFDdkIsTUFBTSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLEVBQUU7WUFFOUMsZUFBZTtZQUNmLElBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUN0QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQzthQUMzQjtZQUVELE1BQU0sU0FBUyxHQUFHLFlBQVksQ0FBQztZQUMvQixJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsWUFBWSxNQUFNLEVBQUU7Z0JBQy9DLE1BQU0sSUFB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OztPQUVHO0lBQ0ksTUFBTTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNuQixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2RpZnlUeXBlLCBNb2RpZmljYXRpb24gfSBmcm9tICcuLi9jaGFuZ2VzZXQvdHlwZXMnO1xuaW1wb3J0IHsgUEFSRU5UX1BBVEgsIER5bmFtaWMsIFBBUkVOVF9DTEFTUyB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi9lbnRpdHknO1xuXG4vKipcbiAqIOaUr+aMgeWKqOaAgeWtl+autembhuWQiOeahOWKqOaAgeWunuS9k1xuICovXG5leHBvcnQgY2xhc3MgRHluYW1pY0VudGl0eSBleHRlbmRzIEVudGl0eSBpbXBsZW1lbnRzIER5bmFtaWMge1xuXG4gIC8qKlxuICAgKiDmmK/lkKbmmK/ltYzlpZfnmoTliqjmgIHlrp7kvZNcbiAgICovXG4gIHB1YmxpYyBnZXQgSXNOZXN0ZWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXNbUEFSRU5UX0NMQVNTXSBpbnN0YW5jZW9mIER5bmFtaWNFbnRpdHk7XG4gIH1cblxuICAvKipcbiAgICogQHBhcmFtIGRhdGEgSlNPTuaVsOaNrlxuICAgKi9cbiAgY29uc3RydWN0b3IoZGF0YTogYW55KSB7XG4gICAgc3VwZXIoZGF0YSk7XG4gICAgdGhpcy5sb2FkRHluYW1pY0RhdGEoZGF0YSk7XG4gIH1cblxuICBwdWJsaWMgbG9hZER5bmFtaWNEYXRhKGR5bmFtaWNEYXRhOiBhbnkpIHtcbiAgICB0aGlzLmluaXRpYWxpemVEeW5hbWljRmllbGQoZHluYW1pY0RhdGEpO1xuICAgIC8vIHN1cGVyLmxvYWRGaWVsZHMoZHluYW1pY0RhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneWni+WMluWKqOaAgeaVsOaNrlxuICAgKiBAcGFyYW0gZHluYW1pY0RhdGEg5Yqo5oCB5pWw5o2uXG4gICAqL1xuICBwcml2YXRlIGluaXRpYWxpemVEeW5hbWljRmllbGQoZHluYW1pY0RhdGE6IGFueSk6IHZvaWQge1xuICAgIC8vIOmBjeWOhuWKqOaAgeaVsOaNrueahGtlee+8jOWIm+W7uuWKqOaAgeWunuS9k+WxnuaAp+OAglxuICAgIE9iamVjdC5rZXlzKGR5bmFtaWNEYXRhKS5mb3JFYWNoKHByb3BlcnR5TmFtZSA9PiB7XG5cbiAgICAgIC8vIOWmguaenOWxnuaAp+W3sue7j+WtmOWcqO+8jOWFiOWIoOmZpFxuICAgICAgaWYgKHRoaXNbcHJvcGVydHlOYW1lXSkge1xuICAgICAgICBkZWxldGUgdGhpc1twcm9wZXJ0eU5hbWVdO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBkYXRhRmllbGQgPSBwcm9wZXJ0eU5hbWU7XG4gICAgICBpZiAoZHluYW1pY0RhdGFbcHJvcGVydHlOYW1lXSBpbnN0YW5jZW9mIE9iamVjdCkge1xuICAgICAgICBjb25zdCBwYXRoID0gdGhpcy5jcmVhdGVQYXRoKHByb3BlcnR5TmFtZSk7XG4gICAgICAgIGxldCBkeW5hbWljRW50aXR5ID0gdGhpcy5jcmVhdGVEeW5hbWljRW50aXR5RnJvbUpzb25EYXRhKGR5bmFtaWNEYXRhW3Byb3BlcnR5TmFtZV0sIHBhdGgpO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgcHJvcGVydHlOYW1lLCB7XG4gICAgICAgICAgZ2V0OiBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBkeW5hbWljRW50aXR5O1xuICAgICAgICAgIH0sXG4gICAgICAgICAgc2V0OiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgbW9kaWZ5SW5mbyA9IHtcbiAgICAgICAgICAgICAgcGF0aDogZHluYW1pY0VudGl0eVtQQVJFTlRfUEFUSF0sXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZS5kYXRhLFxuICAgICAgICAgICAgICBwcmVWYWx1ZTogdGhpc1twcm9wZXJ0eU5hbWVdLmRhdGEsXG4gICAgICAgICAgICAgIHR5cGU6IE1vZGlmeVR5cGUuVmFsdWVDaGFuZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBkeW5hbWljRW50aXR5ID0gdGhpcy5jcmVhdGVEeW5hbWljRW50aXR5RnJvbUpzb25EYXRhKHZhbHVlLCBwYXRoKTtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hhbmdlcyhtb2RpZnlJbmZvKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBwcm9wZXJ0eU5hbWUsIHtcbiAgICAgICAgICAvLyDlrprkuYnov5Tlm57mlbDmja7mlrnms5XjgIJcbiAgICAgICAgICBnZXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8g5LuO5Yid5aeL5pWw5o2u6L+U5Zue5a2X5q615YC844CCXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhW2RhdGFGaWVsZF07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICAvLyDlgLznm7jlkIzml7bkuI3op6blj5Hlj5jmm7TjgIJcbiAgICAgICAgICAgIGNvbnN0IG9sZFZhbHVlID0gdGhpcy5kYXRhW2RhdGFGaWVsZF07XG4gICAgICAgICAgICBpZiAob2xkVmFsdWUgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIOabtOaWsOWFg+aVsOaNruaVsOaNruOAglxuICAgICAgICAgICAgdGhpcy5kYXRhW2RhdGFGaWVsZF0gPSB2YWx1ZTtcbiAgICAgICAgICAgIC8vIOWPmOabtOmbhlxuICAgICAgICAgICAgY29uc3QgY2hhbmdlcyA9IHtcbiAgICAgICAgICAgICAgdHlwZTogTW9kaWZ5VHlwZS5WYWx1ZUNoYW5nZSxcbiAgICAgICAgICAgICAgcGF0aDogdGhpcy5jcmVhdGVQYXRoKHByb3BlcnR5TmFtZSksXG4gICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgcHJlVmFsdWU6IG9sZFZhbHVlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBpZiAodGhpc1tQQVJFTlRfUEFUSF0pIHtcbiAgICAgICAgICAgICAgY2hhbmdlcy5wYXRoID0gdGhpc1tQQVJFTlRfUEFUSF0uY29uY2F0KGNoYW5nZXMucGF0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnNldENoYW5nZXMoY2hhbmdlcyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZUR5bmFtaWNFbnRpdHlGcm9tSnNvbkRhdGEodmFsdWU6IGFueSwgcGFyZW50UGF0aDogc3RyaW5nW10pIHtcbiAgICBsZXQgaW5zdGFuY2U6IER5bmFtaWNFbnRpdHk7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgRHluYW1pY0VudGl0eSkge1xuICAgICAgaW5zdGFuY2UgPSB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgaW5zdGFuY2UgPSBuZXcgRHluYW1pY0VudGl0eSh2YWx1ZSk7XG4gICAgfVxuICAgIGluc3RhbmNlW1BBUkVOVF9DTEFTU10gPSB0aGlzO1xuICAgIGluc3RhbmNlW1BBUkVOVF9QQVRIXSA9IHBhcmVudFBhdGg7XG4gICAgaW5zdGFuY2Uub25WYWx1ZUNoYW5nZWQuc3Vic2NyaWJlKGNoYW5nZXMgPT4ge1xuICAgICAgaWYgKGNoYW5nZXMpIHtcbiAgICAgICAgY2hhbmdlcy5wYXRoID0gKHRoaXNbUEFSRU5UX1BBVEhdIHx8IFtdKS5jb25jYXQoY2hhbmdlcy5wYXRoKTtcbiAgICAgICAgdGhpcy5zZXRDaGFuZ2VzKGNoYW5nZXMpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIGluc3RhbmNlO1xuICB9XG5cbiAgLyoqXG4gICAqIOWwhuWPmOabtOiusOW9leS/neWtmOiHs+WPmOabtOmbhuS4rVxuICAgKiBAcGFyYW0gdmFsdWUg5Y+Y5pu06K6w5b2VXG4gICAqIEB0b2RvXG4gICAqIDHjgIFwcmVWYWx1ZeeahOWkhOeQhuaciemXrumimO+8jOS4i+e6p+S8oOmAkuS4iuadpeeahOWPmOabtOi/meagt+WPr+S7pe+8jOaguUR5YW5taWNhRW50aXR55LiK55qE77yMZGF0YeW3sue7j+WPkeeUn+WPmOWMlu+8jHByZXZhbHVl5ZKMdmFsdWXmmK/kuIDmoLfkuobvvJtcbiAgICogMuOAgeW9k3ZhbHVl5piv5LiL57qn5YaS5rOh5LiK5p2l55qE77yM6ZyA6KaB5qC55o2udmFsdWXljrvmm7TmlrDlvZPliY3lsYLnuqfnmoRkYXRh77yM6K+l6YC76L6R5LiN5bqU6K+l5pS+5Zyoc2V0Q2hhZ25lc++8jOW+heS/ruaUueOAglxuICAgKi9cbiAgc2V0Q2hhbmdlcyh2YWx1ZTogTW9kaWZpY2F0aW9uKTogdm9pZCB7XG4gICAgY29uc3QgcHJvcGVydHlOYW1lID0gdmFsdWUucGF0aFt2YWx1ZS5wYXRoLmxlbmd0aCAtIDFdO1xuICAgIGNvbnN0IHByZVZhbHVlID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5kYXRhKTtcbiAgICB0aGlzLm5ld0RhdGEgPSBPYmplY3QuYXNzaWduKHRoaXMubmV3RGF0YSwgeyBbcHJvcGVydHlOYW1lXTogdmFsdWUudmFsdWUgfSk7XG4gICAgbGV0IHBhcmVudFBhdGggPSB2YWx1ZS5wYXRoO1xuICAgIGlmICh2YWx1ZS5wYXRoLmxlbmd0aCA+IDIpIHtcbiAgICAgIHBhcmVudFBhdGggPSB2YWx1ZS5wYXRoLnNsaWNlKDAsIHZhbHVlLnBhdGgubGVuZ3RoIC0gMik7XG4gICAgfVxuXG4gICAgLy8g57uf5LiA5LiN5L2/55So5p6E6YCg5Ye95pWw77yI5L+d5oyB5ZKM5YW25LuW5L2N572u5a+5TW9kaWZpY2F0aW9u55qE5p6E6YCg5LiA6Ie077yJXG4gICAgLy8gY29uc3QgcGFyZW50TW9kaWZpY2F0aW9uID0gbmV3IE1vZGlmaWNhdGlvbih0aGlzLmRhdGEsIHZhbHVlLnR5cGUsIHBhcmVudFBhdGgsIHByZVZhbHVlKTtcbiAgICBjb25zdCBwYXJlbnRNb2RpZmljYXRpb246IE1vZGlmaWNhdGlvbiA9IHtcbiAgICAgIHBhdGg6IHBhcmVudFBhdGgsXG4gICAgICB2YWx1ZTogdGhpcy5kYXRhLFxuICAgICAgcHJlVmFsdWU6IHByZVZhbHVlLFxuICAgICAgdHlwZTogdmFsdWUudHlwZVxuICAgIH07XG5cbiAgICB0aGlzLnZhbHVlQ2hhbmdlZC5uZXh0KHBhcmVudE1vZGlmaWNhdGlvbik7XG4gICAgdGhpcy5jaGFuZ2VTZXQuYXBwZW5kKHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiB0b0pTT05cbiAgICovXG4gIHB1YmxpYyB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfVxufVxuIl19