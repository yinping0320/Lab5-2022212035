import { PropertyUtil as BindingPropertyUtil } from './property_util';
import { EntityUtil as EntityLoadUtil } from './entity_util';
import { BindingListFactory } from './binding_list_factory';
import { BindingData } from './binding_data';
class BindingDataFactory {
    /**
     * 根据Repository创建一个BindingData
     */
    static createFromRepository(repository, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null, repository.entityTypeInfo);
        EntityLoadUtil.loadRepository(repository, bindingList);
        // 从repository初始化bindingData
        bindingData.pagingInfo = repository.entityCollection.paginationInfo;
        return bindingData;
    }
    /**
     * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
     * @internal
     * @summary
     * 1、该方法暂时仅供内部单元测试使用；
     * 2、该方法暂时只创建BindingData，不建立双向关联
     */
    static createFromEntityManager(entityManager, bindingPath) {
        const bindingData = new BindingData();
        const bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);
        const bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null, entityManager.entityCollection.entityTypeInfo);
        // 初始化数据
        const entities = entityManager.getEntitiesByPath([]);
        EntityLoadUtil.loadEntities(entities, bindingList);
        return bindingData;
    }
    /**
     * 根据已经存在的BindingData创建一个新的BindingData
     */
    static createFromExistingBindingData(existingBindingData, bindingPath) {
        const bindingData = new BindingData();
        bindingData.initByBindingList(existingBindingData.list, null, bindingData.dataTypeInfo);
        return bindingData;
    }
}
export { BindingDataFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhL2JpbmRpbmdfZGF0YV9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLElBQUksbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxJQUFJLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0MsTUFBTSxrQkFBa0I7SUFFdEI7O09BRUc7SUFDSSxNQUFNLENBQUMsb0JBQW9CLENBQUMsVUFBOEIsRUFBRSxXQUFtQjtRQUNwRixNQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLE1BQU0saUJBQWlCLEdBQUcsbUJBQW1CLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUNuRixNQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUNqRSxXQUFXLENBQUMsaUJBQWlCLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDNUUsY0FBYyxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdkQsNEJBQTRCO1FBQzVCLFdBQVcsQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQztRQUNwRSxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7Ozs7OztPQU1HO0lBQ0ksTUFBTSxDQUFDLHVCQUF1QixDQUFDLGFBQW9DLEVBQUUsV0FBbUI7UUFDN0YsTUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxNQUFNLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdEYsTUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakUsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBRWhHLFFBQVE7UUFDUixNQUFNLFFBQVEsR0FBYSxhQUFhLENBQUMsaUJBQWlCLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDL0QsY0FBYyxDQUFDLFlBQVksQ0FBQyxRQUFRLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFbkQsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLDZCQUE2QixDQUFDLG1CQUFnQyxFQUFFLFdBQW1CO1FBQy9GLE1BQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsV0FBVyxDQUFDLGlCQUFpQixDQUFDLG1CQUFtQixDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3hGLE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSAnLi4vZW50aXR5L2luZGV4JztcbmltcG9ydCB7IFJlcG9zaXRvcnksIEVudGl0eU1hbmFnZXIgfSBmcm9tICcuLi9yZXBvc2l0b3J5L2luZGV4JztcbmltcG9ydCB7IFByb3BlcnR5VXRpbCBhcyBCaW5kaW5nUHJvcGVydHlVdGlsIH0gZnJvbSAnLi9wcm9wZXJ0eV91dGlsJztcbmltcG9ydCB7IEVudGl0eVV0aWwgYXMgRW50aXR5TG9hZFV0aWwgfSBmcm9tICcuL2VudGl0eV91dGlsJztcbmltcG9ydCB7IEJpbmRpbmdMaXN0RmFjdG9yeSB9IGZyb20gJy4vYmluZGluZ19saXN0X2ZhY3RvcnknO1xuaW1wb3J0IHsgQmluZGluZ0RhdGEgfSBmcm9tICcuL2JpbmRpbmdfZGF0YSc7XG5cblxuY2xhc3MgQmluZGluZ0RhdGFGYWN0b3J5IHtcblxuICAvKipcbiAgICog5qC55o2uUmVwb3NpdG9yeeWIm+W7uuS4gOS4qkJpbmRpbmdEYXRhXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21SZXBvc2l0b3J5KHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8RW50aXR5PiwgYmluZGluZ1BhdGg6IHN0cmluZyk6IEJpbmRpbmdEYXRhIHtcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IG5ldyBCaW5kaW5nRGF0YSgpO1xuICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0aWVzID0gQmluZGluZ1Byb3BlcnR5VXRpbC5nZXRQcm9wZXJ0aWVzKHJlcG9zaXRvcnkuZW50aXR5VHlwZSk7XG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSBCaW5kaW5nTGlzdEZhY3RvcnkuY3JlYXRlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChiaW5kaW5nTGlzdCwgbnVsbCwgcmVwb3NpdG9yeS5lbnRpdHlUeXBlSW5mbyk7XG4gICAgRW50aXR5TG9hZFV0aWwubG9hZFJlcG9zaXRvcnkocmVwb3NpdG9yeSwgYmluZGluZ0xpc3QpO1xuXG4gICAgLy8g5LuOcmVwb3NpdG9yeeWIneWni+WMlmJpbmRpbmdEYXRhXG4gICAgYmluZGluZ0RhdGEucGFnaW5nSW5mbyA9IHJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5wYWdpbmF0aW9uSW5mbztcbiAgICByZXR1cm4gYmluZGluZ0RhdGE7XG4gIH1cblxuICAvKipcbiAgICog5qC55o2uRW50aXR5TWFuYWdlcuWIm+W7ukJpbmRpbmdEYXRh77yM5bm25bu656uL5Y+M5ZCR5YWz6IGU77yI6K+35Yu/5L2/55So77yJXG4gICAqIEBpbnRlcm5hbFxuICAgKiBAc3VtbWFyeVxuICAgKiAx44CB6K+l5pa55rOV5pqC5pe25LuF5L6b5YaF6YOo5Y2V5YWD5rWL6K+V5L2/55So77ybXG4gICAqIDLjgIHor6Xmlrnms5XmmoLml7blj6rliJvlu7pCaW5kaW5nRGF0Ye+8jOS4jeW7uueri+WPjOWQkeWFs+iBlFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGVGcm9tRW50aXR5TWFuYWdlcihlbnRpdHlNYW5hZ2VyOiBFbnRpdHlNYW5hZ2VyPEVudGl0eT4sIGJpbmRpbmdQYXRoOiBzdHJpbmcpOiBCaW5kaW5nRGF0YSB7XG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcbiAgICBjb25zdCBiaW5kaW5nUHJvcGVydGllcyA9IEJpbmRpbmdQcm9wZXJ0eVV0aWwuZ2V0UHJvcGVydGllcyhlbnRpdHlNYW5hZ2VyLmVudGl0eVR5cGUpO1xuICAgIGNvbnN0IGJpbmRpbmdMaXN0ID0gQmluZGluZ0xpc3RGYWN0b3J5LmNyZWF0ZShiaW5kaW5nUHJvcGVydGllcyk7XG4gICAgYmluZGluZ0RhdGEuaW5pdEJ5QmluZGluZ0xpc3QoYmluZGluZ0xpc3QsIG51bGwsIGVudGl0eU1hbmFnZXIuZW50aXR5Q29sbGVjdGlvbi5lbnRpdHlUeXBlSW5mbyk7XG5cbiAgICAvLyDliJ3lp4vljJbmlbDmja5cbiAgICBjb25zdCBlbnRpdGllczogRW50aXR5W10gPSBlbnRpdHlNYW5hZ2VyLmdldEVudGl0aWVzQnlQYXRoKFtdKTtcbiAgICBFbnRpdHlMb2FkVXRpbC5sb2FkRW50aXRpZXMoZW50aXRpZXMsIGJpbmRpbmdMaXN0KTtcblxuICAgIHJldHVybiBiaW5kaW5nRGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmoLnmja7lt7Lnu4/lrZjlnKjnmoRCaW5kaW5nRGF0YeWIm+W7uuS4gOS4quaWsOeahEJpbmRpbmdEYXRhXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21FeGlzdGluZ0JpbmRpbmdEYXRhKGV4aXN0aW5nQmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhLCBiaW5kaW5nUGF0aDogc3RyaW5nKSB7XG4gICAgY29uc3QgYmluZGluZ0RhdGEgPSBuZXcgQmluZGluZ0RhdGEoKTtcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChleGlzdGluZ0JpbmRpbmdEYXRhLmxpc3QsIG51bGwsIGJpbmRpbmdEYXRhLmRhdGFUeXBlSW5mbyk7XG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhO1xuICB9XG59XG5cbmV4cG9ydCB7IEJpbmRpbmdEYXRhRmFjdG9yeSB9O1xuIl19