/**
 * BindingObject相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { Subject, of } from 'rxjs';
import { ChangeType, ViewChangeType } from './changes';
import { BindingPropertyType } from './binding_property';
import { PropertyUtil } from './property_util';
/**
 * BindingObject是Entity在绑定层的一个影射，它将Entity内的数据转换为不可变对象，并用于界面绑定。
 */
class BindingObject {
    /**
     * 构造函数
     * @param properties 属性集合
     */
    constructor(properties) {
        /**
         * 标识是否提交过
         */
        this.isShowValidationMsg = false;
        /**
         * 以{ [propertyName]: FormControl }的形式存放每条数据的control
         */
        this.controlMap = {};
        this.properties = properties;
        this.primaryKey = PropertyUtil.getPrimaryKey(properties);
        this.innerValues = new Map();
        this.changes = new Subject();
        this.viewChanges = new Subject();
    }
    /**
     * 主键值
     */
    get primaryKeyValue() {
        return this.primaryKey ? this.getValue(this.primaryKey) : '';
    }
    /**
     * 设置是否提交过
     */
    setShowValidationMsg(flag) {
        this.isShowValidationMsg = flag;
    }
    /**
     * 根据属性名获取属性值
     * @param   propertyName 属性名
     * @returns 属性值
     */
    getValue(propertyName) {
        return this.innerValues.get(propertyName);
    }
    /**
     * 设置属性值
     * @param propertyName        属性名
     * @param propertyValue       属性值
     * @param emitEventToView     是否通知View层去更新界面，默认为false
     * @param emitEventToEntity   是否通知Entity层去更新值，默认为false
     * @param errors              错误消息
     * @param invokeOnValueChange 值变化事件执行句柄
     */
    setValue(propertyName, propertyValue, emitEventToView = false, emitEventToEntity = false, errors, invokeOnValueChange) {
        const oldPropertyValue = this.getValue(propertyName);
        // 由于特定原因（@邵珠强），无法屏蔽oldPropertyValue === propertyValue
        if (oldPropertyValue === propertyValue) {
            return;
        }
        if (!invokeOnValueChange || oldPropertyValue === propertyValue) {
            // 设定缺省
            invokeOnValueChange = function (preValue, value, entityChanged) {
                return of(true);
            };
        }
        if (emitEventToEntity === true) {
            // BUG 322301，删除@2019.08.10; 如果无对应实体，则中止值传递; 这种情况发生在带从表的单据新增，从表响应Load变化的情况；
            // if(!this.innerValues.has(propertyName)) {
            //   return;
            // }
            // 执行实体值变化前事件
            invokeOnValueChange(oldPropertyValue, propertyValue, false).subscribe((result) => {
                if (result) {
                    // 如果成功，执行变化，并通知实体变化
                    this.innerValues = this.innerValues.set(propertyName, propertyValue);
                    const viewChange = {
                        type: ViewChangeType.ValueChanged,
                        path: [propertyName],
                        value: propertyValue,
                        errors: errors
                    };
                    this.viewChanges.next(viewChange);
                    // 如果需要通知视图，通知视图相应修改
                    if (emitEventToView === true) {
                        this.changes.next({
                            type: ChangeType.ValueChanged,
                            path: [propertyName],
                            value: propertyValue,
                            id: this.primaryKeyValue,
                            errors: errors
                        });
                    }
                    // 执行实体值变化后事件
                    invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
                }
                else {
                    // 如果失败，不再通知实体变化
                    // 并执行界面回滚操作
                    this.changes.next({
                        type: ChangeType.ValueChanged,
                        path: [propertyName],
                        value: oldPropertyValue,
                        id: this.primaryKeyValue,
                        errors: errors
                    });
                }
            });
        }
        else {
            // `emitEventToEntity === false`, 则认定实体值已经发生变化，通知视图变化，并触发实体值变化后事件
            this.innerValues = this.innerValues.set(propertyName, propertyValue);
            if (emitEventToView === true) {
                this.changes.next({
                    type: ChangeType.ValueChanged,
                    path: [propertyName],
                    value: propertyValue,
                    id: this.primaryKeyValue,
                    errors: errors
                });
            }
            // 执行实体值变化后事件
            invokeOnValueChange(oldPropertyValue, propertyValue, true).subscribe();
        }
    }
    /**
     * 将BindingObject实例转换成JSON对象
     */
    toJSON(options) {
        const langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
        const result = {};
        this.properties.forEach((property) => {
            const propName = property.name;
            if (property.type === BindingPropertyType.List) {
                const list = this[propName];
                result[propName] = list.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Object) {
                const object = this[propName];
                result[propName] = object.toJSON(options);
            }
            else if (property.type === BindingPropertyType.Dynamic) {
                const object = this[propName];
                result[propName] = object.toJSON(options);
            }
            else {
                // 1、对于多语录入字段；
                // 2、传入ignoreMultiLangInput标志，则取当前语言的值给控件。
                if (options && options.ignoreMultiLangInput === true && property.enableMultiLangInput === true) {
                    const multiLangValueObj = this.getValue(propName);
                    if (multiLangValueObj) {
                        result[propName] = multiLangValueObj[langCode];
                    }
                    else {
                        result[propName] = multiLangValueObj;
                    }
                }
                else {
                    result[propName] = this.getValue(propName);
                }
            }
        });
        return result;
    }
}
export { BindingObject };
//# sourceMappingURL=data:application/json;base64,