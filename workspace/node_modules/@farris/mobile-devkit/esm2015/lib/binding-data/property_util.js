import { FieldMetadataUtil } from '../entity/index';
import { BindingPropertyType } from './binding_property';
/**
 * 属性工具类
 */
class PropertyUtil {
    /**
     * 获取实体上的属性集合，并将他们转换成BindingProperty集合
     * @param  entityType 实体类型
     * @returns 绑定属性集合
     */
    static getProperties(entityType) {
        const properties = [];
        // Plain
        const ngFieldProperties = FieldMetadataUtil.getNgFields(entityType);
        Object.keys(ngFieldProperties).forEach((propertyName) => {
            const ngFieldProperty = ngFieldProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Plain,
                isPrimaryKey: ngFieldProperty.primary,
                isForeignKey: ngFieldProperty.foreign,
                enableMultiLangInput: ngFieldProperty.enableMultiLangInput
            });
        });
        // Object
        const ngObjectProperties = FieldMetadataUtil.getNgObjects(entityType);
        Object.keys(ngObjectProperties).forEach((propertyName) => {
            const ngObjectProperty = ngObjectProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Object,
                entityType: ngObjectProperty.type
            });
        });
        // List
        const ngListProperties = FieldMetadataUtil.getNgList(entityType);
        Object.keys(ngListProperties).forEach((propertyName) => {
            const ngListProperty = ngListProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.List,
                entityType: ngListProperty.type
            });
        });
        // Dynamics
        const ngDynamicProperties = FieldMetadataUtil.getNgDynamic(entityType);
        Object.keys(ngDynamicProperties).forEach((propertyName) => {
            const ngDynamicProperty = ngDynamicProperties[propertyName];
            properties.push({
                name: propertyName,
                type: BindingPropertyType.Dynamic,
                entityType: ngDynamicProperty.type
            });
        });
        return properties;
    }
    static getDynamicProperties(dynamicData) {
        const properties = [];
        Object.keys(dynamicData).forEach((propertyName) => {
            if (dynamicData.hasOwnProperty(propertyName)) {
                if (dynamicData[propertyName] instanceof Object) {
                    properties.push({
                        name: propertyName,
                        type: BindingPropertyType.Dynamic,
                        entityType: null
                    });
                }
                else {
                    properties.push({
                        name: propertyName,
                        type: BindingPropertyType.Plain,
                        isPrimaryKey: false,
                        isForeignKey: false
                    });
                }
            }
        });
        return properties;
    }
    /**
     * 根据属性名获取属性
     */
    static getPropertyByName(properties, propertyName) {
        const targetProperty = properties.find((property) => {
            return property.name === propertyName;
        });
        return targetProperty;
    }
    /**
     * 获取实体主键名
     * @param properties 属性集合
     * @returns 主键名
     */
    static getPrimaryKey(properties) {
        // 实体必须有主键，如果没有主键在构造实体的时候就已经报错，这里不需要再进行检查
        const primaryProperty = properties.find((property) => {
            return property.isPrimaryKey === true;
        });
        return primaryProperty ? primaryProperty.name : '';
    }
}
export { PropertyUtil };
//# sourceMappingURL=data:application/json;base64,