import { Subject } from 'rxjs';
import { ArrayUtil } from '../utils/index';
import { ChangeType } from './changes';
import { BindingData } from './binding_data';
import { BindingObjectFactory } from './binding_object_factory';
import { PropertyUtil } from './property_util';
/**
 * BindingList是一个BindingObject集合
 */
class BindingList {
    /**
     * 构造函数
     */
    constructor(properties) {
        //#region 分页相关
        /**
         * 分页信息
         */
        this._paginationInfo = null;
        this.properties = properties;
        this.primaryKey = PropertyUtil.getPrimaryKey(properties);
        this.changes = new Subject();
        this.innerList = [];
        this.currentId = null;
    }
    set paginationInfo(sPaginationInfo) {
        this._paginationInfo = sPaginationInfo;
        if (this._paginationInfo === sPaginationInfo) {
            return;
        }
        this.changes.next({
            type: ChangeType.PaginationInfoChange,
            path: [],
            value: this._paginationInfo
        });
    }
    get paginationInfo() {
        return this._paginationInfo;
    }
    /**
     * 获取页码
     */
    get pageIndex() {
        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageIndex")) {
            return this.paginationInfo.pageIndex;
        }
        return 1;
    }
    /**
     * 获取分页大小
     */
    get pageSize() {
        if (!!this.paginationInfo && this.paginationInfo.hasOwnProperty("pageSize")) {
            return this.paginationInfo.pageSize;
        }
        return 0;
    }
    /**
     * 获取数据总项数
     */
    get total() {
        if (!!this.paginationInfo) {
            return this.paginationInfo.total || this.paginationInfo.totalCount;
        }
        return 0;
    }
    /**
     * 获取跳过的数据条数
     */
    get skip() {
        const pageIndex = this.pageIndex;
        const pageSize = this.pageSize;
        return (pageIndex - 1) * pageSize;
    }
    /**
     * 前台设置分页信息
     * @param skip skip
     * @param take take
     */
    setPaginationInfo(skip, take) {
        this.paginationInfo = Object.assign({}, this.paginationInfo, {
            pageSize: take,
            pageIndex: skip / take + 1
        });
        /*this.changes.next({
          type: ChangeType.PaginationInfoChange,
          path: [],
          value: this.paginationInfo
        });*/
    }
    //#endregion
    /**
     * 当前行对应的绑定对象
     * 如果currentId为null，则创建一个空结构，防止绑定报错；
     */
    get currentItem() {
        const currentItem = this.findById(this.currentId);
        if (!currentItem) {
            if (!this.emptyCurrentItem) {
                this.emptyCurrentItem = BindingObjectFactory.create(this.properties);
            }
            return this.emptyCurrentItem;
        }
        return currentItem;
    }
    /**
     * 绑定对象的数量
     */
    get length() {
        return this.innerList.length;
    }
    /**
     * 添加[Symbol.iterator]，使之能通过for of遍历
     */
    [Symbol.iterator]() {
        const self = this;
        let index = -1;
        const size = this.innerList.length;
        return {
            next: function () {
                index++;
                if (index < size) {
                    return {
                        done: false,
                        value: self.innerList[index]
                    };
                }
                return { done: true, value: undefined };
            }
        };
    }
    /**
     * 批量加载绑定对象，加载之前先清空绑定列表，并重置当前行，加载之后将第一行设置为默认当前行。
     * @param objects 要加载绑定对象数组
     */
    load(objects, entityCreate = false) {
        // 重置列表
        this.innerList = [];
        if (objects.length !== 0) {
            // 加载数据
            objects.forEach((object) => {
                this.add(object);
            });
            // 设置默认当前行
            const currentItem = this.findById(this.currentId);
            if (!currentItem) {
                const firstId = objects[0][this.primaryKey];
                this.setCurrentId(firstId, false, false);
            }
        }
        else {
            this.currentId = null;
        }
        const change = {
            type: ChangeType.Load,
            path: [],
            value: objects
        };
        change.create = entityCreate;
        // 触发事件
        this.changes.next(change);
    }
    /**
     * 批量追加绑定对象，追加之后将最后一个追加的绑定对象设置为当前行。
     * @param objects 要加载绑定对象数组
     */
    append(objects, isCloned = false) {
        if (objects.length === 0) {
            return;
        }
        // 加载BindingObject
        objects.forEach((object) => {
            this.add(object);
        });
        // 当前行为新追加的最后1行
        const lastId = objects[objects.length - 1][this.primaryKey];
        this.setCurrentId(lastId, true, true);
        // 触发事件
        const change = {
            type: ChangeType.Append,
            path: [],
            value: objects
        };
        if (isCloned) {
            change.isCloned = true;
        }
        this.changes.next(change);
    }
    /**
     * 增加数据
     * @param objects 实体
     * @description 增加实体数据，但不切换当前行
     */
    addData(objects) {
        if (objects.length === 0) {
            return;
        }
        // 加载BindingObject
        objects.forEach((object) => {
            this.add(object);
        });
        // 触发事件
        this.changes.next({
            type: ChangeType.Append,
            path: [],
            value: objects
        });
    }
    insert(object, position) {
        // const currentIndex = this.innerList.findIndex((obj: BindingObject) => obj.primaryKeyValue === this.currentId);
        // // 加载BindingObject
        // if (position === 1) {
        //   this.innerList = this.innerList.insert(currentIndex + 1, object);
        // } else if (position === -1) {
        //   this.innerList = this.innerList.insert(currentIndex, object);
        // } else {
        //   this.innerList = this.innerList.push(object);
        // }
        // object.parent = this;
        // // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
        // object.changes.subscribe((change: Change) => {
        //   this.changes.next(change);
        // });
        // this.setCurrentId(object.primaryKeyValue, true, true);
        // // 触发事件
        // this.changes.next({
        //   type: ChangeType.Append,
        //   path: [],
        //   value: object
        // });
    }
    /**
     * 添加绑定对象，并建立绑定对象和绑定列表之间的关联。
     * @param object 绑定对象
     */
    add(object) {
        this.innerList.push(object);
        object.parent = this;
        // 监听object变更，并继续向上抛，由于list有当前行的概念，不需要在path中追加路径
        object.changes.subscribe((change) => {
            this.changes.next(change);
        });
    }
    /**
     * 删除主键值数组对应的绑定对象。
     * @param ids 主键值数组
     */
    removeByIds(ids) {
        if (!ids || ids.length === 0) {
            return;
        }
        let nextCurrentId = this.currentId;
        ids.forEach((id) => {
            // 如果当前行被删除，计算下一当前行
            if (id === nextCurrentId) {
                nextCurrentId = this.getCurrentIdBeforeDeleting();
            }
            // 删除对象，找不到时跳过
            const index = this.getIndexById(id);
            if (index === -1) {
                return;
            }
            ArrayUtil.removeByIndex(this.innerList, index);
        });
        // 重新设置当前行
        if (this.innerList.length === 0) {
            this.currentId = null;
        }
        else {
            this.setCurrentId(nextCurrentId, false, false);
        }
        // 出发行删除事件
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: ids
        });
    }
    /**
     * 删除数据（不切换当前行）
     * @param ids ids
     */
    removeDataByIds(ids) {
        // if (!ids || ids.length === 0) {
        //   return;
        // }
        // ids.forEach((id: string) => {
        //   // 删除对象，找不到时跳过
        //   const index = this.getIndexById(id);
        //   if (index === -1) {
        //     return;
        //   }
        //   this.innerList = this.innerList.delete(index);
        // });
        // // 出发行删除事件
        // this.changes.next({
        //   type: ChangeType.Remove,
        //   path: [],
        //   value: ids
        // });
    }
    /**
     * 清空
     */
    clear() {
        this.innerList = [];
        this.currentId = null;
        this.changes.next({
            type: ChangeType.Remove,
            path: [],
            value: []
        });
    }
    /**
     * 如果当前行被删除，删除之前重新计算当前行的位置，并返回下一当前行的主键值。
     * - 如果被删除的行是最后1行，则上移1行；
     * - 其他情况，下移1行。
     */
    getCurrentIdBeforeDeleting() {
        let nextIndex = -1;
        const currentIndex = this.getIndexById(this.currentId);
        if (currentIndex === this.length - 1) {
            nextIndex = currentIndex - 1;
        }
        else {
            nextIndex = currentIndex + 1;
        }
        return this.getIdByIndex(nextIndex);
    }
    /**
     * 根据主键值获取对应绑定对象
     * @param   id 要查找的主键值
     * @returns 找到时返回对应BindingObject， 找不到时返回null
     */
    findById(id) {
        let target;
        target = this.innerList.find((item) => {
            return item.getValue(this.primaryKey) === id;
        });
        return target === undefined ? null : target;
    }
    /**
     * 将主键值为id的绑定对象设置为当前行
     * @param  id        要设置的主键值
     * @param  emitEvent 是否发送当前行变更事件
     */
    setCurrentId(id, emitEvent = true, emitGlobalEvent = true) {
        if (this.currentId === id) {
            return;
        }
        // 不存在时设置为null
        // const currentObj = this.findById(id);
        // if (!currentObj) {
        //   this.currentId = null;
        // } else {
        //   this.currentId = id;
        // }
        // @todo：找不到时按理应该设置为null，目前是直接返回，框架部分功能依赖该特性。
        const currentObj = this.findById(id);
        if (!currentObj) {
            return;
        }
        this.currentId = id;
        // 发出行切换事件
        if (emitEvent === true) {
            this.changes.next({
                type: ChangeType.SelectionChanged,
                path: [],
                value: this.currentItem
            });
        }
        // 是否发送全局的行切换事件
        if (emitGlobalEvent === true) {
            this.changes.next({
                type: ChangeType.GlobalSelectionChanged,
                path: [],
                value: this.currentItem
            });
        }
    }
    /**
     * 根据主键值为id的绑定对象的索引
     * @param id 主键值
     * @returns 找到时返回对应的index，找不到时返回-1
     */
    getIndexById(id) {
        return this.innerList.findIndex((obj) => {
            return obj[this.primaryKey] === id;
        });
    }
    /**
     * 根据索引位置获取对应绑定对象的主键值
     * @reutrn 找到时返回对应主键值，找不到返回null
     */
    getIdByIndex(index) {
        if (index < 0 || index > this.length) {
            return null;
        }
        const obj = this.innerList[index];
        if (!obj) {
            return null;
        }
        return obj[this.primaryKey];
    }
    /**
     * 转换为BindingObject数组
     */
    toArray() {
        return this.innerList.concat([]);
    }
    /**
     * 交互数据位置
     * @param id1 id1
     * @param id2 id2
     */
    swapById(id1, id2) {
        // const item1 = this.innerList.find(element => element.primaryKeyValue === id1);
        // const item2 = this.innerList.find(element => element.primaryKeyValue === id2);
        // this.innerList = this.innerList.map((bindingObject: BindingObject, index: number) => {
        //   if (bindingObject.primaryKeyValue === id1) {
        //     return item2;
        //   } else if (bindingObject.primaryKeyValue === id2) {
        //     return item1;
        //   } else return bindingObject;
        // }).toList();
        // this.changes.next({
        //   type: ChangeType.Swap,
        //   path: []
        // });
    }
    /**
     * 转换为JSON对象
     * @returns 普通对象数组
     */
    toJSON(options) {
        const result = [];
        this.innerList.forEach((obj) => {
            result.push(obj.toJSON(options));
        });
        return result;
    }
    /**
     * 获取分页信息
     * @param path 路径
     * @param defaultValue 默认值
     */
    getPaginationConfigByPath(path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationInfo;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        path = path.substring(1);
        const paths = path.split('/').filter(item => !!item && item.trim().length > 0).map(item => item.trim());
        let config = this.paginationInfo;
        paths.forEach(item => {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    }
    /**
     * 对bindingList就行排序
     * @param string 排序字段
     * @param directions 排序规则字段
     * @param options 参数
     */
    sortBy(fields, directions, options) {
        if (!fields || fields.length < 1 || !directions || directions.length < 1) {
            throw new Error('sortBy:argument error');
        }
        // 默认升序
        const arrFields = typeof fields === 'string' ? fields.split(',') : fields || [];
        const arrDirections = typeof directions === 'string' ? directions.split(',') : directions || [];
        // 排序字段和排序方式应一致
        if (arrFields.length !== arrDirections.length || arrFields.length < 1) {
            throw new Error('sortBy:fields and directions not match');
        }
        // nage,age,total
        const comparator = (props, orders) => (item1, item2) => {
            for (const prop of props) {
                const order = ['asc'].includes(orders[props.indexOf(prop)]) ? 1 : -1;
                if (item1.getValue(prop) > item2.getValue(prop)) {
                    return order * 1;
                }
                if (item1.getValue(prop) < item2.getValue(prop)) {
                    return order * -1;
                }
            }
            return 0;
        };
        this.innerList = this.innerList.sort(comparator(arrFields, arrDirections));
    }
    getValue(target, propName, isMultiLangProp = false, currentLanguage = 'zh-CHS') {
        if (target instanceof BindingList) {
            target = target.currentItem;
        }
        else if (target instanceof BindingData) {
            target = target.list.currentItem;
        }
        let result = null;
        if (propName.indexOf('.') === -1) {
            result = target[propName];
        }
        else {
            const props = propName.split('.');
            for (const prop of props) {
                target = result = this.getValue(target, prop, isMultiLangProp, currentLanguage);
            }
        }
        if (isMultiLangProp && result && result.hasOwnProperty(currentLanguage)) {
            return result[currentLanguage];
        }
        else {
            return result;
        }
    }
}
export { BindingList };
//# sourceMappingURL=data:application/json;base64,