import { ChangeType } from "../../binding-data";
import { ControlStateUpdater } from "./control_state_updater";
export class ControlStateListener {
    constructor(viewModelContext) {
        //监听订阅集合
        this.subscriptionsMap = new Map();
        this.viewModelContext = viewModelContext;
        this.controlStateUpdater = viewModelContext.injector.get(ControlStateUpdater);
        //更新器初始化完成后，注册监听,主动触发一次更新
        this.controlStateUpdater.init().subscribe(res => {
            this.register();
            const changes = {
                lintenerType: 'firstUpdate',
                change: null
            };
            this.controlStateUpdater.updateControlState(changes);
        });
    }
    /**
     *注册监听
     */
    register() {
        this.registerBindingDataLintener();
        this.registerUIStateLintener();
        this.registerStateMachineLintener();
        this.registerFormLintener();
    }
    /**
     * 监听BindingData变化
     */
    registerBindingDataLintener() {
        const stateName = 'bindingData';
        if (this.subscriptionsMap.has(stateName) === false) {
            const subscription = this.viewModelContext.bindingData.changes.subscribe((change) => {
                if (change.type === ChangeType.Load) {
                    return;
                }
                this.controlStateUpdater.updateControlState({
                    lintenerType: 'bindingData',
                    change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    }
    /**
     * 监听UIState变化
     */
    registerUIStateLintener() {
        const stateName = 'uiState';
        if (this.subscriptionsMap.has(stateName) === false) {
            const subscription = this.viewModelContext.uiState.changes.subscribe((change) => {
                this.controlStateUpdater.updateControlState({
                    lintenerType: 'uiState',
                    change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    }
    /**
     * 监听StateMachine变化
     */
    registerStateMachineLintener() {
        const stateName = 'stateMachine';
        if (this.subscriptionsMap.has(stateName) === false && this.viewModelContext.stateMachine) {
            const subscription = this.viewModelContext.stateMachine.stateChange.subscribe((change) => {
                this.controlStateUpdater.updateControlState({
                    lintenerType: 'stateMachine',
                    change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    }
    /**
     * 监听Form变化
     */
    registerFormLintener() {
        const stateName = 'form';
        if (this.subscriptionsMap.has(stateName) === false) {
            const subscription = this.viewModelContext.form.changes.subscribe((change) => {
                if (change && change.type === 'validateFieldsFinished') {
                    this.controlStateUpdater.updateControlState({
                        lintenerType: 'expression',
                        change
                    });
                }
                else {
                    this.controlStateUpdater.updateControlState({
                        lintenerType: 'form',
                        change
                    });
                }
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,