/**
 * 零代码状态工具类
 */
class RenderStateUtil {
    /**
     * 制单状态
     * @sumamry
     * 1、发起流程中通过菜单打开；
     * 2、草稿箱列表打开；
     */
    static getRenderStatesWhenDrafting() {
        const renderStates = {
            showHeader: true,
            showChildHeader: true,
            showFooter: true,
            showChildFooter: true,
        };
        return renderStates;
    }
    /**
     * 撤回重新制单
     * @summary
     * 我的发起中打开已撤回并且未重新提交的单据
     */
    static getRenderStatesWhenReDrafting() {
        // 该场景下，重新提交后跳转有问题，暂时不支持
        const renderStates = {
            showHeader: false,
            showChildHeader: false,
            showFooter: true,
            showChildFooter: true,
        };
        // const renderStates = {
        //   showHeader: false,
        //   showChildHeader: false,
        //   showFooter: false,
        //   showChildFooter: false,
        //   canInput: false,
        // };
        return renderStates;
    }
    /**
     * 驳回修改
     * @summary
     * 1、我的代办中共打开已驳回的单据；
     */
    static getRenderStatesWhenBackEdit() {
        const renderStates = {
            showHeader: false,
            showChildHeader: false,
            showFooter: false,
            showChildFooter: true,
        };
        return renderStates;
    }
    /**
     * 审批中
     * @sumamry
     * 1、我的代办中：未被驳回的单据；
     * 2、默认为只读态，最终以流程节点上的配置为准
     */
    static getRenderStatesWhenApproving() {
        const renderStates = {
            showHeader: false,
            showChildHeader: false,
            showFooter: false,
            showChildFooter: false,
        };
        return renderStates;
    }
    /**
     * 仅查看
     */
    static getRenderStatesWhenViewOnly() {
        const renderStates = {
            showHeader: false,
            showFooter: false,
            showChildHeader: false,
            showChildFooter: false,
        };
        return renderStates;
    }
}
export { RenderStateUtil as NoCodeRenderStateUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyX3N0YXRlX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdWktc3RhdGUvY29udHJvbC1zdGF0ZS9yZW5kZXJfc3RhdGVfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7R0FFRztBQUNILE1BQU0sZUFBZTtJQUNuQjs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQywyQkFBMkI7UUFDdkMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLElBQUk7WUFDckIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLElBQUk7U0FDdEIsQ0FBQztRQUVGLE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksTUFBTSxDQUFDLDZCQUE2QjtRQUV6Qyx3QkFBd0I7UUFDeEIsTUFBTSxZQUFZLEdBQUc7WUFDbkIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLElBQUk7U0FDdEIsQ0FBQztRQUVGLHlCQUF5QjtRQUN6Qix1QkFBdUI7UUFDdkIsNEJBQTRCO1FBQzVCLHVCQUF1QjtRQUN2Qiw0QkFBNEI7UUFFNUIscUJBQXFCO1FBQ3JCLEtBQUs7UUFFTCxPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLE1BQU0sQ0FBQywyQkFBMkI7UUFDdkMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLElBQUk7U0FFdEIsQ0FBQTtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyw0QkFBNEI7UUFDeEMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLEtBQUs7U0FFdkIsQ0FBQTtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQywyQkFBMkI7UUFDdkMsTUFBTSxZQUFZLEdBQUc7WUFDbkIsVUFBVSxFQUFFLEtBQUs7WUFDakIsVUFBVSxFQUFFLEtBQUs7WUFDakIsZUFBZSxFQUFFLEtBQUs7WUFDdEIsZUFBZSxFQUFFLEtBQUs7U0FFdkIsQ0FBQTtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3RCLENBQUM7Q0FJRjtBQWdCRCxPQUFPLEVBQUUsZUFBZSxJQUFJLHFCQUFxQixFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICog6Zu25Luj56CB54q25oCB5bel5YW357G7XG4gKi9cbmNsYXNzIFJlbmRlclN0YXRlVXRpbCB7XG4gIC8qKlxuICAgKiDliLbljZXnirbmgIFcbiAgICogQHN1bWFtcnlcbiAgICogMeOAgeWPkei1t+a1geeoi+S4remAmui/h+iPnOWNleaJk+W8gO+8m1xuICAgKiAy44CB6I2J56i/566x5YiX6KGo5omT5byA77ybXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGdldFJlbmRlclN0YXRlc1doZW5EcmFmdGluZygpOiBOb0NvZGVSZW5kZXJTdGF0ZSB7XG4gICAgY29uc3QgcmVuZGVyU3RhdGVzID0ge1xuICAgICAgc2hvd0hlYWRlcjogdHJ1ZSxcbiAgICAgIHNob3dDaGlsZEhlYWRlcjogdHJ1ZSxcbiAgICAgIHNob3dGb290ZXI6IHRydWUsXG4gICAgICBzaG93Q2hpbGRGb290ZXI6IHRydWUsXG4gICAgfTtcblxuICAgIHJldHVybiByZW5kZXJTdGF0ZXM7XG4gIH1cblxuICAvKipcbiAgICog5pKk5Zue6YeN5paw5Yi25Y2VXG4gICAqIEBzdW1tYXJ5XG4gICAqIOaIkeeahOWPkei1t+S4reaJk+W8gOW3suaSpOWbnuW5tuS4lOacqumHjeaWsOaPkOS6pOeahOWNleaNrlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRSZW5kZXJTdGF0ZXNXaGVuUmVEcmFmdGluZygpOiBOb0NvZGVSZW5kZXJTdGF0ZSB7XG5cbiAgICAvLyDor6XlnLrmma/kuIvvvIzph43mlrDmj5DkuqTlkI7ot7PovazmnInpl67popjvvIzmmoLml7bkuI3mlK/mjIFcbiAgICBjb25zdCByZW5kZXJTdGF0ZXMgPSB7XG4gICAgICBzaG93SGVhZGVyOiBmYWxzZSxcbiAgICAgIHNob3dDaGlsZEhlYWRlcjogZmFsc2UsXG4gICAgICBzaG93Rm9vdGVyOiB0cnVlLFxuICAgICAgc2hvd0NoaWxkRm9vdGVyOiB0cnVlLFxuICAgIH07XG5cbiAgICAvLyBjb25zdCByZW5kZXJTdGF0ZXMgPSB7XG4gICAgLy8gICBzaG93SGVhZGVyOiBmYWxzZSxcbiAgICAvLyAgIHNob3dDaGlsZEhlYWRlcjogZmFsc2UsXG4gICAgLy8gICBzaG93Rm9vdGVyOiBmYWxzZSxcbiAgICAvLyAgIHNob3dDaGlsZEZvb3RlcjogZmFsc2UsXG5cbiAgICAvLyAgIGNhbklucHV0OiBmYWxzZSxcbiAgICAvLyB9O1xuXG4gICAgcmV0dXJuIHJlbmRlclN0YXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiDpqbPlm57kv67mlLlcbiAgICogQHN1bW1hcnlcbiAgICogMeOAgeaIkeeahOS7o+WKnuS4reWFseaJk+W8gOW3sumps+WbnueahOWNleaNru+8m1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRSZW5kZXJTdGF0ZXNXaGVuQmFja0VkaXQoKTogTm9Db2RlUmVuZGVyU3RhdGUge1xuICAgIGNvbnN0IHJlbmRlclN0YXRlcyA9IHtcbiAgICAgIHNob3dIZWFkZXI6IGZhbHNlLFxuICAgICAgc2hvd0NoaWxkSGVhZGVyOiBmYWxzZSxcbiAgICAgIHNob3dGb290ZXI6IGZhbHNlLFxuICAgICAgc2hvd0NoaWxkRm9vdGVyOiB0cnVlLFxuXG4gICAgfVxuICAgIHJldHVybiByZW5kZXJTdGF0ZXM7XG4gIH1cblxuICAvKipcbiAgICog5a6h5om55LitXG4gICAqIEBzdW1hbXJ5XG4gICAqIDHjgIHmiJHnmoTku6Plip7kuK3vvJrmnKrooqvpqbPlm57nmoTljZXmja7vvJtcbiAgICogMuOAgem7mOiupOS4uuWPquivu+aAge+8jOacgOe7iOS7pea1geeoi+iKgueCueS4iueahOmFjee9ruS4uuWHhlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRSZW5kZXJTdGF0ZXNXaGVuQXBwcm92aW5nKCk6IE5vQ29kZVJlbmRlclN0YXRlIHtcbiAgICBjb25zdCByZW5kZXJTdGF0ZXMgPSB7XG4gICAgICBzaG93SGVhZGVyOiBmYWxzZSxcbiAgICAgIHNob3dDaGlsZEhlYWRlcjogZmFsc2UsXG4gICAgICBzaG93Rm9vdGVyOiBmYWxzZSxcbiAgICAgIHNob3dDaGlsZEZvb3RlcjogZmFsc2UsXG5cbiAgICB9XG4gICAgcmV0dXJuIHJlbmRlclN0YXRlcztcbiAgfVxuICBcbiAgLyoqXG4gICAqIOS7heafpeeci1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBnZXRSZW5kZXJTdGF0ZXNXaGVuVmlld09ubHkoKTogTm9Db2RlUmVuZGVyU3RhdGUge1xuICAgIGNvbnN0IHJlbmRlclN0YXRlcyA9IHtcbiAgICAgIHNob3dIZWFkZXI6IGZhbHNlLFxuICAgICAgc2hvd0Zvb3RlcjogZmFsc2UsXG4gICAgICBzaG93Q2hpbGRIZWFkZXI6IGZhbHNlLFxuICAgICAgc2hvd0NoaWxkRm9vdGVyOiBmYWxzZSxcblxuICAgIH1cbiAgICByZXR1cm4gcmVuZGVyU3RhdGVzO1xuICB9XG5cblxuICBcbn1cbi8qKlxuICog6Zu25Luj56CB5o6n5Lu254q25oCBXG4gKi8gXG5leHBvcnQgaW50ZXJmYWNlIE5vQ29kZVJlbmRlclN0YXRlIHtcblxuICBzaG93SGVhZGVyOiBib29sZWFuO1xuXG4gIHNob3dGb290ZXI6IGJvb2xlYW47XG5cbiAgc2hvd0NoaWxkSGVhZGVyOiBib29sZWFuO1xuXG4gIHNob3dDaGlsZEZvb3RlcjogYm9vbGVhbjtcbn1cblxuXG5leHBvcnQgeyBSZW5kZXJTdGF0ZVV0aWwgYXMgTm9Db2RlUmVuZGVyU3RhdGVVdGlsfTsiXX0=