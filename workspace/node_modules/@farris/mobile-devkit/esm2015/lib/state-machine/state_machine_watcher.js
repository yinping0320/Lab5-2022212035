/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
export class StateMachineWatcher {
    constructor(stateMachine) {
        this.stateMachine = stateMachine;
        /**
         * 所有UIStatePath数组
         */
        this.uiStatePathList = [];
        /**
         * 所有DataStatePath数组
         */
        this.dataStatePathList = [];
        this.viewModelContextAndUIStatePathsMap = new Map();
        this.viewModelContextAndDataStatePathsMap = new Map();
    }
    /**
     * 初始化
     * @param viewModelContext 当前视图上下文
     */
    init(viewModelContext) {
        this.viewModelContext = viewModelContext;
    }
    /**
     * 返回表达式中ViewModelId对应的ViewModelContext
     */
    getViewModelContext(expression) {
        const viewModelId = this.extractPaths(expression).split('/')[1];
        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);
    }
    /**
     * 监听UIState变更
     * @param viewModelContext ViewModel上下文
     * @param expression UIState表达式
     */
    subscribeUIStateChange(viewModelContext, expression) {
        const uiStatePath = this.getStatePath(expression);
        if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);
            viewModelContext.uiState.changes.subscribe((uiStateChange) => {
                const uiStatePathList = this.viewModelContextAndUIStatePathsMap.get(viewModelContext);
                if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {
            this.uiStatePathList.push(uiStatePath);
        }
    }
    /**
     * 监听实体变更
     */
    subscribeEntityChange(viewModelContext, expression) {
        if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);
            viewModelContext.bindingData.changes.subscribe((change) => {
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    this.stateMachine.render();
                }
                const dataPathList = this.viewModelContextAndDataStatePathsMap.get(viewModelContext);
                if (change.path.join() && this.isAccordingPath(dataPathList, change.path.join('/'))) {
                    this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {
            this.dataStatePathList.push(expression);
        }
    }
    /**
     * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）
     * @param expression 变量表达式
     */
    getStatePath(expression) {
        return this.extractPaths(expression).split('/')[2];
    }
    /**
     * 判断是否监听范围内的变更路径
     */
    isAccordingPath(dataStatePaths, dataStatePath) {
        const targetPath = dataStatePaths.find((item) => {
            return item.indexOf(dataStatePath) > -1;
        });
        return targetPath === undefined ? false : true;
    }
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     * @param expression 变量表达式
     */
    extractPaths(expression) {
        let path;
        const UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
        const DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        const dataVariables = expression.match(DATA_PATTERN_G);
        if (uiStateVariables !== null) {
            const UI_STATE_PATTERN = /\{UISTATE~(\S+?)\}/;
            uiStateVariables.forEach((uiStateVariable) => {
                const pathMatches = uiStateVariable.match(UI_STATE_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        if (dataVariables !== null) {
            const DATA_PATTERN = /\{DATA~(\S+?)\}/;
            dataVariables.forEach((dataVariable) => {
                const pathMatches = dataVariable.match(DATA_PATTERN);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        return path;
    }
}
//# sourceMappingURL=data:application/json;base64,