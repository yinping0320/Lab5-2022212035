/**
 * 命令处理扩展注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { MetadataUtil, InjectFlags } from '../core/index';
import { COMMAND_HANDLER_EXTENDER_META } from './decorators';
import { COMMAND_HANDLER_EXTENDERS_TOKEN } from './command_handler_extender';
/**
 * 命令处理扩展注册器
 */
class CommandHandlerExtenderRegistry {
    /**
     * 构造函数
     * @param extenders 命令扩展实例数组
     */
    constructor(injector) {
        this.injector = injector;
        const extenders = this.injector.get(COMMAND_HANDLER_EXTENDERS_TOKEN, null, InjectFlags.Optional);
        this.extendersMap = new Map();
        if (extenders) {
            extenders.forEach((extender) => {
                this.regist(extender);
            });
        }
    }
    /**
     * 获取命令扩展实例数组
     * @param   commandName 命令名称
     * @returns 命令处理扩展实例数组
     */
    get(commandName) {
        if (this.extendersMap.has(commandName) === false) {
            return [];
        }
        return this.extendersMap.get(commandName);
    }
    /**
     * 添加命令扩展
     * @param commandName Command名称
     * @param extender    CommandHandlerExtender实例
     * @return void
     */
    set(commandName, extender) {
        if (this.extendersMap.has(commandName)) {
            // 如果commandName对应的扩展已经存在，则在扩展数组中追加
            this.extendersMap.get(commandName).push(extender);
        }
        else {
            // 如果不存在，则创建新的扩展数组，并追加
            this.extendersMap.set(commandName, [extender]);
        }
    }
    /**
     * 注册命令扩展
     * @param extender CommandHandlerExtender实例
     */
    regist(extender) {
        // 通过元数据获取要扩展的Comamnd名称
        const extenderMetadata = MetadataUtil.getClassMetadataByName(extender.constructor, COMMAND_HANDLER_EXTENDER_META);
        if (!extenderMetadata) {
            throw new Error('CommandHandlerExtender必须指定要扩展的命令名称');
        }
        const commandName = extenderMetadata.commandName;
        // 添加到Map中
        this.set(commandName, extender);
    }
}
export { CommandHandlerExtenderRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQvY29tbWFuZF9oYW5kbGVyX2V4dGVuZGVyX3JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUVILE9BQU8sRUFBRSxZQUFZLEVBQVksV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSw2QkFBNkIsRUFBa0MsTUFBTSxjQUFjLENBQUM7QUFDN0YsT0FBTyxFQUFFLCtCQUErQixFQUEwQixNQUFNLDRCQUE0QixDQUFDO0FBRXJHOztHQUVHO0FBQ0gsTUFBTSw4QkFBOEI7SUFTbEM7OztPQUdHO0lBQ0gsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ2pHLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQW9DLENBQUM7UUFDaEUsSUFBSSxTQUFTLEVBQUU7WUFDYixTQUFTLENBQUMsT0FBTyxDQUFDLENBQUMsUUFBZ0MsRUFBRSxFQUFFO2dCQUNyRCxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILEdBQUcsQ0FBQyxXQUFtQjtRQUNyQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUNoRCxPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUM1QyxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSCxHQUFHLENBQUMsV0FBbUIsRUFBRSxRQUFnQztRQUN2RCxJQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxFQUFFO1lBRXRDLG1DQUFtQztZQUNuQyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7U0FDbkQ7YUFBTTtZQUVMLHNCQUFzQjtZQUN0QixJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0gsQ0FBQztJQUVEOzs7T0FHRztJQUNILE1BQU0sQ0FBQyxRQUFnQztRQUVyQyx1QkFBdUI7UUFDdkIsTUFBTSxnQkFBZ0IsR0FDcEIsWUFBWSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsNkJBQTZCLENBQUMsQ0FBQztRQUMzRixJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDckIsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1NBQ3ZEO1FBQ0QsTUFBTSxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsV0FBVyxDQUFDO1FBRWpELFVBQVU7UUFDVixJQUFJLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsOEJBQThCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5ZG95Luk5aSE55CG5omp5bGV5rOo5YaM5Zmo55u45YWz5a6a5LmJXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxuICovXG5cbmltcG9ydCB7IE1ldGFkYXRhVXRpbCwgSW5qZWN0b3IsIEluamVjdEZsYWdzIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJfRVhURU5ERVJfTUVUQSwgQ29tbWFuZEhhbmRsZXJFeHRlbmRlck1ldGFkYXRhIH0gZnJvbSAnLi9kZWNvcmF0b3JzJztcbmltcG9ydCB7IENPTU1BTkRfSEFORExFUl9FWFRFTkRFUlNfVE9LRU4sIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXIgfSBmcm9tICcuL2NvbW1hbmRfaGFuZGxlcl9leHRlbmRlcic7XG5cbi8qKlxuICog5ZG95Luk5aSE55CG5omp5bGV5rOo5YaM5ZmoXG4gKi9cbmNsYXNzIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJSZWdpc3RyeSB7XG5cbiAgLyoqXG4gICAqIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXLlrp7kvotNYXBcbiAgICogLSBrZXnvvJrlkb3ku6TlkI3np7BcbiAgICogLSB2YWx1Ze+8muWRveS7pOaJqeWxleWunuS+i1xuICAgKi9cbiAgcHJpdmF0ZSBleHRlbmRlcnNNYXA6IE1hcDxzdHJpbmcsIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJbXT47XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKiBAcGFyYW0gZXh0ZW5kZXJzIOWRveS7pOaJqeWxleWunuS+i+aVsOe7hFxuICAgKi9cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IpIHtcbiAgICBjb25zdCBleHRlbmRlcnMgPSB0aGlzLmluamVjdG9yLmdldChDT01NQU5EX0hBTkRMRVJfRVhURU5ERVJTX1RPS0VOLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XG4gICAgdGhpcy5leHRlbmRlcnNNYXAgPSBuZXcgTWFwPHN0cmluZywgQ29tbWFuZEhhbmRsZXJFeHRlbmRlcltdPigpO1xuICAgIGlmIChleHRlbmRlcnMpIHtcbiAgICAgIGV4dGVuZGVycy5mb3JFYWNoKChleHRlbmRlcjogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcikgPT4ge1xuICAgICAgICB0aGlzLnJlZ2lzdChleHRlbmRlcik7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5ZG95Luk5omp5bGV5a6e5L6L5pWw57uEXG4gICAqIEBwYXJhbSAgIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxuICAgKiBAcmV0dXJucyDlkb3ku6TlpITnkIbmianlsZXlrp7kvovmlbDnu4RcbiAgICovXG4gIGdldChjb21tYW5kTmFtZTogc3RyaW5nKTogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcltdIHtcbiAgICBpZiAodGhpcy5leHRlbmRlcnNNYXAuaGFzKGNvbW1hbmROYW1lKSA9PT0gZmFsc2UpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kZXJzTWFwLmdldChjb21tYW5kTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICog5re75Yqg5ZG95Luk5omp5bGVXG4gICAqIEBwYXJhbSBjb21tYW5kTmFtZSBDb21tYW5k5ZCN56ewXG4gICAqIEBwYXJhbSBleHRlbmRlciAgICBDb21tYW5kSGFuZGxlckV4dGVuZGVy5a6e5L6LXG4gICAqIEByZXR1cm4gdm9pZFxuICAgKi9cbiAgc2V0KGNvbW1hbmROYW1lOiBzdHJpbmcsIGV4dGVuZGVyOiBDb21tYW5kSGFuZGxlckV4dGVuZGVyKSB7XG4gICAgaWYgKHRoaXMuZXh0ZW5kZXJzTWFwLmhhcyhjb21tYW5kTmFtZSkpIHtcblxuICAgICAgLy8g5aaC5p6cY29tbWFuZE5hbWXlr7nlupTnmoTmianlsZXlt7Lnu4/lrZjlnKjvvIzliJnlnKjmianlsZXmlbDnu4TkuK3ov73liqBcbiAgICAgIHRoaXMuZXh0ZW5kZXJzTWFwLmdldChjb21tYW5kTmFtZSkucHVzaChleHRlbmRlcik7XG4gICAgfSBlbHNlIHtcblxuICAgICAgLy8g5aaC5p6c5LiN5a2Y5Zyo77yM5YiZ5Yib5bu65paw55qE5omp5bGV5pWw57uE77yM5bm26L+95YqgXG4gICAgICB0aGlzLmV4dGVuZGVyc01hcC5zZXQoY29tbWFuZE5hbWUsIFtleHRlbmRlcl0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhozlkb3ku6TmianlsZVcbiAgICogQHBhcmFtIGV4dGVuZGVyIENvbW1hbmRIYW5kbGVyRXh0ZW5kZXLlrp7kvotcbiAgICovXG4gIHJlZ2lzdChleHRlbmRlcjogQ29tbWFuZEhhbmRsZXJFeHRlbmRlcikge1xuXG4gICAgLy8g6YCa6L+H5YWD5pWw5o2u6I635Y+W6KaB5omp5bGV55qEQ29tYW1uZOWQjeensFxuICAgIGNvbnN0IGV4dGVuZGVyTWV0YWRhdGE6IENvbW1hbmRIYW5kbGVyRXh0ZW5kZXJNZXRhZGF0YSA9XG4gICAgICBNZXRhZGF0YVV0aWwuZ2V0Q2xhc3NNZXRhZGF0YUJ5TmFtZShleHRlbmRlci5jb25zdHJ1Y3RvciwgQ09NTUFORF9IQU5ETEVSX0VYVEVOREVSX01FVEEpO1xuICAgIGlmICghZXh0ZW5kZXJNZXRhZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kSGFuZGxlckV4dGVuZGVy5b+F6aG75oyH5a6a6KaB5omp5bGV55qE5ZG95Luk5ZCN56ewJyk7XG4gICAgfVxuICAgIGNvbnN0IGNvbW1hbmROYW1lID0gZXh0ZW5kZXJNZXRhZGF0YS5jb21tYW5kTmFtZTtcblxuICAgIC8vIOa3u+WKoOWIsE1hcOS4rVxuICAgIHRoaXMuc2V0KGNvbW1hbmROYW1lLCBleHRlbmRlcik7XG4gIH1cblxufVxuXG5leHBvcnQgeyBDb21tYW5kSGFuZGxlckV4dGVuZGVyUmVnaXN0cnkgfTtcbiJdfQ==