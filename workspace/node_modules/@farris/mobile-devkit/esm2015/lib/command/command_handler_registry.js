/**
 * 命令处理注册器相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { MetadataUtil, InjectFlags } from '../core/index';
import { COMMAND_HANDLER_META } from './decorators';
import { COMMAND_HANDLERS_TOKEN } from './command_handler';
/**
 * 命令处理注册器
 */
class CommandHandlerRegistry {
    /**
     * 构造函数
     * @param handlers 命令处理实例数组
     */
    constructor(injector) {
        this.injector = injector;
        const handlers = this.injector.get(COMMAND_HANDLERS_TOKEN, null, InjectFlags.Optional);
        this.handlerMap = new Map();
        if (handlers) {
            handlers.forEach((handler) => {
                this.regist(handler);
            });
        }
    }
    /**
     * 添加命令处理
     * @param  commandName    命令名称
     * @param  commandHandler 命令处理实例
     */
    set(commandName, commandHandler) {
        if (this.handlerMap.has(commandName)) {
            throw new Error(commandName + '对应的CommandHandler已经存在');
        }
        this.handlerMap.set(commandName, commandHandler);
    }
    /**
     * 获取命令处理
     * @param   commandName 命令名称
     * @returns 命令处理实例
     */
    get(commandName) {
        if (this.handlerMap.has(commandName) === false) {
            throw new Error('找不到' + commandName + '对应的CommandHandler');
        }
        return this.handlerMap.get(commandName);
    }
    /**
     * 注册命令处理
     * @param handlers 命令处理实例
     */
    regist(commandHandler) {
        // 根据metadata获取对应的Command名称
        const handlerMetadata = MetadataUtil.getClassMetadataByName(commandHandler.constructor, COMMAND_HANDLER_META);
        if (!handlerMetadata) {
            throw new Error('CommandHandler必须指定要处理的命令名称');
        }
        const commandName = handlerMetadata.commandName;
        this.set(commandName, commandHandler);
    }
}
export { CommandHandlerRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2NvbW1hbmQvY29tbWFuZF9oYW5kbGVyX3JlZ2lzdHJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7R0FHRztBQUNILE9BQU8sRUFBRSxZQUFZLEVBQVksV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3BFLE9BQU8sRUFBRSxvQkFBb0IsRUFBMEIsTUFBTSxjQUFjLENBQUM7QUFDNUUsT0FBTyxFQUFFLHNCQUFzQixFQUFrQixNQUFNLG1CQUFtQixDQUFDO0FBRTNFOztHQUVHO0FBQ0gsTUFBTSxzQkFBc0I7SUFPMUI7OztPQUdHO0lBQ0gsWUFBb0IsUUFBa0I7UUFBbEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQTBCLENBQUM7UUFDcEQsSUFBSSxRQUFRLEVBQUU7WUFDWixRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsT0FBdUIsRUFBRSxFQUFFO2dCQUMzQyxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZCLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEdBQUcsQ0FBQyxXQUFtQixFQUFFLGNBQThCO1FBQzVELElBQUksSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUU7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxXQUFXLEdBQUcsdUJBQXVCLENBQUMsQ0FBQztTQUN4RDtRQUNELElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLEdBQUcsQ0FBQyxXQUFtQjtRQUM1QixJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUM5QyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssR0FBRyxXQUFXLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztTQUM1RDtRQUNELE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNJLE1BQU0sQ0FBQyxjQUE4QjtRQUUxQywyQkFBMkI7UUFDM0IsTUFBTSxlQUFlLEdBQ25CLFlBQVksQ0FBQyxzQkFBc0IsQ0FBQyxjQUFjLENBQUMsV0FBVyxFQUFFLG9CQUFvQixDQUFDLENBQUM7UUFDeEYsSUFBSSxDQUFDLGVBQWUsRUFBRTtZQUNwQixNQUFNLElBQUksS0FBSyxDQUFDLDRCQUE0QixDQUFDLENBQUM7U0FDL0M7UUFDRCxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsV0FBVyxDQUFDO1FBQ2hELElBQUksQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7Q0FFRjtBQUVELE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDlkb3ku6TlpITnkIbms6jlhozlmajnm7jlhbPlrprkuYlcbiAqIEBhdXRob3IgV2l0dDxqaXd0QGluc3B1ci5jb20+XG4gKi9cbmltcG9ydCB7IE1ldGFkYXRhVXRpbCwgSW5qZWN0b3IsIEluamVjdEZsYWdzIH0gZnJvbSAnLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJfTUVUQSwgQ29tbWFuZEhhbmRsZXJNZXRhZGF0YSB9IGZyb20gJy4vZGVjb3JhdG9ycyc7XG5pbXBvcnQgeyBDT01NQU5EX0hBTkRMRVJTX1RPS0VOLCBDb21tYW5kSGFuZGxlciB9IGZyb20gJy4vY29tbWFuZF9oYW5kbGVyJztcblxuLyoqXG4gKiDlkb3ku6TlpITnkIbms6jlhozlmahcbiAqL1xuY2xhc3MgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB7XG5cbiAgLyoqXG4gICAqIENvbW1hbmRIYW5kbGVyIE1hcFxuICAgKi9cbiAgcHJpdmF0ZSBoYW5kbGVyTWFwOiBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlcj47XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKiBAcGFyYW0gaGFuZGxlcnMg5ZG95Luk5aSE55CG5a6e5L6L5pWw57uEXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGluamVjdG9yOiBJbmplY3Rvcikge1xuICAgIGNvbnN0IGhhbmRsZXJzID0gdGhpcy5pbmplY3Rvci5nZXQoQ09NTUFORF9IQU5ETEVSU19UT0tFTiwgbnVsbCwgSW5qZWN0RmxhZ3MuT3B0aW9uYWwpO1xuICAgIHRoaXMuaGFuZGxlck1hcCA9IG5ldyBNYXA8c3RyaW5nLCBDb21tYW5kSGFuZGxlcj4oKTtcbiAgICBpZiAoaGFuZGxlcnMpIHtcbiAgICAgIGhhbmRsZXJzLmZvckVhY2goKGhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSA9PiB7XG4gICAgICAgIHRoaXMucmVnaXN0KGhhbmRsZXIpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIOa3u+WKoOWRveS7pOWkhOeQhlxuICAgKiBAcGFyYW0gIGNvbW1hbmROYW1lICAgIOWRveS7pOWQjeensFxuICAgKiBAcGFyYW0gIGNvbW1hbmRIYW5kbGVyIOWRveS7pOWkhOeQhuWunuS+i1xuICAgKi9cbiAgcHVibGljIHNldChjb21tYW5kTmFtZTogc3RyaW5nLCBjb21tYW5kSGFuZGxlcjogQ29tbWFuZEhhbmRsZXIpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyTWFwLmhhcyhjb21tYW5kTmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcuW3sue7j+WtmOWcqCcpO1xuICAgIH1cbiAgICB0aGlzLmhhbmRsZXJNYXAuc2V0KGNvbW1hbmROYW1lLCBjb21tYW5kSGFuZGxlcik7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5ZG95Luk5aSE55CGXG4gICAqIEBwYXJhbSAgIGNvbW1hbmROYW1lIOWRveS7pOWQjeensFxuICAgKiBAcmV0dXJucyDlkb3ku6TlpITnkIblrp7kvotcbiAgICovXG4gIHB1YmxpYyBnZXQoY29tbWFuZE5hbWU6IHN0cmluZyk6IENvbW1hbmRIYW5kbGVyIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyTWFwLmhhcyhjb21tYW5kTmFtZSkgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+aJvuS4jeWIsCcgKyBjb21tYW5kTmFtZSArICflr7nlupTnmoRDb21tYW5kSGFuZGxlcicpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5oYW5kbGVyTWFwLmdldChjb21tYW5kTmFtZSk7XG4gIH1cblxuICAvKipcbiAgICog5rOo5YaM5ZG95Luk5aSE55CGXG4gICAqIEBwYXJhbSBoYW5kbGVycyDlkb3ku6TlpITnkIblrp7kvotcbiAgICovXG4gIHB1YmxpYyByZWdpc3QoY29tbWFuZEhhbmRsZXI6IENvbW1hbmRIYW5kbGVyKSB7XG5cbiAgICAvLyDmoLnmja5tZXRhZGF0YeiOt+WPluWvueW6lOeahENvbW1hbmTlkI3np7BcbiAgICBjb25zdCBoYW5kbGVyTWV0YWRhdGE6IENvbW1hbmRIYW5kbGVyTWV0YWRhdGEgPVxuICAgICAgTWV0YWRhdGFVdGlsLmdldENsYXNzTWV0YWRhdGFCeU5hbWUoY29tbWFuZEhhbmRsZXIuY29uc3RydWN0b3IsIENPTU1BTkRfSEFORExFUl9NRVRBKTtcbiAgICBpZiAoIWhhbmRsZXJNZXRhZGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDb21tYW5kSGFuZGxlcuW/hemhu+aMh+WumuimgeWkhOeQhueahOWRveS7pOWQjeensCcpO1xuICAgIH1cbiAgICBjb25zdCBjb21tYW5kTmFtZSA9IGhhbmRsZXJNZXRhZGF0YS5jb21tYW5kTmFtZTtcbiAgICB0aGlzLnNldChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgQ29tbWFuZEhhbmRsZXJSZWdpc3RyeSB9O1xuIl19