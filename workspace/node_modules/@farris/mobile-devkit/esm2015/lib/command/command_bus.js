/**
 * CommandBus相关定义
 * @author Witt<jiwt@inspur.com>
 */
import { BehaviorSubject, Subject } from 'rxjs';
/**
 * CommandBus用于派发Command，它接受一个Command实例，查找对应的CommandHandler，并执行。
 */
class CommandBus {
    /**
     * 构造函数
     */
    constructor(handlerFactory) {
        this.handlerFactory = handlerFactory;
        this.executingCommands = [];
        this.executingCommandCount$ = new BehaviorSubject(this.executingCommands.length);
    }
    /**
     * 派发命令
     * @param command 要派发的命令
     */
    dispatch(command) {
        const commandResult$ = new Subject();
        this.executeCommand(command).subscribe({
            next: (lastTaskResult) => {
                commandResult$.next(lastTaskResult);
                commandResult$.complete();
            },
            complete: () => {
                commandResult$.complete();
                this.removeCommandFromExecutingQueue(command);
            },
            error: (error) => {
                commandResult$.error(error);
                this.removeCommandFromExecutingQueue(command);
            }
        });
        return commandResult$;
    }
    /**
     * 执行命令并返回最后一个任务的执行结果流
     */
    executeCommand(command) {
        this.addCommandToExecutingQueue(command);
        const commandName = command.name;
        const handler = this.handlerFactory.create(commandName);
        const lastTaskResult$ = handler.execute(command);
        return lastTaskResult$;
    }
    /**
     * 添加到执行队列
     */
    addCommandToExecutingQueue(command) {
        this.executingCommands.push(command);
        this.executingCommandCount$.next(this.executingCommands.length);
    }
    /**
     * 从执行队列中移除
     */
    removeCommandFromExecutingQueue(command) {
        this.executingCommands = this.executingCommands.filter((executingCommand) => {
            return executingCommand !== command;
        });
        this.executingCommandCount$.next(this.executingCommands.length);
    }
}
export { CommandBus };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF9idXMuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvY29tbWFuZC9jb21tYW5kX2J1cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7O0dBR0c7QUFFSCxPQUFPLEVBQWMsZUFBZSxFQUFFLE9BQU8sRUFBRSxNQUFNLE1BQU0sQ0FBQztBQVM1RDs7R0FFRztBQUNILE1BQU0sVUFBVTtJQWlCZDs7T0FFRztJQUNILFlBQW1CLGNBQXFDO1FBQ3RELElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1FBQ3JDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxFQUFFLENBQUM7UUFDNUIsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzRixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksUUFBUSxDQUFDLE9BQWdCO1FBQzlCLE1BQU0sY0FBYyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFDckMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxTQUFTLENBQUM7WUFDbkMsSUFBSSxFQUFFLENBQUMsY0FBbUIsRUFBRSxFQUFFO2dCQUM1QixjQUFjLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUNwQyxjQUFjLENBQUMsUUFBUSxFQUFFLENBQUM7WUFDNUIsQ0FBQztZQUNELFFBQVEsRUFBRSxHQUFHLEVBQUU7Z0JBQ2IsY0FBYyxDQUFDLFFBQVEsRUFBRSxDQUFDO2dCQUMxQixJQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEQsQ0FBQztZQUNELEtBQUssRUFBRSxDQUFDLEtBQVUsRUFBRyxFQUFFO2dCQUNyQixjQUFjLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO2dCQUM1QixJQUFJLENBQUMsK0JBQStCLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDaEQsQ0FBQztTQUNGLENBQUMsQ0FBQztRQUNMLE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7SUFFRDs7T0FFRztJQUNLLGNBQWMsQ0FBQyxPQUFnQjtRQUNyQyxJQUFJLENBQUMsMEJBQTBCLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDekMsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQztRQUNqQyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUN4RCxNQUFNLGVBQWUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2pELE9BQU8sZUFBZSxDQUFDO0lBQ3pCLENBQUM7SUFHRDs7T0FFRztJQUNLLDBCQUEwQixDQUFDLE9BQWdCO1FBQ2pELElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ssK0JBQStCLENBQUMsT0FBZ0I7UUFDdEQsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxnQkFBeUIsRUFBRSxFQUFFO1lBQ25GLE9BQU8sZ0JBQWdCLEtBQUssT0FBTyxDQUFDO1FBQ3RDLENBQUMsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbEUsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb21tYW5kQnVz55u45YWz5a6a5LmJXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxuICovXG5cbmltcG9ydCB7IE9ic2VydmFibGUsIEJlaGF2aW9yU3ViamVjdCwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tICcuL2NvbW1hbmQnO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJGYWN0b3J5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZmFjdG9yeSc7XG5pbXBvcnQgeyBDb21tYW5kSGFuZGxlclJlZ2lzdHJ5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfcmVnaXN0cnknO1xuaW1wb3J0IHsgQ29tbWFuZEhhbmRsZXJFeHRlbmRlclJlZ2lzdHJ5IH0gZnJvbSAnLi9jb21tYW5kX2hhbmRsZXJfZXh0ZW5kZXJfcmVnaXN0cnknO1xuXG5cbi8qKlxuICogQ29tbWFuZEJ1c+eUqOS6jua0vuWPkUNvbW1hbmTvvIzlroPmjqXlj5fkuIDkuKpDb21tYW5k5a6e5L6L77yM5p+l5om+5a+55bqU55qEQ29tbWFuZEhhbmRsZXLvvIzlubbmiafooYzjgIJcbiAqL1xuY2xhc3MgQ29tbWFuZEJ1cyB7XG5cbiAgLyoqXG4gICAqIGhhbmRsZXLlt6XljoJcbiAgICovXG4gIHByaXZhdGUgaGFuZGxlckZhY3Rvcnk6IENvbW1hbmRIYW5kbGVyRmFjdG9yeTtcblxuICAvKipcbiAgICog5q2j5Zyo5omn6KGM55qE5ZG95Luk5pWw6YeP5rWB77yI6K+35Yu/5L2/55So77yM5ZCO5p6c6Ieq6LSf77yJXG4gICAqL1xuICBwdWJsaWMgZXhlY3V0aW5nQ29tbWFuZENvdW50JDogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XG5cbiAgLyoqXG4gICAqIOato+WcqOaJp+ihjOeahOWRveS7pOaVsOmHj1xuICAgKi9cbiAgcHJpdmF0ZSBleGVjdXRpbmdDb21tYW5kczogQ29tbWFuZFtdO1xuXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICovXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihoYW5kbGVyRmFjdG9yeTogQ29tbWFuZEhhbmRsZXJGYWN0b3J5KSB7XG4gICAgdGhpcy5oYW5kbGVyRmFjdG9yeSA9IGhhbmRsZXJGYWN0b3J5O1xuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMgPSBbXTtcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PG51bWJlcj4odGhpcy5leGVjdXRpbmdDb21tYW5kcy5sZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOa0vuWPkeWRveS7pFxuICAgKiBAcGFyYW0gY29tbWFuZCDopoHmtL7lj5HnmoTlkb3ku6RcbiAgICovXG4gIHB1YmxpYyBkaXNwYXRjaChjb21tYW5kOiBDb21tYW5kKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCBjb21tYW5kUmVzdWx0JCA9IG5ldyBTdWJqZWN0KCk7XG4gICAgdGhpcy5leGVjdXRlQ29tbWFuZChjb21tYW5kKS5zdWJzY3JpYmUoe1xuICAgICAgICBuZXh0OiAobGFzdFRhc2tSZXN1bHQ6IGFueSkgPT4ge1xuICAgICAgICAgIGNvbW1hbmRSZXN1bHQkLm5leHQobGFzdFRhc2tSZXN1bHQpO1xuICAgICAgICAgIGNvbW1hbmRSZXN1bHQkLmNvbXBsZXRlKCk7XG4gICAgICAgIH0sXG4gICAgICAgIGNvbXBsZXRlOiAoKSA9PiB7XG4gICAgICAgICAgY29tbWFuZFJlc3VsdCQuY29tcGxldGUoKTtcbiAgICAgICAgICB0aGlzLnJlbW92ZUNvbW1hbmRGcm9tRXhlY3V0aW5nUXVldWUoY29tbWFuZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVycm9yOiAoZXJyb3I6IGFueSkgID0+IHtcbiAgICAgICAgICBjb21tYW5kUmVzdWx0JC5lcnJvcihlcnJvcik7XG4gICAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kRnJvbUV4ZWN1dGluZ1F1ZXVlKGNvbW1hbmQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICByZXR1cm4gY29tbWFuZFJlc3VsdCQ7XG4gIH1cblxuICAvKipcbiAgICog5omn6KGM5ZG95Luk5bm26L+U5Zue5pyA5ZCO5LiA5Liq5Lu75Yqh55qE5omn6KGM57uT5p6c5rWBXG4gICAqL1xuICBwcml2YXRlIGV4ZWN1dGVDb21tYW5kKGNvbW1hbmQ6IENvbW1hbmQpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuYWRkQ29tbWFuZFRvRXhlY3V0aW5nUXVldWUoY29tbWFuZCk7XG4gICAgY29uc3QgY29tbWFuZE5hbWUgPSBjb21tYW5kLm5hbWU7XG4gICAgY29uc3QgaGFuZGxlciA9IHRoaXMuaGFuZGxlckZhY3RvcnkuY3JlYXRlKGNvbW1hbmROYW1lKTtcbiAgICBjb25zdCBsYXN0VGFza1Jlc3VsdCQgPSBoYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCk7XG4gICAgcmV0dXJuIGxhc3RUYXNrUmVzdWx0JDtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIOa3u+WKoOWIsOaJp+ihjOmYn+WIl1xuICAgKi9cbiAgcHJpdmF0ZSBhZGRDb21tYW5kVG9FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kKSB7XG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcy5wdXNoKGNvbW1hbmQpO1xuICAgIHRoaXMuZXhlY3V0aW5nQ29tbWFuZENvdW50JC5uZXh0KHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMubGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDku47miafooYzpmJ/liJfkuK3np7vpmaRcbiAgICovXG4gIHByaXZhdGUgcmVtb3ZlQ29tbWFuZEZyb21FeGVjdXRpbmdRdWV1ZShjb21tYW5kOiBDb21tYW5kKSB7XG4gICAgdGhpcy5leGVjdXRpbmdDb21tYW5kcyA9IHRoaXMuZXhlY3V0aW5nQ29tbWFuZHMuZmlsdGVyKChleGVjdXRpbmdDb21tYW5kOiBDb21tYW5kKSA9PiB7XG4gICAgICByZXR1cm4gZXhlY3V0aW5nQ29tbWFuZCAhPT0gY29tbWFuZDtcbiAgICB9KTtcbiAgICB0aGlzLmV4ZWN1dGluZ0NvbW1hbmRDb3VudCQubmV4dCh0aGlzLmV4ZWN1dGluZ0NvbW1hbmRzLmxlbmd0aCk7XG4gIH1cblxufVxuXG5leHBvcnQgeyBDb21tYW5kQnVzIH07XG4iXX0=