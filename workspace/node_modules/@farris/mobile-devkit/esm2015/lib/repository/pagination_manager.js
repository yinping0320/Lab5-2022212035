import { FieldMetadataUtil } from '../entity/index';
// tslint:disable: no-bitwise
export class PaginationManager {
    constructor(entityType, paginationConfig) {
        this.entityType = entityType;
        this.paginationConfig = paginationConfig;
        if (this.paginationConfig === null || this.paginationConfig === undefined) {
            this.paginationConfig = this.getNgListProperties();
        }
        // 兼容老表单，将之前的主表分页信息展开到分页配置根中
        this.expandMainEntityConfig();
        this.deleteMainEntityConfig();
    }
    /**
     * 主表分页信息展开到分页配置根中
     */
    expandMainEntityConfig() {
        const entityName = this.entityType.name;
        if (this.paginationConfig.hasOwnProperty(entityName)) {
            const entityConfig = this.paginationConfig[entityName];
            this.paginationConfig = Object.assign(this.paginationConfig, entityConfig);
        }
    }
    /**
     * 删除主表实体配置信息
     */
    deleteMainEntityConfig() {
        delete this.paginationConfig[this.entityType.name];
    }
    /**
     * 获取分页信息
     */
    get pagination() {
        return this.paginationConfig;
    }
    /**
     * 获取分页信息
     * @param path 路径
     * @param defaultValue 默认值
     */
    getPaginationConfigByPath(path, defaultValue) {
        if (!path || path === '/') {
            return this.paginationConfig;
        }
        if (typeof path !== 'string') {
            throw new Error('路径必须为字符串！');
        }
        path = path.substring(1);
        const paths = path.split('/').filter(item => !!item && item.trim().length > 0);
        let config = this.paginationConfig;
        paths.forEach(item => {
            if (config && config.hasOwnProperty(item)) {
                config = config[item];
            }
            else {
                config = null;
            }
        });
        return !!config ? config : typeof defaultValue !== 'undefined' ? defaultValue : undefined;
    }
    /**
     * 设置分页信息
     * @param path 路径
     * @param value 值
     */
    setPaginationConfigByPath(path, value) {
        if (!Array.isArray(path)) {
            path = path.toString().match(/[^/[\]]+/g) || [];
        }
        path.slice(0, -1).reduce((prev, current, index) => Object(prev[current]) === prev[current]
            ? prev[current]
            : prev[current] = Math.abs(path[index + 1]) >> 0 === +path[index + 1]
                ? []
                : {}, this.paginationConfig)[path[path.length - 1]] = value;
        return this.paginationConfig;
    }
    /**
     * 递归获取当前实体的所有NgList属性
     * @param defaultPageSize defaultPageSize
     */
    getNgListProperties(defaultPageSize = 0) {
        const getChilds = (objectType) => {
            const listProperties = FieldMetadataUtil.getNgList(objectType);
            let result = {};
            if (Object.keys(listProperties).length < 1) {
                return result;
            }
            Object.keys(listProperties).forEach(prop => {
                let itemTypeName = listProperties[prop].dataField;
                // 去掉尾部的s
                if (itemTypeName.endsWith('s')) {
                    itemTypeName = itemTypeName.substring(0, itemTypeName.length - 1);
                }
                result[itemTypeName] = {
                    pageSize: defaultPageSize
                };
                const child = getChilds(listProperties[prop].type);
                if (child !== null && Object.keys(child).length > 0) {
                    result = Object.assign({}, result, child);
                }
            });
            return result;
        };
        const childs = getChilds(this.entityType);
        const root = Object.assign({}, { pageSize: defaultPageSize }, childs);
        return root;
    }
}
//# sourceMappingURL=data:application/json;base64,