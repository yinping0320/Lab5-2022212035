/*
 * @Author: Witt
 * @Date: 2019-03-07 17:24:38
 * @Last Modified by:   Witt
 * @Last Modified time: 2019-03-11 19:50:38
 */
import { createEntity, createEntities } from '../entity/index';
import { EntityCollection } from './entity_collection';
import { DataPathCreator, DataPathNodeType } from '../entity/index';
import { EntityUtil } from '../binding-data/entity_util';
/**
 * 实体管理类
 */
class EntityManager {
    /**
     * 构造函数
     */
    constructor(entityCollection) {
        this.entityCollection = entityCollection;
        this.entityType = entityCollection.entityType;
    }
    // #region 创建实体相关方法
    /**
     * 创建实体
     */
    createEntity(entityData) {
        const entity = createEntity(this.entityType, entityData);
        return entity;
    }
    /**
     * 批量创建实体
     */
    createEntities(entityListData, entityType) {
        const entities = createEntities(this.entityType, entityListData);
        return entities;
    }
    /**
     * 批量创建下级实体
     * @param fPath fpath
     * @param entityListData 实体数据
     */
    createEntitiesByPath(fPath, entityListData) {
        const subPaths = fPath.split('/');
        if (subPaths.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fPath}]格式不对`);
        }
        if (entityListData.length < 1) {
            return [];
        }
        let childEntityList;
        let propInfo;
        let propName;
        for (let i = 2; i < subPaths.length; i = i + 2) {
            const fid = subPaths[i - 1];
            propName = subPaths[i];
            const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            const entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fPath}`);
            }
        }
        const entities = entityListData.map(entityData => {
            return createEntity(propInfo.propEntityType, entityData);
        });
        return entities;
    }
    // #endregion
    // #region 获取实体、实体数组相关方法
    /**
     * 获取path对应的实体
     */
    getEntityByPath(path) {
        const entity = this.getEntityNodeByPath(path);
        return entity;
    }
    /**
     * 获取path对应的实体
     */
    getEntitiesByPath(path) {
        const entityCollectionOrList = this.getEntityNodeByPath(path);
        let entities;
        if (entityCollectionOrList instanceof EntityCollection === true) {
            entities = entityCollectionOrList.toArray();
        }
        else {
            entities = entityCollectionOrList.toArray();
        }
        return entities;
    }
    /**
     * 获取实体节点
     * @param path 节点路径
     */
    getEntityNodeByPath(path) {
        const dataPath = DataPathCreator.createByLongPathFromRoot(path, this);
        let entityNode = this.entityCollection;
        let pathNode = dataPath.head.next;
        while (pathNode) {
            if (pathNode.type === DataPathNodeType.DataId) {
                if (entityNode instanceof EntityCollection === true) {
                    entityNode = entityNode.getEntityById(pathNode.value);
                }
                else {
                    entityNode = entityNode.get(pathNode.value);
                }
            }
            else {
                entityNode = entityNode[pathNode.value];
            }
            if (!entityNode) {
                throw new Error(`找不到${pathNode.value}对应的数据节点`);
            }
            pathNode = pathNode.next;
        }
        return entityNode;
    }
    // #endregion
    // #region 获取、设置属性值
    /**
     * 获取path对应的实体属性值
     */
    getPropValueByPath(path) {
        const propName = path.pop();
        const entity = this.getEntityByPath(path);
        return entity[propName];
    }
    /**
     * 设置path对应实体的属性值
     */
    setPropValueByPath(path, propValue) {
        const propName = path.pop();
        const entity = this.getEntityByPath(path);
        entity[propName] = propValue;
    }
    // #endregion
    // #region 插入实体
    /**
     * 在path对应实体前插入实体
     */
    insertEntityBeforeByPath(fpath) {
        throw new Error('Not Implemented');
    }
    /**
     * 在path对应实体前批量插入实体
     */
    insertEntitiesBeforeByPath() {
        throw new Error('Not Implemented');
    }
    /**
     * 在path对应实体前插入实体
     */
    insertEntityAfterByPath() {
        throw new Error('Not Implemented');
    }
    /**
     * 在path对应实体前批量插入实体
     */
    insertEntitiesAfterByPath() {
        throw new Error('Not Implemented');
    }
    // #endregion
    // #region 追加实体
    /**
     * 在path对应的实体集合中追加1个实体
     */
    // public appendEntityByPath(fpath: string[], entity: Entity): void {
    //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
    //   if (entityCollectionOrList instanceof EntityCollection === true) {
    //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
    //     entityCollection.addEntity(entity);
    //   } else {
    //     const entityList = (entityCollectionOrList as EntityList<Entity>);
    //     entityList.appendEntity(entity);
    //   }
    // }
    /**
     * 根据path获取实体集合
     * @param fpath 路径
     * @param entityData 实体数据
     * @param initialData[可选] 默认值
     */
    appendEntityByPath(fpath, entityData, initialData, isCloned = false) {
        const subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);
        }
        let childEntityList;
        let propInfo;
        let propName;
        for (let i = 2; i < subPaths.length; i = i + 2) {
            const fid = subPaths[i - 1];
            propName = subPaths[i];
            // todo: EntityCollection重构之后这里无需差异处理
            const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            const entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);
            }
        }
        // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
        const childEntity = createEntity(propInfo.propEntityType, entityData);
        // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
        if (initialData) {
            EntityUtil.appendInitialData(childEntity, initialData);
        }
        childEntityList.appendNew(childEntity, isCloned);
        return childEntity;
    }
    /**
     * 在指定位置插入实体
     * @param fpath 父路径
     * @param entityData 实体数据
     * @param initialData 初始数据
     * @param position 插入位置
     */
    insertEntityByPath(fpath, entityData, initialData, position) {
        const subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);
        }
        let childEntityList;
        let propInfo;
        let propName;
        for (let i = 2; i < subPaths.length; i = i + 2) {
            const fid = subPaths[i - 1];
            propName = subPaths[i];
            // todo: EntityCollection重构之后这里无需差异处理
            const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            const entityType = propInfo ? propInfo.propEntityType : this.entityType;
            propInfo = EntityUtil.getPropInfo(entityType, propName);
            if (!childEntityList) {
                throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);
            }
        }
        // const propInfo = EntityUtil.getPropInfo(this.entityType, propName);
        const childEntity = createEntity(propInfo.propEntityType, entityData);
        // 在实体的实例上增加默认值属性，以便在createBindingObject时存放默认值
        if (initialData) {
            EntityUtil.appendInitialData(childEntity, initialData);
        }
        childEntityList.insert(childEntity, position);
        return childEntity;
    }
    /**
     * 在path对应的实体集合中追加多个实体
     */
    appendEntitiesByPath(fpath, entities) {
        const entityCollectionOrList = this.getEntityNodeByPath(fpath);
        if (entityCollectionOrList instanceof EntityCollection === true) {
            const entityCollection = entityCollectionOrList;
            entityCollection.addEntities(entities);
        }
        else {
            const entityList = entityCollectionOrList;
            entityList.appendEntities(entities);
        }
    }
    // #endregion
    // #region 删除实体
    /**
     * 从fapth对应的实体集合中删除id对应的实体
     */
    // public removeEntityByPath(fpath: string[], id: string): void {
    //   const entityCollectionOrList = this.getEntityNodeByPath(fpath);
    //   if (entityCollectionOrList instanceof EntityCollection === true) {
    //     const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
    //     entityCollection.removeEntityById(id);
    //   } else {
    //     const entityList = (entityCollectionOrList as EntityList<Entity>);
    //     entityList.remove(id);
    //   }
    // }
    /**
     * 根据path获取实体集合
     * @param fpath path
     */
    removeEntityByPath(fpath, id) {
        const subPaths = fpath.split('/');
        if (subPaths.length < 3) {
            throw Error(`根据path删除实体数据出错了。传入的path[${fpath}]格式不对`);
        }
        let childEntityList;
        for (let i = 2; i < subPaths.length; i = i + 2) {
            const fid = subPaths[i - 1];
            const propName = subPaths[i];
            const parentEntity = childEntityList ? childEntityList.get(fid) : this.entityCollection.getEntityById(fid);
            childEntityList = parentEntity[propName];
            if (!childEntityList) {
                throw Error(`fpath参数错误，无法找到${propName}对应的子表。fpath为：${fpath}`);
            }
        }
        childEntityList.remove(id);
    }
    /**
     * 从fapth对应的实体集合中删除ids对应的实体
     */
    removeEntitiesByPath(fpath, ids) {
        // const entityCollectionOrList = this.getEntityNodeByPath(fpath);
        // if (entityCollectionOrList instanceof EntityCollection === true) {
        //   const entityCollection = entityCollectionOrList as EntityCollection<Entity>;
        //   entityCollection.removeEntitiesByIds(ids);
        // } else {
        //   const entityList = (entityCollectionOrList as EntityList<Entity>);
        //   entityList.remove(ids);
        // }
        throw new Error('Not Implemented');
    }
    // #endregion
    // #region 清空变更集相关方法
    /**
     * 清空所有实体的变更集
     */
    clearAllEntityChanges() {
        const entities = this.entityCollection.toArray();
        entities.forEach((entity) => {
            entity.changes.splice(0, entity.changes.length);
        });
    }
    resetAllEntityChangeMark() {
        const entities = this.entityCollection.toArray();
        entities.forEach((entity) => {
            entity.hasChange = false;
        });
    }
    /**
     * 清空id指定的实体变更集
     */
    clearEntityChangesById(id) {
        const entity = this.entityCollection.getEntityById(id);
        if (!entity) {
            return;
        }
        entity.changes.splice(0, entity.changes.length);
    }
    /**
     * 清空ids数组中指定的实体的变更集
     */
    clearEntityChangesByIds(ids) {
        if (!ids || ids.length < 0) {
            return;
        }
        ids.forEach((id) => {
            this.clearEntityChangesById(id);
        });
    }
    // #endregion
    // #region 变更集检查相关方法
    /**
     * 检查所有的实体，是否有未提交的变更
     */
    checkAllEntityChanges() {
        const entities = this.entityCollection.toArray();
        const hasChanges = entities.some((entity) => {
            if (entity.changes.length > 0) {
                return true;
            }
            else {
                return false;
            }
        });
        return hasChanges;
    }
    /**
     * 检查id对应的实体，是否有未提交的变更
     */
    checkEntityChangesById(id) {
        const entity = this.entityCollection.getEntityById(id);
        if (!entity) {
            return false;
        }
        return entity.changes.length > 0;
    }
    // #endregion
    // #region 不规范方法，待废弃
    /**
     * 待废弃
     * @deprecated
     */
    clearEntityChangesByArray(idArray) {
        this.clearEntityChangesByIds(idArray);
    }
}
export { EntityManager };
//# sourceMappingURL=data:application/json;base64,