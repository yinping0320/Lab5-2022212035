import { DataChangeType } from '../core';
class DataChangeHistory {
    constructor() {
        this.history = [];
        this.cacheData = [];
    }
    addChange(dataChange) {
        const changeType = DataChangeType[dataChange.changeType];
        this[`on${changeType}Data`](dataChange);
    }
    addChanges(dataChange) {
        dataChange.forEach(change => this.addChange(change));
    }
    clear() {
        this.history.splice(0, this.history.length);
    }
    clearByIds(ids) {
        this.history = this.history.filter(item => {
            if (item.fpath && item.fpath !== '/' && item.fpath.includes('/')) {
                for (const id of ids) {
                    const include = item.fpath.split('/').includes(id);
                    return !include;
                }
            }
            else {
                return !ids.includes(item.dataId);
            }
        });
    }
    isChanged() {
        return this.history.length > 0;
    }
    clearCache() {
        this.cacheData.splice(0, this.cacheData.length);
    }
    getCacheData() {
        return this.cacheData;
    }
    onAddData(dataChange) {
        this.history.push(dataChange);
    }
    onEditData(dataChange) {
        this.cacheData.push(dataChange);
    }
    onAppendData(dataChange) {
        this.history.push(dataChange);
        this.cacheData.push(dataChange);
    }
    onDeleteData(dataChange) {
        const index = this.history.findIndex(item => item.dataId === dataChange.dataId && item.changeType === DataChangeType.Add);
        if (index >= 0) {
            this.history.splice(index, 1);
        }
        else {
            this.history.push(dataChange);
        }
    }
}
export { DataChangeHistory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV9jaGFuZ2VfaGlzdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9yZXBvc2l0b3J5L2RhdGFfY2hhbmdlX2hpc3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFjLGNBQWMsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUVyRCxNQUFNLGlCQUFpQjtJQUluQjtRQUNJLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1FBQ2xCLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDO0lBQ3hCLENBQUM7SUFDTSxTQUFTLENBQUMsVUFBc0I7UUFDbkMsTUFBTSxVQUFVLEdBQUcsY0FBYyxDQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUN6RCxJQUFJLENBQUMsS0FBSyxVQUFVLE1BQU0sQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDTSxVQUFVLENBQUMsVUFBd0I7UUFDdEMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN6RCxDQUFDO0lBQ00sS0FBSztRQUNSLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFDTSxVQUFVLENBQUMsR0FBYTtRQUMzQixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3RDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEdBQUcsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDOUQsS0FBSyxNQUFNLEVBQUUsSUFBSSxHQUFHLEVBQUU7b0JBQ2xCLE1BQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDbkQsT0FBTyxDQUFDLE9BQU8sQ0FBQztpQkFDbkI7YUFDSjtpQkFBTTtnQkFDSCxPQUFPLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDckM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFDTSxTQUFTO1FBQ1osT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNNLFVBQVU7UUFDYixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNwRCxDQUFDO0lBQ00sWUFBWTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztJQUMxQixDQUFDO0lBQ08sU0FBUyxDQUFDLFVBQXNCO1FBQ3BDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFDTyxVQUFVLENBQUMsVUFBc0I7UUFDckMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUNPLFlBQVksQ0FBQyxVQUFzQjtRQUN2QyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNwQyxDQUFDO0lBQ08sWUFBWSxDQUFDLFVBQXNCO1FBQ3ZDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxVQUFVLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLEtBQUssY0FBYyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFILElBQUksS0FBSyxJQUFJLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQztTQUNqQzthQUFNO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDakM7SUFDTCxDQUFDO0NBQ0o7QUFDRCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFDaGFuZ2UsIERhdGFDaGFuZ2VUeXBlIH0gZnJvbSAnLi4vY29yZSc7XG5cbmNsYXNzIERhdGFDaGFuZ2VIaXN0b3J5IHtcbiAgICBwcml2YXRlIGhpc3Rvcnk6IEFycmF5PERhdGFDaGFuZ2U+O1xuICAgIHByaXZhdGUgY2FjaGVEYXRhOiBBcnJheTxEYXRhQ2hhbmdlPjtcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLmhpc3RvcnkgPSBbXTtcbiAgICAgICAgdGhpcy5jYWNoZURhdGEgPSBbXTtcbiAgICB9XG4gICAgcHVibGljIGFkZENoYW5nZShkYXRhQ2hhbmdlOiBEYXRhQ2hhbmdlKSB7XG4gICAgICAgIGNvbnN0IGNoYW5nZVR5cGUgPSBEYXRhQ2hhbmdlVHlwZVtkYXRhQ2hhbmdlLmNoYW5nZVR5cGVdO1xuICAgICAgICB0aGlzW2BvbiR7Y2hhbmdlVHlwZX1EYXRhYF0oZGF0YUNoYW5nZSk7XG4gICAgfVxuICAgIHB1YmxpYyBhZGRDaGFuZ2VzKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2VbXSkge1xuICAgICAgICBkYXRhQ2hhbmdlLmZvckVhY2goY2hhbmdlID0+IHRoaXMuYWRkQ2hhbmdlKGNoYW5nZSkpO1xuICAgIH1cbiAgICBwdWJsaWMgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuaGlzdG9yeS5zcGxpY2UoMCwgdGhpcy5oaXN0b3J5Lmxlbmd0aCk7XG4gICAgfVxuICAgIHB1YmxpYyBjbGVhckJ5SWRzKGlkczogc3RyaW5nW10pIHtcbiAgICAgICAgdGhpcy5oaXN0b3J5ID0gdGhpcy5oaXN0b3J5LmZpbHRlcihpdGVtID0+IHtcbiAgICAgICAgICAgIGlmIChpdGVtLmZwYXRoICYmIGl0ZW0uZnBhdGggIT09ICcvJyAmJiBpdGVtLmZwYXRoLmluY2x1ZGVzKCcvJykpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGlkIG9mIGlkcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmNsdWRlID0gaXRlbS5mcGF0aC5zcGxpdCgnLycpLmluY2x1ZGVzKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICFpbmNsdWRlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICFpZHMuaW5jbHVkZXMoaXRlbS5kYXRhSWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcHVibGljIGlzQ2hhbmdlZCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaGlzdG9yeS5sZW5ndGggPiAwO1xuICAgIH1cbiAgICBwdWJsaWMgY2xlYXJDYWNoZSgpIHtcbiAgICAgICAgdGhpcy5jYWNoZURhdGEuc3BsaWNlKDAsIHRoaXMuY2FjaGVEYXRhLmxlbmd0aCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRDYWNoZURhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNhY2hlRGF0YTtcbiAgICB9XG4gICAgcHJpdmF0ZSBvbkFkZERhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChkYXRhQ2hhbmdlKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBvbkVkaXREYXRhKGRhdGFDaGFuZ2U6IERhdGFDaGFuZ2UpIHtcbiAgICAgICAgdGhpcy5jYWNoZURhdGEucHVzaChkYXRhQ2hhbmdlKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBvbkFwcGVuZERhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xuICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChkYXRhQ2hhbmdlKTtcbiAgICAgICAgdGhpcy5jYWNoZURhdGEucHVzaChkYXRhQ2hhbmdlKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBvbkRlbGV0ZURhdGEoZGF0YUNoYW5nZTogRGF0YUNoYW5nZSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHRoaXMuaGlzdG9yeS5maW5kSW5kZXgoaXRlbSA9PiBpdGVtLmRhdGFJZCA9PT0gZGF0YUNoYW5nZS5kYXRhSWQgJiYgaXRlbS5jaGFuZ2VUeXBlID09PSBEYXRhQ2hhbmdlVHlwZS5BZGQpO1xuICAgICAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5oaXN0b3J5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpc3RvcnkucHVzaChkYXRhQ2hhbmdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCB7IERhdGFDaGFuZ2VIaXN0b3J5IH07XG4iXX0=