import { createInjector } from '../core/index';
import { AppContext } from './app_context';
import { ViewModelContext, ViewModel } from '../view-model/index';
import { APP_BASE_PROVIDERS } from './providers';
import { APP_VARIABLE_PROVIDERS } from '../variable/index';
import { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';
import { HTTP_PROVIDERS } from '../http/index';
import { VIEW_MODEL_EXPRESSION_PROVIDERS } from '../expression/index';
import { ControlsProxy } from '../control-proxy';
import { APP_CONTROL_STATE_PROVIDERS, VIEW_MODEL_CONTROL_STATE_PROVIDERS } from '../ui-state/control-state/providers';
class App {
    /**
     * 构造函数
     */
    constructor(options) {
        options.providers = options.providers || [];
        const appProviders = [
            ...APP_BASE_PROVIDERS,
            ...APP_VARIABLE_PROVIDERS,
            ...HTTP_PROVIDERS,
            ...APP_CONTROL_STATE_PROVIDERS,
            ...options.providers
        ];
        const appInjector = createInjector(appProviders);
        this.context = appInjector.get(AppContext);
    }
    /**
     * 启用ViewModel
     */
    createViewModel(options) {
        const providers = options.providers || [];
        const parent = options.parent || null;
        const mergedProviders = [
            { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },
            { provide: ControlsProxy, useClass: ControlsProxy, deps: [] },
            ...VIEW_MODEL_COMMAND_PROVIDERS,
            ...VIEW_MODEL_EXPRESSION_PROVIDERS,
            ...VIEW_MODEL_CONTROL_STATE_PROVIDERS,
            ...providers
        ];
        const parentInjector = parent ? parent.injector : this.context.injector;
        const injector = createInjector(mergedProviders, parentInjector);
        const viewModel = injector.get(ViewModel);
        viewModel.init();
        return viewModel;
    }
}
export { App };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUE0QixjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsU0FBUyxFQUFvQixNQUFNLHFCQUFxQixDQUFDO0FBRXBGLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUNqRCxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUMzRCxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRS9DLE9BQU8sRUFBRSwrQkFBK0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3RFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUNqRCxPQUFPLEVBQUUsMkJBQTJCLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxxQ0FBcUMsQ0FBQztBQUd0SCxNQUFNLEdBQUc7SUFJUDs7T0FFRztJQUNILFlBQVksT0FBWTtRQUV0QixPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQzVDLE1BQU0sWUFBWSxHQUFHO1lBQ25CLEdBQUcsa0JBQWtCO1lBQ3JCLEdBQUcsc0JBQXNCO1lBQ3pCLEdBQUcsY0FBYztZQUNqQixHQUFHLDJCQUEyQjtZQUM5QixHQUFHLE9BQU8sQ0FBQyxTQUFTO1NBQ3JCLENBQUM7UUFDRixNQUFNLFdBQVcsR0FBRyxjQUFjLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDakQsSUFBSSxDQUFDLE9BQU8sR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0lBQzdDLENBQUM7SUFFRDs7T0FFRztJQUNILGVBQWUsQ0FBQyxPQUF5QjtRQUV2QyxNQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUMxQyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUV0QyxNQUFNLGVBQWUsR0FBcUI7WUFDeEMsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDbkUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtZQUM3RCxHQUFHLDRCQUE0QjtZQUMvQixHQUFHLCtCQUErQjtZQUNsQyxHQUFHLGtDQUFrQztZQUNyQyxHQUFHLFNBQVM7U0FDYixDQUFDO1FBRUYsTUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztRQUN4RSxNQUFNLFFBQVEsR0FBRyxjQUFjLENBQUMsZUFBZSxFQUFFLGNBQWMsQ0FBQyxDQUFDO1FBQ2pFLE1BQU0sU0FBUyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQVksU0FBUyxDQUFDLENBQUM7UUFDckQsU0FBUyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ2pCLE9BQU8sU0FBUyxDQUFDO0lBQ25CLENBQUM7Q0FFRjtBQUVELE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRpY1Byb3ZpZGVyLCBJbmplY3RvciwgY3JlYXRlSW5qZWN0b3J9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4vYXBwX2NvbnRleHQnO1xuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCwgVmlld01vZGVsLCBWaWV3TW9kZWxPcHRpb25zIH0gZnJvbSAnLi4vdmlldy1tb2RlbC9pbmRleCc7XG5cbmltcG9ydCB7IEFQUF9CQVNFX1BST1ZJREVSUyB9IGZyb20gJy4vcHJvdmlkZXJzJztcbmltcG9ydCB7IEFQUF9WQVJJQUJMRV9QUk9WSURFUlMgfSBmcm9tICcuLi92YXJpYWJsZS9pbmRleCc7XG5pbXBvcnQgeyBWSUVXX01PREVMX0NPTU1BTkRfUFJPVklERVJTIH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XG5pbXBvcnQgeyBIVFRQX1BST1ZJREVSUyB9IGZyb20gJy4uL2h0dHAvaW5kZXgnO1xuXG5pbXBvcnQgeyBWSUVXX01PREVMX0VYUFJFU1NJT05fUFJPVklERVJTIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XG5pbXBvcnQgeyBDb250cm9sc1Byb3h5IH0gZnJvbSAnLi4vY29udHJvbC1wcm94eSc7XG5pbXBvcnQgeyBBUFBfQ09OVFJPTF9TVEFURV9QUk9WSURFUlMsIFZJRVdfTU9ERUxfQ09OVFJPTF9TVEFURV9QUk9WSURFUlMgfSBmcm9tICcuLi91aS1zdGF0ZS9jb250cm9sLXN0YXRlL3Byb3ZpZGVycyc7XG5cblxuY2xhc3MgQXBwIHtcblxuICBwdWJsaWMgY29udGV4dDogQXBwQ29udGV4dDtcblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBhbnkpIHtcblxuICAgIG9wdGlvbnMucHJvdmlkZXJzID0gb3B0aW9ucy5wcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgYXBwUHJvdmlkZXJzID0gW1xuICAgICAgLi4uQVBQX0JBU0VfUFJPVklERVJTLFxuICAgICAgLi4uQVBQX1ZBUklBQkxFX1BST1ZJREVSUyxcbiAgICAgIC4uLkhUVFBfUFJPVklERVJTLFxuICAgICAgLi4uQVBQX0NPTlRST0xfU1RBVEVfUFJPVklERVJTLFxuICAgICAgLi4ub3B0aW9ucy5wcm92aWRlcnNcbiAgICBdO1xuICAgIGNvbnN0IGFwcEluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IoYXBwUHJvdmlkZXJzKTtcbiAgICB0aGlzLmNvbnRleHQgPSBhcHBJbmplY3Rvci5nZXQoQXBwQ29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICog5ZCv55SoVmlld01vZGVsXG4gICAqL1xuICBjcmVhdGVWaWV3TW9kZWwob3B0aW9uczogVmlld01vZGVsT3B0aW9ucyk6IFZpZXdNb2RlbCB7XG5cbiAgICBjb25zdCBwcm92aWRlcnMgPSBvcHRpb25zLnByb3ZpZGVycyB8fCBbXTtcbiAgICBjb25zdCBwYXJlbnQgPSBvcHRpb25zLnBhcmVudCB8fCBudWxsO1xuXG4gICAgY29uc3QgbWVyZ2VkUHJvdmlkZXJzOiBTdGF0aWNQcm92aWRlcltdID0gW1xuICAgICAgeyBwcm92aWRlOiBWaWV3TW9kZWxDb250ZXh0LCB1c2VDbGFzczogVmlld01vZGVsQ29udGV4dCwgZGVwczogW10gfSxcbiAgICAgIHsgcHJvdmlkZTogQ29udHJvbHNQcm94eSwgdXNlQ2xhc3M6IENvbnRyb2xzUHJveHksIGRlcHM6IFtdIH0sXG4gICAgICAuLi5WSUVXX01PREVMX0NPTU1BTkRfUFJPVklERVJTLFxuICAgICAgLi4uVklFV19NT0RFTF9FWFBSRVNTSU9OX1BST1ZJREVSUyxcbiAgICAgIC4uLlZJRVdfTU9ERUxfQ09OVFJPTF9TVEFURV9QUk9WSURFUlMsXG4gICAgICAuLi5wcm92aWRlcnNcbiAgICBdO1xuXG4gICAgY29uc3QgcGFyZW50SW5qZWN0b3IgPSBwYXJlbnQgPyBwYXJlbnQuaW5qZWN0b3IgOiB0aGlzLmNvbnRleHQuaW5qZWN0b3I7XG4gICAgY29uc3QgaW5qZWN0b3IgPSBjcmVhdGVJbmplY3RvcihtZXJnZWRQcm92aWRlcnMsIHBhcmVudEluamVjdG9yKTtcbiAgICBjb25zdCB2aWV3TW9kZWwgPSBpbmplY3Rvci5nZXQ8Vmlld01vZGVsPihWaWV3TW9kZWwpO1xuICAgIHZpZXdNb2RlbC5pbml0KCk7XG4gICAgcmV0dXJuIHZpZXdNb2RlbDtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEFwcCB9O1xuIl19