/**
 * ViewModelContext管理类
 */
class ViewModelContextManager {
    /**
     * 构造函数
     */
    constructor() {
        this.contextMap = new Map();
        this.contextSet = new Set();
    }
    /**
     * 注册Context
     */
    regContext(viewModelContext) {
        const id = viewModelContext.id;
        if (this.contextMap.has(id) === true) {
            // throw Error(`id为${id}的ViewModelContext已经存在`);
            // 临时处理，方式报错。
            this.unregContext(viewModelContext);
        }
        this.contextMap.set(id, viewModelContext);
        this.contextSet.add(viewModelContext);
    }
    /**
     * 取消注册
     */
    unregContext(context) {
        const id = context.id;
        this.contextMap.delete(id);
        this.contextSet.delete(context);
    }
    /**
     * 获取ContextMap
     */
    getContextMap() {
        return this.contextMap;
    }
    /**
     * 获取全部Context
     */
    getContexts() {
        return Array.from(this.contextSet);
    }
    /**
     * 根据命名控件获取上下文集合
     */
    getContextsByNamespace(namespace) {
        return this.getContexts();
    }
    /**
     * 根据id获取Context
     */
    getContextById(id) {
        const targetContext = this.contextMap.get(id);
        return targetContext;
    }
    /**
     * 获取根Context
     */
    getRootContext() {
        const contexts = this.getContexts();
        const rootContext = contexts.find((context) => {
            return context.parent === null;
        });
        return rootContext;
    }
    /**
     * 获取传入视图模型id的root及root的下一代集合数组
     */
    getRootContextAndPosterityById(viewModelId) {
        const targetContext = this.getContextById(viewModelId);
        const contexts = this.getContexts();
        let contextsGroup = [];
        // 1.找到ROOT
        const RootId = this.getContextsGroupRoot(targetContext);
        // 2.可直接遍历拿到所有直系后代 (目前只有两层结构直接获取下一代)
        contexts.map((context) => {
            if (context.parent && context.parent.id === RootId) {
                contextsGroup.push(context);
            }
        });
        contextsGroup.push(this.getContextById(RootId));
        return contextsGroup;
    }
    getContextsGroupRoot(context) {
        if (context.parent) {
            return this.getContextsGroupRoot(context.parent);
        }
        else {
            return context.id;
        }
    }
}
export { ViewModelContextManager };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld19tb2RlbF9jb250ZXhfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9hcHAvdmlld19tb2RlbF9jb250ZXhfbWFuYWdlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQTs7R0FFRztBQUNILE1BQU0sdUJBQXVCO0lBYTNCOztPQUVHO0lBQ0g7UUFDRSxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksR0FBRyxFQUE0QixDQUFDO1FBQ3RELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxHQUFHLEVBQW9CLENBQUM7SUFDaEQsQ0FBQztJQUVEOztPQUVHO0lBQ0ksVUFBVSxDQUFDLGdCQUFrQztRQUNsRCxNQUFNLEVBQUUsR0FBRyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUM7UUFDL0IsSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDcEMsZ0RBQWdEO1lBQ2hELGFBQWE7WUFDYixJQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixDQUFDLENBQUM7U0FDckM7UUFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMxQyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRDs7T0FFRztJQUNJLFlBQVksQ0FBQyxPQUF5QjtRQUMzQyxNQUFNLEVBQUUsR0FBRyxPQUFPLENBQUMsRUFBRSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQzNCLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2xDLENBQUM7SUFFRDs7T0FFRztJQUNJLGFBQWE7UUFDbEIsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7T0FFRztJQUNJLFdBQVc7UUFDaEIsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxzQkFBc0IsQ0FBQyxTQUFpQjtRQUM3QyxPQUFPLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxjQUFjLENBQUMsRUFBVTtRQUM5QixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUM5QyxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDO0lBRUQ7O09BRUc7SUFDSSxjQUFjO1FBQ25CLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztRQUNwQyxNQUFNLFdBQVcsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQzlELE9BQU8sT0FBTyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUM7UUFDakMsQ0FBQyxDQUFDLENBQUM7UUFDSCxPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSSw4QkFBOEIsQ0FBQyxXQUFXO1FBQy9DLE1BQU0sYUFBYSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ3BDLElBQUksYUFBYSxHQUFHLEVBQUUsQ0FBQztRQUN2QixXQUFXO1FBQ1gsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLGFBQWEsQ0FBQyxDQUFDO1FBQ3hELG9DQUFvQztRQUNwQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUMsT0FBeUIsRUFBRSxFQUFFO1lBQ3pDLElBQUksT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsS0FBSyxNQUFNLEVBQUU7Z0JBQ2xELGFBQWEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDN0I7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ2hELE9BQU8sYUFBYSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxvQkFBb0IsQ0FBQyxPQUF5QjtRQUNwRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsb0JBQW9CLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1NBQ2xEO2FBQU07WUFDTCxPQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUE7U0FDbEI7SUFDSCxDQUFDO0NBQ0Y7QUFFRCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcblxuLyoqXG4gKiBWaWV3TW9kZWxDb250ZXh0566h55CG57G7XG4gKi9cbmNsYXNzIFZpZXdNb2RlbENvbnRleHRNYW5hZ2VyIHtcblxuICAvKipcbiAgICogQ29udGV4dOWtl+WFuFxuICAgKi9cbiAgcHJpdmF0ZSBjb250ZXh0TWFwOiBNYXA8c3RyaW5nLCBWaWV3TW9kZWxDb250ZXh0PjtcblxuICAvKipcbiAgICogQ29udGV4dOmbhuWQiFxuICAgKi9cbiAgcHJpdmF0ZSBjb250ZXh0U2V0OiBTZXQ8Vmlld01vZGVsQ29udGV4dD47XG5cblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLmNvbnRleHRNYXAgPSBuZXcgTWFwPHN0cmluZywgVmlld01vZGVsQ29udGV4dD4oKTtcbiAgICB0aGlzLmNvbnRleHRTZXQgPSBuZXcgU2V0PFZpZXdNb2RlbENvbnRleHQ+KCk7XG4gIH1cblxuICAvKipcbiAgICog5rOo5YaMQ29udGV4dFxuICAgKi9cbiAgcHVibGljIHJlZ0NvbnRleHQodmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCk6IHZvaWQge1xuICAgIGNvbnN0IGlkID0gdmlld01vZGVsQ29udGV4dC5pZDtcbiAgICBpZiAodGhpcy5jb250ZXh0TWFwLmhhcyhpZCkgPT09IHRydWUpIHtcbiAgICAgIC8vIHRocm93IEVycm9yKGBpZOS4uiR7aWR955qEVmlld01vZGVsQ29udGV4dOW3sue7j+WtmOWcqGApO1xuICAgICAgLy8g5Li05pe25aSE55CG77yM5pa55byP5oql6ZSZ44CCXG4gICAgICB0aGlzLnVucmVnQ29udGV4dCh2aWV3TW9kZWxDb250ZXh0KTtcbiAgICB9XG5cbiAgICB0aGlzLmNvbnRleHRNYXAuc2V0KGlkLCB2aWV3TW9kZWxDb250ZXh0KTtcbiAgICB0aGlzLmNvbnRleHRTZXQuYWRkKHZpZXdNb2RlbENvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWPlua2iOazqOWGjFxuICAgKi9cbiAgcHVibGljIHVucmVnQ29udGV4dChjb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KTogdm9pZCB7XG4gICAgY29uc3QgaWQgPSBjb250ZXh0LmlkO1xuICAgIHRoaXMuY29udGV4dE1hcC5kZWxldGUoaWQpO1xuICAgIHRoaXMuY29udGV4dFNldC5kZWxldGUoY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+WQ29udGV4dE1hcFxuICAgKi9cbiAgcHVibGljIGdldENvbnRleHRNYXAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29udGV4dE1hcDtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blhajpg6hDb250ZXh0XG4gICAqL1xuICBwdWJsaWMgZ2V0Q29udGV4dHMoKTogVmlld01vZGVsQ29udGV4dFtdIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNvbnRleHRTZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOagueaNruWRveWQjeaOp+S7tuiOt+WPluS4iuS4i+aWh+mbhuWQiFxuICAgKi9cbiAgcHVibGljIGdldENvbnRleHRzQnlOYW1lc3BhY2UobmFtZXNwYWNlOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRDb250ZXh0cygpO1xuICB9XG5cbiAgLyoqXG4gICAqIOagueaNrmlk6I635Y+WQ29udGV4dFxuICAgKi9cbiAgcHVibGljIGdldENvbnRleHRCeUlkKGlkOiBzdHJpbmcpOiBWaWV3TW9kZWxDb250ZXh0IHtcbiAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5jb250ZXh0TWFwLmdldChpZCk7XG4gICAgcmV0dXJuIHRhcmdldENvbnRleHQ7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5qC5Q29udGV4dFxuICAgKi9cbiAgcHVibGljIGdldFJvb3RDb250ZXh0KCk6IFZpZXdNb2RlbENvbnRleHQge1xuICAgIGNvbnN0IGNvbnRleHRzID0gdGhpcy5nZXRDb250ZXh0cygpO1xuICAgIGNvbnN0IHJvb3RDb250ZXh0ID0gY29udGV4dHMuZmluZCgoY29udGV4dDogVmlld01vZGVsQ29udGV4dCkgPT4ge1xuICAgICAgcmV0dXJuIGNvbnRleHQucGFyZW50ID09PSBudWxsO1xuICAgIH0pO1xuICAgIHJldHVybiByb290Q29udGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bkvKDlhaXop4blm77mqKHlnotpZOeahHJvb3Tlj4pyb29055qE5LiL5LiA5Luj6ZuG5ZCI5pWw57uEXG4gICAqL1xuICBwdWJsaWMgZ2V0Um9vdENvbnRleHRBbmRQb3N0ZXJpdHlCeUlkKHZpZXdNb2RlbElkKTogVmlld01vZGVsQ29udGV4dFtdIHtcbiAgICBjb25zdCB0YXJnZXRDb250ZXh0ID0gdGhpcy5nZXRDb250ZXh0QnlJZCh2aWV3TW9kZWxJZCk7XG4gICAgY29uc3QgY29udGV4dHMgPSB0aGlzLmdldENvbnRleHRzKCk7XG4gICAgbGV0IGNvbnRleHRzR3JvdXAgPSBbXTtcbiAgICAvLyAxLuaJvuWIsFJPT1RcbiAgICBjb25zdCBSb290SWQgPSB0aGlzLmdldENvbnRleHRzR3JvdXBSb290KHRhcmdldENvbnRleHQpO1xuICAgIC8vIDIu5Y+v55u05o6l6YGN5Y6G5ou/5Yiw5omA5pyJ55u057O75ZCO5LujICjnm67liY3lj6rmnInkuKTlsYLnu5PmnoTnm7TmjqXojrflj5bkuIvkuIDku6MpXG4gICAgY29udGV4dHMubWFwKChjb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSA9PiB7XG4gICAgICBpZiAoY29udGV4dC5wYXJlbnQgJiYgY29udGV4dC5wYXJlbnQuaWQgPT09IFJvb3RJZCkge1xuICAgICAgICBjb250ZXh0c0dyb3VwLnB1c2goY29udGV4dCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgY29udGV4dHNHcm91cC5wdXNoKHRoaXMuZ2V0Q29udGV4dEJ5SWQoUm9vdElkKSk7XG4gICAgcmV0dXJuIGNvbnRleHRzR3JvdXA7XG4gIH1cblxuICBwcml2YXRlIGdldENvbnRleHRzR3JvdXBSb290KGNvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcbiAgICBpZiAoY29udGV4dC5wYXJlbnQpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldENvbnRleHRzR3JvdXBSb290KGNvbnRleHQucGFyZW50KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGNvbnRleHQuaWRcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgVmlld01vZGVsQ29udGV4dE1hbmFnZXIgfTtcbiJdfQ==