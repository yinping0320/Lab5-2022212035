/**
 * 变量解析服务
 * 职责：
 * 1、解析字符串中的变量，并替换成相应的值；
 * 2、对表达式进行求值。
 *
 * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
 */
class VariableParseService {
    /**
     * 构造变量解析服务
     * @param parsers 解析器集合
     */
    constructor(parsers) {
        this.parsers = parsers;
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parse(target, context) {
        if (typeof target === 'string' && target.length > 0) {
            // 字符串，直接解析
            return this.parseExpression(target, context);
        }
        else if (Array.isArray(target)) {
            // 遍历数组
            target.forEach((item, itemIndex) => {
                if (typeof item === 'string') {
                    target[itemIndex] = this.parseExpression(item, context);
                }
                else {
                    target[itemIndex] = this.parse(item, context);
                }
            });
        }
        else if (typeof target === 'object' && target !== null) {
            // 遍历对象可枚举属性
            const keys = Object.keys(target);
            keys.forEach(key => {
                if (typeof target[key] === 'string') {
                    target[key] = this.parseExpression(target[key], context);
                }
                else {
                    target[key] = this.parse(target[key], context);
                }
            });
        }
        return target;
    }
    /**
     * 表达式求值
     */
    evaluate(expression, context) {
        const parsedExpression = this.parse(expression, context);
        return (new Function('return ' + parsedExpression))();
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    parseExpression(expression, context) {
        // 空串直接返回
        if (expression === '') {
            return '';
        }
        this.parsers.forEach(parser => {
            if (typeof expression === 'string') {
                expression = parser.parse(expression, context);
            }
        });
        return expression;
    }
}
export { VariableParseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfcGFyc2Vfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS92YXJpYWJsZV9wYXJzZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOzs7Ozs7O0dBT0c7QUFDSCxNQUFNLG9CQUFvQjtJQU94Qjs7O09BR0c7SUFDSCxZQUFZLE9BQXlCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksS0FBSyxDQUFDLE1BQVcsRUFBRSxPQUFhO1FBQ3JDLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBRW5ELFdBQVc7WUFDWCxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1NBRTlDO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBRWhDLE9BQU87WUFDUCxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxFQUFFO2dCQUNqQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUN6RDtxQkFBTTtvQkFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQy9DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFFeEQsWUFBWTtZQUNaLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDakIsSUFBSSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDMUQ7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNoRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSSxRQUFRLENBQUMsVUFBa0IsRUFBRSxPQUFhO1FBQy9DLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDekQsT0FBTyxDQUFDLElBQUksUUFBUSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUN4RCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNLLGVBQWUsQ0FBQyxVQUFrQixFQUFFLE9BQVk7UUFFdEQsU0FBUztRQUNULElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDNUIsSUFBSSxPQUFPLFVBQVUsS0FBSyxRQUFRLEVBQUU7Z0JBQ2xDLFVBQVUsR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxPQUFPLENBQUMsQ0FBQzthQUNoRDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOWPmOmHj+ino+aekOacjeWKoVxuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cbiAqL1xuaW1wb3J0IHsgVmFyaWFibGVQYXJzZXIsIFZBUklBQkxFX1BBUlNFUlMgfSBmcm9tICcuL3ZhcmlhYmxlX3BhcnNlcic7XG5pbXBvcnQgeyBJbmplY3RvciAgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcblxuXG4vKipcbiAqIOWPmOmHj+ino+aekOacjeWKoVxuICog6IGM6LSj77yaXG4gKiAx44CB6Kej5p6Q5a2X56ym5Liy5Lit55qE5Y+Y6YeP77yM5bm25pu/5o2i5oiQ55u45bqU55qE5YC877ybXG4gKiAy44CB5a+56KGo6L6+5byP6L+b6KGM5rGC5YC844CCXG4gKlxuICogQHRvZG8g5a+56KGo6L6+5byP5rGC5YC855qE6YOo5YiG5ZKM6KGo6L6+5byP5Yqf6IO96YeN5Y+g77yM5piv5ZCm6L2s56e75Yiw6KGo6L6+5byP5Lit77yfXG4gKi9cbmNsYXNzIFZhcmlhYmxlUGFyc2VTZXJ2aWNlIHtcblxuICAvKipcbiAgICog6Kej5p6Q5Zmo6ZuG5ZCIXG4gICAqL1xuICBwcml2YXRlIHBhcnNlcnM6IFZhcmlhYmxlUGFyc2VyW107XG5cbiAgLyoqXG4gICAqIOaehOmAoOWPmOmHj+ino+aekOacjeWKoVxuICAgKiBAcGFyYW0gcGFyc2VycyDop6PmnpDlmajpm4blkIhcbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcnNlcnM6IFZhcmlhYmxlUGFyc2VyW10pIHtcbiAgICB0aGlzLnBhcnNlcnMgPSBwYXJzZXJzO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aekOihqOi+vuW8j1xuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXG4gICAqL1xuICBwdWJsaWMgcGFyc2UodGFyZ2V0OiBhbnksIGNvbnRleHQ/OiBhbnkpOiBhbnkge1xuICAgIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnc3RyaW5nJyAmJiB0YXJnZXQubGVuZ3RoID4gMCkge1xuXG4gICAgICAvLyDlrZfnrKbkuLLvvIznm7TmjqXop6PmnpBcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlRXhwcmVzc2lvbih0YXJnZXQsIGNvbnRleHQpO1xuXG4gICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkpIHtcblxuICAgICAgLy8g6YGN5Y6G5pWw57uEXG4gICAgICB0YXJnZXQuZm9yRWFjaCgoaXRlbSwgaXRlbUluZGV4KSA9PiAge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGFyZ2V0W2l0ZW1JbmRleF0gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbihpdGVtLCBjb250ZXh0KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0YXJnZXRbaXRlbUluZGV4XSA9IHRoaXMucGFyc2UoaXRlbSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0JyAmJiB0YXJnZXQgIT09IG51bGwpIHtcblxuICAgICAgLy8g6YGN5Y6G5a+56LGh5Y+v5p6a5Li+5bGe5oCnXG4gICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGFyZ2V0KTtcbiAgICAgIGtleXMuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFtrZXldID09PSAnc3RyaW5nJykge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdGhpcy5wYXJzZUV4cHJlc3Npb24odGFyZ2V0W2tleV0sIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gdGhpcy5wYXJzZSh0YXJnZXRba2V5XSwgY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cblxuICAvKipcbiAgICog6KGo6L6+5byP5rGC5YC8XG4gICAqL1xuICBwdWJsaWMgZXZhbHVhdGUoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0PzogYW55KTogYW55IHtcbiAgICBjb25zdCBwYXJzZWRFeHByZXNzaW9uID0gdGhpcy5wYXJzZShleHByZXNzaW9uLCBjb250ZXh0KTtcbiAgICByZXR1cm4gKG5ldyBGdW5jdGlvbigncmV0dXJuICcgKyBwYXJzZWRFeHByZXNzaW9uKSkoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDop6PmnpDooajovr7lvI9cbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xuICAgKi9cbiAgcHJpdmF0ZSBwYXJzZUV4cHJlc3Npb24oZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBzdHJpbmcge1xuXG4gICAgLy8g56m65Liy55u05o6l6L+U5ZueXG4gICAgaWYgKGV4cHJlc3Npb24gPT09ICcnKSB7XG4gICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJzZXJzLmZvckVhY2gocGFyc2VyID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZXhwcmVzc2lvbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgZXhwcmVzc2lvbiA9IHBhcnNlci5wYXJzZShleHByZXNzaW9uLCBjb250ZXh0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gZXhwcmVzc2lvbjtcbiAgfVxufVxuXG5leHBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9O1xuIl19