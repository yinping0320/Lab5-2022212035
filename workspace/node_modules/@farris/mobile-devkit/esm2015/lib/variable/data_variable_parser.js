import { ParseUtil } from './parse_util';
/**
 * 数据变量解析
 */
class DataVariableParser {
    /**
     * 解析变量
     * @param expression 表达式
     * @param context 上下文
     */
    parse(expression, context) {
        const appContext = ParseUtil.getAppContext(context);
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{DATA~${paths[0]}}`) {
            return this.getValue(paths[0], appContext);
        }
        // 2、其他情况：字符串替换
        paths.forEach((path) => {
            const searchValue = `{DATA~${path}}`;
            const replaceValue = this.getValue(path, appContext);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取路径
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        const dataVariables = expression.match(DATA_PATTERN_G);
        if (dataVariables === null) {
            return [];
        }
        // 提取后边的路径
        const DATA_PATTERN = /\{DATA~(\S+?)\}/;
        dataVariables.forEach(dataVariable => {
            const pathMatches = dataVariable.match(DATA_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取值
     * @param path 路径：/
     */
    getValue(path, appContext) {
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const frameContext = appContext.viewModelContextManager.getContextById(parts[0]);
        if (!frameContext) {
            throw new Error(`${path}不正确，请检查！`);
        }
        const bindingData = frameContext.bindingData;
        if (!bindingData) {
            throw new Error(`${path}不正确，请检查！`);
        }
        return bindingData.getValue(parts.slice(1));
    }
}
export { DataVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZGF0YV92YXJpYWJsZV9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6Qzs7R0FFRztBQUNILE1BQU0sa0JBQWtCO0lBRXRCOzs7O09BSUc7SUFDSCxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQ3BDLE1BQU0sVUFBVSxHQUFHLFNBQVMsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDcEQsTUFBTSxLQUFLLEdBQWEsSUFBSSxDQUFDLFlBQVksQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUV0RCxnQkFBZ0I7UUFDaEIsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxVQUFVLEtBQUssU0FBUyxLQUFLLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRTtZQUM3RCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQzVDO1FBRUQsZUFBZTtRQUNmLEtBQUssQ0FBQyxPQUFPLENBQUUsQ0FBQyxJQUFZLEVBQUUsRUFBRTtZQUM5QixNQUFNLFdBQVcsR0FBRyxTQUFTLElBQUksR0FBRyxDQUFDO1lBQ3JDLE1BQU0sWUFBWSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ3JELFVBQVUsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUM3RCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQVEsVUFBVSxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNLLFlBQVksQ0FBQyxVQUFrQjtRQUNyQyxNQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLE1BQU0sY0FBYyxHQUFHLGtCQUFrQixDQUFDO1FBQzFDLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsTUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUM7UUFDdkMsYUFBYSxDQUFDLE9BQU8sQ0FBRSxZQUFZLENBQUMsRUFBRTtZQUNwQyxNQUFNLFdBQVcsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1lBQ3JELElBQUksV0FBVyxJQUFJLElBQUksSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDbkQsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUM1QjtRQUNILENBQUMsQ0FBQyxDQUFDO1FBQ0gsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRUQ7OztPQUdHO0lBQ0ssUUFBUSxDQUFDLElBQVksRUFBRSxVQUFzQjtRQUNuRCxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQVksRUFBRSxFQUFFO1lBQ3BELE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQztRQUNyQixDQUFDLENBQUMsQ0FBQztRQUVILE1BQU0sWUFBWSxHQUFHLFVBQVUsQ0FBQyx1QkFBdUIsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakYsSUFBSSxDQUFDLFlBQVksRUFBRTtZQUNqQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUVELE1BQU0sV0FBVyxHQUFJLFlBQVksQ0FBQyxXQUFXLENBQUM7UUFDOUMsSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUdGO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOaVsOaNrua6kOWPmOmHj+ino+aekFxuICogQGF1dGhvciBXaXR0IDxqaXd0QGluc3B1ci5jb20+XG4gKi9cbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuLi9hcHAvaW5kZXgnO1xuaW1wb3J0IHsgVmFyaWFibGVQYXJzZXIgfSBmcm9tICcuL3ZhcmlhYmxlX3BhcnNlcic7XG5pbXBvcnQgeyBQYXJzZVV0aWwgfSBmcm9tICcuL3BhcnNlX3V0aWwnO1xuXG4vKipcbiAqIOaVsOaNruWPmOmHj+ino+aekFxuICovXG5jbGFzcyBEYXRhVmFyaWFibGVQYXJzZXIgaW1wbGVtZW50cyBWYXJpYWJsZVBhcnNlciB7XG5cbiAgLyoqXG4gICAqIOino+aekOWPmOmHj1xuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXG4gICAqL1xuICBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgY29uc3QgYXBwQ29udGV4dCA9IFBhcnNlVXRpbC5nZXRBcHBDb250ZXh0KGNvbnRleHQpO1xuICAgIGNvbnN0IHBhdGhzOiBzdHJpbmdbXSA9IHRoaXMuZXh0cmFjdFBhdGhzKGV4cHJlc3Npb24pO1xuXG4gICAgLy8gMeOAgeWNleS4queahOihqOi+vuW8j++8muebtOaOpeaxguWAvFxuICAgIGlmIChwYXRocy5sZW5ndGggPT09IDEgJiYgZXhwcmVzc2lvbiA9PT0gYHtEQVRBfiR7cGF0aHNbMF19fWApIHtcbiAgICAgIHJldHVybiB0aGlzLmdldFZhbHVlKHBhdGhzWzBdLCBhcHBDb250ZXh0KTtcbiAgICB9XG5cbiAgICAvLyAy44CB5YW25LuW5oOF5Ya177ya5a2X56ym5Liy5pu/5o2iXG4gICAgcGF0aHMuZm9yRWFjaCggKHBhdGg6IHN0cmluZykgPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBge0RBVEF+JHtwYXRofX1gO1xuICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoLCBhcHBDb250ZXh0KTtcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICog5o+Q5Y+W6Lev5b6EXG4gICAqL1xuICBwcml2YXRlIGV4dHJhY3RQYXRocyhleHByZXNzaW9uOiBzdHJpbmcpIHtcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gID0gW107XG5cbiAgICAvLyDmn6Xmib7miYDmnInnmoR1aVN0YXRl5Y+Y6YeP5a2X56ym5LiyXG4gICAgY29uc3QgREFUQV9QQVRURVJOX0cgPSAvXFx7REFUQX4oXFxTKz8pXFx9L2c7XG4gICAgY29uc3QgZGF0YVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goREFUQV9QQVRURVJOX0cpO1xuICAgIGlmIChkYXRhVmFyaWFibGVzID09PSBudWxsKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfVxuXG4gICAgLy8g5o+Q5Y+W5ZCO6L6555qE6Lev5b6EXG4gICAgY29uc3QgREFUQV9QQVRURVJOID0gL1xce0RBVEF+KFxcUys/KVxcfS87XG4gICAgZGF0YVZhcmlhYmxlcy5mb3JFYWNoKCBkYXRhVmFyaWFibGUgPT4gIHtcbiAgICAgIGNvbnN0IHBhdGhNYXRjaGVzID0gZGF0YVZhcmlhYmxlLm1hdGNoKERBVEFfUEFUVEVSTik7XG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcGF0aHMucHVzaChwYXRoTWF0Y2hlc1sxXSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHBhdGhzO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluWAvFxuICAgKiBAcGFyYW0gcGF0aCDot6/lvoTvvJovXG4gICAqL1xuICBwcml2YXRlIGdldFZhbHVlKHBhdGg6IHN0cmluZywgYXBwQ29udGV4dDogQXBwQ29udGV4dCk6IGFueSB7XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBwYXJ0ICE9PSAnJztcbiAgICB9KTtcblxuICAgIGNvbnN0IGZyYW1lQ29udGV4dCA9IGFwcENvbnRleHQudmlld01vZGVsQ29udGV4dE1hbmFnZXIuZ2V0Q29udGV4dEJ5SWQocGFydHNbMF0pO1xuICAgIGlmICghZnJhbWVDb250ZXh0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cGF0aH3kuI3mraPnoa7vvIzor7fmo4Dmn6XvvIFgKTtcbiAgICB9XG5cbiAgICBjb25zdCBiaW5kaW5nRGF0YSAgPSBmcmFtZUNvbnRleHQuYmluZGluZ0RhdGE7XG4gICAgaWYgKCFiaW5kaW5nRGF0YSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BhdGh95LiN5q2j56Gu77yM6K+35qOA5p+l77yBYCk7XG4gICAgfVxuICAgIHJldHVybiBiaW5kaW5nRGF0YS5nZXRWYWx1ZShwYXJ0cy5zbGljZSgxKSk7XG4gIH1cblxuXG59XG5cbmV4cG9ydCB7IERhdGFWYXJpYWJsZVBhcnNlciB9O1xuIl19