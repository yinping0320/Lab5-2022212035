/**
 * session变量解析
 * @author Witt <jiwt@inspur.com>
 */
import { CommandContext } from '../command/index';
/**
 * 命令变量解析
 * {COMMAND~/params/key}
 * {COMMAND~/results/taskName}
 */
class CommandVariableParser {
    /**
     * 构造函数
     */
    constructor() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    parse(expression, context) {
        const paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === `{COMMAND~${paths[0]}}`) {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(path => {
            const searchValue = `{COMMAND~${path}}`;
            const replaceValue = this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    }
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    extractPaths(expression) {
        const paths = [];
        // 查找所有的uiState变量字符串
        const UI_STATE_PATTERN_G = /\{COMMAND~(\S+?)\}/g;
        const uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        if (uiStateVariables === null) {
            return [];
        }
        // 提取后边的路径
        const UI_STATE_PATTERN = /\{COMMAND~(\S+?)\}/;
        uiStateVariables.forEach(sessionVariable => {
            const pathMatches = sessionVariable.match(UI_STATE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    }
    /**
     * 获取UIState
     */
    getValue(path, context) {
        if (context instanceof CommandContext === false) {
            throw new Error('当前上下文不支持COMMAND变量，请检查！');
        }
        const parts = path.split('/').filter((part) => {
            return part !== '';
        });
        const [type, name] = parts;
        if (type === 'params') {
            return context.command.params[name];
        }
        else if (type === 'results') {
            return context.results[name];
        }
    }
}
export { CommandVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbWFuZF92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvY29tbWFuZF92YXJpYWJsZV9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7OztHQUdHO0FBRUgsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBR2xEOzs7O0dBSUc7QUFDSCxNQUFNLHFCQUFxQjtJQUV6Qjs7T0FFRztJQUNIO0lBQ0EsQ0FBQztJQUVEOzs7O09BSUc7SUFDSSxLQUFLLENBQUMsVUFBa0IsRUFBRSxPQUFZO1FBQzNDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUMsZ0JBQWdCO1FBQ2hCLElBQUksS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksVUFBVSxLQUFLLFlBQVksS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUU7WUFDaEUsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztTQUN6QztRQUVELGVBQWU7UUFDZixLQUFLLENBQUMsT0FBTyxDQUFFLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE1BQU0sV0FBVyxHQUFHLFlBQVksSUFBSSxHQUFHLENBQUM7WUFDeEMsTUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7WUFDbEQsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBUSxVQUFVLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7T0FHRztJQUNLLFlBQVksQ0FBQyxVQUFrQjtRQUNyQyxNQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLE1BQU0sa0JBQWtCLEdBQUcscUJBQXFCLENBQUM7UUFDakQsTUFBTSxnQkFBZ0IsR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUM7UUFDOUQsSUFBSSxnQkFBZ0IsS0FBSyxJQUFJLEVBQUU7WUFDN0IsT0FBTyxFQUFFLENBQUM7U0FDWDtRQUVELFVBQVU7UUFDVixNQUFNLGdCQUFnQixHQUFHLG9CQUFvQixDQUFDO1FBQzlDLGdCQUFnQixDQUFDLE9BQU8sQ0FBRSxlQUFlLENBQUMsRUFBRTtZQUMxQyxNQUFNLFdBQVcsR0FBRyxlQUFlLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLENBQUM7WUFDNUQsSUFBSSxXQUFXLElBQUksSUFBSSxJQUFJLFdBQVcsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNuRCxLQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFFRDs7T0FFRztJQUNLLFFBQVEsQ0FBQyxJQUFZLEVBQUUsT0FBWTtRQUN6QyxJQUFJLE9BQU8sWUFBWSxjQUFjLEtBQUssS0FBSyxFQUFFO1lBQy9DLE1BQU0sSUFBSSxLQUFLLENBQUMsd0JBQXdCLENBQUMsQ0FBQztTQUMzQztRQUNELE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBWSxFQUFFLEVBQUU7WUFDcEQsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUM7UUFDM0IsSUFBSSxJQUFJLEtBQUssUUFBUSxFQUFFO1lBQ3JCLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDckM7YUFBTSxJQUFJLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDN0IsT0FBTyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO0lBQ0gsQ0FBQztDQUNGO0FBRUQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIHNlc3Npb27lj5jph4/op6PmnpBcbiAqIEBhdXRob3IgV2l0dCA8aml3dEBpbnNwdXIuY29tPlxuICovXG5cbmltcG9ydCB7IENvbW1hbmRDb250ZXh0IH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcblxuLyoqXG4gKiDlkb3ku6Tlj5jph4/op6PmnpBcbiAqIHtDT01NQU5Efi9wYXJhbXMva2V5fVxuICoge0NPTU1BTkR+L3Jlc3VsdHMvdGFza05hbWV9XG4gKi9cbmNsYXNzIENvbW1hbmRWYXJpYWJsZVBhcnNlciBpbXBsZW1lbnRzIFZhcmlhYmxlUGFyc2VyIHtcblxuICAvKipcbiAgICog5p6E6YCg5Ye95pWwXG4gICAqL1xuICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICAvKipcbiAgICog6Kej5p6Q5Y+Y6YePXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOWPmOmHj++8muagvOW8j+W9ouWmgu+8mi9mcmFtZUlkL2NvbXBvbmVudElkL3N0YXRlTmFtZVxuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcbiAgICovXG4gIHB1YmxpYyBwYXJzZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IGFueSB7XG4gICAgY29uc3QgcGF0aHMgPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcblxuICAgIC8vIDHjgIHljZXkuKrnmoTooajovr7lvI/vvJrnm7TmjqXmsYLlgLxcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIGV4cHJlc3Npb24gPT09IGB7Q09NTUFORH4ke3BhdGhzWzBdfX1gKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShwYXRoc1swXSwgY29udGV4dCk7XG4gICAgfVxuXG4gICAgLy8gMuOAgeWFtuS7luaDheWGte+8muWtl+espuS4suabv+aNolxuICAgIHBhdGhzLmZvckVhY2goIHBhdGggPT4ge1xuICAgICAgY29uc3Qgc2VhcmNoVmFsdWUgPSBge0NPTU1BTkR+JHtwYXRofX1gO1xuICAgICAgY29uc3QgcmVwbGFjZVZhbHVlID0gdGhpcy5nZXRWYWx1ZShwYXRoLCBjb250ZXh0KTtcbiAgICAgIGV4cHJlc3Npb24gPSBleHByZXNzaW9uLnJlcGxhY2Uoc2VhcmNoVmFsdWUsIHJlcGxhY2VWYWx1ZSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gIGV4cHJlc3Npb247XG4gIH1cblxuICAvKipcbiAgICog5o+Q5Y+WU2Vzc2lvbuWPmOmHj+WQjVxuICAgKiDlj5jph4/moLzlvI/vvJp7fVxuICAgKi9cbiAgcHJpdmF0ZSBleHRyYWN0UGF0aHMoZXhwcmVzc2lvbjogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHBhdGhzOiBzdHJpbmdbXSAgPSBbXTtcblxuICAgIC8vIOafpeaJvuaJgOacieeahHVpU3RhdGXlj5jph4/lrZfnrKbkuLJcbiAgICBjb25zdCBVSV9TVEFURV9QQVRURVJOX0cgPSAvXFx7Q09NTUFORH4oXFxTKz8pXFx9L2c7XG4gICAgY29uc3QgdWlTdGF0ZVZhcmlhYmxlcyA9IGV4cHJlc3Npb24ubWF0Y2goVUlfU1RBVEVfUEFUVEVSTl9HKTtcbiAgICBpZiAodWlTdGF0ZVZhcmlhYmxlcyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxuICAgIGNvbnN0IFVJX1NUQVRFX1BBVFRFUk4gPSAvXFx7Q09NTUFORH4oXFxTKz8pXFx9LztcbiAgICB1aVN0YXRlVmFyaWFibGVzLmZvckVhY2goIHNlc3Npb25WYXJpYWJsZSA9PiAge1xuICAgICAgY29uc3QgcGF0aE1hdGNoZXMgPSBzZXNzaW9uVmFyaWFibGUubWF0Y2goVUlfU1RBVEVfUEFUVEVSTik7XG4gICAgICBpZiAocGF0aE1hdGNoZXMgIT0gbnVsbCAmJiBwYXRoTWF0Y2hlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcGF0aHMucHVzaChwYXRoTWF0Y2hlc1sxXSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gcGF0aHM7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+WVUlTdGF0ZVxuICAgKi9cbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGNvbnRleHQ6IGFueSkge1xuICAgIGlmIChjb250ZXh0IGluc3RhbmNlb2YgQ29tbWFuZENvbnRleHQgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+W9k+WJjeS4iuS4i+aWh+S4jeaUr+aMgUNPTU1BTkTlj5jph4/vvIzor7fmo4Dmn6XvvIEnKTtcbiAgICB9XG4gICAgY29uc3QgcGFydHMgPSBwYXRoLnNwbGl0KCcvJykuZmlsdGVyKChwYXJ0OiBzdHJpbmcpID0+IHtcbiAgICAgIHJldHVybiBwYXJ0ICE9PSAnJztcbiAgICB9KTtcblxuICAgIGNvbnN0IFt0eXBlLCBuYW1lXSA9IHBhcnRzO1xuICAgIGlmICh0eXBlID09PSAncGFyYW1zJykge1xuICAgICAgcmV0dXJuIGNvbnRleHQuY29tbWFuZC5wYXJhbXNbbmFtZV07XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSAncmVzdWx0cycpIHtcbiAgICAgIHJldHVybiBjb250ZXh0LnJlc3VsdHNbbmFtZV07XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IENvbW1hbmRWYXJpYWJsZVBhcnNlciB9O1xuIl19