class StringUtil {
    /**
       * 字符串格式化
       */
    static format(value, options) {
        const { maxLenght, prefix = '', suffix = '', ellipsis = '...' } = options;
        if (!maxLenght)
            return value;
        if (!value)
            return value;
        if (maxLenght && value.length > maxLenght) {
            value = value.slice(0, maxLenght);
            return prefix + value + suffix + ellipsis;
        }
        return prefix + value + suffix;
    }
    static filterSearchValue(value, options) {
        if (value == undefined || value == null || value == '') {
            return value;
        }
        value = value.trim();
        if (options == undefined || options == null || options == '') {
            value = value.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            return value;
        }
        if (options && options.text == "") {
            value = value.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            return "<p>" + value + "</p>";
        }
        if (typeof options === 'string') {
            const re = new RegExp(`${options}`, 'g');
            let newStr = value.replace(re, `##s1p1##${options}##s2p2##`);
            newStr = newStr.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            newStr = newStr.replace(/##s1p1##/g, '<span style="color:red">');
            newStr = newStr.replace(/##s2p2##/g, "</span>");
            return `<p>${newStr}</p>`;
        }
        if (typeof options === 'object') {
            const { text, style } = options;
            const re = new RegExp(`${text}`, 'g');
            let newStr = value.replace(re, "##s1p1##" + style + "##s2p2##" + text + "##s3p3##");
            newStr = newStr.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            newStr = newStr.replace(/##s1p1##/g, "<span style=\"");
            newStr = newStr.replace(/##s2p2##/g, "\">");
            newStr = newStr.replace(/##s3p3##/g, "</span>");
            return `<p>${newStr}</p>`;
        }
    }
}
export { StringUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvc3RyaW5nX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVO0lBRWQ7O1NBRUs7SUFDRSxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWEsRUFBRSxPQUFPO1FBQ3pDLE1BQU0sRUFBRSxTQUFTLEVBQUUsTUFBTSxHQUFHLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxFQUFFLFFBQVEsR0FBRyxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUM7UUFDMUUsSUFBSSxDQUFDLFNBQVM7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSztZQUFFLE9BQU8sS0FBSyxDQUFDO1FBQ3pCLElBQUksU0FBUyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsU0FBUyxFQUFFO1lBQ3pDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQTtZQUNqQyxPQUFPLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxHQUFHLFFBQVEsQ0FBQztTQUMzQztRQUNELE9BQU8sTUFBTSxHQUFHLEtBQUssR0FBRyxNQUFNLENBQUM7SUFDakMsQ0FBQztJQUVNLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxLQUFVLEVBQUUsT0FBTztRQUNqRCxJQUFJLEtBQUssSUFBSSxTQUFTLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLElBQUksRUFBRSxFQUFFO1lBQ3RELE9BQU8sS0FBSyxDQUFDO1NBQ2Q7UUFDRCxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3JCLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxPQUFPLElBQUksSUFBSSxJQUFJLE9BQU8sSUFBSSxFQUFFLEVBQUU7WUFDNUQsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4SCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUU7WUFDakMsS0FBSyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN4SCxPQUFPLEtBQUssR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO1NBQy9CO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxPQUFPLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN6QyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxXQUFXLE9BQU8sVUFBVSxDQUFDLENBQUM7WUFDN0QsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxSCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsMEJBQTBCLENBQUMsQ0FBQztZQUNqRSxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFDaEQsT0FBTyxNQUFNLE1BQU0sTUFBTSxDQUFDO1NBQzNCO1FBQ0QsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxPQUFPLENBQUM7WUFDaEMsTUFBTSxFQUFFLEdBQUcsSUFBSSxNQUFNLENBQUMsR0FBRyxJQUFJLEVBQUUsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxVQUFVLEdBQUcsS0FBSyxHQUFHLFVBQVUsR0FBRyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFDcEYsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxSCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2RCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELE9BQU8sTUFBTSxNQUFNLE1BQU0sQ0FBQztTQUMzQjtJQUNILENBQUM7Q0FDRjtBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFN0cmluZ1V0aWwge1xuXG4gIC8qKlxuICAgICAqIOWtl+espuS4suagvOW8j+WMllxuICAgICAqL1xuICBwdWJsaWMgc3RhdGljIGZvcm1hdCh2YWx1ZTogc3RyaW5nLCBvcHRpb25zKSB7XG4gICAgY29uc3QgeyBtYXhMZW5naHQsIHByZWZpeCA9ICcnLCBzdWZmaXggPSAnJywgZWxsaXBzaXMgPSAnLi4uJyB9ID0gb3B0aW9ucztcbiAgICBpZiAoIW1heExlbmdodCkgcmV0dXJuIHZhbHVlO1xuICAgIGlmICghdmFsdWUpIHJldHVybiB2YWx1ZTtcbiAgICBpZiAobWF4TGVuZ2h0ICYmIHZhbHVlLmxlbmd0aCA+IG1heExlbmdodCkge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBtYXhMZW5naHQpXG4gICAgICByZXR1cm4gcHJlZml4ICsgdmFsdWUgKyBzdWZmaXggKyBlbGxpcHNpcztcbiAgICB9XG4gICAgcmV0dXJuIHByZWZpeCArIHZhbHVlICsgc3VmZml4O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmaWx0ZXJTZWFyY2hWYWx1ZSh2YWx1ZTogYW55LCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbHVlID09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09ICcnKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIHZhbHVlID0gdmFsdWUudHJpbSgpO1xuICAgIGlmIChvcHRpb25zID09IHVuZGVmaW5lZCB8fCBvcHRpb25zID09IG51bGwgfHwgb3B0aW9ucyA9PSAnJykge1xuICAgICAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKC9bPD4mXCJdL2csIGZ1bmN0aW9uIChjKSB7IHJldHVybiB7ICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JywgJyYnOiAnJmFtcDsnLCAnXCInOiAnJnF1b3Q7JyB9W2NdOyB9KTtcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy50ZXh0ID09IFwiXCIpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWzw+JlwiXS9nLCBmdW5jdGlvbiAoYykgeyByZXR1cm4geyAnPCc6ICcmbHQ7JywgJz4nOiAnJmd0OycsICcmJzogJyZhbXA7JywgJ1wiJzogJyZxdW90OycgfVtjXTsgfSk7XG4gICAgICByZXR1cm4gXCI8cD5cIiArIHZhbHVlICsgXCI8L3A+XCI7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgJHtvcHRpb25zfWAsICdnJyk7XG4gICAgICBsZXQgbmV3U3RyID0gdmFsdWUucmVwbGFjZShyZSwgYCMjczFwMSMjJHtvcHRpb25zfSMjczJwMiMjYCk7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvWzw+JlwiXS9nLCBmdW5jdGlvbiAoYykgeyByZXR1cm4geyAnPCc6ICcmbHQ7JywgJz4nOiAnJmd0OycsICcmJzogJyZhbXA7JywgJ1wiJzogJyZxdW90OycgfVtjXTsgfSk7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvIyNzMXAxIyMvZywgJzxzcGFuIHN0eWxlPVwiY29sb3I6cmVkXCI+Jyk7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvIyNzMnAyIyMvZywgXCI8L3NwYW4+XCIpO1xuICAgICAgcmV0dXJuIGA8cD4ke25ld1N0cn08L3A+YDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgY29uc3QgeyB0ZXh0LCBzdHlsZSB9ID0gb3B0aW9ucztcbiAgICAgIGNvbnN0IHJlID0gbmV3IFJlZ0V4cChgJHt0ZXh0fWAsICdnJyk7XG4gICAgICBsZXQgbmV3U3RyID0gdmFsdWUucmVwbGFjZShyZSwgXCIjI3MxcDEjI1wiICsgc3R5bGUgKyBcIiMjczJwMiMjXCIgKyB0ZXh0ICsgXCIjI3MzcDMjI1wiKTtcbiAgICAgIG5ld1N0ciA9IG5ld1N0ci5yZXBsYWNlKC9bPD4mXCJdL2csIGZ1bmN0aW9uIChjKSB7IHJldHVybiB7ICc8JzogJyZsdDsnLCAnPic6ICcmZ3Q7JywgJyYnOiAnJmFtcDsnLCAnXCInOiAnJnF1b3Q7JyB9W2NdOyB9KTtcbiAgICAgIG5ld1N0ciA9IG5ld1N0ci5yZXBsYWNlKC8jI3MxcDEjIy9nLCBcIjxzcGFuIHN0eWxlPVxcXCJcIik7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvIyNzMnAyIyMvZywgXCJcXFwiPlwiKTtcbiAgICAgIG5ld1N0ciA9IG5ld1N0ci5yZXBsYWNlKC8jI3MzcDMjIy9nLCBcIjwvc3Bhbj5cIik7XG4gICAgICByZXR1cm4gYDxwPiR7bmV3U3RyfTwvcD5gO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgeyBTdHJpbmdVdGlsIH07XG4iXX0=