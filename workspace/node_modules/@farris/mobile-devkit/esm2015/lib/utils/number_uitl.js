class NumberUtil {
    /**
       * 数字格式化
       * {
       *   precision: 2,
       *   decimal: true,
       *   thousand: ','
       *   prefix: '',
       *   suffix: ''
       * }
       */
    static format(value, options) {
        // 参数处理
        let decimals = (options.precision || options.precision === 0) ? options.precision : 2;
        let decimalPoint = options.decimal || '.';
        let thousandsSep = options.thousand || '';
        let prefix = options.prefix || '';
        let suffix = options.suffix || '';
        let prefixType = options.prefixType;
        if (prefixType == "dynamic" && options.prefix) {
            // 表示前缀为一个函数  那么执行函数定义
            let prefixFunc = new Function("return " + options.prefix);
            prefix = prefixFunc()(options.sourceData);
        }
        value = (value + '').replace(/[^0-9+-Ee.]/g, '');
        let s;
        // 处理精度
        let toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        };
        s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');
        // 处理千分位
        if (thousandsSep) {
            let pattern = /(-?\d+)(\d{3})/;
            while (pattern.test(s[0])) {
                s[0] = s[0].replace(pattern, "$1" + thousandsSep + "$2");
            }
            if ((s[1] || '').length < decimals) {
                s[1] = s[1] || '';
                s[1] += new Array(decimals - s[1].length + 1).join('0');
            }
        }
        let formatedValue = s.join(decimalPoint);
        formatedValue = `${prefix}${formatedValue}${suffix}`;
        return formatedValue;
    }
}
export { NumberUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbnVtYmVyX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxVQUFVO0lBRWQ7Ozs7Ozs7OztTQVNLO0lBQ0UsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsT0FBTztRQUVqQyxPQUFPO1FBQ1AsSUFBSSxRQUFRLEdBQUcsQ0FBQyxPQUFPLENBQUMsU0FBUyxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN0RixJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsT0FBTyxJQUFJLEdBQUcsQ0FBQztRQUMxQyxJQUFJLFlBQVksR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQztRQUMxQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxJQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztRQUVsQyxJQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBVSxDQUFDO1FBQ3BDLElBQUksVUFBVSxJQUFJLFNBQVMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lBQzdDLHNCQUFzQjtZQUN0QixJQUFJLFVBQVUsR0FBRyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzFELE1BQU0sR0FBRyxVQUFVLEVBQUUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDM0M7UUFFRCxLQUFLLEdBQUcsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsQ0FBQztRQUVOLE9BQU87UUFDUCxJQUFJLFVBQVUsR0FBRyxVQUFVLENBQUMsRUFBRSxJQUFJO1lBQ2hDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNCLE9BQU8sRUFBRSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ2xHLENBQUMsQ0FBQztRQUNGLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxJQUFJLFFBQVEsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFckcsUUFBUTtRQUNSLElBQUksWUFBWSxFQUFFO1lBQ2hCLElBQUksT0FBTyxHQUFHLGdCQUFnQixDQUFDO1lBQy9CLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDekIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLElBQUksR0FBRyxZQUFZLEdBQUcsSUFBSSxDQUFDLENBQUM7YUFDMUQ7WUFDRCxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLE1BQU0sR0FBRyxRQUFRLEVBQUU7Z0JBQ2xDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUNsQixDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxLQUFLLENBQUMsUUFBUSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3pEO1NBQ0Y7UUFFRCxJQUFJLGFBQWEsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ3pDLGFBQWEsR0FBRyxHQUFHLE1BQU0sR0FBRyxhQUFhLEdBQUcsTUFBTSxFQUFFLENBQUM7UUFDckQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztDQUVGO0FBRUQsT0FBTyxFQUFFLFVBQVUsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiY2xhc3MgTnVtYmVyVXRpbCB7XG5cbiAgLyoqXG4gICAgICog5pWw5a2X5qC85byP5YyWXG4gICAgICoge1xuICAgICAqICAgcHJlY2lzaW9uOiAyLFxuICAgICAqICAgZGVjaW1hbDogdHJ1ZSxcbiAgICAgKiAgIHRob3VzYW5kOiAnLCdcbiAgICAgKiAgIHByZWZpeDogJycsXG4gICAgICogICBzdWZmaXg6ICcnXG4gICAgICogfVxuICAgICAqL1xuICBwdWJsaWMgc3RhdGljIGZvcm1hdCh2YWx1ZSwgb3B0aW9ucykge1xuXG4gICAgLy8g5Y+C5pWw5aSE55CGXG4gICAgbGV0IGRlY2ltYWxzID0gKG9wdGlvbnMucHJlY2lzaW9uIHx8IG9wdGlvbnMucHJlY2lzaW9uID09PSAwKSA/IG9wdGlvbnMucHJlY2lzaW9uIDogMjtcbiAgICBsZXQgZGVjaW1hbFBvaW50ID0gb3B0aW9ucy5kZWNpbWFsIHx8ICcuJztcbiAgICBsZXQgdGhvdXNhbmRzU2VwID0gb3B0aW9ucy50aG91c2FuZCB8fCAnJztcbiAgICBsZXQgcHJlZml4ID0gb3B0aW9ucy5wcmVmaXggfHwgJyc7XG4gICAgbGV0IHN1ZmZpeCA9IG9wdGlvbnMuc3VmZml4IHx8ICcnO1xuXG4gICAgbGV0IHByZWZpeFR5cGUgPSBvcHRpb25zLnByZWZpeFR5cGU7XG4gICAgaWYgKHByZWZpeFR5cGUgPT0gXCJkeW5hbWljXCIgJiYgb3B0aW9ucy5wcmVmaXgpIHtcbiAgICAgIC8vIOihqOekuuWJjee8gOS4uuS4gOS4quWHveaVsCAg6YKj5LmI5omn6KGM5Ye95pWw5a6a5LmJXG4gICAgICBsZXQgcHJlZml4RnVuYyA9IG5ldyBGdW5jdGlvbihcInJldHVybiBcIiArIG9wdGlvbnMucHJlZml4KTtcbiAgICAgIHByZWZpeCA9IHByZWZpeEZ1bmMoKShvcHRpb25zLnNvdXJjZURhdGEpO1xuICAgIH1cblxuICAgIHZhbHVlID0gKHZhbHVlICsgJycpLnJlcGxhY2UoL1teMC05Ky1FZS5dL2csICcnKTtcbiAgICBsZXQgcztcblxuICAgIC8vIOWkhOeQhueyvuW6plxuICAgIGxldCB0b0ZpeGVkRml4ID0gZnVuY3Rpb24gKG4sIHByZWMpIHtcbiAgICAgIHZhciBrID0gTWF0aC5wb3coMTAsIHByZWMpO1xuICAgICAgcmV0dXJuICcnICsgcGFyc2VGbG9hdChNYXRoLnJvdW5kKHBhcnNlRmxvYXQoKG4gKiBrKS50b0ZpeGVkKHByZWMgKiAyKSkpLnRvRml4ZWQocHJlYyAqIDIpKSAvIGs7XG4gICAgfTtcbiAgICBzID0gKChkZWNpbWFscyB8fCBkZWNpbWFscyA9PT0gMCkgPyB0b0ZpeGVkRml4KHZhbHVlLCBkZWNpbWFscykgOiAnJyArIE1hdGgucm91bmQodmFsdWUpKS5zcGxpdCgnLicpO1xuXG4gICAgLy8g5aSE55CG5Y2D5YiG5L2NXG4gICAgaWYgKHRob3VzYW5kc1NlcCkge1xuICAgICAgbGV0IHBhdHRlcm4gPSAvKC0/XFxkKykoXFxkezN9KS87XG4gICAgICB3aGlsZSAocGF0dGVybi50ZXN0KHNbMF0pKSB7XG4gICAgICAgIHNbMF0gPSBzWzBdLnJlcGxhY2UocGF0dGVybiwgXCIkMVwiICsgdGhvdXNhbmRzU2VwICsgXCIkMlwiKTtcbiAgICAgIH1cbiAgICAgIGlmICgoc1sxXSB8fCAnJykubGVuZ3RoIDwgZGVjaW1hbHMpIHtcbiAgICAgICAgc1sxXSA9IHNbMV0gfHwgJyc7XG4gICAgICAgIHNbMV0gKz0gbmV3IEFycmF5KGRlY2ltYWxzIC0gc1sxXS5sZW5ndGggKyAxKS5qb2luKCcwJyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGZvcm1hdGVkVmFsdWUgPSBzLmpvaW4oZGVjaW1hbFBvaW50KTtcbiAgICBmb3JtYXRlZFZhbHVlID0gYCR7cHJlZml4fSR7Zm9ybWF0ZWRWYWx1ZX0ke3N1ZmZpeH1gO1xuICAgIHJldHVybiBmb3JtYXRlZFZhbHVlO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgTnVtYmVyVXRpbCB9OyJdfQ==