import { format, isDate, parseISO, isEqual, compareAsc } from 'date-fns';
import dayjs from 'dayjs';
import IsBetween from 'dayjs/plugin/IsBetween';
import relativeTime from 'dayjs/plugin/relativeTime';
import Calendar from 'dayjs/plugin/calendar';
import 'dayjs/locale/zh-cn';
dayjs.locale('zh-cn');
/**
 * 日期处理类
 */
class DateUtil {
    /**
     * 将日期（或日期字符串）转换为完整的的ISO格式的字符串
     */
    static formatISO(dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const dateObj = this.parse(dateOrDateString);
        return format(dateObj, this.defaultISOFormat);
    }
    /**
     * 将日期（或日期字符串）转换为指定格式的字符串
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     * @param dateFormat 日期格式字符串
     */
    static format(dateOrDateString, dateFormat) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const dateObj = this.parse(dateOrDateString);
        dateFormat = dateFormat ? dateFormat : this.defaultDisplayFormat;
        return format(dateObj, dateFormat);
    }
    static dateShow(dateOrDateString, type) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        if (!type || "" === type) {
            return;
        }
        return this[type] && this[type](dateOrDateString);
    }
    static dateOperation(dateOrDateString, options) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return this.emptyISODateTimeString;
        }
        const { type = "", option } = options;
        if (!type || "" === type) {
            return;
        }
        if ('isSame' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isBefore' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isAfter' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['granularity']);
        }
        if ('isBetween' === type) {
            return this[type] && this[type](dateOrDateString, options['targetDate'], options['targetDate2'], options['granularity'], options['contains']);
        }
        if (!option) {
            return this[type] && this[type](dateOrDateString);
        }
        return this[type] && this[type](dateOrDateString, option);
    }
    static relativeTime(dateOrDateString, option) {
        dayjs.extend(relativeTime);
        const dateObj = dayjs(dateOrDateString);
        if (!option) {
            return dayjs(dateObj).fromNow();
        }
        return dayjs(dateObj).fromNow(option);
    }
    static isToday(dateOrDateString) {
        const todayDate = new Date();
        const dateObj = dayjs(dateOrDateString);
        return this.isSame(dateObj, todayDate, 'date');
    }
    static calendar(dateOrDateString, option) {
        const dateObj = dayjs(dateOrDateString);
        dayjs.extend(Calendar);
        if (option) {
            return dayjs().calendar(dateObj, Object.assign({}, option));
        }
        return dayjs().calendar(dateObj, {
            sameDay: '[今天] HH:mm',
            nextDay: '[明天] HH:mm',
            lastDay: '[昨天] HH:mm',
            sameElse: 'YYYY-MM-DD'
        });
    }
    /**
     * 创建日期
     * @param dateOrDateString 日期对象或符合ISO8601规范的日期字符串
     */
    static parse(dateOrDateString) {
        if (this.isEmptyDateOrDateString(dateOrDateString) === true) {
            return null;
        }
        if (this.isDate(dateOrDateString) === true) {
            return dateOrDateString;
        }
        return parseISO(dateOrDateString);
    }
    /**
     * 是否是日期对象
     */
    static isDate(date) {
        return isDate(date);
    }
    /**
     * 是否是空日期或者空日期字符串
     * @param dateOrDateString 日期或日期字符串
     */
    static isEmptyDateOrDateString(dateOrDateString) {
        if (this.isDate(dateOrDateString) === true) {
            return this.isEmptyDate(dateOrDateString);
        }
        return this.isEmptyDateString(dateOrDateString);
    }
    /**
     * 是否为空日期字符串
     * @param date 日期对象
     */
    static isEmptyDate(date) {
        if (!date) {
            return true;
        }
        return false;
    }
    /**
     * 是否是空日期字符串
     * @param dateString 日期字符串
     */
    static isEmptyDateString(dateString) {
        if (!dateString || dateString.startsWith('0001-01-01') === true) {
            return true;
        }
        return false;
    }
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 相等返回true，否则返回false
     */
    static isEqual(dateOrDateString1, dateOrDateString2) {
        const dateObj1 = this.parse(dateOrDateString1);
        const dateObj2 = this.parse(dateOrDateString2);
        if (dateObj1 === dateObj2) {
            return true;
        }
        return isEqual(dateObj1, dateObj2);
    }
    /**
     * 两个日期是否相等
     * @param dateOrDateString1 日期对象或字符串
     * @param dateOrDateString1 日期对象或字符串
     * @return 返回-1、0、1
     */
    static compare(dateOrDateString1, dateOrDateString2) {
        const dateObj1 = this.parse(dateOrDateString1);
        const dateObj2 = this.parse(dateOrDateString2);
        if (this.isEqual(dateObj1, dateObj2) === true) {
            return 0;
        }
        // 处理解析后为null的场景，null比所有有效日期小
        if (!dateObj1 && this.isDate(dateObj2) === true) {
            return -1;
        }
        if (!dateObj2 && this.isDate(dateObj1) === true) {
            return 1;
        }
        return compareAsc(dateObj1, dateObj2);
    }
    /**
     *
     * @param currentDate 当前日期
     * @param targetDate 目标日期
     * @param type 比较类型 date	D	天00:00 day	d	星期00:00 month	M	月第一天00:00 year	y	1月1日00点 week	w	周第一天00:00hour	h	00:00:00minute	m	00:00second	s	00millisecond	ms	0
     * @returns
     */
    static isSame(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isSame(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isSame(dayjs(targetDate));
    }
    /**
     *
     * @param currentDate 当前日期
     * @param targetDate 目标日期
     * @returns boolean
     */
    static isBefore(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isBefore(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isBefore(dayjs(targetDate));
    }
    /**
   *
   * @param currentDate 当前日期
   * @param targetDate 目标日期
   * @returns boolean
   */
    static isAfter(currentDate, targetDate, type) {
        if (type) {
            return dayjs(currentDate).isAfter(dayjs(targetDate), type);
        }
        return dayjs(currentDate).isAfter(dayjs(targetDate));
    }
    /**
     *
     * @param currentDate
     * @param targetDate1
     * @param targetDate2
     * @returns
     */
    static isBetween(currentDate, targetDate1, targetDate2, type, contains) {
        dayjs.extend(IsBetween);
        if (type) {
            return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), type, contains);
        }
        return dayjs(currentDate).isBetween(dayjs(targetDate1), dayjs(targetDate2), null, contains);
    }
}
/**
 * 空日期字符串（N版）
 * @todo：兼容服务器端，不应该在devkit体现这种兼容，待移除
 */
// static emptyDateTimeString = '0001-01-01T00:00:00';
DateUtil.emptyDateTimeString = null;
/**
 * 默认空日期字符串（ISO标准格式）
 */
// static emptyISODateTimeString = '0001-01-01T00:00:00+00:00';
DateUtil.emptyISODateTimeString = null;
/**
 * 默认日期听格式
 */
DateUtil.defaultISOFormat = `yyyy-MM-dd'T'HH:mm:ssxxx`;
DateUtil.defaultDisplayFormat = 'yyyy-MM-dd HH:mm:ss';
DateUtil.defaultDateFormat = 'yyyy-MM-dd';
DateUtil.defaultTimeFormat = 'HH:mm:ss';
export { DateUtil };
//# sourceMappingURL=data:application/json;base64,