import { BindingPropertyType, PropertyUtil } from '../../binding-data/index';
import { BindingPathConverter } from './binding_path_converter';
/**
 * EntityPath转换器
 */
class EntityPathConverter {
    /**
     * 转换为Entity可识别的路径
     * 根：[]
     * 主表：['id:xxx', 'name'],
     * 关联：['id:xxx', 'deptInfo', 'id:xxx', 'name']
     * UDT: ['id:xxx', 'updateInfo', ':', 'createdOn']
     * 从表：['id:xxx', 'edus', 'id:xxx', 'name'],
     * 从从表：['id:xxx', 'edus', 'id:xxx', 'grades', 'id:xxx', 'name']
     */
    static toEntityPathArray(bindingPathString, bindingData) {
        const bindingPathArray = BindingPathConverter.toBindingPathArray(bindingPathString);
        const entityPathArray = [];
        if (bindingPathArray.length === 0) {
            return entityPathArray;
        }
        // 根节点
        let currentBindingObject = bindingData.list.currentItem;
        entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
        bindingPathArray.forEach((propName) => {
            const propInfo = PropertyUtil.getPropertyByName(currentBindingObject.properties, propName);
            switch (propInfo.type) {
                case BindingPropertyType.Plain:
                    entityPathArray.push(propName);
                    break;
                case BindingPropertyType.Object:
                    currentBindingObject = currentBindingObject[propName];
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                case BindingPropertyType.List:
                    const currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    entityPathArray.push(propName);
                    entityPathArray.push(this.createPrimaryKeyPath(currentBindingObject.primaryKey, currentBindingObject.primaryKeyValue));
                    break;
                default:
                    break;
            }
        });
        return entityPathArray;
    }
    /**
     * 创建路径中的主键部分
     */
    static createPrimaryKeyPath(primaryKey, primaryKeyValue) {
        return `${primaryKey}:${primaryKeyValue}`;
    }
}
export { EntityPathConverter };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X3BhdGhfY29udmVydGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGEtcGF0aC9lbnRpdHlfcGF0aF9jb252ZXJ0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNRLG1CQUFtQixFQUFFLFlBQVksRUFDL0MsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRTs7R0FFRztBQUNILE1BQU0sbUJBQW1CO0lBRXZCOzs7Ozs7OztPQVFHO0lBQ0ksTUFBTSxDQUFDLGlCQUFpQixDQUFDLGlCQUF5QixFQUFFLFdBQXdCO1FBQ2pGLE1BQU0sZ0JBQWdCLEdBQWEsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUM5RixNQUFNLGVBQWUsR0FBYSxFQUFFLENBQUM7UUFFckMsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ2pDLE9BQU8sZUFBZSxDQUFDO1NBQ3hCO1FBRUQsTUFBTTtRQUNOLElBQUksb0JBQW9CLEdBQUcsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDeEQsZUFBZSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FDakcsQ0FBQztRQUVGLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDLFFBQWdCLEVBQUUsRUFBRTtZQUM1QyxNQUFNLFFBQVEsR0FBRyxZQUFZLENBQUMsaUJBQWlCLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1lBQzNGLFFBQVEsUUFBUSxDQUFDLElBQUksRUFBRTtnQkFDckIsS0FBSyxtQkFBbUIsQ0FBQyxLQUFLO29CQUM1QixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUMvQixNQUFNO2dCQUNSLEtBQUssbUJBQW1CLENBQUMsTUFBTTtvQkFDN0Isb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQ3RELGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQy9CLGVBQWUsQ0FBQyxJQUFJLENBQ2xCLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQ2pHLENBQUM7b0JBQ0YsTUFBTTtnQkFDUixLQUFLLG1CQUFtQixDQUFDLElBQUk7b0JBQzNCLE1BQU0sa0JBQWtCLEdBQUcsb0JBQW9CLENBQUMsUUFBUSxDQUFDLENBQUM7b0JBQzFELG9CQUFvQixHQUFHLGtCQUFrQixDQUFDLFdBQVcsQ0FBQztvQkFDdEQsZUFBZSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztvQkFDL0IsZUFBZSxDQUFDLElBQUksQ0FDbEIsSUFBSSxDQUFDLG9CQUFvQixDQUFDLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsQ0FDakcsQ0FBQztvQkFDRixNQUFNO2dCQUNSO29CQUNJLE1BQU07YUFDWDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLG9CQUFvQixDQUFDLFVBQWtCLEVBQUUsZUFBdUI7UUFDNUUsT0FBTyxHQUFHLFVBQVUsSUFBSSxlQUFlLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEJpbmRpbmdEYXRhLCBCaW5kaW5nUHJvcGVydHlUeXBlLCBQcm9wZXJ0eVV0aWxcbn0gZnJvbSAnLi4vLi4vYmluZGluZy1kYXRhL2luZGV4JztcbmltcG9ydCB7IEJpbmRpbmdQYXRoQ29udmVydGVyIH0gZnJvbSAnLi9iaW5kaW5nX3BhdGhfY29udmVydGVyJztcblxuLyoqXG4gKiBFbnRpdHlQYXRo6L2s5o2i5ZmoXG4gKi9cbmNsYXNzIEVudGl0eVBhdGhDb252ZXJ0ZXIge1xuXG4gIC8qKlxuICAgKiDovazmjaLkuLpFbnRpdHnlj6/or4bliKvnmoTot6/lvoRcbiAgICog5qC577yaW11cbiAgICog5Li76KGo77yaWydpZDp4eHgnLCAnbmFtZSddLFxuICAgKiDlhbPogZTvvJpbJ2lkOnh4eCcsICdkZXB0SW5mbycsICdpZDp4eHgnLCAnbmFtZSddXG4gICAqIFVEVDogWydpZDp4eHgnLCAndXBkYXRlSW5mbycsICc6JywgJ2NyZWF0ZWRPbiddXG4gICAqIOS7juihqO+8mlsnaWQ6eHh4JywgJ2VkdXMnLCAnaWQ6eHh4JywgJ25hbWUnXSxcbiAgICog5LuO5LuO6KGo77yaWydpZDp4eHgnLCAnZWR1cycsICdpZDp4eHgnLCAnZ3JhZGVzJywgJ2lkOnh4eCcsICduYW1lJ11cbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgdG9FbnRpdHlQYXRoQXJyYXkoYmluZGluZ1BhdGhTdHJpbmc6IHN0cmluZywgYmluZGluZ0RhdGE6IEJpbmRpbmdEYXRhKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IGJpbmRpbmdQYXRoQXJyYXk6IHN0cmluZ1tdID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KGJpbmRpbmdQYXRoU3RyaW5nKTtcbiAgICBjb25zdCBlbnRpdHlQYXRoQXJyYXk6IHN0cmluZ1tdID0gW107XG5cbiAgICBpZiAoYmluZGluZ1BhdGhBcnJheS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBlbnRpdHlQYXRoQXJyYXk7XG4gICAgfVxuXG4gICAgLy8g5qC56IqC54K5XG4gICAgbGV0IGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gYmluZGluZ0RhdGEubGlzdC5jdXJyZW50SXRlbTtcbiAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChcbiAgICAgIHRoaXMuY3JlYXRlUHJpbWFyeUtleVBhdGgoY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleSwgY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKVxuICAgICk7XG5cbiAgICBiaW5kaW5nUGF0aEFycmF5LmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHByb3BJbmZvID0gUHJvcGVydHlVdGlsLmdldFByb3BlcnR5QnlOYW1lKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByb3BlcnRpZXMsIHByb3BOYW1lKTtcbiAgICAgIHN3aXRjaCAocHJvcEluZm8udHlwZSkge1xuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuUGxhaW46XG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2gocHJvcE5hbWUpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIEJpbmRpbmdQcm9wZXJ0eVR5cGUuT2JqZWN0OlxuICAgICAgICAgIGN1cnJlbnRCaW5kaW5nT2JqZWN0ID0gY3VycmVudEJpbmRpbmdPYmplY3RbcHJvcE5hbWVdO1xuICAgICAgICAgIGVudGl0eVBhdGhBcnJheS5wdXNoKHByb3BOYW1lKTtcbiAgICAgICAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChcbiAgICAgICAgICAgIHRoaXMuY3JlYXRlUHJpbWFyeUtleVBhdGgoY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleSwgY3VycmVudEJpbmRpbmdPYmplY3QucHJpbWFyeUtleVZhbHVlKVxuICAgICAgICAgICk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQmluZGluZ1Byb3BlcnR5VHlwZS5MaXN0OlxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRCaW5kaW5nTGlzdCA9IGN1cnJlbnRCaW5kaW5nT2JqZWN0W3Byb3BOYW1lXTtcbiAgICAgICAgICBjdXJyZW50QmluZGluZ09iamVjdCA9IGN1cnJlbnRCaW5kaW5nTGlzdC5jdXJyZW50SXRlbTtcbiAgICAgICAgICBlbnRpdHlQYXRoQXJyYXkucHVzaChwcm9wTmFtZSk7XG4gICAgICAgICAgZW50aXR5UGF0aEFycmF5LnB1c2goXG4gICAgICAgICAgICB0aGlzLmNyZWF0ZVByaW1hcnlLZXlQYXRoKGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXksIGN1cnJlbnRCaW5kaW5nT2JqZWN0LnByaW1hcnlLZXlWYWx1ZSlcbiAgICAgICAgICApO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZW50aXR5UGF0aEFycmF5O1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uui3r+W+hOS4reeahOS4u+mUrumDqOWIhlxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBjcmVhdGVQcmltYXJ5S2V5UGF0aChwcmltYXJ5S2V5OiBzdHJpbmcsIHByaW1hcnlLZXlWYWx1ZTogc3RyaW5nKSB7XG4gICAgcmV0dXJuIGAke3ByaW1hcnlLZXl9OiR7cHJpbWFyeUtleVZhbHVlfWA7XG4gIH1cblxufVxuXG5leHBvcnQgeyBFbnRpdHlQYXRoQ29udmVydGVyIH07XG4iXX0=