import { from, of } from 'rxjs';
import { switchMap } from 'rxjs/operators';
import { DateUtil } from '../utils/date_util';
import { isObservable } from '../utils/is-observable';
import { VariableParseService } from '../variable/index';
/**
 * 验证器工厂
 */
class ValidatorFactory {
    /**
     * 创建适配器
     */
    static create(validRules) {
        let validatorFn = [];
        if (Array.isArray(validRules) && validRules.length > 1) {
            validRules.forEach((validRule) => {
                validatorFn.push(this.initValidRuleFn(validRule));
            });
        }
        else if (Array.isArray(validRules) && validRules.length === 1) {
            validatorFn.push(this.initValidRuleFn(validRules[0]));
        }
        else {
            validatorFn.push(this.initValidRuleFn(validRules));
        }
        return validatorFn;
    }
    static initValidRuleFn(validRule) {
        const { type, constraints, message } = validRule;
        switch (type) {
            case 'required':
                return (v, context) => {
                    if (constraints[0] !== true) {
                        const parseService = context.injector.get(VariableParseService);
                        const parsedArgs = parseService.parse(constraints[0], context);
                        if (parsedArgs === true) {
                            if (null === v || undefined === v || '' === v) {
                                return { type, passing: false, message: message || '必填' };
                            }
                            else {
                                return { type, passing: true, message: '' };
                            }
                        }
                    }
                    if (constraints[0] === true) {
                        if (null === v || undefined === v || '' === v) {
                            return { type, passing: false, message: message || '必填' };
                        }
                        else {
                            return { type, passing: true, message: '' };
                        }
                    }
                    return { type, passing: true, message: '' };
                };
            case 'NumberMaxValue':
            case 'numberMaxValue':
                return (v) => {
                    if (typeof v !== 'number') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v <= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值不能大于${constraints[0]}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'NumberMinValue':
            case 'numberMinValue':
                return (v) => {
                    if (typeof v !== 'number') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0] || 0 == constraints[0]) {
                        if (v >= parseFloat(constraints[0])) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值不能小于${constraints[0]}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'DateMaxValue':
            case 'dateMaxValue':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0]) {
                        let condition = constraints[0];
                        if (condition.length == 21) {
                            condition = condition.slice(1, 20);
                        }
                        if (DateUtil.isBefore(v, condition) || DateUtil.isSame(v, condition)) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入日期不能大于${condition}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'DateMinValue':
            case 'dateMinValue':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0]) {
                        let condition = constraints[0];
                        if (condition.length == 21) {
                            condition = condition.slice(1, 20);
                        }
                        if (DateUtil.isAfter(v, condition) || DateUtil.isSame(v, condition)) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入日期不能小于${condition}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'StringMaxLength':
            case 'stringMaxLength':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0]) {
                        if (v.length <= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值长度不能大于${constraints[0]}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'StringMinLength':
            case 'stringMinLength':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    if (constraints[0]) {
                        if (v.length >= constraints[0]) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message: message || `输入值长度不能小于${constraints[0]}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'regex':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    let constraintsTemp = [];
                    if (typeof constraints[0] === 'string') {
                        constraintsTemp = constraints[0].split(',');
                    }
                    for (let i = 0; i < constraintsTemp.length; i++) {
                        if (constraintsTemp[i] === '') {
                            return;
                        }
                        const re = new RegExp(constraintsTemp[i]);
                        if (re.test(v)) {
                            return { passing: false, message: message || `存在不可输入项${constraintsTemp[i]}` };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'regexp':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: true, message: '' };
                    }
                    const re = new RegExp(constraints[0]);
                    if (!re.test(v)) {
                        return { passing: false, message: message || `请输入正确格式` };
                    }
                    return { passing: true, message: '' };
                };
            case 'mobile':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: false, message: message || `请输入正确的手机号格式` };
                    }
                    const regexStr = constraints[0] === true ? /^1[0-9]{10}$/ : constraints[0];
                    const re = new RegExp(regexStr);
                    if (!re.test(v)) {
                        return { passing: false, message: message || `请输入正确的手机号格式` };
                    }
                    else {
                        return { passing: true, message: '' };
                    }
                };
            case 'email':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: false, message: message || `请输入正确的邮箱格式` };
                    }
                    const regexStr = constraints[0] === true ? /^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/ : constraints[0];
                    const re = new RegExp(regexStr);
                    if (!re.test(v)) {
                        return { passing: false, message: message || `请输入正确的邮箱格式` };
                    }
                    else {
                        return { passing: true, message: '' };
                    }
                };
            case 'idCard':
                return (v) => {
                    if (v === null || v === undefined || v === '') {
                        return { passing: false, message: message || `请输入正确的身份证格式` };
                    }
                    const regexStr = constraints[0] === true ? /^[1-9]\d{5}(18|19|([23]\d))\d{2}((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)\d{3}[0-9Xx]$/ : constraints[0];
                    const re = new RegExp(regexStr);
                    if (!re.test(v)) {
                        return { passing: false, message: message || `请输入正确的身份证格式` };
                    }
                    else {
                        return { passing: true, message: '' };
                    }
                };
            case 'customFunction':
                return (v, context) => {
                    if (typeof constraints[0] === 'function') {
                        const message = constraints[0](v, context);
                        if (!message) {
                            return { passing: true, message: '' };
                        }
                        else {
                            return { passing: false, message };
                        }
                    }
                    return { passing: true, message: '' };
                };
            case 'expression':
                return (value, viewModelContext, options = {}) => {
                    const result = viewModelContext.expressionManager.validate(constraints[0], options);
                    if (result === false) {
                        return { passing: false, message };
                    }
                    else {
                        return { passing: true, message: '' };
                    }
                };
            case 'requiredExpression':
                return (v, viewModelContext, options = {}) => {
                    const result = viewModelContext.expressionManager.validate(constraints[0], options);
                    if (result === true) {
                        if (null === v || undefined === v || '' === v) {
                            return { type, passing: false, message: message || '必填' };
                        }
                        else {
                            return { type, passing: true, message: '' };
                        }
                    }
                    else {
                        return { passing: true, message: '' };
                    }
                };
            case 'asyncCustomFunction':
                return (v, context) => {
                    if (typeof constraints[0] === 'function') {
                        const $message = from(constraints[0](v, context));
                        return $message.pipe(switchMap((message) => {
                            if (!message) {
                                return of({ passing: true, message: '' });
                            }
                            else {
                                return of({ passing: false, message });
                            }
                        }));
                    }
                    return { passing: true, message: '' };
                };
            default:
                return () => {
                    return { passing: true, message: '' };
                };
        }
    }
    /**
     * 支持异步自定义函数
     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果
     * 遍历完成没有错误则返回校验通过结果
     * @param validatorFn 校验方法
     * @param value 当前值
     */
    static executeValidator(validatorFn, value, context, options) {
        let validationResult = of({ passing: true, message: '' });
        for (let i = 0; i < validatorFn.length; i++) {
            let result = validatorFn[i](value, context, options);
            if (isObservable(result)) {
                validationResult = result;
                break;
            }
            if (result['passing'] === false) {
                return of(result);
            }
        }
        return validationResult;
    }
    /**
     * 不支持异步自定义函数
     * 遍历生成的校验方法对当前值进行校验，当发现错误就返回校验结果
     * 遍历完成没有错误则返回校验通过结果
     * @param validatorFn 校验方法
     * @param value 当前值
     */
    static noSupportAsynExecuteValidator(validatorFn, value, context, options) {
        for (let i = 0; i < validatorFn.length; i++) {
            let validationResult = validatorFn[i](value, context, options);
            if (isObservable(validationResult)) {
                break;
            }
            if (validationResult['passing'] === false) {
                return validationResult;
            }
        }
        return { passing: true, message: '' };
    }
}
export { ValidatorFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3ZhbGlkYXRvci92YWxpZGF0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBRTNDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDdEQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFFekQ7O0dBRUc7QUFDSCxNQUFNLGdCQUFnQjtJQUNsQjs7T0FFRztJQUNILE1BQU0sQ0FBQyxNQUFNLENBQUMsVUFBNkM7UUFDdkQsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDO1FBQ3JCLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxVQUFVLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUNwRCxVQUFVLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBeUIsRUFBRSxFQUFFO2dCQUM3QyxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtZQUNyRCxDQUFDLENBQUMsQ0FBQTtTQUNMO2FBQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLFVBQVUsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQzdELFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1NBQ3hEO2FBQU07WUFDSCxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsVUFB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QUFPLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsQ0FBQztJQUMxQyxDQUFDO0NBRUo7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGZyb20sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUnVsZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgRGF0ZVV0aWwgfSBmcm9tICcuLi91dGlscy9kYXRlX3V0aWwnO1xuaW1wb3J0IHsgaXNPYnNlcnZhYmxlIH0gZnJvbSAnLi4vdXRpbHMvaXMtb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL2luZGV4JztcblxuLyoqXG4gKiDpqozor4Hlmajlt6XljoJcbiAqL1xuY2xhc3MgVmFsaWRhdG9yRmFjdG9yeSB7XG4gICAgLyoqXG4gICAgICog5Yib5bu66YCC6YWN5ZmoXG4gICAgICovXG4gICAgc3RhdGljIGNyZWF0ZSh2YWxpZFJ1bGVzOiBWYWxpZGF0aW9uUnVsZSB8IFZhbGlkYXRpb25SdWxlW10pOiBhbnkge1xuICAgICAgICBsZXQgdmFsaWRhdG9yRm4gPSBbXTtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsaWRSdWxlcykgJiYgdmFsaWRSdWxlcy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICB2YWxpZFJ1bGVzLmZvckVhY2goKHZhbGlkUnVsZTogVmFsaWRhdGlvblJ1bGUpID0+IHtcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3JGbi5wdXNoKHRoaXMuaW5pdFZhbGlkUnVsZUZuKHZhbGlkUnVsZSkpXG4gICAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodmFsaWRSdWxlcykgJiYgdmFsaWRSdWxlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHZhbGlkYXRvckZuLnB1c2godGhpcy5pbml0VmFsaWRSdWxlRm4odmFsaWRSdWxlc1swXSkpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YWxpZGF0b3JGbi5wdXNoKHRoaXMuaW5pdFZhbGlkUnVsZUZuKHZhbGlkUnVsZXMgYXMgVmFsaWRhdGlvblJ1bGUpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWxpZGF0b3JGbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHN0YXRpYyBpbml0VmFsaWRSdWxlRm4odmFsaWRSdWxlOiBWYWxpZGF0aW9uUnVsZSk6IGFueSB7XG4gICAgICAgIGNvbnN0IHsgdHlwZSwgY29uc3RyYWludHMsIG1lc3NhZ2UgfSA9IHZhbGlkUnVsZTtcbiAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdyZXF1aXJlZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2LCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSAhPT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VTZXJ2aWNlID0gY29udGV4dC5pbmplY3Rvci5nZXQoVmFyaWFibGVQYXJzZVNlcnZpY2UpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkQXJncyA9IHBhcnNlU2VydmljZS5wYXJzZShjb25zdHJhaW50c1swXSwgY29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VkQXJncyA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB2IHx8IHVuZGVmaW5lZCA9PT0gdiB8fCAnJyA9PT0gdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlLCBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCAn5b+F5aGrJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZSwgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG51bGwgPT09IHYgfHwgdW5kZWZpbmVkID09PSB2IHx8ICcnID09PSB2KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZSwgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgJ+W/heWhqycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlLCBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0eXBlLCBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTnVtYmVyTWF4VmFsdWUnOlxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyTWF4VmFsdWUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdIHx8IDAgPT0gY29uc3RyYWludHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2IDw9IHBhcnNlRmxvYXQoY29uc3RyYWludHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC85LiN6IO95aSn5LqOJHtjb25zdHJhaW50c1swXX1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnTnVtYmVyTWluVmFsdWUnOlxuICAgICAgICAgICAgY2FzZSAnbnVtYmVyTWluVmFsdWUnOlxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdIHx8IDAgPT0gY29uc3RyYWludHNbMF0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2ID49IHBhcnNlRmxvYXQoY29uc3RyYWludHNbMF0pKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC85LiN6IO95bCP5LqOJHtjb25zdHJhaW50c1swXX1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnRGF0ZU1heFZhbHVlJzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGVNYXhWYWx1ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNvbmRpdGlvbiA9IGNvbnN0cmFpbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmRpdGlvbi5sZW5ndGggPT0gMjEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25kaXRpb24gPSBjb25kaXRpb24uc2xpY2UoMSwgMjApXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoRGF0ZVV0aWwuaXNCZWZvcmUodiwgY29uZGl0aW9uKSB8fCBEYXRlVXRpbC5pc1NhbWUodiwgY29uZGl0aW9uKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYOi+k+WFpeaXpeacn+S4jeiDveWkp+S6jiR7Y29uZGl0aW9ufWAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdEYXRlTWluVmFsdWUnOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZU1pblZhbHVlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKGNvbnN0cmFpbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgY29uZGl0aW9uID0gY29uc3RyYWludHNbMF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uZGl0aW9uLmxlbmd0aCA9PSAyMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmRpdGlvbiA9IGNvbmRpdGlvbi5zbGljZSgxLCAyMClcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChEYXRlVXRpbC5pc0FmdGVyKHYsIGNvbmRpdGlvbikgfHwgRGF0ZVV0aWwuaXNTYW1lKHYsIGNvbmRpdGlvbikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDovpPlhaXml6XmnJ/kuI3og73lsI/kuo4ke2NvbmRpdGlvbn1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnU3RyaW5nTWF4TGVuZ3RoJzpcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZ01heExlbmd0aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYubGVuZ3RoIDw9IGNvbnN0cmFpbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC86ZW/5bqm5LiN6IO95aSn5LqOJHtjb25zdHJhaW50c1swXX1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnU3RyaW5nTWluTGVuZ3RoJzpcbiAgICAgICAgICAgIGNhc2UgJ3N0cmluZ01pbkxlbmd0aCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb25zdHJhaW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYubGVuZ3RoID49IGNvbnN0cmFpbnRzWzBdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6L6T5YWl5YC86ZW/5bqm5LiN6IO95bCP5LqOJHtjb25zdHJhaW50c1swXX1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVnZXgnOlxuICAgICAgICAgICAgICAgIHJldHVybiAodikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodiA9PT0gbnVsbCB8fCB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gJycpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBsZXQgY29uc3RyYWludHNUZW1wID0gW107XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RyYWludHNbMF0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdHJhaW50c1RlbXAgPSBjb25zdHJhaW50c1swXS5zcGxpdCgnLCcpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29uc3RyYWludHNUZW1wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29uc3RyYWludHNUZW1wW2ldID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGNvbnN0cmFpbnRzVGVtcFtpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmUudGVzdCh2KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDlrZjlnKjkuI3lj6/ovpPlhaXpobkke2NvbnN0cmFpbnRzVGVtcFtpXX1gIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAncmVnZXhwJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmUgPSBuZXcgUmVnRXhwKGNvbnN0cmFpbnRzWzBdKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZS50ZXN0KHYpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6K+36L6T5YWl5q2j56Gu5qC85byPYCB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ21vYmlsZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYOivt+i+k+WFpeato+ehrueahOaJi+acuuWPt+agvOW8j2AgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4U3RyID0gY29uc3RyYWludHNbMF0gPT09IHRydWUgPyAvXjFbMC05XXsxMH0kLyA6IGNvbnN0cmFpbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAocmVnZXhTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlLnRlc3QodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDor7fovpPlhaXmraPnoa7nmoTmiYvmnLrlj7fmoLzlvI9gIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2VtYWlsJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHYgPT09IG51bGwgfHwgdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZTogbWVzc2FnZSB8fCBg6K+36L6T5YWl5q2j56Gu55qE6YKu566x5qC85byPYCB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVnZXhTdHIgPSBjb25zdHJhaW50c1swXSA9PT0gdHJ1ZSA/IC9eW0EtWmEtejAtOVxcdTRlMDAtXFx1OWZhNV0rQFthLXpBLVowLTlfLV0rKFxcLlthLXpBLVowLTlfLV0rKSskLyA6IGNvbnN0cmFpbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAocmVnZXhTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlLnRlc3QodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDor7fovpPlhaXmraPnoa7nmoTpgq7nrrHmoLzlvI9gIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2lkQ2FyZCc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh2ID09PSBudWxsIHx8IHYgPT09IHVuZGVmaW5lZCB8fCB2ID09PSAnJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogZmFsc2UsIG1lc3NhZ2U6IG1lc3NhZ2UgfHwgYOivt+i+k+WFpeato+ehrueahOi6q+S7veivgeagvOW8j2AgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlZ2V4U3RyID0gY29uc3RyYWludHNbMF0gPT09IHRydWUgPyAvXlsxLTldXFxkezV9KDE4fDE5fChbMjNdXFxkKSlcXGR7Mn0oKDBbMS05XSl8KDEwfDExfDEyKSkoKFswLTJdWzEtOV0pfDEwfDIwfDMwfDMxKVxcZHszfVswLTlYeF0kLyA6IGNvbnN0cmFpbnRzWzBdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAocmVnZXhTdHIpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIXJlLnRlc3QodikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8IGDor7fovpPlhaXmraPnoa7nmoTouqvku73or4HmoLzlvI9gIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2N1c3RvbUZ1bmN0aW9uJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gKHYsIGNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zdHJhaW50c1swXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGNvbnN0cmFpbnRzWzBdKHYsIGNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZSB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ2V4cHJlc3Npb24nOlxuICAgICAgICAgICAgICAgIHJldHVybiAodmFsdWUsIHZpZXdNb2RlbENvbnRleHQsIG9wdGlvbnMgPSB7fSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSB2aWV3TW9kZWxDb250ZXh0LmV4cHJlc3Npb25NYW5hZ2VyLnZhbGlkYXRlKGNvbnN0cmFpbnRzWzBdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlIH1cbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3JlcXVpcmVkRXhwcmVzc2lvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2LCB2aWV3TW9kZWxDb250ZXh0LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gdmlld01vZGVsQ29udGV4dC5leHByZXNzaW9uTWFuYWdlci52YWxpZGF0ZShjb25zdHJhaW50c1swXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB2IHx8IHVuZGVmaW5lZCA9PT0gdiB8fCAnJyA9PT0gdikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7IHR5cGUsIHBhc3Npbmc6IGZhbHNlLCBtZXNzYWdlOiBtZXNzYWdlIHx8ICflv4XloasnIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZSwgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2FzZSAnYXN5bmNDdXN0b21GdW5jdGlvbic6XG4gICAgICAgICAgICAgICAgcmV0dXJuICh2LCBjb250ZXh0KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc3RyYWludHNbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0ICRtZXNzYWdlID0gZnJvbShjb25zdHJhaW50c1swXSh2LCBjb250ZXh0KSk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJG1lc3NhZ2UucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2hNYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChtZXNzYWdlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoeyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2YoeyBwYXNzaW5nOiBmYWxzZSwgbWVzc2FnZSB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgcGFzc2luZzogdHJ1ZSwgbWVzc2FnZTogJycgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5pSv5oyB5byC5q2l6Ieq5a6a5LmJ5Ye95pWwXG4gICAgICog6YGN5Y6G55Sf5oiQ55qE5qCh6aqM5pa55rOV5a+55b2T5YmN5YC86L+b6KGM5qCh6aqM77yM5b2T5Y+R546w6ZSZ6K+v5bCx6L+U5Zue5qCh6aqM57uT5p6cXG4gICAgICog6YGN5Y6G5a6M5oiQ5rKh5pyJ6ZSZ6K+v5YiZ6L+U5Zue5qCh6aqM6YCa6L+H57uT5p6cXG4gICAgICogQHBhcmFtIHZhbGlkYXRvckZuIOagoemqjOaWueazlVxuICAgICAqIEBwYXJhbSB2YWx1ZSDlvZPliY3lgLxcbiAgICAgKi9cbiAgICBzdGF0aWMgZXhlY3V0ZVZhbGlkYXRvcih2YWxpZGF0b3JGbiwgdmFsdWUsIGNvbnRleHQ/LCBvcHRpb25zPyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgICAgIGxldCB2YWxpZGF0aW9uUmVzdWx0ID0gb2YoeyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9KTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZGF0b3JGbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IHZhbGlkYXRvckZuW2ldKHZhbHVlLCBjb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgICAgIGlmIChpc09ic2VydmFibGUocmVzdWx0KSkge1xuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25SZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAocmVzdWx0WydwYXNzaW5nJ10gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9mKHJlc3VsdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbGlkYXRpb25SZXN1bHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICog5LiN5pSv5oyB5byC5q2l6Ieq5a6a5LmJ5Ye95pWwXG4gICAgICog6YGN5Y6G55Sf5oiQ55qE5qCh6aqM5pa55rOV5a+55b2T5YmN5YC86L+b6KGM5qCh6aqM77yM5b2T5Y+R546w6ZSZ6K+v5bCx6L+U5Zue5qCh6aqM57uT5p6cXG4gICAgICog6YGN5Y6G5a6M5oiQ5rKh5pyJ6ZSZ6K+v5YiZ6L+U5Zue5qCh6aqM6YCa6L+H57uT5p6cXG4gICAgICogQHBhcmFtIHZhbGlkYXRvckZuIOagoemqjOaWueazlVxuICAgICAqIEBwYXJhbSB2YWx1ZSDlvZPliY3lgLxcbiAgICAgKi9cbiAgICBzdGF0aWMgbm9TdXBwb3J0QXN5bkV4ZWN1dGVWYWxpZGF0b3IodmFsaWRhdG9yRm4sIHZhbHVlLCBjb250ZXh0Pywgb3B0aW9ucz8pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWxpZGF0b3JGbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbGV0IHZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0b3JGbltpXSh2YWx1ZSwgY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgICAgICBpZiAoaXNPYnNlcnZhYmxlKHZhbGlkYXRpb25SZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodmFsaWRhdGlvblJlc3VsdFsncGFzc2luZyddID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2YWxpZGF0aW9uUmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7IHBhc3Npbmc6IHRydWUsIG1lc3NhZ2U6ICcnIH07XG4gICAgfVxuXG59XG5cbmV4cG9ydCB7IFZhbGlkYXRvckZhY3RvcnkgfTsiXX0=