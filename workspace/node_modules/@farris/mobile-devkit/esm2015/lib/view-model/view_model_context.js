import { Injector, InjectFlags } from '../core/index';
import { AppContext } from '../app/index';
/**
 * 视图模型上下文
 */
class ViewModelContext {
    constructor() {
    }
    init(viewModel) {
        this.innerViewModel = viewModel;
        this.id = this.innerViewModel.id;
        this.appContext = viewModel.injector.get(AppContext);
        this.regToTree();
        this.regToAppContext();
    }
    regToTree() {
        const parentInjector = this.innerViewModel.injector.get(Injector, null, InjectFlags.SkipSelf);
        if (parentInjector) {
            this.parent = parentInjector.get(ViewModelContext, null);
            this.root = this.parent ? this.parent.root : this;
        }
        else {
            this.parent = null;
            this.root = this;
        }
    }
    regToAppContext() {
        this.appContext.regViewModelContext(this);
    }
    get viewModel() {
        return this.innerViewModel;
    }
    get injector() {
        return this.innerViewModel.injector;
    }
    get repository() {
        return this.innerViewModel.repository;
    }
    get bindingData() {
        return this.innerViewModel.bindingData;
    }
    get uiState() {
        return this.innerViewModel.uiState;
    }
    get stateMachine() {
        return this.innerViewModel.stateMachine;
    }
    get form() {
        return this.innerViewModel.form;
    }
    get commandBus() {
        return this.innerViewModel.commandBus;
    }
    get expressionEngineImpl() {
        return this.innerViewModel.expressionEngineImpl;
    }
    get expressionManager() {
        return this.innerViewModel.expressionManager;
    }
    ;
    get expressionResult() {
        return this.innerViewModel.expressionResult;
    }
    ;
    get controlsProxy() {
        return this.innerViewModel.controlsProxy;
    }
    ;
    getVirtualRootFrameContext() {
        let formFrameContext = this;
        // let parent = this.parent;
        // while (parent) {
        //   // 兼容没有重新编译的表单，如果判断parent.namespace存在会导致获取不到root-framecontext
        //   if (parent.namespace === this.namespace) {
        //     formFrameContext = parent;
        //     parent = parent.parent;
        //   } else {
        //     break;
        //   }
        // }
        return formFrameContext;
    }
    /**
     * 注册扩展命令
     */
    registerExtendCommand(commandName, commandHandler) {
        this.viewModel.registerExtendCommand(commandName, commandHandler);
    }
}
export { ViewModelContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmlld19tb2RlbF9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3ZpZXctbW9kZWwvdmlld19tb2RlbF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXRELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFjMUM7O0dBRUc7QUFDSCxNQUFNLGdCQUFnQjtJQVlwQjtJQUNBLENBQUM7SUFFTSxJQUFJLENBQUMsU0FBUztRQUNuQixJQUFJLENBQUMsY0FBYyxHQUFHLFNBQVMsQ0FBQztRQUNoQyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBQ2pCLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN6QixDQUFDO0lBRU0sU0FBUztRQUNkLE1BQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBVyxRQUFRLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQztRQUN4RyxJQUFJLGNBQWMsRUFBRztZQUNuQixJQUFJLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDekQsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1NBQ25EO2FBQU07WUFDTCxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQztZQUNuQixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztTQUNsQjtJQUNILENBQUM7SUFFTSxlQUFlO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELElBQVcsU0FBUztRQUNsQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDN0IsQ0FBQztJQUVELElBQVcsUUFBUTtRQUNqQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQ3RDLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDbkIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFBVyxXQUFXO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUM7SUFDekMsQ0FBQztJQUVELElBQVcsT0FBTztRQUNoQixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFXLFlBQVk7UUFDckIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQztJQUMxQyxDQUFDO0lBRUQsSUFBVyxJQUFJO1FBQ2IsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFBVyxVQUFVO1FBQ25CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQVcsb0JBQW9CO1FBQzdCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQztJQUNsRCxDQUFDO0lBRUQsSUFBVyxpQkFBaUI7UUFDMUIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDO0lBQy9DLENBQUM7SUFBQSxDQUFDO0lBRUYsSUFBVyxnQkFBZ0I7UUFDekIsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLGdCQUFnQixDQUFDO0lBQzlDLENBQUM7SUFBQSxDQUFDO0lBRUYsSUFBVyxhQUFhO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUM7SUFDM0MsQ0FBQztJQUFBLENBQUM7SUFFSywwQkFBMEI7UUFDL0IsSUFBSSxnQkFBZ0IsR0FBRyxJQUFJLENBQUM7UUFDNUIsNEJBQTRCO1FBQzVCLG1CQUFtQjtRQUNuQixrRUFBa0U7UUFDbEUsK0NBQStDO1FBQy9DLGlDQUFpQztRQUNqQyw4QkFBOEI7UUFDOUIsYUFBYTtRQUNiLGFBQWE7UUFDYixNQUFNO1FBQ04sSUFBSTtRQUNKLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUVEOztPQUVHO0lBQ0kscUJBQXFCLENBQUMsV0FBbUIsRUFBRSxjQUFtQjtRQUNuRSxJQUFJLENBQUMsU0FBUyxDQUFDLHFCQUFxQixDQUFDLFdBQVcsRUFBRSxjQUFjLENBQUMsQ0FBQztJQUNwRSxDQUFDO0NBRUY7QUFFRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yLCBJbmplY3RGbGFncyB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvaW5kZXgnO1xuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uL2FwcC9pbmRleCc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xuaW1wb3J0IHsgQmluZGluZ0RhdGEgfSBmcm9tICcuLi9iaW5kaW5nLWRhdGEvaW5kZXgnO1xuaW1wb3J0IHsgVUlTdGF0ZSB9IGZyb20gJy4uL3VpLXN0YXRlL2luZGV4JztcbmltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gJy4uL3N0YXRlLW1hY2hpbmUvaW5kZXgnO1xuaW1wb3J0IHsgRm9ybSB9IGZyb20gJy4uL2Zvcm0vaW5kZXgnO1xuaW1wb3J0IHsgVmlld01vZGVsIH0gZnJvbSAnLi4vdmlldy1tb2RlbC9pbmRleCc7XG5pbXBvcnQgeyBDb21tYW5kQnVzIH0gZnJvbSAnLi4vY29tbWFuZC9pbmRleCc7XG5pbXBvcnQge1xuICBFeHByZXNzaW9uRW5naW5lSW1wbCwgRXhwcmVzc2lvbk1hbmFnZXIsIEV4cHJlc3Npb25SZXN1bHQsIEV4cHJlc3Npb25SZXN1bHRGYWN0b3J5XG59IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xuaW1wb3J0IHsgQ29udHJvbHNQcm94eSB9IGZyb20gJy4uL2NvbnRyb2wtcHJveHknO1xuXG4vKipcbiAqIOinhuWbvuaooeWei+S4iuS4i+aWh1xuICovXG5jbGFzcyBWaWV3TW9kZWxDb250ZXh0IHtcblxuICBwcml2YXRlIGlubmVyVmlld01vZGVsOiBWaWV3TW9kZWw7XG5cbiAgcHVibGljIGFwcENvbnRleHQ6IEFwcENvbnRleHQ7XG5cbiAgcHVibGljIHJvb3Q6IFZpZXdNb2RlbENvbnRleHQ7XG5cbiAgcHVibGljIHBhcmVudDogVmlld01vZGVsQ29udGV4dDtcblxuICBwdWJsaWMgaWQ6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHB1YmxpYyBpbml0KHZpZXdNb2RlbCk6IHZvaWQge1xuICAgIHRoaXMuaW5uZXJWaWV3TW9kZWwgPSB2aWV3TW9kZWw7XG4gICAgdGhpcy5pZCA9IHRoaXMuaW5uZXJWaWV3TW9kZWwuaWQ7XG4gICAgdGhpcy5hcHBDb250ZXh0ID0gdmlld01vZGVsLmluamVjdG9yLmdldChBcHBDb250ZXh0KTtcbiAgICB0aGlzLnJlZ1RvVHJlZSgpO1xuICAgIHRoaXMucmVnVG9BcHBDb250ZXh0KCk7XG4gIH1cblxuICBwdWJsaWMgcmVnVG9UcmVlKCkge1xuICAgIGNvbnN0IHBhcmVudEluamVjdG9yID0gdGhpcy5pbm5lclZpZXdNb2RlbC5pbmplY3Rvci5nZXQ8SW5qZWN0b3I+KEluamVjdG9yLCBudWxsLCBJbmplY3RGbGFncy5Ta2lwU2VsZik7XG4gICAgaWYgKHBhcmVudEluamVjdG9yKSAge1xuICAgICAgdGhpcy5wYXJlbnQgPSBwYXJlbnRJbmplY3Rvci5nZXQoVmlld01vZGVsQ29udGV4dCwgbnVsbCk7XG4gICAgICB0aGlzLnJvb3QgPSB0aGlzLnBhcmVudCA/IHRoaXMucGFyZW50LnJvb3QgOiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnBhcmVudCA9IG51bGw7XG4gICAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyByZWdUb0FwcENvbnRleHQoKSB7XG4gICAgdGhpcy5hcHBDb250ZXh0LnJlZ1ZpZXdNb2RlbENvbnRleHQodGhpcyk7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHZpZXdNb2RlbCgpOiBWaWV3TW9kZWwge1xuICAgIHJldHVybiB0aGlzLmlubmVyVmlld01vZGVsO1xuICB9XG5cbiAgcHVibGljIGdldCBpbmplY3RvcigpOiBJbmplY3RvciB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwuaW5qZWN0b3I7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHJlcG9zaXRvcnkoKTogUmVwb3NpdG9yeTxFbnRpdHk+IHtcbiAgICByZXR1cm4gdGhpcy5pbm5lclZpZXdNb2RlbC5yZXBvc2l0b3J5O1xuICB9XG5cbiAgcHVibGljIGdldCBiaW5kaW5nRGF0YSgpOiBCaW5kaW5nRGF0YSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwuYmluZGluZ0RhdGE7XG4gIH1cblxuICBwdWJsaWMgZ2V0IHVpU3RhdGUoKTogVUlTdGF0ZSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwudWlTdGF0ZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXQgc3RhdGVNYWNoaW5lKCk6IFN0YXRlTWFjaGluZSB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwuc3RhdGVNYWNoaW5lO1xuICB9XG5cbiAgcHVibGljIGdldCBmb3JtKCk6IEZvcm0ge1xuICAgIHJldHVybiB0aGlzLmlubmVyVmlld01vZGVsLmZvcm07XG4gIH1cblxuICBwdWJsaWMgZ2V0IGNvbW1hbmRCdXMoKTogQ29tbWFuZEJ1cyB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwuY29tbWFuZEJ1cztcbiAgfVxuXG4gIHB1YmxpYyBnZXQgZXhwcmVzc2lvbkVuZ2luZUltcGwoKTogRXhwcmVzc2lvbkVuZ2luZUltcGwge1xuICAgIHJldHVybiB0aGlzLmlubmVyVmlld01vZGVsLmV4cHJlc3Npb25FbmdpbmVJbXBsO1xuICB9XG5cbiAgcHVibGljIGdldCBleHByZXNzaW9uTWFuYWdlcigpOiBFeHByZXNzaW9uTWFuYWdlciB7XG4gICAgcmV0dXJuIHRoaXMuaW5uZXJWaWV3TW9kZWwuZXhwcmVzc2lvbk1hbmFnZXI7XG4gIH07XG5cbiAgcHVibGljIGdldCBleHByZXNzaW9uUmVzdWx0KCk6IEV4cHJlc3Npb25SZXN1bHQge1xuICAgIHJldHVybiB0aGlzLmlubmVyVmlld01vZGVsLmV4cHJlc3Npb25SZXN1bHQ7XG4gIH07XG5cbiAgcHVibGljIGdldCBjb250cm9sc1Byb3h5KCk6IENvbnRyb2xzUHJveHkge1xuICAgIHJldHVybiB0aGlzLmlubmVyVmlld01vZGVsLmNvbnRyb2xzUHJveHk7XG4gIH07XG5cbiAgcHVibGljIGdldFZpcnR1YWxSb290RnJhbWVDb250ZXh0KCkge1xuICAgIGxldCBmb3JtRnJhbWVDb250ZXh0ID0gdGhpcztcbiAgICAvLyBsZXQgcGFyZW50ID0gdGhpcy5wYXJlbnQ7XG4gICAgLy8gd2hpbGUgKHBhcmVudCkge1xuICAgIC8vICAgLy8g5YW85a655rKh5pyJ6YeN5paw57yW6K+R55qE6KGo5Y2V77yM5aaC5p6c5Yik5patcGFyZW50Lm5hbWVzcGFjZeWtmOWcqOS8muWvvOiHtOiOt+WPluS4jeWIsHJvb3QtZnJhbWVjb250ZXh0XG4gICAgLy8gICBpZiAocGFyZW50Lm5hbWVzcGFjZSA9PT0gdGhpcy5uYW1lc3BhY2UpIHtcbiAgICAvLyAgICAgZm9ybUZyYW1lQ29udGV4dCA9IHBhcmVudDtcbiAgICAvLyAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAvLyAgIH0gZWxzZSB7XG4gICAgLy8gICAgIGJyZWFrO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgICByZXR1cm4gZm9ybUZyYW1lQ29udGV4dDtcbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhozmianlsZXlkb3ku6RcbiAgICovXG4gIHB1YmxpYyByZWdpc3RlckV4dGVuZENvbW1hbmQoY29tbWFuZE5hbWU6IHN0cmluZywgY29tbWFuZEhhbmRsZXI6IGFueSkge1xuICAgIHRoaXMudmlld01vZGVsLnJlZ2lzdGVyRXh0ZW5kQ29tbWFuZChjb21tYW5kTmFtZSwgY29tbWFuZEhhbmRsZXIpO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgVmlld01vZGVsQ29udGV4dCB9O1xuIl19