import { MetadataUtil } from '../core/index';
import { Repository } from '../repository/index';
import { CommandBus } from '../command/index';
import { BindingData } from '../binding-data/index';
import { UIState } from '../ui-state/index';
import { StateMachine } from '../state-machine/index';
import { Form } from '../form/index';
import { ViewModelContext } from './view_model_context';
import { COMMAND_METHOD_META } from './decorators';
import { EMPTY, from, of } from 'rxjs';
import { concatMap, every, tap } from 'rxjs/operators';
import { ExpressionEngineImpl, ExpressionManager, ExpressionResult, ExpressionResultFactory } from '../expression/index';
import { ControlsProxy } from '../control-proxy';
class ViewModel {
    /**
     * 构造函数
     */
    constructor(injector, id) {
        /**
         * 扩展命令
         */
        this.extendCommands = new Map();
        this.injector = injector;
        this.id = id;
    }
    /**
     * 初始化
     */
    init() {
        this.initRepository();
        this.initContext();
        this.initBindingData();
        this.initUIState();
        this.intiStateMachine();
        this.initForm();
        this.initCommandBus();
        this.registerWithParent();
        this.initListeners();
        this.closeOldBeSession();
        this.initExpression();
        this.initControlsProxy();
        this.config();
    }
    config() {
        this.uiState.config(this.context);
    }
    initControlsProxy() {
        this.controlsProxy = this.injector.get(ControlsProxy);
    }
    initRepository() {
        this.repository = this.injector.get(Repository);
    }
    initContext() {
        this.context = this.injector.get(ViewModelContext);
        this.context.init(this);
    }
    initExpression() {
        const appContext = this.context.appContext;
        const allViewModelContexts = appContext.viewModelContextManager.getContexts();
        const existedViewModelContext = allViewModelContexts.find((viewModelContext) => {
            if (viewModelContext.expressionEngineImpl) {
                return true;
            }
            else {
                return false;
            }
        });
        if (existedViewModelContext) {
            this.expressionEngineImpl = existedViewModelContext.expressionEngineImpl;
            this.expressionManager = existedViewModelContext.expressionManager;
            this.expressionResult = existedViewModelContext.expressionResult;
            return;
        }
        this.expressionEngineImpl = this.injector.get(ExpressionEngineImpl, null);
        this.expressionManager = this.injector.get(ExpressionManager, null);
        const expressionResultFactory = this.injector.get(ExpressionResultFactory, null);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    }
    initBindingData() {
        this.bindingData = this.context.injector.get(BindingData);
        this.entityValueChangingListeners = new Map();
        this.entityValueChangedListeners = new Map();
        if (this.bindingData) {
            this.bindingData.setValueChangeInvokerFactory((paths) => {
                return (preValue, value, entityChanged, primaryValue) => {
                    const plainPath = '/' + paths.join('/');
                    let command;
                    if (entityChanged === false) {
                        command = this.entityValueChangingListeners[plainPath];
                    }
                    else {
                        command = this.entityValueChangedListeners[plainPath];
                    }
                    if (!!command) {
                        const change = {
                            paths: paths,
                            preValue: preValue,
                            value: value,
                            changed: entityChanged
                        };
                        const commands = command.split(';').filter(p => p);
                        let valueChangeSuccess = true;
                        return from(commands).pipe(concatMap(item => {
                            if (!valueChangeSuccess) {
                                return EMPTY;
                            }
                            return this[item](change).pipe(tap((result) => {
                                valueChangeSuccess = result;
                            }));
                        }), every((result) => result));
                    }
                    else {
                        return of(true);
                    }
                };
            });
        }
        const repositoryName = this.repository.name;
        const bindingDataManager = this.context.appContext.bindingDataManager;
        const repositoryBindingData = bindingDataManager.getBindingDataByName(repositoryName);
        this.bindingData.initByBindingList(repositoryBindingData.list, this.context, repositoryBindingData.dataTypeInfo);
    }
    initUIState() {
        this.uiState = this.injector.get(UIState);
    }
    intiStateMachine() {
        this.stateMachine = this.injector.get(StateMachine, null);
        if (!this.stateMachine) {
            return;
        }
        this.stateMachine.init(this.context);
    }
    initForm() {
        this.form = this.injector.get(Form, null);
        this.form.init();
    }
    initCommandBus() {
        this.commandBus = this.injector.get(CommandBus);
        this.extendCommandMethods();
    }
    extendCommandMethods() {
        this.ngCommands = MetadataUtil.getPropsMetadatasByName(this.constructor, COMMAND_METHOD_META);
        this.keybindingMap = new Map();
        Object.keys(this.ngCommands).forEach((propName) => {
            const ngCommand = this.ngCommands[propName];
            Object.defineProperty(this, propName, {
                value: (eventParams) => {
                    const command = {
                        name: ngCommand.name,
                        params: ngCommand.params,
                        paramDescriptions: ngCommand.paramDescriptions,
                        eventParam: eventParams || null
                    };
                    return this.commandBus.dispatch(command);
                }
            });
            if (ngCommand.keyBinding) {
                this.keybindingMap.set(propName, ngCommand.keyBinding);
            }
        });
    }
    /**
     * 注册扩展命令方法
     */
    registerExtendCommand(commandName, commandHandler) {
        Object.defineProperty(this, commandName, {
            value: (eventParams) => {
                return commandHandler(eventParams, this.context);
            }
        });
        this.extendCommands.set(commandName, commandHandler);
    }
    registerWithParent() {
        const parentContext = this.context.parent;
        if (!parentContext || !parentContext.viewModel || !parentContext.viewModel['childViewModels']) {
            return;
        }
        const parentViewModel = parentContext.viewModel;
        const className = this.constructor.name;
        const propName = parentViewModel['childViewModels'][className];
        parentViewModel[propName] = this;
    }
    /**
     * 关闭老的BeSession
     */
    closeOldBeSession() {
        const allViewModelContexts = this.context.appContext.viewModelContextManager.getContexts();
        if (allViewModelContexts.length === 1 && allViewModelContexts[0] === this.context) {
            this.context.repository.reset();
        }
    }
    /**
   * 从Form获取监听器
   */
    initListeners() {
        const extractPath = (bindingBasePath, bindingPath) => {
            return '/' + bindingBasePath.split('/').concat(bindingPath.split('.')).filter((item) => item.length > 0).join('/');
        };
        if (this.form) {
            const valueChangingListeners = this.form.getEntityValueChangingListeners();
            Object.keys(valueChangingListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangingListeners[plainPath] = valueChangingListeners[bindingPath];
            });
            const valueChangedListeners = this.form.getEntityValueChangedListeners();
            Object.keys(valueChangedListeners).forEach((bindingPath) => {
                const plainPath = extractPath(this.bindingPath, bindingPath);
                this.entityValueChangedListeners[plainPath] = valueChangedListeners[bindingPath];
            });
        }
    }
}
export { ViewModel };
//# sourceMappingURL=data:application/json;base64,