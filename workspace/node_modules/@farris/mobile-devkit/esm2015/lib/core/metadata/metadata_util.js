import { ANNOTATIONS, PROP_METADATA } from './decorator';
/**
 * 元数据解析
 * 约束：
 * 1、类型装饰器：在某个类型上，某种类型的装饰器，只使用一次，不重复添加；
 * 2、属性装饰器：在某个属性上，某种类型的装饰器，只使用一次，不重复添加
 */
class MetadataUtil {
    // ----------------------------------------
    // 类型元数据
    // ----------------------------------------
    /**
     * 获取类元数据
     * 返回结果形如：
     * [
     *   Injectable
     *   NgViewModel
     *   NgViewModel
     * ]
     */
    static getClassMetadatas(constructor) {
        const metadatas = constructor[ANNOTATIONS];
        return metadatas;
    }
    /**
     * 获取某个class上的某种装饰器
     * 返回结果：NgViewModel
     */
    static getClassMetadataByName(constructor, metadataName) {
        const metadata = this.getClassMetadataByNameWithTranslate(constructor, metadataName, null, null);
        return metadata;
    }
    static getClassMetadataByNameWithTranslate(constructor, metadataName, translateService, keysToTranslate) {
        const allClassMetadatas = this.getClassMetadatas(constructor);
        if (!allClassMetadatas) {
            return null;
        }
        const metadata = allClassMetadatas.find((classMetadata) => {
            return classMetadata.ngMetadataName === metadataName;
        });
        if (metadata && translateService && keysToTranslate) {
            keysToTranslate.forEach((metadataPropKey) => {
                const propertyVariable = metadata[metadataPropKey];
                if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                    const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                    metadata[metadataPropKey] = translateService.transform(translateKey, null);
                }
            });
        }
        return metadata;
    }
    // ----------------------------------------
    // 属性元数据
    // ----------------------------------------
    /**
     * 获取所有属性的所有元数据
     * 返回格式：
     * {
     *   propName1: [ NgDefaultValue, NgMaxLength, NgMinLength],
     *   propName2: [ NgDefaultValue, NgMaxLength, NgMinLength]
     * }
     */
    static getPropsMetadatas(constructor) {
        const allPropMetadatas = constructor[PROP_METADATA];
        return allPropMetadatas;
    }
    /**
     * 获取所有属性的某一类型的元数据
     * 如果同一属性
     * 返回结果：
     * {
     *    propName1: NgDefaultValue,
     *    propName2: NgDefaultValue
     * }
     */
    static getPropsMetadatasByName(constructor, metadataName) {
        const metadatas = this.getPropsMetadatasByNameWithTranslate(constructor, metadataName);
        return metadatas;
    }
    static getPropsMetadatasByNameWithTranslate(constructor, metadataName, translateService, keysToTranslate) {
        const metadatas = {};
        // 读取构造函数中存储的类属性注解。
        const allPropMetadatas = this.getPropsMetadatas(constructor);
        if (!allPropMetadatas) {
            return metadatas;
        }
        // 遍历所有属性提取注解信息。
        Object.keys(allPropMetadatas).forEach((propName) => {
            // 提取当前属性注解对象
            const propMetadatas = allPropMetadatas[propName];
            // 提取指定类型的注解项
            const metadata = propMetadatas.find((propMetadata) => {
                return propMetadata.ngMetadataName === metadataName;
            });
            if (translateService && keysToTranslate) {
                keysToTranslate.forEach((metadataPropKey) => {
                    const propertyVariable = metadata[metadataPropKey];
                    if (propertyVariable && propertyVariable.startsWith('{{') && propertyVariable.endsWith('}}')) {
                        const translateKey = propertyVariable.replace('{{', '').replace('}}', '').trim();
                        metadata[metadataPropKey] = translateService.transform(translateKey, null);
                    }
                });
            }
            if (metadata) {
                metadatas[propName] = metadata;
            }
        });
        return metadatas;
    }
    /**
     * 获取某个属性的所有元数据
     * 返回格式：[ NgDefaultValue, NgMaxLength, NgMinLength]
     */
    static getPropMetadatasByName(constructor, propName) {
        // 暂不实现
        return null;
    }
    /**
     * 获取某个属性的某种元数据
     * 返回格式：NgDefaultValue
     */
    static getPropMetadataByName(constructor, propName, metadataName) {
        // 暂不实现
        return null;
    }
}
export { MetadataUtil };
//# sourceMappingURL=data:application/json;base64,