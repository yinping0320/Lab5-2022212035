/*
 * @Author: Lucus, Witt
 * @Date: 2018-10-30 15:53:59
 * @Last Modified by: Witt
 * @Last Modified time: 2018-11-08 17:25:08
 */
import { ModifyType } from './types';
function isEqual(value, other) {
    return JSON.stringify(value) === JSON.stringify(other);
}
/**
 * 实体数据变更集
 */
class ChangeSet {
    constructor() {
        /**
         * 变更集合
         */
        this.modifications = [];
    }
    /**
     *  获取所有的变更记录
     */
    get changes() {
        return this.modifications;
    }
    /**
     * 将变更集添加到集合中
     * ### 使用示例
     * ```
     * const changeSet = new ChangeSet();
     * const modify = new Modification('newValue', ModifyType.ValueChange, [1, 'title'], 'oldValue');
     * changeSet.append(modify)
     * ```
     * @param changeItem 变更数据
     */
    append(modification) {
        switch (modification.type) {
            case ModifyType.ValueChange:
                this.appendValueChangeModification(modification);
                break;
            case ModifyType.Add:
            case ModifyType.Insert:
            case ModifyType.Clone:
                this.appendAddModification(modification);
                break;
            case ModifyType.Remove:
                this.appendRemoveModification(modification);
                break;
            case ModifyType.Load:
                break;
            default:
                throw new Error('不支持此类型的变更');
        }
    }
    /**
     * 添加值变化变更
     */
    appendValueChangeModification(modification) {
        const value = modification.value;
        const existedModification = this.findModifyItemsPath(modification.path);
        if (existedModification) {
            // 如果存在相同路径的ValueChange类型的变更集，则更新值；
            existedModification.value = value;
        }
        else {
            const existedAddModification = this.findNewAddItemsPath(modification.path);
            if (existedAddModification) {
                // @todo：
                // 1、此处逻辑有问题，value是个字符串，不能直接assign；
                // 2、之所以没有出现问题，是因为都是服务器端新增，新增后，客户端清空了所有变更。
                // 如果存在涵盖该ValueChange变更的Add变更，则更新Add变更对应的数据；
                existedAddModification.value = Object.assign({}, existedAddModification.value, value);
            }
            else {
                // 其他情况，新增一条ValueChange变更。
                this.modifications.push(modification);
            }
        }
    }
    /**
     * 添加新增变更
     */
    appendAddModification(modification) {
        const value = modification.value;
        const existedModification = this.findNewAddItemsPath(modification.path);
        if (existedModification) {
            // 1、如果已经存在相同路径的Add变更，则合并Value。
            existedModification.value = existedModification.value.concat(value);
        }
        else {
            // 2、如果没有，则新增一条Add变更。
            this.modifications.push(modification);
        }
    }
    /**
     * 添加删除变更
     */
    appendRemoveModification(modification) {
        const path = modification.path;
        const primaryKey = Object.keys(modification.value)[0];
        const primaryKeyValue = modification.value[primaryKey];
        // 1、存在相同path的新增变更，移除新增变更，不需要添加删除变更；
        // @todo：待重构（1、只考虑了主从情况，2、临时用多重循环实现）
        this.modifications.forEach((addModification) => {
            // 只处理新增变更
            if (addModification.type !== ModifyType.Add && addModification.type !== ModifyType.Insert && addModification.type !== ModifyType.Clone) {
                return;
            }
            // @todo 只考虑主从结构，再深的层次暂不考虑
            if (isEqual(addModification.path, path) === false) {
                return;
            }
            // 遍历新增新增变更的value（value是个数组），移除相匹配的新增删除
            addModification.value = addModification.value.filter((addDataItem) => {
                return addDataItem[primaryKey] !== primaryKeyValue;
            });
        });
        // 2、移除对应的修改变更
        const fullRemovePath = path.concat(`${primaryKey}:${primaryKeyValue}`);
        this.modifications = this.modifications.filter((valueModification) => {
            if (valueModification.type !== ModifyType.ValueChange) {
                return true;
            }
            const valueChangePath = Array.from(valueModification.path);
            valueChangePath.pop();
            // 路径相同进行移除
            const isToRemove = isEqual(valueChangePath, fullRemovePath);
            return !isToRemove;
        });
        // 先删除下级删除变更，再插入
        // 主要针对从从表删除之后，又删除子表时，根实体上还存在从从表删除变更的场景
        this.removeDescendantRemoveModifications(modification);
        this.modifications.push(modification);
    }
    /**
     * 清空变更集合
     */
    clear() {
        this.modifications = [];
    }
    /**
     * 根据path获取Add类型的变更记录
     * @param path 变更路径
     */
    findNewAddItemsPath(path) {
        return this.modifications.find((value, index) => {
            return isEqual(path, value.path) && (value.type === ModifyType.Add || value.type === ModifyType.Insert || value.type === ModifyType.Clone);
        });
    }
    /**
     * 根据path获取ValueChange类型的变更记录
     * @param path 变更路径
     */
    findModifyItemsPath(path) {
        return this.modifications.find((value, index) => {
            return isEqual(path, value.path) && value.type === ModifyType.ValueChange;
        });
    }
    /**
     * 删除后代（包括自己）所有的删除变更
     * @todo：临时做一个最小化修改
     */
    removeDescendantRemoveModifications(parentRemoveModification) {
        const parentPathWithId = this.createRemovePathWithId(parentRemoveModification);
        // 删除后代修改变更
        this.modifications = this.modifications.filter((modification) => {
            if (modification.type !== ModifyType.Remove) {
                return true;
            }
            const descendantPathWithId = this.createRemovePathWithId(modification);
            const isDescendant = this.isDescendantPath(parentPathWithId, descendantPathWithId);
            return !isDescendant;
        });
    }
    /**
     * 获取删除路径的完整格式
     * @summary
     * 1、目前删除变更的路径标记到父集合；
     * 2、为了方便比较，将被删除的数据id加入到路径中
     */
    createRemovePathWithId(modification) {
        const path = modification.path;
        const primaryKey = Object.keys(modification.value)[0];
        const primaryKeyValue = modification.value[primaryKey];
        const pathWithId = path.concat([`${primaryKey}:${primaryKeyValue}`]);
        return pathWithId;
    }
    /**
     * 判断是否是后代节点路径
     * @param parentPath 父节点路径
     * @param descendantPath 后代节点
     */
    isDescendantPath(parentPath, descendantPath) {
        if (parentPath.length > descendantPath.length) {
            return false;
        }
        let isDescendantPath = true;
        parentPath.forEach((parentPathItem, parentPathItemIndex) => {
            if (parentPathItem !== descendantPath[parentPathItemIndex]) {
                isDescendantPath = false;
                return;
            }
        });
        return isDescendantPath;
    }
}
export { ChangeSet };
//# sourceMappingURL=data:application/json;base64,