/**
 * 状态机事件，监听uistate的变化和entity的变化
 */
var StateMachineWatcher = /** @class */ (function () {
    function StateMachineWatcher(stateMachine) {
        this.stateMachine = stateMachine;
        /**
         * 所有UIStatePath数组
         */
        this.uiStatePathList = [];
        /**
         * 所有DataStatePath数组
         */
        this.dataStatePathList = [];
        this.viewModelContextAndUIStatePathsMap = new Map();
        this.viewModelContextAndDataStatePathsMap = new Map();
    }
    /**
     * 初始化
     * @param viewModelContext 当前视图上下文
     */
    StateMachineWatcher.prototype.init = function (viewModelContext) {
        this.viewModelContext = viewModelContext;
    };
    /**
     * 返回表达式中ViewModelId对应的ViewModelContext
     */
    StateMachineWatcher.prototype.getViewModelContext = function (expression) {
        var viewModelId = this.extractPaths(expression).split('/')[1];
        return this.viewModelContext.appContext.viewModelContextManager.getContextById(viewModelId);
    };
    /**
     * 监听UIState变更
     * @param viewModelContext ViewModel上下文
     * @param expression UIState表达式
     */
    StateMachineWatcher.prototype.subscribeUIStateChange = function (viewModelContext, expression) {
        var _this = this;
        var uiStatePath = this.getStatePath(expression);
        if (this.viewModelContextAndUIStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndUIStatePathsMap.set(viewModelContext, this.uiStatePathList);
            viewModelContext.uiState.changes.subscribe(function (uiStateChange) {
                var uiStatePathList = _this.viewModelContextAndUIStatePathsMap.get(viewModelContext);
                if (uiStateChange.field && uiStatePathList.indexOf(uiStateChange.field) > -1) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndUIStatePathsMap.get(viewModelContext).indexOf(uiStatePath) === -1) {
            this.uiStatePathList.push(uiStatePath);
        }
    };
    /**
     * 监听实体变更
     */
    StateMachineWatcher.prototype.subscribeEntityChange = function (viewModelContext, expression) {
        var _this = this;
        if (this.viewModelContextAndDataStatePathsMap.has(viewModelContext) === false) {
            this.viewModelContextAndDataStatePathsMap.set(viewModelContext, this.dataStatePathList);
            viewModelContext.bindingData.changes.subscribe(function (change) {
                if (change.type === 'Load' || change.type === 'SelectionChanged') {
                    _this.stateMachine.render();
                }
                var dataPathList = _this.viewModelContextAndDataStatePathsMap.get(viewModelContext);
                if (change.path.join() && _this.isAccordingPath(dataPathList, change.path.join('/'))) {
                    _this.stateMachine.render();
                }
            });
        }
        if (this.viewModelContextAndDataStatePathsMap.get(viewModelContext).indexOf(expression) === -1) {
            this.dataStatePathList.push(expression);
        }
    };
    /**
     * 根据表达式获取对应的StatePath（移除了ViewModelId之外的部分）
     * @param expression 变量表达式
     */
    StateMachineWatcher.prototype.getStatePath = function (expression) {
        return this.extractPaths(expression).split('/')[2];
    };
    /**
     * 判断是否监听范围内的变更路径
     */
    StateMachineWatcher.prototype.isAccordingPath = function (dataStatePaths, dataStatePath) {
        var targetPath = dataStatePaths.find(function (item) {
            return item.indexOf(dataStatePath) > -1;
        });
        return targetPath === undefined ? false : true;
    };
    /**
     * 暂时把这个方法放了这个地方，等季老师共用方法调整后，直接引用他的方法，该方法可删除
     * @param expression 变量表达式
     */
    StateMachineWatcher.prototype.extractPaths = function (expression) {
        var path;
        var UI_STATE_PATTERN_G = /\{UISTATE~(\S+?)\}/g;
        var DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        var uiStateVariables = expression.match(UI_STATE_PATTERN_G);
        var dataVariables = expression.match(DATA_PATTERN_G);
        if (uiStateVariables !== null) {
            var UI_STATE_PATTERN_1 = /\{UISTATE~(\S+?)\}/;
            uiStateVariables.forEach(function (uiStateVariable) {
                var pathMatches = uiStateVariable.match(UI_STATE_PATTERN_1);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        if (dataVariables !== null) {
            var DATA_PATTERN_1 = /\{DATA~(\S+?)\}/;
            dataVariables.forEach(function (dataVariable) {
                var pathMatches = dataVariable.match(DATA_PATTERN_1);
                if (pathMatches != null && pathMatches.length === 2) {
                    path = pathMatches[1];
                }
            });
        }
        return path;
    };
    return StateMachineWatcher;
}());
export { StateMachineWatcher };
//# sourceMappingURL=data:application/json;base64,