import { VariableParseService } from '../variable/index';
/**
 * 状态机上下文
 */
var StateMachineContext = /** @class */ (function () {
    /**
     * 构造函数
     * @param stateMachine 状态机实例
     * @param initialState 初始状态
     */
    function StateMachineContext(stateMachine, initialState) {
        this.stateMachine = stateMachine;
        this.state = initialState.name;
    }
    /**
     * 初始化
     */
    StateMachineContext.prototype.init = function (frameContext) {
        this.viewModelContext = frameContext;
        this.parser = this.viewModelContext.injector.get(VariableParseService);
        this.stateMachineWatcher = this.stateMachine.stateMachineWatcher;
    };
    /**
     * 状态迁移
     * @param stateName 下一状态的名称
     */
    StateMachineContext.prototype.transitTo = function (stateName) {
        var nextState = this.stateMachine.states[stateName];
        if (nextState) {
            this.state = nextState.name;
            this.stateMachine.render();
        }
    };
    /**
     * 获取expression对应的UIState值
     * @param expression UIState表达式
     */
    StateMachineContext.prototype.getUIState = function (expression) {
        if (!expression) {
            return;
        }
        var viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
        if (!viewModelContext) {
            return;
        }
        this.stateMachineWatcher.subscribeUIStateChange(viewModelContext, expression);
        if (this.parser) {
            var value = this.parser.parse(expression, viewModelContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    };
    /**
     * 获取数据的值
     */
    StateMachineContext.prototype.getData = function (expression) {
        if (!expression) {
            return;
        }
        var viewModelContext = this.stateMachineWatcher.getViewModelContext(expression);
        if (!viewModelContext) {
            return;
        }
        this.stateMachineWatcher.subscribeEntityChange(viewModelContext, expression);
        if (this.parser) {
            var value = this.parser.parse(expression, viewModelContext);
            if (value === null) {
                return null;
            }
            if (typeof value === 'object' && Object.keys(value).length === 0) {
                return null;
            }
            return value;
        }
        else {
            throw new Error('未初始化变量解析器。');
        }
    };
    return StateMachineContext;
}());
export { StateMachineContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfbWFjaGluZV9jb250ZXh0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3N0YXRlLW1hY2hpbmUvc3RhdGVfbWFjaGluZV9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBSXpEOztHQUVHO0FBQ0g7SUEyQkU7Ozs7T0FJRztJQUNILDZCQUFtQixZQUEwQixFQUFFLFlBQW1CO1FBQS9DLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzNDLElBQUksQ0FBQyxLQUFLLEdBQUcsWUFBWSxDQUFDLElBQUksQ0FBQztJQUNqQyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxrQ0FBSSxHQUFYLFVBQVksWUFBOEI7UUFDeEMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFlBQVksQ0FBQztRQUNyQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7UUFDdkUsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsbUJBQW1CLENBQUM7SUFDbkUsQ0FBQztJQUVEOzs7T0FHRztJQUNJLHVDQUFTLEdBQWhCLFVBQWlCLFNBQWlCO1FBQ2hDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ3RELElBQUksU0FBUyxFQUFFO1lBQ2IsSUFBSSxDQUFDLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDO1lBQzVCLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDNUI7SUFDSCxDQUFDO0lBRUQ7OztPQUdHO0lBQ0ksd0NBQVUsR0FBakIsVUFBa0IsVUFBa0I7UUFDbEMsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU87U0FDUjtRQUNELElBQU0sZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xGLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUNyQixPQUFPO1NBQ1I7UUFFRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsc0JBQXNCLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLENBQUM7UUFFOUUsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2YsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDOUQsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO2dCQUNsQixPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO2dCQUNoRSxPQUFPLElBQUksQ0FBQzthQUNiO1lBQ0QsT0FBTyxLQUFLLENBQUM7U0FDZDthQUFNO1lBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztTQUMvQjtJQUNILENBQUM7SUFFRDs7T0FFRztJQUNJLHFDQUFPLEdBQWQsVUFBZSxVQUFrQjtRQUMvQixJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTztTQUNSO1FBQ0QsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsbUJBQW1CLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbEYsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQ3JCLE9BQU87U0FDUjtRQUVELElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxxQkFBcUIsQ0FBQyxnQkFBZ0IsRUFBRSxVQUFVLENBQUMsQ0FBQztRQUU3RSxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDZixJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUM5RCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7Z0JBQ2xCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ2hFLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxPQUFPLEtBQUssQ0FBQztTQUNkO2FBQU07WUFDTCxNQUFNLElBQUksS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFDO1NBQy9CO0lBQ0gsQ0FBQztJQUNILDBCQUFDO0FBQUQsQ0FBQyxBQWpIRCxJQWlIQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFN0YXRlTWFjaGluZSB9IGZyb20gJy4vc3RhdGVfbWFjaGluZSc7XG5pbXBvcnQgeyBTdGF0ZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQ29udGV4dCB9IGZyb20gJy4uL2NvbnRleHQvY29udGV4dCc7XG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlU2VydmljZSB9IGZyb20gJy4uL3ZhcmlhYmxlL2luZGV4JztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcbmltcG9ydCB7IFN0YXRlTWFjaGluZVdhdGNoZXIgfSBmcm9tICcuL3N0YXRlX21hY2hpbmVfd2F0Y2hlcic7XG5cbi8qKlxuICog54q25oCB5py65LiK5LiL5paHXG4gKi9cbmV4cG9ydCBjbGFzcyBTdGF0ZU1hY2hpbmVDb250ZXh0IHtcblxuICAvKipcbiAgICog5b2T5YmN54q25oCB5ZCN56ewXG4gICAqL1xuICBwdWJsaWMgc3RhdGU6IHN0cmluZztcblxuICAvKipcbiAgICog54i2Q29udGV4dFxuICAgKi9cbiAgcHVibGljIHBhcmVudDogQ29udGV4dDtcblxuICAvKipcbiAgICog5Y+Y6YeP6Kej5p6Q5ZmoXG4gICAqL1xuICBwdWJsaWMgcGFyc2VyOiBhbnk7XG5cbiAgLyoqXG4gICAqIFZpZXdNb2RlbOS4iuS4i+aWh1xuICAgKi9cbiAgcHVibGljIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XG5cbiAgLyoqXG4gICAqIOeKtuaAgeacuuS6i+S7tuebkeWQrFxuICAgKi9cbiAgcHVibGljIHN0YXRlTWFjaGluZVdhdGNoZXI6IFN0YXRlTWFjaGluZVdhdGNoZXI7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKiBAcGFyYW0gc3RhdGVNYWNoaW5lIOeKtuaAgeacuuWunuS+i1xuICAgKiBAcGFyYW0gaW5pdGlhbFN0YXRlIOWIneWni+eKtuaAgVxuICAgKi9cbiAgY29uc3RydWN0b3IocHVibGljIHN0YXRlTWFjaGluZTogU3RhdGVNYWNoaW5lLCBpbml0aWFsU3RhdGU6IFN0YXRlKSB7XG4gICAgdGhpcy5zdGF0ZSA9IGluaXRpYWxTdGF0ZS5uYW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIneWni+WMllxuICAgKi9cbiAgcHVibGljIGluaXQoZnJhbWVDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gZnJhbWVDb250ZXh0O1xuICAgIHRoaXMucGFyc2VyID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmluamVjdG9yLmdldChWYXJpYWJsZVBhcnNlU2VydmljZSk7XG4gICAgdGhpcy5zdGF0ZU1hY2hpbmVXYXRjaGVyID0gdGhpcy5zdGF0ZU1hY2hpbmUuc3RhdGVNYWNoaW5lV2F0Y2hlcjtcbiAgfVxuXG4gIC8qKlxuICAgKiDnirbmgIHov4Hnp7tcbiAgICogQHBhcmFtIHN0YXRlTmFtZSDkuIvkuIDnirbmgIHnmoTlkI3np7BcbiAgICovXG4gIHB1YmxpYyB0cmFuc2l0VG8oc3RhdGVOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZXh0U3RhdGUgPSB0aGlzLnN0YXRlTWFjaGluZS5zdGF0ZXNbc3RhdGVOYW1lXTtcbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICB0aGlzLnN0YXRlID0gbmV4dFN0YXRlLm5hbWU7XG4gICAgICB0aGlzLnN0YXRlTWFjaGluZS5yZW5kZXIoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6I635Y+WZXhwcmVzc2lvbuWvueW6lOeahFVJU3RhdGXlgLxcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gVUlTdGF0ZeihqOi+vuW8j1xuICAgKi9cbiAgcHVibGljIGdldFVJU3RhdGUoZXhwcmVzc2lvbjogc3RyaW5nKTogYW55IHtcbiAgICBpZiAoIWV4cHJlc3Npb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3Qgdmlld01vZGVsQ29udGV4dCA9IHRoaXMuc3RhdGVNYWNoaW5lV2F0Y2hlci5nZXRWaWV3TW9kZWxDb250ZXh0KGV4cHJlc3Npb24pO1xuICAgIGlmICghdmlld01vZGVsQ29udGV4dCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHRoaXMuc3RhdGVNYWNoaW5lV2F0Y2hlci5zdWJzY3JpYmVVSVN0YXRlQ2hhbmdlKHZpZXdNb2RlbENvbnRleHQsIGV4cHJlc3Npb24pO1xuXG4gICAgaWYgKHRoaXMucGFyc2VyKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGFyc2VyLnBhcnNlKGV4cHJlc3Npb24sIHZpZXdNb2RlbENvbnRleHQpO1xuICAgICAgaWYgKHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgT2JqZWN0LmtleXModmFsdWUpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfmnKrliJ3lp4vljJblj5jph4/op6PmnpDlmajjgIInKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5pWw5o2u55qE5YC8XG4gICAqL1xuICBwdWJsaWMgZ2V0RGF0YShleHByZXNzaW9uOiBzdHJpbmcpOiBhbnkge1xuICAgIGlmICghZXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCB2aWV3TW9kZWxDb250ZXh0ID0gdGhpcy5zdGF0ZU1hY2hpbmVXYXRjaGVyLmdldFZpZXdNb2RlbENvbnRleHQoZXhwcmVzc2lvbik7XG4gICAgaWYgKCF2aWV3TW9kZWxDb250ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zdGF0ZU1hY2hpbmVXYXRjaGVyLnN1YnNjcmliZUVudGl0eUNoYW5nZSh2aWV3TW9kZWxDb250ZXh0LCBleHByZXNzaW9uKTtcblxuICAgIGlmICh0aGlzLnBhcnNlcikge1xuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnBhcnNlci5wYXJzZShleHByZXNzaW9uLCB2aWV3TW9kZWxDb250ZXh0KTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKHZhbHVlKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcign5pyq5Yid5aeL5YyW5Y+Y6YeP6Kej5p6Q5Zmo44CCJyk7XG4gICAgfVxuICB9XG59XG4iXX0=