import * as tslib_1 from "tslib";
import { Context } from '../context/index';
import { BindingDataFactory } from '../binding-data';
import { VALIDATION_RULE_TOKEN } from './tokens';
var AppContext = /** @class */ (function (_super) {
    tslib_1.__extends(AppContext, _super);
    /**
     * 构造函数
     */
    function AppContext(injector, eventBus, repositoryManager, bindingDataManager, viewModelContextManager, validationManager, validationRule) {
        if (validationManager === void 0) { validationManager = {}; }
        var _this = _super.call(this) || this;
        _this.injector = injector;
        _this.eventBus = eventBus;
        _this.repositoryManager = repositoryManager;
        _this.bindingDataManager = bindingDataManager;
        _this.viewModelContextManager = viewModelContextManager;
        _this.validationManager = validationManager;
        _this.validationRule = validationRule;
        _this.validationRule = injector.get(VALIDATION_RULE_TOKEN, []);
        return _this;
    }
    /**
     * 注册FrameContext
     */
    AppContext.prototype.regViewModelContext = function (viewModelContext) {
        var repository = viewModelContext.repository;
        var repositoryName = repository.name;
        // Repository
        if (this.repositoryManager.ifRepositoryExits(repositoryName) === false) {
            this.repositoryManager.regRepository(repositoryName, repository);
        }
        // BindingData
        if (this.bindingDataManager.ifBindingDataExits(repositoryName) === false) {
            var bindingData = BindingDataFactory.createFromRepository(repository, '/');
            this.bindingDataManager.regBindingData(repositoryName, bindingData);
        }
        // 考虑路由再次进入的时候，AppContext没有被注销，但Component被再次构造的场景
        this.viewModelContextManager.regContext(viewModelContext);
    };
    return AppContext;
}(Context));
export { AppContext };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwX2NvbnRleHQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYXBwL2FwcF9jb250ZXh0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFLckQsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sVUFBVSxDQUFBO0FBQ2hEO0lBQXlCLHNDQUFPO0lBRTlCOztPQUVHO0lBQ0gsb0JBQ1MsUUFBa0IsRUFDbEIsUUFBcUIsRUFDckIsaUJBQW9DLEVBQ3BDLGtCQUFzQyxFQUN0Qyx1QkFBZ0QsRUFDaEQsaUJBQXNCLEVBQ3RCLGNBQWM7UUFEZCxrQ0FBQSxFQUFBLHNCQUFzQjtRQU4vQixZQVNFLGlCQUFPLFNBRVI7UUFWUSxjQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLGNBQVEsR0FBUixRQUFRLENBQWE7UUFDckIsdUJBQWlCLEdBQWpCLGlCQUFpQixDQUFtQjtRQUNwQyx3QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO1FBQ3RDLDZCQUF1QixHQUF2Qix1QkFBdUIsQ0FBeUI7UUFDaEQsdUJBQWlCLEdBQWpCLGlCQUFpQixDQUFLO1FBQ3RCLG9CQUFjLEdBQWQsY0FBYyxDQUFBO1FBR3JCLEtBQUksQ0FBQyxjQUFjLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUMsQ0FBQzs7SUFDaEUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQW1CLEdBQTFCLFVBQTJCLGdCQUFrQztRQUUzRCxJQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUM7UUFDL0MsSUFBTSxjQUFjLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQUV2QyxhQUFhO1FBQ2IsSUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsaUJBQWlCLENBQUMsY0FBYyxDQUFDLEtBQUssS0FBSyxFQUFFO1lBQ3RFLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1NBQ2xFO1FBRUQsY0FBYztRQUNkLElBQUksSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxLQUFLLEtBQUssRUFBRTtZQUN4RSxJQUFNLFdBQVcsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsR0FBRyxDQUFDLENBQUM7WUFDN0UsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxjQUFjLEVBQUUsV0FBVyxDQUFDLENBQUM7U0FDckU7UUFFRCxpREFBaUQ7UUFDakQsSUFBSSxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFSCxpQkFBQztBQUFELENBQUMsQUF6Q0QsQ0FBeUIsT0FBTyxHQXlDL0I7QUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOW6lOeUqOS4iuS4i+aWh1xuICogQGF1dGhvciBXaXR0PGppd3RAaW5zcHVyLmNvbT5cbiAqIEB0b2RvXG4gKiAx44CBcGFybmV05ZKMQXBwQ29udGV4dE1hbmFnZXLmmK/lkKblv4XopoHvvJ/mjInnkIbor7TlsLHmmK/lupTor6XpmpTnprvkuIrkuIvmlofvvIzooajljZXkuYvpl7TpgJrov4fkuovku7bpgJrorq/ov5vooYzkuqTkupLvvJtcbiAqL1xuaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi92aWV3LW1vZGVsL2luZGV4JztcbmltcG9ydCB7IENvbnRleHQgfSBmcm9tICcuLi9jb250ZXh0L2luZGV4JztcbmltcG9ydCB7IEJpbmRpbmdEYXRhRmFjdG9yeSB9IGZyb20gJy4uL2JpbmRpbmctZGF0YSc7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vdmlld19tb2RlbF9jb250ZXhfbWFuYWdlcic7XG5pbXBvcnQgeyBSZXBvc2l0b3J5TWFuYWdlciB9IGZyb20gJy4vcmVwb3NpdG9yeV9tYW5hbmdlcic7XG5pbXBvcnQgeyBCaW5kaW5nRGF0YU1hbmFnZXIgfSBmcm9tICcuL2JpbmRpbmdfZGF0YV9tYW5hZ2VyJztcbmltcG9ydCB7IEFwcEV2ZW50QnVzIH0gZnJvbSAnLi9hcHBfZXZlbnRCdXMnO1xuaW1wb3J0IHsgVkFMSURBVElPTl9SVUxFX1RPS0VOIH0gZnJvbSAnLi90b2tlbnMnXG5jbGFzcyBBcHBDb250ZXh0IGV4dGVuZHMgQ29udGV4dCB7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwdWJsaWMgZXZlbnRCdXM6IEFwcEV2ZW50QnVzLFxuICAgIHB1YmxpYyByZXBvc2l0b3J5TWFuYWdlcjogUmVwb3NpdG9yeU1hbmFnZXIsXG4gICAgcHVibGljIGJpbmRpbmdEYXRhTWFuYWdlcjogQmluZGluZ0RhdGFNYW5hZ2VyLFxuICAgIHB1YmxpYyB2aWV3TW9kZWxDb250ZXh0TWFuYWdlcjogVmlld01vZGVsQ29udGV4dE1hbmFnZXIsXG4gICAgcHVibGljIHZhbGlkYXRpb25NYW5hZ2VyID0ge30sXG4gICAgcHVibGljIHZhbGlkYXRpb25SdWxlXG4gICkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy52YWxpZGF0aW9uUnVsZSA9IGluamVjdG9yLmdldChWQUxJREFUSU9OX1JVTEVfVE9LRU4sIFtdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDms6jlhoxGcmFtZUNvbnRleHRcbiAgICovXG4gIHB1YmxpYyByZWdWaWV3TW9kZWxDb250ZXh0KHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpOiB2b2lkIHtcblxuICAgIGNvbnN0IHJlcG9zaXRvcnkgPSB2aWV3TW9kZWxDb250ZXh0LnJlcG9zaXRvcnk7XG4gICAgY29uc3QgcmVwb3NpdG9yeU5hbWUgPSByZXBvc2l0b3J5Lm5hbWU7XG5cbiAgICAvLyBSZXBvc2l0b3J5XG4gICAgaWYgKHRoaXMucmVwb3NpdG9yeU1hbmFnZXIuaWZSZXBvc2l0b3J5RXhpdHMocmVwb3NpdG9yeU5hbWUpID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5yZXBvc2l0b3J5TWFuYWdlci5yZWdSZXBvc2l0b3J5KHJlcG9zaXRvcnlOYW1lLCByZXBvc2l0b3J5KTtcbiAgICB9XG5cbiAgICAvLyBCaW5kaW5nRGF0YVxuICAgIGlmICh0aGlzLmJpbmRpbmdEYXRhTWFuYWdlci5pZkJpbmRpbmdEYXRhRXhpdHMocmVwb3NpdG9yeU5hbWUpID09PSBmYWxzZSkge1xuICAgICAgY29uc3QgYmluZGluZ0RhdGEgPSBCaW5kaW5nRGF0YUZhY3RvcnkuY3JlYXRlRnJvbVJlcG9zaXRvcnkocmVwb3NpdG9yeSwgJy8nKTtcbiAgICAgIHRoaXMuYmluZGluZ0RhdGFNYW5hZ2VyLnJlZ0JpbmRpbmdEYXRhKHJlcG9zaXRvcnlOYW1lLCBiaW5kaW5nRGF0YSk7XG4gICAgfVxuXG4gICAgLy8g6ICD6JmR6Lev55Sx5YaN5qyh6L+b5YWl55qE5pe25YCZ77yMQXBwQ29udGV4dOayoeacieiiq+azqOmUgO+8jOS9hkNvbXBvbmVudOiiq+WGjeasoeaehOmAoOeahOWcuuaZr1xuICAgIHRoaXMudmlld01vZGVsQ29udGV4dE1hbmFnZXIucmVnQ29udGV4dCh2aWV3TW9kZWxDb250ZXh0KTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEFwcENvbnRleHQgfTtcbiJdfQ==