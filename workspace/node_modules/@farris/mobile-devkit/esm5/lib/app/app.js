import * as tslib_1 from "tslib";
import { createInjector } from '../core/index';
import { AppContext } from './app_context';
import { ViewModelContext, ViewModel } from '../view-model/index';
import { APP_BASE_PROVIDERS } from './providers';
import { APP_VARIABLE_PROVIDERS } from '../variable/index';
import { VIEW_MODEL_COMMAND_PROVIDERS } from '../command/index';
import { HTTP_PROVIDERS } from '../http/index';
import { VIEW_MODEL_EXPRESSION_PROVIDERS } from '../expression/index';
import { ControlsProxy } from '../control-proxy';
import { APP_CONTROL_STATE_PROVIDERS, VIEW_MODEL_CONTROL_STATE_PROVIDERS } from '../ui-state/control-state/providers';
var App = /** @class */ (function () {
    /**
     * 构造函数
     */
    function App(options) {
        options.providers = options.providers || [];
        var appProviders = tslib_1.__spread(APP_BASE_PROVIDERS, APP_VARIABLE_PROVIDERS, HTTP_PROVIDERS, APP_CONTROL_STATE_PROVIDERS, options.providers);
        var appInjector = createInjector(appProviders);
        this.context = appInjector.get(AppContext);
    }
    /**
     * 启用ViewModel
     */
    App.prototype.createViewModel = function (options) {
        var providers = options.providers || [];
        var parent = options.parent || null;
        var mergedProviders = tslib_1.__spread([
            { provide: ViewModelContext, useClass: ViewModelContext, deps: [] },
            { provide: ControlsProxy, useClass: ControlsProxy, deps: [] }
        ], VIEW_MODEL_COMMAND_PROVIDERS, VIEW_MODEL_EXPRESSION_PROVIDERS, VIEW_MODEL_CONTROL_STATE_PROVIDERS, providers);
        var parentInjector = parent ? parent.injector : this.context.injector;
        var injector = createInjector(mergedProviders, parentInjector);
        var viewModel = injector.get(ViewModel);
        viewModel.init();
        return viewModel;
    };
    return App;
}());
export { App };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2FwcC9hcHAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBNEIsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGdCQUFnQixFQUFFLFNBQVMsRUFBb0IsTUFBTSxxQkFBcUIsQ0FBQztBQUVwRixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDakQsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDM0QsT0FBTyxFQUFFLDRCQUE0QixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvQyxPQUFPLEVBQUUsK0JBQStCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDakQsT0FBTyxFQUFFLDJCQUEyQixFQUFFLGtDQUFrQyxFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFHdEg7SUFJRTs7T0FFRztJQUNILGFBQVksT0FBWTtRQUV0QixPQUFPLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLElBQUksRUFBRSxDQUFDO1FBQzVDLElBQU0sWUFBWSxvQkFDYixrQkFBa0IsRUFDbEIsc0JBQXNCLEVBQ3RCLGNBQWMsRUFDZCwyQkFBMkIsRUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FDckIsQ0FBQztRQUNGLElBQU0sV0FBVyxHQUFHLGNBQWMsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNqRCxJQUFJLENBQUMsT0FBTyxHQUFHLFdBQVcsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVEOztPQUVHO0lBQ0gsNkJBQWUsR0FBZixVQUFnQixPQUF5QjtRQUV2QyxJQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBUyxJQUFJLEVBQUUsQ0FBQztRQUMxQyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQztRQUV0QyxJQUFNLGVBQWU7WUFDbkIsRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsUUFBUSxFQUFFLGdCQUFnQixFQUFFLElBQUksRUFBRSxFQUFFLEVBQUU7WUFDbkUsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtXQUMxRCw0QkFBNEIsRUFDNUIsK0JBQStCLEVBQy9CLGtDQUFrQyxFQUNsQyxTQUFTLENBQ2IsQ0FBQztRQUVGLElBQU0sY0FBYyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLENBQUM7UUFDeEUsSUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLGVBQWUsRUFBRSxjQUFjLENBQUMsQ0FBQztRQUNqRSxJQUFNLFNBQVMsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFZLFNBQVMsQ0FBQyxDQUFDO1FBQ3JELFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNqQixPQUFPLFNBQVMsQ0FBQztJQUNuQixDQUFDO0lBRUgsVUFBQztBQUFELENBQUMsQUE3Q0QsSUE2Q0M7QUFFRCxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdGF0aWNQcm92aWRlciwgSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yfSBmcm9tICcuLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IEFwcENvbnRleHQgfSBmcm9tICcuL2FwcF9jb250ZXh0JztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQsIFZpZXdNb2RlbCwgVmlld01vZGVsT3B0aW9ucyB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xuXG5pbXBvcnQgeyBBUFBfQkFTRV9QUk9WSURFUlMgfSBmcm9tICcuL3Byb3ZpZGVycyc7XG5pbXBvcnQgeyBBUFBfVkFSSUFCTEVfUFJPVklERVJTIH0gZnJvbSAnLi4vdmFyaWFibGUvaW5kZXgnO1xuaW1wb3J0IHsgVklFV19NT0RFTF9DT01NQU5EX1BST1ZJREVSUyB9IGZyb20gJy4uL2NvbW1hbmQvaW5kZXgnO1xuaW1wb3J0IHsgSFRUUF9QUk9WSURFUlMgfSBmcm9tICcuLi9odHRwL2luZGV4JztcblxuaW1wb3J0IHsgVklFV19NT0RFTF9FWFBSRVNTSU9OX1BST1ZJREVSUyB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xuaW1wb3J0IHsgQ29udHJvbHNQcm94eSB9IGZyb20gJy4uL2NvbnRyb2wtcHJveHknO1xuaW1wb3J0IHsgQVBQX0NPTlRST0xfU1RBVEVfUFJPVklERVJTLCBWSUVXX01PREVMX0NPTlRST0xfU1RBVEVfUFJPVklERVJTIH0gZnJvbSAnLi4vdWktc3RhdGUvY29udHJvbC1zdGF0ZS9wcm92aWRlcnMnO1xuXG5cbmNsYXNzIEFwcCB7XG5cbiAgcHVibGljIGNvbnRleHQ6IEFwcENvbnRleHQ7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3Iob3B0aW9uczogYW55KSB7XG5cbiAgICBvcHRpb25zLnByb3ZpZGVycyA9IG9wdGlvbnMucHJvdmlkZXJzIHx8IFtdO1xuICAgIGNvbnN0IGFwcFByb3ZpZGVycyA9IFtcbiAgICAgIC4uLkFQUF9CQVNFX1BST1ZJREVSUyxcbiAgICAgIC4uLkFQUF9WQVJJQUJMRV9QUk9WSURFUlMsXG4gICAgICAuLi5IVFRQX1BST1ZJREVSUyxcbiAgICAgIC4uLkFQUF9DT05UUk9MX1NUQVRFX1BST1ZJREVSUyxcbiAgICAgIC4uLm9wdGlvbnMucHJvdmlkZXJzXG4gICAgXTtcbiAgICBjb25zdCBhcHBJbmplY3RvciA9IGNyZWF0ZUluamVjdG9yKGFwcFByb3ZpZGVycyk7XG4gICAgdGhpcy5jb250ZXh0ID0gYXBwSW5qZWN0b3IuZ2V0KEFwcENvbnRleHQpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWQr+eUqFZpZXdNb2RlbFxuICAgKi9cbiAgY3JlYXRlVmlld01vZGVsKG9wdGlvbnM6IFZpZXdNb2RlbE9wdGlvbnMpOiBWaWV3TW9kZWwge1xuXG4gICAgY29uc3QgcHJvdmlkZXJzID0gb3B0aW9ucy5wcm92aWRlcnMgfHwgW107XG4gICAgY29uc3QgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQgfHwgbnVsbDtcblxuICAgIGNvbnN0IG1lcmdlZFByb3ZpZGVyczogU3RhdGljUHJvdmlkZXJbXSA9IFtcbiAgICAgIHsgcHJvdmlkZTogVmlld01vZGVsQ29udGV4dCwgdXNlQ2xhc3M6IFZpZXdNb2RlbENvbnRleHQsIGRlcHM6IFtdIH0sXG4gICAgICB7IHByb3ZpZGU6IENvbnRyb2xzUHJveHksIHVzZUNsYXNzOiBDb250cm9sc1Byb3h5LCBkZXBzOiBbXSB9LFxuICAgICAgLi4uVklFV19NT0RFTF9DT01NQU5EX1BST1ZJREVSUyxcbiAgICAgIC4uLlZJRVdfTU9ERUxfRVhQUkVTU0lPTl9QUk9WSURFUlMsXG4gICAgICAuLi5WSUVXX01PREVMX0NPTlRST0xfU1RBVEVfUFJPVklERVJTLFxuICAgICAgLi4ucHJvdmlkZXJzXG4gICAgXTtcblxuICAgIGNvbnN0IHBhcmVudEluamVjdG9yID0gcGFyZW50ID8gcGFyZW50LmluamVjdG9yIDogdGhpcy5jb250ZXh0LmluamVjdG9yO1xuICAgIGNvbnN0IGluamVjdG9yID0gY3JlYXRlSW5qZWN0b3IobWVyZ2VkUHJvdmlkZXJzLCBwYXJlbnRJbmplY3Rvcik7XG4gICAgY29uc3Qgdmlld01vZGVsID0gaW5qZWN0b3IuZ2V0PFZpZXdNb2RlbD4oVmlld01vZGVsKTtcbiAgICB2aWV3TW9kZWwuaW5pdCgpO1xuICAgIHJldHVybiB2aWV3TW9kZWw7XG4gIH1cblxufVxuXG5leHBvcnQgeyBBcHAgfTtcbiJdfQ==