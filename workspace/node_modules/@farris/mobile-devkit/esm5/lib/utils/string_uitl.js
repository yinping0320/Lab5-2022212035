var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
       * 字符串格式化
       */
    StringUtil.format = function (value, options) {
        var maxLenght = options.maxLenght, _a = options.prefix, prefix = _a === void 0 ? '' : _a, _b = options.suffix, suffix = _b === void 0 ? '' : _b, _c = options.ellipsis, ellipsis = _c === void 0 ? '...' : _c;
        if (!maxLenght)
            return value;
        if (!value)
            return value;
        if (maxLenght && value.length > maxLenght) {
            value = value.slice(0, maxLenght);
            return prefix + value + suffix + ellipsis;
        }
        return prefix + value + suffix;
    };
    StringUtil.filterSearchValue = function (value, options) {
        if (value == undefined || value == null || value == '') {
            return value;
        }
        value = value.trim();
        if (options == undefined || options == null || options == '') {
            value = value.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            return value;
        }
        if (options && options.text == "") {
            value = value.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            return "<p>" + value + "</p>";
        }
        if (typeof options === 'string') {
            var re = new RegExp("" + options, 'g');
            var newStr = value.replace(re, "##s1p1##" + options + "##s2p2##");
            newStr = newStr.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            newStr = newStr.replace(/##s1p1##/g, '<span style="color:red">');
            newStr = newStr.replace(/##s2p2##/g, "</span>");
            return "<p>" + newStr + "</p>";
        }
        if (typeof options === 'object') {
            var text = options.text, style = options.style;
            var re = new RegExp("" + text, 'g');
            var newStr = value.replace(re, "##s1p1##" + style + "##s2p2##" + text + "##s3p3##");
            newStr = newStr.replace(/[<>&"]/g, function (c) { return { '<': '&lt;', '>': '&gt;', '&': '&amp;', '"': '&quot;' }[c]; });
            newStr = newStr.replace(/##s1p1##/g, "<span style=\"");
            newStr = newStr.replace(/##s2p2##/g, "\">");
            newStr = newStr.replace(/##s3p3##/g, "</span>");
            return "<p>" + newStr + "</p>";
        }
    };
    return StringUtil;
}());
export { StringUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyaW5nX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvc3RyaW5nX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQTtJQWdEQSxDQUFDO0lBOUNDOztTQUVLO0lBQ1MsaUJBQU0sR0FBcEIsVUFBcUIsS0FBYSxFQUFFLE9BQU87UUFDakMsSUFBQSw2QkFBUyxFQUFFLG1CQUFXLEVBQVgsZ0NBQVcsRUFBRSxtQkFBVyxFQUFYLGdDQUFXLEVBQUUscUJBQWdCLEVBQWhCLHFDQUFnQixDQUFhO1FBQzFFLElBQUksQ0FBQyxTQUFTO1lBQUUsT0FBTyxLQUFLLENBQUM7UUFDN0IsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPLEtBQUssQ0FBQztRQUN6QixJQUFJLFNBQVMsSUFBSSxLQUFLLENBQUMsTUFBTSxHQUFHLFNBQVMsRUFBRTtZQUN6QyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUE7WUFDakMsT0FBTyxNQUFNLEdBQUcsS0FBSyxHQUFHLE1BQU0sR0FBRyxRQUFRLENBQUM7U0FDM0M7UUFDRCxPQUFPLE1BQU0sR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDO0lBQ2pDLENBQUM7SUFFYSw0QkFBaUIsR0FBL0IsVUFBZ0MsS0FBVSxFQUFFLE9BQU87UUFDakQsSUFBSSxLQUFLLElBQUksU0FBUyxJQUFJLEtBQUssSUFBSSxJQUFJLElBQUksS0FBSyxJQUFJLEVBQUUsRUFBRTtZQUN0RCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUNyQixJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLElBQUksSUFBSSxPQUFPLElBQUksRUFBRSxFQUFFO1lBQzVELEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEgsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUNELElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFO1lBQ2pDLEtBQUssR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUMsSUFBSSxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEgsT0FBTyxLQUFLLEdBQUcsS0FBSyxHQUFHLE1BQU0sQ0FBQztTQUMvQjtRQUNELElBQUksT0FBTyxPQUFPLEtBQUssUUFBUSxFQUFFO1lBQy9CLElBQU0sRUFBRSxHQUFHLElBQUksTUFBTSxDQUFDLEtBQUcsT0FBUyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLElBQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLGFBQVcsT0FBTyxhQUFVLENBQUMsQ0FBQztZQUM3RCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsVUFBVSxDQUFDLElBQUksT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQzFILE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSwwQkFBMEIsQ0FBQyxDQUFDO1lBQ2pFLE1BQU0sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFdBQVcsRUFBRSxTQUFTLENBQUMsQ0FBQztZQUNoRCxPQUFPLFFBQU0sTUFBTSxTQUFNLENBQUM7U0FDM0I7UUFDRCxJQUFJLE9BQU8sT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUN2QixJQUFBLG1CQUFJLEVBQUUscUJBQUssQ0FBYTtZQUNoQyxJQUFNLEVBQUUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxLQUFHLElBQU0sRUFBRSxHQUFHLENBQUMsQ0FBQztZQUN0QyxJQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxVQUFVLEdBQUcsS0FBSyxHQUFHLFVBQVUsR0FBRyxJQUFJLEdBQUcsVUFBVSxDQUFDLENBQUM7WUFDcEYsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxJQUFJLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLE9BQU8sRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUMxSCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2RCxNQUFNLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDNUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO1lBQ2hELE9BQU8sUUFBTSxNQUFNLFNBQU0sQ0FBQztTQUMzQjtJQUNILENBQUM7SUFDSCxpQkFBQztBQUFELENBQUMsQUFoREQsSUFnREM7QUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBTdHJpbmdVdGlsIHtcblxuICAvKipcbiAgICAgKiDlrZfnrKbkuLLmoLzlvI/ljJZcbiAgICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3JtYXQodmFsdWU6IHN0cmluZywgb3B0aW9ucykge1xuICAgIGNvbnN0IHsgbWF4TGVuZ2h0LCBwcmVmaXggPSAnJywgc3VmZml4ID0gJycsIGVsbGlwc2lzID0gJy4uLicgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFtYXhMZW5naHQpIHJldHVybiB2YWx1ZTtcbiAgICBpZiAoIXZhbHVlKSByZXR1cm4gdmFsdWU7XG4gICAgaWYgKG1heExlbmdodCAmJiB2YWx1ZS5sZW5ndGggPiBtYXhMZW5naHQpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMCwgbWF4TGVuZ2h0KVxuICAgICAgcmV0dXJuIHByZWZpeCArIHZhbHVlICsgc3VmZml4ICsgZWxsaXBzaXM7XG4gICAgfVxuICAgIHJldHVybiBwcmVmaXggKyB2YWx1ZSArIHN1ZmZpeDtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZmlsdGVyU2VhcmNoVmFsdWUodmFsdWU6IGFueSwgb3B0aW9ucykge1xuICAgIGlmICh2YWx1ZSA9PSB1bmRlZmluZWQgfHwgdmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PSAnJykge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICB2YWx1ZSA9IHZhbHVlLnRyaW0oKTtcbiAgICBpZiAob3B0aW9ucyA9PSB1bmRlZmluZWQgfHwgb3B0aW9ucyA9PSBudWxsIHx8IG9wdGlvbnMgPT0gJycpIHtcbiAgICAgIHZhbHVlID0gdmFsdWUucmVwbGFjZSgvWzw+JlwiXS9nLCBmdW5jdGlvbiAoYykgeyByZXR1cm4geyAnPCc6ICcmbHQ7JywgJz4nOiAnJmd0OycsICcmJzogJyZhbXA7JywgJ1wiJzogJyZxdW90OycgfVtjXTsgfSk7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMudGV4dCA9PSBcIlwiKSB7XG4gICAgICB2YWx1ZSA9IHZhbHVlLnJlcGxhY2UoL1s8PiZcIl0vZywgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHsgJzwnOiAnJmx0OycsICc+JzogJyZndDsnLCAnJic6ICcmYW1wOycsICdcIic6ICcmcXVvdDsnIH1bY107IH0pO1xuICAgICAgcmV0dXJuIFwiPHA+XCIgKyB2YWx1ZSArIFwiPC9wPlwiO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYCR7b3B0aW9uc31gLCAnZycpO1xuICAgICAgbGV0IG5ld1N0ciA9IHZhbHVlLnJlcGxhY2UocmUsIGAjI3MxcDEjIyR7b3B0aW9uc30jI3MycDIjI2ApO1xuICAgICAgbmV3U3RyID0gbmV3U3RyLnJlcGxhY2UoL1s8PiZcIl0vZywgZnVuY3Rpb24gKGMpIHsgcmV0dXJuIHsgJzwnOiAnJmx0OycsICc+JzogJyZndDsnLCAnJic6ICcmYW1wOycsICdcIic6ICcmcXVvdDsnIH1bY107IH0pO1xuICAgICAgbmV3U3RyID0gbmV3U3RyLnJlcGxhY2UoLyMjczFwMSMjL2csICc8c3BhbiBzdHlsZT1cImNvbG9yOnJlZFwiPicpO1xuICAgICAgbmV3U3RyID0gbmV3U3RyLnJlcGxhY2UoLyMjczJwMiMjL2csIFwiPC9zcGFuPlwiKTtcbiAgICAgIHJldHVybiBgPHA+JHtuZXdTdHJ9PC9wPmA7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIGNvbnN0IHsgdGV4dCwgc3R5bGUgfSA9IG9wdGlvbnM7XG4gICAgICBjb25zdCByZSA9IG5ldyBSZWdFeHAoYCR7dGV4dH1gLCAnZycpO1xuICAgICAgbGV0IG5ld1N0ciA9IHZhbHVlLnJlcGxhY2UocmUsIFwiIyNzMXAxIyNcIiArIHN0eWxlICsgXCIjI3MycDIjI1wiICsgdGV4dCArIFwiIyNzM3AzIyNcIik7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvWzw+JlwiXS9nLCBmdW5jdGlvbiAoYykgeyByZXR1cm4geyAnPCc6ICcmbHQ7JywgJz4nOiAnJmd0OycsICcmJzogJyZhbXA7JywgJ1wiJzogJyZxdW90OycgfVtjXTsgfSk7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvIyNzMXAxIyMvZywgXCI8c3BhbiBzdHlsZT1cXFwiXCIpO1xuICAgICAgbmV3U3RyID0gbmV3U3RyLnJlcGxhY2UoLyMjczJwMiMjL2csIFwiXFxcIj5cIik7XG4gICAgICBuZXdTdHIgPSBuZXdTdHIucmVwbGFjZSgvIyNzM3AzIyMvZywgXCI8L3NwYW4+XCIpO1xuICAgICAgcmV0dXJuIGA8cD4ke25ld1N0cn08L3A+YDtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IHsgU3RyaW5nVXRpbCB9O1xuIl19