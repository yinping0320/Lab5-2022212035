var NumberUtil = /** @class */ (function () {
    function NumberUtil() {
    }
    /**
       * 数字格式化
       * {
       *   precision: 2,
       *   decimal: true,
       *   thousand: ','
       *   prefix: '',
       *   suffix: ''
       * }
       */
    NumberUtil.format = function (value, options) {
        // 参数处理
        var decimals = (options.precision || options.precision === 0) ? options.precision : 2;
        var decimalPoint = options.decimal || '.';
        var thousandsSep = options.thousand || '';
        var prefix = options.prefix || '';
        var suffix = options.suffix || '';
        var prefixType = options.prefixType;
        if (prefixType == "dynamic" && options.prefix) {
            // 表示前缀为一个函数  那么执行函数定义
            var prefixFunc = new Function("return " + options.prefix);
            prefix = prefixFunc()(options.sourceData);
        }
        value = (value + '').replace(/[^0-9+-Ee.]/g, '');
        var s;
        // 处理精度
        var toFixedFix = function (n, prec) {
            var k = Math.pow(10, prec);
            return '' + parseFloat(Math.round(parseFloat((n * k).toFixed(prec * 2))).toFixed(prec * 2)) / k;
        };
        s = ((decimals || decimals === 0) ? toFixedFix(value, decimals) : '' + Math.round(value)).split('.');
        // 处理千分位
        if (thousandsSep) {
            var pattern = /(-?\d+)(\d{3})/;
            while (pattern.test(s[0])) {
                s[0] = s[0].replace(pattern, "$1" + thousandsSep + "$2");
            }
            if ((s[1] || '').length < decimals) {
                s[1] = s[1] || '';
                s[1] += new Array(decimals - s[1].length + 1).join('0');
            }
        }
        var formatedValue = s.join(decimalPoint);
        formatedValue = "" + prefix + formatedValue + suffix;
        return formatedValue;
    };
    return NumberUtil;
}());
export { NumberUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyX3VpdGwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbnVtYmVyX3VpdGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFBQTtJQXVEQSxDQUFDO0lBckRDOzs7Ozs7Ozs7U0FTSztJQUNTLGlCQUFNLEdBQXBCLFVBQXFCLEtBQUssRUFBRSxPQUFPO1FBRWpDLE9BQU87UUFDUCxJQUFJLFFBQVEsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLFNBQVMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3RGLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDO1FBQzFDLElBQUksWUFBWSxHQUFHLE9BQU8sQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQzFDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBQ2xDLElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO1FBRWxDLElBQUksVUFBVSxHQUFHLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFDcEMsSUFBSSxVQUFVLElBQUksU0FBUyxJQUFJLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDN0Msc0JBQXNCO1lBQ3RCLElBQUksVUFBVSxHQUFHLElBQUksUUFBUSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDMUQsTUFBTSxHQUFHLFVBQVUsRUFBRSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztTQUMzQztRQUVELEtBQUssR0FBRyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxDQUFDO1FBRU4sT0FBTztRQUNQLElBQUksVUFBVSxHQUFHLFVBQVUsQ0FBQyxFQUFFLElBQUk7WUFDaEMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDM0IsT0FBTyxFQUFFLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDbEcsQ0FBQyxDQUFDO1FBQ0YsQ0FBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVyRyxRQUFRO1FBQ1IsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxPQUFPLEdBQUcsZ0JBQWdCLENBQUM7WUFDL0IsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFO2dCQUN6QixDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsSUFBSSxHQUFHLFlBQVksR0FBRyxJQUFJLENBQUMsQ0FBQzthQUMxRDtZQUNELElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxHQUFHLFFBQVEsRUFBRTtnQkFDbEMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7Z0JBQ2xCLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDekQ7U0FDRjtRQUVELElBQUksYUFBYSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7UUFDekMsYUFBYSxHQUFHLEtBQUcsTUFBTSxHQUFHLGFBQWEsR0FBRyxNQUFRLENBQUM7UUFDckQsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVILGlCQUFDO0FBQUQsQ0FBQyxBQXZERCxJQXVEQztBQUVELE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNsYXNzIE51bWJlclV0aWwge1xuXG4gIC8qKlxuICAgICAqIOaVsOWtl+agvOW8j+WMllxuICAgICAqIHtcbiAgICAgKiAgIHByZWNpc2lvbjogMixcbiAgICAgKiAgIGRlY2ltYWw6IHRydWUsXG4gICAgICogICB0aG91c2FuZDogJywnXG4gICAgICogICBwcmVmaXg6ICcnLFxuICAgICAqICAgc3VmZml4OiAnJ1xuICAgICAqIH1cbiAgICAgKi9cbiAgcHVibGljIHN0YXRpYyBmb3JtYXQodmFsdWUsIG9wdGlvbnMpIHtcblxuICAgIC8vIOWPguaVsOWkhOeQhlxuICAgIGxldCBkZWNpbWFscyA9IChvcHRpb25zLnByZWNpc2lvbiB8fCBvcHRpb25zLnByZWNpc2lvbiA9PT0gMCkgPyBvcHRpb25zLnByZWNpc2lvbiA6IDI7XG4gICAgbGV0IGRlY2ltYWxQb2ludCA9IG9wdGlvbnMuZGVjaW1hbCB8fCAnLic7XG4gICAgbGV0IHRob3VzYW5kc1NlcCA9IG9wdGlvbnMudGhvdXNhbmQgfHwgJyc7XG4gICAgbGV0IHByZWZpeCA9IG9wdGlvbnMucHJlZml4IHx8ICcnO1xuICAgIGxldCBzdWZmaXggPSBvcHRpb25zLnN1ZmZpeCB8fCAnJztcblxuICAgIGxldCBwcmVmaXhUeXBlID0gb3B0aW9ucy5wcmVmaXhUeXBlO1xuICAgIGlmIChwcmVmaXhUeXBlID09IFwiZHluYW1pY1wiICYmIG9wdGlvbnMucHJlZml4KSB7XG4gICAgICAvLyDooajnpLrliY3nvIDkuLrkuIDkuKrlh73mlbAgIOmCo+S5iOaJp+ihjOWHveaVsOWumuS5iVxuICAgICAgbGV0IHByZWZpeEZ1bmMgPSBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gXCIgKyBvcHRpb25zLnByZWZpeCk7XG4gICAgICBwcmVmaXggPSBwcmVmaXhGdW5jKCkob3B0aW9ucy5zb3VyY2VEYXRhKTtcbiAgICB9XG5cbiAgICB2YWx1ZSA9ICh2YWx1ZSArICcnKS5yZXBsYWNlKC9bXjAtOSstRWUuXS9nLCAnJyk7XG4gICAgbGV0IHM7XG5cbiAgICAvLyDlpITnkIbnsr7luqZcbiAgICBsZXQgdG9GaXhlZEZpeCA9IGZ1bmN0aW9uIChuLCBwcmVjKSB7XG4gICAgICB2YXIgayA9IE1hdGgucG93KDEwLCBwcmVjKTtcbiAgICAgIHJldHVybiAnJyArIHBhcnNlRmxvYXQoTWF0aC5yb3VuZChwYXJzZUZsb2F0KChuICogaykudG9GaXhlZChwcmVjICogMikpKS50b0ZpeGVkKHByZWMgKiAyKSkgLyBrO1xuICAgIH07XG4gICAgcyA9ICgoZGVjaW1hbHMgfHwgZGVjaW1hbHMgPT09IDApID8gdG9GaXhlZEZpeCh2YWx1ZSwgZGVjaW1hbHMpIDogJycgKyBNYXRoLnJvdW5kKHZhbHVlKSkuc3BsaXQoJy4nKTtcblxuICAgIC8vIOWkhOeQhuWNg+WIhuS9jVxuICAgIGlmICh0aG91c2FuZHNTZXApIHtcbiAgICAgIGxldCBwYXR0ZXJuID0gLygtP1xcZCspKFxcZHszfSkvO1xuICAgICAgd2hpbGUgKHBhdHRlcm4udGVzdChzWzBdKSkge1xuICAgICAgICBzWzBdID0gc1swXS5yZXBsYWNlKHBhdHRlcm4sIFwiJDFcIiArIHRob3VzYW5kc1NlcCArIFwiJDJcIik7XG4gICAgICB9XG4gICAgICBpZiAoKHNbMV0gfHwgJycpLmxlbmd0aCA8IGRlY2ltYWxzKSB7XG4gICAgICAgIHNbMV0gPSBzWzFdIHx8ICcnO1xuICAgICAgICBzWzFdICs9IG5ldyBBcnJheShkZWNpbWFscyAtIHNbMV0ubGVuZ3RoICsgMSkuam9pbignMCcpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBmb3JtYXRlZFZhbHVlID0gcy5qb2luKGRlY2ltYWxQb2ludCk7XG4gICAgZm9ybWF0ZWRWYWx1ZSA9IGAke3ByZWZpeH0ke2Zvcm1hdGVkVmFsdWV9JHtzdWZmaXh9YDtcbiAgICByZXR1cm4gZm9ybWF0ZWRWYWx1ZTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IE51bWJlclV0aWwgfTsiXX0=