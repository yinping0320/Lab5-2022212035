import { BindingPathConverter } from './binding_path_converter';
/**
 * BindingPath比较器
 */
var BindingPathComparer = /** @class */ (function () {
    function BindingPathComparer() {
    }
    /**
     * 是否相等
     */
    BindingPathComparer.isEqual = function (srcPath, dstPath) {
        var srcPathArray = BindingPathConverter.toBindingPathArray(srcPath);
        var dstPathArray = BindingPathConverter.toBindingPathArray(dstPath);
        var isEqual = srcPathArray.every(function (srcPathItem, srcPathIndex) {
            return srcPathItem === dstPathArray[srcPathIndex];
        });
        return isEqual;
    };
    /**
     * 是否是父路径
     */
    BindingPathComparer.isParent = function (childPath, parentPath) {
        var childPathArray = BindingPathConverter.toBindingPathArray(childPath);
        var parentPathArray = BindingPathConverter.toBindingPathArray(parentPath);
        // 长度差1个
        if (childPathArray.length !== parentPathArray.length + 1) {
            return;
        }
        return this.isAncestor(childPath, parentPath);
    };
    /**
     * 是否是祖先路径
     */
    BindingPathComparer.isAncestor = function (descendantPath, ancestorPath) {
        var descendantPathArray = BindingPathConverter.toBindingPathArray(descendantPath);
        var ancestorPathArray = BindingPathConverter.toBindingPathArray(ancestorPath);
        if (descendantPath.length <= ancestorPathArray.length) {
            return false;
        }
        var isAncestor = ancestorPathArray.every(function (ancestorPathItem, ancestorPathIndex) {
            return ancestorPathItem === descendantPathArray[ancestorPathIndex];
        });
        return isAncestor;
    };
    return BindingPathComparer;
}());
export { BindingPathComparer };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19wYXRoX2NvbXBhcmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3V0aWxzL2RhdGEtcGF0aC9iaW5kaW5nX3BhdGhfY29tcGFyZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFFaEU7O0dBRUc7QUFDSDtJQUFBO0lBa0RBLENBQUM7SUFoREM7O09BRUc7SUFDVywyQkFBTyxHQUFyQixVQUFzQixPQUEwQixFQUFFLE9BQTBCO1FBQzFFLElBQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RFLElBQU0sWUFBWSxHQUFHLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRFLElBQU0sT0FBTyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsVUFBQyxXQUFtQixFQUFFLFlBQW9CO1lBQzNFLE9BQU8sV0FBVyxLQUFLLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUNwRCxDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7T0FFRztJQUNXLDRCQUFRLEdBQXRCLFVBQXVCLFNBQTRCLEVBQUUsVUFBNkI7UUFFaEYsSUFBTSxjQUFjLEdBQUksb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDM0UsSUFBTSxlQUFlLEdBQUcsb0JBQW9CLENBQUMsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFNUUsUUFBUTtRQUNSLElBQUksY0FBYyxDQUFDLE1BQU0sS0FBSyxlQUFlLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUN4RCxPQUFPO1NBQ1I7UUFFRCxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRDs7T0FFRztJQUNXLDhCQUFVLEdBQXhCLFVBQXlCLGNBQWlDLEVBQUUsWUFBK0I7UUFDekYsSUFBTSxtQkFBbUIsR0FBRyxvQkFBb0IsQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUNwRixJQUFNLGlCQUFpQixHQUFLLG9CQUFvQixDQUFDLGtCQUFrQixDQUFDLFlBQVksQ0FBQyxDQUFDO1FBRWxGLElBQUksY0FBYyxDQUFDLE1BQU0sSUFBSSxpQkFBaUIsQ0FBQyxNQUFNLEVBQUU7WUFDckQsT0FBTyxLQUFLLENBQUM7U0FDZDtRQUVELElBQU0sVUFBVSxHQUFHLGlCQUFpQixDQUFDLEtBQUssQ0FBQyxVQUFDLGdCQUF3QixFQUFFLGlCQUF5QjtZQUM3RixPQUFPLGdCQUFnQixLQUFLLG1CQUFtQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDckUsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLFVBQVUsQ0FBQztJQUNwQixDQUFDO0lBRUgsMEJBQUM7QUFBRCxDQUFDLEFBbERELElBa0RDO0FBRUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5kaW5nUGF0aENvbnZlcnRlciB9IGZyb20gJy4vYmluZGluZ19wYXRoX2NvbnZlcnRlcic7XG5cbi8qKlxuICogQmluZGluZ1BhdGjmr5TovoPlmahcbiAqL1xuY2xhc3MgQmluZGluZ1BhdGhDb21wYXJlciB7XG5cbiAgLyoqXG4gICAqIOaYr+WQpuebuOetiVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0VxdWFsKHNyY1BhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBkc3RQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSkge1xuICAgIGNvbnN0IHNyY1BhdGhBcnJheSA9IEJpbmRpbmdQYXRoQ29udmVydGVyLnRvQmluZGluZ1BhdGhBcnJheShzcmNQYXRoKTtcbiAgICBjb25zdCBkc3RQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoZHN0UGF0aCk7XG5cbiAgICBjb25zdCBpc0VxdWFsID0gc3JjUGF0aEFycmF5LmV2ZXJ5KChzcmNQYXRoSXRlbTogc3RyaW5nLCBzcmNQYXRoSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgcmV0dXJuIHNyY1BhdGhJdGVtID09PSBkc3RQYXRoQXJyYXlbc3JjUGF0aEluZGV4XTtcbiAgICB9KTtcblxuICAgIHJldHVybiBpc0VxdWFsO1xuICB9XG5cbiAgLyoqXG4gICAqIOaYr+WQpuaYr+eItui3r+W+hFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc1BhcmVudChjaGlsZFBhdGg6IHN0cmluZyB8IHN0cmluZ1tdLCBwYXJlbnRQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuXG4gICAgY29uc3QgY2hpbGRQYXRoQXJyYXkgID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KGNoaWxkUGF0aCk7XG4gICAgY29uc3QgcGFyZW50UGF0aEFycmF5ID0gQmluZGluZ1BhdGhDb252ZXJ0ZXIudG9CaW5kaW5nUGF0aEFycmF5KHBhcmVudFBhdGgpO1xuXG4gICAgLy8g6ZW/5bqm5beuMeS4qlxuICAgIGlmIChjaGlsZFBhdGhBcnJheS5sZW5ndGggIT09IHBhcmVudFBhdGhBcnJheS5sZW5ndGggKyAxKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuaXNBbmNlc3RvcihjaGlsZFBhdGgsIHBhcmVudFBhdGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOaYr+WQpuaYr+elluWFiOi3r+W+hFxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBpc0FuY2VzdG9yKGRlc2NlbmRhbnRQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSwgYW5jZXN0b3JQYXRoOiBzdHJpbmcgfCBzdHJpbmdbXSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGRlc2NlbmRhbnRQYXRoQXJyYXkgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoZGVzY2VuZGFudFBhdGgpO1xuICAgIGNvbnN0IGFuY2VzdG9yUGF0aEFycmF5ICAgPSBCaW5kaW5nUGF0aENvbnZlcnRlci50b0JpbmRpbmdQYXRoQXJyYXkoYW5jZXN0b3JQYXRoKTtcblxuICAgIGlmIChkZXNjZW5kYW50UGF0aC5sZW5ndGggPD0gYW5jZXN0b3JQYXRoQXJyYXkubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgY29uc3QgaXNBbmNlc3RvciA9IGFuY2VzdG9yUGF0aEFycmF5LmV2ZXJ5KChhbmNlc3RvclBhdGhJdGVtOiBzdHJpbmcsIGFuY2VzdG9yUGF0aEluZGV4OiBudW1iZXIpID0+IHtcbiAgICAgIHJldHVybiBhbmNlc3RvclBhdGhJdGVtID09PSBkZXNjZW5kYW50UGF0aEFycmF5W2FuY2VzdG9yUGF0aEluZGV4XTtcbiAgICB9KTtcblxuICAgIHJldHVybiBpc0FuY2VzdG9yO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgQmluZGluZ1BhdGhDb21wYXJlciB9O1xuIl19