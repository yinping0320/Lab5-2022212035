import { ChangeType } from "../../binding-data";
import { ControlStateUpdater } from "./control_state_updater";
var ControlStateListener = /** @class */ (function () {
    function ControlStateListener(viewModelContext) {
        var _this = this;
        //监听订阅集合
        this.subscriptionsMap = new Map();
        this.viewModelContext = viewModelContext;
        this.controlStateUpdater = viewModelContext.injector.get(ControlStateUpdater);
        //更新器初始化完成后，注册监听,主动触发一次更新
        this.controlStateUpdater.init().subscribe(function (res) {
            _this.register();
            var changes = {
                lintenerType: 'firstUpdate',
                change: null
            };
            _this.controlStateUpdater.updateControlState(changes);
        });
    }
    /**
     *注册监听
     */
    ControlStateListener.prototype.register = function () {
        this.registerBindingDataLintener();
        this.registerUIStateLintener();
        this.registerStateMachineLintener();
        this.registerFormLintener();
    };
    /**
     * 监听BindingData变化
     */
    ControlStateListener.prototype.registerBindingDataLintener = function () {
        var _this = this;
        var stateName = 'bindingData';
        if (this.subscriptionsMap.has(stateName) === false) {
            var subscription = this.viewModelContext.bindingData.changes.subscribe(function (change) {
                if (change.type === ChangeType.Load) {
                    return;
                }
                _this.controlStateUpdater.updateControlState({
                    lintenerType: 'bindingData',
                    change: change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    };
    /**
     * 监听UIState变化
     */
    ControlStateListener.prototype.registerUIStateLintener = function () {
        var _this = this;
        var stateName = 'uiState';
        if (this.subscriptionsMap.has(stateName) === false) {
            var subscription = this.viewModelContext.uiState.changes.subscribe(function (change) {
                _this.controlStateUpdater.updateControlState({
                    lintenerType: 'uiState',
                    change: change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    };
    /**
     * 监听StateMachine变化
     */
    ControlStateListener.prototype.registerStateMachineLintener = function () {
        var _this = this;
        var stateName = 'stateMachine';
        if (this.subscriptionsMap.has(stateName) === false && this.viewModelContext.stateMachine) {
            var subscription = this.viewModelContext.stateMachine.stateChange.subscribe(function (change) {
                _this.controlStateUpdater.updateControlState({
                    lintenerType: 'stateMachine',
                    change: change
                });
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    };
    /**
     * 监听Form变化
     */
    ControlStateListener.prototype.registerFormLintener = function () {
        var _this = this;
        var stateName = 'form';
        if (this.subscriptionsMap.has(stateName) === false) {
            var subscription = this.viewModelContext.form.changes.subscribe(function (change) {
                if (change && change.type === 'validateFieldsFinished') {
                    _this.controlStateUpdater.updateControlState({
                        lintenerType: 'expression',
                        change: change
                    });
                }
                else {
                    _this.controlStateUpdater.updateControlState({
                        lintenerType: 'form',
                        change: change
                    });
                }
            });
            this.subscriptionsMap.set(stateName, subscription);
        }
    };
    return ControlStateListener;
}());
export { ControlStateListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbF9zdGF0ZV9saXN0ZW5lci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi91aS1zdGF0ZS9jb250cm9sLXN0YXRlL2NvbnRyb2xfc3RhdGVfbGlzdGVuZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFVLFVBQVUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBRXhELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRzlEO0lBV0UsOEJBQVksZ0JBQWtDO1FBQTlDLGlCQWdCQztRQXpCRCxRQUFRO1FBQ0EscUJBQWdCLEdBQThCLElBQUksR0FBRyxFQUF3QixDQUFDO1FBU3BGLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUN6QyxJQUFJLENBQUMsbUJBQW1CLEdBQUcsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1FBRzlFLHlCQUF5QjtRQUN6QixJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxFQUFFLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRztZQUMzQyxLQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsSUFBTSxPQUFPLEdBQUc7Z0JBQ2QsWUFBWSxFQUFDLGFBQWE7Z0JBQzFCLE1BQU0sRUFBQyxJQUFJO2FBQ1osQ0FBQTtZQUNELEtBQUksQ0FBQyxtQkFBbUIsQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUN2RCxDQUFDLENBQUMsQ0FBQTtJQUVKLENBQUM7SUFFRDs7T0FFRztJQUNLLHVDQUFRLEdBQWhCO1FBQ0UsSUFBSSxDQUFDLDJCQUEyQixFQUFFLENBQUM7UUFDbkMsSUFBSSxDQUFDLHVCQUF1QixFQUFFLENBQUM7UUFDL0IsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQUM7UUFDcEMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLENBQUM7SUFD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TTt3QkFDbkIsTUFBTSxRQUFBO3FCQUNQLENBQUMsQ0FBQztpQkFDSjtZQUVILENBQUMsQ0FBQyxDQUFDO1lBQ0gsSUFBSSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7U0FDcEQ7SUFDSCxDQUFDO0lBRUgsMkJBQUM7QUFBRCxDQUFDLEFBcEhELElBb0hDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgQ2hhbmdlLCBDaGFuZ2VUeXBlIH0gZnJvbSBcIi4uLy4uL2JpbmRpbmctZGF0YVwiO1xyXG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSBcIi4uLy4uL3ZpZXctbW9kZWxcIjtcclxuaW1wb3J0IHsgQ29udHJvbFN0YXRlVXBkYXRlciB9IGZyb20gXCIuL2NvbnRyb2xfc3RhdGVfdXBkYXRlclwiO1xyXG5pbXBvcnQgeyBVSVN0YXRlT2JzZXJ2YWJsZVBhcmFtIH0gZnJvbSBcIi4uL3VpX3N0YXRlXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgQ29udHJvbFN0YXRlTGlzdGVuZXIge1xyXG5cclxuICAvL+ebkeWQrOiuoumYhembhuWQiFxyXG4gIHByaXZhdGUgc3Vic2NyaXB0aW9uc01hcDogTWFwPHN0cmluZywgU3Vic2NyaXB0aW9uPiA9IG5ldyBNYXA8c3RyaW5nLCBTdWJzY3JpcHRpb24+KCk7XHJcblxyXG4gIC8v6KeG5Zu+5qih5Z6L5LiK5LiL5paHXHJcbiAgcHJpdmF0ZSB2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0O1xyXG5cclxuICAvL+abtOaWsOWZqFxyXG4gIHByaXZhdGUgY29udHJvbFN0YXRlVXBkYXRlcjpDb250cm9sU3RhdGVVcGRhdGVyO1xyXG5cclxuICBjb25zdHJ1Y3Rvcih2aWV3TW9kZWxDb250ZXh0OiBWaWV3TW9kZWxDb250ZXh0KSB7XHJcbiAgICB0aGlzLnZpZXdNb2RlbENvbnRleHQgPSB2aWV3TW9kZWxDb250ZXh0O1xyXG4gICAgdGhpcy5jb250cm9sU3RhdGVVcGRhdGVyID0gdmlld01vZGVsQ29udGV4dC5pbmplY3Rvci5nZXQoQ29udHJvbFN0YXRlVXBkYXRlcik7XHJcbiAgICBcclxuXHJcbiAgICAvL+abtOaWsOWZqOWIneWni+WMluWujOaIkOWQju+8jOazqOWGjOebkeWQrCzkuLvliqjop6blj5HkuIDmrKHmm7TmlrBcclxuICAgIHRoaXMuY29udHJvbFN0YXRlVXBkYXRlci5pbml0KCkuc3Vic2NyaWJlKHJlcz0+e1xyXG4gICAgICB0aGlzLnJlZ2lzdGVyKCk7XHJcblxyXG4gICAgICBjb25zdCBjaGFuZ2VzID0ge1xyXG4gICAgICAgIGxpbnRlbmVyVHlwZTonZmlyc3RVcGRhdGUnLFxyXG4gICAgICAgIGNoYW5nZTpudWxsXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5jb250cm9sU3RhdGVVcGRhdGVyLnVwZGF0ZUNvbnRyb2xTdGF0ZShjaGFuZ2VzKTtcclxuICAgIH0pXHJcblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICrms6jlhoznm5HlkKxcclxuICAgKi9cclxuICBwcml2YXRlIHJlZ2lzdGVyKCl7XHJcbiAgICB0aGlzLnJlZ2lzdGVyQmluZGluZ0RhdGFMaW50ZW5lcigpO1xyXG4gICAgdGhpcy5yZWdpc3RlclVJU3RhdGVMaW50ZW5lcigpO1xyXG4gICAgdGhpcy5yZWdpc3RlclN0YXRlTWFjaGluZUxpbnRlbmVyKCk7XHJcbiAgICB0aGlzLnJlZ2lzdGVyRm9ybUxpbnRlbmVyKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiDnm5HlkKxCaW5kaW5nRGF0YeWPmOWMllxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVnaXN0ZXJCaW5kaW5nRGF0YUxpbnRlbmVyKCkge1xyXG4gICAgY29uc3Qgc3RhdGVOYW1lID0gJ2JpbmRpbmdEYXRhJztcclxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnNNYXAuaGFzKHN0YXRlTmFtZSkgPT09IGZhbHNlKSB7XHJcbiAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IHRoaXMudmlld01vZGVsQ29udGV4dC5iaW5kaW5nRGF0YS5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBDaGFuZ2UpID0+IHtcclxuICAgICAgICBpZiAoY2hhbmdlLnR5cGUgPT09IENoYW5nZVR5cGUuTG9hZCkge1xyXG4gICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmNvbnRyb2xTdGF0ZVVwZGF0ZXIudXBkYXRlQ29udHJvbFN0YXRlKHtcclxuICAgICAgICAgIGxpbnRlbmVyVHlwZTonYmluZGluZ0RhdGEnLFxyXG4gICAgICAgICAgY2hhbmdlXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnNNYXAuc2V0KHN0YXRlTmFtZSwgc3Vic2NyaXB0aW9uKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIOebkeWQrFVJU3RhdGXlj5jljJZcclxuICAgKi9cclxuICBwcml2YXRlIHJlZ2lzdGVyVUlTdGF0ZUxpbnRlbmVyKCkge1xyXG4gICAgY29uc3Qgc3RhdGVOYW1lID0gJ3VpU3RhdGUnO1xyXG4gICAgaWYgKHRoaXMuc3Vic2NyaXB0aW9uc01hcC5oYXMoc3RhdGVOYW1lKSA9PT0gZmFsc2UpIHtcclxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGUuY2hhbmdlcy5zdWJzY3JpYmUoKGNoYW5nZTogVUlTdGF0ZU9ic2VydmFibGVQYXJhbSkgPT4ge1xyXG4gICAgICAgIHRoaXMuY29udHJvbFN0YXRlVXBkYXRlci51cGRhdGVDb250cm9sU3RhdGUoe1xyXG4gICAgICAgICAgbGludGVuZXJUeXBlOid1aVN0YXRlJyxcclxuICAgICAgICAgIGNoYW5nZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5zdWJzY3JpcHRpb25zTWFwLnNldChzdGF0ZU5hbWUsIHN1YnNjcmlwdGlvbik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBcclxuICAvKipcclxuICAgKiDnm5HlkKxTdGF0ZU1hY2hpbmXlj5jljJZcclxuICAgKi9cclxuICBwcml2YXRlIHJlZ2lzdGVyU3RhdGVNYWNoaW5lTGludGVuZXIoKSB7XHJcbiAgICBjb25zdCBzdGF0ZU5hbWUgPSAnc3RhdGVNYWNoaW5lJztcclxuICAgIGlmICh0aGlzLnN1YnNjcmlwdGlvbnNNYXAuaGFzKHN0YXRlTmFtZSkgPT09IGZhbHNlICYmIHRoaXMudmlld01vZGVsQ29udGV4dC5zdGF0ZU1hY2hpbmUpIHtcclxuICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LnN0YXRlTWFjaGluZS5zdGF0ZUNoYW5nZS5zdWJzY3JpYmUoKGNoYW5nZTogc3RyaW5nKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jb250cm9sU3RhdGVVcGRhdGVyLnVwZGF0ZUNvbnRyb2xTdGF0ZSh7XHJcbiAgICAgICAgICBsaW50ZW5lclR5cGU6J3N0YXRlTWFjaGluZScsXHJcbiAgICAgICAgICBjaGFuZ2VcclxuICAgICAgICB9KTtcclxuICAgICAgfSk7XHJcbiAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc01hcC5zZXQoc3RhdGVOYW1lLCBzdWJzY3JpcHRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgXHJcbiAgLyoqXHJcbiAgICog55uR5ZCsRm9ybeWPmOWMllxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVnaXN0ZXJGb3JtTGludGVuZXIoKSB7XHJcbiAgICBjb25zdCBzdGF0ZU5hbWUgPSAnZm9ybSc7XHJcbiAgICBpZiAodGhpcy5zdWJzY3JpcHRpb25zTWFwLmhhcyhzdGF0ZU5hbWUpID09PSBmYWxzZSkge1xyXG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuZm9ybS5jaGFuZ2VzLnN1YnNjcmliZSgoY2hhbmdlOiBhbnkpID0+IHtcclxuICAgICAgICBpZiAoY2hhbmdlICYmIGNoYW5nZS50eXBlID09PSAndmFsaWRhdGVGaWVsZHNGaW5pc2hlZCcpIHtcclxuICAgICAgICAgIHRoaXMuY29udHJvbFN0YXRlVXBkYXRlci51cGRhdGVDb250cm9sU3RhdGUoe1xyXG4gICAgICAgICAgICBsaW50ZW5lclR5cGU6J2V4cHJlc3Npb24nLFxyXG4gICAgICAgICAgICBjaGFuZ2VcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZXtcclxuICAgICAgICAgIHRoaXMuY29udHJvbFN0YXRlVXBkYXRlci51cGRhdGVDb250cm9sU3RhdGUoe1xyXG4gICAgICAgICAgICBsaW50ZW5lclR5cGU6J2Zvcm0nLFxyXG4gICAgICAgICAgICBjaGFuZ2VcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgIH0pO1xyXG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnNNYXAuc2V0KHN0YXRlTmFtZSwgc3Vic2NyaXB0aW9uKTtcclxuICAgIH1cclxuICB9XHJcbiAgXHJcbn0iXX0=