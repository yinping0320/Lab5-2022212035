import * as tslib_1 from "tslib";
import { shareReplay } from "rxjs/operators";
import { InjectFlags } from "../../core";
import { CONTROL_STATE_INTERCEPTOR_TOKEN, InitContext, ProcessContext } from "./control_state_interceptor";
import { forkJoin, isObservable, of } from "rxjs";
import { EnvUtil, UrlUtil } from "../../utils";
/**
 * 状态拦截器服务
 */
var ControlStateInterceptorService = /** @class */ (function () {
    function ControlStateInterceptorService(injector) {
        this.injector = injector;
        //控件状态拦截器
        this.controlInterceptors = [];
        this.controlInterceptors = this.injector.get(CONTROL_STATE_INTERCEPTOR_TOKEN, null, InjectFlags.Optional);
    }
    ControlStateInterceptorService.prototype.init = function () {
        var e_1, _a;
        if (this.result) {
            return this.result;
        }
        var inits = [];
        var initContext = new InitContext();
        var processContext = this.getProcessContext();
        initContext.processContext = this.processContext = processContext;
        try {
            for (var _b = tslib_1.__values(this.controlInterceptors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var controlInterceptor = _c.value;
                if (controlInterceptor.init && typeof controlInterceptor.init === 'function') {
                    var initFunc = controlInterceptor.init(initContext);
                    var $result = isObservable(initFunc) ? initFunc : of(initFunc);
                    inits.push($result);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return this.result = forkJoin(inits).pipe(shareReplay(1));
    };
    ControlStateInterceptorService.prototype.intercept = function (interceptContext) {
        var e_2, _a;
        interceptContext.processContext = this.processContext;
        try {
            for (var _b = tslib_1.__values(this.controlInterceptors), _c = _b.next(); !_c.done; _c = _b.next()) {
                var controlInterceptor = _c.value;
                controlInterceptor.intercept(interceptContext);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ControlStateInterceptorService.prototype.getProcessContext = function () {
        var processContext = new ProcessContext();
        var isInWf = EnvUtil.isInWf();
        processContext.isInWf = isInWf;
        if (isInWf === false) {
            return processContext;
        }
        var iframe = window.parent.document.querySelector('iframe');
        if (!iframe || !iframe.src) {
            return processContext;
        }
        var queryParams = UrlUtil.getParams(iframe.src);
        if (!queryParams) {
            return processContext;
        }
        processContext.uiStateInProcess = queryParams.UIStateInProcess;
        processContext.formConfigId = queryParams.formConfigId;
        return processContext;
    };
    return ControlStateInterceptorService;
}());
export { ControlStateInterceptorService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbF9zdGF0ZV9pbnRlcmNlcHRvci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL3VpLXN0YXRlL2NvbnRyb2wtc3RhdGUvY29udHJvbF9zdGF0ZV9pbnRlcmNlcHRvci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFdBQVcsRUFBWSxNQUFNLFlBQVksQ0FBQztBQUNuRCxPQUFPLEVBQUUsK0JBQStCLEVBQTZDLFdBQVcsRUFBRSxjQUFjLEVBQUUsTUFBTSw2QkFBNkIsQ0FBQztBQUN0SixPQUFPLEVBQWMsUUFBUSxFQUFFLFlBQVksRUFBRSxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDOUQsT0FBTyxFQUFFLE9BQU8sRUFBRSxPQUFPLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFFOUM7O0dBRUc7QUFDSDtJQVFJLHdDQUFvQixRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBTnRDLFNBQVM7UUFDRCx3QkFBbUIsR0FBOEIsRUFBRSxDQUFDO1FBTXhELElBQUksQ0FBQyxtQkFBbUIsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQywrQkFBK0IsRUFBRSxJQUFJLEVBQUUsV0FBVyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzlHLENBQUM7SUFFTSw2Q0FBSSxHQUFYOztRQUNJLElBQUcsSUFBSSxDQUFDLE1BQU0sRUFBQztZQUNYLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUN0QjtRQUVELElBQU0sS0FBSyxHQUFHLEVBQUUsQ0FBQztRQUNqQixJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLElBQU0sY0FBYyxHQUFHLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1FBQ2hELFdBQVcsQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7O1lBRWxFLEtBQWdDLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsbUJBQW1CLENBQUEsZ0JBQUEsNEJBQUM7Z0JBQXJELElBQU0sa0JBQWtCLFdBQUE7Z0JBQ3hCLElBQUcsa0JBQWtCLENBQUMsSUFBSSxJQUFJLE9BQU8sa0JBQWtCLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBQztvQkFDeEUsSUFBTSxRQUFRLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO29CQUN0RCxJQUFNLE9BQU8sR0FBRyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO29CQUNqRSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2lCQUN2QjthQUNKOzs7Ozs7Ozs7UUFFRCxPQUFPLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RCxDQUFDO0lBRU0sa0RBQVMsR0FBaEIsVUFBaUIsZ0JBQWlDOztRQUM5QyxnQkFBZ0IsQ0FBQyxjQUFjLEdBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQzs7WUFDdkQsS0FBZ0MsSUFBQSxLQUFBLGlCQUFBLElBQUksQ0FBQyxtQkFBbUIsQ0FBQSxnQkFBQSw0QkFBQztnQkFBckQsSUFBTSxrQkFBa0IsV0FBQTtnQkFDeEIsa0JBQWtCLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7YUFDbEQ7Ozs7Ozs7OztJQUNMLENBQUM7SUFFTywwREFBaUIsR0FBekI7UUFDSSxJQUFNLGNBQWMsR0FBRyxJQUFLLGNBQWMsRUFBRSxDQUFDO1FBQzdDLElBQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxjQUFjLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztRQUMvQixJQUFJLE1BQU0sS0FBSyxLQUFLLEVBQUU7WUFDbEIsT0FBTyxjQUFjLENBQUE7U0FDeEI7UUFFRCxJQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLEVBQUU7WUFDeEIsT0FBTyxjQUFjLENBQUE7U0FDeEI7UUFFRCxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ2QsT0FBTyxjQUFjLENBQUE7U0FDeEI7UUFFRCxjQUFjLENBQUMsZ0JBQWdCLEdBQUcsV0FBVyxDQUFDLGdCQUFnQixDQUFDO1FBQy9ELGNBQWMsQ0FBQyxZQUFZLEdBQUcsV0FBVyxDQUFDLFlBQVksQ0FBQztRQUV2RCxPQUFPLGNBQWMsQ0FBQTtJQUN6QixDQUFDO0lBR0wscUNBQUM7QUFBRCxDQUFDLEFBakVELElBaUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgc2hhcmVSZXBsYXkgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuaW1wb3J0IHsgSW5qZWN0RmxhZ3MsIEluamVjdG9yIH0gZnJvbSBcIi4uLy4uL2NvcmVcIjtcclxuaW1wb3J0IHsgQ09OVFJPTF9TVEFURV9JTlRFUkNFUFRPUl9UT0tFTiwgSW50ZXJjZXB0Q29udGV4dCwgQ29udHJvbFN0YXRlSW50ZXJjZXB0b3IsIEluaXRDb250ZXh0LCBQcm9jZXNzQ29udGV4dCB9IGZyb20gXCIuL2NvbnRyb2xfc3RhdGVfaW50ZXJjZXB0b3JcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgZm9ya0pvaW4sIGlzT2JzZXJ2YWJsZSwgb2YgfSBmcm9tIFwicnhqc1wiO1xyXG5pbXBvcnQgeyBFbnZVdGlsLCBVcmxVdGlsfSBmcm9tIFwiLi4vLi4vdXRpbHNcIjtcclxuXHJcbi8qKlxyXG4gKiDnirbmgIHmi6bmiKrlmajmnI3liqFcclxuICovXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sU3RhdGVJbnRlcmNlcHRvclNlcnZpY2V7XHJcblxyXG4gICAgLy/mjqfku7bnirbmgIHmi6bmiKrlmahcclxuICAgIHByaXZhdGUgY29udHJvbEludGVyY2VwdG9yczogQ29udHJvbFN0YXRlSW50ZXJjZXB0b3JbXSA9IFtdO1xyXG4gICAgcHJpdmF0ZSByZXN1bHQ6T2JzZXJ2YWJsZTxhbnk+O1xyXG5cclxuICAgIHByaXZhdGUgcHJvY2Vzc0NvbnRleHQ6IFByb2Nlc3NDb250ZXh0O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yKXtcclxuICAgICAgICB0aGlzLmNvbnRyb2xJbnRlcmNlcHRvcnMgPSB0aGlzLmluamVjdG9yLmdldChDT05UUk9MX1NUQVRFX0lOVEVSQ0VQVE9SX1RPS0VOLCBudWxsLCBJbmplY3RGbGFncy5PcHRpb25hbCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGluaXQoKTpPYnNlcnZhYmxlPGFueT57XHJcbiAgICAgICAgaWYodGhpcy5yZXN1bHQpe1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXN1bHQ7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBpbml0cyA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGluaXRDb250ZXh0ID0gbmV3IEluaXRDb250ZXh0KCk7XHJcbiAgICAgICAgY29uc3QgcHJvY2Vzc0NvbnRleHQgPSB0aGlzLmdldFByb2Nlc3NDb250ZXh0KCk7XHJcbiAgICAgICAgaW5pdENvbnRleHQucHJvY2Vzc0NvbnRleHQgPSB0aGlzLnByb2Nlc3NDb250ZXh0ID0gcHJvY2Vzc0NvbnRleHQ7XHJcblxyXG4gICAgICAgIGZvcihjb25zdCBjb250cm9sSW50ZXJjZXB0b3Igb2YgdGhpcy5jb250cm9sSW50ZXJjZXB0b3JzKXtcclxuICAgICAgICAgICAgaWYoY29udHJvbEludGVyY2VwdG9yLmluaXQgJiYgdHlwZW9mIGNvbnRyb2xJbnRlcmNlcHRvci5pbml0ID09PSAnZnVuY3Rpb24nKXtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGluaXRGdW5jID0gY29udHJvbEludGVyY2VwdG9yLmluaXQoaW5pdENvbnRleHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgJHJlc3VsdCA9IGlzT2JzZXJ2YWJsZShpbml0RnVuYykgPyBpbml0RnVuYyA6IG9mKGluaXRGdW5jKTtcclxuICAgICAgICAgICAgICAgIGluaXRzLnB1c2goJHJlc3VsdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLnJlc3VsdCA9IGZvcmtKb2luKGluaXRzKS5waXBlKHNoYXJlUmVwbGF5KDEpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgaW50ZXJjZXB0KGludGVyY2VwdENvbnRleHQ6SW50ZXJjZXB0Q29udGV4dCkge1xyXG4gICAgICAgIGludGVyY2VwdENvbnRleHQucHJvY2Vzc0NvbnRleHQgID0gdGhpcy5wcm9jZXNzQ29udGV4dDtcclxuICAgICAgICBmb3IoY29uc3QgY29udHJvbEludGVyY2VwdG9yIG9mIHRoaXMuY29udHJvbEludGVyY2VwdG9ycyl7XHJcbiAgICAgICAgICAgIGNvbnRyb2xJbnRlcmNlcHRvci5pbnRlcmNlcHQoaW50ZXJjZXB0Q29udGV4dCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgZ2V0UHJvY2Vzc0NvbnRleHQoKTpQcm9jZXNzQ29udGV4dHtcclxuICAgICAgICBjb25zdCBwcm9jZXNzQ29udGV4dCA9IG5ldyAgUHJvY2Vzc0NvbnRleHQoKTtcclxuICAgICAgICBjb25zdCBpc0luV2YgPSBFbnZVdGlsLmlzSW5XZigpO1xyXG4gICAgICAgIHByb2Nlc3NDb250ZXh0LmlzSW5XZiA9IGlzSW5XZjtcclxuICAgICAgICBpZiAoaXNJbldmID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzc0NvbnRleHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlmcmFtZSA9IHdpbmRvdy5wYXJlbnQuZG9jdW1lbnQucXVlcnlTZWxlY3RvcignaWZyYW1lJyk7XHJcbiAgICAgICAgaWYgKCFpZnJhbWUgfHwgIWlmcmFtZS5zcmMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NDb250ZXh0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBxdWVyeVBhcmFtcyA9IFVybFV0aWwuZ2V0UGFyYW1zKGlmcmFtZS5zcmMpO1xyXG4gICAgICAgIGlmICghcXVlcnlQYXJhbXMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NDb250ZXh0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBwcm9jZXNzQ29udGV4dC51aVN0YXRlSW5Qcm9jZXNzID0gcXVlcnlQYXJhbXMuVUlTdGF0ZUluUHJvY2VzcztcclxuICAgICAgICBwcm9jZXNzQ29udGV4dC5mb3JtQ29uZmlnSWQgPSBxdWVyeVBhcmFtcy5mb3JtQ29uZmlnSWQ7XHJcblxyXG4gICAgICAgIHJldHVybiBwcm9jZXNzQ29udGV4dFxyXG4gICAgfVxyXG4gICAgXHJcblxyXG59XHJcblxyXG4iXX0=