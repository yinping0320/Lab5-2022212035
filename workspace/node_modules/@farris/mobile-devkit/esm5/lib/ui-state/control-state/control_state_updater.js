import * as tslib_1 from "tslib";
import { UIStateMetadataUtil } from "../uistate_metadata_util";
import { ControlStateInterceptorService } from "./control_state_interceptor.service";
import { InterceptContext } from "./control_state_interceptor";
var ControlStateUpdater = /** @class */ (function () {
    function ControlStateUpdater(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.controlStateInterceptorService = viewModelContext.injector.get(ControlStateInterceptorService);
    }
    /**
     * 初始化
     * @returns
     */
    ControlStateUpdater.prototype.init = function () {
        return this.controlStateInterceptorService.init();
    };
    /**
     * 更新【描述控件状态】的变量
     * @param changes 监听到的变化
     */
    ControlStateUpdater.prototype.updateControlState = function (changes) {
        var _this = this;
        //1.获取【描述控件状态】的变量，并缓存
        if (!this.controlFields) {
            var uiState = this.viewModelContext.uiState;
            this.controlFields = UIStateMetadataUtil.getControlFields(uiState.constructor);
            this.variableNames = Object.keys(this.controlFields);
        }
        //2.更新前事件
        if (!this.beforeUpdate(changes)) {
            return;
        }
        //3.遍历变量，进行更新
        this.variableNames.forEach(function (variableName) {
            var fieldMetadata = _this.controlFields[variableName];
            //遍历默认值
            Object.keys(fieldMetadata.originalValue).forEach(function (propertyName) {
                //更新
                _this.update(changes, fieldMetadata, variableName, propertyName);
            });
        });
    };
    /**
     * 更新前事件
     * @param changes
     * @returns
     */
    ControlStateUpdater.prototype.beforeUpdate = function (changes) {
        //1.没有【控件状态变量】，无需更新
        if (!this.variableNames) {
            return false;
        }
        var lintenerType = changes.lintenerType, change = changes.change;
        //2.【控件状态变量】变化时，不做处理。否则会造成循环调用
        if (lintenerType === 'uiState' && this.variableNames.includes(change.field)) {
            return false;
        }
        return true;
    };
    /**
     * 更新
     * @param changes 监听到的变化
     * @param fieldMetadata 变量的元数据
     * @param variableName 变量名
     * @param propertyName 控件的属性名
     * @returns
     */
    ControlStateUpdater.prototype.update = function (changes, fieldMetadata, variableName, propertyName) {
        var _a;
        var propertyValue = fieldMetadata.originalValue[propertyName];
        //1.是否需要更新
        if (!this.needUpdate(propertyValue, changes)) {
            return;
        }
        //2.计算原始值
        var value = this.computeOriginalValue(propertyValue);
        //3.拦截器处理
        var interceptContext = new InterceptContext();
        interceptContext.controlState = fieldMetadata;
        interceptContext.value = value;
        interceptContext.type = propertyName;
        interceptContext.viewModelContext = this.viewModelContext;
        if (this.controlStateInterceptorService) {
            this.controlStateInterceptorService.intercept(interceptContext);
        }
        //4.更新状态
        var uiState = this.viewModelContext.uiState;
        if (!uiState[variableName]) {
            uiState[variableName] = {};
        }
        uiState[variableName] = tslib_1.__assign({}, uiState[variableName], (_a = {}, _a[propertyName] = interceptContext.value, _a));
        //5.更新后事件
        this.afterUpdate(propertyName, interceptContext);
    };
    /**
     * 是否需要新
     * @param originalValue
     * @returns
     */
    ControlStateUpdater.prototype.needUpdate = function (originalValue, changes) {
        var type = originalValue.type, value = originalValue.value;
        var lintenerType = changes.lintenerType, change = changes.change;
        //1.第一次更新全部
        if (lintenerType === 'firstUpdate') {
            return true;
        }
        //2.固定值类型：只在第一次更新，后续不需要更新
        if (type === 'constant') {
            return false;
        }
        //3.value为空，也是固定值,也不需要更新
        if (!value) {
            return false;
        }
        //4.表达式类型：监听到表达式变化，直接更新表达式变量
        if (type === 'expression' && lintenerType === 'expression') {
            return true;
        }
        //5.根据监听到变化的类型判断
        switch (lintenerType) {
            case 'bindingData': {
                if (change && change.path && change.path.length > 0) {
                    if (value.includes(change.path[0])) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                break;
            }
            case 'uiState': {
                if (change && change.field) {
                    if (value.includes(change.field)) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
                break;
            }
            case 'stateMachine': {
                if (value.includes('stateMachine')) {
                    return true;
                }
                else {
                    return false;
                }
                break;
            }
            case 'form': {
                if (value.includes('form')) {
                    return true;
                }
                else {
                    return false;
                }
                break;
            }
        }
        return true;
    };
    /**
     * 计算变量的值
     * @param originalValue
     * @returns
     */
    ControlStateUpdater.prototype.computeOriginalValue = function (originalValue) {
        var value = originalValue.value;
        var type = originalValue.type;
        if (value && typeof value === 'string' && type !== 'constant') {
            var context = {
                bindingData: this.viewModelContext.bindingData.list.currentItem.toJSON(),
                entityListData: this.viewModelContext.bindingData.getList().toJSON(),
                currentEntityData: this.viewModelContext.bindingData.getObject().toJSON(),
                uiState: this.viewModelContext.uiState,
                form: this.viewModelContext.viewModel.form,
                stateMachine: this.viewModelContext.stateMachine.renderStates,
            };
            return this.eval(value, context);
        }
        return value;
    };
    /**
     * 计算
     * @param expr 变量
     * @param contexts 上下文
     * @returns
     */
    ControlStateUpdater.prototype.eval = function (expr, contexts) {
        expr = "return " + expr;
        var scopeNames = Object.getOwnPropertyNames(contexts);
        var scopeVariable = "__scope__" + new Date().valueOf();
        return new Function(scopeVariable, "\n          " + scopeNames.map(function (key) { return "var " + key + " = " + scopeVariable + "['" + key + "'];"; }).join('\r\n') + "\n          return function () {\n            try{  \n" + expr + "\n }catch(e){console.error(e);}\n          };")(contexts)();
    };
    /**
     * 更新变量后，需要进行的操作
     * @param propertyName
     * @param interceptContext
     */
    ControlStateUpdater.prototype.afterUpdate = function (propertyName, interceptContext) {
        //1.必填处理
        if (propertyName === 'required') {
            this.updateRequired(interceptContext);
        }
    };
    /**
     * 更新必填状态
     * @param fieldMetadata
     * @param interceptContext
     * @returns
     */
    ControlStateUpdater.prototype.updateRequired = function (interceptContext) {
        var bindingPath = interceptContext.controlState.controlInfo.bindingPath;
        if (!bindingPath) {
            return;
        }
        var form = this.viewModelContext.form;
        var formControl = form.getFormValueByBindPath(bindingPath);
        var form_name = formControl.form_name;
        if (!form_name || Object.keys(form_name).length === 0) {
            return;
        }
        var validators = [{ "type": "required", "constraints": [true], message: '必填' }];
        if (interceptContext.value === true) {
            form.addValidate(formControl.bindingPath, formControl.name);
            form_name.pushValidatorFnforRequired(validators, true);
            form_name.required = true;
        }
        else if (interceptContext.value === false) {
            if (form_name.getValidatorFn() && form_name.getValidatorFn().length >= 1) {
                form_name.required = false;
                //去除必填
                form_name.resetValidatorFnforRequired();
                if (form_name.validationResult && form_name.validationResult.type === 'required') {
                    form_name.validationResult = { passing: true, message: '' };
                }
            }
        }
    };
    return ControlStateUpdater;
}());
export { ControlStateUpdater };
//# sourceMappingURL=data:application/json;base64,