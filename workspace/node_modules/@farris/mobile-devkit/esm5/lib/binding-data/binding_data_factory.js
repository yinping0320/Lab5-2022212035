import { PropertyUtil as BindingPropertyUtil } from './property_util';
import { EntityUtil as EntityLoadUtil } from './entity_util';
import { BindingListFactory } from './binding_list_factory';
import { BindingData } from './binding_data';
var BindingDataFactory = /** @class */ (function () {
    function BindingDataFactory() {
    }
    /**
     * 根据Repository创建一个BindingData
     */
    BindingDataFactory.createFromRepository = function (repository, bindingPath) {
        var bindingData = new BindingData();
        var bindingProperties = BindingPropertyUtil.getProperties(repository.entityType);
        var bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null, repository.entityTypeInfo);
        EntityLoadUtil.loadRepository(repository, bindingList);
        // 从repository初始化bindingData
        bindingData.pagingInfo = repository.entityCollection.paginationInfo;
        return bindingData;
    };
    /**
     * 根据EntityManager创建BindingData，并建立双向关联（请勿使用）
     * @internal
     * @summary
     * 1、该方法暂时仅供内部单元测试使用；
     * 2、该方法暂时只创建BindingData，不建立双向关联
     */
    BindingDataFactory.createFromEntityManager = function (entityManager, bindingPath) {
        var bindingData = new BindingData();
        var bindingProperties = BindingPropertyUtil.getProperties(entityManager.entityType);
        var bindingList = BindingListFactory.create(bindingProperties);
        bindingData.initByBindingList(bindingList, null, entityManager.entityCollection.entityTypeInfo);
        // 初始化数据
        var entities = entityManager.getEntitiesByPath([]);
        EntityLoadUtil.loadEntities(entities, bindingList);
        return bindingData;
    };
    /**
     * 根据已经存在的BindingData创建一个新的BindingData
     */
    BindingDataFactory.createFromExistingBindingData = function (existingBindingData, bindingPath) {
        var bindingData = new BindingData();
        bindingData.initByBindingList(existingBindingData.list, null, bindingData.dataTypeInfo);
        return bindingData;
    };
    return BindingDataFactory;
}());
export { BindingDataFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2ZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvYmluZGluZy1kYXRhL2JpbmRpbmdfZGF0YV9mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLElBQUksbUJBQW1CLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN0RSxPQUFPLEVBQUUsVUFBVSxJQUFJLGNBQWMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0M7SUFBQTtJQTZDQSxDQUFDO0lBM0NDOztPQUVHO0lBQ1csdUNBQW9CLEdBQWxDLFVBQW1DLFVBQThCLEVBQUUsV0FBbUI7UUFDcEYsSUFBTSxXQUFXLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUN0QyxJQUFNLGlCQUFpQixHQUFHLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDbkYsSUFBTSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakUsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsRUFBRSxJQUFJLEVBQUUsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzVFLGNBQWMsQ0FBQyxjQUFjLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRXZELDRCQUE0QjtRQUM1QixXQUFXLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUM7UUFDcEUsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQztJQUVEOzs7Ozs7T0FNRztJQUNXLDBDQUF1QixHQUFyQyxVQUFzQyxhQUFvQyxFQUFFLFdBQW1CO1FBQzdGLElBQU0sV0FBVyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUM7UUFDdEMsSUFBTSxpQkFBaUIsR0FBRyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsYUFBYSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3RGLElBQU0sV0FBVyxHQUFHLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1FBQ2pFLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxFQUFFLGFBQWEsQ0FBQyxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUVoRyxRQUFRO1FBQ1IsSUFBTSxRQUFRLEdBQWEsYUFBYSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQy9ELGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBRW5ELE9BQU8sV0FBVyxDQUFDO0lBQ3JCLENBQUM7SUFFRDs7T0FFRztJQUNXLGdEQUE2QixHQUEzQyxVQUE0QyxtQkFBZ0MsRUFBRSxXQUFtQjtRQUMvRixJQUFNLFdBQVcsR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3RDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLFdBQVcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUN4RixPQUFPLFdBQVcsQ0FBQztJQUNyQixDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBN0NELElBNkNDO0FBRUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHkvaW5kZXgnO1xuaW1wb3J0IHsgUmVwb3NpdG9yeSwgRW50aXR5TWFuYWdlciB9IGZyb20gJy4uL3JlcG9zaXRvcnkvaW5kZXgnO1xuaW1wb3J0IHsgUHJvcGVydHlVdGlsIGFzIEJpbmRpbmdQcm9wZXJ0eVV0aWwgfSBmcm9tICcuL3Byb3BlcnR5X3V0aWwnO1xuaW1wb3J0IHsgRW50aXR5VXRpbCBhcyBFbnRpdHlMb2FkVXRpbCB9IGZyb20gJy4vZW50aXR5X3V0aWwnO1xuaW1wb3J0IHsgQmluZGluZ0xpc3RGYWN0b3J5IH0gZnJvbSAnLi9iaW5kaW5nX2xpc3RfZmFjdG9yeSc7XG5pbXBvcnQgeyBCaW5kaW5nRGF0YSB9IGZyb20gJy4vYmluZGluZ19kYXRhJztcblxuXG5jbGFzcyBCaW5kaW5nRGF0YUZhY3Rvcnkge1xuXG4gIC8qKlxuICAgKiDmoLnmja5SZXBvc2l0b3J55Yib5bu65LiA5LiqQmluZGluZ0RhdGFcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbVJlcG9zaXRvcnkocmVwb3NpdG9yeTogUmVwb3NpdG9yeTxFbnRpdHk+LCBiaW5kaW5nUGF0aDogc3RyaW5nKTogQmluZGluZ0RhdGEge1xuICAgIGNvbnN0IGJpbmRpbmdEYXRhID0gbmV3IEJpbmRpbmdEYXRhKCk7XG4gICAgY29uc3QgYmluZGluZ1Byb3BlcnRpZXMgPSBCaW5kaW5nUHJvcGVydHlVdGlsLmdldFByb3BlcnRpZXMocmVwb3NpdG9yeS5lbnRpdHlUeXBlKTtcbiAgICBjb25zdCBiaW5kaW5nTGlzdCA9IEJpbmRpbmdMaXN0RmFjdG9yeS5jcmVhdGUoYmluZGluZ1Byb3BlcnRpZXMpO1xuICAgIGJpbmRpbmdEYXRhLmluaXRCeUJpbmRpbmdMaXN0KGJpbmRpbmdMaXN0LCBudWxsLCByZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvKTtcbiAgICBFbnRpdHlMb2FkVXRpbC5sb2FkUmVwb3NpdG9yeShyZXBvc2l0b3J5LCBiaW5kaW5nTGlzdCk7XG5cbiAgICAvLyDku45yZXBvc2l0b3J55Yid5aeL5YyWYmluZGluZ0RhdGFcbiAgICBiaW5kaW5nRGF0YS5wYWdpbmdJbmZvID0gcmVwb3NpdG9yeS5lbnRpdHlDb2xsZWN0aW9uLnBhZ2luYXRpb25JbmZvO1xuICAgIHJldHVybiBiaW5kaW5nRGF0YTtcbiAgfVxuXG4gIC8qKlxuICAgKiDmoLnmja5FbnRpdHlNYW5hZ2Vy5Yib5bu6QmluZGluZ0RhdGHvvIzlubblu7rnq4vlj4zlkJHlhbPogZTvvIjor7fli7/kvb/nlKjvvIlcbiAgICogQGludGVybmFsXG4gICAqIEBzdW1tYXJ5XG4gICAqIDHjgIHor6Xmlrnms5XmmoLml7bku4XkvpvlhoXpg6jljZXlhYPmtYvor5Xkvb/nlKjvvJtcbiAgICogMuOAgeivpeaWueazleaaguaXtuWPquWIm+W7ukJpbmRpbmdEYXRh77yM5LiN5bu656uL5Y+M5ZCR5YWz6IGUXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGNyZWF0ZUZyb21FbnRpdHlNYW5hZ2VyKGVudGl0eU1hbmFnZXI6IEVudGl0eU1hbmFnZXI8RW50aXR5PiwgYmluZGluZ1BhdGg6IHN0cmluZyk6IEJpbmRpbmdEYXRhIHtcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IG5ldyBCaW5kaW5nRGF0YSgpO1xuICAgIGNvbnN0IGJpbmRpbmdQcm9wZXJ0aWVzID0gQmluZGluZ1Byb3BlcnR5VXRpbC5nZXRQcm9wZXJ0aWVzKGVudGl0eU1hbmFnZXIuZW50aXR5VHlwZSk7XG4gICAgY29uc3QgYmluZGluZ0xpc3QgPSBCaW5kaW5nTGlzdEZhY3RvcnkuY3JlYXRlKGJpbmRpbmdQcm9wZXJ0aWVzKTtcbiAgICBiaW5kaW5nRGF0YS5pbml0QnlCaW5kaW5nTGlzdChiaW5kaW5nTGlzdCwgbnVsbCwgZW50aXR5TWFuYWdlci5lbnRpdHlDb2xsZWN0aW9uLmVudGl0eVR5cGVJbmZvKTtcblxuICAgIC8vIOWIneWni+WMluaVsOaNrlxuICAgIGNvbnN0IGVudGl0aWVzOiBFbnRpdHlbXSA9IGVudGl0eU1hbmFnZXIuZ2V0RW50aXRpZXNCeVBhdGgoW10pO1xuICAgIEVudGl0eUxvYWRVdGlsLmxvYWRFbnRpdGllcyhlbnRpdGllcywgYmluZGluZ0xpc3QpO1xuXG4gICAgcmV0dXJuIGJpbmRpbmdEYXRhO1xuICB9XG5cbiAgLyoqXG4gICAqIOagueaNruW3sue7j+WtmOWcqOeahEJpbmRpbmdEYXRh5Yib5bu65LiA5Liq5paw55qEQmluZGluZ0RhdGFcbiAgICovXG4gIHB1YmxpYyBzdGF0aWMgY3JlYXRlRnJvbUV4aXN0aW5nQmluZGluZ0RhdGEoZXhpc3RpbmdCaW5kaW5nRGF0YTogQmluZGluZ0RhdGEsIGJpbmRpbmdQYXRoOiBzdHJpbmcpIHtcbiAgICBjb25zdCBiaW5kaW5nRGF0YSA9IG5ldyBCaW5kaW5nRGF0YSgpO1xuICAgIGJpbmRpbmdEYXRhLmluaXRCeUJpbmRpbmdMaXN0KGV4aXN0aW5nQmluZGluZ0RhdGEubGlzdCwgbnVsbCwgYmluZGluZ0RhdGEuZGF0YVR5cGVJbmZvKTtcbiAgICByZXR1cm4gYmluZGluZ0RhdGE7XG4gIH1cbn1cblxuZXhwb3J0IHsgQmluZGluZ0RhdGFGYWN0b3J5IH07XG4iXX0=