import { from, of } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import axios from 'axios';
import { HttpUtil } from './http-util';
/**
 * HttpClient
 */
var HttpClient = /** @class */ (function () {
    /**
     * 构造函数
     */
    function HttpClient() {
        this.axiosInstance = axios.create();
    }
    /**
     * 发送GET请求
     */
    HttpClient.prototype.get = function (url, requestConfig) {
        return this.request('GET', url, requestConfig);
    };
    /**
     * 发送POST请求
     */
    HttpClient.prototype.post = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('POST', url, requestConfig);
    };
    /**
     * 发送PUT请求
     */
    HttpClient.prototype.put = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('PUT', url, requestConfig);
    };
    /**
     * 发送PATCH请求
     */
    HttpClient.prototype.patch = function (url, body, requestConfig) {
        requestConfig = HttpUtil.appendBodyToRequestConfig(body, requestConfig);
        return this.request('PATCH', url, requestConfig);
    };
    /**
     * 发送DELETE请求
     */
    HttpClient.prototype.delete = function (url, requestConfig) {
        return this.request('DELETE', url, requestConfig);
    };
    /**
     * 发送请求
     */
    HttpClient.prototype.request = function (method, url, requestConfig) {
        var _this = this;
        var request$ = of(true).pipe(switchMap(function () {
            var axiosRequestConfig = HttpUtil.buildAxiosRequestConfig(method, url, requestConfig);
            return from(_this.axiosInstance.request(axiosRequestConfig));
        }));
        return request$.pipe(map(function (axiosResponse) {
            var httpResponse = HttpUtil.buildHttpResponse(axiosResponse);
            return requestConfig.observe === 'response' ? httpResponse : axiosResponse.data;
        }));
    };
    return HttpClient;
}());
export { HttpClient };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC1jbGllbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvaHR0cC9odHRwLWNsaWVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWMsSUFBSSxFQUFFLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM1QyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ2hELE9BQU8sS0FBSyxNQUFNLE9BQU8sQ0FBQztBQUcxQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBRXZDOztHQUVHO0FBQ0g7SUFPRTs7T0FFRztJQUNIO1FBQ0UsSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7SUFDdEMsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0JBQUcsR0FBVixVQUFXLEdBQVcsRUFBRSxhQUFnQztRQUN0RCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSx5QkFBSSxHQUFYLFVBQVksR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNsRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNsRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSx3QkFBRyxHQUFWLFVBQVcsR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNqRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSwwQkFBSyxHQUFaLFVBQWEsR0FBVyxFQUFFLElBQVMsRUFBRSxhQUFnQztRQUNuRSxhQUFhLEdBQUcsUUFBUSxDQUFDLHlCQUF5QixDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsQ0FBQztRQUN4RSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxhQUFhLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSwyQkFBTSxHQUFiLFVBQWMsR0FBVyxFQUFFLGFBQWdDO1FBQ3pELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxRQUFRLEVBQUUsR0FBRyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3BELENBQUM7SUFFRDs7T0FFRztJQUNILDRCQUFPLEdBQVAsVUFBUyxNQUFrQixFQUFFLEdBQVcsRUFBRSxhQUFnQztRQUExRSxpQkFhQztRQVpDLElBQU0sUUFBUSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQzVCLFNBQVMsQ0FBQztZQUNSLElBQU0sa0JBQWtCLEdBQUcsUUFBUSxDQUFDLHVCQUF1QixDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDeEYsT0FBTyxJQUFJLENBQUMsS0FBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDO1FBQzlELENBQUMsQ0FBQyxDQUNILENBQUM7UUFDRixPQUFPLFFBQVEsQ0FBQyxJQUFJLENBQ2xCLEdBQUcsQ0FBQyxVQUFDLGFBQTRCO1lBQy9CLElBQU0sWUFBWSxHQUFHLFFBQVEsQ0FBQyxpQkFBaUIsQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUMvRCxPQUFPLGFBQWEsQ0FBQyxPQUFPLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUM7UUFDbEYsQ0FBQyxDQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFFSCxpQkFBQztBQUFELENBQUMsQUF0RUQsSUFzRUM7QUFFRCxPQUFPLEVBQUUsVUFBVSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBmcm9tLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgQXhpb3NJbnN0YW5jZSwgQXhpb3NSZXNwb25zZX0gZnJvbSAnYXhpb3MnO1xuaW1wb3J0IHsgSHR0cE1ldGhvZCwgSHR0cFJlcXVlc3RDb25maWcgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEh0dHBVdGlsIH0gZnJvbSAnLi9odHRwLXV0aWwnO1xuXG4vKipcbiAqIEh0dHBDbGllbnRcbiAqL1xuY2xhc3MgSHR0cENsaWVudCB7XG5cbiAgLyoqXG4gICAqIGF4aW9z5a6e5L6LXG4gICAqL1xuICBwcml2YXRlIGF4aW9zSW5zdGFuY2U6IEF4aW9zSW5zdGFuY2U7XG5cbiAgLyoqXG4gICAqIOaehOmAoOWHveaVsFxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5heGlvc0luc3RhbmNlID0gYXhpb3MuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICog5Y+R6YCBR0VU6K+35rGCXG4gICAqL1xuICBwdWJsaWMgZ2V0KHVybDogc3RyaW5nLCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnR0VUJywgdXJsLCByZXF1ZXN0Q29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5HpgIFQT1NU6K+35rGCXG4gICAqL1xuICBwdWJsaWMgcG9zdCh1cmw6IHN0cmluZywgYm9keTogYW55LCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZykge1xuICAgIHJlcXVlc3RDb25maWcgPSBIdHRwVXRpbC5hcHBlbmRCb2R5VG9SZXF1ZXN0Q29uZmlnKGJvZHksIHJlcXVlc3RDb25maWcpO1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BPU1QnLCB1cmwsIHJlcXVlc3RDb25maWcpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWPkemAgVBVVOivt+axglxuICAgKi9cbiAgcHVibGljIHB1dCh1cmw6IHN0cmluZywgYm9keTogYW55LCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZykge1xuICAgIHJlcXVlc3RDb25maWcgPSBIdHRwVXRpbC5hcHBlbmRCb2R5VG9SZXF1ZXN0Q29uZmlnKGJvZHksIHJlcXVlc3RDb25maWcpO1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BVVCcsIHVybCwgcmVxdWVzdENvbmZpZyk7XG4gIH1cblxuICAvKipcbiAgICog5Y+R6YCBUEFUQ0jor7fmsYJcbiAgICovXG4gIHB1YmxpYyBwYXRjaCh1cmw6IHN0cmluZywgYm9keTogYW55LCByZXF1ZXN0Q29uZmlnOiBIdHRwUmVxdWVzdENvbmZpZykge1xuICAgIHJlcXVlc3RDb25maWcgPSBIdHRwVXRpbC5hcHBlbmRCb2R5VG9SZXF1ZXN0Q29uZmlnKGJvZHksIHJlcXVlc3RDb25maWcpO1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QoJ1BBVENIJywgdXJsLCByZXF1ZXN0Q29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5HpgIFERUxFVEXor7fmsYJcbiAgICovXG4gIHB1YmxpYyBkZWxldGUodXJsOiBzdHJpbmcsIHJlcXVlc3RDb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdCgnREVMRVRFJywgdXJsLCByZXF1ZXN0Q29uZmlnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDlj5HpgIHor7fmsYJcbiAgICovXG4gIHJlcXVlc3QoIG1ldGhvZDogSHR0cE1ldGhvZCwgdXJsOiBzdHJpbmcsIHJlcXVlc3RDb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICBjb25zdCByZXF1ZXN0JCA9IG9mKHRydWUpLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4ge1xuICAgICAgICBjb25zdCBheGlvc1JlcXVlc3RDb25maWcgPSBIdHRwVXRpbC5idWlsZEF4aW9zUmVxdWVzdENvbmZpZyhtZXRob2QsIHVybCwgcmVxdWVzdENvbmZpZyk7XG4gICAgICAgIHJldHVybiBmcm9tKHRoaXMuYXhpb3NJbnN0YW5jZS5yZXF1ZXN0KGF4aW9zUmVxdWVzdENvbmZpZykpO1xuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiByZXF1ZXN0JC5waXBlKFxuICAgICAgbWFwKChheGlvc1Jlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlKSA9PiB7XG4gICAgICAgIGNvbnN0IGh0dHBSZXNwb25zZSA9IEh0dHBVdGlsLmJ1aWxkSHR0cFJlc3BvbnNlKGF4aW9zUmVzcG9uc2UpO1xuICAgICAgICByZXR1cm4gcmVxdWVzdENvbmZpZy5vYnNlcnZlID09PSAncmVzcG9uc2UnID8gaHR0cFJlc3BvbnNlIDogYXhpb3NSZXNwb25zZS5kYXRhO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbn1cblxuZXhwb3J0IHsgSHR0cENsaWVudCB9O1xuIl19