var HttpUtil = /** @class */ (function () {
    function HttpUtil() {
    }
    /**
     * 追加Header
     */
    HttpUtil.appendHeader = function (headers, key, value) {
        var _a;
        headers = Object.assign({}, headers, (_a = {}, _a[key] = value, _a));
        return headers;
    };
    /**
     * 向RequestConfig中追加body
     */
    HttpUtil.appendBodyToRequestConfig = function (body, requestConfig) {
        if (!requestConfig) {
            requestConfig = {};
        }
        requestConfig = Object.assign({}, requestConfig, { body: body });
        return requestConfig;
    };
    /**
     * 构造AxiosReqeustConfig
     */
    HttpUtil.buildAxiosRequestConfig = function (method, url, requestConfig) {
        requestConfig = requestConfig || {};
        var axiosRequestConfig = {
            url: url,
            method: method,
            params: requestConfig.params || null,
            headers: requestConfig.headers || null,
            responseType: requestConfig.responseType || 'json',
            data: requestConfig.body || null
        };
        return axiosRequestConfig;
    };
    /**
     * 构造Http响应信息
     */
    HttpUtil.buildHttpResponse = function (axiosResponse) {
        var httpResponse = {
            body: axiosResponse.data,
            headers: axiosResponse.headers,
            status: axiosResponse.status,
            statusText: axiosResponse.statusText
        };
        return httpResponse;
    };
    return HttpUtil;
}());
export { HttpUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHR0cC11dGlsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2h0dHAvaHR0cC11dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBO0lBQUE7SUFvREEsQ0FBQztJQWxEQzs7T0FFRztJQUNXLHFCQUFZLEdBQTFCLFVBQTJCLE9BQW9CLEVBQUUsR0FBVyxFQUFFLEtBQWE7O1FBQ3pFLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxPQUFPLFlBQUcsR0FBQyxHQUFHLElBQUcsS0FBSyxNQUFFLENBQUM7UUFDckQsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQztJQUVEOztPQUVHO0lBQ1csa0NBQXlCLEdBQXZDLFVBQXdDLElBQVMsRUFBRSxhQUFnQztRQUNqRixJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ2xCLGFBQWEsR0FBRyxFQUFFLENBQUM7U0FDcEI7UUFDRCxhQUFhLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsYUFBYSxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBQyxDQUFDLENBQUM7UUFFaEUsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ1csZ0NBQXVCLEdBQXJDLFVBQXNDLE1BQWtCLEVBQUUsR0FBVyxFQUFFLGFBQWdDO1FBQ3JHLGFBQWEsR0FBRyxhQUFhLElBQUksRUFBRSxDQUFDO1FBRXBDLElBQU0sa0JBQWtCLEdBQXVCO1lBQzdDLEdBQUcsRUFBRSxHQUFHO1lBQ1IsTUFBTSxFQUFFLE1BQU07WUFDZCxNQUFNLEVBQUcsYUFBYSxDQUFDLE1BQU0sSUFBSSxJQUFJO1lBQ3JDLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTyxJQUFJLElBQUk7WUFDdEMsWUFBWSxFQUFFLGFBQWEsQ0FBQyxZQUFZLElBQUksTUFBTTtZQUNsRCxJQUFJLEVBQUUsYUFBYSxDQUFDLElBQUksSUFBSSxJQUFJO1NBQ2pDLENBQUM7UUFDRixPQUFPLGtCQUFrQixDQUFDO0lBQzVCLENBQUM7SUFFRDs7T0FFRztJQUNXLDBCQUFpQixHQUEvQixVQUFnQyxhQUE0QjtRQUMxRCxJQUFNLFlBQVksR0FBaUI7WUFDakMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxJQUFJO1lBQ3hCLE9BQU8sRUFBRSxhQUFhLENBQUMsT0FBTztZQUM5QixNQUFNLEVBQUUsYUFBYSxDQUFDLE1BQU07WUFDNUIsVUFBVSxFQUFFLGFBQWEsQ0FBQyxVQUFVO1NBQ3JDLENBQUM7UUFDRixPQUFPLFlBQVksQ0FBQztJQUN0QixDQUFDO0lBRUgsZUFBQztBQUFELENBQUMsQUFwREQsSUFvREM7QUFFRCxPQUFPLEVBQUUsUUFBUSxFQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBeGlvc0luc3RhbmNlLCBBeGlvc1JlcXVlc3RDb25maWcsIEF4aW9zUmVzcG9uc2V9IGZyb20gJ2F4aW9zJztcbmltcG9ydCB7IEh0dHBNZXRob2QsIEh0dHBIZWFkZXJzLCBIdHRwUmVzcG9uc2UsIEh0dHBSZXF1ZXN0Q29uZmlnIH0gZnJvbSAnLi90eXBlcyc7XG5cbmNsYXNzIEh0dHBVdGlsIHtcblxuICAvKipcbiAgICog6L+95YqgSGVhZGVyXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGFwcGVuZEhlYWRlcihoZWFkZXJzOiBIdHRwSGVhZGVycywga2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpOiBIdHRwSGVhZGVycyB7XG4gICAgaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oe30sIGhlYWRlcnMsIHtba2V5XTogdmFsdWV9KTtcbiAgICByZXR1cm4gaGVhZGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiDlkJFSZXF1ZXN0Q29uZmln5Lit6L+95YqgYm9keVxuICAgKi9cbiAgcHVibGljIHN0YXRpYyBhcHBlbmRCb2R5VG9SZXF1ZXN0Q29uZmlnKGJvZHk6IGFueSwgcmVxdWVzdENvbmZpZzogSHR0cFJlcXVlc3RDb25maWcpIHtcbiAgICBpZiAoIXJlcXVlc3RDb25maWcpIHtcbiAgICAgIHJlcXVlc3RDb25maWcgPSB7fTtcbiAgICB9XG4gICAgcmVxdWVzdENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe30sIHJlcXVlc3RDb25maWcsIHsgYm9keTogYm9keX0pO1xuXG4gICAgcmV0dXJuIHJlcXVlc3RDb25maWc7XG4gIH1cblxuICAvKipcbiAgICog5p6E6YCgQXhpb3NSZXFldXN0Q29uZmlnXG4gICAqL1xuICBwdWJsaWMgc3RhdGljIGJ1aWxkQXhpb3NSZXF1ZXN0Q29uZmlnKG1ldGhvZDogSHR0cE1ldGhvZCwgdXJsOiBzdHJpbmcsIHJlcXVlc3RDb25maWc6IEh0dHBSZXF1ZXN0Q29uZmlnKTogQXhpb3NSZXF1ZXN0Q29uZmlnIHtcbiAgICByZXF1ZXN0Q29uZmlnID0gcmVxdWVzdENvbmZpZyB8fCB7fTtcblxuICAgIGNvbnN0IGF4aW9zUmVxdWVzdENvbmZpZzogQXhpb3NSZXF1ZXN0Q29uZmlnID0ge1xuICAgICAgdXJsOiB1cmwsXG4gICAgICBtZXRob2Q6IG1ldGhvZCxcbiAgICAgIHBhcmFtczogIHJlcXVlc3RDb25maWcucGFyYW1zIHx8IG51bGwsXG4gICAgICBoZWFkZXJzOiByZXF1ZXN0Q29uZmlnLmhlYWRlcnMgfHwgbnVsbCxcbiAgICAgIHJlc3BvbnNlVHlwZTogcmVxdWVzdENvbmZpZy5yZXNwb25zZVR5cGUgfHwgJ2pzb24nLFxuICAgICAgZGF0YTogcmVxdWVzdENvbmZpZy5ib2R5IHx8IG51bGxcbiAgICB9O1xuICAgIHJldHVybiBheGlvc1JlcXVlc3RDb25maWc7XG4gIH1cblxuICAvKipcbiAgICog5p6E6YCgSHR0cOWTjeW6lOS/oeaBr1xuICAgKi9cbiAgcHVibGljIHN0YXRpYyBidWlsZEh0dHBSZXNwb25zZShheGlvc1Jlc3BvbnNlOiBBeGlvc1Jlc3BvbnNlICkge1xuICAgIGNvbnN0IGh0dHBSZXNwb25zZTogSHR0cFJlc3BvbnNlID0ge1xuICAgICAgYm9keTogYXhpb3NSZXNwb25zZS5kYXRhLFxuICAgICAgaGVhZGVyczogYXhpb3NSZXNwb25zZS5oZWFkZXJzLFxuICAgICAgc3RhdHVzOiBheGlvc1Jlc3BvbnNlLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IGF4aW9zUmVzcG9uc2Uuc3RhdHVzVGV4dFxuICAgIH07XG4gICAgcmV0dXJuIGh0dHBSZXNwb25zZTtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEh0dHBVdGlsIH07XG4iXX0=