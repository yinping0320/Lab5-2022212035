import * as tslib_1 from "tslib";
import { Expression } from "../expression/index";
import { EventHandler } from "./event_handler";
var BindingDataLoadEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataLoadEventHandler, _super);
    function BindingDataLoadEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BindingDataLoadEventHandler.prototype.filter = function (event) {
        var _this = this;
        // 过滤第一次空load
        if ((!event.path || event.path.length === 0) && event.value && Array.isArray(event.value) && event.value.length === 0) {
            return null;
        }
        // 数据加载完成后需要计算当前绑定路径下的只读、必填、校验表达式
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            var expressions = this.expressionObjects.filter(function (expressionObject) {
                if (expressionObject.ns !== event.ns || (expressionObject.type !== Expression.ExpressionType.Readonly && expressionObject.type !== Expression.ExpressionType.Visible && expressionObject.type !== Expression.ExpressionType.Required && expressionObject.type !== Expression.ExpressionType.Validate)) {
                    return false;
                }
                var result = _this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                return result.distance === 0 && result.isSameTable;
            });
            return expressions;
        }
        else {
            return null;
        }
    };
    /**
     * 发布事件
     * @param event event
     */
    BindingDataLoadEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    BindingDataLoadEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    return BindingDataLoadEventHandler;
}(EventHandler));
export { BindingDataLoadEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2V2ZW50LWhhbmRsZXIvYmluZGluZ19kYXRhX2xvYWRfZXZlbnRfaGFuZGxlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUFpRCx1REFBWTtJQUE3RDs7SUFzREEsQ0FBQztJQXJEUSw0Q0FBTSxHQUFiLFVBQWMsS0FBMkI7UUFBekMsaUJBcUJDO1FBcEJDLGFBQWE7UUFDYixJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxLQUFLLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQ3JILE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFDRCxpQ0FBaUM7UUFDakMsSUFBSSxJQUFJLENBQUMsaUJBQWlCLElBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDL0QsSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFDLGdCQUE2QztnQkFDOUYsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxJQUFJLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBRSxFQUFFO29CQUN0UyxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxJQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN0RCxJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNYLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELE9BQU8sTUFBTSxDQUFDLFFBQVEsS0FBSyxDQUFDLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQztZQUNyRCxDQUFDLENBQUMsQ0FBQztZQUNILE9BQU8sV0FBVyxDQUFDO1NBQ3BCO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUNEOzs7T0FHRztJQUNJLDhDQUFRLEdBQWYsVUFBZ0IsS0FBMkI7UUFBM0MsaUJBaUJDO1FBaEJDLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxXQUFXLElBQUksV0FBVyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDekMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxVQUFDLGdCQUE2QztnQkFDaEUsSUFBTSxhQUFhLEdBQUcsS0FBSSxDQUFDLGtCQUFrQixDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUN2RSxJQUFNLE9BQU8sR0FBRyxLQUFJLENBQUMsWUFBWSxDQUFDLGdCQUFnQixFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsQ0FBQztnQkFDMUUsSUFBTSxNQUFNLEdBQUcsS0FBSSxDQUFDLE9BQU8sQ0FBQyxnQkFBZ0IsRUFBRSxPQUFPLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxNQUFNLEtBQUssU0FBUyxJQUFJLENBQUMsS0FBSSxDQUFDLDhCQUE4QixDQUFDLGdCQUFnQixDQUFDLEVBQUU7b0JBQ2xGLE9BQU87aUJBQ1I7Z0JBQ0QsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQztnQkFDakMsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEVBQUU7b0JBQ3ZCLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxFQUFFLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxDQUFDO2lCQUN6RTtnQkFDRCxLQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ3ZDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSwwREFBb0IsR0FBM0IsVUFBNEIsS0FBZSxFQUFFLEtBQTJCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDSCxrQ0FBQztBQUFELENBQUMsQUF0REQsQ0FBaUQsWUFBWSxHQXNENUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSBcIi4uL2V4cHJlc3Npb24vaW5kZXhcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL2V2ZW50X2hhbmRsZXJcIjtcblxuZXhwb3J0IGNsYXNzIEJpbmRpbmdEYXRhTG9hZEV2ZW50SGFuZGxlciBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG4gIHB1YmxpYyBmaWx0ZXIoZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XG4gICAgLy8g6L+H5ruk56ys5LiA5qyh56m6bG9hZFxuICAgIGlmICgoIWV2ZW50LnBhdGggfHwgZXZlbnQucGF0aC5sZW5ndGggPT09IDApICYmIGV2ZW50LnZhbHVlICYmIEFycmF5LmlzQXJyYXkoZXZlbnQudmFsdWUpICYmIGV2ZW50LnZhbHVlLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8vIOaVsOaNruWKoOi9veWujOaIkOWQjumcgOimgeiuoeeul+W9k+WJjee7keWumui3r+W+hOS4i+eahOWPquivu+OAgeW/heWhq+OAgeagoemqjOihqOi+vuW8j1xuICAgIGlmICh0aGlzLmV4cHJlc3Npb25PYmplY3RzICYmIHRoaXMuZXhwcmVzc2lvbk9iamVjdHMubGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmZpbHRlcigoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0Lm5zICE9PSBldmVudC5ucyB8fCAoZXhwcmVzc2lvbk9iamVjdC50eXBlICE9PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlYWRvbmx5ICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSAhPT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WaXNpYmxlICYmIGV4cHJlc3Npb25PYmplY3QudHlwZSAhPT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5SZXF1aXJlZCAmJiBleHByZXNzaW9uT2JqZWN0LnR5cGUgIT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuVmFsaWRhdGUgKSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFuYWx5c2lzKGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5kaXN0YW5jZSA9PT0gMCAmJiByZXN1bHQuaXNTYW1lVGFibGU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBleHByZXNzaW9ucztcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDlj5HluIPkuovku7ZcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XG4gICAqL1xuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmZpbHRlcihldmVudCk7XG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBlbnRpdHlDb250ZXh0ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIGVudGl0eUNvbnRleHQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlcmZvcm0oZXhwcmVzc2lvbk9iamVjdCwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCAmJiAhdGhpcy5pc1ZhbGlkYXRlT3JSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uUmVzdWx0LnNldChleHByZXNzaW9uT2JqZWN0LmlkLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDojrflj5blrZDooajkuovku7booYxcbiAgICogQHBhcmFtIHBhdGhzIFxuICAgKiBAcGFyYW0gZXZlbnQgXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHVibGljIGdldEN1cnJlbnRSb3dCeUV2ZW50KHBhdGhzOiBzdHJpbmdbXSwgZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKTogbnVsbCB8IHsgW3Byb3A6IHN0cmluZ106IGFueSB9IHtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50Um93QnlQYXRocyhwYXRocyk7XG4gIH1cbn0iXX0=