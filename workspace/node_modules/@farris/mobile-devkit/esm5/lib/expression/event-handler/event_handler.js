import * as tslib_1 from "tslib";
import { AppContext } from '../../app/index';
import { EffectorFactory } from '../effector/index';
import { Expression, ExpressionExecutor, ExpressionRegistry, ExpressionResult } from '../expression/index';
import { ExpressionUtil } from '../utils/expression_util';
var EventHandler = /** @class */ (function () {
    function EventHandler(frameContext) {
        this.frameContext = frameContext;
        this.injector = frameContext.injector;
        this.repository = frameContext.repository;
        this.bindingData = frameContext.bindingData;
        this.expressionRegistry = this.injector.get(ExpressionRegistry, null);
        this.effectorFactory = this.injector.get(EffectorFactory, null);
        this.expressionExecutor = this.injector.get(ExpressionExecutor);
        this.expressionResult = this.injector.get(ExpressionResult, null);
    }
    EventHandler.prototype.handleEvent = function (event, expressionObjects) {
        event = Object.assign({}, event);
        this.expressionObjects = expressionObjects;
        this.dispatch(event);
    };
    Object.defineProperty(EventHandler.prototype, "primaryValue", {
        //#endregion
        //#region 属性
        /**
         * 主表主键值
         */
        get: function () {
            return this.bindingData.list.currentItem.primaryKeyValue;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(EventHandler.prototype, "entityOriginalNodeCode", {
        /**
         * 获取主实体原始字段名
         */
        get: function () {
            return this.repository && this.repository.entityTypeInfo && this.repository.entityTypeInfo.entityInfo && this.repository.entityTypeInfo.entityInfo.originalCode || null;
        },
        enumerable: true,
        configurable: true
    });
    //#endregion
    //#region 表达式核心
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param context 上下文
     * @returns any
     */
    EventHandler.prototype.perform = function (expressionObject, context) {
        return this.expressionExecutor.compile(expressionObject, context);
    };
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    EventHandler.prototype.effect = function (event, expressionObject) {
        var effectTo = expressionObject.bindingType;
        var effector = this.effectorFactory.getEffector(expressionObject);
        if (!effector) {
            // console.warn(`EventHandler 没有对应的副作用器。${expressionObject.type}`);
            return;
        }
        if (effectTo === Expression.ExpressionBindingType.Field) {
            var effectPaths = expressionObject.effectPaths || [];
            if (effectPaths.length > 0) {
                effectPaths.forEach(function (path) {
                    var effectPath = path.split('/');
                    var effectOptions = { path: effectPath, message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };
                    effector.effect(expressionObject.path, expressionObject.result, effectOptions);
                });
            }
            else if (expressionObject.type === Expression.ExpressionType.Required || expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Readonly || expressionObject.type === Expression.ExpressionType.Visible) {
                var effectOptions = { message: expressionObject.message, expressionId: expressionObject.id, eventType: event.type, viewModelId: expressionObject.viewModelId };
                effector.effect(expressionObject.path, expressionObject.result, effectOptions);
            }
        }
        else {
            throw new Error('not supported！');
        }
    };
    //#endregion
    //#region util
    EventHandler.prototype.isValidateOrRequiredExpression = function (expressionObject) {
        return expressionObject && (expressionObject.type === Expression.ExpressionType.Validate || expressionObject.type === Expression.ExpressionType.Required);
    };
    /**
     * 以事件参数为依据构建实体路径
     * @param event event
     * @returns
     */
    EventHandler.prototype.getEntityPathFromEvent = function (event) {
        event = JSON.parse(JSON.stringify(event));
        if (!event || !event.path || event.path.length < 1) {
            return [];
        }
        var paths = event.path;
        return this.getEntityPath(paths);
    };
    /**
     * 获取事件路径中的实体路径
     * @param path path
     * @returns
     */
    EventHandler.prototype.getEntityPath = function (path) {
        var paths = path.filter(function (value, index) {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    };
    /**
     * 构造实体路径
     * @param path path
     * @description 删除路径中的id字段
     * @returns
     */
    EventHandler.prototype.buildEntityPath = function (path) {
        var paths = path.filter(function (value, index) {
            if (index % 2 === 0 && value.includes(':')) {
                return false;
            }
            else {
                return true;
            }
        });
        return paths;
    };
    /**
     * 清理事件路径中的id主键标识
     * @param path path
     * @returns
     */
    EventHandler.prototype.cleanEventPath = function (path) {
        path = path.filter(function (p) {
            if (p && p !== ':') {
                return true;
            }
            else {
                return false;
            }
        });
        return path.map(function (item) {
            if (item.includes(':')) {
                return item.split(':')[1];
            }
            else {
                return item;
            }
        });
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    EventHandler.prototype.getCurrentRowByPaths = function (paths) {
        var result = null;
        var bindingList = this.bindingData.getValue(paths);
        if (bindingList && bindingList.length > 0) {
            var primaryValue = bindingList.currentItem.primaryKeyValue || null;
            if (primaryValue) {
                var bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    };
    /**
     * 获取事件路径中指定子表的事件行
     * @param path
     * @param tableCode
     * @returns
     */
    EventHandler.prototype.getEventId = function (path, tableCode) {
        if (!path || path.length < 1) {
            throw new Error('invalid path!');
        }
        var propertyIndex = path.findIndex(function (p) { return p === tableCode; });
        if (propertyIndex === -1) {
            return null;
        }
        var idIndex = propertyIndex + 1;
        if (idIndex > path.length - 1) {
            throw new Error('invalid propertyName or path');
        }
        var id = path[idIndex];
        if (id.indexOf(':') === -1) {
            throw new Error('compute error.');
        }
        return id.split(':')[1];
    };
    //#endregion
    //#region  构造上下文
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    EventHandler.prototype.buildStateContext = function (event) {
        var ns = event.ns;
        var appContext = this.injector.get(AppContext, null);
        var frameContexts = appContext.viewModelContextManager.getContextsByNamespace(ns);
        var result = {};
        if (frameContexts && frameContexts.length > 0) {
            var anonymousFrameContext = frameContexts[0];
            var rootFrameContext = anonymousFrameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                var uiState_1 = rootFrameContext.viewModel.uiState;
                var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                propertyNames.forEach(function (prop) {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState_1[prop];
                    }
                });
            }
        }
        return result;
    };
    /**
     * 获取事件实体
     * @param event
     * @returns
     */
    EventHandler.prototype.buildEntityContext = function (event, expressionObject, currentRows) {
        var _this = this;
        var expressionBindingType = expressionObject.bindingType;
        if (expressionBindingType === Expression.ExpressionBindingType.Field) {
            var entityTypeInfo = this.repository.entityTypeInfo;
            var childrenEntityPaths = [];
            ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
            // 获取当前行
            var row = currentRows && currentRows.find(function (row) { return row.bindingPath === '' || row.bindingPath === '/'; }) || null;
            var primaryValue = row && row.primaryValue || this.bindingData.list.currentId;
            var entity = this.bindingData.list.findById(primaryValue);
            if (!entity) {
                return null;
            }
            var object_1 = entity.toJSON();
            object_1['__type__'] = 'Entity';
            if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
                return object_1;
            }
            childrenEntityPaths.sort(function (v1, v2) { return v1.length - v2.length; });
            // 找到所有子表
            childrenEntityPaths.forEach(function (paths) {
                var bindingList = _this.bindingData.getValue(paths);
                var currentRowId = bindingList.currentId;
                var propertyName = paths[paths.length - 1];
                // parent 为entity或entitylist或null
                var parent = paths.slice(0, paths.length - 1).reduce(function (object, path) {
                    return object && object[path] || null;
                }, object_1);
                if (!parent) {
                    return;
                }
                var data = parent;
                var node = null;
                if (!currentRowId) {
                    // 当前表没有数据
                    node = { __items__: [], __type__: 'List' };
                    node.length = function () { return node.__items__.length; };
                }
                else {
                    // 纠正当前行
                    if (currentRows && currentRows.length > 0) {
                        // 是否指定了当前行
                        var userAssignCurrentRow = currentRows.find(function (row) {
                            var bindingPaths = row.bindingPath.split('/').filter(function (p) { return p; });
                            return bindingPaths.join('/') === paths.join('/');
                        });
                        if (userAssignCurrentRow) {
                            currentRowId = userAssignCurrentRow.primaryValue;
                        }
                    }
                    // 子表当前行
                    var row_1 = bindingList.findById(currentRowId);
                    // 找到子表当前行的上级
                    var list = parent[propertyName];
                    node = tslib_1.__assign({ __items__: [] }, row_1 && row_1.toJSON() || {}, { __type__: 'List' });
                    node.length = function () { return node.__items__.length; };
                    if (list && Array.isArray(list)) {
                        node.__items__ = [].concat(list);
                    }
                }
                data[propertyName] = node;
            });
            return object_1;
        }
        else if (expressionBindingType === Expression.ExpressionBindingType.State) {
            // todo: 支持状态表达式
        }
        else {
            return null;
        }
    };
    /**
     * 构造表达式计算上下文
     * @param expressionObject 表达式
     * @param event 事件
     * @param entityContext 实体上下文
     * @param currentRows 当前行
     * @returns
     */
    EventHandler.prototype.buildContext = function (expressionObject, event, entityContext, currentRows) {
        var _a;
        var context = [];
        if (entityContext) {
            context.push(entityContext);
        }
        else {
            var entity_1 = this.buildEntityContext(event, expressionObject, currentRows);
            context.push(entity_1);
        }
        var stateContext = this.buildStateContext(event);
        var entityCode = this.entityOriginalNodeCode;
        var entity = null;
        if (context.length === 1) {
            entity = context.pop();
        }
        else {
            entity = context[0];
            if (!entity['__type__']) {
                entity['__type__'] = 'Entity';
            }
            entity['__items__'] = context;
        }
        return tslib_1.__assign((_a = {}, _a[entityCode] = entity, _a), stateContext, { frameContext: this.frameContext, bindingData: this.bindingData, repository: this.repository });
    };
    //#endregion
    /**
     * 构造副作用路径
     * @param event
     * @param expressionObject
     * @returns
     */
    EventHandler.prototype.buildEffectPath = function (event, expressionObject) {
        var expressionPaths = expressionObject.path.split('/').filter(function (p) { return p; });
        var primaryValue = event.path[0] && event.path[0].split(':')[1];
        if (!primaryValue) {
            throw new Error('Invalid event path!');
        }
        if (expressionPaths.length === 1) {
            // 主表简单字段
            return [primaryValue, expressionPaths.pop()];
        }
        else {
            var result = [primaryValue];
            for (var index = 0; index < expressionPaths.length; index++) {
                var propertyName = expressionPaths[index];
                result.push(propertyName);
                var currentPaths = expressionPaths.slice(0, index + 1);
                var propertyInfo = this.repository.entityTypeInfo.getPropInfoByPath(currentPaths);
                if (propertyInfo.group === 'List') {
                    var id = this.getEventId(event.path, propertyInfo.name) || null;
                    // 事件和表达式不是同一个表
                    if (!id) {
                        var bindingList = this.bindingData.getValue(currentPaths);
                        if (bindingList) {
                            id = bindingList.currentId;
                        }
                    }
                    result.push(id);
                }
            }
            return result;
        }
    };
    //#region 辅助方法
    EventHandler.prototype.getPathInfo = function (path) {
        var paths = path.split('/').filter(function (p) { return p; });
        // 获取最大实体层级，其余为属性（简单属性、udt、关联、关联嵌套关联）
        var entityPath = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        var propertyName = paths.slice(entityPath.length).join('/');
        return { path: entityPath.join('/'), propertyName: propertyName, paths: entityPath, propertyNames: propertyName.split('/').filter(function (p) { return p; }) };
    };
    /**
     * get table paths from event paths
     * @param paths event paths
     * @returns
     */
    EventHandler.prototype.getTablePathsFromEventPaths = function (paths) {
        paths = this.getEntityPath(paths);
        var entityPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return entityPaths;
    };
    /**
     * get property paths from event paths
     * @param paths event paths
     * @returns
     */
    EventHandler.prototype.getPropertyPathsFromEventPaths = function (paths) {
        paths = this.getEntityPath(paths);
        var tablePaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(paths, this.repository.entityTypeInfo);
        return paths.slice(tablePaths.length);
    };
    /**
     * 分析事件和表达式的关系
     */
    EventHandler.prototype.analysis = function (event, expressionObject) {
        var expressionPathInfo = this.getPathInfo(expressionObject.path);
        var eventPaths = this.getEntityPath(event.path.slice(0));
        var eventPathInfo = this.getPathInfo(eventPaths.join('/'));
        if (!expressionPathInfo || !eventPathInfo) {
            console.warn("\u8868\u8FBE\u5F0F\u8DEF\u5F84\u6216\u4E8B\u4EF6\u8DEF\u5F84\u9519\u8BEF\uFF0C\u83B7\u53D6\u8DEF\u5F84\u4FE1\u606F\u5931\u8D25\u3002");
            return null;
        }
        var expressionTablePaths = expressionPathInfo.path.split('/').filter(function (p) { return p; });
        var expressionPropertyNames = expressionPathInfo.propertyName.split('/').filter(function (p) { return p; });
        var eventTablePaths = eventPathInfo.path.split('/').filter(function (p) { return p; });
        var eventPropertyNames = eventPathInfo.propertyName.split('/').filter(function (p) { return p; });
        var result = {
            distance: undefined,
            eventFromChildren: undefined,
            eventFromParent: undefined,
            expressionTablePaths: expressionTablePaths,
            expressionPropertyNames: expressionPropertyNames,
            eventTablePaths: eventTablePaths,
            eventPropertyNames: eventPropertyNames,
            isSameTable: false
        };
        result.distance = Math.abs(expressionTablePaths.length - eventTablePaths.length);
        if (result.distance === 1) {
            result.eventFromChildren = eventTablePaths.length > expressionTablePaths.length && eventTablePaths.join('/').startsWith(expressionTablePaths.join('/'));
            result.eventFromParent = eventTablePaths.length < expressionTablePaths.length && expressionTablePaths.join('/').startsWith(eventTablePaths.join('/'));
        }
        result.isSameTable = expressionTablePaths.join('/') === eventTablePaths.join('/');
        return result;
    };
    EventHandler.prototype.buildCurrentRows = function (tablePaths, fullPaths) {
        var currentRows = new Array();
        if (!tablePaths || tablePaths.length < 1) {
            currentRows.push({
                bindingPath: '/',
                primaryValue: fullPaths[0]
            });
        }
        else {
            var paths_1 = [];
            tablePaths.forEach(function (path, index) {
                if (index === 0) {
                    currentRows.push({
                        bindingPath: '/',
                        primaryValue: fullPaths[0]
                    });
                }
                paths_1.push(path);
                var primaryValue = fullPaths[index * 2 + 2];
                currentRows.push({
                    bindingPath: paths_1.join('/'),
                    primaryValue: primaryValue
                });
            });
        }
        return currentRows;
    };
    return EventHandler;
}());
export { EventHandler };
//# sourceMappingURL=data:application/json;base64,