import * as tslib_1 from "tslib";
import { Expression } from "../expression/index";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { ExpressionUtil } from "../utils/expression_util";
import { EventHandler } from "./event_handler";
var EntityUpdateEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(EntityUpdateEventHandler, _super);
    function EntityUpdateEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EntityUpdateEventHandler.prototype.filter = function (event) {
        var _this = this;
        return this.expressionObjects.filter(function (expressionObject) {
            // 重新加载实体时不计算计算表达式，只处理只读、必填等
            if (expressionObject.ns !== event.ns || !expressionObject.deps || expressionObject.deps.length === 0 || expressionObject.type === Expression.ExpressionType.Compute || expressionObject.type === Expression.ExpressionType.Dependency || expressionObject.type === Expression.ExpressionType.DataPicking) {
                return false;
            }
            var result = _this.analysis(event, expressionObject);
            if (!result) {
                return false;
            }
            // 必须是主表表达式
            if (result.expressionTablePaths.length !== 0) {
                return false;
            }
            var index = expressionObject.deps.findIndex(function (dep) {
                if (!dep.startsWith(ENTITY_TEMPLATE)) {
                    return false;
                }
                var deps = dep.split(Expression.DEPENDENCY_SPLITER).filter(function (p) { return p; }).slice(1);
                var depPathInfo = _this.getPathInfo(deps.join('/'));
                if (!depPathInfo) {
                    return false;
                }
                if (depPathInfo.paths.length !== 0) {
                    return false;
                }
                return true;
            });
            return index === -1 ? false : true;
        });
    };
    /**
     * 发布事件
     * @param event event
     */
    EntityUpdateEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                else {
                    console.warn("EventHandler \u8868\u8FBE\u5F0F\u672A\u8BBE\u7F6E\u552F\u4E00\u6807\u8BC6\uFF0C\u65E0\u6CD5\u66F4\u65B0\u8868\u8FBE\u5F0F\u503C\u3002");
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    EntityUpdateEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        var result = null;
        var bindingList = this.bindingData.getValue(paths);
        var eventEntityPath = this.getEntityPath(event.path);
        if (bindingList && bindingList.length > 0) {
            var primaryValue = bindingList.currentItem.primaryKeyValue || null;
            // 使用事件中的主键
            var childrenPaths = ExpressionUtil.getAvailableChildrenPathsFromEntityPaths(eventEntityPath, this.repository.entityTypeInfo);
            if (childrenPaths && childrenPaths.toString() === paths.toString()) {
                // 发生值变化的数据位于要获取当前行的子表中，此时事件行应该是发生值变化的数据id，而不是当前行id
                primaryValue = event.id || null;
                if (!primaryValue) {
                    primaryValue = this.getEventId(event.path, paths[paths.length - 1]);
                }
            }
            if (primaryValue) {
                var bindingObject = bindingList.findById(primaryValue);
                if (bindingObject) {
                    result = bindingObject.toJSON();
                }
            }
        }
        return result;
    };
    return EntityUpdateEventHandler;
}(EventHandler));
export { EntityUpdateEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X3VwZGF0ZV9ldmVudF9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXZlbnQtaGFuZGxlci9lbnRpdHlfdXBkYXRlX2V2ZW50X2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUE4QyxvREFBWTtJQUExRDs7SUFpRkEsQ0FBQztJQS9FUSx5Q0FBTSxHQUFiLFVBQWMsS0FBMkI7UUFBekMsaUJBOEJDO1FBN0JDLE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFDLGdCQUE2QztZQUNqRiw0QkFBNEI7WUFDNUIsSUFBSSxnQkFBZ0IsQ0FBQyxFQUFFLEtBQUssS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsVUFBVSxJQUFJLGdCQUFnQixDQUFDLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFdBQVcsRUFBRTtnQkFDeFMsT0FBTyxLQUFLLENBQUM7YUFDZDtZQUNELElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDdEQsSUFBSSxDQUFDLE1B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QUFDO1FBQ3ZELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLElBQUksWUFBWSxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsZUFBZSxJQUFJLElBQUksQ0FBQztZQUNuRSxXQUFXO1lBQ1gsSUFBTSxhQUFhLEdBQUcsY0FBYyxDQUFDLHdDQUF3QyxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1lBQy9ILElBQUksYUFBYSxJQUFJLGFBQWEsQ0FBQyxRQUFRLEVBQUUsS0FBSyxLQUFLLENBQUMsUUFBUSxFQUFFLEVBQUU7Z0JBQ2xFLG1EQUFtRDtnQkFDbkQsWUFBWSxHQUFHLEtBQUssQ0FBQyxFQUFFLElBQUksSUFBSSxDQUFDO2dCQUNoQyxJQUFJLENBQUMsWUFBWSxFQUFFO29CQUNqQixZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ3JFO2FBQ0Y7WUFDRCxJQUFJLFlBQVksRUFBRTtnQkFDaEIsSUFBTSxhQUFhLEdBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDekQsSUFBSSxhQUFhLEVBQUU7b0JBQ2pCLE1BQU0sR0FBRyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ2pDO2FBQ0Y7U0FDRjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2hCLENBQUM7SUFDSCwrQkFBQztBQUFELENBQUMsQUFqRkQsQ0FBOEMsWUFBWSxHQWlGekQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCaW5kaW5nTGlzdCB9IGZyb20gXCIuLi8uLi9iaW5kaW5nLWRhdGEvaW5kZXhcIjtcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvbi9pbmRleFwiO1xuaW1wb3J0IHsgRU5USVRZX1RFTVBMQVRFIH0gZnJvbSBcIi4uL3Jlc29sdmVyL2luZGV4XCI7XG5pbXBvcnQgeyBFeHByZXNzaW9uVXRpbCB9IGZyb20gXCIuLi91dGlscy9leHByZXNzaW9uX3V0aWxcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL2V2ZW50X2hhbmRsZXJcIjtcblxuZXhwb3J0IGNsYXNzIEVudGl0eVVwZGF0ZUV2ZW50SGFuZGxlciBleHRlbmRzIEV2ZW50SGFuZGxlciB7XG5cbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICByZXR1cm4gdGhpcy5leHByZXNzaW9uT2JqZWN0cy5maWx0ZXIoKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xuICAgICAgLy8g6YeN5paw5Yqg6L295a6e5L2T5pe25LiN6K6h566X6K6h566X6KGo6L6+5byP77yM5Y+q5aSE55CG5Y+q6K+744CB5b+F5aGr562JXG4gICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5ucyAhPT0gZXZlbnQubnMgfHwgIWV4cHJlc3Npb25PYmplY3QuZGVwcyB8fCBleHByZXNzaW9uT2JqZWN0LmRlcHMubGVuZ3RoID09PSAwIHx8IGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5Db21wdXRlIHx8IGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5EZXBlbmRlbmN5IHx8IGV4cHJlc3Npb25PYmplY3QudHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5EYXRhUGlja2luZykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLmFuYWx5c2lzKGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIOW/hemhu+aYr+S4u+ihqOihqOi+vuW8j1xuICAgICAgaWYgKHJlc3VsdC5leHByZXNzaW9uVGFibGVQYXRocy5sZW5ndGggIT09IDApIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3QgaW5kZXggPSBleHByZXNzaW9uT2JqZWN0LmRlcHMuZmluZEluZGV4KChkZXA6IHN0cmluZykgPT4ge1xuICAgICAgICBpZiAoIWRlcC5zdGFydHNXaXRoKEVOVElUWV9URU1QTEFURSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGVwcyA9IGRlcC5zcGxpdChFeHByZXNzaW9uLkRFUEVOREVOQ1lfU1BMSVRFUikuZmlsdGVyKHAgPT4gcCkuc2xpY2UoMSk7XG4gICAgICAgIGNvbnN0IGRlcFBhdGhJbmZvID0gdGhpcy5nZXRQYXRoSW5mbyhkZXBzLmpvaW4oJy8nKSk7XG4gICAgICAgIGlmICghZGVwUGF0aEluZm8pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRlcFBhdGhJbmZvLnBhdGhzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGluZGV4ID09PSAtMSA/IGZhbHNlIDogdHJ1ZTtcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICog5Y+R5biD5LqL5Lu2XG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKi9cbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xuICAgIGlmIChleHByZXNzaW9ucyAmJiBleHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcbiAgICAgICAgY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50LCBlbnRpdHlDb250ZXh0KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtKGV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xuICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdC5zZXQoZXhwcmVzc2lvbk9iamVjdC5pZCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybihgRXZlbnRIYW5kbGVyIOihqOi+vuW8j+acquiuvue9ruWUr+S4gOagh+ivhu+8jOaXoOazleabtOaWsOihqOi+vuW8j+WAvOOAgmApO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWZmZWN0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgZ2V0Q3VycmVudFJvd0J5RXZlbnQocGF0aHM6IHN0cmluZ1tdLCBldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICBsZXQgcmVzdWx0ID0gbnVsbDtcbiAgICBjb25zdCBiaW5kaW5nTGlzdDogQmluZGluZ0xpc3QgPSB0aGlzLmJpbmRpbmdEYXRhLmdldFZhbHVlKHBhdGhzKSBhcyBCaW5kaW5nTGlzdDtcbiAgICBjb25zdCBldmVudEVudGl0eVBhdGggPSB0aGlzLmdldEVudGl0eVBhdGgoZXZlbnQucGF0aCk7XG4gICAgaWYgKGJpbmRpbmdMaXN0ICYmIGJpbmRpbmdMaXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgIGxldCBwcmltYXJ5VmFsdWUgPSBiaW5kaW5nTGlzdC5jdXJyZW50SXRlbS5wcmltYXJ5S2V5VmFsdWUgfHwgbnVsbDtcbiAgICAgIC8vIOS9v+eUqOS6i+S7tuS4reeahOS4u+mUrlxuICAgICAgY29uc3QgY2hpbGRyZW5QYXRocyA9IEV4cHJlc3Npb25VdGlsLmdldEF2YWlsYWJsZUNoaWxkcmVuUGF0aHNGcm9tRW50aXR5UGF0aHMoZXZlbnRFbnRpdHlQYXRoLCB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm8pO1xuICAgICAgaWYgKGNoaWxkcmVuUGF0aHMgJiYgY2hpbGRyZW5QYXRocy50b1N0cmluZygpID09PSBwYXRocy50b1N0cmluZygpKSB7XG4gICAgICAgIC8vIOWPkeeUn+WAvOWPmOWMlueahOaVsOaNruS9jeS6juimgeiOt+WPluW9k+WJjeihjOeahOWtkOihqOS4re+8jOatpOaXtuS6i+S7tuihjOW6lOivpeaYr+WPkeeUn+WAvOWPmOWMlueahOaVsOaNrmlk77yM6ICM5LiN5piv5b2T5YmN6KGMaWRcbiAgICAgICAgcHJpbWFyeVZhbHVlID0gZXZlbnQuaWQgfHwgbnVsbDtcbiAgICAgICAgaWYgKCFwcmltYXJ5VmFsdWUpIHtcbiAgICAgICAgICBwcmltYXJ5VmFsdWUgPSB0aGlzLmdldEV2ZW50SWQoZXZlbnQucGF0aCwgcGF0aHNbcGF0aHMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJpbWFyeVZhbHVlKSB7XG4gICAgICAgIGNvbnN0IGJpbmRpbmdPYmplY3QgPSBiaW5kaW5nTGlzdC5maW5kQnlJZChwcmltYXJ5VmFsdWUpO1xuICAgICAgICBpZiAoYmluZGluZ09iamVjdCkge1xuICAgICAgICAgIHJlc3VsdCA9IGJpbmRpbmdPYmplY3QudG9KU09OKCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxufSJdfQ==