import * as tslib_1 from "tslib";
import { ENTITY_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
var BindingDataSelectionChangedEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(BindingDataSelectionChangedEventHandler, _super);
    function BindingDataSelectionChangedEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 过滤出需要计算的表达式
     * @param event event
     * @returns
     */
    BindingDataSelectionChangedEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter(function (expressionObject) {
                var deps = expressionObject.deps;
                // 没有依赖的表达式不需要关注
                if (!deps || deps.length < 1) {
                    return false;
                }
                // 不依赖实体的表达式不需要关注
                var index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE); });
                if (index === -1) {
                    return false;
                }
                var result = _this.analysis(event, expressionObject);
                if (!result) {
                    return false;
                }
                // 只关注从表行切换
                if (result.eventTablePaths.length !== 1) {
                    return false;
                }
                // 只关注从从表表达式
                if (result.expressionTablePaths.length !== 2) {
                    return false;
                }
                // 只关注事件直接下级的表达式，跨表的不需要关注
                if (!result.expressionTablePaths.join('/').startsWith(result.eventTablePaths.join('/'))) {
                    return false;
                }
                // 从从表表达式需要依赖上级表
                index = deps.findIndex(function (dep) { return dep.startsWith(ENTITY_TEMPLATE + "/" + result.eventTablePaths[0]); });
                if (index === -1) {
                    return false;
                }
                return true;
            });
        }
        return null;
    };
    BindingDataSelectionChangedEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    return BindingDataSelectionChangedEventHandler;
}(EventHandler));
export { BindingDataSelectionChangedEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZGluZ19kYXRhX3NlbGVjdGlvbl9jaGFuZ2VkX2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9ldmVudC1oYW5kbGVyL2JpbmRpbmdfZGF0YV9zZWxlY3Rpb25fY2hhbmdlZF9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRS9DO0lBQTZELG1FQUFZO0lBQXpFOztJQWdFQSxDQUFDO0lBOURDOzs7O09BSUc7SUFDSSx3REFBTSxHQUFiLFVBQWMsS0FBMkI7UUFBekMsaUJBc0NDO1FBckNDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9ELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFDLGdCQUE2QztnQkFDakYsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxnQkFBZ0I7Z0JBQ2hCLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7b0JBQzVCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELGlCQUFpQjtnQkFDakIsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxVQUFBLEdBQUcsSUFBSSxPQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsZUFBZSxDQUFDLEVBQS9CLENBQStCLENBQUMsQ0FBQztnQkFDbkUsSUFBSSxLQUFLLEtBQUssQ0FBQyxDQUFDLEVBQUU7b0JBQ2hCLE9BQU8sS0FBSyxDQUFDO2lCQUNkO2dCQUNELElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLGdCQUFnQixDQUFDLENBQUM7Z0JBQ3RELElBQUksQ0FBQyxNQUFNLEVBQUU7b0JBQ1gsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsV0FBVztnQkFDWCxJQUFJLE1BQU0sQ0FBQyxlQUFlLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtvQkFDdkMsT0FBTyxLQUFLLENBQUM7aUJBQ2Q7Z0JBQ0QsWUFBWTtnQkFDWixJQUFJLE1BQU0sQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO29CQUM1QyxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCx5QkFBeUI7Z0JBQ3pCLElBQUksQ0FBQyxNQUFNLENBQUMsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO29CQUN2RixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxnQkFBZ0I7Z0JBQ2hCLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsR0FBRyxDQUFDLFVBQVUsQ0FBSSxlQUFlLFNBQUksTUFBTSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUcsQ0FBQyxFQUFqRSxDQUFpRSxDQUFDLENBQUM7Z0JBQ2pHLElBQUksS0FBSyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUNoQixPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxPQUFPLElBQUksQ0FBQztZQUNkLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDTSwwREFBUSxHQUFmLFVBQWdCLEtBQTJCO1FBQTNDLGlCQWlCQztRQWhCQyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQyxnQkFBNkM7Z0JBQ2hFLElBQU0sYUFBYSxHQUFHLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdkUsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzFFLElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBSSxDQUFDLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO29CQUNsRixPQUFPO2lCQUNSO2dCQUNELGdCQUFnQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2pDLElBQUksZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUN2QixLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekU7Z0JBQ0QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNILDhDQUFDO0FBQUQsQ0FBQyxBQWhFRCxDQUE2RCxZQUFZLEdBZ0V4RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvbi9pbmRleFwiO1xuaW1wb3J0IHsgRU5USVRZX1RFTVBMQVRFIH0gZnJvbSBcIi4uL3Jlc29sdmVyL2luZGV4XCI7XG5pbXBvcnQgeyBFdmVudEhhbmRsZXIgfSBmcm9tIFwiLi9ldmVudF9oYW5kbGVyXCI7XG5cbmV4cG9ydCBjbGFzcyBCaW5kaW5nRGF0YVNlbGVjdGlvbkNoYW5nZWRFdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xuXG4gIC8qKlxuICAgKiDov4fmu6Tlh7rpnIDopoHorqHnrpfnmoTooajovr7lvI9cbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICBpZiAodGhpcy5leHByZXNzaW9uT2JqZWN0cyAmJiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmZpbHRlcigoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlcHMgPSBleHByZXNzaW9uT2JqZWN0LmRlcHM7XG4gICAgICAgIC8vIOayoeacieS+nei1lueahOihqOi+vuW8j+S4jemcgOimgeWFs+azqFxuICAgICAgICBpZiAoIWRlcHMgfHwgZGVwcy5sZW5ndGggPCAxKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIOS4jeS+nei1luWunuS9k+eahOihqOi+vuW8j+S4jemcgOimgeWFs+azqFxuICAgICAgICBsZXQgaW5kZXggPSBkZXBzLmZpbmRJbmRleChkZXAgPT4gZGVwLnN0YXJ0c1dpdGgoRU5USVRZX1RFTVBMQVRFKSk7XG4gICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5hbmFseXNpcyhldmVudCwgZXhwcmVzc2lvbk9iamVjdCk7XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWPquWFs+azqOS7juihqOihjOWIh+aNolxuICAgICAgICBpZiAocmVzdWx0LmV2ZW50VGFibGVQYXRocy5sZW5ndGggIT09IDEpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5Y+q5YWz5rOo5LuO5LuO6KGo6KGo6L6+5byPXG4gICAgICAgIGlmIChyZXN1bHQuZXhwcmVzc2lvblRhYmxlUGF0aHMubGVuZ3RoICE9PSAyKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIC8vIOWPquWFs+azqOS6i+S7tuebtOaOpeS4i+e6p+eahOihqOi+vuW8j++8jOi3qOihqOeahOS4jemcgOimgeWFs+azqFxuICAgICAgICBpZiAoIXJlc3VsdC5leHByZXNzaW9uVGFibGVQYXRocy5qb2luKCcvJykuc3RhcnRzV2l0aChyZXN1bHQuZXZlbnRUYWJsZVBhdGhzLmpvaW4oJy8nKSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgLy8g5LuO5LuO6KGo6KGo6L6+5byP6ZyA6KaB5L6d6LWW5LiK57qn6KGoXG4gICAgICAgIGluZGV4ID0gZGVwcy5maW5kSW5kZXgoZGVwID0+IGRlcC5zdGFydHNXaXRoKGAke0VOVElUWV9URU1QTEFURX0vJHtyZXN1bHQuZXZlbnRUYWJsZVBhdGhzWzBdfWApKTtcbiAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKTogdm9pZCB7XG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmZpbHRlcihldmVudCk7XG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBlbnRpdHlDb250ZXh0ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIGVudGl0eUNvbnRleHQpO1xuICAgICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnBlcmZvcm0oZXhwcmVzc2lvbk9iamVjdCwgY29udGV4dCk7XG4gICAgICAgIGlmIChyZXN1bHQgPT09IHVuZGVmaW5lZCAmJiAhdGhpcy5pc1ZhbGlkYXRlT3JSZXF1aXJlZEV4cHJlc3Npb24oZXhwcmVzc2lvbk9iamVjdCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQgPSByZXN1bHQ7XG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XG4gICAgICAgICAgdGhpcy5leHByZXNzaW9uUmVzdWx0LnNldChleHByZXNzaW9uT2JqZWN0LmlkLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5lZmZlY3QoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG59Il19