import * as tslib_1 from "tslib";
import { EffectorManager } from "../effector/effector_manager";
import { Expression } from "../expression/index";
import { STATE_TEMPLATE } from "../resolver/index";
import { EventHandler } from "./event_handler";
var StateValueChangedEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(StateValueChangedEventHandler, _super);
    function StateValueChangedEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 获取相关表达式
     * @param event event
     */
    StateValueChangedEventHandler.prototype.filter = function (event) {
        var _this = this;
        if (this.expressionObjects && this.expressionObjects.length > 0) {
            return this.expressionObjects.filter(function (expressionObject) {
                var deps = expressionObject.deps;
                if (!deps || deps.length < 1 || event.ns !== expressionObject.ns) {
                    return false;
                }
                var changePaths = _this.cleanEventPath(event.path);
                changePaths.splice(0, 0, STATE_TEMPLATE);
                var eventPath = changePaths.join('/');
                if (deps.includes(eventPath)) {
                    return true;
                }
                else {
                    return false;
                }
            });
        }
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    StateValueChangedEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                // const entityContext = this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 副作用
     * @param event event
     * @param expressionObject expressionObject
     */
    StateValueChangedEventHandler.prototype.effect = function (event, expressionObject) {
        var _this = this;
        var effector = this.effectorFactory.getEffector(expressionObject);
        var bindingType = expressionObject.bindingType;
        if (bindingType === Expression.ExpressionBindingType.State) {
            // 如果表达式作用于uistate
            effector.effect(expressionObject.path, expressionObject.result, { message: expressionObject.message, eventType: event.type, viewModelId: expressionObject.viewModelId });
        }
        else if (bindingType === Expression.ExpressionBindingType.Field) {
            // 表达式作用于实体属性
            var expressionPathInfo = this.getPathInfo(expressionObject.path);
            var bindingPaths = expressionPathInfo.paths;
            var entities = this.repository.entityCollection.getAllEntities();
            this.effectRows(entities, bindingPaths, expressionPathInfo.propertyNames, function (currentRows, paths) {
                _this.output(event, expressionObject, currentRows, effector, [paths]);
            });
        }
    };
    StateValueChangedEventHandler.prototype.output = function (event, expressionObject, currentRows, effector, paths) {
        var context = this.buildContext(expressionObject, event, null, currentRows);
        var value = this.perform(expressionObject, context);
        if (value === undefined) {
            return;
        }
        expressionObject.result = value;
        if (expressionObject.id) {
            this.expressionResult.set(expressionObject.id, expressionObject.result);
        }
        EffectorManager.effect(effector, expressionObject, paths);
    };
    StateValueChangedEventHandler.prototype.effectRows = function (entities, bindingPaths, propertyNames, callback, currentRows, prevPaths, paths) {
        var _this = this;
        if (currentRows === void 0) { currentRows = []; }
        if (prevPaths === void 0) { prevPaths = []; }
        if (paths === void 0) { paths = []; }
        if (!bindingPaths || bindingPaths.length < 1) {
            entities.forEach(function (entity) {
                if (!entity || !entity.primaryValue) {
                    return;
                }
                var currentPaths = paths.concat([entity.primaryValue]).concat(propertyNames);
                var currentCurrentRows = currentRows.concat([{ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue }]);
                callback(currentCurrentRows, currentPaths);
            });
            currentRows.length = 0;
            paths.length = 0;
        }
        else {
            var flag_1 = false;
            var nextPrevPaths_1 = prevPaths;
            entities.forEach(function (entity) {
                var prop = bindingPaths[0];
                var entityList = entity[prop];
                if (!entityList || entityList.count() < 1) {
                    return;
                }
                currentRows.push({ bindingPath: prevPaths.join('/') || '/', primaryValue: entity.primaryValue });
                paths.push(entity.primaryValue);
                paths.push(prop);
                if (flag_1 === false) {
                    flag_1 = true;
                    nextPrevPaths_1.push(prop);
                }
                var nextBindingPaths = bindingPaths.slice(1);
                _this.effectRows(entityList.items, nextBindingPaths, propertyNames, callback, currentRows, nextPrevPaths_1, paths);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    StateValueChangedEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    return StateValueChangedEventHandler;
}(EventHandler));
export { StateValueChangedEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGVfdmFsdWVfY2hhbmdlZF9ldmVudF9oYW5kbGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vZXZlbnQtaGFuZGxlci9zdGF0ZV92YWx1ZV9jaGFuZ2VkX2V2ZW50X2hhbmRsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUUvRCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUvQztJQUFtRCx5REFBWTtJQUEvRDs7SUE0SEEsQ0FBQztJQTFIQzs7O09BR0c7SUFDSSw4Q0FBTSxHQUFiLFVBQWMsS0FBMkI7UUFBekMsaUJBa0JDO1FBakJDLElBQUksSUFBSSxDQUFDLGlCQUFpQixJQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQy9ELE9BQU8sSUFBSSxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxVQUFDLGdCQUE2QztnQkFDakYsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO2dCQUNuQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUNoRSxPQUFPLEtBQUssQ0FBQztpQkFDZDtnQkFDRCxJQUFNLFdBQVcsR0FBRyxLQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDcEQsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLGNBQWMsQ0FBQyxDQUFDO2dCQUN6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LENBQUM7b0JBQ1osZUFBYSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztpQkFDMUI7Z0JBQ0QsSUFBTSxnQkFBZ0IsR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUMvQyxLQUFJLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLEVBQUUsYUFBYSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsZUFBYSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQ2xILENBQUMsQ0FBQyxDQUFDO1NBQ0o7SUFDSCxDQUFDO0lBQ0Q7Ozs7O09BS0c7SUFDSSw0REFBb0IsR0FBM0IsVUFBNEIsS0FBZSxFQUFFLEtBQTJCO1FBQ3RFLE9BQU8sSUFBSSxDQUFDLG9CQUFvQixDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFDSCxvQ0FBQztBQUFELENBQUMsQUE1SEQsQ0FBbUQsWUFBWSxHQTRIOUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgRWZmZWN0b3JNYW5hZ2VyIH0gZnJvbSBcIi4uL2VmZmVjdG9yL2VmZmVjdG9yX21hbmFnZXJcIjtcbmltcG9ydCB7IEVudGl0eSwgRW50aXR5TGlzdCB9IGZyb20gXCIuLi8uLi9lbnRpdHkvaW5kZXhcIjtcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tIFwiLi4vZXhwcmVzc2lvbi9pbmRleFwiO1xuaW1wb3J0IHsgU1RBVEVfVEVNUExBVEUgfSBmcm9tIFwiLi4vcmVzb2x2ZXIvaW5kZXhcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL2V2ZW50X2hhbmRsZXJcIjtcblxuZXhwb3J0IGNsYXNzIFN0YXRlVmFsdWVDaGFuZ2VkRXZlbnRIYW5kbGVyIGV4dGVuZHMgRXZlbnRIYW5kbGVyIHtcblxuICAvKipcbiAgICog6I635Y+W55u45YWz6KGo6L6+5byPXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKi9cbiAgcHVibGljIGZpbHRlcihldmVudDogRXhwcmVzc2lvbi5FdmVudEFyZ3MpIHtcbiAgICBpZiAodGhpcy5leHByZXNzaW9uT2JqZWN0cyAmJiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmxlbmd0aCA+IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmV4cHJlc3Npb25PYmplY3RzLmZpbHRlcigoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRlcHMgPSBleHByZXNzaW9uT2JqZWN0LmRlcHM7XG4gICAgICAgIGlmICghZGVwcyB8fCBkZXBzLmxlbmd0aCA8IDEgfHwgZXZlbnQubnMgIT09IGV4cHJlc3Npb25PYmplY3QubnMpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2hhbmdlUGF0aHMgPSB0aGlzLmNsZWFuRXZlbnRQYXRoKGV2ZW50LnBhdGgpO1xuICAgICAgICBjaGFuZ2VQYXRocy5zcGxpY2UoMCwgMCwgU1RBVEVfVEVNUExBVEUpO1xuICAgICAgICBjb25zdCBldmVudFBhdGggPSBjaGFuZ2VQYXRocy5qb2luKCcvJyk7XG4gICAgICAgIGlmIChkZXBzLmluY2x1ZGVzKGV2ZW50UGF0aCkpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuICAvKipcbiAgICog5Y+R5biD5LqL5Lu2XG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKi9cbiAgcHVibGljIGRpc3BhdGNoKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xuICAgIGNvbnN0IGV4cHJlc3Npb25zID0gdGhpcy5maWx0ZXIoZXZlbnQpO1xuICAgIGlmIChleHByZXNzaW9ucyAmJiBleHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICBleHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uT2JqZWN0OiBFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3QpID0+IHtcbiAgICAgICAgLy8gY29uc3QgZW50aXR5Q29udGV4dCA9IHRoaXMuYnVpbGRFbnRpdHlDb250ZXh0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGV4cHJlc3Npb25PYmplY3QsIGV2ZW50KTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtKGV4cHJlc3Npb25PYmplY3QsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB1bmRlZmluZWQgJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xuICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdC5zZXQoZXhwcmVzc2lvbk9iamVjdC5pZCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWZmZWN0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICog5Ymv5L2c55SoXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKiBAcGFyYW0gZXhwcmVzc2lvbk9iamVjdCBleHByZXNzaW9uT2JqZWN0XG4gICAqL1xuICBwdWJsaWMgZWZmZWN0KGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncywgZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KTogdm9pZCB7XG4gICAgY29uc3QgZWZmZWN0b3IgPSB0aGlzLmVmZmVjdG9yRmFjdG9yeS5nZXRFZmZlY3RvcihleHByZXNzaW9uT2JqZWN0KTtcbiAgICBjb25zdCBiaW5kaW5nVHlwZSA9IGV4cHJlc3Npb25PYmplY3QuYmluZGluZ1R5cGU7XG5cbiAgICBpZiAoYmluZGluZ1R5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvbkJpbmRpbmdUeXBlLlN0YXRlKSB7XG4gICAgICAvLyDlpoLmnpzooajovr7lvI/kvZznlKjkuo51aXN0YXRlXG4gICAgICBlZmZlY3Rvci5lZmZlY3QoZXhwcmVzc2lvbk9iamVjdC5wYXRoLCBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCwgeyBtZXNzYWdlOiBleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2UsIGV2ZW50VHlwZTogZXZlbnQudHlwZSwgdmlld01vZGVsSWQ6IGV4cHJlc3Npb25PYmplY3Qudmlld01vZGVsSWQgfSk7XG4gICAgfSBlbHNlIGlmIChiaW5kaW5nVHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uQmluZGluZ1R5cGUuRmllbGQpIHtcbiAgICAgIC8vIOihqOi+vuW8j+S9nOeUqOS6juWunuS9k+WxnuaAp1xuICAgICAgY29uc3QgZXhwcmVzc2lvblBhdGhJbmZvID0gdGhpcy5nZXRQYXRoSW5mbyhleHByZXNzaW9uT2JqZWN0LnBhdGgpO1xuICAgICAgY29uc3QgYmluZGluZ1BhdGhzID0gZXhwcmVzc2lvblBhdGhJbmZvLnBhdGhzO1xuICAgICAgY29uc3QgZW50aXRpZXMgPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5Q29sbGVjdGlvbi5nZXRBbGxFbnRpdGllcygpO1xuXG4gICAgICB0aGlzLmVmZmVjdFJvd3MoZW50aXRpZXMsIGJpbmRpbmdQYXRocywgZXhwcmVzc2lvblBhdGhJbmZvLnByb3BlcnR5TmFtZXMsIChjdXJyZW50Um93czogRXhwcmVzc2lvbi5JQ3VycmVudFJvd1tdLCBwYXRoczogc3RyaW5nW10pID0+IHtcbiAgICAgICAgdGhpcy5vdXRwdXQoZXZlbnQsIGV4cHJlc3Npb25PYmplY3QsIGN1cnJlbnRSb3dzLCBlZmZlY3RvciwgW3BhdGhzXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBwdWJsaWMgb3V0cHV0KGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncywgZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0LCBjdXJyZW50Um93czogRXhwcmVzc2lvbi5JQ3VycmVudFJvd1tdLCBlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvciwgcGF0aHM6IGFueVtdW10pIHtcbiAgICBjb25zdCBjb250ZXh0ID0gdGhpcy5idWlsZENvbnRleHQoZXhwcmVzc2lvbk9iamVjdCwgZXZlbnQsIG51bGwsIGN1cnJlbnRSb3dzKTtcbiAgICBjb25zdCB2YWx1ZSA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBleHByZXNzaW9uT2JqZWN0LnJlc3VsdCA9IHZhbHVlO1xuICAgIGlmIChleHByZXNzaW9uT2JqZWN0LmlkKSB7XG4gICAgICB0aGlzLmV4cHJlc3Npb25SZXN1bHQuc2V0KGV4cHJlc3Npb25PYmplY3QuaWQsIGV4cHJlc3Npb25PYmplY3QucmVzdWx0KTtcbiAgICB9XG4gICAgRWZmZWN0b3JNYW5hZ2VyLmVmZmVjdChlZmZlY3RvciwgZXhwcmVzc2lvbk9iamVjdCwgcGF0aHMpO1xuICB9XG4gIHByaXZhdGUgZWZmZWN0Um93cyhlbnRpdGllczogRW50aXR5W10sIGJpbmRpbmdQYXRoczogc3RyaW5nW10sIHByb3BlcnR5TmFtZXM6IHN0cmluZ1tdLCBjYWxsYmFjazogKGN1cnJlbnRSb3dzOiBFeHByZXNzaW9uLklDdXJyZW50Um93W10sIHBhdGhzOiBzdHJpbmdbXSkgPT4gdm9pZCwgY3VycmVudFJvd3M6IEV4cHJlc3Npb24uSUN1cnJlbnRSb3dbXSA9IFtdLCBwcmV2UGF0aHM6IHN0cmluZ1tdID0gW10sIHBhdGhzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgaWYgKCFiaW5kaW5nUGF0aHMgfHwgYmluZGluZ1BhdGhzLmxlbmd0aCA8IDEpIHtcbiAgICAgIGVudGl0aWVzLmZvckVhY2goKGVudGl0eTogRW50aXR5KSA9PiB7XG4gICAgICAgIGlmICghZW50aXR5IHx8ICFlbnRpdHkucHJpbWFyeVZhbHVlKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGN1cnJlbnRQYXRocyA9IHBhdGhzLmNvbmNhdChbZW50aXR5LnByaW1hcnlWYWx1ZV0pLmNvbmNhdChwcm9wZXJ0eU5hbWVzKTtcbiAgICAgICAgY29uc3QgY3VycmVudEN1cnJlbnRSb3dzID0gY3VycmVudFJvd3MuY29uY2F0KFt7IGJpbmRpbmdQYXRoOiBwcmV2UGF0aHMuam9pbignLycpIHx8ICcvJywgcHJpbWFyeVZhbHVlOiBlbnRpdHkucHJpbWFyeVZhbHVlIH1dKTtcbiAgICAgICAgY2FsbGJhY2soY3VycmVudEN1cnJlbnRSb3dzLCBjdXJyZW50UGF0aHMpO1xuICAgICAgfSk7XG4gICAgICBjdXJyZW50Um93cy5sZW5ndGggPSAwO1xuICAgICAgcGF0aHMubGVuZ3RoID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGZsYWcgPSBmYWxzZTtcbiAgICAgIGxldCBuZXh0UHJldlBhdGhzID0gcHJldlBhdGhzO1xuICAgICAgZW50aXRpZXMuZm9yRWFjaCgoZW50aXR5OiBFbnRpdHkpID0+IHtcbiAgICAgICAgY29uc3QgcHJvcCA9IGJpbmRpbmdQYXRoc1swXTtcbiAgICAgICAgY29uc3QgZW50aXR5TGlzdCA9IGVudGl0eVtwcm9wXSBhcyBFbnRpdHlMaXN0PEVudGl0eT47XG4gICAgICAgIGlmICghZW50aXR5TGlzdCB8fCBlbnRpdHlMaXN0LmNvdW50KCkgPCAxKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRSb3dzLnB1c2goeyBiaW5kaW5nUGF0aDogcHJldlBhdGhzLmpvaW4oJy8nKSB8fCAnLycsIHByaW1hcnlWYWx1ZTogZW50aXR5LnByaW1hcnlWYWx1ZSB9KTtcbiAgICAgICAgcGF0aHMucHVzaChlbnRpdHkucHJpbWFyeVZhbHVlKTtcbiAgICAgICAgcGF0aHMucHVzaChwcm9wKTtcbiAgICAgICAgaWYgKGZsYWcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgZmxhZyA9IHRydWU7XG4gICAgICAgICAgbmV4dFByZXZQYXRocy5wdXNoKHByb3ApO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG5leHRCaW5kaW5nUGF0aHMgPSBiaW5kaW5nUGF0aHMuc2xpY2UoMSk7XG4gICAgICAgIHRoaXMuZWZmZWN0Um93cyhlbnRpdHlMaXN0Lml0ZW1zLCBuZXh0QmluZGluZ1BhdGhzLCBwcm9wZXJ0eU5hbWVzLCBjYWxsYmFjaywgY3VycmVudFJvd3MsIG5leHRQcmV2UGF0aHMsIHBhdGhzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICog6I635Y+W5a2Q6KGo5LqL5Lu26KGMXG4gICAqIEBwYXJhbSBwYXRocyBcbiAgICogQHBhcmFtIGV2ZW50IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBnZXRDdXJyZW50Um93QnlFdmVudChwYXRoczogc3RyaW5nW10sIGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IHsgW3Byb3A6IHN0cmluZ106IGFueTsgfSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFJvd0J5UGF0aHMocGF0aHMpO1xuICB9XG59Il19