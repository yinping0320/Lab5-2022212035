import * as tslib_1 from "tslib";
import { EventHandler } from "./event_handler";
var RepositoryAddEntityEventHandler = /** @class */ (function (_super) {
    tslib_1.__extends(RepositoryAddEntityEventHandler, _super);
    function RepositoryAddEntityEventHandler() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * 获取相关表达式
     * @param event event
     * @description 不支持主表直接依赖子表属性的情况，只能聚合子表的字段
     */
    RepositoryAddEntityEventHandler.prototype.filter = function (event) {
        return null;
    };
    /**
     * 发布事件
     * @param event event
     */
    RepositoryAddEntityEventHandler.prototype.dispatch = function (event) {
        var _this = this;
        var expressions = this.filter(event);
        if (expressions && expressions.length > 0) {
            expressions.forEach(function (expressionObject) {
                var entityContext = _this.buildEntityContext(event, expressionObject);
                var context = _this.buildContext(expressionObject, event, entityContext);
                var result = _this.perform(expressionObject, context);
                if (result === undefined && !_this.isValidateOrRequiredExpression(expressionObject)) {
                    return;
                }
                expressionObject.result = result;
                if (expressionObject.id) {
                    _this.expressionResult.set(expressionObject.id, expressionObject.result);
                }
                _this.effect(event, expressionObject);
            });
        }
    };
    /**
     * 获取子表事件行
     * @param paths
     * @param event
     * @returns
     */
    RepositoryAddEntityEventHandler.prototype.getCurrentRowByEvent = function (paths, event) {
        return this.getCurrentRowByPaths(paths);
    };
    return RepositoryAddEntityEventHandler;
}(EventHandler));
export { RepositoryAddEntityEventHandler };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3NpdG9yeV9hZGRfZW50aXR5X2V2ZW50X2hhbmRsZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9ldmVudC1oYW5kbGVyL3JlcG9zaXRvcnlfYWRkX2VudGl0eV9ldmVudF9oYW5kbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFHQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0M7SUFBcUQsMkRBQVk7SUFBakU7O0lBd0NBLENBQUM7SUF2Q0M7Ozs7T0FJRztJQUNJLGdEQUFNLEdBQWIsVUFBYyxLQUEyQjtRQUN2QyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7SUFDRDs7O09BR0c7SUFDSSxrREFBUSxHQUFmLFVBQWdCLEtBQTJCO1FBQTNDLGlCQWlCQztRQWhCQyxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZDLElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3pDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBQyxnQkFBNkM7Z0JBQ2hFLElBQU0sYUFBYSxHQUFHLEtBQUksQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLEVBQUMsZ0JBQWdCLENBQUMsQ0FBQztnQkFDdEUsSUFBTSxPQUFPLEdBQUcsS0FBSSxDQUFDLFlBQVksQ0FBQyxnQkFBZ0IsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLENBQUM7Z0JBQzFFLElBQU0sTUFBTSxHQUFHLEtBQUksQ0FBQyxPQUFPLENBQUMsZ0JBQWdCLEVBQUUsT0FBTyxDQUFDLENBQUM7Z0JBQ3ZELElBQUksTUFBTSxLQUFLLFNBQVMsSUFBRyxDQUFDLEtBQUksQ0FBQyw4QkFBOEIsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFO29CQUNqRixPQUFPO2lCQUNSO2dCQUNELGdCQUFnQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7Z0JBQ2pDLElBQUksZ0JBQWdCLENBQUMsRUFBRSxFQUFFO29CQUN2QixLQUFJLENBQUMsZ0JBQWdCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQztpQkFDekU7Z0JBQ0QsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUN2QyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUNEOzs7OztPQUtHO0lBQ0ksOERBQW9CLEdBQTNCLFVBQTRCLEtBQWUsRUFBRSxLQUEyQjtRQUN0RSxPQUFPLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBQ0gsc0NBQUM7QUFBRCxDQUFDLEFBeENELENBQXFELFlBQVksR0F3Q2hFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5IH0gZnJvbSBcIi4uLy4uL2VudGl0eS9pbmRleFwiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuLi9leHByZXNzaW9uXCI7XG5pbXBvcnQgeyBFTlRJVFlfVEVNUExBVEUgfSBmcm9tIFwiLi4vcmVzb2x2ZXIvaW5kZXhcIjtcbmltcG9ydCB7IEV2ZW50SGFuZGxlciB9IGZyb20gXCIuL2V2ZW50X2hhbmRsZXJcIjtcblxuZXhwb3J0IGNsYXNzIFJlcG9zaXRvcnlBZGRFbnRpdHlFdmVudEhhbmRsZXIgZXh0ZW5kcyBFdmVudEhhbmRsZXIge1xuICAvKipcbiAgICog6I635Y+W55u45YWz6KGo6L6+5byPXG4gICAqIEBwYXJhbSBldmVudCBldmVudFxuICAgKiBAZGVzY3JpcHRpb24g5LiN5pSv5oyB5Li76KGo55u05o6l5L6d6LWW5a2Q6KGo5bGe5oCn55qE5oOF5Ya177yM5Y+q6IO96IGa5ZCI5a2Q6KGo55qE5a2X5q61XG4gICAqL1xuICBwdWJsaWMgZmlsdGVyKGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIC8qKlxuICAgKiDlj5HluIPkuovku7ZcbiAgICogQHBhcmFtIGV2ZW50IGV2ZW50XG4gICAqL1xuICBwdWJsaWMgZGlzcGF0Y2goZXZlbnQ6IEV4cHJlc3Npb24uRXZlbnRBcmdzKSB7XG4gICAgY29uc3QgZXhwcmVzc2lvbnMgPSB0aGlzLmZpbHRlcihldmVudCk7XG4gICAgaWYgKGV4cHJlc3Npb25zICYmIGV4cHJlc3Npb25zLmxlbmd0aCA+IDApIHtcbiAgICAgIGV4cHJlc3Npb25zLmZvckVhY2goKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBlbnRpdHlDb250ZXh0ID0gdGhpcy5idWlsZEVudGl0eUNvbnRleHQoZXZlbnQsZXhwcmVzc2lvbk9iamVjdCk7XG4gICAgICAgIGNvbnN0IGNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChleHByZXNzaW9uT2JqZWN0LCBldmVudCwgZW50aXR5Q29udGV4dCk7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMucGVyZm9ybShleHByZXNzaW9uT2JqZWN0LCBjb250ZXh0KTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gdW5kZWZpbmVkJiYgIXRoaXMuaXNWYWxpZGF0ZU9yUmVxdWlyZWRFeHByZXNzaW9uKGV4cHJlc3Npb25PYmplY3QpKSB7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGV4cHJlc3Npb25PYmplY3QucmVzdWx0ID0gcmVzdWx0O1xuICAgICAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5pZCkge1xuICAgICAgICAgIHRoaXMuZXhwcmVzc2lvblJlc3VsdC5zZXQoZXhwcmVzc2lvbk9iamVjdC5pZCwgZXhwcmVzc2lvbk9iamVjdC5yZXN1bHQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZWZmZWN0KGV2ZW50LCBleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICog6I635Y+W5a2Q6KGo5LqL5Lu26KGMXG4gICAqIEBwYXJhbSBwYXRocyBcbiAgICogQHBhcmFtIGV2ZW50IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBnZXRDdXJyZW50Um93QnlFdmVudChwYXRoczogc3RyaW5nW10sIGV2ZW50OiBFeHByZXNzaW9uLkV2ZW50QXJncyk6IG51bGwgfCB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Q3VycmVudFJvd0J5UGF0aHMocGF0aHMpO1xuICB9XG59Il19