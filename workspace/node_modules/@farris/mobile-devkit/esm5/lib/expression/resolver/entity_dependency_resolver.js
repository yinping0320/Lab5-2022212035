import * as tslib_1 from "tslib";
import { ExpressionUtil } from '../utils/expression_util';
import { ENTITY_TEMPLATE } from './types';
var EntityDependencyResolver = /** @class */ (function () {
    function EntityDependencyResolver(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.repository = this.viewModelContext.repository;
        this.entityTypeInfo = this.repository.entityTypeInfo;
    }
    /**
     * 解析用户表达式中的实体依赖
     * @param expr 用户配置的完整表达式
     * @returns
     */
    EntityDependencyResolver.prototype.resolve = function (expr) {
        var groupFunctionDependencies = ExpressionUtil.getGroupFunctionDependency(expr, this.repository.entityTypeInfo);
        var entityDependencies = this.getEntityDependency(expr);
        // 去除错误的到子表的依赖
        if (groupFunctionDependencies && groupFunctionDependencies.length > 0 && entityDependencies && entityDependencies.length > 0) {
            groupFunctionDependencies.forEach(function (dep) {
                var index = entityDependencies.findIndex(function (item) { return dep.startsWith(item); });
                if (index !== -1) {
                    entityDependencies.splice(index, 1);
                }
            });
        }
        // 去重
        var merged = tslib_1.__spread(groupFunctionDependencies, entityDependencies);
        var deps = tslib_1.__spread(new Set(merged));
        return deps;
    };
    /**
     * 获取合法的实体属性表达式
     * @param entityPropertyExpression 实体属性表达式
     * @returns
     */
    EntityDependencyResolver.prototype.getValidEntityPropertyExpression = function (entityPropertyExpression) {
        var propPaths = entityPropertyExpression.split('.');
        var propInfo = null;
        try {
            propInfo = this.entityTypeInfo.getPropInfoByPath(propPaths);
        }
        catch (e) { }
        if (!propInfo) {
            if (propPaths.length > 1) {
                propPaths.pop();
                return this.getValidEntityPropertyExpression(propPaths.join('.'));
            }
            else {
                return null;
            }
        }
        else {
            return entityPropertyExpression.split('.');
        }
    };
    /**
     * 获取所有实体依赖
     * @param expr 表达式字符串
     * @returns
     */
    EntityDependencyResolver.prototype.getEntityDependency = function (expr) {
        var _this = this;
        var deps = [];
        if (this.entityTypeInfo) {
            // 使用正则匹配出所有实体
            var regex = new RegExp("[\\'\\\"]?\\s*(" + this.entityTypeInfo.entityInfo.nodeCode + "|" + this.entityTypeInfo.entityInfo.originalCode + ")[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\\"]?", 'g');
            var entityPropertyExpressions = expr.match(regex);
            if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                entityPropertyExpressions.forEach(function (item) {
                    if (item.indexOf('.') === -1) {
                        console.warn("\u65E0\u6548\u7684\u5B9E\u4F53\u8868\u8FBE\u5F0F:" + item);
                        return;
                    }
                    // 去空格
                    item = item.trim().replace(/\"/g, '');
                    var paths = ExpressionUtil.convertToNodeCode(item, _this.repository.entityTypeInfo);
                    item = paths.join('.');
                    // 截去主实体及点
                    item = item.substr(item.indexOf('.') + 1);
                    var dep = _this.getValidEntityPropertyExpression(item);
                    if (dep && Array.isArray(dep) && dep.length > 0) {
                        // 此处必须加上主实体的名字来区分依赖的是实体还是其他类型的数据
                        dep.splice(0, 0, ENTITY_TEMPLATE);
                        deps.push(dep.join('/'));
                    }
                });
            }
        }
        else {
            console.warn("\u83B7\u53D6\u5B9E\u4F53\u7C7B\u578B\u4FE1\u606F\u5931\u8D25\uFF0C\u8BF7\u91CD\u65B0\u7F16\u8BD1\u6539\u8868\u5355\u3002");
        }
        return deps;
    };
    return EntityDependencyResolver;
}());
export { EntityDependencyResolver };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X2RlcGVuZGVuY3lfcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9yZXNvbHZlci9lbnRpdHlfZGVwZW5kZW5jeV9yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBRUEsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzFELE9BQU8sRUFBRSxlQUFlLEVBQThCLE1BQU0sU0FBUyxDQUFDO0FBSXRFO0lBTUUsa0NBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ3BELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQztRQUNuRCxJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDO0lBQ3ZELENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksMENBQU8sR0FBZCxVQUFlLElBQVk7UUFDekIsSUFBTSx5QkFBeUIsR0FBRyxjQUFjLENBQUMsMEJBQTBCLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDbEgsSUFBTSxrQkFBa0IsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDMUQsY0FBYztRQUNkLElBQUkseUJBQXlCLElBQUkseUJBQXlCLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxrQkFBa0IsSUFBSSxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQzVILHlCQUF5QixDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQVc7Z0JBQzVDLElBQU0sS0FBSyxHQUFHLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxVQUFBLElBQUksSUFBSSxPQUFBLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQXBCLENBQW9CLENBQUMs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QUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxHQUFHLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTt3QkFDL0MsaUNBQWlDO3dCQUNqQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsZUFBZSxDQUFDLENBQUM7d0JBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO3FCQUMxQjtnQkFDSCxDQUFDLENBQUMsQ0FBQzthQUNKO1NBQ0Y7YUFBTTtZQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsMEhBQXNCLENBQUMsQ0FBQztTQUN0QztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztJQUVILCtCQUFDO0FBQUQsQ0FBQyxBQTdGRCxJQTZGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERhdGFUeXBlSW5mbyB9IGZyb20gJy4uLy4uL2VudGl0eS9pbmRleCc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yeS9pbmRleCc7XG5pbXBvcnQgeyBFeHByZXNzaW9uVXRpbCB9IGZyb20gJy4uL3V0aWxzL2V4cHJlc3Npb25fdXRpbCc7XG5pbXBvcnQgeyBFTlRJVFlfVEVNUExBVEUsIEdST1VQX0ZVTkNUSU9OUywgSVJlc29sdmVyIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnLi4vLi4vdmlldy1tb2RlbC9pbmRleCc7XG5cblxuZXhwb3J0IGNsYXNzIEVudGl0eURlcGVuZGVuY3lSZXNvbHZlciBpbXBsZW1lbnRzIElSZXNvbHZlciB7XG5cbiAgcHJpdmF0ZSByZXBvc2l0b3J5OiBSZXBvc2l0b3J5PGFueT47XG5cbiAgcHJpdmF0ZSBlbnRpdHlUeXBlSW5mbzogRGF0YVR5cGVJbmZvO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xuICAgIHRoaXMucmVwb3NpdG9yeSA9IHRoaXMudmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5O1xuICAgIHRoaXMuZW50aXR5VHlwZUluZm8gPSB0aGlzLnJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm87XG4gIH1cblxuICAvKipcbiAgICog6Kej5p6Q55So5oi36KGo6L6+5byP5Lit55qE5a6e5L2T5L6d6LWWXG4gICAqIEBwYXJhbSBleHByIOeUqOaIt+mFjee9rueahOWujOaVtOihqOi+vuW8j1xuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyByZXNvbHZlKGV4cHI6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBncm91cEZ1bmN0aW9uRGVwZW5kZW5jaWVzID0gRXhwcmVzc2lvblV0aWwuZ2V0R3JvdXBGdW5jdGlvbkRlcGVuZGVuY3koZXhwciwgdGhpcy5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvKTtcbiAgICBjb25zdCBlbnRpdHlEZXBlbmRlbmNpZXMgPSB0aGlzLmdldEVudGl0eURlcGVuZGVuY3koZXhwcik7XG4gICAgLy8g5Y676Zmk6ZSZ6K+v55qE5Yiw5a2Q6KGo55qE5L6d6LWWXG4gICAgaWYgKGdyb3VwRnVuY3Rpb25EZXBlbmRlbmNpZXMgJiYgZ3JvdXBGdW5jdGlvbkRlcGVuZGVuY2llcy5sZW5ndGggPiAwICYmIGVudGl0eURlcGVuZGVuY2llcyAmJiBlbnRpdHlEZXBlbmRlbmNpZXMubGVuZ3RoID4gMCkge1xuICAgICAgZ3JvdXBGdW5jdGlvbkRlcGVuZGVuY2llcy5mb3JFYWNoKChkZXA6IHN0cmluZykgPT4ge1xuICAgICAgICBjb25zdCBpbmRleCA9IGVudGl0eURlcGVuZGVuY2llcy5maW5kSW5kZXgoaXRlbSA9PiBkZXAuc3RhcnRzV2l0aChpdGVtKSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICBlbnRpdHlEZXBlbmRlbmNpZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIOWOu+mHjVxuICAgIGNvbnN0IG1lcmdlZCA9IFsuLi5ncm91cEZ1bmN0aW9uRGVwZW5kZW5jaWVzLCAuLi5lbnRpdHlEZXBlbmRlbmNpZXNdO1xuICAgIGNvbnN0IGRlcHMgPSBbLi4ubmV3IFNldChtZXJnZWQpXTtcbiAgICByZXR1cm4gZGVwcztcbiAgfVxuICAvKipcbiAgICog6I635Y+W5ZCI5rOV55qE5a6e5L2T5bGe5oCn6KGo6L6+5byPXG4gICAqIEBwYXJhbSBlbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb24g5a6e5L2T5bGe5oCn6KGo6L6+5byPXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRWYWxpZEVudGl0eVByb3BlcnR5RXhwcmVzc2lvbihlbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb246IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBwcm9wUGF0aHMgPSBlbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb24uc3BsaXQoJy4nKTtcbiAgICBsZXQgcHJvcEluZm8gPSBudWxsO1xuICAgIHRyeSB7XG4gICAgICBwcm9wSW5mbyA9IHRoaXMuZW50aXR5VHlwZUluZm8uZ2V0UHJvcEluZm9CeVBhdGgocHJvcFBhdGhzKTtcbiAgICB9IGNhdGNoIChlKSB7IH1cbiAgICBpZiAoIXByb3BJbmZvKSB7XG4gICAgICBpZiAocHJvcFBhdGhzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgcHJvcFBhdGhzLnBvcCgpO1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRWYWxpZEVudGl0eVByb3BlcnR5RXhwcmVzc2lvbihwcm9wUGF0aHMuam9pbignLicpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZW50aXR5UHJvcGVydHlFeHByZXNzaW9uLnNwbGl0KCcuJyk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiDojrflj5bmiYDmnInlrp7kvZPkvp3otZZcbiAgICogQHBhcmFtIGV4cHIg6KGo6L6+5byP5a2X56ym5LiyXG4gICAqIEByZXR1cm5zIFxuICAgKi9cbiAgcHJpdmF0ZSBnZXRFbnRpdHlEZXBlbmRlbmN5KGV4cHI6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgICBjb25zdCBkZXBzID0gW107XG4gICAgaWYgKHRoaXMuZW50aXR5VHlwZUluZm8pIHtcbiAgICAgIC8vIOS9v+eUqOato+WImeWMuemFjeWHuuaJgOacieWunuS9k1xuICAgICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBbXFxcXCdcXFxcXCJdP1xcXFxzKigke3RoaXMuZW50aXR5VHlwZUluZm8uZW50aXR5SW5mby5ub2RlQ29kZX18JHt0aGlzLmVudGl0eVR5cGVJbmZvLmVudGl0eUluZm8ub3JpZ2luYWxDb2RlfSlbXFxcXC5cXFxcW1xcXFxdYS16QS1aMC05X10rXFxcXHMqW1xcXFwnXFxcXFwiXT9gLCAnZycpO1xuICAgICAgY29uc3QgZW50aXR5UHJvcGVydHlFeHByZXNzaW9uczogUmVnRXhwTWF0Y2hBcnJheSA9IGV4cHIubWF0Y2gocmVnZXgpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucykgJiYgZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIOino+aekOWHuuaJgOacieWunuS9k+ebuOWFs+eahOWtl+espuS4su+8jOS7peS4u+WunuS9k+WQjeWtl+W8gOWktO+8jOWMheWQq+S4u+WunuS9k+WxnuaAp+aIluWtkOihqFxuICAgICAgICBlbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb25zLmZvckVhY2goKGl0ZW06IHN0cmluZykgPT4ge1xuICAgICAgICAgIGlmIChpdGVtLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5peg5pWI55qE5a6e5L2T6KGo6L6+5byPOiR7aXRlbX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8g5Y6756m65qC8XG4gICAgICAgICAgaXRlbSA9IGl0ZW0udHJpbSgpLnJlcGxhY2UoL1xcXCIvZywgJycpO1xuICAgICAgICAgIGNvbnN0IHBhdGhzID0gRXhwcmVzc2lvblV0aWwuY29udmVydFRvTm9kZUNvZGUoaXRlbSwgdGhpcy5yZXBvc2l0b3J5LmVudGl0eVR5cGVJbmZvKTtcbiAgICAgICAgICBpdGVtID0gcGF0aHMuam9pbignLicpO1xuICAgICAgICAgIC8vIOaIquWOu+S4u+WunuS9k+WPiueCuVxuICAgICAgICAgIGl0ZW0gPSBpdGVtLnN1YnN0cihpdGVtLmluZGV4T2YoJy4nKSArIDEpO1xuICAgICAgICAgIGNvbnN0IGRlcCA9IHRoaXMuZ2V0VmFsaWRFbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb24oaXRlbSk7XG4gICAgICAgICAgaWYgKGRlcCAmJiBBcnJheS5pc0FycmF5KGRlcCkgJiYgZGVwLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIOatpOWkhOW/hemhu+WKoOS4iuS4u+WunuS9k+eahOWQjeWtl+adpeWMuuWIhuS+nei1lueahOaYr+WunuS9k+i/mOaYr+WFtuS7luexu+Wei+eahOaVsOaNrlxuICAgICAgICAgICAgZGVwLnNwbGljZSgwLCAwLCBFTlRJVFlfVEVNUExBVEUpO1xuICAgICAgICAgICAgZGVwcy5wdXNoKGRlcC5qb2luKCcvJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnNvbGUud2Fybihg6I635Y+W5a6e5L2T57G75Z6L5L+h5oGv5aSx6LSl77yM6K+36YeN5paw57yW6K+R5pS56KGo5Y2V44CCYCk7XG4gICAgfVxuICAgIHJldHVybiBkZXBzO1xuICB9XG5cbn0iXX0=