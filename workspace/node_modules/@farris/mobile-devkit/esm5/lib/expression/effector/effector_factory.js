import { Expression } from '../expression/index';
import { EffectorRegistry } from './effector_registry';
import { RepositoryEffector } from './repository_effector';
import { UIStateEffector } from './uistate_effector';
import { ReadonlyEffector } from './effector_readonly';
import { ValidateEffector } from './effector_validate';
import { RequiredEffector } from './effector_required';
import { VisibleEffector } from './effector_visible';
import { DependencyEffector } from './effector_dependency';
var EffectorFactory = /** @class */ (function () {
    function EffectorFactory(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.injector = this.viewModelContext.injector;
        this.effectorRegistry = this.injector.get(EffectorRegistry);
    }
    EffectorFactory.prototype.getEffector = function (expressionObject) {
        var path = expressionObject.path;
        var ns = expressionObject.ns;
        var bindingType = expressionObject.bindingType;
        var type = expressionObject.type;
        var nsEffectors = this.effectorRegistry.effectors.filter(function (effector) { return effector.ns == ns; });
        // 计算表达式
        if (type === Expression.ExpressionType.Compute) {
            if (bindingType === Expression.ExpressionBindingType.Field) {
                return nsEffectors.find(function (effector) { return effector instanceof RepositoryEffector; });
            }
            else if (bindingType === Expression.ExpressionBindingType.State) {
                return nsEffectors.find(function (effector) { return effector instanceof UIStateEffector; });
            }
            else {
                throw new Error("\u4E0D\u652F\u6301\u7684\u7ED1\u5B9A\u5B57\u6BB5\u7C7B\u578B\uFF1A" + bindingType);
            }
        }
        else if (type === Expression.ExpressionType.Readonly) {
            // 只读表达式
            return nsEffectors.find(function (effector) { return effector instanceof ReadonlyEffector; });
        }
        else if (type === Expression.ExpressionType.Dependency) {
            // 依赖表达式
            return nsEffectors.find(function (effector) { return effector instanceof DependencyEffector; });
        }
        else if (type === Expression.ExpressionType.Relative) {
            // 关联表达式
            // return nsEffectors.find((effector: Expression.Effector) => effector instanceof RelativeEffector);
        }
        else if (type === Expression.ExpressionType.Validate) {
            // 校验表达式
            return nsEffectors.find(function (effector) { return effector instanceof ValidateEffector; });
        }
        else if (type === Expression.ExpressionType.Required) {
            // 必填表达式
            return nsEffectors.find(function (effector) { return effector instanceof RequiredEffector; });
        }
        else if (type === Expression.ExpressionType.Visible) {
            // 显隐表达式
            return nsEffectors.find(function (effector) { return effector instanceof VisibleEffector; });
        }
        else {
            // Core.warn(`EffectorFactory 没有找到对应的副作用器 ${type}`);
            return null;
        }
    };
    return EffectorFactory;
}());
export { EffectorFactory };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0b3JfZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2VmZmVjdG9yL2VmZmVjdG9yX2ZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzNELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDckQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFM0Q7SUFNRSx5QkFBc0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDdEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDO1FBQy9DLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFFTSxxQ0FBVyxHQUFsQixVQUFtQixnQkFBNkM7UUFDOUQsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQU0sRUFBRSxHQUFHLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUMvQixJQUFNLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxXQUFXLENBQUM7UUFDakQsSUFBTSxJQUFJLEdBQUcsZ0JBQWdCLENBQUMsSUFBSSxDQUFDO1FBQ25DLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxFQUFqQixDQUFpQixDQUFDLENBQUM7UUFFakgsUUFBUTtRQUNSLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsT0FBTyxFQUFFO1lBQzlDLElBQUksV0FBVyxLQUFLLFVBQVUsQ0FBQyxxQkFBcUIsQ0FBQyxLQUFLLEVBQUU7Z0JBQzFELE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQTZCLElBQUssT0FBQSxRQUFRLFlBQVksa0JBQWtCLEVBQXRDLENBQXNDLENBQUMsQ0FBQzthQUNwRztpQkFBTSxJQUFJLFdBQVcsS0FBSyxVQUFVLENBQUMscUJBQXFCLENBQUMsS0FBSyxFQUFFO2dCQUNqRSxPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGVBQWUsRUFBbkMsQ0FBbUMsQ0FBQyxDQUFDO2FBQ2pHO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxLQUFLLENBQUMsdUVBQWMsV0FBYSxDQUFDLENBQUM7YUFDOUM7U0FDRjthQUFNLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFO1lBQ3RELFFBQVE7WUFDUixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGdCQUFnQixFQUFwQyxDQUFvQyxDQUFDLENBQUM7U0FDbEc7YUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFVBQVUsRUFBRTtZQUN4RCxRQUFRO1lBQ1IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsWUFBWSxrQkFBa0IsRUFBdEMsQ0FBc0MsQ0FBQyxDQUFDO1NBQ3BHO2FBQU0sSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxRQUFRLEVBQUU7WUFDdEQsUUFBUTtZQUNSLG9HQUFvRztTQUNyRzthQUFNLElBQUksSUFBSSxLQUFLLFVBQVUsQ0FBQyxjQUFjLENBQUMsUUFBUSxFQUFFO1lBQ3RELFFBQVE7WUFDUixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsVUFBQyxRQUE2QixJQUFLLE9BQUEsUUFBUSxZQUFZLGdCQUFnQixFQUFwQyxDQUFvQyxDQUFDLENBQUM7U0FDbEc7YUFBTSxJQUFJLElBQUksS0FBSyxVQUFVLENBQUMsY0FBYyxDQUFDLFFBQVEsRUFBRTtZQUN0RCxRQUFRO1lBQ1IsT0FBTyxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQUMsUUFBNkIsSUFBSyxPQUFBLFFBQVEsWUFBWSxnQkFBZ0IsRUFBcEMsQ0FBb0MsQ0FBQyxDQUFDO1NBQ2xHO2FBQU0sSUFBSSxJQUFJLEtBQUssVUFBVSxDQUFDLGNBQWMsQ0FBQyxPQUFPLEVBQUU7WUFDckQsUUFBUTtZQUNSLE9BQU8sV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFDLFFBQTZCLElBQUssT0FBQSxRQUFRLFlBQVksZUFBZSxFQUFuQyxDQUFtQyxDQUFDLENBQUM7U0FDakc7YUFBTTtZQUNMLG9EQUFvRDtZQUNwRCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQztJQUVILHNCQUFDO0FBQUQsQ0FBQyxBQW5ERCxJQW1EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSAnLi4vLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0IH0gZnJvbSAnLi4vLi4vdmlldy1tb2RlbC9pbmRleCc7XG5pbXBvcnQgeyBFeHByZXNzaW9uIH0gZnJvbSAnLi4vZXhwcmVzc2lvbi9pbmRleCc7XG5pbXBvcnQgeyBFZmZlY3RvclJlZ2lzdHJ5IH0gZnJvbSAnLi9lZmZlY3Rvcl9yZWdpc3RyeSc7XG5pbXBvcnQgeyBSZXBvc2l0b3J5RWZmZWN0b3IgfSBmcm9tICcuL3JlcG9zaXRvcnlfZWZmZWN0b3InO1xuaW1wb3J0IHsgVUlTdGF0ZUVmZmVjdG9yIH0gZnJvbSAnLi91aXN0YXRlX2VmZmVjdG9yJztcbmltcG9ydCB7IFJlYWRvbmx5RWZmZWN0b3IgfSBmcm9tICcuL2VmZmVjdG9yX3JlYWRvbmx5JztcbmltcG9ydCB7IFZhbGlkYXRlRWZmZWN0b3IgfSBmcm9tICcuL2VmZmVjdG9yX3ZhbGlkYXRlJztcbmltcG9ydCB7IFJlcXVpcmVkRWZmZWN0b3IgfSBmcm9tICcuL2VmZmVjdG9yX3JlcXVpcmVkJztcbmltcG9ydCB7IFZpc2libGVFZmZlY3RvciB9IGZyb20gJy4vZWZmZWN0b3JfdmlzaWJsZSc7XG5pbXBvcnQgeyBEZXBlbmRlbmN5RWZmZWN0b3IgfSBmcm9tICcuL2VmZmVjdG9yX2RlcGVuZGVuY3knO1xuXG5leHBvcnQgY2xhc3MgRWZmZWN0b3JGYWN0b3J5IHtcblxuICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcjtcblxuICBwcml2YXRlIGVmZmVjdG9yUmVnaXN0cnk6IEVmZmVjdG9yUmVnaXN0cnlcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xuICAgIHRoaXMuaW5qZWN0b3IgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuaW5qZWN0b3I7XG4gICAgdGhpcy5lZmZlY3RvclJlZ2lzdHJ5ID0gdGhpcy5pbmplY3Rvci5nZXQoRWZmZWN0b3JSZWdpc3RyeSk7XG4gIH1cblxuICBwdWJsaWMgZ2V0RWZmZWN0b3IoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XG4gICAgY29uc3QgcGF0aCA9IGV4cHJlc3Npb25PYmplY3QucGF0aDtcbiAgICBjb25zdCBucyA9IGV4cHJlc3Npb25PYmplY3QubnM7XG4gICAgY29uc3QgYmluZGluZ1R5cGUgPSBleHByZXNzaW9uT2JqZWN0LmJpbmRpbmdUeXBlO1xuICAgIGNvbnN0IHR5cGUgPSBleHByZXNzaW9uT2JqZWN0LnR5cGU7XG4gICAgY29uc3QgbnNFZmZlY3RvcnMgPSB0aGlzLmVmZmVjdG9yUmVnaXN0cnkuZWZmZWN0b3JzLmZpbHRlcigoZWZmZWN0b3I6IEV4cHJlc3Npb24uRWZmZWN0b3IpID0+IGVmZmVjdG9yLm5zID09IG5zKTtcblxuICAgIC8vIOiuoeeul+ihqOi+vuW8j1xuICAgIGlmICh0eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLkNvbXB1dGUpIHtcbiAgICAgIGlmIChiaW5kaW5nVHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uQmluZGluZ1R5cGUuRmllbGQpIHtcbiAgICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIFJlcG9zaXRvcnlFZmZlY3Rvcik7XG4gICAgICB9IGVsc2UgaWYgKGJpbmRpbmdUeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25CaW5kaW5nVHlwZS5TdGF0ZSkge1xuICAgICAgICByZXR1cm4gbnNFZmZlY3RvcnMuZmluZCgoZWZmZWN0b3I6IEV4cHJlc3Npb24uRWZmZWN0b3IpID0+IGVmZmVjdG9yIGluc3RhbmNlb2YgVUlTdGF0ZUVmZmVjdG9yKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihg5LiN5pSv5oyB55qE57uR5a6a5a2X5q6157G75Z6L77yaJHtiaW5kaW5nVHlwZX1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVhZG9ubHkpIHtcbiAgICAgIC8vIOWPquivu+ihqOi+vuW8j1xuICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIFJlYWRvbmx5RWZmZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5EZXBlbmRlbmN5KSB7XG4gICAgICAvLyDkvp3otZbooajovr7lvI9cbiAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBEZXBlbmRlbmN5RWZmZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5SZWxhdGl2ZSkge1xuICAgICAgLy8g5YWz6IGU6KGo6L6+5byPXG4gICAgICAvLyByZXR1cm4gbnNFZmZlY3RvcnMuZmluZCgoZWZmZWN0b3I6IEV4cHJlc3Npb24uRWZmZWN0b3IpID0+IGVmZmVjdG9yIGluc3RhbmNlb2YgUmVsYXRpdmVFZmZlY3Rvcik7XG4gICAgfSBlbHNlIGlmICh0eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZhbGlkYXRlKSB7XG4gICAgICAvLyDmoKHpqozooajovr7lvI9cbiAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBWYWxpZGF0ZUVmZmVjdG9yKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVxdWlyZWQpIHtcbiAgICAgIC8vIOW/heWhq+ihqOi+vuW8j1xuICAgICAgcmV0dXJuIG5zRWZmZWN0b3JzLmZpbmQoKGVmZmVjdG9yOiBFeHByZXNzaW9uLkVmZmVjdG9yKSA9PiBlZmZlY3RvciBpbnN0YW5jZW9mIFJlcXVpcmVkRWZmZWN0b3IpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WaXNpYmxlKSB7XG4gICAgICAvLyDmmL7pmpDooajovr7lvI9cbiAgICAgIHJldHVybiBuc0VmZmVjdG9ycy5maW5kKChlZmZlY3RvcjogRXhwcmVzc2lvbi5FZmZlY3RvcikgPT4gZWZmZWN0b3IgaW5zdGFuY2VvZiBWaXNpYmxlRWZmZWN0b3IpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBDb3JlLndhcm4oYEVmZmVjdG9yRmFjdG9yeSDmsqHmnInmib7liLDlr7nlupTnmoTlia/kvZznlKjlmaggJHt0eXBlfWApO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==