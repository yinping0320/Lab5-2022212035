import { NAMESPACE } from '../core/index';
import { EffectUtil } from './util';
var RequiredEffector = /** @class */ (function () {
    function RequiredEffector(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.ns = this.viewModelContext.injector.get(NAMESPACE, '');
    }
    RequiredEffector.prototype.effect = function (path, value, options) {
        var viewModelContext;
        if (options.viewModelId) {
            viewModelContext = this.viewModelContext.appContext.viewModelContextManager.getContextById(options.viewModelId);
        }
        else {
            return;
        }
        if (!viewModelContext)
            return;
        if (!viewModelContext.form)
            return;
        var formControl = EffectUtil.getFormValueByPath(path, viewModelContext);
        var form_name = formControl.form_name;
        if (!form_name) {
            return;
        }
        var validators = [{ "type": "required", "constraints": [true], message: options.message || '必填' }];
        if (value === true) {
            viewModelContext.form.addValidate(formControl.bindingPath, formControl.name);
            form_name.pushValidatorFnforRequired(validators, true);
            form_name.required = true;
        }
        else if (value === false) {
            form_name.required = false;
            if (form_name.getValidatorFn() && form_name.getValidatorFn().length >= 1) {
                //去除必填
                form_name.resetValidatorFnforRequired();
                if (form_name.validationResult && form_name.validationResult.type === 'required') {
                    form_name.validationResult = { passing: true, message: '' };
                }
            }
        }
        viewModelContext.form.changes.next({ type: 'validateFieldsFinished' });
    };
    return RequiredEffector;
}());
export { RequiredEffector };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZWZmZWN0b3JfcmVxdWlyZWQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZXhwcmVzc2lvbi9lZmZlY3Rvci9lZmZlY3Rvcl9yZXF1aXJlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFcEM7SUFHRSwwQkFBb0IsZ0JBQWtDO1FBQWxDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7UUFDcEQsSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDOUQsQ0FBQztJQUNNLGlDQUFNLEdBQWIsVUFBYyxJQUFZLEVBQUUsS0FBVSxFQUFFLE9BQWlDO1FBQ3ZFLElBQUksZ0JBQWtDLENBQUM7UUFDdkMsSUFBSSxPQUFPLENBQUMsV0FBVyxFQUFFO1lBQ3ZCLGdCQUFnQixHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsdUJBQXVCLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQTtTQUNoSDthQUFNO1lBQ0wsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLGdCQUFnQjtZQUFFLE9BQU87UUFDOUIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUk7WUFBRSxPQUFPO1FBQ25DLElBQU0sV0FBVyxHQUFHLFVBQVUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztRQUMxRSxJQUFJLFNBQVMsR0FBRyxXQUFXLENBQUMsU0FBd0IsQ0FBQztRQUNyRCxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2QsT0FBTTtTQUNQO1FBQ0QsSUFBTSxVQUFVLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsT0FBTyxFQUFFLE9BQU8sQ0FBQyxPQUFPLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQztRQUNyRyxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDbEIsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsV0FBVyxFQUFFLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUM3RSxTQUFTLENBQUMsMEJBQTBCLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZELFNBQVMsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDO1NBRTNCO2FBQU0sSUFBSSxLQUFLLEtBQUssS0FBSyxFQUFFO1lBQzFCLFNBQVMsQ0FBQyxRQUFRLEdBQUcsS0FBSyxDQUFBO1lBQzFCLElBQUksU0FBUyxDQUFDLGNBQWMsRUFBRSxJQUFJLFNBQVMsQ0FBQyxjQUFjLEVBQUUsQ0FBQyxNQUFNLElBQUksQ0FBQyxFQUFFO2dCQUN4RSxNQUFNO2dCQUNOLFNBQVMsQ0FBQywyQkFBMkIsRUFBRSxDQUFDO2dCQUN4QyxJQUFJLFNBQVMsQ0FBQyxnQkFBZ0IsSUFBSSxTQUFTLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxLQUFLLFVBQVUsRUFBRTtvQkFDaEYsU0FBUyxDQUFDLGdCQUFnQixHQUFHLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsRUFBRSxFQUFFLENBQUM7aUJBQzdEO2FBQ0Y7U0FDRjtRQUNELGdCQUFnQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsSUFBSSxFQUFFLHdCQUF3QixFQUFDLENBQUMsQ0FBQTtJQUN2RSxDQUFDO0lBQ0gsdUJBQUM7QUFBRCxDQUFDLEFBdENELElBc0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4uL2V4cHJlc3Npb24vaW5kZXgnO1xuaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uLy4uL3ZpZXctbW9kZWwvaW5kZXgnXG5pbXBvcnQgeyBGb3JtQ29udHJvbCB9IGZyb20gJy4uLy4uL2Zvcm0nXG5pbXBvcnQgeyBOQU1FU1BBQ0UgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IEVmZmVjdFV0aWwgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgY2xhc3MgUmVxdWlyZWRFZmZlY3RvciBpbXBsZW1lbnRzIEV4cHJlc3Npb24uRWZmZWN0b3Ige1xuICBwdWJsaWMgbnM6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcbiAgICB0aGlzLm5zID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LmluamVjdG9yLmdldChOQU1FU1BBQ0UsICcnKTtcbiAgfVxuICBwdWJsaWMgZWZmZWN0KHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSwgb3B0aW9uczogRXhwcmVzc2lvbi5FZmZlY3RPcHRpb25zKSB7XG4gICAgbGV0IHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XG4gICAgaWYgKG9wdGlvbnMudmlld01vZGVsSWQpIHtcbiAgICAgIHZpZXdNb2RlbENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuYXBwQ29udGV4dC52aWV3TW9kZWxDb250ZXh0TWFuYWdlci5nZXRDb250ZXh0QnlJZChvcHRpb25zLnZpZXdNb2RlbElkKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKCF2aWV3TW9kZWxDb250ZXh0KSByZXR1cm47XG4gICAgaWYgKCF2aWV3TW9kZWxDb250ZXh0LmZvcm0pIHJldHVybjtcbiAgICBjb25zdCBmb3JtQ29udHJvbCA9IEVmZmVjdFV0aWwuZ2V0Rm9ybVZhbHVlQnlQYXRoKHBhdGgsIHZpZXdNb2RlbENvbnRleHQpO1xuICAgIGxldCBmb3JtX25hbWUgPSBmb3JtQ29udHJvbC5mb3JtX25hbWUgYXMgRm9ybUNvbnRyb2w7XG4gICAgaWYgKCFmb3JtX25hbWUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCB2YWxpZGF0b3JzID0gW3sgXCJ0eXBlXCI6IFwicmVxdWlyZWRcIiwgXCJjb25zdHJhaW50c1wiOiBbdHJ1ZV0sIG1lc3NhZ2U6IG9wdGlvbnMubWVzc2FnZSB8fCAn5b+F5aGrJyB9XTtcbiAgICBpZiAodmFsdWUgPT09IHRydWUpIHtcbiAgICAgIHZpZXdNb2RlbENvbnRleHQuZm9ybS5hZGRWYWxpZGF0ZShmb3JtQ29udHJvbC5iaW5kaW5nUGF0aCwgZm9ybUNvbnRyb2wubmFtZSk7XG4gICAgICBmb3JtX25hbWUucHVzaFZhbGlkYXRvckZuZm9yUmVxdWlyZWQodmFsaWRhdG9ycywgdHJ1ZSk7XG4gICAgICBmb3JtX25hbWUucmVxdWlyZWQgPSB0cnVlO1xuXG4gICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gZmFsc2UpIHtcbiAgICAgIGZvcm1fbmFtZS5yZXF1aXJlZCA9IGZhbHNlXG4gICAgICBpZiAoZm9ybV9uYW1lLmdldFZhbGlkYXRvckZuKCkgJiYgZm9ybV9uYW1lLmdldFZhbGlkYXRvckZuKCkubGVuZ3RoID49IDEpIHtcbiAgICAgICAgLy/ljrvpmaTlv4XloatcbiAgICAgICAgZm9ybV9uYW1lLnJlc2V0VmFsaWRhdG9yRm5mb3JSZXF1aXJlZCgpO1xuICAgICAgICBpZiAoZm9ybV9uYW1lLnZhbGlkYXRpb25SZXN1bHQgJiYgZm9ybV9uYW1lLnZhbGlkYXRpb25SZXN1bHQudHlwZSA9PT0gJ3JlcXVpcmVkJykge1xuICAgICAgICAgIGZvcm1fbmFtZS52YWxpZGF0aW9uUmVzdWx0ID0geyBwYXNzaW5nOiB0cnVlLCBtZXNzYWdlOiAnJyB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHZpZXdNb2RlbENvbnRleHQuZm9ybS5jaGFuZ2VzLm5leHQoeyB0eXBlOiAndmFsaWRhdGVGaWVsZHNGaW5pc2hlZCd9KVxuICB9XG59XG4iXX0=