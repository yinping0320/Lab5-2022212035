import * as tslib_1 from "tslib";
import { EMPTY, of } from "rxjs";
import { Repository } from "../../repository/index";
import { MESSAGE_SERVICE_TOKEN, NOTIFY_SERVICE_TOKEN } from "../core/index";
import { ENTITY_TEMPLATE, ResolveService } from "../resolver/index";
import { ExpressionUtil } from "../utils/expression_util";
import { ExpressionExecutor } from "./expression_executor";
import { ExpressionRegistry } from "./expression_registry";
import { Expression } from './types';
import { ExpressionResult } from "./expression_result";
var ExpressionManager = /** @class */ (function () {
    function ExpressionManager(frameContext) {
        this.frameContext = frameContext;
        this.injector = this.frameContext.injector;
        this.resolveService = this.injector.get(ResolveService);
        this.expressionExecutor = this.injector.get(ExpressionExecutor);
        this.expressionRegistry = this.injector.get(ExpressionRegistry);
        this.expressionResult = this.injector.get(ExpressionResult);
        this.messageService = this.injector.get(MESSAGE_SERVICE_TOKEN, null);
        this.notifyService = this.injector.get(NOTIFY_SERVICE_TOKEN, null);
    }
    /**
     * 根据表达式id进行计算
     * @param expressionId 表达式id
     * @param viewModel viewModel
     * @param rowData rowData
     * @returns
     */
    ExpressionManager.prototype.eval = function (expressionId, viewModel, rowData) {
        var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
        if (expressionObject) {
            var customContext = {};
            var bindingPath = viewModel && viewModel.bindingPath || null;
            if (bindingPath && rowData) {
                var bindingPaths = bindingPath.split('/').filter(function (p) { return p; });
                var bindingList = this.frameContext.bindingData.getValue(bindingPaths);
                var primaryKey = 'id';
                if (bindingList) {
                    primaryKey = bindingList.primaryKey;
                }
                var primaryValue = rowData[primaryKey];
                if (primaryValue) {
                    customContext.currentRows = [{ bindingPath: bindingPaths.join('/'), primaryValue: primaryValue }];
                }
            }
            var result = this.execute(expressionObject.expression, customContext);
            this.expressionResult.set(expressionId, result);
            return result;
        }
        else {
            // console.warn('ExpressionManager 执行失败，未获取到表达式!');
        }
        return undefined;
    };
    ExpressionManager.prototype.validate = function (expressionId, options) {
        var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
        if (expressionObject) {
            var patch = options && options.patch || null;
            var customContext = {};
            if (patch) {
                customContext.patch = patch;
            }
            var currentRow = options.currentRow || null;
            if (currentRow) {
                customContext.currentRows = customContext.currentRows || [];
                customContext.currentRows.push(currentRow);
            }
            var result = this.execute(expressionObject.expression, customContext);
            this.expressionResult.set(expressionId, result);
            return result;
        }
        else {
            console.warn('ExpressionManager 执行失败，未获取到表达式!');
        }
        return undefined;
    };
    /**
     * 帮助前封装
     * @param event
     */
    ExpressionManager.prototype.onDataPicking = function (configs) {
        var expressionId = configs && configs.expressionId || null;
        if (!expressionId) {
            console.warn("ExpressionManager \u76F8\u5173\u8868\u8FBE\u5F0F\u8BBE\u7F6E\u9519\u8BEF\uFF0C\u6CA1\u6709\u8868\u8FBE\u5F0F\u7F16\u53F7\u3002");
            return of(true);
        }
        var result = this.eval(expressionId);
        if (!result) {
            var expressionObject = this.expressionRegistry.getExpressionById(expressionId);
            if (!expressionObject) {
                console.warn("ExpressionManager \u65E0\u6CD5\u627E\u5230\u5BF9\u5E94\u7684\u8868\u8FBE\u5F0F" + expressionId);
                return of(true);
            }
            var messageType = expressionObject.messageType || Expression.MessageType.warning;
            var message = expressionObject.message;
            if (message) {
                this.notifyService[messageType](message, { hideTitle: true });
            }
            return EMPTY;
        }
        return of(result);
    };
    /**
     * 执行表达式计算
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    ExpressionManager.prototype.execute = function (expression, customContext) {
        var _a;
        var deps = this.resolveService.resolve(expression);
        var groupDependencies = ExpressionUtil.getGroupFunctionDependency(expression, this.frameContext.repository.entityTypeInfo);
        var entityContext = this.buildEntityContext(deps, groupDependencies, customContext);
        var stateContext = this.buildStateContext();
        var data = customContext && customContext.contexts || null;
        var context = tslib_1.__assign((_a = {}, _a[this.entityOriginalNodeCode] = entityContext, _a), stateContext, { frameContext: this.frameContext, bindingData: this.frameContext.bindingData, repository: this.frameContext.repository }, data);
        if (!entityContext) {
            return undefined;
        }
        return this.expressionExecutor.eval(expression, context);
    };
    /**
     * 执行表达式（返回可观察对象）
     * @param expression 表达式
     * @param customContext 自定义上下文
     * @returns
     */
    ExpressionManager.prototype.executeAsync = function (expression, customContext) {
        var result = this.execute(expression, customContext);
        return of(result);
    };
    /**
     * 构造实体上下文
     * @param deps
     * @param groupDependencies
     * @param context
     * @returns
     */
    ExpressionManager.prototype.buildEntityContext = function (deps, groupDependencies, context) {
        var _this = this;
        var currentRows = context && context.currentRows || null;
        var index = deps.findIndex(function (dep) {
            var isEntityDependency = _this.isEntityDependency(dep);
            // 如果依赖的是state，无需处理，现在需要确定的是返回多少实体的问题，和state没有关系
            // 表达式依赖了实体
            if (isEntityDependency) {
                var isGroupDependency = groupDependencies.findIndex(function (item) { return item === dep; }) !== -1;
                // 是聚合依赖
                if (isGroupDependency) {
                    var dependencyLength = dep.split('/').filter(function (p) { return p; }).length - 1;
                    if (dependencyLength === 1) {
                        // 聚合了主表字段，所有主表数据都需要参与运算，此时已经确定计算的实体上下文了。
                        return true;
                    }
                    else {
                        // 聚合了子表字段，只需要传递当前实体
                        return false;
                    }
                }
                else {
                    // 当前依赖不是聚合，只需要传递当前实体
                    return false;
                }
            }
            return false;
        });
        var isGroupdMainEntity = index !== -1;
        var options = {};
        if (currentRows && currentRows.length > 0) {
            currentRows.forEach(function (currentRow) {
                options[currentRow.bindingPath || '/'] = currentRow.primaryValue;
            });
        }
        var entity = this.getEntity(options);
        var patch = context && context.patch || null;
        if (!entity) {
            return null;
        }
        if (patch && Object.keys(patch).length > 0) {
            Object.keys(patch).forEach(function (key) {
                var paths = key.split('/').filter(function (p) { return p; });
                var value = patch[key];
                _this.setValue(entity, paths, value);
            });
        }
        if (isGroupdMainEntity) {
            var collection = this.frameContext.repository.entityCollection.toJSON();
            entity['__type__'] = 'List';
            entity['__items__'] = collection;
        }
        return entity;
    };
    ExpressionManager.prototype.setValue = function (target, paths, value) {
        if (paths.length === 1) {
            target[paths[0]] = value;
        }
        else {
            var propertyName = paths.pop();
            var result = paths.reduce(function (object, path) {
                return object && object[path];
            }, target);
            result[propertyName] = value;
        }
    };
    /**
     * 是否为实体依赖
     * @param dep
     * @returns
     */
    ExpressionManager.prototype.isEntityDependency = function (dep) {
        return dep.startsWith(ENTITY_TEMPLATE);
    };
    /**
     * 获取实体
     * @param options
     * @returns
     */
    ExpressionManager.prototype.getEntity = function (options) {
        var _this = this;
        var entityTypeInfo = this.frameContext.repository.entityTypeInfo;
        var bindingData = this.frameContext.bindingData;
        var childrenEntityPaths = [];
        var entity = null;
        if (options['/']) {
            // 修正主表
            entity = this.frameContext.bindingData.list.findById(options['/']);
            if (entity) {
                entity = entity.toJSON();
            }
        }
        else {
            entity = this.frameContext.bindingData.list.currentItem.toJSON();
        }
        if (!entity) {
            return null;
        }
        ExpressionUtil.getChildrenEntityPaths(entityTypeInfo, childrenEntityPaths);
        entity['__type__'] = 'Entity';
        if (!childrenEntityPaths || childrenEntityPaths.length < 1) {
            return entity;
        }
        // 找到所有子表
        childrenEntityPaths.forEach(function (paths) {
            var row = null;
            if (options && options[paths.join('/')]) {
                // 不应该使用bindingData，这样就默认使用了当前行
                var bindingList = bindingData.getValue(paths);
                var currentRowId = options[paths.join('/')];
                var currentRow = null;
                if (currentRowId !== bindingList.currentId) {
                    currentRow = bindingList.findById(currentRowId);
                }
                else {
                    currentRow = bindingList.currentItem;
                }
                if (currentRow && currentRow.primaryKeyValue) {
                    row = currentRow.toJSON();
                }
            }
            else {
                // 如果上级表已经切换了当前行，那么下级表也应该切换
                var parentTableCurrentRowChanged = options && !!Object.keys(options).find(function (path) {
                    var fullPath = path.split('/').join('/');
                    return paths.join('/').startsWith(fullPath);
                }) || false;
                if (parentTableCurrentRowChanged) {
                    var primaryValue = options && options['/'] || bindingData.list.currentId;
                    var entity_1 = _this.frameContext.repository.entityCollection.getEntityById(primaryValue);
                    var fullPaths_1 = [];
                    var data = paths.reduce(function (object, path) {
                        fullPaths_1.push(path);
                        var item = object && object[path];
                        if (item) {
                            var currentRowId = options && options[fullPaths_1.join('/')] || item.items[0] && item.items[0].primaryValue || null;
                            if (currentRowId) {
                                var currentRow = item.get(currentRowId);
                                return currentRow || null;
                            }
                        }
                        return null;
                    }, entity_1);
                    if (data) {
                        row = data.toJSON();
                    }
                    else {
                        row = {};
                    }
                }
                else {
                    row = ExpressionUtil.getCurrentRowByPaths(paths, bindingData);
                }
            }
            var propertyName = paths.pop();
            var parent = paths.reduce(function (object, path) {
                return object && object[path] || null;
            }, entity);
            var list = parent[propertyName];
            var node = tslib_1.__assign({ __items__: [] }, row && row || {}, { __type__: 'List' });
            node.length = function () { return node.__items__.length; };
            if (list && Array.isArray(list)) {
                node.__items__ = [].concat(list);
            }
            parent[propertyName] = node;
        });
        return entity;
    };
    Object.defineProperty(ExpressionManager.prototype, "entityOriginalNodeCode", {
        /**
         * 获取主实体原始字段名
         */
        get: function () {
            var repository = this.injector.get(Repository);
            return repository && repository.entityTypeInfo && repository.entityTypeInfo.entityInfo && repository.entityTypeInfo.entityInfo.originalCode || null;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 构造变量上下文
     * @param event
     * @returns
     */
    ExpressionManager.prototype.buildStateContext = function () {
        var result = {};
        if (this.frameContext) {
            var rootFrameContext = this.frameContext.getVirtualRootFrameContext();
            if (rootFrameContext) {
                var uiState_1 = rootFrameContext.viewModel.uiState;
                var propertyNames = Object.getOwnPropertyNames(uiState_1) || [];
                propertyNames.forEach(function (prop) {
                    if (prop.match(/^[a-zA-Z0-9_\$]+$/g) !== null) {
                        result[prop] = uiState_1[prop];
                    }
                });
            }
        }
        return result;
    };
    return ExpressionManager;
}());
export { ExpressionManager };
//# sourceMappingURL=data:application/json;base64,