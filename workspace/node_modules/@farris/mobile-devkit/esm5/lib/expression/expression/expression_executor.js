import { Expression as ExpressionEngineExpression, ExpressionContext, ExpressionEngine } from "@farris/expression-engine";
var ExpressionExecutor = /** @class */ (function () {
    function ExpressionExecutor() {
    }
    /**
     * 编译执行
     * @param expression
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.compile = function (expressionObject, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        var expressionContext = this.buildContext(context);
        if (!expressionObject.factory) {
            var expression_1 = new ExpressionEngineExpression(expressionObject.expression, expressionContext);
            expressionObject.factory = expression_1.compile();
        }
        var expression = expressionObject.factory;
        return expression.eval(expressionContext);
    };
    /**
     * 解析
     * @param expression
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.eval = function (expression, context) {
        if (Object.prototype.toString.call(context) !== '[object Object]') {
            throw new Error('上下文必须为对象！');
        }
        var expressionContext = this.buildContext(context);
        var expressionEngine = new ExpressionEngine(expressionContext);
        return expressionEngine.eval(expression);
    };
    /**
     * 构造表达式上下文
     * @param context
     * @returns
     */
    ExpressionExecutor.prototype.buildContext = function (context) {
        var expressionContext = new ExpressionContext();
        if (context && Object.keys(context).length > 0) {
            Object.keys(context).forEach(function (key) {
                expressionContext.set(key, context[key]);
            });
        }
        return expressionContext;
    };
    return ExpressionExecutor;
}());
export { ExpressionExecutor };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9leGVjdXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9leGVjdXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxJQUFJLDBCQUEwQixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFJMUg7SUFBQTtJQStDQSxDQUFDO0lBOUNDOzs7OztPQUtHO0lBQ0ksb0NBQU8sR0FBZCxVQUFlLGdCQUE2QyxFQUFFLE9BQWlDO1FBQzdGLElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixFQUFFO1lBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDOUI7UUFDRCxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sRUFBRTtZQUM3QixJQUFNLFlBQVUsR0FBRyxJQUFJLDBCQUEwQixDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2xHLGdCQUFnQixDQUFDLE9BQU8sR0FBRyxZQUFVLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDakQ7UUFDRCxJQUFNLFVBQVUsR0FBK0IsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO1FBQ3hFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLGlDQUFJLEdBQVgsVUFBWSxVQUFrQixFQUFFLE9BQWlDO1FBQy9ELElBQUksTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLGlCQUFpQixFQUFFO1lBQ2pFLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDOUI7UUFDRCxJQUFNLGlCQUFpQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDckQsSUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLENBQUM7UUFDakUsT0FBTyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUNEOzs7O09BSUc7SUFDSyx5Q0FBWSxHQUFwQixVQUFxQixPQUFnQztRQUNuRCxJQUFNLGlCQUFpQixHQUFHLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUNsRCxJQUFJLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7WUFDOUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUMsVUFBQyxHQUFXO2dCQUN2QyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQzNDLENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFDRCxPQUFPLGlCQUFpQixDQUFDO0lBQzNCLENBQUM7SUFDSCx5QkFBQztBQUFELENBQUMsQUEvQ0QsSUErQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFeHByZXNzaW9uIGFzIEV4cHJlc3Npb25FbmdpbmVFeHByZXNzaW9uLCBFeHByZXNzaW9uQ29udGV4dCwgRXhwcmVzc2lvbkVuZ2luZSB9IGZyb20gXCJAZmFycmlzL2V4cHJlc3Npb24tZW5naW5lXCI7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0LCBWaWV3TW9kZWwgfSBmcm9tIFwiLi4vLi4vdmlldy1tb2RlbC9pbmRleFwiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gXCIuL3R5cGVzXCI7XG5cbmV4cG9ydCBjbGFzcyBFeHByZXNzaW9uRXhlY3V0b3IgaW1wbGVtZW50cyBFeHByZXNzaW9uLklFeGVjdXRvciB7XG4gIC8qKlxuICAgKiDnvJbor5HmiafooYxcbiAgICogQHBhcmFtIGV4cHJlc3Npb24gXG4gICAqIEBwYXJhbSBjb250ZXh0IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHB1YmxpYyBjb21waWxlKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCwgY29udGV4dD86IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogYW55IHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGNvbnRleHQpICE9PSAnW29iamVjdCBPYmplY3RdJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCfkuIrkuIvmloflv4XpobvkuLrlr7nosaHvvIEnKTtcbiAgICB9XG4gICAgY29uc3QgZXhwcmVzc2lvbkNvbnRleHQgPSB0aGlzLmJ1aWxkQ29udGV4dChjb250ZXh0KTtcbiAgICBpZiAoIWV4cHJlc3Npb25PYmplY3QuZmFjdG9yeSkge1xuICAgICAgY29uc3QgZXhwcmVzc2lvbiA9IG5ldyBFeHByZXNzaW9uRW5naW5lRXhwcmVzc2lvbihleHByZXNzaW9uT2JqZWN0LmV4cHJlc3Npb24sIGV4cHJlc3Npb25Db250ZXh0KTtcbiAgICAgIGV4cHJlc3Npb25PYmplY3QuZmFjdG9yeSA9IGV4cHJlc3Npb24uY29tcGlsZSgpO1xuICAgIH1cbiAgICBjb25zdCBleHByZXNzaW9uOiBFeHByZXNzaW9uRW5naW5lRXhwcmVzc2lvbiA9IGV4cHJlc3Npb25PYmplY3QuZmFjdG9yeTtcbiAgICByZXR1cm4gZXhwcmVzc2lvbi5ldmFsKGV4cHJlc3Npb25Db250ZXh0KTtcbiAgfVxuICAvKipcbiAgICog6Kej5p6QXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIFxuICAgKiBAcGFyYW0gY29udGV4dCBcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwdWJsaWMgZXZhbChleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ/OiB7IFtwcm9wOiBzdHJpbmddOiBhbnkgfSkge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoY29udGV4dCkgIT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ+S4iuS4i+aWh+W/hemhu+S4uuWvueixoe+8gScpO1xuICAgIH1cbiAgICBjb25zdCBleHByZXNzaW9uQ29udGV4dCA9IHRoaXMuYnVpbGRDb250ZXh0KGNvbnRleHQpO1xuICAgIGNvbnN0IGV4cHJlc3Npb25FbmdpbmUgPSBuZXcgRXhwcmVzc2lvbkVuZ2luZShleHByZXNzaW9uQ29udGV4dCk7XG4gICAgcmV0dXJuIGV4cHJlc3Npb25FbmdpbmUuZXZhbChleHByZXNzaW9uKTtcbiAgfVxuICAvKipcbiAgICog5p6E6YCg6KGo6L6+5byP5LiK5LiL5paHXG4gICAqIEBwYXJhbSBjb250ZXh0IFxuICAgKiBAcmV0dXJucyBcbiAgICovXG4gIHByaXZhdGUgYnVpbGRDb250ZXh0KGNvbnRleHQ6IHsgW3Byb3A6IHN0cmluZ106IGFueSB9KTogRXhwcmVzc2lvbkNvbnRleHQge1xuICAgIGNvbnN0IGV4cHJlc3Npb25Db250ZXh0ID0gbmV3IEV4cHJlc3Npb25Db250ZXh0KCk7XG4gICAgaWYgKGNvbnRleHQgJiYgT2JqZWN0LmtleXMoY29udGV4dCkubGVuZ3RoID4gMCkge1xuICAgICAgT2JqZWN0LmtleXMoY29udGV4dCkuZm9yRWFjaCgoa2V5OiBzdHJpbmcpID0+IHtcbiAgICAgICAgZXhwcmVzc2lvbkNvbnRleHQuc2V0KGtleSwgY29udGV4dFtrZXldKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gZXhwcmVzc2lvbkNvbnRleHQ7XG4gIH1cbn0iXX0=