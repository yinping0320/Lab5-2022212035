import * as tslib_1 from "tslib";
import { of } from "rxjs";
import { catchError, switchMap } from "rxjs/operators";
import { TranslateToken } from "../../i18n/index";
import { FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN } from "../manifest/index";
import { Expression } from './types';
import { AppContext } from '../../app';
var ExpressionRegistry = /** @class */ (function () {
    function ExpressionRegistry(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this._expressions = null;
        this.injector = this.viewModelContext.injector;
        this.formExpressionManifestService = this.injector.get(FORM_EXPRESSION_MANIFEST_SERVICE_TOKEN, null);
        this.translate = this.injector.get(TranslateToken, null);
    }
    /**
     * 加载表达式文件
     */
    ExpressionRegistry.prototype.load = function () {
        var _this = this;
        return this.formExpressionManifestService.load().pipe(switchMap(function (describe) {
            var expressions = _this.setExpressions(describe);
            _this.cleanSpecialCharacters();
            return of(expressions);
        }), catchError(function (e) {
            return of([]);
        }));
    };
    ExpressionRegistry.prototype.setExpressions = function (describe) {
        var _this = this;
        var expressions = [];
        var exprs = Array.from(describe);
        var appContext = this.viewModelContext.injector.get(AppContext);
        exprs.forEach(function (expr) {
            expr.expressions.forEach(function (expression) {
                var _a, _b;
                var expressionObject = {
                    id: expression.id,
                    ns: expr.ns,
                    viewModelId: expr.viewModelId,
                    path: expr.path,
                    bindingType: expr.type,
                    type: expression.type,
                    expression: expression.value || expression.expr || '',
                    message: expression.message || null,
                    messageType: expression.messageType || null,
                    deps: []
                };
                if (expression.type === Expression.ExpressionType.Required) {
                    var b = { type: "requiredExpression", constraints: [expression.id], message: expression.message };
                    appContext.validationManager[expr.path] = tslib_1.__assign({}, (appContext.validationManager[expr.path] || {}), (_a = {}, _a[expression.id] = b, _a));
                }
                if (expression.type === Expression.ExpressionType.Validate) {
                    var b = { type: "expression", constraints: [expression.id], message: expression.message };
                    appContext.validationManager[expr.path] = tslib_1.__assign({}, (appContext.validationManager[expr.path] || {}), (_b = {}, _b[expression.id] = b, _b));
                }
                if ((expression.type === Expression.ExpressionType.Required || expression.type === Expression.ExpressionType.Validate)) {
                    if (!expression.message) {
                        expressionObject.message = _this.getExpressionMessage(expression.type);
                    }
                    if (!expression.messageType) {
                        expressionObject.messageType = 'error';
                    }
                }
                if (expressionObject.message) {
                    _this.transform(expressionObject);
                }
                expressions.push(expressionObject);
            });
        });
        this._expressions = expressions;
        return expressions;
    };
    Object.defineProperty(ExpressionRegistry.prototype, "expressions", {
        /**
         * 获取所有表达式
         */
        get: function () {
            if (this._expressions) {
                return of(this._expressions);
            }
            // 短路，实现功能
            if (window['__expressions__']) {
                this.setExpressions(window['__expressions__']);
                return of(this._expressions);
            }
            return this.load();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 根据表达式id获取对应的表达式对象
     * @param id 表达式id
     * @returns
     */
    ExpressionRegistry.prototype.getExpressionById = function (id) {
        if (!this._expressions || this._expressions.length < 1) {
            return null;
        }
        return this._expressions.find(function (expressionObject) { return expressionObject.id === id; });
    };
    ExpressionRegistry.prototype.getExpressionMessage = function (expressionType, defaultValue) {
        if (!(expressionType === Expression.ExpressionType.Validate || expressionType === Expression.ExpressionType.Required)) {
            return null;
        }
        if (!this.translate) {
            return defaultValue;
        }
        var currentLanguage = this.translate.getCurrentLanguage() || 'zh-CHS';
        return Expression.MESSAGE[currentLanguage][expressionType];
    };
    ExpressionRegistry.prototype.transform = function (expressionObject) {
        if (!this.translate) {
            return;
        }
        if (expressionObject.message && expressionObject.message.startsWith('{{') && expressionObject.message.endsWith('}}')) {
            expressionObject.message = this.translate.transform(expressionObject.message.substr(2, expressionObject.message.length - 4), null) || this.getExpressionMessage(expressionObject.type);
        }
    };
    ExpressionRegistry.prototype.cleanSpecialCharacters = function () {
        var _this = this;
        if (!this._expressions || this._expressions.length < 1 || !Array.isArray(this._expressions)) {
            return;
        }
        var repository = this.viewModelContext.repository;
        if (!repository) {
            return;
        }
        var entityTypeInfo = repository.entityTypeInfo;
        var regex = new RegExp("[\\'\\\"]?\\s*(" + entityTypeInfo.entityInfo.nodeCode + "|" + entityTypeInfo.entityInfo.originalCode + ")[\\.\\[\\]a-zA-Z0-9_]+\\s*[\\'\\\"]?", 'g');
        this._expressions.forEach(function (expressionObject) {
            var expr = expressionObject.expression;
            var entityPropertyExpressions = expr.match(regex);
            if (Array.isArray(entityPropertyExpressions) && entityPropertyExpressions.length > 0) {
                // 解析出所有实体相关的字符串，以主实体名字开头，包含主实体属性或子表
                entityPropertyExpressions.forEach(function (item) {
                    if (item.indexOf('.') === -1) {
                        console.warn("\u65E0\u6548\u7684\u5B9E\u4F53\u8868\u8FBE\u5F0F:" + item);
                        return;
                    }
                    // 去数组
                    if (/\[\d\]/g.test(item)) {
                        var replacer = item.replace(/\[\d\]/g, '');
                        expressionObject.expression = _this.replaceAll(expressionObject.expression, item, replacer);
                    }
                    // 去星号
                    if (/\*/g.test(item)) {
                        var replacer = item.replace(/\*/g, '');
                        expressionObject.expression = _this.replaceAll(expressionObject.expression, item, replacer);
                    }
                });
            }
        });
    };
    ExpressionRegistry.prototype.replaceAll = function (originalValue, search, replacer) {
        return originalValue.split(search).join(replacer);
    };
    return ExpressionRegistry;
}());
export { ExpressionRegistry };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwcmVzc2lvbl9yZWdpc3RyeS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9leHByZXNzaW9uL2V4cHJlc3Npb24vZXhwcmVzc2lvbl9yZWdpc3RyeS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZELE9BQU8sRUFBYSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUc3RCxPQUFPLEVBQUUsc0NBQXNDLEVBQWtDLE1BQU0sbUJBQW1CLENBQUM7QUFDM0csT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNyQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sV0FBVyxDQUFBO0FBRXRDO0lBVUUsNEJBQW9CLGdCQUFrQztRQUFsQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBTjlDLGlCQUFZLEdBQWtDLElBQUksQ0FBQztRQVF6RCxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7UUFDL0MsSUFBSSxDQUFDLDZCQUE2QixHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLHNDQUFzQyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3JHLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFRDs7T0FFRztJQUNJLGlDQUFJLEdBQVg7UUFBQSxpQkFXQztRQVZDLE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FDbkQsU0FBUyxDQUFDLFVBQUMsUUFBb0I7WUFDN0IsSUFBTSxXQUFXLEdBQUcsS0FB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QyxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7d0JBQzdDLGdCQUFnQixDQUFDLFVBQVUsR0FBRyxLQUFJLENBQUMsVUFBVSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsUUFBUSxDQUFDLENBQUM7cUJBQzVGO29CQUNELE1BQU07b0JBQ04sSUFBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFDO3dCQUNsQixJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQzt3QkFDekMsZ0JBQWdCLENBQUMsVUFBVSxHQUFHLEtBQUksQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztxQkFDNUY7Z0JBQ0gsQ0FBQyxDQUFDLENBQUM7YUFDSjtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUNPLHVDQUFVLEdBQWxCLFVBQW1CLGFBQXFCLEVBQUUsTUFBYyxFQUFFLFFBQWdCO1FBQ3hFLE9BQU8sYUFBYSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQWhLRCxJQWdLQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdG9yIH0gZnJvbSBcIi4uLy4uL2NvcmUvaW5kZXhcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IGNhdGNoRXJyb3IsIHN3aXRjaE1hcCB9IGZyb20gXCJyeGpzL29wZXJhdG9yc1wiO1xuaW1wb3J0IHsgVHJhbnNsYXRlLCBUcmFuc2xhdGVUb2tlbiB9IGZyb20gXCIuLi8uLi9pMThuL2luZGV4XCI7XG5pbXBvcnQgeyBSZXBvc2l0b3J5IH0gZnJvbSAnLi4vLi4vcmVwb3NpdG9yeS9pbmRleCc7XG5pbXBvcnQgeyBWaWV3TW9kZWxDb250ZXh0LCBWaWV3TW9kZWwgfSBmcm9tIFwiLi4vLi4vdmlldy1tb2RlbC9pbmRleFwiO1xuaW1wb3J0IHsgRk9STV9FWFBSRVNTSU9OX01BTklGRVNUX1NFUlZJQ0VfVE9LRU4sIElGb3JtRXhwcmVzc2lvbk1hbmlmZXN0U2VydmljZSB9IGZyb20gXCIuLi9tYW5pZmVzdC9pbmRleFwiO1xuaW1wb3J0IHsgRXhwcmVzc2lvbiB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgQXBwQ29udGV4dCB9IGZyb20gJy4uLy4uL2FwcCdcbmltcG9ydCB7IFZhbGlkYXRvckZhY3RvcnkgfSBmcm9tICcuLi8uLi92YWxpZGF0b3InXG5leHBvcnQgY2xhc3MgRXhwcmVzc2lvblJlZ2lzdHJ5IHtcblxuICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcjtcblxuICBwcml2YXRlIF9leHByZXNzaW9uczogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0W10gPSBudWxsO1xuXG4gIHByaXZhdGUgZm9ybUV4cHJlc3Npb25NYW5pZmVzdFNlcnZpY2U6IElGb3JtRXhwcmVzc2lvbk1hbmlmZXN0U2VydmljZTtcblxuICBwcml2YXRlIHRyYW5zbGF0ZTogVHJhbnNsYXRlO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgdmlld01vZGVsQ29udGV4dDogVmlld01vZGVsQ29udGV4dCkge1xuXG4gICAgdGhpcy5pbmplY3RvciA9IHRoaXMudmlld01vZGVsQ29udGV4dC5pbmplY3RvcjtcbiAgICB0aGlzLmZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlID0gdGhpcy5pbmplY3Rvci5nZXQoRk9STV9FWFBSRVNTSU9OX01BTklGRVNUX1NFUlZJQ0VfVE9LRU4sIG51bGwpO1xuICAgIHRoaXMudHJhbnNsYXRlID0gdGhpcy5pbmplY3Rvci5nZXQoVHJhbnNsYXRlVG9rZW4sIG51bGwpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWKoOi9veihqOi+vuW8j+aWh+S7tlxuICAgKi9cbiAgcHVibGljIGxvYWQoKTogT2JzZXJ2YWJsZTxFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3RbXT4ge1xuICAgIHJldHVybiB0aGlzLmZvcm1FeHByZXNzaW9uTWFuaWZlc3RTZXJ2aWNlLmxvYWQoKS5waXBlKFxuICAgICAgc3dpdGNoTWFwKChkZXNjcmliZTogQXJyYXk8YW55PikgPT4ge1xuICAgICAgICBjb25zdCBleHByZXNzaW9ucyA9IHRoaXMuc2V0RXhwcmVzc2lvbnMoZGVzY3JpYmUpO1xuXHR0aGlzLmNsZWFuU3BlY2lhbENoYXJhY3RlcnMoKTtcbiAgICAgICAgcmV0dXJuIG9mKGV4cHJlc3Npb25zKTtcbiAgICAgIH0pLFxuICAgICAgY2F0Y2hFcnJvcigoZSkgPT4ge1xuICAgICAgICByZXR1cm4gb2YoW10pO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgcHVibGljIHNldEV4cHJlc3Npb25zKGRlc2NyaWJlKSB7XG4gICAgY29uc3QgZXhwcmVzc2lvbnM6IEFycmF5PEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdD4gPSBbXTtcbiAgICBjb25zdCBleHBycyA9IEFycmF5LmZyb20oZGVzY3JpYmUpO1xuICAgIGNvbnN0IGFwcENvbnRleHQgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuaW5qZWN0b3IuZ2V0PEFwcENvbnRleHQ+KEFwcENvbnRleHQpO1xuICAgIGV4cHJzLmZvckVhY2goKGV4cHI6IGFueSkgPT4ge1xuICAgICAgZXhwci5leHByZXNzaW9ucy5mb3JFYWNoKChleHByZXNzaW9uOiBhbnkpID0+IHtcbiAgICAgICAgY29uc3QgZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0ID0ge1xuICAgICAgICAgIGlkOiBleHByZXNzaW9uLmlkLFxuICAgICAgICAgIG5zOiBleHByLm5zLFxuICAgICAgICAgIHZpZXdNb2RlbElkOiBleHByLnZpZXdNb2RlbElkLFxuICAgICAgICAgIHBhdGg6IGV4cHIucGF0aCxcbiAgICAgICAgICBiaW5kaW5nVHlwZTogZXhwci50eXBlLFxuICAgICAgICAgIHR5cGU6IGV4cHJlc3Npb24udHlwZSxcbiAgICAgICAgICBleHByZXNzaW9uOiBleHByZXNzaW9uLnZhbHVlIHx8IGV4cHJlc3Npb24uZXhwciB8fCAnJyxcbiAgICAgICAgICBtZXNzYWdlOiBleHByZXNzaW9uLm1lc3NhZ2UgfHwgbnVsbCxcbiAgICAgICAgICBtZXNzYWdlVHlwZTogZXhwcmVzc2lvbi5tZXNzYWdlVHlwZSB8fCBudWxsLFxuICAgICAgICAgIGRlcHM6IFtdXG4gICAgICAgIH07XG4gICAgICAgIGlmIChleHByZXNzaW9uLnR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVxdWlyZWQpIHtcbiAgICAgICAgICBjb25zdCBiID0geyB0eXBlOiBcInJlcXVpcmVkRXhwcmVzc2lvblwiLCBjb25zdHJhaW50czogW2V4cHJlc3Npb24uaWRdLCBtZXNzYWdlOiBleHByZXNzaW9uLm1lc3NhZ2UgfVxuICAgICAgICAgIGFwcENvbnRleHQudmFsaWRhdGlvbk1hbmFnZXJbZXhwci5wYXRoXSA9IHsgLi4uKGFwcENvbnRleHQudmFsaWRhdGlvbk1hbmFnZXJbZXhwci5wYXRoXSB8fCB7fSksIFtleHByZXNzaW9uLmlkXTogYiB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGV4cHJlc3Npb24udHlwZSA9PT0gRXhwcmVzc2lvbi5FeHByZXNzaW9uVHlwZS5WYWxpZGF0ZSkge1xuICAgICAgICAgIGNvbnN0IGIgPSB7IHR5cGU6IFwiZXhwcmVzc2lvblwiLCBjb25zdHJhaW50czogW2V4cHJlc3Npb24uaWRdLCBtZXNzYWdlOiBleHByZXNzaW9uLm1lc3NhZ2UgfVxuICAgICAgICAgIGFwcENvbnRleHQudmFsaWRhdGlvbk1hbmFnZXJbZXhwci5wYXRoXSA9IHsgLi4uKGFwcENvbnRleHQudmFsaWRhdGlvbk1hbmFnZXJbZXhwci5wYXRoXSB8fCB7fSksIFtleHByZXNzaW9uLmlkXTogYiB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChleHByZXNzaW9uLnR5cGUgPT09IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUuUmVxdWlyZWQgfHwgZXhwcmVzc2lvbi50eXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZhbGlkYXRlKSkge1xuICAgICAgICAgIGlmICghZXhwcmVzc2lvbi5tZXNzYWdlKSB7XG4gICAgICAgICAgICBleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2UgPSB0aGlzLmdldEV4cHJlc3Npb25NZXNzYWdlKGV4cHJlc3Npb24udHlwZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZXhwcmVzc2lvbi5tZXNzYWdlVHlwZSkge1xuICAgICAgICAgICAgZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlVHlwZSA9ICdlcnJvcic7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChleHByZXNzaW9uT2JqZWN0Lm1lc3NhZ2UpIHtcbiAgICAgICAgICB0aGlzLnRyYW5zZm9ybShleHByZXNzaW9uT2JqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICBleHByZXNzaW9ucy5wdXNoKGV4cHJlc3Npb25PYmplY3QpO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICB0aGlzLl9leHByZXNzaW9ucyA9IGV4cHJlc3Npb25zO1xuICAgIHJldHVybiBleHByZXNzaW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmiYDmnInooajovr7lvI9cbiAgICovXG4gIHB1YmxpYyBnZXQgZXhwcmVzc2lvbnMoKTogT2JzZXJ2YWJsZTxFeHByZXNzaW9uLkV4cHJlc3Npb25PYmplY3RbXT4ge1xuICAgIGlmICh0aGlzLl9leHByZXNzaW9ucykge1xuICAgICAgcmV0dXJuIG9mKHRoaXMuX2V4cHJlc3Npb25zKTtcbiAgICB9XG5cbiAgICAvLyDnn63ot6/vvIzlrp7njrDlip/og71cbiAgICBpZiAod2luZG93WydfX2V4cHJlc3Npb25zX18nXSkge1xuICAgICAgdGhpcy5zZXRFeHByZXNzaW9ucyh3aW5kb3dbJ19fZXhwcmVzc2lvbnNfXyddKTtcbiAgICAgIHJldHVybiBvZih0aGlzLl9leHByZXNzaW9ucyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9hZCgpO1xuICB9XG4gIC8qKlxuICAgKiDmoLnmja7ooajovr7lvI9pZOiOt+WPluWvueW6lOeahOihqOi+vuW8j+WvueixoVxuICAgKiBAcGFyYW0gaWQg6KGo6L6+5byPaWRcbiAgICogQHJldHVybnMgXG4gICAqL1xuICBwdWJsaWMgZ2V0RXhwcmVzc2lvbkJ5SWQoaWQ6IHN0cmluZyk6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCB7XG4gICAgaWYgKCF0aGlzLl9leHByZXNzaW9ucyB8fCB0aGlzLl9leHByZXNzaW9ucy5sZW5ndGggPCAxKSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2V4cHJlc3Npb25zLmZpbmQoKGV4cHJlc3Npb25PYmplY3Q6IEV4cHJlc3Npb24uRXhwcmVzc2lvbk9iamVjdCkgPT4gZXhwcmVzc2lvbk9iamVjdC5pZCA9PT0gaWQpO1xuICB9XG4gIHByaXZhdGUgZ2V0RXhwcmVzc2lvbk1lc3NhZ2UoZXhwcmVzc2lvblR5cGU6IEV4cHJlc3Npb24uRXhwcmVzc2lvblR5cGUsIGRlZmF1bHRWYWx1ZT86IHN0cmluZykge1xuICAgIGlmICghKGV4cHJlc3Npb25UeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlZhbGlkYXRlIHx8IGV4cHJlc3Npb25UeXBlID09PSBFeHByZXNzaW9uLkV4cHJlc3Npb25UeXBlLlJlcXVpcmVkKSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmICghdGhpcy50cmFuc2xhdGUpIHtcbiAgICAgIHJldHVybiBkZWZhdWx0VmFsdWU7XG4gICAgfVxuICAgIGNvbnN0IGN1cnJlbnRMYW5ndWFnZSA9IHRoaXMudHJhbnNsYXRlLmdldEN1cnJlbnRMYW5ndWFnZSgpIHx8ICd6aC1DSFMnO1xuICAgIHJldHVybiBFeHByZXNzaW9uLk1FU1NBR0VbY3VycmVudExhbmd1YWdlXVtleHByZXNzaW9uVHlwZV07XG4gIH1cbiAgcHJpdmF0ZSB0cmFuc2Zvcm0oZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSB7XG4gICAgaWYgKCF0aGlzLnRyYW5zbGF0ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlICYmIGV4cHJlc3Npb25PYmplY3QubWVzc2FnZS5zdGFydHNXaXRoKCd7eycpICYmIGV4cHJlc3Npb25PYmplY3QubWVzc2FnZS5lbmRzV2l0aCgnfX0nKSkge1xuICAgICAgZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlID0gdGhpcy50cmFuc2xhdGUudHJhbnNmb3JtKGV4cHJlc3Npb25PYmplY3QubWVzc2FnZS5zdWJzdHIoMiwgZXhwcmVzc2lvbk9iamVjdC5tZXNzYWdlLmxlbmd0aCAtIDQpLCBudWxsKSB8fCB0aGlzLmdldEV4cHJlc3Npb25NZXNzYWdlKGV4cHJlc3Npb25PYmplY3QudHlwZSk7XG4gICAgfVxuICB9XG4gIHByaXZhdGUgY2xlYW5TcGVjaWFsQ2hhcmFjdGVycygpIHtcbiAgICBpZiAoIXRoaXMuX2V4cHJlc3Npb25zIHx8IHRoaXMuX2V4cHJlc3Npb25zLmxlbmd0aCA8IDEgfHwgIUFycmF5LmlzQXJyYXkodGhpcy5fZXhwcmVzc2lvbnMpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHJlcG9zaXRvcnk6IFJlcG9zaXRvcnk8YW55PiA9IHRoaXMudmlld01vZGVsQ29udGV4dC5yZXBvc2l0b3J5O1xuICAgIGlmICghcmVwb3NpdG9yeSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBlbnRpdHlUeXBlSW5mbyA9IHJlcG9zaXRvcnkuZW50aXR5VHlwZUluZm87XG4gICAgY29uc3QgcmVnZXggPSBuZXcgUmVnRXhwKGBbXFxcXCdcXFxcXCJdP1xcXFxzKigke2VudGl0eVR5cGVJbmZvLmVudGl0eUluZm8ubm9kZUNvZGV9fCR7ZW50aXR5VHlwZUluZm8uZW50aXR5SW5mby5vcmlnaW5hbENvZGV9KVtcXFxcLlxcXFxbXFxcXF1hLXpBLVowLTlfXStcXFxccypbXFxcXCdcXFxcXCJdP2AsICdnJyk7XG4gICAgdGhpcy5fZXhwcmVzc2lvbnMuZm9yRWFjaCgoZXhwcmVzc2lvbk9iamVjdDogRXhwcmVzc2lvbi5FeHByZXNzaW9uT2JqZWN0KSA9PiB7XG4gICAgICBjb25zdCBleHByID0gZXhwcmVzc2lvbk9iamVjdC5leHByZXNzaW9uO1xuICAgICAgY29uc3QgZW50aXR5UHJvcGVydHlFeHByZXNzaW9uczogUmVnRXhwTWF0Y2hBcnJheSA9IGV4cHIubWF0Y2gocmVnZXgpO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucykgJiYgZW50aXR5UHJvcGVydHlFeHByZXNzaW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIOino+aekOWHuuaJgOacieWunuS9k+ebuOWFs+eahOWtl+espuS4su+8jOS7peS4u+WunuS9k+WQjeWtl+W8gOWktO+8jOWMheWQq+S4u+WunuS9k+WxnuaAp+aIluWtkOihqFxuICAgICAgICBlbnRpdHlQcm9wZXJ0eUV4cHJlc3Npb25zLmZvckVhY2goKGl0ZW06IHN0cmluZykgPT4ge1xuICAgICAgICAgIGlmIChpdGVtLmluZGV4T2YoJy4nKSA9PT0gLTEpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2Fybihg5peg5pWI55qE5a6e5L2T6KGo6L6+5byPOiR7aXRlbX1gKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8g5Y675pWw57uEXG4gICAgICAgICAgaWYgKC9cXFtcXGRcXF0vZy50ZXN0KGl0ZW0pKSB7XG4gICAgICAgICAgICBjb25zdCByZXBsYWNlciA9IGl0ZW0ucmVwbGFjZSgvXFxbXFxkXFxdL2csICcnKTtcbiAgICAgICAgICAgIGV4cHJlc3Npb25PYmplY3QuZXhwcmVzc2lvbiA9IHRoaXMucmVwbGFjZUFsbChleHByZXNzaW9uT2JqZWN0LmV4cHJlc3Npb24sIGl0ZW0sIHJlcGxhY2VyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy8g5Y675pif5Y+3XG4gICAgICAgICAgaWYoL1xcKi9nLnRlc3QoaXRlbSkpe1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZXIgPSBpdGVtLnJlcGxhY2UoL1xcKi9nLCAnJyk7XG4gICAgICAgICAgICBleHByZXNzaW9uT2JqZWN0LmV4cHJlc3Npb24gPSB0aGlzLnJlcGxhY2VBbGwoZXhwcmVzc2lvbk9iamVjdC5leHByZXNzaW9uLCBpdGVtLCByZXBsYWNlcik7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBwcml2YXRlIHJlcGxhY2VBbGwob3JpZ2luYWxWYWx1ZTogc3RyaW5nLCBzZWFyY2g6IHN0cmluZywgcmVwbGFjZXI6IHN0cmluZykge1xuICAgIHJldHVybiBvcmlnaW5hbFZhbHVlLnNwbGl0KHNlYXJjaCkuam9pbihyZXBsYWNlcik7XG4gIH1cbn0iXX0=