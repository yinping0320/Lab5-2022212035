import { Subject } from "rxjs";
import { DataPropGroup } from "../../entity/index";
/**
 * 变更监听器
 */
var ChangeListener = /** @class */ (function () {
    function ChangeListener() {
        this.subject = new Subject();
    }
    Object.defineProperty(ChangeListener.prototype, "onEvent", {
        get: function () {
            return this.subject;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * 找到元数据中所有实体路径
     * @param dataTypeInfo
     * @param results
     * @param paths
     */
    ChangeListener.prototype.findEntityPaths = function (dataTypeInfo, results, paths) {
        var _this = this;
        if (paths === void 0) { paths = []; }
        var list = dataTypeInfo.getPropInfosByGroup(DataPropGroup.List);
        if (list && list.length > 0) {
            list.forEach(function (dataPropInfo) {
                paths.push(dataPropInfo.name);
                var childrens = dataPropInfo.typeInfo.getPropInfosByGroup(DataPropGroup.List);
                if (childrens && childrens.length > 0) {
                    childrens.forEach(function (dataPropInfo) {
                        _this.findEntityPaths(dataPropInfo.typeInfo, results, paths);
                    });
                }
                else {
                    results.push(paths);
                }
            });
        }
        else if (paths && paths.length > 0) {
            results.push(paths);
        }
    };
    return ChangeListener;
}());
export { ChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vbGlzdGVuZXIvY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHM0MsT0FBTyxFQUFFLGFBQWEsRUFBOEIsTUFBTSxvQkFBb0IsQ0FBQztBQU8vRTs7R0FFRztBQUNIO0lBQUE7UUFDWSxZQUFPLEdBQXVCLElBQUksT0FBTyxFQUFhLENBQUM7SUE2Qm5FLENBQUM7SUE1QkMsc0JBQVcsbUNBQU87YUFBbEI7WUFDRSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDdEIsQ0FBQzs7O09BQUE7SUFFRDs7Ozs7T0FLRztJQUNJLHdDQUFlLEdBQXRCLFVBQXVCLFlBQTBCLEVBQUUsT0FBYyxFQUFFLEtBQW9CO1FBQXZGLGlCQWlCQztRQWpCa0Usc0JBQUEsRUFBQSxVQUFvQjtRQUNyRixJQUFNLElBQUksR0FBbUIsWUFBWSxDQUFDLG1CQUFtQixDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsRixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUMzQixJQUFJLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBMEI7Z0JBQ3RDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUM5QixJQUFNLFNBQVMsR0FBbUIsWUFBWSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2hHLElBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO29CQUNyQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQUMsWUFBMEI7d0JBQzNDLEtBQUksQ0FBQyxlQUFlLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7b0JBQzlELENBQUMsQ0FBQyxDQUFDO2lCQUNKO3FCQUFNO29CQUNMLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7aUJBQ3JCO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FDSjthQUFNLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO1lBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7U0FDckI7SUFDSCxDQUFDO0lBQ0gscUJBQUM7QUFBRCxDQUFDLEFBOUJELElBOEJDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBDaGFuZ2UgfSBmcm9tIFwiLi4vLi4vYmluZGluZy1kYXRhL2luZGV4XCI7XG5pbXBvcnQgeyBNb2RpZmljYXRpb24gfSBmcm9tIFwiLi4vLi4vY2hhbmdlc2V0L2luZGV4XCI7XG5pbXBvcnQgeyBEYXRhUHJvcEdyb3VwLCBEYXRhUHJvcEluZm8sIERhdGFUeXBlSW5mbyB9IGZyb20gXCIuLi8uLi9lbnRpdHkvaW5kZXhcIjtcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcbmltcG9ydCB7IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0gfSBmcm9tIFwiLi4vLi4vdWktc3RhdGUvaW5kZXhcIjtcblxudHlwZSBFdmVudEFyZ3MgPSBFeHByZXNzaW9uLkV2ZW50QXJncztcbnR5cGUgTGlzdGVuZXIgPSBFeHByZXNzaW9uLkxpc3RlbmVyO1xuXG4vKipcbiAqIOWPmOabtOebkeWQrOWZqFxuICovXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQ2hhbmdlTGlzdGVuZXIgaW1wbGVtZW50cyBMaXN0ZW5lciB7XG4gIHByb3RlY3RlZCBzdWJqZWN0OiBTdWJqZWN0PEV2ZW50QXJncz4gPSBuZXcgU3ViamVjdDxFdmVudEFyZ3M+KCk7XG4gIHB1YmxpYyBnZXQgb25FdmVudCgpOiBPYnNlcnZhYmxlPEV2ZW50QXJncz4ge1xuICAgIHJldHVybiB0aGlzLnN1YmplY3Q7XG4gIH1cbiAgYWJzdHJhY3QgYnVpbGRFdmVudFBhdGgoY2hhbmdlOiBDaGFuZ2UgfCBNb2RpZmljYXRpb24gfFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0pOiBzdHJpbmdbXTtcbiAgLyoqXG4gICAqIOaJvuWIsOWFg+aVsOaNruS4reaJgOacieWunuS9k+i3r+W+hFxuICAgKiBAcGFyYW0gZGF0YVR5cGVJbmZvIFxuICAgKiBAcGFyYW0gcmVzdWx0cyBcbiAgICogQHBhcmFtIHBhdGhzIFxuICAgKi9cbiAgcHVibGljIGZpbmRFbnRpdHlQYXRocyhkYXRhVHlwZUluZm86IERhdGFUeXBlSW5mbywgcmVzdWx0czogYW55W10sIHBhdGhzOiBzdHJpbmdbXSA9IFtdKSB7XG4gICAgY29uc3QgbGlzdDogRGF0YVByb3BJbmZvW10gPSBkYXRhVHlwZUluZm8uZ2V0UHJvcEluZm9zQnlHcm91cChEYXRhUHJvcEdyb3VwLkxpc3QpO1xuICAgIGlmIChsaXN0ICYmIGxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgbGlzdC5mb3JFYWNoKChkYXRhUHJvcEluZm86IERhdGFQcm9wSW5mbykgPT4ge1xuICAgICAgICBwYXRocy5wdXNoKGRhdGFQcm9wSW5mby5uYW1lKTtcbiAgICAgICAgY29uc3QgY2hpbGRyZW5zOiBEYXRhUHJvcEluZm9bXSA9IGRhdGFQcm9wSW5mby50eXBlSW5mby5nZXRQcm9wSW5mb3NCeUdyb3VwKERhdGFQcm9wR3JvdXAuTGlzdCk7XG4gICAgICAgIGlmIChjaGlsZHJlbnMgJiYgY2hpbGRyZW5zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjaGlsZHJlbnMuZm9yRWFjaCgoZGF0YVByb3BJbmZvOiBEYXRhUHJvcEluZm8pID0+IHtcbiAgICAgICAgICAgIHRoaXMuZmluZEVudGl0eVBhdGhzKGRhdGFQcm9wSW5mby50eXBlSW5mbywgcmVzdWx0cywgcGF0aHMpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChwYXRocyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gZWxzZSBpZiAocGF0aHMgJiYgcGF0aHMubGVuZ3RoID4gMCkge1xuICAgICAgcmVzdWx0cy5wdXNoKHBhdGhzKTtcbiAgICB9XG4gIH1cbn0iXX0=