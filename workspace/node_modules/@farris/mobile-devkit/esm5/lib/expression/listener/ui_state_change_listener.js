import * as tslib_1 from "tslib";
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../core/index';
/**
 * 监听UIState变更
 */
var UIStateChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(UIStateChangeListener, _super);
    /**
     * 构造函数
     */
    function UIStateChangeListener(viewModelContext) {
        var _this = _super.call(this) || this;
        _this.viewModelContext = viewModelContext;
        _this.frameId = _this.viewModelContext.id;
        _this.uiState = _this.viewModelContext.uiState;
        _this.namespace = _this.viewModelContext.injector.get(NAMESPACE, null);
        _this.registerEvent();
        return _this;
    }
    UIStateChangeListener.prototype.buildEventPath = function (change) {
        return null;
    };
    UIStateChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.uiState && this.uiState.changes) {
            this.uiState.changes.subscribe(function (change) {
                var modification = {
                    ns: _this.namespace,
                    path: [change.field],
                    type: Expression.EventType.ValueChanged,
                    value: change.value,
                    source: Expression.EventSource.State,
                    frameId: _this.frameId
                };
                // console.log("UIStateChangeListener", modification);
                _this.subject.next(modification);
            });
        }
    };
    return UIStateChangeListener;
}(ChangeListener));
export { UIStateChangeListener };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2V4cHJlc3Npb24vbGlzdGVuZXIvdWlfc3RhdGVfY2hhbmdlX2xpc3RlbmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFFQSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHFCQUFxQixDQUFDO0FBRWpELE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJMUM7O0dBRUc7QUFDSDtJQUFvQyxpREFBYztJQXNCaEQ7O09BRUc7SUFDSCwrQkFBWSxnQkFBa0M7UUFBOUMsWUFDRSxpQkFBTyxTQVFSO1FBTkMsS0FBSSxDQUFDLGdCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3pDLEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSSxDQUFDLGdCQUFnQixDQUFDLEVBQUUsQ0FBQztRQUN4QyxLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUM7UUFDN0MsS0FBSSxDQUFDLFNBQVMsR0FBRyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFckUsS0FBSSxDQUFDLGFBQWEsRUFBRSxDQUFDOztJQUN2QixDQUFDO0lBRU0sOENBQWMsR0FBckIsVUFBc0IsTUFBOEI7UUFDbEQsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO0lBRU8sNkNBQWEsR0FBckI7UUFBQSxpQkFlQztRQWRDLElBQUksSUFBSSxDQUFDLE9BQU8sSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUN4QyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBQyxNQUE4QjtnQkFDNUQsSUFBTSxZQUFZLEdBQWM7b0JBQzlCLEVBQUUsRUFBRSxLQUFJLENBQUMsU0FBUztvQkFDbEIsSUFBSSxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztvQkFDcEIsSUFBSSxFQUFFLFVBQVUsQ0FBQyxTQUFTLENBQUMsWUFBWTtvQkFDdkMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxLQUFLO29CQUNuQixNQUFNLEVBQUUsVUFBVSxDQUFDLFdBQVcsQ0FBQyxLQUFLO29CQUNwQyxPQUFPLEVBQUUsS0FBSSxDQUFDLE9BQU87aUJBQ3RCLENBQUM7Z0JBQ0Ysc0RBQXNEO2dCQUN0RCxLQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNsQyxDQUFDLENBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQztJQUVILDRCQUFDO0FBQUQsQ0FBQyxBQXpERCxDQUFvQyxjQUFjLEdBeURqRDtBQUNELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0b3IgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcbmltcG9ydCB7IFVJU3RhdGUsIFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0gfSBmcm9tICcuLi8uLi91aS1zdGF0ZS9pbmRleCc7XG5pbXBvcnQgeyBDaGFuZ2VMaXN0ZW5lciB9IGZyb20gJy4vY2hhbmdlX2xpc3RlbmVyJztcbmltcG9ydCB7IEV4cHJlc3Npb24gfSBmcm9tICcuLi9leHByZXNzaW9uL2luZGV4JztcbmltcG9ydCB7IFZpZXdNb2RlbENvbnRleHQgfSBmcm9tICcuLi8uLi92aWV3LW1vZGVsL3ZpZXdfbW9kZWxfY29udGV4dCc7XG5pbXBvcnQgeyBOQU1FU1BBQ0UgfSBmcm9tICcuLi9jb3JlL2luZGV4JztcbnR5cGUgRXZlbnRBcmdzID0gRXhwcmVzc2lvbi5FdmVudEFyZ3M7XG5cblxuLyoqXG4gKiDnm5HlkKxVSVN0YXRl5Y+Y5pu0XG4gKi9cbmNsYXNzIFVJU3RhdGVDaGFuZ2VMaXN0ZW5lciBleHRlbmRzIENoYW5nZUxpc3RlbmVyIHtcblxuICAvKipcbiAgICog5LiK5LiL5paHXG4gICAqL1xuICBwcml2YXRlIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQ7XG5cbiAgLyoqXG4gICAqIOinhuWbvuaooeWei2lkXG4gICAqL1xuICBwcml2YXRlIGZyYW1lSWQ6IHN0cmluZztcblxuICAvKipcbiAgICog5ZG95ZCN56m66Ze0XG4gICAqL1xuICBwcml2YXRlIG5hbWVzcGFjZTtcblxuICAvKipcbiAgICogVUlTdGF0ZVxuICAgKi9cbiAgcHJpdmF0ZSB1aVN0YXRlOiBVSVN0YXRlO1xuXG4gIC8qKlxuICAgKiDmnoTpgKDlh73mlbBcbiAgICovXG4gIGNvbnN0cnVjdG9yKHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy52aWV3TW9kZWxDb250ZXh0ID0gdmlld01vZGVsQ29udGV4dDtcbiAgICB0aGlzLmZyYW1lSWQgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuaWQ7XG4gICAgdGhpcy51aVN0YXRlID0gdGhpcy52aWV3TW9kZWxDb250ZXh0LnVpU3RhdGU7XG4gICAgdGhpcy5uYW1lc3BhY2UgPSB0aGlzLnZpZXdNb2RlbENvbnRleHQuaW5qZWN0b3IuZ2V0KE5BTUVTUEFDRSwgbnVsbCk7XG5cbiAgICB0aGlzLnJlZ2lzdGVyRXZlbnQoKTtcbiAgfVxuXG4gIHB1YmxpYyBidWlsZEV2ZW50UGF0aChjaGFuZ2U6IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0pOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBwcml2YXRlIHJlZ2lzdGVyRXZlbnQoKSB7XG4gICAgaWYgKHRoaXMudWlTdGF0ZSAmJiB0aGlzLnVpU3RhdGUuY2hhbmdlcykge1xuICAgICAgdGhpcy51aVN0YXRlLmNoYW5nZXMuc3Vic2NyaWJlKChjaGFuZ2U6IFVJU3RhdGVPYnNlcnZhYmxlUGFyYW0pID0+IHtcbiAgICAgICAgY29uc3QgbW9kaWZpY2F0aW9uOiBFdmVudEFyZ3MgPSB7XG4gICAgICAgICAgbnM6IHRoaXMubmFtZXNwYWNlLFxuICAgICAgICAgIHBhdGg6IFtjaGFuZ2UuZmllbGRdLFxuICAgICAgICAgIHR5cGU6IEV4cHJlc3Npb24uRXZlbnRUeXBlLlZhbHVlQ2hhbmdlZCxcbiAgICAgICAgICB2YWx1ZTogY2hhbmdlLnZhbHVlLFxuICAgICAgICAgIHNvdXJjZTogRXhwcmVzc2lvbi5FdmVudFNvdXJjZS5TdGF0ZSxcbiAgICAgICAgICBmcmFtZUlkOiB0aGlzLmZyYW1lSWRcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY29uc29sZS5sb2coXCJVSVN0YXRlQ2hhbmdlTGlzdGVuZXJcIiwgbW9kaWZpY2F0aW9uKTtcbiAgICAgICAgdGhpcy5zdWJqZWN0Lm5leHQobW9kaWZpY2F0aW9uKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG59XG5leHBvcnQgeyBVSVN0YXRlQ2hhbmdlTGlzdGVuZXIgfTtcbiJdfQ==