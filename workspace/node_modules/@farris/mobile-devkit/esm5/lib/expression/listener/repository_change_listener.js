import * as tslib_1 from "tslib";
import { ModifyType } from '../../changeset/index';
import { ChangeListener } from './change_listener';
import { Expression } from '../expression/index';
import { NAMESPACE } from '../core/index';
var EventType = Expression.EventType;
var RepositoryChangeListener = /** @class */ (function (_super) {
    tslib_1.__extends(RepositoryChangeListener, _super);
    function RepositoryChangeListener(viewModelContext) {
        var _this = _super.call(this) || this;
        _this.viewModelContext = viewModelContext;
        _this.namespace = _this.viewModelContext.injector.get(NAMESPACE, null);
        _this.repository = _this.viewModelContext.repository;
        _this.bindingData = _this.viewModelContext.bindingData;
        _this.registerEvent();
        return _this;
    }
    RepositoryChangeListener.prototype.registerEvent = function () {
        var _this = this;
        if (this.repository && this.repository.changes) {
            this.repository.changes.subscribe(function (change) {
                var eventType = _this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                var path = _this.buildEventPath(change);
                var modification = {
                    ns: _this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Field,
                };
                // console.log("RepositoryChangeListener", modification);
                _this.subject.next(modification);
            });
        }
        // repository只监听值变化事件
        if (this.repository && this.repository.entityCollectionChange) {
            this.repository.entityCollectionChange.subscribe(function (change) {
                var eventType = _this.convertEventType(change);
                if (!eventType) {
                    return;
                }
                var path = _this.buildEventPath(change);
                var modification = {
                    ns: _this.namespace,
                    type: eventType,
                    path: path,
                    value: change.value,
                    source: Expression.EventSource.Repository,
                };
                _this.subject.next(modification);
            });
        }
    };
    /**
     * 构建事件路径参数
     * @param event event
     * @description 构建完之后的路径类似[id,prop] or [id,从表名s,从表当前行id,从表属性] or [id,udt,udt_prop]
     * @returns
     */
    RepositoryChangeListener.prototype.buildEventPath = function (event) {
        var _this = this;
        var paths = event.path;
        var result = [];
        if (!paths || paths.length < 1) {
            // 主表新增时path为空
            return result;
        }
        // 过滤掉udt的冒号，关联字段的id
        result = paths.filter(function (path, index) {
            if (index % 2 === 0 && path.includes(':')) {
                if (path === ':') {
                    return false;
                }
                var primaryKey = path.split(':')[0];
                if (primaryKey !== _this.repository.primaryKey) {
                    return false;
                }
            }
            return true;
        });
        // 移除路径中的id字符串
        // result = paths.map((path: string, index: number) => {
        //   if (path.includes(':') && index % 2 === 0) {
        //     return path.split(':')[1];
        //   }
        //   return path;
        // });
        // 此时result中不应该有冒号
        return result;
    };
    RepositoryChangeListener.prototype.convertEventType = function (change) {
        var eventType = null;
        if (change.type === ModifyType.Add || change.type === ModifyType.AddData || change.type === ModifyType.Insert) {
            // eventType = Expression.EventType.Append;
            // 不处理新增
        }
        else if (change.type === ModifyType.Remove || change.type === ModifyType.RemoveData) {
            // eventType = Expression.EventType.Remove;
        }
        else if (change.type === ModifyType.Load) {
            // eventType = Expression.EventType.Load;
        }
        else if (change.type === ModifyType.ValueChange) {
            //eventType = Expression.EventType.ValueChanged;
            // 不处理值变化
        }
        else if (change.type === ModifyType.Update) {
            eventType = Expression.EventType.Update;
        }
        return eventType;
    };
    return RepositoryChangeListener;
}(ChangeListener));
export { RepositoryChangeListener };
//# sourceMappingURL=data:application/json;base64,