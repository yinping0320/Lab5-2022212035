import * as tslib_1 from "tslib";
import { ViewModelContext } from '../view-model/index';
import { EntityDependencyResolver, StateDependencyResolver, ResolverRegistry, CommentDependencyResolver, RESOLVER_TOKEN, ResolveService } from './resolver/index';
import { RepositoryChangeListener, UIStateChangeListener, ListenerRegistry, Listeners, LISTENER_TOKEN, BindingDataChangeListener } from './listener/index';
import { RepositoryAddEntityEventHandler, RepositoryRemoveEntityEventHandler, EntityValueChangedEventHandler, StateValueChangedEventHandler, RepositoryLoadEventHandler, EntityUpdateEventHandler, BindingDataAppendObjectEventHandler, BindingDataValueChangeEventHandler, BindingDataSelectionChangedEventHandler, BindingDataRemoveObjectEventHandler, BindingDataLoadEventHandler, EventHandlerRegistry } from './event-handler/index';
import { RepositoryEffector, UIStateEffector, VisibleEffector, DependencyEffector, ValidateEffector, RequiredEffector, ReadonlyEffector, EffectorFactory, EffectorRegistry, EFFECTOR_TOKEN } from './effector/index';
import { ExpressionEngineImpl, ExpressionEventEmitter, ExpressionRegistry, ExpressionExecutor, ExpressionManager, ExpressionResult, EVENT_HANDLER_TOKEN, ExpressionResultFactory } from './expression/index';
/**
 * Resolver
 */
var VIEW_MODEL_EXPRESSION_RESOLVER_PROVIDERS = [
    { provide: RESOLVER_TOKEN, useClass: EntityDependencyResolver, multi: true, deps: [ViewModelContext] },
    { provide: RESOLVER_TOKEN, useClass: StateDependencyResolver, multi: true, deps: [ViewModelContext] },
    { provide: RESOLVER_TOKEN, useClass: CommentDependencyResolver, multi: true, deps: [ViewModelContext] },
];
/**
 * ChangeListener
 */
var VIEW_MODEL_EXPRESSION_LISTENER_PROVIDERS = [
    { provide: LISTENER_TOKEN, useClass: UIStateChangeListener, multi: true, deps: [ViewModelContext] },
    { provide: LISTENER_TOKEN, useClass: RepositoryChangeListener, multi: true, deps: [ViewModelContext] },
    { provide: LISTENER_TOKEN, useClass: BindingDataChangeListener, multi: true, deps: [ViewModelContext] }
];
/**
 * EventHandler
 */
var VIEW_MODEL_EXPRESSION_EVENT_HANDLER_PROVIDERS = [
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryAddEntityEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryRemoveEntityEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: EntityValueChangedEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: StateValueChangedEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: RepositoryLoadEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: EntityUpdateEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataAppendObjectEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataValueChangeEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataRemoveObjectEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataLoadEventHandler, multi: true, deps: [ViewModelContext] },
    { provide: EVENT_HANDLER_TOKEN, useClass: BindingDataSelectionChangedEventHandler, multi: true, deps: [ViewModelContext] },
];
/**
 * Effector
 */
var VIEW_MODEL_EXPRESSION_EFFECTOR_PROVIDERS = [
    { provide: EFFECTOR_TOKEN, useClass: RepositoryEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: UIStateEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: ReadonlyEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: ValidateEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: RequiredEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: VisibleEffector, multi: true, deps: [ViewModelContext] },
    { provide: EFFECTOR_TOKEN, useClass: DependencyEffector, multi: true, deps: [ViewModelContext] }
];
var VIEW_MODEL_EXPRESSION_PROVIDERS = tslib_1.__spread([
    { provide: ResolverRegistry, useClass: ResolverRegistry, deps: [ViewModelContext] },
    { provide: ResolveService, useClass: ResolveService, deps: [ViewModelContext] },
    { provide: ListenerRegistry, useClass: ListenerRegistry, deps: [ViewModelContext] },
    { provide: Listeners, useClass: Listeners, deps: [ViewModelContext] },
    { provide: EventHandlerRegistry, useClass: EventHandlerRegistry, deps: [ViewModelContext] },
    { provide: EffectorRegistry, useClass: EffectorRegistry, deps: [ViewModelContext] },
    { provide: EffectorFactory, useClass: EffectorFactory, deps: [ViewModelContext] },
    { provide: ExpressionRegistry, useClass: ExpressionRegistry, deps: [ViewModelContext] },
    { provide: ExpressionEventEmitter, useClass: ExpressionEventEmitter, deps: [ViewModelContext] },
    { provide: ExpressionExecutor, useClass: ExpressionExecutor, deps: [ViewModelContext] },
    { provide: ExpressionManager, useClass: ExpressionManager, deps: [ViewModelContext] },
    { provide: ExpressionResult, useClass: ExpressionResult, deps: [ViewModelContext] },
    { provide: ExpressionResultFactory, useClass: ExpressionResultFactory, deps: [ViewModelContext] },
    { provide: ExpressionEngineImpl, useClass: ExpressionEngineImpl, deps: [ViewModelContext] }
], VIEW_MODEL_EXPRESSION_RESOLVER_PROVIDERS, VIEW_MODEL_EXPRESSION_LISTENER_PROVIDERS, VIEW_MODEL_EXPRESSION_EVENT_HANDLER_PROVIDERS, VIEW_MODEL_EXPRESSION_EFFECTOR_PROVIDERS);
export { VIEW_MODEL_EXPRESSION_PROVIDERS };
//# sourceMappingURL=data:application/json;base64,