import { MetadataUtil } from '../core/index';
import { FormControl } from './form_control';
import { FORM_CONTROL_PROP_META } from './decorators';
import { Subject } from 'rxjs';
import { ValidatorFactory } from '../validator';
import { tap } from 'rxjs/operators';
/**
 * Form抽象类
 */
var Form = /** @class */ (function () {
    /**
     * 构造函数
     */
    function Form(viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.formControlConfigs = [];
        this.validateformControls = [];
        this.validateformControlPathMap = new Map;
        this.changes = new Subject();
    }
    /**
     * 初始化
     */
    Form.prototype.init = function () {
        this.collectMetadatas();
        this.createFormControls();
    };
    /**
     * 使用不包含绝对路径的/或者/子表/的路径信息获取对应的formControlConfig的name属性与bindingPath并且返回该路径的formControl
     * @param path 路径信息
     * @returns
     */
    Form.prototype.getFormValueByBindPath = function (path) {
        var _this = this;
        var formControl = {
            form_name: {},
            name: '',
            bindingPath: ''
        };
        path = path.replace(/\//g, '.');
        if (this.formControlConfigs.length === 0)
            return formControl;
        this.formControlConfigs.forEach(function (formControlConfig) {
            if (formControlConfig.bindingPath === path) {
                formControl.form_name = _this[formControlConfig.name];
                formControl.name = formControlConfig.name;
                formControl.bindingPath = formControlConfig.bindingPath;
            }
        });
        return formControl;
    };
    /**
     *
     * @returns 获取当前表单上的存在校验字段的集合
     */
    Form.prototype.getValidateformControls = function () {
        return this.validateformControls;
    };
    Form.prototype.setValidateformControls = function (name) {
        if (this.validateformControls && this.validateformControls.length === 0) {
            this.validateformControls.push(name);
        }
        if (this.validateformControls && this.validateformControls.length >= 1) {
            var index = this.validateformControls.findIndex(function (item) { return item == name; });
            if (index === -1) {
                this.validateformControls.push(name);
            }
        }
        if (!Array.isArray(this.validateformControls)) {
            this.validateformControls = [name];
        }
    };
    Form.prototype.getValidateformControlPathMap = function () {
        return this.validateformControlPathMap;
    };
    Form.prototype.setValidateformControlPathMap = function (name, value) {
        if (!this.validateformControlPathMap.has(name)) {
            this.validateformControlPathMap.set(name, value);
        }
    };
    /**
     * 使用formControlConfig的bindingPath路径信息与对应formControlConfig的name信息储存起来作为验证信息在form上的记录
     * @param path formControlConfig的bindingPath路径信息
     * @param name 对应formContro的name信息
     */
    Form.prototype.addValidate = function (path, name) {
        var bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\//g, '.');
        if (bindingPath) {
            bindingPath = bindingPath + '.';
        }
        ;
        this.setValidateformControlPathMap(bindingPath + path, name);
        this.setValidateformControls(name);
    };
    /**
     * 全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    Form.prototype.validateFields = function () {
        var _this = this;
        var validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach(function (formControl) {
            var result$ = ValidatorFactory.executeValidator(_this[formControl]['validatorFn'], _this[formControl]['value'], _this.viewModelContext).pipe(tap(function (message) {
                _this[formControl]['validationResult'] = message;
                !message['passing'] && _this.changes.next({ type: 'validateFieldsFinished' });
            }));
            validationResult.push(result$);
        });
        return validationResult;
    };
    /**
     * 不支持自定义异步全部校验
     *  formControlConfigs 上所有的formControl的存在方法调用一遍 将错误信息集中返回
     */
    Form.prototype.noSupportAsynValidateFields = function () {
        var _this = this;
        var validationResult = [];
        if (this.validateformControls.length === 0) {
            return validationResult;
        }
        this.validateformControls.forEach(function (formControl) {
            if (!_this[formControl]['validationResult']) {
                _this[formControl]['validationResult'] = ValidatorFactory.noSupportAsynExecuteValidator(_this[formControl]['validatorFn'], _this[formControl]['value'], _this.viewModelContext);
            }
            !_this[formControl]['validationResult'].passing && validationResult.push(_this[formControl]);
        });
        this.changes.next({ type: 'validateFieldsFinished' });
        return validationResult;
    };
    /**
     * 获取某一个得校验错误信息
     * @param name 属性名称
     */
    Form.prototype.getFieldError = function (name) {
        var _this = this;
        if (this.validateformControls.length === 0) {
            return {};
        }
        var index = this.validateformControls.findIndex(function (item) {
            return item === name;
        });
        if (index === -1) {
            return {};
        }
        else {
            var result$ = ValidatorFactory.executeValidator(this[name]['validatorFn'], this[name]['value'], this.viewModelContext).pipe(tap(function (message) {
                _this[name]['validationResult'] = message;
                !message['passing'] && _this.changes.next({ type: 'validateFieldsFinished' });
            }));
            return result$;
        }
    };
    /**
   * 根据form元数据中的path获取某一个得校验错误信息
   * @param path 属性名称数组
   */
    Form.prototype.getFieldErrorByPath = function (path) {
        var _this = this;
        if (this.validateformControls.length === 0) {
            return {};
        }
        var pathName = path[0];
        if (path && path.length >= 2) {
            pathName = path.join('.');
        }
        var index = this.validateformControlPathMap.has(pathName);
        if (!index) {
            return {};
        }
        else {
            ValidatorFactory.executeValidator(this[this.validateformControlPathMap.get(pathName)]['validatorFn'], this[this.validateformControlPathMap.get(pathName)]['value'], this.viewModelContext).subscribe(function (message) {
                _this[_this.validateformControlPathMap.get(pathName)]['validationResult'] = message;
                _this.changes.next({ type: 'validateFieldsFinished', value: _this.validateformControlPathMap.get(pathName) });
            });
            return this[this.validateformControlPathMap.get(pathName)]['validationResult'];
        }
    };
    /**
     * 清除一组字段验证状态
     * @param fields 字段的数组
     */
    Form.prototype.resetFieldsValidate = function (fields) {
        var _this = this;
        if (this.validateformControls.length === 0) {
            return true;
        }
        else {
            if (fields && fields.length > 0) {
                var sb_1 = new Set(fields);
                // 交集
                var intersect = this.validateformControls.filter(function (x) { return sb_1.has(x); });
                // 遍历清空所有校验结果数据
                intersect.forEach(function (item) {
                    _this[item]['validationResult'] = undefined;
                });
            }
            else {
                // 没传数据全部清除
                this.validateformControls.forEach(function (item) {
                    _this[item]['validationResult'] = undefined;
                });
            }
            this.changes.next({ type: 'validateFieldsFinished' });
        }
    };
    /**
     * 创建FormControls
     */
    Form.prototype.createFormControls = function () {
        var _this = this;
        this.formControlConfigs.forEach(function (formControlConfig) {
            var name = formControlConfig.name;
            var formControl = new FormControl(formControlConfig, _this.viewModelContext);
            _this[name] = formControl;
        });
    };
    /**
     * 收集元数据
     */
    Form.prototype.collectMetadatas = function () {
        var _this = this;
        var formControlMetadatas = MetadataUtil.getPropsMetadatasByName(this.constructor, FORM_CONTROL_PROP_META);
        var bindingPath = this.viewModelContext.bindingData.bindingPath.slice(1).replace(/\//g, '.');
        var validationManager = this.viewModelContext.appContext['validationManager'];
        if (bindingPath) {
            bindingPath = bindingPath + '.';
        }
        ;
        Object.keys(formControlMetadatas).forEach(function (name) {
            var formControlMetadata = formControlMetadatas[name];
            var validRules = null;
            if (formControlMetadata.validRules) {
                _this.validateformControls.push(name);
                _this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);
                validRules = formControlMetadata.validRules;
            }
            var key = ('/' + bindingPath + formControlMetadata.bindingPath).replace(/\./g, '/');
            if (validationManager[key]) {
                if (!validRules) {
                    _this.validateformControls.push(name);
                    _this.validateformControlPathMap.set(bindingPath + formControlMetadata.bindingPath, name);
                    validRules = Object.values(validationManager[key]);
                }
                else {
                    validRules = validRules.concat(Object.values(validationManager[key]));
                }
            }
            var formControlConfig = {
                name: name,
                bindingType: formControlMetadata.bindingType,
                bindingPath: formControlMetadata.bindingPath,
                valueConverter: formControlMetadata.valueConverter,
                valueChanging: formControlMetadata.valueChanging,
                valueChanged: formControlMetadata.valueChanged,
                validRules: validRules
            };
            _this.formControlConfigs.push(formControlConfig);
        });
    };
    Form.prototype.getEntityValueChangingListeners = function () {
        var listeners = {};
        this.formControlConfigs.forEach(function (formControl) {
            if (formControl.valueChanging) {
                listeners[formControl.bindingPath] = formControl.valueChanging;
            }
        });
        return listeners;
    };
    Form.prototype.getEntityValueChangedListeners = function () {
        var listeners = {};
        this.formControlConfigs.forEach(function (formControl) {
            if (formControl.valueChanged) {
                listeners[formControl.bindingPath] = formControl.valueChanged;
            }
        });
        return listeners;
    };
    return Form;
}());
export { Form };
//# sourceMappingURL=data:application/json;base64,