import { BindingValueAccessorFactory } from './binding_value_accessor';
import { ValidatorFactory } from '../validator/index';
/**
 * FormControl定义
 */
var FormControl = /** @class */ (function () {
    function FormControl(config, viewModelContext) {
        this.validatorFn = [];
        this.required = false;
        this.requiredExpressionFlag = false;
        this.validateExpressionFlag = false;
        this.readonly = false;
        this.visible = true;
        // 初始验证规则
        this.validRules = [];
        // 记忆验证表达式的规则
        this.validRules_validates = [];
        this.valueAccessor = BindingValueAccessorFactory.create(config.bindingType, config.bindingPath, config.valueConverter, viewModelContext);
        this.validRules = [];
        if (config.validRules) {
            this.validRules = config.validRules;
            this.setValidatorFn(config.validRules);
        }
    }
    Object.defineProperty(FormControl.prototype, "value", {
        get: function () {
            return this.valueAccessor.getValue();
        },
        set: function (val) {
            this.valueAccessor.setValue(val);
        },
        enumerable: true,
        configurable: true
    });
    FormControl.prototype.getValidRules = function () {
        return this.validRules;
    };
    FormControl.prototype.setValidatorFn = function (validRules) {
        this.validatorFn = ValidatorFactory.create(validRules);
    };
    FormControl.prototype.pushValidatorFnforValidate = function (validRules, flag) {
        if (flag && this.validateExpressionFlag) {
            return;
        }
        this.validateExpressionFlag = flag;
        this.validRules_validates = validRules;
        this.validatorFn = this.validatorFn.concat(ValidatorFactory.create(validRules));
    };
    FormControl.prototype.pushValidatorFnforRequired = function (validRules, flag) {
        if (flag && this.requiredExpressionFlag) {
            return;
        }
        this.requiredExpressionFlag = flag;
        this.validatorFn = this.validatorFn.concat(ValidatorFactory.create(validRules));
    };
    FormControl.prototype.resetValidatorFnforRequired = function () {
        this.requiredExpressionFlag = false;
        this.validatorFn = ValidatorFactory.create(this.validRules.concat(this.validRules_validates));
    };
    FormControl.prototype.getValidatorFn = function () {
        return this.validatorFn;
    };
    return FormControl;
}());
export { FormControl };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybV9jb250cm9sLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQGZhcnJpcy9tb2JpbGUtZGV2a2l0LyIsInNvdXJjZXMiOlsibGliL2Zvcm0vZm9ybV9jb250cm9sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBd0IsMkJBQTJCLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUM3RixPQUFPLEVBQWtCLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUE7QUFlckU7O0dBRUc7QUFDSDtJQXdCRSxxQkFBWSxNQUF5QixFQUFFLGdCQUFrQztRQW5CakUsZ0JBQVcsR0FBRyxFQUFFLENBQUM7UUFJekIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVULDJCQUFzQixHQUFHLEtBQUssQ0FBQztRQUMvQiwyQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFFdkMsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUVqQixZQUFPLEdBQUcsSUFBSSxDQUFDO1FBRWYsU0FBUztRQUNELGVBQVUsR0FBRyxFQUFFLENBQUM7UUFFeEIsYUFBYTtRQUNMLHlCQUFvQixHQUFHLEVBQUUsQ0FBQztRQUdoQyxJQUFJLENBQUMsYUFBYSxHQUFHLDJCQUEyQixDQUFDLE1BQU0sQ0FDckQsTUFBTSxDQUFDLFdBQVcsRUFDbEIsTUFBTSxDQUFDLFdBQVcsRUFDbEIsTUFBTSxDQUFDLGNBQWMsRUFDckIsZ0JBQWdCLENBQ2pCLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLEVBQUUsQ0FBQztRQUNyQixJQUFJLE1BQU0sQ0FBQyxVQUFVLEVBQUU7WUFDckIsSUFBSSxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDO1lBQ3BDLElBQUksQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFBO1NBQ3ZDO0lBQ0gsQ0FBQztJQUVELHNCQUFXLDhCQUFLO2FBQWhCO1lBQ0UsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxDQUFDO1FBQ3ZDLENBQUM7YUFFRCxVQUFpQixHQUFHO1lBQ2xCLElBQUksQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLENBQUM7OztPQUpBO0lBTU0sbUNBQWEsR0FBcEI7UUFDRSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUM7SUFDekIsQ0FBQztJQUVNLG9DQUFjLEdBQXJCLFVBQXNCLFVBQVU7UUFDOUIsSUFBSSxDQUFDLFdBQVcsR0FBRyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDeEQsQ0FBQztJQUVNLGdEQUEwQixHQUFqQyxVQUFrQyxVQUFVLEVBQUUsSUFBSTtRQUNoRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDdkMsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsVUFBVSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbEYsQ0FBQztJQUVNLGdEQUEwQixHQUFqQyxVQUFrQyxVQUFVLEVBQUUsSUFBSTtRQUNoRCxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDdkMsT0FBTTtTQUNQO1FBQ0QsSUFBSSxDQUFDLHNCQUFzQixHQUFHLElBQUksQ0FBQztRQUNuQyxJQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO0lBQ2xGLENBQUM7SUFFTSxpREFBMkIsR0FBbEM7UUFDRSxJQUFJLENBQUMsc0JBQXNCLEdBQUcsS0FBSyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxXQUFXLEdBQUcsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLENBQUE7SUFDL0YsQ0FBQztJQUVNLG9DQUFjLEdBQXJCO1FBQ0UsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO0lBQzFCLENBQUM7SUFFSCxrQkFBQztBQUFELENBQUMsQUFoRkQsSUFnRkM7QUFFRCxPQUFPLEVBQXFCLFdBQVcsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVmlld01vZGVsQ29udGV4dCB9IGZyb20gJy4uL3ZpZXctbW9kZWwvaW5kZXgnO1xuaW1wb3J0IHsgQmluZGluZ1R5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEJpbmRpbmdWYWx1ZUNvbnZlcnRlciB9IGZyb20gJy4vYmluZGluZ192YWx1ZV9jb252ZXJ0ZXInO1xuaW1wb3J0IHsgQmluZGluZ1ZhbHVlQWNjZXNzb3IsIEJpbmRpbmdWYWx1ZUFjY2Vzc29yRmFjdG9yeSB9IGZyb20gJy4vYmluZGluZ192YWx1ZV9hY2Nlc3Nvcic7XG5pbXBvcnQgeyBWYWxpZGF0aW9uUnVsZSwgVmFsaWRhdG9yRmFjdG9yeSB9IGZyb20gJy4uL3ZhbGlkYXRvci9pbmRleCdcblxuLyoqXG4gKiDooajljZXmjqfku7bphY3nva5cbiAqL1xuaW50ZXJmYWNlIEZvcm1Db250cm9sQ29uZmlnIHtcbiAgbmFtZTogc3RyaW5nO1xuICBiaW5kaW5nVHlwZTogQmluZGluZ1R5cGU7XG4gIGJpbmRpbmdQYXRoOiBzdHJpbmc7XG4gIHZhbHVlQ29udmVydGVyPzogQmluZGluZ1ZhbHVlQ29udmVydGVyO1xuICB2YWx1ZUNoYW5naW5nPzogc3RyaW5nO1xuICB2YWx1ZUNoYW5nZWQ/OiBzdHJpbmc7XG4gIHZhbGlkUnVsZXM/OiBWYWxpZGF0aW9uUnVsZVtdO1xufVxuXG4vKipcbiAqIEZvcm1Db250cm9s5a6a5LmJXG4gKi9cbmNsYXNzIEZvcm1Db250cm9sIHtcblxuXG4gIHByaXZhdGUgdmFsdWVBY2Nlc3NvcjogQmluZGluZ1ZhbHVlQWNjZXNzb3I7XG5cbiAgcHJpdmF0ZSB2YWxpZGF0b3JGbiA9IFtdO1xuXG4gIHZhbGlkYXRpb25SZXN1bHQ6IGFueTtcblxuICByZXF1aXJlZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgcmVxdWlyZWRFeHByZXNzaW9uRmxhZyA9IGZhbHNlO1xuICBwcml2YXRlIHZhbGlkYXRlRXhwcmVzc2lvbkZsYWcgPSBmYWxzZTtcblxuICByZWFkb25seSA9IGZhbHNlO1xuXG4gIHZpc2libGUgPSB0cnVlO1xuXG4gIC8vIOWIneWni+mqjOivgeinhOWImVxuICBwcml2YXRlIHZhbGlkUnVsZXMgPSBbXTtcblxuICAvLyDorrDlv4bpqozor4Hooajovr7lvI/nmoTop4TliJlcbiAgcHJpdmF0ZSB2YWxpZFJ1bGVzX3ZhbGlkYXRlcyA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGNvbmZpZzogRm9ybUNvbnRyb2xDb25maWcsIHZpZXdNb2RlbENvbnRleHQ6IFZpZXdNb2RlbENvbnRleHQpIHtcbiAgICB0aGlzLnZhbHVlQWNjZXNzb3IgPSBCaW5kaW5nVmFsdWVBY2Nlc3NvckZhY3RvcnkuY3JlYXRlKFxuICAgICAgY29uZmlnLmJpbmRpbmdUeXBlLFxuICAgICAgY29uZmlnLmJpbmRpbmdQYXRoLFxuICAgICAgY29uZmlnLnZhbHVlQ29udmVydGVyLFxuICAgICAgdmlld01vZGVsQ29udGV4dFxuICAgICk7XG4gICAgdGhpcy52YWxpZFJ1bGVzID0gW107XG4gICAgaWYgKGNvbmZpZy52YWxpZFJ1bGVzKSB7XG4gICAgICB0aGlzLnZhbGlkUnVsZXMgPSBjb25maWcudmFsaWRSdWxlcztcbiAgICAgIHRoaXMuc2V0VmFsaWRhdG9yRm4oY29uZmlnLnZhbGlkUnVsZXMpXG4gICAgfVxuICB9XG5cbiAgcHVibGljIGdldCB2YWx1ZSgpIHtcbiAgICByZXR1cm4gdGhpcy52YWx1ZUFjY2Vzc29yLmdldFZhbHVlKCk7XG4gIH1cblxuICBwdWJsaWMgc2V0IHZhbHVlKHZhbCkge1xuICAgIHRoaXMudmFsdWVBY2Nlc3Nvci5zZXRWYWx1ZSh2YWwpO1xuICB9XG5cbiAgcHVibGljIGdldFZhbGlkUnVsZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRSdWxlcztcbiAgfVxuXG4gIHB1YmxpYyBzZXRWYWxpZGF0b3JGbih2YWxpZFJ1bGVzKSB7XG4gICAgdGhpcy52YWxpZGF0b3JGbiA9IFZhbGlkYXRvckZhY3RvcnkuY3JlYXRlKHZhbGlkUnVsZXMpXG4gIH1cblxuICBwdWJsaWMgcHVzaFZhbGlkYXRvckZuZm9yVmFsaWRhdGUodmFsaWRSdWxlcywgZmxhZykge1xuICAgIGlmIChmbGFnICYmIHRoaXMudmFsaWRhdGVFeHByZXNzaW9uRmxhZykge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHRoaXMudmFsaWRhdGVFeHByZXNzaW9uRmxhZyA9IGZsYWc7XG4gICAgdGhpcy52YWxpZFJ1bGVzX3ZhbGlkYXRlcyA9IHZhbGlkUnVsZXM7XG4gICAgdGhpcy52YWxpZGF0b3JGbiA9IHRoaXMudmFsaWRhdG9yRm4uY29uY2F0KFZhbGlkYXRvckZhY3RvcnkuY3JlYXRlKHZhbGlkUnVsZXMpKTtcbiAgfVxuXG4gIHB1YmxpYyBwdXNoVmFsaWRhdG9yRm5mb3JSZXF1aXJlZCh2YWxpZFJ1bGVzLCBmbGFnKSB7XG4gICAgaWYgKGZsYWcgJiYgdGhpcy5yZXF1aXJlZEV4cHJlc3Npb25GbGFnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdGhpcy5yZXF1aXJlZEV4cHJlc3Npb25GbGFnID0gZmxhZztcbiAgICB0aGlzLnZhbGlkYXRvckZuID0gdGhpcy52YWxpZGF0b3JGbi5jb25jYXQoVmFsaWRhdG9yRmFjdG9yeS5jcmVhdGUodmFsaWRSdWxlcykpO1xuICB9XG5cbiAgcHVibGljIHJlc2V0VmFsaWRhdG9yRm5mb3JSZXF1aXJlZCgpIHtcbiAgICB0aGlzLnJlcXVpcmVkRXhwcmVzc2lvbkZsYWcgPSBmYWxzZTtcbiAgICB0aGlzLnZhbGlkYXRvckZuID0gVmFsaWRhdG9yRmFjdG9yeS5jcmVhdGUodGhpcy52YWxpZFJ1bGVzLmNvbmNhdCh0aGlzLnZhbGlkUnVsZXNfdmFsaWRhdGVzKSlcbiAgfVxuXG4gIHB1YmxpYyBnZXRWYWxpZGF0b3JGbigpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0b3JGbjtcbiAgfVxuXG59XG5cbmV4cG9ydCB7IEZvcm1Db250cm9sQ29uZmlnLCBGb3JtQ29udHJvbCB9O1xuIl19