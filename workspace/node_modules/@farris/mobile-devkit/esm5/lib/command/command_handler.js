import * as tslib_1 from "tslib";
import { Subject, BehaviorSubject } from 'rxjs';
import { concatMap, map, takeLast, take, throwIfEmpty } from 'rxjs/operators';
import { createInjectionToken } from '../core/index';
import { VariableParseService } from '../variable/index';
import { CommandContext } from './command_context';
import { TaskFlow } from './flow/index';
/**
 * 命令处理抽象类，所有具体的命令处理类必须继承它，并实现schedule方法。
 */
var CommandHandler = /** @class */ (function () {
    /**
     * 构造函数
     */
    function CommandHandler() {
    }
    /**
     * 初始化
     */
    CommandHandler.prototype.init = function (viewModelContext) {
        this.viewModelContext = viewModelContext;
        this.parseService = viewModelContext.injector.get(VariableParseService);
        this.taskFlow = new TaskFlow();
        this.schedule();
    };
    /**
     * 执行任务
     * @param command 要执行的命令
     * @return 最后一个任务的执行结果
     * @todo：按功能拆分小函数
     */
    CommandHandler.prototype.execute = function (command) {
        var _this = this;
        var lastTaskResult$ = new Subject();
        var taskFlow = this.taskFlow.clone();
        // setTimeout暂时不能去掉的原因：
        // 1、树表单加载数据，依赖TreeTableBinding里设置的全局变量，需要延后执行加载时机；
        // 2、关闭前命令需要延迟执行。
        setTimeout(function () {
            // 1、解析参数
            // 避免解析变量时修改了原始的command
            var _a = tslib_1.__assign({}, command).eventParam, eventParam = _a === void 0 ? null : _a;
            delete command.eventParam;
            var commandToExecute = JSON.parse(JSON.stringify(command));
            commandToExecute.params = _this.parseService.parse(commandToExecute.params, _this.viewModelContext);
            command.eventParam = eventParam;
            commandToExecute.eventParam = eventParam;
            // 2、串联任务流
            var initContext = new CommandContext(commandToExecute, _this.viewModelContext);
            initContext.eventParams = command.eventParam || null;
            var context$ = new BehaviorSubject(initContext);
            var currentTask = taskFlow.getNext('', initContext);
            var highOrder$ = context$.pipe(concatMap(function (context) {
                var result$ = currentTask.execute(context);
                return result$.pipe(take(1), map(function (result) {
                    // 写入执行结果
                    context.results[currentTask.name] = result;
                    context.latestResult = result;
                    currentTask = taskFlow.getNext(currentTask.name, context);
                    // 操作控制流
                    if (currentTask) {
                        context$.next(context);
                    }
                    else {
                        context$.complete();
                    }
                    // 将结果流转换为context流
                    return context;
                }), throwIfEmpty(function () {
                    context$.complete();
                }));
            }));
            // 3、执行合并后的任务流
            highOrder$.pipe(takeLast(1)).subscribe({
                next: function (context) {
                    lastTaskResult$.next(context.latestResult);
                },
                error: function (error) {
                    _this.displayError(error);
                    lastTaskResult$.error(error);
                },
                complete: function () {
                    lastTaskResult$.complete();
                },
            });
        }, 0);
        return lastTaskResult$;
    };
    /**
     * 显示错误信息
     */
    CommandHandler.prototype.displayError = function (error) {
        if (!console || !console.error) {
            return;
        }
        if (!error) {
            error = 'unknown error';
        }
        console.error(error);
    };
    /**
     * 添加任务，只有子类可以添加任务，外部不能访问
     * @param name  任务名称
     * @param func 任务函数
     */
    CommandHandler.prototype.addTask = function (name, func) {
        this.taskFlow.addNode(name, func);
    };
    /**
     * 添加任务，只有子类可以添加任务，外部不能访问
     * @param name  任务名称
     * @param func 任务函数
     */
    CommandHandler.prototype.addLink = function (from, to, condition) {
        this.taskFlow.addLink(from, to, condition);
    };
    /**
     * 插入任务
     * @param  name 要扩展的任务名称
     * @param  func 扩展函数
     */
    CommandHandler.prototype.insertTask = function (target, name, func) {
        throw new Error('Not Implemented');
    };
    /**
     * 插入任务
     * @param  name 要扩展的任务名称
     * @param  func 扩展函数
     */
    CommandHandler.prototype.afterTask = function (target, name, func) {
        throw new Error('Not Implemented');
    };
    /**
     * 替换任务
     * @param  name 要替换的任务名称
     * @param  func 替换函数
     */
    CommandHandler.prototype.replaceTask = function (name, func) {
        throw new Error('Not Implement');
    };
    /**
     * 调用方法
     */
    CommandHandler.prototype.invoke = function (serviceInstance, method, args, context) {
        this.setContextToServiceInstance(serviceInstance, context);
        var parsedArgs = this.parseService.parse(args, context);
        return serviceInstance[method].apply(serviceInstance, tslib_1.__spread(parsedArgs));
    };
    /**
     * 为服务设置命令上下文
     * @todo
     * 通过这种方式存在很大问题：
     * 1、会覆盖掉已有的context，给开发人员造成困扰和调试成本；
     * 2、服务中依赖了一个没有声明的对象，不符合面向对象的原则。
     * 建议解决方案：
     * 1、将context修改为某个特殊属性名；
     * 2、先检测服务上有没有一个CommandContext类型的context属性，有的话再赋值，
     *    这就要求需要使用context的服务需要是实现一个IContext接口。
     */
    CommandHandler.prototype.setContextToServiceInstance = function (serviceInstance, context) {
        // 如果服务上已经存在context属性，并且该属性不是CommandContext类型，则不能覆盖
        var serviceContext = serviceInstance.context;
        if (serviceContext && (serviceContext instanceof CommandContext === false)) {
            return;
        }
        serviceInstance.context = context;
    };
    return CommandHandler;
}());
/**
 * 命令处理器注入Token
 */
var COMMAND_HANDLERS_TOKEN = createInjectionToken('@Farris/devkit COMMAND_HANDLERS_TOKEN');
export { CommandHandler, COMMAND_HANDLERS_TOKEN };
//# sourceMappingURL=data:application/json;base64,