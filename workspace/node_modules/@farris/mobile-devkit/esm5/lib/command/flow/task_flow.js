/*
 * @Author: Witt
 * @Date: 2018-10-17 14:13:40
 * @Last Modified by: Witt
 * @Last Modified time: 2018-10-17 16:08:34
 */
import { TaskNode } from './task_node';
import { TaskLink } from './task_link';
/**
 * 任务执行流程
 */
var TaskFlow = /** @class */ (function () {
    function TaskFlow() {
        /**
         * 节点集合
         */
        this.nodes = [];
        /**
         * 边集合
         */
        this.links = [];
        // #endregion
    }
    // #region 节点操作
    /**
     * 添加节点
     */
    TaskFlow.prototype.addNode = function (name, func) {
        var node = new TaskNode(name, func);
        this.nodes.push(node);
    };
    /**
     * 批量添加链接
     */
    TaskFlow.prototype.addNodes = function (nodes) {
        this.nodes = this.nodes.concat(nodes);
    };
    /**
     * 在目标节点之前插入一个节点
     * @param target 目标节点名称
     * @param name 名称
     * @param func 函数
     */
    TaskFlow.prototype.insertNode = function (target, name, func) {
        var index = this.findNodeIndex(target);
        var node = this.createNode(name, func);
        this.nodes.splice(index, 0, node);
    };
    /**
     * 在目标节点之前插入一个节点
     */
    TaskFlow.prototype.appendNode = function (target, name, func) {
        var index = this.findNodeIndex(target) + 1;
        var node = this.createNode(name, func);
        this.nodes.splice(index, 0, node);
    };
    /**
     * 获取节点索引
     * @param name 名称
     */
    TaskFlow.prototype.findNodeIndex = function (name) {
        return this.nodes.findIndex(function (node) {
            return node.name === name;
        });
    };
    /**
     * 创建任务节点
     * @param name 名称
     * @param func 函数
     */
    TaskFlow.prototype.createNode = function (name, func) {
        var node = new TaskNode(name, func);
        return node;
    };
    // #endregion
    // #region 链接操作
    /**
     * 添加链接
     * @param name 名称
     * @param func 函数
     */
    TaskFlow.prototype.addLink = function (from, to, condition) {
        var link = this.createLink(from, to, condition);
        this.links.push(link);
    };
    /**
     * 批量添加链接
     */
    TaskFlow.prototype.addLinks = function (links) {
        this.links = this.links.concat(links);
    };
    /**
     * 创建链接
     */
    TaskFlow.prototype.createLink = function (from, to, condition) {
        var link = new TaskLink(from, to, condition);
        return link;
    };
    // #endregion
    // #region 流程控制
    /**
     * 获取下一个节点
     * @param from    源节点名称
     * @param context 上下文
     */
    TaskFlow.prototype.getNext = function (from, context) {
        if (!from) {
            return this.nodes.shift();
        }
        // 符合满足条件的边
        var nextLink = this.links.find(function (link) {
            return link.from === from && link.canLink(context);
        });
        if (!nextLink) {
            return;
        }
        return this.nodes.find(function (node) {
            return node.name === nextLink.to;
        });
    };
    // #endregion
    // #region 其他方法
    /**
     * 克隆任务流
     */
    TaskFlow.prototype.clone = function () {
        var taskFlow = new TaskFlow();
        taskFlow.addNodes(this.nodes);
        taskFlow.addLinks(this.links);
        return taskFlow;
    };
    return TaskFlow;
}());
export { TaskFlow };
//# sourceMappingURL=data:application/json;base64,