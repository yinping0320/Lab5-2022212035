import { MetadataUtil } from '../../core/index';
import { ENTITY_META } from './entity_decorator';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 实体元数据工具类
 */
var EntityMetadataUtil = /** @class */ (function () {
    function EntityMetadataUtil() {
    }
    /**
     * 获取所有属性
     * @todo：封装根据基类获取所有元数据的方法，解决重复代码
     */
    EntityMetadataUtil.getAllNgProperties = function (entityType) {
        var ngPlainProperties = this.getNgFieldProperties(entityType);
        var ngEntityProperties = this.getNgObjectProperties(entityType);
        var ngDynamicProperties = this.getNgDynamicProperties(entityType);
        var ngEntityListProperties = this.getNgObjectProperties(entityType);
        return Object.assign({}, ngPlainProperties, ngEntityProperties, ngDynamicProperties, ngEntityListProperties);
    };
    /**
     * 获取EnttiyClassMetadata
     */
    EntityMetadataUtil.getNgEntityMatadata = function (entityType) {
        return MetadataUtil.getClassMetadataByNameWithTranslate(entityType, ENTITY_META);
    };
    /**
     * 获取PrimitivePropMetadata的属性元数据
     */
    EntityMetadataUtil.getNgFieldProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, PRIMITIVE_PROP_META);
    };
    /**
     * 获取ObjectPropMetadata属性元数据
     */
    EntityMetadataUtil.getNgObjectProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, OBJECT_PROP_META);
    };
    /**
     * 获取DynamicPropMetadata属性元数据
     */
    EntityMetadataUtil.getNgDynamicProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, DYNAMIC_PROP_META);
    };
    /**
     * 获取ListPropMetadata属性元数据
     */
    EntityMetadataUtil.getNgListProperties = function (entityType) {
        return MetadataUtil.getPropsMetadatasByName(entityType, LIST_PROP_META);
    };
    /**
     * 获取主键属性元数据
     */
    EntityMetadataUtil.getPrimaryKeyProperty = function (entityType) {
        var primaryKeyProperty;
        var ngPlainProperties = EntityMetadataUtil.getNgFieldProperties(entityType);
        Object.keys(ngPlainProperties).forEach(function (propName) {
            var ngProperty = ngPlainProperties[propName];
            if (ngProperty.primary === true) {
                primaryKeyProperty = ngProperty;
            }
        });
        return primaryKeyProperty;
    };
    return EntityMetadataUtil;
}());
export { EntityMetadataUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW50aXR5X21ldGFkYXRhX3V0aWwuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvZW50aXR5L21ldGFkYXRhL2VudGl0eV9tZXRhZGF0YV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUdoRCxPQUFPLEVBQWtCLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ2pFLE9BQU8sRUFDUyxtQkFBbUIsRUFBeUIsZ0JBQWdCLEVBQzFFLGlCQUFpQixFQUF1QixjQUFjLEVBQ3ZELE1BQU0sbUJBQW1CLENBQUM7QUFFM0I7O0dBRUc7QUFDSDtJQUFBO0lBcUVBLENBQUM7SUFuRUM7OztPQUdHO0lBQ0kscUNBQWtCLEdBQXpCLFVBQTBCLFVBQXdCO1FBQ2hELElBQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2hFLElBQU0sa0JBQWtCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ2xFLElBQU0sbUJBQW1CLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBQ3BFLElBQU0sc0JBQXNCLEdBQUcsSUFBSSxDQUFDLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRFLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQ3JCLGlCQUFpQixFQUFJLGtCQUFrQixFQUN2QyxtQkFBbUIsRUFBRSxzQkFBc0IsQ0FDNUMsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLHNDQUFtQixHQUExQixVQUEyQixVQUFlO1FBQ3hDLE9BQU8sWUFBWSxDQUFDLG1DQUFtQyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztJQUNuRixDQUFDO0lBR0Q7O09BRUc7SUFDSSx1Q0FBb0IsR0FBM0IsVUFBNEIsVUFBZTtRQUN6QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMvRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSx3Q0FBcUIsR0FBNUIsVUFBNkIsVUFBZTtRQUMxQyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUM1RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSx5Q0FBc0IsR0FBN0IsVUFBOEIsVUFBZTtRQUMzQyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUM3RSxDQUFDO0lBRUQ7O09BRUc7SUFDSSxzQ0FBbUIsR0FBMUIsVUFBMkIsVUFBZTtRQUN4QyxPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxVQUFVLEVBQUUsY0FBYyxDQUFDLENBQUM7SUFDMUUsQ0FBQztJQUVEOztPQUVHO0lBQ0ksd0NBQXFCLEdBQTVCLFVBQTZCLFVBQXdCO1FBQ25ELElBQUksa0JBQWtCLENBQUM7UUFDdkIsSUFBTSxpQkFBaUIsR0FBRyxrQkFBa0IsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztRQUM5RSxNQUFNLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUMsT0FBTyxDQUFDLFVBQUMsUUFBZ0I7WUFDdEQsSUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUEwQixDQUFDO1lBQ3hFLElBQUksVUFBVSxDQUFDLE9BQU8sS0FBSyxJQUFJLEVBQUU7Z0JBQy9CLGtCQUFrQixHQUFHLFVBQVUsQ0FBQzthQUNqQztRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxrQkFBa0IsQ0FBQztJQUM1QixDQUFDO0lBQ0gseUJBQUM7QUFBRCxDQUFDLEFBckVELElBcUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uLy4uL2NvcmUvaW5kZXgnO1xuaW1wb3J0IHsgTWV0YWRhdGFVdGlsIH0gZnJvbSAnLi4vLi4vY29yZS9pbmRleCc7XG5pbXBvcnQgeyBFbnRpdHkgfSBmcm9tICcuLi9lbnRpdHknO1xuXG5pbXBvcnQgeyBFbnRpdHlNZXRhZGF0YSwgRU5USVRZX01FVEEgfSBmcm9tICcuL2VudGl0eV9kZWNvcmF0b3InO1xuaW1wb3J0IHtcbiAgUHJvcE1ldGFkYXRhLCBQUklNSVRJVkVfUFJPUF9NRVRBLCBQcmltaXRpdmVQcm9wTWV0YWRhdGEsIE9CSkVDVF9QUk9QX01FVEEsIE9iamVjdFByb3BNZXRhZGF0YSxcbiAgRFlOQU1JQ19QUk9QX01FVEEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIExJU1RfUFJPUF9NRVRBLCAgICBMaXN0UHJvcE1ldGFkYXRhXG59IGZyb20gJy4vZmllbGRfZGVjb3JhdG9yJztcblxuLyoqXG4gKiDlrp7kvZPlhYPmlbDmja7lt6XlhbfnsbtcbiAqL1xuZXhwb3J0IGNsYXNzIEVudGl0eU1ldGFkYXRhVXRpbCB7XG5cbiAgLyoqXG4gICAqIOiOt+WPluaJgOacieWxnuaAp1xuICAgKiBAdG9kb++8muWwgeijheagueaNruWfuuexu+iOt+WPluaJgOacieWFg+aVsOaNrueahOaWueazle+8jOino+WGs+mHjeWkjeS7o+eggVxuICAgKi9cbiAgc3RhdGljIGdldEFsbE5nUHJvcGVydGllcyhlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4pOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJvcE1ldGFkYXRhIH0ge1xuICAgIGNvbnN0IG5nUGxhaW5Qcm9wZXJ0aWVzID0gdGhpcy5nZXROZ0ZpZWxkUHJvcGVydGllcyhlbnRpdHlUeXBlKTtcbiAgICBjb25zdCBuZ0VudGl0eVByb3BlcnRpZXMgPSB0aGlzLmdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlKTtcbiAgICBjb25zdCBuZ0R5bmFtaWNQcm9wZXJ0aWVzID0gdGhpcy5nZXROZ0R5bmFtaWNQcm9wZXJ0aWVzKGVudGl0eVR5cGUpO1xuICAgIGNvbnN0IG5nRW50aXR5TGlzdFByb3BlcnRpZXMgPSB0aGlzLmdldE5nT2JqZWN0UHJvcGVydGllcyhlbnRpdHlUeXBlKTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LFxuICAgICAgbmdQbGFpblByb3BlcnRpZXMsICAgbmdFbnRpdHlQcm9wZXJ0aWVzLFxuICAgICAgbmdEeW5hbWljUHJvcGVydGllcywgbmdFbnRpdHlMaXN0UHJvcGVydGllc1xuICAgICk7XG4gIH1cbiAgXG4gIC8qKlxuICAgKiDojrflj5ZFbnR0aXlDbGFzc01ldGFkYXRhXG4gICAqL1xuICBzdGF0aWMgZ2V0TmdFbnRpdHlNYXRhZGF0YShlbnRpdHlUeXBlOiBhbnkpOiBFbnRpdHlNZXRhZGF0YXtcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldENsYXNzTWV0YWRhdGFCeU5hbWVXaXRoVHJhbnNsYXRlKGVudGl0eVR5cGUsIEVOVElUWV9NRVRBKTtcbiAgfVxuXG5cbiAgLyoqXG4gICAqIOiOt+WPllByaW1pdGl2ZVByb3BNZXRhZGF0YeeahOWxnuaAp+WFg+aVsOaNrlxuICAgKi9cbiAgc3RhdGljIGdldE5nRmllbGRQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZShlbnRpdHlUeXBlLCBQUklNSVRJVkVfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5ZPYmplY3RQcm9wTWV0YWRhdGHlsZ7mgKflhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ09iamVjdFByb3BlcnRpZXMoZW50aXR5VHlwZTogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IE9iamVjdFByb3BNZXRhZGF0YSB9IHtcbiAgICByZXR1cm4gTWV0YWRhdGFVdGlsLmdldFByb3BzTWV0YWRhdGFzQnlOYW1lKGVudGl0eVR5cGUsIE9CSkVDVF9QUk9QX01FVEEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlkR5bmFtaWNQcm9wTWV0YWRhdGHlsZ7mgKflhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ0R5bmFtaWNQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBEeW5hbWljUHJvcE1ldGFkYXRhIH0ge1xuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgRFlOQU1JQ19QUk9QX01FVEEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPlkxpc3RQcm9wTWV0YWRhdGHlsZ7mgKflhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ0xpc3RQcm9wZXJ0aWVzKGVudGl0eVR5cGU6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBMaXN0UHJvcE1ldGFkYXRhIH0ge1xuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUoZW50aXR5VHlwZSwgTElTVF9QUk9QX01FVEEpO1xuICB9XG5cbiAgLyoqXG4gICAqIOiOt+WPluS4u+mUruWxnuaAp+WFg+aVsOaNrlxuICAgKi9cbiAgc3RhdGljIGdldFByaW1hcnlLZXlQcm9wZXJ0eShlbnRpdHlUeXBlOiBUeXBlPEVudGl0eT4pOiBQcmltaXRpdmVQcm9wTWV0YWRhdGEge1xuICAgIGxldCBwcmltYXJ5S2V5UHJvcGVydHk7XG4gICAgY29uc3QgbmdQbGFpblByb3BlcnRpZXMgPSBFbnRpdHlNZXRhZGF0YVV0aWwuZ2V0TmdGaWVsZFByb3BlcnRpZXMoZW50aXR5VHlwZSk7XG4gICAgT2JqZWN0LmtleXMobmdQbGFpblByb3BlcnRpZXMpLmZvckVhY2goKHByb3BOYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IG5nUHJvcGVydHkgPSBuZ1BsYWluUHJvcGVydGllc1twcm9wTmFtZV0gYXMgUHJpbWl0aXZlUHJvcE1ldGFkYXRhO1xuICAgICAgaWYgKG5nUHJvcGVydHkucHJpbWFyeSA9PT0gdHJ1ZSkge1xuICAgICAgICBwcmltYXJ5S2V5UHJvcGVydHkgPSBuZ1Byb3BlcnR5O1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHByaW1hcnlLZXlQcm9wZXJ0eTtcbiAgfVxufVxuIl19