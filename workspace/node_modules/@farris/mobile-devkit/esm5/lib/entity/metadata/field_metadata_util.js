import { MetadataUtil } from '../../core/index';
import { PRIMITIVE_PROP_META, OBJECT_PROP_META, DYNAMIC_PROP_META, LIST_PROP_META } from './field_decorator';
/**
 * 属性注解器通用方法
 */
var FieldMetadataUtil = /** @class */ (function () {
    function FieldMetadataUtil() {
    }
    /**
     * 获取实体所有的简单属性元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    FieldMetadataUtil.getNgFields = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, PRIMITIVE_PROP_META);
    };
    /**
     * 获取某个简单属性的元数据
     */
    FieldMetadataUtil.getNgField = function (target, propName) {
        var ngFields = this.getNgFields(target);
        var ngField = ngFields[propName];
        return ngField;
    };
    /**
     * 获取实体属性在原始数据中的属性名
     */
    FieldMetadataUtil.getDataField = function (target, propName) {
        var ngField = this.getNgField(target, propName);
        return ngField.dataField || propName;
    };
    /**
     * 获取标注为NgObject的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgObjectProperty}
     */
    FieldMetadataUtil.getNgObjects = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, OBJECT_PROP_META);
    };
    FieldMetadataUtil.getNgDynamic = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, DYNAMIC_PROP_META);
    };
    /**
     * 获取标注为NgList的属性的元数据
     * @param target 实体类型
     * @returns 形如：{[propName: string]: NgListProperty}
     */
    FieldMetadataUtil.getNgList = function (target) {
        return MetadataUtil.getPropsMetadatasByName(target, LIST_PROP_META);
    };
    /**
     * 获取实体标注为主键的属性元数据
     * @param target 实体类型
     */
    FieldMetadataUtil.getPrimaryFieldMetadata = function (target) {
        var ngFieldObj = FieldMetadataUtil.getNgFields(target);
        var primaryKey = Object.keys(ngFieldObj).find(function (prop) {
            return ngFieldObj[prop].primary;
        });
        if (primaryKey) {
            var propMeta = ngFieldObj[primaryKey];
            propMeta.property = primaryKey;
            if (!propMeta.dataField) {
                propMeta.dataField = primaryKey;
            }
            return propMeta;
        }
        return undefined;
    };
    /**
     * 获取主键名称，没有主键时返回空字符串
     */
    FieldMetadataUtil.getPrimaryKey = function (entityType) {
        var primaryNgField = this.getPrimaryFieldMetadata(entityType);
        if (!primaryNgField) {
            return '';
        }
        return primaryNgField.property;
    };
    return FieldMetadataUtil;
}());
export { FieldMetadataUtil };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGRfbWV0YWRhdGFfdXRpbC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi9lbnRpdHkvbWV0YWRhdGEvZmllbGRfbWV0YWRhdGFfdXRpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFDaEQsT0FBTyxFQUNMLG1CQUFtQixFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixFQUFFLGNBQWMsRUFFekUsTUFBTSxtQkFBbUIsQ0FBQztBQUUzQjs7R0FFRztBQUNIO0lBQUE7SUFrRkEsQ0FBQztJQWpGQzs7OztPQUlHO0lBQ0ksNkJBQVcsR0FBbEIsVUFBbUIsTUFBVztRQUM1QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsbUJBQW1CLENBQUMsQ0FBQztJQUMzRSxDQUFDO0lBRUQ7O09BRUc7SUFDSSw0QkFBVSxHQUFqQixVQUFrQixNQUFXLEVBQUUsUUFBZ0I7UUFDN0MsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUMxQyxJQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsUUFBUSxDQUEwQixDQUFDO1FBQzVELE9BQU8sT0FBTyxDQUFDO0lBQ2pCLENBQUM7SUFFRDs7T0FFRztJQUNJLDhCQUFZLEdBQW5CLFVBQW9CLE1BQVcsRUFBRSxRQUFnQjtRQUMvQyxJQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztRQUNsRCxPQUFPLE9BQU8sQ0FBQyxTQUFTLElBQUksUUFBUSxDQUFDO0lBQ3ZDLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksOEJBQVksR0FBbkIsVUFBb0IsTUFBVztRQUM3QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRU0sOEJBQVksR0FBbkIsVUFBb0IsTUFBVztRQUM3QixPQUFPLFlBQVksQ0FBQyx1QkFBdUIsQ0FBQyxNQUFNLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztJQUN6RSxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNJLDJCQUFTLEdBQWhCLFVBQWlCLE1BQVc7UUFDMUIsT0FBTyxZQUFZLENBQUMsdUJBQXVCLENBQUMsTUFBTSxFQUFFLGNBQWMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRDs7O09BR0c7SUFDSSx5Q0FBdUIsR0FBOUIsVUFBK0IsTUFBVztRQUN4QyxJQUFNLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDekQsSUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQyxJQUFZO1lBQzNELE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1lBQ3hDLFFBQVEsQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDO1lBQy9CLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2dCQUN2QixRQUFRLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQzthQUNqQztZQUVELE9BQU8sUUFBUSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxTQUFTLENBQUM7SUFDbkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ksK0JBQWEsR0FBcEIsVUFBcUIsVUFBZTtRQUNsQyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsdUJBQXVCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDaEUsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUNuQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBQ0QsT0FBTyxjQUFjLENBQUMsUUFBUSxDQUFDO0lBQ2pDLENBQUM7SUFFSCx3QkFBQztBQUFELENBQUMsQUFsRkQsSUFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNZXRhZGF0YVV0aWwgfSBmcm9tICcuLi8uLi9jb3JlL2luZGV4JztcbmltcG9ydCB7XG4gIFBSSU1JVElWRV9QUk9QX01FVEEsIE9CSkVDVF9QUk9QX01FVEEsIERZTkFNSUNfUFJPUF9NRVRBLCBMSVNUX1BST1BfTUVUQSxcbiAgUHJpbWl0aXZlUHJvcE1ldGFkYXRhLCBPYmplY3RQcm9wTWV0YWRhdGEsIER5bmFtaWNQcm9wTWV0YWRhdGEsIExpc3RQcm9wTWV0YWRhdGFcbn0gZnJvbSAnLi9maWVsZF9kZWNvcmF0b3InO1xuXG4vKipcbiAqIOWxnuaAp+azqOino+WZqOmAmueUqOaWueazlVxuICovXG5leHBvcnQgY2xhc3MgRmllbGRNZXRhZGF0YVV0aWwge1xuICAvKipcbiAgICog6I635Y+W5a6e5L2T5omA5pyJ55qE566A5Y2V5bGe5oCn5YWD5pWw5o2uXG4gICAqIEBwYXJhbSB0YXJnZXQg5a6e5L2T57G75Z6LXG4gICAqIEByZXR1cm5zIOW9ouWmgu+8mntbcHJvcE5hbWU6IHN0cmluZ106IE5nT2JqZWN0UHJvcGVydHl9XG4gICAqL1xuICBzdGF0aWMgZ2V0TmdGaWVsZHModGFyZ2V0OiBhbnkpOiB7IFtwcm9wTmFtZTogc3RyaW5nXTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIH0ge1xuICAgIHJldHVybiBNZXRhZGF0YVV0aWwuZ2V0UHJvcHNNZXRhZGF0YXNCeU5hbWUodGFyZ2V0LCBQUklNSVRJVkVfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmn5DkuKrnroDljZXlsZ7mgKfnmoTlhYPmlbDmja5cbiAgICovXG4gIHN0YXRpYyBnZXROZ0ZpZWxkKHRhcmdldDogYW55LCBwcm9wTmFtZTogc3RyaW5nKTogUHJpbWl0aXZlUHJvcE1ldGFkYXRhIHtcbiAgICBjb25zdCBuZ0ZpZWxkcyA9IHRoaXMuZ2V0TmdGaWVsZHModGFyZ2V0KTtcbiAgICBjb25zdCBuZ0ZpZWxkID0gbmdGaWVsZHNbcHJvcE5hbWVdIGFzIFByaW1pdGl2ZVByb3BNZXRhZGF0YTtcbiAgICByZXR1cm4gbmdGaWVsZDtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blrp7kvZPlsZ7mgKflnKjljp/lp4vmlbDmja7kuK3nmoTlsZ7mgKflkI1cbiAgICovXG4gIHN0YXRpYyBnZXREYXRhRmllbGQodGFyZ2V0OiBhbnksIHByb3BOYW1lOiBzdHJpbmcpIHtcbiAgICBjb25zdCBuZ0ZpZWxkID0gdGhpcy5nZXROZ0ZpZWxkKHRhcmdldCwgcHJvcE5hbWUpO1xuICAgIHJldHVybiBuZ0ZpZWxkLmRhdGFGaWVsZCB8fCBwcm9wTmFtZTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmoIfms6jkuLpOZ09iamVjdOeahOWxnuaAp+eahOWFg+aVsOaNrlxuICAgKiBAcGFyYW0gdGFyZ2V0IOWunuS9k+exu+Wei1xuICAgKiBAcmV0dXJucyDlvaLlpoLvvJp7W3Byb3BOYW1lOiBzdHJpbmddOiBOZ09iamVjdFByb3BlcnR5fVxuICAgKi9cbiAgc3RhdGljIGdldE5nT2JqZWN0cyh0YXJnZXQ6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIE9CSkVDVF9QUk9QX01FVEEpO1xuICB9XG5cbiAgc3RhdGljIGdldE5nRHluYW1pYyh0YXJnZXQ6IGFueSk6IHsgW3Byb3BOYW1lOiBzdHJpbmddOiBPYmplY3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIERZTkFNSUNfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5bmoIfms6jkuLpOZ0xpc3TnmoTlsZ7mgKfnmoTlhYPmlbDmja5cbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcbiAgICogQHJldHVybnMg5b2i5aaC77yae1twcm9wTmFtZTogc3RyaW5nXTogTmdMaXN0UHJvcGVydHl9XG4gICAqL1xuICBzdGF0aWMgZ2V0TmdMaXN0KHRhcmdldDogYW55KTogeyBbcHJvcE5hbWU6IHN0cmluZ106IExpc3RQcm9wTWV0YWRhdGEgfSB7XG4gICAgcmV0dXJuIE1ldGFkYXRhVXRpbC5nZXRQcm9wc01ldGFkYXRhc0J5TmFtZSh0YXJnZXQsIExJU1RfUFJPUF9NRVRBKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blrp7kvZPmoIfms6jkuLrkuLvplK7nmoTlsZ7mgKflhYPmlbDmja5cbiAgICogQHBhcmFtIHRhcmdldCDlrp7kvZPnsbvlnotcbiAgICovXG4gIHN0YXRpYyBnZXRQcmltYXJ5RmllbGRNZXRhZGF0YSh0YXJnZXQ6IGFueSk6IFByaW1pdGl2ZVByb3BNZXRhZGF0YSB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgbmdGaWVsZE9iaiA9IEZpZWxkTWV0YWRhdGFVdGlsLmdldE5nRmllbGRzKHRhcmdldCk7XG4gICAgY29uc3QgcHJpbWFyeUtleSA9IE9iamVjdC5rZXlzKG5nRmllbGRPYmopLmZpbmQoKHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgcmV0dXJuIG5nRmllbGRPYmpbcHJvcF0ucHJpbWFyeTtcbiAgICB9KTtcblxuICAgIGlmIChwcmltYXJ5S2V5KSB7XG4gICAgICBjb25zdCBwcm9wTWV0YSA9IG5nRmllbGRPYmpbcHJpbWFyeUtleV07XG4gICAgICBwcm9wTWV0YS5wcm9wZXJ0eSA9IHByaW1hcnlLZXk7XG4gICAgICBpZiAoIXByb3BNZXRhLmRhdGFGaWVsZCkge1xuICAgICAgICBwcm9wTWV0YS5kYXRhRmllbGQgPSBwcmltYXJ5S2V5O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJvcE1ldGE7XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG4gIH1cblxuICAvKipcbiAgICog6I635Y+W5Li76ZSu5ZCN56ew77yM5rKh5pyJ5Li76ZSu5pe26L+U5Zue56m65a2X56ym5LiyXG4gICAqL1xuICBzdGF0aWMgZ2V0UHJpbWFyeUtleShlbnRpdHlUeXBlOiBhbnkpIHtcbiAgICBjb25zdCBwcmltYXJ5TmdGaWVsZCA9IHRoaXMuZ2V0UHJpbWFyeUZpZWxkTWV0YWRhdGEoZW50aXR5VHlwZSk7XG4gICAgaWYgKCFwcmltYXJ5TmdGaWVsZCkge1xuICAgICAgcmV0dXJuICcnO1xuICAgIH1cbiAgICByZXR1cm4gcHJpbWFyeU5nRmllbGQucHJvcGVydHk7XG4gIH1cblxufVxuIl19