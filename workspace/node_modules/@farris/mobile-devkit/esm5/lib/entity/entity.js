import { Subject } from 'rxjs';
import { FieldMetadataUtil } from './metadata/index';
;
import { ModifyType, ChangeSet } from '../changeset/index';
import { PARENT_PATH, PARENT_CLASS } from './types';
import { EntityList } from './entity_list';
import { EntityFactory } from './entity_factory';
/**
 * @author Lucas Huang
 * 实体抽象基类，所有实体必须扩展自Entity
 *
 * ### 使用示例
 * ```
 * export class UserEntity extends Entity {
 *    userId: string;
 *    userName: string;
 *
 *    constructor(data: any){
 *        super(data);
 *    }
 * }
 * ```
 */
var Entity = /** @class */ (function () {
    // #endregion
    /**
     * @param data JSON数据
     */
    function Entity(data) {
        // #region 私有、保护属性
        /**
         * 验证错误集合
         */
        this.validErrors = {};
        /**
         * 增量变更集合
         */
        this.changeSet = new ChangeSet();
        /**
         * 是否正在验证
         */
        this.isValidating = false;
        /**
         * 新数据
         */
        this.newData = undefined;
        // #endregion
        // #region 公有属性
        /**
         * 变更流
         */
        this.valueChanged = new Subject();
        /**
         * 属性值改变时触发
         *
         * ### 使用示例
         * ```
         *  const entity = new UserEntity(data);
         *  entity.onValueChanged.subscribe((data: Modification) => {
         *      console.log(data);
         *  })
         *
         * ```
         *
         * @event
         */
        this.onValueChanged = this.valueChanged.asObservable();
        /**
         * 是否变更
         */
        this.hasChange = false;
        this.newData = Object.assign({}, data);
        this.onValueChanged = this.valueChanged;
        this.initialize();
    }
    Object.defineProperty(Entity.prototype, "data", {
        /**
         * 返回JSON格式的数据
         */
        get: function () {
            return this.newData;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "errors", {
        /**
         * 验证错误集合
         */
        get: function () {
            return this.validErrors;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "changes", {
        /**
         * 实体变更集
         */
        get: function () {
            return this.changeSet.changes;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "primaryProperty", {
        /**
         * 实体主键元数据
         */
        get: function () {
            return FieldMetadataUtil.getPrimaryFieldMetadata(this.constructor);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "primaryKey", {
        /**
         * 主键
         * @todo
         * 1、没有主键时返回''不合理，应该返回undefined
         */
        get: function () {
            if (this.primaryProperty) {
                return this.primaryProperty.property;
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Entity.prototype, "primaryValue", {
        /**
         * 实体主键值
         * 1、没有主键时返回''不合理，应该返回undefined
         */
        get: function () {
            if (this.primaryKey) {
                // return this[this.primaryProperty.property].toString();
                var primaryValue = this[this.primaryProperty.property];
                return primaryValue ? primaryValue : '';
            }
            else {
                return '';
            }
        },
        enumerable: true,
        configurable: true
    });
    // #region 公有方法
    /**
     * 将变更记录保存至变更集中
     * @param value 变更记录
     */
    Entity.prototype.setChanges = function (value) {
        var propertyName = value.path[value.path.length - 1];
        // 增加实体变化后增加标志，加载数据或者重新加载不做标记
        if (value.type !== ModifyType.Load) {
            this.hasChange = true;
        }
        // @todo：事件会从下级向上冒泡，change可能是下级的，不能和当前Entity的newData合并。
        // this.newData = Object.assign(this.newData, { [propertyName]: value.value });
        this.valueChanged.next(value);
        this.changeSet.append(value);
    };
    Entity.prototype.getPaths = function () {
        var pathObj = {
            path: [],
            isUdt: false,
            isGrid: false
        };
        var handleParent = function (item) {
            var parentPaths = item[PARENT_PATH];
            if (parentPaths) {
                var prop = parentPaths[parentPaths.length - 1];
                // 父级所在实体包含的ngObject，存在当前实体字段，则判断为UDt字段
                if (Object.keys(FieldMetadataUtil.getNgObjects(item[PARENT_CLASS].constructor)).indexOf(prop) > -1) {
                    pathObj.isUdt = true;
                }
                // 存在类型为ngList，则判断为grid
                if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                    pathObj.isGrid = true;
                }
                pathObj.path.push(prop);
            }
            if (item[PARENT_CLASS] && item instanceof EntityList === true) {
                handleParent(item[PARENT_CLASS]);
            }
        };
        handleParent(this);
        pathObj.path = pathObj.path.reverse();
        return pathObj;
    };
    /**
     * 加载数据
     * @param data 新数据
     */
    Entity.prototype.load = function (data) {
        if (!data) {
            data = {};
        }
        this.loadFields(data);
        this.loadLists(data);
        this.loadObjects(data);
        this.loadDynamicObjects(data);
        this.newData = Object.assign({}, data);
    };
    /**
     * 转换为JSON
     */
    Entity.prototype.toJSON = function () {
        var _this = this;
        var result = {};
        // 简单属性
        var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach(function (propName) {
            var ngField = ngFields[propName];
            var dataField = ngField.dataField || propName;
            result[dataField] = _this[propName];
        });
        // 对象属性
        var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach(function (propName) {
            var ngObject = ngObjects[propName];
            var dataField = ngObject.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
        });
        // 动态属性
        var ngDynamics = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamics).forEach(function (propName) {
            var ngDynamic = ngDynamics[propName];
            var dataField = ngDynamic.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
        });
        // 列表属性
        var ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach(function (propName) {
            var ngList = ngLists[propName];
            var dataField = ngList.dataField || propName;
            result[dataField] = _this[propName] ? _this[propName].toJSON() : {};
        });
        return result;
    };
    // #endregion
    //#region 实体初始化相关private方法
    /**
     * 初始化实体
     */
    Entity.prototype.initialize = function () {
        var constructor = this.constructor;
        var ngFields = FieldMetadataUtil.getNgFields(constructor);
        var ngObjects = FieldMetadataUtil.getNgObjects(constructor);
        var ngLists = FieldMetadataUtil.getNgList(constructor);
        var ngDynamic = FieldMetadataUtil.getNgDynamic(constructor);
        this.initializeNormalField(ngFields);
        this.initializeList(ngLists);
        this.initializeObject(ngObjects);
        this.initializeDynamic(ngDynamic);
    };
    /**
     * 创建path
     * @param propertyName 属性名称
     */
    Entity.prototype.createPath = function (propertyName) {
        var primaryFieldMetadata = this.primaryProperty;
        if (primaryFieldMetadata) {
            var primaryDataField = primaryFieldMetadata.dataField;
            return [primaryDataField + ':' + this.primaryValue, propertyName];
        }
        else {
            return [':', propertyName];
        }
    };
    /**
     * 属性字段初始化
     * @param ngFields 属性字段元数据
     */
    Entity.prototype.initializeNormalField = function (ngFields) {
        var _this = this;
        Object.keys(ngFields).forEach(function (propName) {
            var ngField = ngFields[propName];
            var dataField = ngField.dataField || propName;
            if (delete _this[propName]) {
                Object.defineProperty(_this, propName, {
                    get: function () {
                        return this.getPropValue(propName, ngField);
                    },
                    set: function (newPropValue) {
                        // 影响清空关联字段的主键值，移除此逻辑
                        // // 有主键的实体，不允许给实体赋空值
                        // if (this.primaryKey && this.primaryKey === propName && !newPropValue) {
                        //   return;
                        // }
                        // 有主键的实体，必须先给主键赋值，否则其他字段不允许赋值
                        if (this.primaryKey && this.primaryKey !== propName && !this.primaryValue) {
                            return;
                        }
                        // 值相同时不触发变更。
                        var oldPropValue = this.getPropValue(propName, ngField);
                        if (this.isPropValueChanged(propName, ngField, newPropValue, oldPropValue) === false) {
                            return;
                        }
                        this.setPropValue(propName, ngField, newPropValue);
                        this.emitValueChange(propName, ngField, newPropValue, oldPropValue);
                    },
                    configurable: true
                });
            }
        });
    };
    /**
     * 初始化列表类型的元数据
     * @param ngListMetadata 列表类型元数据
     */
    Entity.prototype.initializeList = function (ngListMetadata) {
        var _this = this;
        Object.keys(ngListMetadata).forEach(function (propertyName) {
            var fieldMetadata = ngListMetadata[propertyName];
            var path = _this.createPath(propertyName);
            var dataField = fieldMetadata.dataField || propertyName;
            var val = _this.data[dataField];
            var entityList = new EntityList();
            entityList[PARENT_CLASS] = _this;
            entityList[PARENT_PATH] = path;
            if (val) {
                var entities = val.map(function (v) { return EntityFactory(fieldMetadata.type, v); });
                entityList.loadEntities(entities);
            }
            entityList.onListChanged.subscribe(function (value) {
                if (value) {
                    if (entityList[PARENT_PATH][0] !== value.path[0]) {
                        value.path = entityList[PARENT_PATH].concat(value.path);
                    }
                    _this.setChanges(value);
                }
            });
            _this[propertyName] = entityList;
        });
    };
    /**
     * 初始化子对象
     * @param ngObjectMetadata 子对象元数据
     */
    Entity.prototype.initializeObject = function (ngObjectMetadata) {
        var _this = this;
        Object.keys(ngObjectMetadata).forEach(function (propertyName) {
            var fieldMetadata = ngObjectMetadata[propertyName];
            var path = _this.createPath(propertyName);
            var dataField = fieldMetadata.dataField || propertyName;
            // val不存在时，用空对象代替
            var val = _this.data[dataField] || {};
            var createEntityFromJsonData = function (value) {
                var instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = _this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(function (changes) {
                    if (changes) {
                        changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                        _this.setChanges(changes);
                    }
                });
                return instance;
            };
            // 如果没有值用一个空对象代替
            var childEntity = createEntityFromJsonData(val);
            if (delete _this[propertyName]) {
                Object.defineProperty(_this, propertyName, {
                    get: function () {
                        return childEntity;
                    },
                    set: function (value) {
                        var modifyInfo = {
                            path: childEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        childEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
        });
    };
    Entity.prototype.initializeDynamic = function (ngDynamicMetadata) {
        var _this = this;
        Object.keys(ngDynamicMetadata).forEach(function (propertyName) {
            var fieldMetadata = ngDynamicMetadata[propertyName];
            var path = _this.createPath(propertyName);
            var dataField = fieldMetadata.dataField || propertyName;
            var originalData = _this.data[dataField] || {};
            var createEntityFromJsonData = function (value) {
                var instance;
                if (value instanceof fieldMetadata.type) {
                    instance = value;
                }
                else {
                    instance = EntityFactory(fieldMetadata.type, value);
                }
                instance[PARENT_CLASS] = _this;
                instance[PARENT_PATH] = path;
                instance.onValueChanged.subscribe(function (changes) {
                    if (changes) {
                        changes.path = (_this[PARENT_PATH] || []).concat(changes.path);
                        _this.setChanges(changes);
                    }
                });
                return instance;
            };
            var dynamicEntity = createEntityFromJsonData(originalData);
            if (delete _this[propertyName]) {
                Object.defineProperty(_this, propertyName, {
                    get: function () {
                        return dynamicEntity;
                    },
                    set: function (value) {
                        var modifyInfo = {
                            path: dynamicEntity[PARENT_PATH],
                            value: value.data,
                            preValue: this[propertyName].data,
                            type: ModifyType.ValueChange
                        };
                        dynamicEntity = createEntityFromJsonData(value);
                        this.setChanges(modifyInfo);
                    },
                    configurable: true
                });
            }
        });
    };
    //#endregion
    // #region 加载实体数据相关private、projected方法
    /**
     * 加载简单字段值
     * @todo 临时用修改的方式模拟
     */
    Entity.prototype.loadFields = function (data) {
        var _this = this;
        var ngFields = FieldMetadataUtil.getNgFields(this.constructor);
        Object.keys(ngFields).forEach(function (propName) {
            var ngField = ngFields[propName];
            var dataField = ngField.dataField || propName;
            // if (ngField.primary === false) {
            //   this[propName] = data[dataField];
            // }
            _this[propName] = data[dataField];
        });
    };
    /**
     * 加载子列表数据
     * @param data 数据
     */
    Entity.prototype.loadLists = function (data) {
        var _this = this;
        var ngLists = FieldMetadataUtil.getNgList(this.constructor);
        Object.keys(ngLists).forEach(function (propName) {
            var ngList = ngLists[propName];
            var dataField = ngList.dataField || propName;
            var entityType = ngList.type;
            // 创建实体
            var listData = data[dataField];
            if (listData) {
                var entities = listData.map(function (entityData) {
                    return EntityFactory(entityType, entityData);
                });
                _this[propName].loadEntities(entities);
            }
            else {
                _this[propName].loadEntities([]);
            }
        });
    };
    Entity.prototype.loadObjects = function (data) {
        var _this = this;
        var ngObjects = FieldMetadataUtil.getNgObjects(this.constructor);
        Object.keys(ngObjects).forEach(function (propName) {
            var ngObject = ngObjects[propName];
            var dataField = ngObject.dataField || propName;
            var objectData = data[dataField];
            var entity = _this[propName];
            if (!entity || !objectData) {
                return;
            }
            entity.load(objectData);
        });
    };
    Entity.prototype.loadDynamicObjects = function (data) {
        var _this = this;
        var ngDynamicObjects = FieldMetadataUtil.getNgDynamic(this.constructor);
        Object.keys(ngDynamicObjects).forEach(function (propName) {
            var ngDynamicObject = ngDynamicObjects[propName];
            var dataField = ngDynamicObject.dataField || propName;
            var dynamicData = data[dataField] || {};
            var dynamicEntity = _this[propName];
            if (!dynamicEntity) {
                return;
            }
            dynamicEntity.loadDynamicData(dynamicData);
        });
    };
    // #endregion
    // #region 私有工具方法
    /**
     * 发送值变更
     */
    Entity.prototype.emitValueChange = function (propName, propMetadata, newPropValue, oldPropValue) {
        var change = {
            path: this.createPath(propName),
            value: newPropValue,
            preValue: oldPropValue,
            type: ModifyType.ValueChange
        };
        if (this[PARENT_PATH]) {
            change.path = this[PARENT_PATH].concat(change.path);
        }
        this.setChanges(change);
    };
    /**
     * 获取属性值
     */
    Entity.prototype.getPropValue = function (propName, propMetadata) {
        var _a;
        var dataField = propMetadata.dataField || propName;
        var value = this.data[dataField];
        // 对多语录入字段，query不返回问题进行兼容
        if (propMetadata.enableMultiLangInput === true && !value) {
            var langCode = window.localStorage.getItem('languageCode') || 'zh-CHS';
            var originDataField = dataField.replace('_MULTILANGUAGE', '');
            return _a = {},
                _a[langCode] = this.data[originDataField],
                _a;
        }
        return value;
    };
    /**
     * 设置属性值
     */
    Entity.prototype.setPropValue = function (propName, propMetadata, propValue) {
        var dataField = propMetadata.dataField || propName;
        this.data[dataField] = propValue;
    };
    /**
     * 检查属性值是否发生变化
     */
    Entity.prototype.isPropValueChanged = function (propName, propMetadata, newPropValue, oldPropValue) {
        if (propMetadata.enableMultiLangInput === true) {
            if (this.isEmptyMultiLangPropValue(newPropValue) === true && this.isEmptyMultiLangPropValue(oldPropValue) === true) {
                return false;
            }
            return JSON.stringify(newPropValue) !== JSON.stringify(oldPropValue);
        }
        else {
            return newPropValue !== oldPropValue;
        }
    };
    /**
     * 多语录入字段的值是否为空
     */
    Entity.prototype.isEmptyMultiLangPropValue = function (value) {
        return !value || Object.keys(value).length === 0;
    };
    return Entity;
}());
export { Entity };
//# sourceMappingURL=data:application/json;base64,