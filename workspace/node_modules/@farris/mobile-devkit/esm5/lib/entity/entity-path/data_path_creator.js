import { DataTypeInfo, DataPropGroup } from '../entity-type-info/index';
import { DataPathNodeType } from './data_path_node';
import { DataPath } from './data_path';
/**
 * 数据Path工厂类
 */
var DataPathCreator = /** @class */ (function () {
    function DataPathCreator() {
    }
    /**
     * 将长路径数组或字符串转换为
     * @param fullPathArrayOrString 路径数组或字符串
     * @param repository 实体仓库
     * @summary
     * 1、长路径格式说明参考：data-path.md
     */
    DataPathCreator.createByLongPathFromRoot = function (fullPathArrayOrString, entityManager) {
        var dataPath = new DataPath();
        var fullPathArray = fullPathArrayOrString;
        if (!fullPathArray || fullPathArray.length === 0) {
            return dataPath;
        }
        var currentNodeInfo = {
            nodeValue: fullPathArray.shift(),
            nodeType: DataPathNodeType.DataId,
            entityTypeInfo: new DataTypeInfo(entityManager.entityType)
        };
        while (currentNodeInfo) {
            dataPath.push(currentNodeInfo.nodeType, currentNodeInfo.nodeValue);
            // 处理下一个节点
            var nextNodeValue = fullPathArray.shift();
            if (!nextNodeValue || !currentNodeInfo.entityTypeInfo) {
                break;
            }
            currentNodeInfo = this.getNextPathNodeInfo(currentNodeInfo, nextNodeValue);
        }
        return dataPath;
    };
    /**
     * 获取下一个路径节点的信息
     * @param parentNodeInfo 当前路径节点信息
     * @param nextNodeValue 下一个路径节点的值
     * @summary
     * 1、这个递归写的很绕，说明数据结构设计不合理；
     * 2、多个因素混用了一个结构；
     */
    DataPathCreator.getNextPathNodeInfo = function (parentNodeInfo, nextNodeValue) {
        var parentNodeValue = parentNodeInfo.nodeValue;
        var parentNodeType = parentNodeInfo.nodeType;
        var parentEntityTypeInfo = parentNodeInfo.entityTypeInfo;
        if (!nextNodeValue || !parentEntityTypeInfo) {
            return null;
        }
        var nextPathNodeInfo = {
            nodeValue: nextNodeValue,
            nodeType: null,
            entityTypeInfo: null
        };
        // DataNodeType=List：下一节点肯定是Object，并且EntityTypeInfo不变
        if (parentNodeType === DataPathNodeType.DataId) {
            nextPathNodeInfo.nodeType = DataPathNodeType.PropName;
            nextPathNodeInfo.entityTypeInfo = parentEntityTypeInfo;
        }
        else {
            // DataNodeType=Object：必然对应一个属性信息
            var nextPropInfo = parentEntityTypeInfo.getPropInfoByName(parentNodeValue);
            if (nextPropInfo.group === DataPropGroup.List) {
                // EntityPropGroup=EntityList：下一个节点是List类型。
                nextPathNodeInfo.nodeType = DataPathNodeType.DataId;
                nextPathNodeInfo.entityTypeInfo = nextPropInfo.typeInfo;
            }
            else {
                // EntityPropGroup=Entity：       下级entityTypeInfo为
                // EntityPropGroup=Dynamic|Plain：null
                nextPathNodeInfo.nodeType = DataPathNodeType.PropName;
                nextPathNodeInfo.entityTypeInfo = nextPropInfo.group === DataPropGroup.Object ? nextPropInfo.typeInfo : null;
            }
        }
        return nextPathNodeInfo;
    };
    /**
     * @param fullPathArrayOrString 路径数组或字符串
     * @param repository 实体仓库
     * @summary
     * 1、长路径格式说明参考：data-path.md
     * 2、shortPathArrayOrString暂时只支持字符串数组
     */
    DataPathCreator.createByShortPathFromRoot = function (shortPathArrayOrString, entityManager, bindingData) {
        var dataPath = new DataPath();
        var shortPathArray = shortPathArrayOrString;
        // 根节点
        var currentBindingObject = bindingData.list.currentItem;
        var currentEntityTypeInfo = new DataTypeInfo(entityManager.entityType);
        dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
        // 遍历下级节点
        shortPathArray.forEach(function (propName) {
            var propInfo = currentEntityTypeInfo.getPropInfoByName(propName);
            switch (propInfo.group) {
                case DataPropGroup.Primitive:
                    dataPath.push(DataPathNodeType.PropName, propName);
                    break;
                case DataPropGroup.Object:
                    currentBindingObject = currentBindingObject[propName];
                    currentEntityTypeInfo = propInfo.typeInfo;
                    dataPath.push(DataPathNodeType.PropName, propName);
                    break;
                case DataPropGroup.List:
                    var currentBindingList = currentBindingObject[propName];
                    currentBindingObject = currentBindingList.currentItem;
                    currentEntityTypeInfo = propInfo.typeInfo;
                    dataPath.push(DataPathNodeType.PropName, propName);
                    dataPath.push(DataPathNodeType.DataId, currentBindingObject.primaryKeyValue);
                    break;
                default:
                    break;
            }
        });
        return dataPath;
    };
    return DataPathCreator;
}());
export { DataPathCreator };
//# sourceMappingURL=data:application/json;base64,