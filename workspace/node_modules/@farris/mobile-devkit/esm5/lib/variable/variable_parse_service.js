/**
 * 变量解析服务
 * 职责：
 * 1、解析字符串中的变量，并替换成相应的值；
 * 2、对表达式进行求值。
 *
 * @todo 对表达式求值的部分和表达式功能重叠，是否转移到表达式中？
 */
var VariableParseService = /** @class */ (function () {
    /**
     * 构造变量解析服务
     * @param parsers 解析器集合
     */
    function VariableParseService(parsers) {
        this.parsers = parsers;
    }
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    VariableParseService.prototype.parse = function (target, context) {
        var _this = this;
        if (typeof target === 'string' && target.length > 0) {
            // 字符串，直接解析
            return this.parseExpression(target, context);
        }
        else if (Array.isArray(target)) {
            // 遍历数组
            target.forEach(function (item, itemIndex) {
                if (typeof item === 'string') {
                    target[itemIndex] = _this.parseExpression(item, context);
                }
                else {
                    target[itemIndex] = _this.parse(item, context);
                }
            });
        }
        else if (typeof target === 'object' && target !== null) {
            // 遍历对象可枚举属性
            var keys = Object.keys(target);
            keys.forEach(function (key) {
                if (typeof target[key] === 'string') {
                    target[key] = _this.parseExpression(target[key], context);
                }
                else {
                    target[key] = _this.parse(target[key], context);
                }
            });
        }
        return target;
    };
    /**
     * 表达式求值
     */
    VariableParseService.prototype.evaluate = function (expression, context) {
        var parsedExpression = this.parse(expression, context);
        return (new Function('return ' + parsedExpression))();
    };
    /**
     * 解析表达式
     * @param expression 表达式
     * @param context 上下文
     */
    VariableParseService.prototype.parseExpression = function (expression, context) {
        // 空串直接返回
        if (expression === '') {
            return '';
        }
        this.parsers.forEach(function (parser) {
            if (typeof expression === 'string') {
                expression = parser.parse(expression, context);
            }
        });
        return expression;
    };
    return VariableParseService;
}());
export { VariableParseService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFyaWFibGVfcGFyc2Vfc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BmYXJyaXMvbW9iaWxlLWRldmtpdC8iLCJzb3VyY2VzIjpbImxpYi92YXJpYWJsZS92YXJpYWJsZV9wYXJzZV9zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBOzs7Ozs7O0dBT0c7QUFDSDtJQU9FOzs7T0FHRztJQUNILDhCQUFZLE9BQXlCO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3pCLENBQUM7SUFFRDs7OztPQUlHO0lBQ0ksb0NBQUssR0FBWixVQUFhLE1BQVcsRUFBRSxPQUFhO1FBQXZDLGlCQStCQztRQTlCQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtZQUVuRCxXQUFXO1lBQ1gsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUMsQ0FBQztTQUU5QzthQUFNLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUVoQyxPQUFPO1lBQ1AsTUFBTSxDQUFDLE9BQU8sQ0FBQyxVQUFDLElBQUksRUFBRSxTQUFTO2dCQUM3QixJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsRUFBRTtvQkFDNUIsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUN6RDtxQkFBTTtvQkFDTCxNQUFNLENBQUMsU0FBUyxDQUFDLEdBQUcsS0FBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7aUJBQy9DO1lBQ0gsQ0FBQyxDQUFDLENBQUM7U0FFSjthQUFNLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxJQUFJLE1BQU0sS0FBSyxJQUFJLEVBQUU7WUFFeEQsWUFBWTtZQUNaLElBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDakMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFBLEdBQUc7Z0JBQ2QsSUFBSSxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxRQUFRLEVBQUU7b0JBQ25DLE1BQU0sQ0FBQyxHQUFHLENBQUMsR0FBRyxLQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztpQkFDMUQ7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEtBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO2lCQUNoRDtZQUNILENBQUMsQ0FBQyxDQUFDO1NBQ0o7UUFFRCxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRUQ7O09BRUc7SUFDSSx1Q0FBUSxHQUFmLFVBQWdCLFVBQWtCLEVBQUUsT0FBYTtRQUMvQyxJQUFNLGdCQUFnQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3pELE9BQU8sQ0FBQyxJQUFJLFFBQVEsQ0FBQyxTQUFTLEdBQUcsZ0JBQWdCLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7O09BSUc7SUFDSyw4Q0FBZSxHQUF2QixVQUF3QixVQUFrQixFQUFFLE9BQVk7UUFFdEQsU0FBUztRQUNULElBQUksVUFBVSxLQUFLLEVBQUUsRUFBRTtZQUNyQixPQUFPLEVBQUUsQ0FBQztTQUNYO1FBRUQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsVUFBQSxNQUFNO1lBQ3pCLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO2dCQUNsQyxVQUFVLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDaEQ7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sVUFBVSxDQUFDO0lBQ3BCLENBQUM7SUFDSCwyQkFBQztBQUFELENBQUMsQUFoRkQsSUFnRkM7QUFFRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5Y+Y6YeP6Kej5p6Q5pyN5YqhXG4gKiBAYXV0aG9yIFdpdHQ8aml3dEBpbnNwdXIuY29tPlxuICovXG5pbXBvcnQgeyBWYXJpYWJsZVBhcnNlciwgVkFSSUFCTEVfUEFSU0VSUyB9IGZyb20gJy4vdmFyaWFibGVfcGFyc2VyJztcbmltcG9ydCB7IEluamVjdG9yICB9IGZyb20gJy4uL2NvcmUvaW5kZXgnO1xuXG5cbi8qKlxuICog5Y+Y6YeP6Kej5p6Q5pyN5YqhXG4gKiDogYzotKPvvJpcbiAqIDHjgIHop6PmnpDlrZfnrKbkuLLkuK3nmoTlj5jph4/vvIzlubbmm7/mjaLmiJDnm7jlupTnmoTlgLzvvJtcbiAqIDLjgIHlr7nooajovr7lvI/ov5vooYzmsYLlgLzjgIJcbiAqXG4gKiBAdG9kbyDlr7nooajovr7lvI/msYLlgLznmoTpg6jliIblkozooajovr7lvI/lip/og73ph43lj6DvvIzmmK/lkKbovaznp7vliLDooajovr7lvI/kuK3vvJ9cbiAqL1xuY2xhc3MgVmFyaWFibGVQYXJzZVNlcnZpY2Uge1xuXG4gIC8qKlxuICAgKiDop6PmnpDlmajpm4blkIhcbiAgICovXG4gIHByaXZhdGUgcGFyc2VyczogVmFyaWFibGVQYXJzZXJbXTtcblxuICAvKipcbiAgICog5p6E6YCg5Y+Y6YeP6Kej5p6Q5pyN5YqhXG4gICAqIEBwYXJhbSBwYXJzZXJzIOino+aekOWZqOmbhuWQiFxuICAgKi9cbiAgY29uc3RydWN0b3IocGFyc2VyczogVmFyaWFibGVQYXJzZXJbXSkge1xuICAgIHRoaXMucGFyc2VycyA9IHBhcnNlcnM7XG4gIH1cblxuICAvKipcbiAgICog6Kej5p6Q6KGo6L6+5byPXG4gICAqIEBwYXJhbSBleHByZXNzaW9uIOihqOi+vuW8j1xuICAgKiBAcGFyYW0gY29udGV4dCDkuIrkuIvmlodcbiAgICovXG4gIHB1YmxpYyBwYXJzZSh0YXJnZXQ6IGFueSwgY29udGV4dD86IGFueSk6IGFueSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdzdHJpbmcnICYmIHRhcmdldC5sZW5ndGggPiAwKSB7XG5cbiAgICAgIC8vIOWtl+espuS4su+8jOebtOaOpeino+aekFxuICAgICAgcmV0dXJuIHRoaXMucGFyc2VFeHByZXNzaW9uKHRhcmdldCwgY29udGV4dCk7XG5cbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0KSkge1xuXG4gICAgICAvLyDpgY3ljobmlbDnu4RcbiAgICAgIHRhcmdldC5mb3JFYWNoKChpdGVtLCBpdGVtSW5kZXgpID0+ICB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICB0YXJnZXRbaXRlbUluZGV4XSA9IHRoaXMucGFyc2VFeHByZXNzaW9uKGl0ZW0sIGNvbnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRhcmdldFtpdGVtSW5kZXhdID0gdGhpcy5wYXJzZShpdGVtLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB0YXJnZXQgPT09ICdvYmplY3QnICYmIHRhcmdldCAhPT0gbnVsbCkge1xuXG4gICAgICAvLyDpgY3ljoblr7nosaHlj6/mnprkuL7lsZ7mgKdcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyh0YXJnZXQpO1xuICAgICAga2V5cy5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0W2tleV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLnBhcnNlRXhwcmVzc2lvbih0YXJnZXRba2V5XSwgY29udGV4dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB0aGlzLnBhcnNlKHRhcmdldFtrZXldLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfVxuXG4gIC8qKlxuICAgKiDooajovr7lvI/msYLlgLxcbiAgICovXG4gIHB1YmxpYyBldmFsdWF0ZShleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ/OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IHBhcnNlZEV4cHJlc3Npb24gPSB0aGlzLnBhcnNlKGV4cHJlc3Npb24sIGNvbnRleHQpO1xuICAgIHJldHVybiAobmV3IEZ1bmN0aW9uKCdyZXR1cm4gJyArIHBhcnNlZEV4cHJlc3Npb24pKSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOino+aekOihqOi+vuW8j1xuICAgKiBAcGFyYW0gZXhwcmVzc2lvbiDooajovr7lvI9cbiAgICogQHBhcmFtIGNvbnRleHQg5LiK5LiL5paHXG4gICAqL1xuICBwcml2YXRlIHBhcnNlRXhwcmVzc2lvbihleHByZXNzaW9uOiBzdHJpbmcsIGNvbnRleHQ6IGFueSk6IHN0cmluZyB7XG5cbiAgICAvLyDnqbrkuLLnm7TmjqXov5Tlm55cbiAgICBpZiAoZXhwcmVzc2lvbiA9PT0gJycpIHtcbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICB0aGlzLnBhcnNlcnMuZm9yRWFjaChwYXJzZXIgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBleHByZXNzaW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICBleHByZXNzaW9uID0gcGFyc2VyLnBhcnNlKGV4cHJlc3Npb24sIGNvbnRleHQpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBleHByZXNzaW9uO1xuICB9XG59XG5cbmV4cG9ydCB7IFZhcmlhYmxlUGFyc2VTZXJ2aWNlIH07XG4iXX0=