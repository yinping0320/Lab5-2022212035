import { ParseUtil } from './parse_util';
/**
 * 状态机变量解析
 * @summary
 *
 * 解析策略：
 * 1、不带frameId，从顶层StateMachine中解析
 * {STATEMACHINE~/states/key}
 * {STATEMACHINE~/renderStates/key}
 *
 * 2、带frameId，从frameId对应的FrameContext的StateMachine中解析
 * {STATEMACHINE~/frameId/states/key}
 * {STATEMACHINE~/frameId/renderStates/key}
 *
 * 存在的问题：
 * 1、不带frameId从顶层StateMachine解析仅为了兼容，将来改为从当前FrameContext的StateMachine中解析；
 * 2、组合表单中顶层StateMachine是主表单的rootFrameContext的StateMachine，显然不合理（既成事实）；
 * 3、farmeId如果是states或renderStates，导致解析失败，几率很小，但又风险。
 */
var StateMachineVariableParser = /** @class */ (function () {
    /**
     * 构造函数
     */
    function StateMachineVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 变量：格式形如：/frameId/componentId/stateName
     * @param context 上下文
     */
    StateMachineVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === "{STATEMACHINE~" + paths[0] + "}") {
            return this.getValue(paths[0], context);
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var searchValue = "{STATEMACHINE~" + path + "}";
            var replaceValue = _this.getValue(path, context);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    };
    /**
     * 提取Session变量名
     * 变量格式：{}
     */
    StateMachineVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的StateMachine变量字符串
        var STATE_MACHINE_PATTERN_G = /\{STATEMACHINE~(\S+?)\}/g;
        var stateMachineVariables = expression.match(STATE_MACHINE_PATTERN_G);
        if (stateMachineVariables === null) {
            return [];
        }
        // 提取后边的路径
        var STATE_MACHINE_PATTERN = /\{STATEMACHINE~(\S+?)\}/;
        stateMachineVariables.forEach(function (sessionVariable) {
            var pathMatches = sessionVariable.match(STATE_MACHINE_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取对应的值
     */
    StateMachineVariableParser.prototype.getValue = function (path, context) {
        var pathObj = this.getPathObj(path);
        var stateMachine = this.getTargetStateMachine(pathObj.frameId, context);
        if (pathObj.type === 'currentState') {
            return stateMachine.context.state;
        }
        else if (pathObj.type === 'renderStates') {
            return stateMachine[pathObj.name];
        }
        else {
            throw new Error("\u4E0D\u652F\u7C7B\u578B\u4E3A" + pathObj.type + "\u7684\u72B6\u6001\u673A\u53D8\u91CF");
        }
    };
    /**
     * 解析path，并获取对应的StateMachine实例
     */
    StateMachineVariableParser.prototype.getTargetStateMachine = function (frameId, context) {
        var targetFrameContext;
        if (frameId) {
            targetFrameContext = ParseUtil.getFrameContextById(context, frameId);
        }
        else {
            targetFrameContext = ParseUtil.getRootFrameContext(context);
        }
        if (!targetFrameContext || !targetFrameContext.stateMachine) {
            throw new Error('找不到对应的状态机实例，请检查！');
        }
        return targetFrameContext.stateMachine;
    };
    /**
     * 将Path解析为格式化的Path对象
     */
    StateMachineVariableParser.prototype.getPathObj = function (path) {
        var parsedPathObj;
        var parts = this.splitPath(path);
        if (parts[0] === 'currentState' || parts[0] === 'renderStates') {
            parsedPathObj = {
                frameId: '',
                type: parts[0],
                name: parts[1]
            };
        }
        else {
            parsedPathObj = {
                frameId: parts[0],
                type: parts[1],
                name: parts[2]
            };
        }
        return parsedPathObj;
    };
    /**
     * 分隔Path
     */
    StateMachineVariableParser.prototype.splitPath = function (path) {
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        return parts;
    };
    return StateMachineVariableParser;
}());
export { StateMachineVariableParser };
//# sourceMappingURL=data:application/json;base64,