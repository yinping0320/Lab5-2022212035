import { ParseUtil } from './parse_util';
/**
 * 数据变量解析
 */
var DataVariableParser = /** @class */ (function () {
    function DataVariableParser() {
    }
    /**
     * 解析变量
     * @param expression 表达式
     * @param context 上下文
     */
    DataVariableParser.prototype.parse = function (expression, context) {
        var _this = this;
        var appContext = ParseUtil.getAppContext(context);
        var paths = this.extractPaths(expression);
        // 1、单个的表达式：直接求值
        if (paths.length === 1 && expression === "{DATA~" + paths[0] + "}") {
            return this.getValue(paths[0], appContext);
        }
        // 2、其他情况：字符串替换
        paths.forEach(function (path) {
            var searchValue = "{DATA~" + path + "}";
            var replaceValue = _this.getValue(path, appContext);
            expression = expression.replace(searchValue, replaceValue);
        });
        return expression;
    };
    /**
     * 提取路径
     */
    DataVariableParser.prototype.extractPaths = function (expression) {
        var paths = [];
        // 查找所有的uiState变量字符串
        var DATA_PATTERN_G = /\{DATA~(\S+?)\}/g;
        var dataVariables = expression.match(DATA_PATTERN_G);
        if (dataVariables === null) {
            return [];
        }
        // 提取后边的路径
        var DATA_PATTERN = /\{DATA~(\S+?)\}/;
        dataVariables.forEach(function (dataVariable) {
            var pathMatches = dataVariable.match(DATA_PATTERN);
            if (pathMatches != null && pathMatches.length === 2) {
                paths.push(pathMatches[1]);
            }
        });
        return paths;
    };
    /**
     * 获取值
     * @param path 路径：/
     */
    DataVariableParser.prototype.getValue = function (path, appContext) {
        var parts = path.split('/').filter(function (part) {
            return part !== '';
        });
        var frameContext = appContext.viewModelContextManager.getContextById(parts[0]);
        if (!frameContext) {
            throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        }
        var bindingData = frameContext.bindingData;
        if (!bindingData) {
            throw new Error(path + "\u4E0D\u6B63\u786E\uFF0C\u8BF7\u68C0\u67E5\uFF01");
        }
        return bindingData.getValue(parts.slice(1));
    };
    return DataVariableParser;
}());
export { DataVariableParser };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YV92YXJpYWJsZV9wYXJzZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AZmFycmlzL21vYmlsZS1kZXZraXQvIiwic291cmNlcyI6WyJsaWIvdmFyaWFibGUvZGF0YV92YXJpYWJsZV9wYXJzZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBTUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUV6Qzs7R0FFRztBQUNIO0lBQUE7SUF3RUEsQ0FBQztJQXRFQzs7OztPQUlHO0lBQ0gsa0NBQUssR0FBTCxVQUFNLFVBQWtCLEVBQUUsT0FBWTtRQUF0QyxpQkFpQkM7UUFoQkMsSUFBTSxVQUFVLEdBQUcsU0FBUyxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxJQUFNLEtBQUssR0FBYSxJQUFJLENBQUMsWUFBWSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRXRELGdCQUFnQjtRQUNoQixJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxJQUFJLFVBQVUsS0FBSyxXQUFTLEtBQUssQ0FBQyxDQUFDLENBQUMsTUFBRyxFQUFFO1lBQzdELE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsVUFBVSxDQUFDLENBQUM7U0FDNUM7UUFFRCxlQUFlO1FBQ2YsS0FBSyxDQUFDLE9BQU8sQ0FBRSxVQUFDLElBQVk7WUFDMUIsSUFBTSxXQUFXLEdBQUcsV0FBUyxJQUFJLE1BQUcsQ0FBQztZQUNyQyxJQUFNLFlBQVksR0FBRyxLQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNyRCxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDN0QsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFRLFVBQVUsQ0FBQztJQUNyQixDQUFDO0lBRUQ7O09BRUc7SUFDSyx5Q0FBWSxHQUFwQixVQUFxQixVQUFrQjtRQUNyQyxJQUFNLEtBQUssR0FBYyxFQUFFLENBQUM7UUFFNUIsb0JBQW9CO1FBQ3BCLElBQU0sY0FBYyxHQUFHLGtCQUFrQixDQUFDO1FBQzFDLElBQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBSSxhQUFhLEtBQUssSUFBSSxFQUFFO1lBQzFCLE9BQU8sRUFBRSxDQUFDO1NBQ1g7UUFFRCxVQUFVO1FBQ1YsSUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUM7UUFDdkMsYUFBYSxDQUFDLE9BQU8sQ0FBRSxVQUFBLFlBQVk7WUFDakMsSUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNyRCxJQUFJLFdBQVcsSUFBSSxJQUFJLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQ25ELEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDNUI7UUFDSCxDQUFDLENBQUMsQ0FBQztRQUNILE9BQU8sS0FBSyxDQUFDO0lBQ2YsQ0FBQztJQUVEOzs7T0FHRztJQUNLLHFDQUFRLEdBQWhCLFVBQWlCLElBQVksRUFBRSxVQUFzQjtRQUNuRCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFDLElBQVk7WUFDaEQsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDO1FBQ3JCLENBQUMsQ0FBQyxDQUFDO1FBRUgsSUFBTSxZQUFZLEdBQUcsVUFBVSxDQUFDLHVCQUF1QixDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNqRixJQUFJLENBQUMsWUFBWSxFQUFFO1lBQ2pCLE1BQU0sSUFBSSxLQUFLLENBQUksSUFBSSxxREFBVSxDQUFDLENBQUM7U0FDcEM7UUFFRCxJQUFNLFdBQVcsR0FBSSxZQUFZLENBQUMsV0FBVyxDQUFDO1FBQzlDLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEIsTUFBTSxJQUFJLEtBQUssQ0FBSSxJQUFJLHFEQUFVLENBQUMsQ0FBQztTQUNwQztRQUNELE9BQU8sV0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUdILHlCQUFDO0FBQUQsQ0FBQyxBQXhFRCxJQXdFQztBQUVELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiDmlbDmja7mupDlj5jph4/op6PmnpBcbiAqIEBhdXRob3IgV2l0dCA8aml3dEBpbnNwdXIuY29tPlxuICovXG5pbXBvcnQgeyBBcHBDb250ZXh0IH0gZnJvbSAnLi4vYXBwL2luZGV4JztcbmltcG9ydCB7IFZhcmlhYmxlUGFyc2VyIH0gZnJvbSAnLi92YXJpYWJsZV9wYXJzZXInO1xuaW1wb3J0IHsgUGFyc2VVdGlsIH0gZnJvbSAnLi9wYXJzZV91dGlsJztcblxuLyoqXG4gKiDmlbDmja7lj5jph4/op6PmnpBcbiAqL1xuY2xhc3MgRGF0YVZhcmlhYmxlUGFyc2VyIGltcGxlbWVudHMgVmFyaWFibGVQYXJzZXIge1xuXG4gIC8qKlxuICAgKiDop6PmnpDlj5jph49cbiAgICogQHBhcmFtIGV4cHJlc3Npb24g6KGo6L6+5byPXG4gICAqIEBwYXJhbSBjb250ZXh0IOS4iuS4i+aWh1xuICAgKi9cbiAgcGFyc2UoZXhwcmVzc2lvbjogc3RyaW5nLCBjb250ZXh0OiBhbnkpOiBhbnkge1xuICAgIGNvbnN0IGFwcENvbnRleHQgPSBQYXJzZVV0aWwuZ2V0QXBwQ29udGV4dChjb250ZXh0KTtcbiAgICBjb25zdCBwYXRoczogc3RyaW5nW10gPSB0aGlzLmV4dHJhY3RQYXRocyhleHByZXNzaW9uKTtcblxuICAgIC8vIDHjgIHljZXkuKrnmoTooajovr7lvI/vvJrnm7TmjqXmsYLlgLxcbiAgICBpZiAocGF0aHMubGVuZ3RoID09PSAxICYmIGV4cHJlc3Npb24gPT09IGB7REFUQX4ke3BhdGhzWzBdfX1gKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShwYXRoc1swXSwgYXBwQ29udGV4dCk7XG4gICAgfVxuXG4gICAgLy8gMuOAgeWFtuS7luaDheWGte+8muWtl+espuS4suabv+aNolxuICAgIHBhdGhzLmZvckVhY2goIChwYXRoOiBzdHJpbmcpID0+IHtcbiAgICAgIGNvbnN0IHNlYXJjaFZhbHVlID0gYHtEQVRBfiR7cGF0aH19YDtcbiAgICAgIGNvbnN0IHJlcGxhY2VWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUocGF0aCwgYXBwQ29udGV4dCk7XG4gICAgICBleHByZXNzaW9uID0gZXhwcmVzc2lvbi5yZXBsYWNlKHNlYXJjaFZhbHVlLCByZXBsYWNlVmFsdWUpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuICBleHByZXNzaW9uO1xuICB9XG5cbiAgLyoqXG4gICAqIOaPkOWPlui3r+W+hFxuICAgKi9cbiAgcHJpdmF0ZSBleHRyYWN0UGF0aHMoZXhwcmVzc2lvbjogc3RyaW5nKSB7XG4gICAgY29uc3QgcGF0aHM6IHN0cmluZ1tdICA9IFtdO1xuXG4gICAgLy8g5p+l5om+5omA5pyJ55qEdWlTdGF0ZeWPmOmHj+Wtl+espuS4slxuICAgIGNvbnN0IERBVEFfUEFUVEVSTl9HID0gL1xce0RBVEF+KFxcUys/KVxcfS9nO1xuICAgIGNvbnN0IGRhdGFWYXJpYWJsZXMgPSBleHByZXNzaW9uLm1hdGNoKERBVEFfUEFUVEVSTl9HKTtcbiAgICBpZiAoZGF0YVZhcmlhYmxlcyA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuIFtdO1xuICAgIH1cblxuICAgIC8vIOaPkOWPluWQjui+ueeahOi3r+W+hFxuICAgIGNvbnN0IERBVEFfUEFUVEVSTiA9IC9cXHtEQVRBfihcXFMrPylcXH0vO1xuICAgIGRhdGFWYXJpYWJsZXMuZm9yRWFjaCggZGF0YVZhcmlhYmxlID0+ICB7XG4gICAgICBjb25zdCBwYXRoTWF0Y2hlcyA9IGRhdGFWYXJpYWJsZS5tYXRjaChEQVRBX1BBVFRFUk4pO1xuICAgICAgaWYgKHBhdGhNYXRjaGVzICE9IG51bGwgJiYgcGF0aE1hdGNoZXMubGVuZ3RoID09PSAyKSB7XG4gICAgICAgIHBhdGhzLnB1c2gocGF0aE1hdGNoZXNbMV0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBwYXRocztcbiAgfVxuXG4gIC8qKlxuICAgKiDojrflj5blgLxcbiAgICogQHBhcmFtIHBhdGgg6Lev5b6E77yaL1xuICAgKi9cbiAgcHJpdmF0ZSBnZXRWYWx1ZShwYXRoOiBzdHJpbmcsIGFwcENvbnRleHQ6IEFwcENvbnRleHQpOiBhbnkge1xuICAgIGNvbnN0IHBhcnRzID0gcGF0aC5zcGxpdCgnLycpLmZpbHRlcigocGFydDogc3RyaW5nKSA9PiB7XG4gICAgICByZXR1cm4gcGFydCAhPT0gJyc7XG4gICAgfSk7XG5cbiAgICBjb25zdCBmcmFtZUNvbnRleHQgPSBhcHBDb250ZXh0LnZpZXdNb2RlbENvbnRleHRNYW5hZ2VyLmdldENvbnRleHRCeUlkKHBhcnRzWzBdKTtcbiAgICBpZiAoIWZyYW1lQ29udGV4dCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke3BhdGh95LiN5q2j56Gu77yM6K+35qOA5p+l77yBYCk7XG4gICAgfVxuXG4gICAgY29uc3QgYmluZGluZ0RhdGEgID0gZnJhbWVDb250ZXh0LmJpbmRpbmdEYXRhO1xuICAgIGlmICghYmluZGluZ0RhdGEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgJHtwYXRofeS4jeato+ehru+8jOivt+ajgOafpe+8gWApO1xuICAgIH1cbiAgICByZXR1cm4gYmluZGluZ0RhdGEuZ2V0VmFsdWUocGFydHMuc2xpY2UoMSkpO1xuICB9XG5cblxufVxuXG5leHBvcnQgeyBEYXRhVmFyaWFibGVQYXJzZXIgfTtcbiJdfQ==