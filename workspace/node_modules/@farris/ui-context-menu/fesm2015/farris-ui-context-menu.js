import { Subject, of } from 'rxjs';
import { Injectable, ComponentFactoryResolver, Injector, Component, ViewEncapsulation, NgZone, Renderer2, Optional, ElementRef, ChangeDetectorRef, Input, ViewChild, ViewChildren, Directive, HostListener, NgModule } from '@angular/core';
import { OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisContextMenuService {
    /**
     * @param {?} cfr
     * @param {?} injector
     */
    constructor(cfr, injector) {
        this.cfr = cfr;
        this.injector = injector;
        this.overlayEle = null;
        this.contextMenuDom = null;
        this.contextMenuRefs = {};
        this.activeDom = null;
        this.showContextMenu = new Subject();
        this.overlayHideSer = this.injector.get(OverLayHiddenService, null);
        if (!this.overlayHideSer) {
            this.overlayHideSer = new OverLayHiddenService();
        }
    }
    /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    createOverlay(cls, opts) {
        /** @type {?} */
        let overlayEle = document.querySelector('.f-context-menu-overlay');
        if (!overlayEle) {
            overlayEle = document.createElement('div');
            overlayEle.classList.add('f-context-menu-overlay', cls);
            overlayEle.style.pointerEvents = 'none';
            document.body.appendChild(overlayEle);
            if (opts.highlight) {
                this.activeDom = document.createElement('div');
                this.activeDom.classList.add('f-context-target-focus');
                overlayEle.appendChild(this.activeDom);
            }
            overlayEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (((/** @type {?} */ (e.target))).className.indexOf('f-context-menu-overlay') > -1) {
                    this.hide();
                }
            }));
            overlayEle.addEventListener('contextmenu', (/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                e.preventDefault();
                e.stopPropagation();
                this.hide();
            }));
        }
        return overlayEle;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    show(options) {
        const { menuItems, event, id, activeDom, context, menuClass, target, activeWidth } = options;
        /** @type {?} */
        let cmpRef = null;
        if (!this.contextMenuRefs) {
            this.contextMenuRefs = {};
        }
        if (!this.contextMenuRefs[id]) {
            /** @type {?} */
            const cmpFactory = this.cfr.resolveComponentFactory(FarrisContextMenuComponent);
            cmpRef = cmpFactory.create(this.injector);
            cmpRef.instance.menuItems = menuItems;
            cmpRef.instance.id = id;
            cmpRef.instance.left = event.pageX;
            cmpRef.instance.top = event.pageY;
            this.contextMenuDom = activeDom;
            this.contextMenuRefs[cmpRef.instance.id] = cmpRef;
        }
        else {
            cmpRef = this.contextMenuRefs[id];
        }
        cmpRef.instance.context = context;
        this.overlayEle = this.createOverlay(menuClass, options);
        this.overlayEle.appendChild(cmpRef.location.nativeElement);
        this.overlayHideSer.registerMouseEvent(this.overlayEle, (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            if (cmpRef.location.nativeElement.contains(e.target)) {
                return;
            }
            this.hide();
        }));
        if (this.activeDom) {
            // const w = target.offsetWidth > this.contextMenuDom.offsetWidth ? this.contextMenuDom.offsetWidth : target.offsetWidth;
            /** @type {?} */
            const w = activeWidth || this.contextMenuDom.offsetWidth;
            this.activeDom.style.width = w + 'px';
            this.activeDom.style.height = this.contextMenuDom.offsetHeight + 'px';
            this.activeDom.style.left = target.getBoundingClientRect().left + 'px';
            this.activeDom.style.top = this.contextMenuDom.getBoundingClientRect().top + 'px';
            this.activeDom.style.display = 'block';
        }
        cmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        const menuPanelDom = cmpRef.instance.menuPanel.nativeElement;
        /** @type {?} */
        const menuPanelHeight = menuPanelDom.offsetHeight;
        if (window.innerHeight - event.pageY < menuPanelHeight) {
            cmpRef.instance.top = event.pageY - menuPanelHeight;
        }
        if (window.innerWidth - event.pageX < menuPanelDom.offsetWidth) {
            cmpRef.instance.left = event.pageX - menuPanelDom.offsetWidth;
        }
        cmpRef.changeDetectorRef.detectChanges();
    }
    /**
     * @return {?}
     */
    hide() {
        if (this.overlayEle) {
            this.overlayEle.style.display = 'none';
            if (this.contextMenuRefs) {
                for (const key of Object.keys(this.contextMenuRefs)) {
                    this.contextMenuRefs[key].hostView.destroy();
                }
                this.contextMenuRefs = null;
            }
            // 移除DOM 样式
            if (this.contextMenuDom) {
                this.contextMenuDom.className = this.contextMenuDom.className.replace('f-context-menu-active', '');
            }
            this.overlayHideSer.destory(this.overlayEle);
            this.overlayEle.remove();
        }
        this.activeDom = null;
        this.overlayEle = null;
    }
}
FarrisContextMenuService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FarrisContextMenuService.ctorParameters = () => [
    { type: ComponentFactoryResolver },
    { type: Injector }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisContextMenuComponent {
    /**
     * @param {?} injector
     * @param {?} ngzone
     * @param {?} render
     * @param {?} ctxMenuSer
     * @param {?} elRef
     * @param {?} cd
     */
    constructor(injector, ngzone, render, ctxMenuSer, elRef, cd) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.ctxMenuSer = ctxMenuSer;
        this.elRef = elRef;
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onMenuItemClick($event, item) {
        $event.stopPropagation();
        if (item.disable) {
            return;
        }
        if (item.children && item.children.length) {
            return;
        }
        this.ctxMenuSer.hide();
        if (item.handle) {
            item.handle(Object.assign({}, (this.context || {}), { instance: this, menu: item }));
        }
    }
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    onMouseEnter($event, item) {
        if (item.children && item.children.length) {
            /** @type {?} */
            const childCtxMenu = this.subMenus.find((/**
             * @param {?} m
             * @return {?}
             */
            m => m.elRef.nativeElement.id === item.id + '_submenu'));
            if (childCtxMenu) {
                // childCtxMenu.context = this.context;
                childCtxMenu.parent = this;
                /** @type {?} */
                const childMenuPanel = childCtxMenu.menuPanel.nativeElement;
                /** @type {?} */
                const panel = this.menuPanel.nativeElement;
                /** @type {?} */
                const childContainerWidth = window.innerWidth - panel.offsetLeft - panel.offsetWidth;
                if (childMenuPanel.offsetWidth > childContainerWidth) {
                    /** @type {?} */
                    const l = -panel.offsetWidth;
                    childMenuPanel.style.left = l + 'px';
                }
                /** @type {?} */
                const childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
                if (childContainerHeight < childMenuPanel.offsetHeight) {
                    /** @type {?} */
                    const t = window.innerHeight - panel.offsetTop - childMenuPanel.offsetHeight - 10;
                    childMenuPanel.style.top = t + 'px';
                }
            }
        }
    }
}
FarrisContextMenuComponent.decorators = [
    { type: Component, args: [{
                selector: 'farris-menus',
                template: "\r\n<div class=\"f-context-menu-panel\" tabindex=\"0\" [style.left.px]=\"left\" [style.top.px]=\"top\" #menuPanel style=\"pointer-events: auto\">\r\n\r\n    <ul class=\"menu-list\">\r\n        <li class=\"menu-item d-flex\" *ngFor=\"let item of menuItems; index as i;last as islast;first as isfirst\" (click)=\"onMenuItemClick($event, item)\" \r\n        [class.menu-sep]=\"item === '-'\" (mouseenter)=\"onMouseEnter($event, item)\"\r\n        [class.disabled]=\"item.disable\" #menuitemli>\r\n            <ng-container *ngIf=\"item !== '-' \">\r\n                <div class=\"menu-item-icon\">\r\n                    <span class=\"f-icon {{ item.icon }}\" *ngIf=\"item.icon\"></span>\r\n                </div>\r\n                <div class=\"menu-item-text f-utils-fill d-flex\">\r\n                    <span style=\"display: block\" class=\"f-utils-fill\">{{ item.title }}</span>\r\n                    <span class=\"arrow-right\" *ngIf=\"item.children && item.children.length\">\r\n                        <span class=\"f-icon f-icon-arrow-e\"></span>\r\n                    </span>\r\n                </div>\r\n                <farris-menus #childMenu [context]=\"context\" [attr.id]=\"item.id+ '_submenu'\" *ngIf=\"item.children && item.children.length\" [menuItems]=\"item.children\"\r\n                    [top]=\"menuitemli.offsetTop - 3\" [left]=\"menuPanel.offsetWidth - 5\"\r\n                ></farris-menus>\r\n            </ng-container>\r\n        </li>\r\n    </ul>\r\n\r\n</div>\r\n",
                encapsulation: ViewEncapsulation.None,
                exportAs: 'contextMenuRef',
                styles: [`
    .f-context-menu-overlay {
        position: fixed;
        z-index: 9999;
        top: 0;
        left: 0;
        height: 100%;
        width: 100%;
    }
    .f-context-menu-panel {
        position: absolute;
        top: 200px;
        left: 300px;
        background: #fff;
        border: 1px solid #c6c6c6;
        border-radius: 5px;
        box-shadow: 3px 3px 5px #b8b4b4;
        padding: 3px 0px;
        min-width: 180px;
        max-width: 290px;
    }

    .f-context-menu-panel .menu-list {
        list-style: none;
    }

    .f-context-menu-panel .menu-item {
        height: 28px;
        line-height: 28px;
        cursor: pointer;
    }

    .f-context-menu-panel .menu-item.disabled {
        opacity: 0.4;
        cursor: default;
    }

    .f-context-menu-panel .menu-item.menu-sep{
        height: 6px;
        border-top: 1px solid #ccc;
        border-bottom: 1px solid #fff;
        margin-top: 5px;
    }

    .f-context-menu-panel .menu-item.active,
    .f-context-menu-panel .menu-item:hover:not(.menu-sep) {
        background: #e4e7ef;
    }
    .f-context-menu-panel .menu-item .f-context-menu-panel  {
        display: none;
    }

    .f-context-menu-panel .menu-item:hover  .f-context-menu-panel {
        display: block;
    }

    .f-context-menu-panel .menu-item-icon {
        width: 40px;
        text-align: center;
        font-size: 18px;
    }

    .f-context-target-focus {
        position: relative;
        top: 100px;
        left: 0;
        border: 1px dashed;
        height: 29px;
        display: none;
        background: #a1c8fb;
        opacity: 0.2;
    }

    .f-context-menu-panel .menu-item-text .arrow-right {
        width: 32px; height: 100%;display:block; text-align: center;
    }
        `]
            }] }
];
/** @nocollapse */
FarrisContextMenuComponent.ctorParameters = () => [
    { type: Injector },
    { type: NgZone },
    { type: Renderer2 },
    { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
    { type: ElementRef },
    { type: ChangeDetectorRef }
];
FarrisContextMenuComponent.propDecorators = {
    menuItems: [{ type: Input }],
    left: [{ type: Input }],
    top: [{ type: Input }],
    context: [{ type: Input }],
    menuPanel: [{ type: ViewChild, args: ['menuPanel',] }],
    subMenus: [{ type: ViewChildren, args: [FarrisContextMenuComponent,] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisContextMenuDirective {
    /**
     * @param {?} ctxMenuSer
     * @param {?} injector
     * @param {?} elRef
     * @param {?} render
     */
    constructor(ctxMenuSer, injector, elRef, render) {
        this.ctxMenuSer = ctxMenuSer;
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.disabled = false;
        this.highlight = true;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.id = this.contextMenuId();
        if (!this.beforeShowContextMenu) {
            this.beforeShowContextMenu = (/**
             * @return {?}
             */
            () => of(true));
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onContextMenu(event) {
        if (!this.disabled) {
            /** @type {?} */
            let contextMenuDom = null;
            if (this.activeDomName) {
                contextMenuDom = ((/** @type {?} */ (event.target))).closest(this.activeDomName);
                if (contextMenuDom) {
                    this.render.addClass(contextMenuDom, 'f-context-menu-active');
                }
                else {
                    return;
                }
            }
            /** @type {?} */
            const beforeShow$ = this.beforeShowContextMenu({ event, contextMenuDom });
            if (beforeShow$ && beforeShow$.subscribe) {
                beforeShow$.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    /** @type {?} */
                    const ctxData = this.getContextData(e);
                    this.removeSurplusMenus();
                    if (ctxData.show) {
                        document.body.click();
                        // if (!this.ctxMenuSer) {
                        //     const cfr = this.injector.get(ComponentFactoryResolver);
                        //     this.ctxMenuSer = new FarrisContextMenuService(cfr, this.injector);
                        // }
                        this.ctxMenuSer.show({
                            menuItems: this.getViewMenuItems(ctxData.data),
                            event,
                            id: this.id,
                            activeDom: contextMenuDom,
                            context: ctxData.data,
                            menuClass: this.menuClass,
                            target: this.elRef.nativeElement,
                            activeWidth: e['focusTargetWidth'],
                            highlight: this.highlight
                        });
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }));
            }
        }
    }
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    removeSurplusMenus() {
        if (this.menuItems && this.menuItems.length) {
            this.menuItems.forEach((/**
             * @param {?} m
             * @return {?}
             */
            (m) => {
                if (m !== '-' && m.children && m.children.length) {
                    m.children.forEach((/**
                     * @param {?} cm
                     * @return {?}
                     */
                    cm => {
                        if (cm !== '-') {
                            cm.children = [];
                        }
                    }));
                }
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    contextMenuId() {
        /** @type {?} */
        const id = this.elRef.nativeElement.id;
        if (id) {
            return `${id}-context-menu`;
        }
        else {
            return 'context-menu_' + new Date().getTime();
        }
    }
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    getContextData(e) {
        if (typeof e === 'boolean') {
            return { show: e, data: null };
        }
        return e;
    }
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    getViewMenuItems(context) {
        if (this.menuItems && this.menuItems.length) {
            return this.checkMenuItems(this.menuItems, context);
        }
        return [];
    }
    /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    checkMenuItems(menuItems, context) {
        /** @type {?} */
        const menus = menuItems.map((/**
         * @param {?} m
         * @return {?}
         */
        (m) => {
            if (typeof m === 'string') {
                return m;
            }
            else {
                /** @type {?} */
                const n = this.checkVisibleAndDisable(m, context);
                if (n.children) {
                    n.children = this.checkMenuItems(n.children, context);
                }
                return n;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        n => {
            return n === '-' || n.visible;
        }));
        if (menus && menus.length) {
            if (menus[0] === '-') {
                menus.shift(0);
            }
            if (menus[menus.length - 1] === '-') {
                menus.pop(0);
            }
        }
        return menus;
    }
    /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    checkVisibleAndDisable(m, context) {
        /** @type {?} */
        const n = Object.assign({}, m);
        if (!n.hasOwnProperty('visible')) {
            n.visible = true;
        }
        else {
            if (typeof n.visible === 'function') {
                n.visible = n.visible(context);
            }
        }
        if (!n.hasOwnProperty('disable')) {
            n.disable = false;
        }
        else {
            if (typeof n.disable === 'function') {
                n.disable = n.disable(context);
            }
        }
        return n;
    }
}
FarrisContextMenuDirective.decorators = [
    { type: Directive, args: [{
                selector: '[farris-context-menus]',
            },] }
];
/** @nocollapse */
FarrisContextMenuDirective.ctorParameters = () => [
    { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
    { type: Injector },
    { type: ElementRef },
    { type: Renderer2 }
];
FarrisContextMenuDirective.propDecorators = {
    menuItems: [{ type: Input, args: ['farris-context-menus',] }],
    menuClass: [{ type: Input }],
    disabled: [{ type: Input }],
    context: [{ type: Input }],
    beforeShowContextMenu: [{ type: Input }],
    activeDomName: [{ type: Input }],
    highlight: [{ type: Input }],
    onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FarrisContextMenuModule {
}
FarrisContextMenuModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    FarrisContextMenuComponent,
                    FarrisContextMenuDirective
                ],
                imports: [
                    CommonModule,
                    FarrisCommonModule
                ],
                exports: [
                    FarrisContextMenuComponent,
                    FarrisContextMenuDirective
                ],
                entryComponents: [
                    FarrisContextMenuComponent
                ],
                providers: [
                    FarrisContextMenuService
                ],
            },] }
];

export { FarrisContextMenuComponent, FarrisContextMenuDirective, FarrisContextMenuModule, FarrisContextMenuService };
//# sourceMappingURL=farris-ui-context-menu.js.map
