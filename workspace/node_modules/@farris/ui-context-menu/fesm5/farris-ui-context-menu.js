import { __values, __assign } from 'tslib';
import { Subject, of } from 'rxjs';
import { Injectable, ComponentFactoryResolver, Injector, Component, ViewEncapsulation, NgZone, Renderer2, Optional, ElementRef, ChangeDetectorRef, Input, ViewChild, ViewChildren, Directive, HostListener, NgModule } from '@angular/core';
import { OverLayHiddenService, FarrisCommonModule } from '@farris/ui-common';
import { CommonModule } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisContextMenuService = /** @class */ (function () {
    function FarrisContextMenuService(cfr, injector) {
        this.cfr = cfr;
        this.injector = injector;
        this.overlayEle = null;
        this.contextMenuDom = null;
        this.contextMenuRefs = {};
        this.activeDom = null;
        this.showContextMenu = new Subject();
        this.overlayHideSer = this.injector.get(OverLayHiddenService, null);
        if (!this.overlayHideSer) {
            this.overlayHideSer = new OverLayHiddenService();
        }
    }
    /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    FarrisContextMenuService.prototype.createOverlay = /**
     * @private
     * @param {?=} cls
     * @param {?=} opts
     * @return {?}
     */
    function (cls, opts) {
        var _this = this;
        /** @type {?} */
        var overlayEle = document.querySelector('.f-context-menu-overlay');
        if (!overlayEle) {
            overlayEle = document.createElement('div');
            overlayEle.classList.add('f-context-menu-overlay', cls);
            overlayEle.style.pointerEvents = 'none';
            document.body.appendChild(overlayEle);
            if (opts.highlight) {
                this.activeDom = document.createElement('div');
                this.activeDom.classList.add('f-context-target-focus');
                overlayEle.appendChild(this.activeDom);
            }
            overlayEle.addEventListener('click', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (((/** @type {?} */ (e.target))).className.indexOf('f-context-menu-overlay') > -1) {
                    _this.hide();
                }
            }));
            overlayEle.addEventListener('contextmenu', (/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                e.preventDefault();
                e.stopPropagation();
                _this.hide();
            }));
        }
        return overlayEle;
    };
    /**
     * @param {?} options
     * @return {?}
     */
    FarrisContextMenuService.prototype.show = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        var menuItems = options.menuItems, event = options.event, id = options.id, activeDom = options.activeDom, context = options.context, menuClass = options.menuClass, target = options.target, activeWidth = options.activeWidth;
        /** @type {?} */
        var cmpRef = null;
        if (!this.contextMenuRefs) {
            this.contextMenuRefs = {};
        }
        if (!this.contextMenuRefs[id]) {
            /** @type {?} */
            var cmpFactory = this.cfr.resolveComponentFactory(FarrisContextMenuComponent);
            cmpRef = cmpFactory.create(this.injector);
            cmpRef.instance.menuItems = menuItems;
            cmpRef.instance.id = id;
            cmpRef.instance.left = event.pageX;
            cmpRef.instance.top = event.pageY;
            this.contextMenuDom = activeDom;
            this.contextMenuRefs[cmpRef.instance.id] = cmpRef;
        }
        else {
            cmpRef = this.contextMenuRefs[id];
        }
        cmpRef.instance.context = context;
        this.overlayEle = this.createOverlay(menuClass, options);
        this.overlayEle.appendChild(cmpRef.location.nativeElement);
        this.overlayHideSer.registerMouseEvent(this.overlayEle, (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            if (cmpRef.location.nativeElement.contains(e.target)) {
                return;
            }
            _this.hide();
        }));
        if (this.activeDom) {
            // const w = target.offsetWidth > this.contextMenuDom.offsetWidth ? this.contextMenuDom.offsetWidth : target.offsetWidth;
            /** @type {?} */
            var w = activeWidth || this.contextMenuDom.offsetWidth;
            this.activeDom.style.width = w + 'px';
            this.activeDom.style.height = this.contextMenuDom.offsetHeight + 'px';
            this.activeDom.style.left = target.getBoundingClientRect().left + 'px';
            this.activeDom.style.top = this.contextMenuDom.getBoundingClientRect().top + 'px';
            this.activeDom.style.display = 'block';
        }
        cmpRef.changeDetectorRef.detectChanges();
        /** @type {?} */
        var menuPanelDom = cmpRef.instance.menuPanel.nativeElement;
        /** @type {?} */
        var menuPanelHeight = menuPanelDom.offsetHeight;
        if (window.innerHeight - event.pageY < menuPanelHeight) {
            cmpRef.instance.top = event.pageY - menuPanelHeight;
        }
        if (window.innerWidth - event.pageX < menuPanelDom.offsetWidth) {
            cmpRef.instance.left = event.pageX - menuPanelDom.offsetWidth;
        }
        cmpRef.changeDetectorRef.detectChanges();
    };
    /**
     * @return {?}
     */
    FarrisContextMenuService.prototype.hide = /**
     * @return {?}
     */
    function () {
        var e_1, _a;
        if (this.overlayEle) {
            this.overlayEle.style.display = 'none';
            if (this.contextMenuRefs) {
                try {
                    for (var _b = __values(Object.keys(this.contextMenuRefs)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var key = _c.value;
                        this.contextMenuRefs[key].hostView.destroy();
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                this.contextMenuRefs = null;
            }
            // 移除DOM 样式
            if (this.contextMenuDom) {
                this.contextMenuDom.className = this.contextMenuDom.className.replace('f-context-menu-active', '');
            }
            this.overlayHideSer.destory(this.overlayEle);
            this.overlayEle.remove();
        }
        this.activeDom = null;
        this.overlayEle = null;
    };
    FarrisContextMenuService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FarrisContextMenuService.ctorParameters = function () { return [
        { type: ComponentFactoryResolver },
        { type: Injector }
    ]; };
    return FarrisContextMenuService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisContextMenuComponent = /** @class */ (function () {
    function FarrisContextMenuComponent(injector, ngzone, render, ctxMenuSer, elRef, cd) {
        this.injector = injector;
        this.ngzone = ngzone;
        this.render = render;
        this.ctxMenuSer = ctxMenuSer;
        this.elRef = elRef;
        this.cd = cd;
    }
    /**
     * @return {?}
     */
    FarrisContextMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FarrisContextMenuComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    FarrisContextMenuComponent.prototype.onMenuItemClick = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        $event.stopPropagation();
        if (item.disable) {
            return;
        }
        if (item.children && item.children.length) {
            return;
        }
        this.ctxMenuSer.hide();
        if (item.handle) {
            item.handle(__assign({}, (this.context || {}), { instance: this, menu: item }));
        }
    };
    /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    FarrisContextMenuComponent.prototype.onMouseEnter = /**
     * @param {?} $event
     * @param {?} item
     * @return {?}
     */
    function ($event, item) {
        if (item.children && item.children.length) {
            /** @type {?} */
            var childCtxMenu = this.subMenus.find((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.elRef.nativeElement.id === item.id + '_submenu'; }));
            if (childCtxMenu) {
                // childCtxMenu.context = this.context;
                childCtxMenu.parent = this;
                /** @type {?} */
                var childMenuPanel = childCtxMenu.menuPanel.nativeElement;
                /** @type {?} */
                var panel = this.menuPanel.nativeElement;
                /** @type {?} */
                var childContainerWidth = window.innerWidth - panel.offsetLeft - panel.offsetWidth;
                if (childMenuPanel.offsetWidth > childContainerWidth) {
                    /** @type {?} */
                    var l = -panel.offsetWidth;
                    childMenuPanel.style.left = l + 'px';
                }
                /** @type {?} */
                var childContainerHeight = window.innerHeight - childMenuPanel.getBoundingClientRect().top;
                if (childContainerHeight < childMenuPanel.offsetHeight) {
                    /** @type {?} */
                    var t = window.innerHeight - panel.offsetTop - childMenuPanel.offsetHeight - 10;
                    childMenuPanel.style.top = t + 'px';
                }
            }
        }
    };
    FarrisContextMenuComponent.decorators = [
        { type: Component, args: [{
                    selector: 'farris-menus',
                    template: "\r\n<div class=\"f-context-menu-panel\" tabindex=\"0\" [style.left.px]=\"left\" [style.top.px]=\"top\" #menuPanel style=\"pointer-events: auto\">\r\n\r\n    <ul class=\"menu-list\">\r\n        <li class=\"menu-item d-flex\" *ngFor=\"let item of menuItems; index as i;last as islast;first as isfirst\" (click)=\"onMenuItemClick($event, item)\" \r\n        [class.menu-sep]=\"item === '-'\" (mouseenter)=\"onMouseEnter($event, item)\"\r\n        [class.disabled]=\"item.disable\" #menuitemli>\r\n            <ng-container *ngIf=\"item !== '-' \">\r\n                <div class=\"menu-item-icon\">\r\n                    <span class=\"f-icon {{ item.icon }}\" *ngIf=\"item.icon\"></span>\r\n                </div>\r\n                <div class=\"menu-item-text f-utils-fill d-flex\">\r\n                    <span style=\"display: block\" class=\"f-utils-fill\">{{ item.title }}</span>\r\n                    <span class=\"arrow-right\" *ngIf=\"item.children && item.children.length\">\r\n                        <span class=\"f-icon f-icon-arrow-e\"></span>\r\n                    </span>\r\n                </div>\r\n                <farris-menus #childMenu [context]=\"context\" [attr.id]=\"item.id+ '_submenu'\" *ngIf=\"item.children && item.children.length\" [menuItems]=\"item.children\"\r\n                    [top]=\"menuitemli.offsetTop - 3\" [left]=\"menuPanel.offsetWidth - 5\"\r\n                ></farris-menus>\r\n            </ng-container>\r\n        </li>\r\n    </ul>\r\n\r\n</div>\r\n",
                    encapsulation: ViewEncapsulation.None,
                    exportAs: 'contextMenuRef',
                    styles: ["\n    .f-context-menu-overlay {\n        position: fixed;\n        z-index: 9999;\n        top: 0;\n        left: 0;\n        height: 100%;\n        width: 100%;\n    }\n    .f-context-menu-panel {\n        position: absolute;\n        top: 200px;\n        left: 300px;\n        background: #fff;\n        border: 1px solid #c6c6c6;\n        border-radius: 5px;\n        box-shadow: 3px 3px 5px #b8b4b4;\n        padding: 3px 0px;\n        min-width: 180px;\n        max-width: 290px;\n    }\n\n    .f-context-menu-panel .menu-list {\n        list-style: none;\n    }\n\n    .f-context-menu-panel .menu-item {\n        height: 28px;\n        line-height: 28px;\n        cursor: pointer;\n    }\n\n    .f-context-menu-panel .menu-item.disabled {\n        opacity: 0.4;\n        cursor: default;\n    }\n\n    .f-context-menu-panel .menu-item.menu-sep{\n        height: 6px;\n        border-top: 1px solid #ccc;\n        border-bottom: 1px solid #fff;\n        margin-top: 5px;\n    }\n\n    .f-context-menu-panel .menu-item.active,\n    .f-context-menu-panel .menu-item:hover:not(.menu-sep) {\n        background: #e4e7ef;\n    }\n    .f-context-menu-panel .menu-item .f-context-menu-panel  {\n        display: none;\n    }\n\n    .f-context-menu-panel .menu-item:hover  .f-context-menu-panel {\n        display: block;\n    }\n\n    .f-context-menu-panel .menu-item-icon {\n        width: 40px;\n        text-align: center;\n        font-size: 18px;\n    }\n\n    .f-context-target-focus {\n        position: relative;\n        top: 100px;\n        left: 0;\n        border: 1px dashed;\n        height: 29px;\n        display: none;\n        background: #a1c8fb;\n        opacity: 0.2;\n    }\n\n    .f-context-menu-panel .menu-item-text .arrow-right {\n        width: 32px; height: 100%;display:block; text-align: center;\n    }\n        "]
                }] }
    ];
    /** @nocollapse */
    FarrisContextMenuComponent.ctorParameters = function () { return [
        { type: Injector },
        { type: NgZone },
        { type: Renderer2 },
        { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
        { type: ElementRef },
        { type: ChangeDetectorRef }
    ]; };
    FarrisContextMenuComponent.propDecorators = {
        menuItems: [{ type: Input }],
        left: [{ type: Input }],
        top: [{ type: Input }],
        context: [{ type: Input }],
        menuPanel: [{ type: ViewChild, args: ['menuPanel',] }],
        subMenus: [{ type: ViewChildren, args: [FarrisContextMenuComponent,] }]
    };
    return FarrisContextMenuComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisContextMenuDirective = /** @class */ (function () {
    function FarrisContextMenuDirective(ctxMenuSer, injector, elRef, render) {
        this.ctxMenuSer = ctxMenuSer;
        this.injector = injector;
        this.elRef = elRef;
        this.render = render;
        this.disabled = false;
        this.highlight = true;
    }
    /**
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.id = this.contextMenuId();
        if (!this.beforeShowContextMenu) {
            this.beforeShowContextMenu = (/**
             * @return {?}
             */
            function () { return of(true); });
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.onContextMenu = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        if (!this.disabled) {
            /** @type {?} */
            var contextMenuDom_1 = null;
            if (this.activeDomName) {
                contextMenuDom_1 = ((/** @type {?} */ (event.target))).closest(this.activeDomName);
                if (contextMenuDom_1) {
                    this.render.addClass(contextMenuDom_1, 'f-context-menu-active');
                }
                else {
                    return;
                }
            }
            /** @type {?} */
            var beforeShow$ = this.beforeShowContextMenu({ event: event, contextMenuDom: contextMenuDom_1 });
            if (beforeShow$ && beforeShow$.subscribe) {
                beforeShow$.subscribe((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    /** @type {?} */
                    var ctxData = _this.getContextData(e);
                    _this.removeSurplusMenus();
                    if (ctxData.show) {
                        document.body.click();
                        // if (!this.ctxMenuSer) {
                        //     const cfr = this.injector.get(ComponentFactoryResolver);
                        //     this.ctxMenuSer = new FarrisContextMenuService(cfr, this.injector);
                        // }
                        _this.ctxMenuSer.show({
                            menuItems: _this.getViewMenuItems(ctxData.data),
                            event: event,
                            id: _this.id,
                            activeDom: contextMenuDom_1,
                            context: ctxData.data,
                            menuClass: _this.menuClass,
                            target: _this.elRef.nativeElement,
                            activeWidth: e['focusTargetWidth'],
                            highlight: _this.highlight
                        });
                        event.preventDefault();
                        event.stopPropagation();
                    }
                }));
            }
        }
    };
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.removeSurplusMenus = 
    // 删除第3层及以后的菜单，仅支持两层菜单展示
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.menuItems && this.menuItems.length) {
            this.menuItems.forEach((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (m !== '-' && m.children && m.children.length) {
                    m.children.forEach((/**
                     * @param {?} cm
                     * @return {?}
                     */
                    function (cm) {
                        if (cm !== '-') {
                            cm.children = [];
                        }
                    }));
                }
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.contextMenuId = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var id = this.elRef.nativeElement.id;
        if (id) {
            return id + "-context-menu";
        }
        else {
            return 'context-menu_' + new Date().getTime();
        }
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.getContextData = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (typeof e === 'boolean') {
            return { show: e, data: null };
        }
        return e;
    };
    /**
     * @private
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.getViewMenuItems = /**
     * @private
     * @param {?} context
     * @return {?}
     */
    function (context) {
        if (this.menuItems && this.menuItems.length) {
            return this.checkMenuItems(this.menuItems, context);
        }
        return [];
    };
    /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.checkMenuItems = /**
     * @private
     * @param {?} menuItems
     * @param {?} context
     * @return {?}
     */
    function (menuItems, context) {
        var _this = this;
        /** @type {?} */
        var menus = menuItems.map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            if (typeof m === 'string') {
                return m;
            }
            else {
                /** @type {?} */
                var n = _this.checkVisibleAndDisable(m, context);
                if (n.children) {
                    n.children = _this.checkMenuItems(n.children, context);
                }
                return n;
            }
        })).filter((/**
         * @param {?} n
         * @return {?}
         */
        function (n) {
            return n === '-' || n.visible;
        }));
        if (menus && menus.length) {
            if (menus[0] === '-') {
                menus.shift(0);
            }
            if (menus[menus.length - 1] === '-') {
                menus.pop(0);
            }
        }
        return menus;
    };
    /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    FarrisContextMenuDirective.prototype.checkVisibleAndDisable = /**
     * @private
     * @param {?} m
     * @param {?} context
     * @return {?}
     */
    function (m, context) {
        /** @type {?} */
        var n = __assign({}, m);
        if (!n.hasOwnProperty('visible')) {
            n.visible = true;
        }
        else {
            if (typeof n.visible === 'function') {
                n.visible = n.visible(context);
            }
        }
        if (!n.hasOwnProperty('disable')) {
            n.disable = false;
        }
        else {
            if (typeof n.disable === 'function') {
                n.disable = n.disable(context);
            }
        }
        return n;
    };
    FarrisContextMenuDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[farris-context-menus]',
                },] }
    ];
    /** @nocollapse */
    FarrisContextMenuDirective.ctorParameters = function () { return [
        { type: FarrisContextMenuService, decorators: [{ type: Optional }] },
        { type: Injector },
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    FarrisContextMenuDirective.propDecorators = {
        menuItems: [{ type: Input, args: ['farris-context-menus',] }],
        menuClass: [{ type: Input }],
        disabled: [{ type: Input }],
        context: [{ type: Input }],
        beforeShowContextMenu: [{ type: Input }],
        activeDomName: [{ type: Input }],
        highlight: [{ type: Input }],
        onContextMenu: [{ type: HostListener, args: ['contextmenu', ['$event'],] }]
    };
    return FarrisContextMenuDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FarrisContextMenuModule = /** @class */ (function () {
    function FarrisContextMenuModule() {
    }
    FarrisContextMenuModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        FarrisContextMenuComponent,
                        FarrisContextMenuDirective
                    ],
                    imports: [
                        CommonModule,
                        FarrisCommonModule
                    ],
                    exports: [
                        FarrisContextMenuComponent,
                        FarrisContextMenuDirective
                    ],
                    entryComponents: [
                        FarrisContextMenuComponent
                    ],
                    providers: [
                        FarrisContextMenuService
                    ],
                },] }
    ];
    return FarrisContextMenuModule;
}());

export { FarrisContextMenuComponent, FarrisContextMenuDirective, FarrisContextMenuModule, FarrisContextMenuService };
//# sourceMappingURL=farris-ui-context-menu.js.map
